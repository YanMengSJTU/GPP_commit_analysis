diff --git a/jsprit-analysis/src/test/java/com/graphhopper/jsprit/analysis/toolbox/CustomJob.java b/jsprit-analysis/src/test/java/com/graphhopper/jsprit/analysis/toolbox/CustomJob.java
deleted file mode 100644
index 2009c06fa..000000000
--- a/jsprit-analysis/src/test/java/com/graphhopper/jsprit/analysis/toolbox/CustomJob.java
+++ /dev/null
@@ -1,144 +0,0 @@
-/*
- * Licensed to GraphHopper GmbH under one or more contributor
- * license agreements. See the NOTICE file distributed with this work for
- * additional information regarding copyright ownership.
- *
- * GraphHopper GmbH licenses this file to you under the Apache License,
- * Version 2.0 (the "License"); you may not use this file except in
- * compliance with the License. You may obtain a copy of the License at
- *
- *       http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.graphhopper.jsprit.analysis.toolbox;
-
-import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.SizeDimension;
-import com.graphhopper.jsprit.core.problem.job.AbstractJob;
-import com.graphhopper.jsprit.core.problem.job.JobActivityList;
-import com.graphhopper.jsprit.core.problem.job.SequentialJobActivityList;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivity;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.ExchangeActivity;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivity;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-
-/**
- * Created by schroeder on 16/11/16.
- */
-public class CustomJob extends AbstractJob {
-
-    public static abstract class BuilderBase<T extends CustomJob, B extends CustomJob.BuilderBase<T, B>>
-        extends JobBuilder<T, B> {
-
-        List<Location> locs = new ArrayList<>();
-
-        List<SizeDimension> cap = new ArrayList<>();
-
-        List<String> types = new ArrayList<>();
-
-        public BuilderBase(String id) {
-            super(id);
-        }
-
-        public CustomJob.BuilderBase<T, B> addPickup(Location location, SizeDimension loadChange) {
-            add(location, loadChange);
-            types.add("pickup");
-            return this;
-        }
-
-        private void add(Location location, SizeDimension loadChange) {
-            locs.add(location);
-            cap.add(loadChange);
-        }
-
-        public CustomJob.BuilderBase<T, B> addDelivery(Location location, SizeDimension loadChange) {
-            add(location, loadChange);
-            types.add("delivery");
-            return this;
-        }
-
-        public CustomJob.BuilderBase<T, B> addExchange(Location location, SizeDimension loadChange) {
-            add(location, loadChange);
-            types.add("exchange");
-            return this;
-        }
-
-
-
-        public List<Location> getLocs() {
-            return locs;
-        }
-
-        public List<SizeDimension> getCaps() {
-            return cap;
-        }
-
-        public List<String> getTypes() {
-            return types;
-        }
-
-        protected void validate() {
-
-        }
-    }
-
-    public static final class Builder extends CustomJob.BuilderBase<CustomJob, CustomJob.Builder> {
-
-        public static CustomJob.Builder newInstance(String id) {
-            return new CustomJob.Builder(id);
-        }
-
-        public Builder(String id) {
-            super(id);
-        }
-
-        @Override
-        protected CustomJob createInstance() {
-            return new CustomJob(this);
-        }
-
-    }
-
-    /**
-     * Builder based constructor.
-     *
-     * @param builder The builder instance.
-     * @see JobBuilder
-     */
-    protected CustomJob(JobBuilder<?, ?> builder) {
-        super(builder);
-
-    }
-
-    @Override
-    public SizeDimension getSize() {
-        return SizeDimension.EMPTY;
-    }
-
-    @Override
-    protected void createActivities(JobBuilder<? extends AbstractJob, ?> jobBuilder) {
-        CustomJob.Builder builder = (CustomJob.Builder) jobBuilder;
-        JobActivityList list = new SequentialJobActivityList(this);
-        for (int i = 0; i < builder.getLocs().size(); i++) {
-            if (builder.getTypes().get(i).equals("pickup")) {
-                list.addActivity(new PickupActivity(this, "pick", builder.getLocs().get(i), 0, builder.getCaps().get(i), Arrays.asList(TimeWindow.ETERNITY)));
-            } else if (builder.getTypes().get(i).equals("delivery")) {
-                list.addActivity(new DeliveryActivity(this, "delivery", builder.getLocs().get(i), 0, builder.getCaps().get(i).invert(), Arrays.asList(TimeWindow.ETERNITY)));
-            } else {
-                list.addActivity(new ExchangeActivity(this, "exchange", builder.getLocs().get(i), 0, builder.getCaps().get(i), Arrays.asList(TimeWindow.ETERNITY)));
-            }
-        }
-        setActivities(list);
-    }
-}
-
diff --git a/jsprit-analysis/src/test/java/com/graphhopper/jsprit/analysis/toolbox/PlotterTest.java b/jsprit-analysis/src/test/java/com/graphhopper/jsprit/analysis/toolbox/PlotterTest.java
index 585d255c5..9c32c2f16 100644
--- a/jsprit-analysis/src/test/java/com/graphhopper/jsprit/analysis/toolbox/PlotterTest.java
+++ b/jsprit-analysis/src/test/java/com/graphhopper/jsprit/analysis/toolbox/PlotterTest.java
@@ -18,10 +18,14 @@
 
 package com.graphhopper.jsprit.analysis.toolbox;
 
+import org.junit.Ignore;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
+import com.graphhopper.jsprit.core.problem.job.CustomJob;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
@@ -29,8 +33,6 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.Solutions;
-import org.junit.Ignore;
-import org.junit.Test;
 
 /**
  * Created by schroeder on 18/11/16.
@@ -42,12 +44,12 @@
     public void testPlotCustomJob() {
 
         Vehicle vehicle = VehicleImpl.Builder.newInstance("vehicle").setStartLocation(Location.newInstance(0, 0))
-            .build();
+                .build();
         CustomJob cj = CustomJob.Builder.newInstance("job")
-            .addPickup(Location.newInstance(10, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).build())
-            .addPickup(Location.newInstance(5, 0), SizeDimension.Builder.newInstance().addDimension(0, 2).build())
-            .addDelivery(Location.newInstance(20, 00), SizeDimension.Builder.newInstance().addDimension(0, 3).build())
-            .build();
+                .addPickup(Location.newInstance(10, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).build())
+                .addPickup(Location.newInstance(5, 0), SizeDimension.Builder.newInstance().addDimension(0, 2).build())
+                .addDelivery(Location.newInstance(20, 00), SizeDimension.Builder.newInstance().addDimension(0, 3).build())
+                .build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(cj).addVehicle(vehicle).build();
         new Plotter(vrp).plot("output/plot", "plot");
     }
@@ -56,12 +58,12 @@ public void testPlotCustomJob() {
     public void testPlotCustomJobSolution() {
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0, 3).build();
         Vehicle vehicle = VehicleImpl.Builder.newInstance("vehicle").setStartLocation(Location.newInstance(0, 0))
-            .setType(type).build();
+                .setType(type).build();
         CustomJob cj = CustomJob.Builder.newInstance("job")
-            .addPickup(Location.newInstance(10, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).build())
-            .addPickup(Location.newInstance(-5, 4), SizeDimension.Builder.newInstance().addDimension(0, 2).build())
-            .addDelivery(Location.newInstance(20, 10), SizeDimension.Builder.newInstance().addDimension(0, 3).build())
-            .build();
+                .addPickup(Location.newInstance(10, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).build())
+                .addPickup(Location.newInstance(-5, 4), SizeDimension.Builder.newInstance().addDimension(0, 2).build())
+                .addDelivery(Location.newInstance(20, 10), SizeDimension.Builder.newInstance().addDimension(0, 3).build())
+                .build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(cj).addVehicle(vehicle).build();
         VehicleRoutingProblemSolution solution = Solutions.bestOf(Jsprit.createAlgorithm(vrp).searchSolutions());
         new Plotter(vrp, solution).plot("output/plotSolution", "plot");
@@ -71,12 +73,12 @@ public void testPlotCustomJobSolution() {
     public void testPlotWithExchange() {
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0, 3).addCapacityDimension(1, 3).build();
         Vehicle vehicle = VehicleImpl.Builder.newInstance("vehicle").setStartLocation(Location.newInstance(0, 0))
-            .setType(type).build();
+                .setType(type).build();
         CustomJob cj = CustomJob.Builder.newInstance("job")
-            .addPickup(Location.newInstance(10, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 1).build())
-            .addExchange(Location.newInstance(-5, 4), SizeDimension.Builder.newInstance().addDimension(0, -1).addDimension(1, 1).build())
-            .addDelivery(Location.newInstance(20, 10), SizeDimension.Builder.newInstance().addDimension(0, 3).build())
-            .build();
+                .addPickup(Location.newInstance(10, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 1).build())
+                .addExchange(Location.newInstance(-5, 4), SizeDimension.Builder.newInstance().addDimension(0, -1).addDimension(1, 1).build())
+                .addDelivery(Location.newInstance(20, 10), SizeDimension.Builder.newInstance().addDimension(0, 3).build())
+                .build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(cj).addVehicle(vehicle).build();
         VehicleRoutingProblemSolution solution = Solutions.bestOf(Jsprit.createAlgorithm(vrp).searchSolutions());
         new Plotter(vrp).plotJobRelations(true).plot("output/plotExchange", "plot");
@@ -87,9 +89,9 @@ public void testPlotWithExchange() {
     public void testPlotWithShipments() {
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0, 3).build();
         Vehicle vehicle = VehicleImpl.Builder.newInstance("vehicle").setStartLocation(Location.newInstance(0, 0))
-            .setType(type).build();
+                .setType(type).build();
         Shipment shipment = Shipment.Builder.newInstance("shipment").setPickupLocation(Location.newInstance(-5, 4))
-            .addSizeDimension(0, 2).setDeliveryLocation(Location.newInstance(20, 10)).build();
+                .addSizeDimension(0, 2).setDeliveryLocation(Location.newInstance(20, 10)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(shipment).addVehicle(vehicle).build();
         VehicleRoutingProblemSolution solution = Solutions.bestOf(Jsprit.createAlgorithm(vrp).searchSolutions());
         new Plotter(vrp).plotJobRelations(true).plot("output/plotJobs", "plot");
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/CustomJob.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/CustomJob.java
new file mode 100644
index 000000000..1214c2209
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/CustomJob.java
@@ -0,0 +1,344 @@
+/*
+ * Licensed to GraphHopper GmbH under one or more contributor
+ * license agreements. See the NOTICE file distributed with this work for
+ * additional information regarding copyright ownership.
+ *
+ * GraphHopper GmbH licenses this file to you under the Apache License,
+ * Version 2.0 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.graphhopper.jsprit.core.problem.job;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.List;
+
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.ExchangeActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.ServiceActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindows;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindowsImpl;
+
+/**
+ * Created by schroeder on 16/11/16.
+ *
+ * @author schroeder
+ * @author balage
+ */
+public class CustomJob extends AbstractJob {
+
+
+    public static abstract class BuilderBase<T extends CustomJob, B extends CustomJob.BuilderBase<T, B>>
+    extends JobBuilder<T, B> {
+
+        public enum ActivityType {
+            SERVICE {
+
+                @Override
+                public JobActivity create(CustomJob job, BuilderActivityInfo info) {
+                    return new ServiceActivity(job, info.getName() == null ? name().toLowerCase() : info.getName(),
+                                    info.getLocation(), info.getOperationTime(), info.getSize(), prepareTimeWindows(info));
+                }
+            },
+            PICKUP {
+
+                @Override
+                public JobActivity create(CustomJob job, BuilderActivityInfo info) {
+                    return new PickupActivity(job, info.getName() == null ? name().toLowerCase() : info.getName(),
+                                    info.getLocation(), info.getOperationTime(), info.getSize(), prepareTimeWindows(info));
+                }
+            },
+            DELIVERY {
+
+                @Override
+                public JobActivity create(CustomJob job, BuilderActivityInfo info) {
+                    return new DeliveryActivity(job, info.getName() == null ? name().toLowerCase() : info.getName(),
+                                    info.getLocation(), info.getOperationTime(), info.getSize(), prepareTimeWindows(info));
+                }
+            },
+            EXCHANGE {
+
+                @Override
+                public JobActivity create(CustomJob job, BuilderActivityInfo info) {
+                    return new ExchangeActivity(job, info.getName() == null ? name().toLowerCase() : info.getName(),
+                                    info.getLocation(), info.getOperationTime(), info.getSize(), prepareTimeWindows(info));
+                }
+            };
+
+            public abstract JobActivity create(CustomJob job, BuilderActivityInfo builderActivityInfo);
+
+            private static Collection<TimeWindow> prepareTimeWindows(BuilderActivityInfo info) {
+                TimeWindows tws = info.getTimeWindows();
+                if (tws.getTimeWindows().isEmpty()) {
+                    tws = TimeWindows.ANY_TIME;
+                }
+                return tws.getTimeWindows();
+            }
+        }
+
+
+        public static class BuilderActivityInfo {
+            private ActivityType type;
+            private Location locs;
+            private SizeDimension size = SizeDimension.EMPTY;
+            private String name = null;
+            private double operationTime = 0;
+            private TimeWindowsImpl timeWindows = new TimeWindowsImpl();
+
+
+            public BuilderActivityInfo(ActivityType type, Location locs) {
+                super();
+                this.type = type;
+                this.locs = locs;
+            }
+
+            public ActivityType getType() {
+                return type;
+            }
+
+            public Location getLocation() {
+                return locs;
+            }
+
+            public SizeDimension getSize() {
+                return size;
+            }
+
+            public BuilderActivityInfo withSize(SizeDimension size) {
+                this.size = size;
+                return this;
+            }
+
+            public String getName() {
+                return name;
+            }
+
+            public BuilderActivityInfo withName(String name) {
+                this.name = name;
+                return this;
+            }
+
+            public TimeWindows getTimeWindows() {
+                return timeWindows;
+            }
+
+            public BuilderActivityInfo withTimeWindow(TimeWindow timeWindow) {
+                timeWindows.add(timeWindow);
+                return this;
+            }
+
+            public BuilderActivityInfo withTimeWindows(TimeWindow... tws) {
+                timeWindows.addAll(tws);
+                return this;
+            }
+
+            public BuilderActivityInfo withTimeWindows(Collection<TimeWindow> tws) {
+                timeWindows.addAll(tws);
+                return this;
+            }
+
+            public double getOperationTime() {
+                return operationTime;
+            }
+
+            public BuilderActivityInfo withOperationTime(double operationTime) {
+                this.operationTime = operationTime;
+                return this;
+            }
+        }
+
+        List<BuilderActivityInfo> acts = new ArrayList<>();
+
+        public BuilderBase(String id) {
+            super(id);
+        }
+
+        public BuilderBase<T, B> addActivity(BuilderActivityInfo act) {
+            acts.add(act);
+            return this;
+        }
+
+
+        private void add(ActivityType type, Location location, double operationTime, SizeDimension size, String name,
+                        Collection<TimeWindow> tws) {
+            BuilderActivityInfo builderActivityInfo = new BuilderActivityInfo(type, location);
+            builderActivityInfo.withOperationTime(operationTime);
+            if (name != null) {
+                builderActivityInfo.withName(name);
+            }
+            if (size != null) {
+                builderActivityInfo.withSize(size);
+            }
+            if (tws != null) {
+                builderActivityInfo.withTimeWindows(tws);
+            }
+
+            acts.add(builderActivityInfo);
+        }
+
+        // Service
+
+        public CustomJob.BuilderBase<T, B> addService(Location location) {
+            add(ActivityType.SERVICE, location, 0d, null, null, null);
+            return this;
+        }
+
+        public CustomJob.BuilderBase<T, B> addService(Location location, SizeDimension size) {
+            add(ActivityType.SERVICE, location, 0d, size, null, null);
+            return this;
+        }
+
+        public CustomJob.BuilderBase<T, B> addService(Location location, SizeDimension size, double operationTime) {
+            add(ActivityType.SERVICE, location, operationTime, size, null, null);
+            return this;
+        }
+
+        public CustomJob.BuilderBase<T, B> addService(Location location, SizeDimension size, double operationTime,
+                        TimeWindow tw) {
+            add(ActivityType.SERVICE, location, operationTime, size, null, Collections.singleton(tw));
+            return this;
+        }
+
+
+        // Pickup
+
+        public CustomJob.BuilderBase<T, B> addPickup(Location location) {
+            add(ActivityType.PICKUP, location, 0d, null, null, null);
+            return this;
+        }
+
+        public CustomJob.BuilderBase<T, B> addPickup(Location location, SizeDimension size) {
+            add(ActivityType.PICKUP, location, 0d, size, null, null);
+            return this;
+        }
+
+        public CustomJob.BuilderBase<T, B> addPickup(Location location, SizeDimension size, double operationTime) {
+            add(ActivityType.PICKUP, location, operationTime, size, null, null);
+            return this;
+        }
+
+        public CustomJob.BuilderBase<T, B> addPickup(Location location, SizeDimension size, double operationTime,
+                        TimeWindow tw) {
+            add(ActivityType.PICKUP, location, operationTime, size, null, Collections.singleton(tw));
+            return this;
+        }
+
+        // Delivery
+
+        public CustomJob.BuilderBase<T, B> addDelivery(Location location) {
+            add(ActivityType.DELIVERY, location, 0d, null, null, null);
+            return this;
+        }
+
+        public CustomJob.BuilderBase<T, B> addDelivery(Location location, SizeDimension size) {
+            add(ActivityType.DELIVERY, location, 0d, size, null, null);
+            return this;
+        }
+
+        public CustomJob.BuilderBase<T, B> addDelivery(Location location, SizeDimension size, double operationTime) {
+            add(ActivityType.DELIVERY, location, operationTime, size, null, null);
+            return this;
+        }
+
+        public CustomJob.BuilderBase<T, B> addDelivery(Location location, SizeDimension size, double operationTime,
+                        TimeWindow tw) {
+            add(ActivityType.DELIVERY, location, operationTime, size, null, Collections.singleton(tw));
+            return this;
+        }
+
+        // Exchange
+
+        public CustomJob.BuilderBase<T, B> addExchange(Location location) {
+            add(ActivityType.EXCHANGE, location, 0d, null, null, null);
+            return this;
+        }
+
+        public CustomJob.BuilderBase<T, B> addExchange(Location location, SizeDimension size) {
+            add(ActivityType.EXCHANGE, location, 0d, size, null, null);
+            return this;
+        }
+
+        public CustomJob.BuilderBase<T, B> addExchange(Location location, SizeDimension size, double operationTime) {
+            add(ActivityType.EXCHANGE, location, operationTime, size, null, null);
+            return this;
+        }
+
+        public CustomJob.BuilderBase<T, B> addExchange(Location location, SizeDimension size, double operationTime,
+                        TimeWindow tw) {
+            add(ActivityType.EXCHANGE, location, operationTime, size, null, Collections.singleton(tw));
+            return this;
+        }
+
+        @Override
+        protected void validate() {
+            if (acts.isEmpty()) {
+                throw new IllegalStateException("There is no activities defined on this job.");
+            }
+        }
+
+        public List<BuilderActivityInfo> getActs() {
+            return Collections.unmodifiableList(acts);
+        }
+
+    }
+
+    public static final class Builder extends CustomJob.BuilderBase<CustomJob, CustomJob.Builder> {
+
+        public static CustomJob.Builder newInstance(String id) {
+            return new CustomJob.Builder(id);
+        }
+
+        public Builder(String id) {
+            super(id);
+        }
+
+        @Override
+        protected CustomJob createInstance() {
+            return new CustomJob(this);
+        }
+
+    }
+
+    /**
+     * Builder based constructor.
+     *
+     * @param builder The builder instance.
+     * @see JobBuilder
+     */
+    protected CustomJob(JobBuilder<?, ?> builder) {
+        super(builder);
+
+    }
+
+    @Override
+    public SizeDimension getSize() {
+        return SizeDimension.EMPTY;
+    }
+
+    @Override
+    protected void createActivities(JobBuilder<? extends AbstractJob, ?> jobBuilder) {
+        CustomJob.Builder builder = (CustomJob.Builder) jobBuilder;
+        JobActivityList list = new SequentialJobActivityList(this);
+        for (CustomJob.Builder.BuilderActivityInfo info : builder.getActs()) {
+            JobActivity act = info.getType().create(this, info);
+            list.addActivity(act);
+        }
+        setActivities(list);
+    }
+}
+
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/GenericCustomJob.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/GenericCustomJob.java
deleted file mode 100644
index e76e12d88..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/GenericCustomJob.java
+++ /dev/null
@@ -1,427 +0,0 @@
-/*
- * Licensed to GraphHopper GmbH under one or more contributor
- * license agreements. See the NOTICE file distributed with this work for
- * additional information regarding copyright ownership.
- *
- * GraphHopper GmbH licenses this file to you under the Apache License,
- * Version 2.0 (the "License"); you may not use this file except in
- * compliance with the License. You may obtain a copy of the License at
- *
- *       http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.graphhopper.jsprit.core.problem.job;
-
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.List;
-
-import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.SizeDimension;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivity;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.ExchangeActivity;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivity;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.ServiceActivity;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindows;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindowsImpl;
-
-/**
- * Created by schroeder on 16/11/16.
- *
- * @author schroeder
- * @author balage
- */
-public class GenericCustomJob extends AbstractJob {
-
-
-    public static abstract class BuilderBase<T extends GenericCustomJob, B extends GenericCustomJob.BuilderBase<T, B>>
-    extends JobBuilder<T, B> {
-
-        private enum ActivityType {
-            SERVICE {
-
-                @Override
-                public JobActivity create(GenericCustomJob job, BuilderBase<?, ?>.BuilderActivityInfo info) {
-                    return new ServiceActivity(job, info.getName() == null ? name().toLowerCase() : info.getName(),
-                                    info.getLocation(), info.getOperationTime(), info.getSize(), prepareTimeWindows(info));
-                }
-            },
-            PICKUP {
-
-                @Override
-                public JobActivity create(GenericCustomJob job, BuilderBase<?, ?>.BuilderActivityInfo info) {
-                    return new PickupActivity(job, info.getName() == null ? name().toLowerCase() : info.getName(),
-                                    info.getLocation(), info.getOperationTime(), info.getSize(), prepareTimeWindows(info));
-                }
-            },
-            DELIVERY {
-
-                @Override
-                public JobActivity create(GenericCustomJob job, BuilderBase<?, ?>.BuilderActivityInfo info) {
-                    return new DeliveryActivity(job, info.getName() == null ? name().toLowerCase() : info.getName(),
-                                    info.getLocation(), info.getOperationTime(), info.getSize(), prepareTimeWindows(info));
-                }
-            },
-            EXCHANGE {
-
-                @Override
-                public JobActivity create(GenericCustomJob job, BuilderBase<?, ?>.BuilderActivityInfo info) {
-                    return new ExchangeActivity(job, info.getName() == null ? name().toLowerCase() : info.getName(),
-                                    info.getLocation(), info.getOperationTime(), info.getSize(), prepareTimeWindows(info));
-                }
-            };
-
-            public abstract JobActivity create(GenericCustomJob job, BuilderBase<?, ?>.BuilderActivityInfo builderActivityInfo);
-
-            private static Collection<TimeWindow> prepareTimeWindows(BuilderBase<?, ?>.BuilderActivityInfo info) {
-                TimeWindows tws = info.getTimeWindows();
-                if (tws.getTimeWindows().isEmpty()) {
-                    tws = TimeWindows.ANY_TIME;
-                }
-                return tws.getTimeWindows();
-            }
-        }
-
-        public class BuilderActivityInfo {
-            private ActivityType type;
-            private Location locs;
-            private SizeDimension size = SizeDimension.EMPTY;
-            private String name = null;
-            private double operationTime = 0;
-            private TimeWindowsImpl timeWindows = new TimeWindowsImpl();
-
-            private BuilderActivityInfo(ActivityType type, Location locs) {
-                super();
-                this.type = type;
-                this.locs = locs;
-            }
-
-            public ActivityType getType() {
-                return type;
-            }
-
-            public Location getLocation() {
-                return locs;
-            }
-
-            public SizeDimension getSize() {
-                return size;
-            }
-
-            public BuilderActivityInfo withSize(SizeDimension size) {
-                this.size = size;
-                return this;
-            }
-
-            public String getName() {
-                return name;
-            }
-
-            public BuilderActivityInfo withName(String name) {
-                this.name = name;
-                return this;
-            }
-
-            public TimeWindows getTimeWindows() {
-                return timeWindows;
-            }
-
-            public BuilderActivityInfo withTimeWindow(TimeWindow timeWindow) {
-                timeWindows.add(timeWindow);
-                return this;
-            }
-
-            public BuilderActivityInfo withTimeWindows(TimeWindow... tws) {
-                timeWindows.addAll(tws);
-                return this;
-            }
-
-            public BuilderBase<T, B> finish() {
-                return BuilderBase.this;
-            }
-
-            public double getOperationTime() {
-                return operationTime;
-            }
-
-            public BuilderActivityInfo withOperationTime(double operationTime) {
-                this.operationTime = operationTime;
-                return this;
-            }
-
-        }
-
-        List<BuilderActivityInfo> acts = new ArrayList<>();
-
-        public BuilderBase(String id) {
-            super(id);
-        }
-
-        public BuilderActivityInfo addService(Location location) {
-            BuilderActivityInfo act = new BuilderActivityInfo(ActivityType.SERVICE, location);
-            acts.add(act);
-            return act;
-        }
-
-        public BuilderActivityInfo addPickup(Location location) {
-            BuilderActivityInfo act = new BuilderActivityInfo(ActivityType.PICKUP, location);
-            acts.add(act);
-            return act;
-        }
-
-        public BuilderActivityInfo addDelivery(Location location) {
-            BuilderActivityInfo act = new BuilderActivityInfo(ActivityType.DELIVERY, location);
-            acts.add(act);
-            return act;
-        }
-
-        public BuilderActivityInfo addExchange(Location location) {
-            BuilderActivityInfo act = new BuilderActivityInfo(ActivityType.EXCHANGE, location);
-            acts.add(act);
-            return act;
-        }
-
-        //        private void add(ActivityType type, Location location, SizeDimension size, String name, Collection<TimeWindow> tws) {
-        //            BuilderActivityInfo builderActivityInfo = new BuilderActivityInfo(type, location);
-        //            if (name != null) {
-        //                builderActivityInfo.setName(name);
-        //            }
-        //            if (size != null) {
-        //                builderActivityInfo.setSize(size);
-        //            }
-        //            if (tws != null) {
-        //                builderActivityInfo.addTimeWindows(tws);
-        //            }
-        //
-        //            acts.add(builderActivityInfo);
-        //        }
-        //
-        //        // Service
-        //
-        //        public GenericCustomJob.BuilderBase<T, B> addService(Location location, SizeDimension size, String name,
-        //                        Collection<TimeWindow> tws) {
-        //            add(ActivityType.SERVICE, location, size, name, tws);
-        //            return this;
-        //        }
-        //
-        //        public GenericCustomJob.BuilderBase<T, B> addService(Location location, SizeDimension size, String name, TimeWindow tw) {
-        //            add(ActivityType.SERVICE, location, size, name, Collections.singleton(tw));
-        //            return this;
-        //        }
-        //
-        //        public GenericCustomJob.BuilderBase<T, B> addService(Location location, SizeDimension size, Collection<TimeWindow> tws) {
-        //            add(ActivityType.SERVICE, location, size, null, tws);
-        //            return this;
-        //        }
-        //
-        //        public GenericCustomJob.BuilderBase<T, B> addService(Location location, SizeDimension size, TimeWindow tw) {
-        //            add(ActivityType.SERVICE, location, size, null, Collections.singleton(tw));
-        //            return this;
-        //        }
-        //
-        //        public GenericCustomJob.BuilderBase<T, B> addService(Location location, SizeDimension size, String name) {
-        //            add(ActivityType.SERVICE, location, size, name, null);
-        //            return this;
-        //        }
-        //
-        //        public GenericCustomJob.BuilderBase<T, B> addService(Location location, SizeDimension size) {
-        //            add(ActivityType.SERVICE, location, size, null, null);
-        //            return this;
-        //        }
-        //
-        //        // Pickup
-        //
-        //        public GenericCustomJob.BuilderBase<T, B> addPickup(Location location, SizeDimension size, String name,
-        //                        Collection<TimeWindow> tws) {
-        //            add(ActivityType.PICKUP, location, size, name, tws);
-        //            return this;
-        //        }
-        //
-        //        public GenericCustomJob.BuilderBase<T, B> addPickup(Location location, SizeDimension size, String name, TimeWindow tw) {
-        //            add(ActivityType.PICKUP, location, size, name, Collections.singleton(tw));
-        //            return this;
-        //        }
-        //
-        //        public GenericCustomJob.BuilderBase<T, B> addPickup(Location location, SizeDimension size, Collection<TimeWindow> tws) {
-        //            add(ActivityType.PICKUP, location, size, null, tws);
-        //            return this;
-        //        }
-        //
-        //        public GenericCustomJob.BuilderBase<T, B> addPickup(Location location, SizeDimension size, TimeWindow tw) {
-        //            add(ActivityType.PICKUP, location, size, null, Collections.singleton(tw));
-        //            return this;
-        //        }
-        //
-        //        public GenericCustomJob.BuilderBase<T, B> addPickup(Location location, SizeDimension size, String name) {
-        //            add(ActivityType.PICKUP, location, size, name, null);
-        //            return this;
-        //        }
-        //
-        //        public GenericCustomJob.BuilderBase<T, B> addPickup(Location location, SizeDimension size) {
-        //            add(ActivityType.PICKUP, location, size, null, null);
-        //            return this;
-        //        }
-        //
-        //        // Delivery
-        //
-        //        public GenericCustomJob.BuilderBase<T, B> addDelivery(Location location, SizeDimension size, String name,
-        //                        Collection<TimeWindow> tws) {
-        //            add(ActivityType.DELIVERY, location, size, name, tws);
-        //            return this;
-        //        }
-        //
-        //        public GenericCustomJob.BuilderBase<T, B> addDelivery(Location location, SizeDimension size, String name, TimeWindow tw) {
-        //            add(ActivityType.DELIVERY, location, size, name, Collections.singleton(tw));
-        //            return this;
-        //        }
-        //
-        //        public GenericCustomJob.BuilderBase<T, B> addDelivery(Location location, SizeDimension size, Collection<TimeWindow> tws) {
-        //            add(ActivityType.DELIVERY, location, size, null, tws);
-        //            return this;
-        //        }
-        //
-        //        public GenericCustomJob.BuilderBase<T, B> addDelivery(Location location, SizeDimension size, TimeWindow tw) {
-        //            add(ActivityType.DELIVERY, location, size, null, Collections.singleton(tw));
-        //            return this;
-        //        }
-        //
-        //        public GenericCustomJob.BuilderBase<T, B> addDelivery(Location location, SizeDimension size, String name) {
-        //            add(ActivityType.DELIVERY, location, size, name, null);
-        //            return this;
-        //        }
-        //
-        //        public GenericCustomJob.BuilderBase<T, B> addDelivery(Location location, SizeDimension size) {
-        //            add(ActivityType.DELIVERY, location, size, null, null);
-        //            return this;
-        //        }
-        //
-        //        // Exchange
-        //
-        //        public GenericCustomJob.BuilderBase<T, B> addExchange(Location location, SizeDimension size, String name,
-        //                        Collection<TimeWindow> tws) {
-        //            add(ActivityType.EXCHANGE, location, size, name, tws);
-        //            return this;
-        //        }
-        //
-        //        public GenericCustomJob.BuilderBase<T, B> addExchange(Location location, SizeDimension size, String name, TimeWindow tw) {
-        //            add(ActivityType.EXCHANGE, location, size, name, Collections.singleton(tw));
-        //            return this;
-        //        }
-        //
-        //        public GenericCustomJob.BuilderBase<T, B> addExchange(Location location, SizeDimension size, Collection<TimeWindow> tws) {
-        //            add(ActivityType.EXCHANGE, location, size, null, tws);
-        //            return this;
-        //        }
-        //
-        //        public GenericCustomJob.BuilderBase<T, B> addExchange(Location location, SizeDimension size, TimeWindow tw) {
-        //            add(ActivityType.EXCHANGE, location, size, null, Collections.singleton(tw));
-        //            return this;
-        //        }
-        //
-        //        public GenericCustomJob.BuilderBase<T, B> addExchange(Location location, SizeDimension size, String name) {
-        //            add(ActivityType.EXCHANGE, location, size, name, null);
-        //            return this;
-        //        }
-        //
-        //        public GenericCustomJob.BuilderBase<T, B> addExchange(Location location, SizeDimension size) {
-        //            add(ActivityType.EXCHANGE, location, size, null, null);
-        //            return this;
-        //        }
-        //
-        //        public GenericCustomJob.BuilderBase<T, B> addExchange(Location location, String name, Collection<TimeWindow> tws) {
-        //            add(ActivityType.EXCHANGE, location, null, name, tws);
-        //            return this;
-        //        }
-        //
-        //        public GenericCustomJob.BuilderBase<T, B> addExchange(Location location, String name, TimeWindow tw) {
-        //            add(ActivityType.EXCHANGE, location, null, name, Collections.singleton(tw));
-        //            return this;
-        //        }
-        //
-        //        public GenericCustomJob.BuilderBase<T, B> addExchange(Location location, Collection<TimeWindow> tws) {
-        //            add(ActivityType.EXCHANGE, location, null, null, tws);
-        //            return this;
-        //        }
-        //
-        //        public GenericCustomJob.BuilderBase<T, B> addExchange(Location location, TimeWindow tw) {
-        //            add(ActivityType.EXCHANGE, location, null, null, Collections.singleton(tw));
-        //            return this;
-        //        }
-        //
-        //        public GenericCustomJob.BuilderBase<T, B> addExchange(Location location, String name) {
-        //            add(ActivityType.EXCHANGE, location, null, name, null);
-        //            return this;
-        //        }
-        //
-        //        public GenericCustomJob.BuilderBase<T, B> addExchange(Location location) {
-        //            add(ActivityType.EXCHANGE, location, null, null, null);
-        //            return this;
-        //        }
-
-        @Override
-        protected void validate() {
-            if (acts.isEmpty()) {
-                throw new IllegalStateException("There is no activities defined for the job.");
-            }
-        }
-
-        public List<BuilderActivityInfo> getActs() {
-            return Collections.unmodifiableList(acts);
-        }
-
-    }
-
-    public static final class Builder extends GenericCustomJob.BuilderBase<GenericCustomJob, GenericCustomJob.Builder> {
-
-        public static GenericCustomJob.Builder newInstance(String id) {
-            return new GenericCustomJob.Builder(id);
-        }
-
-        public Builder(String id) {
-            super(id);
-        }
-
-        @Override
-        protected GenericCustomJob createInstance() {
-            return new GenericCustomJob(this);
-        }
-
-    }
-
-    /**
-     * Builder based constructor.
-     *
-     * @param builder The builder instance.
-     * @see JobBuilder
-     */
-    protected GenericCustomJob(JobBuilder<?, ?> builder) {
-        super(builder);
-
-    }
-
-    @Override
-    public SizeDimension getSize() {
-        return SizeDimension.EMPTY;
-    }
-
-    @Override
-    protected void createActivities(JobBuilder<? extends AbstractJob, ?> jobBuilder) {
-        GenericCustomJob.Builder builder = (GenericCustomJob.Builder) jobBuilder;
-        JobActivityList list = new SequentialJobActivityList(this);
-        for (GenericCustomJob.Builder.BuilderActivityInfo info : builder.getActs()) {
-            JobActivity act = info.getType().create(this, info);
-            list.addActivity(act);
-        }
-        setActivities(list);
-    }
-}
-
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/FirstCustomJobExample.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/FirstCustomJobExample.java
index 345a5da1c..7ed274caf 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/FirstCustomJobExample.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/FirstCustomJobExample.java
@@ -25,11 +25,11 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
+import com.graphhopper.jsprit.core.problem.job.CustomJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.reporting.SolutionPrinter;
-import com.graphhopper.jsprit.core.util.CustomJob;
 import com.graphhopper.jsprit.core.util.Solutions;
 
 /**
@@ -39,10 +39,11 @@
 
     @Test
     public void test() {
-        CustomJob cj = CustomJob.Builder.newInstance("job").addPickup(Location.newInstance(10, 0), SizeDimension.EMPTY).build();
+        CustomJob cj = CustomJob.Builder.newInstance("job")
+                        .addPickup(Location.newInstance(10, 0), SizeDimension.EMPTY).build();
         Vehicle v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance()
-            .addJob(cj).addVehicle(v).build();
+                        .addJob(cj).addVehicle(v).build();
         VehicleRoutingAlgorithm vra = Jsprit.createAlgorithm(vrp);
         VehicleRoutingProblemSolution solution = Solutions.bestOf(vra.searchSolutions());
         SolutionPrinter.print(vrp, solution, SolutionPrinter.Print.VERBOSE);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/FirstCustomJobWithMultipleActivitiesExample.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/FirstCustomJobWithMultipleActivitiesExample.java
index c00ddf2c3..c1751092d 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/FirstCustomJobWithMultipleActivitiesExample.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/FirstCustomJobWithMultipleActivitiesExample.java
@@ -27,13 +27,13 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
+import com.graphhopper.jsprit.core.problem.job.CustomJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.reporting.SolutionPrinter;
-import com.graphhopper.jsprit.core.util.CustomJob;
 import com.graphhopper.jsprit.core.util.Solutions;
 
 /**
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/LoadConstraintTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/LoadConstraintTest.java
index 7bce56cdb..367062d9f 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/LoadConstraintTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/LoadConstraintTest.java
@@ -37,6 +37,7 @@
 import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Delivery;
+import com.graphhopper.jsprit.core.problem.job.CustomJob;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.job.Pickup;
 import com.graphhopper.jsprit.core.problem.job.Service;
@@ -51,7 +52,6 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
-import com.graphhopper.jsprit.core.util.CustomJob;
 
 /**
  * unit tests to test load constraints
@@ -112,10 +112,10 @@ public void doBefore() {
     @Test
     public void whenCustomJob_itShouldNotIgnoreCapacity() {
         CustomJob cj = CustomJob.Builder.newInstance("job")
-            .addPickup(Location.newInstance(10, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).build())
-            .addPickup(Location.newInstance(5, 0), SizeDimension.Builder.newInstance().addDimension(0, 2).build())
-            .addPickup(Location.newInstance(20, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).build())
-            .build();
+                        .addPickup(Location.newInstance(10, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).build())
+                        .addPickup(Location.newInstance(5, 0), SizeDimension.Builder.newInstance().addDimension(0, 2).build())
+                        .addPickup(Location.newInstance(20, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).build())
+                        .build();
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0, 2).build();
         Vehicle v = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem.Builder.newInstance().addJob(cj).addVehicle(v).build();
@@ -134,7 +134,7 @@ public void whenCustomJob_itShouldNotIgnoreCapacity() {
     public void whenServiceRouteAndNewServiceFitsIn_itShouldReturnFulfilled() {
         stateManager.informInsertionStarts(Arrays.asList(serviceRoute), Collections.emptyList());
         Service s = Service.Builder.newInstance("service").setLocation(Location.newInstance(0))
-            .addSizeDimension(0, 5).build();
+                        .addSizeDimension(0, 5).build();
         ServiceLoadRouteLevelConstraint loadConstraint = new ServiceLoadRouteLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(serviceRoute, s, serviceRoute.getVehicle(), null, 0.);
@@ -283,8 +283,8 @@ public void whenPDRouteRouteAndNewDeliveryFitsIn_itShouldReturnFulfilled() {
     public void whenPDRouteRouteAndNewPickupDoesNotFitIn_itShouldReturnNotFulfilled() {
         stateManager.informInsertionStarts(Arrays.asList(pickupDeliveryRoute), Collections.<Job>emptyList());
         Pickup s = Pickup.Builder.newInstance("pickup")
-            .setLocation(Location.newInstance(0))
-            .addSizeDimension(0, 11).build();
+                        .setLocation(Location.newInstance(0))
+                        .addSizeDimension(0, 11).build();
         ServiceLoadRouteLevelConstraint loadConstraint = new ServiceLoadRouteLevelConstraint(stateManager);
         JobInsertionContext context = new JobInsertionContext(pickupDeliveryRoute, s, serviceRoute.getVehicle(), null, 0.);
         assertFalse(loadConstraint.fulfilled(context));
@@ -294,7 +294,7 @@ public void whenPDRouteRouteAndNewPickupDoesNotFitIn_itShouldReturnNotFulfilled(
     public void whenPDRouteRouteAndNewDeliveryDoesNotFitIn_itShouldReturnNotFulfilled() {
         stateManager.informInsertionStarts(Arrays.asList(pickupDeliveryRoute), Collections.<Job>emptyList());
         Delivery s = Delivery.Builder.newInstance("del").setLocation(Location.newInstance(0))
-            .addSizeDimension(0, 16).build();
+                        .addSizeDimension(0, 16).build();
         ServiceLoadRouteLevelConstraint loadConstraint = new ServiceLoadRouteLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(pickupDeliveryRoute, s, serviceRoute.getVehicle(), null, 0.);
@@ -314,7 +314,7 @@ public void whenPDRoute_newPickupShouldFitInBetweenStartAndAct1() {
 
         JobInsertionContext context = new JobInsertionContext(pickupDeliveryRoute, s, pickupDeliveryRoute.getVehicle(), null, 0.);
         PickupActivity newAct = new PickupActivity(s, "pick", null, 0, newSize,
-            TimeWindows.ANY_TIME.getTimeWindows());
+                        TimeWindows.ANY_TIME.getTimeWindows());
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickupDeliveryRoute.getStart(), newAct, pickupDeliveryRoute.getActivities().get(0), 0.);
 
@@ -331,7 +331,7 @@ public void whenPDRoute_newPickupShouldFitInBetweenAct1AndAct2() {
 
         JobInsertionContext context = new JobInsertionContext(pickupDeliveryRoute, s, pickupDeliveryRoute.getVehicle(), null, 0.);
         PickupActivity newAct = new PickupActivity(s, "pick", null, 0, newSize,
-            TimeWindows.ANY_TIME.getTimeWindows());
+                        TimeWindows.ANY_TIME.getTimeWindows());
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickupDeliveryRoute.getActivities().get(0), newAct, pickupDeliveryRoute.getActivities().get(1), 0.);
 
@@ -348,7 +348,7 @@ public void whenPDRoute_newPickupShouldFitInBetweenAct2AndEnd() {
 
         JobInsertionContext context = new JobInsertionContext(pickupDeliveryRoute, s, pickupDeliveryRoute.getVehicle(), null, 0.);
         PickupActivity newAct = new PickupActivity(s, "pick", null, 0, newSize,
-            TimeWindows.ANY_TIME.getTimeWindows());
+                        TimeWindows.ANY_TIME.getTimeWindows());
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickupDeliveryRoute.getActivities().get(1), newAct, pickupDeliveryRoute.getEnd(), 0.);
 
@@ -368,7 +368,7 @@ public void whenPDRoute_newPickupShouldNotFitInBetweenStartAndAct1() {
 
         JobInsertionContext context = new JobInsertionContext(pickupDeliveryRoute, s, pickupDeliveryRoute.getVehicle(), null, 0.);
         PickupActivity newAct = new PickupActivity(s, "pick", null, 0, newSize,
-            TimeWindows.ANY_TIME.getTimeWindows());
+                        TimeWindows.ANY_TIME.getTimeWindows());
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickupDeliveryRoute.getStart(), newAct, pickupDeliveryRoute.getActivities().get(0), 0.);
 
@@ -385,7 +385,7 @@ public void whenPDRoute_newPickupShouldNotFitInBetweenAct1AndAct2() {
 
         JobInsertionContext context = new JobInsertionContext(pickupDeliveryRoute, s, pickupDeliveryRoute.getVehicle(), null, 0.);
         PickupActivity newAct = new PickupActivity(s, "pick", null, 0, newSize,
-            TimeWindows.ANY_TIME.getTimeWindows());
+                        TimeWindows.ANY_TIME.getTimeWindows());
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickupDeliveryRoute.getActivities().get(0), newAct, pickupDeliveryRoute.getActivities().get(1), 0.);
 
@@ -402,7 +402,7 @@ public void whenPDRoute_newPickupShouldNotFitInBetweenAct2AndEnd() {
 
         JobInsertionContext context = new JobInsertionContext(pickupDeliveryRoute, s, pickupDeliveryRoute.getVehicle(), null, 0.);
         PickupActivity newAct = new PickupActivity(s, "pick", null, 0, newSize,
-            TimeWindows.ANY_TIME.getTimeWindows());
+                        TimeWindows.ANY_TIME.getTimeWindows());
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickupDeliveryRoute.getActivities().get(1), newAct, pickupDeliveryRoute.getEnd(), 0.);
 
@@ -423,8 +423,8 @@ public void whenPDRoute_newDeliveryShouldFitInBetweenStartAndAct1() {
 
         JobInsertionContext context = new JobInsertionContext(pickupDeliveryRoute, s, pickupDeliveryRoute.getVehicle(), null, 0.);
         DeliveryActivity newAct = new DeliveryActivity(s, "del", null, 0,
-            newSize.invert(),
-            TimeWindows.ANY_TIME.getTimeWindows());
+                        newSize.invert(),
+                        TimeWindows.ANY_TIME.getTimeWindows());
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickupDeliveryRoute.getStart(), newAct, pickupDeliveryRoute.getActivities().get(0), 0.);
 
@@ -441,8 +441,8 @@ public void whenPDRoute_newDeliveryShouldNotFitInBetweenStartAndAct1() {
 
         JobInsertionContext context = new JobInsertionContext(pickupDeliveryRoute, s, pickupDeliveryRoute.getVehicle(), null, 0.);
         DeliveryActivity newAct = new DeliveryActivity(s, "del", null, 0,
-            newSize.invert(),
-            TimeWindows.ANY_TIME.getTimeWindows());
+                        newSize.invert(),
+                        TimeWindows.ANY_TIME.getTimeWindows());
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickupDeliveryRoute.getStart(), newAct, pickupDeliveryRoute.getActivities().get(0), 0.);
 
@@ -459,8 +459,8 @@ public void whenPDRoute_newDeliveryShouldFitInBetweenAct1AndAct2() {
 
         JobInsertionContext context = new JobInsertionContext(pickupDeliveryRoute, s, pickupDeliveryRoute.getVehicle(), null, 0.);
         DeliveryActivity newAct = new DeliveryActivity(s, "del", null, 0,
-            newSize.invert(),
-            TimeWindows.ANY_TIME.getTimeWindows());
+                        newSize.invert(),
+                        TimeWindows.ANY_TIME.getTimeWindows());
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickupDeliveryRoute.getActivities().get(0), newAct, pickupDeliveryRoute.getActivities().get(1), 0.);
 
@@ -477,8 +477,8 @@ public void whenPDRoute_newDeliveryNotShouldFitInBetweenAct1AndAct2() {
 
         JobInsertionContext context = new JobInsertionContext(pickupDeliveryRoute, s, pickupDeliveryRoute.getVehicle(), null, 0.);
         DeliveryActivity newAct = new DeliveryActivity(s, "del", null, 0,
-            newSize.invert(),
-            TimeWindows.ANY_TIME.getTimeWindows());
+                        newSize.invert(),
+                        TimeWindows.ANY_TIME.getTimeWindows());
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickupDeliveryRoute.getActivities().get(0), newAct, pickupDeliveryRoute.getActivities().get(1), 0.);
 
@@ -495,8 +495,8 @@ public void whenPDRoute_newDeliveryShouldFitInBetweenAct2AndEnd() {
 
         JobInsertionContext context = new JobInsertionContext(pickupDeliveryRoute, s, pickupDeliveryRoute.getVehicle(), null, 0.);
         DeliveryActivity newAct = new DeliveryActivity(s, "del", null, 0,
-            newSize.invert(),
-            TimeWindows.ANY_TIME.getTimeWindows());
+                        newSize.invert(),
+                        TimeWindows.ANY_TIME.getTimeWindows());
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickupDeliveryRoute.getActivities().get(1), newAct, pickupDeliveryRoute.getEnd(), 0.);
 
@@ -513,8 +513,8 @@ public void whenPDRoute_newDeliveryShouldNotFitInBetweenAct2AndEnd() {
 
         JobInsertionContext context = new JobInsertionContext(pickupDeliveryRoute, s, pickupDeliveryRoute.getVehicle(), null, 0.);
         DeliveryActivity newAct = new DeliveryActivity(s, "del", null, 0,
-            newSize.invert(),
-            TimeWindows.ANY_TIME.getTimeWindows());
+                        newSize.invert(),
+                        TimeWindows.ANY_TIME.getTimeWindows());
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickupDeliveryRoute.getActivities().get(1), newAct, pickupDeliveryRoute.getEnd(), 0.);
 
@@ -637,7 +637,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldFitInBetweenStartAndAct
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
 
         PickupActivity newAct = new PickupActivity(s, "pick", null, 0, newSize,
-            TimeWindows.ANY_TIME.getTimeWindows());
+                        TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipmentRoute.getStart(), newAct, shipmentRoute.getActivities().get(0), 0.);
 
@@ -655,7 +655,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldNotFitInBetweenStartAnd
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
 
         PickupActivity newAct = new PickupActivity(s, "pick", null, 0, newSize,
-            TimeWindows.ANY_TIME.getTimeWindows());
+                        TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipmentRoute.getStart(), newAct, shipmentRoute.getActivities().get(0), 0.);
 
@@ -673,7 +673,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldFitInBetweenAct1AndAct2
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
 
         PickupActivity newAct = new PickupActivity(s, "pick", null, 0, newSize,
-            TimeWindows.ANY_TIME.getTimeWindows());
+                        TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipmentRoute.getActivities().get(0), newAct, shipmentRoute.getActivities().get(1), 0.);
 
@@ -691,7 +691,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldNotFitInBetweenAct1AndA
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
 
         PickupActivity newAct = new PickupActivity(s, "pick", null, 0, newSize,
-            TimeWindows.ANY_TIME.getTimeWindows());
+                        TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipmentRoute.getActivities().get(0), newAct, shipmentRoute.getActivities().get(1), 0.);
 
@@ -709,7 +709,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldFitInBetweenAct2AndAct3
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
 
         PickupActivity newAct = new PickupActivity(s, "pick", null, 0, newSize,
-            TimeWindows.ANY_TIME.getTimeWindows());
+                        TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipmentRoute.getActivities().get(1), newAct, shipmentRoute.getActivities().get(2), 0.);
 
@@ -727,7 +727,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldNotFitInBetweenAct2AndA
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
 
         PickupActivity newAct = new PickupActivity(s, "pick", null, 0, newSize,
-            TimeWindows.ANY_TIME.getTimeWindows());
+                        TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipmentRoute.getActivities().get(1), newAct, shipmentRoute.getActivities().get(2), 0.);
 
@@ -745,7 +745,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldFitInBetweenAct3AndAct4
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
 
         PickupActivity newAct = new PickupActivity(s, "pick", null, 0, newSize,
-            TimeWindows.ANY_TIME.getTimeWindows());
+                        TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipmentRoute.getActivities().get(2), newAct, shipmentRoute.getActivities().get(3), 0.);
 
@@ -763,7 +763,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldNotFitInBetweenAct3AndA
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
 
         PickupActivity newAct = new PickupActivity(s, "pick", null, 0, newSize,
-            TimeWindows.ANY_TIME.getTimeWindows());
+                        TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipmentRoute.getActivities().get(2), newAct, shipmentRoute.getActivities().get(3), 0.);
 
@@ -781,7 +781,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldFitInBetweenAct4AndEnd(
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
 
         PickupActivity newAct = new PickupActivity(s, "pick", null, 0, newSize,
-            TimeWindows.ANY_TIME.getTimeWindows());
+                        TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipmentRoute.getActivities().get(3), newAct, shipmentRoute.getEnd(), 0.);
 
@@ -799,7 +799,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldNotFitInBetweenAct4AndE
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
 
         PickupActivity newAct = new PickupActivity(s, "pick", null, 0, newSize,
-            TimeWindows.ANY_TIME.getTimeWindows());
+                        TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipmentRoute.getActivities().get(3), newAct, shipmentRoute.getEnd(), 0.);
 
@@ -821,7 +821,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldFitInBetweenStartAndA
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
 
         DeliveryActivity newAct = new DeliveryActivity(s, "pick", null, 0,
-            newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
+                        newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipmentRoute.getStart(), newAct, shipmentRoute.getActivities().get(0), 0.);
 
@@ -839,7 +839,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldNotFitInBetweenStartA
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
 
         DeliveryActivity newAct = new DeliveryActivity(s, "pick", null, 0,
-            newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
+                        newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipmentRoute.getStart(), newAct, shipmentRoute.getActivities().get(0), 0.);
 
@@ -857,7 +857,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldFitInBetweenAct1AndAc
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
 
         DeliveryActivity newAct = new DeliveryActivity(s, "pick", null, 0,
-            newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
+                        newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipmentRoute.getActivities().get(0), newAct, shipmentRoute.getActivities().get(1), 0.);
 
@@ -875,7 +875,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldNotFitInBetweenAct1An
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
 
         DeliveryActivity newAct = new DeliveryActivity(s, "pick", null, 0,
-            newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
+                        newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipmentRoute.getActivities().get(0), newAct, shipmentRoute.getActivities().get(1), 0.);
 
@@ -893,7 +893,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldFitInBetweenAct2AndAc
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
 
         DeliveryActivity newAct = new DeliveryActivity(s, "pick", null, 0,
-            newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
+                        newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipmentRoute.getActivities().get(1), newAct, shipmentRoute.getActivities().get(2), 0.);
 
@@ -911,7 +911,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldNotFitInBetweenAct2An
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
 
         DeliveryActivity newAct = new DeliveryActivity(s, "pick", null, 0,
-            newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
+                        newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipmentRoute.getActivities().get(1), newAct, shipmentRoute.getActivities().get(2), 0.);
 
@@ -929,7 +929,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldFitInBetweenAct3AndAc
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
 
         DeliveryActivity newAct = new DeliveryActivity(s, "pick", null, 0,
-            newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
+                        newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipmentRoute.getActivities().get(2), newAct, shipmentRoute.getActivities().get(3), 0.);
 
@@ -947,7 +947,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldNotFitInBetweenAct3An
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
 
         DeliveryActivity newAct = new DeliveryActivity(s, "pick", null, 0,
-            newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
+                        newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipmentRoute.getActivities().get(2), newAct, shipmentRoute.getActivities().get(3), 0.);
 
@@ -965,7 +965,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldFitInBetweenAct4AndEn
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
 
         DeliveryActivity newAct = new DeliveryActivity(s, "pick", null, 0,
-            newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
+                        newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipmentRoute.getActivities().get(3), newAct, shipmentRoute.getEnd(), 0.);
 
@@ -982,7 +982,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldNotFitInBetweenAct4An
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
 
         DeliveryActivity newAct = new DeliveryActivity(s, "pick", null, 0,
-            newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
+                        newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipmentRoute.getActivities().get(3), newAct, shipmentRoute.getEnd(), 0.);
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ReturnedShipmentTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ReturnedShipmentTest.java
index 406996a28..400b4cd66 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ReturnedShipmentTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ReturnedShipmentTest.java
@@ -45,7 +45,6 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.reporting.SolutionPrinter;
 import com.graphhopper.jsprit.core.util.Coordinate;
-import com.graphhopper.jsprit.core.util.CustomJob;
 import com.graphhopper.jsprit.core.util.Solutions;
 import com.graphhopper.jsprit.core.util.TestUtils;
 
@@ -523,10 +522,9 @@ public void whenSettingIncorrectPriorities_itShouldThrowException2() {
     @Test
     public void firstTest() {
         Set<Job> jobs = new HashSet<>();
-        jobs.add(GenericCustomJob.Builder.newInstance("job").addPickup(Location.newInstance(10, 0)).withSize(SizeDimension.of(1))
-                        .withTimeWindow(TimeWindow.newInstance(0, 30)).finish()
-                        .addExchange(Location.newInstance(5, 30)).finish().addDelivery(Location.newInstance(10, 0))
-                        .withSize(SizeDimension.of(1)).finish()
+        jobs.add(CustomJob.Builder.newInstance("job")
+                        .addPickup(Location.newInstance(10, 0), SizeDimension.of(1), 0d, TimeWindow.newInstance(0, 30))
+                        .addExchange(Location.newInstance(5, 30)).addDelivery(Location.newInstance(10, 0), SizeDimension.of(1))
                         .build());
         jobs.add(CustomJob.Builder.newInstance("job2")
                         .addPickup(Location.newInstance(20, 0), SizeDimension.of(1))
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/CustomJob.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/CustomJob.java
deleted file mode 100644
index 95bb936f9..000000000
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/CustomJob.java
+++ /dev/null
@@ -1,176 +0,0 @@
-/*
- * Licensed to GraphHopper GmbH under one or more contributor
- * license agreements. See the NOTICE file distributed with this work for
- * additional information regarding copyright ownership.
- *
- * GraphHopper GmbH licenses this file to you under the Apache License,
- * Version 2.0 (the "License"); you may not use this file except in
- * compliance with the License. You may obtain a copy of the License at
- *
- *       http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.graphhopper.jsprit.core.util;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.List;
-
-import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.SizeDimension;
-import com.graphhopper.jsprit.core.problem.job.AbstractJob;
-import com.graphhopper.jsprit.core.problem.job.JobActivityList;
-import com.graphhopper.jsprit.core.problem.job.SequentialJobActivityList;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivity;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.ExchangeActivity;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivity;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
-
-/**
- * Created by schroeder on 16/11/16.
- */
-public class CustomJob extends AbstractJob {
-
-    public static abstract class BuilderBase<T extends CustomJob, B extends CustomJob.BuilderBase<T, B>>
-    extends JobBuilder<T, B> {
-
-        List<Location> locs = new ArrayList<>();
-
-        List<SizeDimension> cap = new ArrayList<>();
-
-        List<String> types = new ArrayList<>();
-
-        List<TimeWindow> timeWindows = new ArrayList<>();
-
-        public BuilderBase(String id) {
-            super(id);
-        }
-
-        private void add(Location location, SizeDimension loadChange, TimeWindow tw) {
-            locs.add(location);
-            cap.add(loadChange);
-            timeWindows.add(tw);
-        }
-
-        public CustomJob.BuilderBase<T, B> addPickup(Location location, SizeDimension loadChange,
-                        TimeWindow tw) {
-            add(location, loadChange, tw);
-            types.add("pickup");
-            return this;
-        }
-
-        public CustomJob.BuilderBase<T, B> addPickup(Location location, SizeDimension loadChange) {
-            return addPickup(location, loadChange, TimeWindow.ETERNITY);
-        }
-
-        public CustomJob.BuilderBase<T, B> addDelivery(Location location, SizeDimension loadChange,
-                        TimeWindow tw) {
-            add(location, loadChange, tw);
-            types.add("delivery");
-            return this;
-        }
-
-        public CustomJob.BuilderBase<T, B> addDelivery(Location location,
-                        SizeDimension loadChange) {
-            return addDelivery(location, loadChange, TimeWindow.ETERNITY);
-        }
-
-        public CustomJob.BuilderBase<T, B> addExchange(Location location, SizeDimension loadChange,
-                        TimeWindow tw) {
-            add(location, loadChange, tw);
-            types.add("exchange");
-            return this;
-        }
-
-        public CustomJob.BuilderBase<T, B> addExchange(Location location,
-                        SizeDimension loadChange) {
-            return addExchange(location, loadChange, TimeWindow.ETERNITY);
-        }
-
-
-        public List<Location> getLocs() {
-            return locs;
-        }
-
-        public List<SizeDimension> getCaps() {
-            return cap;
-        }
-
-        public List<String> getTypes() {
-            return types;
-        }
-
-        public List<TimeWindow> getTimeWindows() {
-            return timeWindows;
-        }
-
-        @Override
-        protected void validate() {
-
-        }
-    }
-
-    public static final class Builder extends CustomJob.BuilderBase<CustomJob, CustomJob.Builder> {
-
-        public static CustomJob.Builder newInstance(String id) {
-            return new CustomJob.Builder(id);
-        }
-
-        public Builder(String id) {
-            super(id);
-        }
-
-        @Override
-        protected CustomJob createInstance() {
-            return new CustomJob(this);
-        }
-
-        public Collection<TimeWindow> getTimeWindows(int i) {
-            return Arrays.asList(timeWindows.get(i));
-        }
-
-    }
-
-    /**
-     * Builder based constructor.
-     *
-     * @param builder The builder instance.
-     * @see JobBuilder
-     */
-    protected CustomJob(JobBuilder<?, ?> builder) {
-        super(builder);
-
-    }
-
-    @Override
-    public SizeDimension getSize() {
-        return SizeDimension.EMPTY;
-    }
-
-    @Override
-    protected void createActivities(JobBuilder<? extends AbstractJob, ?> jobBuilder) {
-        CustomJob.Builder builder = (CustomJob.Builder) jobBuilder;
-        JobActivityList list = new SequentialJobActivityList(this);
-        for (int i = 0; i < builder.getLocs().size(); i++) {
-            if (builder.getTypes().get(i).equals("pickup")) {
-                list.addActivity(new PickupActivity(this, "pick", builder.getLocs().get(i), 0, builder.getCaps().get(i),
-                                builder.getTimeWindows(i)));
-            } else if (builder.getTypes().get(i).equals("delivery")) {
-                list.addActivity(new DeliveryActivity(this, "delivery", builder.getLocs().get(i), 0,
-                                builder.getCaps().get(i).invert(), builder.getTimeWindows(i)));
-            } else {
-                list.addActivity(new ExchangeActivity(this, "exchange", builder.getLocs().get(i), 0,
-                                builder.getCaps().get(i), builder.getTimeWindows(i)));
-            }
-        }
-        setActivities(list);
-    }
-}
-
