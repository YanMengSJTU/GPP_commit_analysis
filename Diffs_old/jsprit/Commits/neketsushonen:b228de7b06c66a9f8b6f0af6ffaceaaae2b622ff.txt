diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EnRoute.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EnRoute.java
index 944ef49dd..867447f12 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EnRoute.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EnRoute.java
@@ -7,9 +7,11 @@
 import com.graphhopper.jsprit.analysis.toolbox.Plotter;
 import com.graphhopper.jsprit.core.algorithm.VehicleRoutingAlgorithm;
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
+import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionStartsListener;
 import com.graphhopper.jsprit.core.algorithm.ruin.listener.RuinListener;
 import com.graphhopper.jsprit.core.algorithm.state.StateId;
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
+import com.graphhopper.jsprit.core.algorithm.termination.IterationWithoutImprovementTermination;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
@@ -35,8 +37,9 @@
 import com.graphhopper.jsprit.util.Examples;
 import com.graphhopper.jsprit.util.MetroCosts;
 import com.graphhopper.jsprit.util.ServiceCostDeliveryAsociatePickupConstraint;
+import com.graphhopper.jsprit.util.ServiceDeliveryAllowedConstraint;
 import com.graphhopper.jsprit.util.ServiceDeliveryAsociatePickupConstraint;
-import com.graphhopper.jsprit.util.ServicePickupFirstConstrain;
+import com.graphhopper.jsprit.util.ServicePickupFirstConstraint;
 
 import java.util.Arrays;
 import java.util.Collection;
@@ -265,7 +268,8 @@ public static void main(String[] args) throws IOException {
         vrpBuilder.setRoutingCost(new MetroCosts(g));
 
         for(Map.Entry<Integer, List<Service>> entry:pedidos.entrySet()){
-            if(entry.getKey()==1 || entry.getKey()==19|| entry.getKey()==8) 
+           // if(entry.getKey()==1 || entry.getKey()==19|| entry.getKey()==8|| entry.getKey()==6) 
+            //if(entry.getKey()==1 || entry.getKey()==19|| entry.getKey()==8|| entry.getKey()==6)
 	           	for(Service s: entry.getValue()){
 	                   vrpBuilder.addJob(s);
 	
@@ -289,26 +293,26 @@ public static void main(String[] args) throws IOException {
         stateManager.addStateUpdater(new PedidoStatusUpdater(stateManager, pedidosEstado ));
 
         ConstraintManager constraintManager = new ConstraintManager(problem, stateManager);
-        constraintManager.addConstraint(new ServicePickupFirstConstrain(stateManager, pedidosEstado,pedidos),  ConstraintManager.Priority.CRITICAL);
-        constraintManager.addConstraint(new ServiceDeliveryAsociatePickupConstraint(stateManager, pedidosEstado));
+        constraintManager.addLoadConstraint();
+
+        constraintManager.addConstraint(new ServicePickupFirstConstraint(stateManager, pedidosEstado,pedidos),  ConstraintManager.Priority.CRITICAL);
+        constraintManager.addConstraint(new ServiceDeliveryAllowedConstraint(stateManager, pedidosEstado,pedidos),  ConstraintManager.Priority.CRITICAL);
+        //constraintManager.addConstraint(new ServiceDeliveryAsociatePickupConstraint(stateManager, pedidosEstado));
        // constraintManager.addConstraint(new ServiceCostDeliveryAsociatePickupConstraint());
 
         
 
         VehicleRoutingAlgorithm algorithm = Jsprit.Builder.newInstance(problem).setStateAndConstraintManager(stateManager,constraintManager).setProperty(Jsprit.Strategy.WORST_REGRET, "0.")
                 .setProperty(Jsprit.Strategy.WORST_BEST, "0.").buildAlgorithm();
-        
-        algorithm.addListener(new RuinListener() {
-			
-		  
-            @Override
-            public void ruinStarts(Collection<VehicleRoute> routes) {
+       // algorithm.setPrematureAlgorithmTermination(new IterationWithoutImprovementTermination(100));
 
-            }
 
+        algorithm.addListener(new InsertionStartsListener() {
+			
+			 
             @Override
-            public void ruinEnds(Collection<VehicleRoute> routes, Collection<Job> unassignedJobs) {
-                Map<TourActivity, VehicleRoute> toDeleteActRouteMap = new HashMap<>();
+            public void informInsertionStarts(Collection<VehicleRoute> routes, Collection<Job> unassignedJobs) {
+            	Map<TourActivity, VehicleRoute> toDeleteActRouteMap = new HashMap<>();
                 for(VehicleRoute route : routes){
                     List<String> orderIds = new ArrayList<String>();
 
@@ -324,9 +328,9 @@ public void ruinEnds(Collection<VehicleRoute> routes, Collection<Job> unassigned
                             
                             if(act instanceof DeliverService){
                             	Delivery sgg = (Delivery) ((DeliverService)act).getJob();
-                            	System.out.println(sgg.getId()+":::"+orderIds);
+                            	//System.out.println(sgg.getId()+":::"+orderIds);
                             	if(!orderIds.contains(sgg.getId().split("::")[0])) {
-                            		System.out.println("me agregue");
+                            		//System.out.println("me agregue");
                             		toDeleteActRouteMap.put(act, route);
                             	}    
                             		
@@ -345,21 +349,16 @@ public void ruinEnds(Collection<VehicleRoute> routes, Collection<Job> unassigned
                         Job job = ((TourActivity.JobActivity) act).getJob();
                         boolean removed = route.getTourActivities().removeJob(job);
                         if(removed) {
-                        	System.out.println("eliminado..."+job.getId());
+                        	//System.out.println("eliminado..."+job.getId());
                             unassignedJobs.add(job);
                         }
                     }
                 }
             }
-
-            @Override
-            public void removed(Job job, VehicleRoute vehicleRoute) {
-
-            }
         });
+         
         
-        
-        algorithm.setMaxIterations(20);
+        //algorithm.setMaxIterations(20);
 		 
         /*
          * and search a solution
@@ -415,10 +414,10 @@ public void removed(Job job, VehicleRoute vehicleRoute) {
 		 * print nRoutes and totalCosts of bestSolution
 		 */
         for (VehicleRoutingProblemSolution s : solutions) {
-        	System.out.println("==============");
-        	SolutionPrinter.print(problem, s, SolutionPrinter.Print.VERBOSE);
+        	//System.out.println("==============");
+        	//SolutionPrinter.print(problem, s, SolutionPrinter.Print.VERBOSE);
         }
-        //SolutionPrinter.print(problem, Solutions.bestOf(solutions), SolutionPrinter.Print.VERBOSE);
+        SolutionPrinter.print(problem, Solutions.bestOf(solutions), SolutionPrinter.Print.VERBOSE);
        // new GraphStreamViewer(problem, Solutions.bestOf(solutions)).setRenderDelay(100).display();
     }
 
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/util/ServiceDeliveryAllowedConstraint.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/util/ServiceDeliveryAllowedConstraint.java
new file mode 100644
index 000000000..d6cb90a97
--- /dev/null
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/util/ServiceDeliveryAllowedConstraint.java
@@ -0,0 +1,186 @@
+
+package com.graphhopper.jsprit.util;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.stream.Collectors;
+
+import com.graphhopper.jsprit.core.algorithm.state.StateId;
+import com.graphhopper.jsprit.core.algorithm.state.StateManager;
+import com.graphhopper.jsprit.core.problem.constraint.HardActivityConstraint;
+import com.graphhopper.jsprit.core.problem.job.Delivery;
+import com.graphhopper.jsprit.core.problem.job.Pickup;
+import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
+import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.*;
+
+public class ServiceDeliveryAllowedConstraint implements HardActivityConstraint {
+    Map<Integer,List<String>> pedidos  ;
+    
+    StateManager stateManager;
+    
+    private Map<Integer,StateId> states;
+    
+
+    public ServiceDeliveryAllowedConstraint(Map<Integer, List<Service>> pedidosOriginal) {
+        pedidos = new HashMap<Integer,List<String>>();
+        for(Map.Entry<Integer,List<Service>> entry: pedidosOriginal.entrySet()){
+           if(!pedidos.containsKey(entry.getKey()))
+                pedidos.put(entry.getKey(),new ArrayList<String>());
+            pedidos.get(entry.getKey()).addAll(entry.getValue().stream().map(f -> f.getId()).collect(Collectors.toList()));
+        }
+       // this.pedidos = pedidos.entrySet().stream().map(f-> f.get)
+    }
+
+    public ServiceDeliveryAllowedConstraint(){
+
+    }
+    
+    public ServiceDeliveryAllowedConstraint(StateManager stateManager,Map<Integer,StateId> states,Map<Integer, List<Service>> pedidosOriginal ){
+    	
+    	this( pedidosOriginal);
+    	this.stateManager = stateManager;
+    	this.states = states;
+    }
+
+    @Override
+    public ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prevAct, TourActivity newAct, TourActivity nextAct, double prevActDepTime) {
+
+        
+        
+        if(newAct instanceof  DeliverService){
+            Delivery s = (Delivery) ((DeliverService)newAct).getJob();  
+            String orderIdOriginal = s.getId().split("::")[0];
+            List<String> orderIds = new ArrayList<String>();
+            List<TourActivity> activities = iFacts.getRoute().getActivities();
+            for(TourActivity act: activities){
+                if(act instanceof PickupService){
+                    Pickup sgg = (Pickup) ((PickupService)act).getJob();
+                    orderIds.add(sgg.getId());
+                }
+                if(prevAct == act){
+                    if(!orderIds.contains(orderIdOriginal))  
+                        return ConstraintsStatus.NOT_FULFILLED;
+                }
+                
+            }
+        }
+        
+/*
+        if(newAct instanceof  DeliverService && nextAct instanceof PickupService){
+            Delivery s = (Delivery) ((DeliverService)newAct).getJob();  
+            String orderIdOriginal = s.getId().split("::")[0];
+            Pickup sgg = (Pickup) ((PickupService)nextAct).getJob();
+            if(orderIdOriginal.equalsIgnoreCase(sgg.getId()))  return ConstraintsStatus.NOT_FULFILLED;
+        }
+        if(newAct instanceof  DeliverService) {
+
+            /*
+
+            
+            Delivery s = (Delivery) ((DeliverService)newAct).getJob();  
+            String orderIdOriginal = s.getId().split("::")[0];
+            List<TourActivity> activities = iFacts.getRoute().getActivities();
+            boolean insertable = false;
+            if(activities.isEmpty()) return   ConstraintsStatus.NOT_FULFILLED_BREAK;
+            for( int indice = newAct.getIndex()-1; indice>=0;indice--){
+                if(indice >= activities.size()) return   ConstraintsStatus.NOT_FULFILLED_BREAK;
+                TourActivity act = activities.get(indice);
+                if(act instanceof PickupService){
+                    Pickup sgg = (Pickup) ((PickupService)act).getJob();
+                    if(sgg.getId().equalsIgnoreCase(orderIdOriginal)) 
+                        insertable = true;
+                }
+            }
+
+            if(insertable)
+                return ConstraintsStatus.FULFILLED;
+            else return ConstraintsStatus.NOT_FULFILLED;
+            */
+
+            /*
+            
+            Map<String, Integer> ordenPosicion = new HashMap<String, Integer>();
+
+
+        	Delivery s = (Delivery) ((DeliverService)newAct).getJob();  
+        	String orderIdOriginal = s.getId().split("::")[0];
+            StateId sx = this.states.get(Integer.parseInt(orderIdOriginal));
+          
+            List<String> orderIds = new ArrayList<String>();
+            List<TourActivity> activities = iFacts.getRoute().getActivities();
+            //System.out.println("========");
+            for(TourActivity act: activities){
+                if(act instanceof Start || act instanceof End ){
+                    continue;
+                }else{
+
+                    if(act instanceof PickupService){
+                        Pickup sgg = (Pickup) ((PickupService)act).getJob();
+                       
+                        orderIds.add(sgg.getId());
+                        ordenPosicion.put(sgg.getId(),sgg.getIndex());
+              
+                       // if(s.getId().equalsIgnoreCase("1"))
+                       // System.out.println(orderIds+":::"+sgg.getId());
+                        
+                    }
+                    
+                    if(act instanceof DeliverService){
+                    	Delivery sgg = (Delivery) ((DeliverService)act).getJob();
+                        if(!orderIds.contains(sgg.getId().split("::")[0]))  
+                            return ConstraintsStatus.NOT_FULFILLED;
+                        
+                    }
+                
+                }
+              }     
+            if(!orderIds.contains(orderIdOriginal))  return ConstraintsStatus.NOT_FULFILLED;
+
+            */
+           
+            /*
+            if(ordenPosicion.get(orderIdOriginal) > ((Delivery) ((DeliverService)newAct).getJob()) .getIndex()) return ConstraintsStatus.NOT_FULFILLED;
+            
+            if(nextAct instanceof PickupService){
+                Pickup sgg = (Pickup) ((PickupService)nextAct).getJob();
+                if(sgg.getId().equalsIgnoreCase(orderIdOriginal)) 
+                return ConstraintsStatus.NOT_FULFILLED;
+
+            }
+
+             }
+*/
+            
+
+       
+        
+        
+
+        /*
+        if(nextAct instanceof  PickupService) {
+            Pickup sx = (Pickup) ((PickupService)nextAct).getJob();
+            List<TourActivity> activities = iFacts.getRoute().getActivities();
+            for(TourActivity act: activities){
+                 
+
+                    if(act instanceof DeliverService){
+                        Delivery s = (Delivery) ((DeliverService)act).getJob();  
+                        String orderIdOriginal = s.getId().split("::")[0];
+                        if(orderIdOriginal.equalsIgnoreCase(sx.getId()))
+                        return ConstraintsStatus.NOT_FULFILLED_BREAK;
+                        
+                    } 
+                 
+            }
+        }
+        */
+
+        return ConstraintsStatus.FULFILLED;
+        
+    }
+
+}
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/util/ServiceDeliveryAsociatePickupConstraint.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/util/ServiceDeliveryAsociatePickupConstraint.java
index da490f135..a491209a6 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/util/ServiceDeliveryAsociatePickupConstraint.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/util/ServiceDeliveryAsociatePickupConstraint.java
@@ -46,12 +46,14 @@ public boolean fulfilled(JobInsertionContext iFacts) {
     		 //System.out.println(s.getId()+" size "+ iFacts.getRoute().getActivities() .size());
              String orderIdOriginal = s.getId().split("::")[0];
              StateId sx = this.states.get(Integer.parseInt(orderIdOriginal));
+            
+            /*
              VehicleRoute route = stateManager.getProblemState(sx, VehicleRoute.class);
              if(route!=null && route != iFacts.getRoute())  return false;
              else if(route==null) return false;
             // System.out.println("size "+ iFacts.getAssociatedActivities().size()); 
              if( iFacts.getRoute().getActivities().isEmpty()) return false;
-             
+             */
              
              
              List<String> orderIds = new ArrayList<String>();
@@ -60,6 +62,10 @@ public boolean fulfilled(JobInsertionContext iFacts) {
                      
                      Pickup spick = (Pickup) ((PickupService)ac).getJob();
                      orderIds.add(spick.getId());
+                     if(spick.getId().equalsIgnoreCase(orderIdOriginal)){
+                         
+                       // if(job.getIndex()<= ac.getIndex()+1) return false;
+                     }
                     // System.out.println(orderIds);
                  }else if(ac instanceof DeliverService){
                      
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/util/ServicePickupFirstConstrain.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/util/ServicePickupFirstConstraint.java
similarity index 55%
rename from jsprit-examples/src/main/java/com/graphhopper/jsprit/util/ServicePickupFirstConstrain.java
rename to jsprit-examples/src/main/java/com/graphhopper/jsprit/util/ServicePickupFirstConstraint.java
index e4e0d2681..2acfdfdfa 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/util/ServicePickupFirstConstrain.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/util/ServicePickupFirstConstraint.java
@@ -17,7 +17,7 @@
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.*;
 
-public class ServicePickupFirstConstrain implements HardActivityConstraint {
+public class ServicePickupFirstConstraint implements HardActivityConstraint {
     Map<Integer,List<String>> pedidos  ;
     
     StateManager stateManager;
@@ -25,7 +25,7 @@
     private Map<Integer,StateId> states;
     
 
-    public ServicePickupFirstConstrain(Map<Integer, List<Service>> pedidosOriginal) {
+    public ServicePickupFirstConstraint(Map<Integer, List<Service>> pedidosOriginal) {
         pedidos = new HashMap<Integer,List<String>>();
         for(Map.Entry<Integer,List<Service>> entry: pedidosOriginal.entrySet()){
            if(!pedidos.containsKey(entry.getKey()))
@@ -35,11 +35,11 @@ public ServicePickupFirstConstrain(Map<Integer, List<Service>> pedidosOriginal)
        // this.pedidos = pedidos.entrySet().stream().map(f-> f.get)
     }
 
-    public ServicePickupFirstConstrain(){
+    public ServicePickupFirstConstraint(){
 
     }
     
-    public ServicePickupFirstConstrain(StateManager stateManager,Map<Integer,StateId> states,Map<Integer, List<Service>> pedidosOriginal ){
+    public ServicePickupFirstConstraint(StateManager stateManager,Map<Integer,StateId> states,Map<Integer, List<Service>> pedidosOriginal ){
     	
     	this( pedidosOriginal);
     	this.stateManager = stateManager;
@@ -83,49 +83,6 @@ public ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prev
         
      
         
-        if(newAct instanceof  DeliverService) {
-        	Delivery s = (Delivery) ((DeliverService)newAct).getJob();  
-        	String orderIdOriginal = s.getId().split("::")[0];
-            StateId sx = this.states.get(Integer.parseInt(orderIdOriginal));
-            VehicleRoute route = stateManager.getProblemState(sx, VehicleRoute.class);
-            if(route==null)  return ConstraintsStatus.NOT_FULFILLED;
-            else if(route != iFacts.getRoute()) return ConstraintsStatus.NOT_FULFILLED;
-            
-            List<String> orderIds = new ArrayList<String>();
-            List<TourActivity> activities = iFacts.getRoute().getActivities();
-            //System.out.println("========");
-            for(TourActivity act: activities){
-                if(act instanceof Start || act instanceof End ){
-                    continue;
-                }else{
-
-                    if(act instanceof PickupService){
-                        Pickup sgg = (Pickup) ((PickupService)act).getJob();
-                       
-                        orderIds.add(sgg.getId());
-                      
-                       // if(s.getId().equalsIgnoreCase("1"))
-                       // System.out.println(orderIds+":::"+sgg.getId());
-                        
-                    }
-                    
-                    if(act instanceof DeliverService){
-                    	Delivery sgg = (Delivery) ((DeliverService)act).getJob();
-                       
-                       
-                       if(!orderIds.contains(sgg.getId().split("::")[0]))  return ConstraintsStatus.NOT_FULFILLED;
-                     //   System.out.println(orderIds+"---"+sgg.getId());
-                        
-                    }
-                
-                }
-              }     
-          //  System.out.println("========");
-            // System.out.println(orderIdOriginal+"*****"+s.getId());
-             if(!orderIds.contains(orderIdOriginal))  return ConstraintsStatus.NOT_FULFILLED;
-             
-        }
-        
         if(newAct instanceof  PickupService) {
         	Pickup s = (Pickup) ((PickupService)newAct).getJob();  
         	String orderIdOriginal = s.getId() ;
@@ -180,6 +137,7 @@ public ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prev
                     	 existeDelivery = true;
                          Delivery s = (Delivery) ((DeliverService)act).getJob();  
                          String orderIdOriginal = s.getId().split("::")[0];
+                         
                         // System.out.println(s.getId());
                          if(!orderIds.contains(orderIdOriginal))  return ConstraintsStatus.NOT_FULFILLED;
                          total.put(orderIdOriginal, 1+total.get(orderIdOriginal));
@@ -187,68 +145,12 @@ public ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prev
                  }
              }
              
-             
-             /*
-             for(Map.Entry<String, Integer> totalC: total.entrySet()) {
-            	 Integer key = Integer.parseInt(totalC.getKey());
-            	 System.out.println(key+"::"+totalC.getValue()+"::"+(this.pedidos.get(key).size()-1)+"::"+orderIds); 
-            	 //if(this.pedidos.get(key).size()!= totalC.getValue())  
-            		// return ConstraintsStatus.NOT_FULFILLED;
-            	 //-1 restar el propio pickup
-            	 if(totalC.getValue()!=0 ) {
-            		 if(this.pedidos.get(key).size()-1!= totalC.getValue())  
-            			 return ConstraintsStatus.NOT_FULFILLED_BREAK;
-            	 }else {
-            		 if(existeDelivery)
-            			 if(totalC.getValue() < this.pedidos.get(key).size()-1)
-            				 return ConstraintsStatus.NOT_FULFILLED;
-            	 }
-            		
-             }
-             */
+            
              
              
               
         }
          
-        /* 
-        
-        if(nextAct instanceof End){
-            if(iFacts.getRoute().getVehicle().getId().equalsIgnoreCase("Ñuñoa@[8,0]")){
-                System.out.println(prevAct.getName()+ " :: "+  newAct.getName());
-            }
-            //System.out.println(iFacts.getRoute().getTourActivities().getActivities().size());
-        }
-        */
-        
-        /*
-        if( newAct instanceof  DeliverService ){
-            Delivery s = (Delivery) ((DeliverService)newAct).getJob();  
-            if(iFacts.getRoute().getVehicle().getId().equalsIgnoreCase("Ñuñoa@[8,0]") &&  s.getId().equalsIgnoreCase("1::8")){
-                
-                    System.out.println(iFacts.getRoute().getTourActivities().getActivities().size());
-            }
-            
-        }
-        */
-      
-
-        /*
-        if (newAct instanceof  DeliverService && nextAct instanceof  PickupService) {
-            return ConstraintsStatus.NOT_FULFILLED;
-        }
-        if (newAct instanceof ServiceActivity && nextAct instanceof PickupService) {
-            return ConstraintsStatus.NOT_FULFILLED;
-        }
-        if (newAct instanceof PickupService && prevAct instanceof  DeliverService) {
-            return ConstraintsStatus.NOT_FULFILLED_BREAK;
-        }
-        if (newAct instanceof DeliverService && prevAct instanceof ServiceActivity) {
-            return ConstraintsStatus.NOT_FULFILLED_BREAK;
-        }
-
-        */
-
 
         return ConstraintsStatus.FULFILLED;
         
