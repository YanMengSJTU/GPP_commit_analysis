diff --git a/jsprit-analysis/src/test/java/com/graphhopper/jsprit/analysis/toolbox/GraphStreamViewerTest.java b/jsprit-analysis/src/test/java/com/graphhopper/jsprit/analysis/toolbox/GraphStreamViewerTest.java
index d1f1014c7..512c25a94 100644
--- a/jsprit-analysis/src/test/java/com/graphhopper/jsprit/analysis/toolbox/GraphStreamViewerTest.java
+++ b/jsprit-analysis/src/test/java/com/graphhopper/jsprit/analysis/toolbox/GraphStreamViewerTest.java
@@ -27,7 +27,7 @@
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Break;
 import com.graphhopper.jsprit.core.problem.job.CustomJob;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
@@ -94,7 +94,7 @@ public void testPlotWithShipments() {
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0, 3).build();
         Vehicle vehicle = VehicleImpl.Builder.newInstance("vehicle").setStartLocation(Location.newInstance(0, 0))
                 .setType(type).build();
-        Shipment shipment = Shipment.Builder.newInstance("shipment").setPickupLocation(Location.newInstance(-5, 4))
+        ShipmentJob shipment = ShipmentJob.Builder.newInstance("shipment").setPickupLocation(Location.newInstance(-5, 4))
                 .addSizeDimension(0, 2).setDeliveryLocation(Location.newInstance(20, 10)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(shipment).addVehicle(vehicle).build();
         VehicleRoutingProblemSolution solution = Solutions.bestOf(Jsprit.createAlgorithm(vrp).searchSolutions());
diff --git a/jsprit-analysis/src/test/java/com/graphhopper/jsprit/analysis/toolbox/PlotterTest.java b/jsprit-analysis/src/test/java/com/graphhopper/jsprit/analysis/toolbox/PlotterTest.java
index 9c32c2f16..9710e34c4 100644
--- a/jsprit-analysis/src/test/java/com/graphhopper/jsprit/analysis/toolbox/PlotterTest.java
+++ b/jsprit-analysis/src/test/java/com/graphhopper/jsprit/analysis/toolbox/PlotterTest.java
@@ -26,7 +26,7 @@
 import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.CustomJob;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
@@ -90,7 +90,7 @@ public void testPlotWithShipments() {
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0, 3).build();
         Vehicle vehicle = VehicleImpl.Builder.newInstance("vehicle").setStartLocation(Location.newInstance(0, 0))
                 .setType(type).build();
-        Shipment shipment = Shipment.Builder.newInstance("shipment").setPickupLocation(Location.newInstance(-5, 4))
+        ShipmentJob shipment = ShipmentJob.Builder.newInstance("shipment").setPickupLocation(Location.newInstance(-5, 4))
                 .addSizeDimension(0, 2).setDeliveryLocation(Location.newInstance(20, 10)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(shipment).addVehicle(vehicle).build();
         VehicleRoutingProblemSolution solution = Solutions.bestOf(Jsprit.createAlgorithm(vrp).searchSolutions());
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceDeliveriesFirstConstraint.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceDeliveriesFirstConstraint.java
index 32af90884..a75f08ce6 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceDeliveriesFirstConstraint.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceDeliveriesFirstConstraint.java
@@ -18,7 +18,7 @@
 package com.graphhopper.jsprit.core.problem.constraint;
 
 import com.graphhopper.jsprit.core.problem.job.ServiceJob;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.*;
 
@@ -67,7 +67,7 @@ protected ConstraintsStatus newMethod(TourActivity prevAct, TourActivity newAct,
     }
 
     protected boolean isShipment(TourActivity newAct) {
-        return newAct instanceof JobActivity && ((JobActivity) newAct).getJob() instanceof Shipment;
+        return newAct instanceof JobActivity && ((JobActivity) newAct).getJob() instanceof ShipmentJob;
     }
 
     protected boolean isService(TourActivity newAct) {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/ReturnedShipment.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/ReturnedShipment.java
index 6dd23cdd4..2a4eb79c1 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/ReturnedShipment.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/ReturnedShipment.java
@@ -32,7 +32,7 @@
  *
  * @author balage
  */
-public final class ReturnedShipment extends Shipment {
+public final class ReturnedShipment extends ShipmentJob {
 
     public static final String BACKHAUL_ACTIVITY_NAME = "backhaul";
 
@@ -42,7 +42,7 @@
      * @author schroeder
      */
 
-    public static final class Builder extends Shipment.BuilderBase<ReturnedShipment, Builder> {
+    public static final class Builder extends ShipmentJob.BuilderBase<ReturnedShipment, Builder> {
 
         private double backhaulServiceTime = 0.0;
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java
index 9751fa236..c1b09a092 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java
@@ -18,6 +18,7 @@
 package com.graphhopper.jsprit.core.problem.job;
 
 import java.util.Collection;
+import java.util.List;
 
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.Location;
@@ -102,8 +103,11 @@
     /**
      * Builder that builds a service.
      *
+     * @deprecated Use {@linkplain CustomJob.Builder} instead
+     *
      * @author schroeder
      */
+    @Deprecated
     public static class Builder<T extends Service> {
 
         /**
@@ -452,4 +456,35 @@ protected void createActivities(JobBuilder<? extends AbstractJob, ?> jobBuilder)
         // This is unused being a legacy implementation
     }
 
+    @Override
+    public int getIndex() {
+        return theRealJob.getIndex();
+    }
+
+    @Override
+    public void setIndex(int index) {
+        theRealJob.setIndex(index);
+    }
+
+    @Override
+    public List<Location> getAllLocations() {
+        return theRealJob.getAllLocations();
+    }
+
+    @Override
+    public SizeDimension getSizeAtStart() {
+        return theRealJob.getSizeAtStart();
+    }
+
+    @Override
+    public SizeDimension getSizeAtEnd() {
+        return theRealJob.getSizeAtEnd();
+    }
+
+    @Override
+    public JobActivityList getActivityList() {
+        return theRealJob.getActivityList();
+    }
+
+
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java
index 653543ab6..37071229c 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java
@@ -17,8 +17,15 @@
  */
 package com.graphhopper.jsprit.core.problem.job;
 
+import java.util.Collection;
+import java.util.List;
+
+import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.SizeDimension;
+import com.graphhopper.jsprit.core.problem.Skills;
+import com.graphhopper.jsprit.core.problem.job.CustomJob.BuilderBase.ActivityType;
+import com.graphhopper.jsprit.core.problem.job.CustomJob.BuilderBase.BuilderActivityInfo;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
@@ -30,7 +37,7 @@
  * of something.
  * <p>
  * <p>
- * It distinguishes itself from {@link ServiceJob} as two locations are involved a
+ * It distinguishes itself from {@link Service} as two locations are involved a
  * pickup where usually something is loaded to the transport unit and a delivery
  * where something is unloaded.
  * <p>
@@ -48,348 +55,545 @@
  * <p>
  * Note that two shipments are equal if they have the same id.
  *
+ * @deprecated Use {@linkplain CustomJob} instead
+ *
+ *
+ *             <p>
+ *             <h1><em>Warning!</em></h1>
+ *             </p>
+ *
+ *             <p>
+ *             <strong>This class is deprecated and only available for backward
+ *             compatibility and for easier migration.</strong>
+ *             </p>
+ *             <p>
+ *             This class wraps a new CustomJob instance and delegates its
+ *             values and the values from its sole activity. It is strongly
+ *             recommended to switch to the {@linkplain CustomJob} and use one
+ *             of the following functions of its builder to add the service
+ *             activity:
+ *
+ *             <ul>
+ *             <li>{@linkplain CustomJob.Builder#addService(Location)}</li>
+ *             <li>
+ *             {@linkplain CustomJob.Builder#addService(Location, SizeDimension)}
+ *             </li>
+ *             <li>
+ *             {@linkplain CustomJob.Builder#addService(Location, SizeDimension, double)}
+ *             </li>
+ *             <li>
+ *             {@linkplain CustomJob.Builder#addService(Location, SizeDimension, double, TimeWindow)}
+ *             </li>
+ *             </ul>
+ *
+ *             or if you need more control on the activity, use the
+ *             {@linkplain CustomJob.Builder#addActivity(BuilderActivityInfo)}
+ *             function:
+ *
+ *             <pre>
+ *    BuilderActivityInfo activityInfo = new BuilderActivityInfo(ActivityType.SERVICE, <i>location</i>);
+
+        activityInfo.withName(<i>activity name</i>);
+        activityInfo.withOperationTime(<i>serviceTime</i>);
+        activityInfo.withSize((SizeDimension) <i>capacity</i>);
+        activityInfo.withTimeWindows(<i>timeWindows</i>);
+        activityInfo.withTimeWindow(<i>timeWindow</i>);
+
+        CustomJob.Builder customJobBuilder = new CustomJob.Builder(<i>id</i>);
+        customJobBuilder
+            .addActivity(activityInfo)
+            .addAllRequiredSkills(<i>skills<i>)
+            .setName(<i>job name</i>)
+            .setPriority(<i>priority</i>);
+
+        job = customJobBuilder.build();
+ *             </pre>
+ *
+ *             </p>
+ *
+ * @author schroeder
+ * @author Balage
+ *
+ * @see {@linkplain CustomJob}
+ * @see {@linkplain CustomJob.Builder}
+ * @see {@linkplain CustomJob.BuilderBase.BuilderActivityInfo}
+ *
+ *
  * @author schroeder
  */
+@Deprecated
 public class Shipment extends AbstractJob {
 
-    public static final String DELIVERY_ACTIVITY_NAME = "deliverShipment";
-    public static final String PICKUP_ACTIVITY_NAME = "pickupShipment";
+
+
 
     /**
      * Builder that builds the shipment.
      *
+     * @deprecated Use {@linkplain CustomJob.Builder} instead
      * @author schroeder
      */
-    public static abstract class BuilderBase<T extends Shipment, B extends BuilderBase<T, B>>
-    extends JobBuilder<T, B> {
+    @Deprecated
+    public static class Builder {
+
+        private String id;
 
         private double pickupServiceTime = 0.0;
 
         private double deliveryServiceTime = 0.0;
 
-        private Location pickupLocation;
+        private TimeWindow deliveryTimeWindow = TimeWindow.newInstance(0.0, Double.MAX_VALUE);
+
+        private TimeWindow pickupTimeWindow = TimeWindow.newInstance(0.0, Double.MAX_VALUE);
+
+        private Capacity.Builder capacityBuilder = Capacity.Builder.newInstance();
 
-        private Location deliveryLocation;
+        private Capacity capacity;
 
-        protected TimeWindowsImpl deliveryTimeWindows = new TimeWindowsImpl();
+        private Skills.Builder skillBuilder = Skills.Builder.newInstance();
 
-        private TimeWindowsImpl pickupTimeWindows = new TimeWindowsImpl();
+        private Skills skills;
+
+        private String name = "no-name";
+
+        private Location pickupLocation_;
+
+        private Location deliveryLocation_;
+
+        protected TimeWindowsImpl deliveryTimeWindows;
+
+        private boolean deliveryTimeWindowAdded = false;
+
+        private boolean pickupTimeWindowAdded = false;
+
+        private TimeWindowsImpl pickupTimeWindows;
+
+        private int priority = 2;
+
+        public Object userData;
 
         /**
          * Returns new instance of this builder.
          *
-         * @param id the id of the shipment which must be a unique identifier
-         *           among all jobs
+         * @param id the id of the shipment which must be a unique identifier among all jobs
          * @return the builder
          */
+        public static Builder newInstance(String id) {
+            return new Builder(id);
+        }
 
-        public BuilderBase(String id) {
-            super(id);
+        Builder(String id) {
+            if (id == null) throw new IllegalArgumentException("id must not be null");
+            this.id = id;
             pickupTimeWindows = new TimeWindowsImpl();
+            pickupTimeWindows.add(pickupTimeWindow);
             deliveryTimeWindows = new TimeWindowsImpl();
+            deliveryTimeWindows.add(deliveryTimeWindow);
+        }
+
+        /**
+         * Sets user specific domain data associated with the object.
+         *
+         * <p>
+         * The user data is a black box for the framework, it only stores it,
+         * but never interacts with it in any way.
+         * </p>
+         *
+         * @param userData
+         *            any object holding the domain specific user data
+         *            associated with the object.
+         * @return builder
+         */
+        public Builder setUserData(Object userData) {
+            this.userData = userData;
+            return this;
         }
 
         /**
          * Sets pickup location.
          *
-         * @param pickupLocation pickup location
+         * @param pickupLocation
+         *            pickup location
          * @return builder
          */
-        @SuppressWarnings("unchecked")
-        public B setPickupLocation(Location pickupLocation) {
-            this.pickupLocation = pickupLocation;
-            return (B) this;
+        public Builder setPickupLocation(Location pickupLocation) {
+            this.pickupLocation_ = pickupLocation;
+            return this;
         }
 
         /**
          * Sets pickupServiceTime.
          * <p>
-         * <p>
-         * ServiceTime is intended to be the time the implied activity takes at
-         * the pickup-location.
+         * <p>ServiceTime is intended to be the time the implied activity takes at the pickup-location.
          *
-         * @param serviceTime the service time / duration the pickup of the associated
-         *                    shipment takes
+         * @param serviceTime the service time / duration the pickup of the associated shipment takes
          * @return builder
          * @throws IllegalArgumentException if servicTime < 0.0
          */
-        @SuppressWarnings("unchecked")
-        public B setPickupServiceTime(double serviceTime) {
-            if (serviceTime < 0.0) {
-                throw new IllegalArgumentException("serviceTime must not be < 0.0");
-            }
-            pickupServiceTime = serviceTime;
-            return (B) this;
+        public Builder setPickupServiceTime(double serviceTime) {
+            if (serviceTime < 0.0) throw new IllegalArgumentException("serviceTime must not be < 0.0");
+            this.pickupServiceTime = serviceTime;
+            return this;
         }
 
         /**
-         * Sets the timeWindow for the pickup, i.e. the time-period in which a
-         * pickup operation is allowed to START.
+         * Sets the timeWindow for the pickup, i.e. the time-period in which a pickup operation is
+         * allowed to START.
          * <p>
-         * <p>
-         * By default timeWindow is [0.0, Double.MAX_VALUE}
+         * <p>By default timeWindow is [0.0, Double.MAX_VALUE}
          *
-         * @param timeWindow the time window within the pickup operation/activity can
-         *                   START
+         * @param timeWindow the time window within the pickup operation/activity can START
          * @return builder
          * @throws IllegalArgumentException if timeWindow is null
          */
-        @SuppressWarnings("unchecked")
-        public B setPickupTimeWindow(TimeWindow timeWindow) {
-            if (timeWindow == null) {
-                throw new IllegalArgumentException("pickup time-window must not be null");
-            }
-            pickupTimeWindows.clear();
-            pickupTimeWindows.add(timeWindow);
-            return (B) this;
+        public Builder setPickupTimeWindow(TimeWindow timeWindow) {
+            if (timeWindow == null) throw new IllegalArgumentException("delivery time-window must not be null");
+            this.pickupTimeWindow = timeWindow;
+            this.pickupTimeWindows = new TimeWindowsImpl();
+            this.pickupTimeWindows.add(timeWindow);
+            return this;
         }
 
 
+
         /**
          * Sets delivery location.
          *
          * @param deliveryLocation delivery location
          * @return builder
          */
-        @SuppressWarnings("unchecked")
-        public B setDeliveryLocation(Location deliveryLocation) {
-            this.deliveryLocation = deliveryLocation;
-            return (B) this;
+        public Builder setDeliveryLocation(Location deliveryLocation) {
+            this.deliveryLocation_ = deliveryLocation;
+            return this;
         }
 
         /**
          * Sets the delivery service-time.
          * <p>
-         * <p>
-         * ServiceTime is intended to be the time the implied activity takes at
-         * the delivery-location.
+         * <p>ServiceTime is intended to be the time the implied activity takes at the delivery-location.
          *
          * @param deliveryServiceTime the service time / duration of shipment's delivery
          * @return builder
          * @throws IllegalArgumentException if serviceTime < 0.0
          */
-        @SuppressWarnings("unchecked")
-        public B setDeliveryServiceTime(double deliveryServiceTime) {
-            if (deliveryServiceTime < 0.0) {
-                throw new IllegalArgumentException("deliveryServiceTime must not be < 0.0");
-            }
+        public Builder setDeliveryServiceTime(double deliveryServiceTime) {
+            if (deliveryServiceTime < 0.0) throw new IllegalArgumentException("deliveryServiceTime must not be < 0.0");
             this.deliveryServiceTime = deliveryServiceTime;
-            return (B) this;
+            return this;
         }
 
         /**
-         * Sets the timeWindow for the delivery, i.e. the time-period in which a
-         * delivery operation is allowed to start.
-         * <p>
+         * Sets the timeWindow for the delivery, i.e. the time-period in which a delivery operation is
+         * allowed to start.
          * <p>
-         * By default timeWindow is [0.0, Double.MAX_VALUE}
+         * <p>By default timeWindow is [0.0, Double.MAX_VALUE}
          *
-         * @param timeWindow the time window within the associated delivery is allowed
-         *                   to START
+         * @param timeWindow the time window within the associated delivery is allowed to START
          * @return builder
          * @throws IllegalArgumentException if timeWindow is null
          */
-        @SuppressWarnings("unchecked")
-        public B setDeliveryTimeWindow(TimeWindow timeWindow) {
-            if (timeWindow == null) {
-                throw new IllegalArgumentException("delivery time-window must not be null");
-            }
-            deliveryTimeWindows.clear();
-            deliveryTimeWindows.add(timeWindow);
-            return (B) this;
+        public Builder setDeliveryTimeWindow(TimeWindow timeWindow) {
+            if (timeWindow == null) throw new IllegalArgumentException("delivery time-window must not be null");
+            this.deliveryTimeWindow = timeWindow;
+            this.deliveryTimeWindows = new TimeWindowsImpl();
+            this.deliveryTimeWindows.add(timeWindow);
+            return this;
+        }
+
+        /**
+         * Adds capacity dimension.
+         *
+         * @param dimensionIndex the dimension index of the corresponding capacity value
+         * @param dimensionValue the capacity value
+         * @return builder
+         * @throws IllegalArgumentException if dimVal < 0
+         */
+        public Builder addSizeDimension(int dimensionIndex, int dimensionValue) {
+            if (dimensionValue < 0) throw new IllegalArgumentException("capacity value cannot be negative");
+            capacityBuilder.addDimension(dimensionIndex, dimensionValue);
+            return this;
+        }
+
+
+
+        public Builder addRequiredSkill(String skill) {
+            skillBuilder.addSkill(skill);
+            return this;
+        }
+
+        public Builder setName(String name) {
+            this.name = name;
+            return this;
         }
 
-        @SuppressWarnings("unchecked")
-        public B addDeliveryTimeWindow(TimeWindow timeWindow) {
-            if (timeWindow == null) {
-                throw new IllegalArgumentException("time-window arg must not be null");
+        public Builder addDeliveryTimeWindow(TimeWindow timeWindow) {
+            if(timeWindow == null) throw new IllegalArgumentException("time-window arg must not be null");
+            if(!deliveryTimeWindowAdded){
+                deliveryTimeWindows = new TimeWindowsImpl();
+                deliveryTimeWindowAdded = true;
             }
             deliveryTimeWindows.add(timeWindow);
-            return (B) this;
+            return this;
         }
 
-        @SuppressWarnings("unchecked")
-        public B addDeliveryTimeWindow(double earliest, double latest) {
+        public Builder addDeliveryTimeWindow(double earliest, double latest) {
             addDeliveryTimeWindow(TimeWindow.newInstance(earliest, latest));
-            return (B) this;
+            return this;
         }
 
-        @SuppressWarnings("unchecked")
-        public B addPickupTimeWindow(TimeWindow timeWindow) {
-            if (timeWindow == null) {
-                throw new IllegalArgumentException("time-window arg must not be null");
+        public Builder addPickupTimeWindow(TimeWindow timeWindow) {
+            if(timeWindow == null) throw new IllegalArgumentException("time-window arg must not be null");
+            if(!pickupTimeWindowAdded){
+                pickupTimeWindows = new TimeWindowsImpl();
+                pickupTimeWindowAdded = true;
             }
             pickupTimeWindows.add(timeWindow);
-            return (B) this;
+            return this;
         }
 
-        @SuppressWarnings("unchecked")
-        public B addPickupTimeWindow(double earliest, double latest) {
-            addPickupTimeWindow(TimeWindow.newInstance(earliest, latest));
-            return (B) this;
+        public Builder addPickupTimeWindow(double earliest, double latest) {
+            return addPickupTimeWindow(TimeWindow.newInstance(earliest, latest));
         }
 
-        @Override
-        protected void validate() {
-            if (pickupLocation == null) {
+        /**
+         * Set priority to shipment. Only 1 (high) to 10 (low) are allowed.
+         * <p>
+         * Default is 2 = medium.
+         *
+         * @param priority
+         * @return builder
+         */
+        public Builder setPriority(int priority) {
+            if (priority < 1 || priority > 10)
+                throw new IllegalArgumentException("incorrect priority. only 1 (very high) to 10 (very low) are allowed");
+            this.priority = priority;
+            return this;
+        }
+
+
+        /**
+         * Builds the shipment.
+         *
+         * @return shipment
+         * @throws IllegalArgumentException
+         *             if neither pickup-location nor pickup-coord is set or if
+         *             neither delivery-location nor delivery-coord is set
+         */
+        public Shipment build() {
+            if (pickupLocation_ == null)
                 throw new IllegalArgumentException("pickup location is missing");
-            }
-            if (deliveryLocation == null) {
+            if (deliveryLocation_ == null)
                 throw new IllegalArgumentException("delivery location is missing");
-            }
-            if (pickupTimeWindows.isEmpty()) {
-                pickupTimeWindows.add(TimeWindow.ETERNITY);
-            }
-            if (deliveryTimeWindows.isEmpty()) {
-                deliveryTimeWindows.add(TimeWindow.ETERNITY);
-            }
+            capacity = capacityBuilder.build();
+            skills = skillBuilder.build();
+            return new Shipment(this);
         }
+    }
 
-        // ---- Refactor test
+    private CustomJob theRealJob;
+    private PickupActivity theRealPickupActivity;
+    private DeliveryActivity theRealDeliveryActivity;
+
+    Shipment(Builder builder) {
+
+        BuilderActivityInfo pickupActivityInfo = new BuilderActivityInfo(ActivityType.PICKUP,
+                builder.pickupLocation_);
+
+        pickupActivityInfo.withName(builder.name == null ? null : builder.name + ".pickup");
+        pickupActivityInfo.withOperationTime(builder.pickupServiceTime);
+        // Safe cast because SizeDimension is the only implementation of
+        // Capacity
+        pickupActivityInfo.withSize((SizeDimension) builder.capacity);
+        pickupActivityInfo.withTimeWindows(builder.pickupTimeWindows.getTimeWindows());
+
+        BuilderActivityInfo deliveryActivityInfo = new BuilderActivityInfo(ActivityType.DELIVERY,
+                builder.deliveryLocation_);
+
+        deliveryActivityInfo.withName(builder.name == null ? null : builder.name + ".delivery");
+        deliveryActivityInfo.withOperationTime(builder.deliveryServiceTime);
+        // Safe cast because SizeDimension is the only implementation of
+        // Capacity
+        deliveryActivityInfo.withSize((SizeDimension) builder.capacity);
+        deliveryActivityInfo.withTimeWindows(builder.deliveryTimeWindows.getTimeWindows());
+
+        CustomJob.Builder customJobBuilder = new CustomJob.Builder(builder.id);
+        customJobBuilder
+        .addActivity(pickupActivityInfo)
+        .addActivity(deliveryActivityInfo)
+        .addAllRequiredSkills(builder.skills)
+        .setName(builder.name)
+        .addUserData(builder.userData)
+        .setPriority(builder.priority);
+        theRealJob = customJobBuilder.build();
+
+        theRealPickupActivity = (PickupActivity) theRealJob.getActivityList().getAll().get(0);
+        theRealDeliveryActivity = (DeliveryActivity) theRealJob.getActivityList().getAll().get(1);
+    }
 
-        public double getPickupServiceTime() {
-            return pickupServiceTime;
-        }
+    @Override
+    public String getId() {
+        return theRealJob.getId();
+    }
 
-        public double getDeliveryServiceTime() {
-            return deliveryServiceTime;
-        }
+    public Location getPickupLocation() {
+        return theRealPickupActivity.getLocation();
+    }
 
-        public Location getPickupLocation() {
-            return pickupLocation;
-        }
+    /**
+     * Returns the pickup service-time.
+     * <p>
+     * <p>By default service-time is 0.0.
+     *
+     * @return service-time
+     */
+    public double getPickupServiceTime() {
+        return theRealPickupActivity.getOperationTime();
+    }
 
-        public Location getDeliveryLocation() {
-            return deliveryLocation;
-        }
+    public Location getDeliveryLocation() {
+        return theRealDeliveryActivity.getLocation();
+    }
 
-        public TimeWindowsImpl getDeliveryTimeWindows() {
-            return deliveryTimeWindows;
-        }
+    /**
+     * Returns service-time of delivery.
+     *
+     * @return service-time of delivery
+     */
+    public double getDeliveryServiceTime() {
+        return theRealDeliveryActivity.getOperationTime();
+    }
 
-        public TimeWindowsImpl getPickupTimeWindows() {
-            return pickupTimeWindows;
-        }
+    /**
+     * Returns the time-window of delivery.
+     *
+     * @return time-window of delivery
+     */
+    public TimeWindow getDeliveryTimeWindow() {
+        return theRealDeliveryActivity.getTimeWindows().iterator().next();
+    }
 
+    public Collection<TimeWindow> getDeliveryTimeWindows() {
+        return theRealDeliveryActivity.getTimeWindows();
     }
 
-    public static final class Builder extends BuilderBase<Shipment, Builder> {
+    /**
+     * Returns the time-window of pickup.
+     *
+     * @return time-window of pickup
+     */
+    public TimeWindow getPickupTimeWindow() {
+        return theRealPickupActivity.getTimeWindows().iterator().next();
+    }
 
-        public static Builder newInstance(String id) {
-            return new Builder(id);
-        }
+    public Collection<TimeWindow> getPickupTimeWindows() {
+        return theRealPickupActivity.getTimeWindows();
+    }
 
-        public Builder(String id) {
-            super(id);
-        }
+    @Override
+    public SizeDimension getSize() {
+        return theRealPickupActivity.getLoadSize();
+    }
 
-        @Override
-        protected Shipment createInstance() {
-            return new Shipment(this);
-        }
+    @Override
+    public Skills getRequiredSkills() {
+        return theRealJob.getRequiredSkills();
+    }
 
+    @Override
+    public String getName() {
+        return theRealJob.getName();
     }
 
+    /**
+     * Get priority of shipment. Only 1 = high priority, 2 = medium and 3 = low are allowed.
+     * <p>
+     * Default is 2 = medium.
+     *
+     * @return priority
+     */
+    @Override
+    public int getPriority() {
+        return theRealJob.getPriority();
+    }
 
-    Shipment(BuilderBase<? extends Shipment, ?> builder) {
-        super(builder);
+
+    @Override
+    protected void createActivities(JobBuilder<? extends AbstractJob, ?> jobBuilder) {
+        // This is unused being a legacy implementation
     }
 
+    @Override
+    public int getIndex() {
+        return theRealJob.getIndex();
+    }
 
     @Override
-    protected void createActivities(JobBuilder<?, ?> builder) {
-        Builder shipmentBuilder = (Builder) builder;
-        JobActivityList list = new SequentialJobActivityList(this);
-        list.addActivity(new PickupActivity(this, PICKUP_ACTIVITY_NAME,
-                        shipmentBuilder.getPickupLocation(),
-                        shipmentBuilder.getPickupServiceTime(), shipmentBuilder.getCapacity(),
-                        shipmentBuilder.getPickupTimeWindows().getTimeWindows()));
-        list.addActivity(new DeliveryActivity(this, DELIVERY_ACTIVITY_NAME,
-                        shipmentBuilder.getDeliveryLocation(),
-                        shipmentBuilder.getDeliveryServiceTime(),
-                        shipmentBuilder.getCapacity().invert(),
-                        shipmentBuilder.getDeliveryTimeWindows().getTimeWindows()));
-
-        setActivities(list);
+    public Object getUserData() {
+        return theRealJob.getUserData();
     }
 
-    public PickupActivity getPickupActivity() {
-        return (PickupActivity) getActivityList().findByType(PICKUP_ACTIVITY_NAME).get();
+    @Override
+    public List<Location> getAllLocations() {
+        return theRealJob.getAllLocations();
     }
 
-    public DeliveryActivity getDeliveryActivity() {
-        return (DeliveryActivity) getActivityList().findByType(DELIVERY_ACTIVITY_NAME).get();
+    @Override
+    public SizeDimension getSizeAtStart() {
+        return theRealJob.getSizeAtStart();
     }
 
-    // =================== DEPRECATED GETTERS
-
-    // @Deprecated
-    // public Location getPickupLocation() {
-    // return getPickupActivity().getLocation();
-    // }
-    //
-    // /**
-    // * Returns the pickup service-time.
-    // * <p>
-    // * <p>
-    // * By default service-time is 0.0.
-    // *
-    // * @return service-time
-    // */
-    // @Deprecated
-    // public double getPickupServiceTime() {
-    // return getPickupActivity().getOperationTime();
-    // }
-    //
-    // @Deprecated
-    // public Location getDeliveryLocation() {
-    // return getDeliveryActivity().getLocation();
-    // }
-    //
-    // /**
-    // * Returns service-time of delivery.
-    // *
-    // * @return service-time of delivery
-    // */
-    // @Deprecated
-    // public double getDeliveryServiceTime() {
-    // return getDeliveryActivity().getOperationTime();
-    // }
-    //
-    // /**
-    // * Returns the time-window of delivery.
-    // *
-    // * @return time-window of delivery
-    // */
-    // @Deprecated
-    // public TimeWindow getDeliveryTimeWindow() {
-    // return getDeliveryTimeWindows().iterator().next();
-    // }
-    //
-    // @Deprecated
-    // public Collection<TimeWindow> getDeliveryTimeWindows() {
-    // return getDeliveryActivity().getTimeWindows();
-    // }
-    //
-    // /**
-    // * Returns the time-window of pickup.
-    // *
-    // * @return time-window of pickup
-    // */
-    // @Deprecated
-    // public TimeWindow getPickupTimeWindow() {
-    // return getPickupTimeWindows().iterator().next();
-    // }
-    //
-    // @Deprecated
-    // public Collection<TimeWindow> getPickupTimeWindows() {
-    // return getPickupActivity().getTimeWindows();
-    // }
+    @Override
+    public SizeDimension getSizeAtEnd() {
+        return theRealJob.getSizeAtEnd();
+    }
 
     @Override
-    @Deprecated
-    public SizeDimension getSize() {
-        return getPickupActivity().getLoadChange();
+    public JobActivityList getActivityList() {
+        return theRealJob.getActivityList();
+    }
+
+    @Override
+    public Collection<TimeWindow> getTimeWindows() {
+        return theRealJob.getTimeWindows();
+    }
+
+    @Override
+    public String toString() {
+        return theRealJob.toString();
+    }
+
+    @Override
+    public void setIndex(int index) {
+        theRealJob.setIndex(index);
+    }
+
+
+    @Override
+    public int hashCode() {
+        final int prime = 31;
+        int result = 1;
+        result = prime * result + ((getId() == null) ? 0 : getId().hashCode());
+        return result;
+    }
+
+    /**
+     * Two services are equal if they have the same id.
+     */
+    @Override
+    public boolean equals(Object obj) {
+        if (this == obj)
+            return true;
+        if (obj == null)
+            return false;
+        if (getClass() != obj.getClass())
+            return false;
+        Shipment other = (Shipment) obj;
+        if (getId() == null) {
+            if (other.getId() != null)
+                return false;
+        } else if (!getId().equals(other.getId()))
+            return false;
+        return true;
     }
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/ShipmentJob.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/ShipmentJob.java
new file mode 100644
index 000000000..ff6e52612
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/ShipmentJob.java
@@ -0,0 +1,395 @@
+/*
+ * Licensed to GraphHopper GmbH under one or more contributor
+ * license agreements. See the NOTICE file distributed with this work for
+ * additional information regarding copyright ownership.
+ *
+ * GraphHopper GmbH licenses this file to you under the Apache License,
+ * Version 2.0 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.graphhopper.jsprit.core.problem.job;
+
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindowsImpl;
+
+
+/**
+ * Shipment is an implementation of Job and consists of a pickup and a delivery
+ * of something.
+ * <p>
+ * <p>
+ * It distinguishes itself from {@link ServiceJob} as two locations are involved a
+ * pickup where usually something is loaded to the transport unit and a delivery
+ * where something is unloaded.
+ * <p>
+ * <p>
+ * By default serviceTimes of both pickup and delivery is 0.0 and timeWindows of
+ * both is [0.0, Double.MAX_VALUE],
+ * <p>
+ * <p>
+ * A shipment can be built with a builder. You can get an instance of the
+ * builder by coding <code>Shipment.Builder.newInstance(...)</code>. This way
+ * you can specify the shipment. Once you build the shipment, it is immutable,
+ * i.e. fields/attributes cannot be changed anymore and you can only 'get' the
+ * specified values.
+ * <p>
+ * <p>
+ * Note that two shipments are equal if they have the same id.
+ *
+ * @author schroeder
+ */
+public class ShipmentJob extends AbstractJob {
+
+    public static final String DELIVERY_ACTIVITY_NAME = "deliverShipment";
+    public static final String PICKUP_ACTIVITY_NAME = "pickupShipment";
+
+    /**
+     * Builder that builds the shipment.
+     *
+     * @author schroeder
+     */
+    public static abstract class BuilderBase<T extends ShipmentJob, B extends BuilderBase<T, B>>
+    extends JobBuilder<T, B> {
+
+        private double pickupServiceTime = 0.0;
+
+        private double deliveryServiceTime = 0.0;
+
+        private Location pickupLocation;
+
+        private Location deliveryLocation;
+
+        protected TimeWindowsImpl deliveryTimeWindows = new TimeWindowsImpl();
+
+        private TimeWindowsImpl pickupTimeWindows = new TimeWindowsImpl();
+
+        /**
+         * Returns new instance of this builder.
+         *
+         * @param id the id of the shipment which must be a unique identifier
+         *           among all jobs
+         * @return the builder
+         */
+
+        public BuilderBase(String id) {
+            super(id);
+            pickupTimeWindows = new TimeWindowsImpl();
+            deliveryTimeWindows = new TimeWindowsImpl();
+        }
+
+        /**
+         * Sets pickup location.
+         *
+         * @param pickupLocation pickup location
+         * @return builder
+         */
+        @SuppressWarnings("unchecked")
+        public B setPickupLocation(Location pickupLocation) {
+            this.pickupLocation = pickupLocation;
+            return (B) this;
+        }
+
+        /**
+         * Sets pickupServiceTime.
+         * <p>
+         * <p>
+         * ServiceTime is intended to be the time the implied activity takes at
+         * the pickup-location.
+         *
+         * @param serviceTime the service time / duration the pickup of the associated
+         *                    shipment takes
+         * @return builder
+         * @throws IllegalArgumentException if servicTime < 0.0
+         */
+        @SuppressWarnings("unchecked")
+        public B setPickupServiceTime(double serviceTime) {
+            if (serviceTime < 0.0) {
+                throw new IllegalArgumentException("serviceTime must not be < 0.0");
+            }
+            pickupServiceTime = serviceTime;
+            return (B) this;
+        }
+
+        /**
+         * Sets the timeWindow for the pickup, i.e. the time-period in which a
+         * pickup operation is allowed to START.
+         * <p>
+         * <p>
+         * By default timeWindow is [0.0, Double.MAX_VALUE}
+         *
+         * @param timeWindow the time window within the pickup operation/activity can
+         *                   START
+         * @return builder
+         * @throws IllegalArgumentException if timeWindow is null
+         */
+        @SuppressWarnings("unchecked")
+        public B setPickupTimeWindow(TimeWindow timeWindow) {
+            if (timeWindow == null) {
+                throw new IllegalArgumentException("pickup time-window must not be null");
+            }
+            pickupTimeWindows.clear();
+            pickupTimeWindows.add(timeWindow);
+            return (B) this;
+        }
+
+
+        /**
+         * Sets delivery location.
+         *
+         * @param deliveryLocation delivery location
+         * @return builder
+         */
+        @SuppressWarnings("unchecked")
+        public B setDeliveryLocation(Location deliveryLocation) {
+            this.deliveryLocation = deliveryLocation;
+            return (B) this;
+        }
+
+        /**
+         * Sets the delivery service-time.
+         * <p>
+         * <p>
+         * ServiceTime is intended to be the time the implied activity takes at
+         * the delivery-location.
+         *
+         * @param deliveryServiceTime the service time / duration of shipment's delivery
+         * @return builder
+         * @throws IllegalArgumentException if serviceTime < 0.0
+         */
+        @SuppressWarnings("unchecked")
+        public B setDeliveryServiceTime(double deliveryServiceTime) {
+            if (deliveryServiceTime < 0.0) {
+                throw new IllegalArgumentException("deliveryServiceTime must not be < 0.0");
+            }
+            this.deliveryServiceTime = deliveryServiceTime;
+            return (B) this;
+        }
+
+        /**
+         * Sets the timeWindow for the delivery, i.e. the time-period in which a
+         * delivery operation is allowed to start.
+         * <p>
+         * <p>
+         * By default timeWindow is [0.0, Double.MAX_VALUE}
+         *
+         * @param timeWindow the time window within the associated delivery is allowed
+         *                   to START
+         * @return builder
+         * @throws IllegalArgumentException if timeWindow is null
+         */
+        @SuppressWarnings("unchecked")
+        public B setDeliveryTimeWindow(TimeWindow timeWindow) {
+            if (timeWindow == null) {
+                throw new IllegalArgumentException("delivery time-window must not be null");
+            }
+            deliveryTimeWindows.clear();
+            deliveryTimeWindows.add(timeWindow);
+            return (B) this;
+        }
+
+        @SuppressWarnings("unchecked")
+        public B addDeliveryTimeWindow(TimeWindow timeWindow) {
+            if (timeWindow == null) {
+                throw new IllegalArgumentException("time-window arg must not be null");
+            }
+            deliveryTimeWindows.add(timeWindow);
+            return (B) this;
+        }
+
+        @SuppressWarnings("unchecked")
+        public B addDeliveryTimeWindow(double earliest, double latest) {
+            addDeliveryTimeWindow(TimeWindow.newInstance(earliest, latest));
+            return (B) this;
+        }
+
+        @SuppressWarnings("unchecked")
+        public B addPickupTimeWindow(TimeWindow timeWindow) {
+            if (timeWindow == null) {
+                throw new IllegalArgumentException("time-window arg must not be null");
+            }
+            pickupTimeWindows.add(timeWindow);
+            return (B) this;
+        }
+
+        @SuppressWarnings("unchecked")
+        public B addPickupTimeWindow(double earliest, double latest) {
+            addPickupTimeWindow(TimeWindow.newInstance(earliest, latest));
+            return (B) this;
+        }
+
+        @Override
+        protected void validate() {
+            if (pickupLocation == null) {
+                throw new IllegalArgumentException("pickup location is missing");
+            }
+            if (deliveryLocation == null) {
+                throw new IllegalArgumentException("delivery location is missing");
+            }
+            if (pickupTimeWindows.isEmpty()) {
+                pickupTimeWindows.add(TimeWindow.ETERNITY);
+            }
+            if (deliveryTimeWindows.isEmpty()) {
+                deliveryTimeWindows.add(TimeWindow.ETERNITY);
+            }
+        }
+
+        // ---- Refactor test
+
+        public double getPickupServiceTime() {
+            return pickupServiceTime;
+        }
+
+        public double getDeliveryServiceTime() {
+            return deliveryServiceTime;
+        }
+
+        public Location getPickupLocation() {
+            return pickupLocation;
+        }
+
+        public Location getDeliveryLocation() {
+            return deliveryLocation;
+        }
+
+        public TimeWindowsImpl getDeliveryTimeWindows() {
+            return deliveryTimeWindows;
+        }
+
+        public TimeWindowsImpl getPickupTimeWindows() {
+            return pickupTimeWindows;
+        }
+
+    }
+
+    public static final class Builder extends BuilderBase<ShipmentJob, Builder> {
+
+        public static Builder newInstance(String id) {
+            return new Builder(id);
+        }
+
+        public Builder(String id) {
+            super(id);
+        }
+
+        @Override
+        protected ShipmentJob createInstance() {
+            return new ShipmentJob(this);
+        }
+
+    }
+
+
+    ShipmentJob(BuilderBase<? extends ShipmentJob, ?> builder) {
+        super(builder);
+    }
+
+
+    @Override
+    protected void createActivities(JobBuilder<?, ?> builder) {
+        Builder shipmentBuilder = (Builder) builder;
+        JobActivityList list = new SequentialJobActivityList(this);
+        list.addActivity(new PickupActivity(this, PICKUP_ACTIVITY_NAME,
+                        shipmentBuilder.getPickupLocation(),
+                        shipmentBuilder.getPickupServiceTime(), shipmentBuilder.getCapacity(),
+                        shipmentBuilder.getPickupTimeWindows().getTimeWindows()));
+        list.addActivity(new DeliveryActivity(this, DELIVERY_ACTIVITY_NAME,
+                        shipmentBuilder.getDeliveryLocation(),
+                        shipmentBuilder.getDeliveryServiceTime(),
+                        shipmentBuilder.getCapacity().invert(),
+                        shipmentBuilder.getDeliveryTimeWindows().getTimeWindows()));
+
+        setActivities(list);
+    }
+
+    public PickupActivity getPickupActivity() {
+        return (PickupActivity) getActivityList().findByType(PICKUP_ACTIVITY_NAME).get();
+    }
+
+    public DeliveryActivity getDeliveryActivity() {
+        return (DeliveryActivity) getActivityList().findByType(DELIVERY_ACTIVITY_NAME).get();
+    }
+
+    // =================== DEPRECATED GETTERS
+
+    // @Deprecated
+    // public Location getPickupLocation() {
+    // return getPickupActivity().getLocation();
+    // }
+    //
+    // /**
+    // * Returns the pickup service-time.
+    // * <p>
+    // * <p>
+    // * By default service-time is 0.0.
+    // *
+    // * @return service-time
+    // */
+    // @Deprecated
+    // public double getPickupServiceTime() {
+    // return getPickupActivity().getOperationTime();
+    // }
+    //
+    // @Deprecated
+    // public Location getDeliveryLocation() {
+    // return getDeliveryActivity().getLocation();
+    // }
+    //
+    // /**
+    // * Returns service-time of delivery.
+    // *
+    // * @return service-time of delivery
+    // */
+    // @Deprecated
+    // public double getDeliveryServiceTime() {
+    // return getDeliveryActivity().getOperationTime();
+    // }
+    //
+    // /**
+    // * Returns the time-window of delivery.
+    // *
+    // * @return time-window of delivery
+    // */
+    // @Deprecated
+    // public TimeWindow getDeliveryTimeWindow() {
+    // return getDeliveryTimeWindows().iterator().next();
+    // }
+    //
+    // @Deprecated
+    // public Collection<TimeWindow> getDeliveryTimeWindows() {
+    // return getDeliveryActivity().getTimeWindows();
+    // }
+    //
+    // /**
+    // * Returns the time-window of pickup.
+    // *
+    // * @return time-window of pickup
+    // */
+    // @Deprecated
+    // public TimeWindow getPickupTimeWindow() {
+    // return getPickupTimeWindows().iterator().next();
+    // }
+    //
+    // @Deprecated
+    // public Collection<TimeWindow> getPickupTimeWindows() {
+    // return getPickupActivity().getTimeWindows();
+    // }
+
+    @Override
+    @Deprecated
+    public SizeDimension getSize() {
+        return getPickupActivity().getLoadChange();
+    }
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRoute.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRoute.java
index 4969a9ce2..40188c650 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRoute.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRoute.java
@@ -32,7 +32,7 @@
 import com.graphhopper.jsprit.core.problem.job.Break;
 import com.graphhopper.jsprit.core.problem.job.DeliveryJob;
 import com.graphhopper.jsprit.core.problem.job.PickupJob;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.End;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.Start;
@@ -86,7 +86,7 @@ public static VehicleRoute emptyRoute() {
      */
     public static class Builder {
 
-        private Map<Shipment, TourActivity> openActivities = new HashMap<>();
+        private Map<ShipmentJob, TourActivity> openActivities = new HashMap<>();
 
         /**
          * Returns new instance of this builder.
@@ -162,7 +162,7 @@ public static Builder newInstance(Vehicle vehicle) {
         // private TourShipmentActivityFactory shipmentActivityFactory = new
         // DefaultShipmentActivityFactory();
 
-        private Set<Shipment> openShipments = new HashSet<>();
+        private Set<ShipmentJob> openShipments = new HashSet<>();
 
         private JobActivityFactory jobActivityFactory = new SimpleJobActivityFactory();
 
@@ -332,7 +332,7 @@ public Builder addDelivery(DeliveryJob delivery, TimeWindow timeWindow) {
          *
          * <p>
          * <i><b>Note: Using this method is not recommended. Use the
-         * {@linkplain #addPickup(Shipment, TimeWindow)} instead.</b></i>
+         * {@linkplain #addPickup(ShipmentJob, TimeWindow)} instead.</b></i>
          * </p>
          *
          * @param shipment
@@ -342,12 +342,12 @@ public Builder addDelivery(DeliveryJob delivery, TimeWindow timeWindow) {
          *             if method has already been called with the specified
          *             shipment.
          */
-        public Builder addPickup(Shipment shipment) {
+        public Builder addPickup(ShipmentJob shipment) {
             return addPickup(shipment,
                             shipment.getPickupActivity().getSingleTimeWindow());
         }
 
-        public Builder addPickup(Shipment shipment, TimeWindow pickupTimeWindow) {
+        public Builder addPickup(ShipmentJob shipment, TimeWindow pickupTimeWindow) {
             if (openShipments.contains(shipment)) {
                 throw new IllegalArgumentException("shipment has already been added. cannot add it twice.");
             }
@@ -367,7 +367,7 @@ public Builder addPickup(Shipment shipment, TimeWindow pickupTimeWindow) {
          *
          * <p>
          * <i><b>Note: Using this method is not recommended. Use the
-         * {@linkplain #addDelivery(Shipment, TimeWindow)} instead.</b></i>
+         * {@linkplain #addDelivery(ShipmentJob, TimeWindow)} instead.</b></i>
          * </p>
          *
          * @param shipment
@@ -377,11 +377,11 @@ public Builder addPickup(Shipment shipment, TimeWindow pickupTimeWindow) {
          *             if specified shipment has not been picked up yet (i.e.
          *             method addPickup(shipment) has not been called yet).
          */
-        public Builder addDelivery(Shipment shipment) {
+        public Builder addDelivery(ShipmentJob shipment) {
             return addDelivery(shipment, shipment.getDeliveryActivity().getSingleTimeWindow());
         }
 
-        public Builder addDelivery(Shipment shipment, TimeWindow deliveryTimeWindow) {
+        public Builder addDelivery(ShipmentJob shipment, TimeWindow deliveryTimeWindow) {
             if (openShipments.contains(shipment)) {
                 TourActivity act = openActivities.get(shipment);
                 act.setTheoreticalEarliestOperationStartTime(deliveryTimeWindow.getStart());
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/AbstractActivity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/AbstractActivity.java
index 60ca868dd..ca033c43d 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/AbstractActivity.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/AbstractActivity.java
@@ -6,7 +6,7 @@
 
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.SizeDimension;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 
 public abstract class AbstractActivity implements TourActivity {
 
@@ -135,7 +135,7 @@ public TourActivity duplicate() {
     @Deprecated
     public static boolean isShipment(TourActivity activity) {
         return (activity instanceof JobActivity)
-                        && (((JobActivity) activity).getJob() instanceof Shipment);
+                        && (((JobActivity) activity).getJob() instanceof ShipmentJob);
     }
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourShipmentActivityFactory.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourShipmentActivityFactory.java
index 340f77df3..cd61be836 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourShipmentActivityFactory.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourShipmentActivityFactory.java
@@ -17,12 +17,12 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 
 public interface TourShipmentActivityFactory {
 
-    public AbstractActivity createPickup(Shipment shipment);
+    public AbstractActivity createPickup(ShipmentJob shipment);
 
-    public AbstractActivity createDelivery(Shipment shipment);
+    public AbstractActivity createDelivery(ShipmentJob shipment);
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java
index 4e7365c76..ce57e0b32 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java
@@ -26,7 +26,7 @@
 import com.graphhopper.jsprit.core.problem.job.Break;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.job.ServiceJob;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
@@ -208,7 +208,7 @@ private static Jobs getNuOfJobs(VehicleRoutingProblem problem) {
         int nServices = 0;
         int nBreaks = 0;
         for (Job j : problem.getJobs().values()) {
-            if (j instanceof Shipment) {
+            if (j instanceof ShipmentJob) {
                 nShipments++;
             }
             if (j instanceof ServiceJob) {
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/InitialRoutesTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/InitialRoutesTest.java
index 73276edaf..a19790f31 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/InitialRoutesTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/InitialRoutesTest.java
@@ -42,7 +42,7 @@
 import com.graphhopper.jsprit.core.problem.constraint.ServiceLoadRouteLevelConstraint;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.job.ServiceJob;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
@@ -165,13 +165,13 @@ public void maxCapacityShouldNotBeExceeded() {
                         .setType(type)
                         .build();
 
-        Shipment shipment = Shipment.Builder.newInstance("s")
+        ShipmentJob shipment = ShipmentJob.Builder.newInstance("s")
                         .setPickupLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(10, 0)).setId("pick").build())
                         .setDeliveryLocation(Location.Builder.newInstance().setId("del").setCoordinate(Coordinate.newInstance(0, 10)).build())
                         .addSizeDimension(0, 100)
                         .build();
 
-        Shipment another_shipment = Shipment.Builder.newInstance("another_s")
+        ShipmentJob another_shipment = ShipmentJob.Builder.newInstance("another_s")
                         .setPickupLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(10, 0)).setId("pick").build())
                         .setDeliveryLocation(Location.Builder.newInstance().setId("del").setCoordinate(Coordinate.newInstance(0, 10)).build())
                         .addSizeDimension(0, 50)
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/MeetTimeWindowConstraint_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/MeetTimeWindowConstraint_IT.java
index b0c363988..9f3c0a668 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/MeetTimeWindowConstraint_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/MeetTimeWindowConstraint_IT.java
@@ -37,7 +37,7 @@
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.job.ServiceJob;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
@@ -336,13 +336,13 @@ private VehicleRoutingProblem createTWBugProblem() throws IOException {
         ServiceJob s7 = new ServiceJob.Builder("7").setLocation(Location.Builder.newInstance().setIndex(7).setId("jsp3").build())
             .setServiceTime(5594).build();
 
-        Shipment shipment1 = Shipment.Builder.newInstance("shipment1")
+        ShipmentJob shipment1 = ShipmentJob.Builder.newInstance("shipment1")
             .setPickupServiceTime(900)
             .setPickupLocation(Location.Builder.newInstance().setId("jsp1").setIndex(1).build())
             .setDeliveryLocation(Location.Builder.newInstance().setId("jsd1").setIndex(8).build())
             .setDeliveryServiceTime(900).build();
 
-        Shipment shipment2 = Shipment.Builder.newInstance("shipment2")
+        ShipmentJob shipment2 = ShipmentJob.Builder.newInstance("shipment2")
             .setPickupLocation(Location.Builder.newInstance().setId("jsp4").setIndex(9).build())
             .setPickupServiceTime(1200)
             .addPickupTimeWindow(21600, 23400)
@@ -351,7 +351,7 @@ private VehicleRoutingProblem createTWBugProblem() throws IOException {
             .addDeliveryTimeWindow(25200, 27000)
             .build();
 
-        Shipment shipment3 = Shipment.Builder.newInstance("shipment3")
+        ShipmentJob shipment3 = ShipmentJob.Builder.newInstance("shipment3")
             .setPickupLocation(Location.Builder.newInstance().setId("jsp7").setIndex(9).build())
             .setPickupServiceTime(1200)
             .addPickupTimeWindow(37800, 41400)
@@ -360,7 +360,7 @@ private VehicleRoutingProblem createTWBugProblem() throws IOException {
             .addDeliveryTimeWindow(43200, 45900)
             .build();
 
-        Shipment shipment4 = Shipment.Builder.newInstance("shipment4")
+        ShipmentJob shipment4 = ShipmentJob.Builder.newInstance("shipment4")
             .setPickupLocation(Location.Builder.newInstance().setId("jsp9").setIndex(10).build())
             .setPickupServiceTime(300)
             .addPickupTimeWindow(45000, 48600)
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/OpenRoutesTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/OpenRoutesTest.java
index cba8350ea..1fe5d523f 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/OpenRoutesTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/OpenRoutesTest.java
@@ -31,7 +31,7 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.ServiceJob;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
@@ -50,7 +50,7 @@ public void whenDealingWithOpenRouteAndShipments_insertionShouldNotRequireRouteT
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v").setLatestArrival(11.)
                         .setType(type).setReturnToDepot(false).setStartLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(0, 0)).build()).build();
 
-        Shipment shipment = Shipment.Builder.newInstance("s").setPickupLocation(TestUtils.loc(Coordinate.newInstance(5, 0)))
+        ShipmentJob shipment = ShipmentJob.Builder.newInstance("s").setPickupLocation(TestUtils.loc(Coordinate.newInstance(5, 0)))
                         .setDeliveryLocation(TestUtils.loc(Coordinate.newInstance(10, 0))).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(shipment).addVehicle(vehicle).build();
@@ -104,7 +104,7 @@ public void whenDealingWithOpenRouteAndShipments_algorithmShouldCalculateCorrect
                         .setType(type).setReturnToDepot(false).setStartLocation(Location.Builder.newInstance()
                                         .setCoordinate(Coordinate.newInstance(0, 0)).build()).build();
 
-        Shipment shipment = Shipment.Builder.newInstance("s")
+        ShipmentJob shipment = ShipmentJob.Builder.newInstance("s")
                         .setPickupLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(5, 0)).build())
                         .setDeliveryLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(10, 0)).build())
                         .build();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionWithShipmentsTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionWithShipmentsTest.java
index e71fc2254..bcf85b4e6 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionWithShipmentsTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionWithShipmentsTest.java
@@ -39,7 +39,7 @@
 import com.graphhopper.jsprit.core.problem.driver.Driver;
 import com.graphhopper.jsprit.core.problem.driver.DriverImpl;
 import com.graphhopper.jsprit.core.problem.job.PickupJob;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
@@ -105,7 +105,7 @@ private void createInsertionCalculator(HardRouteConstraint hardRouteLevelConstra
 
     @Test
     public void whenCalculatingInsertionCostsOfShipment_itShouldReturnCorrectCostValue() {
-        Shipment shipment = Shipment.Builder.newInstance("s").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,10").build()).setDeliveryLocation(Location.newInstance("10,0")).build();
+        ShipmentJob shipment = ShipmentJob.Builder.newInstance("s").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,10").build()).setDeliveryLocation(Location.newInstance("10,0")).build();
         VehicleRoutingProblem.Builder.newInstance().addJob(shipment).build();
         VehicleRoute route = VehicleRoute.emptyRoute();
         InsertionData iData = insertionCalculator.getInsertionData(route, shipment, vehicle, 0.0, null, Double.MAX_VALUE);
@@ -114,8 +114,8 @@ public void whenCalculatingInsertionCostsOfShipment_itShouldReturnCorrectCostVal
 
     @Test
     public void whenCalculatingInsertionIntoExistingRoute_itShouldReturnCorrectCosts() {
-        Shipment shipment = Shipment.Builder.newInstance("s").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,10").build()).setDeliveryLocation(Location.newInstance("10,0")).build();
-        Shipment shipment2 = Shipment.Builder.newInstance("s2").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("10,10").build()).setDeliveryLocation(Location.newInstance("0,0")).build();
+        ShipmentJob shipment = ShipmentJob.Builder.newInstance("s").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,10").build()).setDeliveryLocation(Location.newInstance("10,0")).build();
+        ShipmentJob shipment2 = ShipmentJob.Builder.newInstance("s2").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("10,10").build()).setDeliveryLocation(Location.newInstance("0,0")).build();
 
         VehicleRoutingProblem.Builder.newInstance().addJob(shipment).addJob(shipment2).build();
 
@@ -133,8 +133,8 @@ public void whenCalculatingInsertionIntoExistingRoute_itShouldReturnCorrectCosts
 
     @Test
     public void whenInsertingShipmentInRouteWithNotEnoughCapacity_itShouldReturnNoInsertion() {
-        Shipment shipment = Shipment.Builder.newInstance("s").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,10").build()).setDeliveryLocation(Location.newInstance("10,0")).build();
-        Shipment shipment2 = Shipment.Builder.newInstance("s2").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("10,10").build()).setDeliveryLocation(Location.newInstance("0,0")).build();
+        ShipmentJob shipment = ShipmentJob.Builder.newInstance("s").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,10").build()).setDeliveryLocation(Location.newInstance("10,0")).build();
+        ShipmentJob shipment2 = ShipmentJob.Builder.newInstance("s2").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("10,10").build()).setDeliveryLocation(Location.newInstance("0,0")).build();
 
         VehicleRoutingProblem.Builder.newInstance().addJob(shipment).addJob(shipment2).build();
 
@@ -153,9 +153,9 @@ public void whenInsertingShipmentInRouteWithNotEnoughCapacity_itShouldReturnNoIn
 
     @Test
     public void whenInsertingThirdShipment_itShouldCalcCorrectVal() {
-        Shipment shipment = Shipment.Builder.newInstance("s").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,10").build()).setDeliveryLocation(Location.newInstance("10,0")).build();
-        Shipment shipment2 = Shipment.Builder.newInstance("s2").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("10,10").build()).setDeliveryLocation(Location.newInstance("0,0")).build();
-        Shipment shipment3 = Shipment.Builder.newInstance("s3").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,0").build()).setDeliveryLocation(Location.newInstance("9,10")).build();
+        ShipmentJob shipment = ShipmentJob.Builder.newInstance("s").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,10").build()).setDeliveryLocation(Location.newInstance("10,0")).build();
+        ShipmentJob shipment2 = ShipmentJob.Builder.newInstance("s2").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("10,10").build()).setDeliveryLocation(Location.newInstance("0,0")).build();
+        ShipmentJob shipment3 = ShipmentJob.Builder.newInstance("s3").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,0").build()).setDeliveryLocation(Location.newInstance("9,10")).build();
 
         VehicleRoutingProblem.Builder.newInstance().addJob(shipment).addJob(shipment2).addJob(shipment3).build();
 
@@ -176,9 +176,9 @@ public void whenInsertingThirdShipment_itShouldCalcCorrectVal() {
 
     @Test
     public void whenInsertingThirdShipment_itShouldCalcCorrectVal2() {
-        Shipment shipment = Shipment.Builder.newInstance("s").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,10").build()).setDeliveryLocation(Location.newInstance("10,0")).build();
-        Shipment shipment2 = Shipment.Builder.newInstance("s2").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("10,10").build()).setDeliveryLocation(Location.newInstance("0,0")).build();
-        Shipment shipment3 = Shipment.Builder.newInstance("s3").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,0").build()).setDeliveryLocation(Location.newInstance("9,9")).build();
+        ShipmentJob shipment = ShipmentJob.Builder.newInstance("s").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,10").build()).setDeliveryLocation(Location.newInstance("10,0")).build();
+        ShipmentJob shipment2 = ShipmentJob.Builder.newInstance("s2").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("10,10").build()).setDeliveryLocation(Location.newInstance("0,0")).build();
+        ShipmentJob shipment3 = ShipmentJob.Builder.newInstance("s3").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,0").build()).setDeliveryLocation(Location.newInstance("9,9")).build();
 
         VehicleRoutingProblem.Builder.newInstance().addJob(shipment).addJob(shipment2).addJob(shipment3).build();
 
@@ -198,9 +198,9 @@ public void whenInsertingThirdShipment_itShouldCalcCorrectVal2() {
 
     @Test
     public void whenInstertingShipmentWithLoadConstraintWhereCapIsNotSufficient_capConstraintsAreFulfilled() {
-        Shipment shipment = Shipment.Builder.newInstance("s").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,10").build()).setDeliveryLocation(Location.newInstance("10,0")).build();
-        Shipment shipment2 = Shipment.Builder.newInstance("s2").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("10,10").build()).setDeliveryLocation(Location.newInstance("0,0")).build();
-        Shipment shipment3 = Shipment.Builder.newInstance("s3").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,0").build()).setDeliveryLocation(Location.newInstance("9,9")).build();
+        ShipmentJob shipment = ShipmentJob.Builder.newInstance("s").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,10").build()).setDeliveryLocation(Location.newInstance("10,0")).build();
+        ShipmentJob shipment2 = ShipmentJob.Builder.newInstance("s2").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("10,10").build()).setDeliveryLocation(Location.newInstance("0,0")).build();
+        ShipmentJob shipment3 = ShipmentJob.Builder.newInstance("s3").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,0").build()).setDeliveryLocation(Location.newInstance("9,9")).build();
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         VehicleRoutingProblem vrp = vrpBuilder.addJob(shipment).addJob(shipment2).addJob(shipment3).build();
@@ -228,8 +228,8 @@ public void whenInstertingShipmentWithLoadConstraintWhereCapIsNotSufficient_capC
 
     @Test
     public void whenInsertingServiceWhileNoCapIsAvailable_itMustReturnNoInsertionData() {
-        Shipment shipment = Shipment.Builder.newInstance("s").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,10").build()).setDeliveryLocation(Location.newInstance("0,0")).build();
-        Shipment shipment2 = Shipment.Builder.newInstance("s2").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("10,10").build()).setDeliveryLocation(Location.newInstance("0,0")).build();
+        ShipmentJob shipment = ShipmentJob.Builder.newInstance("s").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,10").build()).setDeliveryLocation(Location.newInstance("0,0")).build();
+        ShipmentJob shipment2 = ShipmentJob.Builder.newInstance("s2").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("10,10").build()).setDeliveryLocation(Location.newInstance("0,0")).build();
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         VehicleRoutingProblem vrp = vrpBuilder.addJob(shipment).addJob(shipment2).build();
@@ -259,7 +259,7 @@ public void whenInsertingServiceWhileNoCapIsAvailable_itMustReturnNoInsertionDat
         assertEquals(3, iData.getUnmodifiableEventsByType(InsertActivity.class).get(0).getIndex());
     }
 
-    private void add(VehicleRoutingProblem vrp, VehicleRoute route, Shipment shipment, int pickI, int delI) {
+    private void add(VehicleRoutingProblem vrp, VehicleRoute route, ShipmentJob shipment, int pickI, int delI) {
         List<JobActivity> shipmentActivities = vrp.copyAndGetActivities(shipment);
         route.getTourActivities().addActivity(delI, shipmentActivities.get(1));
         route.getTourActivities().addActivity(pickI, shipmentActivities.get(0));
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionTest.java
index 84b96fa2c..1204d1108 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionTest.java
@@ -41,7 +41,7 @@
 import com.graphhopper.jsprit.core.problem.driver.Driver;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.job.ServiceJob;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
@@ -304,12 +304,12 @@ public void solutionWithConstraintAndWithFastRegretConcurrentMustBeCorrect() {
 
     @Test
     public void shipment1ShouldBeAddedFirst() {
-        Shipment s1 = Shipment.Builder.newInstance("s1")
+        ShipmentJob s1 = ShipmentJob.Builder.newInstance("s1")
                         .setPickupLocation(Location.Builder.newInstance().setId("pick1").setCoordinate(Coordinate.newInstance(-1, 10)).build())
                         .setDeliveryLocation(Location.Builder.newInstance().setId("del1").setCoordinate(Coordinate.newInstance(1, 10)).build())
                         .build();
 
-        Shipment s2 = Shipment.Builder.newInstance("s2")
+        ShipmentJob s2 = ShipmentJob.Builder.newInstance("s2")
                         .setPickupLocation(Location.Builder.newInstance().setId("pick2").setCoordinate(Coordinate.newInstance(-1, 20)).build())
                         .setDeliveryLocation(Location.Builder.newInstance().setId("del2").setCoordinate(Coordinate.newInstance(1, 20)).build())
                         .build();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestLocalActivityInsertionCostsCalculator.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestLocalActivityInsertionCostsCalculator.java
index e1a473395..3eda0420e 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestLocalActivityInsertionCostsCalculator.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestLocalActivityInsertionCostsCalculator.java
@@ -38,7 +38,7 @@
 import com.graphhopper.jsprit.core.problem.cost.WaitingTimeCosts;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.job.ServiceJob;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.End;
@@ -129,7 +129,7 @@ public void whenAddingShipmentBetweenDiffStartAndEnd_costMustBeCorrect() {
             .setStartLocation(Location.newInstance(0, 0))
             .setEndLocation(Location.newInstance(20, 0))
             .build();
-        Shipment s = Shipment.Builder.newInstance("p")
+        ShipmentJob s = ShipmentJob.Builder.newInstance("p")
             .setPickupLocation(Location.newInstance(10, 0))
             .setDeliveryLocation(Location.newInstance(10, 7.5))
             .build();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestMixedServiceAndShipmentsProblemOnRouteLevel.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestMixedServiceAndShipmentsProblemOnRouteLevel.java
index 62f0bf339..1e7078033 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestMixedServiceAndShipmentsProblemOnRouteLevel.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestMixedServiceAndShipmentsProblemOnRouteLevel.java
@@ -26,7 +26,7 @@
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
 import com.graphhopper.jsprit.core.problem.job.DeliveryJob;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.problem.vehicle.InfiniteFleetManagerFactory;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleFleetManager;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
@@ -63,11 +63,11 @@ public void whenHavingShipmentsAndServicesInOneProblem_andInsertionShouldBeMadeO
 		 * 4: (15,13)->(14,11)
 		 */
 
-        Shipment shipment1 = Shipment.Builder.newInstance("1").addSizeDimension(0, 1).setPickupLocation(TestUtils.loc(Coordinate.newInstance(5, 7))).setDeliveryLocation(TestUtils.loc(Coordinate.newInstance(6, 9))).build();
-        Shipment shipment2 = Shipment.Builder.newInstance("2").addSizeDimension(0, 1).setPickupLocation(TestUtils.loc(Coordinate.newInstance(5, 13))).setDeliveryLocation(TestUtils.loc(Coordinate.newInstance(6, 11))).build();
+        ShipmentJob shipment1 = ShipmentJob.Builder.newInstance("1").addSizeDimension(0, 1).setPickupLocation(TestUtils.loc(Coordinate.newInstance(5, 7))).setDeliveryLocation(TestUtils.loc(Coordinate.newInstance(6, 9))).build();
+        ShipmentJob shipment2 = ShipmentJob.Builder.newInstance("2").addSizeDimension(0, 1).setPickupLocation(TestUtils.loc(Coordinate.newInstance(5, 13))).setDeliveryLocation(TestUtils.loc(Coordinate.newInstance(6, 11))).build();
 
-        Shipment shipment3 = Shipment.Builder.newInstance("3").addSizeDimension(0, 1).setPickupLocation(TestUtils.loc(Coordinate.newInstance(15, 7))).setDeliveryLocation(TestUtils.loc(Coordinate.newInstance(14, 9))).build();
-        Shipment shipment4 = Shipment.Builder.newInstance("4").addSizeDimension(0, 1).setPickupLocation(TestUtils.loc(Coordinate.newInstance(15, 13))).setDeliveryLocation(TestUtils.loc(Coordinate.newInstance(14, 11))).build();
+        ShipmentJob shipment3 = ShipmentJob.Builder.newInstance("3").addSizeDimension(0, 1).setPickupLocation(TestUtils.loc(Coordinate.newInstance(15, 7))).setDeliveryLocation(TestUtils.loc(Coordinate.newInstance(14, 9))).build();
+        ShipmentJob shipment4 = ShipmentJob.Builder.newInstance("4").addSizeDimension(0, 1).setPickupLocation(TestUtils.loc(Coordinate.newInstance(15, 13))).setDeliveryLocation(TestUtils.loc(Coordinate.newInstance(14, 11))).build();
 
 		/*
          * build deliveries, (implicitly picked up in the depot)
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinWorstTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinWorstTest.java
index b4d0f2802..b1b1c40a6 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinWorstTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinWorstTest.java
@@ -30,7 +30,7 @@
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.job.ServiceJob;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.util.Coordinate;
@@ -114,7 +114,7 @@ public void itShouldRemoveShipment() {
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(3, 1)).build()).build();
         ServiceJob s3 = new ServiceJob.Builder("s3")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(10, 10)).build()).build();
-        Shipment shipment = Shipment.Builder.newInstance("ship1")
+        ShipmentJob shipment = ShipmentJob.Builder.newInstance("ship1")
             .setPickupLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(2, 2)).build())
             .setDeliveryLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(9, 9)).build()).build();
         VehicleImpl v = VehicleImpl.Builder.newInstance("v")
@@ -147,7 +147,7 @@ public void itShouldRemoveShipmentFromSecondRoute() {
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(3, 1)).build()).build();
         ServiceJob s3 = new ServiceJob.Builder("s3")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(10, 10)).build()).build();
-        Shipment shipment = Shipment.Builder.newInstance("ship1")
+        ShipmentJob shipment = ShipmentJob.Builder.newInstance("ship1")
             .setPickupLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(3, 1)).build())
             .setDeliveryLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(10, 10.1)).build()).build();
         VehicleImpl v = VehicleImpl.Builder.newInstance("v")
@@ -184,7 +184,7 @@ public void itShouldRemoveServiceAndShipmentFromSecondRoute() {
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(3, 1)).build()).build();
         ServiceJob s3 = new ServiceJob.Builder("s3")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(10, 10)).build()).build();
-        Shipment shipment = Shipment.Builder.newInstance("ship1")
+        ShipmentJob shipment = ShipmentJob.Builder.newInstance("ship1")
             .setPickupLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(3, 1)).build())
             .setDeliveryLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(10, 10.1)).build()).build();
         VehicleImpl v = VehicleImpl.Builder.newInstance("v")
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/AverageJobDistanceTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/AverageJobDistanceTest.java
index 81fa0642e..71ea0a786 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/AverageJobDistanceTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/AverageJobDistanceTest.java
@@ -26,7 +26,7 @@
 import com.graphhopper.jsprit.core.distance.EuclideanDistanceCalculator;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.job.ServiceJob;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.util.Coordinate;
 import com.graphhopper.jsprit.core.util.DefaultCosts;
 import com.graphhopper.jsprit.core.util.Locations;
@@ -57,15 +57,15 @@ public Coordinate getCoord(String id) {
 
     @Test
     public void distanceOfTwoEqualShipmentsShouldBeSmallerThanAnyOtherDistance() {
-        Shipment s1 = Shipment.Builder.newInstance("s1").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,0").build()).setDeliveryLocation(Location.newInstance("10,10")).build();
-        Shipment s2 = Shipment.Builder.newInstance("s2").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,0").build()).setDeliveryLocation(Location.newInstance("10,10")).build();
+        ShipmentJob s1 = ShipmentJob.Builder.newInstance("s1").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,0").build()).setDeliveryLocation(Location.newInstance("10,10")).build();
+        ShipmentJob s2 = ShipmentJob.Builder.newInstance("s2").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,0").build()).setDeliveryLocation(Location.newInstance("10,10")).build();
 
         double dist = new DefaultJobDistance(routingCosts).getDistance(s1, s2);
 
         for (int i = 0; i < 10; i++) {
             for (int j = 0; j < 10; j++) {
-                Shipment other1 = Shipment.Builder.newInstance("s1").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,0").build()).setDeliveryLocation(Location.newInstance(i + "," + j)).build();
-                Shipment other2 = Shipment.Builder.newInstance("s2").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,0").build()).setDeliveryLocation(Location.newInstance("10,10")).build();
+                ShipmentJob other1 = ShipmentJob.Builder.newInstance("s1").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,0").build()).setDeliveryLocation(Location.newInstance(i + "," + j)).build();
+                ShipmentJob other2 = ShipmentJob.Builder.newInstance("s2").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,0").build()).setDeliveryLocation(Location.newInstance("10,10")).build();
                 double dist2 = new DefaultJobDistance(routingCosts).getDistance(other1, other2);
                 assertTrue(dist <= dist2 + dist2 * 0.001);
             }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/HardPickupAndDeliveryShipmentActivityConstraintTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/HardPickupAndDeliveryShipmentActivityConstraintTest.java
index d66902a27..638baeebf 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/HardPickupAndDeliveryShipmentActivityConstraintTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/HardPickupAndDeliveryShipmentActivityConstraintTest.java
@@ -28,7 +28,7 @@
 import com.graphhopper.jsprit.core.problem.constraint.HardActivityConstraint.ConstraintsStatus;
 import com.graphhopper.jsprit.core.problem.constraint.PickupAndDeliverShipmentLoadActivityLevelConstraint;
 import com.graphhopper.jsprit.core.problem.job.ServiceJob;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivity;
@@ -44,7 +44,7 @@
 
     StateManager stateManager;
 
-    Shipment shipment;
+    ShipmentJob shipment;
 
     ServiceJob s1;
 
@@ -60,7 +60,7 @@
     public void doBefore() {
         s1 = new ServiceJob.Builder("s1").setLocation(Location.newInstance("loc")).build();
         s2 = new ServiceJob.Builder("s2").setLocation(Location.newInstance("loc")).build();
-        shipment = Shipment.Builder.newInstance("shipment").setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).setDeliveryLocation(Location.newInstance("delLoc")).addSizeDimension(0, 1).build();
+        shipment = ShipmentJob.Builder.newInstance("shipment").setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).setDeliveryLocation(Location.newInstance("delLoc")).addSizeDimension(0, 1).build();
 
 
         //		when(vehicle.getCapacity()).thenReturn(2);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/LoadStateTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/LoadStateTest.java
index 22ee72de8..6598608d4 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/LoadStateTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/LoadStateTest.java
@@ -36,7 +36,7 @@
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.job.PickupJob;
 import com.graphhopper.jsprit.core.problem.job.ServiceJob;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
@@ -74,8 +74,8 @@ public void doBefore() {
         final VehicleRoutingProblem pdProblem = pdProblemBuilder.build();
 
         final VehicleRoutingProblem.Builder shipmentProblemBuilder = VehicleRoutingProblem.Builder.newInstance();
-        Shipment shipment1 = Shipment.Builder.newInstance("s1").addSizeDimension(0, 10).setPickupLocation(Location.Builder.newInstance().setId("pick").build()).setDeliveryLocation(Location.newInstance("del")).build();
-        Shipment shipment2 = Shipment.Builder.newInstance("s2").addSizeDimension(0, 5).setPickupLocation(Location.Builder.newInstance().setId("pick").build()).setDeliveryLocation(Location.newInstance("del")).build();
+        ShipmentJob shipment1 = ShipmentJob.Builder.newInstance("s1").addSizeDimension(0, 10).setPickupLocation(Location.Builder.newInstance().setId("pick").build()).setDeliveryLocation(Location.newInstance("del")).build();
+        ShipmentJob shipment2 = ShipmentJob.Builder.newInstance("s2").addSizeDimension(0, 5).setPickupLocation(Location.Builder.newInstance().setId("pick").build()).setDeliveryLocation(Location.newInstance("del")).build();
         shipmentProblemBuilder.addJob(shipment1).addJob(shipment2).build();
         final VehicleRoutingProblem shipmentProblem = shipmentProblemBuilder.build();
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyserTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyserTest.java
index 2ee44b325..6cf6ee814 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyserTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyserTest.java
@@ -38,7 +38,7 @@
 import com.graphhopper.jsprit.core.problem.job.DeliveryJob;
 import com.graphhopper.jsprit.core.problem.job.PickupJob;
 import com.graphhopper.jsprit.core.problem.job.ServiceJob;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
@@ -81,7 +81,7 @@ public void doBefore() {
                         .addSizeDimension(0, 3)
                         .addRequiredSkill("skill2").addRequiredSkill("skill1")
                         .build();
-        Shipment shipment1 = Shipment.Builder.newInstance("ship1")
+        ShipmentJob shipment1 = ShipmentJob.Builder.newInstance("ship1")
                         .setPickupLocation(TestUtils.loc(Coordinate.newInstance(-15, 2)))
                         .setDeliveryLocation(TestUtils.loc(Coordinate.newInstance(-16, 5)))
                         .addSizeDimension(0, 10)
@@ -96,7 +96,7 @@ public void doBefore() {
 
         ServiceJob s4 = new ServiceJob.Builder("s4").setLocation(TestUtils.loc(Coordinate.newInstance(10, 10))).addSizeDimension(0, 3).build();
 
-        Shipment shipment2 = Shipment.Builder.newInstance("ship2").setPickupLocation(TestUtils.loc(Coordinate.newInstance(15, 2)))
+        ShipmentJob shipment2 = ShipmentJob.Builder.newInstance("ship2").setPickupLocation(TestUtils.loc(Coordinate.newInstance(15, 2)))
                         .setPickupServiceTime(20.).setDeliveryServiceTime(20.)
                         .setDeliveryLocation(TestUtils.loc(Coordinate.newInstance(16, 5))).addSizeDimension(0, 10).build();
 
@@ -136,7 +136,7 @@ public void buildAnotherScenarioWithOnlyOneVehicleAndWithoutAnyConstraintsBefore
                         .setTimeWindow(TimeWindow.newInstance(10, 20))
                         .addSizeDimension(0, 20)
                         .build();
-        Shipment shipment1 = Shipment.Builder.newInstance("ship1").setPickupLocation(TestUtils.loc(Coordinate.newInstance(-15, 2)))
+        ShipmentJob shipment1 = ShipmentJob.Builder.newInstance("ship1").setPickupLocation(TestUtils.loc(Coordinate.newInstance(-15, 2)))
                         .setDeliveryLocation(TestUtils.loc(Coordinate.newInstance(-16, 5)))
                         .addSizeDimension(0, 15)
                         .setPickupServiceTime(20.).setDeliveryServiceTime(20.)
@@ -152,7 +152,7 @@ public void buildAnotherScenarioWithOnlyOneVehicleAndWithoutAnyConstraintsBefore
                         .addSizeDimension(0, 20)
                         .setTimeWindow(TimeWindow.newInstance(10, 20))
                         .build();
-        Shipment shipment2 = Shipment.Builder.newInstance("ship2").setPickupLocation(TestUtils.loc(Coordinate.newInstance(15, 2)))
+        ShipmentJob shipment2 = ShipmentJob.Builder.newInstance("ship2").setPickupLocation(TestUtils.loc(Coordinate.newInstance(15, 2)))
                         .setPickupServiceTime(20.).setDeliveryServiceTime(20.)
                         .setDeliveryLocation(TestUtils.loc(Coordinate.newInstance(16, 5)))
                         .setPickupTimeWindow(TimeWindow.newInstance(10, 20)).setDeliveryTimeWindow(TimeWindow.newInstance(10, 20))
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblemTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblemTest.java
index c6ed1bb5e..f0051840f 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblemTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblemTest.java
@@ -40,7 +40,7 @@
 import com.graphhopper.jsprit.core.problem.job.PickupJob;
 import com.graphhopper.jsprit.core.problem.job.SequentialJobActivityList;
 import com.graphhopper.jsprit.core.problem.job.ServiceJob;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
@@ -123,8 +123,8 @@ public void whenBuildingWithFourVehiclesAndTwoTypes_vrpShouldContainTheCorrectNu
 
     @Test
     public void whenShipmentsAreAdded_vrpShouldContainThem() {
-        Shipment s = Shipment.Builder.newInstance("s").addSizeDimension(0, 10).setPickupLocation(Location.Builder.newInstance().setId("foofoo").build()).setDeliveryLocation(Location.newInstance("foo")).build();
-        Shipment s2 = Shipment.Builder.newInstance("s2").addSizeDimension(0, 100).setPickupLocation(Location.Builder.newInstance().setId("foofoo").build()).setDeliveryLocation(Location.newInstance("foo")).build();
+        ShipmentJob s = ShipmentJob.Builder.newInstance("s").addSizeDimension(0, 10).setPickupLocation(Location.Builder.newInstance().setId("foofoo").build()).setDeliveryLocation(Location.newInstance("foo")).build();
+        ShipmentJob s2 = ShipmentJob.Builder.newInstance("s2").addSizeDimension(0, 100).setPickupLocation(Location.Builder.newInstance().setId("foofoo").build()).setDeliveryLocation(Location.newInstance("foo")).build();
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addJob(s);
         vrpBuilder.addJob(s2);
@@ -441,7 +441,7 @@ public void whenAddingJobAndInitialRouteWithThatJobAfterwards_thisJobShouldNotBe
     @Test
     public void whenAddingTwoJobs_theyShouldHaveProperIndeces() {
         ServiceJob service = new ServiceJob.Builder("myService").setLocation(Location.newInstance("loc")).build();
-        Shipment shipment = Shipment.Builder.newInstance("shipment").setPickupLocation(Location.Builder.newInstance().setId("pick").build())
+        ShipmentJob shipment = ShipmentJob.Builder.newInstance("shipment").setPickupLocation(Location.Builder.newInstance().setId("pick").build())
                         .setDeliveryLocation(Location.newInstance("del")).build();
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addJob(service);
@@ -466,9 +466,9 @@ public void whenAddingTwoServicesWithTheSameId_itShouldThrowException() {
 
     @Test(expected = IllegalArgumentException.class)
     public void whenAddingTwoShipmentsWithTheSameId_itShouldThrowException() {
-        Shipment shipment1 = Shipment.Builder.newInstance("shipment").setPickupLocation(Location.Builder.newInstance().setId("pick").build())
+        ShipmentJob shipment1 = ShipmentJob.Builder.newInstance("shipment").setPickupLocation(Location.Builder.newInstance().setId("pick").build())
                         .setDeliveryLocation(Location.newInstance("del")).build();
-        Shipment shipment2 = Shipment.Builder.newInstance("shipment").setPickupLocation(Location.Builder.newInstance().setId("pick").build())
+        ShipmentJob shipment2 = ShipmentJob.Builder.newInstance("shipment").setPickupLocation(Location.Builder.newInstance().setId("pick").build())
                         .setDeliveryLocation(Location.newInstance("del")).build();
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addJob(shipment1);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/LoadConstraintTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/LoadConstraintTest.java
index bf989f3dc..b44e98e9c 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/LoadConstraintTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/LoadConstraintTest.java
@@ -41,7 +41,7 @@
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.job.PickupJob;
 import com.graphhopper.jsprit.core.problem.job.ServiceJob;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivity;
@@ -86,8 +86,8 @@ public void doBefore() {
         final VehicleRoutingProblem pdProblem = pdProblemBuilder.build();
 
         final VehicleRoutingProblem.Builder shipmentProblemBuilder = VehicleRoutingProblem.Builder.newInstance();
-        Shipment shipment1 = Shipment.Builder.newInstance("s1").addSizeDimension(0, 10).setPickupLocation(Location.Builder.newInstance().setId("pick").build()).setDeliveryLocation(Location.newInstance("del")).build();
-        Shipment shipment2 = Shipment.Builder.newInstance("s2").addSizeDimension(0, 5).setPickupLocation(Location.Builder.newInstance().setId("pick").build()).setDeliveryLocation(Location.newInstance("del")).build();
+        ShipmentJob shipment1 = ShipmentJob.Builder.newInstance("s1").addSizeDimension(0, 10).setPickupLocation(Location.Builder.newInstance().setId("pick").build()).setDeliveryLocation(Location.newInstance("del")).build();
+        ShipmentJob shipment2 = ShipmentJob.Builder.newInstance("s2").addSizeDimension(0, 5).setPickupLocation(Location.Builder.newInstance().setId("pick").build()).setDeliveryLocation(Location.newInstance("del")).build();
         shipmentProblemBuilder.addJob(shipment1).addJob(shipment2).build();
         final VehicleRoutingProblem shipmentProblem = shipmentProblemBuilder.build();
 
@@ -630,7 +630,7 @@ public void whenPDRouteAndNewServiceDoesNotFitIn_itShouldReturnFulfilled() {
     @Test
     public void whenShipmentRouteAndPickupOfNewShipmentShouldFitInBetweenStartAndAct1() {
         stateManager.informInsertionStarts(Arrays.asList(shipmentRoute), Collections.<Job>emptyList());
-        Shipment s = mock(Shipment.class);
+        ShipmentJob s = mock(ShipmentJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 20).build();
 
 
@@ -648,7 +648,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldFitInBetweenStartAndAct
     @Test
     public void whenShipmentRouteAndPickupOfNewShipmentShouldNotFitInBetweenStartAndAct1() {
         stateManager.informInsertionStarts(Arrays.asList(shipmentRoute), Collections.<Job>emptyList());
-        Shipment s = mock(Shipment.class);
+        ShipmentJob s = mock(ShipmentJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 21).build();
 
 
@@ -666,7 +666,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldNotFitInBetweenStartAnd
     @Test
     public void whenShipmentRouteAndPickupOfNewShipmentShouldFitInBetweenAct1AndAct2() {
         stateManager.informInsertionStarts(Arrays.asList(shipmentRoute), Collections.<Job>emptyList());
-        Shipment s = mock(Shipment.class);
+        ShipmentJob s = mock(ShipmentJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 10).build();
 
 
@@ -684,7 +684,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldFitInBetweenAct1AndAct2
     @Test
     public void whenShipmentRouteAndPickupOfNewShipmentShouldNotFitInBetweenAct1AndAct2() {
         stateManager.informInsertionStarts(Arrays.asList(shipmentRoute), Collections.<Job>emptyList());
-        Shipment s = mock(Shipment.class);
+        ShipmentJob s = mock(ShipmentJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 11).build();
 
 
@@ -702,7 +702,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldNotFitInBetweenAct1AndA
     @Test
     public void whenShipmentRouteAndPickupOfNewShipmentShouldFitInBetweenAct2AndAct3() {
         stateManager.informInsertionStarts(Arrays.asList(shipmentRoute), Collections.<Job>emptyList());
-        Shipment s = mock(Shipment.class);
+        ShipmentJob s = mock(ShipmentJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 5).build();
 
 
@@ -720,7 +720,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldFitInBetweenAct2AndAct3
     @Test
     public void whenShipmentRouteAndPickupOfNewShipmentShouldNotFitInBetweenAct2AndAct3() {
         stateManager.informInsertionStarts(Arrays.asList(shipmentRoute), Collections.<Job>emptyList());
-        Shipment s = mock(Shipment.class);
+        ShipmentJob s = mock(ShipmentJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 6).build();
 
 
@@ -738,7 +738,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldNotFitInBetweenAct2AndA
     @Test
     public void whenShipmentRouteAndPickupOfNewShipmentShouldFitInBetweenAct3AndAct4() {
         stateManager.informInsertionStarts(Arrays.asList(shipmentRoute), Collections.<Job>emptyList());
-        Shipment s = mock(Shipment.class);
+        ShipmentJob s = mock(ShipmentJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 10).build();
 
 
@@ -756,7 +756,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldFitInBetweenAct3AndAct4
     @Test
     public void whenShipmentRouteAndPickupOfNewShipmentShouldNotFitInBetweenAct3AndAct4() {
         stateManager.informInsertionStarts(Arrays.asList(shipmentRoute), Collections.<Job>emptyList());
-        Shipment s = mock(Shipment.class);
+        ShipmentJob s = mock(ShipmentJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 11).build();
 
 
@@ -774,7 +774,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldNotFitInBetweenAct3AndA
     @Test
     public void whenShipmentRouteAndPickupOfNewShipmentShouldFitInBetweenAct4AndEnd() {
         stateManager.informInsertionStarts(Arrays.asList(shipmentRoute), Collections.<Job>emptyList());
-        Shipment s = mock(Shipment.class);
+        ShipmentJob s = mock(ShipmentJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 20).build();
 
 
@@ -792,7 +792,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldFitInBetweenAct4AndEnd(
     @Test
     public void whenShipmentRouteAndPickupOfNewShipmentShouldNotFitInBetweenAct4AndEnd() {
         stateManager.informInsertionStarts(Arrays.asList(shipmentRoute), Collections.<Job>emptyList());
-        Shipment s = mock(Shipment.class);
+        ShipmentJob s = mock(ShipmentJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 21).build();
 
 
@@ -814,7 +814,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldNotFitInBetweenAct4AndE
     @Test
     public void whenShipmentRouteAndDeliveryOfNewShipmentShouldFitInBetweenStartAndAct1() {
         stateManager.informInsertionStarts(Arrays.asList(shipmentRoute), Collections.<Job>emptyList());
-        Shipment s = mock(Shipment.class);
+        ShipmentJob s = mock(ShipmentJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 20).build();
 
 
@@ -832,7 +832,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldFitInBetweenStartAndA
     @Test
     public void whenShipmentRouteAndDeliveryOfNewShipmentShouldNotFitInBetweenStartAndAct1() {
         stateManager.informInsertionStarts(Arrays.asList(shipmentRoute), Collections.<Job>emptyList());
-        Shipment s = mock(Shipment.class);
+        ShipmentJob s = mock(ShipmentJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 21).build();
 
 
@@ -850,7 +850,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldNotFitInBetweenStartA
     @Test
     public void whenShipmentRouteAndDeliveryOfNewShipmentShouldFitInBetweenAct1AndAct2() {
         stateManager.informInsertionStarts(Arrays.asList(shipmentRoute), Collections.<Job>emptyList());
-        Shipment s = mock(Shipment.class);
+        ShipmentJob s = mock(ShipmentJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 10).build();
 
 
@@ -868,7 +868,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldFitInBetweenAct1AndAc
     @Test
     public void whenShipmentRouteAndDeliveryOfNewShipmentShouldNotFitInBetweenAct1AndAct2() {
         stateManager.informInsertionStarts(Arrays.asList(shipmentRoute), Collections.<Job>emptyList());
-        Shipment s = mock(Shipment.class);
+        ShipmentJob s = mock(ShipmentJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 11).build();
 
 
@@ -886,7 +886,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldNotFitInBetweenAct1An
     @Test
     public void whenShipmentRouteAndDeliveryOfNewShipmentShouldFitInBetweenAct2AndAct3() {
         stateManager.informInsertionStarts(Arrays.asList(shipmentRoute), Collections.<Job>emptyList());
-        Shipment s = mock(Shipment.class);
+        ShipmentJob s = mock(ShipmentJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 5).build();
 
 
@@ -904,7 +904,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldFitInBetweenAct2AndAc
     @Test
     public void whenShipmentRouteAndDeliveryOfNewShipmentShouldNotFitInBetweenAct2AndAct3() {
         stateManager.informInsertionStarts(Arrays.asList(shipmentRoute), Collections.<Job>emptyList());
-        Shipment s = mock(Shipment.class);
+        ShipmentJob s = mock(ShipmentJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 6).build();
 
 
@@ -922,7 +922,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldNotFitInBetweenAct2An
     @Test
     public void whenShipmentRouteAndDeliveryOfNewShipmentShouldFitInBetweenAct3AndAct4() {
         stateManager.informInsertionStarts(Arrays.asList(shipmentRoute), Collections.<Job>emptyList());
-        Shipment s = mock(Shipment.class);
+        ShipmentJob s = mock(ShipmentJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 10).build();
 
 
@@ -940,7 +940,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldFitInBetweenAct3AndAc
     @Test
     public void whenShipmentRouteAndDeliveryOfNewShipmentShouldNotFitInBetweenAct3AndAct4() {
         stateManager.informInsertionStarts(Arrays.asList(shipmentRoute), Collections.<Job>emptyList());
-        Shipment s = mock(Shipment.class);
+        ShipmentJob s = mock(ShipmentJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 11).build();
 
 
@@ -958,7 +958,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldNotFitInBetweenAct3An
     @Test
     public void whenShipmentRouteAndDeliveryOfNewShipmentShouldFitInBetweenAct4AndEnd() {
         stateManager.informInsertionStarts(Arrays.asList(shipmentRoute), Collections.<Job>emptyList());
-        Shipment s = mock(Shipment.class);
+        ShipmentJob s = mock(ShipmentJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 20).build();
 
 
@@ -976,7 +976,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldFitInBetweenAct4AndEn
     @Test
     public void whenShipmentRouteAndDeliveryOfNewShipmentShouldNotFitInBetweenAct4AndEnd() {
         stateManager.informInsertionStarts(Arrays.asList(shipmentRoute), Collections.<Job>emptyList());
-        Shipment s = mock(Shipment.class);
+        ShipmentJob s = mock(ShipmentJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 21).build();
 
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTraveledDistanceTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTraveledDistanceTest.java
index 8dc0589e8..e6a894787 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTraveledDistanceTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTraveledDistanceTest.java
@@ -27,7 +27,7 @@
 import com.graphhopper.jsprit.core.problem.job.DeliveryJob;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.job.PickupJob;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.problem.misc.ActivityContext;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
@@ -67,7 +67,7 @@
 
     PickupJob pickup;
 
-    Shipment s1;
+    ShipmentJob s1;
 
     Map<Vehicle,Double> maxDistanceMap;
 
@@ -84,7 +84,7 @@ public void doBefore(){
         d1 = DeliveryJob.Builder.newInstance("d1").setLocation(Location.newInstance(10,10)).build();
         d2 = DeliveryJob.Builder.newInstance("d2").setLocation(Location.newInstance(20,15)).build();
         pickup = PickupJob.Builder.newInstance("pickup").setLocation(Location.newInstance(50,50)).build();
-        s1 = Shipment.Builder.newInstance("s1").setPickupLocation(Location.newInstance(35,30))
+        s1 = ShipmentJob.Builder.newInstance("s1").setPickupLocation(Location.newInstance(35,30))
             .setDeliveryLocation(Location.newInstance(20,25)).build();
 
         newDelivery = DeliveryJob.Builder.newInstance("new").setLocation(Location.newInstance(-10,10)).build();
@@ -264,7 +264,7 @@ public void distanceToTravelShouldBeCorrectVehicle2(){
 
     @Test
     public void whenAddingDeliverShipment_constraintShouldWork() {
-        Shipment shipment = Shipment.Builder.newInstance("s")
+        ShipmentJob shipment = ShipmentJob.Builder.newInstance("s")
             .setPickupLocation(Location.newInstance(0, 3))
             .setDeliveryLocation(Location.newInstance(4, 0))
             .build();
@@ -310,7 +310,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
 
     @Test
     public void whenAddingDeliverShipmentWithVehDiffStartEndLocs_constraintShouldWork() {
-        Shipment shipment = Shipment.Builder.newInstance("s")
+        ShipmentJob shipment = ShipmentJob.Builder.newInstance("s")
             .setPickupLocation(Location.newInstance(0, 1))
             .setDeliveryLocation(Location.newInstance(4, 1))
             .build();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ShipmentTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ShipmentJobTest.java
similarity index 75%
rename from jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ShipmentTest.java
rename to jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ShipmentJobTest.java
index 8950e60af..5855bffd1 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ShipmentTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ShipmentJobTest.java
@@ -33,13 +33,13 @@
 import com.graphhopper.jsprit.core.util.Coordinate;
 import com.graphhopper.jsprit.core.util.TestUtils;
 
-public class ShipmentTest {
+public class ShipmentJobTest {
 
     @Test
     public void whenTwoShipmentsHaveTheSameId_theyReferencesShouldBeUnEqual() {
-        Shipment one = Shipment.Builder.newInstance("s").addSizeDimension(0, 10).setPickupLocation(Location.Builder.newInstance().setId("foo").build()).
+        ShipmentJob one = ShipmentJob.Builder.newInstance("s").addSizeDimension(0, 10).setPickupLocation(Location.Builder.newInstance().setId("foo").build()).
                         setDeliveryLocation(TestUtils.loc("foofoo")).setPickupServiceTime(10).setDeliveryServiceTime(20).build();
-        Shipment two = Shipment.Builder.newInstance("s").addSizeDimension(0, 10).setPickupLocation(Location.Builder.newInstance().setId("foo").build()).
+        ShipmentJob two = ShipmentJob.Builder.newInstance("s").addSizeDimension(0, 10).setPickupLocation(Location.Builder.newInstance().setId("foo").build()).
                         setDeliveryLocation(TestUtils.loc("foofoo")).setPickupServiceTime(10).setDeliveryServiceTime(20).build();
 
         assertTrue(one != two);
@@ -47,7 +47,7 @@ public void whenTwoShipmentsHaveTheSameId_theyReferencesShouldBeUnEqual() {
 
     @Test
     public void sizeAtStartAndEndShouldBeCorrect() {
-        Shipment one = Shipment.Builder.newInstance("s").addSizeDimension(0, 10).addSizeDimension(1, 5).setPickupLocation(Location.Builder.newInstance().setId("foo").build()).
+        ShipmentJob one = ShipmentJob.Builder.newInstance("s").addSizeDimension(0, 10).addSizeDimension(1, 5).setPickupLocation(Location.Builder.newInstance().setId("foo").build()).
                         setDeliveryLocation(TestUtils.loc("foofoo")).setPickupServiceTime(10).setDeliveryServiceTime(20).build();
         SizeDimension cap = SizeDimension.Builder.newInstance().addDimension(0, 0).addDimension(1, 0).build();
         assertTrue(one.getSizeAtStart().equals(cap));
@@ -56,9 +56,9 @@ public void sizeAtStartAndEndShouldBeCorrect() {
 
     @Test
     public void whenTwoShipmentsHaveTheSameId_theyShouldBeEqual() {
-        Shipment one = Shipment.Builder.newInstance("s").addSizeDimension(0, 10).setPickupLocation(Location.Builder.newInstance().setId("foo").build()).
+        ShipmentJob one = ShipmentJob.Builder.newInstance("s").addSizeDimension(0, 10).setPickupLocation(Location.Builder.newInstance().setId("foo").build()).
                         setDeliveryLocation(TestUtils.loc("foofoo")).setPickupServiceTime(10).setDeliveryServiceTime(20).build();
-        Shipment two = Shipment.Builder.newInstance("s").addSizeDimension(0, 10).setPickupLocation(Location.Builder.newInstance().setId("foo").build()).
+        ShipmentJob two = ShipmentJob.Builder.newInstance("s").addSizeDimension(0, 10).setPickupLocation(Location.Builder.newInstance().setId("foo").build()).
                         setDeliveryLocation(TestUtils.loc("foofoo")).setPickupServiceTime(10).setDeliveryServiceTime(20).build();
 
         assertTrue(one.equals(two));
@@ -66,7 +66,7 @@ public void whenTwoShipmentsHaveTheSameId_theyShouldBeEqual() {
 
     @Test
     public void whenShipmentIsInstantiatedWithASizeOf10_theSizeShouldBe10() {
-        Shipment one = Shipment.Builder.newInstance("s").addSizeDimension(0, 10).setPickupLocation(Location.Builder.newInstance().setId("foo").build()).
+        ShipmentJob one = ShipmentJob.Builder.newInstance("s").addSizeDimension(0, 10).setPickupLocation(Location.Builder.newInstance().setId("foo").build()).
                         setDeliveryLocation(TestUtils.loc("foofoo")).setPickupServiceTime(10).setDeliveryServiceTime(20).build();
         assertEquals(10, one.getSize().get(0));
     }
@@ -74,7 +74,7 @@ public void whenShipmentIsInstantiatedWithASizeOf10_theSizeShouldBe10() {
     @Test(expected = IllegalArgumentException.class)
     public void whenShipmentIsBuiltWithNegativeDemand_itShouldThrowException() {
         @SuppressWarnings("unused")
-        Shipment one = Shipment.Builder.newInstance("s").addSizeDimension(0, -10)
+        ShipmentJob one = ShipmentJob.Builder.newInstance("s").addSizeDimension(0, -10)
         .setPickupLocation(Location.Builder.newInstance().setId("foo").build())
         .setDeliveryLocation(TestUtils.loc("foofoo")).build();
     }
@@ -82,7 +82,7 @@ public void whenShipmentIsBuiltWithNegativeDemand_itShouldThrowException() {
     @Test(expected = IllegalArgumentException.class)
     public void whenShipmentIsBuiltWithNegativeDemand_itShouldThrowException_v2() {
         @SuppressWarnings("unused")
-        Shipment one = Shipment.Builder.newInstance("s").addSizeDimension(0, -10)
+        ShipmentJob one = ShipmentJob.Builder.newInstance("s").addSizeDimension(0, -10)
         .setPickupLocation(Location.Builder.newInstance().setId("foo").build())
         .setDeliveryLocation(TestUtils.loc("foofoo")).build();
     }
@@ -90,32 +90,32 @@ public void whenShipmentIsBuiltWithNegativeDemand_itShouldThrowException_v2() {
     @Test(expected = IllegalArgumentException.class)
     public void whenIdIsNull_itShouldThrowException() {
         @SuppressWarnings("unused")
-        Shipment one = Shipment.Builder.newInstance(null).addSizeDimension(0, 10)
+        ShipmentJob one = ShipmentJob.Builder.newInstance(null).addSizeDimension(0, 10)
         .setPickupLocation(Location.Builder.newInstance().setId("foo").build())
         .setDeliveryLocation(TestUtils.loc("foofoo")).build();
     }
 
     @Test
     public void whenCallingForANewBuilderInstance_itShouldReturnBuilderCorrectly() {
-        Shipment.Builder builder = Shipment.Builder.newInstance("s");
+        ShipmentJob.Builder builder = ShipmentJob.Builder.newInstance("s");
         assertNotNull(builder);
     }
 
     @Test(expected = IllegalArgumentException.class)
     public void whenNeitherPickupLocationIdNorPickupCoord_itThrowsException() {
         @SuppressWarnings("unused")
-        Shipment s = Shipment.Builder.newInstance("s").setDeliveryLocation(TestUtils.loc("delLoc")).build();
+        ShipmentJob s = ShipmentJob.Builder.newInstance("s").setDeliveryLocation(TestUtils.loc("delLoc")).build();
     }
 
     @Test(expected = IllegalArgumentException.class)
     public void whenNeitherDeliveryLocationIdNorDeliveryCoord_itThrowsException() {
         @SuppressWarnings("unused")
-        Shipment s = Shipment.Builder.newInstance("s").setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        ShipmentJob s = ShipmentJob.Builder.newInstance("s").setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
     }
 
     @Test
     public void whenPickupLocationIdIsSet_itShouldBeDoneCorrectly() {
-        Shipment s = Shipment.Builder.newInstance("s").setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        ShipmentJob s = ShipmentJob.Builder.newInstance("s").setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         assertEquals("pickLoc", s.getPickupActivity().getLocation().getId());
         assertEquals("pickLoc", s.getPickupActivity().getLocation().getId());
     }
@@ -123,12 +123,12 @@ public void whenPickupLocationIdIsSet_itShouldBeDoneCorrectly() {
     @Test(expected = IllegalArgumentException.class)
     public void whenPickupLocationIsNull_itThrowsException() {
         @SuppressWarnings("unused")
-        Shipment.Builder builder = Shipment.Builder.newInstance("s").setPickupLocation(Location.Builder.newInstance().setId(null).build());
+        ShipmentJob.Builder builder = ShipmentJob.Builder.newInstance("s").setPickupLocation(Location.Builder.newInstance().setId(null).build());
     }
 
     @Test
     public void whenPickupCoordIsSet_itShouldBeDoneCorrectly() {
-        Shipment s = Shipment.Builder.newInstance("s")
+        ShipmentJob s = ShipmentJob.Builder.newInstance("s")
                         .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").setCoordinate(Coordinate.newInstance(1, 2)).build()).build();
         assertEquals(1.0, s.getPickupActivity().getLocation().getCoordinate().getX(), 0.01);
         assertEquals(2.0, s.getPickupActivity().getLocation().getCoordinate().getY(), 0.01);
@@ -139,7 +139,7 @@ public void whenPickupCoordIsSet_itShouldBeDoneCorrectly() {
 
     @Test
     public void whenDeliveryLocationIdIsSet_itShouldBeDoneCorrectly() {
-        Shipment s = Shipment.Builder.newInstance("s")
+        ShipmentJob s = ShipmentJob.Builder.newInstance("s")
                         .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         assertEquals("delLoc", s.getDeliveryActivity().getLocation().getId());
         assertEquals("delLoc", s.getDeliveryActivity().getLocation().getId());
@@ -148,7 +148,7 @@ public void whenDeliveryLocationIdIsSet_itShouldBeDoneCorrectly() {
 
     @Test
     public void whenDeliveryCoordIsSet_itShouldBeDoneCorrectly() {
-        Shipment s = Shipment.Builder.newInstance("s").setDeliveryLocation(TestUtils.loc("delLoc", Coordinate.newInstance(1, 2)))
+        ShipmentJob s = ShipmentJob.Builder.newInstance("s").setDeliveryLocation(TestUtils.loc("delLoc", Coordinate.newInstance(1, 2)))
                         .setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build())
                         .build();
         assertEquals(1.0, s.getDeliveryActivity().getLocation().getCoordinate().getX(), 0.01);
@@ -159,21 +159,21 @@ public void whenDeliveryCoordIsSet_itShouldBeDoneCorrectly() {
 
     @Test
     public void whenPickupServiceTimeIsNotSet_itShouldBeZero() {
-        Shipment s = Shipment.Builder.newInstance("s")
+        ShipmentJob s = ShipmentJob.Builder.newInstance("s")
                         .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         assertEquals(0.0, s.getPickupActivity().getOperationTime(), 0.01);
     }
 
     @Test
     public void whenDeliveryServiceTimeIsNotSet_itShouldBeZero() {
-        Shipment s = Shipment.Builder.newInstance("s")
+        ShipmentJob s = ShipmentJob.Builder.newInstance("s")
                         .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         assertEquals(0.0, s.getDeliveryActivity().getOperationTime(), 0.01);
     }
 
     @Test
     public void whenPickupServiceTimeIsSet_itShouldBeDoneCorrectly() {
-        Shipment s = Shipment.Builder.newInstance("s")
+        ShipmentJob s = ShipmentJob.Builder.newInstance("s")
                         .setPickupServiceTime(2.0)
                         .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         assertEquals(2.0, s.getPickupActivity().getOperationTime(), 0.01);
@@ -182,13 +182,13 @@ public void whenPickupServiceTimeIsSet_itShouldBeDoneCorrectly() {
     @Test(expected = IllegalArgumentException.class)
     public void whenPickupServiceIsSmallerThanZero_itShouldThrowException() {
         @SuppressWarnings("unused")
-        Shipment s = Shipment.Builder.newInstance("s").setPickupServiceTime(-2.0)
+        ShipmentJob s = ShipmentJob.Builder.newInstance("s").setPickupServiceTime(-2.0)
         .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
     }
 
     @Test
     public void whenDeliveryServiceTimeIsSet_itShouldBeDoneCorrectly() {
-        Shipment s = Shipment.Builder.newInstance("s").setDeliveryServiceTime(2.0)
+        ShipmentJob s = ShipmentJob.Builder.newInstance("s").setDeliveryServiceTime(2.0)
                         .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         assertEquals(2.0, s.getDeliveryActivity().getOperationTime(), 0.01);
     }
@@ -196,12 +196,12 @@ public void whenDeliveryServiceTimeIsSet_itShouldBeDoneCorrectly() {
     @Test(expected = IllegalArgumentException.class)
     public void whenDeliveryServiceIsSmallerThanZero_itShouldThrowException() {
         @SuppressWarnings("unused")
-        Shipment s = Shipment.Builder.newInstance("s").setDeliveryServiceTime(-2.0).setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        ShipmentJob s = ShipmentJob.Builder.newInstance("s").setDeliveryServiceTime(-2.0).setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
     }
 
     @Test
     public void whenPickupTimeWindowIsNotSet_itShouldBeTheDefaultOne() {
-        Shipment s = Shipment.Builder.newInstance("s").setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        ShipmentJob s = ShipmentJob.Builder.newInstance("s").setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         assertEquals(0.0, s.getPickupActivity().getSingleTimeWindow().getStart(),
                         0.01);
         assertEquals(Double.MAX_VALUE,
@@ -211,12 +211,12 @@ public void whenPickupTimeWindowIsNotSet_itShouldBeTheDefaultOne() {
     @Test(expected = IllegalArgumentException.class)
     public void whenPickupTimeWindowIsNull_itShouldThrowException() {
         @SuppressWarnings("unused")
-        Shipment s = Shipment.Builder.newInstance("s").setPickupTimeWindow(null).setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        ShipmentJob s = ShipmentJob.Builder.newInstance("s").setPickupTimeWindow(null).setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
     }
 
     @Test
     public void whenPickupTimeWindowIsSet_itShouldBeDoneCorrectly() {
-        Shipment s = Shipment.Builder.newInstance("s").setPickupTimeWindow(TimeWindow.newInstance(1, 2))
+        ShipmentJob s = ShipmentJob.Builder.newInstance("s").setPickupTimeWindow(TimeWindow.newInstance(1, 2))
                         .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         assertEquals(1.0, s.getPickupActivity().getSingleTimeWindow().getStart(),
                         0.01);
@@ -225,7 +225,7 @@ public void whenPickupTimeWindowIsSet_itShouldBeDoneCorrectly() {
 
     @Test
     public void whenDeliveryTimeWindowIsNotSet_itShouldBeTheDefaultOne() {
-        Shipment s = Shipment.Builder.newInstance("s").setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        ShipmentJob s = ShipmentJob.Builder.newInstance("s").setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         assertEquals(0.0, s.getDeliveryActivity().getSingleTimeWindow().getStart(),
                         0.01);
         assertEquals(Double.MAX_VALUE,
@@ -235,12 +235,12 @@ public void whenDeliveryTimeWindowIsNotSet_itShouldBeTheDefaultOne() {
     @Test(expected = IllegalArgumentException.class)
     public void whenDeliveryTimeWindowIsNull_itShouldThrowException() {
         @SuppressWarnings("unused")
-        Shipment s = Shipment.Builder.newInstance("s").setDeliveryTimeWindow(null).setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        ShipmentJob s = ShipmentJob.Builder.newInstance("s").setDeliveryTimeWindow(null).setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
     }
 
     @Test
     public void whenDeliveryTimeWindowIsSet_itShouldBeDoneCorrectly() {
-        Shipment s = Shipment.Builder.newInstance("s").setDeliveryTimeWindow(TimeWindow.newInstance(1, 2))
+        ShipmentJob s = ShipmentJob.Builder.newInstance("s").setDeliveryTimeWindow(TimeWindow.newInstance(1, 2))
                         .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         assertEquals(1.0, s.getDeliveryActivity().getSingleTimeWindow().getStart(),
                         0.01);
@@ -250,7 +250,7 @@ public void whenDeliveryTimeWindowIsSet_itShouldBeDoneCorrectly() {
 
     @Test
     public void whenUsingAddDeliveryTimeWindow_itShouldBeDoneCorrectly() {
-        Shipment s = Shipment.Builder.newInstance("s").addDeliveryTimeWindow(TimeWindow.newInstance(1, 2))
+        ShipmentJob s = ShipmentJob.Builder.newInstance("s").addDeliveryTimeWindow(TimeWindow.newInstance(1, 2))
                         .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         assertEquals(1.0, s.getDeliveryActivity().getSingleTimeWindow().getStart(),
                         0.01);
@@ -260,7 +260,7 @@ public void whenUsingAddDeliveryTimeWindow_itShouldBeDoneCorrectly() {
 
     @Test
     public void whenUsingAddDeliveryTimeWindow2_itShouldBeDoneCorrectly() {
-        Shipment s = Shipment.Builder.newInstance("s").addDeliveryTimeWindow(1, 2)
+        ShipmentJob s = ShipmentJob.Builder.newInstance("s").addDeliveryTimeWindow(1, 2)
                         .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         assertEquals(1.0, s.getDeliveryActivity().getSingleTimeWindow().getStart(),
                         0.01);
@@ -272,7 +272,7 @@ public void whenUsingAddDeliveryTimeWindow2_itShouldBeDoneCorrectly() {
     public void whenAddingMultipleDeliveryTimeWindows_itShouldBeDoneCorrectly() {
         TimeWindow tw1 = TimeWindow.newInstance(1, 2);
         TimeWindow tw2 = TimeWindow.newInstance(4, 5);
-        Shipment s = Shipment.Builder.newInstance("s").addDeliveryTimeWindow(tw1).addDeliveryTimeWindow(tw2)
+        ShipmentJob s = ShipmentJob.Builder.newInstance("s").addDeliveryTimeWindow(tw1).addDeliveryTimeWindow(tw2)
                         .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         assertEquals(s.getDeliveryActivity().getTimeWindows().size(), 2);
         assertThat(s.getDeliveryActivity().getTimeWindows(), hasItem(is(tw1)));
@@ -281,7 +281,7 @@ public void whenAddingMultipleDeliveryTimeWindows_itShouldBeDoneCorrectly() {
 
     @Test(expected = IllegalArgumentException.class)
     public void whenAddingMultipleOverlappingDeliveryTimeWindows_itShouldThrowException() {
-        Shipment s = Shipment.Builder.newInstance("s").addDeliveryTimeWindow(1, 3).addDeliveryTimeWindow(2, 5)
+        ShipmentJob s = ShipmentJob.Builder.newInstance("s").addDeliveryTimeWindow(1, 3).addDeliveryTimeWindow(2, 5)
                         .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         assertEquals(1.0, s.getDeliveryActivity().getSingleTimeWindow().getStart(),
                         0.01);
@@ -292,7 +292,7 @@ public void whenAddingMultipleOverlappingDeliveryTimeWindows_itShouldThrowExcept
 
     @Test
     public void whenUsingAddPickupTimeWindow_itShouldBeDoneCorrectly() {
-        Shipment s = Shipment.Builder.newInstance("s").addPickupTimeWindow(TimeWindow.newInstance(1, 2))
+        ShipmentJob s = ShipmentJob.Builder.newInstance("s").addPickupTimeWindow(TimeWindow.newInstance(1, 2))
                         .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         assertEquals(1.0, s.getPickupActivity().getSingleTimeWindow().getStart(),
                         0.01);
@@ -301,7 +301,7 @@ public void whenUsingAddPickupTimeWindow_itShouldBeDoneCorrectly() {
 
     @Test
     public void whenUsingAddPickupTimeWindow2_itShouldBeDoneCorrectly() {
-        Shipment s = Shipment.Builder.newInstance("s").addPickupTimeWindow(1, 2)
+        ShipmentJob s = ShipmentJob.Builder.newInstance("s").addPickupTimeWindow(1, 2)
                         .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         assertEquals(1.0, s.getPickupActivity().getSingleTimeWindow().getStart(),
                         0.01);
@@ -312,7 +312,7 @@ public void whenUsingAddPickupTimeWindow2_itShouldBeDoneCorrectly() {
     public void whenAddingMultiplePickupTimeWindows_itShouldBeDoneCorrectly() {
         TimeWindow tw1 = TimeWindow.newInstance(1, 2);
         TimeWindow tw2 = TimeWindow.newInstance(4, 5);
-        Shipment s = Shipment.Builder.newInstance("s").addPickupTimeWindow(tw1).addPickupTimeWindow(tw2)
+        ShipmentJob s = ShipmentJob.Builder.newInstance("s").addPickupTimeWindow(tw1).addPickupTimeWindow(tw2)
                         .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         assertEquals(s.getPickupActivity().getTimeWindows().size(), 2);
         assertThat(s.getPickupActivity().getTimeWindows(), hasItem(is(tw1)));
@@ -321,7 +321,7 @@ public void whenAddingMultiplePickupTimeWindows_itShouldBeDoneCorrectly() {
 
     @Test(expected = IllegalArgumentException.class)
     public void whenAddingMultipleOverlappingPickupTimeWindows_itShouldThrowException() {
-        Shipment s = Shipment.Builder.newInstance("s").addPickupTimeWindow(1, 3).addPickupTimeWindow(2, 5)
+        ShipmentJob s = ShipmentJob.Builder.newInstance("s").addPickupTimeWindow(1, 3).addPickupTimeWindow(2, 5)
                         .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         assertEquals(1.0, s.getPickupActivity().getSingleTimeWindow().getStart(), 0.01);
         assertEquals(2.0, s.getPickupActivity().getSingleTimeWindow().getEnd(), 0.01);
@@ -331,7 +331,7 @@ public void whenAddingMultipleOverlappingPickupTimeWindows_itShouldThrowExceptio
     @Test(expected = IllegalArgumentException.class)
     public void whenShipmentHasNegativeCapacityVal_throwIllegalStateExpception() {
         @SuppressWarnings("unused")
-        Shipment one = Shipment.Builder.newInstance("s").setPickupLocation(Location.Builder.newInstance().setId("foo").build())
+        ShipmentJob one = ShipmentJob.Builder.newInstance("s").setPickupLocation(Location.Builder.newInstance().setId("foo").build())
         .setDeliveryLocation(TestUtils.loc("foofoo"))
         .addSizeDimension(0, -2)
         .build();
@@ -339,7 +339,7 @@ public void whenShipmentHasNegativeCapacityVal_throwIllegalStateExpception() {
 
     @Test
     public void whenAddingTwoCapDimension_nuOfDimsShouldBeTwo() {
-        Shipment one = Shipment.Builder.newInstance("s").setPickupLocation(Location.Builder.newInstance().setId("foo").build())
+        ShipmentJob one = ShipmentJob.Builder.newInstance("s").setPickupLocation(Location.Builder.newInstance().setId("foo").build())
                         .setDeliveryLocation(TestUtils.loc("foofoo"))
                         .addSizeDimension(0, 2)
                         .addSizeDimension(1, 4)
@@ -349,7 +349,7 @@ public void whenAddingTwoCapDimension_nuOfDimsShouldBeTwo() {
 
     @Test
     public void whenShipmentIsBuiltWithoutSpecifyingCapacity_itShouldHvCapWithOneDimAndDimValOfZero() {
-        Shipment one = Shipment.Builder.newInstance("s")
+        ShipmentJob one = ShipmentJob.Builder.newInstance("s")
                         .setPickupLocation(Location.Builder.newInstance().setId("foo").setCoordinate(Coordinate.newInstance(0, 0)).build())
                         .setDeliveryLocation(TestUtils.loc("foofoo")).build();
         assertEquals(1, one.getSize().getNuOfDimensions());
@@ -358,7 +358,7 @@ public void whenShipmentIsBuiltWithoutSpecifyingCapacity_itShouldHvCapWithOneDim
 
     @Test
     public void whenShipmentIsBuiltWithConstructorWhereSizeIsSpecified_capacityShouldBeSetCorrectly() {
-        Shipment one = Shipment.Builder.newInstance("s").addSizeDimension(0, 1)
+        ShipmentJob one = ShipmentJob.Builder.newInstance("s").addSizeDimension(0, 1)
                         .setPickupLocation(Location.Builder.newInstance().setId("foo").setCoordinate(Coordinate.newInstance(0, 0)).build())
                         .setDeliveryLocation(TestUtils.loc("foofoo")).build();
         assertEquals(1, one.getSize().getNuOfDimensions());
@@ -367,7 +367,7 @@ public void whenShipmentIsBuiltWithConstructorWhereSizeIsSpecified_capacityShoul
 
     @Test
     public void whenAddingSkills_theyShouldBeAddedCorrectly() {
-        Shipment s = Shipment.Builder.newInstance("s").setPickupLocation(Location.Builder.newInstance().setId("loc").build())
+        ShipmentJob s = ShipmentJob.Builder.newInstance("s").setPickupLocation(Location.Builder.newInstance().setId("loc").build())
                         .setDeliveryLocation(TestUtils.loc("delLoc"))
                         .addRequiredSkill("drill").addRequiredSkill("screwdriver").build();
         assertTrue(s.getRequiredSkills().containsSkill("drill"));
@@ -377,7 +377,7 @@ public void whenAddingSkills_theyShouldBeAddedCorrectly() {
 
     @Test
     public void whenAddingSkillsCaseSens_theyShouldBeAddedCorrectly() {
-        Shipment s = Shipment.Builder.newInstance("s")
+        ShipmentJob s = ShipmentJob.Builder.newInstance("s")
                         .setPickupLocation(Location.Builder.newInstance().setId("pick").build())
                         .setDeliveryLocation(TestUtils.loc("del"))
                         .addRequiredSkill("DriLl").addRequiredSkill("screwDriver").build();
@@ -387,7 +387,7 @@ public void whenAddingSkillsCaseSens_theyShouldBeAddedCorrectly() {
 
     @Test
     public void whenAddingSkillsCaseSensV2_theyShouldBeAddedCorrectly() {
-        Shipment s = Shipment.Builder.newInstance("s").setPickupLocation(Location.Builder.newInstance().setId("loc").build())
+        ShipmentJob s = ShipmentJob.Builder.newInstance("s").setPickupLocation(Location.Builder.newInstance().setId("loc").build())
                         .setDeliveryLocation(TestUtils.loc("del"))
                         .addRequiredSkill("screwDriver").build();
         assertFalse(s.getRequiredSkills().containsSkill("drill"));
@@ -396,7 +396,7 @@ public void whenAddingSkillsCaseSensV2_theyShouldBeAddedCorrectly() {
 
     @Test
     public void nameShouldBeAssigned() {
-        Shipment s = Shipment.Builder.newInstance("s").setPickupLocation(Location.Builder.newInstance().setId("loc").build())
+        ShipmentJob s = ShipmentJob.Builder.newInstance("s").setPickupLocation(Location.Builder.newInstance().setId("loc").build())
                         .setDeliveryLocation(TestUtils.loc("del"))
                         .setName("name").build();
         assertEquals("name", s.getName());
@@ -404,7 +404,7 @@ public void nameShouldBeAssigned() {
 
     @Test
     public void whenSettingLocation_itShouldWork() {
-        Shipment s = Shipment.Builder.newInstance("s").setPickupLocation(Location.Builder.newInstance().setId("loc").build())
+        ShipmentJob s = ShipmentJob.Builder.newInstance("s").setPickupLocation(Location.Builder.newInstance().setId("loc").build())
                         .setDeliveryLocation(Location.Builder.newInstance().setId("del").build()).build();
         assertEquals("loc", s.getPickupActivity().getLocation().getId());
         assertEquals("loc", s.getPickupActivity().getLocation().getId());
@@ -414,7 +414,7 @@ public void whenSettingLocation_itShouldWork() {
 
     @Test
     public void whenSettingPriorities_itShouldBeSetCorrectly() {
-        Shipment s = Shipment.Builder.newInstance("s").setPickupLocation(Location.newInstance("loc"))
+        ShipmentJob s = ShipmentJob.Builder.newInstance("s").setPickupLocation(Location.newInstance("loc"))
                         .setDeliveryLocation(Location.newInstance("loc"))
                         .setPriority(1).build();
         assertEquals(1, s.getPriority());
@@ -422,7 +422,7 @@ public void whenSettingPriorities_itShouldBeSetCorrectly() {
 
     @Test
     public void whenSettingPriorities_itShouldBeSetCorrectly2() {
-        Shipment s = Shipment.Builder.newInstance("s").setPickupLocation(Location.newInstance("loc"))
+        ShipmentJob s = ShipmentJob.Builder.newInstance("s").setPickupLocation(Location.newInstance("loc"))
                         .setDeliveryLocation(Location.newInstance("loc"))
                         .setPriority(3).build();
         assertEquals(3, s.getPriority());
@@ -430,7 +430,7 @@ public void whenSettingPriorities_itShouldBeSetCorrectly2() {
 
     @Test
     public void whenNotSettingPriorities_defaultShouldBe2() {
-        Shipment s = Shipment.Builder.newInstance("s").setPickupLocation(Location.newInstance("loc"))
+        ShipmentJob s = ShipmentJob.Builder.newInstance("s").setPickupLocation(Location.newInstance("loc"))
                         .setDeliveryLocation(Location.newInstance("loc"))
                         .build();
         assertEquals(2, s.getPriority());
@@ -438,7 +438,7 @@ public void whenNotSettingPriorities_defaultShouldBe2() {
 
     @Test(expected = IllegalArgumentException.class)
     public void whenSettingIncorrectPriorities_itShouldThrowException() {
-        Shipment.Builder.newInstance("s").setPickupLocation(Location.newInstance("loc"))
+        ShipmentJob.Builder.newInstance("s").setPickupLocation(Location.newInstance("loc"))
         .setDeliveryLocation(Location.newInstance("loc"))
         .setPriority(30).build();
 
@@ -446,7 +446,7 @@ public void whenSettingIncorrectPriorities_itShouldThrowException() {
 
     @Test(expected = IllegalArgumentException.class)
     public void whenSettingIncorrectPriorities_itShouldThrowException2() {
-        Shipment.Builder.newInstance("s").setPickupLocation(Location.newInstance("loc"))
+        ShipmentJob.Builder.newInstance("s").setPickupLocation(Location.newInstance("loc"))
         .setDeliveryLocation(Location.newInstance("loc"))
         .setPriority(0).build();
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/legacy/LegacyShipmentTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/legacy/LegacyShipmentTest.java
new file mode 100644
index 000000000..7b16b6da8
--- /dev/null
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/legacy/LegacyShipmentTest.java
@@ -0,0 +1,460 @@
+/*
+ * Licensed to GraphHopper GmbH under one or more contributor
+ * license agreements. See the NOTICE file distributed with this work for
+ * additional information regarding copyright ownership.
+ *
+ * GraphHopper GmbH licenses this file to you under the Apache License,
+ * Version 2.0 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.graphhopper.jsprit.core.problem.job.legacy;
+
+import static org.hamcrest.core.Is.is;
+import static org.hamcrest.core.IsCollectionContaining.hasItem;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertThat;
+import static org.junit.Assert.assertTrue;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import org.junit.Assert;
+import org.junit.Test;
+
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
+import com.graphhopper.jsprit.core.util.Coordinate;
+import com.graphhopper.jsprit.core.util.TestUtils;
+
+public class LegacyShipmentTest {
+
+    @Test
+    public void whenTwoShipmentsHaveTheSameId_theyReferencesShouldBeUnEqual() {
+        Shipment one = Shipment.Builder.newInstance("s").addSizeDimension(0, 10).setPickupLocation(Location.Builder.newInstance().setId("foo").build()).
+                setDeliveryLocation(TestUtils.loc("foofoo")).setPickupServiceTime(10).setDeliveryServiceTime(20).build();
+        Shipment two = Shipment.Builder.newInstance("s").addSizeDimension(0, 10).setPickupLocation(Location.Builder.newInstance().setId("foo").build()).
+                setDeliveryLocation(TestUtils.loc("foofoo")).setPickupServiceTime(10).setDeliveryServiceTime(20).build();
+
+        assertTrue(one != two);
+    }
+
+    @Test
+    public void whenTwoShipmentsHaveTheSameId_theyShouldBeEqual() {
+        Shipment one = Shipment.Builder.newInstance("s").addSizeDimension(0, 10).setPickupLocation(Location.Builder.newInstance().setId("foo").build()).
+                setDeliveryLocation(TestUtils.loc("foofoo")).setPickupServiceTime(10).setDeliveryServiceTime(20).build();
+        Shipment two = Shipment.Builder.newInstance("s").addSizeDimension(0, 10).setPickupLocation(Location.Builder.newInstance().setId("foo").build()).
+                setDeliveryLocation(TestUtils.loc("foofoo")).setPickupServiceTime(10).setDeliveryServiceTime(20).build();
+
+        assertTrue(one.equals(two));
+    }
+
+    @Test
+    public void whenShipmentIsInstantiatedWithASizeOf10_theSizeShouldBe10() {
+        Shipment one = Shipment.Builder.newInstance("s").addSizeDimension(0, 10).setPickupLocation(Location.Builder.newInstance().setId("foo").build()).
+                setDeliveryLocation(TestUtils.loc("foofoo")).setPickupServiceTime(10).setDeliveryServiceTime(20).build();
+        assertEquals(10, one.getSize().get(0));
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void whenShipmentIsBuiltWithNegativeDemand_itShouldThrowException() {
+        @SuppressWarnings("unused")
+        Shipment one = Shipment.Builder.newInstance("s").addSizeDimension(0, -10)
+        .setPickupLocation(Location.Builder.newInstance().setId("foo").build())
+        .setDeliveryLocation(TestUtils.loc("foofoo")).build();
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void whenShipmentIsBuiltWithNegativeDemand_itShouldThrowException_v2() {
+        @SuppressWarnings("unused")
+        Shipment one = Shipment.Builder.newInstance("s").addSizeDimension(0, -10)
+        .setPickupLocation(Location.Builder.newInstance().setId("foo").build())
+        .setDeliveryLocation(TestUtils.loc("foofoo")).build();
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void whenIdIsNull_itShouldThrowException() {
+        @SuppressWarnings("unused")
+        Shipment one = Shipment.Builder.newInstance(null).addSizeDimension(0, 10)
+        .setPickupLocation(Location.Builder.newInstance().setId("foo").build())
+        .setDeliveryLocation(TestUtils.loc("foofoo")).build();
+    }
+
+    @Test
+    public void whenCallingForANewBuilderInstance_itShouldReturnBuilderCorrectly() {
+        Shipment.Builder builder = Shipment.Builder.newInstance("s");
+        assertNotNull(builder);
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void whenNeitherPickupLocationIdNorPickupCoord_itThrowsException() {
+        @SuppressWarnings("unused")
+        Shipment s = Shipment.Builder.newInstance("s").setDeliveryLocation(TestUtils.loc("delLoc")).build();
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void whenNeitherDeliveryLocationIdNorDeliveryCoord_itThrowsException() {
+        @SuppressWarnings("unused")
+        Shipment s = Shipment.Builder.newInstance("s").setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+    }
+
+    @Test
+    public void whenPickupLocationIdIsSet_itShouldBeDoneCorrectly() {
+        Shipment s = Shipment.Builder.newInstance("s").setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        assertEquals("pickLoc", s.getPickupLocation().getId());
+        assertEquals("pickLoc", s.getPickupLocation().getId());
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void whenPickupLocationIsNull_itThrowsException() {
+        @SuppressWarnings("unused")
+        Shipment.Builder builder = Shipment.Builder.newInstance("s").setPickupLocation(Location.Builder.newInstance().setId(null).build());
+    }
+
+    @Test
+    public void whenPickupCoordIsSet_itShouldBeDoneCorrectly() {
+        Shipment s = Shipment.Builder.newInstance("s")
+                .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").setCoordinate(Coordinate.newInstance(1, 2)).build()).build();
+        assertEquals(1.0, s.getPickupLocation().getCoordinate().getX(), 0.01);
+        assertEquals(2.0, s.getPickupLocation().getCoordinate().getY(), 0.01);
+        assertEquals(1.0, s.getPickupLocation().getCoordinate().getX(), 0.01);
+        assertEquals(2.0, s.getPickupLocation().getCoordinate().getY(), 0.01);
+    }
+
+
+    @Test
+    public void whenDeliveryLocationIdIsSet_itShouldBeDoneCorrectly() {
+        Shipment s = Shipment.Builder.newInstance("s")
+                .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        assertEquals("delLoc", s.getDeliveryLocation().getId());
+        assertEquals("delLoc", s.getDeliveryLocation().getId());
+    }
+
+
+    @Test
+    public void whenDeliveryCoordIsSet_itShouldBeDoneCorrectly() {
+        Shipment s = Shipment.Builder.newInstance("s").setDeliveryLocation(TestUtils.loc("delLoc", Coordinate.newInstance(1, 2)))
+                .setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build())
+                .build();
+        assertEquals(1.0, s.getDeliveryLocation().getCoordinate().getX(), 0.01);
+        assertEquals(2.0, s.getDeliveryLocation().getCoordinate().getY(), 0.01);
+        assertEquals(1.0, s.getDeliveryLocation().getCoordinate().getX(), 0.01);
+        assertEquals(2.0, s.getDeliveryLocation().getCoordinate().getY(), 0.01);
+    }
+
+    @Test
+    public void whenPickupServiceTimeIsNotSet_itShouldBeZero() {
+        Shipment s = Shipment.Builder.newInstance("s")
+                .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        assertEquals(0.0, s.getPickupServiceTime(), 0.01);
+    }
+
+    @Test
+    public void whenDeliveryServiceTimeIsNotSet_itShouldBeZero() {
+        Shipment s = Shipment.Builder.newInstance("s")
+                .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        assertEquals(0.0, s.getDeliveryServiceTime(), 0.01);
+    }
+
+    @Test
+    public void whenPickupServiceTimeIsSet_itShouldBeDoneCorrectly() {
+        Shipment s = Shipment.Builder.newInstance("s")
+                .setPickupServiceTime(2.0)
+                .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        assertEquals(2.0, s.getPickupServiceTime(), 0.01);
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void whenPickupServiceIsSmallerThanZero_itShouldThrowException() {
+        @SuppressWarnings("unused")
+        Shipment s = Shipment.Builder.newInstance("s").setPickupServiceTime(-2.0)
+        .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+    }
+
+    @Test
+    public void whenDeliveryServiceTimeIsSet_itShouldBeDoneCorrectly() {
+        Shipment s = Shipment.Builder.newInstance("s").setDeliveryServiceTime(2.0)
+                .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        assertEquals(2.0, s.getDeliveryServiceTime(), 0.01);
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void whenDeliveryServiceIsSmallerThanZero_itShouldThrowException() {
+        @SuppressWarnings("unused")
+        Shipment s = Shipment.Builder.newInstance("s").setDeliveryServiceTime(-2.0).setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+    }
+
+    @Test
+    public void whenPickupTimeWindowIsNotSet_itShouldBeTheDefaultOne() {
+        Shipment s = Shipment.Builder.newInstance("s").setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        assertEquals(0.0, s.getPickupTimeWindow().getStart(), 0.01);
+        assertEquals(Double.MAX_VALUE, s.getPickupTimeWindow().getEnd(), 0.01);
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void whenPickupTimeWindowIsNull_itShouldThrowException() {
+        @SuppressWarnings("unused")
+        Shipment s = Shipment.Builder.newInstance("s").setPickupTimeWindow(null).setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+    }
+
+    @Test
+    public void whenPickupTimeWindowIsSet_itShouldBeDoneCorrectly() {
+        Shipment s = Shipment.Builder.newInstance("s").setPickupTimeWindow(TimeWindow.newInstance(1, 2))
+                .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        assertEquals(1.0, s.getPickupTimeWindow().getStart(), 0.01);
+        assertEquals(2.0, s.getPickupTimeWindow().getEnd(), 0.01);
+    }
+
+    @Test
+    public void whenDeliveryTimeWindowIsNotSet_itShouldBeTheDefaultOne() {
+        Shipment s = Shipment.Builder.newInstance("s").setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        assertEquals(0.0, s.getDeliveryTimeWindow().getStart(), 0.01);
+        assertEquals(Double.MAX_VALUE, s.getDeliveryTimeWindow().getEnd(), 0.01);
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void whenDeliveryTimeWindowIsNull_itShouldThrowException() {
+        @SuppressWarnings("unused")
+        Shipment s = Shipment.Builder.newInstance("s").setDeliveryTimeWindow(null).setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+    }
+
+    @Test
+    public void whenDeliveryTimeWindowIsSet_itShouldBeDoneCorrectly() {
+        Shipment s = Shipment.Builder.newInstance("s").setDeliveryTimeWindow(TimeWindow.newInstance(1, 2))
+                .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        assertEquals(1.0, s.getDeliveryTimeWindow().getStart(), 0.01);
+        assertEquals(2.0, s.getDeliveryTimeWindow().getEnd(), 0.01);
+    }
+
+    @Test
+    public void whenUsingAddDeliveryTimeWindow_itShouldBeDoneCorrectly() {
+        Shipment s = Shipment.Builder.newInstance("s").addDeliveryTimeWindow(TimeWindow.newInstance(1, 2))
+                .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        assertEquals(1.0, s.getDeliveryTimeWindow().getStart(), 0.01);
+        assertEquals(2.0, s.getDeliveryTimeWindow().getEnd(), 0.01);
+    }
+
+    @Test
+    public void whenUsingAddDeliveryTimeWindow2_itShouldBeDoneCorrectly() {
+        Shipment s = Shipment.Builder.newInstance("s").addDeliveryTimeWindow(1, 2)
+                .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        assertEquals(1.0, s.getDeliveryTimeWindow().getStart(), 0.01);
+        assertEquals(2.0, s.getDeliveryTimeWindow().getEnd(), 0.01);
+    }
+
+    @Test
+    public void whenAddingMultipleDeliveryTimeWindows_itShouldBeDoneCorrectly() {
+        TimeWindow tw1 = TimeWindow.newInstance(1,2);
+        TimeWindow tw2 = TimeWindow.newInstance(4,5);
+        Shipment s = Shipment.Builder.newInstance("s").addDeliveryTimeWindow(tw1).addDeliveryTimeWindow(tw2)
+                .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        assertEquals(s.getDeliveryTimeWindows().size(),2);
+        assertThat(s.getDeliveryTimeWindows(),hasItem(is(tw1)));
+        assertThat(s.getDeliveryTimeWindows(),hasItem(is(tw2)));
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void whenAddingMultipleOverlappingDeliveryTimeWindows_itShouldThrowException() {
+        Shipment s = Shipment.Builder.newInstance("s").addDeliveryTimeWindow(1, 3).addDeliveryTimeWindow(2,5)
+                .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        assertEquals(1.0, s.getDeliveryTimeWindow().getStart(), 0.01);
+        assertEquals(2.0, s.getDeliveryTimeWindow().getEnd(), 0.01);
+    }
+
+
+
+    @Test
+    public void whenUsingAddPickupTimeWindow_itShouldBeDoneCorrectly() {
+        Shipment s = Shipment.Builder.newInstance("s").addPickupTimeWindow(TimeWindow.newInstance(1, 2))
+                .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        assertEquals(1.0, s.getPickupTimeWindow().getStart(), 0.01);
+        assertEquals(2.0, s.getPickupTimeWindow().getEnd(), 0.01);
+    }
+
+    @Test
+    public void whenUsingAddPickupTimeWindow2_itShouldBeDoneCorrectly() {
+        Shipment s = Shipment.Builder.newInstance("s").addPickupTimeWindow(1, 2)
+                .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        assertEquals(1.0, s.getPickupTimeWindow().getStart(), 0.01);
+        assertEquals(2.0, s.getPickupTimeWindow().getEnd(), 0.01);
+    }
+
+    @Test
+    public void whenAddingMultiplePickupTimeWindows_itShouldBeDoneCorrectly() {
+        TimeWindow tw1 = TimeWindow.newInstance(1,2);
+        TimeWindow tw2 = TimeWindow.newInstance(4,5);
+        Shipment s = Shipment.Builder.newInstance("s").addPickupTimeWindow(tw1).addPickupTimeWindow(tw2)
+                .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        assertEquals(s.getPickupTimeWindows().size(),2);
+        assertThat(s.getPickupTimeWindows(), hasItem(is(tw1)));
+        assertThat(s.getPickupTimeWindows(), hasItem(is(tw2)));
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void whenAddingMultipleOverlappingPickupTimeWindows_itShouldThrowException() {
+        Shipment s = Shipment.Builder.newInstance("s").addPickupTimeWindow(1, 3).addPickupTimeWindow(2,5)
+                .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        assertEquals(1.0, s.getPickupTimeWindow().getStart(), 0.01);
+        assertEquals(2.0, s.getPickupTimeWindow().getEnd(), 0.01);
+    }
+
+
+
+    @Test(expected = IllegalArgumentException.class)
+    public void whenShipmentHasNegativeCapacityVal_throwIllegalStateExpception() {
+        @SuppressWarnings("unused")
+        Shipment one = Shipment.Builder.newInstance("s").setPickupLocation(Location.Builder.newInstance().setId("foo").build())
+        .setDeliveryLocation(TestUtils.loc("foofoo"))
+        .addSizeDimension(0, -2)
+        .build();
+    }
+
+    @Test
+    public void whenAddingTwoCapDimension_nuOfDimsShouldBeTwo() {
+        Shipment one = Shipment.Builder.newInstance("s").setPickupLocation(Location.Builder.newInstance().setId("foo").build())
+                .setDeliveryLocation(TestUtils.loc("foofoo"))
+                .addSizeDimension(0, 2)
+                .addSizeDimension(1, 4)
+                .build();
+        assertEquals(2, one.getSize().getNuOfDimensions());
+    }
+
+    @Test
+    public void whenShipmentIsBuiltWithoutSpecifyingCapacity_itShouldHvCapWithOneDimAndDimValOfZero() {
+        Shipment one = Shipment.Builder.newInstance("s")
+                .setPickupLocation(Location.Builder.newInstance().setId("foo").setCoordinate(Coordinate.newInstance(0, 0)).build())
+                .setDeliveryLocation(TestUtils.loc("foofoo")).build();
+        assertEquals(1, one.getSize().getNuOfDimensions());
+        assertEquals(0, one.getSize().get(0));
+    }
+
+    @Test
+    public void whenShipmentIsBuiltWithConstructorWhereSizeIsSpecified_capacityShouldBeSetCorrectly() {
+        Shipment one = Shipment.Builder.newInstance("s").addSizeDimension(0, 1)
+                .setPickupLocation(Location.Builder.newInstance().setId("foo").setCoordinate(Coordinate.newInstance(0, 0)).build())
+                .setDeliveryLocation(TestUtils.loc("foofoo")).build();
+        assertEquals(1, one.getSize().getNuOfDimensions());
+        assertEquals(1, one.getSize().get(0));
+    }
+
+    @Test
+    public void whenAddingSkills_theyShouldBeAddedCorrectly() {
+        Shipment s = Shipment.Builder.newInstance("s").setPickupLocation(Location.Builder.newInstance().setId("loc").build())
+                .setDeliveryLocation(TestUtils.loc("delLoc"))
+                .addRequiredSkill("drill").addRequiredSkill("screwdriver").build();
+        assertTrue(s.getRequiredSkills().containsSkill("drill"));
+        assertTrue(s.getRequiredSkills().containsSkill("drill"));
+        assertTrue(s.getRequiredSkills().containsSkill("ScrewDriver"));
+    }
+
+    @Test
+    public void whenAddingSkillsCaseSens_theyShouldBeAddedCorrectly() {
+        Shipment s = Shipment.Builder.newInstance("s")
+                .setPickupLocation(Location.Builder.newInstance().setId("pick").build())
+                .setDeliveryLocation(TestUtils.loc("del"))
+                .addRequiredSkill("DriLl").addRequiredSkill("screwDriver").build();
+        assertTrue(s.getRequiredSkills().containsSkill("drill"));
+        assertTrue(s.getRequiredSkills().containsSkill("drilL"));
+    }
+
+    @Test
+    public void whenAddingSkillsCaseSensV2_theyShouldBeAddedCorrectly() {
+        Shipment s = Shipment.Builder.newInstance("s").setPickupLocation(Location.Builder.newInstance().setId("loc").build())
+                .setDeliveryLocation(TestUtils.loc("del"))
+                .addRequiredSkill("screwDriver").build();
+        assertFalse(s.getRequiredSkills().containsSkill("drill"));
+        assertFalse(s.getRequiredSkills().containsSkill("drilL"));
+    }
+
+    @Test
+    public void nameShouldBeAssigned() {
+        Shipment s = Shipment.Builder.newInstance("s").setPickupLocation(Location.Builder.newInstance().setId("loc").build())
+                .setDeliveryLocation(TestUtils.loc("del"))
+                .setName("name").build();
+        assertEquals("name", s.getName());
+    }
+
+    @Test
+    public void whenSettingLocation_itShouldWork() {
+        Shipment s = Shipment.Builder.newInstance("s").setPickupLocation(Location.Builder.newInstance().setId("loc").build())
+                .setDeliveryLocation(Location.Builder.newInstance().setId("del").build()).build();
+        assertEquals("loc", s.getPickupLocation().getId());
+        assertEquals("loc", s.getPickupLocation().getId());
+        assertEquals("del", s.getDeliveryLocation().getId());
+        assertEquals("del", s.getDeliveryLocation().getId());
+    }
+
+    @Test
+    public void whenSettingPriorities_itShouldBeSetCorrectly(){
+        Shipment s = Shipment.Builder.newInstance("s").setPickupLocation(Location.newInstance("loc"))
+                .setDeliveryLocation(Location.newInstance("loc"))
+                .setPriority(1).build();
+        Assert.assertEquals(1, s.getPriority());
+    }
+
+    @Test
+    public void whenSettingPriorities_itShouldBeSetCorrectly2(){
+        Shipment s = Shipment.Builder.newInstance("s").setPickupLocation(Location.newInstance("loc"))
+                .setDeliveryLocation(Location.newInstance("loc"))
+                .setPriority(3).build();
+        Assert.assertEquals(3, s.getPriority());
+    }
+
+    @Test
+    public void whenSettingPriorities_itShouldBeSetCorrectly3() {
+        Shipment s = Shipment.Builder.newInstance("s").setPickupLocation(Location.newInstance("loc"))
+                .setDeliveryLocation(Location.newInstance("loc"))
+                .setPriority(10).build();
+        Assert.assertEquals(10, s.getPriority());
+    }
+
+    @Test
+    public void whenNotSettingPriorities_defaultShouldBe2(){
+        Shipment s = Shipment.Builder.newInstance("s").setPickupLocation(Location.newInstance("loc"))
+                .setDeliveryLocation(Location.newInstance("loc"))
+                .build();
+        Assert.assertEquals(2, s.getPriority());
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void whenSettingIncorrectPriorities_itShouldThrowException(){
+        Shipment s = Shipment.Builder.newInstance("s").setPickupLocation(Location.newInstance("loc"))
+                .setDeliveryLocation(Location.newInstance("loc"))
+                .setPriority(30).build();
+
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void whenSettingIncorrectPriorities_itShouldThrowException2(){
+        Shipment s = Shipment.Builder.newInstance("s").setPickupLocation(Location.newInstance("loc"))
+                .setDeliveryLocation(Location.newInstance("loc"))
+                .setPriority(0).build();
+
+    }
+
+    @Test
+    public void whenSettingUserData_itIsAssociatedWithTheJob() {
+        Shipment one = Shipment.Builder.newInstance("s").setPickupLocation(Location.newInstance("loc"))
+            .setDeliveryLocation(Location.newInstance("loc"))
+            .setUserData(new HashMap<String, Object>()).build();
+        Shipment two = Shipment.Builder.newInstance("s2").setPickupLocation(Location.newInstance("loc"))
+                .setDeliveryLocation(Location.newInstance("loc")).setUserData(42).build();
+        Shipment three = Shipment.Builder.newInstance("s3").setPickupLocation(Location.newInstance("loc"))
+                .setDeliveryLocation(Location.newInstance("loc")).build();
+
+        assertTrue(one.getUserData() instanceof Map);
+        assertEquals(42, two.getUserData());
+        assertNull(three.getUserData());
+    }
+}
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRouteBuilderTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRouteBuilderTest.java
index 102dc840a..1986c21bc 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRouteBuilderTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRouteBuilderTest.java
@@ -25,8 +25,8 @@
 
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.driver.Driver;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
-import com.graphhopper.jsprit.core.problem.job.Shipment.Builder;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob.Builder;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
@@ -36,7 +36,7 @@
 
     @Test(expected = IllegalArgumentException.class)
     public void whenDeliveryIsAddedBeforePickup_throwsException() {
-        Shipment s = Shipment.Builder.newInstance("s")
+        ShipmentJob s = ShipmentJob.Builder.newInstance("s")
                         .setDeliveryLocation(Location.newInstance("loc1")).build();
         VehicleRoute.Builder builder = VehicleRoute.Builder.newInstance(mock(Vehicle.class), mock(Driver.class));
         builder.addDelivery(s);
@@ -44,7 +44,7 @@ public void whenDeliveryIsAddedBeforePickup_throwsException() {
 
     @Test(expected = IllegalArgumentException.class)
     public void whenPickupIsAddedTwice_throwsException() {
-        Shipment s = createStandardShipment("s1").build();
+        ShipmentJob s = createStandardShipment("s1").build();
         VehicleRoute.Builder builder = VehicleRoute.Builder.newInstance(mock(Vehicle.class), mock(Driver.class));
         builder.addPickup(s);
         builder.addPickup(s);
@@ -52,7 +52,7 @@ public void whenPickupIsAddedTwice_throwsException() {
 
     @Test(expected = IllegalArgumentException.class)
     public void whenShipmentIsPickedDeliveredAndDeliveredAgain_throwsException() {
-        Shipment s = createStandardShipment("s1").build();
+        ShipmentJob s = createStandardShipment("s1").build();
 
         VehicleRoute.Builder builder = VehicleRoute.Builder.newInstance(mock(Vehicle.class), mock(Driver.class));
         builder.addPickup(s);
@@ -62,8 +62,8 @@ public void whenShipmentIsPickedDeliveredAndDeliveredAgain_throwsException() {
 
     @Test(expected = IllegalArgumentException.class)
     public void whenShipmentIsPickedUpThoughButHasNotBeenDeliveredAndRouteIsBuilt_throwsException() {
-        Shipment s = createStandardShipment("s1").build();
-        Shipment s2 = createStandardShipment("s2").build();
+        ShipmentJob s = createStandardShipment("s1").build();
+        ShipmentJob s2 = createStandardShipment("s2").build();
 
         VehicleRoute.Builder builder = VehicleRoute.Builder.newInstance(mock(Vehicle.class), mock(Driver.class));
         builder.addPickup(s);
@@ -74,8 +74,8 @@ public void whenShipmentIsPickedUpThoughButHasNotBeenDeliveredAndRouteIsBuilt_th
 
     @Test
     public void whenTwoShipmentsHaveBeenAdded_nuOfActivitiesMustEqualFour() {
-        Shipment s = createStandardShipment("s1").build();
-        Shipment s2 = createStandardShipment("s2").build();
+        ShipmentJob s = createStandardShipment("s1").build();
+        ShipmentJob s2 = createStandardShipment("s2").build();
 
         VehicleRoute.Builder builder = VehicleRoute.Builder.newInstance(mock(Vehicle.class), mock(Driver.class));
         builder.addPickup(s);
@@ -88,8 +88,8 @@ public void whenTwoShipmentsHaveBeenAdded_nuOfActivitiesMustEqualFour() {
 
     @Test
     public void whenBuildingClosedRoute_routeEndShouldHaveLocationOfVehicle() {
-        Shipment s = createStandardShipment("s1").build();
-        Shipment s2 = createStandardShipment("s2").build();
+        ShipmentJob s = createStandardShipment("s1").build();
+        ShipmentJob s2 = createStandardShipment("s2").build();
 
         Vehicle vehicle = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance("vehLoc")).setEndLocation(Location.newInstance("vehLoc"))
                         .build();
@@ -105,8 +105,8 @@ public void whenBuildingClosedRoute_routeEndShouldHaveLocationOfVehicle() {
 
     @Test
     public void whenBuildingOpenRoute_routeEndShouldHaveLocationOfLastActivity() {
-        Shipment s = createStandardShipment("s1").build();
-        Shipment s2 = createStandardShipment("s2").build();
+        ShipmentJob s = createStandardShipment("s1").build();
+        ShipmentJob s2 = createStandardShipment("s2").build();
 
         Vehicle vehicle = mock(Vehicle.class);
         when(vehicle.isReturnToDepot()).thenReturn(false);
@@ -127,8 +127,8 @@ private Location loc(String delLoc) {
 
     @Test
     public void whenSettingDepartureTime() {
-        Shipment s = createStandardShipment("s1").build();
-        Shipment s2 = createStandardShipment("s2").build();
+        ShipmentJob s = createStandardShipment("s1").build();
+        ShipmentJob s2 = createStandardShipment("s2").build();
 
         Vehicle vehicle = mock(Vehicle.class);
         when(vehicle.isReturnToDepot()).thenReturn(false);
@@ -147,7 +147,7 @@ public void whenSettingDepartureTime() {
     protected Builder createStandardShipment(String name) {
         Location loc = Location.Builder.newInstance().setId("delLoc").build();
         TimeWindow tw = TimeWindow.newInstance(0, 10);
-        return Shipment.Builder.newInstance(name)
+        return ShipmentJob.Builder.newInstance(name)
                         .addSizeDimension(0, 10)
                         .setPickupTimeWindow(tw)
                         .setDeliveryTimeWindow(tw)
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TestTourActivities.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TestTourActivities.java
index 09557e8e9..cb70d148e 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TestTourActivities.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TestTourActivities.java
@@ -27,7 +27,7 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.job.ServiceJob;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 
 
 public class TestTourActivities {
@@ -83,7 +83,7 @@ public void whenAddingAServiceAndThenRemovingTheServiceAgain_tourShouldNotServeI
 
     @Test
     public void whenAddingAShipmentActivity_tourShouldServeShipment() {
-        Shipment s = Shipment.Builder.newInstance("s").addSizeDimension(0, 1).setDeliveryLocation(Location.newInstance("delLoc"))
+        ShipmentJob s = ShipmentJob.Builder.newInstance("s").addSizeDimension(0, 1).setDeliveryLocation(Location.newInstance("delLoc"))
                         .setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         TourActivity pickupShipment = s.getPickupActivity();
         TourActivity deliverShipment = s.getDeliveryActivity();
@@ -96,7 +96,7 @@ public void whenAddingAShipmentActivity_tourShouldServeShipment() {
 
     @Test
     public void whenRemovingShipment_tourShouldNotServiceItAnymore() {
-        Shipment s = Shipment.Builder.newInstance("s").addSizeDimension(0, 1)
+        ShipmentJob s = ShipmentJob.Builder.newInstance("s").addSizeDimension(0, 1)
                         .setDeliveryLocation(Location.newInstance("delLoc"))
                         .setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build())
                         .build();
@@ -112,7 +112,7 @@ public void whenRemovingShipment_tourShouldNotServiceItAnymore() {
 
     @Test
     public void whenRemovingShipment_theirCorrespondingActivitiesShouldBeRemoved() {
-        Shipment s = Shipment.Builder.newInstance("s").addSizeDimension(0, 1)
+        ShipmentJob s = ShipmentJob.Builder.newInstance("s").addSizeDimension(0, 1)
                         .setDeliveryLocation(Location.newInstance("delLoc"))
                         .setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         TourActivity pickupShipment = s.getPickupActivity();
@@ -153,7 +153,7 @@ public void copyingSeqShouldWork() {
 
     @Test
     public void removingShipmentActivityShouldWork() {
-        Shipment s = Shipment.Builder.newInstance("s").addSizeDimension(0, 1)
+        ShipmentJob s = ShipmentJob.Builder.newInstance("s").addSizeDimension(0, 1)
                         .setDeliveryLocation(Location.newInstance("delLoc"))
                         .setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         TourActivity pickupShipment = s.getPickupActivity();
@@ -179,7 +179,7 @@ public void removingShipmentActivityShouldWork() {
 
     @Test
     public void whenCopyingShipmentActivitySeq_jobSizeShouldBeCorrect() {
-        Shipment s = Shipment.Builder.newInstance("s").addSizeDimension(0, 1)
+        ShipmentJob s = ShipmentJob.Builder.newInstance("s").addSizeDimension(0, 1)
                         .setDeliveryLocation(Location.newInstance("delLoc"))
                         .setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         TourActivity pickupShipment = s.getPickupActivity();
@@ -200,7 +200,7 @@ public void whenCopyingShipmentActivitySeq_jobSizeShouldBeCorrect() {
 
     @Test
     public void whenCopyingShipmentActivitySeq_noActivitiesShouldBeCorrect() {
-        Shipment s = Shipment.Builder.newInstance("s").addSizeDimension(0, 1)
+        ShipmentJob s = ShipmentJob.Builder.newInstance("s").addSizeDimension(0, 1)
                         .setDeliveryLocation(Location.newInstance("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         TourActivity pickupShipment = s.getPickupActivity();
         TourActivity deliverShipment = s.getDeliveryActivity();
@@ -220,7 +220,7 @@ public void whenCopyingShipmentActivitySeq_noActivitiesShouldBeCorrect() {
 
     @Test
     public void whenCopyingShipmentActivitySeq_itShouldContaintPickupAct() {
-        Shipment s = Shipment.Builder.newInstance("s").addSizeDimension(0, 1)
+        ShipmentJob s = ShipmentJob.Builder.newInstance("s").addSizeDimension(0, 1)
                         .setDeliveryLocation(Location.newInstance("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         TourActivity pickupShipment = s.getPickupActivity();
         TourActivity deliverShipment = s.getDeliveryActivity();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/LiLimReader.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/LiLimReader.java
index 4d418c9e4..3391fb464 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/LiLimReader.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/LiLimReader.java
@@ -32,7 +32,7 @@
 
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.Builder;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
@@ -127,7 +127,7 @@ private void buildShipments() {
             String from = rel.from;
             String to = rel.to;
             int demand = rel.demand;
-            Shipment s = Shipment.Builder.newInstance(counter.toString()).addSizeDimension(0, demand)
+            ShipmentJob s = ShipmentJob.Builder.newInstance(counter.toString()).addSizeDimension(0, demand)
                 .setPickupLocation(Location.Builder.newInstance().setCoordinate(customers.get(from).coord).build()).setPickupServiceTime(customers.get(from).serviceTime)
                 .setPickupTimeWindow(TimeWindow.newInstance(customers.get(from).start, customers.get(from).end))
                 .setDeliveryLocation(Location.Builder.newInstance().setCoordinate(customers.get(to).coord).build()).setDeliveryServiceTime(customers.get(to).serviceTime)
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/BicycleMessenger.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/BicycleMessenger.java
index a6ade3283..3ebd0ffcb 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/BicycleMessenger.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/BicycleMessenger.java
@@ -45,7 +45,7 @@
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.driver.DriverImpl;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
@@ -373,7 +373,7 @@ private static void validateSolution(VehicleRoutingProblemSolution bestOf, Vehic
     }
 
     static double getTimeOfDirectRoute(Job job, Vehicle v, VehicleRoutingTransportCosts routingCosts) {
-        Shipment envelope = (Shipment) job;
+        ShipmentJob envelope = (ShipmentJob) job;
         return routingCosts.getTransportTime(v.getStartLocation(), envelope.getPickupActivity().getLocation(), 0.0, DriverImpl.noDriver(), v) +
                 routingCosts.getTransportTime(envelope.getPickupActivity().getLocation(), envelope.getDeliveryActivity().getLocation(), 0.0,
                         DriverImpl.noDriver(), v);
@@ -390,7 +390,7 @@ private static void readEnvelopes(Builder problemBuilder) throws IOException {
             }
             String[] tokens = line.split("\\s+");
             //define your envelope which is basically a shipment from A to B
-            Shipment envelope = Shipment.Builder.newInstance(tokens[1]).addSizeDimension(0, 1)
+            ShipmentJob envelope = ShipmentJob.Builder.newInstance(tokens[1]).addSizeDimension(0, 1)
                     .setPickupLocation(Location.Builder.newInstance()
                             .setCoordinate(Coordinate.newInstance(Double.parseDouble(tokens[2]), Double.parseDouble(tokens[3]))).build())
                     .setDeliveryLocation(Location.Builder.newInstance()
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EnRoutePickupAndDeliveryWithMultipleDepotsAndOpenRoutesExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EnRoutePickupAndDeliveryWithMultipleDepotsAndOpenRoutesExample.java
index 732430727..03e393c8c 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EnRoutePickupAndDeliveryWithMultipleDepotsAndOpenRoutesExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EnRoutePickupAndDeliveryWithMultipleDepotsAndOpenRoutesExample.java
@@ -25,7 +25,7 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl.Builder;
@@ -86,29 +86,29 @@ public static void main(String[] args) {
 
 		 */
 
-        Shipment shipment1 = Shipment.Builder.newInstance("1").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(5, 7))).setDeliveryLocation(loc(Coordinate.newInstance(6, 9))).build();
-        Shipment shipment2 = Shipment.Builder.newInstance("2").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(5, 13))).setDeliveryLocation(loc(Coordinate.newInstance(6, 11))).build();
+        ShipmentJob shipment1 = ShipmentJob.Builder.newInstance("1").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(5, 7))).setDeliveryLocation(loc(Coordinate.newInstance(6, 9))).build();
+        ShipmentJob shipment2 = ShipmentJob.Builder.newInstance("2").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(5, 13))).setDeliveryLocation(loc(Coordinate.newInstance(6, 11))).build();
 
-        Shipment shipment3 = Shipment.Builder.newInstance("3").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(15, 7))).setDeliveryLocation(loc(Coordinate.newInstance(14, 9))).build();
-        Shipment shipment4 = Shipment.Builder.newInstance("4").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(15, 13))).setDeliveryLocation(loc(Coordinate.newInstance(14, 11))).build();
+        ShipmentJob shipment3 = ShipmentJob.Builder.newInstance("3").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(15, 7))).setDeliveryLocation(loc(Coordinate.newInstance(14, 9))).build();
+        ShipmentJob shipment4 = ShipmentJob.Builder.newInstance("4").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(15, 13))).setDeliveryLocation(loc(Coordinate.newInstance(14, 11))).build();
 
-        Shipment shipment5 = Shipment.Builder.newInstance("5").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(25, 27))).setDeliveryLocation(loc(Coordinate.newInstance(26, 29))).build();
-        Shipment shipment6 = Shipment.Builder.newInstance("6").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(25, 33))).setDeliveryLocation(loc(Coordinate.newInstance(26, 31))).build();
+        ShipmentJob shipment5 = ShipmentJob.Builder.newInstance("5").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(25, 27))).setDeliveryLocation(loc(Coordinate.newInstance(26, 29))).build();
+        ShipmentJob shipment6 = ShipmentJob.Builder.newInstance("6").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(25, 33))).setDeliveryLocation(loc(Coordinate.newInstance(26, 31))).build();
 
-        Shipment shipment7 = Shipment.Builder.newInstance("7").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(35, 27))).setDeliveryLocation(loc(Coordinate.newInstance(34, 29))).build();
-        Shipment shipment8 = Shipment.Builder.newInstance("8").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(35, 33))).setDeliveryLocation(loc(Coordinate.newInstance(34, 31))).build();
+        ShipmentJob shipment7 = ShipmentJob.Builder.newInstance("7").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(35, 27))).setDeliveryLocation(loc(Coordinate.newInstance(34, 29))).build();
+        ShipmentJob shipment8 = ShipmentJob.Builder.newInstance("8").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(35, 33))).setDeliveryLocation(loc(Coordinate.newInstance(34, 31))).build();
 
-        Shipment shipment9 = Shipment.Builder.newInstance("9").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(5, 27))).setDeliveryLocation(loc(Coordinate.newInstance(6, 29))).build();
-        Shipment shipment10 = Shipment.Builder.newInstance("10").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(5, 33))).setDeliveryLocation(loc(Coordinate.newInstance(6, 31))).build();
+        ShipmentJob shipment9 = ShipmentJob.Builder.newInstance("9").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(5, 27))).setDeliveryLocation(loc(Coordinate.newInstance(6, 29))).build();
+        ShipmentJob shipment10 = ShipmentJob.Builder.newInstance("10").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(5, 33))).setDeliveryLocation(loc(Coordinate.newInstance(6, 31))).build();
 
-        Shipment shipment11 = Shipment.Builder.newInstance("11").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(15, 27))).setDeliveryLocation(loc(Coordinate.newInstance(14, 29))).build();
-        Shipment shipment12 = Shipment.Builder.newInstance("12").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(15, 33))).setDeliveryLocation(loc(Coordinate.newInstance(14, 31))).build();
+        ShipmentJob shipment11 = ShipmentJob.Builder.newInstance("11").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(15, 27))).setDeliveryLocation(loc(Coordinate.newInstance(14, 29))).build();
+        ShipmentJob shipment12 = ShipmentJob.Builder.newInstance("12").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(15, 33))).setDeliveryLocation(loc(Coordinate.newInstance(14, 31))).build();
 
-        Shipment shipment13 = Shipment.Builder.newInstance("13").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(25, 7))).setDeliveryLocation(loc(Coordinate.newInstance(26, 9))).build();
-        Shipment shipment14 = Shipment.Builder.newInstance("14").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(25, 13))).setDeliveryLocation(loc(Coordinate.newInstance(26, 11))).build();
+        ShipmentJob shipment13 = ShipmentJob.Builder.newInstance("13").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(25, 7))).setDeliveryLocation(loc(Coordinate.newInstance(26, 9))).build();
+        ShipmentJob shipment14 = ShipmentJob.Builder.newInstance("14").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(25, 13))).setDeliveryLocation(loc(Coordinate.newInstance(26, 11))).build();
 
-        Shipment shipment15 = Shipment.Builder.newInstance("15").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(35, 7))).setDeliveryLocation(loc(Coordinate.newInstance(34, 9))).build();
-        Shipment shipment16 = Shipment.Builder.newInstance("16").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(35, 13))).setDeliveryLocation(loc(Coordinate.newInstance(34, 11))).build();
+        ShipmentJob shipment15 = ShipmentJob.Builder.newInstance("15").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(35, 7))).setDeliveryLocation(loc(Coordinate.newInstance(34, 9))).build();
+        ShipmentJob shipment16 = ShipmentJob.Builder.newInstance("16").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(35, 13))).setDeliveryLocation(loc(Coordinate.newInstance(34, 11))).build();
 
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleProductsWithLoadConstraintExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleProductsWithLoadConstraintExample.java
index 4caa00536..0c65acc42 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleProductsWithLoadConstraintExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleProductsWithLoadConstraintExample.java
@@ -28,7 +28,7 @@
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
 import com.graphhopper.jsprit.core.problem.constraint.HardActivityConstraint;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
@@ -166,19 +166,19 @@ public static void main(String[] args) {
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("vehicle").setStartLocation(loc(Coordinate.newInstance(0, 0)))
             .setType(type).build();
 
-        Shipment bananas = Shipment.Builder.newInstance("bananas_1").addSizeDimension(BANANAS_DIMENSION_INDEX, 1)
+        ShipmentJob bananas = ShipmentJob.Builder.newInstance("bananas_1").addSizeDimension(BANANAS_DIMENSION_INDEX, 1)
             .setPickupLocation(loc(Coordinate.newInstance(1, 8))).setDeliveryLocation(loc(Coordinate.newInstance(10, 8))).build();
 
-        Shipment bananas_2 = Shipment.Builder.newInstance("bananas_2").addSizeDimension(BANANAS_DIMENSION_INDEX, 1)
+        ShipmentJob bananas_2 = ShipmentJob.Builder.newInstance("bananas_2").addSizeDimension(BANANAS_DIMENSION_INDEX, 1)
             .setPickupLocation(loc(Coordinate.newInstance(2, 8))).setDeliveryLocation(loc(Coordinate.newInstance(11, 8))).build();
 
-        Shipment bananas_3 = Shipment.Builder.newInstance("bananas_3").addSizeDimension(BANANAS_DIMENSION_INDEX, 1)
+        ShipmentJob bananas_3 = ShipmentJob.Builder.newInstance("bananas_3").addSizeDimension(BANANAS_DIMENSION_INDEX, 1)
             .setPickupLocation(loc(Coordinate.newInstance(3, 8))).setDeliveryLocation(loc(Coordinate.newInstance(12, 8))).build();
 
-        Shipment apples = Shipment.Builder.newInstance("apples_1").addSizeDimension(APPLES_DIMENSION_INDEX, 1)
+        ShipmentJob apples = ShipmentJob.Builder.newInstance("apples_1").addSizeDimension(APPLES_DIMENSION_INDEX, 1)
             .setPickupLocation(loc(Coordinate.newInstance(1, 6))).setDeliveryLocation(loc(Coordinate.newInstance(10, 12))).build();
 
-        Shipment apples_2 = Shipment.Builder.newInstance("apples_2").addSizeDimension(APPLES_DIMENSION_INDEX, 1)
+        ShipmentJob apples_2 = ShipmentJob.Builder.newInstance("apples_2").addSizeDimension(APPLES_DIMENSION_INDEX, 1)
             .setPickupLocation(loc(Coordinate.newInstance(1, 5))).setDeliveryLocation(loc(Coordinate.newInstance(10, 11))).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().setFleetSize(VehicleRoutingProblem.FleetSize.INFINITE)
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryExample.java
index 6a10a7cc7..7b5a793da 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryExample.java
@@ -23,7 +23,7 @@
 import com.graphhopper.jsprit.core.algorithm.box.SchrimpfFactory;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl.Builder;
@@ -67,14 +67,14 @@ public static void main(String[] args) {
          * (5,13)->(6,11) 3: (15,7)->(14,9) 4: (15,13)->(14,11)
          */
 
-        Shipment shipment1 = Shipment.Builder.newInstance("1").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(5, 7)))
+        ShipmentJob shipment1 = ShipmentJob.Builder.newInstance("1").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(5, 7)))
             .setDeliveryLocation(loc(Coordinate.newInstance(6, 9))).build();
-        Shipment shipment2 = Shipment.Builder.newInstance("2").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(5, 13)))
+        ShipmentJob shipment2 = ShipmentJob.Builder.newInstance("2").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(5, 13)))
             .setDeliveryLocation(loc(Coordinate.newInstance(6, 11))).build();
 
-        Shipment shipment3 = Shipment.Builder.newInstance("3").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(15, 7)))
+        ShipmentJob shipment3 = ShipmentJob.Builder.newInstance("3").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(15, 7)))
             .setDeliveryLocation(loc(Coordinate.newInstance(14, 9))).build();
-        Shipment shipment4 = Shipment.Builder.newInstance("4").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(15, 13)))
+        ShipmentJob shipment4 = ShipmentJob.Builder.newInstance("4").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(15, 13)))
             .setDeliveryLocation(loc(Coordinate.newInstance(14, 11))).build();
 
 
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryOpenRoutesExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryOpenRoutesExample.java
index e0781a2b0..242ff2ad6 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryOpenRoutesExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryOpenRoutesExample.java
@@ -23,7 +23,7 @@
 import com.graphhopper.jsprit.core.algorithm.box.SchrimpfFactory;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl.Builder;
@@ -70,11 +70,11 @@ public static void main(String[] args) {
 		 * 4: (15,13)->(14,11)
 		 */
 
-        Shipment shipment1 = Shipment.Builder.newInstance("1").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(5, 7))).setDeliveryLocation(loc(Coordinate.newInstance(6, 9))).build();
-        Shipment shipment2 = Shipment.Builder.newInstance("2").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(5, 13))).setDeliveryLocation(loc(Coordinate.newInstance(6, 11))).build();
+        ShipmentJob shipment1 = ShipmentJob.Builder.newInstance("1").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(5, 7))).setDeliveryLocation(loc(Coordinate.newInstance(6, 9))).build();
+        ShipmentJob shipment2 = ShipmentJob.Builder.newInstance("2").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(5, 13))).setDeliveryLocation(loc(Coordinate.newInstance(6, 11))).build();
 
-        Shipment shipment3 = Shipment.Builder.newInstance("3").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(15, 7))).setDeliveryLocation(loc(Coordinate.newInstance(14, 9))).build();
-        Shipment shipment4 = Shipment.Builder.newInstance("4").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(15, 13))).setDeliveryLocation(loc(Coordinate.newInstance(14, 11))).build();
+        ShipmentJob shipment3 = ShipmentJob.Builder.newInstance("3").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(15, 7))).setDeliveryLocation(loc(Coordinate.newInstance(14, 9))).build();
+        ShipmentJob shipment4 = ShipmentJob.Builder.newInstance("4").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(15, 13))).setDeliveryLocation(loc(Coordinate.newInstance(14, 11))).build();
 
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryWithDepotBoundedDeliveriesExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryWithDepotBoundedDeliveriesExample.java
index f93b29a75..0d91c1445 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryWithDepotBoundedDeliveriesExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryWithDepotBoundedDeliveriesExample.java
@@ -26,7 +26,7 @@
 import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
 import com.graphhopper.jsprit.core.problem.constraint.ServiceDeliveriesFirstConstraint;
 import com.graphhopper.jsprit.core.problem.job.DeliveryJob;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl.Builder;
@@ -69,14 +69,14 @@ public static void main(String[] args) {
          * (5,13)->(6,11) 3: (15,7)->(14,9) 4: (15,13)->(14,11)
          */
 
-        Shipment shipment1 = Shipment.Builder.newInstance("1").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(5, 7)))
+        ShipmentJob shipment1 = ShipmentJob.Builder.newInstance("1").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(5, 7)))
             .setDeliveryLocation(loc(Coordinate.newInstance(6, 9))).build();
-        Shipment shipment2 = Shipment.Builder.newInstance("2").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(5, 13)))
+        ShipmentJob shipment2 = ShipmentJob.Builder.newInstance("2").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(5, 13)))
             .setDeliveryLocation(loc(Coordinate.newInstance(6, 11))).build();
 
-        Shipment shipment3 = Shipment.Builder.newInstance("3").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(15, 7)))
+        ShipmentJob shipment3 = ShipmentJob.Builder.newInstance("3").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(15, 7)))
             .setDeliveryLocation(loc(Coordinate.newInstance(14, 9))).build();
-        Shipment shipment4 = Shipment.Builder.newInstance("4").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(15, 13)))
+        ShipmentJob shipment4 = ShipmentJob.Builder.newInstance("4").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(15, 13)))
             .setDeliveryLocation(loc(Coordinate.newInstance(14, 11))).build();
 //
         /*
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/TransportOfDisabledPeople.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/TransportOfDisabledPeople.java
index a0429fed3..32b7544e1 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/TransportOfDisabledPeople.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/TransportOfDisabledPeople.java
@@ -31,7 +31,7 @@
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
 import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
 import com.graphhopper.jsprit.core.problem.constraint.HardRouteConstraint;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl.Builder;
@@ -99,54 +99,54 @@ public static void main(String[] args) {
          * build shipments at the required locations, each with a capacity-demand of 1.
          *
          */
-        Shipment shipment1 = Shipment.Builder.newInstance("wheelchair_1").addSizeDimension(WHEELCHAIRSPACE_INDEX, 1)
+        ShipmentJob shipment1 = ShipmentJob.Builder.newInstance("wheelchair_1").addSizeDimension(WHEELCHAIRSPACE_INDEX, 1)
                 .setPickupLocation(loc(Coordinate.newInstance(5, 7))).setDeliveryLocation(loc(Coordinate.newInstance(6, 9))).build();
-        Shipment shipment2 = Shipment.Builder.newInstance("2").addSizeDimension(PASSENGERSEATS_INDEX, 1).setPickupLocation(loc(Coordinate.newInstance(5, 13)))
+        ShipmentJob shipment2 = ShipmentJob.Builder.newInstance("2").addSizeDimension(PASSENGERSEATS_INDEX, 1).setPickupLocation(loc(Coordinate.newInstance(5, 13)))
                 .setDeliveryLocation(loc(Coordinate.newInstance(6, 11))).build();
 
-        Shipment shipment3 = Shipment.Builder.newInstance("wheelchair_2").addSizeDimension(WHEELCHAIRSPACE_INDEX, 1)
+        ShipmentJob shipment3 = ShipmentJob.Builder.newInstance("wheelchair_2").addSizeDimension(WHEELCHAIRSPACE_INDEX, 1)
                 .setPickupLocation(loc(Coordinate.newInstance(15, 7))).setDeliveryLocation(loc(Coordinate.newInstance(14, 9))).build();
-        Shipment shipment4 = Shipment.Builder.newInstance("4").addSizeDimension(PASSENGERSEATS_INDEX, 1).setPickupLocation(loc(Coordinate.newInstance(15, 13)))
+        ShipmentJob shipment4 = ShipmentJob.Builder.newInstance("4").addSizeDimension(PASSENGERSEATS_INDEX, 1).setPickupLocation(loc(Coordinate.newInstance(15, 13)))
                 .setDeliveryLocation(loc(Coordinate.newInstance(14, 11))).build();
 
-        Shipment shipment5 = Shipment.Builder.newInstance("wheelchair_3").addSizeDimension(WHEELCHAIRSPACE_INDEX, 1)
+        ShipmentJob shipment5 = ShipmentJob.Builder.newInstance("wheelchair_3").addSizeDimension(WHEELCHAIRSPACE_INDEX, 1)
                 .setPickupLocation(loc(Coordinate.newInstance(25, 27))).setDeliveryLocation(loc(Coordinate.newInstance(26, 29))).build();
-        Shipment shipment6 = Shipment.Builder.newInstance("6").addSizeDimension(PASSENGERSEATS_INDEX, 1).setPickupLocation(loc(Coordinate.newInstance(25, 33)))
+        ShipmentJob shipment6 = ShipmentJob.Builder.newInstance("6").addSizeDimension(PASSENGERSEATS_INDEX, 1).setPickupLocation(loc(Coordinate.newInstance(25, 33)))
                 .setDeliveryLocation(loc(Coordinate.newInstance(26, 31))).build();
 
-        Shipment shipment7 = Shipment.Builder.newInstance("7").addSizeDimension(PASSENGERSEATS_INDEX, 1).setPickupLocation(loc(Coordinate.newInstance(35, 27)))
+        ShipmentJob shipment7 = ShipmentJob.Builder.newInstance("7").addSizeDimension(PASSENGERSEATS_INDEX, 1).setPickupLocation(loc(Coordinate.newInstance(35, 27)))
                 .setDeliveryLocation(loc(Coordinate.newInstance(34, 29))).build();
-        Shipment shipment8 = Shipment.Builder.newInstance("wheelchair_4").addSizeDimension(WHEELCHAIRSPACE_INDEX, 1)
+        ShipmentJob shipment8 = ShipmentJob.Builder.newInstance("wheelchair_4").addSizeDimension(WHEELCHAIRSPACE_INDEX, 1)
                 .setPickupLocation(loc(Coordinate.newInstance(35, 33))).setDeliveryLocation(loc(Coordinate.newInstance(34, 31))).build();
 
-        Shipment shipment9 = Shipment.Builder.newInstance("9").addSizeDimension(PASSENGERSEATS_INDEX, 1).setPickupLocation(loc(Coordinate.newInstance(5, 27)))
+        ShipmentJob shipment9 = ShipmentJob.Builder.newInstance("9").addSizeDimension(PASSENGERSEATS_INDEX, 1).setPickupLocation(loc(Coordinate.newInstance(5, 27)))
                 .setDeliveryLocation(loc(Coordinate.newInstance(6, 29))).build();
-        Shipment shipment10 = Shipment.Builder.newInstance("wheelchair_5").addSizeDimension(WHEELCHAIRSPACE_INDEX, 1)
+        ShipmentJob shipment10 = ShipmentJob.Builder.newInstance("wheelchair_5").addSizeDimension(WHEELCHAIRSPACE_INDEX, 1)
                 .setPickupLocation(loc(Coordinate.newInstance(5, 33))).setDeliveryLocation(loc(Coordinate.newInstance(6, 31))).build();
 
-        Shipment shipment11 = Shipment.Builder.newInstance("11").addSizeDimension(PASSENGERSEATS_INDEX, 1)
+        ShipmentJob shipment11 = ShipmentJob.Builder.newInstance("11").addSizeDimension(PASSENGERSEATS_INDEX, 1)
                 .setPickupLocation(loc(Coordinate.newInstance(15, 27))).setDeliveryLocation(loc(Coordinate.newInstance(14, 29))).build();
-        Shipment shipment12 = Shipment.Builder.newInstance("wheelchair_6").addSizeDimension(WHEELCHAIRSPACE_INDEX, 1)
+        ShipmentJob shipment12 = ShipmentJob.Builder.newInstance("wheelchair_6").addSizeDimension(WHEELCHAIRSPACE_INDEX, 1)
                 .setPickupLocation(loc(Coordinate.newInstance(15, 33))).setDeliveryLocation(loc(Coordinate.newInstance(14, 31))).build();
 
-        Shipment shipment13 = Shipment.Builder.newInstance("13").addSizeDimension(PASSENGERSEATS_INDEX, 1).setPickupLocation(loc(Coordinate.newInstance(25, 7)))
+        ShipmentJob shipment13 = ShipmentJob.Builder.newInstance("13").addSizeDimension(PASSENGERSEATS_INDEX, 1).setPickupLocation(loc(Coordinate.newInstance(25, 7)))
                 .setDeliveryLocation(loc(Coordinate.newInstance(26, 9))).build();
-        Shipment shipment14 = Shipment.Builder.newInstance("wheelchair_7").addSizeDimension(WHEELCHAIRSPACE_INDEX, 1)
+        ShipmentJob shipment14 = ShipmentJob.Builder.newInstance("wheelchair_7").addSizeDimension(WHEELCHAIRSPACE_INDEX, 1)
                 .setPickupLocation(loc(Coordinate.newInstance(25, 13))).setDeliveryLocation(loc(Coordinate.newInstance(26, 11))).build();
 
-        Shipment shipment15 = Shipment.Builder.newInstance("15").addSizeDimension(PASSENGERSEATS_INDEX, 1).setPickupLocation(loc(Coordinate.newInstance(35, 7)))
+        ShipmentJob shipment15 = ShipmentJob.Builder.newInstance("15").addSizeDimension(PASSENGERSEATS_INDEX, 1).setPickupLocation(loc(Coordinate.newInstance(35, 7)))
                 .setDeliveryLocation(loc(Coordinate.newInstance(34, 9))).build();
-        Shipment shipment16 = Shipment.Builder.newInstance("wheelchair_8").addSizeDimension(WHEELCHAIRSPACE_INDEX, 1)
+        ShipmentJob shipment16 = ShipmentJob.Builder.newInstance("wheelchair_8").addSizeDimension(WHEELCHAIRSPACE_INDEX, 1)
                 .setPickupLocation(loc(Coordinate.newInstance(35, 13))).setDeliveryLocation(loc(Coordinate.newInstance(34, 11))).build();
 
-        Shipment shipment17 = Shipment.Builder.newInstance("17").addSizeDimension(PASSENGERSEATS_INDEX, 1).setPickupLocation(loc(Coordinate.newInstance(5, 14)))
+        ShipmentJob shipment17 = ShipmentJob.Builder.newInstance("17").addSizeDimension(PASSENGERSEATS_INDEX, 1).setPickupLocation(loc(Coordinate.newInstance(5, 14)))
                 .setDeliveryLocation(loc(Coordinate.newInstance(6, 16))).build();
-        Shipment shipment18 = Shipment.Builder.newInstance("wheelchair_9").addSizeDimension(WHEELCHAIRSPACE_INDEX, 1)
+        ShipmentJob shipment18 = ShipmentJob.Builder.newInstance("wheelchair_9").addSizeDimension(WHEELCHAIRSPACE_INDEX, 1)
                 .setPickupLocation(loc(Coordinate.newInstance(5, 20))).setDeliveryLocation(loc(Coordinate.newInstance(6, 18))).build();
 
-        Shipment shipment19 = Shipment.Builder.newInstance("19").addSizeDimension(PASSENGERSEATS_INDEX, 1)
+        ShipmentJob shipment19 = ShipmentJob.Builder.newInstance("19").addSizeDimension(PASSENGERSEATS_INDEX, 1)
                 .setPickupLocation(loc(Coordinate.newInstance(15, 14))).setDeliveryLocation(loc(Coordinate.newInstance(14, 16))).build();
-        Shipment shipment20 = Shipment.Builder.newInstance("wheelchair_10").addSizeDimension(WHEELCHAIRSPACE_INDEX, 1)
+        ShipmentJob shipment20 = ShipmentJob.Builder.newInstance("wheelchair_10").addSizeDimension(WHEELCHAIRSPACE_INDEX, 1)
                 .setPickupLocation(loc(Coordinate.newInstance(15, 20))).setDeliveryLocation(loc(Coordinate.newInstance(14, 18))).build();
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
@@ -165,7 +165,7 @@ public static void main(String[] args) {
          * wheelchair-bus can only pickup passenger where x<15
          */
         HardRouteConstraint wheelchair_bus_passenger_pickup_constraint = insertionContext -> {
-            Shipment shipment2insert = ((Shipment) insertionContext.getJob());
+            ShipmentJob shipment2insert = ((ShipmentJob) insertionContext.getJob());
             if (insertionContext.getNewVehicle().getId().equals("wheelchair_bus")) {
                 if (shipment2insert.getSize().get(PASSENGERSEATS_INDEX) > 0) {
                     if (shipment2insert.getPickupActivity().getLocation().getCoordinate().getX() > 15.
diff --git a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/LiLimReader.java b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/LiLimReader.java
index 95bedb71c..ca440e7eb 100644
--- a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/LiLimReader.java
+++ b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/LiLimReader.java
@@ -21,7 +21,7 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.Builder;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
@@ -128,7 +128,7 @@ private void buildShipments() {
             String from = rel.from;
             String to = rel.to;
             int demand = rel.demand;
-            Shipment s = Shipment.Builder.newInstance(counter.toString()).addSizeDimension(0, demand)
+            ShipmentJob s = ShipmentJob.Builder.newInstance(counter.toString()).addSizeDimension(0, demand)
                 .setPickupLocation(Location.Builder.newInstance().setCoordinate(customers.get(from).coord).build()).setPickupServiceTime(customers.get(from).serviceTime)
                 .setPickupTimeWindow(TimeWindow.newInstance(customers.get(from).start, customers.get(from).end))
                 .setDeliveryLocation(Location.Builder.newInstance().setCoordinate(customers.get(to).coord).build()).setDeliveryServiceTime(customers.get(to).serviceTime)
diff --git a/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLReader.java b/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLReader.java
index 8214c6a68..f3f2787e0 100644
--- a/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLReader.java
+++ b/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLReader.java
@@ -46,7 +46,7 @@
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.job.PickupJob;
 import com.graphhopper.jsprit.core.problem.job.ServiceJob;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
@@ -99,7 +99,7 @@
 
     private Map<String, AbstractSingleActivityJob<?>> serviceMap;
 
-    private Map<String, Shipment> shipmentMap;
+    private Map<String, ShipmentJob> shipmentMap;
 
     private Set<String> freezedJobIds = new HashSet<String>();
 
@@ -197,7 +197,7 @@ private void addJobsAndTheirLocationsToVrp() {
                 vrpBuilder.addJob(service);
             }
         }
-        for (Shipment shipment : shipmentMap.values()) {
+        for (ShipmentJob shipment : shipmentMap.values()) {
             if (!freezedJobIds.contains(shipment.getId())) {
                 vrpBuilder.addJob(shipment);
             }
@@ -248,7 +248,7 @@ private void readInitialRoutes(XMLConfiguration xmlConfig) {
                         if (shipmentId == null) {
                             throw new IllegalArgumentException("either serviceId or shipmentId is missing");
                         }
-                        Shipment shipment = getShipment(shipmentId);
+                        ShipmentJob shipment = getShipment(shipmentId);
                         if (shipment == null) {
                             throw new IllegalArgumentException("shipment to shipmentId " + shipmentId
                                     + " is missing (reference in one of your initial routes). make sure you define the shipment you refer to here in <shipments> </shipments>.");
@@ -323,7 +323,7 @@ private void readSolutions(XMLConfiguration vrpProblem) {
                             if (shipmentId == null) {
                                 throw new IllegalArgumentException("either serviceId or shipmentId is missing");
                             }
-                            Shipment shipment = getShipment(shipmentId);
+                            ShipmentJob shipment = getShipment(shipmentId);
                             if (shipment == null) {
                                 throw new IllegalArgumentException("shipment with id " + shipmentId + " does not exist.");
                             }
@@ -357,7 +357,7 @@ private void readSolutions(XMLConfiguration vrpProblem) {
         }
     }
 
-    private Shipment getShipment(String shipmentId) {
+    private ShipmentJob getShipment(String shipmentId) {
         return shipmentMap.get(shipmentId);
     }
 
@@ -402,11 +402,11 @@ private void readShipments(XMLConfiguration config) {
                         "either use capacity or capacity-dimension, not both. prefer the use of 'capacity-dimensions' over 'capacity'.");
             }
 
-            Shipment.Builder builder;
+            ShipmentJob.Builder builder;
             if (capacityString != null) {
-                builder = Shipment.Builder.newInstance(id).addSizeDimension(0, Integer.parseInt(capacityString));
+                builder = ShipmentJob.Builder.newInstance(id).addSizeDimension(0, Integer.parseInt(capacityString));
             } else {
-                builder = Shipment.Builder.newInstance(id);
+                builder = ShipmentJob.Builder.newInstance(id);
                 List<HierarchicalConfiguration> dimensionConfigs = shipmentConfig.configurationsAt("capacity-dimensions.dimension");
                 for (HierarchicalConfiguration dimension : dimensionConfigs) {
                     Integer index = dimension.getInt("[@index]");
@@ -514,7 +514,7 @@ private void readShipments(XMLConfiguration config) {
             }
 
             //build shipment
-            Shipment shipment = builder.build();
+            ShipmentJob shipment = builder.build();
 //			vrpBuilder.addJob(shipment);
             shipmentMap.put(shipment.getId(), shipment);
         }
diff --git a/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLWriter.java b/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLWriter.java
index f228d46c6..a28aa43ec 100644
--- a/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLWriter.java
+++ b/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLWriter.java
@@ -41,7 +41,7 @@
 import com.graphhopper.jsprit.core.problem.job.Break;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.job.ServiceJob;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivity;
@@ -177,7 +177,7 @@ private void writeInitialRoutes(XMLConf xmlConfig) {
                     Job job = ((JobActivity) act).getJob();
                     if (job instanceof ServiceJob) {
                         xmlConfig.setProperty(path + "(" + routeCounter + ").act(" + actCounter + ").serviceId", job.getId());
-                    } else if (job instanceof Shipment) {
+                    } else if (job instanceof ShipmentJob) {
                         xmlConfig.setProperty(path + "(" + routeCounter + ").act(" + actCounter + ").shipmentId", job.getId());
                     } else if (job instanceof Break) {
                         xmlConfig.setProperty(path + "(" + routeCounter + ").act(" + actCounter + ").breakId", job.getId());
@@ -223,7 +223,7 @@ private void writeSolutions(XMLConf xmlConfig) {
                         } else if (job instanceof ServiceJob) {
                             xmlConfig.setProperty(solutionPath + "(" + counter + ").routes.route(" + routeCounter + ").act(" + actCounter + ").serviceId",
                                     job.getId());
-                        } else if (job instanceof Shipment) {
+                        } else if (job instanceof ShipmentJob) {
                             xmlConfig.setProperty(solutionPath + "(" + counter + ").routes.route(" + routeCounter + ").act(" + actCounter + ").shipmentId",
                                     job.getId());
                         } else {
@@ -303,10 +303,10 @@ private void writeShipments(XMLConf xmlConfig, List<Job> jobs) {
         String shipmentPathString = "shipments.shipment";
         int counter = 0;
         for (Job j : jobs) {
-            if (!(j instanceof Shipment)) {
+            if (!(j instanceof ShipmentJob)) {
                 continue;
             }
-            Shipment shipment = (Shipment) j;
+            ShipmentJob shipment = (ShipmentJob) j;
             PickupActivity pickupActivity = shipment.getPickupActivity();
             DeliveryActivity deliveryActivity = shipment.getDeliveryActivity();
             xmlConfig.setProperty(shipmentPathString + "(" + counter + ")[@id]", shipment.getId());
diff --git a/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/InitialRoutesTest.java b/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/InitialRoutesTest.java
index f56ecc900..719d0edef 100644
--- a/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/InitialRoutesTest.java
+++ b/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/InitialRoutesTest.java
@@ -22,7 +22,7 @@
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.job.ServiceJob;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import org.junit.Test;
 
@@ -70,7 +70,7 @@ public void whenReading_jobMapShouldContain_shipment4() {
     private int getNuShipments(VehicleRoutingProblem vrp) {
         int nuShipments = 0;
         for (Job job : vrp.getJobs().values()) {
-            if (job instanceof Shipment) {
+            if (job instanceof ShipmentJob) {
                 nuShipments++;
             }
         }
diff --git a/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLReaderTest.java b/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLReaderTest.java
index 96c64b67e..28189552e 100644
--- a/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLReaderTest.java
+++ b/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLReaderTest.java
@@ -36,7 +36,7 @@
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.job.ServiceJob;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivity;
@@ -70,7 +70,7 @@ public void shouldReadNameOfShipment() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
-        Shipment s = (Shipment) vrp.getJobs().get("3");
+        ShipmentJob s = (ShipmentJob) vrp.getJobs().get("3");
         assertTrue(s.getName().equals("deliver-smth"));
     }
 
@@ -244,7 +244,7 @@ public void whenReadingShipments_itReadsThemCorrectly() {
         VehicleRoutingProblem vrp = builder.build();
         int shipCounter = 0;
         for (Job j : vrp.getJobs().values()) {
-            if (j instanceof Shipment) {
+            if (j instanceof ShipmentJob) {
                 shipCounter++;
             }
         }
@@ -256,7 +256,7 @@ public void whenReadingShipment3_skill1ShouldBeAssigned() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
-        Shipment s = (Shipment) vrp.getJobs().get("3");
+        ShipmentJob s = (ShipmentJob) vrp.getJobs().get("3");
         assertTrue(s.getRequiredSkills().containsSkill("skill1"));
     }
 
@@ -265,7 +265,7 @@ public void whenReadingShipment3_skill2ShouldBeAssigned() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
-        Shipment s = (Shipment) vrp.getJobs().get("3");
+        ShipmentJob s = (ShipmentJob) vrp.getJobs().get("3");
         assertTrue(s.getRequiredSkills().containsSkill("skill2"));
     }
 
@@ -274,7 +274,7 @@ public void whenReadingShipment3_nuSkillsShouldBeCorrect() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
-        Shipment s = (Shipment) vrp.getJobs().get("3");
+        ShipmentJob s = (ShipmentJob) vrp.getJobs().get("3");
         assertEquals(2, s.getRequiredSkills().values().size());
     }
 
@@ -283,7 +283,7 @@ public void whenReadingShipment4_nuSkillsOfV2ShouldBeCorrect() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
-        Shipment s = (Shipment) vrp.getJobs().get("4");
+        ShipmentJob s = (ShipmentJob) vrp.getJobs().get("4");
         assertEquals(0, s.getRequiredSkills().values().size());
     }
 
@@ -455,7 +455,7 @@ public void whenReadingJobs_capOfShipment3IsReadCorrectly() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
-        Shipment s = (Shipment) vrp.getJobs().get("3");
+        ShipmentJob s = (ShipmentJob) vrp.getJobs().get("3");
         assertEquals(-10, s.getDeliveryActivity().getLoadChange().get(0));
     }
 
@@ -464,7 +464,7 @@ public void whenReadingJobs_pickupServiceTimeOfShipment3IsReadCorrectly() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
-        Shipment s = (Shipment) vrp.getJobs().get("3");
+        ShipmentJob s = (ShipmentJob) vrp.getJobs().get("3");
         assertEquals(10.0, s.getPickupActivity().getOperationTime(), 0.01);
     }
 
@@ -473,7 +473,7 @@ public void whenReadingJobs_pickupTimeWindowOfShipment3IsReadCorrectly() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
-        Shipment s = (Shipment) vrp.getJobs().get("3");
+        ShipmentJob s = (ShipmentJob) vrp.getJobs().get("3");
         TimeWindow tw = s.getPickupActivity().getSingleTimeWindow();
         assertEquals(1000.0, tw.getStart(), 0.01);
         assertEquals(4000.0, tw.getEnd(), 0.01);
@@ -484,7 +484,7 @@ public void whenReadingJobs_deliveryTimeWindowOfShipment3IsReadCorrectly() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
-        Shipment s = (Shipment) vrp.getJobs().get("3");
+        ShipmentJob s = (ShipmentJob) vrp.getJobs().get("3");
         TimeWindow tw = s.getDeliveryActivity().getSingleTimeWindow();
         assertEquals(6000.0, tw.getStart(), 0.01);
         assertEquals(10000.0, tw.getEnd(), 0.01);
@@ -495,7 +495,7 @@ public void whenReadingJobs_deliveryServiceTimeOfShipment3IsReadCorrectly() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
-        Shipment s = (Shipment) vrp.getJobs().get("3");
+        ShipmentJob s = (ShipmentJob) vrp.getJobs().get("3");
         assertEquals(100.0, s.getDeliveryActivity().getOperationTime(), 0.01);
     }
 
@@ -504,7 +504,7 @@ public void whenReadingJobs_deliveryCoordShipment3IsReadCorrectly() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
-        Shipment s = (Shipment) vrp.getJobs().get("3");
+        ShipmentJob s = (ShipmentJob) vrp.getJobs().get("3");
         Location deliveryLocation = s.getDeliveryActivity().getLocation();
         assertEquals(10.0, deliveryLocation.getCoordinate().getX(), 0.01);
         assertEquals(0.0, deliveryLocation.getCoordinate().getY(), 0.01);
@@ -515,7 +515,7 @@ public void whenReadingJobs_pickupCoordShipment3IsReadCorrectly() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
-        Shipment s = (Shipment) vrp.getJobs().get("3");
+        ShipmentJob s = (ShipmentJob) vrp.getJobs().get("3");
         Location pickupLocation = s.getPickupActivity().getLocation();
         assertEquals(10.0, pickupLocation.getCoordinate().getX(), 0.01);
         assertEquals(10.0, pickupLocation.getCoordinate().getY(), 0.01);
@@ -526,7 +526,7 @@ public void whenReadingJobs_deliveryIdShipment3IsReadCorrectly() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
-        Shipment s = (Shipment) vrp.getJobs().get("3");
+        ShipmentJob s = (ShipmentJob) vrp.getJobs().get("3");
         assertEquals("i(9,9)", s.getDeliveryActivity().getLocation().getId());
     }
 
@@ -535,7 +535,7 @@ public void whenReadingJobs_pickupIdShipment3IsReadCorrectly() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
-        Shipment s = (Shipment) vrp.getJobs().get("3");
+        ShipmentJob s = (ShipmentJob) vrp.getJobs().get("3");
         assertEquals("i(3,9)", s.getPickupActivity().getLocation().getId());
     }
 
@@ -544,7 +544,7 @@ public void whenReadingJobs_pickupLocationIdShipment4IsReadCorrectly() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
-        Shipment s = (Shipment) vrp.getJobs().get("4");
+        ShipmentJob s = (ShipmentJob) vrp.getJobs().get("4");
         assertEquals("[x=10.0][y=10.0]", s.getPickupActivity().getLocation().getId());
     }
 
@@ -553,7 +553,7 @@ public void whenReadingJobs_deliveryLocationIdShipment4IsReadCorrectly() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
-        Shipment s = (Shipment) vrp.getJobs().get("4");
+        ShipmentJob s = (ShipmentJob) vrp.getJobs().get("4");
         assertEquals("[x=10.0][y=0.0]", s.getDeliveryActivity().getLocation().getId());
     }
 
@@ -562,7 +562,7 @@ public void whenReadingJobs_pickupServiceTimeOfShipment4IsReadCorrectly() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
-        Shipment s = (Shipment) vrp.getJobs().get("4");
+        ShipmentJob s = (ShipmentJob) vrp.getJobs().get("4");
         assertEquals(0.0, s.getPickupActivity().getOperationTime(), 0.01);
     }
 
@@ -571,7 +571,7 @@ public void whenReadingJobs_deliveryServiceTimeOfShipment4IsReadCorrectly() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
-        Shipment s = (Shipment) vrp.getJobs().get("4");
+        ShipmentJob s = (ShipmentJob) vrp.getJobs().get("4");
         assertEquals(100.0, s.getDeliveryActivity().getOperationTime(), 0.01);
     }
 
diff --git a/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLWriterTest.java b/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLWriterTest.java
index c81f71bed..a5a5120ac 100644
--- a/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLWriterTest.java
+++ b/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLWriterTest.java
@@ -33,7 +33,7 @@
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.AbstractSingleActivityJob;
 import com.graphhopper.jsprit.core.problem.job.ServiceJob;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
@@ -145,7 +145,7 @@ public void shouldWriteNameOfService() {
     public void shouldWriteNameOfShipment() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         Location pickLocation = Location.Builder.newInstance().setId("pick").setIndex(1).build();
-        Shipment s1 = Shipment.Builder.newInstance("1").setName("cleaning")
+        ShipmentJob s1 = ShipmentJob.Builder.newInstance("1").setName("cleaning")
                 .setPickupLocation(pickLocation)
                 .setDeliveryLocation(TestUtils.loc("del")).build();
 
@@ -155,7 +155,7 @@ public void shouldWriteNameOfShipment() {
         VehicleRoutingProblem.Builder vrpToReadBuilder = VehicleRoutingProblem.Builder.newInstance();
         new VrpXMLReader(vrpToReadBuilder, null).read(infileName);
         VehicleRoutingProblem readVrp = vrpToReadBuilder.build();
-        Shipment s1_read = (Shipment) readVrp.getJobs().get("1");
+        ShipmentJob s1_read = (ShipmentJob) readVrp.getJobs().get("1");
         assertTrue(s1_read.getName().equals("cleaning"));
         assertEquals(1, s1_read.getPickupActivity().getLocation().getIndex());
     }
@@ -199,11 +199,11 @@ public void whenWritingShipments_readingThemAgainMustReturnTheWrittenLocationIds
         builder.addVehicle(v1);
         builder.addVehicle(v2);
 
-        Shipment s1 = Shipment.Builder.newInstance("1").addSizeDimension(0, 10)
+        ShipmentJob s1 = ShipmentJob.Builder.newInstance("1").addSizeDimension(0, 10)
                 .setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build())
                 .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupTimeWindow(TimeWindow.newInstance(1, 2))
                 .setDeliveryTimeWindow(TimeWindow.newInstance(3, 4)).build();
-        Shipment s2 = Shipment.Builder.newInstance("2").addSizeDimension(0, 20)
+        ShipmentJob s2 = ShipmentJob.Builder.newInstance("2").addSizeDimension(0, 20)
                 .setPickupLocation(Location.Builder.newInstance().setId("pickLocation").build())
                 .setDeliveryLocation(TestUtils.loc("delLocation")).setPickupTimeWindow(TimeWindow.newInstance(5, 6))
                 .setDeliveryTimeWindow(TimeWindow.newInstance(7, 8)).build();
@@ -217,8 +217,8 @@ public void whenWritingShipments_readingThemAgainMustReturnTheWrittenLocationIds
         VehicleRoutingProblem readVrp = vrpToReadBuilder.build();
         assertEquals(2, readVrp.getJobs().size());
 
-        assertEquals("pickLoc", ((Shipment) readVrp.getJobs().get("1")).getPickupActivity().getLocation().getId());
-        assertEquals("delLoc", ((Shipment) readVrp.getJobs().get("1")).getDeliveryActivity().getLocation().getId());
+        assertEquals("pickLoc", ((ShipmentJob) readVrp.getJobs().get("1")).getPickupActivity().getLocation().getId());
+        assertEquals("delLoc", ((ShipmentJob) readVrp.getJobs().get("1")).getDeliveryActivity().getLocation().getId());
     }
 
     @Test
@@ -233,11 +233,11 @@ public void whenWritingShipments_readingThemAgainMustReturnTheWrittenPickupTimeW
         builder.addVehicle(v1);
         builder.addVehicle(v2);
 
-        Shipment s1 = Shipment.Builder.newInstance("1").addSizeDimension(0, 10)
+        ShipmentJob s1 = ShipmentJob.Builder.newInstance("1").addSizeDimension(0, 10)
                 .setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build())
                 .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupTimeWindow(TimeWindow.newInstance(1, 2))
                 .setDeliveryTimeWindow(TimeWindow.newInstance(3, 4)).build();
-        Shipment s2 = Shipment.Builder.newInstance("2").addSizeDimension(0, 20)
+        ShipmentJob s2 = ShipmentJob.Builder.newInstance("2").addSizeDimension(0, 20)
                 .setPickupLocation(Location.Builder.newInstance().setId("pickLocation").build())
                 .setDeliveryLocation(TestUtils.loc("delLocation")).setPickupTimeWindow(TimeWindow.newInstance(5, 6))
                 .setDeliveryTimeWindow(TimeWindow.newInstance(7, 8)).build();
@@ -251,7 +251,7 @@ public void whenWritingShipments_readingThemAgainMustReturnTheWrittenPickupTimeW
         VehicleRoutingProblem readVrp = vrpToReadBuilder.build();
         assertEquals(2, readVrp.getJobs().size());
 
-        TimeWindow tw = ((Shipment) readVrp.getJobs().get("1")).getPickupActivity().getSingleTimeWindow();
+        TimeWindow tw = ((ShipmentJob) readVrp.getJobs().get("1")).getPickupActivity().getSingleTimeWindow();
         assertEquals(1.0, tw.getStart(), 0.01);
         assertEquals(2.0, tw.getEnd(), 0.01);
     }
@@ -268,11 +268,11 @@ public void whenWritingShipments_readingThemAgainMustReturnTheWrittenDeliveryTim
         builder.addVehicle(v1);
         builder.addVehicle(v2);
 
-        Shipment s1 = Shipment.Builder.newInstance("1").addSizeDimension(0, 10)
+        ShipmentJob s1 = ShipmentJob.Builder.newInstance("1").addSizeDimension(0, 10)
                 .setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build())
                 .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupTimeWindow(TimeWindow.newInstance(1, 2))
                 .setDeliveryTimeWindow(TimeWindow.newInstance(3, 4)).build();
-        Shipment s2 = Shipment.Builder.newInstance("2").addSizeDimension(0, 20)
+        ShipmentJob s2 = ShipmentJob.Builder.newInstance("2").addSizeDimension(0, 20)
                 .setPickupLocation(Location.Builder.newInstance().setId("pickLocation").build())
                 .setDeliveryLocation(TestUtils.loc("delLocation")).setPickupTimeWindow(TimeWindow.newInstance(5, 6))
                 .setDeliveryTimeWindow(TimeWindow.newInstance(7, 8)).build();
@@ -286,7 +286,7 @@ public void whenWritingShipments_readingThemAgainMustReturnTheWrittenDeliveryTim
         VehicleRoutingProblem readVrp = vrpToReadBuilder.build();
         assertEquals(2, readVrp.getJobs().size());
 
-        TimeWindow tw = ((Shipment) readVrp.getJobs().get("1")).getDeliveryActivity().getSingleTimeWindow();
+        TimeWindow tw = ((ShipmentJob) readVrp.getJobs().get("1")).getDeliveryActivity().getSingleTimeWindow();
         assertEquals(3.0, tw.getStart(), 0.01);
         assertEquals(4.0, tw.getEnd(), 0.01);
     }
@@ -303,11 +303,11 @@ public void whenWritingShipments_readingThemAgainMustReturnTheWrittenDeliverySer
         builder.addVehicle(v1);
         builder.addVehicle(v2);
 
-        Shipment s1 = Shipment.Builder.newInstance("1").addSizeDimension(0, 10)
+        ShipmentJob s1 = ShipmentJob.Builder.newInstance("1").addSizeDimension(0, 10)
                 .setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build())
                 .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupTimeWindow(TimeWindow.newInstance(1, 2))
                 .setDeliveryTimeWindow(TimeWindow.newInstance(3, 4)).setPickupServiceTime(100).setDeliveryServiceTime(50).build();
-        Shipment s2 = Shipment.Builder.newInstance("2").addSizeDimension(0, 20)
+        ShipmentJob s2 = ShipmentJob.Builder.newInstance("2").addSizeDimension(0, 20)
                 .setPickupLocation(Location.Builder.newInstance().setId("pickLocation").build())
                 .setDeliveryLocation(TestUtils.loc("delLocation")).setPickupTimeWindow(TimeWindow.newInstance(5, 6))
                 .setDeliveryTimeWindow(TimeWindow.newInstance(7, 8)).build();
@@ -321,8 +321,8 @@ public void whenWritingShipments_readingThemAgainMustReturnTheWrittenDeliverySer
         VehicleRoutingProblem readVrp = vrpToReadBuilder.build();
         assertEquals(2, readVrp.getJobs().size());
 
-        assertEquals(100.0, ((Shipment) readVrp.getJobs().get("1")).getPickupActivity().getOperationTime(), 0.01);
-        assertEquals(50.0, ((Shipment) readVrp.getJobs().get("1")).getDeliveryActivity().getOperationTime(), 0.01);
+        assertEquals(100.0, ((ShipmentJob) readVrp.getJobs().get("1")).getPickupActivity().getOperationTime(), 0.01);
+        assertEquals(50.0, ((ShipmentJob) readVrp.getJobs().get("1")).getDeliveryActivity().getOperationTime(), 0.01);
 
     }
 
@@ -338,11 +338,11 @@ public void whenWritingShipments_readingThemAgainMustReturnTheWrittenLocationIdO
         builder.addVehicle(v1);
         builder.addVehicle(v2);
 
-        Shipment s1 = Shipment.Builder.newInstance("1").addSizeDimension(0, 10)
+        ShipmentJob s1 = ShipmentJob.Builder.newInstance("1").addSizeDimension(0, 10)
                 .setPickupLocation(TestUtils.loc(Coordinate.newInstance(1, 2))).setDeliveryLocation(TestUtils.loc("delLoc"))
                 .setPickupTimeWindow(TimeWindow.newInstance(1, 2))
                 .setDeliveryTimeWindow(TimeWindow.newInstance(3, 4)).setPickupServiceTime(100).setDeliveryServiceTime(50).build();
-        Shipment s2 = Shipment.Builder.newInstance("2").addSizeDimension(0, 20)
+        ShipmentJob s2 = ShipmentJob.Builder.newInstance("2").addSizeDimension(0, 20)
                 .setPickupLocation(Location.Builder.newInstance().setId("pickLocation").build())
                 .setDeliveryLocation(TestUtils.loc("delLocation")).setPickupTimeWindow(TimeWindow.newInstance(5, 6))
                 .setDeliveryTimeWindow(TimeWindow.newInstance(7, 8)).build();
@@ -356,7 +356,7 @@ public void whenWritingShipments_readingThemAgainMustReturnTheWrittenLocationIdO
         VehicleRoutingProblem readVrp = vrpToReadBuilder.build();
         assertEquals(2, readVrp.getJobs().size());
 
-        assertEquals("[x=1.0][y=2.0]", ((Shipment) readVrp.getJobs().get("1")).getPickupActivity().getLocation().getId());
+        assertEquals("[x=1.0][y=2.0]", ((ShipmentJob) readVrp.getJobs().get("1")).getPickupActivity().getLocation().getId());
     }
 
     @Test
@@ -466,7 +466,7 @@ private Vehicle getVehicle(String v1, VehicleRoutingProblem readVrp) {
     public void whenWritingShipments_shipmentShouldHaveCorrectNuSkills() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
 
-        Shipment s = Shipment.Builder.newInstance("1").addRequiredSkill("skill1").addRequiredSkill("skill2").addRequiredSkill("skill3")
+        ShipmentJob s = ShipmentJob.Builder.newInstance("1").addRequiredSkill("skill1").addRequiredSkill("skill2").addRequiredSkill("skill3")
                 .addSizeDimension(0, 10)
                 .setPickupLocation(TestUtils.loc(Coordinate.newInstance(1, 2)))
                 .setDeliveryLocation(TestUtils.loc("delLoc", Coordinate.newInstance(5, 6)))
@@ -487,7 +487,7 @@ public void whenWritingShipments_shipmentShouldHaveCorrectNuSkills() {
     public void whenWritingShipments_shipmentShouldContain_skill1() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
 
-        Shipment s = Shipment.Builder.newInstance("1").addRequiredSkill("skill1").addRequiredSkill("skill2").addRequiredSkill("skill3")
+        ShipmentJob s = ShipmentJob.Builder.newInstance("1").addRequiredSkill("skill1").addRequiredSkill("skill2").addRequiredSkill("skill3")
                 .addSizeDimension(0, 10)
                 .setPickupLocation(TestUtils.loc(Coordinate.newInstance(1, 2)))
                 .setDeliveryLocation(TestUtils.loc("delLoc", Coordinate.newInstance(5, 6)))
@@ -508,7 +508,7 @@ public void whenWritingShipments_shipmentShouldContain_skill1() {
     public void whenWritingShipments_shipmentShouldContain_skill2() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
 
-        Shipment s = Shipment.Builder.newInstance("1").addRequiredSkill("skill1").addRequiredSkill("Skill2").addRequiredSkill("skill3")
+        ShipmentJob s = ShipmentJob.Builder.newInstance("1").addRequiredSkill("skill1").addRequiredSkill("Skill2").addRequiredSkill("skill3")
                 .addSizeDimension(0, 10)
                 .setPickupLocation(TestUtils.loc(Coordinate.newInstance(1, 2)))
                 .setDeliveryLocation(TestUtils.loc("delLoc", Coordinate.newInstance(5, 6)))
@@ -529,7 +529,7 @@ public void whenWritingShipments_shipmentShouldContain_skill2() {
     public void whenWritingShipments_shipmentShouldContain_skill3() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
 
-        Shipment s = Shipment.Builder.newInstance("1").addRequiredSkill("skill1").addRequiredSkill("Skill2").addRequiredSkill("skill3")
+        ShipmentJob s = ShipmentJob.Builder.newInstance("1").addRequiredSkill("skill1").addRequiredSkill("Skill2").addRequiredSkill("skill3")
                 .addSizeDimension(0, 10)
                 .setPickupLocation(TestUtils.loc(Coordinate.newInstance(1, 2)))
                 .setDeliveryLocation(TestUtils.loc("delLoc", Coordinate.newInstance(5, 6)))
@@ -558,11 +558,11 @@ public void whenWritingShipments_readingThemAgainMustReturnTheWrittenLocationCoo
         builder.addVehicle(v1);
         builder.addVehicle(v2);
 
-        Shipment s1 = Shipment.Builder.newInstance("1").addSizeDimension(0, 10).setPickupLocation(TestUtils.loc(Coordinate.newInstance(1, 2)))
+        ShipmentJob s1 = ShipmentJob.Builder.newInstance("1").addSizeDimension(0, 10).setPickupLocation(TestUtils.loc(Coordinate.newInstance(1, 2)))
                 .setDeliveryLocation(TestUtils.loc("delLoc", Coordinate.newInstance(5, 6)))
                 .setPickupTimeWindow(TimeWindow.newInstance(1, 2))
                 .setDeliveryTimeWindow(TimeWindow.newInstance(3, 4)).setPickupServiceTime(100).setDeliveryServiceTime(50).build();
-        Shipment s2 = Shipment.Builder.newInstance("2").addSizeDimension(0, 20)
+        ShipmentJob s2 = ShipmentJob.Builder.newInstance("2").addSizeDimension(0, 20)
                 .setPickupLocation(Location.Builder.newInstance().setId("pickLocation").build())
                 .setDeliveryLocation(TestUtils.loc("delLocation"))
                 .setPickupTimeWindow(TimeWindow.newInstance(5, 6))
@@ -577,18 +577,18 @@ public void whenWritingShipments_readingThemAgainMustReturnTheWrittenLocationCoo
         VehicleRoutingProblem readVrp = vrpToReadBuilder.build();
         assertEquals(2, readVrp.getJobs().size());
 
-        assertEquals(1.0, ((Shipment) readVrp.getJobs().get("1")).getPickupActivity().getLocation().getCoordinate().getX(), 0.01);
-        assertEquals(2.0, ((Shipment) readVrp.getJobs().get("1")).getPickupActivity().getLocation().getCoordinate().getY(), 0.01);
+        assertEquals(1.0, ((ShipmentJob) readVrp.getJobs().get("1")).getPickupActivity().getLocation().getCoordinate().getX(), 0.01);
+        assertEquals(2.0, ((ShipmentJob) readVrp.getJobs().get("1")).getPickupActivity().getLocation().getCoordinate().getY(), 0.01);
 
-        assertEquals(5.0, ((Shipment) readVrp.getJobs().get("1")).getDeliveryActivity().getLocation().getCoordinate().getX(), 0.01);
-        assertEquals(6.0, ((Shipment) readVrp.getJobs().get("1")).getDeliveryActivity().getLocation().getCoordinate().getY(), 0.01);
+        assertEquals(5.0, ((ShipmentJob) readVrp.getJobs().get("1")).getDeliveryActivity().getLocation().getCoordinate().getX(), 0.01);
+        assertEquals(6.0, ((ShipmentJob) readVrp.getJobs().get("1")).getDeliveryActivity().getLocation().getCoordinate().getY(), 0.01);
     }
 
     @Test
     public void whenWritingShipmentWithSeveralCapacityDimension_itShouldWriteAndReadItCorrectly() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
 
-        Shipment s1 = Shipment.Builder.newInstance("1")
+        ShipmentJob s1 = ShipmentJob.Builder.newInstance("1")
                 .setPickupLocation(TestUtils.loc(Coordinate.newInstance(1, 2)))
                 .setDeliveryLocation(TestUtils.loc("delLoc", Coordinate.newInstance(5, 6)))
                 .setPickupTimeWindow(TimeWindow.newInstance(1, 2))
@@ -597,7 +597,7 @@ public void whenWritingShipmentWithSeveralCapacityDimension_itShouldWriteAndRead
                 .addSizeDimension(2, 100)
                 .build();
 
-        Shipment s2 = Shipment.Builder.newInstance("2").addSizeDimension(0, 20)
+        ShipmentJob s2 = ShipmentJob.Builder.newInstance("2").addSizeDimension(0, 20)
                 .setPickupLocation(Location.Builder.newInstance().setId("pickLocation").build())
                 .setDeliveryLocation(TestUtils.loc("delLocation")).setPickupTimeWindow(TimeWindow.newInstance(5, 6))
                 .setDeliveryTimeWindow(TimeWindow.newInstance(7, 8)).build();
