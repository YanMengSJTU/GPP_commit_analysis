diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/AvgServiceAndShipmentDistance.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/AvgServiceAndShipmentDistance.java
index 9a1e84e99..7b73efdaf 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/AvgServiceAndShipmentDistance.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/AvgServiceAndShipmentDistance.java
@@ -17,18 +17,21 @@
  */
 package com.graphhopper.jsprit.core.algorithm.ruin.distance;
 
+import java.util.List;
+
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.util.EuclideanDistanceCalculator;
 
 
 /**
- * Calculator that calculates average distance between two jobs based on the input-transport costs.
+ * Calculator that calculates average distance between two jobs based on the
+ * input-transport costs.
+ * <p>
  * <p>
- * <p>If the distance between two jobs cannot be calculated with input-transport costs, it tries the euclidean distance between these jobs.
+ * If the distance between two jobs cannot be calculated with input-transport
+ * costs, it tries the euclidean distance between these jobs.
  *
  * @author stefan schroeder
  */
@@ -43,43 +46,52 @@ public AvgServiceAndShipmentDistance(VehicleRoutingTransportCosts costs) {
     }
 
     /**
-     * Calculates and returns the average distance between two jobs based on the input-transport costs.
+     * Calculates and returns the average distance between two jobs based on the
+     * input-transport costs.
+     * <p>
      * <p>
-     * <p>If the distance between two jobs cannot be calculated with input-transport costs, it tries the euclidean distance between these jobs.
+     * If the distance between two jobs cannot be calculated with
+     * input-transport costs, it tries the euclidean distance between these
+     * jobs.
      */
     @Override
     public double getDistance(Job i, Job j) {
-        if (i.equals(j)) return 0.0;
-
-        if (i instanceof Service && j instanceof Service) {
-            return calcDist((Service) i, (Service) j);
-        } else if (i instanceof Service && j instanceof Shipment) {
-            return calcDist((Service) i, (Shipment) j);
-        } else if (i instanceof Shipment && j instanceof Service) {
-            return calcDist((Service) j, (Shipment) i);
-        } else if (i instanceof Shipment && j instanceof Shipment) {
-            return calcDist((Shipment) i, (Shipment) j);
-        } else {
-            throw new IllegalStateException("this supports only shipments or services");
+        if (i.equals(j)) {
+            return 0.0;
         }
-    }
 
-    private double calcDist(Service i, Service j) {
-        return calcDist(i.getLocation(), j.getLocation());
-    }
+        // TODO: Do we really need these checks after the refactor?
+//      if (!(i instanceof Service || i instanceof Shipment || i instanceof ShipmentWithBackhaul)) {
+//          throw new IllegalStateException("this supports only shipments or services");
+//      }
+//      if (!(j instanceof Service || j instanceof Shipment || j instanceof ShipmentWithBackhaul)) {
+//          throw new IllegalStateException("this supports only shipments or services");
+//      }
 
-    private double calcDist(Service i, Shipment j) {
-        double c_ij1 = calcDist(i.getLocation(), j.getPickupLocation());
-        double c_ij2 = calcDist(i.getLocation(), j.getDeliveryLocation());
-        return (c_ij1 + c_ij2) / 2.0;
+        return calcDist(i.getAllLocations(), j.getAllLocations());
     }
 
-    private double calcDist(Shipment i, Shipment j) {
-        double c_i1j1 = calcDist(i.getPickupLocation(), j.getPickupLocation());
-        double c_i1j2 = calcDist(i.getPickupLocation(), j.getDeliveryLocation());
-        double c_i2j1 = calcDist(i.getDeliveryLocation(), j.getPickupLocation());
-        double c_i2j2 = calcDist(i.getDeliveryLocation(), j.getDeliveryLocation());
-        return (c_i1j1 + c_i1j2 + c_i2j1 + c_i2j2) / 4.0;
+    /**
+     * Calculates the average distance of the two set of positions.
+     *
+     * @param leftLocations
+     *            The position list of one side.
+     * @param rightLocations
+     *            The position list of the other side.
+     * @return The Average distance. (Returns 0 when any of the sides contains
+     *         no distances.)
+     */
+    private double calcDist(List<Location> leftLocations, List<Location> rightLocations) {
+        if (leftLocations.isEmpty() || rightLocations.isEmpty()) {
+            return 0d;
+        }
+        double totalDistance = 0d;
+        for (Location left : leftLocations) {
+            for (Location right : rightLocations) {
+                totalDistance += calcDist(left, right);
+            }
+        }
+        return totalDistance / (leftLocations.size() * rightLocations.size());
     }
 
     private double calcDist(Location location_i, Location location_j) {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/AbstractJob.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/AbstractJob.java
index 81ef63e76..f945976a2 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/AbstractJob.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/AbstractJob.java
@@ -18,6 +18,9 @@
 
 package com.graphhopper.jsprit.core.problem;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import com.graphhopper.jsprit.core.problem.job.Job;
 
 /**
@@ -27,6 +30,9 @@
 
     private int index;
 
+    protected List<Location> allLocations = new ArrayList<>();
+
+    @Override
     public int getIndex() {
         return index;
     }
@@ -35,4 +41,16 @@ protected void setIndex(int index) {
         this.index = index;
     }
 
+    protected void addLocation(Location location) {
+        if (location != null) {
+            allLocations.add(location);
+        }
+    }
+
+    @Override
+    public List<Location> getAllLocations() {
+        return allLocations;
+    }
+
+
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Job.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Job.java
index 161e3ee74..179188209 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Job.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Job.java
@@ -18,9 +18,12 @@
 package com.graphhopper.jsprit.core.problem.job;
 
 
+import java.util.List;
+
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.HasId;
 import com.graphhopper.jsprit.core.problem.HasIndex;
+import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.Skills;
 
 /**
@@ -35,10 +38,12 @@
      *
      * @return id
      */
+    @Override
     public String getId();
 
     /**
-     * Returns size, i.e. capacity-demand, of this job which can consist of an arbitrary number of capacity dimensions.
+     * Returns size, i.e. capacity-demand, of this job which can consist of an
+     * arbitrary number of capacity dimensions.
      *
      * @return Capacity
      */
@@ -54,7 +59,8 @@
     public String getName();
 
     /**
-     * Get priority of job. Only 1 = high priority, 2 = medium and 3 = low are allowed.
+     * Get priority of job. Only 1 = high priority, 2 = medium and 3 = low are
+     * allowed.
      * <p>
      * Default is 2 = medium.
      *
@@ -62,4 +68,9 @@
      */
     public int getPriority();
 
+
+    /**
+     * @return All involved locations
+     */
+    public List<Location> getAllLocations();
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java
index 38a496b6d..80f79bb2f 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java
@@ -17,6 +17,9 @@
  */
 package com.graphhopper.jsprit.core.problem.job;
 
+import java.util.Collection;
+import java.util.List;
+
 import com.graphhopper.jsprit.core.problem.AbstractJob;
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.Location;
@@ -26,13 +29,9 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindowsImpl;
 import com.graphhopper.jsprit.core.util.Coordinate;
 
-import java.util.Collection;
-
 /**
  * Service implementation of a job.
  * <p>
- * <p>A service distinguishes itself from a shipment such that it has only one location. Thus a service
- * is a single point in space (where a service-activity occurs).
  * <p>
  * <p>Note that two services are equal if they have the same id.
  *
@@ -53,7 +52,8 @@
         /**
          * Returns a new instance of builder that builds a service.
          *
-         * @param id the id of the service
+         * @param id
+         *            the id of the service
          * @return the builder
          */
         public static Builder newInstance(String id) {
@@ -257,6 +257,8 @@ public T build() {
         location = builder.location;
 		timeWindowManager = builder.timeWindows;
         priority = builder.priority;
+
+        addLocation(location);
 	}
 
 	public Collection<TimeWindow> getTimeWindows(){
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java
index 3275e9010..915f352ab 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java
@@ -17,6 +17,8 @@
  */
 package com.graphhopper.jsprit.core.problem.job;
 
+import java.util.Collection;
+
 import com.graphhopper.jsprit.core.problem.AbstractJob;
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.Location;
@@ -24,22 +26,29 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindowsImpl;
 
-import java.util.Collection;
-
 
 /**
- * Shipment is an implementation of Job and consists of a pickup and a delivery of something.
+ * Shipment is an implementation of Job and consists of a pickup and a delivery
+ * of something.
+ * <p>
  * <p>
- * <p>It distinguishes itself from {@link Service} as two locations are involved a pickup where usually
- * something is loaded to the transport unit and a delivery where something is unloaded.
+ * It distinguishes itself from {@link Service} as two locations are involved a
+ * pickup where usually something is loaded to the transport unit and a delivery
+ * where something is unloaded.
  * <p>
- * <p>By default serviceTimes of both pickup and delivery is 0.0 and timeWindows of both is [0.0, Double.MAX_VALUE],
  * <p>
- * <p>A shipment can be built with a builder. You can get an instance of the builder by coding <code>Shipment.Builder.newInstance(...)</code>.
- * This way you can specify the shipment. Once you build the shipment, it is immutable, i.e. fields/attributes cannot be changed anymore and
- * you can only 'get' the specified values.
+ * By default serviceTimes of both pickup and delivery is 0.0 and timeWindows of
+ * both is [0.0, Double.MAX_VALUE],
  * <p>
- * <p>Note that two shipments are equal if they have the same id.
+ * <p>
+ * A shipment can be built with a builder. You can get an instance of the
+ * builder by coding <code>Shipment.Builder.newInstance(...)</code>. This way
+ * you can specify the shipment. Once you build the shipment, it is immutable,
+ * i.e. fields/attributes cannot be changed anymore and you can only 'get' the
+ * specified values.
+ * <p>
+ * <p>
+ * Note that two shipments are equal if they have the same id.
  *
  * @author schroeder
  */
@@ -92,7 +101,9 @@
         /**
          * Returns new instance of this builder.
          *
-         * @param id the id of the shipment which must be a unique identifier among all jobs
+         * @param id
+         *            the id of the shipment which must be a unique identifier
+         *            among all jobs
          * @return the builder
          */
         public static Builder newInstance(String id) {
@@ -100,7 +111,9 @@ public static Builder newInstance(String id) {
         }
 
         Builder(String id) {
-            if (id == null) throw new IllegalArgumentException("id must not be null");
+            if (id == null) {
+                throw new IllegalArgumentException("id must not be null");
+            }
             this.id = id;
             pickupTimeWindows = new TimeWindowsImpl();
             pickupTimeWindows.add(pickupTimeWindow);
@@ -111,44 +124,58 @@ public static Builder newInstance(String id) {
         /**
          * Sets pickup location.
          *
-         * @param pickupLocation pickup location
+         * @param pickupLocation
+         *            pickup location
          * @return builder
          */
         public Builder setPickupLocation(Location pickupLocation) {
-            this.pickupLocation_ = pickupLocation;
+            pickupLocation_ = pickupLocation;
             return this;
         }
 
         /**
          * Sets pickupServiceTime.
          * <p>
-         * <p>ServiceTime is intended to be the time the implied activity takes at the pickup-location.
+         * <p>
+         * ServiceTime is intended to be the time the implied activity takes at
+         * the pickup-location.
          *
-         * @param serviceTime the service time / duration the pickup of the associated shipment takes
+         * @param serviceTime
+         *            the service time / duration the pickup of the associated
+         *            shipment takes
          * @return builder
-         * @throws IllegalArgumentException if servicTime < 0.0
+         * @throws IllegalArgumentException
+         *             if servicTime < 0.0
          */
         public Builder setPickupServiceTime(double serviceTime) {
-            if (serviceTime < 0.0) throw new IllegalArgumentException("serviceTime must not be < 0.0");
-            this.pickupServiceTime = serviceTime;
+            if (serviceTime < 0.0) {
+                throw new IllegalArgumentException("serviceTime must not be < 0.0");
+            }
+            pickupServiceTime = serviceTime;
             return this;
         }
 
         /**
-         * Sets the timeWindow for the pickup, i.e. the time-period in which a pickup operation is
-         * allowed to START.
+         * Sets the timeWindow for the pickup, i.e. the time-period in which a
+         * pickup operation is allowed to START.
          * <p>
-         * <p>By default timeWindow is [0.0, Double.MAX_VALUE}
+         * <p>
+         * By default timeWindow is [0.0, Double.MAX_VALUE}
          *
-         * @param timeWindow the time window within the pickup operation/activity can START
+         * @param timeWindow
+         *            the time window within the pickup operation/activity can
+         *            START
          * @return builder
-         * @throws IllegalArgumentException if timeWindow is null
+         * @throws IllegalArgumentException
+         *             if timeWindow is null
          */
         public Builder setPickupTimeWindow(TimeWindow timeWindow) {
-            if (timeWindow == null) throw new IllegalArgumentException("delivery time-window must not be null");
-            this.pickupTimeWindow = timeWindow;
-            this.pickupTimeWindows = new TimeWindowsImpl();
-            this.pickupTimeWindows.add(timeWindow);
+            if (timeWindow == null) {
+                throw new IllegalArgumentException("delivery time-window must not be null");
+            }
+            pickupTimeWindow = timeWindow;
+            pickupTimeWindows = new TimeWindowsImpl();
+            pickupTimeWindows.add(timeWindow);
             return this;
         }
 
@@ -157,57 +184,75 @@ public Builder setPickupTimeWindow(TimeWindow timeWindow) {
         /**
          * Sets delivery location.
          *
-         * @param deliveryLocation delivery location
+         * @param deliveryLocation
+         *            delivery location
          * @return builder
          */
         public Builder setDeliveryLocation(Location deliveryLocation) {
-            this.deliveryLocation_ = deliveryLocation;
+            deliveryLocation_ = deliveryLocation;
             return this;
         }
 
         /**
          * Sets the delivery service-time.
          * <p>
-         * <p>ServiceTime is intended to be the time the implied activity takes at the delivery-location.
+         * <p>
+         * ServiceTime is intended to be the time the implied activity takes at
+         * the delivery-location.
          *
-         * @param deliveryServiceTime the service time / duration of shipment's delivery
+         * @param deliveryServiceTime
+         *            the service time / duration of shipment's delivery
          * @return builder
-         * @throws IllegalArgumentException if serviceTime < 0.0
+         * @throws IllegalArgumentException
+         *             if serviceTime < 0.0
          */
         public Builder setDeliveryServiceTime(double deliveryServiceTime) {
-            if (deliveryServiceTime < 0.0) throw new IllegalArgumentException("deliveryServiceTime must not be < 0.0");
+            if (deliveryServiceTime < 0.0) {
+                throw new IllegalArgumentException("deliveryServiceTime must not be < 0.0");
+            }
             this.deliveryServiceTime = deliveryServiceTime;
             return this;
         }
 
         /**
-         * Sets the timeWindow for the delivery, i.e. the time-period in which a delivery operation is
-         * allowed to start.
+         * Sets the timeWindow for the delivery, i.e. the time-period in which a
+         * delivery operation is allowed to start.
          * <p>
-         * <p>By default timeWindow is [0.0, Double.MAX_VALUE}
+         * <p>
+         * By default timeWindow is [0.0, Double.MAX_VALUE}
          *
-         * @param timeWindow the time window within the associated delivery is allowed to START
+         * @param timeWindow
+         *            the time window within the associated delivery is allowed
+         *            to START
          * @return builder
-         * @throws IllegalArgumentException if timeWindow is null
+         * @throws IllegalArgumentException
+         *             if timeWindow is null
          */
         public Builder setDeliveryTimeWindow(TimeWindow timeWindow) {
-            if (timeWindow == null) throw new IllegalArgumentException("delivery time-window must not be null");
-            this.deliveryTimeWindow = timeWindow;
-            this.deliveryTimeWindows = new TimeWindowsImpl();
-            this.deliveryTimeWindows.add(timeWindow);
+            if (timeWindow == null) {
+                throw new IllegalArgumentException("delivery time-window must not be null");
+            }
+            deliveryTimeWindow = timeWindow;
+            deliveryTimeWindows = new TimeWindowsImpl();
+            deliveryTimeWindows.add(timeWindow);
             return this;
         }
 
         /**
          * Adds capacity dimension.
          *
-         * @param dimensionIndex the dimension index of the corresponding capacity value
-         * @param dimensionValue the capacity value
+         * @param dimensionIndex
+         *            the dimension index of the corresponding capacity value
+         * @param dimensionValue
+         *            the capacity value
          * @return builder
-         * @throws IllegalArgumentException if dimVal < 0
+         * @throws IllegalArgumentException
+         *             if dimVal < 0
          */
         public Builder addSizeDimension(int dimensionIndex, int dimensionValue) {
-            if (dimensionValue < 0) throw new IllegalArgumentException("capacity value cannot be negative");
+            if (dimensionValue < 0) {
+                throw new IllegalArgumentException("capacity value cannot be negative");
+            }
             capacityBuilder.addDimension(dimensionIndex, dimensionValue);
             return this;
         }
@@ -217,12 +262,17 @@ public Builder addSizeDimension(int dimensionIndex, int dimensionValue) {
          * Builds the shipment.
          *
          * @return shipment
-         * @throws IllegalArgumentException if neither pickup-location nor pickup-coord is set or if neither delivery-location nor delivery-coord
-         *                               is set
+         * @throws IllegalArgumentException
+         *             if neither pickup-location nor pickup-coord is set or if
+         *             neither delivery-location nor delivery-coord is set
          */
         public Shipment build() {
-            if (pickupLocation_ == null) throw new IllegalArgumentException("pickup location is missing");
-            if (deliveryLocation_ == null) throw new IllegalArgumentException("delivery location is missing");
+            if (pickupLocation_ == null) {
+                throw new IllegalArgumentException("pickup location is missing");
+            }
+            if (deliveryLocation_ == null) {
+                throw new IllegalArgumentException("delivery location is missing");
+            }
             capacity = capacityBuilder.build();
             skills = skillBuilder.build();
             return new Shipment(this);
@@ -240,8 +290,10 @@ public Builder setName(String name) {
         }
 
         public Builder addDeliveryTimeWindow(TimeWindow timeWindow) {
-            if(timeWindow == null) throw new IllegalArgumentException("time-window arg must not be null");
-            if(!deliveryTimeWindowAdded){
+            if (timeWindow == null) {
+                throw new IllegalArgumentException("time-window arg must not be null");
+            }
+            if (!deliveryTimeWindowAdded) {
                 deliveryTimeWindows = new TimeWindowsImpl();
                 deliveryTimeWindowAdded = true;
             }
@@ -255,8 +307,10 @@ public Builder addDeliveryTimeWindow(double earliest, double latest) {
         }
 
         public Builder addPickupTimeWindow(TimeWindow timeWindow) {
-            if(timeWindow == null) throw new IllegalArgumentException("time-window arg must not be null");
-            if(!pickupTimeWindowAdded){
+            if (timeWindow == null) {
+                throw new IllegalArgumentException("time-window arg must not be null");
+            }
+            if (!pickupTimeWindowAdded) {
                 pickupTimeWindows = new TimeWindowsImpl();
                 pickupTimeWindowAdded = true;
             }
@@ -269,7 +323,8 @@ public Builder addPickupTimeWindow(double earliest, double latest) {
         }
 
         /**
-         * Set priority to shipment. Only 1 = high priority, 2 = medium and 3 = low are allowed.
+         * Set priority to shipment. Only 1 = high priority, 2 = medium and 3 =
+         * low are allowed.
          * <p>
          * Default is 2 = medium.
          *
@@ -277,7 +332,9 @@ public Builder addPickupTimeWindow(double earliest, double latest) {
          * @return builder
          */
         public Builder setPriority(int priority) {
-            if(priority < 1 || priority > 3) throw new IllegalArgumentException("incorrect priority. only 1 = high, 2 = medium and 3 = low is allowed");
+            if (priority < 1 || priority > 3) {
+                throw new IllegalArgumentException("incorrect priority. only 1 = high, 2 = medium and 3 = low is allowed");
+            }
             this.priority = priority;
             return this;
         }
@@ -310,19 +367,22 @@ public Builder setPriority(int priority) {
     private final int priority;
 
     Shipment(Builder builder) {
-        this.id = builder.id;
-        this.pickupServiceTime = builder.pickupServiceTime;
-        this.pickupTimeWindow = builder.pickupTimeWindow;
-        this.deliveryServiceTime = builder.deliveryServiceTime;
-        this.deliveryTimeWindow = builder.deliveryTimeWindow;
-        this.capacity = builder.capacity;
-        this.skills = builder.skills;
-        this.name = builder.name;
-        this.pickupLocation_ = builder.pickupLocation_;
-        this.deliveryLocation_ = builder.deliveryLocation_;
-        this.deliveryTimeWindows = builder.deliveryTimeWindows;
-        this.pickupTimeWindows = builder.pickupTimeWindows;
-        this.priority = builder.priority;
+        id = builder.id;
+        pickupServiceTime = builder.pickupServiceTime;
+        pickupTimeWindow = builder.pickupTimeWindow;
+        deliveryServiceTime = builder.deliveryServiceTime;
+        deliveryTimeWindow = builder.deliveryTimeWindow;
+        capacity = builder.capacity;
+        skills = builder.skills;
+        name = builder.name;
+        pickupLocation_ = builder.pickupLocation_;
+        deliveryLocation_ = builder.deliveryLocation_;
+        deliveryTimeWindows = builder.deliveryTimeWindows;
+        pickupTimeWindows = builder.pickupTimeWindows;
+        priority = builder.priority;
+
+        addLocation(pickupLocation_);
+        addLocation(deliveryLocation_);
     }
 
     @Override
@@ -337,7 +397,8 @@ public Location getPickupLocation() {
     /**
      * Returns the pickup service-time.
      * <p>
-     * <p>By default service-time is 0.0.
+     * <p>
+     * By default service-time is 0.0.
      *
      * @return service-time
      */
@@ -400,18 +461,23 @@ public int hashCode() {
      */
     @Override
     public boolean equals(Object obj) {
-        if (this == obj)
+        if (this == obj) {
             return true;
-        if (obj == null)
+        }
+        if (obj == null) {
             return false;
-        if (getClass() != obj.getClass())
+        }
+        if (getClass() != obj.getClass()) {
             return false;
+        }
         Shipment other = (Shipment) obj;
         if (id == null) {
-            if (other.id != null)
+            if (other.id != null) {
                 return false;
-        } else if (!id.equals(other.id))
+            }
+        } else if (!id.equals(other.id)) {
             return false;
+        }
         return true;
     }
 
@@ -431,12 +497,14 @@ public String getName() {
     }
 
     /**
-     * Get priority of shipment. Only 1 = high priority, 2 = medium and 3 = low are allowed.
+     * Get priority of shipment. Only 1 = high priority, 2 = medium and 3 = low
+     * are allowed.
      * <p>
      * Default is 2 = medium.
      *
      * @return priority
      */
+    @Override
     public int getPriority() {
         return priority;
     }
