diff --git a/.travis.yml b/.travis.yml
index dbca6aee7..3d221ae1e 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -3,8 +3,8 @@ sudo: false
 matrix:
   fast_finish: true
   include:
-    - jdk: openjdk7
     - jdk: oraclejdk8
+      dist: trusty
       # Java 9 needs to be manually installed/upgraded
       # see: https://github.com/travis-ci/travis-ci/issues/2968#issuecomment-149164058
     - jdk: oraclejdk9
@@ -52,7 +52,7 @@ script:
 notifications:
   email:
     - $EMAIL
-    
+
 cache:
   directories:
     - $HOME/.m2
diff --git a/CHANGELOG.md b/CHANGELOG.md
index 7a7da75f0..450c8e9d1 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,5 +1,6 @@
 Change-log
 ==========
+**v1.7.3** @ 2019-04-10
 
 **v1.7.2** @ 2017-06-08
 - see [Whats new](https://github.com/graphhopper/jsprit/blob/master/WHATS_NEW.md)
diff --git a/jsprit-analysis/pom.xml b/jsprit-analysis/pom.xml
index e4dd3e4b7..ec78fec8e 100644
--- a/jsprit-analysis/pom.xml
+++ b/jsprit-analysis/pom.xml
@@ -20,7 +20,7 @@
     <parent>
         <groupId>com.graphhopper</groupId>
         <artifactId>jsprit</artifactId>
-        <version>1.7.3-SNAPSHOT</version>
+        <version>1.8-SNAPSHOT</version>
     </parent>
     <modelVersion>4.0.0</modelVersion>
     <artifactId>jsprit-analysis</artifactId>
diff --git a/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/AlgorithmEventsRecorder.java b/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/AlgorithmEventsRecorder.java
index 441026240..6ca5e9a83 100644
--- a/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/AlgorithmEventsRecorder.java
+++ b/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/AlgorithmEventsRecorder.java
@@ -376,7 +376,7 @@ private void addNode(String nodeId, Coordinate nodeCoord) {
     }
 
     @Override
-    public void informInsertionEnds(Collection<VehicleRoute> vehicleRoutes) {
+    public void informInsertionEnds(Collection<VehicleRoute> vehicleRoutes, Collection<Job> badJobs) {
         if (!record()) return;
         fileSink.stepBegins(graph.getId(), 0, CLEAR_SOLUTION);
         removeRoutes(vehicleRoutes);
diff --git a/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/AlgorithmEventsViewer.java b/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/AlgorithmEventsViewer.java
index 2bc87c97b..c9264b48a 100644
--- a/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/AlgorithmEventsViewer.java
+++ b/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/AlgorithmEventsViewer.java
@@ -153,8 +153,6 @@ public void stepBegins(String sourceId, long timeId, double step) {
 
     private long delayRuin = 5;
 
-    private long delay = 2;
-
     public void setRecreationDelay(long delay_in_ms) {
         this.delayRecreation = delay_in_ms;
     }
@@ -174,6 +172,7 @@ public void display(String dgsFile) {
 
         DelayContainer delayContainer = new DelayContainer();
         DelaySink delaySink = new DelaySink(delayContainer);
+        long delay = 2;
         delaySink.setDelay(delay);
         delaySink.setRecreateDelay(delayRecreation);
         delaySink.setRuinDelay(delayRuin);
@@ -197,7 +196,7 @@ public void display(String dgsFile) {
         }
     }
 
-    public static void main(String[] args) throws IOException {
+    public static void main(String[] args) {
         AlgorithmEventsViewer viewer = new AlgorithmEventsViewer();
         viewer.setRuinDelay(10);
         viewer.setRecreationDelay(5);
diff --git a/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/GraphStreamViewer.java b/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/GraphStreamViewer.java
index e04097f3c..2897d4fbe 100644
--- a/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/GraphStreamViewer.java
+++ b/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/GraphStreamViewer.java
@@ -19,9 +19,8 @@
 
 
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
+import com.graphhopper.jsprit.core.problem.job.Activity;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivity;
@@ -46,7 +45,7 @@
 
     public static class StyleSheets {
 
-        public static String BLUE_FOREST =
+        static String BLUE_FOREST =
             "graph { fill-color: #141F2E; }" +
                 "node {" +
                 "	size: 7px, 7px;" +
@@ -169,7 +168,7 @@
 
     }
 
-    public static Graph createMultiGraph(String name, String style) {
+    static Graph createMultiGraph(String name, String style) {
         Graph g = new MultiGraph(name);
         g.addAttribute("ui.quality");
         g.addAttribute("ui.antialias");
@@ -177,66 +176,14 @@ public static Graph createMultiGraph(String name, String style) {
         return g;
     }
 
-    public static ViewPanel createEmbeddedView(Graph graph, double scaling) {
+    private static ViewPanel createEmbeddedView(Graph graph, double scaling) {
         Viewer viewer = new Viewer(graph, Viewer.ThreadingModel.GRAPH_IN_ANOTHER_THREAD);
         ViewPanel view = viewer.addDefaultView(false);
         view.setPreferredSize(new Dimension((int) (698 * scaling), (int) (440 * scaling)));
         return view;
     }
 
-    public static String STYLESHEET =
-        "node {" +
-            "	size: 10px, 10px;" +
-            "   fill-color: #6CC644;" +
-            "	text-alignment: at-right;" +
-            " 	stroke-mode: plain;" +
-            "	stroke-color: #999;" +
-            "	stroke-width: 1.0;" +
-            "	text-font: couriernew;" +
-            " 	text-offset: 2,-5;" +
-            "	text-size: 8;" +
-            "}" +
-            "node.pickup {" +
-            " 	fill-color: #6CC644;" +
-            "}" +
-            "node.delivery {" +
-            " 	fill-color: #f93;" +
-            "}" +
-            "node.pickupInRoute {" +
-            "	fill-color: #6CC644;" +
-            " 	stroke-mode: plain;" +
-            "	stroke-color: #333;" +
-            "   stroke-width: 2.0;" +
-            "}" +
-            "node.deliveryInRoute {" +
-            " 	fill-color: #f93;" +
-            " 	stroke-mode: plain;" +
-            "	stroke-color: #333;" +
-            "   stroke-width: 2.0;" +
-            "}" +
-            "node.depot {" +
-            " 	fill-color: #BD2C00;" +
-            "	size: 10px, 10px;" +
-            " 	shape: box;" +
-            "}" +
-            "node.removed {" +
-            " 	fill-color: #BD2C00;" +
-            "	size: 10px, 10px;" +
-            " 	stroke-mode: plain;" +
-            "	stroke-color: #333;" +
-            "   stroke-width: 2.0;" +
-            "}" +
-
-            "edge {" +
-            "	fill-color: #333;" +
-            "	arrow-size: 6px,3px;" +
-            "}" +
-            "edge.shipment {" +
-            "	fill-color: #999;" +
-            "	arrow-size: 6px,3px;" +
-            "}";
-
-    public static enum Label {
+    public enum Label {
         NO_LABEL, ID, JOB_NAME, ARRIVAL_TIME, DEPARTURE_TIME, ACTIVITY
     }
 
@@ -244,7 +191,7 @@ public static ViewPanel createEmbeddedView(Graph graph, double scaling) {
         final double x;
         final double y;
 
-        public Center(double x, double y) {
+        Center(double x, double y) {
             super();
             this.x = x;
             this.y = y;
@@ -319,13 +266,9 @@ public GraphStreamViewer setCameraView(double centerX, double centerY, double zo
 
     public void display() {
         System.setProperty("org.graphstream.ui.renderer", "org.graphstream.ui.j2dviewer.J2DGraphRenderer");
-
-        Graph g = createMultiGraph("g");
-
+        Graph g = createMultiGraph();
         ViewPanel view = createEmbeddedView(g, scaling);
-
         createJFrame(view, scaling);
-
         render(g, view);
     }
 
@@ -369,8 +312,58 @@ private JFrame createJFrame(ViewPanel view, double scaling) {
         return jframe;
     }
 
-    private Graph createMultiGraph(String name) {
-        return GraphStreamViewer.createMultiGraph(name, STYLESHEET);
+    private Graph createMultiGraph() {
+        String STYLESHEET = "node {" +
+            "	size: 10px, 10px;" +
+            "   fill-color: #6CC644;" +
+            "	text-alignment: at-right;" +
+            " 	stroke-mode: plain;" +
+            "	stroke-color: #999;" +
+            "	stroke-width: 1.0;" +
+            "	text-font: couriernew;" +
+            " 	text-offset: 2,-5;" +
+            "	text-size: 8;" +
+            "}" +
+            "node.pickup {" +
+            " 	fill-color: #6CC644;" +
+            "}" +
+            "node.delivery {" +
+            " 	fill-color: #f93;" +
+            "}" +
+            "node.pickupInRoute {" +
+            "	fill-color: #6CC644;" +
+            " 	stroke-mode: plain;" +
+            "	stroke-color: #333;" +
+            "   stroke-width: 2.0;" +
+            "}" +
+            "node.deliveryInRoute {" +
+            " 	fill-color: #f93;" +
+            " 	stroke-mode: plain;" +
+            "	stroke-color: #333;" +
+            "   stroke-width: 2.0;" +
+            "}" +
+            "node.depot {" +
+            " 	fill-color: #BD2C00;" +
+            "	size: 10px, 10px;" +
+            " 	shape: box;" +
+            "}" +
+            "node.removed {" +
+            " 	fill-color: #BD2C00;" +
+            "	size: 10px, 10px;" +
+            " 	stroke-mode: plain;" +
+            "	stroke-color: #333;" +
+            "   stroke-width: 2.0;" +
+            "}" +
+
+            "edge {" +
+            "	fill-color: #333;" +
+            "	arrow-size: 6px,3px;" +
+            "}" +
+            "edge.shipment {" +
+            "	fill-color: #999;" +
+            "	arrow-size: 6px,3px;" +
+            "}";
+        return GraphStreamViewer.createMultiGraph("g", STYLESHEET);
     }
 
     private void render(Graph g, ViewPanel view) {
@@ -385,11 +378,7 @@ private void render(Graph g, ViewPanel view) {
         }
 
         for (Job j : vrp.getJobs().values()) {
-            if (j instanceof Service) {
-                renderService(g, (Service) j, label);
-            } else if (j instanceof Shipment) {
-                renderShipment(g, (Shipment) j, label, renderShipments);
-            }
+            renderJob(g, j, label);
             sleep(renderDelay_in_ms);
         }
 
@@ -404,6 +393,7 @@ private void render(Graph g, ViewPanel view) {
 
     }
 
+
     private void alignCamera(View view) {
         view.getCamera().setViewCenter(center.x, center.y, 0);
         view.getCamera().setViewPercent(zoomFactor);
@@ -501,26 +491,22 @@ private Double getSolutionCosts() {
         return 0.0;
     }
 
-    private void renderShipment(Graph g, Shipment shipment, Label label, boolean renderShipments) {
-
-        Node n1 = g.addNode(makeId(shipment.getId(), shipment.getPickupLocation().getId()));
-        if (label.equals(Label.ID)) n1.addAttribute("ui.label", shipment.getId());
-        n1.addAttribute("x", shipment.getPickupLocation().getCoordinate().getX());
-        n1.addAttribute("y", shipment.getPickupLocation().getCoordinate().getY());
-        n1.setAttribute("ui.class", "pickup");
-
-        Node n2 = g.addNode(makeId(shipment.getId(), shipment.getDeliveryLocation().getId()));
-        if (label.equals(Label.ID)) n2.addAttribute("ui.label", shipment.getId());
-        n2.addAttribute("x", shipment.getDeliveryLocation().getCoordinate().getX());
-        n2.addAttribute("y", shipment.getDeliveryLocation().getCoordinate().getY());
-        n2.setAttribute("ui.class", "delivery");
-
-        if (renderShipments) {
-            Edge s = g.addEdge(shipment.getId(), makeId(shipment.getId(), shipment.getPickupLocation().getId()),
-                makeId(shipment.getId(), shipment.getDeliveryLocation().getId()), true);
-            s.addAttribute("ui.class", "shipment");
+    private void renderJob(Graph g, Job j, Label label) {
+        String lastNodeId = null;
+        for (Activity act : j.getActivities()) {
+            String nodeId = makeId(j.getId(), act.getLocation().getId());
+            Node n1 = g.addNode(nodeId);
+            if (label.equals(Label.ID)) n1.addAttribute("ui.label", j.getId());
+            n1.addAttribute("x", act.getLocation().getCoordinate().getX());
+            n1.addAttribute("y", act.getLocation().getCoordinate().getY());
+            if (act.getActivityType().equals(Activity.Type.PICKUP)) n1.setAttribute("ui.class", "pickup");
+            else if (act.getActivityType().equals(Activity.Type.DELIVERY)) n1.setAttribute("ui.class", "delivery");
+            if (renderShipments && lastNodeId != null) {
+                Edge s = g.addEdge(j.getId(), lastNodeId, nodeId, true);
+                s.addAttribute("ui.class", "shipment");
+            }
+            lastNodeId = nodeId;
         }
-
     }
 
     private void sleep(long renderDelay_in_ms2) {
@@ -532,15 +518,6 @@ private void sleep(long renderDelay_in_ms2) {
         }
     }
 
-    private void renderService(Graph g, Service service, Label label) {
-        Node n = g.addNode(makeId(service.getId(), service.getLocation().getId()));
-        if (label.equals(Label.ID)) n.addAttribute("ui.label", service.getId());
-        n.addAttribute("x", service.getLocation().getCoordinate().getX());
-        n.addAttribute("y", service.getLocation().getCoordinate().getY());
-        if (service.getType().equals("pickup")) n.setAttribute("ui.class", "pickup");
-        if (service.getType().equals("delivery")) n.setAttribute("ui.class", "delivery");
-    }
-
     private String makeId(String id, String locationId) {
         return id + "_" + locationId;
     }
@@ -572,28 +549,36 @@ private void renderRoute(Graph g, VehicleRoute route, int routeId, long renderDe
             n.addAttribute("ui.label", "start");
         }
         for (TourActivity act : route.getActivities()) {
-            Job job = ((JobActivity) act).getJob();
-            String currIdentifier = makeId(job.getId(), act.getLocation().getId());
-            if (label.equals(Label.ACTIVITY)) {
-                Node actNode = g.getNode(currIdentifier);
-                actNode.addAttribute("ui.label", act.getName());
-            } else if (label.equals(Label.JOB_NAME)) {
-                Node actNode = g.getNode(currIdentifier);
-                actNode.addAttribute("ui.label", job.getName());
-            } else if (label.equals(Label.ARRIVAL_TIME)) {
+            if (act instanceof  JobActivity) {
+                Job job = ((JobActivity) act).getJob();
+                String currIdentifier = makeId(job.getId(), act.getLocation().getId());
                 Node actNode = g.getNode(currIdentifier);
-                actNode.addAttribute("ui.label", Time.parseSecondsToTime(act.getArrTime()));
-            } else if (label.equals(Label.DEPARTURE_TIME)) {
-                Node actNode = g.getNode(currIdentifier);
-                actNode.addAttribute("ui.label", Time.parseSecondsToTime(act.getEndTime()));
+                switch (label) {
+                    case ACTIVITY: {
+                        actNode.addAttribute("ui.label", act.getName());
+                        break;
+                    }
+                    case JOB_NAME: {
+                        actNode.addAttribute("ui.label", job.getName());
+                        break;
+                    }
+                    case ARRIVAL_TIME: {
+                        actNode.addAttribute("ui.label", Time.parseSecondsToTime(act.getArrTime()));
+                        break;
+                    }
+                    case DEPARTURE_TIME: {
+                        actNode.addAttribute("ui.label", Time.parseSecondsToTime(act.getEndTime()));
+                        break;
+                    }
+                }
+                g.addEdge(makeEdgeId(routeId, vehicle_edgeId), prevIdentifier, currIdentifier, true);
+                if (act instanceof PickupActivity) g.getNode(currIdentifier).addAttribute("ui.class", "pickupInRoute");
+                else if (act instanceof DeliveryActivity)
+                    g.getNode(currIdentifier).addAttribute("ui.class", "deliveryInRoute");
+                prevIdentifier = currIdentifier;
+                vehicle_edgeId++;
+                sleep(renderDelay_in_ms);
             }
-            g.addEdge(makeEdgeId(routeId, vehicle_edgeId), prevIdentifier, currIdentifier, true);
-            if (act instanceof PickupActivity) g.getNode(currIdentifier).addAttribute("ui.class", "pickupInRoute");
-            else if (act instanceof DeliveryActivity)
-                g.getNode(currIdentifier).addAttribute("ui.class", "deliveryInRoute");
-            prevIdentifier = currIdentifier;
-            vehicle_edgeId++;
-            sleep(renderDelay_in_ms);
         }
         if (route.getVehicle().isReturnToDepot()) {
             String lastIdentifier = makeId(route.getVehicle().getId(), route.getVehicle().getEndLocation().getId());
@@ -605,7 +590,4 @@ private String makeEdgeId(int routeId, int vehicle_edgeId) {
         return Integer.valueOf(routeId).toString() + "." + Integer.valueOf(vehicle_edgeId).toString();
     }
 
-    //	public void saveAsPNG(String filename){
-    //
-    //	}
 }
diff --git a/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/Plotter.java b/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/Plotter.java
index 2a56fe51a..951b8faf9 100644
--- a/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/Plotter.java
+++ b/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/Plotter.java
@@ -19,7 +19,7 @@
 
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.job.*;
+import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
@@ -81,7 +81,7 @@
 
         private Set<XYDataItem> firstActivities;
 
-        public MyActivityRenderer(XYSeriesCollection seriesCollection, Map<XYDataItem, Activity> activities, Set<XYDataItem> firstActivities) {
+        MyActivityRenderer(XYSeriesCollection seriesCollection, Map<XYDataItem, Activity> activities, Set<XYDataItem> firstActivities) {
             super(false, true);
             this.seriesCollection = seriesCollection;
             this.activities = activities;
@@ -128,7 +128,7 @@ public Paint getItemPaint(int seriesIndex, int itemIndex) {
         double maxX;
         double maxY;
 
-        public BoundingBox(double minX, double minY, double maxX, double maxY) {
+        BoundingBox(double minX, double minY, double maxX, double maxY) {
             super();
             this.minX = minX;
             this.minY = minY;
@@ -150,7 +150,7 @@ public BoundingBox(double minX, double minY, double maxX, double maxY) {
      *
      * @author schroeder
      */
-    public static enum Label {
+    public enum Label {
         ID, SIZE, @SuppressWarnings("UnusedDeclaration")NO_LABEL
     }
 
@@ -166,13 +166,13 @@ public BoundingBox(double minX, double minY, double maxX, double maxY) {
 
     private BoundingBox boundingBox = null;
 
-    private Map<XYDataItem, Activity> activitiesByDataItem = new HashMap<XYDataItem, Plotter.Activity>();
+    private Map<XYDataItem, Activity> activitiesByDataItem = new HashMap<>();
 
-    private Map<XYDataItem, String> labelsByDataItem = new HashMap<XYDataItem, String>();
+    private Map<XYDataItem, String> labelsByDataItem = new HashMap<>();
 
     private XYSeries activities;
 
-    private Set<XYDataItem> firstActivities = new HashSet<XYDataItem>();
+    private Set<XYDataItem> firstActivities = new HashSet<>();
 
     private boolean containsPickupAct = false;
 
@@ -249,7 +249,7 @@ public Plotter invertCoordinates(boolean invert) {
      * @param minY lower left y
      * @param maxX upper right x
      * @param maxY upper right y
-     * @return
+     * @return Plotter
      */
     @SuppressWarnings("UnusedDeclaration")
     public Plotter setBoundingBox(double minX, double minY, double maxX, double maxY) {
@@ -335,27 +335,15 @@ private LegendTitle createLegend(final Collection<VehicleRoute> routes, final XY
             @Override
             public LegendItemCollection getLegendItems() {
                 LegendItemCollection lic = new LegendItemCollection();
-                LegendItem vehLoc = new LegendItem("vehLoc", Color.RED);
-                vehLoc.setShape(ELLIPSE);
-                vehLoc.setShapeVisible(true);
-                lic.add(vehLoc);
+                addLegendItem(lic, "vehLoc", Color.RED);
                 if (containsServiceAct) {
-                    LegendItem item = new LegendItem("service", Color.BLUE);
-                    item.setShape(ELLIPSE);
-                    item.setShapeVisible(true);
-                    lic.add(item);
+                    addLegendItem(lic, "service", Color.BLUE);
                 }
                 if (containsPickupAct) {
-                    LegendItem item = new LegendItem("pickup", Color.GREEN);
-                    item.setShape(ELLIPSE);
-                    item.setShapeVisible(true);
-                    lic.add(item);
+                    addLegendItem(lic, "pickup", Color.GREEN);
                 }
                 if (containsDeliveryAct) {
-                    LegendItem item = new LegendItem("delivery", Color.BLUE);
-                    item.setShape(ELLIPSE);
-                    item.setShapeVisible(true);
-                    lic.add(item);
+                    addLegendItem(lic, "delivery", Color.BLUE);
                 }
                 if (routes != null) {
                     LegendItem item = new LegendItem("firstActivity", Color.BLACK);
@@ -377,6 +365,13 @@ public LegendItemCollection getLegendItems() {
                 }
                 return lic;
             }
+
+            private void addLegendItem(LegendItemCollection lic, String jobType, Color color) {
+                LegendItem item = new LegendItem(jobType, color);
+                item.setShape(ELLIPSE);
+                item.setShapeVisible(true);
+                lic.add(item);
+            }
         };
 
         LegendTitle legend = new LegendTitle(lis);
@@ -481,7 +476,7 @@ private void save(JFreeChart chart, String pngFile) {
         }
     }
 
-    private XYSeriesCollection makeSolutionSeries(VehicleRoutingProblem vrp, Collection<VehicleRoute> routes) throws NoLocationFoundException {
+    private XYSeriesCollection makeSolutionSeries(VehicleRoutingProblem vrp, Collection<VehicleRoute> routes) {
         Map<String, Coordinate> coords = makeMap(vrp.getAllLocations());
         XYSeriesCollection coll = new XYSeriesCollection();
         int counter = 1;
@@ -507,22 +502,20 @@ private XYSeriesCollection makeSolutionSeries(VehicleRoutingProblem vrp, Collect
     }
 
     private Map<String, Coordinate> makeMap(Collection<Location> allLocations) {
-        Map<String, Coordinate> coords = new HashMap<String, Coordinate>();
+        Map<String, Coordinate> coords = new HashMap<>();
         for (Location l : allLocations) coords.put(l.getId(), l.getCoordinate());
         return coords;
     }
 
-    private XYSeriesCollection makeShipmentSeries(Collection<Job> jobs) throws NoLocationFoundException {
+    private XYSeriesCollection makeShipmentSeries(Collection<Job> jobs) {
         XYSeriesCollection coll = new XYSeriesCollection();
         if (!plotShipments) return coll;
         int sCounter = 1;
         String ship = "shipment";
         boolean first = true;
         for (Job job : jobs) {
-            if (!(job instanceof Shipment)) {
-                continue;
-            }
-            Shipment shipment = (Shipment) job;
+            if (job.getActivities().size() == 1) continue;
+//            Shipment shipment = (Shipment) job;
             XYSeries shipmentSeries;
             if (first) {
                 first = false;
@@ -531,57 +524,34 @@ private XYSeriesCollection makeShipmentSeries(Collection<Job> jobs) throws NoLoc
                 shipmentSeries = new XYSeries(sCounter, false, true);
                 sCounter++;
             }
-            Coordinate pickupCoordinate = getCoordinate(shipment.getPickupLocation().getCoordinate());
-            Coordinate delCoordinate = getCoordinate(shipment.getDeliveryLocation().getCoordinate());
-            shipmentSeries.add(pickupCoordinate.getX() * scalingFactor, pickupCoordinate.getY() * scalingFactor);
-            shipmentSeries.add(delCoordinate.getX() * scalingFactor, delCoordinate.getY() * scalingFactor);
+            for (com.graphhopper.jsprit.core.problem.job.Activity act : job.getActivities()) {
+                Coordinate actCoordinate = getCoordinate(act.getLocation().getCoordinate());
+                shipmentSeries.add(actCoordinate.getX() * scalingFactor, actCoordinate.getY() * scalingFactor);
+            }
             coll.addSeries(shipmentSeries);
         }
         return coll;
     }
 
     private void addJob(XYSeries activities, Job job) {
-        if (job instanceof Shipment) {
-            Shipment s = (Shipment) job;
-            Coordinate pickupCoordinate = getCoordinate(s.getPickupLocation().getCoordinate());
-            XYDataItem dataItem = new XYDataItem(pickupCoordinate.getX() * scalingFactor, pickupCoordinate.getY() * scalingFactor);
-            activities.add(dataItem);
-            addLabel(s, dataItem);
-            markItem(dataItem, Activity.PICKUP);
-            containsPickupAct = true;
-
-            Coordinate deliveryCoordinate = getCoordinate(s.getDeliveryLocation().getCoordinate());
-            XYDataItem dataItem2 = new XYDataItem(deliveryCoordinate.getX() * scalingFactor, deliveryCoordinate.getY() * scalingFactor);
-            activities.add(dataItem2);
-            addLabel(s, dataItem2);
-            markItem(dataItem2, Activity.DELIVERY);
-            containsDeliveryAct = true;
-        } else if (job instanceof Pickup) {
-            Pickup service = (Pickup) job;
-            Coordinate coord = getCoordinate(service.getLocation().getCoordinate());
-            XYDataItem dataItem = new XYDataItem(coord.getX() * scalingFactor, coord.getY() * scalingFactor);
-            activities.add(dataItem);
-            addLabel(service, dataItem);
-            markItem(dataItem, Activity.PICKUP);
-            containsPickupAct = true;
-        } else if (job instanceof Delivery) {
-            Delivery service = (Delivery) job;
-            Coordinate coord = getCoordinate(service.getLocation().getCoordinate());
-            XYDataItem dataItem = new XYDataItem(coord.getX() * scalingFactor, coord.getY() * scalingFactor);
+        for (com.graphhopper.jsprit.core.problem.job.Activity act : job.getActivities()) {
+            XYDataItem dataItem = new XYDataItem(getCoordinate(act.getLocation().getCoordinate()).getX() * scalingFactor, getCoordinate(act.getLocation().getCoordinate()).getY() * scalingFactor);
             activities.add(dataItem);
-            addLabel(service, dataItem);
-            markItem(dataItem, Activity.DELIVERY);
-            containsDeliveryAct = true;
-        } else if (job instanceof Service) {
-            Service service = (Service) job;
-            Coordinate coord = getCoordinate(service.getLocation().getCoordinate());
-            XYDataItem dataItem = new XYDataItem(coord.getX() * scalingFactor, coord.getY() * scalingFactor);
-            activities.add(dataItem);
-            addLabel(service, dataItem);
-            markItem(dataItem, Activity.SERVICE);
-            containsServiceAct = true;
-        } else {
-            throw new IllegalStateException("job instanceof " + job.getClass().toString() + ". this is not supported.");
+            addLabel(job, dataItem);
+            switch (act.getActivityType()) {
+                case PICKUP:
+                    markItem(dataItem, Activity.PICKUP);
+                    containsPickupAct = true;
+                    break;
+                case DELIVERY:
+                    markItem(dataItem, Activity.DELIVERY);
+                    containsDeliveryAct = true;
+                    break;
+                case SERVICE:
+                    markItem(dataItem, Activity.SERVICE);
+                    containsServiceAct = true;
+                    break;
+            }
         }
     }
 
@@ -599,11 +569,11 @@ private String getSizeString(Job job) {
         boolean firstDim = true;
         for (int i = 0; i < job.getSize().getNuOfDimensions(); i++) {
             if (firstDim) {
-                builder.append(String.valueOf(job.getSize().get(i)));
+                builder.append(job.getSize().get(i));
                 firstDim = false;
             } else {
                 builder.append(",");
-                builder.append(String.valueOf(job.getSize().get(i)));
+                builder.append(job.getSize().get(i));
             }
         }
         builder.append(")");
@@ -620,16 +590,16 @@ private Coordinate getCoordinate(Coordinate coordinate) {
     private void retrieveActivities(VehicleRoutingProblem vrp) throws NoLocationFoundException {
         activities = new XYSeries("activities", false, true);
         for (Vehicle v : vrp.getVehicles()) {
-            Coordinate start_coordinate = getCoordinate(v.getStartLocation().getCoordinate());
-            if (start_coordinate == null) throw new NoLocationFoundException();
-            XYDataItem item = new XYDataItem(start_coordinate.getX() * scalingFactor, start_coordinate.getY() * scalingFactor);
+            Coordinate startCoordinate = getCoordinate(v.getStartLocation().getCoordinate());
+            if (startCoordinate == null) throw new NoLocationFoundException();
+            XYDataItem item = new XYDataItem(startCoordinate.getX() * scalingFactor, startCoordinate.getY() * scalingFactor);
             markItem(item, Activity.START);
             activities.add(item);
 
             if (!v.getStartLocation().getId().equals(v.getEndLocation().getId())) {
-                Coordinate end_coordinate = getCoordinate(v.getEndLocation().getCoordinate());
-                if (end_coordinate == null) throw new NoLocationFoundException();
-                XYDataItem end_item = new XYDataItem(end_coordinate.getX() * scalingFactor, end_coordinate.getY() * scalingFactor);
+                Coordinate endCoordinate = getCoordinate(v.getEndLocation().getCoordinate());
+                if (endCoordinate == null) throw new NoLocationFoundException();
+                XYDataItem end_item = new XYDataItem(endCoordinate.getX() * scalingFactor, endCoordinate.getY() * scalingFactor);
                 markItem(end_item, Activity.END);
                 activities.add(end_item);
             }
diff --git a/jsprit-core/pom.xml b/jsprit-core/pom.xml
index d925760b1..a1f893e75 100644
--- a/jsprit-core/pom.xml
+++ b/jsprit-core/pom.xml
@@ -21,7 +21,7 @@
     <parent>
         <groupId>com.graphhopper</groupId>
         <artifactId>jsprit</artifactId>
-        <version>1.7.3-SNAPSHOT</version>
+        <version>1.8-SNAPSHOT</version>
     </parent>
     <modelVersion>4.0.0</modelVersion>
     <artifactId>jsprit-core</artifactId>
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/InsertionInitialSolutionFactory.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/InsertionInitialSolutionFactory.java
index 137ad3446..8fec35e43 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/InsertionInitialSolutionFactory.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/InsertionInitialSolutionFactory.java
@@ -51,7 +51,7 @@ public InsertionInitialSolutionFactory(InsertionStrategy insertionStrategy, Solu
     @Override
     public VehicleRoutingProblemSolution createSolution(final VehicleRoutingProblem vrp) {
         logger.info("create initial solution");
-        List<VehicleRoute> vehicleRoutes = new ArrayList<VehicleRoute>();
+        List<VehicleRoute> vehicleRoutes = new ArrayList<>();
         vehicleRoutes.addAll(vrp.getInitialVehicleRoutes());
         Collection<Job> badJobs = insertion.insertJobs(vehicleRoutes, getUnassignedJobs(vrp));
         VehicleRoutingProblemSolution solution = new VehicleRoutingProblemSolution(vehicleRoutes, badJobs, Double.MAX_VALUE);
@@ -61,11 +61,7 @@ public VehicleRoutingProblemSolution createSolution(final VehicleRoutingProblem
     }
 
     private List<Job> getUnassignedJobs(VehicleRoutingProblem vrp) {
-        ArrayList<Job> jobs = new ArrayList<Job>(vrp.getJobs().values());
-//        for (Vehicle v : vrp.getVehicles()) {
-//            if (v.getBreak() != null) jobs.add(v.getBreak());
-//        }
-        return jobs;
+        return new ArrayList<>(vrp.getJobs().values());
     }
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/PrettyAlgorithmBuilder.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/PrettyAlgorithmBuilder.java
index 7d6c4e170..d439f6806 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/PrettyAlgorithmBuilder.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/PrettyAlgorithmBuilder.java
@@ -23,19 +23,13 @@
 import com.graphhopper.jsprit.core.algorithm.listener.AlgorithmStartsListener;
 import com.graphhopper.jsprit.core.algorithm.recreate.InsertionStrategy;
 import com.graphhopper.jsprit.core.algorithm.recreate.VehicleSwitched;
-import com.graphhopper.jsprit.core.algorithm.state.*;
+import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
-import com.graphhopper.jsprit.core.problem.constraint.SwitchNotFeasible;
 import com.graphhopper.jsprit.core.problem.solution.SolutionCostCalculator;
-import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
-import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleFleetManager;
-import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeKey;
-import com.graphhopper.jsprit.core.util.ActivityTimeTracker;
 
-import java.util.*;
+import java.util.Random;
 
 /**
  * Created by schroeder on 10.12.14.
@@ -109,12 +103,9 @@ public VehicleRoutingAlgorithm build() {
                 iniInsertionStrategy.addListener(vehicleSwitched);
             if (!iniInsertionStrategy.getListeners().contains(stateManager))
                 iniInsertionStrategy.addListener(stateManager);
-            vra.addListener(new AlgorithmStartsListener() {
-                @Override
-                public void informAlgorithmStarts(VehicleRoutingProblem problem, VehicleRoutingAlgorithm algorithm, Collection<VehicleRoutingProblemSolution> solutions) {
-                    if (solutions.isEmpty()) {
-                        solutions.add(new InsertionInitialSolutionFactory(iniInsertionStrategy, iniObjFunction).createSolution(vrp));
-                    }
+            vra.addListener((AlgorithmStartsListener) (problem, algorithm, solutions) -> {
+                if (solutions.isEmpty()) {
+                    solutions.add(new InsertionInitialSolutionFactory(iniInsertionStrategy, iniObjFunction).createSolution(vrp));
                 }
             });
         }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/RemoveEmptyVehicles.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/RemoveEmptyVehicles.java
index 702affd5f..705a0300d 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/RemoveEmptyVehicles.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/RemoveEmptyVehicles.java
@@ -18,6 +18,7 @@
 package com.graphhopper.jsprit.core.algorithm;
 
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionEndsListener;
+import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleFleetManager;
 
@@ -41,8 +42,8 @@ public String toString() {
     }
 
     @Override
-    public void informInsertionEnds(Collection<VehicleRoute> vehicleRoutes) {
-        List<VehicleRoute> routes = new ArrayList<VehicleRoute>(vehicleRoutes);
+    public void informInsertionEnds(Collection<VehicleRoute> vehicleRoutes, Collection<Job> badJobs) {
+        List<VehicleRoute> routes = new ArrayList<>(vehicleRoutes);
         for (VehicleRoute route : routes) {
             if (route.isEmpty()) {
                 fleetManager.unlock(route.getVehicle());
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/VehicleRoutingAlgorithm.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/VehicleRoutingAlgorithm.java
index 1155955bd..d8a66285c 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/VehicleRoutingAlgorithm.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/VehicleRoutingAlgorithm.java
@@ -115,7 +115,7 @@ public VehicleRoutingAlgorithm(VehicleRoutingProblem problem, SearchStrategyMana
         super();
         this.problem = problem;
         this.searchStrategyManager = searchStrategyManager;
-        initialSolutions = new ArrayList<VehicleRoutingProblemSolution>();
+        initialSolutions = new ArrayList<>();
         objectiveFunction = null;
     }
 
@@ -131,27 +131,32 @@ public VehicleRoutingAlgorithm(VehicleRoutingProblem problem, SearchStrategyMana
         super();
         this.problem = problem;
         this.searchStrategyManager = searchStrategyManager;
-        initialSolutions = new ArrayList<VehicleRoutingProblemSolution>();
+        initialSolutions = new ArrayList<>();
         this.objectiveFunction = objectiveFunction;
     }
 
-    /**
-     * Adds solution to the collection of initial solutions.
-     *
-     * @param solution the solution to be added
-     */
-    public void addInitialSolution(VehicleRoutingProblemSolution solution) {
+  /**
+   * Adds solution to the collection of initial solutions.
+   *
+   * This method may lead to errors if tour activities in the solution are different to the
+   * ones in the VRP (including differences in indexing)
+   *
+   * @param solution the solution to be added
+   */
+  public void addInitialSolution(VehicleRoutingProblemSolution solution) {
         // We will make changes so let's make a copy
         solution = VehicleRoutingProblemSolution.copyOf(solution);
-        verify(solution);
+        verifyAndAdaptSolution(solution);
         initialSolutions.add(solution);
     }
 
-    private void verify(VehicleRoutingProblemSolution solution) {
-        Set<Job> allJobs = new HashSet<Job>(problem.getJobs().values());
-        allJobs.removeAll(solution.getUnassignedJobs());
+    //this method may lead to errors if tour activities in the solution are different to the ones in the VRP
+    //(including differences in indexing)
+    private void verifyAndAdaptSolution(VehicleRoutingProblemSolution solution) {
+        Set<Job> jobsNotInSolution = new HashSet<>(problem.getJobs().values());
+        jobsNotInSolution.removeAll(solution.getUnassignedJobs());
         for (VehicleRoute route : solution.getRoutes()) {
-            allJobs.removeAll(route.getTourActivities().getJobs());
+            jobsNotInSolution.removeAll(route.getTourActivities().getJobs());
             if (route.getVehicle().getIndex() == 0)
                 throw new IllegalStateException("vehicle used in initial solution has no index. probably a vehicle is used that has not been added to the " +
                     " the VehicleRoutingProblem. only use vehicles that have already been added to the problem.");
@@ -164,7 +169,9 @@ private void verify(VehicleRoutingProblemSolution solution) {
             }
         }
 
-        solution.getUnassignedJobs().addAll(allJobs);
+        //if solution is partial (not all jobs are considered), add these jobs to solution.unassignedJobs
+        solution.getUnassignedJobs().addAll(jobsNotInSolution);
+        //update the cost of solution (regardless if partial or not)
         solution.setCost(getObjectiveFunction().getCosts(solution));
 
         //        if (nuJobs != problem.getJobs().values().size()) {
@@ -218,7 +225,7 @@ public SearchStrategyManager getSearchStrategyManager() {
         double now = System.currentTimeMillis();
         int noIterationsThisAlgoIsRunning = maxIterations;
         counter.reset();
-        Collection<VehicleRoutingProblemSolution> solutions = new ArrayList<VehicleRoutingProblemSolution>(initialSolutions);
+        Collection<VehicleRoutingProblemSolution> solutions = new ArrayList<>(initialSolutions);
         algorithmStarts(problem, solutions);
         bestEver = Solutions.bestOf(solutions);
         if (logger.isTraceEnabled()) {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/box/Jsprit.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/box/Jsprit.java
index 7225cf1fe..513f27597 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/box/Jsprit.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/box/Jsprit.java
@@ -43,7 +43,6 @@
 import com.graphhopper.jsprit.core.problem.vehicle.FiniteFleetManagerFactory;
 import com.graphhopper.jsprit.core.problem.vehicle.InfiniteFleetManagerFactory;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleFleetManager;
-import com.graphhopper.jsprit.core.util.NoiseMaker;
 import com.graphhopper.jsprit.core.util.RandomNumberGeneration;
 import com.graphhopper.jsprit.core.util.Solutions;
 
@@ -353,11 +352,11 @@ public int createNumberToBeRemoved() {
 
     }
 
-    private StateManager stateManager = null;
+    private StateManager stateManager;
 
-    private ConstraintManager constraintManager = null;
+    private ConstraintManager constraintManager;
 
-    private ExecutorService es = null;
+    private ExecutorService es;
 
     private Integer noThreads;
 
@@ -365,7 +364,7 @@ public int createNumberToBeRemoved() {
 
     private boolean addCoreConstraints;
 
-    private SolutionCostCalculator objectiveFunction = null;
+    private SolutionCostCalculator objectiveFunction;
 
     private Properties properties;
 
@@ -406,7 +405,6 @@ private VehicleRoutingAlgorithm create(final VehicleRoutingProblem vrp) {
                 vehicleFleetManager = new InfiniteFleetManagerFactory(vrp.getVehicles()).createFleetManager();
             } else {
                 FiniteFleetManagerFactory finiteFleetManagerFactory = new FiniteFleetManagerFactory(vrp.getVehicles());
-                finiteFleetManagerFactory.setRandom(random);
                 vehicleFleetManager = finiteFleetManagerFactory.createFleetManager();
             }
         }
@@ -494,20 +492,12 @@ private VehicleRoutingAlgorithm create(final VehicleRoutingProblem vrp) {
                 toInteger(properties.getProperty(Parameter.WORST_MAX_SHARE.toString())),
                 random)
         );
-        IterationStartsListener noise = new IterationStartsListener() {
-            @Override
-            public void informIterationStarts(int i, VehicleRoutingProblem problem, Collection<VehicleRoutingProblemSolution> solutions) {
-                worst.setNoiseMaker(new NoiseMaker() {
-
-                    public double makeNoise() {
-                        if (random.nextDouble() < toDouble(getProperty(Parameter.RUIN_WORST_NOISE_PROB.toString()))) {
-                            return toDouble(getProperty(Parameter.RUIN_WORST_NOISE_LEVEL.toString()))
-                                * maxCosts * random.nextDouble();
-                        } else return 0.;
-                    }
-                });
-            }
-        };
+        IterationStartsListener noise = (i, problem, solutions) -> worst.setNoiseMaker(() -> {
+            if (random.nextDouble() < toDouble(getProperty(Parameter.RUIN_WORST_NOISE_PROB.toString()))) {
+                return toDouble(getProperty(Parameter.RUIN_WORST_NOISE_LEVEL.toString()))
+                    * maxCosts * random.nextDouble();
+            } else return 0.;
+        });
 
         final RuinClusters clusters = new RuinClusters(vrp, (int) (vrp.getJobs().values().size() * 0.5), jobNeighborhoods);
         clusters.setRandom(random);
@@ -613,13 +603,10 @@ public double makeNoise() {
             if (properties.containsKey(Parameter.THRESHOLD_INI_ABS.toString())) {
                 schrimpfAcceptance.setInitialThreshold(Double.valueOf(properties.getProperty(Parameter.THRESHOLD_INI_ABS.toString())));
             } else {
-                schrimpfThreshold = new IterationStartsListener() {
-                    @Override
-                    public void informIterationStarts(int i, VehicleRoutingProblem problem, Collection<VehicleRoutingProblemSolution> solutions) {
-                        if (i == 1) {
-                            double initialThreshold = Solutions.bestOf(solutions).getCost() * toDouble(getProperty(Parameter.THRESHOLD_INI.toString()));
-                            schrimpfAcceptance.setInitialThreshold(initialThreshold);
-                        }
+                schrimpfThreshold = (i, problem, solutions) -> {
+                    if (i == 1) {
+                        double initialThreshold = Solutions.bestOf(solutions).getCost() * toDouble(getProperty(Parameter.THRESHOLD_INI.toString()));
+                        schrimpfAcceptance.setInitialThreshold(initialThreshold);
                     }
                 };
             }
@@ -627,29 +614,29 @@ public void informIterationStarts(int i, VehicleRoutingProblem problem, Collecti
         }
 
         SolutionCostCalculator objectiveFunction = getObjectiveFunction(vrp, maxCosts);
-        SearchStrategy radial_regret = new SearchStrategy(Strategy.RADIAL_REGRET.toString(), new SelectBest(), acceptor, objectiveFunction);
-        radial_regret.addModule(configureModule(new RuinAndRecreateModule(Strategy.RADIAL_REGRET.toString(), regret, radial)));
+        SearchStrategy radialRegret = new SearchStrategy(Strategy.RADIAL_REGRET.toString(), new SelectBest(), acceptor, objectiveFunction);
+        radialRegret.addModule(configureModule(new RuinAndRecreateModule(Strategy.RADIAL_REGRET.toString(), regret, radial)));
 
-        SearchStrategy radial_best = new SearchStrategy(Strategy.RADIAL_BEST.toString(), new SelectBest(), acceptor, objectiveFunction);
-        radial_best.addModule(configureModule(new RuinAndRecreateModule(Strategy.RADIAL_BEST.toString(), best, radial)));
+        SearchStrategy radialBest = new SearchStrategy(Strategy.RADIAL_BEST.toString(), new SelectBest(), acceptor, objectiveFunction);
+        radialBest.addModule(configureModule(new RuinAndRecreateModule(Strategy.RADIAL_BEST.toString(), best, radial)));
 
-        SearchStrategy random_best = new SearchStrategy(Strategy.RANDOM_BEST.toString(), new SelectBest(), acceptor, objectiveFunction);
-        random_best.addModule(configureModule(new RuinAndRecreateModule(Strategy.RANDOM_BEST.toString(), best, random_for_best)));
+        SearchStrategy randomBest = new SearchStrategy(Strategy.RANDOM_BEST.toString(), new SelectBest(), acceptor, objectiveFunction);
+        randomBest.addModule(configureModule(new RuinAndRecreateModule(Strategy.RANDOM_BEST.toString(), best, random_for_best)));
 
-        SearchStrategy random_regret = new SearchStrategy(Strategy.RANDOM_REGRET.toString(), new SelectBest(), acceptor, objectiveFunction);
-        random_regret.addModule(configureModule(new RuinAndRecreateModule(Strategy.RANDOM_REGRET.toString(), regret, random_for_regret)));
+        SearchStrategy randomRegret = new SearchStrategy(Strategy.RANDOM_REGRET.toString(), new SelectBest(), acceptor, objectiveFunction);
+        randomRegret.addModule(configureModule(new RuinAndRecreateModule(Strategy.RANDOM_REGRET.toString(), regret, random_for_regret)));
 
-        SearchStrategy worst_regret = new SearchStrategy(Strategy.WORST_REGRET.toString(), new SelectBest(), acceptor, objectiveFunction);
-        worst_regret.addModule(configureModule(new RuinAndRecreateModule(Strategy.WORST_REGRET.toString(), regret, worst)));
+        SearchStrategy worstRegret = new SearchStrategy(Strategy.WORST_REGRET.toString(), new SelectBest(), acceptor, objectiveFunction);
+        worstRegret.addModule(configureModule(new RuinAndRecreateModule(Strategy.WORST_REGRET.toString(), regret, worst)));
 
-        SearchStrategy worst_best = new SearchStrategy(Strategy.WORST_BEST.toString(), new SelectBest(), acceptor, objectiveFunction);
-        worst_best.addModule(configureModule(new RuinAndRecreateModule(Strategy.WORST_BEST.toString(), best, worst)));
+        SearchStrategy worstBest = new SearchStrategy(Strategy.WORST_BEST.toString(), new SelectBest(), acceptor, objectiveFunction);
+        worstBest.addModule(configureModule(new RuinAndRecreateModule(Strategy.WORST_BEST.toString(), best, worst)));
 
-        final SearchStrategy clusters_regret = new SearchStrategy(Strategy.CLUSTER_REGRET.toString(), new SelectBest(), acceptor, objectiveFunction);
-        clusters_regret.addModule(configureModule(new RuinAndRecreateModule(Strategy.CLUSTER_REGRET.toString(), regret, clusters)));
+        final SearchStrategy clustersRegret = new SearchStrategy(Strategy.CLUSTER_REGRET.toString(), new SelectBest(), acceptor, objectiveFunction);
+        clustersRegret.addModule(configureModule(new RuinAndRecreateModule(Strategy.CLUSTER_REGRET.toString(), regret, clusters)));
 
-        final SearchStrategy clusters_best = new SearchStrategy(Strategy.CLUSTER_BEST.toString(), new SelectBest(), acceptor, objectiveFunction);
-        clusters_best.addModule(configureModule(new RuinAndRecreateModule(Strategy.CLUSTER_BEST.toString(), best, clusters)));
+        final SearchStrategy clustersBest = new SearchStrategy(Strategy.CLUSTER_BEST.toString(), new SelectBest(), acceptor, objectiveFunction);
+        clustersBest.addModule(configureModule(new RuinAndRecreateModule(Strategy.CLUSTER_BEST.toString(), best, clusters)));
 
         SearchStrategy stringRegret = new SearchStrategy(Strategy.STRING_REGRET.toString(), new SelectBest(), acceptor, objectiveFunction);
         stringRegret.addModule(configureModule(new RuinAndRecreateModule(Strategy.STRING_REGRET.toString(), regret, stringRuin)));
@@ -662,14 +649,14 @@ public void informIterationStarts(int i, VehicleRoutingProblem problem, Collecti
         if (addCoreConstraints) {
             prettyBuilder.addCoreStateAndConstraintStuff();
         }
-        prettyBuilder.withStrategy(radial_regret, toDouble(getProperty(Strategy.RADIAL_REGRET.toString())))
-            .withStrategy(radial_best, toDouble(getProperty(Strategy.RADIAL_BEST.toString())))
-            .withStrategy(random_best, toDouble(getProperty(Strategy.RANDOM_BEST.toString())))
-            .withStrategy(random_regret, toDouble(getProperty(Strategy.RANDOM_REGRET.toString())))
-            .withStrategy(worst_best, toDouble(getProperty(Strategy.WORST_BEST.toString())))
-            .withStrategy(worst_regret, toDouble(getProperty(Strategy.WORST_REGRET.toString())))
-            .withStrategy(clusters_regret, toDouble(getProperty(Strategy.CLUSTER_REGRET.toString())))
-            .withStrategy(clusters_best, toDouble(getProperty(Strategy.CLUSTER_BEST.toString())))
+        prettyBuilder.withStrategy(radialRegret, toDouble(getProperty(Strategy.RADIAL_REGRET.toString())))
+            .withStrategy(radialBest, toDouble(getProperty(Strategy.RADIAL_BEST.toString())))
+            .withStrategy(randomBest, toDouble(getProperty(Strategy.RANDOM_BEST.toString())))
+            .withStrategy(randomRegret, toDouble(getProperty(Strategy.RANDOM_REGRET.toString())))
+            .withStrategy(worstBest, toDouble(getProperty(Strategy.WORST_BEST.toString())))
+            .withStrategy(worstRegret, toDouble(getProperty(Strategy.WORST_REGRET.toString())))
+            .withStrategy(clustersRegret, toDouble(getProperty(Strategy.CLUSTER_REGRET.toString())))
+            .withStrategy(clustersBest, toDouble(getProperty(Strategy.CLUSTER_BEST.toString())))
             .withStrategy(stringBest, toDouble(getProperty(Strategy.STRING_BEST.toString())))
             .withStrategy(stringRegret, toDouble(getProperty(Strategy.STRING_REGRET.toString())));
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/AbstractInsertionCalculator.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/AbstractInsertionCalculator.java
index 6f3d54a44..fc82d6ad9 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/AbstractInsertionCalculator.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/AbstractInsertionCalculator.java
@@ -21,6 +21,7 @@
 import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
 import com.graphhopper.jsprit.core.problem.constraint.HardActivityConstraint;
 import com.graphhopper.jsprit.core.problem.constraint.HardActivityConstraint.ConstraintsStatus;
+import com.graphhopper.jsprit.core.problem.constraint.HardConstraint;
 import com.graphhopper.jsprit.core.problem.constraint.HardRouteConstraint;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
@@ -45,17 +46,17 @@ InsertionData checkRouteContraints(JobInsertionContext insertionContext, Constra
         return null;
     }
 
-    ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prevAct, TourActivity newAct, TourActivity nextAct, double prevActDepTime, Collection<String> failedActivityConstraints, ConstraintManager constraintManager) {
+    ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prevAct, TourActivity newAct, TourActivity nextAct, double prevActDepTime, Collection<HardConstraint> failedActivityConstraints, ConstraintManager constraintManager) {
         ConstraintsStatus notFulfilled = null;
-        List<String> failed = new ArrayList<>();
+        List<HardConstraint> failed = new ArrayList<>();
         for (HardActivityConstraint c : constraintManager.getCriticalHardActivityConstraints()) {
             ConstraintsStatus status = c.fulfilled(iFacts, prevAct, newAct, nextAct, prevActDepTime);
             if (status.equals(ConstraintsStatus.NOT_FULFILLED_BREAK)) {
-                failedActivityConstraints.add(c.getClass().getSimpleName());
+                failedActivityConstraints.add(c);
                 return status;
             } else {
                 if (status.equals(ConstraintsStatus.NOT_FULFILLED)) {
-                    failed.add(c.getClass().getSimpleName());
+                    failed.add(c);
                     notFulfilled = status;
                 }
             }
@@ -68,11 +69,11 @@ ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prevAct, To
         for (HardActivityConstraint c : constraintManager.getHighPrioHardActivityConstraints()) {
             ConstraintsStatus status = c.fulfilled(iFacts, prevAct, newAct, nextAct, prevActDepTime);
             if (status.equals(ConstraintsStatus.NOT_FULFILLED_BREAK)) {
-                failedActivityConstraints.add(c.getClass().getSimpleName());
+                failedActivityConstraints.add(c);
                 return status;
             } else {
                 if (status.equals(ConstraintsStatus.NOT_FULFILLED)) {
-                    failed.add(c.getClass().getSimpleName());
+                    failed.add(c);
                     notFulfilled = status;
                 }
             }
@@ -85,7 +86,7 @@ ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prevAct, To
         for (HardActivityConstraint constraint : constraintManager.getLowPrioHardActivityConstraints()) {
             ConstraintsStatus status = constraint.fulfilled(iFacts, prevAct, newAct, nextAct, prevActDepTime);
             if (status.equals(ConstraintsStatus.NOT_FULFILLED_BREAK) || status.equals(ConstraintsStatus.NOT_FULFILLED)) {
-                failedActivityConstraints.add(constraint.getClass().getSimpleName());
+                failedActivityConstraints.add(constraint);
                 return status;
             }
         }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/AbstractInsertionStrategy.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/AbstractInsertionStrategy.java
index 5f5973f5a..8bc5a0dfd 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/AbstractInsertionStrategy.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/AbstractInsertionStrategy.java
@@ -89,7 +89,7 @@ public void setRandom(Random random) {
     public Collection<Job> insertJobs(Collection<VehicleRoute> vehicleRoutes, Collection<Job> unassignedJobs) {
         insertionsListeners.informInsertionStarts(vehicleRoutes, unassignedJobs);
         Collection<Job> badJobs = insertUnassignedJobs(vehicleRoutes, unassignedJobs);
-        insertionsListeners.informInsertionEndsListeners(vehicleRoutes);
+        insertionsListeners.informInsertionEndsListeners(vehicleRoutes, badJobs);
         return badJobs;
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BreakScheduling.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BreakScheduling.java
index 66fbb182c..a64b81546 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BreakScheduling.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BreakScheduling.java
@@ -45,8 +45,6 @@
 
     private final EventListeners eventListeners;
 
-    private Set<VehicleRoute> modifiedRoutes = new HashSet<VehicleRoute>();
-
     public BreakScheduling(VehicleRoutingProblem vrp, StateManager stateManager, ConstraintManager constraintManager) {
         this.stateManager = stateManager;
         this.breakInsertionCalculator = new BreakInsertionCalculator(vrp.getTransportCosts(), vrp.getActivityCosts(), new LocalActivityInsertionCostsCalculator(vrp.getTransportCosts(), vrp.getActivityCosts(), stateManager), constraintManager, vrp.getJobActivityFactory());
@@ -78,7 +76,6 @@ public void informJobInserted(Job job2insert, VehicleRoute inRoute, double addit
 
     @Override
     public void ruinStarts(Collection<VehicleRoute> routes) {
-
     }
 
     @Override
@@ -88,7 +85,7 @@ public void ruinEnds(Collection<VehicleRoute> routes, Collection<Job> unassigned
             boolean removed = route.getTourActivities().removeJob(aBreak);
             if(removed) logger.trace("ruin: {}", aBreak.getId());
         }
-        List<Break> breaks = new ArrayList<Break>();
+        List<Break> breaks = new ArrayList<>();
         for (Job j : unassignedJobs) {
             if (j instanceof Break) {
                 breaks.add((Break) j);
@@ -99,7 +96,6 @@ public void ruinEnds(Collection<VehicleRoute> routes, Collection<Job> unassigned
 
     @Override
     public void removed(Job job, VehicleRoute fromRoute) {
-        if(fromRoute.getVehicle().getBreak() != null) modifiedRoutes.add(fromRoute);
     }
 
     @Override
@@ -119,6 +115,5 @@ public void informInsertionStarts(Collection<VehicleRoute> vehicleRoutes, Collec
                 }
             }
         }
-
     }
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/DefaultScorer.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/DefaultScorer.java
index 280de34d2..15ee59fce 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/DefaultScorer.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/DefaultScorer.java
@@ -20,9 +20,9 @@
 
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
+import com.graphhopper.jsprit.core.problem.job.Activity;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 
 /**
  * Created by schroeder on 15/10/15.
@@ -41,52 +41,40 @@ public DefaultScorer(VehicleRoutingProblem vrp) {
         this.vrp = vrp;
     }
 
-    public void setTimeWindowParam(double tw_param) {
-        this.timeWindowParam = tw_param;
+    public void setTimeWindowParam(double twParam) {
+        this.timeWindowParam = twParam;
     }
 
-    public void setDepotDistanceParam(double depotDistance_param) {
-        this.depotDistanceParam = depotDistance_param;
+    public void setDepotDistanceParam(double depotDistanceParam) {
+        this.depotDistanceParam = depotDistanceParam;
     }
 
     @Override
     public double score(InsertionData best, Job job) {
-        double score;
-        if (job instanceof Service) {
-            score = scoreService(best, job);
-        } else if (job instanceof Shipment) {
-            score = scoreShipment(best, job);
-        } else throw new IllegalStateException("not supported");
-        return score;
+        return scoreJob(best, job);
     }
 
-    private double scoreShipment(InsertionData best, Job job) {
-        Shipment shipment = (Shipment) job;
-        double maxDepotDistance_1 = Math.max(
-            getDistance(best.getSelectedVehicle().getStartLocation(), shipment.getPickupLocation()),
-            getDistance(best.getSelectedVehicle().getStartLocation(), shipment.getDeliveryLocation())
-        );
-        double maxDepotDistance_2 = Math.max(
-            getDistance(best.getSelectedVehicle().getEndLocation(), shipment.getPickupLocation()),
-            getDistance(best.getSelectedVehicle().getEndLocation(), shipment.getDeliveryLocation())
-        );
-        double maxDepotDistance = Math.max(maxDepotDistance_1, maxDepotDistance_2);
-        double minTimeToOperate = Math.min(shipment.getPickupTimeWindow().getEnd() - shipment.getPickupTimeWindow().getStart(),
-            shipment.getDeliveryTimeWindow().getEnd() - shipment.getDeliveryTimeWindow().getStart());
+    private double scoreJob(InsertionData best, Job job) {
+        Location startLocation = best.getSelectedVehicle().getStartLocation();
+        Location endLocation = best.getSelectedVehicle().getEndLocation();
+        double maxDepotDistance = 0;
+        double minTimeToOperate = Double.MAX_VALUE;
+        for (Activity act : job.getActivities()) {
+            maxDepotDistance = Math.max(maxDepotDistance, getDistance(startLocation, act.getLocation()));
+            maxDepotDistance = Math.max(maxDepotDistance, getDistance(endLocation, act.getLocation()));
+            TimeWindow tw = getLargestTimeWindow(act);
+            minTimeToOperate = Math.min(minTimeToOperate, tw.getEnd() - tw.getStart());
+        }
         return Math.max(timeWindowParam * minTimeToOperate, minTimeWindowScore) + depotDistanceParam * maxDepotDistance;
     }
 
-    private double scoreService(InsertionData best, Job job) {
-        Location location = ((Service) job).getLocation();
-        double maxDepotDistance = 0;
-        if (location != null) {
-            maxDepotDistance = Math.max(
-                getDistance(best.getSelectedVehicle().getStartLocation(), location),
-                getDistance(best.getSelectedVehicle().getEndLocation(), location)
-            );
+    private TimeWindow getLargestTimeWindow(Activity act) {
+        TimeWindow timeWindow = null;
+        for (TimeWindow tw : act.getTimeWindows()) {
+            if (timeWindow == null) timeWindow = tw;
+            else if (tw.larger(timeWindow)) timeWindow = tw;
         }
-        return Math.max(timeWindowParam * (((Service) job).getTimeWindow().getEnd() - ((Service) job).getTimeWindow().getStart()), minTimeWindowScore) +
-            depotDistanceParam * maxDepotDistance;
+        return TimeWindow.newInstance(0, Double.MAX_VALUE);
     }
 
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/InsertionDataUpdater.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/InsertionDataUpdater.java
index 8d019e2c2..c065084d7 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/InsertionDataUpdater.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/InsertionDataUpdater.java
@@ -62,12 +62,9 @@ static VehicleRoute findRoute(Collection<VehicleRoute> routes, Job job) {
     }
 
     static Comparator<VersionedInsertionData> getComparator(){
-        return new Comparator<VersionedInsertionData>() {
-            @Override
-            public int compare(VersionedInsertionData o1, VersionedInsertionData o2) {
-                if(o1.getiData().getInsertionCost() < o2.getiData().getInsertionCost()) return -1;
-                return 1;
-            }
+        return (o1, o2) -> {
+            if (o1.getiData().getInsertionCost() < o2.getiData().getInsertionCost()) return -1;
+            return 1;
         };
     }
 
@@ -161,7 +158,7 @@ else if(scoredJob.getScore() > bestScoredJob.getScore()){
         return bestScoredJob;
     }
 
-    static double score(Job unassignedJob, InsertionData best, InsertionData secondBest, ScoringFunction scoringFunction) {
+    private static double score(Job unassignedJob, InsertionData best, InsertionData secondBest, ScoringFunction scoringFunction) {
         return Scorer.score(unassignedJob,best,secondBest,scoringFunction);
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionConcurrent.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionConcurrent.java
index b71ac5ab7..e4d033768 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionConcurrent.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionConcurrent.java
@@ -29,7 +29,10 @@
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
-import java.util.concurrent.*;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.ExecutorCompletionService;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Future;
 
 /**
  * Insertion based on regret approach.
@@ -68,7 +71,7 @@ public RegretInsertionConcurrent(JobInsertionCostsCalculator jobInsertionCalcula
         this.scoringFunction = new DefaultScorer(vehicleRoutingProblem);
         this.insertionCostsCalculator = jobInsertionCalculator;
         this.vrp = vehicleRoutingProblem;
-        completionService = new ExecutorCompletionService<ScoredJob>(executorService);
+        completionService = new ExecutorCompletionService<>(executorService);
         logger.debug("initialise " + this);
     }
 
@@ -87,7 +90,7 @@ public String toString() {
      */
     @Override
     public Collection<Job> insertUnassignedJobs(Collection<VehicleRoute> routes, Collection<Job> unassignedJobs) {
-        List<Job> badJobs = new ArrayList<Job>(unassignedJobs.size());
+        List<Job> badJobs = new ArrayList<>(unassignedJobs.size());
 
         Iterator<Job> jobIterator = unassignedJobs.iterator();
         while (jobIterator.hasNext()){
@@ -135,14 +138,7 @@ private ScoredJob nextJob(final Collection<VehicleRoute> routes, List<Job> unass
         ScoredJob bestScoredJob = null;
 
         for (final Job unassignedJob : unassignedJobList) {
-            completionService.submit(new Callable<ScoredJob>() {
-
-                @Override
-                public ScoredJob call() throws Exception {
-                    return RegretInsertion.getScoredJob(routes, unassignedJob, insertionCostsCalculator, scoringFunction);
-                }
-
-            });
+            completionService.submit(() -> RegretInsertion.getScoredJob(routes, unassignedJob, insertionCostsCalculator, scoringFunction));
         }
 
         try {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionConcurrentFast.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionConcurrentFast.java
index be4f5d118..6dbfd14fb 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionConcurrentFast.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionConcurrentFast.java
@@ -93,7 +93,7 @@ public void setSwitchAllowed(boolean switchAllowed) {
     }
 
     private Set<String> getInitialVehicleIds(VehicleRoutingProblem vehicleRoutingProblem) {
-        Set<String> ids = new HashSet<String>();
+        Set<String> ids = new HashSet<>();
         for(VehicleRoute r : vehicleRoutingProblem.getInitialVehicleRoutes()){
             ids.add(r.getVehicle().getId());
         }
@@ -114,7 +114,7 @@ public void setDependencyTypes(DependencyType[] dependencyTypes){
      */
     @Override
     public Collection<Job> insertUnassignedJobs(Collection<VehicleRoute> routes, Collection<Job> unassignedJobs) {
-        List<Job> badJobs = new ArrayList<Job>(unassignedJobs.size());
+        List<Job> badJobs = new ArrayList<>(unassignedJobs.size());
 
         Iterator<Job> jobIterator = unassignedJobs.iterator();
         while (jobIterator.hasNext()){
@@ -136,12 +136,12 @@ public void setDependencyTypes(DependencyType[] dependencyTypes){
             }
         }
 
-        List<Job> jobs = new ArrayList<Job>(unassignedJobs);
+        List<Job> jobs = new ArrayList<>(unassignedJobs);
         TreeSet<VersionedInsertionData>[] priorityQueues = new TreeSet[vrp.getJobs().values().size() + 2];
         VehicleRoute lastModified = null;
         boolean firstRun = true;
         int updateRound = 0;
-        Map<VehicleRoute,Integer> updates = new HashMap<VehicleRoute, Integer>();
+        Map<VehicleRoute, Integer> updates = new HashMap<>();
         while (!jobs.isEmpty()) {
             List<Job> unassignedJobList = new ArrayList<>(jobs);
             List<ScoredJob> badJobList = new ArrayList<>();
@@ -170,7 +170,7 @@ public void setDependencyTypes(DependencyType[] dependencyTypes){
     }
 
     private void updateInsertionData(final TreeSet<VersionedInsertionData>[] priorityQueues, final Collection<VehicleRoute> routes, List<Job> unassignedJobList, final int updateRound, final boolean firstRun, final VehicleRoute lastModified, Map<VehicleRoute, Integer> updates) {
-        List<Callable<Boolean>> tasks = new ArrayList<Callable<Boolean>>();
+        List<Callable<Boolean>> tasks = new ArrayList<>();
         boolean updatedAllRoutes = false;
         for (final Job unassignedJob : unassignedJobList) {
             if(priorityQueues[unassignedJob.getIndex()] == null){
@@ -178,7 +178,7 @@ private void updateInsertionData(final TreeSet<VersionedInsertionData>[] priorit
             }
             if(firstRun) {
                 updatedAllRoutes = true;
-                makeCallables(tasks, updatedAllRoutes, priorityQueues[unassignedJob.getIndex()], updateRound, unassignedJob, routes, lastModified);
+                makeCallables(tasks, true, priorityQueues[unassignedJob.getIndex()], updateRound, unassignedJob, routes, lastModified);
             }
             else{
                 if(dependencyTypes == null || dependencyTypes[unassignedJob.getIndex()] == null){
@@ -188,7 +188,7 @@ private void updateInsertionData(final TreeSet<VersionedInsertionData>[] priorit
                     DependencyType dependencyType = dependencyTypes[unassignedJob.getIndex()];
                     if (dependencyType.equals(DependencyType.INTER_ROUTE) || dependencyType.equals(DependencyType.INTRA_ROUTE)) {
                         updatedAllRoutes = true;
-                        makeCallables(tasks, updatedAllRoutes, priorityQueues[unassignedJob.getIndex()], updateRound, unassignedJob, routes, lastModified);
+                        makeCallables(tasks, true, priorityQueues[unassignedJob.getIndex()], updateRound, unassignedJob, routes, lastModified);
                     } else {
                         makeCallables(tasks, updatedAllRoutes, priorityQueues[unassignedJob.getIndex()], updateRound, unassignedJob, routes, lastModified);
                     }
@@ -211,20 +211,10 @@ private void updateInsertionData(final TreeSet<VersionedInsertionData>[] priorit
 
     private void makeCallables(List<Callable<Boolean>> tasks, boolean updateAll, final TreeSet<VersionedInsertionData> priorityQueue, final int updateRound, final Job unassignedJob, final Collection<VehicleRoute> routes, final VehicleRoute lastModified) {
         if(updateAll) {
-            tasks.add(new Callable<Boolean>() {
-                @Override
-                public Boolean call() throws Exception {
-                    return InsertionDataUpdater.update(switchAllowed, initialVehicleIds, fleetManager, insertionCostsCalculator, priorityQueue, updateRound, unassignedJob, routes);
-                }
-            });
+            tasks.add(() -> InsertionDataUpdater.update(switchAllowed, initialVehicleIds, fleetManager, insertionCostsCalculator, priorityQueue, updateRound, unassignedJob, routes));
         }
         else {
-            tasks.add(new Callable<Boolean>() {
-                @Override
-                public Boolean call() throws Exception {
-                    return InsertionDataUpdater.update(switchAllowed, initialVehicleIds, fleetManager, insertionCostsCalculator, priorityQueue, updateRound, unassignedJob, Arrays.asList(lastModified));
-                }
-            });
+            tasks.add(() -> InsertionDataUpdater.update(switchAllowed, initialVehicleIds, fleetManager, insertionCostsCalculator, priorityQueue, updateRound, unassignedJob, Arrays.asList(lastModified)));
         }
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ServiceInsertionCalculator.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ServiceInsertionCalculator.java
index 6007decb6..7cdfc2483 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ServiceInsertionCalculator.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ServiceInsertionCalculator.java
@@ -20,6 +20,7 @@
 import com.graphhopper.jsprit.core.problem.JobActivityFactory;
 import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
 import com.graphhopper.jsprit.core.problem.constraint.HardActivityConstraint.ConstraintsStatus;
+import com.graphhopper.jsprit.core.problem.constraint.HardConstraint;
 import com.graphhopper.jsprit.core.problem.constraint.SoftActivityConstraint;
 import com.graphhopper.jsprit.core.problem.constraint.SoftRouteConstraint;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingActivityCosts;
@@ -51,10 +52,6 @@
 
     private static final Logger logger = LoggerFactory.getLogger(ServiceInsertionCalculator.class);
 
-//    private HardRouteConstraint hardRouteLevelConstraint;
-
-//    private HardActivityConstraint hardActivityLevelConstraint;
-
     private final SoftRouteConstraint softRouteConstraint;
 
     private final SoftActivityConstraint softActivityConstraint;
@@ -108,7 +105,7 @@ public InsertionData getInsertionData(final VehicleRoute currentRoute, final Job
         InsertionData noInsertion = checkRouteContraints(insertionContext, constraintManager);
         if (noInsertion != null) return noInsertion;
 
-        Collection<String> failedActivityConstraints = new ArrayList<>();
+        Collection<HardConstraint> failedActivityConstraints = new ArrayList<>();
 
         /*
         check soft constraints at route level
@@ -167,7 +164,9 @@ public InsertionData getInsertionData(final VehicleRoute currentRoute, final Job
         }
         if(insertionIndex == InsertionData.NO_INDEX) {
             InsertionData emptyInsertionData = new InsertionData.NoInsertionFound();
-            emptyInsertionData.getFailedConstraintNames().addAll(failedActivityConstraints);
+            for (HardConstraint c : failedActivityConstraints) {
+                emptyInsertionData.addFailedConstrainName(c.getClass().getSimpleName());
+            }
             return emptyInsertionData;
         }
         InsertionData insertionData = new InsertionData(bestCost, InsertionData.NO_INDEX, insertionIndex, newVehicle, newDriver);
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ShipmentInsertionCalculator.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ShipmentInsertionCalculator.java
index 9eb5967c9..d7b3eecd3 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ShipmentInsertionCalculator.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ShipmentInsertionCalculator.java
@@ -20,6 +20,7 @@
 import com.graphhopper.jsprit.core.problem.JobActivityFactory;
 import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
 import com.graphhopper.jsprit.core.problem.constraint.HardActivityConstraint.ConstraintsStatus;
+import com.graphhopper.jsprit.core.problem.constraint.HardConstraint;
 import com.graphhopper.jsprit.core.problem.constraint.SoftActivityConstraint;
 import com.graphhopper.jsprit.core.problem.constraint.SoftRouteConstraint;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingActivityCosts;
@@ -128,7 +129,7 @@ public InsertionData getInsertionData(final VehicleRoute currentRoute, final Job
         //pickupShipmentLoop
         List<TourActivity> activities = currentRoute.getTourActivities().getActivities();
 
-        List<String> failedActivityConstraints = new ArrayList<>();
+        List<HardConstraint> failedActivityConstraints = new ArrayList<>();
         while (!tourEnd) {
             TourActivity nextAct;
             if (i < activities.size()) {
@@ -228,7 +229,9 @@ else if (pickupShipmentConstraintStatus.equals(ConstraintsStatus.FULFILLED)) {
         }
         if (pickupInsertionIndex == InsertionData.NO_INDEX) {
             InsertionData emptyInsertionData = new InsertionData.NoInsertionFound();
-            emptyInsertionData.getFailedConstraintNames().addAll(failedActivityConstraints);
+            for (HardConstraint failed : failedActivityConstraints) {
+                emptyInsertionData.addFailedConstrainName(failed.getClass().getSimpleName());
+            }
             return emptyInsertionData;
         }
         InsertionData insertionData = new InsertionData(bestCost, pickupInsertionIndex, deliveryInsertionIndex, newVehicle, newDriver);
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ShipmentInsertionCalculatorFlex.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ShipmentInsertionCalculatorFlex.java
index b490b2462..8862481a9 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ShipmentInsertionCalculatorFlex.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ShipmentInsertionCalculatorFlex.java
@@ -20,6 +20,7 @@
 import com.graphhopper.jsprit.core.problem.JobActivityFactory;
 import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
 import com.graphhopper.jsprit.core.problem.constraint.HardActivityConstraint.ConstraintsStatus;
+import com.graphhopper.jsprit.core.problem.constraint.HardConstraint;
 import com.graphhopper.jsprit.core.problem.constraint.SoftActivityConstraint;
 import com.graphhopper.jsprit.core.problem.constraint.SoftRouteConstraint;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingActivityCosts;
@@ -146,7 +147,7 @@ public InsertionData getInsertionData(final VehicleRoute currentRoute, final Job
         //pickupShipmentLoop
         List<TourActivity> activities = currentRoute.getTourActivities().getActivities();
 
-        List<String> failedActivityConstraints = new ArrayList<>();
+        List<HardConstraint> failedActivityConstraints = new ArrayList<>();
         while (!tourEnd) {
             TourActivity nextAct;
             if (i < activities.size()) {
@@ -252,7 +253,9 @@ public InsertionData getInsertionData(final VehicleRoute currentRoute, final Job
 
         if (pickupInsertionIndex == InsertionData.NO_INDEX) {
             InsertionData emptyInsertionData = new InsertionData.NoInsertionFound();
-            emptyInsertionData.getFailedConstraintNames().addAll(failedActivityConstraints);
+            for (HardConstraint failed : failedActivityConstraints) {
+                emptyInsertionData.addFailedConstrainName(failed.getClass().getSimpleName());
+            }
             return emptyInsertionData;
         }
         InsertionData insertionData = new InsertionData(bestCost, pickupInsertionIndex, deliveryInsertionIndex, newVehicle, newDriver);
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/listener/InsertionEndsListener.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/listener/InsertionEndsListener.java
index c9cde4d64..96f3db200 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/listener/InsertionEndsListener.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/listener/InsertionEndsListener.java
@@ -17,6 +17,7 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate.listener;
 
+import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 
 import java.util.Collection;
@@ -24,5 +25,5 @@
 
 public interface InsertionEndsListener extends InsertionListener {
 
-    public void informInsertionEnds(Collection<VehicleRoute> vehicleRoutes);
+    void informInsertionEnds(Collection<VehicleRoute> vehicleRoutes, Collection<Job> badJobs);
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/listener/InsertionListeners.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/listener/InsertionListeners.java
index f0c5e9a8e..c791fd661 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/listener/InsertionListeners.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/listener/InsertionListeners.java
@@ -29,7 +29,7 @@
 
 public class InsertionListeners {
 
-    private Collection<InsertionListener> listeners = new ArrayList<InsertionListener>();
+    private Collection<InsertionListener> listeners = new ArrayList<>();
 
     public Collection<InsertionListener> getListeners() {
         return listeners;
@@ -67,10 +67,10 @@ public void informInsertionStarts(Collection<VehicleRoute> vehicleRoutes, Collec
         }
     }
 
-    public void informInsertionEndsListeners(Collection<VehicleRoute> vehicleRoutes) {
+    public void informInsertionEndsListeners(Collection<VehicleRoute> vehicleRoutes, Collection<Job> badJobs) {
         for (InsertionListener l : listeners) {
             if (l instanceof InsertionEndsListener) {
-                ((InsertionEndsListener) l).informInsertionEnds(vehicleRoutes);
+                ((InsertionEndsListener) l).informInsertionEnds(vehicleRoutes, badJobs);
             }
         }
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsOptimized.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsOptimized.java
index 58e7a4f05..34e9ae333 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsOptimized.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsOptimized.java
@@ -95,6 +95,10 @@ public JobNeighborhoodsOptimized(VehicleRoutingProblem vrp, JobDistance jobDista
 
     @Override
     public Iterator<Job> getNearestNeighborsIterator(int nNeighbors, Job neighborTo) {
+        if (neighborTo.getIndex() == 0) {
+            return Collections.emptyIterator();
+        }
+        
         int[] neighbors = this.neighbors[neighborTo.getIndex()-1];
         return new ArrayIterator(nNeighbors,neighbors,jobs);
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinWorst.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinWorst.java
index 620d1feda..10c5cc422 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinWorst.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinWorst.java
@@ -104,6 +104,10 @@ private Job getWorst(Collection<VehicleRoute> copied) {
             TourActivity actBefore = route.getStart();
             TourActivity actToEval = null;
             for (TourActivity act : route.getActivities()) {
+                if (!(act instanceof TourActivity.JobActivity)) {
+                    continue;
+                }
+
                 if (actToEval == null) {
                     actToEval = act;
                     continue;
@@ -119,6 +123,9 @@ private Job getWorst(Collection<VehicleRoute> copied) {
                 actBefore = actToEval;
                 actToEval = act;
             }
+            if (actToEval == null) {
+                continue;
+            }
             double savings = savings(route, actBefore, actToEval, route.getEnd());
             Job job = ((TourActivity.JobActivity) actToEval).getJob();
             if (!savingsMap.containsKey(job)) {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/StateManager.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/StateManager.java
index fe10f16d2..e2fffd55d 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/StateManager.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/StateManager.java
@@ -602,8 +602,8 @@ public void removed(Job job, VehicleRoute fromRoute) {
     }
 
     @Override
-    public void informInsertionEnds(Collection<VehicleRoute> vehicleRoutes) {
-        insertionListeners.informInsertionEndsListeners(vehicleRoutes);
+    public void informInsertionEnds(Collection<VehicleRoute> vehicleRoutes, Collection<Job> badJobs) {
+        insertionListeners.informInsertionEndsListeners(vehicleRoutes, badJobs);
     }
 
     /**
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/Capacity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/Capacity.java
index 0017d21ab..094398f0c 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/Capacity.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/Capacity.java
@@ -171,9 +171,7 @@ public Builder addDimension(int index, int dimValue) {
         }
 
         private void copy(int[] from, int[] to) {
-            for (int i = 0; i < dimensions.length; i++) {
-                to[i] = from[i];
-            }
+            System.arraycopy(from, 0, to, 0, dimensions.length);
         }
 
         /**
@@ -195,7 +193,7 @@ public Capacity build() {
      *
      * @param capacity capacity to be copied
      */
-    Capacity(Capacity capacity) {
+    private Capacity(Capacity capacity) {
         this.dimensions = new int[capacity.getNuOfDimensions()];
         for (int i = 0; i < capacity.getNuOfDimensions(); i++) {
             this.dimensions[i] = capacity.get(i);
@@ -261,11 +259,11 @@ public boolean isGreaterOrEqual(Capacity toCompare) {
 
     @Override
     public String toString() {
-        String string = "[noDimensions=" + getNuOfDimensions() + "]";
+        StringBuilder string = new StringBuilder("[noDimensions=" + getNuOfDimensions() + "]");
         for (int i = 0; i < getNuOfDimensions(); i++) {
-            string += "[[dimIndex=" + i + "][dimValue=" + dimensions[i] + "]]";
+            string.append("[[dimIndex=").append(i).append("][dimValue=").append(dimensions[i]).append("]]");
         }
-        return string;
+        return string.toString();
     }
 
     /**
@@ -300,9 +298,7 @@ public boolean equals(Object o) {
 
         Capacity capacity = (Capacity) o;
 
-        if (!Arrays.equals(dimensions, capacity.dimensions)) return false;
-
-        return true;
+        return Arrays.equals(dimensions, capacity.dimensions);
     }
 
     @Override
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/HasId.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/HasId.java
index 8c4b63518..74e7f842a 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/HasId.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/HasId.java
@@ -23,6 +23,6 @@
  */
 public interface HasId {
 
-    public String getId();
+    String getId();
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/HasIndex.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/HasIndex.java
index f8830cb83..edbfc922b 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/HasIndex.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/HasIndex.java
@@ -23,6 +23,6 @@
  */
 public interface HasIndex {
 
-    public int getIndex();
+    int getIndex();
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/JobActivityFactory.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/JobActivityFactory.java
index 8ee69533d..3911f6b73 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/JobActivityFactory.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/JobActivityFactory.java
@@ -27,6 +27,6 @@
  */
 public interface JobActivityFactory {
 
-    public List<AbstractActivity> createActivities(Job job);
+    List<AbstractActivity> createActivities(Job job);
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/Location.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/Location.java
index 51c74612c..d15bf4e4f 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/Location.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/Location.java
@@ -49,8 +49,8 @@ public static Location newInstance(String id) {
     /**
      * Factory method (and shortcut) for creating location object just with location index
      *
-     * @param index
-     * @return
+     * @param index of location
+     * @return this builder
      */
     public static Location newInstance(int index) {
         return Location.Builder.newInstance().setIndex(index).build();
@@ -92,7 +92,7 @@ public Builder setUserData(Object userData) {
         /**
          * Sets location index
          *
-         * @param index
+         * @param index location index
          * @return the builder
          */
         public Builder setIndex(int index) {
@@ -104,8 +104,8 @@ public Builder setIndex(int index) {
         /**
          * Sets coordinate of location
          *
-         * @param coordinate
-         * @return
+         * @param coordinate of location
+         * @return this Builder
          */
         public Builder setCoordinate(Coordinate coordinate) {
             this.coordinate = coordinate;
@@ -115,8 +115,8 @@ public Builder setCoordinate(Coordinate coordinate) {
         /**
          * Sets location id
          *
-         * @param id
-         * @return
+         * @param id id of location
+         * @return this Builder
          */
         public Builder setId(String id) {
             this.id = id;
@@ -126,8 +126,8 @@ public Builder setId(String id) {
         /**
          * Adds name, e.g. street name, to location
          *
-         * @param name
-         * @return
+         * @param name name of location
+         * @return this Builder
          */
         public Builder setName(String name) {
             this.name = name;
@@ -198,14 +198,10 @@ public String getName() {
     public boolean equals(Object o) {
         if (this == o) return true;
         if (!(o instanceof Location)) return false;
-
         Location location = (Location) o;
-
         if (index != location.index) return false;
         if (coordinate != null ? !coordinate.equals(location.coordinate) : location.coordinate != null) return false;
-        if (id != null ? !id.equals(location.id) : location.id != null) return false;
-
-        return true;
+        return id != null ? id.equals(location.id) : location.id == null;
     }
 
     @Override
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/Skills.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/Skills.java
index ddc7df8e0..f52831fcc 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/Skills.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/Skills.java
@@ -39,7 +39,7 @@ public static Builder newInstance() {
             return new Builder();
         }
 
-        private Set<String> skills = new HashSet<String>();
+        private Set<String> skills = new HashSet<>();
 
         /**
          * Adds skill. Skill is transformed into lowerCase.
@@ -74,7 +74,7 @@ public Skills build() {
 
     }
 
-    private Set<String> skills = new HashSet<String>();
+    private Set<String> skills = new HashSet<>();
 
     private Skills(Builder builder) {
         skills.addAll(builder.skills);
@@ -90,16 +90,16 @@ private Skills(Builder builder) {
     }
 
     public String toString() {
-        String s = "[";
+        StringBuilder s = new StringBuilder("[");
         boolean first = true;
         for (String skill : values()) {
             if (first) {
-                s += skill;
+                s.append(skill);
                 first = false;
-            } else s += ", " + skill;
+            } else s.append(", ").append(skill);
         }
-        s += "]";
-        return s;
+        s.append("]");
+        return s.toString();
     }
 
     /**
@@ -119,9 +119,7 @@ public boolean equals(Object o) {
 
         Skills skills1 = (Skills) o;
 
-        if (skills != null ? !skills.equals(skills1.skills) : skills1.skills != null) return false;
-
-        return true;
+        return skills != null ? skills.equals(skills1.skills) : skills1.skills == null;
     }
 
     @Override
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblem.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblem.java
index fa6afae5b..4c630fabc 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblem.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblem.java
@@ -20,10 +20,7 @@
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingActivityCosts;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.cost.WaitingTimeCosts;
-import com.graphhopper.jsprit.core.problem.job.Break;
-import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.*;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.BreakActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.DefaultShipmentActivityFactory;
@@ -157,14 +154,7 @@ private void incVehicleTypeIdIndexCounter() {
          * @return locations
          */
         public Locations getLocations() {
-            return new Locations() {
-
-                @Override
-                public Coordinate getCoord(String id) {
-                    return tentative_coordinates.get(id);
-                }
-
-            };
+            return id -> tentative_coordinates.get(id);
         }
 
         /**
@@ -233,18 +223,8 @@ public Builder addJob(AbstractJob job) {
         }
 
         private void addLocationToTentativeLocations(Job job) {
-            if (job instanceof Service) {
-                Location location = ((Service) job).getLocation();
-//                tentative_coordinates.put(location.getId(), location.getCoordinate());
-                addLocationToTentativeLocations(location);
-            } else if (job instanceof Shipment) {
-                Shipment shipment = (Shipment) job;
-                Location pickupLocation = shipment.getPickupLocation();
-                addLocationToTentativeLocations(pickupLocation);
-//                tentative_coordinates.put(pickupLocation.getId(), pickupLocation.getCoordinate());
-                Location deliveryLocation = shipment.getDeliveryLocation();
-                addLocationToTentativeLocations(deliveryLocation);
-//                tentative_coordinates.put(deliveryLocation.getId(), deliveryLocation.getCoordinate());
+            for (Activity act : job.getActivities()) {
+                addLocationToTentativeLocations(act.getLocation());
             }
         }
 
@@ -254,13 +234,7 @@ private void addLocationToTentativeLocations(Location location) {
         }
 
         private void addJobToFinalJobMapAndCreateActivities(Job job) {
-            if (job instanceof Service) {
-                Service service = (Service) job;
-                addService(service);
-            } else if (job instanceof Shipment) {
-                Shipment shipment = (Shipment) job;
-                addShipment(shipment);
-            }
+            addJobToFinalMap(job);
             List<AbstractActivity> jobActs = jobActivityFactory.createActivities(job);
             for (AbstractActivity act : jobActs) {
                 act.setIndex(activityIndexCounter);
@@ -340,13 +314,11 @@ public Builder addInitialVehicleRoutes(Collection<VehicleRoute> routes) {
             return this;
         }
 
-        private void addShipment(Shipment job) {
+        private void addJobToFinalMap(Job job) {
             if (jobs.containsKey(job.getId())) {
                 logger.warn("The job " + job + " has already been added to the job list. This overrides the existing job.");
             }
             addLocationToTentativeLocations(job);
-//            tentative_coordinates.put(job.getPickupLocation().getId(), job.getPickupLocation().getCoordinate());
-//            tentative_coordinates.put(job.getDeliveryLocation().getId(), job.getDeliveryLocation().getCoordinate());
             jobs.put(job.getId(), job);
         }
 
@@ -421,6 +393,17 @@ public Builder setActivityCosts(VehicleRoutingActivityCosts activityCosts) {
             return this;
         }
 
+        private final List<AbstractActivity> nonJobActivities = new ArrayList<>();
+
+        public Builder addNonJobActivities(Collection<? extends AbstractActivity> nonJobActivities) {
+            for (AbstractActivity act : nonJobActivities) {
+                act.setIndex(activityIndexCounter);
+                incActivityIndexCounter();
+                this.nonJobActivities.add(act);
+            }
+            return this;
+        }
+
         /**
          * Builds the {@link VehicleRoutingProblem}.
          * <p>
@@ -512,16 +495,6 @@ public Builder addAllVehicles(Collection<? extends Vehicle> vehicles) {
             return Collections.unmodifiableCollection(tentativeJobs.values());
         }
 
-        private Builder addService(Service service) {
-//            tentative_coordinates.put(service.getLocation().getId(), service.getLocation().getCoordinate());
-            addLocationToTentativeLocations(service);
-            if (jobs.containsKey(service.getId())) {
-                logger.warn("The service " + service + " has already been added to job list. This overrides existing job.");
-            }
-            jobs.put(service.getId(), service);
-            return this;
-        }
-
 
     }
 
@@ -579,14 +552,7 @@ private Builder addService(Service service) {
 
     private int nuActivities;
 
-    private final JobActivityFactory jobActivityFactory = new JobActivityFactory() {
-
-        @Override
-        public List<AbstractActivity> createActivities(Job job) {
-            return copyAndGetActivities(job);
-        }
-
-    };
+    private final JobActivityFactory jobActivityFactory = job -> copyAndGetActivities(job);
 
     private VehicleRoutingProblem(Builder builder) {
         this.jobs = builder.jobs;
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/MaxDistanceConstraint.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/MaxDistanceConstraint.java
index bb88358b1..bf2d8800a 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/MaxDistanceConstraint.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/MaxDistanceConstraint.java
@@ -78,8 +78,8 @@ public ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prev
         double maxDistance = getMaxDistance(iFacts.getNewVehicle());
         if (currentDistance > maxDistance) return ConstraintsStatus.NOT_FULFILLED_BREAK;
 
-        double distancePrevAct2NewAct = distanceCalculator.getDistance(prevAct.getLocation(), newAct.getLocation(), iFacts.getNewDepTime(), iFacts.getNewVehicle());
-        double distanceNewAct2nextAct = distanceCalculator.getDistance(newAct.getLocation(), nextAct.getLocation(), iFacts.getNewDepTime(), iFacts.getNewVehicle());
+        double distancePrevAct2NewAct = distanceCalculator.getDistance(prevAct.getLocation(), newAct.getLocation(), prevActDepTime, iFacts.getNewVehicle());
+        double distanceNewAct2nextAct = distanceCalculator.getDistance(newAct.getLocation(), nextAct.getLocation(), prevActDepTime, iFacts.getNewVehicle());
         double distancePrevAct2NextAct = distanceCalculator.getDistance(prevAct.getLocation(), nextAct.getLocation(), prevActDepTime, iFacts.getNewVehicle());
         if (prevAct instanceof Start && nextAct instanceof End) distancePrevAct2NextAct = 0;
         if (nextAct instanceof End && !iFacts.getNewVehicle().isReturnToDepot()) {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Activity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Activity.java
new file mode 100644
index 000000000..ba0df86c1
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Activity.java
@@ -0,0 +1,92 @@
+/*
+ * Licensed to GraphHopper GmbH under one or more contributor
+ * license agreements. See the NOTICE file distributed with this work for
+ * additional information regarding copyright ownership.
+ *
+ * GraphHopper GmbH licenses this file to you under the Apache License,
+ * Version 2.0 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.graphhopper.jsprit.core.problem.job;
+
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
+
+import java.util.Collection;
+
+public class Activity {
+
+    public enum Type {
+        PICKUP, DELIVERY, SERVICE, BREAK;
+    }
+
+    public static class Builder {
+
+        private final Type activityType;
+
+        private Location location;
+
+        Collection<TimeWindow> timeWindows;
+
+        private double serviceTime;
+
+        public Builder(Location location, Type activityType) {
+            this.location = location;
+            this.activityType = activityType;
+        }
+
+        public Builder setTimeWindows(Collection<TimeWindow> timeWindows) {
+            this.timeWindows = timeWindows;
+            return this;
+        }
+
+        public Builder setServiceTime(double serviceTime) {
+            this.serviceTime = serviceTime;
+            return this;
+        }
+
+        public Activity build() {
+            return new Activity(this);
+        }
+    }
+
+    private Location location;
+
+    private Collection<TimeWindow> timeWindows;
+
+    private double serviceTime;
+
+    private Activity.Type activityType;
+
+    Activity(Builder builder) {
+        location = builder.location;
+        timeWindows = builder.timeWindows;
+        serviceTime = builder.serviceTime;
+        activityType = builder.activityType;
+    }
+
+    public Type getActivityType() {
+        return activityType;
+    }
+
+    public Location getLocation() {
+        return location;
+    }
+
+    public Collection<TimeWindow> getTimeWindows() {
+        return timeWindows;
+    }
+
+    public double getServiceTime() {
+        return serviceTime;
+    }
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Break.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Break.java
index 367ea7dcf..d81e7d4f2 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Break.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Break.java
@@ -61,12 +61,13 @@ public Break build() {
             this.setType("break");
             super.capacity = Capacity.Builder.newInstance().build();
             super.skills = Skills.Builder.newInstance().build();
+            super.activity = new Activity.Builder(null, Activity.Type.BREAK).setServiceTime(serviceTime).setTimeWindows(timeWindows.getTimeWindows()).build();
             return new Break(this);
         }
 
     }
 
-    private boolean variableLocation = true;
+    private boolean variableLocation;
 
     Break(Builder builder) {
         super(builder);
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Delivery.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Delivery.java
index 40b70a755..98e708bf9 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Delivery.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Delivery.java
@@ -59,6 +59,7 @@ public Delivery build() {
             this.setType("delivery");
             super.capacity = super.capacityBuilder.build();
             super.skills = super.skillBuilder.build();
+            super.activity = new Activity.Builder(location, Activity.Type.DELIVERY).setTimeWindows(timeWindows.getTimeWindows()).setServiceTime(serviceTime).build();
             return new Delivery(this);
         }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Job.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Job.java
index 76b65084d..10538b072 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Job.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Job.java
@@ -23,6 +23,8 @@
 import com.graphhopper.jsprit.core.problem.HasIndex;
 import com.graphhopper.jsprit.core.problem.Skills;
 
+import java.util.List;
+
 /**
  * Basic interface for all jobs.
  *
@@ -36,33 +38,35 @@
      *
      * @return id
      */
-    public String getId();
+    String getId();
 
     /**
      * Returns size, i.e. capacity-demand, of this job which can consist of an arbitrary number of capacity dimensions.
      *
      * @return Capacity
      */
-    public Capacity getSize();
+    Capacity getSize();
 
-    public Skills getRequiredSkills();
+    Skills getRequiredSkills();
 
     /**
      * Returns name.
      *
      * @return name
      */
-    public String getName();
+    String getName();
 
     /**
-     * Get priority of job. Only 1 = high priority, 2 = medium and 3 = low are allowed.
+     * Get priority of job. Only 1 (very high) to 10 (very low) are allowed.
      * <p>
-     * Default is 2 = medium.
+     * Default is 2.
      *
      * @return priority
      */
-    public int getPriority();
+    int getPriority();
+
+    double getMaxTimeInVehicle();
 
-    public double getMaxTimeInVehicle();
+    List<Activity> getActivities();
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Pickup.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Pickup.java
index 2a893d5f0..bba2b437d 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Pickup.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Pickup.java
@@ -61,6 +61,7 @@ public Pickup build() {
             this.setType("pickup");
             super.capacity = super.capacityBuilder.build();
             super.skills = super.skillBuilder.build();
+            super.activity = new Activity.Builder(location, Activity.Type.PICKUP).setTimeWindows(timeWindows.getTimeWindows()).setServiceTime(serviceTime).build();
             return new Pickup(this);
         }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java
index 99608c233..7d0067f5d 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java
@@ -26,7 +26,10 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindowsImpl;
 import com.graphhopper.jsprit.core.util.Coordinate;
 
+import java.util.ArrayList;
 import java.util.Collection;
+import java.util.Collections;
+import java.util.List;
 
 /**
  * Service implementation of a job.
@@ -93,6 +96,8 @@ public static Builder newInstance(String id) {
 
 		protected double maxTimeInVehicle = Double.MAX_VALUE;
 
+        protected Activity activity;
+
 		Builder(String id){
 			this.id = id;
 			timeWindows = new TimeWindowsImpl();
@@ -209,6 +214,7 @@ public T build() {
             this.setType("service");
             capacity = capacityBuilder.build();
             skills = skillBuilder.build();
+            activity = new Activity.Builder(location, Activity.Type.SERVICE).setServiceTime(serviceTime).setTimeWindows(timeWindows.getTimeWindows()).build();
             return (T) new Service(this);
         }
 
@@ -282,6 +288,8 @@ public T build() {
 
     private final double maxTimeInVehicle;
 
+    private List<Activity> activities = new ArrayList<>();
+
     Service(Builder<?> builder) {
         setUserData(builder.userData);
         id = builder.id;
@@ -294,6 +302,8 @@ public T build() {
         timeWindows = builder.timeWindows;
         priority = builder.priority;
 	    maxTimeInVehicle = builder.maxTimeInVehicle;
+        activities.add(builder.activity);
+        activities = Collections.unmodifiableList(activities);
 	}
 
     public Collection<TimeWindow> getTimeWindows(){
@@ -398,9 +408,9 @@ public String getName() {
     }
 
     /**
-     * Get priority of service. Only 1 = high priority, 2 = medium and 3 = low are allowed.
+     * Get priority of service. Only 1 (high) to 10 (low) are allowed.
      * <p>
-     * Default is 2 = medium.
+     * Default is 2.
      *
      * @return priority
      */
@@ -414,4 +424,9 @@ public double getMaxTimeInVehicle() {
         return this.maxTimeInVehicle;
     }
 
+    @Override
+    public List<Activity> getActivities() {
+        return activities;
+    }
+
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java
index 8d356a020..be95482bd 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java
@@ -24,7 +24,10 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindowsImpl;
 
+import java.util.ArrayList;
 import java.util.Collection;
+import java.util.Collections;
+import java.util.List;
 
 
 /**
@@ -46,8 +49,6 @@
 public class Shipment extends AbstractJob {
 
 
-
-
     /**
      * Builder that builds the shipment.
      *
@@ -89,6 +90,10 @@
 
         public double maxTimeInVehicle = Double.MAX_VALUE;
 
+        private Activity pickup;
+
+        private Activity delivery;
+
         /**
          * Returns new instance of this builder.
          *
@@ -252,6 +257,8 @@ public Shipment build() {
             if (deliveryLocation_ == null) throw new IllegalArgumentException("The delivery location is missing.");
             capacity = capacityBuilder.build();
             skills = skillBuilder.build();
+            pickup = new Activity.Builder(pickupLocation_, Activity.Type.PICKUP).setServiceTime(pickupServiceTime).setTimeWindows(pickupTimeWindows.getTimeWindows()).build();
+            delivery = new Activity.Builder(deliveryLocation_, Activity.Type.DELIVERY).setServiceTime(deliveryServiceTime).setTimeWindows(deliveryTimeWindows.getTimeWindows()).build();
             return new Shipment(this);
         }
 
@@ -318,7 +325,7 @@ public Builder addAllPickupTimeWindows(Collection<TimeWindow> timeWindow) {
         /**
          * Set priority to shipment. Only 1 (high) to 10 (low) are allowed.
          * <p>
-         * Default is 2 = medium.
+         * Default is 2.
          *
          * @param priority
          * @return builder
@@ -368,6 +375,8 @@ public Builder setMaxTimeInVehicle(double maxTimeInVehicle){
 
     private final double maxTimeInVehicle;
 
+    private List<Activity> activities = new ArrayList<>();
+
     Shipment(Builder builder) {
         setUserData(builder.userData);
         this.id = builder.id;
@@ -382,6 +391,9 @@ public Builder setMaxTimeInVehicle(double maxTimeInVehicle){
         this.pickupTimeWindows = builder.pickupTimeWindows;
         this.priority = builder.priority;
         this.maxTimeInVehicle = builder.maxTimeInVehicle;
+        activities.add(builder.pickup);
+        activities.add(builder.delivery);
+        activities = Collections.unmodifiableList(activities);
     }
 
     @Override
@@ -505,9 +517,9 @@ public String getName() {
     }
 
     /**
-     * Get priority of shipment. Only 1 = high priority, 2 = medium and 3 = low are allowed.
+     * Get priority of shipment. Only 1 (high) to 10 (low) are allowed.
      * <p>
-     * Default is 2 = medium.
+     * Default is 2.
      *
      * @return priority
      */
@@ -520,4 +532,9 @@ public int getPriority() {
     public double getMaxTimeInVehicle() {
         return maxTimeInVehicle;
     }
+
+    @Override
+    public List<Activity> getActivities() {
+        return activities;
+    }
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRoute.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRoute.java
index 40fe59075..ee14a75f5 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRoute.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRoute.java
@@ -367,7 +367,7 @@ private VehicleRoute(Builder builder) {
      * @return list of tourActivities
      */
     public List<TourActivity> getActivities() {
-        return Collections.unmodifiableList(tourActivities.getActivities());
+        return tourActivities.getActivities();
     }
 
     /**
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TimeWindow.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TimeWindow.java
index 7ded1e0b3..3fac5c439 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TimeWindow.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TimeWindow.java
@@ -75,6 +75,10 @@ public double getEnd() {
         return end;
     }
 
+    public boolean larger(TimeWindow timeWindow) {
+        return (this.getEnd() - this.getStart()) > (timeWindow.getEnd() - timeWindow.getStart());
+    }
+
     @Override
     public String toString() {
         return "[start=" + start + "][end=" + end + "]";
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourActivities.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourActivities.java
index 949e70fda..22b9db330 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourActivities.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourActivities.java
@@ -46,8 +46,7 @@ public ReverseActivityIterator(List<TourActivity> acts) {
 
         @Override
         public boolean hasNext() {
-            if (currentIndex >= 0) return true;
-            return false;
+            return currentIndex >= 0;
         }
 
         @Override
@@ -67,9 +66,9 @@ public void remove() {
         }
     }
 
-    private final ArrayList<TourActivity> tourActivities = new ArrayList<TourActivity>();
+    private final ArrayList<TourActivity> tourActivities = new ArrayList<>();
 
-    private final Set<Job> jobs = new HashSet<Job>();
+    private final Set<Job> jobs = new HashSet<>();
 
     private ReverseActivityIterator backward;
 
@@ -82,7 +81,6 @@ private TourActivities(TourActivities tour2copy) {
     }
 
     public TourActivities() {
-
     }
 
     public List<TourActivity> getActivities() {
@@ -90,7 +88,30 @@ public TourActivities() {
     }
 
     public Iterator<TourActivity> iterator() {
-        return tourActivities.iterator();
+        final Iterator<TourActivity> iterator = tourActivities.iterator();
+        return new Iterator<TourActivity>() {
+            private TourActivity lastReturned = null;
+
+            @Override
+            public boolean hasNext() {
+                return iterator.hasNext();
+            }
+
+            @Override
+            public TourActivity next() {
+                return lastReturned = iterator.next();
+            }
+
+            @Override
+            public void remove() {
+                if (lastReturned instanceof JobActivity) {
+                    throw new IllegalStateException("Cannot remove JobActivities via iterator. "
+                        + "Use TourActivities.removeActivity(), or alternatively, consider TourActivities.removeJob()");
+                } else {
+                    iterator.remove();
+                }
+            }
+        };
     }
 
     public boolean isEmpty() {
@@ -123,7 +144,7 @@ public String toString() {
      * @return true if job has been removed, otherwise false.
      */
     public boolean removeJob(Job job) {
-        boolean jobRemoved = false;
+        boolean jobRemoved;
         if (!jobs.contains(job)) {
             return false;
         } else {
@@ -155,26 +176,35 @@ public boolean removeJob(Job job) {
      * @return true if activity has been removed, false otherwise
      */
     public boolean removeActivity(TourActivity activity) {
-        Job job = null;
-        if (activity instanceof JobActivity) {
-            job = ((JobActivity) activity).getJob();
+        if (!(activity instanceof JobActivity)) {
+            //assumes that an activity can be added only once to tourActivities
+            return tourActivities.remove(activity);
         }
+
+        Job job = ((JobActivity) activity).getJob();
         boolean jobIsAlsoAssociateToOtherActs = false;
         boolean actRemoved = false;
-        List<TourActivity> acts = new ArrayList<TourActivity>(tourActivities);
-        for (TourActivity act : acts) {
+        for (TourActivity act : new ArrayList<>(tourActivities)) {
             if (act == activity) {
                 tourActivities.remove(act);
+                if (jobIsAlsoAssociateToOtherActs) {
+                    // other activities also refer to job --> do not remove job
+                    // thus no need to iterate any further
+                    return true;
+                }
                 actRemoved = true;
             } else {
-                if (act instanceof JobActivity && job != null) {
-                    if (((JobActivity) act).getJob().equals(job)) {
-                        jobIsAlsoAssociateToOtherActs = true;
+                if (act instanceof JobActivity && ((JobActivity) act).getJob().equals(job)) {
+                    if (actRemoved) {
+                        // other activities also refer to job --> do not remove job
+                        // thus no need to iterate any further
+                        return true;
                     }
+                    jobIsAlsoAssociateToOtherActs = true;
                 }
             }
         }
-        if (!jobIsAlsoAssociateToOtherActs && actRemoved) {
+        if (actRemoved) {
             jobs.remove(job);
         }
         return actRemoved;
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourActivity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourActivity.java
index a6aa070fd..c6ee3d4f6 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourActivity.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourActivity.java
@@ -31,9 +31,9 @@
  */
 public interface TourActivity extends HasIndex {
 
-	public void setTheoreticalEarliestOperationStartTime(double earliest);
+    void setTheoreticalEarliestOperationStartTime(double earliest);
 
-	public void setTheoreticalLatestOperationStartTime(double latest);
+    void setTheoreticalLatestOperationStartTime(double latest);
 
     /**
      * Basic interface of job-activies.
@@ -42,14 +42,14 @@
      *
      * @author schroeder
      */
-    public interface JobActivity extends TourActivity {
+    interface JobActivity extends TourActivity {
 
         /**
          * Returns the job that is involved with this activity.
          *
          * @return job
          */
-        public Job getJob();
+        Job getJob();
 
     }
 
@@ -58,14 +58,14 @@
      *
      * @return name
      */
-    public abstract String getName();
+    String getName();
 
     /**
      * Returns location.
      *
      * @return location
      */
-    public abstract Location getLocation();
+    Location getLocation();
 
     /**
      * Returns the theoretical earliest operation start time, which is the time that is just allowed
@@ -73,7 +73,7 @@
      *
      * @return earliest start time
      */
-    public abstract double getTheoreticalEarliestOperationStartTime();
+    double getTheoreticalEarliestOperationStartTime();
 
     /**
      * Returns the theoretical latest operation start time, which is the time that is just allowed
@@ -81,7 +81,7 @@
      *
      * @return latest start time
      */
-    public abstract double getTheoreticalLatestOperationStartTime();
+    double getTheoreticalLatestOperationStartTime();
 
     /**
      * Returns the operation-time this activity takes.
@@ -91,35 +91,35 @@
      *
      * @return operation time
      */
-    public abstract double getOperationTime();
+    double getOperationTime();
 
     /**
      * Returns the arrival-time of this activity.
      *
      * @return arrival time
      */
-    public abstract double getArrTime();
+    double getArrTime();
 
     /**
      * Returns end-time of this activity.
      *
      * @return end time
      */
-    public abstract double getEndTime();
+    double getEndTime();
 
     /**
      * Sets the arrival time of that activity.
      *
      * @param arrTime
      */
-    public abstract void setArrTime(double arrTime);
+    void setArrTime(double arrTime);
 
     /**
      * Sets the end-time of this activity.
      *
      * @param endTime
      */
-    public abstract void setEndTime(double endTime);
+    void setEndTime(double endTime);
 
     /**
      * Returns the capacity-demand of that activity, in terms of what needs to be loaded or unloaded at
@@ -127,13 +127,13 @@
      *
      * @return capacity
      */
-    public abstract Capacity getSize();
+    Capacity getSize();
 
     /**
      * Makes a deep copy of this activity.
      *
      * @return copied activity
      */
-    public abstract TourActivity duplicate();
+    TourActivity duplicate();
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/FiniteFleetManagerFactory.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/FiniteFleetManagerFactory.java
index c9c2fe73a..50ef18f69 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/FiniteFleetManagerFactory.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/FiniteFleetManagerFactory.java
@@ -17,10 +17,7 @@
  */
 package com.graphhopper.jsprit.core.problem.vehicle;
 
-import com.graphhopper.jsprit.core.util.RandomNumberGeneration;
-
 import java.util.Collection;
-import java.util.Random;
 
 /**
  * Factory that creates a finite fleetmanager.
@@ -31,8 +28,6 @@
 
     private Collection<Vehicle> vehicles;
 
-    private Random random = RandomNumberGeneration.getRandom();
-
     /**
      * Constucts the factory.
      *
@@ -43,10 +38,6 @@ public FiniteFleetManagerFactory(Collection<Vehicle> vehicles) {
         this.vehicles = vehicles;
     }
 
-    public void setRandom(Random random) {
-        this.random = random;
-    }
-
     /**
      * Creates the finite fleetmanager.
      *
@@ -58,7 +49,6 @@ public VehicleFleetManager createFleetManager() {
         if (vehicles == null) throw new IllegalStateException("vehicles is null. this must not be.");
         if (vehicles.isEmpty()) throw new IllegalStateException("vehicle-collection is empty. this must not be");
         VehicleFleetManagerImpl vehicleFleetManager = new VehicleFleetManagerImpl(vehicles);
-        vehicleFleetManager.setRandom(random);
         vehicleFleetManager.init();
         return vehicleFleetManager;
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/InfiniteFleetManagerFactory.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/InfiniteFleetManagerFactory.java
index 46d4e9d6b..93269fbb7 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/InfiniteFleetManagerFactory.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/InfiniteFleetManagerFactory.java
@@ -32,7 +32,7 @@
     /**
      * Constructs the factory.
      *
-     * @param vehicles
+     * @param vehicles that are used to initialize the fleet manager
      */
     public InfiniteFleetManagerFactory(Collection<Vehicle> vehicles) {
         super();
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/InfiniteVehicles.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/InfiniteVehicles.java
index 5fbdb93c1..bd67b1736 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/InfiniteVehicles.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/InfiniteVehicles.java
@@ -34,11 +34,10 @@
 
     private static Logger logger = LoggerFactory.getLogger(InfiniteVehicles.class);
 
-    private Map<VehicleTypeKey, Vehicle> types = new HashMap<VehicleTypeKey, Vehicle>();
+    private Map<VehicleTypeKey, Vehicle> types = new HashMap<>();
 
-//	private List<VehicleTypeKey> sortedTypes = new ArrayList<VehicleTypeKey>();
 
-    public InfiniteVehicles(Collection<Vehicle> vehicles) {
+    InfiniteVehicles(Collection<Vehicle> vehicles) {
         extractTypes(vehicles);
         logger.debug("initialise " + this);
     }
@@ -85,7 +84,7 @@ public void unlockAll() {
 
     @Override
     public Collection<Vehicle> getAvailableVehicles(Vehicle withoutThisType) {
-        Collection<Vehicle> vehicles = new ArrayList<Vehicle>();
+        Collection<Vehicle> vehicles = new ArrayList<>();
         VehicleTypeKey thisKey = new VehicleTypeKey(withoutThisType.getType().getTypeId(), withoutThisType.getStartLocation().getId(), withoutThisType.getEndLocation().getId(), withoutThisType.getEarliestDeparture(), withoutThisType.getLatestArrival(), withoutThisType.getSkills(), withoutThisType.isReturnToDepot());
         for (VehicleTypeKey key : types.keySet()) {
             if (!key.equals(thisKey)) {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/Vehicle.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/Vehicle.java
index 6d430655c..927ace885 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/Vehicle.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/Vehicle.java
@@ -35,50 +35,50 @@
      *
      * @return earliest departure time
      */
-    public abstract double getEarliestDeparture();
+    double getEarliestDeparture();
 
     /**
      * Returns the latest arrival time at this vehicle's end-location which should be the upper bound of this vehicle's arrival times at end-location.
      *
      * @return latest arrival time of this vehicle
      */
-    public abstract double getLatestArrival();
+    double getLatestArrival();
 
     /**
      * Returns the {@link VehicleType} of this vehicle.
      *
      * @return {@link VehicleType} of this vehicle
      */
-    public abstract VehicleType getType();
+    VehicleType getType();
 
     /**
      * Returns the id of this vehicle.
      *
      * @return id
      */
-    public abstract String getId();
+    String getId();
 
     /**
      * Returns true if vehicle returns to depot, false otherwise.
      *
      * @return true if isReturnToDepot
      */
-    public abstract boolean isReturnToDepot();
+    boolean isReturnToDepot();
 
-    public abstract Location getStartLocation();
+    Location getStartLocation();
 
-    public abstract Location getEndLocation();
+    Location getEndLocation();
 
-    public abstract VehicleTypeKey getVehicleTypeIdentifier();
+    VehicleTypeKey getVehicleTypeIdentifier();
 
-    public abstract Skills getSkills();
+    Skills getSkills();
 
     /**
      * @return User-specific domain data associated with the vehicle
      */
-    public Object getUserData();
+    Object getUserData();
 
-    public abstract Break getBreak();
+    Break getBreak();
     // Switch to this as soon as we switct to Java 8:
     // default Object getUserData() {
     // return null;
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleFleetManager.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleFleetManager.java
index b6861c9b2..ccbca7598 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleFleetManager.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleFleetManager.java
@@ -27,31 +27,31 @@
      * <p>
      * <p>This indicates that this vehicle is being used. Thus it is not in list of available vehicles.
      *
-     * @param vehicle
+     * @param vehicle to lock
      */
-    public abstract void lock(Vehicle vehicle);
+    void lock(Vehicle vehicle);
 
     /**
      * Unlocks vehicle.
      * <p>
      * <p>This indicates that this vehicle is not being used anymore. Thus it is in list of available vehicles.
      *
-     * @param vehicle
+     * @param vehicle to unlock
      */
-    public abstract void unlock(Vehicle vehicle);
+    void unlock(Vehicle vehicle);
 
     /**
      * Returns true if locked.
      *
-     * @param vehicle
-     * @return
+     * @param vehicle vehicle to lock
+     * @return true if locked
      */
-    public abstract boolean isLocked(Vehicle vehicle);
+    boolean isLocked(Vehicle vehicle);
 
     /**
      * Unlocks all locked vehicles.
      */
-    public abstract void unlockAll();
+    void unlockAll();
 
     /**
      * Returns a collection of available vehicles.
@@ -61,11 +61,11 @@
      * This is to avoid returning too many vehicles that are basically equal.
      * <p>Look at {@link VehicleTypeKey} to figure out whether two vehicles are equal or not.
      *
-     * @return
+     * @return collection of available vehicles
      */
-    public abstract Collection<Vehicle> getAvailableVehicles();
+    Collection<Vehicle> getAvailableVehicles();
 
-    public Collection<Vehicle> getAvailableVehicles(Vehicle withoutThisType);
+    Collection<Vehicle> getAvailableVehicles(Vehicle withoutThisType);
 
-    public Vehicle getAvailableVehicle(VehicleTypeKey vehicleTypeIdentifier);
+    Vehicle getAvailableVehicle(VehicleTypeKey vehicleTypeIdentifier);
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleFleetManagerFactory.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleFleetManagerFactory.java
index f5e4525ea..7bfe691f2 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleFleetManagerFactory.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleFleetManagerFactory.java
@@ -19,6 +19,6 @@
 
 public interface VehicleFleetManagerFactory {
 
-    public VehicleFleetManager createFleetManager();
+    VehicleFleetManager createFleetManager();
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleFleetManagerImpl.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleFleetManagerImpl.java
index 5741594aa..34c91b819 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleFleetManagerImpl.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleFleetManagerImpl.java
@@ -23,7 +23,6 @@
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
-import java.util.Random;
 
 
 class VehicleFleetManagerImpl implements VehicleFleetManager {
@@ -40,7 +39,7 @@ public VehicleFleetManagerImpl newInstance(Collection<Vehicle> vehicles) {
 
         TypeContainer() {
             super();
-            vehicleList = new ArrayList<Vehicle>();
+            vehicleList = new ArrayList<>();
         }
 
         void add(Vehicle vehicle) {
@@ -56,8 +55,7 @@ void remove(Vehicle vehicle) {
 
         Vehicle getVehicle() {
             if(index >= vehicleList.size()) index = 0;
-            Vehicle vehicle = vehicleList.get(index);
-            return vehicle;
+            return vehicleList.get(index);
         }
 
         void incIndex(){
@@ -80,8 +78,6 @@ boolean isEmpty() {
 
     private Vehicle[] vehicleArr;
 
-    private Random random;
-
     VehicleFleetManagerImpl(Collection<Vehicle> vehicles) {
         super();
         this.vehicles = vehicles;
@@ -90,10 +86,6 @@ boolean isEmpty() {
         vehicleArr = new Vehicle[arrSize];
     }
 
-    void setRandom(Random random) {
-        this.random = random;
-    }
-
     void init(){
         initializeVehicleTypes();
         logger.debug("initialise {}",this);
@@ -142,10 +134,10 @@ private void removeVehicle(Vehicle v) {
      */
     @Override
     public Collection<Vehicle> getAvailableVehicles() {
-        List<Vehicle> vehicles = new ArrayList<Vehicle>();
-        for(int i=0;i< vehicleTypes.length;i++){
-            if(!vehicleTypes[i].isEmpty()){
-                vehicles.add(vehicleTypes[i].getVehicle());
+        List<Vehicle> vehicles = new ArrayList<>();
+        for (TypeContainer vehicleType : vehicleTypes) {
+            if (!vehicleType.isEmpty()) {
+                vehicles.add(vehicleType.getVehicle());
             }
         }
         return vehicles;
@@ -153,7 +145,7 @@ private void removeVehicle(Vehicle v) {
 
     @Override
     public Collection<Vehicle> getAvailableVehicles(Vehicle withoutThisType) {
-        List<Vehicle> vehicles = new ArrayList<Vehicle>();
+        List<Vehicle> vehicles = new ArrayList<>();
         for(int i=0;i< vehicleTypes.length;i++){
             if(!vehicleTypes[i].isEmpty() && i != withoutThisType.getVehicleTypeIdentifier().getIndex()){
                 vehicles.add(vehicleTypes[i].getVehicle());
@@ -218,8 +210,8 @@ public void unlockAll() {
                 unlock(vehicleArr[i]);
             }
         }
-        for(int i=0;i<vehicleTypes.length;i++){
-            vehicleTypes[i].incIndex();
+        for (TypeContainer vehicleType : vehicleTypes) {
+            vehicleType.incIndex();
         }
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleImpl.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleImpl.java
index 50d8131ac..198934256 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleImpl.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleImpl.java
@@ -21,8 +21,6 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.Skills;
 import com.graphhopper.jsprit.core.problem.job.Break;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 
 import java.util.Collection;
 
@@ -48,9 +46,6 @@
 
         private VehicleType type = VehicleTypeImpl.Builder.newInstance("noType").build();
 
-        public NoVehicle() {
-        }
-
         @Override
         public double getEarliestDeparture() {
             return 0;
@@ -110,8 +105,6 @@ public Break getBreak() {
      */
     public static class Builder {
 
-        static final Logger log = LoggerFactory.getLogger(Builder.class.getName());
-
         private String id;
 
         private double earliestStart = 0.0;
@@ -143,7 +136,7 @@ private Builder(String id) {
         /**
          * This can be used to initialize the new vehicle (to be built) with another vehicle.
          *
-         * @param baseVehicle
+         * @param baseVehicle vehicle to build from
          */
         private Builder(Vehicle baseVehicle) {
             this.id = baseVehicle.getId();
@@ -312,8 +305,8 @@ public static Builder newInstance(String vehicleId) {
         /**
          * Returns new instance of vehicle builder and initializes every attribute with a attributes of baseVehicle
          *
-         * @param baseVehicle
-         * @return
+         * @param baseVehicle base vehicle that is used to initialize the vehicle builder
+         * @return this builder
          */
         public static Builder newInstance(Vehicle baseVehicle) {
             return new Builder(baseVehicle);
@@ -333,8 +326,8 @@ public Builder setBreak(Break aBreak) {
     /**
      * Returns a simple copy of vehicle.
      *
-     * @param vehicle
-     * @return
+     * @param vehicle to copy
+     * @return copied vehicle
      */
     public static Vehicle copyOf(Vehicle vehicle) {
         return VehicleImpl.Builder.newInstance(vehicle).build();
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleType.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleType.java
index e2eee81d4..753254561 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleType.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleType.java
@@ -31,38 +31,34 @@
      *
      * @return typeId
      */
-    public String getTypeId();
+    String getTypeId();
 
     /**
      * Returns capacity dimensions.
      *
      * @return {@link com.graphhopper.jsprit.core.problem.Capacity}
      */
-    public Capacity getCapacityDimensions();
+    Capacity getCapacityDimensions();
 
     /**
      * Returns maximum velocity of this vehicle-type.
      *
      * @return max velocity
      */
-    public double getMaxVelocity();
+    double getMaxVelocity();
 
     /**
      * Return the cost-parameter of this vehicle-type.
      *
      * @return parameter
      */
-    public VehicleTypeImpl.VehicleCostParams getVehicleCostParams();
+    VehicleTypeImpl.VehicleCostParams getVehicleCostParams();
 
-    public String getProfile();
+    String getProfile();
 
     /**
      * @return User-specific domain data associated with the vehicle type
      */
-    public Object getUserData();
+    Object getUserData();
 
-    // Switch to this as soon as we switct to Java 8:
-    // default Object getUserData() {
-    // return null;
-    // };
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleTypeImpl.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleTypeImpl.java
index 931d61870..f4279a933 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleTypeImpl.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleTypeImpl.java
@@ -42,8 +42,7 @@
         }
 
         public final double fix;
-        @Deprecated
-        public final double perTimeUnit;
+
         public final double perTransportTimeUnit;
         public final double perDistanceUnit;
         public final double perWaitingTimeUnit;
@@ -52,7 +51,6 @@
         private VehicleCostParams(double fix, double perTimeUnit, double perDistanceUnit) {
             super();
             this.fix = fix;
-            this.perTimeUnit = perTimeUnit;
             this.perTransportTimeUnit = perTimeUnit;
             this.perDistanceUnit = perDistanceUnit;
             this.perWaitingTimeUnit = 0.;
@@ -61,7 +59,6 @@ private VehicleCostParams(double fix, double perTimeUnit, double perDistanceUnit
 
         public VehicleCostParams(double fix, double perTimeUnit, double perDistanceUnit, double perWaitingTimeUnit) {
             this.fix = fix;
-            this.perTimeUnit = perTimeUnit;
             this.perTransportTimeUnit = perTimeUnit;
             this.perDistanceUnit = perDistanceUnit;
             this.perWaitingTimeUnit = perWaitingTimeUnit;
@@ -70,7 +67,6 @@ public VehicleCostParams(double fix, double perTimeUnit, double perDistanceUnit,
 
         public VehicleCostParams(double fix, double perTimeUnit, double perDistanceUnit, double perWaitingTimeUnit, double perServiceTimeUnit) {
             this.fix = fix;
-            this.perTimeUnit = perTimeUnit;
             this.perTransportTimeUnit = perTimeUnit;
             this.perDistanceUnit = perDistanceUnit;
             this.perWaitingTimeUnit = perWaitingTimeUnit;
@@ -128,7 +124,6 @@ public int hashCode() {
         }
 
         private String id;
-        private int capacity = 0;
         private double maxVelo = Double.MAX_VALUE;
         /**
          * default cost values for default vehicle type
@@ -176,7 +171,7 @@ public Builder setUserData(Object userData) {
          * Sets the maximum velocity this vehicle-type can go [in meter per
          * seconds].
          *
-         * @param inMeterPerSeconds
+         * @param inMeterPerSeconds in m/s
          * @return this builder
          * @throws IllegalArgumentException
          *             if velocity is smaller than zero
@@ -193,7 +188,7 @@ public Builder setUserData(Object userData) {
          * <p>
          * <p>by default it is 0.
          *
-         * @param fixedCost
+         * @param fixedCost fixed cost of vehicle type
          * @return this builder
          * @throws IllegalArgumentException if fixedCost is smaller than zero
          */
@@ -208,7 +203,7 @@ public Builder setUserData(Object userData) {
          * <p>
          * <p>by default it is 1.0
          *
-         * @param perDistance
+         * @param perDistance cost per distance
          * @return this builder
          * @throws IllegalArgumentException if perDistance is smaller than zero
          */
@@ -224,7 +219,7 @@ public Builder setUserData(Object userData) {
          * <p>
          * <p>by default it is 0.0
          *
-         * @param perTime
+         * @param perTime cost per time
          * @return this builder
          * @throws IllegalArgumentException if costPerTime is smaller than zero
          * @deprecated use .setCostPerTransportTime(..) instead
@@ -241,7 +236,7 @@ public Builder setUserData(Object userData) {
          * <p>
          * <p>by default it is 0.0
          *
-         * @param perTime
+         * @param perTime cost per time
          * @return this builder
          * @throws IllegalArgumentException if costPerTime is smaller than zero
          */
@@ -256,7 +251,7 @@ public Builder setUserData(Object userData) {
          * <p>
          * <p>by default it is 0.0
          *
-         * @param perWaitingTime
+         * @param perWaitingTime cost per waiting time
          * @return this builder
          * @throws IllegalArgumentException if costPerTime is smaller than zero
          */
@@ -286,8 +281,8 @@ public VehicleTypeImpl build() {
         /**
          * Adds a capacity dimension.
          *
-         * @param dimIndex
-         * @param dimVal
+         * @param dimIndex dimension index
+         * @param dimVal dimension value
          * @return the builder
          * @throws IllegalArgumentException if dimVal < 0
          * @throws IllegalArgumentException    if capacity dimension is already set
@@ -310,7 +305,7 @@ public Builder addCapacityDimension(int dimIndex, int dimVal) {
          * your dimensions with <code>addCapacityDimension(int dimIndex, int dimVal)</code> or set the already built dimensions with
          * this method.
          *
-         * @param capacity
+         * @param capacity capacity of vehicle type
          * @return this builder
          * @throws IllegalArgumentException if capacityDimension has already been added
          */
@@ -358,8 +353,6 @@ public int hashCode() {
 
     private final String typeId;
 
-    private final int capacity;
-
     private final String profile;
 
     private final VehicleTypeImpl.VehicleCostParams vehicleCostParams;
@@ -373,12 +366,11 @@ public int hashCode() {
     /**
      * priv constructor constructing vehicle-type
      *
-     * @param builder
+     * @param builder vehicle type builder
      */
     private VehicleTypeImpl(VehicleTypeImpl.Builder builder) {
         this.userData = builder.userData;
         typeId = builder.id;
-        capacity = builder.capacity;
         maxVelocity = builder.maxVelo;
         vehicleCostParams = new VehicleCostParams(builder.fixedCost, builder.perTime, builder.perDistance, builder.perWaitingTime, builder.perServiceTime);
         capacityDimensions = builder.capacityDimensions;
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleTypeKey.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleTypeKey.java
index 4f8bdc44b..807d802b2 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleTypeKey.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleTypeKey.java
@@ -84,10 +84,8 @@ public int hashCode() {
 
     @Override
     public String toString() {
-        StringBuilder stringBuilder = new StringBuilder();
-        stringBuilder.append(type).append("_").append(startLocationId).append("_").append(endLocationId)
-            .append("_").append(Double.toString(earliestStart)).append("_").append(Double.toString(latestEnd));
-        return stringBuilder.toString();
+        return type + "_" + startLocationId + "_" + endLocationId +
+            "_" + Double.toString(earliestStart) + "_" + Double.toString(latestEnd);
     }
 
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsOptimizedTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsOptimizedTest.java
index 82f471e9a..db80d59a2 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsOptimizedTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsOptimizedTest.java
@@ -21,8 +21,10 @@
 import com.graphhopper.jsprit.core.algorithm.ruin.distance.JobDistance;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
+import com.graphhopper.jsprit.core.problem.job.Break;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.job.Service;
+
 import junit.framework.Assert;
 import org.junit.Before;
 import org.junit.Test;
@@ -48,6 +50,7 @@
     Service s5;
     Service s6;
     Service s7;
+    Break b1;
 
     @Before
     public void doBefore() {
@@ -60,6 +63,8 @@ public void doBefore() {
         s5 = Service.Builder.newInstance("s5").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 6)).build();
         s6 = Service.Builder.newInstance("s6").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 7)).build();
         s7 = Service.Builder.newInstance("s7").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 8)).build();
+        
+        b1 = Break.Builder.newInstance("b1").build();
 
         vrp = builder.addJob(target).addJob(s2).addJob(s3).addJob(s4).addJob(s5).addJob(s6).addJob(s7).build();
 
@@ -141,6 +146,16 @@ public void whenRequestingMoreNeighborsThanExisting_itShouldReturnMaxNeighbors()
         assertEquals(2, services.size());
     }
 
-
+    @Test
+    public void whenRequestingNeighborsForZeroIndexBreak_itShouldReturnEmptyIterator() {
+        JobNeighborhoodsOptimized jn = new JobNeighborhoodsOptimized(vrp,jobDistance,2);
+        jn.initialise();
+        Iterator<Job> iter = jn.getNearestNeighborsIterator(100, b1);
+        List<Service> services = new ArrayList<Service>();
+        while (iter.hasNext()) {
+            services.add((Service) iter.next());
+        }
+        assertEquals(0, services.size());
+    }
 
 }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblemTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblemTest.java
index 046f19343..4a993cd03 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblemTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblemTest.java
@@ -130,12 +130,8 @@ public void whenShipmentsAreAdded_vrpShouldContainThem() {
 
     @Test
     public void whenServicesAreAdded_vrpShouldContainThem() {
-        Service s1 = mock(Service.class);
-        when(s1.getId()).thenReturn("s1");
-        when(s1.getLocation()).thenReturn(Location.Builder.newInstance().setIndex(1).build());
-        Service s2 = mock(Service.class);
-        when(s2.getId()).thenReturn("s2");
-        when(s2.getLocation()).thenReturn(Location.Builder.newInstance().setIndex(1).build());
+        Service s1 = Service.Builder.newInstance("s1").setLocation(Location.Builder.newInstance().setIndex(1).build()).build();
+        Service s2 = Service.Builder.newInstance("s2").setLocation(Location.Builder.newInstance().setIndex(1).build()).build();
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addJob(s1).addJob(s2);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ServiceTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ServiceTest.java
index 9ab100159..2840c93ec 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ServiceTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ServiceTest.java
@@ -307,4 +307,11 @@ public void whenSettingUserData_itIsAssociatedWithTheJob() {
         assertEquals(42, two.getUserData());
         assertNull(three.getUserData());
     }
+
+    @Test
+    public void testServiceActivity() {
+        Service one = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc")).build();
+        assertEquals(1, one.getActivities().size());
+        assertEquals(Activity.Type.SERVICE, one.getActivities().get(0).getActivityType());
+    }
 }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ShipmentTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ShipmentTest.java
index 7e271092e..214381611 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ShipmentTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ShipmentTest.java
@@ -464,4 +464,13 @@ public void whenNotAddingMaxTimeInVehicle_itShouldBeDefault(){
         Assert.assertEquals(Double.MAX_VALUE, s.getMaxTimeInVehicle(),0.001);
     }
 
+    @Test
+    public void testShipmentActivities() {
+        Job job = Shipment.Builder.newInstance("s").setPickupLocation(Location.newInstance("loc")).setDeliveryLocation(Location.newInstance("loc"))
+            .build();
+        assertEquals(2, job.getActivities().size());
+        assertEquals(Activity.Type.PICKUP, job.getActivities().get(0).getActivityType());
+        assertEquals(Activity.Type.DELIVERY, job.getActivities().get(1).getActivityType());
+    }
+
 }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TestTourActivities.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TestTourActivities.java
index 51fac31b2..6604bf2e7 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TestTourActivities.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TestTourActivities.java
@@ -22,6 +22,7 @@
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import org.junit.Before;
 import org.junit.Test;
+import org.mockito.Mockito;
 
 import static org.junit.Assert.*;
 
@@ -118,6 +119,19 @@ public void whenRemovingShipment_theirCorrespondingActivitiesShouldBeRemoved() {
         assertEquals(0, tour.getActivities().size());
     }
 
+    @Test
+    public void removingNonJobActivityShouldWork() {
+        TourActivity nonJobAct = Mockito.mock(TourActivity.class);
+
+        tour.addActivity(nonJobAct);
+        assertTrue(tour.getActivities().contains(nonJobAct));
+
+        tour.removeActivity(nonJobAct);
+
+        assertTrue(tour.isEmpty());
+        assertFalse(tour.getActivities().contains(nonJobAct));
+    }
+
     @Test
     public void removingActivityShouldWork() {
         tour.addActivity(act);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleTypeImplTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleTypeImplTest.java
index bd1454794..168797dde 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleTypeImplTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleTypeImplTest.java
@@ -136,11 +136,6 @@ public void whenPerTimeCostsSmallerThanZero_itShouldThrowException() {
         VehicleTypeImpl type = VehicleTypeImpl.Builder.newInstance("type").setCostPerTime(-10).build();
     }
 
-    @Test
-    public void whenSettingPerTimeCosts_itShouldBeSetCorrectly() {
-        VehicleTypeImpl type = VehicleTypeImpl.Builder.newInstance("type").setCostPerTime(10).build();
-        assertEquals(10.0, type.getVehicleCostParams().perTimeUnit, 0.0);
-    }
 
     @Test
     public void whenHavingTwoTypesWithTheSameId_theyShouldBeEqual() {
diff --git a/jsprit-examples/pom.xml b/jsprit-examples/pom.xml
index 6576796f6..8a775f246 100644
--- a/jsprit-examples/pom.xml
+++ b/jsprit-examples/pom.xml
@@ -20,7 +20,7 @@
     <parent>
         <groupId>com.graphhopper</groupId>
         <artifactId>jsprit</artifactId>
-        <version>1.7.3-SNAPSHOT</version>
+        <version>1.8-SNAPSHOT</version>
     </parent>
     <modelVersion>4.0.0</modelVersion>
 
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExample.java
index 8cf9f200f..d2c79afd9 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExample.java
@@ -22,7 +22,6 @@
 import com.graphhopper.jsprit.analysis.toolbox.Plotter;
 import com.graphhopper.jsprit.core.algorithm.VehicleRoutingAlgorithm;
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
-import com.graphhopper.jsprit.core.algorithm.box.SchrimpfFactory;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Service;
diff --git a/jsprit-instances/pom.xml b/jsprit-instances/pom.xml
index 5f657739c..72a47d531 100644
--- a/jsprit-instances/pom.xml
+++ b/jsprit-instances/pom.xml
@@ -20,7 +20,7 @@
     <parent>
         <groupId>com.graphhopper</groupId>
         <artifactId>jsprit</artifactId>
-        <version>1.7.3-SNAPSHOT</version>
+        <version>1.8-SNAPSHOT</version>
     </parent>
     <modelVersion>4.0.0</modelVersion>
 
diff --git a/jsprit-io/pom.xml b/jsprit-io/pom.xml
index 1886f762c..b41e04501 100644
--- a/jsprit-io/pom.xml
+++ b/jsprit-io/pom.xml
@@ -23,7 +23,7 @@
     <parent>
         <groupId>com.graphhopper</groupId>
         <artifactId>jsprit</artifactId>
-        <version>1.7.3-SNAPSHOT</version>
+        <version>1.8-SNAPSHOT</version>
     </parent>
     <modelVersion>4.0.0</modelVersion>
 
diff --git a/pom.xml b/pom.xml
index 3740641cd..ffe307d16 100644
--- a/pom.xml
+++ b/pom.xml
@@ -22,7 +22,7 @@
 
     <groupId>com.graphhopper</groupId>
     <artifactId>jsprit</artifactId>
-    <version>1.7.3-SNAPSHOT</version>
+    <version>1.8-SNAPSHOT</version>
 
     <packaging>pom</packaging>
 
@@ -71,7 +71,7 @@
     </modules>
 
     <properties>
-        <jdkVersion>1.7</jdkVersion>
+        <jdkVersion>1.8</jdkVersion>
         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
         <junit.version>4.12</junit.version>
         <mockito.version>1.9.5</mockito.version>
