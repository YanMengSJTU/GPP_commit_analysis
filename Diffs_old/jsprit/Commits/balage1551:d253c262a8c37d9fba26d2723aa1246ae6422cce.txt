diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/HumanReadableEnabled.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/HumanReadableEnabled.java
new file mode 100644
index 000000000..f8b427a66
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/HumanReadableEnabled.java
@@ -0,0 +1,27 @@
+package com.graphhopper.jsprit.core.reporting.columndefinition;
+
+/**
+ * Interface for columns with human readable formats.
+ *
+ * @author balage
+ *
+ * @param <T>
+ *            The type of the class itself. (Self-reference)
+ */
+public interface HumanReadableEnabled<T extends HumanReadableEnabled<T>> {
+    /**
+     * Sets the formatter.
+     * 
+     * @param formatter
+     *            The formatter.
+     * @return The object itself.
+     */
+    public T withFormatter(HumanReadableTimeFormatter formatter);
+
+    /**
+     * Marks the column human readable.
+     * 
+     * @return The object itself.
+     */
+    public T asHumanReadable();
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/HumanReadableTimeFormatter.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/HumanReadableTimeFormatter.java
new file mode 100644
index 000000000..122673a6a
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/HumanReadableTimeFormatter.java
@@ -0,0 +1,102 @@
+package com.graphhopper.jsprit.core.reporting.columndefinition;
+
+import java.time.LocalDate;
+import java.time.LocalDateTime;
+import java.time.LocalTime;
+import java.time.format.DateTimeFormatter;
+import java.time.temporal.ChronoUnit;
+
+/**
+ * Time value or duration formatter for human readable format.
+ * <p>
+ * The formatter uses the {@linkplain DateTimeFormatter} for time value to
+ * string formatting. The default format is the standard ISO time format (
+ * <code>"HH:mm:ss"</code>). If the input long value is X, the time value is
+ * calculated by adding X of the units to the origin. The default value for
+ * origin is midnight (00:00) of the current day (note, that the default
+ * formatting ignores the date value), the default unit is
+ * {@linkplain ChronoUnit#SECONDS}.
+ * </p>
+ *
+ * @author balage
+ *
+ */
+public class HumanReadableTimeFormatter {
+
+    // Default origin
+    public static final LocalDateTime DEFAULT_ORIGIN = LocalDateTime.of(LocalDate.now(), LocalTime.MIDNIGHT);
+
+    // The formatter
+    private DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("HH:mm:ss");
+    // The origin
+    private LocalDateTime origin = DEFAULT_ORIGIN;
+    // The time unit
+    private ChronoUnit unit = ChronoUnit.SECONDS;
+
+    /**
+     * Constructor with default settings. See
+     * {@linkplain HumanReadableTimeFormatter} for default values.
+     */
+    public HumanReadableTimeFormatter() {
+    }
+
+    /**
+     * Constructor with time mapping values, but with default formatting.
+     *
+     * @param origin
+     *            The origin data and time of the time mapping. (Note that with
+     *            default formatter, the date part is ignored.)
+     * @param unit
+     *            The unit used to map the numerical value to the time value.
+     */
+    public HumanReadableTimeFormatter(LocalDateTime origin, ChronoUnit unit) {
+        this.origin = origin;
+        this.unit = unit;
+    }
+
+    /**
+     * Constructor with user-defined formatting.
+     *
+     * @param dateFormatter
+     *            The date formatter.
+     */
+    public HumanReadableTimeFormatter(DateTimeFormatter dateFormatter) {
+        this.dateFormatter = dateFormatter;
+    }
+
+    /**
+     * Constructor with both time mapping values and user-defined formatting.
+     *
+     * @param dateFormatter
+     *            The date formatter.
+     * @param origin
+     *            The origin data and time of the time mapping.
+     * @param unit
+     *            The unit used to map the numerical value to the time value.
+     */
+    public HumanReadableTimeFormatter(DateTimeFormatter dateFormatter, LocalDateTime origin, ChronoUnit unit) {
+        this.dateFormatter = dateFormatter;
+        this.origin = origin;
+        this.unit = unit;
+    }
+
+    /**
+     * Formats a numerical value into a human readable time value.
+     * <p>
+     * First a time value is calculated by adding <code>timeValue</code> of the
+     * units to the origin. Then the time value is formatted by the formatter.
+     * </p>
+     *
+     * @param timeValue
+     *            The value to convert.
+     * @return The converted value.
+     */
+    public String format(Long timeValue) {
+        if (timeValue == null) {
+            return null;
+        } else {
+            LocalDateTime dt = origin.plus(timeValue, unit);
+            return dateFormatter.format(dt);
+        }
+    }
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/SolutionPrintColumnLists.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/SolutionPrintColumnLists.java
index 83ead82b2..133768628 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/SolutionPrintColumnLists.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/SolutionPrintColumnLists.java
@@ -12,8 +12,6 @@
 import com.graphhopper.jsprit.core.reporting.route.ActivityTypePrinterColumn;
 import com.graphhopper.jsprit.core.reporting.route.ArrivalTimePrinterColumn;
 import com.graphhopper.jsprit.core.reporting.route.EndTimePrinterColumn;
-import com.graphhopper.jsprit.core.reporting.route.HumanReadableEnabled;
-import com.graphhopper.jsprit.core.reporting.route.HumanReadableTimeFormatter;
 import com.graphhopper.jsprit.core.reporting.route.JobNamePrinterColumn;
 import com.graphhopper.jsprit.core.reporting.route.JobPriorityPrinterColumn;
 import com.graphhopper.jsprit.core.reporting.route.JobTypePrinterColumn;
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractCostPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractCostPrinterColumn.java
index 813788fd5..d12b6e8d6 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractCostPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractCostPrinterColumn.java
@@ -7,6 +7,17 @@
 import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
 import com.graphhopper.jsprit.core.reporting.columndefinition.IntColumnType;
 
+/**
+ * Abstract base class for cost calculators.
+ *
+ * <p>
+ * this implementation only defines the ColumnDefinition as a right aligned
+ * integer column.
+ * </p>
+ *
+ * @author balage
+ *
+ */
 public abstract class AbstractCostPrinterColumn
 extends AbstractPrinterColumn<RoutePrinterContext, Integer, AbstractCostPrinterColumn>
 implements CostAndTimeExtractor {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractDurationPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractDurationPrinterColumn.java
index 4974ae973..8f1122da9 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractDurationPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractDurationPrinterColumn.java
@@ -3,17 +3,34 @@
 import java.util.function.Consumer;
 
 import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
+import com.graphhopper.jsprit.core.reporting.columndefinition.HumanReadableTimeFormatter;
 
+/**
+ * Abstract base class for duration columns.
+ *
+ * @author balage
+ *
+ * @param <T>
+ *            Self reference.
+ * @See {@linkplain AbstractTimePrinterColumn}
+ */
 public abstract class AbstractDurationPrinterColumn<T extends AbstractDurationPrinterColumn<T>>
 extends AbstractTimePrinterColumn<T> {
 
+    /**
+     * Constructor to define a numeric format column.
+     */
     public AbstractDurationPrinterColumn() {
         this(null);
     }
 
+    /**
+     * Constructor to define a numeric format column, with a post creation
+     * decorator provided.
+     */
     public AbstractDurationPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
-        withFormatter(new HumanReadableDurationFormatter());
+        withFormatter(new HumanReadableTimeFormatter());
     }
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractSizeDimensionPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractSizeDimensionPrinterColumn.java
index 7b04c4b11..999532a84 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractSizeDimensionPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractSizeDimensionPrinterColumn.java
@@ -8,15 +8,34 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
 import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
+import com.graphhopper.jsprit.core.reporting.columndefinition.HumanReadableTimeFormatter;
 import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
 
+/**
+ * Abstract base class for size columns.
+ *
+ * <p>
+ * The representation of a size is the dimension values listed comma separated
+ * and wrapped by brackets. (For example: [2, 0, -1])
+ * </p>
+ *
+ * @author balage
+ *
+ * @See {@linkplain HumanReadableTimeFormatter}
+ */
 public abstract class AbstractSizeDimensionPrinterColumn
 extends AbstractPrinterColumn<RoutePrinterContext, String, AbstractSizeDimensionPrinterColumn> {
 
+    /**
+     * Constructor.
+     */
     public AbstractSizeDimensionPrinterColumn() {
         super();
     }
 
+    /**
+     * Constructor with a post creation decorator provided.
+     */
     public AbstractSizeDimensionPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
@@ -26,6 +45,14 @@ public AbstractSizeDimensionPrinterColumn(Consumer<ColumnDefinition.Builder> dec
         return new ColumnDefinition.Builder(new StringColumnType());
     }
 
+    /**
+     * {@inheritDoc}
+     *
+     * <p>
+     * The result is a string representation of the size (the dimension values
+     * listed comma separated and wrapped by brackets) or null.
+     * </p>
+     */
     @Override
     public String getData(RoutePrinterContext context) {
         SizeDimension sd = getSizeDimension(context);
@@ -37,6 +64,13 @@ public String getData(RoutePrinterContext context) {
         }
     }
 
+    /**
+     * Extracts the size dimension.
+     *
+     * @param context
+     *            The context.
+     * @return The size dimension or null.
+     */
     protected abstract SizeDimension getSizeDimension(RoutePrinterContext context);
 
     protected SizeDimension calculateInitialLoad(RoutePrinterContext context) {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractTimePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractTimePrinterColumn.java
index 8b2d1b9ff..14639f364 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractTimePrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractTimePrinterColumn.java
@@ -4,24 +4,55 @@
 
 import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
 import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
+import com.graphhopper.jsprit.core.reporting.columndefinition.HumanReadableEnabled;
+import com.graphhopper.jsprit.core.reporting.columndefinition.HumanReadableTimeFormatter;
 import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
 
+/**
+ * Abstract base class for time and (technically) duration columns.
+ *
+ * <p>
+ * Each columns derived from this abstract base has two variants: a numerical
+ * (an integer value) and a human readable. The numerical value displays the
+ * integer value representing the time values internally. The human readable
+ * value converts this value into a calendar (date and time) value.
+ * </p>
+ *
+ * @author balage
+ *
+ * @param <T>
+ *            Self reference.
+ * @See {@linkplain HumanReadableTimeFormatter}
+ */
 public abstract class AbstractTimePrinterColumn<T extends AbstractTimePrinterColumn<T>>
 extends AbstractPrinterColumn<RoutePrinterContext, String, AbstractTimePrinterColumn<T>>
 implements HumanReadableEnabled<T> {
 
+    // The time formatter to use (only used when humanReadable flag is true)
     private HumanReadableTimeFormatter formatter;
+    // Whether to use human readable form
     private boolean humanReadable = false;
 
+    /**
+     * Constructor to define a numeric format column.
+     */
     public AbstractTimePrinterColumn() {
         this(null);
     }
 
+    /**
+     * Constructor to define a numeric format column, with a post creation
+     * decorator provided.
+     */
     public AbstractTimePrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
         formatter = new HumanReadableTimeFormatter();
     }
 
+    /**
+     * {@inheritDoc}
+     *
+     */
     @Override
     @SuppressWarnings("unchecked")
     public T withFormatter(HumanReadableTimeFormatter formatter) {
@@ -29,6 +60,10 @@ public T withFormatter(HumanReadableTimeFormatter formatter) {
         return (T) this;
     }
 
+    /**
+     * {@inheritDoc}
+     *
+     */
     @Override
     @SuppressWarnings("unchecked")
     public T asHumanReadable() {
@@ -37,11 +72,34 @@ public T asHumanReadable() {
     }
 
 
+    /**
+     * {@inheritDoc}
+     *
+     * <p>
+     * The column builder returned will be a string column with the null value
+     * represented by a hyphen ("-").
+     * </p>
+     *
+     */
     @Override
     public ColumnDefinition.Builder getColumnBuilder() {
         return new ColumnDefinition.Builder(new StringColumnType("-"));
     }
 
+    /**
+     * {@inheritDoc}
+     *
+     * <p>
+     * The implementation delegates the value extracting to the abstract method
+     * {@linkplain #getValue(RoutePrinterContext)}.
+     * <p>
+     * <p>
+     * If the value is null, returns null, otherwise it returns the string
+     * representation of the numeric value or the human readable format based on
+     * the humanReadable flag.
+     * </p>
+     *
+     */
     @Override
     public String getData(RoutePrinterContext context) {
         Long timeValue = getValue(context);
@@ -55,6 +113,13 @@ public String getData(RoutePrinterContext context) {
         }
     }
 
+    /**
+     * Extracts the numerical value for this time or duration column.
+     *
+     * @param context
+     *            The context.
+     * @return The numerical value or null.
+     */
     protected abstract Long getValue(RoutePrinterContext context);
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractTimeWindowPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractTimeWindowPrinterColumn.java
index a44eaae1c..7a3dfde8f 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractTimeWindowPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractTimeWindowPrinterColumn.java
@@ -7,19 +7,47 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
 import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
+import com.graphhopper.jsprit.core.reporting.columndefinition.HumanReadableEnabled;
+import com.graphhopper.jsprit.core.reporting.columndefinition.HumanReadableTimeFormatter;
 import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
 
+/**
+ * Abstract base class for time window columns.
+ *
+ * <p>
+ * Each columns derived from this abstract base has two variants: a numerical
+ * (an integer value) and a human readable. The numerical value displays the
+ * integer value pair representing the time windows, the same the algorithm used
+ * internally. The human readable value converts this value into a calendar
+ * (date and time) value pair.
+ * </p>
+ *
+ * @author balage
+ *
+ * @param <T>
+ *            Self reference.
+ * @See {@linkplain HumanReadableTimeFormatter}
+ */
 public abstract class AbstractTimeWindowPrinterColumn<T extends AbstractTimeWindowPrinterColumn<T>>
 extends AbstractPrinterColumn<RoutePrinterContext, String, AbstractTimeWindowPrinterColumn<T>>
 implements HumanReadableEnabled<T> {
 
+    // The time formatter to use (only used when humanReadable flag is true)
     private HumanReadableTimeFormatter formatter;
+    // Whether to use human readable form
     private boolean humanReadable = false;
 
+    /**
+     * Constructor to define a numeric format column.
+     */
     public AbstractTimeWindowPrinterColumn() {
         this(null);
     }
 
+    /**
+     * Constructor to define a numeric format column, with a post creation
+     * decorator provided.
+     */
     public AbstractTimeWindowPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
         formatter = new HumanReadableTimeFormatter();
@@ -45,6 +73,20 @@ public T asHumanReadable() {
         return new ColumnDefinition.Builder(new StringColumnType("-"));
     }
 
+    /**
+     * {@inheritDoc}
+     *
+     * <p>
+     * The implementation delegates the value extracting to the abstract method
+     * {@linkplain #getValue(RoutePrinterContext)}.
+     * <p>
+     * <p>
+     * If the value is null or empty, returns null, otherwise it returns the
+     * string representation of the numeric value or the human readable format
+     * based on the humanReadable flag.
+     * </p>
+     *
+     */
     @Override
     public String getData(RoutePrinterContext context) {
         Collection<TimeWindow> timeWindows = getValue(context);
@@ -54,6 +96,20 @@ public String getData(RoutePrinterContext context) {
         return timeWindows.stream().map(tw -> formatTimeWindow(tw)).collect(Collectors.joining());
     }
 
+    /**
+     * Formats the time window.
+     *
+     * <p>
+     * The implementation returns the two (start, end) values sepratated by
+     * hyphen (-) and wrapped within brackets. When the end value is
+     * {@linkplain Double#MAX_VALUE} it omits the value indicating open
+     * interval.
+     * </p>
+     *
+     * @param tw
+     *            The time window to format.
+     * @return The string representation of the time window.
+     */
     protected String formatTimeWindow(TimeWindow tw) {
         String res = "";
         if (humanReadable) {
@@ -77,6 +133,13 @@ protected String formatTimeWindow(TimeWindow tw) {
         return res;
     }
 
+    /**
+     * Extracts the collection of time windows from the context.
+     * 
+     * @param context
+     *            The context.
+     * @return The collection of time windows.
+     */
     protected abstract Collection<TimeWindow> getValue(RoutePrinterContext context);
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityCostPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityCostPrinterColumn.java
index cf902e97a..e94fae46f 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityCostPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityCostPrinterColumn.java
@@ -4,12 +4,24 @@
 
 import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
 
+/**
+ * Cost of the activity.
+ *
+ * @author balage
+ *
+ */
 public class ActivityCostPrinterColumn extends AbstractCostPrinterColumn {
 
+    /**
+     * Constructor.
+     */
     public ActivityCostPrinterColumn() {
         super();
     }
 
+    /**
+     * Constructor with a post creation decorator provided.
+     */
     public ActivityCostPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityDurationPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityDurationPrinterColumn.java
index 9c59272b2..383c6f169 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityDurationPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityDurationPrinterColumn.java
@@ -6,15 +6,41 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
 
+/**
+ * Activity duration column.
+ * <p>
+ * The activity duration is the sum of the activity operation (service) time and
+ * the transport time to the location.
+ * </p>
+ * <p>
+ * This column is stateful and stores the previous activity.
+ * </p>
+ *
+ * @author balage
+ *
+ * @see {@linkplain ArrivalTimePrinterColumn}
+ * @see {@linkplain StartTimePrinterColumn}
+ * @see {@linkplain EndTimePrinterColumn}
+ * @see {@linkplain TravelDurationPrinterColumn}
+ * @see {@linkplain WaitingDurationPrinterColumn}
+ * @see {@linkplain OperationDurationPrinterColumn}
+ */
 public class ActivityDurationPrinterColumn extends AbstractDurationPrinterColumn<ActivityDurationPrinterColumn>
 implements CostAndTimeExtractor {
 
+    // The previous activity
     private TourActivity prevAct;
 
+    /**
+     * Constructor.
+     */
     public ActivityDurationPrinterColumn() {
         super();
     }
 
+    /**
+     * Constructor with a post creation decorator provided.
+     */
     public ActivityDurationPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityLoadChangePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityLoadChangePrinterColumn.java
index ed32571b7..9aaceaa90 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityLoadChangePrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityLoadChangePrinterColumn.java
@@ -7,12 +7,29 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
 
+/**
+ * The load change value (signed size) of the activity.
+ * 
+ * <p>
+ * If the activity is a route start, the returned value is the initial load,
+ * otherwise the loadChange value of the activity.
+ * </p>
+ *
+ * @author balage
+ *
+ */
 public class ActivityLoadChangePrinterColumn extends AbstractSizeDimensionPrinterColumn {
 
+    /**
+     * Constructor.
+     */
     public ActivityLoadChangePrinterColumn() {
         super();
     }
 
+    /**
+     * Constructor with a post creation decorator provided.
+     */
     public ActivityLoadChangePrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
@@ -27,6 +44,13 @@ protected String getDefaultTitle() {
         return "load change";
     }
 
+    /**
+     * {@inheritDoc}
+     * <p>
+     * If the activity is a route start, the returned value is the initial load,
+     * otherwise the loadChange value of the activity.
+     * </p>
+     */
     @Override
     protected SizeDimension getSizeDimension(RoutePrinterContext context) {
         TourActivity act = context.getActivity();
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityTypePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityTypePrinterColumn.java
index 5c5d73f07..d2e87c0d1 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityTypePrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityTypePrinterColumn.java
@@ -7,12 +7,24 @@
 import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
 import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
 
+/**
+ * The type of the activity.
+ *
+ * @author balage
+ *
+ */
 public class ActivityTypePrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, String, ActivityTypePrinterColumn> {
 
+    /**
+     * Constructor.
+     */
     public ActivityTypePrinterColumn() {
         super();
     }
 
+    /**
+     * Constructor with a post creation decorator provided.
+     */
     public ActivityTypePrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ArrivalTimePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ArrivalTimePrinterColumn.java
index 4036e7aeb..b4fb6f82f 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ArrivalTimePrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ArrivalTimePrinterColumn.java
@@ -6,12 +6,35 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
 
+/**
+ * Arrival time of the activity.
+ * <p>
+ * For route start the value is undefined (null), for other activities, it is
+ * the earliest time the location of the activity is reached. (Note, that it is
+ * not the time the activity is started, there may be an idle time before.)
+ * </p>
+ *
+ * @author balage
+ *
+ * @see {@linkplain StartTimePrinterColumn}
+ * @see {@linkplain EndTimePrinterColumn}
+ * @see {@linkplain TravelDurationPrinterColumn}
+ * @see {@linkplain WaitingDurationPrinterColumn}
+ * @see {@linkplain OperationDurationPrinterColumn}
+ * @see {@linkplain ActivityDurationPrinterColumn}
+ */
 public class ArrivalTimePrinterColumn extends AbstractTimePrinterColumn<ArrivalTimePrinterColumn> {
 
+    /**
+     * Constructor.
+     */
     public ArrivalTimePrinterColumn() {
         super();
     }
 
+    /**
+     * Constructor with a post creation decorator provided.
+     */
     public ArrivalTimePrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/CostAndTimeExtractor.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/CostAndTimeExtractor.java
index 987ac4c0b..e374708e6 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/CostAndTimeExtractor.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/CostAndTimeExtractor.java
@@ -2,13 +2,33 @@
 
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 
+/**
+ * Utility interface for extracting cost and time values from problem.
+ *
+ * @author balage
+ *
+ */
 public interface CostAndTimeExtractor {
 
+    /**
+     * Returns the activity cost extracted from the context.
+     *
+     * @param context
+     *            The context.
+     * @return The activity cost.
+     */
     default double getActivityCost(RoutePrinterContext context) {
         return context.getProblem().getActivityCosts().getActivityCost(context.getActivity(),
                         context.getActivity().getArrTime(), context.getRoute().getDriver(), context.getRoute().getVehicle());
     }
 
+    /**
+     * Returns the transport cost extracted from the context.
+     *
+     * @param context
+     *            The context.
+     * @return The transport cost.
+     */
     default double getTransportCost(RoutePrinterContext context, TourActivity prevAct) {
         return prevAct == null ? 0d
                         : context.getProblem().getTransportCosts().getTransportCost(prevAct.getLocation(),
@@ -17,6 +37,13 @@ default double getTransportCost(RoutePrinterContext context, TourActivity prevAc
                                         context.getRoute().getVehicle());
     }
 
+    /**
+     * Returns the transport time extracted from the context.
+     *
+     * @param context
+     *            The context.
+     * @return The transpoert time.
+     */
     default double getTransportTime(RoutePrinterContext context, TourActivity prevAct) {
         return prevAct == null ? 0d
                         : context.getProblem().getTransportCosts().getTransportTime(prevAct.getLocation(),
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/EndTimePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/EndTimePrinterColumn.java
index d52a41f27..6f8418835 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/EndTimePrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/EndTimePrinterColumn.java
@@ -6,12 +6,35 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
 
+/**
+ * End time of the activity.
+ * <p>
+ * For route end the value is undefined (null), for other activities, it is the
+ * time when the activity is finished and the vehicle could progress toward the
+ * next activity.
+ * </p>
+ *
+ * @author balage
+ *
+ * @see {@linkplain ArrivalTimePrinterColumn}
+ * @see {@linkplain StartTimePrinterColumn}
+ * @see {@linkplain TravelDurationPrinterColumn}
+ * @see {@linkplain WaitingDurationPrinterColumn}
+ * @see {@linkplain OperationDurationPrinterColumn}
+ * @see {@linkplain ActivityDurationPrinterColumn}
+ */
 public class EndTimePrinterColumn extends AbstractTimePrinterColumn<EndTimePrinterColumn> {
 
+    /**
+     * Constructor.
+     */
     public EndTimePrinterColumn() {
         super();
     }
 
+    /**
+     * Constructor with a post creation decorator provided.
+     */
     public EndTimePrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/HumanReadableDurationFormatter.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/HumanReadableDurationFormatter.java
deleted file mode 100644
index 70177bea4..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/HumanReadableDurationFormatter.java
+++ /dev/null
@@ -1,28 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.route;
-
-import java.time.LocalDate;
-import java.time.LocalDateTime;
-import java.time.LocalTime;
-import java.time.format.DateTimeFormatter;
-import java.time.temporal.ChronoUnit;
-
-public class HumanReadableDurationFormatter extends HumanReadableTimeFormatter {
-
-    public static final LocalDateTime DEFAULT_DUARATION_ORIGIN = LocalDateTime.of(LocalDate.now(), LocalTime.MIDNIGHT);
-
-    public HumanReadableDurationFormatter() {
-    }
-
-    public HumanReadableDurationFormatter(ChronoUnit unit) {
-        super(DEFAULT_DUARATION_ORIGIN, unit);
-    }
-
-    public HumanReadableDurationFormatter(DateTimeFormatter dateFormatter) {
-        super(dateFormatter);
-    }
-
-    public HumanReadableDurationFormatter(DateTimeFormatter dateFormatter, ChronoUnit unit) {
-        super(dateFormatter, DEFAULT_DUARATION_ORIGIN, unit);
-    }
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/HumanReadableEnabled.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/HumanReadableEnabled.java
deleted file mode 100644
index 463f6f851..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/HumanReadableEnabled.java
+++ /dev/null
@@ -1,7 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.route;
-
-public interface HumanReadableEnabled<T extends HumanReadableEnabled<T>> {
-    public T withFormatter(HumanReadableTimeFormatter formatter);
-
-    public T asHumanReadable();
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/HumanReadableTimeFormatter.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/HumanReadableTimeFormatter.java
deleted file mode 100644
index c7ece7636..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/HumanReadableTimeFormatter.java
+++ /dev/null
@@ -1,43 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.route;
-
-import java.time.LocalDate;
-import java.time.LocalDateTime;
-import java.time.LocalTime;
-import java.time.format.DateTimeFormatter;
-import java.time.temporal.ChronoUnit;
-
-public class HumanReadableTimeFormatter {
-
-    public static final LocalDateTime DEFAULT_ORIGIN = LocalDateTime.of(LocalDate.now(), LocalTime.MIDNIGHT);
-
-    private DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("HH:mm:ss");
-    private LocalDateTime origin = DEFAULT_ORIGIN;
-    private ChronoUnit unit = ChronoUnit.SECONDS;
-
-    public HumanReadableTimeFormatter() {
-    }
-
-    public HumanReadableTimeFormatter(LocalDateTime origin, ChronoUnit unit) {
-        this.origin = origin;
-        this.unit = unit;
-    }
-
-    public HumanReadableTimeFormatter(DateTimeFormatter dateFormatter) {
-        this.dateFormatter = dateFormatter;
-    }
-
-    public HumanReadableTimeFormatter(DateTimeFormatter dateFormatter, LocalDateTime origin, ChronoUnit unit) {
-        this.dateFormatter = dateFormatter;
-        this.origin = origin;
-        this.unit = unit;
-    }
-
-    public String format(Long timeValue) {
-        if (timeValue == null) {
-            return null;
-        } else {
-            LocalDateTime dt = origin.plus(timeValue, unit);
-            return dateFormatter.format(dt);
-        }
-    }
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/JobNamePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/JobNamePrinterColumn.java
index 983f42aba..33919c687 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/JobNamePrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/JobNamePrinterColumn.java
@@ -9,12 +9,28 @@
 import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
 import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
 
+/**
+ * Name (id) of the job.
+ *
+ * <p>
+ * This column provides the {@linkplain Job#getId()} of the associated job of
+ * the activity for job activities and null for other route activities.
+ * </p>
+ *
+ * @author balage
+ */
 public class JobNamePrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, String, JobNamePrinterColumn> {
 
+    /**
+     * Constructor.
+     */
     public JobNamePrinterColumn() {
         super();
     }
 
+    /**
+     * Constructor with a post creation decorator provided.
+     */
     public JobNamePrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/JobPriorityPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/JobPriorityPrinterColumn.java
index d79185177..b22337afd 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/JobPriorityPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/JobPriorityPrinterColumn.java
@@ -10,14 +10,31 @@
 import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
 import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
 
+/**
+ * Priority of the job.
+ *
+ * <p>
+ * This column provides the named (LOW, MEDIUM, HIGH) representation of
+ * {@linkplain Job#getPriority()} of the associated job of the activity for job
+ * activities and null for other route activities.
+ * </p>
+ *
+ * @author balage
+ */
 public class JobPriorityPrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, String, JobPriorityPrinterColumn> {
 
     private static final String[] PRIORITY_NAMES = new String[] { "", "HIGH", "MEDIUM", "LOW" };
 
+    /**
+     * Constructor.
+     */
     public JobPriorityPrinterColumn() {
         super();
     }
 
+    /**
+     * Constructor with a post creation decorator provided.
+     */
     public JobPriorityPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/JobTypePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/JobTypePrinterColumn.java
index f1ba970c1..b4b50062b 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/JobTypePrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/JobTypePrinterColumn.java
@@ -9,12 +9,28 @@
 import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
 import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
 
+/**
+ * Priority of the job.
+ *
+ * <p>
+ * This column provides the simple class name of the associated job of the
+ * activity for job activities and null for other route activities.
+ * </p>
+ *
+ * @author balage
+ */
 public class JobTypePrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, String, JobTypePrinterColumn> {
 
+    /**
+     * Constructor.
+     */
     public JobTypePrinterColumn() {
         super();
     }
 
+    /**
+     * Constructor with a post creation decorator provided.
+     */
     public JobTypePrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/LoacationPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/LoacationPrinterColumn.java
index 14f2eec72..9895b4bf2 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/LoacationPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/LoacationPrinterColumn.java
@@ -8,12 +8,28 @@
 import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
 import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
 
+/**
+ * Priority of the job.
+ *
+ * <p>
+ * This column provides the simple class name of the associated job of the
+ * activity for job activities and null for other route activities.
+ * </p>
+ *
+ * @author balage
+ */
 public class LoacationPrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, String, LoacationPrinterColumn> {
 
+    /**
+     * Constructor.
+     */
     public LoacationPrinterColumn() {
         super();
     }
 
+    /**
+     * Constructor with a post creation decorator provided.
+     */
     public LoacationPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/OperationDurationPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/OperationDurationPrinterColumn.java
index 9b4d1990c..b4ea2c839 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/OperationDurationPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/OperationDurationPrinterColumn.java
@@ -2,15 +2,38 @@
 
 import java.util.function.Consumer;
 
+import com.graphhopper.jsprit.core.problem.solution.route.activity.AbstractActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
 
+/**
+ * Duration of the activity.
+ * <p>
+ * The time it takes to complete the on-site task of the activity. This is the
+ * value from {@linkplain AbstractActivity#getOperationTime()}.
+ * </p>
+ *
+ * @author balage
+ *
+ * @see {@linkplain ArrivalTimePrinterColumn}
+ * @see {@linkplain StartTimePrinterColumn}
+ * @see {@linkplain EndTimePrinterColumn}
+ * @see {@linkplain TravelDurationPrinterColumn}
+ * @see {@linkplain WaitingDurationPrinterColumn}
+ * @see {@linkplain ActivityDurationPrinterColumn}
+ */
 public class OperationDurationPrinterColumn extends AbstractDurationPrinterColumn<OperationDurationPrinterColumn> {
 
+    /**
+     * Constructor.
+     */
     public OperationDurationPrinterColumn() {
         super();
     }
 
+    /**
+     * Constructor with a post creation decorator provided.
+     */
     public OperationDurationPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RouteCostPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RouteCostPrinterColumn.java
index 71d01b4d4..a691628f0 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RouteCostPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RouteCostPrinterColumn.java
@@ -5,14 +5,35 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.Start;
 import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
 
+/**
+ * The aggregated cost of the route from start till the current activity.
+ *
+ * <p>
+ * This column sumarizes the cost of all activities from start till the current
+ * activity.
+ * </p>
+ * <p>
+ * This column is stateful and stores the sum from the prior activities on the
+ * route.
+ * </p>
+ *
+ * @author balage
+ */
 public class RouteCostPrinterColumn extends TransportCostPrinterColumn {
 
+    // The aggregated cost of the route so far.
     private int aggregatedCost = 0;
 
+    /**
+     * Constructor.
+     */
     public RouteCostPrinterColumn() {
         super();
     }
 
+    /**
+     * Constructor with a post creation decorator provided.
+     */
     public RouteCostPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RouteLoadPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RouteLoadPrinterColumn.java
index b8bff8cfd..af853990b 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RouteLoadPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RouteLoadPrinterColumn.java
@@ -7,14 +7,36 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
 
+/**
+ * The load of the vehicle after the current activity is finished.
+ *
+ * <p>
+ * This column represents the current load of the vehicle on the route after the
+ * cargo load/unload performed on the activity. For the start activity (at the
+ * start of the route) the value is the initialLoad.
+ * </p>
+ * <p>
+ * This column is stateful and stores the vehicle load from the prior activity
+ * on the route.
+ * </p>
+ *
+ * @author balage
+ */
 public class RouteLoadPrinterColumn extends AbstractSizeDimensionPrinterColumn {
 
+    // The current vehicle load
     private SizeDimension aggregated;
 
+    /**
+     * Constructor.
+     */
     public RouteLoadPrinterColumn() {
         super();
     }
 
+    /**
+     * Constructor with a post creation decorator provided.
+     */
     public RouteLoadPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RouteNumberPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RouteNumberPrinterColumn.java
index 46ea8934b..d9a4dc4f1 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RouteNumberPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RouteNumberPrinterColumn.java
@@ -6,12 +6,27 @@
 import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
 import com.graphhopper.jsprit.core.reporting.columndefinition.IntColumnType;
 
+/**
+ * The order number of the route.
+ *
+ * <p>
+ * This is the ordinal of the route.
+ * </p>
+ *
+ * @author balage
+ */
 public class RouteNumberPrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, Integer, RouteNumberPrinterColumn> {
 
+    /**
+     * Constructor.
+     */
     public RouteNumberPrinterColumn() {
         super();
     }
 
+    /**
+     * Constructor with a post creation decorator provided.
+     */
     public RouteNumberPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RoutePrinterContext.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RoutePrinterContext.java
index 17e643751..08ec51c19 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RoutePrinterContext.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RoutePrinterContext.java
@@ -5,13 +5,40 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.reporting.PrinterContext;
 
+/**
+ * The context of the detailed route printer columns.
+ *
+ * <p>
+ * This is a semi-mutable class: only the activity could be altered. Therefore
+ * for each route a new instance should be created.
+ * </p>
+ *
+ * @author balage
+ *
+ */
 public class RoutePrinterContext implements PrinterContext {
 
+    // The route id
     private int routeNr;
+    // The route itself
     private VehicleRoute route;
+    // The current activity
     private TourActivity activity;
+    // The problem
     private VehicleRoutingProblem problem;
 
+    /**
+     * Constructor.
+     *
+     * @param routeNr
+     *            route id
+     * @param route
+     *            the route
+     * @param activity
+     *            current activity
+     * @param problem
+     *            problem
+     */
     public RoutePrinterContext(int routeNr, VehicleRoute route, TourActivity activity, VehicleRoutingProblem problem) {
         super();
         this.routeNr = routeNr;
@@ -20,22 +47,38 @@ public RoutePrinterContext(int routeNr, VehicleRoute route, TourActivity activit
         this.problem = problem;
     }
 
+    /**
+     * @return The route id.
+     */
     public int getRouteNr() {
         return routeNr;
     }
 
+    /**
+     * @return The route itself.
+     */
     public VehicleRoute getRoute() {
         return route;
     }
 
+    /**
+     * @return The current activity.
+     */
     public TourActivity getActivity() {
         return activity;
     }
 
+    /**
+     * @param activity
+     *            The current activity.
+     */
     public void setActivity(TourActivity activity) {
         this.activity = activity;
     }
 
+    /**
+     * @return The problem.
+     */
     public VehicleRoutingProblem getProblem() {
         return problem;
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/SelectedTimeWindowPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/SelectedTimeWindowPrinterColumn.java
index f1a6ea499..6037d95fc 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/SelectedTimeWindowPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/SelectedTimeWindowPrinterColumn.java
@@ -10,12 +10,32 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
 
+/**
+ * The time window used in activity.
+ *
+ * <p>
+ * This is the time window which was choosen by the algorithm. The start time of
+ * the activity is within this time window and the end time is within or matches
+ * the end value of this time window.
+ * </p>
+ *
+ * @author balage
+ *
+ * @see {@linkplain TimeWindowsPrinterColumn}
+ * @see {@linkplain StartTimePrinterColumn}
+ */
 public class SelectedTimeWindowPrinterColumn extends AbstractTimeWindowPrinterColumn<SelectedTimeWindowPrinterColumn> {
 
+    /**
+     * Constructor.
+     */
     public SelectedTimeWindowPrinterColumn() {
         super();
     }
 
+    /**
+     * Constructor with a post creation decorator provided.
+     */
     public SelectedTimeWindowPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
@@ -25,6 +45,14 @@ protected String getDefaultTitle() {
         return "selTimeWindow";
     }
 
+    /**
+     * {@inheritDoc}
+     *
+     * <p>
+     * This implementation returns at most one time window: the one the activity
+     * start time is within.
+     * </p>
+     */
     @Override
     protected Collection<TimeWindow> getValue(RoutePrinterContext context) {
         TourActivity act = context.getActivity();
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/StartTimePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/StartTimePrinterColumn.java
index 40df5e97d..020158e88 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/StartTimePrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/StartTimePrinterColumn.java
@@ -6,12 +6,34 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
 
+/**
+ * Start time of the activity.
+ * <p>
+ * For route end the value is undefined (null), for other activities, it is the
+ * time when the task on location is effectively started.
+ * </p>
+ *
+ * @author balage
+ *
+ * @see {@linkplain ArrivalTimePrinterColumn}
+ * @see {@linkplain EndTimePrinterColumn}
+ * @see {@linkplain TravelDurationPrinterColumn}
+ * @see {@linkplain WaitingDurationPrinterColumn}
+ * @see {@linkplain OperationDurationPrinterColumn}
+ * @see {@linkplain ActivityDurationPrinterColumn}
+ */
 public class StartTimePrinterColumn extends AbstractTimePrinterColumn<StartTimePrinterColumn> {
 
+    /**
+     * Constructor.
+     */
     public StartTimePrinterColumn() {
         super();
     }
 
+    /**
+     * Constructor with a post creation decorator provided.
+     */
     public StartTimePrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/TimeWindowsPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/TimeWindowsPrinterColumn.java
index 64e147b17..559862757 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/TimeWindowsPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/TimeWindowsPrinterColumn.java
@@ -8,12 +8,29 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
 
+/**
+ * The time windows of the activity.
+ *
+ * <p>
+ * Returns all time windows assigned to the activity.
+ * </p>
+ *
+ * @author balage
+ *
+ * @see {@linkplain SelectedTimeWindowPrinterColumn}
+ */
 public class TimeWindowsPrinterColumn extends AbstractTimeWindowPrinterColumn<TimeWindowsPrinterColumn> {
 
+    /**
+     * Constructor.
+     */
     public TimeWindowsPrinterColumn() {
         super();
     }
 
+    /**
+     * Constructor with a post creation decorator provided.
+     */
     public TimeWindowsPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/TransportCostPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/TransportCostPrinterColumn.java
index 09f85fad5..b30a175ac 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/TransportCostPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/TransportCostPrinterColumn.java
@@ -6,14 +6,34 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
 
+/**
+ * The cost of travelling to the activity.
+ *
+ * <p>
+ * This is the cost of the transport from the previous to this activity. For the
+ * start of the route this value is undefined (null).
+ * </p>
+ * <p>
+ * This column is stateful and stores the previous activity.
+ * </p>
+ *
+ * @author balage
+ */
 public class TransportCostPrinterColumn extends AbstractCostPrinterColumn {
 
+    // The previous activity
     private TourActivity prevAct;
 
+    /**
+     * Constructor.
+     */
     public TransportCostPrinterColumn() {
         super();
     }
 
+    /**
+     * Constructor with a post creation decorator provided.
+     */
     public TransportCostPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/TravelDurationPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/TravelDurationPrinterColumn.java
index b2ccce8ce..82622a4e0 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/TravelDurationPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/TravelDurationPrinterColumn.java
@@ -6,15 +6,41 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
 
+/**
+ * Travel duration toward the location of the activity.
+ * <p>
+ * The time it takes to travel to the location of the activity. The value is
+ * undefined for route start activity (null).
+ * </p>
+ * <p>
+ * This column is stateful and stores the previous activity.
+ * </p>
+ *
+ * @author balage
+ *
+ * @see {@linkplain ArrivalTimePrinterColumn}
+ * @see {@linkplain StartTimePrinterColumn}
+ * @see {@linkplain EndTimePrinterColumn}
+ * @see {@linkplain WaitingDurationPrinterColumn}
+ * @see {@linkplain OperationDurationPrinterColumn}
+ * @see {@linkplain ActivityDurationPrinterColumn}
+ */
 public class TravelDurationPrinterColumn extends AbstractDurationPrinterColumn<TravelDurationPrinterColumn>
 implements CostAndTimeExtractor {
 
+    // The previous activity
     private TourActivity prevAct;
 
+    /**
+     * Constructor.
+     */
     public TravelDurationPrinterColumn() {
         super();
     }
 
+    /**
+     * Constructor with a post creation decorator provided.
+     */
     public TravelDurationPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/VehicleNamePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/VehicleNamePrinterColumn.java
index 925798335..6ad29433a 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/VehicleNamePrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/VehicleNamePrinterColumn.java
@@ -6,12 +6,27 @@
 import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
 import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
 
+/**
+ * The name of the vehicle associated by this route.
+ *
+ * <p>
+ * This colum returns the id of the vehicle of the route.
+ * </p>
+ *
+ * @author balage
+ */
 public class VehicleNamePrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, String, VehicleNamePrinterColumn> {
 
+    /**
+     * Constructor.
+     */
     public VehicleNamePrinterColumn() {
         super();
     }
 
+    /**
+     * Constructor with a post creation decorator provided.
+     */
     public VehicleNamePrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/WaitingDurationPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/WaitingDurationPrinterColumn.java
index da24fa9ba..f68faa37f 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/WaitingDurationPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/WaitingDurationPrinterColumn.java
@@ -7,12 +7,37 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
 
+/**
+ * Idle duration before starting the activity.
+ * <p>
+ * This is the time duration between the vehicle arrives to the location (
+ * {@linkplain ArrivalTimePrinterColumn}) and the activity could be started (
+ * {@linkplain StartTimePrinterColumn}). For route start and end this value is
+ * not defined (null).
+ * </p>
+ *
+ * @author balage
+ *
+ * @see {@linkplain ArrivalTimePrinterColumn}
+ * @see {@linkplain StartTimePrinterColumn}
+ * @see {@linkplain EndTimePrinterColumn}
+ * @see {@linkplain TravelDurationPrinterColumn}
+ * @see {@linkplain WaitingDurationPrinterColumn}
+ * @see {@linkplain OperationDurationPrinterColumn}
+ * @see {@linkplain ActivityDurationPrinterColumn}
+ */
 public class WaitingDurationPrinterColumn extends AbstractDurationPrinterColumn<WaitingDurationPrinterColumn> {
 
+    /**
+     * Constructor.
+     */
     public WaitingDurationPrinterColumn() {
         super();
     }
 
+    /**
+     * Constructor with a post creation decorator provided.
+     */
     public WaitingDurationPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
