diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/Inserter.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/Inserter.java
index 7f33e90c6..7f12f6b90 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/Inserter.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/Inserter.java
@@ -23,121 +23,110 @@
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionListeners;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.DefaultShipmentActivityFactory;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.DefaultTourActivityFactory;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivityFactory;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TourShipmentActivityFactory;
 
 class Inserter {
 
-    interface JobInsertionHandler {
+    private abstract class JobInsertionHandler {
 
-        void handleJobInsertion(Job job, InsertionData iData, VehicleRoute route);
-
-        void setNextHandler(JobInsertionHandler handler);
-
-    }
+        private JobInsertionHandler delegator = new JobExceptionHandler();
 
-    class JobExceptionHandler implements JobInsertionHandler {
+        public abstract void handleJobInsertion(Job job, InsertionData iData, VehicleRoute route);
 
-        @Override
-        public void handleJobInsertion(Job job, InsertionData iData, VehicleRoute route) {
-            throw new IllegalStateException("job insertion is not supported. Do not know job type.");
+        public JobInsertionHandler withNextHandler(JobInsertionHandler handler) {
+            delegator = handler;
+            return this;
         }
 
-        @Override
-        public void setNextHandler(JobInsertionHandler handler) {
-
+        protected void delegate(Job job, InsertionData iData, VehicleRoute route) {
+            delegator.handleJobInsertion(job, iData, route);
         }
-
     }
 
-    class ServiceInsertionHandler implements JobInsertionHandler {
-
-        private TourActivityFactory activityFactory = new DefaultTourActivityFactory();
-
-        private JobInsertionHandler delegator = new JobExceptionHandler();
-
-        private VehicleRoutingProblem vehicleRoutingProblem;
-
-        public ServiceInsertionHandler(VehicleRoutingProblem vehicleRoutingProblem) {
-            this.vehicleRoutingProblem = vehicleRoutingProblem;
-        }
+    class JobExceptionHandler extends JobInsertionHandler {
 
         @Override
         public void handleJobInsertion(Job job, InsertionData iData, VehicleRoute route) {
-            if (job instanceof Service) {
-                route.setVehicleAndDepartureTime(iData.getSelectedVehicle(), iData.getVehicleDepartureTime());
-                if (!iData.getSelectedVehicle().isReturnToDepot()) {
-                    if (iData.getDeliveryInsertionIndex() >= route.getTourActivities().getActivities().size()) {
-                        setEndLocation(route, (Service) job);
-                    }
-                }
-                TourActivity activity = vehicleRoutingProblem.copyAndGetActivities(job).get(0);
-                route.getTourActivities().addActivity(iData.getDeliveryInsertionIndex(), activity);
-            } else {
-                delegator.handleJobInsertion(job, iData, route);
-            }
-        }
-
-        private void setEndLocation(VehicleRoute route, Service service) {
-            route.getEnd().setLocation(service.getLocation());
-        }
-
-        @Override
-        public void setNextHandler(JobInsertionHandler jobInsertionHandler) {
-            delegator = jobInsertionHandler;
+            throw new IllegalStateException("job insertion is not supported. Do not know job type.");
         }
 
     }
 
-    class ShipmentInsertionHandler implements JobInsertionHandler {
-
-        private final VehicleRoutingProblem vehicleRoutingProblem;
 
-        private TourShipmentActivityFactory activityFactory = new DefaultShipmentActivityFactory();
+    private class UnifiedInsertionHandler extends JobInsertionHandler {
 
-        private JobInsertionHandler delegator = new JobExceptionHandler();
-
-        public ShipmentInsertionHandler(VehicleRoutingProblem vehicleRoutingProblem) {
-            this.vehicleRoutingProblem = vehicleRoutingProblem;
+        public UnifiedInsertionHandler() {
         }
 
         @Override
         public void handleJobInsertion(Job job, InsertionData iData, VehicleRoute route) {
-            if (job instanceof Shipment) {
-                List<JobActivity> acts = vehicleRoutingProblem.copyAndGetActivities(job);
-                TourActivity pickupShipment = acts.get(0);
-                TourActivity deliverShipment = acts.get(1);
-                route.setVehicleAndDepartureTime(iData.getSelectedVehicle(), iData.getVehicleDepartureTime());
-                if (!iData.getSelectedVehicle().isReturnToDepot()) {
-                    if (iData.getDeliveryInsertionIndex() >= route.getActivities().size()) {
-                        setEndLocation(route, (Shipment) job);
-                    }
+            route.setVehicleAndDepartureTime(iData.getSelectedVehicle(), iData.getVehicleDepartureTime());
+            if (!iData.getSelectedVehicle().isReturnToDepot()) {
+                if (iData.getDeliveryInsertionIndex() >= route.getActivities().size()) {
+                    route.getEnd().setLocation(job.getEndLocation());
                 }
-                route.getTourActivities().addActivity(iData.getDeliveryInsertionIndex(), deliverShipment);
-                route.getTourActivities().addActivity(iData.getPickupInsertionIndex(), pickupShipment);
-            } else {
-                delegator.handleJobInsertion(job, iData, route);
             }
-        }
 
-        private void setEndLocation(VehicleRoute route, Shipment shipment) {
-            route.getEnd().setLocation(shipment.getDeliveryLocation());
-        }
+            List<JobActivity> acts = job.getActivityList().getAllDuplicated();
+            acts.forEach(act -> route.getTourActivities().addActivity(iData.getDeliveryInsertionIndex(), act));
 
-        @Override
-        public void setNextHandler(JobInsertionHandler jobInsertionHandler) {
-            delegator = jobInsertionHandler;
+            // Handles all // delegator.handleJobInsertion(job, iData, route);
         }
-
     }
 
+//
+//    private class ServiceInsertionHandler extends JobInsertionHandler {
+//
+//        @Override
+//        public void handleJobInsertion(Job job, InsertionData iData, VehicleRoute route) {
+//            if (job instanceof Service) {
+//                route.setVehicleAndDepartureTime(iData.getSelectedVehicle(), iData.getVehicleDepartureTime());
+//                if (!iData.getSelectedVehicle().isReturnToDepot()) {
+//                    if (iData.getDeliveryInsertionIndex() >= route.getTourActivities().getActivities().size()) {
+//                        setEndLocation(route, (Service) job);
+//                    }
+//                }
+//                TourActivity activity = vehicleRoutingProblem.copyAndGetActivities(job).get(0);
+//                route.getTourActivities().addActivity(iData.getDeliveryInsertionIndex(), activity);
+//            } else {
+//                delegate(job, iData, route);
+//            }
+//        }
+//
+//
+//        private void setEndLocation(VehicleRoute route, Service service) {
+//            route.getEnd().setLocation(service.getLocation());
+//        }
+//    }
+//
+//    private class ShipmentInsertionHandler extends JobInsertionHandler {
+//
+//        @Override
+//        public void handleJobInsertion(Job job, InsertionData iData, VehicleRoute route) {
+//            if (job instanceof Shipment) {
+//                List<JobActivity> acts = job.getActivityList().getAllDuplicated(); // vehicleRoutingProblem.copyAndGetActivities(job);
+//                TourActivity pickupShipment = acts.get(0);
+//                TourActivity deliverShipment = acts.get(1);
+//                route.setVehicleAndDepartureTime(iData.getSelectedVehicle(), iData.getVehicleDepartureTime());
+//                if (!iData.getSelectedVehicle().isReturnToDepot()) {
+//                    if (iData.getDeliveryInsertionIndex() >= route.getActivities().size()) {
+//                        setEndLocation(route, (Shipment) job);
+//                    }
+//                }
+//                route.getTourActivities().addActivity(iData.getDeliveryInsertionIndex(), deliverShipment);
+//                route.getTourActivities().addActivity(iData.getPickupInsertionIndex(), pickupShipment);
+//            } else {
+//                delegate(job, iData, route);
+//            }
+//        }
+//
+//        private void setEndLocation(VehicleRoute route, Shipment shipment) {
+//            route.getEnd().setLocation(shipment.getDeliveryLocation());
+//        }
+//    }
+//
     private InsertionListeners insertionListeners;
 
     private JobInsertionHandler jobInsertionHandler;
@@ -147,8 +136,14 @@ public void setNextHandler(JobInsertionHandler jobInsertionHandler) {
     public Inserter(InsertionListeners insertionListeners, VehicleRoutingProblem vehicleRoutingProblem) {
         this.insertionListeners = insertionListeners;
         new DefaultTourActivityFactory();
-        jobInsertionHandler = new ServiceInsertionHandler(vehicleRoutingProblem);
-        jobInsertionHandler.setNextHandler(new ShipmentInsertionHandler(vehicleRoutingProblem));
+
+        // Balage1551 - The new, unified handler
+        jobInsertionHandler = new UnifiedInsertionHandler();
+
+        //The old ones:
+//        jobInsertionHandler = new ServiceInsertionHandler()
+//                .withNextHandler(new ShipmentInsertionHandler()
+//                        .withNextHandler(new JobExceptionHandler()));
     }
 
     public void insertJob(Job job, InsertionData insertionData, VehicleRoute vehicleRoute) {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Job.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Job.java
index 5dfeb60ab..4f8d345ee 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Job.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Job.java
@@ -76,6 +76,16 @@
      */
     public List<Location> getAllLocations();
 
+    /**
+     * @return Start location
+     */
+    public Location getStartLocation();
+
+    /**
+     * @return End location
+     */
+    public Location getEndLocation();
+
     /**
      * @return All activities
      */
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java
index 95b1cc3a6..6a7cce46d 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java
@@ -458,6 +458,16 @@ public int getPriority() {
     }
 
 
+    @Override
+    public Location getStartLocation() {
+        return location;
+    }
+
+
+    @Override
+    public Location getEndLocation() {
+        return location;
+    }
 
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java
index 62fdb119d..be7f420da 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java
@@ -553,4 +553,17 @@ public String getName() {
     public int getPriority() {
         return priority;
     }
+
+    @Override
+    public Location getStartLocation() {
+        return pickupLocation_;
+    }
+
+
+    @Override
+    public Location getEndLocation() {
+        return deliveryLocation_;
+    }
+
+
 }
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryExample.java
index c23098abc..525efde6b 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryExample.java
@@ -17,6 +17,9 @@
  */
 package com.graphhopper.jsprit.examples;
 
+import java.util.Arrays;
+import java.util.Collection;
+
 import com.graphhopper.jsprit.analysis.toolbox.GraphStreamViewer;
 import com.graphhopper.jsprit.analysis.toolbox.Plotter;
 import com.graphhopper.jsprit.core.algorithm.VehicleRoutingAlgorithm;
@@ -30,51 +33,49 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.reporting.SolutionPrinter;
+import com.graphhopper.jsprit.core.reporting.SolutionPrinter.Print;
 import com.graphhopper.jsprit.core.util.Coordinate;
 import com.graphhopper.jsprit.core.util.Solutions;
 import com.graphhopper.jsprit.io.problem.VrpXMLWriter;
 import com.graphhopper.jsprit.util.Examples;
 
-import java.util.Arrays;
-import java.util.Collection;
-
 
 public class SimpleEnRoutePickupAndDeliveryExample {
 
     public static void main(String[] args) {
         /*
          * some preparation - create output folder
-		 */
+         */
         Examples.createOutputFolder();
 
-		/*
+        /*
          * get a vehicle type-builder and build a type with the typeId "vehicleType" and a capacity of 2
-		 */
+         */
         VehicleTypeImpl.Builder vehicleTypeBuilder = VehicleTypeImpl.Builder.newInstance("vehicleType").addCapacityDimension(0, 2);
         VehicleType vehicleType = vehicleTypeBuilder.build();
 
-		/*
+        /*
          * get a vehicle-builder and build a vehicle located at (10,10) with type "vehicleType"
-		 */
+         */
         Builder vehicleBuilder = VehicleImpl.Builder.newInstance("vehicle");
         vehicleBuilder.setStartLocation(loc(Coordinate.newInstance(10, 10)));
         vehicleBuilder.setType(vehicleType);
         VehicleImpl vehicle = vehicleBuilder.build();
 
-		/*
-         * build shipments at the required locations, each with a capacity-demand of 1.
-		 * 4 shipments
-		 * 1: (5,7)->(6,9)
-		 * 2: (5,13)->(6,11)
-		 * 3: (15,7)->(14,9)
-		 * 4: (15,13)->(14,11)
-		 */
+        /*
+         * build shipments at the required locations, each with a capacity-demand of 1. 4 shipments 1: (5,7)->(6,9) 2:
+         * (5,13)->(6,11) 3: (15,7)->(14,9) 4: (15,13)->(14,11)
+         */
 
-        Shipment shipment1 = Shipment.Builder.newInstance("1").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(5, 7))).setDeliveryLocation(loc(Coordinate.newInstance(6, 9))).build();
-        Shipment shipment2 = Shipment.Builder.newInstance("2").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(5, 13))).setDeliveryLocation(loc(Coordinate.newInstance(6, 11))).build();
+        Shipment shipment1 = Shipment.Builder.newInstance("1").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(5, 7)))
+                .setDeliveryLocation(loc(Coordinate.newInstance(6, 9))).build();
+        Shipment shipment2 = Shipment.Builder.newInstance("2").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(5, 13)))
+                .setDeliveryLocation(loc(Coordinate.newInstance(6, 11))).build();
 
-        Shipment shipment3 = Shipment.Builder.newInstance("3").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(15, 7))).setDeliveryLocation(loc(Coordinate.newInstance(14, 9))).build();
-        Shipment shipment4 = Shipment.Builder.newInstance("4").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(15, 13))).setDeliveryLocation(loc(Coordinate.newInstance(14, 11))).build();
+        Shipment shipment3 = Shipment.Builder.newInstance("3").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(15, 7)))
+                .setDeliveryLocation(loc(Coordinate.newInstance(14, 9))).build();
+        Shipment shipment4 = Shipment.Builder.newInstance("4").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(15, 13)))
+                .setDeliveryLocation(loc(Coordinate.newInstance(14, 11))).build();
 
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
@@ -83,41 +84,41 @@ public static void main(String[] args) {
 
         VehicleRoutingProblem problem = vrpBuilder.build();
 
-		/*
+        /*
          * get the algorithm out-of-the-box.
-		 */
+         */
         VehicleRoutingAlgorithm algorithm = new SchrimpfFactory().createAlgorithm(problem);
 
-		/*
+        /*
          * and search a solution
-		 */
+         */
         Collection<VehicleRoutingProblemSolution> solutions = algorithm.searchSolutions();
 
-		/*
+        /*
          * get the best
-		 */
+         */
         VehicleRoutingProblemSolution bestSolution = Solutions.bestOf(solutions);
 
-		/*
+        /*
          * write out problem and solution to xml-file
-		 */
+         */
         new VrpXMLWriter(problem, solutions).write("output/shipment-problem-with-solution.xml");
 
-		/*
-		 * print nRoutes and totalCosts of bestSolution
-		 */
-        SolutionPrinter.print(bestSolution);
+        /*
+         * print nRoutes and totalCosts of bestSolution
+         */
+        SolutionPrinter.print(problem, bestSolution, Print.VERBOSE);
 
-		/*
-		 * plot problem without solution
-		 */
+        /*
+         * plot problem without solution
+         */
         Plotter problemPlotter = new Plotter(problem);
         problemPlotter.plotShipments(true);
         problemPlotter.plot("output/simpleEnRoutePickupAndDeliveryExample_problem.png", "en-route pickup and delivery");
 
-		/*
-		 * plot problem with solution
-		 */
+        /*
+         * plot problem with solution
+         */
         Plotter solutionPlotter = new Plotter(problem, Arrays.asList(Solutions.bestOf(solutions).getRoutes().iterator().next()));
         solutionPlotter.plotShipments(true);
         solutionPlotter.plot("output/simpleEnRoutePickupAndDeliveryExample_solution.png", "en-route pickup and delivery");
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryWithDepotBoundedDeliveriesExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryWithDepotBoundedDeliveriesExample.java
index 4f08fde2f..8a678364b 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryWithDepotBoundedDeliveriesExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryWithDepotBoundedDeliveriesExample.java
@@ -17,6 +17,8 @@
  */
 package com.graphhopper.jsprit.examples;
 
+import java.util.Collection;
+
 import com.graphhopper.jsprit.analysis.toolbox.Plotter;
 import com.graphhopper.jsprit.core.algorithm.VehicleRoutingAlgorithm;
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
@@ -33,58 +35,53 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.reporting.SolutionPrinter;
+import com.graphhopper.jsprit.core.reporting.SolutionPrinter.Print;
 import com.graphhopper.jsprit.core.util.Coordinate;
 import com.graphhopper.jsprit.core.util.Solutions;
 import com.graphhopper.jsprit.io.problem.VrpXMLWriter;
 import com.graphhopper.jsprit.util.Examples;
 
-import java.util.Collection;
-
 
 public class SimpleEnRoutePickupAndDeliveryWithDepotBoundedDeliveriesExample {
 
     public static void main(String[] args) {
         /*
          * some preparation - create output folder
-		 */
+         */
         Examples.createOutputFolder();
 
-		/*
+        /*
          * get a vehicle type-builder and build a type with the typeId "vehicleType" and a capacity of 2
-		 */
+         */
         VehicleTypeImpl.Builder vehicleTypeBuilder = VehicleTypeImpl.Builder.newInstance("vehicleType").addCapacityDimension(0, 2);
         VehicleType vehicleType = vehicleTypeBuilder.build();
 
-		/*
+        /*
          * get a vehicle-builder and build a vehicle located at (10,10) with type "vehicleType"
-		 */
+         */
         Builder vehicleBuilder = VehicleImpl.Builder.newInstance("vehicle");
         vehicleBuilder.setStartLocation(loc(Coordinate.newInstance(10, 10)));
         vehicleBuilder.setType(vehicleType);
         VehicleImpl vehicle = vehicleBuilder.build();
 
-		/*
-         * build shipments at the required locations, each with a capacity-demand of 1.
-		 * 4 shipments
-		 * 1: (5,7)->(6,9)
-		 * 2: (5,13)->(6,11)
-		 * 3: (15,7)->(14,9)
-		 * 4: (15,13)->(14,11)
-		 */
-
-        Shipment shipment1 = Shipment.Builder.newInstance("1").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(5, 7))).setDeliveryLocation(loc(Coordinate.newInstance(6, 9))).build();
-        Shipment shipment2 = Shipment.Builder.newInstance("2").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(5, 13))).setDeliveryLocation(loc(Coordinate.newInstance(6, 11))).build();
-
-        Shipment shipment3 = Shipment.Builder.newInstance("3").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(15, 7))).setDeliveryLocation(loc(Coordinate.newInstance(14, 9))).build();
-        Shipment shipment4 = Shipment.Builder.newInstance("4").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(15, 13))).setDeliveryLocation(loc(Coordinate.newInstance(14, 11))).build();
+        /*
+         * build shipments at the required locations, each with a capacity-demand of 1. 4 shipments 1: (5,7)->(6,9) 2:
+         * (5,13)->(6,11) 3: (15,7)->(14,9) 4: (15,13)->(14,11)
+         */
+
+        Shipment shipment1 = Shipment.Builder.newInstance("1").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(5, 7)))
+                .setDeliveryLocation(loc(Coordinate.newInstance(6, 9))).build();
+        Shipment shipment2 = Shipment.Builder.newInstance("2").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(5, 13)))
+                .setDeliveryLocation(loc(Coordinate.newInstance(6, 11))).build();
+
+        Shipment shipment3 = Shipment.Builder.newInstance("3").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(15, 7)))
+                .setDeliveryLocation(loc(Coordinate.newInstance(14, 9))).build();
+        Shipment shipment4 = Shipment.Builder.newInstance("4").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(15, 13)))
+                .setDeliveryLocation(loc(Coordinate.newInstance(14, 11))).build();
 //
         /*
-         * build deliveries, (implicitly picked up in the depot)
-		 * 1: (4,8)
-		 * 2: (4,12)
-		 * 3: (16,8)
-		 * 4: (16,12)
-		 */
+         * build deliveries, (implicitly picked up in the depot) 1: (4,8) 2: (4,12) 3: (16,8) 4: (16,12)
+         */
         Delivery delivery1 = new Delivery.Builder("5").addSizeDimension(0, 1).setLocation(loc(Coordinate.newInstance(4, 8))).build();
         Delivery delivery2 = new Delivery.Builder("6").addSizeDimension(0, 1).setLocation(loc(Coordinate.newInstance(4, 12))).build();
         Delivery delivery3 = new Delivery.Builder("7").addSizeDimension(0, 1).setLocation(loc(Coordinate.newInstance(16, 8))).build();
@@ -93,37 +90,37 @@ public static void main(String[] args) {
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addVehicle(vehicle);
         vrpBuilder.addJob(shipment1).addJob(shipment2).addJob(shipment3).addJob(shipment4)
-            .addJob(delivery1).addJob(delivery2).addJob(delivery3).addJob(delivery4).build();
+                .addJob(delivery1).addJob(delivery2).addJob(delivery3).addJob(delivery4).build();
 
         VehicleRoutingProblem problem = vrpBuilder.build();
 
-		/*
+        /*
          * build the algorithm
-		 */
+         */
 
         StateManager stateManager = new StateManager(problem);
         ConstraintManager constraintManager = new ConstraintManager(problem, stateManager);
         constraintManager.addConstraint(new ServiceDeliveriesFirstConstraint(), ConstraintManager.Priority.CRITICAL);
 
-        VehicleRoutingAlgorithm algorithm = Jsprit.Builder.newInstance(problem).setStateAndConstraintManager(stateManager,constraintManager).buildAlgorithm();
+        VehicleRoutingAlgorithm algorithm = Jsprit.Builder.newInstance(problem).setStateAndConstraintManager(stateManager, constraintManager).buildAlgorithm();
 
-		/*
+        /*
          * and search a solution
-		 */
+         */
         Collection<VehicleRoutingProblemSolution> solutions = algorithm.searchSolutions();
 
-		/*
-		 * get the best
-		 */
+        /*
+         * get the best
+         */
         VehicleRoutingProblemSolution bestSolution = Solutions.bestOf(solutions);
 
         new VrpXMLWriter(problem, solutions).write("output/mixed-shipments-services-problem-with-solution.xml");
 
-        SolutionPrinter.print(bestSolution);
+        SolutionPrinter.print(problem, bestSolution, Print.VERBOSE);
 
-		/*
-		 * plot
-		 */
+        /*
+         * plot
+         */
         Plotter problemPlotter = new Plotter(problem);
         problemPlotter.plotShipments(true);
         problemPlotter.plot("output/simpleMixedEnRoutePickupAndDeliveryExample_problem.png", "en-route pd and depot bounded deliveries");
