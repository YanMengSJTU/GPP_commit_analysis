diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRoute.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRoute.java
index 6bc2082ba..0b221af94 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRoute.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRoute.java
@@ -176,16 +176,30 @@ public Builder setDepartureTime(double departureTime) {
         }
 
         /**
-         * Adds a service to this route. Activity is initialized with .getTimeWindow(). If you want to explicitly set another time window
-         * use .addService(Service service, TimeWindow timeWindow)
+         * Adds a service to this route. Activity is initialized with
+         * .getSingleTimeWindow(). If you want to explicitly set another time
+         * window use {@linkplain #addService(Service TimeWindow)}
          * <p>
-         * <p>This implies that for this service a serviceActivity is created with {@link TourActivityFactory} and added to the sequence of tourActivities.
          * <p>
-         * <p>The resulting activity occurs in the activity-sequence in the order adding/inserting.
+         * This implies that for this service a serviceActivity is created with
+         * {@link TourActivityFactory} and added to the sequence of
+         * tourActivities.
+         * <p>
+         * <p>
+         * The resulting activity occurs in the activity-sequence in the order
+         * adding/inserting.
+         *
+         * <p>
+         * <i><b>Note: Using this method is not recommended. Use the
+         * {@linkplain #addService(AbstractSingleActivityJob, TimeWindow)}
+         * instead.</b></i>
+         * </p>
          *
-         * @param service to be added
+         * @param service
+         *            to be added
          * @return this builder
-         * @throws IllegalArgumentException if service is null
+         * @throws IllegalArgumentException
+         *             if service is null
          */
         public Builder addService(AbstractSingleActivityJob<?> service) {
             if (service == null) {
@@ -238,7 +252,13 @@ public Builder addBreak(Break currentbreak, TimeWindow timeWindow) {
         /**
          * Adds a pickup to this route.
          *
-         * @param pickup pickup to be added
+         * <p>
+         * <i><b>Note: Using this method is not recommended. Use the
+         * {@linkplain #addPickup(Pickup, TimeWindow)} instead.</b></i>
+         * </p>
+         *
+         * @param pickup
+         *            pickup to be added
          * @return the builder
          */
         public Builder addPickup(Pickup pickup) {
@@ -258,7 +278,14 @@ public Builder addPickup(Pickup pickup, TimeWindow timeWindow) {
         /**
          * Adds a delivery to this route.
          *
-         * @param delivery delivery to be added
+         * <p>
+         * <i><b>Note: Using this method is not recommended. Use the
+         * {@linkplain #addDelivery(Delivery, TimeWindow)} instead.</b></i>
+         * </p>
+         *
+         *
+         * @param delivery
+         *            delivery to be added
          * @return the builder
          */
         public Builder addDelivery(Delivery delivery) {
@@ -278,9 +305,17 @@ public Builder addDelivery(Delivery delivery, TimeWindow timeWindow) {
         /**
          * Adds a the pickup of the specified shipment.
          *
-         * @param shipment to be picked up and added to this route
+         * <p>
+         * <i><b>Note: Using this method is not recommended. Use the
+         * {@linkplain #addPickup(Shipment, TimeWindow)} instead.</b></i>
+         * </p>
+         *
+         * @param shipment
+         *            to be picked up and added to this route
          * @return the builder
-         * @throws IllegalArgumentException if method has already been called with the specified shipment.
+         * @throws IllegalArgumentException
+         *             if method has already been called with the specified
+         *             shipment.
          */
         public Builder addPickup(Shipment shipment) {
             return addPickup(shipment,
@@ -302,11 +337,20 @@ public Builder addPickup(Shipment shipment, TimeWindow pickupTimeWindow) {
         }
 
         /**
-         * Adds a the delivery of the specified shipment.
+         * Adds a the delivery of the specified shipment. The shipment could
+         * have only one time window.
+         *
+         * <p>
+         * <i><b>Note: Using this method is not recommended. Use the
+         * {@linkplain #addDelivery(Shipment, TimeWindow)} instead.</b></i>
+         * </p>
          *
-         * @param shipment to be delivered and add to this vehicleRoute
+         * @param shipment
+         *            to be delivered and add to this vehicleRoute
          * @return builder
-         * @throws IllegalArgumentException if specified shipment has not been picked up yet (i.e. method addPickup(shipment) has not been called yet).
+         * @throws IllegalArgumentException
+         *             if specified shipment has not been picked up yet (i.e.
+         *             method addPickup(shipment) has not been called yet).
          */
         public Builder addDelivery(Shipment shipment) {
             return addDelivery(shipment, shipment.getDeliveryActivity().getSingleTimeWindow());
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdateVehicleDependentTimeWindowTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdateVehicleDependentTimeWindowTest.java
index a1ceddc77..efe7d6c9c 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdateVehicleDependentTimeWindowTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdateVehicleDependentTimeWindowTest.java
@@ -211,7 +211,7 @@ public void twUpdateShouldWorkWithMultipleTWs() {
         //
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance("0,0")).setEarliestStart(0.).setLatestArrival(100.).build();
         Service service = new Service.Builder("s1").setLocation(Location.newInstance("10,0"))
-                        .addTimeWindow(10, 20).addTimeWindow(30, 40).build();
+                        .addTimeWindow(30, 40).build();
         Service service2 = new Service.Builder("s2")
                         .addTimeWindow(20, 30).addTimeWindow(40, 60).addTimeWindow(70, 80).setLocation(Location.newInstance("20,0")).build();
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/DeliveryTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/DeliveryTest.java
index bcd39cbfd..1fc15d575 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/DeliveryTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/DeliveryTest.java
@@ -39,7 +39,7 @@ public void whenAddingTwoCapDimension_nuOfDimsShouldBeTwo() {
                         .addSizeDimension(0, 2)
                         .addSizeDimension(1, 4)
                         .build();
-        SizeDimension size = one.getActivity().getLoadChange();
+        SizeDimension size = one.getActivity().getLoadChange().abs();
         assertEquals(2, size.getNuOfDimensions());
         assertEquals(2, size.get(0));
         assertEquals(4, size.get(1));
@@ -52,7 +52,7 @@ public void sizeAtStartAndEndShouldBeCorrect() {
                         .addSizeDimension(0, 2)
                         .addSizeDimension(1, 4)
                         .build();
-        SizeDimension size = one.getActivity().getLoadChange();
+        SizeDimension size = one.getActivity().getLoadChange().abs();
         assertEquals(size, one.getSizeAtStart());
         assertEquals(SizeDimension.Builder.newInstance().addDimension(0, 0).addDimension(1, 0)
                         .build(), one.getSizeAtEnd());
@@ -71,7 +71,7 @@ public void whenPickupIsBuiltWithoutSpecifyingCapacity_itShouldHvCapWithOneDimAn
     public void whenPickupIsBuiltWithConstructorWhereSizeIsSpecified_capacityShouldBeSetCorrectly() {
         Delivery one = new Delivery.Builder("s").addSizeDimension(0, 1).setLocation(Location.newInstance("foofoo"))
                         .build();
-        SizeDimension size = one.getActivity().getLoadChange();
+        SizeDimension size = one.getActivity().getLoadChange().abs();
         assertEquals(1, size.getNuOfDimensions());
         assertEquals(1, size.get(0));
     }
