diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/JobInsertionConsideringFixCostsCalculator.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/JobInsertionConsideringFixCostsCalculator.java
index 8943d1251..fc1d52ad4 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/JobInsertionConsideringFixCostsCalculator.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/JobInsertionConsideringFixCostsCalculator.java
@@ -46,7 +46,7 @@
 
     public JobInsertionConsideringFixCostsCalculator(final JobInsertionCostsCalculator standardInsertionCalculator, RouteAndActivityStateGetter stateGetter) {
         super();
-        this.standardServiceInsertion = standardInsertionCalculator;
+        standardServiceInsertion = standardInsertionCalculator;
         this.stateGetter = stateGetter;
         logger.debug("inialise {}", this);
     }
@@ -93,7 +93,7 @@ public void setSolutionCompletenessRatio(double ratio) {
     public double getSolutionCompletenessRatio() { return solution_completeness_ratio; }
 
     private double getDeltaAbsoluteFixCost(VehicleRoute route, Vehicle newVehicle, Job job, Capacity currentMaxLoadInRoute) {
-        Capacity load = Capacity.addup(currentMaxLoadInRoute, job.getSize());
+        Capacity load = currentMaxLoadInRoute.add(job.getSize());
         double currentFix = 0.0;
         if (route.getVehicle() != null) {
             if (!(route.getVehicle() instanceof VehicleImpl.NoVehicle)) {
@@ -107,7 +107,7 @@ private double getDeltaAbsoluteFixCost(VehicleRoute route, Vehicle newVehicle, J
     }
 
     private double getDeltaRelativeFixCost(VehicleRoute route, Vehicle newVehicle, Job job, Capacity currentLoad) {
-        Capacity load = Capacity.addup(currentLoad, job.getSize());
+        Capacity load = currentLoad.add(job.getSize());
         double currentRelFix = 0.0;
         if (route.getVehicle() != null) {
             if (!(route.getVehicle() instanceof VehicleImpl.NoVehicle)) {
@@ -123,7 +123,9 @@ private double getDeltaRelativeFixCost(VehicleRoute route, Vehicle newVehicle, J
 
     private Capacity getCurrentMaxLoadInRoute(VehicleRoute route) {
         Capacity maxLoad = stateGetter.getRouteState(route, InternalStates.MAXLOAD, Capacity.class);
-        if (maxLoad == null) maxLoad = Capacity.Builder.newInstance().build();
+        if (maxLoad == null) {
+            maxLoad = Capacity.Builder.newInstance().build();
+        }
         return maxLoad;
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateLoads.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateLoads.java
index 889ff6b3e..aaa8a56de 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateLoads.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateLoads.java
@@ -63,16 +63,18 @@ public UpdateLoads(StateManager stateManager) {
     @Override
     public void begin(VehicleRoute route) {
         currentLoad = stateManager.getRouteState(route, InternalStates.LOAD_AT_BEGINNING, Capacity.class);
-        if (currentLoad == null) currentLoad = defaultValue;
+        if (currentLoad == null) {
+            currentLoad = defaultValue;
+        }
         this.route = route;
     }
 
     @Override
     public void visit(TourActivity act) {
-        currentLoad = Capacity.addup(currentLoad, act.getSize());
+        currentLoad = currentLoad.add(act.getSize());
         stateManager.putInternalTypedActivityState(act, InternalStates.LOAD, currentLoad);
-//		assert currentLoad.isLessOrEqual(route.getVehicle().getType().getCapacityDimensions()) : "currentLoad at activity must not be > vehicleCapacity";
-//		assert currentLoad.isGreaterOrEqual(Capacity.Builder.newInstance().build()) : "currentLoad at act must not be < 0 in one of the applied dimensions";
+        //		assert currentLoad.isLessOrEqual(route.getVehicle().getType().getCapacityDimensions()) : "currentLoad at activity must not be > vehicleCapacity";
+        //		assert currentLoad.isGreaterOrEqual(Capacity.Builder.newInstance().build()) : "currentLoad at act must not be < 0 in one of the applied dimensions";
     }
 
     @Override
@@ -85,9 +87,9 @@ void insertionStarts(VehicleRoute route) {
         Capacity loadAtEnd = Capacity.Builder.newInstance().build();
         for (Job j : route.getTourActivities().getJobs()) {
             if (j instanceof Delivery) {
-                loadAtDepot = Capacity.addup(loadAtDepot, j.getSize());
+                loadAtDepot = loadAtDepot.add(j.getSize());
             } else if (j instanceof Pickup || j instanceof Service) {
-                loadAtEnd = Capacity.addup(loadAtEnd, j.getSize());
+                loadAtEnd = loadAtEnd.add(j.getSize());
             }
         }
         stateManager.putTypedInternalRouteState(route, InternalStates.LOAD_AT_BEGINNING, loadAtDepot);
@@ -105,12 +107,18 @@ public void informInsertionStarts(Collection<VehicleRoute> vehicleRoutes, Collec
     public void informJobInserted(Job job2insert, VehicleRoute inRoute, double additionalCosts, double additionalTime) {
         if (job2insert instanceof Delivery) {
             Capacity loadAtDepot = stateManager.getRouteState(inRoute, InternalStates.LOAD_AT_BEGINNING, Capacity.class);
-            if (loadAtDepot == null) loadAtDepot = defaultValue;
-            stateManager.putTypedInternalRouteState(inRoute, InternalStates.LOAD_AT_BEGINNING, Capacity.addup(loadAtDepot, job2insert.getSize()));
+            if (loadAtDepot == null) {
+                loadAtDepot = defaultValue;
+            }
+            stateManager.putTypedInternalRouteState(inRoute, InternalStates.LOAD_AT_BEGINNING,
+                            loadAtDepot.add(job2insert.getSize()));
         } else if (job2insert instanceof Pickup || job2insert instanceof Service) {
             Capacity loadAtEnd = stateManager.getRouteState(inRoute, InternalStates.LOAD_AT_END, Capacity.class);
-            if (loadAtEnd == null) loadAtEnd = defaultValue;
-            stateManager.putTypedInternalRouteState(inRoute, InternalStates.LOAD_AT_END, Capacity.addup(loadAtEnd, job2insert.getSize()));
+            if (loadAtEnd == null) {
+                loadAtEnd = defaultValue;
+            }
+            stateManager.putTypedInternalRouteState(inRoute, InternalStates.LOAD_AT_END,
+                            loadAtEnd.add(job2insert.getSize()));
         }
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateMaxCapacityUtilisationAtRoute.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateMaxCapacityUtilisationAtRoute.java
index 64ffbcd13..5dabae769 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateMaxCapacityUtilisationAtRoute.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateMaxCapacityUtilisationAtRoute.java
@@ -53,14 +53,16 @@ public UpdateMaxCapacityUtilisationAtRoute(StateManager stateManager) {
     @Override
     public void begin(VehicleRoute route) {
         currentLoad = stateManager.getRouteState(route, InternalStates.LOAD_AT_BEGINNING, Capacity.class);
-        if (currentLoad == null) currentLoad = defaultValue;
+        if (currentLoad == null) {
+            currentLoad = defaultValue;
+        }
         maxLoad = currentLoad;
         this.route = route;
     }
 
     @Override
     public void visit(TourActivity act) {
-        currentLoad = Capacity.addup(currentLoad, act.getSize());
+        currentLoad = currentLoad.add(act.getSize());
         maxLoad = Capacity.max(maxLoad, currentLoad);
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyser.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyser.java
index 40cfe5642..ebf1f5453 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyser.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyser.java
@@ -129,13 +129,13 @@ public void begin(VehicleRoute route) {
         public void visit(TourActivity activity) {
             if (activity instanceof PickupActivityNEW) {
                 pickupCounter++;
-                pickedUp = Capacity.addup(pickedUp, ((PickupActivityNEW) activity).getJob().getSize());
+                pickedUp = pickedUp.add(((PickupActivityNEW) activity).getJob().getSize());
                 if (activity instanceof PickupServiceDEPRECATED) {
                     deliverAtEndCounter++;
                 }
             } else if (activity instanceof DeliveryActivityNEW) {
                 deliveryCounter++;
-                delivered = Capacity.addup(delivered, ((DeliveryActivityNEW) activity).getJob().getSize());
+                delivered = delivered.add(((DeliveryActivityNEW) activity).getJob().getSize());
                 if (activity instanceof DeliverServiceDEPRECATED) {
                     pickupAtBeginningCounter++;
                 }
@@ -591,7 +591,7 @@ private void recalculateSolutionIndicators() {
             service_time += getServiceTime(route);
             operation_time += getOperationTime(route);
             tw_violation += getTimeWindowViolation(route);
-            cap_violation = Capacity.addup(cap_violation, getCapacityViolation(route));
+            cap_violation = cap_violation.add(getCapacityViolation(route));
             fixed_costs += getFixedCosts(route);
             variable_transport_costs += getVariableTransportCosts(route);
             if (hasSkillConstraintViolation(route)) {
@@ -607,10 +607,10 @@ private void recalculateSolutionIndicators() {
             noPickupsAtBeginning += getNumberOfPickupsAtBeginning(route);
             noDeliveries += getNumberOfDeliveries(route);
             noDeliveriesAtEnd += getNumberOfDeliveriesAtEnd(route);
-            pickupLoad = Capacity.addup(pickupLoad, getLoadPickedUp(route));
-            pickupLoadAtBeginning = Capacity.addup(pickupLoadAtBeginning, getLoadAtBeginning(route));
-            deliveryLoad = Capacity.addup(deliveryLoad, getLoadDelivered(route));
-            deliveryLoadAtEnd = Capacity.addup(deliveryLoadAtEnd, getLoadAtEnd(route));
+            pickupLoad = pickupLoad.add(getLoadPickedUp(route));
+            pickupLoadAtBeginning = pickupLoadAtBeginning.add(getLoadAtBeginning(route));
+            deliveryLoad = deliveryLoad.add(getLoadDelivered(route));
+            deliveryLoadAtEnd = deliveryLoadAtEnd.add(getLoadAtEnd(route));
         }
         total_costs = solutionCostCalculator.getCosts(solution);
     }
@@ -733,7 +733,7 @@ public Capacity getLoadJustBeforeActivity(TourActivity activity, VehicleRoute ro
         verifyThatRouteContainsAct(activity, route);
         Capacity afterAct = stateManager.getActivityState(activity, InternalStates.LOAD, Capacity.class);
         if (afterAct != null && activity.getSize() != null) {
-            return Capacity.subtract(afterAct, activity.getSize());
+            return afterAct.subtract(activity.getSize());
         } else if (afterAct != null) {
             return afterAct;
         } else {
@@ -794,7 +794,8 @@ public Capacity getCapacityViolation(VehicleRoute route) {
             throw new IllegalArgumentException("route is missing.");
         }
         Capacity maxLoad = getMaxLoad(route);
-        return Capacity.max(Capacity.Builder.newInstance().build(), Capacity.subtract(maxLoad, route.getVehicle().getType().getCapacityDimensions()));
+        return Capacity.max(Capacity.Builder.newInstance().build(),
+                        maxLoad.subtract(route.getVehicle().getType().getCapacityDimensions()));
     }
 
     /**
@@ -808,7 +809,8 @@ public Capacity getCapacityViolationAtBeginning(VehicleRoute route) {
             throw new IllegalArgumentException("route is missing.");
         }
         Capacity atBeginning = getLoadAtBeginning(route);
-        return Capacity.max(Capacity.Builder.newInstance().build(), Capacity.subtract(atBeginning, route.getVehicle().getType().getCapacityDimensions()));
+        return Capacity.max(Capacity.Builder.newInstance().build(),
+                        atBeginning.subtract(route.getVehicle().getType().getCapacityDimensions()));
     }
 
     /**
@@ -822,7 +824,8 @@ public Capacity getCapacityViolationAtEnd(VehicleRoute route) {
             throw new IllegalArgumentException("route is missing.");
         }
         Capacity atEnd = getLoadAtEnd(route);
-        return Capacity.max(Capacity.Builder.newInstance().build(), Capacity.subtract(atEnd, route.getVehicle().getType().getCapacityDimensions()));
+        return Capacity.max(Capacity.Builder.newInstance().build(),
+                        atEnd.subtract(route.getVehicle().getType().getCapacityDimensions()));
     }
 
 
@@ -840,7 +843,8 @@ public Capacity getCapacityViolationAfterActivity(TourActivity activity, Vehicle
             throw new IllegalArgumentException("activity is missing.");
         }
         Capacity afterAct = getLoadRightAfterActivity(activity, route);
-        return Capacity.max(Capacity.Builder.newInstance().build(), Capacity.subtract(afterAct, route.getVehicle().getType().getCapacityDimensions()));
+        return Capacity.max(Capacity.Builder.newInstance().build(),
+                        afterAct.subtract(route.getVehicle().getType().getCapacityDimensions()));
     }
 
     /**
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/Capacity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/Capacity.java
index bd27c2be3..7f7648ec3 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/Capacity.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/Capacity.java
@@ -17,7 +17,6 @@
  */
 package com.graphhopper.jsprit.core.problem;
 
-import java.time.Duration;
 import java.util.Arrays;
 
 /**
@@ -32,73 +31,63 @@
     public static final Capacity EMPTY = Capacity.Builder.newInstance().build();
 
     /**
-     * Adds up two capacities, i.e. sums up each and every capacity dimension, and returns the resulting Capacity.
+     * Adds up two capacities, i.e. sums up each and every capacity dimension,
+     * and returns the resulting Capacity.
      * <p>
-     * <p>Note that this assumes that capacity dimension can be added up.
+     * <p>
+     * Note that this assumes that capacity dimension can be added up.
      *
-     * @param cap1 capacity to be added up
-     * @param cap2 capacity to be added up
+     * @param cap1
+     *            capacity to be added up
+     * @param cap2
+     *            capacity to be added up
      * @return new capacity
-     * @throws NullPointerException if one of the args is null
+     * @throws NullPointerException
+     *             if one of the args is null
+     * @deprecated Use <code>cap1.add(cap2)</code> instead.
      */
 
-    public static long MATH_COUNT = 0;
-    public static Duration dur = Duration.ZERO;
-
+    @Deprecated
     public static Capacity addup(Capacity cap1, Capacity cap2) {
-        if (cap1 == null || cap2 == null) {
-            throw new NullPointerException("arguments must not be null");
-        }
-        Capacity.Builder capacityBuilder = Capacity.Builder.newInstance();
-        for (int i = 0; i < Math.max(cap1.getNuOfDimensions(), cap2.getNuOfDimensions()); i++) {
-            capacityBuilder.addDimension(i, cap1.get(i) + cap2.get(i));
-        }
-        return capacityBuilder.build();
-        // return cap1.add(cap2);
+        return cap1.add(cap2);
     }
 
     /**
      * Subtracts cap2subtract from cap and returns the resulting Capacity.
      *
-     * @param cap          capacity to be subtracted from
-     * @param cap2subtract capacity to subtract
+     * @param cap
+     *            capacity to be subtracted from
+     * @param cap2subtract
+     *            capacity to subtract
      * @return new capacity
-     * @throws NullPointerException  if one of the args is null
-     * @throws IllegalStateException if number of capacityDimensions of cap1 and cap2 are different (i.e. <code>cap1.getNuOfDimension() != cap2.getNuOfDimension()</code>).
+     * @throws NullPointerException
+     *             if one of the args is null
+     * @throws IllegalStateException
+     *             if number of capacityDimensions of cap1 and cap2 are
+     *             different (i.e.
+     *             <code>cap1.getNuOfDimension() != cap2.getNuOfDimension()</code>
+     *             ).
+     * @deprecated Use <code>cap1.subtract(cap2)</code> instead.
      */
+    @Deprecated
     public static Capacity subtract(Capacity cap, Capacity cap2subtract) {
-        if (cap == null || cap2subtract == null) {
-            throw new NullPointerException("arguments must not be null");
-        }
-        Capacity.Builder capacityBuilder = Capacity.Builder.newInstance();
-        for (int i = 0; i < Math.max(cap.getNuOfDimensions(),
-                        cap2subtract.getNuOfDimensions()); i++) {
-            int dimValue = cap.get(i) - cap2subtract.get(i);
-            capacityBuilder.addDimension(i, dimValue);
-        }
-        return capacityBuilder.build();
-        // return cap.subtract(cap2subtract);
+        return cap.subtract(cap2subtract);
     }
 
     /**
-     * Returns the inverted capacity, i.e. it multiplies all capacity dimensions with -1.
+     * Returns the inverted capacity, i.e. it multiplies all capacity dimensions
+     * with -1.
      *
-     * @param cap2invert capacity to be inverted
+     * @param cap2invert
+     *            capacity to be inverted
      * @return inverted capacity
-     * @throws NullPointerException if one of the args is null
+     * @throws NullPointerException
+     *             if one of the args is null
+     * @deprecated Use <code>cap2invert.invert()</code> instead.
      */
+    @Deprecated
     public static Capacity invert(Capacity cap2invert) {
-        if (cap2invert == null) {
-            throw new NullPointerException("arguments must not be null");
-        }
-        Capacity.Builder capacityBuilder = Capacity.Builder.newInstance();
-        for (int i = 0; i < cap2invert.getNuOfDimensions(); i++) {
-            int dimValue = cap2invert.get(i) * -1;
-            capacityBuilder.addDimension(i, dimValue);
-        }
-        return capacityBuilder.build();
-
-        // return cap2invert.invert();
+        return cap2invert.invert();
     }
 
     /**
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/PickupAndDeliverShipmentLoadActivityLevelConstraint.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/PickupAndDeliverShipmentLoadActivityLevelConstraint.java
index 006d02d53..aee7c4e20 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/PickupAndDeliverShipmentLoadActivityLevelConstraint.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/PickupAndDeliverShipmentLoadActivityLevelConstraint.java
@@ -116,13 +116,13 @@ public ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prev
         Capacity vehicleCapacityDimensions = iFacts.getNewVehicle().getType().getCapacityDimensions();
 
         if (newAct instanceof PickupActivityNEW) {
-            Capacity newCapacity = Capacity.addup(loadAtPrevAct, newAct.getSize());
+            Capacity newCapacity = loadAtPrevAct.add(newAct.getSize());
             if (!newCapacity.isLessOrEqual(vehicleCapacityDimensions)) {
                 return ConstraintsStatus.NOT_FULFILLED;
             }
         }
         if (newAct instanceof DeliveryActivityNEW) {
-            Capacity newCapacity = Capacity.addup(loadAtPrevAct, Capacity.invert(newAct.getSize()));
+            Capacity newCapacity = loadAtPrevAct.add(newAct.getSize().abs());
             if (!newCapacity.isLessOrEqual(vehicleCapacityDimensions)) {
                 return ConstraintsStatus.NOT_FULFILLED_BREAK;
             }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadActivityLevelConstraint.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadActivityLevelConstraint.java
index 432a75c3d..34dab9d28 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadActivityLevelConstraint.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadActivityLevelConstraint.java
@@ -70,7 +70,8 @@ public ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prev
         }
 
         if (newAct.getSize().isPositive()) {
-            if (!Capacity.addup(newAct.getSize(), futureMaxLoad).isLessOrEqual(iFacts.getNewVehicle().getType().getCapacityDimensions())) {
+            if (!newAct.getSize().add(futureMaxLoad).isLessOrEqual(
+                            iFacts.getNewVehicle().getType().getCapacityDimensions())) {
                 return ConstraintsStatus.NOT_FULFILLED;
             }
         }
@@ -84,7 +85,8 @@ public ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prev
          * they could refer to the same object.)
          */
         if (!newAct.getSize().isPositive()) {
-            if (!Capacity.addup(Capacity.invert(newAct.getSize()), prevMaxLoad).isLessOrEqual(iFacts.getNewVehicle().getType().getCapacityDimensions())) {
+            if (!newAct.getSize().abs().add(prevMaxLoad).isLessOrEqual(
+                            iFacts.getNewVehicle().getType().getCapacityDimensions())) {
                 return ConstraintsStatus.NOT_FULFILLED_BREAK;
             }
         }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadRouteLevelConstraint.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadRouteLevelConstraint.java
index bfcfd9947..5e517bf09 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadRouteLevelConstraint.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadRouteLevelConstraint.java
@@ -42,27 +42,35 @@
     public ServiceLoadRouteLevelConstraint(RouteAndActivityStateGetter stateManager) {
         super();
         this.stateManager = stateManager;
-        this.defaultValue = Capacity.Builder.newInstance().build();
+        defaultValue = Capacity.Builder.newInstance().build();
     }
 
     @Override
     public boolean fulfilled(JobInsertionContext insertionContext) {
         Capacity maxLoadAtRoute = stateManager.getRouteState(insertionContext.getRoute(), InternalStates.MAXLOAD, Capacity.class);
-        if (maxLoadAtRoute == null) maxLoadAtRoute = defaultValue;
+        if (maxLoadAtRoute == null) {
+            maxLoadAtRoute = defaultValue;
+        }
         Capacity capacityDimensions = insertionContext.getNewVehicle().getType().getCapacityDimensions();
         if (!maxLoadAtRoute.isLessOrEqual(capacityDimensions)) {
             return false;
         }
         if (insertionContext.getJob() instanceof Delivery) {
             Capacity loadAtDepot = stateManager.getRouteState(insertionContext.getRoute(), InternalStates.LOAD_AT_BEGINNING, Capacity.class);
-            if (loadAtDepot == null) loadAtDepot = defaultValue;
-            if (!Capacity.addup(loadAtDepot, insertionContext.getJob().getSize()).isLessOrEqual(capacityDimensions)) {
+            if (loadAtDepot == null) {
+                loadAtDepot = defaultValue;
+            }
+            if (!loadAtDepot.add(insertionContext.getJob().getSize())
+                            .isLessOrEqual(capacityDimensions)) {
                 return false;
             }
         } else if (insertionContext.getJob() instanceof Pickup || insertionContext.getJob() instanceof Service) {
             Capacity loadAtEnd = stateManager.getRouteState(insertionContext.getRoute(), InternalStates.LOAD_AT_END, Capacity.class);
-            if (loadAtEnd == null) loadAtEnd = defaultValue;
-            if (!Capacity.addup(loadAtEnd, insertionContext.getJob().getSize()).isLessOrEqual(capacityDimensions)) {
+            if (loadAtEnd == null) {
+                loadAtEnd = defaultValue;
+            }
+            if (!loadAtEnd.add(insertionContext.getJob().getSize())
+                            .isLessOrEqual(capacityDimensions)) {
                 return false;
             }
         }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Delivery.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Delivery.java
index 43f513da3..82a3892d2 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Delivery.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Delivery.java
@@ -61,7 +61,7 @@ protected void createActivities(JobBuilder<?, ?> builder) {
     @Override
     @Deprecated
     public Capacity getSize() {
-        return Capacity.invert(super.getSize());
+        return super.getSize().abs();
     }
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/ReturnedShipment.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/ReturnedShipment.java
index a7e6df7af..0a283dbc5 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/ReturnedShipment.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/ReturnedShipment.java
@@ -221,8 +221,8 @@ protected void createActivities(JobBuilder<?, ?> builder) {
         list.addActivity(new ExchangeActivityNEW(this, ACTIVITY_NAME_DELIVERY,
                         shipmentBuilder.getDeliveryLocation(),
                         shipmentBuilder.getDeliveryServiceTime(),
-                        Capacity.subtract(shipmentBuilder.getBackhaulCapacity(),
-                                        shipmentBuilder.getCapacity()),
+                        shipmentBuilder.getBackhaulCapacity()
+                                        .subtract(shipmentBuilder.getCapacity()),
                         shipmentBuilder.getDeliveryTimeWindows().getTimeWindows()));
         list.addActivity(new DeliveryActivityNEW(this, ACTIVITY_NAME_BACKHAUL,
                         shipmentBuilder.getBackhaulLocation(),
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverServiceDEPRECATED.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverServiceDEPRECATED.java
index ad2f90e9f..2e7e08e26 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverServiceDEPRECATED.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverServiceDEPRECATED.java
@@ -27,13 +27,13 @@
     public DeliverServiceDEPRECATED(Service service, BuilderBase<? extends Service, ?> builder) {
         super(service, builder.getType(), builder.getLocation(),
                         builder.getServiceTime(),
-                        Capacity.invert(builder.getCapacity()),
+                        builder.getCapacity().invert(),
                         builder.getTimeWindows().getTimeWindows());
     }
 
     public DeliverServiceDEPRECATED(Delivery delivery) {
         super(delivery, delivery.getType(), delivery.getLocation(), delivery.getServiceDuration(),
-                        Capacity.invert(delivery.getSize()), delivery.getServiceTimeWindows());
+                        delivery.getSize().invert(), delivery.getServiceTimeWindows());
     }
 
     public DeliverServiceDEPRECATED(DeliverServiceDEPRECATED sourceActivity) {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverShipmentDEPRECATED.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverShipmentDEPRECATED.java
index 2c0e71365..b000ae75b 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverShipmentDEPRECATED.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverShipmentDEPRECATED.java
@@ -17,7 +17,6 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.job.Shipment.BuilderBase;
 
@@ -28,7 +27,7 @@
     public DeliverShipmentDEPRECATED(Shipment shipment,
                     BuilderBase<? extends Shipment, ?> builder) {
         super(shipment, NAME, builder.getDeliveryLocation(), builder.getDeliveryServiceTime(),
-                        Capacity.invert(builder.getCapacity()),
+                        builder.getCapacity().invert(),
                         builder.getDeliveryTimeWindows().getTimeWindows());
     }
 
@@ -40,7 +39,7 @@ public DeliverShipmentDEPRECATED(DeliverShipmentDEPRECATED sourceActivity) {
     @Deprecated
     public DeliverShipmentDEPRECATED(Shipment s) {
         super(s, NAME, s.getDeliveryLocation(), s.getDeliveryServiceTime(),
-                        Capacity.invert(s.getSize()),
+                        s.getSize().invert(),
                         s.getDeliveryTimeWindows());
     }
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/CapacityTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/CapacityTest.java
index 110d5e3bd..1b51352cf 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/CapacityTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/CapacityTest.java
@@ -112,7 +112,7 @@ public void whenCopyingNull_itShouldReturnNull() {
     public void whenAddingUpTwoOneDimensionalCapacities_itShouldReturnCorrectCapacityValues() {
         Capacity cap1 = Capacity.Builder.newInstance().addDimension(0, 1).build();
         Capacity cap2 = Capacity.Builder.newInstance().addDimension(0, 2).build();
-        Capacity result = Capacity.addup(cap1, cap2);
+        Capacity result = cap1.add(cap2);
         assertEquals(3, result.get(0));
     }
 
@@ -120,7 +120,7 @@ public void whenAddingUpTwoOneDimensionalCapacities_itShouldReturnCorrectCapacit
     public void whenAddingUpTwoOneDimensionalCapacities_itShouldReturnCorrectNuOfDimensions() {
         Capacity cap1 = Capacity.Builder.newInstance().addDimension(0, 1).build();
         Capacity cap2 = Capacity.Builder.newInstance().addDimension(0, 2).build();
-        Capacity result = Capacity.addup(cap1, cap2);
+        Capacity result = cap1.add(cap2);
         assertEquals(1, result.getNuOfDimensions());
     }
 
@@ -128,7 +128,7 @@ public void whenAddingUpTwoOneDimensionalCapacities_itShouldReturnCorrectNuOfDim
     public void whenAddingUpTwoThreeDimensionalCapacities_itShouldReturnCorrectNuOfDimensions() {
         Capacity cap1 = Capacity.Builder.newInstance().addDimension(0, 1).addDimension(1, 2).addDimension(2, 3).build();
         Capacity cap2 = Capacity.Builder.newInstance().addDimension(0, 2).addDimension(1, 3).addDimension(2, 4).build();
-        Capacity result = Capacity.addup(cap1, cap2);
+        Capacity result = cap1.add(cap2);
         assertEquals(3, result.getNuOfDimensions());
     }
 
@@ -136,7 +136,7 @@ public void whenAddingUpTwoThreeDimensionalCapacities_itShouldReturnCorrectNuOfD
     public void whenAddingUpTwoThreeDimensionalCapacities_itShouldReturnCorrectCapValues() {
         Capacity cap1 = Capacity.Builder.newInstance().addDimension(0, 1).addDimension(1, 2).addDimension(2, 3).build();
         Capacity cap2 = Capacity.Builder.newInstance().addDimension(0, 2).addDimension(1, 3).addDimension(2, 4).build();
-        Capacity result = Capacity.addup(cap1, cap2);
+        Capacity result = cap1.add(cap2);
         assertEquals(3, result.get(0));
         assertEquals(5, result.get(1));
         assertEquals(7, result.get(2));
@@ -145,7 +145,7 @@ public void whenAddingUpTwoThreeDimensionalCapacities_itShouldReturnCorrectCapVa
     public void whenAddingUpTwoCapacitiesWithDifferentNuOfDimensions_itShouldAddThemCorrectly() {
         Capacity cap1 = Capacity.Builder.newInstance().addDimension(0, 1).addDimension(1, 2).build();
         Capacity cap2 = Capacity.Builder.newInstance().addDimension(0, 2).build();
-        Capacity result = Capacity.addup(cap1, cap2);
+        Capacity result = cap1.add(cap2);
         assertEquals(3, result.get(0));
         assertEquals(2, result.get(1));
     }
@@ -154,7 +154,7 @@ public void whenAddingUpTwoCapacitiesWithDifferentNuOfDimensions_itShouldAddThem
     public void whenOneOfArgsIsNullWhenAdding_itShouldThrowException() {
         Capacity cap1 = Capacity.Builder.newInstance().addDimension(0, 1).addDimension(1, 2).build();
         @SuppressWarnings("unused")
-        Capacity result = Capacity.addup(cap1, null);
+        Capacity result = cap1.add(null);
     }
 
 
@@ -162,7 +162,7 @@ public void whenOneOfArgsIsNullWhenAdding_itShouldThrowException() {
     public void whenSubtractingTwoOneDimensionalCapacities_itShouldReturnCorrectCapacityValues() {
         Capacity cap1 = Capacity.Builder.newInstance().addDimension(0, 1).build();
         Capacity cap2 = Capacity.Builder.newInstance().addDimension(0, 2).build();
-        Capacity result = Capacity.subtract(cap2, cap1);
+        Capacity result = cap2.subtract(cap1);
         assertEquals(1, result.get(0));
     }
 
@@ -170,7 +170,7 @@ public void whenSubtractingTwoOneDimensionalCapacities_itShouldReturnCorrectCapa
     public void whenSubtractingTwoOneDimensionalCapacities_itShouldReturnCorrectNuOfDimensions() {
         Capacity cap1 = Capacity.Builder.newInstance().addDimension(0, 1).build();
         Capacity cap2 = Capacity.Builder.newInstance().addDimension(0, 2).build();
-        Capacity result = Capacity.subtract(cap2, cap1);
+        Capacity result = cap2.subtract(cap1);
         assertEquals(1, result.getNuOfDimensions());
     }
 
@@ -178,7 +178,7 @@ public void whenSubtractingTwoOneDimensionalCapacities_itShouldReturnCorrectNuOf
     public void whenSubtractingTwoThreeDimensionalCapacities_itShouldReturnCorrectNuOfDimensions() {
         Capacity cap1 = Capacity.Builder.newInstance().addDimension(0, 1).addDimension(1, 2).addDimension(2, 3).build();
         Capacity cap2 = Capacity.Builder.newInstance().addDimension(0, 2).addDimension(1, 3).addDimension(2, 4).build();
-        Capacity result = Capacity.subtract(cap2, cap1);
+        Capacity result = cap2.subtract(cap1);
         assertEquals(3, result.getNuOfDimensions());
     }
 
@@ -186,7 +186,7 @@ public void whenSubtractingTwoThreeDimensionalCapacities_itShouldReturnCorrectNu
     public void whenSubtractingTwoThreeDimensionalCapacities_itShouldReturnCorrectCapValues() {
         Capacity cap1 = Capacity.Builder.newInstance().addDimension(0, 1).addDimension(1, 2).addDimension(2, 3).build();
         Capacity cap2 = Capacity.Builder.newInstance().addDimension(0, 2).addDimension(1, 3).addDimension(2, 4).build();
-        Capacity result = Capacity.subtract(cap2, cap1);
+        Capacity result = cap2.subtract(cap1);
         assertEquals(1, result.get(0));
         assertEquals(1, result.get(1));
         assertEquals(1, result.get(2));
@@ -196,7 +196,7 @@ public void whenSubtractingTwoThreeDimensionalCapacities_itShouldReturnCorrectCa
     public void whenSubtractingTwoCapacitiesWithDifferentNuOfDimensions_itShouldSubtractCorrectly() {
         Capacity cap1 = Capacity.Builder.newInstance().addDimension(0, 1).addDimension(1, 2).build();
         Capacity cap2 = Capacity.Builder.newInstance().addDimension(0, 2).build();
-        Capacity result = Capacity.subtract(cap2, cap1);
+        Capacity result = cap2.subtract(cap1);
         assertEquals(1, result.get(0));
         assertEquals(-2, result.get(1));
     }
@@ -205,14 +205,14 @@ public void whenSubtractingTwoCapacitiesWithDifferentNuOfDimensions_itShouldSubt
     public void whenOneOfArgsIsNullWhenSubtracting_itShouldThrowException() {
         Capacity cap1 = Capacity.Builder.newInstance().addDimension(0, 1).addDimension(1, 2).build();
         @SuppressWarnings("unused")
-        Capacity result = Capacity.subtract(cap1, null);
+        Capacity result = cap1.subtract(null);
     }
 
     @Test
     public void whenSubtractingBiggerFromLower_itShouldSubtractCorrectly() {
         Capacity cap1 = Capacity.Builder.newInstance().addDimension(0, 1).addDimension(1, 2).addDimension(2, 3).build();
         Capacity cap2 = Capacity.Builder.newInstance().addDimension(0, 2).addDimension(1, 3).addDimension(2, 4).build();
-        Capacity result = Capacity.subtract(cap1, cap2);
+        Capacity result = cap1.subtract(cap2);
         assertEquals(-1, result.get(0));
         assertEquals(-1, result.get(1));
         assertEquals(-1, result.get(2));
@@ -275,7 +275,7 @@ public void whenAddingTwo_itShouldReturnCorrectCap() {
         Capacity cap1 = Capacity.Builder.newInstance().addDimension(wheelChairSpace, 2).addDimension(passengerSeats, 10).build();
         Capacity wheelChair = Capacity.Builder.newInstance().addDimension(wheelChairSpace, 1).build();
         Capacity passenger = Capacity.Builder.newInstance().addDimension(passengerSeats, 1).build();
-        Capacity wheelChair_plus_passenger = Capacity.addup(wheelChair, passenger);
+        Capacity wheelChair_plus_passenger = wheelChair.add(passenger);
         assertEquals(1, wheelChair_plus_passenger.get(wheelChairSpace));
         assertEquals(1, wheelChair_plus_passenger.get(passengerSeats));
         assertTrue(wheelChair_plus_passenger.isLessOrEqual(cap1));
@@ -289,7 +289,7 @@ public void whenAddingTwo_itShouldReturnCorrectCap_v2() {
         Capacity cap1 = Capacity.Builder.newInstance().addDimension(wheelChairSpace, 2).addDimension(passengerSeats, 10).addDimension(2, 100).build();
         Capacity wheelChair = Capacity.Builder.newInstance().addDimension(wheelChairSpace, 1).addDimension(weight, 80).build();
         Capacity passenger = Capacity.Builder.newInstance().addDimension(passengerSeats, 1).addDimension(weight, 30).build();
-        Capacity wheelChair_plus_passenger = Capacity.addup(wheelChair, passenger);
+        Capacity wheelChair_plus_passenger = wheelChair.add(passenger);
         assertEquals(1, wheelChair_plus_passenger.get(wheelChairSpace));
         assertEquals(1, wheelChair_plus_passenger.get(passengerSeats));
         assertEquals(110, wheelChair_plus_passenger.get(weight));
@@ -299,7 +299,7 @@ public void whenAddingTwo_itShouldReturnCorrectCap_v2() {
     @Test
     public void whenInvertingCap_itShouldBeDoneCorrectly() {
         Capacity cap = Capacity.Builder.newInstance().addDimension(0, 2).addDimension(1, 3).addDimension(2, 4).build();
-        Capacity inverted = Capacity.invert(cap);
+        Capacity inverted = cap.invert();
         assertEquals(-2, inverted.get(0));
         assertEquals(-3, inverted.get(1));
         assertEquals(-4, inverted.get(2));
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/LoadConstraintTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/LoadConstraintTest.java
index 794007606..06b2105d9 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/LoadConstraintTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/LoadConstraintTest.java
@@ -408,7 +408,7 @@ public void whenPDRoute_newDeliveryShouldFitInBetweenStartAndAct1() {
 
         JobInsertionContext context = new JobInsertionContext(pickup_delivery_route, s, pickup_delivery_route.getVehicle(), null, 0.);
         DeliveryActivityNEW newAct = new DeliveryActivityNEW(s, "del", null, 0,
-                        Capacity.invert(newSize),
+                        newSize.invert(),
                         TimeWindows.ANY_TIME.getTimeWindows());
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickup_delivery_route.getStart(), newAct, pickup_delivery_route.getActivities().get(0), 0.);
@@ -426,7 +426,7 @@ public void whenPDRoute_newDeliveryShouldNotFitInBetweenStartAndAct1() {
 
         JobInsertionContext context = new JobInsertionContext(pickup_delivery_route, s, pickup_delivery_route.getVehicle(), null, 0.);
         DeliveryActivityNEW newAct = new DeliveryActivityNEW(s, "del", null, 0,
-                        Capacity.invert(newSize),
+                        newSize.invert(),
                         TimeWindows.ANY_TIME.getTimeWindows());
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickup_delivery_route.getStart(), newAct, pickup_delivery_route.getActivities().get(0), 0.);
@@ -444,7 +444,7 @@ public void whenPDRoute_newDeliveryShouldFitInBetweenAct1AndAct2() {
 
         JobInsertionContext context = new JobInsertionContext(pickup_delivery_route, s, pickup_delivery_route.getVehicle(), null, 0.);
         DeliveryActivityNEW newAct = new DeliveryActivityNEW(s, "del", null, 0,
-                        Capacity.invert(newSize),
+                        newSize.invert(),
                         TimeWindows.ANY_TIME.getTimeWindows());
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickup_delivery_route.getActivities().get(0), newAct, pickup_delivery_route.getActivities().get(1), 0.);
@@ -462,7 +462,7 @@ public void whenPDRoute_newDeliveryNotShouldFitInBetweenAct1AndAct2() {
 
         JobInsertionContext context = new JobInsertionContext(pickup_delivery_route, s, pickup_delivery_route.getVehicle(), null, 0.);
         DeliveryActivityNEW newAct = new DeliveryActivityNEW(s, "del", null, 0,
-                        Capacity.invert(newSize),
+                        newSize.invert(),
                         TimeWindows.ANY_TIME.getTimeWindows());
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickup_delivery_route.getActivities().get(0), newAct, pickup_delivery_route.getActivities().get(1), 0.);
@@ -480,7 +480,7 @@ public void whenPDRoute_newDeliveryShouldFitInBetweenAct2AndEnd() {
 
         JobInsertionContext context = new JobInsertionContext(pickup_delivery_route, s, pickup_delivery_route.getVehicle(), null, 0.);
         DeliveryActivityNEW newAct = new DeliveryActivityNEW(s, "del", null, 0,
-                        Capacity.invert(newSize),
+                        newSize.invert(),
                         TimeWindows.ANY_TIME.getTimeWindows());
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickup_delivery_route.getActivities().get(1), newAct, pickup_delivery_route.getEnd(), 0.);
@@ -498,7 +498,7 @@ public void whenPDRoute_newDeliveryShouldNotFitInBetweenAct2AndEnd() {
 
         JobInsertionContext context = new JobInsertionContext(pickup_delivery_route, s, pickup_delivery_route.getVehicle(), null, 0.);
         DeliveryActivityNEW newAct = new DeliveryActivityNEW(s, "del", null, 0,
-                        Capacity.invert(newSize),
+                        newSize.invert(),
                         TimeWindows.ANY_TIME.getTimeWindows());
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickup_delivery_route.getActivities().get(1), newAct, pickup_delivery_route.getEnd(), 0.);
@@ -808,7 +808,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldFitInBetweenStartAndA
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
         DeliveryActivityNEW newAct = new DeliveryActivityNEW(s, "pick", null, 0,
-                        Capacity.invert(newSize), TimeWindows.ANY_TIME.getTimeWindows());
+                        newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getStart(), newAct, shipment_route.getActivities().get(0), 0.);
 
@@ -826,7 +826,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldNotFitInBetweenStartA
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
         DeliveryActivityNEW newAct = new DeliveryActivityNEW(s, "pick", null, 0,
-                        Capacity.invert(newSize), TimeWindows.ANY_TIME.getTimeWindows());
+                        newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getStart(), newAct, shipment_route.getActivities().get(0), 0.);
 
@@ -844,7 +844,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldFitInBetweenAct1AndAc
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
         DeliveryActivityNEW newAct = new DeliveryActivityNEW(s, "pick", null, 0,
-                        Capacity.invert(newSize), TimeWindows.ANY_TIME.getTimeWindows());
+                        newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getActivities().get(0), newAct, shipment_route.getActivities().get(1), 0.);
 
@@ -862,7 +862,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldNotFitInBetweenAct1An
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
         DeliveryActivityNEW newAct = new DeliveryActivityNEW(s, "pick", null, 0,
-                        Capacity.invert(newSize), TimeWindows.ANY_TIME.getTimeWindows());
+                        newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getActivities().get(0), newAct, shipment_route.getActivities().get(1), 0.);
 
@@ -880,7 +880,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldFitInBetweenAct2AndAc
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
         DeliveryActivityNEW newAct = new DeliveryActivityNEW(s, "pick", null, 0,
-                        Capacity.invert(newSize), TimeWindows.ANY_TIME.getTimeWindows());
+                        newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getActivities().get(1), newAct, shipment_route.getActivities().get(2), 0.);
 
@@ -898,7 +898,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldNotFitInBetweenAct2An
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
         DeliveryActivityNEW newAct = new DeliveryActivityNEW(s, "pick", null, 0,
-                        Capacity.invert(newSize), TimeWindows.ANY_TIME.getTimeWindows());
+                        newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getActivities().get(1), newAct, shipment_route.getActivities().get(2), 0.);
 
@@ -916,7 +916,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldFitInBetweenAct3AndAc
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
         DeliveryActivityNEW newAct = new DeliveryActivityNEW(s, "pick", null, 0,
-                        Capacity.invert(newSize), TimeWindows.ANY_TIME.getTimeWindows());
+                        newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getActivities().get(2), newAct, shipment_route.getActivities().get(3), 0.);
 
@@ -934,7 +934,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldNotFitInBetweenAct3An
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
         DeliveryActivityNEW newAct = new DeliveryActivityNEW(s, "pick", null, 0,
-                        Capacity.invert(newSize), TimeWindows.ANY_TIME.getTimeWindows());
+                        newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getActivities().get(2), newAct, shipment_route.getActivities().get(3), 0.);
 
@@ -952,7 +952,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldFitInBetweenAct4AndEn
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
         DeliveryActivityNEW newAct = new DeliveryActivityNEW(s, "pick", null, 0,
-                        Capacity.invert(newSize), TimeWindows.ANY_TIME.getTimeWindows());
+                        newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getActivities().get(3), newAct, shipment_route.getEnd(), 0.);
 
@@ -969,7 +969,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldNotFitInBetweenAct4An
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
         DeliveryActivityNEW newAct = new DeliveryActivityNEW(s, "pick", null, 0,
-                        Capacity.invert(newSize), TimeWindows.ANY_TIME.getTimeWindows());
+                        newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getActivities().get(3), newAct, shipment_route.getEnd(), 0.);
 
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/PickupAndDeliveryExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/PickupAndDeliveryExample.java
index 6484fdfec..2fd4f1837 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/PickupAndDeliveryExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/PickupAndDeliveryExample.java
@@ -17,6 +17,10 @@
  */
 package com.graphhopper.jsprit.examples;
 
+import java.time.Duration;
+import java.time.LocalTime;
+import java.util.Collection;
+
 import com.graphhopper.jsprit.analysis.toolbox.AlgorithmSearchProgressChartListener;
 import com.graphhopper.jsprit.analysis.toolbox.Plotter;
 import com.graphhopper.jsprit.analysis.toolbox.Plotter.Label;
@@ -33,67 +37,111 @@
 import com.graphhopper.jsprit.io.problem.VrpXMLReader;
 import com.graphhopper.jsprit.util.Examples;
 
-import java.util.Collection;
-
 
 public class PickupAndDeliveryExample {
 
     public static void main(String[] args) {
 
-		/*
+//        List<Capacity> caps = new ArrayList<>();
+//        Random rnd = new Random(42);
+//
+//        for (int i = 0; i < 10000; i++) {
+//            int dim = rnd.nextInt(10) + 1;
+//            Capacity.Builder b = Capacity.Builder.newInstance();
+//            for (int j = 0; j < dim; j++) {
+//                b.addDimension(j, rnd.nextInt(1000) - 500);
+//            }
+//            caps.add(b.build());
+//        }
+//
+//        LocalTime st1 = LocalTime.now();
+//        for (int i = 0; i < caps.size(); i++) {
+//            for (int j = 0; j < caps.size(); j++) {
+//                Capacity c2 = caps.get(i).subtract(caps.get(j));
+//                if (c2.getNuOfDimensions() > 1000) {
+//                    System.out.println("x");
+//                }
+//            }
+//        }
+//        LocalTime en1 = LocalTime.now();
+//        Duration dur1 = Duration.between(en1, st1);
+//        System.out.println(dur1);
+//
+//        LocalTime st2 = LocalTime.now();
+//        for (int i = 0; i < caps.size(); i++) {
+//            for (int j = 0; j < caps.size(); j++) {
+//                Capacity c2 = Capacity.subtract(caps.get(i), caps.get(j));
+//                if (c2.getNuOfDimensions() > 1000) {
+//                    System.out.println("x");
+//                }
+//            }
+//        }
+//        LocalTime en2 = LocalTime.now();
+//        Duration dur2 = Duration.between(en2, st2);
+//        System.out.println(dur2);
+//        System.out.println((dur2.getSeconds() + (double) dur2.getNano() / 1000000000) / dur1.getSeconds() + (double) dur1.getNano() / 1000000000);
+//        System.exit(1);
+
+        /*
          * some preparation - create output folder
-		 */
+         */
         Examples.createOutputFolder();
 
-		/*
+        /*
          * Build the problem.
-		 *
-		 * But define a problem-builder first.
-		 */
+         *
+         * But define a problem-builder first.
+         */
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
 
-		/*
+        /*
          * A solomonReader reads solomon-instance files, and stores the required information in the builder.
-		 */
+         */
         new VrpXMLReader(vrpBuilder).read("input/pickups_and_deliveries_solomon_r101_withoutTWs.xml");
 
-		/*
-         * Finally, the problem can be built. By default, transportCosts are crowFlyDistances (as usually used for vrp-instances).
-		 */
+        /*
+         * Finally, the problem can be built. By default, transportCosts are crowFlyDistances (as usually used for
+         * vrp-instances).
+         */
 
         final VehicleRoutingProblem vrp = vrpBuilder.build();
 
         new Plotter(vrp).plot("output/pd_solomon_r101.png", "pd_r101");
 
 
-		/*
+        /*
          * Define the required vehicle-routing algorithms to solve the above problem.
-		 *
-		 * The algorithm can be defined and configured in an xml-file.
-		 */
+         *
+         * The algorithm can be defined and configured in an xml-file.
+         */
 //		VehicleRoutingAlgorithm vra = new SchrimpfFactory().createAlgorithm(vrp);
         VehicleRoutingAlgorithm vra = Jsprit.createAlgorithm(vrp);
         vra.getAlgorithmListeners().addListener(new AlgorithmSearchProgressChartListener("output/sol_progress.png"));
         /*
          * Solve the problem.
-		 *
-		 *
-		 */
+         *
+         *
+         */
+
+        LocalTime st2 = LocalTime.now();
         Collection<VehicleRoutingProblemSolution> solutions = vra.searchSolutions();
+        LocalTime en2 = LocalTime.now();
+        Duration dur2 = Duration.between(en2, st2);
+        System.out.println(dur2);
 
-		/*
+        /*
          * Retrieve best solution.
-		 */
+         */
         VehicleRoutingProblemSolution solution = new SelectBest().selectSolution(solutions);
 
-		/*
-		 * print solution
-		 */
+        /*
+         * print solution
+         */
         SolutionPrinter.print(solution);
 
-		/*
-		 * Plot solution.
-		 */
+        /*
+         * Plot solution.
+         */
 //		SolutionPlotter.plotSolutionAsPNG(vrp, solution, "output/pd_solomon_r101_solution.png","pd_r101");
         Plotter plotter = new Plotter(vrp, solution);
         plotter.setLabel(Label.SIZE);
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/VRPWithBackhaulsExample2.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/VRPWithBackhaulsExample2.java
index 130824e9c..6662ae1e9 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/VRPWithBackhaulsExample2.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/VRPWithBackhaulsExample2.java
@@ -17,6 +17,8 @@
  */
 package com.graphhopper.jsprit.examples;
 
+import java.util.Collection;
+
 import com.graphhopper.jsprit.analysis.toolbox.AlgorithmSearchProgressChartListener;
 import com.graphhopper.jsprit.analysis.toolbox.Plotter;
 import com.graphhopper.jsprit.core.algorithm.VehicleRoutingAlgorithm;
@@ -24,7 +26,6 @@
 import com.graphhopper.jsprit.core.algorithm.selector.SelectBest;
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.analysis.SolutionAnalyser;
-import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
@@ -38,44 +39,43 @@
 import com.graphhopper.jsprit.io.problem.VrpXMLReader;
 import com.graphhopper.jsprit.util.Examples;
 
-import java.util.Collection;
-
 
 public class VRPWithBackhaulsExample2 {
 
     public static void main(String[] args) {
 
-		/*
+        /*
          * some preparation - create output folder
-		 */
+         */
         Examples.createOutputFolder();
 
-		/*
+        /*
          * Build the problem.
-		 *
-		 * But define a problem-builder first.
-		 */
+         *
+         * But define a problem-builder first.
+         */
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
 
-		/*
+        /*
          * A solomonReader reads solomon-instance files, and stores the required information in the builder.
-		 */
+         */
         new VrpXMLReader(vrpBuilder).read("input/pd_christophides_vrpnc1_vcap50.xml");
 
 
-		/*
-         * Finally, the problem can be built. By default, transportCosts are crowFlyDistances (as usually used for vrp-instances).
-		 */
+        /*
+         * Finally, the problem can be built. By default, transportCosts are crowFlyDistances (as usually used for
+         * vrp-instances).
+         */
         final VehicleRoutingProblem vrp = vrpBuilder.build();
 
 //		new Plotter(vrp).plot("output/vrpwbh_christophides_vrpnc1.png", "pd_vrpnc1");
 
 
-		/*
+        /*
          * Define the required vehicle-routing algorithms to solve the above problem.
-		 *
-		 * The algorithm can be defined and configured in an xml-file.
-		 */
+         *
+         * The algorithm can be defined and configured in an xml-file.
+         */
 //		VehicleRoutingAlgorithm vra = VehicleRoutingAlgorithms.readAndCreateAlgorithm(vrp, "input/algorithmConfig_solomon.xml");
 
 //        VehicleRoutingAlgorithmBuilder vraBuilder = new VehicleRoutingAlgorithmBuilder(vrp,"input/algorithmConfig_solomon.xml");
@@ -92,34 +92,34 @@ public static void main(String[] args) {
 
 
         VehicleRoutingAlgorithm vra = Jsprit.Builder.newInstance(vrp)
-            .setStateAndConstraintManager(stateManager, constraintManager)
-            .setProperty(Jsprit.Parameter.FIXED_COST_PARAM.toString(), "0.")
-            .buildAlgorithm();
+                .setStateAndConstraintManager(stateManager, constraintManager)
+                .setProperty(Jsprit.Parameter.FIXED_COST_PARAM.toString(), "0.")
+                .buildAlgorithm();
         vra.setMaxIterations(2000);
         vra.addListener(new AlgorithmSearchProgressChartListener("output/search"));
 
 
 
-		/*
+        /*
          * Solve the problem.
-		 *
-		 *
-		 */
+         *
+         *
+         */
         Collection<VehicleRoutingProblemSolution> solutions = vra.searchSolutions();
 
-		/*
+        /*
          * Retrieve best solution.
-		 */
+         */
         VehicleRoutingProblemSolution solution = new SelectBest().selectSolution(solutions);
 
-		/*
+        /*
          * print solution
-		 */
+         */
         SolutionPrinter.print(solution);
 
-		/*
-		 * Plot solution.
-		 */
+        /*
+         * Plot solution.
+         */
 //		SolutionPlotter.plotSolutionAsPNG(vrp, solution, "output/pd_solomon_r101_solution.png","pd_r101");
         Plotter plotter = new Plotter(vrp, solution);
 //		plotter.setLabel(Plotter.Label.SIZE);
@@ -154,7 +154,8 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
             System.out.println("skillConstraintViolatedOnRoute: " + analyser.hasSkillConstraintViolation(route));
 
             System.out.println("dist@" + route.getStart().getLocation().getId() + ": " + analyser.getDistanceAtActivity(route.getStart(), route));
-            System.out.println("timeWindowViolation@" + route.getStart().getLocation().getId() + ": " + analyser.getTimeWindowViolationAtActivity(route.getStart(), route));
+            System.out.println("timeWindowViolation@" + route.getStart().getLocation().getId() + ": "
+                    + analyser.getTimeWindowViolationAtActivity(route.getStart(), route));
             for (TourActivity act : route.getActivities()) {
                 System.out.println("--");
                 System.out.println("actType: " + act.getName() + " demand: " + act.getSize());
@@ -168,12 +169,13 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
             }
             System.out.println("--");
             System.out.println("dist@" + route.getEnd().getLocation().getId() + ": " + analyser.getDistanceAtActivity(route.getEnd(), route));
-            System.out.println("timeWindowViolation@" + route.getEnd().getLocation().getId() + ": " + analyser.getTimeWindowViolationAtActivity(route.getEnd(), route));
+            System.out.println(
+                    "timeWindowViolation@" + route.getEnd().getLocation().getId() + ": " + analyser.getTimeWindowViolationAtActivity(route.getEnd(), route));
         }
 
         System.out.println("-----");
         System.out.println("aggreate solution stats");
-        System.out.println("total freight moved: " + Capacity.addup(analyser.getLoadAtBeginning(), analyser.getLoadPickedUp()));
+        System.out.println("total freight moved: " + analyser.getLoadAtBeginning().add(analyser.getLoadPickedUp()));
         System.out.println("total no. picks at beginning: " + analyser.getNumberOfPickupsAtBeginning());
         System.out.println("total no. picks on routes: " + analyser.getNumberOfPickups());
         System.out.println("total picked load at beginnnig: " + analyser.getLoadAtBeginning());
