diff --git a/jsprit-core/pom.xml b/jsprit-core/pom.xml
index dea213209..b1b1c828a 100644
--- a/jsprit-core/pom.xml
+++ b/jsprit-core/pom.xml
@@ -42,7 +42,11 @@
             <version>${logger.version}</version>
         </dependency>
 
+        <dependency>
+            <groupId>org.apache.commons</groupId>
+            <artifactId>commons-csv</artifactId>
+            <version>1.4</version>
+        </dependency>
     </dependencies>
 
-
 </project>
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/AbstractPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/AbstractPrinterColumn.java
index d43087d56..97bbe74d3 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/AbstractPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/AbstractPrinterColumn.java
@@ -4,29 +4,50 @@
 
 import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
 
-public abstract class AbstractPrinterColumn<C extends PrinterContext, T> {
+public abstract class AbstractPrinterColumn<C extends PrinterContext, T, A extends AbstractPrinterColumn<C, T, A>> {
 
     private Consumer<DynamicTableDefinition.ColumnDefinition.Builder> decorator;
 
+    private String title;
+
     public AbstractPrinterColumn() {
-        super();
+        this(null);
     }
 
     public AbstractPrinterColumn(Consumer<Builder> decorator) {
         super();
         this.decorator = decorator;
+        this.title = getDefaultTitle();
     }
 
     public DynamicTableDefinition.ColumnDefinition getColumnDefinition() {
-        Builder builder = getColumnBuilder();
+        Builder builder = getColumnBuilder().withTitle(getTitle());
         if (decorator != null) {
             decorator.accept(builder);
         }
         return builder.build();
     }
 
+    public String getTitle() {
+        return title;
+    }
+
+    @SuppressWarnings("unchecked")
+    public A withTitle(String title) {
+        this.title = title;
+        return (A) this;
+    }
+
+    @SuppressWarnings("unchecked")
+    public A withDecorator(Consumer<DynamicTableDefinition.ColumnDefinition.Builder> decorator) {
+        this.decorator = decorator;
+        return (A) this;
+    }
+
     protected abstract DynamicTableDefinition.ColumnDefinition.Builder getColumnBuilder();
 
     public abstract T getData(C context);
 
+    protected abstract String getDefaultTitle();
+
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/ConfigurableTablePrinter.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/ConfigurableTablePrinter.java
index c8901d76c..c70b7bf2a 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/ConfigurableTablePrinter.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/ConfigurableTablePrinter.java
@@ -1,11 +1,18 @@
 package com.graphhopper.jsprit.core.reporting;
 
+import java.io.IOException;
+import java.io.StringWriter;
 import java.nio.CharBuffer;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
+import java.util.stream.Collectors;
 import java.util.stream.IntStream;
 
+import org.apache.commons.csv.CSVFormat;
+import org.apache.commons.csv.CSVPrinter;
+import org.apache.commons.csv.QuoteMode;
+
 import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.Alignment;
 import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition;
 
@@ -69,6 +76,10 @@ public String get(int index) {
             }
             return row[index];
         }
+
+        public List<String> getAll() {
+            return Arrays.asList(row);
+        }
     }
 
     private class Separator extends TableRow {
@@ -178,5 +189,71 @@ public String print() {
         return colWidth;
     }
 
+    public static class CsvConfig {
+        private char delimiter = ';';
+        private char quote = '\"';
+        private char escape = '\\';
+        private boolean printHeader = true;
+
+        public char getDelimiter() {
+            return delimiter;
+        }
+
+        public CsvConfig withDelimiter(char delimiter) {
+            this.delimiter = delimiter;
+            return this;
+        }
+
+        public char getQuote() {
+            return quote;
+        }
+
+        public CsvConfig withQuote(char quote) {
+            this.quote = quote;
+            return this;
+        }
+
+        public char getEscape() {
+            return escape;
+        }
+
+        public CsvConfig withEscape(char escape) {
+            this.escape = escape;
+            return this;
+        }
+
+        public boolean isPrintHeader() {
+            return printHeader;
+        }
+
+        public CsvConfig withPrintHeader(boolean printHeader) {
+            this.printHeader = printHeader;
+            return this;
+        }
+
+    }
+
+    public String exportToCsv(CsvConfig config) {
+        CSVFormat format = CSVFormat.DEFAULT
+                        .withDelimiter(config.delimiter)
+                        .withQuote(config.quote)
+                        .withQuoteMode(QuoteMode.NON_NUMERIC)
+                        .withEscape(config.escape);
+
+        StringWriter sw = new StringWriter();
+        try (CSVPrinter printer = new CSVPrinter(sw, format)) {
+            printer.printRecord(columnList.getColumns().stream()
+                            .map(c -> c.getColumnDefinition().getTitle())
+                            .collect(Collectors.toList()));
+            for(TableRow r : rows) {
+                if (!(r instanceof ConfigurableTablePrinter.Separator)) {
+                    printer.printRecord(r.getAll());
+                }
+            }
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+        return sw.toString();
+    }
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/DynamicTableDefinition.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/DynamicTableDefinition.java
index 9bd5b2716..73c02bee5 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/DynamicTableDefinition.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/DynamicTableDefinition.java
@@ -234,6 +234,16 @@ public Builder(ColumnType<?> type, String title) {
                 this.title = title;
             }
 
+            public Builder(ColumnType<?> type) {
+                super();
+                this.type = type;
+            }
+
+            public Builder withTitle(String title) {
+                this.title = title;
+                return this;
+            }
+
             public Builder withMinWidth(int minWidth) {
                 this.minWidth = minWidth;
                 return this;
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/PrinterColumnList.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/PrinterColumnList.java
index ea068a786..27f548c5a 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/PrinterColumnList.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/PrinterColumnList.java
@@ -1,7 +1,10 @@
 package com.graphhopper.jsprit.core.reporting;
 
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
+import java.util.Optional;
+import java.util.stream.Collectors;
 
 import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.Builder;
 
@@ -9,7 +12,7 @@
 
     private String heading = null;
 
-    private List<AbstractPrinterColumn<C, ?>> columns = new ArrayList<>();
+    private List<AbstractPrinterColumn<C, ?, ?>> columns = new ArrayList<>();
 
     public PrinterColumnList() {
         super();
@@ -20,11 +23,23 @@ public PrinterColumnList(String heading) {
         this.heading = heading;
     }
 
-    public PrinterColumnList<C> addColumn(AbstractPrinterColumn<C, ?> column) {
-        columns.add(column);
+    public PrinterColumnList<C> addColumn(AbstractPrinterColumn<C, ?,?> column) {
+        if (findByTitle(column.getTitle()).isPresent()) {
+            throw new IllegalArgumentException("Name is duplicated: " + column.getTitle());
+        } else {
+            columns.add(column);
+        }
         return this;
     }
 
+    public boolean removeColumn(AbstractPrinterColumn<C, ?, ?> column) {
+        boolean res = columns.contains(column);
+        if (res) {
+            columns.remove(column);
+        }
+        return res;
+    }
+
     public DynamicTableDefinition getTableDefinition() {
         Builder defBuilder = new DynamicTableDefinition.Builder();
         columns.forEach(c -> defBuilder.addColumn(c.getColumnDefinition()));
@@ -36,5 +51,25 @@ public void populateRow(ConfigurableTablePrinter<C>.TableRow row, C context) {
         columns.forEach(c -> row.add(c.getData(context)));
     }
 
+    public List<AbstractPrinterColumn<C, ?,?>> getColumns() {
+        return Collections.unmodifiableList(columns);
+    }
+
+    public String getHeading() {
+        return heading;
+    }
+
+    public PrinterColumnList<C> withHeading(String heading) {
+        this.heading = heading;
+        return this;
+    }
+
+    public List<AbstractPrinterColumn<C, ?, ?>> findByClass(Class<? extends AbstractPrinterColumn<C, ?,?>> clazz) {
+        return columns.stream().filter(c -> c.getClass().equals(clazz)).collect(Collectors.toList());
+    }
+
+    public Optional<AbstractPrinterColumn<C, ?, ?>> findByTitle(String title) {
+        return columns.stream().filter(c -> c.getTitle().equals(title)).findAny();
+    }
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java
index f80e13188..9652d2144 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java
@@ -18,8 +18,6 @@
 package com.graphhopper.jsprit.core.reporting;
 
 import java.io.PrintWriter;
-import java.time.LocalDateTime;
-import java.time.temporal.ChronoUnit;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
@@ -37,34 +35,14 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.AbstractActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
+import com.graphhopper.jsprit.core.reporting.ConfigurableTablePrinter.CsvConfig;
 import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.Alignment;
 import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition;
 import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.IntColumnType;
 import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.LongColumnType;
 import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.StringColumnType;
-import com.graphhopper.jsprit.core.reporting.route.ActivityCostPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.route.ActivityDurationPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.route.ActivityLoadChangePrinterColumn;
-import com.graphhopper.jsprit.core.reporting.route.ActivityTypePrinterColumn;
-import com.graphhopper.jsprit.core.reporting.route.ArrivalTimePrinterColumn;
-import com.graphhopper.jsprit.core.reporting.route.EndTimePrinterColumn;
-import com.graphhopper.jsprit.core.reporting.route.HumanReadableTimeFormatter;
-import com.graphhopper.jsprit.core.reporting.route.JobNamePrinterColumn;
-import com.graphhopper.jsprit.core.reporting.route.JobPriorityPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.route.JobTypePrinterColumn;
-import com.graphhopper.jsprit.core.reporting.route.LoacationPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.route.OperationDurationPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.route.RouteCostPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.route.RouteLoadPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.route.RouteNumberPrinterColumn;
+import com.graphhopper.jsprit.core.reporting.VerbosePrintColumnLists.PredefinedList;
 import com.graphhopper.jsprit.core.reporting.route.RoutePrinterContext;
-import com.graphhopper.jsprit.core.reporting.route.SelectedTimeWindowPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.route.StartTimePrinterColumn;
-import com.graphhopper.jsprit.core.reporting.route.TimeWindowsPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.route.TransportCostPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.route.TravelDurationPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.route.VehicleNamePrinterColumn;
-import com.graphhopper.jsprit.core.reporting.route.WaitingDurationPrinterColumn;
 
 
 /**
@@ -123,13 +101,29 @@ public static void print(VehicleRoutingProblem problem, VehicleRoutingProblemSol
         SYSTEM_OUT_AS_PRINT_WRITER.flush();
     }
 
+    public static void print(PrintWriter out, VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution, Print print) {
+        print(out, problem, solution, print, VerbosePrintColumnLists.getNumeric(PredefinedList.DEFAULT));
+    }
+
+    public static void print(VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution,
+                    PrinterColumnList<RoutePrinterContext> verbosePrintColumns) {
+        print(SYSTEM_OUT_AS_PRINT_WRITER, problem, solution, verbosePrintColumns);
+        SYSTEM_OUT_AS_PRINT_WRITER.flush();
+    }
+
+    public static void print(PrintWriter out, VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution,
+                    PrinterColumnList<RoutePrinterContext> verbosePrintColumns) {
+        print(out, problem, solution, Print.VERBOSE, verbosePrintColumns);
+    }
+
     /**
      * Prints costs and #vehicles to the given writer
      *
      * @param out      the destination writer
      * @param solution the solution to be printed
      */
-    public static void print(PrintWriter out, VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution, Print print) {
+    public static void print(PrintWriter out, VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution, Print print,
+                    PrinterColumnList<RoutePrinterContext> verbosePrintColumns) {
 
         DynamicTableDefinition problemTableDef = new DynamicTableDefinition.Builder()
                         .withHeading("Problem")
@@ -166,7 +160,7 @@ public static void print(PrintWriter out, VehicleRoutingProblem problem, Vehicle
 
         if (print.equals(Print.VERBOSE)) {
             printVerbose(out, problem, solution);
-            printVerbose2(out, problem, solution);
+            printVerbose2(out, problem, solution, verbosePrintColumns);
         }
     }
 
@@ -283,43 +277,74 @@ private static void printVerbose(PrintWriter out, VehicleRoutingProblem problem,
         }
     }
 
-    private static void printVerbose2(PrintWriter out, VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution) {
-
-        PrinterColumnList<RoutePrinterContext> columns = new PrinterColumnList<>("Detailed route");
-        HumanReadableTimeFormatter dateFormatter = new HumanReadableTimeFormatter(LocalDateTime.now(), ChronoUnit.SECONDS);
-        columns
-        .addColumn(new RouteNumberPrinterColumn())
-        .addColumn(new VehicleNamePrinterColumn())
-        .addColumn(new ActivityTypePrinterColumn())
-        .addColumn(new JobNamePrinterColumn(b -> b.withMinWidth(10)))
-        .addColumn(new JobTypePrinterColumn())
-        .addColumn(new JobPriorityPrinterColumn())
-        .addColumn(new ActivityLoadChangePrinterColumn())
-        .addColumn(new RouteLoadPrinterColumn())
-        .addColumn(new LoacationPrinterColumn())
-        .addColumn(new OperationDurationPrinterColumn())
-        .addColumn(new OperationDurationPrinterColumn().asHumanReadable())
-        .addColumn(new TravelDurationPrinterColumn())
-        .addColumn(new TravelDurationPrinterColumn().asHumanReadable())
-        .addColumn(new ActivityDurationPrinterColumn())
-        .addColumn(new ActivityDurationPrinterColumn().asHumanReadable())
-        .addColumn(new WaitingDurationPrinterColumn())
-        .addColumn(new WaitingDurationPrinterColumn().asHumanReadable())
-        .addColumn(new ArrivalTimePrinterColumn())
-        .addColumn(new ArrivalTimePrinterColumn().asHumanReadable().withFormatter(dateFormatter))
-        .addColumn(new StartTimePrinterColumn())
-        .addColumn(new StartTimePrinterColumn().asHumanReadable().withFormatter(dateFormatter))
-        .addColumn(new EndTimePrinterColumn())
-        .addColumn(new EndTimePrinterColumn().asHumanReadable().withFormatter(dateFormatter))
-        .addColumn(new TransportCostPrinterColumn())
-        .addColumn(new ActivityCostPrinterColumn())
-        .addColumn(new RouteCostPrinterColumn())
-        .addColumn(new SelectedTimeWindowPrinterColumn())
-        .addColumn(new SelectedTimeWindowPrinterColumn().asHumanReadable().withFormatter(dateFormatter))
-        .addColumn(new TimeWindowsPrinterColumn())
-        .addColumn(new TimeWindowsPrinterColumn().asHumanReadable().withFormatter(dateFormatter))
-        ;
+    private static void printVerbose2(PrintWriter out, VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution,
+                    PrinterColumnList<RoutePrinterContext> columns) {
+
+        // PrinterColumnList<RoutePrinterContext> columns = new
+        // PrinterColumnList<>("Detailed route");
+        // HumanReadableTimeFormatter dateFormatter = new
+        // HumanReadableTimeFormatter(LocalDateTime.now(), ChronoUnit.SECONDS);
+        // columns
+        // .addColumn(new RouteNumberPrinterColumn())
+        // .addColumn(new VehicleNamePrinterColumn())
+        // .addColumn(new ActivityTypePrinterColumn())
+        // .addColumn(new JobNamePrinterColumn(b -> b.withMinWidth(10)))
+        // .addColumn(new JobTypePrinterColumn())
+        // .addColumn(new JobPriorityPrinterColumn())
+        // .addColumn(new ActivityLoadChangePrinterColumn())
+        // .addColumn(new RouteLoadPrinterColumn())
+        // .addColumn(new LoacationPrinterColumn())
+        // .addColumn(new OperationDurationPrinterColumn())
+        // .addColumn(new OperationDurationPrinterColumn().asHumanReadable())
+        // .addColumn(new TravelDurationPrinterColumn())
+        // .addColumn(new TravelDurationPrinterColumn().asHumanReadable())
+        // .addColumn(new ActivityDurationPrinterColumn())
+        // .addColumn(new ActivityDurationPrinterColumn().asHumanReadable())
+        // .addColumn(new WaitingDurationPrinterColumn())
+        // .addColumn(new WaitingDurationPrinterColumn().asHumanReadable())
+        // .addColumn(new ArrivalTimePrinterColumn())
+        // .addColumn(new
+        // ArrivalTimePrinterColumn().asHumanReadable().withFormatter(dateFormatter))
+        // .addColumn(new StartTimePrinterColumn())
+        // .addColumn(new
+        // StartTimePrinterColumn().asHumanReadable().withFormatter(dateFormatter))
+        // .addColumn(new EndTimePrinterColumn())
+        // .addColumn(new
+        // EndTimePrinterColumn().asHumanReadable().withFormatter(dateFormatter))
+        // .addColumn(new TransportCostPrinterColumn())
+        // .addColumn(new ActivityCostPrinterColumn())
+        // .addColumn(new RouteCostPrinterColumn())
+        // .addColumn(new SelectedTimeWindowPrinterColumn())
+        // .addColumn(new
+        // SelectedTimeWindowPrinterColumn().asHumanReadable().withFormatter(dateFormatter))
+        // .addColumn(new TimeWindowsPrinterColumn())
+        // .addColumn(new
+        // TimeWindowsPrinterColumn().asHumanReadable().withFormatter(dateFormatter))
+        // ;
+        // columns = VerbosePrintColumnLists.getNumeric(PredefinedList.MINIMAL);
+
+        ConfigurableTablePrinter<RoutePrinterContext> tablePrinter = buildTablePrinter(problem, solution, columns);
+        out.println(tablePrinter.print());
+
+        // out.println(tablePrinter.exportToCsv(new CsvConfig()));
 
+        if (!solution.getUnassignedJobs().isEmpty()) {
+
+            DynamicTableDefinition unassignedTableDef = new DynamicTableDefinition.Builder().withHeading("Unassigned jobs")
+                            .addColumn(new ColumnDefinition.Builder(new StringColumnType(), "id").withMinWidth(10).build())
+                            .addColumn(new ColumnDefinition.Builder(new StringColumnType(), "type").build()).build();
+
+            DynamicTablePrinter unassignedTablePrinter = new DynamicTablePrinter(unassignedTableDef);
+
+            for (Job j : solution.getUnassignedJobs()) {
+                unassignedTablePrinter.addRow().add(j.getId()).add(j.getClass().getSimpleName());
+            }
+            out.println(unassignedTablePrinter.print());
+        }
+    }
+
+    protected static ConfigurableTablePrinter<RoutePrinterContext> buildTablePrinter(VehicleRoutingProblem problem,
+                    VehicleRoutingProblemSolution solution, PrinterColumnList<RoutePrinterContext> columns) {
         ConfigurableTablePrinter<RoutePrinterContext> tablePrinter = new ConfigurableTablePrinter<>(columns);
         int routeNu = 1;
 
@@ -343,21 +368,7 @@ private static void printVerbose2(PrintWriter out, VehicleRoutingProblem problem
 
             routeNu++;
         }
-        out.println(tablePrinter.print());
-
-        if (!solution.getUnassignedJobs().isEmpty()) {
-
-            DynamicTableDefinition unassignedTableDef = new DynamicTableDefinition.Builder().withHeading("Unassigned jobs")
-                            .addColumn(new ColumnDefinition.Builder(new StringColumnType(), "id").withMinWidth(10).build())
-                            .addColumn(new ColumnDefinition.Builder(new StringColumnType(), "type").build()).build();
-
-            DynamicTablePrinter unassignedTablePrinter = new DynamicTablePrinter(unassignedTableDef);
-
-            for (Job j : solution.getUnassignedJobs()) {
-                unassignedTablePrinter.addRow().add(j.getId()).add(j.getClass().getSimpleName());
-            }
-            out.println(unassignedTablePrinter.print());
-        }
+        return tablePrinter;
     }
 
     private static String getLocationString(Location l) {
@@ -400,4 +411,10 @@ private static String getVehicleString(VehicleRoute route) {
                         .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));
     }
 
+    public static String export(VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution,
+                    PrinterColumnList<RoutePrinterContext> columns, CsvConfig csvConfig) {
+        ConfigurableTablePrinter<RoutePrinterContext> table = buildTablePrinter(problem, solution, columns);
+        return table.exportToCsv(csvConfig);
+    }
+
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/VerbosePrintColumnLists.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/VerbosePrintColumnLists.java
new file mode 100644
index 000000000..efc4d58fe
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/VerbosePrintColumnLists.java
@@ -0,0 +1,115 @@
+package com.graphhopper.jsprit.core.reporting;
+
+import java.util.ArrayList;
+import java.util.EnumMap;
+import java.util.List;
+
+import com.graphhopper.jsprit.core.reporting.route.ActivityTypePrinterColumn;
+import com.graphhopper.jsprit.core.reporting.route.ArrivalTimePrinterColumn;
+import com.graphhopper.jsprit.core.reporting.route.EndTimePrinterColumn;
+import com.graphhopper.jsprit.core.reporting.route.HumanReadableEnabled;
+import com.graphhopper.jsprit.core.reporting.route.HumanReadableTimeFormatter;
+import com.graphhopper.jsprit.core.reporting.route.JobNamePrinterColumn;
+import com.graphhopper.jsprit.core.reporting.route.RouteCostPrinterColumn;
+import com.graphhopper.jsprit.core.reporting.route.RouteNumberPrinterColumn;
+import com.graphhopper.jsprit.core.reporting.route.RoutePrinterContext;
+import com.graphhopper.jsprit.core.reporting.route.VehicleNamePrinterColumn;
+
+public class VerbosePrintColumnLists {
+
+
+    public enum PredefinedList {
+        MINIMAL, DEFAULT, VERBOSE
+    }
+
+    // .addColumn(new RouteNumberPrinterColumn())
+    // .addColumn(new VehicleNamePrinterColumn())
+    // .addColumn(new ActivityTypePrinterColumn())
+    // .addColumn(new JobNamePrinterColumn(b -> b.withMinWidth(10)))
+    // .addColumn(new JobTypePrinterColumn())
+    // .addColumn(new JobPriorityPrinterColumn())
+    // .addColumn(new ActivityLoadChangePrinterColumn())
+    // .addColumn(new RouteLoadPrinterColumn())
+    // .addColumn(new LoacationPrinterColumn())
+    // .addColumn(new OperationDurationPrinterColumn())
+    // .addColumn(new OperationDurationPrinterColumn().asHumanReadable())
+    // .addColumn(new TravelDurationPrinterColumn())
+    // .addColumn(new TravelDurationPrinterColumn().asHumanReadable())
+    // .addColumn(new ActivityDurationPrinterColumn())
+    // .addColumn(new ActivityDurationPrinterColumn().asHumanReadable())
+    // .addColumn(new WaitingDurationPrinterColumn())
+    // .addColumn(new WaitingDurationPrinterColumn().asHumanReadable())
+    // .addColumn(new ArrivalTimePrinterColumn())
+    // .addColumn(new
+    // ArrivalTimePrinterColumn().asHumanReadable().withFormatter(dateFormatter))
+    // .addColumn(new StartTimePrinterColumn())
+    // .addColumn(new
+    // StartTimePrinterColumn().asHumanReadable().withFormatter(dateFormatter))
+    // .addColumn(new EndTimePrinterColumn())
+    // .addColumn(new
+    // EndTimePrinterColumn().asHumanReadable().withFormatter(dateFormatter))
+    // .addColumn(new TransportCostPrinterColumn())
+    // .addColumn(new ActivityCostPrinterColumn())
+    // .addColumn(new RouteCostPrinterColumn())
+    // .addColumn(new SelectedTimeWindowPrinterColumn())
+    // .addColumn(new
+    // SelectedTimeWindowPrinterColumn().asHumanReadable().withFormatter(dateFormatter))
+    // .addColumn(new TimeWindowsPrinterColumn())
+    // .addColumn(new
+    // TimeWindowsPrinterColumn().asHumanReadable().withFormatter(dateFormatter))
+
+    private static final EnumMap<PredefinedList, List<Class<? extends AbstractPrinterColumn<RoutePrinterContext, ?, ?>>>> COLUMNS;
+
+    static {
+        COLUMNS = new EnumMap<>(PredefinedList.class);
+        List<Class<? extends AbstractPrinterColumn<RoutePrinterContext, ?, ?>>> minimalSet = new ArrayList<>();
+        minimalSet.add(RouteNumberPrinterColumn.class);
+        minimalSet.add(VehicleNamePrinterColumn.class);
+        minimalSet.add(ActivityTypePrinterColumn.class);
+        minimalSet.add(JobNamePrinterColumn.class);
+        minimalSet.add(ArrivalTimePrinterColumn.class);
+        minimalSet.add(EndTimePrinterColumn.class);
+        minimalSet.add(RouteCostPrinterColumn.class);
+        COLUMNS.put(PredefinedList.MINIMAL, minimalSet);
+
+        COLUMNS.put(PredefinedList.DEFAULT, minimalSet);
+        COLUMNS.put(PredefinedList.VERBOSE, minimalSet);
+    }
+
+    public static PrinterColumnList<RoutePrinterContext> getNumeric(PredefinedList listType) {
+        return getList(listType, false, null);
+    }
+
+    public static PrinterColumnList<RoutePrinterContext> getHumanReadable(PredefinedList listType) {
+        return getList(listType, true, null);
+    }
+
+    public static PrinterColumnList<RoutePrinterContext> getHumanReadable(PredefinedList listType,
+                    HumanReadableTimeFormatter timeFormatter) {
+        return getList(listType, true, timeFormatter);
+    }
+
+    private static PrinterColumnList<RoutePrinterContext> getList(PredefinedList listType, boolean humanReadable,
+                    HumanReadableTimeFormatter timeFormatter) {
+        PrinterColumnList<RoutePrinterContext> res = new PrinterColumnList<>();
+
+        for (Class<? extends AbstractPrinterColumn<RoutePrinterContext, ?, ?>> c : COLUMNS.get(listType)) {
+            try {
+                AbstractPrinterColumn<RoutePrinterContext, ?, ?> col = c.newInstance();
+                if (humanReadable && col instanceof HumanReadableEnabled) {
+                    HumanReadableEnabled<?> hrCol = (HumanReadableEnabled<?>) col;
+                    hrCol.asHumanReadable();
+                    if (timeFormatter != null) {
+                        hrCol.withFormatter(timeFormatter);
+                    }
+                }
+                res.addColumn(col);
+            } catch (InstantiationException | IllegalAccessException e) {
+                throw new IllegalStateException(e);
+            }
+        }
+
+        return res;
+    }
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractCostPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractCostPrinterColumn.java
index 9a6e8c246..7b5dc1350 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractCostPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractCostPrinterColumn.java
@@ -8,8 +8,9 @@
 import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
 import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.IntColumnType;
 
-public abstract class AbstractCostPrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, Integer>
-                implements CostAndTimeExtractor {
+public abstract class AbstractCostPrinterColumn
+extends AbstractPrinterColumn<RoutePrinterContext, Integer, AbstractCostPrinterColumn>
+implements CostAndTimeExtractor {
 
     public AbstractCostPrinterColumn() {
         super();
@@ -21,9 +22,7 @@ public AbstractCostPrinterColumn(Consumer<Builder> decorator) {
 
     @Override
     public ColumnDefinition.Builder getColumnBuilder() {
-        return new ColumnDefinition.Builder(new IntColumnType(), getTitle()).withAlignment(Alignment.RIGHT);
+        return new ColumnDefinition.Builder(new IntColumnType()).withAlignment(Alignment.RIGHT);
     }
 
-    protected abstract String getTitle();
-
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractSizeDimensionPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractSizeDimensionPrinterColumn.java
index 525081a29..e75b13bac 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractSizeDimensionPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractSizeDimensionPrinterColumn.java
@@ -11,7 +11,8 @@
 import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
 import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.StringColumnType;
 
-public abstract class AbstractSizeDimensionPrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, String> {
+public abstract class AbstractSizeDimensionPrinterColumn
+extends AbstractPrinterColumn<RoutePrinterContext, String, AbstractSizeDimensionPrinterColumn> {
 
     public AbstractSizeDimensionPrinterColumn() {
         super();
@@ -23,7 +24,7 @@ public AbstractSizeDimensionPrinterColumn(Consumer<Builder> decorator) {
 
     @Override
     public ColumnDefinition.Builder getColumnBuilder() {
-        return new ColumnDefinition.Builder(new StringColumnType(), getTitle());
+        return new ColumnDefinition.Builder(new StringColumnType());
     }
 
     @Override
@@ -37,8 +38,6 @@ public String getData(RoutePrinterContext context) {
         }
     }
 
-    protected abstract String getTitle();
-
     protected abstract SizeDimension getSizeDimension(RoutePrinterContext context);
 
     protected SizeDimension calculateInitialLoad(RoutePrinterContext context) {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractTimePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractTimePrinterColumn.java
index 4ef62e0f0..4bb386a02 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractTimePrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractTimePrinterColumn.java
@@ -8,7 +8,8 @@
 import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.StringColumnType;
 
 public abstract class AbstractTimePrinterColumn<T extends AbstractTimePrinterColumn<T>>
-extends AbstractPrinterColumn<RoutePrinterContext, String> {
+extends AbstractPrinterColumn<RoutePrinterContext, String, AbstractTimePrinterColumn<T>>
+implements HumanReadableEnabled<T> {
 
     private HumanReadableTimeFormatter formatter;
     private boolean humanReadable = false;
@@ -22,12 +23,14 @@ public AbstractTimePrinterColumn(Consumer<Builder> decorator) {
         formatter = new HumanReadableTimeFormatter();
     }
 
+    @Override
     @SuppressWarnings("unchecked")
     public T withFormatter(HumanReadableTimeFormatter formatter) {
         this.formatter = formatter;
         return (T) this;
     }
 
+    @Override
     @SuppressWarnings("unchecked")
     public T asHumanReadable() {
         this.humanReadable = true;
@@ -37,7 +40,7 @@ public T asHumanReadable() {
 
     @Override
     public ColumnDefinition.Builder getColumnBuilder() {
-        return new ColumnDefinition.Builder(new StringColumnType("-"), getTitle() + (humanReadable ? " (H)" : ""));
+        return new ColumnDefinition.Builder(new StringColumnType("-"));
     }
 
     @Override
@@ -55,6 +58,4 @@ public String getData(RoutePrinterContext context) {
 
     protected abstract Long getValue(RoutePrinterContext context);
 
-    protected abstract String getTitle();
-
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractTimeWindowPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractTimeWindowPrinterColumn.java
index bf8b54f48..57eb1ae08 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractTimeWindowPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractTimeWindowPrinterColumn.java
@@ -11,7 +11,8 @@
 import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.StringColumnType;
 
 public abstract class AbstractTimeWindowPrinterColumn<T extends AbstractTimeWindowPrinterColumn<T>>
-extends AbstractPrinterColumn<RoutePrinterContext, String> {
+extends AbstractPrinterColumn<RoutePrinterContext, String, AbstractTimeWindowPrinterColumn<T>>
+implements HumanReadableEnabled<T> {
 
     private HumanReadableTimeFormatter formatter;
     private boolean humanReadable = false;
@@ -25,12 +26,14 @@ public AbstractTimeWindowPrinterColumn(Consumer<Builder> decorator) {
         formatter = new HumanReadableTimeFormatter();
     }
 
+    @Override
     @SuppressWarnings("unchecked")
     public T withFormatter(HumanReadableTimeFormatter formatter) {
         this.formatter = formatter;
         return (T) this;
     }
 
+    @Override
     @SuppressWarnings("unchecked")
     public T asHumanReadable() {
         this.humanReadable = true;
@@ -40,7 +43,7 @@ public T asHumanReadable() {
 
     @Override
     public ColumnDefinition.Builder getColumnBuilder() {
-        return new ColumnDefinition.Builder(new StringColumnType("-"), getTitle() + (humanReadable ? " (H)" : ""));
+        return new ColumnDefinition.Builder(new StringColumnType("-"));
     }
 
     @Override
@@ -77,6 +80,4 @@ protected String formatTimeWindow(TimeWindow tw) {
 
     protected abstract Collection<TimeWindow> getValue(RoutePrinterContext context);
 
-    protected abstract String getTitle();
-
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityCostPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityCostPrinterColumn.java
index 6e0d53ae3..eb5f33277 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityCostPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityCostPrinterColumn.java
@@ -16,7 +16,7 @@ public ActivityCostPrinterColumn(Consumer<Builder> decorator) {
 
 
     @Override
-    protected String getTitle() {
+    protected String getDefaultTitle() {
         return "actCost";
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityDurationPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityDurationPrinterColumn.java
index a9ba08517..7dfcf7c43 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityDurationPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityDurationPrinterColumn.java
@@ -21,7 +21,7 @@ public ActivityDurationPrinterColumn(Consumer<Builder> decorator) {
 
 
     @Override
-    protected String getTitle() {
+    protected String getDefaultTitle() {
         return "duration";
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityLoadChangePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityLoadChangePrinterColumn.java
index fa20d4ea5..333655320 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityLoadChangePrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityLoadChangePrinterColumn.java
@@ -23,7 +23,7 @@ public Builder getColumnBuilder() {
     }
 
     @Override
-    protected String getTitle() {
+    protected String getDefaultTitle() {
         return "load change";
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityTypePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityTypePrinterColumn.java
index 7a8ee816d..3bd09a816 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityTypePrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityTypePrinterColumn.java
@@ -8,7 +8,7 @@
 import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
 import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.StringColumnType;
 
-public class ActivityTypePrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, String> {
+public class ActivityTypePrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, String, ActivityTypePrinterColumn> {
 
     public ActivityTypePrinterColumn() {
         super();
@@ -20,7 +20,7 @@ public ActivityTypePrinterColumn(Consumer<Builder> decorator) {
 
     @Override
     public ColumnDefinition.Builder getColumnBuilder() {
-        return new ColumnDefinition.Builder(new StringColumnType(), "activity");
+        return new ColumnDefinition.Builder(new StringColumnType());
     }
 
     @Override
@@ -28,4 +28,9 @@ public String getData(RoutePrinterContext context) {
         return ((AbstractActivity) context.getActivity()).getType();
     }
 
+    @Override
+    protected String getDefaultTitle() {
+        return "activity";
+    }
+
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ArrivalTimePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ArrivalTimePrinterColumn.java
index 64a62ae15..e99483e90 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ArrivalTimePrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ArrivalTimePrinterColumn.java
@@ -18,7 +18,7 @@ public ArrivalTimePrinterColumn(Consumer<Builder> decorator) {
 
 
     @Override
-    protected String getTitle() {
+    protected String getDefaultTitle() {
         return "arrTime";
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/EndTimePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/EndTimePrinterColumn.java
index 3e3346cdf..2a4b4a275 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/EndTimePrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/EndTimePrinterColumn.java
@@ -17,7 +17,7 @@ public EndTimePrinterColumn(Consumer<Builder> decorator) {
     }
 
     @Override
-    protected String getTitle() {
+    protected String getDefaultTitle() {
         return "endTime";
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/HumanReadableEnabled.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/HumanReadableEnabled.java
new file mode 100644
index 000000000..463f6f851
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/HumanReadableEnabled.java
@@ -0,0 +1,7 @@
+package com.graphhopper.jsprit.core.reporting.route;
+
+public interface HumanReadableEnabled<T extends HumanReadableEnabled<T>> {
+    public T withFormatter(HumanReadableTimeFormatter formatter);
+
+    public T asHumanReadable();
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/JobNamePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/JobNamePrinterColumn.java
index d53d31d21..95842d45c 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/JobNamePrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/JobNamePrinterColumn.java
@@ -10,7 +10,7 @@
 import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
 import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.StringColumnType;
 
-public class JobNamePrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, String> {
+public class JobNamePrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, String, JobNamePrinterColumn> {
 
     public JobNamePrinterColumn() {
         super();
@@ -22,7 +22,12 @@ public JobNamePrinterColumn(Consumer<Builder> decorator) {
 
     @Override
     public ColumnDefinition.Builder getColumnBuilder() {
-        return new ColumnDefinition.Builder(new StringColumnType("-"), "job name");
+        return new ColumnDefinition.Builder(new StringColumnType("-"));
+    }
+
+    @Override
+    protected String getDefaultTitle() {
+        return "job name";
     }
 
     @Override
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/JobPriorityPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/JobPriorityPrinterColumn.java
index dc72f454d..d828e0a3a 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/JobPriorityPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/JobPriorityPrinterColumn.java
@@ -11,7 +11,7 @@
 import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
 import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.StringColumnType;
 
-public class JobPriorityPrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, String> {
+public class JobPriorityPrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, String, JobPriorityPrinterColumn> {
 
     private static final String[] PRIORITY_NAMES = new String[] { "", "HIGH", "MEDIUM", "LOW" };
 
@@ -25,7 +25,12 @@ public JobPriorityPrinterColumn(Consumer<Builder> decorator) {
 
     @Override
     public ColumnDefinition.Builder getColumnBuilder() {
-        return new ColumnDefinition.Builder(new StringColumnType("-"), "priority").withAlignment(Alignment.CENTER);
+        return new ColumnDefinition.Builder(new StringColumnType("-")).withAlignment(Alignment.CENTER);
+    }
+
+    @Override
+    protected String getDefaultTitle() {
+        return "priority";
     }
 
     @Override
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/JobTypePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/JobTypePrinterColumn.java
index 65ddb4bec..5048a6a35 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/JobTypePrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/JobTypePrinterColumn.java
@@ -10,7 +10,7 @@
 import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
 import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.StringColumnType;
 
-public class JobTypePrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, String> {
+public class JobTypePrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, String, JobTypePrinterColumn> {
 
     public JobTypePrinterColumn() {
         super();
@@ -22,7 +22,12 @@ public JobTypePrinterColumn(Consumer<Builder> decorator) {
 
     @Override
     public ColumnDefinition.Builder getColumnBuilder() {
-        return new ColumnDefinition.Builder(new StringColumnType("-"), "job type");
+        return new ColumnDefinition.Builder(new StringColumnType("-"));
+    }
+
+    @Override
+    protected String getDefaultTitle() {
+        return "job type";
     }
 
     @Override
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/LoacationPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/LoacationPrinterColumn.java
index 8d7ceac77..8cba55e44 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/LoacationPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/LoacationPrinterColumn.java
@@ -9,7 +9,7 @@
 import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
 import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.StringColumnType;
 
-public class LoacationPrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, String> {
+public class LoacationPrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, String, LoacationPrinterColumn> {
 
     public LoacationPrinterColumn() {
         super();
@@ -21,7 +21,12 @@ public LoacationPrinterColumn(Consumer<Builder> decorator) {
 
     @Override
     public ColumnDefinition.Builder getColumnBuilder() {
-        return new ColumnDefinition.Builder(new StringColumnType("-"), "location");
+        return new ColumnDefinition.Builder(new StringColumnType("-"));
+    }
+
+    @Override
+    protected String getDefaultTitle() {
+        return "location";
     }
 
     @Override
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/OperationDurationPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/OperationDurationPrinterColumn.java
index a17df4323..90e197b46 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/OperationDurationPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/OperationDurationPrinterColumn.java
@@ -17,7 +17,7 @@ public OperationDurationPrinterColumn(Consumer<Builder> decorator) {
 
 
     @Override
-    protected String getTitle() {
+    protected String getDefaultTitle() {
         return "opTime";
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RouteCostPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RouteCostPrinterColumn.java
index 5d60e89ec..41be6697d 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RouteCostPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RouteCostPrinterColumn.java
@@ -19,7 +19,7 @@ public RouteCostPrinterColumn(Consumer<Builder> decorator) {
 
 
     @Override
-    protected String getTitle() {
+    protected String getDefaultTitle() {
         return "routeCost";
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RouteLoadPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RouteLoadPrinterColumn.java
index 36bb03535..846c9ed18 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RouteLoadPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RouteLoadPrinterColumn.java
@@ -20,7 +20,7 @@ public RouteLoadPrinterColumn(Consumer<Builder> decorator) {
     }
 
     @Override
-    protected String getTitle() {
+    protected String getDefaultTitle() {
         return "load";
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RouteNumberPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RouteNumberPrinterColumn.java
index 7555914a4..8089bda74 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RouteNumberPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RouteNumberPrinterColumn.java
@@ -7,7 +7,7 @@
 import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
 import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.IntColumnType;
 
-public class RouteNumberPrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, Integer> {
+public class RouteNumberPrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, Integer, RouteNumberPrinterColumn> {
 
     public RouteNumberPrinterColumn() {
         super();
@@ -19,7 +19,12 @@ public RouteNumberPrinterColumn(Consumer<Builder> decorator) {
 
     @Override
     public ColumnDefinition.Builder getColumnBuilder() {
-        return new ColumnDefinition.Builder(new IntColumnType(), "route");
+        return new ColumnDefinition.Builder(new IntColumnType());
+    }
+
+    @Override
+    protected String getDefaultTitle() {
+        return "route";
     }
 
     @Override
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/SelectedTimeWindowPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/SelectedTimeWindowPrinterColumn.java
index c81c1d71b..aa4d60924 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/SelectedTimeWindowPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/SelectedTimeWindowPrinterColumn.java
@@ -21,7 +21,7 @@ public SelectedTimeWindowPrinterColumn(Consumer<Builder> decorator) {
     }
 
     @Override
-    protected String getTitle() {
+    protected String getDefaultTitle() {
         return "selTimeWindow";
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/StartTimePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/StartTimePrinterColumn.java
index eaa897388..44019c048 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/StartTimePrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/StartTimePrinterColumn.java
@@ -17,7 +17,7 @@ public StartTimePrinterColumn(Consumer<Builder> decorator) {
     }
 
     @Override
-    protected String getTitle() {
+    protected String getDefaultTitle() {
         return "startTime";
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/TimeWindowsPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/TimeWindowsPrinterColumn.java
index d6ab143f2..957ed17c7 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/TimeWindowsPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/TimeWindowsPrinterColumn.java
@@ -19,7 +19,7 @@ public TimeWindowsPrinterColumn(Consumer<Builder> decorator) {
     }
 
     @Override
-    protected String getTitle() {
+    protected String getDefaultTitle() {
         return "timeWindows";
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/TransportCostPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/TransportCostPrinterColumn.java
index 7e3f73014..783e82f27 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/TransportCostPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/TransportCostPrinterColumn.java
@@ -19,7 +19,7 @@ public TransportCostPrinterColumn(Consumer<Builder> decorator) {
     }
 
     @Override
-    protected String getTitle() {
+    protected String getDefaultTitle() {
         return "transCost";
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/TravelDurationPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/TravelDurationPrinterColumn.java
index 7285e4cf5..7f25d4eb7 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/TravelDurationPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/TravelDurationPrinterColumn.java
@@ -21,7 +21,7 @@ public TravelDurationPrinterColumn(Consumer<Builder> decorator) {
 
 
     @Override
-    protected String getTitle() {
+    protected String getDefaultTitle() {
         return "travel";
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/VehicleNamePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/VehicleNamePrinterColumn.java
index 518c0c632..ec390fbb5 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/VehicleNamePrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/VehicleNamePrinterColumn.java
@@ -7,7 +7,7 @@
 import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
 import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.StringColumnType;
 
-public class VehicleNamePrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, String> {
+public class VehicleNamePrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, String, VehicleNamePrinterColumn> {
 
     public VehicleNamePrinterColumn() {
         super();
@@ -19,7 +19,12 @@ public VehicleNamePrinterColumn(Consumer<Builder> decorator) {
 
     @Override
     public ColumnDefinition.Builder getColumnBuilder() {
-        return new ColumnDefinition.Builder(new StringColumnType(), "vehicle");
+        return new ColumnDefinition.Builder(new StringColumnType());
+    }
+
+    @Override
+    protected String getDefaultTitle() {
+        return "vehicle";
     }
 
     @Override
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/WaitingDurationPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/WaitingDurationPrinterColumn.java
index c7bc670ae..ae2e9164a 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/WaitingDurationPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/WaitingDurationPrinterColumn.java
@@ -19,7 +19,7 @@ public WaitingDurationPrinterColumn(Consumer<Builder> decorator) {
 
 
     @Override
-    protected String getTitle() {
+    protected String getDefaultTitle() {
         return "waiting";
     }
 
