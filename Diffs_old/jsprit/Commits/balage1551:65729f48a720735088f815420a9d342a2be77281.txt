diff --git a/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/Plotter.java b/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/Plotter.java
index 466dc1575..9b83d3dcd 100644
--- a/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/Plotter.java
+++ b/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/Plotter.java
@@ -63,6 +63,8 @@
     private final static Color PICKUP_COLOR = Color.GREEN;
     private final static Color DELIVERY_COLOR = Color.BLUE;
     private final static Color SERVICE_COLOR = Color.BLUE;
+    private final static Color EXCHANGE_COLOR = Color.ORANGE;
+
 
     private final static Shape ELLIPSE = new Ellipse2D.Double(-3, -3, 6, 6);
 
@@ -116,6 +118,7 @@ public Paint getItemPaint(int seriesIndex, int itemIndex) {
             if (activity.equals(Activity.SERVICE)) return SERVICE_COLOR;
             if (activity.equals(Activity.START)) return START_COLOR;
             if (activity.equals(Activity.END)) return END_COLOR;
+            if (activity.equals(Activity.EXCHANGE)) return EXCHANGE_COLOR;
             throw new IllegalStateException("activity at " + dataItem.toString() + " cannot be assigned to a color");
         }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/JobInsertionCostsCalculatorBuilder.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/JobInsertionCostsCalculatorBuilder.java
index e310a39a2..56fb99b42 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/JobInsertionCostsCalculatorBuilder.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/JobInsertionCostsCalculatorBuilder.java
@@ -24,7 +24,6 @@
 import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
 import com.graphhopper.jsprit.core.problem.job.Break;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.solution.route.state.RouteAndActivityStateGetter;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleFleetManager;
 
@@ -216,8 +215,7 @@ public JobInsertionCostsCalculator build() {
         if (local) {
             standardLocal = createStandardLocal(vrp, states);
         } else {
-            checkServicesOnly();
-            standardLocal = createStandardRoute(vrp, states, forwardLooking, memory);
+            throw new UnsupportedOperationException("route level cal is not supported anymore");
         }
         baseCalculator = standardLocal.getCalculator();
         addAlgorithmListeners(standardLocal.getAlgorithmListener());
@@ -239,17 +237,6 @@ public JobInsertionCostsCalculator build() {
         return createFinalInsertion(fleetManager, baseCalculator, states);
     }
 
-    private void checkServicesOnly() {
-        for (Job j : vrp.getJobs().values()) {
-            if (j instanceof Shipment) {
-                throw new UnsupportedOperationException("currently the 'insert-on-route-level' option is only available for services (i.e. service, pickup, delivery), \n" +
-                    "if you want to deal with shipments switch to option 'local-level' by either setting bestInsertionBuilder.setLocalLevel() or \n"
-                    + "by omitting the xml-tag '<level forwardLooking=2 memory=1>route</level>' when defining your insertionStrategy in algo-config.xml file");
-            }
-        }
-
-    }
-
     private void addInsertionListeners(List<InsertionListener> list) {
         for (InsertionListener iL : list) {
             insertionListeners.add(iL);
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java
index 8d8b76b76..7a1b2f387 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java
@@ -17,6 +17,7 @@
  */
 package com.graphhopper.jsprit.core.reporting;
 
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
@@ -156,20 +157,20 @@ private static void printVerbose(VehicleRoutingProblem problem, VehicleRoutingPr
     }
 
     private static void printVerbose(PrintWriter out, VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution) {
-        String leftAlgin = "| %-7s | %-20s | %-21s | %-15s | %-15s | %-15s | %-15s |%n";
-        out.format("+--------------------------------------------------------------------------------------------------------------------------------+%n");
-        out.printf("| detailed solution                                                                                                              |%n");
-        out.format("+---------+----------------------+-----------------------+-----------------+-----------------+-----------------+-----------------+%n");
-        out.printf("| route   | vehicle              | activity              | job             | arrTime         | endTime         | costs           |%n");
+        String leftAlgin = "| %-7s | %-20s | %-21s | %-15s | %-15s | %-15s | %-15s | %-15s |%n";
+        out.format("+--------------------------------------------------------------------------------------------------------------------------------------------------+%n");
+        out.printf("| detailed solution                                                                                                                                |%n");
+        out.format("+---------+----------------------+-----------------------+-----------------+-----------------+-----------------+-----------------+-----------------+%n");
+        out.printf("| route   | vehicle              | activity              | job             | load            | arrTime         | endTime         | costs           |%n");
         int routeNu = 1;
 
         List<VehicleRoute> list = new ArrayList<VehicleRoute>(solution.getRoutes());
         Collections.sort(list, new com.graphhopper.jsprit.core.util.VehicleIndexComparator());
         for (VehicleRoute route : list) {
-            out.format("+---------+----------------------+-----------------------+-----------------+-----------------+-----------------+-----------------+%n");
+            out.format("+---------+----------------------+-----------------------+-----------------+-----------------+-----------------+-----------------+-----------------+%n");
             double costs = 0;
-            out.format(leftAlgin, routeNu, getVehicleString(route), route.getStart().getName(), "-", "undef", Math.round(route.getStart().getEndTime()),
-                Math.round(costs));
+            SizeDimension load = getInitialLoad(route);
+            out.format(leftAlgin, routeNu, getVehicleString(route), route.getStart().getName(), "-", getString(load), "undef", Math.round(route.getStart().getEndTime()), Math.round(costs));
             TourActivity prevAct = route.getStart();
             for (TourActivity act : route.getActivities()) {
                 String jobId;
@@ -184,7 +185,8 @@ private static void printVerbose(PrintWriter out, VehicleRoutingProblem problem,
                     route.getVehicle());
                 c += problem.getActivityCosts().getActivityCost(act, act.getArrTime(), route.getDriver(), route.getVehicle());
                 costs += c;
-                out.format(leftAlgin, routeNu, getVehicleString(route), type, jobId,
+                load = load.add(act.getLoadChange());
+                out.format(leftAlgin, routeNu, getVehicleString(route), type, jobId, getString(load),
                     Math.round(act.getArrTime()),
                     Math.round(act.getEndTime()), Math.round(costs));
                 prevAct = act;
@@ -193,11 +195,11 @@ private static void printVerbose(PrintWriter out, VehicleRoutingProblem problem,
                 route.getDriver(), route.getVehicle());
             c += problem.getActivityCosts().getActivityCost(route.getEnd(), route.getEnd().getArrTime(), route.getDriver(), route.getVehicle());
             costs += c;
-            out.format(leftAlgin, routeNu, getVehicleString(route), route.getEnd().getName(), "-", Math.round(route.getEnd().getArrTime()), "undef",
+            out.format(leftAlgin, routeNu, getVehicleString(route), route.getEnd().getName(), "-", getString(load), Math.round(route.getEnd().getArrTime()), "undef",
                 Math.round(costs));
             routeNu++;
         }
-        out.format("+--------------------------------------------------------------------------------------------------------------------------------+%n");
+        out.format("+--------------------------------------------------------------------------------------------------------------------------------------------------+%n");
         if (!solution.getUnassignedJobs().isEmpty()) {
             out.format("+----------------+%n");
             out.format("| unassignedJobs |%n");
@@ -210,6 +212,27 @@ private static void printVerbose(PrintWriter out, VehicleRoutingProblem problem,
         }
     }
 
+    private static String getString(SizeDimension load) {
+        String l = "[";
+        for (int i = 0; i < load.getNuOfDimensions(); i++) {
+            if (i > 0) l += ", " + load.get(i);
+            else {
+                l += load.get(i);
+            }
+        }
+        l += "]";
+        return l;
+    }
+
+    private static SizeDimension getInitialLoad(VehicleRoute route) {
+        SizeDimension initialLoad = SizeDimension.EMPTY;
+        for (TourActivity act : route.getActivities()) {
+            initialLoad = initialLoad.add(act.getLoadChange());
+        }
+        return initialLoad.getNegativeDimensions().abs();
+    }
+
+
     private static String getVehicleString(VehicleRoute route) {
         return route.getVehicle().getId();
     }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/FirstCustomJobWithMultipleActivitiesExample.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/FirstCustomJobWithMultipleActivitiesExample.java
index 6c0ccb98a..0bafa9664 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/FirstCustomJobWithMultipleActivitiesExample.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/FirstCustomJobWithMultipleActivitiesExample.java
@@ -113,4 +113,22 @@ public void shouldNotIgnoresCapacityWithMixedPicksAndDeliveriesV2() {
         SolutionPrinter.print(vrp, solution, SolutionPrinter.Print.VERBOSE);
         Assert.assertTrue(solution.getUnassignedJobs().isEmpty());
     }
+
+    @Test
+    public void shouldNotIgnoresCapacityWithExchange() {
+        CustomJob cj = CustomJob.Builder.newInstance("job")
+            .addPickup(Location.newInstance(10, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 0).build())
+            .addExchange(Location.newInstance(5, 0), SizeDimension.Builder.newInstance().addDimension(0, -3).addDimension(1, 2).build())
+            .addDelivery(Location.newInstance(20, 0), SizeDimension.Builder.newInstance().addDimension(1, 1).build())
+            .build();
+        VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0, 3).addCapacityDimension(1, 2).build();
+        Vehicle v = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance(0, 0)).build();
+        VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance()
+            .addJob(cj).addVehicle(v).build();
+        VehicleRoutingAlgorithm vra = Jsprit.createAlgorithm(vrp);
+        vra.setMaxIterations(10);
+        VehicleRoutingProblemSolution solution = Solutions.bestOf(vra.searchSolutions());
+        SolutionPrinter.print(vrp, solution, SolutionPrinter.Print.VERBOSE);
+        Assert.assertTrue(solution.getUnassignedJobs().isEmpty());
+    }
 }
