diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyser.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyser.java
index 0d2173412..6015b42d6 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyser.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyser.java
@@ -18,8 +18,20 @@
 
 package com.graphhopper.jsprit.core.analysis;
 
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Set;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import com.graphhopper.jsprit.core.algorithm.VariablePlusFixedSolutionCostCalculatorFactory;
-import com.graphhopper.jsprit.core.algorithm.state.*;
+import com.graphhopper.jsprit.core.algorithm.state.InternalStates;
+import com.graphhopper.jsprit.core.algorithm.state.StateId;
+import com.graphhopper.jsprit.core.algorithm.state.StateManager;
+import com.graphhopper.jsprit.core.algorithm.state.StateUpdater;
+import com.graphhopper.jsprit.core.algorithm.state.UpdateActivityTimes;
+import com.graphhopper.jsprit.core.algorithm.state.UpdateVariableCosts;
 import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.cost.TransportDistance;
@@ -28,14 +40,19 @@
 import com.graphhopper.jsprit.core.problem.solution.SolutionCostCalculator;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.*;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.ActivityVisitor;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverServiceDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverShipmentDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivityNEW;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.End;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivityNEW;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupServiceDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupShipmentDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.ServiceActivityNEW;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.Start;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.util.ActivityTimeTracker;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.util.HashMap;
-import java.util.Map;
-import java.util.Set;
 
 /**
  * Calculates a set of statistics for a solution.
@@ -192,7 +209,8 @@ public void visit(TourActivity activity) {
                 stateManager.putActivityState(activity, backhaul_id, true);
                 backhaulConstraintOnRouteViolated = true;
             } else {
-                if (activity instanceof PickupServiceDEPRECATED || activity instanceof ServiceActivityNEW || activity instanceof PickupShipmentDEPRECATED) {
+                if (activity instanceof PickupActivityNEW
+                                || activity instanceof ServiceActivityNEW) {
                     pickupOccured = true;
                     stateManager.putActivityState(activity, backhaul_id, false);
                 } else {
@@ -440,6 +458,7 @@ public void finish() {
         }
     }
 
+    @SuppressWarnings("unused")
     private static final Logger log = LoggerFactory.getLogger(SolutionAnalyser.class);
 
     private VehicleRoutingProblem vrp;
@@ -775,7 +794,7 @@ public SizeDimension getCapacityViolation(VehicleRoute route) {
         }
         SizeDimension maxLoad = getMaxLoad(route);
         return SizeDimension.max(SizeDimension.Builder.newInstance().build(),
-            maxLoad.subtract(route.getVehicle().getType().getCapacityDimensions()));
+                        maxLoad.subtract(route.getVehicle().getType().getCapacityDimensions()));
     }
 
     /**
@@ -790,7 +809,7 @@ public SizeDimension getCapacityViolationAtBeginning(VehicleRoute route) {
         }
         SizeDimension atBeginning = getLoadAtBeginning(route);
         return SizeDimension.max(SizeDimension.Builder.newInstance().build(),
-            atBeginning.subtract(route.getVehicle().getType().getCapacityDimensions()));
+                        atBeginning.subtract(route.getVehicle().getType().getCapacityDimensions()));
     }
 
     /**
@@ -805,7 +824,7 @@ public SizeDimension getCapacityViolationAtEnd(VehicleRoute route) {
         }
         SizeDimension atEnd = getLoadAtEnd(route);
         return SizeDimension.max(SizeDimension.Builder.newInstance().build(),
-            atEnd.subtract(route.getVehicle().getType().getCapacityDimensions()));
+                        atEnd.subtract(route.getVehicle().getType().getCapacityDimensions()));
     }
 
 
@@ -824,7 +843,7 @@ public SizeDimension getCapacityViolationAfterActivity(TourActivity activity, Ve
         }
         SizeDimension afterAct = getLoadRightAfterActivity(activity, route);
         return SizeDimension.max(SizeDimension.Builder.newInstance().build(),
-            afterAct.subtract(route.getVehicle().getType().getCapacityDimensions()));
+                        afterAct.subtract(route.getVehicle().getType().getCapacityDimensions()));
     }
 
     /**
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/SizeDimension.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/SizeDimension.java
index 0112c1d88..4ad2bceec 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/SizeDimension.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/SizeDimension.java
@@ -357,9 +357,9 @@ public SizeDimensionSign sign() {
                 possibleSigns.remove(SizeDimensionSign.NEGATIVE);
                 possibleSigns.remove(SizeDimensionSign.ZERO);
             }
-        }
-        if (possibleSigns.isEmpty()) {
-            return SizeDimensionSign.MIXED;
+            if (possibleSigns.isEmpty()) {
+                return SizeDimensionSign.MIXED;
+            }
         }
         if (possibleSigns.contains(SizeDimensionSign.ZERO)) {
             return SizeDimensionSign.ZERO;
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ShipmentInsertionCalculatorTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ShipmentInsertionCalculatorTest.java
index c9ce9c49d..c94566608 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ShipmentInsertionCalculatorTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ShipmentInsertionCalculatorTest.java
@@ -17,6 +17,18 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.problem.JobActivityFactory;
 import com.graphhopper.jsprit.core.problem.Location;
@@ -34,24 +46,14 @@
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.*;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.state.RouteAndActivityStateGetter;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.CostFactory;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
 
 
 public class ShipmentInsertionCalculatorTest {
@@ -111,8 +113,8 @@ public void whenCalculatingInsertionCostsOfShipment_itShouldReturnCorrectCostVal
         VehicleRoute route = VehicleRoute.emptyRoute();
         JobActivityFactory activityFactory = mock(JobActivityFactory.class);
         List<JobActivity> activities = new ArrayList<>();
-        activities.add(new PickupShipmentDEPRECATED(shipment));
-        activities.add(new DeliverShipmentDEPRECATED(shipment));
+        activities.add(shipment.getPickupActivity());
+        activities.add(shipment.getDeliveryActivity());
         when(activityFactory.createActivities(shipment)).thenReturn(activities);
         insertionCalculator.setJobActivityFactory(activityFactory);
         InsertionData iData = insertionCalculator.getInsertionData(route, shipment, vehicle, 0.0, null, Double.MAX_VALUE);
@@ -124,14 +126,14 @@ public void whenCalculatingInsertionIntoExistingRoute_itShouldReturnCorrectCosts
         Shipment shipment = Shipment.Builder.newInstance("s").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,10").build()).setDeliveryLocation(Location.newInstance("10,0")).build();
         Shipment shipment2 = Shipment.Builder.newInstance("s2").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("10,10").build()).setDeliveryLocation(Location.newInstance("0,0")).build();
         VehicleRoute route = VehicleRoute.emptyRoute();
-        List<JobActivity> tourActivities = getTourActivities(shipment);
+        List<JobActivity> tourActivities = shipment.getActivityList().getAll();
         route.setVehicleAndDepartureTime(vehicle, 0);
         add(tourActivities, route, 0, 0);
 
         JobActivityFactory activityFactory = mock(JobActivityFactory.class);
         List<JobActivity> activities = new ArrayList<>();
-        activities.add(new PickupShipmentDEPRECATED(shipment2));
-        activities.add(new DeliverShipmentDEPRECATED(shipment2));
+        activities.add(shipment.getPickupActivity());
+        activities.add(shipment.getDeliveryActivity());
         when(activityFactory.createActivities(shipment2)).thenReturn(activities);
         insertionCalculator.setJobActivityFactory(activityFactory);
 
@@ -141,21 +143,13 @@ public void whenCalculatingInsertionIntoExistingRoute_itShouldReturnCorrectCosts
         assertEquals(2, iData.getUnmodifiableEventsByType(InsertActivity.class).get(0).getIndex());
     }
 
-    private List<JobActivity> getTourActivities(Shipment shipment) {
-        List<JobActivity> acts = new ArrayList<>();
-        PickupShipmentDEPRECATED pick = new PickupShipmentDEPRECATED(shipment);
-        DeliverShipmentDEPRECATED del = new DeliverShipmentDEPRECATED(shipment);
-        acts.add(pick);
-        acts.add(del);
-        return acts;
-    }
 
     @Test
     public void whenInsertingShipmentInRouteWithNotEnoughCapacity_itShouldReturnNoInsertion() {
         Shipment shipment = Shipment.Builder.newInstance("s").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,10").build()).setDeliveryLocation(Location.newInstance("10,0")).build();
         Shipment shipment2 = Shipment.Builder.newInstance("s2").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("10,10").build()).setDeliveryLocation(Location.newInstance("0,0")).build();
         VehicleRoute route = VehicleRoute.emptyRoute();
-        List<JobActivity> tourActivities = getTourActivities(shipment);
+        List<JobActivity> tourActivities = shipment.getActivityList().getAll();
         route.setVehicleAndDepartureTime(vehicle, 0);
         add(tourActivities, route, 0, 0);
 
@@ -163,8 +157,8 @@ public void whenInsertingShipmentInRouteWithNotEnoughCapacity_itShouldReturnNoIn
 
         JobActivityFactory activityFactory = mock(JobActivityFactory.class);
         List<JobActivity> activities = new ArrayList<JobActivity>();
-        activities.add(new PickupShipmentDEPRECATED(shipment2));
-        activities.add(new DeliverShipmentDEPRECATED(shipment2));
+        activities.add(shipment2.getPickupActivity());
+        activities.add(shipment2.getDeliveryActivity());
         when(activityFactory.createActivities(shipment2)).thenReturn(activities);
         insertionCalculator.setJobActivityFactory(activityFactory);
 
@@ -181,8 +175,8 @@ public void whenInsertingThirdShipment_itShouldCalcCorrectVal() {
         Shipment shipment3 = Shipment.Builder.newInstance("s3").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,0").build()).setDeliveryLocation(Location.newInstance("9,10")).build();
 
         VehicleRoute route = VehicleRoute.emptyRoute();
-        List<JobActivity> shipmentActivities = getTourActivities(shipment);
-        List<JobActivity> shipment2Activities = getTourActivities(shipment2);
+        List<JobActivity> shipmentActivities = shipment.getActivityList().getAll();
+        List<JobActivity> shipment2Activities = shipment2.getActivityList().getAll();
 
         route.setVehicleAndDepartureTime(vehicle, 0d);
         add(shipmentActivities, route, 0, 0);
@@ -190,8 +184,8 @@ public void whenInsertingThirdShipment_itShouldCalcCorrectVal() {
 
         JobActivityFactory activityFactory = mock(JobActivityFactory.class);
         List<JobActivity> activities = new ArrayList<>();
-        activities.add(new PickupShipmentDEPRECATED(shipment3));
-        activities.add(new DeliverShipmentDEPRECATED(shipment3));
+        activities.add(shipment3.getPickupActivity());
+        activities.add(shipment3.getDeliveryActivity());
         when(activityFactory.createActivities(shipment3)).thenReturn(activities);
         insertionCalculator.setJobActivityFactory(activityFactory);
 
@@ -207,8 +201,8 @@ public void whenInsertingThirdShipment_itShouldCalcCorrectVal2() {
         Shipment shipment = Shipment.Builder.newInstance("s").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,10").build()).setDeliveryLocation(Location.newInstance("10,0")).build();
         Shipment shipment2 = Shipment.Builder.newInstance("s2").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("10,10").build()).setDeliveryLocation(Location.newInstance("0,0")).build();
         Shipment shipment3 = Shipment.Builder.newInstance("s3").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,0").build()).setDeliveryLocation(Location.newInstance("9,9")).build();
-        List<JobActivity> shipmentActivities = getTourActivities(shipment);
-        List<JobActivity> shipment2Activities = getTourActivities(shipment2);
+        List<JobActivity> shipmentActivities = shipment.getActivityList().getAll();
+        List<JobActivity> shipment2Activities = shipment2.getActivityList().getAll();
         VehicleRoute route = VehicleRoute.emptyRoute();
 
         route.setVehicleAndDepartureTime(vehicle, 0d);
@@ -217,8 +211,8 @@ public void whenInsertingThirdShipment_itShouldCalcCorrectVal2() {
 
         JobActivityFactory activityFactory = mock(JobActivityFactory.class);
         List<JobActivity> activities = new ArrayList<>();
-        activities.add(new PickupShipmentDEPRECATED(shipment3));
-        activities.add(new DeliverShipmentDEPRECATED(shipment3));
+        activities.add(shipment3.getPickupActivity());
+        activities.add(shipment3.getDeliveryActivity());
         when(activityFactory.createActivities(shipment3)).thenReturn(activities);
         insertionCalculator.setJobActivityFactory(activityFactory);
 
@@ -253,7 +247,7 @@ public void whenInstertingShipmentWithLoadConstraintWhereCapIsNotSufficient_capC
         constraintManager.addConstraint(new ShipmentPickupsFirstConstraint(), ConstraintManager.Priority.CRITICAL);
 
         ShipmentInsertionCalculator insertionCalculator = new ShipmentInsertionCalculator(routingCosts, activityCosts,
-            activityInsertionCostsCalculator, constraintManager);
+                        activityInsertionCostsCalculator, constraintManager);
         insertionCalculator.setJobActivityFactory(vrp.getJobActivityFactory());
 
         InsertionData iData = insertionCalculator.getInsertionData(route, shipment3, vehicle, 0.0, DriverImpl.noDriver(), Double.MAX_VALUE);
@@ -296,7 +290,7 @@ public void whenInsertingServiceWhileNoCapIsAvailable_itMustReturnNoInsertionDat
 
         JobActivityFactory activityFactory = mock(JobActivityFactory.class);
         List<JobActivity> activities = new ArrayList<>();
-        activities.add(new PickupServiceDEPRECATED(service));
+        activities.add(service.getServiceActivity());
         when(activityFactory.createActivities(service)).thenReturn(activities);
         insertionCalculator.setJobActivityFactory(activityFactory);
         serviceInsertionCalc.setJobActivityFactory(activityFactory);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/HardPickupAndDeliveryShipmentActivityConstraintTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/HardPickupAndDeliveryShipmentActivityConstraintTest.java
index c1531e32d..fca1db191 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/HardPickupAndDeliveryShipmentActivityConstraintTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/HardPickupAndDeliveryShipmentActivityConstraintTest.java
@@ -17,8 +17,13 @@
  */
 package com.graphhopper.jsprit.core.algorithm.state;
 
-import com.graphhopper.jsprit.core.problem.SizeDimension;
+import static org.junit.Assert.assertEquals;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.constraint.HardActivityConstraint.ConstraintsStatus;
 import com.graphhopper.jsprit.core.problem.constraint.PickupAndDeliverShipmentLoadActivityLevelConstraint;
@@ -26,15 +31,11 @@
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverShipmentDEPRECATED;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupServiceDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivityNEW;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupShipmentDEPRECATED;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
-import org.junit.Before;
-import org.junit.Test;
-
-import static org.junit.Assert.assertEquals;
 
 
 public class HardPickupAndDeliveryShipmentActivityConstraintTest {
@@ -62,7 +63,7 @@ public void doBefore() {
         shipment = Shipment.Builder.newInstance("shipment").setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).setDeliveryLocation(Location.newInstance("delLoc")).addSizeDimension(0, 1).build();
 
 
-//		when(vehicle.getCapacity()).thenReturn(2);
+        //		when(vehicle.getCapacity()).thenReturn(2);
         VehicleType type = VehicleTypeImpl.Builder.newInstance("t").addCapacityDimension(0, 2).build();
         vehicle = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance("start")).build();
 
@@ -76,8 +77,8 @@ public void doBefore() {
 
     @Test
     public void whenPickupActivityIsInsertedAndLoadIsSufficient_returnFullFilled() {
-        PickupServiceDEPRECATED pickupService = (PickupServiceDEPRECATED) vrp.getActivities(s1).get(0);
-        PickupServiceDEPRECATED anotherService = (PickupServiceDEPRECATED) vrp.getActivities(s2).get(0);
+        PickupActivityNEW pickupService = (PickupActivityNEW) vrp.getActivities(s1).get(0);
+        PickupActivityNEW anotherService = (PickupActivityNEW) vrp.getActivities(s2).get(0);
         PickupShipmentDEPRECATED pickupShipment = (PickupShipmentDEPRECATED) vrp.getActivities(shipment).get(0);
 
         assertEquals(ConstraintsStatus.FULFILLED, constraint.fulfilled(iFacts, pickupService, pickupShipment, anotherService, 0.0));
@@ -85,24 +86,24 @@ public void whenPickupActivityIsInsertedAndLoadIsSufficient_returnFullFilled() {
 
     @Test
     public void whenPickupActivityIsInsertedAndLoadIsNotSufficient_returnNOT_FullFilled() {
-        PickupServiceDEPRECATED pickupService = (PickupServiceDEPRECATED) vrp.getActivities(s1).get(0);
-        PickupServiceDEPRECATED anotherService = (PickupServiceDEPRECATED) vrp.getActivities(s2).get(0);
+        PickupActivityNEW pickupService = (PickupActivityNEW) vrp.getActivities(s1).get(0);
+        PickupActivityNEW anotherService = (PickupActivityNEW) vrp.getActivities(s2).get(0);
         PickupShipmentDEPRECATED pickupShipment = (PickupShipmentDEPRECATED) vrp.getActivities(shipment).get(0);
 
         stateManager.putInternalTypedActivityState(pickupService, InternalStates.LOAD, SizeDimension.Builder.newInstance().addDimension(0, 2).build());
-//		when(stateManager.getActivityState(pickupService, StateFactory.LOAD)).thenReturn(StateFactory.createState(2.0));
+        //		when(stateManager.getActivityState(pickupService, StateFactory.LOAD)).thenReturn(StateFactory.createState(2.0));
         assertEquals(ConstraintsStatus.NOT_FULFILLED, constraint.fulfilled(iFacts, pickupService, pickupShipment, anotherService, 0.0));
     }
 
     @Test
     public void whenDeliveryActivityIsInsertedAndLoadIsSufficient_returnFullFilled() {
-        PickupServiceDEPRECATED pickupService = (PickupServiceDEPRECATED) vrp.getActivities(s1).get(0);
-        PickupServiceDEPRECATED anotherService = (PickupServiceDEPRECATED) vrp.getActivities(s2).get(0);
+        PickupActivityNEW pickupService = (PickupActivityNEW) vrp.getActivities(s1).get(0);
+        PickupActivityNEW anotherService = (PickupActivityNEW) vrp.getActivities(s2).get(0);
 
         DeliverShipmentDEPRECATED deliverShipment = (DeliverShipmentDEPRECATED) vrp.getActivities(shipment).get(1);
 
         stateManager.putInternalTypedActivityState(pickupService, InternalStates.LOAD, SizeDimension.Builder.newInstance().addDimension(0, 1).build());
-//		stateManager.putInternalActivityState(pickupService, StateFactory.LOAD, StateFactory.createState(1));
+        //		stateManager.putInternalActivityState(pickupService, StateFactory.LOAD, StateFactory.createState(1));
         assertEquals(ConstraintsStatus.FULFILLED, constraint.fulfilled(iFacts, pickupService, deliverShipment, anotherService, 0.0));
     }
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowTest.java
index 80b591581..ade1c12c5 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowTest.java
@@ -18,6 +18,19 @@
 
 package com.graphhopper.jsprit.core.problem.constraint;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.List;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.state.InternalStates;
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.algorithm.state.UpdateActivityTimes;
@@ -33,15 +46,14 @@
 import com.graphhopper.jsprit.core.problem.job.Service;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupServiceDEPRECATED;
-import com.graphhopper.jsprit.core.problem.vehicle.*;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
+import com.graphhopper.jsprit.core.problem.vehicle.FiniteFleetManagerFactory;
+import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleFleetManager;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.CostFactory;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.*;
-
-import static org.junit.Assert.*;
 
 /**
  * unit tests to test vehicle dependent time-windows
@@ -76,22 +88,22 @@ public void doBefore() {
 
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").build();
         vehicle = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance("0,0"))
-            .setEarliestStart(0.).setLatestArrival(100.).build();
+                        .setEarliestStart(0.).setLatestArrival(100.).build();
 
         v2 = VehicleImpl.Builder.newInstance("v2").setType(type).setStartLocation(Location.newInstance("0,0"))
-            .setEarliestStart(0.).setLatestArrival(60.).build();
+                        .setEarliestStart(0.).setLatestArrival(60.).build();
 
         v3 = VehicleImpl.Builder.newInstance("v3").setType(type).setStartLocation(Location.newInstance("0,0"))
-            .setEarliestStart(0.).setLatestArrival(50.).build();
+                        .setEarliestStart(0.).setLatestArrival(50.).build();
 
         v4 = VehicleImpl.Builder.newInstance("v4").setType(type).setStartLocation(Location.newInstance("0,0"))
-            .setEarliestStart(0.).setLatestArrival(10.).build();
+                        .setEarliestStart(0.).setLatestArrival(10.).build();
 
         v5 = VehicleImpl.Builder.newInstance("v5").setType(type).setStartLocation(Location.newInstance("0,0"))
-            .setEarliestStart(60.).setLatestArrival(100.).build();
+                        .setEarliestStart(60.).setLatestArrival(100.).build();
 
         v6 = VehicleImpl.Builder.newInstance("v6").setType(type).setStartLocation(Location.newInstance("0,0"))
-            .setEndLocation(Location.newInstance("40,0")).setEarliestStart(0.).setLatestArrival(40.).build();
+                        .setEndLocation(Location.newInstance("40,0")).setEarliestStart(0.).setLatestArrival(40.).build();
 
         vrpBuilder.addVehicle(vehicle).addVehicle(v2).addVehicle(v3).addVehicle(v4).addVehicle(v5).addVehicle(v6);
 
@@ -103,7 +115,7 @@ public void doBefore() {
         final VehicleRoutingProblem vrp = vrpBuilder.build();
 
         route = VehicleRoute.Builder.newInstance(vehicle).setJobActivityFactory(new CopyJobActivityFactory())
-            .addService(service).addService(service2).addService(service3).build();
+                        .addService(service).addService(service2).addService(service3).build();
 
         stateManager = new StateManager(vrp);
 
@@ -137,26 +149,26 @@ public void doBefore() {
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct3() {
         assertEquals(70., stateManager.getActivityState(route.getActivities().get(2),
-            vehicle, InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+                        vehicle, InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct2() {
         assertEquals(60., stateManager.getActivityState(route.getActivities().get(1),
-            vehicle, InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+                        vehicle, InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct1() {
         assertEquals(50., stateManager.getActivityState(route.getActivities().get(0),
-            vehicle, InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+                        vehicle, InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
     @Test
     public void whenNewJobIsInsertedWithOldVeh_itJustShouldReturnTrue() {
 
         Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("50,0")).build();
-        PickupServiceDEPRECATED serviceAct = new PickupServiceDEPRECATED(s4);
+        JobActivity serviceAct = s4.getServiceActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, vehicle, route.getDriver(), 0.);
 
@@ -171,7 +183,7 @@ public void whenNewJobIsInsertedWithOldVeh_itJustShouldReturnTrue() {
     public void whenNewJobIsInsertedWithOldVeh_itJustShouldReturnFalse() {
 
         Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("1000,0")).build();
-        PickupServiceDEPRECATED serviceAct = new PickupServiceDEPRECATED(s4);
+        JobActivity serviceAct = s4.getServiceActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, vehicle, route.getDriver(), 0.);
 
@@ -186,7 +198,7 @@ public void whenNewJobIsInsertedWithOldVeh_itJustShouldReturnFalse() {
     public void whenNewJobIsInsertedInBetweenAct1And2WithOldVeh_itJustShouldReturnTrue() {
 
         Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("50,0")).build();
-        PickupServiceDEPRECATED serviceAct = new PickupServiceDEPRECATED(s4);
+        JobActivity serviceAct = s4.getServiceActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, vehicle, route.getDriver(), 0.);
 
@@ -194,7 +206,7 @@ public void whenNewJobIsInsertedInBetweenAct1And2WithOldVeh_itJustShouldReturnTr
         /*
         driverTime = 10 + 10 + 30 + 20 + 30 = 100
          */
-//        System.out.println("latest act1 " + stateManager.getActivityState());
+        //        System.out.println("latest act1 " + stateManager.getActivityState());
         HardActivityConstraint.ConstraintsStatus status = twConstraint.fulfilled(insertionContext, route.getActivities().get(1), serviceAct, route.getActivities().get(2), 20.);
         assertTrue(status.equals(HardActivityConstraint.ConstraintsStatus.FULFILLED));
 
@@ -204,7 +216,7 @@ public void whenNewJobIsInsertedInBetweenAct1And2WithOldVeh_itJustShouldReturnTr
     public void whenNewJobIsInsertedInBetweenAct1And2WithOldVeh_itJustShouldReturnFalse() {
 
         Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("51,0")).build();
-        PickupServiceDEPRECATED serviceAct = new PickupServiceDEPRECATED(s4);
+        JobActivity serviceAct = s4.getServiceActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, vehicle, route.getDriver(), 0.);
 
@@ -225,7 +237,7 @@ public void whenJobIsInsertedAlongWithNewVehicleThatNeedsToBeHomeAt60_itShouldRe
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
         Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
-        PickupServiceDEPRECATED serviceAct = new PickupServiceDEPRECATED(s4);
+        JobActivity serviceAct = s4.getServiceActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v2, route.getDriver(), 0.);
 
@@ -243,7 +255,7 @@ public void whenJobIsInsertedAlongWithNewVehicleThatNeedsToBeHomeAt50_itShouldRe
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
         Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
-        PickupServiceDEPRECATED serviceAct = new PickupServiceDEPRECATED(s4);
+        JobActivity serviceAct = s4.getServiceActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v3, route.getDriver(), 0.);
 
@@ -260,7 +272,7 @@ public void whenJobIsInsertedAlongWithNewVehicleThatNeedsToBeHomeAt10_itShouldRe
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
         Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
-        PickupServiceDEPRECATED serviceAct = new PickupServiceDEPRECATED(s4);
+        JobActivity serviceAct = s4.getServiceActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v4, route.getDriver(), 0.);
 
@@ -277,7 +289,7 @@ public void whenJobIsInsertedAlongWithV6BetweenS2AndS3_itShouldReturnFalse() {
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
         Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
-        PickupServiceDEPRECATED serviceAct = new PickupServiceDEPRECATED(s4);
+        JobActivity serviceAct = s4.getServiceActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v6, route.getDriver(), 0.);
 
@@ -294,7 +306,7 @@ public void whenJobIsInsertedAlongWithV6BetweenS1AndS2_itShouldReturnFalse() {
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
         Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
-        PickupServiceDEPRECATED serviceAct = new PickupServiceDEPRECATED(s4);
+        JobActivity serviceAct = s4.getServiceActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v6, route.getDriver(), 0.);
 
@@ -311,7 +323,7 @@ public void whenJobIsInsertedAlongWithV6AtTheEndOfRoute_itShouldReturnTrue() {
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
         Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
-        PickupServiceDEPRECATED serviceAct = new PickupServiceDEPRECATED(s4);
+        JobActivity serviceAct = s4.getServiceActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v6, route.getDriver(), 0.);
 
@@ -326,7 +338,7 @@ public void whenJobIsInsertedAlongWithNewVehicleThatCanOnlyStartAt60_itShouldRet
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
         Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
-        PickupServiceDEPRECATED serviceAct = new PickupServiceDEPRECATED(s4);
+        JobActivity serviceAct = s4.getServiceActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v5, route.getDriver(), 60.);
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowWithStartTimeAndMaxOperationTimeTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowWithStartTimeAndMaxOperationTimeTest.java
index e02a6950c..9a8577fdb 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowWithStartTimeAndMaxOperationTimeTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowWithStartTimeAndMaxOperationTimeTest.java
@@ -18,6 +18,19 @@
 
 package com.graphhopper.jsprit.core.problem.constraint;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.List;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.state.InternalStates;
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.algorithm.state.UpdateActivityTimes;
@@ -33,15 +46,14 @@
 import com.graphhopper.jsprit.core.problem.job.Service;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupServiceDEPRECATED;
-import com.graphhopper.jsprit.core.problem.vehicle.*;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
+import com.graphhopper.jsprit.core.problem.vehicle.FiniteFleetManagerFactory;
+import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleFleetManager;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.CostFactory;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.*;
-
-import static org.junit.Assert.*;
 
 /**
  * unit tests to test vehicle dependent time-windows
@@ -74,22 +86,22 @@ public void doBefore() {
 
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").build();
         vehicle = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance("0,0"))
-            .setEarliestStart(0.).setLatestArrival(100.).build();
+                        .setEarliestStart(0.).setLatestArrival(100.).build();
 
         v2 = VehicleImpl.Builder.newInstance("v2").setType(type).setStartLocation(Location.newInstance("0,0"))
-            .setEarliestStart(0.).setLatestArrival(60.).build();
+                        .setEarliestStart(0.).setLatestArrival(60.).build();
 
         v3 = VehicleImpl.Builder.newInstance("v3").setType(type).setStartLocation(Location.newInstance("0,0"))
-            .setEarliestStart(0.).setLatestArrival(50.).build();
+                        .setEarliestStart(0.).setLatestArrival(50.).build();
 
         v4 = VehicleImpl.Builder.newInstance("v4").setType(type).setStartLocation(Location.newInstance("0,0"))
-            .setEarliestStart(0.).setLatestArrival(10.).build();
+                        .setEarliestStart(0.).setLatestArrival(10.).build();
 
         v5 = VehicleImpl.Builder.newInstance("v5").setType(type).setStartLocation(Location.newInstance("0,0"))
-            .setEarliestStart(60.).setLatestArrival(100.).build();
+                        .setEarliestStart(60.).setLatestArrival(100.).build();
 
         v6 = VehicleImpl.Builder.newInstance("v6").setType(type).setStartLocation(Location.newInstance("0,0"))
-            .setEndLocation(Location.newInstance("40,0")).setEarliestStart(0.).setLatestArrival(40.).build();
+                        .setEndLocation(Location.newInstance("40,0")).setEarliestStart(0.).setLatestArrival(40.).build();
 
         vrpBuilder.addVehicle(vehicle).addVehicle(v2).addVehicle(v3).addVehicle(v4).addVehicle(v5).addVehicle(v6);
 
@@ -101,7 +113,7 @@ public void doBefore() {
         final VehicleRoutingProblem vrp = vrpBuilder.build();
 
         route = VehicleRoute.Builder.newInstance(vehicle).setJobActivityFactory(new CopyJobActivityFactory())
-            .addService(service).addService(service2).addService(service3).build();
+                        .addService(service).addService(service2).addService(service3).build();
 
         stateManager = new StateManager(vrp);
 
@@ -114,7 +126,7 @@ public void doBefore() {
         vehicles.add(v6);
 
         final VehicleFleetManager fleetManager = new FiniteFleetManagerFactory(vehicles).createFleetManager();
-//        stateManager.updateTimeWindowStates();
+        //        stateManager.updateTimeWindowStates();
         UpdateVehicleDependentPracticalTimeWindows timeWindow_updater = new UpdateVehicleDependentPracticalTimeWindows(stateManager, routingCosts, activityCosts);
         timeWindow_updater.setVehiclesToUpdate(new UpdateVehicleDependentPracticalTimeWindows.VehiclesToUpdate() {
 
@@ -135,26 +147,26 @@ public void doBefore() {
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct3() {
         assertEquals(70., stateManager.getActivityState(route.getActivities().get(2),
-            vehicle, InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+                        vehicle, InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct2() {
         assertEquals(60., stateManager.getActivityState(route.getActivities().get(1),
-            vehicle, InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+                        vehicle, InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct1() {
         assertEquals(50., stateManager.getActivityState(route.getActivities().get(0),
-            vehicle, InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+                        vehicle, InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
     @Test
     public void whenNewJobIsInsertedWithOldVeh_itJustShouldReturnTrue() {
 
         Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("50,0")).build();
-        PickupServiceDEPRECATED serviceAct = new PickupServiceDEPRECATED(s4);
+        JobActivity serviceAct = s4.getServiceActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, vehicle, route.getDriver(), 0.);
 
@@ -169,7 +181,7 @@ public void whenNewJobIsInsertedWithOldVeh_itJustShouldReturnTrue() {
     public void whenNewJobIsInsertedWithOldVeh_itJustShouldReturnFalse() {
 
         Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("1000,0")).build();
-        PickupServiceDEPRECATED serviceAct = new PickupServiceDEPRECATED(s4);
+        JobActivity serviceAct = s4.getServiceActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, vehicle, route.getDriver(), 0.);
 
@@ -184,7 +196,7 @@ public void whenNewJobIsInsertedWithOldVeh_itJustShouldReturnFalse() {
     public void whenNewJobIsInsertedInBetweenAct1And2WithOldVeh_itJustShouldReturnTrue() {
 
         Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("50,0")).build();
-        PickupServiceDEPRECATED serviceAct = new PickupServiceDEPRECATED(s4);
+        JobActivity serviceAct = s4.getServiceActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, vehicle, route.getDriver(), 0.);
 
@@ -192,7 +204,7 @@ public void whenNewJobIsInsertedInBetweenAct1And2WithOldVeh_itJustShouldReturnTr
         /*
         driverTime = 10 + 10 + 30 + 20 + 30 = 100
          */
-//        System.out.println("latest act1 " + stateManager.getActivityState());
+        //        System.out.println("latest act1 " + stateManager.getActivityState());
         HardActivityConstraint.ConstraintsStatus status = twConstraint.fulfilled(insertionContext, route.getActivities().get(1), serviceAct, route.getActivities().get(2), 20.);
         assertTrue(status.equals(HardActivityConstraint.ConstraintsStatus.FULFILLED));
 
@@ -202,7 +214,7 @@ public void whenNewJobIsInsertedInBetweenAct1And2WithOldVeh_itJustShouldReturnTr
     public void whenNewJobIsInsertedInBetweenAct1And2WithOldVeh_itJustShouldReturnFalse() {
 
         Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("51,0")).build();
-        PickupServiceDEPRECATED serviceAct = new PickupServiceDEPRECATED(s4);
+        JobActivity serviceAct = s4.getServiceActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, vehicle, route.getDriver(), 0.);
 
@@ -223,7 +235,7 @@ public void whenJobIsInsertedAlongWithNewVehicleThatNeedsToBeHomeAt60_itShouldRe
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
         Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
-        PickupServiceDEPRECATED serviceAct = new PickupServiceDEPRECATED(s4);
+        JobActivity serviceAct = s4.getServiceActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v2, route.getDriver(), 0.);
 
@@ -241,7 +253,7 @@ public void whenJobIsInsertedAlongWithNewVehicleThatNeedsToBeHomeAt50_itShouldRe
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
         Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
-        PickupServiceDEPRECATED serviceAct = new PickupServiceDEPRECATED(s4);
+        JobActivity serviceAct = s4.getServiceActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v3, route.getDriver(), 0.);
 
@@ -258,7 +270,7 @@ public void whenJobIsInsertedAlongWithNewVehicleThatNeedsToBeHomeAt10_itShouldRe
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
         Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
-        PickupServiceDEPRECATED serviceAct = new PickupServiceDEPRECATED(s4);
+        JobActivity serviceAct = s4.getServiceActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v4, route.getDriver(), 0.);
 
@@ -275,7 +287,7 @@ public void whenJobIsInsertedAlongWithV6BetweenS2AndS3_itShouldReturnFalse() {
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
         Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
-        PickupServiceDEPRECATED serviceAct = new PickupServiceDEPRECATED(s4);
+        JobActivity serviceAct = s4.getServiceActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v6, route.getDriver(), 0.);
 
@@ -292,7 +304,7 @@ public void whenJobIsInsertedAlongWithV6BetweenS1AndS2_itShouldReturnFalse() {
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
         Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
-        PickupServiceDEPRECATED serviceAct = new PickupServiceDEPRECATED(s4);
+        JobActivity serviceAct = s4.getServiceActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v6, route.getDriver(), 0.);
 
@@ -309,7 +321,7 @@ public void whenJobIsInsertedAlongWithV6AtTheEndOfRoute_itShouldReturnTrue() {
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
         Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
-        PickupServiceDEPRECATED serviceAct = new PickupServiceDEPRECATED(s4);
+        JobActivity serviceAct = s4.getServiceActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v6, route.getDriver(), 0.);
 
@@ -324,7 +336,7 @@ public void whenJobIsInsertedAlongWithNewVehicleThatCanOnlyStartAt60_itShouldRet
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
         Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
-        PickupServiceDEPRECATED serviceAct = new PickupServiceDEPRECATED(s4);
+        JobActivity serviceAct = s4.getServiceActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v5, route.getDriver(), 60.);
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/TestVehicleRoute.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/TestVehicleRoute.java
index aebf2e9c5..b341c2a05 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/TestVehicleRoute.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/TestVehicleRoute.java
@@ -17,23 +17,28 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
+import java.util.Iterator;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.driver.DriverImpl;
 import com.graphhopper.jsprit.core.problem.driver.DriverImpl.NoDriver;
 import com.graphhopper.jsprit.core.problem.job.Delivery;
 import com.graphhopper.jsprit.core.problem.job.Pickup;
 import com.graphhopper.jsprit.core.problem.job.Service;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.*;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivityNEW;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivityNEW;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.ServiceActivityNEW;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.Iterator;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
 
 
 public class TestVehicleRoute {
@@ -302,7 +307,7 @@ public void whenAddingPickup_itShouldBeTreatedAsPickup() {
 
         TourActivity act = route.getActivities().get(0);
         assertEquals("pick.pickup", act.getName());
-        assertTrue(act instanceof PickupServiceDEPRECATED);
+        assertTrue(act instanceof PickupActivityNEW);
         assertTrue(((JobActivity) act).getJob() instanceof Pickup);
 
     }
@@ -316,7 +321,7 @@ public void whenAddingPickup_itShouldBeAdded() {
 
         TourActivity act = route.getActivities().get(0);
         assertEquals("pick.pickup", act.getName());
-        assertTrue(act instanceof PickupServiceDEPRECATED);
+        assertTrue(act instanceof PickupActivityNEW);
         assertTrue(((JobActivity) act).getJob() instanceof Pickup);
 
     }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverServiceDEPRECATEDTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverServiceDEPRECATEDTest.java
deleted file mode 100644
index 2157b1ad6..000000000
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverServiceDEPRECATEDTest.java
+++ /dev/null
@@ -1,90 +0,0 @@
-/*
- * Licensed to GraphHopper GmbH under one or more contributor
- * license agreements. See the NOTICE file distributed with this work for
- * additional information regarding copyright ownership.
- *
- * GraphHopper GmbH licenses this file to you under the Apache License,
- * Version 2.0 (the "License"); you may not use this file except in
- * compliance with the License. You may obtain a copy of the License at
- *
- *       http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.graphhopper.jsprit.core.problem.solution.route.activity;
-
-import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.job.Delivery;
-import org.junit.Before;
-import org.junit.Test;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-
-public class DeliverServiceDEPRECATEDTest {
-
-    private Delivery service;
-
-    private DeliverServiceDEPRECATED deliver;
-
-    @Before
-    public void doBefore() {
-        service = new Delivery.Builder("service").setLocation(Location.newInstance("loc")).
-            setTimeWindow(TimeWindow.newInstance(1., 2.)).
-            addSizeDimension(0, 10).addSizeDimension(1, 100).addSizeDimension(2, 1000).build();
-        deliver = new DeliverServiceDEPRECATED(service);
-        deliver.setTheoreticalEarliestOperationStartTime(service.getTimeWindow().getStart());
-        deliver.setTheoreticalLatestOperationStartTime(service.getTimeWindow().getEnd());
-    }
-
-    @Test
-    public void whenCallingCapacity_itShouldReturnCorrectCapacity() {
-        assertEquals(-10, deliver.getLoadChange().get(0));
-        assertEquals(-100, deliver.getLoadChange().get(1));
-        assertEquals(-1000, deliver.getLoadChange().get(2));
-    }
-
-    @Test
-    public void whenStartIsIniWithEarliestStart_itShouldBeSetCorrectly() {
-        assertEquals(1., deliver.getTheoreticalEarliestOperationStartTime(), 0.01);
-    }
-
-    @Test
-    public void whenStartIsIniWithLatestStart_itShouldBeSetCorrectly() {
-        assertEquals(2., deliver.getTheoreticalLatestOperationStartTime(), 0.01);
-    }
-
-    @Test
-    public void whenSettingArrTime_itShouldBeSetCorrectly() {
-        deliver.setArrTime(4.0);
-        assertEquals(4., deliver.getArrTime(), 0.01);
-    }
-
-    @Test
-    public void whenSettingEndTime_itShouldBeSetCorrectly() {
-        deliver.setEndTime(5.0);
-        assertEquals(5., deliver.getEndTime(), 0.01);
-    }
-
-    @Test
-    public void whenIniLocationId_itShouldBeSetCorrectly() {
-        assertEquals("loc", deliver.getLocation().getId());
-    }
-
-    @Test
-    public void whenCopyingStart_itShouldBeDoneCorrectly() {
-        DeliverServiceDEPRECATED copy = (DeliverServiceDEPRECATED) deliver.duplicate();
-        assertEquals(1., copy.getTheoreticalEarliestOperationStartTime(), 0.01);
-        assertEquals(2., copy.getTheoreticalLatestOperationStartTime(), 0.01);
-        assertEquals("loc", copy.getLocation().getId());
-        assertEquals(-10, copy.getLoadChange().get(0));
-        assertEquals(-100, copy.getLoadChange().get(1));
-        assertEquals(-1000, copy.getLoadChange().get(2));
-        assertTrue(copy != deliver);
-    }
-
-}
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverShipmentTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverShipmentTest.java
deleted file mode 100644
index e4d5c80fa..000000000
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverShipmentTest.java
+++ /dev/null
@@ -1,100 +0,0 @@
-/*
- * Licensed to GraphHopper GmbH under one or more contributor
- * license agreements. See the NOTICE file distributed with this work for
- * additional information regarding copyright ownership.
- *
- * GraphHopper GmbH licenses this file to you under the Apache License,
- * Version 2.0 (the "License"); you may not use this file except in
- * compliance with the License. You may obtain a copy of the License at
- *
- *       http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.graphhopper.jsprit.core.problem.solution.route.activity;
-
-import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
-import org.junit.Before;
-import org.junit.Test;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-
-public class DeliverShipmentTest {
-
-    private DeliverShipmentDEPRECATED deliver;
-
-    @Before
-    public void doBefore() {
-        Shipment shipment = Shipment.Builder.newInstance("shipment").setPickupLocation(Location.Builder.newInstance().setId("pickupLoc").build())
-            .setDeliveryLocation(Location.newInstance("deliveryLoc"))
-            .setPickupTimeWindow(TimeWindow.newInstance(1., 2.))
-            .setDeliveryTimeWindow(TimeWindow.newInstance(3., 4.))
-            .addSizeDimension(0, 10).addSizeDimension(1, 100).addSizeDimension(2, 1000).build();
-        deliver = new DeliverShipmentDEPRECATED(shipment);
-        deliver.setTheoreticalEarliestOperationStartTime(shipment.getDeliveryTimeWindow().getStart());
-        deliver.setTheoreticalLatestOperationStartTime(shipment.getDeliveryTimeWindow().getEnd());
-    }
-
-    @Test
-    public void whenCallingCapacity_itShouldReturnCorrectCapacity() {
-        assertEquals(-10, deliver.getLoadChange().get(0));
-        assertEquals(-100, deliver.getLoadChange().get(1));
-        assertEquals(-1000, deliver.getLoadChange().get(2));
-    }
-
-    @Test
-    public void whenStartIsIniWithEarliestStart_itShouldBeSetCorrectly() {
-        assertEquals(3., deliver.getTheoreticalEarliestOperationStartTime(), 0.01);
-    }
-
-    @Test
-    public void whenStartIsIniWithLatestStart_itShouldBeSetCorrectly() {
-        assertEquals(4., deliver.getTheoreticalLatestOperationStartTime(), 0.01);
-    }
-
-    @Test
-    public void whenSettingArrTime_itShouldBeSetCorrectly() {
-        deliver.setArrTime(4.0);
-        assertEquals(4., deliver.getArrTime(), 0.01);
-    }
-
-    @Test
-    public void whenSettingEndTime_itShouldBeSetCorrectly() {
-        deliver.setEndTime(5.0);
-        assertEquals(5., deliver.getEndTime(), 0.01);
-    }
-
-    @Test
-    public void whenIniLocationId_itShouldBeSetCorrectly() {
-        assertEquals("deliveryLoc", deliver.getLocation().getId());
-    }
-
-    @Test
-    public void whenCopyingStart_itShouldBeDoneCorrectly() {
-        DeliverShipmentDEPRECATED copy = (DeliverShipmentDEPRECATED) deliver.duplicate();
-        assertEquals(3., copy.getTheoreticalEarliestOperationStartTime(), 0.01);
-        assertEquals(4., copy.getTheoreticalLatestOperationStartTime(), 0.01);
-        assertEquals("deliveryLoc", copy.getLocation().getId());
-        assertEquals(-10, copy.getLoadChange().get(0));
-        assertEquals(-100, copy.getLoadChange().get(1));
-        assertEquals(-1000, copy.getLoadChange().get(2));
-        assertTrue(copy != deliver);
-    }
-
-
-    @Test
-    public void whenGettingCapacity_itShouldReturnItCorrectly() {
-        Shipment shipment = Shipment.Builder.newInstance("s").setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).setDeliveryLocation(Location.newInstance("delLoc"))
-            .addSizeDimension(0, 10).addSizeDimension(1, 100).build();
-        PickupShipmentDEPRECATED pick = new PickupShipmentDEPRECATED(shipment);
-        assertEquals(10, pick.getLoadChange().get(0));
-        assertEquals(100, pick.getLoadChange().get(1));
-    }
-
-}
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliveryActivityTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliveryActivityTest.java
new file mode 100644
index 000000000..e632210f6
--- /dev/null
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliveryActivityTest.java
@@ -0,0 +1,47 @@
+/*
+ * Licensed to GraphHopper GmbH under one or more contributor
+ * license agreements. See the NOTICE file distributed with this work for
+ * additional information regarding copyright ownership.
+ *
+ * GraphHopper GmbH licenses this file to you under the Apache License,
+ * Version 2.0 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.graphhopper.jsprit.core.problem.solution.route.activity;
+
+import static org.junit.Assert.assertEquals;
+
+import org.junit.Before;
+import org.junit.Test;
+
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.job.Delivery;
+
+public class DeliveryActivityTest extends JobActivityTest {
+
+    @Before
+    public void doBefore() {
+        service = new Delivery.Builder("service").setLocation(Location.newInstance("loc"))
+                        .setTimeWindow(TimeWindow.newInstance(1., 2.)).
+                        setServiceTime(20d).
+                        addSizeDimension(0, 10).addSizeDimension(1, 100).addSizeDimension(2, 1000).build();
+        createActivity(service);
+    }
+
+    @Override
+    @Test
+    public void whenCallingCapacity_itShouldReturnCorrectCapacity() {
+        assertEquals(-10, activity.getLoadChange().get(0));
+        assertEquals(-100, activity.getLoadChange().get(1));
+        assertEquals(-1000, activity.getLoadChange().get(2));
+    }
+
+}
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/JobActivityTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/JobActivityTest.java
new file mode 100644
index 000000000..962703614
--- /dev/null
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/JobActivityTest.java
@@ -0,0 +1,138 @@
+/*
+ * Licensed to GraphHopper GmbH under one or more contributor
+ * license agreements. See the NOTICE file distributed with this work for
+ * additional information regarding copyright ownership.
+ *
+ * GraphHopper GmbH licenses this file to you under the Apache License,
+ * Version 2.0 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.graphhopper.jsprit.core.problem.solution.route.activity;
+
+import static org.junit.Assert.assertEquals;
+
+import org.junit.Test;
+
+import com.graphhopper.jsprit.core.problem.job.Service;
+
+public abstract class JobActivityTest {
+
+    protected Service service;
+
+    protected JobActivity activity;
+
+    public void createActivity(Service service) {
+        this.service = service;
+        activity = service.getServiceActivity();
+        activity.setTheoreticalEarliestOperationStartTime(
+                        activity.getTimeWindows().iterator().next().getStart());
+        activity.setTheoreticalLatestOperationStartTime(
+                        activity.getTimeWindows().iterator().next().getEnd());
+    }
+
+    @Test
+
+    public abstract void whenCallingCapacity_itShouldReturnCorrectCapacity();
+
+
+    @Test
+    public void whenCallingJob_itShouldReturnCorrectJob() {
+        assertEquals(service, activity.getJob());
+    }
+
+    @Test
+    public void whenCallingOperationTime_itShouldReturnCorrectValue() {
+        assertEquals(20d, activity.getOperationTime(), 0.01);
+    }
+
+    @Test
+    public void whenCallingOrderNumber_itShouldReturnCorrectValue() {
+        assertEquals(1d, activity.getOrderNumber(), 0.01);
+    }
+
+    @Test
+    public void whenStartIsIniWithEarliestStart_itShouldBeSetCorrectly() {
+        assertEquals(1., activity.getTheoreticalEarliestOperationStartTime(), 0.01);
+    }
+
+    @Test
+    public void whenStartIsIniWithLatestStart_itShouldBeSetCorrectly() {
+        assertEquals(2., activity.getTheoreticalLatestOperationStartTime(), 0.01);
+    }
+
+    @Test
+    public void whenSettingArrTime_itShouldBeSetCorrectly() {
+        activity.setArrTime(4.0);
+        assertEquals(4., activity.getArrTime(), 0.01);
+    }
+
+    @Test
+    public void whenSettingEndTime_itShouldBeSetCorrectly() {
+        activity.setEndTime(5.0);
+        assertEquals(5., activity.getEndTime(), 0.01);
+    }
+
+    @Test
+    public void whenIniLocationId_itShouldBeSetCorrectly() {
+        assertEquals("loc", activity.getLocation().getId());
+    }
+
+    @Test
+    public void whenCopyingStart_classShouldBeTheSame() {
+        JobActivity copy = (JobActivity) activity.duplicate();
+        assertEquals(activity.getClass(), copy.getClass());
+    }
+
+    @Test
+    public void whenCopyingStart_jobShouldBeTheSame() {
+        JobActivity copy = (JobActivity) activity.duplicate();
+        assertEquals(activity.getJob(), copy.getJob());
+    }
+
+    @Test
+    public void whenCopyingStart_orderNumberShouldBeTheSame() {
+        JobActivity copy = (JobActivity) activity.duplicate();
+        assertEquals(activity.getOrderNumber(), copy.getOrderNumber());
+    }
+
+    @Test
+    public void whenCopyingStart_operationTimeShouldBeTheSame() {
+        JobActivity copy = (JobActivity) activity.duplicate();
+        assertEquals(20d, copy.getOperationTime(), 0.01);
+    }
+
+    @Test
+    public void whenCopyingStart_typeShouldBeTheSame() {
+        JobActivity copy = (JobActivity) activity.duplicate();
+        assertEquals(activity.getType(), copy.getType());
+    }
+
+    @Test
+    public void whenCopyingStart_theoreticalTimesShouldBeTheSame() {
+        JobActivity copy = (JobActivity) activity.duplicate();
+        assertEquals(1., copy.getTheoreticalEarliestOperationStartTime(), 0.01);
+        assertEquals(2., copy.getTheoreticalLatestOperationStartTime(), 0.01);
+    }
+
+    @Test
+    public void whenCopyingStart_locationShouldBeTheSame() {
+        JobActivity copy = (JobActivity) activity.duplicate();
+        assertEquals("loc", copy.getLocation().getId());
+    }
+
+    @Test
+    public void whenCopyingStart_sizeShouldBeTheSame() {
+        JobActivity copy = (JobActivity) activity.duplicate();
+        assertEquals(activity.getLoadSize(), copy.getLoadSize());
+        assertEquals(activity.getLoadChange(), copy.getLoadChange());
+    }
+
+}
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivityTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivityTest.java
new file mode 100644
index 000000000..ce72fed2a
--- /dev/null
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivityTest.java
@@ -0,0 +1,45 @@
+/*
+ * Licensed to GraphHopper GmbH under one or more contributor
+ * license agreements. See the NOTICE file distributed with this work for
+ * additional information regarding copyright ownership.
+ *
+ * GraphHopper GmbH licenses this file to you under the Apache License,
+ * Version 2.0 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.graphhopper.jsprit.core.problem.solution.route.activity;
+
+import static org.junit.Assert.assertEquals;
+
+import org.junit.Before;
+
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.job.Service;
+
+public class PickupActivityTest extends JobActivityTest {
+
+    @Before
+    public void doBefore() {
+        service = new Service.Builder("service").setLocation(Location.newInstance("loc")).
+                        setTimeWindow(TimeWindow.newInstance(1., 2.)).
+                        setServiceTime(20d).
+                        addSizeDimension(0, 10).addSizeDimension(1, 100).addSizeDimension(2, 1000).build();
+        createActivity(service);
+    }
+
+    @Override
+    public void whenCallingCapacity_itShouldReturnCorrectCapacity() {
+        assertEquals(10, activity.getLoadChange().get(0));
+        assertEquals(100, activity.getLoadChange().get(1));
+        assertEquals(1000, activity.getLoadChange().get(2));
+    }
+
+}
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupServiceTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupServiceTest.java
deleted file mode 100644
index 45128d278..000000000
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupServiceTest.java
+++ /dev/null
@@ -1,91 +0,0 @@
-/*
- * Licensed to GraphHopper GmbH under one or more contributor
- * license agreements. See the NOTICE file distributed with this work for
- * additional information regarding copyright ownership.
- *
- * GraphHopper GmbH licenses this file to you under the Apache License,
- * Version 2.0 (the "License"); you may not use this file except in
- * compliance with the License. You may obtain a copy of the License at
- *
- *       http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.graphhopper.jsprit.core.problem.solution.route.activity;
-
-import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.job.Service;
-import org.junit.Before;
-import org.junit.Test;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-
-public class PickupServiceTest {
-
-    private Service service;
-
-    private PickupServiceDEPRECATED pickup;
-
-    @Before
-    public void doBefore() {
-        service = new Service.Builder("service").setLocation(Location.newInstance("loc")).
-            setTimeWindow(TimeWindow.newInstance(1., 2.)).
-            addSizeDimension(0, 10).addSizeDimension(1, 100).addSizeDimension(2, 1000).build();
-        pickup = new PickupServiceDEPRECATED(service);
-        pickup.setTheoreticalEarliestOperationStartTime(service.getTimeWindow().getStart());
-        pickup.setTheoreticalLatestOperationStartTime(service.getTimeWindow().getEnd());
-    }
-
-    @Test
-    public void whenCallingCapacity_itShouldReturnCorrectCapacity() {
-        assertEquals(10, pickup.getLoadChange().get(0));
-        assertEquals(100, pickup.getLoadChange().get(1));
-        assertEquals(1000, pickup.getLoadChange().get(2));
-    }
-
-
-    @Test
-    public void whenStartIsIniWithEarliestStart_itShouldBeSetCorrectly() {
-        assertEquals(1., pickup.getTheoreticalEarliestOperationStartTime(), 0.01);
-    }
-
-    @Test
-    public void whenStartIsIniWithLatestStart_itShouldBeSetCorrectly() {
-        assertEquals(2., pickup.getTheoreticalLatestOperationStartTime(), 0.01);
-    }
-
-    @Test
-    public void whenSettingArrTime_itShouldBeSetCorrectly() {
-        pickup.setArrTime(4.0);
-        assertEquals(4., pickup.getArrTime(), 0.01);
-    }
-
-    @Test
-    public void whenSettingEndTime_itShouldBeSetCorrectly() {
-        pickup.setEndTime(5.0);
-        assertEquals(5., pickup.getEndTime(), 0.01);
-    }
-
-    @Test
-    public void whenIniLocationId_itShouldBeSetCorrectly() {
-        assertEquals("loc", pickup.getLocation().getId());
-    }
-
-    @Test
-    public void whenCopyingStart_itShouldBeDoneCorrectly() {
-        PickupServiceDEPRECATED copy = (PickupServiceDEPRECATED) pickup.duplicate();
-        assertEquals(1., copy.getTheoreticalEarliestOperationStartTime(), 0.01);
-        assertEquals(2., copy.getTheoreticalLatestOperationStartTime(), 0.01);
-        assertEquals("loc", copy.getLocation().getId());
-        assertEquals(10, copy.getLoadChange().get(0));
-        assertEquals(100, copy.getLoadChange().get(1));
-        assertEquals(1000, copy.getLoadChange().get(2));
-        assertTrue(copy != pickup);
-    }
-
-}
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupShipmentTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupShipmentTest.java
deleted file mode 100644
index 8e28c5b71..000000000
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupShipmentTest.java
+++ /dev/null
@@ -1,100 +0,0 @@
-/*
- * Licensed to GraphHopper GmbH under one or more contributor
- * license agreements. See the NOTICE file distributed with this work for
- * additional information regarding copyright ownership.
- *
- * GraphHopper GmbH licenses this file to you under the Apache License,
- * Version 2.0 (the "License"); you may not use this file except in
- * compliance with the License. You may obtain a copy of the License at
- *
- *       http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.graphhopper.jsprit.core.problem.solution.route.activity;
-
-import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
-import org.junit.Before;
-import org.junit.Test;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-
-public class PickupShipmentTest {
-
-    private PickupShipmentDEPRECATED pickup;
-
-    @Before
-    public void doBefore() {
-        Shipment shipment = Shipment.Builder.newInstance("shipment").setPickupLocation(Location.Builder.newInstance().setId("pickupLoc").build())
-            .setDeliveryLocation(Location.newInstance("deliveryLoc"))
-            .setPickupTimeWindow(TimeWindow.newInstance(1., 2.))
-            .setDeliveryTimeWindow(TimeWindow.newInstance(3., 4.))
-            .addSizeDimension(0, 10).addSizeDimension(1, 100).addSizeDimension(2, 1000).build();
-        pickup = new PickupShipmentDEPRECATED(shipment);
-        pickup.setTheoreticalEarliestOperationStartTime(shipment.getPickupTimeWindow().getStart());
-        pickup.setTheoreticalLatestOperationStartTime(shipment.getPickupTimeWindow().getEnd());
-    }
-
-    @Test
-    public void whenCallingCapacity_itShouldReturnCorrectCapacity() {
-        assertEquals(10, pickup.getLoadChange().get(0));
-        assertEquals(100, pickup.getLoadChange().get(1));
-        assertEquals(1000, pickup.getLoadChange().get(2));
-    }
-
-    @Test
-    public void whenStartIsIniWithEarliestStart_itShouldBeSetCorrectly() {
-        assertEquals(1., pickup.getTheoreticalEarliestOperationStartTime(), 0.01);
-    }
-
-    @Test
-    public void whenStartIsIniWithLatestStart_itShouldBeSetCorrectly() {
-        assertEquals(2., pickup.getTheoreticalLatestOperationStartTime(), 0.01);
-    }
-
-    @Test
-    public void whenSettingArrTime_itShouldBeSetCorrectly() {
-        pickup.setArrTime(4.0);
-        assertEquals(4., pickup.getArrTime(), 0.01);
-    }
-
-    @Test
-    public void whenSettingEndTime_itShouldBeSetCorrectly() {
-        pickup.setEndTime(5.0);
-        assertEquals(5., pickup.getEndTime(), 0.01);
-    }
-
-    @Test
-    public void whenIniLocationId_itShouldBeSetCorrectly() {
-        assertEquals("pickupLoc", pickup.getLocation().getId());
-    }
-
-    @Test
-    public void whenCopyingStart_itShouldBeDoneCorrectly() {
-        PickupShipmentDEPRECATED copy = (PickupShipmentDEPRECATED) pickup.duplicate();
-        assertEquals(1., copy.getTheoreticalEarliestOperationStartTime(), 0.01);
-        assertEquals(2., copy.getTheoreticalLatestOperationStartTime(), 0.01);
-        assertEquals("pickupLoc", copy.getLocation().getId());
-        assertEquals(10, copy.getLoadChange().get(0));
-        assertEquals(100, copy.getLoadChange().get(1));
-        assertEquals(1000, copy.getLoadChange().get(2));
-        assertTrue(copy != pickup);
-    }
-
-
-    @Test
-    public void whenGettingCapacity_itShouldReturnItCorrectly() {
-        Shipment shipment = Shipment.Builder.newInstance("s").setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).setDeliveryLocation(Location.newInstance("delLoc"))
-            .addSizeDimension(0, 10).addSizeDimension(1, 100).build();
-        PickupShipmentDEPRECATED pick = new PickupShipmentDEPRECATED(shipment);
-        assertEquals(10, pick.getLoadChange().get(0));
-        assertEquals(100, pick.getLoadChange().get(1));
-    }
-
-}
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityNEWTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityNEWTest.java
deleted file mode 100644
index 59a378e7b..000000000
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityNEWTest.java
+++ /dev/null
@@ -1,111 +0,0 @@
-/*
- * Licensed to GraphHopper GmbH under one or more contributor
- * license agreements. See the NOTICE file distributed with this work for
- * additional information regarding copyright ownership.
- *
- * GraphHopper GmbH licenses this file to you under the Apache License,
- * Version 2.0 (the "License"); you may not use this file except in
- * compliance with the License. You may obtain a copy of the License at
- *
- *       http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.graphhopper.jsprit.core.problem.solution.route.activity;
-
-import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.job.Service;
-import org.junit.Assert;
-import org.junit.Before;
-import org.junit.Test;
-
-import static org.junit.Assert.*;
-
-
-public class ServiceActivityNEWTest {
-
-    private Service service;
-
-    private ServiceActivityNEW serviceActivity;
-
-    @Before
-    public void doBefore() {
-        service = new Service.Builder("service").setLocation(Location.newInstance("loc")).
-            setTimeWindow(TimeWindow.newInstance(1., 2.)).
-            addSizeDimension(0, 10).addSizeDimension(1, 100).addSizeDimension(2, 1000).build();
-        serviceActivity = ServiceActivityNEW.newInstance(service);
-        serviceActivity.setTheoreticalEarliestOperationStartTime(service.getTimeWindow().getStart());
-        serviceActivity.setTheoreticalLatestOperationStartTime(service.getTimeWindow().getEnd());
-    }
-
-    @Test
-    public void whenCallingCapacity_itShouldReturnCorrectCapacity() {
-        Assert.assertEquals(10, serviceActivity.getLoadChange().get(0));
-        Assert.assertEquals(100, serviceActivity.getLoadChange().get(1));
-        Assert.assertEquals(1000, serviceActivity.getLoadChange().get(2));
-    }
-
-
-    @Test
-    public void whenStartIsIniWithEarliestStart_itShouldBeSetCorrectly() {
-        assertEquals(1., serviceActivity.getTheoreticalEarliestOperationStartTime(), 0.01);
-    }
-
-    @Test
-    public void whenStartIsIniWithLatestStart_itShouldBeSetCorrectly() {
-        assertEquals(2., serviceActivity.getTheoreticalLatestOperationStartTime(), 0.01);
-    }
-
-    @Test
-    public void whenSettingArrTime_itShouldBeSetCorrectly() {
-        serviceActivity.setArrTime(4.0);
-        assertEquals(4., serviceActivity.getArrTime(), 0.01);
-    }
-
-    @Test
-    public void whenSettingEndTime_itShouldBeSetCorrectly() {
-        serviceActivity.setEndTime(5.0);
-        assertEquals(5., serviceActivity.getEndTime(), 0.01);
-    }
-
-    @Test
-    public void whenIniLocationId_itShouldBeSetCorrectly() {
-        assertEquals("loc", serviceActivity.getLocation().getId());
-    }
-
-    @Test
-    public void whenCopyingStart_itShouldBeDoneCorrectly() {
-        ServiceActivityNEW copy = (ServiceActivityNEW) serviceActivity.duplicate();
-        assertEquals(1., copy.getTheoreticalEarliestOperationStartTime(), 0.01);
-        assertEquals(2., copy.getTheoreticalLatestOperationStartTime(), 0.01);
-        assertEquals("loc", copy.getLocation().getId());
-        assertTrue(copy != serviceActivity);
-    }
-
-
-    @Test
-    public void whenTwoDeliveriesHaveTheSameUnderlyingJob_theyAreEqual() {
-        Service s1 = new Service.Builder("s").setLocation(Location.newInstance("loc")).build();
-        Service s2 = new Service.Builder("s").setLocation(Location.newInstance("loc")).build();
-
-        ServiceActivityNEW d1 = ServiceActivityNEW.newInstance(s1);
-        ServiceActivityNEW d2 = ServiceActivityNEW.newInstance(s2);
-
-        assertTrue(d1.equals(d2));
-    }
-
-    @Test
-    public void whenTwoDeliveriesHaveTheDifferentUnderlyingJob_theyAreNotEqual() {
-        Service s1 = new Service.Builder("s").setLocation(Location.newInstance("loc")).build();
-        Service s2 = new Service.Builder("s1").setLocation(Location.newInstance("loc")).build();
-
-        ServiceActivityNEW d1 = ServiceActivityNEW.newInstance(s1);
-        ServiceActivityNEW d2 = ServiceActivityNEW.newInstance(s2);
-
-        assertFalse(d1.equals(d2));
-    }
-}
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityTest.java
new file mode 100644
index 000000000..d68d74b8e
--- /dev/null
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityTest.java
@@ -0,0 +1,45 @@
+/*
+ * Licensed to GraphHopper GmbH under one or more contributor
+ * license agreements. See the NOTICE file distributed with this work for
+ * additional information regarding copyright ownership.
+ *
+ * GraphHopper GmbH licenses this file to you under the Apache License,
+ * Version 2.0 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.graphhopper.jsprit.core.problem.solution.route.activity;
+
+import static org.junit.Assert.assertEquals;
+
+import org.junit.Before;
+
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.job.Service;
+
+public class ServiceActivityTest extends JobActivityTest {
+
+    @Before
+    public void doBefore() {
+        service = new Service.Builder("service").setLocation(Location.newInstance("loc")).
+                        setTimeWindow(TimeWindow.newInstance(1., 2.)).
+                        setServiceTime(20d).
+                        addSizeDimension(0, 10).addSizeDimension(1, 100).addSizeDimension(2, 1000).build();
+        createActivity(service);
+    }
+
+    @Override
+    public void whenCallingCapacity_itShouldReturnCorrectCapacity() {
+        assertEquals(10, activity.getLoadChange().get(0));
+        assertEquals(100, activity.getLoadChange().get(1));
+        assertEquals(1000, activity.getLoadChange().get(2));
+    }
+
+}
diff --git a/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLReaderTest.java b/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLReaderTest.java
index 35112b2c8..e9761898f 100644
--- a/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLReaderTest.java
+++ b/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLReaderTest.java
@@ -17,28 +17,31 @@
  */
 package com.graphhopper.jsprit.io.problem;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertTrue;
+
+import java.io.InputStream;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.List;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.job.Service;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverShipmentDEPRECATED;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupServiceDEPRECATED;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupShipmentDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivityNEW;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivityNEW;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.util.Solutions;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.io.InputStream;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.List;
-
-import static org.junit.Assert.*;
 
 
 public class VrpXMLReaderTest {
@@ -622,16 +625,16 @@ public void testRead_ifReaderIsCalled_itReadsSuccessfullyV2() {
         assertEquals(1, solutions.get(0).getRoutes().size());
         List<TourActivity> activities = solutions.get(0).getRoutes().iterator().next().getTourActivities().getActivities();
         assertEquals(4, activities.size());
-        assertTrue(activities.get(0) instanceof PickupServiceDEPRECATED);
-        assertTrue(activities.get(1) instanceof PickupServiceDEPRECATED);
-        assertTrue(activities.get(2) instanceof PickupShipmentDEPRECATED);
-        assertTrue(activities.get(3) instanceof DeliverShipmentDEPRECATED);
+        assertTrue(activities.get(0) instanceof PickupActivityNEW);
+        assertTrue(activities.get(1) instanceof PickupActivityNEW);
+        assertTrue(activities.get(2) instanceof PickupActivityNEW);
+        assertTrue(activities.get(3) instanceof DeliveryActivityNEW);
     }
 
     @Test
     public void testRead_ifReaderIsCalled_itReadsSuccessfully() {
         new VrpXMLReader(VehicleRoutingProblem.Builder.newInstance(), new ArrayList<VehicleRoutingProblemSolution>())
-            .read(getClass().getResourceAsStream("lui-shen-solution.xml"));
+                .read(getClass().getResourceAsStream("lui-shen-solution.xml"));
         assertTrue(true);
     }
 
