diff --git a/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/GraphStreamViewer.java b/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/GraphStreamViewer.java
index 36b85ab6a..a8c759ee2 100644
--- a/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/GraphStreamViewer.java
+++ b/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/GraphStreamViewer.java
@@ -18,19 +18,13 @@
 package com.graphhopper.jsprit.analysis.toolbox;
 
 
-import java.awt.Color;
-import java.awt.Dimension;
-import java.awt.FlowLayout;
-import java.awt.Font;
-
-import javax.swing.BorderFactory;
-import javax.swing.BoxLayout;
-import javax.swing.JFormattedTextField;
-import javax.swing.JFrame;
-import javax.swing.JLabel;
-import javax.swing.JPanel;
-import javax.swing.WindowConstants;
-
+import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
+import com.graphhopper.jsprit.core.problem.job.Job;
+import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
+import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.*;
+import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
+import com.graphhopper.jsprit.core.util.Time;
 import org.graphstream.graph.Edge;
 import org.graphstream.graph.Graph;
 import org.graphstream.graph.Node;
@@ -39,18 +33,8 @@
 import org.graphstream.ui.view.View;
 import org.graphstream.ui.view.Viewer;
 
-import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
-import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
-import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivity;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivity;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
-import com.graphhopper.jsprit.core.util.Time;
+import javax.swing.*;
+import java.awt.*;
 
 
 public class GraphStreamViewer {
@@ -118,7 +102,7 @@
                 //                    "   shadow-mode: gradient-radial;" +
                 //                    "   shadow-width: 10px; shadow-color: #EEF, #000; shadow-offset: 0px;" +
                 //                    "}" +
-                "edge.shipment {" +
+            "edge.job_relations {" +
                 "	fill-color: #999;" +
                 "	arrow-size: 6px,3px;" +
                 "}";
@@ -170,7 +154,7 @@
                 "	fill-color: #333;" +
                 "	arrow-size: 6px,3px;" +
                 "}" +
-                "edge.shipment {" +
+            "edge.job_relations {" +
                 "	fill-color: #999;" +
                 "	arrow-size: 6px,3px;" +
                 "}";
@@ -238,7 +222,7 @@ public static ViewPanel createEmbeddedView(Graph graph, double scaling) {
             "	fill-color: #333;" +
             "	arrow-size: 6px,3px;" +
             "}" +
-            "edge.shipment {" +
+        "edge.job_relations {" +
             "	fill-color: #999;" +
             "	arrow-size: 6px,3px;" +
             "}";
@@ -263,7 +247,7 @@ public Center(double x, double y) {
 
     private long renderDelay_in_ms = 0;
 
-    private boolean renderShipments = false;
+    private boolean renderActivityRelations = false;
 
     private Center center;
 
@@ -297,8 +281,14 @@ public GraphStreamViewer setRenderDelay(long ms) {
         return this;
     }
 
+    @Deprecated
     public GraphStreamViewer setRenderShipments(boolean renderShipments) {
-        this.renderShipments = renderShipments;
+        this.renderActivityRelations = renderShipments;
+        return this;
+    }
+
+    public GraphStreamViewer setRenderActivityRelations(boolean renderActivityRelations) {
+        this.renderActivityRelations = renderActivityRelations;
         return this;
     }
 
@@ -329,13 +319,9 @@ public GraphStreamViewer setCameraView(double centerX, double centerY, double zo
 
     public void display() {
         System.setProperty("org.graphstream.ui.renderer", "org.graphstream.ui.j2dviewer.J2DGraphRenderer");
-
         Graph g = createMultiGraph("g");
-
         ViewPanel view = createEmbeddedView(g, scaling);
-
         createJFrame(view, scaling);
-
         render(g, view);
     }
 
@@ -395,12 +381,25 @@ private void render(Graph g, ViewPanel view) {
         }
 
         for (Job j : vrp.getJobs().values()) {
-            if (j instanceof Service) {
-                renderService(g, (Service) j, label);
-            } else if (j instanceof Shipment) {
-                renderShipment(g, (Shipment) j, label, renderShipments);
+            for (JobActivity act : j.getActivityList().getAll()) {
+                renderActivity(g, act);
+                sleep(renderDelay_in_ms);
+            }
+            if (renderActivityRelations) {
+                JobActivity prevAct = j.getActivityList().getAll().get(0);
+                int edgeNumber = 1;
+                for (int i = 1; i < j.getActivityList().size(); i++) {
+                    JobActivity act = j.getActivityList().getAll().get(i);
+                    Edge s = g.addEdge(
+                        makeId(prevAct.getJob().getId(), Integer.toString(edgeNumber)),
+                        makeId(prevAct.getJob().getId(), Integer.toString(prevAct.getIndex())),
+                        makeId(prevAct.getJob().getId(), Integer.toString(act.getIndex())),
+                        true);
+                    s.addAttribute("ui.class", "job_relations");
+                    prevAct = act;
+                    edgeNumber++;
+                }
             }
-            sleep(renderDelay_in_ms);
         }
 
         if (solution != null) {
@@ -414,6 +413,37 @@ private void render(Graph g, ViewPanel view) {
 
     }
 
+    private Node renderActivity(Graph g, JobActivity act) {
+        Node n = g.addNode(makeId(act.getJob().getId(), Integer.toString(act.getIndex())));
+        setLabel(n, act);
+        n.addAttribute("x", act.getLocation().getCoordinate().getX());
+        n.addAttribute("y", act.getLocation().getCoordinate().getY());
+        n.setAttribute("ui.class", getType(act));
+        return n;
+    }
+
+    private void setLabel(Node n, JobActivity act) {
+        if (label.equals(Label.ID)) {
+            n.addAttribute("ui.label", act.getJob().getId());
+        } else if (label.equals(Label.ACTIVITY)) {
+            n.addAttribute("ui.label", act.getType());
+        } else if (label.equals(Label.JOB_NAME)) {
+            n.addAttribute("ui.label", act.getJob().getName());
+        } else if (label.equals(Label.ARRIVAL_TIME)) {
+            n.addAttribute("ui.label", Time.parseSecondsToTime(act.getArrTime()));
+        } else if (label.equals(Label.DEPARTURE_TIME)) {
+            n.addAttribute("ui.label", Time.parseSecondsToTime(act.getEndTime()));
+        }
+
+    }
+
+    private String getType(JobActivity act) {
+        if (act instanceof PickupActivity) return "pickup";
+        if (act instanceof DeliveryActivity) return "delivery";
+        if (act instanceof ExchangeActivity) return "exchange";
+        return null;
+    }
+
     private void alignCamera(View view) {
         view.getCamera().setViewCenter(center.x, center.y, 0);
         view.getCamera().setViewPercent(zoomFactor);
@@ -517,31 +547,7 @@ private Double getSolutionCosts() {
         return 0.0;
     }
 
-    private void renderShipment(Graph g, Shipment shipment, Label label, boolean renderShipments) {
 
-        Node n1 = g.addNode(makeId(shipment.getId(), shipment.getPickupActivity().getLocation().getId()));
-        if (label.equals(Label.ID)) {
-            n1.addAttribute("ui.label", shipment.getId());
-        }
-        n1.addAttribute("x", shipment.getPickupActivity().getLocation().getCoordinate().getX());
-        n1.addAttribute("y", shipment.getPickupActivity().getLocation().getCoordinate().getY());
-        n1.setAttribute("ui.class", "pickup");
-
-        Node n2 = g.addNode(makeId(shipment.getId(), shipment.getDeliveryActivity().getLocation().getId()));
-        if (label.equals(Label.ID)) {
-            n2.addAttribute("ui.label", shipment.getId());
-        }
-        n2.addAttribute("x", shipment.getDeliveryActivity().getLocation().getCoordinate().getX());
-        n2.addAttribute("y", shipment.getDeliveryActivity().getLocation().getCoordinate().getY());
-        n2.setAttribute("ui.class", "delivery");
-
-        if (renderShipments) {
-            Edge s = g.addEdge(shipment.getId(), makeId(shipment.getId(), shipment.getPickupActivity().getLocation().getId()),
-                    makeId(shipment.getId(), shipment.getDeliveryActivity().getLocation().getId()), true);
-            s.addAttribute("ui.class", "shipment");
-        }
-
-    }
 
     private void sleep(long renderDelay_in_ms2) {
         try {
@@ -552,20 +558,7 @@ private void sleep(long renderDelay_in_ms2) {
         }
     }
 
-    private void renderService(Graph g, Service service, Label label) {
-        Node n = g.addNode(makeId(service.getId(), service.getActivity().getLocation().getId()));
-        if (label.equals(Label.ID)) {
-            n.addAttribute("ui.label", service.getId());
-        }
-        n.addAttribute("x", service.getActivity().getLocation().getCoordinate().getX());
-        n.addAttribute("y", service.getActivity().getLocation().getCoordinate().getY());
-        if (service.getType().equals("pickup")) {
-            n.setAttribute("ui.class", "pickup");
-        }
-        if (service.getType().equals("delivery")) {
-            n.setAttribute("ui.class", "delivery");
-        }
-    }
+
 
     private String makeId(String id, String locationId) {
         return id + "_" + locationId;
@@ -577,7 +570,6 @@ private void renderVehicle(Graph g, Vehicle vehicle, Label label) {
         if (label.equals(Label.ID)) {
             vehicleStart.addAttribute("ui.label", "depot");
         }
-//		if(label.equals(Label.ACTIVITY)) n.addAttribute("ui.label", "start");
         vehicleStart.addAttribute("x", vehicle.getStartLocation().getCoordinate().getX());
         vehicleStart.addAttribute("y", vehicle.getStartLocation().getCoordinate().getY());
         vehicleStart.setAttribute("ui.class", "depot");
@@ -602,27 +594,16 @@ private void renderRoute(Graph g, VehicleRoute route, int routeId, long renderDe
             n.addAttribute("ui.label", "start");
         }
         for (TourActivity act : route.getActivities()) {
-            Job job = ((JobActivity) act).getJob();
-            String currIdentifier = makeId(job.getId(), act.getLocation().getId());
-            if (label.equals(Label.ACTIVITY)) {
-                Node actNode = g.getNode(currIdentifier);
-                actNode.addAttribute("ui.label", act.getName());
-            } else if (label.equals(Label.JOB_NAME)) {
-                Node actNode = g.getNode(currIdentifier);
-                actNode.addAttribute("ui.label", job.getName());
-            } else if (label.equals(Label.ARRIVAL_TIME)) {
-                Node actNode = g.getNode(currIdentifier);
-                actNode.addAttribute("ui.label", Time.parseSecondsToTime(act.getArrTime()));
-            } else if (label.equals(Label.DEPARTURE_TIME)) {
-                Node actNode = g.getNode(currIdentifier);
-                actNode.addAttribute("ui.label", Time.parseSecondsToTime(act.getEndTime()));
+            JobActivity jobActivity = (JobActivity) act;
+            Job job = jobActivity.getJob();
+            String currIdentifier = makeId(job.getId(), Integer.toString(act.getIndex()));
+            Node thisNode = g.getNode(currIdentifier);
+            if (thisNode == null) {
+                thisNode = renderActivity(g, jobActivity);
             }
+            setLabel(thisNode, jobActivity);
             g.addEdge(makeEdgeId(routeId, vehicle_edgeId), prevIdentifier, currIdentifier, true);
-            if (act instanceof PickupActivity) {
-                g.getNode(currIdentifier).addAttribute("ui.class", "pickupInRoute");
-            } else if (act instanceof DeliveryActivity) {
-                g.getNode(currIdentifier).addAttribute("ui.class", "deliveryInRoute");
-            }
+            setAttribute(act, thisNode);
             prevIdentifier = currIdentifier;
             vehicle_edgeId++;
             sleep(renderDelay_in_ms);
@@ -633,11 +614,17 @@ private void renderRoute(Graph g, VehicleRoute route, int routeId, long renderDe
         }
     }
 
+    private void setAttribute(TourActivity act, Node thisNode) {
+        if (act instanceof PickupActivity) {
+            thisNode.addAttribute("ui.class", "pickupInRoute");
+        } else if (act instanceof DeliveryActivity) {
+            thisNode.addAttribute("ui.class", "deliveryInRoute");
+        } else thisNode.addAttribute("ui.class", "pickupInRoute");
+    }
+
     private String makeEdgeId(int routeId, int vehicle_edgeId) {
         return Integer.valueOf(routeId).toString() + "." + Integer.valueOf(vehicle_edgeId).toString();
     }
 
-    //	public void saveAsPNG(String filename){
-    //
-    //	}
+
 }
diff --git a/jsprit-analysis/src/test/java/com/graphhopper/jsprit/analysis/toolbox/GraphStreamViewerTest.java b/jsprit-analysis/src/test/java/com/graphhopper/jsprit/analysis/toolbox/GraphStreamViewerTest.java
new file mode 100644
index 000000000..d5ebc5fe8
--- /dev/null
+++ b/jsprit-analysis/src/test/java/com/graphhopper/jsprit/analysis/toolbox/GraphStreamViewerTest.java
@@ -0,0 +1,100 @@
+/*
+ * Licensed to GraphHopper GmbH under one or more contributor
+ * license agreements. See the NOTICE file distributed with this work for
+ * additional information regarding copyright ownership.
+ *
+ * GraphHopper GmbH licenses this file to you under the Apache License,
+ * Version 2.0 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.graphhopper.jsprit.analysis.toolbox;
+
+import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
+import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
+import com.graphhopper.jsprit.core.problem.job.Break;
+import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
+import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
+import com.graphhopper.jsprit.core.util.Solutions;
+import org.junit.Ignore;
+import org.junit.Test;
+
+/**
+ * Created by schroeder on 18/11/16.
+ */
+@Ignore
+public class GraphStreamViewerTest {
+
+    @Test
+    public void testPlotCustomJob() {
+        VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0, 50).build();
+        Vehicle vehicle = VehicleImpl.Builder.newInstance("vehicle").setType(type).setBreak(Break.Builder.newInstance("myBreak").addTimeWindow(5, 10).build()).setStartLocation(Location.newInstance(0, 0))
+            .build();
+        CustomJob cj = CustomJob.Builder.newInstance("job")
+            .addPickup(Location.newInstance(10, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).build())
+            .addPickup(Location.newInstance(5, 0), SizeDimension.Builder.newInstance().addDimension(0, 2).build())
+            .addDelivery(Location.newInstance(20, 0), SizeDimension.Builder.newInstance().addDimension(0, 3).build())
+            .build();
+        VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().setFleetSize(VehicleRoutingProblem.FleetSize.FINITE).addJob(cj).addVehicle(vehicle).build();
+        VehicleRoutingProblemSolution solution = Solutions.bestOf(Jsprit.createAlgorithm(vrp).searchSolutions());
+        new GraphStreamViewer(vrp, solution).display();
+    }
+
+    @Test
+    public void testPlotCustomJobSolution() {
+        VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0, 3).build();
+        Vehicle vehicle = VehicleImpl.Builder.newInstance("vehicle").setStartLocation(Location.newInstance(0, 0))
+            .setType(type).build();
+        CustomJob cj = CustomJob.Builder.newInstance("job")
+            .addPickup(Location.newInstance(10, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).build())
+            .addPickup(Location.newInstance(-5, 4), SizeDimension.Builder.newInstance().addDimension(0, 2).build())
+            .addDelivery(Location.newInstance(20, 10), SizeDimension.Builder.newInstance().addDimension(0, 3).build())
+            .build();
+        VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(cj).addVehicle(vehicle).build();
+        VehicleRoutingProblemSolution solution = Solutions.bestOf(Jsprit.createAlgorithm(vrp).searchSolutions());
+        new Plotter(vrp, solution).plot("output/plotSolution", "plot");
+    }
+
+    @Test
+    public void testPlotWithExchange() {
+        VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0, 3).addCapacityDimension(1, 3).build();
+        Vehicle vehicle = VehicleImpl.Builder.newInstance("vehicle").setStartLocation(Location.newInstance(0, 0))
+            .setType(type).build();
+        CustomJob cj = CustomJob.Builder.newInstance("job")
+            .addPickup(Location.newInstance(10, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 1).build())
+            .addExchange(Location.newInstance(-5, 4), SizeDimension.Builder.newInstance().addDimension(0, -1).addDimension(1, 1).build())
+            .addDelivery(Location.newInstance(20, 10), SizeDimension.Builder.newInstance().addDimension(0, 3).build())
+            .build();
+        VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(cj).addVehicle(vehicle).build();
+        VehicleRoutingProblemSolution solution = Solutions.bestOf(Jsprit.createAlgorithm(vrp).searchSolutions());
+        new Plotter(vrp).plotJobRelations(true).plot("output/plotExchange", "plot");
+        new Plotter(vrp, solution).plot("output/plotSolution", "plot");
+    }
+
+    @Test
+    public void testPlotWithShipments() {
+        VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0, 3).build();
+        Vehicle vehicle = VehicleImpl.Builder.newInstance("vehicle").setStartLocation(Location.newInstance(0, 0))
+            .setType(type).build();
+        Shipment shipment = Shipment.Builder.newInstance("shipment").setPickupLocation(Location.newInstance(-5, 4))
+            .addSizeDimension(0, 2).setDeliveryLocation(Location.newInstance(20, 10)).build();
+        VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(shipment).addVehicle(vehicle).build();
+        VehicleRoutingProblemSolution solution = Solutions.bestOf(Jsprit.createAlgorithm(vrp).searchSolutions());
+        new Plotter(vrp).plotJobRelations(true).plot("output/plotJobs", "plot");
+        new Plotter(vrp, solution).plot("output/plotSolution", "plot");
+    }
+}
