diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceDeliveriesFirstConstraint.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceDeliveriesFirstConstraint.java
index 1ed7d4e0c..418f7a574 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceDeliveriesFirstConstraint.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceDeliveriesFirstConstraint.java
@@ -17,9 +17,14 @@
  */
 package com.graphhopper.jsprit.core.problem.constraint;
 
+import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverServiceDEPRECATED;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverShipmentDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivityNEW;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivityNEW;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupServiceDEPRECATED;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupShipmentDEPRECATED;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.ServiceActivityNEW;
@@ -29,33 +34,96 @@
 
     @Override
     public ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prevAct, TourActivity newAct, TourActivity nextAct, double prevActDepTime) {
-        if (newAct instanceof PickupServiceDEPRECATED && nextAct instanceof DeliverServiceDEPRECATED) {
+        // ConstraintsStatus oldRes = old(prevAct, newAct, nextAct);
+        ConstraintsStatus newRes = newMethod(prevAct, newAct, nextAct);
+        // if (oldRes != newRes) {
+        // newRes = newMethod(prevAct, newAct, nextAct);
+        // }
+        // System.out.format("%14s (%4s) > %14s (%4s) > %14s (%4s) ====> %20s :
+        // %20s (%4s)\n",
+        // prevAct.getName(), isShipment(prevAct),
+        // newAct.getName(), isShipment(newAct),
+        // nextAct.getName(), isShipment(nextAct),
+        // oldRes, newRes, (oldRes == newRes));
+        return newRes;
+    }
+
+    protected ConstraintsStatus newMethod(TourActivity prevAct, TourActivity newAct,
+                    TourActivity nextAct) {
+        if (isShipment(newAct)) {
+            // The new activity is a shipment
+            if (nextAct instanceof DeliveryActivityNEW && isService(nextAct)) {
+                // Next activity can't be a service delivery
+                return ConstraintsStatus.NOT_FULFILLED;
+            }
+        } else {
+            // The new activity is a service
+            if (newAct instanceof PickupActivityNEW || newAct instanceof ServiceActivityNEW) {
+                // The new activity is a pickup or a service
+                if (nextAct instanceof DeliveryActivityNEW && isService(nextAct)) {
+                    // Next activity can't be a service delivera
+                    return ConstraintsStatus.NOT_FULFILLED;
+                }
+            } else if (newAct instanceof DeliveryActivityNEW) {
+                // The new activity is a delivery
+                if (prevAct instanceof PickupActivityNEW || prevAct instanceof ServiceActivityNEW
+                                || (prevAct instanceof DeliveryActivityNEW
+                                                && isShipment(prevAct))) {
+                    // The previous activity can't be a pickup or service (of
+                    // any type of Job), nor a shipment delivery
+                    // (Only service delivery.)
+                    return ConstraintsStatus.NOT_FULFILLED_BREAK;
+                }
+            }
+        }
+
+        return ConstraintsStatus.FULFILLED;
+    }
+
+    protected boolean isShipment(TourActivity newAct) {
+        return newAct instanceof JobActivity && ((JobActivity) newAct).getJob() instanceof Shipment;
+    }
+
+    protected boolean isService(TourActivity newAct) {
+        return newAct instanceof JobActivity && ((JobActivity) newAct).getJob() instanceof Service;
+    }
+
+    protected ConstraintsStatus old(TourActivity prevAct, TourActivity newAct,
+                    TourActivity nextAct) {
+        if (newAct instanceof PickupServiceDEPRECATED
+                        && nextAct instanceof DeliverServiceDEPRECATED) {
             return ConstraintsStatus.NOT_FULFILLED;
         }
         if (newAct instanceof ServiceActivityNEW && nextAct instanceof DeliverServiceDEPRECATED) {
             return ConstraintsStatus.NOT_FULFILLED;
         }
-        if (newAct instanceof DeliverServiceDEPRECATED && prevAct instanceof PickupServiceDEPRECATED) {
+        if (newAct instanceof DeliverServiceDEPRECATED
+                        && prevAct instanceof PickupServiceDEPRECATED) {
             return ConstraintsStatus.NOT_FULFILLED_BREAK;
         }
         if (newAct instanceof DeliverServiceDEPRECATED && prevAct instanceof ServiceActivityNEW) {
             return ConstraintsStatus.NOT_FULFILLED_BREAK;
         }
 
-        if (newAct instanceof DeliverServiceDEPRECATED && prevAct instanceof PickupShipmentDEPRECATED) {
+        if (newAct instanceof DeliverServiceDEPRECATED
+                        && prevAct instanceof PickupShipmentDEPRECATED) {
             return ConstraintsStatus.NOT_FULFILLED_BREAK;
         }
-        if (newAct instanceof DeliverServiceDEPRECATED && prevAct instanceof DeliverShipmentDEPRECATED) {
+        if (newAct instanceof DeliverServiceDEPRECATED
+                        && prevAct instanceof DeliverShipmentDEPRECATED) {
             return ConstraintsStatus.NOT_FULFILLED_BREAK;
         }
-        if (newAct instanceof PickupShipmentDEPRECATED && nextAct instanceof DeliverServiceDEPRECATED) {
+        if (newAct instanceof PickupShipmentDEPRECATED
+                        && nextAct instanceof DeliverServiceDEPRECATED) {
             return ConstraintsStatus.NOT_FULFILLED;
         }
-        if (newAct instanceof DeliverShipmentDEPRECATED && nextAct instanceof DeliverServiceDEPRECATED) {
+        if (newAct instanceof DeliverShipmentDEPRECATED
+                        && nextAct instanceof DeliverServiceDEPRECATED) {
             return ConstraintsStatus.NOT_FULFILLED;
         }
 
         return ConstraintsStatus.FULFILLED;
     }
 
+
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java
index 4fe635405..ce6b7eb40 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java
@@ -32,6 +32,7 @@
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.AbstractActivityNEW;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 
@@ -172,7 +173,7 @@ private static void printVerbose(PrintWriter out, VehicleRoutingProblem problem,
             out.format("+---------+----------------------+-----------------------+-----------------+-----------------+-----------------+-----------------+%n");
             double costs = 0;
             out.format(leftAlgin, routeNu, getVehicleString(route), route.getStart().getName(), "-", "undef", Math.round(route.getStart().getEndTime()),
-                    Math.round(costs));
+                            Math.round(costs));
             TourActivity prevAct = route.getStart();
             for (TourActivity act : route.getActivities()) {
                 String jobId;
@@ -181,20 +182,23 @@ private static void printVerbose(PrintWriter out, VehicleRoutingProblem problem,
                 } else {
                     jobId = "-";
                 }
+                String type = (act instanceof AbstractActivityNEW)
+                                ? ((AbstractActivityNEW) act).getType() : act.getName();
                 double c = problem.getTransportCosts().getTransportCost(prevAct.getLocation(), act.getLocation(), prevAct.getEndTime(), route.getDriver(),
-                        route.getVehicle());
+                                route.getVehicle());
                 c += problem.getActivityCosts().getActivityCost(act, act.getArrTime(), route.getDriver(), route.getVehicle());
                 costs += c;
-                out.format(leftAlgin, routeNu, getVehicleString(route), act.getName(), jobId, Math.round(act.getArrTime()),
-                        Math.round(act.getEndTime()), Math.round(costs));
+                out.format(leftAlgin, routeNu, getVehicleString(route), type, jobId,
+                                Math.round(act.getArrTime()),
+                                Math.round(act.getEndTime()), Math.round(costs));
                 prevAct = act;
             }
             double c = problem.getTransportCosts().getTransportCost(prevAct.getLocation(), route.getEnd().getLocation(), prevAct.getEndTime(),
-                    route.getDriver(), route.getVehicle());
+                            route.getDriver(), route.getVehicle());
             c += problem.getActivityCosts().getActivityCost(route.getEnd(), route.getEnd().getArrTime(), route.getDriver(), route.getVehicle());
             costs += c;
             out.format(leftAlgin, routeNu, getVehicleString(route), route.getEnd().getName(), "-", Math.round(route.getEnd().getArrTime()), "undef",
-                    Math.round(costs));
+                            Math.round(costs));
             routeNu++;
         }
         out.format("+--------------------------------------------------------------------------------------------------------------------------------+%n");
@@ -216,8 +220,8 @@ private static String getVehicleString(VehicleRoute route) {
 
     private static Map<Class<? extends Job>, Long> getNuOfJobs(VehicleRoutingProblem problem) {
         return problem.getJobs().values().stream()
-                .map(j -> (Class<? extends Job>) j.getClass())
-                .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));
+                        .map(j -> (Class<? extends Job>) j.getClass())
+                        .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));
     }
 
 }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/TestVehicleRoute.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/TestVehicleRoute.java
index e81da743f..9fef1cb48 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/TestVehicleRoute.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/TestVehicleRoute.java
@@ -31,7 +31,7 @@
 import com.graphhopper.jsprit.core.problem.job.Delivery;
 import com.graphhopper.jsprit.core.problem.job.Pickup;
 import com.graphhopper.jsprit.core.problem.job.Service;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverServiceDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivityNEW;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupServiceDEPRECATED;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.ServiceActivityNEW;
@@ -335,7 +335,7 @@ public void whenAddingDelivery_itShouldBeTreatedAsDelivery() {
 
         TourActivity act = route.getActivities().get(0);
         assertEquals("delivery.delivery", act.getName());
-        assertTrue(act instanceof DeliverServiceDEPRECATED);
+        assertTrue(act instanceof DeliveryActivityNEW);
         assertTrue(((JobActivity) act).getJob() instanceof Delivery);
 
     }
@@ -349,7 +349,7 @@ public void whenAddingDelivery_itShouldBeAdded() {
 
         TourActivity act = route.getActivities().get(0);
         assertEquals("delivery.delivery", act.getName());
-        assertTrue(act instanceof DeliverServiceDEPRECATED);
+        assertTrue(act instanceof DeliveryActivityNEW);
         assertTrue(((JobActivity) act).getJob() instanceof Delivery);
 
     }
