diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyser.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyser.java
index 9b72f12eb..40cfe5642 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyser.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyser.java
@@ -18,8 +18,20 @@
 
 package com.graphhopper.jsprit.core.analysis;
 
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Set;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import com.graphhopper.jsprit.core.algorithm.VariablePlusFixedSolutionCostCalculatorFactory;
-import com.graphhopper.jsprit.core.algorithm.state.*;
+import com.graphhopper.jsprit.core.algorithm.state.InternalStates;
+import com.graphhopper.jsprit.core.algorithm.state.StateId;
+import com.graphhopper.jsprit.core.algorithm.state.StateManager;
+import com.graphhopper.jsprit.core.algorithm.state.StateUpdater;
+import com.graphhopper.jsprit.core.algorithm.state.UpdateActivityTimes;
+import com.graphhopper.jsprit.core.algorithm.state.UpdateVariableCosts;
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.cost.TransportDistance;
@@ -28,14 +40,19 @@
 import com.graphhopper.jsprit.core.problem.solution.SolutionCostCalculator;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.*;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.ActivityVisitor;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverServiceDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverShipmentDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivityNEW;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.End;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivityNEW;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupServiceDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupShipmentDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.ServiceActivityNEW;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.Start;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.util.ActivityTimeTracker;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.util.HashMap;
-import java.util.Map;
-import java.util.Set;
 
 /**
  * Calculates a set of statistics for a solution.
@@ -113,13 +130,13 @@ public void visit(TourActivity activity) {
             if (activity instanceof PickupActivityNEW) {
                 pickupCounter++;
                 pickedUp = Capacity.addup(pickedUp, ((PickupActivityNEW) activity).getJob().getSize());
-                if (activity instanceof PickupService) {
+                if (activity instanceof PickupServiceDEPRECATED) {
                     deliverAtEndCounter++;
                 }
             } else if (activity instanceof DeliveryActivityNEW) {
                 deliveryCounter++;
                 delivered = Capacity.addup(delivered, ((DeliveryActivityNEW) activity).getJob().getSize());
-                if (activity instanceof DeliverService) {
+                if (activity instanceof DeliverServiceDEPRECATED) {
                     pickupAtBeginningCounter++;
                 }
             }
@@ -144,7 +161,7 @@ public void finish() {
 
         private final StateManager stateManager;
 
-        private Map<String, PickupShipment> openShipments;
+        private Map<String, PickupShipmentDEPRECATED> openShipments;
 
         private VehicleRoute route;
 
@@ -163,7 +180,7 @@ private BackhaulAndShipmentUpdater(StateId backhaul_id, StateId shipment_id, Sta
         @Override
         public void begin(VehicleRoute route) {
             this.route = route;
-            openShipments = new HashMap<String, PickupShipment>();
+            openShipments = new HashMap<String, PickupShipmentDEPRECATED>();
             pickupOccured = false;
             shipmentConstraintOnRouteViolated = false;
             backhaulConstraintOnRouteViolated = false;
@@ -172,30 +189,34 @@ public void begin(VehicleRoute route) {
         @Override
         public void visit(TourActivity activity) {
             //shipment
-            if (activity instanceof PickupShipment) {
-                openShipments.put(((PickupShipment) activity).getJob().getId(), (PickupShipment) activity);
-            } else if (activity instanceof DeliverShipment) {
-                String jobId = ((DeliverShipment) activity).getJob().getId();
+            if (activity instanceof PickupShipmentDEPRECATED) {
+                openShipments.put(((PickupShipmentDEPRECATED) activity).getJob().getId(), (PickupShipmentDEPRECATED) activity);
+            } else if (activity instanceof DeliverShipmentDEPRECATED) {
+                String jobId = ((DeliverShipmentDEPRECATED) activity).getJob().getId();
                 if (!openShipments.containsKey(jobId)) {
                     //deliverShipment without pickupShipment
                     stateManager.putActivityState(activity, shipment_id, true);
                     shipmentConstraintOnRouteViolated = true;
                 } else {
-                    PickupShipment removed = openShipments.remove(jobId);
+                    PickupShipmentDEPRECATED removed = openShipments.remove(jobId);
                     stateManager.putActivityState(removed, shipment_id, false);
                     stateManager.putActivityState(activity, shipment_id, false);
                 }
-            } else stateManager.putActivityState(activity, shipment_id, false);
+            } else {
+                stateManager.putActivityState(activity, shipment_id, false);
+            }
 
             //backhaul
-            if (activity instanceof DeliverService && pickupOccured) {
+            if (activity instanceof DeliverServiceDEPRECATED && pickupOccured) {
                 stateManager.putActivityState(activity, backhaul_id, true);
                 backhaulConstraintOnRouteViolated = true;
             } else {
-                if (activity instanceof PickupService || activity instanceof ServiceActivityNEW || activity instanceof PickupShipment) {
+                if (activity instanceof PickupServiceDEPRECATED || activity instanceof ServiceActivityNEW || activity instanceof PickupShipmentDEPRECATED) {
                     pickupOccured = true;
                     stateManager.putActivityState(activity, backhaul_id, false);
-                } else stateManager.putActivityState(activity, backhaul_id, false);
+                } else {
+                    stateManager.putActivityState(activity, backhaul_id, false);
+                }
             }
         }
 
@@ -310,16 +331,16 @@ private LastTransportUpdater(StateManager stateManager, VehicleRoutingTransportC
             this.stateManager = stateManager;
             this.transportCost = transportCost;
             this.distanceCalculator = distanceCalculator;
-            this.last_transport_distance_id = last_distance_id;
-            this.last_transport_time_id = last_time_id;
-            this.last_transport_cost_id = last_cost_id;
+            last_transport_distance_id = last_distance_id;
+            last_transport_time_id = last_time_id;
+            last_transport_cost_id = last_cost_id;
         }
 
         @Override
         public void begin(VehicleRoute route) {
             this.route = route;
-            this.prevAct = route.getStart();
-            this.prevActDeparture = route.getDepartureTime();
+            prevAct = route.getStart();
+            prevActDeparture = route.getDepartureTime();
         }
 
         @Override
@@ -377,7 +398,7 @@ private DistanceUpdater(StateId distance_id, StateManager stateManager, Transpor
         public void begin(VehicleRoute route) {
             sum_distance = 0.;
             this.route = route;
-            this.prevAct = route.getStart();
+            prevAct = route.getStart();
         }
 
         @Override
@@ -512,7 +533,7 @@ public SolutionAnalyser(VehicleRoutingProblem vrp, VehicleRoutingProblemSolution
         this.solution = solution;
         this.distanceCalculator = distanceCalculator;
         initialise();
-        this.solutionCostCalculator = new VariablePlusFixedSolutionCostCalculatorFactory(stateManager).createCalculator();
+        solutionCostCalculator = new VariablePlusFixedSolutionCostCalculatorFactory(stateManager).createCalculator();
         refreshStates();
     }
 
@@ -526,13 +547,13 @@ public SolutionAnalyser(VehicleRoutingProblem vrp, VehicleRoutingProblemSolution
     }
 
     private void initialise() {
-        this.stateManager = new StateManager(vrp);
-        this.stateManager.updateTimeWindowStates();
-        this.stateManager.updateLoadStates();
-        this.stateManager.updateSkillStates();
+        stateManager = new StateManager(vrp);
+        stateManager.updateTimeWindowStates();
+        stateManager.updateLoadStates();
+        stateManager.updateSkillStates();
         activityPolicy = ActivityTimeTracker.ActivityPolicy.AS_SOON_AS_TIME_WINDOW_OPENS;
-        this.stateManager.addStateUpdater(new UpdateActivityTimes(vrp.getTransportCosts(), activityPolicy, vrp.getActivityCosts()));
-        this.stateManager.addStateUpdater(new UpdateVariableCosts(vrp.getActivityCosts(), vrp.getTransportCosts(), stateManager));
+        stateManager.addStateUpdater(new UpdateActivityTimes(vrp.getTransportCosts(), activityPolicy, vrp.getActivityCosts()));
+        stateManager.addStateUpdater(new UpdateVariableCosts(vrp.getActivityCosts(), vrp.getTransportCosts(), stateManager));
         waiting_time_id = stateManager.createStateId("waiting-time");
         transport_time_id = stateManager.createStateId("transport-time");
         service_time_id = stateManager.createStateId("service-time");
@@ -573,9 +594,15 @@ private void recalculateSolutionIndicators() {
             cap_violation = Capacity.addup(cap_violation, getCapacityViolation(route));
             fixed_costs += getFixedCosts(route);
             variable_transport_costs += getVariableTransportCosts(route);
-            if (hasSkillConstraintViolation(route)) hasSkillConstraintViolation = true;
-            if (hasShipmentConstraintViolation(route)) hasShipmentConstraintViolation = true;
-            if (hasBackhaulConstraintViolation(route)) hasBackhaulConstraintViolation = true;
+            if (hasSkillConstraintViolation(route)) {
+                hasSkillConstraintViolation = true;
+            }
+            if (hasShipmentConstraintViolation(route)) {
+                hasShipmentConstraintViolation = true;
+            }
+            if (hasBackhaulConstraintViolation(route)) {
+                hasBackhaulConstraintViolation = true;
+            }
             noPickups += getNumberOfPickups(route);
             noPickupsAtBeginning += getNumberOfPickupsAtBeginning(route);
             noDeliveries += getNumberOfDeliveries(route);
@@ -585,7 +612,7 @@ private void recalculateSolutionIndicators() {
             deliveryLoad = Capacity.addup(deliveryLoad, getLoadDelivered(route));
             deliveryLoadAtEnd = Capacity.addup(deliveryLoadAtEnd, getLoadAtEnd(route));
         }
-        total_costs = solutionCostCalculator.getCosts(this.solution);
+        total_costs = solutionCostCalculator.getCosts(solution);
     }
 
     private void clearSolutionIndicators() {
@@ -619,7 +646,7 @@ private void clearSolutionIndicators() {
      * @param newSolution to be analysed
      */
     public void informSolutionChanged(VehicleRoutingProblemSolution newSolution) {
-        this.solution = newSolution;
+        solution = newSolution;
         refreshStates();
     }
 
@@ -628,7 +655,9 @@ public void informSolutionChanged(VehicleRoutingProblemSolution newSolution) {
      * @return load at start location of specified route
      */
     public Capacity getLoadAtBeginning(VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
         return stateManager.getRouteState(route, InternalStates.LOAD_AT_BEGINNING, Capacity.class);
     }
 
@@ -637,7 +666,9 @@ public Capacity getLoadAtBeginning(VehicleRoute route) {
      * @return load at end location of specified route
      */
     public Capacity getLoadAtEnd(VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
         return stateManager.getRouteState(route, InternalStates.LOAD_AT_END, Capacity.class);
     }
 
@@ -646,7 +677,9 @@ public Capacity getLoadAtEnd(VehicleRoute route) {
      * @return max load of specified route, i.e. for each capacity dimension the max value.
      */
     public Capacity getMaxLoad(VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
         return stateManager.getRouteState(route, InternalStates.MAXLOAD, Capacity.class);
     }
 
@@ -657,10 +690,18 @@ public Capacity getMaxLoad(VehicleRoute route) {
      * Returns null if no load can be found.
      */
     public Capacity getLoadRightAfterActivity(TourActivity activity, VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
-        if (activity == null) throw new IllegalArgumentException("activity is missing.");
-        if (activity instanceof Start) return getLoadAtBeginning(route);
-        if (activity instanceof End) return getLoadAtEnd(route);
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
+        if (activity == null) {
+            throw new IllegalArgumentException("activity is missing.");
+        }
+        if (activity instanceof Start) {
+            return getLoadAtBeginning(route);
+        }
+        if (activity instanceof End) {
+            return getLoadAtEnd(route);
+        }
         verifyThatRouteContainsAct(activity, route);
         return stateManager.getActivityState(activity, InternalStates.LOAD, Capacity.class);
     }
@@ -677,16 +718,27 @@ private void verifyThatRouteContainsAct(TourActivity activity, VehicleRoute rout
      * route. If act is End, it returns the load atEnd of specified route.
      */
     public Capacity getLoadJustBeforeActivity(TourActivity activity, VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
-        if (activity == null) throw new IllegalArgumentException("activity is missing.");
-        if (activity instanceof Start) return getLoadAtBeginning(route);
-        if (activity instanceof End) return getLoadAtEnd(route);
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
+        if (activity == null) {
+            throw new IllegalArgumentException("activity is missing.");
+        }
+        if (activity instanceof Start) {
+            return getLoadAtBeginning(route);
+        }
+        if (activity instanceof End) {
+            return getLoadAtEnd(route);
+        }
         verifyThatRouteContainsAct(activity, route);
         Capacity afterAct = stateManager.getActivityState(activity, InternalStates.LOAD, Capacity.class);
         if (afterAct != null && activity.getSize() != null) {
             return Capacity.subtract(afterAct, activity.getSize());
-        } else if (afterAct != null) return afterAct;
-        else return null;
+        } else if (afterAct != null) {
+            return afterAct;
+        } else {
+            return null;
+        }
     }
 
     /**
@@ -694,7 +746,9 @@ public Capacity getLoadJustBeforeActivity(TourActivity activity, VehicleRoute ro
      * @return number of pickups picked up on specified route (without load at beginning)
      */
     public Integer getNumberOfPickups(VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
         return stateManager.getRouteState(route, stateManager.createStateId(PICKUP_COUNT), Integer.class);
     }
 
@@ -703,7 +757,9 @@ public Integer getNumberOfPickups(VehicleRoute route) {
      * @return number of deliveries delivered on specified route (without load at end)
      */
     public Integer getNumberOfDeliveries(VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
         return stateManager.getRouteState(route, stateManager.createStateId(DELIVERY_COUNT), Integer.class);
     }
 
@@ -712,7 +768,9 @@ public Integer getNumberOfDeliveries(VehicleRoute route) {
      * @return picked load (without load at beginning)
      */
     public Capacity getLoadPickedUp(VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
         return stateManager.getRouteState(route, stateManager.createStateId(LOAD_PICKED), Capacity.class);
     }
 
@@ -721,7 +779,9 @@ public Capacity getLoadPickedUp(VehicleRoute route) {
      * @return delivered laod (without load at end)
      */
     public Capacity getLoadDelivered(VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
         return stateManager.getRouteState(route, stateManager.createStateId(LOAD_DELIVERED), Capacity.class);
     }
 
@@ -730,7 +790,9 @@ public Capacity getLoadDelivered(VehicleRoute route) {
      * @return the capacity violation on this route, i.e. maxLoad - vehicleCapacity
      */
     public Capacity getCapacityViolation(VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
         Capacity maxLoad = getMaxLoad(route);
         return Capacity.max(Capacity.Builder.newInstance().build(), Capacity.subtract(maxLoad, route.getVehicle().getType().getCapacityDimensions()));
     }
@@ -742,7 +804,9 @@ public Capacity getCapacityViolation(VehicleRoute route) {
      * [[dimIndex=0][dimValue=0][dimIndex=1][dimValue=4]]
      */
     public Capacity getCapacityViolationAtBeginning(VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
         Capacity atBeginning = getLoadAtBeginning(route);
         return Capacity.max(Capacity.Builder.newInstance().build(), Capacity.subtract(atBeginning, route.getVehicle().getType().getCapacityDimensions()));
     }
@@ -754,7 +818,9 @@ public Capacity getCapacityViolationAtBeginning(VehicleRoute route) {
      * [[dimIndex=0][dimValue=0][dimIndex=1][dimValue=4]]
      */
     public Capacity getCapacityViolationAtEnd(VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
         Capacity atEnd = getLoadAtEnd(route);
         return Capacity.max(Capacity.Builder.newInstance().build(), Capacity.subtract(atEnd, route.getVehicle().getType().getCapacityDimensions()));
     }
@@ -767,8 +833,12 @@ public Capacity getCapacityViolationAtEnd(VehicleRoute route) {
      * [[dimIndex=0][dimValue=0][dimIndex=1][dimValue=4]]
      */
     public Capacity getCapacityViolationAfterActivity(TourActivity activity, VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
-        if (activity == null) throw new IllegalArgumentException("activity is missing.");
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
+        if (activity == null) {
+            throw new IllegalArgumentException("activity is missing.");
+        }
         Capacity afterAct = getLoadRightAfterActivity(activity, route);
         return Capacity.max(Capacity.Builder.newInstance().build(), Capacity.subtract(afterAct, route.getVehicle().getType().getCapacityDimensions()));
     }
@@ -778,7 +848,9 @@ public Capacity getCapacityViolationAfterActivity(TourActivity activity, Vehicle
      * @return time violation of route, i.e. sum of individual activity time window violations.
      */
     public Double getTimeWindowViolation(VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
         return stateManager.getRouteState(route, too_late_id, Double.class);
     }
 
@@ -788,8 +860,12 @@ public Double getTimeWindowViolation(VehicleRoute route) {
      * @return time violation of activity
      */
     public Double getTimeWindowViolationAtActivity(TourActivity activity, VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
-        if (activity == null) throw new IllegalArgumentException("activity is missing.");
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
+        if (activity == null) {
+            throw new IllegalArgumentException("activity is missing.");
+        }
         return Math.max(0, activity.getArrTime() - activity.getTheoreticalLatestOperationStartTime());
     }
 
@@ -799,7 +875,9 @@ public Double getTimeWindowViolationAtActivity(TourActivity activity, VehicleRou
      * activities on the specified route. Returns null if route is null or skill state cannot be found.
      */
     public Boolean hasSkillConstraintViolation(VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
         return stateManager.getRouteState(route, skill_id, Boolean.class);
     }
 
@@ -811,10 +889,18 @@ public Boolean hasSkillConstraintViolation(VehicleRoute route) {
      * found. If specified activity is Start or End, it returns false.
      */
     public Boolean hasSkillConstraintViolationAtActivity(TourActivity activity, VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
-        if (activity == null) throw new IllegalArgumentException("activity is missing.");
-        if (activity instanceof Start) return false;
-        if (activity instanceof End) return false;
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
+        if (activity == null) {
+            throw new IllegalArgumentException("activity is missing.");
+        }
+        if (activity instanceof Start) {
+            return false;
+        }
+        if (activity instanceof End) {
+            return false;
+        }
         verifyThatRouteContainsAct(activity, route);
         return stateManager.getActivityState(activity, skill_id, Boolean.class);
     }
@@ -830,7 +916,9 @@ public Boolean hasSkillConstraintViolationAtActivity(TourActivity activity, Vehi
      * state can be found. In latter case try routeChanged(route).
      */
     public Boolean hasBackhaulConstraintViolation(VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
         return stateManager.getRouteState(route, backhaul_id, Boolean.class);
     }
 
@@ -841,10 +929,18 @@ public Boolean hasBackhaulConstraintViolation(VehicleRoute route) {
      * Null if specified route does not contain specified activity.
      */
     public Boolean hasBackhaulConstraintViolationAtActivity(TourActivity activity, VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
-        if (activity == null) throw new IllegalArgumentException("activity is missing.");
-        if (activity instanceof Start) return false;
-        if (activity instanceof End) return false;
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
+        if (activity == null) {
+            throw new IllegalArgumentException("activity is missing.");
+        }
+        if (activity instanceof Start) {
+            return false;
+        }
+        if (activity instanceof End) {
+            return false;
+        }
         verifyThatRouteContainsAct(activity, route);
         return stateManager.getActivityState(activity, backhaul_id, Boolean.class);
     }
@@ -858,7 +954,9 @@ public Boolean hasBackhaulConstraintViolationAtActivity(TourActivity activity, V
      * @return true if violated, false otherwise. Null if no state can be found or specified route is null.
      */
     public Boolean hasShipmentConstraintViolation(VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
         return stateManager.getRouteState(route, shipment_id, Boolean.class);
     }
 
@@ -872,10 +970,18 @@ public Boolean hasShipmentConstraintViolation(VehicleRoute route) {
      * false. Returns null if either specified activity or route is null or route does not containt activity.
      */
     public Boolean hasShipmentConstraintViolationAtActivity(TourActivity activity, VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
-        if (activity == null) throw new IllegalArgumentException("activity is missing.");
-        if (activity instanceof Start) return false;
-        if (activity instanceof End) return false;
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
+        if (activity == null) {
+            throw new IllegalArgumentException("activity is missing.");
+        }
+        if (activity instanceof Start) {
+            return false;
+        }
+        if (activity instanceof End) {
+            return false;
+        }
         verifyThatRouteContainsAct(activity, route);
         return stateManager.getActivityState(activity, shipment_id, Boolean.class);
     }
@@ -886,7 +992,9 @@ public Boolean hasShipmentConstraintViolationAtActivity(TourActivity activity, V
      * @return operation time of this route, i.e. endTime - startTime of specified route
      */
     public Double getOperationTime(VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
         return route.getEnd().getArrTime() - route.getStart().getEndTime();
     }
 
@@ -896,7 +1004,9 @@ public Double getOperationTime(VehicleRoute route) {
      * Returns null if no waiting time value exists for the specified route
      */
     public Double getWaitingTime(VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
         return stateManager.getRouteState(route, waiting_time_id, Double.class);
     }
 
@@ -905,7 +1015,9 @@ public Double getWaitingTime(VehicleRoute route) {
      * @return total transport time of specified route. Returns null if no time value exists for the specified route.
      */
     public Double getTransportTime(VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
         return stateManager.getRouteState(route, transport_time_id, Double.class);
     }
 
@@ -914,7 +1026,9 @@ public Double getTransportTime(VehicleRoute route) {
      * @return total service time of specified route. Returns null if no time value exists for specified route.
      */
     public Double getServiceTime(VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
         return stateManager.getRouteState(route, service_time_id, Double.class);
     }
 
@@ -924,7 +1038,9 @@ public Double getServiceTime(VehicleRoute route) {
      * vrp.getTransportCosts().getTransportCost(fromId,toId,...)
      */
     public Double getVariableTransportCosts(VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
 
         return stateManager.getRouteState(route, InternalStates.COSTS, Double.class);
     }
@@ -934,7 +1050,9 @@ public Double getVariableTransportCosts(VehicleRoute route) {
      * @return fixed costs of route, i.e. fixed costs of employed vehicle on this route.
      */
     public Double getFixedCosts(VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
         return route.getVehicle().getType().getVehicleCostParams().fix;
     }
 
@@ -946,10 +1064,18 @@ public Double getFixedCosts(VehicleRoute route) {
      * If activity is start, it returns 0.. If it is end, it returns .getVariableTransportCosts(route).
      */
     public Double getVariableTransportCostsAtActivity(TourActivity activity, VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
-        if (activity == null) throw new IllegalArgumentException("activity is missing.");
-        if (activity instanceof Start) return 0.;
-        if (activity instanceof End) return getVariableTransportCosts(route);
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
+        if (activity == null) {
+            throw new IllegalArgumentException("activity is missing.");
+        }
+        if (activity instanceof Start) {
+            return 0.;
+        }
+        if (activity instanceof End) {
+            return getVariableTransportCosts(route);
+        }
         verifyThatRouteContainsAct(activity, route);
         return stateManager.getActivityState(activity, InternalStates.COSTS, Double.class);
     }
@@ -960,10 +1086,18 @@ public Double getVariableTransportCostsAtActivity(TourActivity activity, Vehicle
      * @return transport time at the activity, i.e. the total time spent driving since the start of the route to the specified activity.
      */
     public Double getTransportTimeAtActivity(TourActivity activity, VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
-        if (activity == null) throw new IllegalArgumentException("activity is missing.");
-        if (activity instanceof Start) return 0.;
-        if (activity instanceof End) return getTransportTime(route);
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
+        if (activity == null) {
+            throw new IllegalArgumentException("activity is missing.");
+        }
+        if (activity instanceof Start) {
+            return 0.;
+        }
+        if (activity instanceof End) {
+            return getTransportTime(route);
+        }
         verifyThatRouteContainsAct(activity, route);
         return stateManager.getActivityState(activity, transport_time_id, Double.class);
     }
@@ -997,10 +1131,18 @@ public Double getLastTransportCostAtActivity(TourActivity activity, VehicleRoute
 
 
     private Double getLastTransport(TourActivity activity, VehicleRoute route, StateId id) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
-        if (activity == null) throw new IllegalArgumentException("activity is missing.");
-        if (activity instanceof Start) return 0.;
-        if (activity instanceof End) return stateManager.getRouteState(route, id, Double.class);
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
+        if (activity == null) {
+            throw new IllegalArgumentException("activity is missing.");
+        }
+        if (activity instanceof Start) {
+            return 0.;
+        }
+        if (activity instanceof End) {
+            return stateManager.getRouteState(route, id, Double.class);
+        }
         verifyThatRouteContainsAct(activity, route);
         return stateManager.getActivityState(activity, id, Double.class);
     }
@@ -1011,8 +1153,12 @@ private Double getLastTransport(TourActivity activity, VehicleRoute route, State
      * @return waiting time at activity
      */
     public Double getWaitingTimeAtActivity(TourActivity activity, VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
-        if (activity == null) throw new IllegalArgumentException("activity is missing.");
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
+        if (activity == null) {
+            throw new IllegalArgumentException("activity is missing.");
+        }
         double waitingTime = 0.;
         if (activityPolicy.equals(ActivityTimeTracker.ActivityPolicy.AS_SOON_AS_TIME_WINDOW_OPENS)) {
             waitingTime = Math.max(0, activity.getTheoreticalEarliestOperationStartTime() - activity.getArrTime());
@@ -1025,7 +1171,9 @@ public Double getWaitingTimeAtActivity(TourActivity activity, VehicleRoute route
      * @return total distance of route
      */
     public Double getDistance(VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
         return stateManager.getRouteState(route, distance_id, Double.class);
     }
 
@@ -1034,10 +1182,18 @@ public Double getDistance(VehicleRoute route) {
      * @return distance at activity
      */
     public Double getDistanceAtActivity(TourActivity activity, VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
-        if (activity == null) throw new IllegalArgumentException("activity is missing.");
-        if (activity instanceof Start) return 0.;
-        if (activity instanceof End) return getDistance(route);
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
+        if (activity == null) {
+            throw new IllegalArgumentException("activity is missing.");
+        }
+        if (activity instanceof Start) {
+            return 0.;
+        }
+        if (activity instanceof End) {
+            return getDistance(route);
+        }
         verifyThatRouteContainsAct(activity, route);
         return stateManager.getActivityState(activity, distance_id, Double.class);
     }
@@ -1054,7 +1210,9 @@ public Integer getNumberOfPickups() {
      * @return number of pickups at beginning
      */
     public Integer getNumberOfPickupsAtBeginning(VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
         return stateManager.getRouteState(route, stateManager.createStateId(PICKUP_COUNT_AT_BEGINNING), Integer.class);
     }
 
@@ -1084,7 +1242,9 @@ public Integer getNumberOfDeliveriesAtEnd() {
      * @return number of deliveries at end of specified route
      */
     public Integer getNumberOfDeliveriesAtEnd(VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
         return stateManager.getRouteState(route, stateManager.createStateId(DELIVERY_COUNT_AT_END), Integer.class);
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblem.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblem.java
index 5c2cc5196..c0927d2cc 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblem.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblem.java
@@ -20,6 +20,7 @@
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingActivityCosts;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.cost.WaitingTimeCosts;
+import com.graphhopper.jsprit.core.problem.job.AbstractJob;
 import com.graphhopper.jsprit.core.problem.job.Break;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.job.Service;
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/PickupAndDeliverShipmentLoadActivityLevelConstraint.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/PickupAndDeliverShipmentLoadActivityLevelConstraint.java
index c2333d0e6..6d995398b 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/PickupAndDeliverShipmentLoadActivityLevelConstraint.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/PickupAndDeliverShipmentLoadActivityLevelConstraint.java
@@ -20,8 +20,8 @@
 import com.graphhopper.jsprit.core.algorithm.state.InternalStates;
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverShipment;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupShipment;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverShipmentDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupShipmentDEPRECATED;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.Start;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.state.RouteAndActivityStateGetter;
@@ -60,25 +60,30 @@ public PickupAndDeliverShipmentLoadActivityLevelConstraint(RouteAndActivityState
      */
     @Override
     public ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prevAct, TourActivity newAct, TourActivity nextAct, double prevActDepTime) {
-        if (!(newAct instanceof PickupShipment) && !(newAct instanceof DeliverShipment)) {
+        if (!(newAct instanceof PickupShipmentDEPRECATED) && !(newAct instanceof DeliverShipmentDEPRECATED)) {
             return ConstraintsStatus.FULFILLED;
         }
         Capacity loadAtPrevAct;
         if (prevAct instanceof Start) {
             loadAtPrevAct = stateManager.getRouteState(iFacts.getRoute(), InternalStates.LOAD_AT_BEGINNING, Capacity.class);
-            if (loadAtPrevAct == null) loadAtPrevAct = defaultValue;
+            if (loadAtPrevAct == null) {
+                loadAtPrevAct = defaultValue;
+            }
         } else {
             loadAtPrevAct = stateManager.getActivityState(prevAct, InternalStates.LOAD, Capacity.class);
-            if (loadAtPrevAct == null) loadAtPrevAct = defaultValue;
+            if (loadAtPrevAct == null) {
+                loadAtPrevAct = defaultValue;
+            }
         }
-        if (newAct instanceof PickupShipment) {
+        if (newAct instanceof PickupShipmentDEPRECATED) {
             if (!Capacity.addup(loadAtPrevAct, newAct.getSize()).isLessOrEqual(iFacts.getNewVehicle().getType().getCapacityDimensions())) {
                 return ConstraintsStatus.NOT_FULFILLED;
             }
         }
-        if (newAct instanceof DeliverShipment) {
-            if (!Capacity.addup(loadAtPrevAct, Capacity.invert(newAct.getSize())).isLessOrEqual(iFacts.getNewVehicle().getType().getCapacityDimensions()))
+        if (newAct instanceof DeliverShipmentDEPRECATED) {
+            if (!Capacity.addup(loadAtPrevAct, Capacity.invert(newAct.getSize())).isLessOrEqual(iFacts.getNewVehicle().getType().getCapacityDimensions())) {
                 return ConstraintsStatus.NOT_FULFILLED_BREAK;
+            }
         }
         return ConstraintsStatus.FULFILLED;
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceDeliveriesFirstConstraint.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceDeliveriesFirstConstraint.java
index 0ecca8152..1ed7d4e0c 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceDeliveriesFirstConstraint.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceDeliveriesFirstConstraint.java
@@ -18,35 +18,40 @@
 package com.graphhopper.jsprit.core.problem.constraint;
 
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.*;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverServiceDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverShipmentDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupServiceDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupShipmentDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.ServiceActivityNEW;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 
 public class ServiceDeliveriesFirstConstraint implements HardActivityConstraint {
 
     @Override
     public ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prevAct, TourActivity newAct, TourActivity nextAct, double prevActDepTime) {
-        if (newAct instanceof PickupService && nextAct instanceof DeliverService) {
+        if (newAct instanceof PickupServiceDEPRECATED && nextAct instanceof DeliverServiceDEPRECATED) {
             return ConstraintsStatus.NOT_FULFILLED;
         }
-        if (newAct instanceof ServiceActivityNEW && nextAct instanceof DeliverService) {
+        if (newAct instanceof ServiceActivityNEW && nextAct instanceof DeliverServiceDEPRECATED) {
             return ConstraintsStatus.NOT_FULFILLED;
         }
-        if (newAct instanceof DeliverService && prevAct instanceof PickupService) {
+        if (newAct instanceof DeliverServiceDEPRECATED && prevAct instanceof PickupServiceDEPRECATED) {
             return ConstraintsStatus.NOT_FULFILLED_BREAK;
         }
-        if (newAct instanceof DeliverService && prevAct instanceof ServiceActivityNEW) {
+        if (newAct instanceof DeliverServiceDEPRECATED && prevAct instanceof ServiceActivityNEW) {
             return ConstraintsStatus.NOT_FULFILLED_BREAK;
         }
 
-        if (newAct instanceof DeliverService && prevAct instanceof PickupShipment) {
+        if (newAct instanceof DeliverServiceDEPRECATED && prevAct instanceof PickupShipmentDEPRECATED) {
             return ConstraintsStatus.NOT_FULFILLED_BREAK;
         }
-        if (newAct instanceof DeliverService && prevAct instanceof DeliverShipment) {
+        if (newAct instanceof DeliverServiceDEPRECATED && prevAct instanceof DeliverShipmentDEPRECATED) {
             return ConstraintsStatus.NOT_FULFILLED_BREAK;
         }
-        if (newAct instanceof PickupShipment && nextAct instanceof DeliverService) {
+        if (newAct instanceof PickupShipmentDEPRECATED && nextAct instanceof DeliverServiceDEPRECATED) {
             return ConstraintsStatus.NOT_FULFILLED;
         }
-        if (newAct instanceof DeliverShipment && nextAct instanceof DeliverService) {
+        if (newAct instanceof DeliverShipmentDEPRECATED && nextAct instanceof DeliverServiceDEPRECATED) {
             return ConstraintsStatus.NOT_FULFILLED;
         }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadActivityLevelConstraint.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadActivityLevelConstraint.java
index 5210c9dbb..a106a0e29 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadActivityLevelConstraint.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadActivityLevelConstraint.java
@@ -20,7 +20,11 @@
 import com.graphhopper.jsprit.core.algorithm.state.InternalStates;
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.*;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverServiceDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupServiceDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.ServiceActivityNEW;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.Start;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.state.RouteAndActivityStateGetter;
 
 
@@ -49,22 +53,30 @@ public ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prev
         Capacity prevMaxLoad;
         if (prevAct instanceof Start) {
             futureMaxLoad = stateManager.getRouteState(iFacts.getRoute(), InternalStates.MAXLOAD, Capacity.class);
-            if (futureMaxLoad == null) futureMaxLoad = defaultValue;
+            if (futureMaxLoad == null) {
+                futureMaxLoad = defaultValue;
+            }
             prevMaxLoad = stateManager.getRouteState(iFacts.getRoute(), InternalStates.LOAD_AT_BEGINNING, Capacity.class);
-            if (prevMaxLoad == null) prevMaxLoad = defaultValue;
+            if (prevMaxLoad == null) {
+                prevMaxLoad = defaultValue;
+            }
         } else {
             futureMaxLoad = stateManager.getActivityState(prevAct, InternalStates.FUTURE_MAXLOAD, Capacity.class);
-            if (futureMaxLoad == null) futureMaxLoad = defaultValue;
+            if (futureMaxLoad == null) {
+                futureMaxLoad = defaultValue;
+            }
             prevMaxLoad = stateManager.getActivityState(prevAct, InternalStates.PAST_MAXLOAD, Capacity.class);
-            if (prevMaxLoad == null) prevMaxLoad = defaultValue;
+            if (prevMaxLoad == null) {
+                prevMaxLoad = defaultValue;
+            }
 
         }
-        if (newAct instanceof PickupService || newAct instanceof ServiceActivityNEW) {
+        if (newAct instanceof PickupServiceDEPRECATED || newAct instanceof ServiceActivityNEW) {
             if (!Capacity.addup(newAct.getSize(), futureMaxLoad).isLessOrEqual(iFacts.getNewVehicle().getType().getCapacityDimensions())) {
                 return ConstraintsStatus.NOT_FULFILLED;
             }
         }
-        if (newAct instanceof DeliverService) {
+        if (newAct instanceof DeliverServiceDEPRECATED) {
             if (!Capacity.addup(Capacity.invert(newAct.getSize()), prevMaxLoad).isLessOrEqual(iFacts.getNewVehicle().getType().getCapacityDimensions())) {
                 return ConstraintsStatus.NOT_FULFILLED_BREAK;
             }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ShipmentPickupsFirstConstraint.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ShipmentPickupsFirstConstraint.java
index 849cb8df9..2983f3506 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ShipmentPickupsFirstConstraint.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ShipmentPickupsFirstConstraint.java
@@ -18,18 +18,18 @@
 package com.graphhopper.jsprit.core.problem.constraint;
 
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverShipment;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupShipment;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverShipmentDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupShipmentDEPRECATED;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 
 public class ShipmentPickupsFirstConstraint implements HardActivityConstraint {
 
     @Override
     public ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prevAct, TourActivity newAct, TourActivity nextAct, double prevActDepTime) {
-        if (newAct instanceof DeliverShipment && nextAct instanceof PickupShipment) {
+        if (newAct instanceof DeliverShipmentDEPRECATED && nextAct instanceof PickupShipmentDEPRECATED) {
             return ConstraintsStatus.NOT_FULFILLED;
         }
-        if (newAct instanceof PickupShipment && prevAct instanceof DeliverShipment) {
+        if (newAct instanceof PickupShipmentDEPRECATED && prevAct instanceof DeliverShipmentDEPRECATED) {
             return ConstraintsStatus.NOT_FULFILLED_BREAK;
         }
         return ConstraintsStatus.FULFILLED;
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractJob.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractJob.java
new file mode 100644
index 000000000..4c5accd75
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractJob.java
@@ -0,0 +1,80 @@
+/*
+ * Licensed to GraphHopper GmbH under one or more contributor
+ * license agreements. See the NOTICE file distributed with this work for
+ * additional information regarding copyright ownership.
+ *
+ * GraphHopper GmbH licenses this file to you under the Apache License,
+ * Version 2.0 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.graphhopper.jsprit.core.problem.job;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.InternalActivityMarker;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
+
+/**
+ * Created by schroeder on 14.07.14.
+ */
+public abstract class AbstractJob implements Job {
+
+    private int index;
+
+    protected List<Location> allLocations = new ArrayList<>();
+
+    private List<JobActivity> _activities = new ArrayList<>();
+    private List<JobActivity> unmodifiableActivities = Collections.unmodifiableList(_activities);
+
+    @Override
+    public int getIndex() {
+        return index;
+    }
+
+    public void setIndex(int index) {
+        this.index = index;
+    }
+
+    protected void addLocation(Location location) {
+        if (location != null) {
+            allLocations.add(location);
+        }
+    }
+
+    @Override
+    public List<Location> getAllLocations() {
+        return allLocations;
+    }
+
+    protected abstract void createActivities();
+
+
+    protected void addActivity(JobActivity activity) {
+        if (activity instanceof InternalActivityMarker && !(this instanceof InternalJobMarker)) {
+            throw new IllegalArgumentException("Can't add an internal activity to a non-internal job: " + activity.getClass().getCanonicalName());
+        }
+        if (!activity.getJob().equals(this)) {
+            throw new IllegalArgumentException("The activity " + activity.getName() + " is not associated with this job.");
+        }
+        _activities.add(activity);
+    }
+
+    public List<JobActivity> getActivities() {
+        return unmodifiableActivities;
+    }
+
+
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Break.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Break.java
index 0a73b3986..8f5685e19 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Break.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Break.java
@@ -18,31 +18,21 @@
 package com.graphhopper.jsprit.core.problem.job;
 
 
-import com.graphhopper.jsprit.core.problem.Capacity;
-import com.graphhopper.jsprit.core.problem.Skills;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.BreakActivity;
 
 /**
  * Pickup extends Service and is intended to model a Service where smth is LOADED (i.e. picked up) to a transport unit.
  *
  * @author schroeder
  */
-public class Break extends Service {
+public class Break extends Service implements InternalJobMarker {
 
-    public static class Builder extends Service.Builder<Break> {
+    public static class Builder extends Service.ServiceBuilderBase<Builder> {
 
-        /**
-         * Returns a new instance of builder that builds a pickup.
-         *
-         * @param id the id of the pickup
-         * @return the builder
-         */
-        public static Builder newInstance(String id) {
-            return new Builder(id);
-        }
 
         private boolean variableLocation = true;
 
-        Builder(String id) {
+        public Builder(String id) {
             super(id);
         }
 
@@ -54,13 +44,14 @@ public static Builder newInstance(String id) {
          * @return pickup
          * @throws IllegalStateException if neither locationId nor coordinate has been set
          */
+        @SuppressWarnings("unchecked")
+        @Override
         public Break build() {
             if (location != null) {
                 variableLocation = false;
             }
-            this.setType("break");
-            super.capacity = Capacity.Builder.newInstance().build();
-            super.skills = Skills.Builder.newInstance().build();
+            setType("break");
+            postProcess();
             return new Break(this);
         }
 
@@ -70,7 +61,12 @@ public Break build() {
 
     Break(Builder builder) {
         super(builder);
-        this.variableLocation = builder.variableLocation;
+        variableLocation = builder.variableLocation;
+    }
+
+    @Override
+    protected void createActivities() {
+        addActivity(BreakActivity.newInstance(this));
     }
 
     public boolean hasVariableLocation() {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Delivery.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Delivery.java
index d99e3c3e9..b77ef39dd 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Delivery.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Delivery.java
@@ -17,6 +17,7 @@
  */
 package com.graphhopper.jsprit.core.problem.job;
 
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverServiceDEPRECATED;
 
 /**
  * Delivery extends Service and is intended to model a Service where smth is UNLOADED (i.e. delivered) from a transport unit.
@@ -25,19 +26,10 @@
  */
 public class Delivery extends Service {
 
-    public static class Builder extends Service.Builder<Delivery> {
+    public static class Builder extends Service.ServiceBuilderBase<Builder> {
 
-        /**
-         * Returns a new instance of builder that builds a delivery.
-         *
-         * @param id the id of the delivery
-         * @return the builder
-         */
-        public static Builder newInstance(String id) {
-            return new Builder(id);
-        }
 
-        Builder(String id) {
+        public Builder(String id) {
             super(id);
         }
 
@@ -47,19 +39,27 @@ public static Builder newInstance(String id) {
          * @return delivery
          * @throws IllegalArgumentException if neither locationId nor coord is set
          */
+        @SuppressWarnings("unchecked")
+        @Override
         public Delivery build() {
-            if (location == null) throw new IllegalArgumentException("location is missing");
-            this.setType("delivery");
-            super.capacity = super.capacityBuilder.build();
-            super.skills = super.skillBuilder.build();
+            if (location == null) {
+                throw new IllegalArgumentException("location is missing");
+            }
+            setType("delivery");
+            postProcess();
             return new Delivery(this);
         }
-
     }
 
     Delivery(Builder builder) {
         super(builder);
+    }
 
+    @Override
+    protected void createActivities() {
+        // TODO - Balage1551
+        addActivity(new DeliverServiceDEPRECATED(this));
+//        addActivity(new DeliveryActivityNEW(this, "delivery", getLocation(), getServiceDuration(), getSize()));
     }
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/InternalJobMarker.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/InternalJobMarker.java
new file mode 100644
index 000000000..48346b62c
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/InternalJobMarker.java
@@ -0,0 +1,12 @@
+package com.graphhopper.jsprit.core.problem.job;
+
+/**
+ * Marks internal jobs.
+ *
+ * Note, that the interface is package private, so no internal jobs could be created outside this package.
+ *
+ * @author balage
+ *
+ */
+interface InternalJobMarker {
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Pickup.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Pickup.java
index a30ff92b4..9f5a73699 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Pickup.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Pickup.java
@@ -17,6 +17,7 @@
  */
 package com.graphhopper.jsprit.core.problem.job;
 
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupServiceDEPRECATED;
 
 /**
  * Pickup extends Service and is intended to model a Service where smth is LOADED (i.e. picked up) to a transport unit.
@@ -25,19 +26,9 @@
  */
 public class Pickup extends Service {
 
-    public static class Builder extends Service.Builder<Pickup> {
+    public static class Builder extends Service.ServiceBuilderBase<Builder> {
 
-        /**
-         * Returns a new instance of builder that builds a pickup.
-         *
-         * @param id the id of the pickup
-         * @return the builder
-         */
-        public static Builder newInstance(String id) {
-            return new Builder(id);
-        }
-
-        Builder(String id) {
+        public Builder(String id) {
             super(id);
         }
 
@@ -49,11 +40,14 @@ public static Builder newInstance(String id) {
          * @return pickup
          * @throws IllegalArgumentException if neither locationId nor coordinate has been set
          */
+        @SuppressWarnings("unchecked")
+        @Override
         public Pickup build() {
-            if (location == null) throw new IllegalArgumentException("location is missing");
-            this.setType("pickup");
-            super.capacity = super.capacityBuilder.build();
-            super.skills = super.skillBuilder.build();
+            if (location == null) {
+                throw new IllegalArgumentException("location is missing");
+            }
+            setType("pickup");
+            postProcess();
             return new Pickup(this);
         }
 
@@ -63,4 +57,12 @@ public Pickup build() {
         super(builder);
     }
 
+    @Override
+    protected void createActivities() {
+        // TODO - Balage1551
+        addActivity(new PickupServiceDEPRECATED(this));
+
+//        addActivity(new PickupActivityNEW(this, "pickup", getLocation(), getServiceDuration(), getSize()));
+    }
+
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java
index 80f79bb2f..08c36a28d 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java
@@ -18,12 +18,11 @@
 package com.graphhopper.jsprit.core.problem.job;
 
 import java.util.Collection;
-import java.util.List;
 
-import com.graphhopper.jsprit.core.problem.AbstractJob;
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.Skills;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.ServiceActivityNEW;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindows;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindowsImpl;
@@ -44,27 +43,13 @@
      *
      * @author schroeder
      */
-    public static class Builder<T extends Service> {
+    public abstract static class ServiceBuilderBase<B extends ServiceBuilderBase<B>> {
 
-
-
-
-        /**
-         * Returns a new instance of builder that builds a service.
-         *
-         * @param id
-         *            the id of the service
-         * @return the builder
-         */
-        public static Builder newInstance(String id) {
-            return new Builder(id);
-        }
-
-        private String id;
+        protected String id;
 
         protected String locationId;
 
-        private String type = "service";
+        protected String type = "service";
 
         protected Coordinate coord;
 
@@ -80,21 +65,21 @@ public static Builder newInstance(String id) {
 
         protected Skills skills;
 
-        private String name = "no-name";
+        protected String name = "no-name";
 
         protected Location location;
 
         protected TimeWindowsImpl timeWindows;
 
-		private boolean twAdded = false;
+        protected boolean twAdded = false;
 
-        private int priority = 2;
+        protected int priority = 2;
 
-		Builder(String id){
-			this.id = id;
-			timeWindows = new TimeWindowsImpl();
-			timeWindows.add(timeWindow);
-		}
+        public ServiceBuilderBase(String id) {
+            this.id = id;
+            timeWindows = new TimeWindowsImpl();
+            timeWindows.add(timeWindow);
+        }
 
         /**
          * Protected method to set the type-name of the service.
@@ -104,9 +89,10 @@ public static Builder newInstance(String id) {
          * @param name the name of service
          * @return the builder
          */
-        protected Builder<T> setType(String name) {
-            this.type = name;
-            return this;
+        @SuppressWarnings("unchecked")
+        protected B setType(String name) {
+            type = name;
+            return (B) this;
         }
 
         /**
@@ -115,9 +101,10 @@ public static Builder newInstance(String id) {
          * @param location location
          * @return builder
          */
-        public Builder<T> setLocation(Location location) {
+        @SuppressWarnings("unchecked")
+        public B setLocation(Location location) {
             this.location = location;
-            return this;
+            return (B) this;
         }
 
         /**
@@ -130,11 +117,13 @@ public static Builder newInstance(String id) {
          * @return builder
          * @throws IllegalArgumentException if serviceTime < 0
          */
-        public Builder<T> setServiceTime(double serviceTime) {
-            if (serviceTime < 0)
+        @SuppressWarnings("unchecked")
+        public B setServiceTime(double serviceTime) {
+            if (serviceTime < 0) {
                 throw new IllegalArgumentException("serviceTime must be greater than or equal to zero");
+            }
             this.serviceTime = serviceTime;
-            return this;
+            return (B) this;
         }
 
         /**
@@ -145,70 +134,75 @@ public static Builder newInstance(String id) {
          * @return the builder
          * @throws IllegalArgumentException if dimensionValue < 0
          */
-        public Builder<T> addSizeDimension(int dimensionIndex, int dimensionValue) {
-            if (dimensionValue < 0) throw new IllegalArgumentException("capacity value cannot be negative");
+        @SuppressWarnings("unchecked")
+        public B addSizeDimension(int dimensionIndex, int dimensionValue) {
+            if (dimensionValue < 0) {
+                throw new IllegalArgumentException("capacity value cannot be negative");
+            }
             capacityBuilder.addDimension(dimensionIndex, dimensionValue);
-            return this;
+            return (B) this;
         }
 
-        public Builder<T> setTimeWindow(TimeWindow tw){
-            if(tw == null) throw new IllegalArgumentException("time-window arg must not be null");
-            this.timeWindow = tw;
-            this.timeWindows = new TimeWindowsImpl();
+        @SuppressWarnings("unchecked")
+        public B setTimeWindow(TimeWindow tw) {
+            if(tw == null) {
+                throw new IllegalArgumentException("time-window arg must not be null");
+            }
+            timeWindow = tw;
+            timeWindows = new TimeWindowsImpl();
             timeWindows.add(tw);
-            return this;
+            return (B) this;
         }
 
-        public Builder<T> addTimeWindow(TimeWindow timeWindow) {
-            if(timeWindow == null) throw new IllegalArgumentException("time-window arg must not be null");
+        @SuppressWarnings("unchecked")
+        public B addTimeWindow(TimeWindow timeWindow) {
+            if(timeWindow == null) {
+                throw new IllegalArgumentException("time-window arg must not be null");
+            }
             if(!twAdded){
                 timeWindows = new TimeWindowsImpl();
                 twAdded = true;
             }
             timeWindows.add(timeWindow);
-            return this;
+            return (B) this;
         }
 
-        public Builder<T> addTimeWindow(double earliest, double latest) {
+        public B addTimeWindow(double earliest, double latest) {
             return addTimeWindow(TimeWindow.newInstance(earliest, latest));
         }
 
-        /**
-         * Builds the service.
-         *
-         * @return {@link Service}
-         * @throws IllegalArgumentException if neither locationId nor coordinate is set.
-         */
-        public T build() {
-            if (location == null) throw new IllegalArgumentException("location is missing");
-            this.setType("service");
+
+        protected void postProcess() {
             capacity = capacityBuilder.build();
             skills = skillBuilder.build();
-            return (T) new Service(this);
         }
 
-        public Builder<T> addRequiredSkill(String skill) {
+        @SuppressWarnings("unchecked")
+        public B addRequiredSkill(String skill) {
             skillBuilder.addSkill(skill);
-            return this;
+            return (B) this;
         }
 
-        public Builder<T> setName(String name) {
+        @SuppressWarnings("unchecked")
+        public B setName(String name) {
             this.name = name;
-            return this;
+            return (B) this;
         }
 
-        public Builder<T> addAllRequiredSkills(Skills skills){
+        @SuppressWarnings("unchecked")
+        public B addAllRequiredSkills(Skills skills) {
             for(String s : skills.values()){
                 skillBuilder.addSkill(s);
             }
-            return this;
+            return (B) this;
         }
 
-        public Builder<T> addAllSizeDimensions(Capacity size){
+        @SuppressWarnings("unchecked")
+        public B addAllSizeDimensions(Capacity size) {
             for(int i=0;i<size.getNuOfDimensions();i++){
                 capacityBuilder.addDimension(i,size.get(i));
             }
-            return this;
+            return (B) this;
         }
 
         /**
@@ -219,13 +213,53 @@ public T build() {
          * @param priority
          * @return builder
          */
-        public Builder<T> setPriority(int priority) {
-            if(priority < 1 || priority > 3) throw new IllegalArgumentException("incorrect priority. only 1 = high, 2 = medium and 3 = low is allowed");
+        @SuppressWarnings("unchecked")
+        public B setPriority(int priority) {
+            if(priority < 1 || priority > 3) {
+                throw new IllegalArgumentException("incorrect priority. only 1 = high, 2 = medium and 3 = low is allowed");
+            }
             this.priority = priority;
-            return this;
+            return (B) this;
+        }
+
+        /**
+         * Builds the service.
+         *
+         * @return {@link Service}
+         * @throws IllegalArgumentException
+         *             if neither locationId nor coordinate is set.
+         */
+        public abstract <T extends Service> T build();
+    }
+
+
+    public static class Builder extends ServiceBuilderBase<Builder> {
+
+        public Builder(String id) {
+            super(id);
+        }
+
+        /**
+         * Builds the service.
+         *
+         * @return {@link Service}
+         * @throws IllegalArgumentException
+         *             if neither locationId nor coordinate is set.
+         */
+        @SuppressWarnings("unchecked")
+        @Override
+        public Service build() {
+            if (location == null) {
+                throw new IllegalArgumentException("location is missing");
+            }
+            setType("service");
+            postProcess();
+            return new Service(this);
         }
+
     }
 
+
     private final String id;
 
     private final String type;
@@ -246,7 +280,7 @@ public T build() {
 
     private final int priority;
 
-    Service(Builder builder) {
+    Service(ServiceBuilderBase<?> builder) {
         id = builder.id;
         serviceTime = builder.serviceTime;
         timeWindow = builder.timeWindow;
@@ -255,15 +289,21 @@ public T build() {
         skills = builder.skills;
         name = builder.name;
         location = builder.location;
-		timeWindowManager = builder.timeWindows;
+        timeWindowManager = builder.timeWindows;
         priority = builder.priority;
 
         addLocation(location);
-	}
+        createActivities();
+    }
 
-	public Collection<TimeWindow> getTimeWindows(){
-		return timeWindowManager.getTimeWindows();
-	}
+    @Override
+    protected void createActivities() {
+        addActivity(new ServiceActivityNEW(this, "service", getLocation(), getServiceDuration(), getSize()));
+    }
+
+    public Collection<TimeWindow> getTimeWindows(){
+        return timeWindowManager.getTimeWindows();
+    }
 
     @Override
     public String getId() {
@@ -331,18 +371,23 @@ public int hashCode() {
      */
     @Override
     public boolean equals(Object obj) {
-        if (this == obj)
+        if (this == obj) {
             return true;
-        if (obj == null)
+        }
+        if (obj == null) {
             return false;
-        if (getClass() != obj.getClass())
+        }
+        if (getClass() != obj.getClass()) {
             return false;
+        }
         Service other = (Service) obj;
         if (id == null) {
-            if (other.id != null)
+            if (other.id != null) {
                 return false;
-        } else if (!id.equals(other.id))
+            }
+        } else if (!id.equals(other.id)) {
             return false;
+        }
         return true;
     }
 
@@ -368,6 +413,7 @@ public String getName() {
      *
      * @return priority
      */
+    @Override
     public int getPriority() {
         return priority;
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java
index 915f352ab..0c3eac1c5 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java
@@ -19,10 +19,11 @@
 
 import java.util.Collection;
 
-import com.graphhopper.jsprit.core.problem.AbstractJob;
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.Skills;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverShipmentDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupShipmentDEPRECATED;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindowsImpl;
 
@@ -346,10 +347,6 @@ public Builder setPriority(int priority) {
 
     private final double deliveryServiceTime;
 
-    private final TimeWindow deliveryTimeWindow;
-
-    private final TimeWindow pickupTimeWindow;
-
     private final Capacity capacity;
 
     private final Skills skills;
@@ -369,9 +366,7 @@ public Builder setPriority(int priority) {
     Shipment(Builder builder) {
         id = builder.id;
         pickupServiceTime = builder.pickupServiceTime;
-        pickupTimeWindow = builder.pickupTimeWindow;
         deliveryServiceTime = builder.deliveryServiceTime;
-        deliveryTimeWindow = builder.deliveryTimeWindow;
         capacity = builder.capacity;
         skills = builder.skills;
         name = builder.name;
@@ -383,6 +378,17 @@ public Builder setPriority(int priority) {
 
         addLocation(pickupLocation_);
         addLocation(deliveryLocation_);
+        createActivities();
+    }
+
+    @Override
+    protected void createActivities() {
+        // TODO - Balage1551
+        addActivity(new PickupShipmentDEPRECATED(this));
+        addActivity(new DeliverShipmentDEPRECATED(this));
+
+//        addActivity(new PickupActivityNEW(this, "pickup", getPickupLocation(), getPickupServiceTime(), getSize()));
+//        addActivity(new PickupActivityNEW(this, "delivery", getDeliveryLocation(), getDeliveryServiceTime(), getSize()));
     }
 
     @Override
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivity.java
index 593fc19bb..598ca4d76 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivity.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivity.java
@@ -45,6 +45,13 @@ protected BreakActivity(BreakActivity breakActivity) {
     }
 
 
+
+
+    @Override
+    public Break getJob() {
+        return (Break) super.getJob();
+    }
+
     /* (non-Javadoc)
      * @see java.lang.Object#hashCode()
      */
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DefaultShipmentActivityFactory.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DefaultShipmentActivityFactory.java
index a620dc8de..3c35d2249 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DefaultShipmentActivityFactory.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DefaultShipmentActivityFactory.java
@@ -24,12 +24,12 @@
 
     @Override
     public IndexedActivity createPickup(Shipment shipment) {
-        return new PickupShipment(shipment);
+        return new PickupShipmentDEPRECATED(shipment);
     }
 
     @Override
     public IndexedActivity createDelivery(Shipment shipment) {
-        return new DeliverShipment(shipment);
+        return new DeliverShipmentDEPRECATED(shipment);
     }
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DefaultTourActivityFactory.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DefaultTourActivityFactory.java
index 5033c2f9e..3739d1bbb 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DefaultTourActivityFactory.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DefaultTourActivityFactory.java
@@ -28,11 +28,11 @@
     public IndexedActivity createActivity(Service service) {
         IndexedActivity act;
         if (service instanceof Pickup) {
-            act = new PickupService((Pickup) service);
+            act = new PickupServiceDEPRECATED(service);
         } else if (service instanceof Delivery) {
-            act = new DeliverService((Delivery) service);
+            act = new DeliverServiceDEPRECATED((Delivery) service);
         } else {
-            act = new PickupService(service);
+            act = new PickupServiceDEPRECATED(service);
         }
         return act;
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverService.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverService.java
deleted file mode 100644
index 616997bd8..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverService.java
+++ /dev/null
@@ -1,132 +0,0 @@
-/*
- * Licensed to GraphHopper GmbH under one or more contributor
- * license agreements. See the NOTICE file distributed with this work for
- * additional information regarding copyright ownership.
- *
- * GraphHopper GmbH licenses this file to you under the Apache License,
- * Version 2.0 (the "License"); you may not use this file except in
- * compliance with the License. You may obtain a copy of the License at
- *
- *       http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.graphhopper.jsprit.core.problem.solution.route.activity;
-
-import com.graphhopper.jsprit.core.problem.IndexedActivity;
-import com.graphhopper.jsprit.core.problem.Capacity;
-import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.job.Delivery;
-
-public final class DeliverService extends IndexedActivity implements DeliveryActivityNEW {
-
-    private Delivery delivery;
-
-    private Capacity capacity;
-
-    private double arrTime;
-
-    private double endTime;
-
-    private double theoreticalEarliest = 0;
-
-    private double theoreticalLatest = Double.MAX_VALUE;
-
-    public DeliverService(Delivery delivery) {
-        super();
-        this.delivery = delivery;
-        capacity = Capacity.invert(delivery.getSize());
-    }
-
-    private DeliverService(DeliverService deliveryActivity) {
-        this.delivery = deliveryActivity.getJob();
-        this.arrTime = deliveryActivity.getArrTime();
-        this.endTime = deliveryActivity.getEndTime();
-        capacity = deliveryActivity.getSize();
-        setIndex(deliveryActivity.getIndex());
-        this.theoreticalEarliest = deliveryActivity.getTheoreticalEarliestOperationStartTime();
-        this.theoreticalLatest = deliveryActivity.getTheoreticalLatestOperationStartTime();
-    }
-
-    @Override
-    public String getName() {
-        return delivery.getType();
-    }
-
-    @Override
-    public Location getLocation() {
-        return delivery.getLocation();
-    }
-
-    @Override
-    public void setTheoreticalEarliestOperationStartTime(double earliest) {
-        theoreticalEarliest = earliest;
-    }
-
-    @Override
-    public void setTheoreticalLatestOperationStartTime(double latest) {
-        theoreticalLatest = latest;
-    }
-
-
-    @Override
-    public double getTheoreticalEarliestOperationStartTime() {
-        return theoreticalEarliest;
-    }
-
-    @Override
-    public double getTheoreticalLatestOperationStartTime() {
-        return theoreticalLatest;
-    }
-
-    @Override
-    public double getOperationTime() {
-        return delivery.getServiceDuration();
-    }
-
-    @Override
-    public double getArrTime() {
-        return arrTime;
-    }
-
-    @Override
-    public double getEndTime() {
-        return endTime;
-    }
-
-    @Override
-    public void setArrTime(double arrTime) {
-        this.arrTime = arrTime;
-    }
-
-    @Override
-    public void setEndTime(double endTime) {
-        this.endTime = endTime;
-    }
-
-    @Override
-    public TourActivity duplicate() {
-        return new DeliverService(this);
-    }
-
-    @Override
-    public Delivery getJob() {
-        return delivery;
-    }
-
-    public String toString() {
-        return "[type=" + getName() + "][locationId=" + getLocation().getId()
-            + "][size=" + getSize().toString()
-            + "][twStart=" + Activities.round(getTheoreticalEarliestOperationStartTime())
-            + "][twEnd=" + Activities.round(getTheoreticalLatestOperationStartTime()) + "]";
-    }
-
-    @Override
-    public Capacity getSize() {
-        return capacity;
-    }
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverServiceDEPRECATED.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverServiceDEPRECATED.java
new file mode 100644
index 000000000..f546ef00f
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverServiceDEPRECATED.java
@@ -0,0 +1,34 @@
+/*
+ * Licensed to GraphHopper GmbH under one or more contributor
+ * license agreements. See the NOTICE file distributed with this work for
+ * additional information regarding copyright ownership.
+ *
+ * GraphHopper GmbH licenses this file to you under the Apache License,
+ * Version 2.0 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.graphhopper.jsprit.core.problem.solution.route.activity;
+
+import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.job.Delivery;
+
+public final class DeliverServiceDEPRECATED extends DeliveryActivityNEW {
+
+    public DeliverServiceDEPRECATED(Delivery delivery) {
+        super(delivery, delivery.getName(), delivery.getLocation(), delivery.getServiceDuration(), Capacity.invert(delivery.getSize()));
+    }
+
+    @Override
+    public Delivery getJob() {
+        return (Delivery) super.getJob();
+    }
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverShipment.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverShipment.java
deleted file mode 100644
index e1b668d28..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverShipment.java
+++ /dev/null
@@ -1,132 +0,0 @@
-/*
- * Licensed to GraphHopper GmbH under one or more contributor
- * license agreements. See the NOTICE file distributed with this work for
- * additional information regarding copyright ownership.
- *
- * GraphHopper GmbH licenses this file to you under the Apache License,
- * Version 2.0 (the "License"); you may not use this file except in
- * compliance with the License. You may obtain a copy of the License at
- *
- *       http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.graphhopper.jsprit.core.problem.solution.route.activity;
-
-import com.graphhopper.jsprit.core.problem.IndexedActivity;
-import com.graphhopper.jsprit.core.problem.Capacity;
-import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
-
-public final class DeliverShipment extends IndexedActivity implements DeliveryActivityNEW {
-
-    private Shipment shipment;
-
-    private double endTime;
-
-    private double arrTime;
-
-    private Capacity capacity;
-
-    private double earliest = 0;
-
-    private double latest = Double.MAX_VALUE;
-
-    public DeliverShipment(Shipment shipment) {
-        super();
-        this.shipment = shipment;
-        this.capacity = Capacity.invert(shipment.getSize());
-    }
-
-    private DeliverShipment(DeliverShipment deliveryShipmentActivity) {
-        this.shipment = (Shipment) deliveryShipmentActivity.getJob();
-        this.arrTime = deliveryShipmentActivity.getArrTime();
-        this.endTime = deliveryShipmentActivity.getEndTime();
-        this.capacity = deliveryShipmentActivity.getSize();
-        setIndex(deliveryShipmentActivity.getIndex());
-        this.earliest = deliveryShipmentActivity.getTheoreticalEarliestOperationStartTime();
-        this.latest = deliveryShipmentActivity.getTheoreticalLatestOperationStartTime();
-    }
-
-    @Override
-    public Job getJob() {
-        return shipment;
-    }
-
-    @Override
-    public void setTheoreticalEarliestOperationStartTime(double earliest) {
-        this.earliest = earliest;
-    }
-
-    @Override
-    public void setTheoreticalLatestOperationStartTime(double latest) {
-        this.latest = latest;
-    }
-
-    @Override
-    public String getName() {
-        return "deliverShipment";
-    }
-
-    @Override
-    public Location getLocation() {
-        return shipment.getDeliveryLocation();
-    }
-
-    @Override
-    public double getTheoreticalEarliestOperationStartTime() {
-        return earliest;
-    }
-
-    @Override
-    public double getTheoreticalLatestOperationStartTime() {
-        return latest;
-    }
-
-    @Override
-    public double getOperationTime() {
-        return shipment.getDeliveryServiceTime();
-    }
-
-    @Override
-    public double getArrTime() {
-        return arrTime;
-    }
-
-    @Override
-    public double getEndTime() {
-        return endTime;
-    }
-
-    @Override
-    public void setArrTime(double arrTime) {
-        this.arrTime = arrTime;
-    }
-
-    @Override
-    public void setEndTime(double endTime) {
-        this.endTime = endTime;
-    }
-
-    @Override
-    public TourActivity duplicate() {
-        return new DeliverShipment(this);
-    }
-
-    public String toString() {
-        return "[type=" + getName() + "][locationId=" + getLocation().getId()
-            + "][size=" + getSize().toString()
-            + "][twStart=" + Activities.round(getTheoreticalEarliestOperationStartTime())
-            + "][twEnd=" + Activities.round(getTheoreticalLatestOperationStartTime()) + "]";
-    }
-
-    @Override
-    public Capacity getSize() {
-        return capacity;
-    }
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverShipmentDEPRECATED.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverShipmentDEPRECATED.java
new file mode 100644
index 000000000..fbee69fd8
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverShipmentDEPRECATED.java
@@ -0,0 +1,29 @@
+/*
+ * Licensed to GraphHopper GmbH under one or more contributor
+ * license agreements. See the NOTICE file distributed with this work for
+ * additional information regarding copyright ownership.
+ *
+ * GraphHopper GmbH licenses this file to you under the Apache License,
+ * Version 2.0 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.graphhopper.jsprit.core.problem.solution.route.activity;
+
+import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.job.Shipment;
+
+public final class DeliverShipmentDEPRECATED extends DeliveryActivityNEW {
+
+    public DeliverShipmentDEPRECATED(Shipment shipment) {
+        super(shipment, "deliverShipment", shipment.getDeliveryLocation(), shipment.getDeliveryServiceTime(), Capacity.invert(shipment.getSize()));
+    }
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliveryActivityNEW.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliveryActivityNEW.java
index a03da2514..028e47762 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliveryActivityNEW.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliveryActivityNEW.java
@@ -17,12 +17,13 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.AbstractJob;
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.job.AbstractJob;
 
 public class DeliveryActivityNEW extends JobActivity {
 
+
     public DeliveryActivityNEW(AbstractJob job, String name, Location location, double operationTime, Capacity capacity) {
         super(job, name, location, operationTime, capacity);
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ExchangeActivityNEW.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ExchangeActivityNEW.java
index 60d110045..d2bf7299d 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ExchangeActivityNEW.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ExchangeActivityNEW.java
@@ -17,9 +17,9 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.AbstractJob;
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.job.AbstractJob;
 
 public class ExchangeActivityNEW extends JobActivity {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/InternalJobActivity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/InternalJobActivity.java
index 0a1a0dbb4..18d6384eb 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/InternalJobActivity.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/InternalJobActivity.java
@@ -1,8 +1,8 @@
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.AbstractJob;
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.job.AbstractJob;
 
 /**
  * Common ancesstor for job-based, internal activities
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/JobActivity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/JobActivity.java
index 29187cfe6..e415a436a 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/JobActivity.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/JobActivity.java
@@ -1,8 +1,8 @@
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.AbstractJob;
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.job.AbstractJob;
 import com.graphhopper.jsprit.core.problem.job.Job;
 
 /**
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivityNEW.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivityNEW.java
index 87bbd85d8..dd551d0d6 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivityNEW.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivityNEW.java
@@ -17,9 +17,9 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.AbstractJob;
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.job.AbstractJob;
 
 public class PickupActivityNEW extends JobActivity {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupService.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupService.java
deleted file mode 100644
index afdcc5ad7..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupService.java
+++ /dev/null
@@ -1,133 +0,0 @@
-/*
- * Licensed to GraphHopper GmbH under one or more contributor
- * license agreements. See the NOTICE file distributed with this work for
- * additional information regarding copyright ownership.
- *
- * GraphHopper GmbH licenses this file to you under the Apache License,
- * Version 2.0 (the "License"); you may not use this file except in
- * compliance with the License. You may obtain a copy of the License at
- *
- *       http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.graphhopper.jsprit.core.problem.solution.route.activity;
-
-import com.graphhopper.jsprit.core.problem.IndexedActivity;
-import com.graphhopper.jsprit.core.problem.Capacity;
-import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.job.Pickup;
-import com.graphhopper.jsprit.core.problem.job.Service;
-
-public final class PickupService extends IndexedActivity implements PickupActivityNEW {
-
-    private Service pickup;
-
-    private double arrTime;
-
-    private double depTime;
-
-    private double theoreticalEarliest = 0;
-
-    private double theoreticalLatest = Double.MAX_VALUE;
-
-    public PickupService(Pickup pickup) {
-        super();
-        this.pickup = pickup;
-    }
-
-    public PickupService(Service service) {
-        this.pickup = service;
-    }
-
-    private PickupService(PickupService pickupActivity) {
-        this.pickup = pickupActivity.getJob();
-        this.arrTime = pickupActivity.getArrTime();
-        this.depTime = pickupActivity.getEndTime();
-        setIndex(pickupActivity.getIndex());
-        this.theoreticalEarliest = pickupActivity.getTheoreticalEarliestOperationStartTime();
-        this.theoreticalLatest = pickupActivity.getTheoreticalLatestOperationStartTime();
-    }
-
-    @Override
-    public String getName() {
-        return pickup.getType();
-    }
-
-    @Override
-    public Location getLocation() {
-        return pickup.getLocation();
-    }
-
-    @Override
-    public double getTheoreticalEarliestOperationStartTime() {
-        return theoreticalEarliest;
-    }
-
-    @Override
-    public double getTheoreticalLatestOperationStartTime() {
-        return theoreticalLatest;
-    }
-
-    @Override
-    public void setTheoreticalEarliestOperationStartTime(double earliest) {
-        this.theoreticalEarliest = earliest;
-    }
-
-    @Override
-    public void setTheoreticalLatestOperationStartTime(double latest) {
-        this.theoreticalLatest = latest;
-    }
-
-    @Override
-    public double getOperationTime() {
-        return pickup.getServiceDuration();
-    }
-
-    @Override
-    public double getArrTime() {
-        return arrTime;
-    }
-
-    @Override
-    public double getEndTime() {
-        return depTime;
-    }
-
-    @Override
-    public void setArrTime(double arrTime) {
-        this.arrTime = arrTime;
-    }
-
-    @Override
-    public void setEndTime(double endTime) {
-        this.depTime = endTime;
-    }
-
-    @Override
-    public TourActivity duplicate() {
-        return new PickupService(this);
-    }
-
-    @Override
-    public Service getJob() {
-        return pickup;
-    }
-
-    public String toString() {
-        return "[type=" + getName() + "][locationId=" + getLocation().getId()
-            + "][size=" + getSize().toString()
-            + "][twStart=" + Activities.round(getTheoreticalEarliestOperationStartTime())
-            + "][twEnd=" + Activities.round(getTheoreticalLatestOperationStartTime()) + "]";
-    }
-
-    @Override
-    public Capacity getSize() {
-        return pickup.getSize();
-    }
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/AbstractJob.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupServiceDEPRECATED.java
similarity index 54%
rename from jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/AbstractJob.java
rename to jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupServiceDEPRECATED.java
index f945976a2..dd6407732 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/AbstractJob.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupServiceDEPRECATED.java
@@ -15,42 +15,20 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-package com.graphhopper.jsprit.core.problem;
+import com.graphhopper.jsprit.core.problem.job.Service;
 
-import java.util.ArrayList;
-import java.util.List;
+public final class PickupServiceDEPRECATED extends PickupActivityNEW {
 
-import com.graphhopper.jsprit.core.problem.job.Job;
 
-/**
- * Created by schroeder on 14.07.14.
- */
-public abstract class AbstractJob implements Job {
-
-    private int index;
-
-    protected List<Location> allLocations = new ArrayList<>();
-
-    @Override
-    public int getIndex() {
-        return index;
-    }
-
-    protected void setIndex(int index) {
-        this.index = index;
-    }
-
-    protected void addLocation(Location location) {
-        if (location != null) {
-            allLocations.add(location);
-        }
+    public PickupServiceDEPRECATED(Service service) {
+        super(service, service.getName(), service.getLocation(), service.getServiceDuration(), service.getSize());
     }
 
     @Override
-    public List<Location> getAllLocations() {
-        return allLocations;
+    public Service getJob() {
+        return (Service) super.getJob();
     }
 
-
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupShipment.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupShipment.java
deleted file mode 100644
index 8d78dd82a..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupShipment.java
+++ /dev/null
@@ -1,130 +0,0 @@
-/*
- * Licensed to GraphHopper GmbH under one or more contributor
- * license agreements. See the NOTICE file distributed with this work for
- * additional information regarding copyright ownership.
- *
- * GraphHopper GmbH licenses this file to you under the Apache License,
- * Version 2.0 (the "License"); you may not use this file except in
- * compliance with the License. You may obtain a copy of the License at
- *
- *       http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.graphhopper.jsprit.core.problem.solution.route.activity;
-
-import com.graphhopper.jsprit.core.problem.IndexedActivity;
-import com.graphhopper.jsprit.core.problem.Capacity;
-import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
-
-public final class PickupShipment extends IndexedActivity implements PickupActivityNEW{
-
-    private Shipment shipment;
-
-    private double endTime;
-
-    private double arrTime;
-
-    private double earliest = 0;
-
-    private double latest = Double.MAX_VALUE;
-
-    public PickupShipment(Shipment shipment) {
-        super();
-        this.shipment = shipment;
-    }
-
-    private PickupShipment(PickupShipment pickupShipmentActivity) {
-        this.shipment = (Shipment) pickupShipmentActivity.getJob();
-        this.arrTime = pickupShipmentActivity.getArrTime();
-        this.endTime = pickupShipmentActivity.getEndTime();
-        setIndex(pickupShipmentActivity.getIndex());
-        this.earliest = pickupShipmentActivity.getTheoreticalEarliestOperationStartTime();
-        this.latest = pickupShipmentActivity.getTheoreticalLatestOperationStartTime();
-    }
-
-    @Override
-    public Job getJob() {
-        return shipment;
-    }
-
-    @Override
-    public void setTheoreticalEarliestOperationStartTime(double earliest) {
-        this.earliest = earliest;
-    }
-
-    @Override
-    public void setTheoreticalLatestOperationStartTime(double latest) {
-        this.latest = latest;
-    }
-
-    @Override
-    public String getName() {
-        return "pickupShipment";
-    }
-
-    @Override
-    public Location getLocation() {
-        return shipment.getPickupLocation();
-    }
-
-    @Override
-    public double getTheoreticalEarliestOperationStartTime() {
-        return earliest;
-    }
-
-    @Override
-    public double getTheoreticalLatestOperationStartTime() {
-        return latest;
-    }
-
-    @Override
-    public double getOperationTime() {
-        return shipment.getPickupServiceTime();
-    }
-
-    @Override
-    public double getArrTime() {
-        return arrTime;
-    }
-
-    @Override
-    public double getEndTime() {
-        return endTime;
-    }
-
-    @Override
-    public void setArrTime(double arrTime) {
-        this.arrTime = arrTime;
-    }
-
-    @Override
-    public void setEndTime(double endTime) {
-        this.endTime = endTime;
-    }
-
-    @Override
-    public TourActivity duplicate() {
-        return new PickupShipment(this);
-    }
-
-    public String toString() {
-        return "[type=" + getName() + "][locationId=" + getLocation().getId()
-            + "][size=" + getSize().toString()
-            + "][twStart=" + Activities.round(getTheoreticalEarliestOperationStartTime())
-            + "][twEnd=" + Activities.round(getTheoreticalLatestOperationStartTime()) + "]";
-    }
-
-    @Override
-    public Capacity getSize() {
-        return shipment.getSize();
-    }
-
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupShipmentDEPRECATED.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupShipmentDEPRECATED.java
new file mode 100644
index 000000000..90c86cd8e
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupShipmentDEPRECATED.java
@@ -0,0 +1,28 @@
+/*
+ * Licensed to GraphHopper GmbH under one or more contributor
+ * license agreements. See the NOTICE file distributed with this work for
+ * additional information regarding copyright ownership.
+ *
+ * GraphHopper GmbH licenses this file to you under the Apache License,
+ * Version 2.0 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.graphhopper.jsprit.core.problem.solution.route.activity;
+
+import com.graphhopper.jsprit.core.problem.job.Shipment;
+
+public final class PickupShipmentDEPRECATED extends PickupActivityNEW{
+
+    public PickupShipmentDEPRECATED(Shipment shipment) {
+        super(shipment, "pickupShipment", shipment.getPickupLocation(), shipment.getPickupServiceTime(), shipment.getSize());
+    }
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityNEW.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityNEW.java
index ec2c9a80f..8fa220c3d 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityNEW.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityNEW.java
@@ -17,9 +17,10 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.AbstractJob;
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.job.AbstractJob;
+import com.graphhopper.jsprit.core.problem.job.Service;
 
 public class ServiceActivityNEW extends JobActivity {
 
@@ -31,6 +32,11 @@ public ServiceActivityNEW(JobActivity sourceActivity) {
         super(sourceActivity);
     }
 
+    // NOTE: Only for testing purposes
+    public static ServiceActivityNEW newInstance(Service service) {
+        return new ServiceActivityNEW(service, service.getName(), service.getLocation(), service.getServiceDuration(), service.getSize());
+    }
+
 
 //    public double arrTime;
 //
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CVRPwithMatrix_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CVRPwithMatrix_IT.java
index 050fbf165..5bc2ea089 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CVRPwithMatrix_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CVRPwithMatrix_IT.java
@@ -104,7 +104,7 @@ private VehicleRoutingProblem createVrpWithLocationIndecesAndMatrix(VehicleRouti
             Service s = (Service) j;
             Location l = Location.Builder.newInstance().setIndex(getIndex())
                 .setId(s.getLocation().getId()).setCoordinate(s.getLocation().getCoordinate()).build();
-            Service newService = Service.Builder.newInstance(s.getId()).setServiceTime(s.getServiceDuration())
+            Service newService = new Service.Builder(s.getId()).setServiceTime(s.getServiceDuration())
                 .addSizeDimension(0, s.getSize().get(0))
                 .setLocation(l).build();
             vrpBuilder.addJob(newService);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CapacityConstraint_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CapacityConstraint_IT.java
index c80b8ea0b..4669b4fb1 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CapacityConstraint_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CapacityConstraint_IT.java
@@ -17,6 +17,9 @@
  */
 package com.graphhopper.jsprit.core.algorithm;
 
+import org.junit.Assert;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.analysis.SolutionAnalyser;
 import com.graphhopper.jsprit.core.problem.Capacity;
@@ -31,8 +34,6 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.ManhattanCosts;
 import com.graphhopper.jsprit.core.util.Solutions;
-import org.junit.Assert;
-import org.junit.Test;
 
 
 public class CapacityConstraint_IT {
@@ -41,25 +42,25 @@
     public void capacityShouldNotBeExceeded() {
 
         VehicleTypeImpl type1 = VehicleTypeImpl.Builder.newInstance("type1")
-            .addCapacityDimension(0,1)
-            .addCapacityDimension(1,0).addCapacityDimension(2,17).addCapacityDimension(3,18)
-            .addCapacityDimension(4,14).addCapacityDimension(5,18).addCapacityDimension(6,20).build();
+                .addCapacityDimension(0,1)
+                .addCapacityDimension(1,0).addCapacityDimension(2,17).addCapacityDimension(3,18)
+                .addCapacityDimension(4,14).addCapacityDimension(5,18).addCapacityDimension(6,20).build();
         VehicleTypeImpl type2 = VehicleTypeImpl.Builder.newInstance("type2")
-            .addCapacityDimension(0,0)
-            .addCapacityDimension(1,0).addCapacityDimension(2,17).addCapacityDimension(3,18)
-            .addCapacityDimension(4,13).addCapacityDimension(5,18).addCapacityDimension(6,20).build();
+                .addCapacityDimension(0,0)
+                .addCapacityDimension(1,0).addCapacityDimension(2,17).addCapacityDimension(3,18)
+                .addCapacityDimension(4,13).addCapacityDimension(5,18).addCapacityDimension(6,20).build();
         VehicleTypeImpl type3 = VehicleTypeImpl.Builder.newInstance("type3")
-            .addCapacityDimension(0,1)
-            .addCapacityDimension(1,0).addCapacityDimension(2,17).addCapacityDimension(3,18)
-            .addCapacityDimension(4,14).addCapacityDimension(5,18).addCapacityDimension(6,20).build();
+                .addCapacityDimension(0,1)
+                .addCapacityDimension(1,0).addCapacityDimension(2,17).addCapacityDimension(3,18)
+                .addCapacityDimension(4,14).addCapacityDimension(5,18).addCapacityDimension(6,20).build();
         VehicleTypeImpl type4 = VehicleTypeImpl.Builder.newInstance("type4")
-            .addCapacityDimension(0,0)
-            .addCapacityDimension(1,0).addCapacityDimension(2,17).addCapacityDimension(3,18)
-            .addCapacityDimension(4,14).addCapacityDimension(5,17).addCapacityDimension(6,20).build();
+                .addCapacityDimension(0,0)
+                .addCapacityDimension(1,0).addCapacityDimension(2,17).addCapacityDimension(3,18)
+                .addCapacityDimension(4,14).addCapacityDimension(5,17).addCapacityDimension(6,20).build();
         VehicleTypeImpl type5 = VehicleTypeImpl.Builder.newInstance("type5")
-            .addCapacityDimension(0,1)
-            .addCapacityDimension(1,0).addCapacityDimension(2,16).addCapacityDimension(3,17)
-            .addCapacityDimension(4,14).addCapacityDimension(5,18).addCapacityDimension(6,20).build();
+                .addCapacityDimension(0,1)
+                .addCapacityDimension(1,0).addCapacityDimension(2,16).addCapacityDimension(3,17)
+                .addCapacityDimension(4,14).addCapacityDimension(5,18).addCapacityDimension(6,20).build();
 
         VehicleImpl v1 = VehicleImpl.Builder.newInstance("v1").setStartLocation(Location.newInstance(0,0)).setType(type1).setReturnToDepot(true).build();
         VehicleImpl v2 = VehicleImpl.Builder.newInstance("v2").setStartLocation(Location.newInstance(0, 0)).setType(type2).setReturnToDepot(true).build();
@@ -67,27 +68,27 @@ public void capacityShouldNotBeExceeded() {
         VehicleImpl v4 = VehicleImpl.Builder.newInstance("v4").setStartLocation(Location.newInstance(0, 0)).setType(type4).setReturnToDepot(true).build();
         VehicleImpl v5 = VehicleImpl.Builder.newInstance("v5").setStartLocation(Location.newInstance(0, 0)).setType(type5).setReturnToDepot(true).build();
 
-        Delivery d1 = Delivery.Builder.newInstance("d1").setLocation(Location.newInstance(0,10))
-            .addSizeDimension(2,1).build();
-        Delivery d2 = Delivery.Builder.newInstance("d2").setLocation(Location.newInstance(0,12))
-            .addSizeDimension(2,1).addSizeDimension(3,1).build();
-        Delivery d3 = Delivery.Builder.newInstance("d3").setLocation(Location.newInstance(0,15))
-            .addSizeDimension(0,1).addSizeDimension(4,1).build();
-        Delivery d4 = Delivery.Builder.newInstance("d4").setLocation(Location.newInstance(0,20))
-            .addSizeDimension(0,1).addSizeDimension(5,1).build();
+        Delivery d1 = new Delivery.Builder("d1").setLocation(Location.newInstance(0, 10))
+                .addSizeDimension(2,1).build();
+        Delivery d2 = new Delivery.Builder("d2").setLocation(Location.newInstance(0,12))
+                .addSizeDimension(2,1).addSizeDimension(3,1).build();
+        Delivery d3 = new Delivery.Builder("d3").setLocation(Location.newInstance(0,15))
+                .addSizeDimension(0,1).addSizeDimension(4,1).build();
+        Delivery d4 = new Delivery.Builder("d4").setLocation(Location.newInstance(0,20))
+                .addSizeDimension(0,1).addSizeDimension(5,1).build();
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.setFleetSize(VehicleRoutingProblem.FleetSize.FINITE)
-            .addJob(d1).addJob(d2).addJob(d3).addJob(d4)
-            .addVehicle(v1).addVehicle(v2)
-            .addVehicle(v3)
-            .addVehicle(v4).addVehicle(v5);
+        .addJob(d1).addJob(d2).addJob(d3).addJob(d4)
+        .addVehicle(v1).addVehicle(v2)
+        .addVehicle(v3)
+        .addVehicle(v4).addVehicle(v5);
         vrpBuilder.setRoutingCost(new ManhattanCosts());
 
         VehicleRoutingProblem vrp = vrpBuilder.build();
 
         VehicleRoutingAlgorithm vra = Jsprit.Builder.newInstance(vrp)
-            .setProperty(Jsprit.Parameter.VEHICLE_SWITCH, "true").buildAlgorithm();
+                .setProperty(Jsprit.Parameter.VEHICLE_SWITCH, "true").buildAlgorithm();
         vra.setMaxIterations(2000);
         VehicleRoutingProblemSolution solution = Solutions.bestOf(vra.searchSolutions());
 
@@ -104,7 +105,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
 //            System.out.println(r.getVehicle().getId() + " load@beginning: "  + loadAtBeginning);
 //            System.out.println("cap: " + capacityDimensions);
             Assert.assertTrue("capacity has been exceeded",
-            loadAtBeginning.isLessOrEqual(capacityDimensions));
+                    loadAtBeginning.isLessOrEqual(capacityDimensions));
         }
 //
         Assert.assertTrue(solution.getRoutes().size() != 1);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/DeactivateTimeWindowsTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/DeactivateTimeWindowsTest.java
index db1508940..10f53319a 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/DeactivateTimeWindowsTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/DeactivateTimeWindowsTest.java
@@ -42,7 +42,7 @@
 
     @Before
     public void doBefore(){
-        Service service = Service.Builder.newInstance("s").setLocation(Location.newInstance(20, 0))
+        Service service = new Service.Builder("s").setLocation(Location.newInstance(20, 0))
             .setTimeWindow(TimeWindow.newInstance(40, 50)).build();
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         vrp = VehicleRoutingProblem.Builder.newInstance().addJob(service).addVehicle(vehicle).build();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ExternalInitialSolutionIsInValidTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ExternalInitialSolutionIsInValidTest.java
index 65db2e423..3fdf1fe07 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ExternalInitialSolutionIsInValidTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ExternalInitialSolutionIsInValidTest.java
@@ -38,8 +38,8 @@
     @Test
     public void itShouldSolveProblemWithIniSolutionExternallyCreated() {
 
-        Service s1 = Service.Builder.newInstance("s1").setLocation(Location.newInstance(10, 0)).build();
-        Service s2 = Service.Builder.newInstance("s2").setLocation(Location.newInstance(0, 10)).build();
+        Service s1 = new Service.Builder("s1").setLocation(Location.newInstance(10, 0)).build();
+        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(0, 10)).build();
 
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v1").setStartLocation(Location.newInstance(0, 0)).build();
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/IgnoreBreakTimeWindowTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/IgnoreBreakTimeWindowTest.java
index 12b50a96f..74acba422 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/IgnoreBreakTimeWindowTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/IgnoreBreakTimeWindowTest.java
@@ -18,6 +18,8 @@
 
 package com.graphhopper.jsprit.core.algorithm;
 
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
@@ -31,8 +33,8 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.Solutions;
+
 import junit.framework.Assert;
-import org.junit.Test;
 
 /**
  * Created by schroeder on 08/01/16.
@@ -44,9 +46,9 @@ public void doNotIgnoreBreakTW(){
         VehicleTypeImpl.Builder vehicleTypeBuilder = VehicleTypeImpl.Builder.newInstance("vehicleType");
         VehicleType vehicleType = vehicleTypeBuilder.setCostPerWaitingTime(0.8).build();
 
-		/*
+        /*
          * get a vehicle-builder and build a vehicle located at (10,10) with type "vehicleType"
-		 */
+         */
 
         VehicleImpl vehicle2;
         {
@@ -54,39 +56,39 @@ public void doNotIgnoreBreakTW(){
             vehicleBuilder.setStartLocation(Location.newInstance(0, 0));
             vehicleBuilder.setType(vehicleType);
             vehicleBuilder.setEarliestStart(10).setLatestArrival(50);
-            vehicleBuilder.setBreak(Break.Builder.newInstance("lunch").setTimeWindow(TimeWindow.newInstance(14, 14)).setServiceTime(1.).build());
+            vehicleBuilder.setBreak(new Break.Builder("lunch").setTimeWindow(TimeWindow.newInstance(14, 14)).setServiceTime(1.).build());
             vehicle2 = vehicleBuilder.build();
         }
-		/*
+        /*
          * build services at the required locations, each with a capacity-demand of 1.
-		 */
+         */
 
 
-        Service service4 = Service.Builder.newInstance("2").setLocation(Location.newInstance(0, 0))
-            .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(17,17)).build();
+        Service service4 = new Service.Builder("2").setLocation(Location.newInstance(0, 0))
+                .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(17,17)).build();
 
-        Service service5 = Service.Builder.newInstance("3").setLocation(Location.newInstance(0, 0))
-            .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(18, 18)).build();
+        Service service5 = new Service.Builder("3").setLocation(Location.newInstance(0, 0))
+                .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(18, 18)).build();
 
-        Service service7 = Service.Builder.newInstance("4").setLocation(Location.newInstance(0, 0))
-            .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(10, 10)).build();
+        Service service7 = new Service.Builder("4").setLocation(Location.newInstance(0, 0))
+                .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(10, 10)).build();
 
-        Service service8 = Service.Builder.newInstance("5").setLocation(Location.newInstance(0, 0))
-            .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(12, 12)).build();
+        Service service8 = new Service.Builder("5").setLocation(Location.newInstance(0, 0))
+                .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(12, 12)).build();
 
-        Service service10 = Service.Builder.newInstance("6").setLocation(Location.newInstance(0, 0))
-            .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(16, 16)).build();
+        Service service10 = new Service.Builder("6").setLocation(Location.newInstance(0, 0))
+                .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(16, 16)).build();
 
-        Service service11 = Service.Builder.newInstance("7").setLocation(Location.newInstance(0, 0))
-            .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(13, 13)).build();
+        Service service11 = new Service.Builder("7").setLocation(Location.newInstance(0, 0))
+                .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(13, 13)).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance()
-            .addVehicle(vehicle2)
-            .addJob(service4)
-            .addJob(service5).addJob(service7)
-            .addJob(service8).addJob(service10).addJob(service11)
-            .setFleetSize(VehicleRoutingProblem.FleetSize.FINITE)
-            .build();
+                .addVehicle(vehicle2)
+                .addJob(service4)
+                .addJob(service5).addJob(service7)
+                .addJob(service8).addJob(service10).addJob(service11)
+                .setFleetSize(VehicleRoutingProblem.FleetSize.FINITE)
+                .build();
 
         VehicleRoutingAlgorithm vra = Jsprit.createAlgorithm(vrp);
         vra.setMaxIterations(50);
@@ -100,11 +102,12 @@ public void doNotIgnoreBreakTW(){
     private boolean breakShouldBeTime(VehicleRoutingProblemSolution solution) {
         boolean inTime = true;
         for(TourActivity act : solution.getRoutes().iterator().next().getActivities()){
-            if(act instanceof BreakActivity){
-                if(act.getEndTime() < ((BreakActivity) act).getJob().getTimeWindow().getStart()){
+            if (act instanceof BreakActivity) {
+                TimeWindow timeWindow = ((BreakActivity) act).getJob().getTimeWindow();
+                if (act.getEndTime() < timeWindow.getStart()) {
                     inTime = false;
                 }
-                if(act.getArrTime() > ((BreakActivity) act).getJob().getTimeWindow().getEnd()){
+                if (act.getArrTime() > timeWindow.getEnd()) {
                     inTime = false;
                 }
             }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/InitialRoutesTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/InitialRoutesTest.java
index 25d144225..1ac38966a 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/InitialRoutesTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/InitialRoutesTest.java
@@ -19,6 +19,15 @@
 package com.graphhopper.jsprit.core.algorithm;
 
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
+import java.util.Collection;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.box.GreedySchrimpfFactory;
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit.Builder;
@@ -37,19 +46,13 @@
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupShipment;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupShipmentDEPRECATED;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.Coordinate;
 import com.graphhopper.jsprit.core.util.Solutions;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.Collection;
-
-import static org.junit.Assert.*;
 
 public class InitialRoutesTest {
 
@@ -61,8 +64,8 @@
     public void before(){
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         VehicleImpl v = VehicleImpl.Builder.newInstance("veh1").setStartLocation(Location.newInstance(0,0)).setLatestArrival(48600).build();
-        Service s1 = Service.Builder.newInstance("s1").setLocation(Location.newInstance(1000,0)).build();
-        Service s2 = Service.Builder.newInstance("s2").setLocation(Location.newInstance(1000,1000)).build();
+        Service s1 = new Service.Builder("s1").setLocation(Location.newInstance(1000,0)).build();
+        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(1000,1000)).build();
         builder.addVehicle(v).addJob(s1).addJob(s2);
         initialRoute = VehicleRoute.Builder.newInstance(v).addService(s1).build();
         builder.addInitialVehicleRoute(initialRoute);
@@ -98,7 +101,9 @@ public void whenSolving_deliverService1_shouldBeInRoute() {
     private Job getInitialJob(String jobId, VehicleRoutingProblem vrp) {
         for (VehicleRoute r : vrp.getInitialVehicleRoutes()) {
             for (Job j : r.getTourActivities().getJobs()) {
-                if (j.getId().equals(jobId)) return j;
+                if (j.getId().equals(jobId)) {
+                    return j;
+                }
             }
         }
         return null;
@@ -109,7 +114,9 @@ private boolean hasActivityIn(Collection<VehicleRoute> routes, String jobId) {
         for (VehicleRoute route : routes) {
             for (TourActivity act : route.getActivities()) {
                 if (act instanceof JobActivity) {
-                    if (((JobActivity) act).getJob().getId().equals(jobId)) isInRoute = true;
+                    if (((JobActivity) act).getJob().getId().equals(jobId)) {
+                        isInRoute = true;
+                    }
                 }
             }
         }
@@ -133,7 +140,9 @@ private boolean hasActivityIn(VehicleRoute route, String jobId) {
         boolean isInRoute = false;
         for (TourActivity act : route.getActivities()) {
             if (act instanceof JobActivity) {
-                if (((JobActivity) act).getJob().getId().equals(jobId)) isInRoute = true;
+                if (((JobActivity) act).getJob().getId().equals(jobId)) {
+                    isInRoute = true;
+                }
             }
         }
         return isInRoute;
@@ -152,26 +161,26 @@ public void whenSolving_deliverService2_shouldBeInRoute() {
     public void maxCapacityShouldNotBeExceeded() {
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0, 100).build();
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("veh")
-            .setStartLocation(Location.Builder.newInstance().setId("start").setCoordinate(Coordinate.newInstance(0, 0)).build())
-            .setType(type)
-            .build();
+                .setStartLocation(Location.Builder.newInstance().setId("start").setCoordinate(Coordinate.newInstance(0, 0)).build())
+                .setType(type)
+                .build();
 
         Shipment shipment = Shipment.Builder.newInstance("s")
-            .setPickupLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(10, 0)).setId("pick").build())
-            .setDeliveryLocation(Location.Builder.newInstance().setId("del").setCoordinate(Coordinate.newInstance(0, 10)).build())
-            .addSizeDimension(0, 100)
-            .build();
+                .setPickupLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(10, 0)).setId("pick").build())
+                .setDeliveryLocation(Location.Builder.newInstance().setId("del").setCoordinate(Coordinate.newInstance(0, 10)).build())
+                .addSizeDimension(0, 100)
+                .build();
 
         Shipment another_shipment = Shipment.Builder.newInstance("another_s")
-            .setPickupLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(10, 0)).setId("pick").build())
-            .setDeliveryLocation(Location.Builder.newInstance().setId("del").setCoordinate(Coordinate.newInstance(0, 10)).build())
-            .addSizeDimension(0, 50)
-            .build();
+                .setPickupLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(10, 0)).setId("pick").build())
+                .setDeliveryLocation(Location.Builder.newInstance().setId("del").setCoordinate(Coordinate.newInstance(0, 10)).build())
+                .addSizeDimension(0, 50)
+                .build();
 
         VehicleRoute iniRoute = VehicleRoute.Builder.newInstance(vehicle).addPickup(shipment).addDelivery(shipment).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(shipment).addVehicle(vehicle).addJob(another_shipment)
-            .setFleetSize(VehicleRoutingProblem.FleetSize.FINITE).addInitialVehicleRoute(iniRoute).build();
+                .setFleetSize(VehicleRoutingProblem.FleetSize.FINITE).addInitialVehicleRoute(iniRoute).build();
 
         VehicleRoutingAlgorithm vra = new GreedySchrimpfFactory().createAlgorithm(vrp);
         vra.setMaxIterations(10);
@@ -185,12 +194,12 @@ public void maxCapacityShouldNotBeExceeded() {
     private boolean secondActIsPickup(Collection<VehicleRoutingProblemSolution> solutions) {
         VehicleRoutingProblemSolution solution = Solutions.bestOf(solutions);
         TourActivity secondAct = solution.getRoutes().iterator().next().getActivities().get(1);
-        return secondAct instanceof PickupShipment;
+        return secondAct instanceof PickupShipmentDEPRECATED;
     }
 
     @Test
     public void whenAllJobsInInitialRoute_itShouldWork() {
-        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance(0, 10)).build();
+        Service s = new Service.Builder("s").setLocation(Location.newInstance(0, 10)).build();
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoute iniRoute = VehicleRoute.Builder.newInstance(v).addService(s).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addInitialVehicleRoute(iniRoute).build();
@@ -202,8 +211,8 @@ public void whenAllJobsInInitialRoute_itShouldWork() {
 
     @Test
     public void buildWithoutTimeConstraints() {
-        Service s1 = Service.Builder.newInstance("s1").setLocation(Location.newInstance(0, 10)).addSizeDimension(0, 10).build();
-        Service s2 = Service.Builder.newInstance("s2").setLocation(Location.newInstance(10, 20)).addSizeDimension(0, 12).build();
+        Service s1 = new Service.Builder("s1").setLocation(Location.newInstance(0, 10)).addSizeDimension(0, 10).build();
+        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(10, 20)).addSizeDimension(0, 12).build();
 
         VehicleTypeImpl vt = VehicleTypeImpl.Builder.newInstance("vt").addCapacityDimension(0, 15).build();
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setType(vt).setStartLocation(Location.newInstance(0, 0)).build();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/MeetTimeWindowConstraint_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/MeetTimeWindowConstraint_IT.java
index 84bf83512..a81f97d68 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/MeetTimeWindowConstraint_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/MeetTimeWindowConstraint_IT.java
@@ -60,9 +60,9 @@ public void doBefore(){
             .setEarliestStart(14400).setLatestArrival(46800).setType(type1).build();
         VehicleImpl vehicle2 = VehicleImpl.Builder.newInstance("19").setStartLocation(Location.newInstance(0,0))
             .setEarliestStart(39600).setLatestArrival(64800).setType(type2).build();
-        Service service1 = Service.Builder.newInstance("2").setLocation(Location.newInstance(2000, 0))
+        Service service1 = new Service.Builder("2").setLocation(Location.newInstance(2000, 0))
             .setTimeWindow(TimeWindow.newInstance(54000,54000)).build();
-        Service service2 = Service.Builder.newInstance("1").setLocation(Location.newInstance(1000, 1000))
+        Service service2 = new Service.Builder("1").setLocation(Location.newInstance(1000, 1000))
             .setTimeWindow(TimeWindow.newInstance(19800,21600)).build();
         vrp = VehicleRoutingProblem.Builder.newInstance().addVehicle(vehicle1).addVehicle(vehicle2)
             .addJob(service1).addJob(service2).setFleetSize(VehicleRoutingProblem.FleetSize.FINITE).build();
@@ -321,19 +321,19 @@ private VehicleRoutingProblem createTWBugProblem() throws IOException {
         VehicleImpl v4 = VehicleImpl.Builder.newInstance("vehicle4").setStartLocation(Location.newInstance(0))
             .setEarliestStart(36000).setLatestArrival(54060).setType(type).build();
 
-        Service s1 = Service.Builder.newInstance("1").setLocation(Location.Builder.newInstance().setIndex(1).setId("js0").build())
+        Service s1 = new Service.Builder("1").setLocation(Location.Builder.newInstance().setIndex(1).setId("js0").build())
             .setServiceTime(600).setTimeWindow(TimeWindow.newInstance(0,1800)).addSizeDimension(0,1).build();
-        Service s2 = Service.Builder.newInstance("2").setLocation(Location.Builder.newInstance().setIndex(2).setId("js2").build())
+        Service s2 = new Service.Builder("2").setLocation(Location.Builder.newInstance().setIndex(2).setId("js2").build())
             .setServiceTime(600).setTimeWindow(TimeWindow.newInstance(5400, 7200)).addSizeDimension(0, 2).build();
-        Service s3 = Service.Builder.newInstance("3").setLocation(Location.Builder.newInstance().setIndex(3).setId("js5").build())
+        Service s3 = new Service.Builder("3").setLocation(Location.Builder.newInstance().setIndex(3).setId("js5").build())
             .setServiceTime(1800).setTimeWindow(TimeWindow.newInstance(17100, 18000)).addSizeDimension(0, 10).build();
-        Service s4 = Service.Builder.newInstance("4").setLocation(Location.Builder.newInstance().setIndex(4).setId("js4").build())
+        Service s4 = new Service.Builder("4").setLocation(Location.Builder.newInstance().setIndex(4).setId("js4").build())
             .setServiceTime(900).addSizeDimension(0, 2).build();
-        Service s5 = Service.Builder.newInstance("5").setLocation(Location.Builder.newInstance().setIndex(5).setId("js8").build())
+        Service s5 = new Service.Builder("5").setLocation(Location.Builder.newInstance().setIndex(5).setId("js8").build())
             .setServiceTime(600).addSizeDimension(0, 4).build();
-        Service s6 = Service.Builder.newInstance("6").setLocation(Location.Builder.newInstance().setIndex(6).setId("js10").build())
+        Service s6 = new Service.Builder("6").setLocation(Location.Builder.newInstance().setIndex(6).setId("js10").build())
             .setServiceTime(1500).setTimeWindow(TimeWindow.newInstance(29700,32400)).addSizeDimension(0, 10).build();
-        Service s7 = Service.Builder.newInstance("7").setLocation(Location.Builder.newInstance().setIndex(7).setId("jsp3").build())
+        Service s7 = new Service.Builder("7").setLocation(Location.Builder.newInstance().setIndex(7).setId("jsp3").build())
             .setServiceTime(5594).build();
 
         Shipment shipment1 = Shipment.Builder.newInstance("shipment1")
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/MultipleTimeWindowsTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/MultipleTimeWindowsTest.java
index 5ed0309d4..6f64422e9 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/MultipleTimeWindowsTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/MultipleTimeWindowsTest.java
@@ -35,9 +35,9 @@
 
     @Test
     public void service2ShouldNotBeInserted(){
-        Service s = Service.Builder.newInstance("s1").setLocation(Location.newInstance(10, 0)).build();
+        Service s = new Service.Builder("s1").setLocation(Location.newInstance(10, 0)).build();
 
-        Service s2 = Service.Builder.newInstance("s2")
+        Service s2 = new Service.Builder("s2")
                 .addTimeWindow(50.,60.)
                 .setLocation(Location.newInstance(20, 0)).build();
 
@@ -54,10 +54,10 @@ public void service2ShouldNotBeInserted(){
 
     @Test
     public void service2ShouldBeInsertedIntoNewVehicle(){
-        Service s = Service.Builder.newInstance("s1").setLocation(Location.newInstance(10,0))
+        Service s = new Service.Builder("s1").setLocation(Location.newInstance(10,0))
                 .addTimeWindow(5.,15.).build();
 
-        Service s2 = Service.Builder.newInstance("s2")
+        Service s2 = new Service.Builder("s2")
                 .addTimeWindow(50.,60.)
                 .setLocation(Location.newInstance(20, 0)).build();
 
@@ -78,9 +78,9 @@ public void service2ShouldBeInsertedIntoNewVehicle(){
 
     @Test
     public void service2ShouldBeInserted(){
-        Service s = Service.Builder.newInstance("s1").setLocation(Location.newInstance(10,0)).build();
+        Service s = new Service.Builder("s1").setLocation(Location.newInstance(10,0)).build();
 
-        Service s2 = Service.Builder.newInstance("s2")
+        Service s2 = new Service.Builder("s2")
                 .addTimeWindow(50., 60.).addTimeWindow(15., 25)
                 .setLocation(Location.newInstance(20, 0)).build();
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/OpenRoutesTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/OpenRoutesTest.java
index c96b77fc1..389fa3e80 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/OpenRoutesTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/OpenRoutesTest.java
@@ -74,7 +74,7 @@ public void whenDealingWithOpenRoute_insertionShouldNotRequireRouteToBeClosed()
             .setStartLocation(TestUtils.loc(Coordinate.newInstance(0, 0)))
             .build();
 
-        Service service = Service.Builder.newInstance("s")
+        Service service = new Service.Builder("s")
             .setLocation(TestUtils.loc(Coordinate.newInstance(5, 0)))
             .build();
 
@@ -124,7 +124,7 @@ public void whenDealingWithOpenRoute_algorithmShouldCalculateCorrectCosts() {
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v").setLatestArrival(10.)
             .setType(type).setReturnToDepot(false).setStartLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(0, 0)).build()).build();
 
-        Service service = Service.Builder.newInstance("s")
+        Service service = new Service.Builder("s")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(5, 0)).build()).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(service).addVehicle(vehicle).build();
@@ -146,7 +146,7 @@ public void whenDealingWithOpenRouteAndGreatCircleCost_algorithmShouldRunWithout
             .setStartLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(0, 0)).build())
             .build();
 
-        Service service = Service.Builder.newInstance("s")
+        Service service = new Service.Builder("s")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(50, 0)).build()).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance()
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollectionWithCostsHigherThanTimesAndFiniteFleet_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollectionWithCostsHigherThanTimesAndFiniteFleet_IT.java
index 6d88cef89..945f1771b 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollectionWithCostsHigherThanTimesAndFiniteFleet_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollectionWithCostsHigherThanTimesAndFiniteFleet_IT.java
@@ -105,7 +105,7 @@ private void readDemandQuantities(VehicleRoutingProblem.Builder vrpBuilder) thro
             /*
              * build service
 			 */
-            Service service = Service.Builder.newInstance(lineTokens[0]).addSizeDimension(0, Integer.parseInt(lineTokens[1]))
+            Service service = new Service.Builder(lineTokens[0]).addSizeDimension(0, Integer.parseInt(lineTokens[1]))
                 .setLocation(Location.newInstance(lineTokens[0])).build();
             /*
 			 * and add it to problem
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollectionWithCostsHigherThanTimesAndFiniteFleet_withTimeAndDistanceCosts_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollectionWithCostsHigherThanTimesAndFiniteFleet_withTimeAndDistanceCosts_IT.java
index 59586e9ce..0c98ba04f 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollectionWithCostsHigherThanTimesAndFiniteFleet_withTimeAndDistanceCosts_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollectionWithCostsHigherThanTimesAndFiniteFleet_withTimeAndDistanceCosts_IT.java
@@ -105,7 +105,7 @@ private void readDemandQuantities(VehicleRoutingProblem.Builder vrpBuilder) thro
             /*
              * build service
 			 */
-            Service service = Service.Builder.newInstance(lineTokens[0]).addSizeDimension(0, Integer.parseInt(lineTokens[1]))
+            Service service = new Service.Builder(lineTokens[0]).addSizeDimension(0, Integer.parseInt(lineTokens[1]))
                 .setLocation(Location.newInstance(lineTokens[0])).build();
             /*
 			 * and add it to problem
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollection_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollection_IT.java
index fc4d5aabc..d4d66bcaa 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollection_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollection_IT.java
@@ -228,7 +228,7 @@ private void readDemandQuantitiesAsServices(VehicleRoutingProblem.Builder vrpBui
 			/*
 			 * build service
 			 */
-            Service service = Service.Builder.newInstance(lineTokens[0]).addSizeDimension(0, Integer.parseInt(lineTokens[1]))
+            Service service = new Service.Builder(lineTokens[0]).addSizeDimension(0, Integer.parseInt(lineTokens[1]))
                 .setLocation(Location.newInstance(lineTokens[0])).build();
 			/*
 			 * and add it to problem
@@ -255,7 +255,7 @@ private void readDemandQuantitiesAsPickups(VehicleRoutingProblem.Builder vrpBuil
 			/*
 			 * build service
 			 */
-            Pickup service = Pickup.Builder.newInstance(lineTokens[0]).addSizeDimension(0, Integer.parseInt(lineTokens[1]))
+            Pickup service = new Pickup.Builder(lineTokens[0]).addSizeDimension(0, Integer.parseInt(lineTokens[1]))
                 .setLocation(Location.newInstance(lineTokens[0])).build();
 			/*
 			 * and add it to problem
@@ -278,7 +278,7 @@ private void readDemandQuantitiesAsDeliveries(VehicleRoutingProblem.Builder vrpB
 			/*
 			 * build service
 			 */
-            Delivery service = (Delivery) Delivery.Builder.newInstance(lineTokens[0]).addSizeDimension(0, Integer.parseInt(lineTokens[1]))
+            Delivery service = (Delivery) new Delivery.Builder(lineTokens[0]).addSizeDimension(0, Integer.parseInt(lineTokens[1]))
                 .setLocation(Location.newInstance(lineTokens[0])).build();
 			/*
 			 * and add it to problem
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/SolomonSkills_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/SolomonSkills_IT.java
index 928ac039b..34f72cc89 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/SolomonSkills_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/SolomonSkills_IT.java
@@ -67,7 +67,7 @@ public void itShouldMakeCorrectAssignmentAccordingToSkills() {
         }
         for (Job job : vrp.getJobs().values()) {
             Service service = (Service) job;
-            Service.Builder skillServiceBuilder = Service.Builder.newInstance(service.getId()).setServiceTime(service.getServiceDuration())
+            Service.Builder skillServiceBuilder = new Service.Builder(service.getId()).setServiceTime(service.getServiceDuration())
                 .setLocation(TestUtils.loc(service.getLocation().getId(), service.getLocation().getCoordinate())).setTimeWindow(service.getTimeWindow())
                 .addSizeDimension(0, service.getSize().get(0));
             if (service.getLocation().getCoordinate().getY() < 50) skillServiceBuilder.addRequiredSkill("skill2");
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/UnassignedJobListTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/UnassignedJobListTest.java
index ce7eed838..8cdef53ac 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/UnassignedJobListTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/UnassignedJobListTest.java
@@ -38,9 +38,9 @@
     public void job2ShouldBeInBadJobList_dueToTimeWindow() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         builder.addVehicle(VehicleImpl.Builder.newInstance("v1").setEarliestStart(0).setLatestArrival(12).setStartLocation(Location.newInstance(1, 1)).build());
-        Service job1 = Service.Builder.newInstance("job1").setLocation(Location.newInstance(0, 0)).setTimeWindow(TimeWindow.newInstance(0, 12)).setServiceTime(1).build();
+        Service job1 = new Service.Builder("job1").setLocation(Location.newInstance(0, 0)).setTimeWindow(TimeWindow.newInstance(0, 12)).setServiceTime(1).build();
         builder.addJob(job1);
-        Service job2 = Service.Builder.newInstance("job2").setLocation(Location.newInstance(2, 2)).setTimeWindow(TimeWindow.newInstance(12, 24)).setServiceTime(1).build();
+        Service job2 = new Service.Builder("job2").setLocation(Location.newInstance(2, 2)).setTimeWindow(TimeWindow.newInstance(12, 24)).setServiceTime(1).build();
         builder.addJob(job2);
 
         VehicleRoutingProblem vrp = builder.build();
@@ -57,9 +57,9 @@ public void job2ShouldBeInBadJobList_dueToTimeWindow() {
     public void job2ShouldBeInBadJobList_dueToSize() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         builder.addVehicle(VehicleImpl.Builder.newInstance("v1").setEarliestStart(0).setLatestArrival(12).setStartLocation(Location.newInstance(1, 1)).build());
-        Service job1 = Service.Builder.newInstance("job1").setLocation(Location.newInstance(0, 0)).setTimeWindow(TimeWindow.newInstance(0, 12)).setServiceTime(1).build();
+        Service job1 = new Service.Builder("job1").setLocation(Location.newInstance(0, 0)).setTimeWindow(TimeWindow.newInstance(0, 12)).setServiceTime(1).build();
         builder.addJob(job1);
-        Service job2 = Service.Builder.newInstance("job2").setLocation(Location.newInstance(2, 2)).addSizeDimension(0, 10).setTimeWindow(TimeWindow.newInstance(0, 12)).setServiceTime(1).build();
+        Service job2 = new Service.Builder("job2").setLocation(Location.newInstance(2, 2)).addSizeDimension(0, 10).setTimeWindow(TimeWindow.newInstance(0, 12)).setServiceTime(1).build();
         builder.addJob(job2);
 
         VehicleRoutingProblem vrp = builder.build();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/VariableDepartureAndWaitingTime_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/VariableDepartureAndWaitingTime_IT.java
index aac174a7e..7fe1be80f 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/VariableDepartureAndWaitingTime_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/VariableDepartureAndWaitingTime_IT.java
@@ -99,8 +99,8 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
     @Test
     public void plainSetupShouldWork() {
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
-        Service s1 = Service.Builder.newInstance("s1").setLocation(Location.newInstance(10, 0)).build();
-        Service s2 = Service.Builder.newInstance("s2").setLocation(Location.newInstance(20, 0)).build();
+        Service s1 = new Service.Builder("s1").setLocation(Location.newInstance(10, 0)).build();
+        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(20, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance()
             .addJob(s1).addJob(s2).addVehicle(v)
             .setFleetSize(VehicleRoutingProblem.FleetSize.FINITE)
@@ -115,8 +115,8 @@ public void plainSetupShouldWork() {
     @Test
     public void withTimeWindowsShouldWork() {
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
-        Service s1 = Service.Builder.newInstance("s1").setTimeWindow(TimeWindow.newInstance(1010, 1100)).setLocation(Location.newInstance(10, 0)).build();
-        Service s2 = Service.Builder.newInstance("s2").setTimeWindow(TimeWindow.newInstance(1020, 1100)).setLocation(Location.newInstance(20, 0)).build();
+        Service s1 = new Service.Builder("s1").setTimeWindow(TimeWindow.newInstance(1010, 1100)).setLocation(Location.newInstance(10, 0)).build();
+        Service s2 = new Service.Builder("s2").setTimeWindow(TimeWindow.newInstance(1020, 1100)).setLocation(Location.newInstance(20, 0)).build();
         final VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance()
             .addJob(s1).addJob(s2).addVehicle(v)
             .setFleetSize(VehicleRoutingProblem.FleetSize.FINITE)
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/box/JspritTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/box/JspritTest.java
index 0454e94cb..613f6bd95 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/box/JspritTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/box/JspritTest.java
@@ -46,7 +46,7 @@
 
     @Test
     public void whenRunningJspritWithSingleCustomer_itShouldWork() {
-        Service s = Service.Builder.newInstance("s1").setLocation(Location.newInstance(1, 1)).build();
+        Service s = new Service.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addVehicle(v).addJob(s).build();
         VehicleRoutingAlgorithm vra = Jsprit.createAlgorithm(vrp);
@@ -76,8 +76,8 @@ private void count(String strategyId) {
 
     @Test
     public void whenActivatingStrat_itShouldBeReflected() {
-        Service s = Service.Builder.newInstance("s1").setLocation(Location.newInstance(1, 1)).build();
-        Service s2 = Service.Builder.newInstance("s2").setLocation(Location.newInstance(1, 2)).build();
+        Service s = new Service.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
+        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(1, 2)).build();
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addVehicle(v).addJob(s2).addJob(s).build();
         VehicleRoutingAlgorithm vra = Jsprit.Builder.newInstance(vrp)
@@ -104,9 +104,9 @@ private void count(String strategyId) {
 
     @Test
     public void whenActivatingStrat_itShouldBeReflectedV2() {
-        Service s = Service.Builder.newInstance("s1").setLocation(Location.newInstance(1, 1)).build();
-        Service s2 = Service.Builder.newInstance("s2").setLocation(Location.newInstance(1, 2)).build();
-        Service s3 = Service.Builder.newInstance("s3").setLocation(Location.newInstance(1, 2)).build();
+        Service s = new Service.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
+        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(1, 2)).build();
+        Service s3 = new Service.Builder("s3").setLocation(Location.newInstance(1, 2)).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(s3).addVehicle(v).addJob(s2).addJob(s).build();
@@ -132,10 +132,10 @@ private void count(String strategyId) {
 
     @Test
     public void test_v4() {
-        Service s = Service.Builder.newInstance("s1").setLocation(Location.newInstance(1, 1)).build();
-        Service s2 = Service.Builder.newInstance("s2").setLocation(Location.newInstance(1, 2)).build();
-        Service s3 = Service.Builder.newInstance("s3").setLocation(Location.newInstance(1, 2)).build();
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance(1, 2)).build();
+        Service s = new Service.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
+        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(1, 2)).build();
+        Service s3 = new Service.Builder("s3").setLocation(Location.newInstance(1, 2)).build();
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance(1, 2)).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(s4).addJob(s3).addVehicle(v).addJob(s2).addJob(s).build();
@@ -162,10 +162,10 @@ private void count(String strategyId) {
 
     @Test
     public void strategyDrawShouldBeReproducible() {
-        Service s = Service.Builder.newInstance("s1").setLocation(Location.newInstance(1, 1)).build();
-        Service s2 = Service.Builder.newInstance("s2").setLocation(Location.newInstance(1, 2)).build();
-        Service s3 = Service.Builder.newInstance("s3").setLocation(Location.newInstance(1, 2)).build();
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance(1, 2)).build();
+        Service s = new Service.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
+        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(1, 2)).build();
+        Service s3 = new Service.Builder("s3").setLocation(Location.newInstance(1, 2)).build();
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance(1, 2)).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(s4).addJob(s3).addVehicle(v).addJob(s2).addJob(s).build();
@@ -207,10 +207,10 @@ public void informSelectedStrategy(SearchStrategy.DiscoveredSolution discoveredS
 
     @Test
     public void strategyDrawShouldBeReproducibleV2() {
-        Service s = Service.Builder.newInstance("s1").setLocation(Location.newInstance(1, 1)).build();
-        Service s2 = Service.Builder.newInstance("s2").setLocation(Location.newInstance(1, 2)).build();
-        Service s3 = Service.Builder.newInstance("s3").setLocation(Location.newInstance(1, 2)).build();
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance(1, 2)).build();
+        Service s = new Service.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
+        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(1, 2)).build();
+        Service s3 = new Service.Builder("s3").setLocation(Location.newInstance(1, 2)).build();
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance(1, 2)).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(s4).addJob(s3).addVehicle(v).addJob(s2).addJob(s).build();
@@ -252,10 +252,10 @@ public void informSelectedStrategy(SearchStrategy.DiscoveredSolution discoveredS
 
     @Test
     public void ruinedJobsShouldBeReproducible() {
-        Service s = Service.Builder.newInstance("s1").setLocation(Location.newInstance(1, 1)).build();
-        Service s2 = Service.Builder.newInstance("s2").setLocation(Location.newInstance(1, 2)).build();
-        Service s3 = Service.Builder.newInstance("s3").setLocation(Location.newInstance(1, 2)).build();
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance(1, 2)).build();
+        Service s = new Service.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
+        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(1, 2)).build();
+        Service s3 = new Service.Builder("s3").setLocation(Location.newInstance(1, 2)).build();
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance(1, 2)).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(s4).addJob(s3).addVehicle(v).addJob(s2).addJob(s).build();
@@ -318,10 +318,10 @@ public void removed(Job job, VehicleRoute fromRoute) {
 
     @Test
     public void ruinedJobsShouldBeReproducibleV2() {
-        Service s = Service.Builder.newInstance("s1").setLocation(Location.newInstance(1, 1)).build();
-        Service s2 = Service.Builder.newInstance("s2").setLocation(Location.newInstance(1, 2)).build();
-        Service s3 = Service.Builder.newInstance("s3").setLocation(Location.newInstance(1, 2)).build();
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance(1, 2)).build();
+        Service s = new Service.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
+        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(1, 2)).build();
+        Service s3 = new Service.Builder("s3").setLocation(Location.newInstance(1, 2)).build();
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance(1, 2)).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(s4).addJob(s3).addVehicle(v).addJob(s2).addJob(s).build();
@@ -378,10 +378,10 @@ public void removed(Job job, VehicleRoute fromRoute) {
 
     @Test
     public void insertionShouldBeReproducible() {
-        Service s = Service.Builder.newInstance("s1").setLocation(Location.newInstance(1, 1)).build();
-        Service s2 = Service.Builder.newInstance("s2").setLocation(Location.newInstance(1, 2)).build();
-        Service s3 = Service.Builder.newInstance("s3").setLocation(Location.newInstance(1, 2)).build();
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance(1, 2)).build();
+        Service s = new Service.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
+        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(1, 2)).build();
+        Service s3 = new Service.Builder("s3").setLocation(Location.newInstance(1, 2)).build();
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance(1, 2)).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(s4).addJob(s3).addVehicle(v).addJob(s2).addJob(s).build();
@@ -419,10 +419,10 @@ public void informJobInserted(Job job2insert, VehicleRoute inRoute, double addit
 
     @Test
     public void insertionShouldBeReproducibleV2() {
-        Service s = Service.Builder.newInstance("s1").setLocation(Location.newInstance(1, 1)).build();
-        Service s2 = Service.Builder.newInstance("s2").setLocation(Location.newInstance(1, 1)).build();
-        Service s3 = Service.Builder.newInstance("s3").setLocation(Location.newInstance(1, 3)).build();
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance(1, 4)).build();
+        Service s = new Service.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
+        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(1, 1)).build();
+        Service s3 = new Service.Builder("s3").setLocation(Location.newInstance(1, 3)).build();
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance(1, 4)).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().setFleetSize(VehicleRoutingProblem.FleetSize.FINITE).addJob(s4).addJob(s3).addVehicle(v).addJob(s2).addJob(s).build();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ConfigureFixCostCalculatorTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ConfigureFixCostCalculatorTest.java
index 5ed06ce64..3cd25b5d6 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ConfigureFixCostCalculatorTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ConfigureFixCostCalculatorTest.java
@@ -19,9 +19,9 @@
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
-import com.graphhopper.jsprit.core.problem.AbstractJob;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
+import com.graphhopper.jsprit.core.problem.job.AbstractJob;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.job.Service;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
@@ -46,7 +46,7 @@
     public void before(){
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         for(int i=0;i<100;i++){
-            Service service = Service.Builder.newInstance("" + i).setLocation(Location.newInstance(0)).build();
+            Service service = new Service.Builder("" + i).setLocation(Location.newInstance(0)).build();
             vrpBuilder.addJob(service);
         }
         vrp = vrpBuilder.build();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionTest.java
index 0a0a7366e..88c285fda 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionTest.java
@@ -52,8 +52,8 @@
 
     @Test
     public void noRoutesShouldBeCorrect() {
-        Service s1 = Service.Builder.newInstance("s1").setLocation(Location.newInstance(0, 10)).build();
-        Service s2 = Service.Builder.newInstance("s2").setLocation(Location.newInstance(0, 5)).build();
+        Service s1 = new Service.Builder("s1").setLocation(Location.newInstance(0, 10)).build();
+        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(0, 5)).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(s1).addJob(s2).addVehicle(v).build();
@@ -69,8 +69,8 @@ public void noRoutesShouldBeCorrect() {
 
     @Test
     public void noJobsInRouteShouldBeCorrect() {
-        Service s1 = Service.Builder.newInstance("s1").setLocation(Location.newInstance(0, 10)).build();
-        Service s2 = Service.Builder.newInstance("s2").setLocation(Location.newInstance(0, 5)).build();
+        Service s1 = new Service.Builder("s1").setLocation(Location.newInstance(0, 10)).build();
+        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(0, 5)).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(s1).addJob(s2).addVehicle(v).build();
@@ -86,8 +86,8 @@ public void noJobsInRouteShouldBeCorrect() {
 
     @Test
     public void s1ShouldBeAddedFirst() {
-        Service s1 = Service.Builder.newInstance("s1").setLocation(Location.newInstance(0, 10)).build();
-        Service s2 = Service.Builder.newInstance("s2").setLocation(Location.newInstance(0, 5)).build();
+        Service s1 = new Service.Builder("s1").setLocation(Location.newInstance(0, 10)).build();
+        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(0, 5)).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         final VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(s1).addJob(s2).addVehicle(v).build();
@@ -105,8 +105,8 @@ public void s1ShouldBeAddedFirst() {
 
     @Test
     public void solutionWithFastRegretMustBeCorrect() {
-        Service s1 = Service.Builder.newInstance("s1").setLocation(Location.newInstance(0, 10)).build();
-        Service s2 = Service.Builder.newInstance("s2").setLocation(Location.newInstance(0, -10)).build();
+        Service s1 = new Service.Builder("s1").setLocation(Location.newInstance(0, 10)).build();
+        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(0, -10)).build();
 
         VehicleImpl v1 = VehicleImpl.Builder.newInstance("v1").setStartLocation(Location.newInstance(0, 5)).build();
         VehicleImpl v2 = VehicleImpl.Builder.newInstance("v2").setStartLocation(Location.newInstance(0, -5)).build();
@@ -206,10 +206,10 @@ public boolean fulfilled(JobInsertionContext insertionContext) {
 
     @Test
     public void solutionWithConstraintAndWithFastRegretMustBeCorrect() {
-        Service s1 = Service.Builder.newInstance("s1").addSizeDimension(0,1).setLocation(Location.newInstance(0, 10)).build();
-        Service s2 = Service.Builder.newInstance("s2").addSizeDimension(0,1).setLocation(Location.newInstance(0, -10)).build();
-        Service s3 = Service.Builder.newInstance("s3").addSizeDimension(0,1).setLocation(Location.newInstance(0, -11)).build();
-        Service s4 = Service.Builder.newInstance("s4").addSizeDimension(0,1).setLocation(Location.newInstance(0, 11)).build();
+        Service s1 = new Service.Builder("s1").addSizeDimension(0,1).setLocation(Location.newInstance(0, 10)).build();
+        Service s2 = new Service.Builder("s2").addSizeDimension(0,1).setLocation(Location.newInstance(0, -10)).build();
+        Service s3 = new Service.Builder("s3").addSizeDimension(0,1).setLocation(Location.newInstance(0, -11)).build();
+        Service s4 = new Service.Builder("s4").addSizeDimension(0,1).setLocation(Location.newInstance(0, 11)).build();
 
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0,2).build();
         VehicleImpl v1 = VehicleImpl.Builder.newInstance("v1").setType(type).setStartLocation(Location.newInstance(0, 10)).build();
@@ -254,10 +254,10 @@ public void solutionWithConstraintAndWithFastRegretMustBeCorrect() {
 
     @Test
     public void solutionWithConstraintAndWithFastRegretConcurrentMustBeCorrect() {
-        Service s1 = Service.Builder.newInstance("s1").addSizeDimension(0,1).setLocation(Location.newInstance(0, 10)).build();
-        Service s2 = Service.Builder.newInstance("s2").addSizeDimension(0,1).setLocation(Location.newInstance(0, -10)).build();
-        Service s3 = Service.Builder.newInstance("s3").addSizeDimension(0,1).setLocation(Location.newInstance(0, -11)).build();
-        Service s4 = Service.Builder.newInstance("s4").addSizeDimension(0,1).setLocation(Location.newInstance(0, 11)).build();
+        Service s1 = new Service.Builder("s1").addSizeDimension(0,1).setLocation(Location.newInstance(0, 10)).build();
+        Service s2 = new Service.Builder("s2").addSizeDimension(0,1).setLocation(Location.newInstance(0, -10)).build();
+        Service s3 = new Service.Builder("s3").addSizeDimension(0,1).setLocation(Location.newInstance(0, -11)).build();
+        Service s4 = new Service.Builder("s4").addSizeDimension(0,1).setLocation(Location.newInstance(0, 11)).build();
 
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0,2).build();
         VehicleImpl v1 = VehicleImpl.Builder.newInstance("v1").setType(type).setStartLocation(Location.newInstance(0, 10)).build();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ServiceInsertionAndLoadConstraintsTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ServiceInsertionAndLoadConstraintsTest.java
index 732618211..8073bfff4 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ServiceInsertionAndLoadConstraintsTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ServiceInsertionAndLoadConstraintsTest.java
@@ -114,8 +114,8 @@ private void createInsertionCalculator(HardRouteConstraint hardRouteLevelConstra
 
     @Test
     public void whenInsertingServiceWhileNoCapIsAvailable_itMustReturnTheCorrectInsertionIndex() {
-        Delivery delivery = (Delivery) Delivery.Builder.newInstance("del").addSizeDimension(0, 41).setLocation(Location.newInstance("10,10")).build();
-        Pickup pickup = (Pickup) Pickup.Builder.newInstance("pick").addSizeDimension(0, 15).setLocation(Location.newInstance("0,10")).build();
+        Delivery delivery = (Delivery) new Delivery.Builder("del").addSizeDimension(0, 41).setLocation(Location.newInstance("10,10")).build();
+        Pickup pickup = (Pickup) new Pickup.Builder("pick").addSizeDimension(0, 15).setLocation(Location.newInstance("0,10")).build();
 
         VehicleType type = VehicleTypeImpl.Builder.newInstance("t").addCapacityDimension(0, 50).setCostPerDistance(1).build();
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance("0,0")).setType(type).build();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ShipmentInsertionCalculatorTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ShipmentInsertionCalculatorTest.java
index 1fb45993d..946ff44aa 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ShipmentInsertionCalculatorTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ShipmentInsertionCalculatorTest.java
@@ -17,6 +17,18 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionListeners;
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.problem.IndexedActivity;
@@ -36,9 +48,9 @@
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverShipment;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupService;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupShipment;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverShipmentDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupServiceDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupShipmentDEPRECATED;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.state.RouteAndActivityStateGetter;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
@@ -46,17 +58,6 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.CostFactory;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
 
 
 public class ShipmentInsertionCalculatorTest {
@@ -116,8 +117,8 @@ public void whenCalculatingInsertionCostsOfShipment_itShouldReturnCorrectCostVal
         VehicleRoute route = VehicleRoute.emptyRoute();
         JobActivityFactory activityFactory = mock(JobActivityFactory.class);
         List<IndexedActivity> activities = new ArrayList<IndexedActivity>();
-        activities.add(new PickupShipment(shipment));
-        activities.add(new DeliverShipment(shipment));
+        activities.add(new PickupShipmentDEPRECATED(shipment));
+        activities.add(new DeliverShipmentDEPRECATED(shipment));
         when(activityFactory.createActivities(shipment)).thenReturn(activities);
         insertionCalculator.setJobActivityFactory(activityFactory);
         InsertionData iData = insertionCalculator.getInsertionData(route, shipment, vehicle, 0.0, null, Double.MAX_VALUE);
@@ -134,8 +135,8 @@ public void whenCalculatingInsertionIntoExistingRoute_itShouldReturnCorrectCosts
 
         JobActivityFactory activityFactory = mock(JobActivityFactory.class);
         List<IndexedActivity> activities = new ArrayList<IndexedActivity>();
-        activities.add(new PickupShipment(shipment2));
-        activities.add(new DeliverShipment(shipment2));
+        activities.add(new PickupShipmentDEPRECATED(shipment2));
+        activities.add(new DeliverShipmentDEPRECATED(shipment2));
         when(activityFactory.createActivities(shipment2)).thenReturn(activities);
         insertionCalculator.setJobActivityFactory(activityFactory);
 
@@ -147,8 +148,8 @@ public void whenCalculatingInsertionIntoExistingRoute_itShouldReturnCorrectCosts
 
     private List<IndexedActivity> getTourActivities(Shipment shipment) {
         List<IndexedActivity> acts = new ArrayList<IndexedActivity>();
-        PickupShipment pick = new PickupShipment(shipment);
-        DeliverShipment del = new DeliverShipment(shipment);
+        PickupShipmentDEPRECATED pick = new PickupShipmentDEPRECATED(shipment);
+        DeliverShipmentDEPRECATED del = new DeliverShipmentDEPRECATED(shipment);
         acts.add(pick);
         acts.add(del);
         return acts;
@@ -172,8 +173,8 @@ public boolean fulfilled(JobInsertionContext insertionContext) {
 
         JobActivityFactory activityFactory = mock(JobActivityFactory.class);
         List<IndexedActivity> activities = new ArrayList<IndexedActivity>();
-        activities.add(new PickupShipment(shipment2));
-        activities.add(new DeliverShipment(shipment2));
+        activities.add(new PickupShipmentDEPRECATED(shipment2));
+        activities.add(new DeliverShipmentDEPRECATED(shipment2));
         when(activityFactory.createActivities(shipment2)).thenReturn(activities);
         insertionCalculator.setJobActivityFactory(activityFactory);
 
@@ -198,8 +199,8 @@ public void whenInsertingThirdShipment_itShouldCalcCorrectVal() {
 
         JobActivityFactory activityFactory = mock(JobActivityFactory.class);
         List<IndexedActivity> activities = new ArrayList<IndexedActivity>();
-        activities.add(new PickupShipment(shipment3));
-        activities.add(new DeliverShipment(shipment3));
+        activities.add(new PickupShipmentDEPRECATED(shipment3));
+        activities.add(new DeliverShipmentDEPRECATED(shipment3));
         when(activityFactory.createActivities(shipment3)).thenReturn(activities);
         insertionCalculator.setJobActivityFactory(activityFactory);
 
@@ -223,8 +224,8 @@ public void whenInsertingThirdShipment_itShouldCalcCorrectVal2() {
 
         JobActivityFactory activityFactory = mock(JobActivityFactory.class);
         List<IndexedActivity> activities = new ArrayList<IndexedActivity>();
-        activities.add(new PickupShipment(shipment3));
-        activities.add(new DeliverShipment(shipment3));
+        activities.add(new PickupShipmentDEPRECATED(shipment3));
+        activities.add(new DeliverShipmentDEPRECATED(shipment3));
         when(activityFactory.createActivities(shipment3)).thenReturn(activities);
         insertionCalculator.setJobActivityFactory(activityFactory);
 
@@ -260,7 +261,7 @@ public void whenInstertingShipmentWithLoadConstraintWhereCapIsNotSufficient_capC
         constraintManager.addConstraint(new ShipmentPickupsFirstConstraint(), ConstraintManager.Priority.CRITICAL);
 
         ShipmentInsertionCalculator insertionCalculator = new ShipmentInsertionCalculator(routingCosts, activityCosts,
-            activityInsertionCostsCalculator, constraintManager);
+                activityInsertionCostsCalculator, constraintManager);
         insertionCalculator.setJobActivityFactory(vrp.getJobActivityFactory());
 
         InsertionData iData = insertionCalculator.getInsertionData(route, shipment3, vehicle, 0.0, DriverImpl.noDriver(), Double.MAX_VALUE);
@@ -300,12 +301,12 @@ public void whenInsertingServiceWhileNoCapIsAvailable_itMustReturnNoInsertionDat
         switcher.put(Service.class, serviceInsertionCalc);
         switcher.put(Shipment.class, insertionCalculator);
 
-//		Service service = Service.Builder.newInstance("pick", 1).setLocationId("5,5").build();
-        Pickup service = (Pickup) Pickup.Builder.newInstance("pick").addSizeDimension(0, 1).setLocation(Location.newInstance("5,5")).build();
+//		Service service = new Service.Builder("pick", 1).setLocationId("5,5").build();
+        Pickup service = new Pickup.Builder("pick").addSizeDimension(0, 1).setLocation(Location.newInstance("5,5")).build();
 
         JobActivityFactory activityFactory = mock(JobActivityFactory.class);
         List<IndexedActivity> activities = new ArrayList<IndexedActivity>();
-        activities.add(new PickupService(service));
+        activities.add(new PickupServiceDEPRECATED(service));
         when(activityFactory.createActivities(service)).thenReturn(activities);
         insertionCalculator.setJobActivityFactory(activityFactory);
         serviceInsertionCalc.setJobActivityFactory(activityFactory);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestAuxilliaryCostCalculator.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestAuxilliaryCostCalculator.java
index 674a7851a..b3967499f 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestAuxilliaryCostCalculator.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestAuxilliaryCostCalculator.java
@@ -17,20 +17,21 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+import java.util.Arrays;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingActivityCosts;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.End;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.Arrays;
-
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
 
 public class TestAuxilliaryCostCalculator {
 
@@ -79,7 +80,7 @@ public void whenRouteIsClosed_itCalculatesCostUpToEnd_v1() {
     public void whenRouteIsClosed_itCalculatesCostUpToEnd_v2() {
         TourActivity prevAct = mock(TourActivity.class);
         when(prevAct.getLocation()).thenReturn(loc("i"));
-        End nextAct = new End("j", 0.0, 0.0);
+        End nextAct = End.newInstance("j", 0.0, 0.0);
         TourActivity newAct = mock(TourActivity.class);
         when(newAct.getLocation()).thenReturn(loc("k"));
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestCalculatesServiceInsertion.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestCalculatesServiceInsertion.java
index f32b32dfd..34dc3c41a 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestCalculatesServiceInsertion.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestCalculatesServiceInsertion.java
@@ -108,9 +108,9 @@ public double getTransportCost(Location from, Location to, double departureTime,
         };
 
 
-        first = Service.Builder.newInstance("1").addSizeDimension(0, 0).setLocation(Location.newInstance("0,10")).setTimeWindow(TimeWindow.newInstance(0.0, 100.0)).build();
-        second = Service.Builder.newInstance("2").addSizeDimension(0, 0).setLocation(Location.newInstance("10,10")).setTimeWindow(TimeWindow.newInstance(0.0, 100.0)).build();
-        third = Service.Builder.newInstance("3").addSizeDimension(0, 0).setLocation(Location.newInstance("10,0")).setTimeWindow(TimeWindow.newInstance(0.0, 100.0)).build();
+        first = new Service.Builder("1").addSizeDimension(0, 0).setLocation(Location.newInstance("0,10")).setTimeWindow(TimeWindow.newInstance(0.0, 100.0)).build();
+        second = new Service.Builder("2").addSizeDimension(0, 0).setLocation(Location.newInstance("10,10")).setTimeWindow(TimeWindow.newInstance(0.0, 100.0)).build();
+        third = new Service.Builder("3").addSizeDimension(0, 0).setLocation(Location.newInstance("10,0")).setTimeWindow(TimeWindow.newInstance(0.0, 100.0)).build();
 
         Collection<Job> jobs = new ArrayList<Job>();
         jobs.add(first);
@@ -206,7 +206,7 @@ public void whenInsertingASecondJobWithANewVehicle_itCalculatesLocalMarginalCost
     public void whenInsertingJobAndCurrRouteIsEmpty_accessEggressCalcShouldReturnZero() {
         VehicleRoute route = VehicleRoute.Builder.newInstance(VehicleImpl.createNoVehicle(), DriverImpl.noDriver()).build();
         AdditionalAccessEgressCalculator accessEgressCalc = new AdditionalAccessEgressCalculator(costs);
-        Job job = Service.Builder.newInstance("1").addSizeDimension(0, 0).setLocation(Location.newInstance("1")).setTimeWindow(TimeWindow.newInstance(0.0, 100.0)).build();
+        Job job = new Service.Builder("1").addSizeDimension(0, 0).setLocation(Location.newInstance("1")).setTimeWindow(TimeWindow.newInstance(0.0, 100.0)).build();
         JobInsertionContext iContex = new JobInsertionContext(route, job, newVehicle, mock(Driver.class), 0.0);
         assertEquals(0.0, accessEgressCalc.getCosts(iContex), 0.01);
     }
@@ -244,13 +244,13 @@ public double getTransportCost(Location from, Location to, double departureTime,
         Vehicle oldVehicle = VehicleImpl.Builder.newInstance("oldV").setStartLocation(Location.newInstance("oldV")).build();
 
         VehicleRoute route = VehicleRoute.Builder.newInstance(oldVehicle, DriverImpl.noDriver())
-            .addService(Service.Builder.newInstance("service").addSizeDimension(0, 0).setLocation(Location.newInstance("service")).build())
+            .addService(new Service.Builder("service").addSizeDimension(0, 0).setLocation(Location.newInstance("service")).build())
             .build();
 
         Vehicle newVehicle = VehicleImpl.Builder.newInstance("newV").setStartLocation(Location.newInstance("newV")).build();
 
         AdditionalAccessEgressCalculator accessEgressCalc = new AdditionalAccessEgressCalculator(routingCosts);
-        Job job = Service.Builder.newInstance("service2").addSizeDimension(0, 0).setLocation(Location.newInstance("service")).build();
+        Job job = new Service.Builder("service2").addSizeDimension(0, 0).setLocation(Location.newInstance("service")).build();
         JobInsertionContext iContex = new JobInsertionContext(route, job, newVehicle, mock(Driver.class), 0.0);
         assertEquals(8.0, accessEgressCalc.getCosts(iContex), 0.01);
     }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestCalculatesServiceInsertionOnRouteLevel.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestCalculatesServiceInsertionOnRouteLevel.java
index 5d7ff0262..400661a4d 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestCalculatesServiceInsertionOnRouteLevel.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestCalculatesServiceInsertionOnRouteLevel.java
@@ -99,9 +99,9 @@ public double getTransportCost(Location from, Location to, double departureTime,
 
         };
 
-        first = Service.Builder.newInstance("1").setLocation(Location.newInstance("0,10")).setTimeWindow(TimeWindow.newInstance(0.0, 100.0)).build();
-        second = Service.Builder.newInstance("3").setLocation(Location.newInstance("10,0")).setTimeWindow(TimeWindow.newInstance(0.0, 100.0)).build();
-        third = Service.Builder.newInstance("2").setLocation(Location.newInstance("10,10")).setTimeWindow(TimeWindow.newInstance(0.0, 100.0)).build();
+        first = new Service.Builder("1").setLocation(Location.newInstance("0,10")).setTimeWindow(TimeWindow.newInstance(0.0, 100.0)).build();
+        second = new Service.Builder("3").setLocation(Location.newInstance("10,0")).setTimeWindow(TimeWindow.newInstance(0.0, 100.0)).build();
+        third = new Service.Builder("2").setLocation(Location.newInstance("10,10")).setTimeWindow(TimeWindow.newInstance(0.0, 100.0)).build();
         Collection<Job> jobs = new ArrayList<Job>();
         jobs.add(first);
         jobs.add(second);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestComparator.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestComparator.java
index d3eec4dc9..84224015d 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestComparator.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestComparator.java
@@ -35,13 +35,13 @@
 
     @Test
     public void test(){
-        Service s = Service.Builder.newInstance("1").setLocation(Location.newInstance("loc"))
+        Service s = new Service.Builder("1").setLocation(Location.newInstance("loc"))
             .setPriority(1).build();
-        Service s2 = Service.Builder.newInstance("2").setLocation(Location.newInstance("loc"))
+        Service s2 = new Service.Builder("2").setLocation(Location.newInstance("loc"))
             .setPriority(2).build();
-        Service s3 = Service.Builder.newInstance("3").setLocation(Location.newInstance("loc"))
+        Service s3 = new Service.Builder("3").setLocation(Location.newInstance("loc"))
             .setPriority(3).build();
-        Service s4 = Service.Builder.newInstance("4").setLocation(Location.newInstance("loc"))
+        Service s4 = new Service.Builder("4").setLocation(Location.newInstance("loc"))
             .setPriority(1).build();
         List<Job> jobs = new ArrayList<Job>();
         jobs.add(s2);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestInserter.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestInserter.java
index c470478dd..3e0b3e696 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestInserter.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestInserter.java
@@ -17,31 +17,32 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionListeners;
 import com.graphhopper.jsprit.core.algorithm.state.UpdateEndLocationIfRouteIsOpen;
-import com.graphhopper.jsprit.core.problem.IndexedActivity;
 import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.IndexedActivity;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.driver.Driver;
 import com.graphhopper.jsprit.core.problem.job.Service;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverShipment;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupService;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupShipment;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverShipmentDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupServiceDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupShipmentDEPRECATED;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
-import org.junit.Test;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
 
 public class TestInserter {
 
@@ -68,7 +69,7 @@ public void whenInsertingServiceAndRouteIsClosed_itInsertsCorrectly() {
 
         VehicleRoutingProblem vehicleRoutingProblem = mock(VehicleRoutingProblem.class);
         List<IndexedActivity> acts = new ArrayList<IndexedActivity>();
-        PickupService act = new PickupService(serviceToInsert);
+        PickupServiceDEPRECATED act = new PickupServiceDEPRECATED(serviceToInsert);
         acts.add(act);
         when(vehicleRoutingProblem.copyAndGetActivities(serviceToInsert)).thenReturn(acts);
         Inserter inserter = new Inserter(mock(InsertionListeners.class), vehicleRoutingProblem);
@@ -115,7 +116,7 @@ public void whenInsertingServiceAndRouteIsOpen_itInsertsCorrectlyAndSwitchesEndL
 
     private List<IndexedActivity> getTourActivities(Service serviceToInsert) {
         List<IndexedActivity> acts = new ArrayList<IndexedActivity>();
-        acts.add(new PickupService(serviceToInsert));
+        acts.add(new PickupServiceDEPRECATED(serviceToInsert));
         return acts;
     }
 
@@ -156,8 +157,8 @@ public void whenInsertingShipmentAndRouteIsClosed_itInsertsCorrectly() {
 
     private List<IndexedActivity> getTourActivities(Shipment shipmentToInsert) {
         List<IndexedActivity> acts = new ArrayList<IndexedActivity>();
-        acts.add(new PickupShipment(shipmentToInsert));
-        acts.add(new DeliverShipment(shipmentToInsert));
+        acts.add(new PickupShipmentDEPRECATED(shipmentToInsert));
+        acts.add(new DeliverShipmentDEPRECATED(shipmentToInsert));
         return acts;
     }
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestLocalActivityInsertionCostsCalculator.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestLocalActivityInsertionCostsCalculator.java
index 66ff50630..4d1b294dc 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestLocalActivityInsertionCostsCalculator.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestLocalActivityInsertionCostsCalculator.java
@@ -163,9 +163,9 @@ public void whenInsertingActBetweenLastActAndEndAndRouteIsOpen_itCalculatesTpCos
     public void test() {
         VehicleTypeImpl type = VehicleTypeImpl.Builder.newInstance("t").setCostPerWaitingTime(1.).build();
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance(0, 0)).build();
-        Service prevS = Service.Builder.newInstance("prev").setLocation(Location.newInstance(10, 0)).build();
-        Service newS = Service.Builder.newInstance("new").setServiceTime(10).setLocation(Location.newInstance(60, 0)).build();
-        Service nextS = Service.Builder.newInstance("next").setLocation(Location.newInstance(30, 0)).setTimeWindow(TimeWindow.newInstance(40, 80)).build();
+        Service prevS = new Service.Builder("prev").setLocation(Location.newInstance(10, 0)).build();
+        Service newS = new Service.Builder("new").setServiceTime(10).setLocation(Location.newInstance(60, 0)).build();
+        Service nextS = new Service.Builder("next").setLocation(Location.newInstance(30, 0)).setTimeWindow(TimeWindow.newInstance(40, 80)).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(prevS).addJob(newS).addJob(nextS).addVehicle(v).build();
 
@@ -198,8 +198,8 @@ public void whenAddingNewBetweenStartAndAct_itShouldCalcInsertionCostsCorrectly(
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance(0, 0)).build();
 
-        Service newS = Service.Builder.newInstance("new").setServiceTime(10).setLocation(Location.newInstance(10, 0)).build();
-        Service nextS = Service.Builder.newInstance("next").setLocation(Location.newInstance(30, 0))
+        Service newS = new Service.Builder("new").setServiceTime(10).setLocation(Location.newInstance(10, 0)).build();
+        Service nextS = new Service.Builder("next").setLocation(Location.newInstance(30, 0))
             .setTimeWindow(TimeWindow.newInstance(40, 50)).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(newS).addJob(nextS).addVehicle(v).build();
@@ -225,8 +225,8 @@ public void whenAddingNewBetweenStartAndAct2_itShouldCalcInsertionCostsCorrectly
 
         VehicleImpl v2 = VehicleImpl.Builder.newInstance("v2").setType(type).setStartLocation(Location.newInstance(0, 0)).build();
 
-        Service newS = Service.Builder.newInstance("new").setServiceTime(10).setLocation(Location.newInstance(10, 0)).build();
-        Service nextS = Service.Builder.newInstance("next").setLocation(Location.newInstance(30, 0))
+        Service newS = new Service.Builder("new").setServiceTime(10).setLocation(Location.newInstance(10, 0)).build();
+        Service nextS = new Service.Builder("next").setLocation(Location.newInstance(30, 0))
             .setTimeWindow(TimeWindow.newInstance(140, 150)).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(newS).addJob(nextS).addVehicle(v2).build();
@@ -251,7 +251,7 @@ public void whenAddingNewInEmptyRoute_itShouldCalcInsertionCostsCorrectly() {
         VehicleTypeImpl type = VehicleTypeImpl.Builder.newInstance("t").setCostPerWaitingTime(1.).build();
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance(0, 0)).build();
 
-        Service newS = Service.Builder.newInstance("new").setServiceTime(10).setLocation(Location.newInstance(10, 0)).setTimeWindow(TimeWindow.newInstance(100, 150)).build();
+        Service newS = new Service.Builder("new").setServiceTime(10).setLocation(Location.newInstance(10, 0)).setTimeWindow(TimeWindow.newInstance(100, 150)).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(newS).addVehicle(v).build();
 
@@ -276,9 +276,9 @@ public void whenAddingNewBetweenTwoActs_itShouldCalcInsertionCostsCorrectly() {
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance(0, 0)).build();
 
-        Service prevS = Service.Builder.newInstance("prev").setLocation(Location.newInstance(10, 0)).build();
-        Service newS = Service.Builder.newInstance("new").setServiceTime(10).setLocation(Location.newInstance(20, 0)).build();
-        Service nextS = Service.Builder.newInstance("next").setLocation(Location.newInstance(30, 0)).setTimeWindow(TimeWindow.newInstance(40, 50)).build();
+        Service prevS = new Service.Builder("prev").setLocation(Location.newInstance(10, 0)).build();
+        Service newS = new Service.Builder("new").setServiceTime(10).setLocation(Location.newInstance(20, 0)).build();
+        Service nextS = new Service.Builder("next").setLocation(Location.newInstance(30, 0)).setTimeWindow(TimeWindow.newInstance(40, 50)).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(prevS).addJob(newS).addJob(nextS).addVehicle(v).build();
 
@@ -303,9 +303,9 @@ public void whenAddingNewWithTWBetweenTwoActs_itShouldCalcInsertionCostsCorrectl
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance(0, 0)).build();
 
-        Service prevS = Service.Builder.newInstance("prev").setLocation(Location.newInstance(10, 0)).build();
-        Service newS = Service.Builder.newInstance("new").setServiceTime(10).setTimeWindow(TimeWindow.newInstance(100, 120)).setLocation(Location.newInstance(20, 0)).build();
-        Service nextS = Service.Builder.newInstance("next").setLocation(Location.newInstance(30, 0)).setTimeWindow(TimeWindow.newInstance(40, 500)).build();
+        Service prevS = new Service.Builder("prev").setLocation(Location.newInstance(10, 0)).build();
+        Service newS = new Service.Builder("new").setServiceTime(10).setTimeWindow(TimeWindow.newInstance(100, 120)).setLocation(Location.newInstance(20, 0)).build();
+        Service nextS = new Service.Builder("next").setLocation(Location.newInstance(30, 0)).setTimeWindow(TimeWindow.newInstance(40, 500)).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(prevS).addJob(newS).addJob(nextS).addVehicle(v).build();
 
@@ -334,11 +334,11 @@ public void whenAddingNewWithTWBetweenTwoActs2_itShouldCalcInsertionCostsCorrect
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance(0, 0)).build();
 //		VehicleImpl v2 = VehicleImpl.Builder.newInstance("v2").setHasVariableDepartureTime(true).setType(type).setStartLocation(Location.newInstance(0,0)).build();
 
-        Service prevS = Service.Builder.newInstance("prev").setLocation(Location.newInstance(10, 0)).build();
-        Service newS = Service.Builder.newInstance("new").setServiceTime(10).setTimeWindow(TimeWindow.newInstance(100, 120)).setLocation(Location.newInstance(20, 0)).build();
-        Service nextS = Service.Builder.newInstance("next").setLocation(Location.newInstance(30, 0)).setTimeWindow(TimeWindow.newInstance(40, 500)).build();
+        Service prevS = new Service.Builder("prev").setLocation(Location.newInstance(10, 0)).build();
+        Service newS = new Service.Builder("new").setServiceTime(10).setTimeWindow(TimeWindow.newInstance(100, 120)).setLocation(Location.newInstance(20, 0)).build();
+        Service nextS = new Service.Builder("next").setLocation(Location.newInstance(30, 0)).setTimeWindow(TimeWindow.newInstance(40, 500)).build();
 
-        Service afterNextS = Service.Builder.newInstance("afterNext").setLocation(Location.newInstance(40, 0)).setTimeWindow(TimeWindow.newInstance(400, 500)).build();
+        Service afterNextS = new Service.Builder("afterNext").setLocation(Location.newInstance(40, 0)).setTimeWindow(TimeWindow.newInstance(400, 500)).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(afterNextS).addJob(prevS).addJob(newS).addJob(nextS).addVehicle(v).build();
 
@@ -373,12 +373,12 @@ public void whenAddingNewWithTWBetweenTwoActs3_itShouldCalcInsertionCostsCorrect
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance(0, 0)).build();
 //		VehicleImpl v2 = VehicleImpl.Builder.newInstance("v2").setHasVariableDepartureTime(true).setType(type).setStartLocation(Location.newInstance(0,0)).build();
 
-        Service prevS = Service.Builder.newInstance("prev").setLocation(Location.newInstance(10, 0)).build();
-        Service newS = Service.Builder.newInstance("new").setServiceTime(10).setTimeWindow(TimeWindow.newInstance(100, 120)).setLocation(Location.newInstance(20, 0)).build();
-        Service nextS = Service.Builder.newInstance("next").setLocation(Location.newInstance(30, 0)).setTimeWindow(TimeWindow.newInstance(40, 500)).build();
+        Service prevS = new Service.Builder("prev").setLocation(Location.newInstance(10, 0)).build();
+        Service newS = new Service.Builder("new").setServiceTime(10).setTimeWindow(TimeWindow.newInstance(100, 120)).setLocation(Location.newInstance(20, 0)).build();
+        Service nextS = new Service.Builder("next").setLocation(Location.newInstance(30, 0)).setTimeWindow(TimeWindow.newInstance(40, 500)).build();
 
-        Service afterNextS = Service.Builder.newInstance("afterNext").setLocation(Location.newInstance(40, 0)).setTimeWindow(TimeWindow.newInstance(80, 500)).build();
-        Service afterAfterNextS = Service.Builder.newInstance("afterAfterNext").setLocation(Location.newInstance(40, 0)).setTimeWindow(TimeWindow.newInstance(100, 500)).build();
+        Service afterNextS = new Service.Builder("afterNext").setLocation(Location.newInstance(40, 0)).setTimeWindow(TimeWindow.newInstance(80, 500)).build();
+        Service afterAfterNextS = new Service.Builder("afterAfterNext").setLocation(Location.newInstance(40, 0)).setTimeWindow(TimeWindow.newInstance(100, 500)).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addVehicle(v).addJob(prevS).addJob(newS).addJob(nextS)
             .addJob(afterNextS).addJob(afterAfterNextS).build();
@@ -425,12 +425,12 @@ public void whenAddingNewWithTWBetweenTwoActs4_itShouldCalcInsertionCostsCorrect
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance(0, 0)).build();
 //		VehicleImpl v2 = VehicleImpl.Builder.newInstance("v2").setHasVariableDepartureTime(true).setType(type).setStartLocation(Location.newInstance(0,0)).build();
 
-        Service prevS = Service.Builder.newInstance("prev").setLocation(Location.newInstance(10, 0)).build();
-        Service newS = Service.Builder.newInstance("new").setServiceTime(10).setTimeWindow(TimeWindow.newInstance(100, 120)).setLocation(Location.newInstance(20, 0)).build();
-        Service nextS = Service.Builder.newInstance("next").setLocation(Location.newInstance(30, 0)).setTimeWindow(TimeWindow.newInstance(40, 500)).build();
+        Service prevS = new Service.Builder("prev").setLocation(Location.newInstance(10, 0)).build();
+        Service newS = new Service.Builder("new").setServiceTime(10).setTimeWindow(TimeWindow.newInstance(100, 120)).setLocation(Location.newInstance(20, 0)).build();
+        Service nextS = new Service.Builder("next").setLocation(Location.newInstance(30, 0)).setTimeWindow(TimeWindow.newInstance(40, 500)).build();
 
-        Service afterNextS = Service.Builder.newInstance("afterNext").setLocation(Location.newInstance(40, 0)).setTimeWindow(TimeWindow.newInstance(80, 500)).build();
-        Service afterAfterNextS = Service.Builder.newInstance("afterAfterNext").setLocation(Location.newInstance(50, 0)).setTimeWindow(TimeWindow.newInstance(100, 500)).build();
+        Service afterNextS = new Service.Builder("afterNext").setLocation(Location.newInstance(40, 0)).setTimeWindow(TimeWindow.newInstance(80, 500)).build();
+        Service afterAfterNextS = new Service.Builder("afterAfterNext").setLocation(Location.newInstance(50, 0)).setTimeWindow(TimeWindow.newInstance(100, 500)).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addVehicle(v).addJob(prevS).addJob(newS).addJob(nextS)
             .addJob(afterNextS).addJob(afterAfterNextS).build();
@@ -480,12 +480,12 @@ public void whenAddingNewWithTWBetweenTwoActs4WithVarStart_itShouldCalcInsertion
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance(0, 0)).build();
 //		VehicleImpl v2 = VehicleImpl.Builder.newInstance("v2").setHasVariableDepartureTime(true).setType(type).setStartLocation(Location.newInstance(0,0)).build();
 
-        Service prevS = Service.Builder.newInstance("prev").setLocation(Location.newInstance(10, 0)).build();
-        Service newS = Service.Builder.newInstance("new").setServiceTime(10).setTimeWindow(TimeWindow.newInstance(100, 120)).setLocation(Location.newInstance(20, 0)).build();
-        Service nextS = Service.Builder.newInstance("next").setLocation(Location.newInstance(30, 0)).setTimeWindow(TimeWindow.newInstance(40, 500)).build();
+        Service prevS = new Service.Builder("prev").setLocation(Location.newInstance(10, 0)).build();
+        Service newS = new Service.Builder("new").setServiceTime(10).setTimeWindow(TimeWindow.newInstance(100, 120)).setLocation(Location.newInstance(20, 0)).build();
+        Service nextS = new Service.Builder("next").setLocation(Location.newInstance(30, 0)).setTimeWindow(TimeWindow.newInstance(40, 500)).build();
 
-        Service afterNextS = Service.Builder.newInstance("afterNext").setLocation(Location.newInstance(40, 0)).setTimeWindow(TimeWindow.newInstance(80, 500)).build();
-        Service afterAfterNextS = Service.Builder.newInstance("afterAfterNext").setLocation(Location.newInstance(50, 0)).setTimeWindow(TimeWindow.newInstance(100, 500)).build();
+        Service afterNextS = new Service.Builder("afterNext").setLocation(Location.newInstance(40, 0)).setTimeWindow(TimeWindow.newInstance(80, 500)).build();
+        Service afterAfterNextS = new Service.Builder("afterAfterNext").setLocation(Location.newInstance(50, 0)).setTimeWindow(TimeWindow.newInstance(100, 500)).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addVehicle(v).addJob(prevS).addJob(newS).addJob(nextS)
             .addJob(afterNextS).addJob(afterAfterNextS).build();
@@ -535,12 +535,12 @@ public void whenAddingNewWithTWBetweenTwoActs3WithVarStart_itShouldCalcInsertion
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance(0, 0)).build();
 //		VehicleImpl v2 = VehicleImpl.Builder.newInstance("v2").setHasVariableDepartureTime(true).setType(type).setStartLocation(Location.newInstance(0,0)).build();
 
-        Service prevS = Service.Builder.newInstance("prev").setLocation(Location.newInstance(10, 0)).build();
-        Service newS = Service.Builder.newInstance("new").setServiceTime(10).setTimeWindow(TimeWindow.newInstance(50, 70)).setLocation(Location.newInstance(20, 0)).build();
-        Service nextS = Service.Builder.newInstance("next").setLocation(Location.newInstance(30, 0)).setTimeWindow(TimeWindow.newInstance(40, 70)).build();
+        Service prevS = new Service.Builder("prev").setLocation(Location.newInstance(10, 0)).build();
+        Service newS = new Service.Builder("new").setServiceTime(10).setTimeWindow(TimeWindow.newInstance(50, 70)).setLocation(Location.newInstance(20, 0)).build();
+        Service nextS = new Service.Builder("next").setLocation(Location.newInstance(30, 0)).setTimeWindow(TimeWindow.newInstance(40, 70)).build();
 
-        Service afterNextS = Service.Builder.newInstance("afterNext").setLocation(Location.newInstance(40, 0)).setTimeWindow(TimeWindow.newInstance(50, 100)).build();
-        Service afterAfterNextS = Service.Builder.newInstance("afterAfterNext").setLocation(Location.newInstance(50, 0)).setTimeWindow(TimeWindow.newInstance(100, 500)).build();
+        Service afterNextS = new Service.Builder("afterNext").setLocation(Location.newInstance(40, 0)).setTimeWindow(TimeWindow.newInstance(50, 100)).build();
+        Service afterAfterNextS = new Service.Builder("afterAfterNext").setLocation(Location.newInstance(50, 0)).setTimeWindow(TimeWindow.newInstance(100, 500)).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addVehicle(v).addJob(prevS).addJob(newS).addJob(nextS)
             .addJob(afterNextS).addJob(afterAfterNextS).build();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestMixedServiceAndShipmentsProblemOnRouteLevel.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestMixedServiceAndShipmentsProblemOnRouteLevel.java
index dbec53eb0..215267a4f 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestMixedServiceAndShipmentsProblemOnRouteLevel.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestMixedServiceAndShipmentsProblemOnRouteLevel.java
@@ -71,10 +71,10 @@ public void whenHavingShipmentsAndServicesInOneProblem_andInsertionShouldBeMadeO
 		 * 3: (16,8)
 		 * 4: (16,12)
 		 */
-        Delivery delivery1 = (Delivery) Delivery.Builder.newInstance("5").addSizeDimension(0, 1).setLocation(TestUtils.loc(Coordinate.newInstance(4, 8))).build();
-        Delivery delivery2 = (Delivery) Delivery.Builder.newInstance("6").addSizeDimension(0, 1).setLocation(TestUtils.loc(Coordinate.newInstance(4, 12))).build();
-        Delivery delivery3 = (Delivery) Delivery.Builder.newInstance("7").addSizeDimension(0, 1).setLocation(TestUtils.loc(Coordinate.newInstance(16, 8))).build();
-        Delivery delivery4 = (Delivery) Delivery.Builder.newInstance("8").addSizeDimension(0, 1).setLocation(TestUtils.loc(Coordinate.newInstance(16, 12))).build();
+        Delivery delivery1 = (Delivery) new Delivery.Builder("5").addSizeDimension(0, 1).setLocation(TestUtils.loc(Coordinate.newInstance(4, 8))).build();
+        Delivery delivery2 = (Delivery) new Delivery.Builder("6").addSizeDimension(0, 1).setLocation(TestUtils.loc(Coordinate.newInstance(4, 12))).build();
+        Delivery delivery3 = (Delivery) new Delivery.Builder("7").addSizeDimension(0, 1).setLocation(TestUtils.loc(Coordinate.newInstance(16, 8))).build();
+        Delivery delivery4 = (Delivery) new Delivery.Builder("8").addSizeDimension(0, 1).setLocation(TestUtils.loc(Coordinate.newInstance(16, 12))).build();
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addVehicle(vehicle);
@@ -122,10 +122,10 @@ public void whenHavingOnlyServicesInOneProblem_andInsertionShouldBeMadeOnRouteLe
 		 * 3: (16,8)
 		 * 4: (16,12)
 		 */
-        Delivery delivery1 = (Delivery) Delivery.Builder.newInstance("5").addSizeDimension(0, 1).setLocation(Location.newInstance(4, 8)).build();
-        Delivery delivery2 = (Delivery) Delivery.Builder.newInstance("6").addSizeDimension(0, 1).setLocation(Location.newInstance(4, 12)).build();
-        Delivery delivery3 = (Delivery) Delivery.Builder.newInstance("7").addSizeDimension(0, 1).setLocation(Location.newInstance(16, 8)).build();
-        Delivery delivery4 = (Delivery) Delivery.Builder.newInstance("8").addSizeDimension(0, 1).setLocation(Location.newInstance(16, 12)).build();
+        Delivery delivery1 = (Delivery) new Delivery.Builder("5").addSizeDimension(0, 1).setLocation(Location.newInstance(4, 8)).build();
+        Delivery delivery2 = (Delivery) new Delivery.Builder("6").addSizeDimension(0, 1).setLocation(Location.newInstance(4, 12)).build();
+        Delivery delivery3 = (Delivery) new Delivery.Builder("7").addSizeDimension(0, 1).setLocation(Location.newInstance(16, 8)).build();
+        Delivery delivery4 = (Delivery) new Delivery.Builder("8").addSizeDimension(0, 1).setLocation(Location.newInstance(16, 12)).build();
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addVehicle(vehicle)
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestRouteLevelActivityInsertionCostEstimator.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestRouteLevelActivityInsertionCostEstimator.java
index 64727611d..2c17bc6ae 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestRouteLevelActivityInsertionCostEstimator.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestRouteLevelActivityInsertionCostEstimator.java
@@ -17,6 +17,15 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
+import static org.junit.Assert.assertEquals;
+
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.algorithm.state.UpdateVariableCosts;
 import com.graphhopper.jsprit.core.problem.IndexedActivity;
@@ -31,7 +40,7 @@
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivityNEW;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupService;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupServiceDEPRECATED;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
@@ -39,14 +48,6 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.CostFactory;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.List;
-
-import static org.junit.Assert.assertEquals;
 
 /**
  * unit tests to test route level insertion
@@ -78,9 +79,9 @@ public double getActivityDuration(TourActivity tourAct, double arrivalTime, Driv
             }
 
         };
-        Service s1 = Service.Builder.newInstance("s1").setLocation(Location.newInstance("10,0")).setTimeWindow(TimeWindow.newInstance(10., 10.)).build();
-        Service s2 = Service.Builder.newInstance("s2").setLocation(Location.newInstance("20,0")).setTimeWindow(TimeWindow.newInstance(20., 20.)).build();
-        Service s3 = Service.Builder.newInstance("s3").setLocation(Location.newInstance("30,0")).setTimeWindow(TimeWindow.newInstance(30., 30.)).build();
+        Service s1 = new Service.Builder("s1").setLocation(Location.newInstance("10,0")).setTimeWindow(TimeWindow.newInstance(10., 10.)).build();
+        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance("20,0")).setTimeWindow(TimeWindow.newInstance(20., 20.)).build();
+        Service s3 = new Service.Builder("s3").setLocation(Location.newInstance("30,0")).setTimeWindow(TimeWindow.newInstance(30., 30.)).build();
 
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").build();
         Vehicle vehicle = VehicleImpl.Builder.newInstance("vehicle").setStartLocation(Location.newInstance("0,0")).setType(type).build();
@@ -112,8 +113,8 @@ public double getActivityDuration(TourActivity tourAct, double arrivalTime, Driv
 
     @Test
     public void whenNewActInBetweenFirstAndSecond_and_forwardLookingIs0_itShouldReturnCorrectCosts() {
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance("5,0")).build();
-        PickupActivityNEW pickupService = new PickupService(s4);
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("5,0")).build();
+        PickupActivityNEW pickupService = new PickupServiceDEPRECATED(s4);
         JobInsertionContext context = new JobInsertionContext(route, s4, route.getVehicle(), route.getDriver(), 0.);
         RouteLevelActivityInsertionCostsEstimator estimator = new RouteLevelActivityInsertionCostsEstimator(routingCosts, activityCosts, stateManager);
         estimator.setForwardLooking(0);
@@ -123,8 +124,8 @@ public void whenNewActInBetweenFirstAndSecond_and_forwardLookingIs0_itShouldRetu
 
     @Test
     public void whenNewActWithTWInBetweenFirstAndSecond_and_forwardLookingIs0_itShouldReturnCorrectCosts() {
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance("5,0")).setTimeWindow(TimeWindow.newInstance(5., 5.)).build();
-        PickupActivityNEW pickupService = new PickupService(s4);
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("5,0")).setTimeWindow(TimeWindow.newInstance(5., 5.)).build();
+        PickupActivityNEW pickupService = new PickupServiceDEPRECATED(s4);
         JobInsertionContext context = new JobInsertionContext(route, s4, route.getVehicle(), route.getDriver(), 0.);
         RouteLevelActivityInsertionCostsEstimator estimator = new RouteLevelActivityInsertionCostsEstimator(routingCosts, activityCosts, stateManager);
         estimator.setForwardLooking(0);
@@ -134,8 +135,8 @@ public void whenNewActWithTWInBetweenFirstAndSecond_and_forwardLookingIs0_itShou
 
     @Test
     public void whenNewActWithTWAndServiceTimeInBetweenFirstAndSecond_and_forwardLookingIs0_itShouldReturnCorrectCosts() {
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance("5,0")).setServiceTime(10.).setTimeWindow(TimeWindow.newInstance(5., 5.)).build();
-        PickupActivityNEW pickupService = new PickupService(s4);
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("5,0")).setServiceTime(10.).setTimeWindow(TimeWindow.newInstance(5., 5.)).build();
+        PickupActivityNEW pickupService = new PickupServiceDEPRECATED(s4);
         pickupService.setTheoreticalEarliestOperationStartTime(5);
         pickupService.setTheoreticalLatestOperationStartTime(5);
 
@@ -150,8 +151,8 @@ public void whenNewActWithTWAndServiceTimeInBetweenFirstAndSecond_and_forwardLoo
 
     @Test
     public void whenNewActWithTWAndServiceTimeInBetweenFirstAndSecond_and_forwardLookingIs3_itShouldReturnCorrectCosts() {
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance("5,0")).setServiceTime(10.).setTimeWindow(TimeWindow.newInstance(5., 5.)).build();
-        PickupActivityNEW pickupService = new PickupService(s4);
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("5,0")).setServiceTime(10.).setTimeWindow(TimeWindow.newInstance(5., 5.)).build();
+        PickupActivityNEW pickupService = new PickupServiceDEPRECATED(s4);
         JobInsertionContext context = new JobInsertionContext(route, s4, route.getVehicle(), route.getDriver(), 0.);
         RouteLevelActivityInsertionCostsEstimator estimator = new RouteLevelActivityInsertionCostsEstimator(routingCosts, activityCosts, stateManager);
         estimator.setForwardLooking(3);
@@ -163,13 +164,13 @@ public void whenNewActWithTWAndServiceTimeInBetweenFirstAndSecond_and_forwardLoo
 
     @Test
     public void whenNewActInBetweenSecondAndThird_and_forwardLookingIs0_itShouldReturnCorrectCosts() {
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance("5,0")).build();
-        PickupActivityNEW pickupService = new PickupService(s4);
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("5,0")).build();
+        PickupActivityNEW pickupService = new PickupServiceDEPRECATED(s4);
         JobInsertionContext context = new JobInsertionContext(route, s4, route.getVehicle(), route.getDriver(), 0.);
         RouteLevelActivityInsertionCostsEstimator estimator = new RouteLevelActivityInsertionCostsEstimator(routingCosts, activityCosts, stateManager);
         estimator.setForwardLooking(0);
         double iCosts =
-            estimator.getCosts(context, route.getActivities().get(0), route.getActivities().get(1), pickupService, 10.);
+                estimator.getCosts(context, route.getActivities().get(0), route.getActivities().get(1), pickupService, 10.);
         double expectedTransportCosts = 10.;
         double expectedActivityCosts = 10.;
         assertEquals(expectedTransportCosts + expectedActivityCosts, iCosts, 0.01);
@@ -177,13 +178,13 @@ public void whenNewActInBetweenSecondAndThird_and_forwardLookingIs0_itShouldRetu
 
     @Test
     public void whenNewActInBetweenSecondAndThird_and_forwardLookingIs3_itShouldReturnCorrectCosts() {
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance("5,0")).build();
-        PickupActivityNEW pickupService = new PickupService(s4);
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("5,0")).build();
+        PickupActivityNEW pickupService = new PickupServiceDEPRECATED(s4);
         JobInsertionContext context = new JobInsertionContext(route, s4, route.getVehicle(), route.getDriver(), 0.);
         RouteLevelActivityInsertionCostsEstimator estimator = new RouteLevelActivityInsertionCostsEstimator(routingCosts, activityCosts, stateManager);
         estimator.setForwardLooking(3);
         double iCosts =
-            estimator.getCosts(context, route.getActivities().get(0), route.getActivities().get(1), pickupService, 10.);
+                estimator.getCosts(context, route.getActivities().get(0), route.getActivities().get(1), pickupService, 10.);
         double expectedTransportCosts = 10.;
         double expectedActivityCosts = 10. + 10.;
         assertEquals(expectedTransportCosts + expectedActivityCosts, iCosts, 0.01);
@@ -191,15 +192,15 @@ public void whenNewActInBetweenSecondAndThird_and_forwardLookingIs3_itShouldRetu
 
     @Test
     public void whenNewActWithTWInBetweenSecondAndThird_and_forwardLookingIs3_itShouldReturnCorrectCosts() {
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance("5,0")).setTimeWindow(TimeWindow.newInstance(5., 5.)).build();
-        PickupActivityNEW pickupService = new PickupService(s4);
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("5,0")).setTimeWindow(TimeWindow.newInstance(5., 5.)).build();
+        PickupActivityNEW pickupService = new PickupServiceDEPRECATED(s4);
         pickupService.setTheoreticalEarliestOperationStartTime(5);
         pickupService.setTheoreticalLatestOperationStartTime(5);
         JobInsertionContext context = new JobInsertionContext(route, s4, route.getVehicle(), route.getDriver(), 0.);
         RouteLevelActivityInsertionCostsEstimator estimator = new RouteLevelActivityInsertionCostsEstimator(routingCosts, activityCosts, stateManager);
         estimator.setForwardLooking(3);
         double iCosts =
-            estimator.getCosts(context, route.getActivities().get(0), route.getActivities().get(1), pickupService, 10.);
+                estimator.getCosts(context, route.getActivities().get(0), route.getActivities().get(1), pickupService, 10.);
         double expectedTransportCosts = 10.;
         double expectedActivityCosts = 10. + 10. + 10.;
         assertEquals(expectedTransportCosts + expectedActivityCosts, iCosts, 0.01);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestRouteLevelServiceInsertionCostEstimator.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestRouteLevelServiceInsertionCostEstimator.java
index d196158c5..c2b60f64c 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestRouteLevelServiceInsertionCostEstimator.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestRouteLevelServiceInsertionCostEstimator.java
@@ -17,6 +17,17 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.algorithm.state.UpdateVariableCosts;
 import com.graphhopper.jsprit.core.problem.IndexedActivity;
@@ -30,7 +41,7 @@
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.job.Service;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupService;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupServiceDEPRECATED;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
@@ -38,16 +49,6 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.CostFactory;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.List;
-
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
 
 /**
  * Created by schroeder on 02.07.14.
@@ -90,9 +91,9 @@ public double getActivityDuration(TourActivity tourAct, double arrivalTime, Driv
         };
         vrpBuilder.setActivityCosts(activityCosts);
 
-        Service s1 = Service.Builder.newInstance("s1").setLocation(Location.newInstance("10,0")).setTimeWindow(TimeWindow.newInstance(10., 10.)).build();
-        Service s2 = Service.Builder.newInstance("s2").setLocation(Location.newInstance("20,0")).setTimeWindow(TimeWindow.newInstance(20., 20.)).build();
-        Service s3 = Service.Builder.newInstance("s3").setLocation(Location.newInstance("30,0")).setTimeWindow(TimeWindow.newInstance(30., 30.)).build();
+        Service s1 = new Service.Builder("s1").setLocation(Location.newInstance("10,0")).setTimeWindow(TimeWindow.newInstance(10., 10.)).build();
+        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance("20,0")).setTimeWindow(TimeWindow.newInstance(20., 20.)).build();
+        Service s3 = new Service.Builder("s3").setLocation(Location.newInstance("30,0")).setTimeWindow(TimeWindow.newInstance(30., 30.)).build();
         vrpBuilder.addJob(s1).addJob(s2).addJob(s3);
 
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").build();
@@ -127,18 +128,18 @@ public double getActivityDuration(TourActivity tourAct, double arrivalTime, Driv
 
     @Test
     public void whenNewServiceNeedToBeInserted_itShouldReturnCorrectInsertionCosts() {
-        final Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance("5,0")).setTimeWindow(TimeWindow.newInstance(5., 5.)).build();
+        final Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("5,0")).setTimeWindow(TimeWindow.newInstance(5., 5.)).build();
         RouteLevelActivityInsertionCostsEstimator estimator = new RouteLevelActivityInsertionCostsEstimator(routingCosts, activityCosts, stateManager);
         estimator.setForwardLooking(0);
         ServiceInsertionOnRouteLevelCalculator routeInserter = new ServiceInsertionOnRouteLevelCalculator(routingCosts,
-            activityCosts, estimator, constraintManager, constraintManager);
+                activityCosts, estimator, constraintManager, constraintManager);
         routeInserter.setStates(stateManager);
         routeInserter.setJobActivityFactory(new JobActivityFactory() {
             @Override
             public List<IndexedActivity> createActivities(Job job) {
                 List<IndexedActivity> acts = activityFactory.createActivities(job);
                 if (acts.isEmpty()) {
-                    acts.add(new PickupService(s4));
+                    acts.add(new PickupServiceDEPRECATED(s4));
                 }
                 return acts;
             }
@@ -149,18 +150,18 @@ public void whenNewServiceNeedToBeInserted_itShouldReturnCorrectInsertionCosts()
 
     @Test
     public void whenNewServiceNeedToBeInserted_itShouldReturnCorrectInsertionIndex() {
-        final Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance("5,0")).setTimeWindow(TimeWindow.newInstance(5., 5.)).build();
+        final Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("5,0")).setTimeWindow(TimeWindow.newInstance(5., 5.)).build();
         RouteLevelActivityInsertionCostsEstimator estimator = new RouteLevelActivityInsertionCostsEstimator(routingCosts, activityCosts, stateManager);
         estimator.setForwardLooking(0);
         final ServiceInsertionOnRouteLevelCalculator routeInserter = new ServiceInsertionOnRouteLevelCalculator(routingCosts,
-            activityCosts, estimator, constraintManager, constraintManager);
+                activityCosts, estimator, constraintManager, constraintManager);
         routeInserter.setStates(stateManager);
         routeInserter.setJobActivityFactory(new JobActivityFactory() {
             @Override
             public List<IndexedActivity> createActivities(Job job) {
                 List<IndexedActivity> acts = activityFactory.createActivities(job);
                 if (acts.isEmpty()) {
-                    acts.add(new PickupService(s4));
+                    acts.add(new PickupServiceDEPRECATED(s4));
                 }
                 return acts;
             }
@@ -171,18 +172,18 @@ public void whenNewServiceNeedToBeInserted_itShouldReturnCorrectInsertionIndex()
 
     @Test
     public void whenNewServiceWithServiceTimeNeedToBeInserted_itShouldReturnCorrectInsertionData() {
-        final Service s4 = Service.Builder.newInstance("s4").setServiceTime(10.).setLocation(Location.newInstance("5,0")).setTimeWindow(TimeWindow.newInstance(5., 5.)).build();
+        final Service s4 = new Service.Builder("s4").setServiceTime(10.).setLocation(Location.newInstance("5,0")).setTimeWindow(TimeWindow.newInstance(5., 5.)).build();
         RouteLevelActivityInsertionCostsEstimator estimator = new RouteLevelActivityInsertionCostsEstimator(routingCosts, activityCosts, stateManager);
         estimator.setForwardLooking(0);
         ServiceInsertionOnRouteLevelCalculator routeInserter = new ServiceInsertionOnRouteLevelCalculator(routingCosts,
-            activityCosts, estimator, constraintManager, constraintManager);
+                activityCosts, estimator, constraintManager, constraintManager);
         routeInserter.setStates(stateManager);
         routeInserter.setJobActivityFactory(new JobActivityFactory() {
             @Override
             public List<IndexedActivity> createActivities(Job job) {
                 List<IndexedActivity> acts = activityFactory.createActivities(job);
                 if (acts.isEmpty()) {
-                    PickupService pickupService = new PickupService(s4);
+                    PickupServiceDEPRECATED pickupService = new PickupServiceDEPRECATED(s4);
                     pickupService.setTheoreticalEarliestOperationStartTime(5);
                     pickupService.setTheoreticalLatestOperationStartTime(5);
                     acts.add(pickupService);
@@ -198,20 +199,20 @@ public void whenNewServiceWithServiceTimeNeedToBeInserted_itShouldReturnCorrectI
 
     @Test
     public void whenNewServiceWithServiceTimeNeedToBeInsertedAndRouteIsEmpty_itShouldReturnCorrectInsertionData() {
-        final Service s4 = Service.Builder.newInstance("s4").setServiceTime(10.).setLocation(Location.newInstance("5,0")).setTimeWindow(TimeWindow.newInstance(5., 5.)).build();
-//        PickupActivity pickupService = new PickupService(s4);
+        final Service s4 = new Service.Builder("s4").setServiceTime(10.).setLocation(Location.newInstance("5,0")).setTimeWindow(TimeWindow.newInstance(5., 5.)).build();
+//        PickupActivity pickupService = new PickupServiceDEPRECATED(s4);
         VehicleRoute emptyroute = VehicleRoute.emptyRoute();
         RouteLevelActivityInsertionCostsEstimator estimator = new RouteLevelActivityInsertionCostsEstimator(routingCosts, activityCosts, stateManager);
         estimator.setForwardLooking(0);
         ServiceInsertionOnRouteLevelCalculator routeInserter = new ServiceInsertionOnRouteLevelCalculator(routingCosts,
-            activityCosts, estimator, constraintManager, constraintManager);
+                activityCosts, estimator, constraintManager, constraintManager);
         routeInserter.setStates(stateManager);
         routeInserter.setJobActivityFactory(new JobActivityFactory() {
             @Override
             public List<IndexedActivity> createActivities(Job job) {
                 List<IndexedActivity> acts = activityFactory.createActivities(job);
                 if (acts.isEmpty()) {
-                    PickupService pickupService = new PickupService(s4);
+                    PickupServiceDEPRECATED pickupService = new PickupServiceDEPRECATED(s4);
                     pickupService.setTheoreticalEarliestOperationStartTime(5);
                     pickupService.setTheoreticalLatestOperationStartTime(5);
                     acts.add(pickupService);
@@ -226,20 +227,20 @@ public void whenNewServiceWithServiceTimeNeedToBeInsertedAndRouteIsEmpty_itShoul
 
     @Test
     public void whenNewServiceWithServiceTimeAndTWNeedToBeInsertedAndRouteIsEmpty_itShouldReturnCorrectInsertionData() {
-        final Service s4 = Service.Builder.newInstance("s4").setServiceTime(10.).setLocation(Location.newInstance("5,0")).setTimeWindow(TimeWindow.newInstance(3., 3.)).build();
-//        PickupActivity pickupService = new PickupService(s4);
+        final Service s4 = new Service.Builder("s4").setServiceTime(10.).setLocation(Location.newInstance("5,0")).setTimeWindow(TimeWindow.newInstance(3., 3.)).build();
+//        PickupActivity pickupService = new PickupServiceDEPRECATED(s4);
         VehicleRoute emptyroute = VehicleRoute.emptyRoute();
         RouteLevelActivityInsertionCostsEstimator estimator = new RouteLevelActivityInsertionCostsEstimator(routingCosts, activityCosts, stateManager);
         estimator.setForwardLooking(0);
         ServiceInsertionOnRouteLevelCalculator routeInserter = new ServiceInsertionOnRouteLevelCalculator(routingCosts,
-            activityCosts, estimator, constraintManager, constraintManager);
+                activityCosts, estimator, constraintManager, constraintManager);
         routeInserter.setStates(stateManager);
         routeInserter.setJobActivityFactory(new JobActivityFactory() {
             @Override
             public List<IndexedActivity> createActivities(Job job) {
                 List<IndexedActivity> acts = activityFactory.createActivities(job);
                 if (acts.isEmpty()) {
-                    PickupService pickupService = new PickupService(s4);
+                    PickupServiceDEPRECATED pickupService = new PickupServiceDEPRECATED(s4);
                     pickupService.setTheoreticalEarliestOperationStartTime(3);
                     pickupService.setTheoreticalLatestOperationStartTime(3);
                     acts.add(pickupService);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/DBSCANClustererTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/DBSCANClustererTest.java
index 4634144f8..ced522d0d 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/DBSCANClustererTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/DBSCANClustererTest.java
@@ -36,9 +36,9 @@
 
     @Test
     public void itShouldReturnOneClusterOfSizeTwo() {
-        Service s1 = Service.Builder.newInstance("s1").setLocation(Location.newInstance(1, 1)).build();
-        Service s2 = Service.Builder.newInstance("s2").setLocation(Location.newInstance(10, 10)).build();
-        Service s3 = Service.Builder.newInstance("s3").setLocation(Location.newInstance(9, 9)).build();
+        Service s1 = new Service.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
+        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(10, 10)).build();
+        Service s3 = new Service.Builder("s3").setLocation(Location.newInstance(9, 9)).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoute r = VehicleRoute.Builder.newInstance(v).addService(s1).addService(s2).addService(s3).build();
@@ -52,9 +52,9 @@ public void itShouldReturnOneClusterOfSizeTwo() {
 
     @Test
     public void itShouldReturnOneCluster() {
-        Service s1 = Service.Builder.newInstance("s1").setLocation(Location.newInstance(1, 1)).build();
-        Service s2 = Service.Builder.newInstance("s2").setLocation(Location.newInstance(10, 10)).build();
-        Service s3 = Service.Builder.newInstance("s3").setLocation(Location.newInstance(9, 9)).build();
+        Service s1 = new Service.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
+        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(10, 10)).build();
+        Service s3 = new Service.Builder("s3").setLocation(Location.newInstance(9, 9)).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoute r = VehicleRoute.Builder.newInstance(v).addService(s1).addService(s2).addService(s3).build();
@@ -68,12 +68,12 @@ public void itShouldReturnOneCluster() {
 
     @Test
     public void itShouldReturnTwoClusters() {
-        Service s0 = Service.Builder.newInstance("s0").setLocation(Location.newInstance(9, 0)).build();
-        Service s1 = Service.Builder.newInstance("s1").setLocation(Location.newInstance(9, 1)).build();
-        Service s2 = Service.Builder.newInstance("s2").setLocation(Location.newInstance(9, 10)).build();
-        Service s3 = Service.Builder.newInstance("s3").setLocation(Location.newInstance(9, 9)).build();
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance(9, 16)).build();
-        Service s5 = Service.Builder.newInstance("s5").setLocation(Location.newInstance(9, 17)).build();
+        Service s0 = new Service.Builder("s0").setLocation(Location.newInstance(9, 0)).build();
+        Service s1 = new Service.Builder("s1").setLocation(Location.newInstance(9, 1)).build();
+        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(9, 10)).build();
+        Service s3 = new Service.Builder("s3").setLocation(Location.newInstance(9, 9)).build();
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance(9, 16)).build();
+        Service s5 = new Service.Builder("s5").setLocation(Location.newInstance(9, 17)).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoute r = VehicleRoute.Builder.newInstance(v).addService(s1).addService(s2).addService(s3)
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsImplTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsImplTest.java
index a17cd004d..cbaeb9f7b 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsImplTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsImplTest.java
@@ -51,14 +51,14 @@
     @Before
     public void doBefore() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
-        target = Service.Builder.newInstance("s1").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 5)).build();
-        s2 = Service.Builder.newInstance("s2").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 4)).build();
-        s3 = Service.Builder.newInstance("s3").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 3)).build();
-        s4 = Service.Builder.newInstance("s4").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 2)).build();
-
-        s5 = Service.Builder.newInstance("s5").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 6)).build();
-        s6 = Service.Builder.newInstance("s6").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 7)).build();
-        s7 = Service.Builder.newInstance("s7").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 8)).build();
+        target = new Service.Builder("s1").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 5)).build();
+        s2 = new Service.Builder("s2").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 4)).build();
+        s3 = new Service.Builder("s3").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 3)).build();
+        s4 = new Service.Builder("s4").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 2)).build();
+
+        s5 = new Service.Builder("s5").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 6)).build();
+        s6 = new Service.Builder("s6").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 7)).build();
+        s7 = new Service.Builder("s7").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 8)).build();
 
         vrp = builder.addJob(target).addJob(s2).addJob(s3).addJob(s4).addJob(s5).addJob(s6).addJob(s7).build();
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsOptimizedTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsOptimizedTest.java
index 82f471e9a..edc180b3b 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsOptimizedTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsOptimizedTest.java
@@ -52,14 +52,14 @@
     @Before
     public void doBefore() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
-        target = Service.Builder.newInstance("s1").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 5)).build();
-        s2 = Service.Builder.newInstance("s2").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 4)).build();
-        s3 = Service.Builder.newInstance("s3").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 3)).build();
-        s4 = Service.Builder.newInstance("s4").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 2)).build();
-
-        s5 = Service.Builder.newInstance("s5").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 6)).build();
-        s6 = Service.Builder.newInstance("s6").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 7)).build();
-        s7 = Service.Builder.newInstance("s7").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 8)).build();
+        target = new Service.Builder("s1").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 5)).build();
+        s2 = new Service.Builder("s2").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 4)).build();
+        s3 = new Service.Builder("s3").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 3)).build();
+        s4 = new Service.Builder("s4").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 2)).build();
+
+        s5 = new Service.Builder("s5").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 6)).build();
+        s6 = new Service.Builder("s6").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 7)).build();
+        s7 = new Service.Builder("s7").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 8)).build();
 
         vrp = builder.addJob(target).addJob(s2).addJob(s3).addJob(s4).addJob(s5).addJob(s6).addJob(s7).build();
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsWithCapRestrictionImplTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsWithCapRestrictionImplTest.java
index 0851fdadd..febaec3ce 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsWithCapRestrictionImplTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsWithCapRestrictionImplTest.java
@@ -51,14 +51,14 @@
     @Before
     public void doBefore() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
-        target = Service.Builder.newInstance("s1").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 5)).build();
-        s2 = Service.Builder.newInstance("s2").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 4)).build();
-        s3 = Service.Builder.newInstance("s3").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 3)).build();
-        s4 = Service.Builder.newInstance("s4").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 2)).build();
-
-        s5 = Service.Builder.newInstance("s5").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 6)).build();
-        s6 = Service.Builder.newInstance("s6").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 7)).build();
-        s7 = Service.Builder.newInstance("s7").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 8)).build();
+        target = new Service.Builder("s1").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 5)).build();
+        s2 = new Service.Builder("s2").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 4)).build();
+        s3 = new Service.Builder("s3").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 3)).build();
+        s4 = new Service.Builder("s4").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 2)).build();
+
+        s5 = new Service.Builder("s5").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 6)).build();
+        s6 = new Service.Builder("s6").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 7)).build();
+        s7 = new Service.Builder("s7").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 8)).build();
 
         vrp = builder.addJob(target).addJob(s2).addJob(s3).addJob(s4).addJob(s5).addJob(s6).addJob(s7).build();
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinBreakTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinBreakTest.java
index 02586d63a..fdab05438 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinBreakTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinBreakTest.java
@@ -40,7 +40,7 @@
 
     @Test
     public void itShouldRuinBreaks() {
-        Break aBreak = Break.Builder.newInstance("break").build();
+        Break aBreak = new Break.Builder("break").build();
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance("loc"))
             .setBreak(aBreak).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().setFleetSize(VehicleRoutingProblem.FleetSize.FINITE).addVehicle(v).build();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinClustersTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinClustersTest.java
index 93e23eb22..f7ddeb903 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinClustersTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinClustersTest.java
@@ -40,14 +40,14 @@
 
     @Test
     public void itShouldRuinTwoObviousClusters() {
-        Service s0 = Service.Builder.newInstance("s0").setLocation(Location.newInstance(9, 0)).build();
-        Service s1 = Service.Builder.newInstance("s1").setLocation(Location.newInstance(9, 1)).build();
-        Service s2 = Service.Builder.newInstance("s2").setLocation(Location.newInstance(9, 10)).build();
-        Service s3 = Service.Builder.newInstance("s3").setLocation(Location.newInstance(9, 9)).build();
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance(9, 16)).build();
-        Service s5 = Service.Builder.newInstance("s5").setLocation(Location.newInstance(9, 17)).build();
-        Service s6 = Service.Builder.newInstance("s6").setLocation(Location.newInstance(9, 15.5)).build();
-        Service s7 = Service.Builder.newInstance("s7").setLocation(Location.newInstance(9, 30)).build();
+        Service s0 = new Service.Builder("s0").setLocation(Location.newInstance(9, 0)).build();
+        Service s1 = new Service.Builder("s1").setLocation(Location.newInstance(9, 1)).build();
+        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(9, 10)).build();
+        Service s3 = new Service.Builder("s3").setLocation(Location.newInstance(9, 9)).build();
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance(9, 16)).build();
+        Service s5 = new Service.Builder("s5").setLocation(Location.newInstance(9, 17)).build();
+        Service s6 = new Service.Builder("s6").setLocation(Location.newInstance(9, 15.5)).build();
+        Service s7 = new Service.Builder("s7").setLocation(Location.newInstance(9, 30)).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinWorstTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinWorstTest.java
index 61eb24854..a086baecf 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinWorstTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinWorstTest.java
@@ -41,11 +41,11 @@
 
     @Test
     public void itShouldRemoveCorrectNumber() {
-        Service s1 = Service.Builder.newInstance("s1")
+        Service s1 = new Service.Builder("s1")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(1, 1)).build()).build();
-        Service s2 = Service.Builder.newInstance("s2")
+        Service s2 = new Service.Builder("s2")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(3, 1)).build()).build();
-        Service s3 = Service.Builder.newInstance("s3")
+        Service s3 = new Service.Builder("s3")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(10, 10)).build()).build();
         VehicleImpl v = VehicleImpl.Builder.newInstance("v")
             .setStartLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(0, 0)).build()).build();
@@ -60,11 +60,11 @@ public void itShouldRemoveCorrectNumber() {
 
     @Test
     public void itShouldRemoveWorst() {
-        Service s1 = Service.Builder.newInstance("s1")
+        Service s1 = new Service.Builder("s1")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(1, 1)).build()).build();
-        Service s2 = Service.Builder.newInstance("s2")
+        Service s2 = new Service.Builder("s2")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(3, 1)).build()).build();
-        Service s3 = Service.Builder.newInstance("s3")
+        Service s3 = new Service.Builder("s3")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(10, 10)).build()).build();
         VehicleImpl v = VehicleImpl.Builder.newInstance("v")
             .setStartLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(0, 0)).build()).build();
@@ -79,11 +79,11 @@ public void itShouldRemoveWorst() {
 
     @Test
     public void itShouldRemoveWorstTwo() {
-        Service s1 = Service.Builder.newInstance("s1")
+        Service s1 = new Service.Builder("s1")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(1, 1)).build()).build();
-        Service s2 = Service.Builder.newInstance("s2")
+        Service s2 = new Service.Builder("s2")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(3, 1)).build()).build();
-        Service s3 = Service.Builder.newInstance("s3")
+        Service s3 = new Service.Builder("s3")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(10, 10)).build()).build();
         VehicleImpl v = VehicleImpl.Builder.newInstance("v")
             .setStartLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(0, 0)).build()).build();
@@ -107,11 +107,11 @@ public int createNumberToBeRemoved() {
 
     @Test
     public void itShouldRemoveShipment() {
-        Service s1 = Service.Builder.newInstance("s1")
+        Service s1 = new Service.Builder("s1")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(1, 1)).build()).build();
-        Service s2 = Service.Builder.newInstance("s2")
+        Service s2 = new Service.Builder("s2")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(3, 1)).build()).build();
-        Service s3 = Service.Builder.newInstance("s3")
+        Service s3 = new Service.Builder("s3")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(10, 10)).build()).build();
         Shipment shipment = Shipment.Builder.newInstance("ship1")
             .setPickupLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(2, 2)).build())
@@ -140,11 +140,11 @@ public int createNumberToBeRemoved() {
 
     @Test
     public void itShouldRemoveShipmentFromSecondRoute() {
-        Service s1 = Service.Builder.newInstance("s1")
+        Service s1 = new Service.Builder("s1")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(1, 1)).build()).build();
-        Service s2 = Service.Builder.newInstance("s2")
+        Service s2 = new Service.Builder("s2")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(3, 1)).build()).build();
-        Service s3 = Service.Builder.newInstance("s3")
+        Service s3 = new Service.Builder("s3")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(10, 10)).build()).build();
         Shipment shipment = Shipment.Builder.newInstance("ship1")
             .setPickupLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(3, 1)).build())
@@ -177,11 +177,11 @@ public int createNumberToBeRemoved() {
 
     @Test
     public void itShouldRemoveServiceAndShipmentFromSecondRoute() {
-        Service s1 = Service.Builder.newInstance("s1")
+        Service s1 = new Service.Builder("s1")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(1, 1)).build()).build();
-        Service s2 = Service.Builder.newInstance("s2")
+        Service s2 = new Service.Builder("s2")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(3, 1)).build()).build();
-        Service s3 = Service.Builder.newInstance("s3")
+        Service s3 = new Service.Builder("s3")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(10, 10)).build()).build();
         Shipment shipment = Shipment.Builder.newInstance("ship1")
             .setPickupLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(3, 1)).build())
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/AverageJobDistanceTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/AverageJobDistanceTest.java
index 4de9efc79..d5a0213e9 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/AverageJobDistanceTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/AverageJobDistanceTest.java
@@ -72,8 +72,8 @@ public void distanceOfTwoEqualShipmentsShouldBeSmallerThanAnyOtherDistance() {
 
     @Test
     public void whenServicesHaveSameLocation_distanceShouldBeZero() {
-        Service s1 = Service.Builder.newInstance("s1").addSizeDimension(0, 1).setLocation(Location.newInstance("10,0")).build();
-        Service s2 = Service.Builder.newInstance("s2").addSizeDimension(0, 1).setLocation(Location.newInstance("10,0")).build();
+        Service s1 = new Service.Builder("s1").addSizeDimension(0, 1).setLocation(Location.newInstance("10,0")).build();
+        Service s2 = new Service.Builder("s2").addSizeDimension(0, 1).setLocation(Location.newInstance("10,0")).build();
 
         double dist = new AvgServiceAndShipmentDistance(routingCosts).getDistance(s1, s2);
         assertEquals(0.0, dist, 0.01);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/TestJobDistanceAvgCosts.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/TestJobDistanceAvgCosts.java
index 42f4e8229..a0dff2fc6 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/TestJobDistanceAvgCosts.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/TestJobDistanceAvgCosts.java
@@ -57,7 +57,7 @@ public double getTransportTime(Location from, Location to,
             }
         };
         AvgServiceDistance c = new AvgServiceDistance(costs);
-        c.getDistance(Service.Builder.newInstance("1").addSizeDimension(0, 1).setLocation(Location.newInstance("foo")).build(), Service.Builder.newInstance("2").addSizeDimension(0, 2).setLocation(Location.newInstance("foo")).build());
+        c.getDistance(new Service.Builder("1").addSizeDimension(0, 1).setLocation(Location.newInstance("foo")).build(), new Service.Builder("2").addSizeDimension(0, 2).setLocation(Location.newInstance("foo")).build());
     }
 
     @Test(expected = NullPointerException.class)
@@ -92,7 +92,7 @@ public double getTransportTime(Location from, Location to,
             }
         };
         AvgServiceDistance c = new AvgServiceDistance(costs);
-        c.getDistance(Service.Builder.newInstance("1").addSizeDimension(0, 1).setLocation(Location.newInstance("loc")).build(), Service.Builder.newInstance("2").addSizeDimension(0, 2).setLocation(Location.newInstance("loc")).build());
+        c.getDistance(new Service.Builder("1").addSizeDimension(0, 1).setLocation(Location.newInstance("loc")).build(), new Service.Builder("2").addSizeDimension(0, 2).setLocation(Location.newInstance("loc")).build());
     }
 
 }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/HardPickupAndDeliveryShipmentActivityConstraintTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/HardPickupAndDeliveryShipmentActivityConstraintTest.java
index 83e38675b..61951db69 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/HardPickupAndDeliveryShipmentActivityConstraintTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/HardPickupAndDeliveryShipmentActivityConstraintTest.java
@@ -17,6 +17,11 @@
  */
 package com.graphhopper.jsprit.core.algorithm.state;
 
+import static org.junit.Assert.assertEquals;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
@@ -25,16 +30,12 @@
 import com.graphhopper.jsprit.core.problem.job.Service;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverShipment;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupService;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupShipment;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverShipmentDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupServiceDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupShipmentDEPRECATED;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
-import org.junit.Before;
-import org.junit.Test;
-
-import static org.junit.Assert.assertEquals;
 
 
 public class HardPickupAndDeliveryShipmentActivityConstraintTest {
@@ -57,8 +58,8 @@
 
     @Before
     public void doBefore() {
-        s1 = Service.Builder.newInstance("s1").setLocation(Location.newInstance("loc")).build();
-        s2 = Service.Builder.newInstance("s2").setLocation(Location.newInstance("loc")).build();
+        s1 = new Service.Builder("s1").setLocation(Location.newInstance("loc")).build();
+        s2 = new Service.Builder("s2").setLocation(Location.newInstance("loc")).build();
         shipment = Shipment.Builder.newInstance("shipment").setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).setDeliveryLocation(Location.newInstance("delLoc")).addSizeDimension(0, 1).build();
 
 
@@ -76,18 +77,18 @@ public void doBefore() {
 
     @Test
     public void whenPickupActivityIsInsertedAndLoadIsSufficient_returnFullFilled() {
-        PickupService pickupService = (PickupService) vrp.getActivities(s1).get(0);
-        PickupService anotherService = (PickupService) vrp.getActivities(s2).get(0);
-        PickupShipment pickupShipment = (PickupShipment) vrp.getActivities(shipment).get(0);
+        PickupServiceDEPRECATED pickupService = (PickupServiceDEPRECATED) vrp.getActivities(s1).get(0);
+        PickupServiceDEPRECATED anotherService = (PickupServiceDEPRECATED) vrp.getActivities(s2).get(0);
+        PickupShipmentDEPRECATED pickupShipment = (PickupShipmentDEPRECATED) vrp.getActivities(shipment).get(0);
 
         assertEquals(ConstraintsStatus.FULFILLED, constraint.fulfilled(iFacts, pickupService, pickupShipment, anotherService, 0.0));
     }
 
     @Test
     public void whenPickupActivityIsInsertedAndLoadIsNotSufficient_returnNOT_FullFilled() {
-        PickupService pickupService = (PickupService) vrp.getActivities(s1).get(0);
-        PickupService anotherService = (PickupService) vrp.getActivities(s2).get(0);
-        PickupShipment pickupShipment = (PickupShipment) vrp.getActivities(shipment).get(0);
+        PickupServiceDEPRECATED pickupService = (PickupServiceDEPRECATED) vrp.getActivities(s1).get(0);
+        PickupServiceDEPRECATED anotherService = (PickupServiceDEPRECATED) vrp.getActivities(s2).get(0);
+        PickupShipmentDEPRECATED pickupShipment = (PickupShipmentDEPRECATED) vrp.getActivities(shipment).get(0);
 
         stateManager.putInternalTypedActivityState(pickupService, InternalStates.LOAD, Capacity.Builder.newInstance().addDimension(0, 2).build());
 //		when(stateManager.getActivityState(pickupService, StateFactory.LOAD)).thenReturn(StateFactory.createState(2.0));
@@ -96,10 +97,10 @@ public void whenPickupActivityIsInsertedAndLoadIsNotSufficient_returnNOT_FullFil
 
     @Test
     public void whenDeliveryActivityIsInsertedAndLoadIsSufficient_returnFullFilled() {
-        PickupService pickupService = (PickupService) vrp.getActivities(s1).get(0);
-        PickupService anotherService = (PickupService) vrp.getActivities(s2).get(0);
+        PickupServiceDEPRECATED pickupService = (PickupServiceDEPRECATED) vrp.getActivities(s1).get(0);
+        PickupServiceDEPRECATED anotherService = (PickupServiceDEPRECATED) vrp.getActivities(s2).get(0);
 
-        DeliverShipment deliverShipment = (DeliverShipment) vrp.getActivities(shipment).get(1);
+        DeliverShipmentDEPRECATED deliverShipment = (DeliverShipmentDEPRECATED) vrp.getActivities(shipment).get(1);
 
         stateManager.putInternalTypedActivityState(pickupService, InternalStates.LOAD, Capacity.Builder.newInstance().addDimension(0, 1).build());
 //		stateManager.putInternalActivityState(pickupService, StateFactory.LOAD, StateFactory.createState(1));
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/LoadStateTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/LoadStateTest.java
index 95def5f6e..eb796e9d2 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/LoadStateTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/LoadStateTest.java
@@ -55,14 +55,14 @@ public void doBefore() {
         when(vehicle.getType()).thenReturn(type);
 
         VehicleRoutingProblem.Builder serviceProblemBuilder = VehicleRoutingProblem.Builder.newInstance();
-        Service s1 = Service.Builder.newInstance("s").addSizeDimension(0, 10).setLocation(Location.newInstance("loc")).build();
-        Service s2 = Service.Builder.newInstance("s2").addSizeDimension(0, 5).setLocation(Location.newInstance("loc")).build();
+        Service s1 = new Service.Builder("s").addSizeDimension(0, 10).setLocation(Location.newInstance("loc")).build();
+        Service s2 = new Service.Builder("s2").addSizeDimension(0, 5).setLocation(Location.newInstance("loc")).build();
         serviceProblemBuilder.addJob(s1).addJob(s2);
         final VehicleRoutingProblem serviceProblem = serviceProblemBuilder.build();
 
         final VehicleRoutingProblem.Builder pdProblemBuilder = VehicleRoutingProblem.Builder.newInstance();
-        Pickup pickup = (Pickup) Pickup.Builder.newInstance("pick").addSizeDimension(0, 10).setLocation(Location.newInstance("loc")).build();
-        Delivery delivery = (Delivery) Delivery.Builder.newInstance("del").addSizeDimension(0, 5).setLocation(Location.newInstance("loc")).build();
+        Pickup pickup = (Pickup) new Pickup.Builder("pick").addSizeDimension(0, 10).setLocation(Location.newInstance("loc")).build();
+        Delivery delivery = (Delivery) new Delivery.Builder("del").addSizeDimension(0, 5).setLocation(Location.newInstance("loc")).build();
         pdProblemBuilder.addJob(pickup).addJob(delivery);
         final VehicleRoutingProblem pdProblem = pdProblemBuilder.build();
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/StateManagerTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/StateManagerTest.java
index c5016f05a..792e857bc 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/StateManagerTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/StateManagerTest.java
@@ -53,7 +53,7 @@
     }
 
     private VehicleRoute getRoute(Vehicle vehicle) {
-        return VehicleRoute.Builder.newInstance(vehicle).setJobActivityFactory(new ActFac()).addService(Service.Builder.newInstance("s").setLocation(Location.newInstance("loc")).build()).build();
+        return VehicleRoute.Builder.newInstance(vehicle).setJobActivityFactory(new ActFac()).addService(new Service.Builder("s").setLocation(Location.newInstance("loc")).build()).build();
     }
 
     private VehicleRoutingProblem vrpMock;
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdatePracticalTimeWindowTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdatePracticalTimeWindowTest.java
index ae0db5565..e16aa1eba 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdatePracticalTimeWindowTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdatePracticalTimeWindowTest.java
@@ -69,9 +69,9 @@ public void doBefore() {
         reverseActivityVisitor = new ReverseRouteActivityVisitor();
         reverseActivityVisitor.addActivityVisitor(new UpdatePracticalTimeWindows(stateManager, routingCosts, activityCosts));
 
-        Pickup pickup = (Pickup) Pickup.Builder.newInstance("pick").setLocation(Location.newInstance("0,20")).setTimeWindow(TimeWindow.newInstance(0, 30)).build();
-        Delivery delivery = (Delivery) Delivery.Builder.newInstance("del").setLocation(Location.newInstance("20,20")).setTimeWindow(TimeWindow.newInstance(10, 40)).build();
-        Pickup pickup2 = (Pickup) Pickup.Builder.newInstance("pick2").setLocation(Location.newInstance("20,0")).setTimeWindow(TimeWindow.newInstance(20, 50)).build();
+        Pickup pickup = (Pickup) new Pickup.Builder("pick").setLocation(Location.newInstance("0,20")).setTimeWindow(TimeWindow.newInstance(0, 30)).build();
+        Delivery delivery = (Delivery) new Delivery.Builder("del").setLocation(Location.newInstance("20,20")).setTimeWindow(TimeWindow.newInstance(10, 40)).build();
+        Pickup pickup2 = (Pickup) new Pickup.Builder("pick2").setLocation(Location.newInstance("20,0")).setTimeWindow(TimeWindow.newInstance(20, 50)).build();
 
         Vehicle vehicle = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance("0,0")).setType(mock(VehicleType.class)).build();
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdateRequiredSkillsTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdateRequiredSkillsTest.java
index bfa8bf272..17f02f615 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdateRequiredSkillsTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdateRequiredSkillsTest.java
@@ -48,9 +48,9 @@
     public void doBefore() {
         VehicleType type = VehicleTypeImpl.Builder.newInstance("t").build();
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance("start")).setType(type).build();
-        Service service = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc")).addRequiredSkill("skill1").build();
-        Service service2 = Service.Builder.newInstance("s2").setLocation(Location.newInstance("loc")).addRequiredSkill("skill1").addRequiredSkill("skill2").addRequiredSkill("skill3").build();
-        Service service3 = Service.Builder.newInstance("s3").setLocation(Location.newInstance("loc")).addRequiredSkill("skill4").addRequiredSkill("skill5").build();
+        Service service = new Service.Builder("s").setLocation(Location.newInstance("loc")).addRequiredSkill("skill1").build();
+        Service service2 = new Service.Builder("s2").setLocation(Location.newInstance("loc")).addRequiredSkill("skill1").addRequiredSkill("skill2").addRequiredSkill("skill3").build();
+        Service service3 = new Service.Builder("s3").setLocation(Location.newInstance("loc")).addRequiredSkill("skill4").addRequiredSkill("skill5").build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addVehicle(vehicle).addJob(service)
             .addJob(service2).addJob(service3).build();
         route = VehicleRoute.Builder.newInstance(vehicle).setJobActivityFactory(vrp.getJobActivityFactory()).addService(service).addService(service2).addService(service3).build();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdateVehicleDependentTimeWindowTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdateVehicleDependentTimeWindowTest.java
index 3bc9f6151..54849eb40 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdateVehicleDependentTimeWindowTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdateVehicleDependentTimeWindowTest.java
@@ -94,9 +94,9 @@ public void doBefore() {
 
         fleetManager = new FiniteFleetManagerFactory(vehicles).createFleetManager();
 
-        Service service = Service.Builder.newInstance("s1").setLocation(Location.newInstance("10,0")).build();
-        Service service2 = Service.Builder.newInstance("s2").setLocation(Location.newInstance("20,0")).build();
-        Service service3 = Service.Builder.newInstance("s3").setLocation(Location.newInstance("30,0")).build();
+        Service service = new Service.Builder("s1").setLocation(Location.newInstance("10,0")).build();
+        Service service2 = new Service.Builder("s2").setLocation(Location.newInstance("20,0")).build();
+        Service service3 = new Service.Builder("s3").setLocation(Location.newInstance("30,0")).build();
 
         vrpBuilder.addJob(service).addJob(service2).addJob(service3);
         vrp = vrpBuilder.build();
@@ -209,9 +209,9 @@ public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct1WithVehicle3()
     public void twUpdateShouldWorkWithMultipleTWs(){
         //
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance("0,0")).setEarliestStart(0.).setLatestArrival(100.).build();
-        Service service = Service.Builder.newInstance("s1").setLocation(Location.newInstance("10,0"))
+        Service service = new Service.Builder("s1").setLocation(Location.newInstance("10,0"))
                 .addTimeWindow(10,20).addTimeWindow(30,40).build();
-        Service service2 = Service.Builder.newInstance("s2")
+        Service service2 = new Service.Builder("s2")
                 .addTimeWindow(20,30).addTimeWindow(40,60).addTimeWindow(70,80).setLocation(Location.newInstance("20,0")).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(service).addJob(service2).addVehicle(vehicle)
@@ -248,7 +248,7 @@ public void updateOfOpenRoutesShouldBeDoneCorrectly(){
             .setLatestArrival(51)
             .build();
 
-        Service service = Service.Builder.newInstance("s")
+        Service service = new Service.Builder("s")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(50, 0)).build()).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance()
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyserTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyserTest.java
index 95d3431a8..592b956c5 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyserTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyserTest.java
@@ -68,12 +68,12 @@ public void doBefore() {
         VehicleImpl vehicle2 = VehicleImpl.Builder.newInstance("v2").setType(type)
             .setStartLocation(Location.newInstance(5, 0)).build();
 
-        Service s1 = Service.Builder.newInstance("s1")
+        Service s1 = new Service.Builder("s1")
             .setTimeWindow(TimeWindow.newInstance(10, 20))
             .setLocation(Location.newInstance(-10, 1)).addSizeDimension(0, 2)
             .addRequiredSkill("skill1")
             .build();
-        Service s2 = Service.Builder.newInstance("s2")
+        Service s2 = new Service.Builder("s2")
             .setLocation(Location.newInstance(-10, 10))
             .addSizeDimension(0, 3)
             .addRequiredSkill("skill2").addRequiredSkill("skill1")
@@ -87,11 +87,11 @@ public void doBefore() {
             .addRequiredSkill("skill3")
             .build();
 
-        Service s3 = Service.Builder.newInstance("s3")
+        Service s3 = new Service.Builder("s3")
             .setTimeWindow(TimeWindow.newInstance(10, 20))
             .setLocation(TestUtils.loc(Coordinate.newInstance(10, 1))).addSizeDimension(0, 2).build();
 
-        Service s4 = Service.Builder.newInstance("s4").setLocation(TestUtils.loc(Coordinate.newInstance(10, 10))).addSizeDimension(0, 3).build();
+        Service s4 = new Service.Builder("s4").setLocation(TestUtils.loc(Coordinate.newInstance(10, 10))).addSizeDimension(0, 3).build();
 
         Shipment shipment2 = Shipment.Builder.newInstance("ship2").setPickupLocation(TestUtils.loc(Coordinate.newInstance(15, 2)))
             .setPickupServiceTime(20.).setDeliveryServiceTime(20.)
@@ -122,12 +122,12 @@ public void buildAnotherScenarioWithOnlyOneVehicleAndWithoutAnyConstraintsBefore
             .setLatestArrival(150.)
             .build();
 
-        Pickup s1 = Pickup.Builder.newInstance("s1")
+        Pickup s1 = new Pickup.Builder("s1")
             .setTimeWindow(TimeWindow.newInstance(10, 20))
             .setLocation(Location.newInstance(-10, 1))
             .addSizeDimension(0, 10)
             .build();
-        Delivery s2 = Delivery.Builder.newInstance("s2")
+        Delivery s2 = new Delivery.Builder("s2")
             .setLocation(Location.newInstance(-10, 10))
             .setTimeWindow(TimeWindow.newInstance(10, 20))
             .addSizeDimension(0, 20)
@@ -139,12 +139,12 @@ public void buildAnotherScenarioWithOnlyOneVehicleAndWithoutAnyConstraintsBefore
             .setPickupTimeWindow(TimeWindow.newInstance(10, 20)).setDeliveryTimeWindow(TimeWindow.newInstance(10, 20))
             .build();
 
-        Pickup s3 = Pickup.Builder.newInstance("s3")
+        Pickup s3 = new Pickup.Builder("s3")
             .setTimeWindow(TimeWindow.newInstance(10, 20))
             .setLocation(TestUtils.loc(Coordinate.newInstance(10, 1)))
             .addSizeDimension(0, 10)
             .build();
-        Delivery s4 = Delivery.Builder.newInstance("s4").setLocation(Location.newInstance(10, 10))
+        Delivery s4 = new Delivery.Builder("s4").setLocation(Location.newInstance(10, 10))
             .addSizeDimension(0, 20)
             .setTimeWindow(TimeWindow.newInstance(10, 20))
             .build();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblemTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblemTest.java
index 0722a5513..01cf1bdb9 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblemTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblemTest.java
@@ -425,7 +425,7 @@ public void whenAddingInitialRoute_locationOfVehicleMustBeMemorized() {
 
     @Test
     public void whenAddingJobAndInitialRouteWithThatJobAfterwards_thisJobShouldNotBeInFinalJobMap() {
-        Service service = Service.Builder.newInstance("myService").setLocation(Location.newInstance("loc")).build();
+        Service service = new Service.Builder("myService").setLocation(Location.newInstance("loc")).build();
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addJob(service);
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v")
@@ -440,7 +440,7 @@ public void whenAddingJobAndInitialRouteWithThatJobAfterwards_thisJobShouldNotBe
 
     @Test
     public void whenAddingTwoJobs_theyShouldHaveProperIndeces() {
-        Service service = Service.Builder.newInstance("myService").setLocation(Location.newInstance("loc")).build();
+        Service service = new Service.Builder("myService").setLocation(Location.newInstance("loc")).build();
         Shipment shipment = Shipment.Builder.newInstance("shipment").setPickupLocation(Location.Builder.newInstance().setId("pick").build())
             .setDeliveryLocation(Location.newInstance("del")).build();
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
@@ -456,8 +456,8 @@ public void whenAddingTwoJobs_theyShouldHaveProperIndeces() {
 
     @Test(expected = IllegalArgumentException.class)
     public void whenAddingTwoServicesWithTheSameId_itShouldThrowException() {
-        Service service1 = Service.Builder.newInstance("myService").setLocation(Location.newInstance("loc")).build();
-        Service service2 = Service.Builder.newInstance("myService").setLocation(Location.newInstance("loc")).build();
+        Service service1 = new Service.Builder("myService").setLocation(Location.newInstance("loc")).build();
+        Service service2 = new Service.Builder("myService").setLocation(Location.newInstance("loc")).build();
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addJob(service1);
         vrpBuilder.addJob(service2);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/LoadConstraintTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/LoadConstraintTest.java
index 5e9c09ef9..e8ac1914b 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/LoadConstraintTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/LoadConstraintTest.java
@@ -18,24 +18,39 @@
 
 package com.graphhopper.jsprit.core.problem.constraint;
 
-import com.graphhopper.jsprit.core.algorithm.state.StateManager;
-import com.graphhopper.jsprit.core.problem.*;
-import com.graphhopper.jsprit.core.problem.job.*;
-import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
-import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.*;
-import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
-import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
-import org.junit.Before;
-import org.junit.Test;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
 
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
 
-import static org.junit.Assert.*;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
+import org.junit.Before;
+import org.junit.Test;
+
+import com.graphhopper.jsprit.core.algorithm.state.StateManager;
+import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.IndexedActivity;
+import com.graphhopper.jsprit.core.problem.JobActivityFactory;
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
+import com.graphhopper.jsprit.core.problem.job.Delivery;
+import com.graphhopper.jsprit.core.problem.job.Job;
+import com.graphhopper.jsprit.core.problem.job.Pickup;
+import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
+import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverServiceDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverShipmentDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupServiceDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupShipmentDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.ServiceActivityNEW;
+import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 
 /**
  * unit tests to test load constraints
@@ -58,14 +73,14 @@ public void doBefore() {
         when(vehicle.getType()).thenReturn(type);
 
         VehicleRoutingProblem.Builder serviceProblemBuilder = VehicleRoutingProblem.Builder.newInstance();
-        Service s1 = Service.Builder.newInstance("s").addSizeDimension(0, 10).setLocation(Location.newInstance("loc")).build();
-        Service s2 = Service.Builder.newInstance("s2").addSizeDimension(0, 5).setLocation(Location.newInstance("loc")).build();
+        Service s1 = new Service.Builder("s").addSizeDimension(0, 10).setLocation(Location.newInstance("loc")).build();
+        Service s2 = new Service.Builder("s2").addSizeDimension(0, 5).setLocation(Location.newInstance("loc")).build();
         serviceProblemBuilder.addJob(s1).addJob(s2);
         final VehicleRoutingProblem serviceProblem = serviceProblemBuilder.build();
 
         final VehicleRoutingProblem.Builder pdProblemBuilder = VehicleRoutingProblem.Builder.newInstance();
-        Pickup pickup = (Pickup) Pickup.Builder.newInstance("pick").addSizeDimension(0, 10).setLocation(Location.newInstance("loc")).build();
-        Delivery delivery = (Delivery) Delivery.Builder.newInstance("del").addSizeDimension(0, 5).setLocation(Location.newInstance("loc")).build();
+        Pickup pickup = new Pickup.Builder("pick").addSizeDimension(0, 10).setLocation(Location.newInstance("loc")).build();
+        Delivery delivery = new Delivery.Builder("del").addSizeDimension(0, 5).setLocation(Location.newInstance("loc")).build();
         pdProblemBuilder.addJob(pickup).addJob(delivery);
         final VehicleRoutingProblem pdProblem = pdProblemBuilder.build();
 
@@ -303,7 +318,7 @@ public void whenPDRoute_newPickupShouldFitInBetweenStartAndAct1() {
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(pickup_delivery_route, s, pickup_delivery_route.getVehicle(), null, 0.);
-        PickupService newAct = new PickupService(s);
+        PickupServiceDEPRECATED newAct = new PickupServiceDEPRECATED(s);
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickup_delivery_route.getStart(), newAct, pickup_delivery_route.getActivities().get(0), 0.);
 
@@ -319,7 +334,7 @@ public void whenPDRoute_newPickupShouldFitInBetweenAct1AndAct2() {
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(pickup_delivery_route, s, pickup_delivery_route.getVehicle(), null, 0.);
-        PickupService newAct = new PickupService(s);
+        PickupServiceDEPRECATED newAct = new PickupServiceDEPRECATED(s);
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickup_delivery_route.getActivities().get(0), newAct, pickup_delivery_route.getActivities().get(1), 0.);
 
@@ -335,7 +350,7 @@ public void whenPDRoute_newPickupShouldFitInBetweenAct2AndEnd() {
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(pickup_delivery_route, s, pickup_delivery_route.getVehicle(), null, 0.);
-        PickupService newAct = new PickupService(s);
+        PickupServiceDEPRECATED newAct = new PickupServiceDEPRECATED(s);
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickup_delivery_route.getActivities().get(1), newAct, pickup_delivery_route.getEnd(), 0.);
 
@@ -354,7 +369,7 @@ public void whenPDRoute_newPickupShouldNotFitInBetweenStartAndAct1() {
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(pickup_delivery_route, s, pickup_delivery_route.getVehicle(), null, 0.);
-        PickupService newAct = new PickupService(s);
+        PickupServiceDEPRECATED newAct = new PickupServiceDEPRECATED(s);
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickup_delivery_route.getStart(), newAct, pickup_delivery_route.getActivities().get(0), 0.);
 
@@ -370,7 +385,7 @@ public void whenPDRoute_newPickupShouldNotFitInBetweenAct1AndAct2() {
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(pickup_delivery_route, s, pickup_delivery_route.getVehicle(), null, 0.);
-        PickupService newAct = new PickupService(s);
+        PickupServiceDEPRECATED newAct = new PickupServiceDEPRECATED(s);
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickup_delivery_route.getActivities().get(0), newAct, pickup_delivery_route.getActivities().get(1), 0.);
 
@@ -386,7 +401,7 @@ public void whenPDRoute_newPickupShouldNotFitInBetweenAct2AndEnd() {
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(pickup_delivery_route, s, pickup_delivery_route.getVehicle(), null, 0.);
-        PickupService newAct = new PickupService(s);
+        PickupServiceDEPRECATED newAct = new PickupServiceDEPRECATED(s);
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickup_delivery_route.getActivities().get(1), newAct, pickup_delivery_route.getEnd(), 0.);
 
@@ -406,7 +421,7 @@ public void whenPDRoute_newDeliveryShouldFitInBetweenStartAndAct1() {
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(pickup_delivery_route, s, pickup_delivery_route.getVehicle(), null, 0.);
-        DeliverService newAct = new DeliverService(s);
+        DeliverServiceDEPRECATED newAct = new DeliverServiceDEPRECATED(s);
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickup_delivery_route.getStart(), newAct, pickup_delivery_route.getActivities().get(0), 0.);
 
@@ -422,7 +437,7 @@ public void whenPDRoute_newDeliveryShouldNotFitInBetweenStartAndAct1() {
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(pickup_delivery_route, s, pickup_delivery_route.getVehicle(), null, 0.);
-        DeliverService newAct = new DeliverService(s);
+        DeliverServiceDEPRECATED newAct = new DeliverServiceDEPRECATED(s);
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickup_delivery_route.getStart(), newAct, pickup_delivery_route.getActivities().get(0), 0.);
 
@@ -438,7 +453,7 @@ public void whenPDRoute_newDeliveryShouldFitInBetweenAct1AndAct2() {
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(pickup_delivery_route, s, pickup_delivery_route.getVehicle(), null, 0.);
-        DeliverService newAct = new DeliverService(s);
+        DeliverServiceDEPRECATED newAct = new DeliverServiceDEPRECATED(s);
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickup_delivery_route.getActivities().get(0), newAct, pickup_delivery_route.getActivities().get(1), 0.);
 
@@ -454,7 +469,7 @@ public void whenPDRoute_newDeliveryNotShouldFitInBetweenAct1AndAct2() {
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(pickup_delivery_route, s, pickup_delivery_route.getVehicle(), null, 0.);
-        DeliverService newAct = new DeliverService(s);
+        DeliverServiceDEPRECATED newAct = new DeliverServiceDEPRECATED(s);
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickup_delivery_route.getActivities().get(0), newAct, pickup_delivery_route.getActivities().get(1), 0.);
 
@@ -470,7 +485,7 @@ public void whenPDRoute_newDeliveryShouldFitInBetweenAct2AndEnd() {
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(pickup_delivery_route, s, pickup_delivery_route.getVehicle(), null, 0.);
-        DeliverService newAct = new DeliverService(s);
+        DeliverServiceDEPRECATED newAct = new DeliverServiceDEPRECATED(s);
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickup_delivery_route.getActivities().get(1), newAct, pickup_delivery_route.getEnd(), 0.);
 
@@ -486,7 +501,7 @@ public void whenPDRoute_newDeliveryShouldNotFitInBetweenAct2AndEnd() {
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(pickup_delivery_route, s, pickup_delivery_route.getVehicle(), null, 0.);
-        DeliverService newAct = new DeliverService(s);
+        DeliverServiceDEPRECATED newAct = new DeliverServiceDEPRECATED(s);
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickup_delivery_route.getActivities().get(1), newAct, pickup_delivery_route.getEnd(), 0.);
 
@@ -610,7 +625,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldFitInBetweenStartAndAct
 
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
-        PickupShipment newAct = new PickupShipment(s);
+        PickupShipmentDEPRECATED newAct = new PickupShipmentDEPRECATED(s);
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getStart(), newAct, shipment_route.getActivities().get(0), 0.);
 
@@ -627,7 +642,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldNotFitInBetweenStartAnd
 
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
-        PickupShipment newAct = new PickupShipment(s);
+        PickupShipmentDEPRECATED newAct = new PickupShipmentDEPRECATED(s);
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getStart(), newAct, shipment_route.getActivities().get(0), 0.);
 
@@ -644,7 +659,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldFitInBetweenAct1AndAct2
 
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
-        PickupShipment newAct = new PickupShipment(s);
+        PickupShipmentDEPRECATED newAct = new PickupShipmentDEPRECATED(s);
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getActivities().get(0), newAct, shipment_route.getActivities().get(1), 0.);
 
@@ -661,7 +676,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldNotFitInBetweenAct1AndA
 
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
-        PickupShipment newAct = new PickupShipment(s);
+        PickupShipmentDEPRECATED newAct = new PickupShipmentDEPRECATED(s);
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getActivities().get(0), newAct, shipment_route.getActivities().get(1), 0.);
 
@@ -678,7 +693,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldFitInBetweenAct2AndAct3
 
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
-        PickupShipment newAct = new PickupShipment(s);
+        PickupShipmentDEPRECATED newAct = new PickupShipmentDEPRECATED(s);
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getActivities().get(1), newAct, shipment_route.getActivities().get(2), 0.);
 
@@ -695,7 +710,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldNotFitInBetweenAct2AndA
 
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
-        PickupShipment newAct = new PickupShipment(s);
+        PickupShipmentDEPRECATED newAct = new PickupShipmentDEPRECATED(s);
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getActivities().get(1), newAct, shipment_route.getActivities().get(2), 0.);
 
@@ -712,7 +727,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldFitInBetweenAct3AndAct4
 
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
-        PickupShipment newAct = new PickupShipment(s);
+        PickupShipmentDEPRECATED newAct = new PickupShipmentDEPRECATED(s);
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getActivities().get(2), newAct, shipment_route.getActivities().get(3), 0.);
 
@@ -729,7 +744,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldNotFitInBetweenAct3AndA
 
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
-        PickupShipment newAct = new PickupShipment(s);
+        PickupShipmentDEPRECATED newAct = new PickupShipmentDEPRECATED(s);
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getActivities().get(2), newAct, shipment_route.getActivities().get(3), 0.);
 
@@ -746,7 +761,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldFitInBetweenAct4AndEnd(
 
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
-        PickupShipment newAct = new PickupShipment(s);
+        PickupShipmentDEPRECATED newAct = new PickupShipmentDEPRECATED(s);
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getActivities().get(3), newAct, shipment_route.getEnd(), 0.);
 
@@ -763,7 +778,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldNotFitInBetweenAct4AndE
 
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
-        PickupShipment newAct = new PickupShipment(s);
+        PickupShipmentDEPRECATED newAct = new PickupShipmentDEPRECATED(s);
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getActivities().get(3), newAct, shipment_route.getEnd(), 0.);
 
@@ -784,7 +799,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldFitInBetweenStartAndA
 
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
-        DeliverShipment newAct = new DeliverShipment(s);
+        DeliverShipmentDEPRECATED newAct = new DeliverShipmentDEPRECATED(s);
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getStart(), newAct, shipment_route.getActivities().get(0), 0.);
 
@@ -801,7 +816,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldNotFitInBetweenStartA
 
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
-        DeliverShipment newAct = new DeliverShipment(s);
+        DeliverShipmentDEPRECATED newAct = new DeliverShipmentDEPRECATED(s);
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getStart(), newAct, shipment_route.getActivities().get(0), 0.);
 
@@ -818,7 +833,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldFitInBetweenAct1AndAc
 
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
-        DeliverShipment newAct = new DeliverShipment(s);
+        DeliverShipmentDEPRECATED newAct = new DeliverShipmentDEPRECATED(s);
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getActivities().get(0), newAct, shipment_route.getActivities().get(1), 0.);
 
@@ -835,7 +850,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldNotFitInBetweenAct1An
 
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
-        DeliverShipment newAct = new DeliverShipment(s);
+        DeliverShipmentDEPRECATED newAct = new DeliverShipmentDEPRECATED(s);
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getActivities().get(0), newAct, shipment_route.getActivities().get(1), 0.);
 
@@ -852,7 +867,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldFitInBetweenAct2AndAc
 
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
-        DeliverShipment newAct = new DeliverShipment(s);
+        DeliverShipmentDEPRECATED newAct = new DeliverShipmentDEPRECATED(s);
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getActivities().get(1), newAct, shipment_route.getActivities().get(2), 0.);
 
@@ -869,7 +884,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldNotFitInBetweenAct2An
 
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
-        DeliverShipment newAct = new DeliverShipment(s);
+        DeliverShipmentDEPRECATED newAct = new DeliverShipmentDEPRECATED(s);
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getActivities().get(1), newAct, shipment_route.getActivities().get(2), 0.);
 
@@ -886,7 +901,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldFitInBetweenAct3AndAc
 
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
-        DeliverShipment newAct = new DeliverShipment(s);
+        DeliverShipmentDEPRECATED newAct = new DeliverShipmentDEPRECATED(s);
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getActivities().get(2), newAct, shipment_route.getActivities().get(3), 0.);
 
@@ -903,7 +918,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldNotFitInBetweenAct3An
 
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
-        DeliverShipment newAct = new DeliverShipment(s);
+        DeliverShipmentDEPRECATED newAct = new DeliverShipmentDEPRECATED(s);
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getActivities().get(2), newAct, shipment_route.getActivities().get(3), 0.);
 
@@ -920,7 +935,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldFitInBetweenAct4AndEn
 
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
-        DeliverShipment newAct = new DeliverShipment(s);
+        DeliverShipmentDEPRECATED newAct = new DeliverShipmentDEPRECATED(s);
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getActivities().get(3), newAct, shipment_route.getEnd(), 0.);
 
@@ -937,7 +952,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldNotFitInBetweenAct4An
 
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
-        DeliverShipment newAct = new DeliverShipment(s);
+        DeliverShipmentDEPRECATED newAct = new DeliverShipmentDEPRECATED(s);
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getActivities().get(3), newAct, shipment_route.getEnd(), 0.);
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadRouteLevelConstraintTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadRouteLevelConstraintTest.java
index 39e2bdb22..b5222bc03 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadRouteLevelConstraintTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadRouteLevelConstraintTest.java
@@ -350,7 +350,7 @@ public void whenNewVehicleCapacityIsNotSufficiant2_returnFalse() {
 
 
     private Service createPickup(String string, int i) {
-        return Pickup.Builder.newInstance(string).addSizeDimension(0, i).setLocation(Location.newInstance("loc")).build();
+        return new Pickup.Builder(string).addSizeDimension(0, i).setLocation(Location.newInstance("loc")).build();
     }
 
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/SkillConstraintTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/SkillConstraintTest.java
index d5f5b8e16..69b0098e2 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/SkillConstraintTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/SkillConstraintTest.java
@@ -54,11 +54,11 @@ public void doBefore() {
         vehicle = VehicleImpl.Builder.newInstance("v").addSkill("skill1").addSkill("skill2").addSkill("skill3").addSkill("skill4").setStartLocation(Location.newInstance("start")).setType(type).build();
         vehicle2 = VehicleImpl.Builder.newInstance("v2").addSkill("skill4").addSkill("skill5").setStartLocation(Location.newInstance("start")).setType(type).build();
 
-        Service service = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc")).addRequiredSkill("skill1").build();
-        Service service2 = Service.Builder.newInstance("s2").setLocation(Location.newInstance("loc")).addRequiredSkill("skill1").addRequiredSkill("skill2").addRequiredSkill("skill3").build();
+        Service service = new Service.Builder("s").setLocation(Location.newInstance("loc")).addRequiredSkill("skill1").build();
+        Service service2 = new Service.Builder("s2").setLocation(Location.newInstance("loc")).addRequiredSkill("skill1").addRequiredSkill("skill2").addRequiredSkill("skill3").build();
 
-        Service service3 = Service.Builder.newInstance("s3").setLocation(Location.newInstance("loc")).addRequiredSkill("skill4").addRequiredSkill("skill5").build();
-        Service service4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance("loc")).addRequiredSkill("skill1").build();
+        Service service3 = new Service.Builder("s3").setLocation(Location.newInstance("loc")).addRequiredSkill("skill4").addRequiredSkill("skill5").build();
+        Service service4 = new Service.Builder("s4").setLocation(Location.newInstance("loc")).addRequiredSkill("skill1").build();
 
         vrp = VehicleRoutingProblem.Builder.newInstance().addVehicle(vehicle).addVehicle(vehicle2).addJob(service)
             .addJob(service2).addJob(service3).addJob(service4).build();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowTest.java
index 39c92d874..d4eb230a0 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowTest.java
@@ -18,11 +18,28 @@
 
 package com.graphhopper.jsprit.core.problem.constraint;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.List;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.state.InternalStates;
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.algorithm.state.UpdateActivityTimes;
 import com.graphhopper.jsprit.core.algorithm.state.UpdateVehicleDependentPracticalTimeWindows;
-import com.graphhopper.jsprit.core.problem.*;
+import com.graphhopper.jsprit.core.problem.AbstractVehicle;
+import com.graphhopper.jsprit.core.problem.IndexedActivity;
+import com.graphhopper.jsprit.core.problem.JobActivityFactory;
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingActivityCosts;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.cost.WaitingTimeCosts;
@@ -30,15 +47,14 @@
 import com.graphhopper.jsprit.core.problem.job.Service;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupService;
-import com.graphhopper.jsprit.core.problem.vehicle.*;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupServiceDEPRECATED;
+import com.graphhopper.jsprit.core.problem.vehicle.FiniteFleetManagerFactory;
+import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleFleetManager;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.CostFactory;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.*;
-
-import static org.junit.Assert.*;
 
 /**
  * unit tests to test vehicle dependent time-windows
@@ -73,28 +89,28 @@ public void doBefore() {
 
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").build();
         vehicle = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance("0,0"))
-            .setEarliestStart(0.).setLatestArrival(100.).build();
+                .setEarliestStart(0.).setLatestArrival(100.).build();
 
         v2 = VehicleImpl.Builder.newInstance("v2").setType(type).setStartLocation(Location.newInstance("0,0"))
-            .setEarliestStart(0.).setLatestArrival(60.).build();
+                .setEarliestStart(0.).setLatestArrival(60.).build();
 
         v3 = VehicleImpl.Builder.newInstance("v3").setType(type).setStartLocation(Location.newInstance("0,0"))
-            .setEarliestStart(0.).setLatestArrival(50.).build();
+                .setEarliestStart(0.).setLatestArrival(50.).build();
 
         v4 = VehicleImpl.Builder.newInstance("v4").setType(type).setStartLocation(Location.newInstance("0,0"))
-            .setEarliestStart(0.).setLatestArrival(10.).build();
+                .setEarliestStart(0.).setLatestArrival(10.).build();
 
         v5 = VehicleImpl.Builder.newInstance("v5").setType(type).setStartLocation(Location.newInstance("0,0"))
-            .setEarliestStart(60.).setLatestArrival(100.).build();
+                .setEarliestStart(60.).setLatestArrival(100.).build();
 
         v6 = VehicleImpl.Builder.newInstance("v6").setType(type).setStartLocation(Location.newInstance("0,0"))
-            .setEndLocation(Location.newInstance("40,0")).setEarliestStart(0.).setLatestArrival(40.).build();
+                .setEndLocation(Location.newInstance("40,0")).setEarliestStart(0.).setLatestArrival(40.).build();
 
         vrpBuilder.addVehicle(vehicle).addVehicle(v2).addVehicle(v3).addVehicle(v4).addVehicle(v5).addVehicle(v6);
 
-        Service service = Service.Builder.newInstance("s1").setLocation(Location.newInstance("10,0")).build();
-        Service service2 = Service.Builder.newInstance("s2").setLocation(Location.newInstance("20,0")).build();
-        Service service3 = Service.Builder.newInstance("s3").setLocation(Location.newInstance("30,0")).build();
+        Service service = new Service.Builder("s1").setLocation(Location.newInstance("10,0")).build();
+        Service service2 = new Service.Builder("s2").setLocation(Location.newInstance("20,0")).build();
+        Service service3 = new Service.Builder("s3").setLocation(Location.newInstance("30,0")).build();
 
         vrpBuilder.addJob(service).addJob(service2).addJob(service3);
         final VehicleRoutingProblem vrp = vrpBuilder.build();
@@ -140,26 +156,26 @@ public void doBefore() {
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct3() {
         assertEquals(70., stateManager.getActivityState(route.getActivities().get(2),
-            vehicle, InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+                vehicle, InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct2() {
         assertEquals(60., stateManager.getActivityState(route.getActivities().get(1),
-            vehicle, InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+                vehicle, InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct1() {
         assertEquals(50., stateManager.getActivityState(route.getActivities().get(0),
-            vehicle, InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+                vehicle, InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
     @Test
     public void whenNewJobIsInsertedWithOldVeh_itJustShouldReturnTrue() {
 
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance("50,0")).build();
-        PickupService serviceAct = new PickupService(s4);
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("50,0")).build();
+        PickupServiceDEPRECATED serviceAct = new PickupServiceDEPRECATED(s4);
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, vehicle, route.getDriver(), 0.);
 
@@ -173,8 +189,8 @@ public void whenNewJobIsInsertedWithOldVeh_itJustShouldReturnTrue() {
     @Test
     public void whenNewJobIsInsertedWithOldVeh_itJustShouldReturnFalse() {
 
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance("1000,0")).build();
-        PickupService serviceAct = new PickupService(s4);
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("1000,0")).build();
+        PickupServiceDEPRECATED serviceAct = new PickupServiceDEPRECATED(s4);
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, vehicle, route.getDriver(), 0.);
 
@@ -188,8 +204,8 @@ public void whenNewJobIsInsertedWithOldVeh_itJustShouldReturnFalse() {
     @Test
     public void whenNewJobIsInsertedInBetweenAct1And2WithOldVeh_itJustShouldReturnTrue() {
 
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance("50,0")).build();
-        PickupService serviceAct = new PickupService(s4);
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("50,0")).build();
+        PickupServiceDEPRECATED serviceAct = new PickupServiceDEPRECATED(s4);
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, vehicle, route.getDriver(), 0.);
 
@@ -206,8 +222,8 @@ public void whenNewJobIsInsertedInBetweenAct1And2WithOldVeh_itJustShouldReturnTr
     @Test
     public void whenNewJobIsInsertedInBetweenAct1And2WithOldVeh_itJustShouldReturnFalse() {
 
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance("51,0")).build();
-        PickupService serviceAct = new PickupService(s4);
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("51,0")).build();
+        PickupServiceDEPRECATED serviceAct = new PickupServiceDEPRECATED(s4);
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, vehicle, route.getDriver(), 0.);
 
@@ -227,8 +243,8 @@ public void whenJobIsInsertedAlongWithNewVehicleThatNeedsToBeHomeAt60_itShouldRe
 
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance("40,0")).build();
-        PickupService serviceAct = new PickupService(s4);
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
+        PickupServiceDEPRECATED serviceAct = new PickupServiceDEPRECATED(s4);
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v2, route.getDriver(), 0.);
 
@@ -245,8 +261,8 @@ public void whenJobIsInsertedAlongWithNewVehicleThatNeedsToBeHomeAt50_itShouldRe
 
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance("40,0")).build();
-        PickupService serviceAct = new PickupService(s4);
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
+        PickupServiceDEPRECATED serviceAct = new PickupServiceDEPRECATED(s4);
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v3, route.getDriver(), 0.);
 
@@ -262,8 +278,8 @@ public void whenJobIsInsertedAlongWithNewVehicleThatNeedsToBeHomeAt10_itShouldRe
 
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance("40,0")).build();
-        PickupService serviceAct = new PickupService(s4);
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
+        PickupServiceDEPRECATED serviceAct = new PickupServiceDEPRECATED(s4);
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v4, route.getDriver(), 0.);
 
@@ -279,8 +295,8 @@ public void whenJobIsInsertedAlongWithV6BetweenS2AndS3_itShouldReturnFalse() {
 
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance("40,0")).build();
-        PickupService serviceAct = new PickupService(s4);
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
+        PickupServiceDEPRECATED serviceAct = new PickupServiceDEPRECATED(s4);
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v6, route.getDriver(), 0.);
 
@@ -296,8 +312,8 @@ public void whenJobIsInsertedAlongWithV6BetweenS1AndS2_itShouldReturnFalse() {
 
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance("40,0")).build();
-        PickupService serviceAct = new PickupService(s4);
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
+        PickupServiceDEPRECATED serviceAct = new PickupServiceDEPRECATED(s4);
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v6, route.getDriver(), 0.);
 
@@ -313,8 +329,8 @@ public void whenJobIsInsertedAlongWithV6AtTheEndOfRoute_itShouldReturnTrue() {
 
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance("40,0")).build();
-        PickupService serviceAct = new PickupService(s4);
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
+        PickupServiceDEPRECATED serviceAct = new PickupServiceDEPRECATED(s4);
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v6, route.getDriver(), 0.);
 
@@ -328,8 +344,8 @@ public void whenJobIsInsertedAlongWithV6AtTheEndOfRoute_itShouldReturnTrue() {
     public void whenJobIsInsertedAlongWithNewVehicleThatCanOnlyStartAt60_itShouldReturnFalse() {
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance("40,0")).build();
-        PickupService serviceAct = new PickupService(s4);
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
+        PickupServiceDEPRECATED serviceAct = new PickupServiceDEPRECATED(s4);
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v5, route.getDriver(), 60.);
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowWithStartTimeAndMaxOperationTimeTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowWithStartTimeAndMaxOperationTimeTest.java
index de090cc70..c9e9992fe 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowWithStartTimeAndMaxOperationTimeTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowWithStartTimeAndMaxOperationTimeTest.java
@@ -18,11 +18,28 @@
 
 package com.graphhopper.jsprit.core.problem.constraint;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.List;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.state.InternalStates;
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.algorithm.state.UpdateActivityTimes;
 import com.graphhopper.jsprit.core.algorithm.state.UpdateVehicleDependentPracticalTimeWindows;
-import com.graphhopper.jsprit.core.problem.*;
+import com.graphhopper.jsprit.core.problem.AbstractVehicle;
+import com.graphhopper.jsprit.core.problem.IndexedActivity;
+import com.graphhopper.jsprit.core.problem.JobActivityFactory;
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingActivityCosts;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.cost.WaitingTimeCosts;
@@ -30,15 +47,14 @@
 import com.graphhopper.jsprit.core.problem.job.Service;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupService;
-import com.graphhopper.jsprit.core.problem.vehicle.*;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupServiceDEPRECATED;
+import com.graphhopper.jsprit.core.problem.vehicle.FiniteFleetManagerFactory;
+import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleFleetManager;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.CostFactory;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.*;
-
-import static org.junit.Assert.*;
 
 /**
  * unit tests to test vehicle dependent time-windows
@@ -71,28 +87,28 @@ public void doBefore() {
 
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").build();
         vehicle = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance("0,0"))
-            .setEarliestStart(0.).setLatestArrival(100.).build();
+                .setEarliestStart(0.).setLatestArrival(100.).build();
 
         v2 = VehicleImpl.Builder.newInstance("v2").setType(type).setStartLocation(Location.newInstance("0,0"))
-            .setEarliestStart(0.).setLatestArrival(60.).build();
+                .setEarliestStart(0.).setLatestArrival(60.).build();
 
         v3 = VehicleImpl.Builder.newInstance("v3").setType(type).setStartLocation(Location.newInstance("0,0"))
-            .setEarliestStart(0.).setLatestArrival(50.).build();
+                .setEarliestStart(0.).setLatestArrival(50.).build();
 
         v4 = VehicleImpl.Builder.newInstance("v4").setType(type).setStartLocation(Location.newInstance("0,0"))
-            .setEarliestStart(0.).setLatestArrival(10.).build();
+                .setEarliestStart(0.).setLatestArrival(10.).build();
 
         v5 = VehicleImpl.Builder.newInstance("v5").setType(type).setStartLocation(Location.newInstance("0,0"))
-            .setEarliestStart(60.).setLatestArrival(100.).build();
+                .setEarliestStart(60.).setLatestArrival(100.).build();
 
         v6 = VehicleImpl.Builder.newInstance("v6").setType(type).setStartLocation(Location.newInstance("0,0"))
-            .setEndLocation(Location.newInstance("40,0")).setEarliestStart(0.).setLatestArrival(40.).build();
+                .setEndLocation(Location.newInstance("40,0")).setEarliestStart(0.).setLatestArrival(40.).build();
 
         vrpBuilder.addVehicle(vehicle).addVehicle(v2).addVehicle(v3).addVehicle(v4).addVehicle(v5).addVehicle(v6);
 
-        Service service = Service.Builder.newInstance("s1").setLocation(Location.newInstance("10,0")).build();
-        Service service2 = Service.Builder.newInstance("s2").setLocation(Location.newInstance("20,0")).build();
-        Service service3 = Service.Builder.newInstance("s3").setLocation(Location.newInstance("30,0")).build();
+        Service service = new Service.Builder("s1").setLocation(Location.newInstance("10,0")).build();
+        Service service2 = new Service.Builder("s2").setLocation(Location.newInstance("20,0")).build();
+        Service service3 = new Service.Builder("s3").setLocation(Location.newInstance("30,0")).build();
 
         vrpBuilder.addJob(service).addJob(service2).addJob(service3);
         final VehicleRoutingProblem vrp = vrpBuilder.build();
@@ -138,26 +154,26 @@ public void doBefore() {
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct3() {
         assertEquals(70., stateManager.getActivityState(route.getActivities().get(2),
-            vehicle, InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+                vehicle, InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct2() {
         assertEquals(60., stateManager.getActivityState(route.getActivities().get(1),
-            vehicle, InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+                vehicle, InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct1() {
         assertEquals(50., stateManager.getActivityState(route.getActivities().get(0),
-            vehicle, InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+                vehicle, InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
     @Test
     public void whenNewJobIsInsertedWithOldVeh_itJustShouldReturnTrue() {
 
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance("50,0")).build();
-        PickupService serviceAct = new PickupService(s4);
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("50,0")).build();
+        PickupServiceDEPRECATED serviceAct = new PickupServiceDEPRECATED(s4);
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, vehicle, route.getDriver(), 0.);
 
@@ -171,8 +187,8 @@ public void whenNewJobIsInsertedWithOldVeh_itJustShouldReturnTrue() {
     @Test
     public void whenNewJobIsInsertedWithOldVeh_itJustShouldReturnFalse() {
 
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance("1000,0")).build();
-        PickupService serviceAct = new PickupService(s4);
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("1000,0")).build();
+        PickupServiceDEPRECATED serviceAct = new PickupServiceDEPRECATED(s4);
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, vehicle, route.getDriver(), 0.);
 
@@ -186,8 +202,8 @@ public void whenNewJobIsInsertedWithOldVeh_itJustShouldReturnFalse() {
     @Test
     public void whenNewJobIsInsertedInBetweenAct1And2WithOldVeh_itJustShouldReturnTrue() {
 
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance("50,0")).build();
-        PickupService serviceAct = new PickupService(s4);
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("50,0")).build();
+        PickupServiceDEPRECATED serviceAct = new PickupServiceDEPRECATED(s4);
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, vehicle, route.getDriver(), 0.);
 
@@ -204,8 +220,8 @@ public void whenNewJobIsInsertedInBetweenAct1And2WithOldVeh_itJustShouldReturnTr
     @Test
     public void whenNewJobIsInsertedInBetweenAct1And2WithOldVeh_itJustShouldReturnFalse() {
 
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance("51,0")).build();
-        PickupService serviceAct = new PickupService(s4);
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("51,0")).build();
+        PickupServiceDEPRECATED serviceAct = new PickupServiceDEPRECATED(s4);
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, vehicle, route.getDriver(), 0.);
 
@@ -225,8 +241,8 @@ public void whenJobIsInsertedAlongWithNewVehicleThatNeedsToBeHomeAt60_itShouldRe
 
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance("40,0")).build();
-        PickupService serviceAct = new PickupService(s4);
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
+        PickupServiceDEPRECATED serviceAct = new PickupServiceDEPRECATED(s4);
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v2, route.getDriver(), 0.);
 
@@ -243,8 +259,8 @@ public void whenJobIsInsertedAlongWithNewVehicleThatNeedsToBeHomeAt50_itShouldRe
 
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance("40,0")).build();
-        PickupService serviceAct = new PickupService(s4);
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
+        PickupServiceDEPRECATED serviceAct = new PickupServiceDEPRECATED(s4);
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v3, route.getDriver(), 0.);
 
@@ -260,8 +276,8 @@ public void whenJobIsInsertedAlongWithNewVehicleThatNeedsToBeHomeAt10_itShouldRe
 
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance("40,0")).build();
-        PickupService serviceAct = new PickupService(s4);
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
+        PickupServiceDEPRECATED serviceAct = new PickupServiceDEPRECATED(s4);
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v4, route.getDriver(), 0.);
 
@@ -277,8 +293,8 @@ public void whenJobIsInsertedAlongWithV6BetweenS2AndS3_itShouldReturnFalse() {
 
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance("40,0")).build();
-        PickupService serviceAct = new PickupService(s4);
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
+        PickupServiceDEPRECATED serviceAct = new PickupServiceDEPRECATED(s4);
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v6, route.getDriver(), 0.);
 
@@ -294,8 +310,8 @@ public void whenJobIsInsertedAlongWithV6BetweenS1AndS2_itShouldReturnFalse() {
 
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance("40,0")).build();
-        PickupService serviceAct = new PickupService(s4);
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
+        PickupServiceDEPRECATED serviceAct = new PickupServiceDEPRECATED(s4);
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v6, route.getDriver(), 0.);
 
@@ -311,8 +327,8 @@ public void whenJobIsInsertedAlongWithV6AtTheEndOfRoute_itShouldReturnTrue() {
 
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance("40,0")).build();
-        PickupService serviceAct = new PickupService(s4);
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
+        PickupServiceDEPRECATED serviceAct = new PickupServiceDEPRECATED(s4);
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v6, route.getDriver(), 0.);
 
@@ -326,8 +342,8 @@ public void whenJobIsInsertedAlongWithV6AtTheEndOfRoute_itShouldReturnTrue() {
     public void whenJobIsInsertedAlongWithNewVehicleThatCanOnlyStartAt60_itShouldReturnFalse() {
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance("40,0")).build();
-        PickupService serviceAct = new PickupService(s4);
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
+        PickupServiceDEPRECATED serviceAct = new PickupServiceDEPRECATED(s4);
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v5, route.getDriver(), 60.);
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/DeliveryTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/DeliveryTest.java
index 0ab568c6f..73d2719b1 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/DeliveryTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/DeliveryTest.java
@@ -27,12 +27,12 @@
 
     @Test(expected = IllegalArgumentException.class)
     public void whenNeitherLocationIdNorCoordIsSet_itThrowsException() {
-        Delivery.Builder.newInstance("p").build();
+        new Delivery.Builder("p").build();
     }
 
     @Test
     public void whenAddingTwoCapDimension_nuOfDimsShouldBeTwo() {
-        Delivery one = Delivery.Builder.newInstance("s").setLocation(Location.newInstance("foofoo"))
+        Delivery one = new Delivery.Builder("s").setLocation(Location.newInstance("foofoo"))
             .addSizeDimension(0, 2)
             .addSizeDimension(1, 4)
             .build();
@@ -44,7 +44,7 @@ public void whenAddingTwoCapDimension_nuOfDimsShouldBeTwo() {
 
     @Test
     public void whenPickupIsBuiltWithoutSpecifyingCapacity_itShouldHvCapWithOneDimAndDimValOfZero() {
-        Delivery one = Delivery.Builder.newInstance("s").setLocation(Location.newInstance("foofoo"))
+        Delivery one = new Delivery.Builder("s").setLocation(Location.newInstance("foofoo"))
             .build();
         assertEquals(1, one.getSize().getNuOfDimensions());
         assertEquals(0, one.getSize().get(0));
@@ -52,7 +52,7 @@ public void whenPickupIsBuiltWithoutSpecifyingCapacity_itShouldHvCapWithOneDimAn
 
     @Test
     public void whenPickupIsBuiltWithConstructorWhereSizeIsSpecified_capacityShouldBeSetCorrectly() {
-        Delivery one = Delivery.Builder.newInstance("s").addSizeDimension(0, 1).setLocation(Location.newInstance("foofoo"))
+        Delivery one = new Delivery.Builder("s").addSizeDimension(0, 1).setLocation(Location.newInstance("foofoo"))
             .build();
         assertEquals(1, one.getSize().getNuOfDimensions());
         assertEquals(1, one.getSize().get(0));
@@ -60,7 +60,7 @@ public void whenPickupIsBuiltWithConstructorWhereSizeIsSpecified_capacityShouldB
 
     @Test
     public void whenAddingSkills_theyShouldBeAddedCorrectly() {
-        Delivery s = Delivery.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        Delivery s = new Delivery.Builder("s").setLocation(Location.newInstance("loc"))
             .addRequiredSkill("drill").addRequiredSkill("screwdriver").build();
         assertTrue(s.getRequiredSkills().containsSkill("drill"));
         assertTrue(s.getRequiredSkills().containsSkill("ScrewDriver"));
@@ -68,7 +68,7 @@ public void whenAddingSkills_theyShouldBeAddedCorrectly() {
 
     @Test
     public void whenAddingSkillsCaseSens_theyShouldBeAddedCorrectly() {
-        Delivery s = Delivery.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        Delivery s = new Delivery.Builder("s").setLocation(Location.newInstance("loc"))
             .addRequiredSkill("DriLl").addRequiredSkill("screwDriver").build();
         assertTrue(s.getRequiredSkills().containsSkill("drill"));
         assertTrue(s.getRequiredSkills().containsSkill("drilL"));
@@ -76,7 +76,7 @@ public void whenAddingSkillsCaseSens_theyShouldBeAddedCorrectly() {
 
     @Test
     public void whenAddingSkillsCaseSensV2_theyShouldBeAddedCorrectly() {
-        Delivery s = Delivery.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        Delivery s = new Delivery.Builder("s").setLocation(Location.newInstance("loc"))
             .addRequiredSkill("screwDriver").build();
         assertFalse(s.getRequiredSkills().containsSkill("drill"));
         assertFalse(s.getRequiredSkills().containsSkill("drilL"));
@@ -84,21 +84,21 @@ public void whenAddingSkillsCaseSensV2_theyShouldBeAddedCorrectly() {
 
     @Test
     public void nameShouldBeAssigned() {
-        Delivery s = Delivery.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        Delivery s = new Delivery.Builder("s").setLocation(Location.newInstance("loc"))
             .setName("name").build();
         assertEquals("name", s.getName());
     }
 
     @Test
     public void whenSettingPriorities_itShouldBeSetCorrectly(){
-        Delivery s = Delivery.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        Delivery s = new Delivery.Builder("s").setLocation(Location.newInstance("loc"))
             .setPriority(3).build();
         Assert.assertEquals(3, s.getPriority());
     }
 
     @Test
     public void whenNotSettingPriorities_defaultShouldBe(){
-        Delivery s = Delivery.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        Delivery s = new Delivery.Builder("s").setLocation(Location.newInstance("loc"))
             .build();
         Assert.assertEquals(2, s.getPriority());
     }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/PickupTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/PickupTest.java
index 6236536c2..ceffb7ccc 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/PickupTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/PickupTest.java
@@ -27,12 +27,12 @@
 
     @Test(expected = IllegalArgumentException.class)
     public void whenNeitherLocationIdNorCoordIsSet_itThrowsException() {
-        Pickup.Builder.newInstance("p").build();
+        new Pickup.Builder("p").build();
     }
 
     @Test
     public void whenAddingTwoCapDimension_nuOfDimsShouldBeTwo() {
-        Pickup one = Pickup.Builder.newInstance("s").setLocation(Location.newInstance("foofoo"))
+        Pickup one = new Pickup.Builder("s").setLocation(Location.newInstance("foofoo"))
             .addSizeDimension(0, 2)
             .addSizeDimension(1, 4)
             .build();
@@ -44,7 +44,7 @@ public void whenAddingTwoCapDimension_nuOfDimsShouldBeTwo() {
 
     @Test
     public void whenPickupIsBuiltWithoutSpecifyingCapacity_itShouldHvCapWithOneDimAndDimValOfZero() {
-        Pickup one = Pickup.Builder.newInstance("s").setLocation(Location.newInstance("foofoo"))
+        Pickup one = new Pickup.Builder("s").setLocation(Location.newInstance("foofoo"))
             .build();
         assertEquals(1, one.getSize().getNuOfDimensions());
         assertEquals(0, one.getSize().get(0));
@@ -52,7 +52,7 @@ public void whenPickupIsBuiltWithoutSpecifyingCapacity_itShouldHvCapWithOneDimAn
 
     @Test
     public void whenPickupIsBuiltWithConstructorWhereSizeIsSpecified_capacityShouldBeSetCorrectly() {
-        Pickup one = Pickup.Builder.newInstance("s").addSizeDimension(0, 1).setLocation(Location.newInstance("foofoo"))
+        Pickup one = new Pickup.Builder("s").addSizeDimension(0, 1).setLocation(Location.newInstance("foofoo"))
             .build();
         assertEquals(1, one.getSize().getNuOfDimensions());
         assertEquals(1, one.getSize().get(0));
@@ -60,7 +60,7 @@ public void whenPickupIsBuiltWithConstructorWhereSizeIsSpecified_capacityShouldB
 
     @Test
     public void whenAddingSkills_theyShouldBeAddedCorrectly() {
-        Pickup s = Pickup.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        Pickup s = new Pickup.Builder("s").setLocation(Location.newInstance("loc"))
             .addRequiredSkill("drill").addRequiredSkill("screwdriver").build();
         assertTrue(s.getRequiredSkills().containsSkill("drill"));
         assertTrue(s.getRequiredSkills().containsSkill("drill"));
@@ -69,7 +69,7 @@ public void whenAddingSkills_theyShouldBeAddedCorrectly() {
 
     @Test
     public void whenAddingSkillsCaseSens_theyShouldBeAddedCorrectly() {
-        Pickup s = Pickup.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        Pickup s = new Pickup.Builder("s").setLocation(Location.newInstance("loc"))
             .addRequiredSkill("DriLl").addRequiredSkill("screwDriver").build();
         assertTrue(s.getRequiredSkills().containsSkill("drill"));
         assertTrue(s.getRequiredSkills().containsSkill("drilL"));
@@ -77,7 +77,7 @@ public void whenAddingSkillsCaseSens_theyShouldBeAddedCorrectly() {
 
     @Test
     public void whenAddingSkillsCaseSensV2_theyShouldBeAddedCorrectly() {
-        Pickup s = Pickup.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        Pickup s = new Pickup.Builder("s").setLocation(Location.newInstance("loc"))
             .addRequiredSkill("screwDriver").build();
         assertFalse(s.getRequiredSkills().containsSkill("drill"));
         assertFalse(s.getRequiredSkills().containsSkill("drilL"));
@@ -85,7 +85,7 @@ public void whenAddingSkillsCaseSensV2_theyShouldBeAddedCorrectly() {
 
     @Test
     public void nameShouldBeAssigned() {
-        Pickup s = Pickup.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        Pickup s = new Pickup.Builder("s").setLocation(Location.newInstance("loc"))
             .setName("name").build();
         assertEquals("name", s.getName());
     }
@@ -93,14 +93,14 @@ public void nameShouldBeAssigned() {
 
     @Test
     public void whenSettingPriorities_itShouldBeSetCorrectly(){
-        Pickup s = Pickup.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        Pickup s = new Pickup.Builder("s").setLocation(Location.newInstance("loc"))
             .setPriority(3).build();
         Assert.assertEquals(3, s.getPriority());
     }
 
     @Test
     public void whenNotSettingPriorities_defaultShouldBe(){
-        Pickup s = Pickup.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        Pickup s = new Pickup.Builder("s").setLocation(Location.newInstance("loc"))
             .build();
         Assert.assertEquals(2, s.getPriority());
     }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ServiceTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ServiceTest.java
index bec514e25..f5b62a29d 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ServiceTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ServiceTest.java
@@ -33,16 +33,16 @@
 
     @Test
     public void whenTwoServicesHaveTheSameId_theirReferencesShouldBeUnEqual() {
-        Service one = Service.Builder.newInstance("service").addSizeDimension(0, 10).setLocation(Location.newInstance("foo")).build();
-        Service two = Service.Builder.newInstance("service").addSizeDimension(0, 10).setLocation(Location.newInstance("fo")).build();
+        Service one = new Service.Builder("service").addSizeDimension(0, 10).setLocation(Location.newInstance("foo")).build();
+        Service two = new Service.Builder("service").addSizeDimension(0, 10).setLocation(Location.newInstance("fo")).build();
 
         assertTrue(one != two);
     }
 
     @Test
     public void whenTwoServicesHaveTheSameId_theyShouldBeEqual() {
-        Service one = Service.Builder.newInstance("service").addSizeDimension(0, 10).setLocation(Location.newInstance("foo")).build();
-        Service two = Service.Builder.newInstance("service").addSizeDimension(0, 10).setLocation(Location.newInstance("fo")).build();
+        Service one = new Service.Builder("service").addSizeDimension(0, 10).setLocation(Location.newInstance("foo")).build();
+        Service two = new Service.Builder("service").addSizeDimension(0, 10).setLocation(Location.newInstance("fo")).build();
 
         assertTrue(one.equals(two));
     }
@@ -50,8 +50,8 @@ public void whenTwoServicesHaveTheSameId_theyShouldBeEqual() {
     @Test
     public void noName() {
         Set<Service> serviceSet = new HashSet<Service>();
-        Service one = Service.Builder.newInstance("service").addSizeDimension(0, 10).setLocation(Location.newInstance("foo")).build();
-        Service two = Service.Builder.newInstance("service").addSizeDimension(0, 10).setLocation(Location.newInstance("fo")).build();
+        Service one = new Service.Builder("service").addSizeDimension(0, 10).setLocation(Location.newInstance("foo")).build();
+        Service two = new Service.Builder("service").addSizeDimension(0, 10).setLocation(Location.newInstance("fo")).build();
         serviceSet.add(one);
 //		assertTrue(serviceSet.contains(two));
         serviceSet.remove(two);
@@ -61,12 +61,12 @@ public void noName() {
     @Test(expected = IllegalArgumentException.class)
     public void whenCapacityDimValueIsNegative_throwIllegalStateExpception() {
         @SuppressWarnings("unused")
-        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("foo")).addSizeDimension(0, -10).build();
+        Service s = new Service.Builder("s").setLocation(Location.newInstance("foo")).addSizeDimension(0, -10).build();
     }
 
     @Test
     public void whenAddingTwoCapDimension_nuOfDimsShouldBeTwo() {
-        Service one = Service.Builder.newInstance("s").setLocation(Location.newInstance("foofoo"))
+        Service one = new Service.Builder("s").setLocation(Location.newInstance("foofoo"))
             .addSizeDimension(0, 2)
             .addSizeDimension(1, 4)
             .build();
@@ -75,7 +75,7 @@ public void whenAddingTwoCapDimension_nuOfDimsShouldBeTwo() {
 
     @Test
     public void whenShipmentIsBuiltWithoutSpecifyingCapacity_itShouldHvCapWithOneDimAndDimValOfZero() {
-        Service one = Service.Builder.newInstance("s").setLocation(Location.newInstance("foofoo"))
+        Service one = new Service.Builder("s").setLocation(Location.newInstance("foofoo"))
             .build();
         assertEquals(1, one.getSize().getNuOfDimensions());
         assertEquals(0, one.getSize().get(0));
@@ -83,7 +83,7 @@ public void whenShipmentIsBuiltWithoutSpecifyingCapacity_itShouldHvCapWithOneDim
 
     @Test
     public void whenShipmentIsBuiltWithConstructorWhereSizeIsSpecified_capacityShouldBeSetCorrectly() {
-        Service one = Service.Builder.newInstance("s").addSizeDimension(0, 1).setLocation(Location.newInstance("foofoo"))
+        Service one = new Service.Builder("s").addSizeDimension(0, 1).setLocation(Location.newInstance("foofoo"))
             .build();
         assertEquals(1, one.getSize().getNuOfDimensions());
         assertEquals(1, one.getSize().get(0));
@@ -91,26 +91,26 @@ public void whenShipmentIsBuiltWithConstructorWhereSizeIsSpecified_capacityShoul
 
     @Test
     public void whenCallingForNewInstanceOfBuilder_itShouldReturnBuilderCorrectly() {
-        Service.Builder builder = Service.Builder.newInstance("s");
+        Service.Builder builder = new Service.Builder("s");
         assertNotNull(builder);
     }
 
     @Test
     public void whenSettingNoType_itShouldReturn_service() {
-        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc")).build();
+        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc")).build();
         assertEquals("service", s.getType());
     }
 
     @Test
     public void whenSettingLocation_itShouldBeSetCorrectly() {
-        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc")).build();
+        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc")).build();
         assertEquals("loc", s.getLocation().getId());
         assertEquals("loc", s.getLocation().getId());
     }
 
     @Test
     public void whenSettingLocation_itShouldWork() {
-        Service s = Service.Builder.newInstance("s").setLocation(Location.Builder.newInstance().setId("loc").build()).build();
+        Service s = new Service.Builder("s").setLocation(Location.Builder.newInstance().setId("loc").build()).build();
         assertEquals("loc", s.getLocation().getId());
         assertEquals("loc", s.getLocation().getId());
     }
@@ -118,7 +118,7 @@ public void whenSettingLocation_itShouldWork() {
 
 	@Test
 	public void whenSettingLocationCoord_itShouldBeSetCorrectly(){
-		Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance(1, 2)).build();
+		Service s = new Service.Builder("s").setLocation(Location.newInstance(1, 2)).build();
 		assertEquals(1.0,s.getLocation().getCoordinate().getX(),0.01);
 		assertEquals(2.0,s.getLocation().getCoordinate().getY(),0.01);
         assertEquals(1.0,s.getLocation().getCoordinate().getX(),0.01);
@@ -128,37 +128,37 @@ public void whenSettingLocationCoord_itShouldBeSetCorrectly(){
 	@Test(expected=IllegalArgumentException.class)
 	public void whenSettingNeitherLocationIdNorCoord_throwsException(){
 		@SuppressWarnings("unused")
-		Service s = Service.Builder.newInstance("s").build();
+		Service s = new Service.Builder("s").build();
 	}
 
 	@Test(expected=IllegalArgumentException.class)
 	public void whenServiceTimeSmallerZero_throwIllegalStateException(){
 		@SuppressWarnings("unused")
-		Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc")).setServiceTime(-1).build();
+		Service s = new Service.Builder("s").setLocation(Location.newInstance("loc")).setServiceTime(-1).build();
 	}
 
 	@Test
 	public void whenSettingServiceTime_itShouldBeSetCorrectly(){
-		Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc")).setServiceTime(1).build();
+		Service s = new Service.Builder("s").setLocation(Location.newInstance("loc")).setServiceTime(1).build();
 		assertEquals(1.0,s.getServiceDuration(),0.01);
 	}
 
 	@Test(expected=IllegalArgumentException.class)
 	public void whenTimeWindowIsNull_throwException(){
 		@SuppressWarnings("unused")
-		Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc")).setTimeWindow(null).build();
+		Service s = new Service.Builder("s").setLocation(Location.newInstance("loc")).setTimeWindow(null).build();
 	}
 
 	@Test
 	public void whenSettingTimeWindow_itShouldBeSetCorrectly(){
-		Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc")).setTimeWindow(TimeWindow.newInstance(1.0, 2.0)).build();
+		Service s = new Service.Builder("s").setLocation(Location.newInstance("loc")).setTimeWindow(TimeWindow.newInstance(1.0, 2.0)).build();
 		assertEquals(1.0,s.getTimeWindow().getStart(),0.01);
 		assertEquals(2.0,s.getTimeWindow().getEnd(),0.01);
 	}
 
 	@Test
 	public void whenAddingSkills_theyShouldBeAddedCorrectly(){
-		Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+		Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
 				.addRequiredSkill("drill").addRequiredSkill("screwdriver").build();
 		assertTrue(s.getRequiredSkills().containsSkill("drill"));
 		assertTrue(s.getRequiredSkills().containsSkill("drill"));
@@ -167,7 +167,7 @@ public void whenAddingSkills_theyShouldBeAddedCorrectly(){
 
 	@Test
 	public void whenAddingSkillsCaseSens_theyShouldBeAddedCorrectly(){
-		Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+		Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
 				.addRequiredSkill("DriLl").addRequiredSkill("screwDriver").build();
 		assertTrue(s.getRequiredSkills().containsSkill("drill"));
 		assertTrue(s.getRequiredSkills().containsSkill("drilL"));
@@ -177,7 +177,7 @@ public void whenAddingSkillsCaseSens_theyShouldBeAddedCorrectly(){
     public void whenAddingSeveralTimeWindows_itShouldBeSetCorrectly(){
         TimeWindow tw1 = TimeWindow.newInstance(1.0, 2.0);
         TimeWindow tw2 = TimeWindow.newInstance(3.0, 5.0);
-        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
             .addTimeWindow(tw1)
             .addTimeWindow(tw2)
             .build();
@@ -188,7 +188,7 @@ public void whenAddingSeveralTimeWindows_itShouldBeSetCorrectly(){
 
     @Test
     public void whenAddingTimeWindow_itShouldBeSetCorrectly(){
-        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
             .addTimeWindow(TimeWindow.newInstance(1.0, 2.0)).build();
         assertEquals(1.0, s.getTimeWindow().getStart(), 0.01);
         assertEquals(2.0, s.getTimeWindow().getEnd(), 0.01);
@@ -199,7 +199,7 @@ public void whenAddingTimeWindow_itShouldBeSetCorrectly(){
 
     @Test
     public void whenAddingSkillsCaseSensV2_theyShouldBeAddedCorrectly() {
-        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
             .addRequiredSkill("screwDriver").build();
         assertFalse(s.getRequiredSkills().containsSkill("drill"));
         assertFalse(s.getRequiredSkills().containsSkill("drilL"));
@@ -207,14 +207,14 @@ public void whenAddingSkillsCaseSensV2_theyShouldBeAddedCorrectly() {
 
     @Test
     public void nameShouldBeAssigned() {
-        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
             .setName("name").build();
         assertEquals("name", s.getName());
     }
 
 	@Test
 	public void shouldKnowMultipleTimeWindows(){
-		Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+		Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
 				.addTimeWindow(TimeWindow.newInstance(0., 10.)).addTimeWindow(TimeWindow.newInstance(20., 30.))
 				.setName("name").build();
 		assertEquals(2,s.getTimeWindows().size());
@@ -222,7 +222,7 @@ public void shouldKnowMultipleTimeWindows(){
 
 	@Test(expected = IllegalArgumentException.class)
 	public void whenMultipleTWOverlap_throwEx(){
-		Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+		Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
 				.addTimeWindow(TimeWindow.newInstance(0.,10.))
 				.addTimeWindow(TimeWindow.newInstance(5., 30.))
 				.setName("name").build();
@@ -230,7 +230,7 @@ public void whenMultipleTWOverlap_throwEx(){
 
 	@Test(expected = IllegalArgumentException.class)
 	public void whenMultipleTWOverlap2_throwEx(){
-		Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+		Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
 				.addTimeWindow(TimeWindow.newInstance(20., 30.))
 				.addTimeWindow(TimeWindow.newInstance(0., 25.))
 				.setName("name").build();
@@ -238,35 +238,35 @@ public void whenMultipleTWOverlap2_throwEx(){
 
     @Test
     public void whenSettingPriorities_itShouldBeSetCorrectly(){
-        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
             .setPriority(1).build();
         Assert.assertEquals(1, s.getPriority());
     }
 
     @Test
     public void whenSettingPriorities_itShouldBeSetCorrectly2(){
-        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
             .setPriority(3).build();
         Assert.assertEquals(3, s.getPriority());
     }
 
     @Test
     public void whenNotSettingPriorities_defaultShouldBe2(){
-        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
             .build();
         Assert.assertEquals(2, s.getPriority());
     }
 
     @Test(expected = IllegalArgumentException.class)
     public void whenSettingIncorrectPriorities_itShouldThrowException(){
-        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
             .setPriority(30).build();
 
     }
 
     @Test(expected = IllegalArgumentException.class)
     public void whenSettingIncorrectPriorities_itShouldThrowException2(){
-        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
             .setPriority(0).build();
 
     }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/TestVehicleRoute.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/TestVehicleRoute.java
index 2ce3fac5a..745ca3982 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/TestVehicleRoute.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/TestVehicleRoute.java
@@ -17,27 +17,28 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
+import java.util.Iterator;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.driver.DriverImpl;
 import com.graphhopper.jsprit.core.problem.driver.DriverImpl.NoDriver;
 import com.graphhopper.jsprit.core.problem.job.Delivery;
 import com.graphhopper.jsprit.core.problem.job.Pickup;
 import com.graphhopper.jsprit.core.problem.job.Service;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverService;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverServiceDEPRECATED;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupService;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupServiceDEPRECATED;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.ServiceActivityNEW;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.Iterator;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
 
 
 public class TestVehicleRoute {
@@ -84,7 +85,7 @@ public void whenBuildingRouteWithNulls_itThrowsException() {
     @Test
     public void whenBuildingANonEmptyTour2Times_tourIterIteratesOverActivitiesCorrectly() {
         VehicleRoute.Builder routeBuilder = VehicleRoute.Builder.newInstance(vehicle, driver);
-        routeBuilder.addService(Service.Builder.newInstance("2").addSizeDimension(0, 30).setLocation(Location.newInstance("1")).build());
+        routeBuilder.addService(new Service.Builder("2").addSizeDimension(0, 30).setLocation(Location.newInstance("1")).build());
         VehicleRoute route = routeBuilder.build();
 
         {
@@ -98,7 +99,7 @@ public void whenBuildingANonEmptyTour2Times_tourIterIteratesOverActivitiesCorrec
             assertEquals(1, count);
         }
         {
-            route.getTourActivities().addActivity(ServiceActivityNEW.newInstance(Service.Builder.newInstance("3").addSizeDimension(0, 30).setLocation(Location.newInstance("1")).build()));
+            route.getTourActivities().addActivity(ServiceActivityNEW.newInstance(new Service.Builder("3").addSizeDimension(0, 30).setLocation(Location.newInstance("1")).build()));
             Iterator<TourActivity> iter = route.getTourActivities().iterator();
             int count = 0;
             while (iter.hasNext()) {
@@ -126,7 +127,7 @@ public void whenBuildingANonEmptyTour_tourReverseIterIteratesOverActivitiesCorre
     @Test
     public void whenBuildingANonEmptyTourV2_tourReverseIterIteratesOverActivitiesCorrectly() {
         VehicleRoute.Builder routeBuilder = VehicleRoute.Builder.newInstance(vehicle, driver);
-        routeBuilder.addService(Service.Builder.newInstance("2").addSizeDimension(0, 30).setLocation(Location.newInstance("1")).build());
+        routeBuilder.addService(new Service.Builder("2").addSizeDimension(0, 30).setLocation(Location.newInstance("1")).build());
         VehicleRoute route = routeBuilder.build();
         Iterator<TourActivity> iter = route.getTourActivities().reverseActivityIterator();
         int count = 0;
@@ -141,8 +142,8 @@ public void whenBuildingANonEmptyTourV2_tourReverseIterIteratesOverActivitiesCor
     @Test
     public void whenBuildingANonEmptyTour2Times_tourReverseIterIteratesOverActivitiesCorrectly() {
         VehicleRoute.Builder routeBuilder = VehicleRoute.Builder.newInstance(vehicle, driver);
-        routeBuilder.addService(Service.Builder.newInstance("2").addSizeDimension(0, 30).setLocation(Location.newInstance("1")).build());
-        routeBuilder.addService(Service.Builder.newInstance("3").addSizeDimension(0, 30).setLocation(Location.newInstance("2")).build());
+        routeBuilder.addService(new Service.Builder("2").addSizeDimension(0, 30).setLocation(Location.newInstance("1")).build());
+        routeBuilder.addService(new Service.Builder("3").addSizeDimension(0, 30).setLocation(Location.newInstance("2")).build());
         VehicleRoute route = routeBuilder.build();
         {
             Iterator<TourActivity> iter = route.getTourActivities().reverseActivityIterator();
@@ -300,13 +301,13 @@ public void whenIniRouteWithNewVehicle_depTimeMustBeSetDepTime() {
     @Test
     public void whenAddingPickup_itShouldBeTreatedAsPickup() {
 
-        Pickup pickup = (Pickup) Pickup.Builder.newInstance("pick").setLocation(Location.newInstance("pickLoc")).build();
+        Pickup pickup = new Pickup.Builder("pick").setLocation(Location.newInstance("pickLoc")).build();
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("vehicle").setStartLocation(Location.newInstance("startLoc")).build();
         VehicleRoute route = VehicleRoute.Builder.newInstance(vehicle).addService(pickup).build();
 
         TourActivity act = route.getActivities().get(0);
         assertTrue(act.getName().equals("pickup"));
-        assertTrue(act instanceof PickupService);
+        assertTrue(act instanceof PickupServiceDEPRECATED);
         assertTrue(((JobActivity) act).getJob() instanceof Pickup);
 
     }
@@ -314,13 +315,13 @@ public void whenAddingPickup_itShouldBeTreatedAsPickup() {
     @Test
     public void whenAddingPickup_itShouldBeAdded() {
 
-        Pickup pickup = (Pickup) Pickup.Builder.newInstance("pick").setLocation(Location.newInstance("pickLoc")).build();
+        Pickup pickup = new Pickup.Builder("pick").setLocation(Location.newInstance("pickLoc")).build();
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("vehicle").setStartLocation(Location.newInstance("startLoc")).build();
         VehicleRoute route = VehicleRoute.Builder.newInstance(vehicle).addPickup(pickup).build();
 
         TourActivity act = route.getActivities().get(0);
         assertTrue(act.getName().equals("pickup"));
-        assertTrue(act instanceof PickupService);
+        assertTrue(act instanceof PickupServiceDEPRECATED);
         assertTrue(((JobActivity) act).getJob() instanceof Pickup);
 
     }
@@ -328,13 +329,13 @@ public void whenAddingPickup_itShouldBeAdded() {
     @Test
     public void whenAddingDelivery_itShouldBeTreatedAsDelivery() {
 
-        Delivery delivery = (Delivery) Delivery.Builder.newInstance("delivery").setLocation(Location.newInstance("deliveryLoc")).build();
+        Delivery delivery = new Delivery.Builder("delivery").setLocation(Location.newInstance("deliveryLoc")).build();
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("vehicle").setStartLocation(Location.newInstance("startLoc")).build();
         VehicleRoute route = VehicleRoute.Builder.newInstance(vehicle).addService(delivery).build();
 
         TourActivity act = route.getActivities().get(0);
         assertTrue(act.getName().equals("delivery"));
-        assertTrue(act instanceof DeliverService);
+        assertTrue(act instanceof DeliverServiceDEPRECATED);
         assertTrue(((JobActivity) act).getJob() instanceof Delivery);
 
     }
@@ -342,13 +343,13 @@ public void whenAddingDelivery_itShouldBeTreatedAsDelivery() {
     @Test
     public void whenAddingDelivery_itShouldBeAdded() {
 
-        Delivery delivery = (Delivery) Delivery.Builder.newInstance("delivery").setLocation(Location.newInstance("deliveryLoc")).build();
+        Delivery delivery = new Delivery.Builder("delivery").setLocation(Location.newInstance("deliveryLoc")).build();
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("vehicle").setStartLocation(Location.newInstance("startLoc")).build();
         VehicleRoute route = VehicleRoute.Builder.newInstance(vehicle).addDelivery(delivery).build();
 
         TourActivity act = route.getActivities().get(0);
         assertTrue(act.getName().equals("delivery"));
-        assertTrue(act instanceof DeliverService);
+        assertTrue(act instanceof DeliverServiceDEPRECATED);
         assertTrue(((JobActivity) act).getJob() instanceof Delivery);
 
     }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivityTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivityTest.java
index 17a1b7379..b0769202e 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivityTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivityTest.java
@@ -34,7 +34,7 @@
 
     @Before
     public void doBefore() {
-        service = Break.Builder.newInstance("service")
+        service = new Break.Builder("service")
             .setTimeWindow(TimeWindow.newInstance(1., 2.)).setServiceTime(3).build();
         serviceActivity = BreakActivity.newInstance(service);
         serviceActivity.setTheoreticalEarliestOperationStartTime(service.getTimeWindow().getStart());
@@ -87,8 +87,8 @@ public void whenCopyingStart_itShouldBeDoneCorrectly() {
 
     @Test
     public void whenTwoDeliveriesHaveTheSameUnderlyingJob_theyAreEqual() {
-        Service s1 = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc")).build();
-        Service s2 = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc")).build();
+        Service s1 = new Service.Builder("s").setLocation(Location.newInstance("loc")).build();
+        Service s2 = new Service.Builder("s").setLocation(Location.newInstance("loc")).build();
 
         ServiceActivityNEW d1 = ServiceActivityNEW.newInstance(s1);
         ServiceActivityNEW d2 = ServiceActivityNEW.newInstance(s2);
@@ -98,8 +98,8 @@ public void whenTwoDeliveriesHaveTheSameUnderlyingJob_theyAreEqual() {
 
     @Test
     public void whenTwoDeliveriesHaveTheDifferentUnderlyingJob_theyAreNotEqual() {
-        Service s1 = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc")).build();
-        Service s2 = Service.Builder.newInstance("s1").setLocation(Location.newInstance("loc")).build();
+        Service s1 = new Service.Builder("s").setLocation(Location.newInstance("loc")).build();
+        Service s2 = new Service.Builder("s1").setLocation(Location.newInstance("loc")).build();
 
         ServiceActivityNEW d1 = ServiceActivityNEW.newInstance(s1);
         ServiceActivityNEW d2 = ServiceActivityNEW.newInstance(s2);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DefaultShipmentActivityFactoryTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DefaultShipmentActivityFactoryTest.java
index c613601e8..6a2205d35 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DefaultShipmentActivityFactoryTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DefaultShipmentActivityFactoryTest.java
@@ -17,32 +17,33 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
-import org.junit.Test;
-
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
 
+import org.junit.Test;
+
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.job.Shipment;
+
 public class DefaultShipmentActivityFactoryTest {
 
     @Test
     public void whenCreatingPickupActivityWithShipment_itShouldReturnPickupShipment() {
         DefaultShipmentActivityFactory factory = new DefaultShipmentActivityFactory();
         Shipment shipment = Shipment.Builder.newInstance("s")
-            .setPickupLocation(Location.Builder.newInstance().setId("pLoc").build()).setDeliveryLocation(Location.newInstance("dLoc")).build();
+                .setPickupLocation(Location.Builder.newInstance().setId("pLoc").build()).setDeliveryLocation(Location.newInstance("dLoc")).build();
         TourActivity act = factory.createPickup(shipment);
         assertNotNull(act);
-        assertTrue(act instanceof PickupShipment);
+        assertTrue(act instanceof PickupShipmentDEPRECATED);
     }
 
     @Test
     public void whenCreatingDeliverActivityWithShipment_itShouldReturnDeliverShipment() {
         DefaultShipmentActivityFactory factory = new DefaultShipmentActivityFactory();
         Shipment shipment = Shipment.Builder.newInstance("s")
-            .setPickupLocation(Location.Builder.newInstance().setId("pLoc").build()).setDeliveryLocation(Location.newInstance("dLoc")).build();
+                .setPickupLocation(Location.Builder.newInstance().setId("pLoc").build()).setDeliveryLocation(Location.newInstance("dLoc")).build();
         TourActivity act = factory.createDelivery(shipment);
         assertNotNull(act);
-        assertTrue(act instanceof DeliverShipment);
+        assertTrue(act instanceof DeliverShipmentDEPRECATED);
     }
 }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DefaultTourActivityFactoryTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DefaultTourActivityFactoryTest.java
index c28dce48b..2a4be92d7 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DefaultTourActivityFactoryTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DefaultTourActivityFactoryTest.java
@@ -17,42 +17,43 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertTrue;
+
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.job.Delivery;
 import com.graphhopper.jsprit.core.problem.job.Pickup;
 import com.graphhopper.jsprit.core.problem.job.Service;
-import org.junit.Test;
-
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertTrue;
 
 public class DefaultTourActivityFactoryTest {
 
     @Test
     public void whenCreatingActivityWithService_itShouldReturnPickupService() {
         DefaultTourActivityFactory factory = new DefaultTourActivityFactory();
-        Service service = Service.Builder.newInstance("service").setLocation(Location.newInstance("loc")).build();
+        Service service = new Service.Builder("service").setLocation(Location.newInstance("loc")).build();
         TourActivity act = factory.createActivity(service);
         assertNotNull(act);
-        assertTrue(act instanceof PickupService);
+        assertTrue(act instanceof PickupServiceDEPRECATED);
     }
 
     @Test
     public void whenCreatingActivityWithPickup_itShouldReturnPickupService() {
         DefaultTourActivityFactory factory = new DefaultTourActivityFactory();
-        Pickup service = (Pickup) Pickup.Builder.newInstance("service").setLocation(Location.newInstance("loc")).build();
+        Pickup service = new Pickup.Builder("service").setLocation(Location.newInstance("loc")).build();
         TourActivity act = factory.createActivity(service);
         assertNotNull(act);
-        assertTrue(act instanceof PickupService);
+        assertTrue(act instanceof PickupServiceDEPRECATED);
     }
 
     @Test
     public void whenCreatingActivityWithDelivery_itShouldReturnDeliverService() {
         DefaultTourActivityFactory factory = new DefaultTourActivityFactory();
-        Delivery service = (Delivery) Delivery.Builder.newInstance("service").setLocation(Location.newInstance("loc")).build();
+        Delivery service = new Delivery.Builder("service").setLocation(Location.newInstance("loc")).build();
         TourActivity act = factory.createActivity(service);
         assertNotNull(act);
-        assertTrue(act instanceof DeliverService);
+        assertTrue(act instanceof DeliverServiceDEPRECATED);
     }
 
 }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverServiceTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverServiceDEPRECATEDTest.java
similarity index 85%
rename from jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverServiceTest.java
rename to jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverServiceDEPRECATEDTest.java
index 19c14f4fd..33e820196 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverServiceTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverServiceDEPRECATEDTest.java
@@ -17,26 +17,27 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.job.Delivery;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
 import org.junit.Before;
 import org.junit.Test;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.job.Delivery;
 
-public class DeliverServiceTest {
+public class DeliverServiceDEPRECATEDTest {
 
     private Delivery service;
 
-    private DeliverService deliver;
+    private DeliverServiceDEPRECATED deliver;
 
     @Before
     public void doBefore() {
-        service = Delivery.Builder.newInstance("service").setLocation(Location.newInstance("loc")).
-            setTimeWindow(TimeWindow.newInstance(1., 2.)).
-            addSizeDimension(0, 10).addSizeDimension(1, 100).addSizeDimension(2, 1000).build();
-        deliver = new DeliverService(service);
+        service = new Delivery.Builder("service").setLocation(Location.newInstance("loc")).
+                setTimeWindow(TimeWindow.newInstance(1., 2.)).
+                addSizeDimension(0, 10).addSizeDimension(1, 100).addSizeDimension(2, 1000).build();
+        deliver = new DeliverServiceDEPRECATED(service);
         deliver.setTheoreticalEarliestOperationStartTime(service.getTimeWindow().getStart());
         deliver.setTheoreticalLatestOperationStartTime(service.getTimeWindow().getEnd());
     }
@@ -77,7 +78,7 @@ public void whenIniLocationId_itShouldBeSetCorrectly() {
 
     @Test
     public void whenCopyingStart_itShouldBeDoneCorrectly() {
-        DeliverService copy = (DeliverService) deliver.duplicate();
+        DeliverServiceDEPRECATED copy = (DeliverServiceDEPRECATED) deliver.duplicate();
         assertEquals(1., copy.getTheoreticalEarliestOperationStartTime(), 0.01);
         assertEquals(2., copy.getTheoreticalLatestOperationStartTime(), 0.01);
         assertEquals("loc", copy.getLocation().getId());
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverShipmentTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverShipmentTest.java
index 4c0b16678..8989a95a8 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverShipmentTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverShipmentTest.java
@@ -17,26 +17,27 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
 import org.junit.Before;
 import org.junit.Test;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.job.Shipment;
 
 public class DeliverShipmentTest {
 
-    private DeliverShipment deliver;
+    private DeliverShipmentDEPRECATED deliver;
 
     @Before
     public void doBefore() {
         Shipment shipment = Shipment.Builder.newInstance("shipment").setPickupLocation(Location.Builder.newInstance().setId("pickupLoc").build())
-            .setDeliveryLocation(Location.newInstance("deliveryLoc"))
-            .setPickupTimeWindow(TimeWindow.newInstance(1., 2.))
-            .setDeliveryTimeWindow(TimeWindow.newInstance(3., 4.))
-            .addSizeDimension(0, 10).addSizeDimension(1, 100).addSizeDimension(2, 1000).build();
-        deliver = new DeliverShipment(shipment);
+                .setDeliveryLocation(Location.newInstance("deliveryLoc"))
+                .setPickupTimeWindow(TimeWindow.newInstance(1., 2.))
+                .setDeliveryTimeWindow(TimeWindow.newInstance(3., 4.))
+                .addSizeDimension(0, 10).addSizeDimension(1, 100).addSizeDimension(2, 1000).build();
+        deliver = new DeliverShipmentDEPRECATED(shipment);
         deliver.setTheoreticalEarliestOperationStartTime(shipment.getDeliveryTimeWindow().getStart());
         deliver.setTheoreticalLatestOperationStartTime(shipment.getDeliveryTimeWindow().getEnd());
     }
@@ -77,7 +78,7 @@ public void whenIniLocationId_itShouldBeSetCorrectly() {
 
     @Test
     public void whenCopyingStart_itShouldBeDoneCorrectly() {
-        DeliverShipment copy = (DeliverShipment) deliver.duplicate();
+        DeliverShipmentDEPRECATED copy = (DeliverShipmentDEPRECATED) deliver.duplicate();
         assertEquals(3., copy.getTheoreticalEarliestOperationStartTime(), 0.01);
         assertEquals(4., copy.getTheoreticalLatestOperationStartTime(), 0.01);
         assertEquals("deliveryLoc", copy.getLocation().getId());
@@ -91,8 +92,8 @@ public void whenCopyingStart_itShouldBeDoneCorrectly() {
     @Test
     public void whenGettingCapacity_itShouldReturnItCorrectly() {
         Shipment shipment = Shipment.Builder.newInstance("s").setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).setDeliveryLocation(Location.newInstance("delLoc"))
-            .addSizeDimension(0, 10).addSizeDimension(1, 100).build();
-        PickupShipment pick = new PickupShipment(shipment);
+                .addSizeDimension(0, 10).addSizeDimension(1, 100).build();
+        PickupShipmentDEPRECATED pick = new PickupShipmentDEPRECATED(shipment);
         assertEquals(10, pick.getSize().get(0));
         assertEquals(100, pick.getSize().get(1));
     }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupServiceTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupServiceTest.java
index cb69738db..25a7ee497 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupServiceTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupServiceTest.java
@@ -17,26 +17,27 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
 import org.junit.Before;
 import org.junit.Test;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.job.Service;
 
 public class PickupServiceTest {
 
     private Service service;
 
-    private PickupService pickup;
+    private PickupServiceDEPRECATED pickup;
 
     @Before
     public void doBefore() {
-        service = Service.Builder.newInstance("service").setLocation(Location.newInstance("loc")).
-            setTimeWindow(TimeWindow.newInstance(1., 2.)).
-            addSizeDimension(0, 10).addSizeDimension(1, 100).addSizeDimension(2, 1000).build();
-        pickup = new PickupService(service);
+        service = new Service.Builder("service").setLocation(Location.newInstance("loc")).
+                setTimeWindow(TimeWindow.newInstance(1., 2.)).
+                addSizeDimension(0, 10).addSizeDimension(1, 100).addSizeDimension(2, 1000).build();
+        pickup = new PickupServiceDEPRECATED(service);
         pickup.setTheoreticalEarliestOperationStartTime(service.getTimeWindow().getStart());
         pickup.setTheoreticalLatestOperationStartTime(service.getTimeWindow().getEnd());
     }
@@ -78,7 +79,7 @@ public void whenIniLocationId_itShouldBeSetCorrectly() {
 
     @Test
     public void whenCopyingStart_itShouldBeDoneCorrectly() {
-        PickupService copy = (PickupService) pickup.duplicate();
+        PickupServiceDEPRECATED copy = (PickupServiceDEPRECATED) pickup.duplicate();
         assertEquals(1., copy.getTheoreticalEarliestOperationStartTime(), 0.01);
         assertEquals(2., copy.getTheoreticalLatestOperationStartTime(), 0.01);
         assertEquals("loc", copy.getLocation().getId());
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupShipmentTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupShipmentTest.java
index 822bc903d..83eff54a3 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupShipmentTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupShipmentTest.java
@@ -17,26 +17,27 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
 import org.junit.Before;
 import org.junit.Test;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.job.Shipment;
 
 public class PickupShipmentTest {
 
-    private PickupShipment pickup;
+    private PickupShipmentDEPRECATED pickup;
 
     @Before
     public void doBefore() {
         Shipment shipment = Shipment.Builder.newInstance("shipment").setPickupLocation(Location.Builder.newInstance().setId("pickupLoc").build())
-            .setDeliveryLocation(Location.newInstance("deliveryLoc"))
-            .setPickupTimeWindow(TimeWindow.newInstance(1., 2.))
-            .setDeliveryTimeWindow(TimeWindow.newInstance(3., 4.))
-            .addSizeDimension(0, 10).addSizeDimension(1, 100).addSizeDimension(2, 1000).build();
-        pickup = new PickupShipment(shipment);
+                .setDeliveryLocation(Location.newInstance("deliveryLoc"))
+                .setPickupTimeWindow(TimeWindow.newInstance(1., 2.))
+                .setDeliveryTimeWindow(TimeWindow.newInstance(3., 4.))
+                .addSizeDimension(0, 10).addSizeDimension(1, 100).addSizeDimension(2, 1000).build();
+        pickup = new PickupShipmentDEPRECATED(shipment);
         pickup.setTheoreticalEarliestOperationStartTime(shipment.getPickupTimeWindow().getStart());
         pickup.setTheoreticalLatestOperationStartTime(shipment.getPickupTimeWindow().getEnd());
     }
@@ -77,7 +78,7 @@ public void whenIniLocationId_itShouldBeSetCorrectly() {
 
     @Test
     public void whenCopyingStart_itShouldBeDoneCorrectly() {
-        PickupShipment copy = (PickupShipment) pickup.duplicate();
+        PickupShipmentDEPRECATED copy = (PickupShipmentDEPRECATED) pickup.duplicate();
         assertEquals(1., copy.getTheoreticalEarliestOperationStartTime(), 0.01);
         assertEquals(2., copy.getTheoreticalLatestOperationStartTime(), 0.01);
         assertEquals("pickupLoc", copy.getLocation().getId());
@@ -91,8 +92,8 @@ public void whenCopyingStart_itShouldBeDoneCorrectly() {
     @Test
     public void whenGettingCapacity_itShouldReturnItCorrectly() {
         Shipment shipment = Shipment.Builder.newInstance("s").setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).setDeliveryLocation(Location.newInstance("delLoc"))
-            .addSizeDimension(0, 10).addSizeDimension(1, 100).build();
-        PickupShipment pick = new PickupShipment(shipment);
+                .addSizeDimension(0, 10).addSizeDimension(1, 100).build();
+        PickupShipmentDEPRECATED pick = new PickupShipmentDEPRECATED(shipment);
         assertEquals(10, pick.getSize().get(0));
         assertEquals(100, pick.getSize().get(1));
     }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityNEWTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityNEWTest.java
index aee9b2561..9443b5635 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityNEWTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityNEWTest.java
@@ -17,13 +17,16 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 
-import static org.junit.Assert.*;
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.job.Service;
 
 
 public class ServiceActivityNEWTest {
@@ -34,9 +37,9 @@
 
     @Before
     public void doBefore() {
-        service = Service.Builder.newInstance("service").setLocation(Location.newInstance("loc")).
-            setTimeWindow(TimeWindow.newInstance(1., 2.)).
-            addSizeDimension(0, 10).addSizeDimension(1, 100).addSizeDimension(2, 1000).build();
+        service = new Service.Builder("service").setLocation(Location.newInstance("loc")).
+                setTimeWindow(TimeWindow.newInstance(1., 2.)).
+                addSizeDimension(0, 10).addSizeDimension(1, 100).addSizeDimension(2, 1000).build();
         serviceActivity = ServiceActivityNEW.newInstance(service);
         serviceActivity.setTheoreticalEarliestOperationStartTime(service.getTimeWindow().getStart());
         serviceActivity.setTheoreticalLatestOperationStartTime(service.getTimeWindow().getEnd());
@@ -89,8 +92,8 @@ public void whenCopyingStart_itShouldBeDoneCorrectly() {
 
     @Test
     public void whenTwoDeliveriesHaveTheSameUnderlyingJob_theyAreEqual() {
-        Service s1 = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc")).build();
-        Service s2 = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc")).build();
+        Service s1 = new Service.Builder("s").setLocation(Location.newInstance("loc")).build();
+        Service s2 = new Service.Builder("s").setLocation(Location.newInstance("loc")).build();
 
         ServiceActivityNEW d1 = ServiceActivityNEW.newInstance(s1);
         ServiceActivityNEW d2 = ServiceActivityNEW.newInstance(s2);
@@ -100,8 +103,8 @@ public void whenTwoDeliveriesHaveTheSameUnderlyingJob_theyAreEqual() {
 
     @Test
     public void whenTwoDeliveriesHaveTheDifferentUnderlyingJob_theyAreNotEqual() {
-        Service s1 = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc")).build();
-        Service s2 = Service.Builder.newInstance("s1").setLocation(Location.newInstance("loc")).build();
+        Service s1 = new Service.Builder("s").setLocation(Location.newInstance("loc")).build();
+        Service s2 = new Service.Builder("s1").setLocation(Location.newInstance("loc")).build();
 
         ServiceActivityNEW d1 = ServiceActivityNEW.newInstance(s1);
         ServiceActivityNEW d2 = ServiceActivityNEW.newInstance(s2);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TestTourActivities.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TestTourActivities.java
index 5f8c2ef32..d76b91361 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TestTourActivities.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TestTourActivities.java
@@ -34,7 +34,7 @@
 
     @Before
     public void doBefore() {
-        service = Service.Builder.newInstance("yo").addSizeDimension(0, 10).setLocation(Location.newInstance("loc")).build();
+        service = new Service.Builder("yo").addSizeDimension(0, 10).setLocation(Location.newInstance("loc")).build();
         act = ServiceActivityNEW.newInstance(service);
         tour = new TourActivities();
     }
@@ -67,7 +67,7 @@ public void whenAddingAServiceAndThenRemovingTheServiceAgain_tourShouldNotServeI
         assertEquals(0, tour.getActivities().size());
         tour.addActivity(act);
         assertEquals(1, tour.getActivities().size());
-        Service anotherServiceInstance = Service.Builder.newInstance("yo").addSizeDimension(0, 10).setLocation(Location.newInstance("loc")).build();
+        Service anotherServiceInstance = new Service.Builder("yo").addSizeDimension(0, 10).setLocation(Location.newInstance("loc")).build();
         assertTrue(service.equals(anotherServiceInstance));
         boolean removed = tour.removeJob(anotherServiceInstance);
         assertTrue(removed);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleImplTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleImplTest.java
index cd3f7e48b..29eef872f 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleImplTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleImplTest.java
@@ -39,7 +39,7 @@ public void whenVehicleIsBuiltWithoutSettingNeitherLocationNorCoord_itThrowsAnIl
     @Test
     public void whenAddingDriverBreak_itShouldBeAddedCorrectly() {
         VehicleTypeImpl type1 = VehicleTypeImpl.Builder.newInstance("type").build();
-        Break aBreak = (Break) Break.Builder.newInstance("break").setTimeWindow(TimeWindow.newInstance(100, 200)).setServiceTime(30).build();
+        Break aBreak = (Break) new Break.Builder("break").setTimeWindow(TimeWindow.newInstance(100, 200)).setServiceTime(30).build();
         Vehicle v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance("start"))
             .setType(type1).setEndLocation(Location.newInstance("start"))
             .setBreak(aBreak).build();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/ChristofidesReader.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/ChristofidesReader.java
index 80ae0f86b..67dfb035e 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/ChristofidesReader.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/ChristofidesReader.java
@@ -96,15 +96,15 @@ public void read(InputStream inputStream) {
                 int demand = Integer.parseInt(tokens[2].trim());
                 String customer = Integer.valueOf(counter - 1).toString();
                 if(jobType.equals(JobType.SERVICE)) {
-                    Service service = Service.Builder.newInstance(customer).addSizeDimension(0, demand).setServiceTime(serviceTime).setLocation(Location.newInstance(customerCoord.getX(), customerCoord.getY())).build();
+                    Service service = new Service.Builder(customer).addSizeDimension(0, demand).setServiceTime(serviceTime).setLocation(Location.newInstance(customerCoord.getX(), customerCoord.getY())).build();
                     vrpBuilder.addJob(service);
                 }
                 else if(jobType.equals(JobType.DELIVERY)){
-                    Delivery service = Delivery.Builder.newInstance(customer).addSizeDimension(0, demand).setServiceTime(serviceTime).setLocation(Location.newInstance(customerCoord.getX(), customerCoord.getY())).build();
+                    Delivery service = new Delivery.Builder(customer).addSizeDimension(0, demand).setServiceTime(serviceTime).setLocation(Location.newInstance(customerCoord.getX(), customerCoord.getY())).build();
                     vrpBuilder.addJob(service);
                 }
                 else if(jobType.equals(JobType.PICKUP)){
-                    Pickup service = Pickup.Builder.newInstance(customer).addSizeDimension(0, demand).setServiceTime(serviceTime).setLocation(Location.newInstance(customerCoord.getX(), customerCoord.getY())).build();
+                    Pickup service = new Pickup.Builder(customer).addSizeDimension(0, demand).setServiceTime(serviceTime).setLocation(Location.newInstance(customerCoord.getX(), customerCoord.getY())).build();
                     vrpBuilder.addJob(service);
                 }
             }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/SolomonReader.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/SolomonReader.java
index 75818a6c4..6c8a544e9 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/SolomonReader.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/SolomonReader.java
@@ -109,7 +109,7 @@ public void read(InputStream inputStream) {
                     vrpBuilder.addVehicle(vehicle);
 
                 } else {
-                    Service service = Service.Builder.newInstance(customerId).addSizeDimension(0, demand)
+                    Service service = new Service.Builder(customerId).addSizeDimension(0, demand)
                         .setLocation(Location.Builder.newInstance().setCoordinate(coord).setId(customerId).build()).setServiceTime(serviceTime)
                         .setTimeWindow(TimeWindow.newInstance(start, end)).build();
                     vrpBuilder.addJob(service);
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/BreakExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/BreakExample.java
index f635c9372..62907b99d 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/BreakExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/BreakExample.java
@@ -55,7 +55,7 @@ public static void main(String[] args) {
 		 */
         Builder vehicleBuilder = Builder.newInstance("v1");
         vehicleBuilder.setStartLocation(Location.newInstance(10, 10));
-        Break myFirstBreak = Break.Builder.newInstance("myFirstBreak")
+        Break myFirstBreak = new Break.Builder("myFirstBreak")
             .setTimeWindow(TimeWindow.newInstance(10, 15)).setServiceTime(100).build();
         vehicleBuilder.setBreak(myFirstBreak);
         vehicleBuilder.setType(vehicleType);
@@ -63,15 +63,15 @@ public static void main(String[] args) {
 
 
         VehicleImpl v2 = VehicleImpl.Builder.newInstance("v2").setStartLocation(Location.newInstance(0, 10)).setType(vehicleType)
-            .setBreak((Break) Break.Builder.newInstance("mySecondBreak").setTimeWindow(TimeWindow.newInstance(5, 10)).setServiceTime(10).build()).build();
+            .setBreak((Break) new Break.Builder("mySecondBreak").setTimeWindow(TimeWindow.newInstance(5, 10)).setServiceTime(10).build()).build();
 		/*
 		 * build services at the required locations, each with a capacity-demand of 1.
 		 */
-        Service service1 = Service.Builder.newInstance("1").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 7)).build();
-        Service service2 = Service.Builder.newInstance("2").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 13)).build();
+        Service service1 = new Service.Builder("1").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 7)).build();
+        Service service2 = new Service.Builder("2").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 13)).build();
 
-        Service service3 = Service.Builder.newInstance("3").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(15, 7)).build();
-        Service service4 = Service.Builder.newInstance("4").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(15, 13)).build();
+        Service service3 = new Service.Builder("3").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(15, 7)).build();
+        Service service4 = new Service.Builder("4").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(15, 13)).build();
 
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/CircleExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/CircleExample.java
index 455ad9d21..7c84c292c 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/CircleExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/CircleExample.java
@@ -69,7 +69,7 @@ public static void main(String[] args) {
         Collection<Coordinate> circle = createCoordinates(0, 0, 20, step);
         int id = 1;
         for (Coordinate c : circle) {
-            Service s = Service.Builder.newInstance(Integer.toString(id)).setLocation(Location.Builder.newInstance().setCoordinate(c).build()).build();
+            Service s = new Service.Builder(Integer.toString(id)).setLocation(Location.Builder.newInstance().setCoordinate(c).build()).build();
             vrpBuilder.addJob(s);
             id++;
         }
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/ConfigureAlgorithmInCodeInsteadOfPerXml.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/ConfigureAlgorithmInCodeInsteadOfPerXml.java
index e844c3c05..7e87e20fc 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/ConfigureAlgorithmInCodeInsteadOfPerXml.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/ConfigureAlgorithmInCodeInsteadOfPerXml.java
@@ -63,11 +63,11 @@ public static void main(String[] args) {
 		/*
          * build services at the required locations, each with a capacity-demand of 1.
 		 */
-        Service service1 = Service.Builder.newInstance("1").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 7)).build();
-        Service service2 = Service.Builder.newInstance("2").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 13)).build();
+        Service service1 = new Service.Builder("1").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 7)).build();
+        Service service2 = new Service.Builder("2").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 13)).build();
 
-        Service service3 = Service.Builder.newInstance("3").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 7)).build();
-        Service service4 = Service.Builder.newInstance("4").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 13)).build();
+        Service service3 = new Service.Builder("3").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 7)).build();
+        Service service4 = new Service.Builder("4").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 13)).build();
 
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/CostMatrixExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/CostMatrixExample.java
index 157c685da..bbc2af561 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/CostMatrixExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/CostMatrixExample.java
@@ -54,9 +54,9 @@ public static void main(String[] args) {
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("vehicle")
             .setStartLocation(Location.newInstance("0")).setType(type).build();
 
-        Service s1 = Service.Builder.newInstance("1").addSizeDimension(0, 1).setLocation(Location.newInstance("1")).build();
-        Service s2 = Service.Builder.newInstance("2").addSizeDimension(0, 1).setLocation(Location.newInstance("2")).build();
-        Service s3 = Service.Builder.newInstance("3").addSizeDimension(0, 1).setLocation(Location.newInstance("3")).build();
+        Service s1 = new Service.Builder("1").addSizeDimension(0, 1).setLocation(Location.newInstance("1")).build();
+        Service s2 = new Service.Builder("2").addSizeDimension(0, 1).setLocation(Location.newInstance("2")).build();
+        Service s3 = new Service.Builder("3").addSizeDimension(0, 1).setLocation(Location.newInstance("3")).build();
 
 
 		/*
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/HVRPExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/HVRPExample.java
index 8284e532d..94e534aac 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/HVRPExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/HVRPExample.java
@@ -71,26 +71,26 @@ public static void main(String[] args) {
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
 
         //add customers
-        vrpBuilder.addJob(Service.Builder.newInstance("1").addSizeDimension(0, 18).setLocation(Location.newInstance(22, 22)).build());
-        vrpBuilder.addJob(Service.Builder.newInstance("2").addSizeDimension(0, 26).setLocation(Location.newInstance(36, 26)).build());
-        vrpBuilder.addJob(Service.Builder.newInstance("3").addSizeDimension(0, 11).setLocation(Location.newInstance(21, 45)).build());
-        vrpBuilder.addJob(Service.Builder.newInstance("4").addSizeDimension(0, 30).setLocation(Location.newInstance(45, 35)).build());
-        vrpBuilder.addJob(Service.Builder.newInstance("5").addSizeDimension(0, 21).setLocation(Location.newInstance(55, 20)).build());
-        vrpBuilder.addJob(Service.Builder.newInstance("6").addSizeDimension(0, 19).setLocation(Location.newInstance(33, 34)).build());
-        vrpBuilder.addJob(Service.Builder.newInstance("7").addSizeDimension(0, 15).setLocation(Location.newInstance(50, 50)).build());
-        vrpBuilder.addJob(Service.Builder.newInstance("8").addSizeDimension(0, 16).setLocation(Location.newInstance(55, 45)).build());
-        vrpBuilder.addJob(Service.Builder.newInstance("9").addSizeDimension(0, 29).setLocation(Location.newInstance(26, 59)).build());
-        vrpBuilder.addJob(Service.Builder.newInstance("10").addSizeDimension(0, 26).setLocation(Location.newInstance(40, 66)).build());
-        vrpBuilder.addJob(Service.Builder.newInstance("11").addSizeDimension(0, 37).setLocation(Location.newInstance(55, 56)).build());
-        vrpBuilder.addJob(Service.Builder.newInstance("12").addSizeDimension(0, 16).setLocation(Location.newInstance(35, 51)).build());
-        vrpBuilder.addJob(Service.Builder.newInstance("13").addSizeDimension(0, 12).setLocation(Location.newInstance(62, 35)).build());
-        vrpBuilder.addJob(Service.Builder.newInstance("14").addSizeDimension(0, 31).setLocation(Location.newInstance(62, 57)).build());
-        vrpBuilder.addJob(Service.Builder.newInstance("15").addSizeDimension(0, 8).setLocation(Location.newInstance(62, 24)).build());
-        vrpBuilder.addJob(Service.Builder.newInstance("16").addSizeDimension(0, 19).setLocation(Location.newInstance(21, 36)).build());
-        vrpBuilder.addJob(Service.Builder.newInstance("17").addSizeDimension(0, 20).setLocation(Location.newInstance(33, 44)).build());
-        vrpBuilder.addJob(Service.Builder.newInstance("18").addSizeDimension(0, 13).setLocation(Location.newInstance(9, 56)).build());
-        vrpBuilder.addJob(Service.Builder.newInstance("19").addSizeDimension(0, 15).setLocation(Location.newInstance(62, 48)).build());
-        vrpBuilder.addJob(Service.Builder.newInstance("20").addSizeDimension(0, 22).setLocation(Location.newInstance(66, 14)).build());
+        vrpBuilder.addJob(new Service.Builder("1").addSizeDimension(0, 18).setLocation(Location.newInstance(22, 22)).build());
+        vrpBuilder.addJob(new Service.Builder("2").addSizeDimension(0, 26).setLocation(Location.newInstance(36, 26)).build());
+        vrpBuilder.addJob(new Service.Builder("3").addSizeDimension(0, 11).setLocation(Location.newInstance(21, 45)).build());
+        vrpBuilder.addJob(new Service.Builder("4").addSizeDimension(0, 30).setLocation(Location.newInstance(45, 35)).build());
+        vrpBuilder.addJob(new Service.Builder("5").addSizeDimension(0, 21).setLocation(Location.newInstance(55, 20)).build());
+        vrpBuilder.addJob(new Service.Builder("6").addSizeDimension(0, 19).setLocation(Location.newInstance(33, 34)).build());
+        vrpBuilder.addJob(new Service.Builder("7").addSizeDimension(0, 15).setLocation(Location.newInstance(50, 50)).build());
+        vrpBuilder.addJob(new Service.Builder("8").addSizeDimension(0, 16).setLocation(Location.newInstance(55, 45)).build());
+        vrpBuilder.addJob(new Service.Builder("9").addSizeDimension(0, 29).setLocation(Location.newInstance(26, 59)).build());
+        vrpBuilder.addJob(new Service.Builder("10").addSizeDimension(0, 26).setLocation(Location.newInstance(40, 66)).build());
+        vrpBuilder.addJob(new Service.Builder("11").addSizeDimension(0, 37).setLocation(Location.newInstance(55, 56)).build());
+        vrpBuilder.addJob(new Service.Builder("12").addSizeDimension(0, 16).setLocation(Location.newInstance(35, 51)).build());
+        vrpBuilder.addJob(new Service.Builder("13").addSizeDimension(0, 12).setLocation(Location.newInstance(62, 35)).build());
+        vrpBuilder.addJob(new Service.Builder("14").addSizeDimension(0, 31).setLocation(Location.newInstance(62, 57)).build());
+        vrpBuilder.addJob(new Service.Builder("15").addSizeDimension(0, 8).setLocation(Location.newInstance(62, 24)).build());
+        vrpBuilder.addJob(new Service.Builder("16").addSizeDimension(0, 19).setLocation(Location.newInstance(21, 36)).build());
+        vrpBuilder.addJob(new Service.Builder("17").addSizeDimension(0, 20).setLocation(Location.newInstance(33, 44)).build());
+        vrpBuilder.addJob(new Service.Builder("18").addSizeDimension(0, 13).setLocation(Location.newInstance(9, 56)).build());
+        vrpBuilder.addJob(new Service.Builder("19").addSizeDimension(0, 15).setLocation(Location.newInstance(62, 48)).build());
+        vrpBuilder.addJob(new Service.Builder("20").addSizeDimension(0, 22).setLocation(Location.newInstance(66, 14)).build());
 
 
         //add vehicle - finite fleet
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/JobAndActivityDependenciesExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/JobAndActivityDependenciesExample.java
index d5c0d311c..8fc78e6f3 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/JobAndActivityDependenciesExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/JobAndActivityDependenciesExample.java
@@ -216,36 +216,36 @@ public static void main(String[] args) {
             .addSkill("driver3")
             .setStartLocation(Location.newInstance(-3, 5)).setReturnToDepot(true).build();
 
-        Service s1 = Service.Builder.newInstance("s1")
+        Service s1 = new Service.Builder("s1")
             .addRequiredSkill("driver1")
             .setName("install new device")
             .setLocation(Location.newInstance(2, 2)).build();
-        Service s2 = Service.Builder.newInstance("s2")
+        Service s2 = new Service.Builder("s2")
             .addRequiredSkill("driver3")
             .setName("deliver key")
             .setLocation(Location.newInstance(2, 4)).build();
 
-        Service s3 = Service.Builder.newInstance("s3")
+        Service s3 = new Service.Builder("s3")
             .addRequiredSkill("driver1")
             .setName("repair heater")
             .setLocation(Location.newInstance(-2, 2)).build();
 
-        Service s4 = Service.Builder.newInstance("s4")
+        Service s4 = new Service.Builder("s4")
             .addRequiredSkill("driver3")
             .setName("get key")
             .setLocation(Location.newInstance(-2.3, 4)).build();
 
-        Service s5 = Service.Builder.newInstance("s5")
+        Service s5 = new Service.Builder("s5")
             .addRequiredSkill("driver1")
             .setName("cleaning")
             .setLocation(Location.newInstance(1, 5)).build();
 
-        Service s6 = Service.Builder.newInstance("s6")
+        Service s6 = new Service.Builder("s6")
             .addRequiredSkill("driver3")
             .setName("use key")
             .setLocation(Location.newInstance(-2, 3)).build();
 
-        Service s7 = Service.Builder.newInstance("s7")
+        Service s7 = new Service.Builder("s7")
             .addRequiredSkill("driver3")
             .setName("maintenance")
             .setLocation(Location.newInstance(-1.7, 3.5)).build();
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleTimeWindowExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleTimeWindowExample.java
index 0cd3e154c..765bc15a2 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleTimeWindowExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleTimeWindowExample.java
@@ -58,28 +58,28 @@ public static void main(String[] args) {
 		/*
          * build services at the required locations, each with a capacity-demand of 1.
 		 */
-        Service service1 = Service.Builder.newInstance("1")
+        Service service1 = new Service.Builder("1")
             .addTimeWindow(50,100)
             .addTimeWindow(20,35)
             .addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(10, 0)).build();
 
-        Service service2 = Service.Builder.newInstance("2")
+        Service service2 = new Service.Builder("2")
             .addSizeDimension(WEIGHT_INDEX, 1)
 //            .setServiceTime(10)
             .setLocation(Location.newInstance(20, 0)).setServiceTime(10).build();
 
-        Service service3 = Service.Builder.newInstance("3")
+        Service service3 = new Service.Builder("3")
             .addTimeWindow(5, 10)
             .addTimeWindow(35, 50)
             .addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(30, 0)).build();
 
-        Service service4 = Service.Builder.newInstance("4")
+        Service service4 = new Service.Builder("4")
 //            .addTimeWindow(5,10)
             .addTimeWindow(20, 40)
             .addTimeWindow(45, 80)
             .addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(40, 0)).build();
 
-        Service service5 = Service.Builder.newInstance("5")
+        Service service5 = new Service.Builder("5")
             .addTimeWindow(5,10)
             .addTimeWindow(20, 40)
             .addTimeWindow(60,100)
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleTimeWindowExample2.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleTimeWindowExample2.java
index d29db613e..f99c13bf6 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleTimeWindowExample2.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleTimeWindowExample2.java
@@ -86,7 +86,7 @@ public static void main(String[] args) {
 
         Random random = RandomNumberGeneration.newInstance();
         for(int i=0;i<40;i++){
-            Service service = Service.Builder.newInstance("" + (i + 1))
+            Service service = new Service.Builder("" + (i + 1))
                 .addTimeWindow(random.nextInt(50), 200)
                 .addTimeWindow(220 + random.nextInt(50), 350)
                 .addTimeWindow(400 + random.nextInt(50), 550)
@@ -97,7 +97,7 @@ public static void main(String[] args) {
         }
 
         for(int i=0;i<12;i++){
-            Service service = Service.Builder.newInstance(""+(i+51))
+            Service service = new Service.Builder(""+(i+51))
 //                .addTimeWindow(0, 80)
 ////                .addTimeWindow(120, 200)
 //                .addTimeWindow(250,500)
@@ -107,7 +107,7 @@ public static void main(String[] args) {
             vrpBuilder.addJob(service);
         }
 
-        Service service = Service.Builder.newInstance("100")
+        Service service = new Service.Builder("100")
             .addTimeWindow(50, 80)
             .setServiceTime(10)
             .setLocation(Location.newInstance(40, 1)).build();
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/RefuseCollectionExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/RefuseCollectionExample.java
index 8b5d60ee5..b5022bf2d 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/RefuseCollectionExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/RefuseCollectionExample.java
@@ -113,7 +113,7 @@ private static void readDemandQuantities(VehicleRoutingProblem.Builder vrpBuilde
             /*
              * build service
 			 */
-            Service service = Service.Builder.newInstance(lineTokens[0]).addSizeDimension(0, Integer.parseInt(lineTokens[1])).setLocation(Location.newInstance(lineTokens[0])).build();
+            Service service = new Service.Builder(lineTokens[0]).addSizeDimension(0, Integer.parseInt(lineTokens[1])).setLocation(Location.newInstance(lineTokens[0])).build();
             /*
 			 * and add it to problem
 			 */
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/RefuseCollectionWithFastMatrixExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/RefuseCollectionWithFastMatrixExample.java
index 5db863726..6fa3abee9 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/RefuseCollectionWithFastMatrixExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/RefuseCollectionWithFastMatrixExample.java
@@ -112,7 +112,7 @@ private static void readDemandQuantities(VehicleRoutingProblem.Builder vrpBuilde
             /*
              * build service
 			 */
-            Service service = Service.Builder.newInstance(lineTokens[0])
+            Service service = new Service.Builder(lineTokens[0])
                 .addSizeDimension(0, Integer.parseInt(lineTokens[1]))
                 .setLocation(Location.Builder.newInstance().setIndex(Integer.parseInt(lineTokens[0])).build())
                 .build();
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/ServicePickupsWithMultipleDepotsExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/ServicePickupsWithMultipleDepotsExample.java
index 67dbde120..ff13ffee8 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/ServicePickupsWithMultipleDepotsExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/ServicePickupsWithMultipleDepotsExample.java
@@ -77,17 +77,17 @@ public static void main(String[] args) {
 		 * 4: (15,13)->(14,11)
 		 */
 
-        Service shipment1 = Service.Builder.newInstance("1").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 7)).build();
-        Service shipment2 = Service.Builder.newInstance("2").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 13)).build();
+        Service shipment1 = new Service.Builder("1").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 7)).build();
+        Service shipment2 = new Service.Builder("2").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 13)).build();
 
-        Service shipment3 = Service.Builder.newInstance("3").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 7)).build();
-        Service shipment4 = Service.Builder.newInstance("4").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 13)).build();
+        Service shipment3 = new Service.Builder("3").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 7)).build();
+        Service shipment4 = new Service.Builder("4").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 13)).build();
 
-        Service shipment5 = Service.Builder.newInstance("5").addSizeDimension(0, 1).setLocation(Location.newInstance(55, 57)).build();
-        Service shipment6 = Service.Builder.newInstance("6").addSizeDimension(0, 1).setLocation(Location.newInstance(55, 63)).build();
+        Service shipment5 = new Service.Builder("5").addSizeDimension(0, 1).setLocation(Location.newInstance(55, 57)).build();
+        Service shipment6 = new Service.Builder("6").addSizeDimension(0, 1).setLocation(Location.newInstance(55, 63)).build();
 
-        Service shipment7 = Service.Builder.newInstance("7").addSizeDimension(0, 1).setLocation(Location.newInstance(65, 57)).build();
-        Service shipment8 = Service.Builder.newInstance("8").addSizeDimension(0, 1).setLocation(Location.newInstance(65, 63)).build();
+        Service shipment7 = new Service.Builder("7").addSizeDimension(0, 1).setLocation(Location.newInstance(65, 57)).build();
+        Service shipment8 = new Service.Builder("8").addSizeDimension(0, 1).setLocation(Location.newInstance(65, 63)).build();
 
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleDepotBoundedPickupAndDeliveryExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleDepotBoundedPickupAndDeliveryExample.java
index 35f805ef8..6f964f800 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleDepotBoundedPickupAndDeliveryExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleDepotBoundedPickupAndDeliveryExample.java
@@ -64,11 +64,11 @@ public static void main(String[] args) {
          * build pickups and deliveries at the required locations, each with a capacity-demand of 1.
 		 */
 
-        Pickup pickup1 = Pickup.Builder.newInstance("1").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 7)).build();
-        Delivery delivery1 = Delivery.Builder.newInstance("2").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 13)).build();
+        Pickup pickup1 = new Pickup.Builder("1").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 7)).build();
+        Delivery delivery1 = new Delivery.Builder("2").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 13)).build();
 
-        Pickup pickup2 = Pickup.Builder.newInstance("3").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 7)).build();
-        Delivery delivery2 = Delivery.Builder.newInstance("4").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 13)).build();
+        Pickup pickup2 = new Pickup.Builder("3").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 7)).build();
+        Delivery delivery2 = new Delivery.Builder("4").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 13)).build();
 
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryWithDepotBoundedDeliveriesExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryWithDepotBoundedDeliveriesExample.java
index dafa1f709..4f08fde2f 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryWithDepotBoundedDeliveriesExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryWithDepotBoundedDeliveriesExample.java
@@ -85,10 +85,10 @@ public static void main(String[] args) {
 		 * 3: (16,8)
 		 * 4: (16,12)
 		 */
-        Delivery delivery1 = Delivery.Builder.newInstance("5").addSizeDimension(0, 1).setLocation(loc(Coordinate.newInstance(4, 8))).build();
-        Delivery delivery2 = Delivery.Builder.newInstance("6").addSizeDimension(0, 1).setLocation(loc(Coordinate.newInstance(4, 12))).build();
-        Delivery delivery3 = Delivery.Builder.newInstance("7").addSizeDimension(0, 1).setLocation(loc(Coordinate.newInstance(16, 8))).build();
-        Delivery delivery4 = Delivery.Builder.newInstance("8").addSizeDimension(0, 1).setLocation(loc(Coordinate.newInstance(16, 12))).build();
+        Delivery delivery1 = new Delivery.Builder("5").addSizeDimension(0, 1).setLocation(loc(Coordinate.newInstance(4, 8))).build();
+        Delivery delivery2 = new Delivery.Builder("6").addSizeDimension(0, 1).setLocation(loc(Coordinate.newInstance(4, 12))).build();
+        Delivery delivery3 = new Delivery.Builder("7").addSizeDimension(0, 1).setLocation(loc(Coordinate.newInstance(16, 8))).build();
+        Delivery delivery4 = new Delivery.Builder("8").addSizeDimension(0, 1).setLocation(loc(Coordinate.newInstance(16, 12))).build();
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addVehicle(vehicle);
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExample.java
index 8cf9f200f..e95ec96c9 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExample.java
@@ -72,11 +72,11 @@ public static void main(String[] args) {
 		/*
          * build services at the required locations, each with a capacity-demand of 1.
 		 */
-        Service service1 = Service.Builder.newInstance("1").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 7)).build();
-        Service service2 = Service.Builder.newInstance("2").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 13)).build();
+        Service service1 = new Service.Builder("1").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 7)).build();
+        Service service2 = new Service.Builder("2").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 13)).build();
 
-        Service service3 = Service.Builder.newInstance("3").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(15, 7)).build();
-        Service service4 = Service.Builder.newInstance("4").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(15, 13)).build();
+        Service service3 = new Service.Builder("3").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(15, 7)).build();
+        Service service4 = new Service.Builder("4").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(15, 13)).build();
 
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExampleOpenRoutes.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExampleOpenRoutes.java
index 83705e434..7b7b8b8eb 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExampleOpenRoutes.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExampleOpenRoutes.java
@@ -64,11 +64,11 @@ public static void main(String[] args) {
 		/*
          * build services at the required locations, each with a capacity-demand of 1.
 		 */
-        Service service1 = Service.Builder.newInstance("1").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 7)).build();
-        Service service2 = Service.Builder.newInstance("2").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 13)).build();
+        Service service1 = new Service.Builder("1").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 7)).build();
+        Service service2 = new Service.Builder("2").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 13)).build();
 
-        Service service3 = Service.Builder.newInstance("3").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 7)).build();
-        Service service4 = Service.Builder.newInstance("4").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 13)).build();
+        Service service3 = new Service.Builder("3").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 7)).build();
+        Service service4 = new Service.Builder("4").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 13)).build();
 
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExampleWithPriorities.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExampleWithPriorities.java
index 6fc24f19d..09d7c4080 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExampleWithPriorities.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExampleWithPriorities.java
@@ -70,11 +70,11 @@ public static void main(String[] args) {
 		/*
          * build services at the required locations, each with a capacity-demand of 1.
 		 */
-        Service service1 = Service.Builder.newInstance("1").setPriority(1).addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 7)).build();
-        Service service2 = Service.Builder.newInstance("2").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 13)).build();
+        Service service1 = new Service.Builder("1").setPriority(1).addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 7)).build();
+        Service service2 = new Service.Builder("2").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 13)).build();
 
-        Service service3 = Service.Builder.newInstance("3").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(15, 7)).build();
-        Service service4 = Service.Builder.newInstance("4").setPriority(1).addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(15, 13)).build();
+        Service service3 = new Service.Builder("3").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(15, 7)).build();
+        Service service4 = new Service.Builder("4").setPriority(1).addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(15, 13)).build();
 
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExampleWithSkills.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExampleWithSkills.java
index 01834da95..c1006b387 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExampleWithSkills.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExampleWithSkills.java
@@ -78,12 +78,12 @@ public static void main(String[] args) {
 		/*
          * build services at the required locations, each with a capacity-demand of 1.
 		 */
-        Service service1 = Service.Builder.newInstance("1").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 7)).build();
-        Service service2 = Service.Builder.newInstance("2").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 13)).build();
+        Service service1 = new Service.Builder("1").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 7)).build();
+        Service service2 = new Service.Builder("2").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 13)).build();
 
-        Service service3 = Service.Builder.newInstance("3").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(15, 7)).build();
+        Service service3 = new Service.Builder("3").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(15, 7)).build();
 
-        Service service4 = Service.Builder.newInstance("4").addSizeDimension(WEIGHT_INDEX, 1).addRequiredSkill("drill").setLocation(Location.newInstance(15, 13)).build();
+        Service service4 = new Service.Builder("4").addSizeDimension(WEIGHT_INDEX, 1).addRequiredSkill("drill").setLocation(Location.newInstance(15, 13)).build();
 
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleVRPWithBackhaulsExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleVRPWithBackhaulsExample.java
index 2c0c3e76f..b97dfc9bc 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleVRPWithBackhaulsExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleVRPWithBackhaulsExample.java
@@ -67,11 +67,11 @@ public static void main(String[] args) {
 		/*
          * build pickups and deliveries at the required locations, each with a capacity-demand of 1.
 		 */
-        Pickup pickup1 = Pickup.Builder.newInstance("1").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 7)).build();
-        Delivery delivery1 = Delivery.Builder.newInstance("2").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 13)).build();
+        Pickup pickup1 = new Pickup.Builder("1").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 7)).build();
+        Delivery delivery1 = new Delivery.Builder("2").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 13)).build();
 
-        Pickup pickup2 = Pickup.Builder.newInstance("3").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 7)).build();
-        Delivery delivery2 = Delivery.Builder.newInstance("4").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 13)).build();
+        Pickup pickup2 = new Pickup.Builder("3").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 7)).build();
+        Delivery delivery2 = new Delivery.Builder("4").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 13)).build();
 
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SolomonWithSkillsExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SolomonWithSkillsExample.java
index 0fb167803..061763ba9 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SolomonWithSkillsExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SolomonWithSkillsExample.java
@@ -65,13 +65,13 @@ public static void main(String[] args) {
             Service service = (Service) job;
             Service.Builder skillServiceBuilder;
             if (service.getLocation().getCoordinate().getY() < 50.) {
-                skillServiceBuilder = Service.Builder.newInstance(service.getId() + "_skill2").setServiceTime(service.getServiceDuration())
+                skillServiceBuilder = new Service.Builder(service.getId() + "_skill2").setServiceTime(service.getServiceDuration())
                     .setLocation(Location.Builder.newInstance().setId(service.getLocation().getId())
                         .setCoordinate(service.getLocation().getCoordinate()).build()).setTimeWindow(service.getTimeWindow())
                     .addSizeDimension(0, service.getSize().get(0));
                 skillServiceBuilder.addRequiredSkill("skill2");
             } else {
-                skillServiceBuilder = Service.Builder.newInstance(service.getId() + "_skill1").setServiceTime(service.getServiceDuration())
+                skillServiceBuilder = new Service.Builder(service.getId() + "_skill1").setServiceTime(service.getServiceDuration())
                     .setLocation(
                         Location.Builder.newInstance().setId(service.getLocation().getId())
                             .setCoordinate(service.getLocation().getCoordinate()).build()
diff --git a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/BelhaizaReader.java b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/BelhaizaReader.java
index f17218dc7..34dc884a3 100644
--- a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/BelhaizaReader.java
+++ b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/BelhaizaReader.java
@@ -112,7 +112,7 @@ public void read(String solomonFile){
 
 				}
 				else{
-					Service.Builder serviceBuilder = Service.Builder.newInstance(customerId);
+					Service.Builder serviceBuilder = new Service.Builder(customerId);
 					serviceBuilder.addSizeDimension(0, demand).setLocation(Location.Builder.newInstance().setCoordinate(coord).setId(customerId).build()).setServiceTime(serviceTime);
 					int noTimeWindows = Integer.parseInt(tokens[7]);
 					for(int i=0;i<noTimeWindows*2;i=i+2){
diff --git a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/ChristofidesReader.java b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/ChristofidesReader.java
index ab5204cfa..45477a206 100644
--- a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/ChristofidesReader.java
+++ b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/ChristofidesReader.java
@@ -92,7 +92,7 @@ public void read(String fileName) {
                 Coordinate customerCoord = makeCoord(tokens[0].trim(), tokens[1].trim());
                 int demand = Integer.parseInt(tokens[2].trim());
                 String customer = Integer.valueOf(counter - 1).toString();
-                Service service = Service.Builder.newInstance(customer).addSizeDimension(0, demand).setServiceTime(serviceTime).setLocation(Location.newInstance(customerCoord.getX(), customerCoord.getY())).build();
+                Service service = new Service.Builder(customer).addSizeDimension(0, demand).setServiceTime(serviceTime).setLocation(Location.newInstance(customerCoord.getX(), customerCoord.getY())).build();
                 vrpBuilder.addJob(service);
             }
             counter++;
diff --git a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/CordeauReader.java b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/CordeauReader.java
index 8240b696f..92defdf39 100644
--- a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/CordeauReader.java
+++ b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/CordeauReader.java
@@ -103,7 +103,7 @@ public void read(String fileName) {
                 Coordinate customerCoord = makeCoord(tokens[1].trim(), tokens[2].trim());
                 double serviceTime = Double.parseDouble(tokens[3].trim());
                 int demand = Integer.parseInt(tokens[4].trim());
-                Service service = Service.Builder.newInstance(id).addSizeDimension(0, demand).setServiceTime(serviceTime)
+                Service service = new Service.Builder(id).addSizeDimension(0, demand).setServiceTime(serviceTime)
                     .setLocation(Location.Builder.newInstance().setId(id).setCoordinate(customerCoord).build()).build();
                 vrpBuilder.addJob(service);
             } else if (counter <= (nOfCustomers + nOfDepots + nOfDepots)) {
diff --git a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/LopezIbanezBlumReader.java b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/LopezIbanezBlumReader.java
index 411b69ff0..7c65d85c3 100644
--- a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/LopezIbanezBlumReader.java
+++ b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/LopezIbanezBlumReader.java
@@ -76,7 +76,7 @@ public void read(String instanceFile) {
                         .setEarliestStart(Double.parseDouble(twTokens[0])).setLatestArrival(Double.parseDouble(twTokens[1])).build();
                     builder.addVehicle(travelingSalesman);
                 } else {
-                    Service s = Service.Builder.newInstance("" + nodeIndex).setLocation(Location.newInstance(nodeIndex))
+                    Service s = new Service.Builder("" + nodeIndex).setLocation(Location.newInstance(nodeIndex))
                         .setTimeWindow(TimeWindow.newInstance(Double.parseDouble(twTokens[0]), Double.parseDouble(twTokens[1]))).build();
                     builder.addJob(s);
                 }
diff --git a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/LuiShenReader.java b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/LuiShenReader.java
index 9215b5e25..4207c0f60 100644
--- a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/LuiShenReader.java
+++ b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/LuiShenReader.java
@@ -86,7 +86,7 @@ public void read(String instanceFile, String vehicleFile, String costScenario) {
                 if (counter == 10) {
                     createVehicles(vehicleFile, costScenario, customerId, coord, start, end);
                 } else {
-                    Service service = Service.Builder.newInstance("" + counter).addSizeDimension(0, demand)
+                    Service service = new Service.Builder("" + counter).addSizeDimension(0, demand)
                         .setLocation(Location.Builder.newInstance().setCoordinate(coord).setId(customerId).build()).setServiceTime(serviceTime)
                         .setTimeWindow(TimeWindow.newInstance(start, end)).build();
                     vrpBuilder.addJob(service);
diff --git a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/SolomonReader.java b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/SolomonReader.java
index 04f54de9f..eb71dd876 100644
--- a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/SolomonReader.java
+++ b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/SolomonReader.java
@@ -110,7 +110,7 @@ public void read(String solomonFile) {
                     vrpBuilder.addVehicle(vehicle);
 
                 } else {
-                    Service service = Service.Builder.newInstance(customerId).addSizeDimension(0, demand)
+                    Service service = new Service.Builder(customerId).addSizeDimension(0, demand)
                         .setLocation(Location.Builder.newInstance().setCoordinate(coord).setId(customerId).build()).setServiceTime(serviceTime)
                         .setTimeWindow(TimeWindow.newInstance(start, end)).build();
                     vrpBuilder.addJob(service);
diff --git a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/TSPLIB95Reader.java b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/TSPLIB95Reader.java
index abeeea31a..829236db7 100644
--- a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/TSPLIB95Reader.java
+++ b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/TSPLIB95Reader.java
@@ -187,7 +187,7 @@ public void read(String filename) {
                     continue;
                 }
             }
-            Service service = Service.Builder.newInstance(id)
+            Service service = new Service.Builder(id)
                 .setLocation(Location.Builder.newInstance().setId(id)
                     .setCoordinate(coords[index]).setIndex(index).build())
                 .addSizeDimension(0, demands[index]).build();
diff --git a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/VrphGoldenReader.java b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/VrphGoldenReader.java
index 9a7d4697b..1fab0a941 100644
--- a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/VrphGoldenReader.java
+++ b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/VrphGoldenReader.java
@@ -86,7 +86,7 @@ public void read(String filename) {
                 if (customerCount == 0) {
                     depotCoord = Coordinate.newInstance(Double.parseDouble(tokens[1]), Double.parseDouble(tokens[2]));
                 } else {
-                    Service.Builder serviceBuilder = Service.Builder.newInstance(tokens[0]).addSizeDimension(0, Integer.parseInt(tokens[3]));
+                    Service.Builder serviceBuilder = new Service.Builder(tokens[0]).addSizeDimension(0, Integer.parseInt(tokens[3]));
                     serviceBuilder.setLocation(Location.newInstance(Double.parseDouble(tokens[1]), Double.parseDouble(tokens[2])));
                     vrpBuilder.addJob(serviceBuilder.build());
                 }
diff --git a/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLReader.java b/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLReader.java
index 504d39c44..4c350af26 100644
--- a/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLReader.java
+++ b/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLReader.java
@@ -17,12 +17,37 @@
  */
 package com.graphhopper.jsprit.io.problem;
 
+import java.io.IOException;
+import java.io.InputStream;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+import org.apache.commons.configuration.ConfigurationException;
+import org.apache.commons.configuration.HierarchicalConfiguration;
+import org.apache.commons.configuration.XMLConfiguration;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.xml.sax.EntityResolver;
+import org.xml.sax.InputSource;
+import org.xml.sax.SAXException;
+
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
 import com.graphhopper.jsprit.core.problem.driver.Driver;
 import com.graphhopper.jsprit.core.problem.driver.DriverImpl;
-import com.graphhopper.jsprit.core.problem.job.*;
+import com.graphhopper.jsprit.core.problem.job.Break;
+import com.graphhopper.jsprit.core.problem.job.Delivery;
+import com.graphhopper.jsprit.core.problem.job.Job;
+import com.graphhopper.jsprit.core.problem.job.Pickup;
+import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
@@ -33,38 +58,35 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.Coordinate;
 import com.graphhopper.jsprit.core.util.Resource;
-import org.apache.commons.configuration.ConfigurationException;
-import org.apache.commons.configuration.HierarchicalConfiguration;
-import org.apache.commons.configuration.XMLConfiguration;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-import org.xml.sax.EntityResolver;
-import org.xml.sax.InputSource;
-import org.xml.sax.SAXException;
-
-import java.io.IOException;
-import java.io.InputStream;
-import java.util.*;
 
 public class VrpXMLReader {
 
     public interface ServiceBuilderFactory {
-        Service.Builder createBuilder(String serviceType, String id, Integer size);
+        Service.ServiceBuilderBase<?> createBuilder(String serviceType, String id, Integer size);
     }
 
     static class DefaultServiceBuilderFactory implements ServiceBuilderFactory {
 
         @Override
-        public Service.Builder createBuilder(String serviceType, String id, Integer size) {
+        public Service.ServiceBuilderBase<?> createBuilder(String serviceType, String id, Integer size) {
             if (serviceType.equals("pickup")) {
-                if (size != null) return Pickup.Builder.newInstance(id).addSizeDimension(0, size);
-                else return Pickup.Builder.newInstance(id);
+                if (size != null) {
+                    return new Pickup.Builder(id).addSizeDimension(0, size);
+                } else {
+                    return new Pickup.Builder(id);
+                }
             } else if (serviceType.equals("delivery")) {
-                if (size != null) return Delivery.Builder.newInstance(id).addSizeDimension(0, size);
-                else return Delivery.Builder.newInstance(id);
+                if (size != null) {
+                    return new Delivery.Builder(id).addSizeDimension(0, size);
+                } else {
+                    return new Delivery.Builder(id);
+                }
             } else {
-                if (size != null) return Service.Builder.newInstance(id).addSizeDimension(0, size);
-                else return Service.Builder.newInstance(id);
+                if (size != null) {
+                    return new Service.Builder(id).addSizeDimension(0, size);
+                } else {
+                    return new Service.Builder(id);
+                }
 
             }
         }
@@ -91,7 +113,8 @@
 
 
     /**
-     * @param schemaValidation the schemaValidation to set
+     * @param schemaValidation
+     *            the schemaValidation to set
      */
     @SuppressWarnings("UnusedDeclaration")
     public void setSchemaValidation(boolean schemaValidation) {
@@ -100,18 +123,18 @@ public void setSchemaValidation(boolean schemaValidation) {
 
     public VrpXMLReader(VehicleRoutingProblem.Builder vrpBuilder, Collection<VehicleRoutingProblemSolution> solutions) {
         this.vrpBuilder = vrpBuilder;
-        this.vehicleMap = new LinkedHashMap<String, Vehicle>();
-        this.serviceMap = new LinkedHashMap<String, Service>();
-        this.shipmentMap = new LinkedHashMap<String, Shipment>();
+        vehicleMap = new LinkedHashMap<String, Vehicle>();
+        serviceMap = new LinkedHashMap<String, Service>();
+        shipmentMap = new LinkedHashMap<String, Shipment>();
         this.solutions = solutions;
     }
 
     public VrpXMLReader(VehicleRoutingProblem.Builder vrpBuilder) {
         this.vrpBuilder = vrpBuilder;
-        this.vehicleMap = new LinkedHashMap<String, Vehicle>();
-        this.serviceMap = new LinkedHashMap<String, Service>();
-        this.shipmentMap = new LinkedHashMap<String, Shipment>();
-        this.solutions = null;
+        vehicleMap = new LinkedHashMap<String, Vehicle>();
+        serviceMap = new LinkedHashMap<String, Service>();
+        shipmentMap = new LinkedHashMap<String, Shipment>();
+        solutions = null;
     }
 
     public void read(String filename) {
@@ -194,9 +217,13 @@ private void readInitialRoutes(XMLConfiguration xmlConfig) {
             Driver driver = DriverImpl.noDriver();
             String vehicleId = routeConfig.getString("vehicleId");
             Vehicle vehicle = getVehicle(vehicleId);
-            if (vehicle == null) throw new IllegalArgumentException("vehicle is missing.");
+            if (vehicle == null) {
+                throw new IllegalArgumentException("vehicle is missing.");
+            }
             String start = routeConfig.getString("start");
-            if (start == null) throw new IllegalArgumentException("route start-time is missing.");
+            if (start == null) {
+                throw new IllegalArgumentException("route start-time is missing.");
+            }
             double departureTime = Double.parseDouble(start);
 
             VehicleRoute.Builder routeBuilder = VehicleRoute.Builder.newInstance(vehicle, driver);
@@ -205,41 +232,52 @@ private void readInitialRoutes(XMLConfiguration xmlConfig) {
             List<HierarchicalConfiguration> actConfigs = routeConfig.configurationsAt("act");
             for (HierarchicalConfiguration actConfig : actConfigs) {
                 String type = actConfig.getString("[@type]");
-                if (type == null) throw new IllegalArgumentException("act[@type] is missing.");
+                if (type == null) {
+                    throw new IllegalArgumentException("act[@type] is missing.");
+                }
                 double arrTime = 0.;
                 double endTime = 0.;
                 String arrTimeS = actConfig.getString("arrTime");
-                if (arrTimeS != null) arrTime = Double.parseDouble(arrTimeS);
+                if (arrTimeS != null) {
+                    arrTime = Double.parseDouble(arrTimeS);
+                }
                 String endTimeS = actConfig.getString("endTime");
-                if (endTimeS != null) endTime = Double.parseDouble(endTimeS);
+                if (endTimeS != null) {
+                    endTime = Double.parseDouble(endTimeS);
+                }
 
                 String serviceId = actConfig.getString("serviceId");
-                if(type.equals("break")) {
+                if (type.equals("break")) {
                     Break currentbreak = getBreak(vehicleId);
                     routeBuilder.addBreak(currentbreak);
-                }
-                else {
+                } else {
                     if (serviceId != null) {
                         Service service = getService(serviceId);
-                        if (service == null)
-                            throw new IllegalArgumentException("service to serviceId " + serviceId + " is missing (reference in one of your initial routes). make sure you define the service you refer to here in <services> </services>.");
+                        if (service == null) {
+                            throw new IllegalArgumentException("service to serviceId " + serviceId
+                                    + " is missing (reference in one of your initial routes). make sure you define the service you refer to here in <services> </services>.");
+                        }
                         //!!!since job is part of initial route, it does not belong to jobs in problem, i.e. variable jobs that can be assigned/scheduled
                         freezedJobIds.add(serviceId);
                         routeBuilder.addService(service);
                     } else {
                         String shipmentId = actConfig.getString("shipmentId");
-                        if (shipmentId == null)
+                        if (shipmentId == null) {
                             throw new IllegalArgumentException("either serviceId or shipmentId is missing");
+                        }
                         Shipment shipment = getShipment(shipmentId);
-                        if (shipment == null)
-                            throw new IllegalArgumentException("shipment to shipmentId " + shipmentId + " is missing (reference in one of your initial routes). make sure you define the shipment you refer to here in <shipments> </shipments>.");
+                        if (shipment == null) {
+                            throw new IllegalArgumentException("shipment to shipmentId " + shipmentId
+                                    + " is missing (reference in one of your initial routes). make sure you define the shipment you refer to here in <shipments> </shipments>.");
+                        }
                         freezedJobIds.add(shipmentId);
                         if (type.equals("pickupShipment")) {
                             routeBuilder.addPickup(shipment);
                         } else if (type.equals("deliverShipment")) {
                             routeBuilder.addDelivery(shipment);
-                        } else
+                        } else {
                             throw new IllegalArgumentException("type " + type + " is not supported. Use 'pickupShipment' or 'deliverShipment' here");
+                        }
                     }
                 }
             }
@@ -250,12 +288,16 @@ private void readInitialRoutes(XMLConfiguration xmlConfig) {
     }
 
     private void readSolutions(XMLConfiguration vrpProblem) {
-        if (solutions == null) return;
+        if (solutions == null) {
+            return;
+        }
         List<HierarchicalConfiguration> solutionConfigs = vrpProblem.configurationsAt("solutions.solution");
         for (HierarchicalConfiguration solutionConfig : solutionConfigs) {
             String totalCost = solutionConfig.getString("cost");
             double cost = -1;
-            if (totalCost != null) cost = Double.parseDouble(totalCost);
+            if (totalCost != null) {
+                cost = Double.parseDouble(totalCost);
+            }
             List<HierarchicalConfiguration> routeConfigs = solutionConfig.configurationsAt("routes.route");
             List<VehicleRoute> routes = new ArrayList<VehicleRoute>();
             for (HierarchicalConfiguration routeConfig : routeConfigs) {
@@ -263,48 +305,62 @@ private void readSolutions(XMLConfiguration vrpProblem) {
                 Driver driver = DriverImpl.noDriver();
                 String vehicleId = routeConfig.getString("vehicleId");
                 Vehicle vehicle = getVehicle(vehicleId);
-                if (vehicle == null) throw new IllegalArgumentException("vehicle is missing.");
+                if (vehicle == null) {
+                    throw new IllegalArgumentException("vehicle is missing.");
+                }
                 String start = routeConfig.getString("start");
-                if (start == null) throw new IllegalArgumentException("route start-time is missing.");
+                if (start == null) {
+                    throw new IllegalArgumentException("route start-time is missing.");
+                }
                 double departureTime = Double.parseDouble(start);
 
                 String end = routeConfig.getString("end");
-                if (end == null) throw new IllegalArgumentException("route end-time is missing.");
+                if (end == null) {
+                    throw new IllegalArgumentException("route end-time is missing.");
+                }
 
                 VehicleRoute.Builder routeBuilder = VehicleRoute.Builder.newInstance(vehicle, driver);
                 routeBuilder.setDepartureTime(departureTime);
                 List<HierarchicalConfiguration> actConfigs = routeConfig.configurationsAt("act");
                 for (HierarchicalConfiguration actConfig : actConfigs) {
                     String type = actConfig.getString("[@type]");
-                    if (type == null) throw new IllegalArgumentException("act[@type] is missing.");
+                    if (type == null) {
+                        throw new IllegalArgumentException("act[@type] is missing.");
+                    }
                     double arrTime = 0.;
                     double endTime = 0.;
                     String arrTimeS = actConfig.getString("arrTime");
-                    if (arrTimeS != null) arrTime = Double.parseDouble(arrTimeS);
+                    if (arrTimeS != null) {
+                        arrTime = Double.parseDouble(arrTimeS);
+                    }
                     String endTimeS = actConfig.getString("endTime");
-                    if (endTimeS != null) endTime = Double.parseDouble(endTimeS);
-                    if(type.equals("break")) {
+                    if (endTimeS != null) {
+                        endTime = Double.parseDouble(endTimeS);
+                    }
+                    if (type.equals("break")) {
                         Break currentbreak = getBreak(vehicleId);
                         routeBuilder.addBreak(currentbreak);
-                    }
-                    else {
+                    } else {
                         String serviceId = actConfig.getString("serviceId");
                         if (serviceId != null) {
                             Service service = getService(serviceId);
                             routeBuilder.addService(service);
                         } else {
                             String shipmentId = actConfig.getString("shipmentId");
-                            if (shipmentId == null)
+                            if (shipmentId == null) {
                                 throw new IllegalArgumentException("either serviceId or shipmentId is missing");
+                            }
                             Shipment shipment = getShipment(shipmentId);
-                            if (shipment == null)
+                            if (shipment == null) {
                                 throw new IllegalArgumentException("shipment with id " + shipmentId + " does not exist.");
+                            }
                             if (type.equals("pickupShipment")) {
                                 routeBuilder.addPickup(shipment);
                             } else if (type.equals("deliverShipment")) {
                                 routeBuilder.addDelivery(shipment);
-                            } else
+                            } else {
                                 throw new IllegalArgumentException("type " + type + " is not supported. Use 'pickupShipment' or 'deliverShipment' here");
+                            }
                         }
                     }
                 }
@@ -315,8 +371,12 @@ private void readSolutions(XMLConfiguration vrpProblem) {
             for (HierarchicalConfiguration unassignedJobConfig : unassignedJobConfigs) {
                 String jobId = unassignedJobConfig.getString("[@id]");
                 Job job = getShipment(jobId);
-                if (job == null) job = getService(jobId);
-                if (job == null) throw new IllegalArgumentException("cannot find unassignedJob with id " + jobId);
+                if (job == null) {
+                    job = getService(jobId);
+                }
+                if (job == null) {
+                    throw new IllegalArgumentException("cannot find unassignedJob with id " + jobId);
+                }
                 solution.getUnassignedJobs().add(job);
             }
 
@@ -342,17 +402,22 @@ private Break getBreak(String vehicleId) {
 
     private void readProblemType(XMLConfiguration vrpProblem) {
         String fleetSize = vrpProblem.getString("problemType.fleetSize");
-        if (fleetSize == null) vrpBuilder.setFleetSize(FleetSize.INFINITE);
-        else if (fleetSize.toUpperCase().equals(FleetSize.INFINITE.toString()))
+        if (fleetSize == null) {
+            vrpBuilder.setFleetSize(FleetSize.INFINITE);
+        } else if (fleetSize.toUpperCase().equals(FleetSize.INFINITE.toString())) {
             vrpBuilder.setFleetSize(FleetSize.INFINITE);
-        else vrpBuilder.setFleetSize(FleetSize.FINITE);
+        } else {
+            vrpBuilder.setFleetSize(FleetSize.FINITE);
+        }
     }
 
     private void readShipments(XMLConfiguration config) {
         List<HierarchicalConfiguration> shipmentConfigs = config.configurationsAt("shipments.shipment");
         for (HierarchicalConfiguration shipmentConfig : shipmentConfigs) {
             String id = shipmentConfig.getString("[@id]");
-            if (id == null) throw new IllegalArgumentException("shipment[@id] is missing.");
+            if (id == null) {
+                throw new IllegalArgumentException("shipment[@id] is missing.");
+            }
 
             String capacityString = shipmentConfig.getString("capacity-demand");
             boolean capacityDimensionsExist = shipmentConfig.containsKey("capacity-dimensions.dimension(0)");
@@ -360,7 +425,8 @@ private void readShipments(XMLConfiguration config) {
                 throw new IllegalArgumentException("capacity of shipment is not set. use 'capacity-dimensions'");
             }
             if (capacityString != null && capacityDimensionsExist) {
-                throw new IllegalArgumentException("either use capacity or capacity-dimension, not both. prefer the use of 'capacity-dimensions' over 'capacity'.");
+                throw new IllegalArgumentException(
+                        "either use capacity or capacity-dimension, not both. prefer the use of 'capacity-dimensions' over 'capacity'.");
             }
 
             Shipment.Builder builder;
@@ -378,32 +444,42 @@ private void readShipments(XMLConfiguration config) {
 
             //name
             String name = shipmentConfig.getString("name");
-            if (name != null) builder.setName(name);
+            if (name != null) {
+                builder.setName(name);
+            }
 
             //pickup location
             //pickup-locationId
             Location.Builder pickupLocationBuilder = Location.Builder.newInstance();
             String pickupLocationId = shipmentConfig.getString("pickup.locationId");
-            if (pickupLocationId == null) pickupLocationId = shipmentConfig.getString("pickup.location.id");
+            if (pickupLocationId == null) {
+                pickupLocationId = shipmentConfig.getString("pickup.location.id");
+            }
             if (pickupLocationId != null) {
                 pickupLocationBuilder.setId(pickupLocationId);
             }
 
             //pickup-coord
             Coordinate pickupCoord = getCoord(shipmentConfig, "pickup.");
-            if (pickupCoord == null) pickupCoord = getCoord(shipmentConfig, "pickup.location.");
+            if (pickupCoord == null) {
+                pickupCoord = getCoord(shipmentConfig, "pickup.location.");
+            }
             if (pickupCoord != null) {
                 pickupLocationBuilder.setCoordinate(pickupCoord);
             }
 
             //pickup.location.index
             String pickupLocationIndex = shipmentConfig.getString("pickup.location.index");
-            if (pickupLocationIndex != null) pickupLocationBuilder.setIndex(Integer.parseInt(pickupLocationIndex));
+            if (pickupLocationIndex != null) {
+                pickupLocationBuilder.setIndex(Integer.parseInt(pickupLocationIndex));
+            }
             builder.setPickupLocation(pickupLocationBuilder.build());
 
             //pickup-serviceTime
             String pickupServiceTime = shipmentConfig.getString("pickup.duration");
-            if (pickupServiceTime != null) builder.setPickupServiceTime(Double.parseDouble(pickupServiceTime));
+            if (pickupServiceTime != null) {
+                builder.setPickupServiceTime(Double.parseDouble(pickupServiceTime));
+            }
 
             //pickup-tw
             List<HierarchicalConfiguration> pickupTWConfigs = shipmentConfig.configurationsAt("pickup.timeWindows.timeWindow");
@@ -417,7 +493,9 @@ private void readShipments(XMLConfiguration config) {
             //delivery-locationId
             Location.Builder deliveryLocationBuilder = Location.Builder.newInstance();
             String deliveryLocationId = shipmentConfig.getString("delivery.locationId");
-            if (deliveryLocationId == null) deliveryLocationId = shipmentConfig.getString("delivery.location.id");
+            if (deliveryLocationId == null) {
+                deliveryLocationId = shipmentConfig.getString("delivery.location.id");
+            }
             if (deliveryLocationId != null) {
                 deliveryLocationBuilder.setId(deliveryLocationId);
 //				builder.setDeliveryLocationId(deliveryLocationId);
@@ -425,19 +503,24 @@ private void readShipments(XMLConfiguration config) {
 
             //delivery-coord
             Coordinate deliveryCoord = getCoord(shipmentConfig, "delivery.");
-            if (deliveryCoord == null) deliveryCoord = getCoord(shipmentConfig, "delivery.location.");
+            if (deliveryCoord == null) {
+                deliveryCoord = getCoord(shipmentConfig, "delivery.location.");
+            }
             if (deliveryCoord != null) {
                 deliveryLocationBuilder.setCoordinate(deliveryCoord);
             }
 
             String deliveryLocationIndex = shipmentConfig.getString("delivery.location.index");
-            if (deliveryLocationIndex != null)
+            if (deliveryLocationIndex != null) {
                 deliveryLocationBuilder.setIndex(Integer.parseInt(deliveryLocationIndex));
+            }
             builder.setDeliveryLocation(deliveryLocationBuilder.build());
 
             //delivery-serviceTime
             String deliveryServiceTime = shipmentConfig.getString("delivery.duration");
-            if (deliveryServiceTime != null) builder.setDeliveryServiceTime(Double.parseDouble(deliveryServiceTime));
+            if (deliveryServiceTime != null) {
+                builder.setDeliveryServiceTime(Double.parseDouble(deliveryServiceTime));
+            }
 
             //delivery-tw
             List<HierarchicalConfiguration> deliveryTWConfigs = shipmentConfig.configurationsAt("delivery.timeWindows.timeWindow");
@@ -452,7 +535,9 @@ private void readShipments(XMLConfiguration config) {
             if (skillString != null) {
                 String cleaned = skillString.replaceAll("\\s", "");
                 String[] skillTokens = cleaned.split("[,;]");
-                for (String skill : skillTokens) builder.addRequiredSkill(skill.toLowerCase());
+                for (String skill : skillTokens) {
+                    builder.addRequiredSkill(skill.toLowerCase());
+                }
             }
 
             //build shipment
@@ -476,9 +561,13 @@ private void readServices(XMLConfiguration vrpProblem) {
         List<HierarchicalConfiguration> serviceConfigs = vrpProblem.configurationsAt("services.service");
         for (HierarchicalConfiguration serviceConfig : serviceConfigs) {
             String id = serviceConfig.getString("[@id]");
-            if (id == null) throw new IllegalArgumentException("service[@id] is missing.");
+            if (id == null) {
+                throw new IllegalArgumentException("service[@id] is missing.");
+            }
             String type = serviceConfig.getString("[@type]");
-            if (type == null) type = "service";
+            if (type == null) {
+                type = "service";
+            }
 
             String capacityString = serviceConfig.getString("capacity-demand");
             boolean capacityDimensionsExist = serviceConfig.containsKey("capacity-dimensions.dimension(0)");
@@ -486,10 +575,11 @@ private void readServices(XMLConfiguration vrpProblem) {
                 throw new IllegalArgumentException("capacity of service is not set. use 'capacity-dimensions'");
             }
             if (capacityString != null && capacityDimensionsExist) {
-                throw new IllegalArgumentException("either use capacity or capacity-dimension, not both. prefer the use of 'capacity-dimensions' over 'capacity'.");
+                throw new IllegalArgumentException(
+                        "either use capacity or capacity-dimension, not both. prefer the use of 'capacity-dimensions' over 'capacity'.");
             }
 
-            Service.Builder builder;
+            Service.ServiceBuilderBase<?> builder;
             if (capacityString != null) {
                 builder = serviceBuilderFactory.createBuilder(type, id, Integer.parseInt(capacityString));
             } else {
@@ -504,7 +594,9 @@ private void readServices(XMLConfiguration vrpProblem) {
 
             //name
             String name = serviceConfig.getString("name");
-            if (name != null) builder.setName(name);
+            if (name != null) {
+                builder.setName(name);
+            }
 
             //location
             Location.Builder locationBuilder = Location.Builder.newInstance();
@@ -512,16 +604,22 @@ private void readServices(XMLConfiguration vrpProblem) {
             if (serviceLocationId == null) {
                 serviceLocationId = serviceConfig.getString("location.id");
             }
-            if (serviceLocationId != null) locationBuilder.setId(serviceLocationId);
+            if (serviceLocationId != null) {
+                locationBuilder.setId(serviceLocationId);
+            }
 
             Coordinate serviceCoord = getCoord(serviceConfig, "");
-            if (serviceCoord == null) serviceCoord = getCoord(serviceConfig, "location.");
+            if (serviceCoord == null) {
+                serviceCoord = getCoord(serviceConfig, "location.");
+            }
             if (serviceCoord != null) {
                 locationBuilder.setCoordinate(serviceCoord);
             }
 
             String locationIndex = serviceConfig.getString("location.index");
-            if (locationIndex != null) locationBuilder.setIndex(Integer.parseInt(locationIndex));
+            if (locationIndex != null) {
+                locationBuilder.setIndex(Integer.parseInt(locationIndex));
+            }
             builder.setLocation(locationBuilder.build());
 
             if (serviceConfig.containsKey("duration")) {
@@ -539,7 +637,9 @@ private void readServices(XMLConfiguration vrpProblem) {
             if (skillString != null) {
                 String cleaned = skillString.replaceAll("\\s", "");
                 String[] skillTokens = cleaned.split("[,;]");
-                for (String skill : skillTokens) builder.addRequiredSkill(skill.toLowerCase());
+                for (String skill : skillTokens) {
+                    builder.addRequiredSkill(skill.toLowerCase());
+                }
             }
 
             //build service
@@ -557,7 +657,9 @@ private void readVehiclesAndTheirTypes(XMLConfiguration vrpProblem) {
         List<HierarchicalConfiguration> typeConfigs = vrpProblem.configurationsAt("vehicleTypes.type");
         for (HierarchicalConfiguration typeConfig : typeConfigs) {
             String typeId = typeConfig.getString("id");
-            if (typeId == null) throw new IllegalArgumentException("typeId is missing.");
+            if (typeId == null) {
+                throw new IllegalArgumentException("typeId is missing.");
+            }
 
             String capacityString = typeConfig.getString("capacity");
             boolean capacityDimensionsExist = typeConfig.containsKey("capacity-dimensions.dimension(0)");
@@ -565,7 +667,8 @@ private void readVehiclesAndTheirTypes(XMLConfiguration vrpProblem) {
                 throw new IllegalArgumentException("capacity of type is not set. use 'capacity-dimensions'");
             }
             if (capacityString != null && capacityDimensionsExist) {
-                throw new IllegalArgumentException("either use capacity or capacity-dimension, not both. prefer the use of 'capacity-dimensions' over 'capacity'.");
+                throw new IllegalArgumentException(
+                        "either use capacity or capacity-dimension, not both. prefer the use of 'capacity-dimensions' over 'capacity'.");
             }
 
             VehicleTypeImpl.Builder typeBuilder;
@@ -584,19 +687,29 @@ private void readVehiclesAndTheirTypes(XMLConfiguration vrpProblem) {
             Double fix = typeConfig.getDouble("costs.fixed");
             Double timeC = typeConfig.getDouble("costs.time");
             Double distC = typeConfig.getDouble("costs.distance");
-            if(typeConfig.containsKey("costs.service")){
+            if (typeConfig.containsKey("costs.service")) {
                 Double serviceC = typeConfig.getDouble("costs.service");
-                if (serviceC != null) typeBuilder.setCostPerServiceTime(serviceC);
+                if (serviceC != null) {
+                    typeBuilder.setCostPerServiceTime(serviceC);
+                }
             }
 
-            if(typeConfig.containsKey("costs.wait")){
+            if (typeConfig.containsKey("costs.wait")) {
                 Double waitC = typeConfig.getDouble("costs.wait");
-                if (waitC != null) typeBuilder.setCostPerWaitingTime(waitC);
+                if (waitC != null) {
+                    typeBuilder.setCostPerWaitingTime(waitC);
+                }
             }
 
-            if (fix != null) typeBuilder.setFixedCost(fix);
-            if (timeC != null) typeBuilder.setCostPerTransportTime(timeC);
-            if (distC != null) typeBuilder.setCostPerDistance(distC);
+            if (fix != null) {
+                typeBuilder.setFixedCost(fix);
+            }
+            if (timeC != null) {
+                typeBuilder.setCostPerTransportTime(timeC);
+            }
+            if (distC != null) {
+                typeBuilder.setCostPerDistance(distC);
+            }
             VehicleType type = typeBuilder.build();
             String id = type.getTypeId();
             types.put(id, type);
@@ -607,10 +720,14 @@ private void readVehiclesAndTheirTypes(XMLConfiguration vrpProblem) {
         boolean doNotWarnAgain = false;
         for (HierarchicalConfiguration vehicleConfig : vehicleConfigs) {
             String vehicleId = vehicleConfig.getString("id");
-            if (vehicleId == null) throw new IllegalArgumentException("vehicleId is missing.");
+            if (vehicleId == null) {
+                throw new IllegalArgumentException("vehicleId is missing.");
+            }
             Builder builder = VehicleImpl.Builder.newInstance(vehicleId);
             String typeId = vehicleConfig.getString("typeId");
-            if (typeId == null) throw new IllegalArgumentException("typeId is missing.");
+            if (typeId == null) {
+                throw new IllegalArgumentException("typeId is missing.");
+            }
             String vType = vehicleConfig.getString("[@type]");
             if (vType != null) {
                 if (vType.equals("penalty")) {
@@ -618,7 +735,9 @@ private void readVehiclesAndTheirTypes(XMLConfiguration vrpProblem) {
                 }
             }
             VehicleType type = types.get(typeId);
-            if (type == null) throw new IllegalArgumentException("vehicleType with typeId " + typeId + " is missing.");
+            if (type == null) {
+                throw new IllegalArgumentException("vehicleType with typeId " + typeId + " is missing.");
+            }
             builder.setType(type);
 
             //read startlocation
@@ -644,7 +763,9 @@ private void readVehiclesAndTheirTypes(XMLConfiguration vrpProblem) {
                 startLocationBuilder.setCoordinate(coordinate);
             }
             String index = vehicleConfig.getString("startLocation.index");
-            if (index == null) index = vehicleConfig.getString("location.index");
+            if (index == null) {
+                index = vehicleConfig.getString("location.index");
+            }
             if (index != null) {
                 startLocationBuilder.setIndex(Integer.parseInt(index));
             }
@@ -675,13 +796,19 @@ private void readVehiclesAndTheirTypes(XMLConfiguration vrpProblem) {
                 hasEndLocation = true;
                 endLocationBuilder.setIndex(Integer.parseInt(endLocationIndex));
             }
-            if (hasEndLocation) builder.setEndLocation(endLocationBuilder.build());
+            if (hasEndLocation) {
+                builder.setEndLocation(endLocationBuilder.build());
+            }
 
             //read timeSchedule
             String start = vehicleConfig.getString("timeSchedule.start");
             String end = vehicleConfig.getString("timeSchedule.end");
-            if (start != null) builder.setEarliestStart(Double.parseDouble(start));
-            if (end != null) builder.setLatestArrival(Double.parseDouble(end));
+            if (start != null) {
+                builder.setEarliestStart(Double.parseDouble(start));
+            }
+            if (end != null) {
+                builder.setLatestArrival(Double.parseDouble(end));
+            }
 
             //read return2depot
             String returnToDepot = vehicleConfig.getString("returnToDepot");
@@ -694,7 +821,9 @@ private void readVehiclesAndTheirTypes(XMLConfiguration vrpProblem) {
             if (skillString != null) {
                 String cleaned = skillString.replaceAll("\\s", "");
                 String[] skillTokens = cleaned.split("[,;]");
-                for (String skill : skillTokens) builder.addSkill(skill.toLowerCase());
+                for (String skill : skillTokens) {
+                    builder.addSkill(skill.toLowerCase());
+                }
             }
 
             // read break
@@ -702,10 +831,10 @@ private void readVehiclesAndTheirTypes(XMLConfiguration vrpProblem) {
             if (!breakTWConfigs.isEmpty()) {
                 String breakDurationString = vehicleConfig.getString("breaks.duration");
                 String id = vehicleConfig.getString("breaks.id");
-                Break.Builder current_break = Break.Builder.newInstance(id);
+                Break.Builder current_break = new Break.Builder(id);
                 current_break.setServiceTime(Double.parseDouble(breakDurationString));
                 for (HierarchicalConfiguration twConfig : breakTWConfigs) {
-                	current_break.addTimeWindow(TimeWindow.newInstance(twConfig.getDouble("start"), twConfig.getDouble("end")));
+                    current_break.addTimeWindow(TimeWindow.newInstance(twConfig.getDouble("start"), twConfig.getDouble("end")));
                 }
                 builder.setBreak(current_break.build());
             }
diff --git a/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLReaderTest.java b/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLReaderTest.java
index ce322cbdb..f46a31384 100644
--- a/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLReaderTest.java
+++ b/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLReaderTest.java
@@ -17,28 +17,32 @@
  */
 package com.graphhopper.jsprit.io.problem;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertTrue;
+
+import java.io.InputStream;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.List;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.job.Service;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverShipment;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupService;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupShipment;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverShipmentDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupServiceDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupShipmentDEPRECATED;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.util.Solutions;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.io.InputStream;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.List;
-
-import static org.junit.Assert.*;
 
 
 public class VrpXMLReaderTest {
@@ -139,14 +143,20 @@ public void whenReadingVehicles_nuSkillsOfV2ShouldBeCorrect() {
     }
 
     private Vehicle getVehicle(String string, Collection<Vehicle> vehicles) {
-        for (Vehicle v : vehicles) if (string.equals(v.getId())) return v;
+        for (Vehicle v : vehicles) {
+            if (string.equals(v.getId())) {
+                return v;
+            }
+        }
         return null;
     }
 
     private boolean idsInCollection(List<String> asList, Collection<Vehicle> vehicles) {
         List<String> ids = new ArrayList<String>(asList);
         for (Vehicle v : vehicles) {
-            if (ids.contains(v.getId())) ids.remove(v.getId());
+            if (ids.contains(v.getId())) {
+                ids.remove(v.getId());
+            }
         }
         return ids.isEmpty();
     }
@@ -182,7 +192,9 @@ public void whenReadingServices_itReadsThemCorrectly() {
         VehicleRoutingProblem vrp = builder.build();
         int servCounter = 0;
         for (Job j : vrp.getJobs().values()) {
-            if (j instanceof Service) servCounter++;
+            if (j instanceof Service) {
+                servCounter++;
+            }
         }
         assertEquals(2, servCounter);
     }
@@ -230,7 +242,9 @@ public void whenReadingShipments_itReadsThemCorrectly() {
         VehicleRoutingProblem vrp = builder.build();
         int shipCounter = 0;
         for (Job j : vrp.getJobs().values()) {
-            if (j instanceof Shipment) shipCounter++;
+            if (j instanceof Shipment) {
+                shipCounter++;
+            }
         }
         assertEquals(2, shipCounter);
     }
@@ -612,15 +626,16 @@ public void testRead_ifReaderIsCalled_itReadsSuccessfullyV2() {
         assertEquals(1, solutions.get(0).getRoutes().size());
         List<TourActivity> activities = solutions.get(0).getRoutes().iterator().next().getTourActivities().getActivities();
         assertEquals(4, activities.size());
-        assertTrue(activities.get(0) instanceof PickupService);
-        assertTrue(activities.get(1) instanceof PickupService);
-        assertTrue(activities.get(2) instanceof PickupShipment);
-        assertTrue(activities.get(3) instanceof DeliverShipment);
+        assertTrue(activities.get(0) instanceof PickupServiceDEPRECATED);
+        assertTrue(activities.get(1) instanceof PickupServiceDEPRECATED);
+        assertTrue(activities.get(2) instanceof PickupShipmentDEPRECATED);
+        assertTrue(activities.get(3) instanceof DeliverShipmentDEPRECATED);
     }
 
     @Test
     public void testRead_ifReaderIsCalled_itReadsSuccessfully() {
-        new VrpXMLReader(VehicleRoutingProblem.Builder.newInstance(), new ArrayList<VehicleRoutingProblemSolution>()).read(getClass().getResourceAsStream("lui-shen-solution.xml"));
+        new VrpXMLReader(VehicleRoutingProblem.Builder.newInstance(), new ArrayList<VehicleRoutingProblemSolution>())
+                .read(getClass().getResourceAsStream("lui-shen-solution.xml"));
         assertTrue(true);
     }
 
diff --git a/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLWriterTest.java b/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLWriterTest.java
index e75e1ba82..e84dd5f57 100644
--- a/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLWriterTest.java
+++ b/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLWriterTest.java
@@ -104,8 +104,8 @@ public void whenWritingServices_itWritesThemCorrectly() {
         builder.addVehicle(v2);
 
 
-        Service s1 = Service.Builder.newInstance("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
-        Service s2 = Service.Builder.newInstance("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
+        Service s1 = new Service.Builder("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
+        Service s2 = new Service.Builder("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
 
         VehicleRoutingProblem vrp = builder.addJob(s1).addJob(s2).build();
         new VrpXMLWriter(vrp, null).write(infileName);
@@ -125,7 +125,7 @@ public void whenWritingServices_itWritesThemCorrectly() {
     @Test
     public void shouldWriteNameOfService() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
-        Service s1 = Service.Builder.newInstance("1").setName("cleaning").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
+        Service s1 = new Service.Builder("1").setName("cleaning").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
 
         VehicleRoutingProblem vrp = builder.addJob(s1).build();
         new VrpXMLWriter(vrp, null).write(infileName);
@@ -160,11 +160,11 @@ public void shouldWriteNameOfShipment() {
     public void whenWritingServicesWithSeveralCapacityDimensions_itWritesThemCorrectly() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
 
-        Service s1 = Service.Builder.newInstance("1")
+        Service s1 = new Service.Builder("1")
             .addSizeDimension(0, 20)
             .addSizeDimension(1, 200)
             .setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
-        Service s2 = Service.Builder.newInstance("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
+        Service s2 = new Service.Builder("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
 
         VehicleRoutingProblem vrp = builder.addJob(s1).addJob(s2).build();
         new VrpXMLWriter(vrp, null).write(infileName);
@@ -624,8 +624,8 @@ public void whenWritingVehicleV1_itsStartLocationMustBeWrittenCorrectly() {
         builder.addVehicle(v1);
         builder.addVehicle(v2);
 
-        Service s1 = Service.Builder.newInstance("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
-        Service s2 = Service.Builder.newInstance("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
+        Service s1 = new Service.Builder("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
+        Service s2 = new Service.Builder("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
 
         VehicleRoutingProblem vrp = builder.addJob(s1).addJob(s2).build();
         new VrpXMLWriter(vrp, null).write(infileName);
@@ -644,7 +644,7 @@ public void whenWritingVehicleV1_itsStartLocationMustBeWrittenCorrectly() {
     public void whenWritingService_itShouldHaveTheCorrectNuSkills() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
 
-        Service s = Service.Builder.newInstance("1").addRequiredSkill("sKill1").addRequiredSkill("skill2").addSizeDimension(0, 1)
+        Service s = new Service.Builder("1").addRequiredSkill("sKill1").addRequiredSkill("skill2").addSizeDimension(0, 1)
             .setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
 
         VehicleRoutingProblem vrp = builder.addJob(s).build();
@@ -661,7 +661,7 @@ public void whenWritingService_itShouldHaveTheCorrectNuSkills() {
     public void whenWritingService_itShouldContain_skill1() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
 
-        Service s = Service.Builder.newInstance("1").addRequiredSkill("sKill1").addRequiredSkill("skill2").addSizeDimension(0, 1)
+        Service s = new Service.Builder("1").addRequiredSkill("sKill1").addRequiredSkill("skill2").addSizeDimension(0, 1)
             .setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
 
         VehicleRoutingProblem vrp = builder.addJob(s).build();
@@ -678,7 +678,7 @@ public void whenWritingService_itShouldContain_skill1() {
     public void whenWritingService_itShouldContain_skill2() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
 
-        Service s = Service.Builder.newInstance("1").addRequiredSkill("sKill1").addRequiredSkill("skill2").addSizeDimension(0, 1)
+        Service s = new Service.Builder("1").addRequiredSkill("sKill1").addRequiredSkill("skill2").addSizeDimension(0, 1)
             .setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
 
         VehicleRoutingProblem vrp = builder.addJob(s).build();
@@ -704,8 +704,8 @@ public void whenWritingVehicleV1_itDoesNotReturnToDepotMustBeWrittenCorrectly()
         builder.addVehicle(v1);
         builder.addVehicle(v2);
 
-        Service s1 = Service.Builder.newInstance("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
-        Service s2 = Service.Builder.newInstance("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
+        Service s1 = new Service.Builder("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
+        Service s2 = new Service.Builder("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
 
         VehicleRoutingProblem vrp = builder.addJob(s1).addJob(s2).build();
         new VrpXMLWriter(vrp, null).write(infileName);
@@ -730,8 +730,8 @@ public void whenWritingVehicleV1_readingAgainAssignsCorrectType() {
         builder.addVehicle(v1);
         builder.addVehicle(v2);
 
-        Service s1 = Service.Builder.newInstance("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
-        Service s2 = Service.Builder.newInstance("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
+        Service s1 = new Service.Builder("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
+        Service s2 = new Service.Builder("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
 
         VehicleRoutingProblem vrp = builder.addJob(s1).addJob(s2).build();
         new VrpXMLWriter(vrp, null).write(infileName);
@@ -756,8 +756,8 @@ public void whenWritingVehicleV2_readingAgainAssignsCorrectType() {
         builder.addVehicle(v1);
         builder.addVehicle(v2);
 
-        Service s1 = Service.Builder.newInstance("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
-        Service s2 = Service.Builder.newInstance("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
+        Service s1 = new Service.Builder("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
+        Service s2 = new Service.Builder("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
 
         VehicleRoutingProblem vrp = builder.addJob(s1).addJob(s2).build();
         new VrpXMLWriter(vrp, null).write(infileName);
@@ -786,8 +786,8 @@ public void whenWritingVehicleV2_readingItsLocationsAgainReturnsCorrectLocations
         builder.addVehicle(v1);
         builder.addVehicle(v2);
 
-        Service s1 = Service.Builder.newInstance("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
-        Service s2 = Service.Builder.newInstance("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
+        Service s1 = new Service.Builder("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
+        Service s2 = new Service.Builder("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
 
         VehicleRoutingProblem vrp = builder.addJob(s1).addJob(s2).build();
         new VrpXMLWriter(vrp, null).write(infileName);
@@ -816,8 +816,8 @@ public void whenWritingVehicleV2_readingItsLocationsCoordsAgainReturnsCorrectLoc
         builder.addVehicle(v1);
         builder.addVehicle(v2);
 
-        Service s1 = Service.Builder.newInstance("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
-        Service s2 = Service.Builder.newInstance("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
+        Service s1 = new Service.Builder("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
+        Service s2 = new Service.Builder("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
 
         VehicleRoutingProblem vrp = builder.addJob(s1).addJob(s2).build();
         new VrpXMLWriter(vrp, null).write(infileName);
@@ -904,8 +904,8 @@ public void solutionWithoutUnassignedJobsShouldBeWrittenCorrectly() {
         VehicleImpl v1 = VehicleImpl.Builder.newInstance("v1").setStartLocation(TestUtils.loc("loc")).setType(type1).build();
         builder.addVehicle(v1);
 
-        Service s1 = Service.Builder.newInstance("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
-        Service s2 = Service.Builder.newInstance("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
+        Service s1 = new Service.Builder("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
+        Service s2 = new Service.Builder("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
 
         VehicleRoutingProblem vrp = builder.addJob(s1).addJob(s2).build();
 
@@ -935,8 +935,8 @@ public void solutionWithUnassignedJobsShouldBeWrittenCorrectly() {
         VehicleImpl v1 = VehicleImpl.Builder.newInstance("v1").setStartLocation(TestUtils.loc("loc")).setType(type1).build();
         builder.addVehicle(v1);
 
-        Service s1 = Service.Builder.newInstance("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
-        Service s2 = Service.Builder.newInstance("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
+        Service s1 = new Service.Builder("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
+        Service s2 = new Service.Builder("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
 
         VehicleRoutingProblem vrp = builder.addJob(s1).addJob(s2).build();
 
