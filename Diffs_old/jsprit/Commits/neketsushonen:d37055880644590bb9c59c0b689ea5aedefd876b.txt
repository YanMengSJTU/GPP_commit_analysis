diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/ManhattanCosts.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/ManhattanCosts.java
index 971821f89..cf7ec223d 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/ManhattanCosts.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/ManhattanCosts.java
@@ -42,6 +42,11 @@ public ManhattanCosts() {
 
     }
 
+    public ManhattanCosts(double speed) {
+        this.speed = speed;
+    }
+
+
     @Override
     public double getTransportCost(Location from, Location to, double time, Driver driver, Vehicle vehicle) {
         double distance;
diff --git a/jsprit-examples/.factorypath b/jsprit-examples/.factorypath
new file mode 100644
index 000000000..994ff3cdb
--- /dev/null
+++ b/jsprit-examples/.factorypath
@@ -0,0 +1,52 @@
+<factorypath>
+    <factorypathentry kind="VARJAR" id="M2_REPO/org/apache/commons/commons-math3/3.4/commons-math3-3.4.jar" enabled="true" runInBatchMode="false"/>
+    <factorypathentry kind="VARJAR" id="M2_REPO/org/slf4j/slf4j-api/1.7.21/slf4j-api-1.7.21.jar" enabled="true" runInBatchMode="false"/>
+    <factorypathentry kind="VARJAR" id="M2_REPO/junit/junit/4.12/junit-4.12.jar" enabled="true" runInBatchMode="false"/>
+    <factorypathentry kind="VARJAR" id="M2_REPO/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar" enabled="true" runInBatchMode="false"/>
+    <factorypathentry kind="VARJAR" id="M2_REPO/org/mockito/mockito-all/1.9.5/mockito-all-1.9.5.jar" enabled="true" runInBatchMode="false"/>
+    <factorypathentry kind="VARJAR" id="M2_REPO/org/jfree/jfreechart/1.0.19/jfreechart-1.0.19.jar" enabled="true" runInBatchMode="false"/>
+    <factorypathentry kind="VARJAR" id="M2_REPO/org/jfree/jcommon/1.0.23/jcommon-1.0.23.jar" enabled="true" runInBatchMode="false"/>
+    <factorypathentry kind="VARJAR" id="M2_REPO/org/graphstream/gs-core/1.3/gs-core-1.3.jar" enabled="true" runInBatchMode="false"/>
+    <factorypathentry kind="VARJAR" id="M2_REPO/org/graphstream/pherd/1.0/pherd-1.0.jar" enabled="true" runInBatchMode="false"/>
+    <factorypathentry kind="VARJAR" id="M2_REPO/org/graphstream/mbox2/1.0/mbox2-1.0.jar" enabled="true" runInBatchMode="false"/>
+    <factorypathentry kind="VARJAR" id="M2_REPO/org/graphstream/gs-ui/1.3/gs-ui-1.3.jar" enabled="true" runInBatchMode="false"/>
+    <factorypathentry kind="VARJAR" id="M2_REPO/org/graphstream/gs-algo/1.3/gs-algo-1.3.jar" enabled="true" runInBatchMode="false"/>
+    <factorypathentry kind="VARJAR" id="M2_REPO/org/apache/commons/commons-math/2.1/commons-math-2.1.jar" enabled="true" runInBatchMode="false"/>
+    <factorypathentry kind="VARJAR" id="M2_REPO/org/scala-lang/scala-library/2.10.1/scala-library-2.10.1.jar" enabled="true" runInBatchMode="false"/>
+    <factorypathentry kind="VARJAR" id="M2_REPO/commons-configuration/commons-configuration/1.9/commons-configuration-1.9.jar" enabled="true" runInBatchMode="false"/>
+    <factorypathentry kind="VARJAR" id="M2_REPO/commons-lang/commons-lang/2.6/commons-lang-2.6.jar" enabled="true" runInBatchMode="false"/>
+    <factorypathentry kind="VARJAR" id="M2_REPO/commons-logging/commons-logging/1.1.1/commons-logging-1.1.1.jar" enabled="true" runInBatchMode="false"/>
+    <factorypathentry kind="VARJAR" id="M2_REPO/xerces/xercesImpl/2.11.0/xercesImpl-2.11.0.jar" enabled="true" runInBatchMode="false"/>
+    <factorypathentry kind="VARJAR" id="M2_REPO/xml-apis/xml-apis/1.4.01/xml-apis-1.4.01.jar" enabled="true" runInBatchMode="false"/>
+    <factorypathentry kind="VARJAR" id="M2_REPO/org/apache/logging/log4j/log4j-slf4j-impl/2.0.1/log4j-slf4j-impl-2.0.1.jar" enabled="true" runInBatchMode="false"/>
+    <factorypathentry kind="VARJAR" id="M2_REPO/org/apache/logging/log4j/log4j-api/2.0.1/log4j-api-2.0.1.jar" enabled="true" runInBatchMode="false"/>
+    <factorypathentry kind="VARJAR" id="M2_REPO/org/apache/logging/log4j/log4j-core/2.0.1/log4j-core-2.0.1.jar" enabled="true" runInBatchMode="false"/>
+    <factorypathentry kind="VARJAR" id="M2_REPO/org/apache/poi/poi-ooxml/4.0.0/poi-ooxml-4.0.0.jar" enabled="true" runInBatchMode="false"/>
+    <factorypathentry kind="VARJAR" id="M2_REPO/org/apache/poi/poi/4.0.0/poi-4.0.0.jar" enabled="true" runInBatchMode="false"/>
+    <factorypathentry kind="VARJAR" id="M2_REPO/commons-codec/commons-codec/1.10/commons-codec-1.10.jar" enabled="true" runInBatchMode="false"/>
+    <factorypathentry kind="VARJAR" id="M2_REPO/org/apache/commons/commons-collections4/4.2/commons-collections4-4.2.jar" enabled="true" runInBatchMode="false"/>
+    <factorypathentry kind="VARJAR" id="M2_REPO/org/apache/poi/poi-ooxml-schemas/4.0.0/poi-ooxml-schemas-4.0.0.jar" enabled="true" runInBatchMode="false"/>
+    <factorypathentry kind="VARJAR" id="M2_REPO/org/apache/xmlbeans/xmlbeans/3.0.1/xmlbeans-3.0.1.jar" enabled="true" runInBatchMode="false"/>
+    <factorypathentry kind="VARJAR" id="M2_REPO/org/apache/commons/commons-compress/1.18/commons-compress-1.18.jar" enabled="true" runInBatchMode="false"/>
+    <factorypathentry kind="VARJAR" id="M2_REPO/com/github/virtuald/curvesapi/1.04/curvesapi-1.04.jar" enabled="true" runInBatchMode="false"/>
+    <factorypathentry kind="VARJAR" id="M2_REPO/org/jgrapht/jgrapht-core/1.3.0/jgrapht-core-1.3.0.jar" enabled="true" runInBatchMode="false"/>
+    <factorypathentry kind="VARJAR" id="M2_REPO/org/jheaps/jheaps/0.9/jheaps-0.9.jar" enabled="true" runInBatchMode="false"/>
+    <factorypathentry kind="VARJAR" id="M2_REPO/cl/adevcom-java-routing/1.0-SNAPSHOT/adevcom-java-routing-1.0-SNAPSHOT.jar" enabled="true" runInBatchMode="false"/>
+    <factorypathentry kind="VARJAR" id="M2_REPO/log4j/log4j/1.2.17/log4j-1.2.17.jar" enabled="true" runInBatchMode="false"/>
+    <factorypathentry kind="VARJAR" id="M2_REPO/net/sourceforge/jswarm_pso/jswarm_pso/2.08/jswarm_pso-2.08.jar" enabled="true" runInBatchMode="false"/>
+    <factorypathentry kind="VARJAR" id="M2_REPO/colt/colt/1.2.0/colt-1.2.0.jar" enabled="true" runInBatchMode="false"/>
+    <factorypathentry kind="VARJAR" id="M2_REPO/concurrent/concurrent/1.3.4/concurrent-1.3.4.jar" enabled="true" runInBatchMode="false"/>
+    <factorypathentry kind="VARJAR" id="M2_REPO/cl/adevcom-java-vo/1.0-SNAPSHOT/adevcom-java-vo-1.0-SNAPSHOT.jar" enabled="true" runInBatchMode="false"/>
+    <factorypathentry kind="VARJAR" id="M2_REPO/jasperreports/jasperreports/3.5.3/jasperreports-3.5.3.jar" enabled="true" runInBatchMode="false"/>
+    <factorypathentry kind="VARJAR" id="M2_REPO/commons-beanutils/commons-beanutils/1.8.0/commons-beanutils-1.8.0.jar" enabled="true" runInBatchMode="false"/>
+    <factorypathentry kind="VARJAR" id="M2_REPO/commons-collections/commons-collections/2.1/commons-collections-2.1.jar" enabled="true" runInBatchMode="false"/>
+    <factorypathentry kind="VARJAR" id="M2_REPO/commons-digester/commons-digester/1.7/commons-digester-1.7.jar" enabled="true" runInBatchMode="false"/>
+    <factorypathentry kind="VARJAR" id="M2_REPO/com/lowagie/itext/2.1.0/itext-2.1.0.jar" enabled="true" runInBatchMode="false"/>
+    <factorypathentry kind="VARJAR" id="M2_REPO/bouncycastle/bcmail-jdk14/136/bcmail-jdk14-136.jar" enabled="true" runInBatchMode="false"/>
+    <factorypathentry kind="VARJAR" id="M2_REPO/bouncycastle/bcprov-jdk14/136/bcprov-jdk14-136.jar" enabled="true" runInBatchMode="false"/>
+    <factorypathentry kind="VARJAR" id="M2_REPO/jfree/jcommon/1.0.15/jcommon-1.0.15.jar" enabled="true" runInBatchMode="false"/>
+    <factorypathentry kind="VARJAR" id="M2_REPO/jfree/jfreechart/1.0.12/jfreechart-1.0.12.jar" enabled="true" runInBatchMode="false"/>
+    <factorypathentry kind="VARJAR" id="M2_REPO/eclipse/jdtcore/3.1.0/jdtcore-3.1.0.jar" enabled="true" runInBatchMode="false"/>
+    <factorypathentry kind="VARJAR" id="M2_REPO/postgresql/postgresql/8.4-702.jdbc4/postgresql-8.4-702.jdbc4.jar" enabled="true" runInBatchMode="false"/>
+    <factorypathentry kind="PLUGIN" id="org.eclipse.jst.ws.annotations.core" enabled="true" runInBatchMode="false"/>
+</factorypath>
diff --git a/jsprit-examples/pom.xml b/jsprit-examples/pom.xml
index 3d749cedf..3286b538a 100644
--- a/jsprit-examples/pom.xml
+++ b/jsprit-examples/pom.xml
@@ -74,6 +74,25 @@
 			<artifactId>jgrapht-core</artifactId>
 			<version>1.3.0</version>
 		</dependency>
+
+        <dependency>
+			<groupId>cl</groupId>
+			<artifactId>adevcom-java-routing</artifactId>
+			<version>1.0-SNAPSHOT</version>
+		</dependency>
+        
+		<dependency>
+			<groupId>cl</groupId>
+			<artifactId>adevcom-java-vo</artifactId>
+			<version>1.0-SNAPSHOT</version>
+		</dependency>
+
+        <dependency>
+			<groupId>postgresql</groupId>
+			<artifactId>postgresql</artifactId>
+			<version>8.4-702.jdbc4</version>
+		</dependency>
+
     </dependencies>
 
 </project>
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/BicycleMessenger.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/BicycleMessenger.java
index 2f61d78aa..d2fa55eb6 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/BicycleMessenger.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/BicycleMessenger.java
@@ -52,7 +52,7 @@
 import com.graphhopper.jsprit.core.util.Coordinate;
 import com.graphhopper.jsprit.core.util.CrowFlyCosts;
 import com.graphhopper.jsprit.core.util.Solutions;
-import com.graphhopper.jsprit.util.Examples;
+import com.graphhopper.jsprit.examples.*;
 
 import java.io.BufferedReader;
 import java.io.File;
@@ -232,7 +232,13 @@ public void finish() {
      * @throws IOException
      */
     public static void main(String[] args) throws IOException {
-        Examples.createOutputFolder();
+        File dir = new File("output");
+        // if the directory does not exist, create it
+        if (!dir.exists()) {
+            System.out.println("creating directory ./output");
+            boolean result = dir.mkdir();
+            if (result) System.out.println("./output created");
+        }
 
 		/*
         build the problem
@@ -356,7 +362,7 @@ static double getTimeOfDirectRoute(Job job, Vehicle v, VehicleRoutingTransportCo
     }
 
     private static void readEnvelopes(Builder problemBuilder) throws IOException {
-        BufferedReader reader = new BufferedReader(new FileReader(new File("input/bicycle_messenger_demand.txt")));
+        BufferedReader reader = new BufferedReader(new FileReader(new File("/Users/chunhaulai/Documents/workspace-vrp/jsprit/jsprit-examples/input/bicycle_messenger_demand.txt")));
         String line;
         boolean firstLine = true;
         while ((line = reader.readLine()) != null) {
@@ -375,7 +381,7 @@ private static void readEnvelopes(Builder problemBuilder) throws IOException {
     }
 
     private static void readMessengers(Builder problemBuilder) throws IOException {
-        BufferedReader reader = new BufferedReader(new FileReader(new File("input/bicycle_messenger_supply.txt")));
+        BufferedReader reader = new BufferedReader(new FileReader(new File("/Users/chunhaulai/Documents/workspace-vrp/jsprit/jsprit-examples/input/bicycle_messenger_supply.txt")));
         String line;
         boolean firstLine = true;
         VehicleType messengerType = VehicleTypeImpl.Builder.newInstance("messengerType").addCapacityDimension(0, 15).setCostPerDistance(1).build();
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EbackRouting.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EbackRouting.java
new file mode 100644
index 000000000..3052a94ed
--- /dev/null
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EbackRouting.java
@@ -0,0 +1,213 @@
+
+package com.graphhopper.jsprit.examples;
+
+import  com.graphhopper.jsprit.core.problem.solution.route.activity.*;
+import com.graphhopper.jsprit.analysis.toolbox.GraphStreamViewer;
+import com.graphhopper.jsprit.analysis.toolbox.GraphStreamViewer.Label;
+import com.graphhopper.jsprit.analysis.toolbox.Plotter;
+import com.graphhopper.jsprit.core.algorithm.VehicleRoutingAlgorithm;
+import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
+import com.graphhopper.jsprit.core.algorithm.state.StateManager;
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
+import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
+import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
+import com.graphhopper.jsprit.core.problem.constraint.ServiceDeliveriesFirstConstraint;
+import com.graphhopper.jsprit.core.problem.job.Delivery;
+import com.graphhopper.jsprit.core.problem.job.Pickup;
+import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
+import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl.Builder;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
+import com.graphhopper.jsprit.core.reporting.SolutionPrinter;
+import com.graphhopper.jsprit.core.util.Coordinate;
+import com.graphhopper.jsprit.core.util.ManhattanCosts;
+import com.graphhopper.jsprit.core.util.Solutions;
+import com.graphhopper.jsprit.io.problem.VrpXMLWriter;
+import com.graphhopper.jsprit.util.Examples;
+import com.graphhopper.jsprit.util.MetroCosts;
+import com.graphhopper.jsprit.util.ServiceCostDeliveryAsociatePickupConstraint;
+import com.graphhopper.jsprit.util.ServiceDeliveryAsociatePickupConstraint;
+
+import java.util.Arrays;
+import java.util.Collection;
+
+
+import java.io.BufferedReader;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.io.PrintWriter;
+import java.sql.Connection;
+import java.sql.DriverManager;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.sql.Statement;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import org.apache.poi.hssf.usermodel.HSSFWorkbook;
+import org.apache.poi.ss.usermodel.Row;
+import org.apache.poi.ss.usermodel.Sheet;
+import org.apache.poi.ss.usermodel.Workbook;
+import org.apache.poi.xssf.usermodel.XSSFWorkbook;
+import org.jgrapht.alg.shortestpath.DijkstraShortestPath;
+import org.jgrapht.graph.DefaultWeightedEdge;
+import org.jgrapht.graph.DirectedWeightedMultigraph;
+
+import cl.lai.routing.helper.EuclieanVertexGeograficFactory;
+import cl.lai.routing.kmeans.KMean;
+import cl.lai.routing.vo.Cluster;
+import cl.lai.routing.vo.DataPoint;
+
+
+public class EbackRouting {
+
+    public static Statement getStatementP() throws SQLException{
+        Connection c=null;
+               try {
+                  Class.forName("org.postgresql.Driver");
+                } catch (ClassNotFoundException cnfe) {
+                  System.err.println("Couldn't find driver class:");
+                  cnfe.printStackTrace();
+                }
+                try {
+                    c = DriverManager.getConnection("jdbc:postgresql://localhost:5432/ucn", "chunhaulai", "");
+                } catch (SQLException se) {
+                    System.out.println("Couldn't connect: print out a stack trace and exit.");
+                    se.printStackTrace();
+                    System.exit(1);
+                }
+                  Statement s = null;
+                  try {
+                    s = c.createStatement();
+                  } catch (SQLException se) {
+                    System.out.println("We got an exception while creating a statement:" +
+                                       "that probably means we're no longer connected.");
+                    se.printStackTrace();
+                    System.exit(1);
+                  }
+
+                  return s;
+    }
+    
+
+    public static void main( String[] args ) throws FileNotFoundException, IOException, SQLException {
+        Statement s = getStatementP();
+
+        Workbook workbook = new XSSFWorkbook(new FileInputStream(new File("/Users/chunhaulai/Google Drive/dropbox/adevcom/Ebacker/filetest.xlsx")));
+       
+        EuclieanVertexGeograficFactory factory = new EuclieanVertexGeograficFactory();
+        List<DataPoint> cities = new ArrayList<DataPoint>();
+        Sheet s1 = workbook.getSheetAt(0);
+        int r = 0;
+        for (Row row : s1) {
+            if(r++!=0 && row.getCell(0)!=null){
+                String sqlFormat = String.format("select st_x(geom) as x,st_y(geom) as y from st_transform( ST_GeomFromText('POINT(%s %s)',4326),32718) as geom",String.valueOf(row.getCell(5).getNumericCellValue()),String.valueOf(row.getCell(4).getNumericCellValue()));
+                ResultSet rs = s.executeQuery(sqlFormat);
+                if(rs.next()){
+                    DataPoint punto = new DataPoint(factory,rs.getDouble("x"),rs.getDouble("y"));
+                    punto.setObjName(String.valueOf(row.getCell(0).getNumericCellValue()));
+                    cities.add(punto);
+                }
+            }
+        }
+        List<Cluster> G = null;
+        int k = 2;
+        boolean todoCalza = false;
+        while(todoCalza==false ){
+            KMean kmean = new KMean(k, 2000, cities, factory);
+            kmean.startAnalysis();
+            
+            G = new ArrayList<Cluster>(Arrays.asList(kmean.getClusters()));
+           // Collections.sort(G, new SortByElementsSize());
+            todoCalza = true;
+            for(Cluster c: G){
+                for(DataPoint p: c.getDataPoints()){
+                    if(c.getCentroid().calcDistance(p)>2000){
+                        todoCalza = false;
+                        break;
+                    } 
+                }
+            }
+
+            if(todoCalza==false) k++;
+        }
+
+        for(Cluster c: G){
+            System.out.println("Cluster: "+c.getName());
+            for(DataPoint p: c.getDataPoints()){
+                System.out.println("\t"+p.getObjName()+"::"+c.getCentroid().calcDistance(p));
+                
+            }
+        }
+        workbook.close();
+
+
+        final int WEIGHT_INDEX = 0;
+
+        VehicleTypeImpl.Builder vehicleTypeBuilder = VehicleTypeImpl.Builder.newInstance("vehicleType").addCapacityDimension(0,300);
+        vehicleTypeBuilder.setCostPerDistance(1.0);
+        VehicleType vehicleType = vehicleTypeBuilder.build();
+
+        Builder vehicleBuilder1 = VehicleImpl.Builder.newInstance("B.M.1");
+        vehicleBuilder1.setStartLocation(loc(Coordinate.newInstance(915695, 6296635))).setReturnToDepot(true);
+        vehicleBuilder1.setType(vehicleType);
+        VehicleImpl vehicle1 = vehicleBuilder1.build();
+
+        Builder vehicleBuilder2 = VehicleImpl.Builder.newInstance("B.M.2");
+        vehicleBuilder2.setStartLocation(loc(Coordinate.newInstance(915695, 6296635))).setReturnToDepot(true);
+        vehicleBuilder2.setType(vehicleType);
+        VehicleImpl vehicle2 = vehicleBuilder2.build();
+
+
+        VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
+        vrpBuilder.addVehicle(vehicle1).addVehicle(vehicle2);
+        
+
+        for(Cluster c: G){
+            Service service = Service.Builder.newInstance(c.getName())
+            .addTimeWindow(0,120)
+            .setServiceTime(10)
+            .addSizeDimension(WEIGHT_INDEX, c.getNumDataPoints()).setLocation(Location.newInstance(c.getCentroid().getX(),c.getCentroid().getY())).build();
+           
+            vrpBuilder.addJob(service);
+        }
+        //833 = 50 km/h	= 833.3333333333 m/min
+        vrpBuilder.setRoutingCost(new ManhattanCosts(833));
+
+        vrpBuilder.setFleetSize(VehicleRoutingProblem.FleetSize.FINITE);
+
+        VehicleRoutingProblem problem = vrpBuilder.build();
+        
+        VehicleRoutingAlgorithm algorithm = Jsprit.createAlgorithm(problem);
+
+		 
+        Collection<VehicleRoutingProblemSolution> solutions = algorithm.searchSolutions();
+
+	 
+        VehicleRoutingProblemSolution bestSolution = Solutions.bestOf(solutions);
+
+        SolutionPrinter.print(problem, bestSolution, SolutionPrinter.Print.VERBOSE);
+
+       new GraphStreamViewer(problem, bestSolution).labelWith(Label.ID).setRenderDelay(200).display();
+
+       
+
+    }
+
+    private static Location loc(Coordinate coordinate) {
+        return Location.Builder.newInstance().setCoordinate(coordinate).build();
+    }
+
+
+}
+
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EnRouteSpeedyman.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EnRoute.java
similarity index 64%
rename from jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EnRouteSpeedyman.java
rename to jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EnRoute.java
index 9679dff3c..944ef49dd 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EnRouteSpeedyman.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EnRoute.java
@@ -1,19 +1,23 @@
 
 package com.graphhopper.jsprit.examples;
 
-import  com.graphhopper.jsprit.core.problem.solution.route.activity.*;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.*;
 import com.graphhopper.jsprit.analysis.toolbox.GraphStreamViewer;
 import com.graphhopper.jsprit.analysis.toolbox.GraphStreamViewer.Label;
 import com.graphhopper.jsprit.analysis.toolbox.Plotter;
 import com.graphhopper.jsprit.core.algorithm.VehicleRoutingAlgorithm;
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
+import com.graphhopper.jsprit.core.algorithm.ruin.listener.RuinListener;
+import com.graphhopper.jsprit.core.algorithm.state.StateId;
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
 import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
 import com.graphhopper.jsprit.core.problem.constraint.ServiceDeliveriesFirstConstraint;
+import com.graphhopper.jsprit.core.problem.constraint.HardActivityConstraint.ConstraintsStatus;
 import com.graphhopper.jsprit.core.problem.job.Delivery;
+import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.job.Pickup;
 import com.graphhopper.jsprit.core.problem.job.Service;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
@@ -26,10 +30,13 @@
 import com.graphhopper.jsprit.core.reporting.SolutionPrinter;
 import com.graphhopper.jsprit.core.util.Coordinate;
 import com.graphhopper.jsprit.core.util.Solutions;
+import com.graphhopper.jsprit.examples.state.PedidoStatusUpdater;
 import com.graphhopper.jsprit.io.problem.VrpXMLWriter;
 import com.graphhopper.jsprit.util.Examples;
 import com.graphhopper.jsprit.util.MetroCosts;
-import com.graphhopper.jsprit.util.SericePickuptFirstConstraing;
+import com.graphhopper.jsprit.util.ServiceCostDeliveryAsociatePickupConstraint;
+import com.graphhopper.jsprit.util.ServiceDeliveryAsociatePickupConstraint;
+import com.graphhopper.jsprit.util.ServicePickupFirstConstrain;
 
 import java.util.Arrays;
 import java.util.Collection;
@@ -57,10 +64,11 @@
 import org.jgrapht.graph.DirectedWeightedMultigraph;
 
 
-public class EnRouteSpeedyman {
+public class EnRoute {
 
-    public static void main(String[] args) throws IOException {
+    
 
+    public static void main(String[] args) throws IOException {
         DirectedWeightedMultigraph<Integer, DefaultWeightedEdge> g = new DirectedWeightedMultigraph<Integer, DefaultWeightedEdge>(DefaultWeightedEdge.class);
 		Map<String,Integer> nodeMaps = new HashMap<String,Integer>();
 		Map<Integer, String> estacionmaps = new HashMap<Integer, String>();
@@ -126,6 +134,8 @@ public static void main(String[] args) throws IOException {
         writer.close();
         final int WEIGHT_INDEX = 0;
         Map<Integer,List<Service>> pedidos = new HashMap<Integer,List<Service>>();
+        Map<Integer,StateId> pedidosEstado = new HashMap<Integer,StateId>();
+
         Map<Integer,Location> locations = new HashMap<Integer,Location>();
         Map<String,Coordinate> estacionCoordenada = new HashMap<String,Coordinate>();
 
@@ -147,6 +157,7 @@ public static void main(String[] args) throws IOException {
 			fila++;
 		}
          
+
         //pedidos
 		sheet = workbook.getSheetAt(1);
 		fila = 0;
@@ -158,7 +169,8 @@ public static void main(String[] args) throws IOException {
                 int amount = (int)row.getCell(3).getNumericCellValue();
 				if(nodeMaps.containsKey(estacion)){
 					if(!pedidos.containsKey(orderId)){
-						pedidos.put(orderId,  new ArrayList<Service>());
+                        pedidos.put(orderId,  new ArrayList<Service>());
+                        
 					}
                     //pedidos.get(orderId).add(estacion);
                     
@@ -168,7 +180,7 @@ public static void main(String[] args) throws IOException {
                     locx.setCoordinate(estacionCoordenada.get(estacion));
                     if(!locations.containsKey(orderId)){
                         locations.put(orderId, locx.build());
-                        Pickup pickup1 = Pickup.Builder.newInstance(String.valueOf(orderId)).addSizeDimension(WEIGHT_INDEX, 1).setLocation(locx.build()).build();
+                        Pickup pickup1 = Pickup.Builder.newInstance(String.valueOf(orderId)).addSizeDimension(WEIGHT_INDEX, amount).setLocation(locx.build()).build();
                         
                         pedidos.get(orderId).add(pickup1);
                         
@@ -208,7 +220,7 @@ public static void main(String[] args) throws IOException {
 		/*
          * get a vehicle type-builder and build a type with the typeId "vehicleType" and a capacity of 2
 		 */
-        VehicleTypeImpl.Builder vehicleTypeBuilder = VehicleTypeImpl.Builder.newInstance("vehicleType").addCapacityDimension(0,11);
+        VehicleTypeImpl.Builder vehicleTypeBuilder = VehicleTypeImpl.Builder.newInstance("vehicleType").addCapacityDimension(0,13);
         vehicleTypeBuilder.setCostPerDistance(1.0);
         VehicleType vehicleType = vehicleTypeBuilder.build();
 
@@ -223,6 +235,7 @@ public static void main(String[] args) throws IOException {
          Builder vehicleBuilder1 = VehicleImpl.Builder.newInstance("La Cisterna@[-3,-12]");
         vehicleBuilder1.setStartLocation(Location.Builder.newInstance().setId(String.valueOf(nodeMaps.get("La Cisterna"))).setCoordinate(estacionCoordenada.get("La Cisterna")).build()).setReturnToDepot(false);
         vehicleBuilder1.setType(vehicleType);
+        
         VehicleImpl vehicle1 = vehicleBuilder1.build();
 
         Builder vehicleBuilder2 = VehicleImpl.Builder.newInstance("Pudahuel@[-14,1]");
@@ -245,64 +258,166 @@ public static void main(String[] args) throws IOException {
         vehicleBuilder5.setType(vehicleType);
         VehicleImpl vehicle5 = vehicleBuilder5.build();
 
-
+        
          
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
-        vrpBuilder.addVehicle(vehicle1);//.addVehicle(vehicle2).addVehicle(vehicle3).addVehicle(vehicle4).addVehicle(vehicle5);
+        vrpBuilder.addVehicle(vehicle1).addVehicle(vehicle2).addVehicle(vehicle3).addVehicle(vehicle4).addVehicle(vehicle5);
         vrpBuilder.setRoutingCost(new MetroCosts(g));
 
-        
         for(Map.Entry<Integer, List<Service>> entry:pedidos.entrySet()){
-            for(Service s: entry.getValue()){
-                    vrpBuilder.addJob(s);
-            }
-            break;
-        }
+            if(entry.getKey()==1 || entry.getKey()==19|| entry.getKey()==8) 
+	           	for(Service s: entry.getValue()){
+	                   vrpBuilder.addJob(s);
+	
+	           	}  
+       }
+       
 
-        /*
-        vrpBuilder.addJob(shipment1).addJob(shipment2).addJob(shipment3).addJob(shipment4);
-        vrpBuilder.addJob(shipment5).addJob(shipment6).addJob(shipment7).addJob(shipment8);
-        vrpBuilder.addJob(shipment9).addJob(shipment10).addJob(shipment11).addJob(shipment12);
-        vrpBuilder.addJob(shipment13).addJob(shipment14).addJob(shipment15).addJob(shipment16);
-        */
 
         vrpBuilder.setFleetSize(FleetSize.FINITE);
         VehicleRoutingProblem problem = vrpBuilder.build();
 
 
         StateManager stateManager = new StateManager(problem);
+
+        for(Map.Entry<Integer, List<Service>> entry:pedidos.entrySet()){
+            StateId state = stateManager.createStateId(String.valueOf(entry.getKey()));      
+            pedidosEstado.put(entry.getKey(), stateManager.createStateId(String.valueOf(entry.getKey())));
+           
+                
+        }
+        stateManager.addStateUpdater(new PedidoStatusUpdater(stateManager, pedidosEstado ));
+
         ConstraintManager constraintManager = new ConstraintManager(problem, stateManager);
-        constraintManager.addConstraint(new SericePickuptFirstConstraing(), ConstraintManager.Priority.CRITICAL);
+        constraintManager.addConstraint(new ServicePickupFirstConstrain(stateManager, pedidosEstado,pedidos),  ConstraintManager.Priority.CRITICAL);
+        constraintManager.addConstraint(new ServiceDeliveryAsociatePickupConstraint(stateManager, pedidosEstado));
+       // constraintManager.addConstraint(new ServiceCostDeliveryAsociatePickupConstraint());
+
+        
+
+        VehicleRoutingAlgorithm algorithm = Jsprit.Builder.newInstance(problem).setStateAndConstraintManager(stateManager,constraintManager).setProperty(Jsprit.Strategy.WORST_REGRET, "0.")
+                .setProperty(Jsprit.Strategy.WORST_BEST, "0.").buildAlgorithm();
+        
+        algorithm.addListener(new RuinListener() {
+			
+		  
+            @Override
+            public void ruinStarts(Collection<VehicleRoute> routes) {
 
-        VehicleRoutingAlgorithm algorithm = Jsprit.Builder.newInstance(problem).setStateAndConstraintManager(stateManager,constraintManager).buildAlgorithm();
+            }
 
-//		algorithm.setMaxIterations(30000);
+            @Override
+            public void ruinEnds(Collection<VehicleRoute> routes, Collection<Job> unassignedJobs) {
+                Map<TourActivity, VehicleRoute> toDeleteActRouteMap = new HashMap<>();
+                for(VehicleRoute route : routes){
+                    List<String> orderIds = new ArrayList<String>();
+
+                	for(TourActivity act: route.getActivities()){
+                        if(act instanceof Start || act instanceof End ){
+                            continue;
+                        }else{
+
+                            if(act instanceof PickupService){
+                                Pickup sgg = (Pickup) ((PickupService)act).getJob();
+                                orderIds.add(sgg.getId());
+                            }
+                            
+                            if(act instanceof DeliverService){
+                            	Delivery sgg = (Delivery) ((DeliverService)act).getJob();
+                            	System.out.println(sgg.getId()+":::"+orderIds);
+                            	if(!orderIds.contains(sgg.getId().split("::")[0])) {
+                            		System.out.println("me agregue");
+                            		toDeleteActRouteMap.put(act, route);
+                            	}    
+                            		
+                                
+                            }
+                        
+                        }
+                      }     
+                	
+                   
+                }
+                for (Map.Entry<TourActivity, VehicleRoute> entry : toDeleteActRouteMap.entrySet()) {
+                    TourActivity act = entry.getKey();
+                    VehicleRoute route = entry.getValue();
+                    if (act instanceof TourActivity.JobActivity) {
+                        Job job = ((TourActivity.JobActivity) act).getJob();
+                        boolean removed = route.getTourActivities().removeJob(job);
+                        if(removed) {
+                        	System.out.println("eliminado..."+job.getId());
+                            unassignedJobs.add(job);
+                        }
+                    }
+                }
+            }
+
+            @Override
+            public void removed(Job job, VehicleRoute vehicleRoute) {
+
+            }
+        });
+        
+        
+        algorithm.setMaxIterations(20);
+		 
         /*
          * and search a solution
 		 */
         Collection<VehicleRoutingProblemSolution> solutions = algorithm.searchSolutions();
 
+        
+        
+        /*
         VehicleRoutingProblemSolution s = Solutions.bestOf(solutions);
         for(VehicleRoute route: s.getRoutes()){
-           for(TourActivity ac: route.getActivities()){
-            if(ac instanceof PickupService){
-                Pickup xs = (Pickup) ((PickupService)ac).getJob();
-                System.out.println(xs.getId()+"->"+estacionmaps.get(Integer.parseInt(xs.getLocation().getId())));
-            }else if(ac instanceof DeliverService){
-  
-                Delivery xs = (Delivery) ((DeliverService)ac).getJob();
-                System.out.println(xs.getId()+"->"+estacionmaps.get(Integer.parseInt(xs.getLocation().getId())));
+                System.out.println(route.getVehicle().getId());
+                List<String> orderIds = new ArrayList<String>();
                
-            }
-           }
+    
+                for(TourActivity ac: route.getTourActivities().getActivities()){
+                    if(ac instanceof PickupService){
+                        Pickup sg = (Pickup) ((PickupService)ac).getJob();
+                        orderIds.add(sg.getId());
+                        System.out.println(sg.getId());
+
+                    }else if(ac instanceof DeliverService){  
+                        
+    
+                        Delivery sg = (Delivery) ((DeliverService)ac).getJob();
+                        System.out.println(sg.getId());
+
+                        boolean found = false;
+                        for(String oid : orderIds){
+                            if(sg.getId().contains(oid+"::")){
+                                found = true;
+                            }
+                            if(oid.equalsIgnoreCase("15") && sg.getId().equalsIgnoreCase("15::54")){
+                                System.out.println(found);
+                            }
+                            if(oid.equalsIgnoreCase("15") && sg.getId().equalsIgnoreCase("4::20")){
+                                System.out.println(found);
+                            }
+                             
+                            if(found) break;
+                        }
+                    }
+                      
+                    
+                }
             
         }
+        */
          
        
 
 		/*
 		 * print nRoutes and totalCosts of bestSolution
 		 */
+        for (VehicleRoutingProblemSolution s : solutions) {
+        	System.out.println("==============");
+        	SolutionPrinter.print(problem, s, SolutionPrinter.Print.VERBOSE);
+        }
         //SolutionPrinter.print(problem, Solutions.bestOf(solutions), SolutionPrinter.Print.VERBOSE);
        // new GraphStreamViewer(problem, Solutions.bestOf(solutions)).setRenderDelay(100).display();
     }
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/JobAndActivityDependenciesExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/JobAndActivityDependenciesExample.java
index 8fe754613..c9f978f38 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/JobAndActivityDependenciesExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/JobAndActivityDependenciesExample.java
@@ -80,6 +80,8 @@ public void begin(VehicleRoute route) {
         public void visit(TourActivity activity) {
             if (((TourActivity.JobActivity) activity).getJob().getName().equals("use key")) {
                 stateManager.putProblemState(keyUsedStateId, VehicleRoute.class, route);
+               // System.out.println(stateManager.hashCode() + " use key " + route.hashCode());
+          
             } else if (((TourActivity.JobActivity) activity).getJob().getName().equals("get key")) {
                 stateManager.putProblemState(keyPickedStateId, VehicleRoute.class, route);
             } else if (((TourActivity.JobActivity) activity).getJob().getName().equals("deliver key")) {
@@ -266,7 +268,7 @@ public static void main(String[] args) {
         constraintManager.addConstraint(new GetUseAndDeliverHardRouteContraint(stateManager, keyPicked, keyUsed, keyDelivered));
 
         VehicleRoutingAlgorithm vra = Jsprit.Builder.newInstance(vrp).setStateAndConstraintManager(stateManager,constraintManager).buildAlgorithm();
-        vra.setMaxIterations(100);
+        vra.setMaxIterations(5);
 
         Collection<VehicleRoutingProblemSolution> solutions = vra.searchSolutions();
 
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/ReadExcel.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/ReadExcel.java
new file mode 100644
index 000000000..bcb6488a6
--- /dev/null
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/ReadExcel.java
@@ -0,0 +1,98 @@
+
+package com.graphhopper.jsprit.examples;
+
+
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.io.PrintWriter;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
+import java.util.TreeMap;
+
+import org.apache.commons.lang.StringUtils;
+import org.apache.poi.ss.usermodel.Row;
+import org.apache.poi.ss.usermodel.Sheet;
+import org.apache.poi.ss.usermodel.Workbook;
+import org.apache.poi.xssf.usermodel.XSSFWorkbook;
+
+
+public class ReadExcel {
+
+    public static void main(String[] args) throws Exception {
+        Map<String,List<String> > frases = new TreeMap<String,List<String>>();
+ 			
+        Workbook workbook = null;
+        workbook = new XSSFWorkbook(new FileInputStream(new File("/Volumes/MAC2/道/翻譯/選字-2.xlsx")));
+        
+        for(Sheet sheet : workbook ){
+            int fila = 0;
+            for (Row row : sheet) {
+                if (fila != 0 && row.getCell(0)!=null && !StringUtils.isBlank(row.getCell(0).getStringCellValue())) {
+                    String word = StringUtils.trim(row.getCell(0).getStringCellValue()).replace("。", "").replace("*", "");
+                    if(!frases.containsKey(word))
+                        frases.put(word, new ArrayList<String>());
+                    int column = 1;
+                    while(row.getCell(column)!=null ){
+                        try{
+                            if(!StringUtils.isBlank(row.getCell(column).getStringCellValue())){
+                                String w = null;
+                                try{
+                                   w = StringUtils.trim(row.getCell(column++).getStringCellValue()).replaceAll("\n", "");
+        
+                                }catch(IllegalStateException e){
+                                    w = String.valueOf(row.getCell(column++).getNumericCellValue()).replaceAll("\n", "");
+        
+                                }
+                                
+                                if(!frases.get(word).contains(w))
+                                    frases.get(word).add(w);
+                            }
+                        }catch(Exception e){
+
+                        }
+                        
+                    }
+                }
+                fila++;
+            }
+        }
+        
+        workbook.close();
+
+        PrintWriter writer = new PrintWriter(new File("/tmp/word.csv"),"UTF-8");
+        writer.println("單字;");
+        for(Map.Entry<String,List<String>> entry:frases.entrySet()){
+            if(entry.getValue().size()>=3)
+                writer.print(entry.getKey()+";");
+            else writer.print("*"+entry.getKey()+";");
+           
+            for(String word: entry.getValue()){
+                writer.print(word+";");
+            }
+            writer.println();
+            writer.flush();
+        }
+        writer.close();
+        /*
+        workbook = new XSSFWorkbook(new FileInputStream(new File("/Volumes/MAC2/道/翻譯/選字-總合.xlsx")));
+        Sheet sheet = workbook.createSheet("總合");
+        Row row = sheet.createRow(0);
+        row.createCell(0).setCellValue("單字");
+        for(Map.Entry<String,List<String>> entry:frases.entrySet()){
+            int column = 0;
+            row.createCell(column++).setCellValue(entry.getKey());
+            for(String word: entry.getValue()){
+                row.createCell(column++).setCellValue(word);
+            }
+        }
+        workbook.close();
+        */
+
+    }
+
+
+}
+
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/state/PedidoStatusUpdater.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/state/PedidoStatusUpdater.java
new file mode 100644
index 000000000..18897001f
--- /dev/null
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/state/PedidoStatusUpdater.java
@@ -0,0 +1,63 @@
+package com.graphhopper.jsprit.examples.state;
+
+import com.graphhopper.jsprit.analysis.toolbox.GraphStreamViewer;
+import com.graphhopper.jsprit.core.algorithm.VehicleRoutingAlgorithm;
+import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
+import com.graphhopper.jsprit.core.algorithm.state.StateId;
+import com.graphhopper.jsprit.core.algorithm.state.StateManager;
+import com.graphhopper.jsprit.core.algorithm.state.StateUpdater;
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
+import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
+import com.graphhopper.jsprit.core.problem.constraint.HardActivityConstraint;
+import com.graphhopper.jsprit.core.problem.constraint.HardRouteConstraint;
+import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
+import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
+import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.ActivityVisitor;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
+import com.graphhopper.jsprit.core.reporting.SolutionPrinter;
+import com.graphhopper.jsprit.core.util.Solutions;
+
+import java.util.Collection;
+import java.util.List;
+import java.util.Map;
+
+public class PedidoStatusUpdater implements StateUpdater, ActivityVisitor {
+    
+    private StateManager stateManager;
+
+    private VehicleRoute route;
+
+    private Map<Integer,StateId> states;
+
+    public PedidoStatusUpdater(StateManager stateManager, Map<Integer,StateId> states){
+        this.stateManager = stateManager;
+        this.states = states;
+    }
+
+    public void begin(VehicleRoute route) {
+       this.route = route;
+    }
+
+    public void visit(TourActivity activity) {
+        try{
+        	
+            String orden = ((TourActivity.JobActivity) activity).getJob().getId();
+            int ordenMap = Integer.parseInt(orden);
+            stateManager.putProblemState(this.states.get(ordenMap), VehicleRoute.class, route);
+            //if(stateManager.getProblemState(this.states.get(ordenMap), VehicleRoute.class))
+        }catch(NumberFormatException e){
+        	
+        }
+
+    }
+
+    public void finish() {
+        
+
+    }
+
+}
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/util/MetroCosts.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/util/MetroCosts.java
index b0dfd1a6f..97e15016f 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/util/MetroCosts.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/util/MetroCosts.java
@@ -27,8 +27,6 @@
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.driver.Driver;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
-import com.graphhopper.jsprit.core.util.EuclideanCosts;
-import com.graphhopper.jsprit.core.util.Locations;
 
 import org.jgrapht.alg.shortestpath.DijkstraShortestPath;
 import org.jgrapht.graph.DefaultWeightedEdge;
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/util/SericePickuptFirstConstraing.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/util/SericePickuptFirstConstraing.java
deleted file mode 100644
index 897c68304..000000000
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/util/SericePickuptFirstConstraing.java
+++ /dev/null
@@ -1,104 +0,0 @@
-
-package com.graphhopper.jsprit.util;
-
-import java.util.HashSet;
-import java.util.Set;
-
-import com.graphhopper.jsprit.core.problem.constraint.HardActivityConstraint;
-import com.graphhopper.jsprit.core.problem.job.Delivery;
-import com.graphhopper.jsprit.core.problem.job.Pickup;
-import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
-import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.*;
-
-public class SericePickuptFirstConstraing implements HardActivityConstraint {
-
-    @Override
-    public ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prevAct, TourActivity newAct, TourActivity nextAct, double prevActDepTime) {
-        /*
-        VehicleRoute route = iFacts.getRoute();
-        Set<String> orderIds = new HashSet<String>();
-        for(TourActivity ac: route.getActivities()){
-            if(ac instanceof PickupService){
-                Pickup s = (Pickup) ((PickupService)ac).getJob();
-                orderIds.add(s.getId());
-                
-            }else if(ac instanceof DeliverService){
-                if(orderIds.isEmpty())  return ConstraintsStatus.NOT_FULFILLED;
- 
-                Delivery s = (Delivery) ((DeliverService)ac).getJob();
-               
-                
-                for(String ids: orderIds){
-                    if(!ids.contains(s.getId()+"::"))  
-                        return ConstraintsStatus.NOT_FULFILLED;
- 
-                }
-                
-            }else{
-               
-            }
-        }
-        return ConstraintsStatus.FULFILLED;
-        */
-
-        if (newAct instanceof DeliverService  && nextAct instanceof PickupService) {
-            return ConstraintsStatus.NOT_FULFILLED;
-        }
-        if (newAct instanceof ServiceActivity && nextAct instanceof PickupService) {
-            return ConstraintsStatus.NOT_FULFILLED;
-        }
-        if (newAct instanceof PickupService  && prevAct instanceof DeliverService) {
-            return ConstraintsStatus.NOT_FULFILLED_BREAK;
-        }
-        if (newAct instanceof PickupService && prevAct instanceof ServiceActivity) {
-            return ConstraintsStatus.NOT_FULFILLED_BREAK;
-        }
-
-        if (newAct instanceof PickupShipment  && prevAct instanceof DeliverService) {
-            return ConstraintsStatus.NOT_FULFILLED_BREAK;
-        }
-        if (newAct instanceof PickupService && prevAct instanceof PickupShipment) {
-            return ConstraintsStatus.NOT_FULFILLED_BREAK;
-        }
-        if (newAct instanceof DeliverShipment && nextAct instanceof PickupService) {
-            return ConstraintsStatus.NOT_FULFILLED;
-        }
-        if (newAct instanceof PickupShipment && nextAct instanceof PickupService) {
-            return ConstraintsStatus.NOT_FULFILLED;
-        }
- 
-        return ConstraintsStatus.FULFILLED;
-
-      /*
-        if (newAct instanceof  DeliverService && nextAct instanceof  PickupService) {
-            return ConstraintsStatus.NOT_FULFILLED;
-        }
-        if (newAct instanceof ServiceActivity && nextAct instanceof PickupService) {
-            return ConstraintsStatus.NOT_FULFILLED;
-        }
-        if (newAct instanceof PickupService && prevAct instanceof  DeliverService) {
-            return ConstraintsStatus.NOT_FULFILLED_BREAK;
-        }
-        if (newAct instanceof DeliverService && prevAct instanceof ServiceActivity) {
-            return ConstraintsStatus.NOT_FULFILLED_BREAK;
-        }
-
-        if (newAct instanceof DeliverService && prevAct instanceof PickupShipment) {
-            return ConstraintsStatus.NOT_FULFILLED_BREAK;
-        }
-        if (newAct instanceof DeliverService && prevAct instanceof DeliverShipment) {
-            return ConstraintsStatus.NOT_FULFILLED_BREAK;
-        }
-        if (newAct instanceof PickupShipment && nextAct instanceof DeliverService) {
-            return ConstraintsStatus.NOT_FULFILLED;
-        }
-        if (newAct instanceof DeliverShipment && nextAct instanceof DeliverService) {
-            return ConstraintsStatus.NOT_FULFILLED;
-        }
-
-        return ConstraintsStatus.FULFILLED;ç
-        */
-    }
-
-}
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/util/ServiceCostDeliveryAsociatePickupConstraint.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/util/ServiceCostDeliveryAsociatePickupConstraint.java
new file mode 100644
index 000000000..67fdd748b
--- /dev/null
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/util/ServiceCostDeliveryAsociatePickupConstraint.java
@@ -0,0 +1,47 @@
+
+package com.graphhopper.jsprit.util;
+
+import java.util.HashSet;
+import java.util.Set;
+
+import com.graphhopper.jsprit.core.problem.constraint.SoftRouteConstraint;
+import com.graphhopper.jsprit.core.problem.job.Delivery;
+import com.graphhopper.jsprit.core.problem.job.Pickup;
+import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
+import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.*;
+
+public class ServiceCostDeliveryAsociatePickupConstraint implements SoftRouteConstraint {
+
+   
+
+    @Override
+    public double getCosts(JobInsertionContext iFacts) {
+        VehicleRoute route = iFacts.getRoute();
+        Set<String> orderIds = new HashSet<String>();
+        for(TourActivity ac: route.getTourActivities().getActivities()){
+            
+            if(ac instanceof PickupService){
+                Pickup s = (Pickup) ((PickupService)ac).getJob();
+                orderIds.add(s.getId());
+                
+            }else if(ac instanceof DeliverService){
+                if(orderIds.isEmpty())  return Double.MAX_VALUE;
+ 
+                Delivery s = (Delivery) ((DeliverService)ac).getJob();
+               
+
+                for(String idOrder: orderIds){
+                    if(!s.getId().contains(idOrder+"::"))  
+                        return Double.MAX_VALUE;
+ 
+                }
+                
+            } 
+        }
+        return 0;
+    }
+
+     
+
+}
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/util/ServiceDeliveryAsociatePickupConstraint.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/util/ServiceDeliveryAsociatePickupConstraint.java
new file mode 100644
index 000000000..da490f135
--- /dev/null
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/util/ServiceDeliveryAsociatePickupConstraint.java
@@ -0,0 +1,130 @@
+
+package com.graphhopper.jsprit.util;
+
+import java.util.ArrayList;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+import com.graphhopper.jsprit.core.algorithm.state.StateId;
+import com.graphhopper.jsprit.core.algorithm.state.StateManager;
+import com.graphhopper.jsprit.core.problem.constraint.HardRouteConstraint;
+import com.graphhopper.jsprit.core.problem.job.Delivery;
+import com.graphhopper.jsprit.core.problem.job.Job;
+import com.graphhopper.jsprit.core.problem.job.Pickup;
+import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
+import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.*;
+
+public class ServiceDeliveryAsociatePickupConstraint implements HardRouteConstraint {
+    Map<Integer,List<Service>> pedidos ;
+
+    
+    StateManager stateManager;
+    
+    private Map<Integer,StateId> states;
+    
+    public ServiceDeliveryAsociatePickupConstraint( Map<Integer,List<Service>> pedidos){
+        this.pedidos = pedidos;
+    }
+    
+    public ServiceDeliveryAsociatePickupConstraint(StateManager stateManager,Map<Integer,StateId> states ){
+    	this.stateManager = stateManager;
+    	this.states = states;
+    	
+    }
+
+    @Override
+    public boolean fulfilled(JobInsertionContext iFacts) {
+    	 Job job = iFacts.getJob();
+    	 
+    	 
+    	 if (job instanceof Delivery) {
+    		 Delivery s = (Delivery) job;   
+    		 //System.out.println(s.getId()+" size "+ iFacts.getRoute().getActivities() .size());
+             String orderIdOriginal = s.getId().split("::")[0];
+             StateId sx = this.states.get(Integer.parseInt(orderIdOriginal));
+             VehicleRoute route = stateManager.getProblemState(sx, VehicleRoute.class);
+             if(route!=null && route != iFacts.getRoute())  return false;
+             else if(route==null) return false;
+            // System.out.println("size "+ iFacts.getAssociatedActivities().size()); 
+             if( iFacts.getRoute().getActivities().isEmpty()) return false;
+             
+             
+             
+             List<String> orderIds = new ArrayList<String>();
+             for(TourActivity ac:  iFacts.getRoute().getActivities()){
+                 if(ac instanceof PickupService){
+                     
+                     Pickup spick = (Pickup) ((PickupService)ac).getJob();
+                     orderIds.add(spick.getId());
+                    // System.out.println(orderIds);
+                 }else if(ac instanceof DeliverService){
+                     
+                      Delivery sdekivert = (Delivery) ((DeliverService)ac).getJob();       
+                     String orderIdOriginalsdekivert = sdekivert.getId().split("::")[0];
+                     return orderIds.contains(orderIdOriginalsdekivert);   
+                 } 
+             } 
+             
+    	 }else {
+    		 for(TourActivity ac:  iFacts.getRoute().getActivities()){
+                 if(ac instanceof PickupService){
+                     
+                     Pickup spick = (Pickup) ((PickupService)ac).getJob();
+                   
+                 }else if(ac instanceof DeliverService){
+                	 Delivery sdekivert = (Delivery) ((DeliverService)ac).getJob();       
+                	// System.out.println(sdekivert.getId());
+                	 
+                     
+                 } 
+             } 
+    		 
+    		 
+    	 }
+    	 return true;
+       
+    	
+    	 /*
+    	System.out.println(job.getId());
+    	 
+       
+      
+        if(iFacts.getAssociatedActivities() .isEmpty()){
+           
+            return (job instanceof Pickup) ; 
+        }else{
+            for(TourActivity ac: iFacts.getAssociatedActivities()){
+                if(ac instanceof PickupService){
+                    
+                    Pickup s = (Pickup) ((PickupService)ac).getJob();
+                    orderIds.add(s.getId());
+                }else if(ac instanceof DeliverService){
+                    
+                    if(orderIds.isEmpty()) return false;     
+                    Delivery s = (Delivery) ((DeliverService)ac).getJob();       
+                    String orderIdOriginal = s.getId().split("::")[0];
+                    return orderIds.contains(orderIdOriginal);   
+                } 
+            }
+
+        }
+
+        if((job instanceof Pickup))
+            return true;
+        else {
+            Delivery s = (Delivery) job;     
+            String orderIdOriginal = s.getId().split("::")[0];
+            return orderIds.contains(orderIdOriginal);   
+        }
+        
+        */
+        
+    }
+
+     
+
+}
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/util/ServicePickupFirstConstrain.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/util/ServicePickupFirstConstrain.java
new file mode 100644
index 000000000..e4e0d2681
--- /dev/null
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/util/ServicePickupFirstConstrain.java
@@ -0,0 +1,257 @@
+
+package com.graphhopper.jsprit.util;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.stream.Collectors;
+
+import com.graphhopper.jsprit.core.algorithm.state.StateId;
+import com.graphhopper.jsprit.core.algorithm.state.StateManager;
+import com.graphhopper.jsprit.core.problem.constraint.HardActivityConstraint;
+import com.graphhopper.jsprit.core.problem.job.Delivery;
+import com.graphhopper.jsprit.core.problem.job.Pickup;
+import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
+import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.*;
+
+public class ServicePickupFirstConstrain implements HardActivityConstraint {
+    Map<Integer,List<String>> pedidos  ;
+    
+    StateManager stateManager;
+    
+    private Map<Integer,StateId> states;
+    
+
+    public ServicePickupFirstConstrain(Map<Integer, List<Service>> pedidosOriginal) {
+        pedidos = new HashMap<Integer,List<String>>();
+        for(Map.Entry<Integer,List<Service>> entry: pedidosOriginal.entrySet()){
+           if(!pedidos.containsKey(entry.getKey()))
+                pedidos.put(entry.getKey(),new ArrayList<String>());
+            pedidos.get(entry.getKey()).addAll(entry.getValue().stream().map(f -> f.getId()).collect(Collectors.toList()));
+        }
+       // this.pedidos = pedidos.entrySet().stream().map(f-> f.get)
+    }
+
+    public ServicePickupFirstConstrain(){
+
+    }
+    
+    public ServicePickupFirstConstrain(StateManager stateManager,Map<Integer,StateId> states,Map<Integer, List<Service>> pedidosOriginal ){
+    	
+    	this( pedidosOriginal);
+    	this.stateManager = stateManager;
+    	this.states = states;
+    }
+
+    @Override
+    public ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prevAct, TourActivity newAct, TourActivity nextAct, double prevActDepTime) {
+        //System.out.println(newAct.getClass().getName()+"=>"+prevAct.getClass().getName());
+      
+        /*
+        List<String> orderIds = new ArrayList<String>();
+        List<TourActivity> activities = iFacts.getRoute().getActivities();
+        for(TourActivity act: activities){
+            if(act instanceof Start || act instanceof End ){
+                continue;
+            }else{
+                //System.out.println(act.getName()); 
+
+                if(act instanceof PickupService){
+                    Pickup s = (Pickup) ((PickupService)act).getJob();
+                   
+                    orderIds.add(s.getId());
+                }else if(act instanceof DeliverService){
+                   
+                    if(orderIds.isEmpty()) 
+                        return ConstraintsStatus.NOT_FULFILLED_BREAK;    
+                    Delivery s = (Delivery) ((DeliverService)act).getJob();  
+                    String orderIdOriginal = s.getId().split("::")[0];
+                   
+                    if(!orderIds.contains(orderIdOriginal))  return ConstraintsStatus.NOT_FULFILLED;
+                } 
+            }
+        }
+        */
+  
+        
+        if(prevAct instanceof Start && newAct instanceof  DeliverService){
+            return ConstraintsStatus.NOT_FULFILLED;
+        }
+        
+     
+        
+        if(newAct instanceof  DeliverService) {
+        	Delivery s = (Delivery) ((DeliverService)newAct).getJob();  
+        	String orderIdOriginal = s.getId().split("::")[0];
+            StateId sx = this.states.get(Integer.parseInt(orderIdOriginal));
+            VehicleRoute route = stateManager.getProblemState(sx, VehicleRoute.class);
+            if(route==null)  return ConstraintsStatus.NOT_FULFILLED;
+            else if(route != iFacts.getRoute()) return ConstraintsStatus.NOT_FULFILLED;
+            
+            List<String> orderIds = new ArrayList<String>();
+            List<TourActivity> activities = iFacts.getRoute().getActivities();
+            //System.out.println("========");
+            for(TourActivity act: activities){
+                if(act instanceof Start || act instanceof End ){
+                    continue;
+                }else{
+
+                    if(act instanceof PickupService){
+                        Pickup sgg = (Pickup) ((PickupService)act).getJob();
+                       
+                        orderIds.add(sgg.getId());
+                      
+                       // if(s.getId().equalsIgnoreCase("1"))
+                       // System.out.println(orderIds+":::"+sgg.getId());
+                        
+                    }
+                    
+                    if(act instanceof DeliverService){
+                    	Delivery sgg = (Delivery) ((DeliverService)act).getJob();
+                       
+                       
+                       if(!orderIds.contains(sgg.getId().split("::")[0]))  return ConstraintsStatus.NOT_FULFILLED;
+                     //   System.out.println(orderIds+"---"+sgg.getId());
+                        
+                    }
+                
+                }
+              }     
+          //  System.out.println("========");
+            // System.out.println(orderIdOriginal+"*****"+s.getId());
+             if(!orderIds.contains(orderIdOriginal))  return ConstraintsStatus.NOT_FULFILLED;
+             
+        }
+        
+        if(newAct instanceof  PickupService) {
+        	Pickup s = (Pickup) ((PickupService)newAct).getJob();  
+        	String orderIdOriginal = s.getId() ;
+        	
+        	int total = 0;
+        	List<TourActivity> activities = iFacts.getRoute().getActivities();
+            for(TourActivity act: activities){
+                if(act instanceof Start || act instanceof End ){
+                    continue;
+                }else{
+
+                    if(act instanceof PickupService){
+                        Pickup sxxx = (Pickup) ((PickupService)act).getJob();
+                        total += this.pedidos.get(Integer.parseInt(sxxx.getId())).size()-1;
+                    } 
+                }
+            }
+            
+           // System.out.println(iFacts.getNewVehicle().getType().getCapacityDimensions().get(0) + "::: "+(this.pedidos.get(Integer.parseInt(orderIdOriginal)).size()-1 +total) );
+            
+        	
+            if(iFacts.getNewVehicle().getType().getCapacityDimensions().get(0) < 
+            		this.pedidos.get(Integer.parseInt(orderIdOriginal)).size()-1 +total
+            		
+            		)return ConstraintsStatus.NOT_FULFILLED;
+            		
+        }
+        
+       
+        
+        if(nextAct instanceof End){
+        	 
+        	Map<String, Integer> total = new HashMap<String,Integer>();
+        	boolean existeDelivery=false;
+        	 List<String> orderIds = new ArrayList<String>();
+             List<TourActivity> activities = iFacts.getRoute().getActivities();
+             for(TourActivity act: activities){
+                 if(act instanceof Start || act instanceof End ){
+                     continue;
+                 }else{
+ 
+                     if(act instanceof PickupService){
+                         Pickup s = (Pickup) ((PickupService)act).getJob();
+                        
+                         orderIds.add(s.getId());
+                         total.put( s.getId(), 0);
+                        // if(s.getId().equalsIgnoreCase("1"))
+                         //System.out.println(s.getId());
+                         
+                     }else if(act instanceof DeliverService){
+                        
+                    	 existeDelivery = true;
+                         Delivery s = (Delivery) ((DeliverService)act).getJob();  
+                         String orderIdOriginal = s.getId().split("::")[0];
+                        // System.out.println(s.getId());
+                         if(!orderIds.contains(orderIdOriginal))  return ConstraintsStatus.NOT_FULFILLED;
+                         total.put(orderIdOriginal, 1+total.get(orderIdOriginal));
+                     } 
+                 }
+             }
+             
+             
+             /*
+             for(Map.Entry<String, Integer> totalC: total.entrySet()) {
+            	 Integer key = Integer.parseInt(totalC.getKey());
+            	 System.out.println(key+"::"+totalC.getValue()+"::"+(this.pedidos.get(key).size()-1)+"::"+orderIds); 
+            	 //if(this.pedidos.get(key).size()!= totalC.getValue())  
+            		// return ConstraintsStatus.NOT_FULFILLED;
+            	 //-1 restar el propio pickup
+            	 if(totalC.getValue()!=0 ) {
+            		 if(this.pedidos.get(key).size()-1!= totalC.getValue())  
+            			 return ConstraintsStatus.NOT_FULFILLED_BREAK;
+            	 }else {
+            		 if(existeDelivery)
+            			 if(totalC.getValue() < this.pedidos.get(key).size()-1)
+            				 return ConstraintsStatus.NOT_FULFILLED;
+            	 }
+            		
+             }
+             */
+             
+             
+              
+        }
+         
+        /* 
+        
+        if(nextAct instanceof End){
+            if(iFacts.getRoute().getVehicle().getId().equalsIgnoreCase("Ñuñoa@[8,0]")){
+                System.out.println(prevAct.getName()+ " :: "+  newAct.getName());
+            }
+            //System.out.println(iFacts.getRoute().getTourActivities().getActivities().size());
+        }
+        */
+        
+        /*
+        if( newAct instanceof  DeliverService ){
+            Delivery s = (Delivery) ((DeliverService)newAct).getJob();  
+            if(iFacts.getRoute().getVehicle().getId().equalsIgnoreCase("Ñuñoa@[8,0]") &&  s.getId().equalsIgnoreCase("1::8")){
+                
+                    System.out.println(iFacts.getRoute().getTourActivities().getActivities().size());
+            }
+            
+        }
+        */
+      
+
+        /*
+        if (newAct instanceof  DeliverService && nextAct instanceof  PickupService) {
+            return ConstraintsStatus.NOT_FULFILLED;
+        }
+        if (newAct instanceof ServiceActivity && nextAct instanceof PickupService) {
+            return ConstraintsStatus.NOT_FULFILLED;
+        }
+        if (newAct instanceof PickupService && prevAct instanceof  DeliverService) {
+            return ConstraintsStatus.NOT_FULFILLED_BREAK;
+        }
+        if (newAct instanceof DeliverService && prevAct instanceof ServiceActivity) {
+            return ConstraintsStatus.NOT_FULFILLED_BREAK;
+        }
+
+        */
+
+
+        return ConstraintsStatus.FULFILLED;
+        
+    }
+
+}
