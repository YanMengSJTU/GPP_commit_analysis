diff --git a/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/AlgorithmEventsRecorder.java b/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/AlgorithmEventsRecorder.java
index 441026240..46714ced9 100644
--- a/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/AlgorithmEventsRecorder.java
+++ b/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/AlgorithmEventsRecorder.java
@@ -18,6 +18,19 @@
 
 package com.graphhopper.jsprit.analysis.toolbox;
 
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.util.Collection;
+import java.util.List;
+import java.util.zip.GZIPOutputStream;
+
+import org.graphstream.graph.Edge;
+import org.graphstream.graph.Graph;
+import org.graphstream.graph.Node;
+import org.graphstream.graph.implementations.MultiGraph;
+import org.graphstream.stream.file.FileSinkDGS;
+
 import com.graphhopper.jsprit.core.algorithm.listener.AlgorithmEndsListener;
 import com.graphhopper.jsprit.core.algorithm.listener.IterationStartsListener;
 import com.graphhopper.jsprit.core.algorithm.recreate.InsertionData;
@@ -25,7 +38,6 @@
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionEndsListener;
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionStartsListener;
 import com.graphhopper.jsprit.core.algorithm.ruin.listener.RuinListener;
-import com.graphhopper.jsprit.core.problem.AbstractActivity;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Delivery;
 import com.graphhopper.jsprit.core.problem.job.Job;
@@ -33,28 +45,19 @@
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.AbstractActivityNEW;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.util.Coordinate;
 import com.graphhopper.jsprit.core.util.Solutions;
-import org.graphstream.graph.Edge;
-import org.graphstream.graph.Graph;
-import org.graphstream.graph.Node;
-import org.graphstream.graph.implementations.MultiGraph;
-import org.graphstream.stream.file.FileSinkDGS;
-
-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.util.Collection;
-import java.util.List;
-import java.util.zip.GZIPOutputStream;
 
 /**
  * Writes out what happens when algorithm searches (in graphstream dgs-file).
  */
-public class AlgorithmEventsRecorder implements RuinListener, IterationStartsListener, InsertionStartsListener, BeforeJobInsertionListener, InsertionEndsListener, AlgorithmEndsListener {
+public class AlgorithmEventsRecorder
+        implements RuinListener, IterationStartsListener, InsertionStartsListener, BeforeJobInsertionListener, InsertionEndsListener, AlgorithmEndsListener {
 
     private boolean renderShipments = false;
 
@@ -104,13 +107,15 @@ public AlgorithmEventsRecorder(VehicleRoutingProblem vrp, String dgsFileLocation
     }
 
     public void setRecordingRange(int startIteration, int endIteration) {
-        this.start_recording_at = startIteration;
-        this.end_recording_at = endIteration;
+        start_recording_at = startIteration;
+        end_recording_at = endIteration;
     }
 
     @Override
     public void ruinStarts(Collection<VehicleRoute> routes) {
-        if (!record()) return;
+        if (!record()) {
+            return;
+        }
         fileSink.stepBegins(graph.getId(), 0, BEFORE_RUIN_RENDER_SOLUTION);
         markAllNodesAsInserted();
         addRoutes(routes);
@@ -141,13 +146,16 @@ private void addRoutes(Collection<VehicleRoute> routes) {
 
     private String getNodeId(TourActivity act) {
         String nodeId = null;
-        if (act instanceof TourActivity.JobActivity) {
-            Job job = ((TourActivity.JobActivity) act).getJob();
+        if (act instanceof JobActivity) {
+            Job job = ((JobActivity) act).getJob();
             if (job instanceof Service) {
                 nodeId = job.getId();
             } else if (job instanceof Shipment) {
-                if (act.getName().equals("pickupShipment")) nodeId = getFromNodeId((Shipment) job);
-                else nodeId = getToNodeId((Shipment) job);
+                if (act.getName().equals("pickupShipment")) {
+                    nodeId = getFromNodeId((Shipment) job);
+                } else {
+                    nodeId = getToNodeId((Shipment) job);
+                }
             }
         }
         return nodeId;
@@ -164,9 +172,14 @@ public void ruinEnds(Collection<VehicleRoute> routes, Collection<Job> unassigned
 
     @Override
     public void removed(Job job, VehicleRoute fromRoute) {
-        if (!record()) return;
-        if (job instanceof Service) removeService(job, fromRoute);
-        else if (job instanceof Shipment) removeShipment(job, fromRoute);
+        if (!record()) {
+            return;
+        }
+        if (job instanceof Service) {
+            removeService(job, fromRoute);
+        } else if (job instanceof Shipment) {
+            removeShipment(job, fromRoute);
+        }
     }
 
     private void removeShipment(Job job, VehicleRoute fromRoute) {
@@ -185,8 +198,9 @@ private void removeShipment(Job job, VehicleRoute fromRoute) {
             removeEdge(enteringFromNode.getId());
             removeEdge(enteringToNode.getId());
             if (graph.getNode(toNodeId).getLeavingEdgeSet().isEmpty()) {
-                if (fromRoute.getVehicle().isReturnToDepot())
+                if (fromRoute.getVehicle().isReturnToDepot()) {
                     throw new IllegalStateException("leaving edge is missing");
+                }
                 return;
             }
 
@@ -205,8 +219,9 @@ private void removeShipment(Job job, VehicleRoute fromRoute) {
 
     private Edge getLeavingEdge(String toNodeId) {
         Collection<Edge> edges = graph.getNode(toNodeId).getLeavingEdgeSet();
-        if (edges.size() == 1) return edges.iterator().next();
-        else {
+        if (edges.size() == 1) {
+            return edges.iterator().next();
+        } else {
             for (Edge e : edges) {
                 if (e.getId().startsWith("shipment")) {
                     continue;
@@ -219,8 +234,9 @@ private Edge getLeavingEdge(String toNodeId) {
 
     private Edge getEnteringEdge(String toNodeId) {
         Collection<Edge> enteringEdges = graph.getNode(toNodeId).getEnteringEdgeSet();
-        if (enteringEdges.size() == 1) return enteringEdges.iterator().next();
-        else {
+        if (enteringEdges.size() == 1) {
+            return enteringEdges.iterator().next();
+        } else {
             for (Edge e : enteringEdges) {
                 if (e.getId().startsWith("shipment")) {
                     continue;
@@ -251,7 +267,9 @@ private void removeNodeAndBelongingEdges(String nodeId, VehicleRoute fromRoute)
         removeEdge(entering.getId());
 
         if (node.getLeavingEdgeSet().isEmpty()) {
-            if (fromRoute.getVehicle().isReturnToDepot()) throw new IllegalStateException("leaving edge is missing");
+            if (fromRoute.getVehicle().isReturnToDepot()) {
+                throw new IllegalStateException("leaving edge is missing");
+            }
             return;
         }
 
@@ -284,7 +302,9 @@ private void finish() {
         try {
             fileSink.end();
             fos.close();
-            if (gzipOs != null) gzipOs.close();
+            if (gzipOs != null) {
+                gzipOs.close();
+            }
         } catch (IOException e) {
             e.printStackTrace();
         }
@@ -365,7 +385,9 @@ private String makeStartId(Vehicle vehicle) {
     }
 
     private String makeEndId(Vehicle vehicle) {
-        if (vehicle.getStartLocation().getId().equals(vehicle.getEndLocation().getId())) return makeStartId(vehicle);
+        if (vehicle.getStartLocation().getId().equals(vehicle.getEndLocation().getId())) {
+            return makeStartId(vehicle);
+        }
         return vehicle.getId() + "_end";
     }
 
@@ -377,7 +399,9 @@ private void addNode(String nodeId, Coordinate nodeCoord) {
 
     @Override
     public void informInsertionEnds(Collection<VehicleRoute> vehicleRoutes) {
-        if (!record()) return;
+        if (!record()) {
+            return;
+        }
         fileSink.stepBegins(graph.getId(), 0, CLEAR_SOLUTION);
         removeRoutes(vehicleRoutes);
     }
@@ -399,15 +423,20 @@ private void removeRoutes(Collection<VehicleRoute> vehicleRoutes) {
 
     @Override
     public void informBeforeJobInsertion(Job job, InsertionData data, VehicleRoute route) {
-        if (!record()) return;
+        if (!record()) {
+            return;
+        }
         markInserted(job);
         handleVehicleSwitch(data, route);
         insertJob(job, data, route);
     }
 
     private void insertJob(Job job, InsertionData data, VehicleRoute route) {
-        if (job instanceof Service) insertService(job, data, route);
-        else if (job instanceof Shipment) insertShipment(job, data, route);
+        if (job instanceof Service) {
+            insertService(job, data, route);
+        } else if (job instanceof Shipment) {
+            insertShipment(job, data, route);
+        }
     }
 
     private void insertShipment(Job job, InsertionData data, VehicleRoute route) {
@@ -415,7 +444,7 @@ private void insertShipment(Job job, InsertionData data, VehicleRoute route) {
         String toNodeId = getToNodeId((Shipment) job);
         insertNode(toNodeId, data.getDeliveryInsertionIndex(), data, route);
 
-        List<AbstractActivity> del = vrp.getActivities(job);
+        List<JobActivity> del = vrp.getActivities(job);
         VehicleRoute copied = VehicleRoute.copyOf(route);
         copied.getTourActivities().addActivity(data.getDeliveryInsertionIndex(), del.get(1));
 
@@ -434,7 +463,7 @@ private void insertNode(String nodeId, int insertionIndex, InsertionData data, V
         if (isFirst(insertionIndex)) {
             node_i = makeStartId(data.getSelectedVehicle());
         } else {
-            TourActivity.JobActivity jobActivity = (TourActivity.JobActivity) route.getActivities().get(insertionIndex - 1);
+            AbstractActivityNEW jobActivity = (AbstractActivityNEW) route.getActivities().get(insertionIndex - 1);
             node_i = getNodeId(jobActivity);
         }
         String edgeId_1 = node_i + "_" + nodeId;
@@ -442,7 +471,7 @@ private void insertNode(String nodeId, int insertionIndex, InsertionData data, V
         if (isLast(insertionIndex, route)) {
             node_j = makeEndId(data.getSelectedVehicle());
         } else {
-            TourActivity.JobActivity jobActivity = (TourActivity.JobActivity) route.getActivities().get(insertionIndex);
+            AbstractActivityNEW jobActivity = (AbstractActivityNEW) route.getActivities().get(insertionIndex);
             node_j = getNodeId(jobActivity);
         }
         String edgeId_2 = nodeId + "_" + node_j;
@@ -466,9 +495,9 @@ private void handleVehicleSwitch(InsertionData data, VehicleRoute route) {
         }
         if (vehicleSwitch && !route.getActivities().isEmpty()) {
             String oldStart = makeStartId(route.getVehicle());
-            String firstAct = ((TourActivity.JobActivity) route.getActivities().get(0)).getJob().getId();
+            String firstAct = ((JobActivity) route.getActivities().get(0)).getJob().getId();
             String oldEnd = makeEndId(route.getVehicle());
-            String lastAct = ((TourActivity.JobActivity) route.getActivities().get(route.getActivities().size() - 1)).getJob().getId();
+            String lastAct = ((JobActivity) route.getActivities().get(route.getActivities().size() - 1)).getJob().getId();
             removeEdge(oldStart + "_" + firstAct);
 
             if (route.getVehicle().isReturnToDepot()) {
@@ -522,7 +551,9 @@ private void markEdgeInserted(String edgeId) {
 
     @Override
     public void informInsertionStarts(Collection<VehicleRoute> vehicleRoutes, Collection<Job> unassignedJobs) {
-        if (!record()) return;
+        if (!record()) {
+            return;
+        }
         fileSink.stepBegins(graph.getId(), 0, RECREATE);
     }
 }
diff --git a/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/GraphStreamViewer.java b/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/GraphStreamViewer.java
index e04097f3c..584278e9a 100644
--- a/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/GraphStreamViewer.java
+++ b/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/GraphStreamViewer.java
@@ -24,10 +24,10 @@
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivity;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivityNEW;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivityNEW;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity.JobActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.util.Time;
 import org.graphstream.graph.Edge;
@@ -588,8 +588,8 @@ private void renderRoute(Graph g, VehicleRoute route, int routeId, long renderDe
                 actNode.addAttribute("ui.label", Time.parseSecondsToTime(act.getEndTime()));
             }
             g.addEdge(makeEdgeId(routeId, vehicle_edgeId), prevIdentifier, currIdentifier, true);
-            if (act instanceof PickupActivity) g.getNode(currIdentifier).addAttribute("ui.class", "pickupInRoute");
-            else if (act instanceof DeliveryActivity)
+            if (act instanceof PickupActivityNEW) g.getNode(currIdentifier).addAttribute("ui.class", "pickupInRoute");
+            else if (act instanceof DeliveryActivityNEW)
                 g.getNode(currIdentifier).addAttribute("ui.class", "deliveryInRoute");
             prevIdentifier = currIdentifier;
             vehicle_edgeId++;
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/AlgorithmUtil.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/AlgorithmUtil.java
index 0cdd76ce7..155acbe29 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/AlgorithmUtil.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/AlgorithmUtil.java
@@ -18,25 +18,25 @@
 
 package com.graphhopper.jsprit.core.algorithm;
 
-import com.graphhopper.jsprit.core.algorithm.state.*;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.Map;
+
+import com.graphhopper.jsprit.core.algorithm.state.StateManager;
+import com.graphhopper.jsprit.core.algorithm.state.UpdateActivityTimes;
+import com.graphhopper.jsprit.core.algorithm.state.UpdateEndLocationIfRouteIsOpen;
+import com.graphhopper.jsprit.core.algorithm.state.UpdateFutureWaitingTimes;
+import com.graphhopper.jsprit.core.algorithm.state.UpdateVariableCosts;
+import com.graphhopper.jsprit.core.algorithm.state.UpdateVehicleDependentPracticalTimeWindows;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
 import com.graphhopper.jsprit.core.problem.constraint.SwitchNotFeasible;
-import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.solution.SolutionCostCalculator;
-import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.BreakActivity;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeKey;
 import com.graphhopper.jsprit.core.util.ActivityTimeTracker;
 
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.Map;
-
 /**
  * Created by schroeder on 02/08/16.
  */
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/InsertionInitialSolutionFactory.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/InsertionInitialSolutionFactory.java
index 137ad3446..f15f4acc4 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/InsertionInitialSolutionFactory.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/InsertionInitialSolutionFactory.java
@@ -19,6 +19,13 @@
 
 package com.graphhopper.jsprit.core.algorithm;
 
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import com.graphhopper.jsprit.core.algorithm.recreate.InsertionStrategy;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
@@ -26,12 +33,6 @@
 import com.graphhopper.jsprit.core.problem.solution.SolutionCostCalculator;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.List;
 
 
 public final class InsertionInitialSolutionFactory implements InitialSolutionFactory {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/PrettyAlgorithmBuilder.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/PrettyAlgorithmBuilder.java
index 7d6c4e170..de96ca5cc 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/PrettyAlgorithmBuilder.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/PrettyAlgorithmBuilder.java
@@ -18,24 +18,20 @@
 
 package com.graphhopper.jsprit.core.algorithm;
 
+import java.util.Collection;
+import java.util.Random;
+
 import com.graphhopper.jsprit.core.algorithm.acceptor.SchrimpfAcceptance;
 import com.graphhopper.jsprit.core.algorithm.acceptor.SolutionAcceptor;
 import com.graphhopper.jsprit.core.algorithm.listener.AlgorithmStartsListener;
 import com.graphhopper.jsprit.core.algorithm.recreate.InsertionStrategy;
 import com.graphhopper.jsprit.core.algorithm.recreate.VehicleSwitched;
-import com.graphhopper.jsprit.core.algorithm.state.*;
+import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
-import com.graphhopper.jsprit.core.problem.constraint.SwitchNotFeasible;
 import com.graphhopper.jsprit.core.problem.solution.SolutionCostCalculator;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
-import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleFleetManager;
-import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeKey;
-import com.graphhopper.jsprit.core.util.ActivityTimeTracker;
-
-import java.util.*;
 
 /**
  * Created by schroeder on 10.12.14.
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/RemoveEmptyVehicles.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/RemoveEmptyVehicles.java
index 702affd5f..7a7766d02 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/RemoveEmptyVehicles.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/RemoveEmptyVehicles.java
@@ -17,14 +17,14 @@
  */
 package com.graphhopper.jsprit.core.algorithm;
 
-import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionEndsListener;
-import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-import com.graphhopper.jsprit.core.problem.vehicle.VehicleFleetManager;
-
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
 
+import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionEndsListener;
+import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleFleetManager;
+
 
 public class RemoveEmptyVehicles implements InsertionEndsListener {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ResetAndIniFleetManager.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ResetAndIniFleetManager.java
index febba5c7d..82070a438 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ResetAndIniFleetManager.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ResetAndIniFleetManager.java
@@ -17,14 +17,14 @@
  */
 package com.graphhopper.jsprit.core.algorithm;
 
+import java.util.ArrayList;
+import java.util.Collection;
+
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionStartsListener;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleFleetManager;
 
-import java.util.ArrayList;
-import java.util.Collection;
-
 
 public class ResetAndIniFleetManager implements InsertionStartsListener {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/SearchStrategy.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/SearchStrategy.java
index a68808e41..b7d9477c9 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/SearchStrategy.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/SearchStrategy.java
@@ -17,18 +17,19 @@
  */
 package com.graphhopper.jsprit.core.algorithm;
 
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import com.graphhopper.jsprit.core.algorithm.acceptor.SolutionAcceptor;
 import com.graphhopper.jsprit.core.algorithm.listener.SearchStrategyModuleListener;
 import com.graphhopper.jsprit.core.algorithm.selector.SolutionSelector;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.solution.SolutionCostCalculator;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Collections;
 
 
 public class SearchStrategy {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/SearchStrategyManager.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/SearchStrategyManager.java
index 5df03a5c4..6891c560b 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/SearchStrategyManager.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/SearchStrategyManager.java
@@ -17,13 +17,19 @@
  */
 package com.graphhopper.jsprit.core.algorithm;
 
-import com.graphhopper.jsprit.core.algorithm.listener.SearchStrategyListener;
-import com.graphhopper.jsprit.core.algorithm.listener.SearchStrategyModuleListener;
-import com.graphhopper.jsprit.core.util.RandomNumberGeneration;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Random;
+
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import java.util.*;
+import com.graphhopper.jsprit.core.algorithm.listener.SearchStrategyListener;
+import com.graphhopper.jsprit.core.algorithm.listener.SearchStrategyModuleListener;
+import com.graphhopper.jsprit.core.util.RandomNumberGeneration;
 
 
 public class SearchStrategyManager {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/VehicleRoutingAlgorithm.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/VehicleRoutingAlgorithm.java
index 7bdeae780..6012398c4 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/VehicleRoutingAlgorithm.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/VehicleRoutingAlgorithm.java
@@ -17,6 +17,12 @@
  */
 package com.graphhopper.jsprit.core.algorithm;
 
+import java.util.ArrayList;
+import java.util.Collection;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import com.graphhopper.jsprit.core.algorithm.SearchStrategy.DiscoveredSolution;
 import com.graphhopper.jsprit.core.algorithm.listener.SearchStrategyListener;
 import com.graphhopper.jsprit.core.algorithm.listener.SearchStrategyModuleListener;
@@ -28,13 +34,9 @@
 import com.graphhopper.jsprit.core.problem.solution.SolutionCostCalculator;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.util.Solutions;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.util.ArrayList;
-import java.util.Collection;
 
 
 /**
@@ -80,7 +82,7 @@ public void incCounter() {
             long n = nextCounter;
             if (i >= n) {
                 nextCounter = n * 2;
-                log.info(this.name + n);
+                log.info(name + n);
             }
         }
 
@@ -148,15 +150,16 @@ private void verify(VehicleRoutingProblemSolution solution) {
         int nuJobs = 0;
         for (VehicleRoute route : solution.getRoutes()) {
             nuJobs += route.getTourActivities().getJobs().size();
-            if (route.getVehicle().getIndex() == 0)
+            if (route.getVehicle().getIndex() == 0) {
                 throw new IllegalStateException("vehicle used in initial solution has no index. probably a vehicle is used that has not been added to the " +
-                    " the VehicleRoutingProblem. only use vehicles that have already been added to the problem.");
+                        " the VehicleRoutingProblem. only use vehicles that have already been added to the problem.");
+            }
             for (TourActivity act : route.getActivities()) {
                 if (act.getIndex() == 0) {
                     throw new IllegalStateException("act in initial solution has no index. activities are created and associated to their job in VehicleRoutingProblem\n." +
-                        " thus if you build vehicle-routes use the jobActivityFactory from vehicle routing problem like that \n" +
-                        " VehicleRoute.Builder.newInstance(knownVehicle).setJobActivityFactory(vrp.getJobActivityFactory).addService(..)....build() \n" +
-                        " then the activities that are created to build the route are identical to the ones used in VehicleRoutingProblem");
+                            " thus if you build vehicle-routes use the jobActivityFactory from vehicle routing problem like that \n" +
+                            " VehicleRoute.Builder.newInstance(knownVehicle).setJobActivityFactory(vrp.getJobActivityFactory).addService(..)....build() \n" +
+                            " then the activities that are created to build the route are identical to the ones used in VehicleRoutingProblem");
                 }
             }
         }
@@ -214,7 +217,9 @@ public SearchStrategyManager getSearchStrategyManager() {
         Collection<VehicleRoutingProblemSolution> solutions = new ArrayList<VehicleRoutingProblemSolution>(initialSolutions);
         algorithmStarts(problem, solutions);
         bestEver = Solutions.bestOf(solutions);
-        if (logger.isTraceEnabled()) log(solutions);
+        if (logger.isTraceEnabled()) {
+            log(solutions);
+        }
         logger.info("iterations start");
         for (int i = 0; i < maxIterations; i++) {
             iterationStarts(i + 1, problem, solutions);
@@ -222,7 +227,9 @@ public SearchStrategyManager getSearchStrategyManager() {
             counter.incCounter();
             SearchStrategy strategy = searchStrategyManager.getRandomStrategy();
             DiscoveredSolution discoveredSolution = strategy.run(problem, solutions);
-            if (logger.isTraceEnabled()) log(discoveredSolution);
+            if (logger.isTraceEnabled()) {
+                log(discoveredSolution);
+            }
             memorizeIfBestEver(discoveredSolution);
             selectedStrategy(discoveredSolution, problem, solutions);
             if (terminationManager.isPrematureBreak(discoveredSolution)) {
@@ -240,11 +247,15 @@ public SearchStrategyManager getSearchStrategyManager() {
     }
 
     private void addBestEver(Collection<VehicleRoutingProblemSolution> solutions) {
-        if (bestEver != null) solutions.add(bestEver);
+        if (bestEver != null) {
+            solutions.add(bestEver);
+        }
     }
 
     private void log(Collection<VehicleRoutingProblemSolution> solutions) {
-        for (VehicleRoutingProblemSolution sol : solutions) log(sol);
+        for (VehicleRoutingProblemSolution sol : solutions) {
+            log(sol);
+        }
     }
 
     private void log(VehicleRoutingProblemSolution solution) {
@@ -253,8 +264,8 @@ private void log(VehicleRoutingProblemSolution solution) {
             StringBuilder b = new StringBuilder();
             b.append(r.getVehicle().getId()).append(" : ").append("[ ");
             for (TourActivity act : r.getActivities()) {
-                if (act instanceof TourActivity.JobActivity) {
-                    b.append(((TourActivity.JobActivity) act).getJob().getId()).append(" ");
+                if (act instanceof JobActivity) {
+                    b.append(((JobActivity) act).getJob().getId()).append(" ");
                 }
             }
             b.append("]");
@@ -276,10 +287,14 @@ private void log(DiscoveredSolution discoveredSolution) {
 
 
     private void memorizeIfBestEver(DiscoveredSolution discoveredSolution) {
-        if (discoveredSolution == null) return;
-        if (bestEver == null) bestEver = discoveredSolution.getSolution();
-        else if (discoveredSolution.getSolution().getCost() < bestEver.getCost())
+        if (discoveredSolution == null) {
+            return;
+        }
+        if (bestEver == null) {
+            bestEver = discoveredSolution.getSolution();
+        } else if (discoveredSolution.getSolution().getCost() < bestEver.getCost()) {
             bestEver = discoveredSolution.getSolution();
+        }
     }
 
 
@@ -297,10 +312,12 @@ public VehicleRoutingAlgorithmListeners getAlgorithmListeners() {
 
     public void addListener(VehicleRoutingAlgorithmListener l) {
         algoListeners.addListener(l);
-        if (l instanceof SearchStrategyListener)
+        if (l instanceof SearchStrategyListener) {
             searchStrategyManager.addSearchStrategyListener((SearchStrategyListener) l);
-        if (l instanceof SearchStrategyModuleListener)
+        }
+        if (l instanceof SearchStrategyModuleListener) {
             searchStrategyManager.addSearchStrategyModuleListener((SearchStrategyModuleListener) l);
+        }
     }
 
     private void iterationEnds(int i, VehicleRoutingProblem problem, Collection<VehicleRoutingProblemSolution> solutions) {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/acceptor/AcceptNewRemoveFirst.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/acceptor/AcceptNewRemoveFirst.java
index f7740a5c9..cf87d4681 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/acceptor/AcceptNewRemoveFirst.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/acceptor/AcceptNewRemoveFirst.java
@@ -18,10 +18,10 @@
 
 package com.graphhopper.jsprit.core.algorithm.acceptor;
 
-import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
-
 import java.util.Collection;
 
+import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
+
 /**
  * Created by schroeder on 09/02/16.
  */
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/acceptor/ExperimentalSchrimpfAcceptance.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/acceptor/ExperimentalSchrimpfAcceptance.java
index 68ef0dbb9..c56696c0e 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/acceptor/ExperimentalSchrimpfAcceptance.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/acceptor/ExperimentalSchrimpfAcceptance.java
@@ -17,6 +17,12 @@
  */
 package com.graphhopper.jsprit.core.algorithm.acceptor;
 
+import java.util.Collection;
+
+import org.apache.commons.math3.stat.descriptive.moment.StandardDeviation;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import com.graphhopper.jsprit.core.algorithm.VehicleRoutingAlgorithm;
 import com.graphhopper.jsprit.core.algorithm.box.GreedySchrimpfFactory;
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
@@ -26,11 +32,6 @@
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.util.Solutions;
-import org.apache.commons.math3.stat.descriptive.moment.StandardDeviation;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.util.Collection;
 
 
 public class ExperimentalSchrimpfAcceptance implements SolutionAcceptor, IterationStartsListener, AlgorithmStartsListener {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/acceptor/GreedyAcceptance.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/acceptor/GreedyAcceptance.java
index 815e81d1a..bc674d09c 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/acceptor/GreedyAcceptance.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/acceptor/GreedyAcceptance.java
@@ -17,10 +17,10 @@
  */
 package com.graphhopper.jsprit.core.algorithm.acceptor;
 
-import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
-
 import java.util.Collection;
 
+import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
+
 
 /**
  * Acceptor that accepts solutions to be memorized only better solutions.
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/acceptor/SchrimpfAcceptance.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/acceptor/SchrimpfAcceptance.java
index f89960b09..fa437cacf 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/acceptor/SchrimpfAcceptance.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/acceptor/SchrimpfAcceptance.java
@@ -17,15 +17,16 @@
  */
 package com.graphhopper.jsprit.core.algorithm.acceptor;
 
+import java.util.Collection;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import com.graphhopper.jsprit.core.algorithm.VehicleRoutingAlgorithm;
 import com.graphhopper.jsprit.core.algorithm.listener.AlgorithmStartsListener;
 import com.graphhopper.jsprit.core.algorithm.listener.IterationStartsListener;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.util.Collection;
 
 
 /**
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/acceptor/SchrimpfInitialThresholdGenerator.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/acceptor/SchrimpfInitialThresholdGenerator.java
index 5be4180a8..27de59d6e 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/acceptor/SchrimpfInitialThresholdGenerator.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/acceptor/SchrimpfInitialThresholdGenerator.java
@@ -17,6 +17,12 @@
  */
 package com.graphhopper.jsprit.core.algorithm.acceptor;
 
+import java.util.Collection;
+
+import org.apache.commons.math3.stat.descriptive.moment.StandardDeviation;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import com.graphhopper.jsprit.core.algorithm.VehicleRoutingAlgorithm;
 import com.graphhopper.jsprit.core.algorithm.box.GreedySchrimpfFactory;
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
@@ -25,11 +31,6 @@
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.util.Solutions;
-import org.apache.commons.math3.stat.descriptive.moment.StandardDeviation;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.util.Collection;
 
 public class SchrimpfInitialThresholdGenerator implements AlgorithmStartsListener {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/acceptor/SolutionAcceptor.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/acceptor/SolutionAcceptor.java
index 35cf91582..5149a49c3 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/acceptor/SolutionAcceptor.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/acceptor/SolutionAcceptor.java
@@ -18,10 +18,10 @@
 
 package com.graphhopper.jsprit.core.algorithm.acceptor;
 
-import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
-
 import java.util.Collection;
 
+import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
+
 
 /**
  * Acceptor that decides whether the newSolution is accepted or not.
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/box/ConcurrentInsertionNoiseMaker.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/box/ConcurrentInsertionNoiseMaker.java
index fc866d630..4f3b5dd93 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/box/ConcurrentInsertionNoiseMaker.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/box/ConcurrentInsertionNoiseMaker.java
@@ -18,6 +18,9 @@
 
 package com.graphhopper.jsprit.core.algorithm.box;
 
+import java.util.Collection;
+import java.util.Random;
+
 import com.graphhopper.jsprit.core.algorithm.listener.IterationStartsListener;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.constraint.SoftActivityConstraint;
@@ -26,9 +29,6 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.util.RandomNumberGeneration;
 
-import java.util.Collection;
-import java.util.Random;
-
 /**
  * Created by schroeder on 16/01/15.
  */
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/box/InsertionNoiseMaker.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/box/InsertionNoiseMaker.java
index 284910309..a273d092b 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/box/InsertionNoiseMaker.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/box/InsertionNoiseMaker.java
@@ -18,6 +18,9 @@
 
 package com.graphhopper.jsprit.core.algorithm.box;
 
+import java.util.Collection;
+import java.util.Random;
+
 import com.graphhopper.jsprit.core.algorithm.listener.IterationStartsListener;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.constraint.SoftActivityConstraint;
@@ -26,9 +29,6 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.util.RandomNumberGeneration;
 
-import java.util.Collection;
-import java.util.Random;
-
 /**
  * Created by schroeder on 16/01/15.
  */
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/box/Jsprit.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/box/Jsprit.java
index 83551cc58..fd76954ea 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/box/Jsprit.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/box/Jsprit.java
@@ -18,6 +18,12 @@
 
 package com.graphhopper.jsprit.core.algorithm.box;
 
+import java.util.Collection;
+import java.util.Properties;
+import java.util.Random;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+
 import com.graphhopper.jsprit.core.algorithm.PrettyAlgorithmBuilder;
 import com.graphhopper.jsprit.core.algorithm.SearchStrategy;
 import com.graphhopper.jsprit.core.algorithm.VehicleRoutingAlgorithm;
@@ -26,8 +32,24 @@
 import com.graphhopper.jsprit.core.algorithm.listener.AlgorithmEndsListener;
 import com.graphhopper.jsprit.core.algorithm.listener.IterationStartsListener;
 import com.graphhopper.jsprit.core.algorithm.module.RuinAndRecreateModule;
-import com.graphhopper.jsprit.core.algorithm.recreate.*;
-import com.graphhopper.jsprit.core.algorithm.ruin.*;
+import com.graphhopper.jsprit.core.algorithm.recreate.AbstractInsertionStrategy;
+import com.graphhopper.jsprit.core.algorithm.recreate.ActivityInsertionCostsCalculator;
+import com.graphhopper.jsprit.core.algorithm.recreate.BestInsertion;
+import com.graphhopper.jsprit.core.algorithm.recreate.BestInsertionConcurrent;
+import com.graphhopper.jsprit.core.algorithm.recreate.BreakScheduling;
+import com.graphhopper.jsprit.core.algorithm.recreate.DefaultScorer;
+import com.graphhopper.jsprit.core.algorithm.recreate.InsertionBuilder;
+import com.graphhopper.jsprit.core.algorithm.recreate.RegretInsertion;
+import com.graphhopper.jsprit.core.algorithm.recreate.RegretInsertionConcurrent;
+import com.graphhopper.jsprit.core.algorithm.recreate.RegretInsertionConcurrentFast;
+import com.graphhopper.jsprit.core.algorithm.recreate.RegretInsertionFast;
+import com.graphhopper.jsprit.core.algorithm.ruin.JobNeighborhoods;
+import com.graphhopper.jsprit.core.algorithm.ruin.JobNeighborhoodsFactory;
+import com.graphhopper.jsprit.core.algorithm.ruin.RuinClusters;
+import com.graphhopper.jsprit.core.algorithm.ruin.RuinRadial;
+import com.graphhopper.jsprit.core.algorithm.ruin.RuinRandom;
+import com.graphhopper.jsprit.core.algorithm.ruin.RuinShareFactory;
+import com.graphhopper.jsprit.core.algorithm.ruin.RuinWorst;
 import com.graphhopper.jsprit.core.algorithm.ruin.distance.AvgServiceAndShipmentDistance;
 import com.graphhopper.jsprit.core.algorithm.selector.SelectBest;
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
@@ -46,12 +68,6 @@
 import com.graphhopper.jsprit.core.util.RandomNumberGeneration;
 import com.graphhopper.jsprit.core.util.Solutions;
 
-import java.util.Collection;
-import java.util.Properties;
-import java.util.Random;
-import java.util.concurrent.ExecutorService;
-import java.util.concurrent.Executors;
-
 
 public class Jsprit {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/listener/AlgorithmEndsListener.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/listener/AlgorithmEndsListener.java
index 3cf5ecd4e..4eeeb0412 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/listener/AlgorithmEndsListener.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/listener/AlgorithmEndsListener.java
@@ -17,11 +17,11 @@
  */
 package com.graphhopper.jsprit.core.algorithm.listener;
 
+import java.util.Collection;
+
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 
-import java.util.Collection;
-
 
 public interface AlgorithmEndsListener extends VehicleRoutingAlgorithmListener {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/listener/AlgorithmStartsListener.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/listener/AlgorithmStartsListener.java
index 5e2dc85f9..8c2fa0094 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/listener/AlgorithmStartsListener.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/listener/AlgorithmStartsListener.java
@@ -17,12 +17,12 @@
  */
 package com.graphhopper.jsprit.core.algorithm.listener;
 
+import java.util.Collection;
+
 import com.graphhopper.jsprit.core.algorithm.VehicleRoutingAlgorithm;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 
-import java.util.Collection;
-
 
 public interface AlgorithmStartsListener extends VehicleRoutingAlgorithmListener {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/listener/IterationEndsListener.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/listener/IterationEndsListener.java
index 6599bc4ed..63150ad58 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/listener/IterationEndsListener.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/listener/IterationEndsListener.java
@@ -17,11 +17,11 @@
  */
 package com.graphhopper.jsprit.core.algorithm.listener;
 
+import java.util.Collection;
+
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 
-import java.util.Collection;
-
 
 public interface IterationEndsListener extends VehicleRoutingAlgorithmListener {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/listener/IterationStartsListener.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/listener/IterationStartsListener.java
index 66fe8bdfc..c54057a46 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/listener/IterationStartsListener.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/listener/IterationStartsListener.java
@@ -17,11 +17,11 @@
  */
 package com.graphhopper.jsprit.core.algorithm.listener;
 
+import java.util.Collection;
+
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 
-import java.util.Collection;
-
 
 public interface IterationStartsListener extends VehicleRoutingAlgorithmListener {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/listener/StrategySelectedListener.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/listener/StrategySelectedListener.java
index 4d54e95d4..d666f71bf 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/listener/StrategySelectedListener.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/listener/StrategySelectedListener.java
@@ -17,12 +17,12 @@
  */
 package com.graphhopper.jsprit.core.algorithm.listener;
 
+import java.util.Collection;
+
 import com.graphhopper.jsprit.core.algorithm.SearchStrategy;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 
-import java.util.Collection;
-
 
 public interface StrategySelectedListener extends VehicleRoutingAlgorithmListener {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/listener/VehicleRoutingAlgorithmListeners.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/listener/VehicleRoutingAlgorithmListeners.java
index bb4c3cf0d..ee609d4f3 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/listener/VehicleRoutingAlgorithmListeners.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/listener/VehicleRoutingAlgorithmListeners.java
@@ -17,13 +17,18 @@
  */
 package com.graphhopper.jsprit.core.algorithm.listener;
 
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.List;
+import java.util.TreeSet;
+
 import com.graphhopper.jsprit.core.algorithm.SearchStrategy;
 import com.graphhopper.jsprit.core.algorithm.VehicleRoutingAlgorithm;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 
-import java.util.*;
-
 
 public class VehicleRoutingAlgorithmListeners {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/module/RuinAndRecreateModule.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/module/RuinAndRecreateModule.java
index 9c6e85cc4..56aa5fa2c 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/module/RuinAndRecreateModule.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/module/RuinAndRecreateModule.java
@@ -17,6 +17,10 @@
  */
 package com.graphhopper.jsprit.core.algorithm.module;
 
+import java.util.Collection;
+import java.util.HashSet;
+import java.util.Set;
+
 import com.graphhopper.jsprit.core.algorithm.SearchStrategyModule;
 import com.graphhopper.jsprit.core.algorithm.listener.SearchStrategyModuleListener;
 import com.graphhopper.jsprit.core.algorithm.recreate.InsertionStrategy;
@@ -26,10 +30,6 @@
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 
-import java.util.Collection;
-import java.util.HashSet;
-import java.util.Set;
-
 
 public class RuinAndRecreateModule implements SearchStrategyModule {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/AbstractInsertionStrategy.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/AbstractInsertionStrategy.java
index 7d794a6d9..2a246ba59 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/AbstractInsertionStrategy.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/AbstractInsertionStrategy.java
@@ -19,6 +19,13 @@
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
 
+import java.util.Collection;
+import java.util.Collections;
+import java.util.Random;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionListener;
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionListeners;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
@@ -27,12 +34,6 @@
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.util.RandomNumberGeneration;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.util.Collection;
-import java.util.Collections;
-import java.util.Random;
 
 public abstract class AbstractInsertionStrategy implements InsertionStrategy {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/AuxilliaryCostCalculator.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/AuxilliaryCostCalculator.java
index 1ec6ad3f0..66dda6b17 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/AuxilliaryCostCalculator.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/AuxilliaryCostCalculator.java
@@ -17,6 +17,9 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
+import java.util.Iterator;
+import java.util.List;
+
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingActivityCosts;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.driver.Driver;
@@ -24,9 +27,6 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 
-import java.util.Iterator;
-import java.util.List;
-
 
 final class AuxilliaryCostCalculator {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BestInsertion.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BestInsertion.java
index a78205ae2..6b1699687 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BestInsertion.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BestInsertion.java
@@ -17,14 +17,19 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.List;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.util.NoiseMaker;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.util.*;
 
 
 /**
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BestInsertionBuilder.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BestInsertionBuilder.java
index 8fa8d5e1d..fa3fa09b5 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BestInsertionBuilder.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BestInsertionBuilder.java
@@ -17,6 +17,10 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
+import java.util.ArrayList;
+import java.util.List;
+import java.util.concurrent.ExecutorService;
+
 import com.graphhopper.jsprit.core.algorithm.listener.VehicleRoutingAlgorithmListeners.PrioritizedVRAListener;
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionListener;
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
@@ -24,10 +28,6 @@
 import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleFleetManager;
 
-import java.util.ArrayList;
-import java.util.List;
-import java.util.concurrent.ExecutorService;
-
 
 public class BestInsertionBuilder {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BestInsertionConcurrent.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BestInsertionConcurrent.java
index 52d913df2..73235ab7e 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BestInsertionConcurrent.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BestInsertionConcurrent.java
@@ -17,6 +17,20 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.List;
+import java.util.concurrent.Callable;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.ExecutorCompletionService;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Future;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import com.graphhopper.jsprit.core.algorithm.recreate.InsertionData.NoInsertionFound;
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionListeners;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
@@ -24,11 +38,6 @@
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.util.*;
-import java.util.concurrent.*;
 
 
 /**
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BreakInsertionCalculator.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BreakInsertionCalculator.java
index f706f4a06..ef814c854 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BreakInsertionCalculator.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BreakInsertionCalculator.java
@@ -17,10 +17,21 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
+import java.util.Arrays;
+import java.util.Iterator;
+import java.util.List;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import com.graphhopper.jsprit.core.problem.JobActivityFactory;
 import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.constraint.*;
+import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
+import com.graphhopper.jsprit.core.problem.constraint.HardActivityConstraint;
 import com.graphhopper.jsprit.core.problem.constraint.HardActivityConstraint.ConstraintsStatus;
+import com.graphhopper.jsprit.core.problem.constraint.HardRouteConstraint;
+import com.graphhopper.jsprit.core.problem.constraint.SoftActivityConstraint;
+import com.graphhopper.jsprit.core.problem.constraint.SoftRouteConstraint;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingActivityCosts;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.driver.Driver;
@@ -33,12 +44,6 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.Start;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.util.Arrays;
-import java.util.Iterator;
-import java.util.List;
 
 /**
  * Calculator that calculates the best insertion position for a service.
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BreakScheduling.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BreakScheduling.java
index 90a7076f7..4bc594e80 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BreakScheduling.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BreakScheduling.java
@@ -18,6 +18,15 @@
 
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionStartsListener;
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.JobInsertedListener;
 import com.graphhopper.jsprit.core.algorithm.ruin.listener.RuinListener;
@@ -27,10 +36,6 @@
 import com.graphhopper.jsprit.core.problem.job.Break;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.util.*;
 
 /**
  * Created by schroeder on 07/04/16.
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/CalculatesServiceInsertionWithTimeScheduling.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/CalculatesServiceInsertionWithTimeScheduling.java
index 62716618a..68e7e4669 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/CalculatesServiceInsertionWithTimeScheduling.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/CalculatesServiceInsertionWithTimeScheduling.java
@@ -18,19 +18,20 @@
 
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
+import java.util.Random;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionStartsListener;
 import com.graphhopper.jsprit.core.problem.driver.Driver;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.util.RandomNumberGeneration;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.List;
-import java.util.Random;
 
 
 class CalculatesServiceInsertionWithTimeScheduling implements JobInsertionCostsCalculator {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/CalculatesServiceInsertionWithTimeSchedulingInSlices.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/CalculatesServiceInsertionWithTimeSchedulingInSlices.java
index 099b6b24d..702e03ab4 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/CalculatesServiceInsertionWithTimeSchedulingInSlices.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/CalculatesServiceInsertionWithTimeSchedulingInSlices.java
@@ -17,15 +17,16 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
+import java.util.ArrayList;
+import java.util.List;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import com.graphhopper.jsprit.core.problem.driver.Driver;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.util.ArrayList;
-import java.util.List;
 
 
 class CalculatesServiceInsertionWithTimeSchedulingInSlices implements JobInsertionCostsCalculator {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ConfigureFixCostCalculator.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ConfigureFixCostCalculator.java
index 16c7ab036..a8832a714 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ConfigureFixCostCalculator.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ConfigureFixCostCalculator.java
@@ -18,14 +18,14 @@
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
 
+import java.util.Collection;
+
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionStartsListener;
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.JobInsertedListener;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 
-import java.util.Collection;
-
 
 final class ConfigureFixCostCalculator implements InsertionStartsListener, JobInsertedListener {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ConfigureLocalActivityInsertionCalculator.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ConfigureLocalActivityInsertionCalculator.java
index a140ea35e..716e0eba8 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ConfigureLocalActivityInsertionCalculator.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ConfigureLocalActivityInsertionCalculator.java
@@ -18,14 +18,14 @@
 
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
+import java.util.Collection;
+
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionStartsListener;
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.JobInsertedListener;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 
-import java.util.Collection;
-
 /**
  * Created by schroeder on 22/07/15.
  */
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/DefaultScorer.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/DefaultScorer.java
index 280de34d2..c48264e90 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/DefaultScorer.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/DefaultScorer.java
@@ -21,8 +21,7 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 
 /**
  * Created by schroeder on 15/10/15.
@@ -42,53 +41,75 @@ public DefaultScorer(VehicleRoutingProblem vrp) {
     }
 
     public void setTimeWindowParam(double tw_param) {
-        this.timeWindowParam = tw_param;
+        timeWindowParam = tw_param;
     }
 
     public void setDepotDistanceParam(double depotDistance_param) {
-        this.depotDistanceParam = depotDistance_param;
+        depotDistanceParam = depotDistance_param;
     }
 
     @Override
     public double score(InsertionData best, Job job) {
-        double score;
-        if (job instanceof Service) {
-            score = scoreService(best, job);
-        } else if (job instanceof Shipment) {
-            score = scoreShipment(best, job);
-        } else throw new IllegalStateException("not supported");
-        return score;
-    }
-
-    private double scoreShipment(InsertionData best, Job job) {
-        Shipment shipment = (Shipment) job;
-        double maxDepotDistance_1 = Math.max(
-            getDistance(best.getSelectedVehicle().getStartLocation(), shipment.getPickupLocation()),
-            getDistance(best.getSelectedVehicle().getStartLocation(), shipment.getDeliveryLocation())
-        );
-        double maxDepotDistance_2 = Math.max(
-            getDistance(best.getSelectedVehicle().getEndLocation(), shipment.getPickupLocation()),
-            getDistance(best.getSelectedVehicle().getEndLocation(), shipment.getDeliveryLocation())
-        );
-        double maxDepotDistance = Math.max(maxDepotDistance_1, maxDepotDistance_2);
-        double minTimeToOperate = Math.min(shipment.getPickupTimeWindow().getEnd() - shipment.getPickupTimeWindow().getStart(),
-            shipment.getDeliveryTimeWindow().getEnd() - shipment.getDeliveryTimeWindow().getStart());
+        Vehicle selectedVehicle = best.getSelectedVehicle();
+        double maxFromStart = job.getAllLocations().stream()
+                .mapToDouble(l -> getDistance(selectedVehicle.getStartLocation(), l))
+                .max()
+                .orElse(0d);
+        double maxToEnd = job.getAllLocations().stream()
+                .mapToDouble(l -> getDistance(selectedVehicle.getEndLocation(), l))
+                .max()
+                .orElse(0d);
+        double maxDepotDistance = Math.max(maxFromStart, maxToEnd);
+        double minTimeToOperate = job.getTimeWindows().stream()
+                .mapToDouble(tw -> tw.getEnd() - tw.getStart())
+                .min()
+                .orElse(0d);
         return Math.max(timeWindowParam * minTimeToOperate, minTimeWindowScore) + depotDistanceParam * maxDepotDistance;
     }
-
-    private double scoreService(InsertionData best, Job job) {
-        Location location = ((Service) job).getLocation();
-        double maxDepotDistance = 0;
-        if (location != null) {
-            maxDepotDistance = Math.max(
-                getDistance(best.getSelectedVehicle().getStartLocation(), location),
-                getDistance(best.getSelectedVehicle().getEndLocation(), location)
-            );
-        }
-        return Math.max(timeWindowParam * (((Service) job).getTimeWindow().getEnd() - ((Service) job).getTimeWindow().getStart()), minTimeWindowScore) +
-            depotDistanceParam * maxDepotDistance;
-    }
-
+//
+//        double score;
+//        if (job instanceofx Service) {
+//            score = scoreService(best, job);
+//        } else if (job instanceofx Shipment) {
+//            score = scoreShipment(best, job);
+//        } else {
+//            throw new IllegalStateException("not supported");
+//        }
+//        System.out.format("OLD SCORE: %6.2f   NEW SCORE: %6.2f    PASS: %s\n", score, calculateScore(best, job),
+//                (score == calculateScore(best, job) ? "true" : "false"));
+//        return score;
+//    }
+//
+//
+//    private double scoreShipment(InsertionData best, Job job) {
+//        Shipment shipment = (Shipment) job;
+//        double maxDepotDistance_1 = Math.max(
+//                getDistance(best.getSelectedVehicle().getStartLocation(), shipment.getPickupLocation()),
+//                getDistance(best.getSelectedVehicle().getStartLocation(), shipment.getDeliveryLocation())
+//                );
+//        double maxDepotDistance_2 = Math.max(
+//                getDistance(best.getSelectedVehicle().getEndLocation(), shipment.getPickupLocation()),
+//                getDistance(best.getSelectedVehicle().getEndLocation(), shipment.getDeliveryLocation())
+//                );
+//        double maxDepotDistance = Math.max(maxDepotDistance_1, maxDepotDistance_2);
+//        double minTimeToOperate = Math.min(shipment.getPickupTimeWindow().getEnd() - shipment.getPickupTimeWindow().getStart(),
+//                shipment.getDeliveryTimeWindow().getEnd() - shipment.getDeliveryTimeWindow().getStart());
+//        return Math.max(timeWindowParam * minTimeToOperate, minTimeWindowScore) + depotDistanceParam * maxDepotDistance;
+//    }
+//
+//    private double scoreService(InsertionData best, Job job) {
+//        Location location = ((Service) job).getLocation();
+//        double maxDepotDistance = 0;
+//        if (location != null) {
+//            maxDepotDistance = Math.max(
+//                    getDistance(best.getSelectedVehicle().getStartLocation(), location),
+//                    getDistance(best.getSelectedVehicle().getEndLocation(), location)
+//                    );
+//        }
+//        return Math.max(timeWindowParam * (((Service) job).getTimeWindow().getEnd() - ((Service) job).getTimeWindow().getStart()), minTimeWindowScore) +
+//                depotDistanceParam * maxDepotDistance;
+//    }
+//
 
     private double getDistance(Location loc1, Location loc2) {
         return vrp.getTransportCosts().getTransportCost(loc1, loc2, 0., null, null);
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/DellAmicoFixCostCalculator.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/DellAmicoFixCostCalculator.java
index 4ed97ed61..8b4a86ded 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/DellAmicoFixCostCalculator.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/DellAmicoFixCostCalculator.java
@@ -17,6 +17,8 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
+import java.util.Collection;
+
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionStartsListener;
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.JobInsertedListener;
 import com.graphhopper.jsprit.core.problem.constraint.SoftRouteConstraint;
@@ -25,8 +27,6 @@
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.state.RouteAndActivityStateGetter;
 
-import java.util.Collection;
-
 public class DellAmicoFixCostCalculator implements SoftRouteConstraint, InsertionStartsListener, JobInsertedListener {
 
     private int nuOfJobsToRecreate;
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/InsertBreakListener.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/InsertBreakListener.java
index 67a38b7c0..6ae81a8e2 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/InsertBreakListener.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/InsertBreakListener.java
@@ -18,10 +18,11 @@
 
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
-import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+
 
 /**
  * Created by schroeder on 19/05/15.
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/Inserter.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/Inserter.java
index 0a50d6301..f4a17c0df 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/Inserter.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/Inserter.java
@@ -17,115 +17,122 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
+import java.util.List;
+
 import com.graphhopper.jsprit.core.algorithm.recreate.InsertionData.NoInsertionFound;
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionListeners;
-import com.graphhopper.jsprit.core.problem.AbstractActivity;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.job.Service;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.*;
-
-import java.util.List;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DefaultTourActivityFactory;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 
 class Inserter {
 
-    interface JobInsertionHandler {
+    private abstract class JobInsertionHandler {
 
-        void handleJobInsertion(Job job, InsertionData iData, VehicleRoute route);
+        private JobInsertionHandler delegator = null;
 
-        void setNextHandler(JobInsertionHandler handler);
+        public abstract void handleJobInsertion(Job job, InsertionData iData, VehicleRoute route);
 
+        public JobInsertionHandler withNextHandler(JobInsertionHandler handler) {
+            delegator = handler;
+            return this;
+        }
+
+        protected void delegate(Job job, InsertionData iData, VehicleRoute route) {
+            if (delegator != null) {
+                delegator.handleJobInsertion(job, iData, route);
+            }
+        }
     }
 
-    class JobExceptionHandler implements JobInsertionHandler {
+    class JobExceptionHandler extends JobInsertionHandler {
 
         @Override
         public void handleJobInsertion(Job job, InsertionData iData, VehicleRoute route) {
             throw new IllegalStateException("job insertion is not supported. Do not know job type.");
         }
 
-        @Override
-        public void setNextHandler(JobInsertionHandler handler) {
-
-        }
-
     }
 
-    class ServiceInsertionHandler implements JobInsertionHandler {
 
-        private TourActivityFactory activityFactory = new DefaultTourActivityFactory();
+    private class UnifiedInsertionHandler extends JobInsertionHandler {
+
+        public UnifiedInsertionHandler() {
+        }
 
-        private JobInsertionHandler delegator = new JobExceptionHandler();
+        @Override
+        public void handleJobInsertion(Job job, InsertionData iData, VehicleRoute route) {
+            route.setVehicleAndDepartureTime(iData.getSelectedVehicle(), iData.getVehicleDepartureTime());
+            if (!iData.getSelectedVehicle().isReturnToDepot()) {
+                if (iData.getDeliveryInsertionIndex() >= route.getActivities().size()) {
+                    route.getEnd().setLocation(job.getEndLocation());
+                }
+            }
 
-        private VehicleRoutingProblem vehicleRoutingProblem;
+            List<JobActivity> acts = job.getActivityList().getAllDuplicated();
+            acts.forEach(act -> route.getTourActivities().addActivity(iData.getDeliveryInsertionIndex(), act));
 
-        public ServiceInsertionHandler(VehicleRoutingProblem vehicleRoutingProblem) {
-            this.vehicleRoutingProblem = vehicleRoutingProblem;
+            // Handles all // delegator.handleJobInsertion(job, iData, route);
         }
+    }
+
+    private class ServiceInsertionHandler extends JobInsertionHandler {
 
         @Override
         public void handleJobInsertion(Job job, InsertionData iData, VehicleRoute route) {
             if (job instanceof Service) {
-                route.setVehicleAndDepartureTime(iData.getSelectedVehicle(), iData.getVehicleDepartureTime());
+                route.setVehicleAndDepartureTime(iData.getSelectedVehicle(),
+                                iData.getVehicleDepartureTime());
                 if (!iData.getSelectedVehicle().isReturnToDepot()) {
-                    if (iData.getDeliveryInsertionIndex() >= route.getTourActivities().getActivities().size()) {
+                    if (iData.getDeliveryInsertionIndex() >= route.getTourActivities()
+                                    .getActivities().size()) {
                         setEndLocation(route, (Service) job);
                     }
                 }
-                TourActivity activity = vehicleRoutingProblem.copyAndGetActivities(job).get(0);
+                TourActivity activity = job.getActivityList().getAllDuplicated().get(0);
                 route.getTourActivities().addActivity(iData.getDeliveryInsertionIndex(), activity);
-            } else delegator.handleJobInsertion(job, iData, route);
+            } else {
+                delegate(job, iData, route);
+            }
         }
 
         private void setEndLocation(VehicleRoute route, Service service) {
             route.getEnd().setLocation(service.getLocation());
         }
-
-        public void setNextHandler(JobInsertionHandler jobInsertionHandler) {
-            this.delegator = jobInsertionHandler;
-        }
-
     }
 
-    class ShipmentInsertionHandler implements JobInsertionHandler {
-
-        private final VehicleRoutingProblem vehicleRoutingProblem;
-
-        private TourShipmentActivityFactory activityFactory = new DefaultShipmentActivityFactory();
-
-        private JobInsertionHandler delegator = new JobExceptionHandler();
-
-        public ShipmentInsertionHandler(VehicleRoutingProblem vehicleRoutingProblem) {
-            this.vehicleRoutingProblem = vehicleRoutingProblem;
-        }
+    private class ShipmentInsertionHandler extends JobInsertionHandler {
 
         @Override
         public void handleJobInsertion(Job job, InsertionData iData, VehicleRoute route) {
             if (job instanceof Shipment) {
-                List<AbstractActivity> acts = vehicleRoutingProblem.copyAndGetActivities(job);
+                List<JobActivity> acts = job.getActivityList().getAllDuplicated(); // vehicleRoutingProblem.copyAndGetActivities(job);
                 TourActivity pickupShipment = acts.get(0);
                 TourActivity deliverShipment = acts.get(1);
-                route.setVehicleAndDepartureTime(iData.getSelectedVehicle(), iData.getVehicleDepartureTime());
+                route.setVehicleAndDepartureTime(iData.getSelectedVehicle(),
+                                iData.getVehicleDepartureTime());
                 if (!iData.getSelectedVehicle().isReturnToDepot()) {
                     if (iData.getDeliveryInsertionIndex() >= route.getActivities().size()) {
                         setEndLocation(route, (Shipment) job);
                     }
                 }
-                route.getTourActivities().addActivity(iData.getDeliveryInsertionIndex(), deliverShipment);
-                route.getTourActivities().addActivity(iData.getPickupInsertionIndex(), pickupShipment);
-            } else delegator.handleJobInsertion(job, iData, route);
+                route.getTourActivities().addActivity(iData.getDeliveryInsertionIndex(),
+                                deliverShipment);
+                route.getTourActivities().addActivity(iData.getPickupInsertionIndex(),
+                                pickupShipment);
+            } else {
+                delegate(job, iData, route);
+            }
         }
 
         private void setEndLocation(VehicleRoute route, Shipment shipment) {
             route.getEnd().setLocation(shipment.getDeliveryLocation());
         }
-
-        public void setNextHandler(JobInsertionHandler jobInsertionHandler) {
-            this.delegator = jobInsertionHandler;
-        }
-
     }
 
     private InsertionListeners insertionListeners;
@@ -137,16 +144,26 @@ public void setNextHandler(JobInsertionHandler jobInsertionHandler) {
     public Inserter(InsertionListeners insertionListeners, VehicleRoutingProblem vehicleRoutingProblem) {
         this.insertionListeners = insertionListeners;
         new DefaultTourActivityFactory();
-        jobInsertionHandler = new ServiceInsertionHandler(vehicleRoutingProblem);
-        jobInsertionHandler.setNextHandler(new ShipmentInsertionHandler(vehicleRoutingProblem));
+
+        // Balage1551 - The new, unified handler
+        // There is a problem: how to handle uniformly insertation indexes for
+        // multiple activities
+        // jobInsertionHandler = new UnifiedInsertionHandler();
+
+        //The old ones:
+        jobInsertionHandler = new ServiceInsertionHandler().withNextHandler(
+                        new ShipmentInsertionHandler().withNextHandler(new JobExceptionHandler()));
     }
 
     public void insertJob(Job job, InsertionData insertionData, VehicleRoute vehicleRoute) {
         insertionListeners.informBeforeJobInsertion(job, insertionData, vehicleRoute);
 
-        if (insertionData == null || (insertionData instanceof NoInsertionFound))
+        if (insertionData == null || (insertionData instanceof NoInsertionFound)) {
             throw new IllegalStateException("insertionData null. cannot insert job.");
-        if (job == null) throw new IllegalStateException("cannot insert null-job");
+        }
+        if (job == null) {
+            throw new IllegalStateException("cannot insert null-job");
+        }
         if (!(vehicleRoute.getVehicle().getId().equals(insertionData.getSelectedVehicle().getId()))) {
             insertionListeners.informVehicleSwitched(vehicleRoute, vehicleRoute.getVehicle(), insertionData.getSelectedVehicle());
             vehicleRoute.setVehicleAndDepartureTime(insertionData.getSelectedVehicle(), insertionData.getVehicleDepartureTime());
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/InsertionBuilder.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/InsertionBuilder.java
index 98e30be41..99981409d 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/InsertionBuilder.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/InsertionBuilder.java
@@ -17,6 +17,10 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
+import java.util.ArrayList;
+import java.util.List;
+import java.util.concurrent.ExecutorService;
+
 import com.graphhopper.jsprit.core.algorithm.listener.VehicleRoutingAlgorithmListeners;
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionListener;
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
@@ -24,10 +28,6 @@
 import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleFleetManager;
 
-import java.util.ArrayList;
-import java.util.List;
-import java.util.concurrent.ExecutorService;
-
 
 public class InsertionBuilder {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/InsertionData.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/InsertionData.java
index d5b5ef8d8..ac4911c2a 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/InsertionData.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/InsertionData.java
@@ -17,12 +17,12 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
-import com.graphhopper.jsprit.core.problem.driver.Driver;
-import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
-
 import java.util.ArrayList;
 import java.util.List;
 
+import com.graphhopper.jsprit.core.problem.driver.Driver;
+import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
+
 /**
  * Data object that collects insertion information. It collects insertionCosts, insertionIndeces, vehicle and driver to be employed
  * and departureTime of vehicle at vehicle's start location (e.g. depot).
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/InsertionDataUpdater.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/InsertionDataUpdater.java
index ced871824..bbbc1a3a3 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/InsertionDataUpdater.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/InsertionDataUpdater.java
@@ -18,14 +18,21 @@
 
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Comparator;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.TreeSet;
+
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleFleetManager;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 
-import java.util.*;
-
 /**
  * Created by schroeder on 15/10/15.
  */
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/InsertionStrategy.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/InsertionStrategy.java
index a478a69fe..281c4178e 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/InsertionStrategy.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/InsertionStrategy.java
@@ -17,12 +17,12 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
+import java.util.Collection;
+
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionListener;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 
-import java.util.Collection;
-
 
 /**
  * Basic interface for insertion strategies
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/JobCalculatorSwitcher.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/JobCalculatorSwitcher.java
index da8c7a9e6..2878c9c02 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/JobCalculatorSwitcher.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/JobCalculatorSwitcher.java
@@ -17,14 +17,14 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
+import java.util.HashMap;
+import java.util.Map;
+
 import com.graphhopper.jsprit.core.problem.driver.Driver;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 
-import java.util.HashMap;
-import java.util.Map;
-
 
 class JobCalculatorSwitcher implements JobInsertionCostsCalculator {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/JobInsertionConsideringFixCostsCalculator.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/JobInsertionConsideringFixCostsCalculator.java
index 19e7cfd92..99a3de89e 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/JobInsertionConsideringFixCostsCalculator.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/JobInsertionConsideringFixCostsCalculator.java
@@ -17,6 +17,9 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import com.graphhopper.jsprit.core.algorithm.state.InternalStates;
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.constraint.SoftRouteConstraint;
@@ -27,8 +30,6 @@
 import com.graphhopper.jsprit.core.problem.solution.route.state.RouteAndActivityStateGetter;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 
 
 final class JobInsertionConsideringFixCostsCalculator implements JobInsertionCostsCalculator, SoftRouteConstraint {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/JobInsertionCostsCalculatorBuilder.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/JobInsertionCostsCalculatorBuilder.java
index 01284d80b..c02f41129 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/JobInsertionCostsCalculatorBuilder.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/JobInsertionCostsCalculatorBuilder.java
@@ -17,24 +17,31 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import com.graphhopper.jsprit.core.algorithm.listener.VehicleRoutingAlgorithmListeners.PrioritizedVRAListener;
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionListener;
-import com.graphhopper.jsprit.core.problem.AbstractActivity;
+import com.graphhopper.jsprit.core.problem.CopyJobActivityFactory;
 import com.graphhopper.jsprit.core.problem.JobActivityFactory;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
-import com.graphhopper.jsprit.core.problem.job.*;
+import com.graphhopper.jsprit.core.problem.job.Break;
+import com.graphhopper.jsprit.core.problem.job.Delivery;
+import com.graphhopper.jsprit.core.problem.job.Job;
+import com.graphhopper.jsprit.core.problem.job.Pickup;
+import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.state.RouteAndActivityStateGetter;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleFleetManager;
 
-import java.util.ArrayList;
-import java.util.List;
-
 
 public class JobInsertionCostsCalculatorBuilder {
 
+
     private static class CalculatorPlusListeners {
 
         private JobInsertionCostsCalculator calculator;
@@ -116,7 +123,7 @@ public JobInsertionCostsCalculatorBuilder(List<InsertionListener> insertionListe
      * @return
      */
     public JobInsertionCostsCalculatorBuilder setStateManager(RouteAndActivityStateGetter stateManager) {
-        this.states = stateManager;
+        states = stateManager;
         return this;
     }
 
@@ -127,7 +134,7 @@ public JobInsertionCostsCalculatorBuilder setStateManager(RouteAndActivityStateG
      * @return
      */
     public JobInsertionCostsCalculatorBuilder setVehicleRoutingProblem(VehicleRoutingProblem vehicleRoutingProblem) {
-        this.vrp = vehicleRoutingProblem;
+        vrp = vehicleRoutingProblem;
         return this;
     }
 
@@ -156,7 +163,7 @@ public JobInsertionCostsCalculatorBuilder setLocalLevel(boolean addDefaultCostCa
     }
 
     public JobInsertionCostsCalculatorBuilder setActivityInsertionCostsCalculator(ActivityInsertionCostsCalculator activityInsertionCostsCalculator) {
-        this.activityInsertionCostCalculator = activityInsertionCostsCalculator;
+        activityInsertionCostCalculator = activityInsertionCostsCalculator;
         return this;
     }
 
@@ -182,7 +189,7 @@ public JobInsertionCostsCalculatorBuilder setRouteLevel(int forwardLooking, int
      */
     public JobInsertionCostsCalculatorBuilder considerFixedCosts(double weightOfFixedCosts) {
         considerFixedCost = true;
-        this.weightOfFixedCost = weightOfFixedCosts;
+        weightOfFixedCost = weightOfFixedCosts;
         return this;
     }
 
@@ -200,12 +207,15 @@ public JobInsertionCostsCalculatorBuilder experimentalTimeScheduler(double timeS
      * @throws IllegalStateException if vrp == null or activityStates == null or fleetManager == null.
      */
     public JobInsertionCostsCalculator build() {
-        if (vrp == null)
+        if (vrp == null) {
             throw new IllegalStateException("vehicle-routing-problem is null, but it must be set (this.setVehicleRoutingProblem(vrp))");
-        if (states == null)
+        }
+        if (states == null) {
             throw new IllegalStateException("states is null, but is must be set (this.setStateManager(states))");
-        if (fleetManager == null)
+        }
+        if (fleetManager == null) {
             throw new IllegalStateException("fleetManager is null, but it must be set (this.setVehicleFleetManager(fleetManager))");
+        }
         JobInsertionCostsCalculator baseCalculator = null;
         CalculatorPlusListeners standardLocal = null;
         if (local) {
@@ -238,8 +248,8 @@ private void checkServicesOnly() {
         for (Job j : vrp.getJobs().values()) {
             if (j instanceof Shipment) {
                 throw new UnsupportedOperationException("currently the 'insert-on-route-level' option is only available for services (i.e. service, pickup, delivery), \n" +
-                    "if you want to deal with shipments switch to option 'local-level' by either setting bestInsertionBuilder.setLocalLevel() or \n"
-                    + "by omitting the xml-tag '<level forwardLooking=2 memory=1>route</level>' when defining your insertionStrategy in algo-config.xml file");
+                        "if you want to deal with shipments switch to option 'local-level' by either setting bestInsertionBuilder.setLocalLevel() or \n"
+                        + "by omitting the xml-tag '<level forwardLooking=2 memory=1>route</level>' when defining your insertionStrategy in algo-config.xml file");
             }
         }
 
@@ -258,7 +268,9 @@ private void addAlgorithmListeners(List<PrioritizedVRAListener> list) {
     }
 
     private CalculatorPlusListeners createStandardLocal(final VehicleRoutingProblem vrp, RouteAndActivityStateGetter statesManager) {
-        if (constraintManager == null) throw new IllegalStateException("constraint-manager is null");
+        if (constraintManager == null) {
+            throw new IllegalStateException("constraint-manager is null");
+        }
 
         ActivityInsertionCostsCalculator actInsertionCalc;
         ConfigureLocalActivityInsertionCalculator configLocal = null;
@@ -270,7 +282,7 @@ private CalculatorPlusListeners createStandardLocal(final VehicleRoutingProblem
 
                 @Override
                 public double getCosts(JobInsertionContext iContext, TourActivity prevAct, TourActivity nextAct, TourActivity newAct,
-                                       double depTimeAtPrevAct) {
+                        double depTimeAtPrevAct) {
                     return 0.;
                 }
 
@@ -282,7 +294,7 @@ public double getCosts(JobInsertionContext iContext, TourActivity prevAct, TourA
         JobActivityFactory activityFactory = new JobActivityFactory() {
 
             @Override
-            public List<AbstractActivity> createActivities(Job job) {
+            public List<JobActivity> createActivities(Job job) {
                 return vrp.copyAndGetActivities(job);
             }
 
@@ -330,7 +342,7 @@ private CalculatorPlusListeners createStandardRoute(final VehicleRoutingProblem
 
                 @Override
                 public double getCosts(JobInsertionContext iContext, TourActivity prevAct, TourActivity nextAct, TourActivity newAct,
-                                       double depTimeAtPrevAct) {
+                        double depTimeAtPrevAct) {
                     return 0.;
                 }
 
@@ -342,12 +354,7 @@ public double getCosts(JobInsertionContext iContext, TourActivity prevAct, TourA
         jobInsertionCalculator.setNuOfActsForwardLooking(forwardLooking);
         jobInsertionCalculator.setMemorySize(solutionMemory);
         jobInsertionCalculator.setStates(activityStates2);
-        jobInsertionCalculator.setJobActivityFactory(new JobActivityFactory() {
-            @Override
-            public List<AbstractActivity> createActivities(Job job) {
-                return vrp.copyAndGetActivities(job);
-            }
-        });
+        jobInsertionCalculator.setJobActivityFactory(new CopyJobActivityFactory());
         return new CalculatorPlusListeners(jobInsertionCalculator);
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/JobInsertionCostsCalculatorLightFactory.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/JobInsertionCostsCalculatorLightFactory.java
index a5a40fbce..127ba0f4f 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/JobInsertionCostsCalculatorLightFactory.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/JobInsertionCostsCalculatorLightFactory.java
@@ -18,6 +18,9 @@
 
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import com.graphhopper.jsprit.core.algorithm.listener.VehicleRoutingAlgorithmListeners;
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionListener;
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
@@ -27,9 +30,6 @@
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleFleetManager;
 
-import java.util.ArrayList;
-import java.util.List;
-
 /**
  * Created by schroeder on 11.12.14.
  */
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertion.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertion.java
index 6e405dec3..88b7dee1a 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertion.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertion.java
@@ -18,18 +18,19 @@
 
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
-import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.job.Break;
-import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
 
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
+import com.graphhopper.jsprit.core.problem.job.Break;
+import com.graphhopper.jsprit.core.problem.job.Job;
+import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+
 /**
  * Insertion based on regret approach.
  * <p>
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionConcurrent.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionConcurrent.java
index fe2146bad..e7ebcbe4e 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionConcurrent.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionConcurrent.java
@@ -18,18 +18,23 @@
 
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
-import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.job.Break;
-import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
-import java.util.concurrent.*;
+import java.util.concurrent.Callable;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.ExecutorCompletionService;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Future;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
+import com.graphhopper.jsprit.core.problem.job.Break;
+import com.graphhopper.jsprit.core.problem.job.Job;
+import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 
 /**
  * Insertion based on regret approach.
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionConcurrentFast.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionConcurrentFast.java
index 187145f63..cfe73e779 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionConcurrentFast.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionConcurrentFast.java
@@ -18,18 +18,28 @@
 
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.TreeSet;
+import java.util.concurrent.Callable;
+import java.util.concurrent.ExecutorService;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.constraint.DependencyType;
 import com.graphhopper.jsprit.core.problem.job.Break;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleFleetManager;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.util.*;
-import java.util.concurrent.Callable;
-import java.util.concurrent.ExecutorService;
 
 /**
  * Insertion based on regret approach.
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionFast.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionFast.java
index 4369dd016..f982bb334 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionFast.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionFast.java
@@ -18,15 +18,24 @@
 
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.TreeSet;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.constraint.DependencyType;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleFleetManager;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.util.*;
 
 /**
  * Insertion based on regret approach.
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/RouteLevelActivityInsertionCostsEstimator.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/RouteLevelActivityInsertionCostsEstimator.java
index e47a48d80..f7eb618b6 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/RouteLevelActivityInsertionCostsEstimator.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/RouteLevelActivityInsertionCostsEstimator.java
@@ -18,6 +18,9 @@
 
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import com.graphhopper.jsprit.core.algorithm.state.InternalStates;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingActivityCosts;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
@@ -28,9 +31,6 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.state.RouteAndActivityStateGetter;
 
-import java.util.ArrayList;
-import java.util.List;
-
 
 class RouteLevelActivityInsertionCostsEstimator implements ActivityInsertionCostsCalculator {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ServiceInsertionCalculator.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ServiceInsertionCalculator.java
index 977ba6abe..c3c444caf 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ServiceInsertionCalculator.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ServiceInsertionCalculator.java
@@ -17,9 +17,18 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
+import java.util.Iterator;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import com.graphhopper.jsprit.core.problem.JobActivityFactory;
-import com.graphhopper.jsprit.core.problem.constraint.*;
+import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
+import com.graphhopper.jsprit.core.problem.constraint.HardActivityConstraint;
 import com.graphhopper.jsprit.core.problem.constraint.HardActivityConstraint.ConstraintsStatus;
+import com.graphhopper.jsprit.core.problem.constraint.HardRouteConstraint;
+import com.graphhopper.jsprit.core.problem.constraint.SoftActivityConstraint;
+import com.graphhopper.jsprit.core.problem.constraint.SoftRouteConstraint;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingActivityCosts;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.driver.Driver;
@@ -33,10 +42,6 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.util.Iterator;
 
 /**
  * Calculator that calculates the best insertion position for a {@link Service}.
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ServiceInsertionOnRouteLevelCalculator.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ServiceInsertionOnRouteLevelCalculator.java
index b330d689c..71de3242a 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ServiceInsertionOnRouteLevelCalculator.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ServiceInsertionOnRouteLevelCalculator.java
@@ -17,6 +17,14 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
+import java.util.ArrayList;
+import java.util.Comparator;
+import java.util.List;
+import java.util.PriorityQueue;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import com.graphhopper.jsprit.core.algorithm.state.InternalStates;
 import com.graphhopper.jsprit.core.problem.JobActivityFactory;
 import com.graphhopper.jsprit.core.problem.Location;
@@ -37,13 +45,6 @@
 import com.graphhopper.jsprit.core.problem.solution.route.state.RouteAndActivityStateGetter;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.util.ArrayList;
-import java.util.Comparator;
-import java.util.List;
-import java.util.PriorityQueue;
 
 
 final class ServiceInsertionOnRouteLevelCalculator implements JobInsertionCostsCalculator {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ShipmentInsertionCalculator.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ShipmentInsertionCalculator.java
index 87c29c0e3..e30db03aa 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ShipmentInsertionCalculator.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ShipmentInsertionCalculator.java
@@ -17,9 +17,18 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
+import java.util.List;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import com.graphhopper.jsprit.core.problem.JobActivityFactory;
-import com.graphhopper.jsprit.core.problem.constraint.*;
+import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
+import com.graphhopper.jsprit.core.problem.constraint.HardActivityConstraint;
 import com.graphhopper.jsprit.core.problem.constraint.HardActivityConstraint.ConstraintsStatus;
+import com.graphhopper.jsprit.core.problem.constraint.HardRouteConstraint;
+import com.graphhopper.jsprit.core.problem.constraint.SoftActivityConstraint;
+import com.graphhopper.jsprit.core.problem.constraint.SoftRouteConstraint;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingActivityCosts;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.driver.Driver;
@@ -33,10 +42,6 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.util.List;
 
 
 final class ShipmentInsertionCalculator implements JobInsertionCostsCalculator {
@@ -64,11 +69,11 @@
     public ShipmentInsertionCalculator(VehicleRoutingTransportCosts routingCosts, VehicleRoutingActivityCosts activityCosts, ActivityInsertionCostsCalculator activityInsertionCostsCalculator, ConstraintManager constraintManager) {
         super();
         this.activityInsertionCostsCalculator = activityInsertionCostsCalculator;
-        this.hardRouteLevelConstraint = constraintManager;
-        this.hardActivityLevelConstraint = constraintManager;
-        this.softActivityConstraint = constraintManager;
-        this.softRouteConstraint = constraintManager;
-        this.transportCosts = routingCosts;
+        hardRouteLevelConstraint = constraintManager;
+        hardActivityLevelConstraint = constraintManager;
+        softActivityConstraint = constraintManager;
+        softRouteConstraint = constraintManager;
+        transportCosts = routingCosts;
         this.activityCosts = activityCosts;
         additionalAccessEgressCalculator = new AdditionalAccessEgressCalculator(routingCosts);
         logger.debug("initialise {}", this);
@@ -91,8 +96,12 @@ public String toString() {
     public InsertionData getInsertionData(final VehicleRoute currentRoute, final Job jobToInsert, final Vehicle newVehicle, double newVehicleDepartureTime, final Driver newDriver, final double bestKnownCosts) {
         JobInsertionContext insertionContext = new JobInsertionContext(currentRoute, jobToInsert, newVehicle, newDriver, newVehicleDepartureTime);
         Shipment shipment = (Shipment) jobToInsert;
-        TourActivity pickupShipment = activityFactory.createActivities(shipment).get(0);
-        TourActivity deliverShipment = activityFactory.createActivities(shipment).get(1);
+        // TourActivity pickupShipment =
+        // activityFactory.createActivities(shipment).get(0);
+        // TourActivity deliverShipment =
+        // activityFactory.createActivities(shipment).get(1);
+        TourActivity pickupShipment = shipment.getActivityList().getAll().get(0);
+        TourActivity deliverShipment = shipment.getActivityList().getAll().get(1);
         insertionContext.getAssociatedActivities().add(pickupShipment);
         insertionContext.getAssociatedActivities().add(deliverShipment);
 
@@ -172,9 +181,9 @@ else if (pickupShipmentConstraintStatus.equals(ConstraintsStatus.FULFILLED)) {
 
                 double prevActEndTime_deliveryLoop = shipmentPickupEndTime;
 
-			/*
+                /*
             --------------------------------
-			 */
+                 */
                 //deliverShipmentLoop
                 int j = i;
                 boolean tourEnd_deliveryLoop = false;
@@ -199,7 +208,7 @@ else if (pickupShipmentConstraintStatus.equals(ConstraintsStatus.FULFILLED)) {
                             double additionalDeliveryICosts = softActivityConstraint.getCosts(insertionContext, prevAct_deliveryLoop, deliverShipment, nextAct_deliveryLoop, prevActEndTime_deliveryLoop);
                             double deliveryAIC = calculate(insertionContext, prevAct_deliveryLoop, deliverShipment, nextAct_deliveryLoop, prevActEndTime_deliveryLoop);
                             double totalActivityInsertionCosts = pickupAIC + deliveryAIC
-                                + additionalICostsAtRouteLevel + additionalPickupICosts + additionalDeliveryICosts;
+                                            + additionalICostsAtRouteLevel + additionalPickupICosts + additionalDeliveryICosts;
                             if (totalActivityInsertionCosts < bestCost) {
                                 bestCost = totalActivityInsertionCosts;
                                 pickupInsertionIndex = i;
@@ -212,7 +221,9 @@ else if (pickupShipmentConstraintStatus.equals(ConstraintsStatus.FULFILLED)) {
                             deliveryInsertionNotFulfilledBreak = false;
                         }
                     }
-                    if (deliveryInsertionNotFulfilledBreak) break;
+                    if (deliveryInsertionNotFulfilledBreak) {
+                        break;
+                    }
                     //update prevAct and endTime
                     double nextActArrTime = prevActEndTime_deliveryLoop + transportCosts.getTransportTime(prevAct_deliveryLoop.getLocation(), nextAct_deliveryLoop.getLocation(), prevActEndTime_deliveryLoop, newDriver, newVehicle);
                     prevActEndTime_deliveryLoop = Math.max(nextActArrTime, nextAct_deliveryLoop.getTheoreticalEarliestOperationStartTime()) + activityCosts.getActivityDuration(nextAct_deliveryLoop,nextActArrTime,newDriver,newVehicle);
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/SwitchVehicleListener.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/SwitchVehicleListener.java
index 5af563539..7a3aa032d 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/SwitchVehicleListener.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/SwitchVehicleListener.java
@@ -18,10 +18,11 @@
 
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
-import com.graphhopper.jsprit.core.problem.job.Break;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.graphhopper.jsprit.core.problem.job.Break;
+
 
 /**
  * Created by schroeder on 19/05/15.
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/VehicleTypeDependentJobInsertionCalculator.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/VehicleTypeDependentJobInsertionCalculator.java
index 9190a2f2b..7b6e400ac 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/VehicleTypeDependentJobInsertionCalculator.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/VehicleTypeDependentJobInsertionCalculator.java
@@ -17,6 +17,14 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashSet;
+import java.util.Set;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.driver.Driver;
 import com.graphhopper.jsprit.core.problem.job.Job;
@@ -24,13 +32,6 @@
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleFleetManager;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.HashSet;
-import java.util.Set;
 
 
 final class VehicleTypeDependentJobInsertionCalculator implements JobInsertionCostsCalculator {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/listener/InsertionEndsListener.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/listener/InsertionEndsListener.java
index c9cde4d64..f09a065d6 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/listener/InsertionEndsListener.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/listener/InsertionEndsListener.java
@@ -17,10 +17,10 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate.listener;
 
-import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-
 import java.util.Collection;
 
+import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+
 
 public interface InsertionEndsListener extends InsertionListener {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/listener/InsertionListeners.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/listener/InsertionListeners.java
index 37ccd7bbf..8b48b87b5 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/listener/InsertionListeners.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/listener/InsertionListeners.java
@@ -17,14 +17,14 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate.listener;
 
+import java.util.ArrayList;
+import java.util.Collection;
+
 import com.graphhopper.jsprit.core.algorithm.recreate.InsertionData;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 
-import java.util.ArrayList;
-import java.util.Collection;
-
 
 public class InsertionListeners {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/listener/InsertionStartsListener.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/listener/InsertionStartsListener.java
index e3e1c3f5b..c35712ab7 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/listener/InsertionStartsListener.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/listener/InsertionStartsListener.java
@@ -17,11 +17,11 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate.listener;
 
+import java.util.Collection;
+
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 
-import java.util.Collection;
-
 
 public interface InsertionStartsListener extends InsertionListener {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/AbstractRuinStrategy.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/AbstractRuinStrategy.java
index 37552b35f..c1a93da48 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/AbstractRuinStrategy.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/AbstractRuinStrategy.java
@@ -19,17 +19,18 @@
 package com.graphhopper.jsprit.core.algorithm.ruin;
 
 
+import java.util.Collection;
+import java.util.Random;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import com.graphhopper.jsprit.core.algorithm.ruin.listener.RuinListener;
 import com.graphhopper.jsprit.core.algorithm.ruin.listener.RuinListeners;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.util.RandomNumberGeneration;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.util.Collection;
-import java.util.Random;
 
 public abstract class AbstractRuinStrategy implements RuinStrategy {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/DBSCANClusterer.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/DBSCANClusterer.java
index d73bf10a8..eca56936f 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/DBSCANClusterer.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/DBSCANClusterer.java
@@ -18,18 +18,25 @@
 
 package com.graphhopper.jsprit.core.algorithm.ruin;
 
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Random;
+
+import org.apache.commons.math3.ml.clustering.Cluster;
+import org.apache.commons.math3.ml.clustering.Clusterable;
+import org.apache.commons.math3.ml.distance.DistanceMeasure;
+
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.util.RandomNumberGeneration;
 import com.graphhopper.jsprit.core.util.RandomUtils;
-import org.apache.commons.math3.ml.clustering.Cluster;
-import org.apache.commons.math3.ml.clustering.Clusterable;
-import org.apache.commons.math3.ml.distance.DistanceMeasure;
-
-import java.util.*;
 
 /**
  * Created by schroeder on 04/02/15.
@@ -151,8 +158,8 @@ public void setEpsDistance(double epsDistance) {
         List<LocationWrapper> locations = new ArrayList<LocationWrapper>(route.getTourActivities().getJobs().size());
         Map<Job, List<Location>> jobs2locations = new HashMap<Job, List<Location>>();
         for (TourActivity act : route.getActivities()) {
-            if (act instanceof TourActivity.JobActivity) {
-                Job job = ((TourActivity.JobActivity) act).getJob();
+            if (act instanceof JobActivity) {
+                Job job = ((JobActivity) act).getJob();
                 if (!jobs2locations.containsKey(job)) {
                     jobs2locations.put(job, new ArrayList<Location>());
                 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoods.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoods.java
index 7fe65f065..c42a9efea 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoods.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoods.java
@@ -18,10 +18,10 @@
 
 package com.graphhopper.jsprit.core.algorithm.ruin;
 
-import com.graphhopper.jsprit.core.problem.job.Job;
-
 import java.util.Iterator;
 
+import com.graphhopper.jsprit.core.problem.job.Job;
+
 /**
  * Created by schroeder on 07/01/15.
  */
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsImpl.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsImpl.java
index bcb20e948..aeef8ba4a 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsImpl.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsImpl.java
@@ -18,14 +18,19 @@
 
 package com.graphhopper.jsprit.core.algorithm.ruin;
 
+import java.util.Comparator;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+import java.util.TreeSet;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import com.graphhopper.jsprit.core.algorithm.ruin.distance.JobDistance;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.util.StopWatch;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.util.*;
 
 /**
  * Created by schroeder on 07/01/15.
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsImplWithCapRestriction.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsImplWithCapRestriction.java
index b32372156..533e0b0fe 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsImplWithCapRestriction.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsImplWithCapRestriction.java
@@ -18,14 +18,19 @@
 
 package com.graphhopper.jsprit.core.algorithm.ruin;
 
+import java.util.Comparator;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+import java.util.TreeSet;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import com.graphhopper.jsprit.core.algorithm.ruin.distance.JobDistance;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.util.StopWatch;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.util.*;
 
 /**
  * Created by schroeder on 07/01/15.
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsOptimized.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsOptimized.java
index 58e7a4f05..9f78e4ba2 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsOptimized.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsOptimized.java
@@ -18,14 +18,19 @@
 
 package com.graphhopper.jsprit.core.algorithm.ruin;
 
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.Iterator;
+import java.util.List;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import com.graphhopper.jsprit.core.algorithm.ruin.distance.JobDistance;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.util.StopWatch;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.util.*;
 
 /**
  * Created by schroeder on 07/01/15.
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/NearestNeighborhoodIterator.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/NearestNeighborhoodIterator.java
index 3bb966a6b..31becb8c9 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/NearestNeighborhoodIterator.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/NearestNeighborhoodIterator.java
@@ -18,11 +18,12 @@
 
 package com.graphhopper.jsprit.core.algorithm.ruin;
 
-import com.graphhopper.jsprit.core.problem.job.Job;
+import java.util.Iterator;
+
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import java.util.Iterator;
+import com.graphhopper.jsprit.core.problem.job.Job;
 
 /**
  * Created by schroeder on 07/01/15.
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinBreaks.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinBreaks.java
index ec2fc36ba..73678b6be 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinBreaks.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinBreaks.java
@@ -18,14 +18,15 @@
 
 package com.graphhopper.jsprit.core.algorithm.ruin;
 
+import java.util.Collection;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import com.graphhopper.jsprit.core.algorithm.ruin.listener.RuinListener;
 import com.graphhopper.jsprit.core.problem.job.Break;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.util.Collection;
 
 /**
  * Created by schroeder on 04/08/15.
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinClusters.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinClusters.java
index 4e00ac677..cb4e9011a 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinClusters.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinClusters.java
@@ -17,18 +17,27 @@
  */
 package com.graphhopper.jsprit.core.algorithm.ruin;
 
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+import org.apache.commons.math3.ml.clustering.Clusterable;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import com.graphhopper.jsprit.core.algorithm.listener.IterationStartsListener;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.AbstractActivityNEW;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.util.RandomUtils;
-import org.apache.commons.math3.ml.clustering.Clusterable;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.util.*;
 
 
 /**
@@ -48,9 +57,9 @@ public void informIterationStarts(int i, VehicleRoutingProblem problem, Collecti
 
     public static class JobActivityWrapper implements Clusterable {
 
-        private TourActivity.JobActivity jobActivity;
+        private AbstractActivityNEW jobActivity;
 
-        public JobActivityWrapper(TourActivity.JobActivity jobActivity) {
+        public JobActivityWrapper(AbstractActivityNEW jobActivity) {
             this.jobActivity = jobActivity;
         }
 
@@ -59,7 +68,7 @@ public JobActivityWrapper(TourActivity.JobActivity jobActivity) {
             return new double[]{jobActivity.getLocation().getCoordinate().getX(), jobActivity.getLocation().getCoordinate().getY()};
         }
 
-        public TourActivity.JobActivity getActivity() {
+        public AbstractActivityNEW getActivity() {
             return jobActivity;
         }
     }
@@ -160,7 +169,7 @@ private void ruin(Collection<VehicleRoute> vehicleRoutes, int nOfJobs2BeRemoved,
     private List<JobActivityWrapper> wrap(List<TourActivity> activities) {
         List<JobActivityWrapper> wl = new ArrayList<JobActivityWrapper>();
         for (TourActivity act : activities) {
-            wl.add(new JobActivityWrapper((TourActivity.JobActivity) act));
+            wl.add(new JobActivityWrapper((AbstractActivityNEW) act));
         }
         return wl;
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinRadial.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinRadial.java
index e4ea4fc20..96983007e 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinRadial.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinRadial.java
@@ -17,15 +17,20 @@
  */
 package com.graphhopper.jsprit.core.algorithm.ruin;
 
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.Iterator;
+import java.util.List;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import com.graphhopper.jsprit.core.algorithm.ruin.distance.JobDistance;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.util.RandomUtils;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.util.*;
 
 
 /**
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinRadialMultipleCenters.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinRadialMultipleCenters.java
index 17fc53f28..ecd8fcc01 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinRadialMultipleCenters.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinRadialMultipleCenters.java
@@ -17,14 +17,21 @@
  */
 package com.graphhopper.jsprit.core.algorithm.ruin;
 
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Set;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import com.graphhopper.jsprit.core.algorithm.ruin.distance.JobDistance;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.util.*;
 
 
 /**
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinRandom.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinRandom.java
index 74a083745..9f752628c 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinRandom.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinRandom.java
@@ -17,17 +17,18 @@
  */
 package com.graphhopper.jsprit.core.algorithm.ruin;
 
-import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.List;
 
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
+import com.graphhopper.jsprit.core.problem.job.Job;
+import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+
 
 /**
  * Ruin strategy that ruins current solution randomly. I.e.
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinStrategy.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinStrategy.java
index d79f9ea7c..23b538e94 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinStrategy.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinStrategy.java
@@ -17,12 +17,12 @@
  */
 package com.graphhopper.jsprit.core.algorithm.ruin;
 
+import java.util.Collection;
+
 import com.graphhopper.jsprit.core.algorithm.ruin.listener.RuinListener;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 
-import java.util.Collection;
-
 
 /**
  * @author stefan schroeder
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinWorst.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinWorst.java
index 620d1feda..8a1af2e6e 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinWorst.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinWorst.java
@@ -17,17 +17,24 @@
  */
 package com.graphhopper.jsprit.core.algorithm.ruin;
 
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.LinkedList;
+import java.util.List;
+import java.util.Map;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.driver.DriverImpl;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.util.NoiseMaker;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.util.*;
 
 
 /**
@@ -109,7 +116,7 @@ private Job getWorst(Collection<VehicleRoute> copied) {
                     continue;
                 }
                 double savings = savings(route, actBefore, actToEval, act);
-                Job job = ((TourActivity.JobActivity) actToEval).getJob();
+                Job job = ((JobActivity) actToEval).getJob();
                 if (!savingsMap.containsKey(job)) {
                     savingsMap.put(job, savings);
                 } else {
@@ -120,7 +127,7 @@ private Job getWorst(Collection<VehicleRoute> copied) {
                 actToEval = act;
             }
             double savings = savings(route, actBefore, actToEval, route.getEnd());
-            Job job = ((TourActivity.JobActivity) actToEval).getJob();
+            Job job = ((JobActivity) actToEval).getJob();
             if (!savingsMap.containsKey(job)) {
                 savingsMap.put(job, savings);
             } else {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/AvgServiceAndShipmentDistance.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/AvgServiceAndShipmentDistance.java
index 9a1e84e99..cc97b2a8e 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/AvgServiceAndShipmentDistance.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/AvgServiceAndShipmentDistance.java
@@ -17,18 +17,21 @@
  */
 package com.graphhopper.jsprit.core.algorithm.ruin.distance;
 
+import java.util.List;
+
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.util.EuclideanDistanceCalculator;
 
 
 /**
- * Calculator that calculates average distance between two jobs based on the input-transport costs.
+ * Calculator that calculates average distance between two jobs based on the
+ * input-transport costs.
+ * <p>
  * <p>
- * <p>If the distance between two jobs cannot be calculated with input-transport costs, it tries the euclidean distance between these jobs.
+ * If the distance between two jobs cannot be calculated with input-transport
+ * costs, it tries the euclidean distance between these jobs.
  *
  * @author stefan schroeder
  */
@@ -43,43 +46,52 @@ public AvgServiceAndShipmentDistance(VehicleRoutingTransportCosts costs) {
     }
 
     /**
-     * Calculates and returns the average distance between two jobs based on the input-transport costs.
+     * Calculates and returns the average distance between two jobs based on the
+     * input-transport costs.
+     * <p>
      * <p>
-     * <p>If the distance between two jobs cannot be calculated with input-transport costs, it tries the euclidean distance between these jobs.
+     * If the distance between two jobs cannot be calculated with
+     * input-transport costs, it tries the euclidean distance between these
+     * jobs.
      */
     @Override
     public double getDistance(Job i, Job j) {
-        if (i.equals(j)) return 0.0;
-
-        if (i instanceof Service && j instanceof Service) {
-            return calcDist((Service) i, (Service) j);
-        } else if (i instanceof Service && j instanceof Shipment) {
-            return calcDist((Service) i, (Shipment) j);
-        } else if (i instanceof Shipment && j instanceof Service) {
-            return calcDist((Service) j, (Shipment) i);
-        } else if (i instanceof Shipment && j instanceof Shipment) {
-            return calcDist((Shipment) i, (Shipment) j);
-        } else {
-            throw new IllegalStateException("this supports only shipments or services");
+        if (i.equals(j)) {
+            return 0.0;
         }
-    }
 
-    private double calcDist(Service i, Service j) {
-        return calcDist(i.getLocation(), j.getLocation());
-    }
+        // TODO: Do we really need these checks after the refactor?
+//      if (!(i instanceof Service || i instanceofx Shipment || i instanceofx ShipmentWithBackhaul)) {
+//          throw new IllegalStateException("this supports only shipments or services");
+//      }
+//      if (!(j instanceof Service || j instanceofx Shipment || j instanceofx ShipmentWithBackhaul)) {
+//          throw new IllegalStateException("this supports only shipments or services");
+//      }
 
-    private double calcDist(Service i, Shipment j) {
-        double c_ij1 = calcDist(i.getLocation(), j.getPickupLocation());
-        double c_ij2 = calcDist(i.getLocation(), j.getDeliveryLocation());
-        return (c_ij1 + c_ij2) / 2.0;
+        return calcDist(i.getAllLocations(), j.getAllLocations());
     }
 
-    private double calcDist(Shipment i, Shipment j) {
-        double c_i1j1 = calcDist(i.getPickupLocation(), j.getPickupLocation());
-        double c_i1j2 = calcDist(i.getPickupLocation(), j.getDeliveryLocation());
-        double c_i2j1 = calcDist(i.getDeliveryLocation(), j.getPickupLocation());
-        double c_i2j2 = calcDist(i.getDeliveryLocation(), j.getDeliveryLocation());
-        return (c_i1j1 + c_i1j2 + c_i2j1 + c_i2j2) / 4.0;
+    /**
+     * Calculates the average distance of the two set of positions.
+     *
+     * @param leftLocations
+     *            The position list of one side.
+     * @param rightLocations
+     *            The position list of the other side.
+     * @return The Average distance. (Returns 0 when any of the sides contains
+     *         no distances.)
+     */
+    private double calcDist(List<Location> leftLocations, List<Location> rightLocations) {
+        if (leftLocations.isEmpty() || rightLocations.isEmpty()) {
+            return 0d;
+        }
+        double totalDistance = 0d;
+        for (Location left : leftLocations) {
+            for (Location right : rightLocations) {
+                totalDistance += calcDist(left, right);
+            }
+        }
+        return totalDistance / (leftLocations.size() * rightLocations.size());
     }
 
     private double calcDist(Location location_i, Location location_j) {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/listener/RuinListener.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/listener/RuinListener.java
index 674c979ad..4c7a7752e 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/listener/RuinListener.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/listener/RuinListener.java
@@ -17,12 +17,12 @@
  */
 package com.graphhopper.jsprit.core.algorithm.ruin.listener;
 
+import java.util.Collection;
+
 import com.graphhopper.jsprit.core.algorithm.listener.SearchStrategyModuleListener;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 
-import java.util.Collection;
-
 
 /**
  * Listener that listens to the ruin-process. It informs whoever is interested about start, end and about a removal of a job.
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/listener/RuinListeners.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/listener/RuinListeners.java
index 7eebb7c04..240290c7c 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/listener/RuinListeners.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/listener/RuinListeners.java
@@ -18,13 +18,13 @@
 
 package com.graphhopper.jsprit.core.algorithm.ruin.listener;
 
-import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
 
+import com.graphhopper.jsprit.core.problem.job.Job;
+import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+
 
 public class RuinListeners {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/selector/SelectBest.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/selector/SelectBest.java
index 2b3de7160..27fc8506c 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/selector/SelectBest.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/selector/SelectBest.java
@@ -17,10 +17,10 @@
  */
 package com.graphhopper.jsprit.core.algorithm.selector;
 
-import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
-
 import java.util.Collection;
 
+import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
+
 
 public class SelectBest implements SolutionSelector {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/selector/SelectRandomly.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/selector/SelectRandomly.java
index 67c462ceb..f6ae740b1 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/selector/SelectRandomly.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/selector/SelectRandomly.java
@@ -17,14 +17,14 @@
  */
 package com.graphhopper.jsprit.core.algorithm.selector;
 
-import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
-import com.graphhopper.jsprit.core.util.RandomNumberGeneration;
-
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
 import java.util.Random;
 
+import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
+import com.graphhopper.jsprit.core.util.RandomNumberGeneration;
+
 
 public class SelectRandomly implements SolutionSelector {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/selector/SolutionSelector.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/selector/SolutionSelector.java
index 6156644fb..4a757d651 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/selector/SolutionSelector.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/selector/SolutionSelector.java
@@ -17,10 +17,10 @@
  */
 package com.graphhopper.jsprit.core.algorithm.selector;
 
-import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
-
 import java.util.Collection;
 
+import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
+
 
 public interface SolutionSelector {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/StateManager.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/StateManager.java
index 9d9fbb63e..270ada56b 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/StateManager.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/StateManager.java
@@ -17,8 +17,19 @@
  */
 package com.graphhopper.jsprit.core.algorithm.state;
 
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Map;
+
 import com.graphhopper.jsprit.core.algorithm.listener.IterationStartsListener;
-import com.graphhopper.jsprit.core.algorithm.recreate.listener.*;
+import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionEndsListener;
+import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionListener;
+import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionListeners;
+import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionStartsListener;
+import com.graphhopper.jsprit.core.algorithm.recreate.listener.JobInsertedListener;
 import com.graphhopper.jsprit.core.algorithm.ruin.listener.RuinListener;
 import com.graphhopper.jsprit.core.algorithm.ruin.listener.RuinListeners;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
@@ -34,8 +45,6 @@
 import com.graphhopper.jsprit.core.problem.solution.route.state.RouteAndActivityStateGetter;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 
-import java.util.*;
-
 /**
  * Manages states.
  * <p>
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateLoads.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateLoads.java
index 3fd7bd039..889ff6b3e 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateLoads.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateLoads.java
@@ -17,6 +17,8 @@
  */
 package com.graphhopper.jsprit.core.algorithm.state;
 
+import java.util.Collection;
+
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionStartsListener;
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.JobInsertedListener;
 import com.graphhopper.jsprit.core.problem.Capacity;
@@ -28,8 +30,6 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.ActivityVisitor;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 
-import java.util.Collection;
-
 
 /**
  * Updates load at start and end of route as well as at each activity. And update is triggered when either
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateSkills.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateSkills.java
index 70d7c8fae..f1c7a1742 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateSkills.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateSkills.java
@@ -21,6 +21,7 @@
 import com.graphhopper.jsprit.core.problem.Skills;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.ActivityVisitor;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 
 /**
@@ -46,8 +47,8 @@ public void begin(VehicleRoute route) {
 
     @Override
     public void visit(TourActivity activity) {
-        if (activity instanceof TourActivity.JobActivity) {
-            Skills skills = ((TourActivity.JobActivity) activity).getJob().getRequiredSkills();
+        if (activity instanceof JobActivity) {
+            Skills skills = ((JobActivity) activity).getJob().getRequiredSkills();
             skillBuilder.addAllSkills(skills.values());
         }
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateVehicleDependentPracticalTimeWindows.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateVehicleDependentPracticalTimeWindows.java
index 0fb6e0f8d..c066b1acd 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateVehicleDependentPracticalTimeWindows.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateVehicleDependentPracticalTimeWindows.java
@@ -18,6 +18,10 @@
 
 package com.graphhopper.jsprit.core.algorithm.state;
 
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Iterator;
+
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingActivityCosts;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
@@ -26,10 +30,6 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Iterator;
-
 public class UpdateVehicleDependentPracticalTimeWindows implements RouteVisitor, StateUpdater {
 
     @Override
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/VehicleDependentTraveledDistance.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/VehicleDependentTraveledDistance.java
index bde4058b8..5c1a1d887 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/VehicleDependentTraveledDistance.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/VehicleDependentTraveledDistance.java
@@ -18,6 +18,14 @@
 
 package com.graphhopper.jsprit.core.algorithm.state;
 
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.cost.TransportDistance;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
@@ -26,8 +34,6 @@
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeKey;
 
-import java.util.*;
-
 /**
  * Created by schroeder on 17/05/16.
  */
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/termination/IterationWithoutImprovementTermination.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/termination/IterationWithoutImprovementTermination.java
index c2ee487d3..d4534728f 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/termination/IterationWithoutImprovementTermination.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/termination/IterationWithoutImprovementTermination.java
@@ -17,10 +17,11 @@
  */
 package com.graphhopper.jsprit.core.algorithm.termination;
 
-import com.graphhopper.jsprit.core.algorithm.SearchStrategy;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.graphhopper.jsprit.core.algorithm.SearchStrategy;
+
 
 /**
  * Terminates algorithm prematurely based on iterations without any improvement (i.e. new solution acceptance).
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/termination/TimeTermination.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/termination/TimeTermination.java
index 39bfd0085..993126321 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/termination/TimeTermination.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/termination/TimeTermination.java
@@ -17,15 +17,16 @@
  */
 package com.graphhopper.jsprit.core.algorithm.termination;
 
+import java.util.Collection;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import com.graphhopper.jsprit.core.algorithm.SearchStrategy;
 import com.graphhopper.jsprit.core.algorithm.VehicleRoutingAlgorithm;
 import com.graphhopper.jsprit.core.algorithm.listener.AlgorithmStartsListener;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.util.Collection;
 
 
 /**
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/termination/VariationCoefficientTermination.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/termination/VariationCoefficientTermination.java
index 5e900b358..89b1c0ff3 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/termination/VariationCoefficientTermination.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/termination/VariationCoefficientTermination.java
@@ -17,6 +17,13 @@
  */
 package com.graphhopper.jsprit.core.algorithm.termination;
 
+import java.util.Collection;
+
+import org.apache.commons.math3.stat.StatUtils;
+import org.apache.commons.math3.stat.descriptive.moment.StandardDeviation;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import com.graphhopper.jsprit.core.algorithm.SearchStrategy;
 import com.graphhopper.jsprit.core.algorithm.VehicleRoutingAlgorithm;
 import com.graphhopper.jsprit.core.algorithm.listener.AlgorithmStartsListener;
@@ -25,12 +32,6 @@
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.util.Solutions;
-import org.apache.commons.math3.stat.StatUtils;
-import org.apache.commons.math3.stat.descriptive.moment.StandardDeviation;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.util.Collection;
 
 
 /**
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyser.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyser.java
index e6cedd77b..40cfe5642 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyser.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyser.java
@@ -18,8 +18,20 @@
 
 package com.graphhopper.jsprit.core.analysis;
 
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Set;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import com.graphhopper.jsprit.core.algorithm.VariablePlusFixedSolutionCostCalculatorFactory;
-import com.graphhopper.jsprit.core.algorithm.state.*;
+import com.graphhopper.jsprit.core.algorithm.state.InternalStates;
+import com.graphhopper.jsprit.core.algorithm.state.StateId;
+import com.graphhopper.jsprit.core.algorithm.state.StateManager;
+import com.graphhopper.jsprit.core.algorithm.state.StateUpdater;
+import com.graphhopper.jsprit.core.algorithm.state.UpdateActivityTimes;
+import com.graphhopper.jsprit.core.algorithm.state.UpdateVariableCosts;
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.cost.TransportDistance;
@@ -28,14 +40,19 @@
 import com.graphhopper.jsprit.core.problem.solution.SolutionCostCalculator;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.*;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.ActivityVisitor;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverServiceDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverShipmentDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivityNEW;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.End;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivityNEW;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupServiceDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupShipmentDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.ServiceActivityNEW;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.Start;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.util.ActivityTimeTracker;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.util.HashMap;
-import java.util.Map;
-import java.util.Set;
 
 /**
  * Calculates a set of statistics for a solution.
@@ -110,16 +127,16 @@ public void begin(VehicleRoute route) {
 
         @Override
         public void visit(TourActivity activity) {
-            if (activity instanceof PickupActivity) {
+            if (activity instanceof PickupActivityNEW) {
                 pickupCounter++;
-                pickedUp = Capacity.addup(pickedUp, ((PickupActivity) activity).getJob().getSize());
-                if (activity instanceof PickupService) {
+                pickedUp = Capacity.addup(pickedUp, ((PickupActivityNEW) activity).getJob().getSize());
+                if (activity instanceof PickupServiceDEPRECATED) {
                     deliverAtEndCounter++;
                 }
-            } else if (activity instanceof DeliveryActivity) {
+            } else if (activity instanceof DeliveryActivityNEW) {
                 deliveryCounter++;
-                delivered = Capacity.addup(delivered, ((DeliveryActivity) activity).getJob().getSize());
-                if (activity instanceof DeliverService) {
+                delivered = Capacity.addup(delivered, ((DeliveryActivityNEW) activity).getJob().getSize());
+                if (activity instanceof DeliverServiceDEPRECATED) {
                     pickupAtBeginningCounter++;
                 }
             }
@@ -144,7 +161,7 @@ public void finish() {
 
         private final StateManager stateManager;
 
-        private Map<String, PickupShipment> openShipments;
+        private Map<String, PickupShipmentDEPRECATED> openShipments;
 
         private VehicleRoute route;
 
@@ -163,7 +180,7 @@ private BackhaulAndShipmentUpdater(StateId backhaul_id, StateId shipment_id, Sta
         @Override
         public void begin(VehicleRoute route) {
             this.route = route;
-            openShipments = new HashMap<String, PickupShipment>();
+            openShipments = new HashMap<String, PickupShipmentDEPRECATED>();
             pickupOccured = false;
             shipmentConstraintOnRouteViolated = false;
             backhaulConstraintOnRouteViolated = false;
@@ -172,30 +189,34 @@ public void begin(VehicleRoute route) {
         @Override
         public void visit(TourActivity activity) {
             //shipment
-            if (activity instanceof PickupShipment) {
-                openShipments.put(((PickupShipment) activity).getJob().getId(), (PickupShipment) activity);
-            } else if (activity instanceof DeliverShipment) {
-                String jobId = ((DeliverShipment) activity).getJob().getId();
+            if (activity instanceof PickupShipmentDEPRECATED) {
+                openShipments.put(((PickupShipmentDEPRECATED) activity).getJob().getId(), (PickupShipmentDEPRECATED) activity);
+            } else if (activity instanceof DeliverShipmentDEPRECATED) {
+                String jobId = ((DeliverShipmentDEPRECATED) activity).getJob().getId();
                 if (!openShipments.containsKey(jobId)) {
                     //deliverShipment without pickupShipment
                     stateManager.putActivityState(activity, shipment_id, true);
                     shipmentConstraintOnRouteViolated = true;
                 } else {
-                    PickupShipment removed = openShipments.remove(jobId);
+                    PickupShipmentDEPRECATED removed = openShipments.remove(jobId);
                     stateManager.putActivityState(removed, shipment_id, false);
                     stateManager.putActivityState(activity, shipment_id, false);
                 }
-            } else stateManager.putActivityState(activity, shipment_id, false);
+            } else {
+                stateManager.putActivityState(activity, shipment_id, false);
+            }
 
             //backhaul
-            if (activity instanceof DeliverService && pickupOccured) {
+            if (activity instanceof DeliverServiceDEPRECATED && pickupOccured) {
                 stateManager.putActivityState(activity, backhaul_id, true);
                 backhaulConstraintOnRouteViolated = true;
             } else {
-                if (activity instanceof PickupService || activity instanceof ServiceActivity || activity instanceof PickupShipment) {
+                if (activity instanceof PickupServiceDEPRECATED || activity instanceof ServiceActivityNEW || activity instanceof PickupShipmentDEPRECATED) {
                     pickupOccured = true;
                     stateManager.putActivityState(activity, backhaul_id, false);
-                } else stateManager.putActivityState(activity, backhaul_id, false);
+                } else {
+                    stateManager.putActivityState(activity, backhaul_id, false);
+                }
             }
         }
 
@@ -310,16 +331,16 @@ private LastTransportUpdater(StateManager stateManager, VehicleRoutingTransportC
             this.stateManager = stateManager;
             this.transportCost = transportCost;
             this.distanceCalculator = distanceCalculator;
-            this.last_transport_distance_id = last_distance_id;
-            this.last_transport_time_id = last_time_id;
-            this.last_transport_cost_id = last_cost_id;
+            last_transport_distance_id = last_distance_id;
+            last_transport_time_id = last_time_id;
+            last_transport_cost_id = last_cost_id;
         }
 
         @Override
         public void begin(VehicleRoute route) {
             this.route = route;
-            this.prevAct = route.getStart();
-            this.prevActDeparture = route.getDepartureTime();
+            prevAct = route.getStart();
+            prevActDeparture = route.getDepartureTime();
         }
 
         @Override
@@ -377,7 +398,7 @@ private DistanceUpdater(StateId distance_id, StateManager stateManager, Transpor
         public void begin(VehicleRoute route) {
             sum_distance = 0.;
             this.route = route;
-            this.prevAct = route.getStart();
+            prevAct = route.getStart();
         }
 
         @Override
@@ -420,8 +441,8 @@ public void begin(VehicleRoute route) {
         @Override
         public void visit(TourActivity activity) {
             boolean violatedAtActivity = false;
-            if (activity instanceof TourActivity.JobActivity) {
-                Set<String> requiredForActivity = ((TourActivity.JobActivity) activity).getJob().getRequiredSkills().values();
+            if (activity instanceof JobActivity) {
+                Set<String> requiredForActivity = ((JobActivity) activity).getJob().getRequiredSkills().values();
                 for (String skill : requiredForActivity) {
                     if (!route.getVehicle().getSkills().containsSkill(skill)) {
                         violatedAtActivity = true;
@@ -512,7 +533,7 @@ public SolutionAnalyser(VehicleRoutingProblem vrp, VehicleRoutingProblemSolution
         this.solution = solution;
         this.distanceCalculator = distanceCalculator;
         initialise();
-        this.solutionCostCalculator = new VariablePlusFixedSolutionCostCalculatorFactory(stateManager).createCalculator();
+        solutionCostCalculator = new VariablePlusFixedSolutionCostCalculatorFactory(stateManager).createCalculator();
         refreshStates();
     }
 
@@ -526,13 +547,13 @@ public SolutionAnalyser(VehicleRoutingProblem vrp, VehicleRoutingProblemSolution
     }
 
     private void initialise() {
-        this.stateManager = new StateManager(vrp);
-        this.stateManager.updateTimeWindowStates();
-        this.stateManager.updateLoadStates();
-        this.stateManager.updateSkillStates();
+        stateManager = new StateManager(vrp);
+        stateManager.updateTimeWindowStates();
+        stateManager.updateLoadStates();
+        stateManager.updateSkillStates();
         activityPolicy = ActivityTimeTracker.ActivityPolicy.AS_SOON_AS_TIME_WINDOW_OPENS;
-        this.stateManager.addStateUpdater(new UpdateActivityTimes(vrp.getTransportCosts(), activityPolicy, vrp.getActivityCosts()));
-        this.stateManager.addStateUpdater(new UpdateVariableCosts(vrp.getActivityCosts(), vrp.getTransportCosts(), stateManager));
+        stateManager.addStateUpdater(new UpdateActivityTimes(vrp.getTransportCosts(), activityPolicy, vrp.getActivityCosts()));
+        stateManager.addStateUpdater(new UpdateVariableCosts(vrp.getActivityCosts(), vrp.getTransportCosts(), stateManager));
         waiting_time_id = stateManager.createStateId("waiting-time");
         transport_time_id = stateManager.createStateId("transport-time");
         service_time_id = stateManager.createStateId("service-time");
@@ -573,9 +594,15 @@ private void recalculateSolutionIndicators() {
             cap_violation = Capacity.addup(cap_violation, getCapacityViolation(route));
             fixed_costs += getFixedCosts(route);
             variable_transport_costs += getVariableTransportCosts(route);
-            if (hasSkillConstraintViolation(route)) hasSkillConstraintViolation = true;
-            if (hasShipmentConstraintViolation(route)) hasShipmentConstraintViolation = true;
-            if (hasBackhaulConstraintViolation(route)) hasBackhaulConstraintViolation = true;
+            if (hasSkillConstraintViolation(route)) {
+                hasSkillConstraintViolation = true;
+            }
+            if (hasShipmentConstraintViolation(route)) {
+                hasShipmentConstraintViolation = true;
+            }
+            if (hasBackhaulConstraintViolation(route)) {
+                hasBackhaulConstraintViolation = true;
+            }
             noPickups += getNumberOfPickups(route);
             noPickupsAtBeginning += getNumberOfPickupsAtBeginning(route);
             noDeliveries += getNumberOfDeliveries(route);
@@ -585,7 +612,7 @@ private void recalculateSolutionIndicators() {
             deliveryLoad = Capacity.addup(deliveryLoad, getLoadDelivered(route));
             deliveryLoadAtEnd = Capacity.addup(deliveryLoadAtEnd, getLoadAtEnd(route));
         }
-        total_costs = solutionCostCalculator.getCosts(this.solution);
+        total_costs = solutionCostCalculator.getCosts(solution);
     }
 
     private void clearSolutionIndicators() {
@@ -619,7 +646,7 @@ private void clearSolutionIndicators() {
      * @param newSolution to be analysed
      */
     public void informSolutionChanged(VehicleRoutingProblemSolution newSolution) {
-        this.solution = newSolution;
+        solution = newSolution;
         refreshStates();
     }
 
@@ -628,7 +655,9 @@ public void informSolutionChanged(VehicleRoutingProblemSolution newSolution) {
      * @return load at start location of specified route
      */
     public Capacity getLoadAtBeginning(VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
         return stateManager.getRouteState(route, InternalStates.LOAD_AT_BEGINNING, Capacity.class);
     }
 
@@ -637,7 +666,9 @@ public Capacity getLoadAtBeginning(VehicleRoute route) {
      * @return load at end location of specified route
      */
     public Capacity getLoadAtEnd(VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
         return stateManager.getRouteState(route, InternalStates.LOAD_AT_END, Capacity.class);
     }
 
@@ -646,7 +677,9 @@ public Capacity getLoadAtEnd(VehicleRoute route) {
      * @return max load of specified route, i.e. for each capacity dimension the max value.
      */
     public Capacity getMaxLoad(VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
         return stateManager.getRouteState(route, InternalStates.MAXLOAD, Capacity.class);
     }
 
@@ -657,10 +690,18 @@ public Capacity getMaxLoad(VehicleRoute route) {
      * Returns null if no load can be found.
      */
     public Capacity getLoadRightAfterActivity(TourActivity activity, VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
-        if (activity == null) throw new IllegalArgumentException("activity is missing.");
-        if (activity instanceof Start) return getLoadAtBeginning(route);
-        if (activity instanceof End) return getLoadAtEnd(route);
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
+        if (activity == null) {
+            throw new IllegalArgumentException("activity is missing.");
+        }
+        if (activity instanceof Start) {
+            return getLoadAtBeginning(route);
+        }
+        if (activity instanceof End) {
+            return getLoadAtEnd(route);
+        }
         verifyThatRouteContainsAct(activity, route);
         return stateManager.getActivityState(activity, InternalStates.LOAD, Capacity.class);
     }
@@ -677,16 +718,27 @@ private void verifyThatRouteContainsAct(TourActivity activity, VehicleRoute rout
      * route. If act is End, it returns the load atEnd of specified route.
      */
     public Capacity getLoadJustBeforeActivity(TourActivity activity, VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
-        if (activity == null) throw new IllegalArgumentException("activity is missing.");
-        if (activity instanceof Start) return getLoadAtBeginning(route);
-        if (activity instanceof End) return getLoadAtEnd(route);
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
+        if (activity == null) {
+            throw new IllegalArgumentException("activity is missing.");
+        }
+        if (activity instanceof Start) {
+            return getLoadAtBeginning(route);
+        }
+        if (activity instanceof End) {
+            return getLoadAtEnd(route);
+        }
         verifyThatRouteContainsAct(activity, route);
         Capacity afterAct = stateManager.getActivityState(activity, InternalStates.LOAD, Capacity.class);
         if (afterAct != null && activity.getSize() != null) {
             return Capacity.subtract(afterAct, activity.getSize());
-        } else if (afterAct != null) return afterAct;
-        else return null;
+        } else if (afterAct != null) {
+            return afterAct;
+        } else {
+            return null;
+        }
     }
 
     /**
@@ -694,7 +746,9 @@ public Capacity getLoadJustBeforeActivity(TourActivity activity, VehicleRoute ro
      * @return number of pickups picked up on specified route (without load at beginning)
      */
     public Integer getNumberOfPickups(VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
         return stateManager.getRouteState(route, stateManager.createStateId(PICKUP_COUNT), Integer.class);
     }
 
@@ -703,7 +757,9 @@ public Integer getNumberOfPickups(VehicleRoute route) {
      * @return number of deliveries delivered on specified route (without load at end)
      */
     public Integer getNumberOfDeliveries(VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
         return stateManager.getRouteState(route, stateManager.createStateId(DELIVERY_COUNT), Integer.class);
     }
 
@@ -712,7 +768,9 @@ public Integer getNumberOfDeliveries(VehicleRoute route) {
      * @return picked load (without load at beginning)
      */
     public Capacity getLoadPickedUp(VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
         return stateManager.getRouteState(route, stateManager.createStateId(LOAD_PICKED), Capacity.class);
     }
 
@@ -721,7 +779,9 @@ public Capacity getLoadPickedUp(VehicleRoute route) {
      * @return delivered laod (without load at end)
      */
     public Capacity getLoadDelivered(VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
         return stateManager.getRouteState(route, stateManager.createStateId(LOAD_DELIVERED), Capacity.class);
     }
 
@@ -730,7 +790,9 @@ public Capacity getLoadDelivered(VehicleRoute route) {
      * @return the capacity violation on this route, i.e. maxLoad - vehicleCapacity
      */
     public Capacity getCapacityViolation(VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
         Capacity maxLoad = getMaxLoad(route);
         return Capacity.max(Capacity.Builder.newInstance().build(), Capacity.subtract(maxLoad, route.getVehicle().getType().getCapacityDimensions()));
     }
@@ -742,7 +804,9 @@ public Capacity getCapacityViolation(VehicleRoute route) {
      * [[dimIndex=0][dimValue=0][dimIndex=1][dimValue=4]]
      */
     public Capacity getCapacityViolationAtBeginning(VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
         Capacity atBeginning = getLoadAtBeginning(route);
         return Capacity.max(Capacity.Builder.newInstance().build(), Capacity.subtract(atBeginning, route.getVehicle().getType().getCapacityDimensions()));
     }
@@ -754,7 +818,9 @@ public Capacity getCapacityViolationAtBeginning(VehicleRoute route) {
      * [[dimIndex=0][dimValue=0][dimIndex=1][dimValue=4]]
      */
     public Capacity getCapacityViolationAtEnd(VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
         Capacity atEnd = getLoadAtEnd(route);
         return Capacity.max(Capacity.Builder.newInstance().build(), Capacity.subtract(atEnd, route.getVehicle().getType().getCapacityDimensions()));
     }
@@ -767,8 +833,12 @@ public Capacity getCapacityViolationAtEnd(VehicleRoute route) {
      * [[dimIndex=0][dimValue=0][dimIndex=1][dimValue=4]]
      */
     public Capacity getCapacityViolationAfterActivity(TourActivity activity, VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
-        if (activity == null) throw new IllegalArgumentException("activity is missing.");
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
+        if (activity == null) {
+            throw new IllegalArgumentException("activity is missing.");
+        }
         Capacity afterAct = getLoadRightAfterActivity(activity, route);
         return Capacity.max(Capacity.Builder.newInstance().build(), Capacity.subtract(afterAct, route.getVehicle().getType().getCapacityDimensions()));
     }
@@ -778,7 +848,9 @@ public Capacity getCapacityViolationAfterActivity(TourActivity activity, Vehicle
      * @return time violation of route, i.e. sum of individual activity time window violations.
      */
     public Double getTimeWindowViolation(VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
         return stateManager.getRouteState(route, too_late_id, Double.class);
     }
 
@@ -788,8 +860,12 @@ public Double getTimeWindowViolation(VehicleRoute route) {
      * @return time violation of activity
      */
     public Double getTimeWindowViolationAtActivity(TourActivity activity, VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
-        if (activity == null) throw new IllegalArgumentException("activity is missing.");
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
+        if (activity == null) {
+            throw new IllegalArgumentException("activity is missing.");
+        }
         return Math.max(0, activity.getArrTime() - activity.getTheoreticalLatestOperationStartTime());
     }
 
@@ -799,7 +875,9 @@ public Double getTimeWindowViolationAtActivity(TourActivity activity, VehicleRou
      * activities on the specified route. Returns null if route is null or skill state cannot be found.
      */
     public Boolean hasSkillConstraintViolation(VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
         return stateManager.getRouteState(route, skill_id, Boolean.class);
     }
 
@@ -811,10 +889,18 @@ public Boolean hasSkillConstraintViolation(VehicleRoute route) {
      * found. If specified activity is Start or End, it returns false.
      */
     public Boolean hasSkillConstraintViolationAtActivity(TourActivity activity, VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
-        if (activity == null) throw new IllegalArgumentException("activity is missing.");
-        if (activity instanceof Start) return false;
-        if (activity instanceof End) return false;
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
+        if (activity == null) {
+            throw new IllegalArgumentException("activity is missing.");
+        }
+        if (activity instanceof Start) {
+            return false;
+        }
+        if (activity instanceof End) {
+            return false;
+        }
         verifyThatRouteContainsAct(activity, route);
         return stateManager.getActivityState(activity, skill_id, Boolean.class);
     }
@@ -830,7 +916,9 @@ public Boolean hasSkillConstraintViolationAtActivity(TourActivity activity, Vehi
      * state can be found. In latter case try routeChanged(route).
      */
     public Boolean hasBackhaulConstraintViolation(VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
         return stateManager.getRouteState(route, backhaul_id, Boolean.class);
     }
 
@@ -841,10 +929,18 @@ public Boolean hasBackhaulConstraintViolation(VehicleRoute route) {
      * Null if specified route does not contain specified activity.
      */
     public Boolean hasBackhaulConstraintViolationAtActivity(TourActivity activity, VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
-        if (activity == null) throw new IllegalArgumentException("activity is missing.");
-        if (activity instanceof Start) return false;
-        if (activity instanceof End) return false;
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
+        if (activity == null) {
+            throw new IllegalArgumentException("activity is missing.");
+        }
+        if (activity instanceof Start) {
+            return false;
+        }
+        if (activity instanceof End) {
+            return false;
+        }
         verifyThatRouteContainsAct(activity, route);
         return stateManager.getActivityState(activity, backhaul_id, Boolean.class);
     }
@@ -858,7 +954,9 @@ public Boolean hasBackhaulConstraintViolationAtActivity(TourActivity activity, V
      * @return true if violated, false otherwise. Null if no state can be found or specified route is null.
      */
     public Boolean hasShipmentConstraintViolation(VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
         return stateManager.getRouteState(route, shipment_id, Boolean.class);
     }
 
@@ -872,10 +970,18 @@ public Boolean hasShipmentConstraintViolation(VehicleRoute route) {
      * false. Returns null if either specified activity or route is null or route does not containt activity.
      */
     public Boolean hasShipmentConstraintViolationAtActivity(TourActivity activity, VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
-        if (activity == null) throw new IllegalArgumentException("activity is missing.");
-        if (activity instanceof Start) return false;
-        if (activity instanceof End) return false;
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
+        if (activity == null) {
+            throw new IllegalArgumentException("activity is missing.");
+        }
+        if (activity instanceof Start) {
+            return false;
+        }
+        if (activity instanceof End) {
+            return false;
+        }
         verifyThatRouteContainsAct(activity, route);
         return stateManager.getActivityState(activity, shipment_id, Boolean.class);
     }
@@ -886,7 +992,9 @@ public Boolean hasShipmentConstraintViolationAtActivity(TourActivity activity, V
      * @return operation time of this route, i.e. endTime - startTime of specified route
      */
     public Double getOperationTime(VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
         return route.getEnd().getArrTime() - route.getStart().getEndTime();
     }
 
@@ -896,7 +1004,9 @@ public Double getOperationTime(VehicleRoute route) {
      * Returns null if no waiting time value exists for the specified route
      */
     public Double getWaitingTime(VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
         return stateManager.getRouteState(route, waiting_time_id, Double.class);
     }
 
@@ -905,7 +1015,9 @@ public Double getWaitingTime(VehicleRoute route) {
      * @return total transport time of specified route. Returns null if no time value exists for the specified route.
      */
     public Double getTransportTime(VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
         return stateManager.getRouteState(route, transport_time_id, Double.class);
     }
 
@@ -914,7 +1026,9 @@ public Double getTransportTime(VehicleRoute route) {
      * @return total service time of specified route. Returns null if no time value exists for specified route.
      */
     public Double getServiceTime(VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
         return stateManager.getRouteState(route, service_time_id, Double.class);
     }
 
@@ -924,7 +1038,9 @@ public Double getServiceTime(VehicleRoute route) {
      * vrp.getTransportCosts().getTransportCost(fromId,toId,...)
      */
     public Double getVariableTransportCosts(VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
 
         return stateManager.getRouteState(route, InternalStates.COSTS, Double.class);
     }
@@ -934,7 +1050,9 @@ public Double getVariableTransportCosts(VehicleRoute route) {
      * @return fixed costs of route, i.e. fixed costs of employed vehicle on this route.
      */
     public Double getFixedCosts(VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
         return route.getVehicle().getType().getVehicleCostParams().fix;
     }
 
@@ -946,10 +1064,18 @@ public Double getFixedCosts(VehicleRoute route) {
      * If activity is start, it returns 0.. If it is end, it returns .getVariableTransportCosts(route).
      */
     public Double getVariableTransportCostsAtActivity(TourActivity activity, VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
-        if (activity == null) throw new IllegalArgumentException("activity is missing.");
-        if (activity instanceof Start) return 0.;
-        if (activity instanceof End) return getVariableTransportCosts(route);
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
+        if (activity == null) {
+            throw new IllegalArgumentException("activity is missing.");
+        }
+        if (activity instanceof Start) {
+            return 0.;
+        }
+        if (activity instanceof End) {
+            return getVariableTransportCosts(route);
+        }
         verifyThatRouteContainsAct(activity, route);
         return stateManager.getActivityState(activity, InternalStates.COSTS, Double.class);
     }
@@ -960,10 +1086,18 @@ public Double getVariableTransportCostsAtActivity(TourActivity activity, Vehicle
      * @return transport time at the activity, i.e. the total time spent driving since the start of the route to the specified activity.
      */
     public Double getTransportTimeAtActivity(TourActivity activity, VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
-        if (activity == null) throw new IllegalArgumentException("activity is missing.");
-        if (activity instanceof Start) return 0.;
-        if (activity instanceof End) return getTransportTime(route);
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
+        if (activity == null) {
+            throw new IllegalArgumentException("activity is missing.");
+        }
+        if (activity instanceof Start) {
+            return 0.;
+        }
+        if (activity instanceof End) {
+            return getTransportTime(route);
+        }
         verifyThatRouteContainsAct(activity, route);
         return stateManager.getActivityState(activity, transport_time_id, Double.class);
     }
@@ -997,10 +1131,18 @@ public Double getLastTransportCostAtActivity(TourActivity activity, VehicleRoute
 
 
     private Double getLastTransport(TourActivity activity, VehicleRoute route, StateId id) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
-        if (activity == null) throw new IllegalArgumentException("activity is missing.");
-        if (activity instanceof Start) return 0.;
-        if (activity instanceof End) return stateManager.getRouteState(route, id, Double.class);
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
+        if (activity == null) {
+            throw new IllegalArgumentException("activity is missing.");
+        }
+        if (activity instanceof Start) {
+            return 0.;
+        }
+        if (activity instanceof End) {
+            return stateManager.getRouteState(route, id, Double.class);
+        }
         verifyThatRouteContainsAct(activity, route);
         return stateManager.getActivityState(activity, id, Double.class);
     }
@@ -1011,8 +1153,12 @@ private Double getLastTransport(TourActivity activity, VehicleRoute route, State
      * @return waiting time at activity
      */
     public Double getWaitingTimeAtActivity(TourActivity activity, VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
-        if (activity == null) throw new IllegalArgumentException("activity is missing.");
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
+        if (activity == null) {
+            throw new IllegalArgumentException("activity is missing.");
+        }
         double waitingTime = 0.;
         if (activityPolicy.equals(ActivityTimeTracker.ActivityPolicy.AS_SOON_AS_TIME_WINDOW_OPENS)) {
             waitingTime = Math.max(0, activity.getTheoreticalEarliestOperationStartTime() - activity.getArrTime());
@@ -1025,7 +1171,9 @@ public Double getWaitingTimeAtActivity(TourActivity activity, VehicleRoute route
      * @return total distance of route
      */
     public Double getDistance(VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
         return stateManager.getRouteState(route, distance_id, Double.class);
     }
 
@@ -1034,10 +1182,18 @@ public Double getDistance(VehicleRoute route) {
      * @return distance at activity
      */
     public Double getDistanceAtActivity(TourActivity activity, VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
-        if (activity == null) throw new IllegalArgumentException("activity is missing.");
-        if (activity instanceof Start) return 0.;
-        if (activity instanceof End) return getDistance(route);
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
+        if (activity == null) {
+            throw new IllegalArgumentException("activity is missing.");
+        }
+        if (activity instanceof Start) {
+            return 0.;
+        }
+        if (activity instanceof End) {
+            return getDistance(route);
+        }
         verifyThatRouteContainsAct(activity, route);
         return stateManager.getActivityState(activity, distance_id, Double.class);
     }
@@ -1054,7 +1210,9 @@ public Integer getNumberOfPickups() {
      * @return number of pickups at beginning
      */
     public Integer getNumberOfPickupsAtBeginning(VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
         return stateManager.getRouteState(route, stateManager.createStateId(PICKUP_COUNT_AT_BEGINNING), Integer.class);
     }
 
@@ -1084,7 +1242,9 @@ public Integer getNumberOfDeliveriesAtEnd() {
      * @return number of deliveries at end of specified route
      */
     public Integer getNumberOfDeliveriesAtEnd(VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route is missing.");
+        if (route == null) {
+            throw new IllegalArgumentException("route is missing.");
+        }
         return stateManager.getRouteState(route, stateManager.createStateId(DELIVERY_COUNT_AT_END), Integer.class);
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/AbstractJob.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/AbstractJob.java
deleted file mode 100644
index 81ef63e76..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/AbstractJob.java
+++ /dev/null
@@ -1,38 +0,0 @@
-/*
- * Licensed to GraphHopper GmbH under one or more contributor
- * license agreements. See the NOTICE file distributed with this work for
- * additional information regarding copyright ownership.
- *
- * GraphHopper GmbH licenses this file to you under the Apache License,
- * Version 2.0 (the "License"); you may not use this file except in
- * compliance with the License. You may obtain a copy of the License at
- *
- *       http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.graphhopper.jsprit.core.problem;
-
-import com.graphhopper.jsprit.core.problem.job.Job;
-
-/**
- * Created by schroeder on 14.07.14.
- */
-public abstract class AbstractJob implements Job {
-
-    private int index;
-
-    public int getIndex() {
-        return index;
-    }
-
-    protected void setIndex(int index) {
-        this.index = index;
-    }
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/Capacity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/Capacity.java
index 0017d21ab..5fc6040d8 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/Capacity.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/Capacity.java
@@ -28,6 +28,8 @@
  */
 public class Capacity {
 
+    public static final Capacity EMPTY = Capacity.Builder.newInstance().build();
+
     /**
      * Adds up two capacities, i.e. sums up each and every capacity dimension, and returns the resulting Capacity.
      * <p>
@@ -39,7 +41,9 @@
      * @throws NullPointerException if one of the args is null
      */
     public static Capacity addup(Capacity cap1, Capacity cap2) {
-        if (cap1 == null || cap2 == null) throw new NullPointerException("arguments must not be null");
+        if (cap1 == null || cap2 == null) {
+            throw new NullPointerException("arguments must not be null");
+        }
         Capacity.Builder capacityBuilder = Capacity.Builder.newInstance();
         for (int i = 0; i < Math.max(cap1.getNuOfDimensions(), cap2.getNuOfDimensions()); i++) {
             capacityBuilder.addDimension(i, cap1.get(i) + cap2.get(i));
@@ -57,7 +61,9 @@ public static Capacity addup(Capacity cap1, Capacity cap2) {
      * @throws IllegalStateException if number of capacityDimensions of cap1 and cap2 are different (i.e. <code>cap1.getNuOfDimension() != cap2.getNuOfDimension()</code>).
      */
     public static Capacity subtract(Capacity cap, Capacity cap2subtract) {
-        if (cap == null || cap2subtract == null) throw new NullPointerException("arguments must not be null");
+        if (cap == null || cap2subtract == null) {
+            throw new NullPointerException("arguments must not be null");
+        }
         Capacity.Builder capacityBuilder = Capacity.Builder.newInstance();
         for (int i = 0; i < Math.max(cap.getNuOfDimensions(), cap2subtract.getNuOfDimensions()); i++) {
             int dimValue = cap.get(i) - cap2subtract.get(i);
@@ -74,7 +80,9 @@ public static Capacity subtract(Capacity cap, Capacity cap2subtract) {
      * @throws NullPointerException if one of the args is null
      */
     public static Capacity invert(Capacity cap2invert) {
-        if (cap2invert == null) throw new NullPointerException("arguments must not be null");
+        if (cap2invert == null) {
+            throw new NullPointerException("arguments must not be null");
+        }
         Capacity.Builder capacityBuilder = Capacity.Builder.newInstance();
         for (int i = 0; i < cap2invert.getNuOfDimensions(); i++) {
             int dimValue = cap2invert.get(i) * -1;
@@ -108,7 +116,9 @@ public static double divide(Capacity numerator, Capacity denominator) {
                 sumQuotients += (double) numerator.get(index) / (double) denominator.get(index);
             }
         }
-        if (nuOfDimensions > 0) return sumQuotients / (double) nuOfDimensions;
+        if (nuOfDimensions > 0) {
+            return sumQuotients / nuOfDimensions;
+        }
         return 0.0;
     }
 
@@ -119,7 +129,9 @@ public static double divide(Capacity numerator, Capacity denominator) {
      * @return copy
      */
     public static Capacity copyOf(Capacity capacity) {
-        if (capacity == null) return null;
+        if (capacity == null) {
+            return null;
+        }
         return new Capacity(capacity);
     }
 
@@ -165,7 +177,7 @@ public Builder addDimension(int index, int dimValue) {
                 int[] newDimensions = new int[requiredSize];
                 copy(dimensions, newDimensions);
                 newDimensions[index] = dimValue;
-                this.dimensions = newDimensions;
+                dimensions = newDimensions;
             }
             return this;
         }
@@ -196,9 +208,9 @@ public Capacity build() {
      * @param capacity capacity to be copied
      */
     Capacity(Capacity capacity) {
-        this.dimensions = new int[capacity.getNuOfDimensions()];
+        dimensions = new int[capacity.getNuOfDimensions()];
         for (int i = 0; i < capacity.getNuOfDimensions(); i++) {
-            this.dimensions[i] = capacity.get(i);
+            dimensions[i] = capacity.get(i);
         }
     }
 
@@ -206,6 +218,11 @@ public Capacity build() {
         dimensions = builder.dimensions;
     }
 
+    private Capacity(int numberOfDimensions) {
+        dimensions = new int[numberOfDimensions];
+        Arrays.fill(dimensions, 0); // Just to be safe, not needed
+    }
+
     /**
      * Returns the number of specified capacity dimensions.
      *
@@ -225,7 +242,9 @@ public int getNuOfDimensions() {
      * @return the according dimension value
      */
     public int get(int index) {
-        if (index < dimensions.length) return dimensions[index];
+        if (index < dimensions.length) {
+            return dimensions[index];
+        }
         return 0;
     }
 
@@ -237,9 +256,13 @@ public int get(int index) {
      * @throws NullPointerException if one of the args is null
      */
     public boolean isLessOrEqual(Capacity toCompare) {
-        if (toCompare == null) throw new NullPointerException();
-        for (int i = 0; i < this.getNuOfDimensions(); i++) {
-            if (this.get(i) > toCompare.get(i)) return false;
+        if (toCompare == null) {
+            throw new NullPointerException();
+        }
+        for (int i = 0; i < getNuOfDimensions(); i++) {
+            if (get(i) > toCompare.get(i)) {
+                return false;
+            }
         }
         return true;
     }
@@ -252,9 +275,13 @@ public boolean isLessOrEqual(Capacity toCompare) {
      * @throws NullPointerException if one of the args is null
      */
     public boolean isGreaterOrEqual(Capacity toCompare) {
-        if (toCompare == null) throw new NullPointerException();
-        for (int i = 0; i < Math.max(this.getNuOfDimensions(), toCompare.getNuOfDimensions()); i++) {
-            if (this.get(i) < toCompare.get(i)) return false;
+        if (toCompare == null) {
+            throw new NullPointerException();
+        }
+        for (int i = 0; i < Math.max(getNuOfDimensions(), toCompare.getNuOfDimensions()); i++) {
+            if (get(i) < toCompare.get(i)) {
+                return false;
+            }
         }
         return true;
     }
@@ -276,7 +303,9 @@ public String toString() {
      * @return capacity maximum of each capacity dimension
      */
     public static Capacity max(Capacity cap1, Capacity cap2) {
-        if (cap1 == null || cap2 == null) throw new IllegalArgumentException("arg must not be null");
+        if (cap1 == null || cap2 == null) {
+            throw new IllegalArgumentException("arg must not be null");
+        }
         Capacity.Builder toReturnBuilder = Capacity.Builder.newInstance();
         for (int i = 0; i < Math.max(cap1.getNuOfDimensions(), cap2.getNuOfDimensions()); i++) {
             toReturnBuilder.addDimension(i, Math.max(cap1.get(i), cap2.get(i)));
@@ -285,7 +314,9 @@ public static Capacity max(Capacity cap1, Capacity cap2) {
     }
 
     public static Capacity min(Capacity cap1, Capacity cap2) {
-        if (cap1 == null || cap2 == null) throw new IllegalArgumentException("arg must not be null");
+        if (cap1 == null || cap2 == null) {
+            throw new IllegalArgumentException("arg must not be null");
+        }
         Capacity.Builder toReturnBuilder = Capacity.Builder.newInstance();
         for (int i = 0; i < Math.max(cap1.getNuOfDimensions(), cap2.getNuOfDimensions()); i++) {
             toReturnBuilder.addDimension(i, Math.min(cap1.get(i), cap2.get(i)));
@@ -295,12 +326,18 @@ public static Capacity min(Capacity cap1, Capacity cap2) {
 
     @Override
     public boolean equals(Object o) {
-        if (this == o) return true;
-        if (!(o instanceof Capacity)) return false;
+        if (this == o) {
+            return true;
+        }
+        if (!(o instanceof Capacity)) {
+            return false;
+        }
 
         Capacity capacity = (Capacity) o;
 
-        if (!Arrays.equals(dimensions, capacity.dimensions)) return false;
+        if (!Arrays.equals(dimensions, capacity.dimensions)) {
+            return false;
+        }
 
         return true;
     }
@@ -309,4 +346,14 @@ public boolean equals(Object o) {
     public int hashCode() {
         return Arrays.hashCode(dimensions);
     }
+
+
+    public static Capacity createNullCapacity(Capacity capacity) {
+        return capacity == null ? null : new Capacity(capacity.getNuOfDimensions());
+    }
+
+    public static Capacity createNullCapacity(int numberOfDimensions) {
+        return new Capacity(numberOfDimensions);
+    }
+
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/CopyJobActivityFactory.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/CopyJobActivityFactory.java
new file mode 100644
index 000000000..e514a7d9d
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/CopyJobActivityFactory.java
@@ -0,0 +1,14 @@
+package com.graphhopper.jsprit.core.problem;
+
+import java.util.List;
+
+import com.graphhopper.jsprit.core.problem.job.Job;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
+
+public class CopyJobActivityFactory implements JobActivityFactory {
+
+    @Override
+    public List<JobActivity> createActivities(Job job) {
+        return job.getActivityList().getAllDuplicated();
+    }
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/JobActivityFactory.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/JobActivityFactory.java
index 8ee69533d..da186d680 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/JobActivityFactory.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/JobActivityFactory.java
@@ -18,15 +18,16 @@
 
 package com.graphhopper.jsprit.core.problem;
 
-import com.graphhopper.jsprit.core.problem.job.Job;
-
 import java.util.List;
 
+import com.graphhopper.jsprit.core.problem.job.Job;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
+
 /**
  * JobActivityFactory that creates the activities to the specified job.
  */
 public interface JobActivityFactory {
 
-    public List<AbstractActivity> createActivities(Job job);
+    public List<JobActivity> createActivities(Job job);
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/SimpleJobActivityFactory.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/SimpleJobActivityFactory.java
new file mode 100644
index 000000000..6c7cf661c
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/SimpleJobActivityFactory.java
@@ -0,0 +1,14 @@
+package com.graphhopper.jsprit.core.problem;
+
+import java.util.List;
+
+import com.graphhopper.jsprit.core.problem.job.Job;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
+
+public class SimpleJobActivityFactory implements JobActivityFactory {
+
+    @Override
+    public List<JobActivity> createActivities(Job job) {
+        return job.getActivityList().getAll();
+    }
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblem.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblem.java
index 544c4fe93..dbe3b6863 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblem.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblem.java
@@ -17,17 +17,28 @@
  */
 package com.graphhopper.jsprit.core.problem;
 
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.LinkedHashMap;
+import java.util.LinkedHashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingActivityCosts;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.cost.WaitingTimeCosts;
-import com.graphhopper.jsprit.core.problem.job.Break;
+import com.graphhopper.jsprit.core.problem.job.AbstractJob;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.BreakActivity;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.DefaultShipmentActivityFactory;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.DefaultTourActivityFactory;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.AbstractActivityNEW;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
@@ -35,10 +46,6 @@
 import com.graphhopper.jsprit.core.util.Coordinate;
 import com.graphhopper.jsprit.core.util.CrowFlyCosts;
 import com.graphhopper.jsprit.core.util.Locations;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.util.*;
 
 
 
@@ -100,18 +107,9 @@ public static Builder newInstance() {
         private JobActivityFactory jobActivityFactory = new JobActivityFactory() {
 
             @Override
-            public List<AbstractActivity> createActivities(Job job) {
-                List<AbstractActivity> acts = new ArrayList<AbstractActivity>();
-                if( job instanceof Break){
-                    acts.add(BreakActivity.newInstance((Break) job));
-                }
-                else if (job instanceof Service) {
-                    acts.add(serviceActivityFactory.createActivity((Service) job));
-                } else if (job instanceof Shipment) {
-                    acts.add(shipmentActivityFactory.createPickup((Shipment) job));
-                    acts.add(shipmentActivityFactory.createDelivery((Shipment) job));
-                }
-                return acts;
+            public List<JobActivity> createActivities(Job job) {
+                // Now its safe, but be carful if another implementation of Job is made
+                return ((AbstractJob) job).getActivityList().getAll();
             }
 
         };
@@ -126,11 +124,14 @@ else if (job instanceof Service) {
 
         private Map<VehicleTypeKey, Integer> typeKeyIndices = new HashMap<VehicleTypeKey, Integer>();
 
-        private Map<Job, List<AbstractActivity>> activityMap = new HashMap<Job, List<AbstractActivity>>();
-
-        private final DefaultShipmentActivityFactory shipmentActivityFactory = new DefaultShipmentActivityFactory();
+        // Deprecated ?
+        //        private Map<Job, List<JobActivity>> activityMap = new HashMap<>();
 
-        private final DefaultTourActivityFactory serviceActivityFactory = new DefaultTourActivityFactory();
+        // private final DefaultShipmentActivityFactory shipmentActivityFactory
+        // = new DefaultShipmentActivityFactory();
+        //
+        // private final DefaultTourActivityFactory serviceActivityFactory = new
+        // DefaultTourActivityFactory();
 
         private void incJobIndexCounter() {
             jobIndexCounter++;
@@ -183,7 +184,7 @@ public Coordinate getCoord(String id) {
          * @see VehicleRoutingTransportCosts
          */
         public Builder setRoutingCost(VehicleRoutingTransportCosts costs) {
-            this.transportCosts = costs;
+            transportCosts = costs;
             return this;
         }
 
@@ -217,7 +218,9 @@ public Builder setFleetSize(FleetSize fleetSize) {
          *
          */
         public Builder addJob(Job job) {
-            if (!(job instanceof AbstractJob)) throw new IllegalArgumentException("job must be of type AbstractJob");
+            if (!(job instanceof AbstractJob)) {
+                throw new IllegalArgumentException("job must be of type AbstractJob");
+            }
             return addJob((AbstractJob) job);
         }
 
@@ -231,10 +234,9 @@ public Builder addJob(Job job) {
          * @throws IllegalStateException if job is neither a shipment nor a service, or jobId has already been added.
          */
         public Builder addJob(AbstractJob job) {
-            if (tentativeJobs.containsKey(job.getId()))
+            if (tentativeJobs.containsKey(job.getId())) {
                 throw new IllegalArgumentException("vehicle routing problem already contains a service or shipment with id " + job.getId() + ". make sure you use unique ids for all services and shipments");
-            if (!(job instanceof Service || job instanceof Shipment))
-                throw new IllegalArgumentException("job must be either a service or a shipment");
+            }
             job.setIndex(jobIndexCounter);
             incJobIndexCounter();
             tentativeJobs.put(job.getId(), job);
@@ -243,19 +245,7 @@ public Builder addJob(AbstractJob job) {
         }
 
         private void addLocationToTentativeLocations(Job job) {
-            if (job instanceof Service) {
-                Location location = ((Service) job).getLocation();
-//                tentative_coordinates.put(location.getId(), location.getCoordinate());
-                addLocationToTentativeLocations(location);
-            } else if (job instanceof Shipment) {
-                Shipment shipment = (Shipment) job;
-                Location pickupLocation = shipment.getPickupLocation();
-                addLocationToTentativeLocations(pickupLocation);
-//                tentative_coordinates.put(pickupLocation.getId(), pickupLocation.getCoordinate());
-                Location deliveryLocation = shipment.getDeliveryLocation();
-                addLocationToTentativeLocations(deliveryLocation);
-//                tentative_coordinates.put(deliveryLocation.getId(), deliveryLocation.getCoordinate());
-            }
+            job.getAllLocations().forEach(l -> addLocationToTentativeLocations(l));
         }
 
         private void addLocationToTentativeLocations(Location location) {
@@ -264,19 +254,16 @@ private void addLocationToTentativeLocations(Location location) {
         }
 
         private void addJobToFinalJobMapAndCreateActivities(Job job) {
-            if (job instanceof Service) {
-                Service service = (Service) job;
-                addService(service);
-            } else if (job instanceof Shipment) {
-                Shipment shipment = (Shipment) job;
-                addShipment(shipment);
+            addLocationToTentativeLocations(job);
+            if (jobs.containsKey(job.getId())) {
+                logger.warn("job " + job + " is already in job list. overrides existing job.");
             }
-            List<AbstractActivity> jobActs = jobActivityFactory.createActivities(job);
-            for (AbstractActivity act : jobActs) {
+            jobs.put(job.getId(), job);
+
+            job.getActivityList().getAll().forEach(act -> {
                 act.setIndex(activityIndexCounter);
                 incActivityIndexCounter();
-            }
-            activityMap.put(job, jobActs);
+            });
         }
 
         private boolean addBreaksToActivityMap() {
@@ -284,13 +271,14 @@ private boolean addBreaksToActivityMap() {
             for (Vehicle v : uniqueVehicles) {
                 if (v.getBreak() != null) {
                     hasBreaks = true;
-                    List<AbstractActivity> breakActivities = jobActivityFactory.createActivities(v.getBreak());
-                    if(breakActivities.isEmpty()) throw new IllegalArgumentException("at least one activity for break needs to be created by activityFactory");
-                    for(AbstractActivity act : breakActivities){
+                    List<JobActivity> breakActivities = jobActivityFactory.createActivities(v.getBreak());
+                    if(breakActivities.isEmpty()) {
+                        throw new IllegalArgumentException("at least one activity for break needs to be created by activityFactory");
+                    }
+                    for (AbstractActivityNEW act : breakActivities) {
                         act.setIndex(activityIndexCounter);
                         incActivityIndexCounter();
                     }
-                    activityMap.put(v.getBreak(), breakActivities);
                 }
             }
             return hasBreaks;
@@ -308,14 +296,15 @@ public Builder addInitialVehicleRoute(VehicleRoute route) {
                 addedVehicleIds.add(route.getVehicle().getId());
             }
             for (TourActivity act : route.getActivities()) {
-                AbstractActivity abstractAct = (AbstractActivity) act;
+                AbstractActivityNEW abstractAct = (AbstractActivityNEW) act;
                 abstractAct.setIndex(activityIndexCounter);
                 incActivityIndexCounter();
-                if (act instanceof TourActivity.JobActivity) {
-                    Job job = ((TourActivity.JobActivity) act).getJob();
+                if (act instanceof JobActivity) {
+                    JobActivity jobActivity = (JobActivity) act;
+                    Job job = jobActivity.getJob();
                     jobsInInitialRoutes.add(job.getId());
                     addLocationToTentativeLocations(job);
-                    registerJobAndActivity(abstractAct, job);
+                    //                    registerJobAndActivity((JobActivity) abstractAct, job);
                 }
             }
             initialRoutes.add(route);
@@ -324,14 +313,15 @@ public Builder addInitialVehicleRoute(VehicleRoute route) {
 
 
 
-        private void registerJobAndActivity(AbstractActivity abstractAct, Job job) {
-            if (activityMap.containsKey(job)) activityMap.get(job).add(abstractAct);
-            else {
-                List<AbstractActivity> actList = new ArrayList<AbstractActivity>();
-                actList.add(abstractAct);
-                activityMap.put(job, actList);
-            }
-        }
+        //        private void registerJobAndActivity(JobActivity abstractAct, Job job) {
+        //            if (activityMap.containsKey(job)) {
+        //                activityMap.get(job).add(abstractAct);
+        //            } else {
+        //                List<JobActivity> actList = new ArrayList<>();
+        //                actList.add(abstractAct);
+        //                activityMap.put(job, actList);
+        //            }
+        //        }
 
         /**
          * Adds a collection of initial vehicle routes.
@@ -345,17 +335,6 @@ public Builder addInitialVehicleRoutes(Collection<VehicleRoute> routes) {
             }
             return this;
         }
-
-        private void addShipment(Shipment job) {
-            if (jobs.containsKey(job.getId())) {
-                logger.warn("job " + job + " already in job list. overrides existing job.");
-            }
-            addLocationToTentativeLocations(job);
-//            tentative_coordinates.put(job.getPickupLocation().getId(), job.getPickupLocation().getCoordinate());
-//            tentative_coordinates.put(job.getDeliveryLocation().getId(), job.getDeliveryLocation().getCoordinate());
-            jobs.put(job.getId(), job);
-        }
-
         /**
          * Adds a vehicle.
          *
@@ -363,8 +342,9 @@ private void addShipment(Shipment job) {
          * @return this builder
          * */
         public Builder addVehicle(Vehicle vehicle) {
-            if (!(vehicle instanceof AbstractVehicle))
+            if (!(vehicle instanceof AbstractVehicle)) {
                 throw new IllegalArgumentException("vehicle must be an AbstractVehicle");
+            }
             return addVehicle((AbstractVehicle) vehicle);
         }
 
@@ -377,8 +357,9 @@ public Builder addVehicle(Vehicle vehicle) {
         public Builder addVehicle(AbstractVehicle vehicle) {
             if(addedVehicleIds.contains(vehicle.getId())){
                 throw new IllegalArgumentException("problem already contains a vehicle with id " + vehicle.getId() + ". choose unique ids for each vehicle.");
+            } else {
+                addedVehicleIds.add(vehicle.getId());
             }
-            else addedVehicleIds.add(vehicle.getId());
             if (!uniqueVehicles.contains(vehicle)) {
                 vehicle.setIndex(vehicleIndexCounter);
                 incVehicleIndexCounter();
@@ -396,10 +377,10 @@ public Builder addVehicle(AbstractVehicle vehicle) {
             }
             String startLocationId = vehicle.getStartLocation().getId();
             addLocationToTentativeLocations(vehicle.getStartLocation());
-//            tentative_coordinates.put(startLocationId, vehicle.getStartLocation().getCoordinate());
+            //            tentative_coordinates.put(startLocationId, vehicle.getStartLocation().getCoordinate());
             if (!vehicle.getEndLocation().getId().equals(startLocationId)) {
                 addLocationToTentativeLocations(vehicle.getEndLocation());
-//                tentative_coordinates.put(vehicle.getEndLocation().getId(), vehicle.getEndLocation().getCoordinate());
+                //                tentative_coordinates.put(vehicle.getEndLocation().getId(), vehicle.getEndLocation().getCoordinate());
             }
             return this;
         }
@@ -439,8 +420,9 @@ public VehicleRoutingProblem build() {
                 }
             }
             boolean hasBreaks = addBreaksToActivityMap();
-            if (hasBreaks && fleetSize.equals(FleetSize.INFINITE))
+            if (hasBreaks && fleetSize.equals(FleetSize.INFINITE)) {
                 throw new UnsupportedOperationException("breaks are not yet supported when dealing with infinite fleet. either set it to finite or omit breaks.");
+            }
             return new VehicleRoutingProblem(this);
         }
 
@@ -505,17 +487,6 @@ public Builder addAllVehicles(Collection<? extends Vehicle> vehicles) {
             return Collections.unmodifiableCollection(tentativeJobs.values());
         }
 
-        private Builder addService(Service service) {
-//            tentative_coordinates.put(service.getLocation().getId(), service.getLocation().getCoordinate());
-            addLocationToTentativeLocations(service);
-            if (jobs.containsKey(service.getId())) {
-                logger.warn("service " + service + " already in job list. overrides existing job.");
-            }
-            jobs.put(service.getId(), service);
-            return this;
-        }
-
-
     }
 
     /**
@@ -568,31 +539,35 @@ private Builder addService(Service service) {
      */
     private final FleetSize fleetSize;
 
-    private Map<Job, List<AbstractActivity>> activityMap;
+    private final Locations locations;
+
+    // Deprecated? Using job.getActivityList().getAll() does the same.
+    //private Map<Job, List<JobActivity>> activityMap;
 
     private int nuActivities;
 
     private final JobActivityFactory jobActivityFactory = new JobActivityFactory() {
 
         @Override
-        public List<AbstractActivity> createActivities(Job job) {
+        public List<JobActivity> createActivities(Job job) {
             return copyAndGetActivities(job);
         }
 
     };
 
     private VehicleRoutingProblem(Builder builder) {
-        this.jobs = builder.jobs;
-        this.fleetSize = builder.fleetSize;
-        this.vehicles = builder.uniqueVehicles;
-        this.vehicleTypes = builder.vehicleTypes;
-        this.initialVehicleRoutes = builder.initialRoutes;
-        this.transportCosts = builder.transportCosts;
-        this.activityCosts = builder.activityCosts;
-        this.activityMap = builder.activityMap;
-        this.nuActivities = builder.activityIndexCounter;
-        this.allLocations = builder.allLocations;
-        this.allJobs = builder.tentativeJobs;
+        jobs = builder.jobs;
+        fleetSize = builder.fleetSize;
+        vehicles = builder.uniqueVehicles;
+        vehicleTypes = builder.vehicleTypes;
+        initialVehicleRoutes = builder.initialRoutes;
+        transportCosts = builder.transportCosts;
+        activityCosts = builder.activityCosts;
+        locations = builder.getLocations();
+        //activityMap = builder.activityMap;
+        nuActivities = builder.activityIndexCounter;
+        allLocations = builder.allLocations;
+        allJobs = builder.tentativeJobs;
         logger.info("setup problem: {}", this);
     }
 
@@ -600,7 +575,7 @@ private VehicleRoutingProblem(Builder builder) {
     @Override
     public String toString() {
         return "[fleetSize=" + fleetSize + "][#jobs=" + jobs.size() + "][#vehicles=" + vehicles.size() + "][#vehicleTypes=" + vehicleTypes.size() + "][" +
-            "transportCost=" + transportCosts + "][activityCosts=" + activityCosts + "]";
+                        "transportCost=" + transportCosts + "][activityCosts=" + activityCosts + "]";
     }
 
     /**
@@ -684,11 +659,11 @@ public VehicleRoutingActivityCosts getActivityCosts() {
      * @param job for which the corresponding activities needs to be returned
      * @return associated activities
      */
-    public List<AbstractActivity> getActivities(Job job) {
-        return Collections.unmodifiableList(activityMap.get(job));
+    public List<JobActivity> getActivities(Job job) {
+        return job.getActivityList().getAll();
     }
 
-//    public Map<Job,List<AbstractActivity>> getActivityMap() { return Collections.unmodifiableMap(activityMap); }
+    //    public Map<Job,List<AbstractActivity>> getActivityMap() { return Collections.unmodifiableMap(activityMap); }
 
     /**
      * @return total number of activities
@@ -708,12 +683,8 @@ public JobActivityFactory getJobActivityFactory() {
      * @param job for which the corresponding activities needs to be returned
      * @return a copy of the activities that are associated to the specified job
      */
-    public List<AbstractActivity> copyAndGetActivities(Job job) {
-        List<AbstractActivity> acts = new ArrayList<AbstractActivity>();
-        if (activityMap.containsKey(job)) {
-            for (AbstractActivity act : activityMap.get(job)) acts.add((AbstractActivity) act.duplicate());
-        }
-        return acts;
+    public List<JobActivity> copyAndGetActivities(Job job) {
+        return job.getActivityList().getAllDuplicated();
     }
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ConstraintManager.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ConstraintManager.java
index dcd19cd61..56a21529e 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ConstraintManager.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ConstraintManager.java
@@ -17,18 +17,19 @@
  */
 package com.graphhopper.jsprit.core.problem.constraint;
 
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.List;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.state.RouteAndActivityStateGetter;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.List;
 
 /**
  * Manager that manage hard- and soft constraints, both on route and activity level.
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/HardActivityLevelConstraintManager.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/HardActivityLevelConstraintManager.java
index ed092245b..226577d7c 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/HardActivityLevelConstraintManager.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/HardActivityLevelConstraintManager.java
@@ -17,14 +17,14 @@
  */
 package com.graphhopper.jsprit.core.problem.constraint;
 
-import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.List;
 
+import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
+
 
 class HardActivityLevelConstraintManager implements HardActivityConstraint {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/HardRouteLevelConstraintManager.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/HardRouteLevelConstraintManager.java
index 13e218f2d..37376077c 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/HardRouteLevelConstraintManager.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/HardRouteLevelConstraintManager.java
@@ -17,12 +17,12 @@
  */
 package com.graphhopper.jsprit.core.problem.constraint;
 
-import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
-
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
 
+import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
+
 
 class HardRouteLevelConstraintManager implements HardRouteConstraint {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/MaxDistanceConstraint.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/MaxDistanceConstraint.java
index 9e3f790cf..d3fd0b8c7 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/MaxDistanceConstraint.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/MaxDistanceConstraint.java
@@ -18,18 +18,18 @@
 
 package com.graphhopper.jsprit.core.problem.constraint;
 
+import java.util.Collection;
+import java.util.Map;
+
 import com.graphhopper.jsprit.core.algorithm.state.StateId;
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.problem.cost.TransportDistance;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverShipment;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverShipmentDEPRECATED;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.End;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 
-import java.util.Collection;
-import java.util.Map;
-
 /**
  * Created by schroeder on 11/10/16.
  */
@@ -52,7 +52,7 @@ public MaxDistanceConstraint(StateManager stateManager, StateId distanceId, Tran
 
     private void makeArray(Map<Vehicle, Double> maxDistances) {
         int maxIndex = getMaxIndex(maxDistances.keySet());
-        this.maxDistances = new Double[maxIndex];
+        this.maxDistances = new Double[maxIndex+1];
         for(Vehicle v : maxDistances.keySet()){
             this.maxDistances[v.getIndex()]=maxDistances.get(v);
         }
@@ -61,57 +61,85 @@ private void makeArray(Map<Vehicle, Double> maxDistances) {
     private int getMaxIndex(Collection<Vehicle> vehicles) {
         int index = 0;
         for(Vehicle v : vehicles){
-            if(v.getIndex() > index) index = v.getIndex();
+            if(v.getIndex() > index) {
+                index = v.getIndex();
+            }
         }
         return index;
     }
 
     @Override
     public ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prevAct, TourActivity newAct, TourActivity nextAct, double prevActDepTime) {
-        if(!hasMaxDistance(iFacts.getNewVehicle())) return ConstraintsStatus.FULFILLED;
+        if(!hasMaxDistance(iFacts.getNewVehicle())) {
+            return ConstraintsStatus.FULFILLED;
+        }
         Double currentDistance = 0d;
         if(!iFacts.getRoute().isEmpty()){
             currentDistance = stateManager.getRouteState(iFacts.getRoute(),iFacts.getNewVehicle(), distanceId,Double.class);
         }
+        double maxDistance = getMaxDistance(iFacts.getNewVehicle());
 
+        double distancePrevAct2NewAct = distanceCalculator.getDistance(prevAct.getLocation(), newAct.getLocation(), iFacts.getNewDepTime(), iFacts.getNewVehicle());
         double distanceNewAct2nextAct = distanceCalculator.getDistance(newAct.getLocation(), nextAct.getLocation(), iFacts.getNewDepTime(), iFacts.getNewVehicle());
-        double distancePrevAct2NextAct = distanceCalculator.getDistance(prevAct.getLocation(), nextAct.getLocation(), iFacts.getNewDepTime(), iFacts.getNewVehicle());
+        double distancePrevAct2NextAct = distanceCalculator.getDistance(prevAct.getLocation(), nextAct.getLocation(), prevActDepTime, iFacts.getRoute().getVehicle());
         if(nextAct instanceof End && !iFacts.getNewVehicle().isReturnToDepot()){
             distanceNewAct2nextAct = 0;
             distancePrevAct2NextAct = 0;
         }
-        double distancePrevAct2NewAct = distanceCalculator.getDistance(prevAct.getLocation(), newAct.getLocation(), iFacts.getNewDepTime(), iFacts.getNewVehicle());
-        double additionalDistance = distancePrevAct2NewAct + distanceNewAct2nextAct - distancePrevAct2NextAct;
 
-        double maxDistance = getMaxDistance(iFacts.getNewVehicle());
-        if(currentDistance + additionalDistance > maxDistance) return ConstraintsStatus.NOT_FULFILLED;
-
-        if(newAct instanceof DeliverShipment){
+        double additionalDistanceOfPickup = 0;
+        if (newAct instanceof DeliverShipmentDEPRECATED) {
             int iIndexOfPickup = iFacts.getRelatedActivityContext().getInsertionIndex();
             TourActivity pickup = iFacts.getAssociatedActivities().get(0);
             TourActivity actBeforePickup;
-            TourActivity actAfterPickup = iFacts.getRoute().getActivities().get(iIndexOfPickup);
-            if(iIndexOfPickup > 0) actBeforePickup = iFacts.getRoute().getActivities().get(iIndexOfPickup-1);
-            else actBeforePickup = iFacts.getRoute().getStart();
-            double additionalDistanceOfPickup = distanceCalculator.getDistance(actBeforePickup.getLocation(),pickup.getLocation(),0,iFacts.getNewVehicle())
-                + distanceCalculator.getDistance(pickup.getLocation(),actAfterPickup.getLocation(),0,iFacts.getNewVehicle())
-                - distanceCalculator.getDistance(actBeforePickup.getLocation(), actAfterPickup.getLocation(),0,iFacts.getNewVehicle());
-
-            if(currentDistance + additionalDistance + additionalDistanceOfPickup > maxDistance){
-                return ConstraintsStatus.NOT_FULFILLED;
+            if(iIndexOfPickup > 0) {
+                actBeforePickup = iFacts.getRoute().getActivities().get(iIndexOfPickup-1);
+            } else {
+                actBeforePickup = iFacts.getRoute().getStart();
+            }
+
+            TourActivity actAfterPickup;
+            boolean associatedPickAndDeliveryAreDirectNeighbors = prevAct.getIndex() == pickup.getIndex();
+            if(associatedPickAndDeliveryAreDirectNeighbors){
+                actAfterPickup = newAct;
+                distancePrevAct2NextAct = distanceCalculator.getDistance(prevAct.getLocation(), nextAct.getLocation(), iFacts.getRelatedActivityContext().getEndTime(), iFacts.getNewVehicle());
+            } else {
+                actAfterPickup = iFacts.getRoute().getActivities().get(iIndexOfPickup);
+            }
+            double distanceActBeforePickup2Pickup = distanceCalculator.getDistance(actBeforePickup.getLocation(), pickup.getLocation(), actBeforePickup.getEndTime(), iFacts.getNewVehicle());
+            double distancePickup2ActAfterPickup = distanceCalculator.getDistance(pickup.getLocation(), actAfterPickup.getLocation(), iFacts.getRelatedActivityContext().getEndTime(), iFacts.getNewVehicle());
+
+            double distanceBeforePickup2AfterPickup;
+            if(associatedPickAndDeliveryAreDirectNeighbors){
+                distanceBeforePickup2AfterPickup = distanceCalculator.getDistance(actBeforePickup.getLocation(), actAfterPickup.getLocation(), actBeforePickup.getEndTime(), iFacts.getNewVehicle());
+            }
+            else{
+                distanceBeforePickup2AfterPickup = distanceCalculator.getDistance(actBeforePickup.getLocation(), actAfterPickup.getLocation(), actBeforePickup.getEndTime(), iFacts.getRoute().getVehicle());
             }
+            additionalDistanceOfPickup = distanceActBeforePickup2Pickup  + distancePickup2ActAfterPickup - distanceBeforePickup2AfterPickup;
+        }
+
+        double additionalDistance = distancePrevAct2NewAct + distanceNewAct2nextAct - distancePrevAct2NextAct;
+        if(currentDistance + additionalDistance > maxDistance) {
+            return ConstraintsStatus.NOT_FULFILLED;
+        }
+
+        if(currentDistance + additionalDistance + additionalDistanceOfPickup > maxDistance){
+            return ConstraintsStatus.NOT_FULFILLED;
         }
 
         return ConstraintsStatus.FULFILLED;
     }
 
     private boolean hasMaxDistance(Vehicle newVehicle){
-        return this.maxDistances[newVehicle.getIndex()] != null;
+        return maxDistances[newVehicle.getIndex()] != null;
     }
 
     private double getMaxDistance(Vehicle newVehicle) {
-        Double maxDistance = this.maxDistances[newVehicle.getIndex()];
-        if(maxDistance == null) return Double.MAX_VALUE;
+        Double maxDistance = maxDistances[newVehicle.getIndex()];
+        if(maxDistance == null) {
+            return Double.MAX_VALUE;
+        }
         return maxDistance;
     }
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/PickupAndDeliverShipmentLoadActivityLevelConstraint.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/PickupAndDeliverShipmentLoadActivityLevelConstraint.java
index c2333d0e6..7ef727062 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/PickupAndDeliverShipmentLoadActivityLevelConstraint.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/PickupAndDeliverShipmentLoadActivityLevelConstraint.java
@@ -20,8 +20,8 @@
 import com.graphhopper.jsprit.core.algorithm.state.InternalStates;
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverShipment;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupShipment;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverShipmentDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupShipmentDEPRECATED;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.Start;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.state.RouteAndActivityStateGetter;
@@ -55,30 +55,61 @@ public PickupAndDeliverShipmentLoadActivityLevelConstraint(RouteAndActivityState
         defaultValue = Capacity.Builder.newInstance().build();
     }
 
+    // private String visualize(JobInsertionContext iFacts, TourActivity
+    // prevAct, TourActivity newAct,
+    // TourActivity nextAct) {
+    // System.out.println(prevAct);
+    // System.out.println(newAct);
+    // System.out.println(nextAct);
+    // StringBuilder sb = new StringBuilder();
+    // for (TourActivity a : iFacts.getRoute().getActivities()) {
+    // if (a.equals(nextAct)) {
+    // if (sb.length() != 0) {
+    // sb.append(" -> ");
+    // }
+    // sb.append("[").append(newAct.getName()).append("]");
+    // }
+    // if (sb.length() != 0) {
+    // sb.append(" -> ");
+    // }
+    // sb.append(a.getName());
+    // }
+    //
+    // return sb.toString();
+    // }
+
     /**
      * Checks whether there is enough capacity to insert newAct between prevAct and nextAct.
      */
     @Override
     public ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prevAct, TourActivity newAct, TourActivity nextAct, double prevActDepTime) {
-        if (!(newAct instanceof PickupShipment) && !(newAct instanceof DeliverShipment)) {
+        if (!(newAct instanceof PickupShipmentDEPRECATED) && !(newAct instanceof DeliverShipmentDEPRECATED)) {
             return ConstraintsStatus.FULFILLED;
         }
+        // System.out.println(visualize(iFacts, prevAct, newAct, nextAct));
         Capacity loadAtPrevAct;
         if (prevAct instanceof Start) {
             loadAtPrevAct = stateManager.getRouteState(iFacts.getRoute(), InternalStates.LOAD_AT_BEGINNING, Capacity.class);
-            if (loadAtPrevAct == null) loadAtPrevAct = defaultValue;
+            if (loadAtPrevAct == null) {
+                loadAtPrevAct = defaultValue;
+            }
         } else {
             loadAtPrevAct = stateManager.getActivityState(prevAct, InternalStates.LOAD, Capacity.class);
-            if (loadAtPrevAct == null) loadAtPrevAct = defaultValue;
+            if (loadAtPrevAct == null) {
+                loadAtPrevAct = defaultValue;
+            }
         }
-        if (newAct instanceof PickupShipment) {
-            if (!Capacity.addup(loadAtPrevAct, newAct.getSize()).isLessOrEqual(iFacts.getNewVehicle().getType().getCapacityDimensions())) {
+        if (newAct instanceof PickupShipmentDEPRECATED) {
+            Capacity newCapacity = Capacity.addup(loadAtPrevAct, newAct.getSize());
+            if (!newCapacity.isLessOrEqual(iFacts.getNewVehicle().getType().getCapacityDimensions())) {
                 return ConstraintsStatus.NOT_FULFILLED;
             }
         }
-        if (newAct instanceof DeliverShipment) {
-            if (!Capacity.addup(loadAtPrevAct, Capacity.invert(newAct.getSize())).isLessOrEqual(iFacts.getNewVehicle().getType().getCapacityDimensions()))
+        if (newAct instanceof DeliverShipmentDEPRECATED) {
+            Capacity newCapacity = Capacity.addup(loadAtPrevAct, Capacity.invert(newAct.getSize()));
+            if (!newCapacity.isLessOrEqual(iFacts.getNewVehicle().getType().getCapacityDimensions())) {
                 return ConstraintsStatus.NOT_FULFILLED_BREAK;
+            }
         }
         return ConstraintsStatus.FULFILLED;
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceDeliveriesFirstConstraint.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceDeliveriesFirstConstraint.java
index 065b55a5d..1ed7d4e0c 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceDeliveriesFirstConstraint.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceDeliveriesFirstConstraint.java
@@ -18,35 +18,40 @@
 package com.graphhopper.jsprit.core.problem.constraint;
 
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.*;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverServiceDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverShipmentDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupServiceDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupShipmentDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.ServiceActivityNEW;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 
 public class ServiceDeliveriesFirstConstraint implements HardActivityConstraint {
 
     @Override
     public ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prevAct, TourActivity newAct, TourActivity nextAct, double prevActDepTime) {
-        if (newAct instanceof PickupService && nextAct instanceof DeliverService) {
+        if (newAct instanceof PickupServiceDEPRECATED && nextAct instanceof DeliverServiceDEPRECATED) {
             return ConstraintsStatus.NOT_FULFILLED;
         }
-        if (newAct instanceof ServiceActivity && nextAct instanceof DeliverService) {
+        if (newAct instanceof ServiceActivityNEW && nextAct instanceof DeliverServiceDEPRECATED) {
             return ConstraintsStatus.NOT_FULFILLED;
         }
-        if (newAct instanceof DeliverService && prevAct instanceof PickupService) {
+        if (newAct instanceof DeliverServiceDEPRECATED && prevAct instanceof PickupServiceDEPRECATED) {
             return ConstraintsStatus.NOT_FULFILLED_BREAK;
         }
-        if (newAct instanceof DeliverService && prevAct instanceof ServiceActivity) {
+        if (newAct instanceof DeliverServiceDEPRECATED && prevAct instanceof ServiceActivityNEW) {
             return ConstraintsStatus.NOT_FULFILLED_BREAK;
         }
 
-        if (newAct instanceof DeliverService && prevAct instanceof PickupShipment) {
+        if (newAct instanceof DeliverServiceDEPRECATED && prevAct instanceof PickupShipmentDEPRECATED) {
             return ConstraintsStatus.NOT_FULFILLED_BREAK;
         }
-        if (newAct instanceof DeliverService && prevAct instanceof DeliverShipment) {
+        if (newAct instanceof DeliverServiceDEPRECATED && prevAct instanceof DeliverShipmentDEPRECATED) {
             return ConstraintsStatus.NOT_FULFILLED_BREAK;
         }
-        if (newAct instanceof PickupShipment && nextAct instanceof DeliverService) {
+        if (newAct instanceof PickupShipmentDEPRECATED && nextAct instanceof DeliverServiceDEPRECATED) {
             return ConstraintsStatus.NOT_FULFILLED;
         }
-        if (newAct instanceof DeliverShipment && nextAct instanceof DeliverService) {
+        if (newAct instanceof DeliverShipmentDEPRECATED && nextAct instanceof DeliverServiceDEPRECATED) {
             return ConstraintsStatus.NOT_FULFILLED;
         }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadActivityLevelConstraint.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadActivityLevelConstraint.java
index b53fd4386..a106a0e29 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadActivityLevelConstraint.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadActivityLevelConstraint.java
@@ -20,7 +20,11 @@
 import com.graphhopper.jsprit.core.algorithm.state.InternalStates;
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.*;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverServiceDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupServiceDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.ServiceActivityNEW;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.Start;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.state.RouteAndActivityStateGetter;
 
 
@@ -49,22 +53,30 @@ public ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prev
         Capacity prevMaxLoad;
         if (prevAct instanceof Start) {
             futureMaxLoad = stateManager.getRouteState(iFacts.getRoute(), InternalStates.MAXLOAD, Capacity.class);
-            if (futureMaxLoad == null) futureMaxLoad = defaultValue;
+            if (futureMaxLoad == null) {
+                futureMaxLoad = defaultValue;
+            }
             prevMaxLoad = stateManager.getRouteState(iFacts.getRoute(), InternalStates.LOAD_AT_BEGINNING, Capacity.class);
-            if (prevMaxLoad == null) prevMaxLoad = defaultValue;
+            if (prevMaxLoad == null) {
+                prevMaxLoad = defaultValue;
+            }
         } else {
             futureMaxLoad = stateManager.getActivityState(prevAct, InternalStates.FUTURE_MAXLOAD, Capacity.class);
-            if (futureMaxLoad == null) futureMaxLoad = defaultValue;
+            if (futureMaxLoad == null) {
+                futureMaxLoad = defaultValue;
+            }
             prevMaxLoad = stateManager.getActivityState(prevAct, InternalStates.PAST_MAXLOAD, Capacity.class);
-            if (prevMaxLoad == null) prevMaxLoad = defaultValue;
+            if (prevMaxLoad == null) {
+                prevMaxLoad = defaultValue;
+            }
 
         }
-        if (newAct instanceof PickupService || newAct instanceof ServiceActivity) {
+        if (newAct instanceof PickupServiceDEPRECATED || newAct instanceof ServiceActivityNEW) {
             if (!Capacity.addup(newAct.getSize(), futureMaxLoad).isLessOrEqual(iFacts.getNewVehicle().getType().getCapacityDimensions())) {
                 return ConstraintsStatus.NOT_FULFILLED;
             }
         }
-        if (newAct instanceof DeliverService) {
+        if (newAct instanceof DeliverServiceDEPRECATED) {
             if (!Capacity.addup(Capacity.invert(newAct.getSize()), prevMaxLoad).isLessOrEqual(iFacts.getNewVehicle().getType().getCapacityDimensions())) {
                 return ConstraintsStatus.NOT_FULFILLED_BREAK;
             }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ShipmentPickupsFirstConstraint.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ShipmentPickupsFirstConstraint.java
index 849cb8df9..2983f3506 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ShipmentPickupsFirstConstraint.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ShipmentPickupsFirstConstraint.java
@@ -18,18 +18,18 @@
 package com.graphhopper.jsprit.core.problem.constraint;
 
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverShipment;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupShipment;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverShipmentDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupShipmentDEPRECATED;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 
 public class ShipmentPickupsFirstConstraint implements HardActivityConstraint {
 
     @Override
     public ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prevAct, TourActivity newAct, TourActivity nextAct, double prevActDepTime) {
-        if (newAct instanceof DeliverShipment && nextAct instanceof PickupShipment) {
+        if (newAct instanceof DeliverShipmentDEPRECATED && nextAct instanceof PickupShipmentDEPRECATED) {
             return ConstraintsStatus.NOT_FULFILLED;
         }
-        if (newAct instanceof PickupShipment && prevAct instanceof DeliverShipment) {
+        if (newAct instanceof PickupShipmentDEPRECATED && prevAct instanceof DeliverShipmentDEPRECATED) {
             return ConstraintsStatus.NOT_FULFILLED_BREAK;
         }
         return ConstraintsStatus.FULFILLED;
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/SoftActivityConstraintManager.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/SoftActivityConstraintManager.java
index 1ce25acb2..38ae6c72e 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/SoftActivityConstraintManager.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/SoftActivityConstraintManager.java
@@ -17,13 +17,13 @@
  */
 package com.graphhopper.jsprit.core.problem.constraint;
 
-import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
 
+import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
+
 class SoftActivityConstraintManager implements SoftActivityConstraint {
 
     private Collection<SoftActivityConstraint> softConstraints = new ArrayList<SoftActivityConstraint>();
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/SoftRouteConstraintManager.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/SoftRouteConstraintManager.java
index aefc2e774..f87c896a2 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/SoftRouteConstraintManager.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/SoftRouteConstraintManager.java
@@ -17,12 +17,12 @@
  */
 package com.graphhopper.jsprit.core.problem.constraint;
 
-import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
-
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
 
+import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
+
 class SoftRouteConstraintManager implements SoftRouteConstraint {
 
     private Collection<SoftRouteConstraint> softConstraints = new ArrayList<SoftRouteConstraint>();
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractJob.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractJob.java
new file mode 100644
index 000000000..0d6f154da
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractJob.java
@@ -0,0 +1,409 @@
+/*
+ * Licensed to GraphHopper GmbH under one or more contributor
+ * license agreements. See the NOTICE file distributed with this work for
+ * additional information regarding copyright ownership.
+ *
+ * GraphHopper GmbH licenses this file to you under the Apache License,
+ * Version 2.0 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.graphhopper.jsprit.core.problem.job;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+
+import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.Skills;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
+
+/**
+ * Abstract base class for all Job implementations.
+ * <p>
+ * See {@linkplain JobBuilder} for detailed instruction how to implement your
+ * Job.
+ * </p>
+ * <p>
+ * Created by schroeder on 14.07.14.
+ * </p>
+ *
+ * @author schroeder
+ * @author balage
+ * @see JobBuilder
+ */
+public abstract class AbstractJob implements Job {
+
+    /**
+     * Base builder for all direct descendants.
+     * <p>
+     * The is an abstract implementation of the builder pattern providing the
+     * base functionality for inheritence. When you create a new AbstractJob
+     * implementation and would like to provide builder for it follow the
+     * guidlines below:
+     * </p>
+     * <p>
+     * First of all, you have to decide whether you would like to create a final
+     * class (no further inheritence from it) or not. If you decide to make your
+     * implementation <code>final</code> you can make your concrete builder in
+     * one step, but make the Job class final to emphasize this fact.
+     * </p>
+     * <p>
+     * If you wish to allow your Job implementation to be extended, first create
+     * your own abstract Builder class. The signature of your abstract builder
+     * should be something like this (<i>self referencing generics</i>):
+     *
+     * <pre>
+     * public static abstract class BuilderBase&lt;T extends MyJob, B extends BuilderBase&lt;T, B>>
+     *                 extends JobBuilder&lt;T, B> {
+     * }
+     * </pre>
+     *
+     * This implenetation should contain all new fields, the new setters
+     * following the pattern:
+     *
+     * <pre>
+     * &#64;SuppressWarnings("unchecked")
+     * public B setField(FieldType field) {
+     *     this.field = field;
+     *     return (B) this;
+     * }
+     * </pre>
+     *
+     * Usually, the {@linkplain #validate()} method is implemented in this class
+     * (and it should call <code>super.validate()</code>) as well, but the
+     * abstract {@linkplain #createInstance()} is never. It is recommended that
+     * getters are provided for the fields as well.
+     * </p>
+     * <p>
+     * This BuilderBase class is for the new descendents to base their Builder
+     * on. If you don't need to refere to this class outside the descedents,
+     * make it protected.
+     * </p>
+     * <p>
+     * Now you can create the "real" builder class, which is simple, hides the
+     * complex generic pattern and makes it safe (see <a href=
+     * "http://stackoverflow.com/questions/7354740/is-there-a-way-to-refer-to-the-current-type-with-a-type-variable">
+     * the answer of this topic</a> for more information about the pitfalls of
+     * the self-refering generics pattern):
+     *
+     * <pre>
+     * public static class Builder extends BuilderBase&lt;MyJob, Builder> {
+     *     public Builder(String id) {
+     *         super(id);
+     *     }
+     *
+     *     &#64;Override
+     *     protected MyJob createInstance() {
+     *         return new MyJob(this);
+     *     }
+     * }
+     * </pre>
+     *
+     * The sole method to be implemented is {@linkplain #createInstance()}. This
+     * is now type-safe and generic-less.
+     * </p>
+     *
+     * @author balage
+     */
+    public abstract static class JobBuilder<T extends AbstractJob, B extends JobBuilder<T, B>> {
+
+        protected Capacity.Builder capacityBuilder = Capacity.Builder.newInstance();
+
+        protected Skills.Builder skillBuilder = Skills.Builder.newInstance();
+
+        protected String id;
+
+        protected String name = "no-name";
+
+        protected int priority = 2;
+
+        public JobBuilder(String id) {
+            if (id == null) {
+                throw new IllegalArgumentException("id must not be null");
+            }
+            this.id = id;
+        }
+
+        /**
+         * Adds capacity dimension.
+         *
+         * @param dimensionIndex
+         *            the dimension index of the capacity value
+         * @param dimensionValue
+         *            the capacity value
+         * @return the builder
+         * @throws IllegalArgumentException
+         *             if dimensionValue < 0
+         */
+        @SuppressWarnings("unchecked")
+        public B addSizeDimension(int dimensionIndex, int dimensionValue) {
+            if (dimensionValue < 0) {
+                throw new IllegalArgumentException("capacity value cannot be negative");
+            }
+            capacityBuilder.addDimension(dimensionIndex, dimensionValue);
+            return (B) this;
+        }
+
+        @SuppressWarnings("unchecked")
+        public B addRequiredSkill(String skill) {
+            skillBuilder.addSkill(skill);
+            return (B) this;
+        }
+
+        @SuppressWarnings("unchecked")
+        public B setName(String name) {
+            this.name = name;
+            return (B) this;
+        }
+
+        @SuppressWarnings("unchecked")
+        public B addAllRequiredSkills(Skills skills) {
+            for (String s : skills.values()) {
+                skillBuilder.addSkill(s);
+            }
+            return (B) this;
+        }
+
+        @SuppressWarnings("unchecked")
+        public B addAllSizeDimensions(Capacity size) {
+            for (int i = 0; i < size.getNuOfDimensions(); i++) {
+                capacityBuilder.addDimension(i, size.get(i));
+            }
+            return (B) this;
+        }
+
+        /**
+         * Set priority to service. Only 1 = high priority, 2 = medium and 3 =
+         * low are allowed.
+         * <p>
+         * Default is 2 = medium.
+         *
+         * @param priority
+         * @return builder
+         */
+        @SuppressWarnings("unchecked")
+        public B setPriority(int priority) {
+            if (priority < 1 || priority > 3) {
+                throw new IllegalArgumentException(
+                                "incorrect priority. only 1 = high, 2 = medium and 3 = low is allowed");
+            }
+            this.priority = priority;
+            return (B) this;
+        }
+
+        /**
+         * Builds the job.
+         *
+         * <p>
+         * You never has to override this method. Override the
+         * {@linkplain #validate()} and {@linkplain #createInstance()} methods
+         * instead. (See for detailed implementation guidlines at
+         * {@linkplain JobBuilder}!)
+         * </p>
+         *
+         * @return {@link T} The new implementation of the corresponding Job.
+         *
+         * @see JobBuilder
+         *
+         * @author balage
+         */
+        public final T build() {
+            validate();
+            T job = createInstance();
+            job.createActivities(this);
+            return job;
+        }
+
+        protected abstract void validate();
+
+        protected abstract T createInstance();
+
+        public Capacity getCapacity() {
+            return capacityBuilder.build();
+        }
+
+        public Skills getSkills() {
+            return skillBuilder.build();
+        }
+
+        public String getId() {
+            return id;
+        }
+
+        public String getName() {
+            return name;
+        }
+
+        public int getPriority() {
+            return priority;
+        }
+
+    }
+
+    private int index;
+
+    private String id;
+
+    private Skills skills;
+
+    private String name;
+
+    private int priority;
+
+    protected List<Location> allLocations;
+
+    private JobActivityList activityList;
+
+    protected Set<TimeWindow> allTimeWindows;
+
+    /**
+     * Builder based constructor.
+     *
+     * @param builder
+     *            The builder instance.
+     *
+     * @see JobBuilder
+     */
+    protected AbstractJob(JobBuilder<?, ?> builder) {
+        super();
+        activityList = new SequentialJobActivityList(this);
+        id = builder.getId();
+        skills = builder.getSkills();
+        name = builder.getName();
+        priority = builder.getPriority();
+    }
+
+    @Override
+    public int getIndex() {
+        return index;
+    }
+
+    public void setIndex(int index) {
+        this.index = index;
+    }
+
+
+    private void addLocation(Location location) {
+        if (location != null) {
+            allLocations.add(location);
+        }
+    }
+
+    @Override
+    public List<Location> getAllLocations() {
+        return allLocations;
+    }
+
+    protected void prepareCaches() {
+        allLocations = new ArrayList<>();
+        allTimeWindows = new HashSet<>();
+        activityList.getAll().stream().forEach(ja -> {
+            addLocation(ja.getLocation());
+            addTimeWindows(ja.getTimeWindows());
+        });
+    }
+
+    private void addTimeWindows(Collection<TimeWindow> timeWindows) {
+        if (timeWindows != null && !timeWindows.isEmpty()) {
+            allTimeWindows.addAll(timeWindows);
+        }
+    }
+
+    /**
+     * Creates the activities.
+     *
+     * <p>
+     * This functions contract specifies that the implementation has to call
+     * {@linkplain #prepareCaches()} function at the end, after all activities
+     * are added.
+     * </p>
+     */
+    // protected abstract void createActivities();
+    protected abstract void createActivities(JobBuilder<? extends AbstractJob, ?> jobBuilder);
+
+    @Override
+    public int hashCode() {
+        final int prime = 31;
+        int result = 1;
+        result = prime * result + ((id == null) ? 0 : id.hashCode());
+        return result;
+    }
+
+    /**
+     * Two shipments are equal if they have the same id.
+     *
+     * @return true if shipments are equal (have the same id)
+     */
+    @Override
+    public boolean equals(Object obj) {
+        if (this == obj) {
+            return true;
+        }
+        if (obj == null) {
+            return false;
+        }
+        if (getClass() != obj.getClass()) {
+            return false;
+        }
+        AbstractJob other = (AbstractJob) obj;
+        if (id == null) {
+            if (other.id != null) {
+                return false;
+            }
+        } else if (!id.equals(other.id)) {
+            return false;
+        }
+        return true;
+    }
+
+    protected void setActivities(JobActivityList list) {
+        activityList = list;
+        prepareCaches();
+    }
+
+    @Override
+    public JobActivityList getActivityList() {
+        return activityList;
+    }
+
+
+    @Override
+    public Set<TimeWindow> getTimeWindows() {
+        return allTimeWindows;
+    }
+
+    @Override
+    public String getId() {
+        return id;
+    }
+
+    @Override
+    public Skills getRequiredSkills() {
+        return skills;
+    }
+
+    @Override
+    public String getName() {
+        return name;
+    }
+
+    @Override
+    public int getPriority() {
+        return priority;
+    }
+
+
+}
+
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractListBackedJobActivityList.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractListBackedJobActivityList.java
new file mode 100644
index 000000000..0774b6e8b
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractListBackedJobActivityList.java
@@ -0,0 +1,66 @@
+package com.graphhopper.jsprit.core.problem.job;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
+
+/**
+ * Simple activity list implementation.
+ * <p>
+ * The inserted activities will define an sequential order.
+ * </p>
+ *
+ * @author balage
+ *
+ */
+public abstract class AbstractListBackedJobActivityList extends JobActivityList {
+
+    /**
+     * The primary container.
+     */
+    protected List<JobActivity> _activities = new ArrayList<>();
+    /**
+     * A read only container backed by the primary one. This will be returned.
+     */
+    protected List<JobActivity> unmodifiableActivities = Collections.unmodifiableList(_activities);
+
+    public AbstractListBackedJobActivityList(AbstractJob job) {
+        super(job);
+    }
+
+    @Override
+    public void addActivity(JobActivity activity) {
+        validateActivity(activity);
+        if (!_activities.contains(activity)) {
+            _activities.add(activity);
+        }
+    }
+
+    @Override
+    public int size() {
+        return _activities.size();
+    }
+
+    @Override
+    public List<JobActivity> getAll() {
+        return unmodifiableActivities;
+    }
+
+    /**
+     * @param activity
+     *            The activity to be found.
+     * @return The index of the activity in the sequential row.
+     * @throws IllegalArgumentException
+     *             When the activity is not in the queue.
+     */
+    protected int indexOf(JobActivity activity) {
+        int idx = _activities.indexOf(activity);
+        if (idx == -1) {
+            throw new IllegalArgumentException("Activity " + activity.getName() + " is not in the list.");
+        }
+        return idx;
+    }
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Break.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Break.java
index 0a73b3986..ad37eb9be 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Break.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Break.java
@@ -18,61 +18,64 @@
 package com.graphhopper.jsprit.core.problem.job;
 
 
-import com.graphhopper.jsprit.core.problem.Capacity;
-import com.graphhopper.jsprit.core.problem.Skills;
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.BreakActivity;
 
 /**
  * Pickup extends Service and is intended to model a Service where smth is LOADED (i.e. picked up) to a transport unit.
  *
  * @author schroeder
  */
-public class Break extends Service {
+public class Break extends Service implements InternalJobMarker {
 
-    public static class Builder extends Service.Builder<Break> {
+    public static final class Builder extends Service.BuilderBase<Break, Builder> {
+
+        private static final Location VARIABLE_LOCATION = Location
+                        .newInstance("@@@VARIABLE_LOCATION");
+
+        public Builder(String id) {
+            super(id);
+            setType("break");
+            setLocation(VARIABLE_LOCATION);
+        }
 
-        /**
-         * Returns a new instance of builder that builds a pickup.
-         *
-         * @param id the id of the pickup
-         * @return the builder
-         */
         public static Builder newInstance(String id) {
             return new Builder(id);
         }
 
-        private boolean variableLocation = true;
-
-        Builder(String id) {
-            super(id);
+        @Override
+        protected void validate() {
+            super.validate();
+            // This is a trick: Service requires a location, but after
+            // validation we could remove it.
+            if (location.equals(VARIABLE_LOCATION)) {
+                location = null;
+            }
         }
 
-        /**
-         * Builds Pickup.
-         * <p>
-         * <p>Pickup type is "pickup"
-         *
-         * @return pickup
-         * @throws IllegalStateException if neither locationId nor coordinate has been set
-         */
-        public Break build() {
-            if (location != null) {
-                variableLocation = false;
-            }
-            this.setType("break");
-            super.capacity = Capacity.Builder.newInstance().build();
-            super.skills = Skills.Builder.newInstance().build();
+        @Override
+        protected Break createInstance() {
             return new Break(this);
         }
 
     }
 
+
     private boolean variableLocation = true;
 
     Break(Builder builder) {
         super(builder);
-        this.variableLocation = builder.variableLocation;
+        variableLocation = (builder.getLocation() == null);
     }
 
+    @Override
+    protected void createActivities(JobBuilder<?, ?> builder) {
+        JobActivityList list = new SequentialJobActivityList(this);
+        list.addActivity(BreakActivity.newInstance(this, (Builder) builder));
+        setActivities(list);
+    }
+
+
     public boolean hasVariableLocation() {
         return variableLocation;
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Delivery.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Delivery.java
index d99e3c3e9..43f513da3 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Delivery.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Delivery.java
@@ -17,6 +17,8 @@
  */
 package com.graphhopper.jsprit.core.problem.job;
 
+import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverServiceDEPRECATED;
 
 /**
  * Delivery extends Service and is intended to model a Service where smth is UNLOADED (i.e. delivered) from a transport unit.
@@ -25,41 +27,41 @@
  */
 public class Delivery extends Service {
 
-    public static class Builder extends Service.Builder<Delivery> {
+    public static final class Builder extends Service.BuilderBase<Delivery, Builder> {
 
-        /**
-         * Returns a new instance of builder that builds a delivery.
-         *
-         * @param id the id of the delivery
-         * @return the builder
-         */
-        public static Builder newInstance(String id) {
-            return new Builder(id);
+        public Builder(String id) {
+            super(id);
+            setType("delivery");
         }
 
-        Builder(String id) {
-            super(id);
+        public static Builder newInstance(String id) {
+            return new Builder(id);
         }
 
-        /**
-         * Builds Delivery.
-         *
-         * @return delivery
-         * @throws IllegalArgumentException if neither locationId nor coord is set
-         */
-        public Delivery build() {
-            if (location == null) throw new IllegalArgumentException("location is missing");
-            this.setType("delivery");
-            super.capacity = super.capacityBuilder.build();
-            super.skills = super.skillBuilder.build();
+        @Override
+        protected Delivery createInstance() {
             return new Delivery(this);
         }
-
     }
 
-    Delivery(Builder builder) {
+    Delivery(BuilderBase<? extends Delivery, ?> builder) {
         super(builder);
+    }
+
+    @Override
+    protected void createActivities(JobBuilder<?, ?> builder) {
+        JobActivityList list = new SequentialJobActivityList(this);
+        // TODO - Balage1551
+        // addActivity(new DeliveryActivityNEW(this, "pickup", getLocation(),
+        // getServiceDuration(), getSize()));
+        list.addActivity(new DeliverServiceDEPRECATED(this, (Builder) builder));
+        setActivities(list);
+    }
 
+    @Override
+    @Deprecated
+    public Capacity getSize() {
+        return Capacity.invert(super.getSize());
     }
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/GraphJobActivityList.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/GraphJobActivityList.java
new file mode 100644
index 000000000..e102e362e
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/GraphJobActivityList.java
@@ -0,0 +1,219 @@
+package com.graphhopper.jsprit.core.problem.job;
+
+import java.util.ArrayDeque;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Deque;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.stream.Collectors;
+
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
+
+/**
+ * DAG (Directed Acyclic Graph) based activity list implementation.
+ * <p>
+ * The inserted activities and their relations create the dependency graph.
+ * </p>
+ *
+ * @author balage
+ *
+ */
+public class GraphJobActivityList extends AbstractListBackedJobActivityList {
+
+    // Directly added dependencies
+    protected Map<JobActivity, Set<JobActivity>> dependencies = new HashMap<>();
+
+    // Cached transitive dependencies
+    protected Map<JobActivity, Set<JobActivity>> transitivePrecedingDependencyCache = new HashMap<>();
+    protected Map<JobActivity, Set<JobActivity>> transitiveSubsequentDependencyCache = new HashMap<>();
+
+    public GraphJobActivityList(AbstractJob job) {
+        super(job);
+    }
+
+    @Override
+    public void addActivity(JobActivity activity) {
+        super.addActivity(activity);
+        dependencies.put(activity, new HashSet<JobActivity>());
+        transitivePrecedingDependencyCache.put(activity, new HashSet<JobActivity>());
+        transitiveSubsequentDependencyCache.put(activity, new HashSet<JobActivity>());
+    }
+
+    /**
+     * Adds a dependency between two activities. If the activities not in the list, they are also added.
+     *
+     * @param priorActivity
+     *            The prior activity.
+     * @param subsequentActivity
+     *            The subsequent activity.
+     * @throws IllegalArgumentException
+     *             If the activities can't be added (see {@linkplain #addActivity(JobActivity)}) or if the new
+     *             dependency would create a cycle in the dependency graph.
+     */
+    public void addDependency(JobActivity priorActivity, JobActivity subsequentActivity) {
+        // Add activities if not added yet
+        if (!_activities.contains(priorActivity)) {
+            addActivity(priorActivity);
+        }
+        if (!_activities.contains(subsequentActivity)) {
+            addActivity(subsequentActivity);
+        }
+        // Check if dependency already in there
+        if (dependencies.get(priorActivity).contains(subsequentActivity)) {
+            return;
+        }
+
+        // Check if the new dependency would create a cycle
+        if (transitiveSubsequentDependencyCache.get(subsequentActivity).contains(priorActivity)) {
+            throw new IllegalArgumentException("Dependency between '" + priorActivity + "' and '" + subsequentActivity + "' would create a cycle.");
+        }
+
+        // Add new dependency
+        dependencies.get(priorActivity).add(subsequentActivity);
+
+        // Update cache
+        // === Subsequent =======
+        // The new subsequent abilities are the subsequent and its subsesequent abilities
+        Set<JobActivity> subsequentActivitiesToAdd = new HashSet<>(transitiveSubsequentDependencyCache.get(subsequentActivity));
+        subsequentActivitiesToAdd.add(subsequentActivity);
+        // The abilities to add the new ones to: the prior and its prior abilities
+        Set<JobActivity> subsequentActivitiesToUpdate = new HashSet<>(transitivePrecedingDependencyCache.get(priorActivity));
+        subsequentActivitiesToUpdate.add(priorActivity);
+
+        // === Preceding =======
+        // The new prior abilities are the prior and its trasitive prior abilities
+        Set<JobActivity> priorActivitiesToAdd = new HashSet<>(transitivePrecedingDependencyCache.get(priorActivity));
+        priorActivitiesToAdd.add(priorActivity);
+        // The abilities to add the new ones to: the subsequent and its transitively subsequent abilities
+        Set<JobActivity> priorActivitiesToUpdate = new HashSet<>(transitiveSubsequentDependencyCache.get(subsequentActivity));
+        priorActivitiesToUpdate.add(subsequentActivity);
+
+        // Do the updates
+        subsequentActivitiesToUpdate.forEach(a -> transitiveSubsequentDependencyCache.get(a).addAll(subsequentActivitiesToAdd));
+        priorActivitiesToUpdate.forEach(a -> transitivePrecedingDependencyCache.get(a).addAll(priorActivitiesToAdd));
+    }
+
+
+    @Override
+    public Set<JobActivity> getPreceding(JobActivity activity) {
+        if (!_activities.contains(activity)) {
+            throw new IllegalArgumentException("Activity '" + activity + "' is not in the list.");
+        }
+
+        return Collections.unmodifiableSet(transitivePrecedingDependencyCache.get(activity));
+    }
+
+    @Override
+    public Set<JobActivity> getSubsequent(JobActivity activity) {
+        if (!_activities.contains(activity)) {
+            throw new IllegalArgumentException("Activity '" + activity + "' is not in the list.");
+        }
+
+        return Collections.unmodifiableSet(transitiveSubsequentDependencyCache.get(activity));
+    }
+
+    /**
+     * Just for presentation purposes. It is too verbose for toString.
+     */
+    public void printDetailed() {
+        StringBuilder sb = new StringBuilder();
+        sb.append("------------------------------\n");
+        sb.append("DIRECT DEPENDENCIES\n");
+        sb.append(dependencies.entrySet().stream()
+                .flatMap(en -> en.getValue().stream().map(sa -> en.getKey().getName() + " -> " + sa.getName()))
+                .sorted()
+                .collect(Collectors.joining("\n")));
+        sb.append("\nTRANSITIVE PRECEDING DEPENDENCIES\n");
+        sb.append(transitivePrecedingDependencyCache.entrySet().stream()
+                .sorted((e1, e2) -> e1.getKey().getName().compareTo(e2.getKey().getName()))
+                .map(en -> en.getKey().getName() + ": " + en.getValue().stream()
+                        .map(pa -> pa.getName())
+                        .collect(Collectors.joining(", ")))
+                .collect(Collectors.joining("\n")));
+        sb.append("\nTRANSITIVE SUBSEQUENT DEPENDENCIES\n");
+        sb.append(transitiveSubsequentDependencyCache.entrySet().stream()
+                .sorted((e1, e2) -> e1.getKey().getName().compareTo(e2.getKey().getName()))
+                .map(en -> en.getKey().getName() + ": " + en.getValue().stream()
+                        .map(pa -> pa.getName())
+                        .sorted()
+                        .collect(Collectors.joining(", ")))
+                .collect(Collectors.joining("\n")));
+        sb.append("\nTOPOLOGICAL ORDERINGS\n");
+        sb.append(getPossibleOrderings().stream()
+                .sorted((l1, l2) -> {
+                    for (int i = 0; i < l1.size(); i++) {
+                        if (l1.get(i).equals(l2.get(i))) {
+                            continue;
+                        }
+                        return l1.get(i).getName().compareTo(l2.get(i).getName());
+                    }
+                    return 0;
+                })
+                .map(e -> e.stream().map(a -> a.getName()).collect(Collectors.joining(", ")))
+                .collect(Collectors.joining("\n")));
+
+        System.out.println(sb.toString());
+    }
+
+    @Override
+    public Set<List<JobActivity>> getPossibleOrderings() {
+        Set<List<JobActivity>> orderings = new HashSet<>();
+        boolean visited[] = new boolean[_activities.size()];
+        Deque<JobActivity> partialOrder = new ArrayDeque<>();
+        int indegree[] = new int[_activities.size()];
+        for (int i = 0; i < _activities.size(); i++) {
+            JobActivity act = _activities.get(i);
+            indegree[i] = (int) dependencies.entrySet().stream()
+                    .flatMap(en -> en.getValue().stream())
+                    .filter(a -> a.equals(act))
+                    .count();
+        }
+        allTopologicalSort(orderings, partialOrder, visited, indegree);
+        return orderings;
+    }
+
+    /**
+     * Recursive function for collection all possible topological orderings.
+     *
+     * <p>
+     * <i>Migrated from the original C++ source of
+     * <a href="http://www.geeksforgeeks.org/all-topological-sorts-of-a-directed-acyclic-graph/">Utkarsh Trivedi</a>
+     * .</i>
+     * </p>
+     *
+     * @param orderings
+     *            The list of found orderings.
+     * @param partialOrder
+     *            The partial ordering under construction.
+     * @param visited
+     *            Markers on the already visited nodes.
+     * @param indegree
+     *            Dependency level of the nodes.
+     */
+    private void allTopologicalSort(Set<List<JobActivity>> orderings, Deque<JobActivity> partialOrder, boolean[] visited, int[] indegree) {
+        boolean flag = false;
+        for (int i = 0; i < _activities.size(); i++) {
+            JobActivity act = _activities.get(i);
+            if (indegree[i] == 0 && !visited[i]) {
+                dependencies.get(act).forEach(ra -> indegree[indexOf(ra)]--);
+                partialOrder.addLast(act);
+                visited[i] = true;
+                allTopologicalSort(orderings, partialOrder, visited, indegree);
+
+                visited[i] = false;
+                partialOrder.removeLast();
+                dependencies.get(act).forEach(ra -> indegree[indexOf(ra)]++);
+                flag = true;
+            }
+        }
+
+        if (!flag) {
+            orderings.add(new ArrayList<>(partialOrder));
+        }
+    }
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/InternalJobMarker.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/InternalJobMarker.java
new file mode 100644
index 000000000..48346b62c
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/InternalJobMarker.java
@@ -0,0 +1,12 @@
+package com.graphhopper.jsprit.core.problem.job;
+
+/**
+ * Marks internal jobs.
+ *
+ * Note, that the interface is package private, so no internal jobs could be created outside this package.
+ *
+ * @author balage
+ *
+ */
+interface InternalJobMarker {
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Job.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Job.java
index 161e3ee74..92b682102 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Job.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Job.java
@@ -18,10 +18,15 @@
 package com.graphhopper.jsprit.core.problem.job;
 
 
+import java.util.List;
+import java.util.Set;
+
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.HasId;
 import com.graphhopper.jsprit.core.problem.HasIndex;
+import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.Skills;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 
 /**
  * Basic interface for all jobs.
@@ -35,10 +40,12 @@
      *
      * @return id
      */
+    @Override
     public String getId();
 
     /**
-     * Returns size, i.e. capacity-demand, of this job which can consist of an arbitrary number of capacity dimensions.
+     * Returns size, i.e. capacity-demand, of this job which can consist of an
+     * arbitrary number of capacity dimensions.
      *
      * @return Capacity
      */
@@ -54,7 +61,8 @@
     public String getName();
 
     /**
-     * Get priority of job. Only 1 = high priority, 2 = medium and 3 = low are allowed.
+     * Get priority of job. Only 1 = high priority, 2 = medium and 3 = low are
+     * allowed.
      * <p>
      * Default is 2 = medium.
      *
@@ -62,4 +70,30 @@
      */
     public int getPriority();
 
+
+    /**
+     * @return All involved locations
+     */
+    public List<Location> getAllLocations();
+
+    /**
+     * @return Start location
+     */
+    public Location getStartLocation();
+
+    /**
+     * @return End location
+     */
+    public Location getEndLocation();
+
+    /**
+     * @return All activities
+     */
+    public JobActivityList getActivityList();
+
+    /**
+     * @return All operation time windows
+     */
+    public Set<TimeWindow> getTimeWindows();
+
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/JobActivityList.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/JobActivityList.java
new file mode 100644
index 000000000..845660700
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/JobActivityList.java
@@ -0,0 +1,117 @@
+package com.graphhopper.jsprit.core.problem.job;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Optional;
+import java.util.Set;
+
+import com.graphhopper.jsprit.core.problem.solution.route.activity.InternalActivityMarker;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
+
+/**
+ * Abstract ancestor of the container implementations for activities of an {@linkplain AbstractJob}.
+ *
+ * <p>
+ * It provides functions to query all, the preceding or subsequent activities.
+ * </p>
+ *
+ * @author balage
+ *
+ */
+public abstract class JobActivityList {
+
+    //    TODO getRElation of two activities: PRIOR, SUBSEQUENT or UNRELATED
+
+    private AbstractJob job;
+
+    public JobActivityList(AbstractJob job) {
+        super();
+        this.job = job;
+    }
+
+    /**
+     * @return The job the activity list is associated to.
+     */
+    public AbstractJob getJob() {
+        return job;
+    }
+
+    /**
+     * Adds an activity to the list.
+     *
+     * @param activity
+     *            The activity to insert.
+     */
+    public abstract void addActivity(JobActivity activity);
+
+
+    /**
+     * Validates that an activity could be inserted to the queue.
+     *
+     * @param activity
+     *            The activity to insert.
+     */
+    protected void validateActivity(JobActivity activity) {
+        // Internal activities can be inserted only when the job itself is internal
+        if (activity instanceof InternalActivityMarker && !(job instanceof InternalJobMarker)) {
+            throw new IllegalArgumentException("Can't add an internal activity to a non-internal job: " + activity.getClass().getCanonicalName());
+        }
+        // The job of the activity should be the same as the job of the list
+        if (!activity.getJob().equals(job)) {
+            throw new IllegalArgumentException("The activity " + activity.getName() + " is not associated with this job.");
+        }
+    }
+
+    /**
+     * @return The number of activities.
+     */
+    public abstract int size();
+
+    /**
+     * @return All activities.
+     */
+    public abstract List<JobActivity> getAll();
+
+    /**
+     * Returns all the activities to be done before the <code>activity</code>.
+     *
+     * @param activity
+     *            The activity to compare to.
+     * @return The list of the preceding activities.
+     */
+    public abstract Set<JobActivity> getPreceding(JobActivity activity);
+
+    /**
+     * Returns all the activities to be done after the <code>activity</code>.
+     *
+     * @param activity
+     *            The activity to compare to.
+     * @return The list of the subsequent activities.
+     */
+    public abstract Set<JobActivity> getSubsequent(JobActivity activity);
+
+    /**
+     * @return Returns the duplicated copy of the activities.
+     */
+    public List<JobActivity> getAllDuplicated() {
+        List<JobActivity> acts = new ArrayList<>();
+        for (JobActivity act : getAll()) {
+            acts.add((JobActivity) act.duplicate());
+        }
+        return acts;
+    }
+
+    /**
+     * @return Returns all possible orderings.
+     */
+    public abstract Set<List<JobActivity>> getPossibleOrderings();
+
+    public Optional<JobActivity> findByType(String type) {
+        return getAll().stream().filter(a -> a.getType().equals(type)).findFirst();
+    }
+
+    public Optional<JobActivity> findByName(String name) {
+        return getAll().stream().filter(a -> a.getName().equals(name)).findFirst();
+    }
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Pickup.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Pickup.java
index a30ff92b4..28f42c3fc 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Pickup.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Pickup.java
@@ -17,6 +17,7 @@
  */
 package com.graphhopper.jsprit.core.problem.job;
 
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupServiceDEPRECATED;
 
 /**
  * Pickup extends Service and is intended to model a Service where smth is LOADED (i.e. picked up) to a transport unit.
@@ -25,42 +26,34 @@
  */
 public class Pickup extends Service {
 
-    public static class Builder extends Service.Builder<Pickup> {
+    public static final class Builder extends Service.BuilderBase<Pickup, Builder> {
 
-        /**
-         * Returns a new instance of builder that builds a pickup.
-         *
-         * @param id the id of the pickup
-         * @return the builder
-         */
-        public static Builder newInstance(String id) {
-            return new Builder(id);
+        public Builder(String id) {
+            super(id);
+            setType("pickup");
         }
 
-        Builder(String id) {
-            super(id);
+        public static Builder newInstance(String id) {
+            return new Builder(id);
         }
 
-        /**
-         * Builds Pickup.
-         * <p>
-         * <p>Pickup type is "pickup"
-         *
-         * @return pickup
-         * @throws IllegalArgumentException if neither locationId nor coordinate has been set
-         */
-        public Pickup build() {
-            if (location == null) throw new IllegalArgumentException("location is missing");
-            this.setType("pickup");
-            super.capacity = super.capacityBuilder.build();
-            super.skills = super.skillBuilder.build();
+        @Override
+        protected Pickup createInstance() {
             return new Pickup(this);
         }
-
     }
 
     Pickup(Builder builder) {
         super(builder);
     }
 
+    @Override
+    protected void createActivities(JobBuilder<?, ?> builder) {
+        JobActivityList list = new SequentialJobActivityList(this);
+        // TODO - Balage1551
+        //      addActivity(new PickupActivityNEW(this, "pickup", getLocation(), getServiceDuration(), getSize()));
+        list.addActivity(new PickupServiceDEPRECATED(this, (Builder) builder));
+        setActivities(list);
+    }
+
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/SequentialJobActivityList.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/SequentialJobActivityList.java
new file mode 100644
index 000000000..678d4eeb8
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/SequentialJobActivityList.java
@@ -0,0 +1,42 @@
+package com.graphhopper.jsprit.core.problem.job;
+
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
+
+/**
+ * Simple activity list implementation.
+ * <p>
+ * The inserted activities will define an sequential order.
+ * </p>
+ *
+ * @author balage
+ *
+ */
+public class SequentialJobActivityList extends AbstractListBackedJobActivityList {
+
+    public SequentialJobActivityList(AbstractJob job) {
+        super(job);
+    }
+
+    @Override
+    public Set<JobActivity> getPreceding(JobActivity activity) {
+        return new HashSet<>(unmodifiableActivities.subList(0, indexOf(activity)));
+    }
+
+    @Override
+    public Set<JobActivity> getSubsequent(JobActivity activity) {
+        return new HashSet<>(unmodifiableActivities.subList(indexOf(activity), unmodifiableActivities.size()));
+    }
+
+    @Override
+    public Set<List<JobActivity>> getPossibleOrderings() {
+        Set<List<JobActivity>> res = new HashSet<List<JobActivity>>();
+        res.add(unmodifiableActivities);
+        return res;
+    }
+
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java
index 38a496b6d..7c9dd3bfe 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java
@@ -17,22 +17,18 @@
  */
 package com.graphhopper.jsprit.core.problem.job;
 
-import com.graphhopper.jsprit.core.problem.AbstractJob;
+import java.util.Collection;
+
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.Skills;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupServiceDEPRECATED;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindows;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindowsImpl;
-import com.graphhopper.jsprit.core.util.Coordinate;
-
-import java.util.Collection;
 
 /**
  * Service implementation of a job.
  * <p>
- * <p>A service distinguishes itself from a shipment such that it has only one location. Thus a service
- * is a single point in space (where a service-activity occurs).
  * <p>
  * <p>Note that two services are equal if they have the same id.
  *
@@ -45,56 +41,22 @@
      *
      * @author schroeder
      */
-    public static class Builder<T extends Service> {
-
+    public static abstract class BuilderBase<T extends Service, B extends BuilderBase<T, B>>
+    extends JobBuilder<T, B> {
 
-
-
-        /**
-         * Returns a new instance of builder that builds a service.
-         *
-         * @param id the id of the service
-         * @return the builder
-         */
-        public static Builder newInstance(String id) {
-            return new Builder(id);
-        }
-
-        private String id;
-
-        protected String locationId;
-
-        private String type = "service";
-
-        protected Coordinate coord;
+        protected String type = "service";
 
         protected double serviceTime;
 
-        protected TimeWindow timeWindow = TimeWindow.newInstance(0.0, Double.MAX_VALUE);
-
-        protected Capacity.Builder capacityBuilder = Capacity.Builder.newInstance();
-
-        protected Capacity capacity;
-
-        protected Skills.Builder skillBuilder = Skills.Builder.newInstance();
-
-        protected Skills skills;
-
-        private String name = "no-name";
-
         protected Location location;
 
         protected TimeWindowsImpl timeWindows;
 
-		private boolean twAdded = false;
-
-        private int priority = 2;
-
-		Builder(String id){
-			this.id = id;
-			timeWindows = new TimeWindowsImpl();
-			timeWindows.add(timeWindow);
-		}
+        public BuilderBase(String id) {
+            super(id);
+            this.id = id;
+            timeWindows = new TimeWindowsImpl();
+        }
 
         /**
          * Protected method to set the type-name of the service.
@@ -104,9 +66,10 @@ public static Builder newInstance(String id) {
          * @param name the name of service
          * @return the builder
          */
-        protected Builder<T> setType(String name) {
-            this.type = name;
-            return this;
+        @SuppressWarnings("unchecked")
+        protected B setType(String name) {
+            type = name;
+            return (B) this;
         }
 
         /**
@@ -115,9 +78,10 @@ public static Builder newInstance(String id) {
          * @param location location
          * @return builder
          */
-        public Builder<T> setLocation(Location location) {
+        @SuppressWarnings("unchecked")
+        public B setLocation(Location location) {
             this.location = location;
-            return this;
+            return (B) this;
         }
 
         /**
@@ -130,11 +94,13 @@ public static Builder newInstance(String id) {
          * @return builder
          * @throws IllegalArgumentException if serviceTime < 0
          */
-        public Builder<T> setServiceTime(double serviceTime) {
-            if (serviceTime < 0)
+        @SuppressWarnings("unchecked")
+        public B setServiceTime(double serviceTime) {
+            if (serviceTime < 0) {
                 throw new IllegalArgumentException("serviceTime must be greater than or equal to zero");
+            }
             this.serviceTime = serviceTime;
-            return this;
+            return (B) this;
         }
 
         /**
@@ -145,127 +111,127 @@ public static Builder newInstance(String id) {
          * @return the builder
          * @throws IllegalArgumentException if dimensionValue < 0
          */
-        public Builder<T> addSizeDimension(int dimensionIndex, int dimensionValue) {
-            if (dimensionValue < 0) throw new IllegalArgumentException("capacity value cannot be negative");
+        @Override
+        @SuppressWarnings("unchecked")
+        public B addSizeDimension(int dimensionIndex, int dimensionValue) {
+            if (dimensionValue < 0) {
+                throw new IllegalArgumentException("capacity value cannot be negative");
+            }
             capacityBuilder.addDimension(dimensionIndex, dimensionValue);
-            return this;
+            return (B) this;
         }
 
-        public Builder<T> setTimeWindow(TimeWindow tw){
-            if(tw == null) throw new IllegalArgumentException("time-window arg must not be null");
-            this.timeWindow = tw;
-            this.timeWindows = new TimeWindowsImpl();
+        @SuppressWarnings("unchecked")
+        public B setTimeWindow(TimeWindow tw) {
+            if(tw == null) {
+                throw new IllegalArgumentException("time-window arg must not be null");
+            }
+            timeWindows = new TimeWindowsImpl();
             timeWindows.add(tw);
-            return this;
+            return (B) this;
         }
 
-        public Builder<T> addTimeWindow(TimeWindow timeWindow) {
-            if(timeWindow == null) throw new IllegalArgumentException("time-window arg must not be null");
-            if(!twAdded){
-                timeWindows = new TimeWindowsImpl();
-                twAdded = true;
+        @SuppressWarnings("unchecked")
+        public B addTimeWindow(TimeWindow timeWindow) {
+            if(timeWindow == null) {
+                throw new IllegalArgumentException("time-window arg must not be null");
             }
             timeWindows.add(timeWindow);
-            return this;
+            return (B) this;
         }
 
-        public Builder<T> addTimeWindow(double earliest, double latest) {
+        public B addTimeWindow(double earliest, double latest) {
             return addTimeWindow(TimeWindow.newInstance(earliest, latest));
         }
 
         /**
          * Builds the service.
          *
+         * <p>
+         * The implementation of the builder <b>may</b> call the function {@linkplain #preProcess()} prior creating the
+         * instant and <b>MUST</b> call the {@linkplain #postProcess(Service)} method after the instance is constructed:
+         *
+         * <pre>
+         *    &#64;Override
+         *    public Service build() {
+         *        [...]
+         *        Service service = new Service(this);
+         *        postProcess(service);
+         *        return service;
+         *    }
+         * </pre>
+         *
+         * </p>
+         *
          * @return {@link Service}
-         * @throws IllegalArgumentException if neither locationId nor coordinate is set.
+         * @throws IllegalArgumentException
+         *             if neither locationId nor coordinate is set.
          */
-        public T build() {
-            if (location == null) throw new IllegalArgumentException("location is missing");
-            this.setType("service");
-            capacity = capacityBuilder.build();
-            skills = skillBuilder.build();
-            return (T) new Service(this);
-        }
 
-        public Builder<T> addRequiredSkill(String skill) {
-            skillBuilder.addSkill(skill);
-            return this;
+        @Override
+        protected void validate() {
+            if (location == null) {
+                throw new IllegalArgumentException("location is missing");
+            }
+            if (timeWindows.isEmpty()) {
+                timeWindows.add(new TimeWindow(0, Double.MAX_VALUE));
+            }
         }
 
-        public Builder<T> setName(String name) {
-            this.name = name;
-            return this;
+        public String getType() {
+            return type;
         }
 
-        public Builder<T> addAllRequiredSkills(Skills skills){
-            for(String s : skills.values()){
-                skillBuilder.addSkill(s);
-            }
-            return this;
+        public double getServiceTime() {
+            return serviceTime;
         }
 
-        public Builder<T> addAllSizeDimensions(Capacity size){
-            for(int i=0;i<size.getNuOfDimensions();i++){
-                capacityBuilder.addDimension(i,size.get(i));
-            }
-            return this;
+        public Location getLocation() {
+            return location;
         }
 
-        /**
-         * Set priority to service. Only 1 = high priority, 2 = medium and 3 = low are allowed.
-         * <p>
-         * Default is 2 = medium.
-         *
-         * @param priority
-         * @return builder
-         */
-        public Builder<T> setPriority(int priority) {
-            if(priority < 1 || priority > 3) throw new IllegalArgumentException("incorrect priority. only 1 = high, 2 = medium and 3 = low is allowed");
-            this.priority = priority;
-            return this;
+        public TimeWindowsImpl getTimeWindows() {
+            return timeWindows;
         }
     }
 
-    private final String id;
-
-    private final String type;
-
-    private final double serviceTime;
-
-    private final TimeWindow timeWindow;
+    public static class Builder extends BuilderBase<Service, Builder> {
 
-    private final Capacity size;
-
-    private final Skills skills;
+        public static Builder newInstance(String id) {
+            return new Builder(id);
+        }
 
-    private final String name;
+        public Builder(String id) {
+            super(id);
+        }
 
-    private final Location location;
+        @Override
+        protected Service createInstance() {
+            return new Service(this);
+        }
+    }
 
-    private final TimeWindows timeWindowManager;
 
-    private final int priority;
+    private String type;
 
-    Service(Builder builder) {
-        id = builder.id;
-        serviceTime = builder.serviceTime;
-        timeWindow = builder.timeWindow;
+    Service(BuilderBase<? extends Service, ?> builder) {
+        super(builder);
         type = builder.type;
-        size = builder.capacity;
-        skills = builder.skills;
-        name = builder.name;
-        location = builder.location;
-		timeWindowManager = builder.timeWindows;
-        priority = builder.priority;
-	}
-
-	public Collection<TimeWindow> getTimeWindows(){
-		return timeWindowManager.getTimeWindows();
-	}
+    }
+
 
     @Override
-    public String getId() {
-        return id;
+    protected void createActivities(JobBuilder<?, ?> builder) {
+        Builder serviceBuilder = (Builder) builder;
+        JobActivityList list = new SequentialJobActivityList(this);
+        // TODO - Balage1551
+        //        list.addActivity(new ServiceActivityNEW(this, "service", getLocation(), getServiceDuration(), getSize()));
+        list.addActivity(new PickupServiceDEPRECATED(this, serviceBuilder));
+        setActivities(list);
+    }
+
+    public JobActivity getServiceActivity() {
+        return getActivityList().getAll().get(0);
     }
 
     /**
@@ -273,8 +239,9 @@ public String getId() {
      *
      * @return location
      */
+    @Deprecated
     public Location getLocation() {
-        return location;
+        return getServiceActivity().getLocation();
     }
 
 
@@ -283,8 +250,9 @@ public Location getLocation() {
      *
      * @return service duration
      */
+    @Deprecated
     public double getServiceDuration() {
-        return serviceTime;
+        return getServiceActivity().getOperationTime();
     }
 
     /**
@@ -294,8 +262,14 @@ public double getServiceDuration() {
      * @return time window
      *
      */
+    @Deprecated
     public TimeWindow getTimeWindow() {
-        return timeWindowManager.getTimeWindows().iterator().next();
+        return getServiceTimeWindows().iterator().next();
+    }
+
+    @Deprecated
+    public Collection<TimeWindow> getServiceTimeWindows() {
+        return getServiceActivity().getTimeWindows();
     }
 
     /**
@@ -312,62 +286,28 @@ public String getType() {
      */
     @Override
     public String toString() {
-        return "[id=" + id + "][name=" + name + "][type=" + type + "][location=" + location + "][capacity=" + size + "][serviceTime=" + serviceTime + "][timeWindow=" + timeWindow + "]";
+        return "[id=" + getId() + "][name=" + getName() + "][type=" + type + "][location="
+                        + getLocation() + "][capacity=" + getSize() + "][serviceTime="
+                        + getServiceDuration() + "][timeWindow=" + getTimeWindows() + "]";
     }
 
 
     @Override
-    public int hashCode() {
-        final int prime = 31;
-        int result = 1;
-        result = prime * result + ((id == null) ? 0 : id.hashCode());
-        return result;
-    }
-
-    /**
-     * Two services are equal if they have the same id.
-     */
-    @Override
-    public boolean equals(Object obj) {
-        if (this == obj)
-            return true;
-        if (obj == null)
-            return false;
-        if (getClass() != obj.getClass())
-            return false;
-        Service other = (Service) obj;
-        if (id == null) {
-            if (other.id != null)
-                return false;
-        } else if (!id.equals(other.id))
-            return false;
-        return true;
-    }
-
-    @Override
+    @Deprecated
     public Capacity getSize() {
-        return size;
+        return getServiceActivity().getSize();
     }
 
     @Override
-    public Skills getRequiredSkills() {
-        return skills;
+    public Location getStartLocation() {
+        return getServiceActivity().getLocation();
     }
 
+
     @Override
-    public String getName() {
-        return name;
+    public Location getEndLocation() {
+        return getServiceActivity().getLocation();
     }
 
-    /**
-     * Get priority of service. Only 1 = high priority, 2 = medium and 3 = low are allowed.
-     * <p>
-     * Default is 2 = medium.
-     *
-     * @return priority
-     */
-    public int getPriority() {
-        return priority;
-    }
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java
index 3275e9010..912b9df37 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java
@@ -17,139 +17,136 @@
  */
 package com.graphhopper.jsprit.core.problem.job;
 
-import com.graphhopper.jsprit.core.problem.AbstractJob;
+import java.util.Collection;
+
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.Skills;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverShipmentDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupShipmentDEPRECATED;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindowsImpl;
 
-import java.util.Collection;
-
 
 /**
- * Shipment is an implementation of Job and consists of a pickup and a delivery of something.
+ * Shipment is an implementation of Job and consists of a pickup and a delivery
+ * of something.
+ * <p>
+ * <p>
+ * It distinguishes itself from {@link Service} as two locations are involved a
+ * pickup where usually something is loaded to the transport unit and a delivery
+ * where something is unloaded.
+ * <p>
  * <p>
- * <p>It distinguishes itself from {@link Service} as two locations are involved a pickup where usually
- * something is loaded to the transport unit and a delivery where something is unloaded.
+ * By default serviceTimes of both pickup and delivery is 0.0 and timeWindows of
+ * both is [0.0, Double.MAX_VALUE],
  * <p>
- * <p>By default serviceTimes of both pickup and delivery is 0.0 and timeWindows of both is [0.0, Double.MAX_VALUE],
  * <p>
- * <p>A shipment can be built with a builder. You can get an instance of the builder by coding <code>Shipment.Builder.newInstance(...)</code>.
- * This way you can specify the shipment. Once you build the shipment, it is immutable, i.e. fields/attributes cannot be changed anymore and
- * you can only 'get' the specified values.
+ * A shipment can be built with a builder. You can get an instance of the
+ * builder by coding <code>Shipment.Builder.newInstance(...)</code>. This way
+ * you can specify the shipment. Once you build the shipment, it is immutable,
+ * i.e. fields/attributes cannot be changed anymore and you can only 'get' the
+ * specified values.
  * <p>
- * <p>Note that two shipments are equal if they have the same id.
+ * <p>
+ * Note that two shipments are equal if they have the same id.
  *
  * @author schroeder
  */
 public class Shipment extends AbstractJob {
 
-
-
-
     /**
      * Builder that builds the shipment.
      *
      * @author schroeder
      */
-    public static class Builder {
-
-        private String id;
+    public static abstract class BuilderBase<T extends Shipment, B extends BuilderBase<T, B>>
+    extends JobBuilder<T, B> {
 
         private double pickupServiceTime = 0.0;
 
         private double deliveryServiceTime = 0.0;
 
-        private TimeWindow deliveryTimeWindow = TimeWindow.newInstance(0.0, Double.MAX_VALUE);
-
-        private TimeWindow pickupTimeWindow = TimeWindow.newInstance(0.0, Double.MAX_VALUE);
-
-        private Capacity.Builder capacityBuilder = Capacity.Builder.newInstance();
+        private Location pickupLocation;
 
-        private Capacity capacity;
+        private Location deliveryLocation;
 
-        private Skills.Builder skillBuilder = Skills.Builder.newInstance();
+        protected TimeWindowsImpl deliveryTimeWindows = new TimeWindowsImpl();
 
-        private Skills skills;
-
-        private String name = "no-name";
-
-        private Location pickupLocation_;
-
-        private Location deliveryLocation_;
-
-        protected TimeWindowsImpl deliveryTimeWindows;
-
-        private boolean deliveryTimeWindowAdded = false;
-
-        private boolean pickupTimeWindowAdded = false;
-
-        private TimeWindowsImpl pickupTimeWindows;
-
-        private int priority = 2;
+        private TimeWindowsImpl pickupTimeWindows = new TimeWindowsImpl();
 
         /**
          * Returns new instance of this builder.
          *
-         * @param id the id of the shipment which must be a unique identifier among all jobs
+         * @param id
+         *            the id of the shipment which must be a unique identifier
+         *            among all jobs
          * @return the builder
          */
-        public static Builder newInstance(String id) {
-            return new Builder(id);
-        }
 
-        Builder(String id) {
-            if (id == null) throw new IllegalArgumentException("id must not be null");
-            this.id = id;
+        public BuilderBase(String id) {
+            super(id);
             pickupTimeWindows = new TimeWindowsImpl();
-            pickupTimeWindows.add(pickupTimeWindow);
             deliveryTimeWindows = new TimeWindowsImpl();
-            deliveryTimeWindows.add(deliveryTimeWindow);
         }
 
         /**
          * Sets pickup location.
          *
-         * @param pickupLocation pickup location
+         * @param pickupLocation
+         *            pickup location
          * @return builder
          */
-        public Builder setPickupLocation(Location pickupLocation) {
-            this.pickupLocation_ = pickupLocation;
-            return this;
+        @SuppressWarnings("unchecked")
+        public B setPickupLocation(Location pickupLocation) {
+            this.pickupLocation = pickupLocation;
+            return (B) this;
         }
 
         /**
          * Sets pickupServiceTime.
          * <p>
-         * <p>ServiceTime is intended to be the time the implied activity takes at the pickup-location.
+         * <p>
+         * ServiceTime is intended to be the time the implied activity takes at
+         * the pickup-location.
          *
-         * @param serviceTime the service time / duration the pickup of the associated shipment takes
+         * @param serviceTime
+         *            the service time / duration the pickup of the associated
+         *            shipment takes
          * @return builder
-         * @throws IllegalArgumentException if servicTime < 0.0
+         * @throws IllegalArgumentException
+         *             if servicTime < 0.0
          */
-        public Builder setPickupServiceTime(double serviceTime) {
-            if (serviceTime < 0.0) throw new IllegalArgumentException("serviceTime must not be < 0.0");
-            this.pickupServiceTime = serviceTime;
-            return this;
+        @SuppressWarnings("unchecked")
+        public B setPickupServiceTime(double serviceTime) {
+            if (serviceTime < 0.0) {
+                throw new IllegalArgumentException("serviceTime must not be < 0.0");
+            }
+            pickupServiceTime = serviceTime;
+            return (B) this;
         }
 
         /**
-         * Sets the timeWindow for the pickup, i.e. the time-period in which a pickup operation is
-         * allowed to START.
+         * Sets the timeWindow for the pickup, i.e. the time-period in which a
+         * pickup operation is allowed to START.
          * <p>
-         * <p>By default timeWindow is [0.0, Double.MAX_VALUE}
+         * <p>
+         * By default timeWindow is [0.0, Double.MAX_VALUE}
          *
-         * @param timeWindow the time window within the pickup operation/activity can START
+         * @param timeWindow
+         *            the time window within the pickup operation/activity can
+         *            START
          * @return builder
-         * @throws IllegalArgumentException if timeWindow is null
+         * @throws IllegalArgumentException
+         *             if timeWindow is null
          */
-        public Builder setPickupTimeWindow(TimeWindow timeWindow) {
-            if (timeWindow == null) throw new IllegalArgumentException("delivery time-window must not be null");
-            this.pickupTimeWindow = timeWindow;
-            this.pickupTimeWindows = new TimeWindowsImpl();
-            this.pickupTimeWindows.add(timeWindow);
-            return this;
+        @SuppressWarnings("unchecked")
+        public B setPickupTimeWindow(TimeWindow timeWindow) {
+            if (timeWindow == null) {
+                throw new IllegalArgumentException("pickup time-window must not be null");
+            }
+            pickupTimeWindows.clear();
+            pickupTimeWindows.add(timeWindow);
+            return (B) this;
         }
 
 
@@ -157,196 +154,215 @@ public Builder setPickupTimeWindow(TimeWindow timeWindow) {
         /**
          * Sets delivery location.
          *
-         * @param deliveryLocation delivery location
+         * @param deliveryLocation
+         *            delivery location
          * @return builder
          */
-        public Builder setDeliveryLocation(Location deliveryLocation) {
-            this.deliveryLocation_ = deliveryLocation;
-            return this;
+        @SuppressWarnings("unchecked")
+        public B setDeliveryLocation(Location deliveryLocation) {
+            this.deliveryLocation = deliveryLocation;
+            return (B) this;
         }
 
         /**
          * Sets the delivery service-time.
          * <p>
-         * <p>ServiceTime is intended to be the time the implied activity takes at the delivery-location.
+         * <p>
+         * ServiceTime is intended to be the time the implied activity takes at
+         * the delivery-location.
          *
-         * @param deliveryServiceTime the service time / duration of shipment's delivery
+         * @param deliveryServiceTime
+         *            the service time / duration of shipment's delivery
          * @return builder
-         * @throws IllegalArgumentException if serviceTime < 0.0
+         * @throws IllegalArgumentException
+         *             if serviceTime < 0.0
          */
-        public Builder setDeliveryServiceTime(double deliveryServiceTime) {
-            if (deliveryServiceTime < 0.0) throw new IllegalArgumentException("deliveryServiceTime must not be < 0.0");
+        @SuppressWarnings("unchecked")
+        public B setDeliveryServiceTime(double deliveryServiceTime) {
+            if (deliveryServiceTime < 0.0) {
+                throw new IllegalArgumentException("deliveryServiceTime must not be < 0.0");
+            }
             this.deliveryServiceTime = deliveryServiceTime;
-            return this;
+            return (B) this;
         }
 
         /**
-         * Sets the timeWindow for the delivery, i.e. the time-period in which a delivery operation is
-         * allowed to start.
+         * Sets the timeWindow for the delivery, i.e. the time-period in which a
+         * delivery operation is allowed to start.
+         * <p>
          * <p>
-         * <p>By default timeWindow is [0.0, Double.MAX_VALUE}
+         * By default timeWindow is [0.0, Double.MAX_VALUE}
          *
-         * @param timeWindow the time window within the associated delivery is allowed to START
+         * @param timeWindow
+         *            the time window within the associated delivery is allowed
+         *            to START
          * @return builder
-         * @throws IllegalArgumentException if timeWindow is null
+         * @throws IllegalArgumentException
+         *             if timeWindow is null
          */
-        public Builder setDeliveryTimeWindow(TimeWindow timeWindow) {
-            if (timeWindow == null) throw new IllegalArgumentException("delivery time-window must not be null");
-            this.deliveryTimeWindow = timeWindow;
-            this.deliveryTimeWindows = new TimeWindowsImpl();
-            this.deliveryTimeWindows.add(timeWindow);
-            return this;
+        @SuppressWarnings("unchecked")
+        public B setDeliveryTimeWindow(TimeWindow timeWindow) {
+            if (timeWindow == null) {
+                throw new IllegalArgumentException("delivery time-window must not be null");
+            }
+            deliveryTimeWindows.clear();
+            deliveryTimeWindows.add(timeWindow);
+            return (B) this;
         }
 
-        /**
-         * Adds capacity dimension.
-         *
-         * @param dimensionIndex the dimension index of the corresponding capacity value
-         * @param dimensionValue the capacity value
-         * @return builder
-         * @throws IllegalArgumentException if dimVal < 0
-         */
-        public Builder addSizeDimension(int dimensionIndex, int dimensionValue) {
-            if (dimensionValue < 0) throw new IllegalArgumentException("capacity value cannot be negative");
-            capacityBuilder.addDimension(dimensionIndex, dimensionValue);
-            return this;
+        @SuppressWarnings("unchecked")
+        public B addDeliveryTimeWindow(TimeWindow timeWindow) {
+            if (timeWindow == null) {
+                throw new IllegalArgumentException("time-window arg must not be null");
+            }
+            deliveryTimeWindows.add(timeWindow);
+            return (B) this;
         }
 
-
-        /**
-         * Builds the shipment.
-         *
-         * @return shipment
-         * @throws IllegalArgumentException if neither pickup-location nor pickup-coord is set or if neither delivery-location nor delivery-coord
-         *                               is set
-         */
-        public Shipment build() {
-            if (pickupLocation_ == null) throw new IllegalArgumentException("pickup location is missing");
-            if (deliveryLocation_ == null) throw new IllegalArgumentException("delivery location is missing");
-            capacity = capacityBuilder.build();
-            skills = skillBuilder.build();
-            return new Shipment(this);
+        @SuppressWarnings("unchecked")
+        public B addDeliveryTimeWindow(double earliest, double latest) {
+            addDeliveryTimeWindow(TimeWindow.newInstance(earliest, latest));
+            return (B) this;
         }
 
-
-        public Builder addRequiredSkill(String skill) {
-            skillBuilder.addSkill(skill);
-            return this;
+        @SuppressWarnings("unchecked")
+        public B addPickupTimeWindow(TimeWindow timeWindow) {
+            if (timeWindow == null) {
+                throw new IllegalArgumentException("time-window arg must not be null");
+            }
+            pickupTimeWindows.add(timeWindow);
+            return (B) this;
         }
 
-        public Builder setName(String name) {
-            this.name = name;
-            return this;
+        @SuppressWarnings("unchecked")
+        public B addPickupTimeWindow(double earliest, double latest) {
+            addPickupTimeWindow(TimeWindow.newInstance(earliest, latest));
+            return (B) this;
         }
 
-        public Builder addDeliveryTimeWindow(TimeWindow timeWindow) {
-            if(timeWindow == null) throw new IllegalArgumentException("time-window arg must not be null");
-            if(!deliveryTimeWindowAdded){
-                deliveryTimeWindows = new TimeWindowsImpl();
-                deliveryTimeWindowAdded = true;
+        @Override
+        protected void validate() {
+            if (pickupLocation == null) {
+                throw new IllegalArgumentException("pickup location is missing");
+            }
+            if (deliveryLocation == null) {
+                throw new IllegalArgumentException("delivery location is missing");
+            }
+            if (pickupTimeWindows.isEmpty()) {
+                pickupTimeWindows.add(new TimeWindow(0, Double.MAX_VALUE));
+            }
+            if (deliveryTimeWindows.isEmpty()) {
+                deliveryTimeWindows.add(new TimeWindow(0, Double.MAX_VALUE));
             }
-            deliveryTimeWindows.add(timeWindow);
-            return this;
         }
 
-        public Builder addDeliveryTimeWindow(double earliest, double latest) {
-            addDeliveryTimeWindow(TimeWindow.newInstance(earliest, latest));
-            return this;
+        // ---- Refactor test
+
+        public double getPickupServiceTime() {
+            return pickupServiceTime;
         }
 
-        public Builder addPickupTimeWindow(TimeWindow timeWindow) {
-            if(timeWindow == null) throw new IllegalArgumentException("time-window arg must not be null");
-            if(!pickupTimeWindowAdded){
-                pickupTimeWindows = new TimeWindowsImpl();
-                pickupTimeWindowAdded = true;
-            }
-            pickupTimeWindows.add(timeWindow);
-            return this;
+        public double getDeliveryServiceTime() {
+            return deliveryServiceTime;
         }
 
-        public Builder addPickupTimeWindow(double earliest, double latest) {
-            return addPickupTimeWindow(TimeWindow.newInstance(earliest, latest));
+        public Location getPickupLocation() {
+            return pickupLocation;
         }
 
-        /**
-         * Set priority to shipment. Only 1 = high priority, 2 = medium and 3 = low are allowed.
-         * <p>
-         * Default is 2 = medium.
-         *
-         * @param priority
-         * @return builder
-         */
-        public Builder setPriority(int priority) {
-            if(priority < 1 || priority > 3) throw new IllegalArgumentException("incorrect priority. only 1 = high, 2 = medium and 3 = low is allowed");
-            this.priority = priority;
-            return this;
+        public Location getDeliveryLocation() {
+            return deliveryLocation;
         }
-    }
 
-    private final String id;
+        public TimeWindowsImpl getDeliveryTimeWindows() {
+            return deliveryTimeWindows;
+        }
 
-    private final double pickupServiceTime;
+        public TimeWindowsImpl getPickupTimeWindows() {
+            return pickupTimeWindows;
+        }
 
-    private final double deliveryServiceTime;
+    }
 
-    private final TimeWindow deliveryTimeWindow;
+    public static final class Builder extends BuilderBase<Shipment, Builder> {
 
-    private final TimeWindow pickupTimeWindow;
+        public static Builder newInstance(String id) {
+            return new Builder(id);
+        }
 
-    private final Capacity capacity;
+        public Builder(String id) {
+            super(id);
+        }
 
-    private final Skills skills;
+        @Override
+        protected Shipment createInstance() {
+            return new Shipment(this);
+        }
 
-    private final String name;
+    }
 
-    private final Location pickupLocation_;
 
-    private final Location deliveryLocation_;
+    Shipment(BuilderBase<? extends Shipment, ?> builder) {
+        super(builder);
+    }
 
-    private final TimeWindowsImpl deliveryTimeWindows;
 
-    private final TimeWindowsImpl pickupTimeWindows;
+    @Override
+    protected void createActivities(JobBuilder<?, ?> builder) {
+        Builder shipmentBuilder = (Builder) builder;
+        JobActivityList list = new SequentialJobActivityList(this);
+        // TODO - Balage1551
+        //      list.addActivity(new PickupActivityNEW(this, "pickup", getPickupLocation(), getPickupServiceTime(), getSize()));
+        //      list.addActivity(new PickupActivityNEW(this, "delivery", getDeliveryLocation(), getDeliveryServiceTime(), getSize()));
+        list.addActivity(new PickupShipmentDEPRECATED(this, shipmentBuilder));
+        list.addActivity(new DeliverShipmentDEPRECATED(this, shipmentBuilder));
+        setActivities(list);
+    }
 
-    private final int priority;
 
-    Shipment(Builder builder) {
-        this.id = builder.id;
-        this.pickupServiceTime = builder.pickupServiceTime;
-        this.pickupTimeWindow = builder.pickupTimeWindow;
-        this.deliveryServiceTime = builder.deliveryServiceTime;
-        this.deliveryTimeWindow = builder.deliveryTimeWindow;
-        this.capacity = builder.capacity;
-        this.skills = builder.skills;
-        this.name = builder.name;
-        this.pickupLocation_ = builder.pickupLocation_;
-        this.deliveryLocation_ = builder.deliveryLocation_;
-        this.deliveryTimeWindows = builder.deliveryTimeWindows;
-        this.pickupTimeWindows = builder.pickupTimeWindows;
-        this.priority = builder.priority;
+    @Override
+    public Location getStartLocation() {
+        return getPickupActivity().getLocation();
     }
 
     @Override
-    public String getId() {
-        return id;
+    public Location getEndLocation() {
+        return getDeliveryActivity().getLocation();
+    }
+
+    public PickupShipmentDEPRECATED getPickupActivity() {
+        return (PickupShipmentDEPRECATED) getActivityList().findByType(PickupShipmentDEPRECATED.NAME)
+                        .get();
+    }
+
+    public DeliverShipmentDEPRECATED getDeliveryActivity() {
+        return (DeliverShipmentDEPRECATED) getActivityList().findByType(DeliverShipmentDEPRECATED.NAME)
+                        .get();
     }
 
+    // =================== DEPRECATED GETTERS
+
+    @Deprecated
     public Location getPickupLocation() {
-        return pickupLocation_;
+        return getPickupActivity().getLocation();
     }
 
     /**
      * Returns the pickup service-time.
      * <p>
-     * <p>By default service-time is 0.0.
+     * <p>
+     * By default service-time is 0.0.
      *
      * @return service-time
      */
+    @Deprecated
     public double getPickupServiceTime() {
-        return pickupServiceTime;
+        return getPickupActivity().getOperationTime();
     }
 
+    @Deprecated
     public Location getDeliveryLocation() {
-        return deliveryLocation_;
+        return getDeliveryActivity().getLocation();
     }
 
     /**
@@ -354,8 +370,9 @@ public Location getDeliveryLocation() {
      *
      * @return service-time of delivery
      */
+    @Deprecated
     public double getDeliveryServiceTime() {
-        return deliveryServiceTime;
+        return getDeliveryActivity().getOperationTime();
     }
 
     /**
@@ -363,12 +380,14 @@ public double getDeliveryServiceTime() {
      *
      * @return time-window of delivery
      */
+    @Deprecated
     public TimeWindow getDeliveryTimeWindow() {
-        return deliveryTimeWindows.getTimeWindows().iterator().next();
+        return getDeliveryTimeWindows().iterator().next();
     }
 
+    @Deprecated
     public Collection<TimeWindow> getDeliveryTimeWindows() {
-        return deliveryTimeWindows.getTimeWindows();
+        return getDeliveryActivity().getTimeWindows();
     }
 
     /**
@@ -376,68 +395,20 @@ public TimeWindow getDeliveryTimeWindow() {
      *
      * @return time-window of pickup
      */
+    @Deprecated
     public TimeWindow getPickupTimeWindow() {
-        return pickupTimeWindows.getTimeWindows().iterator().next();
+        return getPickupTimeWindows().iterator().next();
     }
 
+    @Deprecated
     public Collection<TimeWindow> getPickupTimeWindows() {
-        return pickupTimeWindows.getTimeWindows();
-    }
-
-
-    @Override
-    public int hashCode() {
-        final int prime = 31;
-        int result = 1;
-        result = prime * result + ((id == null) ? 0 : id.hashCode());
-        return result;
-    }
-
-    /**
-     * Two shipments are equal if they have the same id.
-     *
-     * @return true if shipments are equal (have the same id)
-     */
-    @Override
-    public boolean equals(Object obj) {
-        if (this == obj)
-            return true;
-        if (obj == null)
-            return false;
-        if (getClass() != obj.getClass())
-            return false;
-        Shipment other = (Shipment) obj;
-        if (id == null) {
-            if (other.id != null)
-                return false;
-        } else if (!id.equals(other.id))
-            return false;
-        return true;
+        return getPickupActivity().getTimeWindows();
     }
 
     @Override
+    @Deprecated
     public Capacity getSize() {
-        return capacity;
+        return getPickupActivity().getSize();
     }
 
-    @Override
-    public Skills getRequiredSkills() {
-        return skills;
-    }
-
-    @Override
-    public String getName() {
-        return name;
-    }
-
-    /**
-     * Get priority of shipment. Only 1 = high priority, 2 = medium and 3 = low are allowed.
-     * <p>
-     * Default is 2 = medium.
-     *
-     * @return priority
-     */
-    public int getPriority() {
-        return priority;
-    }
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/misc/JobInsertionContext.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/misc/JobInsertionContext.java
index 0115e9c22..eadd4dd9d 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/misc/JobInsertionContext.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/misc/JobInsertionContext.java
@@ -17,15 +17,15 @@
  */
 package com.graphhopper.jsprit.core.problem.misc;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import com.graphhopper.jsprit.core.problem.driver.Driver;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 
-import java.util.ArrayList;
-import java.util.List;
-
 /**
  * Provides context information about a particular job insertion.
  */
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/VehicleRoutingProblemSolution.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/VehicleRoutingProblemSolution.java
index ba374d1d6..598f5a48c 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/VehicleRoutingProblemSolution.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/VehicleRoutingProblemSolution.java
@@ -17,12 +17,12 @@
  */
 package com.graphhopper.jsprit.core.problem.solution;
 
-import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-
 import java.util.ArrayList;
 import java.util.Collection;
 
+import com.graphhopper.jsprit.core.problem.job.Job;
+import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+
 
 /**
  * Contains the solution of a vehicle routing problem and its corresponding costs.
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/ReverseRouteActivityVisitor.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/ReverseRouteActivityVisitor.java
index 8ea38eccd..3686c0a25 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/ReverseRouteActivityVisitor.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/ReverseRouteActivityVisitor.java
@@ -17,13 +17,13 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route;
 
-import com.graphhopper.jsprit.core.problem.solution.route.activity.ReverseActivityVisitor;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Iterator;
 
+import com.graphhopper.jsprit.core.problem.solution.route.activity.ReverseActivityVisitor;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
+
 
 public class ReverseRouteActivityVisitor implements RouteVisitor {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/RouteActivityVisitor.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/RouteActivityVisitor.java
index f03aa9342..959923160 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/RouteActivityVisitor.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/RouteActivityVisitor.java
@@ -17,12 +17,12 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route;
 
-import com.graphhopper.jsprit.core.problem.solution.route.activity.ActivityVisitor;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-
 import java.util.ArrayList;
 import java.util.Collection;
 
+import com.graphhopper.jsprit.core.problem.solution.route.activity.ActivityVisitor;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
+
 
 public class RouteActivityVisitor implements RouteVisitor {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRoute.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRoute.java
index c04d1ee11..c36d346fc 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRoute.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRoute.java
@@ -17,17 +17,32 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route;
 
-import com.graphhopper.jsprit.core.problem.AbstractActivity;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
 import com.graphhopper.jsprit.core.problem.JobActivityFactory;
+import com.graphhopper.jsprit.core.problem.SimpleJobActivityFactory;
 import com.graphhopper.jsprit.core.problem.driver.Driver;
 import com.graphhopper.jsprit.core.problem.driver.DriverImpl;
-import com.graphhopper.jsprit.core.problem.job.*;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.*;
+import com.graphhopper.jsprit.core.problem.job.Break;
+import com.graphhopper.jsprit.core.problem.job.Delivery;
+import com.graphhopper.jsprit.core.problem.job.Pickup;
+import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.End;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.Start;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivities;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivityFactory;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 
-import java.util.*;
-
 /**
  * Contains the tour, i.e. a number of activities, a vehicle servicing the tour and a driver.
  *
@@ -43,7 +58,9 @@
      * @throws IllegalArgumentException if route is null
      */
     public static VehicleRoute copyOf(VehicleRoute route) {
-        if (route == null) throw new IllegalArgumentException("route must not be null");
+        if (route == null) {
+            throw new IllegalArgumentException("route must not be null");
+        }
         return new VehicleRoute(route);
     }
 
@@ -82,8 +99,9 @@ public static VehicleRoute emptyRoute() {
          * @return this builder
          */
         public static Builder newInstance(Vehicle vehicle, Driver driver) {
-            if (vehicle == null || driver == null)
+            if (vehicle == null || driver == null) {
                 throw new IllegalArgumentException("null arguments not accepted. ini emptyRoute with VehicleImpl.createNoVehicle() and DriverImpl.noDriver()");
+            }
             return new Builder(vehicle, driver);
         }
 
@@ -101,8 +119,9 @@ public static Builder newInstance(Vehicle vehicle, Driver driver) {
          * @return this builder
          */
         public static Builder newInstance(Vehicle vehicle) {
-            if (vehicle == null)
+            if (vehicle == null) {
                 throw new IllegalArgumentException("null arguments not accepted. ini emptyRoute with VehicleImpl.createNoVehicle() and DriverImpl.noDriver()");
+            }
             return new Builder(vehicle, DriverImpl.noDriver());
         }
 
@@ -116,29 +135,15 @@ public static Builder newInstance(Vehicle vehicle) {
 
         private TourActivities tourActivities = new TourActivities();
 
-        private TourActivityFactory serviceActivityFactory = new DefaultTourActivityFactory();
-
-        private TourShipmentActivityFactory shipmentActivityFactory = new DefaultShipmentActivityFactory();
+        // private TourActivityFactory serviceActivityFactory = new
+        // DefaultTourActivityFactory();
+        //
+        // private TourShipmentActivityFactory shipmentActivityFactory = new
+        // DefaultShipmentActivityFactory();
 
         private Set<Shipment> openShipments = new HashSet<Shipment>();
 
-        private JobActivityFactory jobActivityFactory = new JobActivityFactory() {
-
-            @Override
-            public List<AbstractActivity> createActivities(Job job) {
-                List<AbstractActivity> acts = new ArrayList<AbstractActivity>();
-                if (job instanceof Break) {
-                    acts.add(BreakActivity.newInstance((Break) job));
-                } else if (job instanceof Service) {
-                    acts.add(serviceActivityFactory.createActivity((Service) job));
-                } else if (job instanceof Shipment) {
-                    acts.add(shipmentActivityFactory.createPickup((Shipment) job));
-                    acts.add(shipmentActivityFactory.createDelivery((Shipment) job));
-                }
-                return acts;
-            }
-
-        };
+        private JobActivityFactory jobActivityFactory = new SimpleJobActivityFactory();
 
         public Builder setJobActivityFactory(JobActivityFactory jobActivityFactory) {
             this.jobActivityFactory = jobActivityFactory;
@@ -164,8 +169,9 @@ private Builder(Vehicle vehicle, Driver driver) {
          * @throws IllegalArgumentException if departureTime < vehicle.getEarliestDeparture()
          */
         public Builder setDepartureTime(double departureTime) {
-            if (departureTime < start.getEndTime())
+            if (departureTime < start.getEndTime()) {
                 throw new IllegalArgumentException("departureTime < vehicle.getEarliestDepartureTime(). this must not be.");
+            }
             start.setEndTime(departureTime);
             return this;
         }
@@ -187,8 +193,10 @@ public Builder addService(Service service) {
         }
 
         public Builder addService(Service service, TimeWindow timeWindow) {
-            if (service == null) throw new IllegalArgumentException("service must not be null");
-            List<AbstractActivity> acts = jobActivityFactory.createActivities(service);
+            if (service == null) {
+                throw new IllegalArgumentException("service must not be null");
+            }
+            List<JobActivity> acts = jobActivityFactory.createActivities(service);
             TourActivity act = acts.get(0);
             act.setTheoreticalEarliestOperationStartTime(timeWindow.getStart());
             act.setTheoreticalLatestOperationStartTime(timeWindow.getEnd());
@@ -197,12 +205,16 @@ public Builder addService(Service service, TimeWindow timeWindow) {
         }
 
         public Builder addBreak(Break currentbreak) {
-            if (currentbreak == null) throw new IllegalArgumentException("break must not be null");
+            if (currentbreak == null) {
+                throw new IllegalArgumentException("break must not be null");
+            }
             return addBreak(currentbreak, currentbreak.getTimeWindow());
         }
 
         public Builder addBreak(Break currentbreak, TimeWindow timeWindow) {
-            if (currentbreak == null) throw new IllegalArgumentException("break must not be null");
+            if (currentbreak == null) {
+                throw new IllegalArgumentException("break must not be null");
+            }
             return addService(currentbreak,timeWindow);
         }
 
@@ -213,12 +225,16 @@ public Builder addBreak(Break currentbreak, TimeWindow timeWindow) {
          * @return the builder
          */
         public Builder addPickup(Pickup pickup) {
-            if (pickup == null) throw new IllegalArgumentException("pickup must not be null");
+            if (pickup == null) {
+                throw new IllegalArgumentException("pickup must not be null");
+            }
             return addService(pickup);
         }
 
         public Builder addPickup(Pickup pickup, TimeWindow timeWindow) {
-            if (pickup == null) throw new IllegalArgumentException("pickup must not be null");
+            if (pickup == null) {
+                throw new IllegalArgumentException("pickup must not be null");
+            }
             return addService(pickup,timeWindow);
         }
 
@@ -229,12 +245,16 @@ public Builder addPickup(Pickup pickup, TimeWindow timeWindow) {
          * @return the builder
          */
         public Builder addDelivery(Delivery delivery) {
-            if (delivery == null) throw new IllegalArgumentException("delivery must not be null");
+            if (delivery == null) {
+                throw new IllegalArgumentException("delivery must not be null");
+            }
             return addService(delivery);
         }
 
         public Builder addDelivery(Delivery delivery, TimeWindow timeWindow) {
-            if (delivery == null) throw new IllegalArgumentException("delivery must not be null");
+            if (delivery == null) {
+                throw new IllegalArgumentException("delivery must not be null");
+            }
             return addService(delivery,timeWindow);
         }
 
@@ -250,9 +270,10 @@ public Builder addPickup(Shipment shipment) {
         }
 
         public Builder addPickup(Shipment shipment, TimeWindow pickupTimeWindow) {
-            if (openShipments.contains(shipment))
+            if (openShipments.contains(shipment)) {
                 throw new IllegalArgumentException("shipment has already been added. cannot add it twice.");
-            List<AbstractActivity> acts = jobActivityFactory.createActivities(shipment);
+            }
+            List<JobActivity> acts = jobActivityFactory.createActivities(shipment);
             TourActivity act = acts.get(0);
             act.setTheoreticalEarliestOperationStartTime(pickupTimeWindow.getStart());
             act.setTheoreticalLatestOperationStartTime(pickupTimeWindow.getEnd());
@@ -323,11 +344,11 @@ public VehicleRoute build() {
      * @param route to copy
      */
     private VehicleRoute(VehicleRoute route) {
-        this.start = Start.copyOf(route.getStart());
-        this.end = End.copyOf(route.getEnd());
-        this.tourActivities = TourActivities.copyOf(route.getTourActivities());
-        this.vehicle = route.getVehicle();
-        this.driver = route.getDriver();
+        start = Start.copyOf(route.getStart());
+        end = End.copyOf(route.getEnd());
+        tourActivities = TourActivities.copyOf(route.getTourActivities());
+        vehicle = route.getVehicle();
+        driver = route.getDriver();
     }
 
     /**
@@ -336,11 +357,11 @@ private VehicleRoute(VehicleRoute route) {
      * @param builder used to build route
      */
     private VehicleRoute(Builder builder) {
-        this.tourActivities = builder.tourActivities;
-        this.vehicle = builder.vehicle;
-        this.driver = builder.driver;
-        this.start = builder.start;
-        this.end = builder.end;
+        tourActivities = builder.tourActivities;
+        vehicle = builder.vehicle;
+        driver = builder.driver;
+        start = builder.start;
+        end = builder.end;
     }
 
     /**
@@ -423,8 +444,9 @@ private void setStartAndEnd(Vehicle vehicle, double vehicleDepTime) {
      * @throws IllegalArgumentException if start is null
      */
     public double getDepartureTime() {
-        if (start == null)
+        if (start == null) {
             throw new IllegalArgumentException("cannot get departureTime without having a vehicle on this route. use setVehicle(vehicle,departureTime) instead.");
+        }
         return start.getEndTime();
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/AbstractActivityNEW.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/AbstractActivityNEW.java
new file mode 100644
index 000000000..4e2e66ac8
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/AbstractActivityNEW.java
@@ -0,0 +1,134 @@
+package com.graphhopper.jsprit.core.problem.solution.route.activity;
+
+
+
+import java.lang.reflect.Constructor;
+import java.lang.reflect.InvocationTargetException;
+
+import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.Location;
+
+public abstract class AbstractActivityNEW implements TourActivity {
+
+    private int index;
+    protected Capacity capacity;
+    protected double arrTime;
+    protected double endTime;
+    protected double theoreticalEarliest = 0;
+    protected double theoreticalLatest = Double.MAX_VALUE;
+    protected String type;
+    protected Location location;
+
+
+    public AbstractActivityNEW(String type, Location location, Capacity capacity) {
+        super();
+        this.capacity = capacity;
+        this.type = type;
+        this.location = location;
+    }
+
+
+    public AbstractActivityNEW(AbstractActivityNEW sourceActivity) {
+        arrTime = sourceActivity.getArrTime();
+        endTime = sourceActivity.getEndTime();
+        capacity = sourceActivity.getSize();
+        setIndex(sourceActivity.getIndex());
+        theoreticalEarliest = sourceActivity.getTheoreticalEarliestOperationStartTime();
+        theoreticalLatest = sourceActivity.getTheoreticalLatestOperationStartTime();
+        type = sourceActivity.type;
+        location = sourceActivity.location;
+    }
+
+    @Override
+    public void setTheoreticalEarliestOperationStartTime(double earliest) {
+        theoreticalEarliest = earliest;
+    }
+
+    @Override
+    public int getIndex() {
+        return index;
+    }
+
+    public void setIndex(int index) {
+        this.index = index;
+    }
+
+    @Override
+    public void setTheoreticalLatestOperationStartTime(double latest) {
+        theoreticalLatest = latest;
+    }
+
+    @Override
+    public double getTheoreticalEarliestOperationStartTime() {
+        return theoreticalEarliest;
+    }
+
+    @Override
+    public double getTheoreticalLatestOperationStartTime() {
+        return theoreticalLatest;
+    }
+
+    @Override
+    public double getArrTime() {
+        return arrTime;
+    }
+
+    @Override
+    public double getEndTime() {
+        return endTime;
+    }
+
+    @Override
+    public void setArrTime(double arrTime) {
+        this.arrTime = arrTime;
+    }
+
+    @Override
+    public void setEndTime(double endTime) {
+        this.endTime = endTime;
+    }
+
+    @Override
+    public Capacity getSize() {
+        return capacity;
+    }
+
+    @Override
+    public String getName() {
+        return getType();
+    }
+
+    public String getType() {
+        return type;
+    }
+
+
+    @Override
+    public Location getLocation() {
+        return location;
+    }
+
+    @Override
+    public String toString() {
+        return "[name=" + getName() + "][locationId=" + getLocation().getId()
+                        + "][size=" + getSize().toString()
+                        + "][twStart=" + Activities.round(getTheoreticalEarliestOperationStartTime())
+                        + "][twEnd=" + Activities.round(getTheoreticalLatestOperationStartTime()) + "]";
+    }
+
+
+    @Override
+    public TourActivity duplicate() {
+        // TODO - Balage1551 - It uses safe reflection. But this is reflection which is expensive, so
+        // in case it is a bottleneck, this should be refactored
+        try {
+            Constructor<? extends AbstractActivityNEW> constructor = getClass().getConstructor(getClass());
+            return constructor.newInstance(this);
+        } catch (NoSuchMethodException | SecurityException | InstantiationException | IllegalAccessException | IllegalArgumentException
+                        | InvocationTargetException e) {
+            System.out.println(this.getClass().getCanonicalName() + " : " + this);
+            throw new IllegalStateException(e);
+        }
+    }
+
+}
\ No newline at end of file
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivity.java
index cb37c9fc8..299a5aaad 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivity.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivity.java
@@ -17,85 +17,40 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.AbstractActivity;
+import java.util.Collection;
+
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.job.AbstractJob;
 import com.graphhopper.jsprit.core.problem.job.Break;
-import com.graphhopper.jsprit.core.problem.job.Service;
-
-public class BreakActivity extends AbstractActivity implements TourActivity.JobActivity {
-
-    public static int counter = 0;
-
-    public double arrTime;
-
-    public double endTime;
-
-    private Location location;
-
-    private double duration;
+import com.graphhopper.jsprit.core.problem.job.Break.Builder;
 
-    /**
-     * @return the arrTime
-     */
-    public double getArrTime() {
-        return arrTime;
-    }
-
-    /**
-     * @param arrTime the arrTime to set
-     */
-    public void setArrTime(double arrTime) {
-        this.arrTime = arrTime;
-    }
-
-    /**
-     * @return the endTime
-     */
-    public double getEndTime() {
-        return endTime;
-    }
+public class BreakActivity extends InternalJobActivity {
 
-    /**
-     * @param endTime the endTime to set
-     */
-    public void setEndTime(double endTime) {
-        this.endTime = endTime;
+    public static BreakActivity newInstance(Break aBreak, Builder builder) {
+        return new BreakActivity(aBreak, "break", builder.getLocation(), builder.getServiceTime(),
+                        builder.getCapacity(), builder.getTimeWindows().getTimeWindows());
     }
 
-    public static BreakActivity copyOf(BreakActivity breakActivity) {
-        return new BreakActivity(breakActivity);
-    }
+    // protected BreakActivity(Break aBreak) {
+    // super(aBreak, "Break", aBreak.getLocation(), aBreak.getServiceDuration(),
+    // Capacity.createNullCapacity(aBreak.getSize()), aBreak.getTimeWindows());
+    // }
 
-    public static BreakActivity newInstance(Break aBreak) {
-        return new BreakActivity(aBreak);
+    public BreakActivity(BreakActivity breakActivity) {
+        super(breakActivity);
     }
 
-    private final Break aBreak;
-
-    private double earliest = 0;
-
-    private double latest = Double.MAX_VALUE;
-
-    protected BreakActivity(Break aBreak) {
-        counter++;
-        this.aBreak = aBreak;
-        this.duration = aBreak.getServiceDuration();
+    private BreakActivity(AbstractJob job, String name, Location location, double operationTime,
+                    Capacity capacity, Collection<TimeWindow> timeWindows) {
+        super(job, name, location, operationTime, capacity, timeWindows);
     }
 
-    protected BreakActivity(BreakActivity breakActivity) {
-        counter++;
-        this.aBreak = (Break) breakActivity.getJob();
-        this.arrTime = breakActivity.getArrTime();
-        this.endTime = breakActivity.getEndTime();
-        this.location = breakActivity.getLocation();
-        setIndex(breakActivity.getIndex());
-        this.earliest = breakActivity.getTheoreticalEarliestOperationStartTime();
-        this.latest = breakActivity.getTheoreticalLatestOperationStartTime();
-        this.duration = breakActivity.getOperationTime();
+    @Override
+    public Break getJob() {
+        return (Break) super.getJob();
     }
 
-
     /* (non-Javadoc)
      * @see java.lang.Object#hashCode()
      */
@@ -103,7 +58,7 @@ protected BreakActivity(BreakActivity breakActivity) {
     public int hashCode() {
         final int prime = 31;
         int result = 1;
-        result = prime * result + ((aBreak == null) ? 0 : aBreak.hashCode());
+        result = prime * result + ((getJob() == null) ? 0 : getJob().hashCode());
         return result;
     }
 
@@ -112,85 +67,29 @@ public int hashCode() {
      */
     @Override
     public boolean equals(Object obj) {
-        if (this == obj)
+        if (this == obj) {
             return true;
-        if (obj == null)
+        }
+        if (obj == null) {
             return false;
-        if (getClass() != obj.getClass())
+        }
+        if (getClass() != obj.getClass()) {
             return false;
+        }
         BreakActivity other = (BreakActivity) obj;
-        if (aBreak == null) {
-            if (other.aBreak != null)
+        if (getJob() == null) {
+            if (other.getJob() != null) {
                 return false;
-        } else if (!aBreak.equals(other.aBreak))
+            }
+        } else if (!getJob().equals(other.getJob())) {
             return false;
+        }
         return true;
     }
 
-    public double getTheoreticalEarliestOperationStartTime() {
-        return earliest;
-    }
-
-    public double getTheoreticalLatestOperationStartTime() {
-        return latest;
-    }
-
-    @Override
-    public double getOperationTime() {
-        return duration;
-    }
-
-    public void setOperationTime(double duration){
-        this.duration = duration;
-    }
-
-    @Override
-    public Location getLocation() {
-        return location;
-    }
 
     public void setLocation(Location breakLocation) {
-        this.location = breakLocation;
-    }
-
-    @Override
-    public Service getJob() {
-        return aBreak;
-    }
-
-
-    @Override
-    public String toString() {
-        return "[type=" + getName() + "][location=" + getLocation()
-            + "][size=" + getSize().toString()
-            + "][twStart=" + Activities.round(getTheoreticalEarliestOperationStartTime())
-            + "][twEnd=" + Activities.round(getTheoreticalLatestOperationStartTime()) + "]";
-    }
-
-    @Override
-    public void setTheoreticalEarliestOperationStartTime(double earliest) {
-        this.earliest = earliest;
-    }
-
-    @Override
-    public void setTheoreticalLatestOperationStartTime(double latest) {
-        this.latest = latest;
-    }
-
-    @Override
-    public String getName() {
-        return aBreak.getType();
+        location = breakLocation;
     }
 
-    @Override
-    public TourActivity duplicate() {
-        return new BreakActivity(this);
-    }
-
-    @Override
-    public Capacity getSize() {
-        return aBreak.getSize();
-    }
-
-
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DefaultShipmentActivityFactory.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DefaultShipmentActivityFactory.java
index ce0b24f7a..d7d82a451 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DefaultShipmentActivityFactory.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DefaultShipmentActivityFactory.java
@@ -17,19 +17,18 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.AbstractActivity;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 
 public class DefaultShipmentActivityFactory implements TourShipmentActivityFactory {
 
     @Override
-    public AbstractActivity createPickup(Shipment shipment) {
-        return new PickupShipment(shipment);
+    public AbstractActivityNEW createPickup(Shipment shipment) {
+        return shipment.getPickupActivity();
     }
 
     @Override
-    public AbstractActivity createDelivery(Shipment shipment) {
-        return new DeliverShipment(shipment);
+    public AbstractActivityNEW createDelivery(Shipment shipment) {
+        return shipment.getDeliveryActivity();
     }
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DefaultTourActivityFactory.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DefaultTourActivityFactory.java
index 0f1047dcc..fae304948 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DefaultTourActivityFactory.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DefaultTourActivityFactory.java
@@ -17,7 +17,6 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.AbstractActivity;
 import com.graphhopper.jsprit.core.problem.job.Delivery;
 import com.graphhopper.jsprit.core.problem.job.Pickup;
 import com.graphhopper.jsprit.core.problem.job.Service;
@@ -25,14 +24,14 @@
 public class DefaultTourActivityFactory implements TourActivityFactory {
 
     @Override
-    public AbstractActivity createActivity(Service service) {
-        AbstractActivity act;
+    public AbstractActivityNEW createActivity(Service service) {
+        AbstractActivityNEW act;
         if (service instanceof Pickup) {
-            act = new PickupService((Pickup) service);
+            act = new PickupServiceDEPRECATED(service);
         } else if (service instanceof Delivery) {
-            act = new DeliverService((Delivery) service);
+            act = new DeliverServiceDEPRECATED((Delivery) service);
         } else {
-            act = new PickupService(service);
+            act = new PickupServiceDEPRECATED(service);
         }
         return act;
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverService.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverService.java
deleted file mode 100644
index 9b06ec6cb..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverService.java
+++ /dev/null
@@ -1,132 +0,0 @@
-/*
- * Licensed to GraphHopper GmbH under one or more contributor
- * license agreements. See the NOTICE file distributed with this work for
- * additional information regarding copyright ownership.
- *
- * GraphHopper GmbH licenses this file to you under the Apache License,
- * Version 2.0 (the "License"); you may not use this file except in
- * compliance with the License. You may obtain a copy of the License at
- *
- *       http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.graphhopper.jsprit.core.problem.solution.route.activity;
-
-import com.graphhopper.jsprit.core.problem.AbstractActivity;
-import com.graphhopper.jsprit.core.problem.Capacity;
-import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.job.Delivery;
-
-public final class DeliverService extends AbstractActivity implements DeliveryActivity {
-
-    private Delivery delivery;
-
-    private Capacity capacity;
-
-    private double arrTime;
-
-    private double endTime;
-
-    private double theoreticalEarliest = 0;
-
-    private double theoreticalLatest = Double.MAX_VALUE;
-
-    public DeliverService(Delivery delivery) {
-        super();
-        this.delivery = delivery;
-        capacity = Capacity.invert(delivery.getSize());
-    }
-
-    private DeliverService(DeliverService deliveryActivity) {
-        this.delivery = deliveryActivity.getJob();
-        this.arrTime = deliveryActivity.getArrTime();
-        this.endTime = deliveryActivity.getEndTime();
-        capacity = deliveryActivity.getSize();
-        setIndex(deliveryActivity.getIndex());
-        this.theoreticalEarliest = deliveryActivity.getTheoreticalEarliestOperationStartTime();
-        this.theoreticalLatest = deliveryActivity.getTheoreticalLatestOperationStartTime();
-    }
-
-    @Override
-    public String getName() {
-        return delivery.getType();
-    }
-
-    @Override
-    public Location getLocation() {
-        return delivery.getLocation();
-    }
-
-    @Override
-    public void setTheoreticalEarliestOperationStartTime(double earliest) {
-        theoreticalEarliest = earliest;
-    }
-
-    @Override
-    public void setTheoreticalLatestOperationStartTime(double latest) {
-        theoreticalLatest = latest;
-    }
-
-
-    @Override
-    public double getTheoreticalEarliestOperationStartTime() {
-        return theoreticalEarliest;
-    }
-
-    @Override
-    public double getTheoreticalLatestOperationStartTime() {
-        return theoreticalLatest;
-    }
-
-    @Override
-    public double getOperationTime() {
-        return delivery.getServiceDuration();
-    }
-
-    @Override
-    public double getArrTime() {
-        return arrTime;
-    }
-
-    @Override
-    public double getEndTime() {
-        return endTime;
-    }
-
-    @Override
-    public void setArrTime(double arrTime) {
-        this.arrTime = arrTime;
-    }
-
-    @Override
-    public void setEndTime(double endTime) {
-        this.endTime = endTime;
-    }
-
-    @Override
-    public TourActivity duplicate() {
-        return new DeliverService(this);
-    }
-
-    @Override
-    public Delivery getJob() {
-        return delivery;
-    }
-
-    public String toString() {
-        return "[type=" + getName() + "][locationId=" + getLocation().getId()
-            + "][size=" + getSize().toString()
-            + "][twStart=" + Activities.round(getTheoreticalEarliestOperationStartTime())
-            + "][twEnd=" + Activities.round(getTheoreticalLatestOperationStartTime()) + "]";
-    }
-
-    @Override
-    public Capacity getSize() {
-        return capacity;
-    }
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverServiceDEPRECATED.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverServiceDEPRECATED.java
new file mode 100644
index 000000000..ad2f90e9f
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverServiceDEPRECATED.java
@@ -0,0 +1,50 @@
+/*
+ * Licensed to GraphHopper GmbH under one or more contributor
+ * license agreements. See the NOTICE file distributed with this work for
+ * additional information regarding copyright ownership.
+ *
+ * GraphHopper GmbH licenses this file to you under the Apache License,
+ * Version 2.0 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.graphhopper.jsprit.core.problem.solution.route.activity;
+
+import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.job.Delivery;
+import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.Service.BuilderBase;
+
+public final class DeliverServiceDEPRECATED extends DeliveryActivityNEW {
+
+    public DeliverServiceDEPRECATED(Service service, BuilderBase<? extends Service, ?> builder) {
+        super(service, builder.getType(), builder.getLocation(),
+                        builder.getServiceTime(),
+                        Capacity.invert(builder.getCapacity()),
+                        builder.getTimeWindows().getTimeWindows());
+    }
+
+    public DeliverServiceDEPRECATED(Delivery delivery) {
+        super(delivery, delivery.getType(), delivery.getLocation(), delivery.getServiceDuration(),
+                        Capacity.invert(delivery.getSize()), delivery.getServiceTimeWindows());
+    }
+
+    public DeliverServiceDEPRECATED(DeliverServiceDEPRECATED sourceActivity) {
+        super(sourceActivity);
+    }
+
+
+
+    @Override
+    public Delivery getJob() {
+        return (Delivery) super.getJob();
+    }
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverShipment.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverShipment.java
deleted file mode 100644
index 297efae69..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverShipment.java
+++ /dev/null
@@ -1,132 +0,0 @@
-/*
- * Licensed to GraphHopper GmbH under one or more contributor
- * license agreements. See the NOTICE file distributed with this work for
- * additional information regarding copyright ownership.
- *
- * GraphHopper GmbH licenses this file to you under the Apache License,
- * Version 2.0 (the "License"); you may not use this file except in
- * compliance with the License. You may obtain a copy of the License at
- *
- *       http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.graphhopper.jsprit.core.problem.solution.route.activity;
-
-import com.graphhopper.jsprit.core.problem.AbstractActivity;
-import com.graphhopper.jsprit.core.problem.Capacity;
-import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
-
-public final class DeliverShipment extends AbstractActivity implements DeliveryActivity {
-
-    private Shipment shipment;
-
-    private double endTime;
-
-    private double arrTime;
-
-    private Capacity capacity;
-
-    private double earliest = 0;
-
-    private double latest = Double.MAX_VALUE;
-
-    public DeliverShipment(Shipment shipment) {
-        super();
-        this.shipment = shipment;
-        this.capacity = Capacity.invert(shipment.getSize());
-    }
-
-    private DeliverShipment(DeliverShipment deliveryShipmentActivity) {
-        this.shipment = (Shipment) deliveryShipmentActivity.getJob();
-        this.arrTime = deliveryShipmentActivity.getArrTime();
-        this.endTime = deliveryShipmentActivity.getEndTime();
-        this.capacity = deliveryShipmentActivity.getSize();
-        setIndex(deliveryShipmentActivity.getIndex());
-        this.earliest = deliveryShipmentActivity.getTheoreticalEarliestOperationStartTime();
-        this.latest = deliveryShipmentActivity.getTheoreticalLatestOperationStartTime();
-    }
-
-    @Override
-    public Job getJob() {
-        return shipment;
-    }
-
-    @Override
-    public void setTheoreticalEarliestOperationStartTime(double earliest) {
-        this.earliest = earliest;
-    }
-
-    @Override
-    public void setTheoreticalLatestOperationStartTime(double latest) {
-        this.latest = latest;
-    }
-
-    @Override
-    public String getName() {
-        return "deliverShipment";
-    }
-
-    @Override
-    public Location getLocation() {
-        return shipment.getDeliveryLocation();
-    }
-
-    @Override
-    public double getTheoreticalEarliestOperationStartTime() {
-        return earliest;
-    }
-
-    @Override
-    public double getTheoreticalLatestOperationStartTime() {
-        return latest;
-    }
-
-    @Override
-    public double getOperationTime() {
-        return shipment.getDeliveryServiceTime();
-    }
-
-    @Override
-    public double getArrTime() {
-        return arrTime;
-    }
-
-    @Override
-    public double getEndTime() {
-        return endTime;
-    }
-
-    @Override
-    public void setArrTime(double arrTime) {
-        this.arrTime = arrTime;
-    }
-
-    @Override
-    public void setEndTime(double endTime) {
-        this.endTime = endTime;
-    }
-
-    @Override
-    public TourActivity duplicate() {
-        return new DeliverShipment(this);
-    }
-
-    public String toString() {
-        return "[type=" + getName() + "][locationId=" + getLocation().getId()
-            + "][size=" + getSize().toString()
-            + "][twStart=" + Activities.round(getTheoreticalEarliestOperationStartTime())
-            + "][twEnd=" + Activities.round(getTheoreticalLatestOperationStartTime()) + "]";
-    }
-
-    @Override
-    public Capacity getSize() {
-        return capacity;
-    }
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverShipmentDEPRECATED.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverShipmentDEPRECATED.java
new file mode 100644
index 000000000..2c0e71365
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverShipmentDEPRECATED.java
@@ -0,0 +1,47 @@
+/*
+ * Licensed to GraphHopper GmbH under one or more contributor
+ * license agreements. See the NOTICE file distributed with this work for
+ * additional information regarding copyright ownership.
+ *
+ * GraphHopper GmbH licenses this file to you under the Apache License,
+ * Version 2.0 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.graphhopper.jsprit.core.problem.solution.route.activity;
+
+import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.Shipment.BuilderBase;
+
+public final class DeliverShipmentDEPRECATED extends DeliveryActivityNEW {
+
+    public static final String NAME = "deliverShipment";
+
+    public DeliverShipmentDEPRECATED(Shipment shipment,
+                    BuilderBase<? extends Shipment, ?> builder) {
+        super(shipment, NAME, builder.getDeliveryLocation(), builder.getDeliveryServiceTime(),
+                        Capacity.invert(builder.getCapacity()),
+                        builder.getDeliveryTimeWindows().getTimeWindows());
+    }
+
+    public DeliverShipmentDEPRECATED(DeliverShipmentDEPRECATED sourceActivity) {
+        super(sourceActivity);
+    }
+
+    // Only for testing
+    @Deprecated
+    public DeliverShipmentDEPRECATED(Shipment s) {
+        super(s, NAME, s.getDeliveryLocation(), s.getDeliveryServiceTime(),
+                        Capacity.invert(s.getSize()),
+                        s.getDeliveryTimeWindows());
+    }
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliveryActivityNEW.java
similarity index 58%
rename from jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivity.java
rename to jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliveryActivityNEW.java
index daee63019..41f0c7db5 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivity.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliveryActivityNEW.java
@@ -17,7 +17,22 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-public interface PickupActivity extends TourActivity.JobActivity {
+import java.util.Collection;
 
+import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.job.AbstractJob;
+
+public class DeliveryActivityNEW extends JobActivity {
+
+
+    public DeliveryActivityNEW(AbstractJob job, String name, Location location,
+                    double operationTime, Capacity capacity, Collection<TimeWindow> timeWindows) {
+        super(job, name, location, operationTime, capacity, timeWindows);
+    }
+
+    public DeliveryActivityNEW(DeliveryActivityNEW sourceActivity) {
+        super(sourceActivity);
+    }
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/End.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/End.java
index 8c2ef5c07..07d0672a2 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/End.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/End.java
@@ -1,3 +1,21 @@
+/*
+ * Licensed to GraphHopper GmbH under one or more contributor
+ * license agreements. See the NOTICE file distributed with this work for
+ * additional information regarding copyright ownership.
+ *
+ * GraphHopper GmbH licenses this file to you under the Apache License,
+ * Version 2.0 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
 /*
  * Licensed to GraphHopper GmbH under one or more contributor
  * license agreements. See the NOTICE file distributed with this work for
@@ -17,132 +35,130 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.AbstractActivity;
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.Location;
 
-public final class End extends AbstractActivity implements TourActivity {
+public final class End extends InternalActivity {
 
-    public static End newInstance(String locationId, double earliestArrival, double latestArrival) {
-        return new End(locationId, earliestArrival, latestArrival);
+    public static End newInstance(String locationId, double theoreticalStart, double theoreticalEnd) {
+        Location loc = null;
+        if (locationId != null) {
+            loc = Location.Builder.newInstance().setId(locationId).build();
+        }
+        return new End(loc, theoreticalStart, theoreticalEnd);
     }
 
     public static End copyOf(End end) {
         return new End(end);
     }
 
-    private final static Capacity capacity = Capacity.Builder.newInstance().build();
-
-
-    private double endTime = -1;
-
-
-    private double theoretical_earliestOperationStartTime;
-
-    private double theoretical_latestOperationStartTime;
-
-    private double arrTime;
-
-    private Location location;
-
-    public void setTheoreticalEarliestOperationStartTime(double theoreticalEarliestOperationStartTime) {
-        theoretical_earliestOperationStartTime = theoreticalEarliestOperationStartTime;
-    }
-
-    public void setTheoreticalLatestOperationStartTime(double theoreticalLatestOperationStartTime) {
-        theoretical_latestOperationStartTime = theoreticalLatestOperationStartTime;
-    }
-
     public End(Location location, double theoreticalStart, double theoreticalEnd) {
-        super();
-        this.location = location;
-        theoretical_earliestOperationStartTime = theoreticalStart;
-        theoretical_latestOperationStartTime = theoreticalEnd;
-        endTime = theoreticalEnd;
-        setIndex(-2);
-    }
-
-    public End(String locationId, double theoreticalStart, double theoreticalEnd) {
-        super();
-        if (locationId != null) this.location = Location.Builder.newInstance().setId(locationId).build();
-        theoretical_earliestOperationStartTime = theoreticalStart;
-        theoretical_latestOperationStartTime = theoreticalEnd;
-        endTime = theoreticalEnd;
-        setIndex(-2);
-    }
-
-    public End(End end) {
-        this.location = end.getLocation();
-//		this.locationId = end.getLocation().getId();
-        theoretical_earliestOperationStartTime = end.getTheoreticalEarliestOperationStartTime();
-        theoretical_latestOperationStartTime = end.getTheoreticalLatestOperationStartTime();
-        arrTime = end.getArrTime();
-        endTime = end.getEndTime();
+        super("end", location, Capacity.EMPTY);
+        setTheoreticalEarliestOperationStartTime(theoreticalStart);
+        setTheoreticalLatestOperationStartTime(theoreticalEnd);
+        endTime = theoreticalStart;
         setIndex(-2);
     }
 
-    public double getTheoreticalEarliestOperationStartTime() {
-        return theoretical_earliestOperationStartTime;
-    }
-
-    public double getTheoreticalLatestOperationStartTime() {
-        return theoretical_latestOperationStartTime;
-    }
-
-    public double getEndTime() {
-        return endTime;
-    }
-
-    public void setEndTime(double endTime) {
-        this.endTime = endTime;
+    private End(End end) {
+        super(end);
     }
 
     public void setLocation(Location location) {
         this.location = location;
     }
 
-    @Override
-    public Location getLocation() {
-        return location;
-    }
-
     @Override
     public double getOperationTime() {
         return 0.0;
     }
 
-
     @Override
     public String toString() {
         return "[type=" + getName() + "][location=" + location
-            + "][twStart=" + Activities.round(theoretical_earliestOperationStartTime)
-            + "][twEnd=" + Activities.round(theoretical_latestOperationStartTime) + "]";
-    }
-
-    @Override
-    public String getName() {
-        return "end";
-    }
-
-    @Override
-    public double getArrTime() {
-        return this.arrTime;
-    }
-
-    @Override
-    public void setArrTime(double arrTime) {
-        this.arrTime = arrTime;
-
+                + "][twStart=" + Activities.round(getTheoreticalEarliestOperationStartTime())
+                + "][twEnd=" + Activities.round(getTheoreticalLatestOperationStartTime()) + "]";
     }
 
-    @Override
-    public TourActivity duplicate() {
-        return new End(this);
-    }
+}
 
-    @Override
-    public Capacity getSize() {
-        return capacity;
-    }
 
-}
+/*
+ * package com.graphhopper.jsprit.core.problem.solution.route.activity;
+ * 
+ * import com.graphhopper.jsprit.core.problem.Capacity; import com.graphhopper.jsprit.core.problem.AbstractActivityNEW;
+ * import com.graphhopper.jsprit.core.problem.Location;
+ * 
+ * public final class End extends AbstractActivityNEW {
+ * 
+ * public static End newInstance(String locationId, double earliestArrival, double latestArrival) { return new
+ * End(locationId, earliestArrival, latestArrival); }
+ * 
+ * public static End copyOf(End end) { return new End(end); }
+ * 
+ * private final static Capacity capacity = Capacity.Builder.newInstance().build();
+ * 
+ * 
+ * private double endTime = -1;
+ * 
+ * 
+ * private double theoretical_earliestOperationStartTime;
+ * 
+ * private double theoretical_latestOperationStartTime;
+ * 
+ * private double arrTime;
+ * 
+ * private Location location;
+ * 
+ * @Override public void setTheoreticalEarliestOperationStartTime(double theoreticalEarliestOperationStartTime) {
+ * theoretical_earliestOperationStartTime = theoreticalEarliestOperationStartTime; }
+ * 
+ * @Override public void setTheoreticalLatestOperationStartTime(double theoreticalLatestOperationStartTime) {
+ * theoretical_latestOperationStartTime = theoreticalLatestOperationStartTime; }
+ * 
+ * public End(Location location, double theoreticalStart, double theoreticalEnd) { super(); this.location = location;
+ * theoretical_earliestOperationStartTime = theoreticalStart; theoretical_latestOperationStartTime = theoreticalEnd;
+ * endTime = theoreticalEnd; setIndex(-2); }
+ * 
+ * public End(String locationId, double theoreticalStart, double theoreticalEnd) { super(); if (locationId != null) {
+ * location = Location.Builder.newInstance().setId(locationId).build(); } theoretical_earliestOperationStartTime =
+ * theoreticalStart; theoretical_latestOperationStartTime = theoreticalEnd; endTime = theoreticalEnd; setIndex(-2); }
+ * 
+ * public End(End end) { location = end.getLocation(); // this.locationId = end.getLocation().getId();
+ * theoretical_earliestOperationStartTime = end.getTheoreticalEarliestOperationStartTime();
+ * theoretical_latestOperationStartTime = end.getTheoreticalLatestOperationStartTime(); arrTime = end.getArrTime();
+ * endTime = end.getEndTime(); setIndex(-2); }
+ * 
+ * @Override public double getTheoreticalEarliestOperationStartTime() { return theoretical_earliestOperationStartTime; }
+ * 
+ * @Override public double getTheoreticalLatestOperationStartTime() { return theoretical_latestOperationStartTime; }
+ * 
+ * @Override public double getEndTime() { return endTime; }
+ * 
+ * @Override public void setEndTime(double endTime) { this.endTime = endTime; }
+ * 
+ * public void setLocation(Location location) { this.location = location; }
+ * 
+ * @Override public Location getLocation() { return location; }
+ * 
+ * @Override public double getOperationTime() { return 0.0; }
+ * 
+ * 
+ * @Override public String toString() { return "[type=" + getName() + "][location=" + location + "][twStart=" +
+ * Activities.round(theoretical_earliestOperationStartTime) + "][twEnd=" +
+ * Activities.round(theoretical_latestOperationStartTime) + "]"; }
+ * 
+ * @Override public String getName() { return "end"; }
+ * 
+ * @Override public double getArrTime() { return arrTime; }
+ * 
+ * @Override public void setArrTime(double arrTime) { this.arrTime = arrTime;
+ * 
+ * }
+ * 
+ * @Override public TourActivity duplicate() { return new End(this); }
+ * 
+ * @Override public Capacity getSize() { return capacity; }
+ * 
+ * }
+ */
\ No newline at end of file
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/AbstractActivity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ExchangeActivityNEW.java
similarity index 54%
rename from jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/AbstractActivity.java
rename to jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ExchangeActivityNEW.java
index dd1470ec6..20ea84995 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/AbstractActivity.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ExchangeActivityNEW.java
@@ -15,23 +15,24 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-package com.graphhopper.jsprit.core.problem;
+import java.util.Collection;
 
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
+import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.job.AbstractJob;
 
-/**
- * Created by schroeder on 14.07.14.
- */
-public abstract class AbstractActivity implements TourActivity {
-
-    private int index;
+public class ExchangeActivityNEW extends JobActivity {
 
-    public int getIndex() {
-        return index;
+    public ExchangeActivityNEW(AbstractJob job, String name, Location location,
+                    double operationTime, Capacity capacity, Collection<TimeWindow> timeWindows) {
+        super(job, name, location, operationTime, capacity, timeWindows);
     }
 
-    protected void setIndex(int index) {
-        this.index = index;
+    public ExchangeActivityNEW(ExchangeActivityNEW sourceActivity) {
+        super(sourceActivity);
     }
+
+
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/InternalActivity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/InternalActivity.java
new file mode 100644
index 000000000..321bd46ee
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/InternalActivity.java
@@ -0,0 +1,22 @@
+package com.graphhopper.jsprit.core.problem.solution.route.activity;
+
+import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.Location;
+
+/**
+ * Common ancesstor for non-job-based, internal activities
+ *
+ * @author balage
+ *
+ */
+public abstract class InternalActivity extends AbstractActivityNEW implements InternalActivityMarker {
+
+    public InternalActivity(String name, Location location, Capacity capacity) {
+        super(name, location, capacity);
+    }
+
+    public InternalActivity(InternalActivity sourceActivity) {
+        super(sourceActivity);
+    }
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/InternalActivityMarker.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/InternalActivityMarker.java
new file mode 100644
index 000000000..715264eb4
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/InternalActivityMarker.java
@@ -0,0 +1,10 @@
+package com.graphhopper.jsprit.core.problem.solution.route.activity;
+
+/**
+ * Marker interface for activities not mean to be created by jobs.
+ *
+ * @author balage
+ */
+public interface InternalActivityMarker {
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/InternalJobActivity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/InternalJobActivity.java
new file mode 100644
index 000000000..4219594e3
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/InternalJobActivity.java
@@ -0,0 +1,26 @@
+package com.graphhopper.jsprit.core.problem.solution.route.activity;
+
+import java.util.Collection;
+
+import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.job.AbstractJob;
+
+/**
+ * Common ancesstor for job-based, internal activities
+ *
+ * @author balage
+ *
+ */
+public abstract class InternalJobActivity extends JobActivity implements InternalActivityMarker {
+
+    public InternalJobActivity(AbstractJob job, String name, Location location,
+                    double operationTime, Capacity capacity, Collection<TimeWindow> timeWindows) {
+        super(job, name, location, operationTime, capacity, timeWindows);
+    }
+
+    public InternalJobActivity(JobActivity sourceActivity) {
+        super(sourceActivity);
+    }
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/JobActivity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/JobActivity.java
new file mode 100644
index 000000000..d90f7e428
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/JobActivity.java
@@ -0,0 +1,105 @@
+package com.graphhopper.jsprit.core.problem.solution.route.activity;
+
+import java.util.Collection;
+import java.util.HashSet;
+
+import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.job.AbstractJob;
+import com.graphhopper.jsprit.core.problem.job.Job;
+
+/**
+ * Basic interface of job-activies.
+ * <p>
+ * <p>
+ * A job activity is related to a {@link Job}.
+ *
+ * @author schroeder
+ */
+public abstract class JobActivity extends AbstractActivityNEW {
+
+    private AbstractJob job;
+
+    private double operationTime;
+
+    private Collection<TimeWindow> timeWindows;
+
+    public JobActivity(AbstractJob job, String type, Location location, double operationTime,
+                    Capacity capacity, Collection<TimeWindow> timeWindows) {
+        super(type, location, capacity);
+        this.job = job;
+        this.operationTime = operationTime;
+        this.timeWindows = timeWindows;
+    }
+
+    protected JobActivity(JobActivity sourceActivity) {
+        super(sourceActivity);
+        job = sourceActivity.getJob();
+        operationTime = sourceActivity.getOperationTime();
+        // REMARK - Balage1551 - Do we need to deep copy time window set? I
+        // guess we don't.
+        if (sourceActivity.timeWindows != null) {
+            timeWindows = new HashSet<>(sourceActivity.timeWindows);
+        }
+    }
+
+    public AbstractJob getJob() {
+        return job;
+    }
+
+    @Override
+    public double getOperationTime() {
+        return operationTime;
+    }
+
+    @Override
+    public String getName() {
+        return job.getId() + "." + getType();
+    }
+
+    public Collection<TimeWindow> getTimeWindows() {
+        return timeWindows;
+    }
+
+    /*
+     * (non-Javadoc)
+     *
+     * @see java.lang.Object#hashCode()
+     */
+    @Override
+    public int hashCode() {
+        final int prime = 31;
+        int result = 1;
+        result = prime * result + ((getJob() == null) ? 0 : getJob().hashCode());
+        return result;
+    }
+
+    /*
+     * (non-Javadoc)
+     *
+     * @see java.lang.Object#equals(java.lang.Object)
+     */
+    @Override
+    public boolean equals(Object obj) {
+        if (this == obj) {
+            return true;
+        }
+        if (obj == null) {
+            return false;
+        }
+        if (getClass() != obj.getClass()) {
+            return false;
+        }
+        JobActivity other = (JobActivity) obj;
+        if (job == null) {
+            if (other.getJob() != null) {
+                return false;
+            }
+        } else if (!job.equals(other.getJob())) {
+            return false;
+        }
+        return true;
+    }
+
+
+}
\ No newline at end of file
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliveryActivity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivityNEW.java
similarity index 58%
rename from jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliveryActivity.java
rename to jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivityNEW.java
index 41f6d32c7..8cc3a92f7 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliveryActivity.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivityNEW.java
@@ -17,7 +17,22 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-public interface DeliveryActivity extends TourActivity.JobActivity {
+import java.util.Collection;
+
+import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.job.AbstractJob;
+
+public class PickupActivityNEW extends JobActivity {
+
+    public PickupActivityNEW(AbstractJob job, String name, Location location, double operationTime,
+                    Capacity capacity, Collection<TimeWindow> timeWindows) {
+        super(job, name, location, operationTime, capacity, timeWindows);
+    }
+
+    public PickupActivityNEW(PickupActivityNEW sourceActivity) {
+        super(sourceActivity);
+    }
 
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupService.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupService.java
deleted file mode 100644
index 167f8677f..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupService.java
+++ /dev/null
@@ -1,133 +0,0 @@
-/*
- * Licensed to GraphHopper GmbH under one or more contributor
- * license agreements. See the NOTICE file distributed with this work for
- * additional information regarding copyright ownership.
- *
- * GraphHopper GmbH licenses this file to you under the Apache License,
- * Version 2.0 (the "License"); you may not use this file except in
- * compliance with the License. You may obtain a copy of the License at
- *
- *       http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.graphhopper.jsprit.core.problem.solution.route.activity;
-
-import com.graphhopper.jsprit.core.problem.AbstractActivity;
-import com.graphhopper.jsprit.core.problem.Capacity;
-import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.job.Pickup;
-import com.graphhopper.jsprit.core.problem.job.Service;
-
-public final class PickupService extends AbstractActivity implements PickupActivity {
-
-    private Service pickup;
-
-    private double arrTime;
-
-    private double depTime;
-
-    private double theoreticalEarliest = 0;
-
-    private double theoreticalLatest = Double.MAX_VALUE;
-
-    public PickupService(Pickup pickup) {
-        super();
-        this.pickup = pickup;
-    }
-
-    public PickupService(Service service) {
-        this.pickup = service;
-    }
-
-    private PickupService(PickupService pickupActivity) {
-        this.pickup = pickupActivity.getJob();
-        this.arrTime = pickupActivity.getArrTime();
-        this.depTime = pickupActivity.getEndTime();
-        setIndex(pickupActivity.getIndex());
-        this.theoreticalEarliest = pickupActivity.getTheoreticalEarliestOperationStartTime();
-        this.theoreticalLatest = pickupActivity.getTheoreticalLatestOperationStartTime();
-    }
-
-    @Override
-    public String getName() {
-        return pickup.getType();
-    }
-
-    @Override
-    public Location getLocation() {
-        return pickup.getLocation();
-    }
-
-    @Override
-    public double getTheoreticalEarliestOperationStartTime() {
-        return theoreticalEarliest;
-    }
-
-    @Override
-    public double getTheoreticalLatestOperationStartTime() {
-        return theoreticalLatest;
-    }
-
-    @Override
-    public void setTheoreticalEarliestOperationStartTime(double earliest) {
-        this.theoreticalEarliest = earliest;
-    }
-
-    @Override
-    public void setTheoreticalLatestOperationStartTime(double latest) {
-        this.theoreticalLatest = latest;
-    }
-
-    @Override
-    public double getOperationTime() {
-        return pickup.getServiceDuration();
-    }
-
-    @Override
-    public double getArrTime() {
-        return arrTime;
-    }
-
-    @Override
-    public double getEndTime() {
-        return depTime;
-    }
-
-    @Override
-    public void setArrTime(double arrTime) {
-        this.arrTime = arrTime;
-    }
-
-    @Override
-    public void setEndTime(double endTime) {
-        this.depTime = endTime;
-    }
-
-    @Override
-    public TourActivity duplicate() {
-        return new PickupService(this);
-    }
-
-    @Override
-    public Service getJob() {
-        return pickup;
-    }
-
-    public String toString() {
-        return "[type=" + getName() + "][locationId=" + getLocation().getId()
-            + "][size=" + getSize().toString()
-            + "][twStart=" + Activities.round(getTheoreticalEarliestOperationStartTime())
-            + "][twEnd=" + Activities.round(getTheoreticalLatestOperationStartTime()) + "]";
-    }
-
-    @Override
-    public Capacity getSize() {
-        return pickup.getSize();
-    }
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupServiceDEPRECATED.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupServiceDEPRECATED.java
new file mode 100644
index 000000000..eeeec1bc9
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupServiceDEPRECATED.java
@@ -0,0 +1,51 @@
+/*
+ * Licensed to GraphHopper GmbH under one or more contributor
+ * license agreements. See the NOTICE file distributed with this work for
+ * additional information regarding copyright ownership.
+ *
+ * GraphHopper GmbH licenses this file to you under the Apache License,
+ * Version 2.0 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.graphhopper.jsprit.core.problem.solution.route.activity;
+
+import com.graphhopper.jsprit.core.problem.job.Service;
+
+public final class PickupServiceDEPRECATED extends PickupActivityNEW {
+
+    public PickupServiceDEPRECATED(Service service,
+                    Service.BuilderBase<? extends Service, ?> builder) {
+        super(service, builder.getType(), builder.getLocation(),
+                        builder.getServiceTime(),
+                        builder.getCapacity(),
+                        builder.getTimeWindows().getTimeWindows());
+    }
+
+
+
+    public PickupServiceDEPRECATED(PickupServiceDEPRECATED sourceActivity) {
+        super(sourceActivity);
+    }
+
+    @Deprecated
+    public PickupServiceDEPRECATED(Service service) {
+        super(service, service.getType(), service.getLocation(), service.getServiceDuration(),
+                        service.getSize(), service.getServiceTimeWindows());
+    }
+
+
+
+    @Override
+    public Service getJob() {
+        return (Service) super.getJob();
+    }
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupShipment.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupShipment.java
deleted file mode 100644
index d1f32c3a2..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupShipment.java
+++ /dev/null
@@ -1,130 +0,0 @@
-/*
- * Licensed to GraphHopper GmbH under one or more contributor
- * license agreements. See the NOTICE file distributed with this work for
- * additional information regarding copyright ownership.
- *
- * GraphHopper GmbH licenses this file to you under the Apache License,
- * Version 2.0 (the "License"); you may not use this file except in
- * compliance with the License. You may obtain a copy of the License at
- *
- *       http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.graphhopper.jsprit.core.problem.solution.route.activity;
-
-import com.graphhopper.jsprit.core.problem.AbstractActivity;
-import com.graphhopper.jsprit.core.problem.Capacity;
-import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
-
-public final class PickupShipment extends AbstractActivity implements PickupActivity{
-
-    private Shipment shipment;
-
-    private double endTime;
-
-    private double arrTime;
-
-    private double earliest = 0;
-
-    private double latest = Double.MAX_VALUE;
-
-    public PickupShipment(Shipment shipment) {
-        super();
-        this.shipment = shipment;
-    }
-
-    private PickupShipment(PickupShipment pickupShipmentActivity) {
-        this.shipment = (Shipment) pickupShipmentActivity.getJob();
-        this.arrTime = pickupShipmentActivity.getArrTime();
-        this.endTime = pickupShipmentActivity.getEndTime();
-        setIndex(pickupShipmentActivity.getIndex());
-        this.earliest = pickupShipmentActivity.getTheoreticalEarliestOperationStartTime();
-        this.latest = pickupShipmentActivity.getTheoreticalLatestOperationStartTime();
-    }
-
-    @Override
-    public Job getJob() {
-        return shipment;
-    }
-
-    @Override
-    public void setTheoreticalEarliestOperationStartTime(double earliest) {
-        this.earliest = earliest;
-    }
-
-    @Override
-    public void setTheoreticalLatestOperationStartTime(double latest) {
-        this.latest = latest;
-    }
-
-    @Override
-    public String getName() {
-        return "pickupShipment";
-    }
-
-    @Override
-    public Location getLocation() {
-        return shipment.getPickupLocation();
-    }
-
-    @Override
-    public double getTheoreticalEarliestOperationStartTime() {
-        return earliest;
-    }
-
-    @Override
-    public double getTheoreticalLatestOperationStartTime() {
-        return latest;
-    }
-
-    @Override
-    public double getOperationTime() {
-        return shipment.getPickupServiceTime();
-    }
-
-    @Override
-    public double getArrTime() {
-        return arrTime;
-    }
-
-    @Override
-    public double getEndTime() {
-        return endTime;
-    }
-
-    @Override
-    public void setArrTime(double arrTime) {
-        this.arrTime = arrTime;
-    }
-
-    @Override
-    public void setEndTime(double endTime) {
-        this.endTime = endTime;
-    }
-
-    @Override
-    public TourActivity duplicate() {
-        return new PickupShipment(this);
-    }
-
-    public String toString() {
-        return "[type=" + getName() + "][locationId=" + getLocation().getId()
-            + "][size=" + getSize().toString()
-            + "][twStart=" + Activities.round(getTheoreticalEarliestOperationStartTime())
-            + "][twEnd=" + Activities.round(getTheoreticalLatestOperationStartTime()) + "]";
-    }
-
-    @Override
-    public Capacity getSize() {
-        return shipment.getSize();
-    }
-
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupShipmentDEPRECATED.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupShipmentDEPRECATED.java
new file mode 100644
index 000000000..4e66b1a54
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupShipmentDEPRECATED.java
@@ -0,0 +1,45 @@
+/*
+ * Licensed to GraphHopper GmbH under one or more contributor
+ * license agreements. See the NOTICE file distributed with this work for
+ * additional information regarding copyright ownership.
+ *
+ * GraphHopper GmbH licenses this file to you under the Apache License,
+ * Version 2.0 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.graphhopper.jsprit.core.problem.solution.route.activity;
+
+import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.Shipment.BuilderBase;
+
+public final class PickupShipmentDEPRECATED extends PickupActivityNEW{
+
+    public static final String NAME = "pickupShipment";
+
+    public PickupShipmentDEPRECATED(Shipment shipment, BuilderBase<? extends Shipment, ?> builder) {
+        super(shipment, NAME, builder.getPickupLocation(),
+                        builder.getPickupServiceTime(), builder.getCapacity(),
+                        builder.getPickupTimeWindows().getTimeWindows());
+    }
+
+    public PickupShipmentDEPRECATED(PickupShipmentDEPRECATED sourceActivity) {
+        super(sourceActivity);
+    }
+
+    // Only for testing
+    @Deprecated
+    public PickupShipmentDEPRECATED(Shipment s) {
+        super(s, NAME, s.getPickupLocation(), s.getPickupServiceTime(), s.getSize(),
+                        s.getPickupTimeWindows());
+    }
+
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivity.java
deleted file mode 100644
index 76bc09cb0..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivity.java
+++ /dev/null
@@ -1,178 +0,0 @@
-/*
- * Licensed to GraphHopper GmbH under one or more contributor
- * license agreements. See the NOTICE file distributed with this work for
- * additional information regarding copyright ownership.
- *
- * GraphHopper GmbH licenses this file to you under the Apache License,
- * Version 2.0 (the "License"); you may not use this file except in
- * compliance with the License. You may obtain a copy of the License at
- *
- *       http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.graphhopper.jsprit.core.problem.solution.route.activity;
-
-import com.graphhopper.jsprit.core.problem.AbstractActivity;
-import com.graphhopper.jsprit.core.problem.Capacity;
-import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.job.Service;
-
-public class ServiceActivity extends AbstractActivity implements TourActivity.JobActivity {
-
-    public double arrTime;
-
-    public double endTime;
-
-    private double theoreticalEarliest;
-
-    private double theoreticalLatest;
-
-    /**
-     * @return the arrTime
-     */
-    public double getArrTime() {
-        return arrTime;
-    }
-
-    /**
-     * @param arrTime the arrTime to set
-     */
-    public void setArrTime(double arrTime) {
-        this.arrTime = arrTime;
-    }
-
-    /**
-     * @return the endTime
-     */
-    public double getEndTime() {
-        return endTime;
-    }
-
-    /**
-     * @param endTime the endTime to set
-     */
-    public void setEndTime(double endTime) {
-        this.endTime = endTime;
-    }
-
-    public static ServiceActivity copyOf(ServiceActivity serviceActivity) {
-        return new ServiceActivity(serviceActivity);
-    }
-
-    public static ServiceActivity newInstance(Service service) {
-        return new ServiceActivity(service);
-    }
-
-
-    private final Service service;
-
-    protected ServiceActivity(Service service) {
-        this.service = service;
-    }
-
-    protected ServiceActivity(ServiceActivity serviceActivity) {
-        this.service = serviceActivity.getJob();
-        this.arrTime = serviceActivity.getArrTime();
-        this.endTime = serviceActivity.getEndTime();
-        setIndex(serviceActivity.getIndex());
-        this.theoreticalEarliest = serviceActivity.getTheoreticalEarliestOperationStartTime();
-        this.theoreticalLatest = serviceActivity.getTheoreticalLatestOperationStartTime();
-    }
-
-
-    /* (non-Javadoc)
-     * @see java.lang.Object#hashCode()
-     */
-    @Override
-    public int hashCode() {
-        final int prime = 31;
-        int result = 1;
-        result = prime * result + ((service == null) ? 0 : service.hashCode());
-        return result;
-    }
-
-    /* (non-Javadoc)
-     * @see java.lang.Object#equals(java.lang.Object)
-     */
-    @Override
-    public boolean equals(Object obj) {
-        if (this == obj)
-            return true;
-        if (obj == null)
-            return false;
-        if (getClass() != obj.getClass())
-            return false;
-        ServiceActivity other = (ServiceActivity) obj;
-        if (service == null) {
-            if (other.service != null)
-                return false;
-        } else if (!service.equals(other.service))
-            return false;
-        return true;
-    }
-
-    public double getTheoreticalEarliestOperationStartTime() {
-        return theoreticalEarliest;
-    }
-
-    public double getTheoreticalLatestOperationStartTime() {
-        return theoreticalLatest;
-    }
-
-    @Override
-    public void setTheoreticalEarliestOperationStartTime(double earliest) {
-        theoreticalEarliest = earliest;
-    }
-
-    @Override
-    public void setTheoreticalLatestOperationStartTime(double latest) {
-        theoreticalLatest = latest;
-    }
-
-    @Override
-    public double getOperationTime() {
-        return service.getServiceDuration();
-    }
-
-    @Override
-    public Location getLocation() {
-        return service.getLocation();
-    }
-
-
-    @Override
-    public Service getJob() {
-        return service;
-    }
-
-
-    @Override
-    public String toString() {
-        return "[type=" + getName() + "][locationId=" + getLocation().getId()
-            + "][size=" + getSize().toString()
-            + "][twStart=" + Activities.round(getTheoreticalEarliestOperationStartTime())
-            + "][twEnd=" + Activities.round(getTheoreticalLatestOperationStartTime()) + "]";
-    }
-
-    @Override
-    public String getName() {
-        return service.getType();
-    }
-
-    @Override
-    public TourActivity duplicate() {
-        return new ServiceActivity(this);
-    }
-
-    @Override
-    public Capacity getSize() {
-        return service.getSize();
-    }
-
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityNEW.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityNEW.java
new file mode 100644
index 000000000..b5be322bb
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityNEW.java
@@ -0,0 +1,44 @@
+/*
+ * Licensed to GraphHopper GmbH under one or more contributor
+ * license agreements. See the NOTICE file distributed with this work for
+ * additional information regarding copyright ownership.
+ *
+ * GraphHopper GmbH licenses this file to you under the Apache License,
+ * Version 2.0 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.graphhopper.jsprit.core.problem.solution.route.activity;
+
+import java.util.Collection;
+
+import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.job.AbstractJob;
+import com.graphhopper.jsprit.core.problem.job.Service;
+
+public class ServiceActivityNEW extends JobActivity {
+
+    public ServiceActivityNEW(AbstractJob job, String name, Location location, double operationTime,
+                    Capacity capacity, Collection<TimeWindow> timeWindows) {
+        super(job, name, location, operationTime, capacity, timeWindows);
+    }
+
+    public ServiceActivityNEW(ServiceActivityNEW sourceActivity) {
+        super(sourceActivity);
+    }
+
+    // NOTE: Only for testing purposes
+    public static ServiceActivityNEW newInstance(Service service) {
+        return new ServiceActivityNEW(service, service.getName(), service.getLocation(),
+                        service.getServiceDuration(), service.getSize(), service.getTimeWindows());
+    }
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/Start.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/Start.java
index 2b193ecf6..71e5a5dbe 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/Start.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/Start.java
@@ -17,91 +17,39 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.AbstractActivity;
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.Location;
 
-public final class Start extends AbstractActivity implements TourActivity {
-
-    @Deprecated
-    public final static String ACTIVITY_NAME = "start";
-
-    private final static Capacity capacity = Capacity.Builder.newInstance().build();
+public final class Start extends InternalActivity {
 
     public static Start newInstance(String locationId, double theoreticalStart, double theoreticalEnd) {
-        return new Start(locationId, theoreticalStart, theoreticalEnd);
+        Location loc = null;
+        if (locationId != null) {
+            loc = Location.Builder.newInstance().setId(locationId).build();
+        }
+        return new Start(loc, theoreticalStart, theoreticalEnd);
     }
 
     public static Start copyOf(Start start) {
         return new Start(start);
     }
 
-    private String locationId;
-
-    private double theoretical_earliestOperationStartTime;
-
-    private double theoretical_latestOperationStartTime;
-
-    private double endTime;
-
-    private double arrTime;
-
-    private Location location;
-
-    private Start(String locationId, double theoreticalStart, double theoreticalEnd) {
-        super();
-        if (locationId != null) this.location = Location.Builder.newInstance().setId(locationId).build();
-        this.theoretical_earliestOperationStartTime = theoreticalStart;
-        this.theoretical_latestOperationStartTime = theoreticalEnd;
-        this.endTime = theoreticalStart;
-        setIndex(-1);
-    }
-
     public Start(Location location, double theoreticalStart, double theoreticalEnd) {
-        super();
-        this.location = location;
-        this.theoretical_earliestOperationStartTime = theoreticalStart;
-        this.theoretical_latestOperationStartTime = theoreticalEnd;
-        this.endTime = theoreticalStart;
+        super("start", location, Capacity.EMPTY);
+        setTheoreticalEarliestOperationStartTime(theoreticalStart);
+        setTheoreticalLatestOperationStartTime(theoreticalEnd);
+        endTime = theoreticalStart;
         setIndex(-1);
     }
 
     private Start(Start start) {
-        this.location = start.getLocation();
-        theoretical_earliestOperationStartTime = start.getTheoreticalEarliestOperationStartTime();
-        theoretical_latestOperationStartTime = start.getTheoreticalLatestOperationStartTime();
-        endTime = start.getEndTime();
-        setIndex(-1);
-    }
-
-    public double getTheoreticalEarliestOperationStartTime() {
-        return theoretical_earliestOperationStartTime;
+        super(start);
     }
 
     public void setLocation(Location location) {
         this.location = location;
     }
 
-    ;
-
-    public double getTheoreticalLatestOperationStartTime() {
-        return theoretical_latestOperationStartTime;
-    }
-
-
-    public void setTheoreticalEarliestOperationStartTime(double time) {
-        this.theoretical_earliestOperationStartTime = time;
-    }
-
-    public void setTheoreticalLatestOperationStartTime(double time) {
-        this.theoretical_latestOperationStartTime = time;
-    }
-
-    @Override
-    public Location getLocation() {
-        return location;
-    }
-
     @Override
     public double getOperationTime() {
         return 0.0;
@@ -110,43 +58,8 @@ public double getOperationTime() {
     @Override
     public String toString() {
         return "[type=" + getName() + "][location=" + location
-            + "][twStart=" + Activities.round(theoretical_earliestOperationStartTime)
-            + "][twEnd=" + Activities.round(theoretical_latestOperationStartTime) + "]";
-    }
-
-    @Override
-    public String getName() {
-        return "start";
-    }
-
-    @Override
-    public double getArrTime() {
-        return arrTime;
-    }
-
-    @Override
-    public double getEndTime() {
-        return endTime;
-    }
-
-    @Override
-    public void setArrTime(double arrTime) {
-        this.arrTime = arrTime;
-    }
-
-    @Override
-    public void setEndTime(double endTime) {
-        this.endTime = endTime;
-    }
-
-    @Override
-    public TourActivity duplicate() {
-        return new Start(this);
-    }
-
-    @Override
-    public Capacity getSize() {
-        return capacity;
+                + "][twStart=" + Activities.round(getTheoreticalEarliestOperationStartTime())
+                + "][twEnd=" + Activities.round(getTheoreticalLatestOperationStartTime()) + "]";
     }
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TimeWindowsImpl.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TimeWindowsImpl.java
index 25e5a5785..a407438ed 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TimeWindowsImpl.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TimeWindowsImpl.java
@@ -44,8 +44,17 @@ public void add(TimeWindow timeWindow){
         timeWindows.add(timeWindow);
     }
 
+    @Override
     public Collection<TimeWindow> getTimeWindows() {
         return Collections.unmodifiableCollection(timeWindows);
     }
 
+    public void clear() {
+        timeWindows.clear();
+    }
+
+    public boolean isEmpty() {
+        return timeWindows.isEmpty();
+    }
+
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourActivities.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourActivities.java
index 949e70fda..a6c06d1ce 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourActivities.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourActivities.java
@@ -17,10 +17,15 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity.JobActivity;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Set;
 
-import java.util.*;
+import com.graphhopper.jsprit.core.problem.job.Job;
 
 
 /**
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourActivity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourActivity.java
index a6aa070fd..718c1b147 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourActivity.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourActivity.java
@@ -20,7 +20,6 @@
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.HasIndex;
 import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.job.Job;
 
 /**
  * Basic interface for tour-activities.
@@ -35,24 +34,6 @@
 
 	public void setTheoreticalLatestOperationStartTime(double latest);
 
-    /**
-     * Basic interface of job-activies.
-     * <p>
-     * <p>A job activity is related to a {@link Job}.
-     *
-     * @author schroeder
-     */
-    public interface JobActivity extends TourActivity {
-
-        /**
-         * Returns the job that is involved with this activity.
-         *
-         * @return job
-         */
-        public Job getJob();
-
-    }
-
     /**
      * Returns the name of this activity.
      *
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourActivityFactory.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourActivityFactory.java
index b2ea9e050..49f4a56de 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourActivityFactory.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourActivityFactory.java
@@ -17,11 +17,10 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.AbstractActivity;
 import com.graphhopper.jsprit.core.problem.job.Service;
 
 public interface TourActivityFactory {
 
-    public AbstractActivity createActivity(Service service);
+    public AbstractActivityNEW createActivity(Service service);
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourShipmentActivityFactory.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourShipmentActivityFactory.java
index a8ee78ec2..072a423c6 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourShipmentActivityFactory.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourShipmentActivityFactory.java
@@ -17,13 +17,12 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.AbstractActivity;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 
 public interface TourShipmentActivityFactory {
 
-    public AbstractActivity createPickup(Shipment shipment);
+    public AbstractActivityNEW createPickup(Shipment shipment);
 
-    public AbstractActivity createDelivery(Shipment shipment);
+    public AbstractActivityNEW createDelivery(Shipment shipment);
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/FiniteFleetManagerFactory.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/FiniteFleetManagerFactory.java
index c9c2fe73a..66b13808c 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/FiniteFleetManagerFactory.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/FiniteFleetManagerFactory.java
@@ -17,11 +17,11 @@
  */
 package com.graphhopper.jsprit.core.problem.vehicle;
 
-import com.graphhopper.jsprit.core.util.RandomNumberGeneration;
-
 import java.util.Collection;
 import java.util.Random;
 
+import com.graphhopper.jsprit.core.util.RandomNumberGeneration;
+
 /**
  * Factory that creates a finite fleetmanager.
  *
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/InfiniteVehicles.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/InfiniteVehicles.java
index 5fbdb93c1..867c6aff8 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/InfiniteVehicles.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/InfiniteVehicles.java
@@ -20,14 +20,14 @@
 
 
 
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.HashMap;
 import java.util.Map;
 
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 
 
 class InfiniteVehicles implements VehicleFleetManager {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleFleetManagerImpl.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleFleetManagerImpl.java
index 5741594aa..5d2bcb43d 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleFleetManagerImpl.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleFleetManagerImpl.java
@@ -17,14 +17,14 @@
  */
 package com.graphhopper.jsprit.core.problem.vehicle;
 
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
 import java.util.Random;
 
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 
 class VehicleFleetManagerImpl implements VehicleFleetManager {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleImpl.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleImpl.java
index 4930fef04..b3f5813df 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleImpl.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleImpl.java
@@ -17,12 +17,13 @@
  */
 package com.graphhopper.jsprit.core.problem.vehicle;
 
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import com.graphhopper.jsprit.core.problem.AbstractVehicle;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.Skills;
 import com.graphhopper.jsprit.core.problem.job.Break;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 
 
 /**
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java
index 35878ade9..4fe635405 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java
@@ -17,20 +17,24 @@
  */
 package com.graphhopper.jsprit.core.reporting;
 
+import java.io.PrintWriter;
+import java.nio.CharBuffer;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
+import java.util.Map;
+import java.util.function.Function;
+import java.util.regex.Pattern;
+import java.util.stream.Collectors;
+
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.job.Break;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 
-import java.io.PrintWriter;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
-
 
 /**
  * Printer to print the details of a vehicle-routing-problem solution.
@@ -55,19 +59,6 @@
         CONCISE, VERBOSE
     }
 
-    private static class Jobs {
-        int nServices;
-        int nShipments;
-        int nBreaks;
-
-        public Jobs(int nServices, int nShipments, int nBreaks) {
-            super();
-            this.nServices = nServices;
-            this.nShipments = nShipments;
-            this.nBreaks = nBreaks;
-        }
-    }
-
 
     /**
      * Prints costs and #vehicles to stdout (out.println).
@@ -101,6 +92,29 @@ public static void print(VehicleRoutingProblem problem, VehicleRoutingProblemSol
         SYSTEM_OUT_AS_PRINT_WRITER.flush();
     }
 
+    protected static String drawLineBase(String pattern, int count) {
+        Object[] par = new Object[count];
+        Arrays.fill(par, "");
+        String text = String.format(pattern, par);
+        return text;
+    }
+
+    protected static String drawLine(String pattern, int count) {
+        String text = drawLineBase(pattern, count);
+        return text.replaceAll(" ", "-").replaceAll(Pattern.quote("|"), "+");
+    }
+
+
+    protected static String drawHeading(String pattern, int count, String text) {
+        String base = drawLineBase(pattern, count).trim();
+        int internalWidth = base.lastIndexOf('|') - base.indexOf('|') - 1;
+        if (text == null) {
+            return "+" + CharBuffer.allocate(internalWidth).toString().replace('\0', '-') + "+\n";
+        } else {
+            return "| " + String.format("%-" + (internalWidth - 2) + "s", text) + " |\n";
+        }
+    }
+
     /**
      * Prints costs and #vehicles to the given writer
      *
@@ -108,39 +122,37 @@ public static void print(VehicleRoutingProblem problem, VehicleRoutingProblemSol
      * @param solution the solution to be printed
      */
     public static void print(PrintWriter out, VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution, Print print) {
-        String leftAlign = "| %-13s | %-8s | %n";
+        String leftAlign = "| %-30s | %-8s |%n";
 
-        out.format("+--------------------------+%n");
-        out.printf("| problem                  |%n");
-        out.format("+---------------+----------+%n");
-        out.printf("| indicator     | value    |%n");
-        out.format("+---------------+----------+%n");
+        out.printf(drawHeading(leftAlign, 2, null));
+        out.printf(drawHeading(leftAlign, 2, "problem"));
+        out.printf(drawLine(leftAlign, 2));
+        out.format(leftAlign, "indicator", "value");
+        out.printf(drawLine(leftAlign, 2));
 
         out.format(leftAlign, "noJobs", problem.getJobs().values().size());
-        Jobs jobs = getNuOfJobs(problem);
-        out.format(leftAlign, "noServices", jobs.nServices);
-        out.format(leftAlign, "noShipments", jobs.nShipments);
-        out.format(leftAlign, "noBreaks", jobs.nBreaks);
+        getNuOfJobs(problem).entrySet().forEach(en -> out.format(leftAlign, "   " + en.getKey().getSimpleName(), en.getValue()));
         out.format(leftAlign, "fleetsize", problem.getFleetSize().toString());
-        out.format("+--------------------------+%n");
+        out.printf(drawLine(leftAlign, 2));
 
 
-        String leftAlignSolution = "| %-13s | %-40s | %n";
-        out.format("+----------------------------------------------------------+%n");
-        out.printf("| solution                                                 |%n");
-        out.format("+---------------+------------------------------------------+%n");
-        out.printf("| indicator     | value                                    |%n");
-        out.format("+---------------+------------------------------------------+%n");
+        String leftAlignSolution = "| %-13s | %-40s |%n";
+        out.printf(drawHeading(leftAlignSolution, 2, null));
+        out.printf(drawHeading(leftAlignSolution, 2, "solution"));
+        out.printf(drawLine(leftAlignSolution, 2));
+        out.format(leftAlignSolution, "indicator", "value");
+        out.printf(drawLine(leftAlignSolution, 2));
         out.format(leftAlignSolution, "costs", solution.getCost());
         out.format(leftAlignSolution, "noVehicles", solution.getRoutes().size());
         out.format(leftAlignSolution, "unassgndJobs", solution.getUnassignedJobs().size());
-        out.format("+----------------------------------------------------------+%n");
+        out.printf(drawLine(leftAlignSolution, 2));
 
         if (print.equals(Print.VERBOSE)) {
             printVerbose(out, problem, solution);
         }
     }
 
+
     private static void printVerbose(VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution) {
         printVerbose(SYSTEM_OUT_AS_PRINT_WRITER, problem, solution);
         SYSTEM_OUT_AS_PRINT_WRITER.flush();
@@ -160,29 +172,29 @@ private static void printVerbose(PrintWriter out, VehicleRoutingProblem problem,
             out.format("+---------+----------------------+-----------------------+-----------------+-----------------+-----------------+-----------------+%n");
             double costs = 0;
             out.format(leftAlgin, routeNu, getVehicleString(route), route.getStart().getName(), "-", "undef", Math.round(route.getStart().getEndTime()),
-                Math.round(costs));
+                    Math.round(costs));
             TourActivity prevAct = route.getStart();
             for (TourActivity act : route.getActivities()) {
                 String jobId;
-                if (act instanceof TourActivity.JobActivity) {
-                    jobId = ((TourActivity.JobActivity) act).getJob().getId();
+                if (act instanceof JobActivity) {
+                    jobId = ((JobActivity) act).getJob().getId();
                 } else {
                     jobId = "-";
                 }
                 double c = problem.getTransportCosts().getTransportCost(prevAct.getLocation(), act.getLocation(), prevAct.getEndTime(), route.getDriver(),
-                    route.getVehicle());
+                        route.getVehicle());
                 c += problem.getActivityCosts().getActivityCost(act, act.getArrTime(), route.getDriver(), route.getVehicle());
                 costs += c;
                 out.format(leftAlgin, routeNu, getVehicleString(route), act.getName(), jobId, Math.round(act.getArrTime()),
-                    Math.round(act.getEndTime()), Math.round(costs));
+                        Math.round(act.getEndTime()), Math.round(costs));
                 prevAct = act;
             }
             double c = problem.getTransportCosts().getTransportCost(prevAct.getLocation(), route.getEnd().getLocation(), prevAct.getEndTime(),
-                route.getDriver(), route.getVehicle());
+                    route.getDriver(), route.getVehicle());
             c += problem.getActivityCosts().getActivityCost(route.getEnd(), route.getEnd().getArrTime(), route.getDriver(), route.getVehicle());
             costs += c;
             out.format(leftAlgin, routeNu, getVehicleString(route), route.getEnd().getName(), "-", Math.round(route.getEnd().getArrTime()), "undef",
-                Math.round(costs));
+                    Math.round(costs));
             routeNu++;
         }
         out.format("+--------------------------------------------------------------------------------------------------------------------------------+%n");
@@ -202,22 +214,10 @@ private static String getVehicleString(VehicleRoute route) {
         return route.getVehicle().getId();
     }
 
-    private static Jobs getNuOfJobs(VehicleRoutingProblem problem) {
-        int nShipments = 0;
-        int nServices = 0;
-        int nBreaks = 0;
-        for (Job j : problem.getJobs().values()) {
-            if (j instanceof Shipment) {
-                nShipments++;
-            }
-            if (j instanceof Service) {
-                nServices++;
-            }
-            if (j instanceof Break) {
-                nBreaks++;
-            }
-        }
-        return new Jobs(nServices, nShipments, nBreaks);
+    private static Map<Class<? extends Job>, Long> getNuOfJobs(VehicleRoutingProblem problem) {
+        return problem.getJobs().values().stream()
+                .map(j -> (Class<? extends Job>) j.getClass())
+                .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));
     }
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/RandomUtils.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/RandomUtils.java
index facc97981..3eb52508e 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/RandomUtils.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/RandomUtils.java
@@ -18,13 +18,13 @@
 
 package com.graphhopper.jsprit.core.util;
 
-import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-
 import java.util.Collection;
 import java.util.List;
 import java.util.Random;
 
+import com.graphhopper.jsprit.core.problem.job.Job;
+import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+
 /**
  * Created by schroeder on 14/01/15.
  */
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/Resource.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/Resource.java
index 451f3a533..2c0016d78 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/Resource.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/Resource.java
@@ -20,9 +20,6 @@
 
 
 
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileNotFoundException;
@@ -30,6 +27,9 @@
 import java.net.MalformedURLException;
 import java.net.URL;
 
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 
 /**
  * @author stefan schroeder, pierre-david belanger
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/SolutionVerifier.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/SolutionVerifier.java
index 6d1ed3fb2..ca2024605 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/SolutionVerifier.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/SolutionVerifier.java
@@ -17,16 +17,16 @@
  */
 package com.graphhopper.jsprit.core.util;
 
+import java.util.Collection;
+import java.util.HashSet;
+import java.util.Set;
+
 import com.graphhopper.jsprit.core.algorithm.listener.AlgorithmEndsListener;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 
-import java.util.Collection;
-import java.util.HashSet;
-import java.util.Set;
-
 
 public class SolutionVerifier implements AlgorithmEndsListener {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/Solutions.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/Solutions.java
index 8687caab6..231ede97d 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/Solutions.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/Solutions.java
@@ -17,10 +17,10 @@
  */
 package com.graphhopper.jsprit.core.util;
 
-import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
-
 import java.util.Collection;
 
+import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
+
 
 public class Solutions {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/VehicleRoutingTransportCostsMatrix.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/VehicleRoutingTransportCostsMatrix.java
index e63188ae2..916d7f4f9 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/VehicleRoutingTransportCostsMatrix.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/VehicleRoutingTransportCostsMatrix.java
@@ -17,16 +17,17 @@
  */
 package com.graphhopper.jsprit.core.util;
 
+import java.util.HashMap;
+import java.util.Map;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.cost.AbstractForwardVehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.driver.Driver;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl.VehicleCostParams;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.util.HashMap;
-import java.util.Map;
 
 
 /**
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/BuildCVRPAlgoFromScratch_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/BuildCVRPAlgoFromScratch_IT.java
index fff942ceb..3e4d7024e 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/BuildCVRPAlgoFromScratch_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/BuildCVRPAlgoFromScratch_IT.java
@@ -17,6 +17,13 @@
  */
 package com.graphhopper.jsprit.core.algorithm;
 
+import static org.junit.Assert.assertEquals;
+
+import java.util.Collection;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.acceptor.GreedyAcceptance;
 import com.graphhopper.jsprit.core.algorithm.module.RuinAndRecreateModule;
 import com.graphhopper.jsprit.core.algorithm.recreate.BestInsertionBuilder;
@@ -37,13 +44,6 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleFleetManager;
 import com.graphhopper.jsprit.core.util.ChristofidesReader;
 import com.graphhopper.jsprit.core.util.Solutions;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.experimental.categories.Category;
-
-import java.util.Collection;
-
-import static org.junit.Assert.assertEquals;
 
 
 public class BuildCVRPAlgoFromScratch_IT {
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CVRPwithDeliveries_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CVRPwithDeliveries_IT.java
index 8b3c4c28c..4850b7bd1 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CVRPwithDeliveries_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CVRPwithDeliveries_IT.java
@@ -17,18 +17,18 @@
  */
 package com.graphhopper.jsprit.core.algorithm;
 
+import static org.junit.Assert.assertEquals;
+
+import java.util.Collection;
+
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.util.ChristofidesReader;
 import com.graphhopper.jsprit.core.util.JobType;
 import com.graphhopper.jsprit.core.util.Solutions;
-import org.junit.Test;
-import org.junit.experimental.categories.Category;
-
-import java.util.Collection;
-
-import static org.junit.Assert.assertEquals;
 
 public class CVRPwithDeliveries_IT {
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CVRPwithMatrix_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CVRPwithMatrix_IT.java
index 050fbf165..df6ad2242 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CVRPwithMatrix_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CVRPwithMatrix_IT.java
@@ -17,6 +17,17 @@
  */
 package com.graphhopper.jsprit.core.algorithm;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
+
+import org.junit.Assert;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.analysis.SolutionAnalyser;
 import com.graphhopper.jsprit.core.problem.Location;
@@ -27,16 +38,11 @@
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
-import com.graphhopper.jsprit.core.util.*;
-import org.junit.Assert;
-import org.junit.Test;
-import org.junit.experimental.categories.Category;
-
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.List;
-
-import static org.junit.Assert.*;
+import com.graphhopper.jsprit.core.util.ChristofidesReader;
+import com.graphhopper.jsprit.core.util.EuclideanDistanceCalculator;
+import com.graphhopper.jsprit.core.util.FastVehicleRoutingTransportCostsMatrix;
+import com.graphhopper.jsprit.core.util.JobType;
+import com.graphhopper.jsprit.core.util.Solutions;
 
 public class CVRPwithMatrix_IT {
 
@@ -104,7 +110,7 @@ private VehicleRoutingProblem createVrpWithLocationIndecesAndMatrix(VehicleRouti
             Service s = (Service) j;
             Location l = Location.Builder.newInstance().setIndex(getIndex())
                 .setId(s.getLocation().getId()).setCoordinate(s.getLocation().getCoordinate()).build();
-            Service newService = Service.Builder.newInstance(s.getId()).setServiceTime(s.getServiceDuration())
+            Service newService = new Service.Builder(s.getId()).setServiceTime(s.getServiceDuration())
                 .addSizeDimension(0, s.getSize().get(0))
                 .setLocation(l).build();
             vrpBuilder.addJob(newService);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CVRPwithPickups_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CVRPwithPickups_IT.java
index eef86be33..efd1e845e 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CVRPwithPickups_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CVRPwithPickups_IT.java
@@ -17,18 +17,18 @@
  */
 package com.graphhopper.jsprit.core.algorithm;
 
+import static org.junit.Assert.assertEquals;
+
+import java.util.Collection;
+
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.util.ChristofidesReader;
 import com.graphhopper.jsprit.core.util.JobType;
 import com.graphhopper.jsprit.core.util.Solutions;
-import org.junit.Test;
-import org.junit.experimental.categories.Category;
-
-import java.util.Collection;
-
-import static org.junit.Assert.assertEquals;
 
 public class CVRPwithPickups_IT {
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CapacityConstraint_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CapacityConstraint_IT.java
index c80b8ea0b..4669b4fb1 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CapacityConstraint_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CapacityConstraint_IT.java
@@ -17,6 +17,9 @@
  */
 package com.graphhopper.jsprit.core.algorithm;
 
+import org.junit.Assert;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.analysis.SolutionAnalyser;
 import com.graphhopper.jsprit.core.problem.Capacity;
@@ -31,8 +34,6 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.ManhattanCosts;
 import com.graphhopper.jsprit.core.util.Solutions;
-import org.junit.Assert;
-import org.junit.Test;
 
 
 public class CapacityConstraint_IT {
@@ -41,25 +42,25 @@
     public void capacityShouldNotBeExceeded() {
 
         VehicleTypeImpl type1 = VehicleTypeImpl.Builder.newInstance("type1")
-            .addCapacityDimension(0,1)
-            .addCapacityDimension(1,0).addCapacityDimension(2,17).addCapacityDimension(3,18)
-            .addCapacityDimension(4,14).addCapacityDimension(5,18).addCapacityDimension(6,20).build();
+                .addCapacityDimension(0,1)
+                .addCapacityDimension(1,0).addCapacityDimension(2,17).addCapacityDimension(3,18)
+                .addCapacityDimension(4,14).addCapacityDimension(5,18).addCapacityDimension(6,20).build();
         VehicleTypeImpl type2 = VehicleTypeImpl.Builder.newInstance("type2")
-            .addCapacityDimension(0,0)
-            .addCapacityDimension(1,0).addCapacityDimension(2,17).addCapacityDimension(3,18)
-            .addCapacityDimension(4,13).addCapacityDimension(5,18).addCapacityDimension(6,20).build();
+                .addCapacityDimension(0,0)
+                .addCapacityDimension(1,0).addCapacityDimension(2,17).addCapacityDimension(3,18)
+                .addCapacityDimension(4,13).addCapacityDimension(5,18).addCapacityDimension(6,20).build();
         VehicleTypeImpl type3 = VehicleTypeImpl.Builder.newInstance("type3")
-            .addCapacityDimension(0,1)
-            .addCapacityDimension(1,0).addCapacityDimension(2,17).addCapacityDimension(3,18)
-            .addCapacityDimension(4,14).addCapacityDimension(5,18).addCapacityDimension(6,20).build();
+                .addCapacityDimension(0,1)
+                .addCapacityDimension(1,0).addCapacityDimension(2,17).addCapacityDimension(3,18)
+                .addCapacityDimension(4,14).addCapacityDimension(5,18).addCapacityDimension(6,20).build();
         VehicleTypeImpl type4 = VehicleTypeImpl.Builder.newInstance("type4")
-            .addCapacityDimension(0,0)
-            .addCapacityDimension(1,0).addCapacityDimension(2,17).addCapacityDimension(3,18)
-            .addCapacityDimension(4,14).addCapacityDimension(5,17).addCapacityDimension(6,20).build();
+                .addCapacityDimension(0,0)
+                .addCapacityDimension(1,0).addCapacityDimension(2,17).addCapacityDimension(3,18)
+                .addCapacityDimension(4,14).addCapacityDimension(5,17).addCapacityDimension(6,20).build();
         VehicleTypeImpl type5 = VehicleTypeImpl.Builder.newInstance("type5")
-            .addCapacityDimension(0,1)
-            .addCapacityDimension(1,0).addCapacityDimension(2,16).addCapacityDimension(3,17)
-            .addCapacityDimension(4,14).addCapacityDimension(5,18).addCapacityDimension(6,20).build();
+                .addCapacityDimension(0,1)
+                .addCapacityDimension(1,0).addCapacityDimension(2,16).addCapacityDimension(3,17)
+                .addCapacityDimension(4,14).addCapacityDimension(5,18).addCapacityDimension(6,20).build();
 
         VehicleImpl v1 = VehicleImpl.Builder.newInstance("v1").setStartLocation(Location.newInstance(0,0)).setType(type1).setReturnToDepot(true).build();
         VehicleImpl v2 = VehicleImpl.Builder.newInstance("v2").setStartLocation(Location.newInstance(0, 0)).setType(type2).setReturnToDepot(true).build();
@@ -67,27 +68,27 @@ public void capacityShouldNotBeExceeded() {
         VehicleImpl v4 = VehicleImpl.Builder.newInstance("v4").setStartLocation(Location.newInstance(0, 0)).setType(type4).setReturnToDepot(true).build();
         VehicleImpl v5 = VehicleImpl.Builder.newInstance("v5").setStartLocation(Location.newInstance(0, 0)).setType(type5).setReturnToDepot(true).build();
 
-        Delivery d1 = Delivery.Builder.newInstance("d1").setLocation(Location.newInstance(0,10))
-            .addSizeDimension(2,1).build();
-        Delivery d2 = Delivery.Builder.newInstance("d2").setLocation(Location.newInstance(0,12))
-            .addSizeDimension(2,1).addSizeDimension(3,1).build();
-        Delivery d3 = Delivery.Builder.newInstance("d3").setLocation(Location.newInstance(0,15))
-            .addSizeDimension(0,1).addSizeDimension(4,1).build();
-        Delivery d4 = Delivery.Builder.newInstance("d4").setLocation(Location.newInstance(0,20))
-            .addSizeDimension(0,1).addSizeDimension(5,1).build();
+        Delivery d1 = new Delivery.Builder("d1").setLocation(Location.newInstance(0, 10))
+                .addSizeDimension(2,1).build();
+        Delivery d2 = new Delivery.Builder("d2").setLocation(Location.newInstance(0,12))
+                .addSizeDimension(2,1).addSizeDimension(3,1).build();
+        Delivery d3 = new Delivery.Builder("d3").setLocation(Location.newInstance(0,15))
+                .addSizeDimension(0,1).addSizeDimension(4,1).build();
+        Delivery d4 = new Delivery.Builder("d4").setLocation(Location.newInstance(0,20))
+                .addSizeDimension(0,1).addSizeDimension(5,1).build();
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.setFleetSize(VehicleRoutingProblem.FleetSize.FINITE)
-            .addJob(d1).addJob(d2).addJob(d3).addJob(d4)
-            .addVehicle(v1).addVehicle(v2)
-            .addVehicle(v3)
-            .addVehicle(v4).addVehicle(v5);
+        .addJob(d1).addJob(d2).addJob(d3).addJob(d4)
+        .addVehicle(v1).addVehicle(v2)
+        .addVehicle(v3)
+        .addVehicle(v4).addVehicle(v5);
         vrpBuilder.setRoutingCost(new ManhattanCosts());
 
         VehicleRoutingProblem vrp = vrpBuilder.build();
 
         VehicleRoutingAlgorithm vra = Jsprit.Builder.newInstance(vrp)
-            .setProperty(Jsprit.Parameter.VEHICLE_SWITCH, "true").buildAlgorithm();
+                .setProperty(Jsprit.Parameter.VEHICLE_SWITCH, "true").buildAlgorithm();
         vra.setMaxIterations(2000);
         VehicleRoutingProblemSolution solution = Solutions.bestOf(vra.searchSolutions());
 
@@ -104,7 +105,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
 //            System.out.println(r.getVehicle().getId() + " load@beginning: "  + loadAtBeginning);
 //            System.out.println("cap: " + capacityDimensions);
             Assert.assertTrue("capacity has been exceeded",
-            loadAtBeginning.isLessOrEqual(capacityDimensions));
+                    loadAtBeginning.isLessOrEqual(capacityDimensions));
         }
 //
         Assert.assertTrue(solution.getRoutes().size() != 1);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/DeactivateTimeWindowsTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/DeactivateTimeWindowsTest.java
index db1508940..216028dd7 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/DeactivateTimeWindowsTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/DeactivateTimeWindowsTest.java
@@ -19,6 +19,12 @@
 package com.graphhopper.jsprit.core.algorithm;
 
 
+import java.util.Collection;
+
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.problem.Location;
@@ -30,11 +36,6 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.util.Solutions;
-import org.junit.Assert;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.Collection;
 
 public class DeactivateTimeWindowsTest {
 
@@ -42,7 +43,7 @@
 
     @Before
     public void doBefore(){
-        Service service = Service.Builder.newInstance("s").setLocation(Location.newInstance(20, 0))
+        Service service = new Service.Builder("s").setLocation(Location.newInstance(20, 0))
             .setTimeWindow(TimeWindow.newInstance(40, 50)).build();
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         vrp = VehicleRoutingProblem.Builder.newInstance().addJob(service).addVehicle(vehicle).build();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ExampleActivityCostFunction.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ExampleActivityCostFunction.java
index 7656bffa9..4b5c72bfd 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ExampleActivityCostFunction.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ExampleActivityCostFunction.java
@@ -19,6 +19,7 @@
 
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingActivityCosts;
 import com.graphhopper.jsprit.core.problem.driver.Driver;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 
@@ -46,7 +47,7 @@ public double getActivityCost(TourActivity tourAct, double arrivalTime, Driver d
             double totalCost = timeAtAct * parameter_timeAtAct;
 
             //penalty tooLate
-            if (tourAct instanceof TourActivity.JobActivity) {
+            if (tourAct instanceof JobActivity) {
                 if (arrivalTime > tourAct.getTheoreticalLatestOperationStartTime()) {
                     double penTime = arrivalTime - tourAct.getTheoreticalLatestOperationStartTime();
                     totalCost += penTime * parameter_penaltyTooLate;
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ExternalInitialSolutionIsInValidTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ExternalInitialSolutionIsInValidTest.java
index 65db2e423..b9145d6f3 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ExternalInitialSolutionIsInValidTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ExternalInitialSolutionIsInValidTest.java
@@ -18,6 +18,10 @@
 
 package com.graphhopper.jsprit.core.algorithm;
 
+import java.util.Arrays;
+
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
@@ -25,12 +29,8 @@
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
-import com.graphhopper.jsprit.core.util.Solutions;
-import junit.framework.Assert;
-import org.junit.Test;
 
-import java.util.Arrays;
-import java.util.Collection;
+import junit.framework.Assert;
 
 
 public class ExternalInitialSolutionIsInValidTest {
@@ -38,8 +38,8 @@
     @Test
     public void itShouldSolveProblemWithIniSolutionExternallyCreated() {
 
-        Service s1 = Service.Builder.newInstance("s1").setLocation(Location.newInstance(10, 0)).build();
-        Service s2 = Service.Builder.newInstance("s2").setLocation(Location.newInstance(0, 10)).build();
+        Service s1 = new Service.Builder("s1").setLocation(Location.newInstance(10, 0)).build();
+        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(0, 10)).build();
 
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v1").setStartLocation(Location.newInstance(0, 0)).build();
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/IgnoreBreakTimeWindowTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/IgnoreBreakTimeWindowTest.java
index 12b50a96f..82f680e91 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/IgnoreBreakTimeWindowTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/IgnoreBreakTimeWindowTest.java
@@ -18,6 +18,10 @@
 
 package com.graphhopper.jsprit.core.algorithm;
 
+import static org.junit.Assert.assertTrue;
+
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
@@ -31,8 +35,6 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.Solutions;
-import junit.framework.Assert;
-import org.junit.Test;
 
 /**
  * Created by schroeder on 08/01/16.
@@ -44,9 +46,9 @@ public void doNotIgnoreBreakTW(){
         VehicleTypeImpl.Builder vehicleTypeBuilder = VehicleTypeImpl.Builder.newInstance("vehicleType");
         VehicleType vehicleType = vehicleTypeBuilder.setCostPerWaitingTime(0.8).build();
 
-		/*
+        /*
          * get a vehicle-builder and build a vehicle located at (10,10) with type "vehicleType"
-		 */
+         */
 
         VehicleImpl vehicle2;
         {
@@ -54,39 +56,39 @@ public void doNotIgnoreBreakTW(){
             vehicleBuilder.setStartLocation(Location.newInstance(0, 0));
             vehicleBuilder.setType(vehicleType);
             vehicleBuilder.setEarliestStart(10).setLatestArrival(50);
-            vehicleBuilder.setBreak(Break.Builder.newInstance("lunch").setTimeWindow(TimeWindow.newInstance(14, 14)).setServiceTime(1.).build());
+            vehicleBuilder.setBreak(new Break.Builder("lunch").setTimeWindow(TimeWindow.newInstance(14, 14)).setServiceTime(1.).build());
             vehicle2 = vehicleBuilder.build();
         }
-		/*
+        /*
          * build services at the required locations, each with a capacity-demand of 1.
-		 */
+         */
 
 
-        Service service4 = Service.Builder.newInstance("2").setLocation(Location.newInstance(0, 0))
-            .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(17,17)).build();
+        Service service4 = new Service.Builder("2").setLocation(Location.newInstance(0, 0))
+                        .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(17,17)).build();
 
-        Service service5 = Service.Builder.newInstance("3").setLocation(Location.newInstance(0, 0))
-            .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(18, 18)).build();
+        Service service5 = new Service.Builder("3").setLocation(Location.newInstance(0, 0))
+                        .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(18, 18)).build();
 
-        Service service7 = Service.Builder.newInstance("4").setLocation(Location.newInstance(0, 0))
-            .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(10, 10)).build();
+        Service service7 = new Service.Builder("4").setLocation(Location.newInstance(0, 0))
+                        .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(10, 10)).build();
 
-        Service service8 = Service.Builder.newInstance("5").setLocation(Location.newInstance(0, 0))
-            .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(12, 12)).build();
+        Service service8 = new Service.Builder("5").setLocation(Location.newInstance(0, 0))
+                        .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(12, 12)).build();
 
-        Service service10 = Service.Builder.newInstance("6").setLocation(Location.newInstance(0, 0))
-            .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(16, 16)).build();
+        Service service10 = new Service.Builder("6").setLocation(Location.newInstance(0, 0))
+                        .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(16, 16)).build();
 
-        Service service11 = Service.Builder.newInstance("7").setLocation(Location.newInstance(0, 0))
-            .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(13, 13)).build();
+        Service service11 = new Service.Builder("7").setLocation(Location.newInstance(0, 0))
+                        .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(13, 13)).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance()
-            .addVehicle(vehicle2)
-            .addJob(service4)
-            .addJob(service5).addJob(service7)
-            .addJob(service8).addJob(service10).addJob(service11)
-            .setFleetSize(VehicleRoutingProblem.FleetSize.FINITE)
-            .build();
+                        .addVehicle(vehicle2)
+                        .addJob(service4)
+                        .addJob(service5).addJob(service7)
+                        .addJob(service8).addJob(service10).addJob(service11)
+                        .setFleetSize(VehicleRoutingProblem.FleetSize.FINITE)
+                        .build();
 
         VehicleRoutingAlgorithm vra = Jsprit.createAlgorithm(vrp);
         vra.setMaxIterations(50);
@@ -94,17 +96,18 @@ public void doNotIgnoreBreakTW(){
         VehicleRoutingProblemSolution solution = Solutions.bestOf(vra.searchSolutions());
 
 
-        Assert.assertTrue(breakShouldBeTime(solution));
+        assertTrue(breakShouldBeTime(solution));
     }
 
     private boolean breakShouldBeTime(VehicleRoutingProblemSolution solution) {
         boolean inTime = true;
         for(TourActivity act : solution.getRoutes().iterator().next().getActivities()){
-            if(act instanceof BreakActivity){
-                if(act.getEndTime() < ((BreakActivity) act).getJob().getTimeWindow().getStart()){
+            if (act instanceof BreakActivity) {
+                TimeWindow timeWindow = ((BreakActivity) act).getJob().getTimeWindow();
+                if (act.getEndTime() < timeWindow.getStart()) {
                     inTime = false;
                 }
-                if(act.getArrTime() > ((BreakActivity) act).getJob().getTimeWindow().getEnd()){
+                if (act.getArrTime() > timeWindow.getEnd()) {
                     inTime = false;
                 }
             }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/InitialRoutesTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/InitialRoutesTest.java
index 42430d0b5..1ac38966a 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/InitialRoutesTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/InitialRoutesTest.java
@@ -19,6 +19,15 @@
 package com.graphhopper.jsprit.core.algorithm;
 
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
+import java.util.Collection;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.box.GreedySchrimpfFactory;
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit.Builder;
@@ -36,19 +45,14 @@
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupShipment;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupShipmentDEPRECATED;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.Coordinate;
 import com.graphhopper.jsprit.core.util.Solutions;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.Collection;
-
-import static org.junit.Assert.*;
 
 public class InitialRoutesTest {
 
@@ -60,8 +64,8 @@
     public void before(){
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         VehicleImpl v = VehicleImpl.Builder.newInstance("veh1").setStartLocation(Location.newInstance(0,0)).setLatestArrival(48600).build();
-        Service s1 = Service.Builder.newInstance("s1").setLocation(Location.newInstance(1000,0)).build();
-        Service s2 = Service.Builder.newInstance("s2").setLocation(Location.newInstance(1000,1000)).build();
+        Service s1 = new Service.Builder("s1").setLocation(Location.newInstance(1000,0)).build();
+        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(1000,1000)).build();
         builder.addVehicle(v).addJob(s1).addJob(s2);
         initialRoute = VehicleRoute.Builder.newInstance(v).addService(s1).build();
         builder.addInitialVehicleRoute(initialRoute);
@@ -97,7 +101,9 @@ public void whenSolving_deliverService1_shouldBeInRoute() {
     private Job getInitialJob(String jobId, VehicleRoutingProblem vrp) {
         for (VehicleRoute r : vrp.getInitialVehicleRoutes()) {
             for (Job j : r.getTourActivities().getJobs()) {
-                if (j.getId().equals(jobId)) return j;
+                if (j.getId().equals(jobId)) {
+                    return j;
+                }
             }
         }
         return null;
@@ -107,8 +113,10 @@ private boolean hasActivityIn(Collection<VehicleRoute> routes, String jobId) {
         boolean isInRoute = false;
         for (VehicleRoute route : routes) {
             for (TourActivity act : route.getActivities()) {
-                if (act instanceof TourActivity.JobActivity) {
-                    if (((TourActivity.JobActivity) act).getJob().getId().equals(jobId)) isInRoute = true;
+                if (act instanceof JobActivity) {
+                    if (((JobActivity) act).getJob().getId().equals(jobId)) {
+                        isInRoute = true;
+                    }
                 }
             }
         }
@@ -131,8 +139,10 @@ private boolean hasActivityIn(VehicleRoutingProblemSolution solution, String veh
     private boolean hasActivityIn(VehicleRoute route, String jobId) {
         boolean isInRoute = false;
         for (TourActivity act : route.getActivities()) {
-            if (act instanceof TourActivity.JobActivity) {
-                if (((TourActivity.JobActivity) act).getJob().getId().equals(jobId)) isInRoute = true;
+            if (act instanceof JobActivity) {
+                if (((JobActivity) act).getJob().getId().equals(jobId)) {
+                    isInRoute = true;
+                }
             }
         }
         return isInRoute;
@@ -151,26 +161,26 @@ public void whenSolving_deliverService2_shouldBeInRoute() {
     public void maxCapacityShouldNotBeExceeded() {
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0, 100).build();
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("veh")
-            .setStartLocation(Location.Builder.newInstance().setId("start").setCoordinate(Coordinate.newInstance(0, 0)).build())
-            .setType(type)
-            .build();
+                .setStartLocation(Location.Builder.newInstance().setId("start").setCoordinate(Coordinate.newInstance(0, 0)).build())
+                .setType(type)
+                .build();
 
         Shipment shipment = Shipment.Builder.newInstance("s")
-            .setPickupLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(10, 0)).setId("pick").build())
-            .setDeliveryLocation(Location.Builder.newInstance().setId("del").setCoordinate(Coordinate.newInstance(0, 10)).build())
-            .addSizeDimension(0, 100)
-            .build();
+                .setPickupLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(10, 0)).setId("pick").build())
+                .setDeliveryLocation(Location.Builder.newInstance().setId("del").setCoordinate(Coordinate.newInstance(0, 10)).build())
+                .addSizeDimension(0, 100)
+                .build();
 
         Shipment another_shipment = Shipment.Builder.newInstance("another_s")
-            .setPickupLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(10, 0)).setId("pick").build())
-            .setDeliveryLocation(Location.Builder.newInstance().setId("del").setCoordinate(Coordinate.newInstance(0, 10)).build())
-            .addSizeDimension(0, 50)
-            .build();
+                .setPickupLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(10, 0)).setId("pick").build())
+                .setDeliveryLocation(Location.Builder.newInstance().setId("del").setCoordinate(Coordinate.newInstance(0, 10)).build())
+                .addSizeDimension(0, 50)
+                .build();
 
         VehicleRoute iniRoute = VehicleRoute.Builder.newInstance(vehicle).addPickup(shipment).addDelivery(shipment).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(shipment).addVehicle(vehicle).addJob(another_shipment)
-            .setFleetSize(VehicleRoutingProblem.FleetSize.FINITE).addInitialVehicleRoute(iniRoute).build();
+                .setFleetSize(VehicleRoutingProblem.FleetSize.FINITE).addInitialVehicleRoute(iniRoute).build();
 
         VehicleRoutingAlgorithm vra = new GreedySchrimpfFactory().createAlgorithm(vrp);
         vra.setMaxIterations(10);
@@ -184,12 +194,12 @@ public void maxCapacityShouldNotBeExceeded() {
     private boolean secondActIsPickup(Collection<VehicleRoutingProblemSolution> solutions) {
         VehicleRoutingProblemSolution solution = Solutions.bestOf(solutions);
         TourActivity secondAct = solution.getRoutes().iterator().next().getActivities().get(1);
-        return secondAct instanceof PickupShipment;
+        return secondAct instanceof PickupShipmentDEPRECATED;
     }
 
     @Test
     public void whenAllJobsInInitialRoute_itShouldWork() {
-        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance(0, 10)).build();
+        Service s = new Service.Builder("s").setLocation(Location.newInstance(0, 10)).build();
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoute iniRoute = VehicleRoute.Builder.newInstance(v).addService(s).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addInitialVehicleRoute(iniRoute).build();
@@ -201,8 +211,8 @@ public void whenAllJobsInInitialRoute_itShouldWork() {
 
     @Test
     public void buildWithoutTimeConstraints() {
-        Service s1 = Service.Builder.newInstance("s1").setLocation(Location.newInstance(0, 10)).addSizeDimension(0, 10).build();
-        Service s2 = Service.Builder.newInstance("s2").setLocation(Location.newInstance(10, 20)).addSizeDimension(0, 12).build();
+        Service s1 = new Service.Builder("s1").setLocation(Location.newInstance(0, 10)).addSizeDimension(0, 10).build();
+        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(10, 20)).addSizeDimension(0, 12).build();
 
         VehicleTypeImpl vt = VehicleTypeImpl.Builder.newInstance("vt").addCapacityDimension(0, 15).build();
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setType(vt).setStartLocation(Location.newInstance(0, 0)).build();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/MeetTimeWindowConstraint_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/MeetTimeWindowConstraint_IT.java
index 84bf83512..44f31dc11 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/MeetTimeWindowConstraint_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/MeetTimeWindowConstraint_IT.java
@@ -17,6 +17,20 @@
  */
 package com.graphhopper.jsprit.core.algorithm;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
+
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.JobInsertedListener;
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.VehicleSwitchedListener;
@@ -34,19 +48,6 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.FastVehicleRoutingTransportCostsMatrix;
 import com.graphhopper.jsprit.core.util.Solutions;
-import org.junit.Assert;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.io.BufferedReader;
-import java.io.IOException;
-import java.io.InputStreamReader;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.List;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
 
 public class MeetTimeWindowConstraint_IT {
 
@@ -60,9 +61,9 @@ public void doBefore(){
             .setEarliestStart(14400).setLatestArrival(46800).setType(type1).build();
         VehicleImpl vehicle2 = VehicleImpl.Builder.newInstance("19").setStartLocation(Location.newInstance(0,0))
             .setEarliestStart(39600).setLatestArrival(64800).setType(type2).build();
-        Service service1 = Service.Builder.newInstance("2").setLocation(Location.newInstance(2000, 0))
+        Service service1 = new Service.Builder("2").setLocation(Location.newInstance(2000, 0))
             .setTimeWindow(TimeWindow.newInstance(54000,54000)).build();
-        Service service2 = Service.Builder.newInstance("1").setLocation(Location.newInstance(1000, 1000))
+        Service service2 = new Service.Builder("1").setLocation(Location.newInstance(1000, 1000))
             .setTimeWindow(TimeWindow.newInstance(19800,21600)).build();
         vrp = VehicleRoutingProblem.Builder.newInstance().addVehicle(vehicle1).addVehicle(vehicle2)
             .addJob(service1).addJob(service2).setFleetSize(VehicleRoutingProblem.FleetSize.FINITE).build();
@@ -321,19 +322,19 @@ private VehicleRoutingProblem createTWBugProblem() throws IOException {
         VehicleImpl v4 = VehicleImpl.Builder.newInstance("vehicle4").setStartLocation(Location.newInstance(0))
             .setEarliestStart(36000).setLatestArrival(54060).setType(type).build();
 
-        Service s1 = Service.Builder.newInstance("1").setLocation(Location.Builder.newInstance().setIndex(1).setId("js0").build())
+        Service s1 = new Service.Builder("1").setLocation(Location.Builder.newInstance().setIndex(1).setId("js0").build())
             .setServiceTime(600).setTimeWindow(TimeWindow.newInstance(0,1800)).addSizeDimension(0,1).build();
-        Service s2 = Service.Builder.newInstance("2").setLocation(Location.Builder.newInstance().setIndex(2).setId("js2").build())
+        Service s2 = new Service.Builder("2").setLocation(Location.Builder.newInstance().setIndex(2).setId("js2").build())
             .setServiceTime(600).setTimeWindow(TimeWindow.newInstance(5400, 7200)).addSizeDimension(0, 2).build();
-        Service s3 = Service.Builder.newInstance("3").setLocation(Location.Builder.newInstance().setIndex(3).setId("js5").build())
+        Service s3 = new Service.Builder("3").setLocation(Location.Builder.newInstance().setIndex(3).setId("js5").build())
             .setServiceTime(1800).setTimeWindow(TimeWindow.newInstance(17100, 18000)).addSizeDimension(0, 10).build();
-        Service s4 = Service.Builder.newInstance("4").setLocation(Location.Builder.newInstance().setIndex(4).setId("js4").build())
+        Service s4 = new Service.Builder("4").setLocation(Location.Builder.newInstance().setIndex(4).setId("js4").build())
             .setServiceTime(900).addSizeDimension(0, 2).build();
-        Service s5 = Service.Builder.newInstance("5").setLocation(Location.Builder.newInstance().setIndex(5).setId("js8").build())
+        Service s5 = new Service.Builder("5").setLocation(Location.Builder.newInstance().setIndex(5).setId("js8").build())
             .setServiceTime(600).addSizeDimension(0, 4).build();
-        Service s6 = Service.Builder.newInstance("6").setLocation(Location.Builder.newInstance().setIndex(6).setId("js10").build())
+        Service s6 = new Service.Builder("6").setLocation(Location.Builder.newInstance().setIndex(6).setId("js10").build())
             .setServiceTime(1500).setTimeWindow(TimeWindow.newInstance(29700,32400)).addSizeDimension(0, 10).build();
-        Service s7 = Service.Builder.newInstance("7").setLocation(Location.Builder.newInstance().setIndex(7).setId("jsp3").build())
+        Service s7 = new Service.Builder("7").setLocation(Location.Builder.newInstance().setIndex(7).setId("jsp3").build())
             .setServiceTime(5594).build();
 
         Shipment shipment1 = Shipment.Builder.newInstance("shipment1")
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/MultipleTimeWindowsTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/MultipleTimeWindowsTest.java
index 5ed0309d4..3d40ac7ea 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/MultipleTimeWindowsTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/MultipleTimeWindowsTest.java
@@ -18,6 +18,8 @@
 
 package com.graphhopper.jsprit.core.algorithm;
 
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
@@ -25,8 +27,8 @@
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.util.Solutions;
+
 import junit.framework.Assert;
-import org.junit.Test;
 
 /**
  * Created by schroeder on 26/05/15.
@@ -35,9 +37,9 @@
 
     @Test
     public void service2ShouldNotBeInserted(){
-        Service s = Service.Builder.newInstance("s1").setLocation(Location.newInstance(10, 0)).build();
+        Service s = new Service.Builder("s1").setLocation(Location.newInstance(10, 0)).build();
 
-        Service s2 = Service.Builder.newInstance("s2")
+        Service s2 = new Service.Builder("s2")
                 .addTimeWindow(50.,60.)
                 .setLocation(Location.newInstance(20, 0)).build();
 
@@ -54,10 +56,10 @@ public void service2ShouldNotBeInserted(){
 
     @Test
     public void service2ShouldBeInsertedIntoNewVehicle(){
-        Service s = Service.Builder.newInstance("s1").setLocation(Location.newInstance(10,0))
+        Service s = new Service.Builder("s1").setLocation(Location.newInstance(10,0))
                 .addTimeWindow(5.,15.).build();
 
-        Service s2 = Service.Builder.newInstance("s2")
+        Service s2 = new Service.Builder("s2")
                 .addTimeWindow(50.,60.)
                 .setLocation(Location.newInstance(20, 0)).build();
 
@@ -78,9 +80,9 @@ public void service2ShouldBeInsertedIntoNewVehicle(){
 
     @Test
     public void service2ShouldBeInserted(){
-        Service s = Service.Builder.newInstance("s1").setLocation(Location.newInstance(10,0)).build();
+        Service s = new Service.Builder("s1").setLocation(Location.newInstance(10,0)).build();
 
-        Service s2 = Service.Builder.newInstance("s2")
+        Service s2 = new Service.Builder("s2")
                 .addTimeWindow(50., 60.).addTimeWindow(15., 25)
                 .setLocation(Location.newInstance(20, 0)).build();
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/OpenRoutesTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/OpenRoutesTest.java
index c96b77fc1..d74cf6b27 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/OpenRoutesTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/OpenRoutesTest.java
@@ -17,6 +17,14 @@
  */
 package com.graphhopper.jsprit.core.algorithm;
 
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
+import java.util.Collection;
+
+import org.junit.Assert;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.box.SchrimpfFactory;
 import com.graphhopper.jsprit.core.algorithm.recreate.NoSolutionFoundException;
 import com.graphhopper.jsprit.core.problem.Location;
@@ -31,13 +39,6 @@
 import com.graphhopper.jsprit.core.util.GreatCircleCosts;
 import com.graphhopper.jsprit.core.util.Solutions;
 import com.graphhopper.jsprit.core.util.TestUtils;
-import org.junit.Assert;
-import org.junit.Test;
-
-import java.util.Collection;
-
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
 
 public class OpenRoutesTest {
 
@@ -74,7 +75,7 @@ public void whenDealingWithOpenRoute_insertionShouldNotRequireRouteToBeClosed()
             .setStartLocation(TestUtils.loc(Coordinate.newInstance(0, 0)))
             .build();
 
-        Service service = Service.Builder.newInstance("s")
+        Service service = new Service.Builder("s")
             .setLocation(TestUtils.loc(Coordinate.newInstance(5, 0)))
             .build();
 
@@ -124,7 +125,7 @@ public void whenDealingWithOpenRoute_algorithmShouldCalculateCorrectCosts() {
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v").setLatestArrival(10.)
             .setType(type).setReturnToDepot(false).setStartLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(0, 0)).build()).build();
 
-        Service service = Service.Builder.newInstance("s")
+        Service service = new Service.Builder("s")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(5, 0)).build()).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(service).addVehicle(vehicle).build();
@@ -146,7 +147,7 @@ public void whenDealingWithOpenRouteAndGreatCircleCost_algorithmShouldRunWithout
             .setStartLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(0, 0)).build())
             .build();
 
-        Service service = Service.Builder.newInstance("s")
+        Service service = new Service.Builder("s")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(50, 0)).build()).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance()
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/PickupsAndDeliveries_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/PickupsAndDeliveries_IT.java
index ff8e4aedd..ce97be53a 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/PickupsAndDeliveries_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/PickupsAndDeliveries_IT.java
@@ -17,17 +17,17 @@
  */
 package com.graphhopper.jsprit.core.algorithm;
 
+import static org.junit.Assert.assertEquals;
+
+import java.util.Collection;
+
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.util.LiLimReader;
 import com.graphhopper.jsprit.core.util.Solutions;
-import org.junit.Test;
-import org.junit.experimental.categories.Category;
-
-import java.util.Collection;
-
-import static org.junit.Assert.assertEquals;
 
 public class PickupsAndDeliveries_IT {
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollectionWithCostsHigherThanTimesAndFiniteFleet_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollectionWithCostsHigherThanTimesAndFiniteFleet_IT.java
index 6d88cef89..b746dc22b 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollectionWithCostsHigherThanTimesAndFiniteFleet_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollectionWithCostsHigherThanTimesAndFiniteFleet_IT.java
@@ -17,6 +17,16 @@
  */
 package com.graphhopper.jsprit.core.algorithm;
 
+import static org.junit.Assert.assertEquals;
+
+import java.io.BufferedReader;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.Collection;
+
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.box.GreedySchrimpfFactory;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
@@ -27,16 +37,6 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.Solutions;
 import com.graphhopper.jsprit.core.util.VehicleRoutingTransportCostsMatrix;
-import org.junit.Test;
-import org.junit.experimental.categories.Category;
-
-import java.io.BufferedReader;
-import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.io.InputStreamReader;
-import java.util.Collection;
-
-import static org.junit.Assert.assertEquals;
 
 
 public class RefuseCollectionWithCostsHigherThanTimesAndFiniteFleet_IT {
@@ -105,7 +105,7 @@ private void readDemandQuantities(VehicleRoutingProblem.Builder vrpBuilder) thro
             /*
              * build service
 			 */
-            Service service = Service.Builder.newInstance(lineTokens[0]).addSizeDimension(0, Integer.parseInt(lineTokens[1]))
+            Service service = new Service.Builder(lineTokens[0]).addSizeDimension(0, Integer.parseInt(lineTokens[1]))
                 .setLocation(Location.newInstance(lineTokens[0])).build();
             /*
 			 * and add it to problem
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollectionWithCostsHigherThanTimesAndFiniteFleet_withTimeAndDistanceCosts_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollectionWithCostsHigherThanTimesAndFiniteFleet_withTimeAndDistanceCosts_IT.java
index 59586e9ce..193b5604f 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollectionWithCostsHigherThanTimesAndFiniteFleet_withTimeAndDistanceCosts_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollectionWithCostsHigherThanTimesAndFiniteFleet_withTimeAndDistanceCosts_IT.java
@@ -16,6 +16,16 @@
  * limitations under the License.
  */
 package com.graphhopper.jsprit.core.algorithm;
+import static org.junit.Assert.assertEquals;
+
+import java.io.BufferedReader;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.Collection;
+
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.box.GreedySchrimpfFactory;
 import com.graphhopper.jsprit.core.algorithm.termination.IterationWithoutImprovementTermination;
 import com.graphhopper.jsprit.core.problem.Location;
@@ -27,16 +37,6 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.Solutions;
 import com.graphhopper.jsprit.core.util.VehicleRoutingTransportCostsMatrix;
-import org.junit.Test;
-import org.junit.experimental.categories.Category;
-
-import java.io.BufferedReader;
-import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.io.InputStreamReader;
-import java.util.Collection;
-
-import static org.junit.Assert.assertEquals;
 
 
 public class RefuseCollectionWithCostsHigherThanTimesAndFiniteFleet_withTimeAndDistanceCosts_IT {
@@ -105,7 +105,7 @@ private void readDemandQuantities(VehicleRoutingProblem.Builder vrpBuilder) thro
             /*
              * build service
 			 */
-            Service service = Service.Builder.newInstance(lineTokens[0]).addSizeDimension(0, Integer.parseInt(lineTokens[1]))
+            Service service = new Service.Builder(lineTokens[0]).addSizeDimension(0, Integer.parseInt(lineTokens[1]))
                 .setLocation(Location.newInstance(lineTokens[0])).build();
             /*
 			 * and add it to problem
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollection_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollection_IT.java
index fc4d5aabc..33f373f7a 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollection_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollection_IT.java
@@ -18,6 +18,15 @@
 package com.graphhopper.jsprit.core.algorithm;
 
 
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.io.Reader;
+import java.util.Collection;
+
+import org.junit.Assert;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.algorithm.box.SchrimpfFactory;
 import com.graphhopper.jsprit.core.algorithm.termination.IterationWithoutImprovementTermination;
@@ -29,18 +38,8 @@
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
-
 import com.graphhopper.jsprit.core.util.Solutions;
 import com.graphhopper.jsprit.core.util.VehicleRoutingTransportCostsMatrix;
-import org.junit.Assert;
-import org.junit.Test;
-import org.junit.experimental.categories.Category;
-
-import java.io.BufferedReader;
-import java.io.IOException;
-import java.io.InputStreamReader;
-import java.io.Reader;
-import java.util.Collection;
 
 
 public class RefuseCollection_IT {
@@ -228,7 +227,7 @@ private void readDemandQuantitiesAsServices(VehicleRoutingProblem.Builder vrpBui
 			/*
 			 * build service
 			 */
-            Service service = Service.Builder.newInstance(lineTokens[0]).addSizeDimension(0, Integer.parseInt(lineTokens[1]))
+            Service service = new Service.Builder(lineTokens[0]).addSizeDimension(0, Integer.parseInt(lineTokens[1]))
                 .setLocation(Location.newInstance(lineTokens[0])).build();
 			/*
 			 * and add it to problem
@@ -255,7 +254,7 @@ private void readDemandQuantitiesAsPickups(VehicleRoutingProblem.Builder vrpBuil
 			/*
 			 * build service
 			 */
-            Pickup service = Pickup.Builder.newInstance(lineTokens[0]).addSizeDimension(0, Integer.parseInt(lineTokens[1]))
+            Pickup service = new Pickup.Builder(lineTokens[0]).addSizeDimension(0, Integer.parseInt(lineTokens[1]))
                 .setLocation(Location.newInstance(lineTokens[0])).build();
 			/*
 			 * and add it to problem
@@ -278,7 +277,7 @@ private void readDemandQuantitiesAsDeliveries(VehicleRoutingProblem.Builder vrpB
 			/*
 			 * build service
 			 */
-            Delivery service = (Delivery) Delivery.Builder.newInstance(lineTokens[0]).addSizeDimension(0, Integer.parseInt(lineTokens[1]))
+            Delivery service = (Delivery) new Delivery.Builder(lineTokens[0]).addSizeDimension(0, Integer.parseInt(lineTokens[1]))
                 .setLocation(Location.newInstance(lineTokens[0])).build();
 			/*
 			 * and add it to problem
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/SearchStrategyManagerTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/SearchStrategyManagerTest.java
index 92f2817a3..c9e21b48e 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/SearchStrategyManagerTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/SearchStrategyManagerTest.java
@@ -17,21 +17,24 @@
  */
 package com.graphhopper.jsprit.core.algorithm;
 
-import com.graphhopper.jsprit.core.algorithm.acceptor.SolutionAcceptor;
-import com.graphhopper.jsprit.core.algorithm.selector.SolutionSelector;
-import com.graphhopper.jsprit.core.problem.solution.SolutionCostCalculator;
-import com.graphhopper.jsprit.core.util.RandomNumberGeneration;
-import org.junit.Assert;
-import org.junit.Test;
+import static org.hamcrest.CoreMatchers.is;
+import static org.junit.Assert.assertThat;
+import static org.junit.Assert.assertTrue;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.stub;
+import static org.mockito.Mockito.when;
 
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Random;
 
-import static org.hamcrest.CoreMatchers.is;
-import static org.junit.Assert.assertThat;
-import static org.junit.Assert.assertTrue;
-import static org.mockito.Mockito.*;
+import org.junit.Assert;
+import org.junit.Test;
+
+import com.graphhopper.jsprit.core.algorithm.acceptor.SolutionAcceptor;
+import com.graphhopper.jsprit.core.algorithm.selector.SolutionSelector;
+import com.graphhopper.jsprit.core.problem.solution.SolutionCostCalculator;
+import com.graphhopper.jsprit.core.util.RandomNumberGeneration;
 
 
 public class SearchStrategyManagerTest {
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/SearchStrategyTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/SearchStrategyTest.java
index 0e6619426..a69f95d01 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/SearchStrategyTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/SearchStrategyTest.java
@@ -17,21 +17,22 @@
  */
 package com.graphhopper.jsprit.core.algorithm;
 
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Random;
+
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.acceptor.SolutionAcceptor;
 import com.graphhopper.jsprit.core.algorithm.listener.SearchStrategyModuleListener;
 import com.graphhopper.jsprit.core.algorithm.selector.SolutionSelector;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.solution.SolutionCostCalculator;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
-import org.junit.Test;
-
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Random;
-
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
 
 
 public class SearchStrategyTest {
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/SolomonSkills_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/SolomonSkills_IT.java
index 928ac039b..e037f46fb 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/SolomonSkills_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/SolomonSkills_IT.java
@@ -18,6 +18,14 @@
 
 package com.graphhopper.jsprit.core.algorithm;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
+import java.util.Collection;
+
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.problem.Skills;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
@@ -31,12 +39,6 @@
 import com.graphhopper.jsprit.core.util.SolomonReader;
 import com.graphhopper.jsprit.core.util.Solutions;
 import com.graphhopper.jsprit.core.util.TestUtils;
-import org.junit.Test;
-import org.junit.experimental.categories.Category;
-
-import java.util.Collection;
-
-import static org.junit.Assert.*;
 
 /**
  * to test skills with penalty vehicles
@@ -67,7 +69,7 @@ public void itShouldMakeCorrectAssignmentAccordingToSkills() {
         }
         for (Job job : vrp.getJobs().values()) {
             Service service = (Service) job;
-            Service.Builder skillServiceBuilder = Service.Builder.newInstance(service.getId()).setServiceTime(service.getServiceDuration())
+            Service.Builder skillServiceBuilder = new Service.Builder(service.getId()).setServiceTime(service.getServiceDuration())
                 .setLocation(TestUtils.loc(service.getLocation().getId(), service.getLocation().getCoordinate())).setTimeWindow(service.getTimeWindow())
                 .addSizeDimension(0, service.getSize().get(0));
             if (service.getLocation().getCoordinate().getY() < 50) skillServiceBuilder.addRequiredSkill("skill2");
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/Solomon_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/Solomon_IT.java
index 055696f9e..dca532474 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/Solomon_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/Solomon_IT.java
@@ -18,16 +18,16 @@
 
 package com.graphhopper.jsprit.core.algorithm;
 
+import java.util.Collection;
+
+import org.junit.Assert;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.util.SolomonReader;
 import com.graphhopper.jsprit.core.util.Solutions;
-import org.junit.Assert;
-import org.junit.Test;
-import org.junit.experimental.categories.Category;
-
-import java.util.Collection;
 
 /**
  * Created by schroeder on 23.07.14.
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/UnassignedJobListTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/UnassignedJobListTest.java
index ce7eed838..aa21d5b32 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/UnassignedJobListTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/UnassignedJobListTest.java
@@ -18,6 +18,12 @@
 
 package com.graphhopper.jsprit.core.algorithm;
 
+import static org.junit.Assert.assertTrue;
+
+import java.util.Collection;
+
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.box.GreedySchrimpfFactory;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
@@ -26,11 +32,6 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.util.Solutions;
-import org.junit.Test;
-
-import java.util.Collection;
-
-import static org.junit.Assert.assertTrue;
 
 public class UnassignedJobListTest {
 
@@ -38,9 +39,9 @@
     public void job2ShouldBeInBadJobList_dueToTimeWindow() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         builder.addVehicle(VehicleImpl.Builder.newInstance("v1").setEarliestStart(0).setLatestArrival(12).setStartLocation(Location.newInstance(1, 1)).build());
-        Service job1 = Service.Builder.newInstance("job1").setLocation(Location.newInstance(0, 0)).setTimeWindow(TimeWindow.newInstance(0, 12)).setServiceTime(1).build();
+        Service job1 = new Service.Builder("job1").setLocation(Location.newInstance(0, 0)).setTimeWindow(TimeWindow.newInstance(0, 12)).setServiceTime(1).build();
         builder.addJob(job1);
-        Service job2 = Service.Builder.newInstance("job2").setLocation(Location.newInstance(2, 2)).setTimeWindow(TimeWindow.newInstance(12, 24)).setServiceTime(1).build();
+        Service job2 = new Service.Builder("job2").setLocation(Location.newInstance(2, 2)).setTimeWindow(TimeWindow.newInstance(12, 24)).setServiceTime(1).build();
         builder.addJob(job2);
 
         VehicleRoutingProblem vrp = builder.build();
@@ -57,9 +58,9 @@ public void job2ShouldBeInBadJobList_dueToTimeWindow() {
     public void job2ShouldBeInBadJobList_dueToSize() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         builder.addVehicle(VehicleImpl.Builder.newInstance("v1").setEarliestStart(0).setLatestArrival(12).setStartLocation(Location.newInstance(1, 1)).build());
-        Service job1 = Service.Builder.newInstance("job1").setLocation(Location.newInstance(0, 0)).setTimeWindow(TimeWindow.newInstance(0, 12)).setServiceTime(1).build();
+        Service job1 = new Service.Builder("job1").setLocation(Location.newInstance(0, 0)).setTimeWindow(TimeWindow.newInstance(0, 12)).setServiceTime(1).build();
         builder.addJob(job1);
-        Service job2 = Service.Builder.newInstance("job2").setLocation(Location.newInstance(2, 2)).addSizeDimension(0, 10).setTimeWindow(TimeWindow.newInstance(0, 12)).setServiceTime(1).build();
+        Service job2 = new Service.Builder("job2").setLocation(Location.newInstance(2, 2)).addSizeDimension(0, 10).setTimeWindow(TimeWindow.newInstance(0, 12)).setServiceTime(1).build();
         builder.addJob(job2);
 
         VehicleRoutingProblem vrp = builder.build();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/VariableDepartureAndWaitingTime_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/VariableDepartureAndWaitingTime_IT.java
index aac174a7e..8a33b2472 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/VariableDepartureAndWaitingTime_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/VariableDepartureAndWaitingTime_IT.java
@@ -19,6 +19,11 @@
 package com.graphhopper.jsprit.core.algorithm;
 
 
+import static org.junit.Assert.assertEquals;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.analysis.SolutionAnalyser;
@@ -37,10 +42,8 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.util.CostFactory;
 import com.graphhopper.jsprit.core.util.Solutions;
+
 import junit.framework.Assert;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.experimental.categories.Category;
 
 /**
  * Created by schroeder on 22/07/15.
@@ -77,21 +80,21 @@ public VehicleRoutingAlgorithm createAlgorithm(final VehicleRoutingProblem vrp)
                 ConstraintManager constraintManager = new ConstraintManager(vrp, stateManager);
 
                 return Jsprit.Builder.newInstance(vrp)
-                    .addCoreStateAndConstraintStuff(true)
-                    .setStateAndConstraintManager(stateManager, constraintManager)
-                    .setObjectiveFunction(new SolutionCostCalculator() {
-                        @Override
-                        public double getCosts(VehicleRoutingProblemSolution solution) {
-                            SolutionAnalyser sa = new SolutionAnalyser(vrp, solution, new TransportDistance() {
-                                @Override
-                                public double getDistance(Location from, Location to, double departureTime, Vehicle vehicle) {
-                                    return vrp.getTransportCosts().getTransportCost(from, to, 0., null, null);
-                                }
-                            });
-                            return sa.getWaitingTime() + sa.getDistance();
-                        }
-                    })
-                    .buildAlgorithm();
+                                .addCoreStateAndConstraintStuff(true)
+                                .setStateAndConstraintManager(stateManager, constraintManager)
+                                .setObjectiveFunction(new SolutionCostCalculator() {
+                                    @Override
+                                    public double getCosts(VehicleRoutingProblemSolution solution) {
+                                        SolutionAnalyser sa = new SolutionAnalyser(vrp, solution, new TransportDistance() {
+                                            @Override
+                                            public double getDistance(Location from, Location to, double departureTime, Vehicle vehicle) {
+                                                return vrp.getTransportCosts().getTransportCost(from, to, 0., null, null);
+                                            }
+                                        });
+                                        return sa.getWaitingTime() + sa.getDistance();
+                                    }
+                                })
+                                .buildAlgorithm();
             }
         };
     }
@@ -99,30 +102,30 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
     @Test
     public void plainSetupShouldWork() {
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
-        Service s1 = Service.Builder.newInstance("s1").setLocation(Location.newInstance(10, 0)).build();
-        Service s2 = Service.Builder.newInstance("s2").setLocation(Location.newInstance(20, 0)).build();
+        Service s1 = new Service.Builder("s1").setLocation(Location.newInstance(10, 0)).build();
+        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(20, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance()
-            .addJob(s1).addJob(s2).addVehicle(v)
-            .setFleetSize(VehicleRoutingProblem.FleetSize.FINITE)
-            .setRoutingCost(CostFactory.createManhattanCosts())
-            .setActivityCosts(activityCosts)
-            .build();
+                        .addJob(s1).addJob(s2).addVehicle(v)
+                        .setFleetSize(VehicleRoutingProblem.FleetSize.FINITE)
+                        .setRoutingCost(CostFactory.createManhattanCosts())
+                        .setActivityCosts(activityCosts)
+                        .build();
         VehicleRoutingAlgorithm vra = algorithmFactory.createAlgorithm(vrp);
         VehicleRoutingProblemSolution solution = Solutions.bestOf(vra.searchSolutions());
-        Assert.assertEquals(40., solution.getCost());
+        assertEquals(40., solution.getCost(), 0.01d);
     }
 
     @Test
     public void withTimeWindowsShouldWork() {
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
-        Service s1 = Service.Builder.newInstance("s1").setTimeWindow(TimeWindow.newInstance(1010, 1100)).setLocation(Location.newInstance(10, 0)).build();
-        Service s2 = Service.Builder.newInstance("s2").setTimeWindow(TimeWindow.newInstance(1020, 1100)).setLocation(Location.newInstance(20, 0)).build();
+        Service s1 = new Service.Builder("s1").setTimeWindow(TimeWindow.newInstance(1010, 1100)).setLocation(Location.newInstance(10, 0)).build();
+        Service s2 = new Service.Builder("s2").setTimeWindow(TimeWindow.newInstance(1020, 1100)).setLocation(Location.newInstance(20, 0)).build();
         final VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance()
-            .addJob(s1).addJob(s2).addVehicle(v)
-            .setFleetSize(VehicleRoutingProblem.FleetSize.FINITE)
-            .setRoutingCost(CostFactory.createManhattanCosts())
-            .setActivityCosts(activityCosts)
-            .build();
+                        .addJob(s1).addJob(s2).addVehicle(v)
+                        .setFleetSize(VehicleRoutingProblem.FleetSize.FINITE)
+                        .setRoutingCost(CostFactory.createManhattanCosts())
+                        .setActivityCosts(activityCosts)
+                        .build();
         VehicleRoutingAlgorithm vra = algorithmFactory.createAlgorithm(vrp);
         VehicleRoutingProblemSolution solution = Solutions.bestOf(vra.searchSolutions());
         Assert.assertEquals(40. + 1000., solution.getCost());
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/VehicleRoutingAlgorithmTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/VehicleRoutingAlgorithmTest.java
index 1deed4ccb..4ed1b324a 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/VehicleRoutingAlgorithmTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/VehicleRoutingAlgorithmTest.java
@@ -17,18 +17,19 @@
  */
 package com.graphhopper.jsprit.core.algorithm;
 
-import com.graphhopper.jsprit.core.algorithm.listener.IterationStartsListener;
-import com.graphhopper.jsprit.core.algorithm.termination.PrematureAlgorithmTermination;
-import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
-import org.junit.Test;
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
 
 import java.util.Arrays;
 import java.util.Collection;
 
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
+import org.junit.Test;
+
+import com.graphhopper.jsprit.core.algorithm.listener.IterationStartsListener;
+import com.graphhopper.jsprit.core.algorithm.termination.PrematureAlgorithmTermination;
+import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
+import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 
 public class VehicleRoutingAlgorithmTest {
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/acceptor/GreedyAcceptanceTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/acceptor/GreedyAcceptanceTest.java
index c744dfdca..90bc7e423 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/acceptor/GreedyAcceptanceTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/acceptor/GreedyAcceptanceTest.java
@@ -17,18 +17,19 @@
  */
 package com.graphhopper.jsprit.core.algorithm.acceptor;
 
-import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
-import org.junit.Test;
-
-import java.util.ArrayList;
-import java.util.List;
-
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertThat;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
+import java.util.ArrayList;
+import java.util.List;
+
+import org.junit.Test;
+
+import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
+
 
 public class GreedyAcceptanceTest {
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/acceptor/SchrimpfAcceptanceTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/acceptor/SchrimpfAcceptanceTest.java
index 7ff3342be..00972a719 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/acceptor/SchrimpfAcceptanceTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/acceptor/SchrimpfAcceptanceTest.java
@@ -17,19 +17,20 @@
  */
 package com.graphhopper.jsprit.core.algorithm.acceptor;
 
-import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
-import org.junit.Before;
-import org.junit.Test;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
 
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
 
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
+import org.junit.Before;
+import org.junit.Test;
+
+import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
+import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 
 public class SchrimpfAcceptanceTest {
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/box/JspritTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/box/JspritTest.java
index 0454e94cb..980a5eda3 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/box/JspritTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/box/JspritTest.java
@@ -18,6 +18,14 @@
 
 package com.graphhopper.jsprit.core.algorithm.box;
 
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.SearchStrategy;
 import com.graphhopper.jsprit.core.algorithm.VehicleRoutingAlgorithm;
 import com.graphhopper.jsprit.core.algorithm.listener.StrategySelectedListener;
@@ -33,10 +41,8 @@
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.util.RandomNumberGeneration;
-import junit.framework.Assert;
-import org.junit.Test;
 
-import java.util.*;
+import junit.framework.Assert;
 
 /**
  * Created by schroeder on 06/03/15.
@@ -46,7 +52,7 @@
 
     @Test
     public void whenRunningJspritWithSingleCustomer_itShouldWork() {
-        Service s = Service.Builder.newInstance("s1").setLocation(Location.newInstance(1, 1)).build();
+        Service s = new Service.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addVehicle(v).addJob(s).build();
         VehicleRoutingAlgorithm vra = Jsprit.createAlgorithm(vrp);
@@ -76,8 +82,8 @@ private void count(String strategyId) {
 
     @Test
     public void whenActivatingStrat_itShouldBeReflected() {
-        Service s = Service.Builder.newInstance("s1").setLocation(Location.newInstance(1, 1)).build();
-        Service s2 = Service.Builder.newInstance("s2").setLocation(Location.newInstance(1, 2)).build();
+        Service s = new Service.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
+        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(1, 2)).build();
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addVehicle(v).addJob(s2).addJob(s).build();
         VehicleRoutingAlgorithm vra = Jsprit.Builder.newInstance(vrp)
@@ -104,9 +110,9 @@ private void count(String strategyId) {
 
     @Test
     public void whenActivatingStrat_itShouldBeReflectedV2() {
-        Service s = Service.Builder.newInstance("s1").setLocation(Location.newInstance(1, 1)).build();
-        Service s2 = Service.Builder.newInstance("s2").setLocation(Location.newInstance(1, 2)).build();
-        Service s3 = Service.Builder.newInstance("s3").setLocation(Location.newInstance(1, 2)).build();
+        Service s = new Service.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
+        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(1, 2)).build();
+        Service s3 = new Service.Builder("s3").setLocation(Location.newInstance(1, 2)).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(s3).addVehicle(v).addJob(s2).addJob(s).build();
@@ -132,10 +138,10 @@ private void count(String strategyId) {
 
     @Test
     public void test_v4() {
-        Service s = Service.Builder.newInstance("s1").setLocation(Location.newInstance(1, 1)).build();
-        Service s2 = Service.Builder.newInstance("s2").setLocation(Location.newInstance(1, 2)).build();
-        Service s3 = Service.Builder.newInstance("s3").setLocation(Location.newInstance(1, 2)).build();
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance(1, 2)).build();
+        Service s = new Service.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
+        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(1, 2)).build();
+        Service s3 = new Service.Builder("s3").setLocation(Location.newInstance(1, 2)).build();
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance(1, 2)).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(s4).addJob(s3).addVehicle(v).addJob(s2).addJob(s).build();
@@ -162,10 +168,10 @@ private void count(String strategyId) {
 
     @Test
     public void strategyDrawShouldBeReproducible() {
-        Service s = Service.Builder.newInstance("s1").setLocation(Location.newInstance(1, 1)).build();
-        Service s2 = Service.Builder.newInstance("s2").setLocation(Location.newInstance(1, 2)).build();
-        Service s3 = Service.Builder.newInstance("s3").setLocation(Location.newInstance(1, 2)).build();
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance(1, 2)).build();
+        Service s = new Service.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
+        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(1, 2)).build();
+        Service s3 = new Service.Builder("s3").setLocation(Location.newInstance(1, 2)).build();
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance(1, 2)).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(s4).addJob(s3).addVehicle(v).addJob(s2).addJob(s).build();
@@ -207,10 +213,10 @@ public void informSelectedStrategy(SearchStrategy.DiscoveredSolution discoveredS
 
     @Test
     public void strategyDrawShouldBeReproducibleV2() {
-        Service s = Service.Builder.newInstance("s1").setLocation(Location.newInstance(1, 1)).build();
-        Service s2 = Service.Builder.newInstance("s2").setLocation(Location.newInstance(1, 2)).build();
-        Service s3 = Service.Builder.newInstance("s3").setLocation(Location.newInstance(1, 2)).build();
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance(1, 2)).build();
+        Service s = new Service.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
+        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(1, 2)).build();
+        Service s3 = new Service.Builder("s3").setLocation(Location.newInstance(1, 2)).build();
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance(1, 2)).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(s4).addJob(s3).addVehicle(v).addJob(s2).addJob(s).build();
@@ -252,10 +258,10 @@ public void informSelectedStrategy(SearchStrategy.DiscoveredSolution discoveredS
 
     @Test
     public void ruinedJobsShouldBeReproducible() {
-        Service s = Service.Builder.newInstance("s1").setLocation(Location.newInstance(1, 1)).build();
-        Service s2 = Service.Builder.newInstance("s2").setLocation(Location.newInstance(1, 2)).build();
-        Service s3 = Service.Builder.newInstance("s3").setLocation(Location.newInstance(1, 2)).build();
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance(1, 2)).build();
+        Service s = new Service.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
+        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(1, 2)).build();
+        Service s3 = new Service.Builder("s3").setLocation(Location.newInstance(1, 2)).build();
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance(1, 2)).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(s4).addJob(s3).addVehicle(v).addJob(s2).addJob(s).build();
@@ -318,10 +324,10 @@ public void removed(Job job, VehicleRoute fromRoute) {
 
     @Test
     public void ruinedJobsShouldBeReproducibleV2() {
-        Service s = Service.Builder.newInstance("s1").setLocation(Location.newInstance(1, 1)).build();
-        Service s2 = Service.Builder.newInstance("s2").setLocation(Location.newInstance(1, 2)).build();
-        Service s3 = Service.Builder.newInstance("s3").setLocation(Location.newInstance(1, 2)).build();
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance(1, 2)).build();
+        Service s = new Service.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
+        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(1, 2)).build();
+        Service s3 = new Service.Builder("s3").setLocation(Location.newInstance(1, 2)).build();
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance(1, 2)).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(s4).addJob(s3).addVehicle(v).addJob(s2).addJob(s).build();
@@ -378,10 +384,10 @@ public void removed(Job job, VehicleRoute fromRoute) {
 
     @Test
     public void insertionShouldBeReproducible() {
-        Service s = Service.Builder.newInstance("s1").setLocation(Location.newInstance(1, 1)).build();
-        Service s2 = Service.Builder.newInstance("s2").setLocation(Location.newInstance(1, 2)).build();
-        Service s3 = Service.Builder.newInstance("s3").setLocation(Location.newInstance(1, 2)).build();
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance(1, 2)).build();
+        Service s = new Service.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
+        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(1, 2)).build();
+        Service s3 = new Service.Builder("s3").setLocation(Location.newInstance(1, 2)).build();
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance(1, 2)).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(s4).addJob(s3).addVehicle(v).addJob(s2).addJob(s).build();
@@ -419,10 +425,10 @@ public void informJobInserted(Job job2insert, VehicleRoute inRoute, double addit
 
     @Test
     public void insertionShouldBeReproducibleV2() {
-        Service s = Service.Builder.newInstance("s1").setLocation(Location.newInstance(1, 1)).build();
-        Service s2 = Service.Builder.newInstance("s2").setLocation(Location.newInstance(1, 1)).build();
-        Service s3 = Service.Builder.newInstance("s3").setLocation(Location.newInstance(1, 3)).build();
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance(1, 4)).build();
+        Service s = new Service.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
+        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(1, 1)).build();
+        Service s3 = new Service.Builder("s3").setLocation(Location.newInstance(1, 3)).build();
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance(1, 4)).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().setFleetSize(VehicleRoutingProblem.FleetSize.FINITE).addJob(s4).addJob(s3).addVehicle(v).addJob(s2).addJob(s).build();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/CalcVehicleTypeDependentServiceInsertionTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/CalcVehicleTypeDependentServiceInsertionTest.java
index 109d85458..5148e0dc0 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/CalcVehicleTypeDependentServiceInsertionTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/CalcVehicleTypeDependentServiceInsertionTest.java
@@ -17,23 +17,28 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
+import static org.hamcrest.CoreMatchers.is;
+import static org.junit.Assert.assertThat;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+import java.util.Arrays;
+import java.util.Collections;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Service;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
-import com.graphhopper.jsprit.core.problem.vehicle.*;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.Arrays;
-import java.util.Collections;
-
-import static org.hamcrest.CoreMatchers.is;
-import static org.junit.Assert.assertThat;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
+import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleFleetManager;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 
 
 public class CalcVehicleTypeDependentServiceInsertionTest {
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ConfigureFixCostCalculatorTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ConfigureFixCostCalculatorTest.java
index 5ed06ce64..9e0b8a29b 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ConfigureFixCostCalculatorTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ConfigureFixCostCalculatorTest.java
@@ -18,23 +18,22 @@
 
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
+import static org.mockito.Mockito.mock;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
-import com.graphhopper.jsprit.core.problem.AbstractJob;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.job.Service;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 
-import org.junit.Assert;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import static org.mockito.Mockito.mock;
-
 /**
  * Created by schroeder on 15/08/16.
  */
@@ -46,7 +45,7 @@
     public void before(){
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         for(int i=0;i<100;i++){
-            Service service = Service.Builder.newInstance("" + i).setLocation(Location.newInstance(0)).build();
+            Service service = new Service.Builder("" + i).setLocation(Location.newInstance(0)).build();
             vrpBuilder.addJob(service);
         }
         vrp = vrpBuilder.build();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/JobInsertionConsideringFixCostsCalculatorTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/JobInsertionConsideringFixCostsCalculatorTest.java
index f33679793..02be422dc 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/JobInsertionConsideringFixCostsCalculatorTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/JobInsertionConsideringFixCostsCalculatorTest.java
@@ -17,6 +17,13 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.state.InternalStates;
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.job.Job;
@@ -25,12 +32,6 @@
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
-import org.junit.Before;
-import org.junit.Test;
-
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
 
 public class JobInsertionConsideringFixCostsCalculatorTest {
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionTest.java
index fbdf90082..7c6df6714 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionTest.java
@@ -18,6 +18,11 @@
 
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
+import java.util.ArrayList;
+import java.util.Collection;
+
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.VehicleRoutingAlgorithm;
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.BeforeJobInsertionListener;
@@ -37,22 +42,25 @@
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.ActivityVisitor;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-import com.graphhopper.jsprit.core.problem.vehicle.*;
+import com.graphhopper.jsprit.core.problem.vehicle.FiniteFleetManagerFactory;
+import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleFleetManager;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.Coordinate;
 import com.graphhopper.jsprit.core.util.Solutions;
-import junit.framework.Assert;
-import org.junit.Test;
 
-import java.util.ArrayList;
-import java.util.Collection;
+import junit.framework.Assert;
 
 public class RegretInsertionTest {
 
     @Test
     public void noRoutesShouldBeCorrect() {
-        Service s1 = Service.Builder.newInstance("s1").setLocation(Location.newInstance(0, 10)).build();
-        Service s2 = Service.Builder.newInstance("s2").setLocation(Location.newInstance(0, 5)).build();
+        Service s1 = new Service.Builder("s1").setLocation(Location.newInstance(0, 10)).build();
+        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(0, 5)).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(s1).addJob(s2).addVehicle(v).build();
@@ -68,8 +76,8 @@ public void noRoutesShouldBeCorrect() {
 
     @Test
     public void noJobsInRouteShouldBeCorrect() {
-        Service s1 = Service.Builder.newInstance("s1").setLocation(Location.newInstance(0, 10)).build();
-        Service s2 = Service.Builder.newInstance("s2").setLocation(Location.newInstance(0, 5)).build();
+        Service s1 = new Service.Builder("s1").setLocation(Location.newInstance(0, 10)).build();
+        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(0, 5)).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(s1).addJob(s2).addVehicle(v).build();
@@ -85,8 +93,8 @@ public void noJobsInRouteShouldBeCorrect() {
 
     @Test
     public void s1ShouldBeAddedFirst() {
-        Service s1 = Service.Builder.newInstance("s1").setLocation(Location.newInstance(0, 10)).build();
-        Service s2 = Service.Builder.newInstance("s2").setLocation(Location.newInstance(0, 5)).build();
+        Service s1 = new Service.Builder("s1").setLocation(Location.newInstance(0, 10)).build();
+        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(0, 5)).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         final VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(s1).addJob(s2).addVehicle(v).build();
@@ -104,8 +112,8 @@ public void s1ShouldBeAddedFirst() {
 
     @Test
     public void solutionWithFastRegretMustBeCorrect() {
-        Service s1 = Service.Builder.newInstance("s1").setLocation(Location.newInstance(0, 10)).build();
-        Service s2 = Service.Builder.newInstance("s2").setLocation(Location.newInstance(0, -10)).build();
+        Service s1 = new Service.Builder("s1").setLocation(Location.newInstance(0, 10)).build();
+        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(0, -10)).build();
 
         VehicleImpl v1 = VehicleImpl.Builder.newInstance("v1").setStartLocation(Location.newInstance(0, 5)).build();
         VehicleImpl v2 = VehicleImpl.Builder.newInstance("v2").setStartLocation(Location.newInstance(0, -5)).build();
@@ -148,10 +156,10 @@ public void begin(VehicleRoute route) {
 
         @Override
         public void visit(TourActivity activity) {
-            if(((TourActivity.JobActivity)activity).getJob().getId().equals("s1")){
+            if(((JobActivity)activity).getJob().getId().equals("s1")){
                 stateManager.putProblemState(job1AssignedId,Boolean.class,true);
             }
-            if(((TourActivity.JobActivity)activity).getJob().getId().equals("s2")){
+            if(((JobActivity)activity).getJob().getId().equals("s2")){
                 stateManager.putProblemState(job2AssignedId,Boolean.class,true);
             }
 
@@ -205,10 +213,10 @@ public boolean fulfilled(JobInsertionContext insertionContext) {
 
     @Test
     public void solutionWithConstraintAndWithFastRegretMustBeCorrect() {
-        Service s1 = Service.Builder.newInstance("s1").addSizeDimension(0,1).setLocation(Location.newInstance(0, 10)).build();
-        Service s2 = Service.Builder.newInstance("s2").addSizeDimension(0,1).setLocation(Location.newInstance(0, -10)).build();
-        Service s3 = Service.Builder.newInstance("s3").addSizeDimension(0,1).setLocation(Location.newInstance(0, -11)).build();
-        Service s4 = Service.Builder.newInstance("s4").addSizeDimension(0,1).setLocation(Location.newInstance(0, 11)).build();
+        Service s1 = new Service.Builder("s1").addSizeDimension(0,1).setLocation(Location.newInstance(0, 10)).build();
+        Service s2 = new Service.Builder("s2").addSizeDimension(0,1).setLocation(Location.newInstance(0, -10)).build();
+        Service s3 = new Service.Builder("s3").addSizeDimension(0,1).setLocation(Location.newInstance(0, -11)).build();
+        Service s4 = new Service.Builder("s4").addSizeDimension(0,1).setLocation(Location.newInstance(0, 11)).build();
 
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0,2).build();
         VehicleImpl v1 = VehicleImpl.Builder.newInstance("v1").setType(type).setStartLocation(Location.newInstance(0, 10)).build();
@@ -253,10 +261,10 @@ public void solutionWithConstraintAndWithFastRegretMustBeCorrect() {
 
     @Test
     public void solutionWithConstraintAndWithFastRegretConcurrentMustBeCorrect() {
-        Service s1 = Service.Builder.newInstance("s1").addSizeDimension(0,1).setLocation(Location.newInstance(0, 10)).build();
-        Service s2 = Service.Builder.newInstance("s2").addSizeDimension(0,1).setLocation(Location.newInstance(0, -10)).build();
-        Service s3 = Service.Builder.newInstance("s3").addSizeDimension(0,1).setLocation(Location.newInstance(0, -11)).build();
-        Service s4 = Service.Builder.newInstance("s4").addSizeDimension(0,1).setLocation(Location.newInstance(0, 11)).build();
+        Service s1 = new Service.Builder("s1").addSizeDimension(0,1).setLocation(Location.newInstance(0, 10)).build();
+        Service s2 = new Service.Builder("s2").addSizeDimension(0,1).setLocation(Location.newInstance(0, -10)).build();
+        Service s3 = new Service.Builder("s3").addSizeDimension(0,1).setLocation(Location.newInstance(0, -11)).build();
+        Service s4 = new Service.Builder("s4").addSizeDimension(0,1).setLocation(Location.newInstance(0, 11)).build();
 
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0,2).build();
         VehicleImpl v1 = VehicleImpl.Builder.newInstance("v1").setType(type).setStartLocation(Location.newInstance(0, 10)).build();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ServiceInsertionAndLoadConstraintsTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ServiceInsertionAndLoadConstraintsTest.java
index 5a1a34682..59a1532d0 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ServiceInsertionAndLoadConstraintsTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ServiceInsertionAndLoadConstraintsTest.java
@@ -17,9 +17,17 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Mockito.mock;
+
+import java.util.Arrays;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionListeners;
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
-import com.graphhopper.jsprit.core.problem.AbstractActivity;
+import com.graphhopper.jsprit.core.problem.CopyJobActivityFactory;
 import com.graphhopper.jsprit.core.problem.JobActivityFactory;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
@@ -31,7 +39,6 @@
 import com.graphhopper.jsprit.core.problem.driver.Driver;
 import com.graphhopper.jsprit.core.problem.driver.DriverImpl;
 import com.graphhopper.jsprit.core.problem.job.Delivery;
-import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.job.Pickup;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
@@ -43,14 +50,6 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.CostFactory;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.Arrays;
-import java.util.List;
-
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.mock;
 
 
 public class ServiceInsertionAndLoadConstraintsTest {
@@ -114,8 +113,8 @@ private void createInsertionCalculator(HardRouteConstraint hardRouteLevelConstra
 
     @Test
     public void whenInsertingServiceWhileNoCapIsAvailable_itMustReturnTheCorrectInsertionIndex() {
-        Delivery delivery = (Delivery) Delivery.Builder.newInstance("del").addSizeDimension(0, 41).setLocation(Location.newInstance("10,10")).build();
-        Pickup pickup = (Pickup) Pickup.Builder.newInstance("pick").addSizeDimension(0, 15).setLocation(Location.newInstance("0,10")).build();
+        Delivery delivery = new Delivery.Builder("del").addSizeDimension(0, 41).setLocation(Location.newInstance("10,10")).build();
+        Pickup pickup = new Pickup.Builder("pick").addSizeDimension(0, 15).setLocation(Location.newInstance("0,10")).build();
 
         VehicleType type = VehicleTypeImpl.Builder.newInstance("t").addCapacityDimension(0, 50).setCostPerDistance(1).build();
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance("0,0")).setType(type).build();
@@ -128,12 +127,7 @@ public void whenInsertingServiceWhileNoCapIsAvailable_itMustReturnTheCorrectInse
         Inserter inserter = new Inserter(new InsertionListeners(), vrp);
         inserter.insertJob(delivery, new InsertionData(0, 0, 0, vehicle, null), route);
 
-        JobActivityFactory activityFactory = new JobActivityFactory() {
-            @Override
-            public List<AbstractActivity> createActivities(Job job) {
-                return vrp.copyAndGetActivities(job);
-            }
-        };
+        JobActivityFactory activityFactory = new CopyJobActivityFactory();
 
         StateManager stateManager = new StateManager(vrp);
         stateManager.updateLoadStates();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ShipmentInsertionCalculatorTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ShipmentInsertionCalculatorTest.java
index 70dd2ee3f..edac630de 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ShipmentInsertionCalculatorTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ShipmentInsertionCalculatorTest.java
@@ -17,9 +17,20 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionListeners;
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
-import com.graphhopper.jsprit.core.problem.AbstractActivity;
 import com.graphhopper.jsprit.core.problem.JobActivityFactory;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
@@ -36,9 +47,10 @@
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverShipment;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupService;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupShipment;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverShipmentDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupServiceDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupShipmentDEPRECATED;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.state.RouteAndActivityStateGetter;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
@@ -46,17 +58,6 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.CostFactory;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
 
 
 public class ShipmentInsertionCalculatorTest {
@@ -115,9 +116,9 @@ public void whenCalculatingInsertionCostsOfShipment_itShouldReturnCorrectCostVal
         Shipment shipment = Shipment.Builder.newInstance("s").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,10").build()).setDeliveryLocation(Location.newInstance("10,0")).build();
         VehicleRoute route = VehicleRoute.emptyRoute();
         JobActivityFactory activityFactory = mock(JobActivityFactory.class);
-        List<AbstractActivity> activities = new ArrayList<AbstractActivity>();
-        activities.add(new PickupShipment(shipment));
-        activities.add(new DeliverShipment(shipment));
+        List<JobActivity> activities = new ArrayList<>();
+        activities.add(new PickupShipmentDEPRECATED(shipment));
+        activities.add(new DeliverShipmentDEPRECATED(shipment));
         when(activityFactory.createActivities(shipment)).thenReturn(activities);
         insertionCalculator.setJobActivityFactory(activityFactory);
         InsertionData iData = insertionCalculator.getInsertionData(route, shipment, vehicle, 0.0, null, Double.MAX_VALUE);
@@ -133,9 +134,9 @@ public void whenCalculatingInsertionIntoExistingRoute_itShouldReturnCorrectCosts
         new Inserter(new InsertionListeners(), vehicleRoutingProblem).insertJob(shipment, new InsertionData(0, 0, 0, vehicle, null), route);
 
         JobActivityFactory activityFactory = mock(JobActivityFactory.class);
-        List<AbstractActivity> activities = new ArrayList<AbstractActivity>();
-        activities.add(new PickupShipment(shipment2));
-        activities.add(new DeliverShipment(shipment2));
+        List<JobActivity> activities = new ArrayList<JobActivity>();
+        activities.add(new PickupShipmentDEPRECATED(shipment2));
+        activities.add(new DeliverShipmentDEPRECATED(shipment2));
         when(activityFactory.createActivities(shipment2)).thenReturn(activities);
         insertionCalculator.setJobActivityFactory(activityFactory);
 
@@ -145,10 +146,10 @@ public void whenCalculatingInsertionIntoExistingRoute_itShouldReturnCorrectCosts
         assertEquals(2, iData.getDeliveryInsertionIndex());
     }
 
-    private List<AbstractActivity> getTourActivities(Shipment shipment) {
-        List<AbstractActivity> acts = new ArrayList<AbstractActivity>();
-        PickupShipment pick = new PickupShipment(shipment);
-        DeliverShipment del = new DeliverShipment(shipment);
+    private List<JobActivity> getTourActivities(Shipment shipment) {
+        List<JobActivity> acts = new ArrayList<JobActivity>();
+        PickupShipmentDEPRECATED pick = new PickupShipmentDEPRECATED(shipment);
+        DeliverShipmentDEPRECATED del = new DeliverShipmentDEPRECATED(shipment);
         acts.add(pick);
         acts.add(del);
         return acts;
@@ -171,9 +172,9 @@ public boolean fulfilled(JobInsertionContext insertionContext) {
         });
 
         JobActivityFactory activityFactory = mock(JobActivityFactory.class);
-        List<AbstractActivity> activities = new ArrayList<AbstractActivity>();
-        activities.add(new PickupShipment(shipment2));
-        activities.add(new DeliverShipment(shipment2));
+        List<JobActivity> activities = new ArrayList<JobActivity>();
+        activities.add(new PickupShipmentDEPRECATED(shipment2));
+        activities.add(new DeliverShipmentDEPRECATED(shipment2));
         when(activityFactory.createActivities(shipment2)).thenReturn(activities);
         insertionCalculator.setJobActivityFactory(activityFactory);
 
@@ -197,9 +198,9 @@ public void whenInsertingThirdShipment_itShouldCalcCorrectVal() {
         inserter.insertJob(shipment2, new InsertionData(0, 1, 2, vehicle, null), route);
 
         JobActivityFactory activityFactory = mock(JobActivityFactory.class);
-        List<AbstractActivity> activities = new ArrayList<AbstractActivity>();
-        activities.add(new PickupShipment(shipment3));
-        activities.add(new DeliverShipment(shipment3));
+        List<JobActivity> activities = new ArrayList<JobActivity>();
+        activities.add(new PickupShipmentDEPRECATED(shipment3));
+        activities.add(new DeliverShipmentDEPRECATED(shipment3));
         when(activityFactory.createActivities(shipment3)).thenReturn(activities);
         insertionCalculator.setJobActivityFactory(activityFactory);
 
@@ -222,9 +223,9 @@ public void whenInsertingThirdShipment_itShouldCalcCorrectVal2() {
         inserter.insertJob(shipment2, new InsertionData(0, 1, 2, vehicle, null), route);
 
         JobActivityFactory activityFactory = mock(JobActivityFactory.class);
-        List<AbstractActivity> activities = new ArrayList<AbstractActivity>();
-        activities.add(new PickupShipment(shipment3));
-        activities.add(new DeliverShipment(shipment3));
+        List<JobActivity> activities = new ArrayList<JobActivity>();
+        activities.add(new PickupShipmentDEPRECATED(shipment3));
+        activities.add(new DeliverShipmentDEPRECATED(shipment3));
         when(activityFactory.createActivities(shipment3)).thenReturn(activities);
         insertionCalculator.setJobActivityFactory(activityFactory);
 
@@ -260,7 +261,7 @@ public void whenInstertingShipmentWithLoadConstraintWhereCapIsNotSufficient_capC
         constraintManager.addConstraint(new ShipmentPickupsFirstConstraint(), ConstraintManager.Priority.CRITICAL);
 
         ShipmentInsertionCalculator insertionCalculator = new ShipmentInsertionCalculator(routingCosts, activityCosts,
-            activityInsertionCostsCalculator, constraintManager);
+                        activityInsertionCostsCalculator, constraintManager);
         insertionCalculator.setJobActivityFactory(vrp.getJobActivityFactory());
 
         InsertionData iData = insertionCalculator.getInsertionData(route, shipment3, vehicle, 0.0, DriverImpl.noDriver(), Double.MAX_VALUE);
@@ -300,18 +301,18 @@ public void whenInsertingServiceWhileNoCapIsAvailable_itMustReturnNoInsertionDat
         switcher.put(Service.class, serviceInsertionCalc);
         switcher.put(Shipment.class, insertionCalculator);
 
-//		Service service = Service.Builder.newInstance("pick", 1).setLocationId("5,5").build();
-        Pickup service = (Pickup) Pickup.Builder.newInstance("pick").addSizeDimension(0, 1).setLocation(Location.newInstance("5,5")).build();
+        //		Service service = new Service.Builder("pick", 1).setLocationId("5,5").build();
+        Pickup service = new Pickup.Builder("pick").addSizeDimension(0, 1).setLocation(Location.newInstance("5,5")).build();
 
         JobActivityFactory activityFactory = mock(JobActivityFactory.class);
-        List<AbstractActivity> activities = new ArrayList<AbstractActivity>();
-        activities.add(new PickupService(service));
+        List<JobActivity> activities = new ArrayList<>();
+        activities.add(new PickupServiceDEPRECATED(service));
         when(activityFactory.createActivities(service)).thenReturn(activities);
         insertionCalculator.setJobActivityFactory(activityFactory);
         serviceInsertionCalc.setJobActivityFactory(activityFactory);
 
         InsertionData iData = switcher.getInsertionData(route, service, vehicle, 0, DriverImpl.noDriver(), Double.MAX_VALUE);
-//		routeActVisitor.visit(route);
+        //		routeActVisitor.visit(route);
 
         assertEquals(3, iData.getDeliveryInsertionIndex());
     }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestAuxilliaryCostCalculator.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestAuxilliaryCostCalculator.java
index 674a7851a..b3967499f 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestAuxilliaryCostCalculator.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestAuxilliaryCostCalculator.java
@@ -17,20 +17,21 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+import java.util.Arrays;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingActivityCosts;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.End;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.Arrays;
-
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
 
 public class TestAuxilliaryCostCalculator {
 
@@ -79,7 +80,7 @@ public void whenRouteIsClosed_itCalculatesCostUpToEnd_v1() {
     public void whenRouteIsClosed_itCalculatesCostUpToEnd_v2() {
         TourActivity prevAct = mock(TourActivity.class);
         when(prevAct.getLocation()).thenReturn(loc("i"));
-        End nextAct = new End("j", 0.0, 0.0);
+        End nextAct = End.newInstance("j", 0.0, 0.0);
         TourActivity newAct = mock(TourActivity.class);
         when(newAct.getLocation()).thenReturn(loc("k"));
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestCalculatesServiceInsertion.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestCalculatesServiceInsertion.java
index e6a7815a5..eb2c8e5df 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestCalculatesServiceInsertion.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestCalculatesServiceInsertion.java
@@ -17,9 +17,20 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Mockito.mock;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.Map;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
-import com.graphhopper.jsprit.core.problem.AbstractActivity;
-import com.graphhopper.jsprit.core.problem.JobActivityFactory;
+import com.graphhopper.jsprit.core.problem.CopyJobActivityFactory;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
@@ -41,13 +52,6 @@
 import com.graphhopper.jsprit.core.util.EuclideanDistanceCalculator;
 import com.graphhopper.jsprit.core.util.Locations;
 import com.graphhopper.jsprit.core.util.ManhattanDistanceCalculator;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.*;
-
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.mock;
 
 
 public class TestCalculatesServiceInsertion {
@@ -90,7 +94,7 @@ public Coordinate getCoord(String id) {
                 //assume: locationId="x,y"
                 String[] splitted = id.split(",");
                 return Coordinate.newInstance(Double.parseDouble(splitted[0]),
-                    Double.parseDouble(splitted[1]));
+                        Double.parseDouble(splitted[1]));
             }
 
         };
@@ -108,9 +112,9 @@ public double getTransportCost(Location from, Location to, double departureTime,
         };
 
 
-        first = Service.Builder.newInstance("1").addSizeDimension(0, 0).setLocation(Location.newInstance("0,10")).setTimeWindow(TimeWindow.newInstance(0.0, 100.0)).build();
-        second = Service.Builder.newInstance("2").addSizeDimension(0, 0).setLocation(Location.newInstance("10,10")).setTimeWindow(TimeWindow.newInstance(0.0, 100.0)).build();
-        third = Service.Builder.newInstance("3").addSizeDimension(0, 0).setLocation(Location.newInstance("10,0")).setTimeWindow(TimeWindow.newInstance(0.0, 100.0)).build();
+        first = new Service.Builder("1").addSizeDimension(0, 0).setLocation(Location.newInstance("0,10")).setTimeWindow(TimeWindow.newInstance(0.0, 100.0)).build();
+        second = new Service.Builder("2").addSizeDimension(0, 0).setLocation(Location.newInstance("10,10")).setTimeWindow(TimeWindow.newInstance(0.0, 100.0)).build();
+        third = new Service.Builder("3").addSizeDimension(0, 0).setLocation(Location.newInstance("10,0")).setTimeWindow(TimeWindow.newInstance(0.0, 100.0)).build();
 
         Collection<Job> jobs = new ArrayList<Job>();
         jobs.add(first);
@@ -118,7 +122,7 @@ public double getTransportCost(Location from, Location to, double departureTime,
         jobs.add(second);
 
         vrp = VehicleRoutingProblem.Builder.newInstance().addAllJobs(jobs)
-            .addVehicle(vehicle).setRoutingCost(costs).build();
+                .addVehicle(vehicle).setRoutingCost(costs).build();
 
         states = new StateManager(vrp);
         states.updateLoadStates();
@@ -132,12 +136,7 @@ public double getTransportCost(Location from, Location to, double departureTime,
         VehicleRoutingActivityCosts actCosts = mock(VehicleRoutingActivityCosts.class);
 
         serviceInsertion = new ServiceInsertionCalculator(costs, vrp.getActivityCosts(), new LocalActivityInsertionCostsCalculator(costs, actCosts, states), cManager);
-        serviceInsertion.setJobActivityFactory(new JobActivityFactory() {
-            @Override
-            public List<AbstractActivity> createActivities(Job job) {
-                return vrp.copyAndGetActivities(job);
-            }
-        });
+        serviceInsertion.setJobActivityFactory(new CopyJobActivityFactory());
     }
 
     @Test
@@ -206,7 +205,7 @@ public void whenInsertingASecondJobWithANewVehicle_itCalculatesLocalMarginalCost
     public void whenInsertingJobAndCurrRouteIsEmpty_accessEggressCalcShouldReturnZero() {
         VehicleRoute route = VehicleRoute.Builder.newInstance(VehicleImpl.createNoVehicle(), DriverImpl.noDriver()).build();
         AdditionalAccessEgressCalculator accessEgressCalc = new AdditionalAccessEgressCalculator(costs);
-        Job job = Service.Builder.newInstance("1").addSizeDimension(0, 0).setLocation(Location.newInstance("1")).setTimeWindow(TimeWindow.newInstance(0.0, 100.0)).build();
+        Job job = new Service.Builder("1").addSizeDimension(0, 0).setLocation(Location.newInstance("1")).setTimeWindow(TimeWindow.newInstance(0.0, 100.0)).build();
         JobInsertionContext iContex = new JobInsertionContext(route, job, newVehicle, mock(Driver.class), 0.0);
         assertEquals(0.0, accessEgressCalc.getCosts(iContex), 0.01);
     }
@@ -214,8 +213,8 @@ public void whenInsertingJobAndCurrRouteIsEmpty_accessEggressCalcShouldReturnZer
     @Test
     public void whenInsertingJobAndCurrRouteAndVehicleHaveTheSameLocation_accessEggressCalcShouldReturnZero() {
         VehicleRoute route = VehicleRoute.Builder.newInstance(newVehicle, DriverImpl.noDriver())
-            .addService(first)
-            .build();
+                .addService(first)
+                .build();
 
         AdditionalAccessEgressCalculator accessEgressCalc = new AdditionalAccessEgressCalculator(costs);
         JobInsertionContext iContex = new JobInsertionContext(route, first, newVehicle, mock(Driver.class), 0.0);
@@ -244,13 +243,13 @@ public double getTransportCost(Location from, Location to, double departureTime,
         Vehicle oldVehicle = VehicleImpl.Builder.newInstance("oldV").setStartLocation(Location.newInstance("oldV")).build();
 
         VehicleRoute route = VehicleRoute.Builder.newInstance(oldVehicle, DriverImpl.noDriver())
-            .addService(Service.Builder.newInstance("service").addSizeDimension(0, 0).setLocation(Location.newInstance("service")).build())
-            .build();
+                .addService(new Service.Builder("service").addSizeDimension(0, 0).setLocation(Location.newInstance("service")).build())
+                .build();
 
         Vehicle newVehicle = VehicleImpl.Builder.newInstance("newV").setStartLocation(Location.newInstance("newV")).build();
 
         AdditionalAccessEgressCalculator accessEgressCalc = new AdditionalAccessEgressCalculator(routingCosts);
-        Job job = Service.Builder.newInstance("service2").addSizeDimension(0, 0).setLocation(Location.newInstance("service")).build();
+        Job job = new Service.Builder("service2").addSizeDimension(0, 0).setLocation(Location.newInstance("service")).build();
         JobInsertionContext iContex = new JobInsertionContext(route, job, newVehicle, mock(Driver.class), 0.0);
         assertEquals(8.0, accessEgressCalc.getCosts(iContex), 0.01);
     }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestCalculatesServiceInsertionOnRouteLevel.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestCalculatesServiceInsertionOnRouteLevel.java
index 23f41f206..a2ec717e9 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestCalculatesServiceInsertionOnRouteLevel.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestCalculatesServiceInsertionOnRouteLevel.java
@@ -17,10 +17,23 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Mockito.mock;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.ExampleActivityCostFunction;
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.algorithm.state.UpdateVariableCosts;
-import com.graphhopper.jsprit.core.problem.*;
+import com.graphhopper.jsprit.core.problem.AbstractVehicle;
+import com.graphhopper.jsprit.core.problem.CopyJobActivityFactory;
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
 import com.graphhopper.jsprit.core.problem.cost.AbstractForwardVehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
@@ -36,16 +49,6 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.CostFactory;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.List;
-
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.mock;
 
 
 public class TestCalculatesServiceInsertionOnRouteLevel {
@@ -93,15 +96,17 @@ public double getTransportTime(Location from, Location to, double departureTime,
             @Override
             public double getTransportCost(Location from, Location to, double departureTime, Driver driver, Vehicle vehicle) {
                 double tpCosts = routingCosts.getTransportCost(from, to, departureTime, driver, vehicle);
-                if (vehicle.getId().equals("v1")) return tpCosts;
+                if (vehicle.getId().equals("v1")) {
+                    return tpCosts;
+                }
                 return 2. * tpCosts;
             }
 
         };
 
-        first = Service.Builder.newInstance("1").setLocation(Location.newInstance("0,10")).setTimeWindow(TimeWindow.newInstance(0.0, 100.0)).build();
-        second = Service.Builder.newInstance("3").setLocation(Location.newInstance("10,0")).setTimeWindow(TimeWindow.newInstance(0.0, 100.0)).build();
-        third = Service.Builder.newInstance("2").setLocation(Location.newInstance("10,10")).setTimeWindow(TimeWindow.newInstance(0.0, 100.0)).build();
+        first = new Service.Builder("1").setLocation(Location.newInstance("0,10")).setTimeWindow(TimeWindow.newInstance(0.0, 100.0)).build();
+        second = new Service.Builder("3").setLocation(Location.newInstance("10,0")).setTimeWindow(TimeWindow.newInstance(0.0, 100.0)).build();
+        third = new Service.Builder("2").setLocation(Location.newInstance("10,10")).setTimeWindow(TimeWindow.newInstance(0.0, 100.0)).build();
         Collection<Job> jobs = new ArrayList<Job>();
         jobs.add(first);
         jobs.add(second);
@@ -124,12 +129,7 @@ public double getTransportCost(Location from, Location to, double departureTime,
         serviceInsertion = new ServiceInsertionOnRouteLevelCalculator(costs, activityCosts, actInsertionCostCalculator, cManager, cManager);
         serviceInsertion.setNuOfActsForwardLooking(4);
         serviceInsertion.setStates(states);
-        serviceInsertion.setJobActivityFactory(new JobActivityFactory() {
-            @Override
-            public List<AbstractActivity> createActivities(Job job) {
-                return vrp.copyAndGetActivities(job);
-            }
-        });
+        serviceInsertion.setJobActivityFactory(new CopyJobActivityFactory());
 
     }
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestComparator.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestComparator.java
index d3eec4dc9..b90122e88 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestComparator.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestComparator.java
@@ -18,16 +18,17 @@
 
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
-import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
-import org.junit.Test;
-
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Comparator;
 import java.util.List;
 
+import org.junit.Test;
+
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.job.Job;
+import com.graphhopper.jsprit.core.problem.job.Service;
+
 /**
  * Created by schroeder on 24/05/16.
  */
@@ -35,13 +36,13 @@
 
     @Test
     public void test(){
-        Service s = Service.Builder.newInstance("1").setLocation(Location.newInstance("loc"))
+        Service s = new Service.Builder("1").setLocation(Location.newInstance("loc"))
             .setPriority(1).build();
-        Service s2 = Service.Builder.newInstance("2").setLocation(Location.newInstance("loc"))
+        Service s2 = new Service.Builder("2").setLocation(Location.newInstance("loc"))
             .setPriority(2).build();
-        Service s3 = Service.Builder.newInstance("3").setLocation(Location.newInstance("loc"))
+        Service s3 = new Service.Builder("3").setLocation(Location.newInstance("loc"))
             .setPriority(3).build();
-        Service s4 = Service.Builder.newInstance("4").setLocation(Location.newInstance("loc"))
+        Service s4 = new Service.Builder("4").setLocation(Location.newInstance("loc"))
             .setPriority(1).build();
         List<Job> jobs = new ArrayList<Job>();
         jobs.add(s2);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestInserter.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestInserter.java
index f2058161e..8c51b285d 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestInserter.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestInserter.java
@@ -17,58 +17,80 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionListeners;
 import com.graphhopper.jsprit.core.algorithm.state.UpdateEndLocationIfRouteIsOpen;
-import com.graphhopper.jsprit.core.problem.AbstractActivity;
-import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.driver.Driver;
 import com.graphhopper.jsprit.core.problem.job.Service;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverShipment;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupService;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupShipment;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverShipmentDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupServiceDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupShipmentDEPRECATED;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
-import org.junit.Test;
 
-import java.util.ArrayList;
-import java.util.List;
+public class TestInserter {
 
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
+    private Service.Builder createService(String name, Location loc) {
+        TimeWindow tw = TimeWindow.newInstance(0, 10);
 
-public class TestInserter {
+        return new Service.Builder(name)
+                .setTimeWindow(tw)
+                .setLocation(loc);
+    }
 
 
+    protected Shipment.Builder createStandardShipment(String name) {
+        Location loc = Location.Builder.newInstance().setId("delLoc").build();
+        TimeWindow tw = TimeWindow.newInstance(0, 10);
+        return Shipment.Builder.newInstance(name)
+                .addSizeDimension(0, 10)
+                .setPickupTimeWindow(tw)
+                .setDeliveryTimeWindow(tw)
+                .setPickupLocation(loc)
+                .setDeliveryLocation(loc);
+    }
+
     @Test
     public void whenInsertingServiceAndRouteIsClosed_itInsertsCorrectly() {
-        Service service = mock(Service.class);
+//        Service service = mock(Service.class);
+//        when(service.getActivityList()).thenReturn(new SequentialJobActivityList(service));
+//        when(service.getTimeWindow()).thenReturn(mock(TimeWindow.class));
+
+        Location loc = Location.Builder.newInstance().setId("loc").build();
+        Service service = createService("s1", loc).build();
+
         Vehicle vehicle = mock(Vehicle.class);
         when(vehicle.getStartLocation()).thenReturn(loc("vehLoc"));
         when(vehicle.getEndLocation()).thenReturn(loc("vehLoc"));
         when(vehicle.isReturnToDepot()).thenReturn(true);
         when(vehicle.getId()).thenReturn("vehId");
 
-        when(service.getTimeWindow()).thenReturn(mock(TimeWindow.class));
-
         VehicleRoute route = VehicleRoute.Builder.newInstance(vehicle, mock(Driver.class)).addService(service).build();
         //start - pick(shipment) - del(shipment) - end
-        Service serviceToInsert = mock(Service.class);
-        when(serviceToInsert.getLocation()).thenReturn(loc("delLoc"));
+        Service serviceToInsert = createService("toInsert", loc).build();
 
         InsertionData iData = mock(InsertionData.class);
         when(iData.getDeliveryInsertionIndex()).thenReturn(1);
         when(iData.getSelectedVehicle()).thenReturn(vehicle);
 
         VehicleRoutingProblem vehicleRoutingProblem = mock(VehicleRoutingProblem.class);
-        List<AbstractActivity> acts = new ArrayList<AbstractActivity>();
-        PickupService act = new PickupService(serviceToInsert);
+        List<JobActivity> acts = new ArrayList<>();
+        PickupServiceDEPRECATED act = new PickupServiceDEPRECATED(serviceToInsert);
         acts.add(act);
         when(vehicleRoutingProblem.copyAndGetActivities(serviceToInsert)).thenReturn(acts);
         Inserter inserter = new Inserter(mock(InsertionListeners.class), vehicleRoutingProblem);
@@ -85,24 +107,22 @@ private Location loc(String vehLoc) {
 
     @Test
     public void whenInsertingServiceAndRouteIsOpen_itInsertsCorrectlyAndSwitchesEndLocation() {
-        Service service = mock(Service.class);
+        Service service = createService("alma", Location.newInstance("loc")).build();
         Vehicle vehicle = mock(Vehicle.class);
         when(vehicle.getStartLocation()).thenReturn(Location.newInstance("vehLoc"));
         when(vehicle.getEndLocation()).thenReturn(Location.newInstance("vehLoc"));
         when(vehicle.isReturnToDepot()).thenReturn(false);
         when(vehicle.getId()).thenReturn("vehId");
 
-        when(service.getTimeWindow()).thenReturn(mock(TimeWindow.class));
-
         VehicleRoute route = VehicleRoute.Builder.newInstance(vehicle, mock(Driver.class)).addService(service).build();
-        Service serviceToInsert = mock(Service.class);
-        when(serviceToInsert.getLocation()).thenReturn(Location.Builder.newInstance().setId("delLoc").build());
+        Service serviceToInsert = createService("alma", Location.newInstance("delLoc")).build();
 
         InsertionData iData = mock(InsertionData.class);
         when(iData.getDeliveryInsertionIndex()).thenReturn(1);
         when(iData.getSelectedVehicle()).thenReturn(vehicle);
 
         VehicleRoutingProblem vehicleRoutingProblem = mock(VehicleRoutingProblem.class);
+// REMARK - Balage1551 - This one is throwing a mockito exception, I don't understand why.
         when(vehicleRoutingProblem.copyAndGetActivities(serviceToInsert)).thenReturn(getTourActivities(serviceToInsert));
 
         Inserter inserter = new Inserter(mock(InsertionListeners.class), vehicleRoutingProblem);
@@ -113,27 +133,23 @@ public void whenInsertingServiceAndRouteIsOpen_itInsertsCorrectlyAndSwitchesEndL
         assertEquals(route.getEnd().getLocation().getId(), serviceToInsert.getLocation().getId());
     }
 
-    private List<AbstractActivity> getTourActivities(Service serviceToInsert) {
-        List<AbstractActivity> acts = new ArrayList<AbstractActivity>();
-        acts.add(new PickupService(serviceToInsert));
+    private List<JobActivity> getTourActivities(Service serviceToInsert) {
+        List<JobActivity> acts = new ArrayList<>();
+        acts.add(new PickupServiceDEPRECATED(serviceToInsert));
         return acts;
     }
 
 
     @Test
     public void whenInsertingShipmentAndRouteIsClosed_itInsertsCorrectly() {
-        Shipment shipment = mock(Shipment.class);
-        Capacity capacity = Capacity.Builder.newInstance().build();
-        when(shipment.getSize()).thenReturn(capacity);
+        Shipment shipment = createStandardShipment("s1").build();
+
         Vehicle vehicle = mock(Vehicle.class);
         when(vehicle.getStartLocation()).thenReturn(loc("vehLoc"));
         when(vehicle.getEndLocation()).thenReturn(loc("vehLoc"));
         when(vehicle.isReturnToDepot()).thenReturn(true);
         when(vehicle.getId()).thenReturn("vehId");
 
-        when(shipment.getPickupTimeWindow()).thenReturn(mock(TimeWindow.class));
-        when(shipment.getDeliveryTimeWindow()).thenReturn(mock(TimeWindow.class));
-
         VehicleRoute route = VehicleRoute.Builder.newInstance(vehicle, mock(Driver.class)).addPickup(shipment).addDelivery(shipment).build();
         //start - pick(shipment) - del(shipment) - end
         Shipment shipmentToInsert = Shipment.Builder.newInstance("s").setDeliveryLocation(Location.newInstance("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
@@ -154,25 +170,21 @@ public void whenInsertingShipmentAndRouteIsClosed_itInsertsCorrectly() {
         assertEquals(route.getEnd().getLocation().getId(), vehicle.getEndLocation().getId());
     }
 
-    private List<AbstractActivity> getTourActivities(Shipment shipmentToInsert) {
-        List<AbstractActivity> acts = new ArrayList<AbstractActivity>();
-        acts.add(new PickupShipment(shipmentToInsert));
-        acts.add(new DeliverShipment(shipmentToInsert));
+    private List<JobActivity> getTourActivities(Shipment shipmentToInsert) {
+        List<JobActivity> acts = new ArrayList<>();
+        acts.add(new PickupShipmentDEPRECATED(shipmentToInsert));
+        acts.add(new DeliverShipmentDEPRECATED(shipmentToInsert));
         return acts;
     }
 
     @Test
     public void whenInsertingShipmentAndRouteIsOpen_itInsertsCorrectlyAndSwitchesEndLocation() {
-        Shipment shipment = mock(Shipment.class);
-        Capacity capacity = Capacity.Builder.newInstance().build();
-        when(shipment.getSize()).thenReturn(capacity);
+        Shipment shipment = createStandardShipment("s1").build();
+
         Vehicle vehicle = mock(Vehicle.class);
         when(vehicle.isReturnToDepot()).thenReturn(false);
         when(vehicle.getId()).thenReturn("vehId");
 
-        when(shipment.getPickupTimeWindow()).thenReturn(mock(TimeWindow.class));
-        when(shipment.getDeliveryTimeWindow()).thenReturn(mock(TimeWindow.class));
-
         VehicleRoute route = VehicleRoute.Builder.newInstance(vehicle, mock(Driver.class)).addPickup(shipment).addDelivery(shipment).build();
         //start - pick(shipment) - del(shipment) - end
         Shipment shipmentToInsert = Shipment.Builder.newInstance("s").setDeliveryLocation(Location.newInstance("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
@@ -194,15 +206,10 @@ public void whenInsertingShipmentAndRouteIsOpen_itInsertsCorrectlyAndSwitchesEnd
 
     @Test
     public void whenSwitchingVehicleAndRouteIsClosed_newStartAndEndShouldBeTheLocationOfNewVehicle() {
-        Shipment shipment = mock(Shipment.class);
-        Capacity capacity = Capacity.Builder.newInstance().build();
-        when(shipment.getSize()).thenReturn(capacity);
+        Shipment shipment = createStandardShipment("s1").build();
         Vehicle vehicle = VehicleImpl.Builder.newInstance("vehId").setStartLocation(Location.newInstance("vehLoc")).setType(mock(VehicleType.class)).build();
         Vehicle newVehicle = VehicleImpl.Builder.newInstance("newVehId").setStartLocation(Location.newInstance("newVehLoc")).setType(mock(VehicleType.class)).build();
 
-        when(shipment.getPickupTimeWindow()).thenReturn(mock(TimeWindow.class));
-        when(shipment.getDeliveryTimeWindow()).thenReturn(mock(TimeWindow.class));
-
         VehicleRoute route = VehicleRoute.Builder.newInstance(vehicle, mock(Driver.class)).addPickup(shipment).addDelivery(shipment).build();
         //start - pick(shipment) - del(shipment) - end
         Shipment shipmentToInsert = Shipment.Builder.newInstance("s").setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).setDeliveryLocation(Location.newInstance("delLoc")).build();
@@ -222,15 +229,10 @@ public void whenSwitchingVehicleAndRouteIsClosed_newStartAndEndShouldBeTheLocati
 
     @Test
     public void whenSwitchingVehicleAndRouteIsOpen_endLocationShouldBeTheLocationOfTheLastActivity() {
-        Shipment shipment = mock(Shipment.class);
-        Capacity capacity = Capacity.Builder.newInstance().build();
-        when(shipment.getSize()).thenReturn(capacity);
+        Shipment shipment = createStandardShipment("s1").build();
         Vehicle vehicle = VehicleImpl.Builder.newInstance("vehId").setReturnToDepot(false).setStartLocation(Location.newInstance("vehLoc")).setType(mock(VehicleType.class)).build();
         Vehicle newVehicle = VehicleImpl.Builder.newInstance("newVehId").setReturnToDepot(false).setStartLocation(Location.newInstance("newVehLoc")).setType(mock(VehicleType.class)).build();
 
-        when(shipment.getPickupTimeWindow()).thenReturn(mock(TimeWindow.class));
-        when(shipment.getDeliveryTimeWindow()).thenReturn(mock(TimeWindow.class));
-
         VehicleRoute route = VehicleRoute.Builder.newInstance(vehicle, mock(Driver.class)).addPickup(shipment).addDelivery(shipment).build();
         //start - pick(shipment) - del(shipment) - end
         Shipment shipmentToInsert = Shipment.Builder.newInstance("s").setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).setDeliveryLocation(Location.newInstance("delLoc")).build();
@@ -250,16 +252,12 @@ public void whenSwitchingVehicleAndRouteIsOpen_endLocationShouldBeTheLocationOfT
 
     @Test
     public void whenInsertingShipmentAtBeginningAndSwitchingVehicleAndRouteIsOpen_endLocationShouldBeTheLocationOfTheLastActivity() {
-        Shipment shipment = mock(Shipment.class);
-        Capacity capacity = Capacity.Builder.newInstance().build();
-        when(shipment.getSize()).thenReturn(capacity);
-        when(shipment.getDeliveryLocation()).thenReturn(Location.Builder.newInstance().setId("oldShipmentDelLoc").build());
+        Shipment shipment = createStandardShipment("s1")
+                .setDeliveryLocation(Location.newInstance("oldShipmentDelLoc"))
+                .build();
         Vehicle vehicle = VehicleImpl.Builder.newInstance("vehId").setReturnToDepot(false).setStartLocation(Location.Builder.newInstance().setId("vehLoc").build()).setType(mock(VehicleType.class)).build();
         Vehicle newVehicle = VehicleImpl.Builder.newInstance("newVehId").setReturnToDepot(false).setStartLocation(Location.Builder.newInstance().setId("newVehLoc").build()).setType(mock(VehicleType.class)).build();
 
-        when(shipment.getPickupTimeWindow()).thenReturn(mock(TimeWindow.class));
-        when(shipment.getDeliveryTimeWindow()).thenReturn(mock(TimeWindow.class));
-
         VehicleRoute route = VehicleRoute.Builder.newInstance(vehicle, mock(Driver.class)).addPickup(shipment).addDelivery(shipment).build();
         //start - pick(shipment) - del(shipment) - end
         Shipment shipmentToInsert = Shipment.Builder.newInstance("s").setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).setDeliveryLocation(Location.newInstance("delLoc")).build();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestLocalActivityInsertionCostsCalculator.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestLocalActivityInsertionCostsCalculator.java
index 66ff50630..db6c01646 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestLocalActivityInsertionCostsCalculator.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestLocalActivityInsertionCostsCalculator.java
@@ -17,6 +17,16 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.algorithm.state.UpdateActivityTimes;
 import com.graphhopper.jsprit.core.algorithm.state.UpdateFutureWaitingTimes;
@@ -38,15 +48,6 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.CostFactory;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
 
 public class TestLocalActivityInsertionCostsCalculator {
 
@@ -163,9 +164,9 @@ public void whenInsertingActBetweenLastActAndEndAndRouteIsOpen_itCalculatesTpCos
     public void test() {
         VehicleTypeImpl type = VehicleTypeImpl.Builder.newInstance("t").setCostPerWaitingTime(1.).build();
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance(0, 0)).build();
-        Service prevS = Service.Builder.newInstance("prev").setLocation(Location.newInstance(10, 0)).build();
-        Service newS = Service.Builder.newInstance("new").setServiceTime(10).setLocation(Location.newInstance(60, 0)).build();
-        Service nextS = Service.Builder.newInstance("next").setLocation(Location.newInstance(30, 0)).setTimeWindow(TimeWindow.newInstance(40, 80)).build();
+        Service prevS = new Service.Builder("prev").setLocation(Location.newInstance(10, 0)).build();
+        Service newS = new Service.Builder("new").setServiceTime(10).setLocation(Location.newInstance(60, 0)).build();
+        Service nextS = new Service.Builder("next").setLocation(Location.newInstance(30, 0)).setTimeWindow(TimeWindow.newInstance(40, 80)).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(prevS).addJob(newS).addJob(nextS).addVehicle(v).build();
 
@@ -198,8 +199,8 @@ public void whenAddingNewBetweenStartAndAct_itShouldCalcInsertionCostsCorrectly(
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance(0, 0)).build();
 
-        Service newS = Service.Builder.newInstance("new").setServiceTime(10).setLocation(Location.newInstance(10, 0)).build();
-        Service nextS = Service.Builder.newInstance("next").setLocation(Location.newInstance(30, 0))
+        Service newS = new Service.Builder("new").setServiceTime(10).setLocation(Location.newInstance(10, 0)).build();
+        Service nextS = new Service.Builder("next").setLocation(Location.newInstance(30, 0))
             .setTimeWindow(TimeWindow.newInstance(40, 50)).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(newS).addJob(nextS).addVehicle(v).build();
@@ -225,8 +226,8 @@ public void whenAddingNewBetweenStartAndAct2_itShouldCalcInsertionCostsCorrectly
 
         VehicleImpl v2 = VehicleImpl.Builder.newInstance("v2").setType(type).setStartLocation(Location.newInstance(0, 0)).build();
 
-        Service newS = Service.Builder.newInstance("new").setServiceTime(10).setLocation(Location.newInstance(10, 0)).build();
-        Service nextS = Service.Builder.newInstance("next").setLocation(Location.newInstance(30, 0))
+        Service newS = new Service.Builder("new").setServiceTime(10).setLocation(Location.newInstance(10, 0)).build();
+        Service nextS = new Service.Builder("next").setLocation(Location.newInstance(30, 0))
             .setTimeWindow(TimeWindow.newInstance(140, 150)).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(newS).addJob(nextS).addVehicle(v2).build();
@@ -251,7 +252,7 @@ public void whenAddingNewInEmptyRoute_itShouldCalcInsertionCostsCorrectly() {
         VehicleTypeImpl type = VehicleTypeImpl.Builder.newInstance("t").setCostPerWaitingTime(1.).build();
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance(0, 0)).build();
 
-        Service newS = Service.Builder.newInstance("new").setServiceTime(10).setLocation(Location.newInstance(10, 0)).setTimeWindow(TimeWindow.newInstance(100, 150)).build();
+        Service newS = new Service.Builder("new").setServiceTime(10).setLocation(Location.newInstance(10, 0)).setTimeWindow(TimeWindow.newInstance(100, 150)).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(newS).addVehicle(v).build();
 
@@ -276,9 +277,9 @@ public void whenAddingNewBetweenTwoActs_itShouldCalcInsertionCostsCorrectly() {
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance(0, 0)).build();
 
-        Service prevS = Service.Builder.newInstance("prev").setLocation(Location.newInstance(10, 0)).build();
-        Service newS = Service.Builder.newInstance("new").setServiceTime(10).setLocation(Location.newInstance(20, 0)).build();
-        Service nextS = Service.Builder.newInstance("next").setLocation(Location.newInstance(30, 0)).setTimeWindow(TimeWindow.newInstance(40, 50)).build();
+        Service prevS = new Service.Builder("prev").setLocation(Location.newInstance(10, 0)).build();
+        Service newS = new Service.Builder("new").setServiceTime(10).setLocation(Location.newInstance(20, 0)).build();
+        Service nextS = new Service.Builder("next").setLocation(Location.newInstance(30, 0)).setTimeWindow(TimeWindow.newInstance(40, 50)).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(prevS).addJob(newS).addJob(nextS).addVehicle(v).build();
 
@@ -303,9 +304,9 @@ public void whenAddingNewWithTWBetweenTwoActs_itShouldCalcInsertionCostsCorrectl
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance(0, 0)).build();
 
-        Service prevS = Service.Builder.newInstance("prev").setLocation(Location.newInstance(10, 0)).build();
-        Service newS = Service.Builder.newInstance("new").setServiceTime(10).setTimeWindow(TimeWindow.newInstance(100, 120)).setLocation(Location.newInstance(20, 0)).build();
-        Service nextS = Service.Builder.newInstance("next").setLocation(Location.newInstance(30, 0)).setTimeWindow(TimeWindow.newInstance(40, 500)).build();
+        Service prevS = new Service.Builder("prev").setLocation(Location.newInstance(10, 0)).build();
+        Service newS = new Service.Builder("new").setServiceTime(10).setTimeWindow(TimeWindow.newInstance(100, 120)).setLocation(Location.newInstance(20, 0)).build();
+        Service nextS = new Service.Builder("next").setLocation(Location.newInstance(30, 0)).setTimeWindow(TimeWindow.newInstance(40, 500)).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(prevS).addJob(newS).addJob(nextS).addVehicle(v).build();
 
@@ -334,11 +335,11 @@ public void whenAddingNewWithTWBetweenTwoActs2_itShouldCalcInsertionCostsCorrect
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance(0, 0)).build();
 //		VehicleImpl v2 = VehicleImpl.Builder.newInstance("v2").setHasVariableDepartureTime(true).setType(type).setStartLocation(Location.newInstance(0,0)).build();
 
-        Service prevS = Service.Builder.newInstance("prev").setLocation(Location.newInstance(10, 0)).build();
-        Service newS = Service.Builder.newInstance("new").setServiceTime(10).setTimeWindow(TimeWindow.newInstance(100, 120)).setLocation(Location.newInstance(20, 0)).build();
-        Service nextS = Service.Builder.newInstance("next").setLocation(Location.newInstance(30, 0)).setTimeWindow(TimeWindow.newInstance(40, 500)).build();
+        Service prevS = new Service.Builder("prev").setLocation(Location.newInstance(10, 0)).build();
+        Service newS = new Service.Builder("new").setServiceTime(10).setTimeWindow(TimeWindow.newInstance(100, 120)).setLocation(Location.newInstance(20, 0)).build();
+        Service nextS = new Service.Builder("next").setLocation(Location.newInstance(30, 0)).setTimeWindow(TimeWindow.newInstance(40, 500)).build();
 
-        Service afterNextS = Service.Builder.newInstance("afterNext").setLocation(Location.newInstance(40, 0)).setTimeWindow(TimeWindow.newInstance(400, 500)).build();
+        Service afterNextS = new Service.Builder("afterNext").setLocation(Location.newInstance(40, 0)).setTimeWindow(TimeWindow.newInstance(400, 500)).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(afterNextS).addJob(prevS).addJob(newS).addJob(nextS).addVehicle(v).build();
 
@@ -373,12 +374,12 @@ public void whenAddingNewWithTWBetweenTwoActs3_itShouldCalcInsertionCostsCorrect
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance(0, 0)).build();
 //		VehicleImpl v2 = VehicleImpl.Builder.newInstance("v2").setHasVariableDepartureTime(true).setType(type).setStartLocation(Location.newInstance(0,0)).build();
 
-        Service prevS = Service.Builder.newInstance("prev").setLocation(Location.newInstance(10, 0)).build();
-        Service newS = Service.Builder.newInstance("new").setServiceTime(10).setTimeWindow(TimeWindow.newInstance(100, 120)).setLocation(Location.newInstance(20, 0)).build();
-        Service nextS = Service.Builder.newInstance("next").setLocation(Location.newInstance(30, 0)).setTimeWindow(TimeWindow.newInstance(40, 500)).build();
+        Service prevS = new Service.Builder("prev").setLocation(Location.newInstance(10, 0)).build();
+        Service newS = new Service.Builder("new").setServiceTime(10).setTimeWindow(TimeWindow.newInstance(100, 120)).setLocation(Location.newInstance(20, 0)).build();
+        Service nextS = new Service.Builder("next").setLocation(Location.newInstance(30, 0)).setTimeWindow(TimeWindow.newInstance(40, 500)).build();
 
-        Service afterNextS = Service.Builder.newInstance("afterNext").setLocation(Location.newInstance(40, 0)).setTimeWindow(TimeWindow.newInstance(80, 500)).build();
-        Service afterAfterNextS = Service.Builder.newInstance("afterAfterNext").setLocation(Location.newInstance(40, 0)).setTimeWindow(TimeWindow.newInstance(100, 500)).build();
+        Service afterNextS = new Service.Builder("afterNext").setLocation(Location.newInstance(40, 0)).setTimeWindow(TimeWindow.newInstance(80, 500)).build();
+        Service afterAfterNextS = new Service.Builder("afterAfterNext").setLocation(Location.newInstance(40, 0)).setTimeWindow(TimeWindow.newInstance(100, 500)).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addVehicle(v).addJob(prevS).addJob(newS).addJob(nextS)
             .addJob(afterNextS).addJob(afterAfterNextS).build();
@@ -425,12 +426,12 @@ public void whenAddingNewWithTWBetweenTwoActs4_itShouldCalcInsertionCostsCorrect
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance(0, 0)).build();
 //		VehicleImpl v2 = VehicleImpl.Builder.newInstance("v2").setHasVariableDepartureTime(true).setType(type).setStartLocation(Location.newInstance(0,0)).build();
 
-        Service prevS = Service.Builder.newInstance("prev").setLocation(Location.newInstance(10, 0)).build();
-        Service newS = Service.Builder.newInstance("new").setServiceTime(10).setTimeWindow(TimeWindow.newInstance(100, 120)).setLocation(Location.newInstance(20, 0)).build();
-        Service nextS = Service.Builder.newInstance("next").setLocation(Location.newInstance(30, 0)).setTimeWindow(TimeWindow.newInstance(40, 500)).build();
+        Service prevS = new Service.Builder("prev").setLocation(Location.newInstance(10, 0)).build();
+        Service newS = new Service.Builder("new").setServiceTime(10).setTimeWindow(TimeWindow.newInstance(100, 120)).setLocation(Location.newInstance(20, 0)).build();
+        Service nextS = new Service.Builder("next").setLocation(Location.newInstance(30, 0)).setTimeWindow(TimeWindow.newInstance(40, 500)).build();
 
-        Service afterNextS = Service.Builder.newInstance("afterNext").setLocation(Location.newInstance(40, 0)).setTimeWindow(TimeWindow.newInstance(80, 500)).build();
-        Service afterAfterNextS = Service.Builder.newInstance("afterAfterNext").setLocation(Location.newInstance(50, 0)).setTimeWindow(TimeWindow.newInstance(100, 500)).build();
+        Service afterNextS = new Service.Builder("afterNext").setLocation(Location.newInstance(40, 0)).setTimeWindow(TimeWindow.newInstance(80, 500)).build();
+        Service afterAfterNextS = new Service.Builder("afterAfterNext").setLocation(Location.newInstance(50, 0)).setTimeWindow(TimeWindow.newInstance(100, 500)).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addVehicle(v).addJob(prevS).addJob(newS).addJob(nextS)
             .addJob(afterNextS).addJob(afterAfterNextS).build();
@@ -480,12 +481,12 @@ public void whenAddingNewWithTWBetweenTwoActs4WithVarStart_itShouldCalcInsertion
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance(0, 0)).build();
 //		VehicleImpl v2 = VehicleImpl.Builder.newInstance("v2").setHasVariableDepartureTime(true).setType(type).setStartLocation(Location.newInstance(0,0)).build();
 
-        Service prevS = Service.Builder.newInstance("prev").setLocation(Location.newInstance(10, 0)).build();
-        Service newS = Service.Builder.newInstance("new").setServiceTime(10).setTimeWindow(TimeWindow.newInstance(100, 120)).setLocation(Location.newInstance(20, 0)).build();
-        Service nextS = Service.Builder.newInstance("next").setLocation(Location.newInstance(30, 0)).setTimeWindow(TimeWindow.newInstance(40, 500)).build();
+        Service prevS = new Service.Builder("prev").setLocation(Location.newInstance(10, 0)).build();
+        Service newS = new Service.Builder("new").setServiceTime(10).setTimeWindow(TimeWindow.newInstance(100, 120)).setLocation(Location.newInstance(20, 0)).build();
+        Service nextS = new Service.Builder("next").setLocation(Location.newInstance(30, 0)).setTimeWindow(TimeWindow.newInstance(40, 500)).build();
 
-        Service afterNextS = Service.Builder.newInstance("afterNext").setLocation(Location.newInstance(40, 0)).setTimeWindow(TimeWindow.newInstance(80, 500)).build();
-        Service afterAfterNextS = Service.Builder.newInstance("afterAfterNext").setLocation(Location.newInstance(50, 0)).setTimeWindow(TimeWindow.newInstance(100, 500)).build();
+        Service afterNextS = new Service.Builder("afterNext").setLocation(Location.newInstance(40, 0)).setTimeWindow(TimeWindow.newInstance(80, 500)).build();
+        Service afterAfterNextS = new Service.Builder("afterAfterNext").setLocation(Location.newInstance(50, 0)).setTimeWindow(TimeWindow.newInstance(100, 500)).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addVehicle(v).addJob(prevS).addJob(newS).addJob(nextS)
             .addJob(afterNextS).addJob(afterAfterNextS).build();
@@ -535,12 +536,12 @@ public void whenAddingNewWithTWBetweenTwoActs3WithVarStart_itShouldCalcInsertion
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance(0, 0)).build();
 //		VehicleImpl v2 = VehicleImpl.Builder.newInstance("v2").setHasVariableDepartureTime(true).setType(type).setStartLocation(Location.newInstance(0,0)).build();
 
-        Service prevS = Service.Builder.newInstance("prev").setLocation(Location.newInstance(10, 0)).build();
-        Service newS = Service.Builder.newInstance("new").setServiceTime(10).setTimeWindow(TimeWindow.newInstance(50, 70)).setLocation(Location.newInstance(20, 0)).build();
-        Service nextS = Service.Builder.newInstance("next").setLocation(Location.newInstance(30, 0)).setTimeWindow(TimeWindow.newInstance(40, 70)).build();
+        Service prevS = new Service.Builder("prev").setLocation(Location.newInstance(10, 0)).build();
+        Service newS = new Service.Builder("new").setServiceTime(10).setTimeWindow(TimeWindow.newInstance(50, 70)).setLocation(Location.newInstance(20, 0)).build();
+        Service nextS = new Service.Builder("next").setLocation(Location.newInstance(30, 0)).setTimeWindow(TimeWindow.newInstance(40, 70)).build();
 
-        Service afterNextS = Service.Builder.newInstance("afterNext").setLocation(Location.newInstance(40, 0)).setTimeWindow(TimeWindow.newInstance(50, 100)).build();
-        Service afterAfterNextS = Service.Builder.newInstance("afterAfterNext").setLocation(Location.newInstance(50, 0)).setTimeWindow(TimeWindow.newInstance(100, 500)).build();
+        Service afterNextS = new Service.Builder("afterNext").setLocation(Location.newInstance(40, 0)).setTimeWindow(TimeWindow.newInstance(50, 100)).build();
+        Service afterAfterNextS = new Service.Builder("afterAfterNext").setLocation(Location.newInstance(50, 0)).setTimeWindow(TimeWindow.newInstance(100, 500)).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addVehicle(v).addJob(prevS).addJob(newS).addJob(nextS)
             .addJob(afterNextS).addJob(afterAfterNextS).build();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestMixedServiceAndShipmentsProblemOnRouteLevel.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestMixedServiceAndShipmentsProblemOnRouteLevel.java
index dbec53eb0..7bcb244b3 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestMixedServiceAndShipmentsProblemOnRouteLevel.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestMixedServiceAndShipmentsProblemOnRouteLevel.java
@@ -17,18 +17,23 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
+import static org.junit.Assert.assertTrue;
+
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
 import com.graphhopper.jsprit.core.problem.job.Delivery;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
-import com.graphhopper.jsprit.core.problem.vehicle.*;
+import com.graphhopper.jsprit.core.problem.vehicle.InfiniteFleetManagerFactory;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleFleetManager;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.Coordinate;
 import com.graphhopper.jsprit.core.util.TestUtils;
-import org.junit.Test;
-
-import static org.junit.Assert.assertTrue;
 
 
 public class TestMixedServiceAndShipmentsProblemOnRouteLevel {
@@ -71,10 +76,10 @@ public void whenHavingShipmentsAndServicesInOneProblem_andInsertionShouldBeMadeO
 		 * 3: (16,8)
 		 * 4: (16,12)
 		 */
-        Delivery delivery1 = (Delivery) Delivery.Builder.newInstance("5").addSizeDimension(0, 1).setLocation(TestUtils.loc(Coordinate.newInstance(4, 8))).build();
-        Delivery delivery2 = (Delivery) Delivery.Builder.newInstance("6").addSizeDimension(0, 1).setLocation(TestUtils.loc(Coordinate.newInstance(4, 12))).build();
-        Delivery delivery3 = (Delivery) Delivery.Builder.newInstance("7").addSizeDimension(0, 1).setLocation(TestUtils.loc(Coordinate.newInstance(16, 8))).build();
-        Delivery delivery4 = (Delivery) Delivery.Builder.newInstance("8").addSizeDimension(0, 1).setLocation(TestUtils.loc(Coordinate.newInstance(16, 12))).build();
+        Delivery delivery1 = (Delivery) new Delivery.Builder("5").addSizeDimension(0, 1).setLocation(TestUtils.loc(Coordinate.newInstance(4, 8))).build();
+        Delivery delivery2 = (Delivery) new Delivery.Builder("6").addSizeDimension(0, 1).setLocation(TestUtils.loc(Coordinate.newInstance(4, 12))).build();
+        Delivery delivery3 = (Delivery) new Delivery.Builder("7").addSizeDimension(0, 1).setLocation(TestUtils.loc(Coordinate.newInstance(16, 8))).build();
+        Delivery delivery4 = (Delivery) new Delivery.Builder("8").addSizeDimension(0, 1).setLocation(TestUtils.loc(Coordinate.newInstance(16, 12))).build();
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addVehicle(vehicle);
@@ -122,10 +127,10 @@ public void whenHavingOnlyServicesInOneProblem_andInsertionShouldBeMadeOnRouteLe
 		 * 3: (16,8)
 		 * 4: (16,12)
 		 */
-        Delivery delivery1 = (Delivery) Delivery.Builder.newInstance("5").addSizeDimension(0, 1).setLocation(Location.newInstance(4, 8)).build();
-        Delivery delivery2 = (Delivery) Delivery.Builder.newInstance("6").addSizeDimension(0, 1).setLocation(Location.newInstance(4, 12)).build();
-        Delivery delivery3 = (Delivery) Delivery.Builder.newInstance("7").addSizeDimension(0, 1).setLocation(Location.newInstance(16, 8)).build();
-        Delivery delivery4 = (Delivery) Delivery.Builder.newInstance("8").addSizeDimension(0, 1).setLocation(Location.newInstance(16, 12)).build();
+        Delivery delivery1 = (Delivery) new Delivery.Builder("5").addSizeDimension(0, 1).setLocation(Location.newInstance(4, 8)).build();
+        Delivery delivery2 = (Delivery) new Delivery.Builder("6").addSizeDimension(0, 1).setLocation(Location.newInstance(4, 12)).build();
+        Delivery delivery3 = (Delivery) new Delivery.Builder("7").addSizeDimension(0, 1).setLocation(Location.newInstance(16, 8)).build();
+        Delivery delivery4 = (Delivery) new Delivery.Builder("8").addSizeDimension(0, 1).setLocation(Location.newInstance(16, 12)).build();
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addVehicle(vehicle)
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestRouteLevelActivityInsertionCostEstimator.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestRouteLevelActivityInsertionCostEstimator.java
index e00b1ecda..9bd1c443e 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestRouteLevelActivityInsertionCostEstimator.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestRouteLevelActivityInsertionCostEstimator.java
@@ -17,10 +17,17 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
+import static org.junit.Assert.assertEquals;
+
+import java.util.Arrays;
+import java.util.Collections;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.algorithm.state.UpdateVariableCosts;
-import com.graphhopper.jsprit.core.problem.AbstractActivity;
-import com.graphhopper.jsprit.core.problem.JobActivityFactory;
+import com.graphhopper.jsprit.core.problem.CopyJobActivityFactory;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingActivityCosts;
@@ -30,8 +37,8 @@
 import com.graphhopper.jsprit.core.problem.job.Service;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivity;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupService;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivityNEW;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupServiceDEPRECATED;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
@@ -39,14 +46,6 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.CostFactory;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.List;
-
-import static org.junit.Assert.assertEquals;
 
 /**
  * unit tests to test route level insertion
@@ -78,9 +77,9 @@ public double getActivityDuration(TourActivity tourAct, double arrivalTime, Driv
             }
 
         };
-        Service s1 = Service.Builder.newInstance("s1").setLocation(Location.newInstance("10,0")).setTimeWindow(TimeWindow.newInstance(10., 10.)).build();
-        Service s2 = Service.Builder.newInstance("s2").setLocation(Location.newInstance("20,0")).setTimeWindow(TimeWindow.newInstance(20., 20.)).build();
-        Service s3 = Service.Builder.newInstance("s3").setLocation(Location.newInstance("30,0")).setTimeWindow(TimeWindow.newInstance(30., 30.)).build();
+        Service s1 = new Service.Builder("s1").setLocation(Location.newInstance("10,0")).setTimeWindow(TimeWindow.newInstance(10., 10.)).build();
+        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance("20,0")).setTimeWindow(TimeWindow.newInstance(20., 20.)).build();
+        Service s3 = new Service.Builder("s3").setLocation(Location.newInstance("30,0")).setTimeWindow(TimeWindow.newInstance(30., 30.)).build();
 
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").build();
         Vehicle vehicle = VehicleImpl.Builder.newInstance("vehicle").setStartLocation(Location.newInstance("0,0")).setType(type).build();
@@ -97,13 +96,9 @@ public double getActivityDuration(TourActivity tourAct, double arrivalTime, Driv
         vrp.getActivities(s3).get(0).setTheoreticalEarliestOperationStartTime(30);
         vrp.getActivities(s3).get(0).setTheoreticalLatestOperationStartTime(30);
 
-        route = VehicleRoute.Builder.newInstance(vehicle).setJobActivityFactory(new JobActivityFactory() {
-            @Override
-            public List<AbstractActivity> createActivities(Job job) {
-                return vrp.copyAndGetActivities(job);
-            }
-
-        }).addService(s1).addService(s2).addService(s3).build();
+        route = VehicleRoute.Builder.newInstance(vehicle).setJobActivityFactory(new CopyJobActivityFactory())
+                .addService(s1).addService(s2).addService(s3)
+                .build();
 
         stateManager = new StateManager(vrp);
         stateManager.addStateUpdater(new UpdateVariableCosts(activityCosts, routingCosts, stateManager));
@@ -112,8 +107,8 @@ public double getActivityDuration(TourActivity tourAct, double arrivalTime, Driv
 
     @Test
     public void whenNewActInBetweenFirstAndSecond_and_forwardLookingIs0_itShouldReturnCorrectCosts() {
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance("5,0")).build();
-        PickupActivity pickupService = new PickupService(s4);
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("5,0")).build();
+        PickupActivityNEW pickupService = new PickupServiceDEPRECATED(s4);
         JobInsertionContext context = new JobInsertionContext(route, s4, route.getVehicle(), route.getDriver(), 0.);
         RouteLevelActivityInsertionCostsEstimator estimator = new RouteLevelActivityInsertionCostsEstimator(routingCosts, activityCosts, stateManager);
         estimator.setForwardLooking(0);
@@ -123,8 +118,8 @@ public void whenNewActInBetweenFirstAndSecond_and_forwardLookingIs0_itShouldRetu
 
     @Test
     public void whenNewActWithTWInBetweenFirstAndSecond_and_forwardLookingIs0_itShouldReturnCorrectCosts() {
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance("5,0")).setTimeWindow(TimeWindow.newInstance(5., 5.)).build();
-        PickupActivity pickupService = new PickupService(s4);
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("5,0")).setTimeWindow(TimeWindow.newInstance(5., 5.)).build();
+        PickupActivityNEW pickupService = new PickupServiceDEPRECATED(s4);
         JobInsertionContext context = new JobInsertionContext(route, s4, route.getVehicle(), route.getDriver(), 0.);
         RouteLevelActivityInsertionCostsEstimator estimator = new RouteLevelActivityInsertionCostsEstimator(routingCosts, activityCosts, stateManager);
         estimator.setForwardLooking(0);
@@ -134,8 +129,8 @@ public void whenNewActWithTWInBetweenFirstAndSecond_and_forwardLookingIs0_itShou
 
     @Test
     public void whenNewActWithTWAndServiceTimeInBetweenFirstAndSecond_and_forwardLookingIs0_itShouldReturnCorrectCosts() {
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance("5,0")).setServiceTime(10.).setTimeWindow(TimeWindow.newInstance(5., 5.)).build();
-        PickupActivity pickupService = new PickupService(s4);
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("5,0")).setServiceTime(10.).setTimeWindow(TimeWindow.newInstance(5., 5.)).build();
+        PickupActivityNEW pickupService = new PickupServiceDEPRECATED(s4);
         pickupService.setTheoreticalEarliestOperationStartTime(5);
         pickupService.setTheoreticalLatestOperationStartTime(5);
 
@@ -150,8 +145,8 @@ public void whenNewActWithTWAndServiceTimeInBetweenFirstAndSecond_and_forwardLoo
 
     @Test
     public void whenNewActWithTWAndServiceTimeInBetweenFirstAndSecond_and_forwardLookingIs3_itShouldReturnCorrectCosts() {
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance("5,0")).setServiceTime(10.).setTimeWindow(TimeWindow.newInstance(5., 5.)).build();
-        PickupActivity pickupService = new PickupService(s4);
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("5,0")).setServiceTime(10.).setTimeWindow(TimeWindow.newInstance(5., 5.)).build();
+        PickupActivityNEW pickupService = new PickupServiceDEPRECATED(s4);
         JobInsertionContext context = new JobInsertionContext(route, s4, route.getVehicle(), route.getDriver(), 0.);
         RouteLevelActivityInsertionCostsEstimator estimator = new RouteLevelActivityInsertionCostsEstimator(routingCosts, activityCosts, stateManager);
         estimator.setForwardLooking(3);
@@ -163,13 +158,13 @@ public void whenNewActWithTWAndServiceTimeInBetweenFirstAndSecond_and_forwardLoo
 
     @Test
     public void whenNewActInBetweenSecondAndThird_and_forwardLookingIs0_itShouldReturnCorrectCosts() {
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance("5,0")).build();
-        PickupActivity pickupService = new PickupService(s4);
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("5,0")).build();
+        PickupActivityNEW pickupService = new PickupServiceDEPRECATED(s4);
         JobInsertionContext context = new JobInsertionContext(route, s4, route.getVehicle(), route.getDriver(), 0.);
         RouteLevelActivityInsertionCostsEstimator estimator = new RouteLevelActivityInsertionCostsEstimator(routingCosts, activityCosts, stateManager);
         estimator.setForwardLooking(0);
         double iCosts =
-            estimator.getCosts(context, route.getActivities().get(0), route.getActivities().get(1), pickupService, 10.);
+                estimator.getCosts(context, route.getActivities().get(0), route.getActivities().get(1), pickupService, 10.);
         double expectedTransportCosts = 10.;
         double expectedActivityCosts = 10.;
         assertEquals(expectedTransportCosts + expectedActivityCosts, iCosts, 0.01);
@@ -177,13 +172,13 @@ public void whenNewActInBetweenSecondAndThird_and_forwardLookingIs0_itShouldRetu
 
     @Test
     public void whenNewActInBetweenSecondAndThird_and_forwardLookingIs3_itShouldReturnCorrectCosts() {
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance("5,0")).build();
-        PickupActivity pickupService = new PickupService(s4);
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("5,0")).build();
+        PickupActivityNEW pickupService = new PickupServiceDEPRECATED(s4);
         JobInsertionContext context = new JobInsertionContext(route, s4, route.getVehicle(), route.getDriver(), 0.);
         RouteLevelActivityInsertionCostsEstimator estimator = new RouteLevelActivityInsertionCostsEstimator(routingCosts, activityCosts, stateManager);
         estimator.setForwardLooking(3);
         double iCosts =
-            estimator.getCosts(context, route.getActivities().get(0), route.getActivities().get(1), pickupService, 10.);
+                estimator.getCosts(context, route.getActivities().get(0), route.getActivities().get(1), pickupService, 10.);
         double expectedTransportCosts = 10.;
         double expectedActivityCosts = 10. + 10.;
         assertEquals(expectedTransportCosts + expectedActivityCosts, iCosts, 0.01);
@@ -191,15 +186,15 @@ public void whenNewActInBetweenSecondAndThird_and_forwardLookingIs3_itShouldRetu
 
     @Test
     public void whenNewActWithTWInBetweenSecondAndThird_and_forwardLookingIs3_itShouldReturnCorrectCosts() {
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance("5,0")).setTimeWindow(TimeWindow.newInstance(5., 5.)).build();
-        PickupActivity pickupService = new PickupService(s4);
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("5,0")).setTimeWindow(TimeWindow.newInstance(5., 5.)).build();
+        PickupActivityNEW pickupService = new PickupServiceDEPRECATED(s4);
         pickupService.setTheoreticalEarliestOperationStartTime(5);
         pickupService.setTheoreticalLatestOperationStartTime(5);
         JobInsertionContext context = new JobInsertionContext(route, s4, route.getVehicle(), route.getDriver(), 0.);
         RouteLevelActivityInsertionCostsEstimator estimator = new RouteLevelActivityInsertionCostsEstimator(routingCosts, activityCosts, stateManager);
         estimator.setForwardLooking(3);
         double iCosts =
-            estimator.getCosts(context, route.getActivities().get(0), route.getActivities().get(1), pickupService, 10.);
+                estimator.getCosts(context, route.getActivities().get(0), route.getActivities().get(1), pickupService, 10.);
         double expectedTransportCosts = 10.;
         double expectedActivityCosts = 10. + 10. + 10.;
         assertEquals(expectedTransportCosts + expectedActivityCosts, iCosts, 0.01);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestRouteLevelServiceInsertionCostEstimator.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestRouteLevelServiceInsertionCostEstimator.java
index b71454594..83699621d 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestRouteLevelServiceInsertionCostEstimator.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestRouteLevelServiceInsertionCostEstimator.java
@@ -17,11 +17,23 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.algorithm.state.UpdateVariableCosts;
-import com.graphhopper.jsprit.core.problem.AbstractActivity;
+import com.graphhopper.jsprit.core.problem.CopyJobActivityFactory;
 import com.graphhopper.jsprit.core.problem.JobActivityFactory;
 import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.SimpleJobActivityFactory;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingActivityCosts;
@@ -30,7 +42,8 @@
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.job.Service;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupService;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupServiceDEPRECATED;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
@@ -38,16 +51,6 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.CostFactory;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.List;
-
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
 
 /**
  * Created by schroeder on 02.07.14.
@@ -90,9 +93,9 @@ public double getActivityDuration(TourActivity tourAct, double arrivalTime, Driv
         };
         vrpBuilder.setActivityCosts(activityCosts);
 
-        Service s1 = Service.Builder.newInstance("s1").setLocation(Location.newInstance("10,0")).setTimeWindow(TimeWindow.newInstance(10., 10.)).build();
-        Service s2 = Service.Builder.newInstance("s2").setLocation(Location.newInstance("20,0")).setTimeWindow(TimeWindow.newInstance(20., 20.)).build();
-        Service s3 = Service.Builder.newInstance("s3").setLocation(Location.newInstance("30,0")).setTimeWindow(TimeWindow.newInstance(30., 30.)).build();
+        Service s1 = new Service.Builder("s1").setLocation(Location.newInstance("10,0")).setTimeWindow(TimeWindow.newInstance(10., 10.)).build();
+        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance("20,0")).setTimeWindow(TimeWindow.newInstance(20., 20.)).build();
+        Service s3 = new Service.Builder("s3").setLocation(Location.newInstance("30,0")).setTimeWindow(TimeWindow.newInstance(30., 30.)).build();
         vrpBuilder.addJob(s1).addJob(s2).addJob(s3);
 
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").build();
@@ -109,12 +112,7 @@ public double getActivityDuration(TourActivity tourAct, double arrivalTime, Driv
         vrp.getActivities(s3).get(0).setTheoreticalEarliestOperationStartTime(30);
         vrp.getActivities(s3).get(0).setTheoreticalLatestOperationStartTime(30);
 
-        activityFactory = new JobActivityFactory() {
-            @Override
-            public List<AbstractActivity> createActivities(Job job) {
-                return vrp.copyAndGetActivities(job);
-            }
-        };
+        activityFactory = new CopyJobActivityFactory();
         route = VehicleRoute.Builder.newInstance(vehicle).setJobActivityFactory(activityFactory).addService(s1).addService(s2).addService(s3).build();
 
         VehicleRoutingProblem vrpMock = mock(VehicleRoutingProblem.class);
@@ -127,62 +125,45 @@ public double getActivityDuration(TourActivity tourAct, double arrivalTime, Driv
 
     @Test
     public void whenNewServiceNeedToBeInserted_itShouldReturnCorrectInsertionCosts() {
-        final Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance("5,0")).setTimeWindow(TimeWindow.newInstance(5., 5.)).build();
+        final Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("5,0")).setTimeWindow(TimeWindow.newInstance(5., 5.)).build();
         RouteLevelActivityInsertionCostsEstimator estimator = new RouteLevelActivityInsertionCostsEstimator(routingCosts, activityCosts, stateManager);
         estimator.setForwardLooking(0);
         ServiceInsertionOnRouteLevelCalculator routeInserter = new ServiceInsertionOnRouteLevelCalculator(routingCosts,
-            activityCosts, estimator, constraintManager, constraintManager);
+                activityCosts, estimator, constraintManager, constraintManager);
         routeInserter.setStates(stateManager);
-        routeInserter.setJobActivityFactory(new JobActivityFactory() {
-            @Override
-            public List<AbstractActivity> createActivities(Job job) {
-                List<AbstractActivity> acts = activityFactory.createActivities(job);
-                if (acts.isEmpty()) {
-                    acts.add(new PickupService(s4));
-                }
-                return acts;
-            }
-        });
+        routeInserter.setJobActivityFactory(new SimpleJobActivityFactory());
         InsertionData iData = routeInserter.getInsertionData(route, s4, route.getVehicle(), route.getDepartureTime(), route.getDriver(), Double.MAX_VALUE);
         assertEquals(0., iData.getInsertionCost(), 0.01);
     }
 
     @Test
     public void whenNewServiceNeedToBeInserted_itShouldReturnCorrectInsertionIndex() {
-        final Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance("5,0")).setTimeWindow(TimeWindow.newInstance(5., 5.)).build();
+        final Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("5,0")).setTimeWindow(TimeWindow.newInstance(5., 5.)).build();
         RouteLevelActivityInsertionCostsEstimator estimator = new RouteLevelActivityInsertionCostsEstimator(routingCosts, activityCosts, stateManager);
         estimator.setForwardLooking(0);
         final ServiceInsertionOnRouteLevelCalculator routeInserter = new ServiceInsertionOnRouteLevelCalculator(routingCosts,
-            activityCosts, estimator, constraintManager, constraintManager);
+                activityCosts, estimator, constraintManager, constraintManager);
         routeInserter.setStates(stateManager);
-        routeInserter.setJobActivityFactory(new JobActivityFactory() {
-            @Override
-            public List<AbstractActivity> createActivities(Job job) {
-                List<AbstractActivity> acts = activityFactory.createActivities(job);
-                if (acts.isEmpty()) {
-                    acts.add(new PickupService(s4));
-                }
-                return acts;
-            }
-        });
+        routeInserter.setJobActivityFactory(new SimpleJobActivityFactory());
         InsertionData iData = routeInserter.getInsertionData(route, s4, route.getVehicle(), route.getDepartureTime(), route.getDriver(), Double.MAX_VALUE);
         assertEquals(0, iData.getDeliveryInsertionIndex(), 0.01);
     }
 
     @Test
     public void whenNewServiceWithServiceTimeNeedToBeInserted_itShouldReturnCorrectInsertionData() {
-        final Service s4 = Service.Builder.newInstance("s4").setServiceTime(10.).setLocation(Location.newInstance("5,0")).setTimeWindow(TimeWindow.newInstance(5., 5.)).build();
+        final Service s4 = new Service.Builder("s4").setServiceTime(10.).setLocation(Location.newInstance("5,0")).setTimeWindow(TimeWindow.newInstance(5., 5.)).build();
         RouteLevelActivityInsertionCostsEstimator estimator = new RouteLevelActivityInsertionCostsEstimator(routingCosts, activityCosts, stateManager);
         estimator.setForwardLooking(0);
         ServiceInsertionOnRouteLevelCalculator routeInserter = new ServiceInsertionOnRouteLevelCalculator(routingCosts,
-            activityCosts, estimator, constraintManager, constraintManager);
+                activityCosts, estimator, constraintManager, constraintManager);
         routeInserter.setStates(stateManager);
         routeInserter.setJobActivityFactory(new JobActivityFactory() {
             @Override
-            public List<AbstractActivity> createActivities(Job job) {
-                List<AbstractActivity> acts = activityFactory.createActivities(job);
+            public List<JobActivity> createActivities(Job job) {
+                List<JobActivity> acts = activityFactory.createActivities(job);
                 if (acts.isEmpty()) {
-                    PickupService pickupService = new PickupService(s4);
+                    // TODO - Balage1551
+                    PickupServiceDEPRECATED pickupService = new PickupServiceDEPRECATED(s4);
                     pickupService.setTheoreticalEarliestOperationStartTime(5);
                     pickupService.setTheoreticalLatestOperationStartTime(5);
                     acts.add(pickupService);
@@ -198,20 +179,21 @@ public void whenNewServiceWithServiceTimeNeedToBeInserted_itShouldReturnCorrectI
 
     @Test
     public void whenNewServiceWithServiceTimeNeedToBeInsertedAndRouteIsEmpty_itShouldReturnCorrectInsertionData() {
-        final Service s4 = Service.Builder.newInstance("s4").setServiceTime(10.).setLocation(Location.newInstance("5,0")).setTimeWindow(TimeWindow.newInstance(5., 5.)).build();
-//        PickupActivity pickupService = new PickupService(s4);
+        final Service s4 = new Service.Builder("s4").setServiceTime(10.).setLocation(Location.newInstance("5,0")).setTimeWindow(TimeWindow.newInstance(5., 5.)).build();
+//        PickupActivity pickupService = new PickupServiceDEPRECATED(s4);
         VehicleRoute emptyroute = VehicleRoute.emptyRoute();
         RouteLevelActivityInsertionCostsEstimator estimator = new RouteLevelActivityInsertionCostsEstimator(routingCosts, activityCosts, stateManager);
         estimator.setForwardLooking(0);
         ServiceInsertionOnRouteLevelCalculator routeInserter = new ServiceInsertionOnRouteLevelCalculator(routingCosts,
-            activityCosts, estimator, constraintManager, constraintManager);
+                activityCosts, estimator, constraintManager, constraintManager);
         routeInserter.setStates(stateManager);
         routeInserter.setJobActivityFactory(new JobActivityFactory() {
             @Override
-            public List<AbstractActivity> createActivities(Job job) {
-                List<AbstractActivity> acts = activityFactory.createActivities(job);
+            public List<JobActivity> createActivities(Job job) {
+                // TODO - Balage1551
+                List<JobActivity> acts = activityFactory.createActivities(job);
                 if (acts.isEmpty()) {
-                    PickupService pickupService = new PickupService(s4);
+                    PickupServiceDEPRECATED pickupService = new PickupServiceDEPRECATED(s4);
                     pickupService.setTheoreticalEarliestOperationStartTime(5);
                     pickupService.setTheoreticalLatestOperationStartTime(5);
                     acts.add(pickupService);
@@ -226,20 +208,21 @@ public void whenNewServiceWithServiceTimeNeedToBeInsertedAndRouteIsEmpty_itShoul
 
     @Test
     public void whenNewServiceWithServiceTimeAndTWNeedToBeInsertedAndRouteIsEmpty_itShouldReturnCorrectInsertionData() {
-        final Service s4 = Service.Builder.newInstance("s4").setServiceTime(10.).setLocation(Location.newInstance("5,0")).setTimeWindow(TimeWindow.newInstance(3., 3.)).build();
-//        PickupActivity pickupService = new PickupService(s4);
+        final Service s4 = new Service.Builder("s4").setServiceTime(10.).setLocation(Location.newInstance("5,0")).setTimeWindow(TimeWindow.newInstance(3., 3.)).build();
+//        PickupActivity pickupService = new PickupServiceDEPRECATED(s4);
         VehicleRoute emptyroute = VehicleRoute.emptyRoute();
         RouteLevelActivityInsertionCostsEstimator estimator = new RouteLevelActivityInsertionCostsEstimator(routingCosts, activityCosts, stateManager);
         estimator.setForwardLooking(0);
         ServiceInsertionOnRouteLevelCalculator routeInserter = new ServiceInsertionOnRouteLevelCalculator(routingCosts,
-            activityCosts, estimator, constraintManager, constraintManager);
+                activityCosts, estimator, constraintManager, constraintManager);
         routeInserter.setStates(stateManager);
         routeInserter.setJobActivityFactory(new JobActivityFactory() {
             @Override
-            public List<AbstractActivity> createActivities(Job job) {
-                List<AbstractActivity> acts = activityFactory.createActivities(job);
+            public List<JobActivity> createActivities(Job job) {
+                // TODO - Balage1551
+                List<JobActivity> acts = activityFactory.createActivities(job);
                 if (acts.isEmpty()) {
-                    PickupService pickupService = new PickupService(s4);
+                    PickupServiceDEPRECATED pickupService = new PickupServiceDEPRECATED(s4);
                     pickupService.setTheoreticalEarliestOperationStartTime(3);
                     pickupService.setTheoreticalLatestOperationStartTime(3);
                     acts.add(pickupService);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/DBSCANClustererTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/DBSCANClustererTest.java
index 4634144f8..d0756cb31 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/DBSCANClustererTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/DBSCANClustererTest.java
@@ -18,16 +18,18 @@
 
 package com.graphhopper.jsprit.core.algorithm.ruin;
 
+import java.util.List;
+
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.job.Service;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.util.EuclideanCosts;
-import junit.framework.Assert;
-import org.junit.Test;
 
-import java.util.List;
+import junit.framework.Assert;
 
 /**
  * Created by schroeder on 06/03/15.
@@ -36,9 +38,9 @@
 
     @Test
     public void itShouldReturnOneClusterOfSizeTwo() {
-        Service s1 = Service.Builder.newInstance("s1").setLocation(Location.newInstance(1, 1)).build();
-        Service s2 = Service.Builder.newInstance("s2").setLocation(Location.newInstance(10, 10)).build();
-        Service s3 = Service.Builder.newInstance("s3").setLocation(Location.newInstance(9, 9)).build();
+        Service s1 = new Service.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
+        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(10, 10)).build();
+        Service s3 = new Service.Builder("s3").setLocation(Location.newInstance(9, 9)).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoute r = VehicleRoute.Builder.newInstance(v).addService(s1).addService(s2).addService(s3).build();
@@ -52,9 +54,9 @@ public void itShouldReturnOneClusterOfSizeTwo() {
 
     @Test
     public void itShouldReturnOneCluster() {
-        Service s1 = Service.Builder.newInstance("s1").setLocation(Location.newInstance(1, 1)).build();
-        Service s2 = Service.Builder.newInstance("s2").setLocation(Location.newInstance(10, 10)).build();
-        Service s3 = Service.Builder.newInstance("s3").setLocation(Location.newInstance(9, 9)).build();
+        Service s1 = new Service.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
+        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(10, 10)).build();
+        Service s3 = new Service.Builder("s3").setLocation(Location.newInstance(9, 9)).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoute r = VehicleRoute.Builder.newInstance(v).addService(s1).addService(s2).addService(s3).build();
@@ -68,12 +70,12 @@ public void itShouldReturnOneCluster() {
 
     @Test
     public void itShouldReturnTwoClusters() {
-        Service s0 = Service.Builder.newInstance("s0").setLocation(Location.newInstance(9, 0)).build();
-        Service s1 = Service.Builder.newInstance("s1").setLocation(Location.newInstance(9, 1)).build();
-        Service s2 = Service.Builder.newInstance("s2").setLocation(Location.newInstance(9, 10)).build();
-        Service s3 = Service.Builder.newInstance("s3").setLocation(Location.newInstance(9, 9)).build();
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance(9, 16)).build();
-        Service s5 = Service.Builder.newInstance("s5").setLocation(Location.newInstance(9, 17)).build();
+        Service s0 = new Service.Builder("s0").setLocation(Location.newInstance(9, 0)).build();
+        Service s1 = new Service.Builder("s1").setLocation(Location.newInstance(9, 1)).build();
+        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(9, 10)).build();
+        Service s3 = new Service.Builder("s3").setLocation(Location.newInstance(9, 9)).build();
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance(9, 16)).build();
+        Service s5 = new Service.Builder("s5").setLocation(Location.newInstance(9, 17)).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoute r = VehicleRoute.Builder.newInstance(v).addService(s1).addService(s2).addService(s3)
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsImplTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsImplTest.java
index a17cd004d..273e08089 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsImplTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsImplTest.java
@@ -17,21 +17,22 @@
  */
 package com.graphhopper.jsprit.core.algorithm.ruin;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.ruin.distance.EuclideanServiceDistance;
 import com.graphhopper.jsprit.core.algorithm.ruin.distance.JobDistance;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.job.Service;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.ArrayList;
-import java.util.Iterator;
-import java.util.List;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
 
 
 public class JobNeighborhoodsImplTest {
@@ -51,14 +52,14 @@
     @Before
     public void doBefore() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
-        target = Service.Builder.newInstance("s1").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 5)).build();
-        s2 = Service.Builder.newInstance("s2").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 4)).build();
-        s3 = Service.Builder.newInstance("s3").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 3)).build();
-        s4 = Service.Builder.newInstance("s4").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 2)).build();
-
-        s5 = Service.Builder.newInstance("s5").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 6)).build();
-        s6 = Service.Builder.newInstance("s6").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 7)).build();
-        s7 = Service.Builder.newInstance("s7").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 8)).build();
+        target = new Service.Builder("s1").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 5)).build();
+        s2 = new Service.Builder("s2").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 4)).build();
+        s3 = new Service.Builder("s3").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 3)).build();
+        s4 = new Service.Builder("s4").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 2)).build();
+
+        s5 = new Service.Builder("s5").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 6)).build();
+        s6 = new Service.Builder("s6").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 7)).build();
+        s7 = new Service.Builder("s7").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 8)).build();
 
         vrp = builder.addJob(target).addJob(s2).addJob(s3).addJob(s4).addJob(s5).addJob(s6).addJob(s7).build();
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsOptimizedTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsOptimizedTest.java
index 82f471e9a..c4ca47bae 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsOptimizedTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsOptimizedTest.java
@@ -17,22 +17,24 @@
  */
 package com.graphhopper.jsprit.core.algorithm.ruin;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.ruin.distance.EuclideanServiceDistance;
 import com.graphhopper.jsprit.core.algorithm.ruin.distance.JobDistance;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.job.Service;
-import junit.framework.Assert;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.ArrayList;
-import java.util.Iterator;
-import java.util.List;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
+import junit.framework.Assert;
 
 
 public class JobNeighborhoodsOptimizedTest {
@@ -52,14 +54,14 @@
     @Before
     public void doBefore() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
-        target = Service.Builder.newInstance("s1").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 5)).build();
-        s2 = Service.Builder.newInstance("s2").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 4)).build();
-        s3 = Service.Builder.newInstance("s3").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 3)).build();
-        s4 = Service.Builder.newInstance("s4").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 2)).build();
-
-        s5 = Service.Builder.newInstance("s5").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 6)).build();
-        s6 = Service.Builder.newInstance("s6").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 7)).build();
-        s7 = Service.Builder.newInstance("s7").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 8)).build();
+        target = new Service.Builder("s1").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 5)).build();
+        s2 = new Service.Builder("s2").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 4)).build();
+        s3 = new Service.Builder("s3").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 3)).build();
+        s4 = new Service.Builder("s4").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 2)).build();
+
+        s5 = new Service.Builder("s5").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 6)).build();
+        s6 = new Service.Builder("s6").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 7)).build();
+        s7 = new Service.Builder("s7").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 8)).build();
 
         vrp = builder.addJob(target).addJob(s2).addJob(s3).addJob(s4).addJob(s5).addJob(s6).addJob(s7).build();
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsWithCapRestrictionImplTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsWithCapRestrictionImplTest.java
index 0851fdadd..57dbf18e1 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsWithCapRestrictionImplTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsWithCapRestrictionImplTest.java
@@ -17,21 +17,22 @@
  */
 package com.graphhopper.jsprit.core.algorithm.ruin;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.ruin.distance.EuclideanServiceDistance;
 import com.graphhopper.jsprit.core.algorithm.ruin.distance.JobDistance;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.job.Service;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.ArrayList;
-import java.util.Iterator;
-import java.util.List;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
 
 
 public class JobNeighborhoodsWithCapRestrictionImplTest {
@@ -51,14 +52,14 @@
     @Before
     public void doBefore() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
-        target = Service.Builder.newInstance("s1").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 5)).build();
-        s2 = Service.Builder.newInstance("s2").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 4)).build();
-        s3 = Service.Builder.newInstance("s3").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 3)).build();
-        s4 = Service.Builder.newInstance("s4").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 2)).build();
-
-        s5 = Service.Builder.newInstance("s5").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 6)).build();
-        s6 = Service.Builder.newInstance("s6").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 7)).build();
-        s7 = Service.Builder.newInstance("s7").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 8)).build();
+        target = new Service.Builder("s1").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 5)).build();
+        s2 = new Service.Builder("s2").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 4)).build();
+        s3 = new Service.Builder("s3").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 3)).build();
+        s4 = new Service.Builder("s4").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 2)).build();
+
+        s5 = new Service.Builder("s5").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 6)).build();
+        s6 = new Service.Builder("s6").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 7)).build();
+        s7 = new Service.Builder("s7").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 8)).build();
 
         vrp = builder.addJob(target).addJob(s2).addJob(s3).addJob(s4).addJob(s5).addJob(s6).addJob(s7).build();
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinBreakTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinBreakTest.java
index 02586d63a..03f2423fd 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinBreakTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinBreakTest.java
@@ -18,6 +18,12 @@
 
 package com.graphhopper.jsprit.core.algorithm.ruin;
 
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Break;
@@ -26,12 +32,8 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.BreakActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
-import junit.framework.Assert;
-import org.junit.Test;
 
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
+import junit.framework.Assert;
 
 /**
  * Created by schroeder on 04/08/15.
@@ -40,7 +42,7 @@
 
     @Test
     public void itShouldRuinBreaks() {
-        Break aBreak = Break.Builder.newInstance("break").build();
+        Break aBreak = new Break.Builder("break").build();
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance("loc"))
             .setBreak(aBreak).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().setFleetSize(VehicleRoutingProblem.FleetSize.FINITE).addVehicle(v).build();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinClustersTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinClustersTest.java
index 93e23eb22..4510d675d 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinClustersTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinClustersTest.java
@@ -18,6 +18,12 @@
 
 package com.graphhopper.jsprit.core.algorithm.ruin;
 
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Random;
+
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.ruin.distance.AvgServiceAndShipmentDistance;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
@@ -26,12 +32,8 @@
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.util.RandomNumberGeneration;
-import junit.framework.Assert;
-import org.junit.Test;
 
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Random;
+import junit.framework.Assert;
 
 /**
  * Created by schroeder on 06/03/15.
@@ -40,14 +42,14 @@
 
     @Test
     public void itShouldRuinTwoObviousClusters() {
-        Service s0 = Service.Builder.newInstance("s0").setLocation(Location.newInstance(9, 0)).build();
-        Service s1 = Service.Builder.newInstance("s1").setLocation(Location.newInstance(9, 1)).build();
-        Service s2 = Service.Builder.newInstance("s2").setLocation(Location.newInstance(9, 10)).build();
-        Service s3 = Service.Builder.newInstance("s3").setLocation(Location.newInstance(9, 9)).build();
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance(9, 16)).build();
-        Service s5 = Service.Builder.newInstance("s5").setLocation(Location.newInstance(9, 17)).build();
-        Service s6 = Service.Builder.newInstance("s6").setLocation(Location.newInstance(9, 15.5)).build();
-        Service s7 = Service.Builder.newInstance("s7").setLocation(Location.newInstance(9, 30)).build();
+        Service s0 = new Service.Builder("s0").setLocation(Location.newInstance(9, 0)).build();
+        Service s1 = new Service.Builder("s1").setLocation(Location.newInstance(9, 1)).build();
+        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(9, 10)).build();
+        Service s3 = new Service.Builder("s3").setLocation(Location.newInstance(9, 9)).build();
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance(9, 16)).build();
+        Service s5 = new Service.Builder("s5").setLocation(Location.newInstance(9, 17)).build();
+        Service s6 = new Service.Builder("s6").setLocation(Location.newInstance(9, 15.5)).build();
+        Service s7 = new Service.Builder("s7").setLocation(Location.newInstance(9, 30)).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinWorstTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinWorstTest.java
index 61eb24854..7cc45e874 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinWorstTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinWorstTest.java
@@ -18,6 +18,14 @@
 
 package com.graphhopper.jsprit.core.algorithm.ruin;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
+import java.util.Arrays;
+import java.util.Collection;
+
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
@@ -26,13 +34,6 @@
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.util.Coordinate;
-import org.junit.Test;
-
-import java.util.Arrays;
-import java.util.Collection;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
 
 /**
  * Created by schroeder on 30/01/15.
@@ -41,11 +42,11 @@
 
     @Test
     public void itShouldRemoveCorrectNumber() {
-        Service s1 = Service.Builder.newInstance("s1")
+        Service s1 = new Service.Builder("s1")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(1, 1)).build()).build();
-        Service s2 = Service.Builder.newInstance("s2")
+        Service s2 = new Service.Builder("s2")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(3, 1)).build()).build();
-        Service s3 = Service.Builder.newInstance("s3")
+        Service s3 = new Service.Builder("s3")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(10, 10)).build()).build();
         VehicleImpl v = VehicleImpl.Builder.newInstance("v")
             .setStartLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(0, 0)).build()).build();
@@ -60,11 +61,11 @@ public void itShouldRemoveCorrectNumber() {
 
     @Test
     public void itShouldRemoveWorst() {
-        Service s1 = Service.Builder.newInstance("s1")
+        Service s1 = new Service.Builder("s1")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(1, 1)).build()).build();
-        Service s2 = Service.Builder.newInstance("s2")
+        Service s2 = new Service.Builder("s2")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(3, 1)).build()).build();
-        Service s3 = Service.Builder.newInstance("s3")
+        Service s3 = new Service.Builder("s3")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(10, 10)).build()).build();
         VehicleImpl v = VehicleImpl.Builder.newInstance("v")
             .setStartLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(0, 0)).build()).build();
@@ -79,11 +80,11 @@ public void itShouldRemoveWorst() {
 
     @Test
     public void itShouldRemoveWorstTwo() {
-        Service s1 = Service.Builder.newInstance("s1")
+        Service s1 = new Service.Builder("s1")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(1, 1)).build()).build();
-        Service s2 = Service.Builder.newInstance("s2")
+        Service s2 = new Service.Builder("s2")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(3, 1)).build()).build();
-        Service s3 = Service.Builder.newInstance("s3")
+        Service s3 = new Service.Builder("s3")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(10, 10)).build()).build();
         VehicleImpl v = VehicleImpl.Builder.newInstance("v")
             .setStartLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(0, 0)).build()).build();
@@ -107,11 +108,11 @@ public int createNumberToBeRemoved() {
 
     @Test
     public void itShouldRemoveShipment() {
-        Service s1 = Service.Builder.newInstance("s1")
+        Service s1 = new Service.Builder("s1")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(1, 1)).build()).build();
-        Service s2 = Service.Builder.newInstance("s2")
+        Service s2 = new Service.Builder("s2")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(3, 1)).build()).build();
-        Service s3 = Service.Builder.newInstance("s3")
+        Service s3 = new Service.Builder("s3")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(10, 10)).build()).build();
         Shipment shipment = Shipment.Builder.newInstance("ship1")
             .setPickupLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(2, 2)).build())
@@ -140,11 +141,11 @@ public int createNumberToBeRemoved() {
 
     @Test
     public void itShouldRemoveShipmentFromSecondRoute() {
-        Service s1 = Service.Builder.newInstance("s1")
+        Service s1 = new Service.Builder("s1")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(1, 1)).build()).build();
-        Service s2 = Service.Builder.newInstance("s2")
+        Service s2 = new Service.Builder("s2")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(3, 1)).build()).build();
-        Service s3 = Service.Builder.newInstance("s3")
+        Service s3 = new Service.Builder("s3")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(10, 10)).build()).build();
         Shipment shipment = Shipment.Builder.newInstance("ship1")
             .setPickupLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(3, 1)).build())
@@ -177,11 +178,11 @@ public int createNumberToBeRemoved() {
 
     @Test
     public void itShouldRemoveServiceAndShipmentFromSecondRoute() {
-        Service s1 = Service.Builder.newInstance("s1")
+        Service s1 = new Service.Builder("s1")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(1, 1)).build()).build();
-        Service s2 = Service.Builder.newInstance("s2")
+        Service s2 = new Service.Builder("s2")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(3, 1)).build()).build();
-        Service s3 = Service.Builder.newInstance("s3")
+        Service s3 = new Service.Builder("s3")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(10, 10)).build()).build();
         Shipment shipment = Shipment.Builder.newInstance("ship1")
             .setPickupLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(3, 1)).build())
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/AverageJobDistanceTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/AverageJobDistanceTest.java
index 4de9efc79..bd6ca96d9 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/AverageJobDistanceTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/AverageJobDistanceTest.java
@@ -17,17 +17,18 @@
  */
 package com.graphhopper.jsprit.core.algorithm.ruin.distance;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.job.Service;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.util.Coordinate;
 import com.graphhopper.jsprit.core.util.CrowFlyCosts;
 import com.graphhopper.jsprit.core.util.Locations;
-import org.junit.Before;
-import org.junit.Test;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
 
 
 public class AverageJobDistanceTest {
@@ -72,8 +73,8 @@ public void distanceOfTwoEqualShipmentsShouldBeSmallerThanAnyOtherDistance() {
 
     @Test
     public void whenServicesHaveSameLocation_distanceShouldBeZero() {
-        Service s1 = Service.Builder.newInstance("s1").addSizeDimension(0, 1).setLocation(Location.newInstance("10,0")).build();
-        Service s2 = Service.Builder.newInstance("s2").addSizeDimension(0, 1).setLocation(Location.newInstance("10,0")).build();
+        Service s1 = new Service.Builder("s1").addSizeDimension(0, 1).setLocation(Location.newInstance("10,0")).build();
+        Service s2 = new Service.Builder("s2").addSizeDimension(0, 1).setLocation(Location.newInstance("10,0")).build();
 
         double dist = new AvgServiceAndShipmentDistance(routingCosts).getDistance(s1, s2);
         assertEquals(0.0, dist, 0.01);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/TestJobDistanceAvgCosts.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/TestJobDistanceAvgCosts.java
index 42f4e8229..5c81a3f59 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/TestJobDistanceAvgCosts.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/TestJobDistanceAvgCosts.java
@@ -17,12 +17,13 @@
  */
 package com.graphhopper.jsprit.core.algorithm.ruin.distance;
 
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.driver.Driver;
 import com.graphhopper.jsprit.core.problem.job.Service;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
-import org.junit.Test;
 
 
 public class TestJobDistanceAvgCosts {
@@ -57,7 +58,7 @@ public double getTransportTime(Location from, Location to,
             }
         };
         AvgServiceDistance c = new AvgServiceDistance(costs);
-        c.getDistance(Service.Builder.newInstance("1").addSizeDimension(0, 1).setLocation(Location.newInstance("foo")).build(), Service.Builder.newInstance("2").addSizeDimension(0, 2).setLocation(Location.newInstance("foo")).build());
+        c.getDistance(new Service.Builder("1").addSizeDimension(0, 1).setLocation(Location.newInstance("foo")).build(), new Service.Builder("2").addSizeDimension(0, 2).setLocation(Location.newInstance("foo")).build());
     }
 
     @Test(expected = NullPointerException.class)
@@ -92,7 +93,7 @@ public double getTransportTime(Location from, Location to,
             }
         };
         AvgServiceDistance c = new AvgServiceDistance(costs);
-        c.getDistance(Service.Builder.newInstance("1").addSizeDimension(0, 1).setLocation(Location.newInstance("loc")).build(), Service.Builder.newInstance("2").addSizeDimension(0, 2).setLocation(Location.newInstance("loc")).build());
+        c.getDistance(new Service.Builder("1").addSizeDimension(0, 1).setLocation(Location.newInstance("loc")).build(), new Service.Builder("2").addSizeDimension(0, 2).setLocation(Location.newInstance("loc")).build());
     }
 
 }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/selector/SelectBestTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/selector/SelectBestTest.java
index 26b7dce72..0ae253b0d 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/selector/SelectBestTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/selector/SelectBestTest.java
@@ -17,18 +17,19 @@
  */
 package com.graphhopper.jsprit.core.algorithm.selector;
 
-import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
-import org.junit.Test;
-
-import java.util.Arrays;
-import java.util.Collections;
-
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertThat;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
+import java.util.Arrays;
+import java.util.Collections;
+
+import org.junit.Test;
+
+import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
+
 
 public class SelectBestTest {
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/selector/SelectRandomlyTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/selector/SelectRandomlyTest.java
index a67a3f506..0f6f599d8 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/selector/SelectRandomlyTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/selector/SelectRandomlyTest.java
@@ -17,19 +17,20 @@
  */
 package com.graphhopper.jsprit.core.algorithm.selector;
 
-import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
-import org.junit.Test;
-
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.Random;
-
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertThat;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.Random;
+
+import org.junit.Test;
+
+import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
+
 
 public class SelectRandomlyTest {
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/HardPickupAndDeliveryShipmentActivityConstraintTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/HardPickupAndDeliveryShipmentActivityConstraintTest.java
index 83e38675b..61951db69 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/HardPickupAndDeliveryShipmentActivityConstraintTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/HardPickupAndDeliveryShipmentActivityConstraintTest.java
@@ -17,6 +17,11 @@
  */
 package com.graphhopper.jsprit.core.algorithm.state;
 
+import static org.junit.Assert.assertEquals;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
@@ -25,16 +30,12 @@
 import com.graphhopper.jsprit.core.problem.job.Service;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverShipment;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupService;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupShipment;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverShipmentDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupServiceDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupShipmentDEPRECATED;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
-import org.junit.Before;
-import org.junit.Test;
-
-import static org.junit.Assert.assertEquals;
 
 
 public class HardPickupAndDeliveryShipmentActivityConstraintTest {
@@ -57,8 +58,8 @@
 
     @Before
     public void doBefore() {
-        s1 = Service.Builder.newInstance("s1").setLocation(Location.newInstance("loc")).build();
-        s2 = Service.Builder.newInstance("s2").setLocation(Location.newInstance("loc")).build();
+        s1 = new Service.Builder("s1").setLocation(Location.newInstance("loc")).build();
+        s2 = new Service.Builder("s2").setLocation(Location.newInstance("loc")).build();
         shipment = Shipment.Builder.newInstance("shipment").setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).setDeliveryLocation(Location.newInstance("delLoc")).addSizeDimension(0, 1).build();
 
 
@@ -76,18 +77,18 @@ public void doBefore() {
 
     @Test
     public void whenPickupActivityIsInsertedAndLoadIsSufficient_returnFullFilled() {
-        PickupService pickupService = (PickupService) vrp.getActivities(s1).get(0);
-        PickupService anotherService = (PickupService) vrp.getActivities(s2).get(0);
-        PickupShipment pickupShipment = (PickupShipment) vrp.getActivities(shipment).get(0);
+        PickupServiceDEPRECATED pickupService = (PickupServiceDEPRECATED) vrp.getActivities(s1).get(0);
+        PickupServiceDEPRECATED anotherService = (PickupServiceDEPRECATED) vrp.getActivities(s2).get(0);
+        PickupShipmentDEPRECATED pickupShipment = (PickupShipmentDEPRECATED) vrp.getActivities(shipment).get(0);
 
         assertEquals(ConstraintsStatus.FULFILLED, constraint.fulfilled(iFacts, pickupService, pickupShipment, anotherService, 0.0));
     }
 
     @Test
     public void whenPickupActivityIsInsertedAndLoadIsNotSufficient_returnNOT_FullFilled() {
-        PickupService pickupService = (PickupService) vrp.getActivities(s1).get(0);
-        PickupService anotherService = (PickupService) vrp.getActivities(s2).get(0);
-        PickupShipment pickupShipment = (PickupShipment) vrp.getActivities(shipment).get(0);
+        PickupServiceDEPRECATED pickupService = (PickupServiceDEPRECATED) vrp.getActivities(s1).get(0);
+        PickupServiceDEPRECATED anotherService = (PickupServiceDEPRECATED) vrp.getActivities(s2).get(0);
+        PickupShipmentDEPRECATED pickupShipment = (PickupShipmentDEPRECATED) vrp.getActivities(shipment).get(0);
 
         stateManager.putInternalTypedActivityState(pickupService, InternalStates.LOAD, Capacity.Builder.newInstance().addDimension(0, 2).build());
 //		when(stateManager.getActivityState(pickupService, StateFactory.LOAD)).thenReturn(StateFactory.createState(2.0));
@@ -96,10 +97,10 @@ public void whenPickupActivityIsInsertedAndLoadIsNotSufficient_returnNOT_FullFil
 
     @Test
     public void whenDeliveryActivityIsInsertedAndLoadIsSufficient_returnFullFilled() {
-        PickupService pickupService = (PickupService) vrp.getActivities(s1).get(0);
-        PickupService anotherService = (PickupService) vrp.getActivities(s2).get(0);
+        PickupServiceDEPRECATED pickupService = (PickupServiceDEPRECATED) vrp.getActivities(s1).get(0);
+        PickupServiceDEPRECATED anotherService = (PickupServiceDEPRECATED) vrp.getActivities(s2).get(0);
 
-        DeliverShipment deliverShipment = (DeliverShipment) vrp.getActivities(shipment).get(1);
+        DeliverShipmentDEPRECATED deliverShipment = (DeliverShipmentDEPRECATED) vrp.getActivities(shipment).get(1);
 
         stateManager.putInternalTypedActivityState(pickupService, InternalStates.LOAD, Capacity.Builder.newInstance().addDimension(0, 1).build());
 //		stateManager.putInternalActivityState(pickupService, StateFactory.LOAD, StateFactory.createState(1));
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/LoadStateTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/LoadStateTest.java
index a7e52ec9d..5b889dde5 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/LoadStateTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/LoadStateTest.java
@@ -18,21 +18,28 @@
 
 package com.graphhopper.jsprit.core.algorithm.state;
 
-import com.graphhopper.jsprit.core.problem.*;
-import com.graphhopper.jsprit.core.problem.job.*;
-import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
-import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
-import org.junit.Before;
-import org.junit.Test;
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
 
 import java.util.Arrays;
 import java.util.Collections;
-import java.util.List;
 
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
+import org.junit.Before;
+import org.junit.Test;
+
+import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.CopyJobActivityFactory;
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
+import com.graphhopper.jsprit.core.problem.job.Delivery;
+import com.graphhopper.jsprit.core.problem.job.Job;
+import com.graphhopper.jsprit.core.problem.job.Pickup;
+import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 
 /**
  * Unit tests to test correct calc of load states
@@ -55,14 +62,14 @@ public void doBefore() {
         when(vehicle.getType()).thenReturn(type);
 
         VehicleRoutingProblem.Builder serviceProblemBuilder = VehicleRoutingProblem.Builder.newInstance();
-        Service s1 = Service.Builder.newInstance("s").addSizeDimension(0, 10).setLocation(Location.newInstance("loc")).build();
-        Service s2 = Service.Builder.newInstance("s2").addSizeDimension(0, 5).setLocation(Location.newInstance("loc")).build();
+        Service s1 = new Service.Builder("s").addSizeDimension(0, 10).setLocation(Location.newInstance("loc")).build();
+        Service s2 = new Service.Builder("s2").addSizeDimension(0, 5).setLocation(Location.newInstance("loc")).build();
         serviceProblemBuilder.addJob(s1).addJob(s2);
         final VehicleRoutingProblem serviceProblem = serviceProblemBuilder.build();
 
         final VehicleRoutingProblem.Builder pdProblemBuilder = VehicleRoutingProblem.Builder.newInstance();
-        Pickup pickup = (Pickup) Pickup.Builder.newInstance("pick").addSizeDimension(0, 10).setLocation(Location.newInstance("loc")).build();
-        Delivery delivery = (Delivery) Delivery.Builder.newInstance("del").addSizeDimension(0, 5).setLocation(Location.newInstance("loc")).build();
+        Pickup pickup = new Pickup.Builder("pick").addSizeDimension(0, 10).setLocation(Location.newInstance("loc")).build();
+        Delivery delivery = new Delivery.Builder("del").addSizeDimension(0, 5).setLocation(Location.newInstance("loc")).build();
         pdProblemBuilder.addJob(pickup).addJob(delivery);
         final VehicleRoutingProblem pdProblem = pdProblemBuilder.build();
 
@@ -73,32 +80,15 @@ public void doBefore() {
         final VehicleRoutingProblem shipmentProblem = shipmentProblemBuilder.build();
 
         VehicleRoute.Builder serviceRouteBuilder = VehicleRoute.Builder.newInstance(vehicle);
-        serviceRouteBuilder.setJobActivityFactory(new JobActivityFactory() {
-
-            @Override
-            public List<AbstractActivity> createActivities(Job job) {
-                return serviceProblem.copyAndGetActivities(job);
-            }
-
-        });
+        serviceRouteBuilder.setJobActivityFactory(new CopyJobActivityFactory());
         serviceRoute = serviceRouteBuilder.addService(s1).addService(s2).build();
 
         VehicleRoute.Builder pdRouteBuilder = VehicleRoute.Builder.newInstance(vehicle);
-        pdRouteBuilder.setJobActivityFactory(new JobActivityFactory() {
-            @Override
-            public List<AbstractActivity> createActivities(Job job) {
-                return pdProblem.copyAndGetActivities(job);
-            }
-        });
+        pdRouteBuilder.setJobActivityFactory(new CopyJobActivityFactory());
         pickup_delivery_route = pdRouteBuilder.addService(pickup).addService(delivery).build();
 
         VehicleRoute.Builder shipmentRouteBuilder = VehicleRoute.Builder.newInstance(vehicle);
-        shipmentRouteBuilder.setJobActivityFactory(new JobActivityFactory() {
-            @Override
-            public List<AbstractActivity> createActivities(Job job) {
-                return shipmentProblem.copyAndGetActivities(job);
-            }
-        });
+        shipmentRouteBuilder.setJobActivityFactory(new CopyJobActivityFactory());
         shipment_route = shipmentRouteBuilder.addPickup(shipment1).addPickup(shipment2).addDelivery(shipment2).addDelivery(shipment1).build();
 
         VehicleRoutingProblem vrpMock = mock(VehicleRoutingProblem.class);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/StateManagerTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/StateManagerTest.java
index 40c89edc5..134bf93b2 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/StateManagerTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/StateManagerTest.java
@@ -17,43 +17,53 @@
  */
 package com.graphhopper.jsprit.core.algorithm.state;
 
-import com.graphhopper.jsprit.core.problem.*;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertTrue;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Test;
+
+import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.JobActivityFactory;
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.job.Service;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.ServiceActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.ServiceActivityNEW;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
-import org.junit.Assert;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import static org.junit.Assert.*;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
 
 public class StateManagerTest {
 
     static class ActFac implements JobActivityFactory {
 
         @Override
-        public List<AbstractActivity> createActivities(Job job) {
-            ServiceActivity act = mock(ServiceActivity.class);
+        public List<JobActivity> createActivities(Job job) {
+            ServiceActivityNEW act = mock(ServiceActivityNEW.class);
             when(act.getIndex()).thenReturn(1);
-            List<AbstractActivity> acts = new ArrayList<AbstractActivity>();
+            List<JobActivity> acts = new ArrayList<>();
             acts.add(act);
             return acts;
         }
     }
 
     private VehicleRoute getRoute(Vehicle vehicle) {
-        return VehicleRoute.Builder.newInstance(vehicle).setJobActivityFactory(new ActFac()).addService(Service.Builder.newInstance("s").setLocation(Location.newInstance("loc")).build()).build();
+        return VehicleRoute.Builder.newInstance(vehicle).setJobActivityFactory(new ActFac())
+                        .addService(new Service.Builder("s")
+                                        .setLocation(Location.newInstance("loc")).build())
+                        .build();
     }
 
     private VehicleRoutingProblem vrpMock;
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdatePracticalTimeWindowTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdatePracticalTimeWindowTest.java
index 5878e12c6..105e1493c 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdatePracticalTimeWindowTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdatePracticalTimeWindowTest.java
@@ -17,8 +17,14 @@
  */
 package com.graphhopper.jsprit.core.algorithm.state;
 
-import com.graphhopper.jsprit.core.problem.AbstractActivity;
-import com.graphhopper.jsprit.core.problem.JobActivityFactory;
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+import org.junit.Before;
+import org.junit.Test;
+
+import com.graphhopper.jsprit.core.problem.CopyJobActivityFactory;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingActivityCosts;
@@ -26,7 +32,6 @@
 import com.graphhopper.jsprit.core.problem.cost.WaitingTimeCosts;
 import com.graphhopper.jsprit.core.problem.driver.Driver;
 import com.graphhopper.jsprit.core.problem.job.Delivery;
-import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.job.Pickup;
 import com.graphhopper.jsprit.core.problem.solution.route.ReverseRouteActivityVisitor;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
@@ -35,14 +40,6 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.util.CostFactory;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.List;
-
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
 
 public class UpdatePracticalTimeWindowTest {
 
@@ -69,22 +66,17 @@ public void doBefore() {
         reverseActivityVisitor = new ReverseRouteActivityVisitor();
         reverseActivityVisitor.addActivityVisitor(new UpdatePracticalTimeWindows(stateManager, routingCosts, activityCosts));
 
-        Pickup pickup = (Pickup) Pickup.Builder.newInstance("pick").setLocation(Location.newInstance("0,20")).setTimeWindow(TimeWindow.newInstance(0, 30)).build();
-        Delivery delivery = (Delivery) Delivery.Builder.newInstance("del").setLocation(Location.newInstance("20,20")).setTimeWindow(TimeWindow.newInstance(10, 40)).build();
-        Pickup pickup2 = (Pickup) Pickup.Builder.newInstance("pick2").setLocation(Location.newInstance("20,0")).setTimeWindow(TimeWindow.newInstance(20, 50)).build();
+        Pickup pickup = new Pickup.Builder("pick").setLocation(Location.newInstance("0,20")).setTimeWindow(TimeWindow.newInstance(0, 30)).build();
+        Delivery delivery = new Delivery.Builder("del").setLocation(Location.newInstance("20,20")).setTimeWindow(TimeWindow.newInstance(10, 40)).build();
+        Pickup pickup2 = new Pickup.Builder("pick2").setLocation(Location.newInstance("20,0")).setTimeWindow(TimeWindow.newInstance(20, 50)).build();
 
         Vehicle vehicle = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance("0,0")).setType(mock(VehicleType.class)).build();
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         final VehicleRoutingProblem vrp = vrpBuilder.addJob(pickup).addJob(pickup2).addJob(delivery).build();
 
-        route = VehicleRoute.Builder.newInstance(vehicle, mock(Driver.class)).setJobActivityFactory(new JobActivityFactory() {
-            @Override
-            public List<AbstractActivity> createActivities(Job job) {
-                return vrp.copyAndGetActivities(job);
-            }
-        })
-            .addService(pickup).addService(delivery).addService(pickup2).build();
+        route = VehicleRoute.Builder.newInstance(vehicle, mock(Driver.class)).setJobActivityFactory(new CopyJobActivityFactory())
+                .addService(pickup).addService(delivery).addService(pickup2).build();
 
         reverseActivityVisitor.visit(route);
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdateRequiredSkillsTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdateRequiredSkillsTest.java
index bfa8bf272..268a5cb9c 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdateRequiredSkillsTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdateRequiredSkillsTest.java
@@ -18,6 +18,14 @@
 
 package com.graphhopper.jsprit.core.algorithm.state;
 
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertTrue;
+
+import java.util.Arrays;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.Skills;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
@@ -26,14 +34,8 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
-import junit.framework.Assert;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.Arrays;
 
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertTrue;
+import junit.framework.Assert;
 
 /**
  * Tests skill updater
@@ -48,9 +50,9 @@
     public void doBefore() {
         VehicleType type = VehicleTypeImpl.Builder.newInstance("t").build();
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance("start")).setType(type).build();
-        Service service = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc")).addRequiredSkill("skill1").build();
-        Service service2 = Service.Builder.newInstance("s2").setLocation(Location.newInstance("loc")).addRequiredSkill("skill1").addRequiredSkill("skill2").addRequiredSkill("skill3").build();
-        Service service3 = Service.Builder.newInstance("s3").setLocation(Location.newInstance("loc")).addRequiredSkill("skill4").addRequiredSkill("skill5").build();
+        Service service = new Service.Builder("s").setLocation(Location.newInstance("loc")).addRequiredSkill("skill1").build();
+        Service service2 = new Service.Builder("s2").setLocation(Location.newInstance("loc")).addRequiredSkill("skill1").addRequiredSkill("skill2").addRequiredSkill("skill3").build();
+        Service service3 = new Service.Builder("s3").setLocation(Location.newInstance("loc")).addRequiredSkill("skill4").addRequiredSkill("skill5").build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addVehicle(vehicle).addJob(service)
             .addJob(service2).addJob(service3).build();
         route = VehicleRoute.Builder.newInstance(vehicle).setJobActivityFactory(vrp.getJobActivityFactory()).addService(service).addService(service2).addService(service3).build();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdateVehicleDependentTimeWindowTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdateVehicleDependentTimeWindowTest.java
index a07d61e57..989de09c8 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdateVehicleDependentTimeWindowTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdateVehicleDependentTimeWindowTest.java
@@ -18,8 +18,20 @@
 
 package com.graphhopper.jsprit.core.algorithm.state;
 
-import com.graphhopper.jsprit.core.problem.AbstractActivity;
-import com.graphhopper.jsprit.core.problem.JobActivityFactory;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Collections;
+
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Test;
+
+import com.graphhopper.jsprit.core.problem.CopyJobActivityFactory;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingActivityCosts;
@@ -35,13 +47,6 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.util.Coordinate;
 import com.graphhopper.jsprit.core.util.CostFactory;
-import org.junit.Assert;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.*;
-
-import static org.junit.Assert.*;
 
 /**
  * unit tests to test vehicle dependent time window updater
@@ -94,19 +99,16 @@ public void doBefore() {
 
         fleetManager = new FiniteFleetManagerFactory(vehicles).createFleetManager();
 
-        Service service = Service.Builder.newInstance("s1").setLocation(Location.newInstance("10,0")).build();
-        Service service2 = Service.Builder.newInstance("s2").setLocation(Location.newInstance("20,0")).build();
-        Service service3 = Service.Builder.newInstance("s3").setLocation(Location.newInstance("30,0")).build();
+        Service service = new Service.Builder("s1").setLocation(Location.newInstance("10,0")).build();
+        Service service2 = new Service.Builder("s2").setLocation(Location.newInstance("20,0")).build();
+        Service service3 = new Service.Builder("s3").setLocation(Location.newInstance("30,0")).build();
 
         vrpBuilder.addJob(service).addJob(service2).addJob(service3);
         vrp = vrpBuilder.build();
 
-        route = VehicleRoute.Builder.newInstance(vehicle).setJobActivityFactory(new JobActivityFactory() {
-            @Override
-            public List<AbstractActivity> createActivities(Job job) {
-                return vrp.copyAndGetActivities(job);
-            }
-        }).addService(service).addService(service2).addService(service3).build();
+        route = VehicleRoute.Builder.newInstance(vehicle).setJobActivityFactory(new CopyJobActivityFactory())
+                .addService(service).addService(service2)
+                .addService(service3).build();
 
 
         stateManager = new StateManager(vrp);
@@ -140,68 +142,68 @@ public void whenSwitchIsNotAllowed_itShouldCalOnlyStatesOfCurrentVehicle() {
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct3() {
         assertEquals(70., stateManager.getActivityState(route.getActivities().get(2), vehicle,
-            InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+                InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
 
     }
 
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct3_v2() {
         assertEquals(70., stateManager.getActivityState(route.getActivities().get(2), vehicle,
-            InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+                InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct3WithVehicle2() {
         assertEquals(30., stateManager.getActivityState(route.getActivities().get(2), vehicle2,
-            InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+                InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct3WithVehicle3() {
         assertEquals(90., stateManager.getActivityState(route.getActivities().get(2), vehicle3,
-            InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+                InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct2() {
         assertEquals(60., stateManager.getActivityState(route.getActivities().get(1), vehicle,
-            InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+                InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct2_v2() {
         assertEquals(60., stateManager.getActivityState(route.getActivities().get(1), vehicle,
-            InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+                InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct2WithVehicle2() {
         assertEquals(20., stateManager.getActivityState(route.getActivities().get(1), vehicle2,
-            InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+                InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct2WithVehicle3() {
         assertEquals(80., stateManager.getActivityState(route.getActivities().get(1), vehicle3,
-            InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+                InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct2WithEquivalentOfVehicle3() {
         assertEquals(80., stateManager.getActivityState(route.getActivities().get(1), equivalentOf3,
-            InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+                InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct1WithVehicle2() {
         assertEquals(10., stateManager.getActivityState(route.getActivities().get(0), vehicle2,
-            InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+                InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct1WithVehicle3() {
         assertEquals(70., stateManager.getActivityState(route.getActivities().get(0), vehicle3,
-            InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+                InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
 
@@ -209,9 +211,9 @@ public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct1WithVehicle3()
     public void twUpdateShouldWorkWithMultipleTWs(){
         //
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance("0,0")).setEarliestStart(0.).setLatestArrival(100.).build();
-        Service service = Service.Builder.newInstance("s1").setLocation(Location.newInstance("10,0"))
+        Service service = new Service.Builder("s1").setLocation(Location.newInstance("10,0"))
                 .addTimeWindow(10,20).addTimeWindow(30,40).build();
-        Service service2 = Service.Builder.newInstance("s2")
+        Service service2 = new Service.Builder("s2")
                 .addTimeWindow(20,30).addTimeWindow(40,60).addTimeWindow(70,80).setLocation(Location.newInstance("20,0")).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(service).addJob(service2).addVehicle(vehicle)
@@ -243,20 +245,20 @@ public void twUpdateShouldWorkWithMultipleTWs(){
     @Test
     public void updateOfOpenRoutesShouldBeDoneCorrectly(){
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v")
-            .setReturnToDepot(false)
-            .setStartLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(0, 0)).build())
-            .setLatestArrival(51)
-            .build();
+                .setReturnToDepot(false)
+                .setStartLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(0, 0)).build())
+                .setLatestArrival(51)
+                .build();
 
-        Service service = Service.Builder.newInstance("s")
-            .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(50, 0)).build()).build();
+        Service service = new Service.Builder("s")
+                .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(50, 0)).build()).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance()
-            .addJob(service).addVehicle(vehicle).setFleetSize(VehicleRoutingProblem.FleetSize.FINITE)
-            .build();
+                .addJob(service).addVehicle(vehicle).setFleetSize(VehicleRoutingProblem.FleetSize.FINITE)
+                .build();
 
         VehicleRoute route = VehicleRoute.Builder.newInstance(vehicle)
-            .setJobActivityFactory(vrp.getJobActivityFactory()).addService(service).build();
+                .setJobActivityFactory(vrp.getJobActivityFactory()).addService(service).build();
 
         stateManager = new StateManager(vrp);
         UpdateVehicleDependentPracticalTimeWindows updater = new UpdateVehicleDependentPracticalTimeWindows(stateManager, vrp.getTransportCosts(), vrp.getActivityCosts());
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/termination/IterationsWithoutImprovementTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/termination/IterationsWithoutImprovementTest.java
index 8cdd708a4..34a51f21b 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/termination/IterationsWithoutImprovementTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/termination/IterationsWithoutImprovementTest.java
@@ -19,13 +19,15 @@
 package com.graphhopper.jsprit.core.algorithm.termination;
 
 
-import com.graphhopper.jsprit.core.algorithm.SearchStrategy;
-import junit.framework.Assert;
-import org.junit.Test;
-
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
+import org.junit.Test;
+
+import com.graphhopper.jsprit.core.algorithm.SearchStrategy;
+
+import junit.framework.Assert;
+
 public class IterationsWithoutImprovementTest {
 
     @Test
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/termination/TimeTerminationTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/termination/TimeTerminationTest.java
index 095405b71..435e333a7 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/termination/TimeTerminationTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/termination/TimeTerminationTest.java
@@ -18,9 +18,10 @@
 
 package com.graphhopper.jsprit.core.algorithm.termination;
 
-import junit.framework.Assert;
 import org.junit.Test;
 
+import junit.framework.Assert;
+
 /**
  * Created by schroeder on 16.12.14.
  */
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyserTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyserTest.java
index 95d3431a8..3cf9ee782 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyserTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyserTest.java
@@ -19,6 +19,17 @@
 package com.graphhopper.jsprit.core.analysis;
 
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
+import java.util.Arrays;
+import java.util.Iterator;
+import java.util.List;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
@@ -38,15 +49,8 @@
 import com.graphhopper.jsprit.core.util.Coordinate;
 import com.graphhopper.jsprit.core.util.ManhattanCosts;
 import com.graphhopper.jsprit.core.util.TestUtils;
-import junit.framework.Assert;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.Arrays;
-import java.util.Iterator;
-import java.util.List;
 
-import static org.junit.Assert.*;
+import junit.framework.Assert;
 
 public class SolutionAnalyserTest {
 
@@ -68,12 +72,12 @@ public void doBefore() {
         VehicleImpl vehicle2 = VehicleImpl.Builder.newInstance("v2").setType(type)
             .setStartLocation(Location.newInstance(5, 0)).build();
 
-        Service s1 = Service.Builder.newInstance("s1")
+        Service s1 = new Service.Builder("s1")
             .setTimeWindow(TimeWindow.newInstance(10, 20))
             .setLocation(Location.newInstance(-10, 1)).addSizeDimension(0, 2)
             .addRequiredSkill("skill1")
             .build();
-        Service s2 = Service.Builder.newInstance("s2")
+        Service s2 = new Service.Builder("s2")
             .setLocation(Location.newInstance(-10, 10))
             .addSizeDimension(0, 3)
             .addRequiredSkill("skill2").addRequiredSkill("skill1")
@@ -87,11 +91,11 @@ public void doBefore() {
             .addRequiredSkill("skill3")
             .build();
 
-        Service s3 = Service.Builder.newInstance("s3")
+        Service s3 = new Service.Builder("s3")
             .setTimeWindow(TimeWindow.newInstance(10, 20))
             .setLocation(TestUtils.loc(Coordinate.newInstance(10, 1))).addSizeDimension(0, 2).build();
 
-        Service s4 = Service.Builder.newInstance("s4").setLocation(TestUtils.loc(Coordinate.newInstance(10, 10))).addSizeDimension(0, 3).build();
+        Service s4 = new Service.Builder("s4").setLocation(TestUtils.loc(Coordinate.newInstance(10, 10))).addSizeDimension(0, 3).build();
 
         Shipment shipment2 = Shipment.Builder.newInstance("ship2").setPickupLocation(TestUtils.loc(Coordinate.newInstance(15, 2)))
             .setPickupServiceTime(20.).setDeliveryServiceTime(20.)
@@ -122,12 +126,12 @@ public void buildAnotherScenarioWithOnlyOneVehicleAndWithoutAnyConstraintsBefore
             .setLatestArrival(150.)
             .build();
 
-        Pickup s1 = Pickup.Builder.newInstance("s1")
+        Pickup s1 = new Pickup.Builder("s1")
             .setTimeWindow(TimeWindow.newInstance(10, 20))
             .setLocation(Location.newInstance(-10, 1))
             .addSizeDimension(0, 10)
             .build();
-        Delivery s2 = Delivery.Builder.newInstance("s2")
+        Delivery s2 = new Delivery.Builder("s2")
             .setLocation(Location.newInstance(-10, 10))
             .setTimeWindow(TimeWindow.newInstance(10, 20))
             .addSizeDimension(0, 20)
@@ -139,12 +143,12 @@ public void buildAnotherScenarioWithOnlyOneVehicleAndWithoutAnyConstraintsBefore
             .setPickupTimeWindow(TimeWindow.newInstance(10, 20)).setDeliveryTimeWindow(TimeWindow.newInstance(10, 20))
             .build();
 
-        Pickup s3 = Pickup.Builder.newInstance("s3")
+        Pickup s3 = new Pickup.Builder("s3")
             .setTimeWindow(TimeWindow.newInstance(10, 20))
             .setLocation(TestUtils.loc(Coordinate.newInstance(10, 1)))
             .addSizeDimension(0, 10)
             .build();
-        Delivery s4 = Delivery.Builder.newInstance("s4").setLocation(Location.newInstance(10, 10))
+        Delivery s4 = new Delivery.Builder("s4").setLocation(Location.newInstance(10, 10))
             .addSizeDimension(0, 20)
             .setTimeWindow(TimeWindow.newInstance(10, 20))
             .build();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/CapacityTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/CapacityTest.java
index f8e5f089f..110d5e3bd 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/CapacityTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/CapacityTest.java
@@ -17,12 +17,14 @@
  */
 package com.graphhopper.jsprit.core.problem;
 
-import org.junit.Assert;
-import org.junit.Test;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
 
 import java.util.Random;
 
-import static org.junit.Assert.*;
+import org.junit.Assert;
+import org.junit.Test;
 
 public class CapacityTest {
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/LocationTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/LocationTest.java
index edcd76ffe..0e16ce430 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/LocationTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/LocationTest.java
@@ -18,11 +18,11 @@
 
 package com.graphhopper.jsprit.core.problem;
 
-import com.graphhopper.jsprit.core.util.Coordinate;
-
 import org.junit.Assert;
 import org.junit.Test;
 
+import com.graphhopper.jsprit.core.util.Coordinate;
+
 /**
  * Created by schroeder on 16.12.14.
  */
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/SkillsTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/SkillsTest.java
index b13c8bce2..d70c753d7 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/SkillsTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/SkillsTest.java
@@ -18,12 +18,12 @@
 
 package com.graphhopper.jsprit.core.problem;
 
-import org.junit.Test;
+import static org.junit.Assert.assertTrue;
 
 import java.util.HashSet;
 import java.util.Set;
 
-import static org.junit.Assert.assertTrue;
+import org.junit.Test;
 
 /**
  * Created by schroeder on 01.07.14.
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblemTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblemTest.java
index 0722a5513..190895173 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblemTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblemTest.java
@@ -17,6 +17,20 @@
  */
 package com.graphhopper.jsprit.core.problem;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertThat;
+import static org.junit.Assert.assertTrue;
+import static org.junit.matchers.JUnitMatchers.hasItem;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
 import com.graphhopper.jsprit.core.problem.cost.AbstractForwardVehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingActivityCosts;
@@ -24,6 +38,7 @@
 import com.graphhopper.jsprit.core.problem.driver.DriverImpl;
 import com.graphhopper.jsprit.core.problem.job.Delivery;
 import com.graphhopper.jsprit.core.problem.job.Pickup;
+import com.graphhopper.jsprit.core.problem.job.SequentialJobActivityList;
 import com.graphhopper.jsprit.core.problem.job.Service;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
@@ -34,16 +49,6 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.Coordinate;
 import com.graphhopper.jsprit.core.util.TestUtils;
-import org.junit.Test;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-
-import static org.junit.Assert.*;
-import static org.junit.matchers.JUnitMatchers.hasItem;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
 
 
 public class VehicleRoutingProblemTest {
@@ -136,9 +141,11 @@ public void whenServicesAreAdded_vrpShouldContainThem() {
         Service s1 = mock(Service.class);
         when(s1.getId()).thenReturn("s1");
         when(s1.getLocation()).thenReturn(Location.Builder.newInstance().setIndex(1).build());
+        when(s1.getActivityList()).thenReturn(new SequentialJobActivityList(s1));
         Service s2 = mock(Service.class);
         when(s2.getId()).thenReturn("s2");
         when(s2.getLocation()).thenReturn(Location.Builder.newInstance().setIndex(1).build());
+        when(s2.getActivityList()).thenReturn(new SequentialJobActivityList(s2));
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addJob(s1).addJob(s2);
@@ -148,7 +155,6 @@ public void whenServicesAreAdded_vrpShouldContainThem() {
         assertEquals(2, vrp.getJobs().size());
         assertEquals(s1, vrp.getJobs().get("s1"));
         assertEquals(s2, vrp.getJobs().get("s2"));
-        assertEquals(1,vrp.getAllLocations().size());
     }
 
 
@@ -157,9 +163,11 @@ public void whenPickupsAreAdded_vrpShouldContainThem() {
         Pickup s1 = mock(Pickup.class);
         when(s1.getId()).thenReturn("s1");
         when(s1.getLocation()).thenReturn(Location.Builder.newInstance().setIndex(1).build());
+        when(s1.getActivityList()).thenReturn(new SequentialJobActivityList(s1));
         Pickup s2 = mock(Pickup.class);
         when(s2.getId()).thenReturn("s2");
         when(s2.getLocation()).thenReturn(Location.Builder.newInstance().setIndex(1).build());
+        when(s2.getActivityList()).thenReturn(new SequentialJobActivityList(s2));
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addJob(s1).addJob(s2);
@@ -176,9 +184,11 @@ public void whenPickupsAreAddedAllAtOnce_vrpShouldContainThem() {
         Pickup s1 = mock(Pickup.class);
         when(s1.getId()).thenReturn("s1");
         when(s1.getLocation()).thenReturn(Location.Builder.newInstance().setIndex(1).build());
+        when(s1.getActivityList()).thenReturn(new SequentialJobActivityList(s1));
         Pickup s2 = mock(Pickup.class);
         when(s2.getId()).thenReturn("s2");
         when(s2.getLocation()).thenReturn(Location.Builder.newInstance().setIndex(1).build());
+        when(s2.getActivityList()).thenReturn(new SequentialJobActivityList(s2));
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addAllJobs(Arrays.asList(s1, s2));
@@ -196,10 +206,12 @@ public void whenDelivieriesAreAdded_vrpShouldContainThem() {
         when(s1.getId()).thenReturn("s1");
         when(s1.getSize()).thenReturn(Capacity.Builder.newInstance().build());
         when(s1.getLocation()).thenReturn(Location.Builder.newInstance().setIndex(1).build());
+        when(s1.getActivityList()).thenReturn(new SequentialJobActivityList(s1));
         Delivery s2 = mock(Delivery.class);
         when(s2.getId()).thenReturn("s2");
         when(s2.getSize()).thenReturn(Capacity.Builder.newInstance().build());
         when(s2.getLocation()).thenReturn(Location.Builder.newInstance().setIndex(1).build());
+        when(s2.getActivityList()).thenReturn(new SequentialJobActivityList(s2));
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addJob(s1).addJob(s2);
@@ -217,10 +229,12 @@ public void whenDelivieriesAreAddedAllAtOnce_vrpShouldContainThem() {
         when(s1.getId()).thenReturn("s1");
         when(s1.getSize()).thenReturn(Capacity.Builder.newInstance().build());
         when(s1.getLocation()).thenReturn(Location.Builder.newInstance().setIndex(1).build());
+        when(s1.getActivityList()).thenReturn(new SequentialJobActivityList(s1));
         Delivery s2 = mock(Delivery.class);
         when(s2.getId()).thenReturn("s2");
         when(s2.getSize()).thenReturn(Capacity.Builder.newInstance().build());
         when(s2.getLocation()).thenReturn(Location.Builder.newInstance().setIndex(1).build());
+        when(s2.getActivityList()).thenReturn(new SequentialJobActivityList(s2));
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addAllJobs(Arrays.asList(s1, s2));
@@ -237,9 +251,11 @@ public void whenServicesAreAddedAllAtOnce_vrpShouldContainThem() {
         Service s1 = mock(Service.class);
         when(s1.getId()).thenReturn("s1");
         when(s1.getLocation()).thenReturn(Location.Builder.newInstance().setIndex(1).build());
+        when(s1.getActivityList()).thenReturn(new SequentialJobActivityList(s1));
         Service s2 = mock(Service.class);
         when(s2.getId()).thenReturn("s2");
         when(s2.getLocation()).thenReturn(Location.Builder.newInstance().setIndex(1).build());
+        when(s2.getActivityList()).thenReturn(new SequentialJobActivityList(s2));
 
         Collection<Service> services = new ArrayList<Service>();
         services.add(s1);
@@ -285,13 +301,13 @@ public void whenSettingRoutingCosts_vprShouldContainIt() {
 
             @Override
             public double getTransportTime(Location from, Location to,
-                                           double departureTime, Driver driver, Vehicle vehicle) {
+                    double departureTime, Driver driver, Vehicle vehicle) {
                 return 0;
             }
 
             @Override
             public double getTransportCost(Location from, Location to,
-                                           double departureTime, Driver driver, Vehicle vehicle) {
+                    double departureTime, Driver driver, Vehicle vehicle) {
                 return 4.0;
             }
         });
@@ -362,7 +378,7 @@ public void whenAddingTwoVehicleWithDiffType_getAddedVehicleTypesShouldReturnThe
     @Test
     public void whenAddingVehicleWithDiffStartAndEnd_startLocationMustBeRegisteredInLocationMap() {
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance("start"))
-            .setEndLocation(Location.newInstance("end")).build();
+                .setEndLocation(Location.newInstance("end")).build();
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addVehicle(vehicle);
@@ -372,7 +388,7 @@ public void whenAddingVehicleWithDiffStartAndEnd_startLocationMustBeRegisteredIn
     @Test
     public void whenAddingVehicleWithDiffStartAndEnd_endLocationMustBeRegisteredInLocationMap() {
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance("start"))
-            .setEndLocation(Location.newInstance("end")).build();
+                .setEndLocation(Location.newInstance("end")).build();
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addVehicle(vehicle);
@@ -382,7 +398,7 @@ public void whenAddingVehicleWithDiffStartAndEnd_endLocationMustBeRegisteredInLo
     @Test
     public void whenAddingInitialRoute_itShouldBeAddedCorrectly() {
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v")
-            .setStartLocation(Location.newInstance("start")).setEndLocation(Location.newInstance("end")).build();
+                .setStartLocation(Location.newInstance("start")).setEndLocation(Location.newInstance("end")).build();
         VehicleRoute route = VehicleRoute.Builder.newInstance(vehicle, DriverImpl.noDriver()).build();
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addInitialVehicleRoute(route);
@@ -393,11 +409,11 @@ public void whenAddingInitialRoute_itShouldBeAddedCorrectly() {
     @Test
     public void whenAddingInitialRoutes_theyShouldBeAddedCorrectly() {
         VehicleImpl vehicle1 = VehicleImpl.Builder.newInstance("v")
-            .setStartLocation(Location.newInstance("start")).setEndLocation(Location.newInstance("end")).build();
+                .setStartLocation(Location.newInstance("start")).setEndLocation(Location.newInstance("end")).build();
         VehicleRoute route1 = VehicleRoute.Builder.newInstance(vehicle1, DriverImpl.noDriver()).build();
 
         VehicleImpl vehicle2 = VehicleImpl.Builder.newInstance("v")
-            .setStartLocation(Location.newInstance("start")).setEndLocation(Location.newInstance("end")).build();
+                .setStartLocation(Location.newInstance("start")).setEndLocation(Location.newInstance("end")).build();
         VehicleRoute route2 = VehicleRoute.Builder.newInstance(vehicle2, DriverImpl.noDriver()).build();
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
@@ -413,8 +429,8 @@ public void whenAddingInitialRoute_locationOfVehicleMustBeMemorized() {
         Location start = TestUtils.loc("start", Coordinate.newInstance(0, 1));
         Location end = Location.newInstance("end");
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v")
-            .setStartLocation(start)
-            .setEndLocation(end).build();
+                .setStartLocation(start)
+                .setEndLocation(end).build();
         VehicleRoute route = VehicleRoute.Builder.newInstance(vehicle, DriverImpl.noDriver()).build();
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addInitialVehicleRoute(route);
@@ -425,12 +441,12 @@ public void whenAddingInitialRoute_locationOfVehicleMustBeMemorized() {
 
     @Test
     public void whenAddingJobAndInitialRouteWithThatJobAfterwards_thisJobShouldNotBeInFinalJobMap() {
-        Service service = Service.Builder.newInstance("myService").setLocation(Location.newInstance("loc")).build();
+        Service service = new Service.Builder("myService").setLocation(Location.newInstance("loc")).build();
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addJob(service);
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v")
-            .setStartLocation(TestUtils.loc("start", Coordinate.newInstance(0, 1)))
-            .setEndLocation(Location.newInstance("end")).build();
+                .setStartLocation(TestUtils.loc("start", Coordinate.newInstance(0, 1)))
+                .setEndLocation(Location.newInstance("end")).build();
         VehicleRoute initialRoute = VehicleRoute.Builder.newInstance(vehicle).addService(service).build();
         vrpBuilder.addInitialVehicleRoute(initialRoute);
         VehicleRoutingProblem vrp = vrpBuilder.build();
@@ -440,9 +456,9 @@ public void whenAddingJobAndInitialRouteWithThatJobAfterwards_thisJobShouldNotBe
 
     @Test
     public void whenAddingTwoJobs_theyShouldHaveProperIndeces() {
-        Service service = Service.Builder.newInstance("myService").setLocation(Location.newInstance("loc")).build();
+        Service service = new Service.Builder("myService").setLocation(Location.newInstance("loc")).build();
         Shipment shipment = Shipment.Builder.newInstance("shipment").setPickupLocation(Location.Builder.newInstance().setId("pick").build())
-            .setDeliveryLocation(Location.newInstance("del")).build();
+                .setDeliveryLocation(Location.newInstance("del")).build();
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addJob(service);
         vrpBuilder.addJob(shipment);
@@ -456,8 +472,8 @@ public void whenAddingTwoJobs_theyShouldHaveProperIndeces() {
 
     @Test(expected = IllegalArgumentException.class)
     public void whenAddingTwoServicesWithTheSameId_itShouldThrowException() {
-        Service service1 = Service.Builder.newInstance("myService").setLocation(Location.newInstance("loc")).build();
-        Service service2 = Service.Builder.newInstance("myService").setLocation(Location.newInstance("loc")).build();
+        Service service1 = new Service.Builder("myService").setLocation(Location.newInstance("loc")).build();
+        Service service2 = new Service.Builder("myService").setLocation(Location.newInstance("loc")).build();
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addJob(service1);
         vrpBuilder.addJob(service2);
@@ -467,9 +483,9 @@ public void whenAddingTwoServicesWithTheSameId_itShouldThrowException() {
     @Test(expected = IllegalArgumentException.class)
     public void whenAddingTwoShipmentsWithTheSameId_itShouldThrowException() {
         Shipment shipment1 = Shipment.Builder.newInstance("shipment").setPickupLocation(Location.Builder.newInstance().setId("pick").build())
-            .setDeliveryLocation(Location.newInstance("del")).build();
+                .setDeliveryLocation(Location.newInstance("del")).build();
         Shipment shipment2 = Shipment.Builder.newInstance("shipment").setPickupLocation(Location.Builder.newInstance().setId("pick").build())
-            .setDeliveryLocation(Location.newInstance("del")).build();
+                .setDeliveryLocation(Location.newInstance("del")).build();
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addJob(shipment1);
         vrpBuilder.addJob(shipment2);
@@ -480,9 +496,9 @@ public void whenAddingTwoShipmentsWithTheSameId_itShouldThrowException() {
     @Test
     public void whenAddingTwoVehicles_theyShouldHaveProperIndices() {
         VehicleImpl veh1 = VehicleImpl.Builder.newInstance("v1").setStartLocation(TestUtils.loc("start", Coordinate.newInstance(0, 1)))
-            .setEndLocation(Location.newInstance("end")).build();
+                .setEndLocation(Location.newInstance("end")).build();
         VehicleImpl veh2 = VehicleImpl.Builder.newInstance("v2").setStartLocation(TestUtils.loc("start", Coordinate.newInstance(0, 1)))
-            .setEndLocation(Location.newInstance("end")).build();
+                .setEndLocation(Location.newInstance("end")).build();
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addVehicle(veh1);
@@ -497,11 +513,11 @@ public void whenAddingTwoVehicles_theyShouldHaveProperIndices() {
     @Test
     public void whenAddingTwoVehiclesWithSameTypeIdentifier_typeIdentifiersShouldHaveSameIndices() {
         VehicleImpl veh1 = VehicleImpl.Builder.newInstance("v1")
-            .setStartLocation(TestUtils.loc("start", Coordinate.newInstance(0, 1)))
-            .setEndLocation(Location.newInstance("end")).build();
+                .setStartLocation(TestUtils.loc("start", Coordinate.newInstance(0, 1)))
+                .setEndLocation(Location.newInstance("end")).build();
         VehicleImpl veh2 = VehicleImpl.Builder.newInstance("v2")
-            .setStartLocation(TestUtils.loc("start", Coordinate.newInstance(0, 1)))
-            .setEndLocation(Location.newInstance("end")).build();
+                .setStartLocation(TestUtils.loc("start", Coordinate.newInstance(0, 1)))
+                .setEndLocation(Location.newInstance("end")).build();
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addVehicle(veh1);
@@ -516,11 +532,11 @@ public void whenAddingTwoVehiclesWithSameTypeIdentifier_typeIdentifiersShouldHav
     @Test
     public void whenAddingTwoVehiclesDifferentTypeIdentifier_typeIdentifiersShouldHaveDifferentIndices() {
         VehicleImpl veh1 = VehicleImpl.Builder.newInstance("v1")
-            .setStartLocation(TestUtils.loc("start", Coordinate.newInstance(0, 1)))
-            .setEndLocation(Location.newInstance("end")).build();
+                .setStartLocation(TestUtils.loc("start", Coordinate.newInstance(0, 1)))
+                .setEndLocation(Location.newInstance("end")).build();
         VehicleImpl veh2 = VehicleImpl.Builder.newInstance("v2")
-            .setStartLocation(TestUtils.loc("startLoc", Coordinate.newInstance(0, 1)))
-            .setEndLocation(Location.newInstance("end")).build();
+                .setStartLocation(TestUtils.loc("startLoc", Coordinate.newInstance(0, 1)))
+                .setEndLocation(Location.newInstance("end")).build();
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addVehicle(veh1);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/LoadConstraintTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/LoadConstraintTest.java
index f11db6aec..54ea6e19a 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/LoadConstraintTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/LoadConstraintTest.java
@@ -18,24 +18,37 @@
 
 package com.graphhopper.jsprit.core.problem.constraint;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+import java.util.Arrays;
+import java.util.Collections;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
-import com.graphhopper.jsprit.core.problem.*;
-import com.graphhopper.jsprit.core.problem.job.*;
+import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.CopyJobActivityFactory;
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
+import com.graphhopper.jsprit.core.problem.job.Delivery;
+import com.graphhopper.jsprit.core.problem.job.Job;
+import com.graphhopper.jsprit.core.problem.job.Pickup;
+import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.*;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverServiceDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverShipmentDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupServiceDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupShipmentDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.ServiceActivityNEW;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.List;
-
-import static org.junit.Assert.*;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
 
 /**
  * unit tests to test load constraints
@@ -58,14 +71,14 @@ public void doBefore() {
         when(vehicle.getType()).thenReturn(type);
 
         VehicleRoutingProblem.Builder serviceProblemBuilder = VehicleRoutingProblem.Builder.newInstance();
-        Service s1 = Service.Builder.newInstance("s").addSizeDimension(0, 10).setLocation(Location.newInstance("loc")).build();
-        Service s2 = Service.Builder.newInstance("s2").addSizeDimension(0, 5).setLocation(Location.newInstance("loc")).build();
+        Service s1 = new Service.Builder("s").addSizeDimension(0, 10).setLocation(Location.newInstance("loc")).build();
+        Service s2 = new Service.Builder("s2").addSizeDimension(0, 5).setLocation(Location.newInstance("loc")).build();
         serviceProblemBuilder.addJob(s1).addJob(s2);
         final VehicleRoutingProblem serviceProblem = serviceProblemBuilder.build();
 
         final VehicleRoutingProblem.Builder pdProblemBuilder = VehicleRoutingProblem.Builder.newInstance();
-        Pickup pickup = (Pickup) Pickup.Builder.newInstance("pick").addSizeDimension(0, 10).setLocation(Location.newInstance("loc")).build();
-        Delivery delivery = (Delivery) Delivery.Builder.newInstance("del").addSizeDimension(0, 5).setLocation(Location.newInstance("loc")).build();
+        Pickup pickup = new Pickup.Builder("pick").addSizeDimension(0, 10).setLocation(Location.newInstance("loc")).build();
+        Delivery delivery = new Delivery.Builder("del").addSizeDimension(0, 5).setLocation(Location.newInstance("loc")).build();
         pdProblemBuilder.addJob(pickup).addJob(delivery);
         final VehicleRoutingProblem pdProblem = pdProblemBuilder.build();
 
@@ -76,32 +89,15 @@ public void doBefore() {
         final VehicleRoutingProblem shipmentProblem = shipmentProblemBuilder.build();
 
         VehicleRoute.Builder serviceRouteBuilder = VehicleRoute.Builder.newInstance(vehicle);
-        serviceRouteBuilder.setJobActivityFactory(new JobActivityFactory() {
-
-            @Override
-            public List<AbstractActivity> createActivities(Job job) {
-                return serviceProblem.copyAndGetActivities(job);
-            }
-
-        });
+        serviceRouteBuilder.setJobActivityFactory(new CopyJobActivityFactory());
         serviceRoute = serviceRouteBuilder.addService(s1).addService(s2).build();
 
         VehicleRoute.Builder pdRouteBuilder = VehicleRoute.Builder.newInstance(vehicle);
-        pdRouteBuilder.setJobActivityFactory(new JobActivityFactory() {
-            @Override
-            public List<AbstractActivity> createActivities(Job job) {
-                return pdProblem.copyAndGetActivities(job);
-            }
-        });
+        pdRouteBuilder.setJobActivityFactory(new CopyJobActivityFactory());
         pickup_delivery_route = pdRouteBuilder.addService(pickup).addService(delivery).build();
 
         VehicleRoute.Builder shipmentRouteBuilder = VehicleRoute.Builder.newInstance(vehicle);
-        shipmentRouteBuilder.setJobActivityFactory(new JobActivityFactory() {
-            @Override
-            public List<AbstractActivity> createActivities(Job job) {
-                return shipmentProblem.copyAndGetActivities(job);
-            }
-        });
+        shipmentRouteBuilder.setJobActivityFactory(new CopyJobActivityFactory());
         shipment_route = shipmentRouteBuilder.addPickup(shipment1).addPickup(shipment2).addDelivery(shipment2).addDelivery(shipment1).build();
 
         VehicleRoutingProblem vrpMock = mock(VehicleRoutingProblem.class);
@@ -134,7 +130,7 @@ public void whenServiceRouteAndNewServiceFitsInBetweenStartAndAct1_itShouldRetur
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(serviceRoute, s, serviceRoute.getVehicle(), null, 0.);
-        ServiceActivity newAct = mock(ServiceActivity.class);
+        ServiceActivityNEW newAct = mock(ServiceActivityNEW.class);
         when(newAct.getSize()).thenReturn(newSize);
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, serviceRoute.getStart(), newAct, serviceRoute.getActivities().get(0), 0.);
@@ -151,7 +147,7 @@ public void whenServiceRouteAndNewServiceFitsInBetweenAc1AndAct2_itShouldReturnF
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(serviceRoute, s, serviceRoute.getVehicle(), null, 0.);
-        ServiceActivity newAct = mock(ServiceActivity.class);
+        ServiceActivityNEW newAct = mock(ServiceActivityNEW.class);
         when(newAct.getSize()).thenReturn(newSize);
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, serviceRoute.getActivities().get(0), newAct, serviceRoute.getActivities().get(1), 0.);
@@ -168,7 +164,7 @@ public void whenServiceRouteAndNewServiceFitsInBetweenAc2AndEnd_itShouldReturnFu
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(serviceRoute, s, serviceRoute.getVehicle(), null, 0.);
-        ServiceActivity newAct = mock(ServiceActivity.class);
+        ServiceActivityNEW newAct = mock(ServiceActivityNEW.class);
         when(newAct.getSize()).thenReturn(newSize);
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, serviceRoute.getActivities().get(1), newAct, serviceRoute.getEnd(), 0.);
@@ -188,7 +184,7 @@ public void whenServiceRouteAndNewServiceDoesNotFitInBetweenStartAndAct1_itShoul
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(serviceRoute, s, serviceRoute.getVehicle(), null, 0.);
-        ServiceActivity newAct = mock(ServiceActivity.class);
+        ServiceActivityNEW newAct = mock(ServiceActivityNEW.class);
         when(newAct.getSize()).thenReturn(newSize);
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, serviceRoute.getStart(), newAct, serviceRoute.getActivities().get(0), 0.);
@@ -205,7 +201,7 @@ public void whenServiceRouteAndNewServiceDoesNotFitInBetweenAc1AndAct2_itShouldR
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(serviceRoute, s, serviceRoute.getVehicle(), null, 0.);
-        ServiceActivity newAct = mock(ServiceActivity.class);
+        ServiceActivityNEW newAct = mock(ServiceActivityNEW.class);
         when(newAct.getSize()).thenReturn(newSize);
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, serviceRoute.getActivities().get(0), newAct, serviceRoute.getActivities().get(1), 0.);
@@ -222,7 +218,7 @@ public void whenServiceRouteAndNewServiceDoesNotFitInBetweenAc2AndEnd_itShouldRe
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(serviceRoute, s, serviceRoute.getVehicle(), null, 0.);
-        ServiceActivity newAct = mock(ServiceActivity.class);
+        ServiceActivityNEW newAct = mock(ServiceActivityNEW.class);
         when(newAct.getSize()).thenReturn(newSize);
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, serviceRoute.getActivities().get(1), newAct, serviceRoute.getEnd(), 0.);
@@ -303,7 +299,7 @@ public void whenPDRoute_newPickupShouldFitInBetweenStartAndAct1() {
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(pickup_delivery_route, s, pickup_delivery_route.getVehicle(), null, 0.);
-        PickupService newAct = new PickupService(s);
+        PickupServiceDEPRECATED newAct = new PickupServiceDEPRECATED(s);
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickup_delivery_route.getStart(), newAct, pickup_delivery_route.getActivities().get(0), 0.);
 
@@ -319,7 +315,7 @@ public void whenPDRoute_newPickupShouldFitInBetweenAct1AndAct2() {
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(pickup_delivery_route, s, pickup_delivery_route.getVehicle(), null, 0.);
-        PickupService newAct = new PickupService(s);
+        PickupServiceDEPRECATED newAct = new PickupServiceDEPRECATED(s);
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickup_delivery_route.getActivities().get(0), newAct, pickup_delivery_route.getActivities().get(1), 0.);
 
@@ -335,7 +331,7 @@ public void whenPDRoute_newPickupShouldFitInBetweenAct2AndEnd() {
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(pickup_delivery_route, s, pickup_delivery_route.getVehicle(), null, 0.);
-        PickupService newAct = new PickupService(s);
+        PickupServiceDEPRECATED newAct = new PickupServiceDEPRECATED(s);
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickup_delivery_route.getActivities().get(1), newAct, pickup_delivery_route.getEnd(), 0.);
 
@@ -354,7 +350,7 @@ public void whenPDRoute_newPickupShouldNotFitInBetweenStartAndAct1() {
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(pickup_delivery_route, s, pickup_delivery_route.getVehicle(), null, 0.);
-        PickupService newAct = new PickupService(s);
+        PickupServiceDEPRECATED newAct = new PickupServiceDEPRECATED(s);
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickup_delivery_route.getStart(), newAct, pickup_delivery_route.getActivities().get(0), 0.);
 
@@ -370,7 +366,7 @@ public void whenPDRoute_newPickupShouldNotFitInBetweenAct1AndAct2() {
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(pickup_delivery_route, s, pickup_delivery_route.getVehicle(), null, 0.);
-        PickupService newAct = new PickupService(s);
+        PickupServiceDEPRECATED newAct = new PickupServiceDEPRECATED(s);
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickup_delivery_route.getActivities().get(0), newAct, pickup_delivery_route.getActivities().get(1), 0.);
 
@@ -386,7 +382,7 @@ public void whenPDRoute_newPickupShouldNotFitInBetweenAct2AndEnd() {
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(pickup_delivery_route, s, pickup_delivery_route.getVehicle(), null, 0.);
-        PickupService newAct = new PickupService(s);
+        PickupServiceDEPRECATED newAct = new PickupServiceDEPRECATED(s);
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickup_delivery_route.getActivities().get(1), newAct, pickup_delivery_route.getEnd(), 0.);
 
@@ -406,7 +402,7 @@ public void whenPDRoute_newDeliveryShouldFitInBetweenStartAndAct1() {
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(pickup_delivery_route, s, pickup_delivery_route.getVehicle(), null, 0.);
-        DeliverService newAct = new DeliverService(s);
+        DeliverServiceDEPRECATED newAct = new DeliverServiceDEPRECATED(s);
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickup_delivery_route.getStart(), newAct, pickup_delivery_route.getActivities().get(0), 0.);
 
@@ -422,7 +418,7 @@ public void whenPDRoute_newDeliveryShouldNotFitInBetweenStartAndAct1() {
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(pickup_delivery_route, s, pickup_delivery_route.getVehicle(), null, 0.);
-        DeliverService newAct = new DeliverService(s);
+        DeliverServiceDEPRECATED newAct = new DeliverServiceDEPRECATED(s);
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickup_delivery_route.getStart(), newAct, pickup_delivery_route.getActivities().get(0), 0.);
 
@@ -438,7 +434,7 @@ public void whenPDRoute_newDeliveryShouldFitInBetweenAct1AndAct2() {
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(pickup_delivery_route, s, pickup_delivery_route.getVehicle(), null, 0.);
-        DeliverService newAct = new DeliverService(s);
+        DeliverServiceDEPRECATED newAct = new DeliverServiceDEPRECATED(s);
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickup_delivery_route.getActivities().get(0), newAct, pickup_delivery_route.getActivities().get(1), 0.);
 
@@ -454,7 +450,7 @@ public void whenPDRoute_newDeliveryNotShouldFitInBetweenAct1AndAct2() {
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(pickup_delivery_route, s, pickup_delivery_route.getVehicle(), null, 0.);
-        DeliverService newAct = new DeliverService(s);
+        DeliverServiceDEPRECATED newAct = new DeliverServiceDEPRECATED(s);
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickup_delivery_route.getActivities().get(0), newAct, pickup_delivery_route.getActivities().get(1), 0.);
 
@@ -470,7 +466,7 @@ public void whenPDRoute_newDeliveryShouldFitInBetweenAct2AndEnd() {
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(pickup_delivery_route, s, pickup_delivery_route.getVehicle(), null, 0.);
-        DeliverService newAct = new DeliverService(s);
+        DeliverServiceDEPRECATED newAct = new DeliverServiceDEPRECATED(s);
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickup_delivery_route.getActivities().get(1), newAct, pickup_delivery_route.getEnd(), 0.);
 
@@ -486,7 +482,7 @@ public void whenPDRoute_newDeliveryShouldNotFitInBetweenAct2AndEnd() {
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(pickup_delivery_route, s, pickup_delivery_route.getVehicle(), null, 0.);
-        DeliverService newAct = new DeliverService(s);
+        DeliverServiceDEPRECATED newAct = new DeliverServiceDEPRECATED(s);
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickup_delivery_route.getActivities().get(1), newAct, pickup_delivery_route.getEnd(), 0.);
 
@@ -502,7 +498,7 @@ public void whenPDRouteAndNewServiceFitsInBetweenAc1AndAct2_itShouldReturnFulfil
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(serviceRoute, s, serviceRoute.getVehicle(), null, 0.);
-        ServiceActivity newAct = mock(ServiceActivity.class);
+        ServiceActivityNEW newAct = mock(ServiceActivityNEW.class);
         when(newAct.getSize()).thenReturn(newSize);
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, serviceRoute.getActivities().get(0), newAct, serviceRoute.getActivities().get(1), 0.);
@@ -519,7 +515,7 @@ public void whenPDRouteAndNewServiceFitsInBetweenAc2AndEnd_itShouldReturnFulfill
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(serviceRoute, s, serviceRoute.getVehicle(), null, 0.);
-        ServiceActivity newAct = mock(ServiceActivity.class);
+        ServiceActivityNEW newAct = mock(ServiceActivityNEW.class);
         when(newAct.getSize()).thenReturn(newSize);
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, serviceRoute.getActivities().get(1), newAct, serviceRoute.getEnd(), 0.);
@@ -539,7 +535,7 @@ public void whenPDRouteAndNewServiceDoesNotFitInBetweenStartAndAct1_itShouldRetu
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(serviceRoute, s, serviceRoute.getVehicle(), null, 0.);
-        ServiceActivity newAct = mock(ServiceActivity.class);
+        ServiceActivityNEW newAct = mock(ServiceActivityNEW.class);
         when(newAct.getSize()).thenReturn(newSize);
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, serviceRoute.getStart(), newAct, serviceRoute.getActivities().get(0), 0.);
@@ -556,7 +552,7 @@ public void whenPDRouteAndNewServiceDoesNotFitInBetweenAc1AndAct2_itShouldReturn
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(serviceRoute, s, serviceRoute.getVehicle(), null, 0.);
-        ServiceActivity newAct = mock(ServiceActivity.class);
+        ServiceActivityNEW newAct = mock(ServiceActivityNEW.class);
         when(newAct.getSize()).thenReturn(newSize);
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, serviceRoute.getActivities().get(0), newAct, serviceRoute.getActivities().get(1), 0.);
@@ -573,7 +569,7 @@ public void whenPDRouteAndNewServiceDoesNotFitInBetweenAc2AndEnd_itShouldReturnF
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(serviceRoute, s, serviceRoute.getVehicle(), null, 0.);
-        ServiceActivity newAct = mock(ServiceActivity.class);
+        ServiceActivityNEW newAct = mock(ServiceActivityNEW.class);
         when(newAct.getSize()).thenReturn(newSize);
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, serviceRoute.getActivities().get(1), newAct, serviceRoute.getEnd(), 0.);
@@ -593,13 +589,13 @@ public void whenPDRouteAndNewServiceDoesNotFitIn_itShouldReturnFulfilled() {
         assertFalse(loadconstraint.fulfilled(context));
     }
 
-/*
+    /*
 shipment route
 shipment1 10
 shipment2 5
 
 pickup(s1) pickup(s2) delivery(s2) deliver(s1)
- */
+     */
 
     @Test
     public void whenShipmentRouteAndPickupOfNewShipmentShouldFitInBetweenStartAndAct1() {
@@ -610,7 +606,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldFitInBetweenStartAndAct
 
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
-        PickupShipment newAct = new PickupShipment(s);
+        PickupShipmentDEPRECATED newAct = new PickupShipmentDEPRECATED(s);
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getStart(), newAct, shipment_route.getActivities().get(0), 0.);
 
@@ -627,7 +623,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldNotFitInBetweenStartAnd
 
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
-        PickupShipment newAct = new PickupShipment(s);
+        PickupShipmentDEPRECATED newAct = new PickupShipmentDEPRECATED(s);
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getStart(), newAct, shipment_route.getActivities().get(0), 0.);
 
@@ -644,7 +640,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldFitInBetweenAct1AndAct2
 
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
-        PickupShipment newAct = new PickupShipment(s);
+        PickupShipmentDEPRECATED newAct = new PickupShipmentDEPRECATED(s);
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getActivities().get(0), newAct, shipment_route.getActivities().get(1), 0.);
 
@@ -661,7 +657,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldNotFitInBetweenAct1AndA
 
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
-        PickupShipment newAct = new PickupShipment(s);
+        PickupShipmentDEPRECATED newAct = new PickupShipmentDEPRECATED(s);
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getActivities().get(0), newAct, shipment_route.getActivities().get(1), 0.);
 
@@ -678,7 +674,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldFitInBetweenAct2AndAct3
 
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
-        PickupShipment newAct = new PickupShipment(s);
+        PickupShipmentDEPRECATED newAct = new PickupShipmentDEPRECATED(s);
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getActivities().get(1), newAct, shipment_route.getActivities().get(2), 0.);
 
@@ -695,7 +691,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldNotFitInBetweenAct2AndA
 
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
-        PickupShipment newAct = new PickupShipment(s);
+        PickupShipmentDEPRECATED newAct = new PickupShipmentDEPRECATED(s);
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getActivities().get(1), newAct, shipment_route.getActivities().get(2), 0.);
 
@@ -712,7 +708,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldFitInBetweenAct3AndAct4
 
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
-        PickupShipment newAct = new PickupShipment(s);
+        PickupShipmentDEPRECATED newAct = new PickupShipmentDEPRECATED(s);
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getActivities().get(2), newAct, shipment_route.getActivities().get(3), 0.);
 
@@ -729,7 +725,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldNotFitInBetweenAct3AndA
 
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
-        PickupShipment newAct = new PickupShipment(s);
+        PickupShipmentDEPRECATED newAct = new PickupShipmentDEPRECATED(s);
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getActivities().get(2), newAct, shipment_route.getActivities().get(3), 0.);
 
@@ -746,7 +742,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldFitInBetweenAct4AndEnd(
 
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
-        PickupShipment newAct = new PickupShipment(s);
+        PickupShipmentDEPRECATED newAct = new PickupShipmentDEPRECATED(s);
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getActivities().get(3), newAct, shipment_route.getEnd(), 0.);
 
@@ -763,7 +759,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldNotFitInBetweenAct4AndE
 
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
-        PickupShipment newAct = new PickupShipment(s);
+        PickupShipmentDEPRECATED newAct = new PickupShipmentDEPRECATED(s);
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getActivities().get(3), newAct, shipment_route.getEnd(), 0.);
 
@@ -784,7 +780,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldFitInBetweenStartAndA
 
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
-        DeliverShipment newAct = new DeliverShipment(s);
+        DeliverShipmentDEPRECATED newAct = new DeliverShipmentDEPRECATED(s);
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getStart(), newAct, shipment_route.getActivities().get(0), 0.);
 
@@ -801,7 +797,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldNotFitInBetweenStartA
 
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
-        DeliverShipment newAct = new DeliverShipment(s);
+        DeliverShipmentDEPRECATED newAct = new DeliverShipmentDEPRECATED(s);
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getStart(), newAct, shipment_route.getActivities().get(0), 0.);
 
@@ -818,7 +814,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldFitInBetweenAct1AndAc
 
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
-        DeliverShipment newAct = new DeliverShipment(s);
+        DeliverShipmentDEPRECATED newAct = new DeliverShipmentDEPRECATED(s);
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getActivities().get(0), newAct, shipment_route.getActivities().get(1), 0.);
 
@@ -835,7 +831,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldNotFitInBetweenAct1An
 
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
-        DeliverShipment newAct = new DeliverShipment(s);
+        DeliverShipmentDEPRECATED newAct = new DeliverShipmentDEPRECATED(s);
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getActivities().get(0), newAct, shipment_route.getActivities().get(1), 0.);
 
@@ -852,7 +848,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldFitInBetweenAct2AndAc
 
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
-        DeliverShipment newAct = new DeliverShipment(s);
+        DeliverShipmentDEPRECATED newAct = new DeliverShipmentDEPRECATED(s);
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getActivities().get(1), newAct, shipment_route.getActivities().get(2), 0.);
 
@@ -869,7 +865,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldNotFitInBetweenAct2An
 
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
-        DeliverShipment newAct = new DeliverShipment(s);
+        DeliverShipmentDEPRECATED newAct = new DeliverShipmentDEPRECATED(s);
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getActivities().get(1), newAct, shipment_route.getActivities().get(2), 0.);
 
@@ -886,7 +882,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldFitInBetweenAct3AndAc
 
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
-        DeliverShipment newAct = new DeliverShipment(s);
+        DeliverShipmentDEPRECATED newAct = new DeliverShipmentDEPRECATED(s);
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getActivities().get(2), newAct, shipment_route.getActivities().get(3), 0.);
 
@@ -903,7 +899,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldNotFitInBetweenAct3An
 
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
-        DeliverShipment newAct = new DeliverShipment(s);
+        DeliverShipmentDEPRECATED newAct = new DeliverShipmentDEPRECATED(s);
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getActivities().get(2), newAct, shipment_route.getActivities().get(3), 0.);
 
@@ -920,7 +916,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldFitInBetweenAct4AndEn
 
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
-        DeliverShipment newAct = new DeliverShipment(s);
+        DeliverShipmentDEPRECATED newAct = new DeliverShipmentDEPRECATED(s);
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getActivities().get(3), newAct, shipment_route.getEnd(), 0.);
 
@@ -937,7 +933,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldNotFitInBetweenAct4An
 
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
-        DeliverShipment newAct = new DeliverShipment(s);
+        DeliverShipmentDEPRECATED newAct = new DeliverShipmentDEPRECATED(s);
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getActivities().get(3), newAct, shipment_route.getEnd(), 0.);
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadRouteLevelConstraintTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadRouteLevelConstraintTest.java
index 39e2bdb22..bddc98afd 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadRouteLevelConstraintTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadRouteLevelConstraintTest.java
@@ -17,6 +17,16 @@
  */
 package com.graphhopper.jsprit.core.problem.constraint;
 
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+import java.util.Arrays;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.state.InternalStates;
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.problem.Capacity;
@@ -32,15 +42,6 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.Arrays;
-
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
 
 public class ServiceLoadRouteLevelConstraintTest {
 
@@ -350,7 +351,7 @@ public void whenNewVehicleCapacityIsNotSufficiant2_returnFalse() {
 
 
     private Service createPickup(String string, int i) {
-        return Pickup.Builder.newInstance(string).addSizeDimension(0, i).setLocation(Location.newInstance("loc")).build();
+        return new Pickup.Builder(string).addSizeDimension(0, i).setLocation(Location.newInstance("loc")).build();
     }
 
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/SkillConstraintTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/SkillConstraintTest.java
index d5f5b8e16..a072afc88 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/SkillConstraintTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/SkillConstraintTest.java
@@ -18,6 +18,14 @@
 
 package com.graphhopper.jsprit.core.problem.constraint;
 
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
+import java.util.Arrays;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
@@ -27,13 +35,6 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.Arrays;
-
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
 
 
 public class SkillConstraintTest {
@@ -54,11 +55,11 @@ public void doBefore() {
         vehicle = VehicleImpl.Builder.newInstance("v").addSkill("skill1").addSkill("skill2").addSkill("skill3").addSkill("skill4").setStartLocation(Location.newInstance("start")).setType(type).build();
         vehicle2 = VehicleImpl.Builder.newInstance("v2").addSkill("skill4").addSkill("skill5").setStartLocation(Location.newInstance("start")).setType(type).build();
 
-        Service service = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc")).addRequiredSkill("skill1").build();
-        Service service2 = Service.Builder.newInstance("s2").setLocation(Location.newInstance("loc")).addRequiredSkill("skill1").addRequiredSkill("skill2").addRequiredSkill("skill3").build();
+        Service service = new Service.Builder("s").setLocation(Location.newInstance("loc")).addRequiredSkill("skill1").build();
+        Service service2 = new Service.Builder("s2").setLocation(Location.newInstance("loc")).addRequiredSkill("skill1").addRequiredSkill("skill2").addRequiredSkill("skill3").build();
 
-        Service service3 = Service.Builder.newInstance("s3").setLocation(Location.newInstance("loc")).addRequiredSkill("skill4").addRequiredSkill("skill5").build();
-        Service service4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance("loc")).addRequiredSkill("skill1").build();
+        Service service3 = new Service.Builder("s3").setLocation(Location.newInstance("loc")).addRequiredSkill("skill4").addRequiredSkill("skill5").build();
+        Service service4 = new Service.Builder("s4").setLocation(Location.newInstance("loc")).addRequiredSkill("skill1").build();
 
         vrp = VehicleRoutingProblem.Builder.newInstance().addVehicle(vehicle).addVehicle(vehicle2).addJob(service)
             .addJob(service2).addJob(service3).addJob(service4).build();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/SoftActivityConstraintManagerTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/SoftActivityConstraintManagerTest.java
index a6d6478db..3200d874a 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/SoftActivityConstraintManagerTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/SoftActivityConstraintManagerTest.java
@@ -17,14 +17,15 @@
  */
 package com.graphhopper.jsprit.core.problem.constraint;
 
-import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-import org.junit.Test;
-
 import static org.junit.Assert.assertEquals;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
+import org.junit.Test;
+
+import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
+
 public class SoftActivityConstraintManagerTest {
 
     @Test
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/SoftRouteConstraintManagerTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/SoftRouteConstraintManagerTest.java
index 0de9ebf2c..66e0ea106 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/SoftRouteConstraintManagerTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/SoftRouteConstraintManagerTest.java
@@ -17,13 +17,14 @@
  */
 package com.graphhopper.jsprit.core.problem.constraint;
 
-import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
-import org.junit.Test;
-
 import static org.junit.Assert.assertEquals;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
+import org.junit.Test;
+
+import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
+
 public class SoftRouteConstraintManagerTest {
 
     @Test
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/TestConstraintManager.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/TestConstraintManager.java
index 7b2c89267..0821deca2 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/TestConstraintManager.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/TestConstraintManager.java
@@ -17,15 +17,16 @@
  */
 package com.graphhopper.jsprit.core.problem.constraint;
 
-import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.solution.route.state.RouteAndActivityStateGetter;
-import org.junit.Test;
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Mockito.mock;
 
 import java.util.ArrayList;
 import java.util.List;
 
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.mock;
+import org.junit.Test;
+
+import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
+import com.graphhopper.jsprit.core.problem.solution.route.state.RouteAndActivityStateGetter;
 
 public class TestConstraintManager {
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowTest.java
index 2de2a3ce4..d33ec795e 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowTest.java
@@ -18,11 +18,27 @@
 
 package com.graphhopper.jsprit.core.problem.constraint;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.List;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.state.InternalStates;
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.algorithm.state.UpdateActivityTimes;
 import com.graphhopper.jsprit.core.algorithm.state.UpdateVehicleDependentPracticalTimeWindows;
-import com.graphhopper.jsprit.core.problem.*;
+import com.graphhopper.jsprit.core.problem.AbstractVehicle;
+import com.graphhopper.jsprit.core.problem.CopyJobActivityFactory;
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingActivityCosts;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.cost.WaitingTimeCosts;
@@ -30,15 +46,14 @@
 import com.graphhopper.jsprit.core.problem.job.Service;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupService;
-import com.graphhopper.jsprit.core.problem.vehicle.*;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupServiceDEPRECATED;
+import com.graphhopper.jsprit.core.problem.vehicle.FiniteFleetManagerFactory;
+import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleFleetManager;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.CostFactory;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.*;
-
-import static org.junit.Assert.*;
 
 /**
  * unit tests to test vehicle dependent time-windows
@@ -73,40 +88,34 @@ public void doBefore() {
 
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").build();
         vehicle = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance("0,0"))
-            .setEarliestStart(0.).setLatestArrival(100.).build();
+                .setEarliestStart(0.).setLatestArrival(100.).build();
 
         v2 = VehicleImpl.Builder.newInstance("v2").setType(type).setStartLocation(Location.newInstance("0,0"))
-            .setEarliestStart(0.).setLatestArrival(60.).build();
+                .setEarliestStart(0.).setLatestArrival(60.).build();
 
         v3 = VehicleImpl.Builder.newInstance("v3").setType(type).setStartLocation(Location.newInstance("0,0"))
-            .setEarliestStart(0.).setLatestArrival(50.).build();
+                .setEarliestStart(0.).setLatestArrival(50.).build();
 
         v4 = VehicleImpl.Builder.newInstance("v4").setType(type).setStartLocation(Location.newInstance("0,0"))
-            .setEarliestStart(0.).setLatestArrival(10.).build();
+                .setEarliestStart(0.).setLatestArrival(10.).build();
 
         v5 = VehicleImpl.Builder.newInstance("v5").setType(type).setStartLocation(Location.newInstance("0,0"))
-            .setEarliestStart(60.).setLatestArrival(100.).build();
+                .setEarliestStart(60.).setLatestArrival(100.).build();
 
         v6 = VehicleImpl.Builder.newInstance("v6").setType(type).setStartLocation(Location.newInstance("0,0"))
-            .setEndLocation(Location.newInstance("40,0")).setEarliestStart(0.).setLatestArrival(40.).build();
+                .setEndLocation(Location.newInstance("40,0")).setEarliestStart(0.).setLatestArrival(40.).build();
 
         vrpBuilder.addVehicle(vehicle).addVehicle(v2).addVehicle(v3).addVehicle(v4).addVehicle(v5).addVehicle(v6);
 
-        Service service = Service.Builder.newInstance("s1").setLocation(Location.newInstance("10,0")).build();
-        Service service2 = Service.Builder.newInstance("s2").setLocation(Location.newInstance("20,0")).build();
-        Service service3 = Service.Builder.newInstance("s3").setLocation(Location.newInstance("30,0")).build();
+        Service service = new Service.Builder("s1").setLocation(Location.newInstance("10,0")).build();
+        Service service2 = new Service.Builder("s2").setLocation(Location.newInstance("20,0")).build();
+        Service service3 = new Service.Builder("s3").setLocation(Location.newInstance("30,0")).build();
 
         vrpBuilder.addJob(service).addJob(service2).addJob(service3);
         final VehicleRoutingProblem vrp = vrpBuilder.build();
 
-        route = VehicleRoute.Builder.newInstance(vehicle).setJobActivityFactory(new JobActivityFactory() {
-
-            @Override
-            public List<AbstractActivity> createActivities(Job job) {
-                return vrp.copyAndGetActivities(job);
-            }
-
-        }).addService(service).addService(service2).addService(service3).build();
+        route = VehicleRoute.Builder.newInstance(vehicle).setJobActivityFactory(new CopyJobActivityFactory())
+                .addService(service).addService(service2).addService(service3).build();
 
         stateManager = new StateManager(vrp);
 
@@ -140,26 +149,26 @@ public void doBefore() {
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct3() {
         assertEquals(70., stateManager.getActivityState(route.getActivities().get(2),
-            vehicle, InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+                vehicle, InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct2() {
         assertEquals(60., stateManager.getActivityState(route.getActivities().get(1),
-            vehicle, InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+                vehicle, InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct1() {
         assertEquals(50., stateManager.getActivityState(route.getActivities().get(0),
-            vehicle, InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+                vehicle, InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
     @Test
     public void whenNewJobIsInsertedWithOldVeh_itJustShouldReturnTrue() {
 
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance("50,0")).build();
-        PickupService serviceAct = new PickupService(s4);
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("50,0")).build();
+        PickupServiceDEPRECATED serviceAct = new PickupServiceDEPRECATED(s4);
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, vehicle, route.getDriver(), 0.);
 
@@ -173,8 +182,8 @@ public void whenNewJobIsInsertedWithOldVeh_itJustShouldReturnTrue() {
     @Test
     public void whenNewJobIsInsertedWithOldVeh_itJustShouldReturnFalse() {
 
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance("1000,0")).build();
-        PickupService serviceAct = new PickupService(s4);
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("1000,0")).build();
+        PickupServiceDEPRECATED serviceAct = new PickupServiceDEPRECATED(s4);
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, vehicle, route.getDriver(), 0.);
 
@@ -188,8 +197,8 @@ public void whenNewJobIsInsertedWithOldVeh_itJustShouldReturnFalse() {
     @Test
     public void whenNewJobIsInsertedInBetweenAct1And2WithOldVeh_itJustShouldReturnTrue() {
 
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance("50,0")).build();
-        PickupService serviceAct = new PickupService(s4);
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("50,0")).build();
+        PickupServiceDEPRECATED serviceAct = new PickupServiceDEPRECATED(s4);
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, vehicle, route.getDriver(), 0.);
 
@@ -206,8 +215,8 @@ public void whenNewJobIsInsertedInBetweenAct1And2WithOldVeh_itJustShouldReturnTr
     @Test
     public void whenNewJobIsInsertedInBetweenAct1And2WithOldVeh_itJustShouldReturnFalse() {
 
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance("51,0")).build();
-        PickupService serviceAct = new PickupService(s4);
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("51,0")).build();
+        PickupServiceDEPRECATED serviceAct = new PickupServiceDEPRECATED(s4);
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, vehicle, route.getDriver(), 0.);
 
@@ -227,8 +236,8 @@ public void whenJobIsInsertedAlongWithNewVehicleThatNeedsToBeHomeAt60_itShouldRe
 
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance("40,0")).build();
-        PickupService serviceAct = new PickupService(s4);
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
+        PickupServiceDEPRECATED serviceAct = new PickupServiceDEPRECATED(s4);
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v2, route.getDriver(), 0.);
 
@@ -245,8 +254,8 @@ public void whenJobIsInsertedAlongWithNewVehicleThatNeedsToBeHomeAt50_itShouldRe
 
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance("40,0")).build();
-        PickupService serviceAct = new PickupService(s4);
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
+        PickupServiceDEPRECATED serviceAct = new PickupServiceDEPRECATED(s4);
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v3, route.getDriver(), 0.);
 
@@ -262,8 +271,8 @@ public void whenJobIsInsertedAlongWithNewVehicleThatNeedsToBeHomeAt10_itShouldRe
 
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance("40,0")).build();
-        PickupService serviceAct = new PickupService(s4);
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
+        PickupServiceDEPRECATED serviceAct = new PickupServiceDEPRECATED(s4);
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v4, route.getDriver(), 0.);
 
@@ -279,8 +288,8 @@ public void whenJobIsInsertedAlongWithV6BetweenS2AndS3_itShouldReturnFalse() {
 
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance("40,0")).build();
-        PickupService serviceAct = new PickupService(s4);
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
+        PickupServiceDEPRECATED serviceAct = new PickupServiceDEPRECATED(s4);
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v6, route.getDriver(), 0.);
 
@@ -296,8 +305,8 @@ public void whenJobIsInsertedAlongWithV6BetweenS1AndS2_itShouldReturnFalse() {
 
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance("40,0")).build();
-        PickupService serviceAct = new PickupService(s4);
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
+        PickupServiceDEPRECATED serviceAct = new PickupServiceDEPRECATED(s4);
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v6, route.getDriver(), 0.);
 
@@ -313,8 +322,8 @@ public void whenJobIsInsertedAlongWithV6AtTheEndOfRoute_itShouldReturnTrue() {
 
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance("40,0")).build();
-        PickupService serviceAct = new PickupService(s4);
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
+        PickupServiceDEPRECATED serviceAct = new PickupServiceDEPRECATED(s4);
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v6, route.getDriver(), 0.);
 
@@ -328,8 +337,8 @@ public void whenJobIsInsertedAlongWithV6AtTheEndOfRoute_itShouldReturnTrue() {
     public void whenJobIsInsertedAlongWithNewVehicleThatCanOnlyStartAt60_itShouldReturnFalse() {
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance("40,0")).build();
-        PickupService serviceAct = new PickupService(s4);
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
+        PickupServiceDEPRECATED serviceAct = new PickupServiceDEPRECATED(s4);
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v5, route.getDriver(), 60.);
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowWithStartTimeAndMaxOperationTimeTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowWithStartTimeAndMaxOperationTimeTest.java
index 373b0edd2..a506960df 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowWithStartTimeAndMaxOperationTimeTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowWithStartTimeAndMaxOperationTimeTest.java
@@ -18,11 +18,27 @@
 
 package com.graphhopper.jsprit.core.problem.constraint;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.List;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.state.InternalStates;
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.algorithm.state.UpdateActivityTimes;
 import com.graphhopper.jsprit.core.algorithm.state.UpdateVehicleDependentPracticalTimeWindows;
-import com.graphhopper.jsprit.core.problem.*;
+import com.graphhopper.jsprit.core.problem.AbstractVehicle;
+import com.graphhopper.jsprit.core.problem.CopyJobActivityFactory;
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingActivityCosts;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.cost.WaitingTimeCosts;
@@ -30,15 +46,14 @@
 import com.graphhopper.jsprit.core.problem.job.Service;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupService;
-import com.graphhopper.jsprit.core.problem.vehicle.*;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupServiceDEPRECATED;
+import com.graphhopper.jsprit.core.problem.vehicle.FiniteFleetManagerFactory;
+import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleFleetManager;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.CostFactory;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.*;
-
-import static org.junit.Assert.*;
 
 /**
  * unit tests to test vehicle dependent time-windows
@@ -71,40 +86,34 @@ public void doBefore() {
 
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").build();
         vehicle = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance("0,0"))
-            .setEarliestStart(0.).setLatestArrival(100.).build();
+                .setEarliestStart(0.).setLatestArrival(100.).build();
 
         v2 = VehicleImpl.Builder.newInstance("v2").setType(type).setStartLocation(Location.newInstance("0,0"))
-            .setEarliestStart(0.).setLatestArrival(60.).build();
+                .setEarliestStart(0.).setLatestArrival(60.).build();
 
         v3 = VehicleImpl.Builder.newInstance("v3").setType(type).setStartLocation(Location.newInstance("0,0"))
-            .setEarliestStart(0.).setLatestArrival(50.).build();
+                .setEarliestStart(0.).setLatestArrival(50.).build();
 
         v4 = VehicleImpl.Builder.newInstance("v4").setType(type).setStartLocation(Location.newInstance("0,0"))
-            .setEarliestStart(0.).setLatestArrival(10.).build();
+                .setEarliestStart(0.).setLatestArrival(10.).build();
 
         v5 = VehicleImpl.Builder.newInstance("v5").setType(type).setStartLocation(Location.newInstance("0,0"))
-            .setEarliestStart(60.).setLatestArrival(100.).build();
+                .setEarliestStart(60.).setLatestArrival(100.).build();
 
         v6 = VehicleImpl.Builder.newInstance("v6").setType(type).setStartLocation(Location.newInstance("0,0"))
-            .setEndLocation(Location.newInstance("40,0")).setEarliestStart(0.).setLatestArrival(40.).build();
+                .setEndLocation(Location.newInstance("40,0")).setEarliestStart(0.).setLatestArrival(40.).build();
 
         vrpBuilder.addVehicle(vehicle).addVehicle(v2).addVehicle(v3).addVehicle(v4).addVehicle(v5).addVehicle(v6);
 
-        Service service = Service.Builder.newInstance("s1").setLocation(Location.newInstance("10,0")).build();
-        Service service2 = Service.Builder.newInstance("s2").setLocation(Location.newInstance("20,0")).build();
-        Service service3 = Service.Builder.newInstance("s3").setLocation(Location.newInstance("30,0")).build();
+        Service service = new Service.Builder("s1").setLocation(Location.newInstance("10,0")).build();
+        Service service2 = new Service.Builder("s2").setLocation(Location.newInstance("20,0")).build();
+        Service service3 = new Service.Builder("s3").setLocation(Location.newInstance("30,0")).build();
 
         vrpBuilder.addJob(service).addJob(service2).addJob(service3);
         final VehicleRoutingProblem vrp = vrpBuilder.build();
 
-        route = VehicleRoute.Builder.newInstance(vehicle).setJobActivityFactory(new JobActivityFactory() {
-
-            @Override
-            public List<AbstractActivity> createActivities(Job job) {
-                return vrp.copyAndGetActivities(job);
-            }
-
-        }).addService(service).addService(service2).addService(service3).build();
+        route = VehicleRoute.Builder.newInstance(vehicle).setJobActivityFactory(new CopyJobActivityFactory())
+                .addService(service).addService(service2).addService(service3).build();
 
         stateManager = new StateManager(vrp);
 
@@ -138,26 +147,26 @@ public void doBefore() {
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct3() {
         assertEquals(70., stateManager.getActivityState(route.getActivities().get(2),
-            vehicle, InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+                vehicle, InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct2() {
         assertEquals(60., stateManager.getActivityState(route.getActivities().get(1),
-            vehicle, InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+                vehicle, InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct1() {
         assertEquals(50., stateManager.getActivityState(route.getActivities().get(0),
-            vehicle, InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+                vehicle, InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
     @Test
     public void whenNewJobIsInsertedWithOldVeh_itJustShouldReturnTrue() {
 
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance("50,0")).build();
-        PickupService serviceAct = new PickupService(s4);
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("50,0")).build();
+        PickupServiceDEPRECATED serviceAct = new PickupServiceDEPRECATED(s4);
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, vehicle, route.getDriver(), 0.);
 
@@ -171,8 +180,8 @@ public void whenNewJobIsInsertedWithOldVeh_itJustShouldReturnTrue() {
     @Test
     public void whenNewJobIsInsertedWithOldVeh_itJustShouldReturnFalse() {
 
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance("1000,0")).build();
-        PickupService serviceAct = new PickupService(s4);
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("1000,0")).build();
+        PickupServiceDEPRECATED serviceAct = new PickupServiceDEPRECATED(s4);
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, vehicle, route.getDriver(), 0.);
 
@@ -186,8 +195,8 @@ public void whenNewJobIsInsertedWithOldVeh_itJustShouldReturnFalse() {
     @Test
     public void whenNewJobIsInsertedInBetweenAct1And2WithOldVeh_itJustShouldReturnTrue() {
 
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance("50,0")).build();
-        PickupService serviceAct = new PickupService(s4);
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("50,0")).build();
+        PickupServiceDEPRECATED serviceAct = new PickupServiceDEPRECATED(s4);
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, vehicle, route.getDriver(), 0.);
 
@@ -204,8 +213,8 @@ public void whenNewJobIsInsertedInBetweenAct1And2WithOldVeh_itJustShouldReturnTr
     @Test
     public void whenNewJobIsInsertedInBetweenAct1And2WithOldVeh_itJustShouldReturnFalse() {
 
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance("51,0")).build();
-        PickupService serviceAct = new PickupService(s4);
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("51,0")).build();
+        PickupServiceDEPRECATED serviceAct = new PickupServiceDEPRECATED(s4);
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, vehicle, route.getDriver(), 0.);
 
@@ -225,8 +234,8 @@ public void whenJobIsInsertedAlongWithNewVehicleThatNeedsToBeHomeAt60_itShouldRe
 
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance("40,0")).build();
-        PickupService serviceAct = new PickupService(s4);
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
+        PickupServiceDEPRECATED serviceAct = new PickupServiceDEPRECATED(s4);
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v2, route.getDriver(), 0.);
 
@@ -243,8 +252,8 @@ public void whenJobIsInsertedAlongWithNewVehicleThatNeedsToBeHomeAt50_itShouldRe
 
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance("40,0")).build();
-        PickupService serviceAct = new PickupService(s4);
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
+        PickupServiceDEPRECATED serviceAct = new PickupServiceDEPRECATED(s4);
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v3, route.getDriver(), 0.);
 
@@ -260,8 +269,8 @@ public void whenJobIsInsertedAlongWithNewVehicleThatNeedsToBeHomeAt10_itShouldRe
 
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance("40,0")).build();
-        PickupService serviceAct = new PickupService(s4);
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
+        PickupServiceDEPRECATED serviceAct = new PickupServiceDEPRECATED(s4);
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v4, route.getDriver(), 0.);
 
@@ -277,8 +286,8 @@ public void whenJobIsInsertedAlongWithV6BetweenS2AndS3_itShouldReturnFalse() {
 
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance("40,0")).build();
-        PickupService serviceAct = new PickupService(s4);
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
+        PickupServiceDEPRECATED serviceAct = new PickupServiceDEPRECATED(s4);
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v6, route.getDriver(), 0.);
 
@@ -294,8 +303,8 @@ public void whenJobIsInsertedAlongWithV6BetweenS1AndS2_itShouldReturnFalse() {
 
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance("40,0")).build();
-        PickupService serviceAct = new PickupService(s4);
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
+        PickupServiceDEPRECATED serviceAct = new PickupServiceDEPRECATED(s4);
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v6, route.getDriver(), 0.);
 
@@ -311,8 +320,8 @@ public void whenJobIsInsertedAlongWithV6AtTheEndOfRoute_itShouldReturnTrue() {
 
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance("40,0")).build();
-        PickupService serviceAct = new PickupService(s4);
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
+        PickupServiceDEPRECATED serviceAct = new PickupServiceDEPRECATED(s4);
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v6, route.getDriver(), 0.);
 
@@ -326,8 +335,8 @@ public void whenJobIsInsertedAlongWithV6AtTheEndOfRoute_itShouldReturnTrue() {
     public void whenJobIsInsertedAlongWithNewVehicleThatCanOnlyStartAt60_itShouldReturnFalse() {
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
-        Service s4 = Service.Builder.newInstance("s4").setLocation(Location.newInstance("40,0")).build();
-        PickupService serviceAct = new PickupService(s4);
+        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
+        PickupServiceDEPRECATED serviceAct = new PickupServiceDEPRECATED(s4);
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v5, route.getDriver(), 60.);
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTraveledDistanceTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTraveledDistanceTest.java
new file mode 100644
index 000000000..0db39ebb2
--- /dev/null
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTraveledDistanceTest.java
@@ -0,0 +1,239 @@
+/*
+ * Licensed to GraphHopper GmbH under one or more contributor
+ * license agreements. See the NOTICE file distributed with this work for
+ * additional information regarding copyright ownership.
+ *
+ * GraphHopper GmbH licenses this file to you under the Apache License,
+ * Version 2.0 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.graphhopper.jsprit.core.problem.constraint;
+
+
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Map;
+
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Test;
+
+import com.graphhopper.jsprit.core.algorithm.state.StateId;
+import com.graphhopper.jsprit.core.algorithm.state.StateManager;
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
+import com.graphhopper.jsprit.core.problem.cost.TransportDistance;
+import com.graphhopper.jsprit.core.problem.job.Delivery;
+import com.graphhopper.jsprit.core.problem.job.Job;
+import com.graphhopper.jsprit.core.problem.job.Pickup;
+import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
+import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
+import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
+import com.graphhopper.jsprit.core.util.ManhattanCosts;
+
+/**
+ * Created by schroeder on 18/05/16.
+ */
+public class VehicleDependentTraveledDistanceTest {
+
+    StateManager stateManager;
+
+    VehicleRoute route;
+
+    StateId traveledDistanceId;
+
+    Vehicle vehicle;
+
+    Vehicle vehicle2;
+
+    VehicleRoutingProblem vrp;
+
+    Delivery d1,d2,newDelivery;
+
+    Pickup pickup;
+
+    Shipment s1;
+
+    Map<Vehicle,Double> maxDistanceMap;
+
+
+    @Before
+    public void doBefore(){
+        vehicle = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0,0)).build();
+        vehicle2 = VehicleImpl.Builder.newInstance("v2").setStartLocation(Location.newInstance(10,10)).build();
+
+        maxDistanceMap = new HashMap<>();
+        maxDistanceMap.put(vehicle,200d);
+        maxDistanceMap.put(vehicle2,200d);
+
+        d1 = Delivery.Builder.newInstance("d1").setLocation(Location.newInstance(10,10)).build();
+        d2 = Delivery.Builder.newInstance("d2").setLocation(Location.newInstance(20,15)).build();
+        pickup = Pickup.Builder.newInstance("pickup").setLocation(Location.newInstance(50,50)).build();
+        s1 = Shipment.Builder.newInstance("s1").setPickupLocation(Location.newInstance(35,30))
+            .setDeliveryLocation(Location.newInstance(20,25)).build();
+
+        newDelivery = Delivery.Builder.newInstance("new").setLocation(Location.newInstance(-10,10)).build();
+
+        vrp = VehicleRoutingProblem.Builder.newInstance()
+            .setRoutingCost(new ManhattanCosts()).addVehicle(vehicle).addVehicle(vehicle2)
+            .addJob(d1).addJob(d2).addJob(s1).addJob(pickup).addJob(newDelivery).build();
+
+        route = VehicleRoute.Builder.newInstance(vehicle).setJobActivityFactory(vrp.getJobActivityFactory())
+            .addDelivery(d1).addDelivery(d2).addPickup(s1).addPickup(pickup).addDelivery(s1).build();
+
+        stateManager = new StateManager(vrp);
+
+        traveledDistanceId = stateManager.createStateId("traveledDistance");
+
+        com.graphhopper.jsprit.core.algorithm.state.VehicleDependentTraveledDistance traveledDistance =
+            new com.graphhopper.jsprit.core.algorithm.state.VehicleDependentTraveledDistance(new TransportDistance() {
+                @Override
+                public double getDistance(Location from, Location to, double departureTime, Vehicle vehicle) {
+                    return new ManhattanCosts().getDistance(from,to,departureTime,vehicle);
+                }
+        },stateManager,traveledDistanceId,Arrays.asList(vehicle,vehicle2));
+
+        stateManager.addStateUpdater(traveledDistance);
+        stateManager.informInsertionStarts(Arrays.asList(route), Collections.<Job>emptyList());
+    }
+
+    /*
+    vehicle: 200.0
+vehicle (max distance): 200.0
+vehicle2: 160.0
+vehicle2 (max distance): 180.0
+     */
+    @Test
+    public void insertNewInVehicleShouldFail(){
+        MaxDistanceConstraint maxDistanceConstraint =
+            new MaxDistanceConstraint(stateManager, traveledDistanceId, new TransportDistance() {
+                @Override
+                public double getDistance(Location from, Location to, double departureTime, Vehicle vehicle) {
+                    return vrp.getTransportCosts().getTransportTime(from,to,departureTime, null, vehicle);
+                }
+            },maxDistanceMap);
+        JobInsertionContext context = new JobInsertionContext(route,newDelivery,vehicle,null,0);
+        Assert.assertTrue(maxDistanceConstraint.fulfilled(context,route.getStart(),newAct(),act(0),0).equals(HardActivityConstraint.ConstraintsStatus.NOT_FULFILLED));
+        Assert.assertTrue(maxDistanceConstraint.fulfilled(context,act(0),newAct(),act(1),0).equals(HardActivityConstraint.ConstraintsStatus.NOT_FULFILLED));
+        Assert.assertTrue(maxDistanceConstraint.fulfilled(context,act(1),newAct(),act(2),0).equals(HardActivityConstraint.ConstraintsStatus.NOT_FULFILLED));
+        Assert.assertTrue(maxDistanceConstraint.fulfilled(context,act(2),newAct(),act(3),0).equals(HardActivityConstraint.ConstraintsStatus.NOT_FULFILLED));
+        Assert.assertTrue(maxDistanceConstraint.fulfilled(context,act(3),newAct(),act(4),0).equals(HardActivityConstraint.ConstraintsStatus.NOT_FULFILLED));
+        Assert.assertTrue(maxDistanceConstraint.fulfilled(context,act(4),newAct(),route.getEnd(),0).equals(HardActivityConstraint.ConstraintsStatus.NOT_FULFILLED));
+    }
+
+
+    @Test
+    public void insertNewInVehicle2ShouldBeCorrect(){
+        //current distance vehicle2: 160 allowed: 200
+        MaxDistanceConstraint maxDistanceConstraint =
+            new MaxDistanceConstraint(stateManager, traveledDistanceId, new TransportDistance() {
+                @Override
+                public double getDistance(Location from, Location to, double departureTime, Vehicle vehicle) {
+                    return vrp.getTransportCosts().getTransportTime(from,to,departureTime, null, vehicle);
+                }
+            },maxDistanceMap);
+        JobInsertionContext context = new JobInsertionContext(route,newDelivery,vehicle2,null,0);
+        Assert.assertTrue(maxDistanceConstraint.fulfilled(context,route.getStart(),newAct(),act(0),0).equals(HardActivityConstraint.ConstraintsStatus.FULFILLED));
+        //additional distance: 20+35-15=40
+        Assert.assertTrue(maxDistanceConstraint.fulfilled(context,act(0),newAct(),act(1),0).equals(HardActivityConstraint.ConstraintsStatus.FULFILLED));
+        //additional distance: 35+65-30=70
+        Assert.assertTrue(maxDistanceConstraint.fulfilled(context,act(1),newAct(),act(2),0).equals(HardActivityConstraint.ConstraintsStatus.NOT_FULFILLED));
+        //additional distance: 65+100-35
+        Assert.assertTrue(maxDistanceConstraint.fulfilled(context,act(2),newAct(),act(3),0).equals(HardActivityConstraint.ConstraintsStatus.NOT_FULFILLED));
+        //additional distance: 100+45-55
+        Assert.assertTrue(maxDistanceConstraint.fulfilled(context,act(3),newAct(),act(4),0).equals(HardActivityConstraint.ConstraintsStatus.NOT_FULFILLED));
+        //additional distance: 45+20-25
+        Assert.assertTrue(maxDistanceConstraint.fulfilled(context,act(4),newAct(),route.getEnd(),0).equals(HardActivityConstraint.ConstraintsStatus.FULFILLED));
+    }
+
+    private TourActivity act(int i) {
+        return route.getActivities().get(i);
+    }
+
+    private TourActivity newAct(){
+        return vrp.getActivities(newDelivery).get(0);
+    }
+
+    @Test
+    public void traveledDistanceShouldBeCorrect(){
+        Assert.assertEquals(20d,stateManager.getActivityState(route.getActivities().get(0),vehicle,traveledDistanceId,Double.class),0.01);
+        Assert.assertEquals(35d,stateManager.getActivityState(route.getActivities().get(1),vehicle,traveledDistanceId,Double.class),0.01);
+        Assert.assertEquals(65d,stateManager.getActivityState(route.getActivities().get(2),vehicle,traveledDistanceId,Double.class),0.01);
+        Assert.assertEquals(100d,stateManager.getActivityState(route.getActivities().get(3),vehicle,traveledDistanceId,Double.class),0.01);
+        Assert.assertEquals(155d,stateManager.getActivityState(route.getActivities().get(4),vehicle,traveledDistanceId,Double.class),0.01);
+
+    }
+
+    @Test
+    public void traveledDistanceWithVehicle2ShouldBeCorrect(){
+        Assert.assertEquals(0d,stateManager.getActivityState(route.getActivities().get(0),vehicle2,traveledDistanceId,Double.class),0.01);
+        Assert.assertEquals(15d,stateManager.getActivityState(route.getActivities().get(1),vehicle2,traveledDistanceId,Double.class),0.01);
+        Assert.assertEquals(45d,stateManager.getActivityState(route.getActivities().get(2),vehicle2,traveledDistanceId,Double.class),0.01);
+        Assert.assertEquals(80d,stateManager.getActivityState(route.getActivities().get(3),vehicle2,traveledDistanceId,Double.class),0.01);
+        Assert.assertEquals(135d,stateManager.getActivityState(route.getActivities().get(4),vehicle2,traveledDistanceId,Double.class),0.01);
+
+    }
+
+    @Test
+    public void distanceOfShipmentInRoute(){
+        double traveledDistanceBeforePickup = stateManager.getActivityState(route.getActivities().get(2), vehicle,traveledDistanceId, Double.class);
+        double traveledDistanceBeforeDelivery = stateManager.getActivityState(route.getActivities().get(4), vehicle,traveledDistanceId, Double.class);
+        Assert.assertEquals(90d,traveledDistanceBeforeDelivery-traveledDistanceBeforePickup,0.01);
+    }
+
+    @Test
+    public void distanceOfShipmentInRouteVehicle2(){
+        double traveledDistanceBeforePickup = stateManager.getActivityState(route.getActivities().get(2), vehicle2,traveledDistanceId, Double.class);
+        double traveledDistanceBeforeDelivery = stateManager.getActivityState(route.getActivities().get(4), vehicle2,traveledDistanceId, Double.class);
+        Assert.assertEquals(90d,traveledDistanceBeforeDelivery-traveledDistanceBeforePickup,0.01);
+    }
+
+    @Test
+    public void distanceOfPickupInRoute(){
+        double traveledDistanceBeforePickup = stateManager.getActivityState(route.getActivities().get(3),vehicle, traveledDistanceId, Double.class);
+        double total = stateManager.getRouteState(route, vehicle,traveledDistanceId, Double.class);
+        Assert.assertEquals(100d,total-traveledDistanceBeforePickup,0.01);
+    }
+
+    @Test
+    public void distanceOfPickupInRouteVehicle2(){
+        double traveledDistanceBeforePickup = stateManager.getActivityState(route.getActivities().get(3),vehicle2, traveledDistanceId, Double.class);
+        double total = stateManager.getRouteState(route, vehicle2,traveledDistanceId, Double.class);
+        Assert.assertEquals(80d,total-traveledDistanceBeforePickup,0.01);
+    }
+
+    @Test
+    public void distanceToTravelShouldBeCorrect(){
+        double total = stateManager.getRouteState(route,vehicle,traveledDistanceId,Double.class);
+        Assert.assertEquals(180d,total - stateManager.getActivityState(route.getActivities().get(0),vehicle,traveledDistanceId,Double.class),0.01);
+        Assert.assertEquals(165d,total - stateManager.getActivityState(route.getActivities().get(1),vehicle,traveledDistanceId,Double.class),0.01);
+        Assert.assertEquals(135d,total - stateManager.getActivityState(route.getActivities().get(2),vehicle,traveledDistanceId,Double.class),0.01);
+        Assert.assertEquals(100d,total - stateManager.getActivityState(route.getActivities().get(3),vehicle,traveledDistanceId,Double.class),0.01);
+        Assert.assertEquals(45d,total - stateManager.getActivityState(route.getActivities().get(4),vehicle,traveledDistanceId,Double.class),0.01);
+
+    }
+
+    @Test
+    public void distanceToTravelShouldBeCorrectVehicle2(){
+        double total = stateManager.getRouteState(route,vehicle2,traveledDistanceId,Double.class);
+        Assert.assertEquals(160d,total - stateManager.getActivityState(route.getActivities().get(0),vehicle2,traveledDistanceId,Double.class),0.01);
+        Assert.assertEquals(145d,total - stateManager.getActivityState(route.getActivities().get(1),vehicle2,traveledDistanceId,Double.class),0.01);
+        Assert.assertEquals(115d,total - stateManager.getActivityState(route.getActivities().get(2),vehicle2,traveledDistanceId,Double.class),0.01);
+        Assert.assertEquals(80d,total - stateManager.getActivityState(route.getActivities().get(3),vehicle2,traveledDistanceId,Double.class),0.01);
+        Assert.assertEquals(25d,total - stateManager.getActivityState(route.getActivities().get(4),vehicle2,traveledDistanceId,Double.class),0.01);
+
+    }
+}
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/DeliveryTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/DeliveryTest.java
index 0ab568c6f..6974757ee 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/DeliveryTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/DeliveryTest.java
@@ -17,22 +17,25 @@
  */
 package com.graphhopper.jsprit.core.problem.job;
 
-import com.graphhopper.jsprit.core.problem.Location;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
 import org.junit.Assert;
 import org.junit.Test;
 
-import static org.junit.Assert.*;
+import com.graphhopper.jsprit.core.problem.Location;
 
 public class DeliveryTest {
 
     @Test(expected = IllegalArgumentException.class)
     public void whenNeitherLocationIdNorCoordIsSet_itThrowsException() {
-        Delivery.Builder.newInstance("p").build();
+        new Delivery.Builder("p").build();
     }
 
     @Test
     public void whenAddingTwoCapDimension_nuOfDimsShouldBeTwo() {
-        Delivery one = Delivery.Builder.newInstance("s").setLocation(Location.newInstance("foofoo"))
+        Delivery one = new Delivery.Builder("s").setLocation(Location.newInstance("foofoo"))
             .addSizeDimension(0, 2)
             .addSizeDimension(1, 4)
             .build();
@@ -44,7 +47,7 @@ public void whenAddingTwoCapDimension_nuOfDimsShouldBeTwo() {
 
     @Test
     public void whenPickupIsBuiltWithoutSpecifyingCapacity_itShouldHvCapWithOneDimAndDimValOfZero() {
-        Delivery one = Delivery.Builder.newInstance("s").setLocation(Location.newInstance("foofoo"))
+        Delivery one = new Delivery.Builder("s").setLocation(Location.newInstance("foofoo"))
             .build();
         assertEquals(1, one.getSize().getNuOfDimensions());
         assertEquals(0, one.getSize().get(0));
@@ -52,7 +55,7 @@ public void whenPickupIsBuiltWithoutSpecifyingCapacity_itShouldHvCapWithOneDimAn
 
     @Test
     public void whenPickupIsBuiltWithConstructorWhereSizeIsSpecified_capacityShouldBeSetCorrectly() {
-        Delivery one = Delivery.Builder.newInstance("s").addSizeDimension(0, 1).setLocation(Location.newInstance("foofoo"))
+        Delivery one = new Delivery.Builder("s").addSizeDimension(0, 1).setLocation(Location.newInstance("foofoo"))
             .build();
         assertEquals(1, one.getSize().getNuOfDimensions());
         assertEquals(1, one.getSize().get(0));
@@ -60,7 +63,7 @@ public void whenPickupIsBuiltWithConstructorWhereSizeIsSpecified_capacityShouldB
 
     @Test
     public void whenAddingSkills_theyShouldBeAddedCorrectly() {
-        Delivery s = Delivery.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        Delivery s = new Delivery.Builder("s").setLocation(Location.newInstance("loc"))
             .addRequiredSkill("drill").addRequiredSkill("screwdriver").build();
         assertTrue(s.getRequiredSkills().containsSkill("drill"));
         assertTrue(s.getRequiredSkills().containsSkill("ScrewDriver"));
@@ -68,7 +71,7 @@ public void whenAddingSkills_theyShouldBeAddedCorrectly() {
 
     @Test
     public void whenAddingSkillsCaseSens_theyShouldBeAddedCorrectly() {
-        Delivery s = Delivery.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        Delivery s = new Delivery.Builder("s").setLocation(Location.newInstance("loc"))
             .addRequiredSkill("DriLl").addRequiredSkill("screwDriver").build();
         assertTrue(s.getRequiredSkills().containsSkill("drill"));
         assertTrue(s.getRequiredSkills().containsSkill("drilL"));
@@ -76,7 +79,7 @@ public void whenAddingSkillsCaseSens_theyShouldBeAddedCorrectly() {
 
     @Test
     public void whenAddingSkillsCaseSensV2_theyShouldBeAddedCorrectly() {
-        Delivery s = Delivery.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        Delivery s = new Delivery.Builder("s").setLocation(Location.newInstance("loc"))
             .addRequiredSkill("screwDriver").build();
         assertFalse(s.getRequiredSkills().containsSkill("drill"));
         assertFalse(s.getRequiredSkills().containsSkill("drilL"));
@@ -84,21 +87,21 @@ public void whenAddingSkillsCaseSensV2_theyShouldBeAddedCorrectly() {
 
     @Test
     public void nameShouldBeAssigned() {
-        Delivery s = Delivery.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        Delivery s = new Delivery.Builder("s").setLocation(Location.newInstance("loc"))
             .setName("name").build();
         assertEquals("name", s.getName());
     }
 
     @Test
     public void whenSettingPriorities_itShouldBeSetCorrectly(){
-        Delivery s = Delivery.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        Delivery s = new Delivery.Builder("s").setLocation(Location.newInstance("loc"))
             .setPriority(3).build();
         Assert.assertEquals(3, s.getPriority());
     }
 
     @Test
     public void whenNotSettingPriorities_defaultShouldBe(){
-        Delivery s = Delivery.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        Delivery s = new Delivery.Builder("s").setLocation(Location.newInstance("loc"))
             .build();
         Assert.assertEquals(2, s.getPriority());
     }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/GraphJobActivityListTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/GraphJobActivityListTest.java
new file mode 100644
index 000000000..b4fa1e46a
--- /dev/null
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/GraphJobActivityListTest.java
@@ -0,0 +1,200 @@
+package com.graphhopper.jsprit.core.problem.job;
+
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+import java.util.Arrays;
+import java.util.HashSet;
+import java.util.Set;
+
+import org.junit.Before;
+import org.junit.Test;
+
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.ServiceActivityNEW;
+
+public class GraphJobActivityListTest {
+
+    private AbstractJob job;
+
+    @Before
+    public void beforeClass() {
+        job = mock(Service.class);
+    }
+
+
+    private ServiceActivityNEW createActivity(AbstractJob job, String name) {
+        ServiceActivityNEW act = mock(ServiceActivityNEW.class);
+        when(act.getName()).thenReturn(name);
+        when(act.getJob()).thenReturn(job);
+        when(act.toString()).thenReturn(name);
+        return act;
+    }
+
+    private Set<JobActivity> setOf(JobActivity... actA) {
+        return new HashSet<>(Arrays.asList(actA));
+    }
+
+
+    @Test
+    public void whenCreatingList_itMustGiveBackTheCorrectJob() {
+        GraphJobActivityList list = new GraphJobActivityList(job);
+        assertEquals(job, list.getJob());
+    }
+
+    @Test
+    public void whenAddingAnActivity_itMustHaveTheCorrectJob() {
+        GraphJobActivityList list = new GraphJobActivityList(job);
+        ServiceActivityNEW actA = createActivity(job, "A");
+        list.addActivity(actA);
+        assertEquals(1, list.size());
+        assertEquals(actA, list.getAll().get(0));
+    }
+
+    @Test
+    public void whenAddingAnActivity_itMustInitializeTheCache() {
+        GraphJobActivityList list = new GraphJobActivityList(job);
+        ServiceActivityNEW actA = createActivity(job, "A");
+        list.addActivity(actA);
+        assertEquals(1, list.dependencies.size());
+        assertEquals(setOf(actA), list.dependencies.keySet());
+        assertEquals(1, list.transitivePrecedingDependencyCache.size());
+        assertEquals(setOf(actA), list.transitivePrecedingDependencyCache.keySet());
+        assertEquals(1, list.transitiveSubsequentDependencyCache.size());
+        assertEquals(setOf(actA), list.transitiveSubsequentDependencyCache.keySet());
+    }
+
+
+    @Test
+    public void whenAddingAnActivityTwice_itMustHaveToAddOnlyOnce() {
+        GraphJobActivityList list = new GraphJobActivityList(job);
+        ServiceActivityNEW actA = createActivity(job, "A");
+        list.addActivity(actA);
+        list.addActivity(actA);
+        assertEquals(1, list.size());
+        assertEquals(actA, list.getAll().get(0));
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void whenAddingAnActivityWithWrongJob_itMustThrowException() {
+        GraphJobActivityList list = new GraphJobActivityList(job);
+        list.addActivity(createActivity(mock(Service.class), "A"));
+    }
+
+    @Test
+    public void whenAddingADependency_itMustAddTheActivities() {
+        GraphJobActivityList list = new GraphJobActivityList(job);
+        ServiceActivityNEW actA = createActivity(job, "A");
+        ServiceActivityNEW actB = createActivity(job, "B");
+        list.addActivity(actA);
+        list.addDependency(actA, actB);
+        assertEquals(2, list.size());
+        assertEquals(actA, list.getAll().get(0));
+        assertEquals(actB, list.getAll().get(1));
+    }
+
+    @Test
+    public void whenAddingADependency_itMustUpdateCaches() {
+        GraphJobActivityList list = new GraphJobActivityList(job);
+        ServiceActivityNEW actA = createActivity(job, "A");
+        ServiceActivityNEW actB = createActivity(job, "B");
+        list.addDependency(actA, actB);
+        assertEquals(setOf(actB), list.dependencies.get(actA));
+        assertEquals(setOf(actA), list.transitivePrecedingDependencyCache.get(actB));
+        assertEquals(setOf(actB), list.transitiveSubsequentDependencyCache.get(actA));
+    }
+
+    @Test
+    public void whenAddingASecondDependency_itMustUpdateCachesTransitively() {
+        GraphJobActivityList list = new GraphJobActivityList(job);
+        ServiceActivityNEW actA = createActivity(job, "A");
+        ServiceActivityNEW actB = createActivity(job, "B");
+        ServiceActivityNEW actC = createActivity(job, "C");
+        list.addDependency(actA, actB);
+        list.addDependency(actB, actC);
+        assertEquals(setOf(actB), list.dependencies.get(actA));
+        assertEquals(setOf(actC), list.dependencies.get(actB));
+        assertEquals(setOf(actA), list.transitivePrecedingDependencyCache.get(actB));
+        assertEquals(setOf(actA, actB), list.transitivePrecedingDependencyCache.get(actC));
+        assertEquals(setOf(actB, actC), list.transitiveSubsequentDependencyCache.get(actA));
+        assertEquals(setOf(actC), list.transitiveSubsequentDependencyCache.get(actB));
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void whenAddingADependencyWhichCreatesCycly_itMustThrowAnException() {
+        GraphJobActivityList list = new GraphJobActivityList(job);
+        ServiceActivityNEW actA = createActivity(job, "A");
+        ServiceActivityNEW actB = createActivity(job, "B");
+        list.addDependency(actA, actB);
+        list.addDependency(actB, actA);
+    }
+
+
+    @Test
+    public void complexTest() {
+        ServiceActivityNEW actA = createActivity(job, "A");
+        ServiceActivityNEW actB = createActivity(job, "B");
+        ServiceActivityNEW actC = createActivity(job, "C");
+        ServiceActivityNEW actD = createActivity(job, "D");
+        ServiceActivityNEW actE = createActivity(job, "E");
+
+        GraphJobActivityList list = new GraphJobActivityList(job);
+        list.addDependency(actA, actB);
+        list.addDependency(actA, actC);
+        list.addDependency(actB, actD);
+        list.addActivity(actE);
+        assertEquals(setOf(), list.transitivePrecedingDependencyCache.get(actA));
+        assertEquals(setOf(actA), list.transitivePrecedingDependencyCache.get(actB));
+        assertEquals(setOf(actA), list.transitivePrecedingDependencyCache.get(actC));
+        assertEquals(setOf(actA, actB), list.transitivePrecedingDependencyCache.get(actD));
+        assertEquals(setOf(), list.transitivePrecedingDependencyCache.get(actE));
+        assertEquals(setOf(actB, actC, actD), list.transitiveSubsequentDependencyCache.get(actA));
+        assertEquals(setOf(actD), list.transitiveSubsequentDependencyCache.get(actB));
+        assertEquals(setOf(), list.transitiveSubsequentDependencyCache.get(actC));
+        assertEquals(setOf(), list.transitiveSubsequentDependencyCache.get(actD));
+        assertEquals(setOf(), list.transitiveSubsequentDependencyCache.get(actE));
+        list.printDetailed();
+
+        list.addDependency(actB, actE);
+        assertEquals(setOf(), list.transitivePrecedingDependencyCache.get(actA));
+        assertEquals(setOf(actA), list.transitivePrecedingDependencyCache.get(actB));
+        assertEquals(setOf(actA), list.transitivePrecedingDependencyCache.get(actC));
+        assertEquals(setOf(actA, actB), list.transitivePrecedingDependencyCache.get(actD));
+        assertEquals(setOf(actA, actB), list.transitivePrecedingDependencyCache.get(actE));
+        assertEquals(setOf(actB, actC, actD, actE), list.transitiveSubsequentDependencyCache.get(actA));
+        assertEquals(setOf(actD, actE), list.transitiveSubsequentDependencyCache.get(actB));
+        assertEquals(setOf(), list.transitiveSubsequentDependencyCache.get(actC));
+        assertEquals(setOf(), list.transitiveSubsequentDependencyCache.get(actD));
+        assertEquals(setOf(), list.transitiveSubsequentDependencyCache.get(actE));
+        list.printDetailed();
+
+        list.addDependency(actC, actD);
+        assertEquals(setOf(), list.transitivePrecedingDependencyCache.get(actA));
+        assertEquals(setOf(actA), list.transitivePrecedingDependencyCache.get(actB));
+        assertEquals(setOf(actA), list.transitivePrecedingDependencyCache.get(actC));
+        assertEquals(setOf(actA, actB, actC), list.transitivePrecedingDependencyCache.get(actD));
+        assertEquals(setOf(actA, actB), list.transitivePrecedingDependencyCache.get(actE));
+        assertEquals(setOf(actB, actC, actD, actE), list.transitiveSubsequentDependencyCache.get(actA));
+        assertEquals(setOf(actD, actE), list.transitiveSubsequentDependencyCache.get(actB));
+        assertEquals(setOf(actD), list.transitiveSubsequentDependencyCache.get(actC));
+        assertEquals(setOf(), list.transitiveSubsequentDependencyCache.get(actD));
+        assertEquals(setOf(), list.transitiveSubsequentDependencyCache.get(actE));
+        list.printDetailed();
+
+        list.addDependency(actD, actE);
+        assertEquals(setOf(), list.transitivePrecedingDependencyCache.get(actA));
+        assertEquals(setOf(actA), list.transitivePrecedingDependencyCache.get(actB));
+        assertEquals(setOf(actA), list.transitivePrecedingDependencyCache.get(actC));
+        assertEquals(setOf(actA, actB, actC), list.transitivePrecedingDependencyCache.get(actD));
+        assertEquals(setOf(actA, actB, actC, actD), list.transitivePrecedingDependencyCache.get(actE));
+        assertEquals(setOf(actB, actC, actD, actE), list.transitiveSubsequentDependencyCache.get(actA));
+        assertEquals(setOf(actD, actE), list.transitiveSubsequentDependencyCache.get(actB));
+        assertEquals(setOf(actD, actE), list.transitiveSubsequentDependencyCache.get(actC));
+        assertEquals(setOf(actE), list.transitiveSubsequentDependencyCache.get(actD));
+        assertEquals(setOf(), list.transitiveSubsequentDependencyCache.get(actE));
+
+        list.printDetailed();
+    }
+
+}
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/PickupTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/PickupTest.java
index 6236536c2..f7204b3cc 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/PickupTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/PickupTest.java
@@ -17,22 +17,25 @@
  */
 package com.graphhopper.jsprit.core.problem.job;
 
-import com.graphhopper.jsprit.core.problem.Location;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
 import org.junit.Assert;
 import org.junit.Test;
 
-import static org.junit.Assert.*;
+import com.graphhopper.jsprit.core.problem.Location;
 
 public class PickupTest {
 
     @Test(expected = IllegalArgumentException.class)
     public void whenNeitherLocationIdNorCoordIsSet_itThrowsException() {
-        Pickup.Builder.newInstance("p").build();
+        new Pickup.Builder("p").build();
     }
 
     @Test
     public void whenAddingTwoCapDimension_nuOfDimsShouldBeTwo() {
-        Pickup one = Pickup.Builder.newInstance("s").setLocation(Location.newInstance("foofoo"))
+        Pickup one = new Pickup.Builder("s").setLocation(Location.newInstance("foofoo"))
             .addSizeDimension(0, 2)
             .addSizeDimension(1, 4)
             .build();
@@ -44,7 +47,7 @@ public void whenAddingTwoCapDimension_nuOfDimsShouldBeTwo() {
 
     @Test
     public void whenPickupIsBuiltWithoutSpecifyingCapacity_itShouldHvCapWithOneDimAndDimValOfZero() {
-        Pickup one = Pickup.Builder.newInstance("s").setLocation(Location.newInstance("foofoo"))
+        Pickup one = new Pickup.Builder("s").setLocation(Location.newInstance("foofoo"))
             .build();
         assertEquals(1, one.getSize().getNuOfDimensions());
         assertEquals(0, one.getSize().get(0));
@@ -52,7 +55,7 @@ public void whenPickupIsBuiltWithoutSpecifyingCapacity_itShouldHvCapWithOneDimAn
 
     @Test
     public void whenPickupIsBuiltWithConstructorWhereSizeIsSpecified_capacityShouldBeSetCorrectly() {
-        Pickup one = Pickup.Builder.newInstance("s").addSizeDimension(0, 1).setLocation(Location.newInstance("foofoo"))
+        Pickup one = new Pickup.Builder("s").addSizeDimension(0, 1).setLocation(Location.newInstance("foofoo"))
             .build();
         assertEquals(1, one.getSize().getNuOfDimensions());
         assertEquals(1, one.getSize().get(0));
@@ -60,7 +63,7 @@ public void whenPickupIsBuiltWithConstructorWhereSizeIsSpecified_capacityShouldB
 
     @Test
     public void whenAddingSkills_theyShouldBeAddedCorrectly() {
-        Pickup s = Pickup.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        Pickup s = new Pickup.Builder("s").setLocation(Location.newInstance("loc"))
             .addRequiredSkill("drill").addRequiredSkill("screwdriver").build();
         assertTrue(s.getRequiredSkills().containsSkill("drill"));
         assertTrue(s.getRequiredSkills().containsSkill("drill"));
@@ -69,7 +72,7 @@ public void whenAddingSkills_theyShouldBeAddedCorrectly() {
 
     @Test
     public void whenAddingSkillsCaseSens_theyShouldBeAddedCorrectly() {
-        Pickup s = Pickup.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        Pickup s = new Pickup.Builder("s").setLocation(Location.newInstance("loc"))
             .addRequiredSkill("DriLl").addRequiredSkill("screwDriver").build();
         assertTrue(s.getRequiredSkills().containsSkill("drill"));
         assertTrue(s.getRequiredSkills().containsSkill("drilL"));
@@ -77,7 +80,7 @@ public void whenAddingSkillsCaseSens_theyShouldBeAddedCorrectly() {
 
     @Test
     public void whenAddingSkillsCaseSensV2_theyShouldBeAddedCorrectly() {
-        Pickup s = Pickup.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        Pickup s = new Pickup.Builder("s").setLocation(Location.newInstance("loc"))
             .addRequiredSkill("screwDriver").build();
         assertFalse(s.getRequiredSkills().containsSkill("drill"));
         assertFalse(s.getRequiredSkills().containsSkill("drilL"));
@@ -85,7 +88,7 @@ public void whenAddingSkillsCaseSensV2_theyShouldBeAddedCorrectly() {
 
     @Test
     public void nameShouldBeAssigned() {
-        Pickup s = Pickup.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        Pickup s = new Pickup.Builder("s").setLocation(Location.newInstance("loc"))
             .setName("name").build();
         assertEquals("name", s.getName());
     }
@@ -93,14 +96,14 @@ public void nameShouldBeAssigned() {
 
     @Test
     public void whenSettingPriorities_itShouldBeSetCorrectly(){
-        Pickup s = Pickup.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        Pickup s = new Pickup.Builder("s").setLocation(Location.newInstance("loc"))
             .setPriority(3).build();
         Assert.assertEquals(3, s.getPriority());
     }
 
     @Test
     public void whenNotSettingPriorities_defaultShouldBe(){
-        Pickup s = Pickup.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        Pickup s = new Pickup.Builder("s").setLocation(Location.newInstance("loc"))
             .build();
         Assert.assertEquals(2, s.getPriority());
     }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ServiceTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ServiceTest.java
index bec514e25..6d09554ed 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ServiceTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ServiceTest.java
@@ -17,32 +17,37 @@
  */
 package com.graphhopper.jsprit.core.problem.job;
 
-import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
-import org.junit.Assert;
-import org.junit.Test;
+import static org.hamcrest.core.Is.is;
+import static org.hamcrest.core.IsCollectionContaining.hasItem;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertThat;
+import static org.junit.Assert.assertTrue;
 
 import java.util.HashSet;
 import java.util.Set;
 
-import static org.hamcrest.core.Is.is;
-import static org.hamcrest.core.IsCollectionContaining.hasItem;
-import static org.junit.Assert.*;
+import org.junit.Assert;
+import org.junit.Test;
+
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 
 public class ServiceTest {
 
     @Test
     public void whenTwoServicesHaveTheSameId_theirReferencesShouldBeUnEqual() {
-        Service one = Service.Builder.newInstance("service").addSizeDimension(0, 10).setLocation(Location.newInstance("foo")).build();
-        Service two = Service.Builder.newInstance("service").addSizeDimension(0, 10).setLocation(Location.newInstance("fo")).build();
+        Service one = new Service.Builder("service").addSizeDimension(0, 10).setLocation(Location.newInstance("foo")).build();
+        Service two = new Service.Builder("service").addSizeDimension(0, 10).setLocation(Location.newInstance("fo")).build();
 
         assertTrue(one != two);
     }
 
     @Test
     public void whenTwoServicesHaveTheSameId_theyShouldBeEqual() {
-        Service one = Service.Builder.newInstance("service").addSizeDimension(0, 10).setLocation(Location.newInstance("foo")).build();
-        Service two = Service.Builder.newInstance("service").addSizeDimension(0, 10).setLocation(Location.newInstance("fo")).build();
+        Service one = new Service.Builder("service").addSizeDimension(0, 10).setLocation(Location.newInstance("foo")).build();
+        Service two = new Service.Builder("service").addSizeDimension(0, 10).setLocation(Location.newInstance("fo")).build();
 
         assertTrue(one.equals(two));
     }
@@ -50,8 +55,8 @@ public void whenTwoServicesHaveTheSameId_theyShouldBeEqual() {
     @Test
     public void noName() {
         Set<Service> serviceSet = new HashSet<Service>();
-        Service one = Service.Builder.newInstance("service").addSizeDimension(0, 10).setLocation(Location.newInstance("foo")).build();
-        Service two = Service.Builder.newInstance("service").addSizeDimension(0, 10).setLocation(Location.newInstance("fo")).build();
+        Service one = new Service.Builder("service").addSizeDimension(0, 10).setLocation(Location.newInstance("foo")).build();
+        Service two = new Service.Builder("service").addSizeDimension(0, 10).setLocation(Location.newInstance("fo")).build();
         serviceSet.add(one);
 //		assertTrue(serviceSet.contains(two));
         serviceSet.remove(two);
@@ -61,12 +66,12 @@ public void noName() {
     @Test(expected = IllegalArgumentException.class)
     public void whenCapacityDimValueIsNegative_throwIllegalStateExpception() {
         @SuppressWarnings("unused")
-        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("foo")).addSizeDimension(0, -10).build();
+        Service s = new Service.Builder("s").setLocation(Location.newInstance("foo")).addSizeDimension(0, -10).build();
     }
 
     @Test
     public void whenAddingTwoCapDimension_nuOfDimsShouldBeTwo() {
-        Service one = Service.Builder.newInstance("s").setLocation(Location.newInstance("foofoo"))
+        Service one = new Service.Builder("s").setLocation(Location.newInstance("foofoo"))
             .addSizeDimension(0, 2)
             .addSizeDimension(1, 4)
             .build();
@@ -75,7 +80,7 @@ public void whenAddingTwoCapDimension_nuOfDimsShouldBeTwo() {
 
     @Test
     public void whenShipmentIsBuiltWithoutSpecifyingCapacity_itShouldHvCapWithOneDimAndDimValOfZero() {
-        Service one = Service.Builder.newInstance("s").setLocation(Location.newInstance("foofoo"))
+        Service one = new Service.Builder("s").setLocation(Location.newInstance("foofoo"))
             .build();
         assertEquals(1, one.getSize().getNuOfDimensions());
         assertEquals(0, one.getSize().get(0));
@@ -83,7 +88,7 @@ public void whenShipmentIsBuiltWithoutSpecifyingCapacity_itShouldHvCapWithOneDim
 
     @Test
     public void whenShipmentIsBuiltWithConstructorWhereSizeIsSpecified_capacityShouldBeSetCorrectly() {
-        Service one = Service.Builder.newInstance("s").addSizeDimension(0, 1).setLocation(Location.newInstance("foofoo"))
+        Service one = new Service.Builder("s").addSizeDimension(0, 1).setLocation(Location.newInstance("foofoo"))
             .build();
         assertEquals(1, one.getSize().getNuOfDimensions());
         assertEquals(1, one.getSize().get(0));
@@ -91,26 +96,26 @@ public void whenShipmentIsBuiltWithConstructorWhereSizeIsSpecified_capacityShoul
 
     @Test
     public void whenCallingForNewInstanceOfBuilder_itShouldReturnBuilderCorrectly() {
-        Service.Builder builder = Service.Builder.newInstance("s");
+        Service.Builder builder = new Service.Builder("s");
         assertNotNull(builder);
     }
 
     @Test
     public void whenSettingNoType_itShouldReturn_service() {
-        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc")).build();
+        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc")).build();
         assertEquals("service", s.getType());
     }
 
     @Test
     public void whenSettingLocation_itShouldBeSetCorrectly() {
-        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc")).build();
+        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc")).build();
         assertEquals("loc", s.getLocation().getId());
         assertEquals("loc", s.getLocation().getId());
     }
 
     @Test
     public void whenSettingLocation_itShouldWork() {
-        Service s = Service.Builder.newInstance("s").setLocation(Location.Builder.newInstance().setId("loc").build()).build();
+        Service s = new Service.Builder("s").setLocation(Location.Builder.newInstance().setId("loc").build()).build();
         assertEquals("loc", s.getLocation().getId());
         assertEquals("loc", s.getLocation().getId());
     }
@@ -118,7 +123,7 @@ public void whenSettingLocation_itShouldWork() {
 
 	@Test
 	public void whenSettingLocationCoord_itShouldBeSetCorrectly(){
-		Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance(1, 2)).build();
+		Service s = new Service.Builder("s").setLocation(Location.newInstance(1, 2)).build();
 		assertEquals(1.0,s.getLocation().getCoordinate().getX(),0.01);
 		assertEquals(2.0,s.getLocation().getCoordinate().getY(),0.01);
         assertEquals(1.0,s.getLocation().getCoordinate().getX(),0.01);
@@ -128,37 +133,37 @@ public void whenSettingLocationCoord_itShouldBeSetCorrectly(){
 	@Test(expected=IllegalArgumentException.class)
 	public void whenSettingNeitherLocationIdNorCoord_throwsException(){
 		@SuppressWarnings("unused")
-		Service s = Service.Builder.newInstance("s").build();
+		Service s = new Service.Builder("s").build();
 	}
 
 	@Test(expected=IllegalArgumentException.class)
 	public void whenServiceTimeSmallerZero_throwIllegalStateException(){
 		@SuppressWarnings("unused")
-		Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc")).setServiceTime(-1).build();
+		Service s = new Service.Builder("s").setLocation(Location.newInstance("loc")).setServiceTime(-1).build();
 	}
 
 	@Test
 	public void whenSettingServiceTime_itShouldBeSetCorrectly(){
-		Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc")).setServiceTime(1).build();
+		Service s = new Service.Builder("s").setLocation(Location.newInstance("loc")).setServiceTime(1).build();
 		assertEquals(1.0,s.getServiceDuration(),0.01);
 	}
 
 	@Test(expected=IllegalArgumentException.class)
 	public void whenTimeWindowIsNull_throwException(){
 		@SuppressWarnings("unused")
-		Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc")).setTimeWindow(null).build();
+		Service s = new Service.Builder("s").setLocation(Location.newInstance("loc")).setTimeWindow(null).build();
 	}
 
 	@Test
 	public void whenSettingTimeWindow_itShouldBeSetCorrectly(){
-		Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc")).setTimeWindow(TimeWindow.newInstance(1.0, 2.0)).build();
+		Service s = new Service.Builder("s").setLocation(Location.newInstance("loc")).setTimeWindow(TimeWindow.newInstance(1.0, 2.0)).build();
 		assertEquals(1.0,s.getTimeWindow().getStart(),0.01);
 		assertEquals(2.0,s.getTimeWindow().getEnd(),0.01);
 	}
 
 	@Test
 	public void whenAddingSkills_theyShouldBeAddedCorrectly(){
-		Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+		Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
 				.addRequiredSkill("drill").addRequiredSkill("screwdriver").build();
 		assertTrue(s.getRequiredSkills().containsSkill("drill"));
 		assertTrue(s.getRequiredSkills().containsSkill("drill"));
@@ -167,7 +172,7 @@ public void whenAddingSkills_theyShouldBeAddedCorrectly(){
 
 	@Test
 	public void whenAddingSkillsCaseSens_theyShouldBeAddedCorrectly(){
-		Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+		Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
 				.addRequiredSkill("DriLl").addRequiredSkill("screwDriver").build();
 		assertTrue(s.getRequiredSkills().containsSkill("drill"));
 		assertTrue(s.getRequiredSkills().containsSkill("drilL"));
@@ -177,7 +182,7 @@ public void whenAddingSkillsCaseSens_theyShouldBeAddedCorrectly(){
     public void whenAddingSeveralTimeWindows_itShouldBeSetCorrectly(){
         TimeWindow tw1 = TimeWindow.newInstance(1.0, 2.0);
         TimeWindow tw2 = TimeWindow.newInstance(3.0, 5.0);
-        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
             .addTimeWindow(tw1)
             .addTimeWindow(tw2)
             .build();
@@ -188,7 +193,7 @@ public void whenAddingSeveralTimeWindows_itShouldBeSetCorrectly(){
 
     @Test
     public void whenAddingTimeWindow_itShouldBeSetCorrectly(){
-        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
             .addTimeWindow(TimeWindow.newInstance(1.0, 2.0)).build();
         assertEquals(1.0, s.getTimeWindow().getStart(), 0.01);
         assertEquals(2.0, s.getTimeWindow().getEnd(), 0.01);
@@ -199,7 +204,7 @@ public void whenAddingTimeWindow_itShouldBeSetCorrectly(){
 
     @Test
     public void whenAddingSkillsCaseSensV2_theyShouldBeAddedCorrectly() {
-        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
             .addRequiredSkill("screwDriver").build();
         assertFalse(s.getRequiredSkills().containsSkill("drill"));
         assertFalse(s.getRequiredSkills().containsSkill("drilL"));
@@ -207,14 +212,14 @@ public void whenAddingSkillsCaseSensV2_theyShouldBeAddedCorrectly() {
 
     @Test
     public void nameShouldBeAssigned() {
-        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
             .setName("name").build();
         assertEquals("name", s.getName());
     }
 
 	@Test
 	public void shouldKnowMultipleTimeWindows(){
-		Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+		Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
 				.addTimeWindow(TimeWindow.newInstance(0., 10.)).addTimeWindow(TimeWindow.newInstance(20., 30.))
 				.setName("name").build();
 		assertEquals(2,s.getTimeWindows().size());
@@ -222,7 +227,7 @@ public void shouldKnowMultipleTimeWindows(){
 
 	@Test(expected = IllegalArgumentException.class)
 	public void whenMultipleTWOverlap_throwEx(){
-		Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+		Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
 				.addTimeWindow(TimeWindow.newInstance(0.,10.))
 				.addTimeWindow(TimeWindow.newInstance(5., 30.))
 				.setName("name").build();
@@ -230,7 +235,7 @@ public void whenMultipleTWOverlap_throwEx(){
 
 	@Test(expected = IllegalArgumentException.class)
 	public void whenMultipleTWOverlap2_throwEx(){
-		Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+		Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
 				.addTimeWindow(TimeWindow.newInstance(20., 30.))
 				.addTimeWindow(TimeWindow.newInstance(0., 25.))
 				.setName("name").build();
@@ -238,35 +243,35 @@ public void whenMultipleTWOverlap2_throwEx(){
 
     @Test
     public void whenSettingPriorities_itShouldBeSetCorrectly(){
-        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
             .setPriority(1).build();
         Assert.assertEquals(1, s.getPriority());
     }
 
     @Test
     public void whenSettingPriorities_itShouldBeSetCorrectly2(){
-        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
             .setPriority(3).build();
         Assert.assertEquals(3, s.getPriority());
     }
 
     @Test
     public void whenNotSettingPriorities_defaultShouldBe2(){
-        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
             .build();
         Assert.assertEquals(2, s.getPriority());
     }
 
     @Test(expected = IllegalArgumentException.class)
     public void whenSettingIncorrectPriorities_itShouldThrowException(){
-        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
             .setPriority(30).build();
 
     }
 
     @Test(expected = IllegalArgumentException.class)
     public void whenSettingIncorrectPriorities_itShouldThrowException2(){
-        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
             .setPriority(0).build();
 
     }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ShipmentTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ShipmentTest.java
index 6c463d04c..e8a649542 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ShipmentTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ShipmentTest.java
@@ -17,16 +17,21 @@
  */
 package com.graphhopper.jsprit.core.problem.job;
 
+import static org.hamcrest.core.Is.is;
+import static org.hamcrest.core.IsCollectionContaining.hasItem;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertThat;
+import static org.junit.Assert.assertTrue;
+
+import org.junit.Assert;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.util.Coordinate;
 import com.graphhopper.jsprit.core.util.TestUtils;
-import org.junit.Assert;
-import org.junit.Test;
-
-import static org.hamcrest.core.Is.is;
-import static org.hamcrest.core.IsCollectionContaining.hasItem;
-import static org.junit.Assert.*;
 
 public class ShipmentTest {
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/misc/JobInsertionContextTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/misc/JobInsertionContextTest.java
index 8f0926450..c34ff0568 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/misc/JobInsertionContextTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/misc/JobInsertionContextTest.java
@@ -19,17 +19,18 @@
 package com.graphhopper.jsprit.core.problem.misc;
 
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+import static org.mockito.Mockito.mock;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.problem.driver.Driver;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
-import org.junit.Before;
-import org.junit.Test;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.mockito.Mockito.mock;
 
 public class JobInsertionContextTest {
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/VehicleRoutingProblemSolutionTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/VehicleRoutingProblemSolutionTest.java
index 628cbe6fb..11c0468d1 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/VehicleRoutingProblemSolutionTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/VehicleRoutingProblemSolutionTest.java
@@ -17,18 +17,19 @@
  */
 package com.graphhopper.jsprit.core.problem.solution;
 
-import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-import org.junit.Assert;
-import org.junit.Test;
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Mockito.mock;
 
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
 
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.mock;
+import org.junit.Assert;
+import org.junit.Test;
+
+import com.graphhopper.jsprit.core.problem.job.Job;
+import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 
 public class VehicleRoutingProblemSolutionTest {
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/TestVehicleRoute.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/TestVehicleRoute.java
index f5fdb91b4..e81da743f 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/TestVehicleRoute.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/TestVehicleRoute.java
@@ -17,26 +17,28 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
+import java.util.Iterator;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.driver.DriverImpl;
 import com.graphhopper.jsprit.core.problem.driver.DriverImpl.NoDriver;
 import com.graphhopper.jsprit.core.problem.job.Delivery;
 import com.graphhopper.jsprit.core.problem.job.Pickup;
 import com.graphhopper.jsprit.core.problem.job.Service;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverService;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupService;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.ServiceActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverServiceDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupServiceDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.ServiceActivityNEW;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.Iterator;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
 
 
 public class TestVehicleRoute {
@@ -83,7 +85,7 @@ public void whenBuildingRouteWithNulls_itThrowsException() {
     @Test
     public void whenBuildingANonEmptyTour2Times_tourIterIteratesOverActivitiesCorrectly() {
         VehicleRoute.Builder routeBuilder = VehicleRoute.Builder.newInstance(vehicle, driver);
-        routeBuilder.addService(Service.Builder.newInstance("2").addSizeDimension(0, 30).setLocation(Location.newInstance("1")).build());
+        routeBuilder.addService(new Service.Builder("2").addSizeDimension(0, 30).setLocation(Location.newInstance("1")).build());
         VehicleRoute route = routeBuilder.build();
 
         {
@@ -97,7 +99,7 @@ public void whenBuildingANonEmptyTour2Times_tourIterIteratesOverActivitiesCorrec
             assertEquals(1, count);
         }
         {
-            route.getTourActivities().addActivity(ServiceActivity.newInstance(Service.Builder.newInstance("3").addSizeDimension(0, 30).setLocation(Location.newInstance("1")).build()));
+            route.getTourActivities().addActivity(ServiceActivityNEW.newInstance(new Service.Builder("3").addSizeDimension(0, 30).setLocation(Location.newInstance("1")).build()));
             Iterator<TourActivity> iter = route.getTourActivities().iterator();
             int count = 0;
             while (iter.hasNext()) {
@@ -125,7 +127,7 @@ public void whenBuildingANonEmptyTour_tourReverseIterIteratesOverActivitiesCorre
     @Test
     public void whenBuildingANonEmptyTourV2_tourReverseIterIteratesOverActivitiesCorrectly() {
         VehicleRoute.Builder routeBuilder = VehicleRoute.Builder.newInstance(vehicle, driver);
-        routeBuilder.addService(Service.Builder.newInstance("2").addSizeDimension(0, 30).setLocation(Location.newInstance("1")).build());
+        routeBuilder.addService(new Service.Builder("2").addSizeDimension(0, 30).setLocation(Location.newInstance("1")).build());
         VehicleRoute route = routeBuilder.build();
         Iterator<TourActivity> iter = route.getTourActivities().reverseActivityIterator();
         int count = 0;
@@ -140,8 +142,8 @@ public void whenBuildingANonEmptyTourV2_tourReverseIterIteratesOverActivitiesCor
     @Test
     public void whenBuildingANonEmptyTour2Times_tourReverseIterIteratesOverActivitiesCorrectly() {
         VehicleRoute.Builder routeBuilder = VehicleRoute.Builder.newInstance(vehicle, driver);
-        routeBuilder.addService(Service.Builder.newInstance("2").addSizeDimension(0, 30).setLocation(Location.newInstance("1")).build());
-        routeBuilder.addService(Service.Builder.newInstance("3").addSizeDimension(0, 30).setLocation(Location.newInstance("2")).build());
+        routeBuilder.addService(new Service.Builder("2").addSizeDimension(0, 30).setLocation(Location.newInstance("1")).build());
+        routeBuilder.addService(new Service.Builder("3").addSizeDimension(0, 30).setLocation(Location.newInstance("2")).build());
         VehicleRoute route = routeBuilder.build();
         {
             Iterator<TourActivity> iter = route.getTourActivities().reverseActivityIterator();
@@ -299,56 +301,56 @@ public void whenIniRouteWithNewVehicle_depTimeMustBeSetDepTime() {
     @Test
     public void whenAddingPickup_itShouldBeTreatedAsPickup() {
 
-        Pickup pickup = (Pickup) Pickup.Builder.newInstance("pick").setLocation(Location.newInstance("pickLoc")).build();
+        Pickup pickup = new Pickup.Builder("pick").setLocation(Location.newInstance("pickLoc")).build();
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("vehicle").setStartLocation(Location.newInstance("startLoc")).build();
         VehicleRoute route = VehicleRoute.Builder.newInstance(vehicle).addService(pickup).build();
 
         TourActivity act = route.getActivities().get(0);
-        assertTrue(act.getName().equals("pickup"));
-        assertTrue(act instanceof PickupService);
-        assertTrue(((TourActivity.JobActivity) act).getJob() instanceof Pickup);
+        assertEquals("pick.pickup", act.getName());
+        assertTrue(act instanceof PickupServiceDEPRECATED);
+        assertTrue(((JobActivity) act).getJob() instanceof Pickup);
 
     }
 
     @Test
     public void whenAddingPickup_itShouldBeAdded() {
 
-        Pickup pickup = (Pickup) Pickup.Builder.newInstance("pick").setLocation(Location.newInstance("pickLoc")).build();
+        Pickup pickup = new Pickup.Builder("pick").setLocation(Location.newInstance("pickLoc")).build();
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("vehicle").setStartLocation(Location.newInstance("startLoc")).build();
         VehicleRoute route = VehicleRoute.Builder.newInstance(vehicle).addPickup(pickup).build();
 
         TourActivity act = route.getActivities().get(0);
-        assertTrue(act.getName().equals("pickup"));
-        assertTrue(act instanceof PickupService);
-        assertTrue(((TourActivity.JobActivity) act).getJob() instanceof Pickup);
+        assertEquals("pick.pickup", act.getName());
+        assertTrue(act instanceof PickupServiceDEPRECATED);
+        assertTrue(((JobActivity) act).getJob() instanceof Pickup);
 
     }
 
     @Test
     public void whenAddingDelivery_itShouldBeTreatedAsDelivery() {
 
-        Delivery delivery = (Delivery) Delivery.Builder.newInstance("delivery").setLocation(Location.newInstance("deliveryLoc")).build();
+        Delivery delivery = new Delivery.Builder("delivery").setLocation(Location.newInstance("deliveryLoc")).build();
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("vehicle").setStartLocation(Location.newInstance("startLoc")).build();
         VehicleRoute route = VehicleRoute.Builder.newInstance(vehicle).addService(delivery).build();
 
         TourActivity act = route.getActivities().get(0);
-        assertTrue(act.getName().equals("delivery"));
-        assertTrue(act instanceof DeliverService);
-        assertTrue(((TourActivity.JobActivity) act).getJob() instanceof Delivery);
+        assertEquals("delivery.delivery", act.getName());
+        assertTrue(act instanceof DeliverServiceDEPRECATED);
+        assertTrue(((JobActivity) act).getJob() instanceof Delivery);
 
     }
 
     @Test
     public void whenAddingDelivery_itShouldBeAdded() {
 
-        Delivery delivery = (Delivery) Delivery.Builder.newInstance("delivery").setLocation(Location.newInstance("deliveryLoc")).build();
+        Delivery delivery = new Delivery.Builder("delivery").setLocation(Location.newInstance("deliveryLoc")).build();
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("vehicle").setStartLocation(Location.newInstance("startLoc")).build();
         VehicleRoute route = VehicleRoute.Builder.newInstance(vehicle).addDelivery(delivery).build();
 
         TourActivity act = route.getActivities().get(0);
-        assertTrue(act.getName().equals("delivery"));
-        assertTrue(act instanceof DeliverService);
-        assertTrue(((TourActivity.JobActivity) act).getJob() instanceof Delivery);
+        assertEquals("delivery.delivery", act.getName());
+        assertTrue(act instanceof DeliverServiceDEPRECATED);
+        assertTrue(((JobActivity) act).getJob() instanceof Delivery);
 
     }
 }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRouteBuilderTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRouteBuilderTest.java
index dbb71cccb..63a0fb818 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRouteBuilderTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRouteBuilderTest.java
@@ -17,18 +17,19 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route;
 
-import com.graphhopper.jsprit.core.problem.Capacity;
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.driver.Driver;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.Shipment.Builder;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
-import org.junit.Test;
-
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
 
 
 public class VehicleRouteBuilderTest {
@@ -42,9 +43,7 @@ public void whenDeliveryIsAddedBeforePickup_throwsException() {
 
     @Test(expected = IllegalArgumentException.class)
     public void whenPickupIsAddedTwice_throwsException() {
-        Shipment s = mock(Shipment.class);
-        when(s.getSize()).thenReturn(Capacity.Builder.newInstance().build());
-        when(s.getPickupTimeWindow()).thenReturn(TimeWindow.newInstance(0., 10.));
+        Shipment s = createStandardShipment("s1").build();
         VehicleRoute.Builder builder = VehicleRoute.Builder.newInstance(mock(Vehicle.class), mock(Driver.class));
         builder.addPickup(s);
         builder.addPickup(s);
@@ -52,11 +51,8 @@ public void whenPickupIsAddedTwice_throwsException() {
 
     @Test(expected = IllegalArgumentException.class)
     public void whenShipmentIsPickedDeliveredAndDeliveredAgain_throwsException() {
-        Shipment s = mock(Shipment.class);
-        Capacity capacity = Capacity.Builder.newInstance().build();
-        when(s.getSize()).thenReturn(capacity);
-        when(s.getPickupTimeWindow()).thenReturn(TimeWindow.newInstance(0.,10.));
-        when(s.getDeliveryTimeWindow()).thenReturn(TimeWindow.newInstance(0.,10.));
+        Shipment s = createStandardShipment("s1").build();
+
         VehicleRoute.Builder builder = VehicleRoute.Builder.newInstance(mock(Vehicle.class), mock(Driver.class));
         builder.addPickup(s);
         builder.addDelivery(s);
@@ -65,15 +61,9 @@ public void whenShipmentIsPickedDeliveredAndDeliveredAgain_throwsException() {
 
     @Test(expected = IllegalArgumentException.class)
     public void whenShipmentIsPickedUpThoughButHasNotBeenDeliveredAndRouteIsBuilt_throwsException() {
-        Shipment s = mock(Shipment.class);
-        Capacity capacity = Capacity.Builder.newInstance().build();
-        Shipment s2 = mock(Shipment.class);
-        when(s2.getSize()).thenReturn(capacity);
-        when(s.getSize()).thenReturn(capacity);
-        when(s2.getPickupTimeWindow()).thenReturn(TimeWindow.newInstance(0.,10.));
-        when(s2.getDeliveryTimeWindow()).thenReturn(TimeWindow.newInstance(0.,10.));
-        when(s.getPickupTimeWindow()).thenReturn(TimeWindow.newInstance(0.,10.));
-        when(s.getDeliveryTimeWindow()).thenReturn(TimeWindow.newInstance(0.,10.));
+        Shipment s = createStandardShipment("s1").build();
+        Shipment s2 = createStandardShipment("s2").build();
+
         VehicleRoute.Builder builder = VehicleRoute.Builder.newInstance(mock(Vehicle.class), mock(Driver.class));
         builder.addPickup(s);
         builder.addPickup(s2);
@@ -83,15 +73,9 @@ public void whenShipmentIsPickedUpThoughButHasNotBeenDeliveredAndRouteIsBuilt_th
 
     @Test
     public void whenTwoShipmentsHaveBeenAdded_nuOfActivitiesMustEqualFour() {
-        Shipment s = mock(Shipment.class);
-        Shipment s2 = mock(Shipment.class);
-        Capacity capacity = Capacity.Builder.newInstance().build();
-        when(s.getSize()).thenReturn(capacity);
-        when(s2.getSize()).thenReturn(capacity);
-        when(s2.getPickupTimeWindow()).thenReturn(TimeWindow.newInstance(0.,10.));
-        when(s2.getDeliveryTimeWindow()).thenReturn(TimeWindow.newInstance(0.,10.));
-        when(s.getPickupTimeWindow()).thenReturn(TimeWindow.newInstance(0.,10.));
-        when(s.getDeliveryTimeWindow()).thenReturn(TimeWindow.newInstance(0.,10.));
+        Shipment s = createStandardShipment("s1").build();
+        Shipment s2 = createStandardShipment("s2").build();
+
         VehicleRoute.Builder builder = VehicleRoute.Builder.newInstance(mock(Vehicle.class), mock(Driver.class));
         builder.addPickup(s);
         builder.addPickup(s2);
@@ -103,17 +87,11 @@ public void whenTwoShipmentsHaveBeenAdded_nuOfActivitiesMustEqualFour() {
 
     @Test
     public void whenBuildingClosedRoute_routeEndShouldHaveLocationOfVehicle() {
-        Shipment s = mock(Shipment.class);
-        Shipment s2 = mock(Shipment.class);
-        Capacity capacity = Capacity.Builder.newInstance().build();
-        when(s.getSize()).thenReturn(capacity);
-        when(s2.getSize()).thenReturn(capacity);
-        when(s2.getPickupTimeWindow()).thenReturn(TimeWindow.newInstance(0.,10.));
-        when(s2.getDeliveryTimeWindow()).thenReturn(TimeWindow.newInstance(0.,10.));
-        when(s.getPickupTimeWindow()).thenReturn(TimeWindow.newInstance(0.,10.));
-        when(s.getDeliveryTimeWindow()).thenReturn(TimeWindow.newInstance(0.,10.));
+        Shipment s = createStandardShipment("s1").build();
+        Shipment s2 = createStandardShipment("s2").build();
+
         Vehicle vehicle = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance("vehLoc")).setEndLocation(Location.newInstance("vehLoc"))
-            .build();
+                .build();
 
         VehicleRoute.Builder builder = VehicleRoute.Builder.newInstance(vehicle, mock(Driver.class));
         builder.addPickup(s);
@@ -126,16 +104,9 @@ public void whenBuildingClosedRoute_routeEndShouldHaveLocationOfVehicle() {
 
     @Test
     public void whenBuildingOpenRoute_routeEndShouldHaveLocationOfLastActivity() {
-        Shipment s = mock(Shipment.class);
-        Shipment s2 = mock(Shipment.class);
-        Capacity capacity = Capacity.Builder.newInstance().build();
-        when(s.getSize()).thenReturn(capacity);
-        when(s2.getSize()).thenReturn(capacity);
-        when(s2.getDeliveryLocation()).thenReturn(loc("delLoc"));
-        when(s.getPickupTimeWindow()).thenReturn(TimeWindow.newInstance(0.,10.));
-        when(s.getDeliveryTimeWindow()).thenReturn(TimeWindow.newInstance(0.,10.));
-        when(s2.getPickupTimeWindow()).thenReturn(TimeWindow.newInstance(0.,10.));
-        when(s2.getDeliveryTimeWindow()).thenReturn(TimeWindow.newInstance(0.,10.));
+        Shipment s = createStandardShipment("s1").build();
+        Shipment s2 = createStandardShipment("s2").build();
+
         Vehicle vehicle = mock(Vehicle.class);
         when(vehicle.isReturnToDepot()).thenReturn(false);
         when(vehicle.getStartLocation()).thenReturn(loc("vehLoc"));
@@ -154,16 +125,9 @@ private Location loc(String delLoc) {
 
     @Test
     public void whenSettingDepartureTime() {
-        Shipment s = mock(Shipment.class);
-        Shipment s2 = mock(Shipment.class);
-        Capacity capacity = Capacity.Builder.newInstance().build();
-        when(s.getSize()).thenReturn(capacity);
-        when(s2.getSize()).thenReturn(capacity);
-        when(s2.getDeliveryLocation()).thenReturn(Location.Builder.newInstance().setId("delLoc").build());
-        when(s.getPickupTimeWindow()).thenReturn(TimeWindow.newInstance(0.,10.));
-        when(s.getDeliveryTimeWindow()).thenReturn(TimeWindow.newInstance(0.,10.));
-        when(s2.getPickupTimeWindow()).thenReturn(TimeWindow.newInstance(0., 10.));
-        when(s2.getDeliveryTimeWindow()).thenReturn(TimeWindow.newInstance(0.,10.));
+        Shipment s = createStandardShipment("s1").build();
+        Shipment s2 = createStandardShipment("s2").build();
+
         Vehicle vehicle = mock(Vehicle.class);
         when(vehicle.isReturnToDepot()).thenReturn(false);
         when(vehicle.getStartLocation()).thenReturn(Location.Builder.newInstance().setId("vehLoc").build());
@@ -178,6 +142,17 @@ public void whenSettingDepartureTime() {
         assertEquals(100.0, route.getStart().getEndTime(), 0.01);
     }
 
+    protected Builder createStandardShipment(String name) {
+        Location loc = Location.Builder.newInstance().setId("delLoc").build();
+        TimeWindow tw = TimeWindow.newInstance(0, 10);
+        return Shipment.Builder.newInstance(name)
+                .addSizeDimension(0, 10)
+                .setPickupTimeWindow(tw)
+                .setDeliveryTimeWindow(tw)
+                .setPickupLocation(loc)
+                .setDeliveryLocation(loc);
+    }
+
 
 
 }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivityTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivityTest.java
index 9f42f335e..68c7ef586 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivityTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivityTest.java
@@ -17,13 +17,17 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.job.Break;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
 import org.junit.Before;
 import org.junit.Test;
 
-import static org.junit.Assert.*;
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.job.Break;
+import com.graphhopper.jsprit.core.problem.job.Break.Builder;
+import com.graphhopper.jsprit.core.problem.job.Service;
 
 
 public class BreakActivityTest {
@@ -34,9 +38,10 @@
 
     @Before
     public void doBefore() {
-        service = Break.Builder.newInstance("service")
-            .setTimeWindow(TimeWindow.newInstance(1., 2.)).setServiceTime(3).build();
-        serviceActivity = BreakActivity.newInstance(service);
+        Builder breakBuilder = new Break.Builder("service")
+                        .setTimeWindow(TimeWindow.newInstance(1., 2.)).setServiceTime(3);
+        service = breakBuilder.build();
+        serviceActivity = BreakActivity.newInstance(service, breakBuilder);
         serviceActivity.setTheoreticalEarliestOperationStartTime(service.getTimeWindow().getStart());
         serviceActivity.setTheoreticalLatestOperationStartTime(service.getTimeWindow().getEnd());
     }
@@ -48,7 +53,7 @@ public void whenCallingCapacity_itShouldReturnCorrectCapacity() {
 
     @Test
     public void hasVariableLocationShouldBeTrue() {
-        Break aBreak = (Break) serviceActivity.getJob();
+        Break aBreak = serviceActivity.getJob();
         assertTrue(aBreak.hasVariableLocation());
     }
 
@@ -87,22 +92,22 @@ public void whenCopyingStart_itShouldBeDoneCorrectly() {
 
     @Test
     public void whenTwoDeliveriesHaveTheSameUnderlyingJob_theyAreEqual() {
-        Service s1 = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc")).build();
-        Service s2 = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc")).build();
+        Service s1 = new Service.Builder("s").setLocation(Location.newInstance("loc")).build();
+        Service s2 = new Service.Builder("s").setLocation(Location.newInstance("loc")).build();
 
-        ServiceActivity d1 = ServiceActivity.newInstance(s1);
-        ServiceActivity d2 = ServiceActivity.newInstance(s2);
+        ServiceActivityNEW d1 = ServiceActivityNEW.newInstance(s1);
+        ServiceActivityNEW d2 = ServiceActivityNEW.newInstance(s2);
 
         assertTrue(d1.equals(d2));
     }
 
     @Test
     public void whenTwoDeliveriesHaveTheDifferentUnderlyingJob_theyAreNotEqual() {
-        Service s1 = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc")).build();
-        Service s2 = Service.Builder.newInstance("s1").setLocation(Location.newInstance("loc")).build();
+        Service s1 = new Service.Builder("s").setLocation(Location.newInstance("loc")).build();
+        Service s2 = new Service.Builder("s1").setLocation(Location.newInstance("loc")).build();
 
-        ServiceActivity d1 = ServiceActivity.newInstance(s1);
-        ServiceActivity d2 = ServiceActivity.newInstance(s2);
+        ServiceActivityNEW d1 = ServiceActivityNEW.newInstance(s1);
+        ServiceActivityNEW d2 = ServiceActivityNEW.newInstance(s2);
 
         assertFalse(d1.equals(d2));
     }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DefaultShipmentActivityFactoryTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DefaultShipmentActivityFactoryTest.java
index c613601e8..7d5539519 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DefaultShipmentActivityFactoryTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DefaultShipmentActivityFactoryTest.java
@@ -17,32 +17,36 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
-import org.junit.Test;
-
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
 
+import org.junit.Ignore;
+import org.junit.Test;
+
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.job.Shipment;
+
 public class DefaultShipmentActivityFactoryTest {
 
     @Test
+    @Ignore
     public void whenCreatingPickupActivityWithShipment_itShouldReturnPickupShipment() {
         DefaultShipmentActivityFactory factory = new DefaultShipmentActivityFactory();
         Shipment shipment = Shipment.Builder.newInstance("s")
-            .setPickupLocation(Location.Builder.newInstance().setId("pLoc").build()).setDeliveryLocation(Location.newInstance("dLoc")).build();
+                        .setPickupLocation(Location.Builder.newInstance().setId("pLoc").build()).setDeliveryLocation(Location.newInstance("dLoc")).build();
         TourActivity act = factory.createPickup(shipment);
         assertNotNull(act);
-        assertTrue(act instanceof PickupShipment);
+        assertTrue(act instanceof PickupShipmentDEPRECATED);
     }
 
     @Test
+    @Ignore
     public void whenCreatingDeliverActivityWithShipment_itShouldReturnDeliverShipment() {
         DefaultShipmentActivityFactory factory = new DefaultShipmentActivityFactory();
         Shipment shipment = Shipment.Builder.newInstance("s")
-            .setPickupLocation(Location.Builder.newInstance().setId("pLoc").build()).setDeliveryLocation(Location.newInstance("dLoc")).build();
+                        .setPickupLocation(Location.Builder.newInstance().setId("pLoc").build()).setDeliveryLocation(Location.newInstance("dLoc")).build();
         TourActivity act = factory.createDelivery(shipment);
         assertNotNull(act);
-        assertTrue(act instanceof DeliverShipment);
+        assertTrue(act instanceof DeliverShipmentDEPRECATED);
     }
 }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DefaultTourActivityFactoryTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DefaultTourActivityFactoryTest.java
index c28dce48b..2a4be92d7 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DefaultTourActivityFactoryTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DefaultTourActivityFactoryTest.java
@@ -17,42 +17,43 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertTrue;
+
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.job.Delivery;
 import com.graphhopper.jsprit.core.problem.job.Pickup;
 import com.graphhopper.jsprit.core.problem.job.Service;
-import org.junit.Test;
-
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertTrue;
 
 public class DefaultTourActivityFactoryTest {
 
     @Test
     public void whenCreatingActivityWithService_itShouldReturnPickupService() {
         DefaultTourActivityFactory factory = new DefaultTourActivityFactory();
-        Service service = Service.Builder.newInstance("service").setLocation(Location.newInstance("loc")).build();
+        Service service = new Service.Builder("service").setLocation(Location.newInstance("loc")).build();
         TourActivity act = factory.createActivity(service);
         assertNotNull(act);
-        assertTrue(act instanceof PickupService);
+        assertTrue(act instanceof PickupServiceDEPRECATED);
     }
 
     @Test
     public void whenCreatingActivityWithPickup_itShouldReturnPickupService() {
         DefaultTourActivityFactory factory = new DefaultTourActivityFactory();
-        Pickup service = (Pickup) Pickup.Builder.newInstance("service").setLocation(Location.newInstance("loc")).build();
+        Pickup service = new Pickup.Builder("service").setLocation(Location.newInstance("loc")).build();
         TourActivity act = factory.createActivity(service);
         assertNotNull(act);
-        assertTrue(act instanceof PickupService);
+        assertTrue(act instanceof PickupServiceDEPRECATED);
     }
 
     @Test
     public void whenCreatingActivityWithDelivery_itShouldReturnDeliverService() {
         DefaultTourActivityFactory factory = new DefaultTourActivityFactory();
-        Delivery service = (Delivery) Delivery.Builder.newInstance("service").setLocation(Location.newInstance("loc")).build();
+        Delivery service = new Delivery.Builder("service").setLocation(Location.newInstance("loc")).build();
         TourActivity act = factory.createActivity(service);
         assertNotNull(act);
-        assertTrue(act instanceof DeliverService);
+        assertTrue(act instanceof DeliverServiceDEPRECATED);
     }
 
 }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverServiceTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverServiceDEPRECATEDTest.java
similarity index 85%
rename from jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverServiceTest.java
rename to jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverServiceDEPRECATEDTest.java
index 19c14f4fd..33e820196 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverServiceTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverServiceDEPRECATEDTest.java
@@ -17,26 +17,27 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.job.Delivery;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
 import org.junit.Before;
 import org.junit.Test;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.job.Delivery;
 
-public class DeliverServiceTest {
+public class DeliverServiceDEPRECATEDTest {
 
     private Delivery service;
 
-    private DeliverService deliver;
+    private DeliverServiceDEPRECATED deliver;
 
     @Before
     public void doBefore() {
-        service = Delivery.Builder.newInstance("service").setLocation(Location.newInstance("loc")).
-            setTimeWindow(TimeWindow.newInstance(1., 2.)).
-            addSizeDimension(0, 10).addSizeDimension(1, 100).addSizeDimension(2, 1000).build();
-        deliver = new DeliverService(service);
+        service = new Delivery.Builder("service").setLocation(Location.newInstance("loc")).
+                setTimeWindow(TimeWindow.newInstance(1., 2.)).
+                addSizeDimension(0, 10).addSizeDimension(1, 100).addSizeDimension(2, 1000).build();
+        deliver = new DeliverServiceDEPRECATED(service);
         deliver.setTheoreticalEarliestOperationStartTime(service.getTimeWindow().getStart());
         deliver.setTheoreticalLatestOperationStartTime(service.getTimeWindow().getEnd());
     }
@@ -77,7 +78,7 @@ public void whenIniLocationId_itShouldBeSetCorrectly() {
 
     @Test
     public void whenCopyingStart_itShouldBeDoneCorrectly() {
-        DeliverService copy = (DeliverService) deliver.duplicate();
+        DeliverServiceDEPRECATED copy = (DeliverServiceDEPRECATED) deliver.duplicate();
         assertEquals(1., copy.getTheoreticalEarliestOperationStartTime(), 0.01);
         assertEquals(2., copy.getTheoreticalLatestOperationStartTime(), 0.01);
         assertEquals("loc", copy.getLocation().getId());
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverShipmentTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverShipmentTest.java
index 4c0b16678..8989a95a8 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverShipmentTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverShipmentTest.java
@@ -17,26 +17,27 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
 import org.junit.Before;
 import org.junit.Test;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.job.Shipment;
 
 public class DeliverShipmentTest {
 
-    private DeliverShipment deliver;
+    private DeliverShipmentDEPRECATED deliver;
 
     @Before
     public void doBefore() {
         Shipment shipment = Shipment.Builder.newInstance("shipment").setPickupLocation(Location.Builder.newInstance().setId("pickupLoc").build())
-            .setDeliveryLocation(Location.newInstance("deliveryLoc"))
-            .setPickupTimeWindow(TimeWindow.newInstance(1., 2.))
-            .setDeliveryTimeWindow(TimeWindow.newInstance(3., 4.))
-            .addSizeDimension(0, 10).addSizeDimension(1, 100).addSizeDimension(2, 1000).build();
-        deliver = new DeliverShipment(shipment);
+                .setDeliveryLocation(Location.newInstance("deliveryLoc"))
+                .setPickupTimeWindow(TimeWindow.newInstance(1., 2.))
+                .setDeliveryTimeWindow(TimeWindow.newInstance(3., 4.))
+                .addSizeDimension(0, 10).addSizeDimension(1, 100).addSizeDimension(2, 1000).build();
+        deliver = new DeliverShipmentDEPRECATED(shipment);
         deliver.setTheoreticalEarliestOperationStartTime(shipment.getDeliveryTimeWindow().getStart());
         deliver.setTheoreticalLatestOperationStartTime(shipment.getDeliveryTimeWindow().getEnd());
     }
@@ -77,7 +78,7 @@ public void whenIniLocationId_itShouldBeSetCorrectly() {
 
     @Test
     public void whenCopyingStart_itShouldBeDoneCorrectly() {
-        DeliverShipment copy = (DeliverShipment) deliver.duplicate();
+        DeliverShipmentDEPRECATED copy = (DeliverShipmentDEPRECATED) deliver.duplicate();
         assertEquals(3., copy.getTheoreticalEarliestOperationStartTime(), 0.01);
         assertEquals(4., copy.getTheoreticalLatestOperationStartTime(), 0.01);
         assertEquals("deliveryLoc", copy.getLocation().getId());
@@ -91,8 +92,8 @@ public void whenCopyingStart_itShouldBeDoneCorrectly() {
     @Test
     public void whenGettingCapacity_itShouldReturnItCorrectly() {
         Shipment shipment = Shipment.Builder.newInstance("s").setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).setDeliveryLocation(Location.newInstance("delLoc"))
-            .addSizeDimension(0, 10).addSizeDimension(1, 100).build();
-        PickupShipment pick = new PickupShipment(shipment);
+                .addSizeDimension(0, 10).addSizeDimension(1, 100).build();
+        PickupShipmentDEPRECATED pick = new PickupShipmentDEPRECATED(shipment);
         assertEquals(10, pick.getSize().get(0));
         assertEquals(100, pick.getSize().get(1));
     }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/EndTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/EndTest.java
index c4257deeb..e91b8e3dc 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/EndTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/EndTest.java
@@ -17,11 +17,11 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import org.junit.Test;
-
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 
+import org.junit.Test;
+
 public class EndTest {
 
     @Test
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupServiceTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupServiceTest.java
index cb69738db..25a7ee497 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupServiceTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupServiceTest.java
@@ -17,26 +17,27 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
 import org.junit.Before;
 import org.junit.Test;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.job.Service;
 
 public class PickupServiceTest {
 
     private Service service;
 
-    private PickupService pickup;
+    private PickupServiceDEPRECATED pickup;
 
     @Before
     public void doBefore() {
-        service = Service.Builder.newInstance("service").setLocation(Location.newInstance("loc")).
-            setTimeWindow(TimeWindow.newInstance(1., 2.)).
-            addSizeDimension(0, 10).addSizeDimension(1, 100).addSizeDimension(2, 1000).build();
-        pickup = new PickupService(service);
+        service = new Service.Builder("service").setLocation(Location.newInstance("loc")).
+                setTimeWindow(TimeWindow.newInstance(1., 2.)).
+                addSizeDimension(0, 10).addSizeDimension(1, 100).addSizeDimension(2, 1000).build();
+        pickup = new PickupServiceDEPRECATED(service);
         pickup.setTheoreticalEarliestOperationStartTime(service.getTimeWindow().getStart());
         pickup.setTheoreticalLatestOperationStartTime(service.getTimeWindow().getEnd());
     }
@@ -78,7 +79,7 @@ public void whenIniLocationId_itShouldBeSetCorrectly() {
 
     @Test
     public void whenCopyingStart_itShouldBeDoneCorrectly() {
-        PickupService copy = (PickupService) pickup.duplicate();
+        PickupServiceDEPRECATED copy = (PickupServiceDEPRECATED) pickup.duplicate();
         assertEquals(1., copy.getTheoreticalEarliestOperationStartTime(), 0.01);
         assertEquals(2., copy.getTheoreticalLatestOperationStartTime(), 0.01);
         assertEquals("loc", copy.getLocation().getId());
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupShipmentTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupShipmentTest.java
index 822bc903d..83eff54a3 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupShipmentTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupShipmentTest.java
@@ -17,26 +17,27 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
 import org.junit.Before;
 import org.junit.Test;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.job.Shipment;
 
 public class PickupShipmentTest {
 
-    private PickupShipment pickup;
+    private PickupShipmentDEPRECATED pickup;
 
     @Before
     public void doBefore() {
         Shipment shipment = Shipment.Builder.newInstance("shipment").setPickupLocation(Location.Builder.newInstance().setId("pickupLoc").build())
-            .setDeliveryLocation(Location.newInstance("deliveryLoc"))
-            .setPickupTimeWindow(TimeWindow.newInstance(1., 2.))
-            .setDeliveryTimeWindow(TimeWindow.newInstance(3., 4.))
-            .addSizeDimension(0, 10).addSizeDimension(1, 100).addSizeDimension(2, 1000).build();
-        pickup = new PickupShipment(shipment);
+                .setDeliveryLocation(Location.newInstance("deliveryLoc"))
+                .setPickupTimeWindow(TimeWindow.newInstance(1., 2.))
+                .setDeliveryTimeWindow(TimeWindow.newInstance(3., 4.))
+                .addSizeDimension(0, 10).addSizeDimension(1, 100).addSizeDimension(2, 1000).build();
+        pickup = new PickupShipmentDEPRECATED(shipment);
         pickup.setTheoreticalEarliestOperationStartTime(shipment.getPickupTimeWindow().getStart());
         pickup.setTheoreticalLatestOperationStartTime(shipment.getPickupTimeWindow().getEnd());
     }
@@ -77,7 +78,7 @@ public void whenIniLocationId_itShouldBeSetCorrectly() {
 
     @Test
     public void whenCopyingStart_itShouldBeDoneCorrectly() {
-        PickupShipment copy = (PickupShipment) pickup.duplicate();
+        PickupShipmentDEPRECATED copy = (PickupShipmentDEPRECATED) pickup.duplicate();
         assertEquals(1., copy.getTheoreticalEarliestOperationStartTime(), 0.01);
         assertEquals(2., copy.getTheoreticalLatestOperationStartTime(), 0.01);
         assertEquals("pickupLoc", copy.getLocation().getId());
@@ -91,8 +92,8 @@ public void whenCopyingStart_itShouldBeDoneCorrectly() {
     @Test
     public void whenGettingCapacity_itShouldReturnItCorrectly() {
         Shipment shipment = Shipment.Builder.newInstance("s").setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).setDeliveryLocation(Location.newInstance("delLoc"))
-            .addSizeDimension(0, 10).addSizeDimension(1, 100).build();
-        PickupShipment pick = new PickupShipment(shipment);
+                .addSizeDimension(0, 10).addSizeDimension(1, 100).build();
+        PickupShipmentDEPRECATED pick = new PickupShipmentDEPRECATED(shipment);
         assertEquals(10, pick.getSize().get(0));
         assertEquals(100, pick.getSize().get(1));
     }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityNEWTest.java
similarity index 70%
rename from jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityTest.java
rename to jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityNEWTest.java
index 4dedf751a..9443b5635 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityNEWTest.java
@@ -17,27 +17,30 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 
-import static org.junit.Assert.*;
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.job.Service;
 
 
-public class ServiceActivityTest {
+public class ServiceActivityNEWTest {
 
     private Service service;
 
-    private ServiceActivity serviceActivity;
+    private ServiceActivityNEW serviceActivity;
 
     @Before
     public void doBefore() {
-        service = Service.Builder.newInstance("service").setLocation(Location.newInstance("loc")).
-            setTimeWindow(TimeWindow.newInstance(1., 2.)).
-            addSizeDimension(0, 10).addSizeDimension(1, 100).addSizeDimension(2, 1000).build();
-        serviceActivity = ServiceActivity.newInstance(service);
+        service = new Service.Builder("service").setLocation(Location.newInstance("loc")).
+                setTimeWindow(TimeWindow.newInstance(1., 2.)).
+                addSizeDimension(0, 10).addSizeDimension(1, 100).addSizeDimension(2, 1000).build();
+        serviceActivity = ServiceActivityNEW.newInstance(service);
         serviceActivity.setTheoreticalEarliestOperationStartTime(service.getTimeWindow().getStart());
         serviceActivity.setTheoreticalLatestOperationStartTime(service.getTimeWindow().getEnd());
     }
@@ -79,7 +82,7 @@ public void whenIniLocationId_itShouldBeSetCorrectly() {
 
     @Test
     public void whenCopyingStart_itShouldBeDoneCorrectly() {
-        ServiceActivity copy = (ServiceActivity) serviceActivity.duplicate();
+        ServiceActivityNEW copy = (ServiceActivityNEW) serviceActivity.duplicate();
         assertEquals(1., copy.getTheoreticalEarliestOperationStartTime(), 0.01);
         assertEquals(2., copy.getTheoreticalLatestOperationStartTime(), 0.01);
         assertEquals("loc", copy.getLocation().getId());
@@ -89,22 +92,22 @@ public void whenCopyingStart_itShouldBeDoneCorrectly() {
 
     @Test
     public void whenTwoDeliveriesHaveTheSameUnderlyingJob_theyAreEqual() {
-        Service s1 = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc")).build();
-        Service s2 = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc")).build();
+        Service s1 = new Service.Builder("s").setLocation(Location.newInstance("loc")).build();
+        Service s2 = new Service.Builder("s").setLocation(Location.newInstance("loc")).build();
 
-        ServiceActivity d1 = ServiceActivity.newInstance(s1);
-        ServiceActivity d2 = ServiceActivity.newInstance(s2);
+        ServiceActivityNEW d1 = ServiceActivityNEW.newInstance(s1);
+        ServiceActivityNEW d2 = ServiceActivityNEW.newInstance(s2);
 
         assertTrue(d1.equals(d2));
     }
 
     @Test
     public void whenTwoDeliveriesHaveTheDifferentUnderlyingJob_theyAreNotEqual() {
-        Service s1 = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc")).build();
-        Service s2 = Service.Builder.newInstance("s1").setLocation(Location.newInstance("loc")).build();
+        Service s1 = new Service.Builder("s").setLocation(Location.newInstance("loc")).build();
+        Service s2 = new Service.Builder("s1").setLocation(Location.newInstance("loc")).build();
 
-        ServiceActivity d1 = ServiceActivity.newInstance(s1);
-        ServiceActivity d2 = ServiceActivity.newInstance(s2);
+        ServiceActivityNEW d1 = ServiceActivityNEW.newInstance(s1);
+        ServiceActivityNEW d2 = ServiceActivityNEW.newInstance(s2);
 
         assertFalse(d1.equals(d2));
     }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/StartTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/StartTest.java
index 054f11617..890d6b7a7 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/StartTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/StartTest.java
@@ -17,11 +17,11 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import org.junit.Test;
-
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 
+import org.junit.Test;
+
 public class StartTest {
 
     @Test
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TestRefs.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TestRefs.java
index 2a0cc360a..4631173cd 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TestRefs.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TestRefs.java
@@ -17,12 +17,12 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import org.junit.Test;
+import static org.junit.Assert.assertTrue;
 
 import java.util.ArrayList;
 import java.util.List;
 
-import static org.junit.Assert.assertTrue;
+import org.junit.Test;
 
 
 public class TestRefs {
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TestTourActivities.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TestTourActivities.java
index 51fac31b2..74bee7952 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TestTourActivities.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TestTourActivities.java
@@ -17,25 +17,28 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.job.Service;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
 import org.junit.Before;
 import org.junit.Test;
 
-import static org.junit.Assert.*;
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.Shipment;
 
 
 public class TestTourActivities {
 
     private Service service;
-    private ServiceActivity act;
+    private ServiceActivityNEW act;
     private TourActivities tour;
 
     @Before
     public void doBefore() {
-        service = Service.Builder.newInstance("yo").addSizeDimension(0, 10).setLocation(Location.newInstance("loc")).build();
-        act = ServiceActivity.newInstance(service);
+        service = new Service.Builder("yo").addSizeDimension(0, 10).setLocation(Location.newInstance("loc")).build();
+        act = ServiceActivityNEW.newInstance(service);
         tour = new TourActivities();
     }
 
@@ -67,7 +70,7 @@ public void whenAddingAServiceAndThenRemovingTheServiceAgain_tourShouldNotServeI
         assertEquals(0, tour.getActivities().size());
         tour.addActivity(act);
         assertEquals(1, tour.getActivities().size());
-        Service anotherServiceInstance = Service.Builder.newInstance("yo").addSizeDimension(0, 10).setLocation(Location.newInstance("loc")).build();
+        Service anotherServiceInstance = new Service.Builder("yo").addSizeDimension(0, 10).setLocation(Location.newInstance("loc")).build();
         assertTrue(service.equals(anotherServiceInstance));
         boolean removed = tour.removeJob(anotherServiceInstance);
         assertTrue(removed);
@@ -77,7 +80,7 @@ public void whenAddingAServiceAndThenRemovingTheServiceAgain_tourShouldNotServeI
     @Test
     public void whenAddingAShipmentActivity_tourShouldServeShipment() {
         Shipment s = Shipment.Builder.newInstance("s").addSizeDimension(0, 1).setDeliveryLocation(Location.newInstance("delLoc"))
-            .setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+                        .setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         TourShipmentActivityFactory fac = new DefaultShipmentActivityFactory();
         TourActivity pickupShipment = fac.createPickup(s);
         TourActivity deliverShipment = fac.createDelivery(s);
@@ -90,7 +93,10 @@ public void whenAddingAShipmentActivity_tourShouldServeShipment() {
 
     @Test
     public void whenRemovingShipment_tourShouldNotServiceItAnymore() {
-        Shipment s = Shipment.Builder.newInstance("s").addSizeDimension(0, 1).setDeliveryLocation(Location.newInstance("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        Shipment s = Shipment.Builder.newInstance("s").addSizeDimension(0, 1)
+                        .setDeliveryLocation(Location.newInstance("delLoc"))
+                        .setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build())
+                        .build();
         TourShipmentActivityFactory fac = new DefaultShipmentActivityFactory();
         TourActivity pickupShipment = fac.createPickup(s);
         TourActivity deliverShipment = fac.createDelivery(s);
@@ -105,8 +111,8 @@ public void whenRemovingShipment_tourShouldNotServiceItAnymore() {
     @Test
     public void whenRemovingShipment_theirCorrespondingActivitiesShouldBeRemoved() {
         Shipment s = Shipment.Builder.newInstance("s").addSizeDimension(0, 1)
-            .setDeliveryLocation(Location.newInstance("delLoc"))
-            .setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+                        .setDeliveryLocation(Location.newInstance("delLoc"))
+                        .setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         TourShipmentActivityFactory fac = new DefaultShipmentActivityFactory();
         TourActivity pickupShipment = fac.createPickup(s);
         TourActivity deliverShipment = fac.createDelivery(s);
@@ -147,8 +153,8 @@ public void copyingSeqShouldWork() {
     @Test
     public void removingShipmentActivityShouldWork() {
         Shipment s = Shipment.Builder.newInstance("s").addSizeDimension(0, 1)
-            .setDeliveryLocation(Location.newInstance("delLoc"))
-            .setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+                        .setDeliveryLocation(Location.newInstance("delLoc"))
+                        .setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         TourShipmentActivityFactory fac = new DefaultShipmentActivityFactory();
         TourActivity pickupShipment = fac.createPickup(s);
         TourActivity deliverShipment = fac.createDelivery(s);
@@ -174,8 +180,8 @@ public void removingShipmentActivityShouldWork() {
     @Test
     public void whenCopyingShipmentActivitySeq_jobSizeShouldBeCorrect() {
         Shipment s = Shipment.Builder.newInstance("s").addSizeDimension(0, 1)
-            .setDeliveryLocation(Location.newInstance("delLoc"))
-            .setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+                        .setDeliveryLocation(Location.newInstance("delLoc"))
+                        .setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         TourShipmentActivityFactory fac = new DefaultShipmentActivityFactory();
         TourActivity pickupShipment = fac.createPickup(s);
         TourActivity deliverShipment = fac.createDelivery(s);
@@ -196,7 +202,7 @@ public void whenCopyingShipmentActivitySeq_jobSizeShouldBeCorrect() {
     @Test
     public void whenCopyingShipmentActivitySeq_noActivitiesShouldBeCorrect() {
         Shipment s = Shipment.Builder.newInstance("s").addSizeDimension(0, 1)
-            .setDeliveryLocation(Location.newInstance("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+                        .setDeliveryLocation(Location.newInstance("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         TourShipmentActivityFactory fac = new DefaultShipmentActivityFactory();
         TourActivity pickupShipment = fac.createPickup(s);
         TourActivity deliverShipment = fac.createDelivery(s);
@@ -217,7 +223,7 @@ public void whenCopyingShipmentActivitySeq_noActivitiesShouldBeCorrect() {
     @Test
     public void whenCopyingShipmentActivitySeq_itShouldContaintPickupAct() {
         Shipment s = Shipment.Builder.newInstance("s").addSizeDimension(0, 1)
-            .setDeliveryLocation(Location.newInstance("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+                        .setDeliveryLocation(Location.newInstance("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         TourShipmentActivityFactory fac = new DefaultShipmentActivityFactory();
         TourActivity pickupShipment = fac.createPickup(s);
         TourActivity deliverShipment = fac.createDelivery(s);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/TestVehicleFleetManagerImpl.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/TestVehicleFleetManagerImpl.java
index 6d233bd00..3c569e124 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/TestVehicleFleetManagerImpl.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/TestVehicleFleetManagerImpl.java
@@ -17,17 +17,20 @@
  */
 package com.graphhopper.jsprit.core.problem.vehicle;
 
-import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import org.junit.Before;
-import org.junit.Test;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
 
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.List;
 
-import static org.junit.Assert.*;
+import org.junit.Before;
+import org.junit.Test;
+
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 
 public class TestVehicleFleetManagerImpl {
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleImplTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleImplTest.java
index cd3f7e48b..91a3bb644 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleImplTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleImplTest.java
@@ -18,12 +18,16 @@
 package com.graphhopper.jsprit.core.problem.vehicle;
 
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertTrue;
+
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.job.Break;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
-import org.junit.Test;
-
-import static org.junit.Assert.*;
 
 
 public class VehicleImplTest {
@@ -39,7 +43,7 @@ public void whenVehicleIsBuiltWithoutSettingNeitherLocationNorCoord_itThrowsAnIl
     @Test
     public void whenAddingDriverBreak_itShouldBeAddedCorrectly() {
         VehicleTypeImpl type1 = VehicleTypeImpl.Builder.newInstance("type").build();
-        Break aBreak = (Break) Break.Builder.newInstance("break").setTimeWindow(TimeWindow.newInstance(100, 200)).setServiceTime(30).build();
+        Break aBreak = (Break) new Break.Builder("break").setTimeWindow(TimeWindow.newInstance(100, 200)).setServiceTime(30).build();
         Vehicle v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance("start"))
             .setType(type1).setEndLocation(Location.newInstance("start"))
             .setBreak(aBreak).build();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleTypeImplTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleTypeImplTest.java
index 854783471..56df24da0 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleTypeImplTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleTypeImplTest.java
@@ -17,9 +17,11 @@
  */
 package com.graphhopper.jsprit.core.problem.vehicle;
 
-import org.junit.Test;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertTrue;
 
-import static org.junit.Assert.*;
+import org.junit.Test;
 
 public class VehicleTypeImplTest {
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleTypeKeyTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleTypeKeyTest.java
index 9f195433f..a760932b6 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleTypeKeyTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleTypeKeyTest.java
@@ -19,12 +19,13 @@
 package com.graphhopper.jsprit.core.problem.vehicle;
 
 
-import com.graphhopper.jsprit.core.problem.Location;
-import org.junit.Test;
-
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 
+import org.junit.Test;
+
+import com.graphhopper.jsprit.core.problem.Location;
+
 public class VehicleTypeKeyTest {
 
     @Test
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/ChristofidesReader.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/ChristofidesReader.java
index 80ae0f86b..50d821e15 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/ChristofidesReader.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/ChristofidesReader.java
@@ -18,6 +18,14 @@
 package com.graphhopper.jsprit.core.util;
 
 
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
@@ -26,13 +34,6 @@
 import com.graphhopper.jsprit.core.problem.job.Service;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.io.BufferedReader;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
 
 
 /**
@@ -96,15 +97,15 @@ public void read(InputStream inputStream) {
                 int demand = Integer.parseInt(tokens[2].trim());
                 String customer = Integer.valueOf(counter - 1).toString();
                 if(jobType.equals(JobType.SERVICE)) {
-                    Service service = Service.Builder.newInstance(customer).addSizeDimension(0, demand).setServiceTime(serviceTime).setLocation(Location.newInstance(customerCoord.getX(), customerCoord.getY())).build();
+                    Service service = new Service.Builder(customer).addSizeDimension(0, demand).setServiceTime(serviceTime).setLocation(Location.newInstance(customerCoord.getX(), customerCoord.getY())).build();
                     vrpBuilder.addJob(service);
                 }
                 else if(jobType.equals(JobType.DELIVERY)){
-                    Delivery service = Delivery.Builder.newInstance(customer).addSizeDimension(0, demand).setServiceTime(serviceTime).setLocation(Location.newInstance(customerCoord.getX(), customerCoord.getY())).build();
+                    Delivery service = new Delivery.Builder(customer).addSizeDimension(0, demand).setServiceTime(serviceTime).setLocation(Location.newInstance(customerCoord.getX(), customerCoord.getY())).build();
                     vrpBuilder.addJob(service);
                 }
                 else if(jobType.equals(JobType.PICKUP)){
-                    Pickup service = Pickup.Builder.newInstance(customer).addSizeDimension(0, demand).setServiceTime(serviceTime).setLocation(Location.newInstance(customerCoord.getX(), customerCoord.getY())).build();
+                    Pickup service = new Pickup.Builder(customer).addSizeDimension(0, demand).setServiceTime(serviceTime).setLocation(Location.newInstance(customerCoord.getX(), customerCoord.getY())).build();
                     vrpBuilder.addJob(service);
                 }
             }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/FastVehicleRoutingTransportCostsMatrixTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/FastVehicleRoutingTransportCostsMatrixTest.java
index bde92c11d..b32453874 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/FastVehicleRoutingTransportCostsMatrixTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/FastVehicleRoutingTransportCostsMatrixTest.java
@@ -17,15 +17,16 @@
  */
 package com.graphhopper.jsprit.core.util;
 
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
-import org.junit.Test;
-
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
 
 public class FastVehicleRoutingTransportCostsMatrixTest {
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/GreatCircleDistanceCalculatorTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/GreatCircleDistanceCalculatorTest.java
index c41da9734..3679713fd 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/GreatCircleDistanceCalculatorTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/GreatCircleDistanceCalculatorTest.java
@@ -18,9 +18,10 @@
 
 package com.graphhopper.jsprit.core.util;
 
-import junit.framework.Assert;
 import org.junit.Test;
 
+import junit.framework.Assert;
+
 /**
  * Created by schroeder on 28.11.14.
  */
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/LiLimReader.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/LiLimReader.java
index 3b53bb674..810f72d65 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/LiLimReader.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/LiLimReader.java
@@ -18,15 +18,6 @@
 package com.graphhopper.jsprit.core.util;
 
 
-import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.Builder;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
-import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
-import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.InputStream;
@@ -36,6 +27,16 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.Builder;
+import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
+
 
 /**
  * test instances for the capacitated vrp with pickup and deliveries and time windows.
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/RandomUtilsTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/RandomUtilsTest.java
index 9a2f57ddf..ef8b166a8 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/RandomUtilsTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/RandomUtilsTest.java
@@ -18,17 +18,19 @@
 
 package com.graphhopper.jsprit.core.util;
 
-import com.graphhopper.jsprit.core.problem.job.Job;
-import junit.framework.Assert;
-import org.junit.Test;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
 
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.List;
 import java.util.Random;
 
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
+import org.junit.Test;
+
+import com.graphhopper.jsprit.core.problem.job.Job;
+
+import junit.framework.Assert;
 
 /**
  * Created by schroeder on 14/01/15.
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/SolomonReader.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/SolomonReader.java
index 75818a6c4..00846d8bc 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/SolomonReader.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/SolomonReader.java
@@ -18,6 +18,14 @@
 package com.graphhopper.jsprit.core.util;
 
 
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
@@ -25,13 +33,6 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.io.BufferedReader;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
 
 
 /**
@@ -109,7 +110,7 @@ public void read(InputStream inputStream) {
                     vrpBuilder.addVehicle(vehicle);
 
                 } else {
-                    Service service = Service.Builder.newInstance(customerId).addSizeDimension(0, demand)
+                    Service service = new Service.Builder(customerId).addSizeDimension(0, demand)
                         .setLocation(Location.Builder.newInstance().setCoordinate(coord).setId(customerId).build()).setServiceTime(serviceTime)
                         .setTimeWindow(TimeWindow.newInstance(start, end)).build();
                     vrpBuilder.addJob(service);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/TimeTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/TimeTest.java
index 97186e1ac..00d609c63 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/TimeTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/TimeTest.java
@@ -17,10 +17,10 @@
  */
 package com.graphhopper.jsprit.core.util;
 
-import org.junit.Test;
-
 import static org.junit.Assert.assertEquals;
 
+import org.junit.Test;
+
 public class TimeTest {
 
     @Test
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/VehicleRoutingTransportCostsMatrixTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/VehicleRoutingTransportCostsMatrixTest.java
index 6ec6d80c6..3d282e81b 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/VehicleRoutingTransportCostsMatrixTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/VehicleRoutingTransportCostsMatrixTest.java
@@ -17,15 +17,16 @@
  */
 package com.graphhopper.jsprit.core.util;
 
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
-import org.junit.Test;
-
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
 
 public class VehicleRoutingTransportCostsMatrixTest {
 
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/BicycleMessenger.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/BicycleMessenger.java
index 2f61d78aa..af7320370 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/BicycleMessenger.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/BicycleMessenger.java
@@ -40,9 +40,9 @@
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.ReverseActivityVisitor;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.state.RouteAndActivityStateGetter;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/BreakExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/BreakExample.java
index f635c9372..62907b99d 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/BreakExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/BreakExample.java
@@ -55,7 +55,7 @@ public static void main(String[] args) {
 		 */
         Builder vehicleBuilder = Builder.newInstance("v1");
         vehicleBuilder.setStartLocation(Location.newInstance(10, 10));
-        Break myFirstBreak = Break.Builder.newInstance("myFirstBreak")
+        Break myFirstBreak = new Break.Builder("myFirstBreak")
             .setTimeWindow(TimeWindow.newInstance(10, 15)).setServiceTime(100).build();
         vehicleBuilder.setBreak(myFirstBreak);
         vehicleBuilder.setType(vehicleType);
@@ -63,15 +63,15 @@ public static void main(String[] args) {
 
 
         VehicleImpl v2 = VehicleImpl.Builder.newInstance("v2").setStartLocation(Location.newInstance(0, 10)).setType(vehicleType)
-            .setBreak((Break) Break.Builder.newInstance("mySecondBreak").setTimeWindow(TimeWindow.newInstance(5, 10)).setServiceTime(10).build()).build();
+            .setBreak((Break) new Break.Builder("mySecondBreak").setTimeWindow(TimeWindow.newInstance(5, 10)).setServiceTime(10).build()).build();
 		/*
 		 * build services at the required locations, each with a capacity-demand of 1.
 		 */
-        Service service1 = Service.Builder.newInstance("1").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 7)).build();
-        Service service2 = Service.Builder.newInstance("2").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 13)).build();
+        Service service1 = new Service.Builder("1").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 7)).build();
+        Service service2 = new Service.Builder("2").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 13)).build();
 
-        Service service3 = Service.Builder.newInstance("3").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(15, 7)).build();
-        Service service4 = Service.Builder.newInstance("4").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(15, 13)).build();
+        Service service3 = new Service.Builder("3").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(15, 7)).build();
+        Service service4 = new Service.Builder("4").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(15, 13)).build();
 
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/CircleExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/CircleExample.java
index 455ad9d21..7c84c292c 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/CircleExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/CircleExample.java
@@ -69,7 +69,7 @@ public static void main(String[] args) {
         Collection<Coordinate> circle = createCoordinates(0, 0, 20, step);
         int id = 1;
         for (Coordinate c : circle) {
-            Service s = Service.Builder.newInstance(Integer.toString(id)).setLocation(Location.Builder.newInstance().setCoordinate(c).build()).build();
+            Service s = new Service.Builder(Integer.toString(id)).setLocation(Location.Builder.newInstance().setCoordinate(c).build()).build();
             vrpBuilder.addJob(s);
             id++;
         }
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/ConfigureAlgorithmInCodeInsteadOfPerXml.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/ConfigureAlgorithmInCodeInsteadOfPerXml.java
index e844c3c05..7e87e20fc 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/ConfigureAlgorithmInCodeInsteadOfPerXml.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/ConfigureAlgorithmInCodeInsteadOfPerXml.java
@@ -63,11 +63,11 @@ public static void main(String[] args) {
 		/*
          * build services at the required locations, each with a capacity-demand of 1.
 		 */
-        Service service1 = Service.Builder.newInstance("1").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 7)).build();
-        Service service2 = Service.Builder.newInstance("2").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 13)).build();
+        Service service1 = new Service.Builder("1").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 7)).build();
+        Service service2 = new Service.Builder("2").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 13)).build();
 
-        Service service3 = Service.Builder.newInstance("3").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 7)).build();
-        Service service4 = Service.Builder.newInstance("4").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 13)).build();
+        Service service3 = new Service.Builder("3").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 7)).build();
+        Service service4 = new Service.Builder("4").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 13)).build();
 
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/CostMatrixExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/CostMatrixExample.java
index 157c685da..bbc2af561 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/CostMatrixExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/CostMatrixExample.java
@@ -54,9 +54,9 @@ public static void main(String[] args) {
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("vehicle")
             .setStartLocation(Location.newInstance("0")).setType(type).build();
 
-        Service s1 = Service.Builder.newInstance("1").addSizeDimension(0, 1).setLocation(Location.newInstance("1")).build();
-        Service s2 = Service.Builder.newInstance("2").addSizeDimension(0, 1).setLocation(Location.newInstance("2")).build();
-        Service s3 = Service.Builder.newInstance("3").addSizeDimension(0, 1).setLocation(Location.newInstance("3")).build();
+        Service s1 = new Service.Builder("1").addSizeDimension(0, 1).setLocation(Location.newInstance("1")).build();
+        Service s2 = new Service.Builder("2").addSizeDimension(0, 1).setLocation(Location.newInstance("2")).build();
+        Service s3 = new Service.Builder("3").addSizeDimension(0, 1).setLocation(Location.newInstance("3")).build();
 
 
 		/*
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/HVRPExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/HVRPExample.java
index 8284e532d..94e534aac 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/HVRPExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/HVRPExample.java
@@ -71,26 +71,26 @@ public static void main(String[] args) {
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
 
         //add customers
-        vrpBuilder.addJob(Service.Builder.newInstance("1").addSizeDimension(0, 18).setLocation(Location.newInstance(22, 22)).build());
-        vrpBuilder.addJob(Service.Builder.newInstance("2").addSizeDimension(0, 26).setLocation(Location.newInstance(36, 26)).build());
-        vrpBuilder.addJob(Service.Builder.newInstance("3").addSizeDimension(0, 11).setLocation(Location.newInstance(21, 45)).build());
-        vrpBuilder.addJob(Service.Builder.newInstance("4").addSizeDimension(0, 30).setLocation(Location.newInstance(45, 35)).build());
-        vrpBuilder.addJob(Service.Builder.newInstance("5").addSizeDimension(0, 21).setLocation(Location.newInstance(55, 20)).build());
-        vrpBuilder.addJob(Service.Builder.newInstance("6").addSizeDimension(0, 19).setLocation(Location.newInstance(33, 34)).build());
-        vrpBuilder.addJob(Service.Builder.newInstance("7").addSizeDimension(0, 15).setLocation(Location.newInstance(50, 50)).build());
-        vrpBuilder.addJob(Service.Builder.newInstance("8").addSizeDimension(0, 16).setLocation(Location.newInstance(55, 45)).build());
-        vrpBuilder.addJob(Service.Builder.newInstance("9").addSizeDimension(0, 29).setLocation(Location.newInstance(26, 59)).build());
-        vrpBuilder.addJob(Service.Builder.newInstance("10").addSizeDimension(0, 26).setLocation(Location.newInstance(40, 66)).build());
-        vrpBuilder.addJob(Service.Builder.newInstance("11").addSizeDimension(0, 37).setLocation(Location.newInstance(55, 56)).build());
-        vrpBuilder.addJob(Service.Builder.newInstance("12").addSizeDimension(0, 16).setLocation(Location.newInstance(35, 51)).build());
-        vrpBuilder.addJob(Service.Builder.newInstance("13").addSizeDimension(0, 12).setLocation(Location.newInstance(62, 35)).build());
-        vrpBuilder.addJob(Service.Builder.newInstance("14").addSizeDimension(0, 31).setLocation(Location.newInstance(62, 57)).build());
-        vrpBuilder.addJob(Service.Builder.newInstance("15").addSizeDimension(0, 8).setLocation(Location.newInstance(62, 24)).build());
-        vrpBuilder.addJob(Service.Builder.newInstance("16").addSizeDimension(0, 19).setLocation(Location.newInstance(21, 36)).build());
-        vrpBuilder.addJob(Service.Builder.newInstance("17").addSizeDimension(0, 20).setLocation(Location.newInstance(33, 44)).build());
-        vrpBuilder.addJob(Service.Builder.newInstance("18").addSizeDimension(0, 13).setLocation(Location.newInstance(9, 56)).build());
-        vrpBuilder.addJob(Service.Builder.newInstance("19").addSizeDimension(0, 15).setLocation(Location.newInstance(62, 48)).build());
-        vrpBuilder.addJob(Service.Builder.newInstance("20").addSizeDimension(0, 22).setLocation(Location.newInstance(66, 14)).build());
+        vrpBuilder.addJob(new Service.Builder("1").addSizeDimension(0, 18).setLocation(Location.newInstance(22, 22)).build());
+        vrpBuilder.addJob(new Service.Builder("2").addSizeDimension(0, 26).setLocation(Location.newInstance(36, 26)).build());
+        vrpBuilder.addJob(new Service.Builder("3").addSizeDimension(0, 11).setLocation(Location.newInstance(21, 45)).build());
+        vrpBuilder.addJob(new Service.Builder("4").addSizeDimension(0, 30).setLocation(Location.newInstance(45, 35)).build());
+        vrpBuilder.addJob(new Service.Builder("5").addSizeDimension(0, 21).setLocation(Location.newInstance(55, 20)).build());
+        vrpBuilder.addJob(new Service.Builder("6").addSizeDimension(0, 19).setLocation(Location.newInstance(33, 34)).build());
+        vrpBuilder.addJob(new Service.Builder("7").addSizeDimension(0, 15).setLocation(Location.newInstance(50, 50)).build());
+        vrpBuilder.addJob(new Service.Builder("8").addSizeDimension(0, 16).setLocation(Location.newInstance(55, 45)).build());
+        vrpBuilder.addJob(new Service.Builder("9").addSizeDimension(0, 29).setLocation(Location.newInstance(26, 59)).build());
+        vrpBuilder.addJob(new Service.Builder("10").addSizeDimension(0, 26).setLocation(Location.newInstance(40, 66)).build());
+        vrpBuilder.addJob(new Service.Builder("11").addSizeDimension(0, 37).setLocation(Location.newInstance(55, 56)).build());
+        vrpBuilder.addJob(new Service.Builder("12").addSizeDimension(0, 16).setLocation(Location.newInstance(35, 51)).build());
+        vrpBuilder.addJob(new Service.Builder("13").addSizeDimension(0, 12).setLocation(Location.newInstance(62, 35)).build());
+        vrpBuilder.addJob(new Service.Builder("14").addSizeDimension(0, 31).setLocation(Location.newInstance(62, 57)).build());
+        vrpBuilder.addJob(new Service.Builder("15").addSizeDimension(0, 8).setLocation(Location.newInstance(62, 24)).build());
+        vrpBuilder.addJob(new Service.Builder("16").addSizeDimension(0, 19).setLocation(Location.newInstance(21, 36)).build());
+        vrpBuilder.addJob(new Service.Builder("17").addSizeDimension(0, 20).setLocation(Location.newInstance(33, 44)).build());
+        vrpBuilder.addJob(new Service.Builder("18").addSizeDimension(0, 13).setLocation(Location.newInstance(9, 56)).build());
+        vrpBuilder.addJob(new Service.Builder("19").addSizeDimension(0, 15).setLocation(Location.newInstance(62, 48)).build());
+        vrpBuilder.addJob(new Service.Builder("20").addSizeDimension(0, 22).setLocation(Location.newInstance(66, 14)).build());
 
 
         //add vehicle - finite fleet
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/JobAndActivityDependenciesExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/JobAndActivityDependenciesExample.java
index 8fe754613..8fc78e6f3 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/JobAndActivityDependenciesExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/JobAndActivityDependenciesExample.java
@@ -35,6 +35,7 @@
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.ActivityVisitor;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.reporting.SolutionPrinter;
@@ -78,11 +79,11 @@ public void begin(VehicleRoute route) {
 
         @Override
         public void visit(TourActivity activity) {
-            if (((TourActivity.JobActivity) activity).getJob().getName().equals("use key")) {
+            if (((JobActivity) activity).getJob().getName().equals("use key")) {
                 stateManager.putProblemState(keyUsedStateId, VehicleRoute.class, route);
-            } else if (((TourActivity.JobActivity) activity).getJob().getName().equals("get key")) {
+            } else if (((JobActivity) activity).getJob().getName().equals("get key")) {
                 stateManager.putProblemState(keyPickedStateId, VehicleRoute.class, route);
-            } else if (((TourActivity.JobActivity) activity).getJob().getName().equals("deliver key")) {
+            } else if (((JobActivity) activity).getJob().getName().equals("deliver key")) {
                 stateManager.putProblemState(keyDeliveredStateId, VehicleRoute.class, route);
             }
         }
@@ -188,18 +189,18 @@ public ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prev
         }
 
         private boolean isPickupKey(TourActivity act) {
-            if (!(act instanceof TourActivity.JobActivity)) return false;
-            return ((TourActivity.JobActivity) act).getJob().getName().equals("get key");
+            if (!(act instanceof JobActivity)) return false;
+            return ((JobActivity) act).getJob().getName().equals("get key");
         }
 
         private boolean isUseKey(TourActivity act) {
-            if (!(act instanceof TourActivity.JobActivity)) return false;
-            return ((TourActivity.JobActivity) act).getJob().getName().equals("use key");
+            if (!(act instanceof JobActivity)) return false;
+            return ((JobActivity) act).getJob().getName().equals("use key");
         }
 
         private boolean isDeliverKey(TourActivity act) {
-            if (!(act instanceof TourActivity.JobActivity)) return false;
-            return ((TourActivity.JobActivity) act).getJob().getName().equals("deliver key");
+            if (!(act instanceof JobActivity)) return false;
+            return ((JobActivity) act).getJob().getName().equals("deliver key");
         }
 
 
@@ -215,36 +216,36 @@ public static void main(String[] args) {
             .addSkill("driver3")
             .setStartLocation(Location.newInstance(-3, 5)).setReturnToDepot(true).build();
 
-        Service s1 = Service.Builder.newInstance("s1")
+        Service s1 = new Service.Builder("s1")
             .addRequiredSkill("driver1")
             .setName("install new device")
             .setLocation(Location.newInstance(2, 2)).build();
-        Service s2 = Service.Builder.newInstance("s2")
+        Service s2 = new Service.Builder("s2")
             .addRequiredSkill("driver3")
             .setName("deliver key")
             .setLocation(Location.newInstance(2, 4)).build();
 
-        Service s3 = Service.Builder.newInstance("s3")
+        Service s3 = new Service.Builder("s3")
             .addRequiredSkill("driver1")
             .setName("repair heater")
             .setLocation(Location.newInstance(-2, 2)).build();
 
-        Service s4 = Service.Builder.newInstance("s4")
+        Service s4 = new Service.Builder("s4")
             .addRequiredSkill("driver3")
             .setName("get key")
             .setLocation(Location.newInstance(-2.3, 4)).build();
 
-        Service s5 = Service.Builder.newInstance("s5")
+        Service s5 = new Service.Builder("s5")
             .addRequiredSkill("driver1")
             .setName("cleaning")
             .setLocation(Location.newInstance(1, 5)).build();
 
-        Service s6 = Service.Builder.newInstance("s6")
+        Service s6 = new Service.Builder("s6")
             .addRequiredSkill("driver3")
             .setName("use key")
             .setLocation(Location.newInstance(-2, 3)).build();
 
-        Service s7 = Service.Builder.newInstance("s7")
+        Service s7 = new Service.Builder("s7")
             .addRequiredSkill("driver3")
             .setName("maintenance")
             .setLocation(Location.newInstance(-1.7, 3.5)).build();
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleTimeWindowExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleTimeWindowExample.java
index 0cd3e154c..765bc15a2 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleTimeWindowExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleTimeWindowExample.java
@@ -58,28 +58,28 @@ public static void main(String[] args) {
 		/*
          * build services at the required locations, each with a capacity-demand of 1.
 		 */
-        Service service1 = Service.Builder.newInstance("1")
+        Service service1 = new Service.Builder("1")
             .addTimeWindow(50,100)
             .addTimeWindow(20,35)
             .addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(10, 0)).build();
 
-        Service service2 = Service.Builder.newInstance("2")
+        Service service2 = new Service.Builder("2")
             .addSizeDimension(WEIGHT_INDEX, 1)
 //            .setServiceTime(10)
             .setLocation(Location.newInstance(20, 0)).setServiceTime(10).build();
 
-        Service service3 = Service.Builder.newInstance("3")
+        Service service3 = new Service.Builder("3")
             .addTimeWindow(5, 10)
             .addTimeWindow(35, 50)
             .addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(30, 0)).build();
 
-        Service service4 = Service.Builder.newInstance("4")
+        Service service4 = new Service.Builder("4")
 //            .addTimeWindow(5,10)
             .addTimeWindow(20, 40)
             .addTimeWindow(45, 80)
             .addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(40, 0)).build();
 
-        Service service5 = Service.Builder.newInstance("5")
+        Service service5 = new Service.Builder("5")
             .addTimeWindow(5,10)
             .addTimeWindow(20, 40)
             .addTimeWindow(60,100)
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleTimeWindowExample2.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleTimeWindowExample2.java
index d29db613e..f99c13bf6 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleTimeWindowExample2.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleTimeWindowExample2.java
@@ -86,7 +86,7 @@ public static void main(String[] args) {
 
         Random random = RandomNumberGeneration.newInstance();
         for(int i=0;i<40;i++){
-            Service service = Service.Builder.newInstance("" + (i + 1))
+            Service service = new Service.Builder("" + (i + 1))
                 .addTimeWindow(random.nextInt(50), 200)
                 .addTimeWindow(220 + random.nextInt(50), 350)
                 .addTimeWindow(400 + random.nextInt(50), 550)
@@ -97,7 +97,7 @@ public static void main(String[] args) {
         }
 
         for(int i=0;i<12;i++){
-            Service service = Service.Builder.newInstance(""+(i+51))
+            Service service = new Service.Builder(""+(i+51))
 //                .addTimeWindow(0, 80)
 ////                .addTimeWindow(120, 200)
 //                .addTimeWindow(250,500)
@@ -107,7 +107,7 @@ public static void main(String[] args) {
             vrpBuilder.addJob(service);
         }
 
-        Service service = Service.Builder.newInstance("100")
+        Service service = new Service.Builder("100")
             .addTimeWindow(50, 80)
             .setServiceTime(10)
             .setLocation(Location.newInstance(40, 1)).build();
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/RefuseCollectionExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/RefuseCollectionExample.java
index 8b5d60ee5..b5022bf2d 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/RefuseCollectionExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/RefuseCollectionExample.java
@@ -113,7 +113,7 @@ private static void readDemandQuantities(VehicleRoutingProblem.Builder vrpBuilde
             /*
              * build service
 			 */
-            Service service = Service.Builder.newInstance(lineTokens[0]).addSizeDimension(0, Integer.parseInt(lineTokens[1])).setLocation(Location.newInstance(lineTokens[0])).build();
+            Service service = new Service.Builder(lineTokens[0]).addSizeDimension(0, Integer.parseInt(lineTokens[1])).setLocation(Location.newInstance(lineTokens[0])).build();
             /*
 			 * and add it to problem
 			 */
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/RefuseCollectionWithFastMatrixExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/RefuseCollectionWithFastMatrixExample.java
index 5db863726..6fa3abee9 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/RefuseCollectionWithFastMatrixExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/RefuseCollectionWithFastMatrixExample.java
@@ -112,7 +112,7 @@ private static void readDemandQuantities(VehicleRoutingProblem.Builder vrpBuilde
             /*
              * build service
 			 */
-            Service service = Service.Builder.newInstance(lineTokens[0])
+            Service service = new Service.Builder(lineTokens[0])
                 .addSizeDimension(0, Integer.parseInt(lineTokens[1]))
                 .setLocation(Location.Builder.newInstance().setIndex(Integer.parseInt(lineTokens[0])).build())
                 .build();
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/ServicePickupsWithMultipleDepotsExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/ServicePickupsWithMultipleDepotsExample.java
index 67dbde120..ff13ffee8 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/ServicePickupsWithMultipleDepotsExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/ServicePickupsWithMultipleDepotsExample.java
@@ -77,17 +77,17 @@ public static void main(String[] args) {
 		 * 4: (15,13)->(14,11)
 		 */
 
-        Service shipment1 = Service.Builder.newInstance("1").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 7)).build();
-        Service shipment2 = Service.Builder.newInstance("2").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 13)).build();
+        Service shipment1 = new Service.Builder("1").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 7)).build();
+        Service shipment2 = new Service.Builder("2").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 13)).build();
 
-        Service shipment3 = Service.Builder.newInstance("3").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 7)).build();
-        Service shipment4 = Service.Builder.newInstance("4").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 13)).build();
+        Service shipment3 = new Service.Builder("3").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 7)).build();
+        Service shipment4 = new Service.Builder("4").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 13)).build();
 
-        Service shipment5 = Service.Builder.newInstance("5").addSizeDimension(0, 1).setLocation(Location.newInstance(55, 57)).build();
-        Service shipment6 = Service.Builder.newInstance("6").addSizeDimension(0, 1).setLocation(Location.newInstance(55, 63)).build();
+        Service shipment5 = new Service.Builder("5").addSizeDimension(0, 1).setLocation(Location.newInstance(55, 57)).build();
+        Service shipment6 = new Service.Builder("6").addSizeDimension(0, 1).setLocation(Location.newInstance(55, 63)).build();
 
-        Service shipment7 = Service.Builder.newInstance("7").addSizeDimension(0, 1).setLocation(Location.newInstance(65, 57)).build();
-        Service shipment8 = Service.Builder.newInstance("8").addSizeDimension(0, 1).setLocation(Location.newInstance(65, 63)).build();
+        Service shipment7 = new Service.Builder("7").addSizeDimension(0, 1).setLocation(Location.newInstance(65, 57)).build();
+        Service shipment8 = new Service.Builder("8").addSizeDimension(0, 1).setLocation(Location.newInstance(65, 63)).build();
 
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleDepotBoundedPickupAndDeliveryExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleDepotBoundedPickupAndDeliveryExample.java
index 35f805ef8..6f964f800 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleDepotBoundedPickupAndDeliveryExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleDepotBoundedPickupAndDeliveryExample.java
@@ -64,11 +64,11 @@ public static void main(String[] args) {
          * build pickups and deliveries at the required locations, each with a capacity-demand of 1.
 		 */
 
-        Pickup pickup1 = Pickup.Builder.newInstance("1").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 7)).build();
-        Delivery delivery1 = Delivery.Builder.newInstance("2").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 13)).build();
+        Pickup pickup1 = new Pickup.Builder("1").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 7)).build();
+        Delivery delivery1 = new Delivery.Builder("2").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 13)).build();
 
-        Pickup pickup2 = Pickup.Builder.newInstance("3").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 7)).build();
-        Delivery delivery2 = Delivery.Builder.newInstance("4").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 13)).build();
+        Pickup pickup2 = new Pickup.Builder("3").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 7)).build();
+        Delivery delivery2 = new Delivery.Builder("4").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 13)).build();
 
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryExample.java
index c23098abc..525efde6b 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryExample.java
@@ -17,6 +17,9 @@
  */
 package com.graphhopper.jsprit.examples;
 
+import java.util.Arrays;
+import java.util.Collection;
+
 import com.graphhopper.jsprit.analysis.toolbox.GraphStreamViewer;
 import com.graphhopper.jsprit.analysis.toolbox.Plotter;
 import com.graphhopper.jsprit.core.algorithm.VehicleRoutingAlgorithm;
@@ -30,51 +33,49 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.reporting.SolutionPrinter;
+import com.graphhopper.jsprit.core.reporting.SolutionPrinter.Print;
 import com.graphhopper.jsprit.core.util.Coordinate;
 import com.graphhopper.jsprit.core.util.Solutions;
 import com.graphhopper.jsprit.io.problem.VrpXMLWriter;
 import com.graphhopper.jsprit.util.Examples;
 
-import java.util.Arrays;
-import java.util.Collection;
-
 
 public class SimpleEnRoutePickupAndDeliveryExample {
 
     public static void main(String[] args) {
         /*
          * some preparation - create output folder
-		 */
+         */
         Examples.createOutputFolder();
 
-		/*
+        /*
          * get a vehicle type-builder and build a type with the typeId "vehicleType" and a capacity of 2
-		 */
+         */
         VehicleTypeImpl.Builder vehicleTypeBuilder = VehicleTypeImpl.Builder.newInstance("vehicleType").addCapacityDimension(0, 2);
         VehicleType vehicleType = vehicleTypeBuilder.build();
 
-		/*
+        /*
          * get a vehicle-builder and build a vehicle located at (10,10) with type "vehicleType"
-		 */
+         */
         Builder vehicleBuilder = VehicleImpl.Builder.newInstance("vehicle");
         vehicleBuilder.setStartLocation(loc(Coordinate.newInstance(10, 10)));
         vehicleBuilder.setType(vehicleType);
         VehicleImpl vehicle = vehicleBuilder.build();
 
-		/*
-         * build shipments at the required locations, each with a capacity-demand of 1.
-		 * 4 shipments
-		 * 1: (5,7)->(6,9)
-		 * 2: (5,13)->(6,11)
-		 * 3: (15,7)->(14,9)
-		 * 4: (15,13)->(14,11)
-		 */
+        /*
+         * build shipments at the required locations, each with a capacity-demand of 1. 4 shipments 1: (5,7)->(6,9) 2:
+         * (5,13)->(6,11) 3: (15,7)->(14,9) 4: (15,13)->(14,11)
+         */
 
-        Shipment shipment1 = Shipment.Builder.newInstance("1").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(5, 7))).setDeliveryLocation(loc(Coordinate.newInstance(6, 9))).build();
-        Shipment shipment2 = Shipment.Builder.newInstance("2").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(5, 13))).setDeliveryLocation(loc(Coordinate.newInstance(6, 11))).build();
+        Shipment shipment1 = Shipment.Builder.newInstance("1").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(5, 7)))
+                .setDeliveryLocation(loc(Coordinate.newInstance(6, 9))).build();
+        Shipment shipment2 = Shipment.Builder.newInstance("2").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(5, 13)))
+                .setDeliveryLocation(loc(Coordinate.newInstance(6, 11))).build();
 
-        Shipment shipment3 = Shipment.Builder.newInstance("3").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(15, 7))).setDeliveryLocation(loc(Coordinate.newInstance(14, 9))).build();
-        Shipment shipment4 = Shipment.Builder.newInstance("4").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(15, 13))).setDeliveryLocation(loc(Coordinate.newInstance(14, 11))).build();
+        Shipment shipment3 = Shipment.Builder.newInstance("3").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(15, 7)))
+                .setDeliveryLocation(loc(Coordinate.newInstance(14, 9))).build();
+        Shipment shipment4 = Shipment.Builder.newInstance("4").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(15, 13)))
+                .setDeliveryLocation(loc(Coordinate.newInstance(14, 11))).build();
 
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
@@ -83,41 +84,41 @@ public static void main(String[] args) {
 
         VehicleRoutingProblem problem = vrpBuilder.build();
 
-		/*
+        /*
          * get the algorithm out-of-the-box.
-		 */
+         */
         VehicleRoutingAlgorithm algorithm = new SchrimpfFactory().createAlgorithm(problem);
 
-		/*
+        /*
          * and search a solution
-		 */
+         */
         Collection<VehicleRoutingProblemSolution> solutions = algorithm.searchSolutions();
 
-		/*
+        /*
          * get the best
-		 */
+         */
         VehicleRoutingProblemSolution bestSolution = Solutions.bestOf(solutions);
 
-		/*
+        /*
          * write out problem and solution to xml-file
-		 */
+         */
         new VrpXMLWriter(problem, solutions).write("output/shipment-problem-with-solution.xml");
 
-		/*
-		 * print nRoutes and totalCosts of bestSolution
-		 */
-        SolutionPrinter.print(bestSolution);
+        /*
+         * print nRoutes and totalCosts of bestSolution
+         */
+        SolutionPrinter.print(problem, bestSolution, Print.VERBOSE);
 
-		/*
-		 * plot problem without solution
-		 */
+        /*
+         * plot problem without solution
+         */
         Plotter problemPlotter = new Plotter(problem);
         problemPlotter.plotShipments(true);
         problemPlotter.plot("output/simpleEnRoutePickupAndDeliveryExample_problem.png", "en-route pickup and delivery");
 
-		/*
-		 * plot problem with solution
-		 */
+        /*
+         * plot problem with solution
+         */
         Plotter solutionPlotter = new Plotter(problem, Arrays.asList(Solutions.bestOf(solutions).getRoutes().iterator().next()));
         solutionPlotter.plotShipments(true);
         solutionPlotter.plot("output/simpleEnRoutePickupAndDeliveryExample_solution.png", "en-route pickup and delivery");
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryWithDepotBoundedDeliveriesExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryWithDepotBoundedDeliveriesExample.java
index dafa1f709..8a678364b 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryWithDepotBoundedDeliveriesExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryWithDepotBoundedDeliveriesExample.java
@@ -17,6 +17,8 @@
  */
 package com.graphhopper.jsprit.examples;
 
+import java.util.Collection;
+
 import com.graphhopper.jsprit.analysis.toolbox.Plotter;
 import com.graphhopper.jsprit.core.algorithm.VehicleRoutingAlgorithm;
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
@@ -33,97 +35,92 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.reporting.SolutionPrinter;
+import com.graphhopper.jsprit.core.reporting.SolutionPrinter.Print;
 import com.graphhopper.jsprit.core.util.Coordinate;
 import com.graphhopper.jsprit.core.util.Solutions;
 import com.graphhopper.jsprit.io.problem.VrpXMLWriter;
 import com.graphhopper.jsprit.util.Examples;
 
-import java.util.Collection;
-
 
 public class SimpleEnRoutePickupAndDeliveryWithDepotBoundedDeliveriesExample {
 
     public static void main(String[] args) {
         /*
          * some preparation - create output folder
-		 */
+         */
         Examples.createOutputFolder();
 
-		/*
+        /*
          * get a vehicle type-builder and build a type with the typeId "vehicleType" and a capacity of 2
-		 */
+         */
         VehicleTypeImpl.Builder vehicleTypeBuilder = VehicleTypeImpl.Builder.newInstance("vehicleType").addCapacityDimension(0, 2);
         VehicleType vehicleType = vehicleTypeBuilder.build();
 
-		/*
+        /*
          * get a vehicle-builder and build a vehicle located at (10,10) with type "vehicleType"
-		 */
+         */
         Builder vehicleBuilder = VehicleImpl.Builder.newInstance("vehicle");
         vehicleBuilder.setStartLocation(loc(Coordinate.newInstance(10, 10)));
         vehicleBuilder.setType(vehicleType);
         VehicleImpl vehicle = vehicleBuilder.build();
 
-		/*
-         * build shipments at the required locations, each with a capacity-demand of 1.
-		 * 4 shipments
-		 * 1: (5,7)->(6,9)
-		 * 2: (5,13)->(6,11)
-		 * 3: (15,7)->(14,9)
-		 * 4: (15,13)->(14,11)
-		 */
-
-        Shipment shipment1 = Shipment.Builder.newInstance("1").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(5, 7))).setDeliveryLocation(loc(Coordinate.newInstance(6, 9))).build();
-        Shipment shipment2 = Shipment.Builder.newInstance("2").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(5, 13))).setDeliveryLocation(loc(Coordinate.newInstance(6, 11))).build();
-
-        Shipment shipment3 = Shipment.Builder.newInstance("3").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(15, 7))).setDeliveryLocation(loc(Coordinate.newInstance(14, 9))).build();
-        Shipment shipment4 = Shipment.Builder.newInstance("4").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(15, 13))).setDeliveryLocation(loc(Coordinate.newInstance(14, 11))).build();
+        /*
+         * build shipments at the required locations, each with a capacity-demand of 1. 4 shipments 1: (5,7)->(6,9) 2:
+         * (5,13)->(6,11) 3: (15,7)->(14,9) 4: (15,13)->(14,11)
+         */
+
+        Shipment shipment1 = Shipment.Builder.newInstance("1").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(5, 7)))
+                .setDeliveryLocation(loc(Coordinate.newInstance(6, 9))).build();
+        Shipment shipment2 = Shipment.Builder.newInstance("2").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(5, 13)))
+                .setDeliveryLocation(loc(Coordinate.newInstance(6, 11))).build();
+
+        Shipment shipment3 = Shipment.Builder.newInstance("3").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(15, 7)))
+                .setDeliveryLocation(loc(Coordinate.newInstance(14, 9))).build();
+        Shipment shipment4 = Shipment.Builder.newInstance("4").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(15, 13)))
+                .setDeliveryLocation(loc(Coordinate.newInstance(14, 11))).build();
 //
         /*
-         * build deliveries, (implicitly picked up in the depot)
-		 * 1: (4,8)
-		 * 2: (4,12)
-		 * 3: (16,8)
-		 * 4: (16,12)
-		 */
-        Delivery delivery1 = Delivery.Builder.newInstance("5").addSizeDimension(0, 1).setLocation(loc(Coordinate.newInstance(4, 8))).build();
-        Delivery delivery2 = Delivery.Builder.newInstance("6").addSizeDimension(0, 1).setLocation(loc(Coordinate.newInstance(4, 12))).build();
-        Delivery delivery3 = Delivery.Builder.newInstance("7").addSizeDimension(0, 1).setLocation(loc(Coordinate.newInstance(16, 8))).build();
-        Delivery delivery4 = Delivery.Builder.newInstance("8").addSizeDimension(0, 1).setLocation(loc(Coordinate.newInstance(16, 12))).build();
+         * build deliveries, (implicitly picked up in the depot) 1: (4,8) 2: (4,12) 3: (16,8) 4: (16,12)
+         */
+        Delivery delivery1 = new Delivery.Builder("5").addSizeDimension(0, 1).setLocation(loc(Coordinate.newInstance(4, 8))).build();
+        Delivery delivery2 = new Delivery.Builder("6").addSizeDimension(0, 1).setLocation(loc(Coordinate.newInstance(4, 12))).build();
+        Delivery delivery3 = new Delivery.Builder("7").addSizeDimension(0, 1).setLocation(loc(Coordinate.newInstance(16, 8))).build();
+        Delivery delivery4 = new Delivery.Builder("8").addSizeDimension(0, 1).setLocation(loc(Coordinate.newInstance(16, 12))).build();
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addVehicle(vehicle);
         vrpBuilder.addJob(shipment1).addJob(shipment2).addJob(shipment3).addJob(shipment4)
-            .addJob(delivery1).addJob(delivery2).addJob(delivery3).addJob(delivery4).build();
+                .addJob(delivery1).addJob(delivery2).addJob(delivery3).addJob(delivery4).build();
 
         VehicleRoutingProblem problem = vrpBuilder.build();
 
-		/*
+        /*
          * build the algorithm
-		 */
+         */
 
         StateManager stateManager = new StateManager(problem);
         ConstraintManager constraintManager = new ConstraintManager(problem, stateManager);
         constraintManager.addConstraint(new ServiceDeliveriesFirstConstraint(), ConstraintManager.Priority.CRITICAL);
 
-        VehicleRoutingAlgorithm algorithm = Jsprit.Builder.newInstance(problem).setStateAndConstraintManager(stateManager,constraintManager).buildAlgorithm();
+        VehicleRoutingAlgorithm algorithm = Jsprit.Builder.newInstance(problem).setStateAndConstraintManager(stateManager, constraintManager).buildAlgorithm();
 
-		/*
+        /*
          * and search a solution
-		 */
+         */
         Collection<VehicleRoutingProblemSolution> solutions = algorithm.searchSolutions();
 
-		/*
-		 * get the best
-		 */
+        /*
+         * get the best
+         */
         VehicleRoutingProblemSolution bestSolution = Solutions.bestOf(solutions);
 
         new VrpXMLWriter(problem, solutions).write("output/mixed-shipments-services-problem-with-solution.xml");
 
-        SolutionPrinter.print(bestSolution);
+        SolutionPrinter.print(problem, bestSolution, Print.VERBOSE);
 
-		/*
-		 * plot
-		 */
+        /*
+         * plot
+         */
         Plotter problemPlotter = new Plotter(problem);
         problemPlotter.plotShipments(true);
         problemPlotter.plot("output/simpleMixedEnRoutePickupAndDeliveryExample_problem.png", "en-route pd and depot bounded deliveries");
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExample.java
index 8cf9f200f..e95ec96c9 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExample.java
@@ -72,11 +72,11 @@ public static void main(String[] args) {
 		/*
          * build services at the required locations, each with a capacity-demand of 1.
 		 */
-        Service service1 = Service.Builder.newInstance("1").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 7)).build();
-        Service service2 = Service.Builder.newInstance("2").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 13)).build();
+        Service service1 = new Service.Builder("1").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 7)).build();
+        Service service2 = new Service.Builder("2").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 13)).build();
 
-        Service service3 = Service.Builder.newInstance("3").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(15, 7)).build();
-        Service service4 = Service.Builder.newInstance("4").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(15, 13)).build();
+        Service service3 = new Service.Builder("3").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(15, 7)).build();
+        Service service4 = new Service.Builder("4").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(15, 13)).build();
 
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExampleOpenRoutes.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExampleOpenRoutes.java
index 83705e434..7b7b8b8eb 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExampleOpenRoutes.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExampleOpenRoutes.java
@@ -64,11 +64,11 @@ public static void main(String[] args) {
 		/*
          * build services at the required locations, each with a capacity-demand of 1.
 		 */
-        Service service1 = Service.Builder.newInstance("1").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 7)).build();
-        Service service2 = Service.Builder.newInstance("2").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 13)).build();
+        Service service1 = new Service.Builder("1").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 7)).build();
+        Service service2 = new Service.Builder("2").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 13)).build();
 
-        Service service3 = Service.Builder.newInstance("3").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 7)).build();
-        Service service4 = Service.Builder.newInstance("4").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 13)).build();
+        Service service3 = new Service.Builder("3").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 7)).build();
+        Service service4 = new Service.Builder("4").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 13)).build();
 
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExampleWithPriorities.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExampleWithPriorities.java
index 6fc24f19d..09d7c4080 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExampleWithPriorities.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExampleWithPriorities.java
@@ -70,11 +70,11 @@ public static void main(String[] args) {
 		/*
          * build services at the required locations, each with a capacity-demand of 1.
 		 */
-        Service service1 = Service.Builder.newInstance("1").setPriority(1).addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 7)).build();
-        Service service2 = Service.Builder.newInstance("2").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 13)).build();
+        Service service1 = new Service.Builder("1").setPriority(1).addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 7)).build();
+        Service service2 = new Service.Builder("2").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 13)).build();
 
-        Service service3 = Service.Builder.newInstance("3").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(15, 7)).build();
-        Service service4 = Service.Builder.newInstance("4").setPriority(1).addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(15, 13)).build();
+        Service service3 = new Service.Builder("3").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(15, 7)).build();
+        Service service4 = new Service.Builder("4").setPriority(1).addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(15, 13)).build();
 
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExampleWithSkills.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExampleWithSkills.java
index 01834da95..c1006b387 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExampleWithSkills.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExampleWithSkills.java
@@ -78,12 +78,12 @@ public static void main(String[] args) {
 		/*
          * build services at the required locations, each with a capacity-demand of 1.
 		 */
-        Service service1 = Service.Builder.newInstance("1").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 7)).build();
-        Service service2 = Service.Builder.newInstance("2").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 13)).build();
+        Service service1 = new Service.Builder("1").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 7)).build();
+        Service service2 = new Service.Builder("2").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 13)).build();
 
-        Service service3 = Service.Builder.newInstance("3").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(15, 7)).build();
+        Service service3 = new Service.Builder("3").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(15, 7)).build();
 
-        Service service4 = Service.Builder.newInstance("4").addSizeDimension(WEIGHT_INDEX, 1).addRequiredSkill("drill").setLocation(Location.newInstance(15, 13)).build();
+        Service service4 = new Service.Builder("4").addSizeDimension(WEIGHT_INDEX, 1).addRequiredSkill("drill").setLocation(Location.newInstance(15, 13)).build();
 
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleVRPWithBackhaulsExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleVRPWithBackhaulsExample.java
index 2c0c3e76f..b97dfc9bc 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleVRPWithBackhaulsExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleVRPWithBackhaulsExample.java
@@ -67,11 +67,11 @@ public static void main(String[] args) {
 		/*
          * build pickups and deliveries at the required locations, each with a capacity-demand of 1.
 		 */
-        Pickup pickup1 = Pickup.Builder.newInstance("1").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 7)).build();
-        Delivery delivery1 = Delivery.Builder.newInstance("2").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 13)).build();
+        Pickup pickup1 = new Pickup.Builder("1").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 7)).build();
+        Delivery delivery1 = new Delivery.Builder("2").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 13)).build();
 
-        Pickup pickup2 = Pickup.Builder.newInstance("3").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 7)).build();
-        Delivery delivery2 = Delivery.Builder.newInstance("4").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 13)).build();
+        Pickup pickup2 = new Pickup.Builder("3").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 7)).build();
+        Delivery delivery2 = new Delivery.Builder("4").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 13)).build();
 
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SolomonWithSkillsExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SolomonWithSkillsExample.java
index 0fb167803..061763ba9 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SolomonWithSkillsExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SolomonWithSkillsExample.java
@@ -65,13 +65,13 @@ public static void main(String[] args) {
             Service service = (Service) job;
             Service.Builder skillServiceBuilder;
             if (service.getLocation().getCoordinate().getY() < 50.) {
-                skillServiceBuilder = Service.Builder.newInstance(service.getId() + "_skill2").setServiceTime(service.getServiceDuration())
+                skillServiceBuilder = new Service.Builder(service.getId() + "_skill2").setServiceTime(service.getServiceDuration())
                     .setLocation(Location.Builder.newInstance().setId(service.getLocation().getId())
                         .setCoordinate(service.getLocation().getCoordinate()).build()).setTimeWindow(service.getTimeWindow())
                     .addSizeDimension(0, service.getSize().get(0));
                 skillServiceBuilder.addRequiredSkill("skill2");
             } else {
-                skillServiceBuilder = Service.Builder.newInstance(service.getId() + "_skill1").setServiceTime(service.getServiceDuration())
+                skillServiceBuilder = new Service.Builder(service.getId() + "_skill1").setServiceTime(service.getServiceDuration())
                     .setLocation(
                         Location.Builder.newInstance().setId(service.getLocation().getId())
                             .setCoordinate(service.getLocation().getCoordinate()).build()
diff --git a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/BelhaizaReader.java b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/BelhaizaReader.java
index f17218dc7..34dc884a3 100644
--- a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/BelhaizaReader.java
+++ b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/BelhaizaReader.java
@@ -112,7 +112,7 @@ public void read(String solomonFile){
 
 				}
 				else{
-					Service.Builder serviceBuilder = Service.Builder.newInstance(customerId);
+					Service.Builder serviceBuilder = new Service.Builder(customerId);
 					serviceBuilder.addSizeDimension(0, demand).setLocation(Location.Builder.newInstance().setCoordinate(coord).setId(customerId).build()).setServiceTime(serviceTime);
 					int noTimeWindows = Integer.parseInt(tokens[7]);
 					for(int i=0;i<noTimeWindows*2;i=i+2){
diff --git a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/ChristofidesReader.java b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/ChristofidesReader.java
index ab5204cfa..45477a206 100644
--- a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/ChristofidesReader.java
+++ b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/ChristofidesReader.java
@@ -92,7 +92,7 @@ public void read(String fileName) {
                 Coordinate customerCoord = makeCoord(tokens[0].trim(), tokens[1].trim());
                 int demand = Integer.parseInt(tokens[2].trim());
                 String customer = Integer.valueOf(counter - 1).toString();
-                Service service = Service.Builder.newInstance(customer).addSizeDimension(0, demand).setServiceTime(serviceTime).setLocation(Location.newInstance(customerCoord.getX(), customerCoord.getY())).build();
+                Service service = new Service.Builder(customer).addSizeDimension(0, demand).setServiceTime(serviceTime).setLocation(Location.newInstance(customerCoord.getX(), customerCoord.getY())).build();
                 vrpBuilder.addJob(service);
             }
             counter++;
diff --git a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/CordeauReader.java b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/CordeauReader.java
index 8240b696f..92defdf39 100644
--- a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/CordeauReader.java
+++ b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/CordeauReader.java
@@ -103,7 +103,7 @@ public void read(String fileName) {
                 Coordinate customerCoord = makeCoord(tokens[1].trim(), tokens[2].trim());
                 double serviceTime = Double.parseDouble(tokens[3].trim());
                 int demand = Integer.parseInt(tokens[4].trim());
-                Service service = Service.Builder.newInstance(id).addSizeDimension(0, demand).setServiceTime(serviceTime)
+                Service service = new Service.Builder(id).addSizeDimension(0, demand).setServiceTime(serviceTime)
                     .setLocation(Location.Builder.newInstance().setId(id).setCoordinate(customerCoord).build()).build();
                 vrpBuilder.addJob(service);
             } else if (counter <= (nOfCustomers + nOfDepots + nOfDepots)) {
diff --git a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/LopezIbanezBlumReader.java b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/LopezIbanezBlumReader.java
index 411b69ff0..7c65d85c3 100644
--- a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/LopezIbanezBlumReader.java
+++ b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/LopezIbanezBlumReader.java
@@ -76,7 +76,7 @@ public void read(String instanceFile) {
                         .setEarliestStart(Double.parseDouble(twTokens[0])).setLatestArrival(Double.parseDouble(twTokens[1])).build();
                     builder.addVehicle(travelingSalesman);
                 } else {
-                    Service s = Service.Builder.newInstance("" + nodeIndex).setLocation(Location.newInstance(nodeIndex))
+                    Service s = new Service.Builder("" + nodeIndex).setLocation(Location.newInstance(nodeIndex))
                         .setTimeWindow(TimeWindow.newInstance(Double.parseDouble(twTokens[0]), Double.parseDouble(twTokens[1]))).build();
                     builder.addJob(s);
                 }
diff --git a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/LuiShenReader.java b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/LuiShenReader.java
index 9215b5e25..4207c0f60 100644
--- a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/LuiShenReader.java
+++ b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/LuiShenReader.java
@@ -86,7 +86,7 @@ public void read(String instanceFile, String vehicleFile, String costScenario) {
                 if (counter == 10) {
                     createVehicles(vehicleFile, costScenario, customerId, coord, start, end);
                 } else {
-                    Service service = Service.Builder.newInstance("" + counter).addSizeDimension(0, demand)
+                    Service service = new Service.Builder("" + counter).addSizeDimension(0, demand)
                         .setLocation(Location.Builder.newInstance().setCoordinate(coord).setId(customerId).build()).setServiceTime(serviceTime)
                         .setTimeWindow(TimeWindow.newInstance(start, end)).build();
                     vrpBuilder.addJob(service);
diff --git a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/SolomonReader.java b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/SolomonReader.java
index 04f54de9f..eb71dd876 100644
--- a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/SolomonReader.java
+++ b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/SolomonReader.java
@@ -110,7 +110,7 @@ public void read(String solomonFile) {
                     vrpBuilder.addVehicle(vehicle);
 
                 } else {
-                    Service service = Service.Builder.newInstance(customerId).addSizeDimension(0, demand)
+                    Service service = new Service.Builder(customerId).addSizeDimension(0, demand)
                         .setLocation(Location.Builder.newInstance().setCoordinate(coord).setId(customerId).build()).setServiceTime(serviceTime)
                         .setTimeWindow(TimeWindow.newInstance(start, end)).build();
                     vrpBuilder.addJob(service);
diff --git a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/TSPLIB95Reader.java b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/TSPLIB95Reader.java
index abeeea31a..829236db7 100644
--- a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/TSPLIB95Reader.java
+++ b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/TSPLIB95Reader.java
@@ -187,7 +187,7 @@ public void read(String filename) {
                     continue;
                 }
             }
-            Service service = Service.Builder.newInstance(id)
+            Service service = new Service.Builder(id)
                 .setLocation(Location.Builder.newInstance().setId(id)
                     .setCoordinate(coords[index]).setIndex(index).build())
                 .addSizeDimension(0, demands[index]).build();
diff --git a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/VrphGoldenReader.java b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/VrphGoldenReader.java
index 9a7d4697b..1fab0a941 100644
--- a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/VrphGoldenReader.java
+++ b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/VrphGoldenReader.java
@@ -86,7 +86,7 @@ public void read(String filename) {
                 if (customerCount == 0) {
                     depotCoord = Coordinate.newInstance(Double.parseDouble(tokens[1]), Double.parseDouble(tokens[2]));
                 } else {
-                    Service.Builder serviceBuilder = Service.Builder.newInstance(tokens[0]).addSizeDimension(0, Integer.parseInt(tokens[3]));
+                    Service.Builder serviceBuilder = new Service.Builder(tokens[0]).addSizeDimension(0, Integer.parseInt(tokens[3]));
                     serviceBuilder.setLocation(Location.newInstance(Double.parseDouble(tokens[1]), Double.parseDouble(tokens[2])));
                     vrpBuilder.addJob(serviceBuilder.build());
                 }
diff --git a/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLReader.java b/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLReader.java
index 504d39c44..47ccf57ea 100644
--- a/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLReader.java
+++ b/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLReader.java
@@ -17,12 +17,37 @@
  */
 package com.graphhopper.jsprit.io.problem;
 
+import java.io.IOException;
+import java.io.InputStream;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+import org.apache.commons.configuration.ConfigurationException;
+import org.apache.commons.configuration.HierarchicalConfiguration;
+import org.apache.commons.configuration.XMLConfiguration;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.xml.sax.EntityResolver;
+import org.xml.sax.InputSource;
+import org.xml.sax.SAXException;
+
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
 import com.graphhopper.jsprit.core.problem.driver.Driver;
 import com.graphhopper.jsprit.core.problem.driver.DriverImpl;
-import com.graphhopper.jsprit.core.problem.job.*;
+import com.graphhopper.jsprit.core.problem.job.Break;
+import com.graphhopper.jsprit.core.problem.job.Delivery;
+import com.graphhopper.jsprit.core.problem.job.Job;
+import com.graphhopper.jsprit.core.problem.job.Pickup;
+import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
@@ -33,38 +58,35 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.Coordinate;
 import com.graphhopper.jsprit.core.util.Resource;
-import org.apache.commons.configuration.ConfigurationException;
-import org.apache.commons.configuration.HierarchicalConfiguration;
-import org.apache.commons.configuration.XMLConfiguration;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-import org.xml.sax.EntityResolver;
-import org.xml.sax.InputSource;
-import org.xml.sax.SAXException;
-
-import java.io.IOException;
-import java.io.InputStream;
-import java.util.*;
 
 public class VrpXMLReader {
 
     public interface ServiceBuilderFactory {
-        Service.Builder createBuilder(String serviceType, String id, Integer size);
+        Service.BuilderBase<?, ?> createBuilder(String serviceType, String id, Integer size);
     }
 
     static class DefaultServiceBuilderFactory implements ServiceBuilderFactory {
 
         @Override
-        public Service.Builder createBuilder(String serviceType, String id, Integer size) {
+        public Service.BuilderBase<?, ?> createBuilder(String serviceType, String id, Integer size) {
             if (serviceType.equals("pickup")) {
-                if (size != null) return Pickup.Builder.newInstance(id).addSizeDimension(0, size);
-                else return Pickup.Builder.newInstance(id);
+                if (size != null) {
+                    return new Pickup.Builder(id).addSizeDimension(0, size);
+                } else {
+                    return new Pickup.Builder(id);
+                }
             } else if (serviceType.equals("delivery")) {
-                if (size != null) return Delivery.Builder.newInstance(id).addSizeDimension(0, size);
-                else return Delivery.Builder.newInstance(id);
+                if (size != null) {
+                    return new Delivery.Builder(id).addSizeDimension(0, size);
+                } else {
+                    return new Delivery.Builder(id);
+                }
             } else {
-                if (size != null) return Service.Builder.newInstance(id).addSizeDimension(0, size);
-                else return Service.Builder.newInstance(id);
+                if (size != null) {
+                    return new Service.Builder(id).addSizeDimension(0, size);
+                } else {
+                    return new Service.Builder(id);
+                }
 
             }
         }
@@ -91,7 +113,8 @@
 
 
     /**
-     * @param schemaValidation the schemaValidation to set
+     * @param schemaValidation
+     *            the schemaValidation to set
      */
     @SuppressWarnings("UnusedDeclaration")
     public void setSchemaValidation(boolean schemaValidation) {
@@ -100,18 +123,18 @@ public void setSchemaValidation(boolean schemaValidation) {
 
     public VrpXMLReader(VehicleRoutingProblem.Builder vrpBuilder, Collection<VehicleRoutingProblemSolution> solutions) {
         this.vrpBuilder = vrpBuilder;
-        this.vehicleMap = new LinkedHashMap<String, Vehicle>();
-        this.serviceMap = new LinkedHashMap<String, Service>();
-        this.shipmentMap = new LinkedHashMap<String, Shipment>();
+        vehicleMap = new LinkedHashMap<String, Vehicle>();
+        serviceMap = new LinkedHashMap<String, Service>();
+        shipmentMap = new LinkedHashMap<String, Shipment>();
         this.solutions = solutions;
     }
 
     public VrpXMLReader(VehicleRoutingProblem.Builder vrpBuilder) {
         this.vrpBuilder = vrpBuilder;
-        this.vehicleMap = new LinkedHashMap<String, Vehicle>();
-        this.serviceMap = new LinkedHashMap<String, Service>();
-        this.shipmentMap = new LinkedHashMap<String, Shipment>();
-        this.solutions = null;
+        vehicleMap = new LinkedHashMap<String, Vehicle>();
+        serviceMap = new LinkedHashMap<String, Service>();
+        shipmentMap = new LinkedHashMap<String, Shipment>();
+        solutions = null;
     }
 
     public void read(String filename) {
@@ -194,9 +217,13 @@ private void readInitialRoutes(XMLConfiguration xmlConfig) {
             Driver driver = DriverImpl.noDriver();
             String vehicleId = routeConfig.getString("vehicleId");
             Vehicle vehicle = getVehicle(vehicleId);
-            if (vehicle == null) throw new IllegalArgumentException("vehicle is missing.");
+            if (vehicle == null) {
+                throw new IllegalArgumentException("vehicle is missing.");
+            }
             String start = routeConfig.getString("start");
-            if (start == null) throw new IllegalArgumentException("route start-time is missing.");
+            if (start == null) {
+                throw new IllegalArgumentException("route start-time is missing.");
+            }
             double departureTime = Double.parseDouble(start);
 
             VehicleRoute.Builder routeBuilder = VehicleRoute.Builder.newInstance(vehicle, driver);
@@ -205,41 +232,52 @@ private void readInitialRoutes(XMLConfiguration xmlConfig) {
             List<HierarchicalConfiguration> actConfigs = routeConfig.configurationsAt("act");
             for (HierarchicalConfiguration actConfig : actConfigs) {
                 String type = actConfig.getString("[@type]");
-                if (type == null) throw new IllegalArgumentException("act[@type] is missing.");
+                if (type == null) {
+                    throw new IllegalArgumentException("act[@type] is missing.");
+                }
                 double arrTime = 0.;
                 double endTime = 0.;
                 String arrTimeS = actConfig.getString("arrTime");
-                if (arrTimeS != null) arrTime = Double.parseDouble(arrTimeS);
+                if (arrTimeS != null) {
+                    arrTime = Double.parseDouble(arrTimeS);
+                }
                 String endTimeS = actConfig.getString("endTime");
-                if (endTimeS != null) endTime = Double.parseDouble(endTimeS);
+                if (endTimeS != null) {
+                    endTime = Double.parseDouble(endTimeS);
+                }
 
                 String serviceId = actConfig.getString("serviceId");
-                if(type.equals("break")) {
+                if (type.equals("break")) {
                     Break currentbreak = getBreak(vehicleId);
                     routeBuilder.addBreak(currentbreak);
-                }
-                else {
+                } else {
                     if (serviceId != null) {
                         Service service = getService(serviceId);
-                        if (service == null)
-                            throw new IllegalArgumentException("service to serviceId " + serviceId + " is missing (reference in one of your initial routes). make sure you define the service you refer to here in <services> </services>.");
+                        if (service == null) {
+                            throw new IllegalArgumentException("service to serviceId " + serviceId
+                                    + " is missing (reference in one of your initial routes). make sure you define the service you refer to here in <services> </services>.");
+                        }
                         //!!!since job is part of initial route, it does not belong to jobs in problem, i.e. variable jobs that can be assigned/scheduled
                         freezedJobIds.add(serviceId);
                         routeBuilder.addService(service);
                     } else {
                         String shipmentId = actConfig.getString("shipmentId");
-                        if (shipmentId == null)
+                        if (shipmentId == null) {
                             throw new IllegalArgumentException("either serviceId or shipmentId is missing");
+                        }
                         Shipment shipment = getShipment(shipmentId);
-                        if (shipment == null)
-                            throw new IllegalArgumentException("shipment to shipmentId " + shipmentId + " is missing (reference in one of your initial routes). make sure you define the shipment you refer to here in <shipments> </shipments>.");
+                        if (shipment == null) {
+                            throw new IllegalArgumentException("shipment to shipmentId " + shipmentId
+                                    + " is missing (reference in one of your initial routes). make sure you define the shipment you refer to here in <shipments> </shipments>.");
+                        }
                         freezedJobIds.add(shipmentId);
                         if (type.equals("pickupShipment")) {
                             routeBuilder.addPickup(shipment);
                         } else if (type.equals("deliverShipment")) {
                             routeBuilder.addDelivery(shipment);
-                        } else
+                        } else {
                             throw new IllegalArgumentException("type " + type + " is not supported. Use 'pickupShipment' or 'deliverShipment' here");
+                        }
                     }
                 }
             }
@@ -250,12 +288,16 @@ private void readInitialRoutes(XMLConfiguration xmlConfig) {
     }
 
     private void readSolutions(XMLConfiguration vrpProblem) {
-        if (solutions == null) return;
+        if (solutions == null) {
+            return;
+        }
         List<HierarchicalConfiguration> solutionConfigs = vrpProblem.configurationsAt("solutions.solution");
         for (HierarchicalConfiguration solutionConfig : solutionConfigs) {
             String totalCost = solutionConfig.getString("cost");
             double cost = -1;
-            if (totalCost != null) cost = Double.parseDouble(totalCost);
+            if (totalCost != null) {
+                cost = Double.parseDouble(totalCost);
+            }
             List<HierarchicalConfiguration> routeConfigs = solutionConfig.configurationsAt("routes.route");
             List<VehicleRoute> routes = new ArrayList<VehicleRoute>();
             for (HierarchicalConfiguration routeConfig : routeConfigs) {
@@ -263,48 +305,62 @@ private void readSolutions(XMLConfiguration vrpProblem) {
                 Driver driver = DriverImpl.noDriver();
                 String vehicleId = routeConfig.getString("vehicleId");
                 Vehicle vehicle = getVehicle(vehicleId);
-                if (vehicle == null) throw new IllegalArgumentException("vehicle is missing.");
+                if (vehicle == null) {
+                    throw new IllegalArgumentException("vehicle is missing.");
+                }
                 String start = routeConfig.getString("start");
-                if (start == null) throw new IllegalArgumentException("route start-time is missing.");
+                if (start == null) {
+                    throw new IllegalArgumentException("route start-time is missing.");
+                }
                 double departureTime = Double.parseDouble(start);
 
                 String end = routeConfig.getString("end");
-                if (end == null) throw new IllegalArgumentException("route end-time is missing.");
+                if (end == null) {
+                    throw new IllegalArgumentException("route end-time is missing.");
+                }
 
                 VehicleRoute.Builder routeBuilder = VehicleRoute.Builder.newInstance(vehicle, driver);
                 routeBuilder.setDepartureTime(departureTime);
                 List<HierarchicalConfiguration> actConfigs = routeConfig.configurationsAt("act");
                 for (HierarchicalConfiguration actConfig : actConfigs) {
                     String type = actConfig.getString("[@type]");
-                    if (type == null) throw new IllegalArgumentException("act[@type] is missing.");
+                    if (type == null) {
+                        throw new IllegalArgumentException("act[@type] is missing.");
+                    }
                     double arrTime = 0.;
                     double endTime = 0.;
                     String arrTimeS = actConfig.getString("arrTime");
-                    if (arrTimeS != null) arrTime = Double.parseDouble(arrTimeS);
+                    if (arrTimeS != null) {
+                        arrTime = Double.parseDouble(arrTimeS);
+                    }
                     String endTimeS = actConfig.getString("endTime");
-                    if (endTimeS != null) endTime = Double.parseDouble(endTimeS);
-                    if(type.equals("break")) {
+                    if (endTimeS != null) {
+                        endTime = Double.parseDouble(endTimeS);
+                    }
+                    if (type.equals("break")) {
                         Break currentbreak = getBreak(vehicleId);
                         routeBuilder.addBreak(currentbreak);
-                    }
-                    else {
+                    } else {
                         String serviceId = actConfig.getString("serviceId");
                         if (serviceId != null) {
                             Service service = getService(serviceId);
                             routeBuilder.addService(service);
                         } else {
                             String shipmentId = actConfig.getString("shipmentId");
-                            if (shipmentId == null)
+                            if (shipmentId == null) {
                                 throw new IllegalArgumentException("either serviceId or shipmentId is missing");
+                            }
                             Shipment shipment = getShipment(shipmentId);
-                            if (shipment == null)
+                            if (shipment == null) {
                                 throw new IllegalArgumentException("shipment with id " + shipmentId + " does not exist.");
+                            }
                             if (type.equals("pickupShipment")) {
                                 routeBuilder.addPickup(shipment);
                             } else if (type.equals("deliverShipment")) {
                                 routeBuilder.addDelivery(shipment);
-                            } else
+                            } else {
                                 throw new IllegalArgumentException("type " + type + " is not supported. Use 'pickupShipment' or 'deliverShipment' here");
+                            }
                         }
                     }
                 }
@@ -315,8 +371,12 @@ private void readSolutions(XMLConfiguration vrpProblem) {
             for (HierarchicalConfiguration unassignedJobConfig : unassignedJobConfigs) {
                 String jobId = unassignedJobConfig.getString("[@id]");
                 Job job = getShipment(jobId);
-                if (job == null) job = getService(jobId);
-                if (job == null) throw new IllegalArgumentException("cannot find unassignedJob with id " + jobId);
+                if (job == null) {
+                    job = getService(jobId);
+                }
+                if (job == null) {
+                    throw new IllegalArgumentException("cannot find unassignedJob with id " + jobId);
+                }
                 solution.getUnassignedJobs().add(job);
             }
 
@@ -342,17 +402,22 @@ private Break getBreak(String vehicleId) {
 
     private void readProblemType(XMLConfiguration vrpProblem) {
         String fleetSize = vrpProblem.getString("problemType.fleetSize");
-        if (fleetSize == null) vrpBuilder.setFleetSize(FleetSize.INFINITE);
-        else if (fleetSize.toUpperCase().equals(FleetSize.INFINITE.toString()))
+        if (fleetSize == null) {
+            vrpBuilder.setFleetSize(FleetSize.INFINITE);
+        } else if (fleetSize.toUpperCase().equals(FleetSize.INFINITE.toString())) {
             vrpBuilder.setFleetSize(FleetSize.INFINITE);
-        else vrpBuilder.setFleetSize(FleetSize.FINITE);
+        } else {
+            vrpBuilder.setFleetSize(FleetSize.FINITE);
+        }
     }
 
     private void readShipments(XMLConfiguration config) {
         List<HierarchicalConfiguration> shipmentConfigs = config.configurationsAt("shipments.shipment");
         for (HierarchicalConfiguration shipmentConfig : shipmentConfigs) {
             String id = shipmentConfig.getString("[@id]");
-            if (id == null) throw new IllegalArgumentException("shipment[@id] is missing.");
+            if (id == null) {
+                throw new IllegalArgumentException("shipment[@id] is missing.");
+            }
 
             String capacityString = shipmentConfig.getString("capacity-demand");
             boolean capacityDimensionsExist = shipmentConfig.containsKey("capacity-dimensions.dimension(0)");
@@ -360,7 +425,8 @@ private void readShipments(XMLConfiguration config) {
                 throw new IllegalArgumentException("capacity of shipment is not set. use 'capacity-dimensions'");
             }
             if (capacityString != null && capacityDimensionsExist) {
-                throw new IllegalArgumentException("either use capacity or capacity-dimension, not both. prefer the use of 'capacity-dimensions' over 'capacity'.");
+                throw new IllegalArgumentException(
+                        "either use capacity or capacity-dimension, not both. prefer the use of 'capacity-dimensions' over 'capacity'.");
             }
 
             Shipment.Builder builder;
@@ -378,32 +444,42 @@ private void readShipments(XMLConfiguration config) {
 
             //name
             String name = shipmentConfig.getString("name");
-            if (name != null) builder.setName(name);
+            if (name != null) {
+                builder.setName(name);
+            }
 
             //pickup location
             //pickup-locationId
             Location.Builder pickupLocationBuilder = Location.Builder.newInstance();
             String pickupLocationId = shipmentConfig.getString("pickup.locationId");
-            if (pickupLocationId == null) pickupLocationId = shipmentConfig.getString("pickup.location.id");
+            if (pickupLocationId == null) {
+                pickupLocationId = shipmentConfig.getString("pickup.location.id");
+            }
             if (pickupLocationId != null) {
                 pickupLocationBuilder.setId(pickupLocationId);
             }
 
             //pickup-coord
             Coordinate pickupCoord = getCoord(shipmentConfig, "pickup.");
-            if (pickupCoord == null) pickupCoord = getCoord(shipmentConfig, "pickup.location.");
+            if (pickupCoord == null) {
+                pickupCoord = getCoord(shipmentConfig, "pickup.location.");
+            }
             if (pickupCoord != null) {
                 pickupLocationBuilder.setCoordinate(pickupCoord);
             }
 
             //pickup.location.index
             String pickupLocationIndex = shipmentConfig.getString("pickup.location.index");
-            if (pickupLocationIndex != null) pickupLocationBuilder.setIndex(Integer.parseInt(pickupLocationIndex));
+            if (pickupLocationIndex != null) {
+                pickupLocationBuilder.setIndex(Integer.parseInt(pickupLocationIndex));
+            }
             builder.setPickupLocation(pickupLocationBuilder.build());
 
             //pickup-serviceTime
             String pickupServiceTime = shipmentConfig.getString("pickup.duration");
-            if (pickupServiceTime != null) builder.setPickupServiceTime(Double.parseDouble(pickupServiceTime));
+            if (pickupServiceTime != null) {
+                builder.setPickupServiceTime(Double.parseDouble(pickupServiceTime));
+            }
 
             //pickup-tw
             List<HierarchicalConfiguration> pickupTWConfigs = shipmentConfig.configurationsAt("pickup.timeWindows.timeWindow");
@@ -417,7 +493,9 @@ private void readShipments(XMLConfiguration config) {
             //delivery-locationId
             Location.Builder deliveryLocationBuilder = Location.Builder.newInstance();
             String deliveryLocationId = shipmentConfig.getString("delivery.locationId");
-            if (deliveryLocationId == null) deliveryLocationId = shipmentConfig.getString("delivery.location.id");
+            if (deliveryLocationId == null) {
+                deliveryLocationId = shipmentConfig.getString("delivery.location.id");
+            }
             if (deliveryLocationId != null) {
                 deliveryLocationBuilder.setId(deliveryLocationId);
 //				builder.setDeliveryLocationId(deliveryLocationId);
@@ -425,19 +503,24 @@ private void readShipments(XMLConfiguration config) {
 
             //delivery-coord
             Coordinate deliveryCoord = getCoord(shipmentConfig, "delivery.");
-            if (deliveryCoord == null) deliveryCoord = getCoord(shipmentConfig, "delivery.location.");
+            if (deliveryCoord == null) {
+                deliveryCoord = getCoord(shipmentConfig, "delivery.location.");
+            }
             if (deliveryCoord != null) {
                 deliveryLocationBuilder.setCoordinate(deliveryCoord);
             }
 
             String deliveryLocationIndex = shipmentConfig.getString("delivery.location.index");
-            if (deliveryLocationIndex != null)
+            if (deliveryLocationIndex != null) {
                 deliveryLocationBuilder.setIndex(Integer.parseInt(deliveryLocationIndex));
+            }
             builder.setDeliveryLocation(deliveryLocationBuilder.build());
 
             //delivery-serviceTime
             String deliveryServiceTime = shipmentConfig.getString("delivery.duration");
-            if (deliveryServiceTime != null) builder.setDeliveryServiceTime(Double.parseDouble(deliveryServiceTime));
+            if (deliveryServiceTime != null) {
+                builder.setDeliveryServiceTime(Double.parseDouble(deliveryServiceTime));
+            }
 
             //delivery-tw
             List<HierarchicalConfiguration> deliveryTWConfigs = shipmentConfig.configurationsAt("delivery.timeWindows.timeWindow");
@@ -452,7 +535,9 @@ private void readShipments(XMLConfiguration config) {
             if (skillString != null) {
                 String cleaned = skillString.replaceAll("\\s", "");
                 String[] skillTokens = cleaned.split("[,;]");
-                for (String skill : skillTokens) builder.addRequiredSkill(skill.toLowerCase());
+                for (String skill : skillTokens) {
+                    builder.addRequiredSkill(skill.toLowerCase());
+                }
             }
 
             //build shipment
@@ -476,9 +561,13 @@ private void readServices(XMLConfiguration vrpProblem) {
         List<HierarchicalConfiguration> serviceConfigs = vrpProblem.configurationsAt("services.service");
         for (HierarchicalConfiguration serviceConfig : serviceConfigs) {
             String id = serviceConfig.getString("[@id]");
-            if (id == null) throw new IllegalArgumentException("service[@id] is missing.");
+            if (id == null) {
+                throw new IllegalArgumentException("service[@id] is missing.");
+            }
             String type = serviceConfig.getString("[@type]");
-            if (type == null) type = "service";
+            if (type == null) {
+                type = "service";
+            }
 
             String capacityString = serviceConfig.getString("capacity-demand");
             boolean capacityDimensionsExist = serviceConfig.containsKey("capacity-dimensions.dimension(0)");
@@ -486,10 +575,11 @@ private void readServices(XMLConfiguration vrpProblem) {
                 throw new IllegalArgumentException("capacity of service is not set. use 'capacity-dimensions'");
             }
             if (capacityString != null && capacityDimensionsExist) {
-                throw new IllegalArgumentException("either use capacity or capacity-dimension, not both. prefer the use of 'capacity-dimensions' over 'capacity'.");
+                throw new IllegalArgumentException(
+                        "either use capacity or capacity-dimension, not both. prefer the use of 'capacity-dimensions' over 'capacity'.");
             }
 
-            Service.Builder builder;
+            Service.BuilderBase<?, ?> builder;
             if (capacityString != null) {
                 builder = serviceBuilderFactory.createBuilder(type, id, Integer.parseInt(capacityString));
             } else {
@@ -504,7 +594,9 @@ private void readServices(XMLConfiguration vrpProblem) {
 
             //name
             String name = serviceConfig.getString("name");
-            if (name != null) builder.setName(name);
+            if (name != null) {
+                builder.setName(name);
+            }
 
             //location
             Location.Builder locationBuilder = Location.Builder.newInstance();
@@ -512,16 +604,22 @@ private void readServices(XMLConfiguration vrpProblem) {
             if (serviceLocationId == null) {
                 serviceLocationId = serviceConfig.getString("location.id");
             }
-            if (serviceLocationId != null) locationBuilder.setId(serviceLocationId);
+            if (serviceLocationId != null) {
+                locationBuilder.setId(serviceLocationId);
+            }
 
             Coordinate serviceCoord = getCoord(serviceConfig, "");
-            if (serviceCoord == null) serviceCoord = getCoord(serviceConfig, "location.");
+            if (serviceCoord == null) {
+                serviceCoord = getCoord(serviceConfig, "location.");
+            }
             if (serviceCoord != null) {
                 locationBuilder.setCoordinate(serviceCoord);
             }
 
             String locationIndex = serviceConfig.getString("location.index");
-            if (locationIndex != null) locationBuilder.setIndex(Integer.parseInt(locationIndex));
+            if (locationIndex != null) {
+                locationBuilder.setIndex(Integer.parseInt(locationIndex));
+            }
             builder.setLocation(locationBuilder.build());
 
             if (serviceConfig.containsKey("duration")) {
@@ -539,7 +637,9 @@ private void readServices(XMLConfiguration vrpProblem) {
             if (skillString != null) {
                 String cleaned = skillString.replaceAll("\\s", "");
                 String[] skillTokens = cleaned.split("[,;]");
-                for (String skill : skillTokens) builder.addRequiredSkill(skill.toLowerCase());
+                for (String skill : skillTokens) {
+                    builder.addRequiredSkill(skill.toLowerCase());
+                }
             }
 
             //build service
@@ -557,7 +657,9 @@ private void readVehiclesAndTheirTypes(XMLConfiguration vrpProblem) {
         List<HierarchicalConfiguration> typeConfigs = vrpProblem.configurationsAt("vehicleTypes.type");
         for (HierarchicalConfiguration typeConfig : typeConfigs) {
             String typeId = typeConfig.getString("id");
-            if (typeId == null) throw new IllegalArgumentException("typeId is missing.");
+            if (typeId == null) {
+                throw new IllegalArgumentException("typeId is missing.");
+            }
 
             String capacityString = typeConfig.getString("capacity");
             boolean capacityDimensionsExist = typeConfig.containsKey("capacity-dimensions.dimension(0)");
@@ -565,7 +667,8 @@ private void readVehiclesAndTheirTypes(XMLConfiguration vrpProblem) {
                 throw new IllegalArgumentException("capacity of type is not set. use 'capacity-dimensions'");
             }
             if (capacityString != null && capacityDimensionsExist) {
-                throw new IllegalArgumentException("either use capacity or capacity-dimension, not both. prefer the use of 'capacity-dimensions' over 'capacity'.");
+                throw new IllegalArgumentException(
+                        "either use capacity or capacity-dimension, not both. prefer the use of 'capacity-dimensions' over 'capacity'.");
             }
 
             VehicleTypeImpl.Builder typeBuilder;
@@ -584,19 +687,29 @@ private void readVehiclesAndTheirTypes(XMLConfiguration vrpProblem) {
             Double fix = typeConfig.getDouble("costs.fixed");
             Double timeC = typeConfig.getDouble("costs.time");
             Double distC = typeConfig.getDouble("costs.distance");
-            if(typeConfig.containsKey("costs.service")){
+            if (typeConfig.containsKey("costs.service")) {
                 Double serviceC = typeConfig.getDouble("costs.service");
-                if (serviceC != null) typeBuilder.setCostPerServiceTime(serviceC);
+                if (serviceC != null) {
+                    typeBuilder.setCostPerServiceTime(serviceC);
+                }
             }
 
-            if(typeConfig.containsKey("costs.wait")){
+            if (typeConfig.containsKey("costs.wait")) {
                 Double waitC = typeConfig.getDouble("costs.wait");
-                if (waitC != null) typeBuilder.setCostPerWaitingTime(waitC);
+                if (waitC != null) {
+                    typeBuilder.setCostPerWaitingTime(waitC);
+                }
             }
 
-            if (fix != null) typeBuilder.setFixedCost(fix);
-            if (timeC != null) typeBuilder.setCostPerTransportTime(timeC);
-            if (distC != null) typeBuilder.setCostPerDistance(distC);
+            if (fix != null) {
+                typeBuilder.setFixedCost(fix);
+            }
+            if (timeC != null) {
+                typeBuilder.setCostPerTransportTime(timeC);
+            }
+            if (distC != null) {
+                typeBuilder.setCostPerDistance(distC);
+            }
             VehicleType type = typeBuilder.build();
             String id = type.getTypeId();
             types.put(id, type);
@@ -607,10 +720,14 @@ private void readVehiclesAndTheirTypes(XMLConfiguration vrpProblem) {
         boolean doNotWarnAgain = false;
         for (HierarchicalConfiguration vehicleConfig : vehicleConfigs) {
             String vehicleId = vehicleConfig.getString("id");
-            if (vehicleId == null) throw new IllegalArgumentException("vehicleId is missing.");
+            if (vehicleId == null) {
+                throw new IllegalArgumentException("vehicleId is missing.");
+            }
             Builder builder = VehicleImpl.Builder.newInstance(vehicleId);
             String typeId = vehicleConfig.getString("typeId");
-            if (typeId == null) throw new IllegalArgumentException("typeId is missing.");
+            if (typeId == null) {
+                throw new IllegalArgumentException("typeId is missing.");
+            }
             String vType = vehicleConfig.getString("[@type]");
             if (vType != null) {
                 if (vType.equals("penalty")) {
@@ -618,7 +735,9 @@ private void readVehiclesAndTheirTypes(XMLConfiguration vrpProblem) {
                 }
             }
             VehicleType type = types.get(typeId);
-            if (type == null) throw new IllegalArgumentException("vehicleType with typeId " + typeId + " is missing.");
+            if (type == null) {
+                throw new IllegalArgumentException("vehicleType with typeId " + typeId + " is missing.");
+            }
             builder.setType(type);
 
             //read startlocation
@@ -644,7 +763,9 @@ private void readVehiclesAndTheirTypes(XMLConfiguration vrpProblem) {
                 startLocationBuilder.setCoordinate(coordinate);
             }
             String index = vehicleConfig.getString("startLocation.index");
-            if (index == null) index = vehicleConfig.getString("location.index");
+            if (index == null) {
+                index = vehicleConfig.getString("location.index");
+            }
             if (index != null) {
                 startLocationBuilder.setIndex(Integer.parseInt(index));
             }
@@ -675,13 +796,19 @@ private void readVehiclesAndTheirTypes(XMLConfiguration vrpProblem) {
                 hasEndLocation = true;
                 endLocationBuilder.setIndex(Integer.parseInt(endLocationIndex));
             }
-            if (hasEndLocation) builder.setEndLocation(endLocationBuilder.build());
+            if (hasEndLocation) {
+                builder.setEndLocation(endLocationBuilder.build());
+            }
 
             //read timeSchedule
             String start = vehicleConfig.getString("timeSchedule.start");
             String end = vehicleConfig.getString("timeSchedule.end");
-            if (start != null) builder.setEarliestStart(Double.parseDouble(start));
-            if (end != null) builder.setLatestArrival(Double.parseDouble(end));
+            if (start != null) {
+                builder.setEarliestStart(Double.parseDouble(start));
+            }
+            if (end != null) {
+                builder.setLatestArrival(Double.parseDouble(end));
+            }
 
             //read return2depot
             String returnToDepot = vehicleConfig.getString("returnToDepot");
@@ -694,7 +821,9 @@ private void readVehiclesAndTheirTypes(XMLConfiguration vrpProblem) {
             if (skillString != null) {
                 String cleaned = skillString.replaceAll("\\s", "");
                 String[] skillTokens = cleaned.split("[,;]");
-                for (String skill : skillTokens) builder.addSkill(skill.toLowerCase());
+                for (String skill : skillTokens) {
+                    builder.addSkill(skill.toLowerCase());
+                }
             }
 
             // read break
@@ -702,10 +831,10 @@ private void readVehiclesAndTheirTypes(XMLConfiguration vrpProblem) {
             if (!breakTWConfigs.isEmpty()) {
                 String breakDurationString = vehicleConfig.getString("breaks.duration");
                 String id = vehicleConfig.getString("breaks.id");
-                Break.Builder current_break = Break.Builder.newInstance(id);
+                Break.Builder current_break = new Break.Builder(id);
                 current_break.setServiceTime(Double.parseDouble(breakDurationString));
                 for (HierarchicalConfiguration twConfig : breakTWConfigs) {
-                	current_break.addTimeWindow(TimeWindow.newInstance(twConfig.getDouble("start"), twConfig.getDouble("end")));
+                    current_break.addTimeWindow(TimeWindow.newInstance(twConfig.getDouble("start"), twConfig.getDouble("end")));
                 }
                 builder.setBreak(current_break.build());
             }
diff --git a/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLWriter.java b/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLWriter.java
index 024d49586..b2ea9664e 100644
--- a/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLWriter.java
+++ b/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLWriter.java
@@ -26,6 +26,7 @@
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
@@ -162,8 +163,8 @@ private void writeInitialRoutes(XMLConf xmlConfig) {
             int actCounter = 0;
             for (TourActivity act : route.getTourActivities().getActivities()) {
                 xmlConfig.setProperty(path + "(" + routeCounter + ").act(" + actCounter + ")[@type]", act.getName());
-                if (act instanceof TourActivity.JobActivity) {
-                    Job job = ((TourActivity.JobActivity) act).getJob();
+                if (act instanceof JobActivity) {
+                    Job job = ((JobActivity) act).getJob();
                     if (job instanceof Service) {
                         xmlConfig.setProperty(path + "(" + routeCounter + ").act(" + actCounter + ").serviceId", job.getId());
                     } else if (job instanceof Shipment) {
@@ -201,8 +202,8 @@ private void writeSolutions(XMLConf xmlConfig) {
                 int actCounter = 0;
                 for (TourActivity act : route.getTourActivities().getActivities()) {
                     xmlConfig.setProperty(solutionPath + "(" + counter + ").routes.route(" + routeCounter + ").act(" + actCounter + ")[@type]", act.getName());
-                    if (act instanceof TourActivity.JobActivity) {
-                        Job job = ((TourActivity.JobActivity) act).getJob();
+                    if (act instanceof JobActivity) {
+                        Job job = ((JobActivity) act).getJob();
                         if (job instanceof Break) {
                             xmlConfig.setProperty(solutionPath + "(" + counter + ").routes.route(" + routeCounter + ").act(" + actCounter + ").breakId", job.getId());
                         } else if (job instanceof Service) {
diff --git a/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/InitialRoutesTest.java b/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/InitialRoutesTest.java
index 526bbc132..0f5d6b862 100644
--- a/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/InitialRoutesTest.java
+++ b/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/InitialRoutesTest.java
@@ -19,17 +19,18 @@
 package com.graphhopper.jsprit.io.problem;
 
 
-import com.graphhopper.jsprit.core.problem.AbstractActivity;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
+import java.util.List;
+
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.job.Service;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
-import org.junit.Test;
-
-import java.util.List;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 
 public class InitialRoutesTest {
 
@@ -70,7 +71,9 @@ public void whenReading_jobMapShouldContain_shipment4() {
     private int getNuShipments(VehicleRoutingProblem vrp) {
         int nuShipments = 0;
         for (Job job : vrp.getJobs().values()) {
-            if (job instanceof Shipment) nuShipments++;
+            if (job instanceof Shipment) {
+                nuShipments++;
+            }
         }
         return nuShipments;
     }
@@ -78,7 +81,9 @@ private int getNuShipments(VehicleRoutingProblem vrp) {
     private int getNuServices(VehicleRoutingProblem vrp) {
         int nuServices = 0;
         for (Job job : vrp.getJobs().values()) {
-            if (job instanceof Service) nuServices++;
+            if (job instanceof Service) {
+                nuServices++;
+            }
         }
         return nuServices;
     }
@@ -111,7 +116,7 @@ public void whenReading_thereShouldBeTwoActsAssociatedToShipment4() {
         VehicleRoutingProblem vrp = vrpBuilder.build();
 
         Job job = vrp.getJobs().get("4");
-        List<AbstractActivity> activities = vrp.getActivities(job);
+        List<JobActivity> activities = vrp.getActivities(job);
 
         assertEquals(2, activities.size());
     }
diff --git a/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLReaderTest.java b/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLReaderTest.java
index ce322cbdb..f46a31384 100644
--- a/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLReaderTest.java
+++ b/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLReaderTest.java
@@ -17,28 +17,32 @@
  */
 package com.graphhopper.jsprit.io.problem;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertTrue;
+
+import java.io.InputStream;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.List;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.job.Service;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverShipment;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupService;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupShipment;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverShipmentDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupServiceDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupShipmentDEPRECATED;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.util.Solutions;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.io.InputStream;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.List;
-
-import static org.junit.Assert.*;
 
 
 public class VrpXMLReaderTest {
@@ -139,14 +143,20 @@ public void whenReadingVehicles_nuSkillsOfV2ShouldBeCorrect() {
     }
 
     private Vehicle getVehicle(String string, Collection<Vehicle> vehicles) {
-        for (Vehicle v : vehicles) if (string.equals(v.getId())) return v;
+        for (Vehicle v : vehicles) {
+            if (string.equals(v.getId())) {
+                return v;
+            }
+        }
         return null;
     }
 
     private boolean idsInCollection(List<String> asList, Collection<Vehicle> vehicles) {
         List<String> ids = new ArrayList<String>(asList);
         for (Vehicle v : vehicles) {
-            if (ids.contains(v.getId())) ids.remove(v.getId());
+            if (ids.contains(v.getId())) {
+                ids.remove(v.getId());
+            }
         }
         return ids.isEmpty();
     }
@@ -182,7 +192,9 @@ public void whenReadingServices_itReadsThemCorrectly() {
         VehicleRoutingProblem vrp = builder.build();
         int servCounter = 0;
         for (Job j : vrp.getJobs().values()) {
-            if (j instanceof Service) servCounter++;
+            if (j instanceof Service) {
+                servCounter++;
+            }
         }
         assertEquals(2, servCounter);
     }
@@ -230,7 +242,9 @@ public void whenReadingShipments_itReadsThemCorrectly() {
         VehicleRoutingProblem vrp = builder.build();
         int shipCounter = 0;
         for (Job j : vrp.getJobs().values()) {
-            if (j instanceof Shipment) shipCounter++;
+            if (j instanceof Shipment) {
+                shipCounter++;
+            }
         }
         assertEquals(2, shipCounter);
     }
@@ -612,15 +626,16 @@ public void testRead_ifReaderIsCalled_itReadsSuccessfullyV2() {
         assertEquals(1, solutions.get(0).getRoutes().size());
         List<TourActivity> activities = solutions.get(0).getRoutes().iterator().next().getTourActivities().getActivities();
         assertEquals(4, activities.size());
-        assertTrue(activities.get(0) instanceof PickupService);
-        assertTrue(activities.get(1) instanceof PickupService);
-        assertTrue(activities.get(2) instanceof PickupShipment);
-        assertTrue(activities.get(3) instanceof DeliverShipment);
+        assertTrue(activities.get(0) instanceof PickupServiceDEPRECATED);
+        assertTrue(activities.get(1) instanceof PickupServiceDEPRECATED);
+        assertTrue(activities.get(2) instanceof PickupShipmentDEPRECATED);
+        assertTrue(activities.get(3) instanceof DeliverShipmentDEPRECATED);
     }
 
     @Test
     public void testRead_ifReaderIsCalled_itReadsSuccessfully() {
-        new VrpXMLReader(VehicleRoutingProblem.Builder.newInstance(), new ArrayList<VehicleRoutingProblemSolution>()).read(getClass().getResourceAsStream("lui-shen-solution.xml"));
+        new VrpXMLReader(VehicleRoutingProblem.Builder.newInstance(), new ArrayList<VehicleRoutingProblemSolution>())
+                .read(getClass().getResourceAsStream("lui-shen-solution.xml"));
         assertTrue(true);
     }
 
diff --git a/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLWriterTest.java b/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLWriterTest.java
index e75e1ba82..e84dd5f57 100644
--- a/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLWriterTest.java
+++ b/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLWriterTest.java
@@ -104,8 +104,8 @@ public void whenWritingServices_itWritesThemCorrectly() {
         builder.addVehicle(v2);
 
 
-        Service s1 = Service.Builder.newInstance("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
-        Service s2 = Service.Builder.newInstance("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
+        Service s1 = new Service.Builder("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
+        Service s2 = new Service.Builder("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
 
         VehicleRoutingProblem vrp = builder.addJob(s1).addJob(s2).build();
         new VrpXMLWriter(vrp, null).write(infileName);
@@ -125,7 +125,7 @@ public void whenWritingServices_itWritesThemCorrectly() {
     @Test
     public void shouldWriteNameOfService() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
-        Service s1 = Service.Builder.newInstance("1").setName("cleaning").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
+        Service s1 = new Service.Builder("1").setName("cleaning").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
 
         VehicleRoutingProblem vrp = builder.addJob(s1).build();
         new VrpXMLWriter(vrp, null).write(infileName);
@@ -160,11 +160,11 @@ public void shouldWriteNameOfShipment() {
     public void whenWritingServicesWithSeveralCapacityDimensions_itWritesThemCorrectly() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
 
-        Service s1 = Service.Builder.newInstance("1")
+        Service s1 = new Service.Builder("1")
             .addSizeDimension(0, 20)
             .addSizeDimension(1, 200)
             .setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
-        Service s2 = Service.Builder.newInstance("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
+        Service s2 = new Service.Builder("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
 
         VehicleRoutingProblem vrp = builder.addJob(s1).addJob(s2).build();
         new VrpXMLWriter(vrp, null).write(infileName);
@@ -624,8 +624,8 @@ public void whenWritingVehicleV1_itsStartLocationMustBeWrittenCorrectly() {
         builder.addVehicle(v1);
         builder.addVehicle(v2);
 
-        Service s1 = Service.Builder.newInstance("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
-        Service s2 = Service.Builder.newInstance("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
+        Service s1 = new Service.Builder("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
+        Service s2 = new Service.Builder("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
 
         VehicleRoutingProblem vrp = builder.addJob(s1).addJob(s2).build();
         new VrpXMLWriter(vrp, null).write(infileName);
@@ -644,7 +644,7 @@ public void whenWritingVehicleV1_itsStartLocationMustBeWrittenCorrectly() {
     public void whenWritingService_itShouldHaveTheCorrectNuSkills() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
 
-        Service s = Service.Builder.newInstance("1").addRequiredSkill("sKill1").addRequiredSkill("skill2").addSizeDimension(0, 1)
+        Service s = new Service.Builder("1").addRequiredSkill("sKill1").addRequiredSkill("skill2").addSizeDimension(0, 1)
             .setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
 
         VehicleRoutingProblem vrp = builder.addJob(s).build();
@@ -661,7 +661,7 @@ public void whenWritingService_itShouldHaveTheCorrectNuSkills() {
     public void whenWritingService_itShouldContain_skill1() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
 
-        Service s = Service.Builder.newInstance("1").addRequiredSkill("sKill1").addRequiredSkill("skill2").addSizeDimension(0, 1)
+        Service s = new Service.Builder("1").addRequiredSkill("sKill1").addRequiredSkill("skill2").addSizeDimension(0, 1)
             .setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
 
         VehicleRoutingProblem vrp = builder.addJob(s).build();
@@ -678,7 +678,7 @@ public void whenWritingService_itShouldContain_skill1() {
     public void whenWritingService_itShouldContain_skill2() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
 
-        Service s = Service.Builder.newInstance("1").addRequiredSkill("sKill1").addRequiredSkill("skill2").addSizeDimension(0, 1)
+        Service s = new Service.Builder("1").addRequiredSkill("sKill1").addRequiredSkill("skill2").addSizeDimension(0, 1)
             .setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
 
         VehicleRoutingProblem vrp = builder.addJob(s).build();
@@ -704,8 +704,8 @@ public void whenWritingVehicleV1_itDoesNotReturnToDepotMustBeWrittenCorrectly()
         builder.addVehicle(v1);
         builder.addVehicle(v2);
 
-        Service s1 = Service.Builder.newInstance("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
-        Service s2 = Service.Builder.newInstance("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
+        Service s1 = new Service.Builder("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
+        Service s2 = new Service.Builder("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
 
         VehicleRoutingProblem vrp = builder.addJob(s1).addJob(s2).build();
         new VrpXMLWriter(vrp, null).write(infileName);
@@ -730,8 +730,8 @@ public void whenWritingVehicleV1_readingAgainAssignsCorrectType() {
         builder.addVehicle(v1);
         builder.addVehicle(v2);
 
-        Service s1 = Service.Builder.newInstance("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
-        Service s2 = Service.Builder.newInstance("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
+        Service s1 = new Service.Builder("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
+        Service s2 = new Service.Builder("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
 
         VehicleRoutingProblem vrp = builder.addJob(s1).addJob(s2).build();
         new VrpXMLWriter(vrp, null).write(infileName);
@@ -756,8 +756,8 @@ public void whenWritingVehicleV2_readingAgainAssignsCorrectType() {
         builder.addVehicle(v1);
         builder.addVehicle(v2);
 
-        Service s1 = Service.Builder.newInstance("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
-        Service s2 = Service.Builder.newInstance("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
+        Service s1 = new Service.Builder("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
+        Service s2 = new Service.Builder("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
 
         VehicleRoutingProblem vrp = builder.addJob(s1).addJob(s2).build();
         new VrpXMLWriter(vrp, null).write(infileName);
@@ -786,8 +786,8 @@ public void whenWritingVehicleV2_readingItsLocationsAgainReturnsCorrectLocations
         builder.addVehicle(v1);
         builder.addVehicle(v2);
 
-        Service s1 = Service.Builder.newInstance("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
-        Service s2 = Service.Builder.newInstance("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
+        Service s1 = new Service.Builder("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
+        Service s2 = new Service.Builder("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
 
         VehicleRoutingProblem vrp = builder.addJob(s1).addJob(s2).build();
         new VrpXMLWriter(vrp, null).write(infileName);
@@ -816,8 +816,8 @@ public void whenWritingVehicleV2_readingItsLocationsCoordsAgainReturnsCorrectLoc
         builder.addVehicle(v1);
         builder.addVehicle(v2);
 
-        Service s1 = Service.Builder.newInstance("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
-        Service s2 = Service.Builder.newInstance("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
+        Service s1 = new Service.Builder("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
+        Service s2 = new Service.Builder("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
 
         VehicleRoutingProblem vrp = builder.addJob(s1).addJob(s2).build();
         new VrpXMLWriter(vrp, null).write(infileName);
@@ -904,8 +904,8 @@ public void solutionWithoutUnassignedJobsShouldBeWrittenCorrectly() {
         VehicleImpl v1 = VehicleImpl.Builder.newInstance("v1").setStartLocation(TestUtils.loc("loc")).setType(type1).build();
         builder.addVehicle(v1);
 
-        Service s1 = Service.Builder.newInstance("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
-        Service s2 = Service.Builder.newInstance("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
+        Service s1 = new Service.Builder("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
+        Service s2 = new Service.Builder("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
 
         VehicleRoutingProblem vrp = builder.addJob(s1).addJob(s2).build();
 
@@ -935,8 +935,8 @@ public void solutionWithUnassignedJobsShouldBeWrittenCorrectly() {
         VehicleImpl v1 = VehicleImpl.Builder.newInstance("v1").setStartLocation(TestUtils.loc("loc")).setType(type1).build();
         builder.addVehicle(v1);
 
-        Service s1 = Service.Builder.newInstance("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
-        Service s2 = Service.Builder.newInstance("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
+        Service s1 = new Service.Builder("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
+        Service s2 = new Service.Builder("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
 
         VehicleRoutingProblem vrp = builder.addJob(s1).addJob(s2).build();
 
