diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/DefaultScorer.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/DefaultScorer.java
index 280de34d2..5c6926a4f 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/DefaultScorer.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/DefaultScorer.java
@@ -21,8 +21,7 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 
 /**
  * Created by schroeder on 15/10/15.
@@ -42,53 +41,75 @@ public DefaultScorer(VehicleRoutingProblem vrp) {
     }
 
     public void setTimeWindowParam(double tw_param) {
-        this.timeWindowParam = tw_param;
+        timeWindowParam = tw_param;
     }
 
     public void setDepotDistanceParam(double depotDistance_param) {
-        this.depotDistanceParam = depotDistance_param;
+        depotDistanceParam = depotDistance_param;
     }
 
     @Override
     public double score(InsertionData best, Job job) {
-        double score;
-        if (job instanceof Service) {
-            score = scoreService(best, job);
-        } else if (job instanceof Shipment) {
-            score = scoreShipment(best, job);
-        } else throw new IllegalStateException("not supported");
-        return score;
-    }
-
-    private double scoreShipment(InsertionData best, Job job) {
-        Shipment shipment = (Shipment) job;
-        double maxDepotDistance_1 = Math.max(
-            getDistance(best.getSelectedVehicle().getStartLocation(), shipment.getPickupLocation()),
-            getDistance(best.getSelectedVehicle().getStartLocation(), shipment.getDeliveryLocation())
-        );
-        double maxDepotDistance_2 = Math.max(
-            getDistance(best.getSelectedVehicle().getEndLocation(), shipment.getPickupLocation()),
-            getDistance(best.getSelectedVehicle().getEndLocation(), shipment.getDeliveryLocation())
-        );
-        double maxDepotDistance = Math.max(maxDepotDistance_1, maxDepotDistance_2);
-        double minTimeToOperate = Math.min(shipment.getPickupTimeWindow().getEnd() - shipment.getPickupTimeWindow().getStart(),
-            shipment.getDeliveryTimeWindow().getEnd() - shipment.getDeliveryTimeWindow().getStart());
+        Vehicle selectedVehicle = best.getSelectedVehicle();
+        double maxFromStart = job.getAllLocations().stream()
+                .mapToDouble(l -> getDistance(selectedVehicle.getStartLocation(), l))
+                .max()
+                .orElse(0d);
+        double maxToEnd = job.getAllLocations().stream()
+                .mapToDouble(l -> getDistance(selectedVehicle.getEndLocation(), l))
+                .max()
+                .orElse(0d);
+        double maxDepotDistance = Math.max(maxFromStart, maxToEnd);
+        double minTimeToOperate = job.getOperationTimeWindows().stream()
+                .mapToDouble(tw -> tw.getEnd() - tw.getStart())
+                .min()
+                .orElse(0d);
         return Math.max(timeWindowParam * minTimeToOperate, minTimeWindowScore) + depotDistanceParam * maxDepotDistance;
     }
-
-    private double scoreService(InsertionData best, Job job) {
-        Location location = ((Service) job).getLocation();
-        double maxDepotDistance = 0;
-        if (location != null) {
-            maxDepotDistance = Math.max(
-                getDistance(best.getSelectedVehicle().getStartLocation(), location),
-                getDistance(best.getSelectedVehicle().getEndLocation(), location)
-            );
-        }
-        return Math.max(timeWindowParam * (((Service) job).getTimeWindow().getEnd() - ((Service) job).getTimeWindow().getStart()), minTimeWindowScore) +
-            depotDistanceParam * maxDepotDistance;
-    }
-
+//
+//        double score;
+//        if (job instanceofx Service) {
+//            score = scoreService(best, job);
+//        } else if (job instanceofx Shipment) {
+//            score = scoreShipment(best, job);
+//        } else {
+//            throw new IllegalStateException("not supported");
+//        }
+//        System.out.format("OLD SCORE: %6.2f   NEW SCORE: %6.2f    PASS: %s\n", score, calculateScore(best, job),
+//                (score == calculateScore(best, job) ? "true" : "false"));
+//        return score;
+//    }
+//
+//
+//    private double scoreShipment(InsertionData best, Job job) {
+//        Shipment shipment = (Shipment) job;
+//        double maxDepotDistance_1 = Math.max(
+//                getDistance(best.getSelectedVehicle().getStartLocation(), shipment.getPickupLocation()),
+//                getDistance(best.getSelectedVehicle().getStartLocation(), shipment.getDeliveryLocation())
+//                );
+//        double maxDepotDistance_2 = Math.max(
+//                getDistance(best.getSelectedVehicle().getEndLocation(), shipment.getPickupLocation()),
+//                getDistance(best.getSelectedVehicle().getEndLocation(), shipment.getDeliveryLocation())
+//                );
+//        double maxDepotDistance = Math.max(maxDepotDistance_1, maxDepotDistance_2);
+//        double minTimeToOperate = Math.min(shipment.getPickupTimeWindow().getEnd() - shipment.getPickupTimeWindow().getStart(),
+//                shipment.getDeliveryTimeWindow().getEnd() - shipment.getDeliveryTimeWindow().getStart());
+//        return Math.max(timeWindowParam * minTimeToOperate, minTimeWindowScore) + depotDistanceParam * maxDepotDistance;
+//    }
+//
+//    private double scoreService(InsertionData best, Job job) {
+//        Location location = ((Service) job).getLocation();
+//        double maxDepotDistance = 0;
+//        if (location != null) {
+//            maxDepotDistance = Math.max(
+//                    getDistance(best.getSelectedVehicle().getStartLocation(), location),
+//                    getDistance(best.getSelectedVehicle().getEndLocation(), location)
+//                    );
+//        }
+//        return Math.max(timeWindowParam * (((Service) job).getTimeWindow().getEnd() - ((Service) job).getTimeWindow().getStart()), minTimeWindowScore) +
+//                depotDistanceParam * maxDepotDistance;
+//    }
+//
 
     private double getDistance(Location loc1, Location loc2) {
         return vrp.getTransportCosts().getTransportCost(loc1, loc2, 0., null, null);
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/AvgServiceAndShipmentDistance.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/AvgServiceAndShipmentDistance.java
index 7b73efdaf..cc97b2a8e 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/AvgServiceAndShipmentDistance.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/AvgServiceAndShipmentDistance.java
@@ -61,10 +61,10 @@ public double getDistance(Job i, Job j) {
         }
 
         // TODO: Do we really need these checks after the refactor?
-//      if (!(i instanceof Service || i instanceof Shipment || i instanceof ShipmentWithBackhaul)) {
+//      if (!(i instanceof Service || i instanceofx Shipment || i instanceofx ShipmentWithBackhaul)) {
 //          throw new IllegalStateException("this supports only shipments or services");
 //      }
-//      if (!(j instanceof Service || j instanceof Shipment || j instanceof ShipmentWithBackhaul)) {
+//      if (!(j instanceof Service || j instanceofx Shipment || j instanceofx ShipmentWithBackhaul)) {
 //          throw new IllegalStateException("this supports only shipments or services");
 //      }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractJob.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractJob.java
index f28e0f6a1..7c7a6e44d 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractJob.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractJob.java
@@ -19,9 +19,12 @@
 package com.graphhopper.jsprit.core.problem.job;
 
 import java.util.ArrayList;
+import java.util.HashSet;
 import java.util.List;
+import java.util.Set;
 
 import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 
 /**
  * Created by schroeder on 14.07.14.
@@ -34,6 +37,8 @@
 
     private JobActivityList activityList;
 
+    protected Set<TimeWindow> operationTimeWindows = new HashSet<>();
+
     public AbstractJob() {
         super();
         activityList = new SequentialJobActivityList(this);
@@ -63,6 +68,8 @@ protected void addLocation(Location location) {
 
     protected abstract void createActivities();
 
+    protected abstract void addOperationTimeWindows();
+
     protected void setActivities(JobActivityList list) {
         activityList = list;
     }
@@ -72,4 +79,9 @@ public JobActivityList getActivityList() {
         return activityList;
     }
 
+
+    public Set<TimeWindow> getOperationTimeWindows() {
+        return operationTimeWindows;
+    }
+
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Job.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Job.java
index a3d3a0c01..5dfeb60ab 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Job.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Job.java
@@ -19,12 +19,14 @@
 
 
 import java.util.List;
+import java.util.Set;
 
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.HasId;
 import com.graphhopper.jsprit.core.problem.HasIndex;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.Skills;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 
 /**
  * Basic interface for all jobs.
@@ -79,4 +81,9 @@
      */
     public JobActivityList getActivityList();
 
+    /**
+     * @return All operation time windows
+     */
+    public Set<TimeWindow> getOperationTimeWindows();
+
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java
index d04fa81d4..95b1cc3a6 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java
@@ -252,6 +252,7 @@ public B setPriority(int priority) {
             // initiate caches
             service.addLocations();
             service.createActivities();
+            service.addOperationTimeWindows();
         }
     }
 
@@ -328,7 +329,13 @@ protected void createActivities() {
         setActivities(list);
     }
 
+    @Override
+    protected void addOperationTimeWindows() {
+        operationTimeWindows.add(getTimeWindow());
+    }
 
+
+    @Override
     protected void addLocations() {
         addLocation(location);
     }
@@ -450,4 +457,7 @@ public int getPriority() {
         return priority;
     }
 
+
+
+
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java
index e355ee0f2..62fdb119d 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java
@@ -366,6 +366,7 @@ protected void preProcess() {
             // initiate caches
             shipment.addLocations();
             shipment.createActivities();
+            shipment.addOperationTimeWindows();
         }
 
     }
@@ -417,6 +418,11 @@ protected void createActivities() {
         setActivities(list);
     }
 
+    @Override
+    protected void addOperationTimeWindows() {
+        operationTimeWindows.add(getPickupTimeWindow());
+        operationTimeWindows.add(getDeliveryTimeWindow());
+    }
 
     @Override
     protected void addLocations() {
