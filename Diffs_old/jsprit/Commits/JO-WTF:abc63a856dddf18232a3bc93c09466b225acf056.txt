diff --git a/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLReader.java b/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLReader.java
index 504d39c44..1f2e4633f 100644
--- a/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLReader.java
+++ b/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLReader.java
@@ -249,9 +249,9 @@ private void readInitialRoutes(XMLConfiguration xmlConfig) {
 
     }
 
-    private void readSolutions(XMLConfiguration vrpProblem) {
+    private void readSolutions(XMLConfiguration xmlConfig) {
         if (solutions == null) return;
-        List<HierarchicalConfiguration> solutionConfigs = vrpProblem.configurationsAt("solutions.solution");
+        List<HierarchicalConfiguration> solutionConfigs = xmlConfig.configurationsAt("solutions.solution");
         for (HierarchicalConfiguration solutionConfig : solutionConfigs) {
             String totalCost = solutionConfig.getString("cost");
             double cost = -1;
@@ -324,6 +324,89 @@ private void readSolutions(XMLConfiguration vrpProblem) {
         }
     }
 
+    public Collection<VehicleRoutingProblemSolution> readSolutions(VehicleRoutingProblem vrp,String filename) {
+        XMLConfiguration xmlConfig = createXMLConfiguration();
+        try {
+            xmlConfig.load(filename);
+        } catch (ConfigurationException e) {
+            throw new RuntimeException(e);
+        }
+        if (solutions == null) {
+            solutions = new ArrayList<>();
+        }
+        List<HierarchicalConfiguration> solutionConfigs = xmlConfig.configurationsAt("solutions.solution");
+        for (HierarchicalConfiguration solutionConfig : solutionConfigs) {
+            String totalCost = solutionConfig.getString("cost");
+            double cost = -1;
+            if (totalCost != null) cost = Double.parseDouble(totalCost);
+            List<HierarchicalConfiguration> routeConfigs = solutionConfig.configurationsAt("routes.route");
+            List<VehicleRoute> routes = new ArrayList<VehicleRoute>();
+            for (HierarchicalConfiguration routeConfig : routeConfigs) {
+                //! here, driverId is set to noDriver, no matter whats in driverId.
+                Driver driver = DriverImpl.noDriver();
+                String vehicleId = routeConfig.getString("vehicleId");
+                Vehicle vehicle = getVehicle(vehicleId);
+                if (vehicle == null) throw new IllegalArgumentException("vehicle is missing.");
+                String start = routeConfig.getString("start");
+                if (start == null) throw new IllegalArgumentException("route start-time is missing.");
+                double departureTime = Double.parseDouble(start);
+
+                String end = routeConfig.getString("end");
+                if (end == null) throw new IllegalArgumentException("route end-time is missing.");
+
+                VehicleRoute.Builder routeBuilder = VehicleRoute.Builder.newInstance(vehicle, driver);
+                routeBuilder.setJobActivityFactory(vrp.getJobActivityFactory());
+                routeBuilder.setDepartureTime(departureTime);
+                List<HierarchicalConfiguration> actConfigs = routeConfig.configurationsAt("act");
+                for (HierarchicalConfiguration actConfig : actConfigs) {
+                    String type = actConfig.getString("[@type]");
+                    if (type == null) throw new IllegalArgumentException("act[@type] is missing.");
+                    double arrTime = 0.;
+                    double endTime = 0.;
+                    String arrTimeS = actConfig.getString("arrTime");
+                    if (arrTimeS != null) arrTime = Double.parseDouble(arrTimeS);
+                    String endTimeS = actConfig.getString("endTime");
+                    if (endTimeS != null) endTime = Double.parseDouble(endTimeS);
+                    if (type.equals("break")) {
+                        Break currentbreak = getBreak(vehicleId);
+                        routeBuilder.addBreak(currentbreak);
+                    } else {
+                        String serviceId = actConfig.getString("serviceId");
+                        if (serviceId != null) {
+                            Service service = getService(serviceId);
+                            routeBuilder.addService(service);
+                        } else {
+                            String shipmentId = actConfig.getString("shipmentId");
+                            if (shipmentId == null)
+                                throw new IllegalArgumentException("either serviceId or shipmentId is missing");
+                            Shipment shipment = getShipment(shipmentId);
+                            if (shipment == null)
+                                throw new IllegalArgumentException("shipment with id " + shipmentId + " does not exist.");
+                            if (type.equals("pickupShipment")) {
+                                routeBuilder.addPickup(shipment);
+                            } else if (type.equals("deliverShipment")) {
+                                routeBuilder.addDelivery(shipment);
+                            } else
+                                throw new IllegalArgumentException("type " + type + " is not supported. Use 'pickupShipment' or 'deliverShipment' here");
+                        }
+                    }
+                }
+                routes.add(routeBuilder.build());
+            }
+            VehicleRoutingProblemSolution solution = new VehicleRoutingProblemSolution(routes, cost);
+            List<HierarchicalConfiguration> unassignedJobConfigs = solutionConfig.configurationsAt("unassignedJobs.job");
+            for (HierarchicalConfiguration unassignedJobConfig : unassignedJobConfigs) {
+                String jobId = unassignedJobConfig.getString("[@id]");
+                Job job = getShipment(jobId);
+                if (job == null) job = getService(jobId);
+                if (job == null) throw new IllegalArgumentException("cannot find unassignedJob with id " + jobId);
+                solution.getUnassignedJobs().add(job);
+            }
+            solutions.add(solution);
+        }
+        return solutions;
+    }
+
     private Shipment getShipment(String shipmentId) {
         return shipmentMap.get(shipmentId);
     }
@@ -683,6 +766,12 @@ private void readVehiclesAndTheirTypes(XMLConfiguration vrpProblem) {
             if (start != null) builder.setEarliestStart(Double.parseDouble(start));
             if (end != null) builder.setLatestArrival(Double.parseDouble(end));
 
+            // read latestArrival
+            String latestArrival = vehicleConfig.getString("latestArrival");
+            if (latestArrival != null) {
+                builder.setLatestArrival(Double.parseDouble(latestArrival));
+            }
+
             //read return2depot
             String returnToDepot = vehicleConfig.getString("returnToDepot");
             if (returnToDepot != null) {
