diff --git a/.settings/org.eclipse.core.resources.prefs b/.settings/org.eclipse.core.resources.prefs
new file mode 100644
index 000000000..99f26c020
--- /dev/null
+++ b/.settings/org.eclipse.core.resources.prefs
@@ -0,0 +1,2 @@
+eclipse.preferences.version=1
+encoding/<project>=UTF-8
diff --git a/.settings/org.eclipse.m2e.core.prefs b/.settings/org.eclipse.m2e.core.prefs
new file mode 100644
index 000000000..f897a7f1c
--- /dev/null
+++ b/.settings/org.eclipse.m2e.core.prefs
@@ -0,0 +1,4 @@
+activeProfiles=
+eclipse.preferences.version=1
+resolveWorkspaceProjects=true
+version=1
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/EuclideanDistanceCalculator.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/EuclideanDistanceCalculator.java
index 4ee5c91d0..184d5cceb 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/EuclideanDistanceCalculator.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/EuclideanDistanceCalculator.java
@@ -26,4 +26,24 @@ public static double calculateDistance(Coordinate coord1, Coordinate coord2) {
         return Math.sqrt((xDiff * xDiff) + (yDiff * yDiff));
     }
 
+public static double haversineDistance(Coordinate coord1, Coordinate coord2){
+    	
+    	double lat1 = coord1.getY();
+    	double lon1 = coord1.getX();
+    	double lat2 = coord2.getY();
+    	double lon2 = coord2.getX();
+    	
+        final int R = 6371; // Radius of the earth
+
+        double latDistance = Math.toRadians(lat2 - lat1);
+        double lonDistance = Math.toRadians(lon2 - lon1);
+        double a = Math.sin(latDistance / 2) * Math.sin(latDistance / 2)
+                + Math.cos(Math.toRadians(lat1)) * Math.cos(Math.toRadians(lat2))
+                * Math.sin(lonDistance / 2) * Math.sin(lonDistance / 2);
+        double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
+        double distance = R * c ; // Get Distance in KM
+        distance = Math.pow(distance, 2);
+
+        return Math.sqrt(distance);
+    }
 }
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExample.java
index 8cf9f200f..f8ec9f0b9 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExample.java
@@ -23,20 +23,44 @@
 import com.graphhopper.jsprit.core.algorithm.VehicleRoutingAlgorithm;
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.algorithm.box.SchrimpfFactory;
+import com.graphhopper.jsprit.core.analysis.SolutionAnalyser;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
+import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
+import com.graphhopper.jsprit.core.problem.cost.TransportDistance;
+import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
+import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.job.Service;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
+import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivities;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
+import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl.Builder;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.reporting.SolutionPrinter;
+import com.graphhopper.jsprit.core.util.Coordinate;
+import com.graphhopper.jsprit.core.util.EuclideanDistanceCalculator;
 import com.graphhopper.jsprit.core.util.Solutions;
+import com.graphhopper.jsprit.core.util.UnassignedJobReasonTracker;
+import com.graphhopper.jsprit.core.util.VehicleRoutingTransportCostsMatrix;
 import com.graphhopper.jsprit.io.problem.VrpXMLWriter;
 
 import java.io.File;
+import java.math.BigDecimal;
+import java.math.RoundingMode;
+import java.security.cert.CertPathValidatorException.Reason;
+import java.sql.DriverManager;
+import java.text.DateFormat;
+import java.text.DecimalFormat;
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
 import java.util.Collection;
+import java.util.Date;
+import java.util.Iterator;
+import java.util.TimeZone;
 
 
 public class SimpleExample {
@@ -46,7 +70,7 @@ public static void main(String[] args) {
         /*
          * some preparation - create output folder
 		 */
-        File dir = new File("output");
+        File dir = new File("D:\\output");
         // if the directory does not exist, create it
         if (!dir.exists()) {
             System.out.println("creating directory ./output");
@@ -54,65 +78,219 @@ public static void main(String[] args) {
             if (result) System.out.println("./output created");
         }
 
+        
 		/*
-         * get a vehicle type-builder and build a type with the typeId "vehicleType" and one capacity dimension, i.e. weight, and capacity dimension value of 2
+         * get a vehicle type-builder and build a type with the typeId "vehicleType" and one capacity dimension,
+         *  i.e. weight, and capacity dimension value of 2
 		 */
-        final int WEIGHT_INDEX = 0;
-        VehicleTypeImpl.Builder vehicleTypeBuilder = VehicleTypeImpl.Builder.newInstance("vehicleType").addCapacityDimension(WEIGHT_INDEX, 2);
+        final int EF_CASES_INDEX = 0;
+        final int KGs_INDEX = 1;
+     
+        VehicleTypeImpl.Builder vehicleTypeBuilder = VehicleTypeImpl.Builder.newInstance("vehicleType")
+        		.addCapacityDimension(EF_CASES_INDEX, 150).setCostPerDistance(1.5).setCostPerWaitingTime(1);
         VehicleType vehicleType = vehicleTypeBuilder.build();
+        
 
 		/*
          * get a vehicle-builder and build a vehicle located at (10,10) with type "vehicleType"
 		 */
         Builder vehicleBuilder = VehicleImpl.Builder.newInstance("vehicle");
-        vehicleBuilder.setStartLocation(Location.newInstance(10, 10));
+        vehicleBuilder.setStartLocation(Location.newInstance(55.218592 , 25.120694));
         vehicleBuilder.setType(vehicleType);
+        vehicleBuilder.setEarliestStart(36000);
         VehicleImpl vehicle = vehicleBuilder.build();
+        
+        Builder vehicleBuilder2 = VehicleImpl.Builder.newInstance("vehicle2");
+        vehicleBuilder2.setStartLocation(Location.newInstance(55.218592 , 25.120694));
+        vehicleBuilder2.setType(vehicleType);
+        vehicleBuilder2.setEarliestStart(36000);
+        VehicleImpl vehicle2= vehicleBuilder2.build();
+        
+        
+        
+
+        
 
 		/*
-         * build services at the required locations, each with a capacity-demand of 1.
+         * build services at the required locations
 		 */
-        Service service1 = Service.Builder.newInstance("1").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 7)).build();
-        Service service2 = Service.Builder.newInstance("2").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 13)).build();
-
-        Service service3 = Service.Builder.newInstance("3").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(15, 7)).build();
-        Service service4 = Service.Builder.newInstance("4").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(15, 13)).build();
 
+        
+        Service[] TEST = new Service[17];
+        
+        TEST[0] = 	 Service.Builder.newInstance("	service	23701	").addSizeDimension(EF_CASES_INDEX,	15	).setLocation(Location.newInstance(	55.211757	,	25.119589	)).setServiceTime(	24*60	).build();
+        TEST[1] = 	 Service.Builder.newInstance("	service	53540	").addSizeDimension(EF_CASES_INDEX,	14	).setLocation(Location.newInstance(	55.218052	,	25.119516	)).setServiceTime(	19*60	).build();
+        TEST[2] = 	 Service.Builder.newInstance("	service	21448	").addSizeDimension(EF_CASES_INDEX,	6	).setLocation(Location.newInstance(	55.218988	,	25.117471	)).setServiceTime(	16*60	).build();
+        TEST[3] = 	 Service.Builder.newInstance("	service	20915	").addSizeDimension(EF_CASES_INDEX,	11	).setLocation(Location.newInstance(	55.220602	,	25.121627	)).setServiceTime(	21*60	).build();
+        TEST[4] = 	 Service.Builder.newInstance("	service	21348	").addSizeDimension(EF_CASES_INDEX,	13	).setLocation(Location.newInstance(	55.231741	,	25.115342	)).setServiceTime(	17*60	).build();
+        TEST[5] = 	 Service.Builder.newInstance("	service	53500	").addSizeDimension(EF_CASES_INDEX,	63	).setLocation(Location.newInstance(	55.241969	,	25.12303	)).setServiceTime(	42*60	).build();
+        TEST[6] = 	 Service.Builder.newInstance("	service	20440	").addSizeDimension(EF_CASES_INDEX,	2	).setLocation(Location.newInstance(	55.227443	,	25.132406	)).setServiceTime(	13*60	).build();
+        TEST[7] = 	 Service.Builder.newInstance("	service	20743	").addSizeDimension(EF_CASES_INDEX,	15	).setLocation(Location.newInstance(	55.220637	,	25.140704	)).setServiceTime(	23*60	).build();
+        TEST[8] = 	 Service.Builder.newInstance("	service	22062	").addSizeDimension(EF_CASES_INDEX,	5	).setLocation(Location.newInstance(	55.229589	,	25.138764	)).setServiceTime(	11*60	).build();
+        TEST[9] = 	 Service.Builder.newInstance("	service	23484	").addSizeDimension(EF_CASES_INDEX,	1	).setLocation(Location.newInstance(	55.228682	,	25.145966	)).setServiceTime(	14*60	).build();
+        TEST[10] = 	 Service.Builder.newInstance("	service	23345	").addSizeDimension(EF_CASES_INDEX,	6	).setLocation(Location.newInstance(	55.188095	,	25.133576	)).setServiceTime(	16*60	).setPriority(3).build();
+        TEST[11] = 	 Service.Builder.newInstance("	service	21595	").addSizeDimension(EF_CASES_INDEX,	3	).setLocation(Location.newInstance(	55.185696	,	25.135844	)).setServiceTime(	12*60	).build();
+        TEST[12] = 	 Service.Builder.newInstance("	service	52180	").addSizeDimension(EF_CASES_INDEX,	2	).setLocation(Location.newInstance(	55.190307	,	25.144974	)).setServiceTime(	10*60	).build();
+        TEST[13] = 	 Service.Builder.newInstance("	service	58977	").addSizeDimension(EF_CASES_INDEX,	52	).setLocation(Location.newInstance(	55.216751	,	25.17118	)).setServiceTime(	34*60	).build();
+        TEST[14] = 	 Service.Builder.newInstance("	service	51153	").addSizeDimension(EF_CASES_INDEX,	1	).setLocation(Location.newInstance(	55.2282	    ,	25.1687	    )).setServiceTime(	11*60	).build();
+        TEST[15] = 	 Service.Builder.newInstance("	service	58306	").addSizeDimension(EF_CASES_INDEX,	6	).setLocation(Location.newInstance(	55.26152	,	25.171835	)).setServiceTime(	20*60	).build();
+        TEST[16] = 	 Service.Builder.newInstance("	service	58150	").addSizeDimension(EF_CASES_INDEX,	5	).setLocation(Location.newInstance(	55.229204	,	25.186234	)).setServiceTime(	13*60   ).build();
 
+        
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
-        vrpBuilder.addVehicle(vehicle);
-        vrpBuilder.addJob(service1).addJob(service2).addJob(service3).addJob(service4);
-
-        VehicleRoutingProblem problem = vrpBuilder.build();
+        vrpBuilder.setFleetSize(FleetSize.FINITE);
+        vrpBuilder.addVehicle(vehicle).addVehicle(vehicle2);
+ 
+        for (int i = 0; i < TEST.length; i++) {
+        	vrpBuilder.addJob(TEST[i]);
+        }
+        
+    
+        
+        
+        
+        //vrpBuilder.addJob(service1).addJob(service2).addJob(service3).addJob(service4).addJob(service5).addJob(service6).addJob(service7).addJob(service8);
+        
+        //builds a matrix based on euclidean distances; t_ij = euclidean(i,j) / 2; d_ij = euclidean(i,j);
+        VehicleRoutingTransportCostsMatrix costMatrix = createMatrix(vrpBuilder,true,true);
+        vrpBuilder.setRoutingCost(costMatrix);
+       
+        final VehicleRoutingProblem problem = vrpBuilder.build();
 
 		/*
          * get the algorithm out-of-the-box.
 		 */
         VehicleRoutingAlgorithm algorithm = Jsprit.createAlgorithm(problem);
+        algorithm.setMaxIterations(500); //Set maximum iterations to 5000 instead of 2000
+        
+        
 
 		/*
          * and search a solution
 		 */
         Collection<VehicleRoutingProblemSolution> solutions = algorithm.searchSolutions();
+        
 
 		/*
          * get the best
 		 */
+        
+        
         VehicleRoutingProblemSolution bestSolution = Solutions.bestOf(solutions);
-
-        new VrpXMLWriter(problem, solutions).write("output/problem-with-solution.xml");
+        
+        
+        UnassignedJobReasonTracker reasonTracker = new UnassignedJobReasonTracker();
+        algorithm.addListener(reasonTracker);
+        
+        
+        
+        //Add solution analyser object and override constructor
+        SolutionAnalyser solAnylser = new SolutionAnalyser(problem,bestSolution,new TransportDistance()
+        		{
+        			@Override
+        			public double getDistance(Location from, Location to, double departureTime, Vehicle vehicle)
+        			{
+        				return problem.getTransportCosts().getTransportCost(from, to, 0., null, null);
+        			}
+        		});
+        //Get distance per route
+        System.out.print("Distance per route:");
+        for (VehicleRoute route : bestSolution.getRoutes()) {
+        System.out.print(solAnylser.getDistance(route) + " , ");
+        }
+        //Get distance for entire solution:
+        System.out.print("Total Distance: " + solAnylser.getDistance());
+        
+        
+        
+       
+        new VrpXMLWriter(problem, solutions).write("D:\\output/problem-with-solution.xml");
 
         SolutionPrinter.print(problem, bestSolution, SolutionPrinter.Print.VERBOSE);
 
 		/*
          * plot
 		 */
-        new Plotter(problem,bestSolution).plot("output/plot.png","simple example");
+        new Plotter(problem,bestSolution).plot("D:\\output/plot.png","simple example");
 
         /*
         render problem and solution with GraphStream
          */
-        new GraphStreamViewer(problem, bestSolution).labelWith(Label.ID).setRenderDelay(200).display();
+        new GraphStreamViewer(problem, bestSolution).labelWith(Label.ID).setRenderDelay(0).display();
+        
+        reasonTracker.getMostLikelyReason(" 	service	23701	 ").toString();
     }
 
+    
+    
+    private static double ConvertTimeToSeconds(String stringDate)
+    {
+    	DateFormat df = new SimpleDateFormat("HH:mm");
+    	df.setTimeZone(TimeZone.getTimeZone("GST"));
+    	Date date = null;
+		try {
+			date = df.parse(stringDate);
+			
+		} catch (ParseException e) {
+			
+			e.printStackTrace();
+		}
+		
+    	return date.getTime()/1000L;
+    }
+    
+    
+    //Function to create straight line distance and create cost matrix, note: Transport time calculation below needs to be changed.
+    private static VehicleRoutingTransportCostsMatrix createMatrix(VehicleRoutingProblem.Builder vrpBuilder , boolean useTravelModel , boolean useTravelTimeModel) 
+    {
+    	double speed, fixedTime = 180 , distance = 0.0; // Fixed time 3 minutes for travel time. 
+    	
+        VehicleRoutingTransportCostsMatrix.Builder costMatrixBuilder = VehicleRoutingTransportCostsMatrix.Builder.newInstance(true);
+        for (String from : vrpBuilder.getLocationMap().keySet()) {
+            for (String to : vrpBuilder.getLocationMap().keySet()) {
+                Coordinate fromCoord = vrpBuilder.getLocationMap().get(from);
+                Coordinate toCoord = vrpBuilder.getLocationMap().get(to);
+                distance =   (EuclideanDistanceCalculator.haversineDistance(fromCoord, toCoord));
+                
+                //Add travel model calculations, distance values and factors should be configurable.
+                if (useTravelModel == true)
+                {
+	                if (distance < 10)
+	                	distance *= 1.37;
+	                else if (distance <50)
+	                		distance *= 1.26;
+	                else if (distance < 100)
+	                		distance *= 1.15;
+	                else distance *= 1.04;
+	            }
+                
+                //Add travel time model calculations, distance values and speeds should be configurable.
+                if (useTravelTimeModel == true)
+                {
+                	if (distance < 2)
+	                	speed = 33.7962;  //KM per H
+	                else if (distance <5)
+	                		speed = 48.2803;
+	                else if (distance < 10)
+	                		speed = 59.5457;
+	                else if (distance < 20)
+	                		speed = 69.2018;
+	                else if (distance < 40)
+                			speed = 77.2485;
+	                else speed = 83.6859;
+                }
+                else speed = 33;    //default speed value as per smallest segment in Travel time model.
+                
+                
+                costMatrixBuilder.addTransportDistance(from, to, distance);
+                costMatrixBuilder.addTransportTime(from, to, ((distance / speed)*3600) + fixedTime);
+               
+            }
+        }
+        return costMatrixBuilder.build();
+    }
+    
+
+
+    
 }
