diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/AbstractPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/AbstractPrinterColumn.java
deleted file mode 100644
index 0a1c1eef7..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/AbstractPrinterColumn.java
+++ /dev/null
@@ -1,115 +0,0 @@
-package com.graphhopper.jsprit.core.reporting;
-
-import java.util.function.Consumer;
-
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition.Builder;
-
-/**
- * Abstract base class for column definitions.
- *
- * @author balage
- *
- * @param <C>
- *            The context the column works on
- * @param <T>
- *            The type of the data it emits
- * @param <A>
- *            The class itself (internal generic parameter: for inheritence and
- *            builder pattern)
- */
-public abstract class AbstractPrinterColumn<C extends PrinterContext, T, A extends AbstractPrinterColumn<C, T, A>> {
-
-    // Decorator is a post creation callback to alter the behaviour of the
-    // column definition.
-    private Consumer<ColumnDefinition.Builder> decorator;
-
-    private boolean isDefaultTitle = true;
-    private String title;
-
-    /**
-     * Constructor.
-     */
-    public AbstractPrinterColumn() {
-        this(null);
-    }
-
-    /**
-     * @param decorator
-     *            Decorator is a post creation callback to alter the behaviour
-     *            of the column definition.
-     */
-    public AbstractPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
-        super();
-        this.decorator = decorator;
-    }
-
-    /**
-     * Creates the column definition of the column.
-     *
-     * @return the decorated column definition.
-     */
-    public ColumnDefinition getColumnDefinition() {
-        Builder builder = getColumnBuilder().withTitle(getTitle());
-        if (decorator != null) {
-            decorator.accept(builder);
-        }
-        return builder.build();
-    }
-
-    /**
-     * @return A title of the column.
-     */
-    public String getTitle() {
-        return isDefaultTitle ? getDefaultTitle() : title;
-    }
-
-    /**
-     * @param title
-     *            the title of the column
-     * @return The object itself (fluent api)
-     */
-    @SuppressWarnings("unchecked")
-    public A withTitle(String title) {
-        this.title = title;
-        isDefaultTitle = false;
-        return (A) this;
-    }
-
-    /**
-     * Decorator is a post creation callback to alter the behaviour of the
-     * column definition.
-     *
-     * @param decorator
-     *            The decorator.
-     * @return The object itself (fluent api)
-     */
-    @SuppressWarnings("unchecked")
-    public A withDecorator(Consumer<ColumnDefinition.Builder> decorator) {
-        this.decorator = decorator;
-        return (A) this;
-    }
-
-    /**
-     * Returns the builder implementation of the corresponding column
-     * definition.
-     *
-     * @return The column definition builder.
-     */
-    protected abstract ColumnDefinition.Builder getColumnBuilder();
-
-    /**
-     * Extracts the data from the context.
-     *
-     * @param context
-     *            The context to process.
-     * @return The extracted data.
-     */
-    public abstract T getData(C context);
-
-    /**
-     * @return the default title
-     */
-    protected abstract String getDefaultTitle();
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/ConfigurableTablePrinter.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/ConfigurableTablePrinter.java
deleted file mode 100644
index 949b6cb8f..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/ConfigurableTablePrinter.java
+++ /dev/null
@@ -1,486 +0,0 @@
-package com.graphhopper.jsprit.core.reporting;
-
-import java.io.IOException;
-import java.io.StringWriter;
-import java.nio.CharBuffer;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.List;
-import java.util.stream.Collectors;
-import java.util.stream.IntStream;
-
-import org.apache.commons.csv.CSVFormat;
-import org.apache.commons.csv.CSVPrinter;
-import org.apache.commons.csv.QuoteMode;
-
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnAlignment;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-
-
-/**
- * A text-base table formatter with extendible and configurable column set.
- *
- * @author balage
- * @param <C>
- *            The context the table formatter operates. When a new row of data
- *            is being added, this context is passed to all column definitions
- *            to create cell information.
- */
-public class ConfigurableTablePrinter<C extends PrinterContext> {
-
-    /**
-     * A row of the table.
-     *
-     * @author balage
-     *
-     */
-    public class TableRow {
-        private String row[] = new String[tableDef.size()];
-
-        // Used by add() function to determine the next column index.
-        private int lastIndex = 0;
-
-        /**
-         * Constructor.
-         */
-        public TableRow() {
-            super();
-            Arrays.fill(row, "");
-        }
-
-        /**
-         * Sets the value of a cell in the row.
-         *
-         * @param index
-         *            The index of the cell.
-         * @param data
-         *            The data to be formatted.
-         * @return The table row itself.
-         * @throws IndexOutOfBoundsException
-         *             When the index is not valid.
-         * @throws ClassCastException
-         *             When the column doesn't accept the data provided.
-         */
-        public TableRow set(int index, Object data) {
-            if (index < 0 || index >= row.length) {
-                throw new IndexOutOfBoundsException("Invalid index: " + index);
-            }
-            if (data != null) {
-                if (!tableDef.getColumns().get(index).getType().accepts(data)) {
-                    throw new ClassCastException("Cannot assign " + data.getClass().getSimpleName()
-                                    + " to " + tableDef.getColumns().get(index).getType().getClass()
-                                    .getSimpleName()
-                                    + "( index: " + index + ")");
-                }
-            }
-            String val = tableDef.getColumns().get(index).getType().convert(data);
-
-            row[index] = val;
-            return this;
-        }
-
-        /**
-         * Adds data for the next cell.
-         * <p>
-         * Note that calling the {@linkplain #set(int, Object)} doesn't alter
-         * the insertation point for this function.
-         * <p>
-         *
-         * @param data
-         *            The data to add.
-         * @return The table row itself (fluent api).
-         * @throws IndexOutOfBoundsException
-         *             When the index is not valid.
-         * @throws ClassCastException
-         *             When the column doesn't accept the data provided.
-         */
-        public TableRow add(Object data) {
-            return set(lastIndex++, data);
-        }
-
-        /**
-         * Adds data for the next cell.
-         * <p>
-         * Note that calling the {@linkplain #set(int, Object)} doesn't alter
-         * the insertation point for this function.
-         * <p>
-         *
-         * @param data
-         *            The data to add.
-         * @return The table row itself (fluent api).
-         * @throws IndexOutOfBoundsException
-         *             When the index is not valid.
-         * @throws ClassCastException
-         *             When the column doesn't accept the data provided.
-         */
-        public TableRow add(int data) {
-            return add(new Integer(data));
-        }
-
-        /**
-         * Adds data for the next cell.
-         * <p>
-         * Note that calling the {@linkplain #set(int, Object)} doesn't alter
-         * the insertation point for this function.
-         * <p>
-         *
-         * @param data
-         *            The data to add.
-         * @return The table row itself (fluent api).
-         * @throws IndexOutOfBoundsException
-         *             When the index is not valid.
-         * @throws ClassCastException
-         *             When the column doesn't accept the data provided.
-         */
-        public TableRow add(long data) {
-            return add(new Long(data));
-        }
-
-        /**
-         * Adds data for the next cell.
-         * <p>
-         * Note that calling the {@linkplain #set(int, Object)} doesn't alter
-         * the insertation point for this function.
-         * <p>
-         *
-         * @param data
-         *            The data to add.
-         * @return The table row itself (fluent api).
-         * @throws IndexOutOfBoundsException
-         *             When the index is not valid.
-         * @throws ClassCastException
-         *             When the column doesn't accept the data provided.
-         */
-        public TableRow add(double data) {
-            return add(new Double(data));
-        }
-
-        /**
-         * Adds data for the next cell.
-         * <p>
-         * Note that calling the {@linkplain #set(int, Object)} doesn't alter
-         * the insertation point for this function.
-         * <p>
-         *
-         * @param data
-         *            The data to add.
-         * @return The table row itself (fluent api).
-         * @throws IndexOutOfBoundsException
-         *             When the index is not valid.
-         * @throws ClassCastException
-         *             When the column doesn't accept the data provided.
-         */
-        public TableRow add(boolean data) {
-            return add(Boolean.valueOf(data));
-        }
-
-        /**
-         * Returns the value of a cell.
-         *
-         * @param index
-         *            The index of the cell.
-         * @return The string representation of the cell.
-         * @throws IndexOutOfBoundsException
-         *             When the index is not valid.
-         */
-        public String get(int index) {
-            if (index < 0 || index >= row.length) {
-                throw new IndexOutOfBoundsException("Invalid index: " + index);
-            }
-            return row[index];
-        }
-
-        /**
-         * @return Returns the unmodifiable data of the complete row.
-         */
-        public List<String> getAll() {
-            return Collections.unmodifiableList(Arrays.asList(row));
-        }
-    }
-
-    /**
-     * Marker row for in-table separator line.
-     *
-     * @author balage
-     */
-    private class Separator extends TableRow {
-    }
-
-    // The column list
-    private PrinterColumnList<C> columnList;
-    // The table definition
-    private DynamicTableDefinition tableDef;
-
-    // The rows of the table
-    List<TableRow> rows = new ArrayList<>();
-
-    /**
-     * Constructor.
-     *
-     * @param columnList
-     *            The list of the columns in the table.
-     */
-    public ConfigurableTablePrinter(PrinterColumnList<C> columnList) {
-        super();
-        this.columnList = columnList;
-        tableDef = columnList.getTableDefinition();
-    }
-
-    /**
-     * Adds and populates a row.
-     *
-     * @param context
-     *            The context to use for row cell population.
-     */
-    public void addRow(C context) {
-        TableRow row = new TableRow();
-        columnList.populateRow(row, context);
-        rows.add(row);
-    }
-
-    /**
-     * Adds an in-table separator line.
-     */
-    public void addSeparator() {
-        rows.add(new Separator());
-    }
-
-
-    /**
-     * Repeats <code>c</code> <code>w</code> times.
-     *
-     * @param c
-     *            The character to repeat.
-     * @param w
-     *            The number of occurencies to repeat.
-     * @return A <code>w</code> long string containing <code>c</code>
-     *         characters.
-     */
-    private String repeat(char c, int w) {
-        return CharBuffer.allocate(w).toString().replace('\0', c);
-    }
-
-    /**
-     * Prints the table into a string.
-     *
-     * @return The string representation of the table.
-     */
-    public String print() {
-        StringBuilder sb = new StringBuilder();
-        // Calculating width of each column
-        int[] colWidth = calculateWidthInfo();
-
-        // The total width of the table: the sum of column width, plus the
-        // padding two times for each column, plus the vertical lines (column
-        // count plus one times)
-        int totalWidth = colWidth.length * (tableDef.getPadding() * 2 + 1) + 1;
-        for (int w : colWidth) {
-            totalWidth += w;
-        }
-
-        // Caching draw characters and padding size (for cleaner code)
-        char corner = tableDef.getCorner();
-        char horizontal = tableDef.getHorizontal();
-        char vertical = tableDef.getVertical();
-        int padding = tableDef.getPadding();
-
-        // Padding string
-        String paddingChars = repeat(' ', padding);
-
-        // Build the line for the separator rows
-        StringBuilder sbSep = new StringBuilder();
-        sbSep.append(corner);
-        for (int w : colWidth) {
-            sbSep.append(repeat(horizontal, w + 2 * padding)).append(corner);
-        }
-        sbSep.append("\n");
-        String separatorLine = sbSep.toString();
-
-        // Printing heading if defined
-        if (tableDef.getHeading() != null) {
-            sb.append(corner).append(repeat(horizontal, totalWidth - 2)).append(corner)
-            .append("\n");
-            sb.append(vertical).append(paddingChars)
-            .append(ColumnAlignment.LEFT.align(tableDef.getHeading(),
-                            totalWidth - 2 * padding - 2))
-            .append(paddingChars)
-            .append(vertical)
-            .append("\n");
-        }
-
-        // Adding a separator line (either as the top line of the table or to
-        // separate heading)
-        sb.append(separatorLine);
-
-        // Printing header line
-        sb.append(vertical);
-        for (int i = 0; i < tableDef.size(); i++) {
-            ColumnDefinition cd = tableDef.getColumns().get(i);
-            sb.append(paddingChars).append(ColumnAlignment.LEFT.align(cd.getTitle(), colWidth[i]))
-            .append(paddingChars).append(vertical);
-        }
-        sb.append("\n");
-        sb.append(separatorLine);
-
-        for(TableRow row : rows) {
-            if (row instanceof ConfigurableTablePrinter.Separator) {
-                // Adding separator line
-                sb.append(separatorLine);
-            } else {
-                // Printing a line
-                sb.append(vertical);
-                for (int i = 0; i < tableDef.size(); i++) {
-                    ColumnDefinition cd = tableDef.getColumns().get(i);
-                    sb.append(paddingChars).append(cd.getAlignment().align(row.get(i), colWidth[i]))
-                    .append(paddingChars).append(vertical);
-                }
-                sb.append("\n");
-            }
-        }
-        // Closing the table
-        sb.append(separatorLine);
-
-        return sb.toString();
-    }
-
-    /**
-     * Calculates width of each column.
-     *
-     * @return The width info for the table.
-     */
-    private int[] calculateWidthInfo() {
-        int colWidth[] = new int[tableDef.size()];
-        // For each column
-        IntStream.range(0, tableDef.size()).forEach(i -> {
-            // Calculate maximum data width
-            int max = rows.stream()
-                            .filter(r -> r instanceof ConfigurableTablePrinter.TableRow)
-                            .map(r -> r.get(i))
-                            .filter(d -> d != null)
-                            .mapToInt(d -> d.length())
-                            .max().orElse(0);
-            ColumnDefinition colDef = tableDef.getColumns().get(i);
-            // The width will be the max data or title with, bounded by the min
-            // and/or max column width constraints.
-            colWidth[i] = Math.max(colDef.getTitle().length(),
-                            Math.max(colDef.getMinWidth(), Math.min(colDef.getMaxWidth(), max)));
-        });
-        return colWidth;
-    }
-
-    /**
-     * CSV export configuration.
-     *
-     * @author balage
-     *
-     */
-    public static class CsvConfig {
-        private char delimiter = ';';
-        private char quote = '\"';
-        private char escape = '\\';
-        private boolean printHeader = true;
-
-        /**
-         * @return the delimeter character (cell separator)
-         */
-        public char getDelimiter() {
-            return delimiter;
-        }
-
-        /**
-         * @param delimiter
-         *            the delimeter character (cell separator)
-         * @return The config itself (fluent api)
-         */
-        public CsvConfig withDelimiter(char delimiter) {
-            this.delimiter = delimiter;
-            return this;
-        }
-
-        /**
-         * @return the quote character
-         */
-        public char getQuote() {
-            return quote;
-        }
-
-        /**
-         * @param quote
-         *            the quote character
-         * @return The config itself (fluent api)
-         */
-        public CsvConfig withQuote(char quote) {
-            this.quote = quote;
-            return this;
-        }
-
-        /**
-         * @return the escape character
-         */
-        public char getEscape() {
-            return escape;
-        }
-
-        /**
-         * @param escape
-         *            the escape character
-         * @return The config itself (fluent api)
-         */
-        public CsvConfig withEscape(char escape) {
-            this.escape = escape;
-            return this;
-        }
-
-        /**
-         * @return whether to print header line
-         */
-        public boolean isPrintHeader() {
-            return printHeader;
-        }
-
-        /**
-         * @param printHeader
-         *            whether to print header line
-         * @return The config itself (fluent api)
-         */
-        public CsvConfig withPrintHeader(boolean printHeader) {
-            this.printHeader = printHeader;
-            return this;
-        }
-
-    }
-
-    /**
-     * Exports the data of the table into a CSV formatted string
-     *
-     * @param config
-     *            The configuration of the CSV formatting.
-     * @return The data in CSV format
-     */
-    public String exportToCsv(CsvConfig config) {
-        CSVFormat format = CSVFormat.DEFAULT
-                        .withDelimiter(config.delimiter)
-                        .withQuote(config.quote)
-                        .withQuoteMode(QuoteMode.NON_NUMERIC)
-                        .withEscape(config.escape);
-
-        StringWriter sw = new StringWriter();
-        try (CSVPrinter printer = new CSVPrinter(sw, format)) {
-            if (config.isPrintHeader()) {
-                printer.printRecord(columnList.getColumns().stream()
-                                .map(c -> c.getColumnDefinition().getTitle())
-                                .collect(Collectors.toList()));
-            }
-            for(TableRow r : rows) {
-                if (!(r instanceof ConfigurableTablePrinter.Separator)) {
-                    printer.printRecord(r.getAll());
-                }
-            }
-        } catch (IOException e) {
-            e.printStackTrace();
-        }
-        return sw.toString();
-    }
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/DynamicTableDefinition.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/DynamicTableDefinition.java
deleted file mode 100644
index 401fe2af3..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/DynamicTableDefinition.java
+++ /dev/null
@@ -1,179 +0,0 @@
-package com.graphhopper.jsprit.core.reporting;
-
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
-
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-
-/**
- * Table definition form dynamic table printers (both implementations)
- *
- * @author balage
- * @see {@linkplain DynamicTablePrinter}
- * @see {@linkplain ConfigurableTablePrinter}
- */
-public class DynamicTableDefinition {
-
-    /**
-     * Builder for the table definition.
-     *
-     * @author balage
-     */
-    public static class Builder {
-        private char corner = '+';
-        private char vertical = '|';
-        private char horizontal = '-';
-
-        private String heading = null;
-        private List<ColumnDefinition> columns = new ArrayList<>();
-
-        private int padding = 1;
-
-        /**
-         * @param corner
-         *            The corner (where vertical and horizontal lines meet)
-         *            character.
-         * @return the builder
-         */
-        public Builder withCorner(char corner) {
-            this.corner = corner;
-            return this;
-        }
-
-        /**
-         * @param vertical
-         *            The vertical line character.
-         * @return the builder
-         */
-        public Builder withVertical(char vertical) {
-            this.vertical = vertical;
-            return this;
-        }
-
-        /**
-         * @param horizontal
-         *            The horizontal line character.
-         * @return the builder
-         */
-        public Builder withHorizontal(char horizontal) {
-            this.horizontal = horizontal;
-            return this;
-        }
-
-        /**
-         * @param heading
-         *            The heading text of the table. If not defined or null
-         *            specified, no heading will be printed.
-         * @return the builder
-         */
-        public Builder withHeading(String heading) {
-            this.heading = heading;
-            return this;
-        }
-
-        /**
-         * Adds a column for the table definition.
-         *
-         * @param column
-         *            The column definition to add.
-         * @return the builder
-         */
-        public Builder addColumn(ColumnDefinition column) {
-            columns.add(column);
-            return this;
-        }
-
-        /**
-         * @param padding
-         *            The padding size of the table.
-         * @return the builder
-         */
-        public Builder withPadding(int padding) {
-            this.padding = Math.max(0, padding);
-            return this;
-        }
-
-        /**
-         * @return The imutable table definition object.
-         */
-        public DynamicTableDefinition build() {
-            return new DynamicTableDefinition(this);
-        }
-    }
-
-
-    private char corner = '+';
-    private char vertical = '|';
-    private char horizontal = '-';
-
-    private String heading = null;
-    private List<ColumnDefinition> columns = new ArrayList<>();
-
-    private int padding = 1;
-
-    /**
-     * Private constructor for builder.
-     *
-     * @param builder
-     *            the builder to initialize from.
-     */
-    private DynamicTableDefinition(Builder builder) {
-        corner = builder.corner;
-        vertical = builder.vertical;
-        horizontal = builder.horizontal;
-        heading = builder.heading;
-        columns = Collections.unmodifiableList(builder.columns);
-        padding = builder.padding;
-    }
-
-    /**
-     * @return the corner (where vertical and horizontal lines meet) character.
-     */
-    public char getCorner() {
-        return corner;
-    }
-
-    /**
-     * @return the character for vertical line
-     */
-    public char getVertical() {
-        return vertical;
-    }
-
-    /**
-     * @return the character for horizontal line
-     */
-    public char getHorizontal() {
-        return horizontal;
-    }
-
-    /**
-     * @return the heading text
-     */
-    public String getHeading() {
-        return heading;
-    }
-
-    /**
-     * @return the unmodifiable column list
-     */
-    public List<ColumnDefinition> getColumns() {
-        return Collections.unmodifiableList(columns);
-    }
-
-    /**
-     * @return the padding size
-     */
-    public int getPadding() {
-        return padding;
-    }
-
-    /**
-     * @return The number of columns.
-     */
-    public int size() {
-        return columns.size();
-    }
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/DynamicTablePrinter.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/DynamicTablePrinter.java
deleted file mode 100644
index bfa4a32d7..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/DynamicTablePrinter.java
+++ /dev/null
@@ -1,210 +0,0 @@
-package com.graphhopper.jsprit.core.reporting;
-
-import java.nio.CharBuffer;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-import java.util.stream.IntStream;
-
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnAlignment;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.columndefinition.DoubleColumnType;
-import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
-
-/**
- * @author balage
- */
-public class DynamicTablePrinter {
-
-    public class TableRow {
-        private String row[] = new String[tableDef.size()];
-        private int lastIndex = 0;
-
-        public TableRow() {
-            super();
-            Arrays.fill(row, "");
-        }
-
-        public TableRow set(int index, Object data) {
-            if (index < 0 || index >= row.length) {
-                throw new IndexOutOfBoundsException("Invalid index: " + index);
-            }
-            if (data != null) {
-                if (!tableDef.getColumns().get(index).getType().accepts(data)) {
-                    throw new ClassCastException("Cannot assign " + data.getClass().getSimpleName()
-                                    + " to " + tableDef.getColumns().get(index).getType().getClass()
-                                    .getSimpleName()
-                                    + "( index: " + index + ")");
-                }
-            }
-            String val = tableDef.getColumns().get(index).getType().convert(data);
-
-            row[index] = val;
-            return this;
-        }
-
-        public TableRow add(Object data) {
-            return set(lastIndex++, data);
-        }
-
-        public TableRow add(int data) {
-            return add(new Integer(data));
-        }
-
-        public TableRow add(long data) {
-            return add(new Long(data));
-        }
-
-        public TableRow add(double data) {
-            return add(new Double(data));
-        }
-
-        public TableRow add(boolean data) {
-            return add(Boolean.valueOf(data));
-        }
-
-        public String get(int index) {
-            if (index < 0 || index >= row.length) {
-                throw new IndexOutOfBoundsException("Invalid index: " + index);
-            }
-            return row[index];
-        }
-    }
-
-    private class Separator extends TableRow {
-    }
-
-    DynamicTableDefinition tableDef;
-
-    List<TableRow> rows = new ArrayList<>();
-
-    public DynamicTablePrinter(DynamicTableDefinition tableDef) {
-        this.tableDef = tableDef;
-    }
-
-    public TableRow addRow() {
-        TableRow row = new TableRow();
-        rows.add(row);
-        return row;
-    }
-
-    public void addSeparator() {
-        rows.add(new Separator());
-    }
-
-
-    private String repeat(char c, int w) {
-        return CharBuffer.allocate(w).toString().replace('\0', c);
-    }
-
-    public String print() {
-        StringBuilder sb = new StringBuilder();
-        int[] colWidth = calculateWidthInfo();
-        int totalWidth = colWidth.length * (tableDef.getPadding() * 2 + 1) + 1;
-        for (int w : colWidth) {
-            totalWidth += w;
-        }
-
-        char corner = tableDef.getCorner();
-        char horizontal = tableDef.getHorizontal();
-        char vertical = tableDef.getVertical();
-        int padding = tableDef.getPadding();
-
-        String paddingChars = repeat(' ', padding);
-
-        StringBuilder sbSep = new StringBuilder();
-        sbSep.append(corner);
-        for (int w : colWidth) {
-            sbSep.append(repeat(horizontal, w + 2 * padding)).append(corner);
-        }
-        sbSep.append("\n");
-        String separatorLine = sbSep.toString();
-
-        if (tableDef.getHeading() != null) {
-            sb.append(corner).append(repeat(horizontal, totalWidth - 2)).append(corner)
-            .append("\n");
-            sb.append(vertical).append(paddingChars)
-            .append(ColumnAlignment.LEFT.align(tableDef.getHeading(),
-                            totalWidth - 2 * padding - 2))
-            .append(paddingChars)
-            .append(vertical)
-            .append("\n");
-        }
-
-        sb.append(separatorLine);
-        sb.append(vertical);
-        for (int i = 0; i < tableDef.size(); i++) {
-            ColumnDefinition cd = tableDef.getColumns().get(i);
-            sb.append(paddingChars).append(ColumnAlignment.LEFT.align(cd.getTitle(), colWidth[i]))
-            .append(paddingChars).append(vertical);
-        }
-        sb.append("\n");
-        sb.append(separatorLine);
-
-        for(TableRow row : rows) {
-            if (row instanceof Separator) {
-                sb.append(separatorLine);
-            } else {
-                sb.append(vertical);
-                for (int i = 0; i < tableDef.size(); i++) {
-                    ColumnDefinition cd = tableDef.getColumns().get(i);
-                    sb.append(paddingChars).append(cd.getAlignment().align(row.get(i), colWidth[i]))
-                    .append(paddingChars).append(vertical);
-                }
-                sb.append("\n");
-            }
-        }
-        sb.append(separatorLine);
-
-        return sb.toString();
-    }
-
-    private int[] calculateWidthInfo() {
-        int colWidth[] = new int[tableDef.size()];
-        IntStream.range(0, tableDef.size()).forEach(i -> {
-            int max = rows.stream()
-                            .filter(r -> r instanceof TableRow)
-                            .map(r -> r.get(i))
-                            .filter(d -> d != null)
-                            .mapToInt(d -> d.length())
-                            .max().orElse(0);
-            ColumnDefinition colDef = tableDef.getColumns().get(i);
-            colWidth[i] = Math.max(colDef.getTitle().length(),
-                            Math.max(colDef.getMinWidth(), Math.min(colDef.getMaxWidth(), max)));
-        });
-        return colWidth;
-    }
-
-    public static void main(String[] args) {
-        DynamicTableDefinition td = new DynamicTableDefinition.Builder()
-                        // .withHeading("Test")
-                        .addColumn(new ColumnDefinition.Builder(new StringColumnType(), "string")
-                                        .build())
-                        .addColumn(new ColumnDefinition.Builder(new StringColumnType(),
-                                        "right-string")
-                                        .withAlignment(ColumnAlignment.CENTER).build())
-                        .addColumn(new ColumnDefinition.Builder(new DoubleColumnType(),
-                                        "double")
-                                        .withMinWidth(10)
-                                        .withAlignment(ColumnAlignment.RIGHT).build())
-                        .build();
-
-        DynamicTablePrinter p = new DynamicTablePrinter(td);
-
-        TableRow r;
-        r = p.addRow();
-        r.add("apple");
-        r.add("one");
-        r.add(Math.PI);
-        r = p.addRow();
-        r.add("banana");
-        r.add("two");
-        r.add(2d);
-        p.addSeparator();
-        r = p.addRow();
-        r.add("cherry");
-        r.add("four");
-
-        System.out.println(p.print());
-    }
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/PrinterColumnList.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/PrinterColumnList.java
deleted file mode 100644
index 3644c7e1b..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/PrinterColumnList.java
+++ /dev/null
@@ -1,164 +0,0 @@
-package com.graphhopper.jsprit.core.reporting;
-
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
-import java.util.Optional;
-import java.util.stream.Collectors;
-
-import com.graphhopper.jsprit.core.reporting.ConfigurableTablePrinter.TableRow;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.Builder;
-
-/**
- * The list of the printer columns. This helps the user to construct, manage and
- * alter the column definitions. Also this function populates the
- * {@linkplain TableRow}.
- *
- * @author balage
- *
- * @param <C>
- *            The context the colums
- */
-public class PrinterColumnList<C extends PrinterContext> {
-
-    // The heading line
-    private String heading = null;
-
-    // The list of the columns
-    private List<AbstractPrinterColumn<C, ?, ?>> columns = new ArrayList<>();
-
-    /**
-     * The constructor to create a table without heading.
-     */
-    public PrinterColumnList() {
-        super();
-    }
-
-    /**
-     * Constructor to create with heading text.
-     *
-     * @param heading
-     *            The heading text.
-     */
-    public PrinterColumnList(String heading) {
-        super();
-        this.heading = heading;
-    }
-
-    /**
-     * Adds a column to the column list.
-     *
-     * @param column
-     *            The column to add.
-     * @return The object itself (fluent api)
-     */
-    public PrinterColumnList<C> addColumn(AbstractPrinterColumn<C, ?,?> column) {
-        if (findByTitle(column.getTitle()).isPresent()) {
-            throw new IllegalArgumentException("Name is duplicated: " + column.getTitle());
-        } else {
-            columns.add(column);
-        }
-        return this;
-    }
-
-    /**
-     * Removes a column.
-     * <p>
-     * Requires the exact column instance that was added- Use the
-     * {@linkplain #findByClass(Class)} or {@linkplain #findByTitle(String)}
-     * functions to get the instance.
-     * </p>
-     *
-     * @param column
-     *            the column to remove.
-     * @return true if the column was found and removed
-     */
-    public boolean removeColumn(AbstractPrinterColumn<C, ?, ?> column) {
-        boolean res = columns.contains(column);
-        if (res) {
-            columns.remove(column);
-        }
-        return res;
-    }
-
-    /**
-     * Builds the table definition from the column list and other parameters.
-     *
-     * @return the table definition
-     */
-    public DynamicTableDefinition getTableDefinition() {
-        Builder defBuilder = new DynamicTableDefinition.Builder();
-        columns.forEach(c -> defBuilder.addColumn(c.getColumnDefinition()));
-        defBuilder.withHeading(heading);
-        return defBuilder.build();
-    }
-
-    /**
-     * Populates a table row with the data extracted from the context and
-     * formatted by the column definition.
-     *
-     * @param row
-     *            The row to populate. The row must match the column definition.
-     * @param context
-     *            The context to work on
-     */
-    void populateRow(ConfigurableTablePrinter<C>.TableRow row, C context) {
-        columns.forEach(c -> row.add(c.getData(context)));
-    }
-
-    /**
-     * @return unmodifiable list of columns
-     */
-    public List<AbstractPrinterColumn<C, ?,?>> getColumns() {
-        return Collections.unmodifiableList(columns);
-    }
-
-    /**
-     * @return the heading text. Null means there will be no heading.
-     */
-    public String getHeading() {
-        return heading;
-    }
-
-    /**
-     * @param heading
-     *            The new heading text or null to remove heading.
-     * @return The object itself (fluent api)
-     */
-    public PrinterColumnList<C> withHeading(String heading) {
-        this.heading = heading;
-        return this;
-    }
-
-    /**
-     * Finds the columns with the type given.
-     * <p>
-     * A table could contain more columns of the same type, so this function
-     * returns all matching columns.
-     * </p>
-     * <p>
-     * Note that this function intentially uses
-     * <code>getClass().equals(clazz)</code> instead of <code>instanceof</code>,
-     * so only the exact matches are returned. Columns of inherited classes are
-     * not returned.
-     *
-     * @param clazz
-     *            The class to look for
-     * @return The list of all the columns with the type
-     */
-    public List<AbstractPrinterColumn<C, ?, ?>> findByClass(Class<? extends AbstractPrinterColumn<C, ?,?>> clazz) {
-        return columns.stream().filter(c -> c.getClass().equals(clazz)).collect(Collectors.toList());
-    }
-
-    /**
-     * Returns the column with the title.
-     * 
-     * @param title
-     *            The title to look for
-     * @return The column definition if there is any match
-     */
-    public Optional<AbstractPrinterColumn<C, ?, ?>> findByTitle(String title) {
-        return columns.stream().filter(c -> c.getTitle().equals(title)).findAny();
-    }
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/PrinterContext.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/PrinterContext.java
deleted file mode 100644
index 58521bd8b..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/PrinterContext.java
+++ /dev/null
@@ -1,10 +0,0 @@
-package com.graphhopper.jsprit.core.reporting;
-
-/**
- * Common marker interface of printer contexts
- *
- * @author balage
- *
- */
-public interface PrinterContext {
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/AbstractColumnType.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/AbstractColumnType.java
deleted file mode 100644
index 6a07a2cb0..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/AbstractColumnType.java
+++ /dev/null
@@ -1,63 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.columndefinition;
-
-/**
- * Common abstract ancestor for column types.
- *
- * @author balage
- *
- * @param <T>
- *            The type it accepts.
- */
-public abstract class AbstractColumnType<T> implements ColumnType<T> {
-
-    // The string to used as null value
-    private String nullValue = "";
-
-    public AbstractColumnType() {
-        super();
-    }
-
-    /**
-     * @param nullValue
-     *            alternative null value
-     */
-    public AbstractColumnType(String nullValue) {
-        super();
-        this.nullValue = nullValue;
-    }
-
-    /**
-     * {@inheritDoc}
-     *
-     * This basic implementation takes the burden to handle null values and
-     * calls the {@linkplain #convertNotNull(Object)} for all other values.
-     *
-     * @see com.graphhopper.jsprit.core.reporting.columndefinition.ColumnType#convert(java.lang.Object)
-     *
-     * @throws ClassCastException
-     *             if the data is not accepted by the column type.
-     */
-    @SuppressWarnings("unchecked")
-    @Override
-    public String convert(Object data) {
-        if (data == null) {
-            return nullValue;
-        } else {
-            if (accepts(data)) {
-                return convertNotNull((T) data);
-            } else {
-                throw new ClassCastException();
-            }
-        }
-    }
-
-    /**
-     * Converts the data into String. This function never gets null as
-     * parameter.
-     *
-     * @param data
-     *            the non-null data to convert.
-     * @return The converted data.
-     */
-    protected abstract String convertNotNull(T data);
-}
\ No newline at end of file
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/BooleanColumnType.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/BooleanColumnType.java
deleted file mode 100644
index ec2159033..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/BooleanColumnType.java
+++ /dev/null
@@ -1,80 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.columndefinition;
-
-/**
- * A column type with boolean values.
- * <p>
- * The display value for true and false values could be configured.
- * </p>
- *
- * @author balage
- *
- */
-public class BooleanColumnType extends AbstractColumnType<Boolean> {
-    // The display value for true
-    private String trueValue = "true";
-    // The display value for false
-    private String falseValue = "false";
-
-    /**
-     * Konstructor. The column will use the default values for null, true or
-     * false.
-     */
-    public BooleanColumnType() {
-        super();
-    }
-
-    /**
-     * Konstructor. The column will use the default values for true or false.
-     *
-     * @param nullValue
-     *            The text representation for null values.
-     */
-    public BooleanColumnType(String nullValue) {
-        super(nullValue);
-    }
-
-    /**
-     * Konstructor. The column will use the default values for null.
-     *
-     * @param trueValue
-     *            The text representation for true values.
-     * @param falseValue
-     *            The text representation for false values.
-     */
-    public BooleanColumnType(String trueValue, String falseValue) {
-        super();
-        this.trueValue = trueValue;
-        this.falseValue = falseValue;
-    }
-
-    /**
-     * Konstructor.
-     *
-     * @param trueValue
-     *            The text representation for true values.
-     * @param falseValue
-     *            The text representation for false values.
-     * @param nullValue
-     *            The text representation for null values.
-     */
-    public BooleanColumnType(String trueValue, String falseValue, String nullValue) {
-        super(nullValue);
-        this.trueValue = trueValue;
-        this.falseValue = falseValue;
-    }
-
-    @Override
-    protected String convertNotNull(Boolean data) {
-        return data ? trueValue : falseValue;
-    }
-
-    /**
-     * {@inheritDoc}
-     *
-     * Only accepts {@linkplain Boolean} input.
-     */
-    @Override
-    public boolean accepts(Object data) {
-        return data instanceof Boolean;
-    }
-}
\ No newline at end of file
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/ColumnAlignment.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/ColumnAlignment.java
deleted file mode 100644
index 44f4bc5fc..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/ColumnAlignment.java
+++ /dev/null
@@ -1,67 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.columndefinition;
-
-/**
- * Alignment of the column.
- * <p>
- * Longer values will be truncated, shorter values will be padded by spaces.
- * </p>
- *
- * @author balage
- *
- */
-public enum ColumnAlignment {
-    /**
-     * The values are aligned left, padded on the right side.
-     */
-    LEFT {
-
-        @Override
-        public String align(String data, int width) {
-            if (data.length() > width) {
-                return data.substring(0, width);
-            }
-            return String.format("%1$-" + width + "s", data);
-        }
-
-    },
-    /**
-     * The values are aligned right, padded on the left side.
-     */
-    RIGHT {
-
-        @Override
-        public String align(String data, int width) {
-            if (data.length() > width) {
-                return data.substring(0, width);
-            }
-            return String.format("%1$" + width + "s", data);
-        }
-
-    },
-    /**
-     * The values are centered, padded on the both sides evenly (in case of odd
-     * character padding, the left padding will be one more than the right one).
-     */
-    CENTER {
-        @Override
-        public String align(String data, int width) {
-            if (data.length() > width) {
-                return data.substring(0, width);
-            }
-            int leftPad = (width - data.length())/2;
-            return LEFT.align(RIGHT.align(data, width-leftPad), width);
-        }
-    };
-
-    /**
-     * Applies the alignment on the data according the width. Truncates or pads
-     * the value.
-     * 
-     * @param data
-     *            The data to align.
-     * @param width
-     *            The width to pad to.
-     * @return The aligned (padded) values with the exact length of width.
-     */
-    public abstract String align(String data, int width);
-}
\ No newline at end of file
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/ColumnDefinition.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/ColumnDefinition.java
deleted file mode 100644
index 7fcdabd13..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/ColumnDefinition.java
+++ /dev/null
@@ -1,192 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.columndefinition;
-
-/**
- * Column definition. Contains all information for converting and formatting the
- * column.
- * <p>
- * The definition itself immutable and cannot be directly instantiate. Use the
- * {@linkplain Builder} class for constructing the definition.
- * </p>
- *
- * @author balage
- *
- */
-public class ColumnDefinition {
-
-    /**
-     * The builder for {@linkplain ColumnDefinition}.
-     * <p>
-     * When it is not specified, the default title is null (the default title of
-     * the column will be used), the minWidth is 0, the maxWidth is
-     * {@linkplain Integer#MAX_VALUE} and the alignment is
-     * {@linkplain ColumnAlignment#LEFT}.
-     * </p>
-     *
-     * @author balage
-     *
-     */
-    public static class Builder {
-        // Type of the column.
-        private ColumnType<?> type;
-        // The title of the column.
-        private String title;
-        // The minimal width of the column.
-        private int minWidth = 0;
-        // The maximal width of the column.
-        private int maxWidth = Integer.MAX_VALUE;
-        // The alignment of the column.
-        private ColumnAlignment alignment = ColumnAlignment.LEFT;
-
-        /**
-         * Constructor with title specified.
-         *
-         * @param type
-         *            Type of the column.
-         * @param title
-         *            The title of the column.
-         * @see {@linkplain #withTitle(String)}
-         */
-        public Builder(ColumnType<?> type, String title) {
-            super();
-            this.type = type;
-            this.title = title;
-        }
-
-        /**
-         * Constructor.
-         *
-         * @param type
-         *            Type of the column.
-         */
-        public Builder(ColumnType<?> type) {
-            super();
-            this.type = type;
-        }
-
-        /**
-         * @param title
-         *            The title of the column
-         * @return The builder object.
-         */
-        public ColumnDefinition.Builder withTitle(String title) {
-            this.title = title;
-            return this;
-        }
-
-        /**
-         * @param minWidth
-         *            The minimal width of the column.
-         * @return The builder object.
-         * @throws IllegalArgumentException
-         *             If the minWidth is negative or higher than the maxWidth.
-         */
-        public ColumnDefinition.Builder withMinWidth(int minWidth) {
-            if (minWidth < 0) {
-                throw new IllegalArgumentException("Minimal width should be non-negative.");
-            }
-            if (minWidth > maxWidth) {
-                throw new IllegalArgumentException("Minimal width should be less or equal than the maximal width.");
-            }
-            this.minWidth = minWidth;
-            return this;
-        }
-
-        /**
-         * @param maxWidth
-         *            The maximal width of the column.
-         * @return The builder object.
-         * @throws IllegalArgumentException
-         *             If the maxWidth is negative or less than the minWidth.
-         */
-        public ColumnDefinition.Builder withMaxWidth(int maxWidth) {
-            if (maxWidth < 0) {
-                throw new IllegalArgumentException("Maximal width should be non-negative.");
-            }
-            if (maxWidth > maxWidth) {
-                throw new IllegalArgumentException("Maximal width should be greater or equal than the minimal width.");
-            }
-            this.maxWidth = maxWidth;
-            return this;
-        }
-
-        /**
-         * @param alignment
-         *            The alignment of the column.
-         * @return The builder object.
-         */
-        public ColumnDefinition.Builder withAlignment(ColumnAlignment alignment) {
-            this.alignment = alignment;
-            return this;
-        }
-
-        /**
-         * @return The constructed imutable definition object.
-         */
-        public ColumnDefinition build() {
-            return new ColumnDefinition(this);
-        }
-
-    }
-
-
-    // Type of the column.
-    private ColumnType<?> type;
-    // The title of the column.
-    private String title;
-    // The minimal width of the column.
-    private int minWidth = 0;
-    // The maximal width of the column.
-    private int maxWidth = Integer.MAX_VALUE;
-    // The alignment of the column.
-    private ColumnAlignment alignment = ColumnAlignment.LEFT;
-
-    /**
-     * Private constructor for the builder.
-     *
-     * @param builder
-     *            The builder.
-     */
-    private ColumnDefinition(ColumnDefinition.Builder builder) {
-        type = builder.type;
-        title = builder.title;
-        minWidth = builder.minWidth;
-        maxWidth = builder.maxWidth;
-        alignment = builder.alignment;
-    }
-
-    /**
-     * @return The type of the column.
-     */
-    public ColumnType<?> getType() {
-        return type;
-    }
-
-    /**
-     * @return The title of the column. If null, the default title will be used.
-     */
-    public String getTitle() {
-        return title;
-    }
-
-    /**
-     * @return The minimal width of the column.
-     */
-    public int getMinWidth() {
-        return minWidth;
-    }
-
-    /**
-     * @return The maximal width of the column.
-     */
-    public int getMaxWidth() {
-        return maxWidth;
-    }
-
-    /**
-     * @return The alignment of the column.
-     */
-    public ColumnAlignment getAlignment() {
-        return alignment;
-    }
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/ColumnType.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/ColumnType.java
deleted file mode 100644
index 4a7b5e48a..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/ColumnType.java
+++ /dev/null
@@ -1,30 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.columndefinition;
-
-/**
- * Column type.
- *
- * @author balage
- *
- * @param <T>
- *            The object type it accepts.
- */
-public interface ColumnType<T> {
-    /**
-     * Converts the data into String.
-     * 
-     * @param data
-     *            the data to convert.
-     * @return The converted data.
-     */
-    public String convert(Object data);
-
-    /**
-     * Checks if the given data is acceptable for the type. (Mostly by class
-     * type.)
-     * 
-     * @param data
-     *            the data to check
-     * @return True if the data can be converted by this implementation.
-     */
-    public boolean accepts(Object data);
-}
\ No newline at end of file
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/DoubleColumnType.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/DoubleColumnType.java
deleted file mode 100644
index 0e73a08f2..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/DoubleColumnType.java
+++ /dev/null
@@ -1,82 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.columndefinition;
-
-/**
- * A column type with double values.
- * <p>
- * The number of decimal places could be configured.
- * </p>
- *
- * @author balage
- *
- */
-public class DoubleColumnType extends AbstractColumnType<Double> {
-
-    // The number of displayed decimal places
-    private int decimals = 2;
-
-    /**
-     * Konstructor. The column will use the default values for null and the
-     * significant decimal places.
-     */
-    public DoubleColumnType() {
-        super();
-    }
-
-    /**
-     * Konstructor. The column will use the default values for the significant
-     * decimal places.
-     *
-     * @param nullValue
-     *            The text representation for null values.
-     */
-    public DoubleColumnType(String nullValue) {
-        super(nullValue);
-    }
-
-    /**
-     * Konstructor. The column will use the default values for null.
-     *
-     * @param decimals The number of decimal places to display.
-     * @throws IllegalArgumentException If the parameter is negative.
-     */
-    public DoubleColumnType(int decimals) {
-        super();
-        if (decimals < 0) {
-            throw new IllegalArgumentException("Decimal places should be 0 or more.");
-        }
-        this.decimals = decimals;
-    }
-
-    /**
-     * Konstructor.
-     *
-     * @param decimals
-     *            The number of decimal places to display.
-     * @param nullValue
-     *            The text representation for null values.
-     * @throws IllegalArgumentException
-     *             If the parameter is negative.
-     */
-    public DoubleColumnType(int decimals, String nullValue) {
-        super(nullValue);
-        if (decimals < 0) {
-            throw new IllegalArgumentException("Decimal places should be 0 or more.");
-        }
-        this.decimals = decimals;
-    }
-
-    @Override
-    protected String convertNotNull(Double data) {
-        return String.format("%50." + decimals + "f", data).trim();
-    }
-
-    /**
-     * {@inheritDoc} Only accepts Double values.
-     */
-    @Override
-    public boolean accepts(Object data) {
-        return data instanceof Double;
-    }
-
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/HumanReadableDurationFormatter.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/HumanReadableDurationFormatter.java
deleted file mode 100644
index 2754c6353..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/HumanReadableDurationFormatter.java
+++ /dev/null
@@ -1,66 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.columndefinition;
-
-import java.time.LocalDate;
-import java.time.LocalDateTime;
-import java.time.LocalTime;
-import java.time.format.DateTimeFormatter;
-import java.time.temporal.ChronoUnit;
-
-/**
- * Duration formatter for human readable format.
- * <p>
- * The formatter uses the {@linkplain DateTimeFormatter} for time value to
- * string formatting. The default format is the standard ISO time format (
- * <code>"HH:mm:ss"</code>). If the input long value is X, the time value is
- * calculated by adding X of the units to a predefined origin. The default unit
- * is {@linkplain ChronoUnit#SECONDS}.
- * </p>
- *
- * @author balage
- *
- */
-public class HumanReadableDurationFormatter extends HumanReadableTimeFormatter {
-
-    // Default origin
-    public static final LocalDateTime DEFAULT_ORIGIN = LocalDateTime.of(LocalDate.now(), LocalTime.MIDNIGHT);
-
-    /**
-     * Constructor with default settings. See
-     * {@linkplain HumanReadableDurationFormatter} for default values.
-     */
-    public HumanReadableDurationFormatter() {
-    }
-
-    /**
-     * Constructor with time mapping values, but with default formatting.
-     *
-     * @param unit
-     *            The unit used to map the numerical value to the time value.
-     */
-    public HumanReadableDurationFormatter(ChronoUnit unit) {
-        super(DEFAULT_ORIGIN, unit);
-    }
-
-    /**
-     * Constructor with user-defined formatting.
-     *
-     * @param dateFormatter
-     *            The date formatter.
-     */
-    public HumanReadableDurationFormatter(DateTimeFormatter dateFormatter) {
-        super(dateFormatter);
-    }
-
-    /**
-     * Constructor with both time mapping values and user-defined formatting.
-     *
-     * @param dateFormatter
-     *            The date formatter.
-     * @param unit
-     *            The unit used to map the numerical value to the time value.
-     */
-    public HumanReadableDurationFormatter(DateTimeFormatter dateFormatter, ChronoUnit unit) {
-        super(dateFormatter, DEFAULT_ORIGIN, unit);
-    }
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/HumanReadableEnabled.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/HumanReadableEnabled.java
deleted file mode 100644
index f8b427a66..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/HumanReadableEnabled.java
+++ /dev/null
@@ -1,27 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.columndefinition;
-
-/**
- * Interface for columns with human readable formats.
- *
- * @author balage
- *
- * @param <T>
- *            The type of the class itself. (Self-reference)
- */
-public interface HumanReadableEnabled<T extends HumanReadableEnabled<T>> {
-    /**
-     * Sets the formatter.
-     * 
-     * @param formatter
-     *            The formatter.
-     * @return The object itself.
-     */
-    public T withFormatter(HumanReadableTimeFormatter formatter);
-
-    /**
-     * Marks the column human readable.
-     * 
-     * @return The object itself.
-     */
-    public T asHumanReadable();
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/HumanReadableTimeFormatter.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/HumanReadableTimeFormatter.java
deleted file mode 100644
index 122673a6a..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/HumanReadableTimeFormatter.java
+++ /dev/null
@@ -1,102 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.columndefinition;
-
-import java.time.LocalDate;
-import java.time.LocalDateTime;
-import java.time.LocalTime;
-import java.time.format.DateTimeFormatter;
-import java.time.temporal.ChronoUnit;
-
-/**
- * Time value or duration formatter for human readable format.
- * <p>
- * The formatter uses the {@linkplain DateTimeFormatter} for time value to
- * string formatting. The default format is the standard ISO time format (
- * <code>"HH:mm:ss"</code>). If the input long value is X, the time value is
- * calculated by adding X of the units to the origin. The default value for
- * origin is midnight (00:00) of the current day (note, that the default
- * formatting ignores the date value), the default unit is
- * {@linkplain ChronoUnit#SECONDS}.
- * </p>
- *
- * @author balage
- *
- */
-public class HumanReadableTimeFormatter {
-
-    // Default origin
-    public static final LocalDateTime DEFAULT_ORIGIN = LocalDateTime.of(LocalDate.now(), LocalTime.MIDNIGHT);
-
-    // The formatter
-    private DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("HH:mm:ss");
-    // The origin
-    private LocalDateTime origin = DEFAULT_ORIGIN;
-    // The time unit
-    private ChronoUnit unit = ChronoUnit.SECONDS;
-
-    /**
-     * Constructor with default settings. See
-     * {@linkplain HumanReadableTimeFormatter} for default values.
-     */
-    public HumanReadableTimeFormatter() {
-    }
-
-    /**
-     * Constructor with time mapping values, but with default formatting.
-     *
-     * @param origin
-     *            The origin data and time of the time mapping. (Note that with
-     *            default formatter, the date part is ignored.)
-     * @param unit
-     *            The unit used to map the numerical value to the time value.
-     */
-    public HumanReadableTimeFormatter(LocalDateTime origin, ChronoUnit unit) {
-        this.origin = origin;
-        this.unit = unit;
-    }
-
-    /**
-     * Constructor with user-defined formatting.
-     *
-     * @param dateFormatter
-     *            The date formatter.
-     */
-    public HumanReadableTimeFormatter(DateTimeFormatter dateFormatter) {
-        this.dateFormatter = dateFormatter;
-    }
-
-    /**
-     * Constructor with both time mapping values and user-defined formatting.
-     *
-     * @param dateFormatter
-     *            The date formatter.
-     * @param origin
-     *            The origin data and time of the time mapping.
-     * @param unit
-     *            The unit used to map the numerical value to the time value.
-     */
-    public HumanReadableTimeFormatter(DateTimeFormatter dateFormatter, LocalDateTime origin, ChronoUnit unit) {
-        this.dateFormatter = dateFormatter;
-        this.origin = origin;
-        this.unit = unit;
-    }
-
-    /**
-     * Formats a numerical value into a human readable time value.
-     * <p>
-     * First a time value is calculated by adding <code>timeValue</code> of the
-     * units to the origin. Then the time value is formatted by the formatter.
-     * </p>
-     *
-     * @param timeValue
-     *            The value to convert.
-     * @return The converted value.
-     */
-    public String format(Long timeValue) {
-        if (timeValue == null) {
-            return null;
-        } else {
-            LocalDateTime dt = origin.plus(timeValue, unit);
-            return dateFormatter.format(dt);
-        }
-    }
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/IntColumnType.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/IntColumnType.java
deleted file mode 100644
index 305d08911..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/IntColumnType.java
+++ /dev/null
@@ -1,41 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.columndefinition;
-
-/**
- * A column type with integer (4 byte) values.
- *
- * @author balage
- *
- */
-public class IntColumnType extends AbstractColumnType<Integer> {
-
-    /**
-     * Konstructor. The column will use the default values for null.
-     */
-    public IntColumnType() {
-        super();
-    }
-
-    /**
-     * Konstructor.
-     *
-     * @param nullValue
-     *            The text representation for null values.
-     */
-    public IntColumnType(String nullValue) {
-        super(nullValue);
-    }
-
-    @Override
-    protected String convertNotNull(Integer data) {
-        return data.toString();
-    }
-
-    /**
-     * {@inheritDoc} Only accepts Integer values.
-     */
-    @Override
-    public boolean accepts(Object data) {
-        return data instanceof Integer;
-    }
-
-}
\ No newline at end of file
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/LongColumnType.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/LongColumnType.java
deleted file mode 100644
index 5be5b1557..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/LongColumnType.java
+++ /dev/null
@@ -1,42 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.columndefinition;
-
-/**
- * A column type with long (8-byte) values.
- *
- * @author balage
- *
- */
-public class LongColumnType extends AbstractColumnType<Long> {
-
-    /**
-     * Konstructor. The column will use the default values for null.
-     */
-    public LongColumnType() {
-        super();
-    }
-
-    /**
-     * Konstructor.
-     *
-     * @param nullValue
-     *            The text representation for null values.
-     */
-    public LongColumnType(String nullValue) {
-        super(nullValue);
-    }
-
-    @Override
-    protected String convertNotNull(Long data) {
-        return data.toString();
-    }
-
-    /**
-     * {@inheritDoc} Only accepts Long values.
-     */
-    @Override
-    public boolean accepts(Object data) {
-        return data instanceof Long;
-    }
-
-
-}
\ No newline at end of file
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/StringColumnType.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/StringColumnType.java
deleted file mode 100644
index 4468eb336..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/StringColumnType.java
+++ /dev/null
@@ -1,42 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.columndefinition;
-
-/**
- * A column type for any values.
- *
- * @author balage
- *
- */
-public class StringColumnType extends AbstractColumnType<Object> {
-
-    /**
-     * Konstructor. The column will use the default values for null.
-     */
-    public StringColumnType() {
-        super();
-    }
-
-    /**
-     * Konstructor.
-     *
-     * @param nullValue
-     *            The text representation for null values.
-     */
-    public StringColumnType(String nullValue) {
-        super(nullValue);
-    }
-
-    @Override
-    protected String convertNotNull(Object data) {
-        return data.toString();
-    }
-
-    /**
-     * {@inheritDoc} Accepts any type of values (uses
-     * {@linkplain Object#toString()}).
-     */
-    @Override
-    public boolean accepts(Object data) {
-        return true;
-    }
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/job/JobPrinterContext.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/job/JobPrinterContext.java
deleted file mode 100644
index 08e1bc591..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/job/JobPrinterContext.java
+++ /dev/null
@@ -1,21 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.job;
-
-import com.graphhopper.jsprit.core.problem.job.AbstractJob;
-import com.graphhopper.jsprit.core.reporting.PrinterContext;
-
-/**
- * The context of the detailed route printer columns.
- *
- * <p>
- * This is a semi-mutable class: only the activity could be altered. Therefore
- * for each route a new instance should be created.
- * </p>
- *
- * @author balage
- *
- */
-public interface JobPrinterContext extends PrinterContext {
-
-    public AbstractJob getJob();
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/AbstractVehicleDurationPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/AbstractVehicleDurationPrinterColumn.java
deleted file mode 100644
index 07a42ec33..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/AbstractVehicleDurationPrinterColumn.java
+++ /dev/null
@@ -1,184 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.vehicle;
-
-import java.util.function.Consumer;
-
-import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnAlignment;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.columndefinition.HumanReadableDurationFormatter;
-import com.graphhopper.jsprit.core.reporting.columndefinition.HumanReadableTimeFormatter;
-import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
-
-/**
- * Abstract base class for time and (technically) duration columns.
- *
- * <p>
- * Each columns derived from this abstract base has two variants: a numerical
- * (an integer value) and a human readable. The numerical value displays the
- * integer value representing the time values internally. The human readable
- * value converts this value into a calendar (date and time) value.
- * </p>
- *
- * @author balage
- *
- * @param <T>
- *            Self reference.
- * @See {@linkplain HumanReadableTimeFormatter}
- */
-public abstract class AbstractVehicleDurationPrinterColumn<T extends AbstractVehicleDurationPrinterColumn<T>>
-extends AbstractPrinterColumn<VehicleSummaryContext, String, AbstractVehicleDurationPrinterColumn<T>> {
-
-    public enum Mode {
-        NUMERIC(""), HUMAN_READABLE(" (H)"), PERCENT_ROUTE(" (R%)"), PERCENT_SHIFT(" (S%)");
-
-        private String postfix;
-
-        private Mode(String postfix) {
-            this.postfix = postfix;
-        }
-
-        public String getPostfix() {
-            return postfix;
-        }
-    }
-
-    // The time formatter to use (only used when humanReadable flag is true)
-    private HumanReadableDurationFormatter formatter;
-    // Whether to use human readable form
-    private Mode mode = Mode.NUMERIC;
-    // Percent decimals
-    private int percentDecimals = 2;
-
-    /**
-     * Constructor to define a numeric format column.
-     */
-    public AbstractVehicleDurationPrinterColumn() {
-        this(null);
-    }
-
-    /**
-     * Constructor to define a numeric format column, with a post creation
-     * decorator provided.
-     */
-    public AbstractVehicleDurationPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
-        super(decorator);
-        formatter = new HumanReadableDurationFormatter();
-        withDisplayMode(Mode.NUMERIC);
-    }
-
-    /**
-     * @param formatter
-     *            The formatter used for {@linkplain Mode#HUMAN_READABLE}
-     *            format.
-     *
-     */
-    @SuppressWarnings("unchecked")
-    public T withFormatter(HumanReadableDurationFormatter formatter) {
-        this.formatter = formatter;
-        return (T) this;
-    }
-
-    @Override
-    protected String getDefaultTitle() {
-        return getDefaultTitleBase() + mode.postfix;
-    }
-
-    /**
-     * @return The base of the default title. It will be extended by the
-     *         mode-specific postfix.
-     */
-    protected abstract String getDefaultTitleBase();
-
-    /**
-     * @param mode
-     *            The display mode.
-     */
-    @SuppressWarnings("unchecked")
-    public T withDisplayMode(Mode mode) {
-        this.mode = mode;
-        return (T) this;
-    }
-
-
-    /**
-     * @param digits
-     *            Number of decimal digits when mode is
-     *            {@linkplain Mode#PERCENT_SHIFT} or
-     *            {@linkplain Mode#PERCENT_ROUTE}.
-     * @throws IllegalArgumentException
-     *             When the digits parameter is negative.
-     */
-    @SuppressWarnings("unchecked")
-    public T withPercentDecimalDigits(int digits) {
-        if (digits < 0)
-            throw new IllegalArgumentException("Decimal digit count should be non-negative.");
-        this.percentDecimals = digits;
-        return (T) this;
-    }
-
-
-    /**
-     * {@inheritDoc}
-     *
-     * <p>
-     * The column builder returned will be a string column with the null value
-     * represented by a hyphen ("-").
-     * </p>
-     *
-     */
-    @Override
-    public ColumnDefinition.Builder getColumnBuilder() {
-        ColumnDefinition.Builder builder = new ColumnDefinition.Builder(new StringColumnType("-"));
-        if (mode != Mode.HUMAN_READABLE) {
-            builder.withAlignment(ColumnAlignment.RIGHT);
-        }
-        return builder;
-    }
-
-    /**
-     * {@inheritDoc}
-     *
-     * <p>
-     * The implementation delegates the value extracting to the abstract method
-     * <p>
-     * <p>
-     * If the value is null, returns null, otherwise it returns the string
-     * representation of the numeric value or the human readable format based on
-     * the humanReadable flag.
-     * </p>
-     *
-     */
-    @Override
-    public String getData(VehicleSummaryContext context) {
-        Long timeValue = getValue(context);
-        if (timeValue == null)
-            return null;
-        switch (mode) {
-        case NUMERIC:
-            return "" + timeValue;
-        case HUMAN_READABLE:
-            return formatter.format(timeValue);
-        case PERCENT_ROUTE:
-            return formatPercent(timeValue, context.getRouteDuration() - context.getBreakDuration());
-        case PERCENT_SHIFT:
-            return formatPercent(timeValue, context.getShiftDuration() - context.getBreakDuration());
-        default:
-            throw new AssertionError("Can't get here.");
-        }
-    }
-
-    private String formatPercent(Long timeValue, long total) {
-        double pct = (100d * timeValue) / total;
-        return String.format("%20." + percentDecimals + "f %%", pct).trim();
-    }
-
-    /**
-     * Extracts the numerical value for this time or duration column.
-     *
-     * @param context
-     *            The context.
-     * @return The numerical value or null.
-     */
-    protected abstract Long getValue(VehicleSummaryContext context);
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/AbstractVehicleTimeWindowPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/AbstractVehicleTimeWindowPrinterColumn.java
deleted file mode 100644
index 9f9988763..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/AbstractVehicleTimeWindowPrinterColumn.java
+++ /dev/null
@@ -1,150 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.vehicle;
-
-import java.util.Collection;
-import java.util.function.Consumer;
-import java.util.stream.Collectors;
-
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
-import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.columndefinition.HumanReadableEnabled;
-import com.graphhopper.jsprit.core.reporting.columndefinition.HumanReadableTimeFormatter;
-import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
-
-/**
- * Abstract base class for time window columns.
- *
- * <p>
- * Each columns derived from this abstract base has two variants: a numerical
- * (an integer value) and a human readable. The numerical value displays the
- * integer value pair representing the time windows, the same the algorithm used
- * internally. The human readable value converts this value into a calendar
- * (date and time) value pair.
- * </p>
- *
- * @author balage
- *
- * @param <T>
- *            Self reference.
- * @See {@linkplain HumanReadableTimeFormatter}
- */
-public abstract class AbstractVehicleTimeWindowPrinterColumn<T extends AbstractVehicleTimeWindowPrinterColumn<T>>
-extends AbstractPrinterColumn<VehicleSummaryContext, String, AbstractVehicleTimeWindowPrinterColumn<T>>
-implements HumanReadableEnabled<T> {
-
-    // The time formatter to use (only used when humanReadable flag is true)
-    private HumanReadableTimeFormatter formatter;
-    // Whether to use human readable form
-    private boolean humanReadable = false;
-
-    /**
-     * Constructor to define a numeric format column.
-     */
-    public AbstractVehicleTimeWindowPrinterColumn() {
-        this(null);
-    }
-
-    /**
-     * Constructor to define a numeric format column, with a post creation
-     * decorator provided.
-     */
-    public AbstractVehicleTimeWindowPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
-        super(decorator);
-        formatter = new HumanReadableTimeFormatter();
-    }
-
-    @Override
-    @SuppressWarnings("unchecked")
-    public T withFormatter(HumanReadableTimeFormatter formatter) {
-        this.formatter = formatter;
-        return (T) this;
-    }
-
-    @Override
-    @SuppressWarnings("unchecked")
-    public T asHumanReadable() {
-        this.humanReadable = true;
-        return (T) this;
-    }
-
-    @Override
-    protected String getDefaultTitle() {
-        return getDefaultTitleBase() + (humanReadable ? " (H)" : "");
-    }
-
-    protected abstract String getDefaultTitleBase();
-
-
-    @Override
-    public ColumnDefinition.Builder getColumnBuilder() {
-        return new ColumnDefinition.Builder(new StringColumnType("-"));
-    }
-
-    /**
-     * {@inheritDoc}
-     *
-     * <p>
-     * The implementation delegates the value extracting to the abstract method
-     * <p>
-     * <p>
-     * If the value is null or empty, returns null, otherwise it returns the
-     * string representation of the numeric value or the human readable format
-     * based on the humanReadable flag.
-     * </p>
-     *
-     */
-    @Override
-    public String getData(VehicleSummaryContext context) {
-        Collection<TimeWindow> timeWindows = getValue(context);
-        if (timeWindows == null || timeWindows.isEmpty())
-            return null;
-        return timeWindows.stream().map(tw -> formatTimeWindow(tw)).collect(Collectors.joining());
-    }
-
-    /**
-     * Formats the time window.
-     *
-     * <p>
-     * The implementation returns the two (start, end) values sepratated by
-     * hyphen (-) and wrapped within brackets. When the end value is
-     * {@linkplain Double#MAX_VALUE} it omits the value indicating open
-     * interval.
-     * </p>
-     *
-     * @param tw
-     *            The time window to format.
-     * @return The string representation of the time window.
-     */
-    protected String formatTimeWindow(TimeWindow tw) {
-        String res = "";
-        if (humanReadable) {
-            res = "[" + formatter.format((long) tw.getStart()) + "-";
-            if (tw.getEnd() == Double.MAX_VALUE) {
-                res += "";
-            } else {
-                res += formatter.format((long) tw.getEnd());
-            }
-            res += "]";
-
-        } else {
-            res = "[" + (long) tw.getStart() + "-";
-            if (tw.getEnd() == Double.MAX_VALUE) {
-                res += "";
-            } else {
-                res += (long) tw.getEnd();
-            }
-            res += "]";
-        }
-        return res;
-    }
-
-    /**
-     * Extracts the collection of time windows from the context.
-     *
-     * @param context
-     *            The context.
-     * @return The collection of time windows.
-     */
-    protected abstract Collection<TimeWindow> getValue(VehicleSummaryContext context);
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleActiveDurationPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleActiveDurationPrinterColumn.java
deleted file mode 100644
index b6a08db74..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleActiveDurationPrinterColumn.java
+++ /dev/null
@@ -1,46 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.vehicle;
-
-import java.util.function.Consumer;
-
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-
-/**
- * Travel duration toward the location of the activity.
- * <p>
- * The time it takes to travel to the location of the activity. The value is
- * undefined for route start activity (null).
- * </p>
- *
- * @author balage
- *
- */
-public class VehicleActiveDurationPrinterColumn extends AbstractVehicleDurationPrinterColumn<VehicleActiveDurationPrinterColumn> {
-
-
-    /**
-     * Constructor.
-     */
-    public VehicleActiveDurationPrinterColumn() {
-        super();
-    }
-
-    /**
-     * Constructor with a post creation decorator provided.
-     */
-    public VehicleActiveDurationPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
-        super(decorator);
-    }
-
-
-    @Override
-    protected String getDefaultTitleBase() {
-        return "active";
-    }
-
-    @Override
-    public Long getValue(VehicleSummaryContext context) {
-        return context.getActiveDuration();
-    }
-
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleActivityCountPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleActivityCountPrinterColumn.java
deleted file mode 100644
index 2f64e43df..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleActivityCountPrinterColumn.java
+++ /dev/null
@@ -1,55 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.vehicle;
-
-import java.util.function.Consumer;
-
-import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnAlignment;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition.Builder;
-import com.graphhopper.jsprit.core.reporting.columndefinition.IntColumnType;
-
-/**
- * Travel duration toward the location of the activity.
- * <p>
- * The time it takes to travel to the location of the activity. The value is
- * undefined for route start activity (null).
- * </p>
- *
- * @author balage
- *
- */
-public class VehicleActivityCountPrinterColumn
-                extends AbstractPrinterColumn<VehicleSummaryContext, Integer, VehicleActivityCountPrinterColumn> {
-
-    /**
-     * Constructor.
-     */
-    public VehicleActivityCountPrinterColumn() {
-        super();
-    }
-
-    /**
-     * Constructor with a post creation decorator provided.
-     */
-    public VehicleActivityCountPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
-        super(decorator);
-    }
-
-    @Override
-    protected Builder getColumnBuilder() {
-        return new ColumnDefinition.Builder(new IntColumnType()).withAlignment(ColumnAlignment.RIGHT);
-    }
-
-    @Override
-    public Integer getData(VehicleSummaryContext context) {
-        return context.getActivityCount();
-    }
-
-    @Override
-    protected String getDefaultTitle() {
-        return "act count";
-    }
-
-
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleActivityTypeCountPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleActivityTypeCountPrinterColumn.java
deleted file mode 100644
index c8dfdcc45..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleActivityTypeCountPrinterColumn.java
+++ /dev/null
@@ -1,62 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.vehicle;
-
-import java.util.function.Consumer;
-
-import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnAlignment;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition.Builder;
-import com.graphhopper.jsprit.core.reporting.columndefinition.IntColumnType;
-
-/**
- * Travel duration toward the location of the activity.
- * <p>
- * The time it takes to travel to the location of the activity. The value is
- * undefined for route start activity (null).
- * </p>
- *
- * @author balage
- *
- */
-public class VehicleActivityTypeCountPrinterColumn
-                extends AbstractPrinterColumn<VehicleSummaryContext, Integer, VehicleActivityTypeCountPrinterColumn> {
-
-    private String activityType = "";
-
-    /**
-     * Constructor.
-     */
-    public VehicleActivityTypeCountPrinterColumn() {
-        super();
-    }
-
-    /**
-     * Constructor with a post creation decorator provided.
-     */
-    public VehicleActivityTypeCountPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
-        super(decorator);
-    }
-
-    public VehicleActivityTypeCountPrinterColumn forActivity(String type) {
-        activityType = type;
-        return this;
-    }
-
-    @Override
-    protected Builder getColumnBuilder() {
-        return new ColumnDefinition.Builder(new IntColumnType("0")).withAlignment(ColumnAlignment.RIGHT);
-    }
-
-    @Override
-    public Integer getData(VehicleSummaryContext context) {
-        return context.getActivityCountByType().getOrDefault(activityType, 0);
-    }
-
-    @Override
-    protected String getDefaultTitle() {
-        return activityType;
-    }
-
-
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleAllActivityTypeCountPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleAllActivityTypeCountPrinterColumn.java
deleted file mode 100644
index aa4f94db1..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleAllActivityTypeCountPrinterColumn.java
+++ /dev/null
@@ -1,57 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.vehicle;
-
-import java.util.function.Consumer;
-import java.util.stream.Collectors;
-
-import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition.Builder;
-import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
-
-/**
- * Travel duration toward the location of the activity.
- * <p>
- * The time it takes to travel to the location of the activity. The value is
- * undefined for route start activity (null).
- * </p>
- *
- * @author balage
- *
- */
-public class VehicleAllActivityTypeCountPrinterColumn
-extends AbstractPrinterColumn<VehicleSummaryContext, String, VehicleAllActivityTypeCountPrinterColumn> {
-
-    /**
-     * Constructor.
-     */
-    public VehicleAllActivityTypeCountPrinterColumn() {
-        super();
-    }
-
-    /**
-     * Constructor with a post creation decorator provided.
-     */
-    public VehicleAllActivityTypeCountPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
-        super(decorator);
-    }
-
-    @Override
-    protected Builder getColumnBuilder() {
-        return new ColumnDefinition.Builder(new StringColumnType());
-    }
-
-    @Override
-    public String getData(VehicleSummaryContext context) {
-        return context.getActivityCountByType().entrySet().stream()
-                        .map(en -> "[" + en.getKey() + "=" + en.getValue() + "]")
-                        .collect(Collectors.joining());
-    }
-
-    @Override
-    protected String getDefaultTitle() {
-        return "act counts";
-    }
-
-
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleDriverNamePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleDriverNamePrinterColumn.java
deleted file mode 100644
index a47d06916..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleDriverNamePrinterColumn.java
+++ /dev/null
@@ -1,49 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.vehicle;
-
-import java.util.function.Consumer;
-
-import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
-
-/**
- * The name of the vehicle associated by this route.
- *
- * <p>
- * This colum returns the id of the vehicle of the route.
- * </p>
- *
- * @author balage
- */
-public class VehicleDriverNamePrinterColumn extends AbstractPrinterColumn<VehicleSummaryContext, String, VehicleDriverNamePrinterColumn> {
-
-    /**
-     * Constructor.
-     */
-    public VehicleDriverNamePrinterColumn() {
-        super();
-    }
-
-    /**
-     * Constructor with a post creation decorator provided.
-     */
-    public VehicleDriverNamePrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
-        super(decorator);
-    }
-
-    @Override
-    public ColumnDefinition.Builder getColumnBuilder() {
-        return new ColumnDefinition.Builder(new StringColumnType());
-    }
-
-    @Override
-    protected String getDefaultTitle() {
-        return "driver";
-    }
-
-    @Override
-    public String getData(VehicleSummaryContext context) {
-        return context.getDriver().getId();
-    }
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleIdleDurationPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleIdleDurationPrinterColumn.java
deleted file mode 100644
index 1a5980984..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleIdleDurationPrinterColumn.java
+++ /dev/null
@@ -1,46 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.vehicle;
-
-import java.util.function.Consumer;
-
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-
-/**
- * Travel duration toward the location of the activity.
- * <p>
- * The time it takes to travel to the location of the activity. The value is
- * undefined for route start activity (null).
- * </p>
- *
- * @author balage
- *
- */
-public class VehicleIdleDurationPrinterColumn extends AbstractVehicleDurationPrinterColumn<VehicleIdleDurationPrinterColumn> {
-
-
-    /**
-     * Constructor.
-     */
-    public VehicleIdleDurationPrinterColumn() {
-        super();
-    }
-
-    /**
-     * Constructor with a post creation decorator provided.
-     */
-    public VehicleIdleDurationPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
-        super(decorator);
-    }
-
-
-    @Override
-    protected String getDefaultTitleBase() {
-        return "idle";
-    }
-
-    @Override
-    public Long getValue(VehicleSummaryContext context) {
-        return context.getIdleDuration();
-    }
-
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleOperationDurationPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleOperationDurationPrinterColumn.java
deleted file mode 100644
index 1bf46ba4f..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleOperationDurationPrinterColumn.java
+++ /dev/null
@@ -1,46 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.vehicle;
-
-import java.util.function.Consumer;
-
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-
-/**
- * Travel duration toward the location of the activity.
- * <p>
- * The time it takes to travel to the location of the activity. The value is
- * undefined for route start activity (null).
- * </p>
- *
- * @author balage
- *
- */
-public class VehicleOperationDurationPrinterColumn extends AbstractVehicleDurationPrinterColumn<VehicleOperationDurationPrinterColumn> {
-
-
-    /**
-     * Constructor.
-     */
-    public VehicleOperationDurationPrinterColumn() {
-        super();
-    }
-
-    /**
-     * Constructor with a post creation decorator provided.
-     */
-    public VehicleOperationDurationPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
-        super(decorator);
-    }
-
-
-    @Override
-    protected String getDefaultTitleBase() {
-        return "oper";
-    }
-
-    @Override
-    public Long getValue(VehicleSummaryContext context) {
-        return context.getOperationDuration();
-    }
-
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleRouteDurationPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleRouteDurationPrinterColumn.java
deleted file mode 100644
index 501787ab8..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleRouteDurationPrinterColumn.java
+++ /dev/null
@@ -1,46 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.vehicle;
-
-import java.util.function.Consumer;
-
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-
-/**
- * Travel duration toward the location of the activity.
- * <p>
- * The time it takes to travel to the location of the activity. The value is
- * undefined for route start activity (null).
- * </p>
- *
- * @author balage
- *
- */
-public class VehicleRouteDurationPrinterColumn extends AbstractVehicleDurationPrinterColumn<VehicleRouteDurationPrinterColumn> {
-
-
-    /**
-     * Constructor.
-     */
-    public VehicleRouteDurationPrinterColumn() {
-        super();
-    }
-
-    /**
-     * Constructor with a post creation decorator provided.
-     */
-    public VehicleRouteDurationPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
-        super(decorator);
-    }
-
-
-    @Override
-    protected String getDefaultTitleBase() {
-        return "route";
-    }
-
-    @Override
-    public Long getValue(VehicleSummaryContext context) {
-        return context.getRouteDuration();
-    }
-
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleRouteNumberPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleRouteNumberPrinterColumn.java
deleted file mode 100644
index e9084f706..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleRouteNumberPrinterColumn.java
+++ /dev/null
@@ -1,49 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.vehicle;
-
-import java.util.function.Consumer;
-
-import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.columndefinition.IntColumnType;
-
-/**
- * The order number of the route.
- *
- * <p>
- * This is the ordinal of the route.
- * </p>
- *
- * @author balage
- */
-public class VehicleRouteNumberPrinterColumn extends AbstractPrinterColumn<VehicleSummaryContext, Integer, VehicleRouteNumberPrinterColumn> {
-
-    /**
-     * Constructor.
-     */
-    public VehicleRouteNumberPrinterColumn() {
-        super();
-    }
-
-    /**
-     * Constructor with a post creation decorator provided.
-     */
-    public VehicleRouteNumberPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
-        super(decorator);
-    }
-
-    @Override
-    public ColumnDefinition.Builder getColumnBuilder() {
-        return new ColumnDefinition.Builder(new IntColumnType());
-    }
-
-    @Override
-    protected String getDefaultTitle() {
-        return "route nr";
-    }
-
-    @Override
-    public Integer getData(VehicleSummaryContext context) {
-        return context.getRouteNr();
-    }
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleRouteTimeWindowPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleRouteTimeWindowPrinterColumn.java
deleted file mode 100644
index 2e3b4525d..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleRouteTimeWindowPrinterColumn.java
+++ /dev/null
@@ -1,47 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.vehicle;
-
-import java.util.Collection;
-import java.util.Collections;
-import java.util.function.Consumer;
-
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-
-/**
- * Travel duration toward the location of the activity.
- * <p>
- * The time it takes to travel to the location of the activity. The value is
- * undefined for route start activity (null).
- * </p>
- *
- * @author balage
- *
- */
-public class VehicleRouteTimeWindowPrinterColumn
-extends AbstractVehicleTimeWindowPrinterColumn<VehicleRouteTimeWindowPrinterColumn> {
-
-    /**
-     * Constructor.
-     */
-    public VehicleRouteTimeWindowPrinterColumn() {
-        super();
-    }
-
-    /**
-     * Constructor with a post creation decorator provided.
-     */
-    public VehicleRouteTimeWindowPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
-        super(decorator);
-    }
-
-    @Override
-    protected Collection<TimeWindow> getValue(VehicleSummaryContext context) {
-        return Collections.singleton(new TimeWindow(context.getStart(), context.getEnd()));
-    }
-
-    @Override
-    protected String getDefaultTitleBase() {
-        return "route tw";
-    }
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleShiftDurationPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleShiftDurationPrinterColumn.java
deleted file mode 100644
index 47cdce73a..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleShiftDurationPrinterColumn.java
+++ /dev/null
@@ -1,46 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.vehicle;
-
-import java.util.function.Consumer;
-
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-
-/**
- * Travel duration toward the location of the activity.
- * <p>
- * The time it takes to travel to the location of the activity. The value is
- * undefined for route start activity (null).
- * </p>
- *
- * @author balage
- *
- */
-public class VehicleShiftDurationPrinterColumn extends AbstractVehicleDurationPrinterColumn<VehicleShiftDurationPrinterColumn> {
-
-
-    /**
-     * Constructor.
-     */
-    public VehicleShiftDurationPrinterColumn() {
-        super();
-    }
-
-    /**
-     * Constructor with a post creation decorator provided.
-     */
-    public VehicleShiftDurationPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
-        super(decorator);
-    }
-
-
-    @Override
-    protected String getDefaultTitleBase() {
-        return "shift";
-    }
-
-    @Override
-    public Long getValue(VehicleSummaryContext context) {
-        return context.getShiftDuration();
-    }
-
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleShiftTimeWindowPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleShiftTimeWindowPrinterColumn.java
deleted file mode 100644
index 7590eb138..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleShiftTimeWindowPrinterColumn.java
+++ /dev/null
@@ -1,48 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.vehicle;
-
-import java.util.Collection;
-import java.util.Collections;
-import java.util.function.Consumer;
-
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-
-/**
- * Travel duration toward the location of the activity.
- * <p>
- * The time it takes to travel to the location of the activity. The value is
- * undefined for route start activity (null).
- * </p>
- *
- * @author balage
- *
- */
-public class VehicleShiftTimeWindowPrinterColumn
-extends AbstractVehicleTimeWindowPrinterColumn<VehicleShiftTimeWindowPrinterColumn> {
-
-    /**
-     * Constructor.
-     */
-    public VehicleShiftTimeWindowPrinterColumn() {
-        super();
-    }
-
-    /**
-     * Constructor with a post creation decorator provided.
-     */
-    public VehicleShiftTimeWindowPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
-        super(decorator);
-    }
-
-    @Override
-    protected Collection<TimeWindow> getValue(VehicleSummaryContext context) {
-        return Collections.singleton(
-                        new TimeWindow(context.getVehicle().getEarliestDeparture(), context.getVehicle().getLatestArrival()));
-    }
-
-    @Override
-    protected String getDefaultTitleBase() {
-        return "shift tw";
-    }
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleSummaryColumnLists.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleSummaryColumnLists.java
deleted file mode 100644
index 60ddadb9b..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleSummaryColumnLists.java
+++ /dev/null
@@ -1,152 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.vehicle;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.EnumMap;
-import java.util.List;
-
-import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.PrinterColumnList;
-import com.graphhopper.jsprit.core.reporting.columndefinition.HumanReadableDurationFormatter;
-import com.graphhopper.jsprit.core.reporting.columndefinition.HumanReadableEnabled;
-import com.graphhopper.jsprit.core.reporting.columndefinition.HumanReadableTimeFormatter;
-import com.graphhopper.jsprit.core.reporting.vehicle.AbstractVehicleDurationPrinterColumn.Mode;
-
-/**
- * Utility class to provide predefined column lists for Solution printing.
- *
- * @author balage
- *
- */
-public class VehicleSummaryColumnLists {
-
-    /**
-     * The predefined column sets.
-     *
-     * @author balage
-     *
-     */
-    public enum PredefinedList {
-        /**
-         * A minimal column set.
-         */
-        MINIMAL,
-        /**
-         * A general, most often used column set.
-         */
-        DEFAULT,
-        /**
-         * A verbose column set containing all columns.
-         */
-        VERBOSE
-    }
-
-    private static final EnumMap<PredefinedList, List<Class<? extends AbstractPrinterColumn<VehicleSummaryContext, ?, ?>>>> COLUMNS;
-
-    static {
-        COLUMNS = new EnumMap<>(PredefinedList.class);
-        List<Class<? extends AbstractPrinterColumn<VehicleSummaryContext, ?, ?>>> minimalSet = new ArrayList<>();
-        minimalSet.add(VehicleRouteNumberPrinterColumn.class);
-        minimalSet.add(VehicleTruckNamePrinterColumn.class);
-        minimalSet.add(VehicleAllActivityTypeCountPrinterColumn.class);
-        minimalSet.add(VehicleRouteDurationPrinterColumn.class);
-        minimalSet.add(VehicleActiveDurationPrinterColumn.class);
-        COLUMNS.put(PredefinedList.MINIMAL, minimalSet);
-
-        List<Class<? extends AbstractPrinterColumn<VehicleSummaryContext, ?, ?>>> defaultSet = new ArrayList<>();
-        defaultSet.add(VehicleRouteNumberPrinterColumn.class);
-        defaultSet.add(VehicleTruckNamePrinterColumn.class);
-        defaultSet.add(VehicleAllActivityTypeCountPrinterColumn.class);
-        defaultSet.add(VehicleRouteTimeWindowPrinterColumn.class);
-        defaultSet.add(VehicleRouteDurationPrinterColumn.class);
-        defaultSet.add(VehicleTravelDurationPrinterColumn.class);
-        defaultSet.add(VehicleOperationDurationPrinterColumn.class);
-        defaultSet.add(VehicleActiveDurationPrinterColumn.class);
-        defaultSet.add(VehicleIdleDurationPrinterColumn.class);
-        COLUMNS.put(PredefinedList.DEFAULT, defaultSet);
-
-        List<Class<? extends AbstractPrinterColumn<VehicleSummaryContext, ?, ?>>> verboseSet = new ArrayList<>();
-        verboseSet.add(VehicleRouteNumberPrinterColumn.class);//
-        verboseSet.add(VehicleTruckNamePrinterColumn.class); //
-        verboseSet.add(VehicleTypePrinterColumn.class);//
-        verboseSet.add(VehicleDriverNamePrinterColumn.class); //
-        verboseSet.add(VehicleActivityCountPrinterColumn.class);//
-        verboseSet.add(VehicleAllActivityTypeCountPrinterColumn.class);//
-        verboseSet.add(VehicleShiftTimeWindowPrinterColumn.class);//
-        verboseSet.add(VehicleShiftDurationPrinterColumn.class);//
-        verboseSet.add(VehicleRouteTimeWindowPrinterColumn.class); //
-        verboseSet.add(VehicleRouteDurationPrinterColumn.class); //
-        verboseSet.add(VehicleTravelDurationPrinterColumn.class);
-        verboseSet.add(VehicleOperationDurationPrinterColumn.class);
-        verboseSet.add(VehicleActiveDurationPrinterColumn.class);
-        verboseSet.add(VehicleIdleDurationPrinterColumn.class);
-        COLUMNS.put(PredefinedList.VERBOSE, verboseSet);
-    }
-
-    public static PrinterColumnList<VehicleSummaryContext> getNumeric(PredefinedList listType) {
-        return getList(listType, Collections.singletonList(Mode.NUMERIC), false, null, null);
-    }
-
-    public static PrinterColumnList<VehicleSummaryContext> getHumanReadable(PredefinedList listType) {
-        return getList(listType, Collections.singletonList(Mode.HUMAN_READABLE), true, null, null);
-    }
-
-    public static PrinterColumnList<VehicleSummaryContext> getMultiple(PredefinedList listType, Mode... durationModes) {
-        List<Mode> modes = Arrays.asList(durationModes);
-        return getMultiple(listType, modes);
-    }
-
-    public static PrinterColumnList<VehicleSummaryContext> getMultiple(PredefinedList listType, List<Mode> durationModes) {
-        return getList(listType, durationModes, durationModes.contains(Mode.HUMAN_READABLE), null, null);
-    }
-
-    /**
-     * Generates the list.
-     *
-     * @param listType
-     *            The id of the list.
-     * @param humanReadable
-     *            Whether human readable format should be used
-     * @param timeFormatter
-     *            The formatter to use (if null, the default will be used)
-     * @return The generated column list.
-     */
-    public static PrinterColumnList<VehicleSummaryContext> getList(PredefinedList listType, List<Mode> durationModes,
-            boolean humanReadableTimeWindows, HumanReadableTimeFormatter timeWindowTimeFormatter,
-            HumanReadableDurationFormatter durationFormatter) {
-        PrinterColumnList<VehicleSummaryContext> res = new PrinterColumnList<>();
-
-        for (Class<? extends AbstractPrinterColumn<VehicleSummaryContext, ?, ?>> c : COLUMNS.get(listType)) {
-            try {
-                if (AbstractVehicleDurationPrinterColumn.class.isAssignableFrom(c)) {
-                    for(Mode mode : durationModes) {
-                        AbstractVehicleDurationPrinterColumn<?> col = (AbstractVehicleDurationPrinterColumn<?>) c.newInstance();
-                        if (durationFormatter != null) {
-                            col.withFormatter(durationFormatter);
-                        }
-                        col.withDisplayMode(mode);
-                        res.addColumn(col);
-                    }
-                } else {
-                    AbstractPrinterColumn<VehicleSummaryContext, ?, ?> col = c.newInstance();
-                    if (humanReadableTimeWindows && col instanceof HumanReadableEnabled) {
-                        HumanReadableEnabled<?> hrCol = (HumanReadableEnabled<?>) col;
-                        hrCol.asHumanReadable();
-                        if (durationFormatter != null) {
-                            hrCol.withFormatter(durationFormatter);
-                        }
-                    }
-                    res.addColumn(col);
-                }
-            } catch (InstantiationException | IllegalAccessException e) {
-                // Technically you can't get here as long as all column
-                // implementation has default constructor
-                throw new IllegalStateException(e);
-            }
-        }
-
-        return res;
-    }
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleSummaryContext.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleSummaryContext.java
deleted file mode 100644
index c658c1d97..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleSummaryContext.java
+++ /dev/null
@@ -1,135 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.vehicle;
-
-import java.util.HashMap;
-import java.util.Map;
-
-import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.driver.Driver;
-import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.BreakActivity;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
-import com.graphhopper.jsprit.core.reporting.PrinterContext;
-
-public class VehicleSummaryContext implements PrinterContext {
-    private Vehicle vehicle;
-    private Driver driver;
-    private int routeNr;
-    private long start;
-    private long end;
-    private int activityCount = 0;
-    private Map<String, Integer> activityCountByType = new HashMap<>();
-    private long travelDuration;
-    private long operationDuration;
-    private long breakDuration;
-    private long travelDistance;
-
-    public VehicleSummaryContext(VehicleRoute route, VehicleRoutingProblem problem) {
-        routeNr = route.getId();
-        vehicle = route.getVehicle();
-        driver = route.getDriver();
-        start = (long) route.getStart().getEndTime();
-        end = (long) route.getEnd().getArrTime();
-
-        TourActivity prevAct = route.getStart();
-        for (TourActivity act : route.getActivities()) {
-            if (act instanceof BreakActivity) {
-                breakDuration += act.getOperationTime();
-            } else
-                if (act instanceof JobActivity) {
-                    JobActivity jobAct = (JobActivity) act;
-                    activityCount++;
-                    String type = jobAct.getType();
-                    if (!activityCountByType.containsKey(type)) {
-                        activityCountByType.put(type, 0);
-                    }
-                    activityCountByType.put(type, activityCountByType.get(type) + 1);
-                    operationDuration += jobAct.getOperationTime();
-                    travelDuration += problem.getTransportCosts().getTransportTime(prevAct.getLocation(),
-                                    act.getLocation(),act.getArrTime(), route.getDriver(),
-                                    route.getVehicle());
-                }
-            prevAct = act;
-        }
-    }
-
-    public String getVehicleId() {
-        return vehicle.getId();
-    }
-
-    public String getDriverId() {
-        return driver.getId();
-    }
-
-    public int getRouteNr() {
-        return routeNr;
-    }
-
-    public long getStart() {
-        return start;
-    }
-
-    public long getEnd() {
-        return end;
-    }
-
-    public int getActivityCount() {
-        return activityCount;
-    }
-
-    public Map<String, Integer> getActivityCountByType() {
-        return activityCountByType;
-    }
-
-    public long getTravelDuration() {
-        return travelDuration;
-    }
-
-    public long getOperationDuration() {
-        return operationDuration;
-    }
-
-    public long getShiftDuration() {
-        return vehicle.getLatestArrival() == Double.MAX_VALUE ? getRouteDuration()
-                        : (long) (vehicle.getLatestArrival() - vehicle.getEarliestDeparture());
-    }
-
-    public long getRouteDuration() {
-        return end - start;
-    }
-
-    public long getTravelDistance() {
-        return travelDistance;
-    }
-
-    public long getBreakDuration() {
-        return breakDuration;
-    }
-
-    public Vehicle getVehicle() {
-        return vehicle;
-    }
-
-    public Driver getDriver() {
-        return driver;
-    }
-
-    @Override
-    public String toString() {
-        return "VehicleStatisticsContext [vehicleId=" + vehicle.getId() + ", driver=" + driver.getId() + ", routeNr=" + routeNr
-                        + ", start=" + start + ", end=" + end + ", activityCount=" + activityCount + ", activityCountByType="
-                        + activityCountByType + ", travelDuration=" + travelDuration + ", operationDuration=" + operationDuration
-                        + ", totalDuration=" + getRouteDuration() + ", travelDistance=" + travelDistance + ", breakDuration="
-                        + breakDuration + "]";
-    }
-
-    public Long getActiveDuration() {
-        return getTravelDuration() + getOperationDuration();
-    }
-
-    public Long getIdleDuration() {
-        return getRouteDuration() - (getActiveDuration() + getBreakDuration());
-    }
-
-}
\ No newline at end of file
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleTravelDurationPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleTravelDurationPrinterColumn.java
deleted file mode 100644
index 0b2fb7a70..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleTravelDurationPrinterColumn.java
+++ /dev/null
@@ -1,46 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.vehicle;
-
-import java.util.function.Consumer;
-
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-
-/**
- * Travel duration toward the location of the activity.
- * <p>
- * The time it takes to travel to the location of the activity. The value is
- * undefined for route start activity (null).
- * </p>
- *
- * @author balage
- *
- */
-public class VehicleTravelDurationPrinterColumn extends AbstractVehicleDurationPrinterColumn<VehicleTravelDurationPrinterColumn> {
-
-
-    /**
-     * Constructor.
-     */
-    public VehicleTravelDurationPrinterColumn() {
-        super();
-    }
-
-    /**
-     * Constructor with a post creation decorator provided.
-     */
-    public VehicleTravelDurationPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
-        super(decorator);
-    }
-
-
-    @Override
-    protected String getDefaultTitleBase() {
-        return "travel";
-    }
-
-    @Override
-    public Long getValue(VehicleSummaryContext context) {
-        return context.getTravelDuration();
-    }
-
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleTruckNamePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleTruckNamePrinterColumn.java
deleted file mode 100644
index 726fb82af..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleTruckNamePrinterColumn.java
+++ /dev/null
@@ -1,49 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.vehicle;
-
-import java.util.function.Consumer;
-
-import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
-
-/**
- * The name of the vehicle associated by this route.
- *
- * <p>
- * This colum returns the id of the vehicle of the route.
- * </p>
- *
- * @author balage
- */
-public class VehicleTruckNamePrinterColumn extends AbstractPrinterColumn<VehicleSummaryContext, String, VehicleTruckNamePrinterColumn> {
-
-    /**
-     * Constructor.
-     */
-    public VehicleTruckNamePrinterColumn() {
-        super();
-    }
-
-    /**
-     * Constructor with a post creation decorator provided.
-     */
-    public VehicleTruckNamePrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
-        super(decorator);
-    }
-
-    @Override
-    public ColumnDefinition.Builder getColumnBuilder() {
-        return new ColumnDefinition.Builder(new StringColumnType());
-    }
-
-    @Override
-    protected String getDefaultTitle() {
-        return "vehicle";
-    }
-
-    @Override
-    public String getData(VehicleSummaryContext context) {
-        return context.getVehicle().getId();
-    }
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleTypePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleTypePrinterColumn.java
deleted file mode 100644
index ea6035c6b..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleTypePrinterColumn.java
+++ /dev/null
@@ -1,49 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.vehicle;
-
-import java.util.function.Consumer;
-
-import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
-
-/**
- * The name of the vehicle associated by this route.
- *
- * <p>
- * This colum returns the id of the vehicle of the route.
- * </p>
- *
- * @author balage
- */
-public class VehicleTypePrinterColumn extends AbstractPrinterColumn<VehicleSummaryContext, String, VehicleTypePrinterColumn> {
-
-    /**
-     * Constructor.
-     */
-    public VehicleTypePrinterColumn() {
-        super();
-    }
-
-    /**
-     * Constructor with a post creation decorator provided.
-     */
-    public VehicleTypePrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
-        super(decorator);
-    }
-
-    @Override
-    public ColumnDefinition.Builder getColumnBuilder() {
-        return new ColumnDefinition.Builder(new StringColumnType());
-    }
-
-    @Override
-    protected String getDefaultTitle() {
-        return "vehicle type";
-    }
-
-    @Override
-    public String getData(VehicleSummaryContext context) {
-        return context.getVehicle().getType().getTypeId();
-    }
-
-}
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CVRPwithDeliveries_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CVRPwithDeliveries_IT.java
index 2cd819932..6ef97cfac 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CVRPwithDeliveries_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CVRPwithDeliveries_IT.java
@@ -29,10 +29,6 @@
 import com.graphhopper.jsprit.core.reporting.SolutionPrinter;
 import com.graphhopper.jsprit.core.reporting.SolutionPrinter.Print;
 import com.graphhopper.jsprit.core.reporting.SolutionPrinter2;
-import com.graphhopper.jsprit.core.reporting.SolutionPrinter_depr;
-import com.graphhopper.jsprit.core.reporting.vehicle.AbstractVehicleDurationPrinterColumn.Mode;
-import com.graphhopper.jsprit.core.reporting.vehicle.VehicleSummaryColumnLists;
-import com.graphhopper.jsprit.core.reporting.vehicle.VehicleSummaryColumnLists.PredefinedList;
 import com.graphhopper.jsprit.core.util.ChristofidesReader;
 import com.graphhopper.jsprit.core.util.JobType;
 import com.graphhopper.jsprit.core.util.Solutions;
@@ -52,9 +48,6 @@ public void whenSolvingVRPNC1withDeliveriesWithJsprit_solutionsMustNoBeWorseThan
         SolutionPrinter.print(vrp, bestSolution, Print.VERBOSE);
         System.out.println(
                 "\n\n================================================================================\n\n");
-        SolutionPrinter_depr.printVehicleSummary(vrp, bestSolution,
-                VehicleSummaryColumnLists.getMultiple(PredefinedList.VERBOSE, Mode.values()));
-
         System.out.println(
                 "\n\n================================================================================\n\n");
 
