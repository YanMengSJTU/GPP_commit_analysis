diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsOptimized.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsOptimized.java
index dae6b1e12..ff30a64c5 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsOptimized.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsOptimized.java
@@ -108,6 +108,7 @@ private void calculateDistancesFromJob2Job() {
                 jobList.add(referencedJob);
             }
             Collections.sort(jobList,getComparator());
+            
             int[] jobIndices = new int[capacity];
             for(int index=0;index<capacity;index++){
                 jobIndices[index] = jobList.get(index).getJob().getIndex();
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/MapDistanceCosts.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/MapDistanceCosts.java
new file mode 100644
index 000000000..388d9382d
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/MapDistanceCosts.java
@@ -0,0 +1,82 @@
+package com.graphhopper.jsprit.core.util;
+
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.cost.AbstractForwardVehicleRoutingTransportCosts;
+import com.graphhopper.jsprit.core.problem.cost.TransportDistance;
+import com.graphhopper.jsprit.core.problem.driver.Driver;
+import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
+
+/*
+ * we'll use a database storage somewhere down the road for this process
+ * 
+ */
+public class MapDistanceCosts extends AbstractForwardVehicleRoutingTransportCosts implements TransportDistance{
+
+	//how many meters per minute? 30 meters per minute
+	public int speed = 30; 
+
+    private Locations locations;
+
+    public MapDistanceCosts(Locations locations) {
+        super();
+        this.locations = locations;
+    }
+
+    @Override
+    public String toString() {
+        return "[name=MapDistanceCosts]";
+    }
+    
+	@Override
+	public double getDistance(Location from, Location to, double departureTime, Vehicle vehicle) {
+		return calculateDistance(from, to);
+	}
+	
+	private double calculateDistance(Location fromLocation, Location toLocation) {
+        Coordinate from = null;
+        Coordinate to = null;
+        if (fromLocation.getCoordinate() != null & toLocation.getCoordinate() != null) {
+            from = fromLocation.getCoordinate();
+            to = toLocation.getCoordinate();
+        } else if (locations != null) {
+            from = locations.getCoord(fromLocation.getId());
+            to = locations.getCoord(toLocation.getId());
+        }
+        if (from == null || to == null) throw new NullPointerException();
+        return calculateDistance(from, to);
+    }
+	
+	//in the future we can override this
+	private double calculateDistance(Coordinate from, Coordinate to) {
+        return MapDistanceRetrievalFromFile.getDistanceFromFile(from, to);
+    }
+
+	@Override
+    public double getTransportTime(Location from, Location to, double time, Driver driver, Vehicle vehicle) {
+        double distance;
+        try {
+            distance = calculateDistance(from, to);
+        } catch (NullPointerException e) {
+            throw new NullPointerException("map distance is not in data registry");
+        }
+        return distance / speed;
+	}
+
+	@Override
+	public double getTransportCost(Location from, Location to, double departureTime, Driver driver, Vehicle vehicle) {
+		double distance;
+        try {
+            distance = calculateDistance(from, to);
+        } catch (NullPointerException e) {
+            throw new NullPointerException("map distance is not in data registry");
+        }
+        double costs = distance;
+        if (vehicle != null) {
+            if (vehicle.getType() != null) {
+                costs = distance * vehicle.getType().getVehicleCostParams().perDistanceUnit;
+            }
+        }
+        return costs;
+	}
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/MapDistanceRetrievalFromFile.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/MapDistanceRetrievalFromFile.java
new file mode 100644
index 000000000..3b0457336
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/MapDistanceRetrievalFromFile.java
@@ -0,0 +1,44 @@
+package com.graphhopper.jsprit.core.util;
+
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.util.Properties;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+public class MapDistanceRetrievalFromFile {
+
+	private static Properties prop;
+	private static InputStream input;
+	private final static Logger logger = LoggerFactory.getLogger(MapDistanceRetrievalFromFile.class);
+	
+	static{
+		prop = new Properties();
+		input = null;
+		try {
+			input = new FileInputStream("input/map/distances.properties");
+			prop.load(input);
+		}catch(Exception e){
+			e.printStackTrace();
+		}
+	}
+	
+	//using a property file to store a distance matrix
+	public static double getDistanceFromFile(Coordinate coord1, Coordinate coord2){
+		String searchTarget = coord1.getX()+"_"+coord1.getY()+"-"+coord2.getX()+"_"+coord2.getY();
+		//logger.info("searching for |{}| ", searchTarget);
+		return Double.parseDouble(prop.getProperty(searchTarget));
+	}
+	
+	public void closeInput(){
+		if(input != null){
+			try {
+				input.close();
+			} catch (IOException e) {
+				e.printStackTrace();
+			}
+		}
+	}
+}
diff --git a/jsprit-examples/input/MapDistanceConfig.out.xml b/jsprit-examples/input/MapDistanceConfig.out.xml
new file mode 100644
index 000000000..e69de29bb
diff --git a/jsprit-examples/input/MapDistanceConfig.xml b/jsprit-examples/input/MapDistanceConfig.xml
new file mode 100644
index 000000000..d96aa8554
--- /dev/null
+++ b/jsprit-examples/input/MapDistanceConfig.xml
@@ -0,0 +1,61 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<problem xmlns="http://www.w3schools.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3schools.com vrp_xml_schema.xsd">
+  <services>
+    <service id="0" type="service">
+      <locationId>0</locationId>
+      <coord x="38.9656" y="77.4152"/>
+      <capacity-dimensions>
+        <dimension index="0">10</dimension>
+      </capacity-dimensions>
+      <duration>30.0</duration>
+      <timeWindows>
+        <timeWindow>
+          <start>30.0</start>
+          <end>570.0</end>
+        </timeWindow>
+      </timeWindows>
+    </service>
+    <service id="1" type="service">
+      <locationId>1</locationId>
+      <coord x="38.9646" y="77.4155"/>
+      <capacity-dimensions>
+        <dimension index="0">10</dimension>
+      </capacity-dimensions>
+      <duration>30.0</duration>
+      <timeWindows>
+        <timeWindow>
+          <start>330.0</start>
+          <end>420.0</end>
+        </timeWindow>
+      </timeWindows>
+    </service>
+    <service id="2" type="service">
+      <locationId>2</locationId>
+      <coord x="38.9656" y="77.4155"/>
+      <capacity-dimensions>
+        <dimension index="0">10</dimension>
+      </capacity-dimensions>
+      <duration>30.0</duration>
+      <timeWindows>
+        <timeWindow>
+          <start>360.0</start>
+          <end>600.0</end>
+        </timeWindow>
+      </timeWindows>
+    </service>
+    <service id="3" type="service">
+      <locationId>3</locationId>
+      <coord x="38.9667" y="77.4155"/>
+      <capacity-dimensions>
+        <dimension index="0">10</dimension>
+      </capacity-dimensions>
+      <duration>30.0</duration>
+      <timeWindows>
+        <timeWindow>
+          <start>0.0</start>
+          <end>570.0</end>
+        </timeWindow>
+      </timeWindows>
+    </service>
+  </services>
+</problem>
diff --git a/jsprit-examples/input/map/distances.properties b/jsprit-examples/input/map/distances.properties
new file mode 100644
index 000000000..3f3d628f3
--- /dev/null
+++ b/jsprit-examples/input/map/distances.properties
@@ -0,0 +1,25 @@
+38.9656_77.4152-38.9656_77.4152=0
+38.9649_77.4152-38.9656_77.4152=78
+38.9649_77.4152-38.9646_77.4155=34
+38.9649_77.4152-38.9656_77.4155=77
+38.9649_77.4152-38.9667_77.4155=200
+38.9649_77.4152-38.9649_77.4152=0
+38.9656_77.4152-38.9649_77.4152=78
+38.9656_77.4152-38.9646_77.4155=112
+38.9656_77.4152-38.9656_77.4155=1
+38.9656_77.4152-38.9667_77.4155=122
+38.9646_77.4155-38.9646_77.4155=0
+38.9646_77.4155-38.9649_77.4152=34
+38.9646_77.4155-38.9656_77.4152=112
+38.9646_77.4155-38.9656_77.4155=111
+38.9646_77.4155-38.9667_77.4155=234
+38.9656_77.4155-38.9656_77.4155=0
+38.9656_77.4155-38.9649_77.4152=77
+38.9656_77.4155-38.9656_77.4152=1
+38.9656_77.4155-38.9646_77.4155=111
+38.9656_77.4155-38.9667_77.4155=122
+38.9667_77.4155-38.9667_77.4155=0
+38.9667_77.4155-38.9649_77.4152=200
+38.9667_77.4155-38.9656_77.4152=122
+38.9667_77.4155-38.9646_77.4155=234
+38.9667_77.4155-38.9656_77.4155=122
\ No newline at end of file
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MapDistanceExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MapDistanceExample.java
new file mode 100644
index 000000000..f6a1b63bb
--- /dev/null
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MapDistanceExample.java
@@ -0,0 +1,74 @@
+package com.graphhopper.jsprit.examples;
+
+import java.util.Arrays;
+import java.util.Collection;
+
+import org.graphstream.algorithm.measure.ChartMeasure.PlotType;
+
+import com.graphhopper.jsprit.analysis.toolbox.AlgorithmSearchProgressChartListener;
+import com.graphhopper.jsprit.analysis.toolbox.GraphStreamViewer;
+import com.graphhopper.jsprit.analysis.toolbox.Plotter;
+import com.graphhopper.jsprit.analysis.toolbox.StopWatch;
+import com.graphhopper.jsprit.core.algorithm.VehicleRoutingAlgorithm;
+import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
+import com.graphhopper.jsprit.core.algorithm.listener.VehicleRoutingAlgorithmListeners.Priority;
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
+import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
+import com.graphhopper.jsprit.core.problem.io.VrpXMLReader;
+import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
+import com.graphhopper.jsprit.core.reporting.SolutionPrinter;
+import com.graphhopper.jsprit.core.util.Coordinate;
+import com.graphhopper.jsprit.core.util.MapDistanceCosts;
+import com.graphhopper.jsprit.core.util.Solutions;
+
+public class MapDistanceExample {
+
+	public static void main(String... args ){
+		VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
+        new VrpXMLReader(vrpBuilder).read("input/MapDistanceConfig.xml");
+        
+        //we will manually setup the vehicles and depots
+        int nuOfVehicles = 1;
+        int capacity = 80;
+        Coordinate firstDepotCoord = Coordinate.newInstance(38.9649,77.4152);
+        
+        int depotCounter = 1;
+        //the third vehicle will service all the people that require spanish speaking agents
+        
+        for (int i = 0; i < nuOfVehicles; i++) {
+            VehicleTypeImpl vehicleType = VehicleTypeImpl.Builder.newInstance(depotCounter + "_type")
+            		.addCapacityDimension(0, capacity)
+            		.setCostPerDistance(1)
+            		.setCostPerTransportTime(1)
+            		.build();
+            VehicleImpl vehicle = VehicleImpl.Builder.newInstance(depotCounter + "_" + (i + 1) + "_vehicle")
+            		.setStartLocation(Location.newInstance(firstDepotCoord.getX(), firstDepotCoord.getY()))
+            		.setType(vehicleType)
+            		.setEarliestStart(0)
+            		.setLatestArrival(600)
+            		.addSkill("spanish").build();
+            vrpBuilder.addVehicle(vehicle);
+        }
+        
+        vrpBuilder.setFleetSize(FleetSize.FINITE);
+
+		/*
+         * build the problem
+		 */
+        vrpBuilder.setRoutingCost(new MapDistanceCosts(vrpBuilder.getLocations()));
+        VehicleRoutingProblem vrp = vrpBuilder.build();
+        
+        VehicleRoutingAlgorithm vra = Jsprit.Builder.newInstance(vrp).setProperty(Jsprit.Parameter.THREADS, "1").buildAlgorithm();
+        
+        
+        vra.getAlgorithmListeners().addListener(new StopWatch(), Priority.HIGH);
+        vra.getAlgorithmListeners().addListener(new AlgorithmSearchProgressChartListener("output/progress.png"));
+        Collection<VehicleRoutingProblemSolution> solutions = vra.searchSolutions();
+
+        SolutionPrinter.print(vrp, Solutions.bestOf(solutions), SolutionPrinter.Print.VERBOSE);
+        new GraphStreamViewer(vrp, Solutions.bestOf(solutions)).setRenderDelay(50).display();
+	}
+}
