diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/VehicleRoutingAlgorithm.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/VehicleRoutingAlgorithm.java
index 56c927ef5..6012398c4 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/VehicleRoutingAlgorithm.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/VehicleRoutingAlgorithm.java
@@ -82,7 +82,7 @@ public void incCounter() {
             long n = nextCounter;
             if (i >= n) {
                 nextCounter = n * 2;
-                log.info(this.name + n);
+                log.info(name + n);
             }
         }
 
@@ -150,15 +150,16 @@ private void verify(VehicleRoutingProblemSolution solution) {
         int nuJobs = 0;
         for (VehicleRoute route : solution.getRoutes()) {
             nuJobs += route.getTourActivities().getJobs().size();
-            if (route.getVehicle().getIndex() == 0)
+            if (route.getVehicle().getIndex() == 0) {
                 throw new IllegalStateException("vehicle used in initial solution has no index. probably a vehicle is used that has not been added to the " +
-                    " the VehicleRoutingProblem. only use vehicles that have already been added to the problem.");
+                        " the VehicleRoutingProblem. only use vehicles that have already been added to the problem.");
+            }
             for (TourActivity act : route.getActivities()) {
                 if (act.getIndex() == 0) {
                     throw new IllegalStateException("act in initial solution has no index. activities are created and associated to their job in VehicleRoutingProblem\n." +
-                        " thus if you build vehicle-routes use the jobActivityFactory from vehicle routing problem like that \n" +
-                        " VehicleRoute.Builder.newInstance(knownVehicle).setJobActivityFactory(vrp.getJobActivityFactory).addService(..)....build() \n" +
-                        " then the activities that are created to build the route are identical to the ones used in VehicleRoutingProblem");
+                            " thus if you build vehicle-routes use the jobActivityFactory from vehicle routing problem like that \n" +
+                            " VehicleRoute.Builder.newInstance(knownVehicle).setJobActivityFactory(vrp.getJobActivityFactory).addService(..)....build() \n" +
+                            " then the activities that are created to build the route are identical to the ones used in VehicleRoutingProblem");
                 }
             }
         }
@@ -216,7 +217,9 @@ public SearchStrategyManager getSearchStrategyManager() {
         Collection<VehicleRoutingProblemSolution> solutions = new ArrayList<VehicleRoutingProblemSolution>(initialSolutions);
         algorithmStarts(problem, solutions);
         bestEver = Solutions.bestOf(solutions);
-        if (logger.isTraceEnabled()) log(solutions);
+        if (logger.isTraceEnabled()) {
+            log(solutions);
+        }
         logger.info("iterations start");
         for (int i = 0; i < maxIterations; i++) {
             iterationStarts(i + 1, problem, solutions);
@@ -224,7 +227,9 @@ public SearchStrategyManager getSearchStrategyManager() {
             counter.incCounter();
             SearchStrategy strategy = searchStrategyManager.getRandomStrategy();
             DiscoveredSolution discoveredSolution = strategy.run(problem, solutions);
-            if (logger.isTraceEnabled()) log(discoveredSolution);
+            if (logger.isTraceEnabled()) {
+                log(discoveredSolution);
+            }
             memorizeIfBestEver(discoveredSolution);
             selectedStrategy(discoveredSolution, problem, solutions);
             if (terminationManager.isPrematureBreak(discoveredSolution)) {
@@ -242,11 +247,15 @@ public SearchStrategyManager getSearchStrategyManager() {
     }
 
     private void addBestEver(Collection<VehicleRoutingProblemSolution> solutions) {
-        if (bestEver != null) solutions.add(bestEver);
+        if (bestEver != null) {
+            solutions.add(bestEver);
+        }
     }
 
     private void log(Collection<VehicleRoutingProblemSolution> solutions) {
-        for (VehicleRoutingProblemSolution sol : solutions) log(sol);
+        for (VehicleRoutingProblemSolution sol : solutions) {
+            log(sol);
+        }
     }
 
     private void log(VehicleRoutingProblemSolution solution) {
@@ -278,10 +287,14 @@ private void log(DiscoveredSolution discoveredSolution) {
 
 
     private void memorizeIfBestEver(DiscoveredSolution discoveredSolution) {
-        if (discoveredSolution == null) return;
-        if (bestEver == null) bestEver = discoveredSolution.getSolution();
-        else if (discoveredSolution.getSolution().getCost() < bestEver.getCost())
+        if (discoveredSolution == null) {
+            return;
+        }
+        if (bestEver == null) {
+            bestEver = discoveredSolution.getSolution();
+        } else if (discoveredSolution.getSolution().getCost() < bestEver.getCost()) {
             bestEver = discoveredSolution.getSolution();
+        }
     }
 
 
@@ -299,10 +312,12 @@ public VehicleRoutingAlgorithmListeners getAlgorithmListeners() {
 
     public void addListener(VehicleRoutingAlgorithmListener l) {
         algoListeners.addListener(l);
-        if (l instanceof SearchStrategyListener)
+        if (l instanceof SearchStrategyListener) {
             searchStrategyManager.addSearchStrategyListener((SearchStrategyListener) l);
-        if (l instanceof SearchStrategyModuleListener)
+        }
+        if (l instanceof SearchStrategyModuleListener) {
             searchStrategyManager.addSearchStrategyModuleListener((SearchStrategyModuleListener) l);
+        }
     }
 
     private void iterationEnds(int i, VehicleRoutingProblem problem, Collection<VehicleRoutingProblemSolution> solutions) {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/VehicleDependentTraveledDistance.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/VehicleDependentTraveledDistance.java
index bde4058b8..5c1a1d887 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/VehicleDependentTraveledDistance.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/VehicleDependentTraveledDistance.java
@@ -18,6 +18,14 @@
 
 package com.graphhopper.jsprit.core.algorithm.state;
 
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.cost.TransportDistance;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
@@ -26,8 +34,6 @@
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeKey;
 
-import java.util.*;
-
 /**
  * Created by schroeder on 17/05/16.
  */
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblem.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblem.java
index 2c4a93169..01845ee41 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblem.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblem.java
@@ -36,8 +36,6 @@
 import com.graphhopper.jsprit.core.problem.cost.WaitingTimeCosts;
 import com.graphhopper.jsprit.core.problem.job.AbstractJob;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.AbstractActivityNEW;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.DefaultShipmentActivityFactory;
@@ -239,9 +237,6 @@ public Builder addJob(AbstractJob job) {
             if (tentativeJobs.containsKey(job.getId())) {
                 throw new IllegalArgumentException("vehicle routing problem already contains a service or shipment with id " + job.getId() + ". make sure you use unique ids for all services and shipments");
             }
-            if (!(job instanceof Service || job instanceof Shipment)) {
-                throw new IllegalArgumentException("job must be either a service or a shipment");
-            }
             job.setIndex(jobIndexCounter);
             incJobIndexCounter();
             tentativeJobs.put(job.getId(), job);
@@ -250,19 +245,7 @@ public Builder addJob(AbstractJob job) {
         }
 
         private void addLocationToTentativeLocations(Job job) {
-            if (job instanceof Service) {
-                Location location = ((Service) job).getLocation();
-//                tentative_coordinates.put(location.getId(), location.getCoordinate());
-                addLocationToTentativeLocations(location);
-            } else if (job instanceof Shipment) {
-                Shipment shipment = (Shipment) job;
-                Location pickupLocation = shipment.getPickupLocation();
-                addLocationToTentativeLocations(pickupLocation);
-//                tentative_coordinates.put(pickupLocation.getId(), pickupLocation.getCoordinate());
-                Location deliveryLocation = shipment.getDeliveryLocation();
-                addLocationToTentativeLocations(deliveryLocation);
-//                tentative_coordinates.put(deliveryLocation.getId(), deliveryLocation.getCoordinate());
-            }
+            job.getAllLocations().forEach(l -> addLocationToTentativeLocations(l));
         }
 
         private void addLocationToTentativeLocations(Location location) {
@@ -271,18 +254,16 @@ private void addLocationToTentativeLocations(Location location) {
         }
 
         private void addJobToFinalJobMapAndCreateActivities(Job job) {
-            if (job instanceof Service) {
-                Service service = (Service) job;
-                addService(service);
-            } else if (job instanceof Shipment) {
-                Shipment shipment = (Shipment) job;
-                addShipment(shipment);
+            addLocationToTentativeLocations(job);
+            if (jobs.containsKey(job.getId())) {
+                logger.warn("job " + job + " is already in job list. overrides existing job.");
             }
-            List<JobActivity> jobActs = job.getActivityList().getAll();
-            for (AbstractActivityNEW act : jobActs) {
+            jobs.put(job.getId(), job);
+
+            job.getActivityList().getAll().forEach(act -> {
                 act.setIndex(activityIndexCounter);
                 incActivityIndexCounter();
-            }
+            });
         }
 
         private boolean addBreaksToActivityMap() {
@@ -354,17 +335,6 @@ public Builder addInitialVehicleRoutes(Collection<VehicleRoute> routes) {
             }
             return this;
         }
-
-        private void addShipment(Shipment job) {
-            if (jobs.containsKey(job.getId())) {
-                logger.warn("job " + job + " already in job list. overrides existing job.");
-            }
-            addLocationToTentativeLocations(job);
-//            tentative_coordinates.put(job.getPickupLocation().getId(), job.getPickupLocation().getCoordinate());
-//            tentative_coordinates.put(job.getDeliveryLocation().getId(), job.getDeliveryLocation().getCoordinate());
-            jobs.put(job.getId(), job);
-        }
-
         /**
          * Adds a vehicle.
          *
@@ -517,17 +487,6 @@ public Builder addAllVehicles(Collection<? extends Vehicle> vehicles) {
             return Collections.unmodifiableCollection(tentativeJobs.values());
         }
 
-        private Builder addService(Service service) {
-//            tentative_coordinates.put(service.getLocation().getId(), service.getLocation().getCoordinate());
-            addLocationToTentativeLocations(service);
-            if (jobs.containsKey(service.getId())) {
-                logger.warn("service " + service + " already in job list. overrides existing job.");
-            }
-            jobs.put(service.getId(), service);
-            return this;
-        }
-
-
     }
 
     /**
@@ -616,7 +575,7 @@ private VehicleRoutingProblem(Builder builder) {
     @Override
     public String toString() {
         return "[fleetSize=" + fleetSize + "][#jobs=" + jobs.size() + "][#vehicles=" + vehicles.size() + "][#vehicleTypes=" + vehicleTypes.size() + "][" +
-            "transportCost=" + transportCosts + "][activityCosts=" + activityCosts + "]";
+                "transportCost=" + transportCosts + "][activityCosts=" + activityCosts + "]";
     }
 
     /**
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java
index 1d6f90610..4fe635405 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java
@@ -18,15 +18,18 @@
 package com.graphhopper.jsprit.core.reporting;
 
 import java.io.PrintWriter;
+import java.nio.CharBuffer;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
+import java.util.Map;
+import java.util.function.Function;
+import java.util.regex.Pattern;
+import java.util.stream.Collectors;
 
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.job.Break;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
@@ -56,19 +59,6 @@
         CONCISE, VERBOSE
     }
 
-    private static class Jobs {
-        int nServices;
-        int nShipments;
-        int nBreaks;
-
-        public Jobs(int nServices, int nShipments, int nBreaks) {
-            super();
-            this.nServices = nServices;
-            this.nShipments = nShipments;
-            this.nBreaks = nBreaks;
-        }
-    }
-
 
     /**
      * Prints costs and #vehicles to stdout (out.println).
@@ -102,6 +92,29 @@ public static void print(VehicleRoutingProblem problem, VehicleRoutingProblemSol
         SYSTEM_OUT_AS_PRINT_WRITER.flush();
     }
 
+    protected static String drawLineBase(String pattern, int count) {
+        Object[] par = new Object[count];
+        Arrays.fill(par, "");
+        String text = String.format(pattern, par);
+        return text;
+    }
+
+    protected static String drawLine(String pattern, int count) {
+        String text = drawLineBase(pattern, count);
+        return text.replaceAll(" ", "-").replaceAll(Pattern.quote("|"), "+");
+    }
+
+
+    protected static String drawHeading(String pattern, int count, String text) {
+        String base = drawLineBase(pattern, count).trim();
+        int internalWidth = base.lastIndexOf('|') - base.indexOf('|') - 1;
+        if (text == null) {
+            return "+" + CharBuffer.allocate(internalWidth).toString().replace('\0', '-') + "+\n";
+        } else {
+            return "| " + String.format("%-" + (internalWidth - 2) + "s", text) + " |\n";
+        }
+    }
+
     /**
      * Prints costs and #vehicles to the given writer
      *
@@ -109,39 +122,37 @@ public static void print(VehicleRoutingProblem problem, VehicleRoutingProblemSol
      * @param solution the solution to be printed
      */
     public static void print(PrintWriter out, VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution, Print print) {
-        String leftAlign = "| %-13s | %-8s | %n";
+        String leftAlign = "| %-30s | %-8s |%n";
 
-        out.format("+--------------------------+%n");
-        out.printf("| problem                  |%n");
-        out.format("+---------------+----------+%n");
-        out.printf("| indicator     | value    |%n");
-        out.format("+---------------+----------+%n");
+        out.printf(drawHeading(leftAlign, 2, null));
+        out.printf(drawHeading(leftAlign, 2, "problem"));
+        out.printf(drawLine(leftAlign, 2));
+        out.format(leftAlign, "indicator", "value");
+        out.printf(drawLine(leftAlign, 2));
 
         out.format(leftAlign, "noJobs", problem.getJobs().values().size());
-        Jobs jobs = getNuOfJobs(problem);
-        out.format(leftAlign, "noServices", jobs.nServices);
-        out.format(leftAlign, "noShipments", jobs.nShipments);
-        out.format(leftAlign, "noBreaks", jobs.nBreaks);
+        getNuOfJobs(problem).entrySet().forEach(en -> out.format(leftAlign, "   " + en.getKey().getSimpleName(), en.getValue()));
         out.format(leftAlign, "fleetsize", problem.getFleetSize().toString());
-        out.format("+--------------------------+%n");
+        out.printf(drawLine(leftAlign, 2));
 
 
-        String leftAlignSolution = "| %-13s | %-40s | %n";
-        out.format("+----------------------------------------------------------+%n");
-        out.printf("| solution                                                 |%n");
-        out.format("+---------------+------------------------------------------+%n");
-        out.printf("| indicator     | value                                    |%n");
-        out.format("+---------------+------------------------------------------+%n");
+        String leftAlignSolution = "| %-13s | %-40s |%n";
+        out.printf(drawHeading(leftAlignSolution, 2, null));
+        out.printf(drawHeading(leftAlignSolution, 2, "solution"));
+        out.printf(drawLine(leftAlignSolution, 2));
+        out.format(leftAlignSolution, "indicator", "value");
+        out.printf(drawLine(leftAlignSolution, 2));
         out.format(leftAlignSolution, "costs", solution.getCost());
         out.format(leftAlignSolution, "noVehicles", solution.getRoutes().size());
         out.format(leftAlignSolution, "unassgndJobs", solution.getUnassignedJobs().size());
-        out.format("+----------------------------------------------------------+%n");
+        out.printf(drawLine(leftAlignSolution, 2));
 
         if (print.equals(Print.VERBOSE)) {
             printVerbose(out, problem, solution);
         }
     }
 
+
     private static void printVerbose(VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution) {
         printVerbose(SYSTEM_OUT_AS_PRINT_WRITER, problem, solution);
         SYSTEM_OUT_AS_PRINT_WRITER.flush();
@@ -161,7 +172,7 @@ private static void printVerbose(PrintWriter out, VehicleRoutingProblem problem,
             out.format("+---------+----------------------+-----------------------+-----------------+-----------------+-----------------+-----------------+%n");
             double costs = 0;
             out.format(leftAlgin, routeNu, getVehicleString(route), route.getStart().getName(), "-", "undef", Math.round(route.getStart().getEndTime()),
-                Math.round(costs));
+                    Math.round(costs));
             TourActivity prevAct = route.getStart();
             for (TourActivity act : route.getActivities()) {
                 String jobId;
@@ -171,19 +182,19 @@ private static void printVerbose(PrintWriter out, VehicleRoutingProblem problem,
                     jobId = "-";
                 }
                 double c = problem.getTransportCosts().getTransportCost(prevAct.getLocation(), act.getLocation(), prevAct.getEndTime(), route.getDriver(),
-                    route.getVehicle());
+                        route.getVehicle());
                 c += problem.getActivityCosts().getActivityCost(act, act.getArrTime(), route.getDriver(), route.getVehicle());
                 costs += c;
                 out.format(leftAlgin, routeNu, getVehicleString(route), act.getName(), jobId, Math.round(act.getArrTime()),
-                    Math.round(act.getEndTime()), Math.round(costs));
+                        Math.round(act.getEndTime()), Math.round(costs));
                 prevAct = act;
             }
             double c = problem.getTransportCosts().getTransportCost(prevAct.getLocation(), route.getEnd().getLocation(), prevAct.getEndTime(),
-                route.getDriver(), route.getVehicle());
+                    route.getDriver(), route.getVehicle());
             c += problem.getActivityCosts().getActivityCost(route.getEnd(), route.getEnd().getArrTime(), route.getDriver(), route.getVehicle());
             costs += c;
             out.format(leftAlgin, routeNu, getVehicleString(route), route.getEnd().getName(), "-", Math.round(route.getEnd().getArrTime()), "undef",
-                Math.round(costs));
+                    Math.round(costs));
             routeNu++;
         }
         out.format("+--------------------------------------------------------------------------------------------------------------------------------+%n");
@@ -203,22 +214,10 @@ private static String getVehicleString(VehicleRoute route) {
         return route.getVehicle().getId();
     }
 
-    private static Jobs getNuOfJobs(VehicleRoutingProblem problem) {
-        int nShipments = 0;
-        int nServices = 0;
-        int nBreaks = 0;
-        for (Job j : problem.getJobs().values()) {
-            if (j instanceof Shipment) {
-                nShipments++;
-            }
-            if (j instanceof Service) {
-                nServices++;
-            }
-            if (j instanceof Break) {
-                nBreaks++;
-            }
-        }
-        return new Jobs(nServices, nShipments, nBreaks);
+    private static Map<Class<? extends Job>, Long> getNuOfJobs(VehicleRoutingProblem problem) {
+        return problem.getJobs().values().stream()
+                .map(j -> (Class<? extends Job>) j.getClass())
+                .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));
     }
 
 }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTraveledDistanceTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTraveledDistanceTest.java
index 5a9216250..0db39ebb2 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTraveledDistanceTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTraveledDistanceTest.java
@@ -19,6 +19,15 @@
 package com.graphhopper.jsprit.core.problem.constraint;
 
 
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Map;
+
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.state.StateId;
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.problem.Location;
@@ -35,14 +44,6 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.util.ManhattanCosts;
 
-import org.junit.Assert;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.*;
-
-import static org.mockito.Mockito.mock;
-
 /**
  * Created by schroeder on 18/05/16.
  */
