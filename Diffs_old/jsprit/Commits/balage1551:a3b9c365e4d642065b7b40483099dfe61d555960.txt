diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/AbstractPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/AbstractPrinterColumn.java
index 4782129a5..0a1c1eef7 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/AbstractPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/AbstractPrinterColumn.java
@@ -24,6 +24,7 @@
     // column definition.
     private Consumer<ColumnDefinition.Builder> decorator;
 
+    private boolean isDefaultTitle = true;
     private String title;
 
     /**
@@ -41,7 +42,6 @@ public AbstractPrinterColumn() {
     public AbstractPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super();
         this.decorator = decorator;
-        this.title = getDefaultTitle();
     }
 
     /**
@@ -61,7 +61,7 @@ public ColumnDefinition getColumnDefinition() {
      * @return A title of the column.
      */
     public String getTitle() {
-        return title;
+        return isDefaultTitle ? getDefaultTitle() : title;
     }
 
     /**
@@ -72,6 +72,7 @@ public String getTitle() {
     @SuppressWarnings("unchecked")
     public A withTitle(String title) {
         this.title = title;
+        isDefaultTitle = false;
         return (A) this;
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java
index 1f6640032..02ca45b59 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java
@@ -34,9 +34,10 @@
 import com.graphhopper.jsprit.core.reporting.ConfigurableTablePrinter.CsvConfig;
 import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
 import com.graphhopper.jsprit.core.reporting.columndefinition.SolutionPrintColumnLists;
-import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
 import com.graphhopper.jsprit.core.reporting.columndefinition.SolutionPrintColumnLists.PredefinedList;
+import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
 import com.graphhopper.jsprit.core.reporting.route.RoutePrinterContext;
+import com.graphhopper.jsprit.core.reporting.vehicle.VehicleSummaryContext;
 
 
 /**
@@ -161,11 +162,98 @@ public static void print(PrintWriter out, VehicleRoutingProblem problem, Vehicle
     private static void printVerbose(PrintWriter out, VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution,
                     PrinterColumnList<RoutePrinterContext> columns) {
 
-        ConfigurableTablePrinter<RoutePrinterContext> tablePrinter = buildTablePrinter(problem, solution, columns);
+        ConfigurableTablePrinter<RoutePrinterContext> tablePrinter = buildRouteDetailsTable(problem, solution, columns);
         out.println(tablePrinter.print());
 
         if (!solution.getUnassignedJobs().isEmpty()) {
+            DynamicTableDefinition unassignedTableDef = new DynamicTableDefinition.Builder().withHeading("Unassigned jobs")
+                            .addColumn(new ColumnDefinition.Builder(new StringColumnType(), "id").withMinWidth(10).build())
+                            .addColumn(new ColumnDefinition.Builder(new StringColumnType(), "type").build()).build();
+
+            DynamicTablePrinter unassignedTablePrinter = new DynamicTablePrinter(unassignedTableDef);
+
+            for (Job j : solution.getUnassignedJobs()) {
+                unassignedTablePrinter.addRow().add(j.getId()).add(j.getClass().getSimpleName());
+            }
+            out.println(unassignedTablePrinter.print());
+        }
+
+    }
+
+    private static Map<Class<? extends Job>, Long> getNuOfJobs(VehicleRoutingProblem problem) {
+        return problem.getJobs().values().stream()
+                        .map(j -> (Class<? extends Job>) j.getClass())
+                        .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));
+    }
+
+    // New print functions (TODO old ones should be migrated into these)
+
+    /**
+     * Prints costs and #vehicles to the given writer
+     *
+     * @param out
+     *            the destination writer
+     * @param solution
+     *            the solution to be printed
+     * @return
+     */
+
+    public static void printSummary(VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution) {
+        printSummary(SYSTEM_OUT_AS_PRINT_WRITER, problem, solution);
+        SYSTEM_OUT_AS_PRINT_WRITER.flush();
+    }
+
+    public static void printSummary(PrintWriter out, VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution) {
+
+        DynamicTableDefinition problemTableDef = new DynamicTableDefinition.Builder()
+                        .withHeading("Problem")
+                        .addColumn(new ColumnDefinition.Builder(new StringColumnType(), "indicator")
+                                        .build())
+                        .addColumn(new ColumnDefinition.Builder(new StringColumnType(), "value")
+                                        .build())
+                        .build();
+
+        DynamicTablePrinter problemTablePrinter = new DynamicTablePrinter(problemTableDef);
+        problemTablePrinter.addRow().add("fleetsize").add(problem.getFleetSize());
+        problemTablePrinter.addSeparator();
+        problemTablePrinter.addRow().add("noJobs").add(problem.getJobs().values().size());
+        for (Entry<Class<? extends Job>, Long> jc : getNuOfJobs(problem).entrySet()) {
+            problemTablePrinter.addRow().add("   " + jc.getKey().getSimpleName())
+            .add(jc.getValue());
+        }
+        out.println(problemTablePrinter.print());
+
+        DynamicTableDefinition solutionTableDef = new DynamicTableDefinition.Builder()
+                        .withHeading("Solution")
+                        .addColumn(new ColumnDefinition.Builder(new StringColumnType(), "indicator")
+                                        .build())
+                        .addColumn(new ColumnDefinition.Builder(new StringColumnType(), "value")
+                                        .build())
+                        .build();
+
+        DynamicTablePrinter solutionTablePrinter = new DynamicTablePrinter(solutionTableDef);
+        solutionTablePrinter.addRow().add("costs")
+        .add(String.format("%6.2f", solution.getCost()).trim());
+        solutionTablePrinter.addRow().add("noVehicles").add(solution.getRoutes().size());
+        solutionTablePrinter.addRow().add("unassignedJobs").add(solution.getUnassignedJobs().size());
+        out.println(solutionTablePrinter.print());
+    }
+
+    // ----------------------------------------------------------
+
+    public static void printRouteDetails(VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution,
+                    PrinterColumnList<RoutePrinterContext> columns) {
+        printRouteDetails(SYSTEM_OUT_AS_PRINT_WRITER, problem, solution, columns);
+        SYSTEM_OUT_AS_PRINT_WRITER.flush();
+    }
+
+    public static void printRouteDetails(PrintWriter out, VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution,
+                    PrinterColumnList<RoutePrinterContext> columns) {
+
+        ConfigurableTablePrinter<RoutePrinterContext> tablePrinter = buildRouteDetailsTable(problem, solution, columns);
+        out.println(tablePrinter.print());
 
+        if (!solution.getUnassignedJobs().isEmpty()) {
             DynamicTableDefinition unassignedTableDef = new DynamicTableDefinition.Builder().withHeading("Unassigned jobs")
                             .addColumn(new ColumnDefinition.Builder(new StringColumnType(), "id").withMinWidth(10).build())
                             .addColumn(new ColumnDefinition.Builder(new StringColumnType(), "type").build()).build();
@@ -179,7 +267,7 @@ private static void printVerbose(PrintWriter out, VehicleRoutingProblem problem,
         }
     }
 
-    protected static ConfigurableTablePrinter<RoutePrinterContext> buildTablePrinter(VehicleRoutingProblem problem,
+    protected static ConfigurableTablePrinter<RoutePrinterContext> buildRouteDetailsTable(VehicleRoutingProblem problem,
                     VehicleRoutingProblemSolution solution, PrinterColumnList<RoutePrinterContext> columns) {
         ConfigurableTablePrinter<RoutePrinterContext> tablePrinter = new ConfigurableTablePrinter<>(columns);
         int routeNu = 1;
@@ -207,16 +295,45 @@ private static void printVerbose(PrintWriter out, VehicleRoutingProblem problem,
         return tablePrinter;
     }
 
-    private static Map<Class<? extends Job>, Long> getNuOfJobs(VehicleRoutingProblem problem) {
-        return problem.getJobs().values().stream()
-                        .map(j -> (Class<? extends Job>) j.getClass())
-                        .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));
+    public static String exportRouteDetails(VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution,
+                    PrinterColumnList<RoutePrinterContext> columns, CsvConfig csvConfig) {
+        ConfigurableTablePrinter<RoutePrinterContext> table = buildRouteDetailsTable(problem, solution, columns);
+        return table.exportToCsv(csvConfig);
     }
 
-    public static String export(VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution,
-                    PrinterColumnList<RoutePrinterContext> columns, CsvConfig csvConfig) {
-        ConfigurableTablePrinter<RoutePrinterContext> table = buildTablePrinter(problem, solution, columns);
+    // ----------------------------------------------------------
+
+    public static void printVehicleSummary(VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution,
+                    PrinterColumnList<VehicleSummaryContext> columns) {
+        printVehicleSummary(SYSTEM_OUT_AS_PRINT_WRITER, problem, solution, columns);
+        SYSTEM_OUT_AS_PRINT_WRITER.flush();
+    }
+
+    public static void printVehicleSummary(PrintWriter out, VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution,
+                    PrinterColumnList<VehicleSummaryContext> columns) {
+
+        ConfigurableTablePrinter<VehicleSummaryContext> vehicleTablePrinter = buildVehicleSummaryTable(problem, solution, columns);
+        out.println(vehicleTablePrinter.print());
+    }
+
+    public static String exportVehicleSummary(VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution,
+                    PrinterColumnList<VehicleSummaryContext> columns, CsvConfig csvConfig) {
+        ConfigurableTablePrinter<VehicleSummaryContext> table = buildVehicleSummaryTable(problem, solution, columns);
         return table.exportToCsv(csvConfig);
     }
 
+    protected static ConfigurableTablePrinter<VehicleSummaryContext> buildVehicleSummaryTable(VehicleRoutingProblem problem,
+                    VehicleRoutingProblemSolution solution, PrinterColumnList<VehicleSummaryContext> columns) {
+        ConfigurableTablePrinter<VehicleSummaryContext> vehicleTablePrinter = new ConfigurableTablePrinter<>(columns);
+
+        List<VehicleRoute> list = new ArrayList<>(solution.getRoutes());
+        Collections.sort(list, new com.graphhopper.jsprit.core.util.VehicleIndexComparator());
+        int rn = 1;
+        for (VehicleRoute route : list) {
+            vehicleTablePrinter.addRow(new VehicleSummaryContext(rn++, route, problem));
+        }
+        return vehicleTablePrinter;
+    }
+
+
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/HumanReadableDurationFormatter.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/HumanReadableDurationFormatter.java
new file mode 100644
index 000000000..2754c6353
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/HumanReadableDurationFormatter.java
@@ -0,0 +1,66 @@
+package com.graphhopper.jsprit.core.reporting.columndefinition;
+
+import java.time.LocalDate;
+import java.time.LocalDateTime;
+import java.time.LocalTime;
+import java.time.format.DateTimeFormatter;
+import java.time.temporal.ChronoUnit;
+
+/**
+ * Duration formatter for human readable format.
+ * <p>
+ * The formatter uses the {@linkplain DateTimeFormatter} for time value to
+ * string formatting. The default format is the standard ISO time format (
+ * <code>"HH:mm:ss"</code>). If the input long value is X, the time value is
+ * calculated by adding X of the units to a predefined origin. The default unit
+ * is {@linkplain ChronoUnit#SECONDS}.
+ * </p>
+ *
+ * @author balage
+ *
+ */
+public class HumanReadableDurationFormatter extends HumanReadableTimeFormatter {
+
+    // Default origin
+    public static final LocalDateTime DEFAULT_ORIGIN = LocalDateTime.of(LocalDate.now(), LocalTime.MIDNIGHT);
+
+    /**
+     * Constructor with default settings. See
+     * {@linkplain HumanReadableDurationFormatter} for default values.
+     */
+    public HumanReadableDurationFormatter() {
+    }
+
+    /**
+     * Constructor with time mapping values, but with default formatting.
+     *
+     * @param unit
+     *            The unit used to map the numerical value to the time value.
+     */
+    public HumanReadableDurationFormatter(ChronoUnit unit) {
+        super(DEFAULT_ORIGIN, unit);
+    }
+
+    /**
+     * Constructor with user-defined formatting.
+     *
+     * @param dateFormatter
+     *            The date formatter.
+     */
+    public HumanReadableDurationFormatter(DateTimeFormatter dateFormatter) {
+        super(dateFormatter);
+    }
+
+    /**
+     * Constructor with both time mapping values and user-defined formatting.
+     *
+     * @param dateFormatter
+     *            The date formatter.
+     * @param unit
+     *            The unit used to map the numerical value to the time value.
+     */
+    public HumanReadableDurationFormatter(DateTimeFormatter dateFormatter, ChronoUnit unit) {
+        super(dateFormatter, DEFAULT_ORIGIN, unit);
+    }
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractDurationPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractDurationPrinterColumn.java
index 8f1122da9..157db7bf7 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractDurationPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractDurationPrinterColumn.java
@@ -3,7 +3,7 @@
 import java.util.function.Consumer;
 
 import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.columndefinition.HumanReadableTimeFormatter;
+import com.graphhopper.jsprit.core.reporting.columndefinition.HumanReadableDurationFormatter;
 
 /**
  * Abstract base class for duration columns.
@@ -30,7 +30,7 @@ public AbstractDurationPrinterColumn() {
      */
     public AbstractDurationPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
-        withFormatter(new HumanReadableTimeFormatter());
+        withFormatter(new HumanReadableDurationFormatter());
     }
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/WaitingDurationPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/WaitingDurationPrinterColumn.java
index f68faa37f..fbaadcc07 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/WaitingDurationPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/WaitingDurationPrinterColumn.java
@@ -22,7 +22,6 @@
  * @see {@linkplain StartTimePrinterColumn}
  * @see {@linkplain EndTimePrinterColumn}
  * @see {@linkplain TravelDurationPrinterColumn}
- * @see {@linkplain WaitingDurationPrinterColumn}
  * @see {@linkplain OperationDurationPrinterColumn}
  * @see {@linkplain ActivityDurationPrinterColumn}
  */
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/AbstractVehicleDurationPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/AbstractVehicleDurationPrinterColumn.java
new file mode 100644
index 000000000..24c8b66d2
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/AbstractVehicleDurationPrinterColumn.java
@@ -0,0 +1,188 @@
+package com.graphhopper.jsprit.core.reporting.vehicle;
+
+import java.util.function.Consumer;
+
+import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnAlignment;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
+import com.graphhopper.jsprit.core.reporting.columndefinition.HumanReadableDurationFormatter;
+import com.graphhopper.jsprit.core.reporting.columndefinition.HumanReadableTimeFormatter;
+import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
+import com.graphhopper.jsprit.core.reporting.route.RoutePrinterContext;
+
+/**
+ * Abstract base class for time and (technically) duration columns.
+ *
+ * <p>
+ * Each columns derived from this abstract base has two variants: a numerical
+ * (an integer value) and a human readable. The numerical value displays the
+ * integer value representing the time values internally. The human readable
+ * value converts this value into a calendar (date and time) value.
+ * </p>
+ *
+ * @author balage
+ *
+ * @param <T>
+ *            Self reference.
+ * @See {@linkplain HumanReadableTimeFormatter}
+ */
+public abstract class AbstractVehicleDurationPrinterColumn<T extends AbstractVehicleDurationPrinterColumn<T>>
+extends AbstractPrinterColumn<VehicleSummaryContext, String, AbstractVehicleDurationPrinterColumn<T>> {
+
+    public enum Mode {
+        NUMERIC(""), HUMAN_READABLE(" (H)"), PERCENT_ROUTE(" (R%)"), PERCENT_SHIFT(" (S%)");
+
+        private String postfix;
+
+        private Mode(String postfix) {
+            this.postfix = postfix;
+        }
+
+        public String getPostfix() {
+            return postfix;
+        }
+    }
+
+    // The time formatter to use (only used when humanReadable flag is true)
+    private HumanReadableDurationFormatter formatter;
+    // Whether to use human readable form
+    private Mode mode = Mode.NUMERIC;
+    // Percent decimals
+    private int percentDecimals = 2;
+
+    /**
+     * Constructor to define a numeric format column.
+     */
+    public AbstractVehicleDurationPrinterColumn() {
+        this(null);
+    }
+
+    /**
+     * Constructor to define a numeric format column, with a post creation
+     * decorator provided.
+     */
+    public AbstractVehicleDurationPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
+        super(decorator);
+        formatter = new HumanReadableDurationFormatter();
+        withDisplayMode(Mode.NUMERIC);
+    }
+
+    /**
+     * @param formatter
+     *            The formatter used for {@linkplain Mode#HUMAN_READABLE}
+     *            format.
+     *
+     */
+    @SuppressWarnings("unchecked")
+    public T withFormatter(HumanReadableDurationFormatter formatter) {
+        this.formatter = formatter;
+        return (T) this;
+    }
+
+    @Override
+    protected String getDefaultTitle() {
+        return getDefaultTitleBase() + mode.postfix;
+    }
+
+    /**
+     * @return The base of the default title. It will be extended by the
+     *         mode-specific postfix.
+     */
+    protected abstract String getDefaultTitleBase();
+
+    /**
+     * @param mode
+     *            The display mode.
+     */
+    @SuppressWarnings("unchecked")
+    public T withDisplayMode(Mode mode) {
+        this.mode = mode;
+        return (T) this;
+    }
+
+
+    /**
+     * @param digits
+     *            Number of decimal digits when mode is
+     *            {@linkplain Mode#PERCENT_SHIFT} or
+     *            {@linkplain Mode#PERCENT_ROUTE}.
+     * @throws IllegalArgumentException
+     *             When the digits parameter is negative.
+     */
+    @SuppressWarnings("unchecked")
+    public T withPercentDecimalDigits(int digits) {
+        if (digits < 0) {
+            throw new IllegalArgumentException("Decimal digit count should be non-negative.");
+        }
+        this.percentDecimals = digits;
+        return (T) this;
+    }
+
+
+    /**
+     * {@inheritDoc}
+     *
+     * <p>
+     * The column builder returned will be a string column with the null value
+     * represented by a hyphen ("-").
+     * </p>
+     *
+     */
+    @Override
+    public ColumnDefinition.Builder getColumnBuilder() {
+        ColumnDefinition.Builder builder = new ColumnDefinition.Builder(new StringColumnType("-"));
+        if (mode != Mode.HUMAN_READABLE) {
+            builder.withAlignment(ColumnAlignment.RIGHT);
+        }
+        return builder;
+    }
+
+    /**
+     * {@inheritDoc}
+     *
+     * <p>
+     * The implementation delegates the value extracting to the abstract method
+     * {@linkplain #getValue(RoutePrinterContext)}.
+     * <p>
+     * <p>
+     * If the value is null, returns null, otherwise it returns the string
+     * representation of the numeric value or the human readable format based on
+     * the humanReadable flag.
+     * </p>
+     *
+     */
+    @Override
+    public String getData(VehicleSummaryContext context) {
+        Long timeValue = getValue(context);
+        if (timeValue == null) {
+            return null;
+        }
+        switch (mode) {
+        case NUMERIC:
+            return "" + timeValue;
+        case HUMAN_READABLE:
+            return formatter.format(timeValue);
+        case PERCENT_ROUTE:
+            return formatPercent(timeValue, context.getRouteDuration() - context.getBreakDuration());
+        case PERCENT_SHIFT:
+            return formatPercent(timeValue, context.getShiftDuration() - context.getBreakDuration());
+        default:
+            throw new AssertionError("Can't get here.");
+        }
+    }
+
+    private String formatPercent(Long timeValue, long total) {
+        double pct = (100d * timeValue) / total;
+        return String.format("%20." + percentDecimals + "f %%", pct).trim();
+    }
+
+    /**
+     * Extracts the numerical value for this time or duration column.
+     *
+     * @param context
+     *            The context.
+     * @return The numerical value or null.
+     */
+    protected abstract Long getValue(VehicleSummaryContext context);
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/AbstractVehicleTimeWindowPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/AbstractVehicleTimeWindowPrinterColumn.java
new file mode 100644
index 000000000..98d976387
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/AbstractVehicleTimeWindowPrinterColumn.java
@@ -0,0 +1,153 @@
+package com.graphhopper.jsprit.core.reporting.vehicle;
+
+import java.util.Collection;
+import java.util.function.Consumer;
+import java.util.stream.Collectors;
+
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
+import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
+import com.graphhopper.jsprit.core.reporting.columndefinition.HumanReadableEnabled;
+import com.graphhopper.jsprit.core.reporting.columndefinition.HumanReadableTimeFormatter;
+import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
+import com.graphhopper.jsprit.core.reporting.route.RoutePrinterContext;
+
+/**
+ * Abstract base class for time window columns.
+ *
+ * <p>
+ * Each columns derived from this abstract base has two variants: a numerical
+ * (an integer value) and a human readable. The numerical value displays the
+ * integer value pair representing the time windows, the same the algorithm used
+ * internally. The human readable value converts this value into a calendar
+ * (date and time) value pair.
+ * </p>
+ *
+ * @author balage
+ *
+ * @param <T>
+ *            Self reference.
+ * @See {@linkplain HumanReadableTimeFormatter}
+ */
+public abstract class AbstractVehicleTimeWindowPrinterColumn<T extends AbstractVehicleTimeWindowPrinterColumn<T>>
+extends AbstractPrinterColumn<VehicleSummaryContext, String, AbstractVehicleTimeWindowPrinterColumn<T>>
+implements HumanReadableEnabled<T> {
+
+    // The time formatter to use (only used when humanReadable flag is true)
+    private HumanReadableTimeFormatter formatter;
+    // Whether to use human readable form
+    private boolean humanReadable = false;
+
+    /**
+     * Constructor to define a numeric format column.
+     */
+    public AbstractVehicleTimeWindowPrinterColumn() {
+        this(null);
+    }
+
+    /**
+     * Constructor to define a numeric format column, with a post creation
+     * decorator provided.
+     */
+    public AbstractVehicleTimeWindowPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
+        super(decorator);
+        formatter = new HumanReadableTimeFormatter();
+    }
+
+    @Override
+    @SuppressWarnings("unchecked")
+    public T withFormatter(HumanReadableTimeFormatter formatter) {
+        this.formatter = formatter;
+        return (T) this;
+    }
+
+    @Override
+    @SuppressWarnings("unchecked")
+    public T asHumanReadable() {
+        this.humanReadable = true;
+        return (T) this;
+    }
+
+    @Override
+    protected String getDefaultTitle() {
+        return getDefaultTitleBase() + (humanReadable ? " (H)" : "");
+    }
+
+    protected abstract String getDefaultTitleBase();
+
+
+    @Override
+    public ColumnDefinition.Builder getColumnBuilder() {
+        return new ColumnDefinition.Builder(new StringColumnType("-"));
+    }
+
+    /**
+     * {@inheritDoc}
+     *
+     * <p>
+     * The implementation delegates the value extracting to the abstract method
+     * {@linkplain #getValue(RoutePrinterContext)}.
+     * <p>
+     * <p>
+     * If the value is null or empty, returns null, otherwise it returns the
+     * string representation of the numeric value or the human readable format
+     * based on the humanReadable flag.
+     * </p>
+     *
+     */
+    @Override
+    public String getData(VehicleSummaryContext context) {
+        Collection<TimeWindow> timeWindows = getValue(context);
+        if (timeWindows == null || timeWindows.isEmpty()) {
+            return null;
+        }
+        return timeWindows.stream().map(tw -> formatTimeWindow(tw)).collect(Collectors.joining());
+    }
+
+    /**
+     * Formats the time window.
+     *
+     * <p>
+     * The implementation returns the two (start, end) values sepratated by
+     * hyphen (-) and wrapped within brackets. When the end value is
+     * {@linkplain Double#MAX_VALUE} it omits the value indicating open
+     * interval.
+     * </p>
+     *
+     * @param tw
+     *            The time window to format.
+     * @return The string representation of the time window.
+     */
+    protected String formatTimeWindow(TimeWindow tw) {
+        String res = "";
+        if (humanReadable) {
+            res = "[" + formatter.format((long) tw.getStart()) + "-";
+            if (tw.getEnd() == Double.MAX_VALUE) {
+                res += "";
+            } else {
+                res += formatter.format((long) tw.getEnd());
+            }
+            res += "]";
+
+        } else {
+            res = "[" + (long) tw.getStart() + "-";
+            if (tw.getEnd() == Double.MAX_VALUE) {
+                res += "";
+            } else {
+                res += (long) tw.getEnd();
+            }
+            res += "]";
+        }
+        return res;
+    }
+
+    /**
+     * Extracts the collection of time windows from the context.
+     *
+     * @param context
+     *            The context.
+     * @return The collection of time windows.
+     */
+    protected abstract Collection<TimeWindow> getValue(VehicleSummaryContext context);
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleActiveDurationPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleActiveDurationPrinterColumn.java
new file mode 100644
index 000000000..b6a08db74
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleActiveDurationPrinterColumn.java
@@ -0,0 +1,46 @@
+package com.graphhopper.jsprit.core.reporting.vehicle;
+
+import java.util.function.Consumer;
+
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
+
+/**
+ * Travel duration toward the location of the activity.
+ * <p>
+ * The time it takes to travel to the location of the activity. The value is
+ * undefined for route start activity (null).
+ * </p>
+ *
+ * @author balage
+ *
+ */
+public class VehicleActiveDurationPrinterColumn extends AbstractVehicleDurationPrinterColumn<VehicleActiveDurationPrinterColumn> {
+
+
+    /**
+     * Constructor.
+     */
+    public VehicleActiveDurationPrinterColumn() {
+        super();
+    }
+
+    /**
+     * Constructor with a post creation decorator provided.
+     */
+    public VehicleActiveDurationPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
+        super(decorator);
+    }
+
+
+    @Override
+    protected String getDefaultTitleBase() {
+        return "active";
+    }
+
+    @Override
+    public Long getValue(VehicleSummaryContext context) {
+        return context.getActiveDuration();
+    }
+
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleActivityCountPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleActivityCountPrinterColumn.java
new file mode 100644
index 000000000..2f64e43df
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleActivityCountPrinterColumn.java
@@ -0,0 +1,55 @@
+package com.graphhopper.jsprit.core.reporting.vehicle;
+
+import java.util.function.Consumer;
+
+import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnAlignment;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition.Builder;
+import com.graphhopper.jsprit.core.reporting.columndefinition.IntColumnType;
+
+/**
+ * Travel duration toward the location of the activity.
+ * <p>
+ * The time it takes to travel to the location of the activity. The value is
+ * undefined for route start activity (null).
+ * </p>
+ *
+ * @author balage
+ *
+ */
+public class VehicleActivityCountPrinterColumn
+                extends AbstractPrinterColumn<VehicleSummaryContext, Integer, VehicleActivityCountPrinterColumn> {
+
+    /**
+     * Constructor.
+     */
+    public VehicleActivityCountPrinterColumn() {
+        super();
+    }
+
+    /**
+     * Constructor with a post creation decorator provided.
+     */
+    public VehicleActivityCountPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
+        super(decorator);
+    }
+
+    @Override
+    protected Builder getColumnBuilder() {
+        return new ColumnDefinition.Builder(new IntColumnType()).withAlignment(ColumnAlignment.RIGHT);
+    }
+
+    @Override
+    public Integer getData(VehicleSummaryContext context) {
+        return context.getActivityCount();
+    }
+
+    @Override
+    protected String getDefaultTitle() {
+        return "act count";
+    }
+
+
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleActivityTypeCountPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleActivityTypeCountPrinterColumn.java
new file mode 100644
index 000000000..c8dfdcc45
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleActivityTypeCountPrinterColumn.java
@@ -0,0 +1,62 @@
+package com.graphhopper.jsprit.core.reporting.vehicle;
+
+import java.util.function.Consumer;
+
+import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnAlignment;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition.Builder;
+import com.graphhopper.jsprit.core.reporting.columndefinition.IntColumnType;
+
+/**
+ * Travel duration toward the location of the activity.
+ * <p>
+ * The time it takes to travel to the location of the activity. The value is
+ * undefined for route start activity (null).
+ * </p>
+ *
+ * @author balage
+ *
+ */
+public class VehicleActivityTypeCountPrinterColumn
+                extends AbstractPrinterColumn<VehicleSummaryContext, Integer, VehicleActivityTypeCountPrinterColumn> {
+
+    private String activityType = "";
+
+    /**
+     * Constructor.
+     */
+    public VehicleActivityTypeCountPrinterColumn() {
+        super();
+    }
+
+    /**
+     * Constructor with a post creation decorator provided.
+     */
+    public VehicleActivityTypeCountPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
+        super(decorator);
+    }
+
+    public VehicleActivityTypeCountPrinterColumn forActivity(String type) {
+        activityType = type;
+        return this;
+    }
+
+    @Override
+    protected Builder getColumnBuilder() {
+        return new ColumnDefinition.Builder(new IntColumnType("0")).withAlignment(ColumnAlignment.RIGHT);
+    }
+
+    @Override
+    public Integer getData(VehicleSummaryContext context) {
+        return context.getActivityCountByType().getOrDefault(activityType, 0);
+    }
+
+    @Override
+    protected String getDefaultTitle() {
+        return activityType;
+    }
+
+
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleAllActivityTypeCountPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleAllActivityTypeCountPrinterColumn.java
new file mode 100644
index 000000000..aa4f94db1
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleAllActivityTypeCountPrinterColumn.java
@@ -0,0 +1,57 @@
+package com.graphhopper.jsprit.core.reporting.vehicle;
+
+import java.util.function.Consumer;
+import java.util.stream.Collectors;
+
+import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition.Builder;
+import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
+
+/**
+ * Travel duration toward the location of the activity.
+ * <p>
+ * The time it takes to travel to the location of the activity. The value is
+ * undefined for route start activity (null).
+ * </p>
+ *
+ * @author balage
+ *
+ */
+public class VehicleAllActivityTypeCountPrinterColumn
+extends AbstractPrinterColumn<VehicleSummaryContext, String, VehicleAllActivityTypeCountPrinterColumn> {
+
+    /**
+     * Constructor.
+     */
+    public VehicleAllActivityTypeCountPrinterColumn() {
+        super();
+    }
+
+    /**
+     * Constructor with a post creation decorator provided.
+     */
+    public VehicleAllActivityTypeCountPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
+        super(decorator);
+    }
+
+    @Override
+    protected Builder getColumnBuilder() {
+        return new ColumnDefinition.Builder(new StringColumnType());
+    }
+
+    @Override
+    public String getData(VehicleSummaryContext context) {
+        return context.getActivityCountByType().entrySet().stream()
+                        .map(en -> "[" + en.getKey() + "=" + en.getValue() + "]")
+                        .collect(Collectors.joining());
+    }
+
+    @Override
+    protected String getDefaultTitle() {
+        return "act counts";
+    }
+
+
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleDriverNamePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleDriverNamePrinterColumn.java
new file mode 100644
index 000000000..a47d06916
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleDriverNamePrinterColumn.java
@@ -0,0 +1,49 @@
+package com.graphhopper.jsprit.core.reporting.vehicle;
+
+import java.util.function.Consumer;
+
+import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
+import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
+
+/**
+ * The name of the vehicle associated by this route.
+ *
+ * <p>
+ * This colum returns the id of the vehicle of the route.
+ * </p>
+ *
+ * @author balage
+ */
+public class VehicleDriverNamePrinterColumn extends AbstractPrinterColumn<VehicleSummaryContext, String, VehicleDriverNamePrinterColumn> {
+
+    /**
+     * Constructor.
+     */
+    public VehicleDriverNamePrinterColumn() {
+        super();
+    }
+
+    /**
+     * Constructor with a post creation decorator provided.
+     */
+    public VehicleDriverNamePrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
+        super(decorator);
+    }
+
+    @Override
+    public ColumnDefinition.Builder getColumnBuilder() {
+        return new ColumnDefinition.Builder(new StringColumnType());
+    }
+
+    @Override
+    protected String getDefaultTitle() {
+        return "driver";
+    }
+
+    @Override
+    public String getData(VehicleSummaryContext context) {
+        return context.getDriver().getId();
+    }
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleIdleDurationPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleIdleDurationPrinterColumn.java
new file mode 100644
index 000000000..1a5980984
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleIdleDurationPrinterColumn.java
@@ -0,0 +1,46 @@
+package com.graphhopper.jsprit.core.reporting.vehicle;
+
+import java.util.function.Consumer;
+
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
+
+/**
+ * Travel duration toward the location of the activity.
+ * <p>
+ * The time it takes to travel to the location of the activity. The value is
+ * undefined for route start activity (null).
+ * </p>
+ *
+ * @author balage
+ *
+ */
+public class VehicleIdleDurationPrinterColumn extends AbstractVehicleDurationPrinterColumn<VehicleIdleDurationPrinterColumn> {
+
+
+    /**
+     * Constructor.
+     */
+    public VehicleIdleDurationPrinterColumn() {
+        super();
+    }
+
+    /**
+     * Constructor with a post creation decorator provided.
+     */
+    public VehicleIdleDurationPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
+        super(decorator);
+    }
+
+
+    @Override
+    protected String getDefaultTitleBase() {
+        return "idle";
+    }
+
+    @Override
+    public Long getValue(VehicleSummaryContext context) {
+        return context.getIdleDuration();
+    }
+
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleOperationDurationPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleOperationDurationPrinterColumn.java
new file mode 100644
index 000000000..1bf46ba4f
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleOperationDurationPrinterColumn.java
@@ -0,0 +1,46 @@
+package com.graphhopper.jsprit.core.reporting.vehicle;
+
+import java.util.function.Consumer;
+
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
+
+/**
+ * Travel duration toward the location of the activity.
+ * <p>
+ * The time it takes to travel to the location of the activity. The value is
+ * undefined for route start activity (null).
+ * </p>
+ *
+ * @author balage
+ *
+ */
+public class VehicleOperationDurationPrinterColumn extends AbstractVehicleDurationPrinterColumn<VehicleOperationDurationPrinterColumn> {
+
+
+    /**
+     * Constructor.
+     */
+    public VehicleOperationDurationPrinterColumn() {
+        super();
+    }
+
+    /**
+     * Constructor with a post creation decorator provided.
+     */
+    public VehicleOperationDurationPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
+        super(decorator);
+    }
+
+
+    @Override
+    protected String getDefaultTitleBase() {
+        return "oper";
+    }
+
+    @Override
+    public Long getValue(VehicleSummaryContext context) {
+        return context.getOperationDuration();
+    }
+
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleRouteDurationPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleRouteDurationPrinterColumn.java
new file mode 100644
index 000000000..501787ab8
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleRouteDurationPrinterColumn.java
@@ -0,0 +1,46 @@
+package com.graphhopper.jsprit.core.reporting.vehicle;
+
+import java.util.function.Consumer;
+
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
+
+/**
+ * Travel duration toward the location of the activity.
+ * <p>
+ * The time it takes to travel to the location of the activity. The value is
+ * undefined for route start activity (null).
+ * </p>
+ *
+ * @author balage
+ *
+ */
+public class VehicleRouteDurationPrinterColumn extends AbstractVehicleDurationPrinterColumn<VehicleRouteDurationPrinterColumn> {
+
+
+    /**
+     * Constructor.
+     */
+    public VehicleRouteDurationPrinterColumn() {
+        super();
+    }
+
+    /**
+     * Constructor with a post creation decorator provided.
+     */
+    public VehicleRouteDurationPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
+        super(decorator);
+    }
+
+
+    @Override
+    protected String getDefaultTitleBase() {
+        return "route";
+    }
+
+    @Override
+    public Long getValue(VehicleSummaryContext context) {
+        return context.getRouteDuration();
+    }
+
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleRouteNumberPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleRouteNumberPrinterColumn.java
new file mode 100644
index 000000000..e9084f706
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleRouteNumberPrinterColumn.java
@@ -0,0 +1,49 @@
+package com.graphhopper.jsprit.core.reporting.vehicle;
+
+import java.util.function.Consumer;
+
+import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
+import com.graphhopper.jsprit.core.reporting.columndefinition.IntColumnType;
+
+/**
+ * The order number of the route.
+ *
+ * <p>
+ * This is the ordinal of the route.
+ * </p>
+ *
+ * @author balage
+ */
+public class VehicleRouteNumberPrinterColumn extends AbstractPrinterColumn<VehicleSummaryContext, Integer, VehicleRouteNumberPrinterColumn> {
+
+    /**
+     * Constructor.
+     */
+    public VehicleRouteNumberPrinterColumn() {
+        super();
+    }
+
+    /**
+     * Constructor with a post creation decorator provided.
+     */
+    public VehicleRouteNumberPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
+        super(decorator);
+    }
+
+    @Override
+    public ColumnDefinition.Builder getColumnBuilder() {
+        return new ColumnDefinition.Builder(new IntColumnType());
+    }
+
+    @Override
+    protected String getDefaultTitle() {
+        return "route nr";
+    }
+
+    @Override
+    public Integer getData(VehicleSummaryContext context) {
+        return context.getRouteNr();
+    }
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleRouteTimeWindowPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleRouteTimeWindowPrinterColumn.java
new file mode 100644
index 000000000..2e3b4525d
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleRouteTimeWindowPrinterColumn.java
@@ -0,0 +1,47 @@
+package com.graphhopper.jsprit.core.reporting.vehicle;
+
+import java.util.Collection;
+import java.util.Collections;
+import java.util.function.Consumer;
+
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
+
+/**
+ * Travel duration toward the location of the activity.
+ * <p>
+ * The time it takes to travel to the location of the activity. The value is
+ * undefined for route start activity (null).
+ * </p>
+ *
+ * @author balage
+ *
+ */
+public class VehicleRouteTimeWindowPrinterColumn
+extends AbstractVehicleTimeWindowPrinterColumn<VehicleRouteTimeWindowPrinterColumn> {
+
+    /**
+     * Constructor.
+     */
+    public VehicleRouteTimeWindowPrinterColumn() {
+        super();
+    }
+
+    /**
+     * Constructor with a post creation decorator provided.
+     */
+    public VehicleRouteTimeWindowPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
+        super(decorator);
+    }
+
+    @Override
+    protected Collection<TimeWindow> getValue(VehicleSummaryContext context) {
+        return Collections.singleton(new TimeWindow(context.getStart(), context.getEnd()));
+    }
+
+    @Override
+    protected String getDefaultTitleBase() {
+        return "route tw";
+    }
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleShiftDurationPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleShiftDurationPrinterColumn.java
new file mode 100644
index 000000000..47cdce73a
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleShiftDurationPrinterColumn.java
@@ -0,0 +1,46 @@
+package com.graphhopper.jsprit.core.reporting.vehicle;
+
+import java.util.function.Consumer;
+
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
+
+/**
+ * Travel duration toward the location of the activity.
+ * <p>
+ * The time it takes to travel to the location of the activity. The value is
+ * undefined for route start activity (null).
+ * </p>
+ *
+ * @author balage
+ *
+ */
+public class VehicleShiftDurationPrinterColumn extends AbstractVehicleDurationPrinterColumn<VehicleShiftDurationPrinterColumn> {
+
+
+    /**
+     * Constructor.
+     */
+    public VehicleShiftDurationPrinterColumn() {
+        super();
+    }
+
+    /**
+     * Constructor with a post creation decorator provided.
+     */
+    public VehicleShiftDurationPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
+        super(decorator);
+    }
+
+
+    @Override
+    protected String getDefaultTitleBase() {
+        return "shift";
+    }
+
+    @Override
+    public Long getValue(VehicleSummaryContext context) {
+        return context.getShiftDuration();
+    }
+
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleShiftTimeWindowPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleShiftTimeWindowPrinterColumn.java
new file mode 100644
index 000000000..7590eb138
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleShiftTimeWindowPrinterColumn.java
@@ -0,0 +1,48 @@
+package com.graphhopper.jsprit.core.reporting.vehicle;
+
+import java.util.Collection;
+import java.util.Collections;
+import java.util.function.Consumer;
+
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
+
+/**
+ * Travel duration toward the location of the activity.
+ * <p>
+ * The time it takes to travel to the location of the activity. The value is
+ * undefined for route start activity (null).
+ * </p>
+ *
+ * @author balage
+ *
+ */
+public class VehicleShiftTimeWindowPrinterColumn
+extends AbstractVehicleTimeWindowPrinterColumn<VehicleShiftTimeWindowPrinterColumn> {
+
+    /**
+     * Constructor.
+     */
+    public VehicleShiftTimeWindowPrinterColumn() {
+        super();
+    }
+
+    /**
+     * Constructor with a post creation decorator provided.
+     */
+    public VehicleShiftTimeWindowPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
+        super(decorator);
+    }
+
+    @Override
+    protected Collection<TimeWindow> getValue(VehicleSummaryContext context) {
+        return Collections.singleton(
+                        new TimeWindow(context.getVehicle().getEarliestDeparture(), context.getVehicle().getLatestArrival()));
+    }
+
+    @Override
+    protected String getDefaultTitleBase() {
+        return "shift tw";
+    }
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleSummaryColumnLists.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleSummaryColumnLists.java
new file mode 100644
index 000000000..3c338ee5d
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleSummaryColumnLists.java
@@ -0,0 +1,152 @@
+package com.graphhopper.jsprit.core.reporting.vehicle;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.EnumMap;
+import java.util.List;
+
+import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
+import com.graphhopper.jsprit.core.reporting.PrinterColumnList;
+import com.graphhopper.jsprit.core.reporting.columndefinition.HumanReadableDurationFormatter;
+import com.graphhopper.jsprit.core.reporting.columndefinition.HumanReadableEnabled;
+import com.graphhopper.jsprit.core.reporting.columndefinition.HumanReadableTimeFormatter;
+import com.graphhopper.jsprit.core.reporting.vehicle.AbstractVehicleDurationPrinterColumn.Mode;
+
+/**
+ * Utility class to provide predefined column lists for Solution printing.
+ *
+ * @author balage
+ *
+ */
+public class VehicleSummaryColumnLists {
+
+    /**
+     * The predefined column sets.
+     *
+     * @author balage
+     *
+     */
+    public enum PredefinedList {
+        /**
+         * A minimal column set.
+         */
+        MINIMAL,
+        /**
+         * A general, most often used column set.
+         */
+        DEFAULT,
+        /**
+         * A verbose column set containing all columns.
+         */
+        VERBOSE
+    }
+
+    private static final EnumMap<PredefinedList, List<Class<? extends AbstractPrinterColumn<VehicleSummaryContext, ?, ?>>>> COLUMNS;
+
+    static {
+        COLUMNS = new EnumMap<>(PredefinedList.class);
+        List<Class<? extends AbstractPrinterColumn<VehicleSummaryContext, ?, ?>>> minimalSet = new ArrayList<>();
+        minimalSet.add(VehicleRouteNumberPrinterColumn.class);
+        minimalSet.add(VehicleTruckNamePrinterColumn.class);
+        minimalSet.add(VehicleAllActivityTypeCountPrinterColumn.class);
+        minimalSet.add(VehicleRouteDurationPrinterColumn.class);
+        minimalSet.add(VehicleActiveDurationPrinterColumn.class);
+        COLUMNS.put(PredefinedList.MINIMAL, minimalSet);
+
+        List<Class<? extends AbstractPrinterColumn<VehicleSummaryContext, ?, ?>>> defaultSet = new ArrayList<>();
+        defaultSet.add(VehicleRouteNumberPrinterColumn.class);
+        defaultSet.add(VehicleTruckNamePrinterColumn.class);
+        defaultSet.add(VehicleAllActivityTypeCountPrinterColumn.class);
+        defaultSet.add(VehicleRouteTimeWindowPrinterColumn.class);
+        defaultSet.add(VehicleRouteDurationPrinterColumn.class);
+        defaultSet.add(VehicleTravelDurationPrinterColumn.class);
+        defaultSet.add(VehicleOperationDurationPrinterColumn.class);
+        defaultSet.add(VehicleActiveDurationPrinterColumn.class);
+        defaultSet.add(VehicleIdleDurationPrinterColumn.class);
+        COLUMNS.put(PredefinedList.DEFAULT, defaultSet);
+
+        List<Class<? extends AbstractPrinterColumn<VehicleSummaryContext, ?, ?>>> verboseSet = new ArrayList<>();
+        verboseSet.add(VehicleRouteNumberPrinterColumn.class);
+        verboseSet.add(VehicleTruckNamePrinterColumn.class);
+        verboseSet.add(VehicleTypePrinterColumn.class);
+        verboseSet.add(VehicleDriverNamePrinterColumn.class);
+        verboseSet.add(VehicleActivityCountPrinterColumn.class);
+        verboseSet.add(VehicleAllActivityTypeCountPrinterColumn.class);
+        verboseSet.add(VehicleShiftTimeWindowPrinterColumn.class);
+        verboseSet.add(VehicleShiftDurationPrinterColumn.class);
+        verboseSet.add(VehicleRouteTimeWindowPrinterColumn.class);
+        verboseSet.add(VehicleRouteDurationPrinterColumn.class);
+        verboseSet.add(VehicleTravelDurationPrinterColumn.class);
+        verboseSet.add(VehicleOperationDurationPrinterColumn.class);
+        verboseSet.add(VehicleActiveDurationPrinterColumn.class);
+        verboseSet.add(VehicleIdleDurationPrinterColumn.class);
+        COLUMNS.put(PredefinedList.VERBOSE, verboseSet);
+    }
+
+    public static PrinterColumnList<VehicleSummaryContext> getNumeric(PredefinedList listType) {
+        return getList(listType, Collections.singletonList(Mode.NUMERIC), false, null, null);
+    }
+
+    public static PrinterColumnList<VehicleSummaryContext> getHumanReadable(PredefinedList listType) {
+        return getList(listType, Collections.singletonList(Mode.HUMAN_READABLE), true, null, null);
+    }
+
+    public static PrinterColumnList<VehicleSummaryContext> getMultiple(PredefinedList listType, Mode... durationModes) {
+        List<Mode> modes = Arrays.asList(durationModes);
+        return getMultiple(listType, modes);
+    }
+
+    public static PrinterColumnList<VehicleSummaryContext> getMultiple(PredefinedList listType, List<Mode> durationModes) {
+        return getList(listType, durationModes, durationModes.contains(Mode.HUMAN_READABLE), null, null);
+    }
+
+    /**
+     * Generates the list.
+     *
+     * @param listType
+     *            The id of the list.
+     * @param humanReadable
+     *            Whether human readable format should be used
+     * @param timeFormatter
+     *            The formatter to use (if null, the default will be used)
+     * @return The generated column list.
+     */
+    public static PrinterColumnList<VehicleSummaryContext> getList(PredefinedList listType, List<Mode> durationModes,
+                    boolean humanReadableTimeWindows, HumanReadableTimeFormatter timeWindowTimeFormatter,
+                    HumanReadableDurationFormatter durationFormatter) {
+        PrinterColumnList<VehicleSummaryContext> res = new PrinterColumnList<>();
+
+        for (Class<? extends AbstractPrinterColumn<VehicleSummaryContext, ?, ?>> c : COLUMNS.get(listType)) {
+            try {
+                if (AbstractVehicleDurationPrinterColumn.class.isAssignableFrom(c)) {
+                    for(Mode mode : durationModes) {
+                        AbstractVehicleDurationPrinterColumn<?> col = (AbstractVehicleDurationPrinterColumn<?>) c.newInstance();
+                        if (durationFormatter != null) {
+                            col.withFormatter(durationFormatter);
+                        }
+                        col.withDisplayMode(mode);
+                        res.addColumn(col);
+                    }
+                } else {
+                    AbstractPrinterColumn<VehicleSummaryContext, ?, ?> col = c.newInstance();
+                    if (humanReadableTimeWindows && col instanceof HumanReadableEnabled) {
+                        HumanReadableEnabled<?> hrCol = (HumanReadableEnabled<?>) col;
+                        hrCol.asHumanReadable();
+                        if (durationFormatter != null) {
+                            hrCol.withFormatter(durationFormatter);
+                        }
+                    }
+                    res.addColumn(col);
+                }
+            } catch (InstantiationException | IllegalAccessException e) {
+                // Technically you can't get here as long as all column
+                // implementation has default constructor
+                throw new IllegalStateException(e);
+            }
+        }
+
+        return res;
+    }
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleSummaryContext.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleSummaryContext.java
new file mode 100644
index 000000000..4b3505172
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleSummaryContext.java
@@ -0,0 +1,135 @@
+package com.graphhopper.jsprit.core.reporting.vehicle;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
+import com.graphhopper.jsprit.core.problem.driver.Driver;
+import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.BreakActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
+import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
+import com.graphhopper.jsprit.core.reporting.PrinterContext;
+
+public class VehicleSummaryContext implements PrinterContext {
+    private Vehicle vehicle;
+    private Driver driver;
+    private int routeNr;
+    private long start;
+    private long end;
+    private int activityCount = 0;
+    private Map<String, Integer> activityCountByType = new HashMap<>();
+    private long travelDuration;
+    private long operationDuration;
+    private long breakDuration;
+    private long travelDistance;
+
+    public VehicleSummaryContext(int routeNr, VehicleRoute route, VehicleRoutingProblem problem) {
+        this.routeNr = routeNr;
+        vehicle = route.getVehicle();
+        driver = route.getDriver();
+        start = (long) route.getStart().getEndTime();
+        end = (long) route.getEnd().getArrTime();
+
+        TourActivity prevAct = route.getStart();
+        for (TourActivity act : route.getActivities()) {
+            if (act instanceof BreakActivity) {
+                breakDuration += act.getOperationTime();
+            } else
+                if (act instanceof JobActivity) {
+                    JobActivity jobAct = (JobActivity) act;
+                    activityCount++;
+                    String type = jobAct.getType();
+                    if (!activityCountByType.containsKey(type)) {
+                        activityCountByType.put(type, 0);
+                    }
+                    activityCountByType.put(type, activityCountByType.get(type) + 1);
+                    operationDuration += jobAct.getOperationTime();
+                    travelDuration += problem.getTransportCosts().getTransportTime(prevAct.getLocation(),
+                                    act.getLocation(),act.getArrTime(), route.getDriver(),
+                                    route.getVehicle());
+                }
+            prevAct = act;
+        }
+    }
+
+    public String getVehicleId() {
+        return vehicle.getId();
+    }
+
+    public String getDriverId() {
+        return driver.getId();
+    }
+
+    public int getRouteNr() {
+        return routeNr;
+    }
+
+    public long getStart() {
+        return start;
+    }
+
+    public long getEnd() {
+        return end;
+    }
+
+    public int getActivityCount() {
+        return activityCount;
+    }
+
+    public Map<String, Integer> getActivityCountByType() {
+        return activityCountByType;
+    }
+
+    public long getTravelDuration() {
+        return travelDuration;
+    }
+
+    public long getOperationDuration() {
+        return operationDuration;
+    }
+
+    public long getShiftDuration() {
+        return vehicle.getLatestArrival() == Double.MAX_VALUE ? getRouteDuration()
+                        : (long) (vehicle.getLatestArrival() - vehicle.getEarliestDeparture());
+    }
+
+    public long getRouteDuration() {
+        return end - start;
+    }
+
+    public long getTravelDistance() {
+        return travelDistance;
+    }
+
+    public long getBreakDuration() {
+        return breakDuration;
+    }
+
+    public Vehicle getVehicle() {
+        return vehicle;
+    }
+
+    public Driver getDriver() {
+        return driver;
+    }
+
+    @Override
+    public String toString() {
+        return "VehicleStatisticsContext [vehicleId=" + vehicle.getId() + ", driver=" + driver.getId() + ", routeNr=" + routeNr
+                        + ", start=" + start + ", end=" + end + ", activityCount=" + activityCount + ", activityCountByType="
+                        + activityCountByType + ", travelDuration=" + travelDuration + ", operationDuration=" + operationDuration
+                        + ", totalDuration=" + getRouteDuration() + ", travelDistance=" + travelDistance + ", breakDuration="
+                        + breakDuration + "]";
+    }
+
+    public Long getActiveDuration() {
+        return getTravelDuration() + getOperationDuration();
+    }
+
+    public Long getIdleDuration() {
+        return getRouteDuration() - (getActiveDuration() + getBreakDuration());
+    }
+
+}
\ No newline at end of file
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleTravelDurationPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleTravelDurationPrinterColumn.java
new file mode 100644
index 000000000..0b2fb7a70
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleTravelDurationPrinterColumn.java
@@ -0,0 +1,46 @@
+package com.graphhopper.jsprit.core.reporting.vehicle;
+
+import java.util.function.Consumer;
+
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
+
+/**
+ * Travel duration toward the location of the activity.
+ * <p>
+ * The time it takes to travel to the location of the activity. The value is
+ * undefined for route start activity (null).
+ * </p>
+ *
+ * @author balage
+ *
+ */
+public class VehicleTravelDurationPrinterColumn extends AbstractVehicleDurationPrinterColumn<VehicleTravelDurationPrinterColumn> {
+
+
+    /**
+     * Constructor.
+     */
+    public VehicleTravelDurationPrinterColumn() {
+        super();
+    }
+
+    /**
+     * Constructor with a post creation decorator provided.
+     */
+    public VehicleTravelDurationPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
+        super(decorator);
+    }
+
+
+    @Override
+    protected String getDefaultTitleBase() {
+        return "travel";
+    }
+
+    @Override
+    public Long getValue(VehicleSummaryContext context) {
+        return context.getTravelDuration();
+    }
+
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleTruckNamePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleTruckNamePrinterColumn.java
new file mode 100644
index 000000000..726fb82af
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleTruckNamePrinterColumn.java
@@ -0,0 +1,49 @@
+package com.graphhopper.jsprit.core.reporting.vehicle;
+
+import java.util.function.Consumer;
+
+import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
+import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
+
+/**
+ * The name of the vehicle associated by this route.
+ *
+ * <p>
+ * This colum returns the id of the vehicle of the route.
+ * </p>
+ *
+ * @author balage
+ */
+public class VehicleTruckNamePrinterColumn extends AbstractPrinterColumn<VehicleSummaryContext, String, VehicleTruckNamePrinterColumn> {
+
+    /**
+     * Constructor.
+     */
+    public VehicleTruckNamePrinterColumn() {
+        super();
+    }
+
+    /**
+     * Constructor with a post creation decorator provided.
+     */
+    public VehicleTruckNamePrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
+        super(decorator);
+    }
+
+    @Override
+    public ColumnDefinition.Builder getColumnBuilder() {
+        return new ColumnDefinition.Builder(new StringColumnType());
+    }
+
+    @Override
+    protected String getDefaultTitle() {
+        return "vehicle";
+    }
+
+    @Override
+    public String getData(VehicleSummaryContext context) {
+        return context.getVehicle().getId();
+    }
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleTypePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleTypePrinterColumn.java
new file mode 100644
index 000000000..ea6035c6b
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleTypePrinterColumn.java
@@ -0,0 +1,49 @@
+package com.graphhopper.jsprit.core.reporting.vehicle;
+
+import java.util.function.Consumer;
+
+import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
+import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
+
+/**
+ * The name of the vehicle associated by this route.
+ *
+ * <p>
+ * This colum returns the id of the vehicle of the route.
+ * </p>
+ *
+ * @author balage
+ */
+public class VehicleTypePrinterColumn extends AbstractPrinterColumn<VehicleSummaryContext, String, VehicleTypePrinterColumn> {
+
+    /**
+     * Constructor.
+     */
+    public VehicleTypePrinterColumn() {
+        super();
+    }
+
+    /**
+     * Constructor with a post creation decorator provided.
+     */
+    public VehicleTypePrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
+        super(decorator);
+    }
+
+    @Override
+    public ColumnDefinition.Builder getColumnBuilder() {
+        return new ColumnDefinition.Builder(new StringColumnType());
+    }
+
+    @Override
+    protected String getDefaultTitle() {
+        return "vehicle type";
+    }
+
+    @Override
+    public String getData(VehicleSummaryContext context) {
+        return context.getVehicle().getType().getTypeId();
+    }
+
+}
