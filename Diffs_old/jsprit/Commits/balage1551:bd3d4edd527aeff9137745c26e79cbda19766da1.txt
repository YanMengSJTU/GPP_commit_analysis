diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/BooleanColumnType.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/BooleanColumnType.java
index 64e762bac..ec2159033 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/BooleanColumnType.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/BooleanColumnType.java
@@ -1,23 +1,62 @@
 package com.graphhopper.jsprit.core.reporting.columndefinition;
 
+/**
+ * A column type with boolean values.
+ * <p>
+ * The display value for true and false values could be configured.
+ * </p>
+ *
+ * @author balage
+ *
+ */
 public class BooleanColumnType extends AbstractColumnType<Boolean> {
+    // The display value for true
     private String trueValue = "true";
+    // The display value for false
     private String falseValue = "false";
 
+    /**
+     * Konstructor. The column will use the default values for null, true or
+     * false.
+     */
     public BooleanColumnType() {
         super();
     }
 
+    /**
+     * Konstructor. The column will use the default values for true or false.
+     *
+     * @param nullValue
+     *            The text representation for null values.
+     */
     public BooleanColumnType(String nullValue) {
         super(nullValue);
     }
 
+    /**
+     * Konstructor. The column will use the default values for null.
+     *
+     * @param trueValue
+     *            The text representation for true values.
+     * @param falseValue
+     *            The text representation for false values.
+     */
     public BooleanColumnType(String trueValue, String falseValue) {
         super();
         this.trueValue = trueValue;
         this.falseValue = falseValue;
     }
 
+    /**
+     * Konstructor.
+     *
+     * @param trueValue
+     *            The text representation for true values.
+     * @param falseValue
+     *            The text representation for false values.
+     * @param nullValue
+     *            The text representation for null values.
+     */
     public BooleanColumnType(String trueValue, String falseValue, String nullValue) {
         super(nullValue);
         this.trueValue = trueValue;
@@ -29,6 +68,11 @@ protected String convertNotNull(Boolean data) {
         return data ? trueValue : falseValue;
     }
 
+    /**
+     * {@inheritDoc}
+     *
+     * Only accepts {@linkplain Boolean} input.
+     */
     @Override
     public boolean accepts(Object data) {
         return data instanceof Boolean;
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/ColumnAlignment.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/ColumnAlignment.java
index c4d405c15..44f4bc5fc 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/ColumnAlignment.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/ColumnAlignment.java
@@ -1,6 +1,18 @@
 package com.graphhopper.jsprit.core.reporting.columndefinition;
 
+/**
+ * Alignment of the column.
+ * <p>
+ * Longer values will be truncated, shorter values will be padded by spaces.
+ * </p>
+ *
+ * @author balage
+ *
+ */
 public enum ColumnAlignment {
+    /**
+     * The values are aligned left, padded on the right side.
+     */
     LEFT {
 
         @Override
@@ -11,7 +23,11 @@ public String align(String data, int width) {
             return String.format("%1$-" + width + "s", data);
         }
 
-    }, RIGHT {
+    },
+    /**
+     * The values are aligned right, padded on the left side.
+     */
+    RIGHT {
 
         @Override
         public String align(String data, int width) {
@@ -21,7 +37,12 @@ public String align(String data, int width) {
             return String.format("%1$" + width + "s", data);
         }
 
-    }, CENTER {
+    },
+    /**
+     * The values are centered, padded on the both sides evenly (in case of odd
+     * character padding, the left padding will be one more than the right one).
+     */
+    CENTER {
         @Override
         public String align(String data, int width) {
             if (data.length() > width) {
@@ -32,5 +53,15 @@ public String align(String data, int width) {
         }
     };
 
+    /**
+     * Applies the alignment on the data according the width. Truncates or pads
+     * the value.
+     * 
+     * @param data
+     *            The data to align.
+     * @param width
+     *            The width to pad to.
+     * @return The aligned (padded) values with the exact length of width.
+     */
     public abstract String align(String data, int width);
 }
\ No newline at end of file
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/ColumnDefinition.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/ColumnDefinition.java
index 2deabb14d..7fcdabd13 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/ColumnDefinition.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/ColumnDefinition.java
@@ -1,57 +1,151 @@
 package com.graphhopper.jsprit.core.reporting.columndefinition;
 
+/**
+ * Column definition. Contains all information for converting and formatting the
+ * column.
+ * <p>
+ * The definition itself immutable and cannot be directly instantiate. Use the
+ * {@linkplain Builder} class for constructing the definition.
+ * </p>
+ *
+ * @author balage
+ *
+ */
 public class ColumnDefinition {
 
+    /**
+     * The builder for {@linkplain ColumnDefinition}.
+     * <p>
+     * When it is not specified, the default title is null (the default title of
+     * the column will be used), the minWidth is 0, the maxWidth is
+     * {@linkplain Integer#MAX_VALUE} and the alignment is
+     * {@linkplain ColumnAlignment#LEFT}.
+     * </p>
+     *
+     * @author balage
+     *
+     */
     public static class Builder {
+        // Type of the column.
         private ColumnType<?> type;
+        // The title of the column.
         private String title;
+        // The minimal width of the column.
         private int minWidth = 0;
+        // The maximal width of the column.
         private int maxWidth = Integer.MAX_VALUE;
+        // The alignment of the column.
         private ColumnAlignment alignment = ColumnAlignment.LEFT;
 
+        /**
+         * Constructor with title specified.
+         *
+         * @param type
+         *            Type of the column.
+         * @param title
+         *            The title of the column.
+         * @see {@linkplain #withTitle(String)}
+         */
         public Builder(ColumnType<?> type, String title) {
             super();
             this.type = type;
             this.title = title;
         }
 
+        /**
+         * Constructor.
+         *
+         * @param type
+         *            Type of the column.
+         */
         public Builder(ColumnType<?> type) {
             super();
             this.type = type;
         }
 
+        /**
+         * @param title
+         *            The title of the column
+         * @return The builder object.
+         */
         public ColumnDefinition.Builder withTitle(String title) {
             this.title = title;
             return this;
         }
 
+        /**
+         * @param minWidth
+         *            The minimal width of the column.
+         * @return The builder object.
+         * @throws IllegalArgumentException
+         *             If the minWidth is negative or higher than the maxWidth.
+         */
         public ColumnDefinition.Builder withMinWidth(int minWidth) {
+            if (minWidth < 0) {
+                throw new IllegalArgumentException("Minimal width should be non-negative.");
+            }
+            if (minWidth > maxWidth) {
+                throw new IllegalArgumentException("Minimal width should be less or equal than the maximal width.");
+            }
             this.minWidth = minWidth;
             return this;
         }
 
+        /**
+         * @param maxWidth
+         *            The maximal width of the column.
+         * @return The builder object.
+         * @throws IllegalArgumentException
+         *             If the maxWidth is negative or less than the minWidth.
+         */
         public ColumnDefinition.Builder withMaxWidth(int maxWidth) {
+            if (maxWidth < 0) {
+                throw new IllegalArgumentException("Maximal width should be non-negative.");
+            }
+            if (maxWidth > maxWidth) {
+                throw new IllegalArgumentException("Maximal width should be greater or equal than the minimal width.");
+            }
             this.maxWidth = maxWidth;
             return this;
         }
 
+        /**
+         * @param alignment
+         *            The alignment of the column.
+         * @return The builder object.
+         */
         public ColumnDefinition.Builder withAlignment(ColumnAlignment alignment) {
             this.alignment = alignment;
             return this;
         }
 
+        /**
+         * @return The constructed imutable definition object.
+         */
         public ColumnDefinition build() {
             return new ColumnDefinition(this);
         }
 
     }
 
+
+    // Type of the column.
     private ColumnType<?> type;
+    // The title of the column.
     private String title;
+    // The minimal width of the column.
     private int minWidth = 0;
+    // The maximal width of the column.
     private int maxWidth = Integer.MAX_VALUE;
+    // The alignment of the column.
     private ColumnAlignment alignment = ColumnAlignment.LEFT;
 
+    /**
+     * Private constructor for the builder.
+     *
+     * @param builder
+     *            The builder.
+     */
     private ColumnDefinition(ColumnDefinition.Builder builder) {
         type = builder.type;
         title = builder.title;
@@ -60,24 +154,39 @@ private ColumnDefinition(ColumnDefinition.Builder builder) {
         alignment = builder.alignment;
     }
 
+    /**
+     * @return The type of the column.
+     */
     public ColumnType<?> getType() {
         return type;
     }
 
+    /**
+     * @return The title of the column. If null, the default title will be used.
+     */
     public String getTitle() {
         return title;
     }
 
+    /**
+     * @return The minimal width of the column.
+     */
     public int getMinWidth() {
         return minWidth;
     }
 
+    /**
+     * @return The maximal width of the column.
+     */
     public int getMaxWidth() {
         return maxWidth;
     }
 
+    /**
+     * @return The alignment of the column.
+     */
     public ColumnAlignment getAlignment() {
         return alignment;
     }
 
-}
\ No newline at end of file
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/DoubleColumnType.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/DoubleColumnType.java
index 9edbd9f1a..0e73a08f2 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/DoubleColumnType.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/DoubleColumnType.java
@@ -1,24 +1,67 @@
 package com.graphhopper.jsprit.core.reporting.columndefinition;
 
+/**
+ * A column type with double values.
+ * <p>
+ * The number of decimal places could be configured.
+ * </p>
+ *
+ * @author balage
+ *
+ */
 public class DoubleColumnType extends AbstractColumnType<Double> {
 
+    // The number of displayed decimal places
     private int decimals = 2;
 
+    /**
+     * Konstructor. The column will use the default values for null and the
+     * significant decimal places.
+     */
     public DoubleColumnType() {
         super();
     }
 
+    /**
+     * Konstructor. The column will use the default values for the significant
+     * decimal places.
+     *
+     * @param nullValue
+     *            The text representation for null values.
+     */
     public DoubleColumnType(String nullValue) {
         super(nullValue);
     }
 
+    /**
+     * Konstructor. The column will use the default values for null.
+     *
+     * @param decimals The number of decimal places to display.
+     * @throws IllegalArgumentException If the parameter is negative.
+     */
     public DoubleColumnType(int decimals) {
         super();
+        if (decimals < 0) {
+            throw new IllegalArgumentException("Decimal places should be 0 or more.");
+        }
         this.decimals = decimals;
     }
 
-    public DoubleColumnType(String nullValue, int decimals) {
+    /**
+     * Konstructor.
+     *
+     * @param decimals
+     *            The number of decimal places to display.
+     * @param nullValue
+     *            The text representation for null values.
+     * @throws IllegalArgumentException
+     *             If the parameter is negative.
+     */
+    public DoubleColumnType(int decimals, String nullValue) {
         super(nullValue);
+        if (decimals < 0) {
+            throw new IllegalArgumentException("Decimal places should be 0 or more.");
+        }
         this.decimals = decimals;
     }
 
@@ -27,10 +70,13 @@ protected String convertNotNull(Double data) {
         return String.format("%50." + decimals + "f", data).trim();
     }
 
+    /**
+     * {@inheritDoc} Only accepts Double values.
+     */
     @Override
     public boolean accepts(Object data) {
         return data instanceof Double;
     }
 
 
-}
\ No newline at end of file
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/IntColumnType.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/IntColumnType.java
index 5e7ea4af6..305d08911 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/IntColumnType.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/IntColumnType.java
@@ -1,11 +1,26 @@
 package com.graphhopper.jsprit.core.reporting.columndefinition;
 
+/**
+ * A column type with integer (4 byte) values.
+ *
+ * @author balage
+ *
+ */
 public class IntColumnType extends AbstractColumnType<Integer> {
 
+    /**
+     * Konstructor. The column will use the default values for null.
+     */
     public IntColumnType() {
         super();
     }
 
+    /**
+     * Konstructor.
+     *
+     * @param nullValue
+     *            The text representation for null values.
+     */
     public IntColumnType(String nullValue) {
         super(nullValue);
     }
@@ -15,6 +30,9 @@ protected String convertNotNull(Integer data) {
         return data.toString();
     }
 
+    /**
+     * {@inheritDoc} Only accepts Integer values.
+     */
     @Override
     public boolean accepts(Object data) {
         return data instanceof Integer;
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/LongColumnType.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/LongColumnType.java
index 168e58751..5be5b1557 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/LongColumnType.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/LongColumnType.java
@@ -1,11 +1,26 @@
 package com.graphhopper.jsprit.core.reporting.columndefinition;
 
+/**
+ * A column type with long (8-byte) values.
+ *
+ * @author balage
+ *
+ */
 public class LongColumnType extends AbstractColumnType<Long> {
 
+    /**
+     * Konstructor. The column will use the default values for null.
+     */
     public LongColumnType() {
         super();
     }
 
+    /**
+     * Konstructor.
+     *
+     * @param nullValue
+     *            The text representation for null values.
+     */
     public LongColumnType(String nullValue) {
         super(nullValue);
     }
@@ -15,6 +30,9 @@ protected String convertNotNull(Long data) {
         return data.toString();
     }
 
+    /**
+     * {@inheritDoc} Only accepts Long values.
+     */
     @Override
     public boolean accepts(Object data) {
         return data instanceof Long;
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/StringColumnType.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/StringColumnType.java
index 2ec730e9b..4468eb336 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/StringColumnType.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/StringColumnType.java
@@ -1,11 +1,26 @@
 package com.graphhopper.jsprit.core.reporting.columndefinition;
 
+/**
+ * A column type for any values.
+ *
+ * @author balage
+ *
+ */
 public class StringColumnType extends AbstractColumnType<Object> {
 
+    /**
+     * Konstructor. The column will use the default values for null.
+     */
     public StringColumnType() {
         super();
     }
 
+    /**
+     * Konstructor.
+     *
+     * @param nullValue
+     *            The text representation for null values.
+     */
     public StringColumnType(String nullValue) {
         super(nullValue);
     }
@@ -15,9 +30,13 @@ protected String convertNotNull(Object data) {
         return data.toString();
     }
 
+    /**
+     * {@inheritDoc} Accepts any type of values (uses
+     * {@linkplain Object#toString()}).
+     */
     @Override
     public boolean accepts(Object data) {
         return true;
     }
 
-}
\ No newline at end of file
+}
