diff --git a/jsprit-analysis/pom.xml b/jsprit-analysis/pom.xml
index dc12d8852..ad86acef0 100644
--- a/jsprit-analysis/pom.xml
+++ b/jsprit-analysis/pom.xml
@@ -16,7 +16,8 @@
   ~ limitations under the License.
   -->
 
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
     <parent>
         <groupId>com.graphhopper</groupId>
         <artifactId>jsprit</artifactId>
diff --git a/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/AlgorithmEventsRecorder.java b/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/AlgorithmEventsRecorder.java
index 764a7bf8c..ad0b60c5e 100644
--- a/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/AlgorithmEventsRecorder.java
+++ b/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/AlgorithmEventsRecorder.java
@@ -18,22 +18,9 @@
 
 package com.graphhopper.jsprit.analysis.toolbox;
 
-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.util.Collection;
-import java.util.List;
-import java.util.zip.GZIPOutputStream;
-
-import com.graphhopper.jsprit.core.algorithm.recreate.InsertActivity;
-import org.graphstream.graph.Edge;
-import org.graphstream.graph.Graph;
-import org.graphstream.graph.Node;
-import org.graphstream.graph.implementations.MultiGraph;
-import org.graphstream.stream.file.FileSinkDGS;
-
 import com.graphhopper.jsprit.core.algorithm.listener.AlgorithmEndsListener;
 import com.graphhopper.jsprit.core.algorithm.listener.IterationStartsListener;
+import com.graphhopper.jsprit.core.algorithm.recreate.InsertActivity;
 import com.graphhopper.jsprit.core.algorithm.recreate.InsertionData;
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.BeforeJobInsertionListener;
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionEndsListener;
@@ -53,12 +40,24 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.util.Coordinate;
 import com.graphhopper.jsprit.core.util.Solutions;
+import org.graphstream.graph.Edge;
+import org.graphstream.graph.Graph;
+import org.graphstream.graph.Node;
+import org.graphstream.graph.implementations.MultiGraph;
+import org.graphstream.stream.file.FileSinkDGS;
+
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.util.Collection;
+import java.util.List;
+import java.util.zip.GZIPOutputStream;
 
 /**
  * Writes out what happens when algorithm searches (in graphstream dgs-file).
  */
 public class AlgorithmEventsRecorder
-        implements RuinListener, IterationStartsListener, InsertionStartsListener, BeforeJobInsertionListener, InsertionEndsListener, AlgorithmEndsListener {
+    implements RuinListener, IterationStartsListener, InsertionStartsListener, BeforeJobInsertionListener, InsertionEndsListener, AlgorithmEndsListener {
 
     private boolean renderShipments = false;
 
diff --git a/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/Plotter.java b/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/Plotter.java
index 6e419f70c..a04dc25f2 100644
--- a/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/Plotter.java
+++ b/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/Plotter.java
@@ -461,7 +461,7 @@ private void save(JFreeChart chart, String pngFile) {
     }
 
     private XYSeriesCollection makeSolutionSeries(VehicleRoutingProblem vrp, Collection<VehicleRoute> routes) throws NoLocationFoundException {
-        Map<String,Coordinate> coords = makeMap(vrp.getAllLocations());
+        Map<String, Coordinate> coords = makeMap(vrp.getAllLocations());
         XYSeriesCollection coll = new XYSeriesCollection();
         int counter = 1;
         for (VehicleRoute route : routes) {
@@ -487,7 +487,7 @@ private XYSeriesCollection makeSolutionSeries(VehicleRoutingProblem vrp, Collect
 
     private Map<String, Coordinate> makeMap(Collection<Location> allLocations) {
         Map<String, Coordinate> coords = new HashMap<String, Coordinate>();
-        for(Location l : allLocations) coords.put(l.getId(),l.getCoordinate());
+        for (Location l : allLocations) coords.put(l.getId(), l.getCoordinate());
         return coords;
     }
 
diff --git a/jsprit-core/pom.xml b/jsprit-core/pom.xml
index 5e2d2512b..dea213209 100644
--- a/jsprit-core/pom.xml
+++ b/jsprit-core/pom.xml
@@ -1,4 +1,3 @@
-
 <!--
   ~ Licensed to GraphHopper GmbH under one or more contributor
   ~ license agreements. See the NOTICE file distributed with this work for
@@ -17,7 +16,8 @@
   ~ limitations under the License.
   -->
 
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
     <parent>
         <groupId>com.graphhopper</groupId>
         <artifactId>jsprit</artifactId>
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/AlgorithmUtil.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/AlgorithmUtil.java
index 155acbe29..66e3b8167 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/AlgorithmUtil.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/AlgorithmUtil.java
@@ -18,17 +18,7 @@
 
 package com.graphhopper.jsprit.core.algorithm;
 
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.Map;
-
-import com.graphhopper.jsprit.core.algorithm.state.StateManager;
-import com.graphhopper.jsprit.core.algorithm.state.UpdateActivityTimes;
-import com.graphhopper.jsprit.core.algorithm.state.UpdateEndLocationIfRouteIsOpen;
-import com.graphhopper.jsprit.core.algorithm.state.UpdateFutureWaitingTimes;
-import com.graphhopper.jsprit.core.algorithm.state.UpdateVariableCosts;
-import com.graphhopper.jsprit.core.algorithm.state.UpdateVehicleDependentPracticalTimeWindows;
+import com.graphhopper.jsprit.core.algorithm.state.*;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
 import com.graphhopper.jsprit.core.problem.constraint.SwitchNotFeasible;
@@ -37,12 +27,17 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeKey;
 import com.graphhopper.jsprit.core.util.ActivityTimeTracker;
 
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.Map;
+
 /**
  * Created by schroeder on 02/08/16.
  */
 public class AlgorithmUtil {
 
-    public static void addCoreConstraints(ConstraintManager constraintManager, StateManager stateManager, final VehicleRoutingProblem vrp){
+    public static void addCoreConstraints(ConstraintManager constraintManager, StateManager stateManager, final VehicleRoutingProblem vrp) {
         constraintManager.addTimeWindowConstraint();
         constraintManager.addLoadConstraint();
         constraintManager.addSkillsConstraint();
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/InsertionInitialSolutionFactory.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/InsertionInitialSolutionFactory.java
index f15f4acc4..137ad3446 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/InsertionInitialSolutionFactory.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/InsertionInitialSolutionFactory.java
@@ -19,13 +19,6 @@
 
 package com.graphhopper.jsprit.core.algorithm;
 
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.List;
-
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import com.graphhopper.jsprit.core.algorithm.recreate.InsertionStrategy;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
@@ -33,6 +26,12 @@
 import com.graphhopper.jsprit.core.problem.solution.SolutionCostCalculator;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
 
 
 public final class InsertionInitialSolutionFactory implements InitialSolutionFactory {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/PrettyAlgorithmBuilder.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/PrettyAlgorithmBuilder.java
index de96ca5cc..41e8c5c13 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/PrettyAlgorithmBuilder.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/PrettyAlgorithmBuilder.java
@@ -18,9 +18,6 @@
 
 package com.graphhopper.jsprit.core.algorithm;
 
-import java.util.Collection;
-import java.util.Random;
-
 import com.graphhopper.jsprit.core.algorithm.acceptor.SchrimpfAcceptance;
 import com.graphhopper.jsprit.core.algorithm.acceptor.SolutionAcceptor;
 import com.graphhopper.jsprit.core.algorithm.listener.AlgorithmStartsListener;
@@ -33,6 +30,9 @@
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleFleetManager;
 
+import java.util.Collection;
+import java.util.Random;
+
 /**
  * Created by schroeder on 10.12.14.
  */
@@ -86,7 +86,7 @@ public PrettyAlgorithmBuilder constructInitialSolutionWith(InsertionStrategy ins
 
     public VehicleRoutingAlgorithm build() {
         if (coreStuff) {
-            AlgorithmUtil.addCoreConstraints(constraintManager,stateManager,vrp);
+            AlgorithmUtil.addCoreConstraints(constraintManager, stateManager, vrp);
         }
         VehicleRoutingAlgorithm vra = new VehicleRoutingAlgorithm(vrp, searchStrategyManager, objectiveFunction);
         vra.addListener(stateManager);
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/RemoveEmptyVehicles.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/RemoveEmptyVehicles.java
index 7a7766d02..702affd5f 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/RemoveEmptyVehicles.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/RemoveEmptyVehicles.java
@@ -17,14 +17,14 @@
  */
 package com.graphhopper.jsprit.core.algorithm;
 
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.List;
-
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionEndsListener;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleFleetManager;
 
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
+
 
 public class RemoveEmptyVehicles implements InsertionEndsListener {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ResetAndIniFleetManager.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ResetAndIniFleetManager.java
index 82070a438..febba5c7d 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ResetAndIniFleetManager.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ResetAndIniFleetManager.java
@@ -17,14 +17,14 @@
  */
 package com.graphhopper.jsprit.core.algorithm;
 
-import java.util.ArrayList;
-import java.util.Collection;
-
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionStartsListener;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleFleetManager;
 
+import java.util.ArrayList;
+import java.util.Collection;
+
 
 public class ResetAndIniFleetManager implements InsertionStartsListener {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/SearchStrategy.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/SearchStrategy.java
index b7d9477c9..a68808e41 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/SearchStrategy.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/SearchStrategy.java
@@ -17,19 +17,18 @@
  */
 package com.graphhopper.jsprit.core.algorithm;
 
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Collections;
-
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import com.graphhopper.jsprit.core.algorithm.acceptor.SolutionAcceptor;
 import com.graphhopper.jsprit.core.algorithm.listener.SearchStrategyModuleListener;
 import com.graphhopper.jsprit.core.algorithm.selector.SolutionSelector;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.solution.SolutionCostCalculator;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
 
 
 public class SearchStrategy {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/SearchStrategyManager.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/SearchStrategyManager.java
index 6891c560b..5df03a5c4 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/SearchStrategyManager.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/SearchStrategyManager.java
@@ -17,19 +17,13 @@
  */
 package com.graphhopper.jsprit.core.algorithm;
 
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Random;
-
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import com.graphhopper.jsprit.core.algorithm.listener.SearchStrategyListener;
 import com.graphhopper.jsprit.core.algorithm.listener.SearchStrategyModuleListener;
 import com.graphhopper.jsprit.core.util.RandomNumberGeneration;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.util.*;
 
 
 public class SearchStrategyManager {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/VehicleRoutingAlgorithm.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/VehicleRoutingAlgorithm.java
index 6012398c4..a62b0a091 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/VehicleRoutingAlgorithm.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/VehicleRoutingAlgorithm.java
@@ -17,12 +17,6 @@
  */
 package com.graphhopper.jsprit.core.algorithm;
 
-import java.util.ArrayList;
-import java.util.Collection;
-
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import com.graphhopper.jsprit.core.algorithm.SearchStrategy.DiscoveredSolution;
 import com.graphhopper.jsprit.core.algorithm.listener.SearchStrategyListener;
 import com.graphhopper.jsprit.core.algorithm.listener.SearchStrategyModuleListener;
@@ -37,6 +31,11 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.util.Solutions;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.util.ArrayList;
+import java.util.Collection;
 
 
 /**
@@ -47,7 +46,6 @@
 public class VehicleRoutingAlgorithm {
 
 
-
     private static class TerminationManager implements PrematureAlgorithmTermination {
 
         private Collection<PrematureAlgorithmTermination> terminationCriteria = new ArrayList<PrematureAlgorithmTermination>();
@@ -152,14 +150,14 @@ private void verify(VehicleRoutingProblemSolution solution) {
             nuJobs += route.getTourActivities().getJobs().size();
             if (route.getVehicle().getIndex() == 0) {
                 throw new IllegalStateException("vehicle used in initial solution has no index. probably a vehicle is used that has not been added to the " +
-                        " the VehicleRoutingProblem. only use vehicles that have already been added to the problem.");
+                    " the VehicleRoutingProblem. only use vehicles that have already been added to the problem.");
             }
             for (TourActivity act : route.getActivities()) {
                 if (act.getIndex() == 0) {
                     throw new IllegalStateException("act in initial solution has no index. activities are created and associated to their job in VehicleRoutingProblem\n." +
-                            " thus if you build vehicle-routes use the jobActivityFactory from vehicle routing problem like that \n" +
-                            " VehicleRoute.Builder.newInstance(knownVehicle).setJobActivityFactory(vrp.getJobActivityFactory).addService(..)....build() \n" +
-                            " then the activities that are created to build the route are identical to the ones used in VehicleRoutingProblem");
+                        " thus if you build vehicle-routes use the jobActivityFactory from vehicle routing problem like that \n" +
+                        " VehicleRoute.Builder.newInstance(knownVehicle).setJobActivityFactory(vrp.getJobActivityFactory).addService(..)....build() \n" +
+                        " then the activities that are created to build the route are identical to the ones used in VehicleRoutingProblem");
                 }
             }
         }
@@ -351,7 +349,7 @@ public int getMaxIterations() {
         return maxIterations;
     }
 
-    public SolutionCostCalculator getObjectiveFunction(){
+    public SolutionCostCalculator getObjectiveFunction() {
         return objectiveFunction;
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/acceptor/AcceptNewRemoveFirst.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/acceptor/AcceptNewRemoveFirst.java
index cf87d4681..f7740a5c9 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/acceptor/AcceptNewRemoveFirst.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/acceptor/AcceptNewRemoveFirst.java
@@ -18,10 +18,10 @@
 
 package com.graphhopper.jsprit.core.algorithm.acceptor;
 
-import java.util.Collection;
-
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 
+import java.util.Collection;
+
 /**
  * Created by schroeder on 09/02/16.
  */
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/acceptor/ExperimentalSchrimpfAcceptance.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/acceptor/ExperimentalSchrimpfAcceptance.java
index c56696c0e..68ef0dbb9 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/acceptor/ExperimentalSchrimpfAcceptance.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/acceptor/ExperimentalSchrimpfAcceptance.java
@@ -17,12 +17,6 @@
  */
 package com.graphhopper.jsprit.core.algorithm.acceptor;
 
-import java.util.Collection;
-
-import org.apache.commons.math3.stat.descriptive.moment.StandardDeviation;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import com.graphhopper.jsprit.core.algorithm.VehicleRoutingAlgorithm;
 import com.graphhopper.jsprit.core.algorithm.box.GreedySchrimpfFactory;
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
@@ -32,6 +26,11 @@
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.util.Solutions;
+import org.apache.commons.math3.stat.descriptive.moment.StandardDeviation;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.util.Collection;
 
 
 public class ExperimentalSchrimpfAcceptance implements SolutionAcceptor, IterationStartsListener, AlgorithmStartsListener {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/acceptor/GreedyAcceptance.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/acceptor/GreedyAcceptance.java
index bc674d09c..815e81d1a 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/acceptor/GreedyAcceptance.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/acceptor/GreedyAcceptance.java
@@ -17,10 +17,10 @@
  */
 package com.graphhopper.jsprit.core.algorithm.acceptor;
 
-import java.util.Collection;
-
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 
+import java.util.Collection;
+
 
 /**
  * Acceptor that accepts solutions to be memorized only better solutions.
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/acceptor/SchrimpfAcceptance.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/acceptor/SchrimpfAcceptance.java
index fa437cacf..f89960b09 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/acceptor/SchrimpfAcceptance.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/acceptor/SchrimpfAcceptance.java
@@ -17,16 +17,15 @@
  */
 package com.graphhopper.jsprit.core.algorithm.acceptor;
 
-import java.util.Collection;
-
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import com.graphhopper.jsprit.core.algorithm.VehicleRoutingAlgorithm;
 import com.graphhopper.jsprit.core.algorithm.listener.AlgorithmStartsListener;
 import com.graphhopper.jsprit.core.algorithm.listener.IterationStartsListener;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.util.Collection;
 
 
 /**
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/acceptor/SchrimpfInitialThresholdGenerator.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/acceptor/SchrimpfInitialThresholdGenerator.java
index 27de59d6e..5be4180a8 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/acceptor/SchrimpfInitialThresholdGenerator.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/acceptor/SchrimpfInitialThresholdGenerator.java
@@ -17,12 +17,6 @@
  */
 package com.graphhopper.jsprit.core.algorithm.acceptor;
 
-import java.util.Collection;
-
-import org.apache.commons.math3.stat.descriptive.moment.StandardDeviation;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import com.graphhopper.jsprit.core.algorithm.VehicleRoutingAlgorithm;
 import com.graphhopper.jsprit.core.algorithm.box.GreedySchrimpfFactory;
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
@@ -31,6 +25,11 @@
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.util.Solutions;
+import org.apache.commons.math3.stat.descriptive.moment.StandardDeviation;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.util.Collection;
 
 public class SchrimpfInitialThresholdGenerator implements AlgorithmStartsListener {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/acceptor/SolutionAcceptor.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/acceptor/SolutionAcceptor.java
index 5149a49c3..35cf91582 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/acceptor/SolutionAcceptor.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/acceptor/SolutionAcceptor.java
@@ -18,10 +18,10 @@
 
 package com.graphhopper.jsprit.core.algorithm.acceptor;
 
-import java.util.Collection;
-
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 
+import java.util.Collection;
+
 
 /**
  * Acceptor that decides whether the newSolution is accepted or not.
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/box/ConcurrentInsertionNoiseMaker.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/box/ConcurrentInsertionNoiseMaker.java
index 4f3b5dd93..fc866d630 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/box/ConcurrentInsertionNoiseMaker.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/box/ConcurrentInsertionNoiseMaker.java
@@ -18,9 +18,6 @@
 
 package com.graphhopper.jsprit.core.algorithm.box;
 
-import java.util.Collection;
-import java.util.Random;
-
 import com.graphhopper.jsprit.core.algorithm.listener.IterationStartsListener;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.constraint.SoftActivityConstraint;
@@ -29,6 +26,9 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.util.RandomNumberGeneration;
 
+import java.util.Collection;
+import java.util.Random;
+
 /**
  * Created by schroeder on 16/01/15.
  */
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/box/GreedySchrimpfFactory.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/box/GreedySchrimpfFactory.java
index 6ac2afba1..c9a49e96b 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/box/GreedySchrimpfFactory.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/box/GreedySchrimpfFactory.java
@@ -56,7 +56,7 @@ public VehicleRoutingAlgorithm createAlgorithm(VehicleRoutingProblem vrp) {
         int randomShare = (int) (vrp.getJobs().size() * 0.5);
 
         Jsprit.Builder builder = Jsprit.Builder.newInstance(vrp);
-        builder.setProperty(Jsprit.Parameter.THRESHOLD_ALPHA,"0.0");
+        builder.setProperty(Jsprit.Parameter.THRESHOLD_ALPHA, "0.0");
         builder.setProperty(Jsprit.Strategy.RADIAL_BEST, "0.5");
         builder.setProperty(Jsprit.Strategy.RADIAL_REGRET, "0.0");
         builder.setProperty(Jsprit.Strategy.RANDOM_BEST, "0.5");
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/box/InsertionNoiseMaker.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/box/InsertionNoiseMaker.java
index a273d092b..284910309 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/box/InsertionNoiseMaker.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/box/InsertionNoiseMaker.java
@@ -18,9 +18,6 @@
 
 package com.graphhopper.jsprit.core.algorithm.box;
 
-import java.util.Collection;
-import java.util.Random;
-
 import com.graphhopper.jsprit.core.algorithm.listener.IterationStartsListener;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.constraint.SoftActivityConstraint;
@@ -29,6 +26,9 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.util.RandomNumberGeneration;
 
+import java.util.Collection;
+import java.util.Random;
+
 /**
  * Created by schroeder on 16/01/15.
  */
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/box/Jsprit.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/box/Jsprit.java
index 2ea246b35..a875110f5 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/box/Jsprit.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/box/Jsprit.java
@@ -18,12 +18,6 @@
 
 package com.graphhopper.jsprit.core.algorithm.box;
 
-import java.util.Collection;
-import java.util.Properties;
-import java.util.Random;
-import java.util.concurrent.ExecutorService;
-import java.util.concurrent.Executors;
-
 import com.graphhopper.jsprit.core.algorithm.PrettyAlgorithmBuilder;
 import com.graphhopper.jsprit.core.algorithm.SearchStrategy;
 import com.graphhopper.jsprit.core.algorithm.VehicleRoutingAlgorithm;
@@ -32,24 +26,8 @@
 import com.graphhopper.jsprit.core.algorithm.listener.AlgorithmEndsListener;
 import com.graphhopper.jsprit.core.algorithm.listener.IterationStartsListener;
 import com.graphhopper.jsprit.core.algorithm.module.RuinAndRecreateModule;
-import com.graphhopper.jsprit.core.algorithm.recreate.AbstractInsertionStrategy;
-import com.graphhopper.jsprit.core.algorithm.recreate.ActivityInsertionCostsCalculator;
-import com.graphhopper.jsprit.core.algorithm.recreate.BestInsertion;
-import com.graphhopper.jsprit.core.algorithm.recreate.BestInsertionConcurrent;
-import com.graphhopper.jsprit.core.algorithm.recreate.BreakScheduling;
-import com.graphhopper.jsprit.core.algorithm.recreate.DefaultScorer;
-import com.graphhopper.jsprit.core.algorithm.recreate.InsertionBuilder;
-import com.graphhopper.jsprit.core.algorithm.recreate.RegretInsertion;
-import com.graphhopper.jsprit.core.algorithm.recreate.RegretInsertionConcurrent;
-import com.graphhopper.jsprit.core.algorithm.recreate.RegretInsertionConcurrentFast;
-import com.graphhopper.jsprit.core.algorithm.recreate.RegretInsertionFast;
-import com.graphhopper.jsprit.core.algorithm.ruin.JobNeighborhoods;
-import com.graphhopper.jsprit.core.algorithm.ruin.JobNeighborhoodsFactory;
-import com.graphhopper.jsprit.core.algorithm.ruin.RuinClusters;
-import com.graphhopper.jsprit.core.algorithm.ruin.RuinRadial;
-import com.graphhopper.jsprit.core.algorithm.ruin.RuinRandom;
-import com.graphhopper.jsprit.core.algorithm.ruin.RuinShareFactory;
-import com.graphhopper.jsprit.core.algorithm.ruin.RuinWorst;
+import com.graphhopper.jsprit.core.algorithm.recreate.*;
+import com.graphhopper.jsprit.core.algorithm.ruin.*;
 import com.graphhopper.jsprit.core.algorithm.ruin.distance.DefaultJobDistance;
 import com.graphhopper.jsprit.core.algorithm.selector.SelectBest;
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
@@ -68,6 +46,12 @@
 import com.graphhopper.jsprit.core.util.RandomNumberGeneration;
 import com.graphhopper.jsprit.core.util.Solutions;
 
+import java.util.Collection;
+import java.util.Properties;
+import java.util.Random;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+
 
 public class Jsprit {
 
@@ -236,7 +220,7 @@ public Builder setExecutorService(ExecutorService es, int noThreads) {
             return this;
         }
 
-        public Builder setCustomAcceptor(SolutionAcceptor acceptor){
+        public Builder setCustomAcceptor(SolutionAcceptor acceptor) {
             this.solutionAcceptor = acceptor;
             return this;
         }
@@ -391,10 +375,9 @@ private VehicleRoutingAlgorithm create(final VehicleRoutingProblem vrp) {
         jobNeighborhoods.initialise();
 
         final double maxCosts;
-        if(properties.containsKey(Parameter.MAX_TRANSPORT_COSTS.toString())){
+        if (properties.containsKey(Parameter.MAX_TRANSPORT_COSTS.toString())) {
             maxCosts = Double.parseDouble(getProperty(Parameter.MAX_TRANSPORT_COSTS.toString()));
-        }
-        else{
+        } else {
             maxCosts = jobNeighborhoods.getMaxDistance();
         }
 
@@ -414,33 +397,33 @@ private VehicleRoutingAlgorithm create(final VehicleRoutingProblem vrp) {
         RuinRadial radial = new RuinRadial(vrp, vrp.getJobs().size(), jobNeighborhoods);
         radial.setRandom(random);
         radial.setRuinShareFactory(new RuinShareFactoryImpl(
-                toInteger(properties.getProperty(Parameter.RADIAL_MIN_SHARE.toString())),
-                toInteger(properties.getProperty(Parameter.RADIAL_MAX_SHARE.toString())),
-                random)
+            toInteger(properties.getProperty(Parameter.RADIAL_MIN_SHARE.toString())),
+            toInteger(properties.getProperty(Parameter.RADIAL_MAX_SHARE.toString())),
+            random)
         );
 
         final RuinRandom random_for_regret = new RuinRandom(vrp, 0.5);
         random_for_regret.setRandom(random);
         random_for_regret.setRuinShareFactory(new RuinShareFactoryImpl(
-                toInteger(properties.getProperty(Parameter.RANDOM_REGRET_MIN_SHARE.toString())),
-                toInteger(properties.getProperty(Parameter.RANDOM_REGRET_MAX_SHARE.toString())),
-                random)
+            toInteger(properties.getProperty(Parameter.RANDOM_REGRET_MIN_SHARE.toString())),
+            toInteger(properties.getProperty(Parameter.RANDOM_REGRET_MAX_SHARE.toString())),
+            random)
         );
 
         final RuinRandom random_for_best = new RuinRandom(vrp, 0.5);
         random_for_best.setRandom(random);
         random_for_best.setRuinShareFactory(new RuinShareFactoryImpl(
-                toInteger(properties.getProperty(Parameter.RANDOM_BEST_MIN_SHARE.toString())),
-                toInteger(properties.getProperty(Parameter.RANDOM_BEST_MAX_SHARE.toString())),
-                random)
+            toInteger(properties.getProperty(Parameter.RANDOM_BEST_MIN_SHARE.toString())),
+            toInteger(properties.getProperty(Parameter.RANDOM_BEST_MAX_SHARE.toString())),
+            random)
         );
 
         final RuinWorst worst = new RuinWorst(vrp, (int) (vrp.getJobs().values().size() * 0.5));
         worst.setRandom(random);
         worst.setRuinShareFactory(new RuinShareFactoryImpl(
-                toInteger(properties.getProperty(Parameter.WORST_MIN_SHARE.toString())),
-                toInteger(properties.getProperty(Parameter.WORST_MAX_SHARE.toString())),
-                random)
+            toInteger(properties.getProperty(Parameter.WORST_MIN_SHARE.toString())),
+            toInteger(properties.getProperty(Parameter.WORST_MAX_SHARE.toString())),
+            random)
         );
         IterationStartsListener noise = new IterationStartsListener() {
             @Override
@@ -460,9 +443,9 @@ public double makeNoise() {
         final RuinClusters clusters = new RuinClusters(vrp, (int) (vrp.getJobs().values().size() * 0.5), jobNeighborhoods);
         clusters.setRandom(random);
         clusters.setRuinShareFactory(new RuinShareFactoryImpl(
-                toInteger(properties.getProperty(Parameter.WORST_MIN_SHARE.toString())),
-                toInteger(properties.getProperty(Parameter.WORST_MAX_SHARE.toString())),
-                random)
+            toInteger(properties.getProperty(Parameter.WORST_MIN_SHARE.toString())),
+            toInteger(properties.getProperty(Parameter.WORST_MAX_SHARE.toString())),
+            random)
         );
 
         AbstractInsertionStrategy regret;
@@ -470,7 +453,7 @@ public double makeNoise() {
 
         boolean fastRegret = Boolean.parseBoolean(getProperty(Parameter.FAST_REGRET.toString()));
         if (es != null) {
-            if(fastRegret){
+            if (fastRegret) {
                 RegretInsertionConcurrentFast regretInsertion = (RegretInsertionConcurrentFast) new InsertionBuilder(vrp, fm, stateManager, constraintManager)
                     .setInsertionStrategy(InsertionBuilder.Strategy.REGRET)
                     .setConcurrentMode(es, noThreads)
@@ -483,8 +466,7 @@ public double makeNoise() {
                 regretInsertion.setScoringFunction(scorer);
                 regretInsertion.setDependencyTypes(constraintManager.getDependencyTypes());
                 regret = regretInsertion;
-            }
-            else {
+            } else {
                 RegretInsertionConcurrent regretInsertion = (RegretInsertionConcurrent) new InsertionBuilder(vrp, fm, stateManager, constraintManager)
                     .setInsertionStrategy(InsertionBuilder.Strategy.REGRET)
                     .setConcurrentMode(es, noThreads)
@@ -497,7 +479,7 @@ public double makeNoise() {
                 regret = regretInsertion;
             }
         } else {
-            if(fastRegret) {
+            if (fastRegret) {
                 RegretInsertionFast regretInsertion = (RegretInsertionFast) new InsertionBuilder(vrp, fm, stateManager, constraintManager)
                     .setInsertionStrategy(InsertionBuilder.Strategy.REGRET)
                     .setFastRegret(true)
@@ -509,8 +491,7 @@ public double makeNoise() {
                 regretInsertion.setScoringFunction(scorer);
                 regretInsertion.setDependencyTypes(constraintManager.getDependencyTypes());
                 regret = regretInsertion;
-            }
-            else{
+            } else {
                 RegretInsertion regretInsertion = (RegretInsertion) new InsertionBuilder(vrp, fm, stateManager, constraintManager)
                     .setInsertionStrategy(InsertionBuilder.Strategy.REGRET)
                     .setAllowVehicleSwitch(toBoolean(getProperty(Parameter.VEHICLE_SWITCH.toString())))
@@ -546,7 +527,7 @@ public double makeNoise() {
         best.setRandom(random);
 
         IterationStartsListener schrimpfThreshold = null;
-        if(acceptor == null) {
+        if (acceptor == null) {
             final SchrimpfAcceptance schrimpfAcceptance = new SchrimpfAcceptance(1, toDouble(getProperty(Parameter.THRESHOLD_ALPHA.toString())));
             schrimpfThreshold = new IterationStartsListener() {
                 @Override
@@ -608,14 +589,14 @@ public void informIterationStarts(int i, VehicleRoutingProblem problem, Collecti
 
 
         VehicleRoutingAlgorithm vra = prettyBuilder.build();
-        if(schrimpfThreshold != null) {
+        if (schrimpfThreshold != null) {
             vra.addListener(schrimpfThreshold);
         }
         vra.addListener(noiseConfigurator);
         vra.addListener(noise);
         vra.addListener(clusters);
 
-        if(toBoolean(getProperty(Parameter.BREAK_SCHEDULING.toString()))) {
+        if (toBoolean(getProperty(Parameter.BREAK_SCHEDULING.toString()))) {
             vra.addListener(new BreakScheduling(vrp, stateManager, constraintManager));
         }
         handleExecutorShutdown(vra);
@@ -711,7 +692,7 @@ public double getCosts(VehicleRoutingProblemSolution solution) {
                         }
                     }
                 }
-                for(Job j : solution.getUnassignedJobs()){
+                for (Job j : solution.getUnassignedJobs()) {
                     costs += maxCosts * 2 * (4 - j.getPriority());
                 }
                 return costs;
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/box/SchrimpfFactory.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/box/SchrimpfFactory.java
index 836b34f15..475d6b261 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/box/SchrimpfFactory.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/box/SchrimpfFactory.java
@@ -53,7 +53,7 @@ public VehicleRoutingAlgorithm createAlgorithm(VehicleRoutingProblem vrp) {
         int radialShare = (int) (vrp.getJobs().size() * 0.3);
         int randomShare = (int) (vrp.getJobs().size() * 0.5);
         Jsprit.Builder builder = Jsprit.Builder.newInstance(vrp);
-        builder.setProperty(Jsprit.Parameter.THRESHOLD_ALPHA,"0.0");
+        builder.setProperty(Jsprit.Parameter.THRESHOLD_ALPHA, "0.0");
         builder.setProperty(Jsprit.Strategy.RADIAL_BEST, "0.5");
         builder.setProperty(Jsprit.Strategy.RADIAL_REGRET, "0.0");
         builder.setProperty(Jsprit.Strategy.RANDOM_BEST, "0.5");
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/listener/AlgorithmEndsListener.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/listener/AlgorithmEndsListener.java
index 4eeeb0412..3cf5ecd4e 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/listener/AlgorithmEndsListener.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/listener/AlgorithmEndsListener.java
@@ -17,11 +17,11 @@
  */
 package com.graphhopper.jsprit.core.algorithm.listener;
 
-import java.util.Collection;
-
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 
+import java.util.Collection;
+
 
 public interface AlgorithmEndsListener extends VehicleRoutingAlgorithmListener {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/listener/AlgorithmStartsListener.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/listener/AlgorithmStartsListener.java
index 8c2fa0094..5e2dc85f9 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/listener/AlgorithmStartsListener.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/listener/AlgorithmStartsListener.java
@@ -17,12 +17,12 @@
  */
 package com.graphhopper.jsprit.core.algorithm.listener;
 
-import java.util.Collection;
-
 import com.graphhopper.jsprit.core.algorithm.VehicleRoutingAlgorithm;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 
+import java.util.Collection;
+
 
 public interface AlgorithmStartsListener extends VehicleRoutingAlgorithmListener {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/listener/IterationEndsListener.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/listener/IterationEndsListener.java
index 63150ad58..6599bc4ed 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/listener/IterationEndsListener.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/listener/IterationEndsListener.java
@@ -17,11 +17,11 @@
  */
 package com.graphhopper.jsprit.core.algorithm.listener;
 
-import java.util.Collection;
-
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 
+import java.util.Collection;
+
 
 public interface IterationEndsListener extends VehicleRoutingAlgorithmListener {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/listener/IterationStartsListener.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/listener/IterationStartsListener.java
index c54057a46..66fe8bdfc 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/listener/IterationStartsListener.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/listener/IterationStartsListener.java
@@ -17,11 +17,11 @@
  */
 package com.graphhopper.jsprit.core.algorithm.listener;
 
-import java.util.Collection;
-
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 
+import java.util.Collection;
+
 
 public interface IterationStartsListener extends VehicleRoutingAlgorithmListener {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/listener/StrategySelectedListener.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/listener/StrategySelectedListener.java
index d666f71bf..4d54e95d4 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/listener/StrategySelectedListener.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/listener/StrategySelectedListener.java
@@ -17,12 +17,12 @@
  */
 package com.graphhopper.jsprit.core.algorithm.listener;
 
-import java.util.Collection;
-
 import com.graphhopper.jsprit.core.algorithm.SearchStrategy;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 
+import java.util.Collection;
+
 
 public interface StrategySelectedListener extends VehicleRoutingAlgorithmListener {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/listener/VehicleRoutingAlgorithmListeners.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/listener/VehicleRoutingAlgorithmListeners.java
index ee609d4f3..bb4c3cf0d 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/listener/VehicleRoutingAlgorithmListeners.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/listener/VehicleRoutingAlgorithmListeners.java
@@ -17,18 +17,13 @@
  */
 package com.graphhopper.jsprit.core.algorithm.listener;
 
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.Comparator;
-import java.util.List;
-import java.util.TreeSet;
-
 import com.graphhopper.jsprit.core.algorithm.SearchStrategy;
 import com.graphhopper.jsprit.core.algorithm.VehicleRoutingAlgorithm;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 
+import java.util.*;
+
 
 public class VehicleRoutingAlgorithmListeners {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/module/RuinAndRecreateModule.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/module/RuinAndRecreateModule.java
index 56aa5fa2c..9c6e85cc4 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/module/RuinAndRecreateModule.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/module/RuinAndRecreateModule.java
@@ -17,10 +17,6 @@
  */
 package com.graphhopper.jsprit.core.algorithm.module;
 
-import java.util.Collection;
-import java.util.HashSet;
-import java.util.Set;
-
 import com.graphhopper.jsprit.core.algorithm.SearchStrategyModule;
 import com.graphhopper.jsprit.core.algorithm.listener.SearchStrategyModuleListener;
 import com.graphhopper.jsprit.core.algorithm.recreate.InsertionStrategy;
@@ -30,6 +26,10 @@
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 
+import java.util.Collection;
+import java.util.HashSet;
+import java.util.Set;
+
 
 public class RuinAndRecreateModule implements SearchStrategyModule {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/AbstractInsertionStrategy.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/AbstractInsertionStrategy.java
index 2a246ba59..7d794a6d9 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/AbstractInsertionStrategy.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/AbstractInsertionStrategy.java
@@ -19,13 +19,6 @@
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
 
-import java.util.Collection;
-import java.util.Collections;
-import java.util.Random;
-
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionListener;
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionListeners;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
@@ -34,6 +27,12 @@
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.util.RandomNumberGeneration;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.util.Collection;
+import java.util.Collections;
+import java.util.Random;
 
 public abstract class AbstractInsertionStrategy implements InsertionStrategy {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/AuxilliaryCostCalculator.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/AuxilliaryCostCalculator.java
index 66dda6b17..5389629a9 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/AuxilliaryCostCalculator.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/AuxilliaryCostCalculator.java
@@ -17,9 +17,6 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
-import java.util.Iterator;
-import java.util.List;
-
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingActivityCosts;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.driver.Driver;
@@ -27,6 +24,9 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 
+import java.util.Iterator;
+import java.util.List;
+
 
 final class AuxilliaryCostCalculator {
 
@@ -68,7 +68,7 @@ public double costOfPath(final List<TourActivity> path, final double depTime, fi
             double transportTime = routingCosts.getTransportTime(prevAct.getLocation(), act.getLocation(), departureTimePrevAct, driver, vehicle);
             cost += transportCost;
             double actStartTime = departureTimePrevAct + transportTime;
-            departureTimePrevAct = Math.max(actStartTime, act.getTheoreticalEarliestOperationStartTime()) + activityCosts.getActivityDuration(act,actStartTime,driver,vehicle);
+            departureTimePrevAct = Math.max(actStartTime, act.getTheoreticalEarliestOperationStartTime()) + activityCosts.getActivityDuration(act, actStartTime, driver, vehicle);
             cost += activityCosts.getActivityCost(act, actStartTime, driver, vehicle);
             prevAct = act;
         }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BestInsertion.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BestInsertion.java
index 6b1699687..8eebdc0e2 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BestInsertion.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BestInsertion.java
@@ -17,19 +17,14 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.Comparator;
-import java.util.List;
-
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.util.NoiseMaker;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.util.*;
 
 
 /**
@@ -98,7 +93,7 @@ public String toString() {
     }
 
     private void sometimesSortPriorities(List<Job> unassignedJobList) {
-        if(random.nextDouble() < 0.5){
+        if (random.nextDouble() < 0.5) {
             Collections.sort(unassignedJobList, new Comparator<Job>() {
                 @Override
                 public int compare(Job o1, Job o2) {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BestInsertionBuilder.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BestInsertionBuilder.java
index fa3fa09b5..8fa8d5e1d 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BestInsertionBuilder.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BestInsertionBuilder.java
@@ -17,10 +17,6 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
-import java.util.ArrayList;
-import java.util.List;
-import java.util.concurrent.ExecutorService;
-
 import com.graphhopper.jsprit.core.algorithm.listener.VehicleRoutingAlgorithmListeners.PrioritizedVRAListener;
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionListener;
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
@@ -28,6 +24,10 @@
 import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleFleetManager;
 
+import java.util.ArrayList;
+import java.util.List;
+import java.util.concurrent.ExecutorService;
+
 
 public class BestInsertionBuilder {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BestInsertionConcurrent.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BestInsertionConcurrent.java
index 73235ab7e..7ee6a493c 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BestInsertionConcurrent.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BestInsertionConcurrent.java
@@ -17,20 +17,6 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.Comparator;
-import java.util.List;
-import java.util.concurrent.Callable;
-import java.util.concurrent.ExecutionException;
-import java.util.concurrent.ExecutorCompletionService;
-import java.util.concurrent.ExecutorService;
-import java.util.concurrent.Future;
-
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import com.graphhopper.jsprit.core.algorithm.recreate.InsertionData.NoInsertionFound;
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionListeners;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
@@ -38,6 +24,11 @@
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.util.*;
+import java.util.concurrent.*;
 
 
 /**
@@ -152,7 +143,7 @@ public Insertion call() throws Exception {
     }
 
     private void sometimesSortPriorities(List<Job> unassignedJobList) {
-        if(random.nextDouble() < 0.5){
+        if (random.nextDouble() < 0.5) {
             Collections.sort(unassignedJobList, new Comparator<Job>() {
                 @Override
                 public int compare(Job o1, Job o2) {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BreakInsertionCalculator.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BreakInsertionCalculator.java
index ef814c854..afd439fe1 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BreakInsertionCalculator.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BreakInsertionCalculator.java
@@ -17,21 +17,10 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
-import java.util.Arrays;
-import java.util.Iterator;
-import java.util.List;
-
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import com.graphhopper.jsprit.core.problem.JobActivityFactory;
 import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
-import com.graphhopper.jsprit.core.problem.constraint.HardActivityConstraint;
+import com.graphhopper.jsprit.core.problem.constraint.*;
 import com.graphhopper.jsprit.core.problem.constraint.HardActivityConstraint.ConstraintsStatus;
-import com.graphhopper.jsprit.core.problem.constraint.HardRouteConstraint;
-import com.graphhopper.jsprit.core.problem.constraint.SoftActivityConstraint;
-import com.graphhopper.jsprit.core.problem.constraint.SoftRouteConstraint;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingActivityCosts;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.driver.Driver;
@@ -44,6 +33,12 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.Start;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.util.Arrays;
+import java.util.Iterator;
+import java.util.List;
 
 /**
  * Calculator that calculates the best insertion position for a service.
@@ -170,7 +165,7 @@ public InsertionData getInsertionData(final VehicleRoute currentRoute, final Job
                 }
             }
             double nextActArrTime = prevActStartTime + transportCosts.getTransportTime(prevAct.getLocation(), nextAct.getLocation(), prevActStartTime, newDriver, newVehicle);
-            prevActStartTime = Math.max(nextActArrTime, nextAct.getTheoreticalEarliestOperationStartTime()) + activityCosts.getActivityDuration(nextAct,nextActArrTime,newDriver,newVehicle);
+            prevActStartTime = Math.max(nextActArrTime, nextAct.getTheoreticalEarliestOperationStartTime()) + activityCosts.getActivityDuration(nextAct, nextActArrTime, newDriver, newVehicle);
             prevAct = nextAct;
             actIndex++;
             if (breakThis) break;
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BreakScheduling.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BreakScheduling.java
index 4bc594e80..39ad4d4ee 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BreakScheduling.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BreakScheduling.java
@@ -18,15 +18,6 @@
 
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Set;
-
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionStartsListener;
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.JobInsertedListener;
 import com.graphhopper.jsprit.core.algorithm.ruin.listener.RuinListener;
@@ -36,11 +27,15 @@
 import com.graphhopper.jsprit.core.problem.job.Break;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.util.*;
 
 /**
  * Created by schroeder on 07/04/16.
  */
-public class BreakScheduling implements InsertionStartsListener,JobInsertedListener, RuinListener {
+public class BreakScheduling implements InsertionStartsListener, JobInsertedListener, RuinListener {
 
     private final static Logger logger = LoggerFactory.getLogger(BreakScheduling.class);
 
@@ -54,7 +49,7 @@
 
     public BreakScheduling(VehicleRoutingProblem vrp, StateManager stateManager, ConstraintManager constraintManager) {
         this.stateManager = stateManager;
-        this.breakInsertionCalculator = new BreakInsertionCalculator(vrp.getTransportCosts(),vrp.getActivityCosts(),new LocalActivityInsertionCostsCalculator(vrp.getTransportCosts(),vrp.getActivityCosts(),stateManager),constraintManager);
+        this.breakInsertionCalculator = new BreakInsertionCalculator(vrp.getTransportCosts(), vrp.getActivityCosts(), new LocalActivityInsertionCostsCalculator(vrp.getTransportCosts(), vrp.getActivityCosts(), stateManager), constraintManager);
         this.breakInsertionCalculator.setJobActivityFactory(vrp.getJobActivityFactory());
         eventListeners = new EventListeners();
     }
@@ -62,21 +57,21 @@ public BreakScheduling(VehicleRoutingProblem vrp, StateManager stateManager, Con
     @Override
     public void informJobInserted(Job job2insert, VehicleRoute inRoute, double additionalCosts, double additionalTime) {
         Break aBreak = inRoute.getVehicle().getBreak();
-        if(aBreak != null){
+        if (aBreak != null) {
             boolean removed = inRoute.getTourActivities().removeJob(aBreak);
-            if(removed){
+            if (removed) {
                 logger.trace("ruin: {}", aBreak.getId());
-                stateManager.removed(aBreak,inRoute);
+                stateManager.removed(aBreak, inRoute);
                 stateManager.reCalculateStates(inRoute);
             }
-            if(inRoute.getEnd().getArrTime() > aBreak.getTimeWindow().getEnd()){
+            if (inRoute.getEnd().getArrTime() > aBreak.getTimeWindow().getEnd()) {
                 InsertionData iData = breakInsertionCalculator.getInsertionData(inRoute, aBreak, inRoute.getVehicle(), inRoute.getDepartureTime(), inRoute.getDriver(), Double.MAX_VALUE);
-                if(!(iData instanceof InsertionData.NoInsertionFound)){
+                if (!(iData instanceof InsertionData.NoInsertionFound)) {
                     logger.trace("insert: [jobId={}]{}", aBreak.getId(), iData);
-                    for(Event e : iData.getEvents()){
+                    for (Event e : iData.getEvents()) {
                         eventListeners.inform(e);
                     }
-                    stateManager.informJobInserted(aBreak,inRoute,0,0);
+                    stateManager.informJobInserted(aBreak, inRoute, 0, 0);
                 }
             }
         }
@@ -89,10 +84,10 @@ public void ruinStarts(Collection<VehicleRoute> routes) {
 
     @Override
     public void ruinEnds(Collection<VehicleRoute> routes, Collection<Job> unassignedJobs) {
-        for(VehicleRoute route : routes){
+        for (VehicleRoute route : routes) {
             Break aBreak = route.getVehicle().getBreak();
             boolean removed = route.getTourActivities().removeJob(aBreak);
-            if(removed) logger.trace("ruin: {}", aBreak.getId());
+            if (removed) logger.trace("ruin: {}", aBreak.getId());
         }
         List<Break> breaks = new ArrayList<Break>();
         for (Job j : unassignedJobs) {
@@ -100,27 +95,29 @@ public void ruinEnds(Collection<VehicleRoute> routes, Collection<Job> unassigned
                 breaks.add((Break) j);
             }
         }
-        for(Break b : breaks){ unassignedJobs.remove(b); }
+        for (Break b : breaks) {
+            unassignedJobs.remove(b);
+        }
     }
 
     @Override
     public void removed(Job job, VehicleRoute fromRoute) {
-        if(fromRoute.getVehicle().getBreak() != null) modifiedRoutes.add(fromRoute);
+        if (fromRoute.getVehicle().getBreak() != null) modifiedRoutes.add(fromRoute);
     }
 
     @Override
     public void informInsertionStarts(Collection<VehicleRoute> vehicleRoutes, Collection<Job> unassignedJobs) {
-        for(VehicleRoute route : vehicleRoutes){
+        for (VehicleRoute route : vehicleRoutes) {
             Break aBreak = route.getVehicle().getBreak();
-            if(aBreak != null && !route.getTourActivities().servesJob(aBreak)){
-                if(route.getEnd().getArrTime() > aBreak.getTimeWindow().getEnd()){
+            if (aBreak != null && !route.getTourActivities().servesJob(aBreak)) {
+                if (route.getEnd().getArrTime() > aBreak.getTimeWindow().getEnd()) {
                     InsertionData iData = breakInsertionCalculator.getInsertionData(route, aBreak, route.getVehicle(), route.getDepartureTime(), route.getDriver(), Double.MAX_VALUE);
-                    if(!(iData instanceof InsertionData.NoInsertionFound)){
+                    if (!(iData instanceof InsertionData.NoInsertionFound)) {
                         logger.trace("insert: [jobId={}]{}", aBreak.getId(), iData);
-                        for(Event e : iData.getEvents()){
+                        for (Event e : iData.getEvents()) {
                             eventListeners.inform(e);
                         }
-                        stateManager.informJobInserted(aBreak,route,0,0);
+                        stateManager.informJobInserted(aBreak, route, 0, 0);
                     }
                 }
             }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/CalculatesServiceInsertionWithTimeScheduling.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/CalculatesServiceInsertionWithTimeScheduling.java
index e7808942d..44401a8b7 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/CalculatesServiceInsertionWithTimeScheduling.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/CalculatesServiceInsertionWithTimeScheduling.java
@@ -18,20 +18,19 @@
 
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.List;
-import java.util.Random;
-
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionStartsListener;
 import com.graphhopper.jsprit.core.problem.driver.Driver;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.util.RandomNumberGeneration;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
+import java.util.Random;
 
 @Deprecated
 class CalculatesServiceInsertionWithTimeScheduling implements JobInsertionCostsCalculator {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/CalculatesServiceInsertionWithTimeSchedulingInSlices.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/CalculatesServiceInsertionWithTimeSchedulingInSlices.java
index d54c3494d..05d9c6c31 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/CalculatesServiceInsertionWithTimeSchedulingInSlices.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/CalculatesServiceInsertionWithTimeSchedulingInSlices.java
@@ -17,16 +17,15 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
-import java.util.ArrayList;
-import java.util.List;
-
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import com.graphhopper.jsprit.core.problem.driver.Driver;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.util.ArrayList;
+import java.util.List;
 
 @Deprecated
 class CalculatesServiceInsertionWithTimeSchedulingInSlices implements JobInsertionCostsCalculator {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ConfigureFixCostCalculator.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ConfigureFixCostCalculator.java
index a8832a714..08ff7f188 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ConfigureFixCostCalculator.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ConfigureFixCostCalculator.java
@@ -18,14 +18,14 @@
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
 
-import java.util.Collection;
-
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionStartsListener;
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.JobInsertedListener;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 
+import java.util.Collection;
+
 
 final class ConfigureFixCostCalculator implements InsertionStartsListener, JobInsertedListener {
 
@@ -52,13 +52,13 @@ public String toString() {
     public void informInsertionStarts(Collection<VehicleRoute> routes, Collection<Job> unassignedJobs) {
         this.nuOfJobsToRecreate = unassignedJobs.size();
         double completenessRatio = (1 - ((double) nuOfJobsToRecreate / (double) vrp.getJobs().values().size()));
-        calcConsideringFix.setSolutionCompletenessRatio(Math.max(minRatio,completenessRatio));
+        calcConsideringFix.setSolutionCompletenessRatio(Math.max(minRatio, completenessRatio));
     }
 
     @Override
     public void informJobInserted(Job job2insert, VehicleRoute inRoute, double additionalCosts, double additionalTime) {
         nuOfJobsToRecreate--;
         double completenessRatio = (1 - ((double) nuOfJobsToRecreate / (double) vrp.getJobs().values().size()));
-        calcConsideringFix.setSolutionCompletenessRatio(Math.max(minRatio,completenessRatio));
+        calcConsideringFix.setSolutionCompletenessRatio(Math.max(minRatio, completenessRatio));
     }
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ConfigureLocalActivityInsertionCalculator.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ConfigureLocalActivityInsertionCalculator.java
index 716e0eba8..a140ea35e 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ConfigureLocalActivityInsertionCalculator.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ConfigureLocalActivityInsertionCalculator.java
@@ -18,14 +18,14 @@
 
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
-import java.util.Collection;
-
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionStartsListener;
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.JobInsertedListener;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 
+import java.util.Collection;
+
 /**
  * Created by schroeder on 22/07/15.
  */
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/DefaultScorer.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/DefaultScorer.java
index c48264e90..616e20b04 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/DefaultScorer.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/DefaultScorer.java
@@ -26,7 +26,7 @@
 /**
  * Created by schroeder on 15/10/15.
  */
-public class DefaultScorer implements ScoringFunction  {
+public class DefaultScorer implements ScoringFunction {
 
     private VehicleRoutingProblem vrp;
 
@@ -52,18 +52,18 @@ public void setDepotDistanceParam(double depotDistance_param) {
     public double score(InsertionData best, Job job) {
         Vehicle selectedVehicle = best.getSelectedVehicle();
         double maxFromStart = job.getAllLocations().stream()
-                .mapToDouble(l -> getDistance(selectedVehicle.getStartLocation(), l))
-                .max()
-                .orElse(0d);
+            .mapToDouble(l -> getDistance(selectedVehicle.getStartLocation(), l))
+            .max()
+            .orElse(0d);
         double maxToEnd = job.getAllLocations().stream()
-                .mapToDouble(l -> getDistance(selectedVehicle.getEndLocation(), l))
-                .max()
-                .orElse(0d);
+            .mapToDouble(l -> getDistance(selectedVehicle.getEndLocation(), l))
+            .max()
+            .orElse(0d);
         double maxDepotDistance = Math.max(maxFromStart, maxToEnd);
         double minTimeToOperate = job.getTimeWindows().stream()
-                .mapToDouble(tw -> tw.getEnd() - tw.getStart())
-                .min()
-                .orElse(0d);
+            .mapToDouble(tw -> tw.getEnd() - tw.getStart())
+            .min()
+            .orElse(0d);
         return Math.max(timeWindowParam * minTimeToOperate, minTimeWindowScore) + depotDistanceParam * maxDepotDistance;
     }
 //
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/DellAmicoFixCostCalculator.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/DellAmicoFixCostCalculator.java
index 8b4a86ded..4ed97ed61 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/DellAmicoFixCostCalculator.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/DellAmicoFixCostCalculator.java
@@ -17,8 +17,6 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
-import java.util.Collection;
-
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionStartsListener;
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.JobInsertedListener;
 import com.graphhopper.jsprit.core.problem.constraint.SoftRouteConstraint;
@@ -27,6 +25,8 @@
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.state.RouteAndActivityStateGetter;
 
+import java.util.Collection;
+
 public class DellAmicoFixCostCalculator implements SoftRouteConstraint, InsertionStartsListener, JobInsertedListener {
 
     private int nuOfJobsToRecreate;
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionCalculator.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionCalculator.java
index 2a0118a39..2f918c3d6 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionCalculator.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionCalculator.java
@@ -17,18 +17,7 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.List;
-
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
-import com.graphhopper.jsprit.core.problem.constraint.HardActivityConstraint;
-import com.graphhopper.jsprit.core.problem.constraint.HardRouteConstraint;
-import com.graphhopper.jsprit.core.problem.constraint.SoftActivityConstraint;
-import com.graphhopper.jsprit.core.problem.constraint.SoftRouteConstraint;
+import com.graphhopper.jsprit.core.problem.constraint.*;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingActivityCosts;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.driver.Driver;
@@ -36,12 +25,14 @@
 import com.graphhopper.jsprit.core.problem.misc.ActivityContext;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.End;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.Start;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.*;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
 
 
 final class GeneralJobInsertionCalculator implements JobInsertionCostsCalculator {
@@ -112,13 +103,13 @@ public InsertionData getInsertionData(final VehicleRoute currentRoute, final Job
         newRoute.addAll(currentRoute.getTourActivities().getActivities());
         newRoute.add(end);
 
-        List<InsertionData> bestData = calculateInsertionCosts(insertionContext,1,actList,newRoute,additionalICostsAtRouteLevel, newVehicleDepartureTime);
-        if(bestData.isEmpty()) {
+        List<InsertionData> bestData = calculateInsertionCosts(insertionContext, 1, actList, newRoute, additionalICostsAtRouteLevel, newVehicleDepartureTime);
+        if (bestData.isEmpty()) {
             return InsertionData.createEmptyInsertionData();
-        } else{
+        } else {
             InsertionData best = InsertionData.createEmptyInsertionData();
-            for(InsertionData iD : bestData){
-                if(iD.getInsertionCost() < best.getInsertionCost()) {
+            for (InsertionData iD : bestData) {
+                if (iD.getInsertionCost() < best.getInsertionCost()) {
                     best = iD;
                 }
             }
@@ -129,13 +120,13 @@ public InsertionData getInsertionData(final VehicleRoute currentRoute, final Job
     private List<InsertionData> calculateInsertionCosts(JobInsertionContext insertionContext, int index, List<JobActivity> actList, List<TourActivity> newRoute, double additionalCosts, double departureTime) {
         List<InsertionData> iData = new ArrayList<>();
         double departureTimeAtPrevAct = departureTime;
-        TourActivity prevAct = newRoute.get(index-1);
-        for(int i=index;i<newRoute.size();i++) {
+        TourActivity prevAct = newRoute.get(index - 1);
+        for (int i = index; i < newRoute.size(); i++) {
             JobActivity jobActivity = actList.get(0);
-            if(jobActivity.getTimeWindows().isEmpty()) {
+            if (jobActivity.getTimeWindows().isEmpty()) {
                 throw new IllegalStateException("at least a single time window must be set");
             }
-            for(TimeWindow timeWindow : jobActivity.getTimeWindows()) {
+            for (TimeWindow timeWindow : jobActivity.getTimeWindows()) {
                 JobActivity copiedJobActivity = (JobActivity) jobActivity.duplicate();
                 copiedJobActivity.setTheoreticalEarliestOperationStartTime(timeWindow.getStart());
                 copiedJobActivity.setTheoreticalLatestOperationStartTime(timeWindow.getEnd());
@@ -143,10 +134,9 @@ public InsertionData getInsertionData(final VehicleRoute currentRoute, final Job
                 activityContext.setInsertionIndex(i);
                 insertionContext.setActivityContext(activityContext);
                 HardActivityConstraint.ConstraintsStatus constraintStatus = hardActivityLevelConstraint.fulfilled(insertionContext, prevAct, copiedJobActivity, newRoute.get(i), departureTimeAtPrevAct);
-                if(constraintStatus.equals(HardActivityConstraint.ConstraintsStatus.NOT_FULFILLED)){
+                if (constraintStatus.equals(HardActivityConstraint.ConstraintsStatus.NOT_FULFILLED)) {
                     continue;
-                }
-                else if(constraintStatus.equals(HardActivityConstraint.ConstraintsStatus.NOT_FULFILLED_BREAK)){
+                } else if (constraintStatus.equals(HardActivityConstraint.ConstraintsStatus.NOT_FULFILLED_BREAK)) {
                     return iData;
                 }
                 double miscCosts = softActivityConstraint.getCosts(insertionContext, prevAct, copiedJobActivity, newRoute.get(i), departureTimeAtPrevAct);
@@ -155,37 +145,37 @@ else if(constraintStatus.equals(HardActivityConstraint.ConstraintsStatus.NOT_FUL
                 modifiedRoute.add(i, copiedJobActivity);
                 double totalCosts = additionalCosts + c + miscCosts;
                 if (actList.size() == 1) {
-                    InsertionData iD = new InsertionData(totalCosts,insertionContext.getNewDepTime(),insertionContext.getNewVehicle(),insertionContext.getNewDriver());
-                    iD.getEvents().add(new SwitchVehicle(insertionContext.getRoute(),insertionContext.getNewVehicle(),insertionContext.getNewDepTime()));
-                    iD.getEvents().addAll(getInsertActivityEvents(insertionContext,modifiedRoute));
+                    InsertionData iD = new InsertionData(totalCosts, insertionContext.getNewDepTime(), insertionContext.getNewVehicle(), insertionContext.getNewDriver());
+                    iD.getEvents().add(new SwitchVehicle(insertionContext.getRoute(), insertionContext.getNewVehicle(), insertionContext.getNewDepTime()));
+                    iD.getEvents().addAll(getInsertActivityEvents(insertionContext, modifiedRoute));
                     iData.add(iD);
 
                 } else {
-                    double departureTimeFromJobActivity = getDeparture(prevAct,copiedJobActivity,departureTimeAtPrevAct,insertionContext.getNewDriver(),insertionContext.getNewVehicle());
+                    double departureTimeFromJobActivity = getDeparture(prevAct, copiedJobActivity, departureTimeAtPrevAct, insertionContext.getNewDriver(), insertionContext.getNewVehicle());
                     List<InsertionData> insertions = calculateInsertionCosts(insertionContext, i + 1, actList.subList(1, actList.size()), modifiedRoute, totalCosts, departureTimeFromJobActivity);
                     iData.addAll(insertions);
                 }
             }
-            departureTimeAtPrevAct = getDeparture(prevAct,newRoute.get(i),departureTimeAtPrevAct,insertionContext.getNewDriver(),insertionContext.getNewVehicle());
+            departureTimeAtPrevAct = getDeparture(prevAct, newRoute.get(i), departureTimeAtPrevAct, insertionContext.getNewDriver(), insertionContext.getNewVehicle());
             prevAct = newRoute.get(i);
         }
         return iData;
     }
 
-    private double getDeparture(TourActivity prevAct, TourActivity activity, double departureTimeAtPrevAct,Driver driver, Vehicle vehicle) {
-        double actArrTime = departureTimeAtPrevAct + transportCosts.getTransportTime(prevAct.getLocation(),activity.getLocation(),departureTimeAtPrevAct,driver,vehicle);
-        double actStart = Math.max(actArrTime,activity.getTheoreticalEarliestOperationStartTime());
-        return actStart + activityCosts.getActivityDuration(activity,actArrTime,driver,vehicle);
+    private double getDeparture(TourActivity prevAct, TourActivity activity, double departureTimeAtPrevAct, Driver driver, Vehicle vehicle) {
+        double actArrTime = departureTimeAtPrevAct + transportCosts.getTransportTime(prevAct.getLocation(), activity.getLocation(), departureTimeAtPrevAct, driver, vehicle);
+        double actStart = Math.max(actArrTime, activity.getTheoreticalEarliestOperationStartTime());
+        return actStart + activityCosts.getActivityDuration(activity, actArrTime, driver, vehicle);
     }
 
     private Collection<? extends Event> getInsertActivityEvents(JobInsertionContext insertionContext, List<TourActivity> modifiedRoute) {
         List<InsertActivity> insertActivities = new ArrayList<>();
-        for(int i=insertionContext.getAssociatedActivities().size()-1;i>=0;i--){
+        for (int i = insertionContext.getAssociatedActivities().size() - 1; i >= 0; i--) {
             TourActivity activity = insertionContext.getAssociatedActivities().get(i);
             int activityIndexInModifiedRoute = modifiedRoute.indexOf(activity);
             TourActivity activityInModifiedRoute = modifiedRoute.get(activityIndexInModifiedRoute);
-            insertActivities.add(new InsertActivity(insertionContext.getRoute(),insertionContext.getNewVehicle(),
-                activityInModifiedRoute, activityIndexInModifiedRoute -i-1));
+            insertActivities.add(new InsertActivity(insertionContext.getRoute(), insertionContext.getNewVehicle(),
+                activityInModifiedRoute, activityIndexInModifiedRoute - i - 1));
         }
         return insertActivities;
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/InsertBreakListener.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/InsertBreakListener.java
index 6ae81a8e2..67a38b7c0 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/InsertBreakListener.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/InsertBreakListener.java
@@ -18,11 +18,10 @@
 
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
+import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-
 
 /**
  * Created by schroeder on 19/05/15.
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/InsertionBuilder.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/InsertionBuilder.java
index fbed7073a..cb4b352fa 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/InsertionBuilder.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/InsertionBuilder.java
@@ -17,10 +17,6 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
-import java.util.ArrayList;
-import java.util.List;
-import java.util.concurrent.ExecutorService;
-
 import com.graphhopper.jsprit.core.algorithm.listener.VehicleRoutingAlgorithmListeners;
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionListener;
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
@@ -28,6 +24,10 @@
 import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleFleetManager;
 
+import java.util.ArrayList;
+import java.util.List;
+import java.util.concurrent.ExecutorService;
+
 
 public class InsertionBuilder {
 
@@ -180,23 +180,21 @@ public InsertionStrategy build() {
             }
         } else if (strategy.equals(Strategy.REGRET)) {
             if (executor == null) {
-                if(isFastRegret){
+                if (isFastRegret) {
                     RegretInsertionFast regret = new RegretInsertionFast(costCalculator, vrp, fleetManager);
                     regret.setSwitchAllowed(allowVehicleSwitch);
                     insertion = regret;
-                }
-                else {
+                } else {
                     RegretInsertion regret = new RegretInsertion(costCalculator, vrp);
                     insertion = regret;
                 }
 
             } else {
-                if(isFastRegret){
+                if (isFastRegret) {
                     RegretInsertionConcurrentFast regret = new RegretInsertionConcurrentFast(costCalculator, vrp, executor, fleetManager);
                     regret.setSwitchAllowed(allowVehicleSwitch);
                     insertion = regret;
-                }
-                else{
+                } else {
                     RegretInsertionConcurrent regret = new RegretInsertionConcurrent(costCalculator, vrp, executor);
                     insertion = regret;
                 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/InsertionData.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/InsertionData.java
index d1c9fe0bb..eeb858a8b 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/InsertionData.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/InsertionData.java
@@ -17,14 +17,13 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
+import com.graphhopper.jsprit.core.problem.driver.Driver;
+import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
+
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 
-
-import com.graphhopper.jsprit.core.problem.driver.Driver;
-import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
-
 /**
  * Data object that collects insertion information. It collects insertionCosts, insertionIndeces, vehicle and driver to be employed
  * and departureTime of vehicle at vehicle's start location (e.g. depot).
@@ -77,17 +76,20 @@ public static InsertionData createEmptyInsertionData() {
         return events;
     }
 
-    public List<Event> getUnmodifiableEvents() { return Collections.unmodifiableList(events); }
+    public List<Event> getUnmodifiableEvents() {
+        return Collections.unmodifiableList(events);
+    }
 
-    public <T extends Event> List<T> getUnmodifiableEventsByType(Class<T> eventType){
+    public <T extends Event> List<T> getUnmodifiableEventsByType(Class<T> eventType) {
         List<T> events = new ArrayList<>();
-        for(Event e : this.events){
-            if(e.getClass().equals(eventType)){
+        for (Event e : this.events) {
+            if (e.getClass().equals(eventType)) {
                 events.add(eventType.cast(e));
             }
         }
         return events;
     }
+
     /**
      * @return the additionalTime
      */
@@ -112,7 +114,7 @@ public InsertionData(double insertionCost, int pickupInsertionIndex, int deliver
         this.selectedDriver = driver;
     }
 
-    public InsertionData(double insertionCost, double vehicleDepartureTime, Vehicle selectedVehicle, Driver selectedDriver){
+    public InsertionData(double insertionCost, double vehicleDepartureTime, Vehicle selectedVehicle, Driver selectedDriver) {
         this.insertionCost = insertionCost;
         this.selectedVehicle = selectedVehicle;
         this.selectedDriver = selectedDriver;
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/InsertionDataUpdater.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/InsertionDataUpdater.java
index 72e368399..df0fc6747 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/InsertionDataUpdater.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/InsertionDataUpdater.java
@@ -18,32 +18,25 @@
 
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Comparator;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.TreeSet;
-
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleFleetManager;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 
+import java.util.*;
+
 /**
  * Created by schroeder on 15/10/15.
  */
 class InsertionDataUpdater {
 
     static boolean update(boolean addAllAvailable, Set<String> initialVehicleIds, VehicleFleetManager fleetManager, JobInsertionCostsCalculator insertionCostsCalculator, TreeSet<VersionedInsertionData> insertionDataSet, int updateRound, Job unassignedJob, Collection<VehicleRoute> routes) {
-        for(VehicleRoute route : routes) {
+        for (VehicleRoute route : routes) {
             Collection<Vehicle> relevantVehicles = new ArrayList<Vehicle>();
             if (!(route.getVehicle() instanceof VehicleImpl.NoVehicle)) {
                 relevantVehicles.add(route.getVehicle());
-                if(addAllAvailable && !initialVehicleIds.contains(route.getVehicle().getId())){
+                if (addAllAvailable && !initialVehicleIds.contains(route.getVehicle().getId())) {
                     relevantVehicles.addAll(fleetManager.getAvailableVehicles(route.getVehicle()));
                 }
             } else relevantVehicles.addAll(fleetManager.getAvailableVehicles());
@@ -60,66 +53,63 @@ static boolean update(boolean addAllAvailable, Set<String> initialVehicleIds, Ve
     }
 
 
-
     static VehicleRoute findRoute(Collection<VehicleRoute> routes, Job job) {
-        for(VehicleRoute r : routes){
-            if(r.getVehicle().getBreak() == job) return r;
+        for (VehicleRoute r : routes) {
+            if (r.getVehicle().getBreak() == job) return r;
         }
         return null;
     }
 
-    static Comparator<VersionedInsertionData> getComparator(){
+    static Comparator<VersionedInsertionData> getComparator() {
         return (o1, o2) -> {
-            if(o1.getiData().getInsertionCost() < o2.getiData().getInsertionCost()) return -1;
+            if (o1.getiData().getInsertionCost() < o2.getiData().getInsertionCost()) return -1;
             return 1;
         };
     }
 
     static ScoredJob getBest(boolean switchAllowed, Set<String> initialVehicleIds, VehicleFleetManager fleetManager, JobInsertionCostsCalculator insertionCostsCalculator, ScoringFunction scoringFunction, TreeSet<VersionedInsertionData>[] priorityQueues, Map<VehicleRoute, Integer> updates, List<Job> unassignedJobList, List<Job> badJobs) {
         ScoredJob bestScoredJob = null;
-        for(Job j : unassignedJobList){
+        for (Job j : unassignedJobList) {
             VehicleRoute bestRoute = null;
             InsertionData best = null;
             InsertionData secondBest = null;
             TreeSet<VersionedInsertionData> priorityQueue = priorityQueues[j.getIndex()];
             Iterator<VersionedInsertionData> iterator = priorityQueue.iterator();
-            while(iterator.hasNext()){
+            while (iterator.hasNext()) {
                 VersionedInsertionData versionedIData = iterator.next();
-                if(bestRoute != null){
-                    if(versionedIData.getRoute() == bestRoute){
+                if (bestRoute != null) {
+                    if (versionedIData.getRoute() == bestRoute) {
                         continue;
                     }
                 }
-                if(versionedIData.getiData() instanceof InsertionData.NoInsertionFound) continue;
-                if(!(versionedIData.getRoute().getVehicle() instanceof VehicleImpl.NoVehicle)) {
+                if (versionedIData.getiData() instanceof InsertionData.NoInsertionFound) continue;
+                if (!(versionedIData.getRoute().getVehicle() instanceof VehicleImpl.NoVehicle)) {
                     if (versionedIData.getiData().getSelectedVehicle() != versionedIData.getRoute().getVehicle()) {
                         if (!switchAllowed) continue;
                         if (initialVehicleIds.contains(versionedIData.getRoute().getVehicle().getId())) continue;
                     }
                 }
-                if(versionedIData.getiData().getSelectedVehicle() != versionedIData.getRoute().getVehicle()) {
+                if (versionedIData.getiData().getSelectedVehicle() != versionedIData.getRoute().getVehicle()) {
                     if (fleetManager.isLocked(versionedIData.getiData().getSelectedVehicle())) {
                         Vehicle available = fleetManager.getAvailableVehicle(versionedIData.getiData().getSelectedVehicle().getVehicleTypeIdentifier());
                         if (available != null) {
                             InsertionData oldData = versionedIData.getiData();
-                            InsertionData newData = new InsertionData(oldData.getInsertionCost(),oldData.getVehicleDepartureTime(),available, oldData.getSelectedDriver());
-                            for(Event e : oldData.getEvents()){
-                                if(e instanceof SwitchVehicle){
-                                    newData.getEvents().add(new SwitchVehicle(versionedIData.getRoute(),available,oldData.getVehicleDepartureTime()));
-                                }
-                                else newData.getEvents().add(e);
+                            InsertionData newData = new InsertionData(oldData.getInsertionCost(), oldData.getVehicleDepartureTime(), available, oldData.getSelectedDriver());
+                            for (Event e : oldData.getEvents()) {
+                                if (e instanceof SwitchVehicle) {
+                                    newData.getEvents().add(new SwitchVehicle(versionedIData.getRoute(), available, oldData.getVehicleDepartureTime()));
+                                } else newData.getEvents().add(e);
                             }
                             versionedIData = new VersionedInsertionData(newData, versionedIData.getVersion(), versionedIData.getRoute());
                         } else continue;
                     }
                 }
                 int currentDataVersion = updates.get(versionedIData.getRoute());
-                if(versionedIData.getVersion() == currentDataVersion){
-                    if(best == null) {
+                if (versionedIData.getVersion() == currentDataVersion) {
+                    if (best == null) {
                         best = versionedIData.getiData();
                         bestRoute = versionedIData.getRoute();
-                    }
-                    else {
+                    } else {
                         secondBest = versionedIData.getiData();
                         break;
                     }
@@ -127,7 +117,7 @@ static ScoredJob getBest(boolean switchAllowed, Set<String> initialVehicleIds, V
             }
             VehicleRoute emptyRoute = VehicleRoute.emptyRoute();
             InsertionData iData = insertionCostsCalculator.getInsertionData(emptyRoute, j, null, -1, null, Double.MAX_VALUE);
-            if(!(iData instanceof InsertionData.NoInsertionFound)){
+            if (!(iData instanceof InsertionData.NoInsertionFound)) {
                 if (best == null) {
                     best = iData;
                     bestRoute = emptyRoute;
@@ -149,10 +139,9 @@ static ScoredJob getBest(boolean switchAllowed, Set<String> initialVehicleIds, V
                 scoredJob = new ScoredJob(j, score, best, bestRoute, true);
             } else scoredJob = new ScoredJob(j, score, best, bestRoute, false);
 
-            if(bestScoredJob == null){
+            if (bestScoredJob == null) {
                 bestScoredJob = scoredJob;
-            }
-            else if(scoredJob.getScore() > bestScoredJob.getScore()){
+            } else if (scoredJob.getScore() > bestScoredJob.getScore()) {
                 bestScoredJob = scoredJob;
             }
         }
@@ -160,7 +149,7 @@ else if(scoredJob.getScore() > bestScoredJob.getScore()){
     }
 
     static double score(Job unassignedJob, InsertionData best, InsertionData secondBest, ScoringFunction scoringFunction) {
-        return Scorer.score(unassignedJob,best,secondBest,scoringFunction);
+        return Scorer.score(unassignedJob, best, secondBest, scoringFunction);
     }
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/InsertionStrategy.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/InsertionStrategy.java
index 281c4178e..a478a69fe 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/InsertionStrategy.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/InsertionStrategy.java
@@ -17,12 +17,12 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
-import java.util.Collection;
-
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionListener;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 
+import java.util.Collection;
+
 
 /**
  * Basic interface for insertion strategies
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/JobCalculatorSwitcher.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/JobCalculatorSwitcher.java
index c7c7f12a2..7ac22de4e 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/JobCalculatorSwitcher.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/JobCalculatorSwitcher.java
@@ -17,14 +17,14 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
-import java.util.HashMap;
-import java.util.Map;
-
 import com.graphhopper.jsprit.core.problem.driver.Driver;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 
+import java.util.HashMap;
+import java.util.Map;
+
 
 class JobCalculatorSwitcher implements JobInsertionCostsCalculator {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/JobInsertionConsideringFixCostsCalculator.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/JobInsertionConsideringFixCostsCalculator.java
index fc1d52ad4..32dcdbaf4 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/JobInsertionConsideringFixCostsCalculator.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/JobInsertionConsideringFixCostsCalculator.java
@@ -17,9 +17,6 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import com.graphhopper.jsprit.core.algorithm.state.InternalStates;
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.constraint.SoftRouteConstraint;
@@ -30,6 +27,8 @@
 import com.graphhopper.jsprit.core.problem.solution.route.state.RouteAndActivityStateGetter;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 
 final class JobInsertionConsideringFixCostsCalculator implements JobInsertionCostsCalculator, SoftRouteConstraint {
@@ -69,8 +68,8 @@ public InsertionData getInsertionData(final VehicleRoute currentRoute, final Job
 
     private double getFixCostContribution(final VehicleRoute currentRoute, final Job jobToInsert, final Vehicle newVehicle) {
         Capacity currentMaxLoadInRoute = getCurrentMaxLoadInRoute(currentRoute);
-        double relFixCost = getDeltaRelativeFixCost(currentRoute, newVehicle, jobToInsert,currentMaxLoadInRoute);
-        double absFixCost = getDeltaAbsoluteFixCost(currentRoute, newVehicle, jobToInsert,currentMaxLoadInRoute);
+        double relFixCost = getDeltaRelativeFixCost(currentRoute, newVehicle, jobToInsert, currentMaxLoadInRoute);
+        double absFixCost = getDeltaAbsoluteFixCost(currentRoute, newVehicle, jobToInsert, currentMaxLoadInRoute);
         double deltaFixCost = (1 - solution_completeness_ratio) * relFixCost + solution_completeness_ratio * absFixCost;
         double fixcost_contribution = weight_deltaFixCost * solution_completeness_ratio * deltaFixCost;
         return fixcost_contribution;
@@ -90,7 +89,9 @@ public void setSolutionCompletenessRatio(double ratio) {
         solution_completeness_ratio = ratio;
     }
 
-    public double getSolutionCompletenessRatio() { return solution_completeness_ratio; }
+    public double getSolutionCompletenessRatio() {
+        return solution_completeness_ratio;
+    }
 
     private double getDeltaAbsoluteFixCost(VehicleRoute route, Vehicle newVehicle, Job job, Capacity currentMaxLoadInRoute) {
         Capacity load = currentMaxLoadInRoute.add(job.getSize());
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/JobInsertionCostsCalculatorBuilder.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/JobInsertionCostsCalculatorBuilder.java
index 2565a4189..e310a39a2 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/JobInsertionCostsCalculatorBuilder.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/JobInsertionCostsCalculatorBuilder.java
@@ -17,27 +17,20 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
-import java.util.ArrayList;
-import java.util.List;
-
 import com.graphhopper.jsprit.core.algorithm.listener.VehicleRoutingAlgorithmListeners.PrioritizedVRAListener;
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionListener;
-import com.graphhopper.jsprit.core.problem.CopyJobActivityFactory;
 import com.graphhopper.jsprit.core.problem.JobActivityFactory;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
 import com.graphhopper.jsprit.core.problem.job.Break;
-import com.graphhopper.jsprit.core.problem.job.Delivery;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Pickup;
-import com.graphhopper.jsprit.core.problem.job.Service;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
-import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.state.RouteAndActivityStateGetter;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleFleetManager;
 
+import java.util.ArrayList;
+import java.util.List;
+
 
 public class JobInsertionCostsCalculatorBuilder {
 
@@ -250,8 +243,8 @@ private void checkServicesOnly() {
         for (Job j : vrp.getJobs().values()) {
             if (j instanceof Shipment) {
                 throw new UnsupportedOperationException("currently the 'insert-on-route-level' option is only available for services (i.e. service, pickup, delivery), \n" +
-                        "if you want to deal with shipments switch to option 'local-level' by either setting bestInsertionBuilder.setLocalLevel() or \n"
-                        + "by omitting the xml-tag '<level forwardLooking=2 memory=1>route</level>' when defining your insertionStrategy in algo-config.xml file");
+                    "if you want to deal with shipments switch to option 'local-level' by either setting bestInsertionBuilder.setLocalLevel() or \n"
+                    + "by omitting the xml-tag '<level forwardLooking=2 memory=1>route</level>' when defining your insertionStrategy in algo-config.xml file");
             }
         }
 
@@ -292,7 +285,7 @@ private CalculatorPlusListeners createStandardLocal(final VehicleRoutingProblem
 //        ServiceInsertionCalculator serviceInsertion = new ServiceInsertionCalculator(vrp.getTransportCosts(), vrp.getActivityCosts(), actInsertionCalc, constraintManager);
 //        serviceInsertion.setJobActivityFactory(activityFactory);
 
-        GeneralJobInsertionCalculator generalJobInsertionCalculator = new GeneralJobInsertionCalculator(vrp.getTransportCosts(), vrp.getActivityCosts(),actInsertionCalc, constraintManager);
+        GeneralJobInsertionCalculator generalJobInsertionCalculator = new GeneralJobInsertionCalculator(vrp.getTransportCosts(), vrp.getActivityCosts(), actInsertionCalc, constraintManager);
 
         BreakInsertionCalculator breakInsertionCalculator = new BreakInsertionCalculator(vrp.getTransportCosts(), vrp.getActivityCosts(), actInsertionCalc, constraintManager);
         breakInsertionCalculator.setJobActivityFactory(activityFactory);
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/JobInsertionCostsCalculatorLightFactory.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/JobInsertionCostsCalculatorLightFactory.java
index 127ba0f4f..a5a40fbce 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/JobInsertionCostsCalculatorLightFactory.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/JobInsertionCostsCalculatorLightFactory.java
@@ -18,9 +18,6 @@
 
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
-import java.util.ArrayList;
-import java.util.List;
-
 import com.graphhopper.jsprit.core.algorithm.listener.VehicleRoutingAlgorithmListeners;
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionListener;
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
@@ -30,6 +27,9 @@
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleFleetManager;
 
+import java.util.ArrayList;
+import java.util.List;
+
 /**
  * Created by schroeder on 11.12.14.
  */
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/LocalActivityInsertionCostsCalculator.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/LocalActivityInsertionCostsCalculator.java
index cdd7dac25..795f1f3cb 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/LocalActivityInsertionCostsCalculator.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/LocalActivityInsertionCostsCalculator.java
@@ -65,7 +65,8 @@ public double getCosts(JobInsertionContext iFacts, TourActivity prevAct, TourAct
 
         double act_costs_newAct = activityCosts.getActivityCost(newAct, newAct_arrTime, iFacts.getNewDriver(), iFacts.getNewVehicle());
 
-        if (isEnd(nextAct) && !toDepot(iFacts.getNewVehicle())) return tp_costs_prevAct_newAct + solutionCompletenessRatio * activityCostsWeight * act_costs_newAct;
+        if (isEnd(nextAct) && !toDepot(iFacts.getNewVehicle()))
+            return tp_costs_prevAct_newAct + solutionCompletenessRatio * activityCostsWeight * act_costs_newAct;
 
         double tp_costs_newAct_nextAct = routingCosts.getTransportCost(newAct.getLocation(), nextAct.getLocation(), newAct_endTime, iFacts.getNewDriver(), iFacts.getNewVehicle());
         double tp_time_newAct_nextAct = routingCosts.getTransportTime(newAct.getLocation(), nextAct.getLocation(), newAct_endTime, iFacts.getNewDriver(), iFacts.getNewVehicle());
@@ -82,7 +83,7 @@ public double getCosts(JobInsertionContext iFacts, TourActivity prevAct, TourAct
         } else {
             double tp_costs_prevAct_nextAct = routingCosts.getTransportCost(prevAct.getLocation(), nextAct.getLocation(), prevAct.getEndTime(), iFacts.getRoute().getDriver(), iFacts.getRoute().getVehicle());
             double arrTime_nextAct = depTimeAtPrevAct + routingCosts.getTransportTime(prevAct.getLocation(), nextAct.getLocation(), prevAct.getEndTime(), iFacts.getRoute().getDriver(), iFacts.getRoute().getVehicle());
-            double endTime_nextAct_old = Math.max(arrTime_nextAct, nextAct.getTheoreticalEarliestOperationStartTime()) + activityCosts.getActivityDuration(nextAct, arrTime_nextAct, iFacts.getRoute().getDriver(),iFacts.getRoute().getVehicle());
+            double endTime_nextAct_old = Math.max(arrTime_nextAct, nextAct.getTheoreticalEarliestOperationStartTime()) + activityCosts.getActivityDuration(nextAct, arrTime_nextAct, iFacts.getRoute().getDriver(), iFacts.getRoute().getVehicle());
             double actCost_nextAct = activityCosts.getActivityCost(nextAct, arrTime_nextAct, iFacts.getRoute().getDriver(), iFacts.getRoute().getVehicle());
 
             double endTimeDelay_nextAct = Math.max(0, endTime_nextAct_new - endTime_nextAct_old);
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertion.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertion.java
index 88b7dee1a..a770c47c7 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertion.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertion.java
@@ -18,18 +18,17 @@
 
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Iterator;
-import java.util.List;
-
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Break;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Iterator;
+import java.util.List;
 
 /**
  * Insertion based on regret approach.
@@ -44,7 +43,6 @@
 public class RegretInsertion extends AbstractInsertionStrategy {
 
 
-
     private static Logger logger = LoggerFactory.getLogger(RegretInsertionFast.class);
 
     private ScoringFunction scoringFunction;
@@ -87,14 +85,13 @@ public String toString() {
         List<Job> badJobs = new ArrayList<Job>(unassignedJobs.size());
 
         Iterator<Job> jobIterator = unassignedJobs.iterator();
-        while (jobIterator.hasNext()){
+        while (jobIterator.hasNext()) {
             Job job = jobIterator.next();
-            if(job instanceof Break){
-                VehicleRoute route = findRoute(routes,job);
-                if(route == null){
+            if (job instanceof Break) {
+                VehicleRoute route = findRoute(routes, job);
+                if (route == null) {
                     badJobs.add(job);
-                }
-                else {
+                } else {
                     InsertionData iData = insertionCostsCalculator.getInsertionData(route, job, NO_NEW_VEHICLE_YET, NO_NEW_DEPARTURE_TIME_YET, NO_NEW_DRIVER_YET, Double.MAX_VALUE);
                     if (iData instanceof InsertionData.NoInsertionFound) {
                         badJobs.add(job);
@@ -127,8 +124,8 @@ public String toString() {
     }
 
     private VehicleRoute findRoute(Collection<VehicleRoute> routes, Job job) {
-        for(VehicleRoute r : routes){
-            if(r.getVehicle().getBreak() == job) return r;
+        for (VehicleRoute r : routes) {
+            if (r.getVehicle().getBreak() == job) return r;
         }
         return null;
     }
@@ -206,7 +203,7 @@ static ScoredJob getScoredJob(Collection<VehicleRoute> routes, Job unassignedJob
 
 
     static double score(Job unassignedJob, InsertionData best, InsertionData secondBest, ScoringFunction scoringFunction) {
-        return Scorer.score(unassignedJob,best,secondBest,scoringFunction);
+        return Scorer.score(unassignedJob, best, secondBest, scoringFunction);
     }
 
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionConcurrent.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionConcurrent.java
index e7ebcbe4e..d2d55ac2b 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionConcurrent.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionConcurrent.java
@@ -18,23 +18,18 @@
 
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Iterator;
-import java.util.List;
-import java.util.concurrent.Callable;
-import java.util.concurrent.ExecutionException;
-import java.util.concurrent.ExecutorCompletionService;
-import java.util.concurrent.ExecutorService;
-import java.util.concurrent.Future;
-
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Break;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Iterator;
+import java.util.List;
+import java.util.concurrent.*;
 
 /**
  * Insertion based on regret approach.
@@ -95,14 +90,13 @@ public String toString() {
         List<Job> badJobs = new ArrayList<Job>(unassignedJobs.size());
 
         Iterator<Job> jobIterator = unassignedJobs.iterator();
-        while (jobIterator.hasNext()){
+        while (jobIterator.hasNext()) {
             Job job = jobIterator.next();
-            if(job instanceof Break){
-                VehicleRoute route = findRoute(routes,job);
-                if(route == null){
+            if (job instanceof Break) {
+                VehicleRoute route = findRoute(routes, job);
+                if (route == null) {
                     badJobs.add(job);
-                }
-                else {
+                } else {
                     InsertionData iData = insertionCostsCalculator.getInsertionData(route, job, NO_NEW_VEHICLE_YET, NO_NEW_DEPARTURE_TIME_YET, NO_NEW_DRIVER_YET, Double.MAX_VALUE);
                     if (iData instanceof InsertionData.NoInsertionFound) {
                         badJobs.add(job);
@@ -176,8 +170,8 @@ public ScoredJob call() throws Exception {
     }
 
     private VehicleRoute findRoute(Collection<VehicleRoute> routes, Job job) {
-        for(VehicleRoute r : routes){
-            if(r.getVehicle().getBreak() == job) return r;
+        for (VehicleRoute r : routes) {
+            if (r.getVehicle().getBreak() == job) return r;
         }
         return null;
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionConcurrentFast.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionConcurrentFast.java
index cfe73e779..9f166871e 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionConcurrentFast.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionConcurrentFast.java
@@ -18,28 +18,18 @@
 
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.TreeSet;
-import java.util.concurrent.Callable;
-import java.util.concurrent.ExecutorService;
-
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.constraint.DependencyType;
 import com.graphhopper.jsprit.core.problem.job.Break;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleFleetManager;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.util.*;
+import java.util.concurrent.Callable;
+import java.util.concurrent.ExecutorService;
 
 /**
  * Insertion based on regret approach.
@@ -104,13 +94,13 @@ public void setSwitchAllowed(boolean switchAllowed) {
 
     private Set<String> getInitialVehicleIds(VehicleRoutingProblem vehicleRoutingProblem) {
         Set<String> ids = new HashSet<String>();
-        for(VehicleRoute r : vehicleRoutingProblem.getInitialVehicleRoutes()){
+        for (VehicleRoute r : vehicleRoutingProblem.getInitialVehicleRoutes()) {
             ids.add(r.getVehicle().getId());
         }
         return ids;
     }
 
-    public void setDependencyTypes(DependencyType[] dependencyTypes){
+    public void setDependencyTypes(DependencyType[] dependencyTypes) {
         this.dependencyTypes = dependencyTypes;
     }
 
@@ -127,14 +117,13 @@ public void setDependencyTypes(DependencyType[] dependencyTypes){
         List<Job> badJobs = new ArrayList<Job>(unassignedJobs.size());
 
         Iterator<Job> jobIterator = unassignedJobs.iterator();
-        while (jobIterator.hasNext()){
+        while (jobIterator.hasNext()) {
             Job job = jobIterator.next();
-            if(job instanceof Break){
+            if (job instanceof Break) {
                 VehicleRoute route = InsertionDataUpdater.findRoute(routes, job);
-                if(route == null){
+                if (route == null) {
                     badJobs.add(job);
-                }
-                else {
+                } else {
                     InsertionData iData = insertionCostsCalculator.getInsertionData(route, job, NO_NEW_VEHICLE_YET, NO_NEW_DEPARTURE_TIME_YET, NO_NEW_DRIVER_YET, Double.MAX_VALUE);
                     if (iData instanceof InsertionData.NoInsertionFound) {
                         badJobs.add(job);
@@ -151,15 +140,15 @@ public void setDependencyTypes(DependencyType[] dependencyTypes){
         VehicleRoute lastModified = null;
         boolean firstRun = true;
         int updateRound = 0;
-        Map<VehicleRoute,Integer> updates = new HashMap<VehicleRoute, Integer>();
+        Map<VehicleRoute, Integer> updates = new HashMap<VehicleRoute, Integer>();
         while (!jobs.isEmpty()) {
             List<Job> unassignedJobList = new ArrayList<Job>(jobs);
             List<Job> badJobList = new ArrayList<Job>();
-            if(!firstRun && lastModified == null) throw new IllegalStateException("ho. this must not be.");
-            updateInsertionData(priorityQueues, routes, unassignedJobList, updateRound,firstRun,lastModified,updates);
-            if(firstRun) firstRun = false;
+            if (!firstRun && lastModified == null) throw new IllegalStateException("ho. this must not be.");
+            updateInsertionData(priorityQueues, routes, unassignedJobList, updateRound, firstRun, lastModified, updates);
+            if (firstRun) firstRun = false;
             updateRound++;
-            ScoredJob bestScoredJob = InsertionDataUpdater.getBest(switchAllowed,initialVehicleIds,fleetManager, insertionCostsCalculator, scoringFunction, priorityQueues, updates, unassignedJobList, badJobList);
+            ScoredJob bestScoredJob = InsertionDataUpdater.getBest(switchAllowed, initialVehicleIds, fleetManager, insertionCostsCalculator, scoringFunction, priorityQueues, updates, unassignedJobList, badJobList);
             if (bestScoredJob != null) {
                 if (bestScoredJob.isNewRoute()) {
                     routes.add(bestScoredJob.getRoute());
@@ -167,8 +156,7 @@ public void setDependencyTypes(DependencyType[] dependencyTypes){
                 insertJob(bestScoredJob.getJob(), bestScoredJob.getInsertionData(), bestScoredJob.getRoute());
                 jobs.remove(bestScoredJob.getJob());
                 lastModified = bestScoredJob.getRoute();
-            }
-            else lastModified = null;
+            } else lastModified = null;
             for (Job bad : badJobList) {
                 jobs.remove(bad);
                 badJobs.add(bad);
@@ -181,18 +169,16 @@ private void updateInsertionData(final TreeSet<VersionedInsertionData>[] priorit
         List<Callable<Boolean>> tasks = new ArrayList<Callable<Boolean>>();
         boolean updatedAllRoutes = false;
         for (final Job unassignedJob : unassignedJobList) {
-            if(priorityQueues[unassignedJob.getIndex()] == null){
+            if (priorityQueues[unassignedJob.getIndex()] == null) {
                 priorityQueues[unassignedJob.getIndex()] = new TreeSet<VersionedInsertionData>(InsertionDataUpdater.getComparator());
             }
-            if(firstRun) {
+            if (firstRun) {
                 updatedAllRoutes = true;
                 makeCallables(tasks, updatedAllRoutes, priorityQueues[unassignedJob.getIndex()], updateRound, unassignedJob, routes, lastModified);
-            }
-            else{
-                if(dependencyTypes == null || dependencyTypes[unassignedJob.getIndex()] == null){
+            } else {
+                if (dependencyTypes == null || dependencyTypes[unassignedJob.getIndex()] == null) {
                     makeCallables(tasks, updatedAllRoutes, priorityQueues[unassignedJob.getIndex()], updateRound, unassignedJob, routes, lastModified);
-                }
-                else {
+                } else {
                     DependencyType dependencyType = dependencyTypes[unassignedJob.getIndex()];
                     if (dependencyType.equals(DependencyType.INTER_ROUTE) || dependencyType.equals(DependencyType.INTRA_ROUTE)) {
                         updatedAllRoutes = true;
@@ -203,11 +189,10 @@ private void updateInsertionData(final TreeSet<VersionedInsertionData>[] priorit
                 }
             }
         }
-        if(updatedAllRoutes){
-            for(VehicleRoute r : routes) updates.put(r,updateRound);
-        }
-        else{
-            updates.put(lastModified,updateRound);
+        if (updatedAllRoutes) {
+            for (VehicleRoute r : routes) updates.put(r, updateRound);
+        } else {
+            updates.put(lastModified, updateRound);
         }
         try {
             executor.invokeAll(tasks);
@@ -218,15 +203,14 @@ private void updateInsertionData(final TreeSet<VersionedInsertionData>[] priorit
     }
 
     private void makeCallables(List<Callable<Boolean>> tasks, boolean updateAll, final TreeSet<VersionedInsertionData> priorityQueue, final int updateRound, final Job unassignedJob, final Collection<VehicleRoute> routes, final VehicleRoute lastModified) {
-        if(updateAll) {
+        if (updateAll) {
             tasks.add(new Callable<Boolean>() {
                 @Override
                 public Boolean call() throws Exception {
                     return InsertionDataUpdater.update(switchAllowed, initialVehicleIds, fleetManager, insertionCostsCalculator, priorityQueue, updateRound, unassignedJob, routes);
                 }
             });
-        }
-        else {
+        } else {
             tasks.add(new Callable<Boolean>() {
                 @Override
                 public Boolean call() throws Exception {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionFast.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionFast.java
index f982bb334..de4b65a53 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionFast.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionFast.java
@@ -18,24 +18,15 @@
 
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.TreeSet;
-
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.constraint.DependencyType;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleFleetManager;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.util.*;
 
 /**
  * Insertion based on regret approach.
@@ -88,13 +79,13 @@ public void setSwitchAllowed(boolean switchAllowed) {
         this.switchAllowed = switchAllowed;
     }
 
-    public void setDependencyTypes(DependencyType[] dependencyTypes){
+    public void setDependencyTypes(DependencyType[] dependencyTypes) {
         this.dependencyTypes = dependencyTypes;
     }
 
     private Set<String> getInitialVehicleIds(VehicleRoutingProblem vehicleRoutingProblem) {
         Set<String> ids = new HashSet<String>();
-        for(VehicleRoute r : vehicleRoutingProblem.getInitialVehicleRoutes()){
+        for (VehicleRoute r : vehicleRoutingProblem.getInitialVehicleRoutes()) {
             ids.add(r.getVehicle().getId());
         }
         return ids;
@@ -140,22 +131,22 @@ public String toString() {
         VehicleRoute lastModified = null;
         boolean firstRun = true;
         int updateRound = 0;
-        Map<VehicleRoute,Integer> updates = new HashMap<VehicleRoute, Integer>();
+        Map<VehicleRoute, Integer> updates = new HashMap<VehicleRoute, Integer>();
         while (!jobs.isEmpty()) {
             List<Job> unassignedJobList = new ArrayList<Job>(jobs);
             List<Job> badJobList = new ArrayList<Job>();
-            if(!firstRun && lastModified == null) throw new IllegalStateException("last modified route is null. this should not be.");
-            if(firstRun){
+            if (!firstRun && lastModified == null)
+                throw new IllegalStateException("last modified route is null. this should not be.");
+            if (firstRun) {
                 updateInsertionData(priorityQueues, routes, unassignedJobList, updateRound, firstRun, lastModified, updates);
                 firstRun = false;
-            }
-            else{
+            } else {
                 //update for all routes || remove history and only update modified route
                 updateInsertionData(priorityQueues, routes, unassignedJobList, updateRound, firstRun, lastModified, updates);
 //                updates.put(lastModified,updateRound);
             }
             updateRound++;
-            ScoredJob bestScoredJob = InsertionDataUpdater.getBest(switchAllowed,initialVehicleIds,fleetManager,insertionCostsCalculator,scoringFunction,priorityQueues,updates,unassignedJobList,badJobList);
+            ScoredJob bestScoredJob = InsertionDataUpdater.getBest(switchAllowed, initialVehicleIds, fleetManager, insertionCostsCalculator, scoringFunction, priorityQueues, updates, unassignedJobList, badJobList);
             if (bestScoredJob != null) {
                 if (bestScoredJob.isNewRoute()) {
                     routes.add(bestScoredJob.getRoute());
@@ -163,8 +154,7 @@ public String toString() {
                 insertJob(bestScoredJob.getJob(), bestScoredJob.getInsertionData(), bestScoredJob.getRoute());
                 jobs.remove(bestScoredJob.getJob());
                 lastModified = bestScoredJob.getRoute();
-            }
-            else lastModified = null;
+            } else lastModified = null;
             for (Job bad : badJobList) {
                 jobs.remove(bad);
                 badJobs.add(bad);
@@ -175,26 +165,24 @@ public String toString() {
 
     private void updateInsertionData(TreeSet<VersionedInsertionData>[] priorityQueues, Collection<VehicleRoute> routes, List<Job> unassignedJobList, int updateRound, boolean firstRun, VehicleRoute lastModified, Map<VehicleRoute, Integer> updates) {
         for (Job unassignedJob : unassignedJobList) {
-            if(priorityQueues[unassignedJob.getIndex()] == null){
+            if (priorityQueues[unassignedJob.getIndex()] == null) {
                 priorityQueues[unassignedJob.getIndex()] = new TreeSet<VersionedInsertionData>(InsertionDataUpdater.getComparator());
             }
-            if(firstRun) {
+            if (firstRun) {
                 InsertionDataUpdater.update(switchAllowed, initialVehicleIds, fleetManager, insertionCostsCalculator, priorityQueues[unassignedJob.getIndex()], updateRound, unassignedJob, routes);
-                for(VehicleRoute r : routes) updates.put(r,updateRound);
-            }
-            else{
-                if(dependencyTypes == null || dependencyTypes[unassignedJob.getIndex()] == null){
+                for (VehicleRoute r : routes) updates.put(r, updateRound);
+            } else {
+                if (dependencyTypes == null || dependencyTypes[unassignedJob.getIndex()] == null) {
                     InsertionDataUpdater.update(switchAllowed, initialVehicleIds, fleetManager, insertionCostsCalculator, priorityQueues[unassignedJob.getIndex()], updateRound, unassignedJob, Arrays.asList(lastModified));
-                    updates.put(lastModified,updateRound);
-                }
-                else {
+                    updates.put(lastModified, updateRound);
+                } else {
                     DependencyType dependencyType = dependencyTypes[unassignedJob.getIndex()];
                     if (dependencyType.equals(DependencyType.INTER_ROUTE) || dependencyType.equals(DependencyType.INTRA_ROUTE)) {
                         InsertionDataUpdater.update(switchAllowed, initialVehicleIds, fleetManager, insertionCostsCalculator, priorityQueues[unassignedJob.getIndex()], updateRound, unassignedJob, routes);
-                        for(VehicleRoute r : routes) updates.put(r,updateRound);
+                        for (VehicleRoute r : routes) updates.put(r, updateRound);
                     } else {
                         InsertionDataUpdater.update(switchAllowed, initialVehicleIds, fleetManager, insertionCostsCalculator, priorityQueues[unassignedJob.getIndex()], updateRound, unassignedJob, Arrays.asList(lastModified));
-                        updates.put(lastModified,updateRound);
+                        updates.put(lastModified, updateRound);
                     }
                 }
             }
@@ -202,5 +190,4 @@ private void updateInsertionData(TreeSet<VersionedInsertionData>[] priorityQueue
     }
 
 
-
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/Scorer.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/Scorer.java
index 6aabb134c..62580554e 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/Scorer.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/Scorer.java
@@ -25,7 +25,7 @@
  */
 class Scorer {
 
-    static double score(Job unassignedJob, InsertionData best, InsertionData secondBest, ScoringFunction scoringFunction){
+    static double score(Job unassignedJob, InsertionData best, InsertionData secondBest, ScoringFunction scoringFunction) {
         if (best == null) {
             throw new IllegalStateException("cannot insert job " + unassignedJob.getId());
         }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ServiceInsertionCalculator.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ServiceInsertionCalculator.java
index 7e8c015f4..54fee780a 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ServiceInsertionCalculator.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ServiceInsertionCalculator.java
@@ -17,18 +17,9 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
-import java.util.Iterator;
-
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import com.graphhopper.jsprit.core.problem.JobActivityFactory;
-import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
-import com.graphhopper.jsprit.core.problem.constraint.HardActivityConstraint;
+import com.graphhopper.jsprit.core.problem.constraint.*;
 import com.graphhopper.jsprit.core.problem.constraint.HardActivityConstraint.ConstraintsStatus;
-import com.graphhopper.jsprit.core.problem.constraint.HardRouteConstraint;
-import com.graphhopper.jsprit.core.problem.constraint.SoftActivityConstraint;
-import com.graphhopper.jsprit.core.problem.constraint.SoftRouteConstraint;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingActivityCosts;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.driver.Driver;
@@ -42,6 +33,10 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.util.Iterator;
 
 /**
  * Calculator that calculates the best insertion position for a {@link Service}.
@@ -119,7 +114,7 @@ public InsertionData getInsertionData(final VehicleRoute currentRoute, final Job
 
         double bestCost = bestKnownCosts;
         additionalICostsAtRouteLevel += additionalAccessEgressCalculator.getCosts(insertionContext);
-		TimeWindow bestTimeWindow = null;
+        TimeWindow bestTimeWindow = null;
 
         /*
         generate new start and end for new vehicle
@@ -133,15 +128,15 @@ public InsertionData getInsertionData(final VehicleRoute currentRoute, final Job
         int actIndex = 0;
         Iterator<TourActivity> activityIterator = currentRoute.getActivities().iterator();
         boolean tourEnd = false;
-        while(!tourEnd){
+        while (!tourEnd) {
             TourActivity nextAct;
-            if(activityIterator.hasNext()) nextAct = activityIterator.next();
-            else{
+            if (activityIterator.hasNext()) nextAct = activityIterator.next();
+            else {
                 nextAct = end;
                 tourEnd = true;
             }
             boolean not_fulfilled_break = true;
-			for(TimeWindow timeWindow : service.getTimeWindows()) {
+            for (TimeWindow timeWindow : service.getTimeWindows()) {
                 deliveryAct2Insert.setTheoreticalEarliestOperationStartTime(timeWindow.getStart());
                 deliveryAct2Insert.setTheoreticalLatestOperationStartTime(timeWindow.getEnd());
                 ActivityContext activityContext = new ActivityContext();
@@ -160,21 +155,21 @@ public InsertionData getInsertionData(final VehicleRoute currentRoute, final Job
                 } else if (status.equals(ConstraintsStatus.NOT_FULFILLED)) {
                     not_fulfilled_break = false;
                 }
-			}
-            if(not_fulfilled_break) break;
+            }
+            if (not_fulfilled_break) break;
             double nextActArrTime = prevActStartTime + transportCosts.getTransportTime(prevAct.getLocation(), nextAct.getLocation(), prevActStartTime, newDriver, newVehicle);
-            prevActStartTime = Math.max(nextActArrTime, nextAct.getTheoreticalEarliestOperationStartTime()) + activityCosts.getActivityDuration(nextAct,nextActArrTime,newDriver,newVehicle);
+            prevActStartTime = Math.max(nextActArrTime, nextAct.getTheoreticalEarliestOperationStartTime()) + activityCosts.getActivityDuration(nextAct, nextActArrTime, newDriver, newVehicle);
             prevAct = nextAct;
             actIndex++;
         }
-        if(insertionIndex == InsertionData.NO_INDEX) {
+        if (insertionIndex == InsertionData.NO_INDEX) {
             return InsertionData.createEmptyInsertionData();
         }
         InsertionData insertionData = new InsertionData(bestCost, newVehicleDepartureTime, newVehicle, newDriver);
         deliveryAct2Insert.setTheoreticalEarliestOperationStartTime(bestTimeWindow.getStart());
         deliveryAct2Insert.setTheoreticalLatestOperationStartTime(bestTimeWindow.getEnd());
         insertionData.getEvents().add(new InsertActivity(currentRoute, newVehicle, deliveryAct2Insert, insertionIndex));
-        insertionData.getEvents().add(new SwitchVehicle(currentRoute,newVehicle,newVehicleDepartureTime));
+        insertionData.getEvents().add(new SwitchVehicle(currentRoute, newVehicle, newVehicleDepartureTime));
         return insertionData;
     }
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ShipmentInsertionCalculator.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ShipmentInsertionCalculator.java
index e30db03aa..a3cd313f1 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ShipmentInsertionCalculator.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ShipmentInsertionCalculator.java
@@ -17,18 +17,9 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
-import java.util.List;
-
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import com.graphhopper.jsprit.core.problem.JobActivityFactory;
-import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
-import com.graphhopper.jsprit.core.problem.constraint.HardActivityConstraint;
+import com.graphhopper.jsprit.core.problem.constraint.*;
 import com.graphhopper.jsprit.core.problem.constraint.HardActivityConstraint.ConstraintsStatus;
-import com.graphhopper.jsprit.core.problem.constraint.HardRouteConstraint;
-import com.graphhopper.jsprit.core.problem.constraint.SoftActivityConstraint;
-import com.graphhopper.jsprit.core.problem.constraint.SoftRouteConstraint;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingActivityCosts;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.driver.Driver;
@@ -42,6 +33,10 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.util.List;
 
 
 final class ShipmentInsertionCalculator implements JobInsertionCostsCalculator {
@@ -151,7 +146,7 @@ public InsertionData getInsertionData(final VehicleRoute currentRoute, final Job
             }
 
             boolean pickupInsertionNotFulfilledBreak = true;
-            for(TimeWindow pickupTimeWindow : shipment.getPickupTimeWindows()) {
+            for (TimeWindow pickupTimeWindow : shipment.getPickupTimeWindows()) {
                 pickupShipment.setTheoreticalEarliestOperationStartTime(pickupTimeWindow.getStart());
                 pickupShipment.setTheoreticalLatestOperationStartTime(pickupTimeWindow.getEnd());
                 ActivityContext activityContext = new ActivityContext();
@@ -161,10 +156,9 @@ public InsertionData getInsertionData(final VehicleRoute currentRoute, final Job
                 if (pickupShipmentConstraintStatus.equals(ConstraintsStatus.NOT_FULFILLED)) {
                     pickupInsertionNotFulfilledBreak = false;
                     continue;
-                } else if(pickupShipmentConstraintStatus.equals(ConstraintsStatus.NOT_FULFILLED_BREAK)) {
+                } else if (pickupShipmentConstraintStatus.equals(ConstraintsStatus.NOT_FULFILLED_BREAK)) {
                     continue;
-                }
-                else if (pickupShipmentConstraintStatus.equals(ConstraintsStatus.FULFILLED)) {
+                } else if (pickupShipmentConstraintStatus.equals(ConstraintsStatus.FULFILLED)) {
                     pickupInsertionNotFulfilledBreak = false;
                 }
                 double additionalPickupICosts = softActivityConstraint.getCosts(insertionContext, prevAct, pickupShipment, nextAct, prevActEndTime);
@@ -208,7 +202,7 @@ else if (pickupShipmentConstraintStatus.equals(ConstraintsStatus.FULFILLED)) {
                             double additionalDeliveryICosts = softActivityConstraint.getCosts(insertionContext, prevAct_deliveryLoop, deliverShipment, nextAct_deliveryLoop, prevActEndTime_deliveryLoop);
                             double deliveryAIC = calculate(insertionContext, prevAct_deliveryLoop, deliverShipment, nextAct_deliveryLoop, prevActEndTime_deliveryLoop);
                             double totalActivityInsertionCosts = pickupAIC + deliveryAIC
-                                            + additionalICostsAtRouteLevel + additionalPickupICosts + additionalDeliveryICosts;
+                                + additionalICostsAtRouteLevel + additionalPickupICosts + additionalDeliveryICosts;
                             if (totalActivityInsertionCosts < bestCost) {
                                 bestCost = totalActivityInsertionCosts;
                                 pickupInsertionIndex = i;
@@ -226,17 +220,17 @@ else if (pickupShipmentConstraintStatus.equals(ConstraintsStatus.FULFILLED)) {
                     }
                     //update prevAct and endTime
                     double nextActArrTime = prevActEndTime_deliveryLoop + transportCosts.getTransportTime(prevAct_deliveryLoop.getLocation(), nextAct_deliveryLoop.getLocation(), prevActEndTime_deliveryLoop, newDriver, newVehicle);
-                    prevActEndTime_deliveryLoop = Math.max(nextActArrTime, nextAct_deliveryLoop.getTheoreticalEarliestOperationStartTime()) + activityCosts.getActivityDuration(nextAct_deliveryLoop,nextActArrTime,newDriver,newVehicle);
+                    prevActEndTime_deliveryLoop = Math.max(nextActArrTime, nextAct_deliveryLoop.getTheoreticalEarliestOperationStartTime()) + activityCosts.getActivityDuration(nextAct_deliveryLoop, nextActArrTime, newDriver, newVehicle);
                     prevAct_deliveryLoop = nextAct_deliveryLoop;
                     j++;
                 }
             }
-            if(pickupInsertionNotFulfilledBreak){
+            if (pickupInsertionNotFulfilledBreak) {
                 break;
             }
             //update prevAct and endTime
             double nextActArrTime = prevActEndTime + transportCosts.getTransportTime(prevAct.getLocation(), nextAct.getLocation(), prevActEndTime, newDriver, newVehicle);
-            prevActEndTime = Math.max(nextActArrTime, nextAct.getTheoreticalEarliestOperationStartTime()) + activityCosts.getActivityDuration(nextAct,nextActArrTime,newDriver,newVehicle);
+            prevActEndTime = Math.max(nextActArrTime, nextAct.getTheoreticalEarliestOperationStartTime()) + activityCosts.getActivityDuration(nextAct, nextActArrTime, newDriver, newVehicle);
             prevAct = nextAct;
             i++;
         }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/SwitchVehicleListener.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/SwitchVehicleListener.java
index 7a3aa032d..037d65f0a 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/SwitchVehicleListener.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/SwitchVehicleListener.java
@@ -18,11 +18,10 @@
 
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
+import com.graphhopper.jsprit.core.problem.job.Break;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.graphhopper.jsprit.core.problem.job.Break;
-
 
 /**
  * Created by schroeder on 19/05/15.
@@ -36,11 +35,11 @@ public void inform(Event event) {
         if (event instanceof SwitchVehicle) {
             SwitchVehicle switchVehicle = (SwitchVehicle) event;
             if (vehiclesDifferent((SwitchVehicle) event)) {
-                logger.trace("switch vehicle ({} to {})",((SwitchVehicle) event).getRoute().getVehicle().getId(),((SwitchVehicle) event).getVehicle().getId());
+                logger.trace("switch vehicle ({} to {})", ((SwitchVehicle) event).getRoute().getVehicle().getId(), ((SwitchVehicle) event).getVehicle().getId());
                 Break aBreak = ((SwitchVehicle) event).getRoute().getVehicle().getBreak();
                 if (aBreak != null) {
                     boolean removed = ((SwitchVehicle) event).getRoute().getTourActivities().removeJob(aBreak);
-                    if (removed) logger.trace("remove {}",aBreak.getId());
+                    if (removed) logger.trace("remove {}", aBreak.getId());
                 }
             }
             switchVehicle.getRoute().setVehicleAndDepartureTime(switchVehicle.getVehicle(), ((SwitchVehicle) event).getDepartureTime());
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/VariableTransportCostCalculator.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/VariableTransportCostCalculator.java
index 8e1fcb647..814da7217 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/VariableTransportCostCalculator.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/VariableTransportCostCalculator.java
@@ -42,7 +42,7 @@ public double getCosts(JobInsertionContext iFacts, TourActivity prevAct, TourAct
         double tp_time_prevAct_newAct = routingCosts.getTransportTime(prevAct.getLocation(), newAct.getLocation(), depTimeAtPrevAct, iFacts.getNewDriver(), iFacts.getNewVehicle());
 
         double newAct_arrTime = depTimeAtPrevAct + tp_time_prevAct_newAct;
-        double newAct_endTime = Math.max(newAct_arrTime, newAct.getTheoreticalEarliestOperationStartTime()) + activityCosts.getActivityDuration(newAct,newAct_arrTime,iFacts.getNewDriver(),iFacts.getNewVehicle());
+        double newAct_endTime = Math.max(newAct_arrTime, newAct.getTheoreticalEarliestOperationStartTime()) + activityCosts.getActivityDuration(newAct, newAct_arrTime, iFacts.getNewDriver(), iFacts.getNewVehicle());
 
         //open routes
         if (nextAct instanceof End) {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/VehicleTypeDependentJobInsertionCalculator.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/VehicleTypeDependentJobInsertionCalculator.java
index 7b6e400ac..0f83e39ce 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/VehicleTypeDependentJobInsertionCalculator.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/VehicleTypeDependentJobInsertionCalculator.java
@@ -17,14 +17,6 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.HashSet;
-import java.util.Set;
-
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.driver.Driver;
 import com.graphhopper.jsprit.core.problem.job.Job;
@@ -32,6 +24,13 @@
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleFleetManager;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashSet;
+import java.util.Set;
 
 
 final class VehicleTypeDependentJobInsertionCalculator implements JobInsertionCostsCalculator {
@@ -94,7 +93,7 @@ public void setVehicleSwitchAllowed(boolean vehicleSwitchAllowed) {
     }
 
     public InsertionData getInsertionData(final VehicleRoute currentRoute, final Job jobToInsert, final Vehicle vehicle, double newVehicleDepartureTime, final Driver driver, final double bestKnownCost) {
-        if(vehicle != null){
+        if (vehicle != null) {
             return insertionCalculator.getInsertionData(currentRoute, jobToInsert, vehicle, newVehicleDepartureTime, driver, bestKnownCost);
         }
         Vehicle selectedVehicle = currentRoute.getVehicle();
@@ -126,7 +125,7 @@ public InsertionData getInsertionData(final VehicleRoute currentRoute, final Job
         return bestIData;
     }
 
-    VehicleFleetManager getFleetManager(){
+    VehicleFleetManager getFleetManager() {
         return fleetManager;
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/listener/InsertionEndsListener.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/listener/InsertionEndsListener.java
index f09a065d6..c9cde4d64 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/listener/InsertionEndsListener.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/listener/InsertionEndsListener.java
@@ -17,10 +17,10 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate.listener;
 
-import java.util.Collection;
-
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 
+import java.util.Collection;
+
 
 public interface InsertionEndsListener extends InsertionListener {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/listener/InsertionListeners.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/listener/InsertionListeners.java
index 8b48b87b5..37ccd7bbf 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/listener/InsertionListeners.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/listener/InsertionListeners.java
@@ -17,14 +17,14 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate.listener;
 
-import java.util.ArrayList;
-import java.util.Collection;
-
 import com.graphhopper.jsprit.core.algorithm.recreate.InsertionData;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 
+import java.util.ArrayList;
+import java.util.Collection;
+
 
 public class InsertionListeners {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/listener/InsertionStartsListener.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/listener/InsertionStartsListener.java
index c35712ab7..e3e1c3f5b 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/listener/InsertionStartsListener.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/listener/InsertionStartsListener.java
@@ -17,11 +17,11 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate.listener;
 
-import java.util.Collection;
-
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 
+import java.util.Collection;
+
 
 public interface InsertionStartsListener extends InsertionListener {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/AbstractRuinStrategy.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/AbstractRuinStrategy.java
index c1a93da48..37552b35f 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/AbstractRuinStrategy.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/AbstractRuinStrategy.java
@@ -19,18 +19,17 @@
 package com.graphhopper.jsprit.core.algorithm.ruin;
 
 
-import java.util.Collection;
-import java.util.Random;
-
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import com.graphhopper.jsprit.core.algorithm.ruin.listener.RuinListener;
 import com.graphhopper.jsprit.core.algorithm.ruin.listener.RuinListeners;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.util.RandomNumberGeneration;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.util.Collection;
+import java.util.Random;
 
 public abstract class AbstractRuinStrategy implements RuinStrategy {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/ClusterRuinStrategyFactory.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/ClusterRuinStrategyFactory.java
index 2fb3d3852..57fb4dd06 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/ClusterRuinStrategyFactory.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/ClusterRuinStrategyFactory.java
@@ -2,7 +2,7 @@
 
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 
-public class ClusterRuinStrategyFactory implements RuinStrategyFactory  {
+public class ClusterRuinStrategyFactory implements RuinStrategyFactory {
 
     private int initialNumberJobsToRemove;
     private JobNeighborhoods jobNeighborhoods;
@@ -17,4 +17,4 @@ public ClusterRuinStrategyFactory(int initialNumberJobsToRemove, JobNeighborhood
     public RuinStrategy createStrategy(VehicleRoutingProblem vrp) {
         return new RuinClusters(vrp, initialNumberJobsToRemove, jobNeighborhoods);
     }
-}
\ No newline at end of file
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/DBSCANClusterer.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/DBSCANClusterer.java
index eca56936f..928f450f5 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/DBSCANClusterer.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/DBSCANClusterer.java
@@ -18,17 +18,6 @@
 
 package com.graphhopper.jsprit.core.algorithm.ruin;
 
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Random;
-
-import org.apache.commons.math3.ml.clustering.Cluster;
-import org.apache.commons.math3.ml.clustering.Clusterable;
-import org.apache.commons.math3.ml.distance.DistanceMeasure;
-
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.job.Job;
@@ -37,6 +26,11 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.util.RandomNumberGeneration;
 import com.graphhopper.jsprit.core.util.RandomUtils;
+import org.apache.commons.math3.ml.clustering.Cluster;
+import org.apache.commons.math3.ml.clustering.Clusterable;
+import org.apache.commons.math3.ml.distance.DistanceMeasure;
+
+import java.util.*;
 
 /**
  * Created by schroeder on 04/02/15.
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoods.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoods.java
index c42a9efea..7fe65f065 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoods.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoods.java
@@ -18,10 +18,10 @@
 
 package com.graphhopper.jsprit.core.algorithm.ruin;
 
-import java.util.Iterator;
-
 import com.graphhopper.jsprit.core.problem.job.Job;
 
+import java.util.Iterator;
+
 /**
  * Created by schroeder on 07/01/15.
  */
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsImpl.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsImpl.java
index aeef8ba4a..bcb20e948 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsImpl.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsImpl.java
@@ -18,19 +18,14 @@
 
 package com.graphhopper.jsprit.core.algorithm.ruin;
 
-import java.util.Comparator;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.Map;
-import java.util.TreeSet;
-
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import com.graphhopper.jsprit.core.algorithm.ruin.distance.JobDistance;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.util.StopWatch;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.util.*;
 
 /**
  * Created by schroeder on 07/01/15.
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsImplWithCapRestriction.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsImplWithCapRestriction.java
index 533e0b0fe..b32372156 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsImplWithCapRestriction.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsImplWithCapRestriction.java
@@ -18,19 +18,14 @@
 
 package com.graphhopper.jsprit.core.algorithm.ruin;
 
-import java.util.Comparator;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.Map;
-import java.util.TreeSet;
-
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import com.graphhopper.jsprit.core.algorithm.ruin.distance.JobDistance;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.util.StopWatch;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.util.*;
 
 /**
  * Created by schroeder on 07/01/15.
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsOptimized.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsOptimized.java
index 9f78e4ba2..9d2b28270 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsOptimized.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsOptimized.java
@@ -18,19 +18,14 @@
 
 package com.graphhopper.jsprit.core.algorithm.ruin;
 
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Comparator;
-import java.util.Iterator;
-import java.util.List;
-
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import com.graphhopper.jsprit.core.algorithm.ruin.distance.JobDistance;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.util.StopWatch;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.util.*;
 
 /**
  * Created by schroeder on 07/01/15.
@@ -55,7 +50,7 @@ public ArrayIterator(int noItems, int[] itemArray, Job[] jobs) {
 
         @Override
         public boolean hasNext() {
-            if(index < noItems && index < itemArray.length) {
+            if (index < noItems && index < itemArray.length) {
                 return true;
             }
             return false;
@@ -93,15 +88,15 @@ public JobNeighborhoodsOptimized(VehicleRoutingProblem vrp, JobDistance jobDista
         this.vrp = vrp;
         this.jobDistance = jobDistance;
         this.capacity = capacity;
-        neighbors = new int[vrp.getJobsInclusiveInitialJobsInRoutes().size()+1][capacity];
-        jobs = new Job[vrp.getJobsInclusiveInitialJobsInRoutes().size()+1];
+        neighbors = new int[vrp.getJobsInclusiveInitialJobsInRoutes().size() + 1][capacity];
+        jobs = new Job[vrp.getJobsInclusiveInitialJobsInRoutes().size() + 1];
         logger.debug("initialize {}", this);
     }
 
     @Override
     public Iterator<Job> getNearestNeighborsIterator(int nNeighbors, Job neighborTo) {
-        int[] neighbors = this.neighbors[neighborTo.getIndex()-1];
-        return new ArrayIterator(nNeighbors,neighbors,jobs);
+        int[] neighbors = this.neighbors[neighborTo.getIndex() - 1];
+        return new ArrayIterator(nNeighbors, neighbors, jobs);
     }
 
     @Override
@@ -130,27 +125,26 @@ private void calculateDistancesFromJob2Job() {
                 ReferencedJob referencedJob = new ReferencedJob(job_j, distance);
                 jobList.add(referencedJob);
             }
-            Collections.sort(jobList,getComparator());
+            Collections.sort(jobList, getComparator());
             int[] jobIndices = new int[capacity];
-            for(int index=0;index<capacity;index++){
+            for (int index = 0; index < capacity; index++) {
                 jobIndices[index] = jobList.get(index).getJob().getIndex();
             }
-            neighbors[job_i.getIndex()-1] = jobIndices;
+            neighbors[job_i.getIndex() - 1] = jobIndices;
         }
         stopWatch.stop();
         logger.debug("pre-processing comp-time: {}", stopWatch);
     }
 
-    private Comparator<ReferencedJob> getComparator(){
+    private Comparator<ReferencedJob> getComparator() {
         return new Comparator<ReferencedJob>() {
             @Override
             public int compare(ReferencedJob o1, ReferencedJob o2) {
                 if (o1.getDistance() < o2.getDistance()) {
                     return -1;
-                } else if (o1.getDistance() > o2.getDistance()){
+                } else if (o1.getDistance() > o2.getDistance()) {
                     return 1;
-                }
-                else return 0;
+                } else return 0;
             }
         };
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/NearestNeighborhoodIterator.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/NearestNeighborhoodIterator.java
index 31becb8c9..3bb966a6b 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/NearestNeighborhoodIterator.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/NearestNeighborhoodIterator.java
@@ -18,12 +18,11 @@
 
 package com.graphhopper.jsprit.core.algorithm.ruin;
 
-import java.util.Iterator;
-
+import com.graphhopper.jsprit.core.problem.job.Job;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.graphhopper.jsprit.core.problem.job.Job;
+import java.util.Iterator;
 
 /**
  * Created by schroeder on 07/01/15.
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinBreaks.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinBreaks.java
index 73678b6be..ec2fc36ba 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinBreaks.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinBreaks.java
@@ -18,15 +18,14 @@
 
 package com.graphhopper.jsprit.core.algorithm.ruin;
 
-import java.util.Collection;
-
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import com.graphhopper.jsprit.core.algorithm.ruin.listener.RuinListener;
 import com.graphhopper.jsprit.core.problem.job.Break;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.util.Collection;
 
 /**
  * Created by schroeder on 04/08/15.
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinClusters.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinClusters.java
index cb4e9011a..5da19e231 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinClusters.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinClusters.java
@@ -17,19 +17,6 @@
  */
 package com.graphhopper.jsprit.core.algorithm.ruin;
 
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-
-import org.apache.commons.math3.ml.clustering.Clusterable;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import com.graphhopper.jsprit.core.algorithm.listener.IterationStartsListener;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
@@ -38,6 +25,11 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.AbstractActivityNEW;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.util.RandomUtils;
+import org.apache.commons.math3.ml.clustering.Clusterable;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.util.*;
 
 
 /**
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinRadial.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinRadial.java
index 96983007e..65760943f 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinRadial.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinRadial.java
@@ -17,20 +17,15 @@
  */
 package com.graphhopper.jsprit.core.algorithm.ruin;
 
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.Iterator;
-import java.util.List;
-
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import com.graphhopper.jsprit.core.algorithm.ruin.distance.JobDistance;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.util.RandomUtils;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.util.*;
 
 
 /**
@@ -134,7 +129,6 @@ public String toString() {
 
     /**
      * Removes targetJob and its neighborhood and returns the removed jobs.
-     *
      */
     private Collection<Job> ruinRoutes(Collection<VehicleRoute> vehicleRoutes, Job targetJob, int nOfJobs2BeRemoved) {
         List<Job> unassignedJobs = new ArrayList<Job>();
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinRadialMultipleCenters.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinRadialMultipleCenters.java
index ecd8fcc01..17fc53f28 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinRadialMultipleCenters.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinRadialMultipleCenters.java
@@ -17,21 +17,14 @@
  */
 package com.graphhopper.jsprit.core.algorithm.ruin;
 
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Set;
-
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import com.graphhopper.jsprit.core.algorithm.ruin.distance.JobDistance;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.util.*;
 
 
 /**
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinRandom.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinRandom.java
index 9f752628c..74a083745 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinRandom.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinRandom.java
@@ -17,18 +17,17 @@
  */
 package com.graphhopper.jsprit.core.algorithm.ruin;
 
+import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
+import com.graphhopper.jsprit.core.problem.job.Job;
+import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.List;
 
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-
 
 /**
  * Ruin strategy that ruins current solution randomly. I.e.
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinStrategy.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinStrategy.java
index 23b538e94..d79f9ea7c 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinStrategy.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinStrategy.java
@@ -17,12 +17,12 @@
  */
 package com.graphhopper.jsprit.core.algorithm.ruin;
 
-import java.util.Collection;
-
 import com.graphhopper.jsprit.core.algorithm.ruin.listener.RuinListener;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 
+import java.util.Collection;
+
 
 /**
  * @author stefan schroeder
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinWorst.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinWorst.java
index 8a1af2e6e..a3c5d9282 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinWorst.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinWorst.java
@@ -17,16 +17,6 @@
  */
 package com.graphhopper.jsprit.core.algorithm.ruin;
 
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.LinkedList;
-import java.util.List;
-import java.util.Map;
-
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.driver.DriverImpl;
 import com.graphhopper.jsprit.core.problem.job.Job;
@@ -35,6 +25,10 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.util.NoiseMaker;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.util.*;
 
 
 /**
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/AvgServiceDistance.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/AvgServiceDistance.java
index 16edc0529..382709fe1 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/AvgServiceDistance.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/AvgServiceDistance.java
@@ -63,7 +63,7 @@ public double getDistance(Job i, Job j) {
             }
         } else {
             throw new UnsupportedOperationException(
-                    "currently, this class just works services.");
+                "currently, this class just works services.");
         }
         return avgCost;
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/CoordinateJobDistance.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/CoordinateJobDistance.java
index 27ed94e11..3e87d0611 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/CoordinateJobDistance.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/CoordinateJobDistance.java
@@ -17,13 +17,13 @@
  */
 package com.graphhopper.jsprit.core.algorithm.ruin.distance;
 
-import java.util.List;
-
 import com.graphhopper.jsprit.core.distance.EuclideanDistanceCalculator;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.job.Job;
 
+import java.util.List;
+
 
 /**
  * Calculator that calculates average distance between two jobs based on the input-transport costs.
@@ -64,12 +64,10 @@ public double getDistance(Job i, Job j) {
     /**
      * Calculates the average distance of the two set of positions.
      *
-     * @param leftLocations
-     *            The position list of one side.
-     * @param rightLocations
-     *            The position list of the other side.
+     * @param leftLocations  The position list of one side.
+     * @param rightLocations The position list of the other side.
      * @return The Average distance. (Returns 0 when any of the sides contains
-     *         no distances.)
+     * no distances.)
      */
     protected double calcDist(List<Location> leftLocations, List<Location> rightLocations) {
         if (leftLocations.isEmpty() || rightLocations.isEmpty()) {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/EuclideanServiceDistance.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/EuclideanServiceDistance.java
index 6f5d24446..5f6b4f185 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/EuclideanServiceDistance.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/EuclideanServiceDistance.java
@@ -44,7 +44,7 @@ public double getDistance(Job i, Job j) {
             }
         } else {
             throw new UnsupportedOperationException(
-                            "currently, this class just works with shipments and services.");
+                "currently, this class just works with shipments and services.");
         }
         return avgCost;
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/listener/RuinListener.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/listener/RuinListener.java
index 4c7a7752e..674c979ad 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/listener/RuinListener.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/listener/RuinListener.java
@@ -17,12 +17,12 @@
  */
 package com.graphhopper.jsprit.core.algorithm.ruin.listener;
 
-import java.util.Collection;
-
 import com.graphhopper.jsprit.core.algorithm.listener.SearchStrategyModuleListener;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 
+import java.util.Collection;
+
 
 /**
  * Listener that listens to the ruin-process. It informs whoever is interested about start, end and about a removal of a job.
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/listener/RuinListeners.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/listener/RuinListeners.java
index 240290c7c..7eebb7c04 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/listener/RuinListeners.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/listener/RuinListeners.java
@@ -18,13 +18,13 @@
 
 package com.graphhopper.jsprit.core.algorithm.ruin.listener;
 
+import com.graphhopper.jsprit.core.problem.job.Job;
+import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
 
-import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-
 
 public class RuinListeners {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/selector/SelectBest.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/selector/SelectBest.java
index 27fc8506c..2b3de7160 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/selector/SelectBest.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/selector/SelectBest.java
@@ -17,10 +17,10 @@
  */
 package com.graphhopper.jsprit.core.algorithm.selector;
 
-import java.util.Collection;
-
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 
+import java.util.Collection;
+
 
 public class SelectBest implements SolutionSelector {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/selector/SelectRandomly.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/selector/SelectRandomly.java
index f6ae740b1..67c462ceb 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/selector/SelectRandomly.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/selector/SelectRandomly.java
@@ -17,14 +17,14 @@
  */
 package com.graphhopper.jsprit.core.algorithm.selector;
 
+import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
+import com.graphhopper.jsprit.core.util.RandomNumberGeneration;
+
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
 import java.util.Random;
 
-import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
-import com.graphhopper.jsprit.core.util.RandomNumberGeneration;
-
 
 public class SelectRandomly implements SolutionSelector {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/selector/SolutionSelector.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/selector/SolutionSelector.java
index 4a757d651..6156644fb 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/selector/SolutionSelector.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/selector/SolutionSelector.java
@@ -17,10 +17,10 @@
  */
 package com.graphhopper.jsprit.core.algorithm.selector;
 
-import java.util.Collection;
-
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 
+import java.util.Collection;
+
 
 public interface SolutionSelector {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/StateManager.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/StateManager.java
index 270ada56b..4c645dffa 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/StateManager.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/StateManager.java
@@ -17,19 +17,8 @@
  */
 package com.graphhopper.jsprit.core.algorithm.state;
 
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.Map;
-
 import com.graphhopper.jsprit.core.algorithm.listener.IterationStartsListener;
-import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionEndsListener;
-import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionListener;
-import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionListeners;
-import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionStartsListener;
-import com.graphhopper.jsprit.core.algorithm.recreate.listener.JobInsertedListener;
+import com.graphhopper.jsprit.core.algorithm.recreate.listener.*;
 import com.graphhopper.jsprit.core.algorithm.ruin.listener.RuinListener;
 import com.graphhopper.jsprit.core.algorithm.ruin.listener.RuinListeners;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
@@ -45,6 +34,8 @@
 import com.graphhopper.jsprit.core.problem.solution.route.state.RouteAndActivityStateGetter;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 
+import java.util.*;
+
 /**
  * Manages states.
  * <p>
@@ -118,9 +109,9 @@ public StateId createStateId(String name) {
         if (stateIndexCounter >= activityStates[0].length) {
             activityStates = new Object[nuActivities][stateIndexCounter + 1];
             vehicleDependentActivityStates = new Object[nuActivities][nuVehicleTypeKeys][stateIndexCounter + 1];
-            routeStatesArr = new Object[vrp.getVehicles().size() + 2][stateIndexCounter+1];
-            vehicleDependentRouteStatesArr = new Object[vrp.getVehicles().size() + 2][nuVehicleTypeKeys][stateIndexCounter+1];
-            problemStates = new Object[stateIndexCounter+1];
+            routeStatesArr = new Object[vrp.getVehicles().size() + 2][stateIndexCounter + 1];
+            vehicleDependentRouteStatesArr = new Object[vrp.getVehicles().size() + 2][nuVehicleTypeKeys][stateIndexCounter + 1];
+            problemStates = new Object[stateIndexCounter + 1];
         }
         StateId id = StateFactory.createId(name, stateIndexCounter);
         incStateIndexCounter();
@@ -152,9 +143,9 @@ public StateManager(VehicleRoutingProblem vehicleRoutingProblem) {
 //            vehicleDependentRouteStatesArr = new Object[vrp.getVehicles().size() + 2][nuVehicleTypeKeys][initialStateArrayLength];
 //        }
 //        else {
-            isIndexedBased = false;
-            routeStateMap = new HashMap<VehicleRoute, Object[]>();
-            vehicleDependentRouteStateMap = new HashMap<VehicleRoute, Object[][]>();
+        isIndexedBased = false;
+        routeStateMap = new HashMap<VehicleRoute, Object[]>();
+        vehicleDependentRouteStateMap = new HashMap<VehicleRoute, Object[][]>();
 //        }
         problemStates = new Object[initialStateArrayLength];
     }
@@ -200,15 +191,14 @@ private int getNuVehicleTypes(VehicleRoutingProblem vrp) {
     public void clear() {
         fill_twoDimArr(activityStates, null);
         fill_threeDimArr(vehicleDependentActivityStates, null);
-        if(isIndexedBased) {
+        if (isIndexedBased) {
             fill_twoDimArr(routeStatesArr, null);
             fill_threeDimArr(vehicleDependentRouteStatesArr, null);
-        }
-        else{
+        } else {
             routeStateMap.clear();
             vehicleDependentRouteStateMap.clear();
         }
-        Arrays.fill(problemStates,null);
+        Arrays.fill(problemStates, null);
     }
 
     private void fill_threeDimArr(Object[][][] states, Object o) {
@@ -312,14 +302,13 @@ private ClassCastException getClassCastException(ClassCastException e, StateId s
     public <T> T getRouteState(VehicleRoute route, StateId stateId, Class<T> type) {
         if (route.isEmpty()) return null;
         T state = null;
-        if(isIndexedBased){
+        if (isIndexedBased) {
             try {
                 state = type.cast(routeStatesArr[route.getVehicle().getIndex()][stateId.getIndex()]);
             } catch (ClassCastException e) {
-                throw getClassCastException(e,stateId,type.toString(),routeStatesArr[route.getVehicle().getIndex()][stateId.getIndex()].getClass().toString());
+                throw getClassCastException(e, stateId, type.toString(), routeStatesArr[route.getVehicle().getIndex()][stateId.getIndex()].getClass().toString());
             }
-        }
-        else {
+        } else {
             try {
                 if (routeStateMap.containsKey(route)) {
                     state = type.cast(routeStateMap.get(route)[stateId.getIndex()]);
@@ -362,14 +351,13 @@ public boolean hasRouteState(VehicleRoute route, Vehicle vehicle, StateId stateI
     public <T> T getRouteState(VehicleRoute route, Vehicle vehicle, StateId stateId, Class<T> type) {
         if (route.isEmpty()) return null;
         T state = null;
-        if(isIndexedBased){
+        if (isIndexedBased) {
             try {
                 state = type.cast(vehicleDependentRouteStatesArr[route.getVehicle().getIndex()][vehicle.getVehicleTypeIdentifier().getIndex()][stateId.getIndex()]);
             } catch (ClassCastException e) {
                 throw getClassCastException(e, stateId, type.toString(), vehicleDependentRouteStatesArr[route.getVehicle().getIndex()][vehicle.getVehicleTypeIdentifier().getIndex()][stateId.getIndex()].getClass().toString());
             }
-        }
-        else {
+        } else {
             try {
                 if (vehicleDependentRouteStateMap.containsKey(route)) {
                     state = type.cast(vehicleDependentRouteStateMap.get(route)[vehicle.getVehicleTypeIdentifier().getIndex()][stateId.getIndex()]);
@@ -468,10 +456,9 @@ public boolean hasRouteState(VehicleRoute route, Vehicle vehicle, StateId stateI
 
     <T> void putTypedInternalRouteState(VehicleRoute route, StateId stateId, T state) {
         if (route.isEmpty()) return;
-        if(isIndexedBased){
+        if (isIndexedBased) {
             routeStatesArr[route.getVehicle().getIndex()][stateId.getIndex()] = state;
-        }
-        else {
+        } else {
             if (!routeStateMap.containsKey(route)) {
                 routeStateMap.put(route, new Object[stateIndexCounter]);
             }
@@ -481,10 +468,9 @@ public boolean hasRouteState(VehicleRoute route, Vehicle vehicle, StateId stateI
 
     <T> void putTypedInternalRouteState(VehicleRoute route, Vehicle vehicle, StateId stateId, T state) {
         if (route.isEmpty()) return;
-        if(isIndexedBased){
+        if (isIndexedBased) {
             vehicleDependentRouteStatesArr[route.getVehicle().getIndex()][vehicle.getVehicleTypeIdentifier().getIndex()][stateId.getIndex()] = state;
-        }
-        else {
+        } else {
             if (!vehicleDependentRouteStateMap.containsKey(route)) {
                 vehicleDependentRouteStateMap.put(route, new Object[nuVehicleTypeKeys][stateIndexCounter]);
             }
@@ -585,8 +571,8 @@ public void informInsertionStarts(Collection<VehicleRoute> vehicleRoutes, Collec
         }
     }
 
-    public void reCalculateStates(VehicleRoute route){
-        informInsertionStarts(Arrays.asList(route),Collections.<Job>emptyList());
+    public void reCalculateStates(VehicleRoute route) {
+        informInsertionStarts(Arrays.asList(route), Collections.<Job>emptyList());
     }
 
     @Override
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateActivityTimes.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateActivityTimes.java
index edf4c8dec..8f041861d 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateActivityTimes.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateActivityTimes.java
@@ -49,7 +49,7 @@
      */
     public UpdateActivityTimes(ForwardTransportTime transportTime, VehicleRoutingActivityCosts activityCosts) {
         super();
-        timeTracker = new ActivityTimeTracker(transportTime,activityCosts );
+        timeTracker = new ActivityTimeTracker(transportTime, activityCosts);
     }
 
     public UpdateActivityTimes(ForwardTransportTime transportTime, ActivityTimeTracker.ActivityPolicy activityPolicy, VehicleRoutingActivityCosts activityCosts) {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateFutureWaitingTimes.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateFutureWaitingTimes.java
index 5c28802d0..48df23677 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateFutureWaitingTimes.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateFutureWaitingTimes.java
@@ -53,9 +53,9 @@ public void begin(VehicleRoute route) {
     @Override
     public void visit(TourActivity activity) {
         states.putInternalTypedActivityState(activity, route.getVehicle(), InternalStates.FUTURE_WAITING, futureWaiting);
-		if(!(activity instanceof BreakActivity)) {
+        if (!(activity instanceof BreakActivity)) {
             futureWaiting += Math.max(activity.getTheoreticalEarliestOperationStartTime() - activity.getArrTime(), 0);
-		}
+        }
     }
 
     @Override
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateLoads.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateLoads.java
index aaa8a56de..7b1c354e2 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateLoads.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateLoads.java
@@ -17,8 +17,6 @@
  */
 package com.graphhopper.jsprit.core.algorithm.state;
 
-import java.util.Collection;
-
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionStartsListener;
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.JobInsertedListener;
 import com.graphhopper.jsprit.core.problem.Capacity;
@@ -30,6 +28,8 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.ActivityVisitor;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 
+import java.util.Collection;
+
 
 /**
  * Updates load at start and end of route as well as at each activity. And update is triggered when either
@@ -111,18 +111,18 @@ public void informJobInserted(Job job2insert, VehicleRoute inRoute, double addit
                 loadAtDepot = defaultValue;
             }
             stateManager.putTypedInternalRouteState(inRoute, InternalStates.LOAD_AT_BEGINNING,
-                            loadAtDepot.add(job2insert.getSize()));
+                loadAtDepot.add(job2insert.getSize()));
         } else if (job2insert instanceof Pickup || job2insert instanceof Service) {
             Capacity loadAtEnd = stateManager.getRouteState(inRoute, InternalStates.LOAD_AT_END, Capacity.class);
             if (loadAtEnd == null) {
                 loadAtEnd = defaultValue;
             }
             stateManager.putTypedInternalRouteState(inRoute, InternalStates.LOAD_AT_END,
-                            loadAtEnd.add(job2insert.getSize()));
+                loadAtEnd.add(job2insert.getSize()));
         }
     }
 
-    public void informRouteChanged(VehicleRoute route){
+    public void informRouteChanged(VehicleRoute route) {
         insertionStarts(route);
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdatePracticalTimeWindows.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdatePracticalTimeWindows.java
index 075eed7ff..aa5f0ecd6 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdatePracticalTimeWindows.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdatePracticalTimeWindows.java
@@ -58,7 +58,7 @@ public void begin(VehicleRoute route) {
 
     @Override
     public void visit(TourActivity activity) {
-        double potentialLatestArrivalTimeAtCurrAct = latestArrTimeAtPrevAct - transportCosts.getBackwardTransportTime(activity.getLocation(), prevAct.getLocation(), latestArrTimeAtPrevAct, route.getDriver(), route.getVehicle()) - activityCosts.getActivityDuration(activity,latestArrTimeAtPrevAct,route.getDriver(),route.getVehicle());
+        double potentialLatestArrivalTimeAtCurrAct = latestArrTimeAtPrevAct - transportCosts.getBackwardTransportTime(activity.getLocation(), prevAct.getLocation(), latestArrTimeAtPrevAct, route.getDriver(), route.getVehicle()) - activityCosts.getActivityDuration(activity, latestArrTimeAtPrevAct, route.getDriver(), route.getVehicle());
         double latestArrivalTime = Math.min(activity.getTheoreticalLatestOperationStartTime(), potentialLatestArrivalTimeAtCurrAct);
 
         states.putInternalTypedActivityState(activity, InternalStates.LATEST_OPERATION_START_TIME, latestArrivalTime);
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateVehicleDependentPracticalTimeWindows.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateVehicleDependentPracticalTimeWindows.java
index c066b1acd..f79cb3496 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateVehicleDependentPracticalTimeWindows.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateVehicleDependentPracticalTimeWindows.java
@@ -18,10 +18,6 @@
 
 package com.graphhopper.jsprit.core.algorithm.state;
 
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Iterator;
-
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingActivityCosts;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
@@ -30,6 +26,10 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Iterator;
+
 public class UpdateVehicleDependentPracticalTimeWindows implements RouteVisitor, StateUpdater {
 
     @Override
@@ -91,7 +91,7 @@ public void begin(VehicleRoute route) {
         for (Vehicle vehicle : vehicles) {
             latest_arrTimes_at_prevAct[vehicle.getVehicleTypeIdentifier().getIndex()] = vehicle.getLatestArrival();
             Location location = vehicle.getEndLocation();
-            if(!vehicle.isReturnToDepot()){
+            if (!vehicle.isReturnToDepot()) {
                 location = route.getEnd().getLocation();
             }
             location_of_prevAct[vehicle.getVehicleTypeIdentifier().getIndex()] = location;
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/VehicleDependentTraveledDistance.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/VehicleDependentTraveledDistance.java
index 5c1a1d887..4fa68ca79 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/VehicleDependentTraveledDistance.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/VehicleDependentTraveledDistance.java
@@ -18,14 +18,6 @@
 
 package com.graphhopper.jsprit.core.algorithm.state;
 
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.cost.TransportDistance;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
@@ -34,6 +26,8 @@
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeKey;
 
+import java.util.*;
+
 /**
  * Created by schroeder on 17/05/16.
  */
@@ -69,7 +63,7 @@ public double getDistance() {
 
     private List<Vehicle> uniqueVehicles;
 
-    private Map<VehicleTypeKey,State> states;
+    private Map<VehicleTypeKey, State> states;
 
     public VehicleDependentTraveledDistance(TransportDistance transportCostMatrices, StateManager stateManager, StateId distanceInRouteId, Collection<Vehicle> vehicles) {
         this.transportDistance = transportCostMatrices;
@@ -81,8 +75,8 @@ public VehicleDependentTraveledDistance(TransportDistance transportCostMatrices,
     private List<Vehicle> getUniqueVehicles(Collection<Vehicle> vehicles) {
         Set<VehicleTypeKey> types = new HashSet<>();
         List<Vehicle> uniqueVehicles = new ArrayList<>();
-        for(Vehicle v : vehicles){
-            if(!types.contains(v.getVehicleTypeIdentifier())){
+        for (Vehicle v : vehicles) {
+            if (!types.contains(v.getVehicleTypeIdentifier())) {
                 types.add(v.getVehicleTypeIdentifier());
                 uniqueVehicles.add(v);
             }
@@ -94,32 +88,32 @@ public VehicleDependentTraveledDistance(TransportDistance transportCostMatrices,
     public void begin(VehicleRoute route) {
         this.route = route;
         states = new HashMap<>();
-        for(Vehicle v : uniqueVehicles){
-            State state = new State(v.getStartLocation(),0);
-            states.put(v.getVehicleTypeIdentifier(),state);
+        for (Vehicle v : uniqueVehicles) {
+            State state = new State(v.getStartLocation(), 0);
+            states.put(v.getVehicleTypeIdentifier(), state);
         }
     }
 
     @Override
     public void visit(TourActivity activity) {
-        for(Vehicle v : uniqueVehicles){
+        for (Vehicle v : uniqueVehicles) {
             State old = states.get(v.getVehicleTypeIdentifier());
             double distance = old.getDistance();
-            distance += transportDistance.getDistance(old.getPrevLocation(),activity.getLocation(),0,v);
-            stateManager.putActivityState(activity,v,traveledDistanceId,distance);
-            states.put(v.getVehicleTypeIdentifier(),new State(activity.getLocation(),distance));
+            distance += transportDistance.getDistance(old.getPrevLocation(), activity.getLocation(), 0, v);
+            stateManager.putActivityState(activity, v, traveledDistanceId, distance);
+            states.put(v.getVehicleTypeIdentifier(), new State(activity.getLocation(), distance));
         }
     }
 
     @Override
     public void finish() {
-        for(Vehicle v : uniqueVehicles){
+        for (Vehicle v : uniqueVehicles) {
             State old = states.get(v.getVehicleTypeIdentifier());
             double distance = old.getDistance();
-            if(v.isReturnToDepot()) {
+            if (v.isReturnToDepot()) {
                 distance += transportDistance.getDistance(old.getPrevLocation(), v.getEndLocation(), 0, v);
             }
-            stateManager.putRouteState(route,v,traveledDistanceId, distance);
+            stateManager.putRouteState(route, v, traveledDistanceId, distance);
         }
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/termination/IterationWithoutImprovementTermination.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/termination/IterationWithoutImprovementTermination.java
index d4534728f..c2ee487d3 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/termination/IterationWithoutImprovementTermination.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/termination/IterationWithoutImprovementTermination.java
@@ -17,11 +17,10 @@
  */
 package com.graphhopper.jsprit.core.algorithm.termination;
 
+import com.graphhopper.jsprit.core.algorithm.SearchStrategy;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.graphhopper.jsprit.core.algorithm.SearchStrategy;
-
 
 /**
  * Terminates algorithm prematurely based on iterations without any improvement (i.e. new solution acceptance).
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/termination/TimeTermination.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/termination/TimeTermination.java
index 993126321..39bfd0085 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/termination/TimeTermination.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/termination/TimeTermination.java
@@ -17,16 +17,15 @@
  */
 package com.graphhopper.jsprit.core.algorithm.termination;
 
-import java.util.Collection;
-
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import com.graphhopper.jsprit.core.algorithm.SearchStrategy;
 import com.graphhopper.jsprit.core.algorithm.VehicleRoutingAlgorithm;
 import com.graphhopper.jsprit.core.algorithm.listener.AlgorithmStartsListener;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.util.Collection;
 
 
 /**
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/termination/VariationCoefficientTermination.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/termination/VariationCoefficientTermination.java
index 89b1c0ff3..5e900b358 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/termination/VariationCoefficientTermination.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/termination/VariationCoefficientTermination.java
@@ -17,13 +17,6 @@
  */
 package com.graphhopper.jsprit.core.algorithm.termination;
 
-import java.util.Collection;
-
-import org.apache.commons.math3.stat.StatUtils;
-import org.apache.commons.math3.stat.descriptive.moment.StandardDeviation;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import com.graphhopper.jsprit.core.algorithm.SearchStrategy;
 import com.graphhopper.jsprit.core.algorithm.VehicleRoutingAlgorithm;
 import com.graphhopper.jsprit.core.algorithm.listener.AlgorithmStartsListener;
@@ -32,6 +25,12 @@
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.util.Solutions;
+import org.apache.commons.math3.stat.StatUtils;
+import org.apache.commons.math3.stat.descriptive.moment.StandardDeviation;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.util.Collection;
 
 
 /**
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyser.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyser.java
index ebf1f5453..7f3195e4d 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyser.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyser.java
@@ -18,20 +18,8 @@
 
 package com.graphhopper.jsprit.core.analysis;
 
-import java.util.HashMap;
-import java.util.Map;
-import java.util.Set;
-
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import com.graphhopper.jsprit.core.algorithm.VariablePlusFixedSolutionCostCalculatorFactory;
-import com.graphhopper.jsprit.core.algorithm.state.InternalStates;
-import com.graphhopper.jsprit.core.algorithm.state.StateId;
-import com.graphhopper.jsprit.core.algorithm.state.StateManager;
-import com.graphhopper.jsprit.core.algorithm.state.StateUpdater;
-import com.graphhopper.jsprit.core.algorithm.state.UpdateActivityTimes;
-import com.graphhopper.jsprit.core.algorithm.state.UpdateVariableCosts;
+import com.graphhopper.jsprit.core.algorithm.state.*;
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.cost.TransportDistance;
@@ -40,19 +28,14 @@
 import com.graphhopper.jsprit.core.problem.solution.SolutionCostCalculator;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.ActivityVisitor;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverServiceDEPRECATED;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverShipmentDEPRECATED;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivityNEW;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.End;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivityNEW;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupServiceDEPRECATED;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupShipmentDEPRECATED;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.ServiceActivityNEW;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.Start;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.*;
 import com.graphhopper.jsprit.core.util.ActivityTimeTracker;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Set;
 
 /**
  * Calculates a set of statistics for a solution.
@@ -72,8 +55,6 @@
     private final static String LOAD_DELIVERED = "load-delivered";
 
 
-
-
     private static class LoadAndActivityCounter implements StateUpdater, ActivityVisitor {
 
         private final StateManager stateManager;
@@ -362,7 +343,7 @@ private double transportTime(TourActivity activity) {
         }
 
         private double distance(TourActivity activity) {
-            return distanceCalculator.getDistance(prevAct.getLocation(), activity.getLocation(),prevActDeparture, route.getVehicle());
+            return distanceCalculator.getDistance(prevAct.getLocation(), activity.getLocation(), prevActDeparture, route.getVehicle());
         }
 
         @Override
@@ -411,7 +392,7 @@ public void visit(TourActivity activity) {
 
         @Override
         public void finish() {
-            double distance = distanceCalculator.getDistance(prevAct.getLocation(), route.getEnd().getLocation(),prevAct.getEndTime(), route.getVehicle());
+            double distance = distanceCalculator.getDistance(prevAct.getLocation(), route.getEnd().getLocation(), prevAct.getEndTime(), route.getVehicle());
             sum_distance += distance;
             stateManager.putRouteState(route, distance_id, sum_distance);
         }
@@ -526,7 +507,6 @@ public void finish() {
      * @param vrp
      * @param solution
      * @param distanceCalculator
-     *
      */
     public SolutionAnalyser(VehicleRoutingProblem vrp, VehicleRoutingProblemSolution solution, TransportDistance distanceCalculator) {
         this.vrp = vrp;
@@ -584,7 +564,7 @@ private void refreshStates() {
 
     private void recalculateSolutionIndicators() {
         for (VehicleRoute route : solution.getRoutes()) {
-            maxOperationTime = Math.max(maxOperationTime,getOperationTime(route));
+            maxOperationTime = Math.max(maxOperationTime, getOperationTime(route));
             tp_distance += getDistance(route);
             tp_time += getTransportTime(route);
             waiting_time += getWaitingTime(route);
@@ -795,7 +775,7 @@ public Capacity getCapacityViolation(VehicleRoute route) {
         }
         Capacity maxLoad = getMaxLoad(route);
         return Capacity.max(Capacity.Builder.newInstance().build(),
-                        maxLoad.subtract(route.getVehicle().getType().getCapacityDimensions()));
+            maxLoad.subtract(route.getVehicle().getType().getCapacityDimensions()));
     }
 
     /**
@@ -810,7 +790,7 @@ public Capacity getCapacityViolationAtBeginning(VehicleRoute route) {
         }
         Capacity atBeginning = getLoadAtBeginning(route);
         return Capacity.max(Capacity.Builder.newInstance().build(),
-                        atBeginning.subtract(route.getVehicle().getType().getCapacityDimensions()));
+            atBeginning.subtract(route.getVehicle().getType().getCapacityDimensions()));
     }
 
     /**
@@ -825,7 +805,7 @@ public Capacity getCapacityViolationAtEnd(VehicleRoute route) {
         }
         Capacity atEnd = getLoadAtEnd(route);
         return Capacity.max(Capacity.Builder.newInstance().build(),
-                        atEnd.subtract(route.getVehicle().getType().getCapacityDimensions()));
+            atEnd.subtract(route.getVehicle().getType().getCapacityDimensions()));
     }
 
 
@@ -844,7 +824,7 @@ public Capacity getCapacityViolationAfterActivity(TourActivity activity, Vehicle
         }
         Capacity afterAct = getLoadRightAfterActivity(activity, route);
         return Capacity.max(Capacity.Builder.newInstance().build(),
-                        afterAct.subtract(route.getVehicle().getType().getCapacityDimensions()));
+            afterAct.subtract(route.getVehicle().getType().getCapacityDimensions()));
     }
 
     /**
@@ -1295,7 +1275,9 @@ public Double getOperationTime() {
         return operation_time;
     }
 
-    public Double getMaxOperationTime() { return maxOperationTime; }
+    public Double getMaxOperationTime() {
+        return maxOperationTime;
+    }
 
     /**
      * @return total waiting time for specified solution
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/distance/SphericalDistanceCalculator.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/distance/SphericalDistanceCalculator.java
index ef6aad66a..afd22e977 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/distance/SphericalDistanceCalculator.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/distance/SphericalDistanceCalculator.java
@@ -27,7 +27,7 @@ public double calculateDistance(Coordinate from, Coordinate to) {
         double deltaLatSin = Math.sin(deltaLat / 2);
         double deltaLonSin = Math.sin(deltaLon / 2);
         double a = deltaLatSin * deltaLatSin
-                        + deltaLonSin * deltaLonSin * Math.cos(lat1) * Math.cos(lat2);
+            + deltaLonSin * deltaLonSin * Math.cos(lat1) * Math.cos(lat2);
         double c = 2 * Math.asin(Math.sqrt(a));
         double distance = R * c;
         return distance;
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/Capacity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/Capacity.java
index 7f7648ec3..876e3aec6 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/Capacity.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/Capacity.java
@@ -37,13 +37,10 @@
      * <p>
      * Note that this assumes that capacity dimension can be added up.
      *
-     * @param cap1
-     *            capacity to be added up
-     * @param cap2
-     *            capacity to be added up
+     * @param cap1 capacity to be added up
+     * @param cap2 capacity to be added up
      * @return new capacity
-     * @throws NullPointerException
-     *             if one of the args is null
+     * @throws NullPointerException if one of the args is null
      * @deprecated Use <code>cap1.add(cap2)</code> instead.
      */
 
@@ -55,18 +52,14 @@ public static Capacity addup(Capacity cap1, Capacity cap2) {
     /**
      * Subtracts cap2subtract from cap and returns the resulting Capacity.
      *
-     * @param cap
-     *            capacity to be subtracted from
-     * @param cap2subtract
-     *            capacity to subtract
+     * @param cap          capacity to be subtracted from
+     * @param cap2subtract capacity to subtract
      * @return new capacity
-     * @throws NullPointerException
-     *             if one of the args is null
-     * @throws IllegalStateException
-     *             if number of capacityDimensions of cap1 and cap2 are
-     *             different (i.e.
-     *             <code>cap1.getNuOfDimension() != cap2.getNuOfDimension()</code>
-     *             ).
+     * @throws NullPointerException  if one of the args is null
+     * @throws IllegalStateException if number of capacityDimensions of cap1 and cap2 are
+     *                               different (i.e.
+     *                               <code>cap1.getNuOfDimension() != cap2.getNuOfDimension()</code>
+     *                               ).
      * @deprecated Use <code>cap1.subtract(cap2)</code> instead.
      */
     @Deprecated
@@ -78,11 +71,9 @@ public static Capacity subtract(Capacity cap, Capacity cap2subtract) {
      * Returns the inverted capacity, i.e. it multiplies all capacity dimensions
      * with -1.
      *
-     * @param cap2invert
-     *            capacity to be inverted
+     * @param cap2invert capacity to be inverted
      * @return inverted capacity
-     * @throws NullPointerException
-     *             if one of the args is null
+     * @throws NullPointerException if one of the args is null
      * @deprecated Use <code>cap2invert.invert()</code> instead.
      */
     @Deprecated
@@ -354,9 +345,9 @@ public Capacity add(Capacity capToAdd) {
             throw new NullPointerException("capacity must not be null");
         }
         Capacity res = new Capacity(
-                        Math.max(getNuOfDimensions(), capToAdd.getNuOfDimensions()));
+            Math.max(getNuOfDimensions(), capToAdd.getNuOfDimensions()));
         for (int i = 0; i < Math.max(getNuOfDimensions(),
-                        capToAdd.getNuOfDimensions()); i++) {
+            capToAdd.getNuOfDimensions()); i++) {
             res.dimensions[i] = get(i) + capToAdd.get(i);
         }
 
@@ -368,9 +359,9 @@ public Capacity subtract(Capacity capToSubstract) {
             throw new NullPointerException("capacity must not be null");
         }
         Capacity res = new Capacity(
-                        Math.max(getNuOfDimensions(), capToSubstract.getNuOfDimensions()));
+            Math.max(getNuOfDimensions(), capToSubstract.getNuOfDimensions()));
         for (int i = 0; i < Math.max(getNuOfDimensions(),
-                        capToSubstract.getNuOfDimensions()); i++) {
+            capToSubstract.getNuOfDimensions()); i++) {
             res.dimensions[i] = get(i) - capToSubstract.get(i);
         }
         return res;
@@ -396,10 +387,10 @@ public double divide(Capacity denominator) {
         int nuOfDimensions = 0;
         double sumQuotients = 0.0;
         for (int index = 0; index < Math.max(getNuOfDimensions(),
-                        denominator.getNuOfDimensions()); index++) {
+            denominator.getNuOfDimensions()); index++) {
             if (get(index) != 0 && denominator.get(index) == 0) {
                 throw new IllegalArgumentException(
-                                "numerator > 0 and denominator = 0. cannot divide by 0");
+                    "numerator > 0 and denominator = 0. cannot divide by 0");
             } else if (get(index) == 0 && denominator.get(index) == 0) {
                 continue;
             } else {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/CopyJobActivityFactory.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/CopyJobActivityFactory.java
index e514a7d9d..2e39759de 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/CopyJobActivityFactory.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/CopyJobActivityFactory.java
@@ -1,10 +1,10 @@
 package com.graphhopper.jsprit.core.problem;
 
-import java.util.List;
-
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 
+import java.util.List;
+
 public class CopyJobActivityFactory implements JobActivityFactory {
 
     @Override
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/JobActivityFactory.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/JobActivityFactory.java
index da186d680..161522048 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/JobActivityFactory.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/JobActivityFactory.java
@@ -18,11 +18,11 @@
 
 package com.graphhopper.jsprit.core.problem;
 
-import java.util.List;
-
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 
+import java.util.List;
+
 /**
  * JobActivityFactory that creates the activities to the specified job.
  */
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/Location.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/Location.java
index f9721e15f..041df99b7 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/Location.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/Location.java
@@ -110,7 +110,7 @@ public Builder setId(String id) {
          * @param name
          * @return
          */
-        public Builder setName(String name){
+        public Builder setName(String name) {
             this.name = name;
             return this;
         }
@@ -161,7 +161,9 @@ public Coordinate getCoordinate() {
         return coordinate;
     }
 
-    public String getName() { return name; }
+    public String getName() {
+        return name;
+    }
 
     @Override
     public boolean equals(Object o) {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/SimpleJobActivityFactory.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/SimpleJobActivityFactory.java
index 6c7cf661c..8686aa081 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/SimpleJobActivityFactory.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/SimpleJobActivityFactory.java
@@ -1,10 +1,10 @@
 package com.graphhopper.jsprit.core.problem;
 
-import java.util.List;
-
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 
+import java.util.List;
+
 public class SimpleJobActivityFactory implements JobActivityFactory {
 
     @Override
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblem.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblem.java
index 1e27b6226..349badecd 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblem.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblem.java
@@ -17,20 +17,6 @@
  */
 package com.graphhopper.jsprit.core.problem;
 
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.LinkedHashMap;
-import java.util.LinkedHashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import com.graphhopper.jsprit.core.distance.EuclideanDistanceCalculator;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingActivityCosts;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
@@ -47,7 +33,10 @@
 import com.graphhopper.jsprit.core.util.Coordinate;
 import com.graphhopper.jsprit.core.util.DefaultCosts;
 import com.graphhopper.jsprit.core.util.Locations;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
+import java.util.*;
 
 
 /**
@@ -158,7 +147,6 @@ private void incVehicleTypeIdIndexCounter() {
         }
 
 
-
         /**
          * Returns the locations collected SO FAR by this builder.
          * <p>
@@ -216,7 +204,6 @@ public Builder setFleetSize(FleetSize fleetSize) {
          * @param job job to be added
          * @return this builder
          * @throws IllegalStateException if job is neither a shipment nor a service, or jobId has already been added.
-         *
          */
         public Builder addJob(Job job) {
             if (!(job instanceof AbstractJob)) {
@@ -273,7 +260,7 @@ private boolean addBreaksToActivityMap() {
                 if (v.getBreak() != null) {
                     hasBreaks = true;
                     List<JobActivity> breakActivities = jobActivityFactory.createActivities(v.getBreak());
-                    if(breakActivities.isEmpty()) {
+                    if (breakActivities.isEmpty()) {
                         throw new IllegalArgumentException("at least one activity for break needs to be created by activityFactory");
                     }
                     for (AbstractActivityNEW act : breakActivities) {
@@ -292,7 +279,7 @@ private boolean addBreaksToActivityMap() {
          * @return the builder
          */
         public Builder addInitialVehicleRoute(VehicleRoute route) {
-            if(!addedVehicleIds.contains(route.getVehicle().getId())){
+            if (!addedVehicleIds.contains(route.getVehicle().getId())) {
                 addVehicle((AbstractVehicle) route.getVehicle());
                 addedVehicleIds.add(route.getVehicle().getId());
             }
@@ -313,7 +300,6 @@ public Builder addInitialVehicleRoute(VehicleRoute route) {
         }
 
 
-
         //        private void registerJobAndActivity(JobActivity abstractAct, Job job) {
         //            if (activityMap.containsKey(job)) {
         //                activityMap.get(job).add(abstractAct);
@@ -336,12 +322,13 @@ public Builder addInitialVehicleRoutes(Collection<VehicleRoute> routes) {
             }
             return this;
         }
+
         /**
          * Adds a vehicle.
          *
          * @param vehicle vehicle to be added
          * @return this builder
-         * */
+         */
         public Builder addVehicle(Vehicle vehicle) {
             if (!(vehicle instanceof AbstractVehicle)) {
                 throw new IllegalArgumentException("vehicle must be an AbstractVehicle");
@@ -356,7 +343,7 @@ public Builder addVehicle(Vehicle vehicle) {
          * @return this builder
          */
         public Builder addVehicle(AbstractVehicle vehicle) {
-            if(addedVehicleIds.contains(vehicle.getId())){
+            if (addedVehicleIds.contains(vehicle.getId())) {
                 throw new IllegalArgumentException("problem already contains a vehicle with id " + vehicle.getId() + ". choose unique ids for each vehicle.");
             } else {
                 addedVehicleIds.add(vehicle.getId());
@@ -417,7 +404,7 @@ public Builder setActivityCosts(VehicleRoutingActivityCosts activityCosts) {
         public VehicleRoutingProblem build() {
             if (transportCosts == null) {
                 transportCosts = new DefaultCosts(EuclideanDistanceCalculator.getInstance())
-                                .withCoordinateConverter(getLocations());
+                    .withCoordinateConverter(getLocations());
             }
             for (Job job : tentativeJobs.values()) {
                 if (!jobsInInitialRoutes.contains(job.getId())) {
@@ -580,7 +567,7 @@ private VehicleRoutingProblem(Builder builder) {
     @Override
     public String toString() {
         return "[fleetSize=" + fleetSize + "][#jobs=" + jobs.size() + "][#vehicles=" + vehicles.size() + "][#vehicleTypes=" + vehicleTypes.size() + "][" +
-                        "transportCost=" + transportCosts + "][activityCosts=" + activityCosts + "]";
+            "transportCost=" + transportCosts + "][activityCosts=" + activityCosts + "]";
     }
 
     /**
@@ -603,9 +590,10 @@ public FleetSize getFleetSize() {
         return Collections.unmodifiableMap(jobs);
     }
 
-    public Map<String, Job> getJobsInclusiveInitialJobsInRoutes(){
+    public Map<String, Job> getJobsInclusiveInitialJobsInRoutes() {
         return Collections.unmodifiableMap(allJobs);
     }
+
     /**
      * Returns a copy of initial vehicle routes.
      *
@@ -657,9 +645,10 @@ public VehicleRoutingActivityCosts getActivityCosts() {
         return activityCosts;
     }
 
-    public Collection<Location> getAllLocations(){
+    public Collection<Location> getAllLocations() {
         return allLocations;
     }
+
     /**
      * @param job for which the corresponding activities needs to be returned
      * @return associated activities
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/AdditionalTransportationCosts.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/AdditionalTransportationCosts.java
index ac8fef6da..f97815e56 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/AdditionalTransportationCosts.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/AdditionalTransportationCosts.java
@@ -61,7 +61,7 @@ public double getCosts(JobInsertionContext iFacts, TourActivity prevAct, TourAct
         double tp_time_prevAct_newAct = routingCosts.getTransportTime(prevAct.getLocation(), newAct.getLocation(), depTimeAtPrevAct, iFacts.getNewDriver(), iFacts.getNewVehicle());
 
         double newAct_arrTime = depTimeAtPrevAct + tp_time_prevAct_newAct;
-        double newAct_endTime = Math.max(newAct_arrTime, newAct.getTheoreticalEarliestOperationStartTime()) + activityCosts.getActivityDuration(newAct,newAct_arrTime,iFacts.getNewDriver(),iFacts.getNewVehicle());
+        double newAct_endTime = Math.max(newAct_arrTime, newAct.getTheoreticalEarliestOperationStartTime()) + activityCosts.getActivityDuration(newAct, newAct_arrTime, iFacts.getNewDriver(), iFacts.getNewVehicle());
 
         //open routes
         if (nextAct instanceof End) {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ConstraintManager.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ConstraintManager.java
index 56a21529e..1a15d35e3 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ConstraintManager.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ConstraintManager.java
@@ -17,19 +17,18 @@
  */
 package com.graphhopper.jsprit.core.problem.constraint;
 
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.List;
-
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.state.RouteAndActivityStateGetter;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.List;
 
 /**
  * Manager that manage hard- and soft constraints, both on route and activity level.
@@ -81,16 +80,16 @@ public ConstraintManager(VehicleRoutingProblem vrp, RouteAndActivityStateGetter
         return dependencyTypes;
     }
 
-    public void setDependencyType(String jobId, DependencyType dependencyType){
+    public void setDependencyType(String jobId, DependencyType dependencyType) {
         Job job = vrp.getJobs().get(jobId);
-        if(job != null) {
+        if (job != null) {
             dependencyTypes[job.getIndex()] = dependencyType;
         }
     }
 
-    public DependencyType getDependencyType(String jobId){
+    public DependencyType getDependencyType(String jobId) {
         Job job = vrp.getJobs().get(jobId);
-        if(job != null){
+        if (job != null) {
             return dependencyTypes[job.getIndex()];
         }
         return DependencyType.NO_TYPE;
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/HardActivityLevelConstraintManager.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/HardActivityLevelConstraintManager.java
index 226577d7c..ed092245b 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/HardActivityLevelConstraintManager.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/HardActivityLevelConstraintManager.java
@@ -17,14 +17,14 @@
  */
 package com.graphhopper.jsprit.core.problem.constraint;
 
+import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
+
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.List;
 
-import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-
 
 class HardActivityLevelConstraintManager implements HardActivityConstraint {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/HardRouteLevelConstraintManager.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/HardRouteLevelConstraintManager.java
index 37376077c..13e218f2d 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/HardRouteLevelConstraintManager.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/HardRouteLevelConstraintManager.java
@@ -17,12 +17,12 @@
  */
 package com.graphhopper.jsprit.core.problem.constraint;
 
+import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
+
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
 
-import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
-
 
 class HardRouteLevelConstraintManager implements HardRouteConstraint {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/MaxDistanceConstraint.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/MaxDistanceConstraint.java
index 0e5c04559..460eec20a 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/MaxDistanceConstraint.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/MaxDistanceConstraint.java
@@ -18,9 +18,6 @@
 
 package com.graphhopper.jsprit.core.problem.constraint;
 
-import java.util.Collection;
-import java.util.Map;
-
 import com.graphhopper.jsprit.core.algorithm.state.StateId;
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.problem.cost.TransportDistance;
@@ -31,10 +28,13 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 
+import java.util.Collection;
+import java.util.Map;
+
 /**
  * Created by schroeder on 11/10/16.
  */
-public class MaxDistanceConstraint implements HardActivityConstraint{
+public class MaxDistanceConstraint implements HardActivityConstraint {
 
     private StateManager stateManager;
 
@@ -44,7 +44,7 @@
 
     private Double[] maxDistances;
 
-    public MaxDistanceConstraint(StateManager stateManager, StateId distanceId, TransportDistance distanceCalculator, Map<Vehicle,Double> maxDistancePerVehicleMap) {
+    public MaxDistanceConstraint(StateManager stateManager, StateId distanceId, TransportDistance distanceCalculator, Map<Vehicle, Double> maxDistancePerVehicleMap) {
         this.stateManager = stateManager;
         this.distanceId = distanceId;
         this.distanceCalculator = distanceCalculator;
@@ -53,16 +53,16 @@ public MaxDistanceConstraint(StateManager stateManager, StateId distanceId, Tran
 
     private void makeArray(Map<Vehicle, Double> maxDistances) {
         int maxIndex = getMaxIndex(maxDistances.keySet());
-        this.maxDistances = new Double[maxIndex+1];
-        for(Vehicle v : maxDistances.keySet()){
-            this.maxDistances[v.getIndex()]=maxDistances.get(v);
+        this.maxDistances = new Double[maxIndex + 1];
+        for (Vehicle v : maxDistances.keySet()) {
+            this.maxDistances[v.getIndex()] = maxDistances.get(v);
         }
     }
 
     private int getMaxIndex(Collection<Vehicle> vehicles) {
         int index = 0;
-        for(Vehicle v : vehicles){
-            if(v.getIndex() > index) {
+        for (Vehicle v : vehicles) {
+            if (v.getIndex() > index) {
                 index = v.getIndex();
             }
         }
@@ -71,27 +71,27 @@ private int getMaxIndex(Collection<Vehicle> vehicles) {
 
     @Override
     public ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prevAct, TourActivity newAct, TourActivity nextAct, double prevActDepTime) {
-        if(!hasMaxDistance(iFacts.getNewVehicle())) {
+        if (!hasMaxDistance(iFacts.getNewVehicle())) {
             return ConstraintsStatus.FULFILLED;
         }
         Double currentDistance = 0d;
-        if(!iFacts.getRoute().isEmpty()){
-            currentDistance = stateManager.getRouteState(iFacts.getRoute(),iFacts.getNewVehicle(), distanceId,Double.class);
+        if (!iFacts.getRoute().isEmpty()) {
+            currentDistance = stateManager.getRouteState(iFacts.getRoute(), iFacts.getNewVehicle(), distanceId, Double.class);
         }
         double maxDistance = getMaxDistance(iFacts.getNewVehicle());
-        if(currentDistance > maxDistance) {
+        if (currentDistance > maxDistance) {
             return ConstraintsStatus.NOT_FULFILLED_BREAK;
         }
 
         double distancePrevAct2NewAct = distanceCalculator.getDistance(prevAct.getLocation(), newAct.getLocation(), iFacts.getNewDepTime(), iFacts.getNewVehicle());
         double distanceNewAct2nextAct = distanceCalculator.getDistance(newAct.getLocation(), nextAct.getLocation(), iFacts.getNewDepTime(), iFacts.getNewVehicle());
         double distancePrevAct2NextAct = distanceCalculator.getDistance(prevAct.getLocation(), nextAct.getLocation(), prevActDepTime, iFacts.getNewVehicle());
-        if(nextAct instanceof End && !iFacts.getNewVehicle().isReturnToDepot()){
+        if (nextAct instanceof End && !iFacts.getNewVehicle().isReturnToDepot()) {
             distanceNewAct2nextAct = 0;
             distancePrevAct2NextAct = 0;
         }
         double additionalDistance = distancePrevAct2NewAct + distanceNewAct2nextAct - distancePrevAct2NextAct;
-        if(currentDistance + additionalDistance > maxDistance) {
+        if (currentDistance + additionalDistance > maxDistance) {
             return ConstraintsStatus.NOT_FULFILLED;
         }
 
@@ -101,29 +101,29 @@ public ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prev
             int iIndexOfPickup = iFacts.getRelatedActivityContext().getInsertionIndex();
             TourActivity pickup = iFacts.getAssociatedActivities().get(0);
             TourActivity actBeforePickup;
-            if(iIndexOfPickup > 0) {
-                actBeforePickup = iFacts.getRoute().getActivities().get(iIndexOfPickup-1);
+            if (iIndexOfPickup > 0) {
+                actBeforePickup = iFacts.getRoute().getActivities().get(iIndexOfPickup - 1);
             } else {
-                actBeforePickup = new Start(iFacts.getNewVehicle().getStartLocation(),0,Double.MAX_VALUE);
+                actBeforePickup = new Start(iFacts.getNewVehicle().getStartLocation(), 0, Double.MAX_VALUE);
             }
             TourActivity actAfterPickup = iFacts.getRoute().getActivities().get(iIndexOfPickup);
             //ToDo account here fore End and returnToDepot
             double distanceActBeforePickup2Pickup = distanceCalculator.getDistance(actBeforePickup.getLocation(), pickup.getLocation(), actBeforePickup.getEndTime(), iFacts.getNewVehicle());
             double distancePickup2ActAfterPickup = distanceCalculator.getDistance(pickup.getLocation(), actAfterPickup.getLocation(), iFacts.getRelatedActivityContext().getEndTime(), iFacts.getNewVehicle());
             double distanceBeforePickup2AfterPickup = distanceCalculator.getDistance(actBeforePickup.getLocation(), actAfterPickup.getLocation(), actBeforePickup.getEndTime(), iFacts.getNewVehicle());
-            additionalDistanceOfPickup = distanceActBeforePickup2Pickup  + distancePickup2ActAfterPickup - distanceBeforePickup2AfterPickup;
+            additionalDistanceOfPickup = distanceActBeforePickup2Pickup + distancePickup2ActAfterPickup - distanceBeforePickup2AfterPickup;
         }
 
 
-        if(currentDistance + additionalDistance + additionalDistanceOfPickup > maxDistance){
+        if (currentDistance + additionalDistance + additionalDistanceOfPickup > maxDistance) {
             return ConstraintsStatus.NOT_FULFILLED;
         }
 
         return ConstraintsStatus.FULFILLED;
     }
 
-    private boolean hasMaxDistance(Vehicle newVehicle){
-        if(newVehicle.getIndex() >= maxDistances.length) {
+    private boolean hasMaxDistance(Vehicle newVehicle) {
+        if (newVehicle.getIndex() >= maxDistances.length) {
             return false;
         }
         return maxDistances[newVehicle.getIndex()] != null;
@@ -131,7 +131,7 @@ private boolean hasMaxDistance(Vehicle newVehicle){
 
     private double getMaxDistance(Vehicle newVehicle) {
         Double maxDistance = maxDistances[newVehicle.getIndex()];
-        if(maxDistance == null) {
+        if (maxDistance == null) {
             return Double.MAX_VALUE;
         }
         return maxDistance;
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/PickupAndDeliverShipmentLoadActivityLevelConstraint.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/PickupAndDeliverShipmentLoadActivityLevelConstraint.java
index aee7c4e20..b722aba81 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/PickupAndDeliverShipmentLoadActivityLevelConstraint.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/PickupAndDeliverShipmentLoadActivityLevelConstraint.java
@@ -21,11 +21,7 @@
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivityNEW;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivityNEW;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.Start;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.*;
 import com.graphhopper.jsprit.core.problem.solution.route.state.RouteAndActivityStateGetter;
 
 
@@ -94,7 +90,7 @@ public ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prev
         if (!(newAct instanceof JobActivity)) {
             return ConstraintsStatus.FULFILLED;
         }
-        JobActivity newJobAct = (JobActivity)newAct;
+        JobActivity newJobAct = (JobActivity) newAct;
         if (!(newJobAct.getJob() instanceof Shipment)) {
             return ConstraintsStatus.FULFILLED;
         }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceDeliveriesFirstConstraint.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceDeliveriesFirstConstraint.java
index 93f7adc12..3a34437a0 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceDeliveriesFirstConstraint.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceDeliveriesFirstConstraint.java
@@ -20,16 +20,11 @@
 import com.graphhopper.jsprit.core.problem.job.Service;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivityNEW;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivityNEW;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.ServiceActivityNEW;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.*;
 
 /**
  * @author stefan schroeder
  * @author balage (generic job refactor)
- *
  */
 public class ServiceDeliveriesFirstConstraint implements HardActivityConstraint {
 
@@ -50,7 +45,7 @@ public ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prev
     }
 
     protected ConstraintsStatus newMethod(TourActivity prevAct, TourActivity newAct,
-                    TourActivity nextAct) {
+                                          TourActivity nextAct) {
         if (isShipment(newAct)) {
             // The new activity is a shipment
             if (nextAct instanceof DeliveryActivityNEW && isService(nextAct)) {
@@ -68,8 +63,8 @@ protected ConstraintsStatus newMethod(TourActivity prevAct, TourActivity newAct,
             } else if (newAct instanceof DeliveryActivityNEW) {
                 // The new activity is a delivery
                 if (prevAct instanceof PickupActivityNEW || prevAct instanceof ServiceActivityNEW
-                                || (prevAct instanceof DeliveryActivityNEW
-                                                && isShipment(prevAct))) {
+                    || (prevAct instanceof DeliveryActivityNEW
+                    && isShipment(prevAct))) {
                     // The previous activity can't be a pickup or service (of
                     // any type of Job), nor a shipment delivery
                     // (Only service delivery.)
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadActivityLevelConstraint.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadActivityLevelConstraint.java
index 34dab9d28..13dcbb4eb 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadActivityLevelConstraint.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadActivityLevelConstraint.java
@@ -71,7 +71,7 @@ public ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prev
 
         if (newAct.getSize().isPositive()) {
             if (!newAct.getSize().add(futureMaxLoad).isLessOrEqual(
-                            iFacts.getNewVehicle().getType().getCapacityDimensions())) {
+                iFacts.getNewVehicle().getType().getCapacityDimensions())) {
                 return ConstraintsStatus.NOT_FULFILLED;
             }
         }
@@ -86,7 +86,7 @@ public ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prev
          */
         if (!newAct.getSize().isPositive()) {
             if (!newAct.getSize().abs().add(prevMaxLoad).isLessOrEqual(
-                            iFacts.getNewVehicle().getType().getCapacityDimensions())) {
+                iFacts.getNewVehicle().getType().getCapacityDimensions())) {
                 return ConstraintsStatus.NOT_FULFILLED_BREAK;
             }
         }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadRouteLevelConstraint.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadRouteLevelConstraint.java
index 5e517bf09..c80495467 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadRouteLevelConstraint.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadRouteLevelConstraint.java
@@ -61,7 +61,7 @@ public boolean fulfilled(JobInsertionContext insertionContext) {
                 loadAtDepot = defaultValue;
             }
             if (!loadAtDepot.add(insertionContext.getJob().getSize())
-                            .isLessOrEqual(capacityDimensions)) {
+                .isLessOrEqual(capacityDimensions)) {
                 return false;
             }
         } else if (insertionContext.getJob() instanceof Pickup || insertionContext.getJob() instanceof Service) {
@@ -70,7 +70,7 @@ public boolean fulfilled(JobInsertionContext insertionContext) {
                 loadAtEnd = defaultValue;
             }
             if (!loadAtEnd.add(insertionContext.getJob().getSize())
-                            .isLessOrEqual(capacityDimensions)) {
+                .isLessOrEqual(capacityDimensions)) {
                 return false;
             }
         }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/SoftActivityConstraintManager.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/SoftActivityConstraintManager.java
index 38ae6c72e..1ce25acb2 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/SoftActivityConstraintManager.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/SoftActivityConstraintManager.java
@@ -17,13 +17,13 @@
  */
 package com.graphhopper.jsprit.core.problem.constraint;
 
+import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
+
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
 
-import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-
 class SoftActivityConstraintManager implements SoftActivityConstraint {
 
     private Collection<SoftActivityConstraint> softConstraints = new ArrayList<SoftActivityConstraint>();
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/SoftRouteConstraintManager.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/SoftRouteConstraintManager.java
index f87c896a2..aefc2e774 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/SoftRouteConstraintManager.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/SoftRouteConstraintManager.java
@@ -17,12 +17,12 @@
  */
 package com.graphhopper.jsprit.core.problem.constraint;
 
+import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
+
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
 
-import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
-
 class SoftRouteConstraintManager implements SoftRouteConstraint {
 
     private Collection<SoftRouteConstraint> softConstraints = new ArrayList<SoftRouteConstraint>();
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowConstraints.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowConstraints.java
index 36fc4ce66..4075eccb9 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowConstraints.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowConstraints.java
@@ -109,7 +109,7 @@ public ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prev
         }
         //			log.info("check insertion of " + newAct + " between " + prevAct + " and " + nextAct + ". prevActDepTime=" + prevActDepTime);
         double arrTimeAtNewAct = prevActDepTime + routingCosts.getTransportTime(prevAct.getLocation(), newAct.getLocation(), prevActDepTime, iFacts.getNewDriver(), iFacts.getNewVehicle());
-        double endTimeAtNewAct = Math.max(arrTimeAtNewAct, newAct.getTheoreticalEarliestOperationStartTime()) + activityCosts.getActivityDuration(newAct, arrTimeAtNewAct,iFacts.getNewDriver(),iFacts.getNewVehicle());
+        double endTimeAtNewAct = Math.max(arrTimeAtNewAct, newAct.getTheoreticalEarliestOperationStartTime()) + activityCosts.getActivityDuration(newAct, arrTimeAtNewAct, iFacts.getNewDriver(), iFacts.getNewVehicle());
         double latestArrTimeAtNewAct =
             Math.min(newAct.getTheoreticalLatestOperationStartTime(),
                 latestArrTimeAtNextAct -
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/cost/WaitingTimeCosts.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/cost/WaitingTimeCosts.java
index cd7540cc0..32d141073 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/cost/WaitingTimeCosts.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/cost/WaitingTimeCosts.java
@@ -31,7 +31,7 @@
     public double getActivityCost(TourActivity tourAct, double arrivalTime, Driver driver, Vehicle vehicle) {
         if (vehicle != null) {
             double waiting = vehicle.getType().getVehicleCostParams().perWaitingTimeUnit * Math.max(0., tourAct.getTheoreticalEarliestOperationStartTime() - arrivalTime);
-            double servicing = vehicle.getType().getVehicleCostParams().perServiceTimeUnit * getActivityDuration(tourAct,arrivalTime,driver,vehicle);
+            double servicing = vehicle.getType().getVehicleCostParams().perServiceTimeUnit * getActivityDuration(tourAct, arrivalTime, driver, vehicle);
             return waiting + servicing;
         }
         return 0;
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractJob.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractJob.java
index 7d3192ec4..65f29fd30 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractJob.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractJob.java
@@ -18,13 +18,13 @@
 
 package com.graphhopper.jsprit.core.problem.job;
 
-import java.util.*;
-
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.Skills;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 
+import java.util.*;
+
 /**
  * Abstract base class for all Job implementations.
  * <p>
@@ -59,16 +59,16 @@
      * If you wish to allow your Job implementation to be extended, first create
      * your own abstract Builder class. The signature of your abstract builder
      * should be something like this (<i>self referencing generics</i>):
-     *
+     * <p>
      * <pre>
      * public static abstract class BuilderBase&lt;T extends MyJob, B extends BuilderBase&lt;T, B>>
      *                 extends JobBuilder&lt;T, B> {
      * }
      * </pre>
-     *
+     * <p>
      * This implenetation should contain all new fields, the new setters
      * following the pattern:
-     *
+     * <p>
      * <pre>
      * &#64;SuppressWarnings("unchecked")
      * public B setField(FieldType field) {
@@ -76,7 +76,7 @@
      *     return (B) this;
      * }
      * </pre>
-     *
+     * <p>
      * Usually, the {@linkplain #validate()} method is implemented in this class
      * (and it should call <code>super.validate()</code>) as well, but the
      * abstract {@linkplain #createInstance()} is never. It is recommended that
@@ -93,7 +93,7 @@
      * "http://stackoverflow.com/questions/7354740/is-there-a-way-to-refer-to-the-current-type-with-a-type-variable">
      * the answer of this topic</a> for more information about the pitfalls of
      * the self-refering generics pattern):
-     *
+     * <p>
      * <pre>
      * public static class Builder extends BuilderBase&lt;MyJob, Builder> {
      *     public Builder(String id) {
@@ -106,7 +106,7 @@
      *     }
      * }
      * </pre>
-     *
+     * <p>
      * The sole method to be implemented is {@linkplain #createInstance()}. This
      * is now type-safe and generic-less.
      * </p>
@@ -135,13 +135,10 @@ public JobBuilder(String id) {
         /**
          * Adds capacity dimension.
          *
-         * @param dimensionIndex
-         *            the dimension index of the capacity value
-         * @param dimensionValue
-         *            the capacity value
+         * @param dimensionIndex the dimension index of the capacity value
+         * @param dimensionValue the capacity value
          * @return the builder
-         * @throws IllegalArgumentException
-         *             if dimensionValue < 0
+         * @throws IllegalArgumentException if dimensionValue < 0
          */
         @SuppressWarnings("unchecked")
         public B addSizeDimension(int dimensionIndex, int dimensionValue) {
@@ -193,7 +190,7 @@ public B addAllSizeDimensions(Capacity size) {
         public B setPriority(int priority) {
             if (priority < 1 || priority > 3) {
                 throw new IllegalArgumentException(
-                                "incorrect priority. only 1 = high, 2 = medium and 3 = low is allowed");
+                    "incorrect priority. only 1 = high, 2 = medium and 3 = low is allowed");
             }
             this.priority = priority;
             return (B) this;
@@ -201,7 +198,7 @@ public B setPriority(int priority) {
 
         /**
          * Builds the job.
-         *
+         * <p>
          * <p>
          * You never has to override this method. Override the
          * {@linkplain #validate()} and {@linkplain #createInstance()} methods
@@ -210,10 +207,8 @@ public B setPriority(int priority) {
          * </p>
          *
          * @return {@link T} The new implementation of the corresponding Job.
-         *
-         * @see JobBuilder
-         *
          * @author balage
+         * @see JobBuilder
          */
         public final T build() {
             validate();
@@ -267,9 +262,7 @@ public int getPriority() {
     /**
      * Builder based constructor.
      *
-     * @param builder
-     *            The builder instance.
-     *
+     * @param builder The builder instance.
      * @see JobBuilder
      */
     protected AbstractJob(JobBuilder<?, ?> builder) {
@@ -319,7 +312,7 @@ private void addTimeWindows(Collection<TimeWindow> timeWindows) {
 
     /**
      * Creates the activities.
-     *
+     * <p>
      * <p>
      * This functions contract specifies that the implementation has to call
      * {@linkplain #prepareCaches()} function at the end, after all activities
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractListBackedJobActivityList.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractListBackedJobActivityList.java
index f2c3b0f46..7ac762d5e 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractListBackedJobActivityList.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractListBackedJobActivityList.java
@@ -1,11 +1,11 @@
 package com.graphhopper.jsprit.core.problem.job;
 
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
+
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 
-import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
-
 /**
  * Simple activity list implementation.
  * <p>
@@ -13,7 +13,6 @@
  * </p>
  *
  * @author balage
- *
  */
 public abstract class AbstractListBackedJobActivityList extends JobActivityList {
 
@@ -50,11 +49,9 @@ public int size() {
     }
 
     /**
-     * @param activity
-     *            The activity to be found.
+     * @param activity The activity to be found.
      * @return The index of the activity in the sequential row.
-     * @throws IllegalArgumentException
-     *             When the activity is not in the queue.
+     * @throws IllegalArgumentException When the activity is not in the queue.
      */
     protected int indexOf(JobActivity activity) {
         int idx = _activities.indexOf(activity);
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Break.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Break.java
index ad37eb9be..54d380073 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Break.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Break.java
@@ -31,7 +31,7 @@
     public static final class Builder extends Service.BuilderBase<Break, Builder> {
 
         private static final Location VARIABLE_LOCATION = Location
-                        .newInstance("@@@VARIABLE_LOCATION");
+            .newInstance("@@@VARIABLE_LOCATION");
 
         public Builder(String id) {
             super(id);
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/GraphJobActivityList.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/GraphJobActivityList.java
index e102e362e..b14cc2884 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/GraphJobActivityList.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/GraphJobActivityList.java
@@ -1,18 +1,10 @@
 package com.graphhopper.jsprit.core.problem.job;
 
-import java.util.ArrayDeque;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Deque;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.stream.Collectors;
-
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 
+import java.util.*;
+import java.util.stream.Collectors;
+
 /**
  * DAG (Directed Acyclic Graph) based activity list implementation.
  * <p>
@@ -20,7 +12,6 @@
  * </p>
  *
  * @author balage
- *
  */
 public class GraphJobActivityList extends AbstractListBackedJobActivityList {
 
@@ -46,13 +37,10 @@ public void addActivity(JobActivity activity) {
     /**
      * Adds a dependency between two activities. If the activities not in the list, they are also added.
      *
-     * @param priorActivity
-     *            The prior activity.
-     * @param subsequentActivity
-     *            The subsequent activity.
-     * @throws IllegalArgumentException
-     *             If the activities can't be added (see {@linkplain #addActivity(JobActivity)}) or if the new
-     *             dependency would create a cycle in the dependency graph.
+     * @param priorActivity      The prior activity.
+     * @param subsequentActivity The subsequent activity.
+     * @throws IllegalArgumentException If the activities can't be added (see {@linkplain #addActivity(JobActivity)}) or if the new
+     *                                  dependency would create a cycle in the dependency graph.
      */
     public void addDependency(JobActivity priorActivity, JobActivity subsequentActivity) {
         // Add activities if not added yet
@@ -124,37 +112,37 @@ public void printDetailed() {
         sb.append("------------------------------\n");
         sb.append("DIRECT DEPENDENCIES\n");
         sb.append(dependencies.entrySet().stream()
-                .flatMap(en -> en.getValue().stream().map(sa -> en.getKey().getName() + " -> " + sa.getName()))
-                .sorted()
-                .collect(Collectors.joining("\n")));
+            .flatMap(en -> en.getValue().stream().map(sa -> en.getKey().getName() + " -> " + sa.getName()))
+            .sorted()
+            .collect(Collectors.joining("\n")));
         sb.append("\nTRANSITIVE PRECEDING DEPENDENCIES\n");
         sb.append(transitivePrecedingDependencyCache.entrySet().stream()
-                .sorted((e1, e2) -> e1.getKey().getName().compareTo(e2.getKey().getName()))
-                .map(en -> en.getKey().getName() + ": " + en.getValue().stream()
-                        .map(pa -> pa.getName())
-                        .collect(Collectors.joining(", ")))
-                .collect(Collectors.joining("\n")));
+            .sorted((e1, e2) -> e1.getKey().getName().compareTo(e2.getKey().getName()))
+            .map(en -> en.getKey().getName() + ": " + en.getValue().stream()
+                .map(pa -> pa.getName())
+                .collect(Collectors.joining(", ")))
+            .collect(Collectors.joining("\n")));
         sb.append("\nTRANSITIVE SUBSEQUENT DEPENDENCIES\n");
         sb.append(transitiveSubsequentDependencyCache.entrySet().stream()
-                .sorted((e1, e2) -> e1.getKey().getName().compareTo(e2.getKey().getName()))
-                .map(en -> en.getKey().getName() + ": " + en.getValue().stream()
-                        .map(pa -> pa.getName())
-                        .sorted()
-                        .collect(Collectors.joining(", ")))
-                .collect(Collectors.joining("\n")));
+            .sorted((e1, e2) -> e1.getKey().getName().compareTo(e2.getKey().getName()))
+            .map(en -> en.getKey().getName() + ": " + en.getValue().stream()
+                .map(pa -> pa.getName())
+                .sorted()
+                .collect(Collectors.joining(", ")))
+            .collect(Collectors.joining("\n")));
         sb.append("\nTOPOLOGICAL ORDERINGS\n");
         sb.append(getPossibleOrderings().stream()
-                .sorted((l1, l2) -> {
-                    for (int i = 0; i < l1.size(); i++) {
-                        if (l1.get(i).equals(l2.get(i))) {
-                            continue;
-                        }
-                        return l1.get(i).getName().compareTo(l2.get(i).getName());
+            .sorted((l1, l2) -> {
+                for (int i = 0; i < l1.size(); i++) {
+                    if (l1.get(i).equals(l2.get(i))) {
+                        continue;
                     }
-                    return 0;
-                })
-                .map(e -> e.stream().map(a -> a.getName()).collect(Collectors.joining(", ")))
-                .collect(Collectors.joining("\n")));
+                    return l1.get(i).getName().compareTo(l2.get(i).getName());
+                }
+                return 0;
+            })
+            .map(e -> e.stream().map(a -> a.getName()).collect(Collectors.joining(", ")))
+            .collect(Collectors.joining("\n")));
 
         System.out.println(sb.toString());
     }
@@ -168,9 +156,9 @@ public void printDetailed() {
         for (int i = 0; i < _activities.size(); i++) {
             JobActivity act = _activities.get(i);
             indegree[i] = (int) dependencies.entrySet().stream()
-                    .flatMap(en -> en.getValue().stream())
-                    .filter(a -> a.equals(act))
-                    .count();
+                .flatMap(en -> en.getValue().stream())
+                .filter(a -> a.equals(act))
+                .count();
         }
         allTopologicalSort(orderings, partialOrder, visited, indegree);
         return orderings;
@@ -178,21 +166,17 @@ public void printDetailed() {
 
     /**
      * Recursive function for collection all possible topological orderings.
-     *
+     * <p>
      * <p>
      * <i>Migrated from the original C++ source of
      * <a href="http://www.geeksforgeeks.org/all-topological-sorts-of-a-directed-acyclic-graph/">Utkarsh Trivedi</a>
      * .</i>
      * </p>
      *
-     * @param orderings
-     *            The list of found orderings.
-     * @param partialOrder
-     *            The partial ordering under construction.
-     * @param visited
-     *            Markers on the already visited nodes.
-     * @param indegree
-     *            Dependency level of the nodes.
+     * @param orderings    The list of found orderings.
+     * @param partialOrder The partial ordering under construction.
+     * @param visited      Markers on the already visited nodes.
+     * @param indegree     Dependency level of the nodes.
      */
     private void allTopologicalSort(Set<List<JobActivity>> orderings, Deque<JobActivity> partialOrder, boolean[] visited, int[] indegree) {
         boolean flag = false;
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/InternalJobMarker.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/InternalJobMarker.java
index 48346b62c..ede6a8c3d 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/InternalJobMarker.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/InternalJobMarker.java
@@ -2,11 +2,10 @@
 
 /**
  * Marks internal jobs.
- *
+ * <p>
  * Note, that the interface is package private, so no internal jobs could be created outside this package.
  *
  * @author balage
- *
  */
 interface InternalJobMarker {
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Job.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Job.java
index da0998152..a3c5b527c 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Job.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Job.java
@@ -18,16 +18,12 @@
 package com.graphhopper.jsprit.core.problem.job;
 
 
+import com.graphhopper.jsprit.core.problem.*;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
+
 import java.util.List;
 import java.util.Set;
 
-import com.graphhopper.jsprit.core.problem.Capacity;
-import com.graphhopper.jsprit.core.problem.HasId;
-import com.graphhopper.jsprit.core.problem.HasIndex;
-import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.Skills;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
-
 /**
  * Basic interface for all jobs.
  *
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/JobActivityList.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/JobActivityList.java
index 845660700..c69bfb0cd 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/JobActivityList.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/JobActivityList.java
@@ -1,22 +1,21 @@
 package com.graphhopper.jsprit.core.problem.job;
 
+import com.graphhopper.jsprit.core.problem.solution.route.activity.InternalActivityMarker;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
+
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Optional;
 import java.util.Set;
 
-import com.graphhopper.jsprit.core.problem.solution.route.activity.InternalActivityMarker;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
-
 /**
  * Abstract ancestor of the container implementations for activities of an {@linkplain AbstractJob}.
- *
+ * <p>
  * <p>
  * It provides functions to query all, the preceding or subsequent activities.
  * </p>
  *
  * @author balage
- *
  */
 public abstract class JobActivityList {
 
@@ -39,8 +38,7 @@ public AbstractJob getJob() {
     /**
      * Adds an activity to the list.
      *
-     * @param activity
-     *            The activity to insert.
+     * @param activity The activity to insert.
      */
     public abstract void addActivity(JobActivity activity);
 
@@ -48,8 +46,7 @@ public AbstractJob getJob() {
     /**
      * Validates that an activity could be inserted to the queue.
      *
-     * @param activity
-     *            The activity to insert.
+     * @param activity The activity to insert.
      */
     protected void validateActivity(JobActivity activity) {
         // Internal activities can be inserted only when the job itself is internal
@@ -75,8 +72,7 @@ protected void validateActivity(JobActivity activity) {
     /**
      * Returns all the activities to be done before the <code>activity</code>.
      *
-     * @param activity
-     *            The activity to compare to.
+     * @param activity The activity to compare to.
      * @return The list of the preceding activities.
      */
     public abstract Set<JobActivity> getPreceding(JobActivity activity);
@@ -84,8 +80,7 @@ protected void validateActivity(JobActivity activity) {
     /**
      * Returns all the activities to be done after the <code>activity</code>.
      *
-     * @param activity
-     *            The activity to compare to.
+     * @param activity The activity to compare to.
      * @return The list of the subsequent activities.
      */
     public abstract Set<JobActivity> getSubsequent(JobActivity activity);
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/ReturnedShipment.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/ReturnedShipment.java
index 0a283dbc5..7b31c7869 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/ReturnedShipment.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/ReturnedShipment.java
@@ -19,11 +19,7 @@
 
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivityNEW;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.ExchangeActivityNEW;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivityNEW;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindowsImpl;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.*;
 
 
 /**
@@ -57,9 +53,8 @@
         /**
          * Returns new instance of this builder.
          *
-         * @param id
-         *            the id of the shipment which must be a unique identifier
-         *            among all jobs
+         * @param id the id of the shipment which must be a unique identifier
+         *           among all jobs
          * @return the builder
          */
 
@@ -71,8 +66,7 @@ public Builder(String id) {
         /**
          * Sets backhaul location.
          *
-         * @param backhaulLocation
-         *            backhaul location
+         * @param backhaulLocation backhaul location
          * @return builder
          */
 
@@ -88,12 +82,10 @@ public Builder setBackhaulLocation(Location backhaulLocation) {
          * ServiceTime is intended to be the time the implied activity takes at
          * the backhaul-location.
          *
-         * @param serviceTime
-         *            the service time / duration the backhaul of the associated
-         *            shipment takes
+         * @param serviceTime the service time / duration the backhaul of the associated
+         *                    shipment takes
          * @return builder
-         * @throws IllegalArgumentException
-         *             if servicTime < 0.0
+         * @throws IllegalArgumentException if servicTime < 0.0
          */
 
         public Builder setBackhaulServiceTime(double serviceTime) {
@@ -111,12 +103,10 @@ public Builder setBackhaulServiceTime(double serviceTime) {
          * <p>
          * By default timeWindow is [0.0, Double.MAX_VALUE}
          *
-         * @param timeWindow
-         *            the time window within the backhaul operation/activity can
-         *            START
+         * @param timeWindow the time window within the backhaul operation/activity can
+         *                   START
          * @return builder
-         * @throws IllegalArgumentException
-         *             if timeWindow is null
+         * @throws IllegalArgumentException if timeWindow is null
          */
 
         public Builder setBackhaulTimeWindow(TimeWindow timeWindow) {
@@ -129,8 +119,6 @@ public Builder setBackhaulTimeWindow(TimeWindow timeWindow) {
         }
 
 
-
-
         public Builder addBackhaulTimeWindow(TimeWindow timeWindow) {
             if (timeWindow == null) {
                 throw new IllegalArgumentException("time-window arg must not be null");
@@ -204,7 +192,6 @@ protected ReturnedShipment createInstance() {
     }
 
 
-
     ReturnedShipment(BuilderBase<? extends ReturnedShipment, ?> builder) {
         super(builder);
     }
@@ -215,41 +202,41 @@ protected void createActivities(JobBuilder<?, ?> builder) {
         Builder shipmentBuilder = (Builder) builder;
         JobActivityList list = new SequentialJobActivityList(this);
         list.addActivity(new PickupActivityNEW(this, ACTIVITY_NAME_PICKUP,
-                        shipmentBuilder.getPickupLocation(),
-                        shipmentBuilder.getPickupServiceTime(), shipmentBuilder.getCapacity(),
-                        shipmentBuilder.getPickupTimeWindows().getTimeWindows()));
+            shipmentBuilder.getPickupLocation(),
+            shipmentBuilder.getPickupServiceTime(), shipmentBuilder.getCapacity(),
+            shipmentBuilder.getPickupTimeWindows().getTimeWindows()));
         list.addActivity(new ExchangeActivityNEW(this, ACTIVITY_NAME_DELIVERY,
-                        shipmentBuilder.getDeliveryLocation(),
-                        shipmentBuilder.getDeliveryServiceTime(),
-                        shipmentBuilder.getBackhaulCapacity()
-                                        .subtract(shipmentBuilder.getCapacity()),
-                        shipmentBuilder.getDeliveryTimeWindows().getTimeWindows()));
+            shipmentBuilder.getDeliveryLocation(),
+            shipmentBuilder.getDeliveryServiceTime(),
+            shipmentBuilder.getBackhaulCapacity()
+                .subtract(shipmentBuilder.getCapacity()),
+            shipmentBuilder.getDeliveryTimeWindows().getTimeWindows()));
         list.addActivity(new DeliveryActivityNEW(this, ACTIVITY_NAME_BACKHAUL,
-                        shipmentBuilder.getBackhaulLocation(),
-                        shipmentBuilder.getBackhaulServiceTime(),
-                        shipmentBuilder.getBackhaulCapacity(),
-                        shipmentBuilder.getBackhaulTimeWindows().getTimeWindows()));
+            shipmentBuilder.getBackhaulLocation(),
+            shipmentBuilder.getBackhaulServiceTime(),
+            shipmentBuilder.getBackhaulCapacity(),
+            shipmentBuilder.getBackhaulTimeWindows().getTimeWindows()));
         setActivities(list);
     }
 
     // TODO: RENAME WHEN SHIPMENT IS RETURNING THE SAME TYPE OF ACTIVIT
     public PickupActivityNEW getPickupActivityTO_BE_RENAMED_LATER() {
         return (PickupActivityNEW) getActivityList()
-                        .findByType(ACTIVITY_NAME_PICKUP)
-                        .get();
+            .findByType(ACTIVITY_NAME_PICKUP)
+            .get();
     }
 
     // TODO: RENAME WHEN SHIPMENT IS RETURNING THE SAME TYPE OF ACTIVIT
     public ExchangeActivityNEW getDeliveryActivityTO_BE_RENAMED_LATER() {
         return (ExchangeActivityNEW) getActivityList()
-                        .findByType(ACTIVITY_NAME_DELIVERY)
-                        .get();
+            .findByType(ACTIVITY_NAME_DELIVERY)
+            .get();
     }
 
     public DeliveryActivityNEW getBackhaulActivityTO_BE_RENAMED_LATER() {
         return (DeliveryActivityNEW) getActivityList()
-                        .findByType(ACTIVITY_NAME_BACKHAUL)
-                        .get();
+            .findByType(ACTIVITY_NAME_BACKHAUL)
+            .get();
     }
 
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/SequentialJobActivityList.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/SequentialJobActivityList.java
index 678d4eeb8..0f5715d30 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/SequentialJobActivityList.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/SequentialJobActivityList.java
@@ -1,11 +1,11 @@
 package com.graphhopper.jsprit.core.problem.job;
 
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
+
 import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
 
-import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
-
 /**
  * Simple activity list implementation.
  * <p>
@@ -13,7 +13,6 @@
  * </p>
  *
  * @author balage
- *
  */
 public class SequentialJobActivityList extends AbstractListBackedJobActivityList {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java
index 5f1086181..e82f05b46 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java
@@ -17,8 +17,6 @@
  */
 package com.graphhopper.jsprit.core.problem.job;
 
-import java.util.Collection;
-
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
@@ -26,6 +24,8 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindowsImpl;
 
+import java.util.Collection;
+
 /**
  * Service implementation of a job.
  * <p>
@@ -42,7 +42,7 @@
      * @author schroeder
      */
     public static abstract class BuilderBase<T extends Service, B extends BuilderBase<T, B>>
-    extends JobBuilder<T, B> {
+        extends JobBuilder<T, B> {
 
         protected String type = "service";
 
@@ -123,7 +123,7 @@ public B addSizeDimension(int dimensionIndex, int dimensionValue) {
 
         @SuppressWarnings("unchecked")
         public B setTimeWindow(TimeWindow tw) {
-            if(tw == null) {
+            if (tw == null) {
                 throw new IllegalArgumentException("time-window arg must not be null");
             }
             timeWindows = new TimeWindowsImpl();
@@ -133,7 +133,7 @@ public B setTimeWindow(TimeWindow tw) {
 
         @SuppressWarnings("unchecked")
         public B addTimeWindow(TimeWindow timeWindow) {
-            if(timeWindow == null) {
+            if (timeWindow == null) {
                 throw new IllegalArgumentException("time-window arg must not be null");
             }
             timeWindows.add(timeWindow);
@@ -146,11 +146,11 @@ public B addTimeWindow(double earliest, double latest) {
 
         /**
          * Builds the service.
-         *
+         * <p>
          * <p>
          * The implementation of the builder <b>may</b> call the function {@linkplain #preProcess()} prior creating the
          * instant and <b>MUST</b> call the {@linkplain #postProcess(Service)} method after the instance is constructed:
-         *
+         * <p>
          * <pre>
          *    &#64;Override
          *    public Service build() {
@@ -160,12 +160,11 @@ public B addTimeWindow(double earliest, double latest) {
          *        return service;
          *    }
          * </pre>
-         *
+         * <p>
          * </p>
          *
          * @return {@link Service}
-         * @throws IllegalArgumentException
-         *             if neither locationId nor coordinate is set.
+         * @throws IllegalArgumentException if neither locationId nor coordinate is set.
          */
 
         @Override
@@ -260,7 +259,6 @@ public double getServiceDuration() {
      * It is recommended to use getTimeWindows() instead. If you still use this, it returns the first time window of getTimeWindows() collection.
      *
      * @return time window
-     *
      */
     @Deprecated
     public TimeWindow getTimeWindow() {
@@ -287,8 +285,8 @@ public String getType() {
     @Override
     public String toString() {
         return "[id=" + getId() + "][name=" + getName() + "][type=" + type + "][location="
-                        + getLocation() + "][capacity=" + getSize() + "][serviceTime="
-                        + getServiceDuration() + "][timeWindow=" + getTimeWindows() + "]";
+            + getLocation() + "][capacity=" + getSize() + "][serviceTime="
+            + getServiceDuration() + "][timeWindow=" + getTimeWindows() + "]";
     }
 
 
@@ -299,5 +297,4 @@ public Capacity getSize() {
     }
 
 
-
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java
index 049dfdc1c..f0b7f2d65 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java
@@ -17,8 +17,6 @@
  */
 package com.graphhopper.jsprit.core.problem.job;
 
-import java.util.Collection;
-
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverShipmentDEPRECATED;
@@ -26,6 +24,8 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindowsImpl;
 
+import java.util.Collection;
+
 
 /**
  * Shipment is an implementation of Job and consists of a pickup and a delivery
@@ -60,7 +60,7 @@
      * @author schroeder
      */
     public static abstract class BuilderBase<T extends Shipment, B extends BuilderBase<T, B>>
-    extends JobBuilder<T, B> {
+        extends JobBuilder<T, B> {
 
         private double pickupServiceTime = 0.0;
 
@@ -77,9 +77,8 @@
         /**
          * Returns new instance of this builder.
          *
-         * @param id
-         *            the id of the shipment which must be a unique identifier
-         *            among all jobs
+         * @param id the id of the shipment which must be a unique identifier
+         *           among all jobs
          * @return the builder
          */
 
@@ -92,8 +91,7 @@ public BuilderBase(String id) {
         /**
          * Sets pickup location.
          *
-         * @param pickupLocation
-         *            pickup location
+         * @param pickupLocation pickup location
          * @return builder
          */
         @SuppressWarnings("unchecked")
@@ -109,12 +107,10 @@ public B setPickupLocation(Location pickupLocation) {
          * ServiceTime is intended to be the time the implied activity takes at
          * the pickup-location.
          *
-         * @param serviceTime
-         *            the service time / duration the pickup of the associated
-         *            shipment takes
+         * @param serviceTime the service time / duration the pickup of the associated
+         *                    shipment takes
          * @return builder
-         * @throws IllegalArgumentException
-         *             if servicTime < 0.0
+         * @throws IllegalArgumentException if servicTime < 0.0
          */
         @SuppressWarnings("unchecked")
         public B setPickupServiceTime(double serviceTime) {
@@ -132,12 +128,10 @@ public B setPickupServiceTime(double serviceTime) {
          * <p>
          * By default timeWindow is [0.0, Double.MAX_VALUE}
          *
-         * @param timeWindow
-         *            the time window within the pickup operation/activity can
-         *            START
+         * @param timeWindow the time window within the pickup operation/activity can
+         *                   START
          * @return builder
-         * @throws IllegalArgumentException
-         *             if timeWindow is null
+         * @throws IllegalArgumentException if timeWindow is null
          */
         @SuppressWarnings("unchecked")
         public B setPickupTimeWindow(TimeWindow timeWindow) {
@@ -150,12 +144,10 @@ public B setPickupTimeWindow(TimeWindow timeWindow) {
         }
 
 
-
         /**
          * Sets delivery location.
          *
-         * @param deliveryLocation
-         *            delivery location
+         * @param deliveryLocation delivery location
          * @return builder
          */
         @SuppressWarnings("unchecked")
@@ -171,11 +163,9 @@ public B setDeliveryLocation(Location deliveryLocation) {
          * ServiceTime is intended to be the time the implied activity takes at
          * the delivery-location.
          *
-         * @param deliveryServiceTime
-         *            the service time / duration of shipment's delivery
+         * @param deliveryServiceTime the service time / duration of shipment's delivery
          * @return builder
-         * @throws IllegalArgumentException
-         *             if serviceTime < 0.0
+         * @throws IllegalArgumentException if serviceTime < 0.0
          */
         @SuppressWarnings("unchecked")
         public B setDeliveryServiceTime(double deliveryServiceTime) {
@@ -193,12 +183,10 @@ public B setDeliveryServiceTime(double deliveryServiceTime) {
          * <p>
          * By default timeWindow is [0.0, Double.MAX_VALUE}
          *
-         * @param timeWindow
-         *            the time window within the associated delivery is allowed
-         *            to START
+         * @param timeWindow the time window within the associated delivery is allowed
+         *                   to START
          * @return builder
-         * @throws IllegalArgumentException
-         *             if timeWindow is null
+         * @throws IllegalArgumentException if timeWindow is null
          */
         @SuppressWarnings("unchecked")
         public B setDeliveryTimeWindow(TimeWindow timeWindow) {
@@ -321,12 +309,12 @@ protected void createActivities(JobBuilder<?, ?> builder) {
 
     public PickupShipmentDEPRECATED getPickupActivity() {
         return (PickupShipmentDEPRECATED) getActivityList().findByType(PickupShipmentDEPRECATED.NAME)
-                        .get();
+            .get();
     }
 
     public DeliverShipmentDEPRECATED getDeliveryActivity() {
         return (DeliverShipmentDEPRECATED) getActivityList().findByType(DeliverShipmentDEPRECATED.NAME)
-                        .get();
+            .get();
     }
 
     // =================== DEPRECATED GETTERS
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/misc/JobInsertionContext.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/misc/JobInsertionContext.java
index eadd4dd9d..1beea7983 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/misc/JobInsertionContext.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/misc/JobInsertionContext.java
@@ -17,15 +17,15 @@
  */
 package com.graphhopper.jsprit.core.problem.misc;
 
-import java.util.ArrayList;
-import java.util.List;
-
 import com.graphhopper.jsprit.core.problem.driver.Driver;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 
+import java.util.ArrayList;
+import java.util.List;
+
 /**
  * Provides context information about a particular job insertion.
  */
@@ -134,11 +134,11 @@ public ActivityContext getRelatedActivityContext() {
         return this.relatedActivityContext;
     }
 
-    public void setActivityContext(ActivityContext activityContext){
+    public void setActivityContext(ActivityContext activityContext) {
         this.activityContext = activityContext;
     }
 
-    public ActivityContext getActivityContext(){
+    public ActivityContext getActivityContext() {
         return this.activityContext;
     }
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/VehicleRoutingProblemSolution.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/VehicleRoutingProblemSolution.java
index 598f5a48c..ba374d1d6 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/VehicleRoutingProblemSolution.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/VehicleRoutingProblemSolution.java
@@ -17,12 +17,12 @@
  */
 package com.graphhopper.jsprit.core.problem.solution;
 
-import java.util.ArrayList;
-import java.util.Collection;
-
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 
+import java.util.ArrayList;
+import java.util.Collection;
+
 
 /**
  * Contains the solution of a vehicle routing problem and its corresponding costs.
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/ReverseRouteActivityVisitor.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/ReverseRouteActivityVisitor.java
index 3686c0a25..8ea38eccd 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/ReverseRouteActivityVisitor.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/ReverseRouteActivityVisitor.java
@@ -17,13 +17,13 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route;
 
+import com.graphhopper.jsprit.core.problem.solution.route.activity.ReverseActivityVisitor;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
+
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Iterator;
 
-import com.graphhopper.jsprit.core.problem.solution.route.activity.ReverseActivityVisitor;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-
 
 public class ReverseRouteActivityVisitor implements RouteVisitor {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/RouteActivityVisitor.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/RouteActivityVisitor.java
index 959923160..f03aa9342 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/RouteActivityVisitor.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/RouteActivityVisitor.java
@@ -17,12 +17,12 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route;
 
-import java.util.ArrayList;
-import java.util.Collection;
-
 import com.graphhopper.jsprit.core.problem.solution.route.activity.ActivityVisitor;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 
+import java.util.ArrayList;
+import java.util.Collection;
+
 
 public class RouteActivityVisitor implements RouteVisitor {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRoute.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRoute.java
index 0f8334c86..777407cc9 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRoute.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRoute.java
@@ -17,31 +17,17 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route;
 
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-
 import com.graphhopper.jsprit.core.problem.JobActivityFactory;
 import com.graphhopper.jsprit.core.problem.SimpleJobActivityFactory;
 import com.graphhopper.jsprit.core.problem.driver.Driver;
 import com.graphhopper.jsprit.core.problem.driver.DriverImpl;
-import com.graphhopper.jsprit.core.problem.job.Break;
-import com.graphhopper.jsprit.core.problem.job.Delivery;
-import com.graphhopper.jsprit.core.problem.job.Pickup;
-import com.graphhopper.jsprit.core.problem.job.Service;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.End;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.Start;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivities;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
+import com.graphhopper.jsprit.core.problem.job.*;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.*;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 
+import java.util.*;
+
 /**
  * Contains the tour, i.e. a number of activities, a vehicle servicing the tour and a driver.
  *
@@ -188,7 +174,7 @@ public Builder setDepartureTime(double departureTime) {
          * @throws IllegalArgumentException if service is null
          */
         public Builder addService(Service service) {
-            return addService(service,service.getTimeWindow());
+            return addService(service, service.getTimeWindow());
         }
 
         public Builder addService(Service service, TimeWindow timeWindow) {
@@ -214,7 +200,7 @@ public Builder addBreak(Break currentbreak, TimeWindow timeWindow) {
             if (currentbreak == null) {
                 throw new IllegalArgumentException("break must not be null");
             }
-            return addService(currentbreak,timeWindow);
+            return addService(currentbreak, timeWindow);
         }
 
         /**
@@ -234,7 +220,7 @@ public Builder addPickup(Pickup pickup, TimeWindow timeWindow) {
             if (pickup == null) {
                 throw new IllegalArgumentException("pickup must not be null");
             }
-            return addService(pickup,timeWindow);
+            return addService(pickup, timeWindow);
         }
 
         /**
@@ -254,7 +240,7 @@ public Builder addDelivery(Delivery delivery, TimeWindow timeWindow) {
             if (delivery == null) {
                 throw new IllegalArgumentException("delivery must not be null");
             }
-            return addService(delivery,timeWindow);
+            return addService(delivery, timeWindow);
         }
 
         /**
@@ -290,7 +276,7 @@ public Builder addPickup(Shipment shipment, TimeWindow pickupTimeWindow) {
          * @throws IllegalArgumentException if specified shipment has not been picked up yet (i.e. method addPickup(shipment) has not been called yet).
          */
         public Builder addDelivery(Shipment shipment) {
-            return addDelivery(shipment,shipment.getDeliveryTimeWindow());
+            return addDelivery(shipment, shipment.getDeliveryTimeWindow());
         }
 
         public Builder addDelivery(Shipment shipment, TimeWindow deliveryTimeWindow) {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/AbstractActivityNEW.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/AbstractActivityNEW.java
index 4e2e66ac8..69434aa51 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/AbstractActivityNEW.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/AbstractActivityNEW.java
@@ -1,13 +1,12 @@
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
 
+import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.Location;
 
 import java.lang.reflect.Constructor;
 import java.lang.reflect.InvocationTargetException;
 
-import com.graphhopper.jsprit.core.problem.Capacity;
-import com.graphhopper.jsprit.core.problem.Location;
-
 public abstract class AbstractActivityNEW implements TourActivity {
 
     private int index;
@@ -111,9 +110,9 @@ public Location getLocation() {
     @Override
     public String toString() {
         return "[name=" + getName() + "][locationId=" + getLocation().getId()
-                        + "][size=" + getSize().toString()
-                        + "][twStart=" + Activities.round(getTheoreticalEarliestOperationStartTime())
-                        + "][twEnd=" + Activities.round(getTheoreticalLatestOperationStartTime()) + "]";
+            + "][size=" + getSize().toString()
+            + "][twStart=" + Activities.round(getTheoreticalEarliestOperationStartTime())
+            + "][twEnd=" + Activities.round(getTheoreticalLatestOperationStartTime()) + "]";
     }
 
 
@@ -125,10 +124,10 @@ public TourActivity duplicate() {
             Constructor<? extends AbstractActivityNEW> constructor = getClass().getConstructor(getClass());
             return constructor.newInstance(this);
         } catch (NoSuchMethodException | SecurityException | InstantiationException | IllegalAccessException | IllegalArgumentException
-                        | InvocationTargetException e) {
+            | InvocationTargetException e) {
             System.out.println(this.getClass().getCanonicalName() + " : " + this);
             throw new IllegalStateException(e);
         }
     }
 
-}
\ No newline at end of file
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ActivityStartsAsSoonAsTimeWindowOpens.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ActivityStartsAsSoonAsTimeWindowOpens.java
index b54e6781c..b56a986ba 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ActivityStartsAsSoonAsTimeWindowOpens.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ActivityStartsAsSoonAsTimeWindowOpens.java
@@ -25,7 +25,7 @@
 
     @Override
     public double getActivityStartTime(TourActivity activity, double arrivalTime) {
-        return Math.max(activity.getTheoreticalEarliestOperationStartTime(),arrivalTime);
+        return Math.max(activity.getTheoreticalEarliestOperationStartTime(), arrivalTime);
     }
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivity.java
index 299a5aaad..314606809 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivity.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivity.java
@@ -17,19 +17,19 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import java.util.Collection;
-
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.job.AbstractJob;
 import com.graphhopper.jsprit.core.problem.job.Break;
 import com.graphhopper.jsprit.core.problem.job.Break.Builder;
 
+import java.util.Collection;
+
 public class BreakActivity extends InternalJobActivity {
 
     public static BreakActivity newInstance(Break aBreak, Builder builder) {
         return new BreakActivity(aBreak, "break", builder.getLocation(), builder.getServiceTime(),
-                        builder.getCapacity(), builder.getTimeWindows().getTimeWindows());
+            builder.getCapacity(), builder.getTimeWindows().getTimeWindows());
     }
 
     // protected BreakActivity(Break aBreak) {
@@ -42,7 +42,7 @@ public BreakActivity(BreakActivity breakActivity) {
     }
 
     private BreakActivity(AbstractJob job, String name, Location location, double operationTime,
-                    Capacity capacity, Collection<TimeWindow> timeWindows) {
+                          Capacity capacity, Collection<TimeWindow> timeWindows) {
         super(job, name, location, operationTime, capacity, timeWindows);
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverServiceDEPRECATED.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverServiceDEPRECATED.java
index 2e7e08e26..09e36a8fa 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverServiceDEPRECATED.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverServiceDEPRECATED.java
@@ -17,7 +17,6 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.job.Delivery;
 import com.graphhopper.jsprit.core.problem.job.Service;
 import com.graphhopper.jsprit.core.problem.job.Service.BuilderBase;
@@ -26,14 +25,14 @@
 
     public DeliverServiceDEPRECATED(Service service, BuilderBase<? extends Service, ?> builder) {
         super(service, builder.getType(), builder.getLocation(),
-                        builder.getServiceTime(),
-                        builder.getCapacity().invert(),
-                        builder.getTimeWindows().getTimeWindows());
+            builder.getServiceTime(),
+            builder.getCapacity().invert(),
+            builder.getTimeWindows().getTimeWindows());
     }
 
     public DeliverServiceDEPRECATED(Delivery delivery) {
         super(delivery, delivery.getType(), delivery.getLocation(), delivery.getServiceDuration(),
-                        delivery.getSize().invert(), delivery.getServiceTimeWindows());
+            delivery.getSize().invert(), delivery.getServiceTimeWindows());
     }
 
     public DeliverServiceDEPRECATED(DeliverServiceDEPRECATED sourceActivity) {
@@ -41,7 +40,6 @@ public DeliverServiceDEPRECATED(DeliverServiceDEPRECATED sourceActivity) {
     }
 
 
-
     @Override
     public Delivery getJob() {
         return (Delivery) super.getJob();
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverShipmentDEPRECATED.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverShipmentDEPRECATED.java
index b000ae75b..99263c238 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverShipmentDEPRECATED.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverShipmentDEPRECATED.java
@@ -25,10 +25,10 @@
     public static final String NAME = "deliverShipment";
 
     public DeliverShipmentDEPRECATED(Shipment shipment,
-                    BuilderBase<? extends Shipment, ?> builder) {
+                                     BuilderBase<? extends Shipment, ?> builder) {
         super(shipment, NAME, builder.getDeliveryLocation(), builder.getDeliveryServiceTime(),
-                        builder.getCapacity().invert(),
-                        builder.getDeliveryTimeWindows().getTimeWindows());
+            builder.getCapacity().invert(),
+            builder.getDeliveryTimeWindows().getTimeWindows());
     }
 
     public DeliverShipmentDEPRECATED(DeliverShipmentDEPRECATED sourceActivity) {
@@ -39,8 +39,8 @@ public DeliverShipmentDEPRECATED(DeliverShipmentDEPRECATED sourceActivity) {
     @Deprecated
     public DeliverShipmentDEPRECATED(Shipment s) {
         super(s, NAME, s.getDeliveryLocation(), s.getDeliveryServiceTime(),
-                        s.getSize().invert(),
-                        s.getDeliveryTimeWindows());
+            s.getSize().invert(),
+            s.getDeliveryTimeWindows());
     }
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliveryActivityNEW.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliveryActivityNEW.java
index 41f0c7db5..b15910d1c 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliveryActivityNEW.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliveryActivityNEW.java
@@ -17,17 +17,17 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import java.util.Collection;
-
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.job.AbstractJob;
 
+import java.util.Collection;
+
 public class DeliveryActivityNEW extends JobActivity {
 
 
     public DeliveryActivityNEW(AbstractJob job, String name, Location location,
-                    double operationTime, Capacity capacity, Collection<TimeWindow> timeWindows) {
+                               double operationTime, Capacity capacity, Collection<TimeWindow> timeWindows) {
         super(job, name, location, operationTime, capacity, timeWindows);
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/End.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/End.java
index 07d0672a2..4d4289932 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/End.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/End.java
@@ -76,8 +76,8 @@ public double getOperationTime() {
     @Override
     public String toString() {
         return "[type=" + getName() + "][location=" + location
-                + "][twStart=" + Activities.round(getTheoreticalEarliestOperationStartTime())
-                + "][twEnd=" + Activities.round(getTheoreticalLatestOperationStartTime()) + "]";
+            + "][twStart=" + Activities.round(getTheoreticalEarliestOperationStartTime())
+            + "][twEnd=" + Activities.round(getTheoreticalLatestOperationStartTime()) + "]";
     }
 
 }
@@ -85,80 +85,80 @@ public String toString() {
 
 /*
  * package com.graphhopper.jsprit.core.problem.solution.route.activity;
- * 
+ *
  * import com.graphhopper.jsprit.core.problem.Capacity; import com.graphhopper.jsprit.core.problem.AbstractActivityNEW;
  * import com.graphhopper.jsprit.core.problem.Location;
- * 
+ *
  * public final class End extends AbstractActivityNEW {
- * 
+ *
  * public static End newInstance(String locationId, double earliestArrival, double latestArrival) { return new
  * End(locationId, earliestArrival, latestArrival); }
- * 
+ *
  * public static End copyOf(End end) { return new End(end); }
- * 
+ *
  * private final static Capacity capacity = Capacity.Builder.newInstance().build();
- * 
- * 
+ *
+ *
  * private double endTime = -1;
- * 
- * 
+ *
+ *
  * private double theoretical_earliestOperationStartTime;
- * 
+ *
  * private double theoretical_latestOperationStartTime;
- * 
+ *
  * private double arrTime;
- * 
+ *
  * private Location location;
- * 
+ *
  * @Override public void setTheoreticalEarliestOperationStartTime(double theoreticalEarliestOperationStartTime) {
  * theoretical_earliestOperationStartTime = theoreticalEarliestOperationStartTime; }
- * 
+ *
  * @Override public void setTheoreticalLatestOperationStartTime(double theoreticalLatestOperationStartTime) {
  * theoretical_latestOperationStartTime = theoreticalLatestOperationStartTime; }
- * 
+ *
  * public End(Location location, double theoreticalStart, double theoreticalEnd) { super(); this.location = location;
  * theoretical_earliestOperationStartTime = theoreticalStart; theoretical_latestOperationStartTime = theoreticalEnd;
  * endTime = theoreticalEnd; setIndex(-2); }
- * 
+ *
  * public End(String locationId, double theoreticalStart, double theoreticalEnd) { super(); if (locationId != null) {
  * location = Location.Builder.newInstance().setId(locationId).build(); } theoretical_earliestOperationStartTime =
  * theoreticalStart; theoretical_latestOperationStartTime = theoreticalEnd; endTime = theoreticalEnd; setIndex(-2); }
- * 
+ *
  * public End(End end) { location = end.getLocation(); // this.locationId = end.getLocation().getId();
  * theoretical_earliestOperationStartTime = end.getTheoreticalEarliestOperationStartTime();
  * theoretical_latestOperationStartTime = end.getTheoreticalLatestOperationStartTime(); arrTime = end.getArrTime();
  * endTime = end.getEndTime(); setIndex(-2); }
- * 
+ *
  * @Override public double getTheoreticalEarliestOperationStartTime() { return theoretical_earliestOperationStartTime; }
- * 
+ *
  * @Override public double getTheoreticalLatestOperationStartTime() { return theoretical_latestOperationStartTime; }
- * 
+ *
  * @Override public double getEndTime() { return endTime; }
- * 
+ *
  * @Override public void setEndTime(double endTime) { this.endTime = endTime; }
- * 
+ *
  * public void setLocation(Location location) { this.location = location; }
- * 
+ *
  * @Override public Location getLocation() { return location; }
- * 
+ *
  * @Override public double getOperationTime() { return 0.0; }
- * 
- * 
+ *
+ *
  * @Override public String toString() { return "[type=" + getName() + "][location=" + location + "][twStart=" +
  * Activities.round(theoretical_earliestOperationStartTime) + "][twEnd=" +
  * Activities.round(theoretical_latestOperationStartTime) + "]"; }
- * 
+ *
  * @Override public String getName() { return "end"; }
- * 
+ *
  * @Override public double getArrTime() { return arrTime; }
- * 
+ *
  * @Override public void setArrTime(double arrTime) { this.arrTime = arrTime;
- * 
+ *
  * }
- * 
+ *
  * @Override public TourActivity duplicate() { return new End(this); }
- * 
+ *
  * @Override public Capacity getSize() { return capacity; }
- * 
+ *
  * }
- */
\ No newline at end of file
+ */
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ExchangeActivityNEW.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ExchangeActivityNEW.java
index 20ea84995..485dec39d 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ExchangeActivityNEW.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ExchangeActivityNEW.java
@@ -17,16 +17,16 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import java.util.Collection;
-
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.job.AbstractJob;
 
+import java.util.Collection;
+
 public class ExchangeActivityNEW extends JobActivity {
 
     public ExchangeActivityNEW(AbstractJob job, String name, Location location,
-                    double operationTime, Capacity capacity, Collection<TimeWindow> timeWindows) {
+                               double operationTime, Capacity capacity, Collection<TimeWindow> timeWindows) {
         super(job, name, location, operationTime, capacity, timeWindows);
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/InternalActivity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/InternalActivity.java
index 321bd46ee..fc300c790 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/InternalActivity.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/InternalActivity.java
@@ -7,7 +7,6 @@
  * Common ancesstor for non-job-based, internal activities
  *
  * @author balage
- *
  */
 public abstract class InternalActivity extends AbstractActivityNEW implements InternalActivityMarker {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/InternalJobActivity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/InternalJobActivity.java
index 4219594e3..39b088ddd 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/InternalJobActivity.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/InternalJobActivity.java
@@ -1,21 +1,20 @@
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import java.util.Collection;
-
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.job.AbstractJob;
 
+import java.util.Collection;
+
 /**
  * Common ancesstor for job-based, internal activities
  *
  * @author balage
- *
  */
 public abstract class InternalJobActivity extends JobActivity implements InternalActivityMarker {
 
     public InternalJobActivity(AbstractJob job, String name, Location location,
-                    double operationTime, Capacity capacity, Collection<TimeWindow> timeWindows) {
+                               double operationTime, Capacity capacity, Collection<TimeWindow> timeWindows) {
         super(job, name, location, operationTime, capacity, timeWindows);
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/JobActivity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/JobActivity.java
index 83a0eaa19..391936852 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/JobActivity.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/JobActivity.java
@@ -1,13 +1,13 @@
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import java.util.Collection;
-import java.util.HashSet;
-
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.job.AbstractJob;
 import com.graphhopper.jsprit.core.problem.job.Job;
 
+import java.util.Collection;
+import java.util.HashSet;
+
 /**
  * Basic interface of job-activies.
  * <p>
@@ -27,7 +27,7 @@
     private int orderNumber;
 
     public JobActivity(AbstractJob job, String type, Location location, double operationTime,
-                    Capacity capacity, Collection<TimeWindow> timeWindows) {
+                       Capacity capacity, Collection<TimeWindow> timeWindows) {
         super(type, location, capacity);
         this.job = job;
         this.operationTime = operationTime;
@@ -106,4 +106,4 @@ public void setOrderNumber(int orderNumber) {
         this.orderNumber = orderNumber;
     }
 
-}
\ No newline at end of file
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivityNEW.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivityNEW.java
index 8cc3a92f7..81b99c22a 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivityNEW.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivityNEW.java
@@ -17,16 +17,16 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import java.util.Collection;
-
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.job.AbstractJob;
 
+import java.util.Collection;
+
 public class PickupActivityNEW extends JobActivity {
 
     public PickupActivityNEW(AbstractJob job, String name, Location location, double operationTime,
-                    Capacity capacity, Collection<TimeWindow> timeWindows) {
+                             Capacity capacity, Collection<TimeWindow> timeWindows) {
         super(job, name, location, operationTime, capacity, timeWindows);
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupServiceDEPRECATED.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupServiceDEPRECATED.java
index eeeec1bc9..05c51f487 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupServiceDEPRECATED.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupServiceDEPRECATED.java
@@ -22,15 +22,14 @@
 public final class PickupServiceDEPRECATED extends PickupActivityNEW {
 
     public PickupServiceDEPRECATED(Service service,
-                    Service.BuilderBase<? extends Service, ?> builder) {
+                                   Service.BuilderBase<? extends Service, ?> builder) {
         super(service, builder.getType(), builder.getLocation(),
-                        builder.getServiceTime(),
-                        builder.getCapacity(),
-                        builder.getTimeWindows().getTimeWindows());
+            builder.getServiceTime(),
+            builder.getCapacity(),
+            builder.getTimeWindows().getTimeWindows());
     }
 
 
-
     public PickupServiceDEPRECATED(PickupServiceDEPRECATED sourceActivity) {
         super(sourceActivity);
     }
@@ -38,11 +37,10 @@ public PickupServiceDEPRECATED(PickupServiceDEPRECATED sourceActivity) {
     @Deprecated
     public PickupServiceDEPRECATED(Service service) {
         super(service, service.getType(), service.getLocation(), service.getServiceDuration(),
-                        service.getSize(), service.getServiceTimeWindows());
+            service.getSize(), service.getServiceTimeWindows());
     }
 
 
-
     @Override
     public Service getJob() {
         return (Service) super.getJob();
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupShipmentDEPRECATED.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupShipmentDEPRECATED.java
index 4e66b1a54..ce0a7d1f0 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupShipmentDEPRECATED.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupShipmentDEPRECATED.java
@@ -20,14 +20,14 @@
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.job.Shipment.BuilderBase;
 
-public final class PickupShipmentDEPRECATED extends PickupActivityNEW{
+public final class PickupShipmentDEPRECATED extends PickupActivityNEW {
 
     public static final String NAME = "pickupShipment";
 
     public PickupShipmentDEPRECATED(Shipment shipment, BuilderBase<? extends Shipment, ?> builder) {
         super(shipment, NAME, builder.getPickupLocation(),
-                        builder.getPickupServiceTime(), builder.getCapacity(),
-                        builder.getPickupTimeWindows().getTimeWindows());
+            builder.getPickupServiceTime(), builder.getCapacity(),
+            builder.getPickupTimeWindows().getTimeWindows());
     }
 
     public PickupShipmentDEPRECATED(PickupShipmentDEPRECATED sourceActivity) {
@@ -38,7 +38,7 @@ public PickupShipmentDEPRECATED(PickupShipmentDEPRECATED sourceActivity) {
     @Deprecated
     public PickupShipmentDEPRECATED(Shipment s) {
         super(s, NAME, s.getPickupLocation(), s.getPickupServiceTime(), s.getSize(),
-                        s.getPickupTimeWindows());
+            s.getPickupTimeWindows());
     }
 
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityNEW.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityNEW.java
index b5be322bb..ea5b78738 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityNEW.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityNEW.java
@@ -17,17 +17,17 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import java.util.Collection;
-
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.job.AbstractJob;
 import com.graphhopper.jsprit.core.problem.job.Service;
 
+import java.util.Collection;
+
 public class ServiceActivityNEW extends JobActivity {
 
     public ServiceActivityNEW(AbstractJob job, String name, Location location, double operationTime,
-                    Capacity capacity, Collection<TimeWindow> timeWindows) {
+                              Capacity capacity, Collection<TimeWindow> timeWindows) {
         super(job, name, location, operationTime, capacity, timeWindows);
     }
 
@@ -38,7 +38,7 @@ public ServiceActivityNEW(ServiceActivityNEW sourceActivity) {
     // NOTE: Only for testing purposes
     public static ServiceActivityNEW newInstance(Service service) {
         return new ServiceActivityNEW(service, service.getName(), service.getLocation(),
-                        service.getServiceDuration(), service.getSize(), service.getTimeWindows());
+            service.getServiceDuration(), service.getSize(), service.getTimeWindows());
     }
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/Start.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/Start.java
index 71e5a5dbe..f368382a9 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/Start.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/Start.java
@@ -58,8 +58,8 @@ public double getOperationTime() {
     @Override
     public String toString() {
         return "[type=" + getName() + "][location=" + location
-                + "][twStart=" + Activities.round(getTheoreticalEarliestOperationStartTime())
-                + "][twEnd=" + Activities.round(getTheoreticalLatestOperationStartTime()) + "]";
+            + "][twStart=" + Activities.round(getTheoreticalEarliestOperationStartTime())
+            + "][twEnd=" + Activities.round(getTheoreticalLatestOperationStartTime()) + "]";
     }
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TimeWindow.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TimeWindow.java
index f0dc03e38..6f7fafb02 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TimeWindow.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TimeWindow.java
@@ -118,7 +118,7 @@ public boolean equals(Object obj) {
             return false;
         }
         if (Double.doubleToLongBits(start) != Double
-                        .doubleToLongBits(other.start)) {
+            .doubleToLongBits(other.start)) {
             return false;
         }
         return true;
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TimeWindowsImpl.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TimeWindowsImpl.java
index f83e83e1e..f913cfa9a 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TimeWindowsImpl.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TimeWindowsImpl.java
@@ -50,15 +50,15 @@ public static TimeWindowsImpl anyTime() {
 
     private Collection<TimeWindow> timeWindows = new ArrayList<TimeWindow>();
 
-    public void add(TimeWindow timeWindow){
-        for(TimeWindow tw : timeWindows){
-            if(timeWindow.getStart() > tw.getStart() && timeWindow.getStart() < tw.getEnd()){
+    public void add(TimeWindow timeWindow) {
+        for (TimeWindow tw : timeWindows) {
+            if (timeWindow.getStart() > tw.getStart() && timeWindow.getStart() < tw.getEnd()) {
                 throw new IllegalArgumentException("time-windows cannot overlap each other. overlap: " + tw + ", " + timeWindow);
             }
-            if(timeWindow.getEnd() > tw.getStart() && timeWindow.getEnd() < tw.getEnd()){
+            if (timeWindow.getEnd() > tw.getStart() && timeWindow.getEnd() < tw.getEnd()) {
                 throw new IllegalArgumentException("time-windows cannot overlap each other. overlap: " + tw + ", " + timeWindow);
             }
-            if(timeWindow.getStart() <= tw.getStart() && timeWindow.getEnd() >= tw.getEnd()){
+            if (timeWindow.getStart() <= tw.getStart() && timeWindow.getEnd() >= tw.getEnd()) {
                 throw new IllegalArgumentException("time-windows cannot overlap each other. overlap: " + tw + ", " + timeWindow);
             }
         }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourActivities.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourActivities.java
index a6c06d1ce..68ce8f583 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourActivities.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourActivities.java
@@ -17,16 +17,10 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Set;
-
 import com.graphhopper.jsprit.core.problem.job.Job;
 
+import java.util.*;
+
 
 /**
  * @author stefan schroeder
@@ -151,7 +145,6 @@ public boolean removeJob(Job job) {
     }
 
 
-
     /**
      * Removes activity from this activity sequence. Removes its corresponding job as well, if there are no other activities
      * related to this job.
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourActivity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourActivity.java
index 718c1b147..82e05fdff 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourActivity.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourActivity.java
@@ -30,9 +30,9 @@
  */
 public interface TourActivity extends HasIndex {
 
-	public void setTheoreticalEarliestOperationStartTime(double earliest);
+    public void setTheoreticalEarliestOperationStartTime(double earliest);
 
-	public void setTheoreticalLatestOperationStartTime(double latest);
+    public void setTheoreticalLatestOperationStartTime(double latest);
 
     /**
      * Returns the name of this activity.
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/FiniteFleetManagerFactory.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/FiniteFleetManagerFactory.java
index 66b13808c..c9c2fe73a 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/FiniteFleetManagerFactory.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/FiniteFleetManagerFactory.java
@@ -17,11 +17,11 @@
  */
 package com.graphhopper.jsprit.core.problem.vehicle;
 
+import com.graphhopper.jsprit.core.util.RandomNumberGeneration;
+
 import java.util.Collection;
 import java.util.Random;
 
-import com.graphhopper.jsprit.core.util.RandomNumberGeneration;
-
 /**
  * Factory that creates a finite fleetmanager.
  *
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/InfiniteVehicles.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/InfiniteVehicles.java
index 867c6aff8..541c8a1e9 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/InfiniteVehicles.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/InfiniteVehicles.java
@@ -18,17 +18,14 @@
 package com.graphhopper.jsprit.core.problem.vehicle;
 
 
-
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.HashMap;
 import java.util.Map;
 
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-
 
 class InfiniteVehicles implements VehicleFleetManager {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleFleetManagerImpl.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleFleetManagerImpl.java
index 5d2bcb43d..c689ff9f2 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleFleetManagerImpl.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleFleetManagerImpl.java
@@ -17,14 +17,14 @@
  */
 package com.graphhopper.jsprit.core.problem.vehicle;
 
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
 import java.util.Random;
 
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 
 class VehicleFleetManagerImpl implements VehicleFleetManager {
 
@@ -55,12 +55,12 @@ void remove(Vehicle vehicle) {
         }
 
         Vehicle getVehicle() {
-            if(index >= vehicleList.size()) index = 0;
+            if (index >= vehicleList.size()) index = 0;
             Vehicle vehicle = vehicleList.get(index);
             return vehicle;
         }
 
-        void incIndex(){
+        void incIndex() {
             index++;
         }
 
@@ -94,9 +94,9 @@ void setRandom(Random random) {
         this.random = random;
     }
 
-    void init(){
+    void init() {
         initializeVehicleTypes();
-        logger.debug("initialise {}",this);
+        logger.debug("initialise {}", this);
     }
 
     @Override
@@ -106,18 +106,18 @@ public String toString() {
 
     private void initializeVehicleTypes() {
         int maxTypeIndex = 0;
-        for(Vehicle v : vehicles){
-            if(v.getVehicleTypeIdentifier().getIndex() > maxTypeIndex){
+        for (Vehicle v : vehicles) {
+            if (v.getVehicleTypeIdentifier().getIndex() > maxTypeIndex) {
                 maxTypeIndex = v.getVehicleTypeIdentifier().getIndex();
             }
         }
-        vehicleTypes = new TypeContainer[maxTypeIndex+1];
-        for(int i=0;i< vehicleTypes.length;i++){
+        vehicleTypes = new TypeContainer[maxTypeIndex + 1];
+        for (int i = 0; i < vehicleTypes.length; i++) {
             TypeContainer typeContainer = new TypeContainer();
             vehicleTypes[i] = typeContainer;
         }
         for (Vehicle v : vehicles) {
-            vehicleArr[v.getIndex()]=v;
+            vehicleArr[v.getIndex()] = v;
             addVehicle(v);
         }
     }
@@ -143,8 +143,8 @@ private void removeVehicle(Vehicle v) {
     @Override
     public Collection<Vehicle> getAvailableVehicles() {
         List<Vehicle> vehicles = new ArrayList<Vehicle>();
-        for(int i=0;i< vehicleTypes.length;i++){
-            if(!vehicleTypes[i].isEmpty()){
+        for (int i = 0; i < vehicleTypes.length; i++) {
+            if (!vehicleTypes[i].isEmpty()) {
                 vehicles.add(vehicleTypes[i].getVehicle());
             }
         }
@@ -154,8 +154,8 @@ private void removeVehicle(Vehicle v) {
     @Override
     public Collection<Vehicle> getAvailableVehicles(Vehicle withoutThisType) {
         List<Vehicle> vehicles = new ArrayList<Vehicle>();
-        for(int i=0;i< vehicleTypes.length;i++){
-            if(!vehicleTypes[i].isEmpty() && i != withoutThisType.getVehicleTypeIdentifier().getIndex()){
+        for (int i = 0; i < vehicleTypes.length; i++) {
+            if (!vehicleTypes[i].isEmpty() && i != withoutThisType.getVehicleTypeIdentifier().getIndex()) {
                 vehicles.add(vehicleTypes[i].getVehicle());
             }
         }
@@ -165,7 +165,7 @@ private void removeVehicle(Vehicle v) {
 
     @Override
     public Vehicle getAvailableVehicle(VehicleTypeKey vehicleTypeIdentifier) {
-        if(!vehicleTypes[vehicleTypeIdentifier.getIndex()].isEmpty()){
+        if (!vehicleTypes[vehicleTypeIdentifier.getIndex()].isEmpty()) {
             return vehicleTypes[vehicleTypeIdentifier.getIndex()].getVehicle();
         }
         return null;
@@ -179,10 +179,9 @@ public void lock(Vehicle vehicle) {
         if (vehicles.isEmpty() || vehicle instanceof VehicleImpl.NoVehicle) {
             return;
         }
-        if(locked[vehicle.getIndex()]){
+        if (locked[vehicle.getIndex()]) {
             throw new IllegalStateException("cannot lock vehicle twice " + vehicle.getId());
-        }
-        else{
+        } else {
             locked[vehicle.getIndex()] = true;
             removeVehicle(vehicle);
         }
@@ -213,12 +212,12 @@ public boolean isLocked(Vehicle vehicle) {
      */
     @Override
     public void unlockAll() {
-        for(int i=0;i<vehicleArr.length;i++){
-            if(locked[i]){
+        for (int i = 0; i < vehicleArr.length; i++) {
+            if (locked[i]) {
                 unlock(vehicleArr[i]);
             }
         }
-        for(int i=0;i<vehicleTypes.length;i++){
+        for (int i = 0; i < vehicleTypes.length; i++) {
             vehicleTypes[i].incIndex();
         }
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleImpl.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleImpl.java
index b3f5813df..4d3657307 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleImpl.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleImpl.java
@@ -17,13 +17,12 @@
  */
 package com.graphhopper.jsprit.core.problem.vehicle;
 
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import com.graphhopper.jsprit.core.problem.AbstractVehicle;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.Skills;
 import com.graphhopper.jsprit.core.problem.job.Break;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 
 /**
@@ -227,7 +226,7 @@ public Builder addSkill(String skill) {
          *
          * @return vehicle
          * @throws IllegalArgumentException if both locationId and locationCoord is not set or (endLocationCoord!=null AND returnToDepot=false)
-         *                               or (endLocationId!=null AND returnToDepot=false)
+         *                                  or (endLocationId!=null AND returnToDepot=false)
          */
         public VehicleImpl build() {
             if (latestArrival < earliestStart)
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleTypeImpl.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleTypeImpl.java
index 108d8bc95..a97d8378c 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleTypeImpl.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleTypeImpl.java
@@ -144,8 +144,7 @@ private Builder(String id) {
          *
          * @param inMeterPerSeconds
          * @return this builder
-         * @throws IllegalArgumentException
-         *             if velocity is smaller than zero
+         * @throws IllegalArgumentException if velocity is smaller than zero
          */
         public VehicleTypeImpl.Builder setAverageVelocity(double inMeterPerSeconds) {
             if (inMeterPerSeconds < 0.0) {
@@ -163,8 +162,7 @@ private Builder(String id) {
          *
          * @param fixedCost
          * @return this builder
-         * @throws IllegalArgumentException
-         *             if fixedCost is smaller than zero
+         * @throws IllegalArgumentException if fixedCost is smaller than zero
          */
         public VehicleTypeImpl.Builder setFixedCost(double fixedCost) {
             if (fixedCost < 0.0) {
@@ -268,7 +266,7 @@ public VehicleTypeImpl build() {
          * @param dimVal
          * @return the builder
          * @throws IllegalArgumentException if dimVal < 0
-         * @throws IllegalArgumentException    if capacity dimension is already set
+         * @throws IllegalArgumentException if capacity dimension is already set
          */
         public Builder addCapacityDimension(int dimIndex, int dimVal) {
             if (dimVal < 0) {
@@ -276,8 +274,8 @@ public Builder addCapacityDimension(int dimIndex, int dimVal) {
             }
             if (capacityDimensions != null) {
                 throw new IllegalArgumentException("either build your dimension with build your dimensions with " +
-                                "addCapacityDimension(int dimIndex, int dimVal) or set the already built dimensions with .setCapacityDimensions(Capacity capacity)." +
-                                "You used both methods.");
+                    "addCapacityDimension(int dimIndex, int dimVal) or set the already built dimensions with .setCapacityDimensions(Capacity capacity)." +
+                    "You used both methods.");
             }
             dimensionAdded = true;
             capacityBuilder.addDimension(dimIndex, dimVal);
@@ -298,8 +296,8 @@ public Builder addCapacityDimension(int dimIndex, int dimVal) {
         public Builder setCapacityDimensions(Capacity capacity) {
             if (dimensionAdded) {
                 throw new IllegalArgumentException("either build your dimension with build your dimensions with " +
-                                "addCapacityDimension(int dimIndex, int dimVal) or set the already built dimensions with .setCapacityDimensions(Capacity capacity)." +
-                                "You used both methods.");
+                    "addCapacityDimension(int dimIndex, int dimVal) or set the already built dimensions with .setCapacityDimensions(Capacity capacity)." +
+                    "You used both methods.");
             }
             capacityDimensions = capacity;
             return this;
@@ -316,7 +314,7 @@ public int hashCode() {
         final int prime = 31;
         int result = 1;
         result = prime * result
-                        + ((typeId == null) ? 0 : typeId.hashCode());
+            + ((typeId == null) ? 0 : typeId.hashCode());
         return result;
     }
 
@@ -393,8 +391,8 @@ public String getTypeId() {
     @Override
     public String toString() {
         return "[typeId=" + typeId + "]" +
-                        "[capacity=" + capacityDimensions + "]" +
-                        "[costs=" + vehicleCostParams + "]";
+            "[capacity=" + capacityDimensions + "]" +
+            "[costs=" + vehicleCostParams + "]";
     }
 
     @Override
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java
index ce6b7eb40..8d8b76b76 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java
@@ -17,17 +17,6 @@
  */
 package com.graphhopper.jsprit.core.reporting;
 
-import java.io.PrintWriter;
-import java.nio.CharBuffer;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.List;
-import java.util.Map;
-import java.util.function.Function;
-import java.util.regex.Pattern;
-import java.util.stream.Collectors;
-
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
@@ -36,6 +25,13 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 
+import java.io.PrintWriter;
+import java.nio.CharBuffer;
+import java.util.*;
+import java.util.function.Function;
+import java.util.regex.Pattern;
+import java.util.stream.Collectors;
+
 
 /**
  * Printer to print the details of a vehicle-routing-problem solution.
@@ -168,12 +164,12 @@ private static void printVerbose(PrintWriter out, VehicleRoutingProblem problem,
         int routeNu = 1;
 
         List<VehicleRoute> list = new ArrayList<VehicleRoute>(solution.getRoutes());
-        Collections.sort(list , new com.graphhopper.jsprit.core.util.VehicleIndexComparator());
+        Collections.sort(list, new com.graphhopper.jsprit.core.util.VehicleIndexComparator());
         for (VehicleRoute route : list) {
             out.format("+---------+----------------------+-----------------------+-----------------+-----------------+-----------------+-----------------+%n");
             double costs = 0;
             out.format(leftAlgin, routeNu, getVehicleString(route), route.getStart().getName(), "-", "undef", Math.round(route.getStart().getEndTime()),
-                            Math.round(costs));
+                Math.round(costs));
             TourActivity prevAct = route.getStart();
             for (TourActivity act : route.getActivities()) {
                 String jobId;
@@ -183,22 +179,22 @@ private static void printVerbose(PrintWriter out, VehicleRoutingProblem problem,
                     jobId = "-";
                 }
                 String type = (act instanceof AbstractActivityNEW)
-                                ? ((AbstractActivityNEW) act).getType() : act.getName();
+                    ? ((AbstractActivityNEW) act).getType() : act.getName();
                 double c = problem.getTransportCosts().getTransportCost(prevAct.getLocation(), act.getLocation(), prevAct.getEndTime(), route.getDriver(),
-                                route.getVehicle());
+                    route.getVehicle());
                 c += problem.getActivityCosts().getActivityCost(act, act.getArrTime(), route.getDriver(), route.getVehicle());
                 costs += c;
                 out.format(leftAlgin, routeNu, getVehicleString(route), type, jobId,
-                                Math.round(act.getArrTime()),
-                                Math.round(act.getEndTime()), Math.round(costs));
+                    Math.round(act.getArrTime()),
+                    Math.round(act.getEndTime()), Math.round(costs));
                 prevAct = act;
             }
             double c = problem.getTransportCosts().getTransportCost(prevAct.getLocation(), route.getEnd().getLocation(), prevAct.getEndTime(),
-                            route.getDriver(), route.getVehicle());
+                route.getDriver(), route.getVehicle());
             c += problem.getActivityCosts().getActivityCost(route.getEnd(), route.getEnd().getArrTime(), route.getDriver(), route.getVehicle());
             costs += c;
             out.format(leftAlgin, routeNu, getVehicleString(route), route.getEnd().getName(), "-", Math.round(route.getEnd().getArrTime()), "undef",
-                            Math.round(costs));
+                Math.round(costs));
             routeNu++;
         }
         out.format("+--------------------------------------------------------------------------------------------------------------------------------+%n");
@@ -220,8 +216,8 @@ private static String getVehicleString(VehicleRoute route) {
 
     private static Map<Class<? extends Job>, Long> getNuOfJobs(VehicleRoutingProblem problem) {
         return problem.getJobs().values().stream()
-                        .map(j -> (Class<? extends Job>) j.getClass())
-                        .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));
+            .map(j -> (Class<? extends Job>) j.getClass())
+            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));
     }
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/ActivityTimeTracker.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/ActivityTimeTracker.java
index 4c7f20fc4..c41eea4d2 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/ActivityTimeTracker.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/ActivityTimeTracker.java
@@ -94,7 +94,7 @@ public void visit(TourActivity activity) {
             operationStartTime = actArrTime;
         } else operationStartTime = actArrTime;
 
-        double operationEndTime = operationStartTime + activityCosts.getActivityDuration(activity,actArrTime,route.getDriver(),route.getVehicle());
+        double operationEndTime = operationStartTime + activityCosts.getActivityDuration(activity, actArrTime, route.getDriver(), route.getVehicle());
 
         actEndTime = operationEndTime;
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/CalculationUtils.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/CalculationUtils.java
index 9f0781bee..3dc9cc933 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/CalculationUtils.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/CalculationUtils.java
@@ -1,4 +1,3 @@
-
 /*
  * Licensed to GraphHopper GmbH under one or more contributor
  * license agreements. See the NOTICE file distributed with this work for
@@ -33,7 +32,7 @@
      * @return
      */
     @Deprecated
-    public static double getActivityEndTime(double actArrTime, TourActivity act){
-		return Math.max(actArrTime, act.getTheoreticalEarliestOperationStartTime()) + act.getOperationTime();
+    public static double getActivityEndTime(double actArrTime, TourActivity act) {
+        return Math.max(actArrTime, act.getTheoreticalEarliestOperationStartTime()) + act.getOperationTime();
     }
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/CrowFlyCosts.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/CrowFlyCosts.java
index 39921a99f..a263721e5 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/CrowFlyCosts.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/CrowFlyCosts.java
@@ -25,9 +25,8 @@
 
 /**
  * @author stefan schroeder
- *
  * @deprecated Use instead new {@linkplain DefaultCosts} with
- *             {@link EuclideanDistanceCalculator#getInstance()}
+ * {@link EuclideanDistanceCalculator#getInstance()}
  */
 @Deprecated
 public class CrowFlyCosts extends DefaultCosts {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/EuclideanCosts.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/EuclideanCosts.java
index 3d9dadf14..45b0ceea0 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/EuclideanCosts.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/EuclideanCosts.java
@@ -25,9 +25,8 @@
 
 /**
  * @author stefan schroeder
- *
  * @deprecated Use instead new {@linkplain DefaultCosts} with
- *             {@link EuclideanDistanceCalculator#getInstance()}
+ * {@link EuclideanDistanceCalculator#getInstance()}
  */
 
 @Deprecated
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/FastVehicleRoutingTransportCostsMatrix.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/FastVehicleRoutingTransportCostsMatrix.java
index 80742c4c1..3cb0e4d4d 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/FastVehicleRoutingTransportCostsMatrix.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/FastVehicleRoutingTransportCostsMatrix.java
@@ -94,11 +94,12 @@ public Builder addTransportTime(int fromIndex, int toIndex, double time) {
             return this;
         }
 
-        public Builder addTransportTimeAndDistance(int fromIndex, int toIndex, double time, double distance){
+        public Builder addTransportTimeAndDistance(int fromIndex, int toIndex, double time, double distance) {
             addTransportTime(fromIndex, toIndex, time);
-            addTransportDistance(fromIndex,toIndex,distance);
+            addTransportDistance(fromIndex, toIndex, distance);
             return this;
         }
+
         /**
          * Builds the matrix.
          *
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/GreatCircleCosts.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/GreatCircleCosts.java
index b0687a198..716459b1e 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/GreatCircleCosts.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/GreatCircleCosts.java
@@ -23,9 +23,8 @@
 
 /**
  * @author stefan schroeder
- *
  * @deprecated Use instead new {@linkplain DefaultCosts} with
- *             {@link ManhattanDistanceCalculator#getInstance()}
+ * {@link ManhattanDistanceCalculator#getInstance()}
  */
 @Deprecated
 public class GreatCircleCosts extends DefaultCosts {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/ManhattanCosts.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/ManhattanCosts.java
index c4ec63a29..065c3c430 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/ManhattanCosts.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/ManhattanCosts.java
@@ -22,9 +22,8 @@
 
 /**
  * @author stefan schroeder
- *
  * @deprecated Use instead new {@linkplain DefaultCosts} with
- *             {@link ManhattanDistanceCalculator#getInstance()}
+ * {@link ManhattanDistanceCalculator#getInstance()}
  */
 @Deprecated
 public class ManhattanCosts extends DefaultCosts {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/RandomUtils.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/RandomUtils.java
index 3eb52508e..facc97981 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/RandomUtils.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/RandomUtils.java
@@ -18,13 +18,13 @@
 
 package com.graphhopper.jsprit.core.util;
 
+import com.graphhopper.jsprit.core.problem.job.Job;
+import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+
 import java.util.Collection;
 import java.util.List;
 import java.util.Random;
 
-import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-
 /**
  * Created by schroeder on 14/01/15.
  */
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/Resource.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/Resource.java
index 2c0016d78..134f13545 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/Resource.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/Resource.java
@@ -18,7 +18,8 @@
 package com.graphhopper.jsprit.core.util;
 
 
-
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import java.io.File;
 import java.io.FileInputStream;
@@ -27,9 +28,6 @@
 import java.net.MalformedURLException;
 import java.net.URL;
 
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 
 /**
  * @author stefan schroeder, pierre-david belanger
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/SolutionVerifier.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/SolutionVerifier.java
index ca2024605..6d1ed3fb2 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/SolutionVerifier.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/SolutionVerifier.java
@@ -17,16 +17,16 @@
  */
 package com.graphhopper.jsprit.core.util;
 
-import java.util.Collection;
-import java.util.HashSet;
-import java.util.Set;
-
 import com.graphhopper.jsprit.core.algorithm.listener.AlgorithmEndsListener;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 
+import java.util.Collection;
+import java.util.HashSet;
+import java.util.Set;
+
 
 public class SolutionVerifier implements AlgorithmEndsListener {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/Solutions.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/Solutions.java
index 231ede97d..8687caab6 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/Solutions.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/Solutions.java
@@ -17,10 +17,10 @@
  */
 package com.graphhopper.jsprit.core.util;
 
-import java.util.Collection;
-
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 
+import java.util.Collection;
+
 
 public class Solutions {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/VehicleIndexComparator.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/VehicleIndexComparator.java
index c3e60a73a..4e7a51d71 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/VehicleIndexComparator.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/VehicleIndexComparator.java
@@ -18,12 +18,12 @@
 
 package com.graphhopper.jsprit.core.util;
 
-import java.util.Comparator;
-
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 
+import java.util.Comparator;
+
 public class VehicleIndexComparator implements Comparator<VehicleRoute> {
-        public int compare(VehicleRoute a, VehicleRoute b) {
-            return  a.getVehicle().getIndex() - b.getVehicle().getIndex();
-        }
+    public int compare(VehicleRoute a, VehicleRoute b) {
+        return a.getVehicle().getIndex() - b.getVehicle().getIndex();
+    }
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/VehicleRoutingTransportCostsMatrix.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/VehicleRoutingTransportCostsMatrix.java
index 916d7f4f9..e63188ae2 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/VehicleRoutingTransportCostsMatrix.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/VehicleRoutingTransportCostsMatrix.java
@@ -17,17 +17,16 @@
  */
 package com.graphhopper.jsprit.core.util;
 
-import java.util.HashMap;
-import java.util.Map;
-
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.cost.AbstractForwardVehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.driver.Driver;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl.VehicleCostParams;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.util.HashMap;
+import java.util.Map;
 
 
 /**
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/BuildCVRPAlgoFromScratch_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/BuildCVRPAlgoFromScratch_IT.java
index 435d30f0a..935769a2c 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/BuildCVRPAlgoFromScratch_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/BuildCVRPAlgoFromScratch_IT.java
@@ -17,13 +17,6 @@
  */
 package com.graphhopper.jsprit.core.algorithm;
 
-import static org.junit.Assert.assertEquals;
-
-import java.util.Collection;
-
-import org.junit.Before;
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.algorithm.acceptor.GreedyAcceptance;
 import com.graphhopper.jsprit.core.algorithm.module.RuinAndRecreateModule;
 import com.graphhopper.jsprit.core.algorithm.recreate.BestInsertionBuilder;
@@ -44,6 +37,12 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleFleetManager;
 import com.graphhopper.jsprit.core.util.ChristofidesReader;
 import com.graphhopper.jsprit.core.util.Solutions;
+import org.junit.Before;
+import org.junit.Test;
+
+import java.util.Collection;
+
+import static org.junit.Assert.assertEquals;
 
 
 public class BuildCVRPAlgoFromScratch_IT {
@@ -89,9 +88,9 @@ public double getCosts(VehicleRoutingProblemSolution solution) {
         radialStrategy.addModule(radialModule);
 
         vra = new PrettyAlgorithmBuilder(vrp, fleetManager, stateManager, cManager)
-                .withStrategy(randomStrategy, 0.5).withStrategy(radialStrategy, 0.5)
-                .addCoreStateAndConstraintStuff()
-                .constructInitialSolutionWith(bestInsertion, solutionCostCalculator).build();
+            .withStrategy(randomStrategy, 0.5).withStrategy(radialStrategy, 0.5)
+            .addCoreStateAndConstraintStuff()
+            .constructInitialSolutionWith(bestInsertion, solutionCostCalculator).build();
         vra.setMaxIterations(2000);
 
     }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CVRPwithDeliveries_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CVRPwithDeliveries_IT.java
index 4850b7bd1..fdb15f12d 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CVRPwithDeliveries_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CVRPwithDeliveries_IT.java
@@ -17,18 +17,17 @@
  */
 package com.graphhopper.jsprit.core.algorithm;
 
-import static org.junit.Assert.assertEquals;
-
-import java.util.Collection;
-
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.util.ChristofidesReader;
 import com.graphhopper.jsprit.core.util.JobType;
 import com.graphhopper.jsprit.core.util.Solutions;
+import org.junit.Test;
+
+import java.util.Collection;
+
+import static org.junit.Assert.assertEquals;
 
 public class CVRPwithDeliveries_IT {
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CVRPwithMatrix_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CVRPwithMatrix_IT.java
index 605016715..f7c56c314 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CVRPwithMatrix_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CVRPwithMatrix_IT.java
@@ -17,17 +17,6 @@
  */
 package com.graphhopper.jsprit.core.algorithm;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
-
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.List;
-
-import org.junit.Assert;
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.analysis.SolutionAnalyser;
 import com.graphhopper.jsprit.core.distance.EuclideanDistanceCalculator;
@@ -43,6 +32,14 @@
 import com.graphhopper.jsprit.core.util.FastVehicleRoutingTransportCostsMatrix;
 import com.graphhopper.jsprit.core.util.JobType;
 import com.graphhopper.jsprit.core.util.Solutions;
+import org.junit.Assert;
+import org.junit.Test;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
+
+import static org.junit.Assert.*;
 
 public class CVRPwithMatrix_IT {
 
@@ -55,7 +52,7 @@ public void whenReturnToDepot_itShouldWorkWithMatrix() {
         new ChristofidesReader(vrpBuilder).setJobType(JobType.DELIVERY).read(getClass().getResourceAsStream("vrpnc1.txt"));
         VehicleRoutingProblem vrp_ = vrpBuilder.build();
         VehicleRoutingProblem vrp = createVrpWithLocationIndecesAndMatrix(vrp_, true);
-        VehicleRoutingAlgorithm vra = Jsprit.Builder.newInstance(vrp).setProperty(Jsprit.Parameter.FAST_REGRET,"true").buildAlgorithm();
+        VehicleRoutingAlgorithm vra = Jsprit.Builder.newInstance(vrp).setProperty(Jsprit.Parameter.FAST_REGRET, "true").buildAlgorithm();
         Collection<VehicleRoutingProblemSolution> solutions = vra.searchSolutions();
         Assert.assertEquals(530.0, Solutions.bestOf(solutions).getCost(), 50.0);
         assertEquals(5, Solutions.bestOf(solutions).getRoutes().size());
@@ -67,7 +64,7 @@ public void whenNotReturnToDepot_itShouldWorkWithMatrix() {
         new ChristofidesReader(vrpBuilder).setJobType(JobType.DELIVERY).read(getClass().getResourceAsStream("vrpnc1.txt"));
         VehicleRoutingProblem vrp_ = vrpBuilder.build();
         VehicleRoutingProblem vrp = createVrpWithLocationIndecesAndMatrix(vrp_, false);
-        VehicleRoutingAlgorithm vra = Jsprit.Builder.newInstance(vrp).setProperty(Jsprit.Parameter.FAST_REGRET,"true").buildAlgorithm();
+        VehicleRoutingAlgorithm vra = Jsprit.Builder.newInstance(vrp).setProperty(Jsprit.Parameter.FAST_REGRET, "true").buildAlgorithm();
         try {
             Collection<VehicleRoutingProblemSolution> solutions = vra.searchSolutions();
             assertTrue(true);
@@ -82,7 +79,7 @@ public void whenCalcTimeWithSolutionAnalyser_itShouldWork() {
         new ChristofidesReader(vrpBuilder).setJobType(JobType.DELIVERY).read(getClass().getResourceAsStream("vrpnc1.txt"));
         VehicleRoutingProblem vrp_ = vrpBuilder.build();
         final VehicleRoutingProblem vrp = createVrpWithLocationIndecesAndMatrix(vrp_, false);
-        VehicleRoutingAlgorithm vra = Jsprit.Builder.newInstance(vrp).setProperty(Jsprit.Parameter.FAST_REGRET,"true").buildAlgorithm();
+        VehicleRoutingAlgorithm vra = Jsprit.Builder.newInstance(vrp).setProperty(Jsprit.Parameter.FAST_REGRET, "true").buildAlgorithm();
         Collection<VehicleRoutingProblemSolution> solutions = vra.searchSolutions();
         SolutionAnalyser sa = new SolutionAnalyser(vrp, Solutions.bestOf(solutions), new TransportDistance() {
             @Override
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CVRPwithPickups_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CVRPwithPickups_IT.java
index efd1e845e..1b011f531 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CVRPwithPickups_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CVRPwithPickups_IT.java
@@ -17,18 +17,17 @@
  */
 package com.graphhopper.jsprit.core.algorithm;
 
-import static org.junit.Assert.assertEquals;
-
-import java.util.Collection;
-
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.util.ChristofidesReader;
 import com.graphhopper.jsprit.core.util.JobType;
 import com.graphhopper.jsprit.core.util.Solutions;
+import org.junit.Test;
+
+import java.util.Collection;
+
+import static org.junit.Assert.assertEquals;
 
 public class CVRPwithPickups_IT {
 
@@ -37,7 +36,7 @@ public void whenSolvingVRPNC1WithPickups_solutionsMustNoBeWorseThan5PercentOfBes
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         new ChristofidesReader(vrpBuilder).setJobType(JobType.PICKUP).read(getClass().getResourceAsStream("vrpnc1.txt"));
         VehicleRoutingProblem vrp = vrpBuilder.build();
-        VehicleRoutingAlgorithm vra = Jsprit.Builder.newInstance(vrp).setProperty(Jsprit.Parameter.FAST_REGRET,"true").buildAlgorithm();
+        VehicleRoutingAlgorithm vra = Jsprit.Builder.newInstance(vrp).setProperty(Jsprit.Parameter.FAST_REGRET, "true").buildAlgorithm();
         Collection<VehicleRoutingProblemSolution> solutions = vra.searchSolutions();
         assertEquals(530.0, Solutions.bestOf(solutions).getCost(), 50.0);
         assertEquals(5, Solutions.bestOf(solutions).getRoutes().size());
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CapacityConstraint_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CapacityConstraint_IT.java
index 9ca17908f..9c2face8d 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CapacityConstraint_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CapacityConstraint_IT.java
@@ -17,9 +17,6 @@
  */
 package com.graphhopper.jsprit.core.algorithm;
 
-import org.junit.Assert;
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.analysis.SolutionAnalyser;
 import com.graphhopper.jsprit.core.distance.ManhattanDistanceCalculator;
@@ -35,6 +32,8 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.DefaultCosts;
 import com.graphhopper.jsprit.core.util.Solutions;
+import org.junit.Assert;
+import org.junit.Test;
 
 
 public class CapacityConstraint_IT {
@@ -43,53 +42,53 @@
     public void capacityShouldNotBeExceeded() {
 
         VehicleTypeImpl type1 = VehicleTypeImpl.Builder.newInstance("type1")
-                        .addCapacityDimension(0,1)
-                        .addCapacityDimension(1,0).addCapacityDimension(2,17).addCapacityDimension(3,18)
-                        .addCapacityDimension(4,14).addCapacityDimension(5,18).addCapacityDimension(6,20).build();
+            .addCapacityDimension(0, 1)
+            .addCapacityDimension(1, 0).addCapacityDimension(2, 17).addCapacityDimension(3, 18)
+            .addCapacityDimension(4, 14).addCapacityDimension(5, 18).addCapacityDimension(6, 20).build();
         VehicleTypeImpl type2 = VehicleTypeImpl.Builder.newInstance("type2")
-                        .addCapacityDimension(0,0)
-                        .addCapacityDimension(1,0).addCapacityDimension(2,17).addCapacityDimension(3,18)
-                        .addCapacityDimension(4,13).addCapacityDimension(5,18).addCapacityDimension(6,20).build();
+            .addCapacityDimension(0, 0)
+            .addCapacityDimension(1, 0).addCapacityDimension(2, 17).addCapacityDimension(3, 18)
+            .addCapacityDimension(4, 13).addCapacityDimension(5, 18).addCapacityDimension(6, 20).build();
         VehicleTypeImpl type3 = VehicleTypeImpl.Builder.newInstance("type3")
-                        .addCapacityDimension(0,1)
-                        .addCapacityDimension(1,0).addCapacityDimension(2,17).addCapacityDimension(3,18)
-                        .addCapacityDimension(4,14).addCapacityDimension(5,18).addCapacityDimension(6,20).build();
+            .addCapacityDimension(0, 1)
+            .addCapacityDimension(1, 0).addCapacityDimension(2, 17).addCapacityDimension(3, 18)
+            .addCapacityDimension(4, 14).addCapacityDimension(5, 18).addCapacityDimension(6, 20).build();
         VehicleTypeImpl type4 = VehicleTypeImpl.Builder.newInstance("type4")
-                        .addCapacityDimension(0,0)
-                        .addCapacityDimension(1,0).addCapacityDimension(2,17).addCapacityDimension(3,18)
-                        .addCapacityDimension(4,14).addCapacityDimension(5,17).addCapacityDimension(6,20).build();
+            .addCapacityDimension(0, 0)
+            .addCapacityDimension(1, 0).addCapacityDimension(2, 17).addCapacityDimension(3, 18)
+            .addCapacityDimension(4, 14).addCapacityDimension(5, 17).addCapacityDimension(6, 20).build();
         VehicleTypeImpl type5 = VehicleTypeImpl.Builder.newInstance("type5")
-                        .addCapacityDimension(0,1)
-                        .addCapacityDimension(1,0).addCapacityDimension(2,16).addCapacityDimension(3,17)
-                        .addCapacityDimension(4,14).addCapacityDimension(5,18).addCapacityDimension(6,20).build();
+            .addCapacityDimension(0, 1)
+            .addCapacityDimension(1, 0).addCapacityDimension(2, 16).addCapacityDimension(3, 17)
+            .addCapacityDimension(4, 14).addCapacityDimension(5, 18).addCapacityDimension(6, 20).build();
 
-        VehicleImpl v1 = VehicleImpl.Builder.newInstance("v1").setStartLocation(Location.newInstance(0,0)).setType(type1).setReturnToDepot(true).build();
+        VehicleImpl v1 = VehicleImpl.Builder.newInstance("v1").setStartLocation(Location.newInstance(0, 0)).setType(type1).setReturnToDepot(true).build();
         VehicleImpl v2 = VehicleImpl.Builder.newInstance("v2").setStartLocation(Location.newInstance(0, 0)).setType(type2).setReturnToDepot(true).build();
         VehicleImpl v3 = VehicleImpl.Builder.newInstance("v3").setStartLocation(Location.newInstance(0, 0)).setType(type3).setReturnToDepot(true).build();
         VehicleImpl v4 = VehicleImpl.Builder.newInstance("v4").setStartLocation(Location.newInstance(0, 0)).setType(type4).setReturnToDepot(true).build();
         VehicleImpl v5 = VehicleImpl.Builder.newInstance("v5").setStartLocation(Location.newInstance(0, 0)).setType(type5).setReturnToDepot(true).build();
 
         Delivery d1 = new Delivery.Builder("d1").setLocation(Location.newInstance(0, 10))
-                        .addSizeDimension(2,1).build();
-        Delivery d2 = new Delivery.Builder("d2").setLocation(Location.newInstance(0,12))
-                        .addSizeDimension(2,1).addSizeDimension(3,1).build();
-        Delivery d3 = new Delivery.Builder("d3").setLocation(Location.newInstance(0,15))
-                        .addSizeDimension(0,1).addSizeDimension(4,1).build();
-        Delivery d4 = new Delivery.Builder("d4").setLocation(Location.newInstance(0,20))
-                        .addSizeDimension(0,1).addSizeDimension(5,1).build();
+            .addSizeDimension(2, 1).build();
+        Delivery d2 = new Delivery.Builder("d2").setLocation(Location.newInstance(0, 12))
+            .addSizeDimension(2, 1).addSizeDimension(3, 1).build();
+        Delivery d3 = new Delivery.Builder("d3").setLocation(Location.newInstance(0, 15))
+            .addSizeDimension(0, 1).addSizeDimension(4, 1).build();
+        Delivery d4 = new Delivery.Builder("d4").setLocation(Location.newInstance(0, 20))
+            .addSizeDimension(0, 1).addSizeDimension(5, 1).build();
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.setFleetSize(VehicleRoutingProblem.FleetSize.FINITE)
-        .addJob(d1).addJob(d2).addJob(d3).addJob(d4)
-        .addVehicle(v1).addVehicle(v2)
-        .addVehicle(v3)
-        .addVehicle(v4).addVehicle(v5);
+            .addJob(d1).addJob(d2).addJob(d3).addJob(d4)
+            .addVehicle(v1).addVehicle(v2)
+            .addVehicle(v3)
+            .addVehicle(v4).addVehicle(v5);
         vrpBuilder.setRoutingCost(new DefaultCosts(ManhattanDistanceCalculator.getInstance()));
 
         VehicleRoutingProblem vrp = vrpBuilder.build();
 
         VehicleRoutingAlgorithm vra = Jsprit.Builder.newInstance(vrp)
-                        .setProperty(Jsprit.Parameter.VEHICLE_SWITCH, "true").buildAlgorithm();
+            .setProperty(Jsprit.Parameter.VEHICLE_SWITCH, "true").buildAlgorithm();
         vra.setMaxIterations(2000);
         VehicleRoutingProblemSolution solution = Solutions.bestOf(vra.searchSolutions());
 
@@ -97,17 +96,17 @@ public void capacityShouldNotBeExceeded() {
             @Override
             public double getDistance(Location from, Location to, double departureTime, Vehicle vehicle) {
                 return new DefaultCosts(ManhattanDistanceCalculator.getInstance()).getDistance(from,
-                                to, 0d, null);
+                    to, 0d, null);
             }
         });
 
-        for(VehicleRoute r : solution.getRoutes()){
+        for (VehicleRoute r : solution.getRoutes()) {
             Capacity loadAtBeginning = sa.getLoadAtBeginning(r);
             Capacity capacityDimensions = r.getVehicle().getType().getCapacityDimensions();
             //            System.out.println(r.getVehicle().getId() + " load@beginning: "  + loadAtBeginning);
             //            System.out.println("cap: " + capacityDimensions);
             Assert.assertTrue("capacity has been exceeded",
-                            loadAtBeginning.isLessOrEqual(capacityDimensions));
+                loadAtBeginning.isLessOrEqual(capacityDimensions));
         }
         //
         Assert.assertTrue(solution.getRoutes().size() != 1);
@@ -115,5 +114,4 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
     }
 
 
-
 }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/DeactivateTimeWindowsTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/DeactivateTimeWindowsTest.java
index 216028dd7..45c36b4ed 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/DeactivateTimeWindowsTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/DeactivateTimeWindowsTest.java
@@ -19,12 +19,6 @@
 package com.graphhopper.jsprit.core.algorithm;
 
 
-import java.util.Collection;
-
-import org.junit.Assert;
-import org.junit.Before;
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.problem.Location;
@@ -36,13 +30,18 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.util.Solutions;
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Test;
+
+import java.util.Collection;
 
 public class DeactivateTimeWindowsTest {
 
     VehicleRoutingProblem vrp;
 
     @Before
-    public void doBefore(){
+    public void doBefore() {
         Service service = new Service.Builder("s").setLocation(Location.newInstance(20, 0))
             .setTimeWindow(TimeWindow.newInstance(40, 50)).build();
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
@@ -68,7 +67,7 @@ public void whenActivatingViaStateManager_activityTimesShouldConsiderTimeWindows
         constraintManager.addTimeWindowConstraint();
 
         VehicleRoutingAlgorithm vra = Jsprit.Builder.newInstance(vrp).addCoreStateAndConstraintStuff(true)
-            .setStateAndConstraintManager(stateManager,constraintManager).buildAlgorithm();
+            .setStateAndConstraintManager(stateManager, constraintManager).buildAlgorithm();
         vra.setMaxIterations(10);
         Collection<VehicleRoutingProblemSolution> solutions = vra.searchSolutions();
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ExampleActivityCostFunction.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ExampleActivityCostFunction.java
index 4b5c72bfd..d1db90454 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ExampleActivityCostFunction.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ExampleActivityCostFunction.java
@@ -41,7 +41,7 @@ public double getActivityCost(TourActivity tourAct, double arrivalTime, Driver d
             return 0.0;
         } else {
             //waiting + act-time
-            double endTime = Math.max(arrivalTime, tourAct.getTheoreticalEarliestOperationStartTime()) + getActivityDuration(tourAct,arrivalTime,driver,vehicle);
+            double endTime = Math.max(arrivalTime, tourAct.getTheoreticalEarliestOperationStartTime()) + getActivityDuration(tourAct, arrivalTime, driver, vehicle);
             double timeAtAct = endTime - arrivalTime;
 
             double totalCost = timeAtAct * parameter_timeAtAct;
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ExternalInitialSolutionIsInValidTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ExternalInitialSolutionIsInValidTest.java
index b9145d6f3..6a3d0df8d 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ExternalInitialSolutionIsInValidTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ExternalInitialSolutionIsInValidTest.java
@@ -18,10 +18,6 @@
 
 package com.graphhopper.jsprit.core.algorithm;
 
-import java.util.Arrays;
-
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
@@ -29,8 +25,10 @@
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
-
 import junit.framework.Assert;
+import org.junit.Test;
+
+import java.util.Arrays;
 
 
 public class ExternalInitialSolutionIsInValidTest {
@@ -57,8 +55,7 @@ public void itShouldSolveProblemWithIniSolutionExternallyCreated() {
         try {
             vra.searchSolutions();
             Assert.assertTrue(true);
-        }
-        catch (Exception e){
+        } catch (Exception e) {
             Assert.assertFalse(true);
         }
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/FirstCustomJobExample.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/FirstCustomJobExample.java
index bb036313d..3e8dc0696 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/FirstCustomJobExample.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/FirstCustomJobExample.java
@@ -25,9 +25,9 @@
 import com.graphhopper.jsprit.core.problem.job.AbstractJob;
 import com.graphhopper.jsprit.core.problem.job.JobActivityList;
 import com.graphhopper.jsprit.core.problem.job.SequentialJobActivityList;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.*;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivityNEW;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.reporting.SolutionPrinter;
@@ -37,7 +37,6 @@
 
 import java.util.ArrayList;
 import java.util.Arrays;
-import java.util.Collections;
 import java.util.List;
 
 /**
@@ -56,7 +55,7 @@ public BuilderBase(String id) {
                 super(id);
             }
 
-            public BuilderBase<T,B> addPickup(Location location){
+            public BuilderBase<T, B> addPickup(Location location) {
                 locs.add(location);
                 return this;
             }
@@ -65,7 +64,7 @@ public BuilderBase(String id) {
                 return locs;
             }
 
-            protected void validate(){
+            protected void validate() {
 
             }
         }
@@ -86,6 +85,7 @@ protected CustomJob createInstance() {
             }
 
         }
+
         /**
          * Builder based constructor.
          *
@@ -106,24 +106,23 @@ public Capacity getSize() {
         protected void createActivities(JobBuilder<? extends AbstractJob, ?> jobBuilder) {
             Builder builder = (Builder) jobBuilder;
             JobActivityList list = new SequentialJobActivityList(this);
-            for(Location loc : builder.getLocs()){
-                list.addActivity(new PickupActivityNEW(this,"pick",loc,0,Capacity.EMPTY, Arrays.asList(TimeWindow.ETERNITY)));
+            for (Location loc : builder.getLocs()) {
+                list.addActivity(new PickupActivityNEW(this, "pick", loc, 0, Capacity.EMPTY, Arrays.asList(TimeWindow.ETERNITY)));
             }
             setActivities(list);
         }
     }
 
 
-
     @Test
-    public void test(){
-        CustomJob cj = CustomJob.Builder.newInstance("job").addPickup(Location.newInstance(10,0)).build();
-        Vehicle v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0,0)).build();
+    public void test() {
+        CustomJob cj = CustomJob.Builder.newInstance("job").addPickup(Location.newInstance(10, 0)).build();
+        Vehicle v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance()
             .addJob(cj).addVehicle(v).build();
         VehicleRoutingAlgorithm vra = Jsprit.createAlgorithm(vrp);
         VehicleRoutingProblemSolution solution = Solutions.bestOf(vra.searchSolutions());
-        SolutionPrinter.print(vrp,solution, SolutionPrinter.Print.VERBOSE);
+        SolutionPrinter.print(vrp, solution, SolutionPrinter.Print.VERBOSE);
         Assert.assertTrue(solution.getUnassignedJobs().isEmpty());
     }
 }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/FirstCustomJobWithMultipleActivitiesExample.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/FirstCustomJobWithMultipleActivitiesExample.java
index 9429cc49a..2b3bd4a78 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/FirstCustomJobWithMultipleActivitiesExample.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/FirstCustomJobWithMultipleActivitiesExample.java
@@ -30,6 +30,8 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.reporting.SolutionPrinter;
 import com.graphhopper.jsprit.core.util.Solutions;
 import org.junit.Assert;
@@ -57,7 +59,7 @@ public BuilderBase(String id) {
                 super(id);
             }
 
-            public BuilderBase<T,B> addPickup(Location location, Capacity capacity){
+            public BuilderBase<T, B> addPickup(Location location, Capacity capacity) {
                 locs.add(location);
                 cap.add(capacity);
                 return this;
@@ -67,9 +69,11 @@ public BuilderBase(String id) {
                 return locs;
             }
 
-            public List<Capacity> getCaps() { return cap; }
+            public List<Capacity> getCaps() {
+                return cap;
+            }
 
-            protected void validate(){
+            protected void validate() {
 
             }
         }
@@ -90,6 +94,7 @@ protected CustomJob createInstance() {
             }
 
         }
+
         /**
          * Builder based constructor.
          *
@@ -110,29 +115,29 @@ public Capacity getSize() {
         protected void createActivities(JobBuilder<? extends AbstractJob, ?> jobBuilder) {
             Builder builder = (Builder) jobBuilder;
             JobActivityList list = new SequentialJobActivityList(this);
-            for(int i=0;i<builder.getLocs().size();i++){
-                list.addActivity(new PickupActivityNEW(this,"pick",builder.getLocs().get(i),0,builder.getCaps().get(i), Arrays.asList(TimeWindow.ETERNITY)));
+            for (int i = 0; i < builder.getLocs().size(); i++) {
+                list.addActivity(new PickupActivityNEW(this, "pick", builder.getLocs().get(i), 0, builder.getCaps().get(i), Arrays.asList(TimeWindow.ETERNITY)));
             }
             setActivities(list);
         }
     }
 
 
-
     @Test
-    public void test(){
+    public void test() {
         CustomJob cj = CustomJob.Builder.newInstance("job")
-            .addPickup(Location.newInstance(10,0),Capacity.Builder.newInstance().addDimension(0,1).build())
-            .addPickup(Location.newInstance(5,0),Capacity.Builder.newInstance().addDimension(0,2).build())
-            .addPickup(Location.newInstance(20,0),Capacity.Builder.newInstance().addDimension(0,1).build())
+            .addPickup(Location.newInstance(10, 0), Capacity.Builder.newInstance().addDimension(0, 1).build())
+            .addPickup(Location.newInstance(5, 0), Capacity.Builder.newInstance().addDimension(0, 2).build())
+            .addPickup(Location.newInstance(20, 0), Capacity.Builder.newInstance().addDimension(0, 1).build())
             .build();
-        Vehicle v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0,0)).build();
+        VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0, 4).build();
+        Vehicle v = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance()
             .addJob(cj).addVehicle(v).build();
         VehicleRoutingAlgorithm vra = Jsprit.createAlgorithm(vrp);
         vra.setMaxIterations(0);
         VehicleRoutingProblemSolution solution = Solutions.bestOf(vra.searchSolutions());
-        SolutionPrinter.print(vrp,solution, SolutionPrinter.Print.VERBOSE);
+        SolutionPrinter.print(vrp, solution, SolutionPrinter.Print.VERBOSE);
         Assert.assertTrue(solution.getUnassignedJobs().isEmpty());
     }
 }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/IgnoreBreakTimeWindowTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/IgnoreBreakTimeWindowTest.java
index 82f680e91..706f9dfdf 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/IgnoreBreakTimeWindowTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/IgnoreBreakTimeWindowTest.java
@@ -18,10 +18,6 @@
 
 package com.graphhopper.jsprit.core.algorithm;
 
-import static org.junit.Assert.assertTrue;
-
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
@@ -35,6 +31,9 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.Solutions;
+import org.junit.Test;
+
+import static org.junit.Assert.assertTrue;
 
 /**
  * Created by schroeder on 08/01/16.
@@ -42,7 +41,7 @@
 public class IgnoreBreakTimeWindowTest {
 
     @Test
-    public void doNotIgnoreBreakTW(){
+    public void doNotIgnoreBreakTW() {
         VehicleTypeImpl.Builder vehicleTypeBuilder = VehicleTypeImpl.Builder.newInstance("vehicleType");
         VehicleType vehicleType = vehicleTypeBuilder.setCostPerWaitingTime(0.8).build();
 
@@ -65,30 +64,30 @@ public void doNotIgnoreBreakTW(){
 
 
         Service service4 = new Service.Builder("2").setLocation(Location.newInstance(0, 0))
-                        .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(17,17)).build();
+            .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(17, 17)).build();
 
         Service service5 = new Service.Builder("3").setLocation(Location.newInstance(0, 0))
-                        .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(18, 18)).build();
+            .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(18, 18)).build();
 
         Service service7 = new Service.Builder("4").setLocation(Location.newInstance(0, 0))
-                        .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(10, 10)).build();
+            .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(10, 10)).build();
 
         Service service8 = new Service.Builder("5").setLocation(Location.newInstance(0, 0))
-                        .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(12, 12)).build();
+            .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(12, 12)).build();
 
         Service service10 = new Service.Builder("6").setLocation(Location.newInstance(0, 0))
-                        .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(16, 16)).build();
+            .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(16, 16)).build();
 
         Service service11 = new Service.Builder("7").setLocation(Location.newInstance(0, 0))
-                        .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(13, 13)).build();
+            .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(13, 13)).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance()
-                        .addVehicle(vehicle2)
-                        .addJob(service4)
-                        .addJob(service5).addJob(service7)
-                        .addJob(service8).addJob(service10).addJob(service11)
-                        .setFleetSize(VehicleRoutingProblem.FleetSize.FINITE)
-                        .build();
+            .addVehicle(vehicle2)
+            .addJob(service4)
+            .addJob(service5).addJob(service7)
+            .addJob(service8).addJob(service10).addJob(service11)
+            .setFleetSize(VehicleRoutingProblem.FleetSize.FINITE)
+            .build();
 
         VehicleRoutingAlgorithm vra = Jsprit.createAlgorithm(vrp);
         vra.setMaxIterations(50);
@@ -101,7 +100,7 @@ public void doNotIgnoreBreakTW(){
 
     private boolean breakShouldBeTime(VehicleRoutingProblemSolution solution) {
         boolean inTime = true;
-        for(TourActivity act : solution.getRoutes().iterator().next().getActivities()){
+        for (TourActivity act : solution.getRoutes().iterator().next().getActivities()) {
             if (act instanceof BreakActivity) {
                 TimeWindow timeWindow = ((BreakActivity) act).getJob().getTimeWindow();
                 if (act.getEndTime() < timeWindow.getStart()) {
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/InitialRoutesTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/InitialRoutesTest.java
index 1ac38966a..f5f929d29 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/InitialRoutesTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/InitialRoutesTest.java
@@ -19,15 +19,6 @@
 package com.graphhopper.jsprit.core.algorithm;
 
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
-
-import java.util.Collection;
-
-import org.junit.Before;
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.algorithm.box.GreedySchrimpfFactory;
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit.Builder;
@@ -53,6 +44,12 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.Coordinate;
 import com.graphhopper.jsprit.core.util.Solutions;
+import org.junit.Before;
+import org.junit.Test;
+
+import java.util.Collection;
+
+import static org.junit.Assert.*;
 
 public class InitialRoutesTest {
 
@@ -61,11 +58,11 @@
     private VehicleRoute initialRoute;
 
     @Before
-    public void before(){
+    public void before() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
-        VehicleImpl v = VehicleImpl.Builder.newInstance("veh1").setStartLocation(Location.newInstance(0,0)).setLatestArrival(48600).build();
-        Service s1 = new Service.Builder("s1").setLocation(Location.newInstance(1000,0)).build();
-        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(1000,1000)).build();
+        VehicleImpl v = VehicleImpl.Builder.newInstance("veh1").setStartLocation(Location.newInstance(0, 0)).setLatestArrival(48600).build();
+        Service s1 = new Service.Builder("s1").setLocation(Location.newInstance(1000, 0)).build();
+        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(1000, 1000)).build();
         builder.addVehicle(v).addJob(s1).addJob(s2);
         initialRoute = VehicleRoute.Builder.newInstance(v).addService(s1).build();
         builder.addInitialVehicleRoute(initialRoute);
@@ -161,26 +158,26 @@ public void whenSolving_deliverService2_shouldBeInRoute() {
     public void maxCapacityShouldNotBeExceeded() {
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0, 100).build();
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("veh")
-                .setStartLocation(Location.Builder.newInstance().setId("start").setCoordinate(Coordinate.newInstance(0, 0)).build())
-                .setType(type)
-                .build();
+            .setStartLocation(Location.Builder.newInstance().setId("start").setCoordinate(Coordinate.newInstance(0, 0)).build())
+            .setType(type)
+            .build();
 
         Shipment shipment = Shipment.Builder.newInstance("s")
-                .setPickupLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(10, 0)).setId("pick").build())
-                .setDeliveryLocation(Location.Builder.newInstance().setId("del").setCoordinate(Coordinate.newInstance(0, 10)).build())
-                .addSizeDimension(0, 100)
-                .build();
+            .setPickupLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(10, 0)).setId("pick").build())
+            .setDeliveryLocation(Location.Builder.newInstance().setId("del").setCoordinate(Coordinate.newInstance(0, 10)).build())
+            .addSizeDimension(0, 100)
+            .build();
 
         Shipment another_shipment = Shipment.Builder.newInstance("another_s")
-                .setPickupLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(10, 0)).setId("pick").build())
-                .setDeliveryLocation(Location.Builder.newInstance().setId("del").setCoordinate(Coordinate.newInstance(0, 10)).build())
-                .addSizeDimension(0, 50)
-                .build();
+            .setPickupLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(10, 0)).setId("pick").build())
+            .setDeliveryLocation(Location.Builder.newInstance().setId("del").setCoordinate(Coordinate.newInstance(0, 10)).build())
+            .addSizeDimension(0, 50)
+            .build();
 
         VehicleRoute iniRoute = VehicleRoute.Builder.newInstance(vehicle).addPickup(shipment).addDelivery(shipment).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(shipment).addVehicle(vehicle).addJob(another_shipment)
-                .setFleetSize(VehicleRoutingProblem.FleetSize.FINITE).addInitialVehicleRoute(iniRoute).build();
+            .setFleetSize(VehicleRoutingProblem.FleetSize.FINITE).addInitialVehicleRoute(iniRoute).build();
 
         VehicleRoutingAlgorithm vra = new GreedySchrimpfFactory().createAlgorithm(vrp);
         vra.setMaxIterations(10);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/MeetTimeWindowConstraint_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/MeetTimeWindowConstraint_IT.java
index 44f31dc11..c5b3c97b0 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/MeetTimeWindowConstraint_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/MeetTimeWindowConstraint_IT.java
@@ -17,20 +17,6 @@
  */
 package com.graphhopper.jsprit.core.algorithm;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-
-import java.io.BufferedReader;
-import java.io.IOException;
-import java.io.InputStreamReader;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.List;
-
-import org.junit.Assert;
-import org.junit.Before;
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.JobInsertedListener;
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.VehicleSwitchedListener;
@@ -48,23 +34,36 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.FastVehicleRoutingTransportCostsMatrix;
 import com.graphhopper.jsprit.core.util.Solutions;
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Test;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
 
 public class MeetTimeWindowConstraint_IT {
 
     VehicleRoutingProblem vrp;
 
     @Before
-    public void doBefore(){
+    public void doBefore() {
         VehicleType type1 = VehicleTypeImpl.Builder.newInstance("5").build();
         VehicleType type2 = VehicleTypeImpl.Builder.newInstance("3.5").build();
-        VehicleImpl vehicle1 = VehicleImpl.Builder.newInstance("21").setStartLocation(Location.newInstance(0,0))
+        VehicleImpl vehicle1 = VehicleImpl.Builder.newInstance("21").setStartLocation(Location.newInstance(0, 0))
             .setEarliestStart(14400).setLatestArrival(46800).setType(type1).build();
-        VehicleImpl vehicle2 = VehicleImpl.Builder.newInstance("19").setStartLocation(Location.newInstance(0,0))
+        VehicleImpl vehicle2 = VehicleImpl.Builder.newInstance("19").setStartLocation(Location.newInstance(0, 0))
             .setEarliestStart(39600).setLatestArrival(64800).setType(type2).build();
         Service service1 = new Service.Builder("2").setLocation(Location.newInstance(2000, 0))
-            .setTimeWindow(TimeWindow.newInstance(54000,54000)).build();
+            .setTimeWindow(TimeWindow.newInstance(54000, 54000)).build();
         Service service2 = new Service.Builder("1").setLocation(Location.newInstance(1000, 1000))
-            .setTimeWindow(TimeWindow.newInstance(19800,21600)).build();
+            .setTimeWindow(TimeWindow.newInstance(19800, 21600)).build();
         vrp = VehicleRoutingProblem.Builder.newInstance().addVehicle(vehicle1).addVehicle(vehicle2)
             .addJob(service1).addJob(service2).setFleetSize(VehicleRoutingProblem.FleetSize.FINITE).build();
     }
@@ -166,7 +165,7 @@ public void whenEmployingVehicleWithDifferentWorkingShifts_job2ShouldBeAssignedC
 
     @Test
     public void whenEmployingVehicleWithDifferentWorkingShifts_and_vehicleSwitchIsNotAllowed_nRoutesShouldBeCorrect() {
-        VehicleRoutingAlgorithm vra = Jsprit.Builder.newInstance(vrp).setProperty(Jsprit.Parameter.VEHICLE_SWITCH,"false").buildAlgorithm();
+        VehicleRoutingAlgorithm vra = Jsprit.Builder.newInstance(vrp).setProperty(Jsprit.Parameter.VEHICLE_SWITCH, "false").buildAlgorithm();
         vra.setMaxIterations(100);
         Collection<VehicleRoutingProblemSolution> solutions = vra.searchSolutions();
 
@@ -175,7 +174,7 @@ public void whenEmployingVehicleWithDifferentWorkingShifts_and_vehicleSwitchIsNo
 
     @Test
     public void whenEmployingVehicleWithDifferentWorkingShifts_and_vehicleSwitchIsNotAllowed_certainJobsCanNeverBeAssignedToCertainVehicles() {
-        VehicleRoutingAlgorithm vra = Jsprit.Builder.newInstance(vrp).setProperty(Jsprit.Parameter.VEHICLE_SWITCH,"false").buildAlgorithm();
+        VehicleRoutingAlgorithm vra = Jsprit.Builder.newInstance(vrp).setProperty(Jsprit.Parameter.VEHICLE_SWITCH, "false").buildAlgorithm();
         vra.setMaxIterations(100);
         final List<Boolean> testFailed = new ArrayList<Boolean>();
         vra.addListener(new JobInsertedListener() {
@@ -203,7 +202,7 @@ public void informJobInserted(Job job2insert, VehicleRoute inRoute, double addit
 
     @Test
     public void whenEmployingVehicleWithDifferentWorkingShifts_and_vehicleSwitchIsNotAllowed_certainVehiclesCanNeverBeAssignedToCertainRoutes() {
-        VehicleRoutingAlgorithm vra = Jsprit.Builder.newInstance(vrp).setProperty(Jsprit.Parameter.VEHICLE_SWITCH,"false").buildAlgorithm();
+        VehicleRoutingAlgorithm vra = Jsprit.Builder.newInstance(vrp).setProperty(Jsprit.Parameter.VEHICLE_SWITCH, "false").buildAlgorithm();
         vra.setMaxIterations(100);
         final List<Boolean> testFailed = new ArrayList<Boolean>();
         vra.addListener(new VehicleSwitchedListener() {
@@ -237,7 +236,7 @@ public void vehicleSwitched(VehicleRoute vehicleRoute, Vehicle oldVehicle, Vehic
 
     @Test
     public void whenEmployingVehicleWithDifferentWorkingShifts_and_vehicleSwitchIsNotAllowed_job2CanNeverBeInVehicle21() {
-        VehicleRoutingAlgorithm vra = Jsprit.Builder.newInstance(vrp).setProperty(Jsprit.Parameter.VEHICLE_SWITCH,"false").buildAlgorithm();
+        VehicleRoutingAlgorithm vra = Jsprit.Builder.newInstance(vrp).setProperty(Jsprit.Parameter.VEHICLE_SWITCH, "false").buildAlgorithm();
         vra.setMaxIterations(100);
         Collection<VehicleRoutingProblemSolution> solutions = vra.searchSolutions();
 
@@ -246,7 +245,7 @@ public void whenEmployingVehicleWithDifferentWorkingShifts_and_vehicleSwitchIsNo
 
     @Test
     public void whenEmployingVehicleWithDifferentWorkingShifts_and_vehicleSwitchIsNotAllowed_job1ShouldBeAssignedCorrectly() {
-        VehicleRoutingAlgorithm vra = Jsprit.Builder.newInstance(vrp).setProperty(Jsprit.Parameter.VEHICLE_SWITCH,"false").buildAlgorithm();
+        VehicleRoutingAlgorithm vra = Jsprit.Builder.newInstance(vrp).setProperty(Jsprit.Parameter.VEHICLE_SWITCH, "false").buildAlgorithm();
         vra.setMaxIterations(100);
         Collection<VehicleRoutingProblemSolution> solutions = vra.searchSolutions();
 
@@ -256,7 +255,7 @@ public void whenEmployingVehicleWithDifferentWorkingShifts_and_vehicleSwitchIsNo
 
     @Test
     public void whenEmployingVehicleWithDifferentWorkingShifts_and_vehicleSwitchIsNotAllowed_job2ShouldBeAssignedCorrectly() {
-        VehicleRoutingAlgorithm vra = Jsprit.Builder.newInstance(vrp).setProperty(Jsprit.Parameter.VEHICLE_SWITCH,"false").buildAlgorithm();
+        VehicleRoutingAlgorithm vra = Jsprit.Builder.newInstance(vrp).setProperty(Jsprit.Parameter.VEHICLE_SWITCH, "false").buildAlgorithm();
         vra.setMaxIterations(100);
         Collection<VehicleRoutingProblemSolution> solutions = vra.searchSolutions();
 
@@ -309,7 +308,7 @@ private VehicleRoute getRoute(String vehicleId, VehicleRoutingProblemSolution ve
     }
 
     private VehicleRoutingProblem createTWBugProblem() throws IOException {
-        VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0,20)
+        VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0, 20)
             .setCostPerTransportTime(1.).setCostPerDistance(0).build();
         VehicleImpl v0 = VehicleImpl.Builder.newInstance("vehicle0").setStartLocation(Location.newInstance(0))
             .setEarliestStart(60).setLatestArrival(18060).setType(type).build();
@@ -323,7 +322,7 @@ private VehicleRoutingProblem createTWBugProblem() throws IOException {
             .setEarliestStart(36000).setLatestArrival(54060).setType(type).build();
 
         Service s1 = new Service.Builder("1").setLocation(Location.Builder.newInstance().setIndex(1).setId("js0").build())
-            .setServiceTime(600).setTimeWindow(TimeWindow.newInstance(0,1800)).addSizeDimension(0,1).build();
+            .setServiceTime(600).setTimeWindow(TimeWindow.newInstance(0, 1800)).addSizeDimension(0, 1).build();
         Service s2 = new Service.Builder("2").setLocation(Location.Builder.newInstance().setIndex(2).setId("js2").build())
             .setServiceTime(600).setTimeWindow(TimeWindow.newInstance(5400, 7200)).addSizeDimension(0, 2).build();
         Service s3 = new Service.Builder("3").setLocation(Location.Builder.newInstance().setIndex(3).setId("js5").build())
@@ -333,7 +332,7 @@ private VehicleRoutingProblem createTWBugProblem() throws IOException {
         Service s5 = new Service.Builder("5").setLocation(Location.Builder.newInstance().setIndex(5).setId("js8").build())
             .setServiceTime(600).addSizeDimension(0, 4).build();
         Service s6 = new Service.Builder("6").setLocation(Location.Builder.newInstance().setIndex(6).setId("js10").build())
-            .setServiceTime(1500).setTimeWindow(TimeWindow.newInstance(29700,32400)).addSizeDimension(0, 10).build();
+            .setServiceTime(1500).setTimeWindow(TimeWindow.newInstance(29700, 32400)).addSizeDimension(0, 10).build();
         Service s7 = new Service.Builder("7").setLocation(Location.Builder.newInstance().setIndex(7).setId("jsp3").build())
             .setServiceTime(5594).build();
 
@@ -346,28 +345,28 @@ private VehicleRoutingProblem createTWBugProblem() throws IOException {
         Shipment shipment2 = Shipment.Builder.newInstance("shipment2")
             .setPickupLocation(Location.Builder.newInstance().setId("jsp4").setIndex(9).build())
             .setPickupServiceTime(1200)
-            .addPickupTimeWindow(21600,23400)
+            .addPickupTimeWindow(21600, 23400)
             .setDeliveryLocation(Location.Builder.newInstance().setId("jsd4").setIndex(8).build())
             .setDeliveryServiceTime(900)
-            .addDeliveryTimeWindow(25200,27000)
+            .addDeliveryTimeWindow(25200, 27000)
             .build();
 
         Shipment shipment3 = Shipment.Builder.newInstance("shipment3")
             .setPickupLocation(Location.Builder.newInstance().setId("jsp7").setIndex(9).build())
             .setPickupServiceTime(1200)
-            .addPickupTimeWindow(37800,41400)
+            .addPickupTimeWindow(37800, 41400)
             .setDeliveryLocation(Location.Builder.newInstance().setId("jsd7").setIndex(8).build())
             .setDeliveryServiceTime(1800)
-            .addDeliveryTimeWindow(43200,45900)
+            .addDeliveryTimeWindow(43200, 45900)
             .build();
 
         Shipment shipment4 = Shipment.Builder.newInstance("shipment4")
             .setPickupLocation(Location.Builder.newInstance().setId("jsp9").setIndex(10).build())
             .setPickupServiceTime(300)
-            .addPickupTimeWindow(45000,48600)
+            .addPickupTimeWindow(45000, 48600)
             .setDeliveryLocation(Location.Builder.newInstance().setId("jsd9").setIndex(8).build())
             .setDeliveryServiceTime(300)
-            .addDeliveryTimeWindow(50400,52200)
+            .addDeliveryTimeWindow(50400, 52200)
             .build();
 
         FastVehicleRoutingTransportCostsMatrix matrix = createMatrix();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/MultipleTimeWindowsTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/MultipleTimeWindowsTest.java
index 3d40ac7ea..7d18330fc 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/MultipleTimeWindowsTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/MultipleTimeWindowsTest.java
@@ -18,8 +18,6 @@
 
 package com.graphhopper.jsprit.core.algorithm;
 
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
@@ -27,8 +25,8 @@
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.util.Solutions;
-
 import junit.framework.Assert;
+import org.junit.Test;
 
 /**
  * Created by schroeder on 26/05/15.
@@ -36,64 +34,64 @@
 public class MultipleTimeWindowsTest {
 
     @Test
-    public void service2ShouldNotBeInserted(){
+    public void service2ShouldNotBeInserted() {
         Service s = new Service.Builder("s1").setLocation(Location.newInstance(10, 0)).build();
 
         Service s2 = new Service.Builder("s2")
-                .addTimeWindow(50.,60.)
-                .setLocation(Location.newInstance(20, 0)).build();
+            .addTimeWindow(50., 60.)
+            .setLocation(Location.newInstance(20, 0)).build();
 
-        VehicleImpl v = VehicleImpl.Builder.newInstance("v1").setStartLocation(Location.newInstance(0,0))
-                .setEarliestStart(0.).setLatestArrival(40).build();
+        VehicleImpl v = VehicleImpl.Builder.newInstance("v1").setStartLocation(Location.newInstance(0, 0))
+            .setEarliestStart(0.).setLatestArrival(40).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(s).addJob(s2).addVehicle(v).build();
         VehicleRoutingAlgorithm algorithm = Jsprit.createAlgorithm(vrp);
         algorithm.setMaxIterations(100);
         VehicleRoutingProblemSolution solution = Solutions.bestOf(algorithm.searchSolutions());
 
-        Assert.assertEquals(1,solution.getUnassignedJobs().size());
+        Assert.assertEquals(1, solution.getUnassignedJobs().size());
     }
 
     @Test
-    public void service2ShouldBeInsertedIntoNewVehicle(){
-        Service s = new Service.Builder("s1").setLocation(Location.newInstance(10,0))
-                .addTimeWindow(5.,15.).build();
+    public void service2ShouldBeInsertedIntoNewVehicle() {
+        Service s = new Service.Builder("s1").setLocation(Location.newInstance(10, 0))
+            .addTimeWindow(5., 15.).build();
 
         Service s2 = new Service.Builder("s2")
-                .addTimeWindow(50.,60.)
-                .setLocation(Location.newInstance(20, 0)).build();
+            .addTimeWindow(50., 60.)
+            .setLocation(Location.newInstance(20, 0)).build();
 
-        VehicleImpl v = VehicleImpl.Builder.newInstance("v1").setStartLocation(Location.newInstance(0,0))
-                .setEarliestStart(0.).setLatestArrival(40).build();
+        VehicleImpl v = VehicleImpl.Builder.newInstance("v1").setStartLocation(Location.newInstance(0, 0))
+            .setEarliestStart(0.).setLatestArrival(40).build();
 
-        VehicleImpl v2 = VehicleImpl.Builder.newInstance("v2").setStartLocation(Location.newInstance(0,0))
-                .setEarliestStart(40.).setLatestArrival(80).build();
+        VehicleImpl v2 = VehicleImpl.Builder.newInstance("v2").setStartLocation(Location.newInstance(0, 0))
+            .setEarliestStart(40.).setLatestArrival(80).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(s).addJob(s2).addVehicle(v).addVehicle(v2).build();
         VehicleRoutingAlgorithm algorithm = Jsprit.createAlgorithm(vrp);
         algorithm.setMaxIterations(100);
         VehicleRoutingProblemSolution solution = Solutions.bestOf(algorithm.searchSolutions());
 
-        Assert.assertEquals(0,solution.getUnassignedJobs().size());
+        Assert.assertEquals(0, solution.getUnassignedJobs().size());
         Assert.assertEquals(2, solution.getRoutes().size());
     }
 
     @Test
-    public void service2ShouldBeInserted(){
-        Service s = new Service.Builder("s1").setLocation(Location.newInstance(10,0)).build();
+    public void service2ShouldBeInserted() {
+        Service s = new Service.Builder("s1").setLocation(Location.newInstance(10, 0)).build();
 
         Service s2 = new Service.Builder("s2")
-                .addTimeWindow(50., 60.).addTimeWindow(15., 25)
-                .setLocation(Location.newInstance(20, 0)).build();
+            .addTimeWindow(50., 60.).addTimeWindow(15., 25)
+            .setLocation(Location.newInstance(20, 0)).build();
 
-        VehicleImpl v = VehicleImpl.Builder.newInstance("v1").setStartLocation(Location.newInstance(0,0))
-                .setEarliestStart(0.).setLatestArrival(40).build();
+        VehicleImpl v = VehicleImpl.Builder.newInstance("v1").setStartLocation(Location.newInstance(0, 0))
+            .setEarliestStart(0.).setLatestArrival(40).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(s).addJob(s2).addVehicle(v).build();
         VehicleRoutingAlgorithm algorithm = Jsprit.createAlgorithm(vrp);
         algorithm.setMaxIterations(100);
         VehicleRoutingProblemSolution solution = Solutions.bestOf(algorithm.searchSolutions());
 
-        Assert.assertEquals(0,solution.getUnassignedJobs().size());
+        Assert.assertEquals(0, solution.getUnassignedJobs().size());
     }
 }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/OpenRoutesTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/OpenRoutesTest.java
index 5a6617bd6..e0352448a 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/OpenRoutesTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/OpenRoutesTest.java
@@ -17,14 +17,6 @@
  */
 package com.graphhopper.jsprit.core.algorithm;
 
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
-
-import java.util.Collection;
-
-import org.junit.Assert;
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.algorithm.box.SchrimpfFactory;
 import com.graphhopper.jsprit.core.algorithm.recreate.NoSolutionFoundException;
 import com.graphhopper.jsprit.core.distance.SphericalDistanceCalculator;
@@ -40,6 +32,13 @@
 import com.graphhopper.jsprit.core.util.DefaultCosts;
 import com.graphhopper.jsprit.core.util.Solutions;
 import com.graphhopper.jsprit.core.util.TestUtils;
+import org.junit.Assert;
+import org.junit.Test;
+
+import java.util.Collection;
+
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
 
 public class OpenRoutesTest {
 
@@ -48,10 +47,10 @@ public void whenDealingWithOpenRouteAndShipments_insertionShouldNotRequireRouteT
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").build();
 
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v").setLatestArrival(11.)
-                        .setType(type).setReturnToDepot(false).setStartLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(0, 0)).build()).build();
+            .setType(type).setReturnToDepot(false).setStartLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(0, 0)).build()).build();
 
         Shipment shipment = Shipment.Builder.newInstance("s").setPickupLocation(TestUtils.loc(Coordinate.newInstance(5, 0)))
-                        .setDeliveryLocation(TestUtils.loc(Coordinate.newInstance(10, 0))).build();
+            .setDeliveryLocation(TestUtils.loc(Coordinate.newInstance(10, 0))).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(shipment).addVehicle(vehicle).build();
 
@@ -72,13 +71,13 @@ public void whenDealingWithOpenRouteAndShipments_insertionShouldNotRequireRouteT
     public void whenDealingWithOpenRoute_insertionShouldNotRequireRouteToBeClosed() {
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").build();
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v").setLatestArrival(9.)
-                        .setType(type).setReturnToDepot(false)
-                        .setStartLocation(TestUtils.loc(Coordinate.newInstance(0, 0)))
-                        .build();
+            .setType(type).setReturnToDepot(false)
+            .setStartLocation(TestUtils.loc(Coordinate.newInstance(0, 0)))
+            .build();
 
         Service service = new Service.Builder("s")
-                        .setLocation(TestUtils.loc(Coordinate.newInstance(5, 0)))
-                        .build();
+            .setLocation(TestUtils.loc(Coordinate.newInstance(5, 0)))
+            .build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(service).addVehicle(vehicle).build();
 
@@ -101,13 +100,13 @@ public void whenDealingWithOpenRouteAndShipments_algorithmShouldCalculateCorrect
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").build();
 
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v").setLatestArrival(20.)
-                        .setType(type).setReturnToDepot(false).setStartLocation(Location.Builder.newInstance()
-                                        .setCoordinate(Coordinate.newInstance(0, 0)).build()).build();
+            .setType(type).setReturnToDepot(false).setStartLocation(Location.Builder.newInstance()
+                .setCoordinate(Coordinate.newInstance(0, 0)).build()).build();
 
         Shipment shipment = Shipment.Builder.newInstance("s")
-                        .setPickupLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(5, 0)).build())
-                        .setDeliveryLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(10, 0)).build())
-                        .build();
+            .setPickupLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(5, 0)).build())
+            .setDeliveryLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(10, 0)).build())
+            .build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(shipment).addVehicle(vehicle).build();
 
@@ -124,10 +123,10 @@ public void whenDealingWithOpenRouteAndShipments_algorithmShouldCalculateCorrect
     public void whenDealingWithOpenRoute_algorithmShouldCalculateCorrectCosts() {
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").build();
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v").setLatestArrival(10.)
-                        .setType(type).setReturnToDepot(false).setStartLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(0, 0)).build()).build();
+            .setType(type).setReturnToDepot(false).setStartLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(0, 0)).build()).build();
 
         Service service = new Service.Builder("s")
-                        .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(5, 0)).build()).build();
+            .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(5, 0)).build()).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(service).addVehicle(vehicle).build();
 
@@ -144,17 +143,17 @@ public void whenDealingWithOpenRoute_algorithmShouldCalculateCorrectCosts() {
     public void whenDealingWithOpenRouteAndGreatCircleCost_algorithmShouldRunWithoutException() {
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").build();
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v")
-                        .setType(type).setReturnToDepot(false)
-                        .setStartLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(0, 0)).build())
-                        .build();
+            .setType(type).setReturnToDepot(false)
+            .setStartLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(0, 0)).build())
+            .build();
 
         Service service = new Service.Builder("s")
-                        .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(50, 0)).build()).build();
+            .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(50, 0)).build()).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance()
-                        .addJob(service).addVehicle(vehicle)
-                        .setRoutingCost(new DefaultCosts(SphericalDistanceCalculator.getInstance()))
-                        .build();
+            .addJob(service).addVehicle(vehicle)
+            .setRoutingCost(new DefaultCosts(SphericalDistanceCalculator.getInstance()))
+            .build();
 
         VehicleRoutingAlgorithm vra = new SchrimpfFactory().createAlgorithm(vrp);
         vra.setMaxIterations(10);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/PickupsAndDeliveries_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/PickupsAndDeliveries_IT.java
index ce97be53a..ca4e54359 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/PickupsAndDeliveries_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/PickupsAndDeliveries_IT.java
@@ -17,17 +17,16 @@
  */
 package com.graphhopper.jsprit.core.algorithm;
 
-import static org.junit.Assert.assertEquals;
-
-import java.util.Collection;
-
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.util.LiLimReader;
 import com.graphhopper.jsprit.core.util.Solutions;
+import org.junit.Test;
+
+import java.util.Collection;
+
+import static org.junit.Assert.assertEquals;
 
 public class PickupsAndDeliveries_IT {
 
@@ -36,7 +35,7 @@ public void whenSolvingLR101InstanceOfLiLim_solutionsMustNoBeWorseThan5PercentOf
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         new LiLimReader(vrpBuilder).read(getClass().getResourceAsStream("lr101.txt"));
         VehicleRoutingProblem vrp = vrpBuilder.build();
-        VehicleRoutingAlgorithm vra = Jsprit.Builder.newInstance(vrp).setProperty(Jsprit.Parameter.FAST_REGRET,"true").buildAlgorithm();
+        VehicleRoutingAlgorithm vra = Jsprit.Builder.newInstance(vrp).setProperty(Jsprit.Parameter.FAST_REGRET, "true").buildAlgorithm();
         Collection<VehicleRoutingProblemSolution> solutions = vra.searchSolutions();
         assertEquals(1650.8, Solutions.bestOf(solutions).getCost(), 80.);
         assertEquals(19, Solutions.bestOf(solutions).getRoutes().size(), 1);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollectionWithCostsHigherThanTimesAndFiniteFleet_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollectionWithCostsHigherThanTimesAndFiniteFleet_IT.java
index b746dc22b..0bd7613ed 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollectionWithCostsHigherThanTimesAndFiniteFleet_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollectionWithCostsHigherThanTimesAndFiniteFleet_IT.java
@@ -17,16 +17,6 @@
  */
 package com.graphhopper.jsprit.core.algorithm;
 
-import static org.junit.Assert.assertEquals;
-
-import java.io.BufferedReader;
-import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.io.InputStreamReader;
-import java.util.Collection;
-
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.algorithm.box.GreedySchrimpfFactory;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
@@ -37,6 +27,15 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.Solutions;
 import com.graphhopper.jsprit.core.util.VehicleRoutingTransportCostsMatrix;
+import org.junit.Test;
+
+import java.io.BufferedReader;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.Collection;
+
+import static org.junit.Assert.assertEquals;
 
 
 public class RefuseCollectionWithCostsHigherThanTimesAndFiniteFleet_IT {
@@ -108,7 +107,7 @@ private void readDemandQuantities(VehicleRoutingProblem.Builder vrpBuilder) thro
             Service service = new Service.Builder(lineTokens[0]).addSizeDimension(0, Integer.parseInt(lineTokens[1]))
                 .setLocation(Location.newInstance(lineTokens[0])).build();
             /*
-			 * and add it to problem
+             * and add it to problem
 			 */
             vrpBuilder.addJob(service);
         }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollectionWithCostsHigherThanTimesAndFiniteFleet_withTimeAndDistanceCosts_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollectionWithCostsHigherThanTimesAndFiniteFleet_withTimeAndDistanceCosts_IT.java
index 193b5604f..6cd30e89b 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollectionWithCostsHigherThanTimesAndFiniteFleet_withTimeAndDistanceCosts_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollectionWithCostsHigherThanTimesAndFiniteFleet_withTimeAndDistanceCosts_IT.java
@@ -16,15 +16,6 @@
  * limitations under the License.
  */
 package com.graphhopper.jsprit.core.algorithm;
-import static org.junit.Assert.assertEquals;
-
-import java.io.BufferedReader;
-import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.io.InputStreamReader;
-import java.util.Collection;
-
-import org.junit.Test;
 
 import com.graphhopper.jsprit.core.algorithm.box.GreedySchrimpfFactory;
 import com.graphhopper.jsprit.core.algorithm.termination.IterationWithoutImprovementTermination;
@@ -37,6 +28,15 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.Solutions;
 import com.graphhopper.jsprit.core.util.VehicleRoutingTransportCostsMatrix;
+import org.junit.Test;
+
+import java.io.BufferedReader;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.Collection;
+
+import static org.junit.Assert.assertEquals;
 
 
 public class RefuseCollectionWithCostsHigherThanTimesAndFiniteFleet_withTimeAndDistanceCosts_IT {
@@ -92,7 +92,7 @@ public void testAlgo() {
     }
 
 
-    private void readDemandQuantities(VehicleRoutingProblem.Builder vrpBuilder) throws  IOException {
+    private void readDemandQuantities(VehicleRoutingProblem.Builder vrpBuilder) throws IOException {
         BufferedReader reader = new BufferedReader(new InputStreamReader(getClass().getResourceAsStream("refuseCollectionExample_Quantities")));
         String line = null;
         boolean firstLine = true;
@@ -108,7 +108,7 @@ private void readDemandQuantities(VehicleRoutingProblem.Builder vrpBuilder) thro
             Service service = new Service.Builder(lineTokens[0]).addSizeDimension(0, Integer.parseInt(lineTokens[1]))
                 .setLocation(Location.newInstance(lineTokens[0])).build();
             /*
-			 * and add it to problem
+             * and add it to problem
 			 */
             vrpBuilder.addJob(service);
         }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollection_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollection_IT.java
index 33f373f7a..c08efe5cf 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollection_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollection_IT.java
@@ -18,15 +18,6 @@
 package com.graphhopper.jsprit.core.algorithm;
 
 
-import java.io.BufferedReader;
-import java.io.IOException;
-import java.io.InputStreamReader;
-import java.io.Reader;
-import java.util.Collection;
-
-import org.junit.Assert;
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.algorithm.box.SchrimpfFactory;
 import com.graphhopper.jsprit.core.algorithm.termination.IterationWithoutImprovementTermination;
@@ -40,6 +31,14 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.Solutions;
 import com.graphhopper.jsprit.core.util.VehicleRoutingTransportCostsMatrix;
+import org.junit.Assert;
+import org.junit.Test;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.io.Reader;
+import java.util.Collection;
 
 
 public class RefuseCollection_IT {
@@ -114,7 +113,7 @@ public void whenReadingServices_usingJsprit_itShouldCalculateCorrectly() {
 		 */
         VehicleRoutingTransportCostsMatrix.Builder matrixBuilder = VehicleRoutingTransportCostsMatrix.Builder.newInstance(true);
         /*
-		 * read demand quantities
+         * read demand quantities
 		 */
         readDemandQuantitiesAsServices(vrpBuilder);
         readDistances(matrixBuilder);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/SearchStrategyManagerTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/SearchStrategyManagerTest.java
index c9e21b48e..92f2817a3 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/SearchStrategyManagerTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/SearchStrategyManagerTest.java
@@ -17,24 +17,21 @@
  */
 package com.graphhopper.jsprit.core.algorithm;
 
-import static org.hamcrest.CoreMatchers.is;
-import static org.junit.Assert.assertThat;
-import static org.junit.Assert.assertTrue;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.stub;
-import static org.mockito.Mockito.when;
+import com.graphhopper.jsprit.core.algorithm.acceptor.SolutionAcceptor;
+import com.graphhopper.jsprit.core.algorithm.selector.SolutionSelector;
+import com.graphhopper.jsprit.core.problem.solution.SolutionCostCalculator;
+import com.graphhopper.jsprit.core.util.RandomNumberGeneration;
+import org.junit.Assert;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Random;
 
-import org.junit.Assert;
-import org.junit.Test;
-
-import com.graphhopper.jsprit.core.algorithm.acceptor.SolutionAcceptor;
-import com.graphhopper.jsprit.core.algorithm.selector.SolutionSelector;
-import com.graphhopper.jsprit.core.problem.solution.SolutionCostCalculator;
-import com.graphhopper.jsprit.core.util.RandomNumberGeneration;
+import static org.hamcrest.CoreMatchers.is;
+import static org.junit.Assert.assertThat;
+import static org.junit.Assert.assertTrue;
+import static org.mockito.Mockito.*;
 
 
 public class SearchStrategyManagerTest {
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/SearchStrategyTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/SearchStrategyTest.java
index a69f95d01..0e6619426 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/SearchStrategyTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/SearchStrategyTest.java
@@ -17,22 +17,21 @@
  */
 package com.graphhopper.jsprit.core.algorithm;
 
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
-
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Random;
-
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.algorithm.acceptor.SolutionAcceptor;
 import com.graphhopper.jsprit.core.algorithm.listener.SearchStrategyModuleListener;
 import com.graphhopper.jsprit.core.algorithm.selector.SolutionSelector;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.solution.SolutionCostCalculator;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
+import org.junit.Test;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Random;
+
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
 
 
 public class SearchStrategyTest {
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/SolomonSkills_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/SolomonSkills_IT.java
index e037f46fb..7851f8164 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/SolomonSkills_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/SolomonSkills_IT.java
@@ -18,14 +18,6 @@
 
 package com.graphhopper.jsprit.core.algorithm;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
-
-import java.util.Collection;
-
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.problem.Skills;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
@@ -39,6 +31,11 @@
 import com.graphhopper.jsprit.core.util.SolomonReader;
 import com.graphhopper.jsprit.core.util.Solutions;
 import com.graphhopper.jsprit.core.util.TestUtils;
+import org.junit.Test;
+
+import java.util.Collection;
+
+import static org.junit.Assert.*;
 
 /**
  * to test skills with penalty vehicles
@@ -79,7 +76,7 @@ public void itShouldMakeCorrectAssignmentAccordingToSkills() {
         skillProblemBuilder.setFleetSize(VehicleRoutingProblem.FleetSize.FINITE);
         VehicleRoutingProblem skillProblem = skillProblemBuilder.build();
 
-        VehicleRoutingAlgorithm vra = Jsprit.Builder.newInstance(skillProblem).setProperty(Jsprit.Parameter.FAST_REGRET,"true").buildAlgorithm();
+        VehicleRoutingAlgorithm vra = Jsprit.Builder.newInstance(skillProblem).setProperty(Jsprit.Parameter.FAST_REGRET, "true").buildAlgorithm();
 
         Collection<VehicleRoutingProblemSolution> solutions = vra.searchSolutions();
         VehicleRoutingProblemSolution solution = Solutions.bestOf(solutions);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/Solomon_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/Solomon_IT.java
index 9f7b155bb..dec53cb75 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/Solomon_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/Solomon_IT.java
@@ -18,16 +18,15 @@
 
 package com.graphhopper.jsprit.core.algorithm;
 
-import java.util.Collection;
-
-import org.junit.Assert;
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.util.SolomonReader;
 import com.graphhopper.jsprit.core.util.Solutions;
+import org.junit.Assert;
+import org.junit.Test;
+
+import java.util.Collection;
 
 
 /**
@@ -41,7 +40,7 @@ public void itShouldFindTheBestKnownSolution() {
         new SolomonReader(vrpBuilder).read(getClass().getResourceAsStream("C101.txt"));
         VehicleRoutingProblem vrp = vrpBuilder.build();
 
-        VehicleRoutingAlgorithm vra = Jsprit.Builder.newInstance(vrp).setProperty(Jsprit.Parameter.FAST_REGRET,"true").buildAlgorithm();
+        VehicleRoutingAlgorithm vra = Jsprit.Builder.newInstance(vrp).setProperty(Jsprit.Parameter.FAST_REGRET, "true").buildAlgorithm();
         vra.setMaxIterations(2000);
         Collection<VehicleRoutingProblemSolution> solutions = vra.searchSolutions();
         Assert.assertEquals(828.94, Solutions.bestOf(solutions).getCost(), 0.01);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/UnassignedJobListTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/UnassignedJobListTest.java
index aa21d5b32..8cdef53ac 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/UnassignedJobListTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/UnassignedJobListTest.java
@@ -18,12 +18,6 @@
 
 package com.graphhopper.jsprit.core.algorithm;
 
-import static org.junit.Assert.assertTrue;
-
-import java.util.Collection;
-
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.algorithm.box.GreedySchrimpfFactory;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
@@ -32,6 +26,11 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.util.Solutions;
+import org.junit.Test;
+
+import java.util.Collection;
+
+import static org.junit.Assert.assertTrue;
 
 public class UnassignedJobListTest {
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/VariableDepartureAndWaitingTime_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/VariableDepartureAndWaitingTime_IT.java
index 8a33b2472..53cfcf385 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/VariableDepartureAndWaitingTime_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/VariableDepartureAndWaitingTime_IT.java
@@ -19,11 +19,6 @@
 package com.graphhopper.jsprit.core.algorithm;
 
 
-import static org.junit.Assert.assertEquals;
-
-import org.junit.Before;
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.analysis.SolutionAnalyser;
@@ -42,8 +37,11 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.util.CostFactory;
 import com.graphhopper.jsprit.core.util.Solutions;
-
 import junit.framework.Assert;
+import org.junit.Before;
+import org.junit.Test;
+
+import static org.junit.Assert.assertEquals;
 
 /**
  * Created by schroeder on 22/07/15.
@@ -80,21 +78,21 @@ public VehicleRoutingAlgorithm createAlgorithm(final VehicleRoutingProblem vrp)
                 ConstraintManager constraintManager = new ConstraintManager(vrp, stateManager);
 
                 return Jsprit.Builder.newInstance(vrp)
-                                .addCoreStateAndConstraintStuff(true)
-                                .setStateAndConstraintManager(stateManager, constraintManager)
-                                .setObjectiveFunction(new SolutionCostCalculator() {
-                                    @Override
-                                    public double getCosts(VehicleRoutingProblemSolution solution) {
-                                        SolutionAnalyser sa = new SolutionAnalyser(vrp, solution, new TransportDistance() {
-                                            @Override
-                                            public double getDistance(Location from, Location to, double departureTime, Vehicle vehicle) {
-                                                return vrp.getTransportCosts().getTransportCost(from, to, 0., null, null);
-                                            }
-                                        });
-                                        return sa.getWaitingTime() + sa.getDistance();
-                                    }
-                                })
-                                .buildAlgorithm();
+                    .addCoreStateAndConstraintStuff(true)
+                    .setStateAndConstraintManager(stateManager, constraintManager)
+                    .setObjectiveFunction(new SolutionCostCalculator() {
+                        @Override
+                        public double getCosts(VehicleRoutingProblemSolution solution) {
+                            SolutionAnalyser sa = new SolutionAnalyser(vrp, solution, new TransportDistance() {
+                                @Override
+                                public double getDistance(Location from, Location to, double departureTime, Vehicle vehicle) {
+                                    return vrp.getTransportCosts().getTransportCost(from, to, 0., null, null);
+                                }
+                            });
+                            return sa.getWaitingTime() + sa.getDistance();
+                        }
+                    })
+                    .buildAlgorithm();
             }
         };
     }
@@ -105,11 +103,11 @@ public void plainSetupShouldWork() {
         Service s1 = new Service.Builder("s1").setLocation(Location.newInstance(10, 0)).build();
         Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(20, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance()
-                        .addJob(s1).addJob(s2).addVehicle(v)
-                        .setFleetSize(VehicleRoutingProblem.FleetSize.FINITE)
-                        .setRoutingCost(CostFactory.createManhattanCosts())
-                        .setActivityCosts(activityCosts)
-                        .build();
+            .addJob(s1).addJob(s2).addVehicle(v)
+            .setFleetSize(VehicleRoutingProblem.FleetSize.FINITE)
+            .setRoutingCost(CostFactory.createManhattanCosts())
+            .setActivityCosts(activityCosts)
+            .build();
         VehicleRoutingAlgorithm vra = algorithmFactory.createAlgorithm(vrp);
         VehicleRoutingProblemSolution solution = Solutions.bestOf(vra.searchSolutions());
         assertEquals(40., solution.getCost(), 0.01d);
@@ -121,11 +119,11 @@ public void withTimeWindowsShouldWork() {
         Service s1 = new Service.Builder("s1").setTimeWindow(TimeWindow.newInstance(1010, 1100)).setLocation(Location.newInstance(10, 0)).build();
         Service s2 = new Service.Builder("s2").setTimeWindow(TimeWindow.newInstance(1020, 1100)).setLocation(Location.newInstance(20, 0)).build();
         final VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance()
-                        .addJob(s1).addJob(s2).addVehicle(v)
-                        .setFleetSize(VehicleRoutingProblem.FleetSize.FINITE)
-                        .setRoutingCost(CostFactory.createManhattanCosts())
-                        .setActivityCosts(activityCosts)
-                        .build();
+            .addJob(s1).addJob(s2).addVehicle(v)
+            .setFleetSize(VehicleRoutingProblem.FleetSize.FINITE)
+            .setRoutingCost(CostFactory.createManhattanCosts())
+            .setActivityCosts(activityCosts)
+            .build();
         VehicleRoutingAlgorithm vra = algorithmFactory.createAlgorithm(vrp);
         VehicleRoutingProblemSolution solution = Solutions.bestOf(vra.searchSolutions());
         Assert.assertEquals(40. + 1000., solution.getCost());
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/VehicleRoutingAlgorithmTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/VehicleRoutingAlgorithmTest.java
index 4ed1b324a..1deed4ccb 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/VehicleRoutingAlgorithmTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/VehicleRoutingAlgorithmTest.java
@@ -17,19 +17,18 @@
  */
 package com.graphhopper.jsprit.core.algorithm;
 
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
-
-import java.util.Arrays;
-import java.util.Collection;
-
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.algorithm.listener.IterationStartsListener;
 import com.graphhopper.jsprit.core.algorithm.termination.PrematureAlgorithmTermination;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
+import org.junit.Test;
+
+import java.util.Arrays;
+import java.util.Collection;
+
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
 
 public class VehicleRoutingAlgorithmTest {
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/acceptor/GreedyAcceptanceTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/acceptor/GreedyAcceptanceTest.java
index 90bc7e423..c744dfdca 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/acceptor/GreedyAcceptanceTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/acceptor/GreedyAcceptanceTest.java
@@ -17,19 +17,18 @@
  */
 package com.graphhopper.jsprit.core.algorithm.acceptor;
 
+import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
+import org.junit.Test;
+
+import java.util.ArrayList;
+import java.util.List;
+
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertThat;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
-import java.util.ArrayList;
-import java.util.List;
-
-import org.junit.Test;
-
-import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
-
 
 public class GreedyAcceptanceTest {
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/acceptor/SchrimpfAcceptanceTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/acceptor/SchrimpfAcceptanceTest.java
index 00972a719..7ff3342be 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/acceptor/SchrimpfAcceptanceTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/acceptor/SchrimpfAcceptanceTest.java
@@ -17,20 +17,19 @@
  */
 package com.graphhopper.jsprit.core.algorithm.acceptor;
 
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
+import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
+import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
+import org.junit.Before;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
 
-import org.junit.Before;
-import org.junit.Test;
-
-import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
 
 public class SchrimpfAcceptanceTest {
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/box/JspritTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/box/JspritTest.java
index 980a5eda3..613f6bd95 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/box/JspritTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/box/JspritTest.java
@@ -18,14 +18,6 @@
 
 package com.graphhopper.jsprit.core.algorithm.box;
 
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.algorithm.SearchStrategy;
 import com.graphhopper.jsprit.core.algorithm.VehicleRoutingAlgorithm;
 import com.graphhopper.jsprit.core.algorithm.listener.StrategySelectedListener;
@@ -41,8 +33,10 @@
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.util.RandomNumberGeneration;
-
 import junit.framework.Assert;
+import org.junit.Test;
+
+import java.util.*;
 
 /**
  * Created by schroeder on 06/03/15.
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/CalcVehicleTypeDependentServiceInsertionTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/CalcVehicleTypeDependentServiceInsertionTest.java
index 5148e0dc0..109d85458 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/CalcVehicleTypeDependentServiceInsertionTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/CalcVehicleTypeDependentServiceInsertionTest.java
@@ -17,28 +17,23 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
-import static org.hamcrest.CoreMatchers.is;
-import static org.junit.Assert.assertThat;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
-
-import java.util.Arrays;
-import java.util.Collections;
-
-import org.junit.Before;
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Service;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
-import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
-import com.graphhopper.jsprit.core.problem.vehicle.VehicleFleetManager;
-import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
-import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
-import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
+import com.graphhopper.jsprit.core.problem.vehicle.*;
+import org.junit.Before;
+import org.junit.Test;
+
+import java.util.Arrays;
+import java.util.Collections;
+
+import static org.hamcrest.CoreMatchers.is;
+import static org.junit.Assert.assertThat;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
 
 
 public class CalcVehicleTypeDependentServiceInsertionTest {
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ConfigureFixCostCalculatorTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ConfigureFixCostCalculatorTest.java
index 9e0b8a29b..061313c69 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ConfigureFixCostCalculatorTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ConfigureFixCostCalculatorTest.java
@@ -18,21 +18,20 @@
 
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
-import static org.mockito.Mockito.mock;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import org.junit.Assert;
-import org.junit.Before;
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.job.Service;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Test;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import static org.mockito.Mockito.mock;
 
 /**
  * Created by schroeder on 15/08/16.
@@ -42,9 +41,9 @@
     VehicleRoutingProblem vrp;
 
     @Before
-    public void before(){
+    public void before() {
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
-        for(int i=0;i<100;i++){
+        for (int i = 0; i < 100; i++) {
             Service service = new Service.Builder("" + i).setLocation(Location.newInstance(0)).build();
             vrpBuilder.addJob(service);
         }
@@ -52,42 +51,42 @@ public void before(){
     }
 
     @Test
-    public void shouldCalculateCorrectly(){
+    public void shouldCalculateCorrectly() {
         List<Job> unassigned = new ArrayList<>();
         int count = 1;
-        for(String key : vrp.getJobs().keySet()) {
-            if(count <= 25) {
+        for (String key : vrp.getJobs().keySet()) {
+            if (count <= 25) {
                 unassigned.add(vrp.getJobs().get(key));
             }
             count++;
         }
-        JobInsertionConsideringFixCostsCalculator jicc = new JobInsertionConsideringFixCostsCalculator(mock(JobInsertionCostsCalculator.class),mock(StateManager.class));
-        ConfigureFixCostCalculator c = new ConfigureFixCostCalculator(vrp,jicc);
+        JobInsertionConsideringFixCostsCalculator jicc = new JobInsertionConsideringFixCostsCalculator(mock(JobInsertionCostsCalculator.class), mock(StateManager.class));
+        ConfigureFixCostCalculator c = new ConfigureFixCostCalculator(vrp, jicc);
         c.informInsertionStarts(new ArrayList<VehicleRoute>(), unassigned);
         Assert.assertEquals(0.75, jicc.getSolutionCompletenessRatio(), 0.001);
     }
 
     @Test
-    public void shouldBeMinRatio(){
+    public void shouldBeMinRatio() {
         List<Job> unassigned = new ArrayList<>();
         int count = 1;
-        for(String key : vrp.getJobs().keySet()) {
-            if(count <= 75) {
+        for (String key : vrp.getJobs().keySet()) {
+            if (count <= 75) {
                 unassigned.add(vrp.getJobs().get(key));
             }
             count++;
         }
-        JobInsertionConsideringFixCostsCalculator jicc = new JobInsertionConsideringFixCostsCalculator(mock(JobInsertionCostsCalculator.class),mock(StateManager.class));
-        ConfigureFixCostCalculator c = new ConfigureFixCostCalculator(vrp,jicc);
+        JobInsertionConsideringFixCostsCalculator jicc = new JobInsertionConsideringFixCostsCalculator(mock(JobInsertionCostsCalculator.class), mock(StateManager.class));
+        ConfigureFixCostCalculator c = new ConfigureFixCostCalculator(vrp, jicc);
         c.informInsertionStarts(new ArrayList<VehicleRoute>(), unassigned);
         Assert.assertEquals(0.5, jicc.getSolutionCompletenessRatio(), 0.001);
     }
 
     @Test
-    public void shouldBeOne(){
+    public void shouldBeOne() {
         List<Job> unassigned = new ArrayList<>();
-        JobInsertionConsideringFixCostsCalculator jicc = new JobInsertionConsideringFixCostsCalculator(mock(JobInsertionCostsCalculator.class),mock(StateManager.class));
-        ConfigureFixCostCalculator c = new ConfigureFixCostCalculator(vrp,jicc);
+        JobInsertionConsideringFixCostsCalculator jicc = new JobInsertionConsideringFixCostsCalculator(mock(JobInsertionCostsCalculator.class), mock(StateManager.class));
+        ConfigureFixCostCalculator c = new ConfigureFixCostCalculator(vrp, jicc);
         c.informInsertionStarts(new ArrayList<VehicleRoute>(), unassigned);
         Assert.assertEquals(1.0, jicc.getSolutionCompletenessRatio(), 0.001);
     }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionAndLoadConstraintsTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionAndLoadConstraintsTest.java
index 96964c2ef..05c655807 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionAndLoadConstraintsTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionAndLoadConstraintsTest.java
@@ -18,8 +18,6 @@
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
-import com.graphhopper.jsprit.core.problem.CopyJobActivityFactory;
-import com.graphhopper.jsprit.core.problem.JobActivityFactory;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
@@ -31,7 +29,6 @@
 import com.graphhopper.jsprit.core.problem.driver.DriverImpl;
 import com.graphhopper.jsprit.core.problem.job.Delivery;
 import com.graphhopper.jsprit.core.problem.job.Pickup;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
@@ -123,7 +120,7 @@ public void whenInsertingServiceWhileNoCapIsAvailable_itMustReturnTheCorrectInse
         VehicleRoute route = VehicleRoute.emptyRoute();
         route.setVehicleAndDepartureTime(vehicle, 0.0);
 
-        route.getTourActivities().addActivity(0,vrp.copyAndGetActivities(delivery).get(0));
+        route.getTourActivities().addActivity(0, vrp.copyAndGetActivities(delivery).get(0));
 
         StateManager stateManager = new StateManager(vrp);
         stateManager.updateLoadStates();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionAndTimeWindowConstraintsTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionAndTimeWindowConstraintsTest.java
index 304827a4c..bfc79a700 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionAndTimeWindowConstraintsTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionAndTimeWindowConstraintsTest.java
@@ -44,9 +44,7 @@
 import org.junit.Test;
 
 import java.util.Arrays;
-import java.util.List;
 
-import static org.junit.Assert.assertEquals;
 import static org.mockito.Mockito.mock;
 
 
@@ -111,8 +109,8 @@ private void createInsertionCalculator(HardRouteConstraint hardRouteLevelConstra
 
     @Test
     public void whenInsertingServiceWithTW_itMustReturnTheCorrectInsertionIndex() {
-        Delivery delivery = new Delivery.Builder("del").addTimeWindow(30,40).setLocation(Location.newInstance("10,10")).build();
-        Pickup pickup = new Pickup.Builder("pick").addTimeWindow(60,80).setLocation(Location.newInstance("0,10")).build();
+        Delivery delivery = new Delivery.Builder("del").addTimeWindow(30, 40).setLocation(Location.newInstance("10,10")).build();
+        Pickup pickup = new Pickup.Builder("pick").addTimeWindow(60, 80).setLocation(Location.newInstance("0,10")).build();
 
         VehicleType type = VehicleTypeImpl.Builder.newInstance("t").setCostPerDistance(1).build();
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v").setLatestArrival(40).setStartLocation(Location.newInstance("0,0")).setType(type).build();
@@ -124,10 +122,10 @@ public void whenInsertingServiceWithTW_itMustReturnTheCorrectInsertionIndex() {
         VehicleRoute route = VehicleRoute.emptyRoute();
         route.setVehicleAndDepartureTime(vehicle, 0.0);
 
-        route.getTourActivities().addActivity(0,vrp.copyAndGetActivities(delivery).get(0));
+        route.getTourActivities().addActivity(0, vrp.copyAndGetActivities(delivery).get(0));
 
         StateManager stateManager = new StateManager(vrp);
-        stateManager.addStateUpdater(new UpdateVehicleDependentPracticalTimeWindows(stateManager,routingCosts,activityCosts));
+        stateManager.addStateUpdater(new UpdateVehicleDependentPracticalTimeWindows(stateManager, routingCosts, activityCosts));
 
         ConstraintManager constraintManager = new ConstraintManager(vrp, stateManager);
         constraintManager.addTimeWindowConstraint();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionWithServicesAndLoadConstraintsTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionWithServicesAndLoadConstraintsTest.java
index be4d94ccd..4c010764d 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionWithServicesAndLoadConstraintsTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionWithServicesAndLoadConstraintsTest.java
@@ -18,8 +18,6 @@
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
-import com.graphhopper.jsprit.core.problem.CopyJobActivityFactory;
-import com.graphhopper.jsprit.core.problem.JobActivityFactory;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
@@ -31,11 +29,9 @@
 import com.graphhopper.jsprit.core.problem.driver.DriverImpl;
 import com.graphhopper.jsprit.core.problem.job.Delivery;
 import com.graphhopper.jsprit.core.problem.job.Pickup;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-import com.graphhopper.jsprit.core.problem.solution.route.state.RouteAndActivityStateGetter;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
@@ -116,7 +112,7 @@ public void whenInsertingServiceWhileNoCapIsAvailable_itMustReturnTheCorrectInse
         VehicleRoute route = VehicleRoute.emptyRoute();
         route.setVehicleAndDepartureTime(vehicle, 0.0);
 
-        route.getTourActivities().addActivity(0,vrp.copyAndGetActivities(delivery).get(0));
+        route.getTourActivities().addActivity(0, vrp.copyAndGetActivities(delivery).get(0));
 
         StateManager stateManager = new StateManager(vrp);
         stateManager.updateLoadStates();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionWithServicesTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionWithServicesTest.java
index d5820f773..f09d9db75 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionWithServicesTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionWithServicesTest.java
@@ -17,18 +17,6 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.mock;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.Map;
-
-import org.junit.Before;
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.distance.EuclideanDistanceCalculator;
 import com.graphhopper.jsprit.core.distance.ManhattanDistanceCalculator;
@@ -51,6 +39,13 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.Coordinate;
 import com.graphhopper.jsprit.core.util.Locations;
+import org.junit.Before;
+import org.junit.Test;
+
+import java.util.*;
+
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Mockito.mock;
 
 
 public class GeneralJobInsertionWithServicesTest {
@@ -89,22 +84,22 @@ public void setup() {
         final Locations locations = id -> {
             String[] splitted = id.split(",");
             return Coordinate.newInstance(Double.parseDouble(splitted[0]),
-                            Double.parseDouble(splitted[1]));
+                Double.parseDouble(splitted[1]));
         };
         costs = new AbstractForwardVehicleRoutingTransportCosts() {
 
             @Override
             public double getTransportTime(Location from, Location to, double departureTime, Driver driver, Vehicle vehicle) {
                 return ManhattanDistanceCalculator.getInstance().calculateDistance(
-                                locations.getCoord(from.getId()), locations.getCoord(to.getId()));
+                    locations.getCoord(from.getId()), locations.getCoord(to.getId()));
             }
 
             @Override
             public double getTransportCost(Location from, Location to, double departureTime, Driver driver, Vehicle vehicle) {
                 return vehicle.getType().getVehicleCostParams().perDistanceUnit
-                                * ManhattanDistanceCalculator.getInstance().calculateDistance(
-                                                locations.getCoord(from.getId()),
-                                                locations.getCoord(to.getId()));
+                    * ManhattanDistanceCalculator.getInstance().calculateDistance(
+                    locations.getCoord(from.getId()),
+                    locations.getCoord(to.getId()));
             }
         };
 
@@ -119,7 +114,7 @@ public double getTransportCost(Location from, Location to, double departureTime,
         jobs.add(second);
 
         vrp = VehicleRoutingProblem.Builder.newInstance().addAllJobs(jobs)
-                        .addVehicle(vehicle).setRoutingCost(costs).build();
+            .addVehicle(vehicle).setRoutingCost(costs).build();
 
         states = new StateManager(vrp);
         states.updateLoadStates();
@@ -209,8 +204,8 @@ public void whenInsertingJobAndCurrRouteIsEmpty_accessEggressCalcShouldReturnZer
     @Test
     public void whenInsertingJobAndCurrRouteAndVehicleHaveTheSameLocation_accessEggressCalcShouldReturnZero() {
         VehicleRoute route = VehicleRoute.Builder.newInstance(newVehicle, DriverImpl.noDriver())
-                        .addService(first)
-                        .build();
+            .addService(first)
+            .build();
 
         AdditionalAccessEgressCalculator accessEgressCalc = new AdditionalAccessEgressCalculator(costs);
         JobInsertionContext iContex = new JobInsertionContext(route, first, newVehicle, mock(Driver.class), 0.0);
@@ -239,8 +234,8 @@ public double getTransportCost(Location from, Location to, double departureTime,
         Vehicle oldVehicle = VehicleImpl.Builder.newInstance("oldV").setStartLocation(Location.newInstance("oldV")).build();
 
         VehicleRoute route = VehicleRoute.Builder.newInstance(oldVehicle, DriverImpl.noDriver())
-                        .addService(new Service.Builder("service").addSizeDimension(0, 0).setLocation(Location.newInstance("service")).build())
-                        .build();
+            .addService(new Service.Builder("service").addSizeDimension(0, 0).setLocation(Location.newInstance("service")).build())
+            .build();
 
         Vehicle newVehicle = VehicleImpl.Builder.newInstance("newV").setStartLocation(Location.newInstance("newV")).build();
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionWithShipmentsTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionWithShipmentsTest.java
index 86d65e3c7..3dab8a0d4 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionWithShipmentsTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionWithShipmentsTest.java
@@ -17,17 +17,6 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-import static org.mockito.Mockito.mock;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-
-import org.junit.Before;
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
@@ -53,6 +42,16 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.CostFactory;
+import org.junit.Before;
+import org.junit.Test;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+import static org.mockito.Mockito.mock;
 
 
 public class GeneralJobInsertionWithShipmentsTest {
@@ -120,8 +119,8 @@ public void whenCalculatingInsertionIntoExistingRoute_itShouldReturnCorrectCosts
         Shipment shipment2 = Shipment.Builder.newInstance("s2").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("10,10").build()).setDeliveryLocation(Location.newInstance("0,0")).build();
         VehicleRoute route = VehicleRoute.emptyRoute();
         List<JobActivity> tourActivities = getTourActivities(shipment);
-        route.setVehicleAndDepartureTime(vehicle,0);
-        add(tourActivities,route,0,0);
+        route.setVehicleAndDepartureTime(vehicle, 0);
+        add(tourActivities, route, 0, 0);
 
         InsertionData iData = insertionCalculator.getInsertionData(route, shipment2, vehicle, 0.0, null, Double.MAX_VALUE);
         assertEquals(0.0, iData.getInsertionCost(), 0.05);
@@ -144,8 +143,8 @@ public void whenInsertingShipmentInRouteWithNotEnoughCapacity_itShouldReturnNoIn
         Shipment shipment2 = Shipment.Builder.newInstance("s2").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("10,10").build()).setDeliveryLocation(Location.newInstance("0,0")).build();
         VehicleRoute route = VehicleRoute.emptyRoute();
         List<JobActivity> tourActivities = getTourActivities(shipment);
-        route.setVehicleAndDepartureTime(vehicle,0);
-        add(tourActivities,route,0,0);
+        route.setVehicleAndDepartureTime(vehicle, 0);
+        add(tourActivities, route, 0, 0);
 
         createInsertionCalculator(insertionContext -> false);
 
@@ -165,9 +164,9 @@ public void whenInsertingThirdShipment_itShouldCalcCorrectVal() {
         List<JobActivity> shipmentActivities = getTourActivities(shipment);
         List<JobActivity> shipment2Activities = getTourActivities(shipment2);
 
-        route.setVehicleAndDepartureTime(vehicle,0d);
-        add(shipmentActivities,route,0,0);
-        add(shipment2Activities,route,1,2);
+        route.setVehicleAndDepartureTime(vehicle, 0d);
+        add(shipmentActivities, route, 0, 0);
+        add(shipment2Activities, route, 1, 2);
 
         InsertionData iData = insertionCalculator.getInsertionData(route, shipment3, vehicle, 0.0, null, Double.MAX_VALUE);
         assertEquals(0.0, iData.getInsertionCost(), 0.05);
@@ -185,9 +184,9 @@ public void whenInsertingThirdShipment_itShouldCalcCorrectVal2() {
         List<JobActivity> shipment2Activities = getTourActivities(shipment2);
         VehicleRoute route = VehicleRoute.emptyRoute();
 
-        route.setVehicleAndDepartureTime(vehicle,0d);
-        add(shipmentActivities,route,0,0);
-        add(shipment2Activities,route,1,2);
+        route.setVehicleAndDepartureTime(vehicle, 0d);
+        add(shipmentActivities, route, 0, 0);
+        add(shipment2Activities, route, 1, 2);
 
         InsertionData iData = insertionCalculator.getInsertionData(route, shipment3, vehicle, 0.0, null, Double.MAX_VALUE);
         assertEquals(2.0, iData.getInsertionCost(), 0.05);
@@ -207,8 +206,8 @@ public void whenInstertingShipmentWithLoadConstraintWhereCapIsNotSufficient_capC
         VehicleRoute route = VehicleRoute.emptyRoute();
         route.setVehicleAndDepartureTime(vehicle, 0.0);
 
-        add(vrp,route,shipment,0,0);
-        add(vrp,route,shipment2,1,2);
+        add(vrp, route, shipment, 0, 0);
+        add(vrp, route, shipment2, 1, 2);
 
         StateManager stateManager = new StateManager(vrp);
         stateManager.updateLoadStates();
@@ -236,8 +235,8 @@ public void whenInsertingServiceWhileNoCapIsAvailable_itMustReturnNoInsertionDat
         VehicleRoute route = VehicleRoute.emptyRoute();
         route.setVehicleAndDepartureTime(vehicle, 0.0);
 
-        add(vrp,route,shipment,0,0);
-        add(vrp,route,shipment2,1,2);
+        add(vrp, route, shipment, 0, 0);
+        add(vrp, route, shipment2, 1, 2);
 
         StateManager stateManager = new StateManager(vrp);
         stateManager.updateLoadStates();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/JobInsertionConsideringFixCostsCalculatorTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/JobInsertionConsideringFixCostsCalculatorTest.java
index 02be422dc..f33679793 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/JobInsertionConsideringFixCostsCalculatorTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/JobInsertionConsideringFixCostsCalculatorTest.java
@@ -17,13 +17,6 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
-
-import org.junit.Before;
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.algorithm.state.InternalStates;
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.job.Job;
@@ -32,6 +25,12 @@
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
+import org.junit.Before;
+import org.junit.Test;
+
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
 
 public class JobInsertionConsideringFixCostsCalculatorTest {
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionTest.java
index 7c6df6714..bd8ad47ff 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionTest.java
@@ -18,11 +18,6 @@
 
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
-import java.util.ArrayList;
-import java.util.Collection;
-
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.algorithm.VehicleRoutingAlgorithm;
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.BeforeJobInsertionListener;
@@ -44,16 +39,14 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.ActivityVisitor;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-import com.graphhopper.jsprit.core.problem.vehicle.FiniteFleetManagerFactory;
-import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
-import com.graphhopper.jsprit.core.problem.vehicle.VehicleFleetManager;
-import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
-import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
-import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
+import com.graphhopper.jsprit.core.problem.vehicle.*;
 import com.graphhopper.jsprit.core.util.Coordinate;
 import com.graphhopper.jsprit.core.util.Solutions;
-
 import junit.framework.Assert;
+import org.junit.Test;
+
+import java.util.ArrayList;
+import java.util.Collection;
 
 public class RegretInsertionTest {
 
@@ -121,11 +114,11 @@ public void solutionWithFastRegretMustBeCorrect() {
             .addVehicle(v1).addVehicle(v2).setFleetSize(VehicleRoutingProblem.FleetSize.FINITE).build();
 
         StateManager stateManager = new StateManager(vrp);
-        ConstraintManager constraintManager = new ConstraintManager(vrp,stateManager);
+        ConstraintManager constraintManager = new ConstraintManager(vrp, stateManager);
 
         VehicleRoutingAlgorithm vra = Jsprit.Builder.newInstance(vrp)
             .addCoreStateAndConstraintStuff(true)
-            .setProperty(Jsprit.Parameter.FAST_REGRET,"true")
+            .setProperty(Jsprit.Parameter.FAST_REGRET, "true")
             .setStateAndConstraintManager(stateManager, constraintManager).buildAlgorithm();
 
         VehicleRoutingProblemSolution solution = Solutions.bestOf(vra.searchSolutions());
@@ -156,11 +149,11 @@ public void begin(VehicleRoute route) {
 
         @Override
         public void visit(TourActivity activity) {
-            if(((JobActivity)activity).getJob().getId().equals("s1")){
-                stateManager.putProblemState(job1AssignedId,Boolean.class,true);
+            if (((JobActivity) activity).getJob().getId().equals("s1")) {
+                stateManager.putProblemState(job1AssignedId, Boolean.class, true);
             }
-            if(((JobActivity)activity).getJob().getId().equals("s2")){
-                stateManager.putProblemState(job2AssignedId,Boolean.class,true);
+            if (((JobActivity) activity).getJob().getId().equals("s2")) {
+                stateManager.putProblemState(job2AssignedId, Boolean.class, true);
             }
 
         }
@@ -171,7 +164,7 @@ public void finish() {
         }
     }
 
-    static class RouteConstraint implements HardRouteConstraint{
+    static class RouteConstraint implements HardRouteConstraint {
 
         private final StateId job1AssignedId;
 
@@ -187,22 +180,22 @@ public RouteConstraint(StateId job1Assigned, StateId job2Assigned, StateManager
 
         @Override
         public boolean fulfilled(JobInsertionContext insertionContext) {
-            if(insertionContext.getJob().getId().equals("s1")){
-                Boolean job2Assigned = stateManager.getProblemState(job2AssignedId,Boolean.class);
-                if(job2Assigned == null || job2Assigned == false) return true;
+            if (insertionContext.getJob().getId().equals("s1")) {
+                Boolean job2Assigned = stateManager.getProblemState(job2AssignedId, Boolean.class);
+                if (job2Assigned == null || job2Assigned == false) return true;
                 else {
-                    for(Job j : insertionContext.getRoute().getTourActivities().getJobs()){
-                        if(j.getId().equals("s2")) return true;
+                    for (Job j : insertionContext.getRoute().getTourActivities().getJobs()) {
+                        if (j.getId().equals("s2")) return true;
                     }
                 }
                 return false;
             }
-            if(insertionContext.getJob().getId().equals("s2")){
-                Boolean job1Assigned = stateManager.getProblemState(job1AssignedId,Boolean.class);
-                if(job1Assigned == null || job1Assigned == false) return true;
+            if (insertionContext.getJob().getId().equals("s2")) {
+                Boolean job1Assigned = stateManager.getProblemState(job1AssignedId, Boolean.class);
+                if (job1Assigned == null || job1Assigned == false) return true;
                 else {
-                    for(Job j : insertionContext.getRoute().getTourActivities().getJobs()){
-                        if(j.getId().equals("s1")) return true;
+                    for (Job j : insertionContext.getRoute().getTourActivities().getJobs()) {
+                        if (j.getId().equals("s1")) return true;
                     }
                 }
                 return false;
@@ -213,12 +206,12 @@ public boolean fulfilled(JobInsertionContext insertionContext) {
 
     @Test
     public void solutionWithConstraintAndWithFastRegretMustBeCorrect() {
-        Service s1 = new Service.Builder("s1").addSizeDimension(0,1).setLocation(Location.newInstance(0, 10)).build();
-        Service s2 = new Service.Builder("s2").addSizeDimension(0,1).setLocation(Location.newInstance(0, -10)).build();
-        Service s3 = new Service.Builder("s3").addSizeDimension(0,1).setLocation(Location.newInstance(0, -11)).build();
-        Service s4 = new Service.Builder("s4").addSizeDimension(0,1).setLocation(Location.newInstance(0, 11)).build();
+        Service s1 = new Service.Builder("s1").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 10)).build();
+        Service s2 = new Service.Builder("s2").addSizeDimension(0, 1).setLocation(Location.newInstance(0, -10)).build();
+        Service s3 = new Service.Builder("s3").addSizeDimension(0, 1).setLocation(Location.newInstance(0, -11)).build();
+        Service s4 = new Service.Builder("s4").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 11)).build();
 
-        VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0,2).build();
+        VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0, 2).build();
         VehicleImpl v1 = VehicleImpl.Builder.newInstance("v1").setType(type).setStartLocation(Location.newInstance(0, 10)).build();
         VehicleImpl v2 = VehicleImpl.Builder.newInstance("v2").setType(type).setStartLocation(Location.newInstance(0, -10)).build();
         final VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(s1).addJob(s2).addJob(s3).addJob(s4)
@@ -227,9 +220,9 @@ public void solutionWithConstraintAndWithFastRegretMustBeCorrect() {
         final StateManager stateManager = new StateManager(vrp);
         StateId job1Assigned = stateManager.createStateId("job1-assigned");
         StateId job2Assigned = stateManager.createStateId("job2-assigned");
-        stateManager.addStateUpdater(new JobInRouteUpdater(stateManager,job1Assigned,job2Assigned));
-        ConstraintManager constraintManager = new ConstraintManager(vrp,stateManager);
-        constraintManager.addConstraint(new RouteConstraint(job1Assigned,job2Assigned,stateManager));
+        stateManager.addStateUpdater(new JobInRouteUpdater(stateManager, job1Assigned, job2Assigned));
+        ConstraintManager constraintManager = new ConstraintManager(vrp, stateManager);
+        constraintManager.addConstraint(new RouteConstraint(job1Assigned, job2Assigned, stateManager));
         constraintManager.setDependencyType("s1", DependencyType.INTRA_ROUTE);
         constraintManager.setDependencyType("s2", DependencyType.INTRA_ROUTE);
 
@@ -248,12 +241,11 @@ public void solutionWithConstraintAndWithFastRegretMustBeCorrect() {
             .buildAlgorithm();
 
         VehicleRoutingProblemSolution solution = Solutions.bestOf(vra.searchSolutions());
-        for(VehicleRoute route : solution.getRoutes()){
-            if(route.getTourActivities().servesJob(s1)){
-                if(!route.getTourActivities().servesJob(s2)){
+        for (VehicleRoute route : solution.getRoutes()) {
+            if (route.getTourActivities().servesJob(s1)) {
+                if (!route.getTourActivities().servesJob(s2)) {
                     Assert.assertFalse(true);
-                }
-                else Assert.assertTrue(true);
+                } else Assert.assertTrue(true);
             }
         }
 //        Assert.assertEquals(1, solution.getRoutes().size());
@@ -261,12 +253,12 @@ public void solutionWithConstraintAndWithFastRegretMustBeCorrect() {
 
     @Test
     public void solutionWithConstraintAndWithFastRegretConcurrentMustBeCorrect() {
-        Service s1 = new Service.Builder("s1").addSizeDimension(0,1).setLocation(Location.newInstance(0, 10)).build();
-        Service s2 = new Service.Builder("s2").addSizeDimension(0,1).setLocation(Location.newInstance(0, -10)).build();
-        Service s3 = new Service.Builder("s3").addSizeDimension(0,1).setLocation(Location.newInstance(0, -11)).build();
-        Service s4 = new Service.Builder("s4").addSizeDimension(0,1).setLocation(Location.newInstance(0, 11)).build();
+        Service s1 = new Service.Builder("s1").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 10)).build();
+        Service s2 = new Service.Builder("s2").addSizeDimension(0, 1).setLocation(Location.newInstance(0, -10)).build();
+        Service s3 = new Service.Builder("s3").addSizeDimension(0, 1).setLocation(Location.newInstance(0, -11)).build();
+        Service s4 = new Service.Builder("s4").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 11)).build();
 
-        VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0,2).build();
+        VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0, 2).build();
         VehicleImpl v1 = VehicleImpl.Builder.newInstance("v1").setType(type).setStartLocation(Location.newInstance(0, 10)).build();
         VehicleImpl v2 = VehicleImpl.Builder.newInstance("v2").setType(type).setStartLocation(Location.newInstance(0, -10)).build();
         final VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(s1).addJob(s2).addJob(s3).addJob(s4)
@@ -275,26 +267,25 @@ public void solutionWithConstraintAndWithFastRegretConcurrentMustBeCorrect() {
         final StateManager stateManager = new StateManager(vrp);
         StateId job1Assigned = stateManager.createStateId("job1-assigned");
         StateId job2Assigned = stateManager.createStateId("job2-assigned");
-        stateManager.addStateUpdater(new JobInRouteUpdater(stateManager,job1Assigned,job2Assigned));
-        ConstraintManager constraintManager = new ConstraintManager(vrp,stateManager);
-        constraintManager.addConstraint(new RouteConstraint(job1Assigned,job2Assigned,stateManager));
+        stateManager.addStateUpdater(new JobInRouteUpdater(stateManager, job1Assigned, job2Assigned));
+        ConstraintManager constraintManager = new ConstraintManager(vrp, stateManager);
+        constraintManager.addConstraint(new RouteConstraint(job1Assigned, job2Assigned, stateManager));
         constraintManager.setDependencyType("s1", DependencyType.INTRA_ROUTE);
         constraintManager.setDependencyType("s2", DependencyType.INTRA_ROUTE);
 
         VehicleRoutingAlgorithm vra = Jsprit.Builder.newInstance(vrp)
             .addCoreStateAndConstraintStuff(true)
             .setProperty(Jsprit.Parameter.FAST_REGRET, "true")
-            .setProperty(Jsprit.Parameter.THREADS,"4")
+            .setProperty(Jsprit.Parameter.THREADS, "4")
             .setStateAndConstraintManager(stateManager, constraintManager)
             .buildAlgorithm();
 
         VehicleRoutingProblemSolution solution = Solutions.bestOf(vra.searchSolutions());
-        for(VehicleRoute route : solution.getRoutes()){
-            if(route.getTourActivities().servesJob(s1)){
-                if(!route.getTourActivities().servesJob(s2)){
+        for (VehicleRoute route : solution.getRoutes()) {
+            if (route.getTourActivities().servesJob(s1)) {
+                if (!route.getTourActivities().servesJob(s2)) {
                     Assert.assertFalse(true);
-                }
-                else Assert.assertTrue(true);
+                } else Assert.assertTrue(true);
             }
         }
     }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ServiceInsertionAndLoadConstraintsTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ServiceInsertionAndLoadConstraintsTest.java
index fb9637f10..701084f3e 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ServiceInsertionAndLoadConstraintsTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ServiceInsertionAndLoadConstraintsTest.java
@@ -17,16 +17,6 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.mock;
-
-import java.util.Arrays;
-import java.util.List;
-
-import org.junit.Before;
-import org.junit.Test;
-
-import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionListeners;
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.problem.CopyJobActivityFactory;
 import com.graphhopper.jsprit.core.problem.JobActivityFactory;
@@ -51,6 +41,14 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.CostFactory;
+import org.junit.Before;
+import org.junit.Test;
+
+import java.util.Arrays;
+import java.util.List;
+
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Mockito.mock;
 
 
 public class ServiceInsertionAndLoadConstraintsTest {
@@ -125,7 +123,7 @@ public void whenInsertingServiceWhileNoCapIsAvailable_itMustReturnTheCorrectInse
         VehicleRoute route = VehicleRoute.emptyRoute();
         route.setVehicleAndDepartureTime(vehicle, 0.0);
 
-        route.getTourActivities().addActivity(0,vrp.copyAndGetActivities(delivery).get(0));
+        route.getTourActivities().addActivity(0, vrp.copyAndGetActivities(delivery).get(0));
 
         JobActivityFactory activityFactory = new CopyJobActivityFactory();
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ShipmentInsertionCalculatorTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ShipmentInsertionCalculatorTest.java
index f229e2cb8..c9ce9c49d 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ShipmentInsertionCalculatorTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ShipmentInsertionCalculatorTest.java
@@ -17,19 +17,6 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-
-import org.junit.Before;
-import org.junit.Test;
-
-import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionListeners;
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.problem.JobActivityFactory;
 import com.graphhopper.jsprit.core.problem.Location;
@@ -47,17 +34,24 @@
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverShipmentDEPRECATED;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupServiceDEPRECATED;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupShipmentDEPRECATED;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.*;
 import com.graphhopper.jsprit.core.problem.solution.route.state.RouteAndActivityStateGetter;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.CostFactory;
+import org.junit.Before;
+import org.junit.Test;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
 
 
 public class ShipmentInsertionCalculatorTest {
@@ -131,8 +125,8 @@ public void whenCalculatingInsertionIntoExistingRoute_itShouldReturnCorrectCosts
         Shipment shipment2 = Shipment.Builder.newInstance("s2").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("10,10").build()).setDeliveryLocation(Location.newInstance("0,0")).build();
         VehicleRoute route = VehicleRoute.emptyRoute();
         List<JobActivity> tourActivities = getTourActivities(shipment);
-        route.setVehicleAndDepartureTime(vehicle,0);
-        add(tourActivities,route,0,0);
+        route.setVehicleAndDepartureTime(vehicle, 0);
+        add(tourActivities, route, 0, 0);
 
         JobActivityFactory activityFactory = mock(JobActivityFactory.class);
         List<JobActivity> activities = new ArrayList<>();
@@ -162,8 +156,8 @@ public void whenInsertingShipmentInRouteWithNotEnoughCapacity_itShouldReturnNoIn
         Shipment shipment2 = Shipment.Builder.newInstance("s2").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("10,10").build()).setDeliveryLocation(Location.newInstance("0,0")).build();
         VehicleRoute route = VehicleRoute.emptyRoute();
         List<JobActivity> tourActivities = getTourActivities(shipment);
-        route.setVehicleAndDepartureTime(vehicle,0);
-        add(tourActivities,route,0,0);
+        route.setVehicleAndDepartureTime(vehicle, 0);
+        add(tourActivities, route, 0, 0);
 
         createInsertionCalculator(insertionContext -> false);
 
@@ -190,9 +184,9 @@ public void whenInsertingThirdShipment_itShouldCalcCorrectVal() {
         List<JobActivity> shipmentActivities = getTourActivities(shipment);
         List<JobActivity> shipment2Activities = getTourActivities(shipment2);
 
-        route.setVehicleAndDepartureTime(vehicle,0d);
-        add(shipmentActivities,route,0,0);
-        add(shipment2Activities,route,1,2);
+        route.setVehicleAndDepartureTime(vehicle, 0d);
+        add(shipmentActivities, route, 0, 0);
+        add(shipment2Activities, route, 1, 2);
 
         JobActivityFactory activityFactory = mock(JobActivityFactory.class);
         List<JobActivity> activities = new ArrayList<>();
@@ -217,9 +211,9 @@ public void whenInsertingThirdShipment_itShouldCalcCorrectVal2() {
         List<JobActivity> shipment2Activities = getTourActivities(shipment2);
         VehicleRoute route = VehicleRoute.emptyRoute();
 
-        route.setVehicleAndDepartureTime(vehicle,0d);
-        add(shipmentActivities,route,0,0);
-        add(shipment2Activities,route,1,2);
+        route.setVehicleAndDepartureTime(vehicle, 0d);
+        add(shipmentActivities, route, 0, 0);
+        add(shipment2Activities, route, 1, 2);
 
         JobActivityFactory activityFactory = mock(JobActivityFactory.class);
         List<JobActivity> activities = new ArrayList<>();
@@ -247,8 +241,8 @@ public void whenInstertingShipmentWithLoadConstraintWhereCapIsNotSufficient_capC
         VehicleRoute route = VehicleRoute.emptyRoute();
         route.setVehicleAndDepartureTime(vehicle, 0.0);
 
-        add(vrp,route,shipment,0,0);
-        add(vrp,route,shipment2,1,2);
+        add(vrp, route, shipment, 0, 0);
+        add(vrp, route, shipment2, 1, 2);
 
         StateManager stateManager = new StateManager(vrp);
         stateManager.updateLoadStates();
@@ -259,7 +253,7 @@ public void whenInstertingShipmentWithLoadConstraintWhereCapIsNotSufficient_capC
         constraintManager.addConstraint(new ShipmentPickupsFirstConstraint(), ConstraintManager.Priority.CRITICAL);
 
         ShipmentInsertionCalculator insertionCalculator = new ShipmentInsertionCalculator(routingCosts, activityCosts,
-                        activityInsertionCostsCalculator, constraintManager);
+            activityInsertionCostsCalculator, constraintManager);
         insertionCalculator.setJobActivityFactory(vrp.getJobActivityFactory());
 
         InsertionData iData = insertionCalculator.getInsertionData(route, shipment3, vehicle, 0.0, DriverImpl.noDriver(), Double.MAX_VALUE);
@@ -278,8 +272,8 @@ public void whenInsertingServiceWhileNoCapIsAvailable_itMustReturnNoInsertionDat
         VehicleRoute route = VehicleRoute.emptyRoute();
         route.setVehicleAndDepartureTime(vehicle, 0.0);
 
-        add(vrp,route,shipment,0,0);
-        add(vrp,route,shipment2,1,2);
+        add(vrp, route, shipment, 0, 0);
+        add(vrp, route, shipment2, 1, 2);
 
         StateManager stateManager = new StateManager(vrp);
         stateManager.updateLoadStates();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestAuxilliaryCostCalculator.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestAuxilliaryCostCalculator.java
index b3967499f..de057b885 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestAuxilliaryCostCalculator.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestAuxilliaryCostCalculator.java
@@ -17,21 +17,20 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
-
-import java.util.Arrays;
-
-import org.junit.Before;
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingActivityCosts;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.End;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
+import org.junit.Before;
+import org.junit.Test;
+
+import java.util.Arrays;
+
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
 
 public class TestAuxilliaryCostCalculator {
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestCalculatesServiceInsertion.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestCalculatesServiceInsertion.java
index 517484d0f..9f38aa06d 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestCalculatesServiceInsertion.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestCalculatesServiceInsertion.java
@@ -17,18 +17,6 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.mock;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.Map;
-
-import org.junit.Before;
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.distance.EuclideanDistanceCalculator;
 import com.graphhopper.jsprit.core.distance.ManhattanDistanceCalculator;
@@ -52,6 +40,13 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.Coordinate;
 import com.graphhopper.jsprit.core.util.Locations;
+import org.junit.Before;
+import org.junit.Test;
+
+import java.util.*;
+
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Mockito.mock;
 
 
 public class TestCalculatesServiceInsertion {
@@ -94,7 +89,7 @@ public Coordinate getCoord(String id) {
                 //assume: locationId="x,y"
                 String[] splitted = id.split(",");
                 return Coordinate.newInstance(Double.parseDouble(splitted[0]),
-                                Double.parseDouble(splitted[1]));
+                    Double.parseDouble(splitted[1]));
             }
 
         };
@@ -103,15 +98,15 @@ public Coordinate getCoord(String id) {
             @Override
             public double getTransportTime(Location from, Location to, double departureTime, Driver driver, Vehicle vehicle) {
                 return ManhattanDistanceCalculator.getInstance().calculateDistance(
-                                locations.getCoord(from.getId()), locations.getCoord(to.getId()));
+                    locations.getCoord(from.getId()), locations.getCoord(to.getId()));
             }
 
             @Override
             public double getTransportCost(Location from, Location to, double departureTime, Driver driver, Vehicle vehicle) {
                 return vehicle.getType().getVehicleCostParams().perDistanceUnit
-                                * ManhattanDistanceCalculator.getInstance().calculateDistance(
-                                                locations.getCoord(from.getId()),
-                                                locations.getCoord(to.getId()));
+                    * ManhattanDistanceCalculator.getInstance().calculateDistance(
+                    locations.getCoord(from.getId()),
+                    locations.getCoord(to.getId()));
             }
         };
 
@@ -126,7 +121,7 @@ public double getTransportCost(Location from, Location to, double departureTime,
         jobs.add(second);
 
         vrp = VehicleRoutingProblem.Builder.newInstance().addAllJobs(jobs)
-                        .addVehicle(vehicle).setRoutingCost(costs).build();
+            .addVehicle(vehicle).setRoutingCost(costs).build();
 
         states = new StateManager(vrp);
         states.updateLoadStates();
@@ -217,8 +212,8 @@ public void whenInsertingJobAndCurrRouteIsEmpty_accessEggressCalcShouldReturnZer
     @Test
     public void whenInsertingJobAndCurrRouteAndVehicleHaveTheSameLocation_accessEggressCalcShouldReturnZero() {
         VehicleRoute route = VehicleRoute.Builder.newInstance(newVehicle, DriverImpl.noDriver())
-                        .addService(first)
-                        .build();
+            .addService(first)
+            .build();
 
         AdditionalAccessEgressCalculator accessEgressCalc = new AdditionalAccessEgressCalculator(costs);
         JobInsertionContext iContex = new JobInsertionContext(route, first, newVehicle, mock(Driver.class), 0.0);
@@ -247,8 +242,8 @@ public double getTransportCost(Location from, Location to, double departureTime,
         Vehicle oldVehicle = VehicleImpl.Builder.newInstance("oldV").setStartLocation(Location.newInstance("oldV")).build();
 
         VehicleRoute route = VehicleRoute.Builder.newInstance(oldVehicle, DriverImpl.noDriver())
-                        .addService(new Service.Builder("service").addSizeDimension(0, 0).setLocation(Location.newInstance("service")).build())
-                        .build();
+            .addService(new Service.Builder("service").addSizeDimension(0, 0).setLocation(Location.newInstance("service")).build())
+            .build();
 
         Vehicle newVehicle = VehicleImpl.Builder.newInstance("newV").setStartLocation(Location.newInstance("newV")).build();
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestComparator.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestComparator.java
index b90122e88..6f57a4a69 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestComparator.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestComparator.java
@@ -18,24 +18,23 @@
 
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.job.Job;
+import com.graphhopper.jsprit.core.problem.job.Service;
+import org.junit.Test;
+
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Comparator;
 import java.util.List;
 
-import org.junit.Test;
-
-import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
-
 /**
  * Created by schroeder on 24/05/16.
  */
 public class TestComparator {
 
     @Test
-    public void test(){
+    public void test() {
         Service s = new Service.Builder("1").setLocation(Location.newInstance("loc"))
             .setPriority(1).build();
         Service s2 = new Service.Builder("2").setLocation(Location.newInstance("loc"))
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestLocalActivityInsertionCostsCalculator.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestLocalActivityInsertionCostsCalculator.java
index db6c01646..fe689f10d 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestLocalActivityInsertionCostsCalculator.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestLocalActivityInsertionCostsCalculator.java
@@ -17,16 +17,6 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-
-import org.junit.Before;
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.algorithm.state.UpdateActivityTimes;
 import com.graphhopper.jsprit.core.algorithm.state.UpdateFutureWaitingTimes;
@@ -48,6 +38,15 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.CostFactory;
+import org.junit.Before;
+import org.junit.Test;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
 
 public class TestLocalActivityInsertionCostsCalculator {
 
@@ -469,7 +468,7 @@ public void whenAddingNewWithTWBetweenTwoActs4_itShouldCalcInsertionCostsCorrect
         activity start time delay at next act = start-time-old - start-time-new is always bigger than subsequent waiting time savings
 		 */
         /*
-		old = 10 + 30 + 10 = 50
+        old = 10 + 30 + 10 = 50
 		new = 80 + 0 - 10 - min{80,40} = 30
 		 */
     }
@@ -569,7 +568,7 @@ public void whenAddingNewWithTWBetweenTwoActs3WithVarStart_itShouldCalcInsertion
 
         StateManager stateManager = getStateManager(vrp, route);
         stateManager.updateTimeWindowStates();
-        stateManager.informInsertionStarts(Arrays.asList(route),new ArrayList<Job>());
+        stateManager.informInsertionStarts(Arrays.asList(route), new ArrayList<Job>());
 
         LocalActivityInsertionCostsCalculator calc = new LocalActivityInsertionCostsCalculator(CostFactory.createEuclideanCosts(), new WaitingTimeCosts(), stateManager);
         calc.setSolutionCompletenessRatio(1.);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestMixedServiceAndShipmentsProblemOnRouteLevel.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestMixedServiceAndShipmentsProblemOnRouteLevel.java
index 7cad5e030..bb82ec3d0 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestMixedServiceAndShipmentsProblemOnRouteLevel.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestMixedServiceAndShipmentsProblemOnRouteLevel.java
@@ -17,23 +17,18 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
-import static org.junit.Assert.assertTrue;
-
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
 import com.graphhopper.jsprit.core.problem.job.Delivery;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
-import com.graphhopper.jsprit.core.problem.vehicle.InfiniteFleetManagerFactory;
-import com.graphhopper.jsprit.core.problem.vehicle.VehicleFleetManager;
-import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
-import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
-import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
+import com.graphhopper.jsprit.core.problem.vehicle.*;
 import com.graphhopper.jsprit.core.util.Coordinate;
 import com.graphhopper.jsprit.core.util.TestUtils;
+import org.junit.Test;
+
+import static org.junit.Assert.assertTrue;
 
 
 public class TestMixedServiceAndShipmentsProblemOnRouteLevel {
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/DBSCANClustererTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/DBSCANClustererTest.java
index 0c8709ae9..498c57727 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/DBSCANClustererTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/DBSCANClustererTest.java
@@ -18,12 +18,6 @@
 
 package com.graphhopper.jsprit.core.algorithm.ruin;
 
-import static org.junit.Assert.assertEquals;
-
-import java.util.List;
-
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.distance.EuclideanDistanceCalculator;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.job.Job;
@@ -31,6 +25,11 @@
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.util.DefaultCosts;
+import org.junit.Test;
+
+import java.util.List;
+
+import static org.junit.Assert.assertEquals;
 
 
 /**
@@ -48,7 +47,7 @@ public void itShouldReturnOneClusterOfSizeTwo() {
         VehicleRoute r = VehicleRoute.Builder.newInstance(v).addService(s1).addService(s2).addService(s3).build();
 
         DBSCANClusterer c = new DBSCANClusterer(
-                        new DefaultCosts(EuclideanDistanceCalculator.getInstance()));
+            new DefaultCosts(EuclideanDistanceCalculator.getInstance()));
         c.setEpsDistance(3);
         List<Job> cluster = c.getRandomCluster(r);
         assertEquals(2, cluster.size());
@@ -81,10 +80,10 @@ public void itShouldReturnTwoClusters() {
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoute r = VehicleRoute.Builder.newInstance(v).addService(s1).addService(s2).addService(s3)
-                        .addService(s0).addService(s4).addService(s5).build();
+            .addService(s0).addService(s4).addService(s5).build();
 
         DBSCANClusterer c = new DBSCANClusterer(
-                        new DefaultCosts(EuclideanDistanceCalculator.getInstance()));
+            new DefaultCosts(EuclideanDistanceCalculator.getInstance()));
         c.setMinPts(1);
         c.setEpsDistance(2);
         List<List<Job>> cluster = c.getClusters(r);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsImplTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsImplTest.java
index 5815322e8..315617129 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsImplTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsImplTest.java
@@ -17,22 +17,21 @@
  */
 package com.graphhopper.jsprit.core.algorithm.ruin;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-
-import java.util.ArrayList;
-import java.util.Iterator;
-import java.util.List;
-
-import org.junit.Before;
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.algorithm.ruin.distance.CoordinateJobDistance;
 import com.graphhopper.jsprit.core.algorithm.ruin.distance.JobDistance;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.job.Service;
+import org.junit.Before;
+import org.junit.Test;
+
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
 
 
 public class JobNeighborhoodsImplTest {
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsOptimizedTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsOptimizedTest.java
index 701978439..1bd16a7e4 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsOptimizedTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsOptimizedTest.java
@@ -17,24 +17,22 @@
  */
 package com.graphhopper.jsprit.core.algorithm.ruin;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-
-import java.util.ArrayList;
-import java.util.Iterator;
-import java.util.List;
-
-import org.junit.Before;
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.algorithm.ruin.distance.CoordinateJobDistance;
 import com.graphhopper.jsprit.core.algorithm.ruin.distance.JobDistance;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.job.Service;
-
 import junit.framework.Assert;
+import org.junit.Before;
+import org.junit.Test;
+
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
 
 
 public class JobNeighborhoodsOptimizedTest {
@@ -70,7 +68,7 @@ public void doBefore() {
 
     @Test
     public void whenRequestingNeighborhoodOfTargetJob_nNeighborsShouldBeTwo() {
-        JobNeighborhoodsOptimized jn = new JobNeighborhoodsOptimized(vrp,jobDistance,2);
+        JobNeighborhoodsOptimized jn = new JobNeighborhoodsOptimized(vrp, jobDistance, 2);
         jn.initialise();
         Iterator<Job> iter = jn.getNearestNeighborsIterator(2, target);
         List<Service> services = new ArrayList<Service>();
@@ -82,7 +80,7 @@ public void whenRequestingNeighborhoodOfTargetJob_nNeighborsShouldBeTwo() {
 
     @Test
     public void whenRequestingNeighborhoodOfTargetJob_s2ShouldBeNeighbor() {
-        JobNeighborhoodsOptimized jn = new JobNeighborhoodsOptimized(vrp,jobDistance,2);
+        JobNeighborhoodsOptimized jn = new JobNeighborhoodsOptimized(vrp, jobDistance, 2);
         jn.initialise();
         Iterator<Job> iter = jn.getNearestNeighborsIterator(2, target);
         List<Service> services = new ArrayList<Service>();
@@ -94,7 +92,7 @@ public void whenRequestingNeighborhoodOfTargetJob_s2ShouldBeNeighbor() {
 
     @Test
     public void whenRequestingNeighborhoodOfTargetJob_s4ShouldBeNeighbor() {
-        JobNeighborhoodsOptimized jn = new JobNeighborhoodsOptimized(vrp,jobDistance,2);
+        JobNeighborhoodsOptimized jn = new JobNeighborhoodsOptimized(vrp, jobDistance, 2);
         jn.initialise();
         Iterator<Job> iter = jn.getNearestNeighborsIterator(2, target);
         List<Service> services = new ArrayList<Service>();
@@ -106,7 +104,7 @@ public void whenRequestingNeighborhoodOfTargetJob_s4ShouldBeNeighbor() {
 
     @Test
     public void whenRequestingNeighborhoodOfTargetJob_sizeShouldBe4() {
-        JobNeighborhoodsOptimized jn = new JobNeighborhoodsOptimized(vrp,jobDistance,4);
+        JobNeighborhoodsOptimized jn = new JobNeighborhoodsOptimized(vrp, jobDistance, 4);
         jn.initialise();
         Iterator<Job> iter = jn.getNearestNeighborsIterator(4, target);
         List<Service> services = new ArrayList<Service>();
@@ -118,22 +116,22 @@ public void whenRequestingNeighborhoodOfTargetJob_sizeShouldBe4() {
 
     @Test
     public void whenRequestingNeighborhoodOfTargetJob_neighborsShouldBeCorrect() {
-        JobNeighborhoodsOptimized jn = new JobNeighborhoodsOptimized(vrp,jobDistance,4);
+        JobNeighborhoodsOptimized jn = new JobNeighborhoodsOptimized(vrp, jobDistance, 4);
         jn.initialise();
         Iterator<Job> iter = jn.getNearestNeighborsIterator(4, s7);
         List<Service> services = new ArrayList<Service>();
         while (iter.hasNext()) {
             services.add((Service) iter.next());
         }
-        Assert.assertEquals(s6,services.get(0));
-        Assert.assertEquals(s5,services.get(1));
-        Assert.assertEquals(target,services.get(2));
-        Assert.assertEquals(s2,services.get(3));
+        Assert.assertEquals(s6, services.get(0));
+        Assert.assertEquals(s5, services.get(1));
+        Assert.assertEquals(target, services.get(2));
+        Assert.assertEquals(s2, services.get(3));
     }
 
     @Test
     public void whenRequestingMoreNeighborsThanExisting_itShouldReturnMaxNeighbors() {
-        JobNeighborhoodsOptimized jn = new JobNeighborhoodsOptimized(vrp,jobDistance,2);
+        JobNeighborhoodsOptimized jn = new JobNeighborhoodsOptimized(vrp, jobDistance, 2);
         jn.initialise();
         Iterator<Job> iter = jn.getNearestNeighborsIterator(100, target);
         List<Service> services = new ArrayList<Service>();
@@ -144,5 +142,4 @@ public void whenRequestingMoreNeighborsThanExisting_itShouldReturnMaxNeighbors()
     }
 
 
-
 }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsWithCapRestrictionImplTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsWithCapRestrictionImplTest.java
index b4ca09632..a82e88414 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsWithCapRestrictionImplTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsWithCapRestrictionImplTest.java
@@ -17,22 +17,21 @@
  */
 package com.graphhopper.jsprit.core.algorithm.ruin;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-
-import java.util.ArrayList;
-import java.util.Iterator;
-import java.util.List;
-
-import org.junit.Before;
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.algorithm.ruin.distance.CoordinateJobDistance;
 import com.graphhopper.jsprit.core.algorithm.ruin.distance.JobDistance;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.job.Service;
+import org.junit.Before;
+import org.junit.Test;
+
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
 
 
 public class JobNeighborhoodsWithCapRestrictionImplTest {
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinBreakTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinBreakTest.java
index 03f2423fd..fdab05438 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinBreakTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinBreakTest.java
@@ -18,12 +18,6 @@
 
 package com.graphhopper.jsprit.core.algorithm.ruin;
 
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Break;
@@ -32,8 +26,12 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.BreakActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
-
 import junit.framework.Assert;
+import org.junit.Test;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
 
 /**
  * Created by schroeder on 04/08/15.
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinClustersTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinClustersTest.java
index be2dc8ae3..e9f4f3d6a 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinClustersTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinClustersTest.java
@@ -18,12 +18,6 @@
 
 package com.graphhopper.jsprit.core.algorithm.ruin;
 
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Random;
-
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.algorithm.ruin.distance.DefaultJobDistance;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
@@ -32,8 +26,12 @@
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.util.RandomNumberGeneration;
-
 import junit.framework.Assert;
+import org.junit.Test;
+
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Random;
 
 /**
  * Created by schroeder on 06/03/15.
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinWorstTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinWorstTest.java
index 7cc45e874..a086baecf 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinWorstTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinWorstTest.java
@@ -18,14 +18,6 @@
 
 package com.graphhopper.jsprit.core.algorithm.ruin;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-
-import java.util.Arrays;
-import java.util.Collection;
-
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
@@ -34,6 +26,13 @@
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.util.Coordinate;
+import org.junit.Test;
+
+import java.util.Arrays;
+import java.util.Collection;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
 
 /**
  * Created by schroeder on 30/01/15.
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/AverageJobDistanceTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/AverageJobDistanceTest.java
index d83dae570..16f8698f4 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/AverageJobDistanceTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/AverageJobDistanceTest.java
@@ -17,12 +17,6 @@
  */
 package com.graphhopper.jsprit.core.algorithm.ruin.distance;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-
-import org.junit.Before;
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.distance.EuclideanDistanceCalculator;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.job.Service;
@@ -30,6 +24,11 @@
 import com.graphhopper.jsprit.core.util.Coordinate;
 import com.graphhopper.jsprit.core.util.DefaultCosts;
 import com.graphhopper.jsprit.core.util.Locations;
+import org.junit.Before;
+import org.junit.Test;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
 
 
 public class AverageJobDistanceTest {
@@ -46,12 +45,12 @@ public Coordinate getCoord(String id) {
                 //assume: locationId="x,y"
                 String[] splitted = id.split(",");
                 return Coordinate.newInstance(Double.parseDouble(splitted[0]),
-                                Double.parseDouble(splitted[1]));
+                    Double.parseDouble(splitted[1]));
             }
 
         };
         routingCosts = new DefaultCosts(EuclideanDistanceCalculator.getInstance())
-                        .withCoordinateConverter(locations);
+            .withCoordinateConverter(locations);
 
     }
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/TestJobDistanceAvgCosts.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/TestJobDistanceAvgCosts.java
index 16368a079..19e64ce6c 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/TestJobDistanceAvgCosts.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/TestJobDistanceAvgCosts.java
@@ -17,13 +17,12 @@
  */
 package com.graphhopper.jsprit.core.algorithm.ruin.distance;
 
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.driver.Driver;
 import com.graphhopper.jsprit.core.problem.job.Service;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
+import org.junit.Test;
 
 
 public class TestJobDistanceAvgCosts {
@@ -41,13 +40,13 @@ public double getBackwardTransportTime(Location from, Location to, double arriva
 
             @Override
             public double getBackwardTransportCost(Location from, Location to,
-                    double arrivalTime, Driver driver, Vehicle vehicle) {
+                                                   double arrivalTime, Driver driver, Vehicle vehicle) {
                 return 0;
             }
 
             @Override
             public double getTransportCost(Location from, Location to,
-                    double departureTime, Driver driver, Vehicle vehicle) {
+                                           double departureTime, Driver driver, Vehicle vehicle) {
                 @SuppressWarnings("unused")
                 String vehicleId = vehicle.getId();
                 return 0;
@@ -55,7 +54,7 @@ public double getTransportCost(Location from, Location to,
 
             @Override
             public double getTransportTime(Location from, Location to,
-                    double departureTime, Driver driver, Vehicle vehicle) {
+                                           double departureTime, Driver driver, Vehicle vehicle) {
                 return 0;
             }
         };
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/selector/SelectBestTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/selector/SelectBestTest.java
index 0ae253b0d..26b7dce72 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/selector/SelectBestTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/selector/SelectBestTest.java
@@ -17,19 +17,18 @@
  */
 package com.graphhopper.jsprit.core.algorithm.selector;
 
+import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
+import org.junit.Test;
+
+import java.util.Arrays;
+import java.util.Collections;
+
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertThat;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
-import java.util.Arrays;
-import java.util.Collections;
-
-import org.junit.Test;
-
-import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
-
 
 public class SelectBestTest {
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/selector/SelectRandomlyTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/selector/SelectRandomlyTest.java
index 0f6f599d8..a67a3f506 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/selector/SelectRandomlyTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/selector/SelectRandomlyTest.java
@@ -17,19 +17,18 @@
  */
 package com.graphhopper.jsprit.core.algorithm.selector;
 
-import static org.hamcrest.CoreMatchers.is;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertThat;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
+import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
+import org.junit.Test;
 
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.Random;
 
-import org.junit.Test;
-
-import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
+import static org.hamcrest.CoreMatchers.is;
+import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertThat;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
 
 
 public class SelectRandomlyTest {
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/HardPickupAndDeliveryShipmentActivityConstraintTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/HardPickupAndDeliveryShipmentActivityConstraintTest.java
index 61951db69..f4b3f4f42 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/HardPickupAndDeliveryShipmentActivityConstraintTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/HardPickupAndDeliveryShipmentActivityConstraintTest.java
@@ -17,11 +17,6 @@
  */
 package com.graphhopper.jsprit.core.algorithm.state;
 
-import static org.junit.Assert.assertEquals;
-
-import org.junit.Before;
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
@@ -36,6 +31,10 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
+import org.junit.Before;
+import org.junit.Test;
+
+import static org.junit.Assert.assertEquals;
 
 
 public class HardPickupAndDeliveryShipmentActivityConstraintTest {
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/LoadStateTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/LoadStateTest.java
index 5b889dde5..17b798262 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/LoadStateTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/LoadStateTest.java
@@ -18,28 +18,23 @@
 
 package com.graphhopper.jsprit.core.algorithm.state;
 
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
-
-import java.util.Arrays;
-import java.util.Collections;
-
-import org.junit.Before;
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.CopyJobActivityFactory;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.job.Delivery;
-import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Pickup;
-import com.graphhopper.jsprit.core.problem.job.Service;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.*;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
+import org.junit.Before;
+import org.junit.Test;
+
+import java.util.Arrays;
+import java.util.Collections;
+
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
 
 /**
  * Unit tests to test correct calc of load states
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/StateManagerTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/StateManagerTest.java
index 134bf93b2..421786644 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/StateManagerTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/StateManagerTest.java
@@ -17,19 +17,6 @@
  */
 package com.graphhopper.jsprit.core.algorithm.state;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import org.junit.Assert;
-import org.junit.Before;
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.JobActivityFactory;
 import com.graphhopper.jsprit.core.problem.Location;
@@ -44,6 +31,16 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Test;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import static org.junit.Assert.*;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
 
 public class StateManagerTest {
 
@@ -61,15 +58,15 @@
 
     private VehicleRoute getRoute(Vehicle vehicle) {
         return VehicleRoute.Builder.newInstance(vehicle).setJobActivityFactory(new ActFac())
-                        .addService(new Service.Builder("s")
-                                        .setLocation(Location.newInstance("loc")).build())
-                        .build();
+            .addService(new Service.Builder("s")
+                .setLocation(Location.newInstance("loc")).build())
+            .build();
     }
 
     private VehicleRoutingProblem vrpMock;
 
     @Before
-    public void doBefore(){
+    public void doBefore() {
         vrpMock = mock(VehicleRoutingProblem.class);
         when(vrpMock.getFleetSize()).thenReturn(VehicleRoutingProblem.FleetSize.INFINITE);
     }
@@ -347,7 +344,7 @@ public void whenClearing_arrElementsShouldBeNull() {
     }
 
     @Test
-    public void arrayIniShouldWork(){
+    public void arrayIniShouldWork() {
         VehicleType type = VehicleTypeImpl.Builder.newInstance("t").setCostPerDistance(4.).build();
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance("loc")).build();
         VehicleImpl vehicle2 = VehicleImpl.Builder.newInstance("v2").setStartLocation(Location.newInstance("loc")).setType(type).build();
@@ -361,9 +358,9 @@ public void arrayIniShouldWork(){
 
         StateManager stateManager = new StateManager(vrp);
         StateId myState = null;
-        for(int i=0;i<10;i++){
-            myState = stateManager.createStateId("myState"+i);
+        for (int i = 0; i < 10; i++) {
+            myState = stateManager.createStateId("myState" + i);
         }
-        stateManager.putTypedInternalRouteState(route,myState,1.);
+        stateManager.putTypedInternalRouteState(route, myState, 1.);
     }
 }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdatePracticalTimeWindowTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdatePracticalTimeWindowTest.java
index 359e7a925..a773475ef 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdatePracticalTimeWindowTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdatePracticalTimeWindowTest.java
@@ -17,13 +17,6 @@
  */
 package com.graphhopper.jsprit.core.algorithm.state;
 
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
-
-import org.junit.Before;
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.problem.CopyJobActivityFactory;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
@@ -40,6 +33,12 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.util.CostFactory;
+import org.junit.Before;
+import org.junit.Test;
+
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
 
 public class UpdatePracticalTimeWindowTest {
 
@@ -78,7 +77,7 @@ public void doBefore() {
         final VehicleRoutingProblem vrp = vrpBuilder.addJob(pickup).addJob(pickup2).addJob(delivery).build();
 
         route = VehicleRoute.Builder.newInstance(vehicle, mock(Driver.class)).setJobActivityFactory(new CopyJobActivityFactory())
-                        .addService(pickup).addService(delivery).addService(pickup2).build();
+            .addService(pickup).addService(delivery).addService(pickup2).build();
 
         reverseActivityVisitor.visit(route);
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdateRequiredSkillsTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdateRequiredSkillsTest.java
index 268a5cb9c..17f02f615 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdateRequiredSkillsTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdateRequiredSkillsTest.java
@@ -18,14 +18,6 @@
 
 package com.graphhopper.jsprit.core.algorithm.state;
 
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertTrue;
-
-import java.util.Arrays;
-
-import org.junit.Before;
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.Skills;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
@@ -34,8 +26,14 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
-
 import junit.framework.Assert;
+import org.junit.Before;
+import org.junit.Test;
+
+import java.util.Arrays;
+
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertTrue;
 
 /**
  * Tests skill updater
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdateVehicleDependentTimeWindowTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdateVehicleDependentTimeWindowTest.java
index 989de09c8..f9404a58a 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdateVehicleDependentTimeWindowTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdateVehicleDependentTimeWindowTest.java
@@ -18,19 +18,6 @@
 
 package com.graphhopper.jsprit.core.algorithm.state;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Collections;
-
-import org.junit.Assert;
-import org.junit.Before;
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.problem.CopyJobActivityFactory;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
@@ -47,6 +34,16 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.util.Coordinate;
 import com.graphhopper.jsprit.core.util.CostFactory;
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Test;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Collections;
+
+import static org.junit.Assert.*;
 
 /**
  * unit tests to test vehicle dependent time window updater
@@ -107,8 +104,8 @@ public void doBefore() {
         vrp = vrpBuilder.build();
 
         route = VehicleRoute.Builder.newInstance(vehicle).setJobActivityFactory(new CopyJobActivityFactory())
-                .addService(service).addService(service2)
-                .addService(service3).build();
+            .addService(service).addService(service2)
+            .addService(service3).build();
 
 
         stateManager = new StateManager(vrp);
@@ -142,88 +139,88 @@ public void whenSwitchIsNotAllowed_itShouldCalOnlyStatesOfCurrentVehicle() {
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct3() {
         assertEquals(70., stateManager.getActivityState(route.getActivities().get(2), vehicle,
-                InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+            InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
 
     }
 
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct3_v2() {
         assertEquals(70., stateManager.getActivityState(route.getActivities().get(2), vehicle,
-                InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+            InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct3WithVehicle2() {
         assertEquals(30., stateManager.getActivityState(route.getActivities().get(2), vehicle2,
-                InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+            InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct3WithVehicle3() {
         assertEquals(90., stateManager.getActivityState(route.getActivities().get(2), vehicle3,
-                InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+            InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct2() {
         assertEquals(60., stateManager.getActivityState(route.getActivities().get(1), vehicle,
-                InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+            InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct2_v2() {
         assertEquals(60., stateManager.getActivityState(route.getActivities().get(1), vehicle,
-                InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+            InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct2WithVehicle2() {
         assertEquals(20., stateManager.getActivityState(route.getActivities().get(1), vehicle2,
-                InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+            InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct2WithVehicle3() {
         assertEquals(80., stateManager.getActivityState(route.getActivities().get(1), vehicle3,
-                InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+            InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct2WithEquivalentOfVehicle3() {
         assertEquals(80., stateManager.getActivityState(route.getActivities().get(1), equivalentOf3,
-                InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+            InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct1WithVehicle2() {
         assertEquals(10., stateManager.getActivityState(route.getActivities().get(0), vehicle2,
-                InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+            InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct1WithVehicle3() {
         assertEquals(70., stateManager.getActivityState(route.getActivities().get(0), vehicle3,
-                InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+            InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
 
     @Test
-    public void twUpdateShouldWorkWithMultipleTWs(){
+    public void twUpdateShouldWorkWithMultipleTWs() {
         //
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance("0,0")).setEarliestStart(0.).setLatestArrival(100.).build();
         Service service = new Service.Builder("s1").setLocation(Location.newInstance("10,0"))
-                .addTimeWindow(10,20).addTimeWindow(30,40).build();
+            .addTimeWindow(10, 20).addTimeWindow(30, 40).build();
         Service service2 = new Service.Builder("s2")
-                .addTimeWindow(20,30).addTimeWindow(40,60).addTimeWindow(70,80).setLocation(Location.newInstance("20,0")).build();
+            .addTimeWindow(20, 30).addTimeWindow(40, 60).addTimeWindow(70, 80).setLocation(Location.newInstance("20,0")).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(service).addJob(service2).addVehicle(vehicle)
-                .setRoutingCost(routingCosts).build();
+            .setRoutingCost(routingCosts).build();
 
         VehicleRoute route = VehicleRoute.Builder.newInstance(vehicle).setJobActivityFactory(vrp.getJobActivityFactory())
-                .addService(service).addService(service2, TimeWindow.newInstance(70, 80)).build();
+            .addService(service).addService(service2, TimeWindow.newInstance(70, 80)).build();
 
         StateManager stateManager = new StateManager(vrp);
-        UpdateVehicleDependentPracticalTimeWindows updater = new UpdateVehicleDependentPracticalTimeWindows(stateManager,routingCosts,activityCosts);
+        UpdateVehicleDependentPracticalTimeWindows updater = new UpdateVehicleDependentPracticalTimeWindows(stateManager, routingCosts, activityCosts);
         updater.setVehiclesToUpdate(new UpdateVehicleDependentPracticalTimeWindows.VehiclesToUpdate() {
 
             @Override
@@ -238,34 +235,34 @@ public void twUpdateShouldWorkWithMultipleTWs(){
         stateManager.addStateUpdater(updater);
         stateManager.informInsertionStarts(Arrays.asList(route), Collections.<Job>emptyList());
 
-        assertEquals(80.,stateManager.getActivityState(route.getActivities().get(1),vehicle,
-                InternalStates.LATEST_OPERATION_START_TIME, Double.class),0.01);
+        assertEquals(80., stateManager.getActivityState(route.getActivities().get(1), vehicle,
+            InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
     @Test
-    public void updateOfOpenRoutesShouldBeDoneCorrectly(){
+    public void updateOfOpenRoutesShouldBeDoneCorrectly() {
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v")
-                .setReturnToDepot(false)
-                .setStartLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(0, 0)).build())
-                .setLatestArrival(51)
-                .build();
+            .setReturnToDepot(false)
+            .setStartLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(0, 0)).build())
+            .setLatestArrival(51)
+            .build();
 
         Service service = new Service.Builder("s")
-                .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(50, 0)).build()).build();
+            .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(50, 0)).build()).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance()
-                .addJob(service).addVehicle(vehicle).setFleetSize(VehicleRoutingProblem.FleetSize.FINITE)
-                .build();
+            .addJob(service).addVehicle(vehicle).setFleetSize(VehicleRoutingProblem.FleetSize.FINITE)
+            .build();
 
         VehicleRoute route = VehicleRoute.Builder.newInstance(vehicle)
-                .setJobActivityFactory(vrp.getJobActivityFactory()).addService(service).build();
+            .setJobActivityFactory(vrp.getJobActivityFactory()).addService(service).build();
 
         stateManager = new StateManager(vrp);
         UpdateVehicleDependentPracticalTimeWindows updater = new UpdateVehicleDependentPracticalTimeWindows(stateManager, vrp.getTransportCosts(), vrp.getActivityCosts());
         stateManager.addStateUpdater(updater);
         stateManager.reCalculateStates(route);
 
-        Double activityState = stateManager.getActivityState(route.getActivities().get(0),route.getVehicle(), InternalStates.LATEST_OPERATION_START_TIME, Double.class);
+        Double activityState = stateManager.getActivityState(route.getActivities().get(0), route.getVehicle(), InternalStates.LATEST_OPERATION_START_TIME, Double.class);
         Assert.assertEquals(51d, activityState, 0.01);
 
     }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/termination/IterationsWithoutImprovementTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/termination/IterationsWithoutImprovementTest.java
index 34a51f21b..8cdd708a4 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/termination/IterationsWithoutImprovementTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/termination/IterationsWithoutImprovementTest.java
@@ -19,14 +19,12 @@
 package com.graphhopper.jsprit.core.algorithm.termination;
 
 
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
-
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.algorithm.SearchStrategy;
-
 import junit.framework.Assert;
+import org.junit.Test;
+
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
 
 public class IterationsWithoutImprovementTest {
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/termination/TimeTerminationTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/termination/TimeTerminationTest.java
index 435e333a7..095405b71 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/termination/TimeTerminationTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/termination/TimeTerminationTest.java
@@ -18,9 +18,8 @@
 
 package com.graphhopper.jsprit.core.algorithm.termination;
 
-import org.junit.Test;
-
 import junit.framework.Assert;
+import org.junit.Test;
 
 /**
  * Created by schroeder on 16.12.14.
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyserTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyserTest.java
index 762ef63d8..15db859c4 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyserTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyserTest.java
@@ -19,17 +19,6 @@
 package com.graphhopper.jsprit.core.analysis;
 
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
-
-import java.util.Arrays;
-import java.util.Iterator;
-import java.util.List;
-
-import org.junit.Before;
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.distance.ManhattanDistanceCalculator;
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.Location;
@@ -50,8 +39,15 @@
 import com.graphhopper.jsprit.core.util.Coordinate;
 import com.graphhopper.jsprit.core.util.DefaultCosts;
 import com.graphhopper.jsprit.core.util.TestUtils;
-
 import junit.framework.Assert;
+import org.junit.Before;
+import org.junit.Test;
+
+import java.util.Arrays;
+import java.util.Iterator;
+import java.util.List;
+
+import static org.junit.Assert.*;
 
 public class SolutionAnalyserTest {
 
@@ -66,55 +62,55 @@ public void doBefore() {
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").setFixedCost(100.).setCostPerDistance(2.).addCapacityDimension(0, 15).build();
 
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v1").setType(type)
-                        .setStartLocation(Location.newInstance(-5, 0))
-                        .addSkill("skill1").addSkill("skill2")
-                        .build();
+            .setStartLocation(Location.newInstance(-5, 0))
+            .addSkill("skill1").addSkill("skill2")
+            .build();
 
         VehicleImpl vehicle2 = VehicleImpl.Builder.newInstance("v2").setType(type)
-                        .setStartLocation(Location.newInstance(5, 0)).build();
+            .setStartLocation(Location.newInstance(5, 0)).build();
 
         Service s1 = new Service.Builder("s1")
-                        .setTimeWindow(TimeWindow.newInstance(10, 20))
-                        .setLocation(Location.newInstance(-10, 1)).addSizeDimension(0, 2)
-                        .addRequiredSkill("skill1")
-                        .build();
+            .setTimeWindow(TimeWindow.newInstance(10, 20))
+            .setLocation(Location.newInstance(-10, 1)).addSizeDimension(0, 2)
+            .addRequiredSkill("skill1")
+            .build();
         Service s2 = new Service.Builder("s2")
-                        .setLocation(Location.newInstance(-10, 10))
-                        .addSizeDimension(0, 3)
-                        .addRequiredSkill("skill2").addRequiredSkill("skill1")
-                        .build();
+            .setLocation(Location.newInstance(-10, 10))
+            .addSizeDimension(0, 3)
+            .addRequiredSkill("skill2").addRequiredSkill("skill1")
+            .build();
         Shipment shipment1 = Shipment.Builder.newInstance("ship1")
-                        .setPickupLocation(TestUtils.loc(Coordinate.newInstance(-15, 2)))
-                        .setDeliveryLocation(TestUtils.loc(Coordinate.newInstance(-16, 5)))
-                        .addSizeDimension(0, 10)
-                        .setPickupServiceTime(20.)
-                        .setDeliveryServiceTime(20.)
-                        .addRequiredSkill("skill3")
-                        .build();
+            .setPickupLocation(TestUtils.loc(Coordinate.newInstance(-15, 2)))
+            .setDeliveryLocation(TestUtils.loc(Coordinate.newInstance(-16, 5)))
+            .addSizeDimension(0, 10)
+            .setPickupServiceTime(20.)
+            .setDeliveryServiceTime(20.)
+            .addRequiredSkill("skill3")
+            .build();
 
         Service s3 = new Service.Builder("s3")
-                        .setTimeWindow(TimeWindow.newInstance(10, 20))
-                        .setLocation(TestUtils.loc(Coordinate.newInstance(10, 1))).addSizeDimension(0, 2).build();
+            .setTimeWindow(TimeWindow.newInstance(10, 20))
+            .setLocation(TestUtils.loc(Coordinate.newInstance(10, 1))).addSizeDimension(0, 2).build();
 
         Service s4 = new Service.Builder("s4").setLocation(TestUtils.loc(Coordinate.newInstance(10, 10))).addSizeDimension(0, 3).build();
 
         Shipment shipment2 = Shipment.Builder.newInstance("ship2").setPickupLocation(TestUtils.loc(Coordinate.newInstance(15, 2)))
-                        .setPickupServiceTime(20.).setDeliveryServiceTime(20.)
-                        .setDeliveryLocation(TestUtils.loc(Coordinate.newInstance(16, 5))).addSizeDimension(0, 10).build();
+            .setPickupServiceTime(20.).setDeliveryServiceTime(20.)
+            .setDeliveryLocation(TestUtils.loc(Coordinate.newInstance(16, 5))).addSizeDimension(0, 10).build();
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance().addVehicle(vehicle)
-                        .addVehicle(vehicle2)
-                        .addJob(s1)
-                        .addJob(s2).addJob(shipment1).addJob(s3).addJob(s4).addJob(shipment2).setFleetSize(VehicleRoutingProblem.FleetSize.INFINITE);
+            .addVehicle(vehicle2)
+            .addJob(s1)
+            .addJob(s2).addJob(shipment1).addJob(s3).addJob(s4).addJob(shipment2).setFleetSize(VehicleRoutingProblem.FleetSize.INFINITE);
         vrpBuilder.setRoutingCost(new DefaultCosts(ManhattanDistanceCalculator.getInstance())
-                        .withCoordinateConverter(vrpBuilder.getLocations()));
+            .withCoordinateConverter(vrpBuilder.getLocations()));
         vrp = vrpBuilder.build();
 
         VehicleRoute route1 = VehicleRoute.Builder.newInstance(vehicle).setJobActivityFactory(vrp.getJobActivityFactory())
-                        .addService(s1).addPickup(shipment1).addDelivery(shipment1).addService(s2).build();
+            .addService(s1).addPickup(shipment1).addDelivery(shipment1).addService(s2).build();
 
         VehicleRoute route2 = VehicleRoute.Builder.newInstance(vehicle).setJobActivityFactory(vrp.getJobActivityFactory())
-                        .addService(s3).addPickup(shipment2).addDelivery(shipment2).addService(s4).build();
+            .addService(s3).addPickup(shipment2).addDelivery(shipment2).addService(s4).build();
 
         solution = new VehicleRoutingProblemSolution(Arrays.asList(route1, route2), 42);
     }
@@ -124,57 +120,57 @@ public void buildAnotherScenarioWithOnlyOneVehicleAndWithoutAnyConstraintsBefore
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").setFixedCost(100.).setCostPerDistance(2.).addCapacityDimension(0, 15).build();
 
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v1").setType(type)
-                        .setStartLocation(Location.newInstance(-5, 0))
-                        .setLatestArrival(150.)
-                        .build();
+            .setStartLocation(Location.newInstance(-5, 0))
+            .setLatestArrival(150.)
+            .build();
 
         Pickup s1 = new Pickup.Builder("s1")
-                        .setTimeWindow(TimeWindow.newInstance(10, 20))
-                        .setLocation(Location.newInstance(-10, 1))
-                        .addSizeDimension(0, 10)
-                        .build();
+            .setTimeWindow(TimeWindow.newInstance(10, 20))
+            .setLocation(Location.newInstance(-10, 1))
+            .addSizeDimension(0, 10)
+            .build();
         Delivery s2 = new Delivery.Builder("s2")
-                        .setLocation(Location.newInstance(-10, 10))
-                        .setTimeWindow(TimeWindow.newInstance(10, 20))
-                        .addSizeDimension(0, 20)
-                        .build();
+            .setLocation(Location.newInstance(-10, 10))
+            .setTimeWindow(TimeWindow.newInstance(10, 20))
+            .addSizeDimension(0, 20)
+            .build();
         Shipment shipment1 = Shipment.Builder.newInstance("ship1").setPickupLocation(TestUtils.loc(Coordinate.newInstance(-15, 2)))
-                        .setDeliveryLocation(TestUtils.loc(Coordinate.newInstance(-16, 5)))
-                        .addSizeDimension(0, 15)
-                        .setPickupServiceTime(20.).setDeliveryServiceTime(20.)
-                        .setPickupTimeWindow(TimeWindow.newInstance(10, 20)).setDeliveryTimeWindow(TimeWindow.newInstance(10, 20))
-                        .build();
+            .setDeliveryLocation(TestUtils.loc(Coordinate.newInstance(-16, 5)))
+            .addSizeDimension(0, 15)
+            .setPickupServiceTime(20.).setDeliveryServiceTime(20.)
+            .setPickupTimeWindow(TimeWindow.newInstance(10, 20)).setDeliveryTimeWindow(TimeWindow.newInstance(10, 20))
+            .build();
 
         Pickup s3 = new Pickup.Builder("s3")
-                        .setTimeWindow(TimeWindow.newInstance(10, 20))
-                        .setLocation(TestUtils.loc(Coordinate.newInstance(10, 1)))
-                        .addSizeDimension(0, 10)
-                        .build();
+            .setTimeWindow(TimeWindow.newInstance(10, 20))
+            .setLocation(TestUtils.loc(Coordinate.newInstance(10, 1)))
+            .addSizeDimension(0, 10)
+            .build();
         Delivery s4 = new Delivery.Builder("s4").setLocation(Location.newInstance(10, 10))
-                        .addSizeDimension(0, 20)
-                        .setTimeWindow(TimeWindow.newInstance(10, 20))
-                        .build();
+            .addSizeDimension(0, 20)
+            .setTimeWindow(TimeWindow.newInstance(10, 20))
+            .build();
         Shipment shipment2 = Shipment.Builder.newInstance("ship2").setPickupLocation(TestUtils.loc(Coordinate.newInstance(15, 2)))
-                        .setPickupServiceTime(20.).setDeliveryServiceTime(20.)
-                        .setDeliveryLocation(TestUtils.loc(Coordinate.newInstance(16, 5)))
-                        .setPickupTimeWindow(TimeWindow.newInstance(10, 20)).setDeliveryTimeWindow(TimeWindow.newInstance(10, 20))
-                        .addSizeDimension(0, 15).build();
+            .setPickupServiceTime(20.).setDeliveryServiceTime(20.)
+            .setDeliveryLocation(TestUtils.loc(Coordinate.newInstance(16, 5)))
+            .setPickupTimeWindow(TimeWindow.newInstance(10, 20)).setDeliveryTimeWindow(TimeWindow.newInstance(10, 20))
+            .addSizeDimension(0, 15).build();
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance().addVehicle(vehicle)
-                        .addJob(s1)
-                        .addJob(s2).addJob(shipment1).addJob(s3).addJob(s4).addJob(shipment2).setFleetSize(VehicleRoutingProblem.FleetSize.FINITE);
+            .addJob(s1)
+            .addJob(s2).addJob(shipment1).addJob(s3).addJob(s4).addJob(shipment2).setFleetSize(VehicleRoutingProblem.FleetSize.FINITE);
         vrpBuilder.setRoutingCost(new DefaultCosts(ManhattanDistanceCalculator.getInstance())
-                        .withCoordinateConverter(vrpBuilder.getLocations()));
+            .withCoordinateConverter(vrpBuilder.getLocations()));
         vrp = vrpBuilder.build();
 
         VehicleRoute route = VehicleRoute.Builder.newInstance(vehicle).setJobActivityFactory(vrp.getJobActivityFactory())
-                        .addPickup(s3)
-                        .addPickup(shipment2).addDelivery(shipment2)
-                        .addDelivery(s4)
-                        .addDelivery(s2)
-                        .addPickup(shipment1).addDelivery(shipment1)
-                        .addPickup(s1)
-                        .build();
+            .addPickup(s3)
+            .addPickup(shipment2).addDelivery(shipment2)
+            .addDelivery(s4)
+            .addDelivery(s2)
+            .addPickup(shipment1).addDelivery(shipment1)
+            .addPickup(s1)
+            .build();
 
         solution = new VehicleRoutingProblemSolution(Arrays.asList(route), 300);
     }
@@ -234,12 +230,12 @@ public double getDistance(Location fromLocationId, Location toLocationId, double
 
         // this should be the path taken by route 1 including depots
         Coordinate[] route1Path = new Coordinate[]{
-                        Coordinate.newInstance(-5, 0),
-                        Coordinate.newInstance(-10, 1),
-                        Coordinate.newInstance(-15, 2),
-                        Coordinate.newInstance(-16, 5),
-                        Coordinate.newInstance(-10, 10),
-                        Coordinate.newInstance(-5, 0)
+            Coordinate.newInstance(-5, 0),
+            Coordinate.newInstance(-10, 1),
+            Coordinate.newInstance(-15, 2),
+            Coordinate.newInstance(-16, 5),
+            Coordinate.newInstance(-10, 10),
+            Coordinate.newInstance(-5, 0)
 
         };
 
@@ -253,7 +249,7 @@ public double getDistance(Location fromLocationId, Location toLocationId, double
         class ManhattanDistance {
             private double calc(Coordinate from, Coordinate to) {
                 return Math.abs(from.getX() - to.getX())
-                                + Math.abs(from.getY() - to.getY());
+                    + Math.abs(from.getY() - to.getY());
             }
         }
         ManhattanDistance md = new ManhattanDistance();
@@ -391,7 +387,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
         assertEquals(2, analyser.getLoadRightAfterActivity(route.getActivities().get(0), route)
-                        .get(0));
+            .get(0));
     }
 
     @Test
@@ -404,7 +400,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
         assertEquals(12, analyser.getLoadRightAfterActivity(route.getActivities().get(1), route)
-                        .get(0));
+            .get(0));
     }
 
     @Test
@@ -417,7 +413,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
         assertEquals(2, analyser.getLoadRightAfterActivity(route.getActivities().get(2), route)
-                        .get(0));
+            .get(0));
     }
 
     @Test
@@ -430,7 +426,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
         assertEquals(5, analyser.getLoadRightAfterActivity(route.getActivities().get(3), route)
-                        .get(0));
+            .get(0));
     }
 
     @Test
@@ -467,7 +463,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
         assertEquals(0, analyser.getLoadJustBeforeActivity(route.getActivities().get(0), route)
-                        .get(0));
+            .get(0));
     }
 
     @Test
@@ -480,7 +476,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
         assertEquals(2, analyser.getLoadJustBeforeActivity(route.getActivities().get(1), route)
-                        .get(0));
+            .get(0));
     }
 
     @Test
@@ -493,7 +489,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
         assertEquals(12, analyser.getLoadJustBeforeActivity(route.getActivities().get(2), route)
-                        .get(0));
+            .get(0));
     }
 
     @Test
@@ -506,7 +502,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
         assertEquals(2, analyser.getLoadJustBeforeActivity(route.getActivities().get(3), route)
-                        .get(0));
+            .get(0));
     }
 
     @Test
@@ -1000,7 +996,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
         assertEquals(4., analyser.getWaitingTimeAtActivity(route.getActivities().get(0), route),
-                        0.01);
+            0.01);
     }
 
     @Test
@@ -1013,7 +1009,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
         assertEquals(0., analyser.getWaitingTimeAtActivity(route.getActivities().get(1), route),
-                        0.01);
+            0.01);
     }
 
     @Test
@@ -1026,7 +1022,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
         assertEquals(0., analyser.getWaitingTimeAtActivity(route.getActivities().get(2), route),
-                        0.01);
+            0.01);
     }
 
     @Test
@@ -1039,7 +1035,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
         assertEquals(0., analyser.getWaitingTimeAtActivity(route.getActivities().get(3), route),
-                        0.01);
+            0.01);
     }
 
     @Test
@@ -1088,7 +1084,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
         assertEquals(12., analyser.getDistanceAtActivity(route.getActivities().get(1), route),
-                        0.01);
+            0.01);
     }
 
     @Test
@@ -1101,7 +1097,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
         assertEquals(16., analyser.getDistanceAtActivity(route.getActivities().get(2), route),
-                        0.01);
+            0.01);
     }
 
     @Test
@@ -1114,7 +1110,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
         assertEquals(27., analyser.getDistanceAtActivity(route.getActivities().get(3), route),
-                        0.01);
+            0.01);
     }
 
     @Test
@@ -1152,7 +1148,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
         assertEquals(0., analyser.getTimeWindowViolationAtActivity(route.getActivities().get(0),
-                        route), 0.01);
+            route), 0.01);
     }
 
     @Test
@@ -1165,7 +1161,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
         assertEquals(0., analyser.getTimeWindowViolationAtActivity(route.getActivities().get(1),
-                        route), 0.01);
+            route), 0.01);
     }
 
     @Test
@@ -1178,7 +1174,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
         assertEquals(0., analyser.getTimeWindowViolationAtActivity(route.getActivities().get(2),
-                        route), 0.01);
+            route), 0.01);
     }
 
     @Test
@@ -1191,7 +1187,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
         assertEquals(0., analyser.getTimeWindowViolationAtActivity(route.getActivities().get(3),
-                        route), 0.01);
+            route), 0.01);
     }
 
     @Test
@@ -1252,7 +1248,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
         assertEquals(0, analyser.getVariableTransportCostsAtActivity(route.getStart(), route),
-                        0.01);
+            0.01);
     }
 
     @Test
@@ -1265,7 +1261,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
         assertEquals(6. * 2., analyser.getVariableTransportCostsAtActivity(
-                        route.getActivities().get(0), route), 0.01);
+            route.getActivities().get(0), route), 0.01);
     }
 
     @Test
@@ -1278,7 +1274,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
         assertEquals(12. * 2., analyser.getVariableTransportCostsAtActivity(
-                        route.getActivities().get(1), route), 0.01);
+            route.getActivities().get(1), route), 0.01);
     }
 
     @Test
@@ -1291,7 +1287,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
         assertEquals(16. * 2., analyser.getVariableTransportCostsAtActivity(
-                        route.getActivities().get(2), route), 0.01);
+            route.getActivities().get(2), route), 0.01);
     }
 
     @Test
@@ -1304,7 +1300,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
         assertEquals(27. * 2., analyser.getVariableTransportCostsAtActivity(
-                        route.getActivities().get(3), route), 0.01);
+            route.getActivities().get(3), route), 0.01);
     }
 
     @Test
@@ -1317,7 +1313,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
         assertEquals(42. * 2., analyser.getVariableTransportCostsAtActivity(route.getEnd(), route),
-                        0.01);
+            0.01);
     }
 
     @Test
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/CapacityTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/CapacityTest.java
index 1b51352cf..847acc014 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/CapacityTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/CapacityTest.java
@@ -17,14 +17,12 @@
  */
 package com.graphhopper.jsprit.core.problem;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
+import org.junit.Assert;
+import org.junit.Test;
 
 import java.util.Random;
 
-import org.junit.Assert;
-import org.junit.Test;
+import static org.junit.Assert.*;
 
 public class CapacityTest {
 
@@ -373,16 +371,16 @@ public void whenDividingZeroCaps_itShouldReturnZero() {
     }
 
     @Test
-    public void shouldBeEqual(){
+    public void shouldBeEqual() {
         Capacity cap1 = Capacity.Builder.newInstance().build();
         Capacity cap2 = Capacity.Builder.newInstance().build();
         Assert.assertTrue(cap1.equals(cap2));
     }
 
     @Test
-    public void shouldBeEqual2(){
-        Capacity cap1 = Capacity.Builder.newInstance().addDimension(0,10).addDimension(1,100).addDimension(2,1000).build();
-        Capacity cap2 = Capacity.Builder.newInstance().addDimension(0,10).addDimension(2, 1000).addDimension(1,100).build();
+    public void shouldBeEqual2() {
+        Capacity cap1 = Capacity.Builder.newInstance().addDimension(0, 10).addDimension(1, 100).addDimension(2, 1000).build();
+        Capacity cap2 = Capacity.Builder.newInstance().addDimension(0, 10).addDimension(2, 1000).addDimension(1, 100).build();
         Assert.assertTrue(cap1.equals(cap2));
     }
 }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/LocationTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/LocationTest.java
index 0e16ce430..63682b55a 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/LocationTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/LocationTest.java
@@ -18,11 +18,10 @@
 
 package com.graphhopper.jsprit.core.problem;
 
+import com.graphhopper.jsprit.core.util.Coordinate;
 import org.junit.Assert;
 import org.junit.Test;
 
-import com.graphhopper.jsprit.core.util.Coordinate;
-
 /**
  * Created by schroeder on 16.12.14.
  */
@@ -38,7 +37,7 @@ public void whenIndexSet_buildLocation() {
     @Test
     public void whenNameSet_buildLocation() {
         Location l = Location.Builder.newInstance().setName("mystreet 6a").setIndex(1).build();
-        Assert.assertEquals("mystreet 6a",l.getName());
+        Assert.assertEquals("mystreet 6a", l.getName());
     }
 
     @Test
@@ -75,8 +74,8 @@ public void whenIdSetWithFactory_returnCorrectLocation() {
     @Test
     public void whenCoordinateSet_build() {
         Location l = Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(10, 20)).build();
-        Assert.assertEquals(10., l.getCoordinate().getX(),0.001);
-        Assert.assertEquals(20., l.getCoordinate().getY(),0.001);
+        Assert.assertEquals(10., l.getCoordinate().getX(), 0.001);
+        Assert.assertEquals(20., l.getCoordinate().getY(), 0.001);
         Assert.assertTrue(true);
     }
 
@@ -84,8 +83,8 @@ public void whenCoordinateSet_build() {
     public void whenCoordinateSetWithFactory_returnCorrectLocation() {
 //        Location l = Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(10,20)).build();
         Location l = Location.newInstance(10, 20);
-        Assert.assertEquals(10., l.getCoordinate().getX(),0.001);
-        Assert.assertEquals(20., l.getCoordinate().getY(),0.001);
+        Assert.assertEquals(10., l.getCoordinate().getX(), 0.001);
+        Assert.assertEquals(20., l.getCoordinate().getY(), 0.001);
         Assert.assertTrue(true);
     }
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/SkillsTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/SkillsTest.java
index d70c753d7..b13c8bce2 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/SkillsTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/SkillsTest.java
@@ -18,12 +18,12 @@
 
 package com.graphhopper.jsprit.core.problem;
 
-import static org.junit.Assert.assertTrue;
+import org.junit.Test;
 
 import java.util.HashSet;
 import java.util.Set;
 
-import org.junit.Test;
+import static org.junit.Assert.assertTrue;
 
 /**
  * Created by schroeder on 01.07.14.
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblemTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblemTest.java
index 190895173..6a96c886c 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblemTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblemTest.java
@@ -17,30 +17,12 @@
  */
 package com.graphhopper.jsprit.core.problem;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertThat;
-import static org.junit.Assert.assertTrue;
-import static org.junit.matchers.JUnitMatchers.hasItem;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
 import com.graphhopper.jsprit.core.problem.cost.AbstractForwardVehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingActivityCosts;
 import com.graphhopper.jsprit.core.problem.driver.Driver;
 import com.graphhopper.jsprit.core.problem.driver.DriverImpl;
-import com.graphhopper.jsprit.core.problem.job.Delivery;
-import com.graphhopper.jsprit.core.problem.job.Pickup;
-import com.graphhopper.jsprit.core.problem.job.SequentialJobActivityList;
-import com.graphhopper.jsprit.core.problem.job.Service;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.*;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
@@ -49,6 +31,16 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.Coordinate;
 import com.graphhopper.jsprit.core.util.TestUtils;
+import org.junit.Test;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+
+import static org.junit.Assert.*;
+import static org.junit.matchers.JUnitMatchers.hasItem;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
 
 
 public class VehicleRoutingProblemTest {
@@ -133,7 +125,7 @@ public void whenShipmentsAreAdded_vrpShouldContainThem() {
         assertEquals(2, vrp.getJobs().size());
         assertEquals(s, vrp.getJobs().get("s"));
         assertEquals(s2, vrp.getJobs().get("s2"));
-        assertEquals(2,vrp.getAllLocations().size());
+        assertEquals(2, vrp.getAllLocations().size());
     }
 
     @Test
@@ -301,13 +293,13 @@ public void whenSettingRoutingCosts_vprShouldContainIt() {
 
             @Override
             public double getTransportTime(Location from, Location to,
-                    double departureTime, Driver driver, Vehicle vehicle) {
+                                           double departureTime, Driver driver, Vehicle vehicle) {
                 return 0;
             }
 
             @Override
             public double getTransportCost(Location from, Location to,
-                    double departureTime, Driver driver, Vehicle vehicle) {
+                                           double departureTime, Driver driver, Vehicle vehicle) {
                 return 4.0;
             }
         });
@@ -321,7 +313,7 @@ private Location loc(String i) {
     }
 
     @Test(expected = IllegalArgumentException.class)
-    public void whenAddingVehiclesWithSameId_itShouldThrowException(){
+    public void whenAddingVehiclesWithSameId_itShouldThrowException() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").build();
         VehicleImpl vehicle1 = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance("loc")).setType(type).build();
@@ -378,7 +370,7 @@ public void whenAddingTwoVehicleWithDiffType_getAddedVehicleTypesShouldReturnThe
     @Test
     public void whenAddingVehicleWithDiffStartAndEnd_startLocationMustBeRegisteredInLocationMap() {
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance("start"))
-                .setEndLocation(Location.newInstance("end")).build();
+            .setEndLocation(Location.newInstance("end")).build();
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addVehicle(vehicle);
@@ -388,7 +380,7 @@ public void whenAddingVehicleWithDiffStartAndEnd_startLocationMustBeRegisteredIn
     @Test
     public void whenAddingVehicleWithDiffStartAndEnd_endLocationMustBeRegisteredInLocationMap() {
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance("start"))
-                .setEndLocation(Location.newInstance("end")).build();
+            .setEndLocation(Location.newInstance("end")).build();
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addVehicle(vehicle);
@@ -398,7 +390,7 @@ public void whenAddingVehicleWithDiffStartAndEnd_endLocationMustBeRegisteredInLo
     @Test
     public void whenAddingInitialRoute_itShouldBeAddedCorrectly() {
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v")
-                .setStartLocation(Location.newInstance("start")).setEndLocation(Location.newInstance("end")).build();
+            .setStartLocation(Location.newInstance("start")).setEndLocation(Location.newInstance("end")).build();
         VehicleRoute route = VehicleRoute.Builder.newInstance(vehicle, DriverImpl.noDriver()).build();
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addInitialVehicleRoute(route);
@@ -409,11 +401,11 @@ public void whenAddingInitialRoute_itShouldBeAddedCorrectly() {
     @Test
     public void whenAddingInitialRoutes_theyShouldBeAddedCorrectly() {
         VehicleImpl vehicle1 = VehicleImpl.Builder.newInstance("v")
-                .setStartLocation(Location.newInstance("start")).setEndLocation(Location.newInstance("end")).build();
+            .setStartLocation(Location.newInstance("start")).setEndLocation(Location.newInstance("end")).build();
         VehicleRoute route1 = VehicleRoute.Builder.newInstance(vehicle1, DriverImpl.noDriver()).build();
 
         VehicleImpl vehicle2 = VehicleImpl.Builder.newInstance("v")
-                .setStartLocation(Location.newInstance("start")).setEndLocation(Location.newInstance("end")).build();
+            .setStartLocation(Location.newInstance("start")).setEndLocation(Location.newInstance("end")).build();
         VehicleRoute route2 = VehicleRoute.Builder.newInstance(vehicle2, DriverImpl.noDriver()).build();
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
@@ -421,7 +413,7 @@ public void whenAddingInitialRoutes_theyShouldBeAddedCorrectly() {
 
         VehicleRoutingProblem vrp = vrpBuilder.build();
         assertEquals(2, vrp.getInitialVehicleRoutes().size());
-        assertEquals(2,vrp.getAllLocations().size());
+        assertEquals(2, vrp.getAllLocations().size());
     }
 
     @Test
@@ -429,14 +421,14 @@ public void whenAddingInitialRoute_locationOfVehicleMustBeMemorized() {
         Location start = TestUtils.loc("start", Coordinate.newInstance(0, 1));
         Location end = Location.newInstance("end");
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v")
-                .setStartLocation(start)
-                .setEndLocation(end).build();
+            .setStartLocation(start)
+            .setEndLocation(end).build();
         VehicleRoute route = VehicleRoute.Builder.newInstance(vehicle, DriverImpl.noDriver()).build();
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addInitialVehicleRoute(route);
         VehicleRoutingProblem vrp = vrpBuilder.build();
-        assertThat(vrp.getAllLocations(),hasItem(start));
-        assertThat(vrp.getAllLocations(),hasItem(end));
+        assertThat(vrp.getAllLocations(), hasItem(start));
+        assertThat(vrp.getAllLocations(), hasItem(end));
     }
 
     @Test
@@ -445,20 +437,20 @@ public void whenAddingJobAndInitialRouteWithThatJobAfterwards_thisJobShouldNotBe
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addJob(service);
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v")
-                .setStartLocation(TestUtils.loc("start", Coordinate.newInstance(0, 1)))
-                .setEndLocation(Location.newInstance("end")).build();
+            .setStartLocation(TestUtils.loc("start", Coordinate.newInstance(0, 1)))
+            .setEndLocation(Location.newInstance("end")).build();
         VehicleRoute initialRoute = VehicleRoute.Builder.newInstance(vehicle).addService(service).build();
         vrpBuilder.addInitialVehicleRoute(initialRoute);
         VehicleRoutingProblem vrp = vrpBuilder.build();
         assertFalse(vrp.getJobs().containsKey("myService"));
-        assertEquals(3,vrp.getAllLocations().size());
+        assertEquals(3, vrp.getAllLocations().size());
     }
 
     @Test
     public void whenAddingTwoJobs_theyShouldHaveProperIndeces() {
         Service service = new Service.Builder("myService").setLocation(Location.newInstance("loc")).build();
         Shipment shipment = Shipment.Builder.newInstance("shipment").setPickupLocation(Location.Builder.newInstance().setId("pick").build())
-                .setDeliveryLocation(Location.newInstance("del")).build();
+            .setDeliveryLocation(Location.newInstance("del")).build();
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addJob(service);
         vrpBuilder.addJob(shipment);
@@ -466,7 +458,7 @@ public void whenAddingTwoJobs_theyShouldHaveProperIndeces() {
 
         assertEquals(1, service.getIndex());
         assertEquals(2, shipment.getIndex());
-        assertEquals(3,vrp.getAllLocations().size());
+        assertEquals(3, vrp.getAllLocations().size());
 
     }
 
@@ -483,9 +475,9 @@ public void whenAddingTwoServicesWithTheSameId_itShouldThrowException() {
     @Test(expected = IllegalArgumentException.class)
     public void whenAddingTwoShipmentsWithTheSameId_itShouldThrowException() {
         Shipment shipment1 = Shipment.Builder.newInstance("shipment").setPickupLocation(Location.Builder.newInstance().setId("pick").build())
-                .setDeliveryLocation(Location.newInstance("del")).build();
+            .setDeliveryLocation(Location.newInstance("del")).build();
         Shipment shipment2 = Shipment.Builder.newInstance("shipment").setPickupLocation(Location.Builder.newInstance().setId("pick").build())
-                .setDeliveryLocation(Location.newInstance("del")).build();
+            .setDeliveryLocation(Location.newInstance("del")).build();
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addJob(shipment1);
         vrpBuilder.addJob(shipment2);
@@ -496,9 +488,9 @@ public void whenAddingTwoShipmentsWithTheSameId_itShouldThrowException() {
     @Test
     public void whenAddingTwoVehicles_theyShouldHaveProperIndices() {
         VehicleImpl veh1 = VehicleImpl.Builder.newInstance("v1").setStartLocation(TestUtils.loc("start", Coordinate.newInstance(0, 1)))
-                .setEndLocation(Location.newInstance("end")).build();
+            .setEndLocation(Location.newInstance("end")).build();
         VehicleImpl veh2 = VehicleImpl.Builder.newInstance("v2").setStartLocation(TestUtils.loc("start", Coordinate.newInstance(0, 1)))
-                .setEndLocation(Location.newInstance("end")).build();
+            .setEndLocation(Location.newInstance("end")).build();
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addVehicle(veh1);
@@ -513,11 +505,11 @@ public void whenAddingTwoVehicles_theyShouldHaveProperIndices() {
     @Test
     public void whenAddingTwoVehiclesWithSameTypeIdentifier_typeIdentifiersShouldHaveSameIndices() {
         VehicleImpl veh1 = VehicleImpl.Builder.newInstance("v1")
-                .setStartLocation(TestUtils.loc("start", Coordinate.newInstance(0, 1)))
-                .setEndLocation(Location.newInstance("end")).build();
+            .setStartLocation(TestUtils.loc("start", Coordinate.newInstance(0, 1)))
+            .setEndLocation(Location.newInstance("end")).build();
         VehicleImpl veh2 = VehicleImpl.Builder.newInstance("v2")
-                .setStartLocation(TestUtils.loc("start", Coordinate.newInstance(0, 1)))
-                .setEndLocation(Location.newInstance("end")).build();
+            .setStartLocation(TestUtils.loc("start", Coordinate.newInstance(0, 1)))
+            .setEndLocation(Location.newInstance("end")).build();
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addVehicle(veh1);
@@ -532,11 +524,11 @@ public void whenAddingTwoVehiclesWithSameTypeIdentifier_typeIdentifiersShouldHav
     @Test
     public void whenAddingTwoVehiclesDifferentTypeIdentifier_typeIdentifiersShouldHaveDifferentIndices() {
         VehicleImpl veh1 = VehicleImpl.Builder.newInstance("v1")
-                .setStartLocation(TestUtils.loc("start", Coordinate.newInstance(0, 1)))
-                .setEndLocation(Location.newInstance("end")).build();
+            .setStartLocation(TestUtils.loc("start", Coordinate.newInstance(0, 1)))
+            .setEndLocation(Location.newInstance("end")).build();
         VehicleImpl veh2 = VehicleImpl.Builder.newInstance("v2")
-                .setStartLocation(TestUtils.loc("startLoc", Coordinate.newInstance(0, 1)))
-                .setEndLocation(Location.newInstance("end")).build();
+            .setStartLocation(TestUtils.loc("startLoc", Coordinate.newInstance(0, 1)))
+            .setEndLocation(Location.newInstance("end")).build();
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addVehicle(veh1);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/LoadConstraintTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/LoadConstraintTest.java
index 06b2105d9..89636c10b 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/LoadConstraintTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/LoadConstraintTest.java
@@ -18,28 +18,12 @@
 
 package com.graphhopper.jsprit.core.problem.constraint;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
-
-import java.util.Arrays;
-import java.util.Collections;
-
-import org.junit.Before;
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.CopyJobActivityFactory;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.job.Delivery;
-import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Pickup;
-import com.graphhopper.jsprit.core.problem.job.Service;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.*;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivityNEW;
@@ -48,6 +32,15 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindows;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
+import org.junit.Before;
+import org.junit.Test;
+
+import java.util.Arrays;
+import java.util.Collections;
+
+import static org.junit.Assert.*;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
 
 /**
  * unit tests to test load constraints
@@ -299,7 +292,7 @@ public void whenPDRoute_newPickupShouldFitInBetweenStartAndAct1() {
 
         JobInsertionContext context = new JobInsertionContext(pickup_delivery_route, s, pickup_delivery_route.getVehicle(), null, 0.);
         PickupActivityNEW newAct = new PickupActivityNEW(s, "pick", null, 0, newSize,
-                        TimeWindows.ANY_TIME.getTimeWindows());
+            TimeWindows.ANY_TIME.getTimeWindows());
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickup_delivery_route.getStart(), newAct, pickup_delivery_route.getActivities().get(0), 0.);
 
@@ -316,7 +309,7 @@ public void whenPDRoute_newPickupShouldFitInBetweenAct1AndAct2() {
 
         JobInsertionContext context = new JobInsertionContext(pickup_delivery_route, s, pickup_delivery_route.getVehicle(), null, 0.);
         PickupActivityNEW newAct = new PickupActivityNEW(s, "pick", null, 0, newSize,
-                        TimeWindows.ANY_TIME.getTimeWindows());
+            TimeWindows.ANY_TIME.getTimeWindows());
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickup_delivery_route.getActivities().get(0), newAct, pickup_delivery_route.getActivities().get(1), 0.);
 
@@ -333,7 +326,7 @@ public void whenPDRoute_newPickupShouldFitInBetweenAct2AndEnd() {
 
         JobInsertionContext context = new JobInsertionContext(pickup_delivery_route, s, pickup_delivery_route.getVehicle(), null, 0.);
         PickupActivityNEW newAct = new PickupActivityNEW(s, "pick", null, 0, newSize,
-                        TimeWindows.ANY_TIME.getTimeWindows());
+            TimeWindows.ANY_TIME.getTimeWindows());
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickup_delivery_route.getActivities().get(1), newAct, pickup_delivery_route.getEnd(), 0.);
 
@@ -353,7 +346,7 @@ public void whenPDRoute_newPickupShouldNotFitInBetweenStartAndAct1() {
 
         JobInsertionContext context = new JobInsertionContext(pickup_delivery_route, s, pickup_delivery_route.getVehicle(), null, 0.);
         PickupActivityNEW newAct = new PickupActivityNEW(s, "pick", null, 0, newSize,
-                        TimeWindows.ANY_TIME.getTimeWindows());
+            TimeWindows.ANY_TIME.getTimeWindows());
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickup_delivery_route.getStart(), newAct, pickup_delivery_route.getActivities().get(0), 0.);
 
@@ -370,7 +363,7 @@ public void whenPDRoute_newPickupShouldNotFitInBetweenAct1AndAct2() {
 
         JobInsertionContext context = new JobInsertionContext(pickup_delivery_route, s, pickup_delivery_route.getVehicle(), null, 0.);
         PickupActivityNEW newAct = new PickupActivityNEW(s, "pick", null, 0, newSize,
-                        TimeWindows.ANY_TIME.getTimeWindows());
+            TimeWindows.ANY_TIME.getTimeWindows());
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickup_delivery_route.getActivities().get(0), newAct, pickup_delivery_route.getActivities().get(1), 0.);
 
@@ -387,7 +380,7 @@ public void whenPDRoute_newPickupShouldNotFitInBetweenAct2AndEnd() {
 
         JobInsertionContext context = new JobInsertionContext(pickup_delivery_route, s, pickup_delivery_route.getVehicle(), null, 0.);
         PickupActivityNEW newAct = new PickupActivityNEW(s, "pick", null, 0, newSize,
-                        TimeWindows.ANY_TIME.getTimeWindows());
+            TimeWindows.ANY_TIME.getTimeWindows());
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickup_delivery_route.getActivities().get(1), newAct, pickup_delivery_route.getEnd(), 0.);
 
@@ -408,8 +401,8 @@ public void whenPDRoute_newDeliveryShouldFitInBetweenStartAndAct1() {
 
         JobInsertionContext context = new JobInsertionContext(pickup_delivery_route, s, pickup_delivery_route.getVehicle(), null, 0.);
         DeliveryActivityNEW newAct = new DeliveryActivityNEW(s, "del", null, 0,
-                        newSize.invert(),
-                        TimeWindows.ANY_TIME.getTimeWindows());
+            newSize.invert(),
+            TimeWindows.ANY_TIME.getTimeWindows());
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickup_delivery_route.getStart(), newAct, pickup_delivery_route.getActivities().get(0), 0.);
 
@@ -426,8 +419,8 @@ public void whenPDRoute_newDeliveryShouldNotFitInBetweenStartAndAct1() {
 
         JobInsertionContext context = new JobInsertionContext(pickup_delivery_route, s, pickup_delivery_route.getVehicle(), null, 0.);
         DeliveryActivityNEW newAct = new DeliveryActivityNEW(s, "del", null, 0,
-                        newSize.invert(),
-                        TimeWindows.ANY_TIME.getTimeWindows());
+            newSize.invert(),
+            TimeWindows.ANY_TIME.getTimeWindows());
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickup_delivery_route.getStart(), newAct, pickup_delivery_route.getActivities().get(0), 0.);
 
@@ -444,8 +437,8 @@ public void whenPDRoute_newDeliveryShouldFitInBetweenAct1AndAct2() {
 
         JobInsertionContext context = new JobInsertionContext(pickup_delivery_route, s, pickup_delivery_route.getVehicle(), null, 0.);
         DeliveryActivityNEW newAct = new DeliveryActivityNEW(s, "del", null, 0,
-                        newSize.invert(),
-                        TimeWindows.ANY_TIME.getTimeWindows());
+            newSize.invert(),
+            TimeWindows.ANY_TIME.getTimeWindows());
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickup_delivery_route.getActivities().get(0), newAct, pickup_delivery_route.getActivities().get(1), 0.);
 
@@ -462,8 +455,8 @@ public void whenPDRoute_newDeliveryNotShouldFitInBetweenAct1AndAct2() {
 
         JobInsertionContext context = new JobInsertionContext(pickup_delivery_route, s, pickup_delivery_route.getVehicle(), null, 0.);
         DeliveryActivityNEW newAct = new DeliveryActivityNEW(s, "del", null, 0,
-                        newSize.invert(),
-                        TimeWindows.ANY_TIME.getTimeWindows());
+            newSize.invert(),
+            TimeWindows.ANY_TIME.getTimeWindows());
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickup_delivery_route.getActivities().get(0), newAct, pickup_delivery_route.getActivities().get(1), 0.);
 
@@ -480,8 +473,8 @@ public void whenPDRoute_newDeliveryShouldFitInBetweenAct2AndEnd() {
 
         JobInsertionContext context = new JobInsertionContext(pickup_delivery_route, s, pickup_delivery_route.getVehicle(), null, 0.);
         DeliveryActivityNEW newAct = new DeliveryActivityNEW(s, "del", null, 0,
-                        newSize.invert(),
-                        TimeWindows.ANY_TIME.getTimeWindows());
+            newSize.invert(),
+            TimeWindows.ANY_TIME.getTimeWindows());
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickup_delivery_route.getActivities().get(1), newAct, pickup_delivery_route.getEnd(), 0.);
 
@@ -498,8 +491,8 @@ public void whenPDRoute_newDeliveryShouldNotFitInBetweenAct2AndEnd() {
 
         JobInsertionContext context = new JobInsertionContext(pickup_delivery_route, s, pickup_delivery_route.getVehicle(), null, 0.);
         DeliveryActivityNEW newAct = new DeliveryActivityNEW(s, "del", null, 0,
-                        newSize.invert(),
-                        TimeWindows.ANY_TIME.getTimeWindows());
+            newSize.invert(),
+            TimeWindows.ANY_TIME.getTimeWindows());
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickup_delivery_route.getActivities().get(1), newAct, pickup_delivery_route.getEnd(), 0.);
 
@@ -624,7 +617,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldFitInBetweenStartAndAct
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
         PickupActivityNEW newAct = new PickupActivityNEW(s, "pick", null, 0, newSize,
-                        TimeWindows.ANY_TIME.getTimeWindows());
+            TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getStart(), newAct, shipment_route.getActivities().get(0), 0.);
 
@@ -642,7 +635,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldNotFitInBetweenStartAnd
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
         PickupActivityNEW newAct = new PickupActivityNEW(s, "pick", null, 0, newSize,
-                        TimeWindows.ANY_TIME.getTimeWindows());
+            TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getStart(), newAct, shipment_route.getActivities().get(0), 0.);
 
@@ -660,7 +653,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldFitInBetweenAct1AndAct2
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
         PickupActivityNEW newAct = new PickupActivityNEW(s, "pick", null, 0, newSize,
-                        TimeWindows.ANY_TIME.getTimeWindows());
+            TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getActivities().get(0), newAct, shipment_route.getActivities().get(1), 0.);
 
@@ -678,7 +671,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldNotFitInBetweenAct1AndA
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
         PickupActivityNEW newAct = new PickupActivityNEW(s, "pick", null, 0, newSize,
-                        TimeWindows.ANY_TIME.getTimeWindows());
+            TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getActivities().get(0), newAct, shipment_route.getActivities().get(1), 0.);
 
@@ -696,7 +689,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldFitInBetweenAct2AndAct3
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
         PickupActivityNEW newAct = new PickupActivityNEW(s, "pick", null, 0, newSize,
-                        TimeWindows.ANY_TIME.getTimeWindows());
+            TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getActivities().get(1), newAct, shipment_route.getActivities().get(2), 0.);
 
@@ -714,7 +707,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldNotFitInBetweenAct2AndA
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
         PickupActivityNEW newAct = new PickupActivityNEW(s, "pick", null, 0, newSize,
-                        TimeWindows.ANY_TIME.getTimeWindows());
+            TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getActivities().get(1), newAct, shipment_route.getActivities().get(2), 0.);
 
@@ -732,7 +725,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldFitInBetweenAct3AndAct4
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
         PickupActivityNEW newAct = new PickupActivityNEW(s, "pick", null, 0, newSize,
-                        TimeWindows.ANY_TIME.getTimeWindows());
+            TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getActivities().get(2), newAct, shipment_route.getActivities().get(3), 0.);
 
@@ -750,7 +743,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldNotFitInBetweenAct3AndA
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
         PickupActivityNEW newAct = new PickupActivityNEW(s, "pick", null, 0, newSize,
-                        TimeWindows.ANY_TIME.getTimeWindows());
+            TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getActivities().get(2), newAct, shipment_route.getActivities().get(3), 0.);
 
@@ -768,7 +761,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldFitInBetweenAct4AndEnd(
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
         PickupActivityNEW newAct = new PickupActivityNEW(s, "pick", null, 0, newSize,
-                        TimeWindows.ANY_TIME.getTimeWindows());
+            TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getActivities().get(3), newAct, shipment_route.getEnd(), 0.);
 
@@ -786,7 +779,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldNotFitInBetweenAct4AndE
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
         PickupActivityNEW newAct = new PickupActivityNEW(s, "pick", null, 0, newSize,
-                        TimeWindows.ANY_TIME.getTimeWindows());
+            TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getActivities().get(3), newAct, shipment_route.getEnd(), 0.);
 
@@ -808,7 +801,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldFitInBetweenStartAndA
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
         DeliveryActivityNEW newAct = new DeliveryActivityNEW(s, "pick", null, 0,
-                        newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
+            newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getStart(), newAct, shipment_route.getActivities().get(0), 0.);
 
@@ -826,7 +819,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldNotFitInBetweenStartA
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
         DeliveryActivityNEW newAct = new DeliveryActivityNEW(s, "pick", null, 0,
-                        newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
+            newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getStart(), newAct, shipment_route.getActivities().get(0), 0.);
 
@@ -844,7 +837,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldFitInBetweenAct1AndAc
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
         DeliveryActivityNEW newAct = new DeliveryActivityNEW(s, "pick", null, 0,
-                        newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
+            newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getActivities().get(0), newAct, shipment_route.getActivities().get(1), 0.);
 
@@ -862,7 +855,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldNotFitInBetweenAct1An
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
         DeliveryActivityNEW newAct = new DeliveryActivityNEW(s, "pick", null, 0,
-                        newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
+            newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getActivities().get(0), newAct, shipment_route.getActivities().get(1), 0.);
 
@@ -880,7 +873,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldFitInBetweenAct2AndAc
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
         DeliveryActivityNEW newAct = new DeliveryActivityNEW(s, "pick", null, 0,
-                        newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
+            newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getActivities().get(1), newAct, shipment_route.getActivities().get(2), 0.);
 
@@ -898,7 +891,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldNotFitInBetweenAct2An
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
         DeliveryActivityNEW newAct = new DeliveryActivityNEW(s, "pick", null, 0,
-                        newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
+            newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getActivities().get(1), newAct, shipment_route.getActivities().get(2), 0.);
 
@@ -916,7 +909,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldFitInBetweenAct3AndAc
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
         DeliveryActivityNEW newAct = new DeliveryActivityNEW(s, "pick", null, 0,
-                        newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
+            newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getActivities().get(2), newAct, shipment_route.getActivities().get(3), 0.);
 
@@ -934,7 +927,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldNotFitInBetweenAct3An
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
         DeliveryActivityNEW newAct = new DeliveryActivityNEW(s, "pick", null, 0,
-                        newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
+            newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getActivities().get(2), newAct, shipment_route.getActivities().get(3), 0.);
 
@@ -952,7 +945,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldFitInBetweenAct4AndEn
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
         DeliveryActivityNEW newAct = new DeliveryActivityNEW(s, "pick", null, 0,
-                        newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
+            newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getActivities().get(3), newAct, shipment_route.getEnd(), 0.);
 
@@ -969,7 +962,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldNotFitInBetweenAct4An
         JobInsertionContext context = new JobInsertionContext(shipment_route, s, shipment_route.getVehicle(), null, 0.);
 
         DeliveryActivityNEW newAct = new DeliveryActivityNEW(s, "pick", null, 0,
-                        newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
+            newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipment_route.getActivities().get(3), newAct, shipment_route.getEnd(), 0.);
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadRouteLevelConstraintTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadRouteLevelConstraintTest.java
index bddc98afd..b5222bc03 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadRouteLevelConstraintTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadRouteLevelConstraintTest.java
@@ -17,16 +17,6 @@
  */
 package com.graphhopper.jsprit.core.problem.constraint;
 
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
-
-import java.util.Arrays;
-
-import org.junit.Before;
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.algorithm.state.InternalStates;
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.problem.Capacity;
@@ -42,6 +32,15 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
+import org.junit.Before;
+import org.junit.Test;
+
+import java.util.Arrays;
+
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
 
 public class ServiceLoadRouteLevelConstraintTest {
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/SkillConstraintTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/SkillConstraintTest.java
index a072afc88..69b0098e2 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/SkillConstraintTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/SkillConstraintTest.java
@@ -18,14 +18,6 @@
 
 package com.graphhopper.jsprit.core.problem.constraint;
 
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
-
-import java.util.Arrays;
-
-import org.junit.Before;
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
@@ -35,6 +27,13 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
+import org.junit.Before;
+import org.junit.Test;
+
+import java.util.Arrays;
+
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
 
 
 public class SkillConstraintTest {
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/SoftActivityConstraintManagerTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/SoftActivityConstraintManagerTest.java
index 3200d874a..a6d6478db 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/SoftActivityConstraintManagerTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/SoftActivityConstraintManagerTest.java
@@ -17,15 +17,14 @@
  */
 package com.graphhopper.jsprit.core.problem.constraint;
 
+import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
+import org.junit.Test;
+
 import static org.junit.Assert.assertEquals;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
-import org.junit.Test;
-
-import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-
 public class SoftActivityConstraintManagerTest {
 
     @Test
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/SoftRouteConstraintManagerTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/SoftRouteConstraintManagerTest.java
index 66e0ea106..0de9ebf2c 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/SoftRouteConstraintManagerTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/SoftRouteConstraintManagerTest.java
@@ -17,14 +17,13 @@
  */
 package com.graphhopper.jsprit.core.problem.constraint;
 
+import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
+import org.junit.Test;
+
 import static org.junit.Assert.assertEquals;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
-import org.junit.Test;
-
-import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
-
 public class SoftRouteConstraintManagerTest {
 
     @Test
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/TestConstraintManager.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/TestConstraintManager.java
index 0821deca2..7b2c89267 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/TestConstraintManager.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/TestConstraintManager.java
@@ -17,16 +17,15 @@
  */
 package com.graphhopper.jsprit.core.problem.constraint;
 
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.mock;
+import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
+import com.graphhopper.jsprit.core.problem.solution.route.state.RouteAndActivityStateGetter;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.List;
 
-import org.junit.Test;
-
-import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.solution.route.state.RouteAndActivityStateGetter;
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Mockito.mock;
 
 public class TestConstraintManager {
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowTest.java
index d33ec795e..80b591581 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowTest.java
@@ -18,19 +18,6 @@
 
 package com.graphhopper.jsprit.core.problem.constraint;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.List;
-
-import org.junit.Before;
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.algorithm.state.InternalStates;
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.algorithm.state.UpdateActivityTimes;
@@ -47,13 +34,14 @@
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupServiceDEPRECATED;
-import com.graphhopper.jsprit.core.problem.vehicle.FiniteFleetManagerFactory;
-import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
-import com.graphhopper.jsprit.core.problem.vehicle.VehicleFleetManager;
-import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
-import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
-import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
+import com.graphhopper.jsprit.core.problem.vehicle.*;
 import com.graphhopper.jsprit.core.util.CostFactory;
+import org.junit.Before;
+import org.junit.Test;
+
+import java.util.*;
+
+import static org.junit.Assert.*;
 
 /**
  * unit tests to test vehicle dependent time-windows
@@ -88,22 +76,22 @@ public void doBefore() {
 
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").build();
         vehicle = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance("0,0"))
-                .setEarliestStart(0.).setLatestArrival(100.).build();
+            .setEarliestStart(0.).setLatestArrival(100.).build();
 
         v2 = VehicleImpl.Builder.newInstance("v2").setType(type).setStartLocation(Location.newInstance("0,0"))
-                .setEarliestStart(0.).setLatestArrival(60.).build();
+            .setEarliestStart(0.).setLatestArrival(60.).build();
 
         v3 = VehicleImpl.Builder.newInstance("v3").setType(type).setStartLocation(Location.newInstance("0,0"))
-                .setEarliestStart(0.).setLatestArrival(50.).build();
+            .setEarliestStart(0.).setLatestArrival(50.).build();
 
         v4 = VehicleImpl.Builder.newInstance("v4").setType(type).setStartLocation(Location.newInstance("0,0"))
-                .setEarliestStart(0.).setLatestArrival(10.).build();
+            .setEarliestStart(0.).setLatestArrival(10.).build();
 
         v5 = VehicleImpl.Builder.newInstance("v5").setType(type).setStartLocation(Location.newInstance("0,0"))
-                .setEarliestStart(60.).setLatestArrival(100.).build();
+            .setEarliestStart(60.).setLatestArrival(100.).build();
 
         v6 = VehicleImpl.Builder.newInstance("v6").setType(type).setStartLocation(Location.newInstance("0,0"))
-                .setEndLocation(Location.newInstance("40,0")).setEarliestStart(0.).setLatestArrival(40.).build();
+            .setEndLocation(Location.newInstance("40,0")).setEarliestStart(0.).setLatestArrival(40.).build();
 
         vrpBuilder.addVehicle(vehicle).addVehicle(v2).addVehicle(v3).addVehicle(v4).addVehicle(v5).addVehicle(v6);
 
@@ -115,7 +103,7 @@ public void doBefore() {
         final VehicleRoutingProblem vrp = vrpBuilder.build();
 
         route = VehicleRoute.Builder.newInstance(vehicle).setJobActivityFactory(new CopyJobActivityFactory())
-                .addService(service).addService(service2).addService(service3).build();
+            .addService(service).addService(service2).addService(service3).build();
 
         stateManager = new StateManager(vrp);
 
@@ -149,19 +137,19 @@ public void doBefore() {
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct3() {
         assertEquals(70., stateManager.getActivityState(route.getActivities().get(2),
-                vehicle, InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+            vehicle, InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct2() {
         assertEquals(60., stateManager.getActivityState(route.getActivities().get(1),
-                vehicle, InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+            vehicle, InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct1() {
         assertEquals(50., stateManager.getActivityState(route.getActivities().get(0),
-                vehicle, InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+            vehicle, InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
     @Test
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowWithStartTimeAndMaxOperationTimeTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowWithStartTimeAndMaxOperationTimeTest.java
index a506960df..e02a6950c 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowWithStartTimeAndMaxOperationTimeTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowWithStartTimeAndMaxOperationTimeTest.java
@@ -18,19 +18,6 @@
 
 package com.graphhopper.jsprit.core.problem.constraint;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.List;
-
-import org.junit.Before;
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.algorithm.state.InternalStates;
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.algorithm.state.UpdateActivityTimes;
@@ -47,13 +34,14 @@
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupServiceDEPRECATED;
-import com.graphhopper.jsprit.core.problem.vehicle.FiniteFleetManagerFactory;
-import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
-import com.graphhopper.jsprit.core.problem.vehicle.VehicleFleetManager;
-import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
-import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
-import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
+import com.graphhopper.jsprit.core.problem.vehicle.*;
 import com.graphhopper.jsprit.core.util.CostFactory;
+import org.junit.Before;
+import org.junit.Test;
+
+import java.util.*;
+
+import static org.junit.Assert.*;
 
 /**
  * unit tests to test vehicle dependent time-windows
@@ -86,22 +74,22 @@ public void doBefore() {
 
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").build();
         vehicle = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance("0,0"))
-                .setEarliestStart(0.).setLatestArrival(100.).build();
+            .setEarliestStart(0.).setLatestArrival(100.).build();
 
         v2 = VehicleImpl.Builder.newInstance("v2").setType(type).setStartLocation(Location.newInstance("0,0"))
-                .setEarliestStart(0.).setLatestArrival(60.).build();
+            .setEarliestStart(0.).setLatestArrival(60.).build();
 
         v3 = VehicleImpl.Builder.newInstance("v3").setType(type).setStartLocation(Location.newInstance("0,0"))
-                .setEarliestStart(0.).setLatestArrival(50.).build();
+            .setEarliestStart(0.).setLatestArrival(50.).build();
 
         v4 = VehicleImpl.Builder.newInstance("v4").setType(type).setStartLocation(Location.newInstance("0,0"))
-                .setEarliestStart(0.).setLatestArrival(10.).build();
+            .setEarliestStart(0.).setLatestArrival(10.).build();
 
         v5 = VehicleImpl.Builder.newInstance("v5").setType(type).setStartLocation(Location.newInstance("0,0"))
-                .setEarliestStart(60.).setLatestArrival(100.).build();
+            .setEarliestStart(60.).setLatestArrival(100.).build();
 
         v6 = VehicleImpl.Builder.newInstance("v6").setType(type).setStartLocation(Location.newInstance("0,0"))
-                .setEndLocation(Location.newInstance("40,0")).setEarliestStart(0.).setLatestArrival(40.).build();
+            .setEndLocation(Location.newInstance("40,0")).setEarliestStart(0.).setLatestArrival(40.).build();
 
         vrpBuilder.addVehicle(vehicle).addVehicle(v2).addVehicle(v3).addVehicle(v4).addVehicle(v5).addVehicle(v6);
 
@@ -113,7 +101,7 @@ public void doBefore() {
         final VehicleRoutingProblem vrp = vrpBuilder.build();
 
         route = VehicleRoute.Builder.newInstance(vehicle).setJobActivityFactory(new CopyJobActivityFactory())
-                .addService(service).addService(service2).addService(service3).build();
+            .addService(service).addService(service2).addService(service3).build();
 
         stateManager = new StateManager(vrp);
 
@@ -140,26 +128,26 @@ public void doBefore() {
 
         });
         stateManager.addStateUpdater(timeWindow_updater);
-        stateManager.addStateUpdater(new UpdateActivityTimes(routingCosts,activityCosts));
+        stateManager.addStateUpdater(new UpdateActivityTimes(routingCosts, activityCosts));
         stateManager.informInsertionStarts(Arrays.asList(route), Collections.<Job>emptyList());
     }
 
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct3() {
         assertEquals(70., stateManager.getActivityState(route.getActivities().get(2),
-                vehicle, InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+            vehicle, InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct2() {
         assertEquals(60., stateManager.getActivityState(route.getActivities().get(1),
-                vehicle, InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+            vehicle, InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct1() {
         assertEquals(50., stateManager.getActivityState(route.getActivities().get(0),
-                vehicle, InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+            vehicle, InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
     @Test
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTraveledDistanceTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTraveledDistanceTest.java
index 68eced2c8..90e5ba742 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTraveledDistanceTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTraveledDistanceTest.java
@@ -19,15 +19,6 @@
 package com.graphhopper.jsprit.core.problem.constraint;
 
 
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.Map;
-
-import org.junit.Assert;
-import org.junit.Before;
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.algorithm.state.StateId;
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.distance.ManhattanDistanceCalculator;
@@ -44,6 +35,14 @@
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.util.DefaultCosts;
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Test;
+
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Map;
 
 /**
  * Created by schroeder on 18/05/16.
@@ -62,54 +61,54 @@
 
     VehicleRoutingProblem vrp;
 
-    Delivery d1,d2,newDelivery;
+    Delivery d1, d2, newDelivery;
 
     Pickup pickup;
 
     Shipment s1;
 
-    Map<Vehicle,Double> maxDistanceMap;
+    Map<Vehicle, Double> maxDistanceMap;
 
 
     @Before
-    public void doBefore(){
-        vehicle = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0,0)).build();
-        vehicle2 = VehicleImpl.Builder.newInstance("v2").setStartLocation(Location.newInstance(10,10)).build();
+    public void doBefore() {
+        vehicle = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
+        vehicle2 = VehicleImpl.Builder.newInstance("v2").setStartLocation(Location.newInstance(10, 10)).build();
 
         maxDistanceMap = new HashMap<>();
-        maxDistanceMap.put(vehicle,200d);
-        maxDistanceMap.put(vehicle2,200d);
+        maxDistanceMap.put(vehicle, 200d);
+        maxDistanceMap.put(vehicle2, 200d);
 
-        d1 = Delivery.Builder.newInstance("d1").setLocation(Location.newInstance(10,10)).build();
-        d2 = Delivery.Builder.newInstance("d2").setLocation(Location.newInstance(20,15)).build();
-        pickup = Pickup.Builder.newInstance("pickup").setLocation(Location.newInstance(50,50)).build();
-        s1 = Shipment.Builder.newInstance("s1").setPickupLocation(Location.newInstance(35,30))
-                        .setDeliveryLocation(Location.newInstance(20,25)).build();
+        d1 = Delivery.Builder.newInstance("d1").setLocation(Location.newInstance(10, 10)).build();
+        d2 = Delivery.Builder.newInstance("d2").setLocation(Location.newInstance(20, 15)).build();
+        pickup = Pickup.Builder.newInstance("pickup").setLocation(Location.newInstance(50, 50)).build();
+        s1 = Shipment.Builder.newInstance("s1").setPickupLocation(Location.newInstance(35, 30))
+            .setDeliveryLocation(Location.newInstance(20, 25)).build();
 
-        newDelivery = Delivery.Builder.newInstance("new").setLocation(Location.newInstance(-10,10)).build();
+        newDelivery = Delivery.Builder.newInstance("new").setLocation(Location.newInstance(-10, 10)).build();
 
         vrp = VehicleRoutingProblem.Builder.newInstance()
-                        .setRoutingCost(new DefaultCosts(ManhattanDistanceCalculator.getInstance()))
-                        .addVehicle(vehicle).addVehicle(vehicle2)
-                        .addJob(d1).addJob(d2).addJob(s1).addJob(pickup).addJob(newDelivery).build();
+            .setRoutingCost(new DefaultCosts(ManhattanDistanceCalculator.getInstance()))
+            .addVehicle(vehicle).addVehicle(vehicle2)
+            .addJob(d1).addJob(d2).addJob(s1).addJob(pickup).addJob(newDelivery).build();
 
         route = VehicleRoute.Builder.newInstance(vehicle).setJobActivityFactory(vrp.getJobActivityFactory())
-                        .addDelivery(d1).addDelivery(d2).addPickup(s1).addPickup(pickup).addDelivery(s1).build();
+            .addDelivery(d1).addDelivery(d2).addPickup(s1).addPickup(pickup).addDelivery(s1).build();
 
         stateManager = new StateManager(vrp);
 
         traveledDistanceId = stateManager.createStateId("traveledDistance");
 
         com.graphhopper.jsprit.core.algorithm.state.VehicleDependentTraveledDistance traveledDistance =
-                        new com.graphhopper.jsprit.core.algorithm.state.VehicleDependentTraveledDistance(new TransportDistance() {
-                            @Override
-                            public double getDistance(Location from, Location to, double departureTime, Vehicle vehicle) {
-                                                return new DefaultCosts(ManhattanDistanceCalculator
-                                                                .getInstance()).getDistance(from,
-                                                                                to, departureTime,
-                                                                                vehicle);
-                            }
-                        },stateManager,traveledDistanceId,Arrays.asList(vehicle,vehicle2));
+            new com.graphhopper.jsprit.core.algorithm.state.VehicleDependentTraveledDistance(new TransportDistance() {
+                @Override
+                public double getDistance(Location from, Location to, double departureTime, Vehicle vehicle) {
+                    return new DefaultCosts(ManhattanDistanceCalculator
+                        .getInstance()).getDistance(from,
+                        to, departureTime,
+                        vehicle);
+                }
+            }, stateManager, traveledDistanceId, Arrays.asList(vehicle, vehicle2));
 
         stateManager.addStateUpdater(traveledDistance);
         stateManager.informInsertionStarts(Arrays.asList(route), Collections.<Job>emptyList());
@@ -122,123 +121,123 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
 vehicle2 (max distance): 180.0
      */
     @Test
-    public void insertNewInVehicleShouldFail(){
+    public void insertNewInVehicleShouldFail() {
         MaxDistanceConstraint maxDistanceConstraint =
-                        new MaxDistanceConstraint(stateManager, traveledDistanceId, new TransportDistance() {
-                            @Override
-                            public double getDistance(Location from, Location to, double departureTime, Vehicle vehicle) {
-                                return vrp.getTransportCosts().getTransportTime(from,to,departureTime, null, vehicle);
-                            }
-                        },maxDistanceMap);
-        JobInsertionContext context = new JobInsertionContext(route,newDelivery,vehicle,null,0);
-        Assert.assertTrue(maxDistanceConstraint.fulfilled(context,route.getStart(),newAct(),act(0),0).equals(HardActivityConstraint.ConstraintsStatus.NOT_FULFILLED));
-        Assert.assertTrue(maxDistanceConstraint.fulfilled(context,act(0),newAct(),act(1),0).equals(HardActivityConstraint.ConstraintsStatus.NOT_FULFILLED));
-        Assert.assertTrue(maxDistanceConstraint.fulfilled(context,act(1),newAct(),act(2),0).equals(HardActivityConstraint.ConstraintsStatus.NOT_FULFILLED));
-        Assert.assertTrue(maxDistanceConstraint.fulfilled(context,act(2),newAct(),act(3),0).equals(HardActivityConstraint.ConstraintsStatus.NOT_FULFILLED));
-        Assert.assertTrue(maxDistanceConstraint.fulfilled(context,act(3),newAct(),act(4),0).equals(HardActivityConstraint.ConstraintsStatus.NOT_FULFILLED));
-        Assert.assertTrue(maxDistanceConstraint.fulfilled(context,act(4),newAct(),route.getEnd(),0).equals(HardActivityConstraint.ConstraintsStatus.NOT_FULFILLED));
+            new MaxDistanceConstraint(stateManager, traveledDistanceId, new TransportDistance() {
+                @Override
+                public double getDistance(Location from, Location to, double departureTime, Vehicle vehicle) {
+                    return vrp.getTransportCosts().getTransportTime(from, to, departureTime, null, vehicle);
+                }
+            }, maxDistanceMap);
+        JobInsertionContext context = new JobInsertionContext(route, newDelivery, vehicle, null, 0);
+        Assert.assertTrue(maxDistanceConstraint.fulfilled(context, route.getStart(), newAct(), act(0), 0).equals(HardActivityConstraint.ConstraintsStatus.NOT_FULFILLED));
+        Assert.assertTrue(maxDistanceConstraint.fulfilled(context, act(0), newAct(), act(1), 0).equals(HardActivityConstraint.ConstraintsStatus.NOT_FULFILLED));
+        Assert.assertTrue(maxDistanceConstraint.fulfilled(context, act(1), newAct(), act(2), 0).equals(HardActivityConstraint.ConstraintsStatus.NOT_FULFILLED));
+        Assert.assertTrue(maxDistanceConstraint.fulfilled(context, act(2), newAct(), act(3), 0).equals(HardActivityConstraint.ConstraintsStatus.NOT_FULFILLED));
+        Assert.assertTrue(maxDistanceConstraint.fulfilled(context, act(3), newAct(), act(4), 0).equals(HardActivityConstraint.ConstraintsStatus.NOT_FULFILLED));
+        Assert.assertTrue(maxDistanceConstraint.fulfilled(context, act(4), newAct(), route.getEnd(), 0).equals(HardActivityConstraint.ConstraintsStatus.NOT_FULFILLED));
     }
 
 
     @Test
-    public void insertNewInVehicle2ShouldBeCorrect(){
+    public void insertNewInVehicle2ShouldBeCorrect() {
         //current distance vehicle2: 160 allowed: 200
         MaxDistanceConstraint maxDistanceConstraint =
-                        new MaxDistanceConstraint(stateManager, traveledDistanceId, new TransportDistance() {
-                            @Override
-                            public double getDistance(Location from, Location to, double departureTime, Vehicle vehicle) {
-                                return vrp.getTransportCosts().getTransportTime(from,to,departureTime, null, vehicle);
-                            }
-                        },maxDistanceMap);
-        JobInsertionContext context = new JobInsertionContext(route,newDelivery,vehicle2,null,0);
-        Assert.assertTrue(maxDistanceConstraint.fulfilled(context,route.getStart(),newAct(),act(0),0).equals(HardActivityConstraint.ConstraintsStatus.FULFILLED));
+            new MaxDistanceConstraint(stateManager, traveledDistanceId, new TransportDistance() {
+                @Override
+                public double getDistance(Location from, Location to, double departureTime, Vehicle vehicle) {
+                    return vrp.getTransportCosts().getTransportTime(from, to, departureTime, null, vehicle);
+                }
+            }, maxDistanceMap);
+        JobInsertionContext context = new JobInsertionContext(route, newDelivery, vehicle2, null, 0);
+        Assert.assertTrue(maxDistanceConstraint.fulfilled(context, route.getStart(), newAct(), act(0), 0).equals(HardActivityConstraint.ConstraintsStatus.FULFILLED));
         //additional distance: 20+35-15=40
-        Assert.assertTrue(maxDistanceConstraint.fulfilled(context,act(0),newAct(),act(1),0).equals(HardActivityConstraint.ConstraintsStatus.FULFILLED));
+        Assert.assertTrue(maxDistanceConstraint.fulfilled(context, act(0), newAct(), act(1), 0).equals(HardActivityConstraint.ConstraintsStatus.FULFILLED));
         //additional distance: 35+65-30=70
-        Assert.assertTrue(maxDistanceConstraint.fulfilled(context,act(1),newAct(),act(2),0).equals(HardActivityConstraint.ConstraintsStatus.NOT_FULFILLED));
+        Assert.assertTrue(maxDistanceConstraint.fulfilled(context, act(1), newAct(), act(2), 0).equals(HardActivityConstraint.ConstraintsStatus.NOT_FULFILLED));
         //additional distance: 65+100-35
-        Assert.assertTrue(maxDistanceConstraint.fulfilled(context,act(2),newAct(),act(3),0).equals(HardActivityConstraint.ConstraintsStatus.NOT_FULFILLED));
+        Assert.assertTrue(maxDistanceConstraint.fulfilled(context, act(2), newAct(), act(3), 0).equals(HardActivityConstraint.ConstraintsStatus.NOT_FULFILLED));
         //additional distance: 100+45-55
-        Assert.assertTrue(maxDistanceConstraint.fulfilled(context,act(3),newAct(),act(4),0).equals(HardActivityConstraint.ConstraintsStatus.NOT_FULFILLED));
+        Assert.assertTrue(maxDistanceConstraint.fulfilled(context, act(3), newAct(), act(4), 0).equals(HardActivityConstraint.ConstraintsStatus.NOT_FULFILLED));
         //additional distance: 45+20-25
-        Assert.assertTrue(maxDistanceConstraint.fulfilled(context,act(4),newAct(),route.getEnd(),0).equals(HardActivityConstraint.ConstraintsStatus.FULFILLED));
+        Assert.assertTrue(maxDistanceConstraint.fulfilled(context, act(4), newAct(), route.getEnd(), 0).equals(HardActivityConstraint.ConstraintsStatus.FULFILLED));
     }
 
     private TourActivity act(int i) {
         return route.getActivities().get(i);
     }
 
-    private TourActivity newAct(){
+    private TourActivity newAct() {
         return vrp.getActivities(newDelivery).get(0);
     }
 
     @Test
-    public void traveledDistanceShouldBeCorrect(){
-        Assert.assertEquals(20d,stateManager.getActivityState(route.getActivities().get(0),vehicle,traveledDistanceId,Double.class),0.01);
-        Assert.assertEquals(35d,stateManager.getActivityState(route.getActivities().get(1),vehicle,traveledDistanceId,Double.class),0.01);
-        Assert.assertEquals(65d,stateManager.getActivityState(route.getActivities().get(2),vehicle,traveledDistanceId,Double.class),0.01);
-        Assert.assertEquals(100d,stateManager.getActivityState(route.getActivities().get(3),vehicle,traveledDistanceId,Double.class),0.01);
-        Assert.assertEquals(155d,stateManager.getActivityState(route.getActivities().get(4),vehicle,traveledDistanceId,Double.class),0.01);
+    public void traveledDistanceShouldBeCorrect() {
+        Assert.assertEquals(20d, stateManager.getActivityState(route.getActivities().get(0), vehicle, traveledDistanceId, Double.class), 0.01);
+        Assert.assertEquals(35d, stateManager.getActivityState(route.getActivities().get(1), vehicle, traveledDistanceId, Double.class), 0.01);
+        Assert.assertEquals(65d, stateManager.getActivityState(route.getActivities().get(2), vehicle, traveledDistanceId, Double.class), 0.01);
+        Assert.assertEquals(100d, stateManager.getActivityState(route.getActivities().get(3), vehicle, traveledDistanceId, Double.class), 0.01);
+        Assert.assertEquals(155d, stateManager.getActivityState(route.getActivities().get(4), vehicle, traveledDistanceId, Double.class), 0.01);
 
     }
 
     @Test
-    public void traveledDistanceWithVehicle2ShouldBeCorrect(){
-        Assert.assertEquals(0d,stateManager.getActivityState(route.getActivities().get(0),vehicle2,traveledDistanceId,Double.class),0.01);
-        Assert.assertEquals(15d,stateManager.getActivityState(route.getActivities().get(1),vehicle2,traveledDistanceId,Double.class),0.01);
-        Assert.assertEquals(45d,stateManager.getActivityState(route.getActivities().get(2),vehicle2,traveledDistanceId,Double.class),0.01);
-        Assert.assertEquals(80d,stateManager.getActivityState(route.getActivities().get(3),vehicle2,traveledDistanceId,Double.class),0.01);
-        Assert.assertEquals(135d,stateManager.getActivityState(route.getActivities().get(4),vehicle2,traveledDistanceId,Double.class),0.01);
+    public void traveledDistanceWithVehicle2ShouldBeCorrect() {
+        Assert.assertEquals(0d, stateManager.getActivityState(route.getActivities().get(0), vehicle2, traveledDistanceId, Double.class), 0.01);
+        Assert.assertEquals(15d, stateManager.getActivityState(route.getActivities().get(1), vehicle2, traveledDistanceId, Double.class), 0.01);
+        Assert.assertEquals(45d, stateManager.getActivityState(route.getActivities().get(2), vehicle2, traveledDistanceId, Double.class), 0.01);
+        Assert.assertEquals(80d, stateManager.getActivityState(route.getActivities().get(3), vehicle2, traveledDistanceId, Double.class), 0.01);
+        Assert.assertEquals(135d, stateManager.getActivityState(route.getActivities().get(4), vehicle2, traveledDistanceId, Double.class), 0.01);
 
     }
 
     @Test
-    public void distanceOfShipmentInRoute(){
-        double traveledDistanceBeforePickup = stateManager.getActivityState(route.getActivities().get(2), vehicle,traveledDistanceId, Double.class);
-        double traveledDistanceBeforeDelivery = stateManager.getActivityState(route.getActivities().get(4), vehicle,traveledDistanceId, Double.class);
-        Assert.assertEquals(90d,traveledDistanceBeforeDelivery-traveledDistanceBeforePickup,0.01);
+    public void distanceOfShipmentInRoute() {
+        double traveledDistanceBeforePickup = stateManager.getActivityState(route.getActivities().get(2), vehicle, traveledDistanceId, Double.class);
+        double traveledDistanceBeforeDelivery = stateManager.getActivityState(route.getActivities().get(4), vehicle, traveledDistanceId, Double.class);
+        Assert.assertEquals(90d, traveledDistanceBeforeDelivery - traveledDistanceBeforePickup, 0.01);
     }
 
     @Test
-    public void distanceOfShipmentInRouteVehicle2(){
-        double traveledDistanceBeforePickup = stateManager.getActivityState(route.getActivities().get(2), vehicle2,traveledDistanceId, Double.class);
-        double traveledDistanceBeforeDelivery = stateManager.getActivityState(route.getActivities().get(4), vehicle2,traveledDistanceId, Double.class);
-        Assert.assertEquals(90d,traveledDistanceBeforeDelivery-traveledDistanceBeforePickup,0.01);
+    public void distanceOfShipmentInRouteVehicle2() {
+        double traveledDistanceBeforePickup = stateManager.getActivityState(route.getActivities().get(2), vehicle2, traveledDistanceId, Double.class);
+        double traveledDistanceBeforeDelivery = stateManager.getActivityState(route.getActivities().get(4), vehicle2, traveledDistanceId, Double.class);
+        Assert.assertEquals(90d, traveledDistanceBeforeDelivery - traveledDistanceBeforePickup, 0.01);
     }
 
     @Test
-    public void distanceOfPickupInRoute(){
-        double traveledDistanceBeforePickup = stateManager.getActivityState(route.getActivities().get(3),vehicle, traveledDistanceId, Double.class);
-        double total = stateManager.getRouteState(route, vehicle,traveledDistanceId, Double.class);
-        Assert.assertEquals(100d,total-traveledDistanceBeforePickup,0.01);
+    public void distanceOfPickupInRoute() {
+        double traveledDistanceBeforePickup = stateManager.getActivityState(route.getActivities().get(3), vehicle, traveledDistanceId, Double.class);
+        double total = stateManager.getRouteState(route, vehicle, traveledDistanceId, Double.class);
+        Assert.assertEquals(100d, total - traveledDistanceBeforePickup, 0.01);
     }
 
     @Test
-    public void distanceOfPickupInRouteVehicle2(){
-        double traveledDistanceBeforePickup = stateManager.getActivityState(route.getActivities().get(3),vehicle2, traveledDistanceId, Double.class);
-        double total = stateManager.getRouteState(route, vehicle2,traveledDistanceId, Double.class);
-        Assert.assertEquals(80d,total-traveledDistanceBeforePickup,0.01);
+    public void distanceOfPickupInRouteVehicle2() {
+        double traveledDistanceBeforePickup = stateManager.getActivityState(route.getActivities().get(3), vehicle2, traveledDistanceId, Double.class);
+        double total = stateManager.getRouteState(route, vehicle2, traveledDistanceId, Double.class);
+        Assert.assertEquals(80d, total - traveledDistanceBeforePickup, 0.01);
     }
 
     @Test
-    public void distanceToTravelShouldBeCorrect(){
-        double total = stateManager.getRouteState(route,vehicle,traveledDistanceId,Double.class);
-        Assert.assertEquals(180d,total - stateManager.getActivityState(route.getActivities().get(0),vehicle,traveledDistanceId,Double.class),0.01);
-        Assert.assertEquals(165d,total - stateManager.getActivityState(route.getActivities().get(1),vehicle,traveledDistanceId,Double.class),0.01);
-        Assert.assertEquals(135d,total - stateManager.getActivityState(route.getActivities().get(2),vehicle,traveledDistanceId,Double.class),0.01);
-        Assert.assertEquals(100d,total - stateManager.getActivityState(route.getActivities().get(3),vehicle,traveledDistanceId,Double.class),0.01);
-        Assert.assertEquals(45d,total - stateManager.getActivityState(route.getActivities().get(4),vehicle,traveledDistanceId,Double.class),0.01);
+    public void distanceToTravelShouldBeCorrect() {
+        double total = stateManager.getRouteState(route, vehicle, traveledDistanceId, Double.class);
+        Assert.assertEquals(180d, total - stateManager.getActivityState(route.getActivities().get(0), vehicle, traveledDistanceId, Double.class), 0.01);
+        Assert.assertEquals(165d, total - stateManager.getActivityState(route.getActivities().get(1), vehicle, traveledDistanceId, Double.class), 0.01);
+        Assert.assertEquals(135d, total - stateManager.getActivityState(route.getActivities().get(2), vehicle, traveledDistanceId, Double.class), 0.01);
+        Assert.assertEquals(100d, total - stateManager.getActivityState(route.getActivities().get(3), vehicle, traveledDistanceId, Double.class), 0.01);
+        Assert.assertEquals(45d, total - stateManager.getActivityState(route.getActivities().get(4), vehicle, traveledDistanceId, Double.class), 0.01);
 
     }
 
     @Test
-    public void distanceToTravelShouldBeCorrectVehicle2(){
-        double total = stateManager.getRouteState(route,vehicle2,traveledDistanceId,Double.class);
-        Assert.assertEquals(160d,total - stateManager.getActivityState(route.getActivities().get(0),vehicle2,traveledDistanceId,Double.class),0.01);
-        Assert.assertEquals(145d,total - stateManager.getActivityState(route.getActivities().get(1),vehicle2,traveledDistanceId,Double.class),0.01);
-        Assert.assertEquals(115d,total - stateManager.getActivityState(route.getActivities().get(2),vehicle2,traveledDistanceId,Double.class),0.01);
-        Assert.assertEquals(80d,total - stateManager.getActivityState(route.getActivities().get(3),vehicle2,traveledDistanceId,Double.class),0.01);
-        Assert.assertEquals(25d,total - stateManager.getActivityState(route.getActivities().get(4),vehicle2,traveledDistanceId,Double.class),0.01);
+    public void distanceToTravelShouldBeCorrectVehicle2() {
+        double total = stateManager.getRouteState(route, vehicle2, traveledDistanceId, Double.class);
+        Assert.assertEquals(160d, total - stateManager.getActivityState(route.getActivities().get(0), vehicle2, traveledDistanceId, Double.class), 0.01);
+        Assert.assertEquals(145d, total - stateManager.getActivityState(route.getActivities().get(1), vehicle2, traveledDistanceId, Double.class), 0.01);
+        Assert.assertEquals(115d, total - stateManager.getActivityState(route.getActivities().get(2), vehicle2, traveledDistanceId, Double.class), 0.01);
+        Assert.assertEquals(80d, total - stateManager.getActivityState(route.getActivities().get(3), vehicle2, traveledDistanceId, Double.class), 0.01);
+        Assert.assertEquals(25d, total - stateManager.getActivityState(route.getActivities().get(4), vehicle2, traveledDistanceId, Double.class), 0.01);
 
     }
 }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/CustomJobTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/CustomJobTest.java
index 13f2af83b..812ca2933 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/CustomJobTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/CustomJobTest.java
@@ -18,7 +18,6 @@
 
 package com.graphhopper.jsprit.core.problem.job;
 
-import com.graphhopper.jsprit.core.algorithm.FirstCustomJobWithMultipleActivitiesExample;
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivityNEW;
@@ -48,7 +47,7 @@ public BuilderBase(String id) {
                 super(id);
             }
 
-            public CustomJob.BuilderBase<T,B> addPickup(Location location, Capacity capacity){
+            public CustomJob.BuilderBase<T, B> addPickup(Location location, Capacity capacity) {
                 locs.add(location);
                 cap.add(capacity);
                 return this;
@@ -58,9 +57,11 @@ public BuilderBase(String id) {
                 return locs;
             }
 
-            public List<Capacity> getCaps() { return cap; }
+            public List<Capacity> getCaps() {
+                return cap;
+            }
 
-            protected void validate(){
+            protected void validate() {
 
             }
         }
@@ -81,6 +82,7 @@ protected CustomJob createInstance() {
             }
 
         }
+
         /**
          * Builder based constructor.
          *
@@ -101,21 +103,21 @@ public Capacity getSize() {
         protected void createActivities(JobBuilder<? extends AbstractJob, ?> jobBuilder) {
             CustomJob.Builder builder = (CustomJob.Builder) jobBuilder;
             JobActivityList list = new SequentialJobActivityList(this);
-            for(int i=0;i<builder.getLocs().size();i++){
-                list.addActivity(new PickupActivityNEW(this,"pick",builder.getLocs().get(i),0,builder.getCaps().get(i), Arrays.asList(TimeWindow.ETERNITY)));
+            for (int i = 0; i < builder.getLocs().size(); i++) {
+                list.addActivity(new PickupActivityNEW(this, "pick", builder.getLocs().get(i), 0, builder.getCaps().get(i), Arrays.asList(TimeWindow.ETERNITY)));
             }
             setActivities(list);
         }
     }
 
     @Test
-    public void whenCreatingANewJobWithThreeDistinctActivities_jobShouldContainActivities(){
+    public void whenCreatingANewJobWithThreeDistinctActivities_jobShouldContainActivities() {
         CustomJob cj = CustomJob.Builder.newInstance("job")
-            .addPickup(Location.newInstance(10,0),Capacity.Builder.newInstance().addDimension(0,1).build())
-            .addPickup(Location.newInstance(5,0),Capacity.Builder.newInstance().addDimension(0,2).build())
-            .addPickup(Location.newInstance(20,0),Capacity.Builder.newInstance().addDimension(0,1).build())
+            .addPickup(Location.newInstance(10, 0), Capacity.Builder.newInstance().addDimension(0, 1).build())
+            .addPickup(Location.newInstance(5, 0), Capacity.Builder.newInstance().addDimension(0, 2).build())
+            .addPickup(Location.newInstance(20, 0), Capacity.Builder.newInstance().addDimension(0, 1).build())
             .build();
-        Assert.assertEquals(3,cj.getActivityList().size());
+        Assert.assertEquals(3, cj.getActivityList().size());
 
     }
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/DeliveryTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/DeliveryTest.java
index 6974757ee..2246d75d6 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/DeliveryTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/DeliveryTest.java
@@ -17,14 +17,11 @@
  */
 package com.graphhopper.jsprit.core.problem.job;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
-
+import com.graphhopper.jsprit.core.problem.Location;
 import org.junit.Assert;
 import org.junit.Test;
 
-import com.graphhopper.jsprit.core.problem.Location;
+import static org.junit.Assert.*;
 
 public class DeliveryTest {
 
@@ -93,14 +90,14 @@ public void nameShouldBeAssigned() {
     }
 
     @Test
-    public void whenSettingPriorities_itShouldBeSetCorrectly(){
+    public void whenSettingPriorities_itShouldBeSetCorrectly() {
         Delivery s = new Delivery.Builder("s").setLocation(Location.newInstance("loc"))
             .setPriority(3).build();
         Assert.assertEquals(3, s.getPriority());
     }
 
     @Test
-    public void whenNotSettingPriorities_defaultShouldBe(){
+    public void whenNotSettingPriorities_defaultShouldBe() {
         Delivery s = new Delivery.Builder("s").setLocation(Location.newInstance("loc"))
             .build();
         Assert.assertEquals(2, s.getPriority());
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/GraphJobActivityListTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/GraphJobActivityListTest.java
index b4fa1e46a..d0a9ed953 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/GraphJobActivityListTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/GraphJobActivityListTest.java
@@ -1,18 +1,17 @@
 package com.graphhopper.jsprit.core.problem.job;
 
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.ServiceActivityNEW;
+import org.junit.Before;
+import org.junit.Test;
 
 import java.util.Arrays;
 import java.util.HashSet;
 import java.util.Set;
 
-import org.junit.Before;
-import org.junit.Test;
-
-import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.ServiceActivityNEW;
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
 
 public class GraphJobActivityListTest {
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/PickupTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/PickupTest.java
index f7204b3cc..9c1e9a7d3 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/PickupTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/PickupTest.java
@@ -17,14 +17,11 @@
  */
 package com.graphhopper.jsprit.core.problem.job;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
-
+import com.graphhopper.jsprit.core.problem.Location;
 import org.junit.Assert;
 import org.junit.Test;
 
-import com.graphhopper.jsprit.core.problem.Location;
+import static org.junit.Assert.*;
 
 public class PickupTest {
 
@@ -95,14 +92,14 @@ public void nameShouldBeAssigned() {
 
 
     @Test
-    public void whenSettingPriorities_itShouldBeSetCorrectly(){
+    public void whenSettingPriorities_itShouldBeSetCorrectly() {
         Pickup s = new Pickup.Builder("s").setLocation(Location.newInstance("loc"))
             .setPriority(3).build();
         Assert.assertEquals(3, s.getPriority());
     }
 
     @Test
-    public void whenNotSettingPriorities_defaultShouldBe(){
+    public void whenNotSettingPriorities_defaultShouldBe() {
         Pickup s = new Pickup.Builder("s").setLocation(Location.newInstance("loc"))
             .build();
         Assert.assertEquals(2, s.getPriority());
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ServiceTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ServiceTest.java
index 6d09554ed..db3ba4519 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ServiceTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ServiceTest.java
@@ -17,22 +17,17 @@
  */
 package com.graphhopper.jsprit.core.problem.job;
 
-import static org.hamcrest.core.Is.is;
-import static org.hamcrest.core.IsCollectionContaining.hasItem;
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertThat;
-import static org.junit.Assert.assertTrue;
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
+import org.junit.Assert;
+import org.junit.Test;
 
 import java.util.HashSet;
 import java.util.Set;
 
-import org.junit.Assert;
-import org.junit.Test;
-
-import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
+import static org.hamcrest.core.Is.is;
+import static org.hamcrest.core.IsCollectionContaining.hasItem;
+import static org.junit.Assert.*;
 
 public class ServiceTest {
 
@@ -121,65 +116,65 @@ public void whenSettingLocation_itShouldWork() {
     }
 
 
-	@Test
-	public void whenSettingLocationCoord_itShouldBeSetCorrectly(){
-		Service s = new Service.Builder("s").setLocation(Location.newInstance(1, 2)).build();
-		assertEquals(1.0,s.getLocation().getCoordinate().getX(),0.01);
-		assertEquals(2.0,s.getLocation().getCoordinate().getY(),0.01);
-        assertEquals(1.0,s.getLocation().getCoordinate().getX(),0.01);
-        assertEquals(2.0,s.getLocation().getCoordinate().getY(),0.01);
-	}
-
-	@Test(expected=IllegalArgumentException.class)
-	public void whenSettingNeitherLocationIdNorCoord_throwsException(){
-		@SuppressWarnings("unused")
-		Service s = new Service.Builder("s").build();
-	}
-
-	@Test(expected=IllegalArgumentException.class)
-	public void whenServiceTimeSmallerZero_throwIllegalStateException(){
-		@SuppressWarnings("unused")
-		Service s = new Service.Builder("s").setLocation(Location.newInstance("loc")).setServiceTime(-1).build();
-	}
-
-	@Test
-	public void whenSettingServiceTime_itShouldBeSetCorrectly(){
-		Service s = new Service.Builder("s").setLocation(Location.newInstance("loc")).setServiceTime(1).build();
-		assertEquals(1.0,s.getServiceDuration(),0.01);
-	}
-
-	@Test(expected=IllegalArgumentException.class)
-	public void whenTimeWindowIsNull_throwException(){
-		@SuppressWarnings("unused")
-		Service s = new Service.Builder("s").setLocation(Location.newInstance("loc")).setTimeWindow(null).build();
-	}
-
-	@Test
-	public void whenSettingTimeWindow_itShouldBeSetCorrectly(){
-		Service s = new Service.Builder("s").setLocation(Location.newInstance("loc")).setTimeWindow(TimeWindow.newInstance(1.0, 2.0)).build();
-		assertEquals(1.0,s.getTimeWindow().getStart(),0.01);
-		assertEquals(2.0,s.getTimeWindow().getEnd(),0.01);
-	}
-
-	@Test
-	public void whenAddingSkills_theyShouldBeAddedCorrectly(){
-		Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
-				.addRequiredSkill("drill").addRequiredSkill("screwdriver").build();
-		assertTrue(s.getRequiredSkills().containsSkill("drill"));
-		assertTrue(s.getRequiredSkills().containsSkill("drill"));
-		assertTrue(s.getRequiredSkills().containsSkill("ScrewDriver"));
-	}
-
-	@Test
-	public void whenAddingSkillsCaseSens_theyShouldBeAddedCorrectly(){
-		Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
-				.addRequiredSkill("DriLl").addRequiredSkill("screwDriver").build();
-		assertTrue(s.getRequiredSkills().containsSkill("drill"));
-		assertTrue(s.getRequiredSkills().containsSkill("drilL"));
-	}
+    @Test
+    public void whenSettingLocationCoord_itShouldBeSetCorrectly() {
+        Service s = new Service.Builder("s").setLocation(Location.newInstance(1, 2)).build();
+        assertEquals(1.0, s.getLocation().getCoordinate().getX(), 0.01);
+        assertEquals(2.0, s.getLocation().getCoordinate().getY(), 0.01);
+        assertEquals(1.0, s.getLocation().getCoordinate().getX(), 0.01);
+        assertEquals(2.0, s.getLocation().getCoordinate().getY(), 0.01);
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void whenSettingNeitherLocationIdNorCoord_throwsException() {
+        @SuppressWarnings("unused")
+        Service s = new Service.Builder("s").build();
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void whenServiceTimeSmallerZero_throwIllegalStateException() {
+        @SuppressWarnings("unused")
+        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc")).setServiceTime(-1).build();
+    }
+
+    @Test
+    public void whenSettingServiceTime_itShouldBeSetCorrectly() {
+        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc")).setServiceTime(1).build();
+        assertEquals(1.0, s.getServiceDuration(), 0.01);
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void whenTimeWindowIsNull_throwException() {
+        @SuppressWarnings("unused")
+        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc")).setTimeWindow(null).build();
+    }
+
+    @Test
+    public void whenSettingTimeWindow_itShouldBeSetCorrectly() {
+        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc")).setTimeWindow(TimeWindow.newInstance(1.0, 2.0)).build();
+        assertEquals(1.0, s.getTimeWindow().getStart(), 0.01);
+        assertEquals(2.0, s.getTimeWindow().getEnd(), 0.01);
+    }
+
+    @Test
+    public void whenAddingSkills_theyShouldBeAddedCorrectly() {
+        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
+            .addRequiredSkill("drill").addRequiredSkill("screwdriver").build();
+        assertTrue(s.getRequiredSkills().containsSkill("drill"));
+        assertTrue(s.getRequiredSkills().containsSkill("drill"));
+        assertTrue(s.getRequiredSkills().containsSkill("ScrewDriver"));
+    }
 
     @Test
-    public void whenAddingSeveralTimeWindows_itShouldBeSetCorrectly(){
+    public void whenAddingSkillsCaseSens_theyShouldBeAddedCorrectly() {
+        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
+            .addRequiredSkill("DriLl").addRequiredSkill("screwDriver").build();
+        assertTrue(s.getRequiredSkills().containsSkill("drill"));
+        assertTrue(s.getRequiredSkills().containsSkill("drilL"));
+    }
+
+    @Test
+    public void whenAddingSeveralTimeWindows_itShouldBeSetCorrectly() {
         TimeWindow tw1 = TimeWindow.newInstance(1.0, 2.0);
         TimeWindow tw2 = TimeWindow.newInstance(3.0, 5.0);
         Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
@@ -187,12 +182,12 @@ public void whenAddingSeveralTimeWindows_itShouldBeSetCorrectly(){
             .addTimeWindow(tw2)
             .build();
         assertEquals(2, s.getTimeWindows().size());
-        assertThat(s.getTimeWindows(),hasItem(is(tw1)));
-        assertThat(s.getTimeWindows(),hasItem(is(tw2)));
+        assertThat(s.getTimeWindows(), hasItem(is(tw1)));
+        assertThat(s.getTimeWindows(), hasItem(is(tw2)));
     }
 
     @Test
-    public void whenAddingTimeWindow_itShouldBeSetCorrectly(){
+    public void whenAddingTimeWindow_itShouldBeSetCorrectly() {
         Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
             .addTimeWindow(TimeWindow.newInstance(1.0, 2.0)).build();
         assertEquals(1.0, s.getTimeWindow().getStart(), 0.01);
@@ -200,8 +195,6 @@ public void whenAddingTimeWindow_itShouldBeSetCorrectly(){
     }
 
 
-
-
     @Test
     public void whenAddingSkillsCaseSensV2_theyShouldBeAddedCorrectly() {
         Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
@@ -217,60 +210,60 @@ public void nameShouldBeAssigned() {
         assertEquals("name", s.getName());
     }
 
-	@Test
-	public void shouldKnowMultipleTimeWindows(){
-		Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
-				.addTimeWindow(TimeWindow.newInstance(0., 10.)).addTimeWindow(TimeWindow.newInstance(20., 30.))
-				.setName("name").build();
-		assertEquals(2,s.getTimeWindows().size());
-	}
-
-	@Test(expected = IllegalArgumentException.class)
-	public void whenMultipleTWOverlap_throwEx(){
-		Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
-				.addTimeWindow(TimeWindow.newInstance(0.,10.))
-				.addTimeWindow(TimeWindow.newInstance(5., 30.))
-				.setName("name").build();
-	}
-
-	@Test(expected = IllegalArgumentException.class)
-	public void whenMultipleTWOverlap2_throwEx(){
-		Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
-				.addTimeWindow(TimeWindow.newInstance(20., 30.))
-				.addTimeWindow(TimeWindow.newInstance(0., 25.))
-				.setName("name").build();
-	}
+    @Test
+    public void shouldKnowMultipleTimeWindows() {
+        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
+            .addTimeWindow(TimeWindow.newInstance(0., 10.)).addTimeWindow(TimeWindow.newInstance(20., 30.))
+            .setName("name").build();
+        assertEquals(2, s.getTimeWindows().size());
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void whenMultipleTWOverlap_throwEx() {
+        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
+            .addTimeWindow(TimeWindow.newInstance(0., 10.))
+            .addTimeWindow(TimeWindow.newInstance(5., 30.))
+            .setName("name").build();
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void whenMultipleTWOverlap2_throwEx() {
+        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
+            .addTimeWindow(TimeWindow.newInstance(20., 30.))
+            .addTimeWindow(TimeWindow.newInstance(0., 25.))
+            .setName("name").build();
+    }
 
     @Test
-    public void whenSettingPriorities_itShouldBeSetCorrectly(){
+    public void whenSettingPriorities_itShouldBeSetCorrectly() {
         Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
             .setPriority(1).build();
         Assert.assertEquals(1, s.getPriority());
     }
 
     @Test
-    public void whenSettingPriorities_itShouldBeSetCorrectly2(){
+    public void whenSettingPriorities_itShouldBeSetCorrectly2() {
         Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
             .setPriority(3).build();
         Assert.assertEquals(3, s.getPriority());
     }
 
     @Test
-    public void whenNotSettingPriorities_defaultShouldBe2(){
+    public void whenNotSettingPriorities_defaultShouldBe2() {
         Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
             .build();
         Assert.assertEquals(2, s.getPriority());
     }
 
     @Test(expected = IllegalArgumentException.class)
-    public void whenSettingIncorrectPriorities_itShouldThrowException(){
+    public void whenSettingIncorrectPriorities_itShouldThrowException() {
         Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
             .setPriority(30).build();
 
     }
 
     @Test(expected = IllegalArgumentException.class)
-    public void whenSettingIncorrectPriorities_itShouldThrowException2(){
+    public void whenSettingIncorrectPriorities_itShouldThrowException2() {
         Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
             .setPriority(0).build();
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ShipmentTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ShipmentTest.java
index e8a649542..884f403e9 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ShipmentTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ShipmentTest.java
@@ -17,21 +17,16 @@
  */
 package com.graphhopper.jsprit.core.problem.job;
 
-import static org.hamcrest.core.Is.is;
-import static org.hamcrest.core.IsCollectionContaining.hasItem;
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertThat;
-import static org.junit.Assert.assertTrue;
-
-import org.junit.Assert;
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.util.Coordinate;
 import com.graphhopper.jsprit.core.util.TestUtils;
+import org.junit.Assert;
+import org.junit.Test;
+
+import static org.hamcrest.core.Is.is;
+import static org.hamcrest.core.IsCollectionContaining.hasItem;
+import static org.junit.Assert.*;
 
 public class ShipmentTest {
 
@@ -250,25 +245,24 @@ public void whenUsingAddDeliveryTimeWindow2_itShouldBeDoneCorrectly() {
 
     @Test
     public void whenAddingMultipleDeliveryTimeWindows_itShouldBeDoneCorrectly() {
-        TimeWindow tw1 = TimeWindow.newInstance(1,2);
-        TimeWindow tw2 = TimeWindow.newInstance(4,5);
+        TimeWindow tw1 = TimeWindow.newInstance(1, 2);
+        TimeWindow tw2 = TimeWindow.newInstance(4, 5);
         Shipment s = Shipment.Builder.newInstance("s").addDeliveryTimeWindow(tw1).addDeliveryTimeWindow(tw2)
             .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
-        assertEquals(s.getDeliveryTimeWindows().size(),2);
-        assertThat(s.getDeliveryTimeWindows(),hasItem(is(tw1)));
-        assertThat(s.getDeliveryTimeWindows(),hasItem(is(tw2)));
+        assertEquals(s.getDeliveryTimeWindows().size(), 2);
+        assertThat(s.getDeliveryTimeWindows(), hasItem(is(tw1)));
+        assertThat(s.getDeliveryTimeWindows(), hasItem(is(tw2)));
     }
 
     @Test(expected = IllegalArgumentException.class)
     public void whenAddingMultipleOverlappingDeliveryTimeWindows_itShouldThrowException() {
-        Shipment s = Shipment.Builder.newInstance("s").addDeliveryTimeWindow(1, 3).addDeliveryTimeWindow(2,5)
+        Shipment s = Shipment.Builder.newInstance("s").addDeliveryTimeWindow(1, 3).addDeliveryTimeWindow(2, 5)
             .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         assertEquals(1.0, s.getDeliveryTimeWindow().getStart(), 0.01);
         assertEquals(2.0, s.getDeliveryTimeWindow().getEnd(), 0.01);
     }
 
 
-
     @Test
     public void whenUsingAddPickupTimeWindow_itShouldBeDoneCorrectly() {
         Shipment s = Shipment.Builder.newInstance("s").addPickupTimeWindow(TimeWindow.newInstance(1, 2))
@@ -287,25 +281,24 @@ public void whenUsingAddPickupTimeWindow2_itShouldBeDoneCorrectly() {
 
     @Test
     public void whenAddingMultiplePickupTimeWindows_itShouldBeDoneCorrectly() {
-        TimeWindow tw1 = TimeWindow.newInstance(1,2);
-        TimeWindow tw2 = TimeWindow.newInstance(4,5);
+        TimeWindow tw1 = TimeWindow.newInstance(1, 2);
+        TimeWindow tw2 = TimeWindow.newInstance(4, 5);
         Shipment s = Shipment.Builder.newInstance("s").addPickupTimeWindow(tw1).addPickupTimeWindow(tw2)
             .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
-        assertEquals(s.getPickupTimeWindows().size(),2);
+        assertEquals(s.getPickupTimeWindows().size(), 2);
         assertThat(s.getPickupTimeWindows(), hasItem(is(tw1)));
         assertThat(s.getPickupTimeWindows(), hasItem(is(tw2)));
     }
 
     @Test(expected = IllegalArgumentException.class)
     public void whenAddingMultipleOverlappingPickupTimeWindows_itShouldThrowException() {
-        Shipment s = Shipment.Builder.newInstance("s").addPickupTimeWindow(1, 3).addPickupTimeWindow(2,5)
+        Shipment s = Shipment.Builder.newInstance("s").addPickupTimeWindow(1, 3).addPickupTimeWindow(2, 5)
             .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         assertEquals(1.0, s.getPickupTimeWindow().getStart(), 0.01);
         assertEquals(2.0, s.getPickupTimeWindow().getEnd(), 0.01);
     }
 
 
-
     @Test(expected = IllegalArgumentException.class)
     public void whenShipmentHasNegativeCapacityVal_throwIllegalStateExpception() {
         @SuppressWarnings("unused")
@@ -391,7 +384,7 @@ public void whenSettingLocation_itShouldWork() {
     }
 
     @Test
-    public void whenSettingPriorities_itShouldBeSetCorrectly(){
+    public void whenSettingPriorities_itShouldBeSetCorrectly() {
         Shipment s = Shipment.Builder.newInstance("s").setPickupLocation(Location.newInstance("loc"))
             .setDeliveryLocation(Location.newInstance("loc"))
             .setPriority(1).build();
@@ -399,7 +392,7 @@ public void whenSettingPriorities_itShouldBeSetCorrectly(){
     }
 
     @Test
-    public void whenSettingPriorities_itShouldBeSetCorrectly2(){
+    public void whenSettingPriorities_itShouldBeSetCorrectly2() {
         Shipment s = Shipment.Builder.newInstance("s").setPickupLocation(Location.newInstance("loc"))
             .setDeliveryLocation(Location.newInstance("loc"))
             .setPriority(3).build();
@@ -407,7 +400,7 @@ public void whenSettingPriorities_itShouldBeSetCorrectly2(){
     }
 
     @Test
-    public void whenNotSettingPriorities_defaultShouldBe2(){
+    public void whenNotSettingPriorities_defaultShouldBe2() {
         Shipment s = Shipment.Builder.newInstance("s").setPickupLocation(Location.newInstance("loc"))
             .setDeliveryLocation(Location.newInstance("loc"))
             .build();
@@ -415,7 +408,7 @@ public void whenNotSettingPriorities_defaultShouldBe2(){
     }
 
     @Test(expected = IllegalArgumentException.class)
-    public void whenSettingIncorrectPriorities_itShouldThrowException(){
+    public void whenSettingIncorrectPriorities_itShouldThrowException() {
         Shipment s = Shipment.Builder.newInstance("s").setPickupLocation(Location.newInstance("loc"))
             .setDeliveryLocation(Location.newInstance("loc"))
             .setPriority(30).build();
@@ -423,7 +416,7 @@ public void whenSettingIncorrectPriorities_itShouldThrowException(){
     }
 
     @Test(expected = IllegalArgumentException.class)
-    public void whenSettingIncorrectPriorities_itShouldThrowException2(){
+    public void whenSettingIncorrectPriorities_itShouldThrowException2() {
         Shipment s = Shipment.Builder.newInstance("s").setPickupLocation(Location.newInstance("loc"))
             .setDeliveryLocation(Location.newInstance("loc"))
             .setPriority(0).build();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/misc/JobInsertionContextTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/misc/JobInsertionContextTest.java
index c34ff0568..8f0926450 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/misc/JobInsertionContextTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/misc/JobInsertionContextTest.java
@@ -19,18 +19,17 @@
 package com.graphhopper.jsprit.core.problem.misc;
 
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.mockito.Mockito.mock;
-
-import org.junit.Before;
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.problem.driver.Driver;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
+import org.junit.Before;
+import org.junit.Test;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+import static org.mockito.Mockito.mock;
 
 public class JobInsertionContextTest {
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/VehicleRoutingProblemSolutionTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/VehicleRoutingProblemSolutionTest.java
index 11c0468d1..628cbe6fb 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/VehicleRoutingProblemSolutionTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/VehicleRoutingProblemSolutionTest.java
@@ -17,19 +17,18 @@
  */
 package com.graphhopper.jsprit.core.problem.solution;
 
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.mock;
+import com.graphhopper.jsprit.core.problem.job.Job;
+import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+import org.junit.Assert;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
 
-import org.junit.Assert;
-import org.junit.Test;
-
-import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Mockito.mock;
 
 public class VehicleRoutingProblemSolutionTest {
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/TestVehicleRoute.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/TestVehicleRoute.java
index 9fef1cb48..aebf2e9c5 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/TestVehicleRoute.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/TestVehicleRoute.java
@@ -17,28 +17,23 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-
-import java.util.Iterator;
-
-import org.junit.Before;
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.driver.DriverImpl;
 import com.graphhopper.jsprit.core.problem.driver.DriverImpl.NoDriver;
 import com.graphhopper.jsprit.core.problem.job.Delivery;
 import com.graphhopper.jsprit.core.problem.job.Pickup;
 import com.graphhopper.jsprit.core.problem.job.Service;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivityNEW;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupServiceDEPRECATED;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.ServiceActivityNEW;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.*;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
+import org.junit.Before;
+import org.junit.Test;
+
+import java.util.Iterator;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
 
 
 public class TestVehicleRoute {
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRouteBuilderTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRouteBuilderTest.java
index 63a0fb818..9d6180424 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRouteBuilderTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRouteBuilderTest.java
@@ -17,12 +17,6 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route;
 
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
-
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.driver.Driver;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
@@ -30,6 +24,11 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
+import org.junit.Test;
+
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
 
 
 public class VehicleRouteBuilderTest {
@@ -91,7 +90,7 @@ public void whenBuildingClosedRoute_routeEndShouldHaveLocationOfVehicle() {
         Shipment s2 = createStandardShipment("s2").build();
 
         Vehicle vehicle = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance("vehLoc")).setEndLocation(Location.newInstance("vehLoc"))
-                .build();
+            .build();
 
         VehicleRoute.Builder builder = VehicleRoute.Builder.newInstance(vehicle, mock(Driver.class));
         builder.addPickup(s);
@@ -146,13 +145,12 @@ protected Builder createStandardShipment(String name) {
         Location loc = Location.Builder.newInstance().setId("delLoc").build();
         TimeWindow tw = TimeWindow.newInstance(0, 10);
         return Shipment.Builder.newInstance(name)
-                .addSizeDimension(0, 10)
-                .setPickupTimeWindow(tw)
-                .setDeliveryTimeWindow(tw)
-                .setPickupLocation(loc)
-                .setDeliveryLocation(loc);
+            .addSizeDimension(0, 10)
+            .setPickupTimeWindow(tw)
+            .setDeliveryTimeWindow(tw)
+            .setPickupLocation(loc)
+            .setDeliveryLocation(loc);
     }
 
 
-
 }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivityTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivityTest.java
index 68c7ef586..df653030f 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivityTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivityTest.java
@@ -17,17 +17,14 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
-
-import org.junit.Before;
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.job.Break;
 import com.graphhopper.jsprit.core.problem.job.Break.Builder;
 import com.graphhopper.jsprit.core.problem.job.Service;
+import org.junit.Before;
+import org.junit.Test;
+
+import static org.junit.Assert.*;
 
 
 public class BreakActivityTest {
@@ -39,7 +36,7 @@
     @Before
     public void doBefore() {
         Builder breakBuilder = new Break.Builder("service")
-                        .setTimeWindow(TimeWindow.newInstance(1., 2.)).setServiceTime(3);
+            .setTimeWindow(TimeWindow.newInstance(1., 2.)).setServiceTime(3);
         service = breakBuilder.build();
         serviceActivity = BreakActivity.newInstance(service, breakBuilder);
         serviceActivity.setTheoreticalEarliestOperationStartTime(service.getTimeWindow().getStart());
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DefaultShipmentActivityFactoryTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DefaultShipmentActivityFactoryTest.java
index 5f606cf8d..173bf4814 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DefaultShipmentActivityFactoryTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DefaultShipmentActivityFactoryTest.java
@@ -17,14 +17,12 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertTrue;
-
-import org.junit.Ignore;
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
+import org.junit.Test;
+
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertTrue;
 
 public class DefaultShipmentActivityFactoryTest {
 
@@ -32,7 +30,7 @@
     public void whenCreatingPickupActivityWithShipment_itShouldReturnPickupShipment() {
         DefaultShipmentActivityFactory factory = new DefaultShipmentActivityFactory();
         Shipment shipment = Shipment.Builder.newInstance("s")
-                        .setPickupLocation(Location.Builder.newInstance().setId("pLoc").build()).setDeliveryLocation(Location.newInstance("dLoc")).build();
+            .setPickupLocation(Location.Builder.newInstance().setId("pLoc").build()).setDeliveryLocation(Location.newInstance("dLoc")).build();
         TourActivity act = factory.createPickup(shipment);
         assertNotNull(act);
         assertTrue(act instanceof PickupShipmentDEPRECATED);
@@ -42,7 +40,7 @@ public void whenCreatingPickupActivityWithShipment_itShouldReturnPickupShipment(
     public void whenCreatingDeliverActivityWithShipment_itShouldReturnDeliverShipment() {
         DefaultShipmentActivityFactory factory = new DefaultShipmentActivityFactory();
         Shipment shipment = Shipment.Builder.newInstance("s")
-                        .setPickupLocation(Location.Builder.newInstance().setId("pLoc").build()).setDeliveryLocation(Location.newInstance("dLoc")).build();
+            .setPickupLocation(Location.Builder.newInstance().setId("pLoc").build()).setDeliveryLocation(Location.newInstance("dLoc")).build();
         TourActivity act = factory.createDelivery(shipment);
         assertNotNull(act);
         assertTrue(act instanceof DeliverShipmentDEPRECATED);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverServiceDEPRECATEDTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverServiceDEPRECATEDTest.java
index 33e820196..efe75728a 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverServiceDEPRECATEDTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverServiceDEPRECATEDTest.java
@@ -17,14 +17,13 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.job.Delivery;
 import org.junit.Before;
 import org.junit.Test;
 
-import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.job.Delivery;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
 
 public class DeliverServiceDEPRECATEDTest {
 
@@ -35,8 +34,8 @@
     @Before
     public void doBefore() {
         service = new Delivery.Builder("service").setLocation(Location.newInstance("loc")).
-                setTimeWindow(TimeWindow.newInstance(1., 2.)).
-                addSizeDimension(0, 10).addSizeDimension(1, 100).addSizeDimension(2, 1000).build();
+            setTimeWindow(TimeWindow.newInstance(1., 2.)).
+            addSizeDimension(0, 10).addSizeDimension(1, 100).addSizeDimension(2, 1000).build();
         deliver = new DeliverServiceDEPRECATED(service);
         deliver.setTheoreticalEarliestOperationStartTime(service.getTimeWindow().getStart());
         deliver.setTheoreticalLatestOperationStartTime(service.getTimeWindow().getEnd());
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverShipmentTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverShipmentTest.java
index 8989a95a8..c76ada6ca 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverShipmentTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverShipmentTest.java
@@ -17,14 +17,13 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.job.Shipment;
 import org.junit.Before;
 import org.junit.Test;
 
-import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
 
 public class DeliverShipmentTest {
 
@@ -33,10 +32,10 @@
     @Before
     public void doBefore() {
         Shipment shipment = Shipment.Builder.newInstance("shipment").setPickupLocation(Location.Builder.newInstance().setId("pickupLoc").build())
-                .setDeliveryLocation(Location.newInstance("deliveryLoc"))
-                .setPickupTimeWindow(TimeWindow.newInstance(1., 2.))
-                .setDeliveryTimeWindow(TimeWindow.newInstance(3., 4.))
-                .addSizeDimension(0, 10).addSizeDimension(1, 100).addSizeDimension(2, 1000).build();
+            .setDeliveryLocation(Location.newInstance("deliveryLoc"))
+            .setPickupTimeWindow(TimeWindow.newInstance(1., 2.))
+            .setDeliveryTimeWindow(TimeWindow.newInstance(3., 4.))
+            .addSizeDimension(0, 10).addSizeDimension(1, 100).addSizeDimension(2, 1000).build();
         deliver = new DeliverShipmentDEPRECATED(shipment);
         deliver.setTheoreticalEarliestOperationStartTime(shipment.getDeliveryTimeWindow().getStart());
         deliver.setTheoreticalLatestOperationStartTime(shipment.getDeliveryTimeWindow().getEnd());
@@ -92,7 +91,7 @@ public void whenCopyingStart_itShouldBeDoneCorrectly() {
     @Test
     public void whenGettingCapacity_itShouldReturnItCorrectly() {
         Shipment shipment = Shipment.Builder.newInstance("s").setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).setDeliveryLocation(Location.newInstance("delLoc"))
-                .addSizeDimension(0, 10).addSizeDimension(1, 100).build();
+            .addSizeDimension(0, 10).addSizeDimension(1, 100).build();
         PickupShipmentDEPRECATED pick = new PickupShipmentDEPRECATED(shipment);
         assertEquals(10, pick.getSize().get(0));
         assertEquals(100, pick.getSize().get(1));
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/EndTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/EndTest.java
index e91b8e3dc..c4257deeb 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/EndTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/EndTest.java
@@ -17,11 +17,11 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
+import org.junit.Test;
+
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 
-import org.junit.Test;
-
 public class EndTest {
 
     @Test
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupServiceTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupServiceTest.java
index 25a7ee497..12f4f16e0 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupServiceTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupServiceTest.java
@@ -17,14 +17,13 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.job.Service;
 import org.junit.Before;
 import org.junit.Test;
 
-import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
 
 public class PickupServiceTest {
 
@@ -35,8 +34,8 @@
     @Before
     public void doBefore() {
         service = new Service.Builder("service").setLocation(Location.newInstance("loc")).
-                setTimeWindow(TimeWindow.newInstance(1., 2.)).
-                addSizeDimension(0, 10).addSizeDimension(1, 100).addSizeDimension(2, 1000).build();
+            setTimeWindow(TimeWindow.newInstance(1., 2.)).
+            addSizeDimension(0, 10).addSizeDimension(1, 100).addSizeDimension(2, 1000).build();
         pickup = new PickupServiceDEPRECATED(service);
         pickup.setTheoreticalEarliestOperationStartTime(service.getTimeWindow().getStart());
         pickup.setTheoreticalLatestOperationStartTime(service.getTimeWindow().getEnd());
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupShipmentTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupShipmentTest.java
index 83eff54a3..f8331ecea 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupShipmentTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupShipmentTest.java
@@ -17,14 +17,13 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.job.Shipment;
 import org.junit.Before;
 import org.junit.Test;
 
-import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
 
 public class PickupShipmentTest {
 
@@ -33,10 +32,10 @@
     @Before
     public void doBefore() {
         Shipment shipment = Shipment.Builder.newInstance("shipment").setPickupLocation(Location.Builder.newInstance().setId("pickupLoc").build())
-                .setDeliveryLocation(Location.newInstance("deliveryLoc"))
-                .setPickupTimeWindow(TimeWindow.newInstance(1., 2.))
-                .setDeliveryTimeWindow(TimeWindow.newInstance(3., 4.))
-                .addSizeDimension(0, 10).addSizeDimension(1, 100).addSizeDimension(2, 1000).build();
+            .setDeliveryLocation(Location.newInstance("deliveryLoc"))
+            .setPickupTimeWindow(TimeWindow.newInstance(1., 2.))
+            .setDeliveryTimeWindow(TimeWindow.newInstance(3., 4.))
+            .addSizeDimension(0, 10).addSizeDimension(1, 100).addSizeDimension(2, 1000).build();
         pickup = new PickupShipmentDEPRECATED(shipment);
         pickup.setTheoreticalEarliestOperationStartTime(shipment.getPickupTimeWindow().getStart());
         pickup.setTheoreticalLatestOperationStartTime(shipment.getPickupTimeWindow().getEnd());
@@ -92,7 +91,7 @@ public void whenCopyingStart_itShouldBeDoneCorrectly() {
     @Test
     public void whenGettingCapacity_itShouldReturnItCorrectly() {
         Shipment shipment = Shipment.Builder.newInstance("s").setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).setDeliveryLocation(Location.newInstance("delLoc"))
-                .addSizeDimension(0, 10).addSizeDimension(1, 100).build();
+            .addSizeDimension(0, 10).addSizeDimension(1, 100).build();
         PickupShipmentDEPRECATED pick = new PickupShipmentDEPRECATED(shipment);
         assertEquals(10, pick.getSize().get(0));
         assertEquals(100, pick.getSize().get(1));
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityNEWTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityNEWTest.java
index 9443b5635..6c7b7490f 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityNEWTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityNEWTest.java
@@ -17,16 +17,13 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
-
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.job.Service;
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 
-import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import static org.junit.Assert.*;
 
 
 public class ServiceActivityNEWTest {
@@ -38,8 +35,8 @@
     @Before
     public void doBefore() {
         service = new Service.Builder("service").setLocation(Location.newInstance("loc")).
-                setTimeWindow(TimeWindow.newInstance(1., 2.)).
-                addSizeDimension(0, 10).addSizeDimension(1, 100).addSizeDimension(2, 1000).build();
+            setTimeWindow(TimeWindow.newInstance(1., 2.)).
+            addSizeDimension(0, 10).addSizeDimension(1, 100).addSizeDimension(2, 1000).build();
         serviceActivity = ServiceActivityNEW.newInstance(service);
         serviceActivity.setTheoreticalEarliestOperationStartTime(service.getTimeWindow().getStart());
         serviceActivity.setTheoreticalLatestOperationStartTime(service.getTimeWindow().getEnd());
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/StartTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/StartTest.java
index 890d6b7a7..054f11617 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/StartTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/StartTest.java
@@ -17,11 +17,11 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
+import org.junit.Test;
+
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 
-import org.junit.Test;
-
 public class StartTest {
 
     @Test
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TestRefs.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TestRefs.java
index 4631173cd..2a0cc360a 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TestRefs.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TestRefs.java
@@ -17,12 +17,12 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import static org.junit.Assert.assertTrue;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.List;
 
-import org.junit.Test;
+import static org.junit.Assert.assertTrue;
 
 
 public class TestRefs {
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TestTourActivities.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TestTourActivities.java
index 74bee7952..8048a74d9 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TestTourActivities.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TestTourActivities.java
@@ -17,16 +17,13 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
-
-import org.junit.Before;
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.job.Service;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
+import org.junit.Before;
+import org.junit.Test;
+
+import static org.junit.Assert.*;
 
 
 public class TestTourActivities {
@@ -80,7 +77,7 @@ public void whenAddingAServiceAndThenRemovingTheServiceAgain_tourShouldNotServeI
     @Test
     public void whenAddingAShipmentActivity_tourShouldServeShipment() {
         Shipment s = Shipment.Builder.newInstance("s").addSizeDimension(0, 1).setDeliveryLocation(Location.newInstance("delLoc"))
-                        .setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+            .setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         TourShipmentActivityFactory fac = new DefaultShipmentActivityFactory();
         TourActivity pickupShipment = fac.createPickup(s);
         TourActivity deliverShipment = fac.createDelivery(s);
@@ -94,9 +91,9 @@ public void whenAddingAShipmentActivity_tourShouldServeShipment() {
     @Test
     public void whenRemovingShipment_tourShouldNotServiceItAnymore() {
         Shipment s = Shipment.Builder.newInstance("s").addSizeDimension(0, 1)
-                        .setDeliveryLocation(Location.newInstance("delLoc"))
-                        .setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build())
-                        .build();
+            .setDeliveryLocation(Location.newInstance("delLoc"))
+            .setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build())
+            .build();
         TourShipmentActivityFactory fac = new DefaultShipmentActivityFactory();
         TourActivity pickupShipment = fac.createPickup(s);
         TourActivity deliverShipment = fac.createDelivery(s);
@@ -111,8 +108,8 @@ public void whenRemovingShipment_tourShouldNotServiceItAnymore() {
     @Test
     public void whenRemovingShipment_theirCorrespondingActivitiesShouldBeRemoved() {
         Shipment s = Shipment.Builder.newInstance("s").addSizeDimension(0, 1)
-                        .setDeliveryLocation(Location.newInstance("delLoc"))
-                        .setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+            .setDeliveryLocation(Location.newInstance("delLoc"))
+            .setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         TourShipmentActivityFactory fac = new DefaultShipmentActivityFactory();
         TourActivity pickupShipment = fac.createPickup(s);
         TourActivity deliverShipment = fac.createDelivery(s);
@@ -153,8 +150,8 @@ public void copyingSeqShouldWork() {
     @Test
     public void removingShipmentActivityShouldWork() {
         Shipment s = Shipment.Builder.newInstance("s").addSizeDimension(0, 1)
-                        .setDeliveryLocation(Location.newInstance("delLoc"))
-                        .setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+            .setDeliveryLocation(Location.newInstance("delLoc"))
+            .setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         TourShipmentActivityFactory fac = new DefaultShipmentActivityFactory();
         TourActivity pickupShipment = fac.createPickup(s);
         TourActivity deliverShipment = fac.createDelivery(s);
@@ -180,8 +177,8 @@ public void removingShipmentActivityShouldWork() {
     @Test
     public void whenCopyingShipmentActivitySeq_jobSizeShouldBeCorrect() {
         Shipment s = Shipment.Builder.newInstance("s").addSizeDimension(0, 1)
-                        .setDeliveryLocation(Location.newInstance("delLoc"))
-                        .setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+            .setDeliveryLocation(Location.newInstance("delLoc"))
+            .setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         TourShipmentActivityFactory fac = new DefaultShipmentActivityFactory();
         TourActivity pickupShipment = fac.createPickup(s);
         TourActivity deliverShipment = fac.createDelivery(s);
@@ -202,7 +199,7 @@ public void whenCopyingShipmentActivitySeq_jobSizeShouldBeCorrect() {
     @Test
     public void whenCopyingShipmentActivitySeq_noActivitiesShouldBeCorrect() {
         Shipment s = Shipment.Builder.newInstance("s").addSizeDimension(0, 1)
-                        .setDeliveryLocation(Location.newInstance("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+            .setDeliveryLocation(Location.newInstance("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         TourShipmentActivityFactory fac = new DefaultShipmentActivityFactory();
         TourActivity pickupShipment = fac.createPickup(s);
         TourActivity deliverShipment = fac.createDelivery(s);
@@ -223,7 +220,7 @@ public void whenCopyingShipmentActivitySeq_noActivitiesShouldBeCorrect() {
     @Test
     public void whenCopyingShipmentActivitySeq_itShouldContaintPickupAct() {
         Shipment s = Shipment.Builder.newInstance("s").addSizeDimension(0, 1)
-                        .setDeliveryLocation(Location.newInstance("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+            .setDeliveryLocation(Location.newInstance("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         TourShipmentActivityFactory fac = new DefaultShipmentActivityFactory();
         TourActivity pickupShipment = fac.createPickup(s);
         TourActivity deliverShipment = fac.createDelivery(s);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TimeWindowsImplTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TimeWindowsImplTest.java
index 0780458bf..11e19ed32 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TimeWindowsImplTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TimeWindowsImplTest.java
@@ -26,21 +26,21 @@
 public class TimeWindowsImplTest {
 
     @Test(expected = IllegalArgumentException.class)
-    public void overlappingTW_shouldThrowException(){
+    public void overlappingTW_shouldThrowException() {
         TimeWindowsImpl tws = new TimeWindowsImpl();
         tws.add(TimeWindow.newInstance(50, 100));
-        tws.add(TimeWindow.newInstance(90,150));
+        tws.add(TimeWindow.newInstance(90, 150));
     }
 
     @Test(expected = IllegalArgumentException.class)
-    public void overlappingTW2_shouldThrowException(){
+    public void overlappingTW2_shouldThrowException() {
         TimeWindowsImpl tws = new TimeWindowsImpl();
         tws.add(TimeWindow.newInstance(50, 100));
-        tws.add(TimeWindow.newInstance(40,150));
+        tws.add(TimeWindow.newInstance(40, 150));
     }
 
     @Test(expected = IllegalArgumentException.class)
-    public void overlappingTW3_shouldThrowException(){
+    public void overlappingTW3_shouldThrowException() {
         TimeWindowsImpl tws = new TimeWindowsImpl();
         tws.add(TimeWindow.newInstance(50, 100));
         tws.add(TimeWindow.newInstance(50, 100));
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/TestVehicleFleetManagerImpl.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/TestVehicleFleetManagerImpl.java
index 3c569e124..6d233bd00 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/TestVehicleFleetManagerImpl.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/TestVehicleFleetManagerImpl.java
@@ -17,20 +17,17 @@
  */
 package com.graphhopper.jsprit.core.problem.vehicle;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
+import org.junit.Before;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.List;
 
-import org.junit.Before;
-import org.junit.Test;
-
-import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
+import static org.junit.Assert.*;
 
 public class TestVehicleFleetManagerImpl {
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleImplTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleImplTest.java
index 91a3bb644..29eef872f 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleImplTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleImplTest.java
@@ -18,16 +18,12 @@
 package com.graphhopper.jsprit.core.problem.vehicle;
 
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertTrue;
-
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.job.Break;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
+import org.junit.Test;
+
+import static org.junit.Assert.*;
 
 
 public class VehicleImplTest {
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleTypeImplTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleTypeImplTest.java
index 56df24da0..854783471 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleTypeImplTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleTypeImplTest.java
@@ -17,12 +17,10 @@
  */
 package com.graphhopper.jsprit.core.problem.vehicle;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertTrue;
-
 import org.junit.Test;
 
+import static org.junit.Assert.*;
+
 public class VehicleTypeImplTest {
 
     @Test(expected = IllegalArgumentException.class)
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleTypeKeyTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleTypeKeyTest.java
index a760932b6..9f195433f 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleTypeKeyTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleTypeKeyTest.java
@@ -19,12 +19,11 @@
 package com.graphhopper.jsprit.core.problem.vehicle;
 
 
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
-
+import com.graphhopper.jsprit.core.problem.Location;
 import org.junit.Test;
 
-import com.graphhopper.jsprit.core.problem.Location;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
 
 public class VehicleTypeKeyTest {
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/ChristofidesReader.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/ChristofidesReader.java
index 50d821e15..d8fac7e52 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/ChristofidesReader.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/ChristofidesReader.java
@@ -18,14 +18,6 @@
 package com.graphhopper.jsprit.core.util;
 
 
-import java.io.BufferedReader;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
@@ -34,6 +26,13 @@
 import com.graphhopper.jsprit.core.problem.job.Service;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
 
 
 /**
@@ -96,15 +95,13 @@ public void read(InputStream inputStream) {
                 Coordinate customerCoord = makeCoord(tokens[0].trim(), tokens[1].trim());
                 int demand = Integer.parseInt(tokens[2].trim());
                 String customer = Integer.valueOf(counter - 1).toString();
-                if(jobType.equals(JobType.SERVICE)) {
+                if (jobType.equals(JobType.SERVICE)) {
                     Service service = new Service.Builder(customer).addSizeDimension(0, demand).setServiceTime(serviceTime).setLocation(Location.newInstance(customerCoord.getX(), customerCoord.getY())).build();
                     vrpBuilder.addJob(service);
-                }
-                else if(jobType.equals(JobType.DELIVERY)){
+                } else if (jobType.equals(JobType.DELIVERY)) {
                     Delivery service = new Delivery.Builder(customer).addSizeDimension(0, demand).setServiceTime(serviceTime).setLocation(Location.newInstance(customerCoord.getX(), customerCoord.getY())).build();
                     vrpBuilder.addJob(service);
-                }
-                else if(jobType.equals(JobType.PICKUP)){
+                } else if (jobType.equals(JobType.PICKUP)) {
                     Pickup service = new Pickup.Builder(customer).addSizeDimension(0, demand).setServiceTime(serviceTime).setLocation(Location.newInstance(customerCoord.getX(), customerCoord.getY())).build();
                     vrpBuilder.addJob(service);
                 }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/CostFactory.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/CostFactory.java
index 7ea3891eb..264054328 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/CostFactory.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/CostFactory.java
@@ -39,12 +39,12 @@ public Coordinate getCoord(String id) {
                 //assume: locationId="x,y"
                 String[] splitted = id.split(",");
                 return Coordinate.newInstance(Double.parseDouble(splitted[0]),
-                                Double.parseDouble(splitted[1]));
+                    Double.parseDouble(splitted[1]));
             }
 
         };
         return new DefaultCosts(ManhattanDistanceCalculator.getInstance())
-                        .withCoordinateConverter(locations);
+            .withCoordinateConverter(locations);
     }
 
     /**
@@ -63,11 +63,11 @@ public Coordinate getCoord(String id) {
                 //assume: locationId="x,y"
                 String[] splitted = id.split(",");
                 return Coordinate.newInstance(Double.parseDouble(splitted[0]),
-                                Double.parseDouble(splitted[1]));
+                    Double.parseDouble(splitted[1]));
             }
 
         };
         return new DefaultCosts(EuclideanDistanceCalculator.getInstance())
-                        .withCoordinateConverter(locations);
+            .withCoordinateConverter(locations);
     }
 }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/FastVehicleRoutingTransportCostsMatrixTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/FastVehicleRoutingTransportCostsMatrixTest.java
index b32453874..4e1361eec 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/FastVehicleRoutingTransportCostsMatrixTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/FastVehicleRoutingTransportCostsMatrixTest.java
@@ -17,16 +17,15 @@
  */
 package com.graphhopper.jsprit.core.util;
 
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
-
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
+import org.junit.Test;
+
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
 
 public class FastVehicleRoutingTransportCostsMatrixTest {
 
@@ -67,7 +66,7 @@ public void whenAddingTimeToSymmetricMatrix_itShouldReturnCorrectValues() {
     @Test
     public void whenAddingTimeAndDistanceToSymmetricMatrix_itShouldReturnCorrectValues2() {
         FastVehicleRoutingTransportCostsMatrix.Builder matrixBuilder = FastVehicleRoutingTransportCostsMatrix.Builder.newInstance(3, true);
-        matrixBuilder.addTransportTimeAndDistance(1, 2, 2.,100.);
+        matrixBuilder.addTransportTimeAndDistance(1, 2, 2., 100.);
         FastVehicleRoutingTransportCostsMatrix matrix = matrixBuilder.build();
         assertEquals(2., matrix.getTransportTime(loc(1), loc(2), 0.0, null, null), 0.1);
         assertEquals(2., matrix.getTransportTime(loc(2), loc(1), 0.0, null, null), 0.1);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/GreatCircleDistanceCalculatorTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/GreatCircleDistanceCalculatorTest.java
index 1bd242732..7ecaf0a51 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/GreatCircleDistanceCalculatorTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/GreatCircleDistanceCalculatorTest.java
@@ -18,11 +18,10 @@
 
 package com.graphhopper.jsprit.core.util;
 
-import static org.junit.Assert.assertEquals;
-
+import com.graphhopper.jsprit.core.distance.SphericalDistanceCalculator;
 import org.junit.Test;
 
-import com.graphhopper.jsprit.core.distance.SphericalDistanceCalculator;
+import static org.junit.Assert.assertEquals;
 
 /**
  * Created by schroeder on 28.11.14.
@@ -38,9 +37,9 @@ public void test() {
         double lat2 = 54.0833333;
 
         double greatCircle = SphericalDistanceCalculator.getInstance().calculateDistance(
-                        Coordinate.newInstance(lon1, lat1),
-                        Coordinate.newInstance(lon2, lat2)
-                        );
+            Coordinate.newInstance(lon1, lat1),
+            Coordinate.newInstance(lon2, lat2)
+        );
         assertEquals(600, greatCircle, 30.);
     }
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/LiLimReader.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/LiLimReader.java
index 810f72d65..3b53bb674 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/LiLimReader.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/LiLimReader.java
@@ -18,6 +18,15 @@
 package com.graphhopper.jsprit.core.util;
 
 
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.Builder;
+import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.InputStream;
@@ -27,16 +36,6 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.Builder;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
-import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
-import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
-
 
 /**
  * test instances for the capacitated vrp with pickup and deliveries and time windows.
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/RandomUtilsTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/RandomUtilsTest.java
index ef8b166a8..9a2f57ddf 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/RandomUtilsTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/RandomUtilsTest.java
@@ -18,19 +18,17 @@
 
 package com.graphhopper.jsprit.core.util;
 
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
+import com.graphhopper.jsprit.core.problem.job.Job;
+import junit.framework.Assert;
+import org.junit.Test;
 
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.List;
 import java.util.Random;
 
-import org.junit.Test;
-
-import com.graphhopper.jsprit.core.problem.job.Job;
-
-import junit.framework.Assert;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
 
 /**
  * Created by schroeder on 14/01/15.
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/SolomonReader.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/SolomonReader.java
index 00846d8bc..6c8a544e9 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/SolomonReader.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/SolomonReader.java
@@ -18,14 +18,6 @@
 package com.graphhopper.jsprit.core.util;
 
 
-import java.io.BufferedReader;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
@@ -33,6 +25,13 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
 
 
 /**
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/TimeTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/TimeTest.java
index 00d609c63..97186e1ac 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/TimeTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/TimeTest.java
@@ -17,10 +17,10 @@
  */
 package com.graphhopper.jsprit.core.util;
 
-import static org.junit.Assert.assertEquals;
-
 import org.junit.Test;
 
+import static org.junit.Assert.assertEquals;
+
 public class TimeTest {
 
     @Test
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/VehicleRoutingTransportCostsMatrixTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/VehicleRoutingTransportCostsMatrixTest.java
index 3d282e81b..6ec6d80c6 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/VehicleRoutingTransportCostsMatrixTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/VehicleRoutingTransportCostsMatrixTest.java
@@ -17,16 +17,15 @@
  */
 package com.graphhopper.jsprit.core.util;
 
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
-
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
+import org.junit.Test;
+
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
 
 public class VehicleRoutingTransportCostsMatrixTest {
 
diff --git a/jsprit-examples/pom.xml b/jsprit-examples/pom.xml
index 0600d0d31..1bfdafb7e 100644
--- a/jsprit-examples/pom.xml
+++ b/jsprit-examples/pom.xml
@@ -16,7 +16,8 @@
   ~ limitations under the License.
   -->
 
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
     <parent>
         <groupId>com.graphhopper</groupId>
         <artifactId>jsprit</artifactId>
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/AdditionalDistanceConstraintExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/AdditionalDistanceConstraintExample.java
index ec520bbe4..812f48f3b 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/AdditionalDistanceConstraintExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/AdditionalDistanceConstraintExample.java
@@ -19,8 +19,6 @@
 package com.graphhopper.jsprit.examples;
 
 
-import java.util.Collection;
-
 import com.graphhopper.jsprit.analysis.toolbox.Plotter;
 import com.graphhopper.jsprit.core.algorithm.VehicleRoutingAlgorithm;
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
@@ -42,6 +40,8 @@
 import com.graphhopper.jsprit.core.util.VehicleRoutingTransportCostsMatrix;
 import com.graphhopper.jsprit.io.problem.VrpXMLReader;
 
+import java.util.Collection;
+
 //import jsprit.core.problem.solution.route.state.StateFactory; //v1.3.1
 
 public class AdditionalDistanceConstraintExample {
@@ -153,7 +153,7 @@ public static void main(String[] args) {
         constraintManager.addConstraint(new DistanceConstraint(120., distanceStateId, stateManager, costMatrix), ConstraintManager.Priority.CRITICAL);
 
         VehicleRoutingAlgorithm vra = Jsprit.Builder.newInstance(vrp).setStateAndConstraintManager(stateManager, constraintManager)
-                .buildAlgorithm();
+            .buildAlgorithm();
 //        vra.setMaxIterations(250); //v1.3.1
         vra.setMaxIterations(250); //head of development - upcoming release (v1.4)
 
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/BicycleMessenger.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/BicycleMessenger.java
index 1cbd09065..52f10f140 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/BicycleMessenger.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/BicycleMessenger.java
@@ -17,14 +17,6 @@
  */
 package com.graphhopper.jsprit.examples;
 
-import java.io.BufferedReader;
-import java.io.File;
-import java.io.FileReader;
-import java.io.IOException;
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.Map;
-
 import com.graphhopper.jsprit.analysis.toolbox.AlgorithmSearchProgressChartListener;
 import com.graphhopper.jsprit.analysis.toolbox.GraphStreamViewer;
 import com.graphhopper.jsprit.analysis.toolbox.GraphStreamViewer.Label;
@@ -63,6 +55,14 @@
 import com.graphhopper.jsprit.core.util.Solutions;
 import com.graphhopper.jsprit.util.Examples;
 
+import java.io.BufferedReader;
+import java.io.File;
+import java.io.FileReader;
+import java.io.IOException;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.Map;
+
 
 /**
  * This class provides the/a solution to the following problem:
@@ -102,7 +102,7 @@
         private final StateId latest_act_arrival_time_stateId;
 
         public ThreeTimesLessThanBestDirectRouteConstraint(StateId latest_act_arrival_time, Map<String, Double> nearestMessengers,
-                VehicleRoutingTransportCosts routingCosts, RouteAndActivityStateGetter stateManager) {
+                                                           VehicleRoutingTransportCosts routingCosts, RouteAndActivityStateGetter stateManager) {
             bestMessengers = nearestMessengers;
             this.routingCosts = routingCosts;
             this.stateManager = stateManager;
@@ -113,7 +113,7 @@ public ThreeTimesLessThanBestDirectRouteConstraint(StateId latest_act_arrival_ti
         public ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prevAct, TourActivity newAct, TourActivity nextAct, double prevActDepTime) {
             //make sure vehicle can manage direct path
             double arrTime_at_nextAct_onDirectRoute = prevActDepTime + routingCosts.getTransportTime(prevAct.getLocation(), nextAct.getLocation(),
-                    prevActDepTime, iFacts.getNewDriver(), iFacts.getNewVehicle());
+                prevActDepTime, iFacts.getNewDriver(), iFacts.getNewVehicle());
             Double latest_arrTime_at_nextAct = stateManager.getActivityState(nextAct, latest_act_arrival_time_stateId, Double.class);
             if (latest_arrTime_at_nextAct == null) {
                 latest_arrTime_at_nextAct = nextAct.getTheoreticalLatestOperationStartTime();
@@ -124,7 +124,7 @@ public ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prev
             }
 
             double arrTime_at_newAct = prevActDepTime
-                    + routingCosts.getTransportTime(prevAct.getLocation(), newAct.getLocation(), prevActDepTime, iFacts.getNewDriver(), iFacts.getNewVehicle());
+                + routingCosts.getTransportTime(prevAct.getLocation(), newAct.getLocation(), prevActDepTime, iFacts.getNewDriver(), iFacts.getNewVehicle());
             //local impact
             //no matter whether it is a pickupShipment or deliverShipment activities. both arrivalTimes must be < 3*best.
             double directTimeOfNearestMessenger = bestMessengers.get(((JobActivity) newAct).getJob().getId());
@@ -136,13 +136,13 @@ public ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prev
             //impact on whole route, since insertion of newAct shifts all subsequent activities forward in time
             double departureTime_at_newAct = arrTime_at_newAct + newAct.getOperationTime();
             double latest_arrTime_at_newAct = latest_arrTime_at_nextAct - routingCosts.getTransportTime(newAct.getLocation(), nextAct.getLocation(),
-                    departureTime_at_newAct, iFacts.getNewDriver(), iFacts.getNewVehicle());
+                departureTime_at_newAct, iFacts.getNewDriver(), iFacts.getNewVehicle());
             if (arrTime_at_newAct > latest_arrTime_at_newAct) {
                 return ConstraintsStatus.NOT_FULFILLED;
             }
 
             double arrTime_at_nextAct = departureTime_at_newAct + routingCosts.getTransportTime(newAct.getLocation(), nextAct.getLocation(),
-                    departureTime_at_newAct, iFacts.getNewDriver(), iFacts.getNewVehicle());
+                departureTime_at_newAct, iFacts.getNewDriver(), iFacts.getNewVehicle());
             //here you need an activity state
             if (arrTime_at_nextAct > latest_arrTime_at_nextAct) {
                 return ConstraintsStatus.NOT_FULFILLED;
@@ -211,7 +211,7 @@ public boolean fulfilled(JobInsertionContext insertionContext) {
         private final StateId latest_act_arrival_time_stateId;
 
         public UpdateLatestActivityStartTimes(StateId latest_act_arrival_time, StateManager stateManager, VehicleRoutingTransportCosts routingCosts,
-                Map<String, Double> bestMessengers) {
+                                              Map<String, Double> bestMessengers) {
             super();
             this.stateManager = stateManager;
             this.routingCosts = routingCosts;
@@ -230,11 +230,11 @@ public void begin(VehicleRoute route) {
         public void visit(TourActivity currAct) {
             double timeOfNearestMessenger = bestMessengers.get(((JobActivity) currAct).getJob().getId());
             double potential_latest_arrTime_at_currAct = latest_arrTime_at_prevAct - routingCosts.getBackwardTransportTime(currAct.getLocation(),
-                    prevAct.getLocation(), latest_arrTime_at_prevAct, route.getDriver(), route.getVehicle()) - currAct.getOperationTime();
+                prevAct.getLocation(), latest_arrTime_at_prevAct, route.getDriver(), route.getVehicle()) - currAct.getOperationTime();
             double latest_arrTime_at_currAct = Math.min(3 * timeOfNearestMessenger, potential_latest_arrTime_at_currAct);
             stateManager.putActivityState(currAct, latest_act_arrival_time_stateId, latest_arrTime_at_currAct);
             assert currAct.getArrTime() <= latest_arrTime_at_currAct : "this must not be since it breaks condition; actArrTime: " + currAct.getArrTime()
-                    + " latestArrTime: " + latest_arrTime_at_currAct + " vehicle: " + route.getVehicle().getId();
+                + " latestArrTime: " + latest_arrTime_at_currAct + " vehicle: " + route.getVehicle().getId();
             latest_arrTime_at_prevAct = latest_arrTime_at_currAct;
             prevAct = currAct;
         }
@@ -260,7 +260,7 @@ public static void main(String[] args) throws IOException {
         readMessengers(problemBuilder);
         //add constraints to problem
         VehicleRoutingTransportCosts routingCosts = new DefaultCosts(EuclideanDistanceCalculator.getInstance())
-                .withCoordinateConverter(problemBuilder.getLocations()); //which is the default VehicleRoutingTransportCosts in builder above
+            .withCoordinateConverter(problemBuilder.getLocations()); //which is the default VehicleRoutingTransportCosts in builder above
         problemBuilder.setRoutingCost(routingCosts);
         //finally build the problem
 //        problemBuilder.addPenaltyVehicles(20.0,50000);
@@ -283,12 +283,12 @@ public static void main(String[] args) throws IOException {
         ConstraintManager constraintManager = new ConstraintManager(bicycleMessengerProblem, stateManager);
         constraintManager.addLoadConstraint();
         constraintManager.addConstraint(
-                new ThreeTimesLessThanBestDirectRouteConstraint(latest_act_arrival_time_stateId, nearestMessengers, routingCosts, stateManager),
-                ConstraintManager.Priority.CRITICAL);
+            new ThreeTimesLessThanBestDirectRouteConstraint(latest_act_arrival_time_stateId, nearestMessengers, routingCosts, stateManager),
+            ConstraintManager.Priority.CRITICAL);
         constraintManager.addConstraint(new IgnoreMessengerThatCanNeverMeetTimeRequirements(nearestMessengers, routingCosts));
 
         VehicleRoutingAlgorithm algorithm = Jsprit.Builder.newInstance(bicycleMessengerProblem)
-                .setStateAndConstraintManager(stateManager, constraintManager).buildAlgorithm();
+            .setStateAndConstraintManager(stateManager, constraintManager).buildAlgorithm();
 
         algorithm.setMaxIterations(2000);
 
@@ -339,19 +339,19 @@ public static void main(String[] args) throws IOException {
         new GraphStreamViewer(bicycleMessengerProblem).labelWith(Label.ID).setRenderShipments(true).setRenderDelay(150).display();
 //
         new GraphStreamViewer(bicycleMessengerProblem, Solutions.bestOf(solutions)).setGraphStreamFrameScalingFactor(1.5).setCameraView(12500, 55000, 0.25)
-                .labelWith(Label.ACTIVITY).setRenderShipments(true).setRenderDelay(150).display();
+            .labelWith(Label.ACTIVITY).setRenderShipments(true).setRenderDelay(150).display();
 
     }
 
     //if you wanne run this enable assertion by putting an '-ea' in your vmargument list - Run As --> Run Configurations --> (x)=Arguments --> VM arguments: -ea
     private static void validateSolution(VehicleRoutingProblemSolution bestOf, VehicleRoutingProblem bicycleMessengerProblem,
-            Map<String, Double> nearestMessengers) {
+                                         Map<String, Double> nearestMessengers) {
         for (VehicleRoute route : bestOf.getRoutes()) {
             for (TourActivity act : route.getActivities()) {
                 if (act.getArrTime() > 3 * nearestMessengers.get(((JobActivity) act).getJob().getId())) {
                     SolutionPrinter.print(bicycleMessengerProblem, bestOf, SolutionPrinter.Print.VERBOSE);
                     throw new IllegalStateException("three times less than ... constraint broken. this must not be. act.getArrTime(): " + act.getArrTime()
-                            + " allowed: " + 3 * nearestMessengers.get(((JobActivity) act).getJob().getId()));
+                        + " allowed: " + 3 * nearestMessengers.get(((JobActivity) act).getJob().getId()));
                 }
             }
         }
@@ -375,7 +375,7 @@ private static void validateSolution(VehicleRoutingProblemSolution bestOf, Vehic
     static double getTimeOfDirectRoute(Job job, Vehicle v, VehicleRoutingTransportCosts routingCosts) {
         Shipment envelope = (Shipment) job;
         return routingCosts.getTransportTime(v.getStartLocation(), envelope.getPickupLocation(), 0.0, DriverImpl.noDriver(), v) +
-                routingCosts.getTransportTime(envelope.getPickupLocation(), envelope.getDeliveryLocation(), 0.0, DriverImpl.noDriver(), v);
+            routingCosts.getTransportTime(envelope.getPickupLocation(), envelope.getDeliveryLocation(), 0.0, DriverImpl.noDriver(), v);
     }
 
     private static void readEnvelopes(Builder problemBuilder) throws IOException {
@@ -390,11 +390,11 @@ private static void readEnvelopes(Builder problemBuilder) throws IOException {
             String[] tokens = line.split("\\s+");
             //define your envelope which is basically a shipment from A to B
             Shipment envelope = Shipment.Builder.newInstance(tokens[1]).addSizeDimension(0, 1)
-                    .setPickupLocation(Location.Builder.newInstance()
-                            .setCoordinate(Coordinate.newInstance(Double.parseDouble(tokens[2]), Double.parseDouble(tokens[3]))).build())
-                    .setDeliveryLocation(Location.Builder.newInstance()
-                            .setCoordinate(Coordinate.newInstance(Double.parseDouble(tokens[4]), Double.parseDouble(tokens[5]))).build())
-                    .build();
+                .setPickupLocation(Location.Builder.newInstance()
+                    .setCoordinate(Coordinate.newInstance(Double.parseDouble(tokens[2]), Double.parseDouble(tokens[3]))).build())
+                .setDeliveryLocation(Location.Builder.newInstance()
+                    .setCoordinate(Coordinate.newInstance(Double.parseDouble(tokens[4]), Double.parseDouble(tokens[5]))).build())
+                .build();
             problemBuilder.addJob(envelope);
         }
         reader.close();
@@ -421,9 +421,9 @@ private static void readMessengers(Builder problemBuilder) throws IOException {
             String[] tokens = line.split("\\s+");
             //build your vehicle
             VehicleImpl vehicle = VehicleImpl.Builder.newInstance(tokens[1])
-                    .setStartLocation(Location.Builder.newInstance()
-                            .setCoordinate(Coordinate.newInstance(Double.parseDouble(tokens[2]), Double.parseDouble(tokens[3]))).build())
-                    .setReturnToDepot(false).setType(messengerType).build();
+                .setStartLocation(Location.Builder.newInstance()
+                    .setCoordinate(Coordinate.newInstance(Double.parseDouble(tokens[2]), Double.parseDouble(tokens[3]))).build())
+                .setReturnToDepot(false).setType(messengerType).build();
             problemBuilder.addVehicle(vehicle);
         }
         reader.close();
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/BreakExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/BreakExample.java
index 62907b99d..7cc2a04f1 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/BreakExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/BreakExample.java
@@ -51,7 +51,7 @@ public static void main(String[] args) {
         VehicleType vehicleType = vehicleTypeBuilder.build();
 
 		/*
-		 * get a vehicle-builder and build a vehicle located at (10,10) with type "vehicleType"
+         * get a vehicle-builder and build a vehicle located at (10,10) with type "vehicleType"
 		 */
         Builder vehicleBuilder = Builder.newInstance("v1");
         vehicleBuilder.setStartLocation(Location.newInstance(10, 10));
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EnRoutePickupAndDeliveryWithMultipleDepotsAndOpenRoutesExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EnRoutePickupAndDeliveryWithMultipleDepotsAndOpenRoutesExample.java
index 902fb13b7..732430727 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EnRoutePickupAndDeliveryWithMultipleDepotsAndOpenRoutesExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EnRoutePickupAndDeliveryWithMultipleDepotsAndOpenRoutesExample.java
@@ -137,7 +137,7 @@ public static void main(String[] args) {
         VehicleRoutingProblemSolution bestSolution = Solutions.bestOf(solutions);
 
 		/*
-		 * write out problem and solution to xml-file
+         * write out problem and solution to xml-file
 		 */
         new VrpXMLWriter(problem, solutions).write("output/shipment-problem-with-solution.xml");
 
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/JobAndActivityDependenciesExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/JobAndActivityDependenciesExample.java
index 8fc78e6f3..7f5f5c05c 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/JobAndActivityDependenciesExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/JobAndActivityDependenciesExample.java
@@ -266,7 +266,7 @@ public static void main(String[] args) {
         constraintManager.addConstraint(new GetUseAndDeliverKeySimpleHardActivityConstraint(stateManager, keyPicked, keyUsed, keyDelivered), ConstraintManager.Priority.CRITICAL);
         constraintManager.addConstraint(new GetUseAndDeliverHardRouteContraint(stateManager, keyPicked, keyUsed, keyDelivered));
 
-        VehicleRoutingAlgorithm vra = Jsprit.Builder.newInstance(vrp).setStateAndConstraintManager(stateManager,constraintManager).buildAlgorithm();
+        VehicleRoutingAlgorithm vra = Jsprit.Builder.newInstance(vrp).setStateAndConstraintManager(stateManager, constraintManager).buildAlgorithm();
         vra.setMaxIterations(100);
 
         Collection<VehicleRoutingProblemSolution> solutions = vra.searchSolutions();
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleDepotWithInitialRoutesExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleDepotWithInitialRoutesExample.java
index 61b5e6394..bc68cecac 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleDepotWithInitialRoutesExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleDepotWithInitialRoutesExample.java
@@ -75,7 +75,7 @@ public static void main(String[] args) {
         new Plotter(vrp).setLabel(Label.ID).plot("output/cordeau01_problem_withInitialRoute.png", "c");
 
 		/*
-		 * solve the problem
+         * solve the problem
 		 */
 //		VehicleRoutingAlgorithm vra = Jsprit.Builder.newInstance(vrp)
 //				.setProperty(Jsprit.Parameter.ITERATIONS,"10000").buildAlgorithm();
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleTimeWindowExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleTimeWindowExample.java
index e9429b735..e41b33320 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleTimeWindowExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleTimeWindowExample.java
@@ -17,8 +17,6 @@
  */
 package com.graphhopper.jsprit.examples;
 
-import java.util.Collection;
-
 import com.graphhopper.jsprit.core.algorithm.VehicleRoutingAlgorithm;
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.distance.ManhattanDistanceCalculator;
@@ -34,6 +32,8 @@
 import com.graphhopper.jsprit.core.util.DefaultCosts;
 import com.graphhopper.jsprit.core.util.Solutions;
 
+import java.util.Collection;
+
 
 public class MultipleTimeWindowExample {
 
@@ -46,7 +46,7 @@ public static void main(String[] args) {
          */
         final int WEIGHT_INDEX = 0;
         VehicleTypeImpl.Builder vehicleTypeBuilder = VehicleTypeImpl.Builder.newInstance("vehicleType")
-                .addCapacityDimension(WEIGHT_INDEX, 10).setCostPerWaitingTime(1.);
+            .addCapacityDimension(WEIGHT_INDEX, 10).setCostPerWaitingTime(1.);
         VehicleType vehicleType = vehicleTypeBuilder.build();
 
         /*
@@ -61,39 +61,39 @@ public static void main(String[] args) {
          * build services at the required locations, each with a capacity-demand of 1.
          */
         Service service1 = new Service.Builder("1")
-                .addTimeWindow(50, 100)
-                .addTimeWindow(20, 35)
-                .addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(10, 0)).build();
+            .addTimeWindow(50, 100)
+            .addTimeWindow(20, 35)
+            .addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(10, 0)).build();
 
         Service service2 = new Service.Builder("2")
-                .addSizeDimension(WEIGHT_INDEX, 1)
+            .addSizeDimension(WEIGHT_INDEX, 1)
 //            .setServiceTime(10)
-                .setLocation(Location.newInstance(20, 0)).setServiceTime(10).build();
+            .setLocation(Location.newInstance(20, 0)).setServiceTime(10).build();
 
         Service service3 = new Service.Builder("3")
-                .addTimeWindow(5, 10)
-                .addTimeWindow(35, 50)
-                .addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(30, 0)).build();
+            .addTimeWindow(5, 10)
+            .addTimeWindow(35, 50)
+            .addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(30, 0)).build();
 
         Service service4 = new Service.Builder("4")
 //            .addTimeWindow(5,10)
-                .addTimeWindow(20, 40)
-                .addTimeWindow(45, 80)
-                .addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(40, 0)).build();
+            .addTimeWindow(20, 40)
+            .addTimeWindow(45, 80)
+            .addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(40, 0)).build();
 
         Service service5 = new Service.Builder("5")
-                .addTimeWindow(5, 10)
-                .addTimeWindow(20, 40)
-                .addTimeWindow(60, 100)
-                .addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(20, 0)).build();
+            .addTimeWindow(5, 10)
+            .addTimeWindow(20, 40)
+            .addTimeWindow(60, 100)
+            .addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(20, 0)).build();
 
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addVehicle(vehicle);
         vrpBuilder.addJob(service1).addJob(service2)
-                .addJob(service3)
-                .addJob(service4)
-                .addJob(service5);
+            .addJob(service3)
+            .addJob(service4)
+            .addJob(service5);
         vrpBuilder.setFleetSize(VehicleRoutingProblem.FleetSize.FINITE);
         vrpBuilder.setRoutingCost(new DefaultCosts(ManhattanDistanceCalculator.getInstance()));
         VehicleRoutingProblem problem = vrpBuilder.build();
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleTimeWindowExample2.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleTimeWindowExample2.java
index f99c13bf6..d298f015d 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleTimeWindowExample2.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleTimeWindowExample2.java
@@ -49,8 +49,7 @@ public static void main(String[] args) {
 		 */
         VehicleTypeImpl.Builder vehicleTypeBuilder = VehicleTypeImpl.Builder.newInstance("vehicleType")
             .addCapacityDimension(0, 60)
-            .setCostPerWaitingTime(0.8)
-            ;
+            .setCostPerWaitingTime(0.8);
         VehicleType vehicleType = vehicleTypeBuilder.build();
 
 		/*
@@ -85,7 +84,7 @@ public static void main(String[] args) {
 
 
         Random random = RandomNumberGeneration.newInstance();
-        for(int i=0;i<40;i++){
+        for (int i = 0; i < 40; i++) {
             Service service = new Service.Builder("" + (i + 1))
                 .addTimeWindow(random.nextInt(50), 200)
                 .addTimeWindow(220 + random.nextInt(50), 350)
@@ -96,8 +95,8 @@ public static void main(String[] args) {
             vrpBuilder.addJob(service);
         }
 
-        for(int i=0;i<12;i++){
-            Service service = new Service.Builder(""+(i+51))
+        for (int i = 0; i < 12; i++) {
+            Service service = new Service.Builder("" + (i + 51))
 //                .addTimeWindow(0, 80)
 ////                .addTimeWindow(120, 200)
 //                .addTimeWindow(250,500)
@@ -134,12 +133,12 @@ public static void main(String[] args) {
 		/*
          * plot
 		 */
-        new Plotter(problem,bestSolution).setLabel(Plotter.Label.ID).plot("output/plot", "mtw");
+        new Plotter(problem, bestSolution).setLabel(Plotter.Label.ID).plot("output/plot", "mtw");
 
         SolutionAnalyser a = new SolutionAnalyser(problem, bestSolution, new TransportDistance() {
             @Override
             public double getDistance(Location from, Location to, double departureTime, Vehicle vehicle) {
-                return problem.getTransportCosts().getTransportTime(from,to,0.,null,null);
+                return problem.getTransportCosts().getTransportTime(from, to, 0., null, null);
             }
         });
 
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/PickupAndDeliveryExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/PickupAndDeliveryExample.java
index 2fd4f1837..66f5d95f6 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/PickupAndDeliveryExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/PickupAndDeliveryExample.java
@@ -17,10 +17,6 @@
  */
 package com.graphhopper.jsprit.examples;
 
-import java.time.Duration;
-import java.time.LocalTime;
-import java.util.Collection;
-
 import com.graphhopper.jsprit.analysis.toolbox.AlgorithmSearchProgressChartListener;
 import com.graphhopper.jsprit.analysis.toolbox.Plotter;
 import com.graphhopper.jsprit.analysis.toolbox.Plotter.Label;
@@ -37,6 +33,10 @@
 import com.graphhopper.jsprit.io.problem.VrpXMLReader;
 import com.graphhopper.jsprit.util.Examples;
 
+import java.time.Duration;
+import java.time.LocalTime;
+import java.util.Collection;
+
 
 public class PickupAndDeliveryExample {
 
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/PickupAndDeliveryExample2.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/PickupAndDeliveryExample2.java
index 0921bcdce..794985a05 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/PickupAndDeliveryExample2.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/PickupAndDeliveryExample2.java
@@ -89,7 +89,7 @@ public static void main(String[] args) {
         SolutionPrinter.print(solution);
 
 		/*
-		 * Plot solution.
+         * Plot solution.
 		 */
 //		SolutionPlotter.plotSolutionAsPNG(vrp, solution, "output/pd_solomon_r101_solution.png","pd_r101");
         Plotter plotter = new Plotter(vrp, solution);
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/PickupAndDeliveryOpenExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/PickupAndDeliveryOpenExample.java
index 1c622a6b1..92a022af3 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/PickupAndDeliveryOpenExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/PickupAndDeliveryOpenExample.java
@@ -82,7 +82,7 @@ public static void main(String[] args) {
         VehicleRoutingProblemSolution solution = new SelectBest().selectSolution(solutions);
 
 		/*
-		 * print solution
+         * print solution
 		 */
         SolutionPrinter.print(solution);
 
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/RefuseCollectionExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/RefuseCollectionExample.java
index b5022bf2d..98981b12b 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/RefuseCollectionExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/RefuseCollectionExample.java
@@ -115,7 +115,7 @@ private static void readDemandQuantities(VehicleRoutingProblem.Builder vrpBuilde
 			 */
             Service service = new Service.Builder(lineTokens[0]).addSizeDimension(0, Integer.parseInt(lineTokens[1])).setLocation(Location.newInstance(lineTokens[0])).build();
             /*
-			 * and add it to problem
+             * and add it to problem
 			 */
             vrpBuilder.addJob(service);
         }
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/RefuseCollectionWithFastMatrixExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/RefuseCollectionWithFastMatrixExample.java
index 6fa3abee9..7b5fddb1d 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/RefuseCollectionWithFastMatrixExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/RefuseCollectionWithFastMatrixExample.java
@@ -117,7 +117,7 @@ private static void readDemandQuantities(VehicleRoutingProblem.Builder vrpBuilde
                 .setLocation(Location.Builder.newInstance().setIndex(Integer.parseInt(lineTokens[0])).build())
                 .build();
             /*
-			 * and add it to problem
+             * and add it to problem
 			 */
             vrpBuilder.addJob(service);
         }
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/ServicePickupsWithMultipleDepotsExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/ServicePickupsWithMultipleDepotsExample.java
index ff13ffee8..4eed4c14c 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/ServicePickupsWithMultipleDepotsExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/ServicePickupsWithMultipleDepotsExample.java
@@ -120,7 +120,7 @@ public static void main(String[] args) {
         new VrpXMLWriter(problem, solutions).write("output/shipment-problem-with-solution.xml");
 
 		/*
-		 * print nRoutes and totalCosts of bestSolution
+         * print nRoutes and totalCosts of bestSolution
 		 */
         SolutionPrinter.print(bestSolution);
 
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryExample.java
index 525efde6b..6a10a7cc7 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryExample.java
@@ -17,9 +17,6 @@
  */
 package com.graphhopper.jsprit.examples;
 
-import java.util.Arrays;
-import java.util.Collection;
-
 import com.graphhopper.jsprit.analysis.toolbox.GraphStreamViewer;
 import com.graphhopper.jsprit.analysis.toolbox.Plotter;
 import com.graphhopper.jsprit.core.algorithm.VehicleRoutingAlgorithm;
@@ -39,6 +36,9 @@
 import com.graphhopper.jsprit.io.problem.VrpXMLWriter;
 import com.graphhopper.jsprit.util.Examples;
 
+import java.util.Arrays;
+import java.util.Collection;
+
 
 public class SimpleEnRoutePickupAndDeliveryExample {
 
@@ -68,14 +68,14 @@ public static void main(String[] args) {
          */
 
         Shipment shipment1 = Shipment.Builder.newInstance("1").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(5, 7)))
-                .setDeliveryLocation(loc(Coordinate.newInstance(6, 9))).build();
+            .setDeliveryLocation(loc(Coordinate.newInstance(6, 9))).build();
         Shipment shipment2 = Shipment.Builder.newInstance("2").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(5, 13)))
-                .setDeliveryLocation(loc(Coordinate.newInstance(6, 11))).build();
+            .setDeliveryLocation(loc(Coordinate.newInstance(6, 11))).build();
 
         Shipment shipment3 = Shipment.Builder.newInstance("3").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(15, 7)))
-                .setDeliveryLocation(loc(Coordinate.newInstance(14, 9))).build();
+            .setDeliveryLocation(loc(Coordinate.newInstance(14, 9))).build();
         Shipment shipment4 = Shipment.Builder.newInstance("4").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(15, 13)))
-                .setDeliveryLocation(loc(Coordinate.newInstance(14, 11))).build();
+            .setDeliveryLocation(loc(Coordinate.newInstance(14, 11))).build();
 
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryOpenRoutesExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryOpenRoutesExample.java
index b48b7177a..e0781a2b0 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryOpenRoutesExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryOpenRoutesExample.java
@@ -104,7 +104,7 @@ public static void main(String[] args) {
         new VrpXMLWriter(problem, solutions).write("output/shipment-problem-with-solution.xml");
 
 		/*
-		 * print nRoutes and totalCosts of bestSolution
+         * print nRoutes and totalCosts of bestSolution
 		 */
         SolutionPrinter.print(problem, bestSolution, SolutionPrinter.Print.VERBOSE);
 
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryWithDepotBoundedDeliveriesExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryWithDepotBoundedDeliveriesExample.java
index 8a678364b..1fe20e3f4 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryWithDepotBoundedDeliveriesExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryWithDepotBoundedDeliveriesExample.java
@@ -17,8 +17,6 @@
  */
 package com.graphhopper.jsprit.examples;
 
-import java.util.Collection;
-
 import com.graphhopper.jsprit.analysis.toolbox.Plotter;
 import com.graphhopper.jsprit.core.algorithm.VehicleRoutingAlgorithm;
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
@@ -41,6 +39,8 @@
 import com.graphhopper.jsprit.io.problem.VrpXMLWriter;
 import com.graphhopper.jsprit.util.Examples;
 
+import java.util.Collection;
+
 
 public class SimpleEnRoutePickupAndDeliveryWithDepotBoundedDeliveriesExample {
 
@@ -70,14 +70,14 @@ public static void main(String[] args) {
          */
 
         Shipment shipment1 = Shipment.Builder.newInstance("1").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(5, 7)))
-                .setDeliveryLocation(loc(Coordinate.newInstance(6, 9))).build();
+            .setDeliveryLocation(loc(Coordinate.newInstance(6, 9))).build();
         Shipment shipment2 = Shipment.Builder.newInstance("2").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(5, 13)))
-                .setDeliveryLocation(loc(Coordinate.newInstance(6, 11))).build();
+            .setDeliveryLocation(loc(Coordinate.newInstance(6, 11))).build();
 
         Shipment shipment3 = Shipment.Builder.newInstance("3").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(15, 7)))
-                .setDeliveryLocation(loc(Coordinate.newInstance(14, 9))).build();
+            .setDeliveryLocation(loc(Coordinate.newInstance(14, 9))).build();
         Shipment shipment4 = Shipment.Builder.newInstance("4").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(15, 13)))
-                .setDeliveryLocation(loc(Coordinate.newInstance(14, 11))).build();
+            .setDeliveryLocation(loc(Coordinate.newInstance(14, 11))).build();
 //
         /*
          * build deliveries, (implicitly picked up in the depot) 1: (4,8) 2: (4,12) 3: (16,8) 4: (16,12)
@@ -90,7 +90,7 @@ public static void main(String[] args) {
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addVehicle(vehicle);
         vrpBuilder.addJob(shipment1).addJob(shipment2).addJob(shipment3).addJob(shipment4)
-                .addJob(delivery1).addJob(delivery2).addJob(delivery3).addJob(delivery4).build();
+            .addJob(delivery1).addJob(delivery2).addJob(delivery3).addJob(delivery4).build();
 
         VehicleRoutingProblem problem = vrpBuilder.build();
 
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExample.java
index e95ec96c9..52d91f51a 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExample.java
@@ -22,7 +22,6 @@
 import com.graphhopper.jsprit.analysis.toolbox.Plotter;
 import com.graphhopper.jsprit.core.algorithm.VehicleRoutingAlgorithm;
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
-import com.graphhopper.jsprit.core.algorithm.box.SchrimpfFactory;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Service;
@@ -107,7 +106,7 @@ public static void main(String[] args) {
 		/*
          * plot
 		 */
-        new Plotter(problem,bestSolution).plot("output/plot.png","simple example");
+        new Plotter(problem, bestSolution).plot("output/plot.png", "simple example");
 
         /*
         render problem and solution with GraphStream
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExampleWithSkills.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExampleWithSkills.java
index c1006b387..6dbda8f6f 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExampleWithSkills.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExampleWithSkills.java
@@ -21,10 +21,8 @@
 import com.graphhopper.jsprit.analysis.toolbox.GraphStreamViewer.Label;
 import com.graphhopper.jsprit.core.algorithm.VehicleRoutingAlgorithm;
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
-import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
 import com.graphhopper.jsprit.core.problem.job.Service;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleVRPWithBackhaulsExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleVRPWithBackhaulsExample.java
index b97dfc9bc..062ea2046 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleVRPWithBackhaulsExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleVRPWithBackhaulsExample.java
@@ -35,7 +35,6 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.reporting.SolutionPrinter;
 import com.graphhopper.jsprit.core.util.Solutions;
-
 import com.graphhopper.jsprit.io.problem.VrpXMLWriter;
 import com.graphhopper.jsprit.util.Examples;
 
@@ -86,7 +85,7 @@ public static void main(String[] args) {
         ConstraintManager constraintManager = new ConstraintManager(problem, stateManager);
         constraintManager.addConstraint(new ServiceDeliveriesFirstConstraint(), ConstraintManager.Priority.CRITICAL);
 
-        VehicleRoutingAlgorithm algorithm = Jsprit.Builder.newInstance(problem).setStateAndConstraintManager(stateManager,constraintManager)
+        VehicleRoutingAlgorithm algorithm = Jsprit.Builder.newInstance(problem).setStateAndConstraintManager(stateManager, constraintManager)
             .buildAlgorithm();
 
 		/*
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SolomonExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SolomonExample.java
index 9493eb0d0..78277f723 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SolomonExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SolomonExample.java
@@ -86,7 +86,7 @@ public static void main(String[] args) {
         SolutionPrinter.print(vrp, solution, SolutionPrinter.Print.VERBOSE);
 
 		/*
-		 * Plot solution.
+         * Plot solution.
 		 */
         Plotter plotter = new Plotter(vrp, solution);
 //		plotter.setBoundingBox(30, 0, 50, 20);
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SolomonExampleWithSpecifiedVehicleEndLocations.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SolomonExampleWithSpecifiedVehicleEndLocations.java
index 8548783eb..3221935d9 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SolomonExampleWithSpecifiedVehicleEndLocations.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SolomonExampleWithSpecifiedVehicleEndLocations.java
@@ -90,7 +90,7 @@ public static void main(String[] args) {
         VehicleRoutingProblemSolution solution = new SelectBest().selectSolution(solutions);
 
 		/*
-		 * print solution
+         * print solution
 		 */
         SolutionPrinter.print(solution);
 
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SolomonExampleWithSpecifiedVehicleEndLocationsWithoutTWs.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SolomonExampleWithSpecifiedVehicleEndLocationsWithoutTWs.java
index cedf88186..ac83e50e8 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SolomonExampleWithSpecifiedVehicleEndLocationsWithoutTWs.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SolomonExampleWithSpecifiedVehicleEndLocationsWithoutTWs.java
@@ -90,7 +90,7 @@ public static void main(String[] args) {
         VehicleRoutingProblemSolution solution = new SelectBest().selectSolution(solutions);
 
 		/*
-		 * print solution
+         * print solution
 		 */
         SolutionPrinter.print(solution);
 
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SolomonOpenExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SolomonOpenExample.java
index 64fb61628..61c914c9e 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SolomonOpenExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SolomonOpenExample.java
@@ -70,7 +70,7 @@ public static void main(String[] args) {
 //		VehicleRoutingAlgorithm vra = new SchrimpfFactory().createAlgorithm(vrp);
 //		VehicleRoutingAlgorithm vra = VehicleRoutingAlgorithms.readAndCreateAlgorithm(vrp, "input/algorithmConfig_fix.xml");
         VehicleRoutingAlgorithm vra = Jsprit.Builder.newInstance(vrp).setProperty(Jsprit.Parameter.THREADS, "4")
-        .setProperty(Jsprit.Parameter.FAST_REGRET, "true")
+            .setProperty(Jsprit.Parameter.FAST_REGRET, "true")
             .setProperty(Jsprit.Parameter.CONSTRUCTION, Jsprit.Construction.BEST_INSERTION.toString()).buildAlgorithm();
 //		vra.setPrematureBreak(100);
 //		vra.getAlgorithmListeners().addListener(new AlgorithmSearchProgressChartListener("output/sol_progress.png"));
@@ -89,7 +89,7 @@ public static void main(String[] args) {
         VehicleRoutingProblemSolution solution = new SelectBest().selectSolution(solutions);
 
 		/*
-		 * print solution
+         * print solution
 		 */
         SolutionPrinter.print(solution);
 
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SolomonR101Example.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SolomonR101Example.java
index 22740a740..eccd3d80e 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SolomonR101Example.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SolomonR101Example.java
@@ -77,7 +77,7 @@ public static void main(String[] args) {
         Collection<VehicleRoutingProblemSolution> solutions = vra.searchSolutions();
 
 		/*
-		 * Retrieve best solution.
+         * Retrieve best solution.
 		 */
         VehicleRoutingProblemSolution solution = new SelectBest().selectSolution(solutions);
 
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/TransportOfDisabledPeople.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/TransportOfDisabledPeople.java
index b02f9beb9..9b2423f61 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/TransportOfDisabledPeople.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/TransportOfDisabledPeople.java
@@ -170,7 +170,7 @@ public boolean fulfilled(JobInsertionContext insertionContext) {
         constraintManager.addConstraint(wheelchair_bus_passenger_pickup_constraint);
 
 
-        VehicleRoutingAlgorithm algorithm = Jsprit.Builder.newInstance(problem).setStateAndConstraintManager(stateManager,constraintManager).buildAlgorithm();
+        VehicleRoutingAlgorithm algorithm = Jsprit.Builder.newInstance(problem).setStateAndConstraintManager(stateManager, constraintManager).buildAlgorithm();
         algorithm.setPrematureAlgorithmTermination(new IterationWithoutImprovementTermination(100));
 
 		/*
@@ -184,7 +184,7 @@ public boolean fulfilled(JobInsertionContext insertionContext) {
         VehicleRoutingProblemSolution bestSolution = Solutions.bestOf(solutions);
 
 		/*
-		 * write out problem and solution to xml-file
+         * write out problem and solution to xml-file
 		 */
 //		new VrpXMLWriter(problem, solutions).write("output/shipment-problem-with-solution.xml");
 
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/VRPWithBackhaulsExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/VRPWithBackhaulsExample.java
index a55452887..9e0b16713 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/VRPWithBackhaulsExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/VRPWithBackhaulsExample.java
@@ -73,7 +73,7 @@ public static void main(String[] args) {
         ConstraintManager constraintManager = new ConstraintManager(vrp, stateManager);
         constraintManager.addConstraint(new ServiceDeliveriesFirstConstraint(), ConstraintManager.Priority.CRITICAL);
 
-        VehicleRoutingAlgorithm vra = Jsprit.Builder.newInstance(vrp).setStateAndConstraintManager(stateManager,constraintManager).buildAlgorithm();
+        VehicleRoutingAlgorithm vra = Jsprit.Builder.newInstance(vrp).setStateAndConstraintManager(stateManager, constraintManager).buildAlgorithm();
         vra.getAlgorithmListeners().addListener(new AlgorithmSearchProgressChartListener("output/sol_progress.png"));
         /*
          * Solve the problem.
@@ -88,7 +88,7 @@ public static void main(String[] args) {
         VehicleRoutingProblemSolution solution = new SelectBest().selectSolution(solutions);
 
 		/*
-		 * print solution
+         * print solution
 		 */
         SolutionPrinter.print(vrp, solution, SolutionPrinter.Print.VERBOSE);
 
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/VRPWithBackhaulsExample2.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/VRPWithBackhaulsExample2.java
index 6662ae1e9..29c619368 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/VRPWithBackhaulsExample2.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/VRPWithBackhaulsExample2.java
@@ -17,8 +17,6 @@
  */
 package com.graphhopper.jsprit.examples;
 
-import java.util.Collection;
-
 import com.graphhopper.jsprit.analysis.toolbox.AlgorithmSearchProgressChartListener;
 import com.graphhopper.jsprit.analysis.toolbox.Plotter;
 import com.graphhopper.jsprit.core.algorithm.VehicleRoutingAlgorithm;
@@ -39,6 +37,8 @@
 import com.graphhopper.jsprit.io.problem.VrpXMLReader;
 import com.graphhopper.jsprit.util.Examples;
 
+import java.util.Collection;
+
 
 public class VRPWithBackhaulsExample2 {
 
@@ -92,9 +92,9 @@ public static void main(String[] args) {
 
 
         VehicleRoutingAlgorithm vra = Jsprit.Builder.newInstance(vrp)
-                .setStateAndConstraintManager(stateManager, constraintManager)
-                .setProperty(Jsprit.Parameter.FIXED_COST_PARAM.toString(), "0.")
-                .buildAlgorithm();
+            .setStateAndConstraintManager(stateManager, constraintManager)
+            .setProperty(Jsprit.Parameter.FIXED_COST_PARAM.toString(), "0.")
+            .buildAlgorithm();
         vra.setMaxIterations(2000);
         vra.addListener(new AlgorithmSearchProgressChartListener("output/search"));
 
@@ -155,7 +155,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
 
             System.out.println("dist@" + route.getStart().getLocation().getId() + ": " + analyser.getDistanceAtActivity(route.getStart(), route));
             System.out.println("timeWindowViolation@" + route.getStart().getLocation().getId() + ": "
-                    + analyser.getTimeWindowViolationAtActivity(route.getStart(), route));
+                + analyser.getTimeWindowViolationAtActivity(route.getStart(), route));
             for (TourActivity act : route.getActivities()) {
                 System.out.println("--");
                 System.out.println("actType: " + act.getName() + " demand: " + act.getSize());
@@ -170,7 +170,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
             System.out.println("--");
             System.out.println("dist@" + route.getEnd().getLocation().getId() + ": " + analyser.getDistanceAtActivity(route.getEnd(), route));
             System.out.println(
-                    "timeWindowViolation@" + route.getEnd().getLocation().getId() + ": " + analyser.getTimeWindowViolationAtActivity(route.getEnd(), route));
+                "timeWindowViolation@" + route.getEnd().getLocation().getId() + ": " + analyser.getTimeWindowViolationAtActivity(route.getEnd(), route));
         }
 
         System.out.println("-----");
diff --git a/jsprit-instances/pom.xml b/jsprit-instances/pom.xml
index 5f7aace37..420b5ce55 100644
--- a/jsprit-instances/pom.xml
+++ b/jsprit-instances/pom.xml
@@ -16,7 +16,8 @@
   ~ limitations under the License.
   -->
 
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
     <parent>
         <groupId>com.graphhopper</groupId>
         <artifactId>jsprit</artifactId>
diff --git a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/BelhaizaReader.java b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/BelhaizaReader.java
index 34dc884a3..c26b57bea 100644
--- a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/BelhaizaReader.java
+++ b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/BelhaizaReader.java
@@ -36,11 +36,10 @@
 
 /**
  * Reader that reads the well-known solomon-instances.
- *
+ * <p>
  * <p>See: <a href="http://neo.lcc.uma.es/vrp/vrp-instances/capacitated-vrp-with-time-windows-instances/">neo.org</a>
  *
  * @author stefan
- *
  */
 
 public class BelhaizaReader {
@@ -48,132 +47,131 @@
     private int fixedCosts;
 
     /**
-	 * @param costProjectionFactor the costProjectionFactor to set
-	 */
-	public void setVariableCostProjectionFactor(double costProjectionFactor) {
-		this.variableCostProjectionFactor = costProjectionFactor;
-	}
-
-	private static Logger logger = LoggerFactory.getLogger(BelhaizaReader.class);
-
-	private final VehicleRoutingProblem.Builder vrpBuilder;
-
-	private double coordProjectionFactor = 1;
-
-	private double timeProjectionFactor = 1;
-
-	private double variableCostProjectionFactor = 1;
-
-	private double fixedCostPerVehicle = 0.0;
-
-	public BelhaizaReader(VehicleRoutingProblem.Builder vrpBuilder) {
-		super();
-		this.vrpBuilder = vrpBuilder;
-	}
-
-	public BelhaizaReader(VehicleRoutingProblem.Builder vrpBuilder, double fixedCostPerVehicle) {
-		super();
-		this.vrpBuilder = vrpBuilder;
-		this.fixedCostPerVehicle=fixedCostPerVehicle;
-	}
-
-	public void read(String solomonFile){
-		vrpBuilder.setFleetSize(FleetSize.INFINITE);
-		BufferedReader reader = getReader(solomonFile);
-		int vehicleCapacity = 0;
-		int counter = 0;
-		String line;
-		while((line = readLine(reader)) != null){
-			String[] tokens = line.replace("\r", "").trim().split("\\s+");
-			counter++;
-			if(counter == 2){
-				vehicleCapacity = Integer.parseInt(tokens[1]);
-				continue;
-			}
-			if(counter > 2){
-				if(tokens.length < 7) continue;
-                Coordinate coord = makeCoord(tokens[1],tokens[2]);
-				String customerId = tokens[0];
-				int demand = Integer.parseInt(tokens[4]);
-				double serviceTime = Double.parseDouble(tokens[3])*timeProjectionFactor;
-				if(counter == 3){
-					VehicleTypeImpl.Builder typeBuilder = VehicleTypeImpl.Builder.newInstance("solomonType").addCapacityDimension(0, vehicleCapacity);
-					typeBuilder.setCostPerDistance(1.0*variableCostProjectionFactor).setFixedCost(fixedCostPerVehicle)
-                    .setCostPerWaitingTime(0.8);
+     * @param costProjectionFactor the costProjectionFactor to set
+     */
+    public void setVariableCostProjectionFactor(double costProjectionFactor) {
+        this.variableCostProjectionFactor = costProjectionFactor;
+    }
+
+    private static Logger logger = LoggerFactory.getLogger(BelhaizaReader.class);
+
+    private final VehicleRoutingProblem.Builder vrpBuilder;
+
+    private double coordProjectionFactor = 1;
+
+    private double timeProjectionFactor = 1;
+
+    private double variableCostProjectionFactor = 1;
+
+    private double fixedCostPerVehicle = 0.0;
+
+    public BelhaizaReader(VehicleRoutingProblem.Builder vrpBuilder) {
+        super();
+        this.vrpBuilder = vrpBuilder;
+    }
+
+    public BelhaizaReader(VehicleRoutingProblem.Builder vrpBuilder, double fixedCostPerVehicle) {
+        super();
+        this.vrpBuilder = vrpBuilder;
+        this.fixedCostPerVehicle = fixedCostPerVehicle;
+    }
+
+    public void read(String solomonFile) {
+        vrpBuilder.setFleetSize(FleetSize.INFINITE);
+        BufferedReader reader = getReader(solomonFile);
+        int vehicleCapacity = 0;
+        int counter = 0;
+        String line;
+        while ((line = readLine(reader)) != null) {
+            String[] tokens = line.replace("\r", "").trim().split("\\s+");
+            counter++;
+            if (counter == 2) {
+                vehicleCapacity = Integer.parseInt(tokens[1]);
+                continue;
+            }
+            if (counter > 2) {
+                if (tokens.length < 7) continue;
+                Coordinate coord = makeCoord(tokens[1], tokens[2]);
+                String customerId = tokens[0];
+                int demand = Integer.parseInt(tokens[4]);
+                double serviceTime = Double.parseDouble(tokens[3]) * timeProjectionFactor;
+                if (counter == 3) {
+                    VehicleTypeImpl.Builder typeBuilder = VehicleTypeImpl.Builder.newInstance("solomonType").addCapacityDimension(0, vehicleCapacity);
+                    typeBuilder.setCostPerDistance(1.0 * variableCostProjectionFactor).setFixedCost(fixedCostPerVehicle)
+                        .setCostPerWaitingTime(0.8);
                     System.out.println("fix: " + fixedCostPerVehicle + "; perDistance: 1.0; perWaitingTime: 0.8");
                     VehicleTypeImpl vehicleType = typeBuilder.build();
-					double end = Double.parseDouble(tokens[8])*timeProjectionFactor;
-					for(int i=0;i<10;i++) {
-						VehicleImpl vehicle = VehicleImpl.Builder.newInstance("solomonVehicle"+(i+1)).setEarliestStart(0.).setLatestArrival(end)
-								.setStartLocation(Location.Builder.newInstance().setId(customerId)
-										.setCoordinate(coord).build()).setType(vehicleType).build();
-						vrpBuilder.addVehicle(vehicle);
-					}
-
-				}
-				else{
-					Service.Builder serviceBuilder = new Service.Builder(customerId);
-					serviceBuilder.addSizeDimension(0, demand).setLocation(Location.Builder.newInstance().setCoordinate(coord).setId(customerId).build()).setServiceTime(serviceTime);
-					int noTimeWindows = Integer.parseInt(tokens[7]);
-					for(int i=0;i<noTimeWindows*2;i=i+2){
-						double earliest = Double.parseDouble(tokens[8+i]);
-						double latest = Double.parseDouble(tokens[8+i+1]);
-						serviceBuilder.addTimeWindow(earliest,latest);
-					}
-					vrpBuilder.addJob(serviceBuilder.build());
-				}
-			}
-		}
-		close(reader);
-	}
-
-	public void setCoordProjectionFactor(double coordProjectionFactor) {
-		this.coordProjectionFactor = coordProjectionFactor;
-	}
-
-	private void close(BufferedReader reader)  {
-		try {
-			reader.close();
-		} catch (IOException e) {
-			e.printStackTrace();
-			logger.error(e.toString());
-			System.exit(1);
-		}
-	}
-
-	private String readLine(BufferedReader reader) {
-		try {
-			return reader.readLine();
-		} catch (IOException e) {
-			e.printStackTrace();
-			logger.error(e.toString());
-			System.exit(1);
-			return null;
-		}
-	}
-
-	private Coordinate makeCoord(String xString, String yString) {
-		double x = Double.parseDouble(xString);
-		double y = Double.parseDouble(yString);
-		return new Coordinate(x*coordProjectionFactor,y*coordProjectionFactor);
-	}
-
-	private BufferedReader getReader(String solomonFile) {
-		BufferedReader reader = null;
-		try {
-			reader = new BufferedReader(new FileReader(solomonFile));
-		} catch (FileNotFoundException e1) {
-			e1.printStackTrace();
-			logger.error(e1.toString());
-			System.exit(1);
-		}
-		return reader;
-	}
-
-	public void setTimeProjectionFactor(double timeProjection) {
-		this.timeProjectionFactor=timeProjection;
-
-	}
+                    double end = Double.parseDouble(tokens[8]) * timeProjectionFactor;
+                    for (int i = 0; i < 10; i++) {
+                        VehicleImpl vehicle = VehicleImpl.Builder.newInstance("solomonVehicle" + (i + 1)).setEarliestStart(0.).setLatestArrival(end)
+                            .setStartLocation(Location.Builder.newInstance().setId(customerId)
+                                .setCoordinate(coord).build()).setType(vehicleType).build();
+                        vrpBuilder.addVehicle(vehicle);
+                    }
+
+                } else {
+                    Service.Builder serviceBuilder = new Service.Builder(customerId);
+                    serviceBuilder.addSizeDimension(0, demand).setLocation(Location.Builder.newInstance().setCoordinate(coord).setId(customerId).build()).setServiceTime(serviceTime);
+                    int noTimeWindows = Integer.parseInt(tokens[7]);
+                    for (int i = 0; i < noTimeWindows * 2; i = i + 2) {
+                        double earliest = Double.parseDouble(tokens[8 + i]);
+                        double latest = Double.parseDouble(tokens[8 + i + 1]);
+                        serviceBuilder.addTimeWindow(earliest, latest);
+                    }
+                    vrpBuilder.addJob(serviceBuilder.build());
+                }
+            }
+        }
+        close(reader);
+    }
+
+    public void setCoordProjectionFactor(double coordProjectionFactor) {
+        this.coordProjectionFactor = coordProjectionFactor;
+    }
+
+    private void close(BufferedReader reader) {
+        try {
+            reader.close();
+        } catch (IOException e) {
+            e.printStackTrace();
+            logger.error(e.toString());
+            System.exit(1);
+        }
+    }
+
+    private String readLine(BufferedReader reader) {
+        try {
+            return reader.readLine();
+        } catch (IOException e) {
+            e.printStackTrace();
+            logger.error(e.toString());
+            System.exit(1);
+            return null;
+        }
+    }
+
+    private Coordinate makeCoord(String xString, String yString) {
+        double x = Double.parseDouble(xString);
+        double y = Double.parseDouble(yString);
+        return new Coordinate(x * coordProjectionFactor, y * coordProjectionFactor);
+    }
+
+    private BufferedReader getReader(String solomonFile) {
+        BufferedReader reader = null;
+        try {
+            reader = new BufferedReader(new FileReader(solomonFile));
+        } catch (FileNotFoundException e1) {
+            e1.printStackTrace();
+            logger.error(e1.toString());
+            System.exit(1);
+        }
+        return reader;
+    }
+
+    public void setTimeProjectionFactor(double timeProjection) {
+        this.timeProjectionFactor = timeProjection;
+
+    }
 
     public void setFixedCosts(int fixedCosts) {
         this.fixedCostPerVehicle = fixedCosts;
diff --git a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/Figliozzi.java b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/Figliozzi.java
index 2adce86e2..9c347f218 100644
--- a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/Figliozzi.java
+++ b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/Figliozzi.java
@@ -17,11 +17,6 @@
  */
 package com.graphhopper.jsprit.instance.reader;
 
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.List;
-
 import com.graphhopper.jsprit.core.distance.EuclideanDistanceCalculator;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
@@ -29,6 +24,11 @@
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.util.Locations;
 
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
+
 
 public class Figliozzi {
 
@@ -50,59 +50,59 @@ public static TDCosts createCosts(Locations locations, SpeedDistribution speedDi
         static List<Double> createSpeedValues(SpeedDistribution speedDistribution) {
             List<Double> speedValues = Collections.emptyList();
             switch (speedDistribution) {
-            case TD1a:
-                speedValues = Arrays.asList(1., 1.6, 1.05, 1.6, 1.);
-                break;
-            case TD2a:
-                speedValues = Arrays.asList(1., 2., 1.5, 2., 1.);
-                break;
-            case TD3a:
-                speedValues = Arrays.asList(1., 2.5, 1.75, 2.5, 1.);
-                break;
-
-            case TD1b:
-                speedValues = Arrays.asList(1.6, 1., 1.05, 1., 1.6);
-                break;
-            case TD2b:
-                speedValues = Arrays.asList(2., 1., 1.5, 1., 2.);
-                break;
-            case TD3b:
-                speedValues = Arrays.asList(2.5, 1., 1.75, 1., 2.5);
-                break;
-
-            case TD1c:
-                speedValues = Arrays.asList(1.6, 1.6, 1.05, 1., 1.);
-                break;
-            case TD2c:
-                speedValues = Arrays.asList(2., 2., 1.5, 1., 1.);
-                break;
-            case TD3c:
-                speedValues = Arrays.asList(2.5, 2.5, 1.75, 1., 1.);
-                break;
-
-            case TD1d:
-                speedValues = Arrays.asList(1., 1., 1.05, 1.6, 1.6);
-                break;
-            case TD2d:
-                speedValues = Arrays.asList(1., 1., 1.5, 2., 2.);
-                break;
-            case TD3d:
-                speedValues = Arrays.asList(1., 1., 1.75, 2.5, 2.5);
-                break;
-
-            case TD4:
-                speedValues = Arrays.asList(1.1, 0.85, 1.1, 0.85, 1.1);
-                break;
-            case TD5:
-                speedValues = Arrays.asList(1.2, 0.8, 1., 0.8, 1.2);
-                break;
-            case TD6:
-                speedValues = Arrays.asList(1.2, 0.7, 1.2, 0.7, 1.2);
-                break;
-
-            case CLASSIC:
-                speedValues = Arrays.asList(1., 1., 1., 1., 1.);
-                break;
+                case TD1a:
+                    speedValues = Arrays.asList(1., 1.6, 1.05, 1.6, 1.);
+                    break;
+                case TD2a:
+                    speedValues = Arrays.asList(1., 2., 1.5, 2., 1.);
+                    break;
+                case TD3a:
+                    speedValues = Arrays.asList(1., 2.5, 1.75, 2.5, 1.);
+                    break;
+
+                case TD1b:
+                    speedValues = Arrays.asList(1.6, 1., 1.05, 1., 1.6);
+                    break;
+                case TD2b:
+                    speedValues = Arrays.asList(2., 1., 1.5, 1., 2.);
+                    break;
+                case TD3b:
+                    speedValues = Arrays.asList(2.5, 1., 1.75, 1., 2.5);
+                    break;
+
+                case TD1c:
+                    speedValues = Arrays.asList(1.6, 1.6, 1.05, 1., 1.);
+                    break;
+                case TD2c:
+                    speedValues = Arrays.asList(2., 2., 1.5, 1., 1.);
+                    break;
+                case TD3c:
+                    speedValues = Arrays.asList(2.5, 2.5, 1.75, 1., 1.);
+                    break;
+
+                case TD1d:
+                    speedValues = Arrays.asList(1., 1., 1.05, 1.6, 1.6);
+                    break;
+                case TD2d:
+                    speedValues = Arrays.asList(1., 1., 1.5, 2., 2.);
+                    break;
+                case TD3d:
+                    speedValues = Arrays.asList(1., 1., 1.75, 2.5, 2.5);
+                    break;
+
+                case TD4:
+                    speedValues = Arrays.asList(1.1, 0.85, 1.1, 0.85, 1.1);
+                    break;
+                case TD5:
+                    speedValues = Arrays.asList(1.2, 0.8, 1., 0.8, 1.2);
+                    break;
+                case TD6:
+                    speedValues = Arrays.asList(1.2, 0.7, 1.2, 0.7, 1.2);
+                    break;
+
+                case CLASSIC:
+                    speedValues = Arrays.asList(1., 1., 1., 1., 1.);
+                    break;
             }
             return speedValues;
         }
@@ -150,15 +150,15 @@ public void setTransportTimeParameter(double transportTimeParameter) {
         @Override
         public double getTransportCost(Location from, Location to, double departureTime, Driver driver, Vehicle vehicle) {
             return transportDistanceParameter
-                    * EuclideanDistanceCalculator.getInstance().calculateDistance(locations.getCoord(from.getId()), locations.getCoord(to.getId())) +
-                    transportTimeParameter * getTransportTime(from, to, departureTime, driver, vehicle);
+                * EuclideanDistanceCalculator.getInstance().calculateDistance(locations.getCoord(from.getId()), locations.getCoord(to.getId())) +
+                transportTimeParameter * getTransportTime(from, to, departureTime, driver, vehicle);
         }
 
         @Override
         public double getBackwardTransportCost(Location from, Location to, double arrivalTime, Driver driver, Vehicle vehicle) {
             return transportDistanceParameter
-                    * EuclideanDistanceCalculator.getInstance().calculateDistance(locations.getCoord(from.getId()), locations.getCoord(to.getId())) +
-                    transportTimeParameter * getBackwardTransportTime(from, to, arrivalTime, driver, vehicle);
+                * EuclideanDistanceCalculator.getInstance().calculateDistance(locations.getCoord(from.getId()), locations.getCoord(to.getId())) +
+                transportTimeParameter * getBackwardTransportTime(from, to, arrivalTime, driver, vehicle);
         }
 
 
@@ -169,7 +169,7 @@ public double getTransportTime(Location from, Location to, double departureTime,
             }
             double totalTravelTime = 0.0;
             double distanceToTravel = EuclideanDistanceCalculator.getInstance().calculateDistance(locations.getCoord(from.getId()),
-                    locations.getCoord(to.getId()));
+                locations.getCoord(to.getId()));
             double currentTime = departureTime;
             for (int i = 0; i < timeBins.size(); i++) {
                 double timeThreshold = timeBins.get(i);
@@ -196,7 +196,7 @@ public double getBackwardTransportTime(Location from, Location to, double arriva
             }
             double totalTravelTime = 0.0;
             double distanceToTravel = EuclideanDistanceCalculator.getInstance().calculateDistance(locations.getCoord(from.getId()),
-                    locations.getCoord(to.getId()));
+                locations.getCoord(to.getId()));
             double currentTime = arrivalTime;
             for (int i = timeBins.size() - 1; i >= 0; i--) {
                 double nextLowerTimeThreshold;
diff --git a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/VrphGoldenReader.java b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/VrphGoldenReader.java
index 1fab0a941..f9f4bc50e 100644
--- a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/VrphGoldenReader.java
+++ b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/VrphGoldenReader.java
@@ -163,5 +163,4 @@ private BufferedReader getReader(String filename) {
     }
 
 
-
 }
diff --git a/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/BelhaizaReaderTest.java b/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/BelhaizaReaderTest.java
index c132fca4e..31da06518 100644
--- a/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/BelhaizaReaderTest.java
+++ b/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/BelhaizaReaderTest.java
@@ -38,157 +38,157 @@
 
 public class BelhaizaReaderTest {
 
-	@Test
-	public void whenReadingBelhaizaInstance_nuOfCustomersIsCorrect(){
-		VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
-		new BelhaizaReader(builder).read(getPath());
-		VehicleRoutingProblem vrp = builder.build();
-		assertEquals(100,vrp.getJobs().values().size());
-	}
-
-	private String getPath() {
-		URL resource = getClass().getClassLoader().getResource("cm101.txt");
-		if(resource == null) throw new IllegalStateException("file C101_solomon.txt does not exist");
-		return resource.getPath();
-	}
-
-	@Test
-	public void whenReadingBelhaizaInstance_fleetSizeIsInfinite(){
-		VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
-		new BelhaizaReader(builder).read(getPath());
-		VehicleRoutingProblem vrp = builder.build();
-		assertEquals(FleetSize.INFINITE,vrp.getFleetSize());
-	}
-
-	@Test
-	public void whenReadingBelhaizaInstance_vehicleCapacitiesAreCorrect(){
-		VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
-		new BelhaizaReader(builder).read(getPath());
-		VehicleRoutingProblem vrp = builder.build();
-		for(Vehicle v : vrp.getVehicles()){
-			assertEquals(200,v.getType().getCapacityDimensions().get(0));
-		}
-	}
-
-	@Test
-	public void whenReadingBelhaizaInstance_vehicleLocationsAreCorrect_and_correspondToDepotLocation(){
-		VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
-		new BelhaizaReader(builder).read(getPath());
-		VehicleRoutingProblem vrp = builder.build();
-		for(Vehicle v : vrp.getVehicles()){
-			assertEquals(40.0,v.getStartLocation().getCoordinate().getX(),0.01);
-			assertEquals(50.0,v.getStartLocation().getCoordinate().getY(),0.01);
-		}
-	}
-
-	@Test
-	public void whenReadingBelhaizaInstance_demandOfCustomerOneIsCorrect(){
-		VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
-		new BelhaizaReader(builder).read(getPath());
-		VehicleRoutingProblem vrp = builder.build();
-		assertEquals(10,vrp.getJobs().get("1").getSize().get(0));
-	}
-
-	@Test
-	public void whenReadingBelhaizaInstance_serviceDurationOfCustomerTwoIsCorrect(){
-		VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
-		new BelhaizaReader(builder).read(getPath());
-		VehicleRoutingProblem vrp = builder.build();
-		assertEquals(90,((Service)vrp.getJobs().get("2")).getServiceDuration(),0.1);
-	}
-
-	@Test
-	public void noTimeWindowsShouldBeCorrect(){
-		VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
-		new BelhaizaReader(builder).read(getPath());
-		VehicleRoutingProblem vrp = builder.build();
-		assertEquals(5,((Service)vrp.getJobs().get("1")).getTimeWindows().size());
-	}
-
-	@Test
-	public void noTimeWindowsShouldBeCorrect2(){
-		VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
-		new BelhaizaReader(builder).read(getPath());
-		VehicleRoutingProblem vrp = builder.build();
-		assertEquals(10,((Service)vrp.getJobs().get("2")).getTimeWindows().size());
-	}
-
-	@Test
-	public void firstTimeWindowShouldBeCorrect(){
-		VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
-		new BelhaizaReader(builder).read(getPath());
-		VehicleRoutingProblem vrp = builder.build();
-		assertEquals(20.,vrp.getJobs().get("1").getTimeWindows().iterator().next().getStart(),0.1);
-		assertEquals(31.,vrp.getJobs().get("1").getTimeWindows().iterator().next().getEnd(),0.1);
-	}
-
-	@Test
-	public void secondTimeWindowShouldBeCorrect(){
-		VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
-		new BelhaizaReader(builder).read(getPath());
-		VehicleRoutingProblem vrp = builder.build();
-		List<TimeWindow> timeWindows = new ArrayList<TimeWindow>(((Service)vrp.getJobs().get("1")).getTimeWindows());
-		assertEquals(118.,timeWindows.get(1).getStart(),0.1);
-		assertEquals(148.,timeWindows.get(1).getEnd(),0.1);
-	}
-
-	@Test
-	public void thirdTimeWindowShouldBeCorrect(){
-		VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
-		new BelhaizaReader(builder).read(getPath());
-		VehicleRoutingProblem vrp = builder.build();
-		List<TimeWindow> timeWindows = new ArrayList<TimeWindow>(((Service)vrp.getJobs().get("1")).getTimeWindows());
-		assertEquals(235.,timeWindows.get(2).getStart(),0.1);
-		assertEquals(258.,timeWindows.get(2).getEnd(),0.1);
-	}
-
-	@Test
-	public void fourthTimeWindowShouldBeCorrect(){
-		VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
-		new BelhaizaReader(builder).read(getPath());
-		VehicleRoutingProblem vrp = builder.build();
-		List<TimeWindow> timeWindows = new ArrayList<TimeWindow>(((Service)vrp.getJobs().get("1")).getTimeWindows());
-		assertEquals(343.,timeWindows.get(3).getStart(),0.1);
-		assertEquals(355.,timeWindows.get(3).getEnd(),0.1);
-	}
-
-	@Test
-	public void fifthTimeWindowShouldBeCorrect(){
-		VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
-		new BelhaizaReader(builder).read(getPath());
-		VehicleRoutingProblem vrp = builder.build();
-		List<TimeWindow> timeWindows = new ArrayList<TimeWindow>(((Service)vrp.getJobs().get("1")).getTimeWindows());
-		assertEquals(441.,timeWindows.get(4).getStart(),0.1);
-		assertEquals(457.,timeWindows.get(4).getEnd(),0.1);
-	}
-
-	@Test
-	public void testAlgo(){
-		VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
-		new BelhaizaReader(builder).read(getPath());
-		builder.setFleetSize(FleetSize.FINITE);
-		VehicleRoutingProblem vrp = builder.build();
+    @Test
+    public void whenReadingBelhaizaInstance_nuOfCustomersIsCorrect() {
+        VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
+        new BelhaizaReader(builder).read(getPath());
+        VehicleRoutingProblem vrp = builder.build();
+        assertEquals(100, vrp.getJobs().values().size());
+    }
+
+    private String getPath() {
+        URL resource = getClass().getClassLoader().getResource("cm101.txt");
+        if (resource == null) throw new IllegalStateException("file C101_solomon.txt does not exist");
+        return resource.getPath();
+    }
+
+    @Test
+    public void whenReadingBelhaizaInstance_fleetSizeIsInfinite() {
+        VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
+        new BelhaizaReader(builder).read(getPath());
+        VehicleRoutingProblem vrp = builder.build();
+        assertEquals(FleetSize.INFINITE, vrp.getFleetSize());
+    }
+
+    @Test
+    public void whenReadingBelhaizaInstance_vehicleCapacitiesAreCorrect() {
+        VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
+        new BelhaizaReader(builder).read(getPath());
+        VehicleRoutingProblem vrp = builder.build();
+        for (Vehicle v : vrp.getVehicles()) {
+            assertEquals(200, v.getType().getCapacityDimensions().get(0));
+        }
+    }
+
+    @Test
+    public void whenReadingBelhaizaInstance_vehicleLocationsAreCorrect_and_correspondToDepotLocation() {
+        VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
+        new BelhaizaReader(builder).read(getPath());
+        VehicleRoutingProblem vrp = builder.build();
+        for (Vehicle v : vrp.getVehicles()) {
+            assertEquals(40.0, v.getStartLocation().getCoordinate().getX(), 0.01);
+            assertEquals(50.0, v.getStartLocation().getCoordinate().getY(), 0.01);
+        }
+    }
+
+    @Test
+    public void whenReadingBelhaizaInstance_demandOfCustomerOneIsCorrect() {
+        VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
+        new BelhaizaReader(builder).read(getPath());
+        VehicleRoutingProblem vrp = builder.build();
+        assertEquals(10, vrp.getJobs().get("1").getSize().get(0));
+    }
+
+    @Test
+    public void whenReadingBelhaizaInstance_serviceDurationOfCustomerTwoIsCorrect() {
+        VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
+        new BelhaizaReader(builder).read(getPath());
+        VehicleRoutingProblem vrp = builder.build();
+        assertEquals(90, ((Service) vrp.getJobs().get("2")).getServiceDuration(), 0.1);
+    }
+
+    @Test
+    public void noTimeWindowsShouldBeCorrect() {
+        VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
+        new BelhaizaReader(builder).read(getPath());
+        VehicleRoutingProblem vrp = builder.build();
+        assertEquals(5, ((Service) vrp.getJobs().get("1")).getTimeWindows().size());
+    }
+
+    @Test
+    public void noTimeWindowsShouldBeCorrect2() {
+        VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
+        new BelhaizaReader(builder).read(getPath());
+        VehicleRoutingProblem vrp = builder.build();
+        assertEquals(10, ((Service) vrp.getJobs().get("2")).getTimeWindows().size());
+    }
+
+    @Test
+    public void firstTimeWindowShouldBeCorrect() {
+        VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
+        new BelhaizaReader(builder).read(getPath());
+        VehicleRoutingProblem vrp = builder.build();
+        assertEquals(20., vrp.getJobs().get("1").getTimeWindows().iterator().next().getStart(), 0.1);
+        assertEquals(31., vrp.getJobs().get("1").getTimeWindows().iterator().next().getEnd(), 0.1);
+    }
+
+    @Test
+    public void secondTimeWindowShouldBeCorrect() {
+        VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
+        new BelhaizaReader(builder).read(getPath());
+        VehicleRoutingProblem vrp = builder.build();
+        List<TimeWindow> timeWindows = new ArrayList<TimeWindow>(((Service) vrp.getJobs().get("1")).getTimeWindows());
+        assertEquals(118., timeWindows.get(1).getStart(), 0.1);
+        assertEquals(148., timeWindows.get(1).getEnd(), 0.1);
+    }
+
+    @Test
+    public void thirdTimeWindowShouldBeCorrect() {
+        VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
+        new BelhaizaReader(builder).read(getPath());
+        VehicleRoutingProblem vrp = builder.build();
+        List<TimeWindow> timeWindows = new ArrayList<TimeWindow>(((Service) vrp.getJobs().get("1")).getTimeWindows());
+        assertEquals(235., timeWindows.get(2).getStart(), 0.1);
+        assertEquals(258., timeWindows.get(2).getEnd(), 0.1);
+    }
+
+    @Test
+    public void fourthTimeWindowShouldBeCorrect() {
+        VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
+        new BelhaizaReader(builder).read(getPath());
+        VehicleRoutingProblem vrp = builder.build();
+        List<TimeWindow> timeWindows = new ArrayList<TimeWindow>(((Service) vrp.getJobs().get("1")).getTimeWindows());
+        assertEquals(343., timeWindows.get(3).getStart(), 0.1);
+        assertEquals(355., timeWindows.get(3).getEnd(), 0.1);
+    }
+
+    @Test
+    public void fifthTimeWindowShouldBeCorrect() {
+        VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
+        new BelhaizaReader(builder).read(getPath());
+        VehicleRoutingProblem vrp = builder.build();
+        List<TimeWindow> timeWindows = new ArrayList<TimeWindow>(((Service) vrp.getJobs().get("1")).getTimeWindows());
+        assertEquals(441., timeWindows.get(4).getStart(), 0.1);
+        assertEquals(457., timeWindows.get(4).getEnd(), 0.1);
+    }
+
+    @Test
+    public void testAlgo() {
+        VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
+        new BelhaizaReader(builder).read(getPath());
+        builder.setFleetSize(FleetSize.FINITE);
+        VehicleRoutingProblem vrp = builder.build();
 
 //		VehicleRoutingAlgorithm vra = Jsprit.createAlgorithm(vrp);
 
 //		VehicleRoutingAlgorithm algorithm = new SchrimpfFactory().createAlgorithm(vrp);
 
-		Jsprit.Builder vraBuilder = Jsprit.Builder.newInstance(vrp);
-		vraBuilder.setProperty(Jsprit.Strategy.CLUSTER_REGRET, "0.25");
-		vraBuilder.setProperty(Jsprit.Strategy.RADIAL_REGRET, "0.25");
-		vraBuilder.setProperty(Jsprit.Strategy.RANDOM_REGRET, "0.");
-		vraBuilder.setProperty(Jsprit.Strategy.WORST_REGRET, "0.25");
-		vraBuilder.setProperty(Jsprit.Parameter.THRESHOLD_INI, "0.05");
-		VehicleRoutingAlgorithm algorithm = vraBuilder.buildAlgorithm();
-		algorithm.setMaxIterations(5000);
+        Jsprit.Builder vraBuilder = Jsprit.Builder.newInstance(vrp);
+        vraBuilder.setProperty(Jsprit.Strategy.CLUSTER_REGRET, "0.25");
+        vraBuilder.setProperty(Jsprit.Strategy.RADIAL_REGRET, "0.25");
+        vraBuilder.setProperty(Jsprit.Strategy.RANDOM_REGRET, "0.");
+        vraBuilder.setProperty(Jsprit.Strategy.WORST_REGRET, "0.25");
+        vraBuilder.setProperty(Jsprit.Parameter.THRESHOLD_INI, "0.05");
+        VehicleRoutingAlgorithm algorithm = vraBuilder.buildAlgorithm();
+        algorithm.setMaxIterations(5000);
 //		VariationCoefficientTermination variation_coefficient = new VariationCoefficientTermination(200, 0.005);
 //		algorithm.setPrematureAlgorithmTermination(variation_coefficient);
 //		algorithm.addListener(variation_coefficient);
 
 //		vra.setMaxIterations(5000);
-		VehicleRoutingProblemSolution solution = Solutions.bestOf(algorithm.searchSolutions());
+        VehicleRoutingProblemSolution solution = Solutions.bestOf(algorithm.searchSolutions());
 
-		SolutionPrinter.print(vrp,solution, SolutionPrinter.Print.VERBOSE);
-	}
+        SolutionPrinter.print(vrp, solution, SolutionPrinter.Print.VERBOSE);
+    }
 
 }
diff --git a/jsprit-io/pom.xml b/jsprit-io/pom.xml
index 343cfe84c..d62775ab5 100644
--- a/jsprit-io/pom.xml
+++ b/jsprit-io/pom.xml
@@ -22,7 +22,7 @@
          xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
     <parent>
         <groupId>com.graphhopper</groupId>
-        <artifactId>jsprit</artifactId>        
+        <artifactId>jsprit</artifactId>
         <version>1.6.3-SNAPSHOT</version>
     </parent>
     <modelVersion>4.0.0</modelVersion>
diff --git a/jsprit-io/src/main/java/com/graphhopper/jsprit/io/algorithm/VehicleRoutingAlgorithms.java b/jsprit-io/src/main/java/com/graphhopper/jsprit/io/algorithm/VehicleRoutingAlgorithms.java
index b831b8952..49c2b9312 100644
--- a/jsprit-io/src/main/java/com/graphhopper/jsprit/io/algorithm/VehicleRoutingAlgorithms.java
+++ b/jsprit-io/src/main/java/com/graphhopper/jsprit/io/algorithm/VehicleRoutingAlgorithms.java
@@ -26,12 +26,7 @@
 import com.graphhopper.jsprit.core.algorithm.module.RuinAndRecreateModule;
 import com.graphhopper.jsprit.core.algorithm.recreate.InsertionStrategy;
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionListener;
-import com.graphhopper.jsprit.core.algorithm.ruin.ClusterRuinStrategyFactory;
-import com.graphhopper.jsprit.core.algorithm.ruin.JobNeighborhoods;
-import com.graphhopper.jsprit.core.algorithm.ruin.JobNeighborhoodsFactory;
-import com.graphhopper.jsprit.core.algorithm.ruin.RadialRuinStrategyFactory;
-import com.graphhopper.jsprit.core.algorithm.ruin.RandomRuinStrategyFactory;
-import com.graphhopper.jsprit.core.algorithm.ruin.RuinStrategy;
+import com.graphhopper.jsprit.core.algorithm.ruin.*;
 import com.graphhopper.jsprit.core.algorithm.ruin.distance.DefaultJobDistance;
 import com.graphhopper.jsprit.core.algorithm.ruin.distance.JobDistance;
 import com.graphhopper.jsprit.core.algorithm.selector.SelectBest;
@@ -589,7 +584,7 @@ public void run() {
         else costCalculator = solutionCostCalculator;
 
         PrettyAlgorithmBuilder prettyAlgorithmBuilder = PrettyAlgorithmBuilder.newInstance(vrp, vehicleFleetManager, stateManager, constraintManager);
-        if(addCoreConstraints)
+        if (addCoreConstraints)
             prettyAlgorithmBuilder.addCoreStateAndConstraintStuff();
         //construct initial solution creator
         final InsertionStrategy initialInsertionStrategy = createInitialSolution(config, vrp, vehicleFleetManager, stateManager, algorithmListeners, definedClasses, executorService, nuOfThreads, costCalculator, constraintManager, addDefaultCostCalculators);
@@ -871,10 +866,12 @@ private static SearchStrategyModule buildModule(HierarchicalConfiguration module
                 ruin = getRadialRuin(vrp, routeStates, definedClasses, ruinKey, shareToRuin, jobDistance);
             } else if (ruin_name.equals("clusterRuin")) {
                 String initialNumberJobsToRemoveString = moduleConfig.getString("ruin.initRemoveJobs");
-                if (initialNumberJobsToRemoveString == null) throw new IllegalStateException("module.ruin.initRemoveJobs is missing.");
+                if (initialNumberJobsToRemoveString == null)
+                    throw new IllegalStateException("module.ruin.initRemoveJobs is missing.");
                 int initialNumberJobsToRemove = Integer.valueOf(initialNumberJobsToRemoveString);
-            	ruin = getClusterRuin(vrp, routeStates, definedClasses, ruinKey, initialNumberJobsToRemove);
-            } else throw new IllegalStateException("ruin[@name] " + ruin_name + " is not known. Use either randomRuin or radialRuin.");
+                ruin = getClusterRuin(vrp, routeStates, definedClasses, ruinKey, initialNumberJobsToRemove);
+            } else
+                throw new IllegalStateException("ruin[@name] " + ruin_name + " is not known. Use either randomRuin or radialRuin.");
 
             String insertionName = moduleConfig.getString("insertion[@name]");
             if (insertionName == null)
@@ -916,12 +913,12 @@ private static RuinStrategy getRadialRuin(final VehicleRoutingProblem vrp, final
     }
 
     private static RuinStrategy getClusterRuin(final VehicleRoutingProblem vrp, final StateManager routeStates, TypedMap definedClasses, ModKey modKey, int initialNumberJobsToRemove) {
-    	JobNeighborhoods jobNeighborhoods = new JobNeighborhoodsFactory().createNeighborhoods(vrp, new DefaultJobDistance(vrp.getTransportCosts()));
-    	RuinStrategyKey stratKey = new RuinStrategyKey(modKey);
+        JobNeighborhoods jobNeighborhoods = new JobNeighborhoodsFactory().createNeighborhoods(vrp, new DefaultJobDistance(vrp.getTransportCosts()));
+        RuinStrategyKey stratKey = new RuinStrategyKey(modKey);
         RuinStrategy ruin = definedClasses.get(stratKey);
         if (ruin == null) {
-        	ruin = new ClusterRuinStrategyFactory(initialNumberJobsToRemove, jobNeighborhoods).createStrategy(vrp);
-        	definedClasses.put(stratKey, ruin);
+            ruin = new ClusterRuinStrategyFactory(initialNumberJobsToRemove, jobNeighborhoods).createStrategy(vrp);
+            definedClasses.put(stratKey, ruin);
         }
         return ruin;
     }
diff --git a/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLReader.java b/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLReader.java
index 47ccf57ea..40338733b 100644
--- a/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLReader.java
+++ b/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLReader.java
@@ -17,37 +17,12 @@
  */
 package com.graphhopper.jsprit.io.problem;
 
-import java.io.IOException;
-import java.io.InputStream;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.LinkedHashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-
-import org.apache.commons.configuration.ConfigurationException;
-import org.apache.commons.configuration.HierarchicalConfiguration;
-import org.apache.commons.configuration.XMLConfiguration;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-import org.xml.sax.EntityResolver;
-import org.xml.sax.InputSource;
-import org.xml.sax.SAXException;
-
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
 import com.graphhopper.jsprit.core.problem.driver.Driver;
 import com.graphhopper.jsprit.core.problem.driver.DriverImpl;
-import com.graphhopper.jsprit.core.problem.job.Break;
-import com.graphhopper.jsprit.core.problem.job.Delivery;
-import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Pickup;
-import com.graphhopper.jsprit.core.problem.job.Service;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.*;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
@@ -58,6 +33,18 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.Coordinate;
 import com.graphhopper.jsprit.core.util.Resource;
+import org.apache.commons.configuration.ConfigurationException;
+import org.apache.commons.configuration.HierarchicalConfiguration;
+import org.apache.commons.configuration.XMLConfiguration;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.xml.sax.EntityResolver;
+import org.xml.sax.InputSource;
+import org.xml.sax.SAXException;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.util.*;
 
 public class VrpXMLReader {
 
@@ -111,10 +98,8 @@
     private ServiceBuilderFactory serviceBuilderFactory = new DefaultServiceBuilderFactory();
 
 
-
     /**
-     * @param schemaValidation
-     *            the schemaValidation to set
+     * @param schemaValidation the schemaValidation to set
      */
     @SuppressWarnings("UnusedDeclaration")
     public void setSchemaValidation(boolean schemaValidation) {
@@ -255,7 +240,7 @@ private void readInitialRoutes(XMLConfiguration xmlConfig) {
                         Service service = getService(serviceId);
                         if (service == null) {
                             throw new IllegalArgumentException("service to serviceId " + serviceId
-                                    + " is missing (reference in one of your initial routes). make sure you define the service you refer to here in <services> </services>.");
+                                + " is missing (reference in one of your initial routes). make sure you define the service you refer to here in <services> </services>.");
                         }
                         //!!!since job is part of initial route, it does not belong to jobs in problem, i.e. variable jobs that can be assigned/scheduled
                         freezedJobIds.add(serviceId);
@@ -268,7 +253,7 @@ private void readInitialRoutes(XMLConfiguration xmlConfig) {
                         Shipment shipment = getShipment(shipmentId);
                         if (shipment == null) {
                             throw new IllegalArgumentException("shipment to shipmentId " + shipmentId
-                                    + " is missing (reference in one of your initial routes). make sure you define the shipment you refer to here in <shipments> </shipments>.");
+                                + " is missing (reference in one of your initial routes). make sure you define the shipment you refer to here in <shipments> </shipments>.");
                         }
                         freezedJobIds.add(shipmentId);
                         if (type.equals("pickupShipment")) {
@@ -426,7 +411,7 @@ private void readShipments(XMLConfiguration config) {
             }
             if (capacityString != null && capacityDimensionsExist) {
                 throw new IllegalArgumentException(
-                        "either use capacity or capacity-dimension, not both. prefer the use of 'capacity-dimensions' over 'capacity'.");
+                    "either use capacity or capacity-dimension, not both. prefer the use of 'capacity-dimensions' over 'capacity'.");
             }
 
             Shipment.Builder builder;
@@ -576,7 +561,7 @@ private void readServices(XMLConfiguration vrpProblem) {
             }
             if (capacityString != null && capacityDimensionsExist) {
                 throw new IllegalArgumentException(
-                        "either use capacity or capacity-dimension, not both. prefer the use of 'capacity-dimensions' over 'capacity'.");
+                    "either use capacity or capacity-dimension, not both. prefer the use of 'capacity-dimensions' over 'capacity'.");
             }
 
             Service.BuilderBase<?, ?> builder;
@@ -668,7 +653,7 @@ private void readVehiclesAndTheirTypes(XMLConfiguration vrpProblem) {
             }
             if (capacityString != null && capacityDimensionsExist) {
                 throw new IllegalArgumentException(
-                        "either use capacity or capacity-dimension, not both. prefer the use of 'capacity-dimensions' over 'capacity'.");
+                    "either use capacity or capacity-dimension, not both. prefer the use of 'capacity-dimensions' over 'capacity'.");
             }
 
             VehicleTypeImpl.Builder typeBuilder;
diff --git a/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLWriter.java b/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLWriter.java
index b2ea9664e..b98452ad9 100644
--- a/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLWriter.java
+++ b/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLWriter.java
@@ -115,7 +115,7 @@ public void write(String filename) {
         writeShipments(xmlConfig, jobs);
 
         writeInitialRoutes(xmlConfig);
-        if(onlyBestSolution && solutions != null) {
+        if (onlyBestSolution && solutions != null) {
             VehicleRoutingProblemSolution solution = Solutions.bestOf(solutions);
             solutions.clear();
             solutions.add(solution);
@@ -170,7 +170,7 @@ private void writeInitialRoutes(XMLConf xmlConfig) {
                     } else if (job instanceof Shipment) {
                         xmlConfig.setProperty(path + "(" + routeCounter + ").act(" + actCounter + ").shipmentId", job.getId());
                     } else if (job instanceof Break) {
-                    	xmlConfig.setProperty(path + "(" + routeCounter + ").act(" + actCounter + ").breakId", job.getId());
+                        xmlConfig.setProperty(path + "(" + routeCounter + ").act(" + actCounter + ").breakId", job.getId());
                     } else {
                         throw new IllegalStateException("cannot write solution correctly since job-type is not know. make sure you use either service or shipment, or another writer");
                     }
@@ -193,7 +193,7 @@ private void writeSolutions(XMLConf xmlConfig) {
             xmlConfig.setProperty(solutionPath + "(" + counter + ").cost", solution.getCost());
             int routeCounter = 0;
             List<VehicleRoute> list = new ArrayList<VehicleRoute>(solution.getRoutes());
-            Collections.sort(list , new VehicleIndexComparator());
+            Collections.sort(list, new VehicleIndexComparator());
             for (VehicleRoute route : list) {
 //				xmlConfig.setProperty(solutionPath + "(" + counter + ").routes.route(" + routeCounter + ").cost", route.getCost());
                 xmlConfig.setProperty(solutionPath + "(" + counter + ").routes.route(" + routeCounter + ").driverId", route.getDriver().getId());
@@ -255,10 +255,10 @@ private void writeServices(XMLConf xmlConfig, List<Job> jobs) {
             Collection<TimeWindow> tws = service.getTimeWindows();
             int index = 0;
             xmlConfig.setProperty(shipmentPathString + "(" + counter + ").duration", service.getServiceDuration());
-            for(TimeWindow tw : tws) {
-	            xmlConfig.setProperty(shipmentPathString + "(" + counter + ").timeWindows.timeWindow(" + index + ").start", tw.getStart());
-	            xmlConfig.setProperty(shipmentPathString + "(" + counter + ").timeWindows.timeWindow(" + index + ").end", tw.getEnd());
-	            ++index;
+            for (TimeWindow tw : tws) {
+                xmlConfig.setProperty(shipmentPathString + "(" + counter + ").timeWindows.timeWindow(" + index + ").start", tw.getStart());
+                xmlConfig.setProperty(shipmentPathString + "(" + counter + ").timeWindows.timeWindow(" + index + ").end", tw.getEnd());
+                ++index;
             }
 
             //skills
@@ -296,11 +296,11 @@ private void writeShipments(XMLConf xmlConfig, List<Job> jobs) {
             Collection<TimeWindow> pu_tws = shipment.getPickupTimeWindows();
             int index = 0;
             xmlConfig.setProperty(shipmentPathString + "(" + counter + ").pickup.duration", shipment.getPickupServiceTime());
-            for(TimeWindow tw : pu_tws) {
-	            xmlConfig.setProperty(shipmentPathString + "(" + counter + ").pickup.timeWindows.timeWindow(" + index + ").start", tw.getStart());
-	            xmlConfig.setProperty(shipmentPathString + "(" + counter + ").pickup.timeWindows.timeWindow(" + index + ").end", tw.getEnd());
-	            ++index;
-	        }
+            for (TimeWindow tw : pu_tws) {
+                xmlConfig.setProperty(shipmentPathString + "(" + counter + ").pickup.timeWindows.timeWindow(" + index + ").start", tw.getStart());
+                xmlConfig.setProperty(shipmentPathString + "(" + counter + ").pickup.timeWindows.timeWindow(" + index + ").end", tw.getEnd());
+                ++index;
+            }
 
             if (shipment.getDeliveryLocation().getId() != null)
                 xmlConfig.setProperty(shipmentPathString + "(" + counter + ").delivery.location.id", shipment.getDeliveryLocation().getId());
@@ -313,12 +313,12 @@ private void writeShipments(XMLConf xmlConfig, List<Job> jobs) {
             }
 
             Collection<TimeWindow> del_tws = shipment.getDeliveryTimeWindows();
-        	xmlConfig.setProperty(shipmentPathString + "(" + counter + ").delivery.duration", shipment.getDeliveryServiceTime());
-        	index = 0;
-            for(TimeWindow tw : del_tws) {
-            	xmlConfig.setProperty(shipmentPathString + "(" + counter + ").delivery.timeWindows.timeWindow(" + index + ").start", tw.getStart());
-            	xmlConfig.setProperty(shipmentPathString + "(" + counter + ").delivery.timeWindows.timeWindow(" + index + ").end", tw.getEnd());
-            	++index;
+            xmlConfig.setProperty(shipmentPathString + "(" + counter + ").delivery.duration", shipment.getDeliveryServiceTime());
+            index = 0;
+            for (TimeWindow tw : del_tws) {
+                xmlConfig.setProperty(shipmentPathString + "(" + counter + ").delivery.timeWindows.timeWindow(" + index + ").start", tw.getStart());
+                xmlConfig.setProperty(shipmentPathString + "(" + counter + ").delivery.timeWindows.timeWindow(" + index + ").end", tw.getEnd());
+                ++index;
             }
 
             for (int i = 0; i < shipment.getSize().getNuOfDimensions(); i++) {
@@ -375,13 +375,13 @@ private void writeVehiclesAndTheirTypes(XMLConfiguration xmlConfig) {
             if (vehicle.getBreak() != null) {
                 Collection<TimeWindow> tws = vehicle.getBreak().getTimeWindows();
                 int index = 0;
-	            xmlConfig.setProperty(vehiclePathString + "(" + counter + ").breaks.duration", vehicle.getBreak().getServiceDuration());
-                for(TimeWindow tw : tws) {
-		            xmlConfig.setProperty(vehiclePathString + "(" + counter + ").breaks.timeWindows.timeWindow(" + index + ").start", tw.getStart());
-		            xmlConfig.setProperty(vehiclePathString + "(" + counter + ").breaks.timeWindows.timeWindow(" + index + ").end", tw.getEnd());
-		            ++index;
+                xmlConfig.setProperty(vehiclePathString + "(" + counter + ").breaks.duration", vehicle.getBreak().getServiceDuration());
+                for (TimeWindow tw : tws) {
+                    xmlConfig.setProperty(vehiclePathString + "(" + counter + ").breaks.timeWindows.timeWindow(" + index + ").start", tw.getStart());
+                    xmlConfig.setProperty(vehiclePathString + "(" + counter + ").breaks.timeWindows.timeWindow(" + index + ").end", tw.getEnd());
+                    ++index;
                 }
-	        }
+            }
             xmlConfig.setProperty(vehiclePathString + "(" + counter + ").returnToDepot", vehicle.isReturnToDepot());
 
             //write skills
diff --git a/jsprit-io/src/main/resources/algorithm_schema.xsd b/jsprit-io/src/main/resources/algorithm_schema.xsd
index d8bd7ec27..94ba462ac 100644
--- a/jsprit-io/src/main/resources/algorithm_schema.xsd
+++ b/jsprit-io/src/main/resources/algorithm_schema.xsd
@@ -206,11 +206,11 @@
                 </xs:simpleType>
             </xs:element>
             <xs:element name="initRemoveJobs" minOccurs="0" maxOccurs="1">
-              <xs:simpleType>
-                <xs:restriction base="xs:integer">
-                  <xs:minInclusive value="1"/>
-                </xs:restriction>
-              </xs:simpleType>
+                <xs:simpleType>
+                    <xs:restriction base="xs:integer">
+                        <xs:minInclusive value="1"/>
+                    </xs:restriction>
+                </xs:simpleType>
             </xs:element>
             <xs:element name="distance" minOccurs="0" maxOccurs="1">
                 <xs:simpleType>
diff --git a/jsprit-io/src/main/resources/vrp_xml_schema.xsd b/jsprit-io/src/main/resources/vrp_xml_schema.xsd
index 04a36b26d..723ea54de 100644
--- a/jsprit-io/src/main/resources/vrp_xml_schema.xsd
+++ b/jsprit-io/src/main/resources/vrp_xml_schema.xsd
@@ -388,12 +388,12 @@
         <xs:sequence>
             <xs:element name="timeWindows" minOccurs="0" maxOccurs="1">
                 <xs:complexType>
-	                <xs:sequence>
-	                  <xs:element name="timeWindow" type="timeWindowType" minOccurs="1"
-	                          maxOccurs="unbounded"/>
-	                </xs:sequence>
+                    <xs:sequence>
+                        <xs:element name="timeWindow" type="timeWindowType" minOccurs="1"
+                                    maxOccurs="unbounded"/>
+                    </xs:sequence>
                 </xs:complexType>
-              </xs:element>
+            </xs:element>
             <xs:element name="duration" type="xs:double" minOccurs="1" maxOccurs="1" default="0.0"/>
             <xs:element name="id" type="xs:string" minOccurs="1" maxOccurs="1"/>
         </xs:sequence>
diff --git a/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/InitialRoutesTest.java b/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/InitialRoutesTest.java
index 0f5d6b862..5d53510f6 100644
--- a/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/InitialRoutesTest.java
+++ b/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/InitialRoutesTest.java
@@ -19,18 +19,17 @@
 package com.graphhopper.jsprit.io.problem;
 
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-
-import java.util.List;
-
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.job.Service;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
+import org.junit.Test;
+
+import java.util.List;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
 
 public class InitialRoutesTest {
 
diff --git a/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLReaderTest.java b/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLReaderTest.java
index f46a31384..35112b2c8 100644
--- a/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLReaderTest.java
+++ b/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLReaderTest.java
@@ -17,20 +17,6 @@
  */
 package com.graphhopper.jsprit.io.problem;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertTrue;
-
-import java.io.InputStream;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.List;
-
-import org.junit.Before;
-import org.junit.Test;
-
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
 import com.graphhopper.jsprit.core.problem.job.Job;
@@ -43,6 +29,16 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.util.Solutions;
+import org.junit.Before;
+import org.junit.Test;
+
+import java.io.InputStream;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.List;
+
+import static org.junit.Assert.*;
 
 
 public class VrpXMLReaderTest {
@@ -635,7 +631,7 @@ public void testRead_ifReaderIsCalled_itReadsSuccessfullyV2() {
     @Test
     public void testRead_ifReaderIsCalled_itReadsSuccessfully() {
         new VrpXMLReader(VehicleRoutingProblem.Builder.newInstance(), new ArrayList<VehicleRoutingProblemSolution>())
-                .read(getClass().getResourceAsStream("lui-shen-solution.xml"));
+            .read(getClass().getResourceAsStream("lui-shen-solution.xml"));
         assertTrue(true);
     }
 
diff --git a/pom.xml b/pom.xml
index 5307aa671..5a4e63b37 100644
--- a/pom.xml
+++ b/pom.xml
@@ -1,4 +1,3 @@
-
 <!--
 ~ Licensed to GraphHopper GmbH under one or more contributor
 ~ license agreements. See the NOTICE file distributed with this work for
@@ -17,7 +16,8 @@
 ~ limitations under the License.
 -->
 
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
     <modelVersion>4.0.0</modelVersion>
 
     <groupId>com.graphhopper</groupId>
