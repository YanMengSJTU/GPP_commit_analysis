diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/cost/ForwardTransportCost.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/cost/ForwardTransportCost.java
index 3a87016c5..bce4a94f1 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/cost/ForwardTransportCost.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/cost/ForwardTransportCost.java
@@ -24,4 +24,6 @@
 
     public double getTransportCost(Location from, Location to, double departureTime, Driver driver, Vehicle vehicle);
 
+
+
 }
diff --git a/jsprit-examples/input/enroute_pickup_delivery.xml b/jsprit-examples/input/enroute_pickup_delivery.xml
new file mode 100644
index 000000000..e5869a7d8
--- /dev/null
+++ b/jsprit-examples/input/enroute_pickup_delivery.xml
@@ -0,0 +1,168 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<problem xmlns="http://www.w3schools.com"
+         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3schools.com vrp_xml_schema.xsd">
+    <problemType>
+        <fleetSize>FINITE</fleetSize>
+    </problemType>
+    <vehicles>
+        <vehicle>
+            <id>vehicle2</id>
+            <typeId>vehicleRegular</typeId>
+            <startLocation>
+                <id>[x=10.0][y=10.0]</id>
+                <coord x="10.0" y="10.0"/>
+            </startLocation>
+            <endLocation>
+                <id>[x=10.0][y=10.0]</id>
+                <coord x="10.0" y="10.0"/>
+            </endLocation>
+            <timeSchedule>
+                <start>0.0</start>
+                <end>1.7976931348623157E308</end>
+            </timeSchedule>
+            <returnToDepot>false</returnToDepot>
+        </vehicle>
+        <vehicle>
+            <id>vehicle1</id>
+            <typeId>vehicleLarge</typeId>
+            <startLocation>
+                <id>[x=5.0][y=20.0]</id>
+                <coord x="5.0" y="20.0"/>
+            </startLocation>
+            <endLocation>
+                <id>[x=5.0][y=20.0]</id>
+                <coord x="5.0" y="20.0"/>
+            </endLocation>
+            <timeSchedule>
+                <start>0.0</start>
+                <end>1.7976931348623157E308</end>
+            </timeSchedule>
+            <returnToDepot>false</returnToDepot>
+        </vehicle>
+    </vehicles>
+    <vehicleTypes>
+        <type>
+            <id>vehicleLarge</id>
+            <capacity-dimensions>
+                <dimension index="0">2</dimension>
+                <dimension index="1">10</dimension>
+            </capacity-dimensions>
+            <costs>
+                <fixed>0.0</fixed>
+                <distance>1.0</distance>
+                <time>0.0</time>
+            </costs>
+        </type>
+        <type>
+            <id>vehicleRegular</id>
+            <capacity-dimensions>
+                <dimension index="0">2</dimension>
+                <dimension index="1">1</dimension>
+            </capacity-dimensions>
+            <costs>
+                <fixed>0.0</fixed>
+                <distance>1.0</distance>
+                <time>0.0</time>
+            </costs>
+        </type>
+    </vehicleTypes>
+    <shipments>
+        <shipment id="1">
+            <pickup>
+                <location>
+                    <id>[x=5.0][y=7.0]</id>
+                    <coord x="5.0" y="7.0"/>
+                </location>
+                <duration>0.0</duration>
+                <timeWindows>
+                    <timeWindow>
+                        <start>0.0</start>
+                        <end>1.7976931348623157E308</end>
+                    </timeWindow>
+                </timeWindows>
+            </pickup>
+            <delivery>
+                <location>
+                    <id>[x=6.0][y=9.0]</id>
+                    <coord x="6.0" y="9.0"/>
+                </location>
+                <duration>0.0</duration>
+                <timeWindows>
+                    <timeWindow>
+                        <start>0.0</start>
+                        <end>1.7976931348623157E308</end>
+                    </timeWindow>
+                </timeWindows>
+            </delivery>
+            <capacity-dimensions>
+                <dimension index="0">1</dimension>
+                <dimension index="1">1</dimension>
+            </capacity-dimensions>
+        </shipment>
+        <shipment id="2">
+            <pickup>
+                <location>
+                    <id>[x=5.0][y=13.0]</id>
+                    <coord x="5.0" y="13.0"/>
+                </location>
+                <duration>0.0</duration>
+                <timeWindows>
+                    <timeWindow>
+                        <start>0.0</start>
+                        <end>1.7976931348623157E308</end>
+                    </timeWindow>
+                </timeWindows>
+            </pickup>
+            <delivery>
+                <location>
+                    <id>[x=6.0][y=11.0]</id>
+                    <coord x="6.0" y="11.0"/>
+                </location>
+                <duration>0.0</duration>
+                <timeWindows>
+                    <timeWindow>
+                        <start>0.0</start>
+                        <end>1.7976931348623157E308</end>
+                    </timeWindow>
+                </timeWindows>
+            </delivery>
+            <capacity-dimensions>
+                <dimension index="0">1</dimension>
+                <dimension index="1">10</dimension>
+            </capacity-dimensions>
+        </shipment>
+        <shipment id="3">
+            <pickup>
+                <location>
+                    <id>[x=11.0][y=12.0]</id>
+                    <coord x="11.0" y="12.0"/>
+                </location>
+                <duration>0.0</duration>
+                <timeWindows>
+                    <timeWindow>
+                        <start>0.0</start>
+                        <end>1.7976931348623157E308</end>
+                    </timeWindow>
+                </timeWindows>
+            </pickup>
+            <delivery>
+                <location>
+                    <id>[x=12.0][y=12.0]</id>
+                    <coord x="12.0" y="12.0"/>
+                </location>
+                <duration>0.0</duration>
+                <timeWindows>
+                    <timeWindow>
+                        <start>0.0</start>
+                        <end>1.7976931348623157E308</end>
+                    </timeWindow>
+                </timeWindows>
+            </delivery>
+            <capacity-dimensions>
+                <dimension index="0">1</dimension>
+                <dimension index="1">1</dimension>
+            </capacity-dimensions>
+        </shipment>
+    </shipments>
+
+</problem>
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/BaiduDistance.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/BaiduDistance.java
new file mode 100644
index 000000000..9e4c00d79
--- /dev/null
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/BaiduDistance.java
@@ -0,0 +1,241 @@
+package com.graphhopper.jsprit.examples;
+
+import com.google.gson.JsonObject;
+import com.google.gson.JsonParser;
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingActivityCosts;
+import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
+import com.graphhopper.jsprit.core.problem.driver.Driver;
+import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
+import com.graphhopper.jsprit.core.util.EuclideanCosts;
+import com.graphhopper.jsprit.core.util.ManhattanCosts;
+import com.sun.tools.javac.util.Pair;
+import com.sun.tools.javah.Util;
+import com.sun.tools.jdi.DoubleTypeImpl;
+import scala.util.parsing.combinator.testing.Str;
+import scala.util.parsing.combinator.token.StdTokens;
+import scala.util.parsing.json.JSONObject;
+
+
+import java.io.*;
+import java.net.*;
+import java.text.DecimalFormat;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Map;
+
+
+public class BaiduDistance implements VehicleRoutingTransportCosts {
+
+    public BaiduDistance() {
+        // init singleton if necessary
+        if (distanceCache == null) {
+            distanceCache = new HashMap<Pair<String, String>, Double>();
+            System.out.println("BaiduDistance.BaiduDistance init distance cache");
+        }
+
+        if (durationCache == null) {
+            durationCache = new HashMap<Pair<String, String>, Double>();
+            System.out.println("BaiduDistance.BaiduDistance init duration cache");
+        }
+    }
+
+    public Map<Pair<String, String>, Double> distanceCache;
+    public Map<Pair<String, String>, Double> durationCache;
+
+    public String getCoorString(Location loc) {
+
+        double lng = loc.getCoordinate().getX();
+        double lat = loc.getCoordinate().getY();
+
+
+
+        String strLng = new DecimalFormat("###.###").format(lng);
+        String strLat = new DecimalFormat("###.###").format(lat);
+
+        return strLng + ',' + strLat;
+    }
+
+    public void putDistanceCache(Location from, Location to, Double distance) {
+        String strFrom = getCoorString(from);
+        String strTo = getCoorString(to);
+
+        Pair<String, String> p1 = new Pair<String, String>(strFrom, strTo);
+        Pair<String, String> p2 = new Pair<String, String>(strTo, strFrom);
+
+        distanceCache.put(p1, distance);
+        distanceCache.put(p2, distance);
+    }
+
+    public void putDurationCache(Location from, Location to, Double duration) {
+        String strFrom = getCoorString(from);
+        String strTo = getCoorString(to);
+
+        Pair<String, String> p1 = new Pair<String, String>(strFrom, strTo);
+        Pair<String, String> p2 = new Pair<String, String>(strTo, strFrom);
+
+        durationCache.put(p1, duration);
+        durationCache.put(p2, duration);
+    }
+
+
+    public Double getDistanceCache(Location from, Location to){
+        String strFrom = getCoorString(from);
+        String strTo = getCoorString(to);
+
+        Pair<String, String> p1 = new Pair<String, String>(strFrom, strTo);
+        Pair<String, String> p2 = new Pair<String, String>(strTo, strFrom);
+
+        Double d1 = distanceCache.get(p1);
+        Double d2 = distanceCache.get(p2);
+        if (d1 != null) {
+            return d1;
+        } else if(d2 != null) {
+            return d2;
+        }
+
+        return null;
+    }
+
+    public Double getDurationCache(Location from, Location to) {
+        String strFrom = getCoorString(from);
+        String strTo = getCoorString(to);
+
+        Pair<String, String> p1 = new Pair<String, String>(strFrom, strTo);
+        Pair<String, String> p2 = new Pair<String, String>(strTo, strFrom);
+
+        Double d1 = durationCache.get(p1);
+        Double d2 = durationCache.get(p2);
+        if (d1 != null) {
+            return d1;
+        } else if(d2 != null) {
+            return d2;
+        }
+
+        return null;
+    }
+
+    public double getTransportCost(Location from, Location to,
+                                   double departureTime, Driver driver, Vehicle vehicle) {
+
+        String apiUrl = getApiUrl(from, to);
+
+        Double cachedD = getDistanceCache(from, to);
+        if (cachedD != null) {
+            return cachedD;
+        }
+
+        try {
+            JsonObject j = getHTML(apiUrl);
+
+            double distance = j.getAsJsonObject("result")
+                .getAsJsonArray("routes")
+                .get(0).getAsJsonObject()
+                .get("distance").getAsDouble();
+
+            // save to cache
+
+            putDistanceCache(from, to, distance);
+
+            return distance;
+
+        } catch (Exception e) {
+            ManhattanCosts m = new ManhattanCosts();
+            return m.getTransportCost(from, to, departureTime, driver, vehicle);
+        }
+
+    }
+
+    public double getTransportTime(Location from, Location to,
+                                   double departureTime, Driver driver, Vehicle vehicle) {
+        String apiUrl = getApiUrl(from, to);
+
+        Double cachedD = getDurationCache(from, to);
+        if (cachedD != null) {
+            return cachedD;
+        }
+
+        try {
+            JsonObject j = getHTML(apiUrl);
+            double duration =  j.getAsJsonObject("result")
+                .getAsJsonArray("routes")
+                .get(0).getAsJsonObject()
+                .get("duration").getAsDouble();
+
+            // save to cache
+
+            putDurationCache(from, to, duration);
+
+            return duration;
+
+        } catch (Exception e) {
+            ManhattanCosts m = new ManhattanCosts();
+            return m.getTransportTime(from, to, departureTime, driver, vehicle);
+        }
+
+    }
+
+    public double getBackwardTransportTime(Location from, Location to,
+                                           double arrivalTime, Driver driver, Vehicle vehicle) {
+        return getTransportTime(from, to, arrivalTime, driver, vehicle);
+    }
+
+    public double getBackwardTransportCost(Location from, Location to,
+                                           double arrivalTime, Driver driver, Vehicle vehicle) {
+        return getTransportCost(from, to, arrivalTime, driver, vehicle);
+    }
+
+    public String getApiUrl(Location from, Location to) {
+        double fromLng = from.getCoordinate().getX();
+        double fromLat = from.getCoordinate().getY();
+
+        double toLng = to.getCoordinate().getX();
+        double toLat = to.getCoordinate().getY();
+
+        String urlTemplate = "http://api.map.baidu.com/direction/v1?mode=riding" +
+            "&origin=$origin$" +
+            "&destination=$destination$&" +
+            "origin_region=%E5%8C%97%E4%BA%AC" +
+            "&destination_region=%E5%8C%97%E4%BA%AC" +
+            "&output=json" +
+            "&ak=o0RuzQRVNo1YuIorz50uWVLs6DXVSo7X";
+
+        String strOrigin = String.valueOf(fromLat) + ',' + String.valueOf(fromLng);
+        String strDestination = String.valueOf(toLat) + ',' + String.valueOf(toLng);
+        urlTemplate = urlTemplate.replace("$origin$", strOrigin);
+        urlTemplate = urlTemplate.replace("$destination$", strDestination);
+
+        return urlTemplate;
+    }
+
+    public static JsonObject getHTML(String urlToRead) throws Exception {
+        StringBuilder result = new StringBuilder();
+        URL url = new URL(urlToRead);
+        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
+        conn.setRequestMethod("GET");
+        BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
+        String line;
+        while ((line = rd.readLine()) != null) {
+            result.append(line);
+        }
+        rd.close();
+//        return result.toString();
+
+        return new JsonParser().parse(result.toString()).getAsJsonObject();
+
+    }
+
+    public static void main(String[] args) throws Exception {
+        String url = "http://api.map.baidu.com/direction/v1?mode=riding&origin=40.056878,116.30815&destination=39.915285,116.403857&origin_region=%E5%8C%97%E4%BA%AC&destination_region=%E5%8C%97%E4%BA%AC&output=json&ak=o0RuzQRVNo1YuIorz50uWVLs6DXVSo7X";
+//      // get distance j.get("result").get("routes").get(0).get("distance").getAsDouble()
+        // get duration j.get("result").get("routes").get(0).get("duration").getAsDouble()
+        JsonObject j = getHTML(url);
+        System.out.println(j.toString());
+
+//        Location from = new Location()
+
+
+    }
+
+
+}
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EnRoutePickupAndDeliveryWithMultipleDepotsAndOpenRoutesExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EnRoutePickupAndDeliveryWithMultipleDepotsAndOpenRoutesExample.java
index c82e098e1..9fdbae2a2 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EnRoutePickupAndDeliveryWithMultipleDepotsAndOpenRoutesExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EnRoutePickupAndDeliveryWithMultipleDepotsAndOpenRoutesExample.java
@@ -85,7 +85,11 @@ public static void main(String[] args) {
 
 		 */
 
-        Shipment shipment1 = Shipment.Builder.newInstance("1").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(5, 7))).setDeliveryLocation(loc(Coordinate.newInstance(6, 9))).build();
+        Shipment shipment1 = Shipment.Builder.newInstance("1")
+            .addSizeDimension(0, 1)
+            .setPickupLocation(loc(Coordinate.newInstance(5, 7)))
+            .setDeliveryLocation(loc(Coordinate.newInstance(6, 9)))
+            .build();
         Shipment shipment2 = Shipment.Builder.newInstance("2").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(5, 13))).setDeliveryLocation(loc(Coordinate.newInstance(6, 11))).build();
 
         Shipment shipment3 = Shipment.Builder.newInstance("3").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(15, 7))).setDeliveryLocation(loc(Coordinate.newInstance(14, 9))).build();
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EnRouteRealTime.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EnRouteRealTime.java
new file mode 100644
index 000000000..59010ad87
--- /dev/null
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EnRouteRealTime.java
@@ -0,0 +1,440 @@
+package com.graphhopper.jsprit.examples;
+
+
+import java.io.BufferedReader;
+import java.io.File;
+import java.io.FileReader;
+import java.lang.reflect.Array;
+import java.util.*;
+
+import com.google.gson.JsonObject;
+import com.google.gson.JsonParser;
+import com.graphhopper.jsprit.analysis.toolbox.GraphStreamViewer;
+import com.graphhopper.jsprit.analysis.toolbox.Plotter;
+import com.graphhopper.jsprit.core.algorithm.VehicleRoutingAlgorithm;
+import com.graphhopper.jsprit.core.algorithm.io.VehicleRoutingAlgorithms;
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
+import com.graphhopper.jsprit.core.problem.io.VrpXMLWriter;
+import com.graphhopper.jsprit.core.problem.job.Pickup;
+import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
+import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
+import com.graphhopper.jsprit.core.reporting.SolutionPrinter;
+import com.graphhopper.jsprit.core.util.Coordinate;
+import com.graphhopper.jsprit.core.util.Solutions;
+
+import com.graphhopper.jsprit.core.util.ManhattanCosts;
+
+/**
+ * Created by jiusi on 16/4/1.
+ */
+
+
+public class EnRouteRealTime {
+    public static String exampleBase = "/Users/jiusi/IdeaProjects/jsprit/jsprit-examples/";
+
+    public ArrayList<ArrayList<JsonObject>> readFile(String path) {
+
+        ArrayList<JsonObject> destinations = new ArrayList<JsonObject>();
+        ArrayList<ArrayList<JsonObject>> lists = new ArrayList<ArrayList<JsonObject>>();
+        // get that fucking file
+        // read it into list
+        File file = new File(path);
+        try {
+            BufferedReader br = new BufferedReader(new FileReader(file));
+
+            try {
+                String line;
+
+                while ((line = br.readLine()) != null) {
+
+                    JsonParser parser = new JsonParser();
+                    JsonObject o = parser.parse(line).getAsJsonObject();
+
+                    destinations.add(o);
+                }
+            } catch (java.io.IOException fuck) {
+                System.out.println("line fucked");
+            }
+
+            // make lists according to date
+
+
+            ArrayList<JsonObject> list = new ArrayList<JsonObject>();
+            JsonObject preEle = destinations.get(0);
+            for (int i = 1; i < destinations.size(); i++) {
+                JsonObject ele = destinations.get(i);
+
+                String date = ele.get("date").getAsString();
+
+                if (date.equals(preEle.get("date").getAsString())) {
+                    list.add(ele);
+                } else {
+                    lists.add(list);
+                    list = new ArrayList<JsonObject>();
+                    list.add(ele);
+                }
+
+                preEle = ele;
+            }
+            if (list.size() != 0) {
+                lists.add(list);
+            }
+
+        } catch (java.io.IOException fuck) {
+            System.out.println("wtf:" + fuck.toString());
+        }
+        return lists;
+    }
+
+    private static Location loc(Coordinate coordinate) {
+        return Location.Builder.newInstance().setCoordinate(coordinate).build();
+    }
+
+    public Map<String, double[]> bizNameCoorMap = new HashMap<String, double[]>();
+
+    public void enroute(ArrayList<JsonObject> list, int staffSize, double[] staffInitCoor) {
+
+        // 0. build vehicles (staff with bike)
+        ArrayList<VehicleImpl> vehicles = new ArrayList<VehicleImpl>();
+        VehicleTypeImpl.Builder vehicleTypeBuilder = VehicleTypeImpl.Builder.newInstance("vehicleType")
+            .addCapacityDimension(0, 1);
+        vehicleTypeBuilder.setCostPerDistance(10.0);
+        VehicleType vehicleType = vehicleTypeBuilder.build();
+
+        for (int i = 0; i < staffSize; i++) {
+            String staffInitCoorStr = "vehicles" + i + "@[" + staffInitCoor[0] + "," + staffInitCoor[1] + "]";
+            VehicleImpl.Builder vehicleBuilder = VehicleImpl.Builder.newInstance(staffInitCoorStr);
+            vehicleBuilder.setStartLocation(loc(Coordinate.newInstance(staffInitCoor[0], staffInitCoor[1]))).setReturnToDepot(false);
+            vehicleBuilder.setType(vehicleType);
+            VehicleImpl vehicle = vehicleBuilder.build();
+
+            vehicles.add(vehicle);
+        }
+
+
+        // 1. build shipments
+        ArrayList<Shipment> shipments = new ArrayList<Shipment>();
+        for (int i = 0; i < list.size(); i++) {
+            JsonObject ele = list.get(i);
+
+            float[] deliCoor = {ele.getAsJsonArray("coor").get(0).getAsFloat(),
+                ele.getAsJsonArray("coor").get(1).getAsFloat()};
+
+            String date = ele.get("date").getAsString();
+            String bizName = ele.get("businessName").getAsString();
+            double[] bizCoor = bizNameCoorMap.get(bizName);
+
+            String customerName = this.safeGetAsString(ele, "customerName");
+            String customerPhone = this.safeGetAsString(ele, "customerPhone");
+            String deliverAddr = this.safeGetAsString(ele, "deliverAddress");
+
+            if (bizCoor != null) {
+
+                System.out.println("Shipment start:" + Arrays.toString(bizCoor) + " stop:" + Arrays.toString(deliCoor));
+
+                Shipment shipment = Shipment.Builder.newInstance(customerName + ',' + customerPhone + ',' + deliverAddr + " i:" + i)
+                    .addSizeDimension(0, 1)
+                    .setPickupLocation(loc(Coordinate.newInstance(bizCoor[0], bizCoor[1])))
+                    .setDeliveryLocation(loc(Coordinate.newInstance(deliCoor[0], deliCoor[1])))
+                    .build();
+                shipments.add(shipment);
+            } else {
+                System.out.println("warn: biz no coor:" + bizName);
+            }
+        }
+
+        // 2. build a vrp, add vehicles and shipments to it
+        VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
+        for (VehicleImpl v : vehicles) {
+            vrpBuilder.addVehicle(v);
+        }
+
+        for (Shipment s : shipments) {
+            vrpBuilder.addJob(s);
+        }
+
+        vrpBuilder.setFleetSize(VehicleRoutingProblem.FleetSize.FINITE);
+        VehicleRoutingProblem problem = vrpBuilder.build();
+
+
+        // 3. search solutions and plot the fucking result
+        /*
+         * get the algorithm out-of-the-box.
+		 */
+        VehicleRoutingAlgorithm algorithm = VehicleRoutingAlgorithms.readAndCreateAlgorithm(problem, exampleBase + "input/algorithmConfig.xml");
+//		algorithm.setMaxIterations(30000);
+        /*
+         * and search a solution
+		 */
+        Collection<VehicleRoutingProblemSolution> solutions = algorithm.searchSolutions();
+
+		/*
+         * get the best
+		 */
+        VehicleRoutingProblemSolution bestSolution = Solutions.bestOf(solutions);
+
+		/*
+         * write out problem and solution to xml-file
+		 */
+        new VrpXMLWriter(problem, solutions).write(exampleBase + "output/shipment-problem-with-solution.xml");
+
+		/*
+         * print nRoutes and totalCosts of bestSolution
+		 */
+        SolutionPrinter.print(bestSolution);
+
+		/*
+         * plot problem without solution
+		 */
+        Plotter problemPlotter = new Plotter(problem);
+        problemPlotter.plotShipments(true);
+        problemPlotter.plot(exampleBase + "output/enRoutePickupAndDeliveryWithMultipleLocationsExample_problem.png", "en-route pickup and delivery");
+
+		/*
+         * plot problem with solution
+		 */
+        Plotter solutionPlotter = new Plotter(problem, Arrays.asList(Solutions.bestOf(solutions).getRoutes().iterator().next()));
+        solutionPlotter.plotShipments(true);
+        solutionPlotter.plot(exampleBase + "output/enRoutePickupAndDeliveryWithMultipleLocationsExample_solution.png", "en-route pickup and delivery");
+
+        new GraphStreamViewer(problem, Solutions.bestOf(solutions)).labelWith(GraphStreamViewer.Label.ACTIVITY).setRenderDelay(100).setRenderShipments(true).display();
+    }
+
+    public String safeGetAsString(JsonObject j, String stringFieldName) {
+        if (j.get(stringFieldName) != null) {
+            return j.get(stringFieldName).getAsString();
+        } else {
+            return "";
+        }
+    }
+
+    public void batchProblemBuilder(String inputPath) {
+        // generate shipments
+        EnRouteRealTime r = new EnRouteRealTime();
+
+        r.bizNameCoorMap.put("格林沙拉（自销）", new double[]{39.936935, 116.460901});
+        r.bizNameCoorMap.put("恩之方", new double[]{39.940916, 116.451592});
+        r.bizNameCoorMap.put("念客", new double[]{39.923294, 116.466292});
+        r.bizNameCoorMap.put("拌物沙拉", new double[]{39.916824, 116.462717});
+        r.bizNameCoorMap.put("宇甜品", new double[]{39.936895, 116.460746});
+        r.bizNameCoorMap.put("拌物", new double[]{39.917, 116.463035});
+        r.bizNameCoorMap.put("格林沙拉", new double[]{39.936935, 116.460901});
+        r.bizNameCoorMap.put("匹考克", new double[]{39.924461, 116.45983});
+        r.bizNameCoorMap.put("臻享甜品", new double[]{39.929068, 116.484437});
+        r.bizNameCoorMap.put("爱贝里", new double[]{39.942715, 116.461778});
+        r.bizNameCoorMap.put("仙juice", new double[]{39.92435, 116.463573});
+
+        // make that vrp problem and plot it
+
+        // modify plot function as let it show receiver info
+        ArrayList<ArrayList<JsonObject>> lists = r.readFile(inputPath);
+
+        double[] dormitary = {39.914, 116.502};
+        r.enroute(lists.get(0), 20, dormitary);
+    }
+
+
+
+    public void realTimeProblemBuilder(ArrayList<EnRouteVehicleContext> vehicleContexts, ArrayList<Shipment> newShipments) {
+        // 0. get all vehicle's status from API and make EnRouteContext
+        // status: picked up, location, all pending plans
+
+        // 1.1 build vehicles
+
+        ArrayList<VehicleImpl> vehicles = new ArrayList<VehicleImpl>();
+        for (int i = 0; i < vehicleContexts.size(); i++) {
+            EnRouteVehicleContext vehicleContext = vehicleContexts.get(i);
+            double[] crtLoc = vehicleContext.currentLoc;
+
+            VehicleTypeImpl.Builder vehicleTypeBuilder = VehicleTypeImpl.Builder.newInstance("bike")
+                .addCapacityDimension(0, 3);
+            vehicleTypeBuilder.setCostPerDistance(10.0);
+            VehicleType vehicleType = vehicleTypeBuilder.build();
+
+            String staffCurrentCoorStr = "bike:" + i + "@[" + crtLoc[0] + "," + crtLoc[1] + "]";
+            VehicleImpl.Builder vehicleBuilder = VehicleImpl.Builder.newInstance(staffCurrentCoorStr);
+            vehicleBuilder.setStartLocation(loc(Coordinate.newInstance(crtLoc[0], crtLoc[1]))).setReturnToDepot(false);
+            vehicleBuilder.setType(vehicleType);
+            vehicleBuilder.addSkill(vehicleContext.vehicleId); // make sure the going deli will only be taken by the vehicle
+            VehicleImpl vehicle = vehicleBuilder.build();
+
+//            vehicleBuilder.set
+
+            vehicles.add(vehicle);
+        }
+
+
+        //  1.2 setup shipments
+        ArrayList<Shipment> shipments = new ArrayList<Shipment>();
+
+        // 1.2.1 setup on going pick up
+        for (int i = 0; i < vehicleContexts.size(); i++) {
+            EnRouteVehicleContext vehicleContext = vehicleContexts.get(i);
+            String vehicleId = vehicleContext.vehicleId;
+            EnRouteVehicleContext.ShipmentInfo onGoingPickUp = vehicleContext.onGoingPickUp;
+
+            if (onGoingPickUp != null) {
+                double[] pickLoc = onGoingPickUp.pickupLoc;
+                double[] pickTW = onGoingPickUp.pickupTimeWindowAlgo;
+                double[] deliLoc = onGoingPickUp.deliverLoc;
+
+                double[] deliTW = onGoingPickUp.deliverTimeWindowAlgo;
+
+                Shipment shipment = Shipment.Builder.newInstance(onGoingPickUp.customerName + ','
+                    + onGoingPickUp.customerPhone + ','
+                    + onGoingPickUp.customerAddress)
+                    .addSizeDimension(0, 1)
+                    .setPickupLocation(loc(Coordinate.newInstance(pickLoc[0], pickLoc[1])))
+                    .setPickupTimeWindow(new TimeWindow(pickTW[0], pickTW[1]))
+                    .setDeliveryLocation(loc(Coordinate.newInstance(deliLoc[0], deliLoc[1])))
+                    .setDeliveryTimeWindow(new TimeWindow(deliTW[0], deliTW[1])) // set that fucking window
+                    .addRequiredSkill(vehicleId) // make sure this on going deli will only be taken by that vehicle
+                    .build();
+
+                shipments.add(shipment);
+
+            }
+        }
+
+        //  1.2.2 setup picked-ups
+        //  use required skill to make sure on going delivery won't be allocated to other vehicles
+        for (int i = 0; i < vehicleContexts.size(); i++) {
+            EnRouteVehicleContext vehicleContext = vehicleContexts.get(i);
+            String vehicleId = vehicleContext.vehicleId;
+            ArrayList<EnRouteVehicleContext.ShipmentInfo> pickedUps = vehicleContext.pickedups;
+
+            double[] pickLoc = vehicleContext.currentLoc;
+
+            for (int j = 0; j < pickedUps.size(); j++) {
+                EnRouteVehicleContext.ShipmentInfo pickedUp = pickedUps.get(j);
+
+                double[] deliLoc = pickedUp.deliverLoc;
+                double[] deliTW = pickedUp.deliverTimeWindowAlgo;
+
+                Shipment shipment = Shipment.Builder.newInstance(pickedUp.customerName + ',' + pickedUp.customerPhone + ',' + pickedUp.customerAddress)
+                    .addSizeDimension(0, 1)
+                    .setPickupLocation(loc(Coordinate.newInstance(pickLoc[0], pickLoc[1])))
+                    .setDeliveryLocation(loc(Coordinate.newInstance(deliLoc[0], deliLoc[1])))
+                    .setDeliveryTimeWindow(new TimeWindow(deliTW[0], deliTW[1])) // set that fucking window
+                    .addRequiredSkill(vehicleId) // make sure this on going deli will only be taken by that vehicle
+                    .build();
+
+                shipments.add(shipment);
+            }
+        }
+
+        // 1.2.3 setup non on going tasks
+        // non on going tasks are not context should not be in context section
+        shipments.addAll(newShipments);
+
+        // 2. build a vrp, add vehicles and shipments to it
+        VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
+        for (VehicleImpl v : vehicles) {
+            vrpBuilder.addVehicle(v);
+        }
+
+        for (Shipment s : shipments) {
+            vrpBuilder.addJob(s);
+        }
+
+//        vrpBuilder.setRoutingCost(new ManhattanCosts());
+        vrpBuilder.setRoutingCost(new BaiduDistance());
+
+        vrpBuilder.setFleetSize(VehicleRoutingProblem.FleetSize.FINITE);
+        VehicleRoutingProblem problem = vrpBuilder.build();
+
+        /*
+         * get the algorithm out-of-the-box.
+		 */
+        VehicleRoutingAlgorithm algorithm = VehicleRoutingAlgorithms.readAndCreateAlgorithm(problem, exampleBase + "input/algorithmConfig.xml");
+//		algorithm.setMaxIterations(30000);
+        /*
+         * and search a solution
+		 */
+        Collection<VehicleRoutingProblemSolution> solutions = algorithm.searchSolutions();
+
+		/*
+         * get the best
+		 */
+        VehicleRoutingProblemSolution bestSolution = Solutions.bestOf(solutions);
+
+        this.solutionWriter(problem, solutions, bestSolution);
+    }
+
+
+    public void solutionWriter(VehicleRoutingProblem problem,
+                               Collection<VehicleRoutingProblemSolution> solutions,
+                               VehicleRoutingProblemSolution bestSolution) {
+        new VrpXMLWriter(problem, solutions).write("output/shipment-problem-with-solution.xml");
+
+		/*
+		 * print nRoutes and totalCosts of bestSolution
+		 */
+        SolutionPrinter.print(bestSolution);
+
+		/*
+		 * plot problem without solution
+		 */
+        Plotter problemPlotter = new Plotter(problem);
+        problemPlotter.plotShipments(true);
+        problemPlotter.plot("output/enRoutePickupAndDeliveryWithMultipleLocationsExample_problem.png", "en-route pickup and delivery");
+
+		/*
+		 * plot problem with solution
+		 */
+        Plotter solutionPlotter = new Plotter(problem, Arrays.asList(Solutions.bestOf(solutions).getRoutes().iterator().next()));
+        solutionPlotter.plotShipments(true);
+        solutionPlotter.plot("output/enRoutePickupAndDeliveryWithMultipleLocationsExample_solution.png", "en-route pickup and delivery");
+
+        new GraphStreamViewer(problem, Solutions.bestOf(solutions)).labelWith(GraphStreamViewer.Label.ACTIVITY).setRenderDelay(100).setRenderShipments(true).display();
+
+
+    }
+
+    public void showAllBizNames(String inputPath) {
+
+        EnRouteRealTime r = new EnRouteRealTime();
+
+        HashSet<String> bizNames = new HashSet<String>();
+
+        ArrayList<ArrayList<JsonObject>> lists = r.readFile(inputPath);
+
+        for (int i = 0; i < lists.size(); i++) {
+            ArrayList<JsonObject> list = lists.get(i);
+
+            for (int j = 0; j < list.size(); j++) {
+                JsonObject ele = list.get(j);
+                try {
+                    String bizName = ele.get("businessName").getAsString();
+
+                    bizNames.add(bizName);
+                } catch (Exception e) {
+                    System.out.println("ij:" + i + j);
+                }
+            }
+        }
+
+        System.out.println(bizNames.toString());
+    }
+
+
+
+
+
+    public static void main(String[] args) {
+        String inputPath = "/Users/jiusi/WebstormProjects/xls2json/output_coor.txt";
+
+        EnRouteRealTime r = new EnRouteRealTime();
+
+//        r.showAllBizNames(inputPath);
+//        r.problemBuilder(inputPath);
+    }
+
+
+}
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EnRouteRealTimeTakeTest.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EnRouteRealTimeTakeTest.java
new file mode 100644
index 000000000..68d9eca8c
--- /dev/null
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EnRouteRealTimeTakeTest.java
@@ -0,0 +1,196 @@
+package com.graphhopper.jsprit.examples;
+
+
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
+import com.graphhopper.jsprit.core.util.Coordinate;
+import com.graphhopper.jsprit.examples.EnRouteRealTime;
+
+import java.util.ArrayList;
+
+/**
+ * Created by jiusi on 16/4/7.
+ */
+public class EnRouteRealTimeTakeTest {
+
+
+    public EnRouteVehicleContext bike1(double currentTimestamp) {
+        // 这个人从建外soho出发送摩玛大厦,中途取易思凯的件送甜水园北里
+        // 现在位置是光华路东侧路口,和三环交界,他的位置上有个新快递,但是方向是往西的
+
+
+        // 1. pickedUps
+        ArrayList<double[]> pickupLocs = new ArrayList<double[]>();
+        pickupLocs.add(new double[]{116.466414, 39.912085}); // 建外soho
+        ArrayList<double[]> pickupTimeWindowTSs = new ArrayList<double[]>();
+        pickupTimeWindowTSs.add(new double[]{1459998630.0, 1459999230.0}); // 11:10, 11:40
+
+        ArrayList<double[]> deliverLocs = new ArrayList<double[]>();
+        deliverLocs.add(new double[]{116.479349, 39.929336}); // 摩码大厦
+        ArrayList<double[]> deliverTimeWindowTSs = new ArrayList<double[]>();
+        deliverTimeWindowTSs.add(new double[]{1459998630.0, 1460002224.0}); // 11:10, 12:10
+
+
+        ArrayList<String> customerNames = new ArrayList<String>();
+        customerNames.add("摩码大厦小姐");
+        ArrayList<String> customerAddresses = new ArrayList<String>();
+        customerAddresses.add("摩码大厦301");
+        ArrayList<String> customerPhones = new ArrayList<String>();
+        customerPhones.add("123");
+
+        // 2. on going pickup
+        double[] pickupLoc = {116.469601, 39.925889}; // 易思凯斯咖啡
+        double[] pickupTimeWindowTS = {1459999824.0, 1460001624.0}; // 11:30, 12:00
+        double[] deliverLoc = {116.488349, 39.934078}; // 甜水园北里
+        double[] deliverTimeWindwoTS = {1459999824.0, 1460003424.0}; // 11:30, 12:30
+
+        String customerName = "甜水园北里屌丝";
+        String customerAddress = "甜水园北里4栋2单元202";
+        String customerPhone = "444";
+
+
+        return new EnRouteVehicleContext(
+            "bike1", currentTimestamp, //11:40
+            new double[]{116.468354, 39.919238}, // 光华路东侧路口
+
+            pickupLocs, deliverLocs,
+            pickupTimeWindowTSs, deliverTimeWindowTSs,
+            customerNames, customerPhones, customerAddresses,
+
+            pickupLoc, deliverLoc,
+            pickupTimeWindowTS, deliverTimeWindwoTS,
+            customerName, customerPhone, customerAddress
+        );
+
+    }
+
+    public EnRouteVehicleContext bike2(double currentTimestamp) {
+        // 这个人从现代城鲜花店到朝阳区人民政府,送花,应该接上途中那个往西的快递
+        // 现在位置是光华路东侧路口,和三环交界,他的位置上有个新快递,但是方向是往西的
+
+        ArrayList<double[]> pickupLocs = new ArrayList<double[]>();
+        pickupLocs.add(new double[]{116.482862, 39.912448}); // 现代城鲜花店
+        ArrayList<double[]> pickupTimeWindowTSs = new ArrayList<double[]>();
+        pickupTimeWindowTSs.add(new double[]{1459998630.0, 1459999230.0}); // 11:10, 11:40
+
+        ArrayList<double[]> deliverLocs = new ArrayList<double[]>();
+        deliverLocs.add(new double[]{116.45001, 39.927189}); // 朝阳区人民政府
+        ArrayList<double[]> deliverTimeWindowTSs = new ArrayList<double[]>();
+        deliverTimeWindowTSs.add(new double[]{1459998630.0, 1460002224.0}); // 11:10, 12:10
+
+
+        ArrayList<String> customerNames = new ArrayList<String>();
+        customerNames.add("张菊长");
+        ArrayList<String> customerAddresses = new ArrayList<String>();
+        customerAddresses.add("朝阳区人民政府菊长办公室");
+        ArrayList<String> customerPhones = new ArrayList<String>();
+        customerPhones.add("110");
+
+        // 2. on going pickup No on going pickup
+
+        return new EnRouteVehicleContext(
+            "bike1", currentTimestamp, //11:40
+            new double[]{116.468354, 39.919238}, // 光华路东侧路口
+
+            pickupLocs, deliverLocs,
+            pickupTimeWindowTSs, deliverTimeWindowTSs,
+            customerNames, customerPhones, customerAddresses,
+
+            null, null,
+            null, null,
+            null, null, null
+        );
+
+    }
+
+    public Shipment newShipmentWithTW(double[] pickupLoc, double[] deliverLoc, double[] pickupTW, double[] deliverTW,
+                                      String customerName, String customerPhone, String customerAddress, double currentTimestamp) {
+
+        double pstart = pickupTW[0] - currentTimestamp;
+        if (pstart < 0) {
+            pstart = 0;
+        }
+
+        double dstart = deliverTW[0] - currentTimestamp;
+        if(dstart < 0) {
+            dstart = 0;
+        }
+
+        double[] pickupTimeWindowAlgo = new double[]{
+            pstart,
+            pickupTW[1] - currentTimestamp
+        };
+
+        double[] deliverTimeWindowAlgo = new double[]{
+            dstart,
+            deliverTW[1] - currentTimestamp
+        };
+
+        // 问题是这里的减法会产出负值, 不知道负值会不会对算法有影响, 这个TW的上界很可能是负数,下界如果是负数那么肯定是超时了
+
+        return Shipment.Builder.newInstance("name:" + customerName + " address:" + customerAddress + " phone:" + customerPhone)
+            .addSizeDimension(0, 1)
+            .setPickupLocation(loc(Coordinate.newInstance(pickupLoc[0], pickupLoc[1])))
+            .setPickupTimeWindow(new TimeWindow(pickupTimeWindowAlgo[0], pickupTimeWindowAlgo[1]))
+            .setDeliveryLocation(loc(Coordinate.newInstance(deliverLoc[0], deliverLoc[1])))
+            .setDeliveryTimeWindow(new TimeWindow(deliverTimeWindowAlgo[0], deliverTimeWindowAlgo[1]))
+            .build();
+    }
+
+
+    public Shipment newShipment(double currentTimestamp) {
+        // 新出现的货是从东到西的
+        // 这里需要考虑的是TW的修改,知道现在的时间得到TW而不是timestamp
+        // 从嘉里中心北楼 116.467295,39.919685 接单送往日坛商务楼 116.452471,39.919293
+
+        double[] pickupLoc = {116.467295, 39.919685}; // 嘉里中心
+        double[] pickupTW = {1459998024.0, 1459999800}; // 11:00, 11:30
+        double[] deliverLoc = {116.452471, 39.919293}; // 日坛商务楼
+        double[] deliverTW = {1459998024.0, 1460007000}; // 11:00, 13:00
+
+        String customerName =  "嘉里中心 Ovelia de la Wang";
+        String customerPhone = "456";
+        String customerAddress = "嘉里中心1107前台";
+
+        return newShipmentWithTW(pickupLoc, deliverLoc,
+            pickupTW, deliverTW,
+            customerName, customerPhone, customerAddress, currentTimestamp);
+    }
+
+
+    private static Location loc(Coordinate coordinate) {
+        return Location.Builder.newInstance().setCoordinate(coordinate).build();
+    }
+
+
+    public static void main(String[] args) {
+        /*
+        这个测试是针对近距离但是方向不对的快递员接货的问题
+        货物会分配给离得不太远但是方向对的快递员,而不会分配给最近的那个快递员,已达到cost最小的结果
+         */
+
+        double currentTimestamp = 1459999231; // 4-6 11:20
+
+        EnRouteRealTimeTakeTest t = new EnRouteRealTimeTakeTest();
+        EnRouteVehicleContext bike1 = t.bike1(currentTimestamp);
+        EnRouteVehicleContext bike2 = t.bike2(currentTimestamp);
+
+        Shipment newShipment = t.newShipment(currentTimestamp);
+
+        EnRouteRealTime problemBuilder = new EnRouteRealTime();
+
+        ArrayList<EnRouteVehicleContext> contexts = new ArrayList<EnRouteVehicleContext>();
+        contexts.add(bike1);
+        contexts.add(bike2);
+
+        ArrayList<Shipment> shipments = new ArrayList<Shipment>();
+        shipments.add(newShipment);
+
+        problemBuilder.realTimeProblemBuilder(contexts, shipments);
+
+
+    }
+
+
+}
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EnRouteVehicleContext.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EnRouteVehicleContext.java
new file mode 100644
index 000000000..bce374e44
--- /dev/null
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EnRouteVehicleContext.java
@@ -0,0 +1,135 @@
+package com.graphhopper.jsprit.examples;
+
+import com.graphhopper.jsprit.core.problem.job.Shipment;
+import scala.util.parsing.combinator.testing.Str;
+
+import java.util.ArrayList;
+
+/**
+ * Created by jiusi on 16/4/6.
+ */
+public class EnRouteVehicleContext {
+    public class ShipmentInfo {
+        public double[] pickupLoc;
+        public double[] deliverLoc;
+
+        public double[] pickupTimeWindowTS;
+        public double[] pickupTimeWindowAlgo;
+
+        public double[] deliverTimeWindowTS;
+        public double[] deliverTimeWindowAlgo;
+
+        public String customerName;
+        public String customerPhone;
+
+        public String customerAddress;
+
+        public ShipmentInfo(double[] pickupLoc, double[] deliverLoc,
+                            double[] pickupTimeWindowTS, double[] deliverTimeWindowTS,
+                            String customerName, String customerPhone, String customerAddress) {
+            this.pickupLoc = pickupLoc;
+            this.pickupTimeWindowTS = pickupTimeWindowTS;
+
+            double pstart = pickupTimeWindowTS[0] - currentTimestamp;
+            if (pstart < 0) {
+                pstart = 0;
+            }
+
+            double dstart = deliverTimeWindowTS[0] - currentTimestamp;
+            if(dstart < 0) {
+                dstart = 0;
+            }
+
+
+
+            this.pickupTimeWindowAlgo = new double[]{
+                pstart,
+                pickupTimeWindowTS[1] - currentTimestamp
+            };
+
+            this.deliverLoc = deliverLoc;
+            this.deliverTimeWindowTS = deliverTimeWindowTS;
+            this.deliverTimeWindowAlgo = new double[]{
+                dstart,
+                deliverTimeWindowTS[1] - currentTimestamp
+            };
+
+            this.customerAddress = customerAddress;
+            this.customerPhone = customerPhone;
+            this.customerName = customerName;
+        }
+
+    }
+
+    public ArrayList<ShipmentInfo> pickedups;
+    public ShipmentInfo onGoingPickUp;
+    public ArrayList<ShipmentInfo> plannedShipments;
+
+    public double[] currentLoc;
+    public double currentTimestamp;
+
+    public String vehicleId;
+
+    public EnRouteVehicleContext(String vehicleId, double currentTimestamp, double[] currentLoc, // some info
+
+                                 // for picked-ups
+                                 ArrayList<double[]> pickupLocs, ArrayList<double[]> deliverLocs,
+                                 ArrayList<double[]> pickupTimeWindowTSs, ArrayList<double[]> deliverTimeWindowTSs,
+                                 ArrayList<String> customerNames, ArrayList<String> customerPhones,
+                                 ArrayList<String> customerAddresses,
+
+                                 // for on going pickup
+                                 double[] pickupLoc, double[] deliverLoc,
+                                 double[] pickupTimeWindowTS, double[] deliverTimeWindowTS,
+                                 String customerName, String customerPhone,
+                                 String customerAddress
+
+    ) {
+        // 应该是笛卡尔积但是我他妈懒得写
+        assert (pickupLocs.size() == deliverLocs.size() &&
+            pickupTimeWindowTSs.size() == deliverTimeWindowTSs.size() &&
+            customerNames.size() == customerPhones.size() &&
+            pickupLocs.size() == customerAddresses.size()
+        );
+
+        this.vehicleId = vehicleId;
+        this.currentTimestamp = currentTimestamp;
+        this.currentLoc = currentLoc;
+
+        if(pickupLocs != null) {
+            // make picked-up shipments info
+            this.pickedups = new ArrayList<ShipmentInfo>();
+            for (int i = 0; i < pickupLocs.size(); i++) {
+
+                ShipmentInfo si = new ShipmentInfo(pickupLocs.get(i), deliverLocs.get(i),
+                    pickupTimeWindowTSs.get(i), deliverTimeWindowTSs.get(i),
+                    customerNames.get(i), customerPhones.get(i), customerAddresses.get(i)
+                );
+
+                this.pickedups.add(si);
+            }
+        }
+
+        if(pickupLoc != null) {
+            // make on going pickup shipment info
+            this.onGoingPickUp = new ShipmentInfo(pickupLoc, deliverLoc,
+                pickupTimeWindowTS, deliverTimeWindowTS,
+                customerName, customerPhone, customerAddress
+            );
+
+        }
+
+
+    }
+
+    /*
+    the state machine
+    1. multiple pick ups
+    2. single on going pick up
+    3. multiple on going deliver (planned)
+
+
+    pickedUps contains info of multiple pick ups and on going delivers
+    on going pickup is not included in picked ups
+     */
+}
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/PickupAndDeliveryExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/PickupAndDeliveryExample.java
index 9528d0462..c8bdcae47 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/PickupAndDeliveryExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/PickupAndDeliveryExample.java
@@ -116,7 +116,6 @@ public double getDistance(Location from, Location to) {
         System.out.println("#picks: " + analyser.getNumberOfPickups());
         System.out.println("#deliveries: " + analyser.getNumberOfDeliveries());
 
-
     }
 
 }
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryOpenRoutesExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryOpenRoutesExample.java
index 1442d221a..c1a3f5037 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryOpenRoutesExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryOpenRoutesExample.java
@@ -1,16 +1,16 @@
 /*******************************************************************************
  * Copyright (C) 2014  Stefan Schroeder
- *
+ * <p/>
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
  * License as published by the Free Software Foundation; either
  * version 3.0 of the License, or (at your option) any later version.
- *
+ * <p/>
  * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  * Lesser General Public License for more details.
- *
+ * <p/>
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library.  If not, see <http://www.gnu.org/licenses/>.
  ******************************************************************************/
@@ -22,9 +22,11 @@
 import com.graphhopper.jsprit.core.algorithm.box.SchrimpfFactory;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
+import com.graphhopper.jsprit.core.problem.io.VrpXMLReader;
 import com.graphhopper.jsprit.core.problem.io.VrpXMLWriter;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
+import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl.Builder;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
@@ -38,31 +40,37 @@
 
 
 public class SimpleEnRoutePickupAndDeliveryOpenRoutesExample {
+    public VehicleRoutingProblem xml2Problem(String xmlPath) {
+        VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
 
-    public static void main(String[] args) {
-        /*
-         * some preparation - create output folder
-		 */
-        Examples.createOutputFolder();
+        new VrpXMLReader(vrpBuilder).read(xmlPath);
 
-		/*
+        return vrpBuilder.build();
+    }
+
+    public VehicleRoutingProblem manualProblem() {
+        /*
          * get a vehicle type-builder and build a type with the typeId "vehicleType" and a capacity of 2
 		 */
-        VehicleTypeImpl.Builder vehicleTypeBuilder = VehicleTypeImpl.Builder.newInstance("vehicleType").addCapacityDimension(0, 2);
-        VehicleType vehicleType = vehicleTypeBuilder.build();
+        VehicleTypeImpl.Builder vehicleTypeBuilderRegular = VehicleTypeImpl.Builder.newInstance("vehicleRegular").addCapacityDimension(0, 2).addCapacityDimension(1, 1);
+        VehicleType vehicleTypeRegular = vehicleTypeBuilderRegular.build();
+
+        VehicleTypeImpl.Builder vehicleTypeBuilderLarge = VehicleTypeImpl.Builder.newInstance("vehicleLarge").addCapacityDimension(0, 2).addCapacityDimension(1, 10);
+        VehicleType vehicleTypeLarge = vehicleTypeBuilderLarge.build();
 
 		/*
          * get a vehicle-builder and build a vehicle located at (10,10) with type "vehicleType"
 		 */
         Builder vehicleBuilder = VehicleImpl.Builder.newInstance("vehicle1");
         vehicleBuilder.setStartLocation(loc(Coordinate.newInstance(5, 20)));
-        vehicleBuilder.setType(vehicleType);
+        vehicleBuilder.setType(vehicleTypeLarge);
         vehicleBuilder.setReturnToDepot(false);
+
         VehicleImpl vehicle1 = vehicleBuilder.build();
 
         vehicleBuilder = VehicleImpl.Builder.newInstance("vehicle2");
-        vehicleBuilder.setStartLocation(loc(Coordinate.newInstance(10,10)));
-        vehicleBuilder.setType(vehicleType);
+        vehicleBuilder.setStartLocation(loc(Coordinate.newInstance(10, 10)));
+        vehicleBuilder.setType(vehicleTypeRegular);
         vehicleBuilder.setReturnToDepot(false);
         VehicleImpl vehicle2 = vehicleBuilder.build();
 
@@ -76,10 +84,10 @@ public static void main(String[] args) {
 		 * 4: (15,13)->(14,11)
 		 */
 
-        Shipment shipment1 = Shipment.Builder.newInstance("1").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(5, 7))).setDeliveryLocation(loc(Coordinate.newInstance(6, 9))).build();
-        Shipment shipment2 = Shipment.Builder.newInstance("2").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(5, 13))).setDeliveryLocation(loc(Coordinate.newInstance(6, 11))).build();
+        Shipment shipment1 = Shipment.Builder.newInstance("1").addSizeDimension(0, 1).addSizeDimension(1, 1).setPickupLocation(loc(Coordinate.newInstance(5, 7))).setDeliveryLocation(loc(Coordinate.newInstance(6, 9))).build();
+        Shipment shipment2 = Shipment.Builder.newInstance("2").addSizeDimension(0, 1).addSizeDimension(1, 10).setPickupLocation(loc(Coordinate.newInstance(5, 13))).setDeliveryLocation(loc(Coordinate.newInstance(6, 11))).build();
 
-        Shipment shipment3 = Shipment.Builder.newInstance("3").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(11, 12))).setDeliveryLocation(loc(Coordinate.newInstance(12, 12))).build();
+        Shipment shipment3 = Shipment.Builder.newInstance("3").addSizeDimension(0, 1).addSizeDimension(1, 1).setPickupLocation(loc(Coordinate.newInstance(11, 12))).setDeliveryLocation(loc(Coordinate.newInstance(12, 12))).build();
 //        Shipment shipment4 = Shipment.Builder.newInstance("4").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(15, 13))).setDeliveryLocation(loc(Coordinate.newInstance(14, 11))).build();
 
 
@@ -90,7 +98,21 @@ public static void main(String[] args) {
 //        vrpBuilder.addJob(shipment1).addJob(shipment2).addJob(shipment3).addJob(shipment4);
         vrpBuilder.addJob(shipment1).addJob(shipment2).addJob(shipment3);
 
-        VehicleRoutingProblem problem = vrpBuilder.build();
+        return vrpBuilder.build();
+    }
+
+    public static void main(String[] args) {
+
+        SimpleEnRoutePickupAndDeliveryOpenRoutesExample eigen = new SimpleEnRoutePickupAndDeliveryOpenRoutesExample();
+
+        /*
+         * some preparation - create output folder
+		 */
+        Examples.createOutputFolder();
+
+
+        // get a vehicle problem by building it from xml or manually
+        VehicleRoutingProblem problem = eigen.xml2Problem("jsprit-examples/input/enroute_pickup_delivery.xml");
 
 		/*
          * get the algorithm out-of-the-box.
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/enRouteTimeCostTest.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/enRouteTimeCostTest.java
new file mode 100644
index 000000000..4b2edc313
--- /dev/null
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/enRouteTimeCostTest.java
@@ -0,0 +1,214 @@
+package com.graphhopper.jsprit.examples;
+
+
+import java.util.*;
+
+import com.google.gson.JsonObject;
+import com.graphhopper.jsprit.analysis.toolbox.GraphStreamViewer;
+import com.graphhopper.jsprit.analysis.toolbox.Plotter;
+import com.graphhopper.jsprit.core.algorithm.VehicleRoutingAlgorithm;
+import com.graphhopper.jsprit.core.algorithm.io.VehicleRoutingAlgorithms;
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
+import com.graphhopper.jsprit.core.problem.io.VrpXMLWriter;
+import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
+import com.graphhopper.jsprit.core.reporting.SolutionPrinter;
+import com.graphhopper.jsprit.core.util.Coordinate;
+import com.graphhopper.jsprit.core.util.Solutions;
+
+
+public class EnRouteTimeCostTest {
+    public static String exampleBase = "/Users/jiusi/IdeaProjects/jsprit/jsprit-examples/";
+
+    private static Location loc(Coordinate coordinate) {
+        return Location.Builder.newInstance().setCoordinate(coordinate).build();
+    }
+
+    public Map<String, double[]> bizNameCoorMap = new HashMap<String, double[]>();
+
+    public void enroute(ArrayList<JsonObject> list, int staffSize, double[] staffInitCoor) {
+
+        // 0. build vehicles (staff with bike)
+        ArrayList<VehicleImpl> vehicles = new ArrayList<VehicleImpl>();
+        VehicleTypeImpl.Builder vehicleTypeBuilder = VehicleTypeImpl.Builder.newInstance("vehicleType")
+            .addCapacityDimension(0, 15);
+        vehicleTypeBuilder.setCostPerDistance(1.0);
+        VehicleType vehicleType = vehicleTypeBuilder.build();
+
+        for (int i = 0; i < staffSize; i++) {
+            String staffInitCoorStr = "vehicles" + i + "@[" + staffInitCoor[0] + "," + staffInitCoor[1] + "]";
+            VehicleImpl.Builder vehicleBuilder = VehicleImpl.Builder.newInstance(staffInitCoorStr);
+            vehicleBuilder.setStartLocation(loc(Coordinate.newInstance(staffInitCoor[0], staffInitCoor[1]))).setReturnToDepot(false);
+            vehicleBuilder.setType(vehicleType);
+            VehicleImpl vehicle = vehicleBuilder.build();
+
+            vehicles.add(vehicle);
+        }
+
+
+        // 1. build shipments
+        ArrayList<Shipment> shipments = new ArrayList<Shipment>();
+        for (int i = 0; i < list.size(); i++) {
+            JsonObject ele = list.get(i);
+
+            float[] deliCoor = {ele.getAsJsonArray("coor").get(0).getAsFloat(),
+                ele.getAsJsonArray("coor").get(1).getAsFloat()};
+
+            String date = ele.get("date").getAsString();
+            String bizName = ele.get("businessName").getAsString();
+            double[] bizCoor = bizNameCoorMap.get(bizName);
+
+            String customerName = this.safeGetAsString(ele, "customerName");
+            String customerPhone = this.safeGetAsString(ele, "customerPhone");
+            String deliverAddr = this.safeGetAsString(ele, "deliverAddress");
+
+            if(bizCoor != null) {
+
+
+
+                System.out.println("Shipment start:" + Arrays.toString(bizCoor) + " stop:" + Arrays.toString(deliCoor));
+
+
+                Shipment shipment = Shipment.Builder.newInstance(customerName + ',' + customerPhone + ',' + deliverAddr + " i:" + i)
+                    .addSizeDimension(0, 1)
+                    .setPickupLocation(loc(Coordinate.newInstance(bizCoor[0], bizCoor[1])))
+                    .setDeliveryLocation(loc(Coordinate.newInstance(deliCoor[0], deliCoor[1])))
+                    .build();
+                shipments.add(shipment);
+            } else {
+                System.out.println("warn: biz no coor:" + bizName);
+            }
+        }
+
+        // 2. build a vrp, add vehicles and shipments to it
+        VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
+        for (VehicleImpl v : vehicles) {
+            vrpBuilder.addVehicle(v);
+        }
+
+        for (Shipment s : shipments) {
+            vrpBuilder.addJob(s);
+        }
+
+        vrpBuilder.setFleetSize(VehicleRoutingProblem.FleetSize.FINITE);
+        VehicleRoutingProblem problem = vrpBuilder.build();
+
+
+        // 3. search solutions and plot the fucking result
+        /*
+         * get the algorithm out-of-the-box.
+		 */
+        VehicleRoutingAlgorithm algorithm = VehicleRoutingAlgorithms.readAndCreateAlgorithm(problem, exampleBase + "input/algorithmConfig.xml");
+//		algorithm.setMaxIterations(30000);
+        /*
+         * and search a solution
+		 */
+        Collection<VehicleRoutingProblemSolution> solutions = algorithm.searchSolutions();
+
+		/*
+         * get the best
+		 */
+        VehicleRoutingProblemSolution bestSolution = Solutions.bestOf(solutions);
+
+		/*
+         * write out problem and solution to xml-file
+		 */
+        new VrpXMLWriter(problem, solutions).write(exampleBase + "output/shipment-problem-with-solution.xml");
+
+		/*
+		 * print nRoutes and totalCosts of bestSolution
+		 */
+        SolutionPrinter.print(bestSolution);
+
+		/*
+		 * plot problem without solution
+		 */
+        Plotter problemPlotter = new Plotter(problem);
+        problemPlotter.plotShipments(true);
+        problemPlotter.plot(exampleBase + "output/enRoutePickupAndDeliveryWithMultipleLocationsExample_problem.png", "en-route pickup and delivery");
+
+		/*
+		 * plot problem with solution
+		 */
+        Plotter solutionPlotter = new Plotter(problem, Arrays.asList(Solutions.bestOf(solutions).getRoutes().iterator().next()));
+        solutionPlotter.plotShipments(true);
+        solutionPlotter.plot(exampleBase + "output/enRoutePickupAndDeliveryWithMultipleLocationsExample_solution.png", "en-route pickup and delivery");
+
+        new GraphStreamViewer(problem, Solutions.bestOf(solutions)).labelWith(GraphStreamViewer.Label.ACTIVITY).setRenderDelay(100).setRenderShipments(true).display();
+    }
+
+    public String safeGetAsString(JsonObject j, String stringFieldName) {
+        if (j.get(stringFieldName) != null ) {
+            return j.get(stringFieldName).getAsString();
+        } else {
+            return "";
+        }
+    }
+
+    public void problemBuilder(String inputPath) {
+        // generate shipments
+        EnRouteRealTime r = new EnRouteRealTime();
+
+        r.bizNameCoorMap.put("格林沙拉（自销）", new double[] {39.936935, 116.460901});
+        r.bizNameCoorMap.put("恩之方", new double[] {39.940916, 116.451592});
+        r.bizNameCoorMap.put("念客",  new double[]{39.923294, 116.466292});
+        r.bizNameCoorMap.put("拌物沙拉", new double[]{39.916824, 116.462717});
+        r.bizNameCoorMap.put("宇甜品", new double[]{39.936895, 116.460746});
+        r.bizNameCoorMap.put("拌物", new double[]{39.917, 116.463035});
+        r.bizNameCoorMap.put("格林沙拉" , new double[] {39.936935, 116.460901});
+        r.bizNameCoorMap.put("匹考克", new double[] {39.924461, 116.45983});
+        r.bizNameCoorMap.put("臻享甜品", new double[] {39.929068, 116.484437});
+        r.bizNameCoorMap.put("爱贝里", new double[] {39.942715, 116.461778});
+        r.bizNameCoorMap.put("仙juice", new double[] {39.92435, 116.463573});
+
+        // make that vrp problem and plot it
+
+        // modify plot function as let it show receiver info
+        ArrayList<ArrayList<JsonObject>> lists = r.readFile(inputPath);
+
+        double []dormitary = {39.914, 116.502};
+        r.enroute(lists.get(0), 20, dormitary);
+    }
+
+    public void showAllBizNames(String inputPath) {
+
+        EnRouteRealTime r = new EnRouteRealTime();
+
+        HashSet<String> bizNames = new HashSet<String>();
+
+        ArrayList<ArrayList<JsonObject>> lists = r.readFile(inputPath);
+
+        for (int i=0; i<lists.size(); i++) {
+            ArrayList<JsonObject> list= lists.get(i);
+
+            for(int j=0; j<list.size(); j++) {
+                JsonObject ele = list.get(j);
+                try {
+                    String bizName = ele.get("businessName").getAsString();
+
+                    bizNames.add(bizName);
+                }catch (Exception e) {
+                    System.out.println("ij:" + i + j);
+                }
+            }
+        }
+
+        System.out.println(bizNames.toString());
+    }
+
+
+    public static void main(String[] argss) {
+        String inputPath = "/Users/jiusi/WebstormProjects/xls2json/output_coor.txt";
+
+        EnRouteTimeCostTest r = new EnRouteTimeCostTest();
+
+//        r.showAllBizNames(inputPath);
+        r.problemBuilder(inputPath);
+    }
+
+
+}
diff --git a/pom.xml b/pom.xml
index 663744bed..d45b36578 100644
--- a/pom.xml
+++ b/pom.xml
@@ -153,7 +153,7 @@
                             <rules>
                                 <requireMavenVersion>
                                     Some plugin features require a recent Maven runtime to work properly
-                                    <message>Current version of Maven ${maven.version} required to build the project
+                                    <message>Current version of Maven I don't fucking know required to build the project
                                         should be ${project.prerequisites.maven}, or higher!
                                     </message>
                                     <version>[${project.prerequisites.maven},)</version>
@@ -285,6 +285,11 @@
             <version>${logger.version}</version>
         </dependency>
 
+        <dependency>
+            <groupId>com.google.code.gson</groupId>
+            <artifactId>gson</artifactId>
+            <version>2.6</version>
+        </dependency>
 
     </dependencies>
 
