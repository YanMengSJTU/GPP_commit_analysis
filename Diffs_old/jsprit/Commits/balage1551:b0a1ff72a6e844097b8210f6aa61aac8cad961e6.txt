diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateLoads.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateLoads.java
index d4125b9c3..8d3096279 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateLoads.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateLoads.java
@@ -71,7 +71,7 @@ public void begin(VehicleRoute route) {
 
     @Override
     public void visit(TourActivity act) {
-        currentLoad = currentLoad.add(act.getSize());
+        currentLoad = currentLoad.add(act.getLoadChange());
         stateManager.putInternalTypedActivityState(act, InternalStates.LOAD, currentLoad);
         //		assert currentLoad.isLessOrEqual(route.getVehicle().getType().getCapacityDimensions()) : "currentLoad at activity must not be > vehicleCapacity";
         //		assert currentLoad.isGreaterOrEqual(SizeDimension.Builder.newInstance().build()) : "currentLoad at act must not be < 0 in one of the applied dimensions";
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateMaxCapacityUtilisationAtRoute.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateMaxCapacityUtilisationAtRoute.java
index 776666612..28e343722 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateMaxCapacityUtilisationAtRoute.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateMaxCapacityUtilisationAtRoute.java
@@ -62,7 +62,7 @@ public void begin(VehicleRoute route) {
 
     @Override
     public void visit(TourActivity act) {
-        currentLoad = currentLoad.add(act.getSize());
+        currentLoad = currentLoad.add(act.getLoadChange());
         maxLoad = SizeDimension.max(maxLoad, currentLoad);
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyser.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyser.java
index 6a7103f9b..0d2173412 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyser.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyser.java
@@ -712,8 +712,8 @@ public SizeDimension getLoadJustBeforeActivity(TourActivity activity, VehicleRou
         }
         verifyThatRouteContainsAct(activity, route);
         SizeDimension afterAct = stateManager.getActivityState(activity, InternalStates.LOAD, SizeDimension.class);
-        if (afterAct != null && activity.getSize() != null) {
-            return afterAct.subtract(activity.getSize());
+        if (afterAct != null && activity.getLoadChange() != null) {
+            return afterAct.subtract(activity.getLoadChange());
         } else if (afterAct != null) {
             return afterAct;
         } else {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/CapacityX.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/CapacityX.java
deleted file mode 100644
index b12d1ad38..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/CapacityX.java
+++ /dev/null
@@ -1,423 +0,0 @@
-/*
- * Licensed to GraphHopper GmbH under one or more contributor
- * license agreements. See the NOTICE file distributed with this work for
- * additional information regarding copyright ownership.
- *
- * GraphHopper GmbH licenses this file to you under the Apache License,
- * Version 2.0 (the "License"); you may not use this file except in
- * compliance with the License. You may obtain a copy of the License at
- *
- *       http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.graphhopper.jsprit.core.problem;
-
-import java.util.Arrays;
-
-/**
- * SizeDimension with an arbitrary number of capacity-dimension.
- * <p>
- * <p>Note that this assumes the the values of each capacity dimension can be added up and subtracted
- *
- * @author schroeder
- */
-public class CapacityX {
-
-
-    @Deprecated
-    public static CapacityX addup(CapacityX cap1, CapacityX cap2) {
-        return cap1.add(cap2);
-    }
-
-    @Deprecated
-    public static CapacityX subtract(CapacityX cap, CapacityX cap2subtract) {
-        return cap.subtract(cap2subtract);
-    }
-
-    /**
-     * Returns the inverted SizeDimension, i.e. it multiplies all SizeDimension
-     * dimensions with -1.
-     *
-     * @param cap2invert
-     *            SizeDimension to be inverted
-     * @return inverted SizeDimension
-     * @throws NullPointerException
-     *             if one of the args is null
-     * @deprecated Use <code>cap2invert.invert()</code> instead.
-     */
-    @Deprecated
-    public static CapacityX invert(CapacityX cap2invert) {
-        return cap2invert.invert();
-    }
-
-    /**
-     * Divides every dimension of numerator SizeDimension by the corresponding
-     * dimension of denominator SizeDimension, , and averages each quotient.
-     * <p>
-     * <p>
-     * If both nominator.get(i) and denominator.get(i) equal to 0, dimension i
-     * is ignored.
-     * <p>
-     * If both capacities are have only dimensions with dimensionVal=0, it
-     * returns 0.0
-     *
-     * @param numerator
-     *            the numerator
-     * @param denominator
-     *            the denominator
-     * @return quotient
-     * @throws IllegalStateException
-     *             if numerator.get(i) != 0 and denominator.get(i) == 0
-     */
-    public static double divide(CapacityX numerator, CapacityX denominator) {
-        return numerator.divide(denominator);
-    }
-
-    /**
-     * Makes a deep copy of SizeDimensionX.
-     *
-     * @param SizeDimension
-     *            SizeDimension to be copied
-     * @return copy
-     */
-    public static CapacityX copyOf(CapacityX SizeDimension) {
-        if (SizeDimension == null) {
-            return null;
-        }
-        return new CapacityX(SizeDimension);
-    }
-
-    /**
-     * Builder that builds SizeDimensionX
-     *
-     * @author schroeder
-     */
-    public static class Builder {
-
-        /**
-         * default is 1 dimension with size of zero
-         */
-        private int[] dimensions = new int[1];
-
-        /**
-         * Returns a new instance of SizeDimensionX with one dimension and a
-         * value/size of 0
-         *
-         * @return this builder
-         */
-        public static Builder newInstance() {
-            return new Builder();
-        }
-
-        Builder() {
-        }
-
-        /**
-         * add SizeDimension dimension
-         * <p>
-         * <p>
-         * Note that it automatically resizes dimensions according to index,
-         * i.e. if index=7 there are 8 dimensions. New dimensions then are
-         * initialized with 0
-         *
-         * @param index
-         *            dimensionIndex
-         * @param dimValue
-         *            dimensionValue
-         * @return this builder
-         */
-        public Builder addDimension(int index, int dimValue) {
-            if (index < dimensions.length) {
-                dimensions[index] = dimValue;
-            } else {
-                int requiredSize = index + 1;
-                int[] newDimensions = new int[requiredSize];
-                copy(dimensions, newDimensions);
-                newDimensions[index] = dimValue;
-                dimensions = newDimensions;
-            }
-            return this;
-        }
-
-        private void copy(int[] from, int[] to) {
-            for (int i = 0; i < dimensions.length; i++) {
-                to[i] = from[i];
-            }
-        }
-
-        /**
-         * Builds an immutable SizeDimensionX and returns it.
-         *
-         * @return SizeDimensionX
-         */
-        public CapacityX build() {
-            return new CapacityX(this);
-        }
-
-
-    }
-
-    private int[] dimensions;
-
-    /**
-     * copy constructor
-     *
-     * @param SizeDimension
-     *            SizeDimension to be copied
-     */
-    CapacityX(CapacityX SizeDimension) {
-        dimensions = new int[SizeDimension.getNuOfDimensions()];
-        for (int i = 0; i < SizeDimension.getNuOfDimensions(); i++) {
-            dimensions[i] = SizeDimension.get(i);
-        }
-    }
-
-    CapacityX(Builder builder) {
-        dimensions = builder.dimensions;
-    }
-
-    private CapacityX(int numberOfDimensions) {
-        dimensions = new int[numberOfDimensions];
-        // Arrays.fill(dimensions, 0); // Just to be safe, not needed
-    }
-
-    /**
-     * Returns the number of specified SizeDimension dimensions.
-     *
-     * @return noDimensions
-     */
-    public int getNuOfDimensions() {
-        return dimensions.length;
-    }
-
-
-    /**
-     * Returns value of SizeDimension-dimension with specified index.
-     * <p>
-     * <p>
-     * If SizeDimension dimension does not exist, it returns 0 (rather than
-     * IndexOutOfBoundsException).
-     *
-     * @param index
-     *            dimension index of the SizeDimension value to be retrieved
-     * @return the according dimension value
-     */
-    public int get(int index) {
-        if (index < dimensions.length) {
-            return dimensions[index];
-        }
-        return 0;
-    }
-
-    /**
-     * Returns true if this SizeDimension is less or equal than the
-     * SizeDimension toCompare, i.e. if none of the SizeDimension dimensions >
-     * than the corresponding dimension in toCompare.
-     *
-     * @param toCompare
-     *            the SizeDimension to compare
-     * @return true if this SizeDimension is less or equal than toCompare
-     * @throws NullPointerException
-     *             if one of the args is null
-     */
-    public boolean isLessOrEqual(CapacityX toCompare) {
-        if (toCompare == null) {
-            throw new NullPointerException();
-        }
-        for (int i = 0; i < getNuOfDimensions(); i++) {
-            if (get(i) > toCompare.get(i)) {
-                return false;
-            }
-        }
-        return true;
-    }
-
-    /**
-     * Returns true if this SizeDimension is greater or equal than the
-     * SizeDimension toCompare
-     *
-     * @param toCompare
-     *            the SizeDimension to compare
-     * @return true if this SizeDimension is greater or equal than toCompare
-     * @throws NullPointerException
-     *             if one of the args is null
-     */
-    public boolean isGreaterOrEqual(CapacityX toCompare) {
-        if (toCompare == null) {
-            throw new NullPointerException();
-        }
-        for (int i = 0; i < Math.max(getNuOfDimensions(), toCompare.getNuOfDimensions()); i++) {
-            if (get(i) < toCompare.get(i)) {
-                return false;
-            }
-        }
-        return true;
-    }
-
-    @Override
-    public String toString() {
-        String string = "[noDimensions=" + getNuOfDimensions() + "]";
-        for (int i = 0; i < getNuOfDimensions(); i++) {
-            string += "[[dimIndex=" + i + "][dimValue=" + dimensions[i] + "]]";
-        }
-        return string;
-    }
-
-    /**
-     * Return the maximum, i.e. the maximum of each SizeDimension dimension.
-     *
-     * @param cap1
-     *            first SizeDimension to compare
-     * @param cap2
-     *            second SizeDimension to compare
-     * @return SizeDimension maximum of each SizeDimension dimension
-     */
-    public static CapacityX max(CapacityX cap1, CapacityX cap2) {
-        if (cap1 == null || cap2 == null) {
-            throw new IllegalArgumentException("arg must not be null");
-        }
-        CapacityX.Builder toReturnBuilder = CapacityX.Builder.newInstance();
-        for (int i = 0; i < Math.max(cap1.getNuOfDimensions(), cap2.getNuOfDimensions()); i++) {
-            toReturnBuilder.addDimension(i, Math.max(cap1.get(i), cap2.get(i)));
-        }
-        return toReturnBuilder.build();
-    }
-
-    public static CapacityX min(CapacityX cap1, CapacityX cap2) {
-        if (cap1 == null || cap2 == null) {
-            throw new IllegalArgumentException("arg must not be null");
-        }
-        CapacityX.Builder toReturnBuilder = CapacityX.Builder.newInstance();
-        for (int i = 0; i < Math.max(cap1.getNuOfDimensions(), cap2.getNuOfDimensions()); i++) {
-            toReturnBuilder.addDimension(i, Math.min(cap1.get(i), cap2.get(i)));
-        }
-        return toReturnBuilder.build();
-    }
-
-    @Override
-    public boolean equals(Object o) {
-        if (this == o) {
-            return true;
-        }
-        if (!(o instanceof CapacityX)) {
-            return false;
-        }
-
-        CapacityX SizeDimension = (CapacityX) o;
-
-        if (!Arrays.equals(dimensions, SizeDimension.dimensions)) {
-            return false;
-        }
-
-        return true;
-    }
-
-    @Override
-    public int hashCode() {
-        return Arrays.hashCode(dimensions);
-    }
-
-    public boolean isPositive() {
-        for (int i = 0; i < getNuOfDimensions(); i++) {
-            if (get(i) < 0) {
-                return false;
-            }
-        }
-        return true;
-    }
-
-    public CapacityX add(CapacityX capToAdd) {
-        if (capToAdd == null) {
-            throw new NullPointerException("SizeDimension must not be null");
-        }
-        CapacityX res = new CapacityX(
-            Math.max(getNuOfDimensions(), capToAdd.getNuOfDimensions()));
-        for (int i = 0; i < Math.max(getNuOfDimensions(),
-            capToAdd.getNuOfDimensions()); i++) {
-            res.dimensions[i] = get(i) + capToAdd.get(i);
-        }
-
-        return res;
-    }
-
-    public CapacityX subtract(CapacityX capToSubstract) {
-        if (capToSubstract == null) {
-            throw new NullPointerException("SizeDimension must not be null");
-        }
-        CapacityX res = new CapacityX(
-            Math.max(getNuOfDimensions(), capToSubstract.getNuOfDimensions()));
-        for (int i = 0; i < Math.max(getNuOfDimensions(),
-            capToSubstract.getNuOfDimensions()); i++) {
-            res.dimensions[i] = get(i) - capToSubstract.get(i);
-        }
-        return res;
-    }
-
-    public CapacityX invert() {
-        CapacityX res = new CapacityX(getNuOfDimensions());
-        for (int i = 0; i < getNuOfDimensions(); i++) {
-            res.dimensions[i] = -get(i);
-        }
-        return res;
-    }
-
-    public CapacityX abs() {
-        CapacityX res = new CapacityX(getNuOfDimensions());
-        for (int i = 0; i < getNuOfDimensions(); i++) {
-            res.dimensions[i] = Math.abs(get(i));
-        }
-        return res;
-    }
-
-    public double divide(CapacityX denominator) {
-        int nuOfDimensions = 0;
-        double sumQuotients = 0.0;
-        for (int index = 0; index < Math.max(getNuOfDimensions(),
-            denominator.getNuOfDimensions()); index++) {
-            if (get(index) != 0 && denominator.get(index) == 0) {
-                throw new IllegalArgumentException(
-                    "numerator > 0 and denominator = 0. cannot divide by 0");
-            } else if (get(index) == 0 && denominator.get(index) == 0) {
-                continue;
-            } else {
-                nuOfDimensions++;
-                sumQuotients += get(index) / (double) denominator.get(index);
-            }
-        }
-        if (nuOfDimensions > 0) {
-            return sumQuotients / nuOfDimensions;
-        }
-        return 0.0;
-
-    }
-
-    public SizeDimension getNegativeDimensions() {
-        SizeDimension res = new SizeDimension(getNuOfDimensions());
-        for (int i = 0; i < getNuOfDimensions(); i++) {
-            if (get(i) < 0) {
-                res.dimensions[i] = get(i);
-            } else {
-                res.dimensions[i] = 0;
-            }
-        }
-        return res;
-    }
-
-    public SizeDimension getPositiveDimensions() {
-        SizeDimension res = new SizeDimension(getNuOfDimensions());
-        for (int i = 0; i < getNuOfDimensions(); i++) {
-            if (get(i) > 0) {
-                res.dimensions[i] = get(i);
-            } else {
-                res.dimensions[i] = 0;
-            }
-        }
-        return res;
-    }
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/PickupAndDeliverShipmentLoadActivityLevelConstraint.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/PickupAndDeliverShipmentLoadActivityLevelConstraint.java
index a5158c000..144ae0749 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/PickupAndDeliverShipmentLoadActivityLevelConstraint.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/PickupAndDeliverShipmentLoadActivityLevelConstraint.java
@@ -112,13 +112,13 @@ public ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prev
         SizeDimension vehicleCapacityDimensions = iFacts.getNewVehicle().getType().getCapacityDimensions();
 
         if (newAct instanceof PickupActivityNEW) {
-            SizeDimension newCapacity = loadAtPrevAct.add(newAct.getSize());
+            SizeDimension newCapacity = loadAtPrevAct.add(newAct.getLoadChange());
             if (!newCapacity.isLessOrEqual(vehicleCapacityDimensions)) {
                 return ConstraintsStatus.NOT_FULFILLED;
             }
         }
         if (newAct instanceof DeliveryActivityNEW) {
-            SizeDimension newCapacity = loadAtPrevAct.add(newAct.getSize().abs());
+            SizeDimension newCapacity = loadAtPrevAct.add(newAct.getLoadChange().abs());
             if (!newCapacity.isLessOrEqual(vehicleCapacityDimensions)) {
                 return ConstraintsStatus.NOT_FULFILLED_BREAK;
             }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadActivityLevelConstraint.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadActivityLevelConstraint.java
index c4e27ef43..2f8aede36 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadActivityLevelConstraint.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadActivityLevelConstraint.java
@@ -70,8 +70,8 @@ public ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prev
 
         }
 
-        if (newAct.getSize().sign() == SizeDimensionSign.POSITIVE) {
-            if (!newAct.getSize().add(futureMaxLoad).isLessOrEqual(
+        if (newAct.getLoadChange().sign() == SizeDimensionSign.POSITIVE) {
+            if (!newAct.getLoadChange().add(futureMaxLoad).isLessOrEqual(
                 iFacts.getNewVehicle().getType().getCapacityDimensions())) {
                 return ConstraintsStatus.NOT_FULFILLED;
             }
@@ -85,8 +85,8 @@ public ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prev
          * getCargoSize(). For positive or zero activities as Service and Pickup
          * they could refer to the same object.)
          */
-        if (newAct.getSize().sign() != SizeDimensionSign.POSITIVE) {
-            if (!newAct.getSize().abs().add(prevMaxLoad).isLessOrEqual(
+        if (newAct.getLoadChange().sign() != SizeDimensionSign.POSITIVE) {
+            if (!newAct.getLoadChange().abs().add(prevMaxLoad).isLessOrEqual(
                 iFacts.getNewVehicle().getType().getCapacityDimensions())) {
                 return ConstraintsStatus.NOT_FULFILLED_BREAK;
             }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractJob.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractJob.java
index 4b95e1d56..72ff4670a 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractJob.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractJob.java
@@ -317,7 +317,7 @@ protected void prepareCaches() {
     private SizeDimension calcSizeAt(boolean start) {
         SizeDimension size = SizeDimension.EMPTY;
         for (JobActivity act : activityList.getAll()) {
-            size = size.add(act.getSize());
+            size = size.add(act.getLoadChange());
         }
         if (start) return size.getNegativeDimensions().abs();
         else return size.getPositiveDimensions();
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java
index b71d4725a..c6d2f760b 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java
@@ -293,7 +293,7 @@ public String toString() {
     @Override
     @Deprecated
     public SizeDimension getSize() {
-        return getServiceActivity().getSize();
+        return getServiceActivity().getLoadChange();
     }
 
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java
index deaf7af79..550412096 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java
@@ -385,7 +385,7 @@ public TimeWindow getPickupTimeWindow() {
     @Override
     @Deprecated
     public SizeDimension getSize() {
-        return getPickupActivity().getSize();
+        return getPickupActivity().getLoadChange();
     }
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/AbstractActivityNEW.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/AbstractActivityNEW.java
index f61dee17a..334feb8a5 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/AbstractActivityNEW.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/AbstractActivityNEW.java
@@ -10,7 +10,7 @@
 public abstract class AbstractActivityNEW implements TourActivity {
 
     private int index;
-    protected SizeDimension capacity;
+    protected SizeDimension loadChange;
     protected double arrTime;
     protected double endTime;
     protected double theoreticalEarliest = 0;
@@ -19,9 +19,9 @@
     protected Location location;
 
 
-    public AbstractActivityNEW(String type, Location location, SizeDimension capacity) {
+    public AbstractActivityNEW(String type, Location location, SizeDimension loadChange) {
         super();
-        this.capacity = capacity;
+        this.loadChange = loadChange;
         this.type = type;
         this.location = location;
     }
@@ -30,7 +30,7 @@ public AbstractActivityNEW(String type, Location location, SizeDimension capacit
     public AbstractActivityNEW(AbstractActivityNEW sourceActivity) {
         arrTime = sourceActivity.getArrTime();
         endTime = sourceActivity.getEndTime();
-        capacity = sourceActivity.getSize();
+        loadChange = sourceActivity.getLoadChange();
         setIndex(sourceActivity.getIndex());
         theoreticalEarliest = sourceActivity.getTheoreticalEarliestOperationStartTime();
         theoreticalLatest = sourceActivity.getTheoreticalLatestOperationStartTime();
@@ -88,8 +88,8 @@ public void setEndTime(double endTime) {
     }
 
     @Override
-    public SizeDimension getSize() {
-        return capacity;
+    public SizeDimension getLoadChange() {
+        return loadChange;
     }
 
     @Override
@@ -110,7 +110,7 @@ public Location getLocation() {
     @Override
     public String toString() {
         return "[name=" + getName() + "][locationId=" + getLocation().getId()
-            + "][size=" + getSize().toString()
+            + "][size=" + getLoadChange().toString()
             + "][twStart=" + Activities.round(getTheoreticalEarliestOperationStartTime())
             + "][twEnd=" + Activities.round(getTheoreticalLatestOperationStartTime()) + "]";
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourActivity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourActivity.java
index e8dc2ab5e..2e846e34d 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourActivity.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourActivity.java
@@ -17,9 +17,9 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.HasIndex;
 import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 
 /**
  * Basic interface for tour-activities.
@@ -108,7 +108,7 @@
      *
      * @return capacity
      */
-    public abstract SizeDimension getSize();
+    public abstract SizeDimension getLoadChange();
 
     /**
      * Makes a deep copy of this activity.
@@ -117,4 +117,14 @@
      */
     public abstract TourActivity duplicate();
 
+    /**
+     * Returns the capacity size of the activity. It is the absolute value of
+     * the loadChange.
+     *
+     * @return capacity
+     */
+    public default SizeDimension getLoadSize() {
+        return getLoadChange().abs();
+    }
+
 }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/LoadConstraintTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/LoadConstraintTest.java
index 20af7fbaf..7a40409ec 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/LoadConstraintTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/LoadConstraintTest.java
@@ -144,7 +144,7 @@ public void whenServiceRouteAndNewServiceFitsInBetweenStartAndAct1_itShouldRetur
 
         JobInsertionContext context = new JobInsertionContext(serviceRoute, s, serviceRoute.getVehicle(), null, 0.);
         ServiceActivityNEW newAct = mock(ServiceActivityNEW.class);
-        when(newAct.getSize()).thenReturn(newSize);
+        when(newAct.getLoadChange()).thenReturn(newSize);
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, serviceRoute.getStart(), newAct, serviceRoute.getActivities().get(0), 0.);
 
@@ -161,7 +161,7 @@ public void whenServiceRouteAndNewServiceFitsInBetweenAc1AndAct2_itShouldReturnF
 
         JobInsertionContext context = new JobInsertionContext(serviceRoute, s, serviceRoute.getVehicle(), null, 0.);
         ServiceActivityNEW newAct = mock(ServiceActivityNEW.class);
-        when(newAct.getSize()).thenReturn(newSize);
+        when(newAct.getLoadChange()).thenReturn(newSize);
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, serviceRoute.getActivities().get(0), newAct, serviceRoute.getActivities().get(1), 0.);
 
@@ -178,7 +178,7 @@ public void whenServiceRouteAndNewServiceFitsInBetweenAc2AndEnd_itShouldReturnFu
 
         JobInsertionContext context = new JobInsertionContext(serviceRoute, s, serviceRoute.getVehicle(), null, 0.);
         ServiceActivityNEW newAct = mock(ServiceActivityNEW.class);
-        when(newAct.getSize()).thenReturn(newSize);
+        when(newAct.getLoadChange()).thenReturn(newSize);
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, serviceRoute.getActivities().get(1), newAct, serviceRoute.getEnd(), 0.);
 
@@ -198,7 +198,7 @@ public void whenServiceRouteAndNewServiceDoesNotFitInBetweenStartAndAct1_itShoul
 
         JobInsertionContext context = new JobInsertionContext(serviceRoute, s, serviceRoute.getVehicle(), null, 0.);
         ServiceActivityNEW newAct = mock(ServiceActivityNEW.class);
-        when(newAct.getSize()).thenReturn(newSize);
+        when(newAct.getLoadChange()).thenReturn(newSize);
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, serviceRoute.getStart(), newAct, serviceRoute.getActivities().get(0), 0.);
 
@@ -215,7 +215,7 @@ public void whenServiceRouteAndNewServiceDoesNotFitInBetweenAc1AndAct2_itShouldR
 
         JobInsertionContext context = new JobInsertionContext(serviceRoute, s, serviceRoute.getVehicle(), null, 0.);
         ServiceActivityNEW newAct = mock(ServiceActivityNEW.class);
-        when(newAct.getSize()).thenReturn(newSize);
+        when(newAct.getLoadChange()).thenReturn(newSize);
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, serviceRoute.getActivities().get(0), newAct, serviceRoute.getActivities().get(1), 0.);
 
@@ -232,7 +232,7 @@ public void whenServiceRouteAndNewServiceDoesNotFitInBetweenAc2AndEnd_itShouldRe
 
         JobInsertionContext context = new JobInsertionContext(serviceRoute, s, serviceRoute.getVehicle(), null, 0.);
         ServiceActivityNEW newAct = mock(ServiceActivityNEW.class);
-        when(newAct.getSize()).thenReturn(newSize);
+        when(newAct.getLoadChange()).thenReturn(newSize);
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, serviceRoute.getActivities().get(1), newAct, serviceRoute.getEnd(), 0.);
 
@@ -524,7 +524,7 @@ public void whenPDRouteAndNewServiceFitsInBetweenAc1AndAct2_itShouldReturnFulfil
 
         JobInsertionContext context = new JobInsertionContext(serviceRoute, s, serviceRoute.getVehicle(), null, 0.);
         ServiceActivityNEW newAct = mock(ServiceActivityNEW.class);
-        when(newAct.getSize()).thenReturn(newSize);
+        when(newAct.getLoadChange()).thenReturn(newSize);
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, serviceRoute.getActivities().get(0), newAct, serviceRoute.getActivities().get(1), 0.);
 
@@ -541,7 +541,7 @@ public void whenPDRouteAndNewServiceFitsInBetweenAc2AndEnd_itShouldReturnFulfill
 
         JobInsertionContext context = new JobInsertionContext(serviceRoute, s, serviceRoute.getVehicle(), null, 0.);
         ServiceActivityNEW newAct = mock(ServiceActivityNEW.class);
-        when(newAct.getSize()).thenReturn(newSize);
+        when(newAct.getLoadChange()).thenReturn(newSize);
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, serviceRoute.getActivities().get(1), newAct, serviceRoute.getEnd(), 0.);
 
@@ -561,7 +561,7 @@ public void whenPDRouteAndNewServiceDoesNotFitInBetweenStartAndAct1_itShouldRetu
 
         JobInsertionContext context = new JobInsertionContext(serviceRoute, s, serviceRoute.getVehicle(), null, 0.);
         ServiceActivityNEW newAct = mock(ServiceActivityNEW.class);
-        when(newAct.getSize()).thenReturn(newSize);
+        when(newAct.getLoadChange()).thenReturn(newSize);
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, serviceRoute.getStart(), newAct, serviceRoute.getActivities().get(0), 0.);
 
@@ -578,7 +578,7 @@ public void whenPDRouteAndNewServiceDoesNotFitInBetweenAc1AndAct2_itShouldReturn
 
         JobInsertionContext context = new JobInsertionContext(serviceRoute, s, serviceRoute.getVehicle(), null, 0.);
         ServiceActivityNEW newAct = mock(ServiceActivityNEW.class);
-        when(newAct.getSize()).thenReturn(newSize);
+        when(newAct.getLoadChange()).thenReturn(newSize);
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, serviceRoute.getActivities().get(0), newAct, serviceRoute.getActivities().get(1), 0.);
 
@@ -595,7 +595,7 @@ public void whenPDRouteAndNewServiceDoesNotFitInBetweenAc2AndEnd_itShouldReturnF
 
         JobInsertionContext context = new JobInsertionContext(serviceRoute, s, serviceRoute.getVehicle(), null, 0.);
         ServiceActivityNEW newAct = mock(ServiceActivityNEW.class);
-        when(newAct.getSize()).thenReturn(newSize);
+        when(newAct.getLoadChange()).thenReturn(newSize);
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, serviceRoute.getActivities().get(1), newAct, serviceRoute.getEnd(), 0.);
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivityTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivityTest.java
index df653030f..754fb1cc5 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivityTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivityTest.java
@@ -45,7 +45,7 @@ public void doBefore() {
 
     @Test
     public void whenCallingCapacity_itShouldReturnCorrectCapacity() {
-        assertEquals(0, serviceActivity.getSize().get(0));
+        assertEquals(0, serviceActivity.getLoadChange().get(0));
     }
 
     @Test
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverServiceDEPRECATEDTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverServiceDEPRECATEDTest.java
index efe75728a..2157b1ad6 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverServiceDEPRECATEDTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverServiceDEPRECATEDTest.java
@@ -43,9 +43,9 @@ public void doBefore() {
 
     @Test
     public void whenCallingCapacity_itShouldReturnCorrectCapacity() {
-        assertEquals(-10, deliver.getSize().get(0));
-        assertEquals(-100, deliver.getSize().get(1));
-        assertEquals(-1000, deliver.getSize().get(2));
+        assertEquals(-10, deliver.getLoadChange().get(0));
+        assertEquals(-100, deliver.getLoadChange().get(1));
+        assertEquals(-1000, deliver.getLoadChange().get(2));
     }
 
     @Test
@@ -81,9 +81,9 @@ public void whenCopyingStart_itShouldBeDoneCorrectly() {
         assertEquals(1., copy.getTheoreticalEarliestOperationStartTime(), 0.01);
         assertEquals(2., copy.getTheoreticalLatestOperationStartTime(), 0.01);
         assertEquals("loc", copy.getLocation().getId());
-        assertEquals(-10, copy.getSize().get(0));
-        assertEquals(-100, copy.getSize().get(1));
-        assertEquals(-1000, copy.getSize().get(2));
+        assertEquals(-10, copy.getLoadChange().get(0));
+        assertEquals(-100, copy.getLoadChange().get(1));
+        assertEquals(-1000, copy.getLoadChange().get(2));
         assertTrue(copy != deliver);
     }
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverShipmentTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverShipmentTest.java
index c76ada6ca..e4d5c80fa 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverShipmentTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverShipmentTest.java
@@ -43,9 +43,9 @@ public void doBefore() {
 
     @Test
     public void whenCallingCapacity_itShouldReturnCorrectCapacity() {
-        assertEquals(-10, deliver.getSize().get(0));
-        assertEquals(-100, deliver.getSize().get(1));
-        assertEquals(-1000, deliver.getSize().get(2));
+        assertEquals(-10, deliver.getLoadChange().get(0));
+        assertEquals(-100, deliver.getLoadChange().get(1));
+        assertEquals(-1000, deliver.getLoadChange().get(2));
     }
 
     @Test
@@ -81,9 +81,9 @@ public void whenCopyingStart_itShouldBeDoneCorrectly() {
         assertEquals(3., copy.getTheoreticalEarliestOperationStartTime(), 0.01);
         assertEquals(4., copy.getTheoreticalLatestOperationStartTime(), 0.01);
         assertEquals("deliveryLoc", copy.getLocation().getId());
-        assertEquals(-10, copy.getSize().get(0));
-        assertEquals(-100, copy.getSize().get(1));
-        assertEquals(-1000, copy.getSize().get(2));
+        assertEquals(-10, copy.getLoadChange().get(0));
+        assertEquals(-100, copy.getLoadChange().get(1));
+        assertEquals(-1000, copy.getLoadChange().get(2));
         assertTrue(copy != deliver);
     }
 
@@ -93,8 +93,8 @@ public void whenGettingCapacity_itShouldReturnItCorrectly() {
         Shipment shipment = Shipment.Builder.newInstance("s").setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).setDeliveryLocation(Location.newInstance("delLoc"))
             .addSizeDimension(0, 10).addSizeDimension(1, 100).build();
         PickupShipmentDEPRECATED pick = new PickupShipmentDEPRECATED(shipment);
-        assertEquals(10, pick.getSize().get(0));
-        assertEquals(100, pick.getSize().get(1));
+        assertEquals(10, pick.getLoadChange().get(0));
+        assertEquals(100, pick.getLoadChange().get(1));
     }
 
 }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/EndTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/EndTest.java
index c4257deeb..b3a727c53 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/EndTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/EndTest.java
@@ -27,7 +27,7 @@
     @Test
     public void whenCallingCapacity_itShouldReturnEmptyCapacity() {
         End end = End.newInstance("loc", 0., 0.);
-        assertEquals(0, end.getSize().get(0));
+        assertEquals(0, end.getLoadChange().get(0));
     }
 
     @Test
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupServiceTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupServiceTest.java
index 12f4f16e0..45128d278 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupServiceTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupServiceTest.java
@@ -43,9 +43,9 @@ public void doBefore() {
 
     @Test
     public void whenCallingCapacity_itShouldReturnCorrectCapacity() {
-        assertEquals(10, pickup.getSize().get(0));
-        assertEquals(100, pickup.getSize().get(1));
-        assertEquals(1000, pickup.getSize().get(2));
+        assertEquals(10, pickup.getLoadChange().get(0));
+        assertEquals(100, pickup.getLoadChange().get(1));
+        assertEquals(1000, pickup.getLoadChange().get(2));
     }
 
 
@@ -82,9 +82,9 @@ public void whenCopyingStart_itShouldBeDoneCorrectly() {
         assertEquals(1., copy.getTheoreticalEarliestOperationStartTime(), 0.01);
         assertEquals(2., copy.getTheoreticalLatestOperationStartTime(), 0.01);
         assertEquals("loc", copy.getLocation().getId());
-        assertEquals(10, copy.getSize().get(0));
-        assertEquals(100, copy.getSize().get(1));
-        assertEquals(1000, copy.getSize().get(2));
+        assertEquals(10, copy.getLoadChange().get(0));
+        assertEquals(100, copy.getLoadChange().get(1));
+        assertEquals(1000, copy.getLoadChange().get(2));
         assertTrue(copy != pickup);
     }
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupShipmentTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupShipmentTest.java
index f8331ecea..8e28c5b71 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupShipmentTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupShipmentTest.java
@@ -43,9 +43,9 @@ public void doBefore() {
 
     @Test
     public void whenCallingCapacity_itShouldReturnCorrectCapacity() {
-        assertEquals(10, pickup.getSize().get(0));
-        assertEquals(100, pickup.getSize().get(1));
-        assertEquals(1000, pickup.getSize().get(2));
+        assertEquals(10, pickup.getLoadChange().get(0));
+        assertEquals(100, pickup.getLoadChange().get(1));
+        assertEquals(1000, pickup.getLoadChange().get(2));
     }
 
     @Test
@@ -81,9 +81,9 @@ public void whenCopyingStart_itShouldBeDoneCorrectly() {
         assertEquals(1., copy.getTheoreticalEarliestOperationStartTime(), 0.01);
         assertEquals(2., copy.getTheoreticalLatestOperationStartTime(), 0.01);
         assertEquals("pickupLoc", copy.getLocation().getId());
-        assertEquals(10, copy.getSize().get(0));
-        assertEquals(100, copy.getSize().get(1));
-        assertEquals(1000, copy.getSize().get(2));
+        assertEquals(10, copy.getLoadChange().get(0));
+        assertEquals(100, copy.getLoadChange().get(1));
+        assertEquals(1000, copy.getLoadChange().get(2));
         assertTrue(copy != pickup);
     }
 
@@ -93,8 +93,8 @@ public void whenGettingCapacity_itShouldReturnItCorrectly() {
         Shipment shipment = Shipment.Builder.newInstance("s").setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).setDeliveryLocation(Location.newInstance("delLoc"))
             .addSizeDimension(0, 10).addSizeDimension(1, 100).build();
         PickupShipmentDEPRECATED pick = new PickupShipmentDEPRECATED(shipment);
-        assertEquals(10, pick.getSize().get(0));
-        assertEquals(100, pick.getSize().get(1));
+        assertEquals(10, pick.getLoadChange().get(0));
+        assertEquals(100, pick.getLoadChange().get(1));
     }
 
 }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityNEWTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityNEWTest.java
index 6c7b7490f..59a378e7b 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityNEWTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityNEWTest.java
@@ -44,9 +44,9 @@ public void doBefore() {
 
     @Test
     public void whenCallingCapacity_itShouldReturnCorrectCapacity() {
-        Assert.assertEquals(10, serviceActivity.getSize().get(0));
-        Assert.assertEquals(100, serviceActivity.getSize().get(1));
-        Assert.assertEquals(1000, serviceActivity.getSize().get(2));
+        Assert.assertEquals(10, serviceActivity.getLoadChange().get(0));
+        Assert.assertEquals(100, serviceActivity.getLoadChange().get(1));
+        Assert.assertEquals(1000, serviceActivity.getLoadChange().get(2));
     }
 
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/StartTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/StartTest.java
index 054f11617..c03818850 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/StartTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/StartTest.java
@@ -27,7 +27,7 @@
     @Test
     public void whenCallingCapacity_itShouldReturnEmptyCapacity() {
         Start start = Start.newInstance("loc", 0., 0.);
-        assertEquals(0, start.getSize().get(0));
+        assertEquals(0, start.getLoadChange().get(0));
     }
 
     @Test
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleProductsWithLoadConstraintExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleProductsWithLoadConstraintExample.java
index 5ebbe93c2..4caa00536 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleProductsWithLoadConstraintExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleProductsWithLoadConstraintExample.java
@@ -74,11 +74,11 @@ public ConstraintsStatus fulfilled(JobInsertionContext jobInsertionContext, Tour
         }
 
         private boolean isApplePickup(TourActivity act) {
-            return act.getSize().get(APPLES_DIMENSION_INDEX) > 0;
+            return act.getLoadChange().get(APPLES_DIMENSION_INDEX) > 0;
         }
 
         private boolean isBananaPickup(TourActivity act) {
-            return act.getSize().get(BANANAS_DIMENSION_INDEX) > 0;
+            return act.getLoadChange().get(BANANAS_DIMENSION_INDEX) > 0;
         }
     }
 
@@ -126,19 +126,19 @@ private boolean hasBananasInVehicle(SizeDimension loadAtPrevAct) {
         }
 
         private boolean isBananaPickup(TourActivity act) {
-            return act.getSize().get(BANANAS_DIMENSION_INDEX) > 0;
+            return act.getLoadChange().get(BANANAS_DIMENSION_INDEX) > 0;
         }
 
         private boolean isBananaDelivery(TourActivity act) {
-            return act.getSize().get(BANANAS_DIMENSION_INDEX) < 0;
+            return act.getLoadChange().get(BANANAS_DIMENSION_INDEX) < 0;
         }
 
         private boolean isApplePickup(TourActivity act) {
-            return act.getSize().get(APPLES_DIMENSION_INDEX) > 0;
+            return act.getLoadChange().get(APPLES_DIMENSION_INDEX) > 0;
         }
 
         private boolean isAppleDelivery(TourActivity act) {
-            return act.getSize().get(APPLES_DIMENSION_INDEX) < 0;
+            return act.getLoadChange().get(APPLES_DIMENSION_INDEX) < 0;
         }
 
         private boolean isPickup(TourActivity newAct) {
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/VRPWithBackhaulsExample2.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/VRPWithBackhaulsExample2.java
index 29c619368..7d8b0abae 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/VRPWithBackhaulsExample2.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/VRPWithBackhaulsExample2.java
@@ -158,7 +158,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
                 + analyser.getTimeWindowViolationAtActivity(route.getStart(), route));
             for (TourActivity act : route.getActivities()) {
                 System.out.println("--");
-                System.out.println("actType: " + act.getName() + " demand: " + act.getSize());
+                System.out.println("actType: " + act.getName() + " demand: " + act.getLoadChange());
                 System.out.println("dist@" + act.getLocation().getId() + ": " + analyser.getDistanceAtActivity(act, route));
                 System.out.println("load(before)@" + act.getLocation().getId() + ": " + analyser.getLoadJustBeforeActivity(act, route));
                 System.out.println("load(after)@" + act.getLocation().getId() + ": " + analyser.getLoadRightAfterActivity(act, route));
