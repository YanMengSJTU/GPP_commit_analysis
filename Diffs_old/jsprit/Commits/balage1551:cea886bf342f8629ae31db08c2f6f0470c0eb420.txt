diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/AbstractPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/AbstractPrinterColumn.java
index 97bbe74d3..4782129a5 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/AbstractPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/AbstractPrinterColumn.java
@@ -2,25 +2,54 @@
 
 import java.util.function.Consumer;
 
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition.Builder;
 
+/**
+ * Abstract base class for column definitions.
+ *
+ * @author balage
+ *
+ * @param <C>
+ *            The context the column works on
+ * @param <T>
+ *            The type of the data it emits
+ * @param <A>
+ *            The class itself (internal generic parameter: for inheritence and
+ *            builder pattern)
+ */
 public abstract class AbstractPrinterColumn<C extends PrinterContext, T, A extends AbstractPrinterColumn<C, T, A>> {
 
-    private Consumer<DynamicTableDefinition.ColumnDefinition.Builder> decorator;
+    // Decorator is a post creation callback to alter the behaviour of the
+    // column definition.
+    private Consumer<ColumnDefinition.Builder> decorator;
 
     private String title;
 
+    /**
+     * Constructor.
+     */
     public AbstractPrinterColumn() {
         this(null);
     }
 
-    public AbstractPrinterColumn(Consumer<Builder> decorator) {
+    /**
+     * @param decorator
+     *            Decorator is a post creation callback to alter the behaviour
+     *            of the column definition.
+     */
+    public AbstractPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super();
         this.decorator = decorator;
         this.title = getDefaultTitle();
     }
 
-    public DynamicTableDefinition.ColumnDefinition getColumnDefinition() {
+    /**
+     * Creates the column definition of the column.
+     *
+     * @return the decorated column definition.
+     */
+    public ColumnDefinition getColumnDefinition() {
         Builder builder = getColumnBuilder().withTitle(getTitle());
         if (decorator != null) {
             decorator.accept(builder);
@@ -28,26 +57,58 @@ public AbstractPrinterColumn(Consumer<Builder> decorator) {
         return builder.build();
     }
 
+    /**
+     * @return A title of the column.
+     */
     public String getTitle() {
         return title;
     }
 
+    /**
+     * @param title
+     *            the title of the column
+     * @return The object itself (fluent api)
+     */
     @SuppressWarnings("unchecked")
     public A withTitle(String title) {
         this.title = title;
         return (A) this;
     }
 
+    /**
+     * Decorator is a post creation callback to alter the behaviour of the
+     * column definition.
+     *
+     * @param decorator
+     *            The decorator.
+     * @return The object itself (fluent api)
+     */
     @SuppressWarnings("unchecked")
-    public A withDecorator(Consumer<DynamicTableDefinition.ColumnDefinition.Builder> decorator) {
+    public A withDecorator(Consumer<ColumnDefinition.Builder> decorator) {
         this.decorator = decorator;
         return (A) this;
     }
 
-    protected abstract DynamicTableDefinition.ColumnDefinition.Builder getColumnBuilder();
+    /**
+     * Returns the builder implementation of the corresponding column
+     * definition.
+     *
+     * @return The column definition builder.
+     */
+    protected abstract ColumnDefinition.Builder getColumnBuilder();
 
+    /**
+     * Extracts the data from the context.
+     *
+     * @param context
+     *            The context to process.
+     * @return The extracted data.
+     */
     public abstract T getData(C context);
 
+    /**
+     * @return the default title
+     */
     protected abstract String getDefaultTitle();
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/ConfigurableTablePrinter.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/ConfigurableTablePrinter.java
index c70b7bf2a..949b6cb8f 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/ConfigurableTablePrinter.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/ConfigurableTablePrinter.java
@@ -5,6 +5,7 @@
 import java.nio.CharBuffer;
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Collections;
 import java.util.List;
 import java.util.stream.Collectors;
 import java.util.stream.IntStream;
@@ -13,25 +14,54 @@
 import org.apache.commons.csv.CSVPrinter;
 import org.apache.commons.csv.QuoteMode;
 
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.Alignment;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnAlignment;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
 
 
 /**
+ * A text-base table formatter with extendible and configurable column set.
+ *
  * @author balage
  * @param <C>
+ *            The context the table formatter operates. When a new row of data
+ *            is being added, this context is passed to all column definitions
+ *            to create cell information.
  */
 public class ConfigurableTablePrinter<C extends PrinterContext> {
 
+    /**
+     * A row of the table.
+     *
+     * @author balage
+     *
+     */
     public class TableRow {
         private String row[] = new String[tableDef.size()];
+
+        // Used by add() function to determine the next column index.
         private int lastIndex = 0;
 
+        /**
+         * Constructor.
+         */
         public TableRow() {
             super();
             Arrays.fill(row, "");
         }
 
+        /**
+         * Sets the value of a cell in the row.
+         *
+         * @param index
+         *            The index of the cell.
+         * @param data
+         *            The data to be formatted.
+         * @return The table row itself.
+         * @throws IndexOutOfBoundsException
+         *             When the index is not valid.
+         * @throws ClassCastException
+         *             When the column doesn't accept the data provided.
+         */
         public TableRow set(int index, Object data) {
             if (index < 0 || index >= row.length) {
                 throw new IndexOutOfBoundsException("Invalid index: " + index);
@@ -50,26 +80,110 @@ public TableRow set(int index, Object data) {
             return this;
         }
 
+        /**
+         * Adds data for the next cell.
+         * <p>
+         * Note that calling the {@linkplain #set(int, Object)} doesn't alter
+         * the insertation point for this function.
+         * <p>
+         *
+         * @param data
+         *            The data to add.
+         * @return The table row itself (fluent api).
+         * @throws IndexOutOfBoundsException
+         *             When the index is not valid.
+         * @throws ClassCastException
+         *             When the column doesn't accept the data provided.
+         */
         public TableRow add(Object data) {
             return set(lastIndex++, data);
         }
 
+        /**
+         * Adds data for the next cell.
+         * <p>
+         * Note that calling the {@linkplain #set(int, Object)} doesn't alter
+         * the insertation point for this function.
+         * <p>
+         *
+         * @param data
+         *            The data to add.
+         * @return The table row itself (fluent api).
+         * @throws IndexOutOfBoundsException
+         *             When the index is not valid.
+         * @throws ClassCastException
+         *             When the column doesn't accept the data provided.
+         */
         public TableRow add(int data) {
             return add(new Integer(data));
         }
 
+        /**
+         * Adds data for the next cell.
+         * <p>
+         * Note that calling the {@linkplain #set(int, Object)} doesn't alter
+         * the insertation point for this function.
+         * <p>
+         *
+         * @param data
+         *            The data to add.
+         * @return The table row itself (fluent api).
+         * @throws IndexOutOfBoundsException
+         *             When the index is not valid.
+         * @throws ClassCastException
+         *             When the column doesn't accept the data provided.
+         */
         public TableRow add(long data) {
             return add(new Long(data));
         }
 
+        /**
+         * Adds data for the next cell.
+         * <p>
+         * Note that calling the {@linkplain #set(int, Object)} doesn't alter
+         * the insertation point for this function.
+         * <p>
+         *
+         * @param data
+         *            The data to add.
+         * @return The table row itself (fluent api).
+         * @throws IndexOutOfBoundsException
+         *             When the index is not valid.
+         * @throws ClassCastException
+         *             When the column doesn't accept the data provided.
+         */
         public TableRow add(double data) {
             return add(new Double(data));
         }
 
+        /**
+         * Adds data for the next cell.
+         * <p>
+         * Note that calling the {@linkplain #set(int, Object)} doesn't alter
+         * the insertation point for this function.
+         * <p>
+         *
+         * @param data
+         *            The data to add.
+         * @return The table row itself (fluent api).
+         * @throws IndexOutOfBoundsException
+         *             When the index is not valid.
+         * @throws ClassCastException
+         *             When the column doesn't accept the data provided.
+         */
         public TableRow add(boolean data) {
             return add(Boolean.valueOf(data));
         }
 
+        /**
+         * Returns the value of a cell.
+         *
+         * @param index
+         *            The index of the cell.
+         * @return The string representation of the cell.
+         * @throws IndexOutOfBoundsException
+         *             When the index is not valid.
+         */
         public String get(int index) {
             if (index < 0 || index >= row.length) {
                 throw new IndexOutOfBoundsException("Invalid index: " + index);
@@ -77,55 +191,104 @@ public String get(int index) {
             return row[index];
         }
 
+        /**
+         * @return Returns the unmodifiable data of the complete row.
+         */
         public List<String> getAll() {
-            return Arrays.asList(row);
+            return Collections.unmodifiableList(Arrays.asList(row));
         }
     }
 
+    /**
+     * Marker row for in-table separator line.
+     *
+     * @author balage
+     */
     private class Separator extends TableRow {
     }
 
+    // The column list
     private PrinterColumnList<C> columnList;
+    // The table definition
     private DynamicTableDefinition tableDef;
 
+    // The rows of the table
     List<TableRow> rows = new ArrayList<>();
 
+    /**
+     * Constructor.
+     *
+     * @param columnList
+     *            The list of the columns in the table.
+     */
     public ConfigurableTablePrinter(PrinterColumnList<C> columnList) {
         super();
         this.columnList = columnList;
         tableDef = columnList.getTableDefinition();
     }
 
+    /**
+     * Adds and populates a row.
+     *
+     * @param context
+     *            The context to use for row cell population.
+     */
     public void addRow(C context) {
         TableRow row = new TableRow();
         columnList.populateRow(row, context);
         rows.add(row);
     }
 
+    /**
+     * Adds an in-table separator line.
+     */
     public void addSeparator() {
         rows.add(new Separator());
     }
 
 
+    /**
+     * Repeats <code>c</code> <code>w</code> times.
+     *
+     * @param c
+     *            The character to repeat.
+     * @param w
+     *            The number of occurencies to repeat.
+     * @return A <code>w</code> long string containing <code>c</code>
+     *         characters.
+     */
     private String repeat(char c, int w) {
         return CharBuffer.allocate(w).toString().replace('\0', c);
     }
 
+    /**
+     * Prints the table into a string.
+     *
+     * @return The string representation of the table.
+     */
     public String print() {
         StringBuilder sb = new StringBuilder();
+        // Calculating width of each column
         int[] colWidth = calculateWidthInfo();
+
+        // The total width of the table: the sum of column width, plus the
+        // padding two times for each column, plus the vertical lines (column
+        // count plus one times)
         int totalWidth = colWidth.length * (tableDef.getPadding() * 2 + 1) + 1;
         for (int w : colWidth) {
             totalWidth += w;
         }
 
+        // Caching draw characters and padding size (for cleaner code)
         char corner = tableDef.getCorner();
         char horizontal = tableDef.getHorizontal();
         char vertical = tableDef.getVertical();
         int padding = tableDef.getPadding();
 
+        // Padding string
         String paddingChars = repeat(' ', padding);
 
+        // Build the line for the separator rows
         StringBuilder sbSep = new StringBuilder();
         sbSep.append(corner);
         for (int w : colWidth) {
@@ -134,22 +297,27 @@ public String print() {
         sbSep.append("\n");
         String separatorLine = sbSep.toString();
 
+        // Printing heading if defined
         if (tableDef.getHeading() != null) {
             sb.append(corner).append(repeat(horizontal, totalWidth - 2)).append(corner)
             .append("\n");
             sb.append(vertical).append(paddingChars)
-            .append(Alignment.LEFT.align(tableDef.getHeading(),
+            .append(ColumnAlignment.LEFT.align(tableDef.getHeading(),
                             totalWidth - 2 * padding - 2))
             .append(paddingChars)
             .append(vertical)
             .append("\n");
         }
 
+        // Adding a separator line (either as the top line of the table or to
+        // separate heading)
         sb.append(separatorLine);
+
+        // Printing header line
         sb.append(vertical);
         for (int i = 0; i < tableDef.size(); i++) {
             ColumnDefinition cd = tableDef.getColumns().get(i);
-            sb.append(paddingChars).append(Alignment.LEFT.align(cd.getTitle(), colWidth[i]))
+            sb.append(paddingChars).append(ColumnAlignment.LEFT.align(cd.getTitle(), colWidth[i]))
             .append(paddingChars).append(vertical);
         }
         sb.append("\n");
@@ -157,8 +325,10 @@ public String print() {
 
         for(TableRow row : rows) {
             if (row instanceof ConfigurableTablePrinter.Separator) {
+                // Adding separator line
                 sb.append(separatorLine);
             } else {
+                // Printing a line
                 sb.append(vertical);
                 for (int i = 0; i < tableDef.size(); i++) {
                     ColumnDefinition cd = tableDef.getColumns().get(i);
@@ -168,14 +338,22 @@ public String print() {
                 sb.append("\n");
             }
         }
+        // Closing the table
         sb.append(separatorLine);
 
         return sb.toString();
     }
 
+    /**
+     * Calculates width of each column.
+     *
+     * @return The width info for the table.
+     */
     private int[] calculateWidthInfo() {
         int colWidth[] = new int[tableDef.size()];
+        // For each column
         IntStream.range(0, tableDef.size()).forEach(i -> {
+            // Calculate maximum data width
             int max = rows.stream()
                             .filter(r -> r instanceof ConfigurableTablePrinter.TableRow)
                             .map(r -> r.get(i))
@@ -183,49 +361,89 @@ public String print() {
                             .mapToInt(d -> d.length())
                             .max().orElse(0);
             ColumnDefinition colDef = tableDef.getColumns().get(i);
+            // The width will be the max data or title with, bounded by the min
+            // and/or max column width constraints.
             colWidth[i] = Math.max(colDef.getTitle().length(),
                             Math.max(colDef.getMinWidth(), Math.min(colDef.getMaxWidth(), max)));
         });
         return colWidth;
     }
 
+    /**
+     * CSV export configuration.
+     *
+     * @author balage
+     *
+     */
     public static class CsvConfig {
         private char delimiter = ';';
         private char quote = '\"';
         private char escape = '\\';
         private boolean printHeader = true;
 
+        /**
+         * @return the delimeter character (cell separator)
+         */
         public char getDelimiter() {
             return delimiter;
         }
 
+        /**
+         * @param delimiter
+         *            the delimeter character (cell separator)
+         * @return The config itself (fluent api)
+         */
         public CsvConfig withDelimiter(char delimiter) {
             this.delimiter = delimiter;
             return this;
         }
 
+        /**
+         * @return the quote character
+         */
         public char getQuote() {
             return quote;
         }
 
+        /**
+         * @param quote
+         *            the quote character
+         * @return The config itself (fluent api)
+         */
         public CsvConfig withQuote(char quote) {
             this.quote = quote;
             return this;
         }
 
+        /**
+         * @return the escape character
+         */
         public char getEscape() {
             return escape;
         }
 
+        /**
+         * @param escape
+         *            the escape character
+         * @return The config itself (fluent api)
+         */
         public CsvConfig withEscape(char escape) {
             this.escape = escape;
             return this;
         }
 
+        /**
+         * @return whether to print header line
+         */
         public boolean isPrintHeader() {
             return printHeader;
         }
 
+        /**
+         * @param printHeader
+         *            whether to print header line
+         * @return The config itself (fluent api)
+         */
         public CsvConfig withPrintHeader(boolean printHeader) {
             this.printHeader = printHeader;
             return this;
@@ -233,6 +451,13 @@ public CsvConfig withPrintHeader(boolean printHeader) {
 
     }
 
+    /**
+     * Exports the data of the table into a CSV formatted string
+     *
+     * @param config
+     *            The configuration of the CSV formatting.
+     * @return The data in CSV format
+     */
     public String exportToCsv(CsvConfig config) {
         CSVFormat format = CSVFormat.DEFAULT
                         .withDelimiter(config.delimiter)
@@ -242,9 +467,11 @@ public String exportToCsv(CsvConfig config) {
 
         StringWriter sw = new StringWriter();
         try (CSVPrinter printer = new CSVPrinter(sw, format)) {
-            printer.printRecord(columnList.getColumns().stream()
-                            .map(c -> c.getColumnDefinition().getTitle())
-                            .collect(Collectors.toList()));
+            if (config.isPrintHeader()) {
+                printer.printRecord(columnList.getColumns().stream()
+                                .map(c -> c.getColumnDefinition().getTitle())
+                                .collect(Collectors.toList()));
+            }
             for(TableRow r : rows) {
                 if (!(r instanceof ConfigurableTablePrinter.Separator)) {
                     printer.printRecord(r.getAll());
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/DynamicTableDefinition.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/DynamicTableDefinition.java
index 73c02bee5..401fe2af3 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/DynamicTableDefinition.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/DynamicTableDefinition.java
@@ -4,304 +4,22 @@
 import java.util.Collections;
 import java.util.List;
 
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
+
 /**
+ * Table definition form dynamic table printers (both implementations)
+ *
  * @author balage
+ * @see {@linkplain DynamicTablePrinter}
+ * @see {@linkplain ConfigurableTablePrinter}
  */
 public class DynamicTableDefinition {
 
-    public static interface ColumnType<T> {
-        public String convert(Object data);
-
-        public boolean accepts(Object data);
-    }
-
-    public static abstract class AbstractColumnType<T> implements ColumnType<T> {
-
-        private String nullValue = "";
-
-
-        public AbstractColumnType() {
-            super();
-        }
-
-        public AbstractColumnType(String nullValue) {
-            super();
-            this.nullValue = nullValue;
-        }
-
-        @SuppressWarnings("unchecked")
-        @Override
-        public String convert(Object data) {
-            if (data == null) {
-                return nullValue;
-            } else {
-                if (accepts(data)) {
-                    return convertNotNull((T) data);
-                } else {
-                    throw new ClassCastException();
-                }
-            }
-        }
-
-        protected abstract String convertNotNull(T data);
-    }
-
-    public static class StringColumnType extends AbstractColumnType<Object> {
-
-        public StringColumnType() {
-            super();
-        }
-
-        public StringColumnType(String nullValue) {
-            super(nullValue);
-        }
-
-        @Override
-        protected String convertNotNull(Object data) {
-            return data.toString();
-        }
-
-        @Override
-        public boolean accepts(Object data) {
-            return true;
-        }
-
-    }
-
-    public static class IntColumnType extends AbstractColumnType<Integer> {
-
-        public IntColumnType() {
-            super();
-        }
-
-        public IntColumnType(String nullValue) {
-            super(nullValue);
-        }
-
-        @Override
-        protected String convertNotNull(Integer data) {
-            return data.toString();
-        }
-
-        @Override
-        public boolean accepts(Object data) {
-            return data instanceof Integer;
-        }
-
-    }
-
-    public static class LongColumnType extends AbstractColumnType<Long> {
-
-        public LongColumnType() {
-            super();
-        }
-
-        public LongColumnType(String nullValue) {
-            super(nullValue);
-        }
-
-        @Override
-        protected String convertNotNull(Long data) {
-            return data.toString();
-        }
-
-        @Override
-        public boolean accepts(Object data) {
-            return data instanceof Long;
-        }
-
-
-    }
-
-    public static class DoubleColumnType extends AbstractColumnType<Double> {
-
-        private int decimals = 2;
-
-        public DoubleColumnType() {
-            super();
-        }
-
-        public DoubleColumnType(String nullValue) {
-            super(nullValue);
-        }
-
-        public DoubleColumnType(int decimals) {
-            super();
-            this.decimals = decimals;
-        }
-
-        public DoubleColumnType(String nullValue, int decimals) {
-            super(nullValue);
-            this.decimals = decimals;
-        }
-
-        @Override
-        protected String convertNotNull(Double data) {
-            return String.format("%50." + decimals + "f", data).trim();
-        }
-
-        @Override
-        public boolean accepts(Object data) {
-            return data instanceof Double;
-        }
-
-
-    }
-
-
-    public static class BooleanColumnType extends AbstractColumnType<Boolean> {
-        private String trueValue = "true";
-        private String falseValue = "false";
-
-        public BooleanColumnType() {
-            super();
-        }
-
-        public BooleanColumnType(String nullValue) {
-            super(nullValue);
-        }
-
-        public BooleanColumnType(String trueValue, String falseValue) {
-            super();
-            this.trueValue = trueValue;
-            this.falseValue = falseValue;
-        }
-
-        public BooleanColumnType(String trueValue, String falseValue, String nullValue) {
-            super(nullValue);
-            this.trueValue = trueValue;
-            this.falseValue = falseValue;
-        }
-
-        @Override
-        protected String convertNotNull(Boolean data) {
-            return data ? trueValue : falseValue;
-        }
-
-        @Override
-        public boolean accepts(Object data) {
-            return data instanceof Boolean;
-        }
-    }
-
-    public enum Alignment {
-        LEFT {
-
-            @Override
-            public String align(String data, int width) {
-                if (data.length() > width) {
-                    return data.substring(0, width);
-                }
-                return String.format("%1$-" + width + "s", data);
-            }
-
-        }, RIGHT {
-
-            @Override
-            public String align(String data, int width) {
-                if (data.length() > width) {
-                    return data.substring(0, width);
-                }
-                return String.format("%1$" + width + "s", data);
-            }
-
-        }, CENTER {
-            @Override
-            public String align(String data, int width) {
-                if (data.length() > width) {
-                    return data.substring(0, width);
-                }
-                int leftPad = (width - data.length())/2;
-                return LEFT.align(RIGHT.align(data, width-leftPad), width);
-            }
-        };
-
-        public abstract String align(String data, int width);
-    }
-
-    public static class ColumnDefinition {
-
-        public static class Builder {
-            private ColumnType<?> type;
-            private String title;
-            private int minWidth = 0;
-            private int maxWidth = Integer.MAX_VALUE;
-            private Alignment alignment = Alignment.LEFT;
-
-            public Builder(ColumnType<?> type, String title) {
-                super();
-                this.type = type;
-                this.title = title;
-            }
-
-            public Builder(ColumnType<?> type) {
-                super();
-                this.type = type;
-            }
-
-            public Builder withTitle(String title) {
-                this.title = title;
-                return this;
-            }
-
-            public Builder withMinWidth(int minWidth) {
-                this.minWidth = minWidth;
-                return this;
-            }
-
-            public Builder withMaxWidth(int maxWidth) {
-                this.maxWidth = maxWidth;
-                return this;
-            }
-
-            public Builder withAlignment(Alignment alignment) {
-                this.alignment = alignment;
-                return this;
-            }
-
-            public ColumnDefinition build() {
-                return new ColumnDefinition(this);
-            }
-
-        }
-
-        private ColumnType<?> type;
-        private String title;
-        private int minWidth = 0;
-        private int maxWidth = Integer.MAX_VALUE;
-        private Alignment alignment = Alignment.LEFT;
-
-        private ColumnDefinition(Builder builder) {
-            type = builder.type;
-            title = builder.title;
-            minWidth = builder.minWidth;
-            maxWidth = builder.maxWidth;
-            alignment = builder.alignment;
-        }
-
-        public ColumnType<?> getType() {
-            return type;
-        }
-
-        public String getTitle() {
-            return title;
-        }
-
-        public int getMinWidth() {
-            return minWidth;
-        }
-
-        public int getMaxWidth() {
-            return maxWidth;
-        }
-
-        public Alignment getAlignment() {
-            return alignment;
-        }
-
-    }
-
-
+    /**
+     * Builder for the table definition.
+     *
+     * @author balage
+     */
     public static class Builder {
         private char corner = '+';
         private char vertical = '|';
@@ -312,36 +30,73 @@ public Alignment getAlignment() {
 
         private int padding = 1;
 
+        /**
+         * @param corner
+         *            The corner (where vertical and horizontal lines meet)
+         *            character.
+         * @return the builder
+         */
         public Builder withCorner(char corner) {
             this.corner = corner;
             return this;
         }
 
+        /**
+         * @param vertical
+         *            The vertical line character.
+         * @return the builder
+         */
         public Builder withVertical(char vertical) {
             this.vertical = vertical;
             return this;
         }
 
+        /**
+         * @param horizontal
+         *            The horizontal line character.
+         * @return the builder
+         */
         public Builder withHorizontal(char horizontal) {
             this.horizontal = horizontal;
             return this;
         }
 
+        /**
+         * @param heading
+         *            The heading text of the table. If not defined or null
+         *            specified, no heading will be printed.
+         * @return the builder
+         */
         public Builder withHeading(String heading) {
             this.heading = heading;
             return this;
         }
 
+        /**
+         * Adds a column for the table definition.
+         *
+         * @param column
+         *            The column definition to add.
+         * @return the builder
+         */
         public Builder addColumn(ColumnDefinition column) {
             columns.add(column);
             return this;
         }
 
+        /**
+         * @param padding
+         *            The padding size of the table.
+         * @return the builder
+         */
         public Builder withPadding(int padding) {
             this.padding = Math.max(0, padding);
             return this;
         }
 
+        /**
+         * @return The imutable table definition object.
+         */
         public DynamicTableDefinition build() {
             return new DynamicTableDefinition(this);
         }
@@ -357,6 +112,12 @@ public DynamicTableDefinition build() {
 
     private int padding = 1;
 
+    /**
+     * Private constructor for builder.
+     *
+     * @param builder
+     *            the builder to initialize from.
+     */
     private DynamicTableDefinition(Builder builder) {
         corner = builder.corner;
         vertical = builder.vertical;
@@ -366,30 +127,51 @@ private DynamicTableDefinition(Builder builder) {
         padding = builder.padding;
     }
 
+    /**
+     * @return the corner (where vertical and horizontal lines meet) character.
+     */
     public char getCorner() {
         return corner;
     }
 
+    /**
+     * @return the character for vertical line
+     */
     public char getVertical() {
         return vertical;
     }
 
+    /**
+     * @return the character for horizontal line
+     */
     public char getHorizontal() {
         return horizontal;
     }
 
+    /**
+     * @return the heading text
+     */
     public String getHeading() {
         return heading;
     }
 
+    /**
+     * @return the unmodifiable column list
+     */
     public List<ColumnDefinition> getColumns() {
-        return columns;
+        return Collections.unmodifiableList(columns);
     }
 
+    /**
+     * @return the padding size
+     */
     public int getPadding() {
         return padding;
     }
 
+    /**
+     * @return The number of columns.
+     */
     public int size() {
         return columns.size();
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/DynamicTablePrinter.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/DynamicTablePrinter.java
index 59abfdfb1..bfa4a32d7 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/DynamicTablePrinter.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/DynamicTablePrinter.java
@@ -6,10 +6,10 @@
 import java.util.List;
 import java.util.stream.IntStream;
 
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.Alignment;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.DoubleColumnType;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.StringColumnType;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnAlignment;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
+import com.graphhopper.jsprit.core.reporting.columndefinition.DoubleColumnType;
+import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
 
 /**
  * @author balage
@@ -124,7 +124,7 @@ public String print() {
             sb.append(corner).append(repeat(horizontal, totalWidth - 2)).append(corner)
             .append("\n");
             sb.append(vertical).append(paddingChars)
-            .append(Alignment.LEFT.align(tableDef.getHeading(),
+            .append(ColumnAlignment.LEFT.align(tableDef.getHeading(),
                             totalWidth - 2 * padding - 2))
             .append(paddingChars)
             .append(vertical)
@@ -135,7 +135,7 @@ public String print() {
         sb.append(vertical);
         for (int i = 0; i < tableDef.size(); i++) {
             ColumnDefinition cd = tableDef.getColumns().get(i);
-            sb.append(paddingChars).append(Alignment.LEFT.align(cd.getTitle(), colWidth[i]))
+            sb.append(paddingChars).append(ColumnAlignment.LEFT.align(cd.getTitle(), colWidth[i]))
             .append(paddingChars).append(vertical);
         }
         sb.append("\n");
@@ -182,11 +182,11 @@ public static void main(String[] args) {
                                         .build())
                         .addColumn(new ColumnDefinition.Builder(new StringColumnType(),
                                         "right-string")
-                                        .withAlignment(Alignment.CENTER).build())
+                                        .withAlignment(ColumnAlignment.CENTER).build())
                         .addColumn(new ColumnDefinition.Builder(new DoubleColumnType(),
                                         "double")
                                         .withMinWidth(10)
-                                        .withAlignment(Alignment.RIGHT).build())
+                                        .withAlignment(ColumnAlignment.RIGHT).build())
                         .build();
 
         DynamicTablePrinter p = new DynamicTablePrinter(td);
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/PrinterColumnList.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/PrinterColumnList.java
index 27f548c5a..3644c7e1b 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/PrinterColumnList.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/PrinterColumnList.java
@@ -6,23 +6,52 @@
 import java.util.Optional;
 import java.util.stream.Collectors;
 
+import com.graphhopper.jsprit.core.reporting.ConfigurableTablePrinter.TableRow;
 import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.Builder;
 
+/**
+ * The list of the printer columns. This helps the user to construct, manage and
+ * alter the column definitions. Also this function populates the
+ * {@linkplain TableRow}.
+ *
+ * @author balage
+ *
+ * @param <C>
+ *            The context the colums
+ */
 public class PrinterColumnList<C extends PrinterContext> {
 
+    // The heading line
     private String heading = null;
 
+    // The list of the columns
     private List<AbstractPrinterColumn<C, ?, ?>> columns = new ArrayList<>();
 
+    /**
+     * The constructor to create a table without heading.
+     */
     public PrinterColumnList() {
         super();
     }
 
+    /**
+     * Constructor to create with heading text.
+     *
+     * @param heading
+     *            The heading text.
+     */
     public PrinterColumnList(String heading) {
         super();
         this.heading = heading;
     }
 
+    /**
+     * Adds a column to the column list.
+     *
+     * @param column
+     *            The column to add.
+     * @return The object itself (fluent api)
+     */
     public PrinterColumnList<C> addColumn(AbstractPrinterColumn<C, ?,?> column) {
         if (findByTitle(column.getTitle()).isPresent()) {
             throw new IllegalArgumentException("Name is duplicated: " + column.getTitle());
@@ -32,6 +61,18 @@ public PrinterColumnList(String heading) {
         return this;
     }
 
+    /**
+     * Removes a column.
+     * <p>
+     * Requires the exact column instance that was added- Use the
+     * {@linkplain #findByClass(Class)} or {@linkplain #findByTitle(String)}
+     * functions to get the instance.
+     * </p>
+     *
+     * @param column
+     *            the column to remove.
+     * @return true if the column was found and removed
+     */
     public boolean removeColumn(AbstractPrinterColumn<C, ?, ?> column) {
         boolean res = columns.contains(column);
         if (res) {
@@ -40,6 +81,11 @@ public boolean removeColumn(AbstractPrinterColumn<C, ?, ?> column) {
         return res;
     }
 
+    /**
+     * Builds the table definition from the column list and other parameters.
+     *
+     * @return the table definition
+     */
     public DynamicTableDefinition getTableDefinition() {
         Builder defBuilder = new DynamicTableDefinition.Builder();
         columns.forEach(c -> defBuilder.addColumn(c.getColumnDefinition()));
@@ -47,27 +93,70 @@ public DynamicTableDefinition getTableDefinition() {
         return defBuilder.build();
     }
 
-    public void populateRow(ConfigurableTablePrinter<C>.TableRow row, C context) {
+    /**
+     * Populates a table row with the data extracted from the context and
+     * formatted by the column definition.
+     *
+     * @param row
+     *            The row to populate. The row must match the column definition.
+     * @param context
+     *            The context to work on
+     */
+    void populateRow(ConfigurableTablePrinter<C>.TableRow row, C context) {
         columns.forEach(c -> row.add(c.getData(context)));
     }
 
+    /**
+     * @return unmodifiable list of columns
+     */
     public List<AbstractPrinterColumn<C, ?,?>> getColumns() {
         return Collections.unmodifiableList(columns);
     }
 
+    /**
+     * @return the heading text. Null means there will be no heading.
+     */
     public String getHeading() {
         return heading;
     }
 
+    /**
+     * @param heading
+     *            The new heading text or null to remove heading.
+     * @return The object itself (fluent api)
+     */
     public PrinterColumnList<C> withHeading(String heading) {
         this.heading = heading;
         return this;
     }
 
+    /**
+     * Finds the columns with the type given.
+     * <p>
+     * A table could contain more columns of the same type, so this function
+     * returns all matching columns.
+     * </p>
+     * <p>
+     * Note that this function intentially uses
+     * <code>getClass().equals(clazz)</code> instead of <code>instanceof</code>,
+     * so only the exact matches are returned. Columns of inherited classes are
+     * not returned.
+     *
+     * @param clazz
+     *            The class to look for
+     * @return The list of all the columns with the type
+     */
     public List<AbstractPrinterColumn<C, ?, ?>> findByClass(Class<? extends AbstractPrinterColumn<C, ?,?>> clazz) {
         return columns.stream().filter(c -> c.getClass().equals(clazz)).collect(Collectors.toList());
     }
 
+    /**
+     * Returns the column with the title.
+     * 
+     * @param title
+     *            The title to look for
+     * @return The column definition if there is any match
+     */
     public Optional<AbstractPrinterColumn<C, ?, ?>> findByTitle(String title) {
         return columns.stream().filter(c -> c.getTitle().equals(title)).findAny();
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/PrinterContext.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/PrinterContext.java
index 323aeb8d5..58521bd8b 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/PrinterContext.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/PrinterContext.java
@@ -1,4 +1,10 @@
 package com.graphhopper.jsprit.core.reporting;
 
-public class PrinterContext {
+/**
+ * Common marker interface of printer contexts
+ *
+ * @author balage
+ *
+ */
+public interface PrinterContext {
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java
index 901dbf952..1f6640032 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java
@@ -32,9 +32,10 @@
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.reporting.ConfigurableTablePrinter.CsvConfig;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.StringColumnType;
-import com.graphhopper.jsprit.core.reporting.SolutionPrintColumnLists.PredefinedList;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
+import com.graphhopper.jsprit.core.reporting.columndefinition.SolutionPrintColumnLists;
+import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
+import com.graphhopper.jsprit.core.reporting.columndefinition.SolutionPrintColumnLists.PredefinedList;
 import com.graphhopper.jsprit.core.reporting.route.RoutePrinterContext;
 
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/AbstractColumnType.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/AbstractColumnType.java
new file mode 100644
index 000000000..6a07a2cb0
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/AbstractColumnType.java
@@ -0,0 +1,63 @@
+package com.graphhopper.jsprit.core.reporting.columndefinition;
+
+/**
+ * Common abstract ancestor for column types.
+ *
+ * @author balage
+ *
+ * @param <T>
+ *            The type it accepts.
+ */
+public abstract class AbstractColumnType<T> implements ColumnType<T> {
+
+    // The string to used as null value
+    private String nullValue = "";
+
+    public AbstractColumnType() {
+        super();
+    }
+
+    /**
+     * @param nullValue
+     *            alternative null value
+     */
+    public AbstractColumnType(String nullValue) {
+        super();
+        this.nullValue = nullValue;
+    }
+
+    /**
+     * {@inheritDoc}
+     *
+     * This basic implementation takes the burden to handle null values and
+     * calls the {@linkplain #convertNotNull(Object)} for all other values.
+     *
+     * @see com.graphhopper.jsprit.core.reporting.columndefinition.ColumnType#convert(java.lang.Object)
+     *
+     * @throws ClassCastException
+     *             if the data is not accepted by the column type.
+     */
+    @SuppressWarnings("unchecked")
+    @Override
+    public String convert(Object data) {
+        if (data == null) {
+            return nullValue;
+        } else {
+            if (accepts(data)) {
+                return convertNotNull((T) data);
+            } else {
+                throw new ClassCastException();
+            }
+        }
+    }
+
+    /**
+     * Converts the data into String. This function never gets null as
+     * parameter.
+     *
+     * @param data
+     *            the non-null data to convert.
+     * @return The converted data.
+     */
+    protected abstract String convertNotNull(T data);
+}
\ No newline at end of file
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/BooleanColumnType.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/BooleanColumnType.java
new file mode 100644
index 000000000..64e762bac
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/BooleanColumnType.java
@@ -0,0 +1,36 @@
+package com.graphhopper.jsprit.core.reporting.columndefinition;
+
+public class BooleanColumnType extends AbstractColumnType<Boolean> {
+    private String trueValue = "true";
+    private String falseValue = "false";
+
+    public BooleanColumnType() {
+        super();
+    }
+
+    public BooleanColumnType(String nullValue) {
+        super(nullValue);
+    }
+
+    public BooleanColumnType(String trueValue, String falseValue) {
+        super();
+        this.trueValue = trueValue;
+        this.falseValue = falseValue;
+    }
+
+    public BooleanColumnType(String trueValue, String falseValue, String nullValue) {
+        super(nullValue);
+        this.trueValue = trueValue;
+        this.falseValue = falseValue;
+    }
+
+    @Override
+    protected String convertNotNull(Boolean data) {
+        return data ? trueValue : falseValue;
+    }
+
+    @Override
+    public boolean accepts(Object data) {
+        return data instanceof Boolean;
+    }
+}
\ No newline at end of file
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/ColumnAlignment.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/ColumnAlignment.java
new file mode 100644
index 000000000..c4d405c15
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/ColumnAlignment.java
@@ -0,0 +1,36 @@
+package com.graphhopper.jsprit.core.reporting.columndefinition;
+
+public enum ColumnAlignment {
+    LEFT {
+
+        @Override
+        public String align(String data, int width) {
+            if (data.length() > width) {
+                return data.substring(0, width);
+            }
+            return String.format("%1$-" + width + "s", data);
+        }
+
+    }, RIGHT {
+
+        @Override
+        public String align(String data, int width) {
+            if (data.length() > width) {
+                return data.substring(0, width);
+            }
+            return String.format("%1$" + width + "s", data);
+        }
+
+    }, CENTER {
+        @Override
+        public String align(String data, int width) {
+            if (data.length() > width) {
+                return data.substring(0, width);
+            }
+            int leftPad = (width - data.length())/2;
+            return LEFT.align(RIGHT.align(data, width-leftPad), width);
+        }
+    };
+
+    public abstract String align(String data, int width);
+}
\ No newline at end of file
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/ColumnDefinition.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/ColumnDefinition.java
new file mode 100644
index 000000000..2deabb14d
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/ColumnDefinition.java
@@ -0,0 +1,83 @@
+package com.graphhopper.jsprit.core.reporting.columndefinition;
+
+public class ColumnDefinition {
+
+    public static class Builder {
+        private ColumnType<?> type;
+        private String title;
+        private int minWidth = 0;
+        private int maxWidth = Integer.MAX_VALUE;
+        private ColumnAlignment alignment = ColumnAlignment.LEFT;
+
+        public Builder(ColumnType<?> type, String title) {
+            super();
+            this.type = type;
+            this.title = title;
+        }
+
+        public Builder(ColumnType<?> type) {
+            super();
+            this.type = type;
+        }
+
+        public ColumnDefinition.Builder withTitle(String title) {
+            this.title = title;
+            return this;
+        }
+
+        public ColumnDefinition.Builder withMinWidth(int minWidth) {
+            this.minWidth = minWidth;
+            return this;
+        }
+
+        public ColumnDefinition.Builder withMaxWidth(int maxWidth) {
+            this.maxWidth = maxWidth;
+            return this;
+        }
+
+        public ColumnDefinition.Builder withAlignment(ColumnAlignment alignment) {
+            this.alignment = alignment;
+            return this;
+        }
+
+        public ColumnDefinition build() {
+            return new ColumnDefinition(this);
+        }
+
+    }
+
+    private ColumnType<?> type;
+    private String title;
+    private int minWidth = 0;
+    private int maxWidth = Integer.MAX_VALUE;
+    private ColumnAlignment alignment = ColumnAlignment.LEFT;
+
+    private ColumnDefinition(ColumnDefinition.Builder builder) {
+        type = builder.type;
+        title = builder.title;
+        minWidth = builder.minWidth;
+        maxWidth = builder.maxWidth;
+        alignment = builder.alignment;
+    }
+
+    public ColumnType<?> getType() {
+        return type;
+    }
+
+    public String getTitle() {
+        return title;
+    }
+
+    public int getMinWidth() {
+        return minWidth;
+    }
+
+    public int getMaxWidth() {
+        return maxWidth;
+    }
+
+    public ColumnAlignment getAlignment() {
+        return alignment;
+    }
+
+}
\ No newline at end of file
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/ColumnType.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/ColumnType.java
new file mode 100644
index 000000000..4a7b5e48a
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/ColumnType.java
@@ -0,0 +1,30 @@
+package com.graphhopper.jsprit.core.reporting.columndefinition;
+
+/**
+ * Column type.
+ *
+ * @author balage
+ *
+ * @param <T>
+ *            The object type it accepts.
+ */
+public interface ColumnType<T> {
+    /**
+     * Converts the data into String.
+     * 
+     * @param data
+     *            the data to convert.
+     * @return The converted data.
+     */
+    public String convert(Object data);
+
+    /**
+     * Checks if the given data is acceptable for the type. (Mostly by class
+     * type.)
+     * 
+     * @param data
+     *            the data to check
+     * @return True if the data can be converted by this implementation.
+     */
+    public boolean accepts(Object data);
+}
\ No newline at end of file
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/DoubleColumnType.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/DoubleColumnType.java
new file mode 100644
index 000000000..9edbd9f1a
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/DoubleColumnType.java
@@ -0,0 +1,36 @@
+package com.graphhopper.jsprit.core.reporting.columndefinition;
+
+public class DoubleColumnType extends AbstractColumnType<Double> {
+
+    private int decimals = 2;
+
+    public DoubleColumnType() {
+        super();
+    }
+
+    public DoubleColumnType(String nullValue) {
+        super(nullValue);
+    }
+
+    public DoubleColumnType(int decimals) {
+        super();
+        this.decimals = decimals;
+    }
+
+    public DoubleColumnType(String nullValue, int decimals) {
+        super(nullValue);
+        this.decimals = decimals;
+    }
+
+    @Override
+    protected String convertNotNull(Double data) {
+        return String.format("%50." + decimals + "f", data).trim();
+    }
+
+    @Override
+    public boolean accepts(Object data) {
+        return data instanceof Double;
+    }
+
+
+}
\ No newline at end of file
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/IntColumnType.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/IntColumnType.java
new file mode 100644
index 000000000..5e7ea4af6
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/IntColumnType.java
@@ -0,0 +1,23 @@
+package com.graphhopper.jsprit.core.reporting.columndefinition;
+
+public class IntColumnType extends AbstractColumnType<Integer> {
+
+    public IntColumnType() {
+        super();
+    }
+
+    public IntColumnType(String nullValue) {
+        super(nullValue);
+    }
+
+    @Override
+    protected String convertNotNull(Integer data) {
+        return data.toString();
+    }
+
+    @Override
+    public boolean accepts(Object data) {
+        return data instanceof Integer;
+    }
+
+}
\ No newline at end of file
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/LongColumnType.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/LongColumnType.java
new file mode 100644
index 000000000..168e58751
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/LongColumnType.java
@@ -0,0 +1,24 @@
+package com.graphhopper.jsprit.core.reporting.columndefinition;
+
+public class LongColumnType extends AbstractColumnType<Long> {
+
+    public LongColumnType() {
+        super();
+    }
+
+    public LongColumnType(String nullValue) {
+        super(nullValue);
+    }
+
+    @Override
+    protected String convertNotNull(Long data) {
+        return data.toString();
+    }
+
+    @Override
+    public boolean accepts(Object data) {
+        return data instanceof Long;
+    }
+
+
+}
\ No newline at end of file
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrintColumnLists.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/SolutionPrintColumnLists.java
similarity index 75%
rename from jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrintColumnLists.java
rename to jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/SolutionPrintColumnLists.java
index 48af6f2ec..83ead82b2 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrintColumnLists.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/SolutionPrintColumnLists.java
@@ -1,9 +1,11 @@
-package com.graphhopper.jsprit.core.reporting;
+package com.graphhopper.jsprit.core.reporting.columndefinition;
 
 import java.util.ArrayList;
 import java.util.EnumMap;
 import java.util.List;
 
+import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
+import com.graphhopper.jsprit.core.reporting.PrinterColumnList;
 import com.graphhopper.jsprit.core.reporting.route.ActivityCostPrinterColumn;
 import com.graphhopper.jsprit.core.reporting.route.ActivityDurationPrinterColumn;
 import com.graphhopper.jsprit.core.reporting.route.ActivityLoadChangePrinterColumn;
@@ -29,49 +31,35 @@
 import com.graphhopper.jsprit.core.reporting.route.VehicleNamePrinterColumn;
 import com.graphhopper.jsprit.core.reporting.route.WaitingDurationPrinterColumn;
 
+/**
+ * Utility class to provide predefined column lists for Solution printing.
+ *
+ * @author balage
+ *
+ */
 public class SolutionPrintColumnLists {
 
-
+    /**
+     * The predefined column sets.
+     *
+     * @author balage
+     *
+     */
     public enum PredefinedList {
-        MINIMAL, DEFAULT, VERBOSE
+        /**
+         * A minimal column set.
+         */
+        MINIMAL,
+        /**
+         * A general, most often used column set.
+         */
+        DEFAULT,
+        /**
+         * A verbose column set containing all columns.
+         */
+        VERBOSE
     }
 
-    // .addColumn(new RouteNumberPrinterColumn())
-    // .addColumn(new VehicleNamePrinterColumn())
-    // .addColumn(new ActivityTypePrinterColumn())
-    // .addColumn(new JobNamePrinterColumn(b -> b.withMinWidth(10)))
-    // .addColumn(new JobTypePrinterColumn())
-    // .addColumn(new JobPriorityPrinterColumn())
-    // .addColumn(new ActivityLoadChangePrinterColumn())
-    // .addColumn(new RouteLoadPrinterColumn())
-    // .addColumn(new LoacationPrinterColumn())
-    // .addColumn(new OperationDurationPrinterColumn())
-    // .addColumn(new OperationDurationPrinterColumn().asHumanReadable())
-    // .addColumn(new TravelDurationPrinterColumn())
-    // .addColumn(new TravelDurationPrinterColumn().asHumanReadable())
-    // .addColumn(new ActivityDurationPrinterColumn())
-    // .addColumn(new ActivityDurationPrinterColumn().asHumanReadable())
-    // .addColumn(new WaitingDurationPrinterColumn())
-    // .addColumn(new WaitingDurationPrinterColumn().asHumanReadable())
-    // .addColumn(new ArrivalTimePrinterColumn())
-    // .addColumn(new
-    // ArrivalTimePrinterColumn().asHumanReadable().withFormatter(dateFormatter))
-    // .addColumn(new StartTimePrinterColumn())
-    // .addColumn(new
-    // StartTimePrinterColumn().asHumanReadable().withFormatter(dateFormatter))
-    // .addColumn(new EndTimePrinterColumn())
-    // .addColumn(new
-    // EndTimePrinterColumn().asHumanReadable().withFormatter(dateFormatter))
-    // .addColumn(new TransportCostPrinterColumn())
-    // .addColumn(new ActivityCostPrinterColumn())
-    // .addColumn(new RouteCostPrinterColumn())
-    // .addColumn(new SelectedTimeWindowPrinterColumn())
-    // .addColumn(new
-    // SelectedTimeWindowPrinterColumn().asHumanReadable().withFormatter(dateFormatter))
-    // .addColumn(new TimeWindowsPrinterColumn())
-    // .addColumn(new
-    // TimeWindowsPrinterColumn().asHumanReadable().withFormatter(dateFormatter))
-
     private static final EnumMap<PredefinedList, List<Class<? extends AbstractPrinterColumn<RoutePrinterContext, ?, ?>>>> COLUMNS;
 
     static {
@@ -132,19 +120,56 @@
         COLUMNS.put(PredefinedList.VERBOSE, verboseSet);
     }
 
+    /**
+     * Returns the predefined column set with all time, time window and duration
+     * columns printed as numbers.
+     *
+     * @param listType
+     *            The predefined list id.
+     * @return The column list containing the predefined columns.
+     */
     public static PrinterColumnList<RoutePrinterContext> getNumeric(PredefinedList listType) {
         return getList(listType, false, null);
     }
 
+    /**
+     * Returns the predefined column set with all time, time window and duration
+     * columns printed with human readable format, using default formatting.
+     *
+     * @param listType
+     *            The predefined list id.
+     * @return The column list containing the predefined columns.
+     */
     public static PrinterColumnList<RoutePrinterContext> getHumanReadable(PredefinedList listType) {
         return getList(listType, true, null);
     }
 
+    /**
+     * Returns the predefined column set with all time, time window and duration
+     * columns printed with human readable format, using the provided formatter.
+     *
+     * @param listType
+     *            The predefined list id.
+     * @param timeFormatter
+     *            the time formatter to use
+     * @return The column list containing the predefined columns.
+     */
     public static PrinterColumnList<RoutePrinterContext> getHumanReadable(PredefinedList listType,
                     HumanReadableTimeFormatter timeFormatter) {
         return getList(listType, true, timeFormatter);
     }
 
+    /**
+     * Generates the list.
+     *
+     * @param listType
+     *            The id of the list.
+     * @param humanReadable
+     *            Whether human readable format should be used
+     * @param timeFormatter
+     *            The formatter to use (if null, the default will be used)
+     * @return The generated column list.
+     */
     private static PrinterColumnList<RoutePrinterContext> getList(PredefinedList listType, boolean humanReadable,
                     HumanReadableTimeFormatter timeFormatter) {
         PrinterColumnList<RoutePrinterContext> res = new PrinterColumnList<>();
@@ -161,6 +186,8 @@
                 }
                 res.addColumn(col);
             } catch (InstantiationException | IllegalAccessException e) {
+                // Technically you can't get here as long as all column
+                // implementation has default constructor
                 throw new IllegalStateException(e);
             }
         }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/StringColumnType.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/StringColumnType.java
new file mode 100644
index 000000000..2ec730e9b
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/StringColumnType.java
@@ -0,0 +1,23 @@
+package com.graphhopper.jsprit.core.reporting.columndefinition;
+
+public class StringColumnType extends AbstractColumnType<Object> {
+
+    public StringColumnType() {
+        super();
+    }
+
+    public StringColumnType(String nullValue) {
+        super(nullValue);
+    }
+
+    @Override
+    protected String convertNotNull(Object data) {
+        return data.toString();
+    }
+
+    @Override
+    public boolean accepts(Object data) {
+        return true;
+    }
+
+}
\ No newline at end of file
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractCostPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractCostPrinterColumn.java
index 7b5dc1350..813788fd5 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractCostPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractCostPrinterColumn.java
@@ -3,10 +3,9 @@
 import java.util.function.Consumer;
 
 import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.Alignment;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.IntColumnType;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnAlignment;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
+import com.graphhopper.jsprit.core.reporting.columndefinition.IntColumnType;
 
 public abstract class AbstractCostPrinterColumn
 extends AbstractPrinterColumn<RoutePrinterContext, Integer, AbstractCostPrinterColumn>
@@ -16,13 +15,13 @@ public AbstractCostPrinterColumn() {
         super();
     }
 
-    public AbstractCostPrinterColumn(Consumer<Builder> decorator) {
+    public AbstractCostPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
 
     @Override
     public ColumnDefinition.Builder getColumnBuilder() {
-        return new ColumnDefinition.Builder(new IntColumnType()).withAlignment(Alignment.RIGHT);
+        return new ColumnDefinition.Builder(new IntColumnType()).withAlignment(ColumnAlignment.RIGHT);
     }
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractDurationPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractDurationPrinterColumn.java
index 11a1f7cc0..4974ae973 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractDurationPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractDurationPrinterColumn.java
@@ -2,16 +2,16 @@
 
 import java.util.function.Consumer;
 
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
 
 public abstract class AbstractDurationPrinterColumn<T extends AbstractDurationPrinterColumn<T>>
-                extends AbstractTimePrinterColumn<T> {
+extends AbstractTimePrinterColumn<T> {
 
     public AbstractDurationPrinterColumn() {
         this(null);
     }
 
-    public AbstractDurationPrinterColumn(Consumer<Builder> decorator) {
+    public AbstractDurationPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
         withFormatter(new HumanReadableDurationFormatter());
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractSizeDimensionPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractSizeDimensionPrinterColumn.java
index e75b13bac..7b04c4b11 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractSizeDimensionPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractSizeDimensionPrinterColumn.java
@@ -7,9 +7,8 @@
 import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.StringColumnType;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
+import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
 
 public abstract class AbstractSizeDimensionPrinterColumn
 extends AbstractPrinterColumn<RoutePrinterContext, String, AbstractSizeDimensionPrinterColumn> {
@@ -18,7 +17,7 @@ public AbstractSizeDimensionPrinterColumn() {
         super();
     }
 
-    public AbstractSizeDimensionPrinterColumn(Consumer<Builder> decorator) {
+    public AbstractSizeDimensionPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractTimePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractTimePrinterColumn.java
index 4bb386a02..8b2d1b9ff 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractTimePrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractTimePrinterColumn.java
@@ -3,9 +3,8 @@
 import java.util.function.Consumer;
 
 import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.StringColumnType;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
+import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
 
 public abstract class AbstractTimePrinterColumn<T extends AbstractTimePrinterColumn<T>>
 extends AbstractPrinterColumn<RoutePrinterContext, String, AbstractTimePrinterColumn<T>>
@@ -18,7 +17,7 @@ public AbstractTimePrinterColumn() {
         this(null);
     }
 
-    public AbstractTimePrinterColumn(Consumer<Builder> decorator) {
+    public AbstractTimePrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
         formatter = new HumanReadableTimeFormatter();
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractTimeWindowPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractTimeWindowPrinterColumn.java
index 57eb1ae08..a44eaae1c 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractTimeWindowPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractTimeWindowPrinterColumn.java
@@ -6,9 +6,8 @@
 
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.StringColumnType;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
+import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
 
 public abstract class AbstractTimeWindowPrinterColumn<T extends AbstractTimeWindowPrinterColumn<T>>
 extends AbstractPrinterColumn<RoutePrinterContext, String, AbstractTimeWindowPrinterColumn<T>>
@@ -21,7 +20,7 @@ public AbstractTimeWindowPrinterColumn() {
         this(null);
     }
 
-    public AbstractTimeWindowPrinterColumn(Consumer<Builder> decorator) {
+    public AbstractTimeWindowPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
         formatter = new HumanReadableTimeFormatter();
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityCostPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityCostPrinterColumn.java
index eb5f33277..cf902e97a 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityCostPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityCostPrinterColumn.java
@@ -2,7 +2,7 @@
 
 import java.util.function.Consumer;
 
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
 
 public class ActivityCostPrinterColumn extends AbstractCostPrinterColumn {
 
@@ -10,7 +10,7 @@ public ActivityCostPrinterColumn() {
         super();
     }
 
-    public ActivityCostPrinterColumn(Consumer<Builder> decorator) {
+    public ActivityCostPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityDurationPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityDurationPrinterColumn.java
index 7dfcf7c43..9c59272b2 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityDurationPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityDurationPrinterColumn.java
@@ -4,7 +4,7 @@
 
 import com.graphhopper.jsprit.core.problem.solution.route.activity.Start;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
 
 public class ActivityDurationPrinterColumn extends AbstractDurationPrinterColumn<ActivityDurationPrinterColumn>
 implements CostAndTimeExtractor {
@@ -15,7 +15,7 @@ public ActivityDurationPrinterColumn() {
         super();
     }
 
-    public ActivityDurationPrinterColumn(Consumer<Builder> decorator) {
+    public ActivityDurationPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityLoadChangePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityLoadChangePrinterColumn.java
index 333655320..ed32571b7 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityLoadChangePrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityLoadChangePrinterColumn.java
@@ -5,7 +5,7 @@
 import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.Start;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
 
 public class ActivityLoadChangePrinterColumn extends AbstractSizeDimensionPrinterColumn {
 
@@ -13,12 +13,12 @@ public ActivityLoadChangePrinterColumn() {
         super();
     }
 
-    public ActivityLoadChangePrinterColumn(Consumer<Builder> decorator) {
+    public ActivityLoadChangePrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
 
     @Override
-    public Builder getColumnBuilder() {
+    public ColumnDefinition.Builder getColumnBuilder() {
         return super.getColumnBuilder().withMinWidth(10);
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityTypePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityTypePrinterColumn.java
index 3bd09a816..5c5d73f07 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityTypePrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityTypePrinterColumn.java
@@ -4,9 +4,8 @@
 
 import com.graphhopper.jsprit.core.problem.solution.route.activity.AbstractActivity;
 import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.StringColumnType;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
+import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
 
 public class ActivityTypePrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, String, ActivityTypePrinterColumn> {
 
@@ -14,7 +13,7 @@ public ActivityTypePrinterColumn() {
         super();
     }
 
-    public ActivityTypePrinterColumn(Consumer<Builder> decorator) {
+    public ActivityTypePrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ArrivalTimePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ArrivalTimePrinterColumn.java
index e99483e90..4036e7aeb 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ArrivalTimePrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ArrivalTimePrinterColumn.java
@@ -4,7 +4,7 @@
 
 import com.graphhopper.jsprit.core.problem.solution.route.activity.Start;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
 
 public class ArrivalTimePrinterColumn extends AbstractTimePrinterColumn<ArrivalTimePrinterColumn> {
 
@@ -12,7 +12,7 @@ public ArrivalTimePrinterColumn() {
         super();
     }
 
-    public ArrivalTimePrinterColumn(Consumer<Builder> decorator) {
+    public ArrivalTimePrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/EndTimePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/EndTimePrinterColumn.java
index 2a4b4a275..d52a41f27 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/EndTimePrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/EndTimePrinterColumn.java
@@ -4,7 +4,7 @@
 
 import com.graphhopper.jsprit.core.problem.solution.route.activity.End;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
 
 public class EndTimePrinterColumn extends AbstractTimePrinterColumn<EndTimePrinterColumn> {
 
@@ -12,7 +12,7 @@ public EndTimePrinterColumn() {
         super();
     }
 
-    public EndTimePrinterColumn(Consumer<Builder> decorator) {
+    public EndTimePrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/JobNamePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/JobNamePrinterColumn.java
index 95842d45c..983f42aba 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/JobNamePrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/JobNamePrinterColumn.java
@@ -6,9 +6,8 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.StringColumnType;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
+import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
 
 public class JobNamePrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, String, JobNamePrinterColumn> {
 
@@ -16,7 +15,7 @@ public JobNamePrinterColumn() {
         super();
     }
 
-    public JobNamePrinterColumn(Consumer<Builder> decorator) {
+    public JobNamePrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/JobPriorityPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/JobPriorityPrinterColumn.java
index d828e0a3a..d79185177 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/JobPriorityPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/JobPriorityPrinterColumn.java
@@ -6,10 +6,9 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.Alignment;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.StringColumnType;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnAlignment;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
+import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
 
 public class JobPriorityPrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, String, JobPriorityPrinterColumn> {
 
@@ -19,13 +18,13 @@ public JobPriorityPrinterColumn() {
         super();
     }
 
-    public JobPriorityPrinterColumn(Consumer<Builder> decorator) {
+    public JobPriorityPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
 
     @Override
     public ColumnDefinition.Builder getColumnBuilder() {
-        return new ColumnDefinition.Builder(new StringColumnType("-")).withAlignment(Alignment.CENTER);
+        return new ColumnDefinition.Builder(new StringColumnType("-")).withAlignment(ColumnAlignment.CENTER);
     }
 
     @Override
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/JobTypePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/JobTypePrinterColumn.java
index 5048a6a35..f1ba970c1 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/JobTypePrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/JobTypePrinterColumn.java
@@ -6,9 +6,8 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.StringColumnType;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
+import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
 
 public class JobTypePrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, String, JobTypePrinterColumn> {
 
@@ -16,7 +15,7 @@ public JobTypePrinterColumn() {
         super();
     }
 
-    public JobTypePrinterColumn(Consumer<Builder> decorator) {
+    public JobTypePrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/LoacationPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/LoacationPrinterColumn.java
index 8cba55e44..14f2eec72 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/LoacationPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/LoacationPrinterColumn.java
@@ -5,9 +5,8 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.StringColumnType;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
+import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
 
 public class LoacationPrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, String, LoacationPrinterColumn> {
 
@@ -15,7 +14,7 @@ public LoacationPrinterColumn() {
         super();
     }
 
-    public LoacationPrinterColumn(Consumer<Builder> decorator) {
+    public LoacationPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/OperationDurationPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/OperationDurationPrinterColumn.java
index 90e197b46..9b4d1990c 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/OperationDurationPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/OperationDurationPrinterColumn.java
@@ -3,7 +3,7 @@
 import java.util.function.Consumer;
 
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
 
 public class OperationDurationPrinterColumn extends AbstractDurationPrinterColumn<OperationDurationPrinterColumn> {
 
@@ -11,7 +11,7 @@ public OperationDurationPrinterColumn() {
         super();
     }
 
-    public OperationDurationPrinterColumn(Consumer<Builder> decorator) {
+    public OperationDurationPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RouteCostPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RouteCostPrinterColumn.java
index 41be6697d..71d01b4d4 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RouteCostPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RouteCostPrinterColumn.java
@@ -3,7 +3,7 @@
 import java.util.function.Consumer;
 
 import com.graphhopper.jsprit.core.problem.solution.route.activity.Start;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
 
 public class RouteCostPrinterColumn extends TransportCostPrinterColumn {
 
@@ -13,7 +13,7 @@ public RouteCostPrinterColumn() {
         super();
     }
 
-    public RouteCostPrinterColumn(Consumer<Builder> decorator) {
+    public RouteCostPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RouteLoadPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RouteLoadPrinterColumn.java
index 846c9ed18..b8bff8cfd 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RouteLoadPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RouteLoadPrinterColumn.java
@@ -5,7 +5,7 @@
 import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.Start;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
 
 public class RouteLoadPrinterColumn extends AbstractSizeDimensionPrinterColumn {
 
@@ -15,7 +15,7 @@ public RouteLoadPrinterColumn() {
         super();
     }
 
-    public RouteLoadPrinterColumn(Consumer<Builder> decorator) {
+    public RouteLoadPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RouteNumberPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RouteNumberPrinterColumn.java
index 8089bda74..46ea8934b 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RouteNumberPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RouteNumberPrinterColumn.java
@@ -3,9 +3,8 @@
 import java.util.function.Consumer;
 
 import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.IntColumnType;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
+import com.graphhopper.jsprit.core.reporting.columndefinition.IntColumnType;
 
 public class RouteNumberPrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, Integer, RouteNumberPrinterColumn> {
 
@@ -13,7 +12,7 @@ public RouteNumberPrinterColumn() {
         super();
     }
 
-    public RouteNumberPrinterColumn(Consumer<Builder> decorator) {
+    public RouteNumberPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RoutePrinterContext.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RoutePrinterContext.java
index 9671fc963..17e643751 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RoutePrinterContext.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RoutePrinterContext.java
@@ -5,7 +5,7 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.reporting.PrinterContext;
 
-public class RoutePrinterContext extends PrinterContext {
+public class RoutePrinterContext implements PrinterContext {
 
     private int routeNr;
     private VehicleRoute route;
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/SelectedTimeWindowPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/SelectedTimeWindowPrinterColumn.java
index aa4d60924..f1a6ea499 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/SelectedTimeWindowPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/SelectedTimeWindowPrinterColumn.java
@@ -8,7 +8,7 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
 
 public class SelectedTimeWindowPrinterColumn extends AbstractTimeWindowPrinterColumn<SelectedTimeWindowPrinterColumn> {
 
@@ -16,7 +16,7 @@ public SelectedTimeWindowPrinterColumn() {
         super();
     }
 
-    public SelectedTimeWindowPrinterColumn(Consumer<Builder> decorator) {
+    public SelectedTimeWindowPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/StartTimePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/StartTimePrinterColumn.java
index 44019c048..40df5e97d 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/StartTimePrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/StartTimePrinterColumn.java
@@ -4,7 +4,7 @@
 
 import com.graphhopper.jsprit.core.problem.solution.route.activity.End;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
 
 public class StartTimePrinterColumn extends AbstractTimePrinterColumn<StartTimePrinterColumn> {
 
@@ -12,7 +12,7 @@ public StartTimePrinterColumn() {
         super();
     }
 
-    public StartTimePrinterColumn(Consumer<Builder> decorator) {
+    public StartTimePrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/TimeWindowsPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/TimeWindowsPrinterColumn.java
index 957ed17c7..64e147b17 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/TimeWindowsPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/TimeWindowsPrinterColumn.java
@@ -6,7 +6,7 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
 
 public class TimeWindowsPrinterColumn extends AbstractTimeWindowPrinterColumn<TimeWindowsPrinterColumn> {
 
@@ -14,7 +14,7 @@ public TimeWindowsPrinterColumn() {
         super();
     }
 
-    public TimeWindowsPrinterColumn(Consumer<Builder> decorator) {
+    public TimeWindowsPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/TransportCostPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/TransportCostPrinterColumn.java
index 783e82f27..09f85fad5 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/TransportCostPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/TransportCostPrinterColumn.java
@@ -4,7 +4,7 @@
 
 import com.graphhopper.jsprit.core.problem.solution.route.activity.Start;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
 
 public class TransportCostPrinterColumn extends AbstractCostPrinterColumn {
 
@@ -14,7 +14,7 @@ public TransportCostPrinterColumn() {
         super();
     }
 
-    public TransportCostPrinterColumn(Consumer<Builder> decorator) {
+    public TransportCostPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/TravelDurationPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/TravelDurationPrinterColumn.java
index 7f25d4eb7..b2ccce8ce 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/TravelDurationPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/TravelDurationPrinterColumn.java
@@ -4,7 +4,7 @@
 
 import com.graphhopper.jsprit.core.problem.solution.route.activity.Start;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
 
 public class TravelDurationPrinterColumn extends AbstractDurationPrinterColumn<TravelDurationPrinterColumn>
 implements CostAndTimeExtractor {
@@ -15,7 +15,7 @@ public TravelDurationPrinterColumn() {
         super();
     }
 
-    public TravelDurationPrinterColumn(Consumer<Builder> decorator) {
+    public TravelDurationPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/VehicleNamePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/VehicleNamePrinterColumn.java
index ec390fbb5..925798335 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/VehicleNamePrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/VehicleNamePrinterColumn.java
@@ -3,9 +3,8 @@
 import java.util.function.Consumer;
 
 import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.StringColumnType;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
+import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
 
 public class VehicleNamePrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, String, VehicleNamePrinterColumn> {
 
@@ -13,7 +12,7 @@ public VehicleNamePrinterColumn() {
         super();
     }
 
-    public VehicleNamePrinterColumn(Consumer<Builder> decorator) {
+    public VehicleNamePrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/WaitingDurationPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/WaitingDurationPrinterColumn.java
index ae2e9164a..da24fa9ba 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/WaitingDurationPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/WaitingDurationPrinterColumn.java
@@ -5,7 +5,7 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.End;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.Start;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
 
 public class WaitingDurationPrinterColumn extends AbstractDurationPrinterColumn<WaitingDurationPrinterColumn> {
 
@@ -13,7 +13,7 @@ public WaitingDurationPrinterColumn() {
         super();
     }
 
-    public WaitingDurationPrinterColumn(Consumer<Builder> decorator) {
+    public WaitingDurationPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/RandomUtils.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/RandomUtils.java
index facc97981..3eb52508e 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/RandomUtils.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/RandomUtils.java
@@ -18,13 +18,13 @@
 
 package com.graphhopper.jsprit.core.util;
 
-import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-
 import java.util.Collection;
 import java.util.List;
 import java.util.Random;
 
+import com.graphhopper.jsprit.core.problem.job.Job;
+import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+
 /**
  * Created by schroeder on 14/01/15.
  */
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/Resource.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/Resource.java
index 134f13545..9e1b72f00 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/Resource.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/Resource.java
@@ -18,9 +18,6 @@
 package com.graphhopper.jsprit.core.util;
 
 
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileNotFoundException;
@@ -28,6 +25,9 @@
 import java.net.MalformedURLException;
 import java.net.URL;
 
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 
 /**
  * @author stefan schroeder, pierre-david belanger
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/SolutionVerifier.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/SolutionVerifier.java
index 6d1ed3fb2..ca2024605 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/SolutionVerifier.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/SolutionVerifier.java
@@ -17,16 +17,16 @@
  */
 package com.graphhopper.jsprit.core.util;
 
+import java.util.Collection;
+import java.util.HashSet;
+import java.util.Set;
+
 import com.graphhopper.jsprit.core.algorithm.listener.AlgorithmEndsListener;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 
-import java.util.Collection;
-import java.util.HashSet;
-import java.util.Set;
-
 
 public class SolutionVerifier implements AlgorithmEndsListener {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/Solutions.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/Solutions.java
index 8687caab6..231ede97d 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/Solutions.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/Solutions.java
@@ -17,10 +17,10 @@
  */
 package com.graphhopper.jsprit.core.util;
 
-import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
-
 import java.util.Collection;
 
+import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
+
 
 public class Solutions {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/VehicleIndexComparator.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/VehicleIndexComparator.java
index 4e7a51d71..5b7c6585a 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/VehicleIndexComparator.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/VehicleIndexComparator.java
@@ -18,10 +18,10 @@
 
 package com.graphhopper.jsprit.core.util;
 
-import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-
 import java.util.Comparator;
 
+import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+
 public class VehicleIndexComparator implements Comparator<VehicleRoute> {
     public int compare(VehicleRoute a, VehicleRoute b) {
         return a.getVehicle().getIndex() - b.getVehicle().getIndex();
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/VehicleRoutingTransportCostsMatrix.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/VehicleRoutingTransportCostsMatrix.java
index e63188ae2..916d7f4f9 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/VehicleRoutingTransportCostsMatrix.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/VehicleRoutingTransportCostsMatrix.java
@@ -17,16 +17,17 @@
  */
 package com.graphhopper.jsprit.core.util;
 
+import java.util.HashMap;
+import java.util.Map;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.cost.AbstractForwardVehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.driver.Driver;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl.VehicleCostParams;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.util.HashMap;
-import java.util.Map;
 
 
 /**
