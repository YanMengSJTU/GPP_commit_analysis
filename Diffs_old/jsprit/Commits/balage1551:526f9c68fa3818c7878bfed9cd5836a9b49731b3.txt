diff --git a/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/Plotter.java b/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/Plotter.java
index 9d8425225..466dc1575 100644
--- a/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/Plotter.java
+++ b/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/Plotter.java
@@ -319,6 +319,11 @@ private LegendTitle createLegend(final Collection<VehicleRoute> routes, final XY
         deliveryActItem.setShapeVisible(true);
         lic.add(deliveryActItem);
 
+        LegendItem exchangeActItem = new LegendItem("exchangeAct", Color.ORANGE);
+        exchangeActItem.setShape(ELLIPSE);
+        exchangeActItem.setShapeVisible(true);
+        lic.add(exchangeActItem);
+
         if (routes != null && !routes.isEmpty()) {
             LegendItem item = new LegendItem("firstActivity", Color.BLACK);
             Shape upTriangle = ShapeUtilities.createUpTriangle(3.0f);
diff --git a/jsprit-analysis/src/test/java/com/graphhopper/jsprit/analysis/toolbox/CustomJob.java b/jsprit-analysis/src/test/java/com/graphhopper/jsprit/analysis/toolbox/CustomJob.java
index bd6377d4f..5cdc16c22 100644
--- a/jsprit-analysis/src/test/java/com/graphhopper/jsprit/analysis/toolbox/CustomJob.java
+++ b/jsprit-analysis/src/test/java/com/graphhopper/jsprit/analysis/toolbox/CustomJob.java
@@ -24,6 +24,7 @@
 import com.graphhopper.jsprit.core.problem.job.JobActivityList;
 import com.graphhopper.jsprit.core.problem.job.SequentialJobActivityList;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivityNEW;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.ExchangeActivityNEW;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivityNEW;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 
@@ -49,20 +50,31 @@ public BuilderBase(String id) {
             super(id);
         }
 
-        public CustomJob.BuilderBase<T, B> addPickup(Location location, SizeDimension capacity) {
-            locs.add(location);
-            cap.add(capacity);
+        public CustomJob.BuilderBase<T, B> addPickup(Location location, SizeDimension loadChange) {
+            add(location, loadChange);
             types.add("pickup");
             return this;
         }
 
-        public CustomJob.BuilderBase<T, B> addDelivery(Location location, SizeDimension capacity) {
+        private void add(Location location, SizeDimension loadChange) {
             locs.add(location);
-            cap.add(capacity);
+            cap.add(loadChange);
+        }
+
+        public CustomJob.BuilderBase<T, B> addDelivery(Location location, SizeDimension loadChange) {
+            add(location, loadChange);
             types.add("delivery");
             return this;
         }
 
+        public CustomJob.BuilderBase<T, B> addExchange(Location location, SizeDimension loadChange) {
+            add(location, loadChange);
+            types.add("exchange");
+            return this;
+        }
+
+
+
         public List<Location> getLocs() {
             return locs;
         }
@@ -120,8 +132,11 @@ protected void createActivities(JobBuilder<? extends AbstractJob, ?> jobBuilder)
         for (int i = 0; i < builder.getLocs().size(); i++) {
             if (builder.getTypes().get(i).equals("pickup")) {
                 list.addActivity(new PickupActivityNEW(this, "pick", builder.getLocs().get(i), 0, builder.getCaps().get(i), Arrays.asList(TimeWindow.ETERNITY)));
-            } else
+            } else if (builder.getTypes().get(i).equals("delivery")) {
                 list.addActivity(new DeliveryActivityNEW(this, "delivery", builder.getLocs().get(i), 0, builder.getCaps().get(i).invert(), Arrays.asList(TimeWindow.ETERNITY)));
+            } else {
+                list.addActivity(new ExchangeActivityNEW(this, "exchange", builder.getLocs().get(i), 0, builder.getCaps().get(i), Arrays.asList(TimeWindow.ETERNITY)));
+            }
         }
         setActivities(list);
     }
diff --git a/jsprit-analysis/src/test/java/com/graphhopper/jsprit/analysis/toolbox/PlotterTest.java b/jsprit-analysis/src/test/java/com/graphhopper/jsprit/analysis/toolbox/PlotterTest.java
index f58f45807..585d255c5 100644
--- a/jsprit-analysis/src/test/java/com/graphhopper/jsprit/analysis/toolbox/PlotterTest.java
+++ b/jsprit-analysis/src/test/java/com/graphhopper/jsprit/analysis/toolbox/PlotterTest.java
@@ -67,6 +67,22 @@ public void testPlotCustomJobSolution() {
         new Plotter(vrp, solution).plot("output/plotSolution", "plot");
     }
 
+    @Test
+    public void testPlotWithExchange() {
+        VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0, 3).addCapacityDimension(1, 3).build();
+        Vehicle vehicle = VehicleImpl.Builder.newInstance("vehicle").setStartLocation(Location.newInstance(0, 0))
+            .setType(type).build();
+        CustomJob cj = CustomJob.Builder.newInstance("job")
+            .addPickup(Location.newInstance(10, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 1).build())
+            .addExchange(Location.newInstance(-5, 4), SizeDimension.Builder.newInstance().addDimension(0, -1).addDimension(1, 1).build())
+            .addDelivery(Location.newInstance(20, 10), SizeDimension.Builder.newInstance().addDimension(0, 3).build())
+            .build();
+        VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(cj).addVehicle(vehicle).build();
+        VehicleRoutingProblemSolution solution = Solutions.bestOf(Jsprit.createAlgorithm(vrp).searchSolutions());
+        new Plotter(vrp).plotJobRelations(true).plot("output/plotExchange", "plot");
+        new Plotter(vrp, solution).plot("output/plotSolution", "plot");
+    }
+
     @Test
     public void testPlotWithShipments() {
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0, 3).build();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/CustomJob.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/CustomJob.java
index c6de92c7e..ce753e2fc 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/CustomJob.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/CustomJob.java
@@ -24,6 +24,7 @@
 import com.graphhopper.jsprit.core.problem.job.JobActivityList;
 import com.graphhopper.jsprit.core.problem.job.SequentialJobActivityList;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivityNEW;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.ExchangeActivityNEW;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivityNEW;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 
@@ -49,20 +50,31 @@ public BuilderBase(String id) {
             super(id);
         }
 
-        public CustomJob.BuilderBase<T, B> addPickup(Location location, SizeDimension capacity) {
-            locs.add(location);
-            cap.add(capacity);
+        public CustomJob.BuilderBase<T, B> addPickup(Location location, SizeDimension loadChange) {
+            add(location, loadChange);
             types.add("pickup");
             return this;
         }
 
-        public CustomJob.BuilderBase<T, B> addDelivery(Location location, SizeDimension capacity) {
+        private void add(Location location, SizeDimension loadChange) {
             locs.add(location);
-            cap.add(capacity);
+            cap.add(loadChange);
+        }
+
+        public CustomJob.BuilderBase<T, B> addDelivery(Location location, SizeDimension loadChange) {
+            add(location, loadChange);
             types.add("delivery");
             return this;
         }
 
+        public CustomJob.BuilderBase<T, B> addExchange(Location location, SizeDimension loadChange) {
+            add(location, loadChange);
+            types.add("exchange");
+            return this;
+        }
+
+
+
         public List<Location> getLocs() {
             return locs;
         }
@@ -120,8 +132,11 @@ protected void createActivities(JobBuilder<? extends AbstractJob, ?> jobBuilder)
         for (int i = 0; i < builder.getLocs().size(); i++) {
             if (builder.getTypes().get(i).equals("pickup")) {
                 list.addActivity(new PickupActivityNEW(this, "pick", builder.getLocs().get(i), 0, builder.getCaps().get(i), Arrays.asList(TimeWindow.ETERNITY)));
-            } else
+            } else if (builder.getTypes().get(i).equals("delivery")) {
                 list.addActivity(new DeliveryActivityNEW(this, "delivery", builder.getLocs().get(i), 0, builder.getCaps().get(i).invert(), Arrays.asList(TimeWindow.ETERNITY)));
+            } else {
+                list.addActivity(new ExchangeActivityNEW(this, "exchange", builder.getLocs().get(i), 0, builder.getCaps().get(i), Arrays.asList(TimeWindow.ETERNITY)));
+            }
         }
         setActivities(list);
     }
