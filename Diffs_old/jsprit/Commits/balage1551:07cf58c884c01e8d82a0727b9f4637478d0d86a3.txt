diff --git a/docs/2.0/MigrationGuide.md b/docs/2.0/MigrationGuide.md
index 045ddd069..bdf85a888 100644
--- a/docs/2.0/MigrationGuide.md
+++ b/docs/2.0/MigrationGuide.md
@@ -18,4 +18,87 @@ In this step, we give you guided help how to completely get rid of the legacy cl
 
 The `Capacity` class is renamed to `SizeDimension`. For backward compatibility, the `SizeDimension` class extends the now deprecated `Capacity` class. This let you use the `Capacity` class as variable type anywhere  the value is read out. Also, the `Capacity.Builder` creates a `SizeDimension` class under the hood, so when a `Capacity` object is created it is really a `SizeDimension`.
 
-This makes this rename transparent as far as code correctness goes. However, the `Capacity` class may be removed in the future, so it is strongly recommended to rename all references to `Capacity` to `SizeDimension`.
\ No newline at end of file
+This makes this rename transparent as far as code correctness goes. However, the `Capacity` class may be removed in the future, so it is strongly recommended to rename all references to `Capacity` to `SizeDimension`.
+
+### Using CustomJob instead of legacy Job types
+
+The old job types (`Service`, `Pickup`, `Delivery`, `Shipment`) are obsolete. However, they can easily be replaced with the new `CustomJob`, by using its Builder methods. 
+
+#### Transforming single-activity jobs
+
+The `Service`, `Pickup`, `Delivery` jobs contain only one activity. They can be replaced by the corresponding addXXX() methods (XXX stands for the name of the old job) in `CustomJob.Builder`. 
+
+These methods comes with four different flavors: 
+
+```
+addService(Location location)
+addService(Location location, SizeDimension size)
+addService(Location location, SizeDimension size, double operationTime)
+addService(Location location, SizeDimension size, double operationTime, TimeWindow tw)
+```
+
+These methods let's you create jobs with a location, size, operation time and a single time window.
+
+**<u>Example 1:</u>**
+
+If you have a Service declaration:
+
+```java
+Service s1 = new Service.Builder("s1").setLocation(Location.newInstance(10, 0)).build();
+```
+
+In this example, only the location is set, so you can replace it to the following code snippet:
+
+```java
+ CustomJob s1 = new CustomJob.Builder("s1")
+            .addService(Location.newInstance(10, 0))
+            .build();
+```
+
+**<u>Example 2:</u>**
+
+When you have to set the time window, but neither the size or the operation time, there are common defaults for these values to use. This code
+
+```java
+Service service = new Service.Builder("s").setLocation(Location.newInstance(20, 0))
+                        .setTimeWindow(TimeWindow.newInstance(40, 50)).build();
+```
+
+may be converted to 
+
+```java
+    CustomJob service = new CustomJob.Builder("s")
+            .addService(Location.newInstance(20, 0), SizeDimension.EMPTY, 0,
+                TimeWindow.newInstance(40, 50))
+            .build();
+```
+**<u>Example 3:</u>**
+
+When you need even more than these convenient methods offer (more time windows, name the activities, skills), you have to do some additional work. First you have to create a `BuilderActivityInfo`:
+
+```
+BuilderActivityInfo activityInfo = new BuilderActivityInfo(ActivityType.SERVICE,
+                Location.newInstance(20, 0));
+```
+
+Then set the required values on it: 
+
+```java
+activityInfo.withName("activity name");
+activityInfo.withOperationTime(10);
+activityInfo.withSize(SizeDimension.Builder.newInstance()
+		.addDimension(0, 1)
+		.addDimension(1, 2)
+		.build());
+activityInfo.withTimeWindows(TimeWindow.newInstance(40, 50), TimeWindow.newInstance(70, 80));
+```
+
+Finally, you can configure the CustomJob.Builder and create the job:
+
+```java
+CustomJob.Builder customJobBuilder = new CustomJob.Builder("id");
+        customJobBuilder.addActivity(activityInfo)
+        .addAllRequiredSkills(Skills.Builder.newInstance().addSkill("skill").build())
+        .setPriority(5)
+        .build();
+```
\ No newline at end of file
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateLoads.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateLoads.java
index 8d6283d7a..13988e23c 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateLoads.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateLoads.java
@@ -25,7 +25,7 @@
 import com.graphhopper.jsprit.core.problem.job.Delivery;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.job.Pickup;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.ActivityVisitor;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
@@ -86,7 +86,7 @@ void insertionStarts(VehicleRoute route) {
         for (Job j : route.getTourActivities().getJobs()) {
             if (j instanceof Delivery) {
                 loadAtDepot = loadAtDepot.add(j.getSize());
-            } else if (j instanceof Pickup || j instanceof Service) {
+            } else if (j instanceof Pickup || j instanceof ServiceJob) {
                 loadAtEnd = loadAtEnd.add(j.getSize());
             }
         }
@@ -110,7 +110,7 @@ public void informJobInserted(Job job2insert, VehicleRoute inRoute, double addit
             }
             stateManager.putTypedInternalRouteState(inRoute, InternalStates.LOAD_AT_BEGINNING,
                             loadAtDepot.add(job2insert.getSize()));
-        } else if (job2insert instanceof Pickup || job2insert instanceof Service) {
+        } else if (job2insert instanceof Pickup || job2insert instanceof ServiceJob) {
             SizeDimension loadAtEnd = stateManager.getRouteState(inRoute, InternalStates.LOAD_AT_END, SizeDimension.class);
             if (loadAtEnd == null) {
                 loadAtEnd = defaultValue;
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceDeliveriesFirstConstraint.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceDeliveriesFirstConstraint.java
index a58caf812..32af90884 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceDeliveriesFirstConstraint.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceDeliveriesFirstConstraint.java
@@ -17,7 +17,7 @@
  */
 package com.graphhopper.jsprit.core.problem.constraint;
 
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.*;
@@ -71,7 +71,7 @@ protected boolean isShipment(TourActivity newAct) {
     }
 
     protected boolean isService(TourActivity newAct) {
-        return newAct instanceof JobActivity && ((JobActivity) newAct).getJob() instanceof Service;
+        return newAct instanceof JobActivity && ((JobActivity) newAct).getJob() instanceof ServiceJob;
     }
 
     // protected ConstraintsStatus old(TourActivity prevAct, TourActivity
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Break.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Break.java
index b3bf22409..feccd29fe 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Break.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Break.java
@@ -28,7 +28,7 @@
  */
 public class Break extends AbstractSingleActivityJob<BreakActivity> implements InternalJobMarker {
 
-    public static final class Builder extends Service.BuilderBase<Break, Builder> {
+    public static final class Builder extends ServiceJob.BuilderBase<Break, Builder> {
 
         private static final Location VARIABLE_LOCATION = Location
                         .newInstance("@@@VARIABLE_LOCATION");
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/LegacyService.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/LegacyService.java
deleted file mode 100644
index 47a389696..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/LegacyService.java
+++ /dev/null
@@ -1,456 +0,0 @@
-/*
- * Licensed to GraphHopper GmbH under one or more contributor
- * license agreements. See the NOTICE file distributed with this work for
- * additional information regarding copyright ownership.
- *
- * GraphHopper GmbH licenses this file to you under the Apache License,
- * Version 2.0 (the "License"); you may not use this file except in
- * compliance with the License. You may obtain a copy of the License at
- *
- *       http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.graphhopper.jsprit.core.problem.job;
-
-import java.util.Collection;
-
-import com.graphhopper.jsprit.core.problem.Capacity;
-import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.SizeDimension;
-import com.graphhopper.jsprit.core.problem.Skills;
-import com.graphhopper.jsprit.core.problem.job.CustomJob.BuilderBase.ActivityType;
-import com.graphhopper.jsprit.core.problem.job.CustomJob.BuilderBase.BuilderActivityInfo;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.ServiceActivity;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindowsImpl;
-import com.graphhopper.jsprit.core.util.Coordinate;
-
-/**
- * Service implementation of a job.
- *
- * @deprecated Use {@linkplain CustomJob} instead
- *
- *
- *             <p>
- *             <h1><em>Warning!</em></h1>
- *             </p>
- *
- *             <p>
- *             <strong>This class is deprecated and only available for backward
- *             compatibility and for easier migration.</strong>
- *             </p>
- *             <p>
- *             This class wraps a new CustomJob instance and delegates its
- *             values and the values from its sole activity. It is strongly
- *             recommended to switch to the {@linkplain CustomJob} and use one
- *             of the following functions of its builder to add the service
- *             activity:
- *
- *             <ul>
- *             <li>{@linkplain CustomJob.Builder#addService(Location)}</li>
- *             <li>
- *             {@linkplain CustomJob.Builder#addService(Location, SizeDimension)}
- *             </li>
- *             <li>
- *             {@linkplain CustomJob.Builder#addService(Location, SizeDimension, double)}
- *             </li>
- *             <li>
- *             {@linkplain CustomJob.Builder#addService(Location, SizeDimension, double, TimeWindow)}
- *             </li>
- *             </ul>
- *
- *             or if you need more control on the activity, use the
- *             {@linkplain CustomJob.Builder#addActivity(BuilderActivityInfo)}
- *             function:
- *
- *             <pre>
- *    BuilderActivityInfo activityInfo = new BuilderActivityInfo(ActivityType.SERVICE, <i>location</i>);
-
-        activityInfo.withName(<i>activity name</i>);
-        activityInfo.withOperationTime(<i>serviceTime</i>);
-        activityInfo.withSize((SizeDimension) <i>capacity</i>);
-        activityInfo.withTimeWindows(<i>timeWindows</i>);
-        activityInfo.withTimeWindow(<i>timeWindow</i>);
-
-        CustomJob.Builder customJobBuilder = new CustomJob.Builder(<i>id</i>);
-        customJobBuilder
-            .addActivity(activityInfo)
-            .addAllRequiredSkills(<i>skills<i>)
-            .setName(<i>job name</i>)
-            .setPriority(<i>priority</i>);
-
-        job = customJobBuilder.build();
- *             </pre>
- *
- *             </p>
- *
- * @author schroeder
- * @author Balage
- *
- * @see {@linkplain CustomJob}
- * @see {@linkplain CustomJob.Builder}
- * @see {@linkplain CustomJob.BuilderBase.BuilderActivityInfo}
- */
-@Deprecated
-public class LegacyService extends AbstractJob {
-
-    /**
-     * Builder that builds a service.
-     *
-     * @author schroeder
-     */
-    public static class Builder<T extends LegacyService> {
-
-        /**
-         * Returns a new instance of builder that builds a service.
-         *
-         * @param id the id of the service
-         * @return the builder
-         */
-        public static Builder newInstance(String id) {
-            return new Builder(id);
-        }
-
-        private String id;
-
-        protected String locationId;
-
-        private String type = "service";
-
-        protected Coordinate coord;
-
-        protected double serviceTime;
-
-        protected TimeWindow timeWindow = TimeWindow.newInstance(0.0, Double.MAX_VALUE);
-
-        protected Capacity.Builder capacityBuilder = Capacity.Builder.newInstance();
-
-        protected Capacity capacity;
-
-        protected Skills.Builder skillBuilder = Skills.Builder.newInstance();
-
-        protected Skills skills;
-
-        private String name = "no-name";
-
-        protected Location location;
-
-        protected TimeWindowsImpl timeWindows;
-
-        private boolean twAdded = false;
-
-        private int priority = 2;
-
-        protected Object userData;
-
-        Builder(String id){
-            this.id = id;
-            timeWindows = new TimeWindowsImpl();
-            timeWindows.add(timeWindow);
-        }
-
-        /**
-         * Protected method to set the type-name of the service.
-         * <p>
-         * <p>Currently there are {@link LegacyService}, {@link Pickup} and {@link Delivery}.
-         *
-         * @param name the name of service
-         * @return the builder
-         */
-        protected Builder<T> setType(String name) {
-            this.type = name;
-            return this;
-        }
-
-        /**
-         * Sets location
-         *
-         * @param location location
-         * @return builder
-         */
-        public Builder<T> setLocation(Location location) {
-            this.location = location;
-            return this;
-        }
-
-        /**
-         * Sets the serviceTime of this service.
-         * <p>
-         * <p>It is understood as time that a service or its implied activity takes at the service-location, for instance
-         * to unload goods.
-         *
-         * @param serviceTime the service time / duration of service to be set
-         * @return builder
-         * @throws IllegalArgumentException if serviceTime < 0
-         */
-        public Builder<T> setServiceTime(double serviceTime) {
-            if (serviceTime < 0)
-                throw new IllegalArgumentException("serviceTime must be greater than or equal to zero");
-            this.serviceTime = serviceTime;
-            return this;
-        }
-
-        /**
-         * Sets user specific domain data associated with the object.
-         *
-         * <p>
-         * The user data is a black box for the framework, it only stores it,
-         * but never interacts with it in any way.
-         * </p>
-         *
-         * @param userData
-         *            any object holding the domain specific user data
-         *            associated with the object.
-         * @return builder
-         */
-        public Builder<T> setUserData(Object userData) {
-            this.userData = userData;
-            return this;
-        }
-
-        /**
-         * Adds capacity dimension.
-         *
-         * @param dimensionIndex the dimension index of the capacity value
-         * @param dimensionValue the capacity value
-         * @return the builder
-         * @throws IllegalArgumentException if dimensionValue < 0
-         */
-        public Builder<T> addSizeDimension(int dimensionIndex, int dimensionValue) {
-            if (dimensionValue < 0) throw new IllegalArgumentException("capacity value cannot be negative");
-            capacityBuilder.addDimension(dimensionIndex, dimensionValue);
-            return this;
-        }
-
-        public Builder<T> setTimeWindow(TimeWindow tw){
-            if(tw == null) throw new IllegalArgumentException("time-window arg must not be null");
-            this.timeWindow = tw;
-            this.timeWindows = new TimeWindowsImpl();
-            timeWindows.add(tw);
-            return this;
-        }
-
-        public Builder<T> addTimeWindow(TimeWindow timeWindow) {
-            if(timeWindow == null) throw new IllegalArgumentException("time-window arg must not be null");
-            if(!twAdded){
-                timeWindows = new TimeWindowsImpl();
-                twAdded = true;
-            }
-            timeWindows.add(timeWindow);
-            return this;
-        }
-
-        public Builder<T> addTimeWindow(double earliest, double latest) {
-            return addTimeWindow(TimeWindow.newInstance(earliest, latest));
-        }
-
-        /**
-         * Builds the service.
-         *
-         * @return {@link LegacyService}
-         * @throws IllegalArgumentException if neither locationId nor coordinate is set.
-         */
-        public T build() {
-            if (location == null) throw new IllegalArgumentException("location is missing");
-            this.setType("service");
-            capacity = capacityBuilder.build();
-            skills = skillBuilder.build();
-            return (T) new LegacyService(this);
-        }
-
-        public Builder<T> addRequiredSkill(String skill) {
-            skillBuilder.addSkill(skill);
-            return this;
-        }
-
-        public Builder<T> setName(String name) {
-            this.name = name;
-            return this;
-        }
-
-        public Builder<T> addAllRequiredSkills(Skills skills){
-            for(String s : skills.values()){
-                skillBuilder.addSkill(s);
-            }
-            return this;
-        }
-
-        public Builder<T> addAllSizeDimensions(Capacity size){
-            for(int i=0;i<size.getNuOfDimensions();i++){
-                capacityBuilder.addDimension(i,size.get(i));
-            }
-            return this;
-        }
-
-        /**
-         * Set priority to service. Only 1 (very high) to 10 (very low) are allowed.
-         * <p>
-         * Default is 2.
-         *
-         * @param priority
-         * @return builder
-         */
-        public Builder<T> setPriority(int priority) {
-            if (priority < 1 || priority > 10)
-                throw new IllegalArgumentException("incorrect priority. only priority values from 1 to 10 are allowed where 1 = high and 10 is low");
-            this.priority = priority;
-            return this;
-        }
-    }
-
-
-    private CustomJob theRealJob;
-    private ServiceActivity theRealActivity;
-
-    LegacyService(Builder<?> builder) {
-        BuilderActivityInfo activityInfo = new BuilderActivityInfo(ActivityType.SERVICE,
-                builder.location);
-
-        activityInfo.withName(builder.name);
-        activityInfo.withOperationTime(builder.serviceTime);
-        // Safe cast because SizeDimension is the only implementation of
-        // Capacity
-        activityInfo.withSize((SizeDimension) builder.capacity);
-        activityInfo.withTimeWindows(builder.timeWindows.getTimeWindows());
-
-        com.graphhopper.jsprit.core.problem.job.CustomJob.Builder customJobBuilder = new CustomJob.Builder(
-                builder.id);
-        customJobBuilder.addActivity(activityInfo).addAllRequiredSkills(builder.skills)
-        .setName(builder.name)
-        .addUserData(builder.userData)
-        .setPriority(builder.priority);
-        theRealJob = customJobBuilder.build();
-        theRealActivity = (ServiceActivity) theRealJob.getActivityList().getAll().get(0);
-    }
-
-    @Override
-    public Collection<TimeWindow> getTimeWindows() {
-        return theRealJob.getTimeWindows();
-    }
-
-    @Override
-    public String getId() {
-        return theRealJob.getId();
-    }
-
-    /**
-     * Returns location.
-     *
-     * @return location
-     */
-    public Location getLocation() {
-        return theRealActivity.getLocation();
-    }
-
-
-    /**
-     * Returns the service-time/duration a service takes at service-location.
-     *
-     * @return service duration
-     */
-    public double getServiceDuration() {
-        return theRealActivity.getOperationTime();
-    }
-
-    /**
-     * Returns the time-window a service(-operation) is allowed to start.
-     * It is recommended to use getTimeWindows() instead. If you still use this, it returns the first time window of getTimeWindows() collection.
-     *
-     * @return time window
-     *
-     */
-    public TimeWindow getTimeWindow() {
-        return theRealActivity.getSingleTimeWindow();
-    }
-
-    /**
-     * @return the name
-     */
-    public String getType() {
-        return "service";
-    }
-
-    /**
-     * Returns a string with the service's attributes.
-     * <p>
-     * <p>String is built as follows: [attr1=val1][attr2=val2]...
-     */
-    @Override
-    public String toString() {
-        return "[id=" + getId() + "][name=" + getName() + "][type=" + getType() + "][location="
-                + getLocation() + "][capacity=" + getSize() + "][serviceTime="
-                + getServiceDuration() + "][timeWindow=" + getTimeWindow() + "]";
-    }
-
-
-    @Override
-    public int hashCode() {
-        final int prime = 31;
-        int result = 1;
-        result = prime * result + ((getId() == null) ? 0 : getId().hashCode());
-        return result;
-    }
-
-    /**
-     * Two services are equal if they have the same id.
-     */
-    @Override
-    public boolean equals(Object obj) {
-        if (this == obj)
-            return true;
-        if (obj == null)
-            return false;
-        if (getClass() != obj.getClass())
-            return false;
-        LegacyService other = (LegacyService) obj;
-        if (getId() == null) {
-            if (other.getId() != null)
-                return false;
-        } else if (!getId().equals(other.getId()))
-            return false;
-        return true;
-    }
-
-    @Override
-    public SizeDimension getSize() {
-        return theRealActivity.getLoadSize();
-    }
-
-    @Override
-    public Skills getRequiredSkills() {
-        return theRealJob.getRequiredSkills();
-    }
-
-    @Override
-    public String getName() {
-        return theRealJob.getName();
-    }
-
-    /**
-     * Get priority of service. Only 1 = high priority, 2 = medium and 3 = low are allowed.
-     * <p>
-     * Default is 2 = medium.
-     *
-     * @return priority
-     */
-    @Override
-    public int getPriority() {
-        return theRealJob.getPriority();
-    }
-
-    @Override
-    public Object getUserData() {
-        return theRealJob.getUserData();
-    }
-
-    @Override
-    protected void createActivities(JobBuilder<? extends AbstractJob, ?> jobBuilder) {
-        // This is unused being a legacy implementation
-    }
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java
index 08f1901b6..9751fa236 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java
@@ -17,56 +17,439 @@
  */
 package com.graphhopper.jsprit.core.problem.job;
 
+import java.util.Collection;
+
+import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
+import com.graphhopper.jsprit.core.problem.Skills;
+import com.graphhopper.jsprit.core.problem.job.CustomJob.BuilderBase.ActivityType;
+import com.graphhopper.jsprit.core.problem.job.CustomJob.BuilderBase.BuilderActivityInfo;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.ServiceActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindowsImpl;
+import com.graphhopper.jsprit.core.util.Coordinate;
 
 /**
  * Service implementation of a job.
- * <p>
- * <p>
- * <p>Note that two services are equal if they have the same id.
+ *
+ * @deprecated Use {@linkplain CustomJob} instead
+ *
+ *
+ *             <p>
+ *             <h1><em>Warning!</em></h1>
+ *             </p>
+ *
+ *             <p>
+ *             <strong>This class is deprecated and only available for backward
+ *             compatibility and for easier migration.</strong>
+ *             </p>
+ *             <p>
+ *             This class wraps a new CustomJob instance and delegates its
+ *             values and the values from its sole activity. It is strongly
+ *             recommended to switch to the {@linkplain CustomJob} and use one
+ *             of the following functions of its builder to add the service
+ *             activity:
+ *
+ *             <ul>
+ *             <li>{@linkplain CustomJob.Builder#addService(Location)}</li>
+ *             <li>
+ *             {@linkplain CustomJob.Builder#addService(Location, SizeDimension)}
+ *             </li>
+ *             <li>
+ *             {@linkplain CustomJob.Builder#addService(Location, SizeDimension, double)}
+ *             </li>
+ *             <li>
+ *             {@linkplain CustomJob.Builder#addService(Location, SizeDimension, double, TimeWindow)}
+ *             </li>
+ *             </ul>
+ *
+ *             or if you need more control on the activity, use the
+ *             {@linkplain CustomJob.Builder#addActivity(BuilderActivityInfo)}
+ *             function:
+ *
+ *             <pre>
+ *    BuilderActivityInfo activityInfo = new BuilderActivityInfo(ActivityType.SERVICE, <i>location</i>);
+
+        activityInfo.withName(<i>activity name</i>);
+        activityInfo.withOperationTime(<i>serviceTime</i>);
+        activityInfo.withSize((SizeDimension) <i>capacity</i>);
+        activityInfo.withTimeWindows(<i>timeWindows</i>);
+        activityInfo.withTimeWindow(<i>timeWindow</i>);
+
+        CustomJob.Builder customJobBuilder = new CustomJob.Builder(<i>id</i>);
+        customJobBuilder
+            .addActivity(activityInfo)
+            .addAllRequiredSkills(<i>skills<i>)
+            .setName(<i>job name</i>)
+            .setPriority(<i>priority</i>);
+
+        job = customJobBuilder.build();
+ *             </pre>
+ *
+ *             </p>
  *
  * @author schroeder
+ * @author Balage
+ *
+ * @see {@linkplain CustomJob}
+ * @see {@linkplain CustomJob.Builder}
+ * @see {@linkplain CustomJob.BuilderBase.BuilderActivityInfo}
  */
-public class Service extends AbstractSingleActivityJob<ServiceActivity> {
+@Deprecated
+public class Service extends AbstractJob {
+
+    /**
+     * Builder that builds a service.
+     *
+     * @author schroeder
+     */
+    public static class Builder<T extends Service> {
+
+        /**
+         * Returns a new instance of builder that builds a service.
+         *
+         * @param id the id of the service
+         * @return the builder
+         */
+        public static Builder newInstance(String id) {
+            return new Builder(id);
+        }
+
+        private String id;
+
+        protected String locationId;
+
+        private String type = "service";
+
+        protected Coordinate coord;
+
+        protected double serviceTime;
+
+        protected TimeWindow timeWindow = TimeWindow.newInstance(0.0, Double.MAX_VALUE);
+
+        protected Capacity.Builder capacityBuilder = Capacity.Builder.newInstance();
 
+        protected Capacity capacity;
 
-    public static final class Builder
-    extends AbstractSingleActivityJob.BuilderBase<Service, Builder> {
+        protected Skills.Builder skillBuilder = Skills.Builder.newInstance();
 
-        public Builder(String id) {
-            super(id);
-            setType("pickup");
+        protected Skills skills;
+
+        private String name = "no-name";
+
+        protected Location location;
+
+        protected TimeWindowsImpl timeWindows;
+
+        private boolean twAdded = false;
+
+        private int priority = 2;
+
+        protected Object userData;
+
+        Builder(String id){
+            this.id = id;
+            timeWindows = new TimeWindowsImpl();
+            timeWindows.add(timeWindow);
         }
 
-        public static Builder newInstance(String id) {
-            return new Builder(id);
+        /**
+         * Protected method to set the type-name of the service.
+         * <p>
+         * <p>Currently there are {@link Service}, {@link Pickup} and {@link Delivery}.
+         *
+         * @param name the name of service
+         * @return the builder
+         */
+        protected Builder<T> setType(String name) {
+            this.type = name;
+            return this;
+        }
+
+        /**
+         * Sets location
+         *
+         * @param location location
+         * @return builder
+         */
+        public Builder<T> setLocation(Location location) {
+            this.location = location;
+            return this;
+        }
+
+        /**
+         * Sets the serviceTime of this service.
+         * <p>
+         * <p>It is understood as time that a service or its implied activity takes at the service-location, for instance
+         * to unload goods.
+         *
+         * @param serviceTime the service time / duration of service to be set
+         * @return builder
+         * @throws IllegalArgumentException if serviceTime < 0
+         */
+        public Builder<T> setServiceTime(double serviceTime) {
+            if (serviceTime < 0)
+                throw new IllegalArgumentException("serviceTime must be greater than or equal to zero");
+            this.serviceTime = serviceTime;
+            return this;
+        }
+
+        /**
+         * Sets user specific domain data associated with the object.
+         *
+         * <p>
+         * The user data is a black box for the framework, it only stores it,
+         * but never interacts with it in any way.
+         * </p>
+         *
+         * @param userData
+         *            any object holding the domain specific user data
+         *            associated with the object.
+         * @return builder
+         */
+        public Builder<T> setUserData(Object userData) {
+            this.userData = userData;
+            return this;
+        }
+
+        /**
+         * Adds capacity dimension.
+         *
+         * @param dimensionIndex the dimension index of the capacity value
+         * @param dimensionValue the capacity value
+         * @return the builder
+         * @throws IllegalArgumentException if dimensionValue < 0
+         */
+        public Builder<T> addSizeDimension(int dimensionIndex, int dimensionValue) {
+            if (dimensionValue < 0) throw new IllegalArgumentException("capacity value cannot be negative");
+            capacityBuilder.addDimension(dimensionIndex, dimensionValue);
+            return this;
+        }
+
+        public Builder<T> setTimeWindow(TimeWindow tw){
+            if(tw == null) throw new IllegalArgumentException("time-window arg must not be null");
+            this.timeWindow = tw;
+            this.timeWindows = new TimeWindowsImpl();
+            timeWindows.add(tw);
+            return this;
+        }
+
+        public Builder<T> addTimeWindow(TimeWindow timeWindow) {
+            if(timeWindow == null) throw new IllegalArgumentException("time-window arg must not be null");
+            if(!twAdded){
+                timeWindows = new TimeWindowsImpl();
+                twAdded = true;
+            }
+            timeWindows.add(timeWindow);
+            return this;
+        }
+
+        public Builder<T> addTimeWindow(double earliest, double latest) {
+            return addTimeWindow(TimeWindow.newInstance(earliest, latest));
+        }
+
+        /**
+         * Builds the service.
+         *
+         * @return {@link Service}
+         * @throws IllegalArgumentException if neither locationId nor coordinate is set.
+         */
+        public T build() {
+            if (location == null) throw new IllegalArgumentException("location is missing");
+            this.setType("service");
+            capacity = capacityBuilder.build();
+            skills = skillBuilder.build();
+            return (T) new Service(this);
         }
 
-        @Override
-        protected Service createInstance() {
-            return new Service(this);
+        public Builder<T> addRequiredSkill(String skill) {
+            skillBuilder.addSkill(skill);
+            return this;
         }
+
+        public Builder<T> setName(String name) {
+            this.name = name;
+            return this;
+        }
+
+        public Builder<T> addAllRequiredSkills(Skills skills){
+            for(String s : skills.values()){
+                skillBuilder.addSkill(s);
+            }
+            return this;
+        }
+
+        public Builder<T> addAllSizeDimensions(Capacity size){
+            for(int i=0;i<size.getNuOfDimensions();i++){
+                capacityBuilder.addDimension(i,size.get(i));
+            }
+            return this;
+        }
+
+        /**
+         * Set priority to service. Only 1 (very high) to 10 (very low) are allowed.
+         * <p>
+         * Default is 2.
+         *
+         * @param priority
+         * @return builder
+         */
+        public Builder<T> setPriority(int priority) {
+            if (priority < 1 || priority > 10)
+                throw new IllegalArgumentException("incorrect priority. only priority values from 1 to 10 are allowed where 1 = high and 10 is low");
+            this.priority = priority;
+            return this;
+        }
+    }
+
+
+    private CustomJob theRealJob;
+    private ServiceActivity theRealActivity;
+
+    Service(Builder<?> builder) {
+        BuilderActivityInfo activityInfo = new BuilderActivityInfo(ActivityType.SERVICE,
+                builder.location);
+
+        activityInfo.withName(builder.name);
+        activityInfo.withOperationTime(builder.serviceTime);
+        // Safe cast because SizeDimension is the only implementation of
+        // Capacity
+        activityInfo.withSize((SizeDimension) builder.capacity);
+        activityInfo.withTimeWindows(builder.timeWindows.getTimeWindows());
+
+        CustomJob.Builder customJobBuilder = new CustomJob.Builder(builder.id);
+        customJobBuilder.addActivity(activityInfo).addAllRequiredSkills(builder.skills)
+        .setName(builder.name)
+        .addUserData(builder.userData)
+        .setPriority(builder.priority);
+        theRealJob = customJobBuilder.build();
+        theRealActivity = (ServiceActivity) theRealJob.getActivityList().getAll().get(0);
+    }
+
+    @Override
+    public Collection<TimeWindow> getTimeWindows() {
+        return theRealJob.getTimeWindows();
+    }
+
+    @Override
+    public String getId() {
+        return theRealJob.getId();
+    }
+
+    /**
+     * Returns location.
+     *
+     * @return location
+     */
+    public Location getLocation() {
+        return theRealActivity.getLocation();
+    }
+
+
+    /**
+     * Returns the service-time/duration a service takes at service-location.
+     *
+     * @return service duration
+     */
+    public double getServiceDuration() {
+        return theRealActivity.getOperationTime();
     }
 
-    Service(Builder builder) {
-        super(builder);
+    /**
+     * Returns the time-window a service(-operation) is allowed to start.
+     * It is recommended to use getTimeWindows() instead. If you still use this, it returns the first time window of getTimeWindows() collection.
+     *
+     * @return time window
+     *
+     */
+    public TimeWindow getTimeWindow() {
+        return theRealActivity.getSingleTimeWindow();
+    }
+
+    /**
+     * @return the name
+     */
+    public String getType() {
+        return "service";
+    }
+
+    /**
+     * Returns a string with the service's attributes.
+     * <p>
+     * <p>String is built as follows: [attr1=val1][attr2=val2]...
+     */
+    @Override
+    public String toString() {
+        return "[id=" + getId() + "][name=" + getName() + "][type=" + getType() + "][location="
+                + getLocation() + "][capacity=" + getSize() + "][serviceTime="
+                + getServiceDuration() + "][timeWindow=" + getTimeWindow() + "]";
+    }
+
+
+    @Override
+    public int hashCode() {
+        final int prime = 31;
+        int result = 1;
+        result = prime * result + ((getId() == null) ? 0 : getId().hashCode());
+        return result;
+    }
+
+    /**
+     * Two services are equal if they have the same id.
+     */
+    @Override
+    public boolean equals(Object obj) {
+        if (this == obj)
+            return true;
+        if (obj == null)
+            return false;
+        if (getClass() != obj.getClass())
+            return false;
+        Service other = (Service) obj;
+        if (getId() == null) {
+            if (other.getId() != null)
+                return false;
+        } else if (!getId().equals(other.getId()))
+            return false;
+        return true;
+    }
+
+    @Override
+    public SizeDimension getSize() {
+        return theRealActivity.getLoadSize();
+    }
+
+    @Override
+    public Skills getRequiredSkills() {
+        return theRealJob.getRequiredSkills();
+    }
+
+    @Override
+    public String getName() {
+        return theRealJob.getName();
+    }
+
+    /**
+     * Get priority of service. Only 1 = high priority, 2 = medium and 3 = low are allowed.
+     * <p>
+     * Default is 2 = medium.
+     *
+     * @return priority
+     */
+    @Override
+    public int getPriority() {
+        return theRealJob.getPriority();
     }
 
     @Override
-    protected ServiceActivity createActivity(
-                    AbstractSingleActivityJob.BuilderBase<? extends AbstractSingleActivityJob<?>, ?> builder) {
-        return new ServiceActivity(this, builder.type,
-                        builder.location, builder.serviceTime, builder.getCapacity(),
-                        builder.timeWindows.getTimeWindows());
-        // return new PickupActivityNEW(this, builder.type, builder.location,
-        // builder.serviceTime,
-        // builder.getCapacity(), builder.timeWindows.getTimeWindows());
+    public Object getUserData() {
+        return theRealJob.getUserData();
     }
 
-    @SuppressWarnings("unchecked")
     @Override
-    public Builder getBuilder(String id) {
-        return Builder.newInstance(id);
+    protected void createActivities(JobBuilder<? extends AbstractJob, ?> jobBuilder) {
+        // This is unused being a legacy implementation
     }
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/ServiceJob.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/ServiceJob.java
new file mode 100644
index 000000000..ca6e496aa
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/ServiceJob.java
@@ -0,0 +1,72 @@
+/*
+ * Licensed to GraphHopper GmbH under one or more contributor
+ * license agreements. See the NOTICE file distributed with this work for
+ * additional information regarding copyright ownership.
+ *
+ * GraphHopper GmbH licenses this file to you under the Apache License,
+ * Version 2.0 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.graphhopper.jsprit.core.problem.job;
+
+import com.graphhopper.jsprit.core.problem.solution.route.activity.ServiceActivity;
+
+/**
+ * Service implementation of a job.
+ * <p>
+ * <p>
+ * <p>Note that two services are equal if they have the same id.
+ *
+ * @author schroeder
+ */
+public class ServiceJob extends AbstractSingleActivityJob<ServiceActivity> {
+
+
+    public static final class Builder
+    extends AbstractSingleActivityJob.BuilderBase<ServiceJob, Builder> {
+
+        public Builder(String id) {
+            super(id);
+            setType("pickup");
+        }
+
+        public static Builder newInstance(String id) {
+            return new Builder(id);
+        }
+
+        @Override
+        protected ServiceJob createInstance() {
+            return new ServiceJob(this);
+        }
+    }
+
+    ServiceJob(Builder builder) {
+        super(builder);
+    }
+
+    @Override
+    protected ServiceActivity createActivity(
+                    AbstractSingleActivityJob.BuilderBase<? extends AbstractSingleActivityJob<?>, ?> builder) {
+        return new ServiceActivity(this, builder.type,
+                        builder.location, builder.serviceTime, builder.getCapacity(),
+                        builder.timeWindows.getTimeWindows());
+        // return new PickupActivityNEW(this, builder.type, builder.location,
+        // builder.serviceTime,
+        // builder.getCapacity(), builder.timeWindows.getTimeWindows());
+    }
+
+    @SuppressWarnings("unchecked")
+    @Override
+    public Builder getBuilder(String id) {
+        return Builder.newInstance(id);
+    }
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java
index cfb07e966..653543ab6 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java
@@ -30,7 +30,7 @@
  * of something.
  * <p>
  * <p>
- * It distinguishes itself from {@link Service} as two locations are involved a
+ * It distinguishes itself from {@link ServiceJob} as two locations are involved a
  * pickup where usually something is loaded to the transport unit and a delivery
  * where something is unloaded.
  * <p>
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java
index e41b27ce3..4e7365c76 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java
@@ -25,7 +25,7 @@
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Break;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
@@ -211,7 +211,7 @@ private static Jobs getNuOfJobs(VehicleRoutingProblem problem) {
             if (j instanceof Shipment) {
                 nShipments++;
             }
-            if (j instanceof Service) {
+            if (j instanceof ServiceJob) {
                 nServices++;
             }
             if (j instanceof Break) {
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/DeactivateTimeWindowsTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/DeactivateTimeWindowsTest.java
index f6be8e77c..a8ba0a7b4 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/DeactivateTimeWindowsTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/DeactivateTimeWindowsTest.java
@@ -31,7 +31,7 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
@@ -44,8 +44,8 @@
 
     @Before
     public void doBefore() {
-        Service service = new Service.Builder("s").setLocation(Location.newInstance(20, 0))
-                        .setTimeWindow(TimeWindow.newInstance(40, 50)).build();
+        ServiceJob service = new ServiceJob.Builder("s").setLocation(Location.newInstance(20, 0))
+                .setTimeWindow(TimeWindow.newInstance(40, 50)).build();
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         vrp = VehicleRoutingProblem.Builder.newInstance().addJob(service).addVehicle(vehicle).build();
 
@@ -69,7 +69,7 @@ public void whenActivatingViaStateManager_activityTimesShouldConsiderTimeWindows
         constraintManager.addTimeWindowConstraint();
 
         VehicleRoutingAlgorithm vra = Jsprit.Builder.newInstance(vrp).addCoreStateAndConstraintStuff(true)
-                        .setStateAndConstraintManager(stateManager, constraintManager).buildAlgorithm();
+                .setStateAndConstraintManager(stateManager, constraintManager).buildAlgorithm();
         vra.setMaxIterations(10);
         Collection<VehicleRoutingProblemSolution> solutions = vra.searchSolutions();
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ExternalInitialSolutionIsInValidTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ExternalInitialSolutionIsInValidTest.java
index 601755416..bc7d1a8e4 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ExternalInitialSolutionIsInValidTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ExternalInitialSolutionIsInValidTest.java
@@ -27,7 +27,7 @@
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
@@ -38,8 +38,8 @@
     @Test
     public void itShouldSolveProblemWithIniSolutionExternallyCreated() {
 
-        Service s1 = new Service.Builder("s1").setLocation(Location.newInstance(10, 0)).build();
-        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(0, 10)).build();
+        ServiceJob s1 = new ServiceJob.Builder("s1").setLocation(Location.newInstance(10, 0)).build();
+        ServiceJob s2 = new ServiceJob.Builder("s2").setLocation(Location.newInstance(0, 10)).build();
 
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v1").setStartLocation(Location.newInstance(0, 0)).build();
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/IgnoreBreakTimeWindowTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/IgnoreBreakTimeWindowTest.java
index 1afb0bdbd..be9f4de0d 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/IgnoreBreakTimeWindowTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/IgnoreBreakTimeWindowTest.java
@@ -26,7 +26,7 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Break;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.BreakActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
@@ -64,22 +64,22 @@ public void doNotIgnoreBreakTW() {
          */
 
 
-        Service service4 = new Service.Builder("2").setLocation(Location.newInstance(0, 0))
+        ServiceJob service4 = new ServiceJob.Builder("2").setLocation(Location.newInstance(0, 0))
                         .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(17, 17)).build();
 
-        Service service5 = new Service.Builder("3").setLocation(Location.newInstance(0, 0))
+        ServiceJob service5 = new ServiceJob.Builder("3").setLocation(Location.newInstance(0, 0))
                         .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(18, 18)).build();
 
-        Service service7 = new Service.Builder("4").setLocation(Location.newInstance(0, 0))
+        ServiceJob service7 = new ServiceJob.Builder("4").setLocation(Location.newInstance(0, 0))
                         .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(10, 10)).build();
 
-        Service service8 = new Service.Builder("5").setLocation(Location.newInstance(0, 0))
+        ServiceJob service8 = new ServiceJob.Builder("5").setLocation(Location.newInstance(0, 0))
                         .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(12, 12)).build();
 
-        Service service10 = new Service.Builder("6").setLocation(Location.newInstance(0, 0))
+        ServiceJob service10 = new ServiceJob.Builder("6").setLocation(Location.newInstance(0, 0))
                         .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(16, 16)).build();
 
-        Service service11 = new Service.Builder("7").setLocation(Location.newInstance(0, 0))
+        ServiceJob service11 = new ServiceJob.Builder("7").setLocation(Location.newInstance(0, 0))
                         .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(13, 13)).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance()
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/InitialRoutesTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/InitialRoutesTest.java
index ca6cb1cca..73276edaf 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/InitialRoutesTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/InitialRoutesTest.java
@@ -41,7 +41,7 @@
 import com.graphhopper.jsprit.core.problem.constraint.ServiceLoadActivityLevelConstraint;
 import com.graphhopper.jsprit.core.problem.constraint.ServiceLoadRouteLevelConstraint;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
@@ -64,8 +64,8 @@
     public void before() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         VehicleImpl v = VehicleImpl.Builder.newInstance("veh1").setStartLocation(Location.newInstance(0, 0)).setLatestArrival(48600).build();
-        Service s1 = new Service.Builder("s1").setLocation(Location.newInstance(1000, 0)).build();
-        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(1000, 1000)).build();
+        ServiceJob s1 = new ServiceJob.Builder("s1").setLocation(Location.newInstance(1000, 0)).build();
+        ServiceJob s2 = new ServiceJob.Builder("s2").setLocation(Location.newInstance(1000, 1000)).build();
         builder.addVehicle(v).addJob(s1).addJob(s2);
         initialRoute = VehicleRoute.Builder.newInstance(v).addService(s1).build();
         builder.addInitialVehicleRoute(initialRoute);
@@ -199,7 +199,7 @@ private boolean secondActIsPickup(Collection<VehicleRoutingProblemSolution> solu
 
     @Test
     public void whenAllJobsInInitialRoute_itShouldWork() {
-        Service s = new Service.Builder("s").setLocation(Location.newInstance(0, 10)).build();
+        ServiceJob s = new ServiceJob.Builder("s").setLocation(Location.newInstance(0, 10)).build();
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoute iniRoute = VehicleRoute.Builder.newInstance(v).addService(s).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addInitialVehicleRoute(iniRoute).build();
@@ -211,8 +211,8 @@ public void whenAllJobsInInitialRoute_itShouldWork() {
 
     @Test
     public void buildWithoutTimeConstraints() {
-        Service s1 = new Service.Builder("s1").setLocation(Location.newInstance(0, 10)).addSizeDimension(0, 10).build();
-        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(10, 20)).addSizeDimension(0, 12).build();
+        ServiceJob s1 = new ServiceJob.Builder("s1").setLocation(Location.newInstance(0, 10)).addSizeDimension(0, 10).build();
+        ServiceJob s2 = new ServiceJob.Builder("s2").setLocation(Location.newInstance(10, 20)).addSizeDimension(0, 12).build();
 
         VehicleTypeImpl vt = VehicleTypeImpl.Builder.newInstance("vt").addCapacityDimension(0, 15).build();
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setType(vt).setStartLocation(Location.newInstance(0, 0)).build();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/MeetTimeWindowConstraint_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/MeetTimeWindowConstraint_IT.java
index 703d3b017..b0c363988 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/MeetTimeWindowConstraint_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/MeetTimeWindowConstraint_IT.java
@@ -36,7 +36,7 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
@@ -60,9 +60,9 @@ public void doBefore() {
             .setEarliestStart(14400).setLatestArrival(46800).setType(type1).build();
         VehicleImpl vehicle2 = VehicleImpl.Builder.newInstance("19").setStartLocation(Location.newInstance(0, 0))
             .setEarliestStart(39600).setLatestArrival(64800).setType(type2).build();
-        Service service1 = new Service.Builder("2").setLocation(Location.newInstance(2000, 0))
+        ServiceJob service1 = new ServiceJob.Builder("2").setLocation(Location.newInstance(2000, 0))
             .setTimeWindow(TimeWindow.newInstance(54000, 54000)).build();
-        Service service2 = new Service.Builder("1").setLocation(Location.newInstance(1000, 1000))
+        ServiceJob service2 = new ServiceJob.Builder("1").setLocation(Location.newInstance(1000, 1000))
             .setTimeWindow(TimeWindow.newInstance(19800, 21600)).build();
         vrp = VehicleRoutingProblem.Builder.newInstance().addVehicle(vehicle1).addVehicle(vehicle2)
             .addJob(service1).addJob(service2).setFleetSize(VehicleRoutingProblem.FleetSize.FINITE).build();
@@ -321,19 +321,19 @@ private VehicleRoutingProblem createTWBugProblem() throws IOException {
         VehicleImpl v4 = VehicleImpl.Builder.newInstance("vehicle4").setStartLocation(Location.newInstance(0))
             .setEarliestStart(36000).setLatestArrival(54060).setType(type).build();
 
-        Service s1 = new Service.Builder("1").setLocation(Location.Builder.newInstance().setIndex(1).setId("js0").build())
+        ServiceJob s1 = new ServiceJob.Builder("1").setLocation(Location.Builder.newInstance().setIndex(1).setId("js0").build())
             .setServiceTime(600).setTimeWindow(TimeWindow.newInstance(0, 1800)).addSizeDimension(0, 1).build();
-        Service s2 = new Service.Builder("2").setLocation(Location.Builder.newInstance().setIndex(2).setId("js2").build())
+        ServiceJob s2 = new ServiceJob.Builder("2").setLocation(Location.Builder.newInstance().setIndex(2).setId("js2").build())
             .setServiceTime(600).setTimeWindow(TimeWindow.newInstance(5400, 7200)).addSizeDimension(0, 2).build();
-        Service s3 = new Service.Builder("3").setLocation(Location.Builder.newInstance().setIndex(3).setId("js5").build())
+        ServiceJob s3 = new ServiceJob.Builder("3").setLocation(Location.Builder.newInstance().setIndex(3).setId("js5").build())
             .setServiceTime(1800).setTimeWindow(TimeWindow.newInstance(17100, 18000)).addSizeDimension(0, 10).build();
-        Service s4 = new Service.Builder("4").setLocation(Location.Builder.newInstance().setIndex(4).setId("js4").build())
+        ServiceJob s4 = new ServiceJob.Builder("4").setLocation(Location.Builder.newInstance().setIndex(4).setId("js4").build())
             .setServiceTime(900).addSizeDimension(0, 2).build();
-        Service s5 = new Service.Builder("5").setLocation(Location.Builder.newInstance().setIndex(5).setId("js8").build())
+        ServiceJob s5 = new ServiceJob.Builder("5").setLocation(Location.Builder.newInstance().setIndex(5).setId("js8").build())
             .setServiceTime(600).addSizeDimension(0, 4).build();
-        Service s6 = new Service.Builder("6").setLocation(Location.Builder.newInstance().setIndex(6).setId("js10").build())
+        ServiceJob s6 = new ServiceJob.Builder("6").setLocation(Location.Builder.newInstance().setIndex(6).setId("js10").build())
             .setServiceTime(1500).setTimeWindow(TimeWindow.newInstance(29700, 32400)).addSizeDimension(0, 10).build();
-        Service s7 = new Service.Builder("7").setLocation(Location.Builder.newInstance().setIndex(7).setId("jsp3").build())
+        ServiceJob s7 = new ServiceJob.Builder("7").setLocation(Location.Builder.newInstance().setIndex(7).setId("jsp3").build())
             .setServiceTime(5594).build();
 
         Shipment shipment1 = Shipment.Builder.newInstance("shipment1")
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/MultipleTimeWindowsTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/MultipleTimeWindowsTest.java
index 49b38cd72..43034049e 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/MultipleTimeWindowsTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/MultipleTimeWindowsTest.java
@@ -25,7 +25,7 @@
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.util.Solutions;
@@ -37,9 +37,9 @@
 
     @Test
     public void service2ShouldNotBeInserted() {
-        Service s = new Service.Builder("s1").setLocation(Location.newInstance(10, 0)).build();
+        ServiceJob s = new ServiceJob.Builder("s1").setLocation(Location.newInstance(10, 0)).build();
 
-        Service s2 = new Service.Builder("s2")
+        ServiceJob s2 = new ServiceJob.Builder("s2")
                         .addTimeWindow(50., 60.)
                         .setLocation(Location.newInstance(20, 0)).build();
 
@@ -56,10 +56,10 @@ public void service2ShouldNotBeInserted() {
 
     @Test
     public void service2ShouldBeInsertedIntoNewVehicle() {
-        Service s = new Service.Builder("s1").setLocation(Location.newInstance(10, 0))
+        ServiceJob s = new ServiceJob.Builder("s1").setLocation(Location.newInstance(10, 0))
                         .addTimeWindow(5., 15.).build();
 
-        Service s2 = new Service.Builder("s2")
+        ServiceJob s2 = new ServiceJob.Builder("s2")
                         .addTimeWindow(50., 60.)
                         .setLocation(Location.newInstance(20, 0)).build();
 
@@ -80,9 +80,9 @@ public void service2ShouldBeInsertedIntoNewVehicle() {
 
     @Test
     public void service2ShouldBeInserted() {
-        Service s = new Service.Builder("s1").setLocation(Location.newInstance(10, 0)).build();
+        ServiceJob s = new ServiceJob.Builder("s1").setLocation(Location.newInstance(10, 0)).build();
 
-        Service s2 = new Service.Builder("s2")
+        ServiceJob s2 = new ServiceJob.Builder("s2")
                         .addTimeWindow(50., 60.).addTimeWindow(15., 25)
                         .setLocation(Location.newInstance(20, 0)).build();
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/OpenRoutesTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/OpenRoutesTest.java
index 0c0d0d368..cba8350ea 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/OpenRoutesTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/OpenRoutesTest.java
@@ -30,7 +30,7 @@
 import com.graphhopper.jsprit.core.distance.SphericalDistanceCalculator;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
@@ -76,7 +76,7 @@ public void whenDealingWithOpenRoute_insertionShouldNotRequireRouteToBeClosed()
                         .setStartLocation(TestUtils.loc(Coordinate.newInstance(0, 0)))
                         .build();
 
-        Service service = new Service.Builder("s")
+        ServiceJob service = new ServiceJob.Builder("s")
                         .setLocation(TestUtils.loc(Coordinate.newInstance(5, 0)))
                         .build();
 
@@ -126,7 +126,7 @@ public void whenDealingWithOpenRoute_algorithmShouldCalculateCorrectCosts() {
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v").setLatestArrival(10.)
                         .setType(type).setReturnToDepot(false).setStartLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(0, 0)).build()).build();
 
-        Service service = new Service.Builder("s")
+        ServiceJob service = new ServiceJob.Builder("s")
                         .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(5, 0)).build()).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(service).addVehicle(vehicle).build();
@@ -148,7 +148,7 @@ public void whenDealingWithOpenRouteAndGreatCircleCost_algorithmShouldRunWithout
                         .setStartLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(0, 0)).build())
                         .build();
 
-        Service service = new Service.Builder("s")
+        ServiceJob service = new ServiceJob.Builder("s")
                         .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(50, 0)).build()).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance()
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollectionWithCostsHigherThanTimesAndFiniteFleet_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollectionWithCostsHigherThanTimesAndFiniteFleet_IT.java
index 627ad6998..bfe3a90c8 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollectionWithCostsHigherThanTimesAndFiniteFleet_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollectionWithCostsHigherThanTimesAndFiniteFleet_IT.java
@@ -30,7 +30,7 @@
 import com.graphhopper.jsprit.core.algorithm.box.GreedySchrimpfFactory;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
@@ -105,7 +105,7 @@ private void readDemandQuantities(VehicleRoutingProblem.Builder vrpBuilder) thro
             /*
              * build service
 			 */
-            Service service = new Service.Builder(lineTokens[0]).addSizeDimension(0, Integer.parseInt(lineTokens[1]))
+            ServiceJob service = new ServiceJob.Builder(lineTokens[0]).addSizeDimension(0, Integer.parseInt(lineTokens[1]))
                 .setLocation(Location.newInstance(lineTokens[0])).build();
             /*
              * and add it to problem
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollectionWithCostsHigherThanTimesAndFiniteFleet_withTimeAndDistanceCosts_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollectionWithCostsHigherThanTimesAndFiniteFleet_withTimeAndDistanceCosts_IT.java
index df36105fb..ec5d6d7cb 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollectionWithCostsHigherThanTimesAndFiniteFleet_withTimeAndDistanceCosts_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollectionWithCostsHigherThanTimesAndFiniteFleet_withTimeAndDistanceCosts_IT.java
@@ -31,7 +31,7 @@
 import com.graphhopper.jsprit.core.algorithm.termination.IterationWithoutImprovementTermination;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
@@ -106,7 +106,7 @@ private void readDemandQuantities(VehicleRoutingProblem.Builder vrpBuilder) thro
             /*
              * build service
 			 */
-            Service service = new Service.Builder(lineTokens[0]).addSizeDimension(0, Integer.parseInt(lineTokens[1]))
+            ServiceJob service = new ServiceJob.Builder(lineTokens[0]).addSizeDimension(0, Integer.parseInt(lineTokens[1]))
                 .setLocation(Location.newInstance(lineTokens[0])).build();
             /*
              * and add it to problem
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollection_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollection_IT.java
index 5e1975bfc..916de89b3 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollection_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollection_IT.java
@@ -35,7 +35,7 @@
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Delivery;
 import com.graphhopper.jsprit.core.problem.job.Pickup;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
@@ -228,7 +228,7 @@ private void readDemandQuantitiesAsServices(VehicleRoutingProblem.Builder vrpBui
             /*
              * build service
              */
-            Service service = new Service.Builder(lineTokens[0]).addSizeDimension(0, Integer.parseInt(lineTokens[1]))
+            ServiceJob service = new ServiceJob.Builder(lineTokens[0]).addSizeDimension(0, Integer.parseInt(lineTokens[1]))
                             .setLocation(Location.newInstance(lineTokens[0])).build();
             /*
              * and add it to problem
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/SolomonSkills_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/SolomonSkills_IT.java
index cdadb01d4..a426017a1 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/SolomonSkills_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/SolomonSkills_IT.java
@@ -30,7 +30,7 @@
 import com.graphhopper.jsprit.core.problem.Skills;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.ServiceActivity;
@@ -69,9 +69,9 @@ public void itShouldMakeCorrectAssignmentAccordingToSkills() {
             skillProblemBuilder.addVehicle(skill1Vehicle).addVehicle(skill2Vehicle);
         }
         for (Job job : vrp.getJobs().values()) {
-            Service service = (Service) job;
+            ServiceJob service = (ServiceJob) job;
             ServiceActivity activity = service.getActivity();
-            Service.Builder skillServiceBuilder = new Service.Builder(service.getId())
+            ServiceJob.Builder skillServiceBuilder = new ServiceJob.Builder(service.getId())
                             .setServiceTime(activity.getOperationTime())
                             .setLocation(TestUtils.loc(activity.getLocation().getId(),
                                             activity.getLocation().getCoordinate()))
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/UnassignedJobListTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/UnassignedJobListTest.java
index aa21d5b32..07d75bc36 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/UnassignedJobListTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/UnassignedJobListTest.java
@@ -27,7 +27,7 @@
 import com.graphhopper.jsprit.core.algorithm.box.GreedySchrimpfFactory;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
@@ -39,9 +39,9 @@
     public void job2ShouldBeInBadJobList_dueToTimeWindow() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         builder.addVehicle(VehicleImpl.Builder.newInstance("v1").setEarliestStart(0).setLatestArrival(12).setStartLocation(Location.newInstance(1, 1)).build());
-        Service job1 = new Service.Builder("job1").setLocation(Location.newInstance(0, 0)).setTimeWindow(TimeWindow.newInstance(0, 12)).setServiceTime(1).build();
+        ServiceJob job1 = new ServiceJob.Builder("job1").setLocation(Location.newInstance(0, 0)).setTimeWindow(TimeWindow.newInstance(0, 12)).setServiceTime(1).build();
         builder.addJob(job1);
-        Service job2 = new Service.Builder("job2").setLocation(Location.newInstance(2, 2)).setTimeWindow(TimeWindow.newInstance(12, 24)).setServiceTime(1).build();
+        ServiceJob job2 = new ServiceJob.Builder("job2").setLocation(Location.newInstance(2, 2)).setTimeWindow(TimeWindow.newInstance(12, 24)).setServiceTime(1).build();
         builder.addJob(job2);
 
         VehicleRoutingProblem vrp = builder.build();
@@ -58,9 +58,9 @@ public void job2ShouldBeInBadJobList_dueToTimeWindow() {
     public void job2ShouldBeInBadJobList_dueToSize() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         builder.addVehicle(VehicleImpl.Builder.newInstance("v1").setEarliestStart(0).setLatestArrival(12).setStartLocation(Location.newInstance(1, 1)).build());
-        Service job1 = new Service.Builder("job1").setLocation(Location.newInstance(0, 0)).setTimeWindow(TimeWindow.newInstance(0, 12)).setServiceTime(1).build();
+        ServiceJob job1 = new ServiceJob.Builder("job1").setLocation(Location.newInstance(0, 0)).setTimeWindow(TimeWindow.newInstance(0, 12)).setServiceTime(1).build();
         builder.addJob(job1);
-        Service job2 = new Service.Builder("job2").setLocation(Location.newInstance(2, 2)).addSizeDimension(0, 10).setTimeWindow(TimeWindow.newInstance(0, 12)).setServiceTime(1).build();
+        ServiceJob job2 = new ServiceJob.Builder("job2").setLocation(Location.newInstance(2, 2)).addSizeDimension(0, 10).setTimeWindow(TimeWindow.newInstance(0, 12)).setServiceTime(1).build();
         builder.addJob(job2);
 
         VehicleRoutingProblem vrp = builder.build();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/VariableDepartureAndWaitingTime_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/VariableDepartureAndWaitingTime_IT.java
index b8c860f81..e9bf971b1 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/VariableDepartureAndWaitingTime_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/VariableDepartureAndWaitingTime_IT.java
@@ -33,7 +33,7 @@
 import com.graphhopper.jsprit.core.problem.cost.TransportDistance;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingActivityCosts;
 import com.graphhopper.jsprit.core.problem.driver.Driver;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.SolutionCostCalculator;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
@@ -100,8 +100,8 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
     @Test
     public void plainSetupShouldWork() {
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
-        Service s1 = new Service.Builder("s1").setLocation(Location.newInstance(10, 0)).build();
-        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(20, 0)).build();
+        ServiceJob s1 = new ServiceJob.Builder("s1").setLocation(Location.newInstance(10, 0)).build();
+        ServiceJob s2 = new ServiceJob.Builder("s2").setLocation(Location.newInstance(20, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance()
                         .addJob(s1).addJob(s2).addVehicle(v)
                         .setFleetSize(VehicleRoutingProblem.FleetSize.FINITE)
@@ -116,8 +116,8 @@ public void plainSetupShouldWork() {
     @Test
     public void withTimeWindowsShouldWork() {
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
-        Service s1 = new Service.Builder("s1").setTimeWindow(TimeWindow.newInstance(1010, 1100)).setLocation(Location.newInstance(10, 0)).build();
-        Service s2 = new Service.Builder("s2").setTimeWindow(TimeWindow.newInstance(1020, 1100)).setLocation(Location.newInstance(20, 0)).build();
+        ServiceJob s1 = new ServiceJob.Builder("s1").setTimeWindow(TimeWindow.newInstance(1010, 1100)).setLocation(Location.newInstance(10, 0)).build();
+        ServiceJob s2 = new ServiceJob.Builder("s2").setTimeWindow(TimeWindow.newInstance(1020, 1100)).setLocation(Location.newInstance(20, 0)).build();
         final VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance()
                         .addJob(s1).addJob(s2).addVehicle(v)
                         .setFleetSize(VehicleRoutingProblem.FleetSize.FINITE)
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/box/JspritTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/box/JspritTest.java
index 8ae4d1e4f..e30a09f01 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/box/JspritTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/box/JspritTest.java
@@ -40,7 +40,7 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
@@ -54,7 +54,7 @@
 
     @Test
     public void whenRunningJspritWithSingleCustomer_itShouldWork() {
-        Service s = new Service.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
+        ServiceJob s = new ServiceJob.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addVehicle(v).addJob(s).build();
         VehicleRoutingAlgorithm vra = Jsprit.createAlgorithm(vrp);
@@ -85,8 +85,8 @@ private void count(String strategyId) {
 
     @Test
     public void whenActivatingStrat_itShouldBeReflected() {
-        Service s = new Service.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
-        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(1, 2)).build();
+        ServiceJob s = new ServiceJob.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
+        ServiceJob s2 = new ServiceJob.Builder("s2").setLocation(Location.newInstance(1, 2)).build();
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addVehicle(v).addJob(s2).addJob(s).build();
         VehicleRoutingAlgorithm vra = Jsprit.Builder.newInstance(vrp)
@@ -115,9 +115,9 @@ private void count(String strategyId) {
 
     @Test
     public void whenActivatingStrat_itShouldBeReflectedV2() {
-        Service s = new Service.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
-        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(1, 2)).build();
-        Service s3 = new Service.Builder("s3").setLocation(Location.newInstance(1, 2)).build();
+        ServiceJob s = new ServiceJob.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
+        ServiceJob s2 = new ServiceJob.Builder("s2").setLocation(Location.newInstance(1, 2)).build();
+        ServiceJob s3 = new ServiceJob.Builder("s3").setLocation(Location.newInstance(1, 2)).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(s3).addVehicle(v).addJob(s2).addJob(s).build();
@@ -145,10 +145,10 @@ private void count(String strategyId) {
 
     @Test
     public void test_v4() {
-        Service s = new Service.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
-        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(1, 2)).build();
-        Service s3 = new Service.Builder("s3").setLocation(Location.newInstance(1, 2)).build();
-        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance(1, 2)).build();
+        ServiceJob s = new ServiceJob.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
+        ServiceJob s2 = new ServiceJob.Builder("s2").setLocation(Location.newInstance(1, 2)).build();
+        ServiceJob s3 = new ServiceJob.Builder("s3").setLocation(Location.newInstance(1, 2)).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").setLocation(Location.newInstance(1, 2)).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(s4).addJob(s3).addVehicle(v).addJob(s2).addJob(s).build();
@@ -177,10 +177,10 @@ private void count(String strategyId) {
 
     @Test
     public void strategyDrawShouldBeReproducible() {
-        Service s = new Service.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
-        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(1, 2)).build();
-        Service s3 = new Service.Builder("s3").setLocation(Location.newInstance(1, 2)).build();
-        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance(1, 2)).build();
+        ServiceJob s = new ServiceJob.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
+        ServiceJob s2 = new ServiceJob.Builder("s2").setLocation(Location.newInstance(1, 2)).build();
+        ServiceJob s3 = new ServiceJob.Builder("s3").setLocation(Location.newInstance(1, 2)).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").setLocation(Location.newInstance(1, 2)).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(s4).addJob(s3).addVehicle(v).addJob(s2).addJob(s).build();
@@ -222,10 +222,10 @@ public void informSelectedStrategy(SearchStrategy.DiscoveredSolution discoveredS
 
     @Test
     public void strategyDrawShouldBeReproducibleV2() {
-        Service s = new Service.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
-        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(1, 2)).build();
-        Service s3 = new Service.Builder("s3").setLocation(Location.newInstance(1, 2)).build();
-        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance(1, 2)).build();
+        ServiceJob s = new ServiceJob.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
+        ServiceJob s2 = new ServiceJob.Builder("s2").setLocation(Location.newInstance(1, 2)).build();
+        ServiceJob s3 = new ServiceJob.Builder("s3").setLocation(Location.newInstance(1, 2)).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").setLocation(Location.newInstance(1, 2)).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(s4).addJob(s3).addVehicle(v).addJob(s2).addJob(s).build();
@@ -267,10 +267,10 @@ public void informSelectedStrategy(SearchStrategy.DiscoveredSolution discoveredS
 
     @Test
     public void ruinedJobsShouldBeReproducible() {
-        Service s = new Service.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
-        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(1, 2)).build();
-        Service s3 = new Service.Builder("s3").setLocation(Location.newInstance(1, 2)).build();
-        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance(1, 2)).build();
+        ServiceJob s = new ServiceJob.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
+        ServiceJob s2 = new ServiceJob.Builder("s2").setLocation(Location.newInstance(1, 2)).build();
+        ServiceJob s3 = new ServiceJob.Builder("s3").setLocation(Location.newInstance(1, 2)).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").setLocation(Location.newInstance(1, 2)).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(s4).addJob(s3).addVehicle(v).addJob(s2).addJob(s).build();
@@ -332,10 +332,10 @@ public void removed(Job job, VehicleRoute fromRoute) {
 
     @Test
     public void ruinedJobsShouldBeReproducibleV2() {
-        Service s = new Service.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
-        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(1, 2)).build();
-        Service s3 = new Service.Builder("s3").setLocation(Location.newInstance(1, 2)).build();
-        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance(1, 2)).build();
+        ServiceJob s = new ServiceJob.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
+        ServiceJob s2 = new ServiceJob.Builder("s2").setLocation(Location.newInstance(1, 2)).build();
+        ServiceJob s3 = new ServiceJob.Builder("s3").setLocation(Location.newInstance(1, 2)).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").setLocation(Location.newInstance(1, 2)).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(s4).addJob(s3).addVehicle(v).addJob(s2).addJob(s).build();
@@ -391,10 +391,10 @@ public void removed(Job job, VehicleRoute fromRoute) {
 
     @Test
     public void insertionShouldBeReproducible() {
-        Service s = new Service.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
-        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(1, 2)).build();
-        Service s3 = new Service.Builder("s3").setLocation(Location.newInstance(1, 2)).build();
-        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance(1, 2)).build();
+        ServiceJob s = new ServiceJob.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
+        ServiceJob s2 = new ServiceJob.Builder("s2").setLocation(Location.newInstance(1, 2)).build();
+        ServiceJob s3 = new ServiceJob.Builder("s3").setLocation(Location.newInstance(1, 2)).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").setLocation(Location.newInstance(1, 2)).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(s4).addJob(s3).addVehicle(v).addJob(s2).addJob(s).build();
@@ -431,10 +431,10 @@ public void informJobInserted(Job job2insert, VehicleRoute inRoute, double addit
 
     @Test
     public void insertionShouldBeReproducibleV2() {
-        Service s = new Service.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
-        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(1, 1)).build();
-        Service s3 = new Service.Builder("s3").setLocation(Location.newInstance(1, 3)).build();
-        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance(1, 4)).build();
+        ServiceJob s = new ServiceJob.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
+        ServiceJob s2 = new ServiceJob.Builder("s2").setLocation(Location.newInstance(1, 1)).build();
+        ServiceJob s3 = new ServiceJob.Builder("s3").setLocation(Location.newInstance(1, 3)).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").setLocation(Location.newInstance(1, 4)).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().setFleetSize(VehicleRoutingProblem.FleetSize.FINITE).addJob(s4).addJob(s3).addVehicle(v).addJob(s2).addJob(s).build();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/CalcVehicleTypeDependentServiceInsertionTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/CalcVehicleTypeDependentServiceInsertionTest.java
index b54364f48..0c9ddfe56 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/CalcVehicleTypeDependentServiceInsertionTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/CalcVehicleTypeDependentServiceInsertionTest.java
@@ -31,7 +31,7 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleFleetManager;
@@ -45,7 +45,7 @@
     Vehicle veh1;
     Vehicle veh2;
     VehicleFleetManager fleetManager;
-    Service service;
+    ServiceJob service;
     VehicleRoute vehicleRoute;
 
     @Before
@@ -57,7 +57,7 @@ public void doBefore() {
         when(veh1.getStartLocation()).thenReturn(Location.newInstance("loc1"));
         when(veh2.getStartLocation()).thenReturn(Location.newInstance("loc2"));
         fleetManager = mock(VehicleFleetManager.class);
-        service = mock(Service.class);
+        service = mock(ServiceJob.class);
         vehicleRoute = mock(VehicleRoute.class);
 
         when(fleetManager.getAvailableVehicles()).thenReturn(Arrays.asList(veh1, veh2));
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ConfigureFixCostCalculatorTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ConfigureFixCostCalculatorTest.java
index b1c7bfab4..62efe6a4f 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ConfigureFixCostCalculatorTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ConfigureFixCostCalculatorTest.java
@@ -31,7 +31,7 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 
 /**
@@ -45,7 +45,7 @@
     public void before() {
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         for (int i = 0; i < 100; i++) {
-            Service service = new Service.Builder("" + i).setLocation(Location.newInstance(0)).build();
+            ServiceJob service = new ServiceJob.Builder("" + i).setLocation(Location.newInstance(0)).build();
             vrpBuilder.addJob(service);
         }
         vrp = vrpBuilder.build();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionWithServicesTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionWithServicesTest.java
index b5cd812df..836d11d4d 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionWithServicesTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionWithServicesTest.java
@@ -41,7 +41,7 @@
 import com.graphhopper.jsprit.core.problem.driver.Driver;
 import com.graphhopper.jsprit.core.problem.driver.DriverImpl;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
@@ -63,11 +63,11 @@
 
     VehicleImpl newVehicle;
 
-    private Service first;
+    private ServiceJob first;
 
-    private Service third;
+    private ServiceJob third;
 
-    private Service second;
+    private ServiceJob second;
 
     private StateManager states;
 
@@ -109,9 +109,9 @@ public double getTransportCost(Location from, Location to, double departureTime,
         };
 
 
-        first = new Service.Builder("1").addSizeDimension(0, 0).setLocation(Location.newInstance("0,10")).setTimeWindow(TimeWindow.newInstance(0.0, 100.0)).build();
-        second = new Service.Builder("2").addSizeDimension(0, 0).setLocation(Location.newInstance("10,10")).setTimeWindow(TimeWindow.newInstance(0.0, 100.0)).build();
-        third = new Service.Builder("3").addSizeDimension(0, 0).setLocation(Location.newInstance("10,0")).setTimeWindow(TimeWindow.newInstance(0.0, 100.0)).build();
+        first = new ServiceJob.Builder("1").addSizeDimension(0, 0).setLocation(Location.newInstance("0,10")).setTimeWindow(TimeWindow.newInstance(0.0, 100.0)).build();
+        second = new ServiceJob.Builder("2").addSizeDimension(0, 0).setLocation(Location.newInstance("10,10")).setTimeWindow(TimeWindow.newInstance(0.0, 100.0)).build();
+        third = new ServiceJob.Builder("3").addSizeDimension(0, 0).setLocation(Location.newInstance("10,0")).setTimeWindow(TimeWindow.newInstance(0.0, 100.0)).build();
 
         Collection<Job> jobs = new ArrayList<>();
         jobs.add(first);
@@ -201,7 +201,7 @@ public void whenInsertingASecondJobWithANewVehicle_itCalculatesLocalMarginalCost
     public void whenInsertingJobAndCurrRouteIsEmpty_accessEggressCalcShouldReturnZero() {
         VehicleRoute route = VehicleRoute.Builder.newInstance(VehicleImpl.createNoVehicle(), DriverImpl.noDriver()).build();
         AdditionalAccessEgressCalculator accessEgressCalc = new AdditionalAccessEgressCalculator(costs);
-        Job job = new Service.Builder("1").addSizeDimension(0, 0).setLocation(Location.newInstance("1")).setTimeWindow(TimeWindow.newInstance(0.0, 100.0)).build();
+        Job job = new ServiceJob.Builder("1").addSizeDimension(0, 0).setLocation(Location.newInstance("1")).setTimeWindow(TimeWindow.newInstance(0.0, 100.0)).build();
         JobInsertionContext iContex = new JobInsertionContext(route, job, newVehicle, mock(Driver.class), 0.0);
         assertEquals(0.0, accessEgressCalc.getCosts(iContex), 0.01);
     }
@@ -239,13 +239,13 @@ public double getTransportCost(Location from, Location to, double departureTime,
         Vehicle oldVehicle = VehicleImpl.Builder.newInstance("oldV").setStartLocation(Location.newInstance("oldV")).build();
 
         VehicleRoute route = VehicleRoute.Builder.newInstance(oldVehicle, DriverImpl.noDriver())
-            .addService(new Service.Builder("service").addSizeDimension(0, 0).setLocation(Location.newInstance("service")).build())
+            .addService(new ServiceJob.Builder("service").addSizeDimension(0, 0).setLocation(Location.newInstance("service")).build())
             .build();
 
         Vehicle newVehicle = VehicleImpl.Builder.newInstance("newV").setStartLocation(Location.newInstance("newV")).build();
 
         AdditionalAccessEgressCalculator accessEgressCalc = new AdditionalAccessEgressCalculator(routingCosts);
-        Job job = new Service.Builder("service2").addSizeDimension(0, 0).setLocation(Location.newInstance("service")).build();
+        Job job = new ServiceJob.Builder("service2").addSizeDimension(0, 0).setLocation(Location.newInstance("service")).build();
         JobInsertionContext iContex = new JobInsertionContext(route, job, newVehicle, mock(Driver.class), 0.0);
         assertEquals(8.0, accessEgressCalc.getCosts(iContex), 0.01);
     }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionTest.java
index d1e2c45df..84b96fa2c 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionTest.java
@@ -40,7 +40,7 @@
 import com.graphhopper.jsprit.core.problem.constraint.HardRouteConstraint;
 import com.graphhopper.jsprit.core.problem.driver.Driver;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
@@ -61,8 +61,8 @@
 
     @Test
     public void noRoutesShouldBeCorrect() {
-        Service s1 = new Service.Builder("s1").setLocation(Location.newInstance(0, 10)).build();
-        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(0, 5)).build();
+        ServiceJob s1 = new ServiceJob.Builder("s1").setLocation(Location.newInstance(0, 10)).build();
+        ServiceJob s2 = new ServiceJob.Builder("s2").setLocation(Location.newInstance(0, 5)).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(s1).addJob(s2).addVehicle(v).build();
@@ -78,8 +78,8 @@ public void noRoutesShouldBeCorrect() {
 
     @Test
     public void noJobsInRouteShouldBeCorrect() {
-        Service s1 = new Service.Builder("s1").setLocation(Location.newInstance(0, 10)).build();
-        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(0, 5)).build();
+        ServiceJob s1 = new ServiceJob.Builder("s1").setLocation(Location.newInstance(0, 10)).build();
+        ServiceJob s2 = new ServiceJob.Builder("s2").setLocation(Location.newInstance(0, 5)).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(s1).addJob(s2).addVehicle(v).build();
@@ -95,8 +95,8 @@ public void noJobsInRouteShouldBeCorrect() {
 
     @Test
     public void s1ShouldBeAddedFirst() {
-        Service s1 = new Service.Builder("s1").setLocation(Location.newInstance(0, 10)).build();
-        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(0, 5)).build();
+        ServiceJob s1 = new ServiceJob.Builder("s1").setLocation(Location.newInstance(0, 10)).build();
+        ServiceJob s2 = new ServiceJob.Builder("s2").setLocation(Location.newInstance(0, 5)).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         final VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(s1).addJob(s2).addVehicle(v).build();
@@ -114,8 +114,8 @@ public void s1ShouldBeAddedFirst() {
 
     @Test
     public void solutionWithFastRegretMustBeCorrect() {
-        Service s1 = new Service.Builder("s1").setLocation(Location.newInstance(0, 10)).build();
-        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(0, -10)).build();
+        ServiceJob s1 = new ServiceJob.Builder("s1").setLocation(Location.newInstance(0, 10)).build();
+        ServiceJob s2 = new ServiceJob.Builder("s2").setLocation(Location.newInstance(0, -10)).build();
 
         VehicleImpl v1 = VehicleImpl.Builder.newInstance("v1").setStartLocation(Location.newInstance(0, 5)).build();
         VehicleImpl v2 = VehicleImpl.Builder.newInstance("v2").setStartLocation(Location.newInstance(0, -5)).build();
@@ -218,10 +218,10 @@ public boolean fulfilled(JobInsertionContext insertionContext) {
 
     @Test
     public void solutionWithConstraintAndWithFastRegretMustBeCorrect() {
-        Service s1 = new Service.Builder("s1").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 10)).build();
-        Service s2 = new Service.Builder("s2").addSizeDimension(0, 1).setLocation(Location.newInstance(0, -10)).build();
-        Service s3 = new Service.Builder("s3").addSizeDimension(0, 1).setLocation(Location.newInstance(0, -11)).build();
-        Service s4 = new Service.Builder("s4").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 11)).build();
+        ServiceJob s1 = new ServiceJob.Builder("s1").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 10)).build();
+        ServiceJob s2 = new ServiceJob.Builder("s2").addSizeDimension(0, 1).setLocation(Location.newInstance(0, -10)).build();
+        ServiceJob s3 = new ServiceJob.Builder("s3").addSizeDimension(0, 1).setLocation(Location.newInstance(0, -11)).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 11)).build();
 
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0, 2).build();
         VehicleImpl v1 = VehicleImpl.Builder.newInstance("v1").setType(type).setStartLocation(Location.newInstance(0, 10)).build();
@@ -265,10 +265,10 @@ public void solutionWithConstraintAndWithFastRegretMustBeCorrect() {
 
     @Test
     public void solutionWithConstraintAndWithFastRegretConcurrentMustBeCorrect() {
-        Service s1 = new Service.Builder("s1").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 10)).build();
-        Service s2 = new Service.Builder("s2").addSizeDimension(0, 1).setLocation(Location.newInstance(0, -10)).build();
-        Service s3 = new Service.Builder("s3").addSizeDimension(0, 1).setLocation(Location.newInstance(0, -11)).build();
-        Service s4 = new Service.Builder("s4").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 11)).build();
+        ServiceJob s1 = new ServiceJob.Builder("s1").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 10)).build();
+        ServiceJob s2 = new ServiceJob.Builder("s2").addSizeDimension(0, 1).setLocation(Location.newInstance(0, -10)).build();
+        ServiceJob s3 = new ServiceJob.Builder("s3").addSizeDimension(0, 1).setLocation(Location.newInstance(0, -11)).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 11)).build();
 
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0, 2).build();
         VehicleImpl v1 = VehicleImpl.Builder.newInstance("v1").setType(type).setStartLocation(Location.newInstance(0, 10)).build();
@@ -377,7 +377,7 @@ private JobInsertionCostsCalculator getCalculator(final VehicleRoutingProblem vr
 
             @Override
             public InsertionData getInsertionData(VehicleRoute currentRoute, Job newJob, Vehicle newVehicle, double newVehicleDepartureTime, Driver newDriver, double bestKnownCosts) {
-                Service service = (Service) newJob;
+                ServiceJob service = (ServiceJob) newJob;
                 Vehicle vehicle = vrp.getVehicles().iterator().next();
                 InsertionData iData;
                 if (currentRoute.isEmpty()) {
@@ -412,7 +412,7 @@ public InsertionData getInsertionData(VehicleRoute currentRoute, Job newJob, Veh
                 return iData;
             }
 
-            private double getMarginalCost(Service service, TourActivity prevAct, TourActivity act) {
+            private double getMarginalCost(ServiceJob service, TourActivity prevAct, TourActivity act) {
                 double prev_new = getCost(prevAct.getLocation(),
                                 service.getActivity().getLocation());
                 double new_act = getCost(service.getActivity().getLocation(), act.getLocation());
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestComparator.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestComparator.java
index a14b6d278..8650c30fd 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestComparator.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestComparator.java
@@ -27,7 +27,7 @@
 
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 
 /**
  * Created by schroeder on 24/05/16.
@@ -36,13 +36,13 @@
 
     @Test
     public void test() {
-        Service s = new Service.Builder("1").setLocation(Location.newInstance("loc"))
+        ServiceJob s = new ServiceJob.Builder("1").setLocation(Location.newInstance("loc"))
             .setPriority(1).build();
-        Service s2 = new Service.Builder("2").setLocation(Location.newInstance("loc"))
+        ServiceJob s2 = new ServiceJob.Builder("2").setLocation(Location.newInstance("loc"))
             .setPriority(2).build();
-        Service s3 = new Service.Builder("3").setLocation(Location.newInstance("loc"))
+        ServiceJob s3 = new ServiceJob.Builder("3").setLocation(Location.newInstance("loc"))
             .setPriority(3).build();
-        Service s4 = new Service.Builder("4").setLocation(Location.newInstance("loc"))
+        ServiceJob s4 = new ServiceJob.Builder("4").setLocation(Location.newInstance("loc"))
             .setPriority(1).build();
         List<Job> jobs = new ArrayList<Job>();
         jobs.add(s2);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestLocalActivityInsertionCostsCalculator.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestLocalActivityInsertionCostsCalculator.java
index 2a7cc9fcd..e1a473395 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestLocalActivityInsertionCostsCalculator.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestLocalActivityInsertionCostsCalculator.java
@@ -37,7 +37,7 @@
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.cost.WaitingTimeCosts;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
@@ -99,7 +99,7 @@ public void whenAddingServiceBetweenDiffStartAndEnd_costMustBeCorrect() {
             .setStartLocation(Location.newInstance(0, 0))
             .setEndLocation(Location.newInstance(20, 0))
             .build();
-        Service s = Service.Builder.newInstance("s")
+        ServiceJob s = ServiceJob.Builder.newInstance("s")
             .setLocation(Location.newInstance(10, 0))
             .build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance()
@@ -233,9 +233,9 @@ public void whenInsertingActBetweenLastActAndEndAndRouteIsOpen_itCalculatesTpCos
     public void test() {
         VehicleTypeImpl type = VehicleTypeImpl.Builder.newInstance("t").setCostPerWaitingTime(1.).build();
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance(0, 0)).build();
-        Service prevS = new Service.Builder("prev").setLocation(Location.newInstance(10, 0)).build();
-        Service newS = new Service.Builder("new").setServiceTime(10).setLocation(Location.newInstance(60, 0)).build();
-        Service nextS = new Service.Builder("next").setLocation(Location.newInstance(30, 0)).setTimeWindow(TimeWindow.newInstance(40, 80)).build();
+        ServiceJob prevS = new ServiceJob.Builder("prev").setLocation(Location.newInstance(10, 0)).build();
+        ServiceJob newS = new ServiceJob.Builder("new").setServiceTime(10).setLocation(Location.newInstance(60, 0)).build();
+        ServiceJob nextS = new ServiceJob.Builder("next").setLocation(Location.newInstance(30, 0)).setTimeWindow(TimeWindow.newInstance(40, 80)).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(prevS).addJob(newS).addJob(nextS).addVehicle(v).build();
 
@@ -268,8 +268,8 @@ public void whenAddingNewBetweenStartAndAct_itShouldCalcInsertionCostsCorrectly(
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance(0, 0)).build();
 
-        Service newS = new Service.Builder("new").setServiceTime(10).setLocation(Location.newInstance(10, 0)).build();
-        Service nextS = new Service.Builder("next").setLocation(Location.newInstance(30, 0))
+        ServiceJob newS = new ServiceJob.Builder("new").setServiceTime(10).setLocation(Location.newInstance(10, 0)).build();
+        ServiceJob nextS = new ServiceJob.Builder("next").setLocation(Location.newInstance(30, 0))
             .setTimeWindow(TimeWindow.newInstance(40, 50)).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(newS).addJob(nextS).addVehicle(v).build();
@@ -295,8 +295,8 @@ public void whenAddingNewBetweenStartAndAct2_itShouldCalcInsertionCostsCorrectly
 
         VehicleImpl v2 = VehicleImpl.Builder.newInstance("v2").setType(type).setStartLocation(Location.newInstance(0, 0)).build();
 
-        Service newS = new Service.Builder("new").setServiceTime(10).setLocation(Location.newInstance(10, 0)).build();
-        Service nextS = new Service.Builder("next").setLocation(Location.newInstance(30, 0))
+        ServiceJob newS = new ServiceJob.Builder("new").setServiceTime(10).setLocation(Location.newInstance(10, 0)).build();
+        ServiceJob nextS = new ServiceJob.Builder("next").setLocation(Location.newInstance(30, 0))
             .setTimeWindow(TimeWindow.newInstance(140, 150)).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(newS).addJob(nextS).addVehicle(v2).build();
@@ -321,7 +321,7 @@ public void whenAddingNewInEmptyRoute_itShouldCalcInsertionCostsCorrectly() {
         VehicleTypeImpl type = VehicleTypeImpl.Builder.newInstance("t").setCostPerWaitingTime(1.).build();
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance(0, 0)).build();
 
-        Service newS = new Service.Builder("new").setServiceTime(10).setLocation(Location.newInstance(10, 0)).setTimeWindow(TimeWindow.newInstance(100, 150)).build();
+        ServiceJob newS = new ServiceJob.Builder("new").setServiceTime(10).setLocation(Location.newInstance(10, 0)).setTimeWindow(TimeWindow.newInstance(100, 150)).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(newS).addVehicle(v).build();
 
@@ -346,9 +346,9 @@ public void whenAddingNewBetweenTwoActs_itShouldCalcInsertionCostsCorrectly() {
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance(0, 0)).build();
 
-        Service prevS = new Service.Builder("prev").setLocation(Location.newInstance(10, 0)).build();
-        Service newS = new Service.Builder("new").setServiceTime(10).setLocation(Location.newInstance(20, 0)).build();
-        Service nextS = new Service.Builder("next").setLocation(Location.newInstance(30, 0)).setTimeWindow(TimeWindow.newInstance(40, 50)).build();
+        ServiceJob prevS = new ServiceJob.Builder("prev").setLocation(Location.newInstance(10, 0)).build();
+        ServiceJob newS = new ServiceJob.Builder("new").setServiceTime(10).setLocation(Location.newInstance(20, 0)).build();
+        ServiceJob nextS = new ServiceJob.Builder("next").setLocation(Location.newInstance(30, 0)).setTimeWindow(TimeWindow.newInstance(40, 50)).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(prevS).addJob(newS).addJob(nextS).addVehicle(v).build();
 
@@ -373,9 +373,9 @@ public void whenAddingNewWithTWBetweenTwoActs_itShouldCalcInsertionCostsCorrectl
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance(0, 0)).build();
 
-        Service prevS = new Service.Builder("prev").setLocation(Location.newInstance(10, 0)).build();
-        Service newS = new Service.Builder("new").setServiceTime(10).setTimeWindow(TimeWindow.newInstance(100, 120)).setLocation(Location.newInstance(20, 0)).build();
-        Service nextS = new Service.Builder("next").setLocation(Location.newInstance(30, 0)).setTimeWindow(TimeWindow.newInstance(40, 500)).build();
+        ServiceJob prevS = new ServiceJob.Builder("prev").setLocation(Location.newInstance(10, 0)).build();
+        ServiceJob newS = new ServiceJob.Builder("new").setServiceTime(10).setTimeWindow(TimeWindow.newInstance(100, 120)).setLocation(Location.newInstance(20, 0)).build();
+        ServiceJob nextS = new ServiceJob.Builder("next").setLocation(Location.newInstance(30, 0)).setTimeWindow(TimeWindow.newInstance(40, 500)).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(prevS).addJob(newS).addJob(nextS).addVehicle(v).build();
 
@@ -404,11 +404,11 @@ public void whenAddingNewWithTWBetweenTwoActs2_itShouldCalcInsertionCostsCorrect
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance(0, 0)).build();
 //		VehicleImpl v2 = VehicleImpl.Builder.newInstance("v2").setHasVariableDepartureTime(true).setType(type).setStartLocation(Location.newInstance(0,0)).build();
 
-        Service prevS = new Service.Builder("prev").setLocation(Location.newInstance(10, 0)).build();
-        Service newS = new Service.Builder("new").setServiceTime(10).setTimeWindow(TimeWindow.newInstance(100, 120)).setLocation(Location.newInstance(20, 0)).build();
-        Service nextS = new Service.Builder("next").setLocation(Location.newInstance(30, 0)).setTimeWindow(TimeWindow.newInstance(40, 500)).build();
+        ServiceJob prevS = new ServiceJob.Builder("prev").setLocation(Location.newInstance(10, 0)).build();
+        ServiceJob newS = new ServiceJob.Builder("new").setServiceTime(10).setTimeWindow(TimeWindow.newInstance(100, 120)).setLocation(Location.newInstance(20, 0)).build();
+        ServiceJob nextS = new ServiceJob.Builder("next").setLocation(Location.newInstance(30, 0)).setTimeWindow(TimeWindow.newInstance(40, 500)).build();
 
-        Service afterNextS = new Service.Builder("afterNext").setLocation(Location.newInstance(40, 0)).setTimeWindow(TimeWindow.newInstance(400, 500)).build();
+        ServiceJob afterNextS = new ServiceJob.Builder("afterNext").setLocation(Location.newInstance(40, 0)).setTimeWindow(TimeWindow.newInstance(400, 500)).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(afterNextS).addJob(prevS).addJob(newS).addJob(nextS).addVehicle(v).build();
 
@@ -443,12 +443,12 @@ public void whenAddingNewWithTWBetweenTwoActs3_itShouldCalcInsertionCostsCorrect
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance(0, 0)).build();
 //		VehicleImpl v2 = VehicleImpl.Builder.newInstance("v2").setHasVariableDepartureTime(true).setType(type).setStartLocation(Location.newInstance(0,0)).build();
 
-        Service prevS = new Service.Builder("prev").setLocation(Location.newInstance(10, 0)).build();
-        Service newS = new Service.Builder("new").setServiceTime(10).setTimeWindow(TimeWindow.newInstance(100, 120)).setLocation(Location.newInstance(20, 0)).build();
-        Service nextS = new Service.Builder("next").setLocation(Location.newInstance(30, 0)).setTimeWindow(TimeWindow.newInstance(40, 500)).build();
+        ServiceJob prevS = new ServiceJob.Builder("prev").setLocation(Location.newInstance(10, 0)).build();
+        ServiceJob newS = new ServiceJob.Builder("new").setServiceTime(10).setTimeWindow(TimeWindow.newInstance(100, 120)).setLocation(Location.newInstance(20, 0)).build();
+        ServiceJob nextS = new ServiceJob.Builder("next").setLocation(Location.newInstance(30, 0)).setTimeWindow(TimeWindow.newInstance(40, 500)).build();
 
-        Service afterNextS = new Service.Builder("afterNext").setLocation(Location.newInstance(40, 0)).setTimeWindow(TimeWindow.newInstance(80, 500)).build();
-        Service afterAfterNextS = new Service.Builder("afterAfterNext").setLocation(Location.newInstance(40, 0)).setTimeWindow(TimeWindow.newInstance(100, 500)).build();
+        ServiceJob afterNextS = new ServiceJob.Builder("afterNext").setLocation(Location.newInstance(40, 0)).setTimeWindow(TimeWindow.newInstance(80, 500)).build();
+        ServiceJob afterAfterNextS = new ServiceJob.Builder("afterAfterNext").setLocation(Location.newInstance(40, 0)).setTimeWindow(TimeWindow.newInstance(100, 500)).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addVehicle(v).addJob(prevS).addJob(newS).addJob(nextS)
             .addJob(afterNextS).addJob(afterAfterNextS).build();
@@ -495,12 +495,12 @@ public void whenAddingNewWithTWBetweenTwoActs4_itShouldCalcInsertionCostsCorrect
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance(0, 0)).build();
 //		VehicleImpl v2 = VehicleImpl.Builder.newInstance("v2").setHasVariableDepartureTime(true).setType(type).setStartLocation(Location.newInstance(0,0)).build();
 
-        Service prevS = new Service.Builder("prev").setLocation(Location.newInstance(10, 0)).build();
-        Service newS = new Service.Builder("new").setServiceTime(10).setTimeWindow(TimeWindow.newInstance(100, 120)).setLocation(Location.newInstance(20, 0)).build();
-        Service nextS = new Service.Builder("next").setLocation(Location.newInstance(30, 0)).setTimeWindow(TimeWindow.newInstance(40, 500)).build();
+        ServiceJob prevS = new ServiceJob.Builder("prev").setLocation(Location.newInstance(10, 0)).build();
+        ServiceJob newS = new ServiceJob.Builder("new").setServiceTime(10).setTimeWindow(TimeWindow.newInstance(100, 120)).setLocation(Location.newInstance(20, 0)).build();
+        ServiceJob nextS = new ServiceJob.Builder("next").setLocation(Location.newInstance(30, 0)).setTimeWindow(TimeWindow.newInstance(40, 500)).build();
 
-        Service afterNextS = new Service.Builder("afterNext").setLocation(Location.newInstance(40, 0)).setTimeWindow(TimeWindow.newInstance(80, 500)).build();
-        Service afterAfterNextS = new Service.Builder("afterAfterNext").setLocation(Location.newInstance(50, 0)).setTimeWindow(TimeWindow.newInstance(100, 500)).build();
+        ServiceJob afterNextS = new ServiceJob.Builder("afterNext").setLocation(Location.newInstance(40, 0)).setTimeWindow(TimeWindow.newInstance(80, 500)).build();
+        ServiceJob afterAfterNextS = new ServiceJob.Builder("afterAfterNext").setLocation(Location.newInstance(50, 0)).setTimeWindow(TimeWindow.newInstance(100, 500)).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addVehicle(v).addJob(prevS).addJob(newS).addJob(nextS)
             .addJob(afterNextS).addJob(afterAfterNextS).build();
@@ -550,12 +550,12 @@ public void whenAddingNewWithTWBetweenTwoActs4WithVarStart_itShouldCalcInsertion
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance(0, 0)).build();
 //		VehicleImpl v2 = VehicleImpl.Builder.newInstance("v2").setHasVariableDepartureTime(true).setType(type).setStartLocation(Location.newInstance(0,0)).build();
 
-        Service prevS = new Service.Builder("prev").setLocation(Location.newInstance(10, 0)).build();
-        Service newS = new Service.Builder("new").setServiceTime(10).setTimeWindow(TimeWindow.newInstance(100, 120)).setLocation(Location.newInstance(20, 0)).build();
-        Service nextS = new Service.Builder("next").setLocation(Location.newInstance(30, 0)).setTimeWindow(TimeWindow.newInstance(40, 500)).build();
+        ServiceJob prevS = new ServiceJob.Builder("prev").setLocation(Location.newInstance(10, 0)).build();
+        ServiceJob newS = new ServiceJob.Builder("new").setServiceTime(10).setTimeWindow(TimeWindow.newInstance(100, 120)).setLocation(Location.newInstance(20, 0)).build();
+        ServiceJob nextS = new ServiceJob.Builder("next").setLocation(Location.newInstance(30, 0)).setTimeWindow(TimeWindow.newInstance(40, 500)).build();
 
-        Service afterNextS = new Service.Builder("afterNext").setLocation(Location.newInstance(40, 0)).setTimeWindow(TimeWindow.newInstance(80, 500)).build();
-        Service afterAfterNextS = new Service.Builder("afterAfterNext").setLocation(Location.newInstance(50, 0)).setTimeWindow(TimeWindow.newInstance(100, 500)).build();
+        ServiceJob afterNextS = new ServiceJob.Builder("afterNext").setLocation(Location.newInstance(40, 0)).setTimeWindow(TimeWindow.newInstance(80, 500)).build();
+        ServiceJob afterAfterNextS = new ServiceJob.Builder("afterAfterNext").setLocation(Location.newInstance(50, 0)).setTimeWindow(TimeWindow.newInstance(100, 500)).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addVehicle(v).addJob(prevS).addJob(newS).addJob(nextS)
             .addJob(afterNextS).addJob(afterAfterNextS).build();
@@ -605,12 +605,12 @@ public void whenAddingNewWithTWBetweenTwoActs3WithVarStart_itShouldCalcInsertion
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance(0, 0)).build();
 //		VehicleImpl v2 = VehicleImpl.Builder.newInstance("v2").setHasVariableDepartureTime(true).setType(type).setStartLocation(Location.newInstance(0,0)).build();
 
-        Service prevS = new Service.Builder("prev").setLocation(Location.newInstance(10, 0)).build();
-        Service newS = new Service.Builder("new").setServiceTime(10).setTimeWindow(TimeWindow.newInstance(50, 70)).setLocation(Location.newInstance(20, 0)).build();
-        Service nextS = new Service.Builder("next").setLocation(Location.newInstance(30, 0)).setTimeWindow(TimeWindow.newInstance(40, 70)).build();
+        ServiceJob prevS = new ServiceJob.Builder("prev").setLocation(Location.newInstance(10, 0)).build();
+        ServiceJob newS = new ServiceJob.Builder("new").setServiceTime(10).setTimeWindow(TimeWindow.newInstance(50, 70)).setLocation(Location.newInstance(20, 0)).build();
+        ServiceJob nextS = new ServiceJob.Builder("next").setLocation(Location.newInstance(30, 0)).setTimeWindow(TimeWindow.newInstance(40, 70)).build();
 
-        Service afterNextS = new Service.Builder("afterNext").setLocation(Location.newInstance(40, 0)).setTimeWindow(TimeWindow.newInstance(50, 100)).build();
-        Service afterAfterNextS = new Service.Builder("afterAfterNext").setLocation(Location.newInstance(50, 0)).setTimeWindow(TimeWindow.newInstance(100, 500)).build();
+        ServiceJob afterNextS = new ServiceJob.Builder("afterNext").setLocation(Location.newInstance(40, 0)).setTimeWindow(TimeWindow.newInstance(50, 100)).build();
+        ServiceJob afterAfterNextS = new ServiceJob.Builder("afterAfterNext").setLocation(Location.newInstance(50, 0)).setTimeWindow(TimeWindow.newInstance(100, 500)).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addVehicle(v).addJob(prevS).addJob(newS).addJob(nextS)
             .addJob(afterNextS).addJob(afterAfterNextS).build();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/DBSCANClustererTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/DBSCANClustererTest.java
index d21dd0c46..15cf69be5 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/DBSCANClustererTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/DBSCANClustererTest.java
@@ -27,7 +27,7 @@
 import com.graphhopper.jsprit.core.distance.EuclideanDistanceCalculator;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.util.DefaultCosts;
@@ -40,9 +40,9 @@
 
     @Test
     public void itShouldReturnOneClusterOfSizeTwo() {
-        Service s1 = new Service.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
-        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(10, 10)).build();
-        Service s3 = new Service.Builder("s3").setLocation(Location.newInstance(9, 9)).build();
+        ServiceJob s1 = new ServiceJob.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
+        ServiceJob s2 = new ServiceJob.Builder("s2").setLocation(Location.newInstance(10, 10)).build();
+        ServiceJob s3 = new ServiceJob.Builder("s3").setLocation(Location.newInstance(9, 9)).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoute r = VehicleRoute.Builder.newInstance(v).addService(s1).addService(s2).addService(s3).build();
@@ -56,9 +56,9 @@ public void itShouldReturnOneClusterOfSizeTwo() {
 
     @Test
     public void itShouldReturnOneCluster() {
-        Service s1 = new Service.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
-        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(10, 10)).build();
-        Service s3 = new Service.Builder("s3").setLocation(Location.newInstance(9, 9)).build();
+        ServiceJob s1 = new ServiceJob.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
+        ServiceJob s2 = new ServiceJob.Builder("s2").setLocation(Location.newInstance(10, 10)).build();
+        ServiceJob s3 = new ServiceJob.Builder("s3").setLocation(Location.newInstance(9, 9)).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoute r = VehicleRoute.Builder.newInstance(v).addService(s1).addService(s2).addService(s3).build();
@@ -72,12 +72,12 @@ public void itShouldReturnOneCluster() {
 
     @Test
     public void itShouldReturnTwoClusters() {
-        Service s0 = new Service.Builder("s0").setLocation(Location.newInstance(9, 0)).build();
-        Service s1 = new Service.Builder("s1").setLocation(Location.newInstance(9, 1)).build();
-        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(9, 10)).build();
-        Service s3 = new Service.Builder("s3").setLocation(Location.newInstance(9, 9)).build();
-        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance(9, 16)).build();
-        Service s5 = new Service.Builder("s5").setLocation(Location.newInstance(9, 17)).build();
+        ServiceJob s0 = new ServiceJob.Builder("s0").setLocation(Location.newInstance(9, 0)).build();
+        ServiceJob s1 = new ServiceJob.Builder("s1").setLocation(Location.newInstance(9, 1)).build();
+        ServiceJob s2 = new ServiceJob.Builder("s2").setLocation(Location.newInstance(9, 10)).build();
+        ServiceJob s3 = new ServiceJob.Builder("s3").setLocation(Location.newInstance(9, 9)).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").setLocation(Location.newInstance(9, 16)).build();
+        ServiceJob s5 = new ServiceJob.Builder("s5").setLocation(Location.newInstance(9, 17)).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoute r = VehicleRoute.Builder.newInstance(v).addService(s1).addService(s2).addService(s3)
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsImplTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsImplTest.java
index 5815322e8..841353033 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsImplTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsImplTest.java
@@ -32,7 +32,7 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 
 
 public class JobNeighborhoodsImplTest {
@@ -41,25 +41,25 @@
 
     JobDistance jobDistance;
 
-    Service target;
-    Service s2;
-    Service s3;
-    Service s4;
-    Service s5;
-    Service s6;
-    Service s7;
+    ServiceJob target;
+    ServiceJob s2;
+    ServiceJob s3;
+    ServiceJob s4;
+    ServiceJob s5;
+    ServiceJob s6;
+    ServiceJob s7;
 
     @Before
     public void doBefore() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
-        target = new Service.Builder("s1").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 5)).build();
-        s2 = new Service.Builder("s2").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 4)).build();
-        s3 = new Service.Builder("s3").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 3)).build();
-        s4 = new Service.Builder("s4").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 2)).build();
+        target = new ServiceJob.Builder("s1").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 5)).build();
+        s2 = new ServiceJob.Builder("s2").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 4)).build();
+        s3 = new ServiceJob.Builder("s3").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 3)).build();
+        s4 = new ServiceJob.Builder("s4").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 2)).build();
 
-        s5 = new Service.Builder("s5").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 6)).build();
-        s6 = new Service.Builder("s6").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 7)).build();
-        s7 = new Service.Builder("s7").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 8)).build();
+        s5 = new ServiceJob.Builder("s5").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 6)).build();
+        s6 = new ServiceJob.Builder("s6").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 7)).build();
+        s7 = new ServiceJob.Builder("s7").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 8)).build();
 
         vrp = builder.addJob(target).addJob(s2).addJob(s3).addJob(s4).addJob(s5).addJob(s6).addJob(s7).build();
 
@@ -71,9 +71,9 @@ public void whenRequestingNeighborhoodOfTargetJob_nNeighborsShouldBeTwo() {
         JobNeighborhoodsImpl jn = new JobNeighborhoodsImpl(vrp, jobDistance);
         jn.initialise();
         Iterator<Job> iter = jn.getNearestNeighborsIterator(2, target);
-        List<Service> services = new ArrayList<Service>();
+        List<ServiceJob> services = new ArrayList<ServiceJob>();
         while (iter.hasNext()) {
-            services.add((Service) iter.next());
+            services.add((ServiceJob) iter.next());
         }
         assertEquals(2, services.size());
     }
@@ -83,9 +83,9 @@ public void whenRequestingNeighborhoodOfTargetJob_s2ShouldBeNeighbor() {
         JobNeighborhoodsImpl jn = new JobNeighborhoodsImpl(vrp, jobDistance);
         jn.initialise();
         Iterator<Job> iter = jn.getNearestNeighborsIterator(2, target);
-        List<Service> services = new ArrayList<Service>();
+        List<ServiceJob> services = new ArrayList<ServiceJob>();
         while (iter.hasNext()) {
-            services.add((Service) iter.next());
+            services.add((ServiceJob) iter.next());
         }
         assertTrue(services.contains(s2));
     }
@@ -95,9 +95,9 @@ public void whenRequestingNeighborhoodOfTargetJob_s4ShouldBeNeighbor() {
         JobNeighborhoodsImpl jn = new JobNeighborhoodsImpl(vrp, jobDistance);
         jn.initialise();
         Iterator<Job> iter = jn.getNearestNeighborsIterator(2, target);
-        List<Service> services = new ArrayList<Service>();
+        List<ServiceJob> services = new ArrayList<ServiceJob>();
         while (iter.hasNext()) {
-            services.add((Service) iter.next());
+            services.add((ServiceJob) iter.next());
         }
         assertTrue(services.contains(s5));
     }
@@ -107,9 +107,9 @@ public void whenRequestingNeighborhoodOfTargetJob_sizeShouldBe4() {
         JobNeighborhoodsImpl jn = new JobNeighborhoodsImpl(vrp, jobDistance);
         jn.initialise();
         Iterator<Job> iter = jn.getNearestNeighborsIterator(4, target);
-        List<Service> services = new ArrayList<Service>();
+        List<ServiceJob> services = new ArrayList<ServiceJob>();
         while (iter.hasNext()) {
-            services.add((Service) iter.next());
+            services.add((ServiceJob) iter.next());
         }
         assertEquals(4, services.size());
     }
@@ -119,9 +119,9 @@ public void whenRequestingMoreNeighborsThanExisting_itShouldReturnMaxNeighbors()
         JobNeighborhoodsImpl jn = new JobNeighborhoodsImpl(vrp, jobDistance);
         jn.initialise();
         Iterator<Job> iter = jn.getNearestNeighborsIterator(100, target);
-        List<Service> services = new ArrayList<Service>();
+        List<ServiceJob> services = new ArrayList<ServiceJob>();
         while (iter.hasNext()) {
-            services.add((Service) iter.next());
+            services.add((ServiceJob) iter.next());
         }
         assertEquals(6, services.size());
     }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsOptimizedTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsOptimizedTest.java
index c22fa8364..2587d4fdd 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsOptimizedTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsOptimizedTest.java
@@ -32,7 +32,7 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 
 
 public class JobNeighborhoodsOptimizedTest {
@@ -41,25 +41,25 @@
 
     JobDistance jobDistance;
 
-    Service target;
-    Service s2;
-    Service s3;
-    Service s4;
-    Service s5;
-    Service s6;
-    Service s7;
+    ServiceJob target;
+    ServiceJob s2;
+    ServiceJob s3;
+    ServiceJob s4;
+    ServiceJob s5;
+    ServiceJob s6;
+    ServiceJob s7;
 
     @Before
     public void doBefore() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
-        target = new Service.Builder("s1").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 5)).build();
-        s2 = new Service.Builder("s2").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 4)).build();
-        s3 = new Service.Builder("s3").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 3)).build();
-        s4 = new Service.Builder("s4").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 2)).build();
+        target = new ServiceJob.Builder("s1").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 5)).build();
+        s2 = new ServiceJob.Builder("s2").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 4)).build();
+        s3 = new ServiceJob.Builder("s3").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 3)).build();
+        s4 = new ServiceJob.Builder("s4").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 2)).build();
 
-        s5 = new Service.Builder("s5").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 6)).build();
-        s6 = new Service.Builder("s6").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 7)).build();
-        s7 = new Service.Builder("s7").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 8)).build();
+        s5 = new ServiceJob.Builder("s5").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 6)).build();
+        s6 = new ServiceJob.Builder("s6").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 7)).build();
+        s7 = new ServiceJob.Builder("s7").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 8)).build();
 
         vrp = builder.addJob(target).addJob(s2).addJob(s3).addJob(s4).addJob(s5).addJob(s6).addJob(s7).build();
 
@@ -71,9 +71,9 @@ public void whenRequestingNeighborhoodOfTargetJob_nNeighborsShouldBeTwo() {
         JobNeighborhoodsOptimized jn = new JobNeighborhoodsOptimized(vrp, jobDistance, 2);
         jn.initialise();
         Iterator<Job> iter = jn.getNearestNeighborsIterator(2, target);
-        List<Service> services = new ArrayList<Service>();
+        List<ServiceJob> services = new ArrayList<ServiceJob>();
         while (iter.hasNext()) {
-            services.add((Service) iter.next());
+            services.add((ServiceJob) iter.next());
         }
         assertEquals(2, services.size());
     }
@@ -83,9 +83,9 @@ public void whenRequestingNeighborhoodOfTargetJob_s2ShouldBeNeighbor() {
         JobNeighborhoodsOptimized jn = new JobNeighborhoodsOptimized(vrp, jobDistance, 2);
         jn.initialise();
         Iterator<Job> iter = jn.getNearestNeighborsIterator(2, target);
-        List<Service> services = new ArrayList<Service>();
+        List<ServiceJob> services = new ArrayList<ServiceJob>();
         while (iter.hasNext()) {
-            services.add((Service) iter.next());
+            services.add((ServiceJob) iter.next());
         }
         assertTrue(services.contains(s2));
     }
@@ -95,9 +95,9 @@ public void whenRequestingNeighborhoodOfTargetJob_s4ShouldBeNeighbor() {
         JobNeighborhoodsOptimized jn = new JobNeighborhoodsOptimized(vrp, jobDistance, 2);
         jn.initialise();
         Iterator<Job> iter = jn.getNearestNeighborsIterator(2, target);
-        List<Service> services = new ArrayList<Service>();
+        List<ServiceJob> services = new ArrayList<ServiceJob>();
         while (iter.hasNext()) {
-            services.add((Service) iter.next());
+            services.add((ServiceJob) iter.next());
         }
         assertTrue(services.contains(s5));
     }
@@ -107,9 +107,9 @@ public void whenRequestingNeighborhoodOfTargetJob_sizeShouldBe4() {
         JobNeighborhoodsOptimized jn = new JobNeighborhoodsOptimized(vrp, jobDistance, 4);
         jn.initialise();
         Iterator<Job> iter = jn.getNearestNeighborsIterator(4, target);
-        List<Service> services = new ArrayList<Service>();
+        List<ServiceJob> services = new ArrayList<ServiceJob>();
         while (iter.hasNext()) {
-            services.add((Service) iter.next());
+            services.add((ServiceJob) iter.next());
         }
         assertEquals(4, services.size());
     }
@@ -119,9 +119,9 @@ public void whenRequestingNeighborhoodOfTargetJob_neighborsShouldBeCorrect() {
         JobNeighborhoodsOptimized jn = new JobNeighborhoodsOptimized(vrp, jobDistance, 4);
         jn.initialise();
         Iterator<Job> iter = jn.getNearestNeighborsIterator(4, s7);
-        List<Service> services = new ArrayList<Service>();
+        List<ServiceJob> services = new ArrayList<ServiceJob>();
         while (iter.hasNext()) {
-            services.add((Service) iter.next());
+            services.add((ServiceJob) iter.next());
         }
         assertEquals(s6, services.get(0));
         assertEquals(s5, services.get(1));
@@ -134,9 +134,9 @@ public void whenRequestingMoreNeighborsThanExisting_itShouldReturnMaxNeighbors()
         JobNeighborhoodsOptimized jn = new JobNeighborhoodsOptimized(vrp, jobDistance, 2);
         jn.initialise();
         Iterator<Job> iter = jn.getNearestNeighborsIterator(100, target);
-        List<Service> services = new ArrayList<Service>();
+        List<ServiceJob> services = new ArrayList<ServiceJob>();
         while (iter.hasNext()) {
-            services.add((Service) iter.next());
+            services.add((ServiceJob) iter.next());
         }
         assertEquals(2, services.size());
     }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsWithCapRestrictionImplTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsWithCapRestrictionImplTest.java
index b4ca09632..e3f751c2d 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsWithCapRestrictionImplTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsWithCapRestrictionImplTest.java
@@ -32,7 +32,7 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 
 
 public class JobNeighborhoodsWithCapRestrictionImplTest {
@@ -41,25 +41,25 @@
 
     JobDistance jobDistance;
 
-    Service target;
-    Service s2;
-    Service s3;
-    Service s4;
-    Service s5;
-    Service s6;
-    Service s7;
+    ServiceJob target;
+    ServiceJob s2;
+    ServiceJob s3;
+    ServiceJob s4;
+    ServiceJob s5;
+    ServiceJob s6;
+    ServiceJob s7;
 
     @Before
     public void doBefore() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
-        target = new Service.Builder("s1").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 5)).build();
-        s2 = new Service.Builder("s2").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 4)).build();
-        s3 = new Service.Builder("s3").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 3)).build();
-        s4 = new Service.Builder("s4").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 2)).build();
+        target = new ServiceJob.Builder("s1").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 5)).build();
+        s2 = new ServiceJob.Builder("s2").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 4)).build();
+        s3 = new ServiceJob.Builder("s3").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 3)).build();
+        s4 = new ServiceJob.Builder("s4").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 2)).build();
 
-        s5 = new Service.Builder("s5").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 6)).build();
-        s6 = new Service.Builder("s6").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 7)).build();
-        s7 = new Service.Builder("s7").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 8)).build();
+        s5 = new ServiceJob.Builder("s5").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 6)).build();
+        s6 = new ServiceJob.Builder("s6").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 7)).build();
+        s7 = new ServiceJob.Builder("s7").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 8)).build();
 
         vrp = builder.addJob(target).addJob(s2).addJob(s3).addJob(s4).addJob(s5).addJob(s6).addJob(s7).build();
 
@@ -71,9 +71,9 @@ public void whenRequestingNeighborhoodOfTargetJob_nNeighborsShouldBeTwo() {
         JobNeighborhoodsImplWithCapRestriction jn = new JobNeighborhoodsImplWithCapRestriction(vrp, jobDistance, 2);
         jn.initialise();
         Iterator<Job> iter = jn.getNearestNeighborsIterator(2, target);
-        List<Service> services = new ArrayList<Service>();
+        List<ServiceJob> services = new ArrayList<ServiceJob>();
         while (iter.hasNext()) {
-            services.add((Service) iter.next());
+            services.add((ServiceJob) iter.next());
         }
         assertEquals(2, services.size());
     }
@@ -83,9 +83,9 @@ public void whenRequestingNeighborhoodOfTargetJob_s2ShouldBeNeighbor() {
         JobNeighborhoodsImplWithCapRestriction jn = new JobNeighborhoodsImplWithCapRestriction(vrp, jobDistance, 2);
         jn.initialise();
         Iterator<Job> iter = jn.getNearestNeighborsIterator(2, target);
-        List<Service> services = new ArrayList<Service>();
+        List<ServiceJob> services = new ArrayList<ServiceJob>();
         while (iter.hasNext()) {
-            services.add((Service) iter.next());
+            services.add((ServiceJob) iter.next());
         }
         assertTrue(services.contains(s2));
     }
@@ -95,9 +95,9 @@ public void whenRequestingNeighborhoodOfTargetJob_s4ShouldBeNeighbor() {
         JobNeighborhoodsImplWithCapRestriction jn = new JobNeighborhoodsImplWithCapRestriction(vrp, jobDistance, 2);
         jn.initialise();
         Iterator<Job> iter = jn.getNearestNeighborsIterator(2, target);
-        List<Service> services = new ArrayList<Service>();
+        List<ServiceJob> services = new ArrayList<ServiceJob>();
         while (iter.hasNext()) {
-            services.add((Service) iter.next());
+            services.add((ServiceJob) iter.next());
         }
         assertTrue(services.contains(s5));
     }
@@ -107,9 +107,9 @@ public void whenRequestingNeighborhoodOfTargetJob_sizeShouldBe4() {
         JobNeighborhoodsImplWithCapRestriction jn = new JobNeighborhoodsImplWithCapRestriction(vrp, jobDistance, 4);
         jn.initialise();
         Iterator<Job> iter = jn.getNearestNeighborsIterator(4, target);
-        List<Service> services = new ArrayList<Service>();
+        List<ServiceJob> services = new ArrayList<ServiceJob>();
         while (iter.hasNext()) {
-            services.add((Service) iter.next());
+            services.add((ServiceJob) iter.next());
         }
         assertEquals(4, services.size());
     }
@@ -119,9 +119,9 @@ public void whenRequestingMoreNeighborsThanExisting_itShouldReturnMaxNeighbors()
         JobNeighborhoodsImplWithCapRestriction jn = new JobNeighborhoodsImplWithCapRestriction(vrp, jobDistance, 2);
         jn.initialise();
         Iterator<Job> iter = jn.getNearestNeighborsIterator(100, target);
-        List<Service> services = new ArrayList<Service>();
+        List<ServiceJob> services = new ArrayList<ServiceJob>();
         while (iter.hasNext()) {
-            services.add((Service) iter.next());
+            services.add((ServiceJob) iter.next());
         }
         assertEquals(2, services.size());
     }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinClustersTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinClustersTest.java
index 93bfd9c05..fbd9502e0 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinClustersTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinClustersTest.java
@@ -30,7 +30,7 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.util.RandomNumberGeneration;
@@ -42,14 +42,14 @@
 
     @Test
     public void itShouldRuinTwoObviousClusters() {
-        Service s0 = new Service.Builder("s0").setLocation(Location.newInstance(9, 0)).build();
-        Service s1 = new Service.Builder("s1").setLocation(Location.newInstance(9, 1)).build();
-        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(9, 10)).build();
-        Service s3 = new Service.Builder("s3").setLocation(Location.newInstance(9, 9)).build();
-        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance(9, 16)).build();
-        Service s5 = new Service.Builder("s5").setLocation(Location.newInstance(9, 17)).build();
-        Service s6 = new Service.Builder("s6").setLocation(Location.newInstance(9, 15.5)).build();
-        Service s7 = new Service.Builder("s7").setLocation(Location.newInstance(9, 30)).build();
+        ServiceJob s0 = new ServiceJob.Builder("s0").setLocation(Location.newInstance(9, 0)).build();
+        ServiceJob s1 = new ServiceJob.Builder("s1").setLocation(Location.newInstance(9, 1)).build();
+        ServiceJob s2 = new ServiceJob.Builder("s2").setLocation(Location.newInstance(9, 10)).build();
+        ServiceJob s3 = new ServiceJob.Builder("s3").setLocation(Location.newInstance(9, 9)).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").setLocation(Location.newInstance(9, 16)).build();
+        ServiceJob s5 = new ServiceJob.Builder("s5").setLocation(Location.newInstance(9, 17)).build();
+        ServiceJob s6 = new ServiceJob.Builder("s6").setLocation(Location.newInstance(9, 15.5)).build();
+        ServiceJob s7 = new ServiceJob.Builder("s7").setLocation(Location.newInstance(9, 30)).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinWorstTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinWorstTest.java
index 7cc45e874..b4d0f2802 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinWorstTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinWorstTest.java
@@ -29,7 +29,7 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
@@ -42,11 +42,11 @@
 
     @Test
     public void itShouldRemoveCorrectNumber() {
-        Service s1 = new Service.Builder("s1")
+        ServiceJob s1 = new ServiceJob.Builder("s1")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(1, 1)).build()).build();
-        Service s2 = new Service.Builder("s2")
+        ServiceJob s2 = new ServiceJob.Builder("s2")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(3, 1)).build()).build();
-        Service s3 = new Service.Builder("s3")
+        ServiceJob s3 = new ServiceJob.Builder("s3")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(10, 10)).build()).build();
         VehicleImpl v = VehicleImpl.Builder.newInstance("v")
             .setStartLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(0, 0)).build()).build();
@@ -61,11 +61,11 @@ public void itShouldRemoveCorrectNumber() {
 
     @Test
     public void itShouldRemoveWorst() {
-        Service s1 = new Service.Builder("s1")
+        ServiceJob s1 = new ServiceJob.Builder("s1")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(1, 1)).build()).build();
-        Service s2 = new Service.Builder("s2")
+        ServiceJob s2 = new ServiceJob.Builder("s2")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(3, 1)).build()).build();
-        Service s3 = new Service.Builder("s3")
+        ServiceJob s3 = new ServiceJob.Builder("s3")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(10, 10)).build()).build();
         VehicleImpl v = VehicleImpl.Builder.newInstance("v")
             .setStartLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(0, 0)).build()).build();
@@ -80,11 +80,11 @@ public void itShouldRemoveWorst() {
 
     @Test
     public void itShouldRemoveWorstTwo() {
-        Service s1 = new Service.Builder("s1")
+        ServiceJob s1 = new ServiceJob.Builder("s1")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(1, 1)).build()).build();
-        Service s2 = new Service.Builder("s2")
+        ServiceJob s2 = new ServiceJob.Builder("s2")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(3, 1)).build()).build();
-        Service s3 = new Service.Builder("s3")
+        ServiceJob s3 = new ServiceJob.Builder("s3")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(10, 10)).build()).build();
         VehicleImpl v = VehicleImpl.Builder.newInstance("v")
             .setStartLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(0, 0)).build()).build();
@@ -108,11 +108,11 @@ public int createNumberToBeRemoved() {
 
     @Test
     public void itShouldRemoveShipment() {
-        Service s1 = new Service.Builder("s1")
+        ServiceJob s1 = new ServiceJob.Builder("s1")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(1, 1)).build()).build();
-        Service s2 = new Service.Builder("s2")
+        ServiceJob s2 = new ServiceJob.Builder("s2")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(3, 1)).build()).build();
-        Service s3 = new Service.Builder("s3")
+        ServiceJob s3 = new ServiceJob.Builder("s3")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(10, 10)).build()).build();
         Shipment shipment = Shipment.Builder.newInstance("ship1")
             .setPickupLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(2, 2)).build())
@@ -141,11 +141,11 @@ public int createNumberToBeRemoved() {
 
     @Test
     public void itShouldRemoveShipmentFromSecondRoute() {
-        Service s1 = new Service.Builder("s1")
+        ServiceJob s1 = new ServiceJob.Builder("s1")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(1, 1)).build()).build();
-        Service s2 = new Service.Builder("s2")
+        ServiceJob s2 = new ServiceJob.Builder("s2")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(3, 1)).build()).build();
-        Service s3 = new Service.Builder("s3")
+        ServiceJob s3 = new ServiceJob.Builder("s3")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(10, 10)).build()).build();
         Shipment shipment = Shipment.Builder.newInstance("ship1")
             .setPickupLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(3, 1)).build())
@@ -178,11 +178,11 @@ public int createNumberToBeRemoved() {
 
     @Test
     public void itShouldRemoveServiceAndShipmentFromSecondRoute() {
-        Service s1 = new Service.Builder("s1")
+        ServiceJob s1 = new ServiceJob.Builder("s1")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(1, 1)).build()).build();
-        Service s2 = new Service.Builder("s2")
+        ServiceJob s2 = new ServiceJob.Builder("s2")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(3, 1)).build()).build();
-        Service s3 = new Service.Builder("s3")
+        ServiceJob s3 = new ServiceJob.Builder("s3")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(10, 10)).build()).build();
         Shipment shipment = Shipment.Builder.newInstance("ship1")
             .setPickupLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(3, 1)).build())
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/AverageJobDistanceTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/AverageJobDistanceTest.java
index 0c7a4f599..81fa0642e 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/AverageJobDistanceTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/AverageJobDistanceTest.java
@@ -25,7 +25,7 @@
 
 import com.graphhopper.jsprit.core.distance.EuclideanDistanceCalculator;
 import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.util.Coordinate;
 import com.graphhopper.jsprit.core.util.DefaultCosts;
@@ -75,8 +75,8 @@ public void distanceOfTwoEqualShipmentsShouldBeSmallerThanAnyOtherDistance() {
 
     @Test
     public void whenServicesHaveSameLocation_distanceShouldBeZero() {
-        Service s1 = new Service.Builder("s1").addSizeDimension(0, 1).setLocation(Location.newInstance("10,0")).build();
-        Service s2 = new Service.Builder("s2").addSizeDimension(0, 1).setLocation(Location.newInstance("10,0")).build();
+        ServiceJob s1 = new ServiceJob.Builder("s1").addSizeDimension(0, 1).setLocation(Location.newInstance("10,0")).build();
+        ServiceJob s2 = new ServiceJob.Builder("s2").addSizeDimension(0, 1).setLocation(Location.newInstance("10,0")).build();
 
         double dist = new DefaultJobDistance(routingCosts).getDistance(s1, s2);
         assertEquals(0.0, dist, 0.01);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/TestJobDistanceAvgCosts.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/TestJobDistanceAvgCosts.java
index fbdc96cf4..865113cbc 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/TestJobDistanceAvgCosts.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/TestJobDistanceAvgCosts.java
@@ -22,7 +22,7 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.driver.Driver;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 
 
@@ -60,8 +60,8 @@ public double getTransportTime(Location from, Location to,
             }
         };
         DefaultJobDistance c = new DefaultJobDistance(costs);
-        Service s1 = new Service.Builder("1").addSizeDimension(0, 1).setLocation(Location.newInstance("loc")).build();
-        Service s2 = new Service.Builder("2").addSizeDimension(0, 2).setLocation(Location.newInstance("loc")).build();
+        ServiceJob s1 = new ServiceJob.Builder("1").addSizeDimension(0, 1).setLocation(Location.newInstance("loc")).build();
+        ServiceJob s2 = new ServiceJob.Builder("2").addSizeDimension(0, 2).setLocation(Location.newInstance("loc")).build();
         c.getDistance(s1, s2);
     }
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/HardPickupAndDeliveryShipmentActivityConstraintTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/HardPickupAndDeliveryShipmentActivityConstraintTest.java
index b7489e6c3..d66902a27 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/HardPickupAndDeliveryShipmentActivityConstraintTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/HardPickupAndDeliveryShipmentActivityConstraintTest.java
@@ -27,7 +27,7 @@
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.constraint.HardActivityConstraint.ConstraintsStatus;
 import com.graphhopper.jsprit.core.problem.constraint.PickupAndDeliverShipmentLoadActivityLevelConstraint;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivity;
@@ -46,9 +46,9 @@
 
     Shipment shipment;
 
-    Service s1;
+    ServiceJob s1;
 
-    Service s2;
+    ServiceJob s2;
 
     PickupAndDeliverShipmentLoadActivityLevelConstraint constraint;
 
@@ -58,8 +58,8 @@
 
     @Before
     public void doBefore() {
-        s1 = new Service.Builder("s1").setLocation(Location.newInstance("loc")).build();
-        s2 = new Service.Builder("s2").setLocation(Location.newInstance("loc")).build();
+        s1 = new ServiceJob.Builder("s1").setLocation(Location.newInstance("loc")).build();
+        s2 = new ServiceJob.Builder("s2").setLocation(Location.newInstance("loc")).build();
         shipment = Shipment.Builder.newInstance("shipment").setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).setDeliveryLocation(Location.newInstance("delLoc")).addSizeDimension(0, 1).build();
 
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/LoadStateTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/LoadStateTest.java
index 14053ebd8..3a56a8e9d 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/LoadStateTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/LoadStateTest.java
@@ -35,7 +35,7 @@
 import com.graphhopper.jsprit.core.problem.job.Delivery;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.job.Pickup;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
@@ -62,8 +62,8 @@ public void doBefore() {
         when(vehicle.getType()).thenReturn(type);
 
         VehicleRoutingProblem.Builder serviceProblemBuilder = VehicleRoutingProblem.Builder.newInstance();
-        Service s1 = new Service.Builder("s").addSizeDimension(0, 10).setLocation(Location.newInstance("loc")).build();
-        Service s2 = new Service.Builder("s2").addSizeDimension(0, 5).setLocation(Location.newInstance("loc")).build();
+        ServiceJob s1 = new ServiceJob.Builder("s").addSizeDimension(0, 10).setLocation(Location.newInstance("loc")).build();
+        ServiceJob s2 = new ServiceJob.Builder("s2").addSizeDimension(0, 5).setLocation(Location.newInstance("loc")).build();
         serviceProblemBuilder.addJob(s1).addJob(s2);
         final VehicleRoutingProblem serviceProblem = serviceProblemBuilder.build();
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/StateManagerTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/StateManagerTest.java
index 336da8d6a..5a3be18e7 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/StateManagerTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/StateManagerTest.java
@@ -34,7 +34,7 @@
 import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.ServiceActivity;
@@ -60,7 +60,7 @@
 
     private VehicleRoute getRoute(Vehicle vehicle) {
         return VehicleRoute.Builder.newInstance(vehicle).setJobActivityFactory(new ActFac())
-            .addService(new Service.Builder("s")
+            .addService(new ServiceJob.Builder("s")
                 .setLocation(Location.newInstance("loc")).build())
             .build();
     }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdateRequiredSkillsTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdateRequiredSkillsTest.java
index b13114a09..0efa8376a 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdateRequiredSkillsTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdateRequiredSkillsTest.java
@@ -30,7 +30,7 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.Skills;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
@@ -49,9 +49,9 @@
     public void doBefore() {
         VehicleType type = VehicleTypeImpl.Builder.newInstance("t").build();
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance("start")).setType(type).build();
-        Service service = new Service.Builder("s").setLocation(Location.newInstance("loc")).addRequiredSkill("skill1").build();
-        Service service2 = new Service.Builder("s2").setLocation(Location.newInstance("loc")).addRequiredSkill("skill1").addRequiredSkill("skill2").addRequiredSkill("skill3").build();
-        Service service3 = new Service.Builder("s3").setLocation(Location.newInstance("loc")).addRequiredSkill("skill4").addRequiredSkill("skill5").build();
+        ServiceJob service = new ServiceJob.Builder("s").setLocation(Location.newInstance("loc")).addRequiredSkill("skill1").build();
+        ServiceJob service2 = new ServiceJob.Builder("s2").setLocation(Location.newInstance("loc")).addRequiredSkill("skill1").addRequiredSkill("skill2").addRequiredSkill("skill3").build();
+        ServiceJob service3 = new ServiceJob.Builder("s3").setLocation(Location.newInstance("loc")).addRequiredSkill("skill4").addRequiredSkill("skill5").build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addVehicle(vehicle).addJob(service)
                         .addJob(service2).addJob(service3).build();
         route = VehicleRoute.Builder.newInstance(vehicle).setJobActivityFactory(vrp.getJobActivityFactory()).addService(service).addService(service2).addService(service3).build();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdateVehicleDependentTimeWindowTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdateVehicleDependentTimeWindowTest.java
index efe7d6c9c..28f297a60 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdateVehicleDependentTimeWindowTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdateVehicleDependentTimeWindowTest.java
@@ -37,7 +37,7 @@
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.cost.WaitingTimeCosts;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.vehicle.FiniteFleetManagerFactory;
@@ -98,9 +98,9 @@ public void doBefore() {
 
         fleetManager = new FiniteFleetManagerFactory(vehicles).createFleetManager();
 
-        Service service = new Service.Builder("s1").setLocation(Location.newInstance("10,0")).build();
-        Service service2 = new Service.Builder("s2").setLocation(Location.newInstance("20,0")).build();
-        Service service3 = new Service.Builder("s3").setLocation(Location.newInstance("30,0")).build();
+        ServiceJob service = new ServiceJob.Builder("s1").setLocation(Location.newInstance("10,0")).build();
+        ServiceJob service2 = new ServiceJob.Builder("s2").setLocation(Location.newInstance("20,0")).build();
+        ServiceJob service3 = new ServiceJob.Builder("s3").setLocation(Location.newInstance("30,0")).build();
 
         vrpBuilder.addJob(service).addJob(service2).addJob(service3);
         vrp = vrpBuilder.build();
@@ -210,9 +210,9 @@ public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct1WithVehicle3()
     public void twUpdateShouldWorkWithMultipleTWs() {
         //
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance("0,0")).setEarliestStart(0.).setLatestArrival(100.).build();
-        Service service = new Service.Builder("s1").setLocation(Location.newInstance("10,0"))
+        ServiceJob service = new ServiceJob.Builder("s1").setLocation(Location.newInstance("10,0"))
                         .addTimeWindow(30, 40).build();
-        Service service2 = new Service.Builder("s2")
+        ServiceJob service2 = new ServiceJob.Builder("s2")
                         .addTimeWindow(20, 30).addTimeWindow(40, 60).addTimeWindow(70, 80).setLocation(Location.newInstance("20,0")).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(service).addJob(service2).addVehicle(vehicle)
@@ -250,7 +250,7 @@ public void updateOfOpenRoutesShouldBeDoneCorrectly() {
                         .setLatestArrival(51)
                         .build();
 
-        Service service = new Service.Builder("s")
+        ServiceJob service = new ServiceJob.Builder("s")
                         .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(50, 0)).build()).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance()
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyserTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyserTest.java
index 5e4a52b74..2b39825e5 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyserTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyserTest.java
@@ -37,7 +37,7 @@
 import com.graphhopper.jsprit.core.problem.cost.TransportDistance;
 import com.graphhopper.jsprit.core.problem.job.Delivery;
 import com.graphhopper.jsprit.core.problem.job.Pickup;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
@@ -71,12 +71,12 @@ public void doBefore() {
         VehicleImpl vehicle2 = VehicleImpl.Builder.newInstance("v2").setType(type)
                         .setStartLocation(Location.newInstance(5, 0)).build();
 
-        Service s1 = new Service.Builder("s1")
+        ServiceJob s1 = new ServiceJob.Builder("s1")
                         .setTimeWindow(TimeWindow.newInstance(10, 20))
                         .setLocation(Location.newInstance(-10, 1)).addSizeDimension(0, 2)
                         .addRequiredSkill("skill1")
                         .build();
-        Service s2 = new Service.Builder("s2")
+        ServiceJob s2 = new ServiceJob.Builder("s2")
                         .setLocation(Location.newInstance(-10, 10))
                         .addSizeDimension(0, 3)
                         .addRequiredSkill("skill2").addRequiredSkill("skill1")
@@ -90,11 +90,11 @@ public void doBefore() {
                         .addRequiredSkill("skill3")
                         .build();
 
-        Service s3 = new Service.Builder("s3")
+        ServiceJob s3 = new ServiceJob.Builder("s3")
                         .setTimeWindow(TimeWindow.newInstance(10, 20))
                         .setLocation(TestUtils.loc(Coordinate.newInstance(10, 1))).addSizeDimension(0, 2).build();
 
-        Service s4 = new Service.Builder("s4").setLocation(TestUtils.loc(Coordinate.newInstance(10, 10))).addSizeDimension(0, 3).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").setLocation(TestUtils.loc(Coordinate.newInstance(10, 10))).addSizeDimension(0, 3).build();
 
         Shipment shipment2 = Shipment.Builder.newInstance("ship2").setPickupLocation(TestUtils.loc(Coordinate.newInstance(15, 2)))
                         .setPickupServiceTime(20.).setDeliveryServiceTime(20.)
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblemTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblemTest.java
index cdd021422..efa44d867 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblemTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblemTest.java
@@ -39,7 +39,7 @@
 import com.graphhopper.jsprit.core.problem.job.Delivery;
 import com.graphhopper.jsprit.core.problem.job.Pickup;
 import com.graphhopper.jsprit.core.problem.job.SequentialJobActivityList;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
@@ -138,10 +138,10 @@ public void whenShipmentsAreAdded_vrpShouldContainThem() {
 
     @Test
     public void whenServicesAreAdded_vrpShouldContainThem() {
-        Service s1 = mock(Service.class);
+        ServiceJob s1 = mock(ServiceJob.class);
         when(s1.getId()).thenReturn("s1");
         when(s1.getActivityList()).thenReturn(new SequentialJobActivityList(s1));
-        Service s2 = mock(Service.class);
+        ServiceJob s2 = mock(ServiceJob.class);
         when(s2.getId()).thenReturn("s2");
         when(s2.getActivityList()).thenReturn(new SequentialJobActivityList(s2));
 
@@ -234,14 +234,14 @@ public void whenDelivieriesAreAddedAllAtOnce_vrpShouldContainThem() {
 
     @Test
     public void whenServicesAreAddedAllAtOnce_vrpShouldContainThem() {
-        Service s1 = mock(Service.class);
+        ServiceJob s1 = mock(ServiceJob.class);
         when(s1.getId()).thenReturn("s1");
         when(s1.getActivityList()).thenReturn(new SequentialJobActivityList(s1));
-        Service s2 = mock(Service.class);
+        ServiceJob s2 = mock(ServiceJob.class);
         when(s2.getId()).thenReturn("s2");
         when(s2.getActivityList()).thenReturn(new SequentialJobActivityList(s2));
 
-        Collection<Service> services = new ArrayList<Service>();
+        Collection<ServiceJob> services = new ArrayList<ServiceJob>();
         services.add(s1);
         services.add(s2);
 
@@ -425,7 +425,7 @@ public void whenAddingInitialRoute_locationOfVehicleMustBeMemorized() {
 
     @Test
     public void whenAddingJobAndInitialRouteWithThatJobAfterwards_thisJobShouldNotBeInFinalJobMap() {
-        Service service = new Service.Builder("myService").setLocation(Location.newInstance("loc")).build();
+        ServiceJob service = new ServiceJob.Builder("myService").setLocation(Location.newInstance("loc")).build();
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addJob(service);
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v")
@@ -440,7 +440,7 @@ public void whenAddingJobAndInitialRouteWithThatJobAfterwards_thisJobShouldNotBe
 
     @Test
     public void whenAddingTwoJobs_theyShouldHaveProperIndeces() {
-        Service service = new Service.Builder("myService").setLocation(Location.newInstance("loc")).build();
+        ServiceJob service = new ServiceJob.Builder("myService").setLocation(Location.newInstance("loc")).build();
         Shipment shipment = Shipment.Builder.newInstance("shipment").setPickupLocation(Location.Builder.newInstance().setId("pick").build())
                         .setDeliveryLocation(Location.newInstance("del")).build();
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
@@ -456,8 +456,8 @@ public void whenAddingTwoJobs_theyShouldHaveProperIndeces() {
 
     @Test(expected = IllegalArgumentException.class)
     public void whenAddingTwoServicesWithTheSameId_itShouldThrowException() {
-        Service service1 = new Service.Builder("myService").setLocation(Location.newInstance("loc")).build();
-        Service service2 = new Service.Builder("myService").setLocation(Location.newInstance("loc")).build();
+        ServiceJob service1 = new ServiceJob.Builder("myService").setLocation(Location.newInstance("loc")).build();
+        ServiceJob service2 = new ServiceJob.Builder("myService").setLocation(Location.newInstance("loc")).build();
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addJob(service1);
         vrpBuilder.addJob(service2);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/LoadConstraintTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/LoadConstraintTest.java
index 367062d9f..7013c0bca 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/LoadConstraintTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/LoadConstraintTest.java
@@ -40,7 +40,7 @@
 import com.graphhopper.jsprit.core.problem.job.CustomJob;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.job.Pickup;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
@@ -74,8 +74,8 @@ public void doBefore() {
         when(vehicle.getType()).thenReturn(type);
 
         VehicleRoutingProblem.Builder serviceProblemBuilder = VehicleRoutingProblem.Builder.newInstance();
-        Service s1 = new Service.Builder("s").addSizeDimension(0, 10).setLocation(Location.newInstance("loc")).build();
-        Service s2 = new Service.Builder("s2").addSizeDimension(0, 5).setLocation(Location.newInstance("loc")).build();
+        ServiceJob s1 = new ServiceJob.Builder("s").addSizeDimension(0, 10).setLocation(Location.newInstance("loc")).build();
+        ServiceJob s2 = new ServiceJob.Builder("s2").addSizeDimension(0, 5).setLocation(Location.newInstance("loc")).build();
         serviceProblemBuilder.addJob(s1).addJob(s2);
         final VehicleRoutingProblem serviceProblem = serviceProblemBuilder.build();
 
@@ -133,7 +133,7 @@ public void whenCustomJob_itShouldNotIgnoreCapacity() {
     @Test
     public void whenServiceRouteAndNewServiceFitsIn_itShouldReturnFulfilled() {
         stateManager.informInsertionStarts(Arrays.asList(serviceRoute), Collections.emptyList());
-        Service s = Service.Builder.newInstance("service").setLocation(Location.newInstance(0))
+        ServiceJob s = ServiceJob.Builder.newInstance("service").setLocation(Location.newInstance(0))
                         .addSizeDimension(0, 5).build();
         ServiceLoadRouteLevelConstraint loadConstraint = new ServiceLoadRouteLevelConstraint(stateManager);
 
@@ -144,7 +144,7 @@ public void whenServiceRouteAndNewServiceFitsIn_itShouldReturnFulfilled() {
     @Test
     public void whenServiceRouteAndNewServiceFitsInBetweenStartAndAct1_itShouldReturnFulfilled() {
         stateManager.informInsertionStarts(Arrays.asList(serviceRoute), Collections.<Job>emptyList());
-        Service s = mock(Service.class);
+        ServiceJob s = mock(ServiceJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 5).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
@@ -161,7 +161,7 @@ public void whenServiceRouteAndNewServiceFitsInBetweenStartAndAct1_itShouldRetur
     @Test
     public void whenServiceRouteAndNewServiceFitsInBetweenAc1AndAct2_itShouldReturnFulfilled() {
         stateManager.informInsertionStarts(Arrays.asList(serviceRoute), Collections.<Job>emptyList());
-        Service s = mock(Service.class);
+        ServiceJob s = mock(ServiceJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 5).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
@@ -178,7 +178,7 @@ public void whenServiceRouteAndNewServiceFitsInBetweenAc1AndAct2_itShouldReturnF
     @Test
     public void whenServiceRouteAndNewServiceFitsInBetweenAc2AndEnd_itShouldReturnFulfilled() {
         stateManager.informInsertionStarts(Arrays.asList(serviceRoute), Collections.<Job>emptyList());
-        Service s = mock(Service.class);
+        ServiceJob s = mock(ServiceJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 5).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
@@ -198,7 +198,7 @@ public void whenServiceRouteAndNewServiceFitsInBetweenAc2AndEnd_itShouldReturnFu
     @Test
     public void whenServiceRouteAndNewServiceDoesNotFitInBetweenStartAndAct1_itShouldReturnFulfilled() {
         stateManager.informInsertionStarts(Arrays.asList(serviceRoute), Collections.<Job>emptyList());
-        Service s = mock(Service.class);
+        ServiceJob s = mock(ServiceJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 6).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
@@ -215,7 +215,7 @@ public void whenServiceRouteAndNewServiceDoesNotFitInBetweenStartAndAct1_itShoul
     @Test
     public void whenServiceRouteAndNewServiceDoesNotFitInBetweenAc1AndAct2_itShouldReturnFulfilled() {
         stateManager.informInsertionStarts(Arrays.asList(serviceRoute), Collections.<Job>emptyList());
-        Service s = mock(Service.class);
+        ServiceJob s = mock(ServiceJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 6).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
@@ -232,7 +232,7 @@ public void whenServiceRouteAndNewServiceDoesNotFitInBetweenAc1AndAct2_itShouldR
     @Test
     public void whenServiceRouteAndNewServiceDoesNotFitInBetweenAc2AndEnd_itShouldReturnFulfilled() {
         stateManager.informInsertionStarts(Arrays.asList(serviceRoute), Collections.<Job>emptyList());
-        Service s = mock(Service.class);
+        ServiceJob s = mock(ServiceJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 6).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
@@ -250,7 +250,7 @@ public void whenServiceRouteAndNewServiceDoesNotFitInBetweenAc2AndEnd_itShouldRe
     @Test
     public void whenServiceRouteAndNewServiceDoesNotFitIn_itShouldReturnFulfilled() {
         stateManager.informInsertionStarts(Arrays.asList(serviceRoute), Collections.emptyList());
-        Service s = Service.Builder.newInstance("service").setLocation(Location.newInstance(0)).addSizeDimension(0, 6).build();
+        ServiceJob s = ServiceJob.Builder.newInstance("service").setLocation(Location.newInstance(0)).addSizeDimension(0, 6).build();
         ServiceLoadRouteLevelConstraint loadConstraint = new ServiceLoadRouteLevelConstraint(stateManager);
         JobInsertionContext context = new JobInsertionContext(serviceRoute, s, serviceRoute.getVehicle(), null, 0.);
         assertFalse(loadConstraint.fulfilled(context));
@@ -524,7 +524,7 @@ public void whenPDRoute_newDeliveryShouldNotFitInBetweenAct2AndEnd() {
     @Test
     public void whenPDRouteAndNewServiceFitsInBetweenAc1AndAct2_itShouldReturnFulfilled() {
         stateManager.informInsertionStarts(Arrays.asList(pickupDeliveryRoute), Collections.<Job>emptyList());
-        Service s = mock(Service.class);
+        ServiceJob s = mock(ServiceJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 5).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
@@ -541,7 +541,7 @@ public void whenPDRouteAndNewServiceFitsInBetweenAc1AndAct2_itShouldReturnFulfil
     @Test
     public void whenPDRouteAndNewServiceFitsInBetweenAc2AndEnd_itShouldReturnFulfilled() {
         stateManager.informInsertionStarts(Arrays.asList(pickupDeliveryRoute), Collections.<Job>emptyList());
-        Service s = mock(Service.class);
+        ServiceJob s = mock(ServiceJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 5).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
@@ -561,7 +561,7 @@ public void whenPDRouteAndNewServiceFitsInBetweenAc2AndEnd_itShouldReturnFulfill
     @Test
     public void whenPDRouteAndNewServiceDoesNotFitInBetweenStartAndAct1_itShouldReturnFulfilled() {
         stateManager.informInsertionStarts(Arrays.asList(serviceRoute), Collections.<Job>emptyList());
-        Service s = mock(Service.class);
+        ServiceJob s = mock(ServiceJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 6).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
@@ -578,7 +578,7 @@ public void whenPDRouteAndNewServiceDoesNotFitInBetweenStartAndAct1_itShouldRetu
     @Test
     public void whenPDRouteAndNewServiceDoesNotFitInBetweenAc1AndAct2_itShouldReturnFulfilled() {
         stateManager.informInsertionStarts(Arrays.asList(pickupDeliveryRoute), Collections.<Job>emptyList());
-        Service s = mock(Service.class);
+        ServiceJob s = mock(ServiceJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 6).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
@@ -595,7 +595,7 @@ public void whenPDRouteAndNewServiceDoesNotFitInBetweenAc1AndAct2_itShouldReturn
     @Test
     public void whenPDRouteAndNewServiceDoesNotFitInBetweenAc2AndEnd_itShouldReturnFulfilled() {
         stateManager.informInsertionStarts(Arrays.asList(serviceRoute), Collections.<Job>emptyList());
-        Service s = mock(Service.class);
+        ServiceJob s = mock(ServiceJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 6).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
@@ -613,7 +613,7 @@ public void whenPDRouteAndNewServiceDoesNotFitInBetweenAc2AndEnd_itShouldReturnF
     @Test
     public void whenPDRouteAndNewServiceDoesNotFitIn_itShouldReturnFulfilled() {
         stateManager.informInsertionStarts(Arrays.asList(serviceRoute), Collections.<Job>emptyList());
-        Service s = Service.Builder.newInstance("service").addSizeDimension(0, 6).setLocation(Location.newInstance(0)).build();
+        ServiceJob s = ServiceJob.Builder.newInstance("service").addSizeDimension(0, 6).setLocation(Location.newInstance(0)).build();
         ServiceLoadRouteLevelConstraint loadConstraint = new ServiceLoadRouteLevelConstraint(stateManager);
         JobInsertionContext context = new JobInsertionContext(serviceRoute, s, serviceRoute.getVehicle(), null, 0.);
         assertFalse(loadConstraint.fulfilled(context));
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadRouteLevelConstraintTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadRouteLevelConstraintTest.java
index 4a893bd67..c01e77ee2 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadRouteLevelConstraintTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadRouteLevelConstraintTest.java
@@ -34,7 +34,7 @@
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Delivery;
 import com.graphhopper.jsprit.core.problem.job.Pickup;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.state.RouteAndActivityStateGetter;
@@ -180,7 +180,7 @@ public void whenLoadPlusPickupSizeJustFitIntoVehicle_itShouldReturnTrue() {
 
     @Test
     public void whenLoadPlusServiceSizeDoesNotExceedsVehicleCapacity_itShouldReturnTrue() {
-        Service service = Service.Builder.newInstance("s").setLocation(l())
+        ServiceJob service = ServiceJob.Builder.newInstance("s").setLocation(l())
                         .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 1).addDimension(2, 1).build()).build();
         JobInsertionContext iContext = mock(JobInsertionContext.class);
         when(iContext.getJob()).thenReturn(service);
@@ -196,7 +196,7 @@ private Location l() {
 
     @Test
     public void whenLoadPlusServiceSizeExceedsVehicleCapacityInAllDimension_itShouldReturnFalse() {
-        Service service = Service.Builder.newInstance("s").setLocation(l())
+        ServiceJob service = ServiceJob.Builder.newInstance("s").setLocation(l())
                         .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 3).addDimension(1, 3).addDimension(2, 3).build()).build();
 
         JobInsertionContext iContext = mock(JobInsertionContext.class);
@@ -209,7 +209,7 @@ public void whenLoadPlusServiceSizeExceedsVehicleCapacityInAllDimension_itShould
 
     @Test
     public void whenLoadPlusServiceSizeExceedsVehicleCapacityInOneDimension_itShouldReturnFalse() {
-        Service service = Service.Builder.newInstance("s").setLocation(l())
+        ServiceJob service = ServiceJob.Builder.newInstance("s").setLocation(l())
                         .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 1).addDimension(2, 3).build()).build();
         JobInsertionContext iContext = mock(JobInsertionContext.class);
         when(iContext.getJob()).thenReturn(service);
@@ -221,7 +221,7 @@ public void whenLoadPlusServiceSizeExceedsVehicleCapacityInOneDimension_itShould
 
     @Test
     public void whenLoadPlusServiceSizeJustFitIntoVehicle_itShouldReturnTrue() {
-        Service service = Service.Builder.newInstance("s").setLocation(Location.newInstance(0))
+        ServiceJob service = ServiceJob.Builder.newInstance("s").setLocation(Location.newInstance(0))
                         .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 2).addDimension(1, 2).addDimension(2, 2).build()).build();
 
         JobInsertionContext iContext = mock(JobInsertionContext.class);
@@ -234,7 +234,7 @@ public void whenLoadPlusServiceSizeJustFitIntoVehicle_itShouldReturnTrue() {
 
     @Test
     public void whenAddingAServiceAndNewVehicleDoesNotHaveTheCapacity_itShouldReturnFalse() {
-        Service service = mock(Service.class);
+        ServiceJob service = mock(ServiceJob.class);
         when(service.getSize()).thenReturn(SizeDimension.Builder.newInstance().addDimension(0, 2).build());
 
         SizeDimension atBeginning = SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 2).addDimension(2, 1).build();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/SkillConstraintTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/SkillConstraintTest.java
index a072afc88..c54e9165e 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/SkillConstraintTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/SkillConstraintTest.java
@@ -29,7 +29,7 @@
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
@@ -55,11 +55,11 @@ public void doBefore() {
         vehicle = VehicleImpl.Builder.newInstance("v").addSkill("skill1").addSkill("skill2").addSkill("skill3").addSkill("skill4").setStartLocation(Location.newInstance("start")).setType(type).build();
         vehicle2 = VehicleImpl.Builder.newInstance("v2").addSkill("skill4").addSkill("skill5").setStartLocation(Location.newInstance("start")).setType(type).build();
 
-        Service service = new Service.Builder("s").setLocation(Location.newInstance("loc")).addRequiredSkill("skill1").build();
-        Service service2 = new Service.Builder("s2").setLocation(Location.newInstance("loc")).addRequiredSkill("skill1").addRequiredSkill("skill2").addRequiredSkill("skill3").build();
+        ServiceJob service = new ServiceJob.Builder("s").setLocation(Location.newInstance("loc")).addRequiredSkill("skill1").build();
+        ServiceJob service2 = new ServiceJob.Builder("s2").setLocation(Location.newInstance("loc")).addRequiredSkill("skill1").addRequiredSkill("skill2").addRequiredSkill("skill3").build();
 
-        Service service3 = new Service.Builder("s3").setLocation(Location.newInstance("loc")).addRequiredSkill("skill4").addRequiredSkill("skill5").build();
-        Service service4 = new Service.Builder("s4").setLocation(Location.newInstance("loc")).addRequiredSkill("skill1").build();
+        ServiceJob service3 = new ServiceJob.Builder("s3").setLocation(Location.newInstance("loc")).addRequiredSkill("skill4").addRequiredSkill("skill5").build();
+        ServiceJob service4 = new ServiceJob.Builder("s4").setLocation(Location.newInstance("loc")).addRequiredSkill("skill1").build();
 
         vrp = VehicleRoutingProblem.Builder.newInstance().addVehicle(vehicle).addVehicle(vehicle2).addJob(service)
             .addJob(service2).addJob(service3).addJob(service4).build();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowTest.java
index 5aa32795c..dc518b137 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowTest.java
@@ -43,7 +43,7 @@
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.cost.WaitingTimeCosts;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
@@ -107,9 +107,9 @@ public void doBefore() {
 
         vrpBuilder.addVehicle(vehicle).addVehicle(v2).addVehicle(v3).addVehicle(v4).addVehicle(v5).addVehicle(v6);
 
-        Service service = new Service.Builder("s1").setLocation(Location.newInstance("10,0")).build();
-        Service service2 = new Service.Builder("s2").setLocation(Location.newInstance("20,0")).build();
-        Service service3 = new Service.Builder("s3").setLocation(Location.newInstance("30,0")).build();
+        ServiceJob service = new ServiceJob.Builder("s1").setLocation(Location.newInstance("10,0")).build();
+        ServiceJob service2 = new ServiceJob.Builder("s2").setLocation(Location.newInstance("20,0")).build();
+        ServiceJob service3 = new ServiceJob.Builder("s3").setLocation(Location.newInstance("30,0")).build();
 
         vrpBuilder.addJob(service).addJob(service2).addJob(service3);
         final VehicleRoutingProblem vrp = vrpBuilder.build();
@@ -167,7 +167,7 @@ public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct1() {
     @Test
     public void whenNewJobIsInsertedWithOldVeh_itJustShouldReturnTrue() {
 
-        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("50,0")).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").setLocation(Location.newInstance("50,0")).build();
         JobActivity serviceAct = s4.getActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, vehicle, route.getDriver(), 0.);
@@ -182,7 +182,7 @@ public void whenNewJobIsInsertedWithOldVeh_itJustShouldReturnTrue() {
     @Test
     public void whenNewJobIsInsertedWithOldVeh_itJustShouldReturnFalse() {
 
-        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("1000,0")).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").setLocation(Location.newInstance("1000,0")).build();
         JobActivity serviceAct = s4.getActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, vehicle, route.getDriver(), 0.);
@@ -197,7 +197,7 @@ public void whenNewJobIsInsertedWithOldVeh_itJustShouldReturnFalse() {
     @Test
     public void whenNewJobIsInsertedInBetweenAct1And2WithOldVeh_itJustShouldReturnTrue() {
 
-        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("50,0")).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").setLocation(Location.newInstance("50,0")).build();
         JobActivity serviceAct = s4.getActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, vehicle, route.getDriver(), 0.);
@@ -215,7 +215,7 @@ public void whenNewJobIsInsertedInBetweenAct1And2WithOldVeh_itJustShouldReturnTr
     @Test
     public void whenNewJobIsInsertedInBetweenAct1And2WithOldVeh_itJustShouldReturnFalse() {
 
-        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("51,0")).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").setLocation(Location.newInstance("51,0")).build();
         JobActivity serviceAct = s4.getActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, vehicle, route.getDriver(), 0.);
@@ -236,7 +236,7 @@ public void whenJobIsInsertedAlongWithNewVehicleThatNeedsToBeHomeAt60_itShouldRe
 
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
-        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").setLocation(Location.newInstance("40,0")).build();
         JobActivity serviceAct = s4.getActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v2, route.getDriver(), 0.);
@@ -254,7 +254,7 @@ public void whenJobIsInsertedAlongWithNewVehicleThatNeedsToBeHomeAt50_itShouldRe
 
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
-        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").setLocation(Location.newInstance("40,0")).build();
         JobActivity serviceAct = s4.getActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v3, route.getDriver(), 0.);
@@ -271,7 +271,7 @@ public void whenJobIsInsertedAlongWithNewVehicleThatNeedsToBeHomeAt10_itShouldRe
 
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
-        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").setLocation(Location.newInstance("40,0")).build();
         JobActivity serviceAct = s4.getActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v4, route.getDriver(), 0.);
@@ -288,7 +288,7 @@ public void whenJobIsInsertedAlongWithV6BetweenS2AndS3_itShouldReturnFalse() {
 
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
-        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").setLocation(Location.newInstance("40,0")).build();
         JobActivity serviceAct = s4.getActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v6, route.getDriver(), 0.);
@@ -305,7 +305,7 @@ public void whenJobIsInsertedAlongWithV6BetweenS1AndS2_itShouldReturnFalse() {
 
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
-        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").setLocation(Location.newInstance("40,0")).build();
         JobActivity serviceAct = s4.getActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v6, route.getDriver(), 0.);
@@ -322,7 +322,7 @@ public void whenJobIsInsertedAlongWithV6AtTheEndOfRoute_itShouldReturnTrue() {
 
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
-        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").setLocation(Location.newInstance("40,0")).build();
         JobActivity serviceAct = s4.getActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v6, route.getDriver(), 0.);
@@ -337,7 +337,7 @@ public void whenJobIsInsertedAlongWithV6AtTheEndOfRoute_itShouldReturnTrue() {
     public void whenJobIsInsertedAlongWithNewVehicleThatCanOnlyStartAt60_itShouldReturnFalse() {
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
-        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").setLocation(Location.newInstance("40,0")).build();
         JobActivity serviceAct = s4.getActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v5, route.getDriver(), 60.);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowWithStartTimeAndMaxOperationTimeTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowWithStartTimeAndMaxOperationTimeTest.java
index 07893a964..aa9ac515a 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowWithStartTimeAndMaxOperationTimeTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowWithStartTimeAndMaxOperationTimeTest.java
@@ -43,7 +43,7 @@
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.cost.WaitingTimeCosts;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
@@ -105,9 +105,9 @@ public void doBefore() {
 
         vrpBuilder.addVehicle(vehicle).addVehicle(v2).addVehicle(v3).addVehicle(v4).addVehicle(v5).addVehicle(v6);
 
-        Service service = new Service.Builder("s1").setLocation(Location.newInstance("10,0")).build();
-        Service service2 = new Service.Builder("s2").setLocation(Location.newInstance("20,0")).build();
-        Service service3 = new Service.Builder("s3").setLocation(Location.newInstance("30,0")).build();
+        ServiceJob service = new ServiceJob.Builder("s1").setLocation(Location.newInstance("10,0")).build();
+        ServiceJob service2 = new ServiceJob.Builder("s2").setLocation(Location.newInstance("20,0")).build();
+        ServiceJob service3 = new ServiceJob.Builder("s3").setLocation(Location.newInstance("30,0")).build();
 
         vrpBuilder.addJob(service).addJob(service2).addJob(service3);
         final VehicleRoutingProblem vrp = vrpBuilder.build();
@@ -165,7 +165,7 @@ public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct1() {
     @Test
     public void whenNewJobIsInsertedWithOldVeh_itJustShouldReturnTrue() {
 
-        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("50,0")).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").setLocation(Location.newInstance("50,0")).build();
         JobActivity serviceAct = s4.getActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, vehicle, route.getDriver(), 0.);
@@ -180,7 +180,7 @@ public void whenNewJobIsInsertedWithOldVeh_itJustShouldReturnTrue() {
     @Test
     public void whenNewJobIsInsertedWithOldVeh_itJustShouldReturnFalse() {
 
-        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("1000,0")).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").setLocation(Location.newInstance("1000,0")).build();
         JobActivity serviceAct = s4.getActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, vehicle, route.getDriver(), 0.);
@@ -195,7 +195,7 @@ public void whenNewJobIsInsertedWithOldVeh_itJustShouldReturnFalse() {
     @Test
     public void whenNewJobIsInsertedInBetweenAct1And2WithOldVeh_itJustShouldReturnTrue() {
 
-        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("50,0")).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").setLocation(Location.newInstance("50,0")).build();
         JobActivity serviceAct = s4.getActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, vehicle, route.getDriver(), 0.);
@@ -213,7 +213,7 @@ public void whenNewJobIsInsertedInBetweenAct1And2WithOldVeh_itJustShouldReturnTr
     @Test
     public void whenNewJobIsInsertedInBetweenAct1And2WithOldVeh_itJustShouldReturnFalse() {
 
-        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("51,0")).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").setLocation(Location.newInstance("51,0")).build();
         JobActivity serviceAct = s4.getActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, vehicle, route.getDriver(), 0.);
@@ -234,7 +234,7 @@ public void whenJobIsInsertedAlongWithNewVehicleThatNeedsToBeHomeAt60_itShouldRe
 
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
-        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").setLocation(Location.newInstance("40,0")).build();
         JobActivity serviceAct = s4.getActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v2, route.getDriver(), 0.);
@@ -252,7 +252,7 @@ public void whenJobIsInsertedAlongWithNewVehicleThatNeedsToBeHomeAt50_itShouldRe
 
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
-        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").setLocation(Location.newInstance("40,0")).build();
         JobActivity serviceAct = s4.getActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v3, route.getDriver(), 0.);
@@ -269,7 +269,7 @@ public void whenJobIsInsertedAlongWithNewVehicleThatNeedsToBeHomeAt10_itShouldRe
 
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
-        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").setLocation(Location.newInstance("40,0")).build();
         JobActivity serviceAct = s4.getActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v4, route.getDriver(), 0.);
@@ -286,7 +286,7 @@ public void whenJobIsInsertedAlongWithV6BetweenS2AndS3_itShouldReturnFalse() {
 
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
-        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").setLocation(Location.newInstance("40,0")).build();
         JobActivity serviceAct = s4.getActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v6, route.getDriver(), 0.);
@@ -303,7 +303,7 @@ public void whenJobIsInsertedAlongWithV6BetweenS1AndS2_itShouldReturnFalse() {
 
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
-        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").setLocation(Location.newInstance("40,0")).build();
         JobActivity serviceAct = s4.getActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v6, route.getDriver(), 0.);
@@ -320,7 +320,7 @@ public void whenJobIsInsertedAlongWithV6AtTheEndOfRoute_itShouldReturnTrue() {
 
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
-        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").setLocation(Location.newInstance("40,0")).build();
         JobActivity serviceAct = s4.getActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v6, route.getDriver(), 0.);
@@ -335,7 +335,7 @@ public void whenJobIsInsertedAlongWithV6AtTheEndOfRoute_itShouldReturnTrue() {
     public void whenJobIsInsertedAlongWithNewVehicleThatCanOnlyStartAt60_itShouldReturnFalse() {
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
-        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").setLocation(Location.newInstance("40,0")).build();
         JobActivity serviceAct = s4.getActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v5, route.getDriver(), 60.);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/GraphJobActivityListTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/GraphJobActivityListTest.java
index f9a802466..307b5eb4f 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/GraphJobActivityListTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/GraphJobActivityListTest.java
@@ -20,7 +20,7 @@
 
     @Before
     public void beforeClass() {
-        job = mock(Service.class);
+        job = mock(ServiceJob.class);
     }
 
 
@@ -79,7 +79,7 @@ public void whenAddingAnActivityTwice_itMustHaveToAddOnlyOnce() {
     @Test(expected = IllegalArgumentException.class)
     public void whenAddingAnActivityWithWrongJob_itMustThrowException() {
         GraphJobActivityList list = new GraphJobActivityList(job);
-        list.addActivity(createActivity(mock(Service.class), "A"));
+        list.addActivity(createActivity(mock(ServiceJob.class), "A"));
     }
 
     @Test
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ServiceTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ServiceJobTest.java
similarity index 70%
rename from jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ServiceTest.java
rename to jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ServiceJobTest.java
index 723902fed..271952d83 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ServiceTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ServiceJobTest.java
@@ -34,29 +34,29 @@
 import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 
-public class ServiceTest {
+public class ServiceJobTest {
 
     @Test
     public void whenTwoServicesHaveTheSameId_theirReferencesShouldBeUnEqual() {
-        Service one = new Service.Builder("service").addSizeDimension(0, 10).setLocation(Location.newInstance("foo")).build();
-        Service two = new Service.Builder("service").addSizeDimension(0, 10).setLocation(Location.newInstance("fo")).build();
+        ServiceJob one = new ServiceJob.Builder("service").addSizeDimension(0, 10).setLocation(Location.newInstance("foo")).build();
+        ServiceJob two = new ServiceJob.Builder("service").addSizeDimension(0, 10).setLocation(Location.newInstance("fo")).build();
 
         assertTrue(one != two);
     }
 
     @Test
     public void whenTwoServicesHaveTheSameId_theyShouldBeEqual() {
-        Service one = new Service.Builder("service").addSizeDimension(0, 10).setLocation(Location.newInstance("foo")).build();
-        Service two = new Service.Builder("service").addSizeDimension(0, 10).setLocation(Location.newInstance("fo")).build();
+        ServiceJob one = new ServiceJob.Builder("service").addSizeDimension(0, 10).setLocation(Location.newInstance("foo")).build();
+        ServiceJob two = new ServiceJob.Builder("service").addSizeDimension(0, 10).setLocation(Location.newInstance("fo")).build();
 
         assertTrue(one.equals(two));
     }
 
     @Test
     public void noName() {
-        Set<Service> serviceSet = new HashSet<Service>();
-        Service one = new Service.Builder("service").addSizeDimension(0, 10).setLocation(Location.newInstance("foo")).build();
-        Service two = new Service.Builder("service").addSizeDimension(0, 10).setLocation(Location.newInstance("fo")).build();
+        Set<ServiceJob> serviceSet = new HashSet<ServiceJob>();
+        ServiceJob one = new ServiceJob.Builder("service").addSizeDimension(0, 10).setLocation(Location.newInstance("foo")).build();
+        ServiceJob two = new ServiceJob.Builder("service").addSizeDimension(0, 10).setLocation(Location.newInstance("fo")).build();
         serviceSet.add(one);
         //		assertTrue(serviceSet.contains(two));
         serviceSet.remove(two);
@@ -66,12 +66,12 @@ public void noName() {
     @Test(expected = IllegalArgumentException.class)
     public void whenCapacityDimValueIsNegative_throwIllegalStateExpception() {
         @SuppressWarnings("unused")
-        Service s = new Service.Builder("s").setLocation(Location.newInstance("foo")).addSizeDimension(0, -10).build();
+        ServiceJob s = new ServiceJob.Builder("s").setLocation(Location.newInstance("foo")).addSizeDimension(0, -10).build();
     }
 
     @Test
     public void whenAddingTwoCapDimension_nuOfDimsShouldBeTwo() {
-        Service one = new Service.Builder("s").setLocation(Location.newInstance("foofoo"))
+        ServiceJob one = new ServiceJob.Builder("s").setLocation(Location.newInstance("foofoo"))
                         .addSizeDimension(0, 2)
                         .addSizeDimension(1, 4)
                         .build();
@@ -80,7 +80,7 @@ public void whenAddingTwoCapDimension_nuOfDimsShouldBeTwo() {
 
     @Test
     public void sizeAtStartAndEndShouldBeCorrect() {
-        Service one = new Service.Builder("s").setLocation(Location.newInstance("foofoo"))
+        ServiceJob one = new ServiceJob.Builder("s").setLocation(Location.newInstance("foofoo"))
                         .addSizeDimension(0, 2)
                         .addSizeDimension(1, 4)
                         .build();
@@ -90,7 +90,7 @@ public void sizeAtStartAndEndShouldBeCorrect() {
 
     @Test
     public void whenShipmentIsBuiltWithoutSpecifyingCapacity_itShouldHvCapWithOneDimAndDimValOfZero() {
-        Service one = new Service.Builder("s").setLocation(Location.newInstance("foofoo"))
+        ServiceJob one = new ServiceJob.Builder("s").setLocation(Location.newInstance("foofoo"))
                         .build();
         assertEquals(1, one.getActivity().getLoadChange().getNuOfDimensions());
         assertEquals(0, one.getActivity().getLoadChange().get(0));
@@ -98,7 +98,7 @@ public void whenShipmentIsBuiltWithoutSpecifyingCapacity_itShouldHvCapWithOneDim
 
     @Test
     public void whenShipmentIsBuiltWithConstructorWhereSizeIsSpecified_capacityShouldBeSetCorrectly() {
-        Service one = new Service.Builder("s").addSizeDimension(0, 1).setLocation(Location.newInstance("foofoo"))
+        ServiceJob one = new ServiceJob.Builder("s").addSizeDimension(0, 1).setLocation(Location.newInstance("foofoo"))
                         .build();
         assertEquals(1, one.getActivity().getLoadChange().getNuOfDimensions());
         assertEquals(1, one.getActivity().getLoadChange().get(0));
@@ -106,26 +106,26 @@ public void whenShipmentIsBuiltWithConstructorWhereSizeIsSpecified_capacityShoul
 
     @Test
     public void whenCallingForNewInstanceOfBuilder_itShouldReturnBuilderCorrectly() {
-        Service.Builder builder = new Service.Builder("s");
+        ServiceJob.Builder builder = new ServiceJob.Builder("s");
         assertNotNull(builder);
     }
 
     @Test
     public void whenSettingNoType_itShouldReturn_service() {
-        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc")).build();
+        ServiceJob s = new ServiceJob.Builder("s").setLocation(Location.newInstance("loc")).build();
         assertEquals("pickup", s.getType());
     }
 
     @Test
     public void whenSettingLocation_itShouldBeSetCorrectly() {
-        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc")).build();
+        ServiceJob s = new ServiceJob.Builder("s").setLocation(Location.newInstance("loc")).build();
         assertEquals("loc", s.getActivity().getLocation().getId());
         assertEquals("loc", s.getActivity().getLocation().getId());
     }
 
     @Test
     public void whenSettingLocation_itShouldWork() {
-        Service s = new Service.Builder("s").setLocation(Location.Builder.newInstance().setId("loc").build()).build();
+        ServiceJob s = new ServiceJob.Builder("s").setLocation(Location.Builder.newInstance().setId("loc").build()).build();
         assertEquals("loc", s.getActivity().getLocation().getId());
         assertEquals("loc", s.getActivity().getLocation().getId());
     }
@@ -133,7 +133,7 @@ public void whenSettingLocation_itShouldWork() {
 
     @Test
     public void whenSettingLocationCoord_itShouldBeSetCorrectly() {
-        Service s = new Service.Builder("s").setLocation(Location.newInstance(1, 2)).build();
+        ServiceJob s = new ServiceJob.Builder("s").setLocation(Location.newInstance(1, 2)).build();
         assertEquals(1.0, s.getActivity().getLocation().getCoordinate().getX(), 0.01);
         assertEquals(2.0, s.getActivity().getLocation().getCoordinate().getY(), 0.01);
         assertEquals(1.0, s.getActivity().getLocation().getCoordinate().getX(), 0.01);
@@ -143,37 +143,37 @@ public void whenSettingLocationCoord_itShouldBeSetCorrectly() {
     @Test(expected = IllegalArgumentException.class)
     public void whenSettingNeitherLocationIdNorCoord_throwsException() {
         @SuppressWarnings("unused")
-        Service s = new Service.Builder("s").build();
+        ServiceJob s = new ServiceJob.Builder("s").build();
     }
 
     @Test(expected = IllegalArgumentException.class)
     public void whenServiceTimeSmallerZero_throwIllegalStateException() {
         @SuppressWarnings("unused")
-        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc")).setServiceTime(-1).build();
+        ServiceJob s = new ServiceJob.Builder("s").setLocation(Location.newInstance("loc")).setServiceTime(-1).build();
     }
 
     @Test
     public void whenSettingServiceTime_itShouldBeSetCorrectly() {
-        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc")).setServiceTime(1).build();
+        ServiceJob s = new ServiceJob.Builder("s").setLocation(Location.newInstance("loc")).setServiceTime(1).build();
         assertEquals(1.0, s.getActivity().getOperationTime(), 0.01);
     }
 
     @Test(expected = IllegalArgumentException.class)
     public void whenTimeWindowIsNull_throwException() {
         @SuppressWarnings("unused")
-        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc")).setTimeWindow(null).build();
+        ServiceJob s = new ServiceJob.Builder("s").setLocation(Location.newInstance("loc")).setTimeWindow(null).build();
     }
 
     @Test
     public void whenSettingTimeWindow_itShouldBeSetCorrectly() {
-        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc")).setTimeWindow(TimeWindow.newInstance(1.0, 2.0)).build();
+        ServiceJob s = new ServiceJob.Builder("s").setLocation(Location.newInstance("loc")).setTimeWindow(TimeWindow.newInstance(1.0, 2.0)).build();
         assertEquals(1.0, s.getActivity().getSingleTimeWindow().getStart(), 0.01);
         assertEquals(2.0, s.getActivity().getSingleTimeWindow().getEnd(), 0.01);
     }
 
     @Test
     public void whenAddingSkills_theyShouldBeAddedCorrectly() {
-        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
+        ServiceJob s = new ServiceJob.Builder("s").setLocation(Location.newInstance("loc"))
                         .addRequiredSkill("drill").addRequiredSkill("screwdriver").build();
         assertTrue(s.getRequiredSkills().containsSkill("drill"));
         assertTrue(s.getRequiredSkills().containsSkill("drill"));
@@ -182,7 +182,7 @@ public void whenAddingSkills_theyShouldBeAddedCorrectly() {
 
     @Test
     public void whenAddingSkillsCaseSens_theyShouldBeAddedCorrectly() {
-        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
+        ServiceJob s = new ServiceJob.Builder("s").setLocation(Location.newInstance("loc"))
                         .addRequiredSkill("DriLl").addRequiredSkill("screwDriver").build();
         assertTrue(s.getRequiredSkills().containsSkill("drill"));
         assertTrue(s.getRequiredSkills().containsSkill("drilL"));
@@ -192,7 +192,7 @@ public void whenAddingSkillsCaseSens_theyShouldBeAddedCorrectly() {
     public void whenAddingSeveralTimeWindows_itShouldBeSetCorrectly() {
         TimeWindow tw1 = TimeWindow.newInstance(1.0, 2.0);
         TimeWindow tw2 = TimeWindow.newInstance(3.0, 5.0);
-        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
+        ServiceJob s = new ServiceJob.Builder("s").setLocation(Location.newInstance("loc"))
                         .addTimeWindow(tw1)
                         .addTimeWindow(tw2)
                         .build();
@@ -203,7 +203,7 @@ public void whenAddingSeveralTimeWindows_itShouldBeSetCorrectly() {
 
     @Test
     public void whenAddingTimeWindow_itShouldBeSetCorrectly() {
-        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
+        ServiceJob s = new ServiceJob.Builder("s").setLocation(Location.newInstance("loc"))
                         .addTimeWindow(TimeWindow.newInstance(1.0, 2.0)).build();
         assertEquals(1.0, s.getActivity().getSingleTimeWindow().getStart(), 0.01);
         assertEquals(2.0, s.getActivity().getSingleTimeWindow().getEnd(), 0.01);
@@ -212,7 +212,7 @@ public void whenAddingTimeWindow_itShouldBeSetCorrectly() {
 
     @Test
     public void whenAddingSkillsCaseSensV2_theyShouldBeAddedCorrectly() {
-        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
+        ServiceJob s = new ServiceJob.Builder("s").setLocation(Location.newInstance("loc"))
                         .addRequiredSkill("screwDriver").build();
         assertFalse(s.getRequiredSkills().containsSkill("drill"));
         assertFalse(s.getRequiredSkills().containsSkill("drilL"));
@@ -220,14 +220,14 @@ public void whenAddingSkillsCaseSensV2_theyShouldBeAddedCorrectly() {
 
     @Test
     public void nameShouldBeAssigned() {
-        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
+        ServiceJob s = new ServiceJob.Builder("s").setLocation(Location.newInstance("loc"))
                         .setName("name").build();
         assertEquals("name", s.getName());
     }
 
     @Test
     public void shouldKnowMultipleTimeWindows() {
-        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
+        ServiceJob s = new ServiceJob.Builder("s").setLocation(Location.newInstance("loc"))
                         .addTimeWindow(TimeWindow.newInstance(0., 10.)).addTimeWindow(TimeWindow.newInstance(20., 30.))
                         .setName("name").build();
         assertEquals(2, s.getActivity().getTimeWindows().size());
@@ -235,7 +235,7 @@ public void shouldKnowMultipleTimeWindows() {
 
     @Test(expected = IllegalArgumentException.class)
     public void whenMultipleTWOverlap_throwEx() {
-        new Service.Builder("s").setLocation(Location.newInstance("loc"))
+        new ServiceJob.Builder("s").setLocation(Location.newInstance("loc"))
         .addTimeWindow(TimeWindow.newInstance(0., 10.))
         .addTimeWindow(TimeWindow.newInstance(5., 30.))
         .setName("name").build();
@@ -243,7 +243,7 @@ public void whenMultipleTWOverlap_throwEx() {
 
     @Test(expected = IllegalArgumentException.class)
     public void whenMultipleTWOverlap2_throwEx() {
-        new Service.Builder("s").setLocation(Location.newInstance("loc"))
+        new ServiceJob.Builder("s").setLocation(Location.newInstance("loc"))
         .addTimeWindow(TimeWindow.newInstance(20., 30.))
         .addTimeWindow(TimeWindow.newInstance(0., 25.))
         .setName("name").build();
@@ -251,35 +251,35 @@ public void whenMultipleTWOverlap2_throwEx() {
 
     @Test
     public void whenSettingPriorities_itShouldBeSetCorrectly() {
-        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
+        ServiceJob s = new ServiceJob.Builder("s").setLocation(Location.newInstance("loc"))
                         .setPriority(1).build();
         assertEquals(1, s.getPriority());
     }
 
     @Test
     public void whenSettingPriorities_itShouldBeSetCorrectly2() {
-        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
+        ServiceJob s = new ServiceJob.Builder("s").setLocation(Location.newInstance("loc"))
                         .setPriority(3).build();
         assertEquals(3, s.getPriority());
     }
 
     @Test
     public void whenNotSettingPriorities_defaultShouldBe2() {
-        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
+        ServiceJob s = new ServiceJob.Builder("s").setLocation(Location.newInstance("loc"))
                         .build();
         assertEquals(2, s.getPriority());
     }
 
     @Test(expected = IllegalArgumentException.class)
     public void whenSettingIncorrectPriorities_itShouldThrowException() {
-        new Service.Builder("s").setLocation(Location.newInstance("loc"))
+        new ServiceJob.Builder("s").setLocation(Location.newInstance("loc"))
         .setPriority(30).build();
 
     }
 
     @Test(expected = IllegalArgumentException.class)
     public void whenSettingIncorrectPriorities_itShouldThrowException2() {
-        new Service.Builder("s").setLocation(Location.newInstance("loc"))
+        new ServiceJob.Builder("s").setLocation(Location.newInstance("loc"))
         .setPriority(0).build();
 
     }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/legacy/LegacyServiceTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/legacy/LegacyServiceTest.java
index 4d1cd267d..bc7a90317 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/legacy/LegacyServiceTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/legacy/LegacyServiceTest.java
@@ -35,32 +35,32 @@
 import org.junit.Test;
 
 import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.job.LegacyService;
+import com.graphhopper.jsprit.core.problem.job.Service;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 
 public class LegacyServiceTest {
 
     @Test
     public void whenTwoServicesHaveTheSameId_theirReferencesShouldBeUnEqual() {
-        LegacyService one = LegacyService.Builder.newInstance("service").addSizeDimension(0, 10).setLocation(Location.newInstance("foo")).build();
-        LegacyService two = LegacyService.Builder.newInstance("service").addSizeDimension(0, 10).setLocation(Location.newInstance("fo")).build();
+        Service one = Service.Builder.newInstance("service").addSizeDimension(0, 10).setLocation(Location.newInstance("foo")).build();
+        Service two = Service.Builder.newInstance("service").addSizeDimension(0, 10).setLocation(Location.newInstance("fo")).build();
 
         assertTrue(one != two);
     }
 
     @Test
     public void whenTwoServicesHaveTheSameId_theyShouldBeEqual() {
-        LegacyService one = LegacyService.Builder.newInstance("service").addSizeDimension(0, 10).setLocation(Location.newInstance("foo")).build();
-        LegacyService two = LegacyService.Builder.newInstance("service").addSizeDimension(0, 10).setLocation(Location.newInstance("fo")).build();
+        Service one = Service.Builder.newInstance("service").addSizeDimension(0, 10).setLocation(Location.newInstance("foo")).build();
+        Service two = Service.Builder.newInstance("service").addSizeDimension(0, 10).setLocation(Location.newInstance("fo")).build();
 
         assertTrue(one.equals(two));
     }
 
     @Test
     public void noName() {
-        Set<LegacyService> serviceSet = new HashSet<LegacyService>();
-        LegacyService one = LegacyService.Builder.newInstance("service").addSizeDimension(0, 10).setLocation(Location.newInstance("foo")).build();
-        LegacyService two = LegacyService.Builder.newInstance("service").addSizeDimension(0, 10).setLocation(Location.newInstance("fo")).build();
+        Set<Service> serviceSet = new HashSet<Service>();
+        Service one = Service.Builder.newInstance("service").addSizeDimension(0, 10).setLocation(Location.newInstance("foo")).build();
+        Service two = Service.Builder.newInstance("service").addSizeDimension(0, 10).setLocation(Location.newInstance("fo")).build();
         serviceSet.add(one);
         // assertTrue(serviceSet.contains(two));
         serviceSet.remove(two);
@@ -70,19 +70,19 @@ public void noName() {
     @Test(expected = IllegalArgumentException.class)
     public void whenCapacityDimValueIsNegative_throwIllegalStateExpception() {
         @SuppressWarnings("unused")
-        LegacyService s = LegacyService.Builder.newInstance("s").setLocation(Location.newInstance("foo")).addSizeDimension(0, -10).build();
+        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("foo")).addSizeDimension(0, -10).build();
     }
 
     @Test
     public void whenAddingTwoCapDimension_nuOfDimsShouldBeTwo() {
-        LegacyService one = LegacyService.Builder.newInstance("s").setLocation(Location.newInstance("foofoo"))
+        Service one = Service.Builder.newInstance("s").setLocation(Location.newInstance("foofoo"))
                         .addSizeDimension(0, 2).addSizeDimension(1, 4).build();
         assertEquals(2, one.getSize().getNuOfDimensions());
     }
 
     @Test
     public void whenShipmentIsBuiltWithoutSpecifyingCapacity_itShouldHvCapWithOneDimAndDimValOfZero() {
-        LegacyService one = LegacyService.Builder.newInstance("s").setLocation(Location.newInstance("foofoo"))
+        Service one = Service.Builder.newInstance("s").setLocation(Location.newInstance("foofoo"))
                         .build();
         assertEquals(1, one.getSize().getNuOfDimensions());
         assertEquals(0, one.getSize().get(0));
@@ -90,7 +90,7 @@ public void whenShipmentIsBuiltWithoutSpecifyingCapacity_itShouldHvCapWithOneDim
 
     @Test
     public void whenShipmentIsBuiltWithConstructorWhereSizeIsSpecified_capacityShouldBeSetCorrectly() {
-        LegacyService one = LegacyService.Builder.newInstance("s").addSizeDimension(0, 1).setLocation(Location.newInstance("foofoo"))
+        Service one = Service.Builder.newInstance("s").addSizeDimension(0, 1).setLocation(Location.newInstance("foofoo"))
                         .build();
         assertEquals(1, one.getSize().getNuOfDimensions());
         assertEquals(1, one.getSize().get(0));
@@ -98,26 +98,26 @@ public void whenShipmentIsBuiltWithConstructorWhereSizeIsSpecified_capacityShoul
 
     @Test
     public void whenCallingForNewInstanceOfBuilder_itShouldReturnBuilderCorrectly() {
-        LegacyService.Builder builder = LegacyService.Builder.newInstance("s");
+        Service.Builder builder = Service.Builder.newInstance("s");
         assertNotNull(builder);
     }
 
     @Test
     public void whenSettingNoType_itShouldReturn_service() {
-        LegacyService s = LegacyService.Builder.newInstance("s").setLocation(Location.newInstance("loc")).build();
+        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc")).build();
         assertEquals("service", s.getType());
     }
 
     @Test
     public void whenSettingLocation_itShouldBeSetCorrectly() {
-        LegacyService s = LegacyService.Builder.newInstance("s").setLocation(Location.newInstance("loc")).build();
+        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc")).build();
         assertEquals("loc", s.getLocation().getId());
         assertEquals("loc", s.getLocation().getId());
     }
 
     @Test
     public void whenSettingLocation_itShouldWork() {
-        LegacyService s = LegacyService.Builder.newInstance("s").setLocation(Location.Builder.newInstance().setId("loc").build()).build();
+        Service s = Service.Builder.newInstance("s").setLocation(Location.Builder.newInstance().setId("loc").build()).build();
         assertEquals("loc", s.getLocation().getId());
         assertEquals("loc", s.getLocation().getId());
     }
@@ -125,7 +125,7 @@ public void whenSettingLocation_itShouldWork() {
 
     @Test
     public void whenSettingLocationCoord_itShouldBeSetCorrectly(){
-        LegacyService s = LegacyService.Builder.newInstance("s").setLocation(Location.newInstance(1, 2)).build();
+        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance(1, 2)).build();
         assertEquals(1.0,s.getLocation().getCoordinate().getX(),0.01);
         assertEquals(2.0,s.getLocation().getCoordinate().getY(),0.01);
         assertEquals(1.0,s.getLocation().getCoordinate().getX(),0.01);
@@ -135,37 +135,37 @@ public void whenSettingLocationCoord_itShouldBeSetCorrectly(){
     @Test(expected=IllegalArgumentException.class)
     public void whenSettingNeitherLocationIdNorCoord_throwsException(){
         @SuppressWarnings("unused")
-        LegacyService s = LegacyService.Builder.newInstance("s").build();
+        Service s = Service.Builder.newInstance("s").build();
     }
 
     @Test(expected=IllegalArgumentException.class)
     public void whenServiceTimeSmallerZero_throwIllegalStateException(){
         @SuppressWarnings("unused")
-        LegacyService s = LegacyService.Builder.newInstance("s").setLocation(Location.newInstance("loc")).setServiceTime(-1).build();
+        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc")).setServiceTime(-1).build();
     }
 
     @Test
     public void whenSettingServiceTime_itShouldBeSetCorrectly(){
-        LegacyService s = LegacyService.Builder.newInstance("s").setLocation(Location.newInstance("loc")).setServiceTime(1).build();
+        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc")).setServiceTime(1).build();
         assertEquals(1.0,s.getServiceDuration(),0.01);
     }
 
     @Test(expected=IllegalArgumentException.class)
     public void whenTimeWindowIsNull_throwException(){
         @SuppressWarnings("unused")
-        LegacyService s = LegacyService.Builder.newInstance("s").setLocation(Location.newInstance("loc")).setTimeWindow(null).build();
+        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc")).setTimeWindow(null).build();
     }
 
     @Test
     public void whenSettingTimeWindow_itShouldBeSetCorrectly(){
-        LegacyService s = LegacyService.Builder.newInstance("s").setLocation(Location.newInstance("loc")).setTimeWindow(TimeWindow.newInstance(1.0, 2.0)).build();
+        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc")).setTimeWindow(TimeWindow.newInstance(1.0, 2.0)).build();
         assertEquals(1.0,s.getTimeWindow().getStart(),0.01);
         assertEquals(2.0,s.getTimeWindow().getEnd(),0.01);
     }
 
     @Test
     public void whenAddingSkills_theyShouldBeAddedCorrectly(){
-        LegacyService s = LegacyService.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
                         .addRequiredSkill("drill").addRequiredSkill("screwdriver").build();
         assertTrue(s.getRequiredSkills().containsSkill("drill"));
         assertTrue(s.getRequiredSkills().containsSkill("drill"));
@@ -174,7 +174,7 @@ public void whenAddingSkills_theyShouldBeAddedCorrectly(){
 
     @Test
     public void whenAddingSkillsCaseSens_theyShouldBeAddedCorrectly(){
-        LegacyService s = LegacyService.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
                         .addRequiredSkill("DriLl").addRequiredSkill("screwDriver").build();
         assertTrue(s.getRequiredSkills().containsSkill("drill"));
         assertTrue(s.getRequiredSkills().containsSkill("drilL"));
@@ -184,7 +184,7 @@ public void whenAddingSkillsCaseSens_theyShouldBeAddedCorrectly(){
     public void whenAddingSeveralTimeWindows_itShouldBeSetCorrectly(){
         TimeWindow tw1 = TimeWindow.newInstance(1.0, 2.0);
         TimeWindow tw2 = TimeWindow.newInstance(3.0, 5.0);
-        LegacyService s = LegacyService.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
                         .addTimeWindow(tw1).addTimeWindow(tw2).build();
         assertEquals(2, s.getTimeWindows().size());
         assertThat(s.getTimeWindows(),hasItem(is(tw1)));
@@ -193,7 +193,7 @@ public void whenAddingSeveralTimeWindows_itShouldBeSetCorrectly(){
 
     @Test
     public void whenAddingTimeWindow_itShouldBeSetCorrectly(){
-        LegacyService s = LegacyService.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
                         .addTimeWindow(TimeWindow.newInstance(1.0, 2.0)).build();
         assertEquals(1.0, s.getTimeWindow().getStart(), 0.01);
         assertEquals(2.0, s.getTimeWindow().getEnd(), 0.01);
@@ -204,7 +204,7 @@ public void whenAddingTimeWindow_itShouldBeSetCorrectly(){
 
     @Test
     public void whenAddingSkillsCaseSensV2_theyShouldBeAddedCorrectly() {
-        LegacyService s = LegacyService.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
                         .addRequiredSkill("screwDriver").build();
         assertFalse(s.getRequiredSkills().containsSkill("drill"));
         assertFalse(s.getRequiredSkills().containsSkill("drilL"));
@@ -212,14 +212,14 @@ public void whenAddingSkillsCaseSensV2_theyShouldBeAddedCorrectly() {
 
     @Test
     public void nameShouldBeAssigned() {
-        LegacyService s = LegacyService.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
                         .setName("name").build();
         assertEquals("name", s.getName());
     }
 
     @Test
     public void shouldKnowMultipleTimeWindows(){
-        LegacyService s = LegacyService.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
                         .addTimeWindow(TimeWindow.newInstance(0., 10.))
                         .addTimeWindow(TimeWindow.newInstance(20., 30.)).setName("name").build();
         assertEquals(2,s.getTimeWindows().size());
@@ -227,56 +227,56 @@ public void shouldKnowMultipleTimeWindows(){
 
     @Test(expected = IllegalArgumentException.class)
     public void whenMultipleTWOverlap_throwEx(){
-        LegacyService s = LegacyService.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
                         .addTimeWindow(TimeWindow.newInstance(0., 10.))
                         .addTimeWindow(TimeWindow.newInstance(5., 30.)).setName("name").build();
     }
 
     @Test(expected = IllegalArgumentException.class)
     public void whenMultipleTWOverlap2_throwEx(){
-        LegacyService s = LegacyService.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
                         .addTimeWindow(TimeWindow.newInstance(20., 30.))
                         .addTimeWindow(TimeWindow.newInstance(0., 25.)).setName("name").build();
     }
 
     @Test
     public void whenSettingPriorities_itShouldBeSetCorrectly(){
-        LegacyService s = LegacyService.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
                         .setPriority(1).build();
         Assert.assertEquals(1, s.getPriority());
     }
 
     @Test
     public void whenSettingPriorities_itShouldBeSetCorrectly2(){
-        LegacyService s = LegacyService.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
                         .setPriority(3).build();
         Assert.assertEquals(3, s.getPriority());
     }
 
     @Test
     public void whenSettingPriorities_itShouldBeSetCorrectly3() {
-        LegacyService s = LegacyService.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
                         .setPriority(10).build();
         Assert.assertEquals(10, s.getPriority());
     }
 
     @Test
     public void whenNotSettingPriorities_defaultShouldBe2(){
-        LegacyService s = LegacyService.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
                         .build();
         Assert.assertEquals(2, s.getPriority());
     }
 
     @Test(expected = IllegalArgumentException.class)
     public void whenSettingIncorrectPriorities_itShouldThrowException(){
-        LegacyService s = LegacyService.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
                         .setPriority(30).build();
 
     }
 
     @Test(expected = IllegalArgumentException.class)
     public void whenSettingIncorrectPriorities_itShouldThrowException2(){
-        LegacyService s = LegacyService.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
                         .setPriority(0).build();
 
     }
@@ -284,11 +284,11 @@ public void whenSettingIncorrectPriorities_itShouldThrowException2(){
 
     @Test
     public void whenSettingUserData_itIsAssociatedWithTheJob() {
-        LegacyService one = LegacyService.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        Service one = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
                         .setUserData(new HashMap<String, Object>()).build();
-        LegacyService two = LegacyService.Builder.newInstance("s2").setLocation(Location.newInstance("loc")).setUserData(42)
+        Service two = Service.Builder.newInstance("s2").setLocation(Location.newInstance("loc")).setUserData(42)
                         .build();
-        LegacyService three = LegacyService.Builder.newInstance("s3").setLocation(Location.newInstance("loc")).build();
+        Service three = Service.Builder.newInstance("s3").setLocation(Location.newInstance("loc")).build();
 
         assertTrue(one.getUserData() instanceof Map);
         assertEquals(42, two.getUserData());
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/TestVehicleRoute.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/TestVehicleRoute.java
index f8cd43d77..ea97b8717 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/TestVehicleRoute.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/TestVehicleRoute.java
@@ -31,7 +31,7 @@
 import com.graphhopper.jsprit.core.problem.driver.DriverImpl.NoDriver;
 import com.graphhopper.jsprit.core.problem.job.Delivery;
 import com.graphhopper.jsprit.core.problem.job.Pickup;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivity;
@@ -88,7 +88,7 @@ public void whenBuildingRouteWithNulls_itThrowsException() {
     public void whenBuildingANonEmptyTour2Times_tourIterIteratesOverActivitiesCorrectly() {
         VehicleRoute.Builder routeBuilder = VehicleRoute.Builder.newInstance(vehicle, driver);
         Location loc = Location.newInstance("1");
-        routeBuilder.addService(new Service.Builder("2").addSizeDimension(0, 30).setLocation(loc).build());
+        routeBuilder.addService(new ServiceJob.Builder("2").addSizeDimension(0, 30).setLocation(loc).build());
         VehicleRoute route = routeBuilder.build();
 
         {
@@ -102,7 +102,7 @@ public void whenBuildingANonEmptyTour2Times_tourIterIteratesOverActivitiesCorrec
             assertEquals(1, count);
         }
         {
-            Service service = new Service.Builder("3").setLocation(loc).build();
+            ServiceJob service = new ServiceJob.Builder("3").setLocation(loc).build();
             ServiceActivity serviceAct = new ServiceActivity(service, "service",
                             loc,
                             0d, SizeDimension.Builder.newInstance().addDimension(0, 30).build(),
@@ -135,7 +135,7 @@ public void whenBuildingANonEmptyTour_tourReverseIterIteratesOverActivitiesCorre
     @Test
     public void whenBuildingANonEmptyTourV2_tourReverseIterIteratesOverActivitiesCorrectly() {
         VehicleRoute.Builder routeBuilder = VehicleRoute.Builder.newInstance(vehicle, driver);
-        routeBuilder.addService(new Service.Builder("2").addSizeDimension(0, 30).setLocation(Location.newInstance("1")).build());
+        routeBuilder.addService(new ServiceJob.Builder("2").addSizeDimension(0, 30).setLocation(Location.newInstance("1")).build());
         VehicleRoute route = routeBuilder.build();
         Iterator<TourActivity> iter = route.getTourActivities().reverseActivityIterator();
         int count = 0;
@@ -150,8 +150,8 @@ public void whenBuildingANonEmptyTourV2_tourReverseIterIteratesOverActivitiesCor
     @Test
     public void whenBuildingANonEmptyTour2Times_tourReverseIterIteratesOverActivitiesCorrectly() {
         VehicleRoute.Builder routeBuilder = VehicleRoute.Builder.newInstance(vehicle, driver);
-        routeBuilder.addService(new Service.Builder("2").addSizeDimension(0, 30).setLocation(Location.newInstance("1")).build());
-        routeBuilder.addService(new Service.Builder("3").addSizeDimension(0, 30).setLocation(Location.newInstance("2")).build());
+        routeBuilder.addService(new ServiceJob.Builder("2").addSizeDimension(0, 30).setLocation(Location.newInstance("1")).build());
+        routeBuilder.addService(new ServiceJob.Builder("3").addSizeDimension(0, 30).setLocation(Location.newInstance("2")).build());
         VehicleRoute route = routeBuilder.build();
         {
             Iterator<TourActivity> iter = route.getTourActivities().reverseActivityIterator();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivityTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivityTest.java
index 406789f77..d572c76d4 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivityTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivityTest.java
@@ -28,7 +28,7 @@
 import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.job.Break;
 import com.graphhopper.jsprit.core.problem.job.Break.Builder;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 
 
 public class BreakActivityTest {
@@ -96,8 +96,8 @@ public void whenCopyingStart_itShouldBeDoneCorrectly() {
     @Test
     public void whenTwoDeliveriesHaveTheSameUnderlyingJob_theyAreEqual() {
         Location loc = Location.newInstance("loc");
-        Service s1 = new Service.Builder("s").setLocation(loc).build();
-        Service s2 = new Service.Builder("s").setLocation(loc).build();
+        ServiceJob s1 = new ServiceJob.Builder("s").setLocation(loc).build();
+        ServiceJob s2 = new ServiceJob.Builder("s").setLocation(loc).build();
         ServiceActivity d1 = new ServiceActivity(s1, "s1",
                         loc, 0d, SizeDimension.EMPTY,
                         TimeWindows.ANY_TIME.getTimeWindows());
@@ -111,8 +111,8 @@ public void whenTwoDeliveriesHaveTheSameUnderlyingJob_theyAreEqual() {
     @Test
     public void whenTwoDeliveriesHaveTheDifferentUnderlyingJob_theyAreNotEqual() {
         Location loc = Location.newInstance("loc");
-        Service s1 = new Service.Builder("s").setLocation(loc).build();
-        Service s2 = new Service.Builder("s2").setLocation(loc).build();
+        ServiceJob s1 = new ServiceJob.Builder("s").setLocation(loc).build();
+        ServiceJob s2 = new ServiceJob.Builder("s2").setLocation(loc).build();
         ServiceActivity d1 = new ServiceActivity(s1, "s1",
                         loc, 0d, SizeDimension.EMPTY,
                         TimeWindows.ANY_TIME.getTimeWindows());
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivityTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivityTest.java
index ce72fed2a..8886e1dff 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivityTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivityTest.java
@@ -22,13 +22,13 @@
 import org.junit.Before;
 
 import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 
 public class PickupActivityTest extends JobActivityTest {
 
     @Before
     public void doBefore() {
-        service = new Service.Builder("service").setLocation(Location.newInstance("loc")).
+        service = new ServiceJob.Builder("service").setLocation(Location.newInstance("loc")).
                         setTimeWindow(TimeWindow.newInstance(1., 2.)).
                         setServiceTime(20d).
                         addSizeDimension(0, 10).addSizeDimension(1, 100).addSizeDimension(2, 1000).build();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityTest.java
index d68d74b8e..051f3681b 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityTest.java
@@ -22,13 +22,13 @@
 import org.junit.Before;
 
 import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 
 public class ServiceActivityTest extends JobActivityTest {
 
     @Before
     public void doBefore() {
-        service = new Service.Builder("service").setLocation(Location.newInstance("loc")).
+        service = new ServiceJob.Builder("service").setLocation(Location.newInstance("loc")).
                         setTimeWindow(TimeWindow.newInstance(1., 2.)).
                         setServiceTime(20d).
                         addSizeDimension(0, 10).addSizeDimension(1, 100).addSizeDimension(2, 1000).build();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TestTourActivities.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TestTourActivities.java
index 5408dc012..09557e8e9 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TestTourActivities.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TestTourActivities.java
@@ -26,20 +26,20 @@
 
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.SizeDimension;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 
 
 public class TestTourActivities {
 
-    private Service service;
+    private ServiceJob service;
     private ServiceActivity act;
     private TourActivities tour;
 
     @Before
     public void doBefore() {
         Location loc = Location.newInstance("loc");
-        service = new Service.Builder("yo").setLocation(loc).build();
+        service = new ServiceJob.Builder("yo").setLocation(loc).build();
         act = new ServiceActivity(service, "s1",
                         loc, 0d, SizeDimension.Builder.newInstance().addDimension(0, 10).build(),
                         TimeWindows.ANY_TIME.getTimeWindows());
@@ -74,7 +74,7 @@ public void whenAddingAServiceAndThenRemovingTheServiceAgain_tourShouldNotServeI
         assertEquals(0, tour.getActivities().size());
         tour.addActivity(act);
         assertEquals(1, tour.getActivities().size());
-        Service anotherServiceInstance = new Service.Builder("yo").addSizeDimension(0, 10).setLocation(Location.newInstance("loc")).build();
+        ServiceJob anotherServiceInstance = new ServiceJob.Builder("yo").addSizeDimension(0, 10).setLocation(Location.newInstance("loc")).build();
         assertTrue(service.equals(anotherServiceInstance));
         boolean removed = tour.removeJob(anotherServiceInstance);
         assertTrue(removed);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/ChristofidesReader.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/ChristofidesReader.java
index 12671b756..211cec884 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/ChristofidesReader.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/ChristofidesReader.java
@@ -31,7 +31,7 @@
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
 import com.graphhopper.jsprit.core.problem.job.Delivery;
 import com.graphhopper.jsprit.core.problem.job.Pickup;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 
@@ -97,7 +97,7 @@ public void read(InputStream inputStream) {
                 int demand = Integer.parseInt(tokens[2].trim());
                 String customer = Integer.valueOf(counter - 1).toString();
                 if (jobType.equals(JobType.SERVICE)) {
-                    Service service = new Service.Builder(customer).addSizeDimension(0, demand).setServiceTime(serviceTime).setLocation(Location.newInstance(customerCoord.getX(), customerCoord.getY())).build();
+                    ServiceJob service = new ServiceJob.Builder(customer).addSizeDimension(0, demand).setServiceTime(serviceTime).setLocation(Location.newInstance(customerCoord.getX(), customerCoord.getY())).build();
                     vrpBuilder.addJob(service);
                 } else if (jobType.equals(JobType.DELIVERY)) {
                     Delivery service = new Delivery.Builder(customer).addSizeDimension(0, demand).setServiceTime(serviceTime).setLocation(Location.newInstance(customerCoord.getX(), customerCoord.getY())).build();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/SolomonReader.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/SolomonReader.java
index 00846d8bc..e0ab1621a 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/SolomonReader.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/SolomonReader.java
@@ -29,7 +29,7 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
@@ -110,7 +110,7 @@ public void read(InputStream inputStream) {
                     vrpBuilder.addVehicle(vehicle);
 
                 } else {
-                    Service service = new Service.Builder(customerId).addSizeDimension(0, demand)
+                    ServiceJob service = new ServiceJob.Builder(customerId).addSizeDimension(0, demand)
                         .setLocation(Location.Builder.newInstance().setCoordinate(coord).setId(customerId).build()).setServiceTime(serviceTime)
                         .setTimeWindow(TimeWindow.newInstance(start, end)).build();
                     vrpBuilder.addJob(service);
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/BreakExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/BreakExample.java
index 7cc2a04f1..8bb90a395 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/BreakExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/BreakExample.java
@@ -23,7 +23,7 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Break;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
@@ -67,11 +67,11 @@ public static void main(String[] args) {
 		/*
 		 * build services at the required locations, each with a capacity-demand of 1.
 		 */
-        Service service1 = new Service.Builder("1").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 7)).build();
-        Service service2 = new Service.Builder("2").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 13)).build();
+        ServiceJob service1 = new ServiceJob.Builder("1").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 7)).build();
+        ServiceJob service2 = new ServiceJob.Builder("2").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 13)).build();
 
-        Service service3 = new Service.Builder("3").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(15, 7)).build();
-        Service service4 = new Service.Builder("4").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(15, 13)).build();
+        ServiceJob service3 = new ServiceJob.Builder("3").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(15, 7)).build();
+        ServiceJob service4 = new ServiceJob.Builder("4").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(15, 13)).build();
 
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/CircleExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/CircleExample.java
index 7c84c292c..ef34714b4 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/CircleExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/CircleExample.java
@@ -26,7 +26,7 @@
 import com.graphhopper.jsprit.core.algorithm.box.GreedySchrimpfFactory;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.util.Coordinate;
@@ -69,7 +69,7 @@ public static void main(String[] args) {
         Collection<Coordinate> circle = createCoordinates(0, 0, 20, step);
         int id = 1;
         for (Coordinate c : circle) {
-            Service s = new Service.Builder(Integer.toString(id)).setLocation(Location.Builder.newInstance().setCoordinate(c).build()).build();
+            ServiceJob s = new ServiceJob.Builder(Integer.toString(id)).setLocation(Location.Builder.newInstance().setCoordinate(c).build()).build();
             vrpBuilder.addJob(s);
             id++;
         }
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/ConfigureAlgorithmInCodeInsteadOfPerXml.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/ConfigureAlgorithmInCodeInsteadOfPerXml.java
index 7e87e20fc..c99371f9f 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/ConfigureAlgorithmInCodeInsteadOfPerXml.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/ConfigureAlgorithmInCodeInsteadOfPerXml.java
@@ -21,7 +21,7 @@
 import com.graphhopper.jsprit.core.algorithm.VehicleRoutingAlgorithm;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl.Builder;
@@ -63,11 +63,11 @@ public static void main(String[] args) {
 		/*
          * build services at the required locations, each with a capacity-demand of 1.
 		 */
-        Service service1 = new Service.Builder("1").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 7)).build();
-        Service service2 = new Service.Builder("2").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 13)).build();
+        ServiceJob service1 = new ServiceJob.Builder("1").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 7)).build();
+        ServiceJob service2 = new ServiceJob.Builder("2").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 13)).build();
 
-        Service service3 = new Service.Builder("3").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 7)).build();
-        Service service4 = new Service.Builder("4").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 13)).build();
+        ServiceJob service3 = new ServiceJob.Builder("3").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 7)).build();
+        ServiceJob service4 = new ServiceJob.Builder("4").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 13)).build();
 
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/CostMatrixExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/CostMatrixExample.java
index bbc2af561..78c6fc9e9 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/CostMatrixExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/CostMatrixExample.java
@@ -24,7 +24,7 @@
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
@@ -54,9 +54,9 @@ public static void main(String[] args) {
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("vehicle")
             .setStartLocation(Location.newInstance("0")).setType(type).build();
 
-        Service s1 = new Service.Builder("1").addSizeDimension(0, 1).setLocation(Location.newInstance("1")).build();
-        Service s2 = new Service.Builder("2").addSizeDimension(0, 1).setLocation(Location.newInstance("2")).build();
-        Service s3 = new Service.Builder("3").addSizeDimension(0, 1).setLocation(Location.newInstance("3")).build();
+        ServiceJob s1 = new ServiceJob.Builder("1").addSizeDimension(0, 1).setLocation(Location.newInstance("1")).build();
+        ServiceJob s2 = new ServiceJob.Builder("2").addSizeDimension(0, 1).setLocation(Location.newInstance("2")).build();
+        ServiceJob s3 = new ServiceJob.Builder("3").addSizeDimension(0, 1).setLocation(Location.newInstance("3")).build();
 
 
 		/*
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/HVRPExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/HVRPExample.java
index 94e534aac..357e4cf85 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/HVRPExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/HVRPExample.java
@@ -23,7 +23,7 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
@@ -71,26 +71,26 @@ public static void main(String[] args) {
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
 
         //add customers
-        vrpBuilder.addJob(new Service.Builder("1").addSizeDimension(0, 18).setLocation(Location.newInstance(22, 22)).build());
-        vrpBuilder.addJob(new Service.Builder("2").addSizeDimension(0, 26).setLocation(Location.newInstance(36, 26)).build());
-        vrpBuilder.addJob(new Service.Builder("3").addSizeDimension(0, 11).setLocation(Location.newInstance(21, 45)).build());
-        vrpBuilder.addJob(new Service.Builder("4").addSizeDimension(0, 30).setLocation(Location.newInstance(45, 35)).build());
-        vrpBuilder.addJob(new Service.Builder("5").addSizeDimension(0, 21).setLocation(Location.newInstance(55, 20)).build());
-        vrpBuilder.addJob(new Service.Builder("6").addSizeDimension(0, 19).setLocation(Location.newInstance(33, 34)).build());
-        vrpBuilder.addJob(new Service.Builder("7").addSizeDimension(0, 15).setLocation(Location.newInstance(50, 50)).build());
-        vrpBuilder.addJob(new Service.Builder("8").addSizeDimension(0, 16).setLocation(Location.newInstance(55, 45)).build());
-        vrpBuilder.addJob(new Service.Builder("9").addSizeDimension(0, 29).setLocation(Location.newInstance(26, 59)).build());
-        vrpBuilder.addJob(new Service.Builder("10").addSizeDimension(0, 26).setLocation(Location.newInstance(40, 66)).build());
-        vrpBuilder.addJob(new Service.Builder("11").addSizeDimension(0, 37).setLocation(Location.newInstance(55, 56)).build());
-        vrpBuilder.addJob(new Service.Builder("12").addSizeDimension(0, 16).setLocation(Location.newInstance(35, 51)).build());
-        vrpBuilder.addJob(new Service.Builder("13").addSizeDimension(0, 12).setLocation(Location.newInstance(62, 35)).build());
-        vrpBuilder.addJob(new Service.Builder("14").addSizeDimension(0, 31).setLocation(Location.newInstance(62, 57)).build());
-        vrpBuilder.addJob(new Service.Builder("15").addSizeDimension(0, 8).setLocation(Location.newInstance(62, 24)).build());
-        vrpBuilder.addJob(new Service.Builder("16").addSizeDimension(0, 19).setLocation(Location.newInstance(21, 36)).build());
-        vrpBuilder.addJob(new Service.Builder("17").addSizeDimension(0, 20).setLocation(Location.newInstance(33, 44)).build());
-        vrpBuilder.addJob(new Service.Builder("18").addSizeDimension(0, 13).setLocation(Location.newInstance(9, 56)).build());
-        vrpBuilder.addJob(new Service.Builder("19").addSizeDimension(0, 15).setLocation(Location.newInstance(62, 48)).build());
-        vrpBuilder.addJob(new Service.Builder("20").addSizeDimension(0, 22).setLocation(Location.newInstance(66, 14)).build());
+        vrpBuilder.addJob(new ServiceJob.Builder("1").addSizeDimension(0, 18).setLocation(Location.newInstance(22, 22)).build());
+        vrpBuilder.addJob(new ServiceJob.Builder("2").addSizeDimension(0, 26).setLocation(Location.newInstance(36, 26)).build());
+        vrpBuilder.addJob(new ServiceJob.Builder("3").addSizeDimension(0, 11).setLocation(Location.newInstance(21, 45)).build());
+        vrpBuilder.addJob(new ServiceJob.Builder("4").addSizeDimension(0, 30).setLocation(Location.newInstance(45, 35)).build());
+        vrpBuilder.addJob(new ServiceJob.Builder("5").addSizeDimension(0, 21).setLocation(Location.newInstance(55, 20)).build());
+        vrpBuilder.addJob(new ServiceJob.Builder("6").addSizeDimension(0, 19).setLocation(Location.newInstance(33, 34)).build());
+        vrpBuilder.addJob(new ServiceJob.Builder("7").addSizeDimension(0, 15).setLocation(Location.newInstance(50, 50)).build());
+        vrpBuilder.addJob(new ServiceJob.Builder("8").addSizeDimension(0, 16).setLocation(Location.newInstance(55, 45)).build());
+        vrpBuilder.addJob(new ServiceJob.Builder("9").addSizeDimension(0, 29).setLocation(Location.newInstance(26, 59)).build());
+        vrpBuilder.addJob(new ServiceJob.Builder("10").addSizeDimension(0, 26).setLocation(Location.newInstance(40, 66)).build());
+        vrpBuilder.addJob(new ServiceJob.Builder("11").addSizeDimension(0, 37).setLocation(Location.newInstance(55, 56)).build());
+        vrpBuilder.addJob(new ServiceJob.Builder("12").addSizeDimension(0, 16).setLocation(Location.newInstance(35, 51)).build());
+        vrpBuilder.addJob(new ServiceJob.Builder("13").addSizeDimension(0, 12).setLocation(Location.newInstance(62, 35)).build());
+        vrpBuilder.addJob(new ServiceJob.Builder("14").addSizeDimension(0, 31).setLocation(Location.newInstance(62, 57)).build());
+        vrpBuilder.addJob(new ServiceJob.Builder("15").addSizeDimension(0, 8).setLocation(Location.newInstance(62, 24)).build());
+        vrpBuilder.addJob(new ServiceJob.Builder("16").addSizeDimension(0, 19).setLocation(Location.newInstance(21, 36)).build());
+        vrpBuilder.addJob(new ServiceJob.Builder("17").addSizeDimension(0, 20).setLocation(Location.newInstance(33, 44)).build());
+        vrpBuilder.addJob(new ServiceJob.Builder("18").addSizeDimension(0, 13).setLocation(Location.newInstance(9, 56)).build());
+        vrpBuilder.addJob(new ServiceJob.Builder("19").addSizeDimension(0, 15).setLocation(Location.newInstance(62, 48)).build());
+        vrpBuilder.addJob(new ServiceJob.Builder("20").addSizeDimension(0, 22).setLocation(Location.newInstance(66, 14)).build());
 
 
         //add vehicle - finite fleet
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/JobAndActivityDependenciesExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/JobAndActivityDependenciesExample.java
index 7f5f5c05c..5b2766c4c 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/JobAndActivityDependenciesExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/JobAndActivityDependenciesExample.java
@@ -30,7 +30,7 @@
 import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
 import com.graphhopper.jsprit.core.problem.constraint.HardActivityConstraint;
 import com.graphhopper.jsprit.core.problem.constraint.HardRouteConstraint;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
@@ -216,36 +216,36 @@ public static void main(String[] args) {
             .addSkill("driver3")
             .setStartLocation(Location.newInstance(-3, 5)).setReturnToDepot(true).build();
 
-        Service s1 = new Service.Builder("s1")
+        ServiceJob s1 = new ServiceJob.Builder("s1")
             .addRequiredSkill("driver1")
             .setName("install new device")
             .setLocation(Location.newInstance(2, 2)).build();
-        Service s2 = new Service.Builder("s2")
+        ServiceJob s2 = new ServiceJob.Builder("s2")
             .addRequiredSkill("driver3")
             .setName("deliver key")
             .setLocation(Location.newInstance(2, 4)).build();
 
-        Service s3 = new Service.Builder("s3")
+        ServiceJob s3 = new ServiceJob.Builder("s3")
             .addRequiredSkill("driver1")
             .setName("repair heater")
             .setLocation(Location.newInstance(-2, 2)).build();
 
-        Service s4 = new Service.Builder("s4")
+        ServiceJob s4 = new ServiceJob.Builder("s4")
             .addRequiredSkill("driver3")
             .setName("get key")
             .setLocation(Location.newInstance(-2.3, 4)).build();
 
-        Service s5 = new Service.Builder("s5")
+        ServiceJob s5 = new ServiceJob.Builder("s5")
             .addRequiredSkill("driver1")
             .setName("cleaning")
             .setLocation(Location.newInstance(1, 5)).build();
 
-        Service s6 = new Service.Builder("s6")
+        ServiceJob s6 = new ServiceJob.Builder("s6")
             .addRequiredSkill("driver3")
             .setName("use key")
             .setLocation(Location.newInstance(-2, 3)).build();
 
-        Service s7 = new Service.Builder("s7")
+        ServiceJob s7 = new ServiceJob.Builder("s7")
             .addRequiredSkill("driver3")
             .setName("maintenance")
             .setLocation(Location.newInstance(-1.7, 3.5)).build();
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleDepotWithInitialRoutesExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleDepotWithInitialRoutesExample.java
index bc68cecac..0f184b9a1 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleDepotWithInitialRoutesExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleDepotWithInitialRoutesExample.java
@@ -24,7 +24,7 @@
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.Builder;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
@@ -90,10 +90,10 @@ public static void main(String[] args) {
 
     }
 
-    private static Service getService(String serviceId, Builder vrpBuilder) {
+    private static ServiceJob getService(String serviceId, Builder vrpBuilder) {
         for (Job j : vrpBuilder.getAddedJobs()) {
             if (j.getId().equals(serviceId)) {
-                return (Service) j;
+                return (ServiceJob) j;
             }
         }
         return null;
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleTimeWindowExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleTimeWindowExample.java
index e41b33320..a504061d7 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleTimeWindowExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleTimeWindowExample.java
@@ -22,7 +22,7 @@
 import com.graphhopper.jsprit.core.distance.ManhattanDistanceCalculator;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl.Builder;
@@ -60,28 +60,28 @@ public static void main(String[] args) {
         /*
          * build services at the required locations, each with a capacity-demand of 1.
          */
-        Service service1 = new Service.Builder("1")
+        ServiceJob service1 = new ServiceJob.Builder("1")
             .addTimeWindow(50, 100)
             .addTimeWindow(20, 35)
             .addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(10, 0)).build();
 
-        Service service2 = new Service.Builder("2")
+        ServiceJob service2 = new ServiceJob.Builder("2")
             .addSizeDimension(WEIGHT_INDEX, 1)
 //            .setServiceTime(10)
             .setLocation(Location.newInstance(20, 0)).setServiceTime(10).build();
 
-        Service service3 = new Service.Builder("3")
+        ServiceJob service3 = new ServiceJob.Builder("3")
             .addTimeWindow(5, 10)
             .addTimeWindow(35, 50)
             .addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(30, 0)).build();
 
-        Service service4 = new Service.Builder("4")
+        ServiceJob service4 = new ServiceJob.Builder("4")
 //            .addTimeWindow(5,10)
             .addTimeWindow(20, 40)
             .addTimeWindow(45, 80)
             .addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(40, 0)).build();
 
-        Service service5 = new Service.Builder("5")
+        ServiceJob service5 = new ServiceJob.Builder("5")
             .addTimeWindow(5, 10)
             .addTimeWindow(20, 40)
             .addTimeWindow(60, 100)
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleTimeWindowExample2.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleTimeWindowExample2.java
index d298f015d..b4b8c065a 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleTimeWindowExample2.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleTimeWindowExample2.java
@@ -24,7 +24,7 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.cost.TransportDistance;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
@@ -85,7 +85,7 @@ public static void main(String[] args) {
 
         Random random = RandomNumberGeneration.newInstance();
         for (int i = 0; i < 40; i++) {
-            Service service = new Service.Builder("" + (i + 1))
+            ServiceJob service = new ServiceJob.Builder("" + (i + 1))
                 .addTimeWindow(random.nextInt(50), 200)
                 .addTimeWindow(220 + random.nextInt(50), 350)
                 .addTimeWindow(400 + random.nextInt(50), 550)
@@ -96,7 +96,7 @@ public static void main(String[] args) {
         }
 
         for (int i = 0; i < 12; i++) {
-            Service service = new Service.Builder("" + (i + 51))
+            ServiceJob service = new ServiceJob.Builder("" + (i + 51))
 //                .addTimeWindow(0, 80)
 ////                .addTimeWindow(120, 200)
 //                .addTimeWindow(250,500)
@@ -106,7 +106,7 @@ public static void main(String[] args) {
             vrpBuilder.addJob(service);
         }
 
-        Service service = new Service.Builder("100")
+        ServiceJob service = new ServiceJob.Builder("100")
             .addTimeWindow(50, 80)
             .setServiceTime(10)
             .setLocation(Location.newInstance(40, 1)).build();
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/RefuseCollectionExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/RefuseCollectionExample.java
index 98981b12b..6bdb3c804 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/RefuseCollectionExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/RefuseCollectionExample.java
@@ -23,7 +23,7 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
@@ -113,7 +113,7 @@ private static void readDemandQuantities(VehicleRoutingProblem.Builder vrpBuilde
             /*
              * build service
 			 */
-            Service service = new Service.Builder(lineTokens[0]).addSizeDimension(0, Integer.parseInt(lineTokens[1])).setLocation(Location.newInstance(lineTokens[0])).build();
+            ServiceJob service = new ServiceJob.Builder(lineTokens[0]).addSizeDimension(0, Integer.parseInt(lineTokens[1])).setLocation(Location.newInstance(lineTokens[0])).build();
             /*
              * and add it to problem
 			 */
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/RefuseCollectionWithFastMatrixExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/RefuseCollectionWithFastMatrixExample.java
index 7b5fddb1d..70b8fafc5 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/RefuseCollectionWithFastMatrixExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/RefuseCollectionWithFastMatrixExample.java
@@ -23,7 +23,7 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
@@ -112,7 +112,7 @@ private static void readDemandQuantities(VehicleRoutingProblem.Builder vrpBuilde
             /*
              * build service
 			 */
-            Service service = new Service.Builder(lineTokens[0])
+            ServiceJob service = new ServiceJob.Builder(lineTokens[0])
                 .addSizeDimension(0, Integer.parseInt(lineTokens[1]))
                 .setLocation(Location.Builder.newInstance().setIndex(Integer.parseInt(lineTokens[0])).build())
                 .build();
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/ServicePickupsWithMultipleDepotsExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/ServicePickupsWithMultipleDepotsExample.java
index 4eed4c14c..433eb792a 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/ServicePickupsWithMultipleDepotsExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/ServicePickupsWithMultipleDepotsExample.java
@@ -24,7 +24,7 @@
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl.Builder;
@@ -77,17 +77,17 @@ public static void main(String[] args) {
 		 * 4: (15,13)->(14,11)
 		 */
 
-        Service shipment1 = new Service.Builder("1").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 7)).build();
-        Service shipment2 = new Service.Builder("2").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 13)).build();
+        ServiceJob shipment1 = new ServiceJob.Builder("1").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 7)).build();
+        ServiceJob shipment2 = new ServiceJob.Builder("2").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 13)).build();
 
-        Service shipment3 = new Service.Builder("3").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 7)).build();
-        Service shipment4 = new Service.Builder("4").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 13)).build();
+        ServiceJob shipment3 = new ServiceJob.Builder("3").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 7)).build();
+        ServiceJob shipment4 = new ServiceJob.Builder("4").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 13)).build();
 
-        Service shipment5 = new Service.Builder("5").addSizeDimension(0, 1).setLocation(Location.newInstance(55, 57)).build();
-        Service shipment6 = new Service.Builder("6").addSizeDimension(0, 1).setLocation(Location.newInstance(55, 63)).build();
+        ServiceJob shipment5 = new ServiceJob.Builder("5").addSizeDimension(0, 1).setLocation(Location.newInstance(55, 57)).build();
+        ServiceJob shipment6 = new ServiceJob.Builder("6").addSizeDimension(0, 1).setLocation(Location.newInstance(55, 63)).build();
 
-        Service shipment7 = new Service.Builder("7").addSizeDimension(0, 1).setLocation(Location.newInstance(65, 57)).build();
-        Service shipment8 = new Service.Builder("8").addSizeDimension(0, 1).setLocation(Location.newInstance(65, 63)).build();
+        ServiceJob shipment7 = new ServiceJob.Builder("7").addSizeDimension(0, 1).setLocation(Location.newInstance(65, 57)).build();
+        ServiceJob shipment8 = new ServiceJob.Builder("8").addSizeDimension(0, 1).setLocation(Location.newInstance(65, 63)).build();
 
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExample.java
index 52d91f51a..f7be818ed 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExample.java
@@ -24,7 +24,7 @@
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl.Builder;
@@ -71,11 +71,11 @@ public static void main(String[] args) {
 		/*
          * build services at the required locations, each with a capacity-demand of 1.
 		 */
-        Service service1 = new Service.Builder("1").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 7)).build();
-        Service service2 = new Service.Builder("2").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 13)).build();
+        ServiceJob service1 = new ServiceJob.Builder("1").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 7)).build();
+        ServiceJob service2 = new ServiceJob.Builder("2").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 13)).build();
 
-        Service service3 = new Service.Builder("3").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(15, 7)).build();
-        Service service4 = new Service.Builder("4").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(15, 13)).build();
+        ServiceJob service3 = new ServiceJob.Builder("3").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(15, 7)).build();
+        ServiceJob service4 = new ServiceJob.Builder("4").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(15, 13)).build();
 
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExampleOpenRoutes.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExampleOpenRoutes.java
index 7b7b8b8eb..0203ae11d 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExampleOpenRoutes.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExampleOpenRoutes.java
@@ -22,7 +22,7 @@
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl.Builder;
@@ -64,11 +64,11 @@ public static void main(String[] args) {
 		/*
          * build services at the required locations, each with a capacity-demand of 1.
 		 */
-        Service service1 = new Service.Builder("1").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 7)).build();
-        Service service2 = new Service.Builder("2").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 13)).build();
+        ServiceJob service1 = new ServiceJob.Builder("1").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 7)).build();
+        ServiceJob service2 = new ServiceJob.Builder("2").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 13)).build();
 
-        Service service3 = new Service.Builder("3").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 7)).build();
-        Service service4 = new Service.Builder("4").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 13)).build();
+        ServiceJob service3 = new ServiceJob.Builder("3").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 7)).build();
+        ServiceJob service4 = new ServiceJob.Builder("4").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 13)).build();
 
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExampleWithPriorities.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExampleWithPriorities.java
index 09d7c4080..c4147f9d4 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExampleWithPriorities.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExampleWithPriorities.java
@@ -23,7 +23,7 @@
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl.Builder;
@@ -70,11 +70,11 @@ public static void main(String[] args) {
 		/*
          * build services at the required locations, each with a capacity-demand of 1.
 		 */
-        Service service1 = new Service.Builder("1").setPriority(1).addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 7)).build();
-        Service service2 = new Service.Builder("2").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 13)).build();
+        ServiceJob service1 = new ServiceJob.Builder("1").setPriority(1).addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 7)).build();
+        ServiceJob service2 = new ServiceJob.Builder("2").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 13)).build();
 
-        Service service3 = new Service.Builder("3").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(15, 7)).build();
-        Service service4 = new Service.Builder("4").setPriority(1).addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(15, 13)).build();
+        ServiceJob service3 = new ServiceJob.Builder("3").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(15, 7)).build();
+        ServiceJob service4 = new ServiceJob.Builder("4").setPriority(1).addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(15, 13)).build();
 
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExampleWithSkills.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExampleWithSkills.java
index 6dbda8f6f..64cedd7c9 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExampleWithSkills.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExampleWithSkills.java
@@ -23,7 +23,7 @@
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl.Builder;
@@ -76,12 +76,12 @@ public static void main(String[] args) {
 		/*
          * build services at the required locations, each with a capacity-demand of 1.
 		 */
-        Service service1 = new Service.Builder("1").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 7)).build();
-        Service service2 = new Service.Builder("2").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 13)).build();
+        ServiceJob service1 = new ServiceJob.Builder("1").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 7)).build();
+        ServiceJob service2 = new ServiceJob.Builder("2").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 13)).build();
 
-        Service service3 = new Service.Builder("3").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(15, 7)).build();
+        ServiceJob service3 = new ServiceJob.Builder("3").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(15, 7)).build();
 
-        Service service4 = new Service.Builder("4").addSizeDimension(WEIGHT_INDEX, 1).addRequiredSkill("drill").setLocation(Location.newInstance(15, 13)).build();
+        ServiceJob service4 = new ServiceJob.Builder("4").addSizeDimension(WEIGHT_INDEX, 1).addRequiredSkill("drill").setLocation(Location.newInstance(15, 13)).build();
 
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SolomonWithSkillsExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SolomonWithSkillsExample.java
index 005a73a74..182473a34 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SolomonWithSkillsExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SolomonWithSkillsExample.java
@@ -27,7 +27,7 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
@@ -63,17 +63,17 @@ public static void main(String[] args) {
             skillProblemBuilder.addVehicle(skill1Vehicle).addVehicle(skill2Vehicle);
         }
         for (Job job : vrp.getJobs().values()) {
-            Service service = (Service) job;
-            Service.Builder skillServiceBuilder;
+            ServiceJob service = (ServiceJob) job;
+            ServiceJob.Builder skillServiceBuilder;
             if (service.getActivity().getLocation().getCoordinate().getY() < 50.) {
-                skillServiceBuilder = new Service.Builder(service.getId() + "_skill2").setServiceTime(service.getActivity().getOperationTime())
+                skillServiceBuilder = new ServiceJob.Builder(service.getId() + "_skill2").setServiceTime(service.getActivity().getOperationTime())
                         .setLocation(Location.Builder.newInstance().setId(service.getActivity().getLocation().getId())
                                 .setCoordinate(service.getActivity().getLocation().getCoordinate()).build())
                         .addTimeWindows(service.getActivity().getTimeWindows())
                         .addSizeDimension(0, service.getActivity().getLoadChange().get(0));
                 skillServiceBuilder.addRequiredSkill("skill2");
             } else {
-                skillServiceBuilder = new Service.Builder(service.getId() + "_skill1").setServiceTime(service.getActivity().getOperationTime())
+                skillServiceBuilder = new ServiceJob.Builder(service.getId() + "_skill1").setServiceTime(service.getActivity().getOperationTime())
                         .setLocation(
                                 Location.Builder.newInstance().setId(service.getActivity().getLocation().getId())
                                         .setCoordinate(service.getActivity().getLocation().getCoordinate()).build())
diff --git a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/BelhaizaReader.java b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/BelhaizaReader.java
index c26b57bea..365c95970 100644
--- a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/BelhaizaReader.java
+++ b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/BelhaizaReader.java
@@ -21,7 +21,7 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.Coordinate;
@@ -110,7 +110,7 @@ public void read(String solomonFile) {
                     }
 
                 } else {
-                    Service.Builder serviceBuilder = new Service.Builder(customerId);
+                    ServiceJob.Builder serviceBuilder = new ServiceJob.Builder(customerId);
                     serviceBuilder.addSizeDimension(0, demand).setLocation(Location.Builder.newInstance().setCoordinate(coord).setId(customerId).build()).setServiceTime(serviceTime);
                     int noTimeWindows = Integer.parseInt(tokens[7]);
                     for (int i = 0; i < noTimeWindows * 2; i = i + 2) {
diff --git a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/ChristofidesReader.java b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/ChristofidesReader.java
index 45477a206..06132f6ae 100644
--- a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/ChristofidesReader.java
+++ b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/ChristofidesReader.java
@@ -21,7 +21,7 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.Coordinate;
@@ -92,7 +92,7 @@ public void read(String fileName) {
                 Coordinate customerCoord = makeCoord(tokens[0].trim(), tokens[1].trim());
                 int demand = Integer.parseInt(tokens[2].trim());
                 String customer = Integer.valueOf(counter - 1).toString();
-                Service service = new Service.Builder(customer).addSizeDimension(0, demand).setServiceTime(serviceTime).setLocation(Location.newInstance(customerCoord.getX(), customerCoord.getY())).build();
+                ServiceJob service = new ServiceJob.Builder(customer).addSizeDimension(0, demand).setServiceTime(serviceTime).setLocation(Location.newInstance(customerCoord.getX(), customerCoord.getY())).build();
                 vrpBuilder.addJob(service);
             }
             counter++;
diff --git a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/CordeauReader.java b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/CordeauReader.java
index 92defdf39..57e3842cf 100644
--- a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/CordeauReader.java
+++ b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/CordeauReader.java
@@ -21,7 +21,7 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl.Builder;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
@@ -103,7 +103,7 @@ public void read(String fileName) {
                 Coordinate customerCoord = makeCoord(tokens[1].trim(), tokens[2].trim());
                 double serviceTime = Double.parseDouble(tokens[3].trim());
                 int demand = Integer.parseInt(tokens[4].trim());
-                Service service = new Service.Builder(id).addSizeDimension(0, demand).setServiceTime(serviceTime)
+                ServiceJob service = new ServiceJob.Builder(id).addSizeDimension(0, demand).setServiceTime(serviceTime)
                     .setLocation(Location.Builder.newInstance().setId(id).setCoordinate(customerCoord).build()).build();
                 vrpBuilder.addJob(service);
             } else if (counter <= (nOfCustomers + nOfDepots + nOfDepots)) {
diff --git a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/LopezIbanezBlumReader.java b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/LopezIbanezBlumReader.java
index 28ef86046..807dec90f 100644
--- a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/LopezIbanezBlumReader.java
+++ b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/LopezIbanezBlumReader.java
@@ -28,7 +28,7 @@
 
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.util.FastVehicleRoutingTransportCostsMatrix;
@@ -80,7 +80,7 @@ public void read(String instanceFile) {
                             .setEarliestStart(Double.parseDouble(twTokens[0])).setLatestArrival(Double.parseDouble(twTokens[1])).build();
                     builder.addVehicle(travelingSalesman);
                 } else {
-                    Service s = new Service.Builder("" + nodeIndex).setLocation(Location.newInstance(nodeIndex))
+                    ServiceJob s = new ServiceJob.Builder("" + nodeIndex).setLocation(Location.newInstance(nodeIndex))
                             .setTimeWindow(TimeWindow.newInstance(Double.parseDouble(twTokens[0]), Double.parseDouble(twTokens[1]))).build();
                     builder.addJob(s);
                 }
@@ -99,12 +99,12 @@ public static void main(String[] args) {
         System.out.println("0->20: " + vrp.getTransportCosts().getTransportCost(Location.newInstance(0), Location.newInstance(20), 0, null, null));
         System.out.println("4->18: " + vrp.getTransportCosts().getTransportCost(Location.newInstance(4), Location.newInstance(18), 0, null, null));
         System.out.println("20->8: " + vrp.getTransportCosts().getTransportCost(Location.newInstance(20), Location.newInstance(8), 0, null, null));
-        System.out.println("18: " + ((Service) vrp.getJobs().get("" + 18)).getActivity().getSingleTimeWindow().getStart() + " "
-                + ((Service) vrp.getJobs().get("" + 18)).getActivity().getSingleTimeWindow().getEnd());
-        System.out.println("20: " + ((Service) vrp.getJobs().get("" + 20)).getActivity().getSingleTimeWindow().getStart() + " "
-                + ((Service) vrp.getJobs().get("" + 20)).getActivity().getSingleTimeWindow().getEnd());
-        System.out.println("1: " + ((Service) vrp.getJobs().get("" + 1)).getActivity().getSingleTimeWindow().getStart() + " "
-                + ((Service) vrp.getJobs().get("" + 1)).getActivity().getSingleTimeWindow().getEnd());
+        System.out.println("18: " + ((ServiceJob) vrp.getJobs().get("" + 18)).getActivity().getSingleTimeWindow().getStart() + " "
+                + ((ServiceJob) vrp.getJobs().get("" + 18)).getActivity().getSingleTimeWindow().getEnd());
+        System.out.println("20: " + ((ServiceJob) vrp.getJobs().get("" + 20)).getActivity().getSingleTimeWindow().getStart() + " "
+                + ((ServiceJob) vrp.getJobs().get("" + 20)).getActivity().getSingleTimeWindow().getEnd());
+        System.out.println("1: " + ((ServiceJob) vrp.getJobs().get("" + 1)).getActivity().getSingleTimeWindow().getStart() + " "
+                + ((ServiceJob) vrp.getJobs().get("" + 1)).getActivity().getSingleTimeWindow().getEnd());
     }
 
     private void close(BufferedReader reader) {
diff --git a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/LuiShenReader.java b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/LuiShenReader.java
index 3d180769f..d841b61d4 100644
--- a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/LuiShenReader.java
+++ b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/LuiShenReader.java
@@ -21,7 +21,7 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
@@ -86,7 +86,7 @@ public void read(String instanceFile, String vehicleFile, String costScenario) {
                 if (counter == 10) {
                     createVehicles(vehicleFile, costScenario, customerId, coord, start, end);
                 } else {
-                    Service service = new Service.Builder("" + counter).addSizeDimension(0, demand)
+                    ServiceJob service = new ServiceJob.Builder("" + counter).addSizeDimension(0, demand)
                         .setLocation(Location.Builder.newInstance().setCoordinate(coord).setId(customerId).build()).setServiceTime(serviceTime)
                         .setTimeWindow(TimeWindow.newInstance(start, end)).build();
                     vrpBuilder.addJob(service);
diff --git a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/SolomonReader.java b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/SolomonReader.java
index eb71dd876..39fed06d3 100644
--- a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/SolomonReader.java
+++ b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/SolomonReader.java
@@ -21,7 +21,7 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
@@ -110,7 +110,7 @@ public void read(String solomonFile) {
                     vrpBuilder.addVehicle(vehicle);
 
                 } else {
-                    Service service = new Service.Builder(customerId).addSizeDimension(0, demand)
+                    ServiceJob service = new ServiceJob.Builder(customerId).addSizeDimension(0, demand)
                         .setLocation(Location.Builder.newInstance().setCoordinate(coord).setId(customerId).build()).setServiceTime(serviceTime)
                         .setTimeWindow(TimeWindow.newInstance(start, end)).build();
                     vrpBuilder.addJob(service);
diff --git a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/TSPLIB95Reader.java b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/TSPLIB95Reader.java
index db119e5c3..18eb87835 100644
--- a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/TSPLIB95Reader.java
+++ b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/TSPLIB95Reader.java
@@ -32,7 +32,7 @@
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
@@ -198,7 +198,7 @@ public void read(String filename) {
                     continue;
                 }
             }
-            Service service = new Service.Builder(id)
+            ServiceJob service = new ServiceJob.Builder(id)
                     .setLocation(Location.Builder.newInstance().setId(id)
                             .setCoordinate(coords[index]).setIndex(index).build())
                     .addSizeDimension(0, demands[index]).build();
@@ -210,7 +210,7 @@ public void read(String filename) {
                 locations.add(v.getStartLocation());
             }
             for (Job j : vrpBuilder.getAddedJobs()) {
-                locations.add(((Service) j).getActivity().getLocation());
+                locations.add(((ServiceJob) j).getActivity().getLocation());
             }
             vrpBuilder.setRoutingCost(getGEOMatrix(locations));
         } else if (edgeType.equals("EXPLICIT")) {
diff --git a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/VrphGoldenReader.java b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/VrphGoldenReader.java
index f9f4bc50e..1ae25ea03 100644
--- a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/VrphGoldenReader.java
+++ b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/VrphGoldenReader.java
@@ -22,7 +22,7 @@
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.Builder;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.Coordinate;
@@ -86,7 +86,7 @@ public void read(String filename) {
                 if (customerCount == 0) {
                     depotCoord = Coordinate.newInstance(Double.parseDouble(tokens[1]), Double.parseDouble(tokens[2]));
                 } else {
-                    Service.Builder serviceBuilder = new Service.Builder(tokens[0]).addSizeDimension(0, Integer.parseInt(tokens[3]));
+                    ServiceJob.Builder serviceBuilder = new ServiceJob.Builder(tokens[0]).addSizeDimension(0, Integer.parseInt(tokens[3]));
                     serviceBuilder.setLocation(Location.newInstance(Double.parseDouble(tokens[1]), Double.parseDouble(tokens[2])));
                     vrpBuilder.addJob(serviceBuilder.build());
                 }
diff --git a/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/BelhaizaReaderTest.java b/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/BelhaizaReaderTest.java
index 490eeb505..be018f78a 100644
--- a/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/BelhaizaReaderTest.java
+++ b/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/BelhaizaReaderTest.java
@@ -30,7 +30,7 @@
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
@@ -98,7 +98,7 @@ public void whenReadingBelhaizaInstance_serviceDurationOfCustomerTwoIsCorrect()
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new BelhaizaReader(builder).read(getPath());
         VehicleRoutingProblem vrp = builder.build();
-        assertEquals(90, ((Service) vrp.getJobs().get("2")).getActivity().getOperationTime(), 0.1);
+        assertEquals(90, ((ServiceJob) vrp.getJobs().get("2")).getActivity().getOperationTime(), 0.1);
     }
 
     @Test
@@ -106,7 +106,7 @@ public void noTimeWindowsShouldBeCorrect() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new BelhaizaReader(builder).read(getPath());
         VehicleRoutingProblem vrp = builder.build();
-        assertEquals(5, ((Service) vrp.getJobs().get("1")).getTimeWindows().size());
+        assertEquals(5, ((ServiceJob) vrp.getJobs().get("1")).getTimeWindows().size());
     }
 
     @Test
@@ -114,7 +114,7 @@ public void noTimeWindowsShouldBeCorrect2() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new BelhaizaReader(builder).read(getPath());
         VehicleRoutingProblem vrp = builder.build();
-        assertEquals(10, ((Service) vrp.getJobs().get("2")).getTimeWindows().size());
+        assertEquals(10, ((ServiceJob) vrp.getJobs().get("2")).getTimeWindows().size());
     }
 
     @Test
@@ -131,7 +131,7 @@ public void secondTimeWindowShouldBeCorrect() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new BelhaizaReader(builder).read(getPath());
         VehicleRoutingProblem vrp = builder.build();
-        List<TimeWindow> timeWindows = new ArrayList<TimeWindow>(((Service) vrp.getJobs().get("1")).getTimeWindows());
+        List<TimeWindow> timeWindows = new ArrayList<TimeWindow>(((ServiceJob) vrp.getJobs().get("1")).getTimeWindows());
         assertEquals(118., timeWindows.get(1).getStart(), 0.1);
         assertEquals(148., timeWindows.get(1).getEnd(), 0.1);
     }
@@ -141,7 +141,7 @@ public void thirdTimeWindowShouldBeCorrect() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new BelhaizaReader(builder).read(getPath());
         VehicleRoutingProblem vrp = builder.build();
-        List<TimeWindow> timeWindows = new ArrayList<TimeWindow>(((Service) vrp.getJobs().get("1")).getTimeWindows());
+        List<TimeWindow> timeWindows = new ArrayList<TimeWindow>(((ServiceJob) vrp.getJobs().get("1")).getTimeWindows());
         assertEquals(235., timeWindows.get(2).getStart(), 0.1);
         assertEquals(258., timeWindows.get(2).getEnd(), 0.1);
     }
@@ -151,7 +151,7 @@ public void fourthTimeWindowShouldBeCorrect() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new BelhaizaReader(builder).read(getPath());
         VehicleRoutingProblem vrp = builder.build();
-        List<TimeWindow> timeWindows = new ArrayList<TimeWindow>(((Service) vrp.getJobs().get("1")).getTimeWindows());
+        List<TimeWindow> timeWindows = new ArrayList<TimeWindow>(((ServiceJob) vrp.getJobs().get("1")).getTimeWindows());
         assertEquals(343., timeWindows.get(3).getStart(), 0.1);
         assertEquals(355., timeWindows.get(3).getEnd(), 0.1);
     }
@@ -161,7 +161,7 @@ public void fifthTimeWindowShouldBeCorrect() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new BelhaizaReader(builder).read(getPath());
         VehicleRoutingProblem vrp = builder.build();
-        List<TimeWindow> timeWindows = new ArrayList<TimeWindow>(((Service) vrp.getJobs().get("1")).getTimeWindows());
+        List<TimeWindow> timeWindows = new ArrayList<TimeWindow>(((ServiceJob) vrp.getJobs().get("1")).getTimeWindows());
         assertEquals(441., timeWindows.get(4).getStart(), 0.1);
         assertEquals(457., timeWindows.get(4).getEnd(), 0.1);
     }
diff --git a/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/ChristophidesReaderTest.java b/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/ChristophidesReaderTest.java
index 57955f01f..d3d6fec95 100644
--- a/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/ChristophidesReaderTest.java
+++ b/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/ChristophidesReaderTest.java
@@ -25,7 +25,7 @@
 
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 
 
@@ -100,7 +100,7 @@ public void whenReadingInstance_serviceDurationOfCustomerTwoIsCorrect() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new ChristofidesReader(builder).read(getPath("vrpnc13.txt"));
         VehicleRoutingProblem vrp = builder.build();
-        assertEquals(50.0, ((Service) vrp.getJobs().get("2")).getActivity().getOperationTime(), 0.1);
+        assertEquals(50.0, ((ServiceJob) vrp.getJobs().get("2")).getActivity().getOperationTime(), 0.1);
     }
 
 
diff --git a/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/CordeauReaderTest.java b/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/CordeauReaderTest.java
index ccf820a36..eebaaa43d 100644
--- a/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/CordeauReaderTest.java
+++ b/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/CordeauReaderTest.java
@@ -26,7 +26,7 @@
 
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 
 
@@ -91,7 +91,7 @@ public void whenReadingCustomersCordeauInstance_customerOneShouldHaveCorrectCoor
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         new CordeauReader(vrpBuilder).read(getPath("p01"));
         VehicleRoutingProblem vrp = vrpBuilder.build();
-        Service service = (Service) vrp.getJobs().get("1");
+        ServiceJob service = (ServiceJob) vrp.getJobs().get("1");
         assertEquals(37.0, service.getActivity().getLocation().getCoordinate().getX(), 0.1);
         assertEquals(52.0, service.getActivity().getLocation().getCoordinate().getY(), 0.1);
     }
@@ -101,7 +101,7 @@ public void whenReadingCustomersCordeauInstance_customerTwoShouldHaveCorrectServ
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         new CordeauReader(vrpBuilder).read(getPath("p01"));
         VehicleRoutingProblem vrp = vrpBuilder.build();
-        Service service = (Service) vrp.getJobs().get("2");
+        ServiceJob service = (ServiceJob) vrp.getJobs().get("2");
         assertEquals(0.0, service.getActivity().getOperationTime(), 0.1);
     }
 
@@ -110,7 +110,7 @@ public void whenReadingCustomersCordeauInstance_customerThreeShouldHaveCorrectDe
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         new CordeauReader(vrpBuilder).read(getPath("p01"));
         VehicleRoutingProblem vrp = vrpBuilder.build();
-        Service service = (Service) vrp.getJobs().get("3");
+        ServiceJob service = (ServiceJob) vrp.getJobs().get("3");
         assertEquals(16.0, service.getActivity().getLoadChange().get(0), 0.1);
     }
 
@@ -119,7 +119,7 @@ public void whenReadingCustomersCordeauInstance_customerFortySevenShouldHaveCorr
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         new CordeauReader(vrpBuilder).read(getPath("p01"));
         VehicleRoutingProblem vrp = vrpBuilder.build();
-        Service service = (Service) vrp.getJobs().get("47");
+        ServiceJob service = (ServiceJob) vrp.getJobs().get("47");
         assertEquals(25.0, service.getActivity().getLoadChange().get(0), 0.1);
     }
 
diff --git a/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/GoldenReaderTest.java b/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/GoldenReaderTest.java
index a6e0de296..5a1511c07 100644
--- a/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/GoldenReaderTest.java
+++ b/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/GoldenReaderTest.java
@@ -28,7 +28,7 @@
 
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.util.Coordinate;
 import com.graphhopper.jsprit.instance.reader.VrphGoldenReader.VrphType;
@@ -295,7 +295,7 @@ public void whenReadingInstance_service50MustHaveCorrectCoordinate() {
 
     private Coordinate getCoord(String string, VehicleRoutingProblem vrp) {
         Job j = getJob(string, vrp);
-        return ((Service) j).getActivity().getLocation().getCoordinate();
+        return ((ServiceJob) j).getActivity().getLocation().getCoordinate();
     }
 
     @Test
diff --git a/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/SolomonReaderTest.java b/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/SolomonReaderTest.java
index be45b0673..4fd684545 100644
--- a/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/SolomonReaderTest.java
+++ b/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/SolomonReaderTest.java
@@ -25,7 +25,7 @@
 
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 
 
@@ -89,7 +89,7 @@ public void whenReadingSolomonInstance_serviceDurationOfCustomerTwoIsCorrect() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new SolomonReader(builder).read(getPath());
         VehicleRoutingProblem vrp = builder.build();
-        assertEquals(90, ((Service) vrp.getJobs().get("2")).getActivity().getOperationTime(), 0.1);
+        assertEquals(90, ((ServiceJob) vrp.getJobs().get("2")).getActivity().getOperationTime(), 0.1);
     }
 
     @Test
@@ -97,7 +97,7 @@ public void whenReadingSolomonInstance_earliestServiceStartTimeOfCustomerSixtyTw
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new SolomonReader(builder).read(getPath());
         VehicleRoutingProblem vrp = builder.build();
-        assertEquals(262.0, ((Service) vrp.getJobs().get("62")).getActivity().getSingleTimeWindow().getStart(), 0.1);
+        assertEquals(262.0, ((ServiceJob) vrp.getJobs().get("62")).getActivity().getSingleTimeWindow().getStart(), 0.1);
     }
 
     @Test
@@ -105,7 +105,7 @@ public void whenReadingSolomonInstance_latestServiceStartTimeOfCustomerEightySev
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new SolomonReader(builder).read(getPath());
         VehicleRoutingProblem vrp = builder.build();
-        assertEquals(144.0, ((Service) vrp.getJobs().get("87")).getActivity().getSingleTimeWindow().getEnd(), 0.1);
+        assertEquals(144.0, ((ServiceJob) vrp.getJobs().get("87")).getActivity().getSingleTimeWindow().getEnd(), 0.1);
     }
 
 
diff --git a/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLReader.java b/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLReader.java
index efe8666de..e45accf46 100644
--- a/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLReader.java
+++ b/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLReader.java
@@ -45,7 +45,7 @@
 import com.graphhopper.jsprit.core.problem.job.Delivery;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.job.Pickup;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
@@ -61,7 +61,7 @@
 public class VrpXMLReader {
 
     public interface ServiceBuilderFactory {
-        Service.BuilderBase<?, ?> createBuilder(String serviceType, String id, Integer size);
+        ServiceJob.BuilderBase<?, ?> createBuilder(String serviceType, String id, Integer size);
     }
 
     static class DefaultServiceBuilderFactory implements ServiceBuilderFactory {
@@ -82,9 +82,9 @@
                 }
             } else {
                 if (size != null) {
-                    return new Service.Builder(id).addSizeDimension(0, size);
+                    return new ServiceJob.Builder(id).addSizeDimension(0, size);
                 } else {
-                    return new Service.Builder(id);
+                    return new ServiceJob.Builder(id);
                 }
 
             }
diff --git a/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLWriter.java b/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLWriter.java
index e3b0bdacf..f228d46c6 100644
--- a/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLWriter.java
+++ b/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLWriter.java
@@ -40,7 +40,7 @@
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Break;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
@@ -175,7 +175,7 @@ private void writeInitialRoutes(XMLConf xmlConfig) {
                 xmlConfig.setProperty(path + "(" + routeCounter + ").act(" + actCounter + ")[@type]", act.getName());
                 if (act instanceof JobActivity) {
                     Job job = ((JobActivity) act).getJob();
-                    if (job instanceof Service) {
+                    if (job instanceof ServiceJob) {
                         xmlConfig.setProperty(path + "(" + routeCounter + ").act(" + actCounter + ").serviceId", job.getId());
                     } else if (job instanceof Shipment) {
                         xmlConfig.setProperty(path + "(" + routeCounter + ").act(" + actCounter + ").shipmentId", job.getId());
@@ -220,7 +220,7 @@ private void writeSolutions(XMLConf xmlConfig) {
                         if (job instanceof Break) {
                             xmlConfig.setProperty(solutionPath + "(" + counter + ").routes.route(" + routeCounter + ").act(" + actCounter + ").breakId",
                                     job.getId());
-                        } else if (job instanceof Service) {
+                        } else if (job instanceof ServiceJob) {
                             xmlConfig.setProperty(solutionPath + "(" + counter + ").routes.route(" + routeCounter + ").act(" + actCounter + ").serviceId",
                                     job.getId());
                         } else if (job instanceof Shipment) {
@@ -253,10 +253,10 @@ private void writeServices(XMLConf xmlConfig, List<Job> jobs) {
         String shipmentPathString = "services.service";
         int counter = 0;
         for (Job j : jobs) {
-            if (!(j instanceof Service)) {
+            if (!(j instanceof ServiceJob)) {
                 continue;
             }
-            Service service = (Service) j;
+            ServiceJob service = (ServiceJob) j;
             ServiceActivity activity = service.getActivity();
             xmlConfig.setProperty(shipmentPathString + "(" + counter + ")[@id]", service.getId());
             xmlConfig.setProperty(shipmentPathString + "(" + counter + ")[@type]", service.getType());
diff --git a/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/InitialRoutesTest.java b/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/InitialRoutesTest.java
index 5d53510f6..f56ecc900 100644
--- a/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/InitialRoutesTest.java
+++ b/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/InitialRoutesTest.java
@@ -21,7 +21,7 @@
 
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import org.junit.Test;
@@ -80,7 +80,7 @@ private int getNuShipments(VehicleRoutingProblem vrp) {
     private int getNuServices(VehicleRoutingProblem vrp) {
         int nuServices = 0;
         for (Job job : vrp.getJobs().values()) {
-            if (job instanceof Service) {
+            if (job instanceof ServiceJob) {
                 nuServices++;
             }
         }
diff --git a/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLReaderTest.java b/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLReaderTest.java
index d9f1a10ea..96c64b67e 100644
--- a/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLReaderTest.java
+++ b/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLReaderTest.java
@@ -35,7 +35,7 @@
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivity;
@@ -61,7 +61,7 @@ public void shouldReadNameOfService() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
-        Service s = (Service) vrp.getJobs().get("1");
+        ServiceJob s = (ServiceJob) vrp.getJobs().get("1");
         assertTrue(s.getName().equals("cleaning"));
     }
 
@@ -194,7 +194,7 @@ public void whenReadingServices_itReadsThemCorrectly() {
         VehicleRoutingProblem vrp = builder.build();
         int servCounter = 0;
         for (Job j : vrp.getJobs().values()) {
-            if (j instanceof Service) {
+            if (j instanceof ServiceJob) {
                 servCounter++;
             }
         }
@@ -206,7 +206,7 @@ public void whenReadingService1_skill1ShouldBeAssigned() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
-        Service s = (Service) vrp.getJobs().get("1");
+        ServiceJob s = (ServiceJob) vrp.getJobs().get("1");
         assertTrue(s.getRequiredSkills().containsSkill("skill1"));
     }
 
@@ -215,7 +215,7 @@ public void whenReadingService1_skill2ShouldBeAssigned() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
-        Service s = (Service) vrp.getJobs().get("1");
+        ServiceJob s = (ServiceJob) vrp.getJobs().get("1");
         assertTrue(s.getRequiredSkills().containsSkill("skill2"));
     }
 
@@ -224,7 +224,7 @@ public void whenReadingService1_nuSkillsShouldBeCorrect() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
-        Service s = (Service) vrp.getJobs().get("1");
+        ServiceJob s = (ServiceJob) vrp.getJobs().get("1");
         assertEquals(2, s.getRequiredSkills().values().size());
     }
 
@@ -233,7 +233,7 @@ public void whenReadingService2_nuSkillsOfV2ShouldBeCorrect() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
-        Service s = (Service) vrp.getJobs().get("2");
+        ServiceJob s = (ServiceJob) vrp.getJobs().get("2");
         assertEquals(0, s.getRequiredSkills().values().size());
     }
 
@@ -292,7 +292,7 @@ public void whenReadingServices_capOfService1IsReadCorrectly() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
-        Service s1 = (Service) vrp.getJobs().get("1");
+        ServiceJob s1 = (ServiceJob) vrp.getJobs().get("1");
         assertEquals(1, s1.getActivity().getLoadChange().get(0));
     }
 
@@ -301,7 +301,7 @@ public void whenReadingServices_durationOfService1IsReadCorrectly() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
-        Service s1 = (Service) vrp.getJobs().get("1");
+        ServiceJob s1 = (ServiceJob) vrp.getJobs().get("1");
         assertEquals(10.0, s1.getActivity().getOperationTime(), 0.01);
     }
 
@@ -310,7 +310,7 @@ public void whenReadingServices_twOfService1IsReadCorrectly() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
-        Service s1 = (Service) vrp.getJobs().get("1");
+        ServiceJob s1 = (ServiceJob) vrp.getJobs().get("1");
         TimeWindow tw = s1.getActivity().getSingleTimeWindow();
         assertEquals(0.0, tw.getStart(), 0.01);
         assertEquals(4000.0, tw.getEnd(), 0.01);
@@ -321,7 +321,7 @@ public void whenReadingServices_typeOfService1IsReadCorrectly() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
-        Service s1 = (Service) vrp.getJobs().get("1");
+        ServiceJob s1 = (ServiceJob) vrp.getJobs().get("1");
         assertEquals("pickup", s1.getType());
     }
 
diff --git a/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLWriterTest.java b/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLWriterTest.java
index 7fa42fab2..c81f71bed 100644
--- a/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLWriterTest.java
+++ b/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLWriterTest.java
@@ -32,7 +32,7 @@
 import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.AbstractSingleActivityJob;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
@@ -108,8 +108,8 @@ public void whenWritingServices_itWritesThemCorrectly() {
         builder.addVehicle(v2);
 
 
-        Service s1 = new Service.Builder("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
-        Service s2 = new Service.Builder("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
+        ServiceJob s1 = new ServiceJob.Builder("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
+        ServiceJob s2 = new ServiceJob.Builder("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
 
         VehicleRoutingProblem vrp = builder.addJob(s1).addJob(s2).build();
         new VrpXMLWriter(vrp, null).write(infileName);
@@ -119,7 +119,7 @@ public void whenWritingServices_itWritesThemCorrectly() {
         VehicleRoutingProblem readVrp = vrpToReadBuilder.build();
         assertEquals(2, readVrp.getJobs().size());
 
-        Service s1_read = (Service) vrp.getJobs().get("1");
+        ServiceJob s1_read = (ServiceJob) vrp.getJobs().get("1");
         assertEquals("1", s1_read.getId());
         assertEquals("loc", s1_read.getActivity().getLocation().getId());
         assertEquals("pickup", s1_read.getType());
@@ -129,7 +129,7 @@ public void whenWritingServices_itWritesThemCorrectly() {
     @Test
     public void shouldWriteNameOfService() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
-        Service s1 = new Service.Builder("1").setName("cleaning").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
+        ServiceJob s1 = new ServiceJob.Builder("1").setName("cleaning").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
 
         VehicleRoutingProblem vrp = builder.addJob(s1).build();
         new VrpXMLWriter(vrp, null).write(infileName);
@@ -164,11 +164,11 @@ public void shouldWriteNameOfShipment() {
     public void whenWritingServicesWithSeveralCapacityDimensions_itWritesThemCorrectly() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
 
-        Service s1 = new Service.Builder("1")
+        ServiceJob s1 = new ServiceJob.Builder("1")
                 .addSizeDimension(0, 20)
                 .addSizeDimension(1, 200)
                 .setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
-        Service s2 = new Service.Builder("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
+        ServiceJob s2 = new ServiceJob.Builder("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
 
         VehicleRoutingProblem vrp = builder.addJob(s1).addJob(s2).build();
         new VrpXMLWriter(vrp, null).write(infileName);
@@ -178,7 +178,7 @@ public void whenWritingServicesWithSeveralCapacityDimensions_itWritesThemCorrect
         VehicleRoutingProblem readVrp = vrpToReadBuilder.build();
         assertEquals(2, readVrp.getJobs().size());
 
-        Service s1_read = (Service) vrp.getJobs().get("1");
+        ServiceJob s1_read = (ServiceJob) vrp.getJobs().get("1");
 
         SizeDimension size = s1_read.getActivity().getLoadChange();
         assertEquals(2, size.getNuOfDimensions());
@@ -630,8 +630,8 @@ public void whenWritingVehicleV1_itsStartLocationMustBeWrittenCorrectly() {
         builder.addVehicle(v1);
         builder.addVehicle(v2);
 
-        Service s1 = new Service.Builder("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
-        Service s2 = new Service.Builder("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
+        ServiceJob s1 = new ServiceJob.Builder("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
+        ServiceJob s2 = new ServiceJob.Builder("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
 
         VehicleRoutingProblem vrp = builder.addJob(s1).addJob(s2).build();
         new VrpXMLWriter(vrp, null).write(infileName);
@@ -650,7 +650,7 @@ public void whenWritingVehicleV1_itsStartLocationMustBeWrittenCorrectly() {
     public void whenWritingService_itShouldHaveTheCorrectNuSkills() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
 
-        Service s = new Service.Builder("1").addRequiredSkill("sKill1").addRequiredSkill("skill2").addSizeDimension(0, 1)
+        ServiceJob s = new ServiceJob.Builder("1").addRequiredSkill("sKill1").addRequiredSkill("skill2").addSizeDimension(0, 1)
                 .setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
 
         VehicleRoutingProblem vrp = builder.addJob(s).build();
@@ -667,7 +667,7 @@ public void whenWritingService_itShouldHaveTheCorrectNuSkills() {
     public void whenWritingService_itShouldContain_skill1() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
 
-        Service s = new Service.Builder("1").addRequiredSkill("sKill1").addRequiredSkill("skill2").addSizeDimension(0, 1)
+        ServiceJob s = new ServiceJob.Builder("1").addRequiredSkill("sKill1").addRequiredSkill("skill2").addSizeDimension(0, 1)
                 .setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
 
         VehicleRoutingProblem vrp = builder.addJob(s).build();
@@ -684,7 +684,7 @@ public void whenWritingService_itShouldContain_skill1() {
     public void whenWritingService_itShouldContain_skill2() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
 
-        Service s = new Service.Builder("1").addRequiredSkill("sKill1").addRequiredSkill("skill2").addSizeDimension(0, 1)
+        ServiceJob s = new ServiceJob.Builder("1").addRequiredSkill("sKill1").addRequiredSkill("skill2").addSizeDimension(0, 1)
                 .setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
 
         VehicleRoutingProblem vrp = builder.addJob(s).build();
@@ -710,8 +710,8 @@ public void whenWritingVehicleV1_itDoesNotReturnToDepotMustBeWrittenCorrectly()
         builder.addVehicle(v1);
         builder.addVehicle(v2);
 
-        Service s1 = new Service.Builder("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
-        Service s2 = new Service.Builder("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
+        ServiceJob s1 = new ServiceJob.Builder("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
+        ServiceJob s2 = new ServiceJob.Builder("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
 
         VehicleRoutingProblem vrp = builder.addJob(s1).addJob(s2).build();
         new VrpXMLWriter(vrp, null).write(infileName);
@@ -736,8 +736,8 @@ public void whenWritingVehicleV1_readingAgainAssignsCorrectType() {
         builder.addVehicle(v1);
         builder.addVehicle(v2);
 
-        Service s1 = new Service.Builder("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
-        Service s2 = new Service.Builder("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
+        ServiceJob s1 = new ServiceJob.Builder("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
+        ServiceJob s2 = new ServiceJob.Builder("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
 
         VehicleRoutingProblem vrp = builder.addJob(s1).addJob(s2).build();
         new VrpXMLWriter(vrp, null).write(infileName);
@@ -762,8 +762,8 @@ public void whenWritingVehicleV2_readingAgainAssignsCorrectType() {
         builder.addVehicle(v1);
         builder.addVehicle(v2);
 
-        Service s1 = new Service.Builder("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
-        Service s2 = new Service.Builder("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
+        ServiceJob s1 = new ServiceJob.Builder("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
+        ServiceJob s2 = new ServiceJob.Builder("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
 
         VehicleRoutingProblem vrp = builder.addJob(s1).addJob(s2).build();
         new VrpXMLWriter(vrp, null).write(infileName);
@@ -792,8 +792,8 @@ public void whenWritingVehicleV2_readingItsLocationsAgainReturnsCorrectLocations
         builder.addVehicle(v1);
         builder.addVehicle(v2);
 
-        Service s1 = new Service.Builder("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
-        Service s2 = new Service.Builder("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
+        ServiceJob s1 = new ServiceJob.Builder("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
+        ServiceJob s2 = new ServiceJob.Builder("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
 
         VehicleRoutingProblem vrp = builder.addJob(s1).addJob(s2).build();
         new VrpXMLWriter(vrp, null).write(infileName);
@@ -822,8 +822,8 @@ public void whenWritingVehicleV2_readingItsLocationsCoordsAgainReturnsCorrectLoc
         builder.addVehicle(v1);
         builder.addVehicle(v2);
 
-        Service s1 = new Service.Builder("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
-        Service s2 = new Service.Builder("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
+        ServiceJob s1 = new ServiceJob.Builder("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
+        ServiceJob s2 = new ServiceJob.Builder("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
 
         VehicleRoutingProblem vrp = builder.addJob(s1).addJob(s2).build();
         new VrpXMLWriter(vrp, null).write(infileName);
@@ -914,8 +914,8 @@ public void solutionWithoutUnassignedJobsShouldBeWrittenCorrectly() {
         VehicleImpl v1 = VehicleImpl.Builder.newInstance("v1").setStartLocation(TestUtils.loc("loc")).setType(type1).build();
         builder.addVehicle(v1);
 
-        Service s1 = new Service.Builder("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
-        Service s2 = new Service.Builder("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
+        ServiceJob s1 = new ServiceJob.Builder("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
+        ServiceJob s2 = new ServiceJob.Builder("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
 
         VehicleRoutingProblem vrp = builder.addJob(s1).addJob(s2).build();
 
@@ -945,8 +945,8 @@ public void solutionWithUnassignedJobsShouldBeWrittenCorrectly() {
         VehicleImpl v1 = VehicleImpl.Builder.newInstance("v1").setStartLocation(TestUtils.loc("loc")).setType(type1).build();
         builder.addVehicle(v1);
 
-        Service s1 = new Service.Builder("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
-        Service s2 = new Service.Builder("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
+        ServiceJob s1 = new ServiceJob.Builder("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
+        ServiceJob s2 = new ServiceJob.Builder("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
 
         VehicleRoutingProblem vrp = builder.addJob(s1).addJob(s2).build();
 
