diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/objectivefunction/MissedBreak.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/objectivefunction/MissedBreak.java
index ff9147ef8..fb62e36fd 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/objectivefunction/MissedBreak.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/objectivefunction/MissedBreak.java
@@ -29,17 +29,13 @@ public MissedBreak() {
     @Override
     protected double calculateRouteLevelCost(VehicleRoutingProblem problem, VehicleRoute route) {
         for (TourActivity act : route.getActivities()) {
-            if (act instanceof BreakActivity) {
+            if (act instanceof BreakActivity)
                 return 0d;
-            }
         }
         if (route.getVehicle().getBreak() != null) {
-            if (route.getEnd().getArrTime() > route.getVehicle().getBreak().getActivity().getSingleTimeWindow()
-                            .getEnd()) {
+            if (route.getEnd().getArrTime() > route.getVehicle().getBreak().getActivity().getBreakTimeWindow().getEnd())
                 return 4 * (getMaxCosts() * 2 + route.getVehicle().getBreak().getActivity().getOperationTime()
-                                * route.getVehicle().getType().getVehicleCostParams().perServiceTimeUnit);
-
-            }
+                        * route.getVehicle().getType().getVehicleCostParams().perServiceTimeUnit);
         }
         return 0d;
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BreakInsertionCalculator.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BreakInsertionCalculator.java
index 313eac36c..a37295657 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BreakInsertionCalculator.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BreakInsertionCalculator.java
@@ -156,7 +156,7 @@ public InsertionData getInsertionData(final VehicleRoute currentRoute, final Job
             List<Location> locations = Arrays.asList(prevAct.getLocation(), nextAct.getLocation());
             for (Location location : locations) {
                 breakAct2Insert.setLocation(location);
-                TimeWindow timeWindow = breakToInsert.getActivity().getTimeWindow();
+                TimeWindow timeWindow = breakToInsert.getActivity().getBreakTimeWindow();
                 breakAct2Insert.setTheoreticalEarliestOperationStartTime(timeWindow.getStart());
                 breakAct2Insert.setTheoreticalLatestOperationStartTime(timeWindow.getEnd());
                 ConstraintsStatus status = hardActivityLevelConstraint.fulfilled(insertionContext, prevAct, breakAct2Insert, nextAct, prevActStartTime);
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BreakScheduling.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BreakScheduling.java
index 311f496ff..2388ef5d7 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BreakScheduling.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BreakScheduling.java
@@ -69,7 +69,7 @@ public void informJobInserted(Job job2insert, VehicleRoute inRoute, double addit
                 stateManager.removed(aBreak, inRoute);
                 stateManager.reCalculateStates(inRoute);
             }
-            if (inRoute.getEnd().getArrTime() > aBreak.getActivity().getTimeWindow().getEnd()) {
+            if (inRoute.getEnd().getArrTime() > aBreak.getActivity().getBreakTimeWindow().getEnd()) {
                 InsertionData iData = breakInsertionCalculator.getInsertionData(inRoute, aBreak, inRoute.getVehicle(), inRoute.getDepartureTime(), inRoute.getDriver(), Double.MAX_VALUE);
                 if (!(iData instanceof InsertionData.NoInsertionFound)) {
                     logger.trace("insert: [jobId={}]{}", aBreak.getId(), iData);
@@ -119,7 +119,7 @@ public void informInsertionStarts(Collection<VehicleRoute> vehicleRoutes, Collec
         for (VehicleRoute route : vehicleRoutes) {
             Break aBreak = route.getVehicle().getBreak();
             if (aBreak != null && !route.getTourActivities().servesJob(aBreak)) {
-                if (route.getEnd().getArrTime() > aBreak.getActivity().getTimeWindow().getEnd()) {
+                if (route.getEnd().getArrTime() > aBreak.getActivity().getBreakTimeWindow().getEnd()) {
                     InsertionData iData = breakInsertionCalculator.getInsertionData(route, aBreak, route.getVehicle(), route.getDepartureTime(), route.getDriver(), Double.MAX_VALUE);
                     if (!(iData instanceof InsertionData.NoInsertionFound)) {
                         logger.trace("insert: [jobId={}]{}", aBreak.getId(), iData);
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Break.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Break.java
index feccd29fe..30cf80937 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Break.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Break.java
@@ -31,7 +31,7 @@
     public static final class Builder extends ServiceJob.BuilderBase<Break, Builder> {
 
         private static final Location VARIABLE_LOCATION = Location
-                        .newInstance("@@@VARIABLE_LOCATION");
+                .newInstance("@@@VARIABLE_LOCATION");
 
         public Builder(String id) {
             super(id);
@@ -71,7 +71,7 @@ protected Break createInstance() {
 
     @Override
     protected BreakActivity createActivity(
-                    BuilderBase<? extends AbstractSingleActivityJob<?>, ?> builder) {
+            BuilderBase<? extends AbstractSingleActivityJob<?>, ?> builder) {
         return BreakActivity.newInstance(this, (Builder) builder);
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java
index 9c0368310..40824790d 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java
@@ -358,13 +358,17 @@ public double getServiceDuration() {
 
     /**
      * Returns the time-window a service(-operation) is allowed to start.
-     * It is recommended to use getTimeWindows() instead. If you still use this, it returns the first time window of getTimeWindows() collection.
+     *
+     * @deprecated It is recommended to use getTimeWindows() instead. If you
+     *             still use this, it returns the first time window of
+     *             getTimeWindows() collection.
      *
      * @return time window
      *
      */
+    @Deprecated
     public TimeWindow getTimeWindow() {
-        return theRealActivity.getSingleTimeWindow();
+        return theRealActivity.getTimeWindows().iterator().next();
     }
 
     /**
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivity.java
index 2e473b7a1..73f4393a9 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivity.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivity.java
@@ -116,9 +116,9 @@ public void setLocation(Location breakLocation) {
     /**
      * @return The time window of the break.
      */
-    public TimeWindow getTimeWindow() {
+    public TimeWindow getBreakTimeWindow() {
         // Break has always a single time window
-        return getSingleTimeWindow();
+        return getTimeWindows().iterator().next();
     }
 
 }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/IgnoreBreakTimeWindowTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/IgnoreBreakTimeWindowTest.java
index be9f4de0d..a467a9dcf 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/IgnoreBreakTimeWindowTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/IgnoreBreakTimeWindowTest.java
@@ -65,30 +65,30 @@ public void doNotIgnoreBreakTW() {
 
 
         ServiceJob service4 = new ServiceJob.Builder("2").setLocation(Location.newInstance(0, 0))
-                        .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(17, 17)).build();
+                .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(17, 17)).build();
 
         ServiceJob service5 = new ServiceJob.Builder("3").setLocation(Location.newInstance(0, 0))
-                        .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(18, 18)).build();
+                .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(18, 18)).build();
 
         ServiceJob service7 = new ServiceJob.Builder("4").setLocation(Location.newInstance(0, 0))
-                        .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(10, 10)).build();
+                .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(10, 10)).build();
 
         ServiceJob service8 = new ServiceJob.Builder("5").setLocation(Location.newInstance(0, 0))
-                        .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(12, 12)).build();
+                .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(12, 12)).build();
 
         ServiceJob service10 = new ServiceJob.Builder("6").setLocation(Location.newInstance(0, 0))
-                        .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(16, 16)).build();
+                .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(16, 16)).build();
 
         ServiceJob service11 = new ServiceJob.Builder("7").setLocation(Location.newInstance(0, 0))
-                        .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(13, 13)).build();
+                .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(13, 13)).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance()
-                        .addVehicle(vehicle2)
-                        .addJob(service4)
-                        .addJob(service5).addJob(service7)
-                        .addJob(service8).addJob(service10).addJob(service11)
-                        .setFleetSize(VehicleRoutingProblem.FleetSize.FINITE)
-                        .build();
+                .addVehicle(vehicle2)
+                .addJob(service4)
+                .addJob(service5).addJob(service7)
+                .addJob(service8).addJob(service10).addJob(service11)
+                .setFleetSize(VehicleRoutingProblem.FleetSize.FINITE)
+                .build();
 
         VehicleRoutingAlgorithm vra = Jsprit.createAlgorithm(vrp);
         vra.setMaxIterations(50);
@@ -103,7 +103,7 @@ private boolean breakShouldBeTime(VehicleRoutingProblemSolution solution) {
         boolean inTime = true;
         for (TourActivity act : solution.getRoutes().iterator().next().getActivities()) {
             if (act instanceof BreakActivity) {
-                TimeWindow timeWindow = ((BreakActivity) act).getSingleTimeWindow();
+                TimeWindow timeWindow = ((BreakActivity) act).getBreakTimeWindow();
                 if (act.getEndTime() < timeWindow.getStart()) {
                     inTime = false;
                 }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivityTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivityTest.java
index d572c76d4..a53477fcf 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivityTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivityTest.java
@@ -44,9 +44,9 @@ public void doBefore() {
         service = breakBuilder.build();
         serviceActivity = BreakActivity.newInstance(service, breakBuilder);
         serviceActivity.setTheoreticalEarliestOperationStartTime(
-                        service.getActivity().getTimeWindow().getStart());
+                        service.getActivity().getBreakTimeWindow().getStart());
         serviceActivity.setTheoreticalLatestOperationStartTime(
-                        service.getActivity().getTimeWindow().getEnd());
+                        service.getActivity().getBreakTimeWindow().getEnd());
     }
 
     @Test
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleImplTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleImplTest.java
index 0834cacfb..208aa8ffd 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleImplTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleImplTest.java
@@ -45,10 +45,10 @@ public void whenAddingDriverBreak_itShouldBeAddedCorrectly() {
         VehicleTypeImpl type1 = VehicleTypeImpl.Builder.newInstance("type").build();
         Break aBreak = new Break.Builder("break").setTimeWindow(TimeWindow.newInstance(100, 200)).setServiceTime(30).build();
         Vehicle v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance("start"))
-                        .setType(type1).setEndLocation(Location.newInstance("start"))
-                        .setBreak(aBreak).build();
+                .setType(type1).setEndLocation(Location.newInstance("start"))
+                .setBreak(aBreak).build();
         assertNotNull(v.getBreak());
-        TimeWindow timeWindow = v.getBreak().getActivity().getSingleTimeWindow();
+        TimeWindow timeWindow = v.getBreak().getActivity().getBreakTimeWindow();
         assertEquals(100., timeWindow.getStart(), 0.1);
         assertEquals(200., timeWindow.getEnd(), 0.1);
         assertEquals(30., v.getBreak().getActivity().getOperationTime(), 0.1);
@@ -59,7 +59,7 @@ public void whenAddingDriverBreak_itShouldBeAddedCorrectly() {
     public void whenAddingSkills_theyShouldBeAddedCorrectly() {
         VehicleTypeImpl type1 = VehicleTypeImpl.Builder.newInstance("type").build();
         Vehicle v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance("start")).setType(type1).setEndLocation(Location.newInstance("start"))
-                        .addSkill("drill").addSkill("screwdriver").build();
+                .addSkill("drill").addSkill("screwdriver").build();
         assertTrue(v.getSkills().containsSkill("drill"));
         assertTrue(v.getSkills().containsSkill("drill"));
         assertTrue(v.getSkills().containsSkill("screwdriver"));
@@ -69,7 +69,7 @@ public void whenAddingSkills_theyShouldBeAddedCorrectly() {
     public void whenAddingSkillsCaseSens_theyShouldBeAddedCorrectly() {
         VehicleTypeImpl type1 = VehicleTypeImpl.Builder.newInstance("type").build();
         Vehicle v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance("start")).setType(type1).setEndLocation(Location.newInstance("start"))
-                        .addSkill("drill").addSkill("screwdriver").build();
+                .addSkill("drill").addSkill("screwdriver").build();
         assertTrue(v.getSkills().containsSkill("drill"));
         assertTrue(v.getSkills().containsSkill("dRill"));
         assertTrue(v.getSkills().containsSkill("ScrewDriver"));
@@ -238,7 +238,7 @@ public void whenTwoVehiclesHaveTheSameId_theyShouldBeEqual() {
     public void whenAddingSkillsCaseSensV2_theyShouldBeAddedCorrectly() {
         VehicleTypeImpl type1 = VehicleTypeImpl.Builder.newInstance("type").build();
         Vehicle v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance("start")).setType(type1).setEndLocation(Location.newInstance("start"))
-                        .addSkill("drill").build();
+                .addSkill("drill").build();
         assertFalse(v.getSkills().containsSkill("ScrewDriver"));
     }
 
