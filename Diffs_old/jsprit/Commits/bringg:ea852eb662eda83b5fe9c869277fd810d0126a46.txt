diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblem.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblem.java
index 4e88701e0..99a1788ea 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblem.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblem.java
@@ -447,7 +447,6 @@ public VehicleRoutingProblem build() {
             return new VehicleRoutingProblem(this);
         }
 
-        @SuppressWarnings("UnusedDeclaration")
         public Builder addLocation(String locationId, Coordinate coordinate) {
             tentative_coordinates.put(locationId, coordinate);
             return this;
@@ -473,7 +472,6 @@ public Builder addAllJobs(Collection<? extends Job> jobs) {
          * @param vehicles vehicles to be added
          * @return this builder
          */
-        @SuppressWarnings("deprecation")
         public Builder addAllVehicles(Collection<? extends Vehicle> vehicles) {
             for (Vehicle v : vehicles) {
                 addVehicle(v);
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/CrowFlyCosts.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/CrowFlyCosts.java
index 5ed4b2175..709f1f4c7 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/CrowFlyCosts.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/CrowFlyCosts.java
@@ -21,80 +21,29 @@
 package com.graphhopper.jsprit.core.util;
 
 import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.cost.AbstractForwardVehicleRoutingTransportCosts;
-import com.graphhopper.jsprit.core.problem.driver.Driver;
-import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 
 
 /**
  * @author stefan schroeder
  */
-public class CrowFlyCosts extends AbstractForwardVehicleRoutingTransportCosts {
-
-    public int speed = 1;
-
-    public double detourFactor = 1.0;
+public class CrowFlyCosts extends EuclideanCosts {
 
     private Locations locations;
 
     public CrowFlyCosts(Locations locations) {
-        super();
         this.locations = locations;
     }
 
-    @Override
-    public String toString() {
-        return "[name=crowFlyCosts]";
-    }
-
-    @Override
-    public double getTransportCost(Location from, Location to, double time, Driver driver, Vehicle vehicle) {
-        double distance;
-        try {
-            distance = calculateDistance(from, to);
-        } catch (NullPointerException e) {
-            throw new NullPointerException("cannot calculate euclidean distance. coordinates are missing. either add coordinates or use another transport-cost-calculator.");
-        }
-        double costs = distance;
-        if (vehicle != null) {
-            if (vehicle.getType() != null) {
-                costs = distance * vehicle.getType().getVehicleCostParams().perDistanceUnit;
-            }
-        }
-        return costs;
-    }
-
-    private double calculateDistance(Location fromLocation, Location toLocation) {
+    double calculateDistance(Location fromLocation, Location toLocation) {
         Coordinate from = null;
         Coordinate to = null;
-        if (fromLocation.getCoordinate() != null & toLocation.getCoordinate() != null) {
+        if (fromLocation.getCoordinate() != null && toLocation.getCoordinate() != null) {
             from = fromLocation.getCoordinate();
             to = toLocation.getCoordinate();
         } else if (locations != null) {
             from = locations.getCoord(fromLocation.getId());
             to = locations.getCoord(toLocation.getId());
         }
-        if (from == null || to == null) throw new NullPointerException();
-        return calculateDistance(from, to);
-    }
-
-    private double calculateDistance(Coordinate from, Coordinate to) {
-        return EuclideanDistanceCalculator.calculateDistance(from, to) * detourFactor;
-    }
-
-    @Override
-    public double getTransportTime(Location from, Location to, double time, Driver driver, Vehicle vehicle) {
-        double distance;
-        try {
-            distance = calculateDistance(from, to);
-        } catch (NullPointerException e) {
-            throw new NullPointerException("cannot calculate euclidean distance. coordinates are missing. either add coordinates or use another transport-cost-calculator.");
-        }
-        return distance / speed;
-    }
-
-    @Override
-    public double getDistance(Location from, Location to, double departureTime, Vehicle vehicle) {
         return calculateDistance(from, to);
     }
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/EuclideanCosts.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/EuclideanCosts.java
index 265ac70e3..c17e63574 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/EuclideanCosts.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/EuclideanCosts.java
@@ -42,42 +42,32 @@ public String toString() {
 
     @Override
     public double getTransportCost(Location from, Location to, double time, Driver driver, Vehicle vehicle) {
-        double distance;
-        try {
-            distance = calculateDistance(from, to);
-        } catch (NullPointerException e) {
-            throw new NullPointerException("cannot calculate euclidean distance. coordinates are missing. either add coordinates or use another transport-cost-calculator.");
+        double distance = calculateDistance(from, to);
+        if (vehicle != null && vehicle.getType() != null) {
+            return distance * vehicle.getType().getVehicleCostParams().perDistanceUnit;
         }
-        double costs = distance;
-        if (vehicle != null) {
-            if (vehicle.getType() != null) {
-                costs = distance * vehicle.getType().getVehicleCostParams().perDistanceUnit;
-            }
-        }
-        return costs;
+        return distance;
     }
 
-    private double calculateDistance(Location fromLocation, Location toLocation) {
+    double calculateDistance(Location fromLocation, Location toLocation) {
         return calculateDistance(fromLocation.getCoordinate(), toLocation.getCoordinate());
     }
 
-    private double calculateDistance(Coordinate from, Coordinate to) {
-        return EuclideanDistanceCalculator.calculateDistance(from, to) * detourFactor;
-    }
-
-    @Override
-    public double getTransportTime(Location from, Location to, double time, Driver driver, Vehicle vehicle) {
-        double distance;
+    double calculateDistance(Coordinate from, Coordinate to) {
         try {
-            distance = calculateDistance(from, to);
+            return EuclideanDistanceCalculator.calculateDistance(from, to) * detourFactor;
         } catch (NullPointerException e) {
             throw new NullPointerException("cannot calculate euclidean distance. coordinates are missing. either add coordinates or use another transport-cost-calculator.");
         }
-        return distance / speed;
+    }
+
+    @Override
+    public double getTransportTime(Location from, Location to, double time, Driver driver, Vehicle vehicle) {
+        return calculateDistance(from, to) / speed;
     }
 
     @Override
     public double getDistance(Location from, Location to, double departureTime, Vehicle vehicle) {
-        return calculateDistance(from, to);
+            return calculateDistance(from, to);
     }
 }
diff --git a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/BelhaizaReader.java b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/BelhaizaReader.java
index f17218dc7..401f70fea 100644
--- a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/BelhaizaReader.java
+++ b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/BelhaizaReader.java
@@ -103,13 +103,10 @@ public void read(String solomonFile){
                     System.out.println("fix: " + fixedCostPerVehicle + "; perDistance: 1.0; perWaitingTime: 0.8");
                     VehicleTypeImpl vehicleType = typeBuilder.build();
 					double end = Double.parseDouble(tokens[8])*timeProjectionFactor;
-					for(int i=0;i<10;i++) {
-						VehicleImpl vehicle = VehicleImpl.Builder.newInstance("solomonVehicle"+(i+1)).setEarliestStart(0.).setLatestArrival(end)
-								.setStartLocation(Location.Builder.newInstance().setId(customerId)
+					VehicleImpl vehicle = VehicleImpl.Builder.newInstance("solomonVehicle").setEarliestStart(0.).setLatestArrival(end)
+							.setStartLocation(Location.Builder.newInstance().setId(customerId)
 										.setCoordinate(coord).build()).setType(vehicleType).build();
-						vrpBuilder.addVehicle(vehicle);
-					}
-
+					vrpBuilder.addVehicle(vehicle);
 				}
 				else{
 					Service.Builder serviceBuilder = Service.Builder.newInstance(customerId);
diff --git a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/LuiShenReader.java b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/LuiShenReader.java
index 9215b5e25..b6ec812b7 100644
--- a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/LuiShenReader.java
+++ b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/LuiShenReader.java
@@ -86,7 +86,7 @@ public void read(String instanceFile, String vehicleFile, String costScenario) {
                 if (counter == 10) {
                     createVehicles(vehicleFile, costScenario, customerId, coord, start, end);
                 } else {
-                    Service service = Service.Builder.newInstance("" + counter).addSizeDimension(0, demand)
+                    Service service = Service.Builder.newInstance("" + (counter - 10)).addSizeDimension(0, demand)
                         .setLocation(Location.Builder.newInstance().setCoordinate(coord).setId(customerId).build()).setServiceTime(serviceTime)
                         .setTimeWindow(TimeWindow.newInstance(start, end)).build();
                     vrpBuilder.addJob(service);
