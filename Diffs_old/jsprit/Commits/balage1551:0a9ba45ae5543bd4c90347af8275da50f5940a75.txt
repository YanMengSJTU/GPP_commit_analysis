diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyser.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyser.java
index 6015b42d6..b5c81558c 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyser.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyser.java
@@ -40,15 +40,12 @@
 import com.graphhopper.jsprit.core.problem.solution.SolutionCostCalculator;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.AbstractActivityNEW;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.ActivityVisitor;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverServiceDEPRECATED;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverShipmentDEPRECATED;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivityNEW;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.End;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivityNEW;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupServiceDEPRECATED;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupShipmentDEPRECATED;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.ServiceActivityNEW;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.Start;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
@@ -128,13 +125,15 @@ public void visit(TourActivity activity) {
             if (activity instanceof PickupActivityNEW) {
                 pickupCounter++;
                 pickedUp = pickedUp.add(((PickupActivityNEW) activity).getJob().getSize());
-                if (activity instanceof PickupServiceDEPRECATED) {
+                if (!AbstractActivityNEW.isShipment(activity)
+                                && activity instanceof PickupActivityNEW) {
                     deliverAtEndCounter++;
                 }
             } else if (activity instanceof DeliveryActivityNEW) {
                 deliveryCounter++;
                 delivered = delivered.add(((DeliveryActivityNEW) activity).getJob().getSize());
-                if (activity instanceof DeliverServiceDEPRECATED) {
+                if (!AbstractActivityNEW.isShipment(activity)
+                                && activity instanceof DeliveryActivityNEW) {
                     pickupAtBeginningCounter++;
                 }
             }
@@ -159,7 +158,7 @@ public void finish() {
 
         private final StateManager stateManager;
 
-        private Map<String, PickupShipmentDEPRECATED> openShipments;
+        private Map<String, PickupActivityNEW> openShipments;
 
         private VehicleRoute route;
 
@@ -178,25 +177,28 @@ private BackhaulAndShipmentUpdater(StateId backhaul_id, StateId shipment_id, Sta
         @Override
         public void begin(VehicleRoute route) {
             this.route = route;
-            openShipments = new HashMap<String, PickupShipmentDEPRECATED>();
+            openShipments = new HashMap<>();
             pickupOccured = false;
             shipmentConstraintOnRouteViolated = false;
             backhaulConstraintOnRouteViolated = false;
         }
 
+
         @Override
         public void visit(TourActivity activity) {
             //shipment
-            if (activity instanceof PickupShipmentDEPRECATED) {
-                openShipments.put(((PickupShipmentDEPRECATED) activity).getJob().getId(), (PickupShipmentDEPRECATED) activity);
-            } else if (activity instanceof DeliverShipmentDEPRECATED) {
-                String jobId = ((DeliverShipmentDEPRECATED) activity).getJob().getId();
+            if (AbstractActivityNEW.isShipment(activity) && activity instanceof PickupActivityNEW) {
+                openShipments.put(((PickupActivityNEW) activity).getJob().getId(),
+                                (PickupActivityNEW) activity);
+            } else if (AbstractActivityNEW.isShipment(activity)
+                            && activity instanceof DeliveryActivityNEW) {
+                String jobId = ((DeliveryActivityNEW) activity).getJob().getId();
                 if (!openShipments.containsKey(jobId)) {
                     //deliverShipment without pickupShipment
                     stateManager.putActivityState(activity, shipment_id, true);
                     shipmentConstraintOnRouteViolated = true;
                 } else {
-                    PickupShipmentDEPRECATED removed = openShipments.remove(jobId);
+                    PickupActivityNEW removed = openShipments.remove(jobId);
                     stateManager.putActivityState(removed, shipment_id, false);
                     stateManager.putActivityState(activity, shipment_id, false);
                 }
@@ -205,12 +207,14 @@ public void visit(TourActivity activity) {
             }
 
             //backhaul
-            if (activity instanceof DeliverServiceDEPRECATED && pickupOccured) {
+            if (!AbstractActivityNEW.isShipment(activity) && activity instanceof DeliveryActivityNEW
+                            && pickupOccured) {
                 stateManager.putActivityState(activity, backhaul_id, true);
                 backhaulConstraintOnRouteViolated = true;
             } else {
-                if (activity instanceof PickupActivityNEW
-                                || activity instanceof ServiceActivityNEW) {
+                if (!AbstractActivityNEW.isShipment(activity)
+                                && (activity instanceof PickupActivityNEW
+                                || activity instanceof ServiceActivityNEW)) {
                     pickupOccured = true;
                     stateManager.putActivityState(activity, backhaul_id, false);
                 } else {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/MaxDistanceConstraint.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/MaxDistanceConstraint.java
index 460eec20a..018cd0d92 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/MaxDistanceConstraint.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/MaxDistanceConstraint.java
@@ -18,19 +18,20 @@
 
 package com.graphhopper.jsprit.core.problem.constraint;
 
+import java.util.Collection;
+import java.util.Map;
+
 import com.graphhopper.jsprit.core.algorithm.state.StateId;
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.problem.cost.TransportDistance;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverShipmentDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.AbstractActivityNEW;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivityNEW;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.End;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.Start;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 
-import java.util.Collection;
-import java.util.Map;
-
 /**
  * Created by schroeder on 11/10/16.
  */
@@ -97,7 +98,8 @@ public ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prev
 
 
         double additionalDistanceOfPickup = 0;
-        if (newAct instanceof DeliverShipmentDEPRECATED) {
+        // Balage1551 - Temporal solution to eliminate DEPRECATED
+        if (newAct instanceof DeliveryActivityNEW && AbstractActivityNEW.isShipment(newAct)) {
             int iIndexOfPickup = iFacts.getRelatedActivityContext().getInsertionIndex();
             TourActivity pickup = iFacts.getAssociatedActivities().get(0);
             TourActivity actBeforePickup;
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ShipmentPickupsFirstConstraint.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ShipmentPickupsFirstConstraint.java
index 2983f3506..1792f1cc7 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ShipmentPickupsFirstConstraint.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ShipmentPickupsFirstConstraint.java
@@ -18,20 +18,27 @@
 package com.graphhopper.jsprit.core.problem.constraint;
 
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverShipmentDEPRECATED;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupShipmentDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.AbstractActivityNEW;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivityNEW;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivityNEW;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 
 public class ShipmentPickupsFirstConstraint implements HardActivityConstraint {
 
     @Override
     public ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prevAct, TourActivity newAct, TourActivity nextAct, double prevActDepTime) {
-        if (newAct instanceof DeliverShipmentDEPRECATED && nextAct instanceof PickupShipmentDEPRECATED) {
+        // Balage1551 - Temporal solution to eliminate DEPRECATED
+        if (AbstractActivityNEW.isShipment(newAct) && newAct instanceof DeliveryActivityNEW
+                        && AbstractActivityNEW.isShipment(nextAct)
+                        && nextAct instanceof PickupActivityNEW) {
             return ConstraintsStatus.NOT_FULFILLED;
         }
-        if (newAct instanceof PickupShipmentDEPRECATED && prevAct instanceof DeliverShipmentDEPRECATED) {
+        if (AbstractActivityNEW.isShipment(newAct) && newAct instanceof PickupActivityNEW
+                        && AbstractActivityNEW.isShipment(prevAct)
+                        && prevAct instanceof DeliveryActivityNEW) {
             return ConstraintsStatus.NOT_FULFILLED_BREAK;
         }
+
         return ConstraintsStatus.FULFILLED;
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Delivery.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Delivery.java
index 638a0a414..17fc09c5b 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Delivery.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Delivery.java
@@ -19,6 +19,7 @@
 
 import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverServiceDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivityNEW;
 
 /**
  * Delivery extends Service and is intended to model a Service where smth is UNLOADED (i.e. delivered) from a transport unit.
@@ -51,10 +52,11 @@ protected Delivery createInstance() {
     @Override
     protected void createActivities(JobBuilder<?, ?> builder) {
         JobActivityList list = new SequentialJobActivityList(this);
-        // TODO - Balage1551
-        // addActivity(new DeliveryActivityNEW(this, "pickup", getLocation(),
-        // getServiceDuration(), getSize()));
-        list.addActivity(new DeliverServiceDEPRECATED(this, (Builder) builder));
+        if (TheBigRedButton.PUSHED) {
+            list.addActivity(new DeliveryActivityNEW(this, (Builder) builder));
+        } else {
+            list.addActivity(new DeliverServiceDEPRECATED(this, (Builder) builder));
+        }
         setActivities(list);
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Pickup.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Pickup.java
index 28f42c3fc..afa88f061 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Pickup.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Pickup.java
@@ -17,6 +17,7 @@
  */
 package com.graphhopper.jsprit.core.problem.job;
 
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivityNEW;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupServiceDEPRECATED;
 
 /**
@@ -50,9 +51,11 @@ protected Pickup createInstance() {
     @Override
     protected void createActivities(JobBuilder<?, ?> builder) {
         JobActivityList list = new SequentialJobActivityList(this);
-        // TODO - Balage1551
-        //      addActivity(new PickupActivityNEW(this, "pickup", getLocation(), getServiceDuration(), getSize()));
-        list.addActivity(new PickupServiceDEPRECATED(this, (Builder) builder));
+        if (TheBigRedButton.PUSHED) {
+            list.addActivity(new PickupActivityNEW(this, (Builder) builder));
+        } else {
+            list.addActivity(new PickupServiceDEPRECATED(this, (Builder) builder));
+        }
         setActivities(list);
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java
index c6d2f760b..534e8f931 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java
@@ -17,15 +17,16 @@
  */
 package com.graphhopper.jsprit.core.problem.job;
 
-import com.graphhopper.jsprit.core.problem.SizeDimension;
+import java.util.Collection;
+
 import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupServiceDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.ServiceActivityNEW;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindowsImpl;
 
-import java.util.Collection;
-
 /**
  * Service implementation of a job.
  * <p>
@@ -42,7 +43,7 @@
      * @author schroeder
      */
     public static abstract class BuilderBase<T extends Service, B extends BuilderBase<T, B>>
-        extends JobBuilder<T, B> {
+    extends JobBuilder<T, B> {
 
         protected String type = "service";
 
@@ -223,9 +224,11 @@ protected Service createInstance() {
     protected void createActivities(JobBuilder<?, ?> builder) {
         Builder serviceBuilder = (Builder) builder;
         JobActivityList list = new SequentialJobActivityList(this);
-        // TODO - Balage1551
-        //        list.addActivity(new ServiceActivityNEW(this, "service", getLocation(), getServiceDuration(), getSize()));
-        list.addActivity(new PickupServiceDEPRECATED(this, serviceBuilder));
+        if (TheBigRedButton.PUSHED) {
+            list.addActivity(new ServiceActivityNEW(this, serviceBuilder));
+        } else {
+            list.addActivity(new PickupServiceDEPRECATED(this, serviceBuilder));
+        }
         setActivities(list);
     }
 
@@ -285,8 +288,8 @@ public String getType() {
     @Override
     public String toString() {
         return "[id=" + getId() + "][name=" + getName() + "][type=" + type + "][location="
-            + getLocation() + "][capacity=" + getSize() + "][serviceTime="
-            + getServiceDuration() + "][timeWindow=" + getTimeWindows() + "]";
+                        + getLocation() + "][capacity=" + getSize() + "][serviceTime="
+                        + getServiceDuration() + "][timeWindow=" + getTimeWindows() + "]";
     }
 
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java
index 550412096..8c89faac8 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java
@@ -17,15 +17,17 @@
  */
 package com.graphhopper.jsprit.core.problem.job;
 
-import com.graphhopper.jsprit.core.problem.SizeDimension;
+import java.util.Collection;
+
 import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverShipmentDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivityNEW;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivityNEW;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupShipmentDEPRECATED;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindowsImpl;
 
-import java.util.Collection;
-
 
 /**
  * Shipment is an implementation of Job and consists of a pickup and a delivery
@@ -60,7 +62,7 @@
      * @author schroeder
      */
     public static abstract class BuilderBase<T extends Shipment, B extends BuilderBase<T, B>>
-        extends JobBuilder<T, B> {
+    extends JobBuilder<T, B> {
 
         private double pickupServiceTime = 0.0;
 
@@ -299,22 +301,30 @@ protected Shipment createInstance() {
     protected void createActivities(JobBuilder<?, ?> builder) {
         Builder shipmentBuilder = (Builder) builder;
         JobActivityList list = new SequentialJobActivityList(this);
-        // TODO - Balage1551
-        //      list.addActivity(new PickupActivityNEW(this, "pickup", getPickupLocation(), getPickupServiceTime(), getSize()));
-        //      list.addActivity(new PickupActivityNEW(this, "delivery", getDeliveryLocation(), getDeliveryServiceTime(), getSize()));
-        list.addActivity(new PickupShipmentDEPRECATED(this, shipmentBuilder));
-        list.addActivity(new DeliverShipmentDEPRECATED(this, shipmentBuilder));
+        if (TheBigRedButton.PUSHED) {
+            list.addActivity(new PickupActivityNEW(this, "pickupShipment",
+                            shipmentBuilder.getPickupLocation(),
+                            shipmentBuilder.getPickupServiceTime(), shipmentBuilder.getCapacity(),
+                            shipmentBuilder.getPickupTimeWindows().getTimeWindows()));
+            list.addActivity(new DeliveryActivityNEW(this, "deliverShipment",
+                            shipmentBuilder.getDeliveryLocation(),
+                            shipmentBuilder.getDeliveryServiceTime(), shipmentBuilder.getCapacity(),
+                            shipmentBuilder.getDeliveryTimeWindows().getTimeWindows()));
+        } else {
+            list.addActivity(new PickupShipmentDEPRECATED(this, shipmentBuilder));
+            list.addActivity(new DeliverShipmentDEPRECATED(this, shipmentBuilder));
+        }
         setActivities(list);
     }
 
-    public PickupShipmentDEPRECATED getPickupActivity() {
-        return (PickupShipmentDEPRECATED) getActivityList().findByType(PickupShipmentDEPRECATED.NAME)
-            .get();
+    public PickupActivityNEW getPickupActivity() {
+        return (PickupActivityNEW) getActivityList().findByType(PickupShipmentDEPRECATED.NAME)
+                        .get();
     }
 
-    public DeliverShipmentDEPRECATED getDeliveryActivity() {
-        return (DeliverShipmentDEPRECATED) getActivityList().findByType(DeliverShipmentDEPRECATED.NAME)
-            .get();
+    public DeliveryActivityNEW getDeliveryActivity() {
+        return (DeliveryActivityNEW) getActivityList().findByType(DeliverShipmentDEPRECATED.NAME)
+                        .get();
     }
 
     // =================== DEPRECATED GETTERS
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/TheBigRedButton.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/TheBigRedButton.java
new file mode 100644
index 000000000..9c2d0284a
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/TheBigRedButton.java
@@ -0,0 +1,5 @@
+package com.graphhopper.jsprit.core.problem.job;
+
+public class TheBigRedButton {
+    public static boolean PUSHED = false;
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/AbstractActivityNEW.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/AbstractActivityNEW.java
index 334feb8a5..1ac5e48eb 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/AbstractActivityNEW.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/AbstractActivityNEW.java
@@ -1,12 +1,13 @@
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
 
-import com.graphhopper.jsprit.core.problem.SizeDimension;
-import com.graphhopper.jsprit.core.problem.Location;
-
 import java.lang.reflect.Constructor;
 import java.lang.reflect.InvocationTargetException;
 
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
+import com.graphhopper.jsprit.core.problem.job.Shipment;
+
 public abstract class AbstractActivityNEW implements TourActivity {
 
     private int index;
@@ -110,9 +111,9 @@ public Location getLocation() {
     @Override
     public String toString() {
         return "[name=" + getName() + "][locationId=" + getLocation().getId()
-            + "][size=" + getLoadChange().toString()
-            + "][twStart=" + Activities.round(getTheoreticalEarliestOperationStartTime())
-            + "][twEnd=" + Activities.round(getTheoreticalLatestOperationStartTime()) + "]";
+                        + "][size=" + getLoadChange().toString()
+                        + "][twStart=" + Activities.round(getTheoreticalEarliestOperationStartTime())
+                        + "][twEnd=" + Activities.round(getTheoreticalLatestOperationStartTime()) + "]";
     }
 
 
@@ -124,10 +125,17 @@ public TourActivity duplicate() {
             Constructor<? extends AbstractActivityNEW> constructor = getClass().getConstructor(getClass());
             return constructor.newInstance(this);
         } catch (NoSuchMethodException | SecurityException | InstantiationException | IllegalAccessException | IllegalArgumentException
-            | InvocationTargetException e) {
+                        | InvocationTargetException e) {
             System.out.println(this.getClass().getCanonicalName() + " : " + this);
             throw new IllegalStateException(e);
         }
     }
 
+    // Temporal solution unto eliminated dependency on job type
+    @Deprecated
+    public static boolean isShipment(TourActivity activity) {
+        return (activity instanceof JobActivity)
+                        && (((JobActivity) activity).getJob() instanceof Shipment);
+    }
+
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DefaultShipmentActivityFactory.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DefaultShipmentActivityFactory.java
deleted file mode 100644
index d7d82a451..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DefaultShipmentActivityFactory.java
+++ /dev/null
@@ -1,34 +0,0 @@
-/*
- * Licensed to GraphHopper GmbH under one or more contributor
- * license agreements. See the NOTICE file distributed with this work for
- * additional information regarding copyright ownership.
- *
- * GraphHopper GmbH licenses this file to you under the Apache License,
- * Version 2.0 (the "License"); you may not use this file except in
- * compliance with the License. You may obtain a copy of the License at
- *
- *       http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.graphhopper.jsprit.core.problem.solution.route.activity;
-
-import com.graphhopper.jsprit.core.problem.job.Shipment;
-
-public class DefaultShipmentActivityFactory implements TourShipmentActivityFactory {
-
-    @Override
-    public AbstractActivityNEW createPickup(Shipment shipment) {
-        return shipment.getPickupActivity();
-    }
-
-    @Override
-    public AbstractActivityNEW createDelivery(Shipment shipment) {
-        return shipment.getDeliveryActivity();
-    }
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliveryActivityNEW.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliveryActivityNEW.java
index 5d471942e..172f179f5 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliveryActivityNEW.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliveryActivityNEW.java
@@ -17,17 +17,18 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.SizeDimension;
+import java.util.Collection;
+
 import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.job.AbstractJob;
-
-import java.util.Collection;
+import com.graphhopper.jsprit.core.problem.job.Service;
 
 public class DeliveryActivityNEW extends JobActivity {
 
 
     public DeliveryActivityNEW(AbstractJob job, String name, Location location,
-                               double operationTime, SizeDimension capacity, Collection<TimeWindow> timeWindows) {
+                    double operationTime, SizeDimension capacity, Collection<TimeWindow> timeWindows) {
         super(job, name, location, operationTime, capacity, timeWindows);
     }
 
@@ -35,4 +36,12 @@ public DeliveryActivityNEW(DeliveryActivityNEW sourceActivity) {
         super(sourceActivity);
     }
 
+    public DeliveryActivityNEW(AbstractJob service,
+                    Service.BuilderBase<? extends Service, ?> serviceBuilder) {
+        this(service, serviceBuilder.getType(), serviceBuilder.getLocation(),
+                        serviceBuilder.getServiceTime(),
+                        serviceBuilder.getCapacity(),
+                        serviceBuilder.getTimeWindows().getTimeWindows());
+    }
+
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivityNEW.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivityNEW.java
index 46450ada7..1e8c36324 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivityNEW.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivityNEW.java
@@ -17,16 +17,17 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.SizeDimension;
+import java.util.Collection;
+
 import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.job.AbstractJob;
-
-import java.util.Collection;
+import com.graphhopper.jsprit.core.problem.job.Service;
 
 public class PickupActivityNEW extends JobActivity {
 
     public PickupActivityNEW(AbstractJob job, String name, Location location, double operationTime,
-                             SizeDimension capacity, Collection<TimeWindow> timeWindows) {
+                    SizeDimension capacity, Collection<TimeWindow> timeWindows) {
         super(job, name, location, operationTime, capacity, timeWindows);
     }
 
@@ -34,5 +35,12 @@ public PickupActivityNEW(PickupActivityNEW sourceActivity) {
         super(sourceActivity);
     }
 
+    public PickupActivityNEW(AbstractJob service,
+                    Service.BuilderBase<? extends Service, ?> serviceBuilder) {
+        this(service, serviceBuilder.getType(), serviceBuilder.getLocation(),
+                        serviceBuilder.getServiceTime(),
+                        serviceBuilder.getCapacity(),
+                        serviceBuilder.getTimeWindows().getTimeWindows());
+    }
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupServiceDEPRECATED.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupServiceDEPRECATED.java
index 05c51f487..e9688333f 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupServiceDEPRECATED.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupServiceDEPRECATED.java
@@ -22,11 +22,11 @@
 public final class PickupServiceDEPRECATED extends PickupActivityNEW {
 
     public PickupServiceDEPRECATED(Service service,
-                                   Service.BuilderBase<? extends Service, ?> builder) {
+                    Service.BuilderBase<? extends Service, ?> builder) {
         super(service, builder.getType(), builder.getLocation(),
-            builder.getServiceTime(),
-            builder.getCapacity(),
-            builder.getTimeWindows().getTimeWindows());
+                        builder.getServiceTime(),
+                        builder.getCapacity(),
+                        builder.getTimeWindows().getTimeWindows());
     }
 
 
@@ -37,7 +37,7 @@ public PickupServiceDEPRECATED(PickupServiceDEPRECATED sourceActivity) {
     @Deprecated
     public PickupServiceDEPRECATED(Service service) {
         super(service, service.getType(), service.getLocation(), service.getServiceDuration(),
-            service.getSize(), service.getServiceTimeWindows());
+                        service.getSize(), service.getServiceTimeWindows());
     }
 
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityNEW.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityNEW.java
index 918519e83..79bfe15df 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityNEW.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityNEW.java
@@ -17,28 +17,37 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.SizeDimension;
+import java.util.Collection;
+
 import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.job.AbstractJob;
 import com.graphhopper.jsprit.core.problem.job.Service;
 
-import java.util.Collection;
-
 public class ServiceActivityNEW extends JobActivity {
 
     public ServiceActivityNEW(AbstractJob job, String name, Location location, double operationTime,
-                              SizeDimension capacity, Collection<TimeWindow> timeWindows) {
+                    SizeDimension capacity, Collection<TimeWindow> timeWindows) {
         super(job, name, location, operationTime, capacity, timeWindows);
     }
 
+
     public ServiceActivityNEW(ServiceActivityNEW sourceActivity) {
         super(sourceActivity);
     }
 
+    public ServiceActivityNEW(Service service,
+                    Service.BuilderBase<? extends Service, ?> serviceBuilder) {
+        this(service, serviceBuilder.getType(), serviceBuilder.getLocation(),
+                        serviceBuilder.getServiceTime(),
+                        serviceBuilder.getCapacity(),
+                        serviceBuilder.getTimeWindows().getTimeWindows());
+    }
+
     // NOTE: Only for testing purposes
     public static ServiceActivityNEW newInstance(Service service) {
         return new ServiceActivityNEW(service, service.getName(), service.getLocation(),
-            service.getServiceDuration(), service.getSize(), service.getTimeWindows());
+                        service.getServiceDuration(), service.getSize(), service.getTimeWindows());
     }
 
 }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/InitialRoutesTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/InitialRoutesTest.java
index f5f929d29..2f539b397 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/InitialRoutesTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/InitialRoutesTest.java
@@ -19,6 +19,15 @@
 package com.graphhopper.jsprit.core.algorithm;
 
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
+import java.util.Collection;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.box.GreedySchrimpfFactory;
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit.Builder;
@@ -37,19 +46,13 @@
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupShipmentDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivityNEW;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.Coordinate;
 import com.graphhopper.jsprit.core.util.Solutions;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.Collection;
-
-import static org.junit.Assert.*;
 
 public class InitialRoutesTest {
 
@@ -158,26 +161,26 @@ public void whenSolving_deliverService2_shouldBeInRoute() {
     public void maxCapacityShouldNotBeExceeded() {
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0, 100).build();
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("veh")
-            .setStartLocation(Location.Builder.newInstance().setId("start").setCoordinate(Coordinate.newInstance(0, 0)).build())
-            .setType(type)
-            .build();
+                        .setStartLocation(Location.Builder.newInstance().setId("start").setCoordinate(Coordinate.newInstance(0, 0)).build())
+                        .setType(type)
+                        .build();
 
         Shipment shipment = Shipment.Builder.newInstance("s")
-            .setPickupLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(10, 0)).setId("pick").build())
-            .setDeliveryLocation(Location.Builder.newInstance().setId("del").setCoordinate(Coordinate.newInstance(0, 10)).build())
-            .addSizeDimension(0, 100)
-            .build();
+                        .setPickupLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(10, 0)).setId("pick").build())
+                        .setDeliveryLocation(Location.Builder.newInstance().setId("del").setCoordinate(Coordinate.newInstance(0, 10)).build())
+                        .addSizeDimension(0, 100)
+                        .build();
 
         Shipment another_shipment = Shipment.Builder.newInstance("another_s")
-            .setPickupLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(10, 0)).setId("pick").build())
-            .setDeliveryLocation(Location.Builder.newInstance().setId("del").setCoordinate(Coordinate.newInstance(0, 10)).build())
-            .addSizeDimension(0, 50)
-            .build();
+                        .setPickupLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(10, 0)).setId("pick").build())
+                        .setDeliveryLocation(Location.Builder.newInstance().setId("del").setCoordinate(Coordinate.newInstance(0, 10)).build())
+                        .addSizeDimension(0, 50)
+                        .build();
 
         VehicleRoute iniRoute = VehicleRoute.Builder.newInstance(vehicle).addPickup(shipment).addDelivery(shipment).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(shipment).addVehicle(vehicle).addJob(another_shipment)
-            .setFleetSize(VehicleRoutingProblem.FleetSize.FINITE).addInitialVehicleRoute(iniRoute).build();
+                        .setFleetSize(VehicleRoutingProblem.FleetSize.FINITE).addInitialVehicleRoute(iniRoute).build();
 
         VehicleRoutingAlgorithm vra = new GreedySchrimpfFactory().createAlgorithm(vrp);
         vra.setMaxIterations(10);
@@ -191,7 +194,7 @@ public void maxCapacityShouldNotBeExceeded() {
     private boolean secondActIsPickup(Collection<VehicleRoutingProblemSolution> solutions) {
         VehicleRoutingProblemSolution solution = Solutions.bestOf(solutions);
         TourActivity secondAct = solution.getRoutes().iterator().next().getActivities().get(1);
-        return secondAct instanceof PickupShipmentDEPRECATED;
+        return secondAct instanceof PickupActivityNEW;
     }
 
     @Test
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionWithShipmentsTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionWithShipmentsTest.java
index 3dab8a0d4..9fb1bdbfb 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionWithShipmentsTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionWithShipmentsTest.java
@@ -17,6 +17,16 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+import static org.mockito.Mockito.mock;
+
+import java.util.Arrays;
+import java.util.List;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
@@ -32,9 +42,7 @@
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverShipmentDEPRECATED;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupShipmentDEPRECATED;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.state.RouteAndActivityStateGetter;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
@@ -42,16 +50,6 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.CostFactory;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-import static org.mockito.Mockito.mock;
 
 
 public class GeneralJobInsertionWithShipmentsTest {
@@ -118,7 +116,7 @@ public void whenCalculatingInsertionIntoExistingRoute_itShouldReturnCorrectCosts
         Shipment shipment = Shipment.Builder.newInstance("s").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,10").build()).setDeliveryLocation(Location.newInstance("10,0")).build();
         Shipment shipment2 = Shipment.Builder.newInstance("s2").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("10,10").build()).setDeliveryLocation(Location.newInstance("0,0")).build();
         VehicleRoute route = VehicleRoute.emptyRoute();
-        List<JobActivity> tourActivities = getTourActivities(shipment);
+        List<JobActivity> tourActivities = shipment.getActivityList().getAll();
         route.setVehicleAndDepartureTime(vehicle, 0);
         add(tourActivities, route, 0, 0);
 
@@ -128,21 +126,13 @@ public void whenCalculatingInsertionIntoExistingRoute_itShouldReturnCorrectCosts
         assertEquals(2, iData.getUnmodifiableEventsByType(InsertActivity.class).get(0).getIndex());
     }
 
-    private List<JobActivity> getTourActivities(Shipment shipment) {
-        List<JobActivity> acts = new ArrayList<>();
-        PickupShipmentDEPRECATED pick = new PickupShipmentDEPRECATED(shipment);
-        DeliverShipmentDEPRECATED del = new DeliverShipmentDEPRECATED(shipment);
-        acts.add(pick);
-        acts.add(del);
-        return acts;
-    }
 
     @Test
     public void whenInsertingShipmentInRouteWithNotEnoughCapacity_itShouldReturnNoInsertion() {
         Shipment shipment = Shipment.Builder.newInstance("s").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,10").build()).setDeliveryLocation(Location.newInstance("10,0")).build();
         Shipment shipment2 = Shipment.Builder.newInstance("s2").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("10,10").build()).setDeliveryLocation(Location.newInstance("0,0")).build();
         VehicleRoute route = VehicleRoute.emptyRoute();
-        List<JobActivity> tourActivities = getTourActivities(shipment);
+        List<JobActivity> tourActivities = shipment.getActivityList().getAll();
         route.setVehicleAndDepartureTime(vehicle, 0);
         add(tourActivities, route, 0, 0);
 
@@ -161,8 +151,8 @@ public void whenInsertingThirdShipment_itShouldCalcCorrectVal() {
         Shipment shipment3 = Shipment.Builder.newInstance("s3").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,0").build()).setDeliveryLocation(Location.newInstance("9,10")).build();
 
         VehicleRoute route = VehicleRoute.emptyRoute();
-        List<JobActivity> shipmentActivities = getTourActivities(shipment);
-        List<JobActivity> shipment2Activities = getTourActivities(shipment2);
+        List<JobActivity> shipmentActivities = shipment.getActivityList().getAll();
+        List<JobActivity> shipment2Activities = shipment2.getActivityList().getAll();
 
         route.setVehicleAndDepartureTime(vehicle, 0d);
         add(shipmentActivities, route, 0, 0);
@@ -180,8 +170,8 @@ public void whenInsertingThirdShipment_itShouldCalcCorrectVal2() {
         Shipment shipment = Shipment.Builder.newInstance("s").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,10").build()).setDeliveryLocation(Location.newInstance("10,0")).build();
         Shipment shipment2 = Shipment.Builder.newInstance("s2").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("10,10").build()).setDeliveryLocation(Location.newInstance("0,0")).build();
         Shipment shipment3 = Shipment.Builder.newInstance("s3").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,0").build()).setDeliveryLocation(Location.newInstance("9,9")).build();
-        List<JobActivity> shipmentActivities = getTourActivities(shipment);
-        List<JobActivity> shipment2Activities = getTourActivities(shipment2);
+        List<JobActivity> shipmentActivities = shipment.getActivityList().getAll();
+        List<JobActivity> shipment2Activities = shipment2.getActivityList().getAll();
         VehicleRoute route = VehicleRoute.emptyRoute();
 
         route.setVehicleAndDepartureTime(vehicle, 0d);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/HardPickupAndDeliveryShipmentActivityConstraintTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/HardPickupAndDeliveryShipmentActivityConstraintTest.java
index fca1db191..2d2724612 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/HardPickupAndDeliveryShipmentActivityConstraintTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/HardPickupAndDeliveryShipmentActivityConstraintTest.java
@@ -30,9 +30,8 @@
 import com.graphhopper.jsprit.core.problem.job.Service;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverShipmentDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivityNEW;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivityNEW;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupShipmentDEPRECATED;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
@@ -79,7 +78,7 @@ public void doBefore() {
     public void whenPickupActivityIsInsertedAndLoadIsSufficient_returnFullFilled() {
         PickupActivityNEW pickupService = (PickupActivityNEW) vrp.getActivities(s1).get(0);
         PickupActivityNEW anotherService = (PickupActivityNEW) vrp.getActivities(s2).get(0);
-        PickupShipmentDEPRECATED pickupShipment = (PickupShipmentDEPRECATED) vrp.getActivities(shipment).get(0);
+        PickupActivityNEW pickupShipment = (PickupActivityNEW) vrp.getActivities(shipment).get(0);
 
         assertEquals(ConstraintsStatus.FULFILLED, constraint.fulfilled(iFacts, pickupService, pickupShipment, anotherService, 0.0));
     }
@@ -88,7 +87,7 @@ public void whenPickupActivityIsInsertedAndLoadIsSufficient_returnFullFilled() {
     public void whenPickupActivityIsInsertedAndLoadIsNotSufficient_returnNOT_FullFilled() {
         PickupActivityNEW pickupService = (PickupActivityNEW) vrp.getActivities(s1).get(0);
         PickupActivityNEW anotherService = (PickupActivityNEW) vrp.getActivities(s2).get(0);
-        PickupShipmentDEPRECATED pickupShipment = (PickupShipmentDEPRECATED) vrp.getActivities(shipment).get(0);
+        PickupActivityNEW pickupShipment = (PickupActivityNEW) vrp.getActivities(shipment).get(0);
 
         stateManager.putInternalTypedActivityState(pickupService, InternalStates.LOAD, SizeDimension.Builder.newInstance().addDimension(0, 2).build());
         //		when(stateManager.getActivityState(pickupService, StateFactory.LOAD)).thenReturn(StateFactory.createState(2.0));
@@ -100,7 +99,8 @@ public void whenDeliveryActivityIsInsertedAndLoadIsSufficient_returnFullFilled()
         PickupActivityNEW pickupService = (PickupActivityNEW) vrp.getActivities(s1).get(0);
         PickupActivityNEW anotherService = (PickupActivityNEW) vrp.getActivities(s2).get(0);
 
-        DeliverShipmentDEPRECATED deliverShipment = (DeliverShipmentDEPRECATED) vrp.getActivities(shipment).get(1);
+        DeliveryActivityNEW deliverShipment = (DeliveryActivityNEW) vrp.getActivities(shipment)
+                        .get(1);
 
         stateManager.putInternalTypedActivityState(pickupService, InternalStates.LOAD, SizeDimension.Builder.newInstance().addDimension(0, 1).build());
         //		stateManager.putInternalActivityState(pickupService, StateFactory.LOAD, StateFactory.createState(1));
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DefaultShipmentActivityFactoryTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DefaultShipmentActivityFactoryTest.java
deleted file mode 100644
index 173bf4814..000000000
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DefaultShipmentActivityFactoryTest.java
+++ /dev/null
@@ -1,48 +0,0 @@
-/*
- * Licensed to GraphHopper GmbH under one or more contributor
- * license agreements. See the NOTICE file distributed with this work for
- * additional information regarding copyright ownership.
- *
- * GraphHopper GmbH licenses this file to you under the Apache License,
- * Version 2.0 (the "License"); you may not use this file except in
- * compliance with the License. You may obtain a copy of the License at
- *
- *       http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.graphhopper.jsprit.core.problem.solution.route.activity;
-
-import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
-import org.junit.Test;
-
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertTrue;
-
-public class DefaultShipmentActivityFactoryTest {
-
-    @Test
-    public void whenCreatingPickupActivityWithShipment_itShouldReturnPickupShipment() {
-        DefaultShipmentActivityFactory factory = new DefaultShipmentActivityFactory();
-        Shipment shipment = Shipment.Builder.newInstance("s")
-            .setPickupLocation(Location.Builder.newInstance().setId("pLoc").build()).setDeliveryLocation(Location.newInstance("dLoc")).build();
-        TourActivity act = factory.createPickup(shipment);
-        assertNotNull(act);
-        assertTrue(act instanceof PickupShipmentDEPRECATED);
-    }
-
-    @Test
-    public void whenCreatingDeliverActivityWithShipment_itShouldReturnDeliverShipment() {
-        DefaultShipmentActivityFactory factory = new DefaultShipmentActivityFactory();
-        Shipment shipment = Shipment.Builder.newInstance("s")
-            .setPickupLocation(Location.Builder.newInstance().setId("pLoc").build()).setDeliveryLocation(Location.newInstance("dLoc")).build();
-        TourActivity act = factory.createDelivery(shipment);
-        assertNotNull(act);
-        assertTrue(act instanceof DeliverShipmentDEPRECATED);
-    }
-}
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TestTourActivities.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TestTourActivities.java
index 8048a74d9..846099556 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TestTourActivities.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TestTourActivities.java
@@ -17,13 +17,16 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.job.Service;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
 import org.junit.Before;
 import org.junit.Test;
 
-import static org.junit.Assert.*;
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.Shipment;
 
 
 public class TestTourActivities {
@@ -77,10 +80,9 @@ public void whenAddingAServiceAndThenRemovingTheServiceAgain_tourShouldNotServeI
     @Test
     public void whenAddingAShipmentActivity_tourShouldServeShipment() {
         Shipment s = Shipment.Builder.newInstance("s").addSizeDimension(0, 1).setDeliveryLocation(Location.newInstance("delLoc"))
-            .setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
-        TourShipmentActivityFactory fac = new DefaultShipmentActivityFactory();
-        TourActivity pickupShipment = fac.createPickup(s);
-        TourActivity deliverShipment = fac.createDelivery(s);
+                        .setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        TourActivity pickupShipment = s.getPickupActivity();
+        TourActivity deliverShipment = s.getDeliveryActivity();
         tour.addActivity(pickupShipment);
         tour.addActivity(deliverShipment);
         assertTrue(tour.servesJob(s));
@@ -91,12 +93,11 @@ public void whenAddingAShipmentActivity_tourShouldServeShipment() {
     @Test
     public void whenRemovingShipment_tourShouldNotServiceItAnymore() {
         Shipment s = Shipment.Builder.newInstance("s").addSizeDimension(0, 1)
-            .setDeliveryLocation(Location.newInstance("delLoc"))
-            .setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build())
-            .build();
-        TourShipmentActivityFactory fac = new DefaultShipmentActivityFactory();
-        TourActivity pickupShipment = fac.createPickup(s);
-        TourActivity deliverShipment = fac.createDelivery(s);
+                        .setDeliveryLocation(Location.newInstance("delLoc"))
+                        .setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build())
+                        .build();
+        TourActivity pickupShipment = s.getPickupActivity();
+        TourActivity deliverShipment = s.getDeliveryActivity();
         tour.addActivity(pickupShipment);
         tour.addActivity(deliverShipment);
 
@@ -108,11 +109,10 @@ public void whenRemovingShipment_tourShouldNotServiceItAnymore() {
     @Test
     public void whenRemovingShipment_theirCorrespondingActivitiesShouldBeRemoved() {
         Shipment s = Shipment.Builder.newInstance("s").addSizeDimension(0, 1)
-            .setDeliveryLocation(Location.newInstance("delLoc"))
-            .setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
-        TourShipmentActivityFactory fac = new DefaultShipmentActivityFactory();
-        TourActivity pickupShipment = fac.createPickup(s);
-        TourActivity deliverShipment = fac.createDelivery(s);
+                        .setDeliveryLocation(Location.newInstance("delLoc"))
+                        .setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        TourActivity pickupShipment = s.getPickupActivity();
+        TourActivity deliverShipment = s.getDeliveryActivity();
         tour.addActivity(pickupShipment);
         tour.addActivity(deliverShipment);
 
@@ -150,11 +150,10 @@ public void copyingSeqShouldWork() {
     @Test
     public void removingShipmentActivityShouldWork() {
         Shipment s = Shipment.Builder.newInstance("s").addSizeDimension(0, 1)
-            .setDeliveryLocation(Location.newInstance("delLoc"))
-            .setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
-        TourShipmentActivityFactory fac = new DefaultShipmentActivityFactory();
-        TourActivity pickupShipment = fac.createPickup(s);
-        TourActivity deliverShipment = fac.createDelivery(s);
+                        .setDeliveryLocation(Location.newInstance("delLoc"))
+                        .setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        TourActivity pickupShipment = s.getPickupActivity();
+        TourActivity deliverShipment = s.getDeliveryActivity();
         tour.addActivity(pickupShipment);
         tour.addActivity(deliverShipment);
 
@@ -177,11 +176,10 @@ public void removingShipmentActivityShouldWork() {
     @Test
     public void whenCopyingShipmentActivitySeq_jobSizeShouldBeCorrect() {
         Shipment s = Shipment.Builder.newInstance("s").addSizeDimension(0, 1)
-            .setDeliveryLocation(Location.newInstance("delLoc"))
-            .setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
-        TourShipmentActivityFactory fac = new DefaultShipmentActivityFactory();
-        TourActivity pickupShipment = fac.createPickup(s);
-        TourActivity deliverShipment = fac.createDelivery(s);
+                        .setDeliveryLocation(Location.newInstance("delLoc"))
+                        .setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        TourActivity pickupShipment = s.getPickupActivity();
+        TourActivity deliverShipment = s.getDeliveryActivity();
         tour.addActivity(pickupShipment);
         tour.addActivity(deliverShipment);
 
@@ -199,10 +197,9 @@ public void whenCopyingShipmentActivitySeq_jobSizeShouldBeCorrect() {
     @Test
     public void whenCopyingShipmentActivitySeq_noActivitiesShouldBeCorrect() {
         Shipment s = Shipment.Builder.newInstance("s").addSizeDimension(0, 1)
-            .setDeliveryLocation(Location.newInstance("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
-        TourShipmentActivityFactory fac = new DefaultShipmentActivityFactory();
-        TourActivity pickupShipment = fac.createPickup(s);
-        TourActivity deliverShipment = fac.createDelivery(s);
+                        .setDeliveryLocation(Location.newInstance("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        TourActivity pickupShipment = s.getPickupActivity();
+        TourActivity deliverShipment = s.getDeliveryActivity();
         tour.addActivity(pickupShipment);
         tour.addActivity(deliverShipment);
 
@@ -220,10 +217,9 @@ public void whenCopyingShipmentActivitySeq_noActivitiesShouldBeCorrect() {
     @Test
     public void whenCopyingShipmentActivitySeq_itShouldContaintPickupAct() {
         Shipment s = Shipment.Builder.newInstance("s").addSizeDimension(0, 1)
-            .setDeliveryLocation(Location.newInstance("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
-        TourShipmentActivityFactory fac = new DefaultShipmentActivityFactory();
-        TourActivity pickupShipment = fac.createPickup(s);
-        TourActivity deliverShipment = fac.createDelivery(s);
+                        .setDeliveryLocation(Location.newInstance("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        TourActivity pickupShipment = s.getPickupActivity();
+        TourActivity deliverShipment = s.getDeliveryActivity();
         tour.addActivity(pickupShipment);
         tour.addActivity(deliverShipment);
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/TestUtils.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/TestUtils.java
index ead793fc3..be5b5d0cf 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/TestUtils.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/TestUtils.java
@@ -36,4 +36,5 @@ public static Location loc(String id) {
     public static Location loc(Coordinate coordinate) {
         return Location.Builder.newInstance().setCoordinate(coordinate).build();
     }
+
 }
