diff --git a/jsprit-examples/src/main/java/CopyOfAdditionalDistanceConstraintExample.java b/jsprit-examples/src/main/java/CopyOfAdditionalDistanceConstraintExample.java
index 437480e84..630eacf1f 100644
--- a/jsprit-examples/src/main/java/CopyOfAdditionalDistanceConstraintExample.java
+++ b/jsprit-examples/src/main/java/CopyOfAdditionalDistanceConstraintExample.java
@@ -206,9 +206,12 @@ public static void main(String[] args) {
 
 		VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0, 20000).setCostPerDistance(1).setCostPerTime(0).build();
 		VehicleImpl vehicle = VehicleImpl.Builder.newInstance("vehicle").setStartLocationId("0").setStartLocationCoordinate(Coordinate.newInstance(0,0)).setType(type).build();
-		VehicleImpl vehicle2 = VehicleImpl.Builder.newInstance("vehicle2").setStartLocationId("0").setStartLocationCoordinate(Coordinate.newInstance(0,0)).setType(type).build();
-		VehicleImpl vehicle3 = VehicleImpl.Builder.newInstance("vehicle3").setStartLocationId("0").setStartLocationCoordinate(Coordinate.newInstance(0,0)).setType(type).build();
-		VehicleImpl vehicle4 = VehicleImpl.Builder.newInstance("vehicle4").setStartLocationId("0").setStartLocationCoordinate(Coordinate.newInstance(0,0)).setType(type).build();
+		// this is a fake vehicle into which we could dump unwanted jobs
+		VehicleType typeFake = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0, 20000).setCostPerDistance(0.000001).setCostPerTime(0).build();
+
+		VehicleImpl vehicle2 = VehicleImpl.Builder.newInstance("vehicle2").setStartLocationId("0").setStartLocationCoordinate(Coordinate.newInstance(0,0)).setType(typeFake).build();
+		VehicleImpl vehicle3 = VehicleImpl.Builder.newInstance("vehicle3").setStartLocationId("0").setStartLocationCoordinate(Coordinate.newInstance(0,0)).setType(typeFake).build();
+		VehicleImpl vehicle4 = VehicleImpl.Builder.newInstance("vehicle4").setStartLocationId("0").setStartLocationCoordinate(Coordinate.newInstance(0,0)).setType(typeFake).build();
 
 		int N_TARGET = 30	; // 30 nodes plus starting point
         Service [] services = new Service[N_TARGET];
@@ -243,28 +246,31 @@ public static void main(String[] args) {
 		 */
 		//define a matrix-builder building a symmetric matrix
         VehicleRoutingTransportCostsMatrix.Builder costMatrixBuilder = VehicleRoutingTransportCostsMatrix.Builder.newInstance(false);
-        double BIG = 50900999;// Double.MAX_VALUE;
+        double BIG = 50000000;// Double.MAX_VALUE;
         double NOGO = BIG;
-        double OK_COST= 100;
+        double OK_COST= -10;
         double [][] matrix = new double[N_TARGET+1][N_TARGET+1];
         for(int i=0;i<=N_TARGET;i++)
         	for(int j=0;j<=N_TARGET;j++)
         		if (i == j)
         			matrix[i][j] = 0;
         		else if (i==0 || j==0 )
-        			matrix[i][j] = 200;
+        			matrix[i][j] = 0;
         		else
         			matrix[i][j] =  BIG;
         
         
         for(int i=0;i<=N_TARGET;i++) {
         	matrix[i][(i+1)%(N_TARGET+1)] = OK_COST;
+//        	matrix[i][(i-1 + N_TARGET+1)%(N_TARGET+1)] = 2*OK_COST;
         }
         
-        matrix[7][23] = 1;//OK_COST;
-        matrix[7][8] = 400;
-        matrix[22][23] = 400;
+//        matrix[22][23] = NOGO;
+//        matrix[7][8] = 10;
+        matrix[7][27] = -1000000;
         
+//        matrix[30][8] = OK_COST;
+//        matrix[22][0] = OK_COST;
 
          
 
@@ -283,7 +289,7 @@ else if (i==0 || j==0 )
 		
         VehicleRoutingTransportCostsMatrix costMatrix = costMatrixBuilder.build() ;
 
-        VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance().setFleetSize(FleetSize.INFINITE/*FleetSize.INFINITE*/).setRoutingCost(costMatrix)
+        VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance().setFleetSize(FleetSize.FINITE/*FleetSize.INFINITE*/).setRoutingCost(costMatrix)
 		.addVehicle(vehicle)
 		.addVehicle(vehicle2)
 		.addVehicle(vehicle3)
@@ -296,6 +302,7 @@ else if (i==0 || j==0 )
         AlgorithmEventsRecorder eventsRecorder = new AlgorithmEventsRecorder(vrp,("output/events.dgs.gz"));
         eventsRecorder.setRecordingRange(0,50);
 
+//        VehicleRoutingAlgorithmBuilder vraBuilder = new VehicleRoutingAlgorithmBuilder(vrp, "input/algorithmConfig_solomon.xml");
         
         VehicleRoutingAlgorithmBuilder vraBuilder = new VehicleRoutingAlgorithmBuilder(vrp, "input/algorithmConfig_greedyWithRegret.xml");
 
@@ -324,7 +331,7 @@ else if (i==0 || j==0 )
 //		VehicleRoutingAlgorithm vra = VehicleRoutingAlgorithms.readAndCreateAlgorithm(vrp, "input/fastAlgo.xml");
 
 //        vra.setNuOfIterations(250); //v1.3.1
-        vra.setMaxIterations(250); //head of development - upcoming release (v1.4)
+        vra.setMaxIterations(2500); //head of development - upcoming release (v1.4)
         vra.addListener(eventsRecorder);
 
         Collection<VehicleRoutingProblemSolution> solutions = vra.searchSolutions();
