diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TimeWindow.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TimeWindow.java
index 6f7fafb02..0c8cf5b4d 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TimeWindow.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TimeWindow.java
@@ -118,11 +118,14 @@ public boolean equals(Object obj) {
             return false;
         }
         if (Double.doubleToLongBits(start) != Double
-            .doubleToLongBits(other.start)) {
+                        .doubleToLongBits(other.start)) {
             return false;
         }
         return true;
     }
 
 
+    public boolean contains(double time) {
+        return time >= start && time < end;
+    }
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java
index 876569cee..f80e13188 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java
@@ -19,6 +19,7 @@
 
 import java.io.PrintWriter;
 import java.time.LocalDateTime;
+import java.time.temporal.ChronoUnit;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
@@ -42,23 +43,28 @@
 import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.LongColumnType;
 import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.StringColumnType;
 import com.graphhopper.jsprit.core.reporting.route.ActivityCostPrinterColumn;
+import com.graphhopper.jsprit.core.reporting.route.ActivityDurationPrinterColumn;
 import com.graphhopper.jsprit.core.reporting.route.ActivityLoadChangePrinterColumn;
-import com.graphhopper.jsprit.core.reporting.route.ActivityOperationTimePrinterColumn;
 import com.graphhopper.jsprit.core.reporting.route.ActivityTypePrinterColumn;
 import com.graphhopper.jsprit.core.reporting.route.ArrivalTimePrinterColumn;
 import com.graphhopper.jsprit.core.reporting.route.EndTimePrinterColumn;
-import com.graphhopper.jsprit.core.reporting.route.HumanReadableArrivalTimePrinterColumn;
-import com.graphhopper.jsprit.core.reporting.route.HumanReadableEndTimePrinterColumn;
+import com.graphhopper.jsprit.core.reporting.route.HumanReadableTimeFormatter;
 import com.graphhopper.jsprit.core.reporting.route.JobNamePrinterColumn;
 import com.graphhopper.jsprit.core.reporting.route.JobPriorityPrinterColumn;
 import com.graphhopper.jsprit.core.reporting.route.JobTypePrinterColumn;
 import com.graphhopper.jsprit.core.reporting.route.LoacationPrinterColumn;
+import com.graphhopper.jsprit.core.reporting.route.OperationDurationPrinterColumn;
 import com.graphhopper.jsprit.core.reporting.route.RouteCostPrinterColumn;
 import com.graphhopper.jsprit.core.reporting.route.RouteLoadPrinterColumn;
 import com.graphhopper.jsprit.core.reporting.route.RouteNumberPrinterColumn;
 import com.graphhopper.jsprit.core.reporting.route.RoutePrinterContext;
+import com.graphhopper.jsprit.core.reporting.route.SelectedTimeWindowPrinterColumn;
+import com.graphhopper.jsprit.core.reporting.route.StartTimePrinterColumn;
+import com.graphhopper.jsprit.core.reporting.route.TimeWindowsPrinterColumn;
 import com.graphhopper.jsprit.core.reporting.route.TransportCostPrinterColumn;
+import com.graphhopper.jsprit.core.reporting.route.TravelDurationPrinterColumn;
 import com.graphhopper.jsprit.core.reporting.route.VehicleNamePrinterColumn;
+import com.graphhopper.jsprit.core.reporting.route.WaitingDurationPrinterColumn;
 
 
 /**
@@ -280,6 +286,7 @@ private static void printVerbose(PrintWriter out, VehicleRoutingProblem problem,
     private static void printVerbose2(PrintWriter out, VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution) {
 
         PrinterColumnList<RoutePrinterContext> columns = new PrinterColumnList<>("Detailed route");
+        HumanReadableTimeFormatter dateFormatter = new HumanReadableTimeFormatter(LocalDateTime.now(), ChronoUnit.SECONDS);
         columns
         .addColumn(new RouteNumberPrinterColumn())
         .addColumn(new VehicleNamePrinterColumn())
@@ -290,14 +297,27 @@ private static void printVerbose2(PrintWriter out, VehicleRoutingProblem problem
         .addColumn(new ActivityLoadChangePrinterColumn())
         .addColumn(new RouteLoadPrinterColumn())
         .addColumn(new LoacationPrinterColumn())
-        .addColumn(new ActivityOperationTimePrinterColumn())
+        .addColumn(new OperationDurationPrinterColumn())
+        .addColumn(new OperationDurationPrinterColumn().asHumanReadable())
+        .addColumn(new TravelDurationPrinterColumn())
+        .addColumn(new TravelDurationPrinterColumn().asHumanReadable())
+        .addColumn(new ActivityDurationPrinterColumn())
+        .addColumn(new ActivityDurationPrinterColumn().asHumanReadable())
+        .addColumn(new WaitingDurationPrinterColumn())
+        .addColumn(new WaitingDurationPrinterColumn().asHumanReadable())
         .addColumn(new ArrivalTimePrinterColumn())
+        .addColumn(new ArrivalTimePrinterColumn().asHumanReadable().withFormatter(dateFormatter))
+        .addColumn(new StartTimePrinterColumn())
+        .addColumn(new StartTimePrinterColumn().asHumanReadable().withFormatter(dateFormatter))
         .addColumn(new EndTimePrinterColumn())
-        .addColumn(new HumanReadableArrivalTimePrinterColumn())
-        .addColumn(new HumanReadableEndTimePrinterColumn().withOrigin(LocalDateTime.now()))
+        .addColumn(new EndTimePrinterColumn().asHumanReadable().withFormatter(dateFormatter))
         .addColumn(new TransportCostPrinterColumn())
         .addColumn(new ActivityCostPrinterColumn())
         .addColumn(new RouteCostPrinterColumn())
+        .addColumn(new SelectedTimeWindowPrinterColumn())
+        .addColumn(new SelectedTimeWindowPrinterColumn().asHumanReadable().withFormatter(dateFormatter))
+        .addColumn(new TimeWindowsPrinterColumn())
+        .addColumn(new TimeWindowsPrinterColumn().asHumanReadable().withFormatter(dateFormatter))
         ;
 
         ConfigurableTablePrinter<RoutePrinterContext> tablePrinter = new ConfigurableTablePrinter<>(columns);
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractCostPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractCostPrinterColumn.java
index 27c463cc0..9a6e8c246 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractCostPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractCostPrinterColumn.java
@@ -2,14 +2,14 @@
 
 import java.util.function.Consumer;
 
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
 import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.Alignment;
 import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition;
 import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
 import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.IntColumnType;
 
-public abstract class AbstractCostPrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, Integer> {
+public abstract class AbstractCostPrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, Integer>
+                implements CostAndTimeExtractor {
 
     public AbstractCostPrinterColumn() {
         super();
@@ -26,16 +26,4 @@ public AbstractCostPrinterColumn(Consumer<Builder> decorator) {
 
     protected abstract String getTitle();
 
-    protected double getActivityCost(RoutePrinterContext context) {
-        return context.getProblem().getActivityCosts().getActivityCost(context.getActivity(),
-                        context.getActivity().getArrTime(), context.getRoute().getDriver(), context.getRoute().getVehicle());
-    }
-
-    protected double getTransportCost(RoutePrinterContext context, TourActivity prevAct) {
-        return prevAct == null ? 0d
-                        : context.getProblem().getTransportCosts().getTransportCost(prevAct.getLocation(),
-                                        context.getActivity().getLocation(),
-                                        context.getActivity().getArrTime(), context.getRoute().getDriver(), context.getRoute().getVehicle());
-    }
-
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractDurationPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractDurationPrinterColumn.java
new file mode 100644
index 000000000..11a1f7cc0
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractDurationPrinterColumn.java
@@ -0,0 +1,19 @@
+package com.graphhopper.jsprit.core.reporting.route;
+
+import java.util.function.Consumer;
+
+import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
+
+public abstract class AbstractDurationPrinterColumn<T extends AbstractDurationPrinterColumn<T>>
+                extends AbstractTimePrinterColumn<T> {
+
+    public AbstractDurationPrinterColumn() {
+        this(null);
+    }
+
+    public AbstractDurationPrinterColumn(Consumer<Builder> decorator) {
+        super(decorator);
+        withFormatter(new HumanReadableDurationFormatter());
+    }
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractHumanReadableTimePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractHumanReadableTimePrinterColumn.java
deleted file mode 100644
index fee26b9cd..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractHumanReadableTimePrinterColumn.java
+++ /dev/null
@@ -1,64 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.route;
-
-import java.time.LocalDate;
-import java.time.LocalDateTime;
-import java.time.LocalTime;
-import java.time.format.DateTimeFormatter;
-import java.time.temporal.ChronoUnit;
-import java.util.function.Consumer;
-
-import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.StringColumnType;
-
-public abstract class AbstractHumanReadableTimePrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, String> {
-
-    private DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("HH:mm:ss");
-    private LocalDateTime origin = LocalDateTime.of(LocalDate.now(), LocalTime.MIDNIGHT);
-    private ChronoUnit unit = ChronoUnit.SECONDS;
-
-    public AbstractHumanReadableTimePrinterColumn() {
-        super();
-    }
-
-    public AbstractHumanReadableTimePrinterColumn withDateFormat(String pattern) {
-        dateFormatter = DateTimeFormatter.ofPattern(pattern);
-        return this;
-    }
-
-    public AbstractHumanReadableTimePrinterColumn withOrigin(LocalDateTime origin) {
-        this.origin = origin;
-        return this;
-    }
-
-    public AbstractHumanReadableTimePrinterColumn withUnit(ChronoUnit unit) {
-        this.unit = unit;
-        return this;
-    }
-
-    public AbstractHumanReadableTimePrinterColumn(Consumer<Builder> decorator) {
-        super(decorator);
-    }
-
-    @Override
-    public ColumnDefinition.Builder getColumnBuilder() {
-        return new ColumnDefinition.Builder(new StringColumnType("-"), getTitle());
-    }
-
-    @Override
-    public String getData(RoutePrinterContext context) {
-        Long v = getTimeValue(context);
-        if (v == null) {
-            return null;
-        } else {
-            LocalDateTime dt = origin.plus(v, unit);
-            return dateFormatter.format(dt);
-        }
-    }
-
-    protected abstract Long getTimeValue(RoutePrinterContext context);
-
-    protected abstract String getTitle();
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractTimePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractTimePrinterColumn.java
index 7231b0463..4ef62e0f0 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractTimePrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractTimePrinterColumn.java
@@ -3,26 +3,58 @@
 import java.util.function.Consumer;
 
 import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.Alignment;
 import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition;
 import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.LongColumnType;
+import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.StringColumnType;
 
-public abstract class AbstractTimePrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, Long> {
+public abstract class AbstractTimePrinterColumn<T extends AbstractTimePrinterColumn<T>>
+extends AbstractPrinterColumn<RoutePrinterContext, String> {
+
+    private HumanReadableTimeFormatter formatter;
+    private boolean humanReadable = false;
 
     public AbstractTimePrinterColumn() {
-        super();
+        this(null);
     }
 
     public AbstractTimePrinterColumn(Consumer<Builder> decorator) {
         super(decorator);
+        formatter = new HumanReadableTimeFormatter();
+    }
+
+    @SuppressWarnings("unchecked")
+    public T withFormatter(HumanReadableTimeFormatter formatter) {
+        this.formatter = formatter;
+        return (T) this;
+    }
+
+    @SuppressWarnings("unchecked")
+    public T asHumanReadable() {
+        this.humanReadable = true;
+        return (T) this;
     }
 
+
     @Override
     public ColumnDefinition.Builder getColumnBuilder() {
-        return new ColumnDefinition.Builder(new LongColumnType("-"), getTitle()).withAlignment(Alignment.RIGHT);
+        return new ColumnDefinition.Builder(new StringColumnType("-"), getTitle() + (humanReadable ? " (H)" : ""));
     }
 
+    @Override
+    public String getData(RoutePrinterContext context) {
+        Long timeValue = getValue(context);
+        if (timeValue == null) {
+            return null;
+        }
+        if (humanReadable) {
+            return formatter.format(timeValue);
+        } else {
+            return ""+timeValue;
+        }
+    }
+
+    protected abstract Long getValue(RoutePrinterContext context);
+
     protected abstract String getTitle();
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractTimeWindowPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractTimeWindowPrinterColumn.java
new file mode 100644
index 000000000..bf8b54f48
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractTimeWindowPrinterColumn.java
@@ -0,0 +1,82 @@
+package com.graphhopper.jsprit.core.reporting.route;
+
+import java.util.Collection;
+import java.util.function.Consumer;
+import java.util.stream.Collectors;
+
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
+import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
+import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition;
+import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
+import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.StringColumnType;
+
+public abstract class AbstractTimeWindowPrinterColumn<T extends AbstractTimeWindowPrinterColumn<T>>
+extends AbstractPrinterColumn<RoutePrinterContext, String> {
+
+    private HumanReadableTimeFormatter formatter;
+    private boolean humanReadable = false;
+
+    public AbstractTimeWindowPrinterColumn() {
+        this(null);
+    }
+
+    public AbstractTimeWindowPrinterColumn(Consumer<Builder> decorator) {
+        super(decorator);
+        formatter = new HumanReadableTimeFormatter();
+    }
+
+    @SuppressWarnings("unchecked")
+    public T withFormatter(HumanReadableTimeFormatter formatter) {
+        this.formatter = formatter;
+        return (T) this;
+    }
+
+    @SuppressWarnings("unchecked")
+    public T asHumanReadable() {
+        this.humanReadable = true;
+        return (T) this;
+    }
+
+
+    @Override
+    public ColumnDefinition.Builder getColumnBuilder() {
+        return new ColumnDefinition.Builder(new StringColumnType("-"), getTitle() + (humanReadable ? " (H)" : ""));
+    }
+
+    @Override
+    public String getData(RoutePrinterContext context) {
+        Collection<TimeWindow> timeWindows = getValue(context);
+        if (timeWindows == null || timeWindows.isEmpty()) {
+            return null;
+        }
+        return timeWindows.stream().map(tw -> formatTimeWindow(tw)).collect(Collectors.joining());
+    }
+
+    protected String formatTimeWindow(TimeWindow tw) {
+        String res = "";
+        if (humanReadable) {
+            res = "[" + formatter.format((long) tw.getStart()) + "-";
+            if (tw.getEnd() == Double.MAX_VALUE) {
+                res += "";
+            } else {
+                res += formatter.format((long) tw.getEnd());
+            }
+            res += "]";
+
+        } else {
+            res = "[" + (long) tw.getStart() + "-";
+            if (tw.getEnd() == Double.MAX_VALUE) {
+                res += "";
+            } else {
+                res += (long) tw.getEnd();
+            }
+            res += "]";
+        }
+        return res;
+    }
+
+    protected abstract Collection<TimeWindow> getValue(RoutePrinterContext context);
+
+    protected abstract String getTitle();
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityDurationPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityDurationPrinterColumn.java
new file mode 100644
index 000000000..a9ba08517
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityDurationPrinterColumn.java
@@ -0,0 +1,40 @@
+package com.graphhopper.jsprit.core.reporting.route;
+
+import java.util.function.Consumer;
+
+import com.graphhopper.jsprit.core.problem.solution.route.activity.Start;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
+import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
+
+public class ActivityDurationPrinterColumn extends AbstractDurationPrinterColumn<ActivityDurationPrinterColumn>
+implements CostAndTimeExtractor {
+
+    private TourActivity prevAct;
+
+    public ActivityDurationPrinterColumn() {
+        super();
+    }
+
+    public ActivityDurationPrinterColumn(Consumer<Builder> decorator) {
+        super(decorator);
+    }
+
+
+    @Override
+    protected String getTitle() {
+        return "duration";
+    }
+
+    @Override
+    public Long getValue(RoutePrinterContext context) {
+        TourActivity act = context.getActivity();
+        if (act instanceof Start) {
+            prevAct = null;
+        }
+        long val = (long) (getTransportTime(context, prevAct) + act.getOperationTime());
+        prevAct = act;
+        return val;
+    }
+
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityOperationTimePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityOperationTimePrinterColumn.java
deleted file mode 100644
index 951877a40..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityOperationTimePrinterColumn.java
+++ /dev/null
@@ -1,32 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.route;
-
-import java.util.function.Consumer;
-
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.IntColumnType;
-
-public class ActivityOperationTimePrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, Integer> {
-
-    public ActivityOperationTimePrinterColumn() {
-        super();
-    }
-
-    public ActivityOperationTimePrinterColumn(Consumer<Builder> decorator) {
-        super(decorator);
-    }
-
-    @Override
-    public ColumnDefinition.Builder getColumnBuilder() {
-        return new ColumnDefinition.Builder(new IntColumnType("-"), "opTime");
-    }
-
-    @Override
-    public Integer getData(RoutePrinterContext context) {
-        TourActivity act = context.getActivity();
-        return (int) act.getOperationTime();
-    }
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ArrivalTimePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ArrivalTimePrinterColumn.java
index 722b3f994..64a62ae15 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ArrivalTimePrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ArrivalTimePrinterColumn.java
@@ -6,7 +6,7 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
 
-public class ArrivalTimePrinterColumn extends AbstractTimePrinterColumn {
+public class ArrivalTimePrinterColumn extends AbstractTimePrinterColumn<ArrivalTimePrinterColumn> {
 
     public ArrivalTimePrinterColumn() {
         super();
@@ -16,13 +16,14 @@ public ArrivalTimePrinterColumn(Consumer<Builder> decorator) {
         super(decorator);
     }
 
+
     @Override
     protected String getTitle() {
         return "arrTime";
     }
 
     @Override
-    public Long getData(RoutePrinterContext context) {
+    public Long getValue(RoutePrinterContext context) {
         TourActivity act = context.getActivity();
         if (act instanceof Start) {
             return null;
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/CostAndTimeExtractor.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/CostAndTimeExtractor.java
new file mode 100644
index 000000000..987ac4c0b
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/CostAndTimeExtractor.java
@@ -0,0 +1,28 @@
+package com.graphhopper.jsprit.core.reporting.route;
+
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
+
+public interface CostAndTimeExtractor {
+
+    default double getActivityCost(RoutePrinterContext context) {
+        return context.getProblem().getActivityCosts().getActivityCost(context.getActivity(),
+                        context.getActivity().getArrTime(), context.getRoute().getDriver(), context.getRoute().getVehicle());
+    }
+
+    default double getTransportCost(RoutePrinterContext context, TourActivity prevAct) {
+        return prevAct == null ? 0d
+                        : context.getProblem().getTransportCosts().getTransportCost(prevAct.getLocation(),
+                                        context.getActivity().getLocation(),
+                                        context.getActivity().getArrTime(), context.getRoute().getDriver(),
+                                        context.getRoute().getVehicle());
+    }
+
+    default double getTransportTime(RoutePrinterContext context, TourActivity prevAct) {
+        return prevAct == null ? 0d
+                        : context.getProblem().getTransportCosts().getTransportTime(prevAct.getLocation(),
+                                        context.getActivity().getLocation(),
+                                        context.getActivity().getArrTime(), context.getRoute().getDriver(),
+                                        context.getRoute().getVehicle());
+    }
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/EndTimePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/EndTimePrinterColumn.java
index 50863f7fe..3e3346cdf 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/EndTimePrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/EndTimePrinterColumn.java
@@ -6,7 +6,7 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
 
-public class EndTimePrinterColumn extends AbstractTimePrinterColumn {
+public class EndTimePrinterColumn extends AbstractTimePrinterColumn<EndTimePrinterColumn> {
 
     public EndTimePrinterColumn() {
         super();
@@ -22,7 +22,7 @@ protected String getTitle() {
     }
 
     @Override
-    public Long getData(RoutePrinterContext context) {
+    public Long getValue(RoutePrinterContext context) {
         TourActivity act = context.getActivity();
         if (act instanceof End) {
             return null;
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/HumanReadableArrivalTimePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/HumanReadableArrivalTimePrinterColumn.java
deleted file mode 100644
index 2c2ca9111..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/HumanReadableArrivalTimePrinterColumn.java
+++ /dev/null
@@ -1,51 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.route;
-
-import java.time.LocalDateTime;
-import java.time.temporal.ChronoUnit;
-import java.util.function.Consumer;
-
-import com.graphhopper.jsprit.core.problem.solution.route.activity.Start;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
-
-public class HumanReadableArrivalTimePrinterColumn extends AbstractHumanReadableTimePrinterColumn {
-
-    public HumanReadableArrivalTimePrinterColumn() {
-        super();
-    }
-
-    public HumanReadableArrivalTimePrinterColumn(Consumer<Builder> decorator) {
-        super(decorator);
-    }
-
-    @Override
-    public HumanReadableArrivalTimePrinterColumn withDateFormat(String pattern) {
-        return (HumanReadableArrivalTimePrinterColumn) super.withDateFormat(pattern);
-    }
-
-    @Override
-    public HumanReadableArrivalTimePrinterColumn withOrigin(LocalDateTime origin) {
-        return (HumanReadableArrivalTimePrinterColumn) super.withOrigin(origin);
-    }
-
-    @Override
-    public HumanReadableArrivalTimePrinterColumn withUnit(ChronoUnit unit) {
-        return (HumanReadableArrivalTimePrinterColumn) super.withUnit(unit);
-    }
-
-    @Override
-    protected Long getTimeValue(RoutePrinterContext context) {
-        TourActivity act = context.getActivity();
-        if (act instanceof Start) {
-            return null;
-        } else {
-            return (long) act.getArrTime();
-        }
-    }
-
-    @Override
-    protected String getTitle() {
-        return "arrival";
-    }
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/HumanReadableDurationFormatter.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/HumanReadableDurationFormatter.java
new file mode 100644
index 000000000..70177bea4
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/HumanReadableDurationFormatter.java
@@ -0,0 +1,28 @@
+package com.graphhopper.jsprit.core.reporting.route;
+
+import java.time.LocalDate;
+import java.time.LocalDateTime;
+import java.time.LocalTime;
+import java.time.format.DateTimeFormatter;
+import java.time.temporal.ChronoUnit;
+
+public class HumanReadableDurationFormatter extends HumanReadableTimeFormatter {
+
+    public static final LocalDateTime DEFAULT_DUARATION_ORIGIN = LocalDateTime.of(LocalDate.now(), LocalTime.MIDNIGHT);
+
+    public HumanReadableDurationFormatter() {
+    }
+
+    public HumanReadableDurationFormatter(ChronoUnit unit) {
+        super(DEFAULT_DUARATION_ORIGIN, unit);
+    }
+
+    public HumanReadableDurationFormatter(DateTimeFormatter dateFormatter) {
+        super(dateFormatter);
+    }
+
+    public HumanReadableDurationFormatter(DateTimeFormatter dateFormatter, ChronoUnit unit) {
+        super(dateFormatter, DEFAULT_DUARATION_ORIGIN, unit);
+    }
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/HumanReadableEndTimePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/HumanReadableEndTimePrinterColumn.java
deleted file mode 100644
index ac5a2622c..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/HumanReadableEndTimePrinterColumn.java
+++ /dev/null
@@ -1,51 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.route;
-
-import java.time.LocalDateTime;
-import java.time.temporal.ChronoUnit;
-import java.util.function.Consumer;
-
-import com.graphhopper.jsprit.core.problem.solution.route.activity.End;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
-
-public class HumanReadableEndTimePrinterColumn extends AbstractHumanReadableTimePrinterColumn {
-
-    public HumanReadableEndTimePrinterColumn() {
-        super();
-    }
-
-    public HumanReadableEndTimePrinterColumn(Consumer<Builder> decorator) {
-        super(decorator);
-    }
-
-    @Override
-    public HumanReadableEndTimePrinterColumn withDateFormat(String pattern) {
-        return (HumanReadableEndTimePrinterColumn) super.withDateFormat(pattern);
-    }
-
-    @Override
-    public HumanReadableEndTimePrinterColumn withOrigin(LocalDateTime origin) {
-        return (HumanReadableEndTimePrinterColumn) super.withOrigin(origin);
-    }
-
-    @Override
-    public HumanReadableEndTimePrinterColumn withUnit(ChronoUnit unit) {
-        return (HumanReadableEndTimePrinterColumn) super.withUnit(unit);
-    }
-
-    @Override
-    protected Long getTimeValue(RoutePrinterContext context) {
-        TourActivity act = context.getActivity();
-        if (act instanceof End) {
-            return null;
-        } else {
-            return (long) act.getEndTime();
-        }
-    }
-
-    @Override
-    protected String getTitle() {
-        return "departure";
-    }
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/HumanReadableTimeFormatter.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/HumanReadableTimeFormatter.java
new file mode 100644
index 000000000..c7ece7636
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/HumanReadableTimeFormatter.java
@@ -0,0 +1,43 @@
+package com.graphhopper.jsprit.core.reporting.route;
+
+import java.time.LocalDate;
+import java.time.LocalDateTime;
+import java.time.LocalTime;
+import java.time.format.DateTimeFormatter;
+import java.time.temporal.ChronoUnit;
+
+public class HumanReadableTimeFormatter {
+
+    public static final LocalDateTime DEFAULT_ORIGIN = LocalDateTime.of(LocalDate.now(), LocalTime.MIDNIGHT);
+
+    private DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("HH:mm:ss");
+    private LocalDateTime origin = DEFAULT_ORIGIN;
+    private ChronoUnit unit = ChronoUnit.SECONDS;
+
+    public HumanReadableTimeFormatter() {
+    }
+
+    public HumanReadableTimeFormatter(LocalDateTime origin, ChronoUnit unit) {
+        this.origin = origin;
+        this.unit = unit;
+    }
+
+    public HumanReadableTimeFormatter(DateTimeFormatter dateFormatter) {
+        this.dateFormatter = dateFormatter;
+    }
+
+    public HumanReadableTimeFormatter(DateTimeFormatter dateFormatter, LocalDateTime origin, ChronoUnit unit) {
+        this.dateFormatter = dateFormatter;
+        this.origin = origin;
+        this.unit = unit;
+    }
+
+    public String format(Long timeValue) {
+        if (timeValue == null) {
+            return null;
+        } else {
+            LocalDateTime dt = origin.plus(timeValue, unit);
+            return dateFormatter.format(dt);
+        }
+    }
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/OperationDurationPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/OperationDurationPrinterColumn.java
new file mode 100644
index 000000000..a17df4323
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/OperationDurationPrinterColumn.java
@@ -0,0 +1,30 @@
+package com.graphhopper.jsprit.core.reporting.route;
+
+import java.util.function.Consumer;
+
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
+import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
+
+public class OperationDurationPrinterColumn extends AbstractDurationPrinterColumn<OperationDurationPrinterColumn> {
+
+    public OperationDurationPrinterColumn() {
+        super();
+    }
+
+    public OperationDurationPrinterColumn(Consumer<Builder> decorator) {
+        super(decorator);
+    }
+
+
+    @Override
+    protected String getTitle() {
+        return "opTime";
+    }
+
+    @Override
+    public Long getValue(RoutePrinterContext context) {
+        TourActivity act = context.getActivity();
+        return (long) act.getOperationTime();
+    }
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/SelectedTimeWindowPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/SelectedTimeWindowPrinterColumn.java
new file mode 100644
index 000000000..c81c1d71b
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/SelectedTimeWindowPrinterColumn.java
@@ -0,0 +1,46 @@
+package com.graphhopper.jsprit.core.reporting.route;
+
+import java.util.Collection;
+import java.util.Collections;
+import java.util.Optional;
+import java.util.function.Consumer;
+
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
+import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
+
+public class SelectedTimeWindowPrinterColumn extends AbstractTimeWindowPrinterColumn<SelectedTimeWindowPrinterColumn> {
+
+    public SelectedTimeWindowPrinterColumn() {
+        super();
+    }
+
+    public SelectedTimeWindowPrinterColumn(Consumer<Builder> decorator) {
+        super(decorator);
+    }
+
+    @Override
+    protected String getTitle() {
+        return "selTimeWindow";
+    }
+
+    @Override
+    protected Collection<TimeWindow> getValue(RoutePrinterContext context) {
+        TourActivity act = context.getActivity();
+        if (act instanceof JobActivity) {
+            Optional<TimeWindow> optTw = ((JobActivity) act).getTimeWindows().stream()
+                            .filter(tw -> tw.contains(act.getEndTime() - act.getOperationTime()))
+                            .findAny();
+            if (optTw.isPresent()) {
+                return Collections.singleton(optTw.get());
+            } else {
+                return null;
+            }
+        } else {
+            return null;
+        }
+    }
+
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/StartTimePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/StartTimePrinterColumn.java
new file mode 100644
index 000000000..eaa897388
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/StartTimePrinterColumn.java
@@ -0,0 +1,35 @@
+package com.graphhopper.jsprit.core.reporting.route;
+
+import java.util.function.Consumer;
+
+import com.graphhopper.jsprit.core.problem.solution.route.activity.End;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
+import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
+
+public class StartTimePrinterColumn extends AbstractTimePrinterColumn<StartTimePrinterColumn> {
+
+    public StartTimePrinterColumn() {
+        super();
+    }
+
+    public StartTimePrinterColumn(Consumer<Builder> decorator) {
+        super(decorator);
+    }
+
+    @Override
+    protected String getTitle() {
+        return "startTime";
+    }
+
+    @Override
+    public Long getValue(RoutePrinterContext context) {
+        TourActivity act = context.getActivity();
+        if (act instanceof End) {
+            return null;
+        } else {
+            return (long) (act.getEndTime() - act.getOperationTime());
+        }
+    }
+
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/TimeWindowsPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/TimeWindowsPrinterColumn.java
new file mode 100644
index 000000000..d6ab143f2
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/TimeWindowsPrinterColumn.java
@@ -0,0 +1,37 @@
+package com.graphhopper.jsprit.core.reporting.route;
+
+import java.util.Collection;
+import java.util.function.Consumer;
+
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
+import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
+
+public class TimeWindowsPrinterColumn extends AbstractTimeWindowPrinterColumn<TimeWindowsPrinterColumn> {
+
+    public TimeWindowsPrinterColumn() {
+        super();
+    }
+
+    public TimeWindowsPrinterColumn(Consumer<Builder> decorator) {
+        super(decorator);
+    }
+
+    @Override
+    protected String getTitle() {
+        return "timeWindows";
+    }
+
+    @Override
+    protected Collection<TimeWindow> getValue(RoutePrinterContext context) {
+        TourActivity act = context.getActivity();
+        if (act instanceof JobActivity) {
+            return ((JobActivity) act).getTimeWindows();
+        } else {
+            return null;
+        }
+    }
+
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/TravelDurationPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/TravelDurationPrinterColumn.java
new file mode 100644
index 000000000..7285e4cf5
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/TravelDurationPrinterColumn.java
@@ -0,0 +1,40 @@
+package com.graphhopper.jsprit.core.reporting.route;
+
+import java.util.function.Consumer;
+
+import com.graphhopper.jsprit.core.problem.solution.route.activity.Start;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
+import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
+
+public class TravelDurationPrinterColumn extends AbstractDurationPrinterColumn<TravelDurationPrinterColumn>
+implements CostAndTimeExtractor {
+
+    private TourActivity prevAct;
+
+    public TravelDurationPrinterColumn() {
+        super();
+    }
+
+    public TravelDurationPrinterColumn(Consumer<Builder> decorator) {
+        super(decorator);
+    }
+
+
+    @Override
+    protected String getTitle() {
+        return "travel";
+    }
+
+    @Override
+    public Long getValue(RoutePrinterContext context) {
+        TourActivity act = context.getActivity();
+        if (act instanceof Start) {
+            prevAct = null;
+        }
+        long val = (long) (getTransportTime(context, prevAct));
+        prevAct = act;
+        return val;
+    }
+
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/WaitingDurationPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/WaitingDurationPrinterColumn.java
new file mode 100644
index 000000000..c7bc670ae
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/WaitingDurationPrinterColumn.java
@@ -0,0 +1,37 @@
+package com.graphhopper.jsprit.core.reporting.route;
+
+import java.util.function.Consumer;
+
+import com.graphhopper.jsprit.core.problem.solution.route.activity.End;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.Start;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
+import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
+
+public class WaitingDurationPrinterColumn extends AbstractDurationPrinterColumn<WaitingDurationPrinterColumn> {
+
+    public WaitingDurationPrinterColumn() {
+        super();
+    }
+
+    public WaitingDurationPrinterColumn(Consumer<Builder> decorator) {
+        super(decorator);
+    }
+
+
+    @Override
+    protected String getTitle() {
+        return "waiting";
+    }
+
+    @Override
+    public Long getValue(RoutePrinterContext context) {
+        TourActivity act = context.getActivity();
+        if (act instanceof Start || act instanceof End) {
+            return null;
+        } else {
+            return (long) (act.getEndTime() - act.getOperationTime() - act.getArrTime());
+        }
+    }
+
+
+}
