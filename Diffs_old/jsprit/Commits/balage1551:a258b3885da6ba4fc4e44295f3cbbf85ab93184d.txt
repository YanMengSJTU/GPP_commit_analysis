diff --git a/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/AlgorithmEventsRecorder.java b/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/AlgorithmEventsRecorder.java
index ad0b60c5e..73908ede1 100644
--- a/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/AlgorithmEventsRecorder.java
+++ b/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/AlgorithmEventsRecorder.java
@@ -18,6 +18,19 @@
 
 package com.graphhopper.jsprit.analysis.toolbox;
 
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.util.Collection;
+import java.util.List;
+import java.util.zip.GZIPOutputStream;
+
+import org.graphstream.graph.Edge;
+import org.graphstream.graph.Graph;
+import org.graphstream.graph.Node;
+import org.graphstream.graph.implementations.MultiGraph;
+import org.graphstream.stream.file.FileSinkDGS;
+
 import com.graphhopper.jsprit.core.algorithm.listener.AlgorithmEndsListener;
 import com.graphhopper.jsprit.core.algorithm.listener.IterationStartsListener;
 import com.graphhopper.jsprit.core.algorithm.recreate.InsertActivity;
@@ -27,6 +40,7 @@
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionStartsListener;
 import com.graphhopper.jsprit.core.algorithm.ruin.listener.RuinListener;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
+import com.graphhopper.jsprit.core.problem.job.AbstractSingleActivityJob;
 import com.graphhopper.jsprit.core.problem.job.Delivery;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.job.Service;
@@ -40,24 +54,12 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.util.Coordinate;
 import com.graphhopper.jsprit.core.util.Solutions;
-import org.graphstream.graph.Edge;
-import org.graphstream.graph.Graph;
-import org.graphstream.graph.Node;
-import org.graphstream.graph.implementations.MultiGraph;
-import org.graphstream.stream.file.FileSinkDGS;
-
-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.util.Collection;
-import java.util.List;
-import java.util.zip.GZIPOutputStream;
 
 /**
  * Writes out what happens when algorithm searches (in graphstream dgs-file).
  */
 public class AlgorithmEventsRecorder
-    implements RuinListener, IterationStartsListener, InsertionStartsListener, BeforeJobInsertionListener, InsertionEndsListener, AlgorithmEndsListener {
+        implements RuinListener, IterationStartsListener, InsertionStartsListener, BeforeJobInsertionListener, InsertionEndsListener, AlgorithmEndsListener {
 
     private boolean renderShipments = false;
 
@@ -328,7 +330,7 @@ private void addJob(Job job) {
         if (job instanceof Service) {
             Service service = (Service) job;
             addNode(service.getId(), service.getLocation().getCoordinate());
-            markService(service);
+            markSingleActivityJob(service);
         } else if (job instanceof Shipment) {
             Shipment shipment = (Shipment) job;
             String fromNodeId = getFromNodeId(shipment);
@@ -348,7 +350,7 @@ private void markShipment(Shipment shipment) {
         markDelivery(getToNodeId(shipment));
     }
 
-    private void markService(Service service) {
+    private void markSingleActivityJob(AbstractSingleActivityJob<?> service) {
         if (service instanceof Delivery) {
             markDelivery(service.getId());
         } else {
@@ -518,7 +520,7 @@ private void handleVehicleSwitch(InsertionData data, VehicleRoute route) {
 
     private void markInserted(Job job) {
         if (job instanceof Service) {
-            markService((Service) job);
+            markSingleActivityJob((Service) job);
         } else {
             markShipment((Shipment) job);
         }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractSingleActivityJob.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractSingleActivityJob.java
new file mode 100644
index 000000000..6b75640d9
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractSingleActivityJob.java
@@ -0,0 +1,284 @@
+/*
+ * Licensed to GraphHopper GmbH under one or more contributor
+ * license agreements. See the NOTICE file distributed with this work for
+ * additional information regarding copyright ownership.
+ *
+ * GraphHopper GmbH licenses this file to you under the Apache License,
+ * Version 2.0 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.graphhopper.jsprit.core.problem.job;
+
+import java.util.Collection;
+
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindowsImpl;
+
+/**
+ * Service implementation of a job.
+ * <p>
+ * <p>
+ * <p>Note that two services are equal if they have the same id.
+ *
+ * @author schroeder
+ */
+public abstract class AbstractSingleActivityJob<A extends JobActivity> extends AbstractJob {
+
+    /**
+     * Builder that builds a service.
+     *
+     * @author schroeder
+     */
+    public static abstract class BuilderBase<T extends AbstractSingleActivityJob<?>, B extends BuilderBase<T, B>>
+    extends JobBuilder<T, B> {
+
+        protected String type = "service";
+
+        protected double serviceTime;
+
+        protected Location location;
+
+        protected TimeWindowsImpl timeWindows;
+
+        public BuilderBase(String id) {
+            super(id);
+            this.id = id;
+            timeWindows = new TimeWindowsImpl();
+        }
+
+        /**
+         * Protected method to set the type-name of the service.
+         * <p>
+         * <p>Currently there are {@link AbstractSingleActivityJob}, {@link Pickup} and {@link Delivery}.
+         *
+         * @param name the name of service
+         * @return the builder
+         */
+        @SuppressWarnings("unchecked")
+        protected B setType(String name) {
+            type = name;
+            return (B) this;
+        }
+
+        /**
+         * Sets location
+         *
+         * @param location location
+         * @return builder
+         */
+        @SuppressWarnings("unchecked")
+        public B setLocation(Location location) {
+            this.location = location;
+            return (B) this;
+        }
+
+        /**
+         * Sets the serviceTime of this service.
+         * <p>
+         * <p>It is understood as time that a service or its implied activity takes at the service-location, for instance
+         * to unload goods.
+         *
+         * @param serviceTime the service time / duration of service to be set
+         * @return builder
+         * @throws IllegalArgumentException if serviceTime < 0
+         */
+        @SuppressWarnings("unchecked")
+        public B setServiceTime(double serviceTime) {
+            if (serviceTime < 0) {
+                throw new IllegalArgumentException("serviceTime must be greater than or equal to zero");
+            }
+            this.serviceTime = serviceTime;
+            return (B) this;
+        }
+
+        /**
+         * Adds capacity dimension.
+         *
+         * @param dimensionIndex the dimension index of the capacity value
+         * @param dimensionValue the capacity value
+         * @return the builder
+         * @throws IllegalArgumentException if dimensionValue < 0
+         */
+        @Override
+        @SuppressWarnings("unchecked")
+        public B addSizeDimension(int dimensionIndex, int dimensionValue) {
+            if (dimensionValue < 0) {
+                throw new IllegalArgumentException("capacity value cannot be negative");
+            }
+            capacityBuilder.addDimension(dimensionIndex, dimensionValue);
+            return (B) this;
+        }
+
+        @SuppressWarnings("unchecked")
+        public B setTimeWindow(TimeWindow tw) {
+            if (tw == null) {
+                throw new IllegalArgumentException("time-window arg must not be null");
+            }
+            timeWindows = new TimeWindowsImpl();
+            timeWindows.add(tw);
+            return (B) this;
+        }
+
+        @SuppressWarnings("unchecked")
+        public B addTimeWindow(TimeWindow timeWindow) {
+            if (timeWindow == null) {
+                throw new IllegalArgumentException("time-window arg must not be null");
+            }
+            timeWindows.add(timeWindow);
+            return (B) this;
+        }
+
+        public B addTimeWindow(double earliest, double latest) {
+            return addTimeWindow(TimeWindow.newInstance(earliest, latest));
+        }
+
+        /**
+         * Builds the service.
+         * <p>
+         * <p>
+         * The implementation of the builder <b>may</b> call the function {@linkplain #preProcess()} prior creating the
+         * instant and <b>MUST</b> call the {@linkplain #postProcess(Service)} method after the instance is constructed:
+         * <p>
+         * <pre>
+         *    &#64;Override
+         *    public Service build() {
+         *        [...]
+         *        Service service = new Service(this);
+         *        postProcess(service);
+         *        return service;
+         *    }
+         * </pre>
+         * <p>
+         * </p>
+         *
+         * @return {@link AbstractSingleActivityJob}
+         * @throws IllegalArgumentException if neither locationId nor coordinate is set.
+         */
+
+        @Override
+        protected void validate() {
+            if (location == null) {
+                throw new IllegalArgumentException("location is missing");
+            }
+            if (timeWindows.isEmpty()) {
+                timeWindows.add(TimeWindow.ETERNITY);
+            }
+        }
+
+        public String getType() {
+            return type;
+        }
+
+        public double getServiceTime() {
+            return serviceTime;
+        }
+
+        public Location getLocation() {
+            return location;
+        }
+
+        public TimeWindowsImpl getTimeWindows() {
+            return timeWindows;
+        }
+    }
+
+    private String type;
+
+    AbstractSingleActivityJob(BuilderBase<? extends AbstractSingleActivityJob<?>, ?> builder) {
+        super(builder);
+        type = builder.type;
+    }
+
+    protected abstract A createActivity(
+                    BuilderBase<? extends AbstractSingleActivityJob<?>, ?> builder);
+
+
+    @Override
+    protected final void createActivities(JobBuilder<?, ?> builder) {
+        @SuppressWarnings("unchecked")
+        BuilderBase<? extends AbstractSingleActivityJob<?>, ?> serviceBuilder = (BuilderBase<? extends AbstractSingleActivityJob<?>, ?>) builder;
+        JobActivityList list = new SequentialJobActivityList(this);
+        list.addActivity(createActivity(serviceBuilder));
+        setActivities(list);
+    }
+
+    @SuppressWarnings("unchecked")
+    public A getActivity() {
+        return (A) getActivityList().getAll().get(0);
+    }
+
+    /**
+     * Returns location.
+     *
+     * @return location
+     */
+    @Deprecated
+    public Location getLocation() {
+        return getActivity().getLocation();
+    }
+
+
+    /**
+     * Returns the service-time/duration a service takes at service-location.
+     *
+     * @return service duration
+     */
+    @Deprecated
+    public double getServiceDuration() {
+        return getActivity().getOperationTime();
+    }
+
+    /**
+     * Returns the time-window a service(-operation) is allowed to start.
+     * It is recommended to use getTimeWindows() instead. If you still use this, it returns the first time window of getTimeWindows() collection.
+     *
+     * @return time window
+     */
+    @Deprecated
+    public TimeWindow getTimeWindow() {
+        return getTimeWindows().iterator().next();
+    }
+
+    @Deprecated
+    public Collection<TimeWindow> getServiceTimeWindows() {
+        return getActivity().getTimeWindows();
+    }
+
+    /**
+     * @return the name
+     */
+    public String getType() {
+        return type;
+    }
+
+    /**
+     * Returns a string with the service's attributes.
+     * <p>
+     * <p>String is built as follows: [attr1=val1][attr2=val2]...
+     */
+    @Override
+    public String toString() {
+        return "[id=" + getId() + "][name=" + getName() + "][type=" + type + "][activity="
+                        + getActivity() + "]";
+    }
+
+
+    @Override
+    @Deprecated
+    public SizeDimension getSize() {
+        return getActivity().getLoadChange();
+    }
+
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Break.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Break.java
index 54d380073..0ee082da6 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Break.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Break.java
@@ -26,12 +26,12 @@
  *
  * @author schroeder
  */
-public class Break extends Service implements InternalJobMarker {
+public class Break extends AbstractSingleActivityJob<BreakActivity> implements InternalJobMarker {
 
     public static final class Builder extends Service.BuilderBase<Break, Builder> {
 
         private static final Location VARIABLE_LOCATION = Location
-            .newInstance("@@@VARIABLE_LOCATION");
+                        .newInstance("@@@VARIABLE_LOCATION");
 
         public Builder(String id) {
             super(id);
@@ -68,11 +68,11 @@ protected Break createInstance() {
         variableLocation = (builder.getLocation() == null);
     }
 
+
     @Override
-    protected void createActivities(JobBuilder<?, ?> builder) {
-        JobActivityList list = new SequentialJobActivityList(this);
-        list.addActivity(BreakActivity.newInstance(this, (Builder) builder));
-        setActivities(list);
+    protected BreakActivity createActivity(
+                    BuilderBase<? extends AbstractSingleActivityJob<?>, ?> builder) {
+        return BreakActivity.newInstance(this, (Builder) builder);
     }
 
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Delivery.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Delivery.java
index 17fc09c5b..f27e11d1c 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Delivery.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Delivery.java
@@ -26,9 +26,10 @@
  *
  * @author schroeder
  */
-public class Delivery extends Service {
+public class Delivery extends AbstractSingleActivityJob<DeliveryActivityNEW> {
 
-    public static final class Builder extends Service.BuilderBase<Delivery, Builder> {
+    public static final class Builder
+    extends AbstractSingleActivityJob.BuilderBase<Delivery, Builder> {
 
         public Builder(String id) {
             super(id);
@@ -49,15 +50,19 @@ protected Delivery createInstance() {
         super(builder);
     }
 
+
     @Override
-    protected void createActivities(JobBuilder<?, ?> builder) {
-        JobActivityList list = new SequentialJobActivityList(this);
+    protected DeliveryActivityNEW createActivity(
+                    BuilderBase<? extends AbstractSingleActivityJob<?>, ?> builder) {
         if (TheBigRedButton.PUSHED) {
-            list.addActivity(new DeliveryActivityNEW(this, (Builder) builder));
+            return new DeliveryActivityNEW(this, builder.type, builder.location,
+                            builder.serviceTime,
+                            builder.getCapacity(), builder.timeWindows.getTimeWindows());
         } else {
-            list.addActivity(new DeliverServiceDEPRECATED(this, (Builder) builder));
+            return new DeliverServiceDEPRECATED(this, builder.type, builder.location,
+                            builder.serviceTime,
+                            builder.getCapacity(), builder.timeWindows.getTimeWindows());
         }
-        setActivities(list);
     }
 
     @Override
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Pickup.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Pickup.java
index afa88f061..5091cdd1c 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Pickup.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Pickup.java
@@ -25,9 +25,10 @@
  *
  * @author schroeder
  */
-public class Pickup extends Service {
+public class Pickup extends AbstractSingleActivityJob<PickupActivityNEW> {
 
-    public static final class Builder extends Service.BuilderBase<Pickup, Builder> {
+    public static final class Builder
+    extends AbstractSingleActivityJob.BuilderBase<Pickup, Builder> {
 
         public Builder(String id) {
             super(id);
@@ -49,14 +50,17 @@ protected Pickup createInstance() {
     }
 
     @Override
-    protected void createActivities(JobBuilder<?, ?> builder) {
-        JobActivityList list = new SequentialJobActivityList(this);
+    protected PickupActivityNEW createActivity(
+                    AbstractSingleActivityJob.BuilderBase<? extends AbstractSingleActivityJob<?>, ?> builder) {
         if (TheBigRedButton.PUSHED) {
-            list.addActivity(new PickupActivityNEW(this, (Builder) builder));
+            return new PickupActivityNEW(this, builder.type, builder.location, builder.serviceTime,
+                            builder.getCapacity(), builder.timeWindows.getTimeWindows());
         } else {
-            list.addActivity(new PickupServiceDEPRECATED(this, (Builder) builder));
+            return new PickupServiceDEPRECATED(this, builder.type, builder.location,
+                            builder.serviceTime,
+                            builder.getCapacity(), builder.timeWindows.getTimeWindows());
         }
-        setActivities(list);
     }
 
+
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java
index 534e8f931..a3a75a6ec 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java
@@ -17,15 +17,7 @@
  */
 package com.graphhopper.jsprit.core.problem.job;
 
-import java.util.Collection;
-
-import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.SizeDimension;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupServiceDEPRECATED;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.ServiceActivityNEW;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindowsImpl;
 
 /**
  * Service implementation of a job.
@@ -35,269 +27,41 @@
  *
  * @author schroeder
  */
-public class Service extends AbstractJob {
-
-    /**
-     * Builder that builds a service.
-     *
-     * @author schroeder
-     */
-    public static abstract class BuilderBase<T extends Service, B extends BuilderBase<T, B>>
-    extends JobBuilder<T, B> {
-
-        protected String type = "service";
-
-        protected double serviceTime;
+public class Service extends AbstractSingleActivityJob<ServiceActivityNEW> {
 
-        protected Location location;
 
-        protected TimeWindowsImpl timeWindows;
+    public static final class Builder
+    extends AbstractSingleActivityJob.BuilderBase<Service, Builder> {
 
-        public BuilderBase(String id) {
+        public Builder(String id) {
             super(id);
-            this.id = id;
-            timeWindows = new TimeWindowsImpl();
-        }
-
-        /**
-         * Protected method to set the type-name of the service.
-         * <p>
-         * <p>Currently there are {@link Service}, {@link Pickup} and {@link Delivery}.
-         *
-         * @param name the name of service
-         * @return the builder
-         */
-        @SuppressWarnings("unchecked")
-        protected B setType(String name) {
-            type = name;
-            return (B) this;
-        }
-
-        /**
-         * Sets location
-         *
-         * @param location location
-         * @return builder
-         */
-        @SuppressWarnings("unchecked")
-        public B setLocation(Location location) {
-            this.location = location;
-            return (B) this;
-        }
-
-        /**
-         * Sets the serviceTime of this service.
-         * <p>
-         * <p>It is understood as time that a service or its implied activity takes at the service-location, for instance
-         * to unload goods.
-         *
-         * @param serviceTime the service time / duration of service to be set
-         * @return builder
-         * @throws IllegalArgumentException if serviceTime < 0
-         */
-        @SuppressWarnings("unchecked")
-        public B setServiceTime(double serviceTime) {
-            if (serviceTime < 0) {
-                throw new IllegalArgumentException("serviceTime must be greater than or equal to zero");
-            }
-            this.serviceTime = serviceTime;
-            return (B) this;
-        }
-
-        /**
-         * Adds capacity dimension.
-         *
-         * @param dimensionIndex the dimension index of the capacity value
-         * @param dimensionValue the capacity value
-         * @return the builder
-         * @throws IllegalArgumentException if dimensionValue < 0
-         */
-        @Override
-        @SuppressWarnings("unchecked")
-        public B addSizeDimension(int dimensionIndex, int dimensionValue) {
-            if (dimensionValue < 0) {
-                throw new IllegalArgumentException("capacity value cannot be negative");
-            }
-            capacityBuilder.addDimension(dimensionIndex, dimensionValue);
-            return (B) this;
-        }
-
-        @SuppressWarnings("unchecked")
-        public B setTimeWindow(TimeWindow tw) {
-            if (tw == null) {
-                throw new IllegalArgumentException("time-window arg must not be null");
-            }
-            timeWindows = new TimeWindowsImpl();
-            timeWindows.add(tw);
-            return (B) this;
-        }
-
-        @SuppressWarnings("unchecked")
-        public B addTimeWindow(TimeWindow timeWindow) {
-            if (timeWindow == null) {
-                throw new IllegalArgumentException("time-window arg must not be null");
-            }
-            timeWindows.add(timeWindow);
-            return (B) this;
-        }
-
-        public B addTimeWindow(double earliest, double latest) {
-            return addTimeWindow(TimeWindow.newInstance(earliest, latest));
-        }
-
-        /**
-         * Builds the service.
-         * <p>
-         * <p>
-         * The implementation of the builder <b>may</b> call the function {@linkplain #preProcess()} prior creating the
-         * instant and <b>MUST</b> call the {@linkplain #postProcess(Service)} method after the instance is constructed:
-         * <p>
-         * <pre>
-         *    &#64;Override
-         *    public Service build() {
-         *        [...]
-         *        Service service = new Service(this);
-         *        postProcess(service);
-         *        return service;
-         *    }
-         * </pre>
-         * <p>
-         * </p>
-         *
-         * @return {@link Service}
-         * @throws IllegalArgumentException if neither locationId nor coordinate is set.
-         */
-
-        @Override
-        protected void validate() {
-            if (location == null) {
-                throw new IllegalArgumentException("location is missing");
-            }
-            if (timeWindows.isEmpty()) {
-                timeWindows.add(TimeWindow.ETERNITY);
-            }
-        }
-
-        public String getType() {
-            return type;
-        }
-
-        public double getServiceTime() {
-            return serviceTime;
-        }
-
-        public Location getLocation() {
-            return location;
-        }
-
-        public TimeWindowsImpl getTimeWindows() {
-            return timeWindows;
+            setType("pickup");
         }
-    }
-
-    public static class Builder extends BuilderBase<Service, Builder> {
 
         public static Builder newInstance(String id) {
             return new Builder(id);
         }
 
-        public Builder(String id) {
-            super(id);
-        }
-
         @Override
         protected Service createInstance() {
             return new Service(this);
         }
     }
 
-
-    private String type;
-
-    Service(BuilderBase<? extends Service, ?> builder) {
+    Service(Builder builder) {
         super(builder);
-        type = builder.type;
     }
 
-
     @Override
-    protected void createActivities(JobBuilder<?, ?> builder) {
-        Builder serviceBuilder = (Builder) builder;
-        JobActivityList list = new SequentialJobActivityList(this);
+    protected ServiceActivityNEW createActivity(
+                    AbstractSingleActivityJob.BuilderBase<? extends AbstractSingleActivityJob<?>, ?> builder) {
         if (TheBigRedButton.PUSHED) {
-            list.addActivity(new ServiceActivityNEW(this, serviceBuilder));
+            return new ServiceActivityNEW(this, builder.type, builder.location, builder.serviceTime,
+                            builder.getCapacity(), builder.timeWindows.getTimeWindows());
         } else {
-            list.addActivity(new PickupServiceDEPRECATED(this, serviceBuilder));
+            return new ServiceActivityNEW(this, builder.type, builder.location, builder.serviceTime,
+                            builder.getCapacity(), builder.timeWindows.getTimeWindows());
         }
-        setActivities(list);
-    }
-
-    public JobActivity getServiceActivity() {
-        return getActivityList().getAll().get(0);
     }
 
-    /**
-     * Returns location.
-     *
-     * @return location
-     */
-    @Deprecated
-    public Location getLocation() {
-        return getServiceActivity().getLocation();
-    }
-
-
-    /**
-     * Returns the service-time/duration a service takes at service-location.
-     *
-     * @return service duration
-     */
-    @Deprecated
-    public double getServiceDuration() {
-        return getServiceActivity().getOperationTime();
-    }
-
-    /**
-     * Returns the time-window a service(-operation) is allowed to start.
-     * It is recommended to use getTimeWindows() instead. If you still use this, it returns the first time window of getTimeWindows() collection.
-     *
-     * @return time window
-     */
-    @Deprecated
-    public TimeWindow getTimeWindow() {
-        return getServiceTimeWindows().iterator().next();
-    }
-
-    @Deprecated
-    public Collection<TimeWindow> getServiceTimeWindows() {
-        return getServiceActivity().getTimeWindows();
-    }
-
-    /**
-     * @return the name
-     */
-    public String getType() {
-        return type;
-    }
-
-    /**
-     * Returns a string with the service's attributes.
-     * <p>
-     * <p>String is built as follows: [attr1=val1][attr2=val2]...
-     */
-    @Override
-    public String toString() {
-        return "[id=" + getId() + "][name=" + getName() + "][type=" + type + "][location="
-                        + getLocation() + "][capacity=" + getSize() + "][serviceTime="
-                        + getServiceDuration() + "][timeWindow=" + getTimeWindows() + "]";
-    }
-
-
-    @Override
-    @Deprecated
-    public SizeDimension getSize() {
-        return getServiceActivity().getLoadChange();
-    }
-
-
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRoute.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRoute.java
index 777407cc9..c451c68c2 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRoute.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRoute.java
@@ -17,17 +17,31 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route;
 
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
 import com.graphhopper.jsprit.core.problem.JobActivityFactory;
 import com.graphhopper.jsprit.core.problem.SimpleJobActivityFactory;
 import com.graphhopper.jsprit.core.problem.driver.Driver;
 import com.graphhopper.jsprit.core.problem.driver.DriverImpl;
-import com.graphhopper.jsprit.core.problem.job.*;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.*;
+import com.graphhopper.jsprit.core.problem.job.AbstractSingleActivityJob;
+import com.graphhopper.jsprit.core.problem.job.Break;
+import com.graphhopper.jsprit.core.problem.job.Delivery;
+import com.graphhopper.jsprit.core.problem.job.Pickup;
+import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.End;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.Start;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivities;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 
-import java.util.*;
-
 /**
  * Contains the tour, i.e. a number of activities, a vehicle servicing the tour and a driver.
  *
@@ -173,11 +187,28 @@ public Builder setDepartureTime(double departureTime) {
          * @return this builder
          * @throws IllegalArgumentException if service is null
          */
-        public Builder addService(Service service) {
-            return addService(service, service.getTimeWindow());
+        public Builder addService(AbstractSingleActivityJob<?> service) {
+            if (service == null) {
+                throw new IllegalArgumentException("service must not be null");
+            }
+            return addSingleActivityJob(service);
         }
 
-        public Builder addService(Service service, TimeWindow timeWindow) {
+        public Builder addService(AbstractSingleActivityJob<?> service,
+                        TimeWindow timeWindow) {
+            if (service == null) {
+                throw new IllegalArgumentException("service must not be null");
+            }
+            return addService(service, timeWindow);
+        }
+
+        private Builder addSingleActivityJob(AbstractSingleActivityJob<?> service) {
+            return addSingleActivityJob(service, service.getActivity().getTimeWindows().iterator().next());
+        }
+
+
+        private Builder addSingleActivityJob(AbstractSingleActivityJob<?> service,
+                        TimeWindow timeWindow) {
             if (service == null) {
                 throw new IllegalArgumentException("service must not be null");
             }
@@ -193,14 +224,14 @@ public Builder addBreak(Break currentbreak) {
             if (currentbreak == null) {
                 throw new IllegalArgumentException("break must not be null");
             }
-            return addBreak(currentbreak, currentbreak.getTimeWindow());
+            return addSingleActivityJob(currentbreak);
         }
 
         public Builder addBreak(Break currentbreak, TimeWindow timeWindow) {
             if (currentbreak == null) {
                 throw new IllegalArgumentException("break must not be null");
             }
-            return addService(currentbreak, timeWindow);
+            return addSingleActivityJob(currentbreak, timeWindow);
         }
 
         /**
@@ -220,7 +251,7 @@ public Builder addPickup(Pickup pickup, TimeWindow timeWindow) {
             if (pickup == null) {
                 throw new IllegalArgumentException("pickup must not be null");
             }
-            return addService(pickup, timeWindow);
+            return addSingleActivityJob(pickup, timeWindow);
         }
 
         /**
@@ -240,7 +271,7 @@ public Builder addDelivery(Delivery delivery, TimeWindow timeWindow) {
             if (delivery == null) {
                 throw new IllegalArgumentException("delivery must not be null");
             }
-            return addService(delivery, timeWindow);
+            return addSingleActivityJob(delivery, timeWindow);
         }
 
         /**
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverServiceDEPRECATED.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverServiceDEPRECATED.java
index 09e36a8fa..be9393265 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverServiceDEPRECATED.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverServiceDEPRECATED.java
@@ -17,29 +17,25 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
+import java.util.Collection;
+
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
+import com.graphhopper.jsprit.core.problem.job.AbstractJob;
 import com.graphhopper.jsprit.core.problem.job.Delivery;
-import com.graphhopper.jsprit.core.problem.job.Service;
-import com.graphhopper.jsprit.core.problem.job.Service.BuilderBase;
 
 public final class DeliverServiceDEPRECATED extends DeliveryActivityNEW {
 
-    public DeliverServiceDEPRECATED(Service service, BuilderBase<? extends Service, ?> builder) {
-        super(service, builder.getType(), builder.getLocation(),
-            builder.getServiceTime(),
-            builder.getCapacity().invert(),
-            builder.getTimeWindows().getTimeWindows());
-    }
-
-    public DeliverServiceDEPRECATED(Delivery delivery) {
-        super(delivery, delivery.getType(), delivery.getLocation(), delivery.getServiceDuration(),
-            delivery.getSize().invert(), delivery.getServiceTimeWindows());
+    public DeliverServiceDEPRECATED(AbstractJob job, String name, Location location,
+                    double operationTime, SizeDimension capacity,
+                    Collection<TimeWindow> timeWindows) {
+        super(job, name, location, operationTime, capacity, timeWindows);
     }
 
     public DeliverServiceDEPRECATED(DeliverServiceDEPRECATED sourceActivity) {
         super(sourceActivity);
     }
 
-
     @Override
     public Delivery getJob() {
         return (Delivery) super.getJob();
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverShipmentDEPRECATED.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverShipmentDEPRECATED.java
index 99263c238..dfbba2952 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverShipmentDEPRECATED.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverShipmentDEPRECATED.java
@@ -35,12 +35,4 @@ public DeliverShipmentDEPRECATED(DeliverShipmentDEPRECATED sourceActivity) {
         super(sourceActivity);
     }
 
-    // Only for testing
-    @Deprecated
-    public DeliverShipmentDEPRECATED(Shipment s) {
-        super(s, NAME, s.getDeliveryLocation(), s.getDeliveryServiceTime(),
-            s.getSize().invert(),
-            s.getDeliveryTimeWindows());
-    }
-
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliveryActivityNEW.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliveryActivityNEW.java
index 172f179f5..342bc7d69 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliveryActivityNEW.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliveryActivityNEW.java
@@ -22,7 +22,6 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.job.AbstractJob;
-import com.graphhopper.jsprit.core.problem.job.Service;
 
 public class DeliveryActivityNEW extends JobActivity {
 
@@ -36,12 +35,4 @@ public DeliveryActivityNEW(DeliveryActivityNEW sourceActivity) {
         super(sourceActivity);
     }
 
-    public DeliveryActivityNEW(AbstractJob service,
-                    Service.BuilderBase<? extends Service, ?> serviceBuilder) {
-        this(service, serviceBuilder.getType(), serviceBuilder.getLocation(),
-                        serviceBuilder.getServiceTime(),
-                        serviceBuilder.getCapacity(),
-                        serviceBuilder.getTimeWindows().getTimeWindows());
-    }
-
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivityNEW.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivityNEW.java
index 1e8c36324..24b3a8a92 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivityNEW.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivityNEW.java
@@ -22,7 +22,6 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.job.AbstractJob;
-import com.graphhopper.jsprit.core.problem.job.Service;
 
 public class PickupActivityNEW extends JobActivity {
 
@@ -35,12 +34,4 @@ public PickupActivityNEW(PickupActivityNEW sourceActivity) {
         super(sourceActivity);
     }
 
-    public PickupActivityNEW(AbstractJob service,
-                    Service.BuilderBase<? extends Service, ?> serviceBuilder) {
-        this(service, serviceBuilder.getType(), serviceBuilder.getLocation(),
-                        serviceBuilder.getServiceTime(),
-                        serviceBuilder.getCapacity(),
-                        serviceBuilder.getTimeWindows().getTimeWindows());
-    }
-
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupServiceDEPRECATED.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupServiceDEPRECATED.java
index e9688333f..383f4477a 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupServiceDEPRECATED.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupServiceDEPRECATED.java
@@ -17,33 +17,30 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.job.Service;
+import java.util.Collection;
 
-public final class PickupServiceDEPRECATED extends PickupActivityNEW {
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
+import com.graphhopper.jsprit.core.problem.job.AbstractJob;
+import com.graphhopper.jsprit.core.problem.job.AbstractSingleActivityJob;
 
-    public PickupServiceDEPRECATED(Service service,
-                    Service.BuilderBase<? extends Service, ?> builder) {
-        super(service, builder.getType(), builder.getLocation(),
-                        builder.getServiceTime(),
-                        builder.getCapacity(),
-                        builder.getTimeWindows().getTimeWindows());
-    }
+public final class PickupServiceDEPRECATED extends PickupActivityNEW {
 
 
     public PickupServiceDEPRECATED(PickupServiceDEPRECATED sourceActivity) {
         super(sourceActivity);
     }
 
-    @Deprecated
-    public PickupServiceDEPRECATED(Service service) {
-        super(service, service.getType(), service.getLocation(), service.getServiceDuration(),
-                        service.getSize(), service.getServiceTimeWindows());
+    public PickupServiceDEPRECATED(AbstractJob job, String name, Location location,
+                    double operationTime, SizeDimension capacity,
+                    Collection<TimeWindow> timeWindows) {
+        super(job, name, location, operationTime, capacity, timeWindows);
     }
 
-
+    @SuppressWarnings("unchecked")
     @Override
-    public Service getJob() {
-        return (Service) super.getJob();
+    public AbstractSingleActivityJob<PickupActivityNEW> getJob() {
+        return (AbstractSingleActivityJob<PickupActivityNEW>) super.getJob();
     }
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupShipmentDEPRECATED.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupShipmentDEPRECATED.java
index ce0a7d1f0..c637928be 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupShipmentDEPRECATED.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupShipmentDEPRECATED.java
@@ -34,12 +34,4 @@ public PickupShipmentDEPRECATED(PickupShipmentDEPRECATED sourceActivity) {
         super(sourceActivity);
     }
 
-    // Only for testing
-    @Deprecated
-    public PickupShipmentDEPRECATED(Shipment s) {
-        super(s, NAME, s.getPickupLocation(), s.getPickupServiceTime(), s.getSize(),
-            s.getPickupTimeWindows());
-    }
-
-
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityNEW.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityNEW.java
index 79bfe15df..c27471844 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityNEW.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityNEW.java
@@ -22,13 +22,12 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.job.AbstractJob;
-import com.graphhopper.jsprit.core.problem.job.Service;
 
 public class ServiceActivityNEW extends JobActivity {
 
-    public ServiceActivityNEW(AbstractJob job, String name, Location location, double operationTime,
+    public ServiceActivityNEW(AbstractJob job, String type, Location location, double operationTime,
                     SizeDimension capacity, Collection<TimeWindow> timeWindows) {
-        super(job, name, location, operationTime, capacity, timeWindows);
+        super(job, type, location, operationTime, capacity, timeWindows);
     }
 
 
@@ -36,18 +35,4 @@ public ServiceActivityNEW(ServiceActivityNEW sourceActivity) {
         super(sourceActivity);
     }
 
-    public ServiceActivityNEW(Service service,
-                    Service.BuilderBase<? extends Service, ?> serviceBuilder) {
-        this(service, serviceBuilder.getType(), serviceBuilder.getLocation(),
-                        serviceBuilder.getServiceTime(),
-                        serviceBuilder.getCapacity(),
-                        serviceBuilder.getTimeWindows().getTimeWindows());
-    }
-
-    // NOTE: Only for testing purposes
-    public static ServiceActivityNEW newInstance(Service service) {
-        return new ServiceActivityNEW(service, service.getName(), service.getLocation(),
-                        service.getServiceDuration(), service.getSize(), service.getTimeWindows());
-    }
-
 }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ShipmentInsertionCalculatorTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ShipmentInsertionCalculatorTest.java
index c94566608..bf12e2319 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ShipmentInsertionCalculatorTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ShipmentInsertionCalculatorTest.java
@@ -290,7 +290,7 @@ public void whenInsertingServiceWhileNoCapIsAvailable_itMustReturnNoInsertionDat
 
         JobActivityFactory activityFactory = mock(JobActivityFactory.class);
         List<JobActivity> activities = new ArrayList<>();
-        activities.add(service.getServiceActivity());
+        activities.add(service.getActivity());
         when(activityFactory.createActivities(service)).thenReturn(activities);
         insertionCalculator.setJobActivityFactory(activityFactory);
         serviceInsertionCalc.setJobActivityFactory(activityFactory);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdateVehicleDependentTimeWindowTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdateVehicleDependentTimeWindowTest.java
index f9404a58a..59bf7790a 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdateVehicleDependentTimeWindowTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdateVehicleDependentTimeWindowTest.java
@@ -18,6 +18,19 @@
 
 package com.graphhopper.jsprit.core.algorithm.state;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Collections;
+
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.problem.CopyJobActivityFactory;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
@@ -34,16 +47,6 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.util.Coordinate;
 import com.graphhopper.jsprit.core.util.CostFactory;
-import org.junit.Assert;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Collections;
-
-import static org.junit.Assert.*;
 
 /**
  * unit tests to test vehicle dependent time window updater
@@ -104,8 +107,8 @@ public void doBefore() {
         vrp = vrpBuilder.build();
 
         route = VehicleRoute.Builder.newInstance(vehicle).setJobActivityFactory(new CopyJobActivityFactory())
-            .addService(service).addService(service2)
-            .addService(service3).build();
+                        .addService(service).addService(service2)
+                        .addService(service3).build();
 
 
         stateManager = new StateManager(vrp);
@@ -139,68 +142,68 @@ public void whenSwitchIsNotAllowed_itShouldCalOnlyStatesOfCurrentVehicle() {
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct3() {
         assertEquals(70., stateManager.getActivityState(route.getActivities().get(2), vehicle,
-            InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+                        InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
 
     }
 
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct3_v2() {
         assertEquals(70., stateManager.getActivityState(route.getActivities().get(2), vehicle,
-            InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+                        InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct3WithVehicle2() {
         assertEquals(30., stateManager.getActivityState(route.getActivities().get(2), vehicle2,
-            InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+                        InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct3WithVehicle3() {
         assertEquals(90., stateManager.getActivityState(route.getActivities().get(2), vehicle3,
-            InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+                        InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct2() {
         assertEquals(60., stateManager.getActivityState(route.getActivities().get(1), vehicle,
-            InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+                        InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct2_v2() {
         assertEquals(60., stateManager.getActivityState(route.getActivities().get(1), vehicle,
-            InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+                        InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct2WithVehicle2() {
         assertEquals(20., stateManager.getActivityState(route.getActivities().get(1), vehicle2,
-            InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+                        InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct2WithVehicle3() {
         assertEquals(80., stateManager.getActivityState(route.getActivities().get(1), vehicle3,
-            InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+                        InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct2WithEquivalentOfVehicle3() {
         assertEquals(80., stateManager.getActivityState(route.getActivities().get(1), equivalentOf3,
-            InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+                        InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct1WithVehicle2() {
         assertEquals(10., stateManager.getActivityState(route.getActivities().get(0), vehicle2,
-            InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+                        InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct1WithVehicle3() {
         assertEquals(70., stateManager.getActivityState(route.getActivities().get(0), vehicle3,
-            InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+                        InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
 
@@ -209,15 +212,16 @@ public void twUpdateShouldWorkWithMultipleTWs() {
         //
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance("0,0")).setEarliestStart(0.).setLatestArrival(100.).build();
         Service service = new Service.Builder("s1").setLocation(Location.newInstance("10,0"))
-            .addTimeWindow(10, 20).addTimeWindow(30, 40).build();
+                        .addTimeWindow(10, 20).addTimeWindow(30, 40).build();
         Service service2 = new Service.Builder("s2")
-            .addTimeWindow(20, 30).addTimeWindow(40, 60).addTimeWindow(70, 80).setLocation(Location.newInstance("20,0")).build();
+                        .addTimeWindow(20, 30).addTimeWindow(40, 60).addTimeWindow(70, 80).setLocation(Location.newInstance("20,0")).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(service).addJob(service2).addVehicle(vehicle)
-            .setRoutingCost(routingCosts).build();
+                        .setRoutingCost(routingCosts).build();
 
         VehicleRoute route = VehicleRoute.Builder.newInstance(vehicle).setJobActivityFactory(vrp.getJobActivityFactory())
-            .addService(service).addService(service2, TimeWindow.newInstance(70, 80)).build();
+                        .addService(service).addService(service2, TimeWindow.newInstance(70, 80))
+                        .build();
 
         StateManager stateManager = new StateManager(vrp);
         UpdateVehicleDependentPracticalTimeWindows updater = new UpdateVehicleDependentPracticalTimeWindows(stateManager, routingCosts, activityCosts);
@@ -227,7 +231,7 @@ public void twUpdateShouldWorkWithMultipleTWs() {
             public Collection<Vehicle> get(VehicleRoute route) {
                 Collection<Vehicle> vehicles = new ArrayList<Vehicle>();
                 vehicles.add(route.getVehicle());
-//                vehicles.addAll(fleetManager.getAvailableVehicles(route.getVehicle()));
+                //                vehicles.addAll(fleetManager.getAvailableVehicles(route.getVehicle()));
                 return vehicles;
             }
 
@@ -236,26 +240,26 @@ public void twUpdateShouldWorkWithMultipleTWs() {
         stateManager.informInsertionStarts(Arrays.asList(route), Collections.<Job>emptyList());
 
         assertEquals(80., stateManager.getActivityState(route.getActivities().get(1), vehicle,
-            InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+                        InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
     @Test
     public void updateOfOpenRoutesShouldBeDoneCorrectly() {
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v")
-            .setReturnToDepot(false)
-            .setStartLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(0, 0)).build())
-            .setLatestArrival(51)
-            .build();
+                        .setReturnToDepot(false)
+                        .setStartLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(0, 0)).build())
+                        .setLatestArrival(51)
+                        .build();
 
         Service service = new Service.Builder("s")
-            .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(50, 0)).build()).build();
+                        .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(50, 0)).build()).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance()
-            .addJob(service).addVehicle(vehicle).setFleetSize(VehicleRoutingProblem.FleetSize.FINITE)
-            .build();
+                        .addJob(service).addVehicle(vehicle).setFleetSize(VehicleRoutingProblem.FleetSize.FINITE)
+                        .build();
 
         VehicleRoute route = VehicleRoute.Builder.newInstance(vehicle)
-            .setJobActivityFactory(vrp.getJobActivityFactory()).addService(service).build();
+                        .setJobActivityFactory(vrp.getJobActivityFactory()).addService(service).build();
 
         stateManager = new StateManager(vrp);
         UpdateVehicleDependentPracticalTimeWindows updater = new UpdateVehicleDependentPracticalTimeWindows(stateManager, vrp.getTransportCosts(), vrp.getActivityCosts());
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadRouteLevelConstraintTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadRouteLevelConstraintTest.java
index 3f3da8fbf..4a893bd67 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadRouteLevelConstraintTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadRouteLevelConstraintTest.java
@@ -17,10 +17,20 @@
  */
 package com.graphhopper.jsprit.core.problem.constraint;
 
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+import java.util.Arrays;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.state.InternalStates;
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
-import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Delivery;
 import com.graphhopper.jsprit.core.problem.job.Pickup;
@@ -32,15 +42,6 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.Arrays;
-
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
 
 public class ServiceLoadRouteLevelConstraintTest {
 
@@ -79,8 +80,8 @@ public void doBefore() {
 
     @Test
     public void whenLoadPlusDeliverySizeDoesNotExceedsVehicleCapacity_itShouldReturnTrue() {
-        Service service = Delivery.Builder.newInstance("del").setLocation(l())
-            .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 1).addDimension(2, 1).build()).build();
+        Delivery service = Delivery.Builder.newInstance("del").setLocation(l())
+                        .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 1).addDimension(2, 1).build()).build();
         JobInsertionContext iContext = mock(JobInsertionContext.class);
         when(iContext.getJob()).thenReturn(service);
         when(iContext.getRoute()).thenReturn(route);
@@ -91,8 +92,8 @@ public void whenLoadPlusDeliverySizeDoesNotExceedsVehicleCapacity_itShouldReturn
 
     @Test
     public void whenLoadPlusDeliverySizeExceedsVehicleCapacityInAllDimension_itShouldReturnFalse() {
-        Service service = Delivery.Builder.newInstance("d").setLocation(l())
-            .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 3).addDimension(1, 3).addDimension(2, 3).build()).build();
+        Delivery service = Delivery.Builder.newInstance("d").setLocation(l())
+                        .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 3).addDimension(1, 3).addDimension(2, 3).build()).build();
         JobInsertionContext iContext = mock(JobInsertionContext.class);
         when(iContext.getJob()).thenReturn(service);
         when(iContext.getRoute()).thenReturn(route);
@@ -103,8 +104,8 @@ public void whenLoadPlusDeliverySizeExceedsVehicleCapacityInAllDimension_itShoul
 
     @Test
     public void whenLoadPlusDeliverySizeExceedsVehicleCapacityInOneDimension_itShouldReturnFalse() {
-        Service service = Delivery.Builder.newInstance("d").setLocation(l())
-            .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 1).addDimension(2, 3).build()).build();
+        Delivery service = Delivery.Builder.newInstance("d").setLocation(l())
+                        .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 1).addDimension(2, 3).build()).build();
 
         JobInsertionContext iContext = mock(JobInsertionContext.class);
         when(iContext.getJob()).thenReturn(service);
@@ -116,8 +117,8 @@ public void whenLoadPlusDeliverySizeExceedsVehicleCapacityInOneDimension_itShoul
 
     @Test
     public void whenLoadPlusDeliverySizeJustFitIntoVehicle_itShouldReturnTrue() {
-        Service service = Delivery.Builder.newInstance("d").setLocation(l())
-            .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 2).addDimension(1, 2).addDimension(2, 2).build()).build();
+        Delivery service = Delivery.Builder.newInstance("d").setLocation(l())
+                        .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 2).addDimension(1, 2).addDimension(2, 2).build()).build();
         JobInsertionContext iContext = mock(JobInsertionContext.class);
         when(iContext.getJob()).thenReturn(service);
         when(iContext.getRoute()).thenReturn(route);
@@ -128,8 +129,8 @@ public void whenLoadPlusDeliverySizeJustFitIntoVehicle_itShouldReturnTrue() {
 
     @Test
     public void whenLoadPlusPickupSizeDoesNotExceedsVehicleCapacity_itShouldReturnTrue() {
-        Service service = Pickup.Builder.newInstance("p").setLocation(l())
-            .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 1).addDimension(2, 1).build()).build();
+        Pickup service = Pickup.Builder.newInstance("p").setLocation(l())
+                        .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 1).addDimension(2, 1).build()).build();
 
         JobInsertionContext iContext = mock(JobInsertionContext.class);
         when(iContext.getJob()).thenReturn(service);
@@ -141,8 +142,8 @@ public void whenLoadPlusPickupSizeDoesNotExceedsVehicleCapacity_itShouldReturnTr
 
     @Test
     public void whenLoadPlusPickupSizeExceedsVehicleCapacityInAllDimension_itShouldReturnFalse() {
-        Service service = Pickup.Builder.newInstance("p").setLocation(l())
-            .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 3).addDimension(1, 3).addDimension(2, 3).build()).build();
+        Pickup service = Pickup.Builder.newInstance("p").setLocation(l())
+                        .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 3).addDimension(1, 3).addDimension(2, 3).build()).build();
         JobInsertionContext iContext = mock(JobInsertionContext.class);
         when(iContext.getJob()).thenReturn(service);
         when(iContext.getRoute()).thenReturn(route);
@@ -153,8 +154,8 @@ public void whenLoadPlusPickupSizeExceedsVehicleCapacityInAllDimension_itShouldR
 
     @Test
     public void whenLoadPlusPickupSizeExceedsVehicleCapacityInOneDimension_itShouldReturnFalse() {
-        Service service = Pickup.Builder.newInstance("p").setLocation(l())
-            .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 1).addDimension(2, 3).build()).build();
+        Pickup service = Pickup.Builder.newInstance("p").setLocation(l())
+                        .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 1).addDimension(2, 3).build()).build();
 
         JobInsertionContext iContext = mock(JobInsertionContext.class);
         when(iContext.getJob()).thenReturn(service);
@@ -166,8 +167,8 @@ public void whenLoadPlusPickupSizeExceedsVehicleCapacityInOneDimension_itShouldR
 
     @Test
     public void whenLoadPlusPickupSizeJustFitIntoVehicle_itShouldReturnTrue() {
-        Service service = Pickup.Builder.newInstance("p").setLocation(l())
-            .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 2).addDimension(1, 2).addDimension(2, 2).build()).build();
+        Pickup service = Pickup.Builder.newInstance("p").setLocation(l())
+                        .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 2).addDimension(1, 2).addDimension(2, 2).build()).build();
 
         JobInsertionContext iContext = mock(JobInsertionContext.class);
         when(iContext.getJob()).thenReturn(service);
@@ -180,7 +181,7 @@ public void whenLoadPlusPickupSizeJustFitIntoVehicle_itShouldReturnTrue() {
     @Test
     public void whenLoadPlusServiceSizeDoesNotExceedsVehicleCapacity_itShouldReturnTrue() {
         Service service = Service.Builder.newInstance("s").setLocation(l())
-            .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 1).addDimension(2, 1).build()).build();
+                        .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 1).addDimension(2, 1).build()).build();
         JobInsertionContext iContext = mock(JobInsertionContext.class);
         when(iContext.getJob()).thenReturn(service);
         when(iContext.getRoute()).thenReturn(route);
@@ -196,7 +197,7 @@ private Location l() {
     @Test
     public void whenLoadPlusServiceSizeExceedsVehicleCapacityInAllDimension_itShouldReturnFalse() {
         Service service = Service.Builder.newInstance("s").setLocation(l())
-            .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 3).addDimension(1, 3).addDimension(2, 3).build()).build();
+                        .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 3).addDimension(1, 3).addDimension(2, 3).build()).build();
 
         JobInsertionContext iContext = mock(JobInsertionContext.class);
         when(iContext.getJob()).thenReturn(service);
@@ -209,7 +210,7 @@ public void whenLoadPlusServiceSizeExceedsVehicleCapacityInAllDimension_itShould
     @Test
     public void whenLoadPlusServiceSizeExceedsVehicleCapacityInOneDimension_itShouldReturnFalse() {
         Service service = Service.Builder.newInstance("s").setLocation(l())
-            .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 1).addDimension(2, 3).build()).build();
+                        .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 1).addDimension(2, 3).build()).build();
         JobInsertionContext iContext = mock(JobInsertionContext.class);
         when(iContext.getJob()).thenReturn(service);
         when(iContext.getRoute()).thenReturn(route);
@@ -221,7 +222,7 @@ public void whenLoadPlusServiceSizeExceedsVehicleCapacityInOneDimension_itShould
     @Test
     public void whenLoadPlusServiceSizeJustFitIntoVehicle_itShouldReturnTrue() {
         Service service = Service.Builder.newInstance("s").setLocation(Location.newInstance(0))
-            .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 2).addDimension(1, 2).addDimension(2, 2).build()).build();
+                        .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 2).addDimension(1, 2).addDimension(2, 2).build()).build();
 
         JobInsertionContext iContext = mock(JobInsertionContext.class);
         when(iContext.getJob()).thenReturn(service);
@@ -261,7 +262,7 @@ public void whenAddingAServiceAndNewVehicleDoesNotHaveTheCapacity_itShouldReturn
 
     @Test
     public void whenAddingADeliveryAndNewVehicleDoesNotHaveTheCapacity_itShouldReturnFalse() {
-        Service service = mock(Delivery.class);
+        Delivery service = mock(Delivery.class);
         when(service.getSize()).thenReturn(SizeDimension.Builder.newInstance().addDimension(0, 2).build());
 
         SizeDimension atBeginning = SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 2).addDimension(2, 1).build();
@@ -317,8 +318,8 @@ public void whenAddingAPickupAndNewVehicleDoesNotHaveTheCapacity_itShouldReturnF
 
     @Test
     public void whenNewVehicleCapacityIsNotSufficiant1_returnFalse() {
-        final Service pickup = createPickup("pick", 2);
-        final Service pickup2 = createPickup("pick2", 3);
+        final Pickup pickup = createPickup("pick", 2);
+        final Pickup pickup2 = createPickup("pick2", 3);
 
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0, 3).build();
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance("loc")).build();
@@ -334,8 +335,8 @@ public void whenNewVehicleCapacityIsNotSufficiant1_returnFalse() {
 
     @Test
     public void whenNewVehicleCapacityIsNotSufficiant2_returnFalse() {
-        Pickup service = (Pickup) createPickup("pick", 2);
-        Service serviceInRoute = createPickup("pick1", 3);
+        Pickup service = createPickup("pick", 2);
+        Pickup serviceInRoute = createPickup("pick1", 3);
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0, 3).build();
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance("loc")).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addVehicle(vehicle).addJob(service).addJob(serviceInRoute).build();
@@ -347,7 +348,7 @@ public void whenNewVehicleCapacityIsNotSufficiant2_returnFalse() {
     }
 
 
-    private Service createPickup(String string, int i) {
+    private Pickup createPickup(String string, int i) {
         return new Pickup.Builder(string).addSizeDimension(0, i).setLocation(Location.newInstance("loc")).build();
     }
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowTest.java
index ade1c12c5..5aa32795c 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowTest.java
@@ -168,7 +168,7 @@ public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct1() {
     public void whenNewJobIsInsertedWithOldVeh_itJustShouldReturnTrue() {
 
         Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("50,0")).build();
-        JobActivity serviceAct = s4.getServiceActivity();
+        JobActivity serviceAct = s4.getActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, vehicle, route.getDriver(), 0.);
 
@@ -183,7 +183,7 @@ public void whenNewJobIsInsertedWithOldVeh_itJustShouldReturnTrue() {
     public void whenNewJobIsInsertedWithOldVeh_itJustShouldReturnFalse() {
 
         Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("1000,0")).build();
-        JobActivity serviceAct = s4.getServiceActivity();
+        JobActivity serviceAct = s4.getActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, vehicle, route.getDriver(), 0.);
 
@@ -198,7 +198,7 @@ public void whenNewJobIsInsertedWithOldVeh_itJustShouldReturnFalse() {
     public void whenNewJobIsInsertedInBetweenAct1And2WithOldVeh_itJustShouldReturnTrue() {
 
         Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("50,0")).build();
-        JobActivity serviceAct = s4.getServiceActivity();
+        JobActivity serviceAct = s4.getActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, vehicle, route.getDriver(), 0.);
 
@@ -216,7 +216,7 @@ public void whenNewJobIsInsertedInBetweenAct1And2WithOldVeh_itJustShouldReturnTr
     public void whenNewJobIsInsertedInBetweenAct1And2WithOldVeh_itJustShouldReturnFalse() {
 
         Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("51,0")).build();
-        JobActivity serviceAct = s4.getServiceActivity();
+        JobActivity serviceAct = s4.getActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, vehicle, route.getDriver(), 0.);
 
@@ -237,7 +237,7 @@ public void whenJobIsInsertedAlongWithNewVehicleThatNeedsToBeHomeAt60_itShouldRe
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
         Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
-        JobActivity serviceAct = s4.getServiceActivity();
+        JobActivity serviceAct = s4.getActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v2, route.getDriver(), 0.);
 
@@ -255,7 +255,7 @@ public void whenJobIsInsertedAlongWithNewVehicleThatNeedsToBeHomeAt50_itShouldRe
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
         Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
-        JobActivity serviceAct = s4.getServiceActivity();
+        JobActivity serviceAct = s4.getActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v3, route.getDriver(), 0.);
 
@@ -272,7 +272,7 @@ public void whenJobIsInsertedAlongWithNewVehicleThatNeedsToBeHomeAt10_itShouldRe
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
         Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
-        JobActivity serviceAct = s4.getServiceActivity();
+        JobActivity serviceAct = s4.getActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v4, route.getDriver(), 0.);
 
@@ -289,7 +289,7 @@ public void whenJobIsInsertedAlongWithV6BetweenS2AndS3_itShouldReturnFalse() {
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
         Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
-        JobActivity serviceAct = s4.getServiceActivity();
+        JobActivity serviceAct = s4.getActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v6, route.getDriver(), 0.);
 
@@ -306,7 +306,7 @@ public void whenJobIsInsertedAlongWithV6BetweenS1AndS2_itShouldReturnFalse() {
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
         Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
-        JobActivity serviceAct = s4.getServiceActivity();
+        JobActivity serviceAct = s4.getActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v6, route.getDriver(), 0.);
 
@@ -323,7 +323,7 @@ public void whenJobIsInsertedAlongWithV6AtTheEndOfRoute_itShouldReturnTrue() {
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
         Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
-        JobActivity serviceAct = s4.getServiceActivity();
+        JobActivity serviceAct = s4.getActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v6, route.getDriver(), 0.);
 
@@ -338,7 +338,7 @@ public void whenJobIsInsertedAlongWithNewVehicleThatCanOnlyStartAt60_itShouldRet
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
         Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
-        JobActivity serviceAct = s4.getServiceActivity();
+        JobActivity serviceAct = s4.getActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v5, route.getDriver(), 60.);
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowWithStartTimeAndMaxOperationTimeTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowWithStartTimeAndMaxOperationTimeTest.java
index 9a8577fdb..07893a964 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowWithStartTimeAndMaxOperationTimeTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowWithStartTimeAndMaxOperationTimeTest.java
@@ -166,7 +166,7 @@ public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct1() {
     public void whenNewJobIsInsertedWithOldVeh_itJustShouldReturnTrue() {
 
         Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("50,0")).build();
-        JobActivity serviceAct = s4.getServiceActivity();
+        JobActivity serviceAct = s4.getActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, vehicle, route.getDriver(), 0.);
 
@@ -181,7 +181,7 @@ public void whenNewJobIsInsertedWithOldVeh_itJustShouldReturnTrue() {
     public void whenNewJobIsInsertedWithOldVeh_itJustShouldReturnFalse() {
 
         Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("1000,0")).build();
-        JobActivity serviceAct = s4.getServiceActivity();
+        JobActivity serviceAct = s4.getActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, vehicle, route.getDriver(), 0.);
 
@@ -196,7 +196,7 @@ public void whenNewJobIsInsertedWithOldVeh_itJustShouldReturnFalse() {
     public void whenNewJobIsInsertedInBetweenAct1And2WithOldVeh_itJustShouldReturnTrue() {
 
         Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("50,0")).build();
-        JobActivity serviceAct = s4.getServiceActivity();
+        JobActivity serviceAct = s4.getActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, vehicle, route.getDriver(), 0.);
 
@@ -214,7 +214,7 @@ public void whenNewJobIsInsertedInBetweenAct1And2WithOldVeh_itJustShouldReturnTr
     public void whenNewJobIsInsertedInBetweenAct1And2WithOldVeh_itJustShouldReturnFalse() {
 
         Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("51,0")).build();
-        JobActivity serviceAct = s4.getServiceActivity();
+        JobActivity serviceAct = s4.getActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, vehicle, route.getDriver(), 0.);
 
@@ -235,7 +235,7 @@ public void whenJobIsInsertedAlongWithNewVehicleThatNeedsToBeHomeAt60_itShouldRe
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
         Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
-        JobActivity serviceAct = s4.getServiceActivity();
+        JobActivity serviceAct = s4.getActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v2, route.getDriver(), 0.);
 
@@ -253,7 +253,7 @@ public void whenJobIsInsertedAlongWithNewVehicleThatNeedsToBeHomeAt50_itShouldRe
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
         Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
-        JobActivity serviceAct = s4.getServiceActivity();
+        JobActivity serviceAct = s4.getActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v3, route.getDriver(), 0.);
 
@@ -270,7 +270,7 @@ public void whenJobIsInsertedAlongWithNewVehicleThatNeedsToBeHomeAt10_itShouldRe
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
         Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
-        JobActivity serviceAct = s4.getServiceActivity();
+        JobActivity serviceAct = s4.getActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v4, route.getDriver(), 0.);
 
@@ -287,7 +287,7 @@ public void whenJobIsInsertedAlongWithV6BetweenS2AndS3_itShouldReturnFalse() {
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
         Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
-        JobActivity serviceAct = s4.getServiceActivity();
+        JobActivity serviceAct = s4.getActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v6, route.getDriver(), 0.);
 
@@ -304,7 +304,7 @@ public void whenJobIsInsertedAlongWithV6BetweenS1AndS2_itShouldReturnFalse() {
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
         Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
-        JobActivity serviceAct = s4.getServiceActivity();
+        JobActivity serviceAct = s4.getActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v6, route.getDriver(), 0.);
 
@@ -321,7 +321,7 @@ public void whenJobIsInsertedAlongWithV6AtTheEndOfRoute_itShouldReturnTrue() {
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
         Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
-        JobActivity serviceAct = s4.getServiceActivity();
+        JobActivity serviceAct = s4.getActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v6, route.getDriver(), 0.);
 
@@ -336,7 +336,7 @@ public void whenJobIsInsertedAlongWithNewVehicleThatCanOnlyStartAt60_itShouldRet
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
         Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
-        JobActivity serviceAct = s4.getServiceActivity();
+        JobActivity serviceAct = s4.getActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v5, route.getDriver(), 60.);
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/TestVehicleRoute.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/TestVehicleRoute.java
index b341c2a05..e0d3f5550 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/TestVehicleRoute.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/TestVehicleRoute.java
@@ -26,6 +26,7 @@
 import org.junit.Test;
 
 import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.driver.DriverImpl;
 import com.graphhopper.jsprit.core.problem.driver.DriverImpl.NoDriver;
 import com.graphhopper.jsprit.core.problem.job.Delivery;
@@ -35,6 +36,7 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivityNEW;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.ServiceActivityNEW;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindows;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
@@ -99,7 +101,12 @@ public void whenBuildingANonEmptyTour2Times_tourIterIteratesOverActivitiesCorrec
             assertEquals(1, count);
         }
         {
-            route.getTourActivities().addActivity(ServiceActivityNEW.newInstance(new Service.Builder("3").addSizeDimension(0, 30).setLocation(Location.newInstance("1")).build()));
+            Service service = new Service.Builder("3").build();
+            ServiceActivityNEW serviceAct = new ServiceActivityNEW(service, "service",
+                            Location.newInstance("1"),
+                            0d, SizeDimension.Builder.newInstance().addDimension(0, 30).build(),
+                            TimeWindows.ANY_TIME.getTimeWindows());
+            route.getTourActivities().addActivity(serviceAct);
             Iterator<TourActivity> iter = route.getTourActivities().iterator();
             int count = 0;
             while (iter.hasNext()) {
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivityTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivityTest.java
index 754fb1cc5..f229951e6 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivityTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivityTest.java
@@ -17,14 +17,18 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.job.Break;
 import com.graphhopper.jsprit.core.problem.job.Break.Builder;
 import com.graphhopper.jsprit.core.problem.job.Service;
-import org.junit.Before;
-import org.junit.Test;
-
-import static org.junit.Assert.*;
 
 
 public class BreakActivityTest {
@@ -36,7 +40,7 @@
     @Before
     public void doBefore() {
         Builder breakBuilder = new Break.Builder("service")
-            .setTimeWindow(TimeWindow.newInstance(1., 2.)).setServiceTime(3);
+                        .setTimeWindow(TimeWindow.newInstance(1., 2.)).setServiceTime(3);
         service = breakBuilder.build();
         serviceActivity = BreakActivity.newInstance(service, breakBuilder);
         serviceActivity.setTheoreticalEarliestOperationStartTime(service.getTimeWindow().getStart());
@@ -89,22 +93,30 @@ public void whenCopyingStart_itShouldBeDoneCorrectly() {
 
     @Test
     public void whenTwoDeliveriesHaveTheSameUnderlyingJob_theyAreEqual() {
-        Service s1 = new Service.Builder("s").setLocation(Location.newInstance("loc")).build();
-        Service s2 = new Service.Builder("s").setLocation(Location.newInstance("loc")).build();
-
-        ServiceActivityNEW d1 = ServiceActivityNEW.newInstance(s1);
-        ServiceActivityNEW d2 = ServiceActivityNEW.newInstance(s2);
+        Service s1 = new Service.Builder("s").build();
+        Service s2 = new Service.Builder("s").build();
+        Location loc = Location.newInstance("loc");
+        ServiceActivityNEW d1 = new ServiceActivityNEW(s1, "s1",
+                        loc, 0d, SizeDimension.EMPTY,
+                        TimeWindows.ANY_TIME.getTimeWindows());
+        ServiceActivityNEW d2 = new ServiceActivityNEW(s2, "s2",
+                        loc, 0d, SizeDimension.EMPTY,
+                        TimeWindows.ANY_TIME.getTimeWindows());
 
         assertTrue(d1.equals(d2));
     }
 
     @Test
     public void whenTwoDeliveriesHaveTheDifferentUnderlyingJob_theyAreNotEqual() {
-        Service s1 = new Service.Builder("s").setLocation(Location.newInstance("loc")).build();
-        Service s2 = new Service.Builder("s1").setLocation(Location.newInstance("loc")).build();
-
-        ServiceActivityNEW d1 = ServiceActivityNEW.newInstance(s1);
-        ServiceActivityNEW d2 = ServiceActivityNEW.newInstance(s2);
+        Service s1 = new Service.Builder("s").build();
+        Service s2 = new Service.Builder("s2").build();
+        Location loc = Location.newInstance("loc");
+        ServiceActivityNEW d1 = new ServiceActivityNEW(s1, "s1",
+                        loc, 0d, SizeDimension.EMPTY,
+                        TimeWindows.ANY_TIME.getTimeWindows());
+        ServiceActivityNEW d2 = new ServiceActivityNEW(s2, "s2",
+                        loc, 0d, SizeDimension.EMPTY,
+                        TimeWindows.ANY_TIME.getTimeWindows());
 
         assertFalse(d1.equals(d2));
     }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/JobActivityTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/JobActivityTest.java
index 962703614..89bfe47fa 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/JobActivityTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/JobActivityTest.java
@@ -21,17 +21,17 @@
 
 import org.junit.Test;
 
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.AbstractSingleActivityJob;
 
 public abstract class JobActivityTest {
 
-    protected Service service;
+    protected AbstractSingleActivityJob<?> service;
 
     protected JobActivity activity;
 
-    public void createActivity(Service service) {
+    public void createActivity(AbstractSingleActivityJob<?> service) {
         this.service = service;
-        activity = service.getServiceActivity();
+        activity = service.getActivity();
         activity.setTheoreticalEarliestOperationStartTime(
                         activity.getTimeWindows().iterator().next().getStart());
         activity.setTheoreticalLatestOperationStartTime(
@@ -39,7 +39,6 @@ public void createActivity(Service service) {
     }
 
     @Test
-
     public abstract void whenCallingCapacity_itShouldReturnCorrectCapacity();
 
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TestTourActivities.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TestTourActivities.java
index 846099556..45650d3f1 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TestTourActivities.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TestTourActivities.java
@@ -25,6 +25,7 @@
 import org.junit.Test;
 
 import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.job.Service;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 
@@ -37,8 +38,11 @@
 
     @Before
     public void doBefore() {
-        service = new Service.Builder("yo").addSizeDimension(0, 10).setLocation(Location.newInstance("loc")).build();
-        act = ServiceActivityNEW.newInstance(service);
+        Service service = new Service.Builder("yo").build();
+        Location loc = Location.newInstance("loc");
+        act = new ServiceActivityNEW(service, "s1",
+                        loc, 0d, SizeDimension.Builder.newInstance().addDimension(0, 10).build(),
+                        TimeWindows.ANY_TIME.getTimeWindows());
         tour = new TourActivities();
     }
 
diff --git a/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLReader.java b/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLReader.java
index 40338733b..f630985d0 100644
--- a/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLReader.java
+++ b/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLReader.java
@@ -17,12 +17,36 @@
  */
 package com.graphhopper.jsprit.io.problem;
 
+import java.io.InputStream;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+import org.apache.commons.configuration.ConfigurationException;
+import org.apache.commons.configuration.HierarchicalConfiguration;
+import org.apache.commons.configuration.XMLConfiguration;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.xml.sax.EntityResolver;
+import org.xml.sax.InputSource;
+
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
 import com.graphhopper.jsprit.core.problem.driver.Driver;
 import com.graphhopper.jsprit.core.problem.driver.DriverImpl;
-import com.graphhopper.jsprit.core.problem.job.*;
+import com.graphhopper.jsprit.core.problem.job.AbstractSingleActivityJob;
+import com.graphhopper.jsprit.core.problem.job.Break;
+import com.graphhopper.jsprit.core.problem.job.Delivery;
+import com.graphhopper.jsprit.core.problem.job.Job;
+import com.graphhopper.jsprit.core.problem.job.Pickup;
+import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
@@ -33,18 +57,6 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.Coordinate;
 import com.graphhopper.jsprit.core.util.Resource;
-import org.apache.commons.configuration.ConfigurationException;
-import org.apache.commons.configuration.HierarchicalConfiguration;
-import org.apache.commons.configuration.XMLConfiguration;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-import org.xml.sax.EntityResolver;
-import org.xml.sax.InputSource;
-import org.xml.sax.SAXException;
-
-import java.io.IOException;
-import java.io.InputStream;
-import java.util.*;
 
 public class VrpXMLReader {
 
@@ -55,7 +67,7 @@
     static class DefaultServiceBuilderFactory implements ServiceBuilderFactory {
 
         @Override
-        public Service.BuilderBase<?, ?> createBuilder(String serviceType, String id, Integer size) {
+        public AbstractSingleActivityJob.BuilderBase<?, ?> createBuilder(String serviceType, String id, Integer size) {
             if (serviceType.equals("pickup")) {
                 if (size != null) {
                     return new Pickup.Builder(id).addSizeDimension(0, size);
@@ -85,7 +97,7 @@
 
     private Map<String, Vehicle> vehicleMap;
 
-    private Map<String, Service> serviceMap;
+    private Map<String, AbstractSingleActivityJob<?>> serviceMap;
 
     private Map<String, Shipment> shipmentMap;
 
@@ -99,7 +111,8 @@
 
 
     /**
-     * @param schemaValidation the schemaValidation to set
+     * @param schemaValidation
+     *            the schemaValidation to set
      */
     @SuppressWarnings("UnusedDeclaration")
     public void setSchemaValidation(boolean schemaValidation) {
@@ -108,17 +121,17 @@ public void setSchemaValidation(boolean schemaValidation) {
 
     public VrpXMLReader(VehicleRoutingProblem.Builder vrpBuilder, Collection<VehicleRoutingProblemSolution> solutions) {
         this.vrpBuilder = vrpBuilder;
-        vehicleMap = new LinkedHashMap<String, Vehicle>();
-        serviceMap = new LinkedHashMap<String, Service>();
-        shipmentMap = new LinkedHashMap<String, Shipment>();
+        vehicleMap = new LinkedHashMap<>();
+        serviceMap = new LinkedHashMap<>();
+        shipmentMap = new LinkedHashMap<>();
         this.solutions = solutions;
     }
 
     public VrpXMLReader(VehicleRoutingProblem.Builder vrpBuilder) {
         this.vrpBuilder = vrpBuilder;
-        vehicleMap = new LinkedHashMap<String, Vehicle>();
-        serviceMap = new LinkedHashMap<String, Service>();
-        shipmentMap = new LinkedHashMap<String, Shipment>();
+        vehicleMap = new LinkedHashMap<>();
+        serviceMap = new LinkedHashMap<>();
+        shipmentMap = new LinkedHashMap<>();
         solutions = null;
     }
 
@@ -151,14 +164,10 @@ private XMLConfiguration createXMLConfiguration() {
         if (schemaValidation) {
             final InputStream resource = Resource.getAsInputStream("vrp_xml_schema.xsd");
             if (resource != null) {
-                EntityResolver resolver = new EntityResolver() {
-
-                    @Override
-                    public InputSource resolveEntity(String publicId, String systemId) throws SAXException, IOException {
-                        {
-                            InputSource is = new InputSource(resource);
-                            return is;
-                        }
+                EntityResolver resolver = (publicId, systemId) -> {
+                    {
+                        InputSource is = new InputSource(resource);
+                        return is;
                     }
                 };
                 xmlConfig.setEntityResolver(resolver);
@@ -184,7 +193,7 @@ private void read(XMLConfiguration xmlConfig) {
     }
 
     private void addJobsAndTheirLocationsToVrp() {
-        for (Service service : serviceMap.values()) {
+        for (AbstractSingleActivityJob<?> service : serviceMap.values()) {
             if (!freezedJobIds.contains(service.getId())) {
                 vrpBuilder.addJob(service);
             }
@@ -234,13 +243,13 @@ private void readInitialRoutes(XMLConfiguration xmlConfig) {
                 String serviceId = actConfig.getString("serviceId");
                 if (type.equals("break")) {
                     Break currentbreak = getBreak(vehicleId);
-                    routeBuilder.addBreak(currentbreak);
+                    routeBuilder.addService(currentbreak);
                 } else {
                     if (serviceId != null) {
-                        Service service = getService(serviceId);
+                        AbstractSingleActivityJob service = getService(serviceId);
                         if (service == null) {
                             throw new IllegalArgumentException("service to serviceId " + serviceId
-                                + " is missing (reference in one of your initial routes). make sure you define the service you refer to here in <services> </services>.");
+                                    + " is missing (reference in one of your initial routes). make sure you define the service you refer to here in <services> </services>.");
                         }
                         //!!!since job is part of initial route, it does not belong to jobs in problem, i.e. variable jobs that can be assigned/scheduled
                         freezedJobIds.add(serviceId);
@@ -253,7 +262,7 @@ private void readInitialRoutes(XMLConfiguration xmlConfig) {
                         Shipment shipment = getShipment(shipmentId);
                         if (shipment == null) {
                             throw new IllegalArgumentException("shipment to shipmentId " + shipmentId
-                                + " is missing (reference in one of your initial routes). make sure you define the shipment you refer to here in <shipments> </shipments>.");
+                                    + " is missing (reference in one of your initial routes). make sure you define the shipment you refer to here in <shipments> </shipments>.");
                         }
                         freezedJobIds.add(shipmentId);
                         if (type.equals("pickupShipment")) {
@@ -324,11 +333,11 @@ private void readSolutions(XMLConfiguration vrpProblem) {
                     }
                     if (type.equals("break")) {
                         Break currentbreak = getBreak(vehicleId);
-                        routeBuilder.addBreak(currentbreak);
+                        routeBuilder.addService(currentbreak);
                     } else {
                         String serviceId = actConfig.getString("serviceId");
                         if (serviceId != null) {
-                            Service service = getService(serviceId);
+                            AbstractSingleActivityJob service = getService(serviceId);
                             routeBuilder.addService(service);
                         } else {
                             String shipmentId = actConfig.getString("shipmentId");
@@ -373,7 +382,7 @@ private Shipment getShipment(String shipmentId) {
         return shipmentMap.get(shipmentId);
     }
 
-    private Service getService(String serviceId) {
+    private AbstractSingleActivityJob<?> getService(String serviceId) {
         return serviceMap.get(serviceId);
     }
 
@@ -411,7 +420,7 @@ private void readShipments(XMLConfiguration config) {
             }
             if (capacityString != null && capacityDimensionsExist) {
                 throw new IllegalArgumentException(
-                    "either use capacity or capacity-dimension, not both. prefer the use of 'capacity-dimensions' over 'capacity'.");
+                        "either use capacity or capacity-dimension, not both. prefer the use of 'capacity-dimensions' over 'capacity'.");
             }
 
             Shipment.Builder builder;
@@ -561,10 +570,10 @@ private void readServices(XMLConfiguration vrpProblem) {
             }
             if (capacityString != null && capacityDimensionsExist) {
                 throw new IllegalArgumentException(
-                    "either use capacity or capacity-dimension, not both. prefer the use of 'capacity-dimensions' over 'capacity'.");
+                        "either use capacity or capacity-dimension, not both. prefer the use of 'capacity-dimensions' over 'capacity'.");
             }
 
-            Service.BuilderBase<?, ?> builder;
+            AbstractSingleActivityJob.BuilderBase<?, ?> builder;
             if (capacityString != null) {
                 builder = serviceBuilderFactory.createBuilder(type, id, Integer.parseInt(capacityString));
             } else {
@@ -628,7 +637,7 @@ private void readServices(XMLConfiguration vrpProblem) {
             }
 
             //build service
-            Service service = builder.build();
+            AbstractSingleActivityJob<?> service = builder.build();
             serviceMap.put(service.getId(), service);
 //			vrpBuilder.addJob(service);
 
@@ -653,7 +662,7 @@ private void readVehiclesAndTheirTypes(XMLConfiguration vrpProblem) {
             }
             if (capacityString != null && capacityDimensionsExist) {
                 throw new IllegalArgumentException(
-                    "either use capacity or capacity-dimension, not both. prefer the use of 'capacity-dimensions' over 'capacity'.");
+                        "either use capacity or capacity-dimension, not both. prefer the use of 'capacity-dimensions' over 'capacity'.");
             }
 
             VehicleTypeImpl.Builder typeBuilder;
