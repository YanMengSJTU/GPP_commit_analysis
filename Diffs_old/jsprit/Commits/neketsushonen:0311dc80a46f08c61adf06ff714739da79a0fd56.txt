diff --git a/jsprit-examples/pom.xml b/jsprit-examples/pom.xml
index 5473ad74b..3d749cedf 100644
--- a/jsprit-examples/pom.xml
+++ b/jsprit-examples/pom.xml
@@ -63,6 +63,17 @@
             <artifactId>log4j-core</artifactId>
             <version>2.0.1</version>
         </dependency>
+
+        <dependency>
+		    <groupId>org.apache.poi</groupId>
+    		<artifactId>poi-ooxml</artifactId>
+		    <version>4.0.0</version>
+		</dependency>
+		<dependency>
+			<groupId>org.jgrapht</groupId>
+			<artifactId>jgrapht-core</artifactId>
+			<version>1.3.0</version>
+		</dependency>
     </dependencies>
 
 </project>
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/BuildAlgorithmFromScratch.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/BuildAlgorithmFromScratch.java
index 4660597a6..3b1b174b6 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/BuildAlgorithmFromScratch.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/BuildAlgorithmFromScratch.java
@@ -108,7 +108,7 @@ public static void main(String[] args) {
         Examples.createOutputFolder();
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
-        new CordeauReader(vrpBuilder).read("input/p08");
+        new CordeauReader(vrpBuilder).read("/Users/chunhaulai/Documents/workspace-vrp/jsprit/jsprit-examples/input/p08");
         final VehicleRoutingProblem vrp = vrpBuilder.build();
 
         VehicleRoutingAlgorithm vra = createAlgorithm(vrp);
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EnRouteSpeedyman.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EnRouteSpeedyman.java
new file mode 100644
index 000000000..9679dff3c
--- /dev/null
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EnRouteSpeedyman.java
@@ -0,0 +1,316 @@
+
+package com.graphhopper.jsprit.examples;
+
+import  com.graphhopper.jsprit.core.problem.solution.route.activity.*;
+import com.graphhopper.jsprit.analysis.toolbox.GraphStreamViewer;
+import com.graphhopper.jsprit.analysis.toolbox.GraphStreamViewer.Label;
+import com.graphhopper.jsprit.analysis.toolbox.Plotter;
+import com.graphhopper.jsprit.core.algorithm.VehicleRoutingAlgorithm;
+import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
+import com.graphhopper.jsprit.core.algorithm.state.StateManager;
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
+import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
+import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
+import com.graphhopper.jsprit.core.problem.constraint.ServiceDeliveriesFirstConstraint;
+import com.graphhopper.jsprit.core.problem.job.Delivery;
+import com.graphhopper.jsprit.core.problem.job.Pickup;
+import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
+import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl.Builder;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
+import com.graphhopper.jsprit.core.reporting.SolutionPrinter;
+import com.graphhopper.jsprit.core.util.Coordinate;
+import com.graphhopper.jsprit.core.util.Solutions;
+import com.graphhopper.jsprit.io.problem.VrpXMLWriter;
+import com.graphhopper.jsprit.util.Examples;
+import com.graphhopper.jsprit.util.MetroCosts;
+import com.graphhopper.jsprit.util.SericePickuptFirstConstraing;
+
+import java.util.Arrays;
+import java.util.Collection;
+
+
+import java.io.BufferedReader;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.io.PrintWriter;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import org.apache.poi.hssf.usermodel.HSSFWorkbook;
+import org.apache.poi.ss.usermodel.Row;
+import org.apache.poi.ss.usermodel.Sheet;
+import org.apache.poi.ss.usermodel.Workbook;
+import org.apache.poi.xssf.usermodel.XSSFWorkbook;
+import org.jgrapht.alg.shortestpath.DijkstraShortestPath;
+import org.jgrapht.graph.DefaultWeightedEdge;
+import org.jgrapht.graph.DirectedWeightedMultigraph;
+
+
+public class EnRouteSpeedyman {
+
+    public static void main(String[] args) throws IOException {
+
+        DirectedWeightedMultigraph<Integer, DefaultWeightedEdge> g = new DirectedWeightedMultigraph<Integer, DefaultWeightedEdge>(DefaultWeightedEdge.class);
+		Map<String,Integer> nodeMaps = new HashMap<String,Integer>();
+		Map<Integer, String> estacionmaps = new HashMap<Integer, String>();
+
+		FileInputStream stream = new FileInputStream(new File("/Users/chunhaulai/Documents/workspace-speedyman/dijkstra-algorithm/metro.xlsx"));
+		Workbook workbook = new XSSFWorkbook(stream);
+		Sheet sheet = workbook.getSheetAt(0);
+		int node = 0;
+		int fila = 0;
+		for (Row row: sheet) {
+			if(fila!=0){
+				String origen = row.getCell(0).getStringCellValue();
+				String destino = row.getCell(1).getStringCellValue();
+				if(!nodeMaps.containsKey(origen)){
+					g.addVertex(node);
+					nodeMaps.put(origen, node++);
+					estacionmaps.put(node-1,origen);
+					
+				}
+				if(!nodeMaps.containsKey(destino)){
+					g.addVertex(node);
+					nodeMaps.put(destino, node++);
+					estacionmaps.put(node-1,destino);
+				}
+			}
+			fila++;
+        }
+        
+
+        PrintWriter writer = new PrintWriter(new File("/tmp/lai.csv"));
+ 		fila = 0;
+		for (Row row: sheet) {
+			if(fila!=0 && row.getCell(0)!=null){
+				String origen = row.getCell(0).getStringCellValue();
+				String destino = row.getCell(1).getStringCellValue();
+				double tiempo = 0;
+				try{
+					tiempo = row.getCell(2).getNumericCellValue();
+				}catch(IllegalStateException|NullPointerException e){
+					tiempo = 300;
+				}
+				if(nodeMaps.get(origen)!=nodeMaps.get(destino)){
+					if(!g.containsEdge(nodeMaps.get(origen), nodeMaps.get(destino))){
+						DefaultWeightedEdge e = g.addEdge(nodeMaps.get(origen),nodeMaps.get(destino) );
+						g.setEdgeWeight(e,tiempo);
+					}
+					if(!g.containsEdge(nodeMaps.get(destino), nodeMaps.get(origen))){
+						DefaultWeightedEdge e = g.addEdge(nodeMaps.get(destino),nodeMaps.get(origen) );
+						g.setEdgeWeight(e,tiempo);
+					}
+
+					
+				}
+				
+			}
+			fila++;
+        }
+
+        for(String key: nodeMaps.keySet()){
+            writer.println(key);
+        }
+        writer.flush();
+        writer.close();
+        final int WEIGHT_INDEX = 0;
+        Map<Integer,List<Service>> pedidos = new HashMap<Integer,List<Service>>();
+        Map<Integer,Location> locations = new HashMap<Integer,Location>();
+        Map<String,Coordinate> estacionCoordenada = new HashMap<String,Coordinate>();
+
+		
+        
+        sheet = workbook.getSheetAt(2);
+		fila = 0;
+		for (Row row: sheet) {
+			if(fila!=0 && row.getCell(1)!=null){
+			
+				String estacion = row.getCell(0).getStringCellValue();
+                int x = (int)row.getCell(1).getNumericCellValue();
+                int y = (int)row.getCell(2).getNumericCellValue();
+
+                estacionCoordenada.put(estacion, Coordinate.newInstance(x, y));
+
+				 
+			}
+			fila++;
+		}
+         
+        //pedidos
+		sheet = workbook.getSheetAt(1);
+		fila = 0;
+		for (Row row: sheet) {
+			if(fila!=0 && row.getCell(1)!=null){
+				int locationId =  (int)row.getCell(0).getNumericCellValue();
+				String estacion = row.getCell(1).getStringCellValue();
+                int orderId = (int)row.getCell(2).getNumericCellValue();
+                int amount = (int)row.getCell(3).getNumericCellValue();
+				if(nodeMaps.containsKey(estacion)){
+					if(!pedidos.containsKey(orderId)){
+						pedidos.put(orderId,  new ArrayList<Service>());
+					}
+                    //pedidos.get(orderId).add(estacion);
+                    
+                  
+                    Location.Builder locx = Location.Builder.newInstance();
+                    locx.setId(String.valueOf(nodeMaps.get(estacion)));
+                    locx.setCoordinate(estacionCoordenada.get(estacion));
+                    if(!locations.containsKey(orderId)){
+                        locations.put(orderId, locx.build());
+                        Pickup pickup1 = Pickup.Builder.newInstance(String.valueOf(orderId)).addSizeDimension(WEIGHT_INDEX, 1).setLocation(locx.build()).build();
+                        
+                        pedidos.get(orderId).add(pickup1);
+                        
+                      //  builder.setPickupLocation(locx.build());
+                    }else{
+                        Delivery delivery1 = Delivery.Builder.newInstance(orderId+ "::" +locationId ).addSizeDimension(0, 1).setLocation(locx.build()).build();
+                        pedidos.get(orderId).add(delivery1);
+                       
+
+                      
+                        /*
+                        Shipment.Builder builder = Shipment.Builder.newInstance(orderId+ "::" +locationId );
+                        builder.addSizeDimension(WEIGHT_INDEX,amount);
+                        builder.setDeliveryLocation( locx.build()) ;
+                        builder.setPickupLocation(locations.get(orderId));
+
+                        Shipment shipment = builder.build();
+                        pedidos.get(orderId).add(shipment);
+                        */
+ 
+                    }
+				}else{
+					//TODO estacion no encontrada en la base de datos
+					System.out.println(estacion);
+				}
+			}
+			fila++;
+        }
+        
+        
+
+        /*
+         * some preparation - create output folder
+		 */
+        Examples.createOutputFolder();
+
+		/*
+         * get a vehicle type-builder and build a type with the typeId "vehicleType" and a capacity of 2
+		 */
+        VehicleTypeImpl.Builder vehicleTypeBuilder = VehicleTypeImpl.Builder.newInstance("vehicleType").addCapacityDimension(0,11);
+        vehicleTypeBuilder.setCostPerDistance(1.0);
+        VehicleType vehicleType = vehicleTypeBuilder.build();
+
+		/*
+         * define two vehicles and their start-locations
+		 *
+		 * the first two do need to return to depot
+		 */
+
+      
+
+         Builder vehicleBuilder1 = VehicleImpl.Builder.newInstance("La Cisterna@[-3,-12]");
+        vehicleBuilder1.setStartLocation(Location.Builder.newInstance().setId(String.valueOf(nodeMaps.get("La Cisterna"))).setCoordinate(estacionCoordenada.get("La Cisterna")).build()).setReturnToDepot(false);
+        vehicleBuilder1.setType(vehicleType);
+        VehicleImpl vehicle1 = vehicleBuilder1.build();
+
+        Builder vehicleBuilder2 = VehicleImpl.Builder.newInstance("Pudahuel@[-14,1]");
+        vehicleBuilder2.setStartLocation(Location.Builder.newInstance().setId(String.valueOf(nodeMaps.get("Pudahuel"))).setCoordinate(estacionCoordenada.get("Pudahuel")).build()).setReturnToDepot(false);
+        vehicleBuilder2.setType(vehicleType);
+        VehicleImpl vehicle2 = vehicleBuilder2.build();
+
+        Builder vehicleBuilder3 = VehicleImpl.Builder.newInstance("Quinta Normal@[-5,1]");
+        vehicleBuilder3.setStartLocation(Location.Builder.newInstance().setId(String.valueOf(nodeMaps.get("Quinta Normal"))).setCoordinate(estacionCoordenada.get("Quinta Normal")).build()).setReturnToDepot(false);;
+        vehicleBuilder3.setType(vehicleType);
+        VehicleImpl vehicle3 = vehicleBuilder3.build();
+
+        Builder vehicleBuilder4 = VehicleImpl.Builder.newInstance("Macul@[11,-5]");
+        vehicleBuilder4.setStartLocation(Location.Builder.newInstance().setId(String.valueOf(nodeMaps.get("Macul"))).setCoordinate(estacionCoordenada.get("Macul")).build()).setReturnToDepot(false);;
+        vehicleBuilder4.setType(vehicleType);
+        VehicleImpl vehicle4 = vehicleBuilder4.build();
+
+        Builder vehicleBuilder5 = VehicleImpl.Builder.newInstance("Ñuñoa@[8,0]");
+        vehicleBuilder5.setStartLocation(Location.Builder.newInstance().setId(String.valueOf(nodeMaps.get("Ñuñoa"))).setCoordinate(estacionCoordenada.get("Ñuñoa")).build()).setReturnToDepot(false);;
+        vehicleBuilder5.setType(vehicleType);
+        VehicleImpl vehicle5 = vehicleBuilder5.build();
+
+
+         
+        VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
+        vrpBuilder.addVehicle(vehicle1);//.addVehicle(vehicle2).addVehicle(vehicle3).addVehicle(vehicle4).addVehicle(vehicle5);
+        vrpBuilder.setRoutingCost(new MetroCosts(g));
+
+        
+        for(Map.Entry<Integer, List<Service>> entry:pedidos.entrySet()){
+            for(Service s: entry.getValue()){
+                    vrpBuilder.addJob(s);
+            }
+            break;
+        }
+
+        /*
+        vrpBuilder.addJob(shipment1).addJob(shipment2).addJob(shipment3).addJob(shipment4);
+        vrpBuilder.addJob(shipment5).addJob(shipment6).addJob(shipment7).addJob(shipment8);
+        vrpBuilder.addJob(shipment9).addJob(shipment10).addJob(shipment11).addJob(shipment12);
+        vrpBuilder.addJob(shipment13).addJob(shipment14).addJob(shipment15).addJob(shipment16);
+        */
+
+        vrpBuilder.setFleetSize(FleetSize.FINITE);
+        VehicleRoutingProblem problem = vrpBuilder.build();
+
+
+        StateManager stateManager = new StateManager(problem);
+        ConstraintManager constraintManager = new ConstraintManager(problem, stateManager);
+        constraintManager.addConstraint(new SericePickuptFirstConstraing(), ConstraintManager.Priority.CRITICAL);
+
+        VehicleRoutingAlgorithm algorithm = Jsprit.Builder.newInstance(problem).setStateAndConstraintManager(stateManager,constraintManager).buildAlgorithm();
+
+//		algorithm.setMaxIterations(30000);
+        /*
+         * and search a solution
+		 */
+        Collection<VehicleRoutingProblemSolution> solutions = algorithm.searchSolutions();
+
+        VehicleRoutingProblemSolution s = Solutions.bestOf(solutions);
+        for(VehicleRoute route: s.getRoutes()){
+           for(TourActivity ac: route.getActivities()){
+            if(ac instanceof PickupService){
+                Pickup xs = (Pickup) ((PickupService)ac).getJob();
+                System.out.println(xs.getId()+"->"+estacionmaps.get(Integer.parseInt(xs.getLocation().getId())));
+            }else if(ac instanceof DeliverService){
+  
+                Delivery xs = (Delivery) ((DeliverService)ac).getJob();
+                System.out.println(xs.getId()+"->"+estacionmaps.get(Integer.parseInt(xs.getLocation().getId())));
+               
+            }
+           }
+            
+        }
+         
+       
+
+		/*
+		 * print nRoutes and totalCosts of bestSolution
+		 */
+        //SolutionPrinter.print(problem, Solutions.bestOf(solutions), SolutionPrinter.Print.VERBOSE);
+       // new GraphStreamViewer(problem, Solutions.bestOf(solutions)).setRenderDelay(100).display();
+    }
+
+
+    private static Location loc(Coordinate coordinate) {
+        return Location.Builder.newInstance().setCoordinate(coordinate).build();
+    }
+
+}
+
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleDepotExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleDepotExample.java
index a1b4829e7..c2629ac53 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleDepotExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleDepotExample.java
@@ -49,10 +49,12 @@ public static void main(String[] args) {
         Examples.createOutputFolder();
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
+
+        
         /*
          * Read cordeau-instance p01, BUT only its services without any vehicles
 		 */
-        new VrpXMLReader(vrpBuilder).read("input/vrp_cordeau_01.xml");
+        new VrpXMLReader(vrpBuilder).read("/Users/chunhaulai/Documents/workspace-vrp/jsprit/jsprit-examples/input/vrp_cordeau_01.xml");
 
 		/*
          * add vehicles with its depots
@@ -100,8 +102,8 @@ public static void main(String[] args) {
          * solve the problem
 		 */
         VehicleRoutingAlgorithm vra = Jsprit.Builder.newInstance(vrp).setProperty(Jsprit.Parameter.THREADS, "5").buildAlgorithm();
-        vra.getAlgorithmListeners().addListener(new StopWatch(), Priority.HIGH);
-        vra.getAlgorithmListeners().addListener(new AlgorithmSearchProgressChartListener("output/progress.png"));
+       // vra.getAlgorithmListeners().addListener(new StopWatch(), Priority.HIGH);
+        //vra.getAlgorithmListeners().addListener(new AlgorithmSearchProgressChartListener("output/progress.png"));
         Collection<VehicleRoutingProblemSolution> solutions = vra.searchSolutions();
 
         SolutionPrinter.print(Solutions.bestOf(solutions));
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleDepotExample2.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleDepotExample2.java
index 1145f31fc..198f6428b 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleDepotExample2.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleDepotExample2.java
@@ -54,7 +54,7 @@ public static void main(String[] args) {
         /*
          * Read cordeau-instance p01, BUT only its services without any vehicles
 		 */
-        new CordeauReader(vrpBuilder).read("input/p08");
+        new CordeauReader(vrpBuilder).read("/Users/chunhaulai/Documents/workspace-vrp/jsprit/jsprit-examples/input/p08");
 
 		/*
          * add vehicles with its depots
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/PickupAndDeliveryExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/PickupAndDeliveryExample.java
index 9b4dfedb5..97956cd7c 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/PickupAndDeliveryExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/PickupAndDeliveryExample.java
@@ -52,7 +52,7 @@ public static void main(String[] args) {
 		/*
          * A solomonReader reads solomon-instance files, and stores the required information in the builder.
 		 */
-        new VrpXMLReader(vrpBuilder).read("input/pickups_and_deliveries_solomon_r101_withoutTWs.xml");
+        new VrpXMLReader(vrpBuilder).read("/Users/chunhaulai/Documents/workspace-vrp/jsprit/jsprit-examples/input/pickups_and_deliveries_solomon_r101_withoutTWs.xml");
 
 		/*
          * Finally, the problem can be built. By default, transportCosts are crowFlyDistances (as usually used for vrp-instances).
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/PickupAndDeliveryExample2.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/PickupAndDeliveryExample2.java
index 0921bcdce..9dccfa850 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/PickupAndDeliveryExample2.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/PickupAndDeliveryExample2.java
@@ -52,7 +52,7 @@ public static void main(String[] args) {
 		/*
          * A solomonReader reads solomon-instance files, and stores the required information in the builder.
 		 */
-        new VrpXMLReader(vrpBuilder).read("input/pd_christophides_vrpnc1_vcap50.xml");
+        new VrpXMLReader(vrpBuilder).read("/Users/chunhaulai/Documents/workspace-vrp/jsprit/jsprit-examples/input/pd_christophides_vrpnc1_vcap50.xml");
 
 		/*
          * Finally, the problem can be built. By default, transportCosts are crowFlyDistances (as usually used for vrp-instances).
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/PickupAndDeliveryOpenExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/PickupAndDeliveryOpenExample.java
index 1c622a6b1..8677da7d8 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/PickupAndDeliveryOpenExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/PickupAndDeliveryOpenExample.java
@@ -51,7 +51,7 @@ public static void main(String[] args) {
 		/*
          * A solomonReader reads solomon-instance files, and stores the required information in the builder.
 		 */
-        new VrpXMLReader(vrpBuilder).read("input/pickups_and_deliveries_solomon_r101_withoutTWs_open.xml");
+        new VrpXMLReader(vrpBuilder).read("/Users/chunhaulai/Documents/workspace-vrp/jsprit/jsprit-examples/input/pickups_and_deliveries_solomon_r101_withoutTWs_open.xml");
 
 		/*
          * Finally, the problem can be built. By default, transportCosts are crowFlyDistances (as usually used for vrp-instances).
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/util/MetroCosts.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/util/MetroCosts.java
new file mode 100644
index 000000000..b0dfd1a6f
--- /dev/null
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/util/MetroCosts.java
@@ -0,0 +1,97 @@
+/*
+ * Licensed to GraphHopper GmbH under one or more contributor
+ * license agreements. See the NOTICE file distributed with this work for
+ * additional information regarding copyright ownership.
+ *
+ * GraphHopper GmbH licenses this file to you under the Apache License,
+ * Version 2.0 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+/**
+ *
+ */
+package com.graphhopper.jsprit.util;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
+import com.graphhopper.jsprit.core.problem.driver.Driver;
+import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
+import com.graphhopper.jsprit.core.util.EuclideanCosts;
+import com.graphhopper.jsprit.core.util.Locations;
+
+import org.jgrapht.alg.shortestpath.DijkstraShortestPath;
+import org.jgrapht.graph.DefaultWeightedEdge;
+import org.jgrapht.graph.DirectedWeightedMultigraph;
+
+
+
+/**
+ * @author stefan schroeder
+ */
+public class MetroCosts implements VehicleRoutingTransportCosts {
+
+    private Map<String,Double> transportDistance = new HashMap<String,Double>();
+
+    private Map<String,Double> transportTime = new HashMap<String,Double>();
+    private DirectedWeightedMultigraph<Integer, DefaultWeightedEdge> graph;
+    DijkstraShortestPath<Integer, DefaultWeightedEdge> dij = null;
+ 
+    public MetroCosts(DirectedWeightedMultigraph<Integer, DefaultWeightedEdge>  graph) {
+        this.graph = graph;
+        this.dij = new DijkstraShortestPath<Integer, DefaultWeightedEdge>(this.graph);
+     }
+
+    
+
+    @Override
+    public double getTransportTime(Location from, Location to, double departureTime, Driver driver, Vehicle vehicle) {
+        if(!transportTime.containsKey(from.getId()+"-"+to.getId())){
+            double distance = dij.getPathWeight(Integer.parseInt(from.getId()),Integer.parseInt(to.getId())) ; 
+            transportTime.put(from.getId()+"-"+to.getId(),distance); 
+        }
+        return transportTime.get(from.getId()+"-"+to.getId());
+
+ 
+    }
+
+    @Override
+    public double getBackwardTransportTime(Location from, Location to, double arrivalTime, Driver driver, Vehicle vehicle) {
+        return getTransportTime(from, to, arrivalTime, driver, vehicle);
+    }
+
+    @Override
+    public double getTransportCost(Location from, Location to, double departureTime, Driver driver, Vehicle vehicle) {
+
+        double distance = getDistance(from, to, departureTime, vehicle);
+        if (vehicle != null && vehicle.getType() != null) {
+            return distance * vehicle.getType().getVehicleCostParams().perDistanceUnit;
+        }
+        return distance;
+ 
+    }
+
+    @Override
+    public double getBackwardTransportCost(Location from, Location to, double arrivalTime, Driver driver,   Vehicle vehicle) {
+        return getTransportCost(from, to, arrivalTime, driver, vehicle);
+    }
+
+    @Override
+    public double getDistance(Location from, Location to, double departureTime, Vehicle vehicle) {
+        if(!transportDistance.containsKey(from.getId()+"-"+to.getId())){
+            double distance = dij.getPath(Integer.parseInt(from.getId()),Integer.parseInt(to.getId())).getVertexList().size(); 
+            transportDistance.put(from.getId()+"-"+to.getId(),distance); 
+        }
+        return transportDistance.get(from.getId()+"-"+to.getId());
+	}
+}
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/util/SericePickuptFirstConstraing.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/util/SericePickuptFirstConstraing.java
new file mode 100644
index 000000000..897c68304
--- /dev/null
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/util/SericePickuptFirstConstraing.java
@@ -0,0 +1,104 @@
+
+package com.graphhopper.jsprit.util;
+
+import java.util.HashSet;
+import java.util.Set;
+
+import com.graphhopper.jsprit.core.problem.constraint.HardActivityConstraint;
+import com.graphhopper.jsprit.core.problem.job.Delivery;
+import com.graphhopper.jsprit.core.problem.job.Pickup;
+import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
+import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.*;
+
+public class SericePickuptFirstConstraing implements HardActivityConstraint {
+
+    @Override
+    public ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prevAct, TourActivity newAct, TourActivity nextAct, double prevActDepTime) {
+        /*
+        VehicleRoute route = iFacts.getRoute();
+        Set<String> orderIds = new HashSet<String>();
+        for(TourActivity ac: route.getActivities()){
+            if(ac instanceof PickupService){
+                Pickup s = (Pickup) ((PickupService)ac).getJob();
+                orderIds.add(s.getId());
+                
+            }else if(ac instanceof DeliverService){
+                if(orderIds.isEmpty())  return ConstraintsStatus.NOT_FULFILLED;
+ 
+                Delivery s = (Delivery) ((DeliverService)ac).getJob();
+               
+                
+                for(String ids: orderIds){
+                    if(!ids.contains(s.getId()+"::"))  
+                        return ConstraintsStatus.NOT_FULFILLED;
+ 
+                }
+                
+            }else{
+               
+            }
+        }
+        return ConstraintsStatus.FULFILLED;
+        */
+
+        if (newAct instanceof DeliverService  && nextAct instanceof PickupService) {
+            return ConstraintsStatus.NOT_FULFILLED;
+        }
+        if (newAct instanceof ServiceActivity && nextAct instanceof PickupService) {
+            return ConstraintsStatus.NOT_FULFILLED;
+        }
+        if (newAct instanceof PickupService  && prevAct instanceof DeliverService) {
+            return ConstraintsStatus.NOT_FULFILLED_BREAK;
+        }
+        if (newAct instanceof PickupService && prevAct instanceof ServiceActivity) {
+            return ConstraintsStatus.NOT_FULFILLED_BREAK;
+        }
+
+        if (newAct instanceof PickupShipment  && prevAct instanceof DeliverService) {
+            return ConstraintsStatus.NOT_FULFILLED_BREAK;
+        }
+        if (newAct instanceof PickupService && prevAct instanceof PickupShipment) {
+            return ConstraintsStatus.NOT_FULFILLED_BREAK;
+        }
+        if (newAct instanceof DeliverShipment && nextAct instanceof PickupService) {
+            return ConstraintsStatus.NOT_FULFILLED;
+        }
+        if (newAct instanceof PickupShipment && nextAct instanceof PickupService) {
+            return ConstraintsStatus.NOT_FULFILLED;
+        }
+ 
+        return ConstraintsStatus.FULFILLED;
+
+      /*
+        if (newAct instanceof  DeliverService && nextAct instanceof  PickupService) {
+            return ConstraintsStatus.NOT_FULFILLED;
+        }
+        if (newAct instanceof ServiceActivity && nextAct instanceof PickupService) {
+            return ConstraintsStatus.NOT_FULFILLED;
+        }
+        if (newAct instanceof PickupService && prevAct instanceof  DeliverService) {
+            return ConstraintsStatus.NOT_FULFILLED_BREAK;
+        }
+        if (newAct instanceof DeliverService && prevAct instanceof ServiceActivity) {
+            return ConstraintsStatus.NOT_FULFILLED_BREAK;
+        }
+
+        if (newAct instanceof DeliverService && prevAct instanceof PickupShipment) {
+            return ConstraintsStatus.NOT_FULFILLED_BREAK;
+        }
+        if (newAct instanceof DeliverService && prevAct instanceof DeliverShipment) {
+            return ConstraintsStatus.NOT_FULFILLED_BREAK;
+        }
+        if (newAct instanceof PickupShipment && nextAct instanceof DeliverService) {
+            return ConstraintsStatus.NOT_FULFILLED;
+        }
+        if (newAct instanceof DeliverShipment && nextAct instanceof DeliverService) {
+            return ConstraintsStatus.NOT_FULFILLED;
+        }
+
+        return ConstraintsStatus.FULFILLED;ç
+        */
+    }
+
+}
