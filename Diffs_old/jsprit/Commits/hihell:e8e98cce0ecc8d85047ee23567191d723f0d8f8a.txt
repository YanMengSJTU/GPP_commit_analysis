diff --git a/jsprit-examples/input/pickups_and_deliveries_solomon_r101_simple.xml b/jsprit-examples/input/pickups_and_deliveries_solomon_r101_simple.xml
new file mode 100644
index 000000000..d8f3e2521
--- /dev/null
+++ b/jsprit-examples/input/pickups_and_deliveries_solomon_r101_simple.xml
@@ -0,0 +1,62 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<problem xmlns="http://www.w3schools.com"
+         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://www.w3schools.com vrp_xml_schema.xsd">
+    <problemType>
+        <fleetSize>INFINITE</fleetSize>
+        <fleetComposition>HOMOGENEOUS</fleetComposition>
+    </problemType>
+    <vehicles>
+        <vehicle>
+            <id>solomonVehicle</id>
+            <typeId>solomonType</typeId>
+            <location>
+                <id>0</id>
+                <coord x="35.0" y="35.0"/>
+            </location>
+            <timeSchedule>
+                <start>0.0</start>
+                <end>230.0</end>
+            </timeSchedule>
+            <returnToDepot>false</returnToDepot>
+        </vehicle>
+    </vehicles>
+    <vehicleTypes>
+        <type>
+            <id>solomonType</id>
+            <capacity>200</capacity>
+            <costs>
+                <fixed>0.0</fixed>
+                <distance>1.0</distance>
+                <time>0.0</time>
+            </costs>
+        </type>
+    </vehicleTypes>
+    <services>
+        <service id="35" type="delivery">
+            <locationId>[x=63.0][y=65.0]</locationId>
+            <coord x="63.0" y="65.0"/>
+            <capacity-demand>8</capacity-demand>
+            <duration>10.0</duration>
+            <timeWindows>
+                <timeWindow>
+                    <start>143.0</start>
+                    <end>153.0</end>
+                </timeWindow>
+            </timeWindows>
+        </service>
+        <service id="36" type="pickup">
+            <locationId>[x=2.0][y=60.0]</locationId>
+            <coord x="2.0" y="60.0"/>
+            <capacity-demand>5</capacity-demand>
+            <duration>10.0</duration>
+            <timeWindows>
+                <timeWindow>
+                    <start>41.0</start>
+                    <end>51.0</end>
+                </timeWindow>
+            </timeWindows>
+        </service>
+
+    </services>
+</problem>
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/PickupAndDeliveryExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/PickupAndDeliveryExample.java
index a1fcbfa93..9528d0462 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/PickupAndDeliveryExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/PickupAndDeliveryExample.java
@@ -36,6 +36,8 @@
 
 public class PickupAndDeliveryExample {
 
+    public static String exampleBase = "/Users/jiusi/IdeaProjects/jsprit/jsprit-examples/";
+
     public static void main(String[] args) {
 
 		/*
@@ -53,15 +55,15 @@ public static void main(String[] args) {
 		/*
          * A solomonReader reads solomon-instance files, and stores the required information in the builder.
 		 */
-        new VrpXMLReader(vrpBuilder).read("input/pickups_and_deliveries_solomon_r101_withoutTWs.xml");
-
+//        new VrpXMLReader(vrpBuilder).read(exampleBase + "/input/pickups_and_deliveries_solomon_r101_withoutTWs.xml");
+        new VrpXMLReader(vrpBuilder).read(exampleBase + "input/pickups_and_deliveries_solomon_r101_simple.xml");
 		/*
          * Finally, the problem can be built. By default, transportCosts are crowFlyDistances (as usually used for vrp-instances).
 		 */
 
         final VehicleRoutingProblem vrp = vrpBuilder.build();
 
-        new Plotter(vrp).plot("output/pd_solomon_r101.png", "pd_r101");
+        new Plotter(vrp).plot(exampleBase + "output/pd_solomon_r101.png", "pd_r101");
 
 
 		/*
@@ -70,8 +72,8 @@ public static void main(String[] args) {
 		 * The algorithm can be defined and configured in an xml-file.
 		 */
 //		VehicleRoutingAlgorithm vra = new SchrimpfFactory().createAlgorithm(vrp);
-        VehicleRoutingAlgorithm vra = VehicleRoutingAlgorithms.readAndCreateAlgorithm(vrp, "input/algorithmConfig_solomon.xml");
-        vra.getAlgorithmListeners().addListener(new AlgorithmSearchProgressChartListener("output/sol_progress.png"));
+        VehicleRoutingAlgorithm vra = VehicleRoutingAlgorithms.readAndCreateAlgorithm(vrp, exampleBase + "/input/algorithmConfig_solomon.xml");
+        vra.getAlgorithmListeners().addListener(new AlgorithmSearchProgressChartListener(exampleBase + "/output/sol_progress.png"));
         /*
          * Solve the problem.
 		 *
@@ -95,7 +97,7 @@ public static void main(String[] args) {
 //		SolutionPlotter.plotSolutionAsPNG(vrp, solution, "output/pd_solomon_r101_solution.png","pd_r101");
         Plotter plotter = new Plotter(vrp, solution);
         plotter.setLabel(Label.SIZE);
-        plotter.plot("output/pd_solomon_r101_solution.png", "pd_r101");
+        plotter.plot(exampleBase + "output/pd_solomon_r101_solution.png", "pd_r101");
 
         //some stats
         SolutionAnalyser analyser = new SolutionAnalyser(vrp, solution, new TransportDistance() {
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryOpenRoutesExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryOpenRoutesExample.java
index b03c0c6eb..1442d221a 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryOpenRoutesExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryOpenRoutesExample.java
@@ -54,11 +54,18 @@ public static void main(String[] args) {
 		/*
          * get a vehicle-builder and build a vehicle located at (10,10) with type "vehicleType"
 		 */
-        Builder vehicleBuilder = VehicleImpl.Builder.newInstance("vehicle");
-        vehicleBuilder.setStartLocation(loc(Coordinate.newInstance(10, 10)));
+        Builder vehicleBuilder = VehicleImpl.Builder.newInstance("vehicle1");
+        vehicleBuilder.setStartLocation(loc(Coordinate.newInstance(5, 20)));
         vehicleBuilder.setType(vehicleType);
         vehicleBuilder.setReturnToDepot(false);
-        VehicleImpl vehicle = vehicleBuilder.build();
+        VehicleImpl vehicle1 = vehicleBuilder.build();
+
+        vehicleBuilder = VehicleImpl.Builder.newInstance("vehicle2");
+        vehicleBuilder.setStartLocation(loc(Coordinate.newInstance(10,10)));
+        vehicleBuilder.setType(vehicleType);
+        vehicleBuilder.setReturnToDepot(false);
+        VehicleImpl vehicle2 = vehicleBuilder.build();
+
 
 		/*
          * build shipments at the required locations, each with a capacity-demand of 1.
@@ -72,13 +79,16 @@ public static void main(String[] args) {
         Shipment shipment1 = Shipment.Builder.newInstance("1").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(5, 7))).setDeliveryLocation(loc(Coordinate.newInstance(6, 9))).build();
         Shipment shipment2 = Shipment.Builder.newInstance("2").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(5, 13))).setDeliveryLocation(loc(Coordinate.newInstance(6, 11))).build();
 
-        Shipment shipment3 = Shipment.Builder.newInstance("3").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(15, 7))).setDeliveryLocation(loc(Coordinate.newInstance(14, 9))).build();
-        Shipment shipment4 = Shipment.Builder.newInstance("4").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(15, 13))).setDeliveryLocation(loc(Coordinate.newInstance(14, 11))).build();
+        Shipment shipment3 = Shipment.Builder.newInstance("3").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(11, 12))).setDeliveryLocation(loc(Coordinate.newInstance(12, 12))).build();
+//        Shipment shipment4 = Shipment.Builder.newInstance("4").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(15, 13))).setDeliveryLocation(loc(Coordinate.newInstance(14, 11))).build();
 
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
-        vrpBuilder.addVehicle(vehicle);
-        vrpBuilder.addJob(shipment1).addJob(shipment2).addJob(shipment3).addJob(shipment4);
+        vrpBuilder.addVehicle(vehicle1);
+        vrpBuilder.addVehicle(vehicle2);
+        vrpBuilder.setFleetSize(VehicleRoutingProblem.FleetSize.FINITE);
+//        vrpBuilder.addJob(shipment1).addJob(shipment2).addJob(shipment3).addJob(shipment4);
+        vrpBuilder.addJob(shipment1).addJob(shipment2).addJob(shipment3);
 
         VehicleRoutingProblem problem = vrpBuilder.build();
 
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExample.java
index adeeef29e..1132b3192 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExample.java
@@ -39,6 +39,7 @@
 public class SimpleExample {
 
 
+
     public static void main(String[] args) {
         /*
          * some preparation - create output folder
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/VRPWithBackhaulsExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/VRPWithBackhaulsExample.java
index 2c5336e72..2afa43cdb 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/VRPWithBackhaulsExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/VRPWithBackhaulsExample.java
@@ -39,7 +39,6 @@
 
     public static String exampleBase = "/Users/jiusi/IdeaProjects/jsprit/jsprit-examples/";
 
-
     public static void main(String[] args) {
 
 		/*
@@ -75,17 +74,19 @@ public static void main(String[] args) {
         VehicleRoutingAlgorithmBuilder vraBuilder = new VehicleRoutingAlgorithmBuilder(vrp, exampleBase + "/input/algorithmConfig_solomon.xml");
         vraBuilder.addCoreConstraints();
         vraBuilder.addDefaultCostCalculators();
+
+
         StateManager stateManager = new StateManager(vrp);
+
         ConstraintManager constraintManager = new ConstraintManager(vrp, stateManager);
+
         constraintManager.addConstraint(new ServiceDeliveriesFirstConstraint(), ConstraintManager.Priority.CRITICAL);
         vraBuilder.setStateAndConstraintManager(stateManager, constraintManager);
         VehicleRoutingAlgorithm vra = vraBuilder.build();
         vra.getAlgorithmListeners().addListener(new AlgorithmSearchProgressChartListener(exampleBase + "/output/sol_progress.png"));
         /*
          * Solve the problem.
-		 *
-		 *
-		 */
+		 * */
         Collection<VehicleRoutingProblemSolution> solutions = vra.searchSolutions();
 
 		/*
