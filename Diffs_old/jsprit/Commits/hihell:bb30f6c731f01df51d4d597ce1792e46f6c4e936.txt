diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/VRPWithBackhaulsExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/VRPWithBackhaulsExample.java
index d1708ebb2..2c5336e72 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/VRPWithBackhaulsExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/VRPWithBackhaulsExample.java
@@ -33,8 +33,13 @@
 import java.util.Collection;
 
 
+
+
 public class VRPWithBackhaulsExample {
 
+    public static String exampleBase = "/Users/jiusi/IdeaProjects/jsprit/jsprit-examples/";
+
+
     public static void main(String[] args) {
 
 		/*
@@ -52,7 +57,7 @@ public static void main(String[] args) {
 		/*
          * A solomonReader reads solomon-instance files, and stores the required information in the builder.
 		 */
-        new VrpXMLReader(vrpBuilder).read("input/pickups_and_deliveries_solomon_r101.xml");
+        new VrpXMLReader(vrpBuilder).read(exampleBase + "/input/pickups_and_deliveries_solomon_r101.xml");
 
 		/*
          * Finally, the problem can be built. By default, transportCosts are crowFlyDistances (as usually used for vrp-instances).
@@ -67,7 +72,7 @@ public static void main(String[] args) {
 		 *
 		 * The algorithm can be defined and configured in an xml-file.
 		 */
-        VehicleRoutingAlgorithmBuilder vraBuilder = new VehicleRoutingAlgorithmBuilder(vrp, "input/algorithmConfig_solomon.xml");
+        VehicleRoutingAlgorithmBuilder vraBuilder = new VehicleRoutingAlgorithmBuilder(vrp, exampleBase + "/input/algorithmConfig_solomon.xml");
         vraBuilder.addCoreConstraints();
         vraBuilder.addDefaultCostCalculators();
         StateManager stateManager = new StateManager(vrp);
@@ -75,7 +80,7 @@ public static void main(String[] args) {
         constraintManager.addConstraint(new ServiceDeliveriesFirstConstraint(), ConstraintManager.Priority.CRITICAL);
         vraBuilder.setStateAndConstraintManager(stateManager, constraintManager);
         VehicleRoutingAlgorithm vra = vraBuilder.build();
-        vra.getAlgorithmListeners().addListener(new AlgorithmSearchProgressChartListener("output/sol_progress.png"));
+        vra.getAlgorithmListeners().addListener(new AlgorithmSearchProgressChartListener(exampleBase + "/output/sol_progress.png"));
         /*
          * Solve the problem.
 		 *
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/VRPWithBackhaulsExample2.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/VRPWithBackhaulsExample2.java
index 28bf71d4d..f4c181028 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/VRPWithBackhaulsExample2.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/VRPWithBackhaulsExample2.java
@@ -41,6 +41,8 @@
 
 public class VRPWithBackhaulsExample2 {
 
+    public static String exampleBase = "/Users/jiusi/IdeaProjects/jsprit/jsprit-examples/";
+
     public static void main(String[] args) {
 
 		/*
@@ -58,7 +60,7 @@ public static void main(String[] args) {
 		/*
          * A solomonReader reads solomon-instance files, and stores the required information in the builder.
 		 */
-        new VrpXMLReader(vrpBuilder).read("input/pd_christophides_vrpnc1_vcap50.xml");
+        new VrpXMLReader(vrpBuilder).read(exampleBase + "/input/pd_christophides_vrpnc1_vcap50.xml");
 
 
 		/*
@@ -94,7 +96,7 @@ public static void main(String[] args) {
             .setProperty(Jsprit.Parameter.FIXED_COST_PARAM.toString(), "0.")
             .buildAlgorithm();
         vra.setMaxIterations(2000);
-        vra.addListener(new AlgorithmSearchProgressChartListener("output/search"));
+        vra.addListener(new AlgorithmSearchProgressChartListener(exampleBase + "/output/search"));
 
 
 
@@ -121,7 +123,7 @@ public static void main(String[] args) {
 //		SolutionPlotter.plotSolutionAsPNG(vrp, solution, "output/pd_solomon_r101_solution.png","pd_r101");
         Plotter plotter = new Plotter(vrp, solution);
 //		plotter.setLabel(Plotter.Label.SIZE);
-        plotter.plot("output/vrpwbh_christophides_vrpnc1_solution.png", "vrpwbh_vrpnc1");
+        plotter.plot(exampleBase + "/output/vrpwbh_christophides_vrpnc1_solution.png", "vrpwbh_vrpnc1");
 
         SolutionAnalyser analyser = new SolutionAnalyser(vrp, solution, new TransportDistance() {
 
