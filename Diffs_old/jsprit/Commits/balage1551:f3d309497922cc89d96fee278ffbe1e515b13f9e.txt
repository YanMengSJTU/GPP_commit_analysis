diff --git a/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/AlgorithmEventsRecorder.java b/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/AlgorithmEventsRecorder.java
index 9af5f4db9..e1bcadeb6 100644
--- a/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/AlgorithmEventsRecorder.java
+++ b/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/AlgorithmEventsRecorder.java
@@ -329,14 +329,14 @@ private void initialiseGraph(VehicleRoutingProblem problem) {
     private void addJob(Job job) {
         if (job instanceof Service) {
             Service service = (Service) job;
-            addNode(service.getId(), service.getLocation().getCoordinate());
+            addNode(service.getId(), service.getActivity().getLocation().getCoordinate());
             markSingleActivityJob(service);
         } else if (job instanceof Shipment) {
             Shipment shipment = (Shipment) job;
             String fromNodeId = getFromNodeId(shipment);
-            addNode(fromNodeId, shipment.getPickupLocation().getCoordinate());
+            addNode(fromNodeId, shipment.getPickupActivity().getLocation().getCoordinate());
             String toNodeId = getToNodeId(shipment);
-            addNode(toNodeId, shipment.getDeliveryLocation().getCoordinate());
+            addNode(toNodeId, shipment.getDeliveryActivity().getLocation().getCoordinate());
             markShipment(shipment);
             if (renderShipments) {
                 Edge e = graph.addEdge("shipment_" + fromNodeId + "_" + toNodeId, fromNodeId, toNodeId, true);
diff --git a/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/GraphStreamViewer.java b/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/GraphStreamViewer.java
index fd4b3114e..36b85ab6a 100644
--- a/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/GraphStreamViewer.java
+++ b/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/GraphStreamViewer.java
@@ -18,6 +18,27 @@
 package com.graphhopper.jsprit.analysis.toolbox;
 
 
+import java.awt.Color;
+import java.awt.Dimension;
+import java.awt.FlowLayout;
+import java.awt.Font;
+
+import javax.swing.BorderFactory;
+import javax.swing.BoxLayout;
+import javax.swing.JFormattedTextField;
+import javax.swing.JFrame;
+import javax.swing.JLabel;
+import javax.swing.JPanel;
+import javax.swing.WindowConstants;
+
+import org.graphstream.graph.Edge;
+import org.graphstream.graph.Graph;
+import org.graphstream.graph.Node;
+import org.graphstream.graph.implementations.MultiGraph;
+import org.graphstream.ui.swingViewer.ViewPanel;
+import org.graphstream.ui.view.View;
+import org.graphstream.ui.view.Viewer;
+
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.job.Service;
@@ -30,24 +51,13 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.util.Time;
-import org.graphstream.graph.Edge;
-import org.graphstream.graph.Graph;
-import org.graphstream.graph.Node;
-import org.graphstream.graph.implementations.MultiGraph;
-import org.graphstream.ui.swingViewer.ViewPanel;
-import org.graphstream.ui.view.View;
-import org.graphstream.ui.view.Viewer;
-
-import javax.swing.*;
-import java.awt.*;
 
 
 public class GraphStreamViewer {
 
     public static class StyleSheets {
 
-        public static String BLUE_FOREST =
-            "graph { fill-color: #141F2E; }" +
+        public static String BLUE_FOREST = "graph { fill-color: #141F2E; }" +
                 "node {" +
                 "	size: 7px, 7px;" +
                 "   fill-color: #A0FFA0;" +
@@ -96,27 +106,25 @@
                 "	fill-color: #D3D3D3;" +
                 "	arrow-size: 6px,3px;" +
                 "}" +
-//                    "edge.inserted {" +
-//                    "	fill-color: #A0FFA0;" +
-//                    "	arrow-size: 6px,3px;" +
-//                    "   shadow-mode: gradient-radial;" +
-//                    "   shadow-width: 10px; shadow-color: #EEF, #000; shadow-offset: 0px;" +
-//                    "}" +
-//                    "edge.removed {" +
-//                    "	fill-color: #FF0000;" +
-//                    "	arrow-size: 6px,3px;" +
-//                    "   shadow-mode: gradient-radial;" +
-//                    "   shadow-width: 10px; shadow-color: #EEF, #000; shadow-offset: 0px;" +
-//                    "}" +
+                //                    "edge.inserted {" +
+                //                    "	fill-color: #A0FFA0;" +
+                //                    "	arrow-size: 6px,3px;" +
+                //                    "   shadow-mode: gradient-radial;" +
+                //                    "   shadow-width: 10px; shadow-color: #EEF, #000; shadow-offset: 0px;" +
+                //                    "}" +
+                //                    "edge.removed {" +
+                //                    "	fill-color: #FF0000;" +
+                //                    "	arrow-size: 6px,3px;" +
+                //                    "   shadow-mode: gradient-radial;" +
+                //                    "   shadow-width: 10px; shadow-color: #EEF, #000; shadow-offset: 0px;" +
+                //                    "}" +
                 "edge.shipment {" +
                 "	fill-color: #999;" +
                 "	arrow-size: 6px,3px;" +
                 "}";
 
 
-        @SuppressWarnings("UnusedDeclaration")
-        public static String SIMPLE_WHITE =
-            "node {" +
+        public static String SIMPLE_WHITE = "node {" +
                 "	size: 10px, 10px;" +
                 "   fill-color: #6CC644;" +
                 "	text-alignment: at-right;" +
@@ -184,8 +192,7 @@ public static ViewPanel createEmbeddedView(Graph graph, double scaling) {
         return view;
     }
 
-    public static String STYLESHEET =
-        "node {" +
+    public static String STYLESHEET = "node {" +
             "	size: 10px, 10px;" +
             "   fill-color: #6CC644;" +
             "	text-alignment: at-right;" +
@@ -286,7 +293,7 @@ public GraphStreamViewer labelWith(Label label) {
     }
 
     public GraphStreamViewer setRenderDelay(long ms) {
-        this.renderDelay_in_ms = ms;
+        renderDelay_in_ms = ms;
         return this;
     }
 
@@ -296,19 +303,22 @@ public GraphStreamViewer setRenderShipments(boolean renderShipments) {
     }
 
     public GraphStreamViewer setGraphStreamFrameScalingFactor(double factor) {
-        this.scaling = factor;
+        scaling = factor;
         return this;
     }
 
     /**
-     * Sets the camera-view. Center describes the center-focus of the camera and zoomFactor its
-     * zoomFactor.
+     * Sets the camera-view. Center describes the center-focus of the camera and zoomFactor its zoomFactor.
+     * <p>
      * <p>
-     * <p>a zoomFactor < 1 zooms in and > 1 out.
+     * a zoomFactor < 1 zooms in and > 1 out.
      *
-     * @param centerX    x coordinate of center
-     * @param centerY    y coordinate of center
-     * @param zoomFactor zoom factor
+     * @param centerX
+     *            x coordinate of center
+     * @param centerY
+     *            y coordinate of center
+     * @param zoomFactor
+     *            zoom factor
      * @return the viewer
      */
     public GraphStreamViewer setCameraView(double centerX, double centerY, double zoomFactor) {
@@ -436,7 +446,9 @@ private JPanel createResultPanel() {
         jobs.setPreferredSize(new Dimension((int) (40 * scaling), (int) (25 * scaling)));
 
         int noJobs = 0;
-        if (this.vrp != null) noJobs = this.vrp.getJobs().values().size();
+        if (vrp != null) {
+            noJobs = vrp.getJobs().values().size();
+        }
 
         JFormattedTextField nJobs = new JFormattedTextField(noJobs);
         nJobs.setFont(font);
@@ -492,32 +504,40 @@ private JPanel createResultPanel() {
     }
 
     private Integer getNoRoutes() {
-        if (solution != null) return solution.getRoutes().size();
+        if (solution != null) {
+            return solution.getRoutes().size();
+        }
         return 0;
     }
 
     private Double getSolutionCosts() {
-        if (solution != null) return solution.getCost();
+        if (solution != null) {
+            return solution.getCost();
+        }
         return 0.0;
     }
 
     private void renderShipment(Graph g, Shipment shipment, Label label, boolean renderShipments) {
 
-        Node n1 = g.addNode(makeId(shipment.getId(), shipment.getPickupLocation().getId()));
-        if (label.equals(Label.ID)) n1.addAttribute("ui.label", shipment.getId());
-        n1.addAttribute("x", shipment.getPickupLocation().getCoordinate().getX());
-        n1.addAttribute("y", shipment.getPickupLocation().getCoordinate().getY());
+        Node n1 = g.addNode(makeId(shipment.getId(), shipment.getPickupActivity().getLocation().getId()));
+        if (label.equals(Label.ID)) {
+            n1.addAttribute("ui.label", shipment.getId());
+        }
+        n1.addAttribute("x", shipment.getPickupActivity().getLocation().getCoordinate().getX());
+        n1.addAttribute("y", shipment.getPickupActivity().getLocation().getCoordinate().getY());
         n1.setAttribute("ui.class", "pickup");
 
-        Node n2 = g.addNode(makeId(shipment.getId(), shipment.getDeliveryLocation().getId()));
-        if (label.equals(Label.ID)) n2.addAttribute("ui.label", shipment.getId());
-        n2.addAttribute("x", shipment.getDeliveryLocation().getCoordinate().getX());
-        n2.addAttribute("y", shipment.getDeliveryLocation().getCoordinate().getY());
+        Node n2 = g.addNode(makeId(shipment.getId(), shipment.getDeliveryActivity().getLocation().getId()));
+        if (label.equals(Label.ID)) {
+            n2.addAttribute("ui.label", shipment.getId());
+        }
+        n2.addAttribute("x", shipment.getDeliveryActivity().getLocation().getCoordinate().getX());
+        n2.addAttribute("y", shipment.getDeliveryActivity().getLocation().getCoordinate().getY());
         n2.setAttribute("ui.class", "delivery");
 
         if (renderShipments) {
-            Edge s = g.addEdge(shipment.getId(), makeId(shipment.getId(), shipment.getPickupLocation().getId()),
-                makeId(shipment.getId(), shipment.getDeliveryLocation().getId()), true);
+            Edge s = g.addEdge(shipment.getId(), makeId(shipment.getId(), shipment.getPickupActivity().getLocation().getId()),
+                    makeId(shipment.getId(), shipment.getDeliveryActivity().getLocation().getId()), true);
             s.addAttribute("ui.class", "shipment");
         }
 
@@ -533,12 +553,18 @@ private void sleep(long renderDelay_in_ms2) {
     }
 
     private void renderService(Graph g, Service service, Label label) {
-        Node n = g.addNode(makeId(service.getId(), service.getLocation().getId()));
-        if (label.equals(Label.ID)) n.addAttribute("ui.label", service.getId());
-        n.addAttribute("x", service.getLocation().getCoordinate().getX());
-        n.addAttribute("y", service.getLocation().getCoordinate().getY());
-        if (service.getType().equals("pickup")) n.setAttribute("ui.class", "pickup");
-        if (service.getType().equals("delivery")) n.setAttribute("ui.class", "delivery");
+        Node n = g.addNode(makeId(service.getId(), service.getActivity().getLocation().getId()));
+        if (label.equals(Label.ID)) {
+            n.addAttribute("ui.label", service.getId());
+        }
+        n.addAttribute("x", service.getActivity().getLocation().getCoordinate().getX());
+        n.addAttribute("y", service.getActivity().getLocation().getCoordinate().getY());
+        if (service.getType().equals("pickup")) {
+            n.setAttribute("ui.class", "pickup");
+        }
+        if (service.getType().equals("delivery")) {
+            n.setAttribute("ui.class", "delivery");
+        }
     }
 
     private String makeId(String id, String locationId) {
@@ -548,7 +574,9 @@ private String makeId(String id, String locationId) {
     private void renderVehicle(Graph g, Vehicle vehicle, Label label) {
         String nodeId = makeId(vehicle.getId(), vehicle.getStartLocation().getId());
         Node vehicleStart = g.addNode(nodeId);
-        if (label.equals(Label.ID)) vehicleStart.addAttribute("ui.label", "depot");
+        if (label.equals(Label.ID)) {
+            vehicleStart.addAttribute("ui.label", "depot");
+        }
 //		if(label.equals(Label.ACTIVITY)) n.addAttribute("ui.label", "start");
         vehicleStart.addAttribute("x", vehicle.getStartLocation().getCoordinate().getX());
         vehicleStart.addAttribute("y", vehicle.getStartLocation().getCoordinate().getY());
@@ -556,7 +584,9 @@ private void renderVehicle(Graph g, Vehicle vehicle, Label label) {
 
         if (!vehicle.getStartLocation().getId().equals(vehicle.getEndLocation().getId())) {
             Node vehicleEnd = g.addNode(makeId(vehicle.getId(), vehicle.getEndLocation().getId()));
-            if (label.equals(Label.ID)) vehicleEnd.addAttribute("ui.label", "depot");
+            if (label.equals(Label.ID)) {
+                vehicleEnd.addAttribute("ui.label", "depot");
+            }
             vehicleEnd.addAttribute("x", vehicle.getEndLocation().getCoordinate().getX());
             vehicleEnd.addAttribute("y", vehicle.getEndLocation().getCoordinate().getY());
             vehicleEnd.setAttribute("ui.class", "depot");
@@ -588,9 +618,11 @@ private void renderRoute(Graph g, VehicleRoute route, int routeId, long renderDe
                 actNode.addAttribute("ui.label", Time.parseSecondsToTime(act.getEndTime()));
             }
             g.addEdge(makeEdgeId(routeId, vehicle_edgeId), prevIdentifier, currIdentifier, true);
-            if (act instanceof PickupActivity) g.getNode(currIdentifier).addAttribute("ui.class", "pickupInRoute");
-            else if (act instanceof DeliveryActivity)
+            if (act instanceof PickupActivity) {
+                g.getNode(currIdentifier).addAttribute("ui.class", "pickupInRoute");
+            } else if (act instanceof DeliveryActivity) {
                 g.getNode(currIdentifier).addAttribute("ui.class", "deliveryInRoute");
+            }
             prevIdentifier = currIdentifier;
             vehicle_edgeId++;
             sleep(renderDelay_in_ms);
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/box/Jsprit.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/box/Jsprit.java
index a875110f5..b5c44875e 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/box/Jsprit.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/box/Jsprit.java
@@ -18,6 +18,12 @@
 
 package com.graphhopper.jsprit.core.algorithm.box;
 
+import java.util.Collection;
+import java.util.Properties;
+import java.util.Random;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+
 import com.graphhopper.jsprit.core.algorithm.PrettyAlgorithmBuilder;
 import com.graphhopper.jsprit.core.algorithm.SearchStrategy;
 import com.graphhopper.jsprit.core.algorithm.VehicleRoutingAlgorithm;
@@ -26,8 +32,24 @@
 import com.graphhopper.jsprit.core.algorithm.listener.AlgorithmEndsListener;
 import com.graphhopper.jsprit.core.algorithm.listener.IterationStartsListener;
 import com.graphhopper.jsprit.core.algorithm.module.RuinAndRecreateModule;
-import com.graphhopper.jsprit.core.algorithm.recreate.*;
-import com.graphhopper.jsprit.core.algorithm.ruin.*;
+import com.graphhopper.jsprit.core.algorithm.recreate.AbstractInsertionStrategy;
+import com.graphhopper.jsprit.core.algorithm.recreate.ActivityInsertionCostsCalculator;
+import com.graphhopper.jsprit.core.algorithm.recreate.BestInsertion;
+import com.graphhopper.jsprit.core.algorithm.recreate.BestInsertionConcurrent;
+import com.graphhopper.jsprit.core.algorithm.recreate.BreakScheduling;
+import com.graphhopper.jsprit.core.algorithm.recreate.DefaultScorer;
+import com.graphhopper.jsprit.core.algorithm.recreate.InsertionBuilder;
+import com.graphhopper.jsprit.core.algorithm.recreate.RegretInsertion;
+import com.graphhopper.jsprit.core.algorithm.recreate.RegretInsertionConcurrent;
+import com.graphhopper.jsprit.core.algorithm.recreate.RegretInsertionConcurrentFast;
+import com.graphhopper.jsprit.core.algorithm.recreate.RegretInsertionFast;
+import com.graphhopper.jsprit.core.algorithm.ruin.JobNeighborhoods;
+import com.graphhopper.jsprit.core.algorithm.ruin.JobNeighborhoodsFactory;
+import com.graphhopper.jsprit.core.algorithm.ruin.RuinClusters;
+import com.graphhopper.jsprit.core.algorithm.ruin.RuinRadial;
+import com.graphhopper.jsprit.core.algorithm.ruin.RuinRandom;
+import com.graphhopper.jsprit.core.algorithm.ruin.RuinShareFactory;
+import com.graphhopper.jsprit.core.algorithm.ruin.RuinWorst;
 import com.graphhopper.jsprit.core.algorithm.ruin.distance.DefaultJobDistance;
 import com.graphhopper.jsprit.core.algorithm.selector.SelectBest;
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
@@ -46,12 +68,6 @@
 import com.graphhopper.jsprit.core.util.RandomNumberGeneration;
 import com.graphhopper.jsprit.core.util.Solutions;
 
-import java.util.Collection;
-import java.util.Properties;
-import java.util.Random;
-import java.util.concurrent.ExecutorService;
-import java.util.concurrent.Executors;
-
 
 public class Jsprit {
 
@@ -67,6 +83,7 @@
             this.name = name;
         }
 
+        @Override
         public String toString() {
             return name;
         }
@@ -90,6 +107,7 @@ public String toString() {
             this.strategyName = strategyName;
         }
 
+        @Override
         public String toString() {
             return strategyName;
         }
@@ -124,9 +142,10 @@ public String toString() {
         String paraName;
 
         Parameter(String name) {
-            this.paraName = name;
+            paraName = name;
         }
 
+        @Override
         public String toString() {
             return paraName;
         }
@@ -221,7 +240,7 @@ public Builder setExecutorService(ExecutorService es, int noThreads) {
         }
 
         public Builder setCustomAcceptor(SolutionAcceptor acceptor) {
-            this.solutionAcceptor = acceptor;
+            solutionAcceptor = acceptor;
             return this;
         }
 
@@ -287,15 +306,17 @@ public void setRandom(Random random) {
         }
 
         public RuinShareFactoryImpl(int minShare, int maxShare) {
-            if (maxShare < minShare)
+            if (maxShare < minShare) {
                 throw new IllegalArgumentException("maxShare must be equal or greater than minShare");
+            }
             this.minShare = minShare;
             this.maxShare = maxShare;
         }
 
         public RuinShareFactoryImpl(int minShare, int maxShare, Random random) {
-            if (maxShare < minShare)
+            if (maxShare < minShare) {
                 throw new IllegalArgumentException("maxShare must be equal or greater than minShare");
+            }
             this.minShare = minShare;
             this.maxShare = maxShare;
             this.random = random;
@@ -329,16 +350,16 @@ public int createNumberToBeRemoved() {
     private SolutionAcceptor acceptor;
 
     private Jsprit(Builder builder) {
-        this.stateManager = builder.stateManager;
-        this.constraintManager = builder.constraintManager;
-        this.es = builder.es;
-        this.noThreads = builder.noThreads;
-        this.addCoreConstraints = builder.addConstraints;
-        this.properties = builder.properties;
-        this.objectiveFunction = builder.objectiveFunction;
-        this.random = builder.random;
-        this.activityInsertion = builder.activityInsertionCalculator;
-        this.acceptor = builder.solutionAcceptor;
+        stateManager = builder.stateManager;
+        constraintManager = builder.constraintManager;
+        es = builder.es;
+        noThreads = builder.noThreads;
+        addCoreConstraints = builder.addConstraints;
+        properties = builder.properties;
+        objectiveFunction = builder.objectiveFunction;
+        random = builder.random;
+        activityInsertion = builder.activityInsertionCalculator;
+        acceptor = builder.solutionAcceptor;
     }
 
     private VehicleRoutingAlgorithm create(final VehicleRoutingProblem vrp) {
@@ -397,44 +418,47 @@ private VehicleRoutingAlgorithm create(final VehicleRoutingProblem vrp) {
         RuinRadial radial = new RuinRadial(vrp, vrp.getJobs().size(), jobNeighborhoods);
         radial.setRandom(random);
         radial.setRuinShareFactory(new RuinShareFactoryImpl(
-            toInteger(properties.getProperty(Parameter.RADIAL_MIN_SHARE.toString())),
-            toInteger(properties.getProperty(Parameter.RADIAL_MAX_SHARE.toString())),
-            random)
-        );
+                        toInteger(properties.getProperty(Parameter.RADIAL_MIN_SHARE.toString())),
+                        toInteger(properties.getProperty(Parameter.RADIAL_MAX_SHARE.toString())),
+                        random)
+                        );
 
         final RuinRandom random_for_regret = new RuinRandom(vrp, 0.5);
         random_for_regret.setRandom(random);
         random_for_regret.setRuinShareFactory(new RuinShareFactoryImpl(
-            toInteger(properties.getProperty(Parameter.RANDOM_REGRET_MIN_SHARE.toString())),
-            toInteger(properties.getProperty(Parameter.RANDOM_REGRET_MAX_SHARE.toString())),
-            random)
-        );
+                        toInteger(properties.getProperty(Parameter.RANDOM_REGRET_MIN_SHARE.toString())),
+                        toInteger(properties.getProperty(Parameter.RANDOM_REGRET_MAX_SHARE.toString())),
+                        random)
+                        );
 
         final RuinRandom random_for_best = new RuinRandom(vrp, 0.5);
         random_for_best.setRandom(random);
         random_for_best.setRuinShareFactory(new RuinShareFactoryImpl(
-            toInteger(properties.getProperty(Parameter.RANDOM_BEST_MIN_SHARE.toString())),
-            toInteger(properties.getProperty(Parameter.RANDOM_BEST_MAX_SHARE.toString())),
-            random)
-        );
+                        toInteger(properties.getProperty(Parameter.RANDOM_BEST_MIN_SHARE.toString())),
+                        toInteger(properties.getProperty(Parameter.RANDOM_BEST_MAX_SHARE.toString())),
+                        random)
+                        );
 
         final RuinWorst worst = new RuinWorst(vrp, (int) (vrp.getJobs().values().size() * 0.5));
         worst.setRandom(random);
         worst.setRuinShareFactory(new RuinShareFactoryImpl(
-            toInteger(properties.getProperty(Parameter.WORST_MIN_SHARE.toString())),
-            toInteger(properties.getProperty(Parameter.WORST_MAX_SHARE.toString())),
-            random)
-        );
+                        toInteger(properties.getProperty(Parameter.WORST_MIN_SHARE.toString())),
+                        toInteger(properties.getProperty(Parameter.WORST_MAX_SHARE.toString())),
+                        random)
+                        );
         IterationStartsListener noise = new IterationStartsListener() {
             @Override
             public void informIterationStarts(int i, VehicleRoutingProblem problem, Collection<VehicleRoutingProblemSolution> solutions) {
                 worst.setNoiseMaker(new NoiseMaker() {
 
+                    @Override
                     public double makeNoise() {
                         if (random.nextDouble() < toDouble(getProperty(Parameter.RUIN_WORST_NOISE_PROB.toString()))) {
                             return toDouble(getProperty(Parameter.RUIN_WORST_NOISE_LEVEL.toString()))
-                                * maxCosts * random.nextDouble();
-                        } else return 0.;
+                                            * maxCosts * random.nextDouble();
+                        } else {
+                            return 0.;
+                        }
                     }
                 });
             }
@@ -443,10 +467,10 @@ public double makeNoise() {
         final RuinClusters clusters = new RuinClusters(vrp, (int) (vrp.getJobs().values().size() * 0.5), jobNeighborhoods);
         clusters.setRandom(random);
         clusters.setRuinShareFactory(new RuinShareFactoryImpl(
-            toInteger(properties.getProperty(Parameter.WORST_MIN_SHARE.toString())),
-            toInteger(properties.getProperty(Parameter.WORST_MAX_SHARE.toString())),
-            random)
-        );
+                        toInteger(properties.getProperty(Parameter.WORST_MIN_SHARE.toString())),
+                        toInteger(properties.getProperty(Parameter.WORST_MAX_SHARE.toString())),
+                        random)
+                        );
 
         AbstractInsertionStrategy regret;
         final DefaultScorer scorer;
@@ -455,25 +479,25 @@ public double makeNoise() {
         if (es != null) {
             if (fastRegret) {
                 RegretInsertionConcurrentFast regretInsertion = (RegretInsertionConcurrentFast) new InsertionBuilder(vrp, fm, stateManager, constraintManager)
-                    .setInsertionStrategy(InsertionBuilder.Strategy.REGRET)
-                    .setConcurrentMode(es, noThreads)
-                    .setFastRegret(true)
-                    .considerFixedCosts(toDouble(getProperty(Parameter.FIXED_COST_PARAM.toString())))
-                    .setAllowVehicleSwitch(toBoolean(getProperty(Parameter.VEHICLE_SWITCH.toString())))
-                    .setActivityInsertionCostCalculator(activityInsertion)
-                    .build();
+                                .setInsertionStrategy(InsertionBuilder.Strategy.REGRET)
+                                .setConcurrentMode(es, noThreads)
+                                .setFastRegret(true)
+                                .considerFixedCosts(toDouble(getProperty(Parameter.FIXED_COST_PARAM.toString())))
+                                .setAllowVehicleSwitch(toBoolean(getProperty(Parameter.VEHICLE_SWITCH.toString())))
+                                .setActivityInsertionCostCalculator(activityInsertion)
+                                .build();
                 scorer = getRegretScorer(vrp);
                 regretInsertion.setScoringFunction(scorer);
                 regretInsertion.setDependencyTypes(constraintManager.getDependencyTypes());
                 regret = regretInsertion;
             } else {
                 RegretInsertionConcurrent regretInsertion = (RegretInsertionConcurrent) new InsertionBuilder(vrp, fm, stateManager, constraintManager)
-                    .setInsertionStrategy(InsertionBuilder.Strategy.REGRET)
-                    .setConcurrentMode(es, noThreads)
-                    .considerFixedCosts(toDouble(getProperty(Parameter.FIXED_COST_PARAM.toString())))
-                    .setAllowVehicleSwitch(toBoolean(getProperty(Parameter.VEHICLE_SWITCH.toString())))
-                    .setActivityInsertionCostCalculator(activityInsertion)
-                    .build();
+                                .setInsertionStrategy(InsertionBuilder.Strategy.REGRET)
+                                .setConcurrentMode(es, noThreads)
+                                .considerFixedCosts(toDouble(getProperty(Parameter.FIXED_COST_PARAM.toString())))
+                                .setAllowVehicleSwitch(toBoolean(getProperty(Parameter.VEHICLE_SWITCH.toString())))
+                                .setActivityInsertionCostCalculator(activityInsertion)
+                                .build();
                 scorer = getRegretScorer(vrp);
                 regretInsertion.setScoringFunction(scorer);
                 regret = regretInsertion;
@@ -481,23 +505,23 @@ public double makeNoise() {
         } else {
             if (fastRegret) {
                 RegretInsertionFast regretInsertion = (RegretInsertionFast) new InsertionBuilder(vrp, fm, stateManager, constraintManager)
-                    .setInsertionStrategy(InsertionBuilder.Strategy.REGRET)
-                    .setFastRegret(true)
-                    .setAllowVehicleSwitch(toBoolean(getProperty(Parameter.VEHICLE_SWITCH.toString())))
-                    .considerFixedCosts(toDouble(getProperty(Parameter.FIXED_COST_PARAM.toString())))
-                    .setActivityInsertionCostCalculator(activityInsertion)
-                    .build();
+                                .setInsertionStrategy(InsertionBuilder.Strategy.REGRET)
+                                .setFastRegret(true)
+                                .setAllowVehicleSwitch(toBoolean(getProperty(Parameter.VEHICLE_SWITCH.toString())))
+                                .considerFixedCosts(toDouble(getProperty(Parameter.FIXED_COST_PARAM.toString())))
+                                .setActivityInsertionCostCalculator(activityInsertion)
+                                .build();
                 scorer = getRegretScorer(vrp);
                 regretInsertion.setScoringFunction(scorer);
                 regretInsertion.setDependencyTypes(constraintManager.getDependencyTypes());
                 regret = regretInsertion;
             } else {
                 RegretInsertion regretInsertion = (RegretInsertion) new InsertionBuilder(vrp, fm, stateManager, constraintManager)
-                    .setInsertionStrategy(InsertionBuilder.Strategy.REGRET)
-                    .setAllowVehicleSwitch(toBoolean(getProperty(Parameter.VEHICLE_SWITCH.toString())))
-                    .considerFixedCosts(toDouble(getProperty(Parameter.FIXED_COST_PARAM.toString())))
-                    .setActivityInsertionCostCalculator(activityInsertion)
-                    .build();
+                                .setInsertionStrategy(InsertionBuilder.Strategy.REGRET)
+                                .setAllowVehicleSwitch(toBoolean(getProperty(Parameter.VEHICLE_SWITCH.toString())))
+                                .considerFixedCosts(toDouble(getProperty(Parameter.FIXED_COST_PARAM.toString())))
+                                .setActivityInsertionCostCalculator(activityInsertion)
+                                .build();
                 scorer = getRegretScorer(vrp);
                 regretInsertion.setScoringFunction(scorer);
                 regret = regretInsertion;
@@ -508,20 +532,20 @@ public double makeNoise() {
         AbstractInsertionStrategy best;
         if (vrp.getJobs().size() < 250 || es == null) {
             BestInsertion bestInsertion = (BestInsertion) new InsertionBuilder(vrp, fm, stateManager, constraintManager)
-                .setInsertionStrategy(InsertionBuilder.Strategy.BEST)
-                .considerFixedCosts(Double.valueOf(properties.getProperty(Parameter.FIXED_COST_PARAM.toString())))
-                .setAllowVehicleSwitch(toBoolean(getProperty(Parameter.VEHICLE_SWITCH.toString())))
-                .setActivityInsertionCostCalculator(activityInsertion)
-                .build();
+                            .setInsertionStrategy(InsertionBuilder.Strategy.BEST)
+                            .considerFixedCosts(Double.valueOf(properties.getProperty(Parameter.FIXED_COST_PARAM.toString())))
+                            .setAllowVehicleSwitch(toBoolean(getProperty(Parameter.VEHICLE_SWITCH.toString())))
+                            .setActivityInsertionCostCalculator(activityInsertion)
+                            .build();
             best = bestInsertion;
         } else {
             BestInsertionConcurrent bestInsertion = (BestInsertionConcurrent) new InsertionBuilder(vrp, fm, stateManager, constraintManager)
-                .setInsertionStrategy(InsertionBuilder.Strategy.BEST)
-                .considerFixedCosts(Double.valueOf(properties.getProperty(Parameter.FIXED_COST_PARAM.toString())))
-                .setAllowVehicleSwitch(toBoolean(getProperty(Parameter.VEHICLE_SWITCH.toString())))
-                .setConcurrentMode(es, noThreads)
-                .setActivityInsertionCostCalculator(activityInsertion)
-                .build();
+                            .setInsertionStrategy(InsertionBuilder.Strategy.BEST)
+                            .considerFixedCosts(Double.valueOf(properties.getProperty(Parameter.FIXED_COST_PARAM.toString())))
+                            .setAllowVehicleSwitch(toBoolean(getProperty(Parameter.VEHICLE_SWITCH.toString())))
+                            .setConcurrentMode(es, noThreads)
+                            .setActivityInsertionCostCalculator(activityInsertion)
+                            .build();
             best = bestInsertion;
         }
         best.setRandom(random);
@@ -573,13 +597,13 @@ public void informIterationStarts(int i, VehicleRoutingProblem problem, Collecti
             prettyBuilder.addCoreStateAndConstraintStuff();
         }
         prettyBuilder.withStrategy(radial_regret, toDouble(getProperty(Strategy.RADIAL_REGRET.toString())))
-            .withStrategy(radial_best, toDouble(getProperty(Strategy.RADIAL_BEST.toString())))
-            .withStrategy(random_best, toDouble(getProperty(Strategy.RANDOM_BEST.toString())))
-            .withStrategy(random_regret, toDouble(getProperty(Strategy.RANDOM_REGRET.toString())))
-            .withStrategy(worst_best, toDouble(getProperty(Strategy.WORST_BEST.toString())))
-            .withStrategy(worst_regret, toDouble(getProperty(Strategy.WORST_REGRET.toString())))
-            .withStrategy(clusters_regret, toDouble(getProperty(Strategy.CLUSTER_REGRET.toString())))
-            .withStrategy(clusters_best, toDouble(getProperty(Strategy.CLUSTER_BEST.toString())));
+        .withStrategy(radial_best, toDouble(getProperty(Strategy.RADIAL_BEST.toString())))
+        .withStrategy(random_best, toDouble(getProperty(Strategy.RANDOM_BEST.toString())))
+        .withStrategy(random_regret, toDouble(getProperty(Strategy.RANDOM_REGRET.toString())))
+        .withStrategy(worst_best, toDouble(getProperty(Strategy.WORST_BEST.toString())))
+        .withStrategy(worst_regret, toDouble(getProperty(Strategy.WORST_REGRET.toString())))
+        .withStrategy(clusters_regret, toDouble(getProperty(Strategy.CLUSTER_REGRET.toString())))
+        .withStrategy(clusters_best, toDouble(getProperty(Strategy.CLUSTER_BEST.toString())));
         if (getProperty(Parameter.CONSTRUCTION.toString()).equals(Construction.BEST_INSERTION.toString())) {
             prettyBuilder.constructInitialSolutionWith(best, objectiveFunction);
         } else {
@@ -617,6 +641,7 @@ private DefaultScorer getRegretScorer(VehicleRoutingProblem vrp) {
     private void handleExecutorShutdown(VehicleRoutingAlgorithm vra) {
         if (setupExecutorInternally) {
             final Thread hook = new Thread() {
+                @Override
                 public void run() {
                     if (!es.isShutdown()) {
                         System.err.println("shutdownHook shuts down executorService");
@@ -635,17 +660,17 @@ public void informAlgorithmEnds(VehicleRoutingProblem problem, Collection<Vehicl
 
             });
         }
-//        if (es != null) {
-//
-//            Runtime.getRuntime().addShutdownHook(hook);
-//            vra.addListener(new AlgorithmEndsListener() {
-//                @Override
-//                public void informAlgorithmEnds(VehicleRoutingProblem aProblem,
-//                                                Collection<VehicleRoutingProblemSolution> aSolutions) {
-//                    Runtime.getRuntime().removeShutdownHook(hook);
-//                }
-//            });
-//        }
+        //        if (es != null) {
+        //
+        //            Runtime.getRuntime().addShutdownHook(hook);
+        //            vra.addListener(new AlgorithmEndsListener() {
+        //                @Override
+        //                public void informAlgorithmEnds(VehicleRoutingProblem aProblem,
+        //                                                Collection<VehicleRoutingProblemSolution> aSolutions) {
+        //                    Runtime.getRuntime().removeShutdownHook(hook);
+        //                }
+        //            });
+        //        }
     }
 
     String getProperty(String key) {
@@ -665,7 +690,9 @@ private double toDouble(String string) {
     }
 
     private SolutionCostCalculator getObjectiveFunction(final VehicleRoutingProblem vrp, final double maxCosts) {
-        if (objectiveFunction != null) return objectiveFunction;
+        if (objectiveFunction != null) {
+            return objectiveFunction;
+        }
 
         SolutionCostCalculator solutionCostCalculator = new SolutionCostCalculator() {
             @Override
@@ -677,7 +704,9 @@ public double getCosts(VehicleRoutingProblemSolution solution) {
                     boolean hasBreak = false;
                     TourActivity prevAct = route.getStart();
                     for (TourActivity act : route.getActivities()) {
-                        if (act instanceof BreakActivity) hasBreak = true;
+                        if (act instanceof BreakActivity) {
+                            hasBreak = true;
+                        }
                         costs += vrp.getTransportCosts().getTransportCost(prevAct.getLocation(), act.getLocation(), prevAct.getEndTime(), route.getDriver(), route.getVehicle());
                         costs += vrp.getActivityCosts().getActivityCost(act, act.getArrTime(), route.getDriver(), route.getVehicle());
                         prevAct = act;
@@ -686,8 +715,13 @@ public double getCosts(VehicleRoutingProblemSolution solution) {
                     if (route.getVehicle().getBreak() != null) {
                         if (!hasBreak) {
                             //break defined and required but not assigned penalty
-                            if (route.getEnd().getArrTime() > route.getVehicle().getBreak().getTimeWindow().getEnd()) {
-                                costs += 4 * (maxCosts * 2 + route.getVehicle().getBreak().getServiceDuration() * route.getVehicle().getType().getVehicleCostParams().perServiceTimeUnit);
+                            if (route.getEnd().getArrTime() > route.getVehicle().getBreak()
+                                            .getActivity().getSingleTimeWindow()
+                                            .getEnd()) {
+                                costs += 4 * (maxCosts * 2 + route.getVehicle().getBreak()
+                                                .getActivity().getOperationTime()
+                                                * route.getVehicle().getType()
+                                                                .getVehicleCostParams().perServiceTimeUnit);
                             }
                         }
                     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BreakInsertionCalculator.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BreakInsertionCalculator.java
index afd439fe1..313eac36c 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BreakInsertionCalculator.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BreakInsertionCalculator.java
@@ -17,10 +17,21 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
+import java.util.Arrays;
+import java.util.Iterator;
+import java.util.List;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import com.graphhopper.jsprit.core.problem.JobActivityFactory;
 import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.constraint.*;
+import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
+import com.graphhopper.jsprit.core.problem.constraint.HardActivityConstraint;
 import com.graphhopper.jsprit.core.problem.constraint.HardActivityConstraint.ConstraintsStatus;
+import com.graphhopper.jsprit.core.problem.constraint.HardRouteConstraint;
+import com.graphhopper.jsprit.core.problem.constraint.SoftActivityConstraint;
+import com.graphhopper.jsprit.core.problem.constraint.SoftRouteConstraint;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingActivityCosts;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.driver.Driver;
@@ -31,14 +42,9 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.BreakActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.End;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.Start;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.util.Arrays;
-import java.util.Iterator;
-import java.util.List;
 
 /**
  * Calculator that calculates the best insertion position for a service.
@@ -69,7 +75,7 @@
 
     public BreakInsertionCalculator(VehicleRoutingTransportCosts routingCosts, VehicleRoutingActivityCosts activityCosts, ActivityInsertionCostsCalculator additionalTransportCostsCalculator, ConstraintManager constraintManager) {
         super();
-        this.transportCosts = routingCosts;
+        transportCosts = routingCosts;
         this.activityCosts = activityCosts;
         hardRouteLevelConstraint = constraintManager;
         hardActivityLevelConstraint = constraintManager;
@@ -81,7 +87,7 @@ public BreakInsertionCalculator(VehicleRoutingTransportCosts routingCosts, Vehic
     }
 
     public void setJobActivityFactory(JobActivityFactory jobActivityFactory) {
-        this.activityFactory = jobActivityFactory;
+        activityFactory = jobActivityFactory;
     }
 
     @Override
@@ -99,7 +105,9 @@ public InsertionData getInsertionData(final VehicleRoute currentRoute, final Job
         if (newVehicle.getBreak() == null || newVehicle.getBreak() != breakToInsert) {
             return InsertionData.createEmptyInsertionData();
         }
-        if (currentRoute.isEmpty()) return InsertionData.createEmptyInsertionData();
+        if (currentRoute.isEmpty()) {
+            return InsertionData.createEmptyInsertionData();
+        }
 
         JobInsertionContext insertionContext = new JobInsertionContext(currentRoute, jobToInsert, newVehicle, newDriver, newVehicleDepartureTime);
         int insertionIndex = InsertionData.NO_INDEX;
@@ -122,7 +130,7 @@ public InsertionData getInsertionData(final VehicleRoute currentRoute, final Job
         double bestCost = bestKnownCosts;
         additionalICostsAtRouteLevel += additionalAccessEgressCalculator.getCosts(insertionContext);
 
-		/*
+        /*
         generate new start and end for new vehicle
          */
         Start start = new Start(newVehicle.getStartLocation(), newVehicle.getEarliestDeparture(), Double.MAX_VALUE);
@@ -138,8 +146,9 @@ public InsertionData getInsertionData(final VehicleRoute currentRoute, final Job
         boolean tourEnd = false;
         while (!tourEnd) {
             TourActivity nextAct;
-            if (activityIterator.hasNext()) nextAct = activityIterator.next();
-            else {
+            if (activityIterator.hasNext()) {
+                nextAct = activityIterator.next();
+            } else {
                 nextAct = end;
                 tourEnd = true;
             }
@@ -147,8 +156,9 @@ public InsertionData getInsertionData(final VehicleRoute currentRoute, final Job
             List<Location> locations = Arrays.asList(prevAct.getLocation(), nextAct.getLocation());
             for (Location location : locations) {
                 breakAct2Insert.setLocation(location);
-                breakAct2Insert.setTheoreticalEarliestOperationStartTime(breakToInsert.getTimeWindow().getStart());
-                breakAct2Insert.setTheoreticalLatestOperationStartTime(breakToInsert.getTimeWindow().getEnd());
+                TimeWindow timeWindow = breakToInsert.getActivity().getTimeWindow();
+                breakAct2Insert.setTheoreticalEarliestOperationStartTime(timeWindow.getStart());
+                breakAct2Insert.setTheoreticalLatestOperationStartTime(timeWindow.getEnd());
                 ConstraintsStatus status = hardActivityLevelConstraint.fulfilled(insertionContext, prevAct, breakAct2Insert, nextAct, prevActStartTime);
                 if (status.equals(ConstraintsStatus.FULFILLED)) {
                     //from job2insert induced costs at activity level
@@ -168,7 +178,9 @@ public InsertionData getInsertionData(final VehicleRoute currentRoute, final Job
             prevActStartTime = Math.max(nextActArrTime, nextAct.getTheoreticalEarliestOperationStartTime()) + activityCosts.getActivityDuration(nextAct, nextActArrTime, newDriver, newVehicle);
             prevAct = nextAct;
             actIndex++;
-            if (breakThis) break;
+            if (breakThis) {
+                break;
+            }
         }
         if (insertionIndex == InsertionData.NO_INDEX) {
             return InsertionData.createEmptyInsertionData();
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BreakScheduling.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BreakScheduling.java
index 39ad4d4ee..311f496ff 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BreakScheduling.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BreakScheduling.java
@@ -18,6 +18,15 @@
 
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionStartsListener;
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.JobInsertedListener;
 import com.graphhopper.jsprit.core.algorithm.ruin.listener.RuinListener;
@@ -27,10 +36,6 @@
 import com.graphhopper.jsprit.core.problem.job.Break;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.util.*;
 
 /**
  * Created by schroeder on 07/04/16.
@@ -49,8 +54,8 @@
 
     public BreakScheduling(VehicleRoutingProblem vrp, StateManager stateManager, ConstraintManager constraintManager) {
         this.stateManager = stateManager;
-        this.breakInsertionCalculator = new BreakInsertionCalculator(vrp.getTransportCosts(), vrp.getActivityCosts(), new LocalActivityInsertionCostsCalculator(vrp.getTransportCosts(), vrp.getActivityCosts(), stateManager), constraintManager);
-        this.breakInsertionCalculator.setJobActivityFactory(vrp.getJobActivityFactory());
+        breakInsertionCalculator = new BreakInsertionCalculator(vrp.getTransportCosts(), vrp.getActivityCosts(), new LocalActivityInsertionCostsCalculator(vrp.getTransportCosts(), vrp.getActivityCosts(), stateManager), constraintManager);
+        breakInsertionCalculator.setJobActivityFactory(vrp.getJobActivityFactory());
         eventListeners = new EventListeners();
     }
 
@@ -64,7 +69,7 @@ public void informJobInserted(Job job2insert, VehicleRoute inRoute, double addit
                 stateManager.removed(aBreak, inRoute);
                 stateManager.reCalculateStates(inRoute);
             }
-            if (inRoute.getEnd().getArrTime() > aBreak.getTimeWindow().getEnd()) {
+            if (inRoute.getEnd().getArrTime() > aBreak.getActivity().getTimeWindow().getEnd()) {
                 InsertionData iData = breakInsertionCalculator.getInsertionData(inRoute, aBreak, inRoute.getVehicle(), inRoute.getDepartureTime(), inRoute.getDriver(), Double.MAX_VALUE);
                 if (!(iData instanceof InsertionData.NoInsertionFound)) {
                     logger.trace("insert: [jobId={}]{}", aBreak.getId(), iData);
@@ -87,7 +92,9 @@ public void ruinEnds(Collection<VehicleRoute> routes, Collection<Job> unassigned
         for (VehicleRoute route : routes) {
             Break aBreak = route.getVehicle().getBreak();
             boolean removed = route.getTourActivities().removeJob(aBreak);
-            if (removed) logger.trace("ruin: {}", aBreak.getId());
+            if (removed) {
+                logger.trace("ruin: {}", aBreak.getId());
+            }
         }
         List<Break> breaks = new ArrayList<Break>();
         for (Job j : unassignedJobs) {
@@ -102,7 +109,9 @@ public void ruinEnds(Collection<VehicleRoute> routes, Collection<Job> unassigned
 
     @Override
     public void removed(Job job, VehicleRoute fromRoute) {
-        if (fromRoute.getVehicle().getBreak() != null) modifiedRoutes.add(fromRoute);
+        if (fromRoute.getVehicle().getBreak() != null) {
+            modifiedRoutes.add(fromRoute);
+        }
     }
 
     @Override
@@ -110,7 +119,7 @@ public void informInsertionStarts(Collection<VehicleRoute> vehicleRoutes, Collec
         for (VehicleRoute route : vehicleRoutes) {
             Break aBreak = route.getVehicle().getBreak();
             if (aBreak != null && !route.getTourActivities().servesJob(aBreak)) {
-                if (route.getEnd().getArrTime() > aBreak.getTimeWindow().getEnd()) {
+                if (route.getEnd().getArrTime() > aBreak.getActivity().getTimeWindow().getEnd()) {
                     InsertionData iData = breakInsertionCalculator.getInsertionData(route, aBreak, route.getVehicle(), route.getDepartureTime(), route.getDriver(), Double.MAX_VALUE);
                     if (!(iData instanceof InsertionData.NoInsertionFound)) {
                         logger.trace("insert: [jobId={}]{}", aBreak.getId(), iData);
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/AvgServiceDistance.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/AvgServiceDistance.java
deleted file mode 100644
index 382709fe1..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/AvgServiceDistance.java
+++ /dev/null
@@ -1,84 +0,0 @@
-/*
- * Licensed to GraphHopper GmbH under one or more contributor
- * license agreements. See the NOTICE file distributed with this work for
- * additional information regarding copyright ownership.
- *
- * GraphHopper GmbH licenses this file to you under the Apache License,
- * Version 2.0 (the "License"); you may not use this file except in
- * compliance with the License. You may obtain a copy of the License at
- *
- *       http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.graphhopper.jsprit.core.algorithm.ruin.distance;
-
-import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
-import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
-
-
-/**
- * Calculator that calculates average distance between two jobs based on the input-transport costs.
- * <p>
- * <p>
- * If the distance between two jobs cannot be calculated with input-transport costs, it tries the euclidean distance
- * between these jobs.
- *
- * @author stefan schroeder
- * @deprecated Being a subset of the {@linkplain DefaultJobDistance} class. Use that instead.
- */
-@Deprecated
-public class AvgServiceDistance implements JobDistance {
-
-    private VehicleRoutingTransportCosts costs;
-
-    public AvgServiceDistance(VehicleRoutingTransportCosts costs) {
-        super();
-        this.costs = costs;
-
-    }
-
-    /**
-     * Calculates and returns the average distance between two jobs based on the input-transport costs.
-     * <p>
-     * <p>If the distance between two jobs cannot be calculated with input-transport costs, it tries the euclidean distance between these jobs.
-     */
-    @Override
-    public double getDistance(Job i, Job j) {
-        System.out.println("Serv: ");
-
-        double avgCost = 0.0;
-        if (i instanceof Service && j instanceof Service) {
-            if (i.equals(j)) {
-                avgCost = 0.0;
-            } else {
-                Service s_i = (Service) i;
-                Service s_j = (Service) j;
-                avgCost = calcDist(s_i, s_j);
-            }
-        } else {
-            throw new UnsupportedOperationException(
-                "currently, this class just works services.");
-        }
-        return avgCost;
-    }
-
-    private double calcDist(Service s_i, Service s_j) {
-        double distance;
-        try {
-            distance = costs.getTransportCost(s_i.getLocation(), s_j.getLocation(), 0.0, null, null);
-            return distance;
-        } catch (IllegalStateException e) {
-            // now try the euclidean distance between these two services
-        }
-        EuclideanServiceDistance euclidean = new EuclideanServiceDistance();
-        distance = euclidean.getDistance(s_i, s_j);
-        return distance;
-    }
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/EuclideanServiceDistance.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/EuclideanServiceDistance.java
deleted file mode 100644
index 5f6b4f185..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/EuclideanServiceDistance.java
+++ /dev/null
@@ -1,52 +0,0 @@
-/*
- * Licensed to GraphHopper GmbH under one or more contributor
- * license agreements. See the NOTICE file distributed with this work for
- * additional information regarding copyright ownership.
- *
- * GraphHopper GmbH licenses this file to you under the Apache License,
- * Version 2.0 (the "License"); you may not use this file except in
- * compliance with the License. You may obtain a copy of the License at
- *
- *       http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.graphhopper.jsprit.core.algorithm.ruin.distance;
-
-import com.graphhopper.jsprit.core.distance.EuclideanDistanceCalculator;
-import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
-
-@Deprecated
-public class EuclideanServiceDistance implements JobDistance {
-
-    public EuclideanServiceDistance() {
-        super();
-    }
-
-    @Override
-    public double getDistance(Job i, Job j) {
-        double avgCost = 0.0;
-        if (i instanceof Service && j instanceof Service) {
-            if (i.equals(j)) {
-                avgCost = 0.0;
-            } else {
-                Service s_i = (Service) i;
-                Service s_j = (Service) j;
-                if (s_i.getLocation().getCoordinate() == null || s_j.getLocation().getCoordinate() == null) {
-                    throw new IllegalStateException("cannot calculate euclidean distance. since service coords are missing");
-                }
-                avgCost = EuclideanDistanceCalculator.getInstance().calculateDistance(s_i.getLocation().getCoordinate(), s_j.getLocation().getCoordinate());
-            }
-        } else {
-            throw new UnsupportedOperationException(
-                "currently, this class just works with shipments and services.");
-        }
-        return avgCost;
-    }
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateLoads.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateLoads.java
index 8d3096279..8d6283d7a 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateLoads.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateLoads.java
@@ -17,6 +17,8 @@
  */
 package com.graphhopper.jsprit.core.algorithm.state;
 
+import java.util.Collection;
+
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionStartsListener;
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.JobInsertedListener;
 import com.graphhopper.jsprit.core.problem.SizeDimension;
@@ -28,8 +30,6 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.ActivityVisitor;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 
-import java.util.Collection;
-
 
 /**
  * Updates load at start and end of route as well as at each activity. And update is triggered when either
@@ -52,7 +52,6 @@
 
     private SizeDimension defaultValue;
 
-    private VehicleRoute route;
 
     public UpdateLoads(StateManager stateManager) {
         super();
@@ -66,7 +65,6 @@ public void begin(VehicleRoute route) {
         if (currentLoad == null) {
             currentLoad = defaultValue;
         }
-        this.route = route;
     }
 
     @Override
@@ -111,14 +109,14 @@ public void informJobInserted(Job job2insert, VehicleRoute inRoute, double addit
                 loadAtDepot = defaultValue;
             }
             stateManager.putTypedInternalRouteState(inRoute, InternalStates.LOAD_AT_BEGINNING,
-                loadAtDepot.add(job2insert.getSize()));
+                            loadAtDepot.add(job2insert.getSize()));
         } else if (job2insert instanceof Pickup || job2insert instanceof Service) {
             SizeDimension loadAtEnd = stateManager.getRouteState(inRoute, InternalStates.LOAD_AT_END, SizeDimension.class);
             if (loadAtEnd == null) {
                 loadAtEnd = defaultValue;
             }
             stateManager.putTypedInternalRouteState(inRoute, InternalStates.LOAD_AT_END,
-                loadAtEnd.add(job2insert.getSize()));
+                            loadAtEnd.add(job2insert.getSize()));
         }
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/Capacity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/Capacity.java
index 49eb50f82..f7378e0c8 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/Capacity.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/Capacity.java
@@ -1,6 +1,5 @@
 package com.graphhopper.jsprit.core.problem;
 
-import java.util.Arrays;
 
 import com.graphhopper.jsprit.core.problem.SizeDimension.SizeDimensionSign;
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractSingleActivityJob.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractSingleActivityJob.java
index 9d0e89397..9dabb2ae7 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractSingleActivityJob.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractSingleActivityJob.java
@@ -23,6 +23,7 @@
 import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindows;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindowsImpl;
 
 /**
@@ -139,6 +140,16 @@ public B addTimeWindow(TimeWindow timeWindow) {
             return (B) this;
         }
 
+        public B addTimeWindows(TimeWindows timeWindows) {
+            return addTimeWindows(timeWindows.getTimeWindows());
+        }
+
+        @SuppressWarnings("unchecked")
+        public B addTimeWindows(Collection<TimeWindow> timeWindows) {
+            timeWindows.forEach(t -> addTimeWindow(t));
+            return (B) this;
+        }
+
         public B addTimeWindow(double earliest, double latest) {
             return addTimeWindow(TimeWindow.newInstance(earliest, latest));
         }
@@ -218,42 +229,43 @@ public A getActivity() {
         return (A) getActivityList().getAll().get(0);
     }
 
-    /**
-     * Returns location.
-     *
-     * @return location
-     */
-    @Deprecated
-    public Location getLocation() {
-        return getActivity().getLocation();
-    }
-
-
-    /**
-     * Returns the service-time/duration a service takes at service-location.
-     *
-     * @return service duration
-     */
-    @Deprecated
-    public double getServiceDuration() {
-        return getActivity().getOperationTime();
-    }
-
-    /**
-     * Returns the time-window a service(-operation) is allowed to start.
-     * It is recommended to use getTimeWindows() instead. If you still use this, it returns the first time window of getTimeWindows() collection.
-     *
-     * @return time window
-     */
-    @Deprecated
-    public TimeWindow getTimeWindow() {
-        return getTimeWindows().iterator().next();
-    }
-
-    @Deprecated
-    public Collection<TimeWindow> getServiceTimeWindows() {
-        return getActivity().getTimeWindows();
-    }
+    // /**
+    // * Returns location.
+    // *
+    // * @return location
+    // */
+    // @Deprecated
+    // public Location getLocation() {
+    // return getActivity().getLocation();
+    // }
+    //
+    //
+    // /**
+    // * Returns the service-time/duration a service takes at service-location.
+    // *
+    // * @return service duration
+    // */
+    // @Deprecated
+    // public double getServiceDuration() {
+    // return getActivity().getOperationTime();
+    // }
+    //
+    // /**
+    // * Returns the time-window a service(-operation) is allowed to start.
+    // * It is recommended to use getTimeWindows() instead. If you still use
+    // this, it returns the first time window of getTimeWindows() collection.
+    // *
+    // * @return time window
+    // */
+    // @Deprecated
+    // public TimeWindow getTimeWindow() {
+    // return getTimeWindows().iterator().next();
+    // }
+    //
+    // @Deprecated
+    // public Collection<TimeWindow> getServiceTimeWindows() {
+    // return getActivity().getTimeWindows();
+    // }
 
     /**
      * @return the name
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Job.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Job.java
index e32b72142..ed7a6c84c 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Job.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Job.java
@@ -18,12 +18,16 @@
 package com.graphhopper.jsprit.core.problem.job;
 
 
-import com.graphhopper.jsprit.core.problem.*;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
-
 import java.util.List;
 import java.util.Set;
 
+import com.graphhopper.jsprit.core.problem.HasId;
+import com.graphhopper.jsprit.core.problem.HasIndex;
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
+import com.graphhopper.jsprit.core.problem.Skills;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
+
 /**
  * Basic interface for all jobs.
  *
@@ -45,6 +49,7 @@
      *
      * @return SizeDimension
      */
+    @Deprecated
     public SizeDimension getSize();
 
     public Skills getRequiredSkills();
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java
index 7653df50b..42790b724 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java
@@ -17,8 +17,6 @@
  */
 package com.graphhopper.jsprit.core.problem.job;
 
-import java.util.Collection;
-
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivity;
@@ -322,68 +320,68 @@ public DeliveryActivity getDeliveryActivity() {
 
     // =================== DEPRECATED GETTERS
 
-    @Deprecated
-    public Location getPickupLocation() {
-        return getPickupActivity().getLocation();
-    }
-
-    /**
-     * Returns the pickup service-time.
-     * <p>
-     * <p>
-     * By default service-time is 0.0.
-     *
-     * @return service-time
-     */
-    @Deprecated
-    public double getPickupServiceTime() {
-        return getPickupActivity().getOperationTime();
-    }
-
-    @Deprecated
-    public Location getDeliveryLocation() {
-        return getDeliveryActivity().getLocation();
-    }
-
-    /**
-     * Returns service-time of delivery.
-     *
-     * @return service-time of delivery
-     */
-    @Deprecated
-    public double getDeliveryServiceTime() {
-        return getDeliveryActivity().getOperationTime();
-    }
-
-    /**
-     * Returns the time-window of delivery.
-     *
-     * @return time-window of delivery
-     */
-    @Deprecated
-    public TimeWindow getDeliveryTimeWindow() {
-        return getDeliveryTimeWindows().iterator().next();
-    }
-
-    @Deprecated
-    public Collection<TimeWindow> getDeliveryTimeWindows() {
-        return getDeliveryActivity().getTimeWindows();
-    }
-
-    /**
-     * Returns the time-window of pickup.
-     *
-     * @return time-window of pickup
-     */
-    @Deprecated
-    public TimeWindow getPickupTimeWindow() {
-        return getPickupTimeWindows().iterator().next();
-    }
-
-    @Deprecated
-    public Collection<TimeWindow> getPickupTimeWindows() {
-        return getPickupActivity().getTimeWindows();
-    }
+    // @Deprecated
+    // public Location getPickupLocation() {
+    // return getPickupActivity().getLocation();
+    // }
+    //
+    // /**
+    // * Returns the pickup service-time.
+    // * <p>
+    // * <p>
+    // * By default service-time is 0.0.
+    // *
+    // * @return service-time
+    // */
+    // @Deprecated
+    // public double getPickupServiceTime() {
+    // return getPickupActivity().getOperationTime();
+    // }
+    //
+    // @Deprecated
+    // public Location getDeliveryLocation() {
+    // return getDeliveryActivity().getLocation();
+    // }
+    //
+    // /**
+    // * Returns service-time of delivery.
+    // *
+    // * @return service-time of delivery
+    // */
+    // @Deprecated
+    // public double getDeliveryServiceTime() {
+    // return getDeliveryActivity().getOperationTime();
+    // }
+    //
+    // /**
+    // * Returns the time-window of delivery.
+    // *
+    // * @return time-window of delivery
+    // */
+    // @Deprecated
+    // public TimeWindow getDeliveryTimeWindow() {
+    // return getDeliveryTimeWindows().iterator().next();
+    // }
+    //
+    // @Deprecated
+    // public Collection<TimeWindow> getDeliveryTimeWindows() {
+    // return getDeliveryActivity().getTimeWindows();
+    // }
+    //
+    // /**
+    // * Returns the time-window of pickup.
+    // *
+    // * @return time-window of pickup
+    // */
+    // @Deprecated
+    // public TimeWindow getPickupTimeWindow() {
+    // return getPickupTimeWindows().iterator().next();
+    // }
+    //
+    // @Deprecated
+    // public Collection<TimeWindow> getPickupTimeWindows() {
+    // return getPickupActivity().getTimeWindows();
+    // }
 
     @Override
     @Deprecated
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRoute.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRoute.java
index 66cba382e..6bc2082ba 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRoute.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRoute.java
@@ -203,7 +203,7 @@ public Builder addService(AbstractSingleActivityJob<?> service,
         }
 
         private Builder addSingleActivityJob(AbstractSingleActivityJob<?> service) {
-            return addSingleActivityJob(service, service.getActivity().getTimeWindows().iterator().next());
+            return addSingleActivityJob(service, service.getActivity().getSingleTimeWindow());
         }
 
 
@@ -220,6 +220,7 @@ private Builder addSingleActivityJob(AbstractSingleActivityJob<?> service,
             return this;
         }
 
+
         public Builder addBreak(Break currentbreak) {
             if (currentbreak == null) {
                 throw new IllegalArgumentException("break must not be null");
@@ -282,7 +283,8 @@ public Builder addDelivery(Delivery delivery, TimeWindow timeWindow) {
          * @throws IllegalArgumentException if method has already been called with the specified shipment.
          */
         public Builder addPickup(Shipment shipment) {
-            return addPickup(shipment, shipment.getPickupTimeWindow());
+            return addPickup(shipment,
+                            shipment.getPickupActivity().getSingleTimeWindow());
         }
 
         public Builder addPickup(Shipment shipment, TimeWindow pickupTimeWindow) {
@@ -307,7 +309,7 @@ public Builder addPickup(Shipment shipment, TimeWindow pickupTimeWindow) {
          * @throws IllegalArgumentException if specified shipment has not been picked up yet (i.e. method addPickup(shipment) has not been called yet).
          */
         public Builder addDelivery(Shipment shipment) {
-            return addDelivery(shipment, shipment.getDeliveryTimeWindow());
+            return addDelivery(shipment, shipment.getDeliveryActivity().getSingleTimeWindow());
         }
 
         public Builder addDelivery(Shipment shipment, TimeWindow deliveryTimeWindow) {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivity.java
index 470b89837..6111c95b0 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivity.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivity.java
@@ -17,19 +17,19 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.SizeDimension;
+import java.util.Collection;
+
 import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.job.AbstractJob;
 import com.graphhopper.jsprit.core.problem.job.Break;
 import com.graphhopper.jsprit.core.problem.job.Break.Builder;
 
-import java.util.Collection;
-
 public class BreakActivity extends InternalJobActivity {
 
     public static BreakActivity newInstance(Break aBreak, Builder builder) {
         return new BreakActivity(aBreak, "break", builder.getLocation(), builder.getServiceTime(),
-            builder.getCapacity(), builder.getTimeWindows().getTimeWindows());
+                        builder.getCapacity(), builder.getTimeWindows().getTimeWindows());
     }
 
     // protected BreakActivity(Break aBreak) {
@@ -42,7 +42,7 @@ public BreakActivity(BreakActivity breakActivity) {
     }
 
     private BreakActivity(AbstractJob job, String name, Location location, double operationTime,
-                          SizeDimension capacity, Collection<TimeWindow> timeWindows) {
+                    SizeDimension capacity, Collection<TimeWindow> timeWindows) {
         super(job, name, location, operationTime, capacity, timeWindows);
     }
 
@@ -92,4 +92,9 @@ public void setLocation(Location breakLocation) {
         location = breakLocation;
     }
 
+    public TimeWindow getTimeWindow() {
+        // Break has always a single time window
+        return getSingleTimeWindow();
+    }
+
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/JobActivity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/JobActivity.java
index ff714125c..9d0b09d56 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/JobActivity.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/JobActivity.java
@@ -1,13 +1,13 @@
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.SizeDimension;
+import java.util.Collection;
+import java.util.HashSet;
+
 import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.job.AbstractJob;
 import com.graphhopper.jsprit.core.problem.job.Job;
 
-import java.util.Collection;
-import java.util.HashSet;
-
 /**
  * Basic interface of job-activies.
  * <p>
@@ -27,7 +27,7 @@
     private int orderNumber;
 
     public JobActivity(AbstractJob job, String type, Location location, double operationTime,
-                       SizeDimension capacity, Collection<TimeWindow> timeWindows) {
+                    SizeDimension capacity, Collection<TimeWindow> timeWindows) {
         super(type, location, capacity);
         this.job = job;
         this.operationTime = operationTime;
@@ -64,6 +64,12 @@ public String getName() {
         return timeWindows;
     }
 
+    public TimeWindow getSingleTimeWindow() {
+        if (timeWindows.size() > 1) {
+            throw new IllegalArgumentException("More than one time window in. " + this);
+        }
+        return timeWindows.iterator().next();
+    }
 
     @Override
     public int hashCode() {
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/BuildCVRPAlgoFromScratch_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/BuildCVRPAlgoFromScratch_IT.java
index 935769a2c..5ba453790 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/BuildCVRPAlgoFromScratch_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/BuildCVRPAlgoFromScratch_IT.java
@@ -17,6 +17,13 @@
  */
 package com.graphhopper.jsprit.core.algorithm;
 
+import static org.junit.Assert.assertEquals;
+
+import java.util.Collection;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.acceptor.GreedyAcceptance;
 import com.graphhopper.jsprit.core.algorithm.module.RuinAndRecreateModule;
 import com.graphhopper.jsprit.core.algorithm.recreate.BestInsertionBuilder;
@@ -37,12 +44,6 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleFleetManager;
 import com.graphhopper.jsprit.core.util.ChristofidesReader;
 import com.graphhopper.jsprit.core.util.Solutions;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.Collection;
-
-import static org.junit.Assert.assertEquals;
 
 
 public class BuildCVRPAlgoFromScratch_IT {
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CVRPwithDeliveries_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CVRPwithDeliveries_IT.java
index fdb15f12d..4850b7bd1 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CVRPwithDeliveries_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CVRPwithDeliveries_IT.java
@@ -17,17 +17,18 @@
  */
 package com.graphhopper.jsprit.core.algorithm;
 
+import static org.junit.Assert.assertEquals;
+
+import java.util.Collection;
+
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.util.ChristofidesReader;
 import com.graphhopper.jsprit.core.util.JobType;
 import com.graphhopper.jsprit.core.util.Solutions;
-import org.junit.Test;
-
-import java.util.Collection;
-
-import static org.junit.Assert.assertEquals;
 
 public class CVRPwithDeliveries_IT {
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CVRPwithMatrix_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CVRPwithMatrix_IT.java
index fa292fd8c..c5def0ec0 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CVRPwithMatrix_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CVRPwithMatrix_IT.java
@@ -25,15 +25,12 @@
 import java.util.Collection;
 import java.util.List;
 
-import org.junit.Assert;
 import org.junit.Test;
 
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
-import com.graphhopper.jsprit.core.analysis.SolutionAnalyser;
 import com.graphhopper.jsprit.core.distance.EuclideanDistanceCalculator;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.cost.TransportDistance;
 import com.graphhopper.jsprit.core.problem.job.AbstractSingleActivityJob;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
@@ -57,7 +54,7 @@ public void whenReturnToDepot_itShouldWorkWithMatrix() {
         VehicleRoutingProblem vrp = createVrpWithLocationIndecesAndMatrix(vrp_, true);
         VehicleRoutingAlgorithm vra = Jsprit.Builder.newInstance(vrp).setProperty(Jsprit.Parameter.FAST_REGRET, "true").buildAlgorithm();
         Collection<VehicleRoutingProblemSolution> solutions = vra.searchSolutions();
-        Assert.assertEquals(530.0, Solutions.bestOf(solutions).getCost(), 50.0);
+        assertEquals(530.0, Solutions.bestOf(solutions).getCost(), 50.0);
         assertEquals(5, Solutions.bestOf(solutions).getRoutes().size());
     }
 
@@ -69,7 +66,7 @@ public void whenNotReturnToDepot_itShouldWorkWithMatrix() {
         VehicleRoutingProblem vrp = createVrpWithLocationIndecesAndMatrix(vrp_, false);
         VehicleRoutingAlgorithm vra = Jsprit.Builder.newInstance(vrp).setProperty(Jsprit.Parameter.FAST_REGRET, "true").buildAlgorithm();
         try {
-            Collection<VehicleRoutingProblemSolution> solutions = vra.searchSolutions();
+            vra.searchSolutions();
             assertTrue(true);
         } catch (Exception e) {
             assertFalse(true);
@@ -83,13 +80,7 @@ public void whenCalcTimeWithSolutionAnalyser_itShouldWork() {
         VehicleRoutingProblem vrp_ = vrpBuilder.build();
         final VehicleRoutingProblem vrp = createVrpWithLocationIndecesAndMatrix(vrp_, false);
         VehicleRoutingAlgorithm vra = Jsprit.Builder.newInstance(vrp).setProperty(Jsprit.Parameter.FAST_REGRET, "true").buildAlgorithm();
-        Collection<VehicleRoutingProblemSolution> solutions = vra.searchSolutions();
-        SolutionAnalyser sa = new SolutionAnalyser(vrp, Solutions.bestOf(solutions), new TransportDistance() {
-            @Override
-            public double getDistance(Location from, Location to, double departureTime, Vehicle vehicle) {
-                return vrp.getTransportCosts().getTransportCost(from, to, 0., null, null);
-            }
-        });
+        vra.searchSolutions();
     }
 
 
@@ -109,10 +100,11 @@ private VehicleRoutingProblem createVrpWithLocationIndecesAndMatrix(VehicleRouti
         for (Job j : vrp_.getJobs().values()) {
             AbstractSingleActivityJob<?> s = (AbstractSingleActivityJob<?>) j;
             Location l = Location.Builder.newInstance().setIndex(getIndex())
-                            .setId(s.getLocation().getId()).setCoordinate(s.getLocation().getCoordinate()).build();
+                            .setId(s.getActivity().getLocation().getId())
+                            .setCoordinate(s.getActivity().getLocation().getCoordinate()).build();
             AbstractSingleActivityJob<?> newService = s.getBuilder(s.getId())
-                            .setServiceTime(s.getServiceDuration())
-                            .addSizeDimension(0, s.getSize().get(0))
+                            .setServiceTime(s.getActivity().getOperationTime())
+                            .addSizeDimension(0, s.getActivity().getLoadChange().abs().get(0))
                             .setLocation(l).build();
             vrpBuilder.addJob(newService);
             locations.add(l);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CVRPwithPickups_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CVRPwithPickups_IT.java
index 1b011f531..3cac4cedf 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CVRPwithPickups_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CVRPwithPickups_IT.java
@@ -17,17 +17,18 @@
  */
 package com.graphhopper.jsprit.core.algorithm;
 
+import static org.junit.Assert.assertEquals;
+
+import java.util.Collection;
+
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.util.ChristofidesReader;
 import com.graphhopper.jsprit.core.util.JobType;
 import com.graphhopper.jsprit.core.util.Solutions;
-import org.junit.Test;
-
-import java.util.Collection;
-
-import static org.junit.Assert.assertEquals;
 
 public class CVRPwithPickups_IT {
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CapacityConstraint_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CapacityConstraint_IT.java
index a626b4fea..d5bc99a2c 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CapacityConstraint_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CapacityConstraint_IT.java
@@ -17,11 +17,14 @@
  */
 package com.graphhopper.jsprit.core.algorithm;
 
+import org.junit.Assert;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.analysis.SolutionAnalyser;
 import com.graphhopper.jsprit.core.distance.ManhattanDistanceCalculator;
-import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.cost.TransportDistance;
 import com.graphhopper.jsprit.core.problem.job.Delivery;
@@ -32,8 +35,6 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.DefaultCosts;
 import com.graphhopper.jsprit.core.util.Solutions;
-import org.junit.Assert;
-import org.junit.Test;
 
 
 public class CapacityConstraint_IT {
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/DeactivateTimeWindowsTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/DeactivateTimeWindowsTest.java
index 45c36b4ed..f6be8e77c 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/DeactivateTimeWindowsTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/DeactivateTimeWindowsTest.java
@@ -19,6 +19,13 @@
 package com.graphhopper.jsprit.core.algorithm;
 
 
+import static org.junit.Assert.assertEquals;
+
+import java.util.Collection;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.problem.Location;
@@ -30,11 +37,6 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.util.Solutions;
-import org.junit.Assert;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.Collection;
 
 public class DeactivateTimeWindowsTest {
 
@@ -43,7 +45,7 @@
     @Before
     public void doBefore() {
         Service service = new Service.Builder("s").setLocation(Location.newInstance(20, 0))
-            .setTimeWindow(TimeWindow.newInstance(40, 50)).build();
+                        .setTimeWindow(TimeWindow.newInstance(40, 50)).build();
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         vrp = VehicleRoutingProblem.Builder.newInstance().addJob(service).addVehicle(vehicle).build();
 
@@ -56,7 +58,7 @@ public void activityTimesShouldConsiderTimeWindows() {
         Collection<VehicleRoutingProblemSolution> solutions = vra.searchSolutions();
 
         VehicleRoute route = Solutions.bestOf(solutions).getRoutes().iterator().next();
-        Assert.assertEquals(40., route.getActivities().get(0).getEndTime(), 0.01);
+        assertEquals(40., route.getActivities().get(0).getEndTime(), 0.01);
     }
 
     @Test
@@ -67,11 +69,11 @@ public void whenActivatingViaStateManager_activityTimesShouldConsiderTimeWindows
         constraintManager.addTimeWindowConstraint();
 
         VehicleRoutingAlgorithm vra = Jsprit.Builder.newInstance(vrp).addCoreStateAndConstraintStuff(true)
-            .setStateAndConstraintManager(stateManager, constraintManager).buildAlgorithm();
+                        .setStateAndConstraintManager(stateManager, constraintManager).buildAlgorithm();
         vra.setMaxIterations(10);
         Collection<VehicleRoutingProblemSolution> solutions = vra.searchSolutions();
 
         VehicleRoute route = Solutions.bestOf(solutions).getRoutes().iterator().next();
-        Assert.assertEquals(40., route.getActivities().get(0).getEndTime(), 0.01);
+        assertEquals(40., route.getActivities().get(0).getEndTime(), 0.01);
     }
 }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ExternalInitialSolutionIsInValidTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ExternalInitialSolutionIsInValidTest.java
index 6a3d0df8d..601755416 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ExternalInitialSolutionIsInValidTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ExternalInitialSolutionIsInValidTest.java
@@ -18,6 +18,12 @@
 
 package com.graphhopper.jsprit.core.algorithm;
 
+import static org.junit.Assert.fail;
+
+import java.util.Arrays;
+
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
@@ -25,10 +31,6 @@
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
-import junit.framework.Assert;
-import org.junit.Test;
-
-import java.util.Arrays;
 
 
 public class ExternalInitialSolutionIsInValidTest {
@@ -54,9 +56,8 @@ public void itShouldSolveProblemWithIniSolutionExternallyCreated() {
 
         try {
             vra.searchSolutions();
-            Assert.assertTrue(true);
         } catch (Exception e) {
-            Assert.assertFalse(true);
+            fail();
         }
 
     }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/FirstCustomJobExample.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/FirstCustomJobExample.java
index f0b7e1eda..345a5da1c 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/FirstCustomJobExample.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/FirstCustomJobExample.java
@@ -18,6 +18,9 @@
 
 package com.graphhopper.jsprit.core.algorithm;
 
+import org.junit.Assert;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.SizeDimension;
@@ -28,8 +31,6 @@
 import com.graphhopper.jsprit.core.reporting.SolutionPrinter;
 import com.graphhopper.jsprit.core.util.CustomJob;
 import com.graphhopper.jsprit.core.util.Solutions;
-import org.junit.Assert;
-import org.junit.Test;
 
 /**
  * Created by schroeder on 11/11/16.
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/FirstCustomJobWithMultipleActivitiesExample.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/FirstCustomJobWithMultipleActivitiesExample.java
index 0bafa9664..c00ddf2c3 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/FirstCustomJobWithMultipleActivitiesExample.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/FirstCustomJobWithMultipleActivitiesExample.java
@@ -18,6 +18,11 @@
 
 package com.graphhopper.jsprit.core.algorithm;
 
+import static org.junit.Assert.assertEquals;
+
+import org.junit.Assert;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.SizeDimension;
@@ -30,8 +35,6 @@
 import com.graphhopper.jsprit.core.reporting.SolutionPrinter;
 import com.graphhopper.jsprit.core.util.CustomJob;
 import com.graphhopper.jsprit.core.util.Solutions;
-import org.junit.Assert;
-import org.junit.Test;
 
 /**
  * Created by schroeder on 11/11/16.
@@ -43,14 +46,14 @@
     @Test
     public void shouldRunOK() {
         CustomJob cj = CustomJob.Builder.newInstance("job")
-            .addPickup(Location.newInstance(10, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).build())
-            .addPickup(Location.newInstance(5, 0), SizeDimension.Builder.newInstance().addDimension(0, 2).build())
-            .addPickup(Location.newInstance(20, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).build())
-            .build();
+                        .addPickup(Location.newInstance(10, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).build())
+                        .addPickup(Location.newInstance(5, 0), SizeDimension.Builder.newInstance().addDimension(0, 2).build())
+                        .addPickup(Location.newInstance(20, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).build())
+                        .build();
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0, 4).build();
         Vehicle v = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance()
-            .addJob(cj).addVehicle(v).build();
+                        .addJob(cj).addVehicle(v).build();
         VehicleRoutingAlgorithm vra = Jsprit.createAlgorithm(vrp);
         vra.setMaxIterations(10);
         VehicleRoutingProblemSolution solution = Solutions.bestOf(vra.searchSolutions());
@@ -61,14 +64,14 @@ public void shouldRunOK() {
     @Test
     public void shouldNotIgnoresCapacity() {
         CustomJob cj = CustomJob.Builder.newInstance("job")
-            .addPickup(Location.newInstance(10, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).build())
-            .addPickup(Location.newInstance(5, 0), SizeDimension.Builder.newInstance().addDimension(0, 2).build())
-            .addPickup(Location.newInstance(20, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).build())
-            .build();
+                        .addPickup(Location.newInstance(10, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).build())
+                        .addPickup(Location.newInstance(5, 0), SizeDimension.Builder.newInstance().addDimension(0, 2).build())
+                        .addPickup(Location.newInstance(20, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).build())
+                        .build();
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0, 2).build();
         Vehicle v = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance()
-            .addJob(cj).addVehicle(v).build();
+                        .addJob(cj).addVehicle(v).build();
         VehicleRoutingAlgorithm vra = Jsprit.createAlgorithm(vrp);
         vra.setMaxIterations(10);
         VehicleRoutingProblemSolution solution = Solutions.bestOf(vra.searchSolutions());
@@ -79,14 +82,14 @@ public void shouldNotIgnoresCapacity() {
     @Test
     public void shouldNotIgnoresCapacityWithMixedPicksAndDeliveries() {
         CustomJob cj = CustomJob.Builder.newInstance("job")
-            .addPickup(Location.newInstance(10, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).build())
-            .addPickup(Location.newInstance(5, 0), SizeDimension.Builder.newInstance().addDimension(0, 2).build())
-            .addDelivery(Location.newInstance(20, 0), SizeDimension.Builder.newInstance().addDimension(0, 3).build())
-            .build();
+                        .addPickup(Location.newInstance(10, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).build())
+                        .addPickup(Location.newInstance(5, 0), SizeDimension.Builder.newInstance().addDimension(0, 2).build())
+                        .addDelivery(Location.newInstance(20, 0), SizeDimension.Builder.newInstance().addDimension(0, 3).build())
+                        .build();
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0, 2).build();
         Vehicle v = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance()
-            .addJob(cj).addVehicle(v).build();
+                        .addJob(cj).addVehicle(v).build();
         VehicleRoutingAlgorithm vra = Jsprit.createAlgorithm(vrp);
         vra.setMaxIterations(10);
         VehicleRoutingProblemSolution solution = Solutions.bestOf(vra.searchSolutions());
@@ -97,16 +100,16 @@ public void shouldNotIgnoresCapacityWithMixedPicksAndDeliveries() {
     @Test
     public void shouldNotIgnoresCapacityWithMixedPicksAndDeliveriesV2() {
         CustomJob cj = CustomJob.Builder.newInstance("job")
-            .addPickup(Location.newInstance(10, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).build())
-            .addPickup(Location.newInstance(5, 0), SizeDimension.Builder.newInstance().addDimension(0, 2).build())
-            .addDelivery(Location.newInstance(20, 0), SizeDimension.Builder.newInstance().addDimension(0, 3).build())
-            .build();
-        Assert.assertEquals(SizeDimension.Builder.newInstance().addDimension(0, 0).build(), cj.getSizeAtStart());
-        Assert.assertEquals(SizeDimension.Builder.newInstance().addDimension(0, 0).build(), cj.getSizeAtEnd());
+                        .addPickup(Location.newInstance(10, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).build())
+                        .addPickup(Location.newInstance(5, 0), SizeDimension.Builder.newInstance().addDimension(0, 2).build())
+                        .addDelivery(Location.newInstance(20, 0), SizeDimension.Builder.newInstance().addDimension(0, 3).build())
+                        .build();
+        assertEquals(SizeDimension.Builder.newInstance().addDimension(0, 0).build(), cj.getSizeAtStart());
+        assertEquals(SizeDimension.Builder.newInstance().addDimension(0, 0).build(), cj.getSizeAtEnd());
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0, 3).build();
         Vehicle v = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance()
-            .addJob(cj).addVehicle(v).build();
+                        .addJob(cj).addVehicle(v).build();
         VehicleRoutingAlgorithm vra = Jsprit.createAlgorithm(vrp);
         vra.setMaxIterations(10);
         VehicleRoutingProblemSolution solution = Solutions.bestOf(vra.searchSolutions());
@@ -117,14 +120,14 @@ public void shouldNotIgnoresCapacityWithMixedPicksAndDeliveriesV2() {
     @Test
     public void shouldNotIgnoresCapacityWithExchange() {
         CustomJob cj = CustomJob.Builder.newInstance("job")
-            .addPickup(Location.newInstance(10, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 0).build())
-            .addExchange(Location.newInstance(5, 0), SizeDimension.Builder.newInstance().addDimension(0, -3).addDimension(1, 2).build())
-            .addDelivery(Location.newInstance(20, 0), SizeDimension.Builder.newInstance().addDimension(1, 1).build())
-            .build();
+                        .addPickup(Location.newInstance(10, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 0).build())
+                        .addExchange(Location.newInstance(5, 0), SizeDimension.Builder.newInstance().addDimension(0, -3).addDimension(1, 2).build())
+                        .addDelivery(Location.newInstance(20, 0), SizeDimension.Builder.newInstance().addDimension(1, 1).build())
+                        .build();
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0, 3).addCapacityDimension(1, 2).build();
         Vehicle v = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance()
-            .addJob(cj).addVehicle(v).build();
+                        .addJob(cj).addVehicle(v).build();
         VehicleRoutingAlgorithm vra = Jsprit.createAlgorithm(vrp);
         vra.setMaxIterations(10);
         VehicleRoutingProblemSolution solution = Solutions.bestOf(vra.searchSolutions());
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/IgnoreBreakTimeWindowTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/IgnoreBreakTimeWindowTest.java
index 706f9dfdf..1afb0bdbd 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/IgnoreBreakTimeWindowTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/IgnoreBreakTimeWindowTest.java
@@ -18,6 +18,10 @@
 
 package com.graphhopper.jsprit.core.algorithm;
 
+import static org.junit.Assert.assertTrue;
+
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
@@ -31,9 +35,6 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.Solutions;
-import org.junit.Test;
-
-import static org.junit.Assert.assertTrue;
 
 /**
  * Created by schroeder on 08/01/16.
@@ -64,30 +65,30 @@ public void doNotIgnoreBreakTW() {
 
 
         Service service4 = new Service.Builder("2").setLocation(Location.newInstance(0, 0))
-            .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(17, 17)).build();
+                        .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(17, 17)).build();
 
         Service service5 = new Service.Builder("3").setLocation(Location.newInstance(0, 0))
-            .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(18, 18)).build();
+                        .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(18, 18)).build();
 
         Service service7 = new Service.Builder("4").setLocation(Location.newInstance(0, 0))
-            .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(10, 10)).build();
+                        .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(10, 10)).build();
 
         Service service8 = new Service.Builder("5").setLocation(Location.newInstance(0, 0))
-            .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(12, 12)).build();
+                        .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(12, 12)).build();
 
         Service service10 = new Service.Builder("6").setLocation(Location.newInstance(0, 0))
-            .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(16, 16)).build();
+                        .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(16, 16)).build();
 
         Service service11 = new Service.Builder("7").setLocation(Location.newInstance(0, 0))
-            .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(13, 13)).build();
+                        .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(13, 13)).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance()
-            .addVehicle(vehicle2)
-            .addJob(service4)
-            .addJob(service5).addJob(service7)
-            .addJob(service8).addJob(service10).addJob(service11)
-            .setFleetSize(VehicleRoutingProblem.FleetSize.FINITE)
-            .build();
+                        .addVehicle(vehicle2)
+                        .addJob(service4)
+                        .addJob(service5).addJob(service7)
+                        .addJob(service8).addJob(service10).addJob(service11)
+                        .setFleetSize(VehicleRoutingProblem.FleetSize.FINITE)
+                        .build();
 
         VehicleRoutingAlgorithm vra = Jsprit.createAlgorithm(vrp);
         vra.setMaxIterations(50);
@@ -102,7 +103,7 @@ private boolean breakShouldBeTime(VehicleRoutingProblemSolution solution) {
         boolean inTime = true;
         for (TourActivity act : solution.getRoutes().iterator().next().getActivities()) {
             if (act instanceof BreakActivity) {
-                TimeWindow timeWindow = ((BreakActivity) act).getJob().getTimeWindow();
+                TimeWindow timeWindow = ((BreakActivity) act).getSingleTimeWindow();
                 if (act.getEndTime() < timeWindow.getStart()) {
                     inTime = false;
                 }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/MeetTimeWindowConstraint_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/MeetTimeWindowConstraint_IT.java
index c5b3c97b0..703d3b017 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/MeetTimeWindowConstraint_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/MeetTimeWindowConstraint_IT.java
@@ -17,6 +17,19 @@
  */
 package com.graphhopper.jsprit.core.algorithm;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.JobInsertedListener;
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.VehicleSwitchedListener;
@@ -34,19 +47,6 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.FastVehicleRoutingTransportCostsMatrix;
 import com.graphhopper.jsprit.core.util.Solutions;
-import org.junit.Assert;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.io.BufferedReader;
-import java.io.IOException;
-import java.io.InputStreamReader;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.List;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
 
 public class MeetTimeWindowConstraint_IT {
 
@@ -73,7 +73,7 @@ public void whenEmployingVehicleWithDifferentWorkingShifts_nRoutesShouldBeCorrec
         VehicleRoutingAlgorithm vra = Jsprit.createAlgorithm(vrp);
         vra.setMaxIterations(100);
         Collection<VehicleRoutingProblemSolution> solutions = vra.searchSolutions();
-        Assert.assertEquals(2, Solutions.bestOf(solutions).getRoutes().size());
+        assertEquals(2, Solutions.bestOf(solutions).getRoutes().size());
     }
 
     @Test
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/MultipleTimeWindowsTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/MultipleTimeWindowsTest.java
index 7d18330fc..49b38cd72 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/MultipleTimeWindowsTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/MultipleTimeWindowsTest.java
@@ -18,6 +18,10 @@
 
 package com.graphhopper.jsprit.core.algorithm;
 
+import static org.junit.Assert.assertEquals;
+
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
@@ -25,8 +29,6 @@
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.util.Solutions;
-import junit.framework.Assert;
-import org.junit.Test;
 
 /**
  * Created by schroeder on 26/05/15.
@@ -38,42 +40,42 @@ public void service2ShouldNotBeInserted() {
         Service s = new Service.Builder("s1").setLocation(Location.newInstance(10, 0)).build();
 
         Service s2 = new Service.Builder("s2")
-            .addTimeWindow(50., 60.)
-            .setLocation(Location.newInstance(20, 0)).build();
+                        .addTimeWindow(50., 60.)
+                        .setLocation(Location.newInstance(20, 0)).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v1").setStartLocation(Location.newInstance(0, 0))
-            .setEarliestStart(0.).setLatestArrival(40).build();
+                        .setEarliestStart(0.).setLatestArrival(40).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(s).addJob(s2).addVehicle(v).build();
         VehicleRoutingAlgorithm algorithm = Jsprit.createAlgorithm(vrp);
         algorithm.setMaxIterations(100);
         VehicleRoutingProblemSolution solution = Solutions.bestOf(algorithm.searchSolutions());
 
-        Assert.assertEquals(1, solution.getUnassignedJobs().size());
+        assertEquals(1, solution.getUnassignedJobs().size());
     }
 
     @Test
     public void service2ShouldBeInsertedIntoNewVehicle() {
         Service s = new Service.Builder("s1").setLocation(Location.newInstance(10, 0))
-            .addTimeWindow(5., 15.).build();
+                        .addTimeWindow(5., 15.).build();
 
         Service s2 = new Service.Builder("s2")
-            .addTimeWindow(50., 60.)
-            .setLocation(Location.newInstance(20, 0)).build();
+                        .addTimeWindow(50., 60.)
+                        .setLocation(Location.newInstance(20, 0)).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v1").setStartLocation(Location.newInstance(0, 0))
-            .setEarliestStart(0.).setLatestArrival(40).build();
+                        .setEarliestStart(0.).setLatestArrival(40).build();
 
         VehicleImpl v2 = VehicleImpl.Builder.newInstance("v2").setStartLocation(Location.newInstance(0, 0))
-            .setEarliestStart(40.).setLatestArrival(80).build();
+                        .setEarliestStart(40.).setLatestArrival(80).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(s).addJob(s2).addVehicle(v).addVehicle(v2).build();
         VehicleRoutingAlgorithm algorithm = Jsprit.createAlgorithm(vrp);
         algorithm.setMaxIterations(100);
         VehicleRoutingProblemSolution solution = Solutions.bestOf(algorithm.searchSolutions());
 
-        Assert.assertEquals(0, solution.getUnassignedJobs().size());
-        Assert.assertEquals(2, solution.getRoutes().size());
+        assertEquals(0, solution.getUnassignedJobs().size());
+        assertEquals(2, solution.getRoutes().size());
     }
 
     @Test
@@ -81,17 +83,17 @@ public void service2ShouldBeInserted() {
         Service s = new Service.Builder("s1").setLocation(Location.newInstance(10, 0)).build();
 
         Service s2 = new Service.Builder("s2")
-            .addTimeWindow(50., 60.).addTimeWindow(15., 25)
-            .setLocation(Location.newInstance(20, 0)).build();
+                        .addTimeWindow(50., 60.).addTimeWindow(15., 25)
+                        .setLocation(Location.newInstance(20, 0)).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v1").setStartLocation(Location.newInstance(0, 0))
-            .setEarliestStart(0.).setLatestArrival(40).build();
+                        .setEarliestStart(0.).setLatestArrival(40).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(s).addJob(s2).addVehicle(v).build();
         VehicleRoutingAlgorithm algorithm = Jsprit.createAlgorithm(vrp);
         algorithm.setMaxIterations(100);
         VehicleRoutingProblemSolution solution = Solutions.bestOf(algorithm.searchSolutions());
 
-        Assert.assertEquals(0, solution.getUnassignedJobs().size());
+        assertEquals(0, solution.getUnassignedJobs().size());
     }
 }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/OpenRoutesTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/OpenRoutesTest.java
index e0352448a..0c0d0d368 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/OpenRoutesTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/OpenRoutesTest.java
@@ -17,6 +17,14 @@
  */
 package com.graphhopper.jsprit.core.algorithm;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
+import java.util.Collection;
+
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.box.SchrimpfFactory;
 import com.graphhopper.jsprit.core.algorithm.recreate.NoSolutionFoundException;
 import com.graphhopper.jsprit.core.distance.SphericalDistanceCalculator;
@@ -32,13 +40,6 @@
 import com.graphhopper.jsprit.core.util.DefaultCosts;
 import com.graphhopper.jsprit.core.util.Solutions;
 import com.graphhopper.jsprit.core.util.TestUtils;
-import org.junit.Assert;
-import org.junit.Test;
-
-import java.util.Collection;
-
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
 
 public class OpenRoutesTest {
 
@@ -47,10 +48,10 @@ public void whenDealingWithOpenRouteAndShipments_insertionShouldNotRequireRouteT
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").build();
 
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v").setLatestArrival(11.)
-            .setType(type).setReturnToDepot(false).setStartLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(0, 0)).build()).build();
+                        .setType(type).setReturnToDepot(false).setStartLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(0, 0)).build()).build();
 
         Shipment shipment = Shipment.Builder.newInstance("s").setPickupLocation(TestUtils.loc(Coordinate.newInstance(5, 0)))
-            .setDeliveryLocation(TestUtils.loc(Coordinate.newInstance(10, 0))).build();
+                        .setDeliveryLocation(TestUtils.loc(Coordinate.newInstance(10, 0))).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(shipment).addVehicle(vehicle).build();
 
@@ -71,13 +72,13 @@ public void whenDealingWithOpenRouteAndShipments_insertionShouldNotRequireRouteT
     public void whenDealingWithOpenRoute_insertionShouldNotRequireRouteToBeClosed() {
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").build();
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v").setLatestArrival(9.)
-            .setType(type).setReturnToDepot(false)
-            .setStartLocation(TestUtils.loc(Coordinate.newInstance(0, 0)))
-            .build();
+                        .setType(type).setReturnToDepot(false)
+                        .setStartLocation(TestUtils.loc(Coordinate.newInstance(0, 0)))
+                        .build();
 
         Service service = new Service.Builder("s")
-            .setLocation(TestUtils.loc(Coordinate.newInstance(5, 0)))
-            .build();
+                        .setLocation(TestUtils.loc(Coordinate.newInstance(5, 0)))
+                        .build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(service).addVehicle(vehicle).build();
 
@@ -100,13 +101,13 @@ public void whenDealingWithOpenRouteAndShipments_algorithmShouldCalculateCorrect
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").build();
 
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v").setLatestArrival(20.)
-            .setType(type).setReturnToDepot(false).setStartLocation(Location.Builder.newInstance()
-                .setCoordinate(Coordinate.newInstance(0, 0)).build()).build();
+                        .setType(type).setReturnToDepot(false).setStartLocation(Location.Builder.newInstance()
+                                        .setCoordinate(Coordinate.newInstance(0, 0)).build()).build();
 
         Shipment shipment = Shipment.Builder.newInstance("s")
-            .setPickupLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(5, 0)).build())
-            .setDeliveryLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(10, 0)).build())
-            .build();
+                        .setPickupLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(5, 0)).build())
+                        .setDeliveryLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(10, 0)).build())
+                        .build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(shipment).addVehicle(vehicle).build();
 
@@ -115,7 +116,7 @@ public void whenDealingWithOpenRouteAndShipments_algorithmShouldCalculateCorrect
 
         Collection<VehicleRoutingProblemSolution> solutions = vra.searchSolutions();
 
-        Assert.assertEquals(10., Solutions.bestOf(solutions).getCost(), 0.01);
+        assertEquals(10., Solutions.bestOf(solutions).getCost(), 0.01);
 
     }
 
@@ -123,10 +124,10 @@ public void whenDealingWithOpenRouteAndShipments_algorithmShouldCalculateCorrect
     public void whenDealingWithOpenRoute_algorithmShouldCalculateCorrectCosts() {
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").build();
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v").setLatestArrival(10.)
-            .setType(type).setReturnToDepot(false).setStartLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(0, 0)).build()).build();
+                        .setType(type).setReturnToDepot(false).setStartLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(0, 0)).build()).build();
 
         Service service = new Service.Builder("s")
-            .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(5, 0)).build()).build();
+                        .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(5, 0)).build()).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(service).addVehicle(vehicle).build();
 
@@ -135,7 +136,7 @@ public void whenDealingWithOpenRoute_algorithmShouldCalculateCorrectCosts() {
 
         Collection<VehicleRoutingProblemSolution> solutions = vra.searchSolutions();
 
-        Assert.assertEquals(5., Solutions.bestOf(solutions).getCost(), 0.01);
+        assertEquals(5., Solutions.bestOf(solutions).getCost(), 0.01);
 
     }
 
@@ -143,23 +144,23 @@ public void whenDealingWithOpenRoute_algorithmShouldCalculateCorrectCosts() {
     public void whenDealingWithOpenRouteAndGreatCircleCost_algorithmShouldRunWithoutException() {
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").build();
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v")
-            .setType(type).setReturnToDepot(false)
-            .setStartLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(0, 0)).build())
-            .build();
+                        .setType(type).setReturnToDepot(false)
+                        .setStartLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(0, 0)).build())
+                        .build();
 
         Service service = new Service.Builder("s")
-            .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(50, 0)).build()).build();
+                        .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(50, 0)).build()).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance()
-            .addJob(service).addVehicle(vehicle)
-            .setRoutingCost(new DefaultCosts(SphericalDistanceCalculator.getInstance()))
-            .build();
+                        .addJob(service).addVehicle(vehicle)
+                        .setRoutingCost(new DefaultCosts(SphericalDistanceCalculator.getInstance()))
+                        .build();
 
         VehicleRoutingAlgorithm vra = new SchrimpfFactory().createAlgorithm(vrp);
         vra.setMaxIterations(10);
 
         try {
-            @SuppressWarnings("UnusedDeclaration")
+            @SuppressWarnings({ "UnusedDeclaration", "unused" })
             Collection<VehicleRoutingProblemSolution> solutions = vra.searchSolutions();
             assertTrue(true);
         } catch (Exception e) {
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/PickupsAndDeliveries_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/PickupsAndDeliveries_IT.java
index ca4e54359..ef446e298 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/PickupsAndDeliveries_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/PickupsAndDeliveries_IT.java
@@ -17,16 +17,17 @@
  */
 package com.graphhopper.jsprit.core.algorithm;
 
+import static org.junit.Assert.assertEquals;
+
+import java.util.Collection;
+
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.util.LiLimReader;
 import com.graphhopper.jsprit.core.util.Solutions;
-import org.junit.Test;
-
-import java.util.Collection;
-
-import static org.junit.Assert.assertEquals;
 
 public class PickupsAndDeliveries_IT {
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollectionWithCostsHigherThanTimesAndFiniteFleet_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollectionWithCostsHigherThanTimesAndFiniteFleet_IT.java
index 0bd7613ed..627ad6998 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollectionWithCostsHigherThanTimesAndFiniteFleet_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollectionWithCostsHigherThanTimesAndFiniteFleet_IT.java
@@ -17,6 +17,16 @@
  */
 package com.graphhopper.jsprit.core.algorithm;
 
+import static org.junit.Assert.assertEquals;
+
+import java.io.BufferedReader;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.Collection;
+
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.box.GreedySchrimpfFactory;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
@@ -27,15 +37,6 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.Solutions;
 import com.graphhopper.jsprit.core.util.VehicleRoutingTransportCostsMatrix;
-import org.junit.Test;
-
-import java.io.BufferedReader;
-import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.io.InputStreamReader;
-import java.util.Collection;
-
-import static org.junit.Assert.assertEquals;
 
 
 public class RefuseCollectionWithCostsHigherThanTimesAndFiniteFleet_IT {
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollectionWithCostsHigherThanTimesAndFiniteFleet_withTimeAndDistanceCosts_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollectionWithCostsHigherThanTimesAndFiniteFleet_withTimeAndDistanceCosts_IT.java
index 6cd30e89b..df36105fb 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollectionWithCostsHigherThanTimesAndFiniteFleet_withTimeAndDistanceCosts_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollectionWithCostsHigherThanTimesAndFiniteFleet_withTimeAndDistanceCosts_IT.java
@@ -17,6 +17,16 @@
  */
 package com.graphhopper.jsprit.core.algorithm;
 
+import static org.junit.Assert.assertEquals;
+
+import java.io.BufferedReader;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.Collection;
+
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.box.GreedySchrimpfFactory;
 import com.graphhopper.jsprit.core.algorithm.termination.IterationWithoutImprovementTermination;
 import com.graphhopper.jsprit.core.problem.Location;
@@ -28,15 +38,6 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.Solutions;
 import com.graphhopper.jsprit.core.util.VehicleRoutingTransportCostsMatrix;
-import org.junit.Test;
-
-import java.io.BufferedReader;
-import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.io.InputStreamReader;
-import java.util.Collection;
-
-import static org.junit.Assert.assertEquals;
 
 
 public class RefuseCollectionWithCostsHigherThanTimesAndFiniteFleet_withTimeAndDistanceCosts_IT {
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollection_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollection_IT.java
index c08efe5cf..5e1975bfc 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollection_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollection_IT.java
@@ -18,6 +18,16 @@
 package com.graphhopper.jsprit.core.algorithm;
 
 
+import static org.junit.Assert.assertEquals;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.io.Reader;
+import java.util.Collection;
+
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.algorithm.box.SchrimpfFactory;
 import com.graphhopper.jsprit.core.algorithm.termination.IterationWithoutImprovementTermination;
@@ -31,14 +41,6 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.Solutions;
 import com.graphhopper.jsprit.core.util.VehicleRoutingTransportCostsMatrix;
-import org.junit.Assert;
-import org.junit.Test;
-
-import java.io.BufferedReader;
-import java.io.IOException;
-import java.io.InputStreamReader;
-import java.io.Reader;
-import java.util.Collection;
 
 
 public class RefuseCollection_IT {
@@ -47,9 +49,9 @@
     @Test
     public void whenReadingServices_itShouldCalculateCorrectly() {
 
-		/*
+        /*
          * create vehicle-type and vehicle
-		 */
+         */
         VehicleTypeImpl.Builder typeBuilder = VehicleTypeImpl.Builder.newInstance("vehicle-type").addCapacityDimension(0, 23);
         typeBuilder.setCostPerDistance(1.0);
         VehicleTypeImpl bigType = typeBuilder.build();
@@ -59,20 +61,20 @@ public void whenReadingServices_itShouldCalculateCorrectly() {
         vehicleBuilder.setType(bigType);
         VehicleImpl bigVehicle = vehicleBuilder.build();
 
-		/*
+        /*
          * start building the problem
-		 */
+         */
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.setFleetSize(VehicleRoutingProblem.FleetSize.INFINITE);
         vrpBuilder.addVehicle(bigVehicle);
 
-		/*
+        /*
          * create cost-matrix
-		 */
+         */
         VehicleRoutingTransportCostsMatrix.Builder matrixBuilder = VehicleRoutingTransportCostsMatrix.Builder.newInstance(true);
         /*
          * read demand quantities
-		 */
+         */
         readDemandQuantitiesAsServices(vrpBuilder);
         readDistances(matrixBuilder);
 
@@ -82,16 +84,16 @@ public void whenReadingServices_itShouldCalculateCorrectly() {
         vra.setPrematureAlgorithmTermination(new IterationWithoutImprovementTermination(100));
         Collection<VehicleRoutingProblemSolution> solutions = vra.searchSolutions();
 
-        Assert.assertEquals(397.0, Solutions.bestOf(solutions).getCost(), 40.);
-        Assert.assertEquals(2, Solutions.bestOf(solutions).getRoutes().size());
+        assertEquals(397.0, Solutions.bestOf(solutions).getCost(), 40.);
+        assertEquals(2, Solutions.bestOf(solutions).getRoutes().size());
     }
 
     @Test
     public void whenReadingServices_usingJsprit_itShouldCalculateCorrectly() {
 
-		/*
+        /*
          * create vehicle-type and vehicle
-		 */
+         */
         VehicleTypeImpl.Builder typeBuilder = VehicleTypeImpl.Builder.newInstance("vehicle-type").addCapacityDimension(0, 23);
         typeBuilder.setCostPerDistance(1.0);
         VehicleTypeImpl bigType = typeBuilder.build();
@@ -101,20 +103,20 @@ public void whenReadingServices_usingJsprit_itShouldCalculateCorrectly() {
         vehicleBuilder.setType(bigType);
         VehicleImpl bigVehicle = vehicleBuilder.build();
 
-		/*
+        /*
          * start building the problem
-		 */
+         */
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.setFleetSize(VehicleRoutingProblem.FleetSize.INFINITE);
         vrpBuilder.addVehicle(bigVehicle);
 
-		/*
+        /*
          * create cost-matrix
-		 */
+         */
         VehicleRoutingTransportCostsMatrix.Builder matrixBuilder = VehicleRoutingTransportCostsMatrix.Builder.newInstance(true);
         /*
          * read demand quantities
-		 */
+         */
         readDemandQuantitiesAsServices(vrpBuilder);
         readDistances(matrixBuilder);
 
@@ -124,16 +126,16 @@ public void whenReadingServices_usingJsprit_itShouldCalculateCorrectly() {
         vra.setPrematureAlgorithmTermination(new IterationWithoutImprovementTermination(100));
         Collection<VehicleRoutingProblemSolution> solutions = vra.searchSolutions();
 
-        Assert.assertEquals(397.0, Solutions.bestOf(solutions).getCost(), 40.);
-        Assert.assertEquals(2, Solutions.bestOf(solutions).getRoutes().size());
+        assertEquals(397.0, Solutions.bestOf(solutions).getCost(), 40.);
+        assertEquals(2, Solutions.bestOf(solutions).getRoutes().size());
     }
 
     @Test
     public void whenReadingPickups_itShouldCalculateCorrectly() {
 
-		/*
-		 * create vehicle-type and vehicle
-		 */
+        /*
+         * create vehicle-type and vehicle
+         */
         VehicleTypeImpl.Builder typeBuilder = VehicleTypeImpl.Builder.newInstance("vehicle-type").addCapacityDimension(0, 23);
         typeBuilder.setCostPerDistance(1.0);
         VehicleTypeImpl bigType = typeBuilder.build();
@@ -143,20 +145,20 @@ public void whenReadingPickups_itShouldCalculateCorrectly() {
         vehicleBuilder.setType(bigType);
         VehicleImpl bigVehicle = vehicleBuilder.build();
 
-		/*
-		 * start building the problem
-		 */
+        /*
+         * start building the problem
+         */
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.setFleetSize(VehicleRoutingProblem.FleetSize.INFINITE);
         vrpBuilder.addVehicle(bigVehicle);
 
-		/*
-		 * create cost-matrix
-		 */
+        /*
+         * create cost-matrix
+         */
         VehicleRoutingTransportCostsMatrix.Builder matrixBuilder = VehicleRoutingTransportCostsMatrix.Builder.newInstance(true);
-		/*
-		 * read demand quantities
-		 */
+        /*
+         * read demand quantities
+         */
         readDemandQuantitiesAsPickups(vrpBuilder);
         readDistances(matrixBuilder);
 
@@ -166,16 +168,16 @@ public void whenReadingPickups_itShouldCalculateCorrectly() {
         vra.setPrematureAlgorithmTermination(new IterationWithoutImprovementTermination(100));
         Collection<VehicleRoutingProblemSolution> solutions = vra.searchSolutions();
 
-        Assert.assertEquals(397.0, Solutions.bestOf(solutions).getCost(), 40.);
-        Assert.assertEquals(2, Solutions.bestOf(solutions).getRoutes().size());
+        assertEquals(397.0, Solutions.bestOf(solutions).getCost(), 40.);
+        assertEquals(2, Solutions.bestOf(solutions).getRoutes().size());
     }
 
     @Test
     public void whenReadingDeliveries_itShouldCalculateCorrectly() {
 
-		/*
-		 * create vehicle-type and vehicle
-		 */
+        /*
+         * create vehicle-type and vehicle
+         */
         VehicleTypeImpl.Builder typeBuilder = VehicleTypeImpl.Builder.newInstance("vehicle-type").addCapacityDimension(0, 23);
         typeBuilder.setCostPerDistance(1.0);
         VehicleTypeImpl bigType = typeBuilder.build();
@@ -185,20 +187,20 @@ public void whenReadingDeliveries_itShouldCalculateCorrectly() {
         vehicleBuilder.setType(bigType);
         VehicleImpl bigVehicle = vehicleBuilder.build();
 
-		/*
-		 * start building the problem
-		 */
+        /*
+         * start building the problem
+         */
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.setFleetSize(VehicleRoutingProblem.FleetSize.INFINITE);
         vrpBuilder.addVehicle(bigVehicle);
 
-		/*
-		 * create cost-matrix
-		 */
+        /*
+         * create cost-matrix
+         */
         VehicleRoutingTransportCostsMatrix.Builder matrixBuilder = VehicleRoutingTransportCostsMatrix.Builder.newInstance(true);
-		/*
-		 * read demand quantities
-		 */
+        /*
+         * read demand quantities
+         */
         readDemandQuantitiesAsDeliveries(vrpBuilder);
         readDistances(matrixBuilder);
 
@@ -208,8 +210,8 @@ public void whenReadingDeliveries_itShouldCalculateCorrectly() {
         vra.setPrematureAlgorithmTermination(new IterationWithoutImprovementTermination(100));
         Collection<VehicleRoutingProblemSolution> solutions = vra.searchSolutions();
 
-        Assert.assertEquals(397.0, Solutions.bestOf(solutions).getCost(), 40.);
-        Assert.assertEquals(2, Solutions.bestOf(solutions).getRoutes().size());
+        assertEquals(397.0, Solutions.bestOf(solutions).getCost(), 40.);
+        assertEquals(2, Solutions.bestOf(solutions).getRoutes().size());
     }
 
 
@@ -223,14 +225,14 @@ private void readDemandQuantitiesAsServices(VehicleRoutingProblem.Builder vrpBui
                 continue;
             }
             String[] lineTokens = line.split(",");
-			/*
-			 * build service
-			 */
+            /*
+             * build service
+             */
             Service service = new Service.Builder(lineTokens[0]).addSizeDimension(0, Integer.parseInt(lineTokens[1]))
-                .setLocation(Location.newInstance(lineTokens[0])).build();
-			/*
-			 * and add it to problem
-			 */
+                            .setLocation(Location.newInstance(lineTokens[0])).build();
+            /*
+             * and add it to problem
+             */
             vrpBuilder.addJob(service);
         }
         close(reader);
@@ -250,14 +252,14 @@ private void readDemandQuantitiesAsPickups(VehicleRoutingProblem.Builder vrpBuil
                 continue;
             }
             String[] lineTokens = line.split(",");
-			/*
-			 * build service
-			 */
+            /*
+             * build service
+             */
             Pickup service = new Pickup.Builder(lineTokens[0]).addSizeDimension(0, Integer.parseInt(lineTokens[1]))
-                .setLocation(Location.newInstance(lineTokens[0])).build();
-			/*
-			 * and add it to problem
-			 */
+                            .setLocation(Location.newInstance(lineTokens[0])).build();
+            /*
+             * and add it to problem
+             */
             vrpBuilder.addJob(service);
         }
         close(reader);
@@ -273,14 +275,14 @@ private void readDemandQuantitiesAsDeliveries(VehicleRoutingProblem.Builder vrpB
                 continue;
             }
             String[] lineTokens = line.split(",");
-			/*
-			 * build service
-			 */
-            Delivery service = (Delivery) new Delivery.Builder(lineTokens[0]).addSizeDimension(0, Integer.parseInt(lineTokens[1]))
-                .setLocation(Location.newInstance(lineTokens[0])).build();
-			/*
-			 * and add it to problem
-			 */
+            /*
+             * build service
+             */
+            Delivery service = new Delivery.Builder(lineTokens[0]).addSizeDimension(0, Integer.parseInt(lineTokens[1]))
+                            .setLocation(Location.newInstance(lineTokens[0])).build();
+            /*
+             * and add it to problem
+             */
             vrpBuilder.addJob(service);
         }
         close(reader);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/SearchStrategyManagerTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/SearchStrategyManagerTest.java
index 92f2817a3..d7f381b2f 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/SearchStrategyManagerTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/SearchStrategyManagerTest.java
@@ -17,21 +17,25 @@
  */
 package com.graphhopper.jsprit.core.algorithm;
 
-import com.graphhopper.jsprit.core.algorithm.acceptor.SolutionAcceptor;
-import com.graphhopper.jsprit.core.algorithm.selector.SolutionSelector;
-import com.graphhopper.jsprit.core.problem.solution.SolutionCostCalculator;
-import com.graphhopper.jsprit.core.util.RandomNumberGeneration;
-import org.junit.Assert;
-import org.junit.Test;
+import static org.hamcrest.CoreMatchers.is;
+import static org.junit.Assert.assertThat;
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.fail;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.stub;
+import static org.mockito.Mockito.when;
 
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Random;
 
-import static org.hamcrest.CoreMatchers.is;
-import static org.junit.Assert.assertThat;
-import static org.junit.Assert.assertTrue;
-import static org.mockito.Mockito.*;
+import org.junit.Assert;
+import org.junit.Test;
+
+import com.graphhopper.jsprit.core.algorithm.acceptor.SolutionAcceptor;
+import com.graphhopper.jsprit.core.algorithm.selector.SolutionSelector;
+import com.graphhopper.jsprit.core.problem.solution.SolutionCostCalculator;
+import com.graphhopper.jsprit.core.util.RandomNumberGeneration;
 
 
 public class SearchStrategyManagerTest {
@@ -205,9 +209,9 @@ public void strategyDrawShouldBeReproducible() {
         RandomNumberGeneration.reset();
         SearchStrategyManager managerUnderTest = new SearchStrategyManager();
         SearchStrategy mockedStrategy1 = new SearchStrategy("strat1"
-            , mock(SolutionSelector.class), mock(SolutionAcceptor.class), mock(SolutionCostCalculator.class));
+                        , mock(SolutionSelector.class), mock(SolutionAcceptor.class), mock(SolutionCostCalculator.class));
         SearchStrategy mockedStrategy2 = new SearchStrategy("strat2"
-            , mock(SolutionSelector.class), mock(SolutionAcceptor.class), mock(SolutionCostCalculator.class));
+                        , mock(SolutionSelector.class), mock(SolutionAcceptor.class), mock(SolutionCostCalculator.class));
 
         managerUnderTest.addStrategy(mockedStrategy1, 0.2);
         managerUnderTest.addStrategy(mockedStrategy2, 0.8);
@@ -224,7 +228,7 @@ public void strategyDrawShouldBeReproducible() {
 
         for (int i = 0; i < 1000; i++) {
             if (!firstRecord.get(i).equals(secondRecord.get(i))) {
-                Assert.assertFalse(true);
+                fail();
             }
         }
         Assert.assertTrue(true);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/SearchStrategyTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/SearchStrategyTest.java
index 0e6619426..a69f95d01 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/SearchStrategyTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/SearchStrategyTest.java
@@ -17,21 +17,22 @@
  */
 package com.graphhopper.jsprit.core.algorithm;
 
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Random;
+
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.acceptor.SolutionAcceptor;
 import com.graphhopper.jsprit.core.algorithm.listener.SearchStrategyModuleListener;
 import com.graphhopper.jsprit.core.algorithm.selector.SolutionSelector;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.solution.SolutionCostCalculator;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
-import org.junit.Test;
-
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Random;
-
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
 
 
 public class SearchStrategyTest {
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/SolomonSkills_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/SolomonSkills_IT.java
index 7851f8164..cdadb01d4 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/SolomonSkills_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/SolomonSkills_IT.java
@@ -18,6 +18,14 @@
 
 package com.graphhopper.jsprit.core.algorithm;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
+import java.util.Collection;
+
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.problem.Skills;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
@@ -25,17 +33,13 @@
 import com.graphhopper.jsprit.core.problem.job.Service;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.ServiceActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.util.SolomonReader;
 import com.graphhopper.jsprit.core.util.Solutions;
 import com.graphhopper.jsprit.core.util.TestUtils;
-import org.junit.Test;
-
-import java.util.Collection;
-
-import static org.junit.Assert.*;
 
 /**
  * to test skills with penalty vehicles
@@ -55,22 +59,29 @@ public void itShouldMakeCorrectAssignmentAccordingToSkills() {
         VehicleRoutingProblem.Builder skillProblemBuilder = VehicleRoutingProblem.Builder.newInstance();
         for (int i = 0; i < 6; i++) {
             VehicleImpl skill1Vehicle = VehicleImpl.Builder.newInstance("skill1_vehicle_" + i).addSkill("skill1")
-                .setStartLocation(TestUtils.loc(solomonVehicle.getStartLocation().getId(), solomonVehicle.getStartLocation().getCoordinate()))
-                .setEarliestStart(solomonVehicle.getEarliestDeparture())
-                .setType(newType).build();
+                            .setStartLocation(TestUtils.loc(solomonVehicle.getStartLocation().getId(), solomonVehicle.getStartLocation().getCoordinate()))
+                            .setEarliestStart(solomonVehicle.getEarliestDeparture())
+                            .setType(newType).build();
             VehicleImpl skill2Vehicle = VehicleImpl.Builder.newInstance("skill2_vehicle_" + i).addSkill("skill2")
-                .setStartLocation(TestUtils.loc(solomonVehicle.getStartLocation().getId(), solomonVehicle.getStartLocation().getCoordinate()))
-                .setEarliestStart(solomonVehicle.getEarliestDeparture())
-                .setType(newType).build();
+                            .setStartLocation(TestUtils.loc(solomonVehicle.getStartLocation().getId(), solomonVehicle.getStartLocation().getCoordinate()))
+                            .setEarliestStart(solomonVehicle.getEarliestDeparture())
+                            .setType(newType).build();
             skillProblemBuilder.addVehicle(skill1Vehicle).addVehicle(skill2Vehicle);
         }
         for (Job job : vrp.getJobs().values()) {
             Service service = (Service) job;
-            Service.Builder skillServiceBuilder = new Service.Builder(service.getId()).setServiceTime(service.getServiceDuration())
-                .setLocation(TestUtils.loc(service.getLocation().getId(), service.getLocation().getCoordinate())).setTimeWindow(service.getTimeWindow())
-                .addSizeDimension(0, service.getSize().get(0));
-            if (service.getLocation().getCoordinate().getY() < 50) skillServiceBuilder.addRequiredSkill("skill2");
-            else skillServiceBuilder.addRequiredSkill("skill1");
+            ServiceActivity activity = service.getActivity();
+            Service.Builder skillServiceBuilder = new Service.Builder(service.getId())
+                            .setServiceTime(activity.getOperationTime())
+                            .setLocation(TestUtils.loc(activity.getLocation().getId(),
+                                            activity.getLocation().getCoordinate()))
+                            .addTimeWindows(activity.getTimeWindows())
+                            .addSizeDimension(0, activity.getLoadChange().get(0));
+            if (activity.getLocation().getCoordinate().getY() < 50) {
+                skillServiceBuilder.addRequiredSkill("skill2");
+            } else {
+                skillServiceBuilder.addRequiredSkill("skill1");
+            }
             skillProblemBuilder.addJob(skillServiceBuilder.build());
         }
         skillProblemBuilder.setFleetSize(VehicleRoutingProblem.FleetSize.FINITE);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/Solomon_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/Solomon_IT.java
index dec53cb75..0005033d5 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/Solomon_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/Solomon_IT.java
@@ -18,15 +18,17 @@
 
 package com.graphhopper.jsprit.core.algorithm;
 
+import static org.junit.Assert.assertEquals;
+
+import java.util.Collection;
+
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.util.SolomonReader;
 import com.graphhopper.jsprit.core.util.Solutions;
-import org.junit.Assert;
-import org.junit.Test;
-
-import java.util.Collection;
 
 
 /**
@@ -43,7 +45,7 @@ public void itShouldFindTheBestKnownSolution() {
         VehicleRoutingAlgorithm vra = Jsprit.Builder.newInstance(vrp).setProperty(Jsprit.Parameter.FAST_REGRET, "true").buildAlgorithm();
         vra.setMaxIterations(2000);
         Collection<VehicleRoutingProblemSolution> solutions = vra.searchSolutions();
-        Assert.assertEquals(828.94, Solutions.bestOf(solutions).getCost(), 0.01);
+        assertEquals(828.94, Solutions.bestOf(solutions).getCost(), 0.01);
     }
 
 }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/UnassignedJobListTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/UnassignedJobListTest.java
index 8cdef53ac..aa21d5b32 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/UnassignedJobListTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/UnassignedJobListTest.java
@@ -18,6 +18,12 @@
 
 package com.graphhopper.jsprit.core.algorithm;
 
+import static org.junit.Assert.assertTrue;
+
+import java.util.Collection;
+
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.box.GreedySchrimpfFactory;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
@@ -26,11 +32,6 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.util.Solutions;
-import org.junit.Test;
-
-import java.util.Collection;
-
-import static org.junit.Assert.assertTrue;
 
 public class UnassignedJobListTest {
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/VariableDepartureAndWaitingTime_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/VariableDepartureAndWaitingTime_IT.java
index 53cfcf385..b8c860f81 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/VariableDepartureAndWaitingTime_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/VariableDepartureAndWaitingTime_IT.java
@@ -19,6 +19,11 @@
 package com.graphhopper.jsprit.core.algorithm;
 
 
+import static org.junit.Assert.assertEquals;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.analysis.SolutionAnalyser;
@@ -37,11 +42,6 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.util.CostFactory;
 import com.graphhopper.jsprit.core.util.Solutions;
-import junit.framework.Assert;
-import org.junit.Before;
-import org.junit.Test;
-
-import static org.junit.Assert.assertEquals;
 
 /**
  * Created by schroeder on 22/07/15.
@@ -78,21 +78,21 @@ public VehicleRoutingAlgorithm createAlgorithm(final VehicleRoutingProblem vrp)
                 ConstraintManager constraintManager = new ConstraintManager(vrp, stateManager);
 
                 return Jsprit.Builder.newInstance(vrp)
-                    .addCoreStateAndConstraintStuff(true)
-                    .setStateAndConstraintManager(stateManager, constraintManager)
-                    .setObjectiveFunction(new SolutionCostCalculator() {
-                        @Override
-                        public double getCosts(VehicleRoutingProblemSolution solution) {
-                            SolutionAnalyser sa = new SolutionAnalyser(vrp, solution, new TransportDistance() {
-                                @Override
-                                public double getDistance(Location from, Location to, double departureTime, Vehicle vehicle) {
-                                    return vrp.getTransportCosts().getTransportCost(from, to, 0., null, null);
-                                }
-                            });
-                            return sa.getWaitingTime() + sa.getDistance();
-                        }
-                    })
-                    .buildAlgorithm();
+                                .addCoreStateAndConstraintStuff(true)
+                                .setStateAndConstraintManager(stateManager, constraintManager)
+                                .setObjectiveFunction(new SolutionCostCalculator() {
+                                    @Override
+                                    public double getCosts(VehicleRoutingProblemSolution solution) {
+                                        SolutionAnalyser sa = new SolutionAnalyser(vrp, solution, new TransportDistance() {
+                                            @Override
+                                            public double getDistance(Location from, Location to, double departureTime, Vehicle vehicle) {
+                                                return vrp.getTransportCosts().getTransportCost(from, to, 0., null, null);
+                                            }
+                                        });
+                                        return sa.getWaitingTime() + sa.getDistance();
+                                    }
+                                })
+                                .buildAlgorithm();
             }
         };
     }
@@ -103,11 +103,11 @@ public void plainSetupShouldWork() {
         Service s1 = new Service.Builder("s1").setLocation(Location.newInstance(10, 0)).build();
         Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(20, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance()
-            .addJob(s1).addJob(s2).addVehicle(v)
-            .setFleetSize(VehicleRoutingProblem.FleetSize.FINITE)
-            .setRoutingCost(CostFactory.createManhattanCosts())
-            .setActivityCosts(activityCosts)
-            .build();
+                        .addJob(s1).addJob(s2).addVehicle(v)
+                        .setFleetSize(VehicleRoutingProblem.FleetSize.FINITE)
+                        .setRoutingCost(CostFactory.createManhattanCosts())
+                        .setActivityCosts(activityCosts)
+                        .build();
         VehicleRoutingAlgorithm vra = algorithmFactory.createAlgorithm(vrp);
         VehicleRoutingProblemSolution solution = Solutions.bestOf(vra.searchSolutions());
         assertEquals(40., solution.getCost(), 0.01d);
@@ -119,14 +119,14 @@ public void withTimeWindowsShouldWork() {
         Service s1 = new Service.Builder("s1").setTimeWindow(TimeWindow.newInstance(1010, 1100)).setLocation(Location.newInstance(10, 0)).build();
         Service s2 = new Service.Builder("s2").setTimeWindow(TimeWindow.newInstance(1020, 1100)).setLocation(Location.newInstance(20, 0)).build();
         final VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance()
-            .addJob(s1).addJob(s2).addVehicle(v)
-            .setFleetSize(VehicleRoutingProblem.FleetSize.FINITE)
-            .setRoutingCost(CostFactory.createManhattanCosts())
-            .setActivityCosts(activityCosts)
-            .build();
+                        .addJob(s1).addJob(s2).addVehicle(v)
+                        .setFleetSize(VehicleRoutingProblem.FleetSize.FINITE)
+                        .setRoutingCost(CostFactory.createManhattanCosts())
+                        .setActivityCosts(activityCosts)
+                        .build();
         VehicleRoutingAlgorithm vra = algorithmFactory.createAlgorithm(vrp);
         VehicleRoutingProblemSolution solution = Solutions.bestOf(vra.searchSolutions());
-        Assert.assertEquals(40. + 1000., solution.getCost());
+        assertEquals(40. + 1000., solution.getCost(), 0.01d);
     }
 
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/VehicleRoutingAlgorithmTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/VehicleRoutingAlgorithmTest.java
index 1deed4ccb..4ed1b324a 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/VehicleRoutingAlgorithmTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/VehicleRoutingAlgorithmTest.java
@@ -17,18 +17,19 @@
  */
 package com.graphhopper.jsprit.core.algorithm;
 
-import com.graphhopper.jsprit.core.algorithm.listener.IterationStartsListener;
-import com.graphhopper.jsprit.core.algorithm.termination.PrematureAlgorithmTermination;
-import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
-import org.junit.Test;
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
 
 import java.util.Arrays;
 import java.util.Collection;
 
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
+import org.junit.Test;
+
+import com.graphhopper.jsprit.core.algorithm.listener.IterationStartsListener;
+import com.graphhopper.jsprit.core.algorithm.termination.PrematureAlgorithmTermination;
+import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
+import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 
 public class VehicleRoutingAlgorithmTest {
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/acceptor/GreedyAcceptanceTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/acceptor/GreedyAcceptanceTest.java
index c744dfdca..90bc7e423 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/acceptor/GreedyAcceptanceTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/acceptor/GreedyAcceptanceTest.java
@@ -17,18 +17,19 @@
  */
 package com.graphhopper.jsprit.core.algorithm.acceptor;
 
-import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
-import org.junit.Test;
-
-import java.util.ArrayList;
-import java.util.List;
-
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertThat;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
+import java.util.ArrayList;
+import java.util.List;
+
+import org.junit.Test;
+
+import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
+
 
 public class GreedyAcceptanceTest {
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/acceptor/SchrimpfAcceptanceTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/acceptor/SchrimpfAcceptanceTest.java
index 7ff3342be..00972a719 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/acceptor/SchrimpfAcceptanceTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/acceptor/SchrimpfAcceptanceTest.java
@@ -17,19 +17,20 @@
  */
 package com.graphhopper.jsprit.core.algorithm.acceptor;
 
-import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
-import org.junit.Before;
-import org.junit.Test;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
 
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
 
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
+import org.junit.Before;
+import org.junit.Test;
+
+import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
+import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 
 public class SchrimpfAcceptanceTest {
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/box/JspritTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/box/JspritTest.java
index 613f6bd95..8ae4d1e4f 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/box/JspritTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/box/JspritTest.java
@@ -18,6 +18,18 @@
 
 package com.graphhopper.jsprit.core.algorithm.box;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.fail;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.SearchStrategy;
 import com.graphhopper.jsprit.core.algorithm.VehicleRoutingAlgorithm;
 import com.graphhopper.jsprit.core.algorithm.listener.StrategySelectedListener;
@@ -33,10 +45,6 @@
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.util.RandomNumberGeneration;
-import junit.framework.Assert;
-import org.junit.Test;
-
-import java.util.*;
 
 /**
  * Created by schroeder on 06/03/15.
@@ -60,16 +68,17 @@ public void informSelectedStrategy(SearchStrategy.DiscoveredSolution discoveredS
             }
 
             private void count(String strategyId) {
-                if (!counts.containsKey(strategyId)) counts.put(strategyId, 1);
+                if (!counts.containsKey(strategyId)) {
+                    counts.put(strategyId, 1);
+                }
                 counts.put(strategyId, counts.get(strategyId) + 1);
             }
 
         });
         try {
             vra.searchSolutions();
-            Assert.assertTrue(true);
         } catch (Exception e) {
-            Assert.assertTrue(false);
+            fail();
         }
 
     }
@@ -81,7 +90,7 @@ public void whenActivatingStrat_itShouldBeReflected() {
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addVehicle(v).addJob(s2).addJob(s).build();
         VehicleRoutingAlgorithm vra = Jsprit.Builder.newInstance(vrp)
-            .setProperty(Jsprit.Strategy.RADIAL_BEST, "100.").buildAlgorithm();
+                        .setProperty(Jsprit.Strategy.RADIAL_BEST, "100.").buildAlgorithm();
         vra.setMaxIterations(100);
         final Map<String, Integer> counts = new HashMap<String, Integer>();
         vra.addListener(new StrategySelectedListener() {
@@ -92,14 +101,16 @@ public void informSelectedStrategy(SearchStrategy.DiscoveredSolution discoveredS
             }
 
             private void count(String strategyId) {
-                if (!counts.containsKey(strategyId)) counts.put(strategyId, 1);
+                if (!counts.containsKey(strategyId)) {
+                    counts.put(strategyId, 1);
+                }
                 Integer integer = counts.get(strategyId);
                 counts.put(strategyId, integer + 1);
             }
 
         });
         vra.searchSolutions();
-        Assert.assertTrue(counts.containsKey(Jsprit.Strategy.RADIAL_BEST.toString()));
+        assertTrue(counts.containsKey(Jsprit.Strategy.RADIAL_BEST.toString()));
     }
 
     @Test
@@ -121,13 +132,15 @@ public void informSelectedStrategy(SearchStrategy.DiscoveredSolution discoveredS
             }
 
             private void count(String strategyId) {
-                if (!counts.containsKey(strategyId)) counts.put(strategyId, 1);
+                if (!counts.containsKey(strategyId)) {
+                    counts.put(strategyId, 1);
+                }
                 counts.put(strategyId, counts.get(strategyId) + 1);
             }
 
         });
         vra.searchSolutions();
-        Assert.assertTrue(!counts.containsKey(Jsprit.Strategy.RADIAL_BEST));
+        assertTrue(!counts.containsKey(Jsprit.Strategy.RADIAL_BEST));
     }
 
     @Test
@@ -150,13 +163,15 @@ public void informSelectedStrategy(SearchStrategy.DiscoveredSolution discoveredS
             }
 
             private void count(String strategyId) {
-                if (!counts.containsKey(strategyId)) counts.put(strategyId, 1);
+                if (!counts.containsKey(strategyId)) {
+                    counts.put(strategyId, 1);
+                }
                 counts.put(strategyId, counts.get(strategyId) + 1);
             }
 
         });
         vra.searchSolutions();
-        Assert.assertTrue(!counts.containsKey(Jsprit.Strategy.RADIAL_BEST));
+        assertTrue(!counts.containsKey(Jsprit.Strategy.RADIAL_BEST));
     }
 
 
@@ -198,7 +213,7 @@ public void informSelectedStrategy(SearchStrategy.DiscoveredSolution discoveredS
 
         for (int i = 0; i < 100; i++) {
             if (!firstRecord.get(i).equals(secondRecord.get(i))) {
-                org.junit.Assert.assertFalse(true);
+                fail();
             }
         }
         org.junit.Assert.assertTrue(true);
@@ -243,7 +258,7 @@ public void informSelectedStrategy(SearchStrategy.DiscoveredSolution discoveredS
 
         for (int i = 0; i < 100; i++) {
             if (!firstRecord.get(i).equals(secondRecord.get(i))) {
-                org.junit.Assert.assertFalse(true);
+                fail();
             }
         }
         org.junit.Assert.assertTrue(true);
@@ -260,9 +275,9 @@ public void ruinedJobsShouldBeReproducible() {
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(s4).addJob(s3).addVehicle(v).addJob(s2).addJob(s).build();
         VehicleRoutingAlgorithm vra = Jsprit.Builder.newInstance(vrp)
-            .setProperty(Jsprit.Strategy.WORST_REGRET, "0.")
-            .setProperty(Jsprit.Strategy.WORST_BEST, "0.")
-            .setProperty(Jsprit.Parameter.THREADS, "2").buildAlgorithm();
+                        .setProperty(Jsprit.Strategy.WORST_REGRET, "0.")
+                        .setProperty(Jsprit.Strategy.WORST_BEST, "0.")
+                        .setProperty(Jsprit.Parameter.THREADS, "2").buildAlgorithm();
         vra.setMaxIterations(100);
         final List<String> firstRecord = new ArrayList<String>();
         vra.addListener(new RuinListener() {
@@ -284,9 +299,9 @@ public void removed(Job job, VehicleRoute fromRoute) {
         vra.searchSolutions();
 
         VehicleRoutingAlgorithm second = Jsprit.Builder.newInstance(vrp).setProperty(Jsprit.Parameter.THREADS, "4")
-            .setProperty(Jsprit.Strategy.WORST_REGRET, "0.")
-            .setProperty(Jsprit.Strategy.WORST_BEST, "0.")
-            .buildAlgorithm();
+                        .setProperty(Jsprit.Strategy.WORST_REGRET, "0.")
+                        .setProperty(Jsprit.Strategy.WORST_BEST, "0.")
+                        .buildAlgorithm();
         second.setMaxIterations(100);
         final List<String> secondRecord = new ArrayList<String>();
         second.addListener(new RuinListener() {
@@ -307,13 +322,12 @@ public void removed(Job job, VehicleRoute fromRoute) {
         });
         second.searchSolutions();
 
-        Assert.assertEquals(secondRecord.size(), firstRecord.size());
+        assertEquals(secondRecord.size(), firstRecord.size());
         for (int i = 0; i < firstRecord.size(); i++) {
             if (!firstRecord.get(i).equals(secondRecord.get(i))) {
-                Assert.assertFalse(true);
+                fail();
             }
         }
-        Assert.assertTrue(true);
     }
 
     @Test
@@ -367,13 +381,12 @@ public void removed(Job job, VehicleRoute fromRoute) {
         });
         second.searchSolutions();
 
-        Assert.assertEquals(secondRecord.size(), firstRecord.size());
+        assertEquals(secondRecord.size(), firstRecord.size());
         for (int i = 0; i < firstRecord.size(); i++) {
             if (!firstRecord.get(i).equals(secondRecord.get(i))) {
-                Assert.assertFalse(true);
+                fail();
             }
         }
-        Assert.assertTrue(true);
     }
 
     @Test
@@ -408,13 +421,12 @@ public void informJobInserted(Job job2insert, VehicleRoute inRoute, double addit
         });
         second.searchSolutions();
 
-        Assert.assertEquals(secondRecord.size(), firstRecord.size());
+        assertEquals(secondRecord.size(), firstRecord.size());
         for (int i = 0; i < firstRecord.size(); i++) {
             if (!firstRecord.get(i).equals(secondRecord.get(i))) {
-                Assert.assertFalse(true);
+                fail();
             }
         }
-        Assert.assertTrue(true);
     }
 
     @Test
@@ -428,9 +440,9 @@ public void insertionShouldBeReproducibleV2() {
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().setFleetSize(VehicleRoutingProblem.FleetSize.FINITE).addJob(s4).addJob(s3).addVehicle(v).addJob(s2).addJob(s).build();
 
         VehicleRoutingAlgorithm vra = Jsprit.Builder.newInstance(vrp)
-            .setProperty(Jsprit.Strategy.WORST_REGRET, "0.")
-            .setProperty(Jsprit.Strategy.WORST_BEST, "0.")
-            .setProperty(Jsprit.Parameter.THREADS, "4").buildAlgorithm();
+                        .setProperty(Jsprit.Strategy.WORST_REGRET, "0.")
+                        .setProperty(Jsprit.Strategy.WORST_BEST, "0.")
+                        .setProperty(Jsprit.Parameter.THREADS, "4").buildAlgorithm();
         vra.setMaxIterations(100);
         final List<String> firstRecord = new ArrayList<String>();
         final List<Double> firstRecordCosts = new ArrayList<Double>();
@@ -445,9 +457,9 @@ public void informBeforeJobInsertion(Job job, InsertionData data, VehicleRoute r
         vra.searchSolutions();
 
         VehicleRoutingAlgorithm second = Jsprit.Builder.newInstance(vrp)
-            .setProperty(Jsprit.Strategy.WORST_REGRET, "0.")
-            .setProperty(Jsprit.Strategy.WORST_BEST, "0.")
-            .setProperty(Jsprit.Parameter.THREADS, "5").buildAlgorithm();
+                        .setProperty(Jsprit.Strategy.WORST_REGRET, "0.")
+                        .setProperty(Jsprit.Strategy.WORST_BEST, "0.")
+                        .setProperty(Jsprit.Parameter.THREADS, "5").buildAlgorithm();
         second.setMaxIterations(100);
         final List<String> secondRecord = new ArrayList<String>();
         final List<Double> secondRecordCosts = new ArrayList<Double>();
@@ -460,21 +472,20 @@ public void informBeforeJobInsertion(Job job, InsertionData data, VehicleRoute r
         });
         second.searchSolutions();
 
-//        for(int i=0;i<firstRecord.size();i++){
-//            System.out.print(firstRecord.get(i) + " (" + ((int)(firstRecordCosts.get(i)*100.))/100. + "), ");
-//        }
-//        System.out.println();
-//        for(int i=0;i<secondRecord.size();i++){
-//            System.out.print(secondRecord.get(i) + " (" + ((int)(firstRecordCosts.get(i)*100.))/100. + "), ");
-//        }
+        //        for(int i=0;i<firstRecord.size();i++){
+        //            System.out.print(firstRecord.get(i) + " (" + ((int)(firstRecordCosts.get(i)*100.))/100. + "), ");
+        //        }
+        //        System.out.println();
+        //        for(int i=0;i<secondRecord.size();i++){
+        //            System.out.print(secondRecord.get(i) + " (" + ((int)(firstRecordCosts.get(i)*100.))/100. + "), ");
+        //        }
 
-        Assert.assertEquals(secondRecord.size(), firstRecord.size());
+        assertEquals(secondRecord.size(), firstRecord.size());
         for (int i = 0; i < firstRecord.size(); i++) {
             if (!firstRecord.get(i).equals(secondRecord.get(i))) {
-                Assert.assertFalse(true);
+                fail();
             }
         }
-        Assert.assertTrue(true);
     }
 
     @Test
@@ -482,7 +493,7 @@ public void compare() {
         String s1 = "s2234";
         String s2 = "s1";
         int c = s1.compareTo(s2);
-        Assert.assertEquals(1, c);
+        assertEquals(1, c);
     }
 
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/CalcVehicleTypeDependentServiceInsertionTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/CalcVehicleTypeDependentServiceInsertionTest.java
index fdd5fca7e..b54364f48 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/CalcVehicleTypeDependentServiceInsertionTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/CalcVehicleTypeDependentServiceInsertionTest.java
@@ -17,24 +17,28 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
-import com.graphhopper.jsprit.core.problem.SizeDimension;
-import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.job.Service;
-import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
-import com.graphhopper.jsprit.core.problem.vehicle.*;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.Arrays;
-import java.util.Collections;
-
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertThat;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
+import java.util.Arrays;
+import java.util.Collections;
+
+import org.junit.Before;
+import org.junit.Test;
+
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
+import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
+import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleFleetManager;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
+
 
 public class CalcVehicleTypeDependentServiceInsertionTest {
 
@@ -64,9 +68,6 @@ public void doBefore() {
 
         when(veh2.getType()).thenReturn(type);
 
-        when(service.getSize()).thenReturn(SizeDimension.Builder.newInstance().build());
-        when(service.getTimeWindow()).thenReturn(TimeWindow.newInstance(0.0, Double.MAX_VALUE));
-
         when(vehicleRoute.getDriver()).thenReturn(null);
         when(vehicleRoute.getVehicle()).thenReturn(VehicleImpl.createNoVehicle());
     }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ConfigureFixCostCalculatorTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ConfigureFixCostCalculatorTest.java
index 061313c69..b1c7bfab4 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ConfigureFixCostCalculatorTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ConfigureFixCostCalculatorTest.java
@@ -18,20 +18,21 @@
 
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Mockito.mock;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.job.Service;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-import org.junit.Assert;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import static org.mockito.Mockito.mock;
 
 /**
  * Created by schroeder on 15/08/16.
@@ -63,7 +64,7 @@ public void shouldCalculateCorrectly() {
         JobInsertionConsideringFixCostsCalculator jicc = new JobInsertionConsideringFixCostsCalculator(mock(JobInsertionCostsCalculator.class), mock(StateManager.class));
         ConfigureFixCostCalculator c = new ConfigureFixCostCalculator(vrp, jicc);
         c.informInsertionStarts(new ArrayList<VehicleRoute>(), unassigned);
-        Assert.assertEquals(0.75, jicc.getSolutionCompletenessRatio(), 0.001);
+        assertEquals(0.75, jicc.getSolutionCompletenessRatio(), 0.001);
     }
 
     @Test
@@ -79,7 +80,7 @@ public void shouldBeMinRatio() {
         JobInsertionConsideringFixCostsCalculator jicc = new JobInsertionConsideringFixCostsCalculator(mock(JobInsertionCostsCalculator.class), mock(StateManager.class));
         ConfigureFixCostCalculator c = new ConfigureFixCostCalculator(vrp, jicc);
         c.informInsertionStarts(new ArrayList<VehicleRoute>(), unassigned);
-        Assert.assertEquals(0.5, jicc.getSolutionCompletenessRatio(), 0.001);
+        assertEquals(0.5, jicc.getSolutionCompletenessRatio(), 0.001);
     }
 
     @Test
@@ -88,6 +89,6 @@ public void shouldBeOne() {
         JobInsertionConsideringFixCostsCalculator jicc = new JobInsertionConsideringFixCostsCalculator(mock(JobInsertionCostsCalculator.class), mock(StateManager.class));
         ConfigureFixCostCalculator c = new ConfigureFixCostCalculator(vrp, jicc);
         c.informInsertionStarts(new ArrayList<VehicleRoute>(), unassigned);
-        Assert.assertEquals(1.0, jicc.getSolutionCompletenessRatio(), 0.001);
+        assertEquals(1.0, jicc.getSolutionCompletenessRatio(), 0.001);
     }
 }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionAndLoadConstraintsTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionAndLoadConstraintsTest.java
index 05c655807..e671ff717 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionAndLoadConstraintsTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionAndLoadConstraintsTest.java
@@ -17,6 +17,15 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Mockito.mock;
+
+import java.util.Arrays;
+import java.util.List;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
@@ -38,14 +47,6 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.CostFactory;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.Arrays;
-import java.util.List;
-
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.mock;
 
 
 public class GeneralJobInsertionAndLoadConstraintsTest {
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionAndTimeWindowConstraintsTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionAndTimeWindowConstraintsTest.java
index bfc79a700..409a6b4b8 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionAndTimeWindowConstraintsTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionAndTimeWindowConstraintsTest.java
@@ -17,6 +17,14 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
+import static org.mockito.Mockito.mock;
+
+import java.util.Arrays;
+
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.algorithm.state.UpdateVehicleDependentPracticalTimeWindows;
 import com.graphhopper.jsprit.core.problem.Location;
@@ -39,13 +47,6 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.CostFactory;
-import org.junit.Assert;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.Arrays;
-
-import static org.mockito.Mockito.mock;
 
 
 public class GeneralJobInsertionAndTimeWindowConstraintsTest {
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionCalculatorTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionCalculatorTest.java
index 672908768..ae0f81d64 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionCalculatorTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionCalculatorTest.java
@@ -19,14 +19,15 @@
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
 
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-import org.junit.Assert;
-import org.junit.Before;
-import org.junit.Test;
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Mockito.mock;
 
 import java.util.Arrays;
 
-import static org.mockito.Mockito.mock;
+import org.junit.Before;
+import org.junit.Test;
+
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 
 /**
  * Created by schroeder on 19/11/16.
@@ -52,42 +53,42 @@ public void doBefore() {
     @Test
     public void testSuccessor() {
         GeneralJobInsertionCalculator.Route route = new GeneralJobInsertionCalculator.Route(Arrays.asList(start, act, end), Arrays.asList(toInsert));
-        Assert.assertEquals(start, route.getFirst());
-        Assert.assertEquals(act, route.getSuccessor(route.getFirst()));
-        Assert.assertEquals(end, route.getSuccessor(act));
-        Assert.assertEquals(null, route.getSuccessor(toInsert));
+        assertEquals(start, route.getFirst());
+        assertEquals(act, route.getSuccessor(route.getFirst()));
+        assertEquals(end, route.getSuccessor(act));
+        assertEquals(null, route.getSuccessor(toInsert));
     }
 
     @Test
     public void testPredecessor() {
         GeneralJobInsertionCalculator.Route route = new GeneralJobInsertionCalculator.Route(Arrays.asList(start, act, end), Arrays.asList(toInsert));
-        Assert.assertEquals(null, route.getPredecessor(route.getFirst()));
-        Assert.assertEquals(route.getFirst(), route.getPredecessor(act));
-        Assert.assertEquals(act, route.getPredecessor(route.getSuccessor(act)));
-        Assert.assertEquals(null, route.getSuccessor(toInsert));
+        assertEquals(null, route.getPredecessor(route.getFirst()));
+        assertEquals(route.getFirst(), route.getPredecessor(act));
+        assertEquals(act, route.getPredecessor(route.getSuccessor(act)));
+        assertEquals(null, route.getSuccessor(toInsert));
     }
 
     @Test
     public void insertNew() {
         GeneralJobInsertionCalculator.Route route = new GeneralJobInsertionCalculator.Route(Arrays.asList(start, act, end), Arrays.asList(toInsert));
-        Assert.assertEquals(route.getFirst(), route.getPredecessor(act));
+        assertEquals(route.getFirst(), route.getPredecessor(act));
         route.addAfter(toInsert, route.getFirst());
-        Assert.assertEquals(toInsert, route.getPredecessor(act));
-        Assert.assertEquals(route.getFirst(), route.getPredecessor(toInsert));
-        Assert.assertEquals(start, route.getFirst());
-        Assert.assertEquals(toInsert, route.getSuccessor(route.getFirst()));
-        Assert.assertEquals(act, route.getSuccessor(toInsert));
+        assertEquals(toInsert, route.getPredecessor(act));
+        assertEquals(route.getFirst(), route.getPredecessor(toInsert));
+        assertEquals(start, route.getFirst());
+        assertEquals(toInsert, route.getSuccessor(route.getFirst()));
+        assertEquals(act, route.getSuccessor(toInsert));
     }
 
     @Test
     public void removeAct() {
         GeneralJobInsertionCalculator.Route route = new GeneralJobInsertionCalculator.Route(Arrays.asList(start, act, end), Arrays.asList(toInsert));
-        Assert.assertEquals(route.getFirst(), route.getPredecessor(act));
+        assertEquals(route.getFirst(), route.getPredecessor(act));
         route.remove(act);
-        Assert.assertEquals(null, route.getPredecessor(act));
-        Assert.assertEquals(null, route.getSuccessor(act));
-        Assert.assertEquals(start, route.getFirst());
-        Assert.assertEquals(end, route.getSuccessor(start));
+        assertEquals(null, route.getPredecessor(act));
+        assertEquals(null, route.getSuccessor(act));
+        assertEquals(start, route.getFirst());
+        assertEquals(end, route.getSuccessor(start));
 
     }
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionWithServicesAndLoadConstraintsTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionWithServicesAndLoadConstraintsTest.java
index 4c010764d..082d1311a 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionWithServicesAndLoadConstraintsTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionWithServicesAndLoadConstraintsTest.java
@@ -17,6 +17,15 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Mockito.mock;
+
+import java.util.Arrays;
+import java.util.List;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
@@ -37,14 +46,6 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.CostFactory;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.Arrays;
-import java.util.List;
-
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.mock;
 
 
 public class GeneralJobInsertionWithServicesAndLoadConstraintsTest {
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionWithServicesTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionWithServicesTest.java
index f09d9db75..b5cd812df 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionWithServicesTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionWithServicesTest.java
@@ -17,6 +17,18 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Mockito.mock;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.Map;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.distance.EuclideanDistanceCalculator;
 import com.graphhopper.jsprit.core.distance.ManhattanDistanceCalculator;
@@ -39,13 +51,6 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.Coordinate;
 import com.graphhopper.jsprit.core.util.Locations;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.*;
-
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.mock;
 
 
 public class GeneralJobInsertionWithServicesTest {
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionWithShipmentsTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionWithShipmentsTest.java
index 0ff8d5662..0d2ccdced 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionWithShipmentsTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionWithShipmentsTest.java
@@ -17,6 +17,16 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+import static org.mockito.Mockito.mock;
+
+import java.util.Arrays;
+import java.util.List;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
@@ -40,15 +50,6 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.CostFactory;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.Arrays;
-import java.util.List;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-import static org.mockito.Mockito.mock;
 
 
 public class GeneralJobInsertionWithShipmentsTest {
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/JobInsertionConsideringFixCostsCalculatorTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/JobInsertionConsideringFixCostsCalculatorTest.java
index 6ab28480f..9dd55fe7e 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/JobInsertionConsideringFixCostsCalculatorTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/JobInsertionConsideringFixCostsCalculatorTest.java
@@ -17,6 +17,13 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.state.InternalStates;
 import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.job.Job;
@@ -25,12 +32,6 @@
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
-import org.junit.Before;
-import org.junit.Test;
-
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
 
 public class JobInsertionConsideringFixCostsCalculatorTest {
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionTest.java
index bd8ad47ff..d1e2c45df 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionTest.java
@@ -18,6 +18,15 @@
 
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.fail;
+
+import java.util.ArrayList;
+import java.util.Collection;
+
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.VehicleRoutingAlgorithm;
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.BeforeJobInsertionListener;
@@ -39,14 +48,14 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.ActivityVisitor;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-import com.graphhopper.jsprit.core.problem.vehicle.*;
+import com.graphhopper.jsprit.core.problem.vehicle.FiniteFleetManagerFactory;
+import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleFleetManager;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.Coordinate;
 import com.graphhopper.jsprit.core.util.Solutions;
-import junit.framework.Assert;
-import org.junit.Test;
-
-import java.util.ArrayList;
-import java.util.Collection;
 
 public class RegretInsertionTest {
 
@@ -64,7 +73,7 @@ public void noRoutesShouldBeCorrect() {
         Collection<VehicleRoute> routes = new ArrayList<VehicleRoute>();
 
         regretInsertion.insertJobs(routes, vrp.getJobs().values());
-        Assert.assertEquals(1, routes.size());
+        assertEquals(1, routes.size());
     }
 
     @Test
@@ -81,7 +90,7 @@ public void noJobsInRouteShouldBeCorrect() {
         Collection<VehicleRoute> routes = new ArrayList<VehicleRoute>();
 
         regretInsertion.insertJobs(routes, vrp.getJobs().values());
-        Assert.assertEquals(2, routes.iterator().next().getActivities().size());
+        assertEquals(2, routes.iterator().next().getActivities().size());
     }
 
     @Test
@@ -100,7 +109,7 @@ public void s1ShouldBeAddedFirst() {
         CkeckJobSequence position = new CkeckJobSequence(2, s1);
         regretInsertion.addListener(position);
         regretInsertion.insertJobs(routes, vrp.getJobs().values());
-        Assert.assertTrue(position.isCorrect());
+        assertTrue(position.isCorrect());
     }
 
     @Test
@@ -111,19 +120,19 @@ public void solutionWithFastRegretMustBeCorrect() {
         VehicleImpl v1 = VehicleImpl.Builder.newInstance("v1").setStartLocation(Location.newInstance(0, 5)).build();
         VehicleImpl v2 = VehicleImpl.Builder.newInstance("v2").setStartLocation(Location.newInstance(0, -5)).build();
         final VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(s1).addJob(s2)
-            .addVehicle(v1).addVehicle(v2).setFleetSize(VehicleRoutingProblem.FleetSize.FINITE).build();
+                        .addVehicle(v1).addVehicle(v2).setFleetSize(VehicleRoutingProblem.FleetSize.FINITE).build();
 
         StateManager stateManager = new StateManager(vrp);
         ConstraintManager constraintManager = new ConstraintManager(vrp, stateManager);
 
         VehicleRoutingAlgorithm vra = Jsprit.Builder.newInstance(vrp)
-            .addCoreStateAndConstraintStuff(true)
-            .setProperty(Jsprit.Parameter.FAST_REGRET, "true")
-            .setStateAndConstraintManager(stateManager, constraintManager).buildAlgorithm();
+                        .addCoreStateAndConstraintStuff(true)
+                        .setProperty(Jsprit.Parameter.FAST_REGRET, "true")
+                        .setStateAndConstraintManager(stateManager, constraintManager).buildAlgorithm();
 
         VehicleRoutingProblemSolution solution = Solutions.bestOf(vra.searchSolutions());
 
-        Assert.assertEquals(2, solution.getRoutes().size());
+        assertEquals(2, solution.getRoutes().size());
     }
 
     static class JobInRouteUpdater implements StateUpdater, ActivityVisitor {
@@ -134,8 +143,6 @@ public void solutionWithFastRegretMustBeCorrect() {
 
         private StateId job2AssignedId;
 
-        private VehicleRoute route;
-
         public JobInRouteUpdater(StateManager stateManager, StateId job1AssignedId, StateId job2AssignedId) {
             this.stateManager = stateManager;
             this.job1AssignedId = job1AssignedId;
@@ -144,7 +151,6 @@ public JobInRouteUpdater(StateManager stateManager, StateId job1AssignedId, Stat
 
         @Override
         public void begin(VehicleRoute route) {
-            this.route = route;
         }
 
         @Override
@@ -173,8 +179,8 @@ public void finish() {
         private StateManager stateManager;
 
         public RouteConstraint(StateId job1Assigned, StateId job2Assigned, StateManager stateManager) {
-            this.job1AssignedId = job1Assigned;
-            this.job2AssignedId = job2Assigned;
+            job1AssignedId = job1Assigned;
+            job2AssignedId = job2Assigned;
             this.stateManager = stateManager;
         }
 
@@ -182,20 +188,26 @@ public RouteConstraint(StateId job1Assigned, StateId job2Assigned, StateManager
         public boolean fulfilled(JobInsertionContext insertionContext) {
             if (insertionContext.getJob().getId().equals("s1")) {
                 Boolean job2Assigned = stateManager.getProblemState(job2AssignedId, Boolean.class);
-                if (job2Assigned == null || job2Assigned == false) return true;
-                else {
+                if (job2Assigned == null || job2Assigned == false) {
+                    return true;
+                } else {
                     for (Job j : insertionContext.getRoute().getTourActivities().getJobs()) {
-                        if (j.getId().equals("s2")) return true;
+                        if (j.getId().equals("s2")) {
+                            return true;
+                        }
                     }
                 }
                 return false;
             }
             if (insertionContext.getJob().getId().equals("s2")) {
                 Boolean job1Assigned = stateManager.getProblemState(job1AssignedId, Boolean.class);
-                if (job1Assigned == null || job1Assigned == false) return true;
-                else {
+                if (job1Assigned == null || job1Assigned == false) {
+                    return true;
+                } else {
                     for (Job j : insertionContext.getRoute().getTourActivities().getJobs()) {
-                        if (j.getId().equals("s1")) return true;
+                        if (j.getId().equals("s1")) {
+                            return true;
+                        }
                     }
                 }
                 return false;
@@ -215,7 +227,7 @@ public void solutionWithConstraintAndWithFastRegretMustBeCorrect() {
         VehicleImpl v1 = VehicleImpl.Builder.newInstance("v1").setType(type).setStartLocation(Location.newInstance(0, 10)).build();
         VehicleImpl v2 = VehicleImpl.Builder.newInstance("v2").setType(type).setStartLocation(Location.newInstance(0, -10)).build();
         final VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(s1).addJob(s2).addJob(s3).addJob(s4)
-            .addVehicle(v1).addVehicle(v2).setFleetSize(VehicleRoutingProblem.FleetSize.FINITE).build();
+                        .addVehicle(v1).addVehicle(v2).setFleetSize(VehicleRoutingProblem.FleetSize.FINITE).build();
 
         final StateManager stateManager = new StateManager(vrp);
         StateId job1Assigned = stateManager.createStateId("job1-assigned");
@@ -227,28 +239,28 @@ public void solutionWithConstraintAndWithFastRegretMustBeCorrect() {
         constraintManager.setDependencyType("s2", DependencyType.INTRA_ROUTE);
 
         VehicleRoutingAlgorithm vra = Jsprit.Builder.newInstance(vrp)
-            .addCoreStateAndConstraintStuff(true)
-            .setProperty(Jsprit.Parameter.FAST_REGRET, "true")
-            .setStateAndConstraintManager(stateManager, constraintManager)
-//            .setProperty(Jsprit.Strategy.CLUSTER_REGRET, "0.")
-//            .setProperty(Jsprit.Strategy.CLUSTER_BEST, "0.")
-//            .setProperty(Jsprit.Strategy.RADIAL_REGRET, "0.")
-//            .setProperty(Jsprit.Strategy.RADIAL_BEST, "0.")
-//            .setProperty(Jsprit.Strategy.RANDOM_REGRET, "1.")
-//            .setProperty(Jsprit.Strategy.RANDOM_BEST, "0.")
-//            .setProperty(Jsprit.Strategy.WORST_REGRET, "0.")
-//            .setProperty(Jsprit.Strategy.WORST_BEST, "0.")
-            .buildAlgorithm();
+                        .addCoreStateAndConstraintStuff(true)
+                        .setProperty(Jsprit.Parameter.FAST_REGRET, "true")
+                        .setStateAndConstraintManager(stateManager, constraintManager)
+                        //            .setProperty(Jsprit.Strategy.CLUSTER_REGRET, "0.")
+                        //            .setProperty(Jsprit.Strategy.CLUSTER_BEST, "0.")
+                        //            .setProperty(Jsprit.Strategy.RADIAL_REGRET, "0.")
+                        //            .setProperty(Jsprit.Strategy.RADIAL_BEST, "0.")
+                        //            .setProperty(Jsprit.Strategy.RANDOM_REGRET, "1.")
+                        //            .setProperty(Jsprit.Strategy.RANDOM_BEST, "0.")
+                        //            .setProperty(Jsprit.Strategy.WORST_REGRET, "0.")
+                        //            .setProperty(Jsprit.Strategy.WORST_BEST, "0.")
+                        .buildAlgorithm();
 
         VehicleRoutingProblemSolution solution = Solutions.bestOf(vra.searchSolutions());
         for (VehicleRoute route : solution.getRoutes()) {
             if (route.getTourActivities().servesJob(s1)) {
                 if (!route.getTourActivities().servesJob(s2)) {
-                    Assert.assertFalse(true);
-                } else Assert.assertTrue(true);
+                    fail();
+                }
             }
         }
-//        Assert.assertEquals(1, solution.getRoutes().size());
+        //        assertEquals(1, solution.getRoutes().size());
     }
 
     @Test
@@ -262,7 +274,7 @@ public void solutionWithConstraintAndWithFastRegretConcurrentMustBeCorrect() {
         VehicleImpl v1 = VehicleImpl.Builder.newInstance("v1").setType(type).setStartLocation(Location.newInstance(0, 10)).build();
         VehicleImpl v2 = VehicleImpl.Builder.newInstance("v2").setType(type).setStartLocation(Location.newInstance(0, -10)).build();
         final VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(s1).addJob(s2).addJob(s3).addJob(s4)
-            .addVehicle(v1).addVehicle(v2).setFleetSize(VehicleRoutingProblem.FleetSize.FINITE).build();
+                        .addVehicle(v1).addVehicle(v2).setFleetSize(VehicleRoutingProblem.FleetSize.FINITE).build();
 
         final StateManager stateManager = new StateManager(vrp);
         StateId job1Assigned = stateManager.createStateId("job1-assigned");
@@ -274,18 +286,18 @@ public void solutionWithConstraintAndWithFastRegretConcurrentMustBeCorrect() {
         constraintManager.setDependencyType("s2", DependencyType.INTRA_ROUTE);
 
         VehicleRoutingAlgorithm vra = Jsprit.Builder.newInstance(vrp)
-            .addCoreStateAndConstraintStuff(true)
-            .setProperty(Jsprit.Parameter.FAST_REGRET, "true")
-            .setProperty(Jsprit.Parameter.THREADS, "4")
-            .setStateAndConstraintManager(stateManager, constraintManager)
-            .buildAlgorithm();
+                        .addCoreStateAndConstraintStuff(true)
+                        .setProperty(Jsprit.Parameter.FAST_REGRET, "true")
+                        .setProperty(Jsprit.Parameter.THREADS, "4")
+                        .setStateAndConstraintManager(stateManager, constraintManager)
+                        .buildAlgorithm();
 
         VehicleRoutingProblemSolution solution = Solutions.bestOf(vra.searchSolutions());
         for (VehicleRoute route : solution.getRoutes()) {
             if (route.getTourActivities().servesJob(s1)) {
                 if (!route.getTourActivities().servesJob(s2)) {
-                    Assert.assertFalse(true);
-                } else Assert.assertTrue(true);
+                    fail();
+                }
             }
         }
     }
@@ -293,14 +305,14 @@ public void solutionWithConstraintAndWithFastRegretConcurrentMustBeCorrect() {
     @Test
     public void shipment1ShouldBeAddedFirst() {
         Shipment s1 = Shipment.Builder.newInstance("s1")
-            .setPickupLocation(Location.Builder.newInstance().setId("pick1").setCoordinate(Coordinate.newInstance(-1, 10)).build())
-            .setDeliveryLocation(Location.Builder.newInstance().setId("del1").setCoordinate(Coordinate.newInstance(1, 10)).build())
-            .build();
+                        .setPickupLocation(Location.Builder.newInstance().setId("pick1").setCoordinate(Coordinate.newInstance(-1, 10)).build())
+                        .setDeliveryLocation(Location.Builder.newInstance().setId("del1").setCoordinate(Coordinate.newInstance(1, 10)).build())
+                        .build();
 
         Shipment s2 = Shipment.Builder.newInstance("s2")
-            .setPickupLocation(Location.Builder.newInstance().setId("pick2").setCoordinate(Coordinate.newInstance(-1, 20)).build())
-            .setDeliveryLocation(Location.Builder.newInstance().setId("del2").setCoordinate(Coordinate.newInstance(1, 20)).build())
-            .build();
+                        .setPickupLocation(Location.Builder.newInstance().setId("pick2").setCoordinate(Coordinate.newInstance(-1, 20)).build())
+                        .setDeliveryLocation(Location.Builder.newInstance().setId("del2").setCoordinate(Coordinate.newInstance(1, 20)).build())
+                        .build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(0, 0)).build()).build();
         final VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(s1).addJob(s2).addVehicle(v).build();
@@ -313,7 +325,7 @@ public void shipment1ShouldBeAddedFirst() {
         CkeckJobSequence position = new CkeckJobSequence(2, s2);
         regretInsertion.addListener(position);
         regretInsertion.insertJobs(routes, vrp.getJobs().values());
-        Assert.assertTrue(position.isCorrect());
+        assertTrue(position.isCorrect());
     }
 
     private JobInsertionCostsCalculator getShipmentCalculator(final VehicleRoutingProblem vrp) {
@@ -369,7 +381,8 @@ public InsertionData getInsertionData(VehicleRoute currentRoute, Job newJob, Veh
                 Vehicle vehicle = vrp.getVehicles().iterator().next();
                 InsertionData iData;
                 if (currentRoute.isEmpty()) {
-                    double mc = getCost(service.getLocation(), vehicle.getStartLocation());
+                    double mc = getCost(service.getActivity().getLocation(),
+                                    vehicle.getStartLocation());
                     iData = new InsertionData(2 * mc, -1, 0, vehicle, newDriver);
                     iData.getEvents().add(new InsertActivity(currentRoute, vehicle, vrp.copyAndGetActivities(newJob).get(0), 0));
                     iData.getEvents().add(new SwitchVehicle(currentRoute, vehicle, newVehicleDepartureTime));
@@ -400,8 +413,9 @@ public InsertionData getInsertionData(VehicleRoute currentRoute, Job newJob, Veh
             }
 
             private double getMarginalCost(Service service, TourActivity prevAct, TourActivity act) {
-                double prev_new = getCost(prevAct.getLocation(), service.getLocation());
-                double new_act = getCost(service.getLocation(), act.getLocation());
+                double prev_new = getCost(prevAct.getLocation(),
+                                service.getActivity().getLocation());
+                double new_act = getCost(service.getActivity().getLocation(), act.getLocation());
                 double prev_act = getCost(prevAct.getLocation(), act.getLocation());
                 return prev_new + new_act - prev_act;
             }
@@ -411,12 +425,12 @@ private double getCost(Location loc1, Location loc2) {
             }
         };
 
-//        LocalActivityInsertionCostsCalculator local = new LocalActivityInsertionCostsCalculator(vrp.getTransportCosts(),vrp.getActivityCosts());
-//        StateManager stateManager = new StateManager(vrp);
-//        ConstraintManager manager = new ConstraintManager(vrp,stateManager);
-//        ServiceInsertionCalculator calculator = new ServiceInsertionCalculator(vrp.getTransportCosts(), local, manager);
-//        calculator.setJobActivityFactory(vrp.getJobActivityFactory());
-//        return calculator;
+        //        LocalActivityInsertionCostsCalculator local = new LocalActivityInsertionCostsCalculator(vrp.getTransportCosts(),vrp.getActivityCosts());
+        //        StateManager stateManager = new StateManager(vrp);
+        //        ConstraintManager manager = new ConstraintManager(vrp,stateManager);
+        //        ServiceInsertionCalculator calculator = new ServiceInsertionCalculator(vrp.getTransportCosts(), local, manager);
+        //        calculator.setJobActivityFactory(vrp.getJobActivityFactory());
+        //        return calculator;
     }
 
 }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestAuxilliaryCostCalculator.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestAuxilliaryCostCalculator.java
index de057b885..b3967499f 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestAuxilliaryCostCalculator.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestAuxilliaryCostCalculator.java
@@ -17,20 +17,21 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+import java.util.Arrays;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingActivityCosts;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.End;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.Arrays;
-
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
 
 public class TestAuxilliaryCostCalculator {
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestComparator.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestComparator.java
index 6f57a4a69..a14b6d278 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestComparator.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestComparator.java
@@ -18,16 +18,17 @@
 
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
-import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
-import org.junit.Test;
-
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Comparator;
 import java.util.List;
 
+import org.junit.Test;
+
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.job.Job;
+import com.graphhopper.jsprit.core.problem.job.Service;
+
 /**
  * Created by schroeder on 24/05/16.
  */
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestLocalActivityInsertionCostsCalculator.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestLocalActivityInsertionCostsCalculator.java
index fe689f10d..18b0789d2 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestLocalActivityInsertionCostsCalculator.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestLocalActivityInsertionCostsCalculator.java
@@ -17,6 +17,16 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.algorithm.state.UpdateActivityTimes;
 import com.graphhopper.jsprit.core.algorithm.state.UpdateFutureWaitingTimes;
@@ -38,15 +48,6 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.CostFactory;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
 
 public class TestLocalActivityInsertionCostsCalculator {
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestMixedServiceAndShipmentsProblemOnRouteLevel.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestMixedServiceAndShipmentsProblemOnRouteLevel.java
index bb82ec3d0..7cad5e030 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestMixedServiceAndShipmentsProblemOnRouteLevel.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestMixedServiceAndShipmentsProblemOnRouteLevel.java
@@ -17,18 +17,23 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
+import static org.junit.Assert.assertTrue;
+
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
 import com.graphhopper.jsprit.core.problem.job.Delivery;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
-import com.graphhopper.jsprit.core.problem.vehicle.*;
+import com.graphhopper.jsprit.core.problem.vehicle.InfiniteFleetManagerFactory;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleFleetManager;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.Coordinate;
 import com.graphhopper.jsprit.core.util.TestUtils;
-import org.junit.Test;
-
-import static org.junit.Assert.assertTrue;
 
 
 public class TestMixedServiceAndShipmentsProblemOnRouteLevel {
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/DBSCANClustererTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/DBSCANClustererTest.java
index 498c57727..d21dd0c46 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/DBSCANClustererTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/DBSCANClustererTest.java
@@ -18,6 +18,12 @@
 
 package com.graphhopper.jsprit.core.algorithm.ruin;
 
+import static org.junit.Assert.assertEquals;
+
+import java.util.List;
+
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.distance.EuclideanDistanceCalculator;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.job.Job;
@@ -25,11 +31,6 @@
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.util.DefaultCosts;
-import org.junit.Test;
-
-import java.util.List;
-
-import static org.junit.Assert.assertEquals;
 
 
 /**
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsImplTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsImplTest.java
index 315617129..5815322e8 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsImplTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsImplTest.java
@@ -17,21 +17,22 @@
  */
 package com.graphhopper.jsprit.core.algorithm.ruin;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.ruin.distance.CoordinateJobDistance;
 import com.graphhopper.jsprit.core.algorithm.ruin.distance.JobDistance;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.job.Service;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.ArrayList;
-import java.util.Iterator;
-import java.util.List;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
 
 
 public class JobNeighborhoodsImplTest {
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsOptimizedTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsOptimizedTest.java
index 1bd16a7e4..c22fa8364 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsOptimizedTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsOptimizedTest.java
@@ -17,22 +17,22 @@
  */
 package com.graphhopper.jsprit.core.algorithm.ruin;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.ruin.distance.CoordinateJobDistance;
 import com.graphhopper.jsprit.core.algorithm.ruin.distance.JobDistance;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.job.Service;
-import junit.framework.Assert;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.ArrayList;
-import java.util.Iterator;
-import java.util.List;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
 
 
 public class JobNeighborhoodsOptimizedTest {
@@ -123,10 +123,10 @@ public void whenRequestingNeighborhoodOfTargetJob_neighborsShouldBeCorrect() {
         while (iter.hasNext()) {
             services.add((Service) iter.next());
         }
-        Assert.assertEquals(s6, services.get(0));
-        Assert.assertEquals(s5, services.get(1));
-        Assert.assertEquals(target, services.get(2));
-        Assert.assertEquals(s2, services.get(3));
+        assertEquals(s6, services.get(0));
+        assertEquals(s5, services.get(1));
+        assertEquals(target, services.get(2));
+        assertEquals(s2, services.get(3));
     }
 
     @Test
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsWithCapRestrictionImplTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsWithCapRestrictionImplTest.java
index a82e88414..b4ca09632 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsWithCapRestrictionImplTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsWithCapRestrictionImplTest.java
@@ -17,21 +17,22 @@
  */
 package com.graphhopper.jsprit.core.algorithm.ruin;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.ruin.distance.CoordinateJobDistance;
 import com.graphhopper.jsprit.core.algorithm.ruin.distance.JobDistance;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.job.Service;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.ArrayList;
-import java.util.Iterator;
-import java.util.List;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
 
 
 public class JobNeighborhoodsWithCapRestrictionImplTest {
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinBreakTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinBreakTest.java
index fdab05438..24c5678ef 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinBreakTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinBreakTest.java
@@ -18,6 +18,15 @@
 
 package com.graphhopper.jsprit.core.algorithm.ruin;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Break;
@@ -26,12 +35,6 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.BreakActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
-import junit.framework.Assert;
-import org.junit.Test;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
 
 /**
  * Created by schroeder on 04/08/15.
@@ -42,15 +45,15 @@
     public void itShouldRuinBreaks() {
         Break aBreak = new Break.Builder("break").build();
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance("loc"))
-            .setBreak(aBreak).build();
+                        .setBreak(aBreak).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().setFleetSize(VehicleRoutingProblem.FleetSize.FINITE).addVehicle(v).build();
         VehicleRoute route = VehicleRoute.Builder.newInstance(v).setJobActivityFactory(vrp.getJobActivityFactory()).addService(aBreak).build();
         TourActivity tourActivity = route.getActivities().get(0);
-        Assert.assertTrue(tourActivity instanceof BreakActivity);
+        assertTrue(tourActivity instanceof BreakActivity);
         RuinBreaks ruinBreaks = new RuinBreaks();
         List<Job> unassigned = new ArrayList<Job>();
         ruinBreaks.ruinEnds(Arrays.asList(route), unassigned);
-        Assert.assertEquals(1, unassigned.size());
-        Assert.assertEquals(aBreak, unassigned.get(0));
+        assertEquals(1, unassigned.size());
+        assertEquals(aBreak, unassigned.get(0));
     }
 }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinClustersTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinClustersTest.java
index e9f4f3d6a..93bfd9c05 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinClustersTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinClustersTest.java
@@ -18,6 +18,14 @@
 
 package com.graphhopper.jsprit.core.algorithm.ruin;
 
+import static org.junit.Assert.assertEquals;
+
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Random;
+
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.ruin.distance.DefaultJobDistance;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
@@ -26,12 +34,6 @@
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.util.RandomNumberGeneration;
-import junit.framework.Assert;
-import org.junit.Test;
-
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Random;
 
 /**
  * Created by schroeder on 06/03/15.
@@ -52,11 +54,11 @@ public void itShouldRuinTwoObviousClusters() {
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(s1).addJob(s2)
-            .addJob(s6).addJob(s7).addJob(s0).addJob(s3).addJob(s4).addJob(s5).addVehicle(v).build();
+                        .addJob(s6).addJob(s7).addJob(s0).addJob(s3).addJob(s4).addJob(s5).addVehicle(v).build();
 
         VehicleRoute vr1 = VehicleRoute.Builder.newInstance(v).addService(s0).addService(s1).addService(s2).addService(s3).setJobActivityFactory(vrp.getJobActivityFactory()).build();
         VehicleRoute vr2 = VehicleRoute.Builder.newInstance(v)
-            .addService(s6).addService(s7).addService(s4).addService(s5).setJobActivityFactory(vrp.getJobActivityFactory()).build();
+                        .addService(s6).addService(s7).addService(s4).addService(s5).setJobActivityFactory(vrp.getJobActivityFactory()).build();
 
         JobNeighborhoods n = new JobNeighborhoodsFactory().createNeighborhoods(vrp, new DefaultJobDistance(vrp.getTransportCosts()));
         n.initialise();
@@ -64,7 +66,7 @@ public void itShouldRuinTwoObviousClusters() {
         Random r = RandomNumberGeneration.newInstance();
         rc.setRandom(r);
         Collection<Job> ruined = rc.ruinRoutes(Arrays.asList(vr1, vr2));
-        Assert.assertEquals(5, ruined.size());
+        assertEquals(5, ruined.size());
 
     }
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinWorstTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinWorstTest.java
index a086baecf..7cc45e874 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinWorstTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinWorstTest.java
@@ -18,6 +18,14 @@
 
 package com.graphhopper.jsprit.core.algorithm.ruin;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
+import java.util.Arrays;
+import java.util.Collection;
+
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
@@ -26,13 +34,6 @@
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.util.Coordinate;
-import org.junit.Test;
-
-import java.util.Arrays;
-import java.util.Collection;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
 
 /**
  * Created by schroeder on 30/01/15.
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/AverageJobDistanceTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/AverageJobDistanceTest.java
index 16f8698f4..0c7a4f599 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/AverageJobDistanceTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/AverageJobDistanceTest.java
@@ -17,6 +17,12 @@
  */
 package com.graphhopper.jsprit.core.algorithm.ruin.distance;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.distance.EuclideanDistanceCalculator;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.job.Service;
@@ -24,11 +30,6 @@
 import com.graphhopper.jsprit.core.util.Coordinate;
 import com.graphhopper.jsprit.core.util.DefaultCosts;
 import com.graphhopper.jsprit.core.util.Locations;
-import org.junit.Before;
-import org.junit.Test;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
 
 
 public class AverageJobDistanceTest {
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/TestJobDistanceAvgCosts.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/TestJobDistanceAvgCosts.java
index 19e64ce6c..fbdc96cf4 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/TestJobDistanceAvgCosts.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/TestJobDistanceAvgCosts.java
@@ -17,12 +17,13 @@
  */
 package com.graphhopper.jsprit.core.algorithm.ruin.distance;
 
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.driver.Driver;
 import com.graphhopper.jsprit.core.problem.job.Service;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
-import org.junit.Test;
 
 
 public class TestJobDistanceAvgCosts {
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/selector/SelectBestTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/selector/SelectBestTest.java
index 26b7dce72..0ae253b0d 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/selector/SelectBestTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/selector/SelectBestTest.java
@@ -17,18 +17,19 @@
  */
 package com.graphhopper.jsprit.core.algorithm.selector;
 
-import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
-import org.junit.Test;
-
-import java.util.Arrays;
-import java.util.Collections;
-
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertThat;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
+import java.util.Arrays;
+import java.util.Collections;
+
+import org.junit.Test;
+
+import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
+
 
 public class SelectBestTest {
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/selector/SelectRandomlyTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/selector/SelectRandomlyTest.java
index a67a3f506..0f6f599d8 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/selector/SelectRandomlyTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/selector/SelectRandomlyTest.java
@@ -17,19 +17,20 @@
  */
 package com.graphhopper.jsprit.core.algorithm.selector;
 
-import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
-import org.junit.Test;
-
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.Random;
-
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertThat;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.Random;
+
+import org.junit.Test;
+
+import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
+
 
 public class SelectRandomlyTest {
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/LoadStateTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/LoadStateTest.java
index e78815ae6..14053ebd8 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/LoadStateTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/LoadStateTest.java
@@ -18,23 +18,28 @@
 
 package com.graphhopper.jsprit.core.algorithm.state;
 
-import com.graphhopper.jsprit.core.problem.SizeDimension;
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+import java.util.Arrays;
+import java.util.Collections;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.problem.CopyJobActivityFactory;
 import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.job.*;
+import com.graphhopper.jsprit.core.problem.job.Delivery;
+import com.graphhopper.jsprit.core.problem.job.Job;
+import com.graphhopper.jsprit.core.problem.job.Pickup;
+import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.Arrays;
-import java.util.Collections;
-
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
 
 /**
  * Unit tests to test correct calc of load states
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/StateManagerTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/StateManagerTest.java
index 462c19806..336da8d6a 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/StateManagerTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/StateManagerTest.java
@@ -17,9 +17,21 @@
  */
 package com.graphhopper.jsprit.core.algorithm.state;
 
-import com.graphhopper.jsprit.core.problem.SizeDimension;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertTrue;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.problem.JobActivityFactory;
 import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.job.Service;
@@ -31,16 +43,6 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
-import org.junit.Assert;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import static org.junit.Assert.*;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
 
 public class StateManagerTest {
 
@@ -214,7 +216,7 @@ public void whenProblemStateIsSetAndStateManagerClearedAfterwards_itReturnsNull(
     public void whenCreatingNewState_itShouldHaveAnIndex() {
         StateManager stateManager = new StateManager(vrpMock);
         StateId stateId = stateManager.createStateId("foo-state");
-        Assert.assertEquals(21, stateId.getIndex());
+        assertEquals(21, stateId.getIndex());
     }
 
     @Test
@@ -222,8 +224,8 @@ public void whenCreatingNewStates_theyShouldHaveAnIndex() {
         StateManager stateManager = new StateManager(vrpMock);
         StateId fooState = stateManager.createStateId("foo-state");
         StateId foofooState = stateManager.createStateId("foo-foo-state");
-        Assert.assertEquals(21, fooState.getIndex());
-        Assert.assertEquals(22, foofooState.getIndex());
+        assertEquals(21, fooState.getIndex());
+        assertEquals(22, foofooState.getIndex());
     }
 
     @Test
@@ -231,8 +233,8 @@ public void whenCreatingTwoStatesWithTheSameName_theyShouldHaveTheSameIndex() {
         StateManager stateManager = new StateManager(vrpMock);
         StateId fooState = stateManager.createStateId("foo-state");
         StateId foofooState = stateManager.createStateId("foo-state");
-        Assert.assertEquals(21, fooState.getIndex());
-        Assert.assertEquals(21, foofooState.getIndex());
+        assertEquals(21, fooState.getIndex());
+        assertEquals(21, foofooState.getIndex());
     }
 
     @Test
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdatePracticalTimeWindowTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdatePracticalTimeWindowTest.java
index a773475ef..896276523 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdatePracticalTimeWindowTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdatePracticalTimeWindowTest.java
@@ -17,6 +17,13 @@
  */
 package com.graphhopper.jsprit.core.algorithm.state;
 
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.problem.CopyJobActivityFactory;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
@@ -33,12 +40,6 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.util.CostFactory;
-import org.junit.Before;
-import org.junit.Test;
-
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
 
 public class UpdatePracticalTimeWindowTest {
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdateRequiredSkillsTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdateRequiredSkillsTest.java
index 17f02f615..b13114a09 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdateRequiredSkillsTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdateRequiredSkillsTest.java
@@ -18,6 +18,15 @@
 
 package com.graphhopper.jsprit.core.algorithm.state;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertTrue;
+
+import java.util.Arrays;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.Skills;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
@@ -26,14 +35,6 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
-import junit.framework.Assert;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.Arrays;
-
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertTrue;
 
 /**
  * Tests skill updater
@@ -52,7 +53,7 @@ public void doBefore() {
         Service service2 = new Service.Builder("s2").setLocation(Location.newInstance("loc")).addRequiredSkill("skill1").addRequiredSkill("skill2").addRequiredSkill("skill3").build();
         Service service3 = new Service.Builder("s3").setLocation(Location.newInstance("loc")).addRequiredSkill("skill4").addRequiredSkill("skill5").build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addVehicle(vehicle).addJob(service)
-            .addJob(service2).addJob(service3).build();
+                        .addJob(service2).addJob(service3).build();
         route = VehicleRoute.Builder.newInstance(vehicle).setJobActivityFactory(vrp.getJobActivityFactory()).addService(service).addService(service2).addService(service3).build();
 
         stateManager = new StateManager(vrp);
@@ -64,7 +65,7 @@ public void doBefore() {
     public void whenUpdatingRoute_skillsAtRouteLevelShouldContainAllSkills() {
         Skills skills = stateManager.getRouteState(route, InternalStates.SKILLS, Skills.class);
         assertNotNull(skills);
-        Assert.assertEquals(5, skills.values().size());
+        assertEquals(5, skills.values().size());
         assertTrue(skills.containsSkill("skill1"));
         assertTrue(skills.containsSkill("skill2"));
         assertTrue(skills.containsSkill("skill3"));
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdateVehicleDependentTimeWindowTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdateVehicleDependentTimeWindowTest.java
index 59bf7790a..a1ceddc77 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdateVehicleDependentTimeWindowTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdateVehicleDependentTimeWindowTest.java
@@ -27,7 +27,6 @@
 import java.util.Collection;
 import java.util.Collections;
 
-import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -267,7 +266,7 @@ public void updateOfOpenRoutesShouldBeDoneCorrectly() {
         stateManager.reCalculateStates(route);
 
         Double activityState = stateManager.getActivityState(route.getActivities().get(0), route.getVehicle(), InternalStates.LATEST_OPERATION_START_TIME, Double.class);
-        Assert.assertEquals(51d, activityState, 0.01);
+        assertEquals(51d, activityState, 0.01);
 
     }
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/termination/IterationsWithoutImprovementTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/termination/IterationsWithoutImprovementTest.java
index 8cdd708a4..6d23361b8 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/termination/IterationsWithoutImprovementTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/termination/IterationsWithoutImprovementTest.java
@@ -19,13 +19,14 @@
 package com.graphhopper.jsprit.core.algorithm.termination;
 
 
-import com.graphhopper.jsprit.core.algorithm.SearchStrategy;
-import junit.framework.Assert;
-import org.junit.Test;
-
+import static org.junit.Assert.assertEquals;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
+import org.junit.Test;
+
+import com.graphhopper.jsprit.core.algorithm.SearchStrategy;
+
 public class IterationsWithoutImprovementTest {
 
     @Test
@@ -41,7 +42,7 @@ public void itShouldTerminateAfter100() {
                 break;
             }
         }
-        Assert.assertEquals(100, terminatedAfter);
+        assertEquals(100, terminatedAfter);
     }
 
     @Test
@@ -57,7 +58,7 @@ public void itShouldTerminateAfter1() {
                 break;
             }
         }
-        Assert.assertEquals(1, terminatedAfter);
+        assertEquals(1, terminatedAfter);
     }
 
     @Test
@@ -67,13 +68,15 @@ public void itShouldTerminateAfter150() {
         int terminatedAfter = 0;
         for (int i = 0; i < 200; i++) {
             when(discoveredSolution.isAccepted()).thenReturn(false);
-            if (i == 49) when(discoveredSolution.isAccepted()).thenReturn(true);
+            if (i == 49) {
+                when(discoveredSolution.isAccepted()).thenReturn(true);
+            }
             boolean terminate = termination.isPrematureBreak(discoveredSolution);
             if (terminate) {
                 terminatedAfter = i;
                 break;
             }
         }
-        Assert.assertEquals(150, terminatedAfter);
+        assertEquals(150, terminatedAfter);
     }
 }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/termination/TimeTerminationTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/termination/TimeTerminationTest.java
index 095405b71..9112e3758 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/termination/TimeTerminationTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/termination/TimeTerminationTest.java
@@ -18,7 +18,9 @@
 
 package com.graphhopper.jsprit.core.algorithm.termination;
 
-import junit.framework.Assert;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
 import org.junit.Test;
 
 /**
@@ -37,7 +39,7 @@ public long getCurrentTime() {
             }
         });
         tt.start(0);
-        Assert.assertFalse(tt.isPrematureBreak(null));
+        assertFalse(tt.isPrematureBreak(null));
     }
 
     @Test
@@ -51,6 +53,6 @@ public long getCurrentTime() {
             }
         });
         tt.start(0);
-        Assert.assertTrue(tt.isPrematureBreak(null));
+        assertTrue(tt.isPrematureBreak(null));
     }
 }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyserTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyserTest.java
index 9f9f259ad..5e4a52b74 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyserTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyserTest.java
@@ -19,9 +19,20 @@
 package com.graphhopper.jsprit.core.analysis;
 
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
+import java.util.Arrays;
+import java.util.Iterator;
+import java.util.List;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.distance.ManhattanDistanceCalculator;
-import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.cost.TransportDistance;
 import com.graphhopper.jsprit.core.problem.job.Delivery;
@@ -39,15 +50,6 @@
 import com.graphhopper.jsprit.core.util.Coordinate;
 import com.graphhopper.jsprit.core.util.DefaultCosts;
 import com.graphhopper.jsprit.core.util.TestUtils;
-import junit.framework.Assert;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.Arrays;
-import java.util.Iterator;
-import java.util.List;
-
-import static org.junit.Assert.*;
 
 public class SolutionAnalyserTest {
 
@@ -62,55 +64,55 @@ public void doBefore() {
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").setFixedCost(100.).setCostPerDistance(2.).addCapacityDimension(0, 15).build();
 
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v1").setType(type)
-            .setStartLocation(Location.newInstance(-5, 0))
-            .addSkill("skill1").addSkill("skill2")
-            .build();
+                        .setStartLocation(Location.newInstance(-5, 0))
+                        .addSkill("skill1").addSkill("skill2")
+                        .build();
 
         VehicleImpl vehicle2 = VehicleImpl.Builder.newInstance("v2").setType(type)
-            .setStartLocation(Location.newInstance(5, 0)).build();
+                        .setStartLocation(Location.newInstance(5, 0)).build();
 
         Service s1 = new Service.Builder("s1")
-            .setTimeWindow(TimeWindow.newInstance(10, 20))
-            .setLocation(Location.newInstance(-10, 1)).addSizeDimension(0, 2)
-            .addRequiredSkill("skill1")
-            .build();
+                        .setTimeWindow(TimeWindow.newInstance(10, 20))
+                        .setLocation(Location.newInstance(-10, 1)).addSizeDimension(0, 2)
+                        .addRequiredSkill("skill1")
+                        .build();
         Service s2 = new Service.Builder("s2")
-            .setLocation(Location.newInstance(-10, 10))
-            .addSizeDimension(0, 3)
-            .addRequiredSkill("skill2").addRequiredSkill("skill1")
-            .build();
+                        .setLocation(Location.newInstance(-10, 10))
+                        .addSizeDimension(0, 3)
+                        .addRequiredSkill("skill2").addRequiredSkill("skill1")
+                        .build();
         Shipment shipment1 = Shipment.Builder.newInstance("ship1")
-            .setPickupLocation(TestUtils.loc(Coordinate.newInstance(-15, 2)))
-            .setDeliveryLocation(TestUtils.loc(Coordinate.newInstance(-16, 5)))
-            .addSizeDimension(0, 10)
-            .setPickupServiceTime(20.)
-            .setDeliveryServiceTime(20.)
-            .addRequiredSkill("skill3")
-            .build();
+                        .setPickupLocation(TestUtils.loc(Coordinate.newInstance(-15, 2)))
+                        .setDeliveryLocation(TestUtils.loc(Coordinate.newInstance(-16, 5)))
+                        .addSizeDimension(0, 10)
+                        .setPickupServiceTime(20.)
+                        .setDeliveryServiceTime(20.)
+                        .addRequiredSkill("skill3")
+                        .build();
 
         Service s3 = new Service.Builder("s3")
-            .setTimeWindow(TimeWindow.newInstance(10, 20))
-            .setLocation(TestUtils.loc(Coordinate.newInstance(10, 1))).addSizeDimension(0, 2).build();
+                        .setTimeWindow(TimeWindow.newInstance(10, 20))
+                        .setLocation(TestUtils.loc(Coordinate.newInstance(10, 1))).addSizeDimension(0, 2).build();
 
         Service s4 = new Service.Builder("s4").setLocation(TestUtils.loc(Coordinate.newInstance(10, 10))).addSizeDimension(0, 3).build();
 
         Shipment shipment2 = Shipment.Builder.newInstance("ship2").setPickupLocation(TestUtils.loc(Coordinate.newInstance(15, 2)))
-            .setPickupServiceTime(20.).setDeliveryServiceTime(20.)
-            .setDeliveryLocation(TestUtils.loc(Coordinate.newInstance(16, 5))).addSizeDimension(0, 10).build();
+                        .setPickupServiceTime(20.).setDeliveryServiceTime(20.)
+                        .setDeliveryLocation(TestUtils.loc(Coordinate.newInstance(16, 5))).addSizeDimension(0, 10).build();
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance().addVehicle(vehicle)
-            .addVehicle(vehicle2)
-            .addJob(s1)
-            .addJob(s2).addJob(shipment1).addJob(s3).addJob(s4).addJob(shipment2).setFleetSize(VehicleRoutingProblem.FleetSize.INFINITE);
+                        .addVehicle(vehicle2)
+                        .addJob(s1)
+                        .addJob(s2).addJob(shipment1).addJob(s3).addJob(s4).addJob(shipment2).setFleetSize(VehicleRoutingProblem.FleetSize.INFINITE);
         vrpBuilder.setRoutingCost(new DefaultCosts(ManhattanDistanceCalculator.getInstance())
-            .withCoordinateConverter(vrpBuilder.getLocations()));
+                        .withCoordinateConverter(vrpBuilder.getLocations()));
         vrp = vrpBuilder.build();
 
         VehicleRoute route1 = VehicleRoute.Builder.newInstance(vehicle).setJobActivityFactory(vrp.getJobActivityFactory())
-            .addService(s1).addPickup(shipment1).addDelivery(shipment1).addService(s2).build();
+                        .addService(s1).addPickup(shipment1).addDelivery(shipment1).addService(s2).build();
 
         VehicleRoute route2 = VehicleRoute.Builder.newInstance(vehicle).setJobActivityFactory(vrp.getJobActivityFactory())
-            .addService(s3).addPickup(shipment2).addDelivery(shipment2).addService(s4).build();
+                        .addService(s3).addPickup(shipment2).addDelivery(shipment2).addService(s4).build();
 
         solution = new VehicleRoutingProblemSolution(Arrays.asList(route1, route2), 42);
     }
@@ -120,57 +122,57 @@ public void buildAnotherScenarioWithOnlyOneVehicleAndWithoutAnyConstraintsBefore
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").setFixedCost(100.).setCostPerDistance(2.).addCapacityDimension(0, 15).build();
 
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v1").setType(type)
-            .setStartLocation(Location.newInstance(-5, 0))
-            .setLatestArrival(150.)
-            .build();
+                        .setStartLocation(Location.newInstance(-5, 0))
+                        .setLatestArrival(150.)
+                        .build();
 
         Pickup s1 = new Pickup.Builder("s1")
-            .setTimeWindow(TimeWindow.newInstance(10, 20))
-            .setLocation(Location.newInstance(-10, 1))
-            .addSizeDimension(0, 10)
-            .build();
+                        .setTimeWindow(TimeWindow.newInstance(10, 20))
+                        .setLocation(Location.newInstance(-10, 1))
+                        .addSizeDimension(0, 10)
+                        .build();
         Delivery s2 = new Delivery.Builder("s2")
-            .setLocation(Location.newInstance(-10, 10))
-            .setTimeWindow(TimeWindow.newInstance(10, 20))
-            .addSizeDimension(0, 20)
-            .build();
+                        .setLocation(Location.newInstance(-10, 10))
+                        .setTimeWindow(TimeWindow.newInstance(10, 20))
+                        .addSizeDimension(0, 20)
+                        .build();
         Shipment shipment1 = Shipment.Builder.newInstance("ship1").setPickupLocation(TestUtils.loc(Coordinate.newInstance(-15, 2)))
-            .setDeliveryLocation(TestUtils.loc(Coordinate.newInstance(-16, 5)))
-            .addSizeDimension(0, 15)
-            .setPickupServiceTime(20.).setDeliveryServiceTime(20.)
-            .setPickupTimeWindow(TimeWindow.newInstance(10, 20)).setDeliveryTimeWindow(TimeWindow.newInstance(10, 20))
-            .build();
+                        .setDeliveryLocation(TestUtils.loc(Coordinate.newInstance(-16, 5)))
+                        .addSizeDimension(0, 15)
+                        .setPickupServiceTime(20.).setDeliveryServiceTime(20.)
+                        .setPickupTimeWindow(TimeWindow.newInstance(10, 20)).setDeliveryTimeWindow(TimeWindow.newInstance(10, 20))
+                        .build();
 
         Pickup s3 = new Pickup.Builder("s3")
-            .setTimeWindow(TimeWindow.newInstance(10, 20))
-            .setLocation(TestUtils.loc(Coordinate.newInstance(10, 1)))
-            .addSizeDimension(0, 10)
-            .build();
+                        .setTimeWindow(TimeWindow.newInstance(10, 20))
+                        .setLocation(TestUtils.loc(Coordinate.newInstance(10, 1)))
+                        .addSizeDimension(0, 10)
+                        .build();
         Delivery s4 = new Delivery.Builder("s4").setLocation(Location.newInstance(10, 10))
-            .addSizeDimension(0, 20)
-            .setTimeWindow(TimeWindow.newInstance(10, 20))
-            .build();
+                        .addSizeDimension(0, 20)
+                        .setTimeWindow(TimeWindow.newInstance(10, 20))
+                        .build();
         Shipment shipment2 = Shipment.Builder.newInstance("ship2").setPickupLocation(TestUtils.loc(Coordinate.newInstance(15, 2)))
-            .setPickupServiceTime(20.).setDeliveryServiceTime(20.)
-            .setDeliveryLocation(TestUtils.loc(Coordinate.newInstance(16, 5)))
-            .setPickupTimeWindow(TimeWindow.newInstance(10, 20)).setDeliveryTimeWindow(TimeWindow.newInstance(10, 20))
-            .addSizeDimension(0, 15).build();
+                        .setPickupServiceTime(20.).setDeliveryServiceTime(20.)
+                        .setDeliveryLocation(TestUtils.loc(Coordinate.newInstance(16, 5)))
+                        .setPickupTimeWindow(TimeWindow.newInstance(10, 20)).setDeliveryTimeWindow(TimeWindow.newInstance(10, 20))
+                        .addSizeDimension(0, 15).build();
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance().addVehicle(vehicle)
-            .addJob(s1)
-            .addJob(s2).addJob(shipment1).addJob(s3).addJob(s4).addJob(shipment2).setFleetSize(VehicleRoutingProblem.FleetSize.FINITE);
+                        .addJob(s1)
+                        .addJob(s2).addJob(shipment1).addJob(s3).addJob(s4).addJob(shipment2).setFleetSize(VehicleRoutingProblem.FleetSize.FINITE);
         vrpBuilder.setRoutingCost(new DefaultCosts(ManhattanDistanceCalculator.getInstance())
-            .withCoordinateConverter(vrpBuilder.getLocations()));
+                        .withCoordinateConverter(vrpBuilder.getLocations()));
         vrp = vrpBuilder.build();
 
         VehicleRoute route = VehicleRoute.Builder.newInstance(vehicle).setJobActivityFactory(vrp.getJobActivityFactory())
-            .addPickup(s3)
-            .addPickup(shipment2).addDelivery(shipment2)
-            .addDelivery(s4)
-            .addDelivery(s2)
-            .addPickup(shipment1).addDelivery(shipment1)
-            .addPickup(s1)
-            .build();
+                        .addPickup(s3)
+                        .addPickup(shipment2).addDelivery(shipment2)
+                        .addDelivery(s4)
+                        .addDelivery(s2)
+                        .addPickup(shipment1).addDelivery(shipment1)
+                        .addPickup(s1)
+                        .build();
 
         solution = new VehicleRoutingProblemSolution(Arrays.asList(route), 300);
     }
@@ -230,12 +232,12 @@ public double getDistance(Location fromLocationId, Location toLocationId, double
 
         // this should be the path taken by route 1 including depots
         Coordinate[] route1Path = new Coordinate[]{
-            Coordinate.newInstance(-5, 0),
-            Coordinate.newInstance(-10, 1),
-            Coordinate.newInstance(-15, 2),
-            Coordinate.newInstance(-16, 5),
-            Coordinate.newInstance(-10, 10),
-            Coordinate.newInstance(-5, 0)
+                        Coordinate.newInstance(-5, 0),
+                        Coordinate.newInstance(-10, 1),
+                        Coordinate.newInstance(-15, 2),
+                        Coordinate.newInstance(-16, 5),
+                        Coordinate.newInstance(-10, 10),
+                        Coordinate.newInstance(-5, 0)
 
         };
 
@@ -249,7 +251,7 @@ public double getDistance(Location fromLocationId, Location toLocationId, double
         class ManhattanDistance {
             private double calc(Coordinate from, Coordinate to) {
                 return Math.abs(from.getX() - to.getX())
-                    + Math.abs(from.getY() - to.getY());
+                                + Math.abs(from.getY() - to.getY());
             }
         }
         ManhattanDistance md = new ManhattanDistance();
@@ -302,13 +304,13 @@ private double calc(Coordinate from, Coordinate to) {
 
     @Test
     public void constructionShouldWork() {
-        SolutionAnalyser analyser = new SolutionAnalyser(vrp, solution, new TransportDistance() {
+        new SolutionAnalyser(vrp, solution, new TransportDistance() {
             @Override
             public double getDistance(Location from, Location to, double departureTime, Vehicle vehicle) {
                 return vrp.getTransportCosts().getTransportCost(from, to, 0., null, null);
             }
         });
-        Assert.assertTrue(true);
+        assertTrue(true);
     }
 
     @Test
@@ -387,7 +389,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
         assertEquals(2, analyser.getLoadRightAfterActivity(route.getActivities().get(0), route)
-            .get(0));
+                        .get(0));
     }
 
     @Test
@@ -400,7 +402,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
         assertEquals(12, analyser.getLoadRightAfterActivity(route.getActivities().get(1), route)
-            .get(0));
+                        .get(0));
     }
 
     @Test
@@ -413,7 +415,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
         assertEquals(2, analyser.getLoadRightAfterActivity(route.getActivities().get(2), route)
-            .get(0));
+                        .get(0));
     }
 
     @Test
@@ -426,7 +428,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
         assertEquals(5, analyser.getLoadRightAfterActivity(route.getActivities().get(3), route)
-            .get(0));
+                        .get(0));
     }
 
     @Test
@@ -463,7 +465,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
         assertEquals(0, analyser.getLoadJustBeforeActivity(route.getActivities().get(0), route)
-            .get(0));
+                        .get(0));
     }
 
     @Test
@@ -476,7 +478,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
         assertEquals(2, analyser.getLoadJustBeforeActivity(route.getActivities().get(1), route)
-            .get(0));
+                        .get(0));
     }
 
     @Test
@@ -489,7 +491,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
         assertEquals(12, analyser.getLoadJustBeforeActivity(route.getActivities().get(2), route)
-            .get(0));
+                        .get(0));
     }
 
     @Test
@@ -502,7 +504,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
         assertEquals(2, analyser.getLoadJustBeforeActivity(route.getActivities().get(3), route)
-            .get(0));
+                        .get(0));
     }
 
     @Test
@@ -898,7 +900,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
                 return vrp.getTransportCosts().getTransportCost(from, to, 0., null, null);
             }
         });
-        VehicleRoute route = solution.getRoutes().iterator().next();
+        solution.getRoutes().iterator().next();
         assertEquals(70, analyser.getLoadDelivered().get(0), 0.01);
     }
 
@@ -996,7 +998,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
         assertEquals(4., analyser.getWaitingTimeAtActivity(route.getActivities().get(0), route),
-            0.01);
+                        0.01);
     }
 
     @Test
@@ -1009,7 +1011,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
         assertEquals(0., analyser.getWaitingTimeAtActivity(route.getActivities().get(1), route),
-            0.01);
+                        0.01);
     }
 
     @Test
@@ -1022,7 +1024,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
         assertEquals(0., analyser.getWaitingTimeAtActivity(route.getActivities().get(2), route),
-            0.01);
+                        0.01);
     }
 
     @Test
@@ -1035,7 +1037,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
         assertEquals(0., analyser.getWaitingTimeAtActivity(route.getActivities().get(3), route),
-            0.01);
+                        0.01);
     }
 
     @Test
@@ -1084,7 +1086,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
         assertEquals(12., analyser.getDistanceAtActivity(route.getActivities().get(1), route),
-            0.01);
+                        0.01);
     }
 
     @Test
@@ -1097,7 +1099,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
         assertEquals(16., analyser.getDistanceAtActivity(route.getActivities().get(2), route),
-            0.01);
+                        0.01);
     }
 
     @Test
@@ -1110,7 +1112,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
         assertEquals(27., analyser.getDistanceAtActivity(route.getActivities().get(3), route),
-            0.01);
+                        0.01);
     }
 
     @Test
@@ -1148,7 +1150,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
         assertEquals(0., analyser.getTimeWindowViolationAtActivity(route.getActivities().get(0),
-            route), 0.01);
+                        route), 0.01);
     }
 
     @Test
@@ -1161,7 +1163,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
         assertEquals(0., analyser.getTimeWindowViolationAtActivity(route.getActivities().get(1),
-            route), 0.01);
+                        route), 0.01);
     }
 
     @Test
@@ -1174,7 +1176,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
         assertEquals(0., analyser.getTimeWindowViolationAtActivity(route.getActivities().get(2),
-            route), 0.01);
+                        route), 0.01);
     }
 
     @Test
@@ -1187,7 +1189,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
         assertEquals(0., analyser.getTimeWindowViolationAtActivity(route.getActivities().get(3),
-            route), 0.01);
+                        route), 0.01);
     }
 
     @Test
@@ -1248,7 +1250,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
         assertEquals(0, analyser.getVariableTransportCostsAtActivity(route.getStart(), route),
-            0.01);
+                        0.01);
     }
 
     @Test
@@ -1261,7 +1263,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
         assertEquals(6. * 2., analyser.getVariableTransportCostsAtActivity(
-            route.getActivities().get(0), route), 0.01);
+                        route.getActivities().get(0), route), 0.01);
     }
 
     @Test
@@ -1274,7 +1276,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
         assertEquals(12. * 2., analyser.getVariableTransportCostsAtActivity(
-            route.getActivities().get(1), route), 0.01);
+                        route.getActivities().get(1), route), 0.01);
     }
 
     @Test
@@ -1287,7 +1289,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
         assertEquals(16. * 2., analyser.getVariableTransportCostsAtActivity(
-            route.getActivities().get(2), route), 0.01);
+                        route.getActivities().get(2), route), 0.01);
     }
 
     @Test
@@ -1300,7 +1302,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
         assertEquals(27. * 2., analyser.getVariableTransportCostsAtActivity(
-            route.getActivities().get(3), route), 0.01);
+                        route.getActivities().get(3), route), 0.01);
     }
 
     @Test
@@ -1313,7 +1315,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
         assertEquals(42. * 2., analyser.getVariableTransportCostsAtActivity(route.getEnd(), route),
-            0.01);
+                        0.01);
     }
 
     @Test
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/LocationTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/LocationTest.java
index 63682b55a..39a481caf 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/LocationTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/LocationTest.java
@@ -18,10 +18,13 @@
 
 package com.graphhopper.jsprit.core.problem;
 
-import com.graphhopper.jsprit.core.util.Coordinate;
+import static org.junit.Assert.assertEquals;
+
 import org.junit.Assert;
 import org.junit.Test;
 
+import com.graphhopper.jsprit.core.util.Coordinate;
+
 /**
  * Created by schroeder on 16.12.14.
  */
@@ -30,61 +33,61 @@
     @Test
     public void whenIndexSet_buildLocation() {
         Location l = Location.Builder.newInstance().setIndex(1).build();
-        Assert.assertEquals(1, l.getIndex());
+        assertEquals(1, l.getIndex());
         Assert.assertTrue(true);
     }
 
     @Test
     public void whenNameSet_buildLocation() {
         Location l = Location.Builder.newInstance().setName("mystreet 6a").setIndex(1).build();
-        Assert.assertEquals("mystreet 6a", l.getName());
+        assertEquals("mystreet 6a", l.getName());
     }
 
     @Test
     public void whenIndexSetWitFactory_returnCorrectLocation() {
         Location l = Location.newInstance(1);
-        Assert.assertEquals(1, l.getIndex());
+        assertEquals(1, l.getIndex());
         Assert.assertTrue(true);
     }
 
     @Test(expected = IllegalArgumentException.class)
     public void whenIndexSmallerZero_throwException() {
-        Location l = Location.Builder.newInstance().setIndex(-1).build();
+        Location.Builder.newInstance().setIndex(-1).build();
     }
 
     @Test(expected = IllegalArgumentException.class)
     public void whenCoordinateAndIdAndIndexNotSet_throwException() {
-        Location l = Location.Builder.newInstance().build();
+        Location.Builder.newInstance().build();
     }
 
     @Test
     public void whenIdSet_build() {
         Location l = Location.Builder.newInstance().setId("id").build();
-        Assert.assertEquals("id", l.getId());
+        assertEquals("id", l.getId());
         Assert.assertTrue(true);
     }
 
     @Test
     public void whenIdSetWithFactory_returnCorrectLocation() {
         Location l = Location.newInstance("id");
-        Assert.assertEquals("id", l.getId());
+        assertEquals("id", l.getId());
         Assert.assertTrue(true);
     }
 
     @Test
     public void whenCoordinateSet_build() {
         Location l = Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(10, 20)).build();
-        Assert.assertEquals(10., l.getCoordinate().getX(), 0.001);
-        Assert.assertEquals(20., l.getCoordinate().getY(), 0.001);
+        assertEquals(10., l.getCoordinate().getX(), 0.001);
+        assertEquals(20., l.getCoordinate().getY(), 0.001);
         Assert.assertTrue(true);
     }
 
     @Test
     public void whenCoordinateSetWithFactory_returnCorrectLocation() {
-//        Location l = Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(10,20)).build();
+        //        Location l = Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(10,20)).build();
         Location l = Location.newInstance(10, 20);
-        Assert.assertEquals(10., l.getCoordinate().getX(), 0.001);
-        Assert.assertEquals(20., l.getCoordinate().getY(), 0.001);
+        assertEquals(10., l.getCoordinate().getX(), 0.001);
+        assertEquals(20., l.getCoordinate().getY(), 0.001);
         Assert.assertTrue(true);
     }
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/SizeDimensionTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/SizeDimensionTest.java
index 9449b4b78..909adfc22 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/SizeDimensionTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/SizeDimensionTest.java
@@ -31,55 +31,55 @@
     @Test
     public void signShouldBePositive() {
         SizeDimension sd = SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 2).build();
-        Assert.assertEquals(SizeDimension.SizeDimensionSign.POSITIVE, sd.sign());
+        assertEquals(SizeDimension.SizeDimensionSign.POSITIVE, sd.sign());
     }
 
     @Test
     public void signShouldBePositive2() {
         SizeDimension sd = SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 0).build();
-        Assert.assertEquals(SizeDimension.SizeDimensionSign.POSITIVE, sd.sign());
+        assertEquals(SizeDimension.SizeDimensionSign.POSITIVE, sd.sign());
     }
 
     @Test
     public void signShouldBeNegative() {
         SizeDimension sd = SizeDimension.Builder.newInstance().addDimension(0, -1).addDimension(1, -2).build();
-        Assert.assertEquals(SizeDimension.SizeDimensionSign.NEGATIVE, sd.sign());
+        assertEquals(SizeDimension.SizeDimensionSign.NEGATIVE, sd.sign());
     }
 
     @Test
     public void signShouldBeNegative2() {
         SizeDimension sd = SizeDimension.Builder.newInstance().addDimension(0, 0).addDimension(1, -2).build();
-        Assert.assertEquals(SizeDimension.SizeDimensionSign.NEGATIVE, sd.sign());
+        assertEquals(SizeDimension.SizeDimensionSign.NEGATIVE, sd.sign());
     }
 
     @Test
     public void signShouldBeMixed() {
         SizeDimension sd = SizeDimension.Builder.newInstance().addDimension(0, -1).addDimension(1, 2).build();
-        Assert.assertEquals(SizeDimension.SizeDimensionSign.MIXED, sd.sign());
+        assertEquals(SizeDimension.SizeDimensionSign.MIXED, sd.sign());
     }
 
     @Test
     public void signShouldBeZero() {
         SizeDimension sd = SizeDimension.Builder.newInstance().addDimension(0, 0).addDimension(1, 0).build();
-        Assert.assertEquals(SizeDimension.SizeDimensionSign.ZERO, sd.sign());
+        assertEquals(SizeDimension.SizeDimensionSign.ZERO, sd.sign());
     }
 
     @Test
     public void getNegativeShouldReturnCorrectCapacity() {
         SizeDimension cap = SizeDimension.Builder.newInstance().addDimension(0, 2).addDimension(1, -3).build();
         SizeDimension neg = cap.getNegativeDimensions();
-        Assert.assertEquals(2, neg.getNuOfDimensions());
-        Assert.assertEquals(0, neg.get(0));
-        Assert.assertEquals(-3, neg.get(1));
+        assertEquals(2, neg.getNuOfDimensions());
+        assertEquals(0, neg.get(0));
+        assertEquals(-3, neg.get(1));
     }
 
     @Test
     public void getPositiveShouldReturnCorrectCapacity() {
         SizeDimension cap = SizeDimension.Builder.newInstance().addDimension(0, 2).addDimension(1, -3).build();
         SizeDimension pos = cap.getPositiveDimensions();
-        Assert.assertEquals(2, pos.getNuOfDimensions());
-        Assert.assertEquals(2, pos.get(0));
-        Assert.assertEquals(0, pos.get(1));
+        assertEquals(2, pos.getNuOfDimensions());
+        assertEquals(2, pos.get(0));
+        assertEquals(0, pos.get(1));
     }
 
     @Test
@@ -440,6 +440,7 @@ public void shouldBeEqual2() {
         Assert.assertTrue(cap1.equals(cap2));
     }
 
+    @SuppressWarnings("deprecation")
     @Test
     public void legacyTest() {
         Capacity.Builder builder = Capacity.Builder.newInstance();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/SkillsTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/SkillsTest.java
index b13c8bce2..d70c753d7 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/SkillsTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/SkillsTest.java
@@ -18,12 +18,12 @@
 
 package com.graphhopper.jsprit.core.problem;
 
-import org.junit.Test;
+import static org.junit.Assert.assertTrue;
 
 import java.util.HashSet;
 import java.util.Set;
 
-import static org.junit.Assert.assertTrue;
+import org.junit.Test;
 
 /**
  * Created by schroeder on 01.07.14.
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblemTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblemTest.java
index a28b4ea4a..cdd021422 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblemTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblemTest.java
@@ -17,12 +17,30 @@
  */
 package com.graphhopper.jsprit.core.problem;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertThat;
+import static org.junit.Assert.assertTrue;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+
+import org.hamcrest.CoreMatchers;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
 import com.graphhopper.jsprit.core.problem.cost.AbstractForwardVehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingActivityCosts;
 import com.graphhopper.jsprit.core.problem.driver.Driver;
 import com.graphhopper.jsprit.core.problem.driver.DriverImpl;
-import com.graphhopper.jsprit.core.problem.job.*;
+import com.graphhopper.jsprit.core.problem.job.Delivery;
+import com.graphhopper.jsprit.core.problem.job.Pickup;
+import com.graphhopper.jsprit.core.problem.job.SequentialJobActivityList;
+import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
@@ -31,16 +49,6 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.Coordinate;
 import com.graphhopper.jsprit.core.util.TestUtils;
-import org.junit.Test;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-
-import static org.junit.Assert.*;
-import static org.junit.matchers.JUnitMatchers.hasItem;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
 
 
 public class VehicleRoutingProblemTest {
@@ -132,11 +140,9 @@ public void whenShipmentsAreAdded_vrpShouldContainThem() {
     public void whenServicesAreAdded_vrpShouldContainThem() {
         Service s1 = mock(Service.class);
         when(s1.getId()).thenReturn("s1");
-        when(s1.getLocation()).thenReturn(Location.Builder.newInstance().setIndex(1).build());
         when(s1.getActivityList()).thenReturn(new SequentialJobActivityList(s1));
         Service s2 = mock(Service.class);
         when(s2.getId()).thenReturn("s2");
-        when(s2.getLocation()).thenReturn(Location.Builder.newInstance().setIndex(1).build());
         when(s2.getActivityList()).thenReturn(new SequentialJobActivityList(s2));
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
@@ -154,11 +160,9 @@ public void whenServicesAreAdded_vrpShouldContainThem() {
     public void whenPickupsAreAdded_vrpShouldContainThem() {
         Pickup s1 = mock(Pickup.class);
         when(s1.getId()).thenReturn("s1");
-        when(s1.getLocation()).thenReturn(Location.Builder.newInstance().setIndex(1).build());
         when(s1.getActivityList()).thenReturn(new SequentialJobActivityList(s1));
         Pickup s2 = mock(Pickup.class);
         when(s2.getId()).thenReturn("s2");
-        when(s2.getLocation()).thenReturn(Location.Builder.newInstance().setIndex(1).build());
         when(s2.getActivityList()).thenReturn(new SequentialJobActivityList(s2));
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
@@ -175,11 +179,9 @@ public void whenPickupsAreAdded_vrpShouldContainThem() {
     public void whenPickupsAreAddedAllAtOnce_vrpShouldContainThem() {
         Pickup s1 = mock(Pickup.class);
         when(s1.getId()).thenReturn("s1");
-        when(s1.getLocation()).thenReturn(Location.Builder.newInstance().setIndex(1).build());
         when(s1.getActivityList()).thenReturn(new SequentialJobActivityList(s1));
         Pickup s2 = mock(Pickup.class);
         when(s2.getId()).thenReturn("s2");
-        when(s2.getLocation()).thenReturn(Location.Builder.newInstance().setIndex(1).build());
         when(s2.getActivityList()).thenReturn(new SequentialJobActivityList(s2));
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
@@ -196,13 +198,9 @@ public void whenPickupsAreAddedAllAtOnce_vrpShouldContainThem() {
     public void whenDelivieriesAreAdded_vrpShouldContainThem() {
         Delivery s1 = mock(Delivery.class);
         when(s1.getId()).thenReturn("s1");
-        when(s1.getSize()).thenReturn(SizeDimension.Builder.newInstance().build());
-        when(s1.getLocation()).thenReturn(Location.Builder.newInstance().setIndex(1).build());
         when(s1.getActivityList()).thenReturn(new SequentialJobActivityList(s1));
         Delivery s2 = mock(Delivery.class);
         when(s2.getId()).thenReturn("s2");
-        when(s2.getSize()).thenReturn(SizeDimension.Builder.newInstance().build());
-        when(s2.getLocation()).thenReturn(Location.Builder.newInstance().setIndex(1).build());
         when(s2.getActivityList()).thenReturn(new SequentialJobActivityList(s2));
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
@@ -219,13 +217,9 @@ public void whenDelivieriesAreAdded_vrpShouldContainThem() {
     public void whenDelivieriesAreAddedAllAtOnce_vrpShouldContainThem() {
         Delivery s1 = mock(Delivery.class);
         when(s1.getId()).thenReturn("s1");
-        when(s1.getSize()).thenReturn(SizeDimension.Builder.newInstance().build());
-        when(s1.getLocation()).thenReturn(Location.Builder.newInstance().setIndex(1).build());
         when(s1.getActivityList()).thenReturn(new SequentialJobActivityList(s1));
         Delivery s2 = mock(Delivery.class);
         when(s2.getId()).thenReturn("s2");
-        when(s2.getSize()).thenReturn(SizeDimension.Builder.newInstance().build());
-        when(s2.getLocation()).thenReturn(Location.Builder.newInstance().setIndex(1).build());
         when(s2.getActivityList()).thenReturn(new SequentialJobActivityList(s2));
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
@@ -242,11 +236,9 @@ public void whenDelivieriesAreAddedAllAtOnce_vrpShouldContainThem() {
     public void whenServicesAreAddedAllAtOnce_vrpShouldContainThem() {
         Service s1 = mock(Service.class);
         when(s1.getId()).thenReturn("s1");
-        when(s1.getLocation()).thenReturn(Location.Builder.newInstance().setIndex(1).build());
         when(s1.getActivityList()).thenReturn(new SequentialJobActivityList(s1));
         Service s2 = mock(Service.class);
         when(s2.getId()).thenReturn("s2");
-        when(s2.getLocation()).thenReturn(Location.Builder.newInstance().setIndex(1).build());
         when(s2.getActivityList()).thenReturn(new SequentialJobActivityList(s2));
 
         Collection<Service> services = new ArrayList<Service>();
@@ -293,13 +285,13 @@ public void whenSettingRoutingCosts_vprShouldContainIt() {
 
             @Override
             public double getTransportTime(Location from, Location to,
-                                           double departureTime, Driver driver, Vehicle vehicle) {
+                            double departureTime, Driver driver, Vehicle vehicle) {
                 return 0;
             }
 
             @Override
             public double getTransportCost(Location from, Location to,
-                                           double departureTime, Driver driver, Vehicle vehicle) {
+                            double departureTime, Driver driver, Vehicle vehicle) {
                 return 4.0;
             }
         });
@@ -370,7 +362,7 @@ public void whenAddingTwoVehicleWithDiffType_getAddedVehicleTypesShouldReturnThe
     @Test
     public void whenAddingVehicleWithDiffStartAndEnd_startLocationMustBeRegisteredInLocationMap() {
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance("start"))
-            .setEndLocation(Location.newInstance("end")).build();
+                        .setEndLocation(Location.newInstance("end")).build();
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addVehicle(vehicle);
@@ -380,7 +372,7 @@ public void whenAddingVehicleWithDiffStartAndEnd_startLocationMustBeRegisteredIn
     @Test
     public void whenAddingVehicleWithDiffStartAndEnd_endLocationMustBeRegisteredInLocationMap() {
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance("start"))
-            .setEndLocation(Location.newInstance("end")).build();
+                        .setEndLocation(Location.newInstance("end")).build();
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addVehicle(vehicle);
@@ -390,7 +382,7 @@ public void whenAddingVehicleWithDiffStartAndEnd_endLocationMustBeRegisteredInLo
     @Test
     public void whenAddingInitialRoute_itShouldBeAddedCorrectly() {
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v")
-            .setStartLocation(Location.newInstance("start")).setEndLocation(Location.newInstance("end")).build();
+                        .setStartLocation(Location.newInstance("start")).setEndLocation(Location.newInstance("end")).build();
         VehicleRoute route = VehicleRoute.Builder.newInstance(vehicle, DriverImpl.noDriver()).build();
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addInitialVehicleRoute(route);
@@ -401,11 +393,11 @@ public void whenAddingInitialRoute_itShouldBeAddedCorrectly() {
     @Test
     public void whenAddingInitialRoutes_theyShouldBeAddedCorrectly() {
         VehicleImpl vehicle1 = VehicleImpl.Builder.newInstance("v")
-            .setStartLocation(Location.newInstance("start")).setEndLocation(Location.newInstance("end")).build();
+                        .setStartLocation(Location.newInstance("start")).setEndLocation(Location.newInstance("end")).build();
         VehicleRoute route1 = VehicleRoute.Builder.newInstance(vehicle1, DriverImpl.noDriver()).build();
 
         VehicleImpl vehicle2 = VehicleImpl.Builder.newInstance("v")
-            .setStartLocation(Location.newInstance("start")).setEndLocation(Location.newInstance("end")).build();
+                        .setStartLocation(Location.newInstance("start")).setEndLocation(Location.newInstance("end")).build();
         VehicleRoute route2 = VehicleRoute.Builder.newInstance(vehicle2, DriverImpl.noDriver()).build();
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
@@ -421,14 +413,14 @@ public void whenAddingInitialRoute_locationOfVehicleMustBeMemorized() {
         Location start = TestUtils.loc("start", Coordinate.newInstance(0, 1));
         Location end = Location.newInstance("end");
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v")
-            .setStartLocation(start)
-            .setEndLocation(end).build();
+                        .setStartLocation(start)
+                        .setEndLocation(end).build();
         VehicleRoute route = VehicleRoute.Builder.newInstance(vehicle, DriverImpl.noDriver()).build();
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addInitialVehicleRoute(route);
         VehicleRoutingProblem vrp = vrpBuilder.build();
-        assertThat(vrp.getAllLocations(), hasItem(start));
-        assertThat(vrp.getAllLocations(), hasItem(end));
+        assertThat(vrp.getAllLocations(), CoreMatchers.hasItem(start));
+        assertThat(vrp.getAllLocations(), CoreMatchers.hasItem(end));
     }
 
     @Test
@@ -437,8 +429,8 @@ public void whenAddingJobAndInitialRouteWithThatJobAfterwards_thisJobShouldNotBe
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addJob(service);
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v")
-            .setStartLocation(TestUtils.loc("start", Coordinate.newInstance(0, 1)))
-            .setEndLocation(Location.newInstance("end")).build();
+                        .setStartLocation(TestUtils.loc("start", Coordinate.newInstance(0, 1)))
+                        .setEndLocation(Location.newInstance("end")).build();
         VehicleRoute initialRoute = VehicleRoute.Builder.newInstance(vehicle).addService(service).build();
         vrpBuilder.addInitialVehicleRoute(initialRoute);
         VehicleRoutingProblem vrp = vrpBuilder.build();
@@ -450,7 +442,7 @@ public void whenAddingJobAndInitialRouteWithThatJobAfterwards_thisJobShouldNotBe
     public void whenAddingTwoJobs_theyShouldHaveProperIndeces() {
         Service service = new Service.Builder("myService").setLocation(Location.newInstance("loc")).build();
         Shipment shipment = Shipment.Builder.newInstance("shipment").setPickupLocation(Location.Builder.newInstance().setId("pick").build())
-            .setDeliveryLocation(Location.newInstance("del")).build();
+                        .setDeliveryLocation(Location.newInstance("del")).build();
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addJob(service);
         vrpBuilder.addJob(shipment);
@@ -469,28 +461,28 @@ public void whenAddingTwoServicesWithTheSameId_itShouldThrowException() {
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addJob(service1);
         vrpBuilder.addJob(service2);
-        @SuppressWarnings("UnusedDeclaration") VehicleRoutingProblem vrp = vrpBuilder.build();
+        vrpBuilder.build();
     }
 
     @Test(expected = IllegalArgumentException.class)
     public void whenAddingTwoShipmentsWithTheSameId_itShouldThrowException() {
         Shipment shipment1 = Shipment.Builder.newInstance("shipment").setPickupLocation(Location.Builder.newInstance().setId("pick").build())
-            .setDeliveryLocation(Location.newInstance("del")).build();
+                        .setDeliveryLocation(Location.newInstance("del")).build();
         Shipment shipment2 = Shipment.Builder.newInstance("shipment").setPickupLocation(Location.Builder.newInstance().setId("pick").build())
-            .setDeliveryLocation(Location.newInstance("del")).build();
+                        .setDeliveryLocation(Location.newInstance("del")).build();
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addJob(shipment1);
         vrpBuilder.addJob(shipment2);
-        @SuppressWarnings("UnusedDeclaration") VehicleRoutingProblem vrp = vrpBuilder.build();
+        vrpBuilder.build();
 
     }
 
     @Test
     public void whenAddingTwoVehicles_theyShouldHaveProperIndices() {
         VehicleImpl veh1 = VehicleImpl.Builder.newInstance("v1").setStartLocation(TestUtils.loc("start", Coordinate.newInstance(0, 1)))
-            .setEndLocation(Location.newInstance("end")).build();
+                        .setEndLocation(Location.newInstance("end")).build();
         VehicleImpl veh2 = VehicleImpl.Builder.newInstance("v2").setStartLocation(TestUtils.loc("start", Coordinate.newInstance(0, 1)))
-            .setEndLocation(Location.newInstance("end")).build();
+                        .setEndLocation(Location.newInstance("end")).build();
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addVehicle(veh1);
@@ -505,11 +497,11 @@ public void whenAddingTwoVehicles_theyShouldHaveProperIndices() {
     @Test
     public void whenAddingTwoVehiclesWithSameTypeIdentifier_typeIdentifiersShouldHaveSameIndices() {
         VehicleImpl veh1 = VehicleImpl.Builder.newInstance("v1")
-            .setStartLocation(TestUtils.loc("start", Coordinate.newInstance(0, 1)))
-            .setEndLocation(Location.newInstance("end")).build();
+                        .setStartLocation(TestUtils.loc("start", Coordinate.newInstance(0, 1)))
+                        .setEndLocation(Location.newInstance("end")).build();
         VehicleImpl veh2 = VehicleImpl.Builder.newInstance("v2")
-            .setStartLocation(TestUtils.loc("start", Coordinate.newInstance(0, 1)))
-            .setEndLocation(Location.newInstance("end")).build();
+                        .setStartLocation(TestUtils.loc("start", Coordinate.newInstance(0, 1)))
+                        .setEndLocation(Location.newInstance("end")).build();
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addVehicle(veh1);
@@ -524,11 +516,11 @@ public void whenAddingTwoVehiclesWithSameTypeIdentifier_typeIdentifiersShouldHav
     @Test
     public void whenAddingTwoVehiclesDifferentTypeIdentifier_typeIdentifiersShouldHaveDifferentIndices() {
         VehicleImpl veh1 = VehicleImpl.Builder.newInstance("v1")
-            .setStartLocation(TestUtils.loc("start", Coordinate.newInstance(0, 1)))
-            .setEndLocation(Location.newInstance("end")).build();
+                        .setStartLocation(TestUtils.loc("start", Coordinate.newInstance(0, 1)))
+                        .setEndLocation(Location.newInstance("end")).build();
         VehicleImpl veh2 = VehicleImpl.Builder.newInstance("v2")
-            .setStartLocation(TestUtils.loc("startLoc", Coordinate.newInstance(0, 1)))
-            .setEndLocation(Location.newInstance("end")).build();
+                        .setStartLocation(TestUtils.loc("startLoc", Coordinate.newInstance(0, 1)))
+                        .setEndLocation(Location.newInstance("end")).build();
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addVehicle(veh1);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/LoadConstraintTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/LoadConstraintTest.java
index f4df4646a..7bce56cdb 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/LoadConstraintTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/LoadConstraintTest.java
@@ -18,12 +18,29 @@
 
 package com.graphhopper.jsprit.core.problem.constraint;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+import java.util.Arrays;
+import java.util.Collections;
+
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.problem.CopyJobActivityFactory;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.job.*;
+import com.graphhopper.jsprit.core.problem.job.Delivery;
+import com.graphhopper.jsprit.core.problem.job.Job;
+import com.graphhopper.jsprit.core.problem.job.Pickup;
+import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivity;
@@ -35,16 +52,6 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.CustomJob;
-import org.junit.Assert;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.Arrays;
-import java.util.Collections;
-
-import static org.junit.Assert.*;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
 
 /**
  * unit tests to test load constraints
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/SkillConstraintTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/SkillConstraintTest.java
index 69b0098e2..a072afc88 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/SkillConstraintTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/SkillConstraintTest.java
@@ -18,6 +18,14 @@
 
 package com.graphhopper.jsprit.core.problem.constraint;
 
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
+import java.util.Arrays;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
@@ -27,13 +35,6 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.Arrays;
-
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
 
 
 public class SkillConstraintTest {
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/SoftActivityConstraintManagerTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/SoftActivityConstraintManagerTest.java
index a6d6478db..3200d874a 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/SoftActivityConstraintManagerTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/SoftActivityConstraintManagerTest.java
@@ -17,14 +17,15 @@
  */
 package com.graphhopper.jsprit.core.problem.constraint;
 
-import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-import org.junit.Test;
-
 import static org.junit.Assert.assertEquals;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
+import org.junit.Test;
+
+import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
+
 public class SoftActivityConstraintManagerTest {
 
     @Test
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/SoftRouteConstraintManagerTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/SoftRouteConstraintManagerTest.java
index 0de9ebf2c..66e0ea106 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/SoftRouteConstraintManagerTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/SoftRouteConstraintManagerTest.java
@@ -17,13 +17,14 @@
  */
 package com.graphhopper.jsprit.core.problem.constraint;
 
-import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
-import org.junit.Test;
-
 import static org.junit.Assert.assertEquals;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
+import org.junit.Test;
+
+import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
+
 public class SoftRouteConstraintManagerTest {
 
     @Test
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/TestConstraintManager.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/TestConstraintManager.java
index 7b2c89267..0821deca2 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/TestConstraintManager.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/TestConstraintManager.java
@@ -17,15 +17,16 @@
  */
 package com.graphhopper.jsprit.core.problem.constraint;
 
-import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.solution.route.state.RouteAndActivityStateGetter;
-import org.junit.Test;
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Mockito.mock;
 
 import java.util.ArrayList;
 import java.util.List;
 
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.mock;
+import org.junit.Test;
+
+import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
+import com.graphhopper.jsprit.core.problem.solution.route.state.RouteAndActivityStateGetter;
 
 public class TestConstraintManager {
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTraveledDistanceTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTraveledDistanceTest.java
index 90e5ba742..5dcb0e0bb 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTraveledDistanceTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTraveledDistanceTest.java
@@ -19,6 +19,17 @@
 package com.graphhopper.jsprit.core.problem.constraint;
 
 
+import static org.junit.Assert.assertEquals;
+
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Map;
+
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.state.StateId;
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.distance.ManhattanDistanceCalculator;
@@ -35,14 +46,6 @@
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.util.DefaultCosts;
-import org.junit.Assert;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.Map;
 
 /**
  * Created by schroeder on 18/05/16.
@@ -83,32 +86,32 @@ public void doBefore() {
         d2 = Delivery.Builder.newInstance("d2").setLocation(Location.newInstance(20, 15)).build();
         pickup = Pickup.Builder.newInstance("pickup").setLocation(Location.newInstance(50, 50)).build();
         s1 = Shipment.Builder.newInstance("s1").setPickupLocation(Location.newInstance(35, 30))
-            .setDeliveryLocation(Location.newInstance(20, 25)).build();
+                        .setDeliveryLocation(Location.newInstance(20, 25)).build();
 
         newDelivery = Delivery.Builder.newInstance("new").setLocation(Location.newInstance(-10, 10)).build();
 
         vrp = VehicleRoutingProblem.Builder.newInstance()
-            .setRoutingCost(new DefaultCosts(ManhattanDistanceCalculator.getInstance()))
-            .addVehicle(vehicle).addVehicle(vehicle2)
-            .addJob(d1).addJob(d2).addJob(s1).addJob(pickup).addJob(newDelivery).build();
+                        .setRoutingCost(new DefaultCosts(ManhattanDistanceCalculator.getInstance()))
+                        .addVehicle(vehicle).addVehicle(vehicle2)
+                        .addJob(d1).addJob(d2).addJob(s1).addJob(pickup).addJob(newDelivery).build();
 
         route = VehicleRoute.Builder.newInstance(vehicle).setJobActivityFactory(vrp.getJobActivityFactory())
-            .addDelivery(d1).addDelivery(d2).addPickup(s1).addPickup(pickup).addDelivery(s1).build();
+                        .addDelivery(d1).addDelivery(d2).addPickup(s1).addPickup(pickup).addDelivery(s1).build();
 
         stateManager = new StateManager(vrp);
 
         traveledDistanceId = stateManager.createStateId("traveledDistance");
 
         com.graphhopper.jsprit.core.algorithm.state.VehicleDependentTraveledDistance traveledDistance =
-            new com.graphhopper.jsprit.core.algorithm.state.VehicleDependentTraveledDistance(new TransportDistance() {
-                @Override
-                public double getDistance(Location from, Location to, double departureTime, Vehicle vehicle) {
-                    return new DefaultCosts(ManhattanDistanceCalculator
-                        .getInstance()).getDistance(from,
-                        to, departureTime,
-                        vehicle);
-                }
-            }, stateManager, traveledDistanceId, Arrays.asList(vehicle, vehicle2));
+                        new com.graphhopper.jsprit.core.algorithm.state.VehicleDependentTraveledDistance(new TransportDistance() {
+                            @Override
+                            public double getDistance(Location from, Location to, double departureTime, Vehicle vehicle) {
+                                return new DefaultCosts(ManhattanDistanceCalculator
+                                                .getInstance()).getDistance(from,
+                                                                to, departureTime,
+                                                                vehicle);
+                            }
+                        }, stateManager, traveledDistanceId, Arrays.asList(vehicle, vehicle2));
 
         stateManager.addStateUpdater(traveledDistance);
         stateManager.informInsertionStarts(Arrays.asList(route), Collections.<Job>emptyList());
@@ -123,12 +126,12 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
     @Test
     public void insertNewInVehicleShouldFail() {
         MaxDistanceConstraint maxDistanceConstraint =
-            new MaxDistanceConstraint(stateManager, traveledDistanceId, new TransportDistance() {
-                @Override
-                public double getDistance(Location from, Location to, double departureTime, Vehicle vehicle) {
-                    return vrp.getTransportCosts().getTransportTime(from, to, departureTime, null, vehicle);
-                }
-            }, maxDistanceMap);
+                        new MaxDistanceConstraint(stateManager, traveledDistanceId, new TransportDistance() {
+                            @Override
+                            public double getDistance(Location from, Location to, double departureTime, Vehicle vehicle) {
+                                return vrp.getTransportCosts().getTransportTime(from, to, departureTime, null, vehicle);
+                            }
+                        }, maxDistanceMap);
         JobInsertionContext context = new JobInsertionContext(route, newDelivery, vehicle, null, 0);
         Assert.assertTrue(maxDistanceConstraint.fulfilled(context, route.getStart(), newAct(), act(0), 0).equals(HardActivityConstraint.ConstraintsStatus.NOT_FULFILLED));
         Assert.assertTrue(maxDistanceConstraint.fulfilled(context, act(0), newAct(), act(1), 0).equals(HardActivityConstraint.ConstraintsStatus.NOT_FULFILLED));
@@ -143,12 +146,12 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
     public void insertNewInVehicle2ShouldBeCorrect() {
         //current distance vehicle2: 160 allowed: 200
         MaxDistanceConstraint maxDistanceConstraint =
-            new MaxDistanceConstraint(stateManager, traveledDistanceId, new TransportDistance() {
-                @Override
-                public double getDistance(Location from, Location to, double departureTime, Vehicle vehicle) {
-                    return vrp.getTransportCosts().getTransportTime(from, to, departureTime, null, vehicle);
-                }
-            }, maxDistanceMap);
+                        new MaxDistanceConstraint(stateManager, traveledDistanceId, new TransportDistance() {
+                            @Override
+                            public double getDistance(Location from, Location to, double departureTime, Vehicle vehicle) {
+                                return vrp.getTransportCosts().getTransportTime(from, to, departureTime, null, vehicle);
+                            }
+                        }, maxDistanceMap);
         JobInsertionContext context = new JobInsertionContext(route, newDelivery, vehicle2, null, 0);
         Assert.assertTrue(maxDistanceConstraint.fulfilled(context, route.getStart(), newAct(), act(0), 0).equals(HardActivityConstraint.ConstraintsStatus.FULFILLED));
         //additional distance: 20+35-15=40
@@ -173,21 +176,21 @@ private TourActivity newAct() {
 
     @Test
     public void traveledDistanceShouldBeCorrect() {
-        Assert.assertEquals(20d, stateManager.getActivityState(route.getActivities().get(0), vehicle, traveledDistanceId, Double.class), 0.01);
-        Assert.assertEquals(35d, stateManager.getActivityState(route.getActivities().get(1), vehicle, traveledDistanceId, Double.class), 0.01);
-        Assert.assertEquals(65d, stateManager.getActivityState(route.getActivities().get(2), vehicle, traveledDistanceId, Double.class), 0.01);
-        Assert.assertEquals(100d, stateManager.getActivityState(route.getActivities().get(3), vehicle, traveledDistanceId, Double.class), 0.01);
-        Assert.assertEquals(155d, stateManager.getActivityState(route.getActivities().get(4), vehicle, traveledDistanceId, Double.class), 0.01);
+        assertEquals(20d, stateManager.getActivityState(route.getActivities().get(0), vehicle, traveledDistanceId, Double.class), 0.01);
+        assertEquals(35d, stateManager.getActivityState(route.getActivities().get(1), vehicle, traveledDistanceId, Double.class), 0.01);
+        assertEquals(65d, stateManager.getActivityState(route.getActivities().get(2), vehicle, traveledDistanceId, Double.class), 0.01);
+        assertEquals(100d, stateManager.getActivityState(route.getActivities().get(3), vehicle, traveledDistanceId, Double.class), 0.01);
+        assertEquals(155d, stateManager.getActivityState(route.getActivities().get(4), vehicle, traveledDistanceId, Double.class), 0.01);
 
     }
 
     @Test
     public void traveledDistanceWithVehicle2ShouldBeCorrect() {
-        Assert.assertEquals(0d, stateManager.getActivityState(route.getActivities().get(0), vehicle2, traveledDistanceId, Double.class), 0.01);
-        Assert.assertEquals(15d, stateManager.getActivityState(route.getActivities().get(1), vehicle2, traveledDistanceId, Double.class), 0.01);
-        Assert.assertEquals(45d, stateManager.getActivityState(route.getActivities().get(2), vehicle2, traveledDistanceId, Double.class), 0.01);
-        Assert.assertEquals(80d, stateManager.getActivityState(route.getActivities().get(3), vehicle2, traveledDistanceId, Double.class), 0.01);
-        Assert.assertEquals(135d, stateManager.getActivityState(route.getActivities().get(4), vehicle2, traveledDistanceId, Double.class), 0.01);
+        assertEquals(0d, stateManager.getActivityState(route.getActivities().get(0), vehicle2, traveledDistanceId, Double.class), 0.01);
+        assertEquals(15d, stateManager.getActivityState(route.getActivities().get(1), vehicle2, traveledDistanceId, Double.class), 0.01);
+        assertEquals(45d, stateManager.getActivityState(route.getActivities().get(2), vehicle2, traveledDistanceId, Double.class), 0.01);
+        assertEquals(80d, stateManager.getActivityState(route.getActivities().get(3), vehicle2, traveledDistanceId, Double.class), 0.01);
+        assertEquals(135d, stateManager.getActivityState(route.getActivities().get(4), vehicle2, traveledDistanceId, Double.class), 0.01);
 
     }
 
@@ -195,49 +198,49 @@ public void traveledDistanceWithVehicle2ShouldBeCorrect() {
     public void distanceOfShipmentInRoute() {
         double traveledDistanceBeforePickup = stateManager.getActivityState(route.getActivities().get(2), vehicle, traveledDistanceId, Double.class);
         double traveledDistanceBeforeDelivery = stateManager.getActivityState(route.getActivities().get(4), vehicle, traveledDistanceId, Double.class);
-        Assert.assertEquals(90d, traveledDistanceBeforeDelivery - traveledDistanceBeforePickup, 0.01);
+        assertEquals(90d, traveledDistanceBeforeDelivery - traveledDistanceBeforePickup, 0.01);
     }
 
     @Test
     public void distanceOfShipmentInRouteVehicle2() {
         double traveledDistanceBeforePickup = stateManager.getActivityState(route.getActivities().get(2), vehicle2, traveledDistanceId, Double.class);
         double traveledDistanceBeforeDelivery = stateManager.getActivityState(route.getActivities().get(4), vehicle2, traveledDistanceId, Double.class);
-        Assert.assertEquals(90d, traveledDistanceBeforeDelivery - traveledDistanceBeforePickup, 0.01);
+        assertEquals(90d, traveledDistanceBeforeDelivery - traveledDistanceBeforePickup, 0.01);
     }
 
     @Test
     public void distanceOfPickupInRoute() {
         double traveledDistanceBeforePickup = stateManager.getActivityState(route.getActivities().get(3), vehicle, traveledDistanceId, Double.class);
         double total = stateManager.getRouteState(route, vehicle, traveledDistanceId, Double.class);
-        Assert.assertEquals(100d, total - traveledDistanceBeforePickup, 0.01);
+        assertEquals(100d, total - traveledDistanceBeforePickup, 0.01);
     }
 
     @Test
     public void distanceOfPickupInRouteVehicle2() {
         double traveledDistanceBeforePickup = stateManager.getActivityState(route.getActivities().get(3), vehicle2, traveledDistanceId, Double.class);
         double total = stateManager.getRouteState(route, vehicle2, traveledDistanceId, Double.class);
-        Assert.assertEquals(80d, total - traveledDistanceBeforePickup, 0.01);
+        assertEquals(80d, total - traveledDistanceBeforePickup, 0.01);
     }
 
     @Test
     public void distanceToTravelShouldBeCorrect() {
         double total = stateManager.getRouteState(route, vehicle, traveledDistanceId, Double.class);
-        Assert.assertEquals(180d, total - stateManager.getActivityState(route.getActivities().get(0), vehicle, traveledDistanceId, Double.class), 0.01);
-        Assert.assertEquals(165d, total - stateManager.getActivityState(route.getActivities().get(1), vehicle, traveledDistanceId, Double.class), 0.01);
-        Assert.assertEquals(135d, total - stateManager.getActivityState(route.getActivities().get(2), vehicle, traveledDistanceId, Double.class), 0.01);
-        Assert.assertEquals(100d, total - stateManager.getActivityState(route.getActivities().get(3), vehicle, traveledDistanceId, Double.class), 0.01);
-        Assert.assertEquals(45d, total - stateManager.getActivityState(route.getActivities().get(4), vehicle, traveledDistanceId, Double.class), 0.01);
+        assertEquals(180d, total - stateManager.getActivityState(route.getActivities().get(0), vehicle, traveledDistanceId, Double.class), 0.01);
+        assertEquals(165d, total - stateManager.getActivityState(route.getActivities().get(1), vehicle, traveledDistanceId, Double.class), 0.01);
+        assertEquals(135d, total - stateManager.getActivityState(route.getActivities().get(2), vehicle, traveledDistanceId, Double.class), 0.01);
+        assertEquals(100d, total - stateManager.getActivityState(route.getActivities().get(3), vehicle, traveledDistanceId, Double.class), 0.01);
+        assertEquals(45d, total - stateManager.getActivityState(route.getActivities().get(4), vehicle, traveledDistanceId, Double.class), 0.01);
 
     }
 
     @Test
     public void distanceToTravelShouldBeCorrectVehicle2() {
         double total = stateManager.getRouteState(route, vehicle2, traveledDistanceId, Double.class);
-        Assert.assertEquals(160d, total - stateManager.getActivityState(route.getActivities().get(0), vehicle2, traveledDistanceId, Double.class), 0.01);
-        Assert.assertEquals(145d, total - stateManager.getActivityState(route.getActivities().get(1), vehicle2, traveledDistanceId, Double.class), 0.01);
-        Assert.assertEquals(115d, total - stateManager.getActivityState(route.getActivities().get(2), vehicle2, traveledDistanceId, Double.class), 0.01);
-        Assert.assertEquals(80d, total - stateManager.getActivityState(route.getActivities().get(3), vehicle2, traveledDistanceId, Double.class), 0.01);
-        Assert.assertEquals(25d, total - stateManager.getActivityState(route.getActivities().get(4), vehicle2, traveledDistanceId, Double.class), 0.01);
+        assertEquals(160d, total - stateManager.getActivityState(route.getActivities().get(0), vehicle2, traveledDistanceId, Double.class), 0.01);
+        assertEquals(145d, total - stateManager.getActivityState(route.getActivities().get(1), vehicle2, traveledDistanceId, Double.class), 0.01);
+        assertEquals(115d, total - stateManager.getActivityState(route.getActivities().get(2), vehicle2, traveledDistanceId, Double.class), 0.01);
+        assertEquals(80d, total - stateManager.getActivityState(route.getActivities().get(3), vehicle2, traveledDistanceId, Double.class), 0.01);
+        assertEquals(25d, total - stateManager.getActivityState(route.getActivities().get(4), vehicle2, traveledDistanceId, Double.class), 0.01);
 
     }
 }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/CustomJobTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/CustomJobTest.java
index 9044c1b92..9cf240fa5 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/CustomJobTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/CustomJobTest.java
@@ -18,17 +18,19 @@
 
 package com.graphhopper.jsprit.core.problem.job;
 
-import com.graphhopper.jsprit.core.problem.SizeDimension;
-import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivity;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
-import org.junit.Assert;
-import org.junit.Test;
+import static org.junit.Assert.assertEquals;
 
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
 
+import org.junit.Test;
+
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
+
 /**
  * Created by schroeder on 16/11/16.
  */
@@ -37,7 +39,7 @@
     static class CustomJob extends AbstractJob {
 
         public static abstract class BuilderBase<T extends CustomJob, B extends CustomJob.BuilderBase<T, B>>
-            extends JobBuilder<T, B> {
+        extends JobBuilder<T, B> {
 
             List<Location> locs = new ArrayList<>();
 
@@ -61,6 +63,7 @@ public BuilderBase(String id) {
                 return cap;
             }
 
+            @Override
             protected void validate() {
 
             }
@@ -113,11 +116,11 @@ protected void createActivities(JobBuilder<? extends AbstractJob, ?> jobBuilder)
     @Test
     public void whenCreatingANewJobWithThreeDistinctActivities_jobShouldContainActivities() {
         CustomJob cj = CustomJob.Builder.newInstance("job")
-            .addPickup(Location.newInstance(10, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).build())
-            .addPickup(Location.newInstance(5, 0), SizeDimension.Builder.newInstance().addDimension(0, 2).build())
-            .addPickup(Location.newInstance(20, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).build())
-            .build();
-        Assert.assertEquals(3, cj.getActivityList().size());
+                        .addPickup(Location.newInstance(10, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).build())
+                        .addPickup(Location.newInstance(5, 0), SizeDimension.Builder.newInstance().addDimension(0, 2).build())
+                        .addPickup(Location.newInstance(20, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).build())
+                        .build();
+        assertEquals(3, cj.getActivityList().size());
 
     }
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/DeliveryTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/DeliveryTest.java
index 304b5b6fb..bcd39cbfd 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/DeliveryTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/DeliveryTest.java
@@ -21,7 +21,6 @@
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 
-import org.junit.Assert;
 import org.junit.Test;
 
 import com.graphhopper.jsprit.core.problem.Location;
@@ -40,9 +39,10 @@ public void whenAddingTwoCapDimension_nuOfDimsShouldBeTwo() {
                         .addSizeDimension(0, 2)
                         .addSizeDimension(1, 4)
                         .build();
-        assertEquals(2, one.getSize().getNuOfDimensions());
-        assertEquals(2, one.getSize().get(0));
-        assertEquals(4, one.getSize().get(1));
+        SizeDimension size = one.getActivity().getLoadChange();
+        assertEquals(2, size.getNuOfDimensions());
+        assertEquals(2, size.get(0));
+        assertEquals(4, size.get(1));
 
     }
 
@@ -52,7 +52,8 @@ public void sizeAtStartAndEndShouldBeCorrect() {
                         .addSizeDimension(0, 2)
                         .addSizeDimension(1, 4)
                         .build();
-        assertEquals(one.getSize(), one.getSizeAtStart());
+        SizeDimension size = one.getActivity().getLoadChange();
+        assertEquals(size, one.getSizeAtStart());
         assertEquals(SizeDimension.Builder.newInstance().addDimension(0, 0).addDimension(1, 0)
                         .build(), one.getSizeAtEnd());
     }
@@ -61,16 +62,18 @@ public void sizeAtStartAndEndShouldBeCorrect() {
     public void whenPickupIsBuiltWithoutSpecifyingCapacity_itShouldHvCapWithOneDimAndDimValOfZero() {
         Delivery one = new Delivery.Builder("s").setLocation(Location.newInstance("foofoo"))
                         .build();
-        assertEquals(1, one.getSize().getNuOfDimensions());
-        assertEquals(0, one.getSize().get(0));
+        SizeDimension size = one.getActivity().getLoadChange();
+        assertEquals(1, size.getNuOfDimensions());
+        assertEquals(0, size.get(0));
     }
 
     @Test
     public void whenPickupIsBuiltWithConstructorWhereSizeIsSpecified_capacityShouldBeSetCorrectly() {
         Delivery one = new Delivery.Builder("s").addSizeDimension(0, 1).setLocation(Location.newInstance("foofoo"))
                         .build();
-        assertEquals(1, one.getSize().getNuOfDimensions());
-        assertEquals(1, one.getSize().get(0));
+        SizeDimension size = one.getActivity().getLoadChange();
+        assertEquals(1, size.getNuOfDimensions());
+        assertEquals(1, size.get(0));
     }
 
     @Test
@@ -108,14 +111,14 @@ public void nameShouldBeAssigned() {
     public void whenSettingPriorities_itShouldBeSetCorrectly() {
         Delivery s = new Delivery.Builder("s").setLocation(Location.newInstance("loc"))
                         .setPriority(3).build();
-        Assert.assertEquals(3, s.getPriority());
+        assertEquals(3, s.getPriority());
     }
 
     @Test
     public void whenNotSettingPriorities_defaultShouldBe() {
         Delivery s = new Delivery.Builder("s").setLocation(Location.newInstance("loc"))
                         .build();
-        Assert.assertEquals(2, s.getPriority());
+        assertEquals(2, s.getPriority());
     }
 
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/GraphJobActivityListTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/GraphJobActivityListTest.java
index f34420628..f9a802466 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/GraphJobActivityListTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/GraphJobActivityListTest.java
@@ -1,17 +1,18 @@
 package com.graphhopper.jsprit.core.problem.job;
 
-import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.ServiceActivity;
-import org.junit.Before;
-import org.junit.Test;
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
 
 import java.util.Arrays;
 import java.util.HashSet;
 import java.util.Set;
 
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
+import org.junit.Before;
+import org.junit.Test;
+
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.ServiceActivity;
 
 public class GraphJobActivityListTest {
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/PickupTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/PickupTest.java
index 9ad101dbc..09524bc55 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/PickupTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/PickupTest.java
@@ -17,12 +17,14 @@
  */
 package com.graphhopper.jsprit.core.problem.job;
 
-import com.graphhopper.jsprit.core.problem.SizeDimension;
-import com.graphhopper.jsprit.core.problem.Location;
-import org.junit.Assert;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
 import org.junit.Test;
 
-import static org.junit.Assert.*;
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 
 public class PickupTest {
 
@@ -34,45 +36,48 @@ public void whenNeitherLocationIdNorCoordIsSet_itThrowsException() {
     @Test
     public void whenAddingTwoCapDimension_nuOfDimsShouldBeTwo() {
         Pickup one = new Pickup.Builder("s").setLocation(Location.newInstance("foofoo"))
-            .addSizeDimension(0, 2)
-            .addSizeDimension(1, 4)
-            .build();
-        assertEquals(2, one.getSize().getNuOfDimensions());
-        assertEquals(2, one.getSize().get(0));
-        assertEquals(4, one.getSize().get(1));
+                        .addSizeDimension(0, 2)
+                        .addSizeDimension(1, 4)
+                        .build();
+        SizeDimension size = one.getActivity().getLoadChange();
+        assertEquals(2, size.getNuOfDimensions());
+        assertEquals(2, size.get(0));
+        assertEquals(4, size.get(1));
 
     }
 
     @Test
     public void sizeAtStartAndEndShouldBeCorrect() {
         Pickup one = new Pickup.Builder("s").setLocation(Location.newInstance("foofoo"))
-            .addSizeDimension(0, 2)
-            .addSizeDimension(1, 4)
-            .build();
-        assertTrue(one.getSizeAtEnd().equals(one.getSize()));
+                        .addSizeDimension(0, 2)
+                        .addSizeDimension(1, 4)
+                        .build();
+        assertTrue(one.getSizeAtEnd().equals(one.getActivity().getLoadChange()));
         assertTrue(one.getSizeAtStart().equals(SizeDimension.Builder.newInstance().addDimension(0, 0).addDimension(1, 0).build()));
     }
 
     @Test
     public void whenPickupIsBuiltWithoutSpecifyingCapacity_itShouldHvCapWithOneDimAndDimValOfZero() {
         Pickup one = new Pickup.Builder("s").setLocation(Location.newInstance("foofoo"))
-            .build();
-        assertEquals(1, one.getSize().getNuOfDimensions());
-        assertEquals(0, one.getSize().get(0));
+                        .build();
+        SizeDimension size = one.getActivity().getLoadChange();
+        assertEquals(1, size.getNuOfDimensions());
+        assertEquals(0, size.get(0));
     }
 
     @Test
     public void whenPickupIsBuiltWithConstructorWhereSizeIsSpecified_capacityShouldBeSetCorrectly() {
         Pickup one = new Pickup.Builder("s").addSizeDimension(0, 1).setLocation(Location.newInstance("foofoo"))
-            .build();
-        assertEquals(1, one.getSize().getNuOfDimensions());
-        assertEquals(1, one.getSize().get(0));
+                        .build();
+        SizeDimension size = one.getActivity().getLoadChange();
+        assertEquals(1, size.getNuOfDimensions());
+        assertEquals(1, size.get(0));
     }
 
     @Test
     public void whenAddingSkills_theyShouldBeAddedCorrectly() {
         Pickup s = new Pickup.Builder("s").setLocation(Location.newInstance("loc"))
-            .addRequiredSkill("drill").addRequiredSkill("screwdriver").build();
+                        .addRequiredSkill("drill").addRequiredSkill("screwdriver").build();
         assertTrue(s.getRequiredSkills().containsSkill("drill"));
         assertTrue(s.getRequiredSkills().containsSkill("drill"));
         assertTrue(s.getRequiredSkills().containsSkill("ScrewDriver"));
@@ -81,7 +86,7 @@ public void whenAddingSkills_theyShouldBeAddedCorrectly() {
     @Test
     public void whenAddingSkillsCaseSens_theyShouldBeAddedCorrectly() {
         Pickup s = new Pickup.Builder("s").setLocation(Location.newInstance("loc"))
-            .addRequiredSkill("DriLl").addRequiredSkill("screwDriver").build();
+                        .addRequiredSkill("DriLl").addRequiredSkill("screwDriver").build();
         assertTrue(s.getRequiredSkills().containsSkill("drill"));
         assertTrue(s.getRequiredSkills().containsSkill("drilL"));
     }
@@ -89,7 +94,7 @@ public void whenAddingSkillsCaseSens_theyShouldBeAddedCorrectly() {
     @Test
     public void whenAddingSkillsCaseSensV2_theyShouldBeAddedCorrectly() {
         Pickup s = new Pickup.Builder("s").setLocation(Location.newInstance("loc"))
-            .addRequiredSkill("screwDriver").build();
+                        .addRequiredSkill("screwDriver").build();
         assertFalse(s.getRequiredSkills().containsSkill("drill"));
         assertFalse(s.getRequiredSkills().containsSkill("drilL"));
     }
@@ -97,7 +102,7 @@ public void whenAddingSkillsCaseSensV2_theyShouldBeAddedCorrectly() {
     @Test
     public void nameShouldBeAssigned() {
         Pickup s = new Pickup.Builder("s").setLocation(Location.newInstance("loc"))
-            .setName("name").build();
+                        .setName("name").build();
         assertEquals("name", s.getName());
     }
 
@@ -105,15 +110,15 @@ public void nameShouldBeAssigned() {
     @Test
     public void whenSettingPriorities_itShouldBeSetCorrectly() {
         Pickup s = new Pickup.Builder("s").setLocation(Location.newInstance("loc"))
-            .setPriority(3).build();
-        Assert.assertEquals(3, s.getPriority());
+                        .setPriority(3).build();
+        assertEquals(3, s.getPriority());
     }
 
     @Test
     public void whenNotSettingPriorities_defaultShouldBe() {
         Pickup s = new Pickup.Builder("s").setLocation(Location.newInstance("loc"))
-            .build();
-        Assert.assertEquals(2, s.getPriority());
+                        .build();
+        assertEquals(2, s.getPriority());
     }
 
 }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ServiceTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ServiceTest.java
index abba74d0c..723902fed 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ServiceTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ServiceTest.java
@@ -28,7 +28,6 @@
 import java.util.HashSet;
 import java.util.Set;
 
-import org.junit.Assert;
 import org.junit.Test;
 
 import com.graphhopper.jsprit.core.problem.Location;
@@ -76,7 +75,7 @@ public void whenAddingTwoCapDimension_nuOfDimsShouldBeTwo() {
                         .addSizeDimension(0, 2)
                         .addSizeDimension(1, 4)
                         .build();
-        assertEquals(2, one.getSize().getNuOfDimensions());
+        assertEquals(2, one.getActivity().getLoadChange().getNuOfDimensions());
     }
 
     @Test
@@ -85,7 +84,7 @@ public void sizeAtStartAndEndShouldBeCorrect() {
                         .addSizeDimension(0, 2)
                         .addSizeDimension(1, 4)
                         .build();
-        assertTrue(one.getSizeAtEnd().equals(one.getSize()));
+        assertTrue(one.getSizeAtEnd().equals(one.getActivity().getLoadChange()));
         assertTrue(one.getSizeAtStart().equals(SizeDimension.Builder.newInstance().addDimension(0, 0).addDimension(1, 0).build()));
     }
 
@@ -93,16 +92,16 @@ public void sizeAtStartAndEndShouldBeCorrect() {
     public void whenShipmentIsBuiltWithoutSpecifyingCapacity_itShouldHvCapWithOneDimAndDimValOfZero() {
         Service one = new Service.Builder("s").setLocation(Location.newInstance("foofoo"))
                         .build();
-        assertEquals(1, one.getSize().getNuOfDimensions());
-        assertEquals(0, one.getSize().get(0));
+        assertEquals(1, one.getActivity().getLoadChange().getNuOfDimensions());
+        assertEquals(0, one.getActivity().getLoadChange().get(0));
     }
 
     @Test
     public void whenShipmentIsBuiltWithConstructorWhereSizeIsSpecified_capacityShouldBeSetCorrectly() {
         Service one = new Service.Builder("s").addSizeDimension(0, 1).setLocation(Location.newInstance("foofoo"))
                         .build();
-        assertEquals(1, one.getSize().getNuOfDimensions());
-        assertEquals(1, one.getSize().get(0));
+        assertEquals(1, one.getActivity().getLoadChange().getNuOfDimensions());
+        assertEquals(1, one.getActivity().getLoadChange().get(0));
     }
 
     @Test
@@ -120,25 +119,25 @@ public void whenSettingNoType_itShouldReturn_service() {
     @Test
     public void whenSettingLocation_itShouldBeSetCorrectly() {
         Service s = new Service.Builder("s").setLocation(Location.newInstance("loc")).build();
-        assertEquals("loc", s.getLocation().getId());
-        assertEquals("loc", s.getLocation().getId());
+        assertEquals("loc", s.getActivity().getLocation().getId());
+        assertEquals("loc", s.getActivity().getLocation().getId());
     }
 
     @Test
     public void whenSettingLocation_itShouldWork() {
         Service s = new Service.Builder("s").setLocation(Location.Builder.newInstance().setId("loc").build()).build();
-        assertEquals("loc", s.getLocation().getId());
-        assertEquals("loc", s.getLocation().getId());
+        assertEquals("loc", s.getActivity().getLocation().getId());
+        assertEquals("loc", s.getActivity().getLocation().getId());
     }
 
 
     @Test
     public void whenSettingLocationCoord_itShouldBeSetCorrectly() {
         Service s = new Service.Builder("s").setLocation(Location.newInstance(1, 2)).build();
-        assertEquals(1.0, s.getLocation().getCoordinate().getX(), 0.01);
-        assertEquals(2.0, s.getLocation().getCoordinate().getY(), 0.01);
-        assertEquals(1.0, s.getLocation().getCoordinate().getX(), 0.01);
-        assertEquals(2.0, s.getLocation().getCoordinate().getY(), 0.01);
+        assertEquals(1.0, s.getActivity().getLocation().getCoordinate().getX(), 0.01);
+        assertEquals(2.0, s.getActivity().getLocation().getCoordinate().getY(), 0.01);
+        assertEquals(1.0, s.getActivity().getLocation().getCoordinate().getX(), 0.01);
+        assertEquals(2.0, s.getActivity().getLocation().getCoordinate().getY(), 0.01);
     }
 
     @Test(expected = IllegalArgumentException.class)
@@ -156,7 +155,7 @@ public void whenServiceTimeSmallerZero_throwIllegalStateException() {
     @Test
     public void whenSettingServiceTime_itShouldBeSetCorrectly() {
         Service s = new Service.Builder("s").setLocation(Location.newInstance("loc")).setServiceTime(1).build();
-        assertEquals(1.0, s.getServiceDuration(), 0.01);
+        assertEquals(1.0, s.getActivity().getOperationTime(), 0.01);
     }
 
     @Test(expected = IllegalArgumentException.class)
@@ -168,8 +167,8 @@ public void whenTimeWindowIsNull_throwException() {
     @Test
     public void whenSettingTimeWindow_itShouldBeSetCorrectly() {
         Service s = new Service.Builder("s").setLocation(Location.newInstance("loc")).setTimeWindow(TimeWindow.newInstance(1.0, 2.0)).build();
-        assertEquals(1.0, s.getTimeWindow().getStart(), 0.01);
-        assertEquals(2.0, s.getTimeWindow().getEnd(), 0.01);
+        assertEquals(1.0, s.getActivity().getSingleTimeWindow().getStart(), 0.01);
+        assertEquals(2.0, s.getActivity().getSingleTimeWindow().getEnd(), 0.01);
     }
 
     @Test
@@ -197,17 +196,17 @@ public void whenAddingSeveralTimeWindows_itShouldBeSetCorrectly() {
                         .addTimeWindow(tw1)
                         .addTimeWindow(tw2)
                         .build();
-        assertEquals(2, s.getTimeWindows().size());
-        assertThat(s.getTimeWindows(), hasItem(is(tw1)));
-        assertThat(s.getTimeWindows(), hasItem(is(tw2)));
+        assertEquals(2, s.getActivity().getTimeWindows().size());
+        assertThat(s.getActivity().getTimeWindows(), hasItem(is(tw1)));
+        assertThat(s.getActivity().getTimeWindows(), hasItem(is(tw2)));
     }
 
     @Test
     public void whenAddingTimeWindow_itShouldBeSetCorrectly() {
         Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
                         .addTimeWindow(TimeWindow.newInstance(1.0, 2.0)).build();
-        assertEquals(1.0, s.getTimeWindow().getStart(), 0.01);
-        assertEquals(2.0, s.getTimeWindow().getEnd(), 0.01);
+        assertEquals(1.0, s.getActivity().getSingleTimeWindow().getStart(), 0.01);
+        assertEquals(2.0, s.getActivity().getSingleTimeWindow().getEnd(), 0.01);
     }
 
 
@@ -231,57 +230,57 @@ public void shouldKnowMultipleTimeWindows() {
         Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
                         .addTimeWindow(TimeWindow.newInstance(0., 10.)).addTimeWindow(TimeWindow.newInstance(20., 30.))
                         .setName("name").build();
-        assertEquals(2, s.getTimeWindows().size());
+        assertEquals(2, s.getActivity().getTimeWindows().size());
     }
 
     @Test(expected = IllegalArgumentException.class)
     public void whenMultipleTWOverlap_throwEx() {
-        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
-                        .addTimeWindow(TimeWindow.newInstance(0., 10.))
-                        .addTimeWindow(TimeWindow.newInstance(5., 30.))
-                        .setName("name").build();
+        new Service.Builder("s").setLocation(Location.newInstance("loc"))
+        .addTimeWindow(TimeWindow.newInstance(0., 10.))
+        .addTimeWindow(TimeWindow.newInstance(5., 30.))
+        .setName("name").build();
     }
 
     @Test(expected = IllegalArgumentException.class)
     public void whenMultipleTWOverlap2_throwEx() {
-        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
-                        .addTimeWindow(TimeWindow.newInstance(20., 30.))
-                        .addTimeWindow(TimeWindow.newInstance(0., 25.))
-                        .setName("name").build();
+        new Service.Builder("s").setLocation(Location.newInstance("loc"))
+        .addTimeWindow(TimeWindow.newInstance(20., 30.))
+        .addTimeWindow(TimeWindow.newInstance(0., 25.))
+        .setName("name").build();
     }
 
     @Test
     public void whenSettingPriorities_itShouldBeSetCorrectly() {
         Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
                         .setPriority(1).build();
-        Assert.assertEquals(1, s.getPriority());
+        assertEquals(1, s.getPriority());
     }
 
     @Test
     public void whenSettingPriorities_itShouldBeSetCorrectly2() {
         Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
                         .setPriority(3).build();
-        Assert.assertEquals(3, s.getPriority());
+        assertEquals(3, s.getPriority());
     }
 
     @Test
     public void whenNotSettingPriorities_defaultShouldBe2() {
         Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
                         .build();
-        Assert.assertEquals(2, s.getPriority());
+        assertEquals(2, s.getPriority());
     }
 
     @Test(expected = IllegalArgumentException.class)
     public void whenSettingIncorrectPriorities_itShouldThrowException() {
-        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
-                        .setPriority(30).build();
+        new Service.Builder("s").setLocation(Location.newInstance("loc"))
+        .setPriority(30).build();
 
     }
 
     @Test(expected = IllegalArgumentException.class)
     public void whenSettingIncorrectPriorities_itShouldThrowException2() {
-        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
-                        .setPriority(0).build();
+        new Service.Builder("s").setLocation(Location.newInstance("loc"))
+        .setPriority(0).build();
 
     }
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ShipmentTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ShipmentTest.java
index cec75f98c..8950e60af 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ShipmentTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ShipmentTest.java
@@ -17,26 +17,30 @@
  */
 package com.graphhopper.jsprit.core.problem.job;
 
-import com.graphhopper.jsprit.core.problem.SizeDimension;
+import static org.hamcrest.core.Is.is;
+import static org.hamcrest.core.IsCollectionContaining.hasItem;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertThat;
+import static org.junit.Assert.assertTrue;
+
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.util.Coordinate;
 import com.graphhopper.jsprit.core.util.TestUtils;
-import org.junit.Assert;
-import org.junit.Test;
-
-import static org.hamcrest.core.Is.is;
-import static org.hamcrest.core.IsCollectionContaining.hasItem;
-import static org.junit.Assert.*;
 
 public class ShipmentTest {
 
     @Test
     public void whenTwoShipmentsHaveTheSameId_theyReferencesShouldBeUnEqual() {
         Shipment one = Shipment.Builder.newInstance("s").addSizeDimension(0, 10).setPickupLocation(Location.Builder.newInstance().setId("foo").build()).
-            setDeliveryLocation(TestUtils.loc("foofoo")).setPickupServiceTime(10).setDeliveryServiceTime(20).build();
+                        setDeliveryLocation(TestUtils.loc("foofoo")).setPickupServiceTime(10).setDeliveryServiceTime(20).build();
         Shipment two = Shipment.Builder.newInstance("s").addSizeDimension(0, 10).setPickupLocation(Location.Builder.newInstance().setId("foo").build()).
-            setDeliveryLocation(TestUtils.loc("foofoo")).setPickupServiceTime(10).setDeliveryServiceTime(20).build();
+                        setDeliveryLocation(TestUtils.loc("foofoo")).setPickupServiceTime(10).setDeliveryServiceTime(20).build();
 
         assertTrue(one != two);
     }
@@ -44,7 +48,7 @@ public void whenTwoShipmentsHaveTheSameId_theyReferencesShouldBeUnEqual() {
     @Test
     public void sizeAtStartAndEndShouldBeCorrect() {
         Shipment one = Shipment.Builder.newInstance("s").addSizeDimension(0, 10).addSizeDimension(1, 5).setPickupLocation(Location.Builder.newInstance().setId("foo").build()).
-            setDeliveryLocation(TestUtils.loc("foofoo")).setPickupServiceTime(10).setDeliveryServiceTime(20).build();
+                        setDeliveryLocation(TestUtils.loc("foofoo")).setPickupServiceTime(10).setDeliveryServiceTime(20).build();
         SizeDimension cap = SizeDimension.Builder.newInstance().addDimension(0, 0).addDimension(1, 0).build();
         assertTrue(one.getSizeAtStart().equals(cap));
         assertTrue(one.getSizeAtEnd().equals(cap));
@@ -53,9 +57,9 @@ public void sizeAtStartAndEndShouldBeCorrect() {
     @Test
     public void whenTwoShipmentsHaveTheSameId_theyShouldBeEqual() {
         Shipment one = Shipment.Builder.newInstance("s").addSizeDimension(0, 10).setPickupLocation(Location.Builder.newInstance().setId("foo").build()).
-            setDeliveryLocation(TestUtils.loc("foofoo")).setPickupServiceTime(10).setDeliveryServiceTime(20).build();
+                        setDeliveryLocation(TestUtils.loc("foofoo")).setPickupServiceTime(10).setDeliveryServiceTime(20).build();
         Shipment two = Shipment.Builder.newInstance("s").addSizeDimension(0, 10).setPickupLocation(Location.Builder.newInstance().setId("foo").build()).
-            setDeliveryLocation(TestUtils.loc("foofoo")).setPickupServiceTime(10).setDeliveryServiceTime(20).build();
+                        setDeliveryLocation(TestUtils.loc("foofoo")).setPickupServiceTime(10).setDeliveryServiceTime(20).build();
 
         assertTrue(one.equals(two));
     }
@@ -63,7 +67,7 @@ public void whenTwoShipmentsHaveTheSameId_theyShouldBeEqual() {
     @Test
     public void whenShipmentIsInstantiatedWithASizeOf10_theSizeShouldBe10() {
         Shipment one = Shipment.Builder.newInstance("s").addSizeDimension(0, 10).setPickupLocation(Location.Builder.newInstance().setId("foo").build()).
-            setDeliveryLocation(TestUtils.loc("foofoo")).setPickupServiceTime(10).setDeliveryServiceTime(20).build();
+                        setDeliveryLocation(TestUtils.loc("foofoo")).setPickupServiceTime(10).setDeliveryServiceTime(20).build();
         assertEquals(10, one.getSize().get(0));
     }
 
@@ -71,24 +75,24 @@ public void whenShipmentIsInstantiatedWithASizeOf10_theSizeShouldBe10() {
     public void whenShipmentIsBuiltWithNegativeDemand_itShouldThrowException() {
         @SuppressWarnings("unused")
         Shipment one = Shipment.Builder.newInstance("s").addSizeDimension(0, -10)
-            .setPickupLocation(Location.Builder.newInstance().setId("foo").build())
-            .setDeliveryLocation(TestUtils.loc("foofoo")).build();
+        .setPickupLocation(Location.Builder.newInstance().setId("foo").build())
+        .setDeliveryLocation(TestUtils.loc("foofoo")).build();
     }
 
     @Test(expected = IllegalArgumentException.class)
     public void whenShipmentIsBuiltWithNegativeDemand_itShouldThrowException_v2() {
         @SuppressWarnings("unused")
         Shipment one = Shipment.Builder.newInstance("s").addSizeDimension(0, -10)
-            .setPickupLocation(Location.Builder.newInstance().setId("foo").build())
-            .setDeliveryLocation(TestUtils.loc("foofoo")).build();
+        .setPickupLocation(Location.Builder.newInstance().setId("foo").build())
+        .setDeliveryLocation(TestUtils.loc("foofoo")).build();
     }
 
     @Test(expected = IllegalArgumentException.class)
     public void whenIdIsNull_itShouldThrowException() {
         @SuppressWarnings("unused")
         Shipment one = Shipment.Builder.newInstance(null).addSizeDimension(0, 10)
-            .setPickupLocation(Location.Builder.newInstance().setId("foo").build())
-            .setDeliveryLocation(TestUtils.loc("foofoo")).build();
+        .setPickupLocation(Location.Builder.newInstance().setId("foo").build())
+        .setDeliveryLocation(TestUtils.loc("foofoo")).build();
     }
 
     @Test
@@ -112,8 +116,8 @@ public void whenNeitherDeliveryLocationIdNorDeliveryCoord_itThrowsException() {
     @Test
     public void whenPickupLocationIdIsSet_itShouldBeDoneCorrectly() {
         Shipment s = Shipment.Builder.newInstance("s").setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
-        assertEquals("pickLoc", s.getPickupLocation().getId());
-        assertEquals("pickLoc", s.getPickupLocation().getId());
+        assertEquals("pickLoc", s.getPickupActivity().getLocation().getId());
+        assertEquals("pickLoc", s.getPickupActivity().getLocation().getId());
     }
 
     @Test(expected = IllegalArgumentException.class)
@@ -125,68 +129,68 @@ public void whenPickupLocationIsNull_itThrowsException() {
     @Test
     public void whenPickupCoordIsSet_itShouldBeDoneCorrectly() {
         Shipment s = Shipment.Builder.newInstance("s")
-            .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").setCoordinate(Coordinate.newInstance(1, 2)).build()).build();
-        assertEquals(1.0, s.getPickupLocation().getCoordinate().getX(), 0.01);
-        assertEquals(2.0, s.getPickupLocation().getCoordinate().getY(), 0.01);
-        assertEquals(1.0, s.getPickupLocation().getCoordinate().getX(), 0.01);
-        assertEquals(2.0, s.getPickupLocation().getCoordinate().getY(), 0.01);
+                        .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").setCoordinate(Coordinate.newInstance(1, 2)).build()).build();
+        assertEquals(1.0, s.getPickupActivity().getLocation().getCoordinate().getX(), 0.01);
+        assertEquals(2.0, s.getPickupActivity().getLocation().getCoordinate().getY(), 0.01);
+        assertEquals(1.0, s.getPickupActivity().getLocation().getCoordinate().getX(), 0.01);
+        assertEquals(2.0, s.getPickupActivity().getLocation().getCoordinate().getY(), 0.01);
     }
 
 
     @Test
     public void whenDeliveryLocationIdIsSet_itShouldBeDoneCorrectly() {
         Shipment s = Shipment.Builder.newInstance("s")
-            .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
-        assertEquals("delLoc", s.getDeliveryLocation().getId());
-        assertEquals("delLoc", s.getDeliveryLocation().getId());
+                        .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        assertEquals("delLoc", s.getDeliveryActivity().getLocation().getId());
+        assertEquals("delLoc", s.getDeliveryActivity().getLocation().getId());
     }
 
 
     @Test
     public void whenDeliveryCoordIsSet_itShouldBeDoneCorrectly() {
         Shipment s = Shipment.Builder.newInstance("s").setDeliveryLocation(TestUtils.loc("delLoc", Coordinate.newInstance(1, 2)))
-            .setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build())
-            .build();
-        assertEquals(1.0, s.getDeliveryLocation().getCoordinate().getX(), 0.01);
-        assertEquals(2.0, s.getDeliveryLocation().getCoordinate().getY(), 0.01);
-        assertEquals(1.0, s.getDeliveryLocation().getCoordinate().getX(), 0.01);
-        assertEquals(2.0, s.getDeliveryLocation().getCoordinate().getY(), 0.01);
+                        .setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build())
+                        .build();
+        assertEquals(1.0, s.getDeliveryActivity().getLocation().getCoordinate().getX(), 0.01);
+        assertEquals(2.0, s.getDeliveryActivity().getLocation().getCoordinate().getY(), 0.01);
+        assertEquals(1.0, s.getDeliveryActivity().getLocation().getCoordinate().getX(), 0.01);
+        assertEquals(2.0, s.getDeliveryActivity().getLocation().getCoordinate().getY(), 0.01);
     }
 
     @Test
     public void whenPickupServiceTimeIsNotSet_itShouldBeZero() {
         Shipment s = Shipment.Builder.newInstance("s")
-            .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
-        assertEquals(0.0, s.getPickupServiceTime(), 0.01);
+                        .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        assertEquals(0.0, s.getPickupActivity().getOperationTime(), 0.01);
     }
 
     @Test
     public void whenDeliveryServiceTimeIsNotSet_itShouldBeZero() {
         Shipment s = Shipment.Builder.newInstance("s")
-            .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
-        assertEquals(0.0, s.getDeliveryServiceTime(), 0.01);
+                        .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        assertEquals(0.0, s.getDeliveryActivity().getOperationTime(), 0.01);
     }
 
     @Test
     public void whenPickupServiceTimeIsSet_itShouldBeDoneCorrectly() {
         Shipment s = Shipment.Builder.newInstance("s")
-            .setPickupServiceTime(2.0)
-            .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
-        assertEquals(2.0, s.getPickupServiceTime(), 0.01);
+                        .setPickupServiceTime(2.0)
+                        .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        assertEquals(2.0, s.getPickupActivity().getOperationTime(), 0.01);
     }
 
     @Test(expected = IllegalArgumentException.class)
     public void whenPickupServiceIsSmallerThanZero_itShouldThrowException() {
         @SuppressWarnings("unused")
         Shipment s = Shipment.Builder.newInstance("s").setPickupServiceTime(-2.0)
-            .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
     }
 
     @Test
     public void whenDeliveryServiceTimeIsSet_itShouldBeDoneCorrectly() {
         Shipment s = Shipment.Builder.newInstance("s").setDeliveryServiceTime(2.0)
-            .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
-        assertEquals(2.0, s.getDeliveryServiceTime(), 0.01);
+                        .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        assertEquals(2.0, s.getDeliveryActivity().getOperationTime(), 0.01);
     }
 
     @Test(expected = IllegalArgumentException.class)
@@ -198,8 +202,10 @@ public void whenDeliveryServiceIsSmallerThanZero_itShouldThrowException() {
     @Test
     public void whenPickupTimeWindowIsNotSet_itShouldBeTheDefaultOne() {
         Shipment s = Shipment.Builder.newInstance("s").setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
-        assertEquals(0.0, s.getPickupTimeWindow().getStart(), 0.01);
-        assertEquals(Double.MAX_VALUE, s.getPickupTimeWindow().getEnd(), 0.01);
+        assertEquals(0.0, s.getPickupActivity().getSingleTimeWindow().getStart(),
+                        0.01);
+        assertEquals(Double.MAX_VALUE,
+                        s.getPickupActivity().getSingleTimeWindow().getEnd(), 0.01);
     }
 
     @Test(expected = IllegalArgumentException.class)
@@ -211,16 +217,19 @@ public void whenPickupTimeWindowIsNull_itShouldThrowException() {
     @Test
     public void whenPickupTimeWindowIsSet_itShouldBeDoneCorrectly() {
         Shipment s = Shipment.Builder.newInstance("s").setPickupTimeWindow(TimeWindow.newInstance(1, 2))
-            .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
-        assertEquals(1.0, s.getPickupTimeWindow().getStart(), 0.01);
-        assertEquals(2.0, s.getPickupTimeWindow().getEnd(), 0.01);
+                        .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        assertEquals(1.0, s.getPickupActivity().getSingleTimeWindow().getStart(),
+                        0.01);
+        assertEquals(2.0, s.getPickupActivity().getSingleTimeWindow().getEnd(), 0.01);
     }
 
     @Test
     public void whenDeliveryTimeWindowIsNotSet_itShouldBeTheDefaultOne() {
         Shipment s = Shipment.Builder.newInstance("s").setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
-        assertEquals(0.0, s.getDeliveryTimeWindow().getStart(), 0.01);
-        assertEquals(Double.MAX_VALUE, s.getDeliveryTimeWindow().getEnd(), 0.01);
+        assertEquals(0.0, s.getDeliveryActivity().getSingleTimeWindow().getStart(),
+                        0.01);
+        assertEquals(Double.MAX_VALUE,
+                        s.getDeliveryActivity().getSingleTimeWindow().getEnd(), 0.01);
     }
 
     @Test(expected = IllegalArgumentException.class)
@@ -232,25 +241,31 @@ public void whenDeliveryTimeWindowIsNull_itShouldThrowException() {
     @Test
     public void whenDeliveryTimeWindowIsSet_itShouldBeDoneCorrectly() {
         Shipment s = Shipment.Builder.newInstance("s").setDeliveryTimeWindow(TimeWindow.newInstance(1, 2))
-            .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
-        assertEquals(1.0, s.getDeliveryTimeWindow().getStart(), 0.01);
-        assertEquals(2.0, s.getDeliveryTimeWindow().getEnd(), 0.01);
+                        .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        assertEquals(1.0, s.getDeliveryActivity().getSingleTimeWindow().getStart(),
+                        0.01);
+        assertEquals(2.0, s.getDeliveryActivity().getSingleTimeWindow().getEnd(),
+                        0.01);
     }
 
     @Test
     public void whenUsingAddDeliveryTimeWindow_itShouldBeDoneCorrectly() {
         Shipment s = Shipment.Builder.newInstance("s").addDeliveryTimeWindow(TimeWindow.newInstance(1, 2))
-            .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
-        assertEquals(1.0, s.getDeliveryTimeWindow().getStart(), 0.01);
-        assertEquals(2.0, s.getDeliveryTimeWindow().getEnd(), 0.01);
+                        .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        assertEquals(1.0, s.getDeliveryActivity().getSingleTimeWindow().getStart(),
+                        0.01);
+        assertEquals(2.0, s.getDeliveryActivity().getSingleTimeWindow().getEnd(),
+                        0.01);
     }
 
     @Test
     public void whenUsingAddDeliveryTimeWindow2_itShouldBeDoneCorrectly() {
         Shipment s = Shipment.Builder.newInstance("s").addDeliveryTimeWindow(1, 2)
-            .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
-        assertEquals(1.0, s.getDeliveryTimeWindow().getStart(), 0.01);
-        assertEquals(2.0, s.getDeliveryTimeWindow().getEnd(), 0.01);
+                        .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        assertEquals(1.0, s.getDeliveryActivity().getSingleTimeWindow().getStart(),
+                        0.01);
+        assertEquals(2.0, s.getDeliveryActivity().getSingleTimeWindow().getEnd(),
+                        0.01);
     }
 
     @Test
@@ -258,35 +273,39 @@ public void whenAddingMultipleDeliveryTimeWindows_itShouldBeDoneCorrectly() {
         TimeWindow tw1 = TimeWindow.newInstance(1, 2);
         TimeWindow tw2 = TimeWindow.newInstance(4, 5);
         Shipment s = Shipment.Builder.newInstance("s").addDeliveryTimeWindow(tw1).addDeliveryTimeWindow(tw2)
-            .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
-        assertEquals(s.getDeliveryTimeWindows().size(), 2);
-        assertThat(s.getDeliveryTimeWindows(), hasItem(is(tw1)));
-        assertThat(s.getDeliveryTimeWindows(), hasItem(is(tw2)));
+                        .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        assertEquals(s.getDeliveryActivity().getTimeWindows().size(), 2);
+        assertThat(s.getDeliveryActivity().getTimeWindows(), hasItem(is(tw1)));
+        assertThat(s.getDeliveryActivity().getTimeWindows(), hasItem(is(tw2)));
     }
 
     @Test(expected = IllegalArgumentException.class)
     public void whenAddingMultipleOverlappingDeliveryTimeWindows_itShouldThrowException() {
         Shipment s = Shipment.Builder.newInstance("s").addDeliveryTimeWindow(1, 3).addDeliveryTimeWindow(2, 5)
-            .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
-        assertEquals(1.0, s.getDeliveryTimeWindow().getStart(), 0.01);
-        assertEquals(2.0, s.getDeliveryTimeWindow().getEnd(), 0.01);
+                        .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        assertEquals(1.0, s.getDeliveryActivity().getSingleTimeWindow().getStart(),
+                        0.01);
+        assertEquals(2.0, s.getDeliveryActivity().getSingleTimeWindow().getEnd(),
+                        0.01);
     }
 
 
     @Test
     public void whenUsingAddPickupTimeWindow_itShouldBeDoneCorrectly() {
         Shipment s = Shipment.Builder.newInstance("s").addPickupTimeWindow(TimeWindow.newInstance(1, 2))
-            .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
-        assertEquals(1.0, s.getPickupTimeWindow().getStart(), 0.01);
-        assertEquals(2.0, s.getPickupTimeWindow().getEnd(), 0.01);
+                        .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        assertEquals(1.0, s.getPickupActivity().getSingleTimeWindow().getStart(),
+                        0.01);
+        assertEquals(2.0, s.getPickupActivity().getSingleTimeWindow().getEnd(), 0.01);
     }
 
     @Test
     public void whenUsingAddPickupTimeWindow2_itShouldBeDoneCorrectly() {
         Shipment s = Shipment.Builder.newInstance("s").addPickupTimeWindow(1, 2)
-            .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
-        assertEquals(1.0, s.getPickupTimeWindow().getStart(), 0.01);
-        assertEquals(2.0, s.getPickupTimeWindow().getEnd(), 0.01);
+                        .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        assertEquals(1.0, s.getPickupActivity().getSingleTimeWindow().getStart(),
+                        0.01);
+        assertEquals(2.0, s.getPickupActivity().getSingleTimeWindow().getEnd(), 0.01);
     }
 
     @Test
@@ -294,18 +313,18 @@ public void whenAddingMultiplePickupTimeWindows_itShouldBeDoneCorrectly() {
         TimeWindow tw1 = TimeWindow.newInstance(1, 2);
         TimeWindow tw2 = TimeWindow.newInstance(4, 5);
         Shipment s = Shipment.Builder.newInstance("s").addPickupTimeWindow(tw1).addPickupTimeWindow(tw2)
-            .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
-        assertEquals(s.getPickupTimeWindows().size(), 2);
-        assertThat(s.getPickupTimeWindows(), hasItem(is(tw1)));
-        assertThat(s.getPickupTimeWindows(), hasItem(is(tw2)));
+                        .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        assertEquals(s.getPickupActivity().getTimeWindows().size(), 2);
+        assertThat(s.getPickupActivity().getTimeWindows(), hasItem(is(tw1)));
+        assertThat(s.getPickupActivity().getTimeWindows(), hasItem(is(tw2)));
     }
 
     @Test(expected = IllegalArgumentException.class)
     public void whenAddingMultipleOverlappingPickupTimeWindows_itShouldThrowException() {
         Shipment s = Shipment.Builder.newInstance("s").addPickupTimeWindow(1, 3).addPickupTimeWindow(2, 5)
-            .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
-        assertEquals(1.0, s.getPickupTimeWindow().getStart(), 0.01);
-        assertEquals(2.0, s.getPickupTimeWindow().getEnd(), 0.01);
+                        .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        assertEquals(1.0, s.getPickupActivity().getSingleTimeWindow().getStart(), 0.01);
+        assertEquals(2.0, s.getPickupActivity().getSingleTimeWindow().getEnd(), 0.01);
     }
 
 
@@ -313,26 +332,26 @@ public void whenAddingMultipleOverlappingPickupTimeWindows_itShouldThrowExceptio
     public void whenShipmentHasNegativeCapacityVal_throwIllegalStateExpception() {
         @SuppressWarnings("unused")
         Shipment one = Shipment.Builder.newInstance("s").setPickupLocation(Location.Builder.newInstance().setId("foo").build())
-            .setDeliveryLocation(TestUtils.loc("foofoo"))
-            .addSizeDimension(0, -2)
-            .build();
+        .setDeliveryLocation(TestUtils.loc("foofoo"))
+        .addSizeDimension(0, -2)
+        .build();
     }
 
     @Test
     public void whenAddingTwoCapDimension_nuOfDimsShouldBeTwo() {
         Shipment one = Shipment.Builder.newInstance("s").setPickupLocation(Location.Builder.newInstance().setId("foo").build())
-            .setDeliveryLocation(TestUtils.loc("foofoo"))
-            .addSizeDimension(0, 2)
-            .addSizeDimension(1, 4)
-            .build();
+                        .setDeliveryLocation(TestUtils.loc("foofoo"))
+                        .addSizeDimension(0, 2)
+                        .addSizeDimension(1, 4)
+                        .build();
         assertEquals(2, one.getSize().getNuOfDimensions());
     }
 
     @Test
     public void whenShipmentIsBuiltWithoutSpecifyingCapacity_itShouldHvCapWithOneDimAndDimValOfZero() {
         Shipment one = Shipment.Builder.newInstance("s")
-            .setPickupLocation(Location.Builder.newInstance().setId("foo").setCoordinate(Coordinate.newInstance(0, 0)).build())
-            .setDeliveryLocation(TestUtils.loc("foofoo")).build();
+                        .setPickupLocation(Location.Builder.newInstance().setId("foo").setCoordinate(Coordinate.newInstance(0, 0)).build())
+                        .setDeliveryLocation(TestUtils.loc("foofoo")).build();
         assertEquals(1, one.getSize().getNuOfDimensions());
         assertEquals(0, one.getSize().get(0));
     }
@@ -340,8 +359,8 @@ public void whenShipmentIsBuiltWithoutSpecifyingCapacity_itShouldHvCapWithOneDim
     @Test
     public void whenShipmentIsBuiltWithConstructorWhereSizeIsSpecified_capacityShouldBeSetCorrectly() {
         Shipment one = Shipment.Builder.newInstance("s").addSizeDimension(0, 1)
-            .setPickupLocation(Location.Builder.newInstance().setId("foo").setCoordinate(Coordinate.newInstance(0, 0)).build())
-            .setDeliveryLocation(TestUtils.loc("foofoo")).build();
+                        .setPickupLocation(Location.Builder.newInstance().setId("foo").setCoordinate(Coordinate.newInstance(0, 0)).build())
+                        .setDeliveryLocation(TestUtils.loc("foofoo")).build();
         assertEquals(1, one.getSize().getNuOfDimensions());
         assertEquals(1, one.getSize().get(0));
     }
@@ -349,8 +368,8 @@ public void whenShipmentIsBuiltWithConstructorWhereSizeIsSpecified_capacityShoul
     @Test
     public void whenAddingSkills_theyShouldBeAddedCorrectly() {
         Shipment s = Shipment.Builder.newInstance("s").setPickupLocation(Location.Builder.newInstance().setId("loc").build())
-            .setDeliveryLocation(TestUtils.loc("delLoc"))
-            .addRequiredSkill("drill").addRequiredSkill("screwdriver").build();
+                        .setDeliveryLocation(TestUtils.loc("delLoc"))
+                        .addRequiredSkill("drill").addRequiredSkill("screwdriver").build();
         assertTrue(s.getRequiredSkills().containsSkill("drill"));
         assertTrue(s.getRequiredSkills().containsSkill("drill"));
         assertTrue(s.getRequiredSkills().containsSkill("ScrewDriver"));
@@ -359,9 +378,9 @@ public void whenAddingSkills_theyShouldBeAddedCorrectly() {
     @Test
     public void whenAddingSkillsCaseSens_theyShouldBeAddedCorrectly() {
         Shipment s = Shipment.Builder.newInstance("s")
-            .setPickupLocation(Location.Builder.newInstance().setId("pick").build())
-            .setDeliveryLocation(TestUtils.loc("del"))
-            .addRequiredSkill("DriLl").addRequiredSkill("screwDriver").build();
+                        .setPickupLocation(Location.Builder.newInstance().setId("pick").build())
+                        .setDeliveryLocation(TestUtils.loc("del"))
+                        .addRequiredSkill("DriLl").addRequiredSkill("screwDriver").build();
         assertTrue(s.getRequiredSkills().containsSkill("drill"));
         assertTrue(s.getRequiredSkills().containsSkill("drilL"));
     }
@@ -369,8 +388,8 @@ public void whenAddingSkillsCaseSens_theyShouldBeAddedCorrectly() {
     @Test
     public void whenAddingSkillsCaseSensV2_theyShouldBeAddedCorrectly() {
         Shipment s = Shipment.Builder.newInstance("s").setPickupLocation(Location.Builder.newInstance().setId("loc").build())
-            .setDeliveryLocation(TestUtils.loc("del"))
-            .addRequiredSkill("screwDriver").build();
+                        .setDeliveryLocation(TestUtils.loc("del"))
+                        .addRequiredSkill("screwDriver").build();
         assertFalse(s.getRequiredSkills().containsSkill("drill"));
         assertFalse(s.getRequiredSkills().containsSkill("drilL"));
     }
@@ -378,58 +397,58 @@ public void whenAddingSkillsCaseSensV2_theyShouldBeAddedCorrectly() {
     @Test
     public void nameShouldBeAssigned() {
         Shipment s = Shipment.Builder.newInstance("s").setPickupLocation(Location.Builder.newInstance().setId("loc").build())
-            .setDeliveryLocation(TestUtils.loc("del"))
-            .setName("name").build();
+                        .setDeliveryLocation(TestUtils.loc("del"))
+                        .setName("name").build();
         assertEquals("name", s.getName());
     }
 
     @Test
     public void whenSettingLocation_itShouldWork() {
         Shipment s = Shipment.Builder.newInstance("s").setPickupLocation(Location.Builder.newInstance().setId("loc").build())
-            .setDeliveryLocation(Location.Builder.newInstance().setId("del").build()).build();
-        assertEquals("loc", s.getPickupLocation().getId());
-        assertEquals("loc", s.getPickupLocation().getId());
-        assertEquals("del", s.getDeliveryLocation().getId());
-        assertEquals("del", s.getDeliveryLocation().getId());
+                        .setDeliveryLocation(Location.Builder.newInstance().setId("del").build()).build();
+        assertEquals("loc", s.getPickupActivity().getLocation().getId());
+        assertEquals("loc", s.getPickupActivity().getLocation().getId());
+        assertEquals("del", s.getDeliveryActivity().getLocation().getId());
+        assertEquals("del", s.getDeliveryActivity().getLocation().getId());
     }
 
     @Test
     public void whenSettingPriorities_itShouldBeSetCorrectly() {
         Shipment s = Shipment.Builder.newInstance("s").setPickupLocation(Location.newInstance("loc"))
-            .setDeliveryLocation(Location.newInstance("loc"))
-            .setPriority(1).build();
-        Assert.assertEquals(1, s.getPriority());
+                        .setDeliveryLocation(Location.newInstance("loc"))
+                        .setPriority(1).build();
+        assertEquals(1, s.getPriority());
     }
 
     @Test
     public void whenSettingPriorities_itShouldBeSetCorrectly2() {
         Shipment s = Shipment.Builder.newInstance("s").setPickupLocation(Location.newInstance("loc"))
-            .setDeliveryLocation(Location.newInstance("loc"))
-            .setPriority(3).build();
-        Assert.assertEquals(3, s.getPriority());
+                        .setDeliveryLocation(Location.newInstance("loc"))
+                        .setPriority(3).build();
+        assertEquals(3, s.getPriority());
     }
 
     @Test
     public void whenNotSettingPriorities_defaultShouldBe2() {
         Shipment s = Shipment.Builder.newInstance("s").setPickupLocation(Location.newInstance("loc"))
-            .setDeliveryLocation(Location.newInstance("loc"))
-            .build();
-        Assert.assertEquals(2, s.getPriority());
+                        .setDeliveryLocation(Location.newInstance("loc"))
+                        .build();
+        assertEquals(2, s.getPriority());
     }
 
     @Test(expected = IllegalArgumentException.class)
     public void whenSettingIncorrectPriorities_itShouldThrowException() {
-        Shipment s = Shipment.Builder.newInstance("s").setPickupLocation(Location.newInstance("loc"))
-            .setDeliveryLocation(Location.newInstance("loc"))
-            .setPriority(30).build();
+        Shipment.Builder.newInstance("s").setPickupLocation(Location.newInstance("loc"))
+        .setDeliveryLocation(Location.newInstance("loc"))
+        .setPriority(30).build();
 
     }
 
     @Test(expected = IllegalArgumentException.class)
     public void whenSettingIncorrectPriorities_itShouldThrowException2() {
-        Shipment s = Shipment.Builder.newInstance("s").setPickupLocation(Location.newInstance("loc"))
-            .setDeliveryLocation(Location.newInstance("loc"))
-            .setPriority(0).build();
+        Shipment.Builder.newInstance("s").setPickupLocation(Location.newInstance("loc"))
+        .setDeliveryLocation(Location.newInstance("loc"))
+        .setPriority(0).build();
 
     }
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/misc/JobInsertionContextTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/misc/JobInsertionContextTest.java
index 8f0926450..c34ff0568 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/misc/JobInsertionContextTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/misc/JobInsertionContextTest.java
@@ -19,17 +19,18 @@
 package com.graphhopper.jsprit.core.problem.misc;
 
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+import static org.mockito.Mockito.mock;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.problem.driver.Driver;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
-import org.junit.Before;
-import org.junit.Test;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.mockito.Mockito.mock;
 
 public class JobInsertionContextTest {
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/VehicleRoutingProblemSolutionTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/VehicleRoutingProblemSolutionTest.java
index 628cbe6fb..7c3d0e5d6 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/VehicleRoutingProblemSolutionTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/VehicleRoutingProblemSolutionTest.java
@@ -17,18 +17,18 @@
  */
 package com.graphhopper.jsprit.core.problem.solution;
 
-import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-import org.junit.Assert;
-import org.junit.Test;
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Mockito.mock;
 
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
 
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.mock;
+import org.junit.Test;
+
+import com.graphhopper.jsprit.core.problem.job.Job;
+import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 
 public class VehicleRoutingProblemSolutionTest {
 
@@ -79,7 +79,7 @@ public void badJobsShouldBeCorrect() {
         List<Job> badJobs = new ArrayList<Job>();
         badJobs.add(badJob);
         VehicleRoutingProblemSolution sol = new VehicleRoutingProblemSolution(Collections.<VehicleRoute>emptyList(), badJobs, 10.0);
-        Assert.assertEquals(badJob, sol.getUnassignedJobs().iterator().next());
+        assertEquals(badJob, sol.getUnassignedJobs().iterator().next());
     }
 
     @Test
@@ -89,7 +89,7 @@ public void badJobsShouldBeCorrect_2() {
         badJobs.add(badJob);
         VehicleRoutingProblemSolution sol = new VehicleRoutingProblemSolution(Collections.<VehicleRoute>emptyList(), 10.0);
         sol.getUnassignedJobs().addAll(badJobs);
-        Assert.assertEquals(badJob, sol.getUnassignedJobs().iterator().next());
+        assertEquals(badJob, sol.getUnassignedJobs().iterator().next());
     }
 
 }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRouteBuilderTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRouteBuilderTest.java
index 9d6180424..102dc840a 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRouteBuilderTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRouteBuilderTest.java
@@ -17,6 +17,12 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route;
 
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.driver.Driver;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
@@ -24,18 +30,14 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
-import org.junit.Test;
-
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
 
 
 public class VehicleRouteBuilderTest {
 
     @Test(expected = IllegalArgumentException.class)
     public void whenDeliveryIsAddedBeforePickup_throwsException() {
-        Shipment s = mock(Shipment.class);
+        Shipment s = Shipment.Builder.newInstance("s")
+                        .setDeliveryLocation(Location.newInstance("loc1")).build();
         VehicleRoute.Builder builder = VehicleRoute.Builder.newInstance(mock(Vehicle.class), mock(Driver.class));
         builder.addDelivery(s);
     }
@@ -90,7 +92,7 @@ public void whenBuildingClosedRoute_routeEndShouldHaveLocationOfVehicle() {
         Shipment s2 = createStandardShipment("s2").build();
 
         Vehicle vehicle = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance("vehLoc")).setEndLocation(Location.newInstance("vehLoc"))
-            .build();
+                        .build();
 
         VehicleRoute.Builder builder = VehicleRoute.Builder.newInstance(vehicle, mock(Driver.class));
         builder.addPickup(s);
@@ -115,7 +117,8 @@ public void whenBuildingOpenRoute_routeEndShouldHaveLocationOfLastActivity() {
         builder.addDelivery(s);
         builder.addDelivery(s2);
         VehicleRoute route = builder.build();
-        assertEquals(route.getEnd().getLocation().getId(), s2.getDeliveryLocation().getId());
+        assertEquals(route.getEnd().getLocation().getId(),
+                        s2.getDeliveryActivity().getLocation().getId());
     }
 
     private Location loc(String delLoc) {
@@ -145,11 +148,11 @@ protected Builder createStandardShipment(String name) {
         Location loc = Location.Builder.newInstance().setId("delLoc").build();
         TimeWindow tw = TimeWindow.newInstance(0, 10);
         return Shipment.Builder.newInstance(name)
-            .addSizeDimension(0, 10)
-            .setPickupTimeWindow(tw)
-            .setDeliveryTimeWindow(tw)
-            .setPickupLocation(loc)
-            .setDeliveryLocation(loc);
+                        .addSizeDimension(0, 10)
+                        .setPickupTimeWindow(tw)
+                        .setDeliveryTimeWindow(tw)
+                        .setPickupLocation(loc)
+                        .setDeliveryLocation(loc);
     }
 
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivityTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivityTest.java
index 3a6dab609..406789f77 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivityTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivityTest.java
@@ -43,8 +43,10 @@ public void doBefore() {
                         .setTimeWindow(TimeWindow.newInstance(1., 2.)).setServiceTime(3);
         service = breakBuilder.build();
         serviceActivity = BreakActivity.newInstance(service, breakBuilder);
-        serviceActivity.setTheoreticalEarliestOperationStartTime(service.getTimeWindow().getStart());
-        serviceActivity.setTheoreticalLatestOperationStartTime(service.getTimeWindow().getEnd());
+        serviceActivity.setTheoreticalEarliestOperationStartTime(
+                        service.getActivity().getTimeWindow().getStart());
+        serviceActivity.setTheoreticalLatestOperationStartTime(
+                        service.getActivity().getTimeWindow().getEnd());
     }
 
     @Test
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/EndTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/EndTest.java
index b3a727c53..ee20ad96f 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/EndTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/EndTest.java
@@ -17,11 +17,11 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import org.junit.Test;
-
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 
+import org.junit.Test;
+
 public class EndTest {
 
     @Test
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/JobActivityTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/JobActivityTest.java
index 89bfe47fa..658179a06 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/JobActivityTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/JobActivityTest.java
@@ -33,9 +33,9 @@ public void createActivity(AbstractSingleActivityJob<?> service) {
         this.service = service;
         activity = service.getActivity();
         activity.setTheoreticalEarliestOperationStartTime(
-                        activity.getTimeWindows().iterator().next().getStart());
+                        activity.getSingleTimeWindow().getStart());
         activity.setTheoreticalLatestOperationStartTime(
-                        activity.getTimeWindows().iterator().next().getEnd());
+                        activity.getSingleTimeWindow().getEnd());
     }
 
     @Test
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/StartTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/StartTest.java
index c03818850..5cf454958 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/StartTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/StartTest.java
@@ -17,11 +17,11 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import org.junit.Test;
-
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 
+import org.junit.Test;
+
 public class StartTest {
 
     @Test
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TestRefs.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TestRefs.java
index 2a0cc360a..4631173cd 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TestRefs.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TestRefs.java
@@ -17,12 +17,12 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import org.junit.Test;
+import static org.junit.Assert.assertTrue;
 
 import java.util.ArrayList;
 import java.util.List;
 
-import static org.junit.Assert.assertTrue;
+import org.junit.Test;
 
 
 public class TestRefs {
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/TestVehicleFleetManagerImpl.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/TestVehicleFleetManagerImpl.java
index 6d233bd00..3c569e124 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/TestVehicleFleetManagerImpl.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/TestVehicleFleetManagerImpl.java
@@ -17,17 +17,20 @@
  */
 package com.graphhopper.jsprit.core.problem.vehicle;
 
-import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import org.junit.Before;
-import org.junit.Test;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
 
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.List;
 
-import static org.junit.Assert.*;
+import org.junit.Before;
+import org.junit.Test;
+
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 
 public class TestVehicleFleetManagerImpl {
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleImplTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleImplTest.java
index 29eef872f..0834cacfb 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleImplTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleImplTest.java
@@ -18,12 +18,16 @@
 package com.graphhopper.jsprit.core.problem.vehicle;
 
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertTrue;
+
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.job.Break;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
-import org.junit.Test;
-
-import static org.junit.Assert.*;
 
 
 public class VehicleImplTest {
@@ -39,14 +43,15 @@ public void whenVehicleIsBuiltWithoutSettingNeitherLocationNorCoord_itThrowsAnIl
     @Test
     public void whenAddingDriverBreak_itShouldBeAddedCorrectly() {
         VehicleTypeImpl type1 = VehicleTypeImpl.Builder.newInstance("type").build();
-        Break aBreak = (Break) new Break.Builder("break").setTimeWindow(TimeWindow.newInstance(100, 200)).setServiceTime(30).build();
+        Break aBreak = new Break.Builder("break").setTimeWindow(TimeWindow.newInstance(100, 200)).setServiceTime(30).build();
         Vehicle v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance("start"))
-            .setType(type1).setEndLocation(Location.newInstance("start"))
-            .setBreak(aBreak).build();
+                        .setType(type1).setEndLocation(Location.newInstance("start"))
+                        .setBreak(aBreak).build();
         assertNotNull(v.getBreak());
-        assertEquals(100., v.getBreak().getTimeWindow().getStart(), 0.1);
-        assertEquals(200., v.getBreak().getTimeWindow().getEnd(), 0.1);
-        assertEquals(30., v.getBreak().getServiceDuration(), 0.1);
+        TimeWindow timeWindow = v.getBreak().getActivity().getSingleTimeWindow();
+        assertEquals(100., timeWindow.getStart(), 0.1);
+        assertEquals(200., timeWindow.getEnd(), 0.1);
+        assertEquals(30., v.getBreak().getActivity().getOperationTime(), 0.1);
     }
 
 
@@ -54,7 +59,7 @@ public void whenAddingDriverBreak_itShouldBeAddedCorrectly() {
     public void whenAddingSkills_theyShouldBeAddedCorrectly() {
         VehicleTypeImpl type1 = VehicleTypeImpl.Builder.newInstance("type").build();
         Vehicle v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance("start")).setType(type1).setEndLocation(Location.newInstance("start"))
-            .addSkill("drill").addSkill("screwdriver").build();
+                        .addSkill("drill").addSkill("screwdriver").build();
         assertTrue(v.getSkills().containsSkill("drill"));
         assertTrue(v.getSkills().containsSkill("drill"));
         assertTrue(v.getSkills().containsSkill("screwdriver"));
@@ -64,7 +69,7 @@ public void whenAddingSkills_theyShouldBeAddedCorrectly() {
     public void whenAddingSkillsCaseSens_theyShouldBeAddedCorrectly() {
         VehicleTypeImpl type1 = VehicleTypeImpl.Builder.newInstance("type").build();
         Vehicle v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance("start")).setType(type1).setEndLocation(Location.newInstance("start"))
-            .addSkill("drill").addSkill("screwdriver").build();
+                        .addSkill("drill").addSkill("screwdriver").build();
         assertTrue(v.getSkills().containsSkill("drill"));
         assertTrue(v.getSkills().containsSkill("dRill"));
         assertTrue(v.getSkills().containsSkill("ScrewDriver"));
@@ -233,7 +238,7 @@ public void whenTwoVehiclesHaveTheSameId_theyShouldBeEqual() {
     public void whenAddingSkillsCaseSensV2_theyShouldBeAddedCorrectly() {
         VehicleTypeImpl type1 = VehicleTypeImpl.Builder.newInstance("type").build();
         Vehicle v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance("start")).setType(type1).setEndLocation(Location.newInstance("start"))
-            .addSkill("drill").build();
+                        .addSkill("drill").build();
         assertFalse(v.getSkills().containsSkill("ScrewDriver"));
     }
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleTypeImplTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleTypeImplTest.java
index 854783471..56df24da0 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleTypeImplTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleTypeImplTest.java
@@ -17,9 +17,11 @@
  */
 package com.graphhopper.jsprit.core.problem.vehicle;
 
-import org.junit.Test;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertTrue;
 
-import static org.junit.Assert.*;
+import org.junit.Test;
 
 public class VehicleTypeImplTest {
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleTypeKeyTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleTypeKeyTest.java
index 9f195433f..a760932b6 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleTypeKeyTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleTypeKeyTest.java
@@ -19,12 +19,13 @@
 package com.graphhopper.jsprit.core.problem.vehicle;
 
 
-import com.graphhopper.jsprit.core.problem.Location;
-import org.junit.Test;
-
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 
+import org.junit.Test;
+
+import com.graphhopper.jsprit.core.problem.Location;
+
 public class VehicleTypeKeyTest {
 
     @Test
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/ChristofidesReader.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/ChristofidesReader.java
index d8fac7e52..12671b756 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/ChristofidesReader.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/ChristofidesReader.java
@@ -18,6 +18,14 @@
 package com.graphhopper.jsprit.core.util;
 
 
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
@@ -26,13 +34,6 @@
 import com.graphhopper.jsprit.core.problem.job.Service;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.io.BufferedReader;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
 
 
 /**
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/CustomJob.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/CustomJob.java
index ef6ea8c5c..9cf74cad8 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/CustomJob.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/CustomJob.java
@@ -18,6 +18,10 @@
 
 package com.graphhopper.jsprit.core.util;
 
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.job.AbstractJob;
@@ -28,10 +32,6 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-
 /**
  * Created by schroeder on 16/11/16.
  */
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/FastVehicleRoutingTransportCostsMatrixTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/FastVehicleRoutingTransportCostsMatrixTest.java
index 4e1361eec..d913bb5a2 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/FastVehicleRoutingTransportCostsMatrixTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/FastVehicleRoutingTransportCostsMatrixTest.java
@@ -17,15 +17,16 @@
  */
 package com.graphhopper.jsprit.core.util;
 
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
-import org.junit.Test;
-
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
 
 public class FastVehicleRoutingTransportCostsMatrixTest {
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/LiLimReader.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/LiLimReader.java
index 71a21e970..4d418c9e4 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/LiLimReader.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/LiLimReader.java
@@ -18,15 +18,6 @@
 package com.graphhopper.jsprit.core.util;
 
 
-import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.Builder;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
-import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
-import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.InputStream;
@@ -36,6 +27,16 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.Builder;
+import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
+
 
 /**
  * test instances for the capacitated vrp with pickup and deliveries and time windows.
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/RandomUtilsTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/RandomUtilsTest.java
index 9a2f57ddf..8cc532dab 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/RandomUtilsTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/RandomUtilsTest.java
@@ -18,17 +18,18 @@
 
 package com.graphhopper.jsprit.core.util;
 
-import com.graphhopper.jsprit.core.problem.job.Job;
-import junit.framework.Assert;
-import org.junit.Test;
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
 
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.List;
 import java.util.Random;
 
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
+import org.junit.Test;
+
+import com.graphhopper.jsprit.core.problem.job.Job;
 
 /**
  * Created by schroeder on 14/01/15.
@@ -39,14 +40,14 @@
     public void shouldReturnSingleJob() {
         Job job = mock(Job.class);
         Collection<Job> jobs = Arrays.asList(job);
-        Assert.assertEquals(job, RandomUtils.nextItem(jobs, RandomNumberGeneration.getRandom()));
+        assertEquals(job, RandomUtils.nextItem(jobs, RandomNumberGeneration.getRandom()));
     }
 
     @Test
     public void shouldReturnSingleJob_() {
         Job job = mock(Job.class);
         Collection<Job> jobs = Arrays.asList(job);
-        Assert.assertEquals(job, RandomUtils.nextJob(jobs, RandomNumberGeneration.getRandom()));
+        assertEquals(job, RandomUtils.nextJob(jobs, RandomNumberGeneration.getRandom()));
     }
 
     @Test
@@ -55,7 +56,7 @@ public void shouldReturnJob3() {
         List<Job> jobs = Arrays.asList(mock(Job.class), mock(Job.class), job3);
         Random random = mock(Random.class);
         when(random.nextInt(jobs.size())).thenReturn(2);
-        Assert.assertEquals(job3, RandomUtils.nextJob(jobs, random));
+        assertEquals(job3, RandomUtils.nextJob(jobs, random));
     }
 
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/SolomonReader.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/SolomonReader.java
index 6c8a544e9..00846d8bc 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/SolomonReader.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/SolomonReader.java
@@ -18,6 +18,14 @@
 package com.graphhopper.jsprit.core.util;
 
 
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
@@ -25,13 +33,6 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.io.BufferedReader;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
 
 
 /**
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/TimeTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/TimeTest.java
index 97186e1ac..00d609c63 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/TimeTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/TimeTest.java
@@ -17,10 +17,10 @@
  */
 package com.graphhopper.jsprit.core.util;
 
-import org.junit.Test;
-
 import static org.junit.Assert.assertEquals;
 
+import org.junit.Test;
+
 public class TimeTest {
 
     @Test
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/VehicleRoutingTransportCostsMatrixTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/VehicleRoutingTransportCostsMatrixTest.java
index 6ec6d80c6..3d282e81b 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/VehicleRoutingTransportCostsMatrixTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/VehicleRoutingTransportCostsMatrixTest.java
@@ -17,15 +17,16 @@
  */
 package com.graphhopper.jsprit.core.util;
 
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
-import org.junit.Test;
-
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
 
 public class VehicleRoutingTransportCostsMatrixTest {
 
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/BicycleMessenger.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/BicycleMessenger.java
index 52f10f140..a6ade3283 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/BicycleMessenger.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/BicycleMessenger.java
@@ -17,6 +17,14 @@
  */
 package com.graphhopper.jsprit.examples;
 
+import java.io.BufferedReader;
+import java.io.File;
+import java.io.FileReader;
+import java.io.IOException;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.Map;
+
 import com.graphhopper.jsprit.analysis.toolbox.AlgorithmSearchProgressChartListener;
 import com.graphhopper.jsprit.analysis.toolbox.GraphStreamViewer;
 import com.graphhopper.jsprit.analysis.toolbox.GraphStreamViewer.Label;
@@ -55,14 +63,6 @@
 import com.graphhopper.jsprit.core.util.Solutions;
 import com.graphhopper.jsprit.util.Examples;
 
-import java.io.BufferedReader;
-import java.io.File;
-import java.io.FileReader;
-import java.io.IOException;
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.Map;
-
 
 /**
  * This class provides the/a solution to the following problem:
@@ -102,7 +102,7 @@
         private final StateId latest_act_arrival_time_stateId;
 
         public ThreeTimesLessThanBestDirectRouteConstraint(StateId latest_act_arrival_time, Map<String, Double> nearestMessengers,
-                                                           VehicleRoutingTransportCosts routingCosts, RouteAndActivityStateGetter stateManager) {
+                VehicleRoutingTransportCosts routingCosts, RouteAndActivityStateGetter stateManager) {
             bestMessengers = nearestMessengers;
             this.routingCosts = routingCosts;
             this.stateManager = stateManager;
@@ -113,7 +113,7 @@ public ThreeTimesLessThanBestDirectRouteConstraint(StateId latest_act_arrival_ti
         public ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prevAct, TourActivity newAct, TourActivity nextAct, double prevActDepTime) {
             //make sure vehicle can manage direct path
             double arrTime_at_nextAct_onDirectRoute = prevActDepTime + routingCosts.getTransportTime(prevAct.getLocation(), nextAct.getLocation(),
-                prevActDepTime, iFacts.getNewDriver(), iFacts.getNewVehicle());
+                    prevActDepTime, iFacts.getNewDriver(), iFacts.getNewVehicle());
             Double latest_arrTime_at_nextAct = stateManager.getActivityState(nextAct, latest_act_arrival_time_stateId, Double.class);
             if (latest_arrTime_at_nextAct == null) {
                 latest_arrTime_at_nextAct = nextAct.getTheoreticalLatestOperationStartTime();
@@ -124,7 +124,7 @@ public ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prev
             }
 
             double arrTime_at_newAct = prevActDepTime
-                + routingCosts.getTransportTime(prevAct.getLocation(), newAct.getLocation(), prevActDepTime, iFacts.getNewDriver(), iFacts.getNewVehicle());
+                    + routingCosts.getTransportTime(prevAct.getLocation(), newAct.getLocation(), prevActDepTime, iFacts.getNewDriver(), iFacts.getNewVehicle());
             //local impact
             //no matter whether it is a pickupShipment or deliverShipment activities. both arrivalTimes must be < 3*best.
             double directTimeOfNearestMessenger = bestMessengers.get(((JobActivity) newAct).getJob().getId());
@@ -136,13 +136,13 @@ public ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prev
             //impact on whole route, since insertion of newAct shifts all subsequent activities forward in time
             double departureTime_at_newAct = arrTime_at_newAct + newAct.getOperationTime();
             double latest_arrTime_at_newAct = latest_arrTime_at_nextAct - routingCosts.getTransportTime(newAct.getLocation(), nextAct.getLocation(),
-                departureTime_at_newAct, iFacts.getNewDriver(), iFacts.getNewVehicle());
+                    departureTime_at_newAct, iFacts.getNewDriver(), iFacts.getNewVehicle());
             if (arrTime_at_newAct > latest_arrTime_at_newAct) {
                 return ConstraintsStatus.NOT_FULFILLED;
             }
 
             double arrTime_at_nextAct = departureTime_at_newAct + routingCosts.getTransportTime(newAct.getLocation(), nextAct.getLocation(),
-                departureTime_at_newAct, iFacts.getNewDriver(), iFacts.getNewVehicle());
+                    departureTime_at_newAct, iFacts.getNewDriver(), iFacts.getNewVehicle());
             //here you need an activity state
             if (arrTime_at_nextAct > latest_arrTime_at_nextAct) {
                 return ConstraintsStatus.NOT_FULFILLED;
@@ -211,7 +211,7 @@ public boolean fulfilled(JobInsertionContext insertionContext) {
         private final StateId latest_act_arrival_time_stateId;
 
         public UpdateLatestActivityStartTimes(StateId latest_act_arrival_time, StateManager stateManager, VehicleRoutingTransportCosts routingCosts,
-                                              Map<String, Double> bestMessengers) {
+                Map<String, Double> bestMessengers) {
             super();
             this.stateManager = stateManager;
             this.routingCosts = routingCosts;
@@ -230,11 +230,11 @@ public void begin(VehicleRoute route) {
         public void visit(TourActivity currAct) {
             double timeOfNearestMessenger = bestMessengers.get(((JobActivity) currAct).getJob().getId());
             double potential_latest_arrTime_at_currAct = latest_arrTime_at_prevAct - routingCosts.getBackwardTransportTime(currAct.getLocation(),
-                prevAct.getLocation(), latest_arrTime_at_prevAct, route.getDriver(), route.getVehicle()) - currAct.getOperationTime();
+                    prevAct.getLocation(), latest_arrTime_at_prevAct, route.getDriver(), route.getVehicle()) - currAct.getOperationTime();
             double latest_arrTime_at_currAct = Math.min(3 * timeOfNearestMessenger, potential_latest_arrTime_at_currAct);
             stateManager.putActivityState(currAct, latest_act_arrival_time_stateId, latest_arrTime_at_currAct);
             assert currAct.getArrTime() <= latest_arrTime_at_currAct : "this must not be since it breaks condition; actArrTime: " + currAct.getArrTime()
-                + " latestArrTime: " + latest_arrTime_at_currAct + " vehicle: " + route.getVehicle().getId();
+                    + " latestArrTime: " + latest_arrTime_at_currAct + " vehicle: " + route.getVehicle().getId();
             latest_arrTime_at_prevAct = latest_arrTime_at_currAct;
             prevAct = currAct;
         }
@@ -260,7 +260,7 @@ public static void main(String[] args) throws IOException {
         readMessengers(problemBuilder);
         //add constraints to problem
         VehicleRoutingTransportCosts routingCosts = new DefaultCosts(EuclideanDistanceCalculator.getInstance())
-            .withCoordinateConverter(problemBuilder.getLocations()); //which is the default VehicleRoutingTransportCosts in builder above
+                .withCoordinateConverter(problemBuilder.getLocations()); //which is the default VehicleRoutingTransportCosts in builder above
         problemBuilder.setRoutingCost(routingCosts);
         //finally build the problem
 //        problemBuilder.addPenaltyVehicles(20.0,50000);
@@ -283,12 +283,12 @@ public static void main(String[] args) throws IOException {
         ConstraintManager constraintManager = new ConstraintManager(bicycleMessengerProblem, stateManager);
         constraintManager.addLoadConstraint();
         constraintManager.addConstraint(
-            new ThreeTimesLessThanBestDirectRouteConstraint(latest_act_arrival_time_stateId, nearestMessengers, routingCosts, stateManager),
-            ConstraintManager.Priority.CRITICAL);
+                new ThreeTimesLessThanBestDirectRouteConstraint(latest_act_arrival_time_stateId, nearestMessengers, routingCosts, stateManager),
+                ConstraintManager.Priority.CRITICAL);
         constraintManager.addConstraint(new IgnoreMessengerThatCanNeverMeetTimeRequirements(nearestMessengers, routingCosts));
 
         VehicleRoutingAlgorithm algorithm = Jsprit.Builder.newInstance(bicycleMessengerProblem)
-            .setStateAndConstraintManager(stateManager, constraintManager).buildAlgorithm();
+                .setStateAndConstraintManager(stateManager, constraintManager).buildAlgorithm();
 
         algorithm.setMaxIterations(2000);
 
@@ -339,19 +339,19 @@ public static void main(String[] args) throws IOException {
         new GraphStreamViewer(bicycleMessengerProblem).labelWith(Label.ID).setRenderShipments(true).setRenderDelay(150).display();
 //
         new GraphStreamViewer(bicycleMessengerProblem, Solutions.bestOf(solutions)).setGraphStreamFrameScalingFactor(1.5).setCameraView(12500, 55000, 0.25)
-            .labelWith(Label.ACTIVITY).setRenderShipments(true).setRenderDelay(150).display();
+                .labelWith(Label.ACTIVITY).setRenderShipments(true).setRenderDelay(150).display();
 
     }
 
     //if you wanne run this enable assertion by putting an '-ea' in your vmargument list - Run As --> Run Configurations --> (x)=Arguments --> VM arguments: -ea
     private static void validateSolution(VehicleRoutingProblemSolution bestOf, VehicleRoutingProblem bicycleMessengerProblem,
-                                         Map<String, Double> nearestMessengers) {
+            Map<String, Double> nearestMessengers) {
         for (VehicleRoute route : bestOf.getRoutes()) {
             for (TourActivity act : route.getActivities()) {
                 if (act.getArrTime() > 3 * nearestMessengers.get(((JobActivity) act).getJob().getId())) {
                     SolutionPrinter.print(bicycleMessengerProblem, bestOf, SolutionPrinter.Print.VERBOSE);
                     throw new IllegalStateException("three times less than ... constraint broken. this must not be. act.getArrTime(): " + act.getArrTime()
-                        + " allowed: " + 3 * nearestMessengers.get(((JobActivity) act).getJob().getId()));
+                            + " allowed: " + 3 * nearestMessengers.get(((JobActivity) act).getJob().getId()));
                 }
             }
         }
@@ -374,8 +374,9 @@ private static void validateSolution(VehicleRoutingProblemSolution bestOf, Vehic
 
     static double getTimeOfDirectRoute(Job job, Vehicle v, VehicleRoutingTransportCosts routingCosts) {
         Shipment envelope = (Shipment) job;
-        return routingCosts.getTransportTime(v.getStartLocation(), envelope.getPickupLocation(), 0.0, DriverImpl.noDriver(), v) +
-            routingCosts.getTransportTime(envelope.getPickupLocation(), envelope.getDeliveryLocation(), 0.0, DriverImpl.noDriver(), v);
+        return routingCosts.getTransportTime(v.getStartLocation(), envelope.getPickupActivity().getLocation(), 0.0, DriverImpl.noDriver(), v) +
+                routingCosts.getTransportTime(envelope.getPickupActivity().getLocation(), envelope.getDeliveryActivity().getLocation(), 0.0,
+                        DriverImpl.noDriver(), v);
     }
 
     private static void readEnvelopes(Builder problemBuilder) throws IOException {
@@ -390,11 +391,11 @@ private static void readEnvelopes(Builder problemBuilder) throws IOException {
             String[] tokens = line.split("\\s+");
             //define your envelope which is basically a shipment from A to B
             Shipment envelope = Shipment.Builder.newInstance(tokens[1]).addSizeDimension(0, 1)
-                .setPickupLocation(Location.Builder.newInstance()
-                    .setCoordinate(Coordinate.newInstance(Double.parseDouble(tokens[2]), Double.parseDouble(tokens[3]))).build())
-                .setDeliveryLocation(Location.Builder.newInstance()
-                    .setCoordinate(Coordinate.newInstance(Double.parseDouble(tokens[4]), Double.parseDouble(tokens[5]))).build())
-                .build();
+                    .setPickupLocation(Location.Builder.newInstance()
+                            .setCoordinate(Coordinate.newInstance(Double.parseDouble(tokens[2]), Double.parseDouble(tokens[3]))).build())
+                    .setDeliveryLocation(Location.Builder.newInstance()
+                            .setCoordinate(Coordinate.newInstance(Double.parseDouble(tokens[4]), Double.parseDouble(tokens[5]))).build())
+                    .build();
             problemBuilder.addJob(envelope);
         }
         reader.close();
@@ -421,9 +422,9 @@ private static void readMessengers(Builder problemBuilder) throws IOException {
             String[] tokens = line.split("\\s+");
             //build your vehicle
             VehicleImpl vehicle = VehicleImpl.Builder.newInstance(tokens[1])
-                .setStartLocation(Location.Builder.newInstance()
-                    .setCoordinate(Coordinate.newInstance(Double.parseDouble(tokens[2]), Double.parseDouble(tokens[3]))).build())
-                .setReturnToDepot(false).setType(messengerType).build();
+                    .setStartLocation(Location.Builder.newInstance()
+                            .setCoordinate(Coordinate.newInstance(Double.parseDouble(tokens[2]), Double.parseDouble(tokens[3]))).build())
+                    .setReturnToDepot(false).setType(messengerType).build();
             problemBuilder.addVehicle(vehicle);
         }
         reader.close();
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SolomonWithSkillsExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SolomonWithSkillsExample.java
index 061763ba9..005a73a74 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SolomonWithSkillsExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SolomonWithSkillsExample.java
@@ -19,6 +19,8 @@
 package com.graphhopper.jsprit.examples;
 
 
+import java.util.Collection;
+
 import com.graphhopper.jsprit.analysis.toolbox.Plotter;
 import com.graphhopper.jsprit.core.algorithm.VehicleRoutingAlgorithm;
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
@@ -35,8 +37,6 @@
 import com.graphhopper.jsprit.instance.reader.SolomonReader;
 import com.graphhopper.jsprit.io.problem.VrpXMLWriter;
 
-import java.util.Collection;
-
 public class SolomonWithSkillsExample {
 
     public static void main(String[] args) {
@@ -51,32 +51,34 @@ public static void main(String[] args) {
         VehicleRoutingProblem.Builder skillProblemBuilder = VehicleRoutingProblem.Builder.newInstance();
         for (int i = 0; i < 5; i++) {
             VehicleImpl skill1Vehicle = VehicleImpl.Builder.newInstance("skill1_vehicle_" + i).addSkill("skill1")
-                .setStartLocation(Location.Builder.newInstance().setId(solomonVehicle.getStartLocation().getId()).setCoordinate(solomonVehicle.getStartLocation().getCoordinate()).build())
-                .setEarliestStart(solomonVehicle.getEarliestDeparture())
-                .setType(newType).build();
+                    .setStartLocation(Location.Builder.newInstance().setId(solomonVehicle.getStartLocation().getId())
+                            .setCoordinate(solomonVehicle.getStartLocation().getCoordinate()).build())
+                    .setEarliestStart(solomonVehicle.getEarliestDeparture())
+                    .setType(newType).build();
             VehicleImpl skill2Vehicle = VehicleImpl.Builder.newInstance("skill2_vehicle_" + i).addSkill("skill2")
-                .setStartLocation(Location.Builder.newInstance().setId(solomonVehicle.getStartLocation().getId())
-                    .setCoordinate(solomonVehicle.getStartLocation().getCoordinate()).build())
-                .setEarliestStart(solomonVehicle.getEarliestDeparture())
-                .setType(newType).build();
+                    .setStartLocation(Location.Builder.newInstance().setId(solomonVehicle.getStartLocation().getId())
+                            .setCoordinate(solomonVehicle.getStartLocation().getCoordinate()).build())
+                    .setEarliestStart(solomonVehicle.getEarliestDeparture())
+                    .setType(newType).build();
             skillProblemBuilder.addVehicle(skill1Vehicle).addVehicle(skill2Vehicle);
         }
         for (Job job : vrp.getJobs().values()) {
             Service service = (Service) job;
             Service.Builder skillServiceBuilder;
-            if (service.getLocation().getCoordinate().getY() < 50.) {
-                skillServiceBuilder = new Service.Builder(service.getId() + "_skill2").setServiceTime(service.getServiceDuration())
-                    .setLocation(Location.Builder.newInstance().setId(service.getLocation().getId())
-                        .setCoordinate(service.getLocation().getCoordinate()).build()).setTimeWindow(service.getTimeWindow())
-                    .addSizeDimension(0, service.getSize().get(0));
+            if (service.getActivity().getLocation().getCoordinate().getY() < 50.) {
+                skillServiceBuilder = new Service.Builder(service.getId() + "_skill2").setServiceTime(service.getActivity().getOperationTime())
+                        .setLocation(Location.Builder.newInstance().setId(service.getActivity().getLocation().getId())
+                                .setCoordinate(service.getActivity().getLocation().getCoordinate()).build())
+                        .addTimeWindows(service.getActivity().getTimeWindows())
+                        .addSizeDimension(0, service.getActivity().getLoadChange().get(0));
                 skillServiceBuilder.addRequiredSkill("skill2");
             } else {
-                skillServiceBuilder = new Service.Builder(service.getId() + "_skill1").setServiceTime(service.getServiceDuration())
-                    .setLocation(
-                        Location.Builder.newInstance().setId(service.getLocation().getId())
-                            .setCoordinate(service.getLocation().getCoordinate()).build()
-                    ).setTimeWindow(service.getTimeWindow())
-                    .addSizeDimension(0, service.getSize().get(0));
+                skillServiceBuilder = new Service.Builder(service.getId() + "_skill1").setServiceTime(service.getActivity().getOperationTime())
+                        .setLocation(
+                                Location.Builder.newInstance().setId(service.getActivity().getLocation().getId())
+                                        .setCoordinate(service.getActivity().getLocation().getCoordinate()).build())
+                        .addTimeWindows(service.getActivity().getTimeWindows())
+                        .addSizeDimension(0, service.getActivity().getLoadChange().get(0));
                 skillServiceBuilder.addRequiredSkill("skill1");
             }
             skillProblemBuilder.addJob(skillServiceBuilder.build());
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/TransportOfDisabledPeople.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/TransportOfDisabledPeople.java
index 9b2423f61..a0429fed3 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/TransportOfDisabledPeople.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/TransportOfDisabledPeople.java
@@ -17,6 +17,8 @@
  */
 package com.graphhopper.jsprit.examples;
 
+import java.util.Collection;
+
 import com.graphhopper.jsprit.analysis.toolbox.GraphStreamViewer;
 import com.graphhopper.jsprit.analysis.toolbox.GraphStreamViewer.Label;
 import com.graphhopper.jsprit.analysis.toolbox.Plotter;
@@ -30,7 +32,6 @@
 import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
 import com.graphhopper.jsprit.core.problem.constraint.HardRouteConstraint;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
-import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl.Builder;
@@ -41,8 +42,6 @@
 import com.graphhopper.jsprit.core.util.Solutions;
 import com.graphhopper.jsprit.util.Examples;
 
-import java.util.Collection;
-
 public class TransportOfDisabledPeople {
 
     static int WHEELCHAIRSPACE_INDEX = 0;
@@ -52,29 +51,29 @@
     public static void main(String[] args) {
         /*
          * some preparation - create output folder
-		 */
+         */
         Examples.createOutputFolder();
 
-		/*
+        /*
          * get a vehicle type-builder and build a type with the typeId "vehicleType" and a capacity of 2
-		 */
+         */
         VehicleTypeImpl.Builder wheelChairTypeBuilder = VehicleTypeImpl.Builder.newInstance("wheelChairBusType")
-            .addCapacityDimension(WHEELCHAIRSPACE_INDEX, 2) //can transport two people with wheelchair
-            .addCapacityDimension(PASSENGERSEATS_INDEX, 4); //and 4 without
+                .addCapacityDimension(WHEELCHAIRSPACE_INDEX, 2) //can transport two people with wheelchair
+                .addCapacityDimension(PASSENGERSEATS_INDEX, 4); //and 4 without
         VehicleType vehicleType_wheelchair = wheelChairTypeBuilder.build();
 
         VehicleTypeImpl.Builder soleyPassengerTypeBuilder = VehicleTypeImpl.Builder.newInstance("passengerBusType")
-            .addCapacityDimension(PASSENGERSEATS_INDEX, 6); //and 4 without
+                .addCapacityDimension(PASSENGERSEATS_INDEX, 6); //and 4 without
         VehicleType vehicleType_solelypassenger = soleyPassengerTypeBuilder.build();
 
-		/*
+        /*
          * define two vehicles and their locations.
-		 *
-		 * this example employs two vehicles. one that has to return to its start-location (vehicle1) and one that has a different
-		 * end-location.
-		 *
-		 * play with these location to see which impact they have on customer-sequences.
-		 */
+         *
+         * this example employs two vehicles. one that has to return to its start-location (vehicle1) and one that has a
+         * different end-location.
+         *
+         * play with these location to see which impact they have on customer-sequences.
+         */
         Builder vehicleBuilder1 = VehicleImpl.Builder.newInstance("wheelchair_bus");
         vehicleBuilder1.setStartLocation(loc(Coordinate.newInstance(10, 10)));
         vehicleBuilder1.setType(vehicleType_wheelchair);
@@ -96,39 +95,59 @@ public static void main(String[] args) {
         VehicleImpl vehicle2_2 = vehicleBuilder2_2.build();
 
 
-		/*
+        /*
          * build shipments at the required locations, each with a capacity-demand of 1.
-		 *
-		 */
-        Shipment shipment1 = Shipment.Builder.newInstance("wheelchair_1").addSizeDimension(WHEELCHAIRSPACE_INDEX, 1).setPickupLocation(loc(Coordinate.newInstance(5, 7))).setDeliveryLocation(loc(Coordinate.newInstance(6, 9))).build();
-        Shipment shipment2 = Shipment.Builder.newInstance("2").addSizeDimension(PASSENGERSEATS_INDEX, 1).setPickupLocation(loc(Coordinate.newInstance(5, 13))).setDeliveryLocation(loc(Coordinate.newInstance(6, 11))).build();
-
-        Shipment shipment3 = Shipment.Builder.newInstance("wheelchair_2").addSizeDimension(WHEELCHAIRSPACE_INDEX, 1).setPickupLocation(loc(Coordinate.newInstance(15, 7))).setDeliveryLocation(loc(Coordinate.newInstance(14, 9))).build();
-        Shipment shipment4 = Shipment.Builder.newInstance("4").addSizeDimension(PASSENGERSEATS_INDEX, 1).setPickupLocation(loc(Coordinate.newInstance(15, 13))).setDeliveryLocation(loc(Coordinate.newInstance(14, 11))).build();
-
-        Shipment shipment5 = Shipment.Builder.newInstance("wheelchair_3").addSizeDimension(WHEELCHAIRSPACE_INDEX, 1).setPickupLocation(loc(Coordinate.newInstance(25, 27))).setDeliveryLocation(loc(Coordinate.newInstance(26, 29))).build();
-        Shipment shipment6 = Shipment.Builder.newInstance("6").addSizeDimension(PASSENGERSEATS_INDEX, 1).setPickupLocation(loc(Coordinate.newInstance(25, 33))).setDeliveryLocation(loc(Coordinate.newInstance(26, 31))).build();
-
-        Shipment shipment7 = Shipment.Builder.newInstance("7").addSizeDimension(PASSENGERSEATS_INDEX, 1).setPickupLocation(loc(Coordinate.newInstance(35, 27))).setDeliveryLocation(loc(Coordinate.newInstance(34, 29))).build();
-        Shipment shipment8 = Shipment.Builder.newInstance("wheelchair_4").addSizeDimension(WHEELCHAIRSPACE_INDEX, 1).setPickupLocation(loc(Coordinate.newInstance(35, 33))).setDeliveryLocation(loc(Coordinate.newInstance(34, 31))).build();
-
-        Shipment shipment9 = Shipment.Builder.newInstance("9").addSizeDimension(PASSENGERSEATS_INDEX, 1).setPickupLocation(loc(Coordinate.newInstance(5, 27))).setDeliveryLocation(loc(Coordinate.newInstance(6, 29))).build();
-        Shipment shipment10 = Shipment.Builder.newInstance("wheelchair_5").addSizeDimension(WHEELCHAIRSPACE_INDEX, 1).setPickupLocation(loc(Coordinate.newInstance(5, 33))).setDeliveryLocation(loc(Coordinate.newInstance(6, 31))).build();
-
-        Shipment shipment11 = Shipment.Builder.newInstance("11").addSizeDimension(PASSENGERSEATS_INDEX, 1).setPickupLocation(loc(Coordinate.newInstance(15, 27))).setDeliveryLocation(loc(Coordinate.newInstance(14, 29))).build();
-        Shipment shipment12 = Shipment.Builder.newInstance("wheelchair_6").addSizeDimension(WHEELCHAIRSPACE_INDEX, 1).setPickupLocation(loc(Coordinate.newInstance(15, 33))).setDeliveryLocation(loc(Coordinate.newInstance(14, 31))).build();
-
-        Shipment shipment13 = Shipment.Builder.newInstance("13").addSizeDimension(PASSENGERSEATS_INDEX, 1).setPickupLocation(loc(Coordinate.newInstance(25, 7))).setDeliveryLocation(loc(Coordinate.newInstance(26, 9))).build();
-        Shipment shipment14 = Shipment.Builder.newInstance("wheelchair_7").addSizeDimension(WHEELCHAIRSPACE_INDEX, 1).setPickupLocation(loc(Coordinate.newInstance(25, 13))).setDeliveryLocation(loc(Coordinate.newInstance(26, 11))).build();
-
-        Shipment shipment15 = Shipment.Builder.newInstance("15").addSizeDimension(PASSENGERSEATS_INDEX, 1).setPickupLocation(loc(Coordinate.newInstance(35, 7))).setDeliveryLocation(loc(Coordinate.newInstance(34, 9))).build();
-        Shipment shipment16 = Shipment.Builder.newInstance("wheelchair_8").addSizeDimension(WHEELCHAIRSPACE_INDEX, 1).setPickupLocation(loc(Coordinate.newInstance(35, 13))).setDeliveryLocation(loc(Coordinate.newInstance(34, 11))).build();
-
-        Shipment shipment17 = Shipment.Builder.newInstance("17").addSizeDimension(PASSENGERSEATS_INDEX, 1).setPickupLocation(loc(Coordinate.newInstance(5, 14))).setDeliveryLocation(loc(Coordinate.newInstance(6, 16))).build();
-        Shipment shipment18 = Shipment.Builder.newInstance("wheelchair_9").addSizeDimension(WHEELCHAIRSPACE_INDEX, 1).setPickupLocation(loc(Coordinate.newInstance(5, 20))).setDeliveryLocation(loc(Coordinate.newInstance(6, 18))).build();
-
-        Shipment shipment19 = Shipment.Builder.newInstance("19").addSizeDimension(PASSENGERSEATS_INDEX, 1).setPickupLocation(loc(Coordinate.newInstance(15, 14))).setDeliveryLocation(loc(Coordinate.newInstance(14, 16))).build();
-        Shipment shipment20 = Shipment.Builder.newInstance("wheelchair_10").addSizeDimension(WHEELCHAIRSPACE_INDEX, 1).setPickupLocation(loc(Coordinate.newInstance(15, 20))).setDeliveryLocation(loc(Coordinate.newInstance(14, 18))).build();
+         *
+         */
+        Shipment shipment1 = Shipment.Builder.newInstance("wheelchair_1").addSizeDimension(WHEELCHAIRSPACE_INDEX, 1)
+                .setPickupLocation(loc(Coordinate.newInstance(5, 7))).setDeliveryLocation(loc(Coordinate.newInstance(6, 9))).build();
+        Shipment shipment2 = Shipment.Builder.newInstance("2").addSizeDimension(PASSENGERSEATS_INDEX, 1).setPickupLocation(loc(Coordinate.newInstance(5, 13)))
+                .setDeliveryLocation(loc(Coordinate.newInstance(6, 11))).build();
+
+        Shipment shipment3 = Shipment.Builder.newInstance("wheelchair_2").addSizeDimension(WHEELCHAIRSPACE_INDEX, 1)
+                .setPickupLocation(loc(Coordinate.newInstance(15, 7))).setDeliveryLocation(loc(Coordinate.newInstance(14, 9))).build();
+        Shipment shipment4 = Shipment.Builder.newInstance("4").addSizeDimension(PASSENGERSEATS_INDEX, 1).setPickupLocation(loc(Coordinate.newInstance(15, 13)))
+                .setDeliveryLocation(loc(Coordinate.newInstance(14, 11))).build();
+
+        Shipment shipment5 = Shipment.Builder.newInstance("wheelchair_3").addSizeDimension(WHEELCHAIRSPACE_INDEX, 1)
+                .setPickupLocation(loc(Coordinate.newInstance(25, 27))).setDeliveryLocation(loc(Coordinate.newInstance(26, 29))).build();
+        Shipment shipment6 = Shipment.Builder.newInstance("6").addSizeDimension(PASSENGERSEATS_INDEX, 1).setPickupLocation(loc(Coordinate.newInstance(25, 33)))
+                .setDeliveryLocation(loc(Coordinate.newInstance(26, 31))).build();
+
+        Shipment shipment7 = Shipment.Builder.newInstance("7").addSizeDimension(PASSENGERSEATS_INDEX, 1).setPickupLocation(loc(Coordinate.newInstance(35, 27)))
+                .setDeliveryLocation(loc(Coordinate.newInstance(34, 29))).build();
+        Shipment shipment8 = Shipment.Builder.newInstance("wheelchair_4").addSizeDimension(WHEELCHAIRSPACE_INDEX, 1)
+                .setPickupLocation(loc(Coordinate.newInstance(35, 33))).setDeliveryLocation(loc(Coordinate.newInstance(34, 31))).build();
+
+        Shipment shipment9 = Shipment.Builder.newInstance("9").addSizeDimension(PASSENGERSEATS_INDEX, 1).setPickupLocation(loc(Coordinate.newInstance(5, 27)))
+                .setDeliveryLocation(loc(Coordinate.newInstance(6, 29))).build();
+        Shipment shipment10 = Shipment.Builder.newInstance("wheelchair_5").addSizeDimension(WHEELCHAIRSPACE_INDEX, 1)
+                .setPickupLocation(loc(Coordinate.newInstance(5, 33))).setDeliveryLocation(loc(Coordinate.newInstance(6, 31))).build();
+
+        Shipment shipment11 = Shipment.Builder.newInstance("11").addSizeDimension(PASSENGERSEATS_INDEX, 1)
+                .setPickupLocation(loc(Coordinate.newInstance(15, 27))).setDeliveryLocation(loc(Coordinate.newInstance(14, 29))).build();
+        Shipment shipment12 = Shipment.Builder.newInstance("wheelchair_6").addSizeDimension(WHEELCHAIRSPACE_INDEX, 1)
+                .setPickupLocation(loc(Coordinate.newInstance(15, 33))).setDeliveryLocation(loc(Coordinate.newInstance(14, 31))).build();
+
+        Shipment shipment13 = Shipment.Builder.newInstance("13").addSizeDimension(PASSENGERSEATS_INDEX, 1).setPickupLocation(loc(Coordinate.newInstance(25, 7)))
+                .setDeliveryLocation(loc(Coordinate.newInstance(26, 9))).build();
+        Shipment shipment14 = Shipment.Builder.newInstance("wheelchair_7").addSizeDimension(WHEELCHAIRSPACE_INDEX, 1)
+                .setPickupLocation(loc(Coordinate.newInstance(25, 13))).setDeliveryLocation(loc(Coordinate.newInstance(26, 11))).build();
+
+        Shipment shipment15 = Shipment.Builder.newInstance("15").addSizeDimension(PASSENGERSEATS_INDEX, 1).setPickupLocation(loc(Coordinate.newInstance(35, 7)))
+                .setDeliveryLocation(loc(Coordinate.newInstance(34, 9))).build();
+        Shipment shipment16 = Shipment.Builder.newInstance("wheelchair_8").addSizeDimension(WHEELCHAIRSPACE_INDEX, 1)
+                .setPickupLocation(loc(Coordinate.newInstance(35, 13))).setDeliveryLocation(loc(Coordinate.newInstance(34, 11))).build();
+
+        Shipment shipment17 = Shipment.Builder.newInstance("17").addSizeDimension(PASSENGERSEATS_INDEX, 1).setPickupLocation(loc(Coordinate.newInstance(5, 14)))
+                .setDeliveryLocation(loc(Coordinate.newInstance(6, 16))).build();
+        Shipment shipment18 = Shipment.Builder.newInstance("wheelchair_9").addSizeDimension(WHEELCHAIRSPACE_INDEX, 1)
+                .setPickupLocation(loc(Coordinate.newInstance(5, 20))).setDeliveryLocation(loc(Coordinate.newInstance(6, 18))).build();
+
+        Shipment shipment19 = Shipment.Builder.newInstance("19").addSizeDimension(PASSENGERSEATS_INDEX, 1)
+                .setPickupLocation(loc(Coordinate.newInstance(15, 14))).setDeliveryLocation(loc(Coordinate.newInstance(14, 16))).build();
+        Shipment shipment20 = Shipment.Builder.newInstance("wheelchair_10").addSizeDimension(WHEELCHAIRSPACE_INDEX, 1)
+                .setPickupLocation(loc(Coordinate.newInstance(15, 20))).setDeliveryLocation(loc(Coordinate.newInstance(14, 18))).build();
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addVehicle(vehicle1).addVehicle(vehicle2).addVehicle(vehicle1_2).addVehicle(vehicle2_2);
@@ -141,24 +160,21 @@ public static void main(String[] args) {
         //you only have two vehicles
         vrpBuilder.setFleetSize(FleetSize.FINITE);
 
-		/*
+        /*
          *
-		 * wheelchair-bus can only pickup passenger where x<15
-		 */
-        HardRouteConstraint wheelchair_bus_passenger_pickup_constraint = new HardRouteConstraint() {
-
-            @Override
-            public boolean fulfilled(JobInsertionContext insertionContext) {
-                Shipment shipment2insert = ((Shipment) insertionContext.getJob());
-                if (insertionContext.getNewVehicle().getId().equals("wheelchair_bus")) {
-                    if (shipment2insert.getSize().get(PASSENGERSEATS_INDEX) > 0) {
-                        if (shipment2insert.getPickupLocation().getCoordinate().getX() > 15. || shipment2insert.getDeliveryLocation().getCoordinate().getX() > 15.) {
-                            return false;
-                        }
+         * wheelchair-bus can only pickup passenger where x<15
+         */
+        HardRouteConstraint wheelchair_bus_passenger_pickup_constraint = insertionContext -> {
+            Shipment shipment2insert = ((Shipment) insertionContext.getJob());
+            if (insertionContext.getNewVehicle().getId().equals("wheelchair_bus")) {
+                if (shipment2insert.getSize().get(PASSENGERSEATS_INDEX) > 0) {
+                    if (shipment2insert.getPickupActivity().getLocation().getCoordinate().getX() > 15.
+                            || shipment2insert.getDeliveryActivity().getLocation().getCoordinate().getX() > 15.) {
+                        return false;
                     }
                 }
-                return true;
             }
+            return true;
         };
 
         //build the problem
@@ -173,29 +189,29 @@ public boolean fulfilled(JobInsertionContext insertionContext) {
         VehicleRoutingAlgorithm algorithm = Jsprit.Builder.newInstance(problem).setStateAndConstraintManager(stateManager, constraintManager).buildAlgorithm();
         algorithm.setPrematureAlgorithmTermination(new IterationWithoutImprovementTermination(100));
 
-		/*
+        /*
          * and search a solution
-		 */
+         */
         Collection<VehicleRoutingProblemSolution> solutions = algorithm.searchSolutions();
 
-		/*
+        /*
          * get the best
-		 */
+         */
         VehicleRoutingProblemSolution bestSolution = Solutions.bestOf(solutions);
 
-		/*
+        /*
          * write out problem and solution to xml-file
-		 */
+         */
 //		new VrpXMLWriter(problem, solutions).write("output/shipment-problem-with-solution.xml");
 
-		/*
-		 * print nRoutes and totalCosts of bestSolution
-		 */
+        /*
+         * print nRoutes and totalCosts of bestSolution
+         */
         SolutionPrinter.print(problem, bestSolution, SolutionPrinter.Print.VERBOSE);
 
-		/*
-		 * plot problem without solution
-		 */
+        /*
+         * plot problem without solution
+         */
         Plotter problemPlotter = new Plotter(problem);
         problemPlotter.plotShipments(true);
         problemPlotter.setLabel(Plotter.Label.SIZE);
diff --git a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/LopezIbanezBlumReader.java b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/LopezIbanezBlumReader.java
index 7c65d85c3..28ef86046 100644
--- a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/LopezIbanezBlumReader.java
+++ b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/LopezIbanezBlumReader.java
@@ -18,25 +18,27 @@
 
 package com.graphhopper.jsprit.instance.reader;
 
+import java.io.BufferedReader;
+import java.io.FileNotFoundException;
+import java.io.FileReader;
+import java.io.IOException;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Service;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.util.FastVehicleRoutingTransportCostsMatrix;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.io.BufferedReader;
-import java.io.FileNotFoundException;
-import java.io.FileReader;
-import java.io.IOException;
 
 /**
  * Created by schroeder on 18/02/15.
  */
 public class LopezIbanezBlumReader {
 
+    @SuppressWarnings("unused")
     private static Logger logger = LoggerFactory.getLogger(LopezIbanezBlumReader.class);
 
     private VehicleRoutingProblem.Builder builder;
@@ -53,7 +55,9 @@ public void read(String instanceFile) {
         int lineCount = 1;
         FastVehicleRoutingTransportCostsMatrix.Builder matrixBuilder = null;
         while ((line = readLine(reader)) != null) {
-            if (line.startsWith("#")) continue;
+            if (line.startsWith("#")) {
+                continue;
+            }
             if (lineCount == 1) {
                 noNodes = Integer.parseInt(line);
                 matrixBuilder = FastVehicleRoutingTransportCostsMatrix.Builder.newInstance(noNodes, false);
@@ -73,11 +77,11 @@ public void read(String instanceFile) {
                 String[] twTokens = line.split("\\s+");
                 if (nodeIndex == 0) {
                     VehicleImpl travelingSalesman = VehicleImpl.Builder.newInstance("traveling_salesman").setStartLocation(Location.newInstance(nodeIndex))
-                        .setEarliestStart(Double.parseDouble(twTokens[0])).setLatestArrival(Double.parseDouble(twTokens[1])).build();
+                            .setEarliestStart(Double.parseDouble(twTokens[0])).setLatestArrival(Double.parseDouble(twTokens[1])).build();
                     builder.addVehicle(travelingSalesman);
                 } else {
                     Service s = new Service.Builder("" + nodeIndex).setLocation(Location.newInstance(nodeIndex))
-                        .setTimeWindow(TimeWindow.newInstance(Double.parseDouble(twTokens[0]), Double.parseDouble(twTokens[1]))).build();
+                            .setTimeWindow(TimeWindow.newInstance(Double.parseDouble(twTokens[0]), Double.parseDouble(twTokens[1]))).build();
                     builder.addJob(s);
                 }
                 lineCount++;
@@ -95,9 +99,12 @@ public static void main(String[] args) {
         System.out.println("0->20: " + vrp.getTransportCosts().getTransportCost(Location.newInstance(0), Location.newInstance(20), 0, null, null));
         System.out.println("4->18: " + vrp.getTransportCosts().getTransportCost(Location.newInstance(4), Location.newInstance(18), 0, null, null));
         System.out.println("20->8: " + vrp.getTransportCosts().getTransportCost(Location.newInstance(20), Location.newInstance(8), 0, null, null));
-        System.out.println("18: " + ((Service) vrp.getJobs().get("" + 18)).getTimeWindow().getStart() + " " + ((Service) vrp.getJobs().get("" + 18)).getTimeWindow().getEnd());
-        System.out.println("20: " + ((Service) vrp.getJobs().get("" + 20)).getTimeWindow().getStart() + " " + ((Service) vrp.getJobs().get("" + 20)).getTimeWindow().getEnd());
-        System.out.println("1: " + ((Service) vrp.getJobs().get("" + 1)).getTimeWindow().getStart() + " " + ((Service) vrp.getJobs().get("" + 1)).getTimeWindow().getEnd());
+        System.out.println("18: " + ((Service) vrp.getJobs().get("" + 18)).getActivity().getSingleTimeWindow().getStart() + " "
+                + ((Service) vrp.getJobs().get("" + 18)).getActivity().getSingleTimeWindow().getEnd());
+        System.out.println("20: " + ((Service) vrp.getJobs().get("" + 20)).getActivity().getSingleTimeWindow().getStart() + " "
+                + ((Service) vrp.getJobs().get("" + 20)).getActivity().getSingleTimeWindow().getEnd());
+        System.out.println("1: " + ((Service) vrp.getJobs().get("" + 1)).getActivity().getSingleTimeWindow().getStart() + " "
+                + ((Service) vrp.getJobs().get("" + 1)).getActivity().getSingleTimeWindow().getEnd());
     }
 
     private void close(BufferedReader reader) {
diff --git a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/TSPLIB95Reader.java b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/TSPLIB95Reader.java
index 829236db7..db119e5c3 100644
--- a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/TSPLIB95Reader.java
+++ b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/TSPLIB95Reader.java
@@ -18,6 +18,16 @@
 
 package com.graphhopper.jsprit.instance.reader;
 
+import java.io.BufferedReader;
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.FileReader;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
@@ -29,12 +39,6 @@
 import com.graphhopper.jsprit.core.util.Coordinate;
 import com.graphhopper.jsprit.core.util.FastVehicleRoutingTransportCostsMatrix;
 
-import java.io.*;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
 
 public class TSPLIB95Reader {
 
@@ -131,19 +135,24 @@ public void read(String filename) {
                 continue;
             }
             if (isCoordSection) {
-                if (coords == null) throw new IllegalStateException("DIMENSION tag missing");
+                if (coords == null) {
+                    throw new IllegalStateException("DIMENSION tag missing");
+                }
                 String[] tokens = line.trim().split("\\s+");
                 Integer id = Integer.parseInt(tokens[0]);
                 if (switchCoordinates) {
                     coords[coordIndex] = Coordinate.newInstance(Double.parseDouble(tokens[2]), Double.parseDouble(tokens[1]));
-                } else
+                } else {
                     coords[coordIndex] = Coordinate.newInstance(Double.parseDouble(tokens[1]), Double.parseDouble(tokens[2]));
+                }
                 indexMap.put(id, coordIndex);
                 coordIndex++;
                 continue;
             }
             if (isDemandSection) {
-                if (demands == null) throw new IllegalStateException("DIMENSION tag missing");
+                if (demands == null) {
+                    throw new IllegalStateException("DIMENSION tag missing");
+                }
                 String[] tokens = line.trim().split("\\s+");
                 Integer id = Integer.parseInt(tokens[0]);
                 int index = indexMap.get(id);
@@ -160,7 +169,9 @@ public void read(String filename) {
             }
             if (isEdgeWeightSection) {
                 String[] tokens = line.trim().split("\\s+");
-                for (String s : tokens) edgeWeights.add(Double.parseDouble(s));
+                for (String s : tokens) {
+                    edgeWeights.add(Double.parseDouble(s));
+                }
                 continue;
             }
         }
@@ -169,8 +180,8 @@ public void read(String filename) {
         for (Integer depotId : depotIds) {
             VehicleTypeImpl type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0, capacity).build();
             VehicleImpl vehicle = VehicleImpl.Builder.newInstance("vehicle")
-                .setStartLocation(Location.Builder.newInstance().setId(depotId.toString()).setCoordinate(coords[depotId - 1]).build())
-                .setType(type).build();
+                    .setStartLocation(Location.Builder.newInstance().setId(depotId.toString()).setCoordinate(coords[depotId - 1]).build())
+                    .setType(type).build();
             vrpBuilder.addVehicle(vehicle);
         }
 
@@ -180,23 +191,27 @@ public void read(String filename) {
             if (depotIds.isEmpty()) {
                 if (index == 0) {
                     VehicleImpl vehicle = VehicleImpl.Builder.newInstance("traveling_salesman")
-                        .setStartLocation(Location.Builder.newInstance().setId(id)
-                            .setCoordinate(coords[index]).setIndex(index).build())
-                        .build();
+                            .setStartLocation(Location.Builder.newInstance().setId(id)
+                                    .setCoordinate(coords[index]).setIndex(index).build())
+                            .build();
                     vrpBuilder.addVehicle(vehicle);
                     continue;
                 }
             }
             Service service = new Service.Builder(id)
-                .setLocation(Location.Builder.newInstance().setId(id)
-                    .setCoordinate(coords[index]).setIndex(index).build())
-                .addSizeDimension(0, demands[index]).build();
+                    .setLocation(Location.Builder.newInstance().setId(id)
+                            .setCoordinate(coords[index]).setIndex(index).build())
+                    .addSizeDimension(0, demands[index]).build();
             vrpBuilder.addJob(service);
         }
         if (edgeType.equals("GEO")) {
             List<Location> locations = new ArrayList<Location>();
-            for (Vehicle v : vrpBuilder.getAddedVehicles()) locations.add(v.getStartLocation());
-            for (Job j : vrpBuilder.getAddedJobs()) locations.add(((Service) j).getLocation());
+            for (Vehicle v : vrpBuilder.getAddedVehicles()) {
+                locations.add(v.getStartLocation());
+            }
+            for (Job j : vrpBuilder.getAddedJobs()) {
+                locations.add(((Service) j).getActivity().getLocation());
+            }
             vrpBuilder.setRoutingCost(getGEOMatrix(locations));
         } else if (edgeType.equals("EXPLICIT")) {
             if (edgeWeightFormat.equals("UPPER_ROW")) {
diff --git a/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/BelhaizaReaderTest.java b/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/BelhaizaReaderTest.java
index 98a4e62cb..490eeb505 100644
--- a/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/BelhaizaReaderTest.java
+++ b/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/BelhaizaReaderTest.java
@@ -98,7 +98,7 @@ public void whenReadingBelhaizaInstance_serviceDurationOfCustomerTwoIsCorrect()
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new BelhaizaReader(builder).read(getPath());
         VehicleRoutingProblem vrp = builder.build();
-        assertEquals(90, ((Service) vrp.getJobs().get("2")).getServiceDuration(), 0.1);
+        assertEquals(90, ((Service) vrp.getJobs().get("2")).getActivity().getOperationTime(), 0.1);
     }
 
     @Test
diff --git a/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/ChristophidesReaderTest.java b/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/ChristophidesReaderTest.java
index c97ece608..57955f01f 100644
--- a/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/ChristophidesReaderTest.java
+++ b/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/ChristophidesReaderTest.java
@@ -17,15 +17,16 @@
  */
 package com.graphhopper.jsprit.instance.reader;
 
+import static org.junit.Assert.assertEquals;
+
+import java.net.URL;
+
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
 import com.graphhopper.jsprit.core.problem.job.Service;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
-import org.junit.Test;
-
-import java.net.URL;
-
-import static org.junit.Assert.assertEquals;
 
 
 public class ChristophidesReaderTest {
@@ -40,7 +41,9 @@ public void whenReadingInstance_nuOfCustomersIsCorrect() {
 
     private String getPath(String string) {
         URL resource = this.getClass().getClassLoader().getResource(string);
-        if (resource == null) throw new IllegalStateException("resource " + string + " does not exist");
+        if (resource == null) {
+            throw new IllegalStateException("resource " + string + " does not exist");
+        }
         return resource.getPath();
     }
 
@@ -97,7 +100,7 @@ public void whenReadingInstance_serviceDurationOfCustomerTwoIsCorrect() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new ChristofidesReader(builder).read(getPath("vrpnc13.txt"));
         VehicleRoutingProblem vrp = builder.build();
-        assertEquals(50.0, ((Service) vrp.getJobs().get("2")).getServiceDuration(), 0.1);
+        assertEquals(50.0, ((Service) vrp.getJobs().get("2")).getActivity().getOperationTime(), 0.1);
     }
 
 
diff --git a/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/CordeauReaderTest.java b/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/CordeauReaderTest.java
index 98cde30fc..ccf820a36 100644
--- a/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/CordeauReaderTest.java
+++ b/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/CordeauReaderTest.java
@@ -17,16 +17,17 @@
  */
 package com.graphhopper.jsprit.instance.reader;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
+import java.net.URL;
+
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
 import com.graphhopper.jsprit.core.problem.job.Service;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
-import org.junit.Test;
-
-import java.net.URL;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
 
 
 public class CordeauReaderTest {
@@ -41,7 +42,9 @@ public void testCordeauReader() {
 
     private String getPath(String string) {
         URL resource = this.getClass().getClassLoader().getResource(string);
-        if (resource == null) throw new IllegalStateException("resource " + string + " does not exist");
+        if (resource == null) {
+            throw new IllegalStateException("resource " + string + " does not exist");
+        }
         return resource.getPath();
     }
 
@@ -89,8 +92,8 @@ public void whenReadingCustomersCordeauInstance_customerOneShouldHaveCorrectCoor
         new CordeauReader(vrpBuilder).read(getPath("p01"));
         VehicleRoutingProblem vrp = vrpBuilder.build();
         Service service = (Service) vrp.getJobs().get("1");
-        assertEquals(37.0, service.getLocation().getCoordinate().getX(), 0.1);
-        assertEquals(52.0, service.getLocation().getCoordinate().getY(), 0.1);
+        assertEquals(37.0, service.getActivity().getLocation().getCoordinate().getX(), 0.1);
+        assertEquals(52.0, service.getActivity().getLocation().getCoordinate().getY(), 0.1);
     }
 
     @Test
@@ -99,7 +102,7 @@ public void whenReadingCustomersCordeauInstance_customerTwoShouldHaveCorrectServ
         new CordeauReader(vrpBuilder).read(getPath("p01"));
         VehicleRoutingProblem vrp = vrpBuilder.build();
         Service service = (Service) vrp.getJobs().get("2");
-        assertEquals(0.0, service.getServiceDuration(), 0.1);
+        assertEquals(0.0, service.getActivity().getOperationTime(), 0.1);
     }
 
     @Test
@@ -108,7 +111,7 @@ public void whenReadingCustomersCordeauInstance_customerThreeShouldHaveCorrectDe
         new CordeauReader(vrpBuilder).read(getPath("p01"));
         VehicleRoutingProblem vrp = vrpBuilder.build();
         Service service = (Service) vrp.getJobs().get("3");
-        assertEquals(16.0, service.getSize().get(0), 0.1);
+        assertEquals(16.0, service.getActivity().getLoadChange().get(0), 0.1);
     }
 
     @Test
@@ -117,7 +120,7 @@ public void whenReadingCustomersCordeauInstance_customerFortySevenShouldHaveCorr
         new CordeauReader(vrpBuilder).read(getPath("p01"));
         VehicleRoutingProblem vrp = vrpBuilder.build();
         Service service = (Service) vrp.getJobs().get("47");
-        assertEquals(25.0, service.getSize().get(0), 0.1);
+        assertEquals(25.0, service.getActivity().getLoadChange().get(0), 0.1);
     }
 
     @Test
@@ -131,15 +134,21 @@ public void testLocationsAndCapOfVehicles() {
         boolean loc3ok = false;
         boolean loc4ok = false;
         for (Vehicle v : vrp.getVehicles()) {
-            if (v.getType().getCapacityDimensions().get(0) != 80) capacityOk = false;
-            if (v.getStartLocation().getCoordinate().getX() == 20.0 && v.getStartLocation().getCoordinate().getY() == 20.0)
+            if (v.getType().getCapacityDimensions().get(0) != 80) {
+                capacityOk = false;
+            }
+            if (v.getStartLocation().getCoordinate().getX() == 20.0 && v.getStartLocation().getCoordinate().getY() == 20.0) {
                 loc1ok = true;
-            if (v.getStartLocation().getCoordinate().getX() == 30.0 && v.getStartLocation().getCoordinate().getY() == 40.0)
+            }
+            if (v.getStartLocation().getCoordinate().getX() == 30.0 && v.getStartLocation().getCoordinate().getY() == 40.0) {
                 loc2ok = true;
-            if (v.getStartLocation().getCoordinate().getX() == 50.0 && v.getStartLocation().getCoordinate().getY() == 30.0)
+            }
+            if (v.getStartLocation().getCoordinate().getX() == 50.0 && v.getStartLocation().getCoordinate().getY() == 30.0) {
                 loc3ok = true;
-            if (v.getStartLocation().getCoordinate().getX() == 60.0 && v.getStartLocation().getCoordinate().getY() == 50.0)
+            }
+            if (v.getStartLocation().getCoordinate().getX() == 60.0 && v.getStartLocation().getCoordinate().getY() == 50.0) {
                 loc4ok = true;
+            }
         }
         assertTrue(capacityOk);
         assertTrue(loc1ok);
diff --git a/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/FigliozziTest.java b/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/FigliozziTest.java
index 145076cf9..d9a111e90 100644
--- a/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/FigliozziTest.java
+++ b/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/FigliozziTest.java
@@ -19,14 +19,16 @@
 package com.graphhopper.jsprit.instance.reader;
 
 
-import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.util.Coordinate;
-import com.graphhopper.jsprit.core.util.Locations;
-import junit.framework.Assert;
+import static org.junit.Assert.assertEquals;
+
+import java.util.List;
+
 import org.junit.Before;
 import org.junit.Test;
 
-import java.util.List;
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.util.Coordinate;
+import com.graphhopper.jsprit.core.util.Locations;
 
 public class FigliozziTest {
 
@@ -37,147 +39,160 @@ public void doBefore() {
         final Coordinate from = Coordinate.newInstance(0, 0);
         final Coordinate to = Coordinate.newInstance(100, 0);
 
-        locations = new Locations() {
-
-            @Override
-            public Coordinate getCoord(String id) {
-                if (id.equals("from")) return from;
-                if (id.equals("to")) return to;
-                return null;
+        locations = id -> {
+            if (id.equals("from")) {
+                return from;
+            }
+            if (id.equals("to")) {
+                return to;
             }
+            return null;
         };
     }
 
     @Test
     public void factoryShouldReturnCorrectSpeedDistribution() {
-        List<Double> speedValues = Figliozzi.TimeDependentTransportCostsFactory.createSpeedValues(Figliozzi.TimeDependentTransportCostsFactory.SpeedDistribution.TD1a);
-        Assert.assertEquals(speedValues.get(0), 1., 0.01);
-        Assert.assertEquals(speedValues.get(1), 1.6, 0.01);
-        Assert.assertEquals(speedValues.get(2), 1.05, 0.01);
-        Assert.assertEquals(5, speedValues.size());
+        List<Double> speedValues = Figliozzi.TimeDependentTransportCostsFactory
+                .createSpeedValues(Figliozzi.TimeDependentTransportCostsFactory.SpeedDistribution.TD1a);
+        assertEquals(speedValues.get(0), 1., 0.01);
+        assertEquals(speedValues.get(1), 1.6, 0.01);
+        assertEquals(speedValues.get(2), 1.05, 0.01);
+        assertEquals(5, speedValues.size());
     }
 
     @Test
     public void whenAskingForTD2a_factoryShouldReturnCorrectSpeedDistribution() {
-        List<Double> speedValues = Figliozzi.TimeDependentTransportCostsFactory.createSpeedValues(Figliozzi.TimeDependentTransportCostsFactory.SpeedDistribution.TD2a);
-        Assert.assertEquals(speedValues.get(0), 1., 0.01);
-        Assert.assertEquals(speedValues.get(1), 2., 0.01);
-        Assert.assertEquals(speedValues.get(2), 1.5, 0.01);
-        Assert.assertEquals(5, speedValues.size());
+        List<Double> speedValues = Figliozzi.TimeDependentTransportCostsFactory
+                .createSpeedValues(Figliozzi.TimeDependentTransportCostsFactory.SpeedDistribution.TD2a);
+        assertEquals(speedValues.get(0), 1., 0.01);
+        assertEquals(speedValues.get(1), 2., 0.01);
+        assertEquals(speedValues.get(2), 1.5, 0.01);
+        assertEquals(5, speedValues.size());
     }
 
     @Test
     public void whenAskingForTD3a_factoryShouldReturnCorrectSpeedDistribution() {
-        List<Double> speedValues = Figliozzi.TimeDependentTransportCostsFactory.createSpeedValues(Figliozzi.TimeDependentTransportCostsFactory.SpeedDistribution.TD3a);
-        Assert.assertEquals(speedValues.get(0), 1., 0.01);
-        Assert.assertEquals(speedValues.get(1), 2.5, 0.01);
-        Assert.assertEquals(speedValues.get(2), 1.75, 0.01);
-        Assert.assertEquals(5, speedValues.size());
+        List<Double> speedValues = Figliozzi.TimeDependentTransportCostsFactory
+                .createSpeedValues(Figliozzi.TimeDependentTransportCostsFactory.SpeedDistribution.TD3a);
+        assertEquals(speedValues.get(0), 1., 0.01);
+        assertEquals(speedValues.get(1), 2.5, 0.01);
+        assertEquals(speedValues.get(2), 1.75, 0.01);
+        assertEquals(5, speedValues.size());
     }
 
     @Test
     public void whenAskingForTD1b_factoryShouldReturnCorrectSpeedDistribution() {
-        List<Double> speedValues = Figliozzi.TimeDependentTransportCostsFactory.createSpeedValues(Figliozzi.TimeDependentTransportCostsFactory.SpeedDistribution.TD1b);
-        Assert.assertEquals(speedValues.get(0), 1.6, 0.01);
-        Assert.assertEquals(speedValues.get(1), 1., 0.01);
-        Assert.assertEquals(speedValues.get(2), 1.05, 0.01);
-        Assert.assertEquals(speedValues.get(3), 1., 0.01);
-        Assert.assertEquals(speedValues.get(4), 1.6, 0.01);
-        Assert.assertEquals(5, speedValues.size());
+        List<Double> speedValues = Figliozzi.TimeDependentTransportCostsFactory
+                .createSpeedValues(Figliozzi.TimeDependentTransportCostsFactory.SpeedDistribution.TD1b);
+        assertEquals(speedValues.get(0), 1.6, 0.01);
+        assertEquals(speedValues.get(1), 1., 0.01);
+        assertEquals(speedValues.get(2), 1.05, 0.01);
+        assertEquals(speedValues.get(3), 1., 0.01);
+        assertEquals(speedValues.get(4), 1.6, 0.01);
+        assertEquals(5, speedValues.size());
     }
 
     @Test
     public void whenAskingForTD2b_factoryShouldReturnCorrectSpeedDistribution() {
-        List<Double> speedValues = Figliozzi.TimeDependentTransportCostsFactory.createSpeedValues(Figliozzi.TimeDependentTransportCostsFactory.SpeedDistribution.TD2b);
-        Assert.assertEquals(speedValues.get(0), 2., 0.01);
-        Assert.assertEquals(speedValues.get(1), 1., 0.01);
-        Assert.assertEquals(speedValues.get(2), 1.5, 0.01);
-        Assert.assertEquals(speedValues.get(3), 1., 0.01);
-        Assert.assertEquals(speedValues.get(4), 2., 0.01);
-        Assert.assertEquals(5, speedValues.size());
+        List<Double> speedValues = Figliozzi.TimeDependentTransportCostsFactory
+                .createSpeedValues(Figliozzi.TimeDependentTransportCostsFactory.SpeedDistribution.TD2b);
+        assertEquals(speedValues.get(0), 2., 0.01);
+        assertEquals(speedValues.get(1), 1., 0.01);
+        assertEquals(speedValues.get(2), 1.5, 0.01);
+        assertEquals(speedValues.get(3), 1., 0.01);
+        assertEquals(speedValues.get(4), 2., 0.01);
+        assertEquals(5, speedValues.size());
     }
 
     @Test
     public void whenAskingForTD3b_factoryShouldReturnCorrectSpeedDistribution() {
-        List<Double> speedValues = Figliozzi.TimeDependentTransportCostsFactory.createSpeedValues(Figliozzi.TimeDependentTransportCostsFactory.SpeedDistribution.TD3b);
-        Assert.assertEquals(speedValues.get(0), 2.5, 0.01);
-        Assert.assertEquals(speedValues.get(1), 1., 0.01);
-        Assert.assertEquals(speedValues.get(2), 1.75, 0.01);
-        Assert.assertEquals(speedValues.get(3), 1., 0.01);
-        Assert.assertEquals(speedValues.get(4), 2.5, 0.01);
-        Assert.assertEquals(5, speedValues.size());
+        List<Double> speedValues = Figliozzi.TimeDependentTransportCostsFactory
+                .createSpeedValues(Figliozzi.TimeDependentTransportCostsFactory.SpeedDistribution.TD3b);
+        assertEquals(speedValues.get(0), 2.5, 0.01);
+        assertEquals(speedValues.get(1), 1., 0.01);
+        assertEquals(speedValues.get(2), 1.75, 0.01);
+        assertEquals(speedValues.get(3), 1., 0.01);
+        assertEquals(speedValues.get(4), 2.5, 0.01);
+        assertEquals(5, speedValues.size());
     }
 
     @Test
     public void whenAskingForTD1c_factoryShouldReturnCorrectSpeedDistribution() {
-        List<Double> speedValues = Figliozzi.TimeDependentTransportCostsFactory.createSpeedValues(Figliozzi.TimeDependentTransportCostsFactory.SpeedDistribution.TD1c);
-        Assert.assertEquals(speedValues.get(0), 1.6, 0.01);
-        Assert.assertEquals(speedValues.get(1), 1.6, 0.01);
-        Assert.assertEquals(speedValues.get(2), 1.05, 0.01);
-        Assert.assertEquals(speedValues.get(3), 1., 0.01);
-        Assert.assertEquals(speedValues.get(4), 1., 0.01);
-        Assert.assertEquals(5, speedValues.size());
+        List<Double> speedValues = Figliozzi.TimeDependentTransportCostsFactory
+                .createSpeedValues(Figliozzi.TimeDependentTransportCostsFactory.SpeedDistribution.TD1c);
+        assertEquals(speedValues.get(0), 1.6, 0.01);
+        assertEquals(speedValues.get(1), 1.6, 0.01);
+        assertEquals(speedValues.get(2), 1.05, 0.01);
+        assertEquals(speedValues.get(3), 1., 0.01);
+        assertEquals(speedValues.get(4), 1., 0.01);
+        assertEquals(5, speedValues.size());
     }
 
     @Test
     public void whenAskingForTD2c_factoryShouldReturnCorrectSpeedDistribution() {
-        List<Double> speedValues = Figliozzi.TimeDependentTransportCostsFactory.createSpeedValues(Figliozzi.TimeDependentTransportCostsFactory.SpeedDistribution.TD2c);
-        Assert.assertEquals(speedValues.get(0), 2., 0.01);
-        Assert.assertEquals(speedValues.get(1), 2., 0.01);
-        Assert.assertEquals(speedValues.get(2), 1.5, 0.01);
-        Assert.assertEquals(speedValues.get(3), 1., 0.01);
-        Assert.assertEquals(speedValues.get(4), 1., 0.01);
-        Assert.assertEquals(5, speedValues.size());
+        List<Double> speedValues = Figliozzi.TimeDependentTransportCostsFactory
+                .createSpeedValues(Figliozzi.TimeDependentTransportCostsFactory.SpeedDistribution.TD2c);
+        assertEquals(speedValues.get(0), 2., 0.01);
+        assertEquals(speedValues.get(1), 2., 0.01);
+        assertEquals(speedValues.get(2), 1.5, 0.01);
+        assertEquals(speedValues.get(3), 1., 0.01);
+        assertEquals(speedValues.get(4), 1., 0.01);
+        assertEquals(5, speedValues.size());
     }
 
     @Test
     public void whenAskingForTD3c_factoryShouldReturnCorrectSpeedDistribution() {
-        List<Double> speedValues = Figliozzi.TimeDependentTransportCostsFactory.createSpeedValues(Figliozzi.TimeDependentTransportCostsFactory.SpeedDistribution.TD3c);
-        Assert.assertEquals(speedValues.get(0), 2.5, 0.01);
-        Assert.assertEquals(speedValues.get(1), 2.5, 0.01);
-        Assert.assertEquals(speedValues.get(2), 1.75, 0.01);
-        Assert.assertEquals(speedValues.get(3), 1., 0.01);
-        Assert.assertEquals(speedValues.get(4), 1., 0.01);
-        Assert.assertEquals(5, speedValues.size());
+        List<Double> speedValues = Figliozzi.TimeDependentTransportCostsFactory
+                .createSpeedValues(Figliozzi.TimeDependentTransportCostsFactory.SpeedDistribution.TD3c);
+        assertEquals(speedValues.get(0), 2.5, 0.01);
+        assertEquals(speedValues.get(1), 2.5, 0.01);
+        assertEquals(speedValues.get(2), 1.75, 0.01);
+        assertEquals(speedValues.get(3), 1., 0.01);
+        assertEquals(speedValues.get(4), 1., 0.01);
+        assertEquals(5, speedValues.size());
     }
 
     @Test
     public void whenAskingForTD1d_factoryShouldReturnCorrectSpeedDistribution() {
-        List<Double> speedValues = Figliozzi.TimeDependentTransportCostsFactory.createSpeedValues(Figliozzi.TimeDependentTransportCostsFactory.SpeedDistribution.TD1d);
-        Assert.assertEquals(speedValues.get(0), 1., 0.01);
-        Assert.assertEquals(speedValues.get(1), 1., 0.01);
-        Assert.assertEquals(speedValues.get(2), 1.05, 0.01);
-        Assert.assertEquals(speedValues.get(3), 1.6, 0.01);
-        Assert.assertEquals(speedValues.get(4), 1.6, 0.01);
-        Assert.assertEquals(5, speedValues.size());
+        List<Double> speedValues = Figliozzi.TimeDependentTransportCostsFactory
+                .createSpeedValues(Figliozzi.TimeDependentTransportCostsFactory.SpeedDistribution.TD1d);
+        assertEquals(speedValues.get(0), 1., 0.01);
+        assertEquals(speedValues.get(1), 1., 0.01);
+        assertEquals(speedValues.get(2), 1.05, 0.01);
+        assertEquals(speedValues.get(3), 1.6, 0.01);
+        assertEquals(speedValues.get(4), 1.6, 0.01);
+        assertEquals(5, speedValues.size());
     }
 
     @Test
     public void whenAskingForTD2d_factoryShouldReturnCorrectSpeedDistribution() {
-        List<Double> speedValues = Figliozzi.TimeDependentTransportCostsFactory.createSpeedValues(Figliozzi.TimeDependentTransportCostsFactory.SpeedDistribution.TD2d);
-        Assert.assertEquals(speedValues.get(0), 1., 0.01);
-        Assert.assertEquals(speedValues.get(1), 1., 0.01);
-        Assert.assertEquals(speedValues.get(2), 1.5, 0.01);
-        Assert.assertEquals(speedValues.get(3), 2., 0.01);
-        Assert.assertEquals(speedValues.get(4), 2., 0.01);
-        Assert.assertEquals(5, speedValues.size());
+        List<Double> speedValues = Figliozzi.TimeDependentTransportCostsFactory
+                .createSpeedValues(Figliozzi.TimeDependentTransportCostsFactory.SpeedDistribution.TD2d);
+        assertEquals(speedValues.get(0), 1., 0.01);
+        assertEquals(speedValues.get(1), 1., 0.01);
+        assertEquals(speedValues.get(2), 1.5, 0.01);
+        assertEquals(speedValues.get(3), 2., 0.01);
+        assertEquals(speedValues.get(4), 2., 0.01);
+        assertEquals(5, speedValues.size());
     }
 
     @Test
     public void whenAskingForTD3d_factoryShouldReturnCorrectSpeedDistribution() {
-        List<Double> speedValues = Figliozzi.TimeDependentTransportCostsFactory.createSpeedValues(Figliozzi.TimeDependentTransportCostsFactory.SpeedDistribution.TD3d);
-        Assert.assertEquals(speedValues.get(0), 1., 0.01);
-        Assert.assertEquals(speedValues.get(1), 1., 0.01);
-        Assert.assertEquals(speedValues.get(2), 1.75, 0.01);
-        Assert.assertEquals(speedValues.get(3), 2.5, 0.01);
-        Assert.assertEquals(speedValues.get(4), 2.5, 0.01);
-        Assert.assertEquals(5, speedValues.size());
+        List<Double> speedValues = Figliozzi.TimeDependentTransportCostsFactory
+                .createSpeedValues(Figliozzi.TimeDependentTransportCostsFactory.SpeedDistribution.TD3d);
+        assertEquals(speedValues.get(0), 1., 0.01);
+        assertEquals(speedValues.get(1), 1., 0.01);
+        assertEquals(speedValues.get(2), 1.75, 0.01);
+        assertEquals(speedValues.get(3), 2.5, 0.01);
+        assertEquals(speedValues.get(4), 2.5, 0.01);
+        assertEquals(5, speedValues.size());
     }
 
     @Test
     public void whenConstantTimeDistribution_forwardTimeShouldBeCalculate100() {
-        Figliozzi.TDCosts tdCosts = Figliozzi.TimeDependentTransportCostsFactory.createCosts(locations, Figliozzi.TimeDependentTransportCostsFactory.SpeedDistribution.CLASSIC, 100);
-        Assert.assertEquals(100., tdCosts.getTransportTime(loc("from"), loc("to"), 0., null, null), 0.01);
+        Figliozzi.TDCosts tdCosts = Figliozzi.TimeDependentTransportCostsFactory.createCosts(locations,
+                Figliozzi.TimeDependentTransportCostsFactory.SpeedDistribution.CLASSIC, 100);
+        assertEquals(100., tdCosts.getTransportTime(loc("from"), loc("to"), 0., null, null), 0.01);
     }
 
     private Location loc(String from) {
@@ -186,291 +201,283 @@ private Location loc(String from) {
 
     @Test
     public void whenTimeDistributionTD1a_forwardTimeShouldBeCalculate100() {
-        Figliozzi.TDCosts tdCosts = Figliozzi.TimeDependentTransportCostsFactory.createCosts(locations, Figliozzi.TimeDependentTransportCostsFactory.SpeedDistribution.TD1a, 100);
+        Figliozzi.TDCosts tdCosts = Figliozzi.TimeDependentTransportCostsFactory.createCosts(locations,
+                Figliozzi.TimeDependentTransportCostsFactory.SpeedDistribution.TD1a, 100);
         /*
-        100
-        (0,20) - 1. --> 20
-        (20,40) 1.6 = s/t --> t = s / 1.6 = 20 * 1.6 = 32 : 52 --> 40
-        (40,60) 1.05 = 21 : 73 --> 60
-        (60,80) 1.6 = 20 * 1.6 = 32 --> 27 / 1.6 = 16.875 + 73 = -- 16.875
-
-         20
-
+         * 100 (0,20) - 1. --> 20 (20,40) 1.6 = s/t --> t = s / 1.6 = 20 * 1.6 = 32 : 52 --> 40 (40,60) 1.05 = 21 : 73
+         * --> 60 (60,80) 1.6 = 20 * 1.6 = 32 --> 27 / 1.6 = 16.875 + 73 = -- 16.875
+         * 
+         * 20
+         * 
          */
-        Assert.assertEquals(76.875, tdCosts.getTransportTime(loc("from"), loc("to"), 0., null, null), 0.01);
+        assertEquals(76.875, tdCosts.getTransportTime(loc("from"), loc("to"), 0., null, null), 0.01);
     }
 
     @Test
     public void whenTimeDistributionTD2a_forwardTimeShouldBeCalculate100() {
         //(1.,2.,1.5,2.,1.)
-        Figliozzi.TDCosts tdCosts = Figliozzi.TimeDependentTransportCostsFactory.createCosts(locations, Figliozzi.TimeDependentTransportCostsFactory.SpeedDistribution.TD2a, 100);
+        Figliozzi.TDCosts tdCosts = Figliozzi.TimeDependentTransportCostsFactory.createCosts(locations,
+                Figliozzi.TimeDependentTransportCostsFactory.SpeedDistribution.TD2a, 100);
         /*
-        100
-        (0,20) - 1. --> 20 dist, 20 time
-        (20,40) 2. = 20 --> 40 dist, 20 time : 60 dist, 40 time
-        (40,60) 1.5 = 30 dist, 20 time : 90 dist, 60 time
-        (60,80) 2. = 10 dist, 5 time : 100 dist, 65 time
-
-         20
-
+         * 100 (0,20) - 1. --> 20 dist, 20 time (20,40) 2. = 20 --> 40 dist, 20 time : 60 dist, 40 time (40,60) 1.5 = 30
+         * dist, 20 time : 90 dist, 60 time (60,80) 2. = 10 dist, 5 time : 100 dist, 65 time
+         * 
+         * 20
+         * 
          */
-        Assert.assertEquals(65., tdCosts.getTransportTime(loc("from"), loc("to"), 0., null, null), 0.01);
+        assertEquals(65., tdCosts.getTransportTime(loc("from"), loc("to"), 0., null, null), 0.01);
     }
 
     @Test
     public void whenTimeDistributionTD3a_forwardTimeShouldBeCalculate100() {
         //(1.,2.5,1.75,2.5,1.)
-        Figliozzi.TDCosts tdCosts = Figliozzi.TimeDependentTransportCostsFactory.createCosts(locations, Figliozzi.TimeDependentTransportCostsFactory.SpeedDistribution.TD3a, 100);
+        Figliozzi.TDCosts tdCosts = Figliozzi.TimeDependentTransportCostsFactory.createCosts(locations,
+                Figliozzi.TimeDependentTransportCostsFactory.SpeedDistribution.TD3a, 100);
         /*
-        100
-        (0,20) - 1. --> 20 dist, 20 time
-        (20,40) 2.5 = 20 --> 50 dist, 20 time : 70 dist, 40 time
-        (40,60) 1.75 = 30 dist, 17.1428571429 time : 100 dist, 57.1428571429 time
-        */
-        Assert.assertEquals(57.1428571429, tdCosts.getTransportTime(loc("from"), loc("to"), 0., null, null), 0.01);
+         * 100 (0,20) - 1. --> 20 dist, 20 time (20,40) 2.5 = 20 --> 50 dist, 20 time : 70 dist, 40 time (40,60) 1.75 =
+         * 30 dist, 17.1428571429 time : 100 dist, 57.1428571429 time
+         */
+        assertEquals(57.1428571429, tdCosts.getTransportTime(loc("from"), loc("to"), 0., null, null), 0.01);
     }
 
     @Test
     public void whenTimeDistributionTD2a_backwardTimeShouldBeCalculate100() {
         //(1.,2.,1.5,2.,1.)
-        Figliozzi.TDCosts tdCosts = Figliozzi.TimeDependentTransportCostsFactory.createCosts(locations, Figliozzi.TimeDependentTransportCostsFactory.SpeedDistribution.TD2a, 100);
+        Figliozzi.TDCosts tdCosts = Figliozzi.TimeDependentTransportCostsFactory.createCosts(locations,
+                Figliozzi.TimeDependentTransportCostsFactory.SpeedDistribution.TD2a, 100);
         /*
-        100
-        (0,20) - 1. --> 20 dist, 20 time
-        (20,40) 2. = 20 --> 40 dist, 20 time : 60 dist, 40 time
-        (40,60) 1.5 = 30 dist, 20 time : 90 dist, 60 time
-        (60,80) 2. = 10 dist, 5 time : 100 dist, 65 time
-
-         20
-
+         * 100 (0,20) - 1. --> 20 dist, 20 time (20,40) 2. = 20 --> 40 dist, 20 time : 60 dist, 40 time (40,60) 1.5 = 30
+         * dist, 20 time : 90 dist, 60 time (60,80) 2. = 10 dist, 5 time : 100 dist, 65 time
+         * 
+         * 20
+         * 
          */
-        Assert.assertEquals(65., tdCosts.getBackwardTransportTime(loc("from"), loc("to"), 100., null, null), 0.01);
+        assertEquals(65., tdCosts.getBackwardTransportTime(loc("from"), loc("to"), 100., null, null), 0.01);
     }
 
     @Test
     public void whenTimeDistributionTD1a_backwardTimeShouldBeCalculate100() {
-        Figliozzi.TDCosts tdCosts = Figliozzi.TimeDependentTransportCostsFactory.createCosts(locations, Figliozzi.TimeDependentTransportCostsFactory.SpeedDistribution.TD1a, 100);
+        Figliozzi.TDCosts tdCosts = Figliozzi.TimeDependentTransportCostsFactory.createCosts(locations,
+                Figliozzi.TimeDependentTransportCostsFactory.SpeedDistribution.TD1a, 100);
         /*
-        100
-        (0,20) - 1. --> 20
-        (20,40) 1.6 = s/t --> t = s / 1.6 = 20 * 1.6 = 32 : 52 --> 40
-        (40,60) 1.05 = 21 : 73 --> 60
-        (60,80) 1.6 = 20 * 1.6 = 32 --> 27 / 1.6 = 16.875 + 73 = -- 16.875
-
-         20
-
+         * 100 (0,20) - 1. --> 20 (20,40) 1.6 = s/t --> t = s / 1.6 = 20 * 1.6 = 32 : 52 --> 40 (40,60) 1.05 = 21 : 73
+         * --> 60 (60,80) 1.6 = 20 * 1.6 = 32 --> 27 / 1.6 = 16.875 + 73 = -- 16.875
+         * 
+         * 20
+         * 
          */
-        Assert.assertEquals(76.875, tdCosts.getBackwardTransportTime(loc("from"), loc("to"), 100., null, null), 0.01);
+        assertEquals(76.875, tdCosts.getBackwardTransportTime(loc("from"), loc("to"), 100., null, null), 0.01);
     }
 
     @Test
     public void backwardTimeShouldBeCalculatedCorrectly() {
-        Figliozzi.TDCosts tdCosts = Figliozzi.TimeDependentTransportCostsFactory.createCosts(locations, Figliozzi.TimeDependentTransportCostsFactory.SpeedDistribution.CLASSIC, 100);
-        Assert.assertEquals(100., tdCosts.getBackwardTransportTime(loc("from"), loc("to"), 100., null, null), 0.01);
+        Figliozzi.TDCosts tdCosts = Figliozzi.TimeDependentTransportCostsFactory.createCosts(locations,
+                Figliozzi.TimeDependentTransportCostsFactory.SpeedDistribution.CLASSIC, 100);
+        assertEquals(100., tdCosts.getBackwardTransportTime(loc("from"), loc("to"), 100., null, null), 0.01);
     }
 
     @Test
     public void whenTD1a_distanceShouldBe25PercentMore() {
-        Locations locations = new Locations() {
-
-            @Override
-            public Coordinate getCoord(String id) {
-                if (id.equals("from")) return Coordinate.newInstance(0, 0);
-                if (id.equals("to")) return Coordinate.newInstance(125., 0);
-                return null;
+        Locations locations = id -> {
+            if (id.equals("from")) {
+                return Coordinate.newInstance(0, 0);
             }
-
+            if (id.equals("to")) {
+                return Coordinate.newInstance(125., 0);
+            }
+            return null;
         };
-        Figliozzi.TDCosts tdCosts = Figliozzi.TimeDependentTransportCostsFactory.createCosts(locations, Figliozzi.TimeDependentTransportCostsFactory.SpeedDistribution.TD1a, 100);
+        Figliozzi.TDCosts tdCosts = Figliozzi.TimeDependentTransportCostsFactory.createCosts(locations,
+                Figliozzi.TimeDependentTransportCostsFactory.SpeedDistribution.TD1a, 100);
         double time = tdCosts.getTransportTime(loc("from"), loc("to"), 0., null, null);
-        Assert.assertEquals(100., time, 0.01);
+        assertEquals(100., time, 0.01);
     }
 
     @Test
     public void whenTD1b_distanceShouldBe25PercentMore() {
-        Locations locations = new Locations() {
-
-            @Override
-            public Coordinate getCoord(String id) {
-                if (id.equals("from")) return Coordinate.newInstance(0, 0);
-                if (id.equals("to")) return Coordinate.newInstance(125., 0);
-                return null;
+        Locations locations = id -> {
+            if (id.equals("from")) {
+                return Coordinate.newInstance(0, 0);
             }
-
+            if (id.equals("to")) {
+                return Coordinate.newInstance(125., 0);
+            }
+            return null;
         };
-        Figliozzi.TDCosts tdCosts = Figliozzi.TimeDependentTransportCostsFactory.createCosts(locations, Figliozzi.TimeDependentTransportCostsFactory.SpeedDistribution.TD1b, 100);
+        Figliozzi.TDCosts tdCosts = Figliozzi.TimeDependentTransportCostsFactory.createCosts(locations,
+                Figliozzi.TimeDependentTransportCostsFactory.SpeedDistribution.TD1b, 100);
         double time = tdCosts.getTransportTime(loc("from"), loc("to"), 0., null, null);
-        Assert.assertEquals(100., time, 0.01);
+        assertEquals(100., time, 0.01);
     }
 
     @Test
     public void whenTD1c_distanceShouldBe25PercentMore() {
-        Locations locations = new Locations() {
-
-            @Override
-            public Coordinate getCoord(String id) {
-                if (id.equals("from")) return Coordinate.newInstance(0, 0);
-                if (id.equals("to")) return Coordinate.newInstance(125., 0);
-                return null;
+        Locations locations = id -> {
+            if (id.equals("from")) {
+                return Coordinate.newInstance(0, 0);
             }
-
+            if (id.equals("to")) {
+                return Coordinate.newInstance(125., 0);
+            }
+            return null;
         };
-        Figliozzi.TDCosts tdCosts = Figliozzi.TimeDependentTransportCostsFactory.createCosts(locations, Figliozzi.TimeDependentTransportCostsFactory.SpeedDistribution.TD1c, 100);
+        Figliozzi.TDCosts tdCosts = Figliozzi.TimeDependentTransportCostsFactory.createCosts(locations,
+                Figliozzi.TimeDependentTransportCostsFactory.SpeedDistribution.TD1c, 100);
         double time = tdCosts.getTransportTime(loc("from"), loc("to"), 0., null, null);
-        Assert.assertEquals(100., time, 0.01);
+        assertEquals(100., time, 0.01);
     }
 
     @Test
     public void whenTD1d_distanceShouldBe25PercentMore() {
-        Locations locations = new Locations() {
-
-            @Override
-            public Coordinate getCoord(String id) {
-                if (id.equals("from")) return Coordinate.newInstance(0, 0);
-                if (id.equals("to")) return Coordinate.newInstance(125., 0);
-                return null;
+        Locations locations = id -> {
+            if (id.equals("from")) {
+                return Coordinate.newInstance(0, 0);
             }
-
+            if (id.equals("to")) {
+                return Coordinate.newInstance(125., 0);
+            }
+            return null;
         };
-        Figliozzi.TDCosts tdCosts = Figliozzi.TimeDependentTransportCostsFactory.createCosts(locations, Figliozzi.TimeDependentTransportCostsFactory.SpeedDistribution.TD1d, 100);
+        Figliozzi.TDCosts tdCosts = Figliozzi.TimeDependentTransportCostsFactory.createCosts(locations,
+                Figliozzi.TimeDependentTransportCostsFactory.SpeedDistribution.TD1d, 100);
         double time = tdCosts.getTransportTime(loc("from"), loc("to"), 0., null, null);
-        Assert.assertEquals(100., time, 0.01);
+        assertEquals(100., time, 0.01);
     }
 
     @Test
     public void whenTD2a_distanceShouldBe50PercentMore() {
-        Locations locations = new Locations() {
-
-            @Override
-            public Coordinate getCoord(String id) {
-                if (id.equals("from")) return Coordinate.newInstance(0, 0);
-                if (id.equals("to")) return Coordinate.newInstance(150., 0);
-                return null;
+        Locations locations = id -> {
+            if (id.equals("from")) {
+                return Coordinate.newInstance(0, 0);
             }
-
+            if (id.equals("to")) {
+                return Coordinate.newInstance(150., 0);
+            }
+            return null;
         };
-        Figliozzi.TDCosts tdCosts = Figliozzi.TimeDependentTransportCostsFactory.createCosts(locations, Figliozzi.TimeDependentTransportCostsFactory.SpeedDistribution.TD2a, 100);
+        Figliozzi.TDCosts tdCosts = Figliozzi.TimeDependentTransportCostsFactory.createCosts(locations,
+                Figliozzi.TimeDependentTransportCostsFactory.SpeedDistribution.TD2a, 100);
         double time = tdCosts.getTransportTime(loc("from"), loc("to"), 0., null, null);
-        Assert.assertEquals(100., time, 0.01);
+        assertEquals(100., time, 0.01);
     }
 
     @Test
     public void whenTD2b_distanceShouldBe50PercentMore() {
-        Locations locations = new Locations() {
-
-            @Override
-            public Coordinate getCoord(String id) {
-                if (id.equals("from")) return Coordinate.newInstance(0, 0);
-                if (id.equals("to")) return Coordinate.newInstance(150., 0);
-                return null;
+        Locations locations = id -> {
+            if (id.equals("from")) {
+                return Coordinate.newInstance(0, 0);
             }
-
+            if (id.equals("to")) {
+                return Coordinate.newInstance(150., 0);
+            }
+            return null;
         };
-        Figliozzi.TDCosts tdCosts = Figliozzi.TimeDependentTransportCostsFactory.createCosts(locations, Figliozzi.TimeDependentTransportCostsFactory.SpeedDistribution.TD2b, 100);
+        Figliozzi.TDCosts tdCosts = Figliozzi.TimeDependentTransportCostsFactory.createCosts(locations,
+                Figliozzi.TimeDependentTransportCostsFactory.SpeedDistribution.TD2b, 100);
         double time = tdCosts.getTransportTime(loc("from"), loc("to"), 0., null, null);
-        Assert.assertEquals(100., time, 0.01);
+        assertEquals(100., time, 0.01);
     }
 
     @Test
     public void whenTD2c_distanceShouldBe50PercentMore() {
-        Locations locations = new Locations() {
-
-            @Override
-            public Coordinate getCoord(String id) {
-                if (id.equals("from")) return Coordinate.newInstance(0, 0);
-                if (id.equals("to")) return Coordinate.newInstance(150., 0);
-                return null;
+        Locations locations = id -> {
+            if (id.equals("from")) {
+                return Coordinate.newInstance(0, 0);
             }
-
+            if (id.equals("to")) {
+                return Coordinate.newInstance(150., 0);
+            }
+            return null;
         };
-        Figliozzi.TDCosts tdCosts = Figliozzi.TimeDependentTransportCostsFactory.createCosts(locations, Figliozzi.TimeDependentTransportCostsFactory.SpeedDistribution.TD2c, 100);
+        Figliozzi.TDCosts tdCosts = Figliozzi.TimeDependentTransportCostsFactory.createCosts(locations,
+                Figliozzi.TimeDependentTransportCostsFactory.SpeedDistribution.TD2c, 100);
         double time = tdCosts.getTransportTime(loc("from"), loc("to"), 0., null, null);
-        Assert.assertEquals(100., time, 0.01);
+        assertEquals(100., time, 0.01);
     }
 
     @Test
     public void whenTD2d_distanceShouldBe50PercentMore() {
-        Locations locations = new Locations() {
-
-            @Override
-            public Coordinate getCoord(String id) {
-                if (id.equals("from")) return Coordinate.newInstance(0, 0);
-                if (id.equals("to")) return Coordinate.newInstance(150., 0);
-                return null;
+        Locations locations = id -> {
+            if (id.equals("from")) {
+                return Coordinate.newInstance(0, 0);
             }
-
+            if (id.equals("to")) {
+                return Coordinate.newInstance(150., 0);
+            }
+            return null;
         };
-        Figliozzi.TDCosts tdCosts = Figliozzi.TimeDependentTransportCostsFactory.createCosts(locations, Figliozzi.TimeDependentTransportCostsFactory.SpeedDistribution.TD2d, 100);
+        Figliozzi.TDCosts tdCosts = Figliozzi.TimeDependentTransportCostsFactory.createCosts(locations,
+                Figliozzi.TimeDependentTransportCostsFactory.SpeedDistribution.TD2d, 100);
         double time = tdCosts.getTransportTime(loc("from"), loc("to"), 0., null, null);
-        Assert.assertEquals(100., time, 0.01);
+        assertEquals(100., time, 0.01);
     }
 
     @Test
     public void whenTD3a_distanceShouldBe75PercentMore() {
-        Locations locations = new Locations() {
-
-            @Override
-            public Coordinate getCoord(String id) {
-                if (id.equals("from")) return Coordinate.newInstance(0, 0);
-                if (id.equals("to")) return Coordinate.newInstance(175., 0);
-                return null;
+        Locations locations = id -> {
+            if (id.equals("from")) {
+                return Coordinate.newInstance(0, 0);
             }
-
+            if (id.equals("to")) {
+                return Coordinate.newInstance(175., 0);
+            }
+            return null;
         };
-        Figliozzi.TDCosts tdCosts = Figliozzi.TimeDependentTransportCostsFactory.createCosts(locations, Figliozzi.TimeDependentTransportCostsFactory.SpeedDistribution.TD3a, 100);
+        Figliozzi.TDCosts tdCosts = Figliozzi.TimeDependentTransportCostsFactory.createCosts(locations,
+                Figliozzi.TimeDependentTransportCostsFactory.SpeedDistribution.TD3a, 100);
         double time = tdCosts.getTransportTime(loc("from"), loc("to"), 0., null, null);
-        Assert.assertEquals(100., time, 0.01);
+        assertEquals(100., time, 0.01);
     }
 
     @Test
     public void whenTD3b_distanceShouldBe75PercentMore() {
-        Locations locations = new Locations() {
-
-            @Override
-            public Coordinate getCoord(String id) {
-                if (id.equals("from")) return Coordinate.newInstance(0, 0);
-                if (id.equals("to")) return Coordinate.newInstance(175., 0);
-                return null;
+        Locations locations = id -> {
+            if (id.equals("from")) {
+                return Coordinate.newInstance(0, 0);
             }
-
+            if (id.equals("to")) {
+                return Coordinate.newInstance(175., 0);
+            }
+            return null;
         };
-        Figliozzi.TDCosts tdCosts = Figliozzi.TimeDependentTransportCostsFactory.createCosts(locations, Figliozzi.TimeDependentTransportCostsFactory.SpeedDistribution.TD3b, 100);
+        Figliozzi.TDCosts tdCosts = Figliozzi.TimeDependentTransportCostsFactory.createCosts(locations,
+                Figliozzi.TimeDependentTransportCostsFactory.SpeedDistribution.TD3b, 100);
         double time = tdCosts.getTransportTime(loc("from"), loc("to"), 0., null, null);
-        Assert.assertEquals(100., time, 0.01);
+        assertEquals(100., time, 0.01);
     }
 
     @Test
     public void whenTD3c_distanceShouldBe75PercentMore() {
-        Locations locations = new Locations() {
-
-            @Override
-            public Coordinate getCoord(String id) {
-                if (id.equals("from")) return Coordinate.newInstance(0, 0);
-                if (id.equals("to")) return Coordinate.newInstance(175., 0);
-                return null;
+        Locations locations = id -> {
+            if (id.equals("from")) {
+                return Coordinate.newInstance(0, 0);
             }
-
+            if (id.equals("to")) {
+                return Coordinate.newInstance(175., 0);
+            }
+            return null;
         };
-        Figliozzi.TDCosts tdCosts = Figliozzi.TimeDependentTransportCostsFactory.createCosts(locations, Figliozzi.TimeDependentTransportCostsFactory.SpeedDistribution.TD3c, 100);
+        Figliozzi.TDCosts tdCosts = Figliozzi.TimeDependentTransportCostsFactory.createCosts(locations,
+                Figliozzi.TimeDependentTransportCostsFactory.SpeedDistribution.TD3c, 100);
         double time = tdCosts.getTransportTime(loc("from"), loc("to"), 0., null, null);
-        Assert.assertEquals(100., time, 0.01);
+        assertEquals(100., time, 0.01);
     }
 
     @Test
     public void whenTD3d_distanceShouldBe75PercentMore() {
-        Locations locations = new Locations() {
-
-            @Override
-            public Coordinate getCoord(String id) {
-                if (id.equals("from")) return Coordinate.newInstance(0, 0);
-                if (id.equals("to")) return Coordinate.newInstance(175., 0);
-                return null;
+        Locations locations = id -> {
+            if (id.equals("from")) {
+                return Coordinate.newInstance(0, 0);
             }
-
+            if (id.equals("to")) {
+                return Coordinate.newInstance(175., 0);
+            }
+            return null;
         };
-        Figliozzi.TDCosts tdCosts = Figliozzi.TimeDependentTransportCostsFactory.createCosts(locations, Figliozzi.TimeDependentTransportCostsFactory.SpeedDistribution.TD3d, 100);
+        Figliozzi.TDCosts tdCosts = Figliozzi.TimeDependentTransportCostsFactory.createCosts(locations,
+                Figliozzi.TimeDependentTransportCostsFactory.SpeedDistribution.TD3d, 100);
         double time = tdCosts.getTransportTime(loc("from"), loc("to"), 0., null, null);
-        Assert.assertEquals(100., time, 0.01);
+        assertEquals(100., time, 0.01);
     }
 }
 
diff --git a/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/GoldenReaderTest.java b/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/GoldenReaderTest.java
index a78ec5331..a6e0de296 100644
--- a/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/GoldenReaderTest.java
+++ b/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/GoldenReaderTest.java
@@ -18,17 +18,20 @@
 
 package com.graphhopper.jsprit.instance.reader;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
+import java.net.URL;
+
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.job.Service;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.util.Coordinate;
 import com.graphhopper.jsprit.instance.reader.VrphGoldenReader.VrphType;
-import org.junit.Test;
-
-import java.net.URL;
-
-import static org.junit.Assert.*;
 
 public class GoldenReaderTest {
 
@@ -36,14 +39,16 @@
     public void whenReadingInstance_itShouldReadCorrectNuOfVehicles() {
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         new VrphGoldenReader(vrpBuilder, VrphType.HVRPD)
-            .read(getPath("cn_13mix.txt"));
+                .read(getPath("cn_13mix.txt"));
         VehicleRoutingProblem vrp = vrpBuilder.build();
         assertEquals(17, vrp.getVehicles().size());
     }
 
     private String getPath(String string) {
         URL resource = this.getClass().getClassLoader().getResource(string);
-        if (resource == null) throw new IllegalStateException("resource " + string + " does not exist");
+        if (resource == null) {
+            throw new IllegalStateException("resource " + string + " does not exist");
+        }
         return resource.getPath();
     }
 
@@ -51,7 +56,7 @@ private String getPath(String string) {
     public void whenReadingInstance_itShouldReadCorrectNuOfType1Vehicles() {
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         new VrphGoldenReader(vrpBuilder, VrphType.HVRPD)
-            .read(getPath("cn_13mix.txt"));
+                .read(getPath("cn_13mix.txt"));
         VehicleRoutingProblem vrp = vrpBuilder.build();
         int nuOfType1Vehicles = 0;
         for (Vehicle v : vrp.getVehicles()) {
@@ -66,7 +71,7 @@ public void whenReadingInstance_itShouldReadCorrectNuOfType1Vehicles() {
     public void whenReadingInstance_theSumOfType1VehicleShouldHvTheCorrectCapacity() {
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         new VrphGoldenReader(vrpBuilder, VrphType.HVRPD)
-            .read(getPath("cn_13mix.txt"));
+                .read(getPath("cn_13mix.txt"));
         VehicleRoutingProblem vrp = vrpBuilder.build();
         int sumOfType1Cap = 0;
         for (Vehicle v : vrp.getVehicles()) {
@@ -81,7 +86,7 @@ public void whenReadingInstance_theSumOfType1VehicleShouldHvTheCorrectCapacity()
     public void whenReadingInstance_itShouldReadCorrectNuOfType2Vehicles() {
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         new VrphGoldenReader(vrpBuilder, VrphType.HVRPD)
-            .read(getPath("cn_13mix.txt"));
+                .read(getPath("cn_13mix.txt"));
         VehicleRoutingProblem vrp = vrpBuilder.build();
         int nuOfType1Vehicles = 0;
         for (Vehicle v : vrp.getVehicles()) {
@@ -96,7 +101,7 @@ public void whenReadingInstance_itShouldReadCorrectNuOfType2Vehicles() {
     public void whenReadingInstance_theSumOfType2VehicleShouldHvTheCorrectCapacity() {
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         new VrphGoldenReader(vrpBuilder, VrphType.HVRPD)
-            .read(getPath("cn_13mix.txt"));
+                .read(getPath("cn_13mix.txt"));
         VehicleRoutingProblem vrp = vrpBuilder.build();
         int sumOfType1Cap = 0;
         for (Vehicle v : vrp.getVehicles()) {
@@ -111,7 +116,7 @@ public void whenReadingInstance_theSumOfType2VehicleShouldHvTheCorrectCapacity()
     public void whenReadingInstance_itShouldReadCorrectNuOfType3Vehicles() {
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         new VrphGoldenReader(vrpBuilder, VrphType.HVRPD)
-            .read(getPath("cn_13mix.txt"));
+                .read(getPath("cn_13mix.txt"));
         VehicleRoutingProblem vrp = vrpBuilder.build();
         int nuOfType1Vehicles = 0;
         for (Vehicle v : vrp.getVehicles()) {
@@ -126,7 +131,7 @@ public void whenReadingInstance_itShouldReadCorrectNuOfType3Vehicles() {
     public void whenReadingInstance_theSumOfType3VehicleShouldHvTheCorrectCapacity() {
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         new VrphGoldenReader(vrpBuilder, VrphType.HVRPD)
-            .read(getPath("cn_13mix.txt"));
+                .read(getPath("cn_13mix.txt"));
         VehicleRoutingProblem vrp = vrpBuilder.build();
         int sumOfType1Cap = 0;
         for (Vehicle v : vrp.getVehicles()) {
@@ -141,7 +146,7 @@ public void whenReadingInstance_theSumOfType3VehicleShouldHvTheCorrectCapacity()
     public void whenReadingInstance_itShouldReadCorrectNuOfType4Vehicles() {
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         new VrphGoldenReader(vrpBuilder, VrphType.HVRPD)
-            .read(getPath("cn_13mix.txt"));
+                .read(getPath("cn_13mix.txt"));
         VehicleRoutingProblem vrp = vrpBuilder.build();
         int nuOfType1Vehicles = 0;
         for (Vehicle v : vrp.getVehicles()) {
@@ -156,7 +161,7 @@ public void whenReadingInstance_itShouldReadCorrectNuOfType4Vehicles() {
     public void whenReadingInstance_theSumOfType4VehicleShouldHvTheCorrectCapacity() {
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         new VrphGoldenReader(vrpBuilder, VrphType.HVRPD)
-            .read(getPath("cn_13mix.txt"));
+                .read(getPath("cn_13mix.txt"));
         VehicleRoutingProblem vrp = vrpBuilder.build();
         int sumOfType1Cap = 0;
         for (Vehicle v : vrp.getVehicles()) {
@@ -171,7 +176,7 @@ public void whenReadingInstance_theSumOfType4VehicleShouldHvTheCorrectCapacity()
     public void whenReadingInstance_itShouldReadCorrectNuOfType5Vehicles() {
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         new VrphGoldenReader(vrpBuilder, VrphType.HVRPD)
-            .read(getPath("cn_13mix.txt"));
+                .read(getPath("cn_13mix.txt"));
         VehicleRoutingProblem vrp = vrpBuilder.build();
         int nuOfType1Vehicles = 0;
         for (Vehicle v : vrp.getVehicles()) {
@@ -186,7 +191,7 @@ public void whenReadingInstance_itShouldReadCorrectNuOfType5Vehicles() {
     public void whenReadingInstance_theSumOfType5VehicleShouldHvTheCorrectCapacity() {
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         new VrphGoldenReader(vrpBuilder, VrphType.HVRPD)
-            .read(getPath("cn_13mix.txt"));
+                .read(getPath("cn_13mix.txt"));
         VehicleRoutingProblem vrp = vrpBuilder.build();
         int sumOfType1Cap = 0;
         for (Vehicle v : vrp.getVehicles()) {
@@ -201,7 +206,7 @@ public void whenReadingInstance_theSumOfType5VehicleShouldHvTheCorrectCapacity()
     public void whenReadingInstance_itShouldReadCorrectNuOfType6Vehicles() {
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         new VrphGoldenReader(vrpBuilder, VrphType.HVRPD)
-            .read(getPath("cn_13mix.txt"));
+                .read(getPath("cn_13mix.txt"));
         VehicleRoutingProblem vrp = vrpBuilder.build();
         int nuOfType1Vehicles = 0;
         for (Vehicle v : vrp.getVehicles()) {
@@ -216,7 +221,7 @@ public void whenReadingInstance_itShouldReadCorrectNuOfType6Vehicles() {
     public void whenReadingInstance_theSumOfType6VehicleShouldHvTheCorrectCapacity() {
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         new VrphGoldenReader(vrpBuilder, VrphType.HVRPD)
-            .read(getPath("cn_13mix.txt"));
+                .read(getPath("cn_13mix.txt"));
         VehicleRoutingProblem vrp = vrpBuilder.build();
         int sumOfType1Cap = 0;
         for (Vehicle v : vrp.getVehicles()) {
@@ -231,7 +236,7 @@ public void whenReadingInstance_theSumOfType6VehicleShouldHvTheCorrectCapacity()
     public void whenReadingInstance_vehicleShouldHvTheCorrectCoord() {
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         new VrphGoldenReader(vrpBuilder, VrphType.HVRPD)
-            .read(getPath("cn_13mix.txt"));
+                .read(getPath("cn_13mix.txt"));
         VehicleRoutingProblem vrp = vrpBuilder.build();
         for (Vehicle v : vrp.getVehicles()) {
             if (v.getStartLocation().getCoordinate().getX() != 40.0) {
@@ -248,7 +253,7 @@ public void whenReadingInstance_vehicleShouldHvTheCorrectCoord() {
     public void whenReadingInstance_service1MustHaveCorrectDemand() {
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         new VrphGoldenReader(vrpBuilder, VrphType.HVRPD)
-            .read(getPath("cn_13mix.txt"));
+                .read(getPath("cn_13mix.txt"));
         VehicleRoutingProblem vrp = vrpBuilder.build();
         Job job = getJob("1", vrp);
         assertEquals(18, job.getSize().get(0));
@@ -258,7 +263,7 @@ public void whenReadingInstance_service1MustHaveCorrectDemand() {
     public void whenReadingInstance_service1MustHaveCorrectCoordinate() {
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         new VrphGoldenReader(vrpBuilder, VrphType.HVRPD)
-            .read(getPath("cn_13mix.txt"));
+                .read(getPath("cn_13mix.txt"));
         VehicleRoutingProblem vrp = vrpBuilder.build();
         Coordinate coord = getCoord("1", vrp);
         assertEquals(22.0, coord.getX(), 0.01);
@@ -269,7 +274,7 @@ public void whenReadingInstance_service1MustHaveCorrectCoordinate() {
     public void whenReadingInstance_service15MustHaveCorrectCoordinate() {
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         new VrphGoldenReader(vrpBuilder, VrphType.HVRPD)
-            .read(getPath("cn_13mix.txt"));
+                .read(getPath("cn_13mix.txt"));
         VehicleRoutingProblem vrp = vrpBuilder.build();
         Coordinate coord = getCoord("15", vrp);
         assertEquals(62.0, coord.getX(), 0.01);
@@ -281,7 +286,7 @@ public void whenReadingInstance_service15MustHaveCorrectCoordinate() {
     public void whenReadingInstance_service50MustHaveCorrectCoordinate() {
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         new VrphGoldenReader(vrpBuilder, VrphType.HVRPD)
-            .read(getPath("cn_13mix.txt"));
+                .read(getPath("cn_13mix.txt"));
         VehicleRoutingProblem vrp = vrpBuilder.build();
         Coordinate coord = getCoord("50", vrp);
         assertEquals(15.0, coord.getX(), 0.01);
@@ -290,14 +295,14 @@ public void whenReadingInstance_service50MustHaveCorrectCoordinate() {
 
     private Coordinate getCoord(String string, VehicleRoutingProblem vrp) {
         Job j = getJob(string, vrp);
-        return ((Service) j).getLocation().getCoordinate();
+        return ((Service) j).getActivity().getLocation().getCoordinate();
     }
 
     @Test
     public void whenReadingInstance_service4MustHaveCorrectDemand() {
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         new VrphGoldenReader(vrpBuilder, VrphType.HVRPD)
-            .read(getPath("cn_13mix.txt"));
+                .read(getPath("cn_13mix.txt"));
         VehicleRoutingProblem vrp = vrpBuilder.build();
         Job job = getJob("4", vrp);
         assertEquals(30, job.getSize().get(0));
@@ -307,7 +312,7 @@ public void whenReadingInstance_service4MustHaveCorrectDemand() {
     public void whenReadingInstance_service50MustHaveCorrectDemand() {
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         new VrphGoldenReader(vrpBuilder, VrphType.HVRPD)
-            .read(getPath("cn_13mix.txt"));
+                .read(getPath("cn_13mix.txt"));
         VehicleRoutingProblem vrp = vrpBuilder.build();
         Job job = getJob("50", vrp);
         assertEquals(22, job.getSize().get(0));
diff --git a/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/SolomonReaderTest.java b/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/SolomonReaderTest.java
index 3f09b91da..be45b0673 100644
--- a/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/SolomonReaderTest.java
+++ b/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/SolomonReaderTest.java
@@ -17,15 +17,16 @@
  */
 package com.graphhopper.jsprit.instance.reader;
 
+import static org.junit.Assert.assertEquals;
+
+import java.net.URL;
+
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
 import com.graphhopper.jsprit.core.problem.job.Service;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
-import org.junit.Test;
-
-import java.net.URL;
-
-import static org.junit.Assert.assertEquals;
 
 
 public class SolomonReaderTest {
@@ -40,7 +41,9 @@ public void whenReadingSolomonInstance_nuOfCustomersIsCorrect() {
 
     private String getPath() {
         URL resource = getClass().getClassLoader().getResource("C101_solomon.txt");
-        if (resource == null) throw new IllegalStateException("file C101_solomon.txt does not exist");
+        if (resource == null) {
+            throw new IllegalStateException("file C101_solomon.txt does not exist");
+        }
         return resource.getPath();
     }
 
@@ -86,7 +89,7 @@ public void whenReadingSolomonInstance_serviceDurationOfCustomerTwoIsCorrect() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new SolomonReader(builder).read(getPath());
         VehicleRoutingProblem vrp = builder.build();
-        assertEquals(90, ((Service) vrp.getJobs().get("2")).getServiceDuration(), 0.1);
+        assertEquals(90, ((Service) vrp.getJobs().get("2")).getActivity().getOperationTime(), 0.1);
     }
 
     @Test
@@ -94,7 +97,7 @@ public void whenReadingSolomonInstance_earliestServiceStartTimeOfCustomerSixtyTw
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new SolomonReader(builder).read(getPath());
         VehicleRoutingProblem vrp = builder.build();
-        assertEquals(262.0, ((Service) vrp.getJobs().get("62")).getTimeWindow().getStart(), 0.1);
+        assertEquals(262.0, ((Service) vrp.getJobs().get("62")).getActivity().getSingleTimeWindow().getStart(), 0.1);
     }
 
     @Test
@@ -102,7 +105,7 @@ public void whenReadingSolomonInstance_latestServiceStartTimeOfCustomerEightySev
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new SolomonReader(builder).read(getPath());
         VehicleRoutingProblem vrp = builder.build();
-        assertEquals(144.0, ((Service) vrp.getJobs().get("87")).getTimeWindow().getEnd(), 0.1);
+        assertEquals(144.0, ((Service) vrp.getJobs().get("87")).getActivity().getSingleTimeWindow().getEnd(), 0.1);
     }
 
 
diff --git a/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLReader.java b/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLReader.java
index f630985d0..efe8666de 100644
--- a/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLReader.java
+++ b/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLReader.java
@@ -114,7 +114,6 @@
      * @param schemaValidation
      *            the schemaValidation to set
      */
-    @SuppressWarnings("UnusedDeclaration")
     public void setSchemaValidation(boolean schemaValidation) {
         this.schemaValidation = schemaValidation;
     }
@@ -229,16 +228,6 @@ private void readInitialRoutes(XMLConfiguration xmlConfig) {
                 if (type == null) {
                     throw new IllegalArgumentException("act[@type] is missing.");
                 }
-                double arrTime = 0.;
-                double endTime = 0.;
-                String arrTimeS = actConfig.getString("arrTime");
-                if (arrTimeS != null) {
-                    arrTime = Double.parseDouble(arrTimeS);
-                }
-                String endTimeS = actConfig.getString("endTime");
-                if (endTimeS != null) {
-                    endTime = Double.parseDouble(endTimeS);
-                }
 
                 String serviceId = actConfig.getString("serviceId");
                 if (type.equals("break")) {
@@ -246,7 +235,7 @@ private void readInitialRoutes(XMLConfiguration xmlConfig) {
                     routeBuilder.addService(currentbreak);
                 } else {
                     if (serviceId != null) {
-                        AbstractSingleActivityJob service = getService(serviceId);
+                        AbstractSingleActivityJob<?> service = getService(serviceId);
                         if (service == null) {
                             throw new IllegalArgumentException("service to serviceId " + serviceId
                                     + " is missing (reference in one of your initial routes). make sure you define the service you refer to here in <services> </services>.");
@@ -321,23 +310,13 @@ private void readSolutions(XMLConfiguration vrpProblem) {
                     if (type == null) {
                         throw new IllegalArgumentException("act[@type] is missing.");
                     }
-                    double arrTime = 0.;
-                    double endTime = 0.;
-                    String arrTimeS = actConfig.getString("arrTime");
-                    if (arrTimeS != null) {
-                        arrTime = Double.parseDouble(arrTimeS);
-                    }
-                    String endTimeS = actConfig.getString("endTime");
-                    if (endTimeS != null) {
-                        endTime = Double.parseDouble(endTimeS);
-                    }
                     if (type.equals("break")) {
                         Break currentbreak = getBreak(vehicleId);
                         routeBuilder.addService(currentbreak);
                     } else {
                         String serviceId = actConfig.getString("serviceId");
                         if (serviceId != null) {
-                            AbstractSingleActivityJob service = getService(serviceId);
+                            AbstractSingleActivityJob<?> service = getService(serviceId);
                             routeBuilder.addService(service);
                         } else {
                             String shipmentId = actConfig.getString("shipmentId");
diff --git a/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLWriter.java b/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLWriter.java
index b98452ad9..e3b0bdacf 100644
--- a/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLWriter.java
+++ b/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLWriter.java
@@ -17,7 +17,25 @@
  */
 package com.graphhopper.jsprit.io.problem;
 
+import java.io.FileWriter;
+import java.io.IOException;
+import java.io.Writer;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.List;
+
+import org.apache.commons.configuration.ConfigurationException;
+import org.apache.commons.configuration.XMLConfiguration;
+import org.apache.xml.serialize.OutputFormat;
+import org.apache.xml.serialize.XMLSerializer;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.w3c.dom.Document;
+import org.w3c.dom.Element;
+
 import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.Skills;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Break;
@@ -26,29 +44,16 @@
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.ServiceActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.util.Solutions;
 import com.graphhopper.jsprit.core.util.VehicleIndexComparator;
-import org.apache.commons.configuration.ConfigurationException;
-import org.apache.commons.configuration.XMLConfiguration;
-import org.apache.xml.serialize.OutputFormat;
-import org.apache.xml.serialize.XMLSerializer;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-import org.w3c.dom.Document;
-import org.w3c.dom.Element;
-
-import java.io.FileWriter;
-import java.io.IOException;
-import java.io.Writer;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.List;
 
 
 public class VrpXMLWriter {
@@ -87,13 +92,16 @@ public VrpXMLWriter(VehicleRoutingProblem vrp, Collection<VehicleRoutingProblemS
 
     public VrpXMLWriter(VehicleRoutingProblem vrp) {
         this.vrp = vrp;
-        this.solutions = null;
+        solutions = null;
     }
 
+    @SuppressWarnings("unused")
     private static Logger logger = LoggerFactory.getLogger(VrpXMLWriter.class);
 
     public void write(String filename) {
-        if (!filename.endsWith(".xml")) filename += ".xml";
+        if (!filename.endsWith(".xml")) {
+            filename += ".xml";
+        }
         log.info("write vrp: " + filename);
         XMLConf xmlConfig = new XMLConf();
         xmlConfig.setFileName(filename);
@@ -153,7 +161,9 @@ public void write(String filename) {
     }
 
     private void writeInitialRoutes(XMLConf xmlConfig) {
-        if (vrp.getInitialVehicleRoutes().isEmpty()) return;
+        if (vrp.getInitialVehicleRoutes().isEmpty()) {
+            return;
+        }
         String path = "initialRoutes.route";
         int routeCounter = 0;
         for (VehicleRoute route : vrp.getInitialVehicleRoutes()) {
@@ -172,7 +182,8 @@ private void writeInitialRoutes(XMLConf xmlConfig) {
                     } else if (job instanceof Break) {
                         xmlConfig.setProperty(path + "(" + routeCounter + ").act(" + actCounter + ").breakId", job.getId());
                     } else {
-                        throw new IllegalStateException("cannot write solution correctly since job-type is not know. make sure you use either service or shipment, or another writer");
+                        throw new IllegalStateException(
+                                "cannot write solution correctly since job-type is not know. make sure you use either service or shipment, or another writer");
                     }
                 }
                 xmlConfig.setProperty(path + "(" + routeCounter + ").act(" + actCounter + ").arrTime", act.getArrTime());
@@ -186,7 +197,9 @@ private void writeInitialRoutes(XMLConf xmlConfig) {
     }
 
     private void writeSolutions(XMLConf xmlConfig) {
-        if (solutions == null) return;
+        if (solutions == null) {
+            return;
+        }
         String solutionPath = "solutions.solution";
         int counter = 0;
         for (VehicleRoutingProblemSolution solution : solutions) {
@@ -205,17 +218,23 @@ private void writeSolutions(XMLConf xmlConfig) {
                     if (act instanceof JobActivity) {
                         Job job = ((JobActivity) act).getJob();
                         if (job instanceof Break) {
-                            xmlConfig.setProperty(solutionPath + "(" + counter + ").routes.route(" + routeCounter + ").act(" + actCounter + ").breakId", job.getId());
+                            xmlConfig.setProperty(solutionPath + "(" + counter + ").routes.route(" + routeCounter + ").act(" + actCounter + ").breakId",
+                                    job.getId());
                         } else if (job instanceof Service) {
-                            xmlConfig.setProperty(solutionPath + "(" + counter + ").routes.route(" + routeCounter + ").act(" + actCounter + ").serviceId", job.getId());
+                            xmlConfig.setProperty(solutionPath + "(" + counter + ").routes.route(" + routeCounter + ").act(" + actCounter + ").serviceId",
+                                    job.getId());
                         } else if (job instanceof Shipment) {
-                            xmlConfig.setProperty(solutionPath + "(" + counter + ").routes.route(" + routeCounter + ").act(" + actCounter + ").shipmentId", job.getId());
+                            xmlConfig.setProperty(solutionPath + "(" + counter + ").routes.route(" + routeCounter + ").act(" + actCounter + ").shipmentId",
+                                    job.getId());
                         } else {
-                            throw new IllegalStateException("cannot write solution correctly since job-type is not know. make sure you use either service or shipment, or another writer");
+                            throw new IllegalStateException(
+                                    "cannot write solution correctly since job-type is not know. make sure you use either service or shipment, or another writer");
                         }
                     }
-                    xmlConfig.setProperty(solutionPath + "(" + counter + ").routes.route(" + routeCounter + ").act(" + actCounter + ").arrTime", act.getArrTime());
-                    xmlConfig.setProperty(solutionPath + "(" + counter + ").routes.route(" + routeCounter + ").act(" + actCounter + ").endTime", act.getEndTime());
+                    xmlConfig.setProperty(solutionPath + "(" + counter + ").routes.route(" + routeCounter + ").act(" + actCounter + ").arrTime",
+                            act.getArrTime());
+                    xmlConfig.setProperty(solutionPath + "(" + counter + ").routes.route(" + routeCounter + ").act(" + actCounter + ").endTime",
+                            act.getEndTime());
                     actCounter++;
                 }
                 xmlConfig.setProperty(solutionPath + "(" + counter + ").routes.route(" + routeCounter + ").end", route.getEnd().getArrTime());
@@ -234,27 +253,32 @@ private void writeServices(XMLConf xmlConfig, List<Job> jobs) {
         String shipmentPathString = "services.service";
         int counter = 0;
         for (Job j : jobs) {
-            if (!(j instanceof Service)) continue;
+            if (!(j instanceof Service)) {
+                continue;
+            }
             Service service = (Service) j;
+            ServiceActivity activity = service.getActivity();
             xmlConfig.setProperty(shipmentPathString + "(" + counter + ")[@id]", service.getId());
             xmlConfig.setProperty(shipmentPathString + "(" + counter + ")[@type]", service.getType());
-            if (service.getLocation().getId() != null)
-                xmlConfig.setProperty(shipmentPathString + "(" + counter + ").location.id", service.getLocation().getId());
-            if (service.getLocation().getCoordinate() != null) {
-                xmlConfig.setProperty(shipmentPathString + "(" + counter + ").location.coord[@x]", service.getLocation().getCoordinate().getX());
-                xmlConfig.setProperty(shipmentPathString + "(" + counter + ").location.coord[@y]", service.getLocation().getCoordinate().getY());
+            if (activity.getLocation().getId() != null) {
+                xmlConfig.setProperty(shipmentPathString + "(" + counter + ").location.id", activity.getLocation().getId());
+            }
+            if (activity.getLocation().getCoordinate() != null) {
+                xmlConfig.setProperty(shipmentPathString + "(" + counter + ").location.coord[@x]", activity.getLocation().getCoordinate().getX());
+                xmlConfig.setProperty(shipmentPathString + "(" + counter + ").location.coord[@y]", activity.getLocation().getCoordinate().getY());
             }
-            if (service.getLocation().getIndex() != Location.NO_INDEX) {
-                xmlConfig.setProperty(shipmentPathString + "(" + counter + ").location.index", service.getLocation().getIndex());
+            if (activity.getLocation().getIndex() != Location.NO_INDEX) {
+                xmlConfig.setProperty(shipmentPathString + "(" + counter + ").location.index", activity.getLocation().getIndex());
             }
-            for (int i = 0; i < service.getSize().getNuOfDimensions(); i++) {
+            SizeDimension loadChange = activity.getLoadChange().abs();
+            for (int i = 0; i < loadChange.getNuOfDimensions(); i++) {
                 xmlConfig.setProperty(shipmentPathString + "(" + counter + ").capacity-dimensions.dimension(" + i + ")[@index]", i);
-                xmlConfig.setProperty(shipmentPathString + "(" + counter + ").capacity-dimensions.dimension(" + i + ")", service.getSize().get(i));
+                xmlConfig.setProperty(shipmentPathString + "(" + counter + ").capacity-dimensions.dimension(" + i + ")", loadChange.get(i));
             }
 
             Collection<TimeWindow> tws = service.getTimeWindows();
             int index = 0;
-            xmlConfig.setProperty(shipmentPathString + "(" + counter + ").duration", service.getServiceDuration());
+            xmlConfig.setProperty(shipmentPathString + "(" + counter + ").duration", activity.getOperationTime());
             for (TimeWindow tw : tws) {
                 xmlConfig.setProperty(shipmentPathString + "(" + counter + ").timeWindows.timeWindow(" + index + ").start", tw.getStart());
                 xmlConfig.setProperty(shipmentPathString + "(" + counter + ").timeWindows.timeWindow(" + index + ").end", tw.getEnd());
@@ -279,41 +303,49 @@ private void writeShipments(XMLConf xmlConfig, List<Job> jobs) {
         String shipmentPathString = "shipments.shipment";
         int counter = 0;
         for (Job j : jobs) {
-            if (!(j instanceof Shipment)) continue;
+            if (!(j instanceof Shipment)) {
+                continue;
+            }
             Shipment shipment = (Shipment) j;
+            PickupActivity pickupActivity = shipment.getPickupActivity();
+            DeliveryActivity deliveryActivity = shipment.getDeliveryActivity();
             xmlConfig.setProperty(shipmentPathString + "(" + counter + ")[@id]", shipment.getId());
 //			xmlConfig.setProperty(shipmentPathString + "("+counter+")[@type]", service.getType());
-            if (shipment.getPickupLocation().getId() != null)
-                xmlConfig.setProperty(shipmentPathString + "(" + counter + ").pickup.location.id", shipment.getPickupLocation().getId());
-            if (shipment.getPickupLocation().getCoordinate() != null) {
-                xmlConfig.setProperty(shipmentPathString + "(" + counter + ").pickup.location.coord[@x]", shipment.getPickupLocation().getCoordinate().getX());
-                xmlConfig.setProperty(shipmentPathString + "(" + counter + ").pickup.location.coord[@y]", shipment.getPickupLocation().getCoordinate().getY());
+            if (pickupActivity.getLocation().getId() != null) {
+                xmlConfig.setProperty(shipmentPathString + "(" + counter + ").pickup.location.id", pickupActivity.getLocation().getId());
+            }
+            if (pickupActivity.getLocation().getCoordinate() != null) {
+                xmlConfig.setProperty(shipmentPathString + "(" + counter + ").pickup.location.coord[@x]", pickupActivity.getLocation().getCoordinate().getX());
+                xmlConfig.setProperty(shipmentPathString + "(" + counter + ").pickup.location.coord[@y]", pickupActivity.getLocation().getCoordinate().getY());
             }
-            if (shipment.getPickupLocation().getIndex() != Location.NO_INDEX) {
-                xmlConfig.setProperty(shipmentPathString + "(" + counter + ").pickup.location.index", shipment.getPickupLocation().getIndex());
+            if (pickupActivity.getLocation().getIndex() != Location.NO_INDEX) {
+                xmlConfig.setProperty(shipmentPathString + "(" + counter + ").pickup.location.index", pickupActivity.getLocation().getIndex());
             }
 
-            Collection<TimeWindow> pu_tws = shipment.getPickupTimeWindows();
+            Collection<TimeWindow> pu_tws = pickupActivity.getTimeWindows();
             int index = 0;
-            xmlConfig.setProperty(shipmentPathString + "(" + counter + ").pickup.duration", shipment.getPickupServiceTime());
+            xmlConfig.setProperty(shipmentPathString + "(" + counter + ").pickup.duration", pickupActivity.getOperationTime());
             for (TimeWindow tw : pu_tws) {
                 xmlConfig.setProperty(shipmentPathString + "(" + counter + ").pickup.timeWindows.timeWindow(" + index + ").start", tw.getStart());
                 xmlConfig.setProperty(shipmentPathString + "(" + counter + ").pickup.timeWindows.timeWindow(" + index + ").end", tw.getEnd());
                 ++index;
             }
 
-            if (shipment.getDeliveryLocation().getId() != null)
-                xmlConfig.setProperty(shipmentPathString + "(" + counter + ").delivery.location.id", shipment.getDeliveryLocation().getId());
-            if (shipment.getDeliveryLocation().getCoordinate() != null) {
-                xmlConfig.setProperty(shipmentPathString + "(" + counter + ").delivery.location.coord[@x]", shipment.getDeliveryLocation().getCoordinate().getX());
-                xmlConfig.setProperty(shipmentPathString + "(" + counter + ").delivery.location.coord[@y]", shipment.getDeliveryLocation().getCoordinate().getY());
+            if (deliveryActivity.getLocation().getId() != null) {
+                xmlConfig.setProperty(shipmentPathString + "(" + counter + ").delivery.location.id", deliveryActivity.getLocation().getId());
+            }
+            if (deliveryActivity.getLocation().getCoordinate() != null) {
+                xmlConfig.setProperty(shipmentPathString + "(" + counter + ").delivery.location.coord[@x]",
+                        deliveryActivity.getLocation().getCoordinate().getX());
+                xmlConfig.setProperty(shipmentPathString + "(" + counter + ").delivery.location.coord[@y]",
+                        deliveryActivity.getLocation().getCoordinate().getY());
             }
-            if (shipment.getDeliveryLocation().getIndex() != Location.NO_INDEX) {
-                xmlConfig.setProperty(shipmentPathString + "(" + counter + ").delivery.location.index", shipment.getDeliveryLocation().getIndex());
+            if (deliveryActivity.getLocation().getIndex() != Location.NO_INDEX) {
+                xmlConfig.setProperty(shipmentPathString + "(" + counter + ").delivery.location.index", deliveryActivity.getLocation().getIndex());
             }
 
-            Collection<TimeWindow> del_tws = shipment.getDeliveryTimeWindows();
-            xmlConfig.setProperty(shipmentPathString + "(" + counter + ").delivery.duration", shipment.getDeliveryServiceTime());
+            Collection<TimeWindow> del_tws = deliveryActivity.getTimeWindows();
+            xmlConfig.setProperty(shipmentPathString + "(" + counter + ").delivery.duration", deliveryActivity.getOperationTime());
             index = 0;
             for (TimeWindow tw : del_tws) {
                 xmlConfig.setProperty(shipmentPathString + "(" + counter + ").delivery.timeWindows.timeWindow(" + index + ").start", tw.getStart());
@@ -321,9 +353,11 @@ private void writeShipments(XMLConf xmlConfig, List<Job> jobs) {
                 ++index;
             }
 
-            for (int i = 0; i < shipment.getSize().getNuOfDimensions(); i++) {
+            SizeDimension loadChange = deliveryActivity.getLoadChange().abs();
+            for (int i = 0; i < loadChange.getNuOfDimensions(); i++) {
                 xmlConfig.setProperty(shipmentPathString + "(" + counter + ").capacity-dimensions.dimension(" + i + ")[@index]", i);
-                xmlConfig.setProperty(shipmentPathString + "(" + counter + ").capacity-dimensions.dimension(" + i + ")", shipment.getSize().get(i));
+                xmlConfig.setProperty(shipmentPathString + "(" + counter + ").capacity-dimensions.dimension(" + i + ")",
+                        loadChange.get(i));
             }
 
             //skills
@@ -375,7 +409,7 @@ private void writeVehiclesAndTheirTypes(XMLConfiguration xmlConfig) {
             if (vehicle.getBreak() != null) {
                 Collection<TimeWindow> tws = vehicle.getBreak().getTimeWindows();
                 int index = 0;
-                xmlConfig.setProperty(vehiclePathString + "(" + counter + ").breaks.duration", vehicle.getBreak().getServiceDuration());
+                xmlConfig.setProperty(vehiclePathString + "(" + counter + ").breaks.duration", vehicle.getBreak().getActivity().getOperationTime());
                 for (TimeWindow tw : tws) {
                     xmlConfig.setProperty(vehiclePathString + "(" + counter + ").breaks.timeWindows.timeWindow(" + index + ").start", tw.getStart());
                     xmlConfig.setProperty(vehiclePathString + "(" + counter + ").breaks.timeWindows.timeWindow(" + index + ").end", tw.getEnd());
@@ -422,11 +456,16 @@ private String getSkillString(Job job) {
     }
 
     private String createSkillString(Skills skills) {
-        if (skills.values().size() == 0) return null;
+        if (skills.values().size() == 0) {
+            return null;
+        }
         String skillString = null;
         for (String skill : skills.values()) {
-            if (skillString == null) skillString = skill;
-            else skillString += ", " + skill;
+            if (skillString == null) {
+                skillString = skill;
+            } else {
+                skillString += ", " + skill;
+            }
         }
         return skillString;
     }
diff --git a/jsprit-io/src/test/java/com/graphhopper/jsprit/io/algorithm/TestAlgorithmReader.java b/jsprit-io/src/test/java/com/graphhopper/jsprit/io/algorithm/TestAlgorithmReader.java
index 3c69ab6ed..084140ae4 100644
--- a/jsprit-io/src/test/java/com/graphhopper/jsprit/io/algorithm/TestAlgorithmReader.java
+++ b/jsprit-io/src/test/java/com/graphhopper/jsprit/io/algorithm/TestAlgorithmReader.java
@@ -17,6 +17,16 @@
  */
 package com.graphhopper.jsprit.io.algorithm;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
+import java.util.ArrayList;
+import java.util.Collection;
+
+import org.apache.commons.configuration.ConfigurationException;
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.SearchStrategy;
 import com.graphhopper.jsprit.core.algorithm.SearchStrategyModule;
 import com.graphhopper.jsprit.core.algorithm.VehicleRoutingAlgorithm;
@@ -38,16 +48,6 @@
 import com.graphhopper.jsprit.io.algorithm.VehicleRoutingAlgorithms.TypedMap.SelectorKey;
 import com.graphhopper.jsprit.io.algorithm.VehicleRoutingAlgorithms.TypedMap.StrategyModuleKey;
 import com.graphhopper.jsprit.io.problem.VrpXMLReader;
-import junit.framework.Assert;
-import org.apache.commons.configuration.ConfigurationException;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.ArrayList;
-import java.util.Collection;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
 
 
 public class TestAlgorithmReader {
@@ -71,7 +71,7 @@ public void doBefore() throws ConfigurationException {
     @Test
     public void itShouldReadMaxIterations() {
         VehicleRoutingAlgorithm vra = VehicleRoutingAlgorithms.readAndCreateAlgorithm(vrp, getClass().getResource("algorithmConfigForReaderTest.xml"));
-        Assert.assertEquals(2000, vra.getMaxIterations());
+        assertEquals(2000, vra.getMaxIterations());
     }
 
     static class IterationCounter implements IterationEndsListener {
@@ -91,7 +91,7 @@ public void whenSettingPrematureBreak_itShouldReadTermination() {
         IterationCounter iCounter = new IterationCounter();
         vra.addListener(iCounter);
         vra.searchSolutions();
-        Assert.assertEquals(100, iCounter.iterations);
+        assertEquals(100, iCounter.iterations);
     }
 
     @Test
@@ -100,7 +100,7 @@ public void itShouldReadTermination() {
         IterationCounter iCounter = new IterationCounter();
         vra.addListener(iCounter);
         vra.searchSolutions();
-        Assert.assertEquals(25, iCounter.iterations);
+        assertEquals(25, iCounter.iterations);
     }
 
 
@@ -227,7 +227,7 @@ public String getName() {
 
             @Override
             public void addModuleListener(
-                SearchStrategyModuleListener moduleListener) {
+                    SearchStrategyModuleListener moduleListener) {
 
             }
         };
diff --git a/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLReaderTest.java b/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLReaderTest.java
index d2ec6d8d6..d9f1a10ea 100644
--- a/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLReaderTest.java
+++ b/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLReaderTest.java
@@ -31,6 +31,7 @@
 import org.junit.Before;
 import org.junit.Test;
 
+import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
 import com.graphhopper.jsprit.core.problem.job.Job;
@@ -40,6 +41,7 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.ServiceActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.util.Solutions;
@@ -291,7 +293,7 @@ public void whenReadingServices_capOfService1IsReadCorrectly() {
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
         Service s1 = (Service) vrp.getJobs().get("1");
-        assertEquals(1, s1.getSize().get(0));
+        assertEquals(1, s1.getActivity().getLoadChange().get(0));
     }
 
     @Test
@@ -300,7 +302,7 @@ public void whenReadingServices_durationOfService1IsReadCorrectly() {
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
         Service s1 = (Service) vrp.getJobs().get("1");
-        assertEquals(10.0, s1.getServiceDuration(), 0.01);
+        assertEquals(10.0, s1.getActivity().getOperationTime(), 0.01);
     }
 
     @Test
@@ -309,8 +311,9 @@ public void whenReadingServices_twOfService1IsReadCorrectly() {
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
         Service s1 = (Service) vrp.getJobs().get("1");
-        assertEquals(0.0, s1.getTimeWindow().getStart(), 0.01);
-        assertEquals(4000.0, s1.getTimeWindow().getEnd(), 0.01);
+        TimeWindow tw = s1.getActivity().getSingleTimeWindow();
+        assertEquals(0.0, tw.getStart(), 0.01);
+        assertEquals(4000.0, tw.getEnd(), 0.01);
     }
 
     @Test
@@ -453,7 +456,7 @@ public void whenReadingJobs_capOfShipment3IsReadCorrectly() {
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
         Shipment s = (Shipment) vrp.getJobs().get("3");
-        assertEquals(10, s.getSize().get(0));
+        assertEquals(-10, s.getDeliveryActivity().getLoadChange().get(0));
     }
 
     @Test
@@ -462,7 +465,7 @@ public void whenReadingJobs_pickupServiceTimeOfShipment3IsReadCorrectly() {
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
         Shipment s = (Shipment) vrp.getJobs().get("3");
-        assertEquals(10.0, s.getPickupServiceTime(), 0.01);
+        assertEquals(10.0, s.getPickupActivity().getOperationTime(), 0.01);
     }
 
     @Test
@@ -471,8 +474,9 @@ public void whenReadingJobs_pickupTimeWindowOfShipment3IsReadCorrectly() {
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
         Shipment s = (Shipment) vrp.getJobs().get("3");
-        assertEquals(1000.0, s.getPickupTimeWindow().getStart(), 0.01);
-        assertEquals(4000.0, s.getPickupTimeWindow().getEnd(), 0.01);
+        TimeWindow tw = s.getPickupActivity().getSingleTimeWindow();
+        assertEquals(1000.0, tw.getStart(), 0.01);
+        assertEquals(4000.0, tw.getEnd(), 0.01);
     }
 
     @Test
@@ -481,8 +485,9 @@ public void whenReadingJobs_deliveryTimeWindowOfShipment3IsReadCorrectly() {
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
         Shipment s = (Shipment) vrp.getJobs().get("3");
-        assertEquals(6000.0, s.getDeliveryTimeWindow().getStart(), 0.01);
-        assertEquals(10000.0, s.getDeliveryTimeWindow().getEnd(), 0.01);
+        TimeWindow tw = s.getDeliveryActivity().getSingleTimeWindow();
+        assertEquals(6000.0, tw.getStart(), 0.01);
+        assertEquals(10000.0, tw.getEnd(), 0.01);
     }
 
     @Test
@@ -491,7 +496,7 @@ public void whenReadingJobs_deliveryServiceTimeOfShipment3IsReadCorrectly() {
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
         Shipment s = (Shipment) vrp.getJobs().get("3");
-        assertEquals(100.0, s.getDeliveryServiceTime(), 0.01);
+        assertEquals(100.0, s.getDeliveryActivity().getOperationTime(), 0.01);
     }
 
     @Test
@@ -500,8 +505,9 @@ public void whenReadingJobs_deliveryCoordShipment3IsReadCorrectly() {
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
         Shipment s = (Shipment) vrp.getJobs().get("3");
-        assertEquals(10.0, s.getDeliveryLocation().getCoordinate().getX(), 0.01);
-        assertEquals(0.0, s.getDeliveryLocation().getCoordinate().getY(), 0.01);
+        Location deliveryLocation = s.getDeliveryActivity().getLocation();
+        assertEquals(10.0, deliveryLocation.getCoordinate().getX(), 0.01);
+        assertEquals(0.0, deliveryLocation.getCoordinate().getY(), 0.01);
     }
 
     @Test
@@ -510,8 +516,9 @@ public void whenReadingJobs_pickupCoordShipment3IsReadCorrectly() {
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
         Shipment s = (Shipment) vrp.getJobs().get("3");
-        assertEquals(10.0, s.getPickupLocation().getCoordinate().getX(), 0.01);
-        assertEquals(10.0, s.getPickupLocation().getCoordinate().getY(), 0.01);
+        Location pickupLocation = s.getPickupActivity().getLocation();
+        assertEquals(10.0, pickupLocation.getCoordinate().getX(), 0.01);
+        assertEquals(10.0, pickupLocation.getCoordinate().getY(), 0.01);
     }
 
     @Test
@@ -520,7 +527,7 @@ public void whenReadingJobs_deliveryIdShipment3IsReadCorrectly() {
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
         Shipment s = (Shipment) vrp.getJobs().get("3");
-        assertEquals("i(9,9)", s.getDeliveryLocation().getId());
+        assertEquals("i(9,9)", s.getDeliveryActivity().getLocation().getId());
     }
 
     @Test
@@ -529,7 +536,7 @@ public void whenReadingJobs_pickupIdShipment3IsReadCorrectly() {
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
         Shipment s = (Shipment) vrp.getJobs().get("3");
-        assertEquals("i(3,9)", s.getPickupLocation().getId());
+        assertEquals("i(3,9)", s.getPickupActivity().getLocation().getId());
     }
 
     @Test
@@ -538,7 +545,7 @@ public void whenReadingJobs_pickupLocationIdShipment4IsReadCorrectly() {
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
         Shipment s = (Shipment) vrp.getJobs().get("4");
-        assertEquals("[x=10.0][y=10.0]", s.getPickupLocation().getId());
+        assertEquals("[x=10.0][y=10.0]", s.getPickupActivity().getLocation().getId());
     }
 
     @Test
@@ -547,7 +554,7 @@ public void whenReadingJobs_deliveryLocationIdShipment4IsReadCorrectly() {
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
         Shipment s = (Shipment) vrp.getJobs().get("4");
-        assertEquals("[x=10.0][y=0.0]", s.getDeliveryLocation().getId());
+        assertEquals("[x=10.0][y=0.0]", s.getDeliveryActivity().getLocation().getId());
     }
 
     @Test
@@ -556,7 +563,7 @@ public void whenReadingJobs_pickupServiceTimeOfShipment4IsReadCorrectly() {
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
         Shipment s = (Shipment) vrp.getJobs().get("4");
-        assertEquals(0.0, s.getPickupServiceTime(), 0.01);
+        assertEquals(0.0, s.getPickupActivity().getOperationTime(), 0.01);
     }
 
     @Test
@@ -565,7 +572,7 @@ public void whenReadingJobs_deliveryServiceTimeOfShipment4IsReadCorrectly() {
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
         Shipment s = (Shipment) vrp.getJobs().get("4");
-        assertEquals(100.0, s.getDeliveryServiceTime(), 0.01);
+        assertEquals(100.0, s.getDeliveryActivity().getOperationTime(), 0.01);
     }
 
     @Test
diff --git a/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLWriterTest.java b/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLWriterTest.java
index 4e67a5750..7fa42fab2 100644
--- a/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLWriterTest.java
+++ b/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLWriterTest.java
@@ -25,11 +25,11 @@
 import java.util.Collection;
 import java.util.List;
 
-import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 
 import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.AbstractSingleActivityJob;
 import com.graphhopper.jsprit.core.problem.job.Service;
@@ -121,9 +121,9 @@ public void whenWritingServices_itWritesThemCorrectly() {
 
         Service s1_read = (Service) vrp.getJobs().get("1");
         assertEquals("1", s1_read.getId());
-        Assert.assertEquals("loc", s1_read.getLocation().getId());
+        assertEquals("loc", s1_read.getActivity().getLocation().getId());
         assertEquals("pickup", s1_read.getType());
-        assertEquals(2.0, s1_read.getServiceDuration(), 0.01);
+        assertEquals(2.0, s1_read.getActivity().getOperationTime(), 0.01);
     }
 
     @Test
@@ -157,7 +157,7 @@ public void shouldWriteNameOfShipment() {
         VehicleRoutingProblem readVrp = vrpToReadBuilder.build();
         Shipment s1_read = (Shipment) readVrp.getJobs().get("1");
         assertTrue(s1_read.getName().equals("cleaning"));
-        Assert.assertEquals(1, s1_read.getPickupLocation().getIndex());
+        assertEquals(1, s1_read.getPickupActivity().getLocation().getIndex());
     }
 
     @Test
@@ -180,9 +180,10 @@ public void whenWritingServicesWithSeveralCapacityDimensions_itWritesThemCorrect
 
         Service s1_read = (Service) vrp.getJobs().get("1");
 
-        Assert.assertEquals(2, s1_read.getSize().getNuOfDimensions());
-        Assert.assertEquals(20, s1_read.getSize().get(0));
-        Assert.assertEquals(200, s1_read.getSize().get(1));
+        SizeDimension size = s1_read.getActivity().getLoadChange();
+        assertEquals(2, size.getNuOfDimensions());
+        assertEquals(20, size.get(0));
+        assertEquals(200, size.get(1));
 
     }
 
@@ -216,9 +217,8 @@ public void whenWritingShipments_readingThemAgainMustReturnTheWrittenLocationIds
         VehicleRoutingProblem readVrp = vrpToReadBuilder.build();
         assertEquals(2, readVrp.getJobs().size());
 
-        Assert.assertEquals("pickLoc", ((Shipment) readVrp.getJobs().get("1")).getPickupLocation().getId());
-        Assert.assertEquals("delLoc", ((Shipment) readVrp.getJobs().get("1")).getDeliveryLocation().getId());
-
+        assertEquals("pickLoc", ((Shipment) readVrp.getJobs().get("1")).getPickupActivity().getLocation().getId());
+        assertEquals("delLoc", ((Shipment) readVrp.getJobs().get("1")).getDeliveryActivity().getLocation().getId());
     }
 
     @Test
@@ -251,10 +251,9 @@ public void whenWritingShipments_readingThemAgainMustReturnTheWrittenPickupTimeW
         VehicleRoutingProblem readVrp = vrpToReadBuilder.build();
         assertEquals(2, readVrp.getJobs().size());
 
-        Assert.assertEquals(1.0, ((Shipment) readVrp.getJobs().get("1")).getPickupTimeWindow().getStart(), 0.01);
-        Assert.assertEquals(2.0, ((Shipment) readVrp.getJobs().get("1")).getPickupTimeWindow().getEnd(), 0.01);
-
-
+        TimeWindow tw = ((Shipment) readVrp.getJobs().get("1")).getPickupActivity().getSingleTimeWindow();
+        assertEquals(1.0, tw.getStart(), 0.01);
+        assertEquals(2.0, tw.getEnd(), 0.01);
     }
 
     @Test
@@ -287,9 +286,9 @@ public void whenWritingShipments_readingThemAgainMustReturnTheWrittenDeliveryTim
         VehicleRoutingProblem readVrp = vrpToReadBuilder.build();
         assertEquals(2, readVrp.getJobs().size());
 
-        Assert.assertEquals(3.0, ((Shipment) readVrp.getJobs().get("1")).getDeliveryTimeWindow().getStart(), 0.01);
-        Assert.assertEquals(4.0, ((Shipment) readVrp.getJobs().get("1")).getDeliveryTimeWindow().getEnd(), 0.01);
-
+        TimeWindow tw = ((Shipment) readVrp.getJobs().get("1")).getDeliveryActivity().getSingleTimeWindow();
+        assertEquals(3.0, tw.getStart(), 0.01);
+        assertEquals(4.0, tw.getEnd(), 0.01);
     }
 
     @Test
@@ -322,8 +321,8 @@ public void whenWritingShipments_readingThemAgainMustReturnTheWrittenDeliverySer
         VehicleRoutingProblem readVrp = vrpToReadBuilder.build();
         assertEquals(2, readVrp.getJobs().size());
 
-        assertEquals(100.0, ((Shipment) readVrp.getJobs().get("1")).getPickupServiceTime(), 0.01);
-        assertEquals(50.0, ((Shipment) readVrp.getJobs().get("1")).getDeliveryServiceTime(), 0.01);
+        assertEquals(100.0, ((Shipment) readVrp.getJobs().get("1")).getPickupActivity().getOperationTime(), 0.01);
+        assertEquals(50.0, ((Shipment) readVrp.getJobs().get("1")).getDeliveryActivity().getOperationTime(), 0.01);
 
     }
 
@@ -357,7 +356,7 @@ public void whenWritingShipments_readingThemAgainMustReturnTheWrittenLocationIdO
         VehicleRoutingProblem readVrp = vrpToReadBuilder.build();
         assertEquals(2, readVrp.getJobs().size());
 
-        Assert.assertEquals("[x=1.0][y=2.0]", ((Shipment) readVrp.getJobs().get("1")).getPickupLocation().getId());
+        assertEquals("[x=1.0][y=2.0]", ((Shipment) readVrp.getJobs().get("1")).getPickupActivity().getLocation().getId());
     }
 
     @Test
@@ -376,7 +375,7 @@ public void whenWritingVehicles_vehShouldHave2Skills() {
         VehicleRoutingProblem readVrp = vrpToReadBuilder.build();
         Vehicle veh1 = getVehicle("v1", readVrp);
 
-        Assert.assertEquals(3, veh1.getSkills().values().size());
+        assertEquals(3, veh1.getSkills().values().size());
     }
 
     @Test
@@ -451,7 +450,7 @@ public void whenWritingVehicles_vehShouldHave0Skills() {
         VehicleRoutingProblem readVrp = vrpToReadBuilder.build();
         Vehicle veh = getVehicle("v1", readVrp);
 
-        Assert.assertEquals(0, veh.getSkills().values().size());
+        assertEquals(0, veh.getSkills().values().size());
     }
 
     private Vehicle getVehicle(String v1, VehicleRoutingProblem readVrp) {
@@ -481,7 +480,7 @@ public void whenWritingShipments_shipmentShouldHaveCorrectNuSkills() {
         new VrpXMLReader(vrpToReadBuilder, null).read(infileName);
         VehicleRoutingProblem readVrp = vrpToReadBuilder.build();
 
-        Assert.assertEquals(3, readVrp.getJobs().get("1").getRequiredSkills().values().size());
+        assertEquals(3, readVrp.getJobs().get("1").getRequiredSkills().values().size());
     }
 
     @Test
@@ -578,11 +577,11 @@ public void whenWritingShipments_readingThemAgainMustReturnTheWrittenLocationCoo
         VehicleRoutingProblem readVrp = vrpToReadBuilder.build();
         assertEquals(2, readVrp.getJobs().size());
 
-        Assert.assertEquals(1.0, ((Shipment) readVrp.getJobs().get("1")).getPickupLocation().getCoordinate().getX(), 0.01);
-        Assert.assertEquals(2.0, ((Shipment) readVrp.getJobs().get("1")).getPickupLocation().getCoordinate().getY(), 0.01);
+        assertEquals(1.0, ((Shipment) readVrp.getJobs().get("1")).getPickupActivity().getLocation().getCoordinate().getX(), 0.01);
+        assertEquals(2.0, ((Shipment) readVrp.getJobs().get("1")).getPickupActivity().getLocation().getCoordinate().getY(), 0.01);
 
-        Assert.assertEquals(5.0, ((Shipment) readVrp.getJobs().get("1")).getDeliveryLocation().getCoordinate().getX(), 0.01);
-        Assert.assertEquals(6.0, ((Shipment) readVrp.getJobs().get("1")).getDeliveryLocation().getCoordinate().getY(), 0.01);
+        assertEquals(5.0, ((Shipment) readVrp.getJobs().get("1")).getDeliveryActivity().getLocation().getCoordinate().getX(), 0.01);
+        assertEquals(6.0, ((Shipment) readVrp.getJobs().get("1")).getDeliveryActivity().getLocation().getCoordinate().getY(), 0.01);
     }
 
     @Test
@@ -610,13 +609,13 @@ public void whenWritingShipmentWithSeveralCapacityDimension_itShouldWriteAndRead
         new VrpXMLReader(vrpToReadBuilder, null).read(infileName);
         VehicleRoutingProblem readVrp = vrpToReadBuilder.build();
 
-        Assert.assertEquals(3, (readVrp.getJobs().get("1")).getSize().getNuOfDimensions());
-        Assert.assertEquals(10, (readVrp.getJobs().get("1")).getSize().get(0));
-        Assert.assertEquals(0, (readVrp.getJobs().get("1")).getSize().get(1));
-        Assert.assertEquals(100, (readVrp.getJobs().get("1")).getSize().get(2));
+        assertEquals(3, (readVrp.getJobs().get("1")).getSize().getNuOfDimensions());
+        assertEquals(10, (readVrp.getJobs().get("1")).getSize().get(0));
+        assertEquals(0, (readVrp.getJobs().get("1")).getSize().get(1));
+        assertEquals(100, (readVrp.getJobs().get("1")).getSize().get(2));
 
-        Assert.assertEquals(1, (readVrp.getJobs().get("2")).getSize().getNuOfDimensions());
-        Assert.assertEquals(20, (readVrp.getJobs().get("2")).getSize().get(0));
+        assertEquals(1, (readVrp.getJobs().get("2")).getSize().getNuOfDimensions());
+        assertEquals(20, (readVrp.getJobs().get("2")).getSize().get(0));
     }
 
     @Test
@@ -642,8 +641,8 @@ public void whenWritingVehicleV1_itsStartLocationMustBeWrittenCorrectly() {
         VehicleRoutingProblem readVrp = vrpToReadBuilder.build();
 
         Vehicle v = getVehicle("v1", readVrp.getVehicles());
-        Assert.assertEquals("loc", v.getStartLocation().getId());
-        Assert.assertEquals("loc", v.getEndLocation().getId());
+        assertEquals("loc", v.getStartLocation().getId());
+        assertEquals("loc", v.getEndLocation().getId());
 
     }
 
@@ -661,7 +660,7 @@ public void whenWritingService_itShouldHaveTheCorrectNuSkills() {
         new VrpXMLReader(vrpToReadBuilder, null).read(infileName);
         VehicleRoutingProblem readVrp = vrpToReadBuilder.build();
 
-        Assert.assertEquals(2, readVrp.getJobs().get("1").getRequiredSkills().values().size());
+        assertEquals(2, readVrp.getJobs().get("1").getRequiredSkills().values().size());
     }
 
     @Test
@@ -775,7 +774,7 @@ public void whenWritingVehicleV2_readingAgainAssignsCorrectType() {
 
         Vehicle v = getVehicle("v2", readVrp.getVehicles());
         assertEquals("vehType2", v.getType().getTypeId());
-        Assert.assertEquals(200, v.getType().getCapacityDimensions().get(0));
+        assertEquals(200, v.getType().getCapacityDimensions().get(0));
 
     }
 
@@ -804,8 +803,8 @@ public void whenWritingVehicleV2_readingItsLocationsAgainReturnsCorrectLocations
         VehicleRoutingProblem readVrp = vrpToReadBuilder.build();
 
         Vehicle v = getVehicle("v2", readVrp.getVehicles());
-        Assert.assertEquals("startLoc", v.getStartLocation().getId());
-        Assert.assertEquals("endLoc", v.getEndLocation().getId());
+        assertEquals("startLoc", v.getStartLocation().getId());
+        assertEquals("endLoc", v.getEndLocation().getId());
     }
 
     @Test
@@ -834,11 +833,11 @@ public void whenWritingVehicleV2_readingItsLocationsCoordsAgainReturnsCorrectLoc
         VehicleRoutingProblem readVrp = vrpToReadBuilder.build();
 
         Vehicle v = getVehicle("v2", readVrp.getVehicles());
-        Assert.assertEquals(1.0, v.getStartLocation().getCoordinate().getX(), 0.01);
-        Assert.assertEquals(2.0, v.getStartLocation().getCoordinate().getY(), 0.01);
+        assertEquals(1.0, v.getStartLocation().getCoordinate().getX(), 0.01);
+        assertEquals(2.0, v.getStartLocation().getCoordinate().getY(), 0.01);
 
-        Assert.assertEquals(4.0, v.getEndLocation().getCoordinate().getX(), 0.01);
-        Assert.assertEquals(5.0, v.getEndLocation().getCoordinate().getY(), 0.01);
+        assertEquals(4.0, v.getEndLocation().getCoordinate().getX(), 0.01);
+        assertEquals(5.0, v.getEndLocation().getCoordinate().getY(), 0.01);
     }
 
     @Test
@@ -864,10 +863,10 @@ public void whenWritingVehicleWithSeveralCapacityDimensions_itShouldBeWrittenAnd
         VehicleRoutingProblem readVrp = vrpToReadBuilder.build();
 
         Vehicle v = getVehicle("v", readVrp.getVehicles());
-        Assert.assertEquals(3, v.getType().getCapacityDimensions().getNuOfDimensions());
-        Assert.assertEquals(100, v.getType().getCapacityDimensions().get(0));
-        Assert.assertEquals(1000, v.getType().getCapacityDimensions().get(1));
-        Assert.assertEquals(10000, v.getType().getCapacityDimensions().get(2));
+        assertEquals(3, v.getType().getCapacityDimensions().getNuOfDimensions());
+        assertEquals(100, v.getType().getCapacityDimensions().get(0));
+        assertEquals(1000, v.getType().getCapacityDimensions().get(1));
+        assertEquals(10000, v.getType().getCapacityDimensions().get(2));
     }
 
     @Test
@@ -893,9 +892,9 @@ public void whenWritingVehicleWithSeveralCapacityDimensions_itShouldBeWrittenAnd
         VehicleRoutingProblem readVrp = vrpToReadBuilder.build();
 
         Vehicle v = getVehicle("v", readVrp.getVehicles());
-        Assert.assertEquals(11, v.getType().getCapacityDimensions().getNuOfDimensions());
-        Assert.assertEquals(0, v.getType().getCapacityDimensions().get(9));
-        Assert.assertEquals(10000, v.getType().getCapacityDimensions().get(10));
+        assertEquals(11, v.getType().getCapacityDimensions().getNuOfDimensions());
+        assertEquals(0, v.getType().getCapacityDimensions().get(9));
+        assertEquals(10000, v.getType().getCapacityDimensions().get(10));
     }
 
     private Vehicle getVehicle(String string, Collection<Vehicle> vehicles) {
@@ -934,7 +933,7 @@ public void solutionWithoutUnassignedJobsShouldBeWrittenCorrectly() {
         new VrpXMLReader(vrpToReadBuilder, solutionsToRead).read(infileName);
 
         assertEquals(1, solutionsToRead.size());
-        Assert.assertEquals(10., Solutions.bestOf(solutionsToRead).getCost(), 0.01);
+        assertEquals(10., Solutions.bestOf(solutionsToRead).getCost(), 0.01);
         assertTrue(Solutions.bestOf(solutionsToRead).getUnassignedJobs().isEmpty());
     }
 
@@ -966,9 +965,9 @@ public void solutionWithUnassignedJobsShouldBeWrittenCorrectly() {
         new VrpXMLReader(vrpToReadBuilder, solutionsToRead).read(infileName);
 
         assertEquals(1, solutionsToRead.size());
-        Assert.assertEquals(10., Solutions.bestOf(solutionsToRead).getCost(), 0.01);
-        Assert.assertEquals(1, Solutions.bestOf(solutionsToRead).getUnassignedJobs().size());
-        Assert.assertEquals("2", Solutions.bestOf(solutionsToRead).getUnassignedJobs().iterator().next().getId());
+        assertEquals(10., Solutions.bestOf(solutionsToRead).getCost(), 0.01);
+        assertEquals(1, Solutions.bestOf(solutionsToRead).getUnassignedJobs().size());
+        assertEquals("2", Solutions.bestOf(solutionsToRead).getUnassignedJobs().iterator().next().getId());
     }
 
 }
