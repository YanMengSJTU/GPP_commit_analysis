diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/ColumnConfigBase.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/ColumnConfigBase.java
new file mode 100644
index 000000000..5da68d7cd
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/ColumnConfigBase.java
@@ -0,0 +1,79 @@
+package com.graphhopper.jsprit.core.reporting;
+
+import java.util.Collection;
+import java.util.stream.Collectors;
+
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
+
+public abstract class ColumnConfigBase {
+
+    private HumanReadableTimeFormatter timeFormatter;
+    private HumanReadableDurationFormatter durationFormatter;
+
+    public HumanReadableTimeFormatter getTimeFormatter() {
+        return timeFormatter;
+    }
+
+    protected void setTimeFormatter(HumanReadableTimeFormatter timeFormatter) {
+        this.timeFormatter = timeFormatter;
+    }
+
+    public HumanReadableDurationFormatter getDurationFormatter() {
+        return durationFormatter;
+    }
+
+    protected void setDurationFormatter(HumanReadableDurationFormatter durationFormatter) {
+        this.durationFormatter = durationFormatter;
+    }
+
+    protected String formatTimeWindowsNumeric(Collection<TimeWindow> timeWindows) {
+        if (timeWindows == null || timeWindows.isEmpty())
+            return "";
+        return timeWindows.stream().map(tw -> formatTimeWindowNumeric(tw))
+                .collect(Collectors.joining());
+    }
+
+    protected String formatTimeWindowsHuman(Collection<TimeWindow> timeWindows) {
+        if (timeWindows == null || timeWindows.isEmpty())
+            return "";
+        return timeWindows.stream().map(tw -> formatTimeWindowHuman(tw))
+                .collect(Collectors.joining());
+    }
+
+    protected String formatTimeWindowNumeric(TimeWindow tw) {
+        String res = "";
+        if (tw != null) {
+            res = "[" + (long) tw.getStart() + "-";
+            if (tw.getEnd() == Double.MAX_VALUE) {
+                res += "";
+            } else {
+                res += (long) tw.getEnd();
+            }
+            res += "]";
+        }
+        return res;
+    }
+
+    protected String formatTimeWindowHuman(TimeWindow tw) {
+        String res = "";
+        if (tw != null) {
+            res = "[" + timeFormatter.convert((long) tw.getStart()) + "-";
+            if (tw.getEnd() == Double.MAX_VALUE) {
+                res += "";
+            } else {
+                res += timeFormatter.convert((long) tw.getEnd());
+            }
+            res += "]";
+        }
+        return res;
+    }
+
+    protected String formatDurationHuman(Long data) {
+        return durationFormatter.convert(data);
+    }
+
+    protected String formatTimeHuman(Long data) {
+        return timeFormatter.convert(data);
+    }
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/RouteDetailsConfig.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/RouteDetailsConfig.java
index 9a6e7a43b..007a5dff0 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/RouteDetailsConfig.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/RouteDetailsConfig.java
@@ -30,7 +30,7 @@
 import hu.vissy.texttable.dataextractor.StatefulDataExtractor;
 
 
-public class RouteDetailsConfig {
+public class RouteDetailsConfig extends ColumnConfigBase {
 
     private static final String[] PRIORITY_NAMES = new String[] { "", /* 1 */ "highest",
             /* 2 */ "very high", /* 3 */ "high", /* 4 */ "above medium", /* 5 */ "medium",
@@ -571,105 +571,26 @@ public RouteDetailsConfig build() {
     }
 
     private DisplayMode displayMode;
-    private LocalDateTime humanReadableOrigin;
-    private ChronoUnit lowUnit;
-    private ChronoUnit highUnit;
     private List<Column> columns;
 
-    private HumanReadableTimeFormatter timeFormatter;
-    private HumanReadableDurationFormatter durationFormatter;
-
     private RouteDetailsConfig(Builder builder) {
-        this.humanReadableOrigin = builder.humanReadableOrigin;
         this.displayMode = builder.displayMode;
         this.columns = builder.columns;
-        this.lowUnit = builder.lowUnit;
-        this.highUnit = builder.highUnit;
-        timeFormatter = new HumanReadableTimeFormatter(humanReadableOrigin, lowUnit);
-        durationFormatter = new HumanReadableDurationFormatter(lowUnit, highUnit);
+        setTimeFormatter(
+                new HumanReadableTimeFormatter(builder.humanReadableOrigin, builder.lowUnit));
+        setDurationFormatter(new HumanReadableDurationFormatter(builder.lowUnit, builder.highUnit));
     }
 
 
-
-
     public DisplayMode getDisplayMode() {
         return displayMode;
     }
 
-    public LocalDateTime getHumanReadableOrigin() {
-        return humanReadableOrigin;
-    }
-
-    public ChronoUnit getLowUnit() {
-        return lowUnit;
-    }
-
-    public ChronoUnit getHighUnit() {
-        return highUnit;
-    }
-
-    public HumanReadableTimeFormatter getTimeFormatter() {
-        return timeFormatter;
-    }
-
-    public HumanReadableDurationFormatter getDurationFormatter() {
-        return durationFormatter;
-    }
-
     public List<ColumnDefinition<RouteDeatailsRecord, ?, ?>> getColumns() {
         List<ColumnDefinition<RouteDeatailsRecord, ?, ?>> columns = new ArrayList<>();
         this.columns.forEach(c -> columns.addAll(c.createColumns(this)));
         return columns;
     }
 
-    protected String formatTimeWindowsNumeric(Collection<TimeWindow> timeWindows) {
-        if (timeWindows == null || timeWindows.isEmpty())
-            return "";
-        return timeWindows.stream().map(tw -> formatTimeWindowNumeric(tw))
-                .collect(Collectors.joining());
-    }
-
-    protected String formatTimeWindowsHuman(Collection<TimeWindow> timeWindows) {
-        if (timeWindows == null || timeWindows.isEmpty())
-            return "";
-        return timeWindows.stream().map(tw -> formatTimeWindowHuman(tw))
-                .collect(Collectors.joining());
-    }
-
-    private String formatTimeWindowNumeric(TimeWindow tw) {
-        String res = "";
-        if (tw != null) {
-            res = "[" + (long) tw.getStart() + "-";
-            if (tw.getEnd() == Double.MAX_VALUE) {
-                res += "";
-            } else {
-                res += (long) tw.getEnd();
-            }
-            res += "]";
-        }
-        return res;
-    }
-
-    private String formatTimeWindowHuman(TimeWindow tw) {
-        String res = "";
-        if (tw != null) {
-            res = "[" + timeFormatter.convert((long) tw.getStart()) + "-";
-            if (tw.getEnd() == Double.MAX_VALUE) {
-                res += "";
-            } else {
-                res += timeFormatter.convert((long) tw.getEnd());
-            }
-            res += "]";
-        }
-        return res;
-    }
-
-    protected String formatDurationHuman(Long data) {
-        return durationFormatter.convert(data);
-    }
-
-    protected String formatTimeHuman(Long data) {
-        return timeFormatter.convert(data);
-    }
 
 }
\ No newline at end of file
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter2.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter2.java
index 8f48ac90c..91d08e8e7 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter2.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter2.java
@@ -67,6 +67,7 @@ public static void print(PrintWriter out, VehicleRoutingProblem problem,
         printSolutionSummary(out, solution);
         printCostDetails(out, solution);
         printRouteDetails(out, problem, solution);
+        printVehicleSummary(out, problem, solution);
         out.flush();
     }
 
@@ -221,5 +222,28 @@ private static void printRouteData(PrintWriter out, VehicleRoutingProblem proble
 
         out.println(tableDef.apply(data));
     }
+
+    private static void printVehicleSummary(PrintWriter out, VehicleRoutingProblem problem,
+            VehicleRoutingProblemSolution solution) {
+        Builder<VehicleSummaryRecord> builder = new TableFormatter.Builder<VehicleSummaryRecord>()
+                .withBorderFormatter(
+                        new BorderFormatter.Builder(DefaultFormatters.ASCII_LINEDRAW).build())
+                .withHeading("Vehicle summary");
+
+        new VehicleSummaryConfig.Builder()
+        .withColumns(VehicleSummaryConfig.Column.values())
+        .build()
+        .getColumns()
+        .forEach(c -> builder.withColumn(c));
+
+        TableFormatter<VehicleSummaryRecord> tableDef = builder.build();
+
+        List<VehicleSummaryRecord> data = solution.getRoutes().stream()
+            .map(r -> new VehicleSummaryRecord(r, problem))
+            .collect(Collectors.toList());
+
+        out.println(tableDef.apply(data));
+    }
+
 }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/VehicleSummaryConfig.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/VehicleSummaryConfig.java
new file mode 100644
index 000000000..d36b8ba72
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/VehicleSummaryConfig.java
@@ -0,0 +1,420 @@
+package com.graphhopper.jsprit.core.reporting;
+
+import java.math.RoundingMode;
+import java.text.NumberFormat;
+import java.time.LocalDate;
+import java.time.LocalDateTime;
+import java.time.LocalTime;
+import java.time.temporal.ChronoUnit;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.EnumSet;
+import java.util.List;
+import java.util.Map;
+import java.util.function.Function;
+import java.util.stream.Collectors;
+
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
+
+import hu.vissy.texttable.column.ColumnDefinition;
+import hu.vissy.texttable.contentformatter.CellContentFormatter;
+import hu.vissy.texttable.dataconverter.NumberDataConverter;
+import hu.vissy.texttable.dataconverter.StringDataConverter;
+
+
+public class VehicleSummaryConfig extends ColumnConfigBase {
+
+    public static final EnumSet<DisplayMode> MODE_SET_HUMAN = EnumSet.<DisplayMode>of(
+            DisplayMode.NUMERIC, DisplayMode.HUMAN_READABLE);
+
+    public static final EnumSet<DisplayMode> MODE_SET_ALL = EnumSet.<DisplayMode>of(
+            DisplayMode.NUMERIC, DisplayMode.HUMAN_READABLE, DisplayMode.PERCENT_ROUTE,
+            DisplayMode.PERCENT_SHIFT);
+
+    public enum DisplayMode {
+        GENERIC(""), NUMERIC(""), HUMAN_READABLE(" (H)"), PERCENT_ROUTE(" (R%)"), PERCENT_SHIFT(
+                " (S%)");
+
+        private String postfix;
+
+        private DisplayMode(String postfix) {
+            this.postfix = postfix;
+        }
+
+        public String getPostfix() {
+            return postfix;
+        }
+    }
+
+    public enum Column {
+        ROUTE_NUMBER(null) {
+            @Override
+            public List<ColumnDefinition<VehicleSummaryRecord, ?, ?>> createColumns(
+                    VehicleSummaryConfig vehicleSummaryConfig) {
+                return Collections.singletonList(
+                        new ColumnDefinition.StatelessBuilder<VehicleSummaryRecord, Integer>()
+                        .withTitle("route #")
+                        .withDataExtractor(r -> r.getRouteNr())
+                        .withCellContentFormatter(CellContentFormatter.rightAlignedCell())
+                        .withDataConverter(NumberDataConverter.defaultIntegerFormatter())
+                        .build());
+            }
+        },
+
+        VEHICLE_NAME(null) {
+            @Override
+            public List<ColumnDefinition<VehicleSummaryRecord, ?, ?>> createColumns(
+                    VehicleSummaryConfig vehicleSummaryConfig) {
+                return Collections.singletonList(
+                        new ColumnDefinition.StatelessBuilder<VehicleSummaryRecord, String>()
+                        .withTitle("vehicle")
+                        .withDataExtractor(r -> r.getVehicle().getId())
+                        .withDataConverter(new StringDataConverter())
+                        .build());
+            }
+        },
+
+        VEHICLE_TYPE(null) {
+            @Override
+            public List<ColumnDefinition<VehicleSummaryRecord, ?, ?>> createColumns(
+                    VehicleSummaryConfig vehicleSummaryConfig) {
+                return Collections.singletonList(
+                        new ColumnDefinition.StatelessBuilder<VehicleSummaryRecord, String>()
+                        .withTitle("vehicle type")
+                        .withDataExtractor(r -> r.getVehicle().getType().getTypeId())
+                        .withDataConverter(new StringDataConverter())
+                        .build());
+            }
+        },
+
+        DRIVER(null) {
+            @Override
+            public List<ColumnDefinition<VehicleSummaryRecord, ?, ?>> createColumns(
+                    VehicleSummaryConfig vehicleSummaryConfig) {
+                return Collections.singletonList(
+                        new ColumnDefinition.StatelessBuilder<VehicleSummaryRecord, String>()
+                        .withTitle("driver")
+                        .withDataExtractor(r -> r.getDriver().getId())
+                        .withDataConverter(new StringDataConverter())
+                        .build());
+            }
+        },
+
+        ACTIVITY_COUNT(null) {
+            @Override
+            public List<ColumnDefinition<VehicleSummaryRecord, ?, ?>> createColumns(
+                    VehicleSummaryConfig vehicleSummaryConfig) {
+                return Collections.singletonList(
+                        new ColumnDefinition.StatelessBuilder<VehicleSummaryRecord, Integer>()
+                        .withTitle("act count")
+                        .withDataExtractor(r -> r.getActivityCount())
+                        .withCellContentFormatter(CellContentFormatter.rightAlignedCell())
+                        .withDataConverter(NumberDataConverter.defaultIntegerFormatter())
+                        .build());
+            }
+        },
+
+        ACTIVITY_COUNT_BY_TYPE(null) {
+            @Override
+            public List<ColumnDefinition<VehicleSummaryRecord, ?, ?>> createColumns(
+                    VehicleSummaryConfig vehicleSummaryConfig) {
+                return Collections.singletonList(
+                        new ColumnDefinition.StatelessBuilder<VehicleSummaryRecord, Map<String, Integer>>()
+                        .withTitle("act stat")
+                        .withDataExtractor(r -> r.getActivityCountByType())
+                        .withDataConverter(d -> d.entrySet().stream()
+                                .map(en -> "[" + en.getKey() + "=" + en.getValue() + "]")
+                                .collect(Collectors.joining()))
+                        .build());
+            }
+        },
+
+        TRAVEL_DISTANCE(null) {
+            @Override
+            public List<ColumnDefinition<VehicleSummaryRecord, ?, ?>> createColumns(
+                    VehicleSummaryConfig vehicleSummaryConfig) {
+                return Collections.singletonList(
+                        new ColumnDefinition.StatelessBuilder<VehicleSummaryRecord, Long>()
+                            .withTitle("travel dist")
+                            .withDataExtractor(r -> r.getTravelDistance())
+                            .withCellContentFormatter(CellContentFormatter.rightAlignedCell())
+                            .withDataConverter(NumberDataConverter.defaultLongFormatter())
+                            .build());
+            }
+        },
+
+        SHIFT_TIME_WINDOW(MODE_SET_HUMAN) {
+
+            @Override
+            public List<ColumnDefinition<VehicleSummaryRecord, ?, ?>> createColumns(
+                    VehicleSummaryConfig vehicleSummaryConfig) {
+                return createTimeWindowColumn(this, "shift tw", vehicleSummaryConfig,
+                        r -> new TimeWindow(r.getVehicle().getEarliestDeparture(),
+                                r.getVehicle().getLatestArrival()));
+            }
+        },
+
+        SHIFT_DURATION(MODE_SET_HUMAN) {
+
+            @Override
+            public List<ColumnDefinition<VehicleSummaryRecord, ?, ?>> createColumns(
+                    VehicleSummaryConfig vehicleSummaryConfig) {
+                return createDurationColumn(this, "shift dur", vehicleSummaryConfig,
+                        r -> r.getShiftDuration());
+            }
+        },
+
+        ROUTE_TIME_WINDOW(MODE_SET_HUMAN) {
+
+            @Override
+            public List<ColumnDefinition<VehicleSummaryRecord, ?, ?>> createColumns(
+                    VehicleSummaryConfig vehicleSummaryConfig) {
+                return createTimeWindowColumn(this, "route tw", vehicleSummaryConfig,
+                        r -> new TimeWindow(r.getStart(), r.getEnd()));
+            }
+        },
+
+        ROUTE_DURATION(MODE_SET_ALL) {
+
+            @Override
+            public List<ColumnDefinition<VehicleSummaryRecord, ?, ?>> createColumns(
+                    VehicleSummaryConfig vehicleSummaryConfig) {
+                return createDurationColumn(this, "route", vehicleSummaryConfig,
+                        r -> r.getRouteDuration());
+            }
+        },
+
+        TRAVEL_DURATION(MODE_SET_ALL) {
+
+            @Override
+            public List<ColumnDefinition<VehicleSummaryRecord, ?, ?>> createColumns(
+                    VehicleSummaryConfig vehicleSummaryConfig) {
+                return createDurationColumn(this, "travel", vehicleSummaryConfig,
+                        r -> r.getTravelDuration());
+            }
+        },
+
+        OPERATION_DURATION(MODE_SET_ALL) {
+
+            @Override
+            public List<ColumnDefinition<VehicleSummaryRecord, ?, ?>> createColumns(
+                    VehicleSummaryConfig vehicleSummaryConfig) {
+                return createDurationColumn(this, "operation", vehicleSummaryConfig,
+                        r -> r.getOperationDuration());
+            }
+        },
+
+        ACTIVE_DURATION(MODE_SET_ALL) {
+
+            @Override
+            public List<ColumnDefinition<VehicleSummaryRecord, ?, ?>> createColumns(
+                    VehicleSummaryConfig vehicleSummaryConfig) {
+                return createDurationColumn(this, "active", vehicleSummaryConfig,
+                        r -> r.getActiveDuration());
+            }
+        },
+
+        IDLE_DURATION(MODE_SET_ALL) {
+
+            @Override
+            public List<ColumnDefinition<VehicleSummaryRecord, ?, ?>> createColumns(
+                    VehicleSummaryConfig vehicleSummaryConfig) {
+                return createDurationColumn(this, "idle", vehicleSummaryConfig,
+                        r -> r.getIdleDuration());
+            }
+        },
+
+        ;
+
+        private EnumSet<DisplayMode> enabledFormats;
+
+
+        private Column(EnumSet<DisplayMode> enabledFormats) {
+            this.enabledFormats = enabledFormats;
+        }
+
+        public abstract List<ColumnDefinition<VehicleSummaryRecord, ?, ?>> createColumns(
+                VehicleSummaryConfig vehicleSummaryConfig);
+
+        public EnumSet<DisplayMode> getEnabledFormats() {
+            return enabledFormats;
+        }
+
+        private static List<ColumnDefinition<VehicleSummaryRecord, ?, ?>> createDurationColumn(
+                Column column, String title, VehicleSummaryConfig vehicleSummaryConfig,
+                Function<VehicleSummaryRecord, Long> extractor) {
+
+            EnumSet<DisplayMode> modes = composeDisplayModes(column, vehicleSummaryConfig);
+
+            List<ColumnDefinition<VehicleSummaryRecord, ?, ?>> cols = new ArrayList<>();
+            for (DisplayMode m : MODE_SET_ALL) {
+                ColumnDefinition.StatelessBuilder<VehicleSummaryRecord, ?> b = null;
+                if (modes.contains(m)) {
+                    switch (m) {
+                    case NUMERIC:
+                        b = new ColumnDefinition.StatelessBuilder<VehicleSummaryRecord, Long>()
+                        .withDataExtractor(extractor)
+                        .withDataConverter(NumberDataConverter.defaultLongFormatter());
+
+                        break;
+                    case HUMAN_READABLE:
+                        b = new ColumnDefinition.StatelessBuilder<VehicleSummaryRecord, Long>()
+                        .withDataExtractor(extractor)
+                        .withDataConverter(
+                                d -> vehicleSummaryConfig.formatDurationHuman(d));
+                        break;
+                    case PERCENT_SHIFT:
+                        b = new ColumnDefinition.StatelessBuilder<VehicleSummaryRecord, Double>()
+                        .withDataExtractor(
+                                r -> (double) extractor.apply(r) / r.getShiftDuration())
+                        .withDataConverter(defaultPercentFormatter());
+                        // TODO
+                        break;
+                    case PERCENT_ROUTE:
+                        b = new ColumnDefinition.StatelessBuilder<VehicleSummaryRecord, Double>()
+                        .withDataExtractor(
+                                r -> (double) extractor.apply(r) / r.getRouteDuration())
+                        .withDataConverter(defaultPercentFormatter());
+                        // TODO
+                        break;
+                    default:
+                        break;
+                    }
+                    if (b != null) {
+                        b.withCellContentFormatter(CellContentFormatter.rightAlignedCell());
+                        cols.add(b.withTitle(title + m.postfix).build());
+                    }
+                }
+            }
+            return cols;
+        }
+
+
+        private static NumberDataConverter<Double> defaultPercentFormatter() {
+            NumberFormat formatter = NumberFormat.getPercentInstance();
+            formatter.setMaximumFractionDigits(2);
+            formatter.setMinimumFractionDigits(2);
+            formatter.setGroupingUsed(false);
+            formatter.setRoundingMode(RoundingMode.HALF_UP);
+            return new NumberDataConverter<>(formatter);
+        }
+
+        private static List<ColumnDefinition<VehicleSummaryRecord, ?, ?>> createTimeWindowColumn(
+                Column column, String title, VehicleSummaryConfig vehicleSummaryConfig,
+                Function<VehicleSummaryRecord, TimeWindow> extractor) {
+
+            EnumSet<DisplayMode> modes = composeDisplayModes(column, vehicleSummaryConfig);
+
+            List<ColumnDefinition<VehicleSummaryRecord, ?, ?>> cols = new ArrayList<>();
+            for(DisplayMode m : MODE_SET_ALL) {
+                if (modes.contains(m)) {
+                    ColumnDefinition.StatelessBuilder<VehicleSummaryRecord, TimeWindow> b = new ColumnDefinition.StatelessBuilder<>();
+                    switch (m) {
+                    case NUMERIC:
+                        b.withDataConverter(
+                                tw -> vehicleSummaryConfig.formatTimeWindowNumeric(tw));
+                        break;
+                    case HUMAN_READABLE:
+                        b.withDataConverter(
+                                tw -> vehicleSummaryConfig.formatTimeWindowHuman(tw));
+                        break;
+
+                    default:
+                        break;
+                    }
+                    if (b != null) {
+                        b.withCellContentFormatter(CellContentFormatter.rightAlignedCell());
+                        b.withDataExtractor(extractor);
+                        cols.add(b.withTitle(title + m.postfix).build());
+                    }
+                }
+            }
+            return cols;
+        }
+
+
+        private static EnumSet<DisplayMode> composeDisplayModes(Column column,
+                VehicleSummaryConfig vehicleSummaryConfig) {
+            EnumSet<DisplayMode> modes = EnumSet.copyOf(column.getEnabledFormats());
+            modes.retainAll(vehicleSummaryConfig.getDisplayModes());
+            return modes;
+        }
+
+
+    }
+
+    public static class Builder {
+        private LocalDateTime humanReadableOrigin = LocalDateTime.of(LocalDate.now(),
+                LocalTime.MIDNIGHT);
+        private EnumSet<DisplayMode> displayModes = MODE_SET_ALL;
+        private List<Column> columns;
+        private ChronoUnit lowUnit = ChronoUnit.SECONDS;
+        private ChronoUnit highUnit = ChronoUnit.HOURS;
+
+        public Builder() {
+            this.columns = new ArrayList<>();
+
+        }
+
+        public Builder withHumanReadableOrigin(LocalDateTime humanReadableOrigin) {
+            this.humanReadableOrigin = humanReadableOrigin;
+            return this;
+        }
+
+        public Builder withTimeDisplayModes(EnumSet<DisplayMode> displayModes) {
+            this.displayModes = displayModes;
+            return this;
+        }
+
+        public Builder withLowUnit(ChronoUnit lowUnit) {
+            this.lowUnit = lowUnit;
+            return this;
+        }
+
+        public Builder withHighUnit(ChronoUnit highUnit) {
+            this.highUnit = highUnit;
+            return this;
+        }
+
+        public Builder withColumn(Column columns) {
+            this.columns.add(columns);
+            return this;
+        }
+
+        public Builder withColumns(Column... columns) {
+            for (Column c : columns) {
+                withColumn(c);
+            }
+            return this;
+        }
+
+
+        public VehicleSummaryConfig build() {
+            return new VehicleSummaryConfig(this);
+        }
+    }
+
+    private EnumSet<DisplayMode> displayModes;
+    private List<Column> columns;
+
+    private VehicleSummaryConfig(Builder builder) {
+        this.displayModes = builder.displayModes;
+        this.columns = builder.columns;
+        setTimeFormatter(
+                new HumanReadableTimeFormatter(builder.humanReadableOrigin, builder.lowUnit));
+        setDurationFormatter(new HumanReadableDurationFormatter(builder.lowUnit, builder.highUnit));
+    }
+
+
+    public EnumSet<DisplayMode> getDisplayModes() {
+        return displayModes;
+    }
+
+    public List<ColumnDefinition<VehicleSummaryRecord, ?, ?>> getColumns() {
+        List<ColumnDefinition<VehicleSummaryRecord, ?, ?>> columns = new ArrayList<>();
+        this.columns.forEach(c -> columns.addAll(c.createColumns(this)));
+        return columns;
+    }
+
+
+}
\ No newline at end of file
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/VehicleSummaryRecord.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/VehicleSummaryRecord.java
new file mode 100644
index 000000000..163c6f5fd
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/VehicleSummaryRecord.java
@@ -0,0 +1,134 @@
+package com.graphhopper.jsprit.core.reporting;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
+import com.graphhopper.jsprit.core.problem.driver.Driver;
+import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.BreakActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
+import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
+
+public class VehicleSummaryRecord {
+    private Vehicle vehicle;
+    private Driver driver;
+    private int routeNr;
+    private long start;
+    private long end;
+    private int activityCount = 0;
+    private Map<String, Integer> activityCountByType = new HashMap<>();
+    private long travelDuration;
+    private long operationDuration;
+    private long breakDuration;
+    private long travelDistance;
+
+    public VehicleSummaryRecord(VehicleRoute route, VehicleRoutingProblem problem) {
+        routeNr = route.getId();
+        vehicle = route.getVehicle();
+        driver = route.getDriver();
+        start = (long) route.getStart().getEndTime();
+        end = (long) route.getEnd().getArrTime();
+
+        TourActivity prevAct = route.getStart();
+        for (TourActivity act : route.getActivities()) {
+            if (act instanceof BreakActivity) {
+                breakDuration += act.getOperationTime();
+            } else
+                if (act instanceof JobActivity) {
+                    JobActivity jobAct = (JobActivity) act;
+                    activityCount++;
+                    String type = jobAct.getType();
+                    if (!activityCountByType.containsKey(type)) {
+                        activityCountByType.put(type, 0);
+                    }
+                    activityCountByType.put(type, activityCountByType.get(type) + 1);
+                    operationDuration += jobAct.getOperationTime();
+                    travelDuration += problem.getTransportCosts().getTransportTime(prevAct.getLocation(),
+                            act.getLocation(),act.getArrTime(), route.getDriver(),
+                            route.getVehicle());
+                }
+            prevAct = act;
+        }
+    }
+
+    public String getVehicleId() {
+        return vehicle.getId();
+    }
+
+    public String getDriverId() {
+        return driver.getId();
+    }
+
+    public int getRouteNr() {
+        return routeNr;
+    }
+
+    public long getStart() {
+        return start;
+    }
+
+    public long getEnd() {
+        return end;
+    }
+
+    public int getActivityCount() {
+        return activityCount;
+    }
+
+    public Map<String, Integer> getActivityCountByType() {
+        return activityCountByType;
+    }
+
+    public long getTravelDuration() {
+        return travelDuration;
+    }
+
+    public long getOperationDuration() {
+        return operationDuration;
+    }
+
+    public long getShiftDuration() {
+        return vehicle.getLatestArrival() == Double.MAX_VALUE ? getRouteDuration()
+                : (long) (vehicle.getLatestArrival() - vehicle.getEarliestDeparture());
+    }
+
+    public long getRouteDuration() {
+        return end - start;
+    }
+
+    public long getTravelDistance() {
+        return travelDistance;
+    }
+
+    public long getBreakDuration() {
+        return breakDuration;
+    }
+
+    public Vehicle getVehicle() {
+        return vehicle;
+    }
+
+    public Driver getDriver() {
+        return driver;
+    }
+
+    @Override
+    public String toString() {
+        return "VehicleStatisticsContext [vehicleId=" + vehicle.getId() + ", driver=" + driver.getId() + ", routeNr=" + routeNr
+                + ", start=" + start + ", end=" + end + ", activityCount=" + activityCount + ", activityCountByType="
+                + activityCountByType + ", travelDuration=" + travelDuration + ", operationDuration=" + operationDuration
+                + ", totalDuration=" + getRouteDuration() + ", travelDistance=" + travelDistance + ", breakDuration="
+                + breakDuration + "]";
+    }
+
+    public Long getActiveDuration() {
+        return getTravelDuration() + getOperationDuration();
+    }
+
+    public Long getIdleDuration() {
+        return getRouteDuration() - (getActiveDuration() + getBreakDuration());
+    }
+
+}
\ No newline at end of file
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleSummaryColumnLists.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleSummaryColumnLists.java
index 3c338ee5d..60ddadb9b 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleSummaryColumnLists.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleSummaryColumnLists.java
@@ -67,16 +67,16 @@
         COLUMNS.put(PredefinedList.DEFAULT, defaultSet);
 
         List<Class<? extends AbstractPrinterColumn<VehicleSummaryContext, ?, ?>>> verboseSet = new ArrayList<>();
-        verboseSet.add(VehicleRouteNumberPrinterColumn.class);
-        verboseSet.add(VehicleTruckNamePrinterColumn.class);
-        verboseSet.add(VehicleTypePrinterColumn.class);
-        verboseSet.add(VehicleDriverNamePrinterColumn.class);
-        verboseSet.add(VehicleActivityCountPrinterColumn.class);
-        verboseSet.add(VehicleAllActivityTypeCountPrinterColumn.class);
-        verboseSet.add(VehicleShiftTimeWindowPrinterColumn.class);
-        verboseSet.add(VehicleShiftDurationPrinterColumn.class);
-        verboseSet.add(VehicleRouteTimeWindowPrinterColumn.class);
-        verboseSet.add(VehicleRouteDurationPrinterColumn.class);
+        verboseSet.add(VehicleRouteNumberPrinterColumn.class);//
+        verboseSet.add(VehicleTruckNamePrinterColumn.class); //
+        verboseSet.add(VehicleTypePrinterColumn.class);//
+        verboseSet.add(VehicleDriverNamePrinterColumn.class); //
+        verboseSet.add(VehicleActivityCountPrinterColumn.class);//
+        verboseSet.add(VehicleAllActivityTypeCountPrinterColumn.class);//
+        verboseSet.add(VehicleShiftTimeWindowPrinterColumn.class);//
+        verboseSet.add(VehicleShiftDurationPrinterColumn.class);//
+        verboseSet.add(VehicleRouteTimeWindowPrinterColumn.class); //
+        verboseSet.add(VehicleRouteDurationPrinterColumn.class); //
         verboseSet.add(VehicleTravelDurationPrinterColumn.class);
         verboseSet.add(VehicleOperationDurationPrinterColumn.class);
         verboseSet.add(VehicleActiveDurationPrinterColumn.class);
@@ -113,8 +113,8 @@
      * @return The generated column list.
      */
     public static PrinterColumnList<VehicleSummaryContext> getList(PredefinedList listType, List<Mode> durationModes,
-                    boolean humanReadableTimeWindows, HumanReadableTimeFormatter timeWindowTimeFormatter,
-                    HumanReadableDurationFormatter durationFormatter) {
+            boolean humanReadableTimeWindows, HumanReadableTimeFormatter timeWindowTimeFormatter,
+            HumanReadableDurationFormatter durationFormatter) {
         PrinterColumnList<VehicleSummaryContext> res = new PrinterColumnList<>();
 
         for (Class<? extends AbstractPrinterColumn<VehicleSummaryContext, ?, ?>> c : COLUMNS.get(listType)) {
