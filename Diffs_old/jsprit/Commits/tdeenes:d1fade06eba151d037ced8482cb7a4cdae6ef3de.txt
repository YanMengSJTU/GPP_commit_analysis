diff --git a/jsprit-custom/pom.xml b/jsprit-custom/pom.xml
index 9486bc1ed..c4e904c0b 100644
--- a/jsprit-custom/pom.xml
+++ b/jsprit-custom/pom.xml
@@ -60,7 +60,7 @@
                   <archive>
                     <manifest>
                         <addClasspath>true</addClasspath>
-                        <mainClass>comp.graphhopper.custom.TobaccoOptimization</mainClass>
+                        <mainClass>com.graphhopper.custom.TobaccoOptimizationMinMaxTime</mainClass>
                     </manifest>
                   </archive>
                 </configuration>
diff --git a/jsprit-custom/src/main/java/com/graphhopper/jsprit/custom/TobaccoOptimizationMinMaxTime.java b/jsprit-custom/src/main/java/com/graphhopper/jsprit/custom/TobaccoOptimizationMinMaxTime.java
index 44b1e1f43..15499772f 100644
--- a/jsprit-custom/src/main/java/com/graphhopper/jsprit/custom/TobaccoOptimizationMinMaxTime.java
+++ b/jsprit-custom/src/main/java/com/graphhopper/jsprit/custom/TobaccoOptimizationMinMaxTime.java
@@ -8,6 +8,7 @@
 import com.graphhopper.jsprit.core.algorithm.state.InternalStates;
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.algorithm.state.StateUpdater;
+import com.graphhopper.jsprit.core.algorithm.termination.IterationWithoutImprovementTermination;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
@@ -107,11 +108,24 @@ public static void main(String[] args) throws IOException {
         * (iter = the number of iterations)
         */
         int max_iter;
+        final double scale_maxtime_cost;
+        final double scale_unassigned_cost;
         if (args.length > 0) {
             max_iter = Integer.parseInt(args[0]);
         } else {
             max_iter = 100;
         }
+        if (args.length > 1) {
+            scale_maxtime_cost = Integer.parseInt(args[1]);
+        } else {
+            scale_maxtime_cost = 1.;
+        }
+        if (args.length > 2) {
+            scale_unassigned_cost = Integer.parseInt(args[2]);
+        } else {
+            scale_unassigned_cost = 0.2;
+        }
+
 
         /*
         * Problem builder
@@ -148,8 +162,6 @@ public static void main(String[] args) throws IOException {
         SolutionCostCalculator objectiveFunction = new SolutionCostCalculator() {
 
             //private double scalingParameter_v = 10; // it seems there is no need to include this
-            private double scalingParameter_t = 1.;
-            private double scalingParameter_u = 0.2;
 
             @Override
             public double getCosts(VehicleRoutingProblemSolution solution) {
@@ -170,11 +182,11 @@ public double getCosts(VehicleRoutingProblemSolution solution) {
                 }
                 double base_cost = c;
                 //c += base_cost * scalingParameter_v * (nr_of_orig_vehicles - nr_of_routes)/nr_of_orig_vehicles;
-                c += base_cost * scalingParameter_t * (max_work_hours/sum_work_hours*nr_of_orig_vehicles - 1);
+                c += base_cost * scale_maxtime_cost * (max_work_hours/sum_work_hours*nr_of_orig_vehicles - 1);
 
                 // The cost of unassigned jobs (i.e., shops not visited)
                 for(Job j : solution.getUnassignedJobs()){
-                    c += base_cost * scalingParameter_u * (11 - j.getPriority());
+                    c += base_cost * scale_unassigned_cost * (11 - j.getPriority());
                 }
 
                 return c;
@@ -236,6 +248,7 @@ public double getCosts(JobInsertionContext iFacts, TourActivity prevAct, TourAct
             .setStateAndConstraintManager(stateManager, constraintManager)
             .setObjectiveFunction(objectiveFunction);
         VehicleRoutingAlgorithm vra = builder.buildAlgorithm();
+        vra.setPrematureAlgorithmTermination(new IterationWithoutImprovementTermination(100));
 
         // initial solution
 
