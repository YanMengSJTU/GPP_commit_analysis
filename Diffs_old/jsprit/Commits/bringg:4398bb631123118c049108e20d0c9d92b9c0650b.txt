diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/Vehicle.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/Vehicle.java
index 6d430655c..df2fdf23c 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/Vehicle.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/Vehicle.java
@@ -83,4 +83,7 @@
     // default Object getUserData() {
     // return null;
     // };
+    public abstract boolean isTaskPermited(String taskId);
+
+    public abstract void addProhibitedTask(String taskId);
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleImpl.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleImpl.java
index 0731abf21..41107525f 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleImpl.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleImpl.java
@@ -24,7 +24,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import java.util.Collection;
+import java.util.*;
 
 
 /**
@@ -97,6 +97,16 @@ public Break getBreak() {
             return null;
         }
 
+        @Override
+        public boolean isTaskPermited(String taskId) {
+            return true;
+        }
+
+        @Override
+        public void addProhibitedTask(String taskId) {
+            throw new IllegalArgumentException("NoVehicle should not have prohibited tasks");
+        }
+
     }
 
     /**
@@ -134,6 +144,8 @@ public Break getBreak() {
 
         private Object userData;
 
+        private Set<String> prohibitedTasks = new HashSet<>();
+
         private Builder(String id) {
             super();
             this.id = id;
@@ -248,6 +260,12 @@ public Builder addSkill(String skill) {
             return this;
         }
 
+        public Builder addExcludedTask(String taskId){
+            if (taskId != null)
+                prohibitedTasks.add(taskId);
+            return this;
+        }
+
         /**
          * Builds and returns the vehicle.
          * <p>
@@ -331,6 +349,8 @@ public static NoVehicle createNoVehicle() {
 
     private final Break aBreak;
 
+    private final Set<String> prohibitedTasks;
+
     private VehicleImpl(Builder builder) {
         setUserData(builder.userData);
         id = builder.id;
@@ -342,6 +362,7 @@ private VehicleImpl(Builder builder) {
         endLocation = builder.endLocation;
         startLocation = builder.startLocation;
         aBreak = builder.aBreak;
+        prohibitedTasks = builder.prohibitedTasks;
         //        setVehicleIdentifier(new VehicleTypeKey(type.getTypeId(),startLocation.getId(),endLocation.getId(),earliestDeparture,latestArrival,skills));
         setVehicleIdentifier(new VehicleTypeKey(type.getTypeId(), startLocation.getId(), endLocation.getId(), earliestDeparture, latestArrival, skills, returnToDepot));
     }
@@ -407,6 +428,16 @@ public Break getBreak() {
         return aBreak;
     }
 
+    @Override
+    public boolean isTaskPermited(String taskId) {
+        return !prohibitedTasks.contains(taskId);
+    }
+
+    @Override
+    public void addProhibitedTask(String taskId) {
+        prohibitedTasks.add(taskId);
+    }
+
     /* (non-Javadoc)
      * @see java.lang.Object#hashCode()
      */
