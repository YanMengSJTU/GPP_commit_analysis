diff --git a/jsprit-core/src/main/java/jsprit/core/algorithm/box/Jsprit.java b/jsprit-core/src/main/java/jsprit/core/algorithm/box/Jsprit.java
index c410e43bb..7fb02796c 100644
--- a/jsprit-core/src/main/java/jsprit/core/algorithm/box/Jsprit.java
+++ b/jsprit-core/src/main/java/jsprit/core/algorithm/box/Jsprit.java
@@ -122,6 +122,8 @@ public static VehicleRoutingAlgorithm createAlgorithm(VehicleRoutingProblem vehi
 
         private ExecutorService es;
 
+        private JobNeighborhoods jobNeighborhoods = null;
+
         private Integer noThreads;
 
         private StateManager stateManager = null;
@@ -196,6 +198,11 @@ public Builder setExecutorService(ExecutorService es, int noThreads) {
             return this;
         }
 
+        public Builder setJobNeighborhoods(JobNeighborhoods jobNeighborhoods) {
+            this.jobNeighborhoods = jobNeighborhoods;
+            return this;
+        }
+
         public Builder setRandom(Random random) {
             this.random = random;
             return this;
@@ -285,6 +292,8 @@ public int createNumberToBeRemoved() {
 
     private ExecutorService es = null;
 
+    private JobNeighborhoods jobNeighborhoods = null;
+
     private Integer noThreads;
 
     private boolean setupExecutorInternally = false;
@@ -301,6 +310,7 @@ private Jsprit(Builder builder) {
         this.stateManager = builder.stateManager;
         this.constraintManager = builder.constraintManager;
         this.es = builder.es;
+        this.jobNeighborhoods = builder.jobNeighborhoods;
         this.noThreads = builder.noThreads;
         this.addCoreConstraints = builder.addConstraints;
         this.properties = builder.properties;
@@ -339,7 +349,9 @@ private VehicleRoutingAlgorithm create(final VehicleRoutingProblem vrp) {
         double noiseLevel = toDouble(getProperty(Parameter.INSERTION_NOISE_LEVEL.toString()));
         double noiseProbability = toDouble(getProperty(Parameter.INSERTION_NOISE_PROB.toString()));
 
-        JobNeighborhoods jobNeighborhoods = new JobNeighborhoodsFactory().createNeighborhoods(vrp, new AvgServiceAndShipmentDistance(vrp.getTransportCosts()), (int) (vrp.getJobs().values().size() * 0.5));
+        if (jobNeighborhoods == null) {
+            jobNeighborhoods = new JobNeighborhoodsFactory().createNeighborhoods(vrp, new AvgServiceAndShipmentDistance(vrp.getTransportCosts()), (int) (vrp.getJobs().values().size() * 0.5));
+        }
         jobNeighborhoods.initialise();
 
         final double maxCosts;
