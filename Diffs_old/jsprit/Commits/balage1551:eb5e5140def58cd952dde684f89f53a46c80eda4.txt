diff --git a/jsprit-core/pom.xml b/jsprit-core/pom.xml
index dea213209..b1b1c828a 100644
--- a/jsprit-core/pom.xml
+++ b/jsprit-core/pom.xml
@@ -42,7 +42,11 @@
             <version>${logger.version}</version>
         </dependency>
 
+        <dependency>
+            <groupId>org.apache.commons</groupId>
+            <artifactId>commons-csv</artifactId>
+            <version>1.4</version>
+        </dependency>
     </dependencies>
 
-
 </project>
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/AbstractPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/AbstractPrinterColumn.java
index d43087d56..4782129a5 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/AbstractPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/AbstractPrinterColumn.java
@@ -2,31 +2,113 @@
 
 import java.util.function.Consumer;
 
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition.Builder;
 
-public abstract class AbstractPrinterColumn<C extends PrinterContext, T> {
+/**
+ * Abstract base class for column definitions.
+ *
+ * @author balage
+ *
+ * @param <C>
+ *            The context the column works on
+ * @param <T>
+ *            The type of the data it emits
+ * @param <A>
+ *            The class itself (internal generic parameter: for inheritence and
+ *            builder pattern)
+ */
+public abstract class AbstractPrinterColumn<C extends PrinterContext, T, A extends AbstractPrinterColumn<C, T, A>> {
 
-    private Consumer<DynamicTableDefinition.ColumnDefinition.Builder> decorator;
+    // Decorator is a post creation callback to alter the behaviour of the
+    // column definition.
+    private Consumer<ColumnDefinition.Builder> decorator;
 
+    private String title;
+
+    /**
+     * Constructor.
+     */
     public AbstractPrinterColumn() {
-        super();
+        this(null);
     }
 
-    public AbstractPrinterColumn(Consumer<Builder> decorator) {
+    /**
+     * @param decorator
+     *            Decorator is a post creation callback to alter the behaviour
+     *            of the column definition.
+     */
+    public AbstractPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super();
         this.decorator = decorator;
+        this.title = getDefaultTitle();
     }
 
-    public DynamicTableDefinition.ColumnDefinition getColumnDefinition() {
-        Builder builder = getColumnBuilder();
+    /**
+     * Creates the column definition of the column.
+     *
+     * @return the decorated column definition.
+     */
+    public ColumnDefinition getColumnDefinition() {
+        Builder builder = getColumnBuilder().withTitle(getTitle());
         if (decorator != null) {
             decorator.accept(builder);
         }
         return builder.build();
     }
 
-    protected abstract DynamicTableDefinition.ColumnDefinition.Builder getColumnBuilder();
+    /**
+     * @return A title of the column.
+     */
+    public String getTitle() {
+        return title;
+    }
+
+    /**
+     * @param title
+     *            the title of the column
+     * @return The object itself (fluent api)
+     */
+    @SuppressWarnings("unchecked")
+    public A withTitle(String title) {
+        this.title = title;
+        return (A) this;
+    }
+
+    /**
+     * Decorator is a post creation callback to alter the behaviour of the
+     * column definition.
+     *
+     * @param decorator
+     *            The decorator.
+     * @return The object itself (fluent api)
+     */
+    @SuppressWarnings("unchecked")
+    public A withDecorator(Consumer<ColumnDefinition.Builder> decorator) {
+        this.decorator = decorator;
+        return (A) this;
+    }
 
+    /**
+     * Returns the builder implementation of the corresponding column
+     * definition.
+     *
+     * @return The column definition builder.
+     */
+    protected abstract ColumnDefinition.Builder getColumnBuilder();
+
+    /**
+     * Extracts the data from the context.
+     *
+     * @param context
+     *            The context to process.
+     * @return The extracted data.
+     */
     public abstract T getData(C context);
 
+    /**
+     * @return the default title
+     */
+    protected abstract String getDefaultTitle();
+
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/ConfigurableTablePrinter.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/ConfigurableTablePrinter.java
index c8901d76c..949b6cb8f 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/ConfigurableTablePrinter.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/ConfigurableTablePrinter.java
@@ -1,30 +1,67 @@
 package com.graphhopper.jsprit.core.reporting;
 
+import java.io.IOException;
+import java.io.StringWriter;
 import java.nio.CharBuffer;
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Collections;
 import java.util.List;
+import java.util.stream.Collectors;
 import java.util.stream.IntStream;
 
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.Alignment;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition;
+import org.apache.commons.csv.CSVFormat;
+import org.apache.commons.csv.CSVPrinter;
+import org.apache.commons.csv.QuoteMode;
+
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnAlignment;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
 
 
 /**
+ * A text-base table formatter with extendible and configurable column set.
+ *
  * @author balage
  * @param <C>
+ *            The context the table formatter operates. When a new row of data
+ *            is being added, this context is passed to all column definitions
+ *            to create cell information.
  */
 public class ConfigurableTablePrinter<C extends PrinterContext> {
 
+    /**
+     * A row of the table.
+     *
+     * @author balage
+     *
+     */
     public class TableRow {
         private String row[] = new String[tableDef.size()];
+
+        // Used by add() function to determine the next column index.
         private int lastIndex = 0;
 
+        /**
+         * Constructor.
+         */
         public TableRow() {
             super();
             Arrays.fill(row, "");
         }
 
+        /**
+         * Sets the value of a cell in the row.
+         *
+         * @param index
+         *            The index of the cell.
+         * @param data
+         *            The data to be formatted.
+         * @return The table row itself.
+         * @throws IndexOutOfBoundsException
+         *             When the index is not valid.
+         * @throws ClassCastException
+         *             When the column doesn't accept the data provided.
+         */
         public TableRow set(int index, Object data) {
             if (index < 0 || index >= row.length) {
                 throw new IndexOutOfBoundsException("Invalid index: " + index);
@@ -43,78 +80,215 @@ public TableRow set(int index, Object data) {
             return this;
         }
 
+        /**
+         * Adds data for the next cell.
+         * <p>
+         * Note that calling the {@linkplain #set(int, Object)} doesn't alter
+         * the insertation point for this function.
+         * <p>
+         *
+         * @param data
+         *            The data to add.
+         * @return The table row itself (fluent api).
+         * @throws IndexOutOfBoundsException
+         *             When the index is not valid.
+         * @throws ClassCastException
+         *             When the column doesn't accept the data provided.
+         */
         public TableRow add(Object data) {
             return set(lastIndex++, data);
         }
 
+        /**
+         * Adds data for the next cell.
+         * <p>
+         * Note that calling the {@linkplain #set(int, Object)} doesn't alter
+         * the insertation point for this function.
+         * <p>
+         *
+         * @param data
+         *            The data to add.
+         * @return The table row itself (fluent api).
+         * @throws IndexOutOfBoundsException
+         *             When the index is not valid.
+         * @throws ClassCastException
+         *             When the column doesn't accept the data provided.
+         */
         public TableRow add(int data) {
             return add(new Integer(data));
         }
 
+        /**
+         * Adds data for the next cell.
+         * <p>
+         * Note that calling the {@linkplain #set(int, Object)} doesn't alter
+         * the insertation point for this function.
+         * <p>
+         *
+         * @param data
+         *            The data to add.
+         * @return The table row itself (fluent api).
+         * @throws IndexOutOfBoundsException
+         *             When the index is not valid.
+         * @throws ClassCastException
+         *             When the column doesn't accept the data provided.
+         */
         public TableRow add(long data) {
             return add(new Long(data));
         }
 
+        /**
+         * Adds data for the next cell.
+         * <p>
+         * Note that calling the {@linkplain #set(int, Object)} doesn't alter
+         * the insertation point for this function.
+         * <p>
+         *
+         * @param data
+         *            The data to add.
+         * @return The table row itself (fluent api).
+         * @throws IndexOutOfBoundsException
+         *             When the index is not valid.
+         * @throws ClassCastException
+         *             When the column doesn't accept the data provided.
+         */
         public TableRow add(double data) {
             return add(new Double(data));
         }
 
+        /**
+         * Adds data for the next cell.
+         * <p>
+         * Note that calling the {@linkplain #set(int, Object)} doesn't alter
+         * the insertation point for this function.
+         * <p>
+         *
+         * @param data
+         *            The data to add.
+         * @return The table row itself (fluent api).
+         * @throws IndexOutOfBoundsException
+         *             When the index is not valid.
+         * @throws ClassCastException
+         *             When the column doesn't accept the data provided.
+         */
         public TableRow add(boolean data) {
             return add(Boolean.valueOf(data));
         }
 
+        /**
+         * Returns the value of a cell.
+         *
+         * @param index
+         *            The index of the cell.
+         * @return The string representation of the cell.
+         * @throws IndexOutOfBoundsException
+         *             When the index is not valid.
+         */
         public String get(int index) {
             if (index < 0 || index >= row.length) {
                 throw new IndexOutOfBoundsException("Invalid index: " + index);
             }
             return row[index];
         }
+
+        /**
+         * @return Returns the unmodifiable data of the complete row.
+         */
+        public List<String> getAll() {
+            return Collections.unmodifiableList(Arrays.asList(row));
+        }
     }
 
+    /**
+     * Marker row for in-table separator line.
+     *
+     * @author balage
+     */
     private class Separator extends TableRow {
     }
 
+    // The column list
     private PrinterColumnList<C> columnList;
+    // The table definition
     private DynamicTableDefinition tableDef;
 
+    // The rows of the table
     List<TableRow> rows = new ArrayList<>();
 
+    /**
+     * Constructor.
+     *
+     * @param columnList
+     *            The list of the columns in the table.
+     */
     public ConfigurableTablePrinter(PrinterColumnList<C> columnList) {
         super();
         this.columnList = columnList;
         tableDef = columnList.getTableDefinition();
     }
 
+    /**
+     * Adds and populates a row.
+     *
+     * @param context
+     *            The context to use for row cell population.
+     */
     public void addRow(C context) {
         TableRow row = new TableRow();
         columnList.populateRow(row, context);
         rows.add(row);
     }
 
+    /**
+     * Adds an in-table separator line.
+     */
     public void addSeparator() {
         rows.add(new Separator());
     }
 
 
+    /**
+     * Repeats <code>c</code> <code>w</code> times.
+     *
+     * @param c
+     *            The character to repeat.
+     * @param w
+     *            The number of occurencies to repeat.
+     * @return A <code>w</code> long string containing <code>c</code>
+     *         characters.
+     */
     private String repeat(char c, int w) {
         return CharBuffer.allocate(w).toString().replace('\0', c);
     }
 
+    /**
+     * Prints the table into a string.
+     *
+     * @return The string representation of the table.
+     */
     public String print() {
         StringBuilder sb = new StringBuilder();
+        // Calculating width of each column
         int[] colWidth = calculateWidthInfo();
+
+        // The total width of the table: the sum of column width, plus the
+        // padding two times for each column, plus the vertical lines (column
+        // count plus one times)
         int totalWidth = colWidth.length * (tableDef.getPadding() * 2 + 1) + 1;
         for (int w : colWidth) {
             totalWidth += w;
         }
 
+        // Caching draw characters and padding size (for cleaner code)
         char corner = tableDef.getCorner();
         char horizontal = tableDef.getHorizontal();
         char vertical = tableDef.getVertical();
         int padding = tableDef.getPadding();
 
+        // Padding string
         String paddingChars = repeat(' ', padding);
 
+        // Build the line for the separator rows
         StringBuilder sbSep = new StringBuilder();
         sbSep.append(corner);
         for (int w : colWidth) {
@@ -123,22 +297,27 @@ public String print() {
         sbSep.append("\n");
         String separatorLine = sbSep.toString();
 
+        // Printing heading if defined
         if (tableDef.getHeading() != null) {
             sb.append(corner).append(repeat(horizontal, totalWidth - 2)).append(corner)
             .append("\n");
             sb.append(vertical).append(paddingChars)
-            .append(Alignment.LEFT.align(tableDef.getHeading(),
+            .append(ColumnAlignment.LEFT.align(tableDef.getHeading(),
                             totalWidth - 2 * padding - 2))
             .append(paddingChars)
             .append(vertical)
             .append("\n");
         }
 
+        // Adding a separator line (either as the top line of the table or to
+        // separate heading)
         sb.append(separatorLine);
+
+        // Printing header line
         sb.append(vertical);
         for (int i = 0; i < tableDef.size(); i++) {
             ColumnDefinition cd = tableDef.getColumns().get(i);
-            sb.append(paddingChars).append(Alignment.LEFT.align(cd.getTitle(), colWidth[i]))
+            sb.append(paddingChars).append(ColumnAlignment.LEFT.align(cd.getTitle(), colWidth[i]))
             .append(paddingChars).append(vertical);
         }
         sb.append("\n");
@@ -146,8 +325,10 @@ public String print() {
 
         for(TableRow row : rows) {
             if (row instanceof ConfigurableTablePrinter.Separator) {
+                // Adding separator line
                 sb.append(separatorLine);
             } else {
+                // Printing a line
                 sb.append(vertical);
                 for (int i = 0; i < tableDef.size(); i++) {
                     ColumnDefinition cd = tableDef.getColumns().get(i);
@@ -157,14 +338,22 @@ public String print() {
                 sb.append("\n");
             }
         }
+        // Closing the table
         sb.append(separatorLine);
 
         return sb.toString();
     }
 
+    /**
+     * Calculates width of each column.
+     *
+     * @return The width info for the table.
+     */
     private int[] calculateWidthInfo() {
         int colWidth[] = new int[tableDef.size()];
+        // For each column
         IntStream.range(0, tableDef.size()).forEach(i -> {
+            // Calculate maximum data width
             int max = rows.stream()
                             .filter(r -> r instanceof ConfigurableTablePrinter.TableRow)
                             .map(r -> r.get(i))
@@ -172,11 +361,126 @@ public String print() {
                             .mapToInt(d -> d.length())
                             .max().orElse(0);
             ColumnDefinition colDef = tableDef.getColumns().get(i);
+            // The width will be the max data or title with, bounded by the min
+            // and/or max column width constraints.
             colWidth[i] = Math.max(colDef.getTitle().length(),
                             Math.max(colDef.getMinWidth(), Math.min(colDef.getMaxWidth(), max)));
         });
         return colWidth;
     }
 
+    /**
+     * CSV export configuration.
+     *
+     * @author balage
+     *
+     */
+    public static class CsvConfig {
+        private char delimiter = ';';
+        private char quote = '\"';
+        private char escape = '\\';
+        private boolean printHeader = true;
+
+        /**
+         * @return the delimeter character (cell separator)
+         */
+        public char getDelimiter() {
+            return delimiter;
+        }
+
+        /**
+         * @param delimiter
+         *            the delimeter character (cell separator)
+         * @return The config itself (fluent api)
+         */
+        public CsvConfig withDelimiter(char delimiter) {
+            this.delimiter = delimiter;
+            return this;
+        }
+
+        /**
+         * @return the quote character
+         */
+        public char getQuote() {
+            return quote;
+        }
+
+        /**
+         * @param quote
+         *            the quote character
+         * @return The config itself (fluent api)
+         */
+        public CsvConfig withQuote(char quote) {
+            this.quote = quote;
+            return this;
+        }
+
+        /**
+         * @return the escape character
+         */
+        public char getEscape() {
+            return escape;
+        }
+
+        /**
+         * @param escape
+         *            the escape character
+         * @return The config itself (fluent api)
+         */
+        public CsvConfig withEscape(char escape) {
+            this.escape = escape;
+            return this;
+        }
+
+        /**
+         * @return whether to print header line
+         */
+        public boolean isPrintHeader() {
+            return printHeader;
+        }
+
+        /**
+         * @param printHeader
+         *            whether to print header line
+         * @return The config itself (fluent api)
+         */
+        public CsvConfig withPrintHeader(boolean printHeader) {
+            this.printHeader = printHeader;
+            return this;
+        }
+
+    }
+
+    /**
+     * Exports the data of the table into a CSV formatted string
+     *
+     * @param config
+     *            The configuration of the CSV formatting.
+     * @return The data in CSV format
+     */
+    public String exportToCsv(CsvConfig config) {
+        CSVFormat format = CSVFormat.DEFAULT
+                        .withDelimiter(config.delimiter)
+                        .withQuote(config.quote)
+                        .withQuoteMode(QuoteMode.NON_NUMERIC)
+                        .withEscape(config.escape);
+
+        StringWriter sw = new StringWriter();
+        try (CSVPrinter printer = new CSVPrinter(sw, format)) {
+            if (config.isPrintHeader()) {
+                printer.printRecord(columnList.getColumns().stream()
+                                .map(c -> c.getColumnDefinition().getTitle())
+                                .collect(Collectors.toList()));
+            }
+            for(TableRow r : rows) {
+                if (!(r instanceof ConfigurableTablePrinter.Separator)) {
+                    printer.printRecord(r.getAll());
+                }
+            }
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+        return sw.toString();
+    }
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/DynamicTableDefinition.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/DynamicTableDefinition.java
index 9bd5b2716..401fe2af3 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/DynamicTableDefinition.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/DynamicTableDefinition.java
@@ -4,294 +4,22 @@
 import java.util.Collections;
 import java.util.List;
 
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
+
 /**
+ * Table definition form dynamic table printers (both implementations)
+ *
  * @author balage
+ * @see {@linkplain DynamicTablePrinter}
+ * @see {@linkplain ConfigurableTablePrinter}
  */
 public class DynamicTableDefinition {
 
-    public static interface ColumnType<T> {
-        public String convert(Object data);
-
-        public boolean accepts(Object data);
-    }
-
-    public static abstract class AbstractColumnType<T> implements ColumnType<T> {
-
-        private String nullValue = "";
-
-
-        public AbstractColumnType() {
-            super();
-        }
-
-        public AbstractColumnType(String nullValue) {
-            super();
-            this.nullValue = nullValue;
-        }
-
-        @SuppressWarnings("unchecked")
-        @Override
-        public String convert(Object data) {
-            if (data == null) {
-                return nullValue;
-            } else {
-                if (accepts(data)) {
-                    return convertNotNull((T) data);
-                } else {
-                    throw new ClassCastException();
-                }
-            }
-        }
-
-        protected abstract String convertNotNull(T data);
-    }
-
-    public static class StringColumnType extends AbstractColumnType<Object> {
-
-        public StringColumnType() {
-            super();
-        }
-
-        public StringColumnType(String nullValue) {
-            super(nullValue);
-        }
-
-        @Override
-        protected String convertNotNull(Object data) {
-            return data.toString();
-        }
-
-        @Override
-        public boolean accepts(Object data) {
-            return true;
-        }
-
-    }
-
-    public static class IntColumnType extends AbstractColumnType<Integer> {
-
-        public IntColumnType() {
-            super();
-        }
-
-        public IntColumnType(String nullValue) {
-            super(nullValue);
-        }
-
-        @Override
-        protected String convertNotNull(Integer data) {
-            return data.toString();
-        }
-
-        @Override
-        public boolean accepts(Object data) {
-            return data instanceof Integer;
-        }
-
-    }
-
-    public static class LongColumnType extends AbstractColumnType<Long> {
-
-        public LongColumnType() {
-            super();
-        }
-
-        public LongColumnType(String nullValue) {
-            super(nullValue);
-        }
-
-        @Override
-        protected String convertNotNull(Long data) {
-            return data.toString();
-        }
-
-        @Override
-        public boolean accepts(Object data) {
-            return data instanceof Long;
-        }
-
-
-    }
-
-    public static class DoubleColumnType extends AbstractColumnType<Double> {
-
-        private int decimals = 2;
-
-        public DoubleColumnType() {
-            super();
-        }
-
-        public DoubleColumnType(String nullValue) {
-            super(nullValue);
-        }
-
-        public DoubleColumnType(int decimals) {
-            super();
-            this.decimals = decimals;
-        }
-
-        public DoubleColumnType(String nullValue, int decimals) {
-            super(nullValue);
-            this.decimals = decimals;
-        }
-
-        @Override
-        protected String convertNotNull(Double data) {
-            return String.format("%50." + decimals + "f", data).trim();
-        }
-
-        @Override
-        public boolean accepts(Object data) {
-            return data instanceof Double;
-        }
-
-
-    }
-
-
-    public static class BooleanColumnType extends AbstractColumnType<Boolean> {
-        private String trueValue = "true";
-        private String falseValue = "false";
-
-        public BooleanColumnType() {
-            super();
-        }
-
-        public BooleanColumnType(String nullValue) {
-            super(nullValue);
-        }
-
-        public BooleanColumnType(String trueValue, String falseValue) {
-            super();
-            this.trueValue = trueValue;
-            this.falseValue = falseValue;
-        }
-
-        public BooleanColumnType(String trueValue, String falseValue, String nullValue) {
-            super(nullValue);
-            this.trueValue = trueValue;
-            this.falseValue = falseValue;
-        }
-
-        @Override
-        protected String convertNotNull(Boolean data) {
-            return data ? trueValue : falseValue;
-        }
-
-        @Override
-        public boolean accepts(Object data) {
-            return data instanceof Boolean;
-        }
-    }
-
-    public enum Alignment {
-        LEFT {
-
-            @Override
-            public String align(String data, int width) {
-                if (data.length() > width) {
-                    return data.substring(0, width);
-                }
-                return String.format("%1$-" + width + "s", data);
-            }
-
-        }, RIGHT {
-
-            @Override
-            public String align(String data, int width) {
-                if (data.length() > width) {
-                    return data.substring(0, width);
-                }
-                return String.format("%1$" + width + "s", data);
-            }
-
-        }, CENTER {
-            @Override
-            public String align(String data, int width) {
-                if (data.length() > width) {
-                    return data.substring(0, width);
-                }
-                int leftPad = (width - data.length())/2;
-                return LEFT.align(RIGHT.align(data, width-leftPad), width);
-            }
-        };
-
-        public abstract String align(String data, int width);
-    }
-
-    public static class ColumnDefinition {
-
-        public static class Builder {
-            private ColumnType<?> type;
-            private String title;
-            private int minWidth = 0;
-            private int maxWidth = Integer.MAX_VALUE;
-            private Alignment alignment = Alignment.LEFT;
-
-            public Builder(ColumnType<?> type, String title) {
-                super();
-                this.type = type;
-                this.title = title;
-            }
-
-            public Builder withMinWidth(int minWidth) {
-                this.minWidth = minWidth;
-                return this;
-            }
-
-            public Builder withMaxWidth(int maxWidth) {
-                this.maxWidth = maxWidth;
-                return this;
-            }
-
-            public Builder withAlignment(Alignment alignment) {
-                this.alignment = alignment;
-                return this;
-            }
-
-            public ColumnDefinition build() {
-                return new ColumnDefinition(this);
-            }
-
-        }
-
-        private ColumnType<?> type;
-        private String title;
-        private int minWidth = 0;
-        private int maxWidth = Integer.MAX_VALUE;
-        private Alignment alignment = Alignment.LEFT;
-
-        private ColumnDefinition(Builder builder) {
-            type = builder.type;
-            title = builder.title;
-            minWidth = builder.minWidth;
-            maxWidth = builder.maxWidth;
-            alignment = builder.alignment;
-        }
-
-        public ColumnType<?> getType() {
-            return type;
-        }
-
-        public String getTitle() {
-            return title;
-        }
-
-        public int getMinWidth() {
-            return minWidth;
-        }
-
-        public int getMaxWidth() {
-            return maxWidth;
-        }
-
-        public Alignment getAlignment() {
-            return alignment;
-        }
-
-    }
-
-
+    /**
+     * Builder for the table definition.
+     *
+     * @author balage
+     */
     public static class Builder {
         private char corner = '+';
         private char vertical = '|';
@@ -302,36 +30,73 @@ public Alignment getAlignment() {
 
         private int padding = 1;
 
+        /**
+         * @param corner
+         *            The corner (where vertical and horizontal lines meet)
+         *            character.
+         * @return the builder
+         */
         public Builder withCorner(char corner) {
             this.corner = corner;
             return this;
         }
 
+        /**
+         * @param vertical
+         *            The vertical line character.
+         * @return the builder
+         */
         public Builder withVertical(char vertical) {
             this.vertical = vertical;
             return this;
         }
 
+        /**
+         * @param horizontal
+         *            The horizontal line character.
+         * @return the builder
+         */
         public Builder withHorizontal(char horizontal) {
             this.horizontal = horizontal;
             return this;
         }
 
+        /**
+         * @param heading
+         *            The heading text of the table. If not defined or null
+         *            specified, no heading will be printed.
+         * @return the builder
+         */
         public Builder withHeading(String heading) {
             this.heading = heading;
             return this;
         }
 
+        /**
+         * Adds a column for the table definition.
+         *
+         * @param column
+         *            The column definition to add.
+         * @return the builder
+         */
         public Builder addColumn(ColumnDefinition column) {
             columns.add(column);
             return this;
         }
 
+        /**
+         * @param padding
+         *            The padding size of the table.
+         * @return the builder
+         */
         public Builder withPadding(int padding) {
             this.padding = Math.max(0, padding);
             return this;
         }
 
+        /**
+         * @return The imutable table definition object.
+         */
         public DynamicTableDefinition build() {
             return new DynamicTableDefinition(this);
         }
@@ -347,6 +112,12 @@ public DynamicTableDefinition build() {
 
     private int padding = 1;
 
+    /**
+     * Private constructor for builder.
+     *
+     * @param builder
+     *            the builder to initialize from.
+     */
     private DynamicTableDefinition(Builder builder) {
         corner = builder.corner;
         vertical = builder.vertical;
@@ -356,30 +127,51 @@ private DynamicTableDefinition(Builder builder) {
         padding = builder.padding;
     }
 
+    /**
+     * @return the corner (where vertical and horizontal lines meet) character.
+     */
     public char getCorner() {
         return corner;
     }
 
+    /**
+     * @return the character for vertical line
+     */
     public char getVertical() {
         return vertical;
     }
 
+    /**
+     * @return the character for horizontal line
+     */
     public char getHorizontal() {
         return horizontal;
     }
 
+    /**
+     * @return the heading text
+     */
     public String getHeading() {
         return heading;
     }
 
+    /**
+     * @return the unmodifiable column list
+     */
     public List<ColumnDefinition> getColumns() {
-        return columns;
+        return Collections.unmodifiableList(columns);
     }
 
+    /**
+     * @return the padding size
+     */
     public int getPadding() {
         return padding;
     }
 
+    /**
+     * @return The number of columns.
+     */
     public int size() {
         return columns.size();
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/DynamicTablePrinter.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/DynamicTablePrinter.java
index 59abfdfb1..bfa4a32d7 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/DynamicTablePrinter.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/DynamicTablePrinter.java
@@ -6,10 +6,10 @@
 import java.util.List;
 import java.util.stream.IntStream;
 
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.Alignment;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.DoubleColumnType;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.StringColumnType;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnAlignment;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
+import com.graphhopper.jsprit.core.reporting.columndefinition.DoubleColumnType;
+import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
 
 /**
  * @author balage
@@ -124,7 +124,7 @@ public String print() {
             sb.append(corner).append(repeat(horizontal, totalWidth - 2)).append(corner)
             .append("\n");
             sb.append(vertical).append(paddingChars)
-            .append(Alignment.LEFT.align(tableDef.getHeading(),
+            .append(ColumnAlignment.LEFT.align(tableDef.getHeading(),
                             totalWidth - 2 * padding - 2))
             .append(paddingChars)
             .append(vertical)
@@ -135,7 +135,7 @@ public String print() {
         sb.append(vertical);
         for (int i = 0; i < tableDef.size(); i++) {
             ColumnDefinition cd = tableDef.getColumns().get(i);
-            sb.append(paddingChars).append(Alignment.LEFT.align(cd.getTitle(), colWidth[i]))
+            sb.append(paddingChars).append(ColumnAlignment.LEFT.align(cd.getTitle(), colWidth[i]))
             .append(paddingChars).append(vertical);
         }
         sb.append("\n");
@@ -182,11 +182,11 @@ public static void main(String[] args) {
                                         .build())
                         .addColumn(new ColumnDefinition.Builder(new StringColumnType(),
                                         "right-string")
-                                        .withAlignment(Alignment.CENTER).build())
+                                        .withAlignment(ColumnAlignment.CENTER).build())
                         .addColumn(new ColumnDefinition.Builder(new DoubleColumnType(),
                                         "double")
                                         .withMinWidth(10)
-                                        .withAlignment(Alignment.RIGHT).build())
+                                        .withAlignment(ColumnAlignment.RIGHT).build())
                         .build();
 
         DynamicTablePrinter p = new DynamicTablePrinter(td);
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/PrinterColumnList.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/PrinterColumnList.java
index ea068a786..3644c7e1b 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/PrinterColumnList.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/PrinterColumnList.java
@@ -1,30 +1,91 @@
 package com.graphhopper.jsprit.core.reporting;
 
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
+import java.util.Optional;
+import java.util.stream.Collectors;
 
+import com.graphhopper.jsprit.core.reporting.ConfigurableTablePrinter.TableRow;
 import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.Builder;
 
+/**
+ * The list of the printer columns. This helps the user to construct, manage and
+ * alter the column definitions. Also this function populates the
+ * {@linkplain TableRow}.
+ *
+ * @author balage
+ *
+ * @param <C>
+ *            The context the colums
+ */
 public class PrinterColumnList<C extends PrinterContext> {
 
+    // The heading line
     private String heading = null;
 
-    private List<AbstractPrinterColumn<C, ?>> columns = new ArrayList<>();
+    // The list of the columns
+    private List<AbstractPrinterColumn<C, ?, ?>> columns = new ArrayList<>();
 
+    /**
+     * The constructor to create a table without heading.
+     */
     public PrinterColumnList() {
         super();
     }
 
+    /**
+     * Constructor to create with heading text.
+     *
+     * @param heading
+     *            The heading text.
+     */
     public PrinterColumnList(String heading) {
         super();
         this.heading = heading;
     }
 
-    public PrinterColumnList<C> addColumn(AbstractPrinterColumn<C, ?> column) {
-        columns.add(column);
+    /**
+     * Adds a column to the column list.
+     *
+     * @param column
+     *            The column to add.
+     * @return The object itself (fluent api)
+     */
+    public PrinterColumnList<C> addColumn(AbstractPrinterColumn<C, ?,?> column) {
+        if (findByTitle(column.getTitle()).isPresent()) {
+            throw new IllegalArgumentException("Name is duplicated: " + column.getTitle());
+        } else {
+            columns.add(column);
+        }
         return this;
     }
 
+    /**
+     * Removes a column.
+     * <p>
+     * Requires the exact column instance that was added- Use the
+     * {@linkplain #findByClass(Class)} or {@linkplain #findByTitle(String)}
+     * functions to get the instance.
+     * </p>
+     *
+     * @param column
+     *            the column to remove.
+     * @return true if the column was found and removed
+     */
+    public boolean removeColumn(AbstractPrinterColumn<C, ?, ?> column) {
+        boolean res = columns.contains(column);
+        if (res) {
+            columns.remove(column);
+        }
+        return res;
+    }
+
+    /**
+     * Builds the table definition from the column list and other parameters.
+     *
+     * @return the table definition
+     */
     public DynamicTableDefinition getTableDefinition() {
         Builder defBuilder = new DynamicTableDefinition.Builder();
         columns.forEach(c -> defBuilder.addColumn(c.getColumnDefinition()));
@@ -32,9 +93,72 @@ public DynamicTableDefinition getTableDefinition() {
         return defBuilder.build();
     }
 
-    public void populateRow(ConfigurableTablePrinter<C>.TableRow row, C context) {
+    /**
+     * Populates a table row with the data extracted from the context and
+     * formatted by the column definition.
+     *
+     * @param row
+     *            The row to populate. The row must match the column definition.
+     * @param context
+     *            The context to work on
+     */
+    void populateRow(ConfigurableTablePrinter<C>.TableRow row, C context) {
         columns.forEach(c -> row.add(c.getData(context)));
     }
 
+    /**
+     * @return unmodifiable list of columns
+     */
+    public List<AbstractPrinterColumn<C, ?,?>> getColumns() {
+        return Collections.unmodifiableList(columns);
+    }
+
+    /**
+     * @return the heading text. Null means there will be no heading.
+     */
+    public String getHeading() {
+        return heading;
+    }
+
+    /**
+     * @param heading
+     *            The new heading text or null to remove heading.
+     * @return The object itself (fluent api)
+     */
+    public PrinterColumnList<C> withHeading(String heading) {
+        this.heading = heading;
+        return this;
+    }
+
+    /**
+     * Finds the columns with the type given.
+     * <p>
+     * A table could contain more columns of the same type, so this function
+     * returns all matching columns.
+     * </p>
+     * <p>
+     * Note that this function intentially uses
+     * <code>getClass().equals(clazz)</code> instead of <code>instanceof</code>,
+     * so only the exact matches are returned. Columns of inherited classes are
+     * not returned.
+     *
+     * @param clazz
+     *            The class to look for
+     * @return The list of all the columns with the type
+     */
+    public List<AbstractPrinterColumn<C, ?, ?>> findByClass(Class<? extends AbstractPrinterColumn<C, ?,?>> clazz) {
+        return columns.stream().filter(c -> c.getClass().equals(clazz)).collect(Collectors.toList());
+    }
+
+    /**
+     * Returns the column with the title.
+     * 
+     * @param title
+     *            The title to look for
+     * @return The column definition if there is any match
+     */
+    public Optional<AbstractPrinterColumn<C, ?, ?>> findByTitle(String title) {
+        return columns.stream().filter(c -> c.getTitle().equals(title)).findAny();
+    }
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/PrinterContext.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/PrinterContext.java
index 323aeb8d5..58521bd8b 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/PrinterContext.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/PrinterContext.java
@@ -1,4 +1,10 @@
 package com.graphhopper.jsprit.core.reporting;
 
-public class PrinterContext {
+/**
+ * Common marker interface of printer contexts
+ *
+ * @author balage
+ *
+ */
+public interface PrinterContext {
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java
index f80e13188..1f6640032 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java
@@ -18,8 +18,6 @@
 package com.graphhopper.jsprit.core.reporting;
 
 import java.io.PrintWriter;
-import java.time.LocalDateTime;
-import java.time.temporal.ChronoUnit;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
@@ -28,43 +26,17 @@
 import java.util.function.Function;
 import java.util.stream.Collectors;
 
-import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.AbstractActivity;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.Alignment;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.IntColumnType;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.LongColumnType;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.StringColumnType;
-import com.graphhopper.jsprit.core.reporting.route.ActivityCostPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.route.ActivityDurationPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.route.ActivityLoadChangePrinterColumn;
-import com.graphhopper.jsprit.core.reporting.route.ActivityTypePrinterColumn;
-import com.graphhopper.jsprit.core.reporting.route.ArrivalTimePrinterColumn;
-import com.graphhopper.jsprit.core.reporting.route.EndTimePrinterColumn;
-import com.graphhopper.jsprit.core.reporting.route.HumanReadableTimeFormatter;
-import com.graphhopper.jsprit.core.reporting.route.JobNamePrinterColumn;
-import com.graphhopper.jsprit.core.reporting.route.JobPriorityPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.route.JobTypePrinterColumn;
-import com.graphhopper.jsprit.core.reporting.route.LoacationPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.route.OperationDurationPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.route.RouteCostPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.route.RouteLoadPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.route.RouteNumberPrinterColumn;
+import com.graphhopper.jsprit.core.reporting.ConfigurableTablePrinter.CsvConfig;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
+import com.graphhopper.jsprit.core.reporting.columndefinition.SolutionPrintColumnLists;
+import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
+import com.graphhopper.jsprit.core.reporting.columndefinition.SolutionPrintColumnLists.PredefinedList;
 import com.graphhopper.jsprit.core.reporting.route.RoutePrinterContext;
-import com.graphhopper.jsprit.core.reporting.route.SelectedTimeWindowPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.route.StartTimePrinterColumn;
-import com.graphhopper.jsprit.core.reporting.route.TimeWindowsPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.route.TransportCostPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.route.TravelDurationPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.route.VehicleNamePrinterColumn;
-import com.graphhopper.jsprit.core.reporting.route.WaitingDurationPrinterColumn;
 
 
 /**
@@ -123,13 +95,29 @@ public static void print(VehicleRoutingProblem problem, VehicleRoutingProblemSol
         SYSTEM_OUT_AS_PRINT_WRITER.flush();
     }
 
+    public static void print(PrintWriter out, VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution, Print print) {
+        print(out, problem, solution, print, SolutionPrintColumnLists.getNumeric(PredefinedList.DEFAULT));
+    }
+
+    public static void print(VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution,
+                    PrinterColumnList<RoutePrinterContext> verbosePrintColumns) {
+        print(SYSTEM_OUT_AS_PRINT_WRITER, problem, solution, verbosePrintColumns);
+        SYSTEM_OUT_AS_PRINT_WRITER.flush();
+    }
+
+    public static void print(PrintWriter out, VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution,
+                    PrinterColumnList<RoutePrinterContext> verbosePrintColumns) {
+        print(out, problem, solution, Print.VERBOSE, verbosePrintColumns);
+    }
+
     /**
      * Prints costs and #vehicles to the given writer
      *
      * @param out      the destination writer
      * @param solution the solution to be printed
      */
-    public static void print(PrintWriter out, VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution, Print print) {
+    public static void print(PrintWriter out, VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution, Print print,
+                    PrinterColumnList<RoutePrinterContext> verbosePrintColumns) {
 
         DynamicTableDefinition problemTableDef = new DynamicTableDefinition.Builder()
                         .withHeading("Problem")
@@ -165,114 +153,22 @@ public static void print(PrintWriter out, VehicleRoutingProblem problem, Vehicle
         out.println(solutionTablePrinter.print());
 
         if (print.equals(Print.VERBOSE)) {
-            printVerbose(out, problem, solution);
-            printVerbose2(out, problem, solution);
+            printVerbose(out, problem, solution, verbosePrintColumns);
         }
     }
 
 
-    private static void printVerbose(VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution) {
-        printVerbose(SYSTEM_OUT_AS_PRINT_WRITER, problem, solution);
-        SYSTEM_OUT_AS_PRINT_WRITER.flush();
-    }
-
-    private static void printVerbose(PrintWriter out, VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution) {
+    private static void printVerbose(PrintWriter out, VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution,
+                    PrinterColumnList<RoutePrinterContext> columns) {
 
-        DynamicTableDefinition tableDef = new DynamicTableDefinition.Builder()
-                        .withHeading("Detailed solution")
-                        .addColumn(new ColumnDefinition.Builder(new IntColumnType(), "route")
-                                        .build())
-                        .addColumn(new ColumnDefinition.Builder(new StringColumnType(), "vehicle")
-                                        .build())
-                        .addColumn(new ColumnDefinition.Builder(new StringColumnType(), "activity")
-                                        .build())
-                        .addColumn(new ColumnDefinition.Builder(new StringColumnType("-"), "job")
-                                        .withMinWidth(10)
-                                        .build())
-                        .addColumn(new ColumnDefinition.Builder(new StringColumnType(), "load")
-                                        .build())
-                        .addColumn(new ColumnDefinition.Builder(new StringColumnType(), "location")
-                                        .build())
-                        .addColumn(new ColumnDefinition.Builder(new LongColumnType("-"), "arrTime")
-                                        .withAlignment(Alignment.RIGHT)
-                                        .build())
-                        .addColumn(new ColumnDefinition.Builder(new LongColumnType("-"), "endTime")
-                                        .withAlignment(Alignment.RIGHT)
-                                        .build())
-                        .addColumn(new ColumnDefinition.Builder(new LongColumnType(), "cost")
-                                        .withAlignment(Alignment.RIGHT)
-                                        .build())
-                        .build();
-
-        DynamicTablePrinter tablePrinter = new DynamicTablePrinter(tableDef);
-        int routeNu = 1;
-
-        List<VehicleRoute> list = new ArrayList<>(solution.getRoutes());
-        Collections.sort(list, new com.graphhopper.jsprit.core.util.VehicleIndexComparator());
-        for (VehicleRoute route : list) {
-            if (routeNu != 1) {
-                tablePrinter.addSeparator();
-            }
-
-            double costs = 0;
-            SizeDimension load = getInitialLoad(route);
-            tablePrinter.addRow().add(routeNu).add(getVehicleString(route)).add(route.getStart().getName()).add(null)
-            .add(getString(load))
-            .add(getLocationString(route.getStart().getLocation()))
-            .add(null)
-            .add(Math.round(route.getStart().getEndTime())).add(Math.round(costs));
-
-            TourActivity prevAct = route.getStart();
-            for (TourActivity act : route.getActivities()) {
-                String jobId;
-                if (act instanceof JobActivity) {
-                    jobId = ((JobActivity) act).getJob().getId();
-                } else {
-                    jobId = "-";
-                }
-                String type = (act instanceof AbstractActivity)
-                                ? ((AbstractActivity) act).getType() : act.getName();
-                                double c = problem.getTransportCosts().getTransportCost(prevAct.getLocation(), act.getLocation(), prevAct.getEndTime(), route.getDriver(),
-                                                route.getVehicle());
-                                c += problem.getActivityCosts().getActivityCost(act, act.getArrTime(), route.getDriver(), route.getVehicle());
-                                costs += c;
-                                load = load.add(act.getLoadChange());
-
-                                tablePrinter.addRow().add(routeNu).add(getVehicleString(route)).add(type).add(jobId)
-                                .add(getString(load)).add(getLocationString(act.getLocation()))
-                                .add(Math.round(act.getArrTime()))
-                                .add(Math.round(act.getEndTime())).add(Math.round(costs));
-                                prevAct = act;
-            }
-            double c = problem.getTransportCosts().getTransportCost(prevAct.getLocation(), route.getEnd().getLocation(), prevAct.getEndTime(),
-                            route.getDriver(), route.getVehicle());
-            c += problem.getActivityCosts().getActivityCost(route.getEnd(), route.getEnd().getArrTime(), route.getDriver(), route.getVehicle());
-            costs += c;
-
-            tablePrinter.addRow().add(routeNu).add(getVehicleString(route))
-            .add(route.getEnd().getName()).add(null)
-            .add(getString(load))
-            .add(getLocationString(route.getEnd().getLocation()))
-            .add(null).add(Math.round(route.getEnd().getEndTime()))
-            .add(Math.round(costs));
-
-            routeNu++;
-        }
+        ConfigurableTablePrinter<RoutePrinterContext> tablePrinter = buildTablePrinter(problem, solution, columns);
         out.println(tablePrinter.print());
 
-
         if (!solution.getUnassignedJobs().isEmpty()) {
 
-            DynamicTableDefinition unassignedTableDef = new DynamicTableDefinition.Builder()
-                            .withHeading("Unassigned jobs")
-                            .addColumn(new ColumnDefinition.Builder(new StringColumnType(),
-                                            "id")
-                                            .withMinWidth(10)
-                                            .build())
-                            .addColumn(new ColumnDefinition.Builder(new StringColumnType(),
-                                            "type")
-                                            .build())
-                            .build();
+            DynamicTableDefinition unassignedTableDef = new DynamicTableDefinition.Builder().withHeading("Unassigned jobs")
+                            .addColumn(new ColumnDefinition.Builder(new StringColumnType(), "id").withMinWidth(10).build())
+                            .addColumn(new ColumnDefinition.Builder(new StringColumnType(), "type").build()).build();
 
             DynamicTablePrinter unassignedTablePrinter = new DynamicTablePrinter(unassignedTableDef);
 
@@ -283,43 +179,8 @@ private static void printVerbose(PrintWriter out, VehicleRoutingProblem problem,
         }
     }
 
-    private static void printVerbose2(PrintWriter out, VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution) {
-
-        PrinterColumnList<RoutePrinterContext> columns = new PrinterColumnList<>("Detailed route");
-        HumanReadableTimeFormatter dateFormatter = new HumanReadableTimeFormatter(LocalDateTime.now(), ChronoUnit.SECONDS);
-        columns
-        .addColumn(new RouteNumberPrinterColumn())
-        .addColumn(new VehicleNamePrinterColumn())
-        .addColumn(new ActivityTypePrinterColumn())
-        .addColumn(new JobNamePrinterColumn(b -> b.withMinWidth(10)))
-        .addColumn(new JobTypePrinterColumn())
-        .addColumn(new JobPriorityPrinterColumn())
-        .addColumn(new ActivityLoadChangePrinterColumn())
-        .addColumn(new RouteLoadPrinterColumn())
-        .addColumn(new LoacationPrinterColumn())
-        .addColumn(new OperationDurationPrinterColumn())
-        .addColumn(new OperationDurationPrinterColumn().asHumanReadable())
-        .addColumn(new TravelDurationPrinterColumn())
-        .addColumn(new TravelDurationPrinterColumn().asHumanReadable())
-        .addColumn(new ActivityDurationPrinterColumn())
-        .addColumn(new ActivityDurationPrinterColumn().asHumanReadable())
-        .addColumn(new WaitingDurationPrinterColumn())
-        .addColumn(new WaitingDurationPrinterColumn().asHumanReadable())
-        .addColumn(new ArrivalTimePrinterColumn())
-        .addColumn(new ArrivalTimePrinterColumn().asHumanReadable().withFormatter(dateFormatter))
-        .addColumn(new StartTimePrinterColumn())
-        .addColumn(new StartTimePrinterColumn().asHumanReadable().withFormatter(dateFormatter))
-        .addColumn(new EndTimePrinterColumn())
-        .addColumn(new EndTimePrinterColumn().asHumanReadable().withFormatter(dateFormatter))
-        .addColumn(new TransportCostPrinterColumn())
-        .addColumn(new ActivityCostPrinterColumn())
-        .addColumn(new RouteCostPrinterColumn())
-        .addColumn(new SelectedTimeWindowPrinterColumn())
-        .addColumn(new SelectedTimeWindowPrinterColumn().asHumanReadable().withFormatter(dateFormatter))
-        .addColumn(new TimeWindowsPrinterColumn())
-        .addColumn(new TimeWindowsPrinterColumn().asHumanReadable().withFormatter(dateFormatter))
-        ;
-
+    protected static ConfigurableTablePrinter<RoutePrinterContext> buildTablePrinter(VehicleRoutingProblem problem,
+                    VehicleRoutingProblemSolution solution, PrinterColumnList<RoutePrinterContext> columns) {
         ConfigurableTablePrinter<RoutePrinterContext> tablePrinter = new ConfigurableTablePrinter<>(columns);
         int routeNu = 1;
 
@@ -343,55 +204,7 @@ private static void printVerbose2(PrintWriter out, VehicleRoutingProblem problem
 
             routeNu++;
         }
-        out.println(tablePrinter.print());
-
-        if (!solution.getUnassignedJobs().isEmpty()) {
-
-            DynamicTableDefinition unassignedTableDef = new DynamicTableDefinition.Builder().withHeading("Unassigned jobs")
-                            .addColumn(new ColumnDefinition.Builder(new StringColumnType(), "id").withMinWidth(10).build())
-                            .addColumn(new ColumnDefinition.Builder(new StringColumnType(), "type").build()).build();
-
-            DynamicTablePrinter unassignedTablePrinter = new DynamicTablePrinter(unassignedTableDef);
-
-            for (Job j : solution.getUnassignedJobs()) {
-                unassignedTablePrinter.addRow().add(j.getId()).add(j.getClass().getSimpleName());
-            }
-            out.println(unassignedTablePrinter.print());
-        }
-    }
-
-    private static String getLocationString(Location l) {
-        if (l == null) {
-            return null;
-        } else {
-            return l.getId();
-        }
-    }
-
-    private static String getString(SizeDimension load) {
-        String l = "[";
-        for (int i = 0; i < load.getNuOfDimensions(); i++) {
-            if (i > 0) {
-                l += ", " + load.get(i);
-            } else {
-                l += load.get(i);
-            }
-        }
-        l += "]";
-        return l;
-    }
-
-    private static SizeDimension getInitialLoad(VehicleRoute route) {
-        SizeDimension initialLoad = SizeDimension.EMPTY;
-        for (TourActivity act : route.getActivities()) {
-            initialLoad = initialLoad.add(act.getLoadChange());
-        }
-        return initialLoad.getNegativeDimensions().abs();
-    }
-
-
-    private static String getVehicleString(VehicleRoute route) {
-        return route.getVehicle().getId();
+        return tablePrinter;
     }
 
     private static Map<Class<? extends Job>, Long> getNuOfJobs(VehicleRoutingProblem problem) {
@@ -400,4 +213,10 @@ private static String getVehicleString(VehicleRoute route) {
                         .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));
     }
 
+    public static String export(VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution,
+                    PrinterColumnList<RoutePrinterContext> columns, CsvConfig csvConfig) {
+        ConfigurableTablePrinter<RoutePrinterContext> table = buildTablePrinter(problem, solution, columns);
+        return table.exportToCsv(csvConfig);
+    }
+
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/AbstractColumnType.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/AbstractColumnType.java
new file mode 100644
index 000000000..6a07a2cb0
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/AbstractColumnType.java
@@ -0,0 +1,63 @@
+package com.graphhopper.jsprit.core.reporting.columndefinition;
+
+/**
+ * Common abstract ancestor for column types.
+ *
+ * @author balage
+ *
+ * @param <T>
+ *            The type it accepts.
+ */
+public abstract class AbstractColumnType<T> implements ColumnType<T> {
+
+    // The string to used as null value
+    private String nullValue = "";
+
+    public AbstractColumnType() {
+        super();
+    }
+
+    /**
+     * @param nullValue
+     *            alternative null value
+     */
+    public AbstractColumnType(String nullValue) {
+        super();
+        this.nullValue = nullValue;
+    }
+
+    /**
+     * {@inheritDoc}
+     *
+     * This basic implementation takes the burden to handle null values and
+     * calls the {@linkplain #convertNotNull(Object)} for all other values.
+     *
+     * @see com.graphhopper.jsprit.core.reporting.columndefinition.ColumnType#convert(java.lang.Object)
+     *
+     * @throws ClassCastException
+     *             if the data is not accepted by the column type.
+     */
+    @SuppressWarnings("unchecked")
+    @Override
+    public String convert(Object data) {
+        if (data == null) {
+            return nullValue;
+        } else {
+            if (accepts(data)) {
+                return convertNotNull((T) data);
+            } else {
+                throw new ClassCastException();
+            }
+        }
+    }
+
+    /**
+     * Converts the data into String. This function never gets null as
+     * parameter.
+     *
+     * @param data
+     *            the non-null data to convert.
+     * @return The converted data.
+     */
+    protected abstract String convertNotNull(T data);
+}
\ No newline at end of file
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/BooleanColumnType.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/BooleanColumnType.java
new file mode 100644
index 000000000..ec2159033
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/BooleanColumnType.java
@@ -0,0 +1,80 @@
+package com.graphhopper.jsprit.core.reporting.columndefinition;
+
+/**
+ * A column type with boolean values.
+ * <p>
+ * The display value for true and false values could be configured.
+ * </p>
+ *
+ * @author balage
+ *
+ */
+public class BooleanColumnType extends AbstractColumnType<Boolean> {
+    // The display value for true
+    private String trueValue = "true";
+    // The display value for false
+    private String falseValue = "false";
+
+    /**
+     * Konstructor. The column will use the default values for null, true or
+     * false.
+     */
+    public BooleanColumnType() {
+        super();
+    }
+
+    /**
+     * Konstructor. The column will use the default values for true or false.
+     *
+     * @param nullValue
+     *            The text representation for null values.
+     */
+    public BooleanColumnType(String nullValue) {
+        super(nullValue);
+    }
+
+    /**
+     * Konstructor. The column will use the default values for null.
+     *
+     * @param trueValue
+     *            The text representation for true values.
+     * @param falseValue
+     *            The text representation for false values.
+     */
+    public BooleanColumnType(String trueValue, String falseValue) {
+        super();
+        this.trueValue = trueValue;
+        this.falseValue = falseValue;
+    }
+
+    /**
+     * Konstructor.
+     *
+     * @param trueValue
+     *            The text representation for true values.
+     * @param falseValue
+     *            The text representation for false values.
+     * @param nullValue
+     *            The text representation for null values.
+     */
+    public BooleanColumnType(String trueValue, String falseValue, String nullValue) {
+        super(nullValue);
+        this.trueValue = trueValue;
+        this.falseValue = falseValue;
+    }
+
+    @Override
+    protected String convertNotNull(Boolean data) {
+        return data ? trueValue : falseValue;
+    }
+
+    /**
+     * {@inheritDoc}
+     *
+     * Only accepts {@linkplain Boolean} input.
+     */
+    @Override
+    public boolean accepts(Object data) {
+        return data instanceof Boolean;
+    }
+}
\ No newline at end of file
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/ColumnAlignment.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/ColumnAlignment.java
new file mode 100644
index 000000000..44f4bc5fc
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/ColumnAlignment.java
@@ -0,0 +1,67 @@
+package com.graphhopper.jsprit.core.reporting.columndefinition;
+
+/**
+ * Alignment of the column.
+ * <p>
+ * Longer values will be truncated, shorter values will be padded by spaces.
+ * </p>
+ *
+ * @author balage
+ *
+ */
+public enum ColumnAlignment {
+    /**
+     * The values are aligned left, padded on the right side.
+     */
+    LEFT {
+
+        @Override
+        public String align(String data, int width) {
+            if (data.length() > width) {
+                return data.substring(0, width);
+            }
+            return String.format("%1$-" + width + "s", data);
+        }
+
+    },
+    /**
+     * The values are aligned right, padded on the left side.
+     */
+    RIGHT {
+
+        @Override
+        public String align(String data, int width) {
+            if (data.length() > width) {
+                return data.substring(0, width);
+            }
+            return String.format("%1$" + width + "s", data);
+        }
+
+    },
+    /**
+     * The values are centered, padded on the both sides evenly (in case of odd
+     * character padding, the left padding will be one more than the right one).
+     */
+    CENTER {
+        @Override
+        public String align(String data, int width) {
+            if (data.length() > width) {
+                return data.substring(0, width);
+            }
+            int leftPad = (width - data.length())/2;
+            return LEFT.align(RIGHT.align(data, width-leftPad), width);
+        }
+    };
+
+    /**
+     * Applies the alignment on the data according the width. Truncates or pads
+     * the value.
+     * 
+     * @param data
+     *            The data to align.
+     * @param width
+     *            The width to pad to.
+     * @return The aligned (padded) values with the exact length of width.
+     */
+    public abstract String align(String data, int width);
+}
\ No newline at end of file
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/ColumnDefinition.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/ColumnDefinition.java
new file mode 100644
index 000000000..7fcdabd13
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/ColumnDefinition.java
@@ -0,0 +1,192 @@
+package com.graphhopper.jsprit.core.reporting.columndefinition;
+
+/**
+ * Column definition. Contains all information for converting and formatting the
+ * column.
+ * <p>
+ * The definition itself immutable and cannot be directly instantiate. Use the
+ * {@linkplain Builder} class for constructing the definition.
+ * </p>
+ *
+ * @author balage
+ *
+ */
+public class ColumnDefinition {
+
+    /**
+     * The builder for {@linkplain ColumnDefinition}.
+     * <p>
+     * When it is not specified, the default title is null (the default title of
+     * the column will be used), the minWidth is 0, the maxWidth is
+     * {@linkplain Integer#MAX_VALUE} and the alignment is
+     * {@linkplain ColumnAlignment#LEFT}.
+     * </p>
+     *
+     * @author balage
+     *
+     */
+    public static class Builder {
+        // Type of the column.
+        private ColumnType<?> type;
+        // The title of the column.
+        private String title;
+        // The minimal width of the column.
+        private int minWidth = 0;
+        // The maximal width of the column.
+        private int maxWidth = Integer.MAX_VALUE;
+        // The alignment of the column.
+        private ColumnAlignment alignment = ColumnAlignment.LEFT;
+
+        /**
+         * Constructor with title specified.
+         *
+         * @param type
+         *            Type of the column.
+         * @param title
+         *            The title of the column.
+         * @see {@linkplain #withTitle(String)}
+         */
+        public Builder(ColumnType<?> type, String title) {
+            super();
+            this.type = type;
+            this.title = title;
+        }
+
+        /**
+         * Constructor.
+         *
+         * @param type
+         *            Type of the column.
+         */
+        public Builder(ColumnType<?> type) {
+            super();
+            this.type = type;
+        }
+
+        /**
+         * @param title
+         *            The title of the column
+         * @return The builder object.
+         */
+        public ColumnDefinition.Builder withTitle(String title) {
+            this.title = title;
+            return this;
+        }
+
+        /**
+         * @param minWidth
+         *            The minimal width of the column.
+         * @return The builder object.
+         * @throws IllegalArgumentException
+         *             If the minWidth is negative or higher than the maxWidth.
+         */
+        public ColumnDefinition.Builder withMinWidth(int minWidth) {
+            if (minWidth < 0) {
+                throw new IllegalArgumentException("Minimal width should be non-negative.");
+            }
+            if (minWidth > maxWidth) {
+                throw new IllegalArgumentException("Minimal width should be less or equal than the maximal width.");
+            }
+            this.minWidth = minWidth;
+            return this;
+        }
+
+        /**
+         * @param maxWidth
+         *            The maximal width of the column.
+         * @return The builder object.
+         * @throws IllegalArgumentException
+         *             If the maxWidth is negative or less than the minWidth.
+         */
+        public ColumnDefinition.Builder withMaxWidth(int maxWidth) {
+            if (maxWidth < 0) {
+                throw new IllegalArgumentException("Maximal width should be non-negative.");
+            }
+            if (maxWidth > maxWidth) {
+                throw new IllegalArgumentException("Maximal width should be greater or equal than the minimal width.");
+            }
+            this.maxWidth = maxWidth;
+            return this;
+        }
+
+        /**
+         * @param alignment
+         *            The alignment of the column.
+         * @return The builder object.
+         */
+        public ColumnDefinition.Builder withAlignment(ColumnAlignment alignment) {
+            this.alignment = alignment;
+            return this;
+        }
+
+        /**
+         * @return The constructed imutable definition object.
+         */
+        public ColumnDefinition build() {
+            return new ColumnDefinition(this);
+        }
+
+    }
+
+
+    // Type of the column.
+    private ColumnType<?> type;
+    // The title of the column.
+    private String title;
+    // The minimal width of the column.
+    private int minWidth = 0;
+    // The maximal width of the column.
+    private int maxWidth = Integer.MAX_VALUE;
+    // The alignment of the column.
+    private ColumnAlignment alignment = ColumnAlignment.LEFT;
+
+    /**
+     * Private constructor for the builder.
+     *
+     * @param builder
+     *            The builder.
+     */
+    private ColumnDefinition(ColumnDefinition.Builder builder) {
+        type = builder.type;
+        title = builder.title;
+        minWidth = builder.minWidth;
+        maxWidth = builder.maxWidth;
+        alignment = builder.alignment;
+    }
+
+    /**
+     * @return The type of the column.
+     */
+    public ColumnType<?> getType() {
+        return type;
+    }
+
+    /**
+     * @return The title of the column. If null, the default title will be used.
+     */
+    public String getTitle() {
+        return title;
+    }
+
+    /**
+     * @return The minimal width of the column.
+     */
+    public int getMinWidth() {
+        return minWidth;
+    }
+
+    /**
+     * @return The maximal width of the column.
+     */
+    public int getMaxWidth() {
+        return maxWidth;
+    }
+
+    /**
+     * @return The alignment of the column.
+     */
+    public ColumnAlignment getAlignment() {
+        return alignment;
+    }
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/ColumnType.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/ColumnType.java
new file mode 100644
index 000000000..4a7b5e48a
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/ColumnType.java
@@ -0,0 +1,30 @@
+package com.graphhopper.jsprit.core.reporting.columndefinition;
+
+/**
+ * Column type.
+ *
+ * @author balage
+ *
+ * @param <T>
+ *            The object type it accepts.
+ */
+public interface ColumnType<T> {
+    /**
+     * Converts the data into String.
+     * 
+     * @param data
+     *            the data to convert.
+     * @return The converted data.
+     */
+    public String convert(Object data);
+
+    /**
+     * Checks if the given data is acceptable for the type. (Mostly by class
+     * type.)
+     * 
+     * @param data
+     *            the data to check
+     * @return True if the data can be converted by this implementation.
+     */
+    public boolean accepts(Object data);
+}
\ No newline at end of file
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/DoubleColumnType.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/DoubleColumnType.java
new file mode 100644
index 000000000..0e73a08f2
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/DoubleColumnType.java
@@ -0,0 +1,82 @@
+package com.graphhopper.jsprit.core.reporting.columndefinition;
+
+/**
+ * A column type with double values.
+ * <p>
+ * The number of decimal places could be configured.
+ * </p>
+ *
+ * @author balage
+ *
+ */
+public class DoubleColumnType extends AbstractColumnType<Double> {
+
+    // The number of displayed decimal places
+    private int decimals = 2;
+
+    /**
+     * Konstructor. The column will use the default values for null and the
+     * significant decimal places.
+     */
+    public DoubleColumnType() {
+        super();
+    }
+
+    /**
+     * Konstructor. The column will use the default values for the significant
+     * decimal places.
+     *
+     * @param nullValue
+     *            The text representation for null values.
+     */
+    public DoubleColumnType(String nullValue) {
+        super(nullValue);
+    }
+
+    /**
+     * Konstructor. The column will use the default values for null.
+     *
+     * @param decimals The number of decimal places to display.
+     * @throws IllegalArgumentException If the parameter is negative.
+     */
+    public DoubleColumnType(int decimals) {
+        super();
+        if (decimals < 0) {
+            throw new IllegalArgumentException("Decimal places should be 0 or more.");
+        }
+        this.decimals = decimals;
+    }
+
+    /**
+     * Konstructor.
+     *
+     * @param decimals
+     *            The number of decimal places to display.
+     * @param nullValue
+     *            The text representation for null values.
+     * @throws IllegalArgumentException
+     *             If the parameter is negative.
+     */
+    public DoubleColumnType(int decimals, String nullValue) {
+        super(nullValue);
+        if (decimals < 0) {
+            throw new IllegalArgumentException("Decimal places should be 0 or more.");
+        }
+        this.decimals = decimals;
+    }
+
+    @Override
+    protected String convertNotNull(Double data) {
+        return String.format("%50." + decimals + "f", data).trim();
+    }
+
+    /**
+     * {@inheritDoc} Only accepts Double values.
+     */
+    @Override
+    public boolean accepts(Object data) {
+        return data instanceof Double;
+    }
+
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/HumanReadableEnabled.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/HumanReadableEnabled.java
new file mode 100644
index 000000000..f8b427a66
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/HumanReadableEnabled.java
@@ -0,0 +1,27 @@
+package com.graphhopper.jsprit.core.reporting.columndefinition;
+
+/**
+ * Interface for columns with human readable formats.
+ *
+ * @author balage
+ *
+ * @param <T>
+ *            The type of the class itself. (Self-reference)
+ */
+public interface HumanReadableEnabled<T extends HumanReadableEnabled<T>> {
+    /**
+     * Sets the formatter.
+     * 
+     * @param formatter
+     *            The formatter.
+     * @return The object itself.
+     */
+    public T withFormatter(HumanReadableTimeFormatter formatter);
+
+    /**
+     * Marks the column human readable.
+     * 
+     * @return The object itself.
+     */
+    public T asHumanReadable();
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/HumanReadableTimeFormatter.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/HumanReadableTimeFormatter.java
new file mode 100644
index 000000000..122673a6a
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/HumanReadableTimeFormatter.java
@@ -0,0 +1,102 @@
+package com.graphhopper.jsprit.core.reporting.columndefinition;
+
+import java.time.LocalDate;
+import java.time.LocalDateTime;
+import java.time.LocalTime;
+import java.time.format.DateTimeFormatter;
+import java.time.temporal.ChronoUnit;
+
+/**
+ * Time value or duration formatter for human readable format.
+ * <p>
+ * The formatter uses the {@linkplain DateTimeFormatter} for time value to
+ * string formatting. The default format is the standard ISO time format (
+ * <code>"HH:mm:ss"</code>). If the input long value is X, the time value is
+ * calculated by adding X of the units to the origin. The default value for
+ * origin is midnight (00:00) of the current day (note, that the default
+ * formatting ignores the date value), the default unit is
+ * {@linkplain ChronoUnit#SECONDS}.
+ * </p>
+ *
+ * @author balage
+ *
+ */
+public class HumanReadableTimeFormatter {
+
+    // Default origin
+    public static final LocalDateTime DEFAULT_ORIGIN = LocalDateTime.of(LocalDate.now(), LocalTime.MIDNIGHT);
+
+    // The formatter
+    private DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("HH:mm:ss");
+    // The origin
+    private LocalDateTime origin = DEFAULT_ORIGIN;
+    // The time unit
+    private ChronoUnit unit = ChronoUnit.SECONDS;
+
+    /**
+     * Constructor with default settings. See
+     * {@linkplain HumanReadableTimeFormatter} for default values.
+     */
+    public HumanReadableTimeFormatter() {
+    }
+
+    /**
+     * Constructor with time mapping values, but with default formatting.
+     *
+     * @param origin
+     *            The origin data and time of the time mapping. (Note that with
+     *            default formatter, the date part is ignored.)
+     * @param unit
+     *            The unit used to map the numerical value to the time value.
+     */
+    public HumanReadableTimeFormatter(LocalDateTime origin, ChronoUnit unit) {
+        this.origin = origin;
+        this.unit = unit;
+    }
+
+    /**
+     * Constructor with user-defined formatting.
+     *
+     * @param dateFormatter
+     *            The date formatter.
+     */
+    public HumanReadableTimeFormatter(DateTimeFormatter dateFormatter) {
+        this.dateFormatter = dateFormatter;
+    }
+
+    /**
+     * Constructor with both time mapping values and user-defined formatting.
+     *
+     * @param dateFormatter
+     *            The date formatter.
+     * @param origin
+     *            The origin data and time of the time mapping.
+     * @param unit
+     *            The unit used to map the numerical value to the time value.
+     */
+    public HumanReadableTimeFormatter(DateTimeFormatter dateFormatter, LocalDateTime origin, ChronoUnit unit) {
+        this.dateFormatter = dateFormatter;
+        this.origin = origin;
+        this.unit = unit;
+    }
+
+    /**
+     * Formats a numerical value into a human readable time value.
+     * <p>
+     * First a time value is calculated by adding <code>timeValue</code> of the
+     * units to the origin. Then the time value is formatted by the formatter.
+     * </p>
+     *
+     * @param timeValue
+     *            The value to convert.
+     * @return The converted value.
+     */
+    public String format(Long timeValue) {
+        if (timeValue == null) {
+            return null;
+        } else {
+            LocalDateTime dt = origin.plus(timeValue, unit);
+            return dateFormatter.format(dt);
+        }
+    }
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/IntColumnType.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/IntColumnType.java
new file mode 100644
index 000000000..305d08911
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/IntColumnType.java
@@ -0,0 +1,41 @@
+package com.graphhopper.jsprit.core.reporting.columndefinition;
+
+/**
+ * A column type with integer (4 byte) values.
+ *
+ * @author balage
+ *
+ */
+public class IntColumnType extends AbstractColumnType<Integer> {
+
+    /**
+     * Konstructor. The column will use the default values for null.
+     */
+    public IntColumnType() {
+        super();
+    }
+
+    /**
+     * Konstructor.
+     *
+     * @param nullValue
+     *            The text representation for null values.
+     */
+    public IntColumnType(String nullValue) {
+        super(nullValue);
+    }
+
+    @Override
+    protected String convertNotNull(Integer data) {
+        return data.toString();
+    }
+
+    /**
+     * {@inheritDoc} Only accepts Integer values.
+     */
+    @Override
+    public boolean accepts(Object data) {
+        return data instanceof Integer;
+    }
+
+}
\ No newline at end of file
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/LongColumnType.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/LongColumnType.java
new file mode 100644
index 000000000..5be5b1557
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/LongColumnType.java
@@ -0,0 +1,42 @@
+package com.graphhopper.jsprit.core.reporting.columndefinition;
+
+/**
+ * A column type with long (8-byte) values.
+ *
+ * @author balage
+ *
+ */
+public class LongColumnType extends AbstractColumnType<Long> {
+
+    /**
+     * Konstructor. The column will use the default values for null.
+     */
+    public LongColumnType() {
+        super();
+    }
+
+    /**
+     * Konstructor.
+     *
+     * @param nullValue
+     *            The text representation for null values.
+     */
+    public LongColumnType(String nullValue) {
+        super(nullValue);
+    }
+
+    @Override
+    protected String convertNotNull(Long data) {
+        return data.toString();
+    }
+
+    /**
+     * {@inheritDoc} Only accepts Long values.
+     */
+    @Override
+    public boolean accepts(Object data) {
+        return data instanceof Long;
+    }
+
+
+}
\ No newline at end of file
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/SolutionPrintColumnLists.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/SolutionPrintColumnLists.java
new file mode 100644
index 000000000..133768628
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/SolutionPrintColumnLists.java
@@ -0,0 +1,196 @@
+package com.graphhopper.jsprit.core.reporting.columndefinition;
+
+import java.util.ArrayList;
+import java.util.EnumMap;
+import java.util.List;
+
+import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
+import com.graphhopper.jsprit.core.reporting.PrinterColumnList;
+import com.graphhopper.jsprit.core.reporting.route.ActivityCostPrinterColumn;
+import com.graphhopper.jsprit.core.reporting.route.ActivityDurationPrinterColumn;
+import com.graphhopper.jsprit.core.reporting.route.ActivityLoadChangePrinterColumn;
+import com.graphhopper.jsprit.core.reporting.route.ActivityTypePrinterColumn;
+import com.graphhopper.jsprit.core.reporting.route.ArrivalTimePrinterColumn;
+import com.graphhopper.jsprit.core.reporting.route.EndTimePrinterColumn;
+import com.graphhopper.jsprit.core.reporting.route.JobNamePrinterColumn;
+import com.graphhopper.jsprit.core.reporting.route.JobPriorityPrinterColumn;
+import com.graphhopper.jsprit.core.reporting.route.JobTypePrinterColumn;
+import com.graphhopper.jsprit.core.reporting.route.LoacationPrinterColumn;
+import com.graphhopper.jsprit.core.reporting.route.OperationDurationPrinterColumn;
+import com.graphhopper.jsprit.core.reporting.route.RouteCostPrinterColumn;
+import com.graphhopper.jsprit.core.reporting.route.RouteLoadPrinterColumn;
+import com.graphhopper.jsprit.core.reporting.route.RouteNumberPrinterColumn;
+import com.graphhopper.jsprit.core.reporting.route.RoutePrinterContext;
+import com.graphhopper.jsprit.core.reporting.route.SelectedTimeWindowPrinterColumn;
+import com.graphhopper.jsprit.core.reporting.route.StartTimePrinterColumn;
+import com.graphhopper.jsprit.core.reporting.route.TimeWindowsPrinterColumn;
+import com.graphhopper.jsprit.core.reporting.route.TransportCostPrinterColumn;
+import com.graphhopper.jsprit.core.reporting.route.TravelDurationPrinterColumn;
+import com.graphhopper.jsprit.core.reporting.route.VehicleNamePrinterColumn;
+import com.graphhopper.jsprit.core.reporting.route.WaitingDurationPrinterColumn;
+
+/**
+ * Utility class to provide predefined column lists for Solution printing.
+ *
+ * @author balage
+ *
+ */
+public class SolutionPrintColumnLists {
+
+    /**
+     * The predefined column sets.
+     *
+     * @author balage
+     *
+     */
+    public enum PredefinedList {
+        /**
+         * A minimal column set.
+         */
+        MINIMAL,
+        /**
+         * A general, most often used column set.
+         */
+        DEFAULT,
+        /**
+         * A verbose column set containing all columns.
+         */
+        VERBOSE
+    }
+
+    private static final EnumMap<PredefinedList, List<Class<? extends AbstractPrinterColumn<RoutePrinterContext, ?, ?>>>> COLUMNS;
+
+    static {
+        COLUMNS = new EnumMap<>(PredefinedList.class);
+        List<Class<? extends AbstractPrinterColumn<RoutePrinterContext, ?, ?>>> minimalSet = new ArrayList<>();
+        minimalSet.add(RouteNumberPrinterColumn.class);
+        minimalSet.add(VehicleNamePrinterColumn.class);
+        minimalSet.add(ActivityTypePrinterColumn.class);
+        minimalSet.add(JobNamePrinterColumn.class);
+        minimalSet.add(ArrivalTimePrinterColumn.class);
+        minimalSet.add(EndTimePrinterColumn.class);
+        minimalSet.add(RouteCostPrinterColumn.class);
+        COLUMNS.put(PredefinedList.MINIMAL, minimalSet);
+
+        List<Class<? extends AbstractPrinterColumn<RoutePrinterContext, ?, ?>>> defaultSet = new ArrayList<>();
+        defaultSet.add(RouteNumberPrinterColumn.class);
+        defaultSet.add(VehicleNamePrinterColumn.class);
+        defaultSet.add(ActivityTypePrinterColumn.class);
+        defaultSet.add(JobNamePrinterColumn.class);
+        defaultSet.add(LoacationPrinterColumn.class);
+        defaultSet.add(ActivityLoadChangePrinterColumn.class);
+        defaultSet.add(OperationDurationPrinterColumn.class);
+        defaultSet.add(ArrivalTimePrinterColumn.class);
+        defaultSet.add(StartTimePrinterColumn.class);
+        defaultSet.add(EndTimePrinterColumn.class);
+        defaultSet.add(ActivityCostPrinterColumn.class);
+        defaultSet.add(RouteCostPrinterColumn.class);
+        COLUMNS.put(PredefinedList.DEFAULT, defaultSet);
+
+        List<Class<? extends AbstractPrinterColumn<RoutePrinterContext, ?, ?>>> verboseSet = new ArrayList<>();
+        verboseSet.add(RouteNumberPrinterColumn.class);
+        verboseSet.add(VehicleNamePrinterColumn.class);
+        verboseSet.add(ActivityTypePrinterColumn.class);
+
+        verboseSet.add(JobNamePrinterColumn.class);
+        verboseSet.add(JobTypePrinterColumn.class);
+        verboseSet.add(JobPriorityPrinterColumn.class);
+
+        verboseSet.add(LoacationPrinterColumn.class);
+        verboseSet.add(ActivityLoadChangePrinterColumn.class);
+        verboseSet.add(RouteLoadPrinterColumn.class);
+        verboseSet.add(TimeWindowsPrinterColumn.class);
+
+        verboseSet.add(OperationDurationPrinterColumn.class);
+        verboseSet.add(TravelDurationPrinterColumn.class);
+        verboseSet.add(WaitingDurationPrinterColumn.class);
+        verboseSet.add(ActivityDurationPrinterColumn.class);
+
+        verboseSet.add(ArrivalTimePrinterColumn.class);
+        verboseSet.add(StartTimePrinterColumn.class);
+        verboseSet.add(EndTimePrinterColumn.class);
+        verboseSet.add(SelectedTimeWindowPrinterColumn.class);
+
+        verboseSet.add(TransportCostPrinterColumn.class);
+        verboseSet.add(ActivityCostPrinterColumn.class);
+        verboseSet.add(RouteCostPrinterColumn.class);
+
+        COLUMNS.put(PredefinedList.VERBOSE, verboseSet);
+    }
+
+    /**
+     * Returns the predefined column set with all time, time window and duration
+     * columns printed as numbers.
+     *
+     * @param listType
+     *            The predefined list id.
+     * @return The column list containing the predefined columns.
+     */
+    public static PrinterColumnList<RoutePrinterContext> getNumeric(PredefinedList listType) {
+        return getList(listType, false, null);
+    }
+
+    /**
+     * Returns the predefined column set with all time, time window and duration
+     * columns printed with human readable format, using default formatting.
+     *
+     * @param listType
+     *            The predefined list id.
+     * @return The column list containing the predefined columns.
+     */
+    public static PrinterColumnList<RoutePrinterContext> getHumanReadable(PredefinedList listType) {
+        return getList(listType, true, null);
+    }
+
+    /**
+     * Returns the predefined column set with all time, time window and duration
+     * columns printed with human readable format, using the provided formatter.
+     *
+     * @param listType
+     *            The predefined list id.
+     * @param timeFormatter
+     *            the time formatter to use
+     * @return The column list containing the predefined columns.
+     */
+    public static PrinterColumnList<RoutePrinterContext> getHumanReadable(PredefinedList listType,
+                    HumanReadableTimeFormatter timeFormatter) {
+        return getList(listType, true, timeFormatter);
+    }
+
+    /**
+     * Generates the list.
+     *
+     * @param listType
+     *            The id of the list.
+     * @param humanReadable
+     *            Whether human readable format should be used
+     * @param timeFormatter
+     *            The formatter to use (if null, the default will be used)
+     * @return The generated column list.
+     */
+    private static PrinterColumnList<RoutePrinterContext> getList(PredefinedList listType, boolean humanReadable,
+                    HumanReadableTimeFormatter timeFormatter) {
+        PrinterColumnList<RoutePrinterContext> res = new PrinterColumnList<>();
+
+        for (Class<? extends AbstractPrinterColumn<RoutePrinterContext, ?, ?>> c : COLUMNS.get(listType)) {
+            try {
+                AbstractPrinterColumn<RoutePrinterContext, ?, ?> col = c.newInstance();
+                if (humanReadable && col instanceof HumanReadableEnabled) {
+                    HumanReadableEnabled<?> hrCol = (HumanReadableEnabled<?>) col;
+                    hrCol.asHumanReadable();
+                    if (timeFormatter != null) {
+                        hrCol.withFormatter(timeFormatter);
+                    }
+                }
+                res.addColumn(col);
+            } catch (InstantiationException | IllegalAccessException e) {
+                // Technically you can't get here as long as all column
+                // implementation has default constructor
+                throw new IllegalStateException(e);
+            }
+        }
+
+        return res;
+    }
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/StringColumnType.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/StringColumnType.java
new file mode 100644
index 000000000..4468eb336
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/StringColumnType.java
@@ -0,0 +1,42 @@
+package com.graphhopper.jsprit.core.reporting.columndefinition;
+
+/**
+ * A column type for any values.
+ *
+ * @author balage
+ *
+ */
+public class StringColumnType extends AbstractColumnType<Object> {
+
+    /**
+     * Konstructor. The column will use the default values for null.
+     */
+    public StringColumnType() {
+        super();
+    }
+
+    /**
+     * Konstructor.
+     *
+     * @param nullValue
+     *            The text representation for null values.
+     */
+    public StringColumnType(String nullValue) {
+        super(nullValue);
+    }
+
+    @Override
+    protected String convertNotNull(Object data) {
+        return data.toString();
+    }
+
+    /**
+     * {@inheritDoc} Accepts any type of values (uses
+     * {@linkplain Object#toString()}).
+     */
+    @Override
+    public boolean accepts(Object data) {
+        return true;
+    }
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractCostPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractCostPrinterColumn.java
index 9a6e8c246..d12b6e8d6 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractCostPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractCostPrinterColumn.java
@@ -3,27 +3,36 @@
 import java.util.function.Consumer;
 
 import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.Alignment;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.IntColumnType;
-
-public abstract class AbstractCostPrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, Integer>
-                implements CostAndTimeExtractor {
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnAlignment;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
+import com.graphhopper.jsprit.core.reporting.columndefinition.IntColumnType;
+
+/**
+ * Abstract base class for cost calculators.
+ *
+ * <p>
+ * this implementation only defines the ColumnDefinition as a right aligned
+ * integer column.
+ * </p>
+ *
+ * @author balage
+ *
+ */
+public abstract class AbstractCostPrinterColumn
+extends AbstractPrinterColumn<RoutePrinterContext, Integer, AbstractCostPrinterColumn>
+implements CostAndTimeExtractor {
 
     public AbstractCostPrinterColumn() {
         super();
     }
 
-    public AbstractCostPrinterColumn(Consumer<Builder> decorator) {
+    public AbstractCostPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
 
     @Override
     public ColumnDefinition.Builder getColumnBuilder() {
-        return new ColumnDefinition.Builder(new IntColumnType(), getTitle()).withAlignment(Alignment.RIGHT);
+        return new ColumnDefinition.Builder(new IntColumnType()).withAlignment(ColumnAlignment.RIGHT);
     }
 
-    protected abstract String getTitle();
-
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractDurationPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractDurationPrinterColumn.java
index 11a1f7cc0..8f1122da9 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractDurationPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractDurationPrinterColumn.java
@@ -2,18 +2,35 @@
 
 import java.util.function.Consumer;
 
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
+import com.graphhopper.jsprit.core.reporting.columndefinition.HumanReadableTimeFormatter;
 
+/**
+ * Abstract base class for duration columns.
+ *
+ * @author balage
+ *
+ * @param <T>
+ *            Self reference.
+ * @See {@linkplain AbstractTimePrinterColumn}
+ */
 public abstract class AbstractDurationPrinterColumn<T extends AbstractDurationPrinterColumn<T>>
-                extends AbstractTimePrinterColumn<T> {
+extends AbstractTimePrinterColumn<T> {
 
+    /**
+     * Constructor to define a numeric format column.
+     */
     public AbstractDurationPrinterColumn() {
         this(null);
     }
 
-    public AbstractDurationPrinterColumn(Consumer<Builder> decorator) {
+    /**
+     * Constructor to define a numeric format column, with a post creation
+     * decorator provided.
+     */
+    public AbstractDurationPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
-        withFormatter(new HumanReadableDurationFormatter());
+        withFormatter(new HumanReadableTimeFormatter());
     }
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractSizeDimensionPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractSizeDimensionPrinterColumn.java
index 525081a29..999532a84 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractSizeDimensionPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractSizeDimensionPrinterColumn.java
@@ -7,25 +7,52 @@
 import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.StringColumnType;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
+import com.graphhopper.jsprit.core.reporting.columndefinition.HumanReadableTimeFormatter;
+import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
 
-public abstract class AbstractSizeDimensionPrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, String> {
+/**
+ * Abstract base class for size columns.
+ *
+ * <p>
+ * The representation of a size is the dimension values listed comma separated
+ * and wrapped by brackets. (For example: [2, 0, -1])
+ * </p>
+ *
+ * @author balage
+ *
+ * @See {@linkplain HumanReadableTimeFormatter}
+ */
+public abstract class AbstractSizeDimensionPrinterColumn
+extends AbstractPrinterColumn<RoutePrinterContext, String, AbstractSizeDimensionPrinterColumn> {
 
+    /**
+     * Constructor.
+     */
     public AbstractSizeDimensionPrinterColumn() {
         super();
     }
 
-    public AbstractSizeDimensionPrinterColumn(Consumer<Builder> decorator) {
+    /**
+     * Constructor with a post creation decorator provided.
+     */
+    public AbstractSizeDimensionPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
 
     @Override
     public ColumnDefinition.Builder getColumnBuilder() {
-        return new ColumnDefinition.Builder(new StringColumnType(), getTitle());
+        return new ColumnDefinition.Builder(new StringColumnType());
     }
 
+    /**
+     * {@inheritDoc}
+     *
+     * <p>
+     * The result is a string representation of the size (the dimension values
+     * listed comma separated and wrapped by brackets) or null.
+     * </p>
+     */
     @Override
     public String getData(RoutePrinterContext context) {
         SizeDimension sd = getSizeDimension(context);
@@ -37,8 +64,13 @@ public String getData(RoutePrinterContext context) {
         }
     }
 
-    protected abstract String getTitle();
-
+    /**
+     * Extracts the size dimension.
+     *
+     * @param context
+     *            The context.
+     * @return The size dimension or null.
+     */
     protected abstract SizeDimension getSizeDimension(RoutePrinterContext context);
 
     protected SizeDimension calculateInitialLoad(RoutePrinterContext context) {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractTimePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractTimePrinterColumn.java
index 4ef62e0f0..14639f364 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractTimePrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractTimePrinterColumn.java
@@ -3,31 +3,68 @@
 import java.util.function.Consumer;
 
 import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.StringColumnType;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
+import com.graphhopper.jsprit.core.reporting.columndefinition.HumanReadableEnabled;
+import com.graphhopper.jsprit.core.reporting.columndefinition.HumanReadableTimeFormatter;
+import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
 
+/**
+ * Abstract base class for time and (technically) duration columns.
+ *
+ * <p>
+ * Each columns derived from this abstract base has two variants: a numerical
+ * (an integer value) and a human readable. The numerical value displays the
+ * integer value representing the time values internally. The human readable
+ * value converts this value into a calendar (date and time) value.
+ * </p>
+ *
+ * @author balage
+ *
+ * @param <T>
+ *            Self reference.
+ * @See {@linkplain HumanReadableTimeFormatter}
+ */
 public abstract class AbstractTimePrinterColumn<T extends AbstractTimePrinterColumn<T>>
-extends AbstractPrinterColumn<RoutePrinterContext, String> {
+extends AbstractPrinterColumn<RoutePrinterContext, String, AbstractTimePrinterColumn<T>>
+implements HumanReadableEnabled<T> {
 
+    // The time formatter to use (only used when humanReadable flag is true)
     private HumanReadableTimeFormatter formatter;
+    // Whether to use human readable form
     private boolean humanReadable = false;
 
+    /**
+     * Constructor to define a numeric format column.
+     */
     public AbstractTimePrinterColumn() {
         this(null);
     }
 
-    public AbstractTimePrinterColumn(Consumer<Builder> decorator) {
+    /**
+     * Constructor to define a numeric format column, with a post creation
+     * decorator provided.
+     */
+    public AbstractTimePrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
         formatter = new HumanReadableTimeFormatter();
     }
 
+    /**
+     * {@inheritDoc}
+     *
+     */
+    @Override
     @SuppressWarnings("unchecked")
     public T withFormatter(HumanReadableTimeFormatter formatter) {
         this.formatter = formatter;
         return (T) this;
     }
 
+    /**
+     * {@inheritDoc}
+     *
+     */
+    @Override
     @SuppressWarnings("unchecked")
     public T asHumanReadable() {
         this.humanReadable = true;
@@ -35,11 +72,34 @@ public T asHumanReadable() {
     }
 
 
+    /**
+     * {@inheritDoc}
+     *
+     * <p>
+     * The column builder returned will be a string column with the null value
+     * represented by a hyphen ("-").
+     * </p>
+     *
+     */
     @Override
     public ColumnDefinition.Builder getColumnBuilder() {
-        return new ColumnDefinition.Builder(new StringColumnType("-"), getTitle() + (humanReadable ? " (H)" : ""));
+        return new ColumnDefinition.Builder(new StringColumnType("-"));
     }
 
+    /**
+     * {@inheritDoc}
+     *
+     * <p>
+     * The implementation delegates the value extracting to the abstract method
+     * {@linkplain #getValue(RoutePrinterContext)}.
+     * <p>
+     * <p>
+     * If the value is null, returns null, otherwise it returns the string
+     * representation of the numeric value or the human readable format based on
+     * the humanReadable flag.
+     * </p>
+     *
+     */
     @Override
     public String getData(RoutePrinterContext context) {
         Long timeValue = getValue(context);
@@ -53,8 +113,13 @@ public String getData(RoutePrinterContext context) {
         }
     }
 
+    /**
+     * Extracts the numerical value for this time or duration column.
+     *
+     * @param context
+     *            The context.
+     * @return The numerical value or null.
+     */
     protected abstract Long getValue(RoutePrinterContext context);
 
-    protected abstract String getTitle();
-
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractTimeWindowPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractTimeWindowPrinterColumn.java
index bf8b54f48..7a3dfde8f 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractTimeWindowPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractTimeWindowPrinterColumn.java
@@ -6,31 +6,61 @@
 
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.StringColumnType;
-
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
+import com.graphhopper.jsprit.core.reporting.columndefinition.HumanReadableEnabled;
+import com.graphhopper.jsprit.core.reporting.columndefinition.HumanReadableTimeFormatter;
+import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
+
+/**
+ * Abstract base class for time window columns.
+ *
+ * <p>
+ * Each columns derived from this abstract base has two variants: a numerical
+ * (an integer value) and a human readable. The numerical value displays the
+ * integer value pair representing the time windows, the same the algorithm used
+ * internally. The human readable value converts this value into a calendar
+ * (date and time) value pair.
+ * </p>
+ *
+ * @author balage
+ *
+ * @param <T>
+ *            Self reference.
+ * @See {@linkplain HumanReadableTimeFormatter}
+ */
 public abstract class AbstractTimeWindowPrinterColumn<T extends AbstractTimeWindowPrinterColumn<T>>
-extends AbstractPrinterColumn<RoutePrinterContext, String> {
+extends AbstractPrinterColumn<RoutePrinterContext, String, AbstractTimeWindowPrinterColumn<T>>
+implements HumanReadableEnabled<T> {
 
+    // The time formatter to use (only used when humanReadable flag is true)
     private HumanReadableTimeFormatter formatter;
+    // Whether to use human readable form
     private boolean humanReadable = false;
 
+    /**
+     * Constructor to define a numeric format column.
+     */
     public AbstractTimeWindowPrinterColumn() {
         this(null);
     }
 
-    public AbstractTimeWindowPrinterColumn(Consumer<Builder> decorator) {
+    /**
+     * Constructor to define a numeric format column, with a post creation
+     * decorator provided.
+     */
+    public AbstractTimeWindowPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
         formatter = new HumanReadableTimeFormatter();
     }
 
+    @Override
     @SuppressWarnings("unchecked")
     public T withFormatter(HumanReadableTimeFormatter formatter) {
         this.formatter = formatter;
         return (T) this;
     }
 
+    @Override
     @SuppressWarnings("unchecked")
     public T asHumanReadable() {
         this.humanReadable = true;
@@ -40,9 +70,23 @@ public T asHumanReadable() {
 
     @Override
     public ColumnDefinition.Builder getColumnBuilder() {
-        return new ColumnDefinition.Builder(new StringColumnType("-"), getTitle() + (humanReadable ? " (H)" : ""));
+        return new ColumnDefinition.Builder(new StringColumnType("-"));
     }
 
+    /**
+     * {@inheritDoc}
+     *
+     * <p>
+     * The implementation delegates the value extracting to the abstract method
+     * {@linkplain #getValue(RoutePrinterContext)}.
+     * <p>
+     * <p>
+     * If the value is null or empty, returns null, otherwise it returns the
+     * string representation of the numeric value or the human readable format
+     * based on the humanReadable flag.
+     * </p>
+     *
+     */
     @Override
     public String getData(RoutePrinterContext context) {
         Collection<TimeWindow> timeWindows = getValue(context);
@@ -52,6 +96,20 @@ public String getData(RoutePrinterContext context) {
         return timeWindows.stream().map(tw -> formatTimeWindow(tw)).collect(Collectors.joining());
     }
 
+    /**
+     * Formats the time window.
+     *
+     * <p>
+     * The implementation returns the two (start, end) values sepratated by
+     * hyphen (-) and wrapped within brackets. When the end value is
+     * {@linkplain Double#MAX_VALUE} it omits the value indicating open
+     * interval.
+     * </p>
+     *
+     * @param tw
+     *            The time window to format.
+     * @return The string representation of the time window.
+     */
     protected String formatTimeWindow(TimeWindow tw) {
         String res = "";
         if (humanReadable) {
@@ -75,8 +133,13 @@ protected String formatTimeWindow(TimeWindow tw) {
         return res;
     }
 
+    /**
+     * Extracts the collection of time windows from the context.
+     * 
+     * @param context
+     *            The context.
+     * @return The collection of time windows.
+     */
     protected abstract Collection<TimeWindow> getValue(RoutePrinterContext context);
 
-    protected abstract String getTitle();
-
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityCostPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityCostPrinterColumn.java
index 6e0d53ae3..e94fae46f 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityCostPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityCostPrinterColumn.java
@@ -2,21 +2,33 @@
 
 import java.util.function.Consumer;
 
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
-
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
+
+/**
+ * Cost of the activity.
+ *
+ * @author balage
+ *
+ */
 public class ActivityCostPrinterColumn extends AbstractCostPrinterColumn {
 
+    /**
+     * Constructor.
+     */
     public ActivityCostPrinterColumn() {
         super();
     }
 
-    public ActivityCostPrinterColumn(Consumer<Builder> decorator) {
+    /**
+     * Constructor with a post creation decorator provided.
+     */
+    public ActivityCostPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
 
 
     @Override
-    protected String getTitle() {
+    protected String getDefaultTitle() {
         return "actCost";
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityDurationPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityDurationPrinterColumn.java
index a9ba08517..383c6f169 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityDurationPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityDurationPrinterColumn.java
@@ -4,24 +4,50 @@
 
 import com.graphhopper.jsprit.core.problem.solution.route.activity.Start;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
 
+/**
+ * Activity duration column.
+ * <p>
+ * The activity duration is the sum of the activity operation (service) time and
+ * the transport time to the location.
+ * </p>
+ * <p>
+ * This column is stateful and stores the previous activity.
+ * </p>
+ *
+ * @author balage
+ *
+ * @see {@linkplain ArrivalTimePrinterColumn}
+ * @see {@linkplain StartTimePrinterColumn}
+ * @see {@linkplain EndTimePrinterColumn}
+ * @see {@linkplain TravelDurationPrinterColumn}
+ * @see {@linkplain WaitingDurationPrinterColumn}
+ * @see {@linkplain OperationDurationPrinterColumn}
+ */
 public class ActivityDurationPrinterColumn extends AbstractDurationPrinterColumn<ActivityDurationPrinterColumn>
 implements CostAndTimeExtractor {
 
+    // The previous activity
     private TourActivity prevAct;
 
+    /**
+     * Constructor.
+     */
     public ActivityDurationPrinterColumn() {
         super();
     }
 
-    public ActivityDurationPrinterColumn(Consumer<Builder> decorator) {
+    /**
+     * Constructor with a post creation decorator provided.
+     */
+    public ActivityDurationPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
 
 
     @Override
-    protected String getTitle() {
+    protected String getDefaultTitle() {
         return "duration";
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityLoadChangePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityLoadChangePrinterColumn.java
index fa20d4ea5..9aaceaa90 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityLoadChangePrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityLoadChangePrinterColumn.java
@@ -5,28 +5,52 @@
 import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.Start;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
 
+/**
+ * The load change value (signed size) of the activity.
+ * 
+ * <p>
+ * If the activity is a route start, the returned value is the initial load,
+ * otherwise the loadChange value of the activity.
+ * </p>
+ *
+ * @author balage
+ *
+ */
 public class ActivityLoadChangePrinterColumn extends AbstractSizeDimensionPrinterColumn {
 
+    /**
+     * Constructor.
+     */
     public ActivityLoadChangePrinterColumn() {
         super();
     }
 
-    public ActivityLoadChangePrinterColumn(Consumer<Builder> decorator) {
+    /**
+     * Constructor with a post creation decorator provided.
+     */
+    public ActivityLoadChangePrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
 
     @Override
-    public Builder getColumnBuilder() {
+    public ColumnDefinition.Builder getColumnBuilder() {
         return super.getColumnBuilder().withMinWidth(10);
     }
 
     @Override
-    protected String getTitle() {
+    protected String getDefaultTitle() {
         return "load change";
     }
 
+    /**
+     * {@inheritDoc}
+     * <p>
+     * If the activity is a route start, the returned value is the initial load,
+     * otherwise the loadChange value of the activity.
+     * </p>
+     */
     @Override
     protected SizeDimension getSizeDimension(RoutePrinterContext context) {
         TourActivity act = context.getActivity();
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityTypePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityTypePrinterColumn.java
index 7a8ee816d..d2e87c0d1 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityTypePrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityTypePrinterColumn.java
@@ -4,23 +4,34 @@
 
 import com.graphhopper.jsprit.core.problem.solution.route.activity.AbstractActivity;
 import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.StringColumnType;
-
-public class ActivityTypePrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, String> {
-
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
+import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
+
+/**
+ * The type of the activity.
+ *
+ * @author balage
+ *
+ */
+public class ActivityTypePrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, String, ActivityTypePrinterColumn> {
+
+    /**
+     * Constructor.
+     */
     public ActivityTypePrinterColumn() {
         super();
     }
 
-    public ActivityTypePrinterColumn(Consumer<Builder> decorator) {
+    /**
+     * Constructor with a post creation decorator provided.
+     */
+    public ActivityTypePrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
 
     @Override
     public ColumnDefinition.Builder getColumnBuilder() {
-        return new ColumnDefinition.Builder(new StringColumnType(), "activity");
+        return new ColumnDefinition.Builder(new StringColumnType());
     }
 
     @Override
@@ -28,4 +39,9 @@ public String getData(RoutePrinterContext context) {
         return ((AbstractActivity) context.getActivity()).getType();
     }
 
+    @Override
+    protected String getDefaultTitle() {
+        return "activity";
+    }
+
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ArrivalTimePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ArrivalTimePrinterColumn.java
index 64a62ae15..b4fb6f82f 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ArrivalTimePrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ArrivalTimePrinterColumn.java
@@ -4,21 +4,44 @@
 
 import com.graphhopper.jsprit.core.problem.solution.route.activity.Start;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
-
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
+
+/**
+ * Arrival time of the activity.
+ * <p>
+ * For route start the value is undefined (null), for other activities, it is
+ * the earliest time the location of the activity is reached. (Note, that it is
+ * not the time the activity is started, there may be an idle time before.)
+ * </p>
+ *
+ * @author balage
+ *
+ * @see {@linkplain StartTimePrinterColumn}
+ * @see {@linkplain EndTimePrinterColumn}
+ * @see {@linkplain TravelDurationPrinterColumn}
+ * @see {@linkplain WaitingDurationPrinterColumn}
+ * @see {@linkplain OperationDurationPrinterColumn}
+ * @see {@linkplain ActivityDurationPrinterColumn}
+ */
 public class ArrivalTimePrinterColumn extends AbstractTimePrinterColumn<ArrivalTimePrinterColumn> {
 
+    /**
+     * Constructor.
+     */
     public ArrivalTimePrinterColumn() {
         super();
     }
 
-    public ArrivalTimePrinterColumn(Consumer<Builder> decorator) {
+    /**
+     * Constructor with a post creation decorator provided.
+     */
+    public ArrivalTimePrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
 
 
     @Override
-    protected String getTitle() {
+    protected String getDefaultTitle() {
         return "arrTime";
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/CostAndTimeExtractor.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/CostAndTimeExtractor.java
index 987ac4c0b..e374708e6 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/CostAndTimeExtractor.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/CostAndTimeExtractor.java
@@ -2,13 +2,33 @@
 
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 
+/**
+ * Utility interface for extracting cost and time values from problem.
+ *
+ * @author balage
+ *
+ */
 public interface CostAndTimeExtractor {
 
+    /**
+     * Returns the activity cost extracted from the context.
+     *
+     * @param context
+     *            The context.
+     * @return The activity cost.
+     */
     default double getActivityCost(RoutePrinterContext context) {
         return context.getProblem().getActivityCosts().getActivityCost(context.getActivity(),
                         context.getActivity().getArrTime(), context.getRoute().getDriver(), context.getRoute().getVehicle());
     }
 
+    /**
+     * Returns the transport cost extracted from the context.
+     *
+     * @param context
+     *            The context.
+     * @return The transport cost.
+     */
     default double getTransportCost(RoutePrinterContext context, TourActivity prevAct) {
         return prevAct == null ? 0d
                         : context.getProblem().getTransportCosts().getTransportCost(prevAct.getLocation(),
@@ -17,6 +37,13 @@ default double getTransportCost(RoutePrinterContext context, TourActivity prevAc
                                         context.getRoute().getVehicle());
     }
 
+    /**
+     * Returns the transport time extracted from the context.
+     *
+     * @param context
+     *            The context.
+     * @return The transpoert time.
+     */
     default double getTransportTime(RoutePrinterContext context, TourActivity prevAct) {
         return prevAct == null ? 0d
                         : context.getProblem().getTransportCosts().getTransportTime(prevAct.getLocation(),
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/EndTimePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/EndTimePrinterColumn.java
index 3e3346cdf..6f8418835 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/EndTimePrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/EndTimePrinterColumn.java
@@ -4,20 +4,43 @@
 
 import com.graphhopper.jsprit.core.problem.solution.route.activity.End;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
-
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
+
+/**
+ * End time of the activity.
+ * <p>
+ * For route end the value is undefined (null), for other activities, it is the
+ * time when the activity is finished and the vehicle could progress toward the
+ * next activity.
+ * </p>
+ *
+ * @author balage
+ *
+ * @see {@linkplain ArrivalTimePrinterColumn}
+ * @see {@linkplain StartTimePrinterColumn}
+ * @see {@linkplain TravelDurationPrinterColumn}
+ * @see {@linkplain WaitingDurationPrinterColumn}
+ * @see {@linkplain OperationDurationPrinterColumn}
+ * @see {@linkplain ActivityDurationPrinterColumn}
+ */
 public class EndTimePrinterColumn extends AbstractTimePrinterColumn<EndTimePrinterColumn> {
 
+    /**
+     * Constructor.
+     */
     public EndTimePrinterColumn() {
         super();
     }
 
-    public EndTimePrinterColumn(Consumer<Builder> decorator) {
+    /**
+     * Constructor with a post creation decorator provided.
+     */
+    public EndTimePrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
 
     @Override
-    protected String getTitle() {
+    protected String getDefaultTitle() {
         return "endTime";
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/HumanReadableDurationFormatter.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/HumanReadableDurationFormatter.java
deleted file mode 100644
index 70177bea4..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/HumanReadableDurationFormatter.java
+++ /dev/null
@@ -1,28 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.route;
-
-import java.time.LocalDate;
-import java.time.LocalDateTime;
-import java.time.LocalTime;
-import java.time.format.DateTimeFormatter;
-import java.time.temporal.ChronoUnit;
-
-public class HumanReadableDurationFormatter extends HumanReadableTimeFormatter {
-
-    public static final LocalDateTime DEFAULT_DUARATION_ORIGIN = LocalDateTime.of(LocalDate.now(), LocalTime.MIDNIGHT);
-
-    public HumanReadableDurationFormatter() {
-    }
-
-    public HumanReadableDurationFormatter(ChronoUnit unit) {
-        super(DEFAULT_DUARATION_ORIGIN, unit);
-    }
-
-    public HumanReadableDurationFormatter(DateTimeFormatter dateFormatter) {
-        super(dateFormatter);
-    }
-
-    public HumanReadableDurationFormatter(DateTimeFormatter dateFormatter, ChronoUnit unit) {
-        super(dateFormatter, DEFAULT_DUARATION_ORIGIN, unit);
-    }
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/HumanReadableTimeFormatter.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/HumanReadableTimeFormatter.java
deleted file mode 100644
index c7ece7636..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/HumanReadableTimeFormatter.java
+++ /dev/null
@@ -1,43 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.route;
-
-import java.time.LocalDate;
-import java.time.LocalDateTime;
-import java.time.LocalTime;
-import java.time.format.DateTimeFormatter;
-import java.time.temporal.ChronoUnit;
-
-public class HumanReadableTimeFormatter {
-
-    public static final LocalDateTime DEFAULT_ORIGIN = LocalDateTime.of(LocalDate.now(), LocalTime.MIDNIGHT);
-
-    private DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("HH:mm:ss");
-    private LocalDateTime origin = DEFAULT_ORIGIN;
-    private ChronoUnit unit = ChronoUnit.SECONDS;
-
-    public HumanReadableTimeFormatter() {
-    }
-
-    public HumanReadableTimeFormatter(LocalDateTime origin, ChronoUnit unit) {
-        this.origin = origin;
-        this.unit = unit;
-    }
-
-    public HumanReadableTimeFormatter(DateTimeFormatter dateFormatter) {
-        this.dateFormatter = dateFormatter;
-    }
-
-    public HumanReadableTimeFormatter(DateTimeFormatter dateFormatter, LocalDateTime origin, ChronoUnit unit) {
-        this.dateFormatter = dateFormatter;
-        this.origin = origin;
-        this.unit = unit;
-    }
-
-    public String format(Long timeValue) {
-        if (timeValue == null) {
-            return null;
-        } else {
-            LocalDateTime dt = origin.plus(timeValue, unit);
-            return dateFormatter.format(dt);
-        }
-    }
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/JobNamePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/JobNamePrinterColumn.java
index d53d31d21..33919c687 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/JobNamePrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/JobNamePrinterColumn.java
@@ -6,23 +6,43 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.StringColumnType;
-
-public class JobNamePrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, String> {
-
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
+import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
+
+/**
+ * Name (id) of the job.
+ *
+ * <p>
+ * This column provides the {@linkplain Job#getId()} of the associated job of
+ * the activity for job activities and null for other route activities.
+ * </p>
+ *
+ * @author balage
+ */
+public class JobNamePrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, String, JobNamePrinterColumn> {
+
+    /**
+     * Constructor.
+     */
     public JobNamePrinterColumn() {
         super();
     }
 
-    public JobNamePrinterColumn(Consumer<Builder> decorator) {
+    /**
+     * Constructor with a post creation decorator provided.
+     */
+    public JobNamePrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
 
     @Override
     public ColumnDefinition.Builder getColumnBuilder() {
-        return new ColumnDefinition.Builder(new StringColumnType("-"), "job name");
+        return new ColumnDefinition.Builder(new StringColumnType("-"));
+    }
+
+    @Override
+    protected String getDefaultTitle() {
+        return "job name";
     }
 
     @Override
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/JobPriorityPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/JobPriorityPrinterColumn.java
index dc72f454d..b22337afd 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/JobPriorityPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/JobPriorityPrinterColumn.java
@@ -6,26 +6,47 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.Alignment;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.StringColumnType;
-
-public class JobPriorityPrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, String> {
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnAlignment;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
+import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
+
+/**
+ * Priority of the job.
+ *
+ * <p>
+ * This column provides the named (LOW, MEDIUM, HIGH) representation of
+ * {@linkplain Job#getPriority()} of the associated job of the activity for job
+ * activities and null for other route activities.
+ * </p>
+ *
+ * @author balage
+ */
+public class JobPriorityPrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, String, JobPriorityPrinterColumn> {
 
     private static final String[] PRIORITY_NAMES = new String[] { "", "HIGH", "MEDIUM", "LOW" };
 
+    /**
+     * Constructor.
+     */
     public JobPriorityPrinterColumn() {
         super();
     }
 
-    public JobPriorityPrinterColumn(Consumer<Builder> decorator) {
+    /**
+     * Constructor with a post creation decorator provided.
+     */
+    public JobPriorityPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
 
     @Override
     public ColumnDefinition.Builder getColumnBuilder() {
-        return new ColumnDefinition.Builder(new StringColumnType("-"), "priority").withAlignment(Alignment.CENTER);
+        return new ColumnDefinition.Builder(new StringColumnType("-")).withAlignment(ColumnAlignment.CENTER);
+    }
+
+    @Override
+    protected String getDefaultTitle() {
+        return "priority";
     }
 
     @Override
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/JobTypePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/JobTypePrinterColumn.java
index 65ddb4bec..b4b50062b 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/JobTypePrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/JobTypePrinterColumn.java
@@ -6,23 +6,43 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.StringColumnType;
-
-public class JobTypePrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, String> {
-
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
+import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
+
+/**
+ * Priority of the job.
+ *
+ * <p>
+ * This column provides the simple class name of the associated job of the
+ * activity for job activities and null for other route activities.
+ * </p>
+ *
+ * @author balage
+ */
+public class JobTypePrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, String, JobTypePrinterColumn> {
+
+    /**
+     * Constructor.
+     */
     public JobTypePrinterColumn() {
         super();
     }
 
-    public JobTypePrinterColumn(Consumer<Builder> decorator) {
+    /**
+     * Constructor with a post creation decorator provided.
+     */
+    public JobTypePrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
 
     @Override
     public ColumnDefinition.Builder getColumnBuilder() {
-        return new ColumnDefinition.Builder(new StringColumnType("-"), "job type");
+        return new ColumnDefinition.Builder(new StringColumnType("-"));
+    }
+
+    @Override
+    protected String getDefaultTitle() {
+        return "job type";
     }
 
     @Override
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/LoacationPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/LoacationPrinterColumn.java
index 8d7ceac77..9895b4bf2 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/LoacationPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/LoacationPrinterColumn.java
@@ -5,23 +5,43 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.StringColumnType;
-
-public class LoacationPrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, String> {
-
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
+import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
+
+/**
+ * Priority of the job.
+ *
+ * <p>
+ * This column provides the simple class name of the associated job of the
+ * activity for job activities and null for other route activities.
+ * </p>
+ *
+ * @author balage
+ */
+public class LoacationPrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, String, LoacationPrinterColumn> {
+
+    /**
+     * Constructor.
+     */
     public LoacationPrinterColumn() {
         super();
     }
 
-    public LoacationPrinterColumn(Consumer<Builder> decorator) {
+    /**
+     * Constructor with a post creation decorator provided.
+     */
+    public LoacationPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
 
     @Override
     public ColumnDefinition.Builder getColumnBuilder() {
-        return new ColumnDefinition.Builder(new StringColumnType("-"), "location");
+        return new ColumnDefinition.Builder(new StringColumnType("-"));
+    }
+
+    @Override
+    protected String getDefaultTitle() {
+        return "location";
     }
 
     @Override
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/OperationDurationPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/OperationDurationPrinterColumn.java
index a17df4323..b4ea2c839 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/OperationDurationPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/OperationDurationPrinterColumn.java
@@ -2,22 +2,45 @@
 
 import java.util.function.Consumer;
 
+import com.graphhopper.jsprit.core.problem.solution.route.activity.AbstractActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
-
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
+
+/**
+ * Duration of the activity.
+ * <p>
+ * The time it takes to complete the on-site task of the activity. This is the
+ * value from {@linkplain AbstractActivity#getOperationTime()}.
+ * </p>
+ *
+ * @author balage
+ *
+ * @see {@linkplain ArrivalTimePrinterColumn}
+ * @see {@linkplain StartTimePrinterColumn}
+ * @see {@linkplain EndTimePrinterColumn}
+ * @see {@linkplain TravelDurationPrinterColumn}
+ * @see {@linkplain WaitingDurationPrinterColumn}
+ * @see {@linkplain ActivityDurationPrinterColumn}
+ */
 public class OperationDurationPrinterColumn extends AbstractDurationPrinterColumn<OperationDurationPrinterColumn> {
 
+    /**
+     * Constructor.
+     */
     public OperationDurationPrinterColumn() {
         super();
     }
 
-    public OperationDurationPrinterColumn(Consumer<Builder> decorator) {
+    /**
+     * Constructor with a post creation decorator provided.
+     */
+    public OperationDurationPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
 
 
     @Override
-    protected String getTitle() {
+    protected String getDefaultTitle() {
         return "opTime";
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RouteCostPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RouteCostPrinterColumn.java
index 5d60e89ec..a691628f0 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RouteCostPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RouteCostPrinterColumn.java
@@ -3,23 +3,44 @@
 import java.util.function.Consumer;
 
 import com.graphhopper.jsprit.core.problem.solution.route.activity.Start;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
-
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
+
+/**
+ * The aggregated cost of the route from start till the current activity.
+ *
+ * <p>
+ * This column sumarizes the cost of all activities from start till the current
+ * activity.
+ * </p>
+ * <p>
+ * This column is stateful and stores the sum from the prior activities on the
+ * route.
+ * </p>
+ *
+ * @author balage
+ */
 public class RouteCostPrinterColumn extends TransportCostPrinterColumn {
 
+    // The aggregated cost of the route so far.
     private int aggregatedCost = 0;
 
+    /**
+     * Constructor.
+     */
     public RouteCostPrinterColumn() {
         super();
     }
 
-    public RouteCostPrinterColumn(Consumer<Builder> decorator) {
+    /**
+     * Constructor with a post creation decorator provided.
+     */
+    public RouteCostPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
 
 
     @Override
-    protected String getTitle() {
+    protected String getDefaultTitle() {
         return "routeCost";
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RouteLoadPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RouteLoadPrinterColumn.java
index 36bb03535..af853990b 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RouteLoadPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RouteLoadPrinterColumn.java
@@ -5,22 +5,44 @@
 import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.Start;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
-
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
+
+/**
+ * The load of the vehicle after the current activity is finished.
+ *
+ * <p>
+ * This column represents the current load of the vehicle on the route after the
+ * cargo load/unload performed on the activity. For the start activity (at the
+ * start of the route) the value is the initialLoad.
+ * </p>
+ * <p>
+ * This column is stateful and stores the vehicle load from the prior activity
+ * on the route.
+ * </p>
+ *
+ * @author balage
+ */
 public class RouteLoadPrinterColumn extends AbstractSizeDimensionPrinterColumn {
 
+    // The current vehicle load
     private SizeDimension aggregated;
 
+    /**
+     * Constructor.
+     */
     public RouteLoadPrinterColumn() {
         super();
     }
 
-    public RouteLoadPrinterColumn(Consumer<Builder> decorator) {
+    /**
+     * Constructor with a post creation decorator provided.
+     */
+    public RouteLoadPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
 
     @Override
-    protected String getTitle() {
+    protected String getDefaultTitle() {
         return "load";
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RouteNumberPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RouteNumberPrinterColumn.java
index 7555914a4..d9a4dc4f1 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RouteNumberPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RouteNumberPrinterColumn.java
@@ -3,23 +3,42 @@
 import java.util.function.Consumer;
 
 import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.IntColumnType;
-
-public class RouteNumberPrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, Integer> {
-
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
+import com.graphhopper.jsprit.core.reporting.columndefinition.IntColumnType;
+
+/**
+ * The order number of the route.
+ *
+ * <p>
+ * This is the ordinal of the route.
+ * </p>
+ *
+ * @author balage
+ */
+public class RouteNumberPrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, Integer, RouteNumberPrinterColumn> {
+
+    /**
+     * Constructor.
+     */
     public RouteNumberPrinterColumn() {
         super();
     }
 
-    public RouteNumberPrinterColumn(Consumer<Builder> decorator) {
+    /**
+     * Constructor with a post creation decorator provided.
+     */
+    public RouteNumberPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
 
     @Override
     public ColumnDefinition.Builder getColumnBuilder() {
-        return new ColumnDefinition.Builder(new IntColumnType(), "route");
+        return new ColumnDefinition.Builder(new IntColumnType());
+    }
+
+    @Override
+    protected String getDefaultTitle() {
+        return "route";
     }
 
     @Override
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RoutePrinterContext.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RoutePrinterContext.java
index 9671fc963..08ec51c19 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RoutePrinterContext.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RoutePrinterContext.java
@@ -5,13 +5,40 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.reporting.PrinterContext;
 
-public class RoutePrinterContext extends PrinterContext {
+/**
+ * The context of the detailed route printer columns.
+ *
+ * <p>
+ * This is a semi-mutable class: only the activity could be altered. Therefore
+ * for each route a new instance should be created.
+ * </p>
+ *
+ * @author balage
+ *
+ */
+public class RoutePrinterContext implements PrinterContext {
 
+    // The route id
     private int routeNr;
+    // The route itself
     private VehicleRoute route;
+    // The current activity
     private TourActivity activity;
+    // The problem
     private VehicleRoutingProblem problem;
 
+    /**
+     * Constructor.
+     *
+     * @param routeNr
+     *            route id
+     * @param route
+     *            the route
+     * @param activity
+     *            current activity
+     * @param problem
+     *            problem
+     */
     public RoutePrinterContext(int routeNr, VehicleRoute route, TourActivity activity, VehicleRoutingProblem problem) {
         super();
         this.routeNr = routeNr;
@@ -20,22 +47,38 @@ public RoutePrinterContext(int routeNr, VehicleRoute route, TourActivity activit
         this.problem = problem;
     }
 
+    /**
+     * @return The route id.
+     */
     public int getRouteNr() {
         return routeNr;
     }
 
+    /**
+     * @return The route itself.
+     */
     public VehicleRoute getRoute() {
         return route;
     }
 
+    /**
+     * @return The current activity.
+     */
     public TourActivity getActivity() {
         return activity;
     }
 
+    /**
+     * @param activity
+     *            The current activity.
+     */
     public void setActivity(TourActivity activity) {
         this.activity = activity;
     }
 
+    /**
+     * @return The problem.
+     */
     public VehicleRoutingProblem getProblem() {
         return problem;
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/SelectedTimeWindowPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/SelectedTimeWindowPrinterColumn.java
index c81c1d71b..6037d95fc 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/SelectedTimeWindowPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/SelectedTimeWindowPrinterColumn.java
@@ -8,23 +8,51 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
 
+/**
+ * The time window used in activity.
+ *
+ * <p>
+ * This is the time window which was choosen by the algorithm. The start time of
+ * the activity is within this time window and the end time is within or matches
+ * the end value of this time window.
+ * </p>
+ *
+ * @author balage
+ *
+ * @see {@linkplain TimeWindowsPrinterColumn}
+ * @see {@linkplain StartTimePrinterColumn}
+ */
 public class SelectedTimeWindowPrinterColumn extends AbstractTimeWindowPrinterColumn<SelectedTimeWindowPrinterColumn> {
 
+    /**
+     * Constructor.
+     */
     public SelectedTimeWindowPrinterColumn() {
         super();
     }
 
-    public SelectedTimeWindowPrinterColumn(Consumer<Builder> decorator) {
+    /**
+     * Constructor with a post creation decorator provided.
+     */
+    public SelectedTimeWindowPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
 
     @Override
-    protected String getTitle() {
+    protected String getDefaultTitle() {
         return "selTimeWindow";
     }
 
+    /**
+     * {@inheritDoc}
+     *
+     * <p>
+     * This implementation returns at most one time window: the one the activity
+     * start time is within.
+     * </p>
+     */
     @Override
     protected Collection<TimeWindow> getValue(RoutePrinterContext context) {
         TourActivity act = context.getActivity();
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/StartTimePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/StartTimePrinterColumn.java
index eaa897388..020158e88 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/StartTimePrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/StartTimePrinterColumn.java
@@ -4,20 +4,42 @@
 
 import com.graphhopper.jsprit.core.problem.solution.route.activity.End;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
-
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
+
+/**
+ * Start time of the activity.
+ * <p>
+ * For route end the value is undefined (null), for other activities, it is the
+ * time when the task on location is effectively started.
+ * </p>
+ *
+ * @author balage
+ *
+ * @see {@linkplain ArrivalTimePrinterColumn}
+ * @see {@linkplain EndTimePrinterColumn}
+ * @see {@linkplain TravelDurationPrinterColumn}
+ * @see {@linkplain WaitingDurationPrinterColumn}
+ * @see {@linkplain OperationDurationPrinterColumn}
+ * @see {@linkplain ActivityDurationPrinterColumn}
+ */
 public class StartTimePrinterColumn extends AbstractTimePrinterColumn<StartTimePrinterColumn> {
 
+    /**
+     * Constructor.
+     */
     public StartTimePrinterColumn() {
         super();
     }
 
-    public StartTimePrinterColumn(Consumer<Builder> decorator) {
+    /**
+     * Constructor with a post creation decorator provided.
+     */
+    public StartTimePrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
 
     @Override
-    protected String getTitle() {
+    protected String getDefaultTitle() {
         return "startTime";
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/TimeWindowsPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/TimeWindowsPrinterColumn.java
index d6ab143f2..559862757 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/TimeWindowsPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/TimeWindowsPrinterColumn.java
@@ -6,20 +6,37 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
-
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
+
+/**
+ * The time windows of the activity.
+ *
+ * <p>
+ * Returns all time windows assigned to the activity.
+ * </p>
+ *
+ * @author balage
+ *
+ * @see {@linkplain SelectedTimeWindowPrinterColumn}
+ */
 public class TimeWindowsPrinterColumn extends AbstractTimeWindowPrinterColumn<TimeWindowsPrinterColumn> {
 
+    /**
+     * Constructor.
+     */
     public TimeWindowsPrinterColumn() {
         super();
     }
 
-    public TimeWindowsPrinterColumn(Consumer<Builder> decorator) {
+    /**
+     * Constructor with a post creation decorator provided.
+     */
+    public TimeWindowsPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
 
     @Override
-    protected String getTitle() {
+    protected String getDefaultTitle() {
         return "timeWindows";
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/TransportCostPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/TransportCostPrinterColumn.java
index 7e3f73014..b30a175ac 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/TransportCostPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/TransportCostPrinterColumn.java
@@ -4,22 +4,42 @@
 
 import com.graphhopper.jsprit.core.problem.solution.route.activity.Start;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
-
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
+
+/**
+ * The cost of travelling to the activity.
+ *
+ * <p>
+ * This is the cost of the transport from the previous to this activity. For the
+ * start of the route this value is undefined (null).
+ * </p>
+ * <p>
+ * This column is stateful and stores the previous activity.
+ * </p>
+ *
+ * @author balage
+ */
 public class TransportCostPrinterColumn extends AbstractCostPrinterColumn {
 
+    // The previous activity
     private TourActivity prevAct;
 
+    /**
+     * Constructor.
+     */
     public TransportCostPrinterColumn() {
         super();
     }
 
-    public TransportCostPrinterColumn(Consumer<Builder> decorator) {
+    /**
+     * Constructor with a post creation decorator provided.
+     */
+    public TransportCostPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
 
     @Override
-    protected String getTitle() {
+    protected String getDefaultTitle() {
         return "transCost";
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/TravelDurationPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/TravelDurationPrinterColumn.java
index 7285e4cf5..82622a4e0 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/TravelDurationPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/TravelDurationPrinterColumn.java
@@ -4,24 +4,50 @@
 
 import com.graphhopper.jsprit.core.problem.solution.route.activity.Start;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
 
+/**
+ * Travel duration toward the location of the activity.
+ * <p>
+ * The time it takes to travel to the location of the activity. The value is
+ * undefined for route start activity (null).
+ * </p>
+ * <p>
+ * This column is stateful and stores the previous activity.
+ * </p>
+ *
+ * @author balage
+ *
+ * @see {@linkplain ArrivalTimePrinterColumn}
+ * @see {@linkplain StartTimePrinterColumn}
+ * @see {@linkplain EndTimePrinterColumn}
+ * @see {@linkplain WaitingDurationPrinterColumn}
+ * @see {@linkplain OperationDurationPrinterColumn}
+ * @see {@linkplain ActivityDurationPrinterColumn}
+ */
 public class TravelDurationPrinterColumn extends AbstractDurationPrinterColumn<TravelDurationPrinterColumn>
 implements CostAndTimeExtractor {
 
+    // The previous activity
     private TourActivity prevAct;
 
+    /**
+     * Constructor.
+     */
     public TravelDurationPrinterColumn() {
         super();
     }
 
-    public TravelDurationPrinterColumn(Consumer<Builder> decorator) {
+    /**
+     * Constructor with a post creation decorator provided.
+     */
+    public TravelDurationPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
 
 
     @Override
-    protected String getTitle() {
+    protected String getDefaultTitle() {
         return "travel";
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/VehicleNamePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/VehicleNamePrinterColumn.java
index 518c0c632..6ad29433a 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/VehicleNamePrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/VehicleNamePrinterColumn.java
@@ -3,23 +3,42 @@
 import java.util.function.Consumer;
 
 import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.StringColumnType;
-
-public class VehicleNamePrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, String> {
-
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
+import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
+
+/**
+ * The name of the vehicle associated by this route.
+ *
+ * <p>
+ * This colum returns the id of the vehicle of the route.
+ * </p>
+ *
+ * @author balage
+ */
+public class VehicleNamePrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, String, VehicleNamePrinterColumn> {
+
+    /**
+     * Constructor.
+     */
     public VehicleNamePrinterColumn() {
         super();
     }
 
-    public VehicleNamePrinterColumn(Consumer<Builder> decorator) {
+    /**
+     * Constructor with a post creation decorator provided.
+     */
+    public VehicleNamePrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
 
     @Override
     public ColumnDefinition.Builder getColumnBuilder() {
-        return new ColumnDefinition.Builder(new StringColumnType(), "vehicle");
+        return new ColumnDefinition.Builder(new StringColumnType());
+    }
+
+    @Override
+    protected String getDefaultTitle() {
+        return "vehicle";
     }
 
     @Override
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/WaitingDurationPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/WaitingDurationPrinterColumn.java
index c7bc670ae..f68faa37f 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/WaitingDurationPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/WaitingDurationPrinterColumn.java
@@ -5,21 +5,46 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.End;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.Start;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
-
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
+
+/**
+ * Idle duration before starting the activity.
+ * <p>
+ * This is the time duration between the vehicle arrives to the location (
+ * {@linkplain ArrivalTimePrinterColumn}) and the activity could be started (
+ * {@linkplain StartTimePrinterColumn}). For route start and end this value is
+ * not defined (null).
+ * </p>
+ *
+ * @author balage
+ *
+ * @see {@linkplain ArrivalTimePrinterColumn}
+ * @see {@linkplain StartTimePrinterColumn}
+ * @see {@linkplain EndTimePrinterColumn}
+ * @see {@linkplain TravelDurationPrinterColumn}
+ * @see {@linkplain WaitingDurationPrinterColumn}
+ * @see {@linkplain OperationDurationPrinterColumn}
+ * @see {@linkplain ActivityDurationPrinterColumn}
+ */
 public class WaitingDurationPrinterColumn extends AbstractDurationPrinterColumn<WaitingDurationPrinterColumn> {
 
+    /**
+     * Constructor.
+     */
     public WaitingDurationPrinterColumn() {
         super();
     }
 
-    public WaitingDurationPrinterColumn(Consumer<Builder> decorator) {
+    /**
+     * Constructor with a post creation decorator provided.
+     */
+    public WaitingDurationPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
         super(decorator);
     }
 
 
     @Override
-    protected String getTitle() {
+    protected String getDefaultTitle() {
         return "waiting";
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/RandomUtils.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/RandomUtils.java
index facc97981..3eb52508e 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/RandomUtils.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/RandomUtils.java
@@ -18,13 +18,13 @@
 
 package com.graphhopper.jsprit.core.util;
 
-import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-
 import java.util.Collection;
 import java.util.List;
 import java.util.Random;
 
+import com.graphhopper.jsprit.core.problem.job.Job;
+import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+
 /**
  * Created by schroeder on 14/01/15.
  */
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/Resource.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/Resource.java
index 134f13545..9e1b72f00 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/Resource.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/Resource.java
@@ -18,9 +18,6 @@
 package com.graphhopper.jsprit.core.util;
 
 
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileNotFoundException;
@@ -28,6 +25,9 @@
 import java.net.MalformedURLException;
 import java.net.URL;
 
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 
 /**
  * @author stefan schroeder, pierre-david belanger
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/SolutionVerifier.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/SolutionVerifier.java
index 6d1ed3fb2..ca2024605 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/SolutionVerifier.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/SolutionVerifier.java
@@ -17,16 +17,16 @@
  */
 package com.graphhopper.jsprit.core.util;
 
+import java.util.Collection;
+import java.util.HashSet;
+import java.util.Set;
+
 import com.graphhopper.jsprit.core.algorithm.listener.AlgorithmEndsListener;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 
-import java.util.Collection;
-import java.util.HashSet;
-import java.util.Set;
-
 
 public class SolutionVerifier implements AlgorithmEndsListener {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/Solutions.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/Solutions.java
index 8687caab6..231ede97d 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/Solutions.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/Solutions.java
@@ -17,10 +17,10 @@
  */
 package com.graphhopper.jsprit.core.util;
 
-import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
-
 import java.util.Collection;
 
+import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
+
 
 public class Solutions {
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/VehicleIndexComparator.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/VehicleIndexComparator.java
index 4e7a51d71..5b7c6585a 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/VehicleIndexComparator.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/VehicleIndexComparator.java
@@ -18,10 +18,10 @@
 
 package com.graphhopper.jsprit.core.util;
 
-import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-
 import java.util.Comparator;
 
+import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+
 public class VehicleIndexComparator implements Comparator<VehicleRoute> {
     public int compare(VehicleRoute a, VehicleRoute b) {
         return a.getVehicle().getIndex() - b.getVehicle().getIndex();
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/VehicleRoutingTransportCostsMatrix.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/VehicleRoutingTransportCostsMatrix.java
index e63188ae2..916d7f4f9 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/VehicleRoutingTransportCostsMatrix.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/VehicleRoutingTransportCostsMatrix.java
@@ -17,16 +17,17 @@
  */
 package com.graphhopper.jsprit.core.util;
 
+import java.util.HashMap;
+import java.util.Map;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.cost.AbstractForwardVehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.driver.Driver;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl.VehicleCostParams;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.util.HashMap;
-import java.util.Map;
 
 
 /**
