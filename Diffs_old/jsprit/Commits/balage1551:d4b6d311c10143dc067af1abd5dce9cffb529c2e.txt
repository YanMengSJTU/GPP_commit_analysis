diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverServiceDEPRECATEDTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverServiceDEPRECATEDTest.java
deleted file mode 100644
index 2157b1ad6..000000000
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverServiceDEPRECATEDTest.java
+++ /dev/null
@@ -1,90 +0,0 @@
-/*
- * Licensed to GraphHopper GmbH under one or more contributor
- * license agreements. See the NOTICE file distributed with this work for
- * additional information regarding copyright ownership.
- *
- * GraphHopper GmbH licenses this file to you under the Apache License,
- * Version 2.0 (the "License"); you may not use this file except in
- * compliance with the License. You may obtain a copy of the License at
- *
- *       http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.graphhopper.jsprit.core.problem.solution.route.activity;
-
-import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.job.Delivery;
-import org.junit.Before;
-import org.junit.Test;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-
-public class DeliverServiceDEPRECATEDTest {
-
-    private Delivery service;
-
-    private DeliverServiceDEPRECATED deliver;
-
-    @Before
-    public void doBefore() {
-        service = new Delivery.Builder("service").setLocation(Location.newInstance("loc")).
-            setTimeWindow(TimeWindow.newInstance(1., 2.)).
-            addSizeDimension(0, 10).addSizeDimension(1, 100).addSizeDimension(2, 1000).build();
-        deliver = new DeliverServiceDEPRECATED(service);
-        deliver.setTheoreticalEarliestOperationStartTime(service.getTimeWindow().getStart());
-        deliver.setTheoreticalLatestOperationStartTime(service.getTimeWindow().getEnd());
-    }
-
-    @Test
-    public void whenCallingCapacity_itShouldReturnCorrectCapacity() {
-        assertEquals(-10, deliver.getLoadChange().get(0));
-        assertEquals(-100, deliver.getLoadChange().get(1));
-        assertEquals(-1000, deliver.getLoadChange().get(2));
-    }
-
-    @Test
-    public void whenStartIsIniWithEarliestStart_itShouldBeSetCorrectly() {
-        assertEquals(1., deliver.getTheoreticalEarliestOperationStartTime(), 0.01);
-    }
-
-    @Test
-    public void whenStartIsIniWithLatestStart_itShouldBeSetCorrectly() {
-        assertEquals(2., deliver.getTheoreticalLatestOperationStartTime(), 0.01);
-    }
-
-    @Test
-    public void whenSettingArrTime_itShouldBeSetCorrectly() {
-        deliver.setArrTime(4.0);
-        assertEquals(4., deliver.getArrTime(), 0.01);
-    }
-
-    @Test
-    public void whenSettingEndTime_itShouldBeSetCorrectly() {
-        deliver.setEndTime(5.0);
-        assertEquals(5., deliver.getEndTime(), 0.01);
-    }
-
-    @Test
-    public void whenIniLocationId_itShouldBeSetCorrectly() {
-        assertEquals("loc", deliver.getLocation().getId());
-    }
-
-    @Test
-    public void whenCopyingStart_itShouldBeDoneCorrectly() {
-        DeliverServiceDEPRECATED copy = (DeliverServiceDEPRECATED) deliver.duplicate();
-        assertEquals(1., copy.getTheoreticalEarliestOperationStartTime(), 0.01);
-        assertEquals(2., copy.getTheoreticalLatestOperationStartTime(), 0.01);
-        assertEquals("loc", copy.getLocation().getId());
-        assertEquals(-10, copy.getLoadChange().get(0));
-        assertEquals(-100, copy.getLoadChange().get(1));
-        assertEquals(-1000, copy.getLoadChange().get(2));
-        assertTrue(copy != deliver);
-    }
-
-}
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverShipmentTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverShipmentTest.java
deleted file mode 100644
index e4d5c80fa..000000000
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverShipmentTest.java
+++ /dev/null
@@ -1,100 +0,0 @@
-/*
- * Licensed to GraphHopper GmbH under one or more contributor
- * license agreements. See the NOTICE file distributed with this work for
- * additional information regarding copyright ownership.
- *
- * GraphHopper GmbH licenses this file to you under the Apache License,
- * Version 2.0 (the "License"); you may not use this file except in
- * compliance with the License. You may obtain a copy of the License at
- *
- *       http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.graphhopper.jsprit.core.problem.solution.route.activity;
-
-import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
-import org.junit.Before;
-import org.junit.Test;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-
-public class DeliverShipmentTest {
-
-    private DeliverShipmentDEPRECATED deliver;
-
-    @Before
-    public void doBefore() {
-        Shipment shipment = Shipment.Builder.newInstance("shipment").setPickupLocation(Location.Builder.newInstance().setId("pickupLoc").build())
-            .setDeliveryLocation(Location.newInstance("deliveryLoc"))
-            .setPickupTimeWindow(TimeWindow.newInstance(1., 2.))
-            .setDeliveryTimeWindow(TimeWindow.newInstance(3., 4.))
-            .addSizeDimension(0, 10).addSizeDimension(1, 100).addSizeDimension(2, 1000).build();
-        deliver = new DeliverShipmentDEPRECATED(shipment);
-        deliver.setTheoreticalEarliestOperationStartTime(shipment.getDeliveryTimeWindow().getStart());
-        deliver.setTheoreticalLatestOperationStartTime(shipment.getDeliveryTimeWindow().getEnd());
-    }
-
-    @Test
-    public void whenCallingCapacity_itShouldReturnCorrectCapacity() {
-        assertEquals(-10, deliver.getLoadChange().get(0));
-        assertEquals(-100, deliver.getLoadChange().get(1));
-        assertEquals(-1000, deliver.getLoadChange().get(2));
-    }
-
-    @Test
-    public void whenStartIsIniWithEarliestStart_itShouldBeSetCorrectly() {
-        assertEquals(3., deliver.getTheoreticalEarliestOperationStartTime(), 0.01);
-    }
-
-    @Test
-    public void whenStartIsIniWithLatestStart_itShouldBeSetCorrectly() {
-        assertEquals(4., deliver.getTheoreticalLatestOperationStartTime(), 0.01);
-    }
-
-    @Test
-    public void whenSettingArrTime_itShouldBeSetCorrectly() {
-        deliver.setArrTime(4.0);
-        assertEquals(4., deliver.getArrTime(), 0.01);
-    }
-
-    @Test
-    public void whenSettingEndTime_itShouldBeSetCorrectly() {
-        deliver.setEndTime(5.0);
-        assertEquals(5., deliver.getEndTime(), 0.01);
-    }
-
-    @Test
-    public void whenIniLocationId_itShouldBeSetCorrectly() {
-        assertEquals("deliveryLoc", deliver.getLocation().getId());
-    }
-
-    @Test
-    public void whenCopyingStart_itShouldBeDoneCorrectly() {
-        DeliverShipmentDEPRECATED copy = (DeliverShipmentDEPRECATED) deliver.duplicate();
-        assertEquals(3., copy.getTheoreticalEarliestOperationStartTime(), 0.01);
-        assertEquals(4., copy.getTheoreticalLatestOperationStartTime(), 0.01);
-        assertEquals("deliveryLoc", copy.getLocation().getId());
-        assertEquals(-10, copy.getLoadChange().get(0));
-        assertEquals(-100, copy.getLoadChange().get(1));
-        assertEquals(-1000, copy.getLoadChange().get(2));
-        assertTrue(copy != deliver);
-    }
-
-
-    @Test
-    public void whenGettingCapacity_itShouldReturnItCorrectly() {
-        Shipment shipment = Shipment.Builder.newInstance("s").setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).setDeliveryLocation(Location.newInstance("delLoc"))
-            .addSizeDimension(0, 10).addSizeDimension(1, 100).build();
-        PickupShipmentDEPRECATED pick = new PickupShipmentDEPRECATED(shipment);
-        assertEquals(10, pick.getLoadChange().get(0));
-        assertEquals(100, pick.getLoadChange().get(1));
-    }
-
-}
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliveryActivityTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliveryActivityTest.java
new file mode 100644
index 000000000..e632210f6
--- /dev/null
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliveryActivityTest.java
@@ -0,0 +1,47 @@
+/*
+ * Licensed to GraphHopper GmbH under one or more contributor
+ * license agreements. See the NOTICE file distributed with this work for
+ * additional information regarding copyright ownership.
+ *
+ * GraphHopper GmbH licenses this file to you under the Apache License,
+ * Version 2.0 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.graphhopper.jsprit.core.problem.solution.route.activity;
+
+import static org.junit.Assert.assertEquals;
+
+import org.junit.Before;
+import org.junit.Test;
+
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.job.Delivery;
+
+public class DeliveryActivityTest extends JobActivityTest {
+
+    @Before
+    public void doBefore() {
+        service = new Delivery.Builder("service").setLocation(Location.newInstance("loc"))
+                        .setTimeWindow(TimeWindow.newInstance(1., 2.)).
+                        setServiceTime(20d).
+                        addSizeDimension(0, 10).addSizeDimension(1, 100).addSizeDimension(2, 1000).build();
+        createActivity(service);
+    }
+
+    @Override
+    @Test
+    public void whenCallingCapacity_itShouldReturnCorrectCapacity() {
+        assertEquals(-10, activity.getLoadChange().get(0));
+        assertEquals(-100, activity.getLoadChange().get(1));
+        assertEquals(-1000, activity.getLoadChange().get(2));
+    }
+
+}
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/JobActivityTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/JobActivityTest.java
new file mode 100644
index 000000000..962703614
--- /dev/null
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/JobActivityTest.java
@@ -0,0 +1,138 @@
+/*
+ * Licensed to GraphHopper GmbH under one or more contributor
+ * license agreements. See the NOTICE file distributed with this work for
+ * additional information regarding copyright ownership.
+ *
+ * GraphHopper GmbH licenses this file to you under the Apache License,
+ * Version 2.0 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.graphhopper.jsprit.core.problem.solution.route.activity;
+
+import static org.junit.Assert.assertEquals;
+
+import org.junit.Test;
+
+import com.graphhopper.jsprit.core.problem.job.Service;
+
+public abstract class JobActivityTest {
+
+    protected Service service;
+
+    protected JobActivity activity;
+
+    public void createActivity(Service service) {
+        this.service = service;
+        activity = service.getServiceActivity();
+        activity.setTheoreticalEarliestOperationStartTime(
+                        activity.getTimeWindows().iterator().next().getStart());
+        activity.setTheoreticalLatestOperationStartTime(
+                        activity.getTimeWindows().iterator().next().getEnd());
+    }
+
+    @Test
+
+    public abstract void whenCallingCapacity_itShouldReturnCorrectCapacity();
+
+
+    @Test
+    public void whenCallingJob_itShouldReturnCorrectJob() {
+        assertEquals(service, activity.getJob());
+    }
+
+    @Test
+    public void whenCallingOperationTime_itShouldReturnCorrectValue() {
+        assertEquals(20d, activity.getOperationTime(), 0.01);
+    }
+
+    @Test
+    public void whenCallingOrderNumber_itShouldReturnCorrectValue() {
+        assertEquals(1d, activity.getOrderNumber(), 0.01);
+    }
+
+    @Test
+    public void whenStartIsIniWithEarliestStart_itShouldBeSetCorrectly() {
+        assertEquals(1., activity.getTheoreticalEarliestOperationStartTime(), 0.01);
+    }
+
+    @Test
+    public void whenStartIsIniWithLatestStart_itShouldBeSetCorrectly() {
+        assertEquals(2., activity.getTheoreticalLatestOperationStartTime(), 0.01);
+    }
+
+    @Test
+    public void whenSettingArrTime_itShouldBeSetCorrectly() {
+        activity.setArrTime(4.0);
+        assertEquals(4., activity.getArrTime(), 0.01);
+    }
+
+    @Test
+    public void whenSettingEndTime_itShouldBeSetCorrectly() {
+        activity.setEndTime(5.0);
+        assertEquals(5., activity.getEndTime(), 0.01);
+    }
+
+    @Test
+    public void whenIniLocationId_itShouldBeSetCorrectly() {
+        assertEquals("loc", activity.getLocation().getId());
+    }
+
+    @Test
+    public void whenCopyingStart_classShouldBeTheSame() {
+        JobActivity copy = (JobActivity) activity.duplicate();
+        assertEquals(activity.getClass(), copy.getClass());
+    }
+
+    @Test
+    public void whenCopyingStart_jobShouldBeTheSame() {
+        JobActivity copy = (JobActivity) activity.duplicate();
+        assertEquals(activity.getJob(), copy.getJob());
+    }
+
+    @Test
+    public void whenCopyingStart_orderNumberShouldBeTheSame() {
+        JobActivity copy = (JobActivity) activity.duplicate();
+        assertEquals(activity.getOrderNumber(), copy.getOrderNumber());
+    }
+
+    @Test
+    public void whenCopyingStart_operationTimeShouldBeTheSame() {
+        JobActivity copy = (JobActivity) activity.duplicate();
+        assertEquals(20d, copy.getOperationTime(), 0.01);
+    }
+
+    @Test
+    public void whenCopyingStart_typeShouldBeTheSame() {
+        JobActivity copy = (JobActivity) activity.duplicate();
+        assertEquals(activity.getType(), copy.getType());
+    }
+
+    @Test
+    public void whenCopyingStart_theoreticalTimesShouldBeTheSame() {
+        JobActivity copy = (JobActivity) activity.duplicate();
+        assertEquals(1., copy.getTheoreticalEarliestOperationStartTime(), 0.01);
+        assertEquals(2., copy.getTheoreticalLatestOperationStartTime(), 0.01);
+    }
+
+    @Test
+    public void whenCopyingStart_locationShouldBeTheSame() {
+        JobActivity copy = (JobActivity) activity.duplicate();
+        assertEquals("loc", copy.getLocation().getId());
+    }
+
+    @Test
+    public void whenCopyingStart_sizeShouldBeTheSame() {
+        JobActivity copy = (JobActivity) activity.duplicate();
+        assertEquals(activity.getLoadSize(), copy.getLoadSize());
+        assertEquals(activity.getLoadChange(), copy.getLoadChange());
+    }
+
+}
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivityTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivityTest.java
index 29494660e..ce72fed2a 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivityTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivityTest.java
@@ -18,19 +18,13 @@
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
 import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
 
 import org.junit.Before;
-import org.junit.Test;
 
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.job.Service;
 
-public class PickupActivityTest {
-
-    private Service service;
-
-    private PickupActivityNEW pickup;
+public class PickupActivityTest extends JobActivityTest {
 
     @Before
     public void doBefore() {
@@ -38,77 +32,14 @@ public void doBefore() {
                         setTimeWindow(TimeWindow.newInstance(1., 2.)).
                         setServiceTime(20d).
                         addSizeDimension(0, 10).addSizeDimension(1, 100).addSizeDimension(2, 1000).build();
-        pickup = (PickupActivityNEW) service.getServiceActivity();
-        pickup.setTheoreticalEarliestOperationStartTime(
-                        pickup.getTimeWindows().iterator().next().getStart());
-        pickup.setTheoreticalLatestOperationStartTime(
-                        pickup.getTimeWindows().iterator().next().getEnd());
+        createActivity(service);
     }
 
-    @Test
+    @Override
     public void whenCallingCapacity_itShouldReturnCorrectCapacity() {
-        assertEquals(10, pickup.getLoadChange().get(0));
-        assertEquals(100, pickup.getLoadChange().get(1));
-        assertEquals(1000, pickup.getLoadChange().get(2));
-    }
-
-
-    @Test
-    public void whenCallingJob_itShouldReturnCorrectJob() {
-        assertEquals(service, pickup.getJob());
-    }
-
-    @Test
-    public void whenCallingOperationTime_itShouldReturnCorrectValue() {
-        assertEquals(20d, pickup.getOperationTime(), 0.01);
-    }
-
-    @Test
-    public void whenCallingOrderNumber_itShouldReturnCorrectValue() {
-        assertEquals(1d, pickup.getOrderNumber(), 0.01);
-    }
-
-    @Test
-    public void whenStartIsIniWithEarliestStart_itShouldBeSetCorrectly() {
-        assertEquals(1., pickup.getTheoreticalEarliestOperationStartTime(), 0.01);
-    }
-
-    @Test
-    public void whenStartIsIniWithLatestStart_itShouldBeSetCorrectly() {
-        assertEquals(2., pickup.getTheoreticalLatestOperationStartTime(), 0.01);
-    }
-
-    @Test
-    public void whenSettingArrTime_itShouldBeSetCorrectly() {
-        pickup.setArrTime(4.0);
-        assertEquals(4., pickup.getArrTime(), 0.01);
-    }
-
-    @Test
-    public void whenSettingEndTime_itShouldBeSetCorrectly() {
-        pickup.setEndTime(5.0);
-        assertEquals(5., pickup.getEndTime(), 0.01);
-    }
-
-    @Test
-    public void whenIniLocationId_itShouldBeSetCorrectly() {
-        assertEquals("loc", pickup.getLocation().getId());
-    }
-
-    @Test
-    public void whenCopyingStart_itShouldBeDoneCorrectly() {
-        PickupActivityNEW copy = (PickupActivityNEW) pickup.duplicate();
-        assertEquals(pickup.getJob(), copy.getJob());
-        assertEquals(pickup.getOrderNumber(), copy.getOrderNumber());
-        assertEquals(20d, copy.getOperationTime(), 0.01);
-        assertEquals(pickup.getType(), copy.getType());
-        assertEquals(1., copy.getTheoreticalEarliestOperationStartTime(), 0.01);
-        assertEquals(2., copy.getTheoreticalLatestOperationStartTime(), 0.01);
-        assertEquals("loc", copy.getLocation().getId());
-        assertEquals(10, copy.getLoadChange().get(0));
-        assertEquals(100, copy.getLoadChange().get(1));
-        assertEquals(1000, copy.getLoadChange().get(2));
-        assertTrue(copy != pickup);
+        assertEquals(10, activity.getLoadChange().get(0));
+        assertEquals(100, activity.getLoadChange().get(1));
+        assertEquals(1000, activity.getLoadChange().get(2));
     }
 
 }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupServiceTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupServiceTest.java
deleted file mode 100644
index 243bf4e33..000000000
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupServiceTest.java
+++ /dev/null
@@ -1,93 +0,0 @@
-/*
- * Licensed to GraphHopper GmbH under one or more contributor
- * license agreements. See the NOTICE file distributed with this work for
- * additional information regarding copyright ownership.
- *
- * GraphHopper GmbH licenses this file to you under the Apache License,
- * Version 2.0 (the "License"); you may not use this file except in
- * compliance with the License. You may obtain a copy of the License at
- *
- *       http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.graphhopper.jsprit.core.problem.solution.route.activity;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-
-import org.junit.Before;
-import org.junit.Test;
-
-import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.job.Service;
-
-@Deprecated
-public class PickupServiceTest {
-
-    private Service service;
-
-    private PickupServiceDEPRECATED pickup;
-
-    @Before
-    public void doBefore() {
-        service = new Service.Builder("service").setLocation(Location.newInstance("loc")).
-                        setTimeWindow(TimeWindow.newInstance(1., 2.)).
-                        addSizeDimension(0, 10).addSizeDimension(1, 100).addSizeDimension(2, 1000).build();
-        pickup = new PickupServiceDEPRECATED(service);
-        pickup.setTheoreticalEarliestOperationStartTime(service.getTimeWindow().getStart());
-        pickup.setTheoreticalLatestOperationStartTime(service.getTimeWindow().getEnd());
-    }
-
-    @Test
-    public void whenCallingCapacity_itShouldReturnCorrectCapacity() {
-        assertEquals(10, pickup.getLoadChange().get(0));
-        assertEquals(100, pickup.getLoadChange().get(1));
-        assertEquals(1000, pickup.getLoadChange().get(2));
-    }
-
-
-    @Test
-    public void whenStartIsIniWithEarliestStart_itShouldBeSetCorrectly() {
-        assertEquals(1., pickup.getTheoreticalEarliestOperationStartTime(), 0.01);
-    }
-
-    @Test
-    public void whenStartIsIniWithLatestStart_itShouldBeSetCorrectly() {
-        assertEquals(2., pickup.getTheoreticalLatestOperationStartTime(), 0.01);
-    }
-
-    @Test
-    public void whenSettingArrTime_itShouldBeSetCorrectly() {
-        pickup.setArrTime(4.0);
-        assertEquals(4., pickup.getArrTime(), 0.01);
-    }
-
-    @Test
-    public void whenSettingEndTime_itShouldBeSetCorrectly() {
-        pickup.setEndTime(5.0);
-        assertEquals(5., pickup.getEndTime(), 0.01);
-    }
-
-    @Test
-    public void whenIniLocationId_itShouldBeSetCorrectly() {
-        assertEquals("loc", pickup.getLocation().getId());
-    }
-
-    @Test
-    public void whenCopyingStart_itShouldBeDoneCorrectly() {
-        PickupServiceDEPRECATED copy = (PickupServiceDEPRECATED) pickup.duplicate();
-        assertEquals(1., copy.getTheoreticalEarliestOperationStartTime(), 0.01);
-        assertEquals(2., copy.getTheoreticalLatestOperationStartTime(), 0.01);
-        assertEquals("loc", copy.getLocation().getId());
-        assertEquals(10, copy.getLoadChange().get(0));
-        assertEquals(100, copy.getLoadChange().get(1));
-        assertEquals(1000, copy.getLoadChange().get(2));
-        assertTrue(copy != pickup);
-    }
-
-}
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupShipmentTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupShipmentTest.java
deleted file mode 100644
index 8e28c5b71..000000000
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupShipmentTest.java
+++ /dev/null
@@ -1,100 +0,0 @@
-/*
- * Licensed to GraphHopper GmbH under one or more contributor
- * license agreements. See the NOTICE file distributed with this work for
- * additional information regarding copyright ownership.
- *
- * GraphHopper GmbH licenses this file to you under the Apache License,
- * Version 2.0 (the "License"); you may not use this file except in
- * compliance with the License. You may obtain a copy of the License at
- *
- *       http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.graphhopper.jsprit.core.problem.solution.route.activity;
-
-import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
-import org.junit.Before;
-import org.junit.Test;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-
-public class PickupShipmentTest {
-
-    private PickupShipmentDEPRECATED pickup;
-
-    @Before
-    public void doBefore() {
-        Shipment shipment = Shipment.Builder.newInstance("shipment").setPickupLocation(Location.Builder.newInstance().setId("pickupLoc").build())
-            .setDeliveryLocation(Location.newInstance("deliveryLoc"))
-            .setPickupTimeWindow(TimeWindow.newInstance(1., 2.))
-            .setDeliveryTimeWindow(TimeWindow.newInstance(3., 4.))
-            .addSizeDimension(0, 10).addSizeDimension(1, 100).addSizeDimension(2, 1000).build();
-        pickup = new PickupShipmentDEPRECATED(shipment);
-        pickup.setTheoreticalEarliestOperationStartTime(shipment.getPickupTimeWindow().getStart());
-        pickup.setTheoreticalLatestOperationStartTime(shipment.getPickupTimeWindow().getEnd());
-    }
-
-    @Test
-    public void whenCallingCapacity_itShouldReturnCorrectCapacity() {
-        assertEquals(10, pickup.getLoadChange().get(0));
-        assertEquals(100, pickup.getLoadChange().get(1));
-        assertEquals(1000, pickup.getLoadChange().get(2));
-    }
-
-    @Test
-    public void whenStartIsIniWithEarliestStart_itShouldBeSetCorrectly() {
-        assertEquals(1., pickup.getTheoreticalEarliestOperationStartTime(), 0.01);
-    }
-
-    @Test
-    public void whenStartIsIniWithLatestStart_itShouldBeSetCorrectly() {
-        assertEquals(2., pickup.getTheoreticalLatestOperationStartTime(), 0.01);
-    }
-
-    @Test
-    public void whenSettingArrTime_itShouldBeSetCorrectly() {
-        pickup.setArrTime(4.0);
-        assertEquals(4., pickup.getArrTime(), 0.01);
-    }
-
-    @Test
-    public void whenSettingEndTime_itShouldBeSetCorrectly() {
-        pickup.setEndTime(5.0);
-        assertEquals(5., pickup.getEndTime(), 0.01);
-    }
-
-    @Test
-    public void whenIniLocationId_itShouldBeSetCorrectly() {
-        assertEquals("pickupLoc", pickup.getLocation().getId());
-    }
-
-    @Test
-    public void whenCopyingStart_itShouldBeDoneCorrectly() {
-        PickupShipmentDEPRECATED copy = (PickupShipmentDEPRECATED) pickup.duplicate();
-        assertEquals(1., copy.getTheoreticalEarliestOperationStartTime(), 0.01);
-        assertEquals(2., copy.getTheoreticalLatestOperationStartTime(), 0.01);
-        assertEquals("pickupLoc", copy.getLocation().getId());
-        assertEquals(10, copy.getLoadChange().get(0));
-        assertEquals(100, copy.getLoadChange().get(1));
-        assertEquals(1000, copy.getLoadChange().get(2));
-        assertTrue(copy != pickup);
-    }
-
-
-    @Test
-    public void whenGettingCapacity_itShouldReturnItCorrectly() {
-        Shipment shipment = Shipment.Builder.newInstance("s").setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).setDeliveryLocation(Location.newInstance("delLoc"))
-            .addSizeDimension(0, 10).addSizeDimension(1, 100).build();
-        PickupShipmentDEPRECATED pick = new PickupShipmentDEPRECATED(shipment);
-        assertEquals(10, pick.getLoadChange().get(0));
-        assertEquals(100, pick.getLoadChange().get(1));
-    }
-
-}
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityNEWTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityNEWTest.java
deleted file mode 100644
index 59a378e7b..000000000
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityNEWTest.java
+++ /dev/null
@@ -1,111 +0,0 @@
-/*
- * Licensed to GraphHopper GmbH under one or more contributor
- * license agreements. See the NOTICE file distributed with this work for
- * additional information regarding copyright ownership.
- *
- * GraphHopper GmbH licenses this file to you under the Apache License,
- * Version 2.0 (the "License"); you may not use this file except in
- * compliance with the License. You may obtain a copy of the License at
- *
- *       http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.graphhopper.jsprit.core.problem.solution.route.activity;
-
-import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.job.Service;
-import org.junit.Assert;
-import org.junit.Before;
-import org.junit.Test;
-
-import static org.junit.Assert.*;
-
-
-public class ServiceActivityNEWTest {
-
-    private Service service;
-
-    private ServiceActivityNEW serviceActivity;
-
-    @Before
-    public void doBefore() {
-        service = new Service.Builder("service").setLocation(Location.newInstance("loc")).
-            setTimeWindow(TimeWindow.newInstance(1., 2.)).
-            addSizeDimension(0, 10).addSizeDimension(1, 100).addSizeDimension(2, 1000).build();
-        serviceActivity = ServiceActivityNEW.newInstance(service);
-        serviceActivity.setTheoreticalEarliestOperationStartTime(service.getTimeWindow().getStart());
-        serviceActivity.setTheoreticalLatestOperationStartTime(service.getTimeWindow().getEnd());
-    }
-
-    @Test
-    public void whenCallingCapacity_itShouldReturnCorrectCapacity() {
-        Assert.assertEquals(10, serviceActivity.getLoadChange().get(0));
-        Assert.assertEquals(100, serviceActivity.getLoadChange().get(1));
-        Assert.assertEquals(1000, serviceActivity.getLoadChange().get(2));
-    }
-
-
-    @Test
-    public void whenStartIsIniWithEarliestStart_itShouldBeSetCorrectly() {
-        assertEquals(1., serviceActivity.getTheoreticalEarliestOperationStartTime(), 0.01);
-    }
-
-    @Test
-    public void whenStartIsIniWithLatestStart_itShouldBeSetCorrectly() {
-        assertEquals(2., serviceActivity.getTheoreticalLatestOperationStartTime(), 0.01);
-    }
-
-    @Test
-    public void whenSettingArrTime_itShouldBeSetCorrectly() {
-        serviceActivity.setArrTime(4.0);
-        assertEquals(4., serviceActivity.getArrTime(), 0.01);
-    }
-
-    @Test
-    public void whenSettingEndTime_itShouldBeSetCorrectly() {
-        serviceActivity.setEndTime(5.0);
-        assertEquals(5., serviceActivity.getEndTime(), 0.01);
-    }
-
-    @Test
-    public void whenIniLocationId_itShouldBeSetCorrectly() {
-        assertEquals("loc", serviceActivity.getLocation().getId());
-    }
-
-    @Test
-    public void whenCopyingStart_itShouldBeDoneCorrectly() {
-        ServiceActivityNEW copy = (ServiceActivityNEW) serviceActivity.duplicate();
-        assertEquals(1., copy.getTheoreticalEarliestOperationStartTime(), 0.01);
-        assertEquals(2., copy.getTheoreticalLatestOperationStartTime(), 0.01);
-        assertEquals("loc", copy.getLocation().getId());
-        assertTrue(copy != serviceActivity);
-    }
-
-
-    @Test
-    public void whenTwoDeliveriesHaveTheSameUnderlyingJob_theyAreEqual() {
-        Service s1 = new Service.Builder("s").setLocation(Location.newInstance("loc")).build();
-        Service s2 = new Service.Builder("s").setLocation(Location.newInstance("loc")).build();
-
-        ServiceActivityNEW d1 = ServiceActivityNEW.newInstance(s1);
-        ServiceActivityNEW d2 = ServiceActivityNEW.newInstance(s2);
-
-        assertTrue(d1.equals(d2));
-    }
-
-    @Test
-    public void whenTwoDeliveriesHaveTheDifferentUnderlyingJob_theyAreNotEqual() {
-        Service s1 = new Service.Builder("s").setLocation(Location.newInstance("loc")).build();
-        Service s2 = new Service.Builder("s1").setLocation(Location.newInstance("loc")).build();
-
-        ServiceActivityNEW d1 = ServiceActivityNEW.newInstance(s1);
-        ServiceActivityNEW d2 = ServiceActivityNEW.newInstance(s2);
-
-        assertFalse(d1.equals(d2));
-    }
-}
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityTest.java
new file mode 100644
index 000000000..d68d74b8e
--- /dev/null
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityTest.java
@@ -0,0 +1,45 @@
+/*
+ * Licensed to GraphHopper GmbH under one or more contributor
+ * license agreements. See the NOTICE file distributed with this work for
+ * additional information regarding copyright ownership.
+ *
+ * GraphHopper GmbH licenses this file to you under the Apache License,
+ * Version 2.0 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.graphhopper.jsprit.core.problem.solution.route.activity;
+
+import static org.junit.Assert.assertEquals;
+
+import org.junit.Before;
+
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.job.Service;
+
+public class ServiceActivityTest extends JobActivityTest {
+
+    @Before
+    public void doBefore() {
+        service = new Service.Builder("service").setLocation(Location.newInstance("loc")).
+                        setTimeWindow(TimeWindow.newInstance(1., 2.)).
+                        setServiceTime(20d).
+                        addSizeDimension(0, 10).addSizeDimension(1, 100).addSizeDimension(2, 1000).build();
+        createActivity(service);
+    }
+
+    @Override
+    public void whenCallingCapacity_itShouldReturnCorrectCapacity() {
+        assertEquals(10, activity.getLoadChange().get(0));
+        assertEquals(100, activity.getLoadChange().get(1));
+        assertEquals(1000, activity.getLoadChange().get(2));
+    }
+
+}
