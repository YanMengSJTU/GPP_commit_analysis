diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/PickupAndDeliverShipmentLoadActivityLevelConstraint.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/PickupAndDeliverShipmentLoadActivityLevelConstraint.java
index 144ae0749..e18807460 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/PickupAndDeliverShipmentLoadActivityLevelConstraint.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/PickupAndDeliverShipmentLoadActivityLevelConstraint.java
@@ -19,9 +19,9 @@
 
 import com.graphhopper.jsprit.core.algorithm.state.InternalStates;
 import com.graphhopper.jsprit.core.problem.SizeDimension;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.*;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.Start;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.state.RouteAndActivityStateGetter;
 
 
@@ -37,7 +37,6 @@
 
     private RouteAndActivityStateGetter stateManager;
 
-    private SizeDimension defaultValue;
 
     /**
      * Constructs the constraint ensuring capacity constraint at each activity.
@@ -50,118 +49,29 @@
     public PickupAndDeliverShipmentLoadActivityLevelConstraint(RouteAndActivityStateGetter stateManager) {
         super();
         this.stateManager = stateManager;
-        defaultValue = SizeDimension.Builder.newInstance().build();
     }
 
-    // private String visualize(JobInsertionContext iFacts, TourActivity
-    // prevAct, TourActivity newAct,
-    // TourActivity nextAct) {
-    // System.out.println(prevAct);
-    // System.out.println(newAct);
-    // System.out.println(nextAct);
-    // StringBuilder sb = new StringBuilder();
-    // for (TourActivity a : iFacts.getRoute().getActivities()) {
-    // if (a.equals(nextAct)) {
-    // if (sb.length() != 0) {
-    // sb.append(" -> ");
-    // }
-    // sb.append("[").append(newAct.getName()).append("]");
-    // }
-    // if (sb.length() != 0) {
-    // sb.append(" -> ");
-    // }
-    // sb.append(a.getName());
-    // }
-    //
-    // return sb.toString();
-    // }
+
 
     /**
      * Checks whether there is enough capacity to insert newAct between prevAct and nextAct.
      */
     @Override
     public ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prevAct, TourActivity newAct, TourActivity nextAct, double prevActDepTime) {
-        // ----> REMARK - Balage - This replaces the following check? Do we
-        // still need it? It's fragile and uses an instantof so it probably
-        // wrong!
-        // if (!(newAct instanceof PickupShipmentDEPRECATED) && !(newAct
-        // instanceof DeliverShipmentDEPRECATED))
-        // return ConstraintsStatus.FULFILLED;
-        if (!(newAct instanceof JobActivity)) {
-            return ConstraintsStatus.FULFILLED;
-        }
-        JobActivity newJobAct = (JobActivity) newAct;
-        if (!(newJobAct.getJob() instanceof Shipment)) {
-            return ConstraintsStatus.FULFILLED;
-        }
-        // <--- Check ends here
-
-        // System.out.println(visualize(iFacts, prevAct, newAct, nextAct));
         SizeDimension loadAtPrevAct;
         if (prevAct instanceof Start) {
             loadAtPrevAct = stateManager.getRouteState(iFacts.getRoute(), InternalStates.LOAD_AT_BEGINNING, SizeDimension.class);
-            if (loadAtPrevAct == null) {
-                loadAtPrevAct = defaultValue;
-            }
         } else {
             loadAtPrevAct = stateManager.getActivityState(prevAct, InternalStates.LOAD, SizeDimension.class);
-            if (loadAtPrevAct == null) {
-                loadAtPrevAct = defaultValue;
-            }
         }
-        SizeDimension vehicleCapacityDimensions = iFacts.getNewVehicle().getType().getCapacityDimensions();
-
-        if (newAct instanceof PickupActivityNEW) {
-            SizeDimension newCapacity = loadAtPrevAct.add(newAct.getLoadChange());
-            if (!newCapacity.isLessOrEqual(vehicleCapacityDimensions)) {
-                return ConstraintsStatus.NOT_FULFILLED;
-            }
+        loadAtPrevAct = (loadAtPrevAct != null) ? loadAtPrevAct : SizeDimension.EMPTY;
+        SizeDimension capacityOfNewVehicle = iFacts.getNewVehicle().getType().getCapacityDimensions();
+        if (!(loadAtPrevAct.add(newAct.getLoadChange().getPositiveDimensions()).isLessOrEqual(capacityOfNewVehicle))) {
+            return ConstraintsStatus.NOT_FULFILLED;
         }
-        if (newAct instanceof DeliveryActivityNEW) {
-            SizeDimension newCapacity = loadAtPrevAct.add(newAct.getLoadChange().abs());
-            if (!newCapacity.isLessOrEqual(vehicleCapacityDimensions)) {
-                return ConstraintsStatus.NOT_FULFILLED_BREAK;
-            }
+        if (!(loadAtPrevAct.add(newAct.getLoadChange().getNegativeDimensions().abs()).isLessOrEqual(capacityOfNewVehicle))) {
+            return ConstraintsStatus.NOT_FULFILLED_BREAK;
         }
         return ConstraintsStatus.FULFILLED;
     }
-
-    // OLD BODY
-    // if (!(newAct instanceof PickupShipmentDEPRECATED) && !(newAct instanceof
-    // DeliverShipmentDEPRECATED)) {
-    // return ConstraintsStatus.FULFILLED;
-    // }
-    // // System.out.println(visualize(iFacts, prevAct, newAct, nextAct));
-    // SizeDimension loadAtPrevAct;
-    // if (prevAct instanceof Start) {
-    // loadAtPrevAct = stateManager.getRouteState(iFacts.getRoute(),
-    // InternalStates.LOAD_AT_BEGINNING, SizeDimension.class);
-    // if (loadAtPrevAct == null) {
-    // loadAtPrevAct = defaultValue;
-    // }
-    // } else {
-    // loadAtPrevAct = stateManager.getActivityState(prevAct,
-    // InternalStates.LOAD, SizeDimension.class);
-    // if (loadAtPrevAct == null) {
-    // loadAtPrevAct = defaultValue;
-    // }
-    // }
-    // SizeDimension vehicleCapacityDimensions =
-    // iFacts.getNewVehicle().getType().getCapacityDimensions();
-    //
-    // if (newAct instanceof PickupShipmentDEPRECATED) {
-    // SizeDimension newCapacity = SizeDimension.addup(loadAtPrevAct, newAct.getSize());
-    // if (!newCapacity.isLessOrEqual(vehicleCapacityDimensions)) {
-    // return ConstraintsStatus.NOT_FULFILLED;
-    // }
-    // }
-    // if (newAct instanceof DeliverShipmentDEPRECATED) {
-    // SizeDimension newCapacity = SizeDimension.addup(loadAtPrevAct,
-    // SizeDimension.invert(newAct.getSize()));
-    // if (!newCapacity.isLessOrEqual(vehicleCapacityDimensions)) {
-    // return ConstraintsStatus.NOT_FULFILLED_BREAK;
-    // }
-    // }
-    // return ConstraintsStatus.FULFILLED;
-
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceDeliveriesFirstConstraint.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceDeliveriesFirstConstraint.java
index 3a34437a0..a29f74f7f 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceDeliveriesFirstConstraint.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceDeliveriesFirstConstraint.java
@@ -30,17 +30,7 @@
 
     @Override
     public ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prevAct, TourActivity newAct, TourActivity nextAct, double prevActDepTime) {
-        // ConstraintsStatus oldRes = old(prevAct, newAct, nextAct);
         ConstraintsStatus newRes = newMethod(prevAct, newAct, nextAct);
-        // if (oldRes != newRes) {
-        // newRes = newMethod(prevAct, newAct, nextAct);
-        // }
-        // System.out.format("%14s (%4s) > %14s (%4s) > %14s (%4s) ====> %20s :
-        // %20s (%4s)\n",
-        // prevAct.getName(), isShipment(prevAct),
-        // newAct.getName(), isShipment(newAct),
-        // nextAct.getName(), isShipment(nextAct),
-        // oldRes, newRes, (oldRes == newRes));
         return newRes;
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadActivityLevelConstraint.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadActivityLevelConstraint.java
index 2f8aede36..7bc8cd3a0 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadActivityLevelConstraint.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadActivityLevelConstraint.java
@@ -19,7 +19,6 @@
 
 import com.graphhopper.jsprit.core.algorithm.state.InternalStates;
 import com.graphhopper.jsprit.core.problem.SizeDimension;
-import com.graphhopper.jsprit.core.problem.SizeDimension.SizeDimensionSign;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.Start;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
@@ -37,12 +36,9 @@
 
     private RouteAndActivityStateGetter stateManager;
 
-    private SizeDimension defaultValue;
-
     public ServiceLoadActivityLevelConstraint(RouteAndActivityStateGetter stateManager) {
         super();
         this.stateManager = stateManager;
-        defaultValue = SizeDimension.Builder.newInstance().build();
     }
 
     @Override
@@ -51,46 +47,27 @@ public ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prev
         SizeDimension prevMaxLoad;
         if (prevAct instanceof Start) {
             futureMaxLoad = stateManager.getRouteState(iFacts.getRoute(), InternalStates.MAXLOAD, SizeDimension.class);
-            if (futureMaxLoad == null) {
-                futureMaxLoad = defaultValue;
-            }
             prevMaxLoad = stateManager.getRouteState(iFacts.getRoute(), InternalStates.LOAD_AT_BEGINNING, SizeDimension.class);
-            if (prevMaxLoad == null) {
-                prevMaxLoad = defaultValue;
-            }
         } else {
             futureMaxLoad = stateManager.getActivityState(prevAct, InternalStates.FUTURE_MAXLOAD, SizeDimension.class);
-            if (futureMaxLoad == null) {
-                futureMaxLoad = defaultValue;
-            }
             prevMaxLoad = stateManager.getActivityState(prevAct, InternalStates.PAST_MAXLOAD, SizeDimension.class);
-            if (prevMaxLoad == null) {
-                prevMaxLoad = defaultValue;
-            }
-
         }
-
-        if (newAct.getLoadChange().sign() == SizeDimensionSign.POSITIVE) {
-            if (!newAct.getLoadChange().add(futureMaxLoad).isLessOrEqual(
-                iFacts.getNewVehicle().getType().getCapacityDimensions())) {
-                return ConstraintsStatus.NOT_FULFILLED;
-            }
+        futureMaxLoad = (futureMaxLoad != null) ? futureMaxLoad : SizeDimension.EMPTY;
+        prevMaxLoad = (prevMaxLoad != null) ? prevMaxLoad : SizeDimension.EMPTY;
+        SizeDimension capacityOfNewVehicle = iFacts.getNewVehicle().getType().getCapacityDimensions();
+        if (!futureMaxLoad.add(newAct.getLoadChange().getPositiveDimensions()).isLessOrEqual(capacityOfNewVehicle)) {
+            return ConstraintsStatus.NOT_FULFILLED;
         }
-
-        /*
-         * REMARK - Balage - This negating could be a bottleneck if called too
-         * many times. Has to be mesured. If rational, the activities could
-         * store their size as absolute value as well. (We could rename
-         * getSize() as getCargoChange(), and the absolute value as
-         * getCargoSize(). For positive or zero activities as Service and Pickup
-         * they could refer to the same object.)
-         */
-        if (newAct.getLoadChange().sign() != SizeDimensionSign.POSITIVE) {
-            if (!newAct.getLoadChange().abs().add(prevMaxLoad).isLessOrEqual(
-                iFacts.getNewVehicle().getType().getCapacityDimensions())) {
-                return ConstraintsStatus.NOT_FULFILLED_BREAK;
-            }
+        if (!prevMaxLoad.add(newAct.getLoadChange().getNegativeDimensions().abs()).isLessOrEqual(capacityOfNewVehicle)) {
+            return ConstraintsStatus.NOT_FULFILLED_BREAK;
         }
+//        if(capacityOfNewVehicle)
+//        if (newAct.getLoadChange().sign() != SizeDimensionSign.POSITIVE) {
+//            if (!newAct.getLoadChange().abs().add(prevMaxLoad).isLessOrEqual(
+//                capacityOfNewVehicle)) {
+//                return ConstraintsStatus.NOT_FULFILLED_BREAK;
+//            }
+//        }
         return ConstraintsStatus.FULFILLED;
     }
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadRouteLevelConstraint.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadRouteLevelConstraint.java
index b9e027fb2..70704caff 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadRouteLevelConstraint.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadRouteLevelConstraint.java
@@ -61,33 +61,6 @@ public boolean fulfilled(JobInsertionContext insertionContext) {
         }
         return true;
 
-//        if(loadAtDepot.add())
-//        if(insertionContext.getJob().getInitialPickup() < 0){
-//
-//        }
-//        else {
-//
-//        }
-//        if (insertionContext.getJob() instanceof Delivery) {
-//            SizeDimension loadAtDepot = stateManager.getRouteState(insertionContext.getRoute(), InternalStates.LOAD_AT_BEGINNING, SizeDimension.class);
-//            if (loadAtDepot == null) {
-//                loadAtDepot = SizeDimension.EMPTY;
-//            }
-//            if (!loadAtDepot.add(insertionContext.getJob().getSize())
-//                .isLessOrEqual(capacityOfNewVehicle)) {
-//                return false;
-//            }
-//        } else if (insertionContext.getJob() instanceof Pickup || insertionContext.getJob() instanceof Service) {
-//            SizeDimension loadAtEnd = stateManager.getRouteState(insertionContext.getRoute(), InternalStates.LOAD_AT_END, SizeDimension.class);
-//            if (loadAtEnd == null) {
-//                loadAtEnd = SizeDimension.EMPTY;
-//            }
-//            if (!loadAtEnd.add(insertionContext.getJob().getSize())
-//                .isLessOrEqual(capacityOfNewVehicle)) {
-//                return false;
-//            }
-//        }
-//        return true;
     }
 
 }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/FirstCustomJobWithMultipleActivitiesExample.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/FirstCustomJobWithMultipleActivitiesExample.java
index 9a5ec8df7..ff4748261 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/FirstCustomJobWithMultipleActivitiesExample.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/FirstCustomJobWithMultipleActivitiesExample.java
@@ -19,8 +19,8 @@
 package com.graphhopper.jsprit.core.algorithm;
 
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
-import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
@@ -75,4 +75,42 @@ public void shouldNotIgnoresCapacity() {
         SolutionPrinter.print(vrp, solution, SolutionPrinter.Print.VERBOSE);
         Assert.assertFalse(solution.getUnassignedJobs().isEmpty());
     }
+
+    @Test
+    public void shouldNotIgnoresCapacityWithMixedPicksAndDeliveries() {
+        CustomPickupJob cj = CustomPickupJob.Builder.newInstance("job")
+            .addPickup(Location.newInstance(10, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).build())
+            .addPickup(Location.newInstance(5, 0), SizeDimension.Builder.newInstance().addDimension(0, 2).build())
+            .addDelivery(Location.newInstance(20, 0), SizeDimension.Builder.newInstance().addDimension(0, 3).build())
+            .build();
+        VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0, 2).build();
+        Vehicle v = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance(0, 0)).build();
+        VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance()
+            .addJob(cj).addVehicle(v).build();
+        VehicleRoutingAlgorithm vra = Jsprit.createAlgorithm(vrp);
+        vra.setMaxIterations(10);
+        VehicleRoutingProblemSolution solution = Solutions.bestOf(vra.searchSolutions());
+        SolutionPrinter.print(vrp, solution, SolutionPrinter.Print.VERBOSE);
+        Assert.assertFalse(solution.getUnassignedJobs().isEmpty());
+    }
+
+    @Test
+    public void shouldNotIgnoresCapacityWithMixedPicksAndDeliveriesV2() {
+        CustomPickupJob cj = CustomPickupJob.Builder.newInstance("job")
+            .addPickup(Location.newInstance(10, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).build())
+            .addPickup(Location.newInstance(5, 0), SizeDimension.Builder.newInstance().addDimension(0, 2).build())
+            .addDelivery(Location.newInstance(20, 0), SizeDimension.Builder.newInstance().addDimension(0, 3).build())
+            .build();
+        Assert.assertEquals(SizeDimension.Builder.newInstance().addDimension(0, 0).build(), cj.getSizeAtStart());
+        Assert.assertEquals(SizeDimension.Builder.newInstance().addDimension(0, 0).build(), cj.getSizeAtEnd());
+        VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0, 3).build();
+        Vehicle v = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance(0, 0)).build();
+        VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance()
+            .addJob(cj).addVehicle(v).build();
+        VehicleRoutingAlgorithm vra = Jsprit.createAlgorithm(vrp);
+        vra.setMaxIterations(10);
+        VehicleRoutingProblemSolution solution = Solutions.bestOf(vra.searchSolutions());
+        SolutionPrinter.print(vrp, solution, SolutionPrinter.Print.VERBOSE);
+        Assert.assertTrue(solution.getUnassignedJobs().isEmpty());
+    }
 }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/CustomPickupJob.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/CustomPickupJob.java
index 1f3d0bd67..54d6ca5bf 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/CustomPickupJob.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/CustomPickupJob.java
@@ -18,11 +18,12 @@
 
 package com.graphhopper.jsprit.core.util;
 
-import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.job.AbstractJob;
 import com.graphhopper.jsprit.core.problem.job.JobActivityList;
 import com.graphhopper.jsprit.core.problem.job.SequentialJobActivityList;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivityNEW;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivityNEW;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 
@@ -42,6 +43,8 @@
 
         List<SizeDimension> cap = new ArrayList<>();
 
+        List<String> types = new ArrayList<>();
+
         public BuilderBase(String id) {
             super(id);
         }
@@ -49,6 +52,14 @@ public BuilderBase(String id) {
         public CustomPickupJob.BuilderBase<T, B> addPickup(Location location, SizeDimension capacity) {
             locs.add(location);
             cap.add(capacity);
+            types.add("pickup");
+            return this;
+        }
+
+        public CustomPickupJob.BuilderBase<T, B> addDelivery(Location location, SizeDimension capacity) {
+            locs.add(location);
+            cap.add(capacity);
+            types.add("delivery");
             return this;
         }
 
@@ -60,6 +71,10 @@ public BuilderBase(String id) {
             return cap;
         }
 
+        public List<String> getTypes() {
+            return types;
+        }
+
         protected void validate() {
 
         }
@@ -103,7 +118,10 @@ protected void createActivities(JobBuilder<? extends AbstractJob, ?> jobBuilder)
         CustomPickupJob.Builder builder = (CustomPickupJob.Builder) jobBuilder;
         JobActivityList list = new SequentialJobActivityList(this);
         for (int i = 0; i < builder.getLocs().size(); i++) {
-            list.addActivity(new PickupActivityNEW(this, "pick", builder.getLocs().get(i), 0, builder.getCaps().get(i), Arrays.asList(TimeWindow.ETERNITY)));
+            if (builder.getTypes().get(i).equals("pickup")) {
+                list.addActivity(new PickupActivityNEW(this, "pick", builder.getLocs().get(i), 0, builder.getCaps().get(i), Arrays.asList(TimeWindow.ETERNITY)));
+            } else
+                list.addActivity(new DeliveryActivityNEW(this, "delivery", builder.getLocs().get(i), 0, builder.getCaps().get(i).invert(), Arrays.asList(TimeWindow.ETERNITY)));
         }
         setActivities(list);
     }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/LiLimReader.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/LiLimReader.java
index 3b53bb674..71a21e970 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/LiLimReader.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/LiLimReader.java
@@ -111,7 +111,7 @@ public LiLimReader(Builder builder, int fixCosts) {
     public void read(InputStream inputStream) {
         readShipments(inputStream);
         buildShipments();
-        VehicleTypeImpl type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0, vehicleCapacity)
+        VehicleTypeImpl type = VehicleTypeImpl.Builder.newInstance("types").addCapacityDimension(0, vehicleCapacity)
             .setCostPerDistance(1.0).setFixedCost(fixCosts).build();
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("vehicle")
             .setEarliestStart(depotOpeningTime).setLatestArrival(depotClosingTime)
