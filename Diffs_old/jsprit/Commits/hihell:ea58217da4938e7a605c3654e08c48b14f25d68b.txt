diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/BaiduDistance.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/BaiduDistance.java
similarity index 97%
rename from jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/BaiduDistance.java
rename to jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/BaiduDistance.java
index 9219eb58b..8975c2b68 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/BaiduDistance.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/util/BaiduDistance.java
@@ -1,4 +1,4 @@
-package com.graphhopper.jsprit.examples;
+package com.graphhopper.jsprit.core.util;
 
 import com.google.gson.JsonArray;
 import com.google.gson.JsonObject;
@@ -14,10 +14,6 @@
 import com.sun.tools.javac.util.Pair;
 import com.sun.tools.javah.Util;
 import com.sun.tools.jdi.DoubleTypeImpl;
-import scala.util.parsing.combinator.testing.Str;
-import scala.util.parsing.combinator.token.StdTokens;
-import scala.util.parsing.json.JSONArray;
-import scala.util.parsing.json.JSONObject;
 
 
 import java.io.*;
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EnRouteRealTime.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EnRouteRealTime.java
index b87311f4a..155b7ec29 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EnRouteRealTime.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EnRouteRealTime.java
@@ -4,7 +4,6 @@
 import java.io.BufferedReader;
 import java.io.File;
 import java.io.FileReader;
-import java.lang.reflect.Array;
 import java.util.*;
 
 import com.google.gson.JsonObject;
@@ -16,8 +15,6 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.io.VrpXMLWriter;
-import com.graphhopper.jsprit.core.problem.job.Delivery;
-import com.graphhopper.jsprit.core.problem.job.Pickup;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.Builder;
 
 import com.graphhopper.jsprit.core.problem.job.Shipment;
@@ -29,12 +26,10 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.reporting.SolutionPrinter;
+import com.graphhopper.jsprit.core.util.BaiduDistance;
 import com.graphhopper.jsprit.core.util.Coordinate;
 import com.graphhopper.jsprit.core.util.Solutions;
 
-import com.graphhopper.jsprit.core.util.ManhattanCosts;
-import sun.jvm.hotspot.code.ConstantOopReadValue;
-
 /**
  * Created by jiusi on 16/4/1.
  */
@@ -219,32 +214,6 @@ public String safeGetAsString(JsonObject j, String stringFieldName) {
         }
     }
 
-    public void batchProblemBuilder(String inputPath) {
-        // generate shipments
-        EnRouteRealTime r = new EnRouteRealTime();
-
-        r.bizNameCoorMap.put("格林沙拉（自销）", new double[]{39.936935, 116.460901});
-        r.bizNameCoorMap.put("恩之方", new double[]{39.940916, 116.451592});
-        r.bizNameCoorMap.put("念客", new double[]{39.923294, 116.466292});
-        r.bizNameCoorMap.put("拌物沙拉", new double[]{39.916824, 116.462717});
-        r.bizNameCoorMap.put("宇甜品", new double[]{39.936895, 116.460746});
-        r.bizNameCoorMap.put("拌物", new double[]{39.917, 116.463035});
-        r.bizNameCoorMap.put("格林沙拉", new double[]{39.936935, 116.460901});
-        r.bizNameCoorMap.put("匹考克", new double[]{39.924461, 116.45983});
-        r.bizNameCoorMap.put("臻享甜品", new double[]{39.929068, 116.484437});
-        r.bizNameCoorMap.put("爱贝里", new double[]{39.942715, 116.461778});
-        r.bizNameCoorMap.put("仙juice", new double[]{39.92435, 116.463573});
-
-        // make that vrp problem and plot it
-
-        // modify plot function as let it show receiver info
-        ArrayList<ArrayList<JsonObject>> lists = r.readFile(inputPath);
-
-        double[] dormitary = {39.914, 116.502};
-        r.enroute(lists.get(0), 20, dormitary);
-    }
-
-
     public void realTimeProblemBuilder(ArrayList<EnRouteVehicleContext> vehicleContexts, ArrayList<Shipment> newShipments) {
         // 0. get all vehicle's status from API and make EnRouteContext
         // status: picked up, location, all pending plans
@@ -278,7 +247,7 @@ public void realTimeProblemBuilder(ArrayList<EnRouteVehicleContext> vehicleConte
                 double[] deliTW = onGoingPickUp.deliverTimeWindowAlgo;
 
                 Shipment shipment = Shipment.Builder.newInstance(
-                        onGoingPickUp.customerName + ',' + onGoingPickUp.customerPhone + ',' + onGoingPickUp.customerAddress
+                        "pickup:" + onGoingPickUp.pickupAddress + ", deliver:" + onGoingPickUp.deliverAddress
                     )
                     .addSizeDimension(0, 1)
                     .setPickupLocation(loc(Coordinate.newInstance(pickLoc[0], pickLoc[1])))
@@ -288,33 +257,27 @@ public void realTimeProblemBuilder(ArrayList<EnRouteVehicleContext> vehicleConte
                     .addRequiredSkill(vehicleId) // make sure this on going deli will only be taken by that vehicle
                     .build();
 
-//                VehicleRoute initialRoute = VehicleRoute.Builder.newInstance(
-//                    vehicleContext.vehicle
-//                ).addPickup(shipment).addDelivery(shipment).build();
-//
-//                vrpBuilder.addInitialVehicleRoute(initialRoute);
                 vrpBuilder.addJob(shipment);
             }
-
         }
 
-        //  1.2.2 setup picked-ups
-        //  use required skill to make sure on going delivery won't be allocated to other vehicles
+        //  1.2.2 setup picked-ups vre on going delivery won't be allocated to other vehicles
         for (int i = 0; i < vehicleContexts.size(); i++) {
             EnRouteVehicleContext vehicleContext = vehicleContexts.get(i);
             String vehicleId = vehicleContext.vehicleId;
-            ArrayList<EnRouteVehicleContext.ShipmentInfo> pickedUps = vehicleContext.pickedups;
+            ArrayList<EnRouteVehicleContext.ShipmentInfo> pickedupShipmentInfos = vehicleContext.pickedups;
 
-            for (int j = 0; j < pickedUps.size(); j++) {
-                EnRouteVehicleContext.ShipmentInfo pickedUp = pickedUps.get(j);
+            for (int j = 0; j < pickedupShipmentInfos.size(); j++) {
+                EnRouteVehicleContext.ShipmentInfo pickedupShipmentInfo = pickedupShipmentInfos.get(j);
 
-                double[] pickUpLoc = pickedUp.pickupLoc;
-                double[] pickUpTW = pickedUp.pickupTimeWindowAlgo;
-                double[] deliLoc = pickedUp.deliverLoc;
-                double[] deliTW = pickedUp.deliverTimeWindowAlgo;
+                // pickup location is the vehicle context location because it picked it up
+                double[] pickUpLoc = vehicleContext.currentLoc;
+                double[] pickUpTW = pickedupShipmentInfo.pickupTimeWindowAlgo;
+                double[] deliLoc = pickedupShipmentInfo.deliverLoc;
+                double[] deliTW = pickedupShipmentInfo.deliverTimeWindowAlgo;
 
                 Shipment shipment = Shipment.Builder.newInstance(
-                    pickedUp.customerName + ',' + pickedUp.customerPhone + ',' + pickedUp.customerAddress
+                    "pickup:" + pickedupShipmentInfo.pickupAddress + ", deliver:" + pickedupShipmentInfo.deliverAddress
                 )
                     .addSizeDimension(0, 1)
                     .setPickupLocation(loc(Coordinate.newInstance(pickUpLoc[0], pickUpLoc[1])))
@@ -324,7 +287,7 @@ public void realTimeProblemBuilder(ArrayList<EnRouteVehicleContext> vehicleConte
                     .addRequiredSkill(vehicleId)
                     .build();
 
-                VehicleRoute initialRoute = VehicleRoute.Builder.newInstance(
+                VehicleRoute  initialRoute = VehicleRoute.Builder.newInstance(
                     vehicleContext.vehicle
                 ).addPickup(shipment).addDelivery(shipment).build();
 
@@ -357,7 +320,7 @@ public void realTimeProblemBuilder(ArrayList<EnRouteVehicleContext> vehicleConte
     }
 
 
-    public void solutionWriter(VehicleRoutingProblem problem,
+    public static void solutionWriter(VehicleRoutingProblem problem,
                                Collection<VehicleRoutingProblemSolution> solutions,
                                VehicleRoutingProblemSolution bestSolution) {
         new VrpXMLWriter(problem, solutions).write("output/shipment-problem-with-solution.xml");
@@ -381,9 +344,7 @@ public void solutionWriter(VehicleRoutingProblem problem,
         solutionPlotter.plotShipments(true);
         solutionPlotter.plot("output/enRoutePickupAndDeliveryWithMultipleLocationsExample_solution.png", "en-route pickup and delivery");
 
-        new GraphStreamViewer(problem, Solutions.bestOf(solutions)).labelWith(GraphStreamViewer.Label.ACTIVITY).setRenderDelay(100).setRenderShipments(true).display();
-
-
+//        new GraphStreamViewer(problem, Solutions.bestOf(solutions)).labelWith(GraphStreamViewer.Label.ACTIVITY).setRenderDelay(100).setRenderShipments(true).display();
     }
 
     public void showAllBizNames(String inputPath) {
@@ -413,14 +374,6 @@ public void showAllBizNames(String inputPath) {
     }
 
 
-    private static Vehicle getVehicle(String vehicleId, Builder vrpBuilder) {
-        for (Vehicle v : vrpBuilder.getAddedVehicles()) {
-            if (v.getId().equals(vehicleId)) return v;
-        }
-        return null;
-    }
-
-
     public static void main(String[] args) {
         String inputPath = "/Users/jiusi/WebstormProjects/xls2json/output_coor.txt";
 
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EnRouteRealTimeTakeTest.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EnRouteRealTimeTakeTest.java
index 8a9c75980..fd9f40a53 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EnRouteRealTimeTakeTest.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EnRouteRealTimeTakeTest.java
@@ -7,6 +7,7 @@
 import com.graphhopper.jsprit.core.util.Coordinate;
 import com.graphhopper.jsprit.examples.EnRouteRealTime;
 
+import java.lang.reflect.Array;
 import java.util.ArrayList;
 
 /**
@@ -31,11 +32,13 @@ public EnRouteVehicleContext bike1(double currentTimestamp) {
         ArrayList<double[]> deliverTimeWindowTSs = new ArrayList<double[]>();
         deliverTimeWindowTSs.add(new double[]{1459998630.0, 1460002224.0}); // 11:10, 12:10
 
+        ArrayList<String> pickupAddresses = new ArrayList<String>();
+        pickupAddresses.add("建外soho B100");
 
         ArrayList<String> customerNames = new ArrayList<String>();
         customerNames.add("摩码大厦小姐");
-        ArrayList<String> customerAddresses = new ArrayList<String>();
-        customerAddresses.add("摩码大厦301");
+        ArrayList<String> deliverAddresses = new ArrayList<String>();
+        deliverAddresses.add("摩码大厦301");
         ArrayList<String> customerPhones = new ArrayList<String>();
         customerPhones.add("123");
 
@@ -46,7 +49,8 @@ public EnRouteVehicleContext bike1(double currentTimestamp) {
         double[] deliverTimeWindwoTS = {1459999824.0, 1460003424.0}; // 11:30, 12:30
 
         String customerName = "甜水园北里屌丝";
-        String customerAddress = "甜水园北里4栋2单元202";
+        String pickupAddress = "易思凯斯咖啡";
+        String deliverAddress = "甜水园北里4栋2单元202";
         String customerPhone = "444";
 
 
@@ -56,11 +60,11 @@ public EnRouteVehicleContext bike1(double currentTimestamp) {
 
             pickupLocs, deliverLocs,
             pickupTimeWindowTSs, deliverTimeWindowTSs,
-            customerNames, customerPhones, customerAddresses,
+            customerNames, customerPhones, pickupAddresses, deliverAddresses,
 
             pickupLoc, deliverLoc,
             pickupTimeWindowTS, deliverTimeWindwoTS,
-            customerName, customerPhone, customerAddress
+            customerName, customerPhone, pickupAddress, deliverAddress
         );
 
     }
@@ -81,14 +85,17 @@ public EnRouteVehicleContext bike2(double currentTimestamp) {
         deliverTimeWindowTSs.add(new double[]{1459998630.0, 1460002224.0}); // 11:10, 12:10
 
 
+        ArrayList<String> pickupAddresses = new ArrayList<String>();
+        pickupAddresses.add("现代城鲜花店");
+
         ArrayList<String> customerNames = new ArrayList<String>();
         customerNames.add("张菊长");
-        ArrayList<String> customerAddresses = new ArrayList<String>();
-        customerAddresses.add("朝阳区人民政府菊长办公室");
+        ArrayList<String> deliverAddresses = new ArrayList<String>();
+        deliverAddresses.add("朝阳区人民政府菊长办公室");
         ArrayList<String> customerPhones = new ArrayList<String>();
         customerPhones.add("110");
 
-        // 2. on going pickup No on going pickup
+        // 2. No on going pickup
 
         return new EnRouteVehicleContext(
             "bike2", currentTimestamp, //11:40
@@ -96,17 +103,17 @@ public EnRouteVehicleContext bike2(double currentTimestamp) {
 
             pickupLocs, deliverLocs,
             pickupTimeWindowTSs, deliverTimeWindowTSs,
-            customerNames, customerPhones, customerAddresses,
+            customerNames, customerPhones, pickupAddresses, deliverAddresses,
 
             null, null,
             null, null,
-            null, null, null
+            null, null, null, null
         );
 
     }
 
     public Shipment newShipmentWithTW(double[] pickupLoc, double[] deliverLoc, double[] pickupTW, double[] deliverTW,
-                                      String customerName, String customerPhone, String customerAddress, double currentTimestamp) {
+                                      String customerName, String customerPhone, String pickupAddress, String deliverAddress, double currentTimestamp) {
 
         double pstart = pickupTW[0] - currentTimestamp;
         if (pstart < 0) {
@@ -128,9 +135,7 @@ public Shipment newShipmentWithTW(double[] pickupLoc, double[] deliverLoc, doubl
             deliverTW[1] - currentTimestamp
         };
 
-        // 问题是这里的减法会产出负值, 不知道负值会不会对算法有影响, 这个TW的上界很可能是负数,下界如果是负数那么肯定是超时了
-
-        return Shipment.Builder.newInstance("name:" + customerName + " address:" + customerAddress + " phone:" + customerPhone)
+        return Shipment.Builder.newInstance("pickup:" + pickupAddress + ", deliver:" + deliverAddress)
             .addSizeDimension(0, 1)
             .setPickupLocation(loc(Coordinate.newInstance(pickupLoc[0], pickupLoc[1])))
             .setPickupTimeWindow(new TimeWindow(pickupTimeWindowAlgo[0], pickupTimeWindowAlgo[1]))
@@ -152,11 +157,12 @@ public Shipment newShipment(double currentTimestamp) {
 
         String customerName =  "嘉里中心 Ovelia de la Wang";
         String customerPhone = "456";
-        String customerAddress = "嘉里中心1107前台";
+        String pickupAddress = "嘉里中心1107前台";
+        String deliverAddress = "日坛商务楼";
 
         return newShipmentWithTW(pickupLoc, deliverLoc,
             pickupTW, deliverTW,
-            customerName, customerPhone, customerAddress, currentTimestamp);
+            customerName, customerPhone, pickupAddress, deliverAddress, currentTimestamp);
     }
 
 
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EnRouteTestInitRoute.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EnRouteTestInitRoute.java
new file mode 100644
index 000000000..757b561e9
--- /dev/null
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EnRouteTestInitRoute.java
@@ -0,0 +1,88 @@
+package com.graphhopper.jsprit.examples;
+
+import com.graphhopper.jsprit.core.algorithm.VehicleRoutingAlgorithm;
+import com.graphhopper.jsprit.core.algorithm.io.VehicleRoutingAlgorithms;
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
+import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
+import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
+import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
+import com.graphhopper.jsprit.core.util.Coordinate;
+import com.graphhopper.jsprit.core.util.ManhattanCosts;
+import com.graphhopper.jsprit.core.util.Solutions;
+
+import java.lang.reflect.Array;
+import java.util.ArrayList;
+import java.util.Collection;
+
+/**
+ * Created by jiusi on 16/4/12.
+ */
+public class EnRouteTestInitRoute {
+    public static String exampleBase = "/Users/jiusi/IdeaProjects/jsprit/jsprit-examples/";
+
+    public Vehicle buildVehicle(String vehicleId, double[] currentLoc) {
+        VehicleTypeImpl.Builder vehicleTypeBuilder = VehicleTypeImpl.Builder.newInstance("bike")
+            .addCapacityDimension(0, 3);
+        vehicleTypeBuilder.setCostPerDistance(10.0);
+        VehicleType vehicleType = vehicleTypeBuilder.build();
+
+        String staffCurrentCoorStr =  vehicleId + "@[" + currentLoc[0] + "," + currentLoc[1] + "]";
+        VehicleImpl.Builder vehicleBuilder = VehicleImpl.Builder.newInstance(staffCurrentCoorStr);
+        vehicleBuilder.setStartLocation(loc(Coordinate.newInstance(currentLoc[0], currentLoc[1]))).setReturnToDepot(false);
+        vehicleBuilder.setType(vehicleType);
+        vehicleBuilder.addSkill(vehicleId); // make sure the going deli will only be taken by the vehicle
+
+        return vehicleBuilder.build();
+    }
+
+
+    private static Location loc(Coordinate coordinate) {
+        return Location.Builder.newInstance().setCoordinate(coordinate).build();
+    }
+
+    public void test1() {
+        Vehicle v1 = buildVehicle("v1", new double[]{1,5});
+
+        Shipment pickedUpV1 = Shipment.Builder.newInstance("pickedUpV1")
+            .addSizeDimension(0, 1)
+            .setPickupLocation(loc(Coordinate.newInstance(0, 0)))
+            .setDeliveryLocation(loc(Coordinate.newInstance(1, 10)))
+            .setPickupTimeWindow(new TimeWindow(0, 10))
+            .setDeliveryTimeWindow(new TimeWindow(0, 10))
+            .build();
+
+
+        VehicleRoute vehicleRoute = VehicleRoute.Builder.newInstance(v1)
+            .addPickup(pickedUpV1).addDelivery(pickedUpV1).build();
+
+        VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
+        vrpBuilder.addVehicle(v1);
+        vrpBuilder.addInitialVehicleRoute(vehicleRoute);
+
+        vrpBuilder.setRoutingCost(new ManhattanCosts());
+        vrpBuilder.setFleetSize(VehicleRoutingProblem.FleetSize.FINITE);
+
+        VehicleRoutingProblem problem = vrpBuilder.build();
+
+        VehicleRoutingAlgorithm algorithm = VehicleRoutingAlgorithms.readAndCreateAlgorithm(problem, exampleBase + "input/algorithmConfig.xml");
+
+        Collection<VehicleRoutingProblemSolution> solutions = algorithm.searchSolutions();
+
+        VehicleRoutingProblemSolution bestSolution = Solutions.bestOf(solutions);
+
+        EnRouteRealTime.solutionWriter(problem, solutions, bestSolution);
+
+    }
+
+
+    public static void main(String[] args) {
+        EnRouteTestInitRoute t = new EnRouteTestInitRoute();
+        t.test1();
+    }
+}
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EnRouteVehicleContext.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EnRouteVehicleContext.java
index 4ad145d62..6ad8d755f 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EnRouteVehicleContext.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EnRouteVehicleContext.java
@@ -25,14 +25,17 @@
         public double[] deliverTimeWindowTS;
         public double[] deliverTimeWindowAlgo;
 
+        // customer here is the receiver
         public String customerName;
         public String customerPhone;
 
-        public String customerAddress;
+        public String pickupAddress;
+        public String deliverAddress;
+
 
         public ShipmentInfo(double[] pickupLoc, double[] deliverLoc,
                             double[] pickupTimeWindowTS, double[] deliverTimeWindowTS,
-                            String customerName, String customerPhone, String customerAddress) {
+                            String customerName, String customerPhone, String pickupAddress, String deliverAddress) {
             this.pickupLoc = pickupLoc;
             this.pickupTimeWindowTS = pickupTimeWindowTS;
 
@@ -59,9 +62,10 @@ public ShipmentInfo(double[] pickupLoc, double[] deliverLoc,
                 deliverTimeWindowTS[1] - currentTimestamp
             };
 
-            this.customerAddress = customerAddress;
-            this.customerPhone = customerPhone;
             this.customerName = customerName;
+            this.customerPhone = customerPhone;
+            this.pickupAddress = pickupAddress;
+            this.deliverAddress = deliverAddress;
         }
 
     }
@@ -86,13 +90,13 @@ public EnRouteVehicleContext(String vehicleId, double currentTimestamp, double[]
                                  ArrayList<double[]> pickupLocs, ArrayList<double[]> deliverLocs,
                                  ArrayList<double[]> pickupTimeWindowTSs, ArrayList<double[]> deliverTimeWindowTSs,
                                  ArrayList<String> customerNames, ArrayList<String> customerPhones,
-                                 ArrayList<String> customerAddresses,
+                                 ArrayList<String> pickupAddresses, ArrayList<String> deliverAddresses,
 
                                  // for on going pickup
                                  double[] pickupLoc, double[] deliverLoc,
                                  double[] pickupTimeWindowTS, double[] deliverTimeWindowTS,
                                  String customerName, String customerPhone,
-                                 String customerAddress
+                                 String pickupAddress, String deliverAddress
 
     ) {
         // create a vehicle implementation
@@ -115,7 +119,7 @@ public EnRouteVehicleContext(String vehicleId, double currentTimestamp, double[]
         assert (pickupLocs.size() == deliverLocs.size() &&
             pickupTimeWindowTSs.size() == deliverTimeWindowTSs.size() &&
             customerNames.size() == customerPhones.size() &&
-            pickupLocs.size() == customerAddresses.size()
+            pickupLocs.size() == pickupAddresses.size()
         );
 
         this.vehicleId = vehicleId;
@@ -129,7 +133,7 @@ public EnRouteVehicleContext(String vehicleId, double currentTimestamp, double[]
 
                 ShipmentInfo si = new ShipmentInfo(pickupLocs.get(i), deliverLocs.get(i),
                     pickupTimeWindowTSs.get(i), deliverTimeWindowTSs.get(i),
-                    customerNames.get(i), customerPhones.get(i), customerAddresses.get(i)
+                    customerNames.get(i), customerPhones.get(i), pickupAddresses.get(i), deliverAddresses.get(i)
                 );
 
                 this.pickedups.add(si);
@@ -140,7 +144,7 @@ public EnRouteVehicleContext(String vehicleId, double currentTimestamp, double[]
             // make on going pickup shipment info
             this.onGoingPickUp = new ShipmentInfo(pickupLoc, deliverLoc,
                 pickupTimeWindowTS, deliverTimeWindowTS,
-                customerName, customerPhone, customerAddress
+                customerName, customerPhone, pickupAddress, deliverAddress
             );
 
         }
