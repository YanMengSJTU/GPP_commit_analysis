diff --git a/jsprit-examples/output/circle.png b/jsprit-examples/output/circle.png
index 0335814ff..e274914b5 100644
Binary files a/jsprit-examples/output/circle.png and b/jsprit-examples/output/circle.png differ
diff --git a/jsprit-examples/output/events.dgs.gz b/jsprit-examples/output/events.dgs.gz
index 2c4c3e1fc..ed06db414 100644
Binary files a/jsprit-examples/output/events.dgs.gz and b/jsprit-examples/output/events.dgs.gz differ
diff --git a/jsprit-examples/src/main/java/CopyOfAdditionalDistanceConstraintExample.java b/jsprit-examples/src/main/java/CopyOfAdditionalDistanceConstraintExample.java
index 8f832e3cb..437480e84 100644
--- a/jsprit-examples/src/main/java/CopyOfAdditionalDistanceConstraintExample.java
+++ b/jsprit-examples/src/main/java/CopyOfAdditionalDistanceConstraintExample.java
@@ -206,7 +206,11 @@ public static void main(String[] args) {
 
 		VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0, 20000).setCostPerDistance(1).setCostPerTime(0).build();
 		VehicleImpl vehicle = VehicleImpl.Builder.newInstance("vehicle").setStartLocationId("0").setStartLocationCoordinate(Coordinate.newInstance(0,0)).setType(type).build();
-        int N_TARGET = 30	; // 30 nodes plus starting point
+		VehicleImpl vehicle2 = VehicleImpl.Builder.newInstance("vehicle2").setStartLocationId("0").setStartLocationCoordinate(Coordinate.newInstance(0,0)).setType(type).build();
+		VehicleImpl vehicle3 = VehicleImpl.Builder.newInstance("vehicle3").setStartLocationId("0").setStartLocationCoordinate(Coordinate.newInstance(0,0)).setType(type).build();
+		VehicleImpl vehicle4 = VehicleImpl.Builder.newInstance("vehicle4").setStartLocationId("0").setStartLocationCoordinate(Coordinate.newInstance(0,0)).setType(type).build();
+
+		int N_TARGET = 30	; // 30 nodes plus starting point
         Service [] services = new Service[N_TARGET];
         List<Coordinate> coords = createCoordinates(0,0, 20, N_TARGET );
 
@@ -239,7 +243,7 @@ public static void main(String[] args) {
 		 */
 		//define a matrix-builder building a symmetric matrix
         VehicleRoutingTransportCostsMatrix.Builder costMatrixBuilder = VehicleRoutingTransportCostsMatrix.Builder.newInstance(false);
-        double BIG = 509990009;// Double.MAX_VALUE;
+        double BIG = 50900999;// Double.MAX_VALUE;
         double NOGO = BIG;
         double OK_COST= 100;
         double [][] matrix = new double[N_TARGET+1][N_TARGET+1];
@@ -247,28 +251,22 @@ public static void main(String[] args) {
         	for(int j=0;j<=N_TARGET;j++)
         		if (i == j)
         			matrix[i][j] = 0;
-        		else if (i==0 || j==0 || i==25 )
-        			matrix[i][j] = NOGO;
+        		else if (i==0 || j==0 )
+        			matrix[i][j] = 200;
         		else
         			matrix[i][j] =  BIG;
         
         
         for(int i=0;i<=N_TARGET;i++) {
         	matrix[i][(i+1)%(N_TARGET+1)] = OK_COST;
-//        	matrix[i][(i-1 + N_TARGET+1)%(N_TARGET+1)] = OK_COST;
         }
         
-
-        // provide a direct shortcut from 7 to 23
         matrix[7][23] = 1;//OK_COST;
+        matrix[7][8] = 400;
+        matrix[22][23] = 400;
         
-        // since this is a tour, I have let the algorithm account for 8--22, so going from 30 to 8, then from 8 to 22, then to 0
-        matrix[30][8] = OK_COST;
-        matrix[22][0] = OK_COST;
-
-        // many times the algorithm fails to find the shortest path, so I give it more hint to make the "traditional route" 30-->0 impossible
-        matrix[30][0] = 100000;
 
+         
 
 
         for(int i=0;i<=N_TARGET;i++)
@@ -285,8 +283,12 @@ else if (i==0 || j==0 || i==25 )
 		
         VehicleRoutingTransportCostsMatrix costMatrix = costMatrixBuilder.build() ;
 
-        VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance().setFleetSize(FleetSize.FINITE/*FleetSize.INFINITE*/).setRoutingCost(costMatrix)
-		.addVehicle(vehicle);
+        VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance().setFleetSize(FleetSize.INFINITE/*FleetSize.INFINITE*/).setRoutingCost(costMatrix)
+		.addVehicle(vehicle)
+		.addVehicle(vehicle2)
+		.addVehicle(vehicle3)
+		.addVehicle(vehicle4)
+		;
         for(int i=0;i<N_TARGET;i++)
         	builder.addJob(services[i]);
 		VehicleRoutingProblem vrp = builder.build();
@@ -295,7 +297,7 @@ else if (i==0 || j==0 || i==25 )
         eventsRecorder.setRecordingRange(0,50);
 
         
-        VehicleRoutingAlgorithmBuilder vraBuilder = new VehicleRoutingAlgorithmBuilder(vrp, "input/algorithmConfig_fix_schrimpf.xml");
+        VehicleRoutingAlgorithmBuilder vraBuilder = new VehicleRoutingAlgorithmBuilder(vrp, "input/algorithmConfig_greedyWithRegret.xml");
 
 //        StateManager stateManager = new StateManager(vrp.getTransportCosts());  //v1.3.1
         StateManager stateManager = new StateManager(vrp); //head of development - upcoming release (v1.4)
@@ -322,7 +324,7 @@ else if (i==0 || j==0 || i==25 )
 //		VehicleRoutingAlgorithm vra = VehicleRoutingAlgorithms.readAndCreateAlgorithm(vrp, "input/fastAlgo.xml");
 
 //        vra.setNuOfIterations(250); //v1.3.1
-        vra.setMaxIterations(2500); //head of development - upcoming release (v1.4)
+        vra.setMaxIterations(250); //head of development - upcoming release (v1.4)
         vra.addListener(eventsRecorder);
 
         Collection<VehicleRoutingProblemSolution> solutions = vra.searchSolutions();
