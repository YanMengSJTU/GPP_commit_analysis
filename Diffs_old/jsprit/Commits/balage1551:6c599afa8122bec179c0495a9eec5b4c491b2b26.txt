diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/Capacity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/Capacity.java
index 876e3aec6..42a275724 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/Capacity.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/Capacity.java
@@ -405,4 +405,22 @@ public double divide(Capacity denominator) {
 
     }
 
+    public Capacity getNegativeDimensions() {
+        Capacity res = new Capacity(getNuOfDimensions());
+        for (int i = 0; i < getNuOfDimensions(); i++) {
+            if (get(i) < 0) res.dimensions[i] = get(i);
+            else res.dimensions[i] = 0;
+        }
+        return res;
+    }
+
+    public Capacity getPositiveDimensions() {
+        Capacity res = new Capacity(getNuOfDimensions());
+        for (int i = 0; i < getNuOfDimensions(); i++) {
+            if (get(i) > 0) res.dimensions[i] = get(i);
+            else res.dimensions[i] = 0;
+        }
+        return res;
+    }
+
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractJob.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractJob.java
index 65f29fd30..77d6bba92 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractJob.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractJob.java
@@ -21,6 +21,7 @@
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.Skills;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 
 import java.util.*;
@@ -41,6 +42,7 @@
  */
 public abstract class AbstractJob implements Job {
 
+
     /**
      * Base builder for all direct descendants.
      * <p>
@@ -259,6 +261,12 @@ public int getPriority() {
 
     protected Set<TimeWindow> allTimeWindows;
 
+    private Capacity sizeAtStart;
+
+    private Capacity sizeAtEnd;
+
+
+
     /**
      * Builder based constructor.
      *
@@ -302,6 +310,17 @@ protected void prepareCaches() {
             addLocation(ja.getLocation());
             addTimeWindows(ja.getTimeWindows());
         });
+        sizeAtStart = calcSizeAt(true);
+        sizeAtEnd = calcSizeAt(false);
+    }
+
+    private Capacity calcSizeAt(boolean start) {
+        Capacity size = Capacity.EMPTY;
+        for (JobActivity act : activityList.getAll()) {
+            size = size.add(act.getSize());
+        }
+        if (start) return size.getNegativeDimensions().abs();
+        else return size.getPositiveDimensions();
     }
 
     private void addTimeWindows(Collection<TimeWindow> timeWindows) {
@@ -310,6 +329,14 @@ private void addTimeWindows(Collection<TimeWindow> timeWindows) {
         }
     }
 
+    public Capacity getSizeAtStart() {
+        return sizeAtStart;
+    }
+
+    public Capacity getSizeAtEnd() {
+        return sizeAtEnd;
+    }
+
     /**
      * Creates the activities.
      * <p>
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/LoadConstraintTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/LoadConstraintTest.java
index 24d88795d..aaf5cae1f 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/LoadConstraintTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/LoadConstraintTest.java
@@ -125,13 +125,13 @@ public void whenCustomJob_itShouldNotIgnoreCapacity() {
      */
     @Test
     public void whenServiceRouteAndNewServiceFitsIn_itShouldReturnFulfilled() {
-        stateManager.informInsertionStarts(Arrays.asList(serviceRoute), Collections.<Job>emptyList());
-        Service s = mock(Service.class);
-        when(s.getSize()).thenReturn(Capacity.Builder.newInstance().addDimension(0, 5).build());
-        ServiceLoadRouteLevelConstraint loadconstraint = new ServiceLoadRouteLevelConstraint(stateManager);
+        stateManager.informInsertionStarts(Arrays.asList(serviceRoute), Collections.emptyList());
+        Service s = Service.Builder.newInstance("service").setLocation(Location.newInstance(0))
+            .addSizeDimension(0, 5).build();
+        ServiceLoadRouteLevelConstraint loadConstraint = new ServiceLoadRouteLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(serviceRoute, s, serviceRoute.getVehicle(), null, 0.);
-        assertTrue(loadconstraint.fulfilled(context));
+        assertTrue(loadConstraint.fulfilled(context));
     }
 
     @Test
@@ -242,13 +242,11 @@ public void whenServiceRouteAndNewServiceDoesNotFitInBetweenAc2AndEnd_itShouldRe
 
     @Test
     public void whenServiceRouteAndNewServiceDoesNotFitIn_itShouldReturnFulfilled() {
-        stateManager.informInsertionStarts(Arrays.asList(serviceRoute), Collections.<Job>emptyList());
-        Service s = mock(Service.class);
-        when(s.getSize()).thenReturn(Capacity.Builder.newInstance().addDimension(0, 6).build());
-        ServiceLoadRouteLevelConstraint loadconstraint = new ServiceLoadRouteLevelConstraint(stateManager);
-
+        stateManager.informInsertionStarts(Arrays.asList(serviceRoute), Collections.emptyList());
+        Service s = Service.Builder.newInstance("service").setLocation(Location.newInstance(0)).addSizeDimension(0, 6).build();
+        ServiceLoadRouteLevelConstraint loadConstraint = new ServiceLoadRouteLevelConstraint(stateManager);
         JobInsertionContext context = new JobInsertionContext(serviceRoute, s, serviceRoute.getVehicle(), null, 0.);
-        assertFalse(loadconstraint.fulfilled(context));
+        assertFalse(loadConstraint.fulfilled(context));
     }
 
     /*
@@ -259,45 +257,41 @@ public void whenServiceRouteAndNewServiceDoesNotFitIn_itShouldReturnFulfilled()
     @Test
     public void whenPDRouteRouteAndNewPickupFitsIn_itShouldReturnFulfilled() {
         stateManager.informInsertionStarts(Arrays.asList(pickupDeliveryRoute), Collections.<Job>emptyList());
-        Pickup s = mock(Pickup.class);
-        when(s.getSize()).thenReturn(Capacity.Builder.newInstance().addDimension(0, 10).build());
-        ServiceLoadRouteLevelConstraint loadconstraint = new ServiceLoadRouteLevelConstraint(stateManager);
-
+        Pickup s = Pickup.Builder.newInstance("pick").addSizeDimension(0, 10).setLocation(Location.newInstance(0)).build();
+        ServiceLoadRouteLevelConstraint loadConstraint = new ServiceLoadRouteLevelConstraint(stateManager);
         JobInsertionContext context = new JobInsertionContext(pickupDeliveryRoute, s, serviceRoute.getVehicle(), null, 0.);
-        assertTrue(loadconstraint.fulfilled(context));
+        assertTrue(loadConstraint.fulfilled(context));
     }
 
     @Test
     public void whenPDRouteRouteAndNewDeliveryFitsIn_itShouldReturnFulfilled() {
-        stateManager.informInsertionStarts(Arrays.asList(pickupDeliveryRoute), Collections.<Job>emptyList());
-        Delivery s = mock(Delivery.class);
-        when(s.getSize()).thenReturn(Capacity.Builder.newInstance().addDimension(0, 15).build());
-        ServiceLoadRouteLevelConstraint loadconstraint = new ServiceLoadRouteLevelConstraint(stateManager);
-
+        stateManager.informInsertionStarts(Arrays.asList(pickupDeliveryRoute), Collections.emptyList());
+        Delivery s = Delivery.Builder.newInstance("del").addSizeDimension(0, 15).setLocation(Location.newInstance(0)).build();
+        ServiceLoadRouteLevelConstraint loadConstraint = new ServiceLoadRouteLevelConstraint(stateManager);
         JobInsertionContext context = new JobInsertionContext(pickupDeliveryRoute, s, serviceRoute.getVehicle(), null, 0.);
-        assertTrue(loadconstraint.fulfilled(context));
+        assertTrue(loadConstraint.fulfilled(context));
     }
 
     @Test
     public void whenPDRouteRouteAndNewPickupDoesNotFitIn_itShouldReturnNotFulfilled() {
         stateManager.informInsertionStarts(Arrays.asList(pickupDeliveryRoute), Collections.<Job>emptyList());
-        Pickup s = mock(Pickup.class);
-        when(s.getSize()).thenReturn(Capacity.Builder.newInstance().addDimension(0, 11).build());
-        ServiceLoadRouteLevelConstraint loadconstraint = new ServiceLoadRouteLevelConstraint(stateManager);
-
+        Pickup s = Pickup.Builder.newInstance("pickup")
+            .setLocation(Location.newInstance(0))
+            .addSizeDimension(0, 11).build();
+        ServiceLoadRouteLevelConstraint loadConstraint = new ServiceLoadRouteLevelConstraint(stateManager);
         JobInsertionContext context = new JobInsertionContext(pickupDeliveryRoute, s, serviceRoute.getVehicle(), null, 0.);
-        assertFalse(loadconstraint.fulfilled(context));
+        assertFalse(loadConstraint.fulfilled(context));
     }
 
     @Test
     public void whenPDRouteRouteAndNewDeliveryDoesNotFitIn_itShouldReturnNotFulfilled() {
         stateManager.informInsertionStarts(Arrays.asList(pickupDeliveryRoute), Collections.<Job>emptyList());
-        Delivery s = mock(Delivery.class);
-        when(s.getSize()).thenReturn(Capacity.Builder.newInstance().addDimension(0, 16).build());
-        ServiceLoadRouteLevelConstraint loadconstraint = new ServiceLoadRouteLevelConstraint(stateManager);
+        Delivery s = Delivery.Builder.newInstance("del").setLocation(Location.newInstance(0))
+            .addSizeDimension(0, 16).build();
+        ServiceLoadRouteLevelConstraint loadConstraint = new ServiceLoadRouteLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(pickupDeliveryRoute, s, serviceRoute.getVehicle(), null, 0.);
-        assertFalse(loadconstraint.fulfilled(context));
+        assertFalse(loadConstraint.fulfilled(context));
     }
 
     /*
@@ -612,12 +606,10 @@ public void whenPDRouteAndNewServiceDoesNotFitInBetweenAc2AndEnd_itShouldReturnF
     @Test
     public void whenPDRouteAndNewServiceDoesNotFitIn_itShouldReturnFulfilled() {
         stateManager.informInsertionStarts(Arrays.asList(serviceRoute), Collections.<Job>emptyList());
-        Service s = mock(Service.class);
-        when(s.getSize()).thenReturn(Capacity.Builder.newInstance().addDimension(0, 6).build());
-        ServiceLoadRouteLevelConstraint loadconstraint = new ServiceLoadRouteLevelConstraint(stateManager);
-
+        Service s = Service.Builder.newInstance("service").addSizeDimension(0, 6).setLocation(Location.newInstance(0)).build();
+        ServiceLoadRouteLevelConstraint loadConstraint = new ServiceLoadRouteLevelConstraint(stateManager);
         JobInsertionContext context = new JobInsertionContext(serviceRoute, s, serviceRoute.getVehicle(), null, 0.);
-        assertFalse(loadconstraint.fulfilled(context));
+        assertFalse(loadConstraint.fulfilled(context));
     }
 
     /*
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadRouteLevelConstraintTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadRouteLevelConstraintTest.java
index b5222bc03..c50fd4931 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadRouteLevelConstraintTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadRouteLevelConstraintTest.java
@@ -79,9 +79,8 @@ public void doBefore() {
 
     @Test
     public void whenLoadPlusDeliverySizeDoesNotExceedsVehicleCapacity_itShouldReturnTrue() {
-        Service service = mock(Delivery.class);
-        when(service.getSize()).thenReturn(Capacity.Builder.newInstance().addDimension(0, 1).addDimension(1, 1).addDimension(2, 1).build());
-
+        Service service = Delivery.Builder.newInstance("del").setLocation(l())
+            .addAllSizeDimensions(Capacity.Builder.newInstance().addDimension(0, 1).addDimension(1, 1).addDimension(2, 1).build()).build();
         JobInsertionContext iContext = mock(JobInsertionContext.class);
         when(iContext.getJob()).thenReturn(service);
         when(iContext.getRoute()).thenReturn(route);
@@ -92,9 +91,8 @@ public void whenLoadPlusDeliverySizeDoesNotExceedsVehicleCapacity_itShouldReturn
 
     @Test
     public void whenLoadPlusDeliverySizeExceedsVehicleCapacityInAllDimension_itShouldReturnFalse() {
-        Service service = mock(Delivery.class);
-        when(service.getSize()).thenReturn(Capacity.Builder.newInstance().addDimension(0, 3).addDimension(1, 3).addDimension(2, 3).build());
-
+        Service service = Delivery.Builder.newInstance("d").setLocation(l())
+            .addAllSizeDimensions(Capacity.Builder.newInstance().addDimension(0, 3).addDimension(1, 3).addDimension(2, 3).build()).build();
         JobInsertionContext iContext = mock(JobInsertionContext.class);
         when(iContext.getJob()).thenReturn(service);
         when(iContext.getRoute()).thenReturn(route);
@@ -105,8 +103,8 @@ public void whenLoadPlusDeliverySizeExceedsVehicleCapacityInAllDimension_itShoul
 
     @Test
     public void whenLoadPlusDeliverySizeExceedsVehicleCapacityInOneDimension_itShouldReturnFalse() {
-        Service service = mock(Delivery.class);
-        when(service.getSize()).thenReturn(Capacity.Builder.newInstance().addDimension(0, 1).addDimension(1, 1).addDimension(2, 3).build());
+        Service service = Delivery.Builder.newInstance("d").setLocation(l())
+            .addAllSizeDimensions(Capacity.Builder.newInstance().addDimension(0, 1).addDimension(1, 1).addDimension(2, 3).build()).build();
 
         JobInsertionContext iContext = mock(JobInsertionContext.class);
         when(iContext.getJob()).thenReturn(service);
@@ -118,9 +116,8 @@ public void whenLoadPlusDeliverySizeExceedsVehicleCapacityInOneDimension_itShoul
 
     @Test
     public void whenLoadPlusDeliverySizeJustFitIntoVehicle_itShouldReturnTrue() {
-        Service service = mock(Delivery.class);
-        when(service.getSize()).thenReturn(Capacity.Builder.newInstance().addDimension(0, 2).addDimension(1, 2).addDimension(2, 2).build());
-
+        Service service = Delivery.Builder.newInstance("d").setLocation(l())
+            .addAllSizeDimensions(Capacity.Builder.newInstance().addDimension(0, 2).addDimension(1, 2).addDimension(2, 2).build()).build();
         JobInsertionContext iContext = mock(JobInsertionContext.class);
         when(iContext.getJob()).thenReturn(service);
         when(iContext.getRoute()).thenReturn(route);
@@ -131,8 +128,8 @@ public void whenLoadPlusDeliverySizeJustFitIntoVehicle_itShouldReturnTrue() {
 
     @Test
     public void whenLoadPlusPickupSizeDoesNotExceedsVehicleCapacity_itShouldReturnTrue() {
-        Service service = mock(Pickup.class);
-        when(service.getSize()).thenReturn(Capacity.Builder.newInstance().addDimension(0, 1).addDimension(1, 1).addDimension(2, 1).build());
+        Service service = Pickup.Builder.newInstance("p").setLocation(l())
+            .addAllSizeDimensions(Capacity.Builder.newInstance().addDimension(0, 1).addDimension(1, 1).addDimension(2, 1).build()).build();
 
         JobInsertionContext iContext = mock(JobInsertionContext.class);
         when(iContext.getJob()).thenReturn(service);
@@ -144,9 +141,8 @@ public void whenLoadPlusPickupSizeDoesNotExceedsVehicleCapacity_itShouldReturnTr
 
     @Test
     public void whenLoadPlusPickupSizeExceedsVehicleCapacityInAllDimension_itShouldReturnFalse() {
-        Service service = mock(Pickup.class);
-        when(service.getSize()).thenReturn(Capacity.Builder.newInstance().addDimension(0, 3).addDimension(1, 3).addDimension(2, 3).build());
-
+        Service service = Pickup.Builder.newInstance("p").setLocation(l())
+            .addAllSizeDimensions(Capacity.Builder.newInstance().addDimension(0, 3).addDimension(1, 3).addDimension(2, 3).build()).build();
         JobInsertionContext iContext = mock(JobInsertionContext.class);
         when(iContext.getJob()).thenReturn(service);
         when(iContext.getRoute()).thenReturn(route);
@@ -157,8 +153,8 @@ public void whenLoadPlusPickupSizeExceedsVehicleCapacityInAllDimension_itShouldR
 
     @Test
     public void whenLoadPlusPickupSizeExceedsVehicleCapacityInOneDimension_itShouldReturnFalse() {
-        Service service = mock(Pickup.class);
-        when(service.getSize()).thenReturn(Capacity.Builder.newInstance().addDimension(0, 1).addDimension(1, 1).addDimension(2, 3).build());
+        Service service = Pickup.Builder.newInstance("p").setLocation(l())
+            .addAllSizeDimensions(Capacity.Builder.newInstance().addDimension(0, 1).addDimension(1, 1).addDimension(2, 3).build()).build();
 
         JobInsertionContext iContext = mock(JobInsertionContext.class);
         when(iContext.getJob()).thenReturn(service);
@@ -170,8 +166,8 @@ public void whenLoadPlusPickupSizeExceedsVehicleCapacityInOneDimension_itShouldR
 
     @Test
     public void whenLoadPlusPickupSizeJustFitIntoVehicle_itShouldReturnTrue() {
-        Service service = mock(Pickup.class);
-        when(service.getSize()).thenReturn(Capacity.Builder.newInstance().addDimension(0, 2).addDimension(1, 2).addDimension(2, 2).build());
+        Service service = Pickup.Builder.newInstance("p").setLocation(l())
+            .addAllSizeDimensions(Capacity.Builder.newInstance().addDimension(0, 2).addDimension(1, 2).addDimension(2, 2).build()).build();
 
         JobInsertionContext iContext = mock(JobInsertionContext.class);
         when(iContext.getJob()).thenReturn(service);
@@ -183,9 +179,8 @@ public void whenLoadPlusPickupSizeJustFitIntoVehicle_itShouldReturnTrue() {
 
     @Test
     public void whenLoadPlusServiceSizeDoesNotExceedsVehicleCapacity_itShouldReturnTrue() {
-        Service service = mock(Service.class);
-        when(service.getSize()).thenReturn(Capacity.Builder.newInstance().addDimension(0, 1).addDimension(1, 1).addDimension(2, 1).build());
-
+        Service service = Service.Builder.newInstance("s").setLocation(l())
+            .addAllSizeDimensions(Capacity.Builder.newInstance().addDimension(0, 1).addDimension(1, 1).addDimension(2, 1).build()).build();
         JobInsertionContext iContext = mock(JobInsertionContext.class);
         when(iContext.getJob()).thenReturn(service);
         when(iContext.getRoute()).thenReturn(route);
@@ -194,10 +189,14 @@ public void whenLoadPlusServiceSizeDoesNotExceedsVehicleCapacity_itShouldReturnT
         assertTrue(constraint.fulfilled(iContext));
     }
 
+    private Location l() {
+        return Location.newInstance(0);
+    }
+
     @Test
     public void whenLoadPlusServiceSizeExceedsVehicleCapacityInAllDimension_itShouldReturnFalse() {
-        Service service = mock(Service.class);
-        when(service.getSize()).thenReturn(Capacity.Builder.newInstance().addDimension(0, 3).addDimension(1, 3).addDimension(2, 3).build());
+        Service service = Service.Builder.newInstance("s").setLocation(l())
+            .addAllSizeDimensions(Capacity.Builder.newInstance().addDimension(0, 3).addDimension(1, 3).addDimension(2, 3).build()).build();
 
         JobInsertionContext iContext = mock(JobInsertionContext.class);
         when(iContext.getJob()).thenReturn(service);
@@ -209,9 +208,8 @@ public void whenLoadPlusServiceSizeExceedsVehicleCapacityInAllDimension_itShould
 
     @Test
     public void whenLoadPlusServiceSizeExceedsVehicleCapacityInOneDimension_itShouldReturnFalse() {
-        Service service = mock(Service.class);
-        when(service.getSize()).thenReturn(Capacity.Builder.newInstance().addDimension(0, 1).addDimension(1, 1).addDimension(2, 3).build());
-
+        Service service = Service.Builder.newInstance("s").setLocation(l())
+            .addAllSizeDimensions(Capacity.Builder.newInstance().addDimension(0, 1).addDimension(1, 1).addDimension(2, 3).build()).build();
         JobInsertionContext iContext = mock(JobInsertionContext.class);
         when(iContext.getJob()).thenReturn(service);
         when(iContext.getRoute()).thenReturn(route);
@@ -222,8 +220,8 @@ public void whenLoadPlusServiceSizeExceedsVehicleCapacityInOneDimension_itShould
 
     @Test
     public void whenLoadPlusServiceSizeJustFitIntoVehicle_itShouldReturnTrue() {
-        Service service = mock(Service.class);
-        when(service.getSize()).thenReturn(Capacity.Builder.newInstance().addDimension(0, 2).addDimension(1, 2).addDimension(2, 2).build());
+        Service service = Service.Builder.newInstance("s").setLocation(Location.newInstance(0))
+            .addAllSizeDimensions(Capacity.Builder.newInstance().addDimension(0, 2).addDimension(1, 2).addDimension(2, 2).build()).build();
 
         JobInsertionContext iContext = mock(JobInsertionContext.class);
         when(iContext.getJob()).thenReturn(service);
