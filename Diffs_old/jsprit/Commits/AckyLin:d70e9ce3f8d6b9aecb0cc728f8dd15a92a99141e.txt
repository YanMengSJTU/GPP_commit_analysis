diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryWithDepotBoundedDeliveriesExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryWithDepotBoundedDeliveriesExample.java
index 683bb3767..60159ffd0 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryWithDepotBoundedDeliveriesExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryWithDepotBoundedDeliveriesExample.java
@@ -34,11 +34,13 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.reporting.SolutionPrinter;
 import com.graphhopper.jsprit.core.util.Coordinate;
+import com.graphhopper.jsprit.core.util.RandomNumberGeneration;
 import com.graphhopper.jsprit.core.util.Solutions;
 import com.graphhopper.jsprit.io.problem.VrpXMLWriter;
 import com.graphhopper.jsprit.util.Examples;
 
 import java.util.Collection;
+import java.util.Random;
 
 
 public class SimpleEnRoutePickupAndDeliveryWithDepotBoundedDeliveriesExample {
@@ -54,12 +56,12 @@ public static void main(String[] args) {
 		 */
         VehicleTypeImpl.Builder vehicleTypeBuilder = VehicleTypeImpl.Builder.newInstance("vehicleType").addCapacityDimension(0, 4);
         VehicleType vehicleType = vehicleTypeBuilder.build();
-
+        Random random = RandomNumberGeneration.newInstance();
 		/*
          * get a vehicle-builder and build a vehicle located at (10,10) with type "vehicleType"
 		 */
         Builder vehicleBuilder = VehicleImpl.Builder.newInstance("vehicle");
-        vehicleBuilder.setStartLocation(loc(Coordinate.newInstance(15, 20)));
+        vehicleBuilder.setStartLocation(loc(Coordinate.newInstance(random.nextInt(50), random.nextInt(50))));
         vehicleBuilder.setType(vehicleType);
         VehicleImpl vehicle = vehicleBuilder.build();
 
@@ -71,19 +73,26 @@ public static void main(String[] args) {
 		 * 3: (15,7)->(14,9)
 		 * 4: (15,13)->(14,11)
 		 */
-
+        Random random1 = new Random();
+        Random random2 = new Random();
+        Random random3 = new Random();
+        Random random4 = new Random();
+        Random random5 = new Random();
+        Random random6 = new Random();
+        Random random7 = new Random();
+        Random random8 = new Random();
         Shipment
-            shipment1 = Shipment.Builder.newInstance("1").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(10, 40))).setDeliveryLocation(loc(
-            Coordinate.newInstance(145, 20))).build();
+            shipment1 = Shipment.Builder.newInstance("1").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(random1.nextInt(50), random1.nextInt(50)))).setDeliveryLocation(loc(
+            Coordinate.newInstance(random2.nextInt(50)+100, random2.nextInt(40)))).build();
         Shipment
-            shipment2 = Shipment.Builder.newInstance("2").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(15, 13))).setDeliveryLocation(loc(
-            Coordinate.newInstance(140, 11))).build();
+            shipment2 = Shipment.Builder.newInstance("2").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(random3.nextInt(50), random3.nextInt(50)))).setDeliveryLocation(loc(
+            Coordinate.newInstance(random4.nextInt(50)+100, random4.nextInt(40)))).build();
 
-        Shipment shipment3 = Shipment.Builder.newInstance("3").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(3, 20))).setDeliveryLocation(loc(
-            Coordinate.newInstance(166, 9))).build();
+        Shipment shipment3 = Shipment.Builder.newInstance("3").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(random5.nextInt(50), random5.nextInt(50)))).setDeliveryLocation(loc(
+            Coordinate.newInstance(random6.nextInt(50)+100, random6.nextInt(40)))).build();
         Shipment
-            shipment4 = Shipment.Builder.newInstance("4").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(20, 18))).setDeliveryLocation(loc(
-            Coordinate.newInstance(155, 7))).build();
+            shipment4 = Shipment.Builder.newInstance("4").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(random7.nextInt(50), random7.nextInt(50)))).setDeliveryLocation(loc(
+            Coordinate.newInstance(random8.nextInt(50)+100, random8.nextInt(40)))).build();
 //
         /*
          * build deliveries, (implicitly picked up in the depot)
@@ -132,14 +141,15 @@ public static void main(String[] args) {
 		/*
 		 * plot
 		 */
-        Plotter problemPlotter = new Plotter(problem);
-        problemPlotter.plotShipments(true);
-        problemPlotter.plot("output/simpleMixedEnRoutePickupAndDeliveryExample_problem.png", "en-route pd and depot bounded deliveries");
-
-        Plotter solutionPlotter = new Plotter(problem, Solutions.bestOf(solutions));
-        solutionPlotter.plotShipments(true);
-        solutionPlotter.plot("output/simpleMixedEnRoutePickupAndDeliveryExample_solution.png", "en-route pd and depot bounded deliveries");
- /*
+//        Plotter problemPlotter = new Plotter(problem);
+//        problemPlotter.plotShipments(true);
+//        problemPlotter.plot("output/simpleMixedEnRoutePickupAndDeliveryExample_problem.png", "en-route pd and depot bounded deliveries");
+//
+//        Plotter solutionPlotter = new Plotter(problem, Solutions.bestOf(solutions));
+//        solutionPlotter.plotShipments(true);
+//        solutionPlotter.plot("output/simpleMixedEnRoutePickupAndDeliveryExample_solution.png", "en-route pd and depot bounded deliveries");
+        SolutionPrinter.print(problem, bestSolution, SolutionPrinter.Print.VERBOSE);
+        /*
         使用GraphStream渲染问题和解决方案
          */
         new GraphStreamViewer(problem, bestSolution).labelWith(GraphStreamViewer.Label.ID).setRenderDelay(100).display();
