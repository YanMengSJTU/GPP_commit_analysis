diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/Inserter.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/Inserter.java
deleted file mode 100644
index f4a17c0df..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/Inserter.java
+++ /dev/null
@@ -1,175 +0,0 @@
-/*
- * Licensed to GraphHopper GmbH under one or more contributor
- * license agreements. See the NOTICE file distributed with this work for
- * additional information regarding copyright ownership.
- *
- * GraphHopper GmbH licenses this file to you under the Apache License,
- * Version 2.0 (the "License"); you may not use this file except in
- * compliance with the License. You may obtain a copy of the License at
- *
- *       http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.graphhopper.jsprit.core.algorithm.recreate;
-
-import java.util.List;
-
-import com.graphhopper.jsprit.core.algorithm.recreate.InsertionData.NoInsertionFound;
-import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionListeners;
-import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
-import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.DefaultTourActivityFactory;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-
-class Inserter {
-
-    private abstract class JobInsertionHandler {
-
-        private JobInsertionHandler delegator = null;
-
-        public abstract void handleJobInsertion(Job job, InsertionData iData, VehicleRoute route);
-
-        public JobInsertionHandler withNextHandler(JobInsertionHandler handler) {
-            delegator = handler;
-            return this;
-        }
-
-        protected void delegate(Job job, InsertionData iData, VehicleRoute route) {
-            if (delegator != null) {
-                delegator.handleJobInsertion(job, iData, route);
-            }
-        }
-    }
-
-    class JobExceptionHandler extends JobInsertionHandler {
-
-        @Override
-        public void handleJobInsertion(Job job, InsertionData iData, VehicleRoute route) {
-            throw new IllegalStateException("job insertion is not supported. Do not know job type.");
-        }
-
-    }
-
-
-    private class UnifiedInsertionHandler extends JobInsertionHandler {
-
-        public UnifiedInsertionHandler() {
-        }
-
-        @Override
-        public void handleJobInsertion(Job job, InsertionData iData, VehicleRoute route) {
-            route.setVehicleAndDepartureTime(iData.getSelectedVehicle(), iData.getVehicleDepartureTime());
-            if (!iData.getSelectedVehicle().isReturnToDepot()) {
-                if (iData.getDeliveryInsertionIndex() >= route.getActivities().size()) {
-                    route.getEnd().setLocation(job.getEndLocation());
-                }
-            }
-
-            List<JobActivity> acts = job.getActivityList().getAllDuplicated();
-            acts.forEach(act -> route.getTourActivities().addActivity(iData.getDeliveryInsertionIndex(), act));
-
-            // Handles all // delegator.handleJobInsertion(job, iData, route);
-        }
-    }
-
-    private class ServiceInsertionHandler extends JobInsertionHandler {
-
-        @Override
-        public void handleJobInsertion(Job job, InsertionData iData, VehicleRoute route) {
-            if (job instanceof Service) {
-                route.setVehicleAndDepartureTime(iData.getSelectedVehicle(),
-                                iData.getVehicleDepartureTime());
-                if (!iData.getSelectedVehicle().isReturnToDepot()) {
-                    if (iData.getDeliveryInsertionIndex() >= route.getTourActivities()
-                                    .getActivities().size()) {
-                        setEndLocation(route, (Service) job);
-                    }
-                }
-                TourActivity activity = job.getActivityList().getAllDuplicated().get(0);
-                route.getTourActivities().addActivity(iData.getDeliveryInsertionIndex(), activity);
-            } else {
-                delegate(job, iData, route);
-            }
-        }
-
-        private void setEndLocation(VehicleRoute route, Service service) {
-            route.getEnd().setLocation(service.getLocation());
-        }
-    }
-
-    private class ShipmentInsertionHandler extends JobInsertionHandler {
-
-        @Override
-        public void handleJobInsertion(Job job, InsertionData iData, VehicleRoute route) {
-            if (job instanceof Shipment) {
-                List<JobActivity> acts = job.getActivityList().getAllDuplicated(); // vehicleRoutingProblem.copyAndGetActivities(job);
-                TourActivity pickupShipment = acts.get(0);
-                TourActivity deliverShipment = acts.get(1);
-                route.setVehicleAndDepartureTime(iData.getSelectedVehicle(),
-                                iData.getVehicleDepartureTime());
-                if (!iData.getSelectedVehicle().isReturnToDepot()) {
-                    if (iData.getDeliveryInsertionIndex() >= route.getActivities().size()) {
-                        setEndLocation(route, (Shipment) job);
-                    }
-                }
-                route.getTourActivities().addActivity(iData.getDeliveryInsertionIndex(),
-                                deliverShipment);
-                route.getTourActivities().addActivity(iData.getPickupInsertionIndex(),
-                                pickupShipment);
-            } else {
-                delegate(job, iData, route);
-            }
-        }
-
-        private void setEndLocation(VehicleRoute route, Shipment shipment) {
-            route.getEnd().setLocation(shipment.getDeliveryLocation());
-        }
-    }
-
-    private InsertionListeners insertionListeners;
-
-    private JobInsertionHandler jobInsertionHandler;
-
-    private VehicleRoutingProblem vehicleRoutingProblem;
-
-    public Inserter(InsertionListeners insertionListeners, VehicleRoutingProblem vehicleRoutingProblem) {
-        this.insertionListeners = insertionListeners;
-        new DefaultTourActivityFactory();
-
-        // Balage1551 - The new, unified handler
-        // There is a problem: how to handle uniformly insertation indexes for
-        // multiple activities
-        // jobInsertionHandler = new UnifiedInsertionHandler();
-
-        //The old ones:
-        jobInsertionHandler = new ServiceInsertionHandler().withNextHandler(
-                        new ShipmentInsertionHandler().withNextHandler(new JobExceptionHandler()));
-    }
-
-    public void insertJob(Job job, InsertionData insertionData, VehicleRoute vehicleRoute) {
-        insertionListeners.informBeforeJobInsertion(job, insertionData, vehicleRoute);
-
-        if (insertionData == null || (insertionData instanceof NoInsertionFound)) {
-            throw new IllegalStateException("insertionData null. cannot insert job.");
-        }
-        if (job == null) {
-            throw new IllegalStateException("cannot insert null-job");
-        }
-        if (!(vehicleRoute.getVehicle().getId().equals(insertionData.getSelectedVehicle().getId()))) {
-            insertionListeners.informVehicleSwitched(vehicleRoute, vehicleRoute.getVehicle(), insertionData.getSelectedVehicle());
-            vehicleRoute.setVehicleAndDepartureTime(insertionData.getSelectedVehicle(), insertionData.getVehicleDepartureTime());
-        }
-        jobInsertionHandler.handleJobInsertion(job, insertionData, vehicleRoute);
-
-        insertionListeners.informJobInserted(job, vehicleRoute, insertionData.getInsertionCost(), insertionData.getAdditionalTime());
-    }
-}
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ServiceInsertionAndLoadConstraintsTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ServiceInsertionAndLoadConstraintsTest.java
index 59a1532d0..27b28d4a7 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ServiceInsertionAndLoadConstraintsTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ServiceInsertionAndLoadConstraintsTest.java
@@ -124,8 +124,7 @@ public void whenInsertingServiceWhileNoCapIsAvailable_itMustReturnTheCorrectInse
         VehicleRoute route = VehicleRoute.emptyRoute();
         route.setVehicleAndDepartureTime(vehicle, 0.0);
 
-        Inserter inserter = new Inserter(new InsertionListeners(), vrp);
-        inserter.insertJob(delivery, new InsertionData(0, 0, 0, vehicle, null), route);
+        route.getTourActivities().addActivity(0,vrp.copyAndGetActivities(delivery).get(0));
 
         JobActivityFactory activityFactory = new CopyJobActivityFactory();
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ShipmentInsertionCalculatorTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ShipmentInsertionCalculatorTest.java
index edac630de..be8dc7327 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ShipmentInsertionCalculatorTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ShipmentInsertionCalculatorTest.java
@@ -130,11 +130,12 @@ public void whenCalculatingInsertionIntoExistingRoute_itShouldReturnCorrectCosts
         Shipment shipment = Shipment.Builder.newInstance("s").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,10").build()).setDeliveryLocation(Location.newInstance("10,0")).build();
         Shipment shipment2 = Shipment.Builder.newInstance("s2").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("10,10").build()).setDeliveryLocation(Location.newInstance("0,0")).build();
         VehicleRoute route = VehicleRoute.emptyRoute();
-        when(vehicleRoutingProblem.copyAndGetActivities(shipment)).thenReturn(getTourActivities(shipment));
-        new Inserter(new InsertionListeners(), vehicleRoutingProblem).insertJob(shipment, new InsertionData(0, 0, 0, vehicle, null), route);
+        List<JobActivity> tourActivities = getTourActivities(shipment);
+        route.setVehicleAndDepartureTime(vehicle,0);
+        add(tourActivities,route,0,0);
 
         JobActivityFactory activityFactory = mock(JobActivityFactory.class);
-        List<JobActivity> activities = new ArrayList<JobActivity>();
+        List<JobActivity> activities = new ArrayList<>();
         activities.add(new PickupShipmentDEPRECATED(shipment2));
         activities.add(new DeliverShipmentDEPRECATED(shipment2));
         when(activityFactory.createActivities(shipment2)).thenReturn(activities);
@@ -147,7 +148,7 @@ public void whenCalculatingInsertionIntoExistingRoute_itShouldReturnCorrectCosts
     }
 
     private List<JobActivity> getTourActivities(Shipment shipment) {
-        List<JobActivity> acts = new ArrayList<JobActivity>();
+        List<JobActivity> acts = new ArrayList<>();
         PickupShipmentDEPRECATED pick = new PickupShipmentDEPRECATED(shipment);
         DeliverShipmentDEPRECATED del = new DeliverShipmentDEPRECATED(shipment);
         acts.add(pick);
@@ -160,16 +161,11 @@ public void whenInsertingShipmentInRouteWithNotEnoughCapacity_itShouldReturnNoIn
         Shipment shipment = Shipment.Builder.newInstance("s").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,10").build()).setDeliveryLocation(Location.newInstance("10,0")).build();
         Shipment shipment2 = Shipment.Builder.newInstance("s2").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("10,10").build()).setDeliveryLocation(Location.newInstance("0,0")).build();
         VehicleRoute route = VehicleRoute.emptyRoute();
-        when(vehicleRoutingProblem.copyAndGetActivities(shipment)).thenReturn(getTourActivities(shipment));
-        new Inserter(new InsertionListeners(), vehicleRoutingProblem).insertJob(shipment, new InsertionData(0, 0, 0, vehicle, null), route);
-        createInsertionCalculator(new HardRouteConstraint() {
+        List<JobActivity> tourActivities = getTourActivities(shipment);
+        route.setVehicleAndDepartureTime(vehicle,0);
+        add(tourActivities,route,0,0);
 
-            @Override
-            public boolean fulfilled(JobInsertionContext insertionContext) {
-                return false;
-            }
-
-        });
+        createInsertionCalculator(insertionContext -> false);
 
         JobActivityFactory activityFactory = mock(JobActivityFactory.class);
         List<JobActivity> activities = new ArrayList<JobActivity>();
@@ -191,14 +187,15 @@ public void whenInsertingThirdShipment_itShouldCalcCorrectVal() {
         Shipment shipment3 = Shipment.Builder.newInstance("s3").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,0").build()).setDeliveryLocation(Location.newInstance("9,10")).build();
 
         VehicleRoute route = VehicleRoute.emptyRoute();
-        when(vehicleRoutingProblem.copyAndGetActivities(shipment)).thenReturn(getTourActivities(shipment));
-        when(vehicleRoutingProblem.copyAndGetActivities(shipment2)).thenReturn(getTourActivities(shipment2));
-        Inserter inserter = new Inserter(new InsertionListeners(), vehicleRoutingProblem);
-        inserter.insertJob(shipment, new InsertionData(0, 0, 0, vehicle, null), route);
-        inserter.insertJob(shipment2, new InsertionData(0, 1, 2, vehicle, null), route);
+        List<JobActivity> shipmentActivities = getTourActivities(shipment);
+        List<JobActivity> shipment2Activities = getTourActivities(shipment2);
+
+        route.setVehicleAndDepartureTime(vehicle,0d);
+        add(shipmentActivities,route,0,0);
+        add(shipment2Activities,route,1,2);
 
         JobActivityFactory activityFactory = mock(JobActivityFactory.class);
-        List<JobActivity> activities = new ArrayList<JobActivity>();
+        List<JobActivity> activities = new ArrayList<>();
         activities.add(new PickupShipmentDEPRECATED(shipment3));
         activities.add(new DeliverShipmentDEPRECATED(shipment3));
         when(activityFactory.createActivities(shipment3)).thenReturn(activities);
@@ -215,15 +212,16 @@ public void whenInsertingThirdShipment_itShouldCalcCorrectVal2() {
         Shipment shipment = Shipment.Builder.newInstance("s").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,10").build()).setDeliveryLocation(Location.newInstance("10,0")).build();
         Shipment shipment2 = Shipment.Builder.newInstance("s2").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("10,10").build()).setDeliveryLocation(Location.newInstance("0,0")).build();
         Shipment shipment3 = Shipment.Builder.newInstance("s3").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,0").build()).setDeliveryLocation(Location.newInstance("9,9")).build();
-        when(vehicleRoutingProblem.copyAndGetActivities(shipment)).thenReturn(getTourActivities(shipment));
-        when(vehicleRoutingProblem.copyAndGetActivities(shipment2)).thenReturn(getTourActivities(shipment2));
+        List<JobActivity> shipmentActivities = getTourActivities(shipment);
+        List<JobActivity> shipment2Activities = getTourActivities(shipment2);
         VehicleRoute route = VehicleRoute.emptyRoute();
-        Inserter inserter = new Inserter(new InsertionListeners(), vehicleRoutingProblem);
-        inserter.insertJob(shipment, new InsertionData(0, 0, 0, vehicle, null), route);
-        inserter.insertJob(shipment2, new InsertionData(0, 1, 2, vehicle, null), route);
+
+        route.setVehicleAndDepartureTime(vehicle,0d);
+        add(shipmentActivities,route,0,0);
+        add(shipment2Activities,route,1,2);
 
         JobActivityFactory activityFactory = mock(JobActivityFactory.class);
-        List<JobActivity> activities = new ArrayList<JobActivity>();
+        List<JobActivity> activities = new ArrayList<>();
         activities.add(new PickupShipmentDEPRECATED(shipment3));
         activities.add(new DeliverShipmentDEPRECATED(shipment3));
         when(activityFactory.createActivities(shipment3)).thenReturn(activities);
@@ -248,9 +246,8 @@ public void whenInstertingShipmentWithLoadConstraintWhereCapIsNotSufficient_capC
         VehicleRoute route = VehicleRoute.emptyRoute();
         route.setVehicleAndDepartureTime(vehicle, 0.0);
 
-        Inserter inserter = new Inserter(new InsertionListeners(), vrp);
-        inserter.insertJob(shipment, new InsertionData(0, 0, 0, vehicle, null), route);
-        inserter.insertJob(shipment2, new InsertionData(0, 1, 2, vehicle, null), route);
+        add(vrp,route,shipment,0,0);
+        add(vrp,route,shipment2,1,2);
 
         StateManager stateManager = new StateManager(vrp);
         stateManager.updateLoadStates();
@@ -280,10 +277,8 @@ public void whenInsertingServiceWhileNoCapIsAvailable_itMustReturnNoInsertionDat
         VehicleRoute route = VehicleRoute.emptyRoute();
         route.setVehicleAndDepartureTime(vehicle, 0.0);
 
-        Inserter inserter = new Inserter(new InsertionListeners(), vrp);
-
-        inserter.insertJob(shipment, new InsertionData(0, 0, 0, vehicle, null), route);
-        inserter.insertJob(shipment2, new InsertionData(0, 1, 2, vehicle, null), route);
+        add(vrp,route,shipment,0,0);
+        add(vrp,route,shipment2,1,2);
 
         StateManager stateManager = new StateManager(vrp);
         stateManager.updateLoadStates();
@@ -317,5 +312,16 @@ public void whenInsertingServiceWhileNoCapIsAvailable_itMustReturnNoInsertionDat
         assertEquals(3, iData.getDeliveryInsertionIndex());
     }
 
+    private void add(VehicleRoutingProblem vrp, VehicleRoute route, Shipment shipment, int pickI, int delI) {
+        List<JobActivity> shipmentActivities = vrp.copyAndGetActivities(shipment);
+        route.getTourActivities().addActivity(delI, shipmentActivities.get(1));
+        route.getTourActivities().addActivity(pickI, shipmentActivities.get(0));
+    }
+
+    private void add(List<JobActivity> shipmentActivities, VehicleRoute route, int pickI, int delI) {
+        route.getTourActivities().addActivity(delI, shipmentActivities.get(1));
+        route.getTourActivities().addActivity(pickI, shipmentActivities.get(0));
+    }
+
 
 }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestInserter.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestInserter.java
deleted file mode 100644
index 8c51b285d..000000000
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestInserter.java
+++ /dev/null
@@ -1,281 +0,0 @@
-/*
- * Licensed to GraphHopper GmbH under one or more contributor
- * license agreements. See the NOTICE file distributed with this work for
- * additional information regarding copyright ownership.
- *
- * GraphHopper GmbH licenses this file to you under the Apache License,
- * Version 2.0 (the "License"); you may not use this file except in
- * compliance with the License. You may obtain a copy of the License at
- *
- *       http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.graphhopper.jsprit.core.algorithm.recreate;
-
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import org.junit.Test;
-
-import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionListeners;
-import com.graphhopper.jsprit.core.algorithm.state.UpdateEndLocationIfRouteIsOpen;
-import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.driver.Driver;
-import com.graphhopper.jsprit.core.problem.job.Service;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
-import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverShipmentDEPRECATED;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupServiceDEPRECATED;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupShipmentDEPRECATED;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
-import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
-import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
-import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
-
-public class TestInserter {
-
-    private Service.Builder createService(String name, Location loc) {
-        TimeWindow tw = TimeWindow.newInstance(0, 10);
-
-        return new Service.Builder(name)
-                .setTimeWindow(tw)
-                .setLocation(loc);
-    }
-
-
-    protected Shipment.Builder createStandardShipment(String name) {
-        Location loc = Location.Builder.newInstance().setId("delLoc").build();
-        TimeWindow tw = TimeWindow.newInstance(0, 10);
-        return Shipment.Builder.newInstance(name)
-                .addSizeDimension(0, 10)
-                .setPickupTimeWindow(tw)
-                .setDeliveryTimeWindow(tw)
-                .setPickupLocation(loc)
-                .setDeliveryLocation(loc);
-    }
-
-    @Test
-    public void whenInsertingServiceAndRouteIsClosed_itInsertsCorrectly() {
-//        Service service = mock(Service.class);
-//        when(service.getActivityList()).thenReturn(new SequentialJobActivityList(service));
-//        when(service.getTimeWindow()).thenReturn(mock(TimeWindow.class));
-
-        Location loc = Location.Builder.newInstance().setId("loc").build();
-        Service service = createService("s1", loc).build();
-
-        Vehicle vehicle = mock(Vehicle.class);
-        when(vehicle.getStartLocation()).thenReturn(loc("vehLoc"));
-        when(vehicle.getEndLocation()).thenReturn(loc("vehLoc"));
-        when(vehicle.isReturnToDepot()).thenReturn(true);
-        when(vehicle.getId()).thenReturn("vehId");
-
-        VehicleRoute route = VehicleRoute.Builder.newInstance(vehicle, mock(Driver.class)).addService(service).build();
-        //start - pick(shipment) - del(shipment) - end
-        Service serviceToInsert = createService("toInsert", loc).build();
-
-        InsertionData iData = mock(InsertionData.class);
-        when(iData.getDeliveryInsertionIndex()).thenReturn(1);
-        when(iData.getSelectedVehicle()).thenReturn(vehicle);
-
-        VehicleRoutingProblem vehicleRoutingProblem = mock(VehicleRoutingProblem.class);
-        List<JobActivity> acts = new ArrayList<>();
-        PickupServiceDEPRECATED act = new PickupServiceDEPRECATED(serviceToInsert);
-        acts.add(act);
-        when(vehicleRoutingProblem.copyAndGetActivities(serviceToInsert)).thenReturn(acts);
-        Inserter inserter = new Inserter(mock(InsertionListeners.class), vehicleRoutingProblem);
-        inserter.insertJob(serviceToInsert, iData, route);
-
-        assertEquals(2, route.getTourActivities().getActivities().size());
-        assertEquals(route.getTourActivities().getActivities().get(1).getLocation().getId(), serviceToInsert.getLocation().getId());
-        assertEquals(route.getEnd().getLocation().getId(), vehicle.getEndLocation().getId());
-    }
-
-    private Location loc(String vehLoc) {
-        return Location.Builder.newInstance().setId(vehLoc).build();
-    }
-
-    @Test
-    public void whenInsertingServiceAndRouteIsOpen_itInsertsCorrectlyAndSwitchesEndLocation() {
-        Service service = createService("alma", Location.newInstance("loc")).build();
-        Vehicle vehicle = mock(Vehicle.class);
-        when(vehicle.getStartLocation()).thenReturn(Location.newInstance("vehLoc"));
-        when(vehicle.getEndLocation()).thenReturn(Location.newInstance("vehLoc"));
-        when(vehicle.isReturnToDepot()).thenReturn(false);
-        when(vehicle.getId()).thenReturn("vehId");
-
-        VehicleRoute route = VehicleRoute.Builder.newInstance(vehicle, mock(Driver.class)).addService(service).build();
-        Service serviceToInsert = createService("alma", Location.newInstance("delLoc")).build();
-
-        InsertionData iData = mock(InsertionData.class);
-        when(iData.getDeliveryInsertionIndex()).thenReturn(1);
-        when(iData.getSelectedVehicle()).thenReturn(vehicle);
-
-        VehicleRoutingProblem vehicleRoutingProblem = mock(VehicleRoutingProblem.class);
-// REMARK - Balage1551 - This one is throwing a mockito exception, I don't understand why.
-        when(vehicleRoutingProblem.copyAndGetActivities(serviceToInsert)).thenReturn(getTourActivities(serviceToInsert));
-
-        Inserter inserter = new Inserter(mock(InsertionListeners.class), vehicleRoutingProblem);
-        inserter.insertJob(serviceToInsert, iData, route);
-
-        assertEquals(2, route.getTourActivities().getActivities().size());
-        assertEquals(route.getTourActivities().getActivities().get(1).getLocation().getId(), serviceToInsert.getLocation().getId());
-        assertEquals(route.getEnd().getLocation().getId(), serviceToInsert.getLocation().getId());
-    }
-
-    private List<JobActivity> getTourActivities(Service serviceToInsert) {
-        List<JobActivity> acts = new ArrayList<>();
-        acts.add(new PickupServiceDEPRECATED(serviceToInsert));
-        return acts;
-    }
-
-
-    @Test
-    public void whenInsertingShipmentAndRouteIsClosed_itInsertsCorrectly() {
-        Shipment shipment = createStandardShipment("s1").build();
-
-        Vehicle vehicle = mock(Vehicle.class);
-        when(vehicle.getStartLocation()).thenReturn(loc("vehLoc"));
-        when(vehicle.getEndLocation()).thenReturn(loc("vehLoc"));
-        when(vehicle.isReturnToDepot()).thenReturn(true);
-        when(vehicle.getId()).thenReturn("vehId");
-
-        VehicleRoute route = VehicleRoute.Builder.newInstance(vehicle, mock(Driver.class)).addPickup(shipment).addDelivery(shipment).build();
-        //start - pick(shipment) - del(shipment) - end
-        Shipment shipmentToInsert = Shipment.Builder.newInstance("s").setDeliveryLocation(Location.newInstance("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
-
-        InsertionData iData = mock(InsertionData.class);
-        when(iData.getPickupInsertionIndex()).thenReturn(2);
-        when(iData.getDeliveryInsertionIndex()).thenReturn(2);
-        when(iData.getSelectedVehicle()).thenReturn(vehicle);
-
-        VehicleRoutingProblem vehicleRoutingProblem = mock(VehicleRoutingProblem.class);
-        when(vehicleRoutingProblem.copyAndGetActivities(shipmentToInsert)).thenReturn(getTourActivities(shipmentToInsert));
-        Inserter inserter = new Inserter(mock(InsertionListeners.class), vehicleRoutingProblem);
-        inserter.insertJob(shipmentToInsert, iData, route);
-
-        assertEquals(4, route.getTourActivities().getActivities().size());
-        assertEquals(route.getTourActivities().getActivities().get(2).getLocation().getId(), shipmentToInsert.getPickupLocation().getId());
-        assertEquals(route.getTourActivities().getActivities().get(3).getLocation().getId(), shipmentToInsert.getDeliveryLocation().getId());
-        assertEquals(route.getEnd().getLocation().getId(), vehicle.getEndLocation().getId());
-    }
-
-    private List<JobActivity> getTourActivities(Shipment shipmentToInsert) {
-        List<JobActivity> acts = new ArrayList<>();
-        acts.add(new PickupShipmentDEPRECATED(shipmentToInsert));
-        acts.add(new DeliverShipmentDEPRECATED(shipmentToInsert));
-        return acts;
-    }
-
-    @Test
-    public void whenInsertingShipmentAndRouteIsOpen_itInsertsCorrectlyAndSwitchesEndLocation() {
-        Shipment shipment = createStandardShipment("s1").build();
-
-        Vehicle vehicle = mock(Vehicle.class);
-        when(vehicle.isReturnToDepot()).thenReturn(false);
-        when(vehicle.getId()).thenReturn("vehId");
-
-        VehicleRoute route = VehicleRoute.Builder.newInstance(vehicle, mock(Driver.class)).addPickup(shipment).addDelivery(shipment).build();
-        //start - pick(shipment) - del(shipment) - end
-        Shipment shipmentToInsert = Shipment.Builder.newInstance("s").setDeliveryLocation(Location.newInstance("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
-        InsertionData iData = mock(InsertionData.class);
-        when(iData.getPickupInsertionIndex()).thenReturn(2);
-        when(iData.getDeliveryInsertionIndex()).thenReturn(2);
-        when(iData.getSelectedVehicle()).thenReturn(vehicle);
-
-        VehicleRoutingProblem vehicleRoutingProblem = mock(VehicleRoutingProblem.class);
-        when(vehicleRoutingProblem.copyAndGetActivities(shipmentToInsert)).thenReturn(getTourActivities(shipmentToInsert));
-        Inserter inserter = new Inserter(mock(InsertionListeners.class), vehicleRoutingProblem);
-        inserter.insertJob(shipmentToInsert, iData, route);
-
-        assertEquals(4, route.getTourActivities().getActivities().size());
-        assertEquals(route.getTourActivities().getActivities().get(2).getLocation().getId(), shipmentToInsert.getPickupLocation().getId());
-        assertEquals(route.getTourActivities().getActivities().get(3).getLocation().getId(), shipmentToInsert.getDeliveryLocation().getId());
-        assertEquals(route.getEnd().getLocation().getId(), shipmentToInsert.getDeliveryLocation().getId());
-    }
-
-    @Test
-    public void whenSwitchingVehicleAndRouteIsClosed_newStartAndEndShouldBeTheLocationOfNewVehicle() {
-        Shipment shipment = createStandardShipment("s1").build();
-        Vehicle vehicle = VehicleImpl.Builder.newInstance("vehId").setStartLocation(Location.newInstance("vehLoc")).setType(mock(VehicleType.class)).build();
-        Vehicle newVehicle = VehicleImpl.Builder.newInstance("newVehId").setStartLocation(Location.newInstance("newVehLoc")).setType(mock(VehicleType.class)).build();
-
-        VehicleRoute route = VehicleRoute.Builder.newInstance(vehicle, mock(Driver.class)).addPickup(shipment).addDelivery(shipment).build();
-        //start - pick(shipment) - del(shipment) - end
-        Shipment shipmentToInsert = Shipment.Builder.newInstance("s").setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).setDeliveryLocation(Location.newInstance("delLoc")).build();
-
-        InsertionData iData = mock(InsertionData.class);
-        when(iData.getPickupInsertionIndex()).thenReturn(2);
-        when(iData.getDeliveryInsertionIndex()).thenReturn(2);
-        when(iData.getSelectedVehicle()).thenReturn(newVehicle);
-
-        VehicleRoutingProblem vehicleRoutingProblem = mock(VehicleRoutingProblem.class);
-        when(vehicleRoutingProblem.copyAndGetActivities(shipmentToInsert)).thenReturn(getTourActivities(shipmentToInsert));
-        Inserter inserter = new Inserter(mock(InsertionListeners.class), vehicleRoutingProblem);
-        inserter.insertJob(shipmentToInsert, iData, route);
-
-        assertEquals(route.getEnd().getLocation().getId(), newVehicle.getEndLocation().getId());
-    }
-
-    @Test
-    public void whenSwitchingVehicleAndRouteIsOpen_endLocationShouldBeTheLocationOfTheLastActivity() {
-        Shipment shipment = createStandardShipment("s1").build();
-        Vehicle vehicle = VehicleImpl.Builder.newInstance("vehId").setReturnToDepot(false).setStartLocation(Location.newInstance("vehLoc")).setType(mock(VehicleType.class)).build();
-        Vehicle newVehicle = VehicleImpl.Builder.newInstance("newVehId").setReturnToDepot(false).setStartLocation(Location.newInstance("newVehLoc")).setType(mock(VehicleType.class)).build();
-
-        VehicleRoute route = VehicleRoute.Builder.newInstance(vehicle, mock(Driver.class)).addPickup(shipment).addDelivery(shipment).build();
-        //start - pick(shipment) - del(shipment) - end
-        Shipment shipmentToInsert = Shipment.Builder.newInstance("s").setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).setDeliveryLocation(Location.newInstance("delLoc")).build();
-
-        InsertionData iData = mock(InsertionData.class);
-        when(iData.getPickupInsertionIndex()).thenReturn(2);
-        when(iData.getDeliveryInsertionIndex()).thenReturn(2);
-        when(iData.getSelectedVehicle()).thenReturn(newVehicle);
-
-        VehicleRoutingProblem vehicleRoutingProblem = mock(VehicleRoutingProblem.class);
-        when(vehicleRoutingProblem.copyAndGetActivities(shipmentToInsert)).thenReturn(getTourActivities(shipmentToInsert));
-        Inserter inserter = new Inserter(mock(InsertionListeners.class), vehicleRoutingProblem);
-        inserter.insertJob(shipmentToInsert, iData, route);
-
-        assertEquals("delLoc", route.getEnd().getLocation().getId());
-    }
-
-    @Test
-    public void whenInsertingShipmentAtBeginningAndSwitchingVehicleAndRouteIsOpen_endLocationShouldBeTheLocationOfTheLastActivity() {
-        Shipment shipment = createStandardShipment("s1")
-                .setDeliveryLocation(Location.newInstance("oldShipmentDelLoc"))
-                .build();
-        Vehicle vehicle = VehicleImpl.Builder.newInstance("vehId").setReturnToDepot(false).setStartLocation(Location.Builder.newInstance().setId("vehLoc").build()).setType(mock(VehicleType.class)).build();
-        Vehicle newVehicle = VehicleImpl.Builder.newInstance("newVehId").setReturnToDepot(false).setStartLocation(Location.Builder.newInstance().setId("newVehLoc").build()).setType(mock(VehicleType.class)).build();
-
-        VehicleRoute route = VehicleRoute.Builder.newInstance(vehicle, mock(Driver.class)).addPickup(shipment).addDelivery(shipment).build();
-        //start - pick(shipment) - del(shipment) - end
-        Shipment shipmentToInsert = Shipment.Builder.newInstance("s").setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).setDeliveryLocation(Location.newInstance("delLoc")).build();
-
-        InsertionData iData = mock(InsertionData.class);
-        when(iData.getPickupInsertionIndex()).thenReturn(0);
-        when(iData.getDeliveryInsertionIndex()).thenReturn(0);
-        when(iData.getSelectedVehicle()).thenReturn(newVehicle);
-
-        VehicleRoutingProblem vehicleRoutingProblem = mock(VehicleRoutingProblem.class);
-        when(vehicleRoutingProblem.copyAndGetActivities(shipmentToInsert)).thenReturn(getTourActivities(shipmentToInsert));
-        Inserter inserter = new Inserter(mock(InsertionListeners.class), vehicleRoutingProblem);
-        inserter.insertJob(shipmentToInsert, iData, route);
-
-        UpdateEndLocationIfRouteIsOpen updateEnd = new UpdateEndLocationIfRouteIsOpen();
-        updateEnd.visit(route);
-
-        assertEquals("oldShipmentDelLoc", route.getEnd().getLocation().getId());
-    }
-
-}
