diff --git a/.gitignore b/.gitignore
index 82606be8c..a0dfbfe9a 100644
--- a/.gitignore
+++ b/.gitignore
@@ -11,4 +11,5 @@
 
 # Eclipse
 .project
-.classpath
\ No newline at end of file
+.classpath
+jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter_depr.java
diff --git a/docs/2.0/IntroductionToCustomJobs.md b/docs/2.0/IntroductionToCustomJobs.md
new file mode 100644
index 000000000..c3e387989
--- /dev/null
+++ b/docs/2.0/IntroductionToCustomJobs.md
@@ -0,0 +1,52 @@
+# Introduction to Custom Jobs
+
+In the previous version of Jsprit, users had the choice to pick one of the four, predefined job types: Services, Pickups, Deliveries or Shipments. Life is much more complex and these limited palette of basic ingredients often proved to be not enough, forcing the users to make complex constraints. 
+Internally, the jobs were broken down into steps called *activities*, but the parameters of these activities were configured and stored in the Job.
+
+Jsprit 2 uses a completely different approach. Even if you are experienced with Jsprit, it is vital to understand the new concept.
+
+What is a job? A sequence of tasks (*activities*) someone has to fulfill. In Jsprit 2, a `Job` is nothing more than a container which contains one or more `Activities`. The algorithm will ensure that these activities
+
+* are executed on the same route
+* either all or none of them is included in the solution
+* their order is kept as they were defined.
+
+The activities became the main building blocks of the problems. They have their own 
+
+* capacity impact (size dimension change)
+* time windows
+* operation time
+* location.
+
+There are for type of abilities, differentiated by their impact on vehicle load:
+
+| Type     | Capacity impact                          |
+| -------- | ---------------------------------------- |
+| Service  | No change in vehicle load.               |
+| Pickup   | Some space is allocated in one or more dimensions. |
+| Delivery | Some space is freed in one or more dimensions. |
+| Exchange | Some dimensions may be increased other may be reduced: a combination of pickup and delivery. |
+
+> *Note: This is only a convenient partitioning, because each other types could be interpreted as a special case of exchange.*
+
+On the other hand, the user has the freedom to build up Jobs from these activities, combining any kind and any number of them. 
+
+**<u>Example:</u>**
+
+A classical case when there is a shipment from the warehouse to the customer, but when delivering the order, the vehicle has to pick up some backhaul cargo at the same time and take it back to the warehouse. (Such as empty crates.)
+
+Earlier this required to define two shipments and ensure that (1) both jobs are done by the same vehicle; (2) the delivery of the first job is immediately preceding the pickup of the second. These rules had to be ensured by complex hard constraints and even the ruin strategy had to be altered.
+
+With Jsprit 2, one can simply define a new `CustomJob` with three activities:
+
+```java
+new CustomJob.Builder(id)
+  		.addPickup(...)
+  		.addExchange(...)
+  		.addDelivery(...)
+  		.build();
+```
+
+All constraints a taken care by the algorithm.
+
+> For convenience and backward compatibility, the old Job types (Service, Pickup, Delivery and Shipment) are kept, but most of their methods are deprecated. Because the vast structural change of the Job/Activity architecture, there are some legacy code breaking changes. See XXX for migration guide!
\ No newline at end of file
diff --git a/docs/2.0/MigrationChecklist.md b/docs/2.0/MigrationChecklist.md
new file mode 100644
index 000000000..38b089e63
--- /dev/null
+++ b/docs/2.0/MigrationChecklist.md
@@ -0,0 +1,92 @@
+# Migration checklist
+
+### Task 1: Capacity to SizeDimension
+
+**<u>Nature:</u>** 
+
+`Capacity` became deprecated but kept, it is fully compatible with the `SizeDimension` class, which is a subclass of `Capacity`.
+
+**<u>Decision:</u>** 
+
+Make `Capacity` *deprecated*. Keep both classes.
+
+**<u>State:</u>**
+
+Ready.
+
+**<u>Migration task:</u>**
+
+None required. Optionally, but strongly recommended to replace all `Capacity` references by `SizeDimension`. (Only a search and replace.)
+
+### Task 2: The Job interface
+
+**<u>Nature:</u>** 
+
+The `Job` interface was extended. This would break any third party implementation of this interface (or the extension of the `AbstractJob` abstract class).
+
+**<u>Decision:</u>** 
+
+There are several ways to overcome on this compatibility conflict:
+
+1. Keep it as it is and force the implementators to extend its implementation or to migrate to `CustomJob`.
+2. Restore the original interface and create an extended one as a descendant of this. The `AbstractJob` is the only one implementing this interface, so it can simply implement the extended one.
+
+Option 1 is a compatibility breaker, but doesn't pollute the code unnecessary and urges the users to switch to new job structure. With Option 2, we are keeping compatibility, but introducing an unnecessary level in the class hierarchy and finding a good name for the extended interface would be hard, because this is only created for the sake of compatibility.
+
+**<u>State:</u>**
+
+(!) Waiting for decision.
+
+**<u>Migration task:</u>**
+
+*Write down detailed description of all mandatory and optional migration tasks.*
+
+### Task 3: The old Job types
+
+**<u>Nature:</u>** 
+
+There are old job types (`Service`, `Pickup`, `Delivery` and `Shipment`) with deprecated methods. With the new `CustomJob` and the special functions (`addService`, `addPickup`, etc.) of its builder, these old job types are redundant and they are only special cases for the more general `CustomJob`. However, they are the central building classes for Jsprit, so keeping and supporting them in some way is vital for backward compatibility.
+
+**<u>Decision:</u>** 
+
+There are several ways to overcome on this compatibility conflict:
+
+1. Remove these classes and guide the users to migrate to the methods in `CustomJob.Builder`.
+2. There are already implementations for these classes in new version, but they are not compatible with the old once. Help the users to migrate to these classes.
+3. Create fa√ßade classes. These classes offer the same interface as the old ones, but extends `CustomJob` and delegates the calls to the new structure.
+
+The first lefts the least of the garbage in the code base, but seems to be too drastic and puts too much migration work on the old users. The second is the way how now the new version works, so here mostly documentation tasks are necessary. The third one would provide an *almost* 100% compatibility, but for a cost of one more redirection, which may have (although possibly minor) performance impact on Jsprit. The *almost* is there, because there may be a few method name collisions where both `CustomJob` and the old classes have the same method, but with different behavior.
+
+My proposal is the 3rd one.
+
+**<u>State:</u>**
+
+(!) Waiting for decision.
+
+**<u>Migration task:</u>**
+
+*Write down detailed description of all mandatory and optional migration tasks.*
+
+
+
+
+
+----
+
+### Task X: 
+
+**<u>Nature:</u>** 
+
+*Write down the nature of the change and how it affects the compatibility.*
+
+**<u>Decision:</u>** 
+
+*Write down how we plan to solve the conflict.* 
+
+**<u>State:</u>**
+
+*Write down the state of the task.*
+
+**<u>Migration task:</u>**
+
+*Write down detailed description of all mandatory and optional migration tasks.*
\ No newline at end of file
diff --git a/docs/2.0/MigrationGuide.md b/docs/2.0/MigrationGuide.md
new file mode 100644
index 000000000..768ca2f8c
--- /dev/null
+++ b/docs/2.0/MigrationGuide.md
@@ -0,0 +1,129 @@
+# Migration guide
+
+The new version of the Jsprit library made deep changes on the key structure. Although we made effort to keep as much as of these changes under the hood, there are some code breaking changes in the new version.
+
+This guide helps you to migrate your code to the new version. The first part of the guide helps you make your code run again as small an effort and as quick as it is possible, without migrating to the new data structure. The second part gives you some hints, how to move your code and your data structure to meet the new version. Although you can get a running code without this migration, the legacy classes backing this partial solution are deprecated and are going to be removed in future versions.
+
+## Chapter 1: The quick guide to make your code run again
+
+To help the third party developers to quickly and painlessly migrate to the new version, the current version of the library contains several legacy classes. They has the same (or as close to the original as it was possible to achieve) API as the ones in the previous version. These classes are now marked as deprecated and mostly facades over the new structure. 
+
+> **Although by completing these migration steps, you are likely to get a running code, keep in mind that these legacy implementations are in the library only temporally and are going to be removed in some future version.**
+
+### Relocation of files
+
+Some of the classes are relocated. Although most of the modern IDEs would simply relocate the import references, here is the list of relocated classes:
+
+| Class       | Old package                         | New package                             |
+| ----------- | ----------------------------------- | --------------------------------------- |
+| AbstractJob | com.graphhopper.jsprit.core.problem | com.graphhopper.jsprit.core.problem.job |
+
+### Using the new structure for own job implementations
+
+If you defined your own implementation of Job, you may run into a few incompatibilities. Before these problems are solved, you have to choose which path you take.
+
+If the reason of your own job implementation is to create jobs with more activities, the new `CustomJob` may render your class deprecated and you can now use the `CustomJob` instead. It brings benefits of being general, and you don't have to create the constraints to keep the activities together (on the same route and either all of them or none). 
+
+If your reason to extends any of the old job types was to add user data to it, it is now better to use the `userData` field of the `CustomJob`.
+
+If, after taking account all the above, you still can't avoid to use your implementation, you have to be aware the structural changes and make your implementation compatible with it. Because there is no defined way how your implementation extends the API, it is impossible to give a step by step guide. However, here are the most important changes your implementation must follow:
+
+- The activities now have fixed set of types (Service, Pickup, Exchange, Delivery) and you have to map your activities to these.
+- Some of the parameters which was on job level are moved to activity level, because they are associated to them: time windows, operation times, size requirements and changes, location.
+- The AbstractJob abstract class is extended with some new abstract methods which should be implemented in your class.
+- The builder mechanism is made inheritance friendly and it is recommended to migrate your one to it. (See the JavaDoc for details!)
+
+
+
+## Chapter 2: Prepare for the future
+
+In this step, we give you guided help how to completely get rid of the legacy classes and move
+
+### Capacity to SizeDimension
+
+The `Capacity` class is renamed to `SizeDimension`. For backward compatibility, the `SizeDimension` class extends the now deprecated `Capacity` class. This let you use the `Capacity` class as variable type anywhere  the value is read out. Also, the `Capacity.Builder` creates a `SizeDimension` class under the hood, so when a `Capacity` object is created it is really a `SizeDimension`.
+
+This makes this rename transparent as far as code correctness goes. However, the `Capacity` class may be removed in the future, so it is strongly recommended to rename all references to `Capacity` to `SizeDimension`.
+
+### Using CustomJob instead of legacy Job types
+
+The old job types (`Service`, `Pickup`, `Delivery`, `Shipment`) are obsolete. However, they can easily be replaced with the new `CustomJob`, by using its Builder methods. 
+
+#### Transforming single-activity jobs
+
+The `Service`, `Pickup`, `Delivery` jobs contain only one activity. They can be replaced by the corresponding addXXX() methods (XXX stands for the name of the old job) in `CustomJob.Builder`. 
+
+These methods comes with four different flavors: 
+
+```
+addService(Location location)
+addService(Location location, SizeDimension size)
+addService(Location location, SizeDimension size, double operationTime)
+addService(Location location, SizeDimension size, double operationTime, TimeWindow tw)
+```
+
+These methods let's you create jobs with a location, size, operation time and a single time window.
+
+**<u>Example 1:</u>**
+
+If you have a Service declaration:
+
+```java
+Service s1 = new Service.Builder("s1").setLocation(Location.newInstance(10, 0)).build();
+```
+
+In this example, only the location is set, so you can replace it to the following code snippet:
+
+```java
+ CustomJob s1 = new CustomJob.Builder("s1")
+            .addService(Location.newInstance(10, 0))
+            .build();
+```
+
+**<u>Example 2:</u>**
+
+When you have to set the time window, but neither the size or the operation time, there are common defaults for these values to use. This code
+
+```java
+Service service = new Service.Builder("s").setLocation(Location.newInstance(20, 0))
+                        .setTimeWindow(TimeWindow.newInstance(40, 50)).build();
+```
+
+may be converted to 
+
+```java
+    CustomJob service = new CustomJob.Builder("s")
+            .addService(Location.newInstance(20, 0), SizeDimension.EMPTY, 0,
+                TimeWindow.newInstance(40, 50))
+            .build();
+```
+**<u>Example 3:</u>**
+
+When you need even more than these convenient methods offer (more time windows, name the activities, skills), you have to do some additional work. First you have to create a `BuilderActivityInfo`:
+
+```
+BuilderActivityInfo activityInfo = new BuilderActivityInfo(ActivityType.SERVICE,
+                Location.newInstance(20, 0));
+```
+
+Then set the required values on it: 
+
+```java
+activityInfo.withName("activity name");
+activityInfo.withOperationTime(10);
+activityInfo.withSize(SizeDimension.Builder.newInstance()
+		.addDimension(0, 1)
+		.addDimension(1, 2)
+		.build());
+activityInfo.withTimeWindows(TimeWindow.newInstance(40, 50), TimeWindow.newInstance(70, 80));
+```
+
+Finally, you can configure the CustomJob.Builder and create the job:
+
+```java
+CustomJob.Builder customJobBuilder = new CustomJob.Builder("id");
+        customJobBuilder.addActivity(activityInfo)
+        .addAllRequiredSkills(Skills.Builder.newInstance().addSkill("skill").build())
+        .setPriority(5)
+        .build();
+```
\ No newline at end of file
diff --git a/jsprit-analysis/src/test/java/com/graphhopper/jsprit/analysis/toolbox/GraphStreamViewerTest.java b/jsprit-analysis/src/test/java/com/graphhopper/jsprit/analysis/toolbox/GraphStreamViewerTest.java
index d1f1014c7..85e3c56ca 100644
--- a/jsprit-analysis/src/test/java/com/graphhopper/jsprit/analysis/toolbox/GraphStreamViewerTest.java
+++ b/jsprit-analysis/src/test/java/com/graphhopper/jsprit/analysis/toolbox/GraphStreamViewerTest.java
@@ -27,7 +27,7 @@
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Break;
 import com.graphhopper.jsprit.core.problem.job.CustomJob;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
@@ -47,7 +47,7 @@ public void testPlotCustomJob() {
         Vehicle vehicle = VehicleImpl.Builder.newInstance("vehicle").setType(type).setBreak(Break.Builder.newInstance("myBreak").addTimeWindow(5, 10).build())
                 .setStartLocation(Location.newInstance(0, 0))
                 .build();
-        CustomJob cj = CustomJob.Builder.newInstance("job")
+        CustomJob cj = new CustomJob.Builder("job")
                 .addPickup(Location.newInstance(10, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).build())
                 .addPickup(Location.newInstance(5, 0), SizeDimension.Builder.newInstance().addDimension(0, 2).build())
                 .addDelivery(Location.newInstance(20, 0), SizeDimension.Builder.newInstance().addDimension(0, 3).build())
@@ -63,7 +63,7 @@ public void testPlotCustomJobSolution() {
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0, 3).build();
         Vehicle vehicle = VehicleImpl.Builder.newInstance("vehicle").setStartLocation(Location.newInstance(0, 0))
                 .setType(type).build();
-        CustomJob cj = CustomJob.Builder.newInstance("job")
+        CustomJob cj = new CustomJob.Builder("job")
                 .addPickup(Location.newInstance(10, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).build())
                 .addPickup(Location.newInstance(-5, 4), SizeDimension.Builder.newInstance().addDimension(0, 2).build())
                 .addDelivery(Location.newInstance(20, 10), SizeDimension.Builder.newInstance().addDimension(0, 3).build())
@@ -78,7 +78,7 @@ public void testPlotWithExchange() {
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0, 3).addCapacityDimension(1, 3).build();
         Vehicle vehicle = VehicleImpl.Builder.newInstance("vehicle").setStartLocation(Location.newInstance(0, 0))
                 .setType(type).build();
-        CustomJob cj = CustomJob.Builder.newInstance("job")
+        CustomJob cj = new CustomJob.Builder("job")
                 .addPickup(Location.newInstance(10, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 1).build())
                 .addExchange(Location.newInstance(-5, 4), SizeDimension.Builder.newInstance().addDimension(0, -1).addDimension(1, 1).build())
                 .addDelivery(Location.newInstance(20, 10), SizeDimension.Builder.newInstance().addDimension(0, 3).build())
@@ -94,7 +94,7 @@ public void testPlotWithShipments() {
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0, 3).build();
         Vehicle vehicle = VehicleImpl.Builder.newInstance("vehicle").setStartLocation(Location.newInstance(0, 0))
                 .setType(type).build();
-        Shipment shipment = Shipment.Builder.newInstance("shipment").setPickupLocation(Location.newInstance(-5, 4))
+        ShipmentJob shipment = new ShipmentJob.Builder("shipment").setPickupLocation(Location.newInstance(-5, 4))
                 .addSizeDimension(0, 2).setDeliveryLocation(Location.newInstance(20, 10)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(shipment).addVehicle(vehicle).build();
         VehicleRoutingProblemSolution solution = Solutions.bestOf(Jsprit.createAlgorithm(vrp).searchSolutions());
diff --git a/jsprit-analysis/src/test/java/com/graphhopper/jsprit/analysis/toolbox/PlotterTest.java b/jsprit-analysis/src/test/java/com/graphhopper/jsprit/analysis/toolbox/PlotterTest.java
index 9c32c2f16..07969ad0b 100644
--- a/jsprit-analysis/src/test/java/com/graphhopper/jsprit/analysis/toolbox/PlotterTest.java
+++ b/jsprit-analysis/src/test/java/com/graphhopper/jsprit/analysis/toolbox/PlotterTest.java
@@ -26,7 +26,7 @@
 import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.CustomJob;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
@@ -45,7 +45,7 @@ public void testPlotCustomJob() {
 
         Vehicle vehicle = VehicleImpl.Builder.newInstance("vehicle").setStartLocation(Location.newInstance(0, 0))
                 .build();
-        CustomJob cj = CustomJob.Builder.newInstance("job")
+        CustomJob cj = new CustomJob.Builder("job")
                 .addPickup(Location.newInstance(10, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).build())
                 .addPickup(Location.newInstance(5, 0), SizeDimension.Builder.newInstance().addDimension(0, 2).build())
                 .addDelivery(Location.newInstance(20, 00), SizeDimension.Builder.newInstance().addDimension(0, 3).build())
@@ -59,7 +59,7 @@ public void testPlotCustomJobSolution() {
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0, 3).build();
         Vehicle vehicle = VehicleImpl.Builder.newInstance("vehicle").setStartLocation(Location.newInstance(0, 0))
                 .setType(type).build();
-        CustomJob cj = CustomJob.Builder.newInstance("job")
+        CustomJob cj = new CustomJob.Builder("job")
                 .addPickup(Location.newInstance(10, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).build())
                 .addPickup(Location.newInstance(-5, 4), SizeDimension.Builder.newInstance().addDimension(0, 2).build())
                 .addDelivery(Location.newInstance(20, 10), SizeDimension.Builder.newInstance().addDimension(0, 3).build())
@@ -74,7 +74,7 @@ public void testPlotWithExchange() {
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0, 3).addCapacityDimension(1, 3).build();
         Vehicle vehicle = VehicleImpl.Builder.newInstance("vehicle").setStartLocation(Location.newInstance(0, 0))
                 .setType(type).build();
-        CustomJob cj = CustomJob.Builder.newInstance("job")
+        CustomJob cj = new CustomJob.Builder("job")
                 .addPickup(Location.newInstance(10, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 1).build())
                 .addExchange(Location.newInstance(-5, 4), SizeDimension.Builder.newInstance().addDimension(0, -1).addDimension(1, 1).build())
                 .addDelivery(Location.newInstance(20, 10), SizeDimension.Builder.newInstance().addDimension(0, 3).build())
@@ -90,7 +90,7 @@ public void testPlotWithShipments() {
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0, 3).build();
         Vehicle vehicle = VehicleImpl.Builder.newInstance("vehicle").setStartLocation(Location.newInstance(0, 0))
                 .setType(type).build();
-        Shipment shipment = Shipment.Builder.newInstance("shipment").setPickupLocation(Location.newInstance(-5, 4))
+        ShipmentJob shipment = new ShipmentJob.Builder("shipment").setPickupLocation(Location.newInstance(-5, 4))
                 .addSizeDimension(0, 2).setDeliveryLocation(Location.newInstance(20, 10)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(shipment).addVehicle(vehicle).build();
         VehicleRoutingProblemSolution solution = Solutions.bestOf(Jsprit.createAlgorithm(vrp).searchSolutions());
diff --git a/jsprit-core/pom.xml b/jsprit-core/pom.xml
index b1b1c828a..37dbb15ef 100644
--- a/jsprit-core/pom.xml
+++ b/jsprit-core/pom.xml
@@ -47,6 +47,11 @@
             <artifactId>commons-csv</artifactId>
             <version>1.4</version>
         </dependency>
+        <dependency> 
+    		<groupId>hu.vissy.plain-text-table</groupId>
+    		<artifactId>ptt-core</artifactId>
+    		<version>${ptt.version}</version>
+        </dependency>
     </dependencies>
 
 </project>
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateLoads.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateLoads.java
index 8d6283d7a..0d9a7f778 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateLoads.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateLoads.java
@@ -22,10 +22,10 @@
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionStartsListener;
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.JobInsertedListener;
 import com.graphhopper.jsprit.core.problem.SizeDimension;
-import com.graphhopper.jsprit.core.problem.job.Delivery;
+import com.graphhopper.jsprit.core.problem.job.DeliveryJob;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Pickup;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.PickupJob;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.ActivityVisitor;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
@@ -84,9 +84,9 @@ void insertionStarts(VehicleRoute route) {
         SizeDimension loadAtDepot = SizeDimension.Builder.newInstance().build();
         SizeDimension loadAtEnd = SizeDimension.Builder.newInstance().build();
         for (Job j : route.getTourActivities().getJobs()) {
-            if (j instanceof Delivery) {
+            if (j instanceof DeliveryJob) {
                 loadAtDepot = loadAtDepot.add(j.getSize());
-            } else if (j instanceof Pickup || j instanceof Service) {
+            } else if (j instanceof PickupJob || j instanceof ServiceJob) {
                 loadAtEnd = loadAtEnd.add(j.getSize());
             }
         }
@@ -103,14 +103,14 @@ public void informInsertionStarts(Collection<VehicleRoute> vehicleRoutes, Collec
 
     @Override
     public void informJobInserted(Job job2insert, VehicleRoute inRoute, double additionalCosts, double additionalTime) {
-        if (job2insert instanceof Delivery) {
+        if (job2insert instanceof DeliveryJob) {
             SizeDimension loadAtDepot = stateManager.getRouteState(inRoute, InternalStates.LOAD_AT_BEGINNING, SizeDimension.class);
             if (loadAtDepot == null) {
                 loadAtDepot = defaultValue;
             }
             stateManager.putTypedInternalRouteState(inRoute, InternalStates.LOAD_AT_BEGINNING,
                             loadAtDepot.add(job2insert.getSize()));
-        } else if (job2insert instanceof Pickup || job2insert instanceof Service) {
+        } else if (job2insert instanceof PickupJob || job2insert instanceof ServiceJob) {
             SizeDimension loadAtEnd = stateManager.getRouteState(inRoute, InternalStates.LOAD_AT_END, SizeDimension.class);
             if (loadAtEnd == null) {
                 loadAtEnd = defaultValue;
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblem.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblem.java
index f38a420cf..5d0e3fa0a 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblem.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblem.java
@@ -225,7 +225,7 @@ public Builder addJob(AbstractJob job) {
             if (tentativeJobs.containsKey(job.getId())) {
                 throw new IllegalArgumentException("vehicle routing problem already contains a service or shipment with id " + job.getId() + ". make sure you use unique ids for all services and shipments");
             }
-            job.setIndex(jobIndexCounter);
+            job.impl_setIndex(jobIndexCounter);
             incJobIndexCounter();
             tentativeJobs.put(job.getId(), job);
             addLocationToTentativeLocations(job);
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceDeliveriesFirstConstraint.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceDeliveriesFirstConstraint.java
index a58caf812..a75f08ce6 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceDeliveriesFirstConstraint.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceDeliveriesFirstConstraint.java
@@ -17,8 +17,8 @@
  */
 package com.graphhopper.jsprit.core.problem.constraint;
 
-import com.graphhopper.jsprit.core.problem.job.Service;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.*;
 
@@ -67,11 +67,11 @@ protected ConstraintsStatus newMethod(TourActivity prevAct, TourActivity newAct,
     }
 
     protected boolean isShipment(TourActivity newAct) {
-        return newAct instanceof JobActivity && ((JobActivity) newAct).getJob() instanceof Shipment;
+        return newAct instanceof JobActivity && ((JobActivity) newAct).getJob() instanceof ShipmentJob;
     }
 
     protected boolean isService(TourActivity newAct) {
-        return newAct instanceof JobActivity && ((JobActivity) newAct).getJob() instanceof Service;
+        return newAct instanceof JobActivity && ((JobActivity) newAct).getJob() instanceof ServiceJob;
     }
 
     // protected ConstraintsStatus old(TourActivity prevAct, TourActivity
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractJob.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractJob.java
index 72ff4670a..cfe0ae55d 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractJob.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractJob.java
@@ -18,59 +18,62 @@
 
 package com.graphhopper.jsprit.core.problem.job;
 
-import com.graphhopper.jsprit.core.problem.SizeDimension;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.LinkedHashSet;
+import java.util.List;
+import java.util.Set;
+
 import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.Skills;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 
-import java.util.*;
-
 /**
  * Abstract base class for all Job implementations.
  * <p>
  * See {@linkplain JobBuilder} for detailed instruction how to implement your
  * Job.
  * </p>
- * <p>
- * Created by schroeder on 14.07.14.
- * </p>
  *
  * @author schroeder
  * @author balage
+ *
  * @see JobBuilder
  */
 public abstract class AbstractJob implements Job {
 
-
     /**
      * Base builder for all direct descendants.
      * <p>
-     * The is an abstract implementation of the builder pattern providing the
-     * base functionality for inheritence. When you create a new AbstractJob
+     * This is an abstract implementation of the builder pattern providing the
+     * base functionality for inheritance. When you create a new AbstractJob
      * implementation and would like to provide builder for it follow the
-     * guidlines below:
+     * guidelines below:
      * </p>
      * <p>
      * First of all, you have to decide whether you would like to create a final
-     * class (no further inheritence from it) or not. If you decide to make your
+     * class (no further inheritance from it) or not. If you decide to make your
      * implementation <code>final</code> you can make your concrete builder in
-     * one step, but make the Job class final to emphasize this fact.
+     * one step, but make the class final to emphasize this fact.
      * </p>
      * <p>
      * If you wish to allow your Job implementation to be extended, first create
      * your own abstract Builder class. The signature of your abstract builder
      * should be something like this (<i>self referencing generics</i>):
      * <p>
+     *
      * <pre>
      * public static abstract class BuilderBase&lt;T extends MyJob, B extends BuilderBase&lt;T, B>>
-     *                 extends JobBuilder&lt;T, B> {
+     *         extends AbstractJob.JobBuilder&lt;T, B> {
      * }
      * </pre>
      * <p>
-     * This implenetation should contain all new fields, the new setters
+     * This implementation should contain all new fields, the new setters
      * following the pattern:
      * <p>
+     *
      * <pre>
      * &#64;SuppressWarnings("unchecked")
      * public B setField(FieldType field) {
@@ -85,8 +88,8 @@
      * getters are provided for the fields as well.
      * </p>
      * <p>
-     * This BuilderBase class is for the new descendents to base their Builder
-     * on. If you don't need to refere to this class outside the descedents,
+     * This BuilderBase class is for the new descendants to base their Builder
+     * on. If you don't need to refer to this class outside the descendants,
      * make it protected.
      * </p>
      * <p>
@@ -94,8 +97,9 @@
      * complex generic pattern and makes it safe (see <a href=
      * "http://stackoverflow.com/questions/7354740/is-there-a-way-to-refer-to-the-current-type-with-a-type-variable">
      * the answer of this topic</a> for more information about the pitfalls of
-     * the self-refering generics pattern):
+     * the self-referring generic pattern):
      * <p>
+     *
      * <pre>
      * public static class Builder extends BuilderBase&lt;MyJob, Builder> {
      *     public Builder(String id) {
@@ -127,42 +131,90 @@
 
         protected int priority = 2;
 
+        protected Object userData;
+
         public JobBuilder(String id) {
-            if (id == null) {
+            if (id == null)
                 throw new IllegalArgumentException("id must not be null");
-            }
             this.id = id;
         }
 
         /**
          * Adds capacity dimension.
          *
-         * @param dimensionIndex the dimension index of the capacity value
-         * @param dimensionValue the capacity value
+         * @param dimensionIndex
+         *            the dimension index of the capacity value
+         * @param dimensionValue
+         *            the capacity value
          * @return the builder
-         * @throws IllegalArgumentException if dimensionValue < 0
+         * @throws IllegalArgumentException
+         *             if dimensionValue < 0
          */
         @SuppressWarnings("unchecked")
         public B addSizeDimension(int dimensionIndex, int dimensionValue) {
-            if (dimensionValue < 0) {
+            if (dimensionValue < 0)
                 throw new IllegalArgumentException("capacity value cannot be negative");
-            }
             capacityBuilder.addDimension(dimensionIndex, dimensionValue);
             return (B) this;
         }
 
+
+        /**
+         * Clones a size dimension structures by adding all dimensions to the
+         * job.
+         *
+         * @param size
+         *            The size dimensions to clone.
+         * @return the builder
+         */
         @SuppressWarnings("unchecked")
-        public B addRequiredSkill(String skill) {
-            skillBuilder.addSkill(skill);
+        public B addAllSizeDimensions(SizeDimension size) {
+            for (int i = 0; i < size.getNuOfDimensions(); i++) {
+                capacityBuilder.addDimension(i, size.get(i));
+            }
             return (B) this;
         }
 
+        /**
+         * Adds a user data object to the job.
+         *
+         * <p>
+         * This object can be any valid Java object and is a black box for the
+         * API. With the user object, the job van be decorated and associated
+         * with any custom information. This information is available anywhere
+         * the job is available (most probably in constraints).
+         * </p>
+         *
+         * @param userData
+         *            The data to associate.
+         * @return the builder
+         */
         @SuppressWarnings("unchecked")
-        public B setName(String name) {
-            this.name = name;
+        protected B addUserData(Object userData) {
+            this.userData = userData;
             return (B) this;
         }
 
+        /**
+         * Adds a required skill to the job.
+         *
+         * @param skill
+         *            The skill to add.
+         * @return the builder
+         */
+        @SuppressWarnings("unchecked")
+        public B addRequiredSkill(String skill) {
+            skillBuilder.addSkill(skill);
+            return (B) this;
+        }
+
+        /**
+         * Clones all skills and adds them to the job.
+         *
+         * @param skills
+         *            The skill set to clone.
+         * @return the builder
+         */
         @SuppressWarnings("unchecked")
         public B addAllRequiredSkills(Skills skills) {
             for (String s : skills.values()) {
@@ -171,29 +223,33 @@ public B addAllRequiredSkills(Skills skills) {
             return (B) this;
         }
 
+        /**
+         * Sets the name of the job.
+         *
+         * @param name
+         *            The name of the job.
+         * @return the builder
+         */
         @SuppressWarnings("unchecked")
-        public B addAllSizeDimensions(SizeDimension size) {
-            for (int i = 0; i < size.getNuOfDimensions(); i++) {
-                capacityBuilder.addDimension(i, size.get(i));
-            }
+        public B setName(String name) {
+            this.name = name;
             return (B) this;
         }
 
         /**
-         * Set priority to service. Only 1 = high priority, 2 = medium and 3 =
-         * low are allowed.
+         * Set priority to service. Only 1 (very high) to 10 (very low) are
+         * allowed.
          * <p>
-         * Default is 2 = medium.
+         * Default is 2.
          *
          * @param priority
          * @return builder
          */
         @SuppressWarnings("unchecked")
         public B setPriority(int priority) {
-            if (priority < 1 || priority > 3) {
+            if (priority < 1 || priority > 10)
                 throw new IllegalArgumentException(
-                    "incorrect priority. only 1 = high, 2 = medium and 3 = low is allowed");
-            }
+                        "incorrect priority. only priority values from 1 to 10 are allowed where 1 = high and 10 is low");
             this.priority = priority;
             return (B) this;
         }
@@ -201,15 +257,13 @@ public B setPriority(int priority) {
         /**
          * Builds the job.
          * <p>
-         * <p>
-         * You never has to override this method. Override the
+         * <b> You never has to override this method. Override the
          * {@linkplain #validate()} and {@linkplain #createInstance()} methods
-         * instead. (See for detailed implementation guidlines at
-         * {@linkplain JobBuilder}!)
+         * instead. (See for detailed implementation guidelines at
+         * {@linkplain JobBuilder}!) </b>
          * </p>
          *
          * @return {@link T} The new implementation of the corresponding Job.
-         * @author balage
          * @see JobBuilder
          */
         public final T build() {
@@ -219,30 +273,66 @@ public final T build() {
             return job;
         }
 
+        /**
+         * Validates the settings. The implementation should throw exception
+         * when the values are inconsistent.
+         */
         protected abstract void validate();
 
+        /**
+         * Creates a new job instance.
+         * <p>
+         * This method is rarely overridden in the abstract base
+         * implementations, but in the concrete Builder classes. (See for
+         * detailed implementation guidelines at {@linkplain JobBuilder}!)
+         * </p>
+         *
+         * @return The new job instance.
+         */
         protected abstract T createInstance();
 
+        /**
+         * @return The constructed size dimension object.
+         */
         public SizeDimension getCapacity() {
             return capacityBuilder.build();
         }
 
+        /**
+         * @return The required skill set.
+         */
         public Skills getSkills() {
             return skillBuilder.build();
         }
 
+        /**
+         * @return The unique id of the job.
+         */
         public String getId() {
             return id;
         }
 
+        /**
+         * @return The (optional) name of the task.
+         */
         public String getName() {
             return name;
         }
 
+        /**
+         * @return The priority value of the task.
+         */
         public int getPriority() {
             return priority;
         }
 
+        /**
+         * @return The asssociated user data object.
+         */
+        public Object getUserData() {
+            return userData;
+        }
+
     }
 
     private int index;
@@ -255,31 +345,39 @@ public int getPriority() {
 
     private int priority;
 
-    protected List<Location> allLocations;
+    private List<Location> allLocations;
 
     private JobActivityList activityList;
 
-    protected Set<TimeWindow> allTimeWindows;
+    private Set<TimeWindow> allTimeWindows;
 
     private SizeDimension sizeAtStart;
 
     private SizeDimension sizeAtEnd;
 
-
+    private Object userData;
 
     /**
      * Builder based constructor.
      *
-     * @param builder The builder instance.
+     * @param builder
+     *            The builder instance.
      * @see JobBuilder
      */
     protected AbstractJob(JobBuilder<?, ?> builder) {
-        super();
         activityList = new SequentialJobActivityList(this);
         id = builder.getId();
         skills = builder.getSkills();
         name = builder.getName();
         priority = builder.getPriority();
+        userData = builder.getUserData();
+    }
+
+    /**
+     * This package local constructor is for legacy job implementations.
+     */
+    @Deprecated
+    AbstractJob() {
     }
 
     @Override
@@ -287,10 +385,25 @@ public int getIndex() {
         return index;
     }
 
-    public void setIndex(int index) {
+    /**
+     * Sets the index of the job within the problem.
+     * <p>
+     * <b>This method isn't part of the public API and should not be called!</b>
+     * </p>
+     *
+     * @param index
+     *            The index.
+     */
+    public void impl_setIndex(int index) {
         this.index = index;
     }
 
+    /**
+     * @return User-specific domain data associated with the job
+     */
+    public Object getUserData() {
+        return userData;
+    }
 
     private void addLocation(Location location) {
         if (location != null) {
@@ -303,6 +416,17 @@ private void addLocation(Location location) {
         return allLocations;
     }
 
+    /**
+     * This method prepares the caches, such as collected location and time
+     * window collections, and calculates the size at start and at the end.
+     *
+     * <p>
+     * Most of the time, you won't need to call this function directly, because
+     * it is called when the activities are created. However, you may override
+     * this method if you have your own caches to initialize in your Job
+     * implementation, but don't forget to call the super method.
+     * </p>
+     */
     protected void prepareCaches() {
         allLocations = new ArrayList<>();
         allTimeWindows = new LinkedHashSet<>();
@@ -319,8 +443,10 @@ private SizeDimension calcSizeAt(boolean start) {
         for (JobActivity act : activityList.getAll()) {
             size = size.add(act.getLoadChange());
         }
-        if (start) return size.getNegativeDimensions().abs();
-        else return size.getPositiveDimensions();
+        if (start)
+            return size.getNegativeDimensions().abs();
+        else
+            return size.getPositiveDimensions();
     }
 
     private void addTimeWindows(Collection<TimeWindow> timeWindows) {
@@ -329,10 +455,16 @@ private void addTimeWindows(Collection<TimeWindow> timeWindows) {
         }
     }
 
+    /**
+     * @return The size dimension at the start.
+     */
     public SizeDimension getSizeAtStart() {
         return sizeAtStart;
     }
 
+    /**
+     * @return The size dimension at the end.
+     */
     public SizeDimension getSizeAtEnd() {
         return sizeAtEnd;
     }
@@ -343,10 +475,10 @@ public SizeDimension getSizeAtEnd() {
      * <p>
      * This functions contract specifies that the implementation has to call
      * {@linkplain #prepareCaches()} function at the end, after all activities
-     * are added.
+     * are added or call the {@linkplain #setActivities(JobActivityList)} method
+     * which calls the above method implicitlely.
      * </p>
      */
-    // protected abstract void createActivities();
     protected abstract void createActivities(JobBuilder<? extends AbstractJob, ?> jobBuilder);
 
     @Override
@@ -358,32 +490,37 @@ public int hashCode() {
     }
 
     /**
-     * Two shipments are equal if they have the same id.
+     * Two jobs are equal if they have the same id.
      *
-     * @return true if shipments are equal (have the same id)
+     * @return true if the jobs are equal (have the same id)
      */
     @Override
     public boolean equals(Object obj) {
-        if (this == obj) {
+        if (this == obj)
             return true;
-        }
-        if (obj == null) {
+        if (obj == null)
             return false;
-        }
-        if (getClass() != obj.getClass()) {
+        if (getClass() != obj.getClass())
             return false;
-        }
         AbstractJob other = (AbstractJob) obj;
         if (id == null) {
-            if (other.id != null) {
+            if (other.id != null)
                 return false;
-            }
-        } else if (!id.equals(other.id)) {
+        } else if (!id.equals(other.id))
             return false;
-        }
         return true;
     }
 
+    /**
+     * Sets the activity list.
+     *
+     * <p>
+     * This method calls the {@linkplain #prepareCaches()} function.
+     * </p>
+     *
+     * @param list
+     *            The activity list
+     */
     protected void setActivities(JobActivityList list) {
         activityList = list;
         prepareCaches();
@@ -394,9 +531,8 @@ public JobActivityList getActivityList() {
         return activityList;
     }
 
-
     @Override
-    public Set<TimeWindow> getTimeWindows() {
+    public Collection<TimeWindow> getTimeWindows() {
         return allTimeWindows;
     }
 
@@ -420,6 +556,4 @@ public int getPriority() {
         return priority;
     }
 
-
 }
-
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractListBackedJobActivityList.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractListBackedJobActivityList.java
index 7ac762d5e..fb750c812 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractListBackedJobActivityList.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractListBackedJobActivityList.java
@@ -34,7 +34,7 @@ public void addActivity(JobActivity activity) {
         validateActivity(activity);
         if (!_activities.contains(activity)) {
             _activities.add(activity);
-            activity.setOrderNumber(_activities.size());
+            activity.impl_setOrderNumber(_activities.size());
         }
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractSingleActivityJob.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractSingleActivityJob.java
index 9dabb2ae7..ef33744dc 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractSingleActivityJob.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractSingleActivityJob.java
@@ -29,21 +29,38 @@
 /**
  * Service implementation of a job.
  * <p>
+ * Note that two services are equal if they have the same id.
+ * </p>
+ * <h3>Warning!</h3>
  * <p>
- * <p>Note that two services are equal if they have the same id.
+ * This class and all its subclasses ({@linkplain ServiceJob},
+ * {@linkplain PickupJob}, {@linkplain DeliveryJob} and
+ * {@linkplain ShipmentJob}) are here for convenience. Most of the time using
+ * them is unnecessary and using the {@linkplain CustomJob} is a better choice.
+ * </p>
+ * <p>
+ * For most of the use cases, the {@linkplain CustomJob} offers sufficient
+ * functionality, so before you decide to implement your own Job implementation
+ * think over if you really need one. If after the above considerations, you
+ * still choose to make your own implementation, it is strongly recommended to
+ * base your implementation on {@linkplain AbstractJob} instead of this class.
+ * It offers little and this class and all its subclasses may most likely be
+ * deprecated and be removed in the future.
+ * </p>
  *
  * @author schroeder
+ * @author Balage
  */
 public abstract class AbstractSingleActivityJob<A extends JobActivity> extends AbstractJob {
 
     /**
-     * Builder that builds a service.
+     * Builder base that builds a job with a single activity.
      *
      * @author schroeder
+     * @author Balage
      */
     public static abstract class BuilderBase<T extends AbstractSingleActivityJob<?>, B extends BuilderBase<T, B>>
     extends JobBuilder<T, B> {
-
         protected String type = "service";
 
         protected double serviceTime;
@@ -52,6 +69,12 @@
 
         protected TimeWindowsImpl timeWindows;
 
+        /**
+         * The constructor of the builder.
+         *
+         * @param id
+         *            The unique id of the job.
+         */
         public BuilderBase(String id) {
             super(id);
             this.id = id;
@@ -61,9 +84,12 @@ public BuilderBase(String id) {
         /**
          * Protected method to set the type-name of the service.
          * <p>
-         * <p>Currently there are {@link AbstractSingleActivityJob}, {@link Pickup} and {@link Delivery}.
+         * <p>
+         * Currently there are {@link ServiceJob}, {@link PickupJob} and
+         * {@link DeliveryJob}.
          *
-         * @param name the name of service
+         * @param name
+         *            the name of service
          * @return the builder
          */
         @SuppressWarnings("unchecked")
@@ -96,9 +122,8 @@ public B setLocation(Location location) {
          */
         @SuppressWarnings("unchecked")
         public B setServiceTime(double serviceTime) {
-            if (serviceTime < 0) {
+            if (serviceTime < 0)
                 throw new IllegalArgumentException("serviceTime must be greater than or equal to zero");
-            }
             this.serviceTime = serviceTime;
             return (B) this;
         }
@@ -114,42 +139,88 @@ public B setServiceTime(double serviceTime) {
         @Override
         @SuppressWarnings("unchecked")
         public B addSizeDimension(int dimensionIndex, int dimensionValue) {
-            if (dimensionValue < 0) {
+            if (dimensionValue < 0)
                 throw new IllegalArgumentException("capacity value cannot be negative");
-            }
             capacityBuilder.addDimension(dimensionIndex, dimensionValue);
             return (B) this;
         }
 
+        /**
+         * Sets a single time window.
+         * <p>
+         * This method clears any previously set time windows. Use
+         * {@linkplain #addTimeWindow(TimeWindow)} to add an additional one,
+         * instead of replacing the already set ones.
+         * </p>
+         *
+         * @param tw
+         *            The time window to set.
+         * @return the builder
+         * @throws IllegalArgumentException
+         *             If the time window is null.
+         */
         @SuppressWarnings("unchecked")
         public B setTimeWindow(TimeWindow tw) {
-            if (tw == null) {
+            if (tw == null)
                 throw new IllegalArgumentException("time-window arg must not be null");
-            }
             timeWindows = new TimeWindowsImpl();
             timeWindows.add(tw);
             return (B) this;
         }
 
+        /**
+         * adds a single time window
+         * <p>
+         * This method adds the time window to the previously set time windows.
+         * </p>
+         *
+         * @param timeWindow
+         *            The time window to set.
+         * @return the builder
+         * @throws IllegalArgumentException
+         *             If the time window is null.
+         */
         @SuppressWarnings("unchecked")
         public B addTimeWindow(TimeWindow timeWindow) {
-            if (timeWindow == null) {
+            if (timeWindow == null)
                 throw new IllegalArgumentException("time-window arg must not be null");
-            }
             timeWindows.add(timeWindow);
             return (B) this;
         }
 
+        /**
+         * Clones the time windows from an existing time window set.
+         *
+         * @param timeWindows
+         *            The time window set.
+         * @return the build
+         */
         public B addTimeWindows(TimeWindows timeWindows) {
             return addTimeWindows(timeWindows.getTimeWindows());
         }
 
+        /**
+         * Adds a collection of time windows.
+         *
+         * @param timeWindows
+         *            The time windows to add.
+         * @return the build
+         */
         @SuppressWarnings("unchecked")
         public B addTimeWindows(Collection<TimeWindow> timeWindows) {
             timeWindows.forEach(t -> addTimeWindow(t));
             return (B) this;
         }
 
+        /**
+         * Constructs and adds a time window.
+         *
+         * @param earliest
+         *            The earliest start.
+         * @param latest
+         *            The latest start.
+         * @return the builder
+         */
         public B addTimeWindow(double earliest, double latest) {
             return addTimeWindow(TimeWindow.newInstance(earliest, latest));
         }
@@ -179,26 +250,37 @@ public B addTimeWindow(double earliest, double latest) {
 
         @Override
         protected void validate() {
-            if (location == null) {
+            if (location == null)
                 throw new IllegalArgumentException("location is missing");
-            }
             if (timeWindows.isEmpty()) {
                 timeWindows.add(TimeWindow.ETERNITY);
             }
         }
 
+        /**
+         * @return The type code.
+         */
         public String getType() {
             return type;
         }
 
+        /**
+         * @return The operation time.
+         */
         public double getServiceTime() {
             return serviceTime;
         }
 
+        /**
+         * @return The location of the job.
+         */
         public Location getLocation() {
             return location;
         }
 
+        /**
+         * @return The time window set.
+         */
         public TimeWindowsImpl getTimeWindows() {
             return timeWindows;
         }
@@ -211,10 +293,27 @@ public TimeWindowsImpl getTimeWindows() {
         type = builder.type;
     }
 
-    protected abstract A createActivity(
-                    BuilderBase<? extends AbstractSingleActivityJob<?>, ?> builder);
+    /**
+     * Creates the single activity.
+     *
+     * @param builder
+     *            the builder object
+     * @return The created activity.
+     */
+    protected abstract A createActivity(BuilderBase<? extends AbstractSingleActivityJob<?>, ?> builder);
 
 
+    /**
+     * Creates the activity.
+     * <p>
+     * It creates an activity list, adds the single activity produces by
+     * {@linkplain #createActivity(BuilderBase)} and sets the activity list on
+     * the job.
+     * </p>
+     *
+     * @param builder
+     *            the builder object.
+     */
     @Override
     protected final void createActivities(JobBuilder<?, ?> builder) {
         @SuppressWarnings("unchecked")
@@ -224,49 +323,14 @@ protected final void createActivities(JobBuilder<?, ?> builder) {
         setActivities(list);
     }
 
+    /**
+     * @return The single activity assigned to the job.
+     */
     @SuppressWarnings("unchecked")
     public A getActivity() {
         return (A) getActivityList().getAll().get(0);
     }
 
-    // /**
-    // * Returns location.
-    // *
-    // * @return location
-    // */
-    // @Deprecated
-    // public Location getLocation() {
-    // return getActivity().getLocation();
-    // }
-    //
-    //
-    // /**
-    // * Returns the service-time/duration a service takes at service-location.
-    // *
-    // * @return service duration
-    // */
-    // @Deprecated
-    // public double getServiceDuration() {
-    // return getActivity().getOperationTime();
-    // }
-    //
-    // /**
-    // * Returns the time-window a service(-operation) is allowed to start.
-    // * It is recommended to use getTimeWindows() instead. If you still use
-    // this, it returns the first time window of getTimeWindows() collection.
-    // *
-    // * @return time window
-    // */
-    // @Deprecated
-    // public TimeWindow getTimeWindow() {
-    // return getTimeWindows().iterator().next();
-    // }
-    //
-    // @Deprecated
-    // public Collection<TimeWindow> getServiceTimeWindows() {
-    // return getActivity().getTimeWindows();
-    // }
-
     /**
      * @return the name
      */
@@ -282,7 +346,7 @@ public String getType() {
     @Override
     public String toString() {
         return "[id=" + getId() + "][name=" + getName() + "][type=" + type + "][activity="
-                        + getActivity() + "]";
+                + getActivity() + "]";
     }
 
 
@@ -293,6 +357,6 @@ public SizeDimension getSize() {
     }
 
     public abstract <X extends BuilderBase<AbstractSingleActivityJob<? extends A>, ? extends BuilderBase<AbstractSingleActivityJob<? extends A>, ?>>> X getBuilder(
-                    String id);
+            String id);
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Break.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Break.java
index b3bf22409..feccd29fe 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Break.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Break.java
@@ -28,7 +28,7 @@
  */
 public class Break extends AbstractSingleActivityJob<BreakActivity> implements InternalJobMarker {
 
-    public static final class Builder extends Service.BuilderBase<Break, Builder> {
+    public static final class Builder extends ServiceJob.BuilderBase<Break, Builder> {
 
         private static final Location VARIABLE_LOCATION = Location
                         .newInstance("@@@VARIABLE_LOCATION");
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/CustomJob.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/CustomJob.java
index 1214c2209..d90cb4f89 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/CustomJob.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/CustomJob.java
@@ -35,6 +35,18 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindowsImpl;
 
 /**
+ * This is a general purpose, highly configurable job.
+ *
+ * <p>
+ * This job offers enough flexibility for most of the problems. It could hold
+ * any number of sequential activities. With the <code>userData</code> field,
+ * any associated business data can be linked to the job.
+ * </p>
+ *
+ * <p>
+ * For details see its {@linkplain Builder}.
+ * </p>
+ *
  * Created by schroeder on 16/11/16.
  *
  * @author schroeder
@@ -42,45 +54,101 @@
  */
 public class CustomJob extends AbstractJob {
 
-
-    public static abstract class BuilderBase<T extends CustomJob, B extends CustomJob.BuilderBase<T, B>>
+    /**
+     * Protected base builder class for {@linkplain CustomJob}.
+     * <p>
+     * The class is the protected part of the inheritable builder pattern. For
+     * more information, see {@linkplain AbstractJob.JobBuilder}.
+     * </p>
+     *
+     * @author Balage
+     *
+     * @param <T>
+     *            The type of the job it creates.
+     * @param <B>
+     *            Self-refering generic value.
+     */
+    protected static abstract class BuilderBase<T extends CustomJob, B extends CustomJob.BuilderBase<T, B>>
     extends JobBuilder<T, B> {
 
+        /**
+         * The possible activity types.
+         *
+         * <p>
+         * Note, that the set of activity types are final.
+         * </p>
+         *
+         * @author Balage
+         *
+         */
         public enum ActivityType {
+            /**
+             * Service activity type.
+             * <p>
+             * The service activity type represents an activity with no cargo
+             * change (nothing is loaded or unloaded).
+             * </p>
+             */
             SERVICE {
 
                 @Override
-                public JobActivity create(CustomJob job, BuilderActivityInfo info) {
+                protected JobActivity create(CustomJob job, BuilderActivityInfo info) {
                     return new ServiceActivity(job, info.getName() == null ? name().toLowerCase() : info.getName(),
-                                    info.getLocation(), info.getOperationTime(), info.getSize(), prepareTimeWindows(info));
+                            info.getLocation(), info.getOperationTime(), info.getSize(), prepareTimeWindows(info));
                 }
             },
+            /**
+             * Pickup activity type.
+             * <p>
+             * The pickup activity type represents an activity where something
+             * is picked up (loaded). It has a positive impact on the cargo
+             * size.
+             * </p>
+             */
             PICKUP {
 
                 @Override
-                public JobActivity create(CustomJob job, BuilderActivityInfo info) {
+                protected JobActivity create(CustomJob job, BuilderActivityInfo info) {
                     return new PickupActivity(job, info.getName() == null ? name().toLowerCase() : info.getName(),
-                                    info.getLocation(), info.getOperationTime(), info.getSize(), prepareTimeWindows(info));
+                            info.getLocation(), info.getOperationTime(), info.getSize(), prepareTimeWindows(info));
                 }
             },
+            /**
+             * Delivery activity type.
+             * <p>
+             * The delivery activity type represents an activity where something
+             * is delivered (unloaded). It has a negative impact on the cargo
+             * size.
+             * </p>
+             */
             DELIVERY {
 
                 @Override
-                public JobActivity create(CustomJob job, BuilderActivityInfo info) {
+                protected JobActivity create(CustomJob job, BuilderActivityInfo info) {
                     return new DeliveryActivity(job, info.getName() == null ? name().toLowerCase() : info.getName(),
-                                    info.getLocation(), info.getOperationTime(), info.getSize(), prepareTimeWindows(info));
+                            info.getLocation(), info.getOperationTime(), info.getSize(), prepareTimeWindows(info));
                 }
             },
+            /**
+             * Exchange activity type.
+             * <p>
+             * The exchange activity type represents an activity where something
+             * is delivered and something else is picked up at the same time.
+             * (loaded and unloaded). It has a mixed (may be even zero) impact
+             * on the cargo size. It may increase one dimension and reduce
+             * another one.
+             * </p>
+             */
             EXCHANGE {
 
                 @Override
-                public JobActivity create(CustomJob job, BuilderActivityInfo info) {
+                protected JobActivity create(CustomJob job, BuilderActivityInfo info) {
                     return new ExchangeActivity(job, info.getName() == null ? name().toLowerCase() : info.getName(),
-                                    info.getLocation(), info.getOperationTime(), info.getSize(), prepareTimeWindows(info));
+                            info.getLocation(), info.getOperationTime(), info.getSize(), prepareTimeWindows(info));
                 }
             };
 
-            public abstract JobActivity create(CustomJob job, BuilderActivityInfo builderActivityInfo);
+            protected abstract JobActivity create(CustomJob job, BuilderActivityInfo builderActivityInfo);
 
             private static Collection<TimeWindow> prepareTimeWindows(BuilderActivityInfo info) {
                 TimeWindows tws = info.getTimeWindows();
@@ -92,6 +160,18 @@ public JobActivity create(CustomJob job, BuilderActivityInfo info) {
         }
 
 
+        /**
+         * Class for defining custom activities when the standard methods of
+         * {@linkplain Builder} are not enough. The class applies the fluent API
+         * pattern.
+         * <p>
+         * Note that this class is <b>NOT</b> immutable, so always create a new
+         * instance for each activity!
+         * </p>
+         *
+         * @author Balage
+         *
+         */
         public static class BuilderActivityInfo {
             private ActivityType type;
             private Location locs;
@@ -101,81 +181,179 @@ public JobActivity create(CustomJob job, BuilderActivityInfo info) {
             private TimeWindowsImpl timeWindows = new TimeWindowsImpl();
 
 
+            /**
+             * Constructs a new instance.
+             *
+             * @param type
+             *            The type of the activity.
+             * @param locs
+             *            The location of the activity.
+             */
             public BuilderActivityInfo(ActivityType type, Location locs) {
                 super();
                 this.type = type;
                 this.locs = locs;
             }
 
+            /**
+             * @return The type of the activity.
+             */
             public ActivityType getType() {
                 return type;
             }
 
+            /**
+             * @return The location of the activity.
+             */
             public Location getLocation() {
                 return locs;
             }
 
+            /**
+             * @return The size dimensions (cargo change) of the activity.
+             */
             public SizeDimension getSize() {
                 return size;
             }
 
+            /**
+             * Sets the size dimensions (cargo change) of the activity.
+             *
+             * @param size
+             *            The size dimensions. (May be negative.)
+             * @return The info object.
+             */
             public BuilderActivityInfo withSize(SizeDimension size) {
                 this.size = size;
                 return this;
             }
 
+            /**
+             * @return The name of the activity (for debug and reporting).
+             */
             public String getName() {
                 return name;
             }
 
+            /**
+             * Sets the name of the activity for debugging and reporting
+             * purpose.
+             *
+             * @param name
+             *            The name.
+             * @return The info object.
+             */
             public BuilderActivityInfo withName(String name) {
                 this.name = name;
                 return this;
             }
 
+            /**
+             * @return The time windows of the activity.
+             */
             public TimeWindows getTimeWindows() {
                 return timeWindows;
             }
 
+            /**
+             * Adds a time window to the activity.
+             *
+             * @param timeWindow
+             *            A time window.
+             * @return The info object.
+             */
             public BuilderActivityInfo withTimeWindow(TimeWindow timeWindow) {
                 timeWindows.add(timeWindow);
                 return this;
             }
 
-            public BuilderActivityInfo withTimeWindows(TimeWindow... tws) {
-                timeWindows.addAll(tws);
+            /**
+             * Adds several time windows to the activity.
+             *
+             * @param timeWindows
+             *            The list of time windows.
+             * @return The info object.
+             */
+            public BuilderActivityInfo withTimeWindows(TimeWindow... timeWindows) {
+                this.timeWindows.addAll(timeWindows);
                 return this;
             }
 
+            /**
+             * Adds several time windows.
+             *
+             * @param tws
+             *            The collection of time windows.
+             * @return The info object.
+             */
             public BuilderActivityInfo withTimeWindows(Collection<TimeWindow> tws) {
                 timeWindows.addAll(tws);
                 return this;
             }
 
+            /**
+             * @return The operation time (time taken to fulfill the activity at
+             *         the location) of the activity.
+             */
             public double getOperationTime() {
                 return operationTime;
             }
 
+            /**
+             * Sets the operation time (time taken to fulfill the activity at
+             * the location).
+             *
+             * @param operationTime
+             *            The operation time.
+             * @return The info object.
+             */
             public BuilderActivityInfo withOperationTime(double operationTime) {
                 this.operationTime = operationTime;
                 return this;
             }
         }
 
-        List<BuilderActivityInfo> acts = new ArrayList<>();
+        private List<BuilderActivityInfo> acts = new ArrayList<>();
 
+        /**
+         * Constructor.
+         *
+         * @param id
+         *            The id of the job. Should be unique within the problem.
+         */
         public BuilderBase(String id) {
             super(id);
         }
 
-        public BuilderBase<T, B> addActivity(BuilderActivityInfo act) {
+        @SuppressWarnings("unchecked")
+        public B addActivity(BuilderActivityInfo act) {
             acts.add(act);
-            return this;
+            return (B) this;
         }
 
 
+        /**
+         * General activity add method.
+         * <p>
+         * It constructs a {@linkplain BuilderActivityInfo} objects and calls
+         * the {@linkplain #addActivity(BuilderActivityInfo)} function.
+         * </p>
+         *
+         * @param type
+         *            The type of the activity.
+         * @param location
+         *            The location of the activity.
+         * @param operationTime
+         *            The operation time of the activity.
+         * @param size
+         *            The cargo change of the activity. May be null.
+         * @param name
+         *            The name of the activity. May be null.
+         * @param timeWindows
+         *            The time windows of the activity. May be null.
+         */
         private void add(ActivityType type, Location location, double operationTime, SizeDimension size, String name,
-                        Collection<TimeWindow> tws) {
+                Collection<TimeWindow> timeWindows) {
             BuilderActivityInfo builderActivityInfo = new BuilderActivityInfo(type, location);
             builderActivityInfo.withOperationTime(operationTime);
             if (name != null) {
@@ -184,8 +362,8 @@ private void add(ActivityType type, Location location, double operationTime, Siz
             if (size != null) {
                 builderActivityInfo.withSize(size);
             }
-            if (tws != null) {
-                builderActivityInfo.withTimeWindows(tws);
+            if (timeWindows != null) {
+                builderActivityInfo.withTimeWindows(timeWindows);
             }
 
             acts.add(builderActivityInfo);
@@ -193,116 +371,341 @@ private void add(ActivityType type, Location location, double operationTime, Siz
 
         // Service
 
-        public CustomJob.BuilderBase<T, B> addService(Location location) {
+        /**
+         * Adds a {@linkplain ActivityType#SERVICE} activity to the job with 0
+         * operation time, without time windows and name.
+         *
+         * @param location
+         *            The location of the activity.
+         * @return The builder instance.
+         */
+        @SuppressWarnings("unchecked")
+        public B addService(Location location) {
             add(ActivityType.SERVICE, location, 0d, null, null, null);
-            return this;
+            return (B) this;
         }
 
-        public CustomJob.BuilderBase<T, B> addService(Location location, SizeDimension size) {
-            add(ActivityType.SERVICE, location, 0d, size, null, null);
-            return this;
-        }
 
-        public CustomJob.BuilderBase<T, B> addService(Location location, SizeDimension size, double operationTime) {
-            add(ActivityType.SERVICE, location, operationTime, size, null, null);
-            return this;
+        /**
+         * Adds a {@linkplain ActivityType#SERVICE} activity to the job without
+         * time windows and name.
+         *
+         * @param location
+         *            The location of the activity.
+         * @param operationTime
+         *            The operation time of the activity.
+         * @return The builder instance.
+         */
+        @SuppressWarnings("unchecked")
+        public B addService(Location location, double operationTime) {
+            add(ActivityType.SERVICE, location, operationTime, null, null, null);
+            return (B) this;
         }
 
-        public CustomJob.BuilderBase<T, B> addService(Location location, SizeDimension size, double operationTime,
-                        TimeWindow tw) {
-            add(ActivityType.SERVICE, location, operationTime, size, null, Collections.singleton(tw));
-            return this;
+        /**
+         * Adds a {@linkplain ActivityType#SERVICE} activity to the job without
+         * name and with a single time window.
+         *
+         * @param location
+         *            The location of the activity.
+         * @param operationTime
+         *            The operation time of the activity.
+         * @param timeWindow
+         *            The time window of the activity.
+         * @return The builder instance.
+         */
+        @SuppressWarnings("unchecked")
+        public B addService(Location location, double operationTime, TimeWindow timeWindow) {
+            add(ActivityType.SERVICE, location, operationTime, null, null, Collections.singleton(timeWindow));
+            return (B) this;
         }
 
 
         // Pickup
 
-        public CustomJob.BuilderBase<T, B> addPickup(Location location) {
+        /**
+         * Adds a {@linkplain ActivityType#PICKUP} activity to the job with 0
+         * operation time, without cargo change, time windows and name.
+         *
+         * @param location
+         *            The location of the activity.
+         * @return The builder instance.
+         */
+        @SuppressWarnings("unchecked")
+        public B addPickup(Location location) {
             add(ActivityType.PICKUP, location, 0d, null, null, null);
-            return this;
+            return (B) this;
         }
 
-        public CustomJob.BuilderBase<T, B> addPickup(Location location, SizeDimension size) {
+        /**
+         * Adds a {@linkplain ActivityType#PICKUP} activity to the job with 0
+         * operation time, without time windows and name.
+         *
+         * @param location
+         *            The location of the activity.
+         * @param size
+         *            The cargo change of the pickup. Should be positive.
+         * @return The builder instance.
+         */
+        @SuppressWarnings("unchecked")
+        public B addPickup(Location location, SizeDimension size) {
             add(ActivityType.PICKUP, location, 0d, size, null, null);
-            return this;
+            return (B) this;
         }
 
-        public CustomJob.BuilderBase<T, B> addPickup(Location location, SizeDimension size, double operationTime) {
+        /**
+         * Adds a {@linkplain ActivityType#PICKUP} activity to the job without
+         * time windows and name.
+         *
+         * @param location
+         *            The location of the activity.
+         * @param size
+         *            The cargo change of the pickup. Should be positive.
+         * @param operationTime
+         *            The operation time of the activity.
+         * @return The builder instance.
+         */
+        @SuppressWarnings("unchecked")
+        public B addPickup(Location location, SizeDimension size, double operationTime) {
             add(ActivityType.PICKUP, location, operationTime, size, null, null);
-            return this;
+            return (B) this;
         }
 
-        public CustomJob.BuilderBase<T, B> addPickup(Location location, SizeDimension size, double operationTime,
-                        TimeWindow tw) {
-            add(ActivityType.PICKUP, location, operationTime, size, null, Collections.singleton(tw));
-            return this;
+        /**
+         * Adds a {@linkplain ActivityType#PICKUP} activity to the job without
+         * name and with a single time window.
+         *
+         * @param location
+         *            The location of the activity.
+         * @param size
+         *            The cargo change of the pickup. Should be positive.
+         * @param operationTime
+         *            The operation time of the activity.
+         * @param timeWindow
+         *            The time window of the activity.
+         * @return The builder instance.
+         */
+        @SuppressWarnings("unchecked")
+        public B addPickup(Location location, SizeDimension size, double operationTime,
+                TimeWindow timeWindow) {
+            add(ActivityType.PICKUP, location, operationTime, size, null, Collections.singleton(timeWindow));
+            return (B) this;
         }
 
         // Delivery
 
-        public CustomJob.BuilderBase<T, B> addDelivery(Location location) {
+        /**
+         * Adds a {@linkplain ActivityType#DELIVERY} activity to the job with 0
+         * operation time, without cargo change, time windows and name.
+         *
+         * @param location
+         *            The location of the activity.
+         * @return The builder instance.
+         */
+        @SuppressWarnings("unchecked")
+        public B addDelivery(Location location) {
             add(ActivityType.DELIVERY, location, 0d, null, null, null);
-            return this;
+            return (B) this;
         }
 
-        public CustomJob.BuilderBase<T, B> addDelivery(Location location, SizeDimension size) {
+        /**
+         * Adds a {@linkplain ActivityType#DELIVERY} activity to the job with 0
+         * operation time, without time windows and name.
+         *
+         * @param location
+         *            The location of the activity.
+         * @param size
+         *            The cargo change of the delivery. Should be negative.
+         * @return The builder instance.
+         */
+        @SuppressWarnings("unchecked")
+        public B addDelivery(Location location, SizeDimension size) {
             add(ActivityType.DELIVERY, location, 0d, size, null, null);
-            return this;
+            return (B) this;
         }
 
-        public CustomJob.BuilderBase<T, B> addDelivery(Location location, SizeDimension size, double operationTime) {
+        /**
+         * Adds a {@linkplain ActivityType#DELIVERY} activity to the job without
+         * time windows and name.
+         *
+         * @param location
+         *            The location of the activity.
+         * @param size
+         *            The cargo change of the delivery. Should be negative.
+         * @param operationTime
+         *            The operation time of the activity.
+         * @return The builder instance.
+         */
+        @SuppressWarnings("unchecked")
+        public B addDelivery(Location location, SizeDimension size, double operationTime) {
             add(ActivityType.DELIVERY, location, operationTime, size, null, null);
-            return this;
+            return (B) this;
         }
 
-        public CustomJob.BuilderBase<T, B> addDelivery(Location location, SizeDimension size, double operationTime,
-                        TimeWindow tw) {
+        /**
+         * Adds a {@linkplain ActivityType#DELIVERY} activity to the job without
+         * name and with a single time window.
+         *
+         * @param location
+         *            The location of the activity.
+         * @param size
+         *            The cargo change of the delivery. Should be negative.
+         * @param operationTime
+         *            The operation time of the activity.
+         * @param timeWindow
+         *            The time window of the activity.
+         * @return The builder instance.
+         */
+        @SuppressWarnings("unchecked")
+        public B addDelivery(Location location, SizeDimension size, double operationTime,
+                TimeWindow tw) {
             add(ActivityType.DELIVERY, location, operationTime, size, null, Collections.singleton(tw));
-            return this;
+            return (B) this;
         }
 
         // Exchange
 
-        public CustomJob.BuilderBase<T, B> addExchange(Location location) {
+        /**
+         * Adds a {@linkplain ActivityType#EXCHANGE} activity to the job with 0
+         * operation time, without cargo change, time windows and name.
+         *
+         * @param location
+         *            The location of the activity.
+         * @return The builder instance.
+         */
+        @SuppressWarnings("unchecked")
+        public B addExchange(Location location) {
             add(ActivityType.EXCHANGE, location, 0d, null, null, null);
-            return this;
+            return (B) this;
         }
 
-        public CustomJob.BuilderBase<T, B> addExchange(Location location, SizeDimension size) {
+        /**
+         * Adds a {@linkplain ActivityType#EXCHANGE} activity to the job with 0
+         * operation time, without time windows and name.
+         *
+         * @param location
+         *            The location of the activity.
+         * @param size
+         *            The cargo change of the exchange. May be negative,
+         *            positive or mixed.
+         * @return The builder instance.
+         */
+        @SuppressWarnings("unchecked")
+        public B addExchange(Location location, SizeDimension size) {
             add(ActivityType.EXCHANGE, location, 0d, size, null, null);
-            return this;
+            return (B) this;
         }
 
-        public CustomJob.BuilderBase<T, B> addExchange(Location location, SizeDimension size, double operationTime) {
+        /**
+         * Adds a {@linkplain ActivityType#EXCHANGE} activity to the job without
+         * time windows and name.
+         *
+         * @param location
+         *            The location of the activity.
+         * @param size
+         *            The cargo change of the exchange. May be negative,
+         *            positive or mixed.
+         * @param operationTime
+         *            The operation time of the activity.
+         * @return The builder instance.
+         */
+        @SuppressWarnings("unchecked")
+        public B addExchange(Location location, SizeDimension size, double operationTime) {
             add(ActivityType.EXCHANGE, location, operationTime, size, null, null);
-            return this;
+            return (B) this;
         }
 
-        public CustomJob.BuilderBase<T, B> addExchange(Location location, SizeDimension size, double operationTime,
-                        TimeWindow tw) {
+        /**
+         * Adds a {@linkplain ActivityType#EXCHANGE} activity to the job without
+         * name and with a single time window.
+         *
+         * @param location
+         *            The location of the activity.
+         * @param size
+         *            The cargo change of the exchange. May be negative,
+         *            positive or mixed.
+         * @param operationTime
+         *            The operation time of the activity.
+         * @param timeWindow
+         *            The time window of the activity.
+         * @return The builder instance.
+         */
+        @SuppressWarnings("unchecked")
+        public B addExchange(Location location, SizeDimension size, double operationTime,
+                TimeWindow tw) {
             add(ActivityType.EXCHANGE, location, operationTime, size, null, Collections.singleton(tw));
-            return this;
+            return (B) this;
         }
 
         @Override
         protected void validate() {
-            if (acts.isEmpty()) {
+            if (acts.isEmpty())
                 throw new IllegalStateException("There is no activities defined on this job.");
-            }
         }
 
-        public List<BuilderActivityInfo> getActs() {
+        public List<BuilderActivityInfo> getActivities() {
             return Collections.unmodifiableList(acts);
         }
 
     }
 
+    /**
+     * This is the builder of the {@linkplain CustomJob}.
+     *
+     * <p>
+     * A CustomJob is a job with any number of activities of any type. These
+     * activities will be executed by the same vehicle and on the same route.
+     * They will keep they order and either all of them or none of them will be
+     * included into the solution.
+     * </p>
+     * <p>
+     * The main difference between the jobs and activities known from version 1
+     * and 2 is the bias shift from job to activity. Before version 2 the jobs
+     * has holden most of the business information and activities were
+     * second-class entities, meanwhile the algorithm worked on activities. This
+     * has driven to a state where the code had no indication which job field
+     * belonged to which activities.
+     * </p>
+     * <p>
+     * In the new concept a stronger encapsulation ensures the right behavior.
+     * This led to most of the business data to move from job to activity. These
+     * are:
+     * <ul>
+     * <li>Load change (how the cargo size change (increase or decrease) on the
+     * vehicle)</li>
+     * <li>Location (where the activity should be executed)</li>
+     * <li>Time windows (when the activity should be performed)</li>
+     * <li>Operation time (how much time it takes to fulfill the activity)</li>
+     * </ul>
+     * These parameters are now defined per activity.
+     * </p>
+     * <p>
+     * Some information has left in the scope of the job, because they affects
+     * the whole job:
+     * <ul>
+     * <li>Required skills</li>
+     * <li>Priority</li>
+     * </ul>
+     * </p>
+     * <p>
+     * The builder contains methods for simply configuring basic activities.
+     * They are the counterparts of the version 1 job builders. If more control
+     * is needed on the activity creation, an {@linkplain BuilderActivityInfo}
+     * record has to be created and passed to the builder. (<i>This indirection
+     * is required to keep immutable behavior of a job and its activities after
+     * creation.</i>)
+     * </p>
+     *
+     * @author Balage
+     *
+     */
     public static final class Builder extends CustomJob.BuilderBase<CustomJob, CustomJob.Builder> {
-
-        public static CustomJob.Builder newInstance(String id) {
-            return new CustomJob.Builder(id);
-        }
-
+        /**
+         * Constructor.
+         *
+         * @param id
+         *            The id of the job. Should be unique within a problem.
+         */
         public Builder(String id) {
             super(id);
         }
@@ -334,7 +737,7 @@ public SizeDimension getSize() {
     protected void createActivities(JobBuilder<? extends AbstractJob, ?> jobBuilder) {
         CustomJob.Builder builder = (CustomJob.Builder) jobBuilder;
         JobActivityList list = new SequentialJobActivityList(this);
-        for (CustomJob.Builder.BuilderActivityInfo info : builder.getActs()) {
+        for (CustomJob.Builder.BuilderActivityInfo info : builder.getActivities()) {
             JobActivity act = info.getType().create(this, info);
             list.addActivity(act);
         }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Delivery.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Delivery.java
index 923a55398..53dd66297 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Delivery.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Delivery.java
@@ -17,57 +17,52 @@
  */
 package com.graphhopper.jsprit.core.problem.job;
 
-import com.graphhopper.jsprit.core.problem.SizeDimension;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivity;
 
 /**
  * Delivery extends Service and is intended to model a Service where smth is UNLOADED (i.e. delivered) from a transport unit.
  *
  * @author schroeder
  */
-public class Delivery extends AbstractSingleActivityJob<DeliveryActivity> {
+public class Delivery extends Service {
 
-    public static final class Builder
-    extends AbstractSingleActivityJob.BuilderBase<Delivery, Builder> {
-
-        public Builder(String id) {
-            super(id);
-            setType("delivery");
-        }
+    public static class Builder extends Service.Builder<Delivery> {
 
+        /**
+         * Returns a new instance of builder that builds a delivery.
+         *
+         * @param id the id of the delivery
+         * @return the builder
+         */
         public static Builder newInstance(String id) {
             return new Builder(id);
         }
 
+        Builder(String id) {
+            super(id);
+        }
+
+        /**
+         * Builds Delivery.
+         *
+         * @return delivery
+         * @throws IllegalArgumentException if neither locationId nor coord is set
+         */
         @Override
-        protected Delivery createInstance() {
+        @SuppressWarnings("deprecation")
+        public Delivery build() {
+            if (location == null) throw new IllegalArgumentException("location is missing");
+            this.setType("delivery");
+            super.capacity = super.capacityBuilder.build();
+            super.skills = super.skillBuilder.build();
             return new Delivery(this);
         }
-    }
 
-    Delivery(BuilderBase<? extends Delivery, ?> builder) {
-        super(builder);
-    }
-
-
-    @Override
-    protected DeliveryActivity createActivity(
-                    BuilderBase<? extends AbstractSingleActivityJob<?>, ?> builder) {
-            return new DeliveryActivity(this, builder.type, builder.location,
-                            builder.serviceTime,
-                            builder.getCapacity().invert(), builder.timeWindows.getTimeWindows());
     }
 
-    @Override
-    @Deprecated
-    public SizeDimension getSize() {
-        return super.getSize().abs();
-    }
+    @SuppressWarnings("deprecation")
+    Delivery(Builder builder) {
+        super(builder);
 
-    @SuppressWarnings("unchecked")
-    @Override
-    public Builder getBuilder(String id) {
-        return Builder.newInstance(id);
     }
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/DeliveryJob.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/DeliveryJob.java
new file mode 100644
index 000000000..8484e11ea
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/DeliveryJob.java
@@ -0,0 +1,98 @@
+/*
+ * Licensed to GraphHopper GmbH under one or more contributor
+ * license agreements. See the NOTICE file distributed with this work for
+ * additional information regarding copyright ownership.
+ *
+ * GraphHopper GmbH licenses this file to you under the Apache License,
+ * Version 2.0 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.graphhopper.jsprit.core.problem.job;
+
+import com.graphhopper.jsprit.core.problem.SizeDimension;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
+
+
+/**
+ * Delivery job implementation.
+ * <p>
+ * Delivery is intend to represent a kind of job where something is unloaded.
+ * </p>
+ *
+ * <h3>Warning!</h3>
+ * <p>
+ * This class and are here for convenience. Most of the time using the
+ * {@linkplain CustomJob} is a better choice. Note that this class may most
+ * likely be deprecated and be removed in the future.
+ * </p>
+ *
+ * @author schroeder
+ * @author Balage
+ *
+ * @see {@linkplain CustomJob.BuilderBase#addDelivery(Location)}
+ * @see {@linkplain CustomJob.BuilderBase#addDelivery(Location, SizeDimension)}
+ * @see {@linkplain CustomJob.BuilderBase#addDelivery(Location, SizeDimension, double)}
+ * @see {@linkplain CustomJob.BuilderBase#addDelivery(Location, SizeDimension, double, TimeWindow)}
+ */
+public class DeliveryJob extends AbstractSingleActivityJob<DeliveryActivity> {
+
+    /**
+     * Builder for {@linkplain PickupJob}.
+     *
+     * @author Balage
+     */
+    public static final class Builder
+    extends AbstractSingleActivityJob.BuilderBase<DeliveryJob, Builder> {
+
+        /**
+         * Constructor.
+         *
+         * @param id
+         *            The unique id.
+         */
+        public Builder(String id) {
+            super(id);
+            setType("delivery");
+        }
+
+        @Override
+        protected DeliveryJob createInstance() {
+            return new DeliveryJob(this);
+        }
+    }
+
+    private DeliveryJob(BuilderBase<? extends DeliveryJob, ?> builder) {
+        super(builder);
+    }
+
+
+    @Override
+    protected DeliveryActivity createActivity(
+            BuilderBase<? extends AbstractSingleActivityJob<?>, ?> builder) {
+        return new DeliveryActivity(this, builder.type, builder.location,
+                builder.serviceTime,
+                builder.getCapacity().invert(), builder.timeWindows.getTimeWindows());
+    }
+
+    @Override
+    @Deprecated
+    public SizeDimension getSize() {
+        return super.getSize().abs();
+    }
+
+    @SuppressWarnings("unchecked")
+    @Override
+    public Builder getBuilder(String id) {
+        return new Builder(id);
+    }
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Job.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Job.java
index ed7a6c84c..5312c4517 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Job.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Job.java
@@ -18,8 +18,8 @@
 package com.graphhopper.jsprit.core.problem.job;
 
 
+import java.util.Collection;
 import java.util.List;
-import java.util.Set;
 
 import com.graphhopper.jsprit.core.problem.HasId;
 import com.graphhopper.jsprit.core.problem.HasIndex;
@@ -52,6 +52,9 @@
     @Deprecated
     public SizeDimension getSize();
 
+    /**
+     * @return Returns the required skill set.
+     */
     public Skills getRequiredSkills();
 
     /**
@@ -86,6 +89,6 @@
     /**
      * @return All operation time windows
      */
-    public Set<TimeWindow> getTimeWindows();
+    public Collection<TimeWindow> getTimeWindows();
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Pickup.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Pickup.java
index 7f94d4407..bd470b807 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Pickup.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Pickup.java
@@ -17,48 +17,53 @@
  */
 package com.graphhopper.jsprit.core.problem.job;
 
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivity;
 
 /**
  * Pickup extends Service and is intended to model a Service where smth is LOADED (i.e. picked up) to a transport unit.
  *
  * @author schroeder
  */
-public class Pickup extends AbstractSingleActivityJob<PickupActivity> {
+public class Pickup extends Service {
 
-    public static final class Builder
-    extends AbstractSingleActivityJob.BuilderBase<Pickup, Builder> {
-
-        public Builder(String id) {
-            super(id);
-            setType("pickup");
-        }
+    public static class Builder extends Service.Builder<Pickup> {
 
+        /**
+         * Returns a new instance of builder that builds a pickup.
+         *
+         * @param id the id of the pickup
+         * @return the builder
+         */
         public static Builder newInstance(String id) {
             return new Builder(id);
         }
 
+        Builder(String id) {
+            super(id);
+        }
+
+        /**
+         * Builds Pickup.
+         * <p>
+         * <p>Pickup type is "pickup"
+         *
+         * @return pickup
+         * @throws IllegalArgumentException if neither locationId nor coordinate has been set
+         */
         @Override
-        protected Pickup createInstance() {
+        @SuppressWarnings("deprecation")
+        public Pickup build() {
+            if (location == null) throw new IllegalArgumentException("location is missing");
+            this.setType("pickup");
+            super.capacity = super.capacityBuilder.build();
+            super.skills = super.skillBuilder.build();
             return new Pickup(this);
         }
+
     }
 
+    @SuppressWarnings("deprecation")
     Pickup(Builder builder) {
         super(builder);
     }
 
-    @Override
-    protected PickupActivity createActivity(
-                    AbstractSingleActivityJob.BuilderBase<? extends AbstractSingleActivityJob<?>, ?> builder) {
-            return new PickupActivity(this, builder.type, builder.location, builder.serviceTime,
-                            builder.getCapacity(), builder.timeWindows.getTimeWindows());
-    }
-
-    @SuppressWarnings("unchecked")
-    @Override
-    public Builder getBuilder(String id) {
-        return Builder.newInstance(id);
-    }
-
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/PickupJob.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/PickupJob.java
new file mode 100644
index 000000000..bc827424f
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/PickupJob.java
@@ -0,0 +1,89 @@
+/*
+ * Licensed to GraphHopper GmbH under one or more contributor
+ * license agreements. See the NOTICE file distributed with this work for
+ * additional information regarding copyright ownership.
+ *
+ * GraphHopper GmbH licenses this file to you under the Apache License,
+ * Version 2.0 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.graphhopper.jsprit.core.problem.job;
+
+import com.graphhopper.jsprit.core.problem.SizeDimension;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
+
+/**
+ * Pickup job implementation.
+ * <p>
+ * Pickup is intend to represent a kind of job where something is loaded.
+ * </p>
+ *
+ * <h3>Warning!</h3>
+ * <p>
+ * This class and are here for convenience. Most of the time using the
+ * {@linkplain CustomJob} is a better choice. Note that this class may most
+ * likely be deprecated and be removed in the future.
+ * </p>
+ *
+ * @author schroeder
+ * @author Balage
+ *
+ * @see {@linkplain CustomJob.BuilderBase#addPickup(Location)}
+ * @see {@linkplain CustomJob.BuilderBase#addPickup(Location, SizeDimension)}
+ * @see {@linkplain CustomJob.BuilderBase#addPickup(Location, SizeDimension, double)}
+ * @see {@linkplain CustomJob.BuilderBase#addPickup(Location, SizeDimension, double, TimeWindow)}
+ */
+public class PickupJob extends AbstractSingleActivityJob<PickupActivity> {
+
+    /**
+     * Builder for {@linkplain PickupJob}.
+     *
+     * @author Balage
+     */
+    public static final class Builder
+    extends AbstractSingleActivityJob.BuilderBase<PickupJob, Builder> {
+
+        /**
+         * Constructor.
+         *
+         * @param id
+         *            The unique id.
+         */
+        public Builder(String id) {
+            super(id);
+            setType("pickup");
+        }
+
+        @Override
+        protected PickupJob createInstance() {
+            return new PickupJob(this);
+        }
+    }
+
+    private PickupJob(Builder builder) {
+        super(builder);
+    }
+
+    @Override
+    protected PickupActivity createActivity(
+            AbstractSingleActivityJob.BuilderBase<? extends AbstractSingleActivityJob<?>, ?> builder) {
+        return new PickupActivity(this, builder.type, builder.location, builder.serviceTime,
+                builder.getCapacity(), builder.timeWindows.getTimeWindows());
+    }
+
+    @SuppressWarnings("unchecked")
+    @Override
+    public Builder getBuilder(String id) {
+        return new Builder(id);
+    }
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/ReturnedShipment.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/ReturnedShipment.java
deleted file mode 100644
index 6dd23cdd4..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/ReturnedShipment.java
+++ /dev/null
@@ -1,243 +0,0 @@
-/*
- * Licensed to GraphHopper GmbH under one or more contributor
- * license agreements. See the NOTICE file distributed with this work for
- * additional information regarding copyright ownership.
- *
- * GraphHopper GmbH licenses this file to you under the Apache License,
- * Version 2.0 (the "License"); you may not use this file except in
- * compliance with the License. You may obtain a copy of the License at
- *
- *       http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.graphhopper.jsprit.core.problem.job;
-
-import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.SizeDimension;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivity;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.ExchangeActivity;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivity;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindowsImpl;
-
-
-/**
- * Shipment is an implementation of Job and consists of a backhaul and exchange
- * and an delivery
- *
- * @author balage
- */
-public final class ReturnedShipment extends Shipment {
-
-    public static final String BACKHAUL_ACTIVITY_NAME = "backhaul";
-
-    /**
-     * Builder that builds the shipment.
-     *
-     * @author schroeder
-     */
-
-    public static final class Builder extends Shipment.BuilderBase<ReturnedShipment, Builder> {
-
-        private double backhaulServiceTime = 0.0;
-
-        private Location backhaulLocation;
-
-        protected TimeWindowsImpl backhaulTimeWindows = new TimeWindowsImpl();
-
-        protected SizeDimension.Builder backhaulCapacityBuilder = SizeDimension.Builder.newInstance();
-
-        /**
-         * Returns new instance of this builder.
-         *
-         * @param id the id of the shipment which must be a unique identifier
-         *           among all jobs
-         * @return the builder
-         */
-
-        public Builder(String id) {
-            super(id);
-            backhaulTimeWindows = new TimeWindowsImpl();
-        }
-
-        /**
-         * Sets backhaul location.
-         *
-         * @param backhaulLocation backhaul location
-         * @return builder
-         */
-
-        public Builder setBackhaulLocation(Location backhaulLocation) {
-            this.backhaulLocation = backhaulLocation;
-            return this;
-        }
-
-        /**
-         * Sets backhaulServiceTime.
-         * <p>
-         * <p>
-         * ServiceTime is intended to be the time the implied activity takes at
-         * the backhaul-location.
-         *
-         * @param serviceTime the service time / duration the backhaul of the associated
-         *                    shipment takes
-         * @return builder
-         * @throws IllegalArgumentException if servicTime < 0.0
-         */
-
-        public Builder setBackhaulServiceTime(double serviceTime) {
-            if (serviceTime < 0.0) {
-                throw new IllegalArgumentException("serviceTime must not be < 0.0");
-            }
-            backhaulServiceTime = serviceTime;
-            return this;
-        }
-
-        /**
-         * Sets the timeWindow for the backhaul, i.e. the time-period in which a
-         * backhaul operation is allowed to START.
-         * <p>
-         * <p>
-         * By default timeWindow is [0.0, Double.MAX_VALUE}
-         *
-         * @param timeWindow the time window within the backhaul operation/activity can
-         *                   START
-         * @return builder
-         * @throws IllegalArgumentException if timeWindow is null
-         */
-
-        public Builder setBackhaulTimeWindow(TimeWindow timeWindow) {
-            if (timeWindow == null) {
-                throw new IllegalArgumentException("backhaul time-window must not be null");
-            }
-            backhaulTimeWindows.clear();
-            backhaulTimeWindows.add(timeWindow);
-            return this;
-        }
-
-
-        public Builder addBackhaulTimeWindow(TimeWindow timeWindow) {
-            if (timeWindow == null) {
-                throw new IllegalArgumentException("time-window arg must not be null");
-            }
-            backhaulTimeWindows.add(timeWindow);
-            return this;
-        }
-
-
-        public Builder addBackhaulTimeWindow(double earliest, double latest) {
-            addBackhaulTimeWindow(TimeWindow.newInstance(earliest, latest));
-            return this;
-        }
-
-        public Builder addBackhaulSizeDimension(int dimensionIndex, int dimensionValue) {
-            if (dimensionValue < 0) {
-                throw new IllegalArgumentException("capacity value cannot be negative");
-            }
-            backhaulCapacityBuilder.addDimension(dimensionIndex, dimensionValue);
-            return this;
-        }
-
-        public Builder addAllBackhaulSizeDimensions(SizeDimension size) {
-            for (int i = 0; i < size.getNuOfDimensions(); i++) {
-                backhaulCapacityBuilder.addDimension(i, size.get(i));
-            }
-            return this;
-        }
-
-        @Override
-        protected void validate() {
-            super.validate();
-            if (backhaulLocation == null) {
-                backhaulLocation = getPickupLocation();
-            }
-            if (backhaulTimeWindows.isEmpty()) {
-                backhaulTimeWindows.add(TimeWindow.ETERNITY);
-            }
-        }
-
-        private double getBackhaulServiceTime() {
-            return backhaulServiceTime;
-        }
-
-        private Location getBackhaulLocation() {
-            return backhaulLocation;
-        }
-
-        private TimeWindowsImpl getBackhaulTimeWindows() {
-            return backhaulTimeWindows;
-        }
-
-        private SizeDimension getBackhaulCapacity() {
-            SizeDimension backhaulCapacity = backhaulCapacityBuilder.build();
-            // If no capacity is specified, the backhaul capacity will be the
-            // same as the picking one.
-            if (backhaulCapacity.getNuOfDimensions() == 0) {
-                backhaulCapacity = getCapacity();
-            }
-            return backhaulCapacity;
-        }
-
-        public static Builder newInstance(String id) {
-            return new Builder(id);
-        }
-
-        @Override
-        protected ReturnedShipment createInstance() {
-            return new ReturnedShipment(this);
-        }
-    }
-
-
-    ReturnedShipment(BuilderBase<? extends ReturnedShipment, ?> builder) {
-        super(builder);
-    }
-
-
-    @Override
-    protected void createActivities(JobBuilder<?, ?> builder) {
-        Builder shipmentBuilder = (Builder) builder;
-        JobActivityList list = new SequentialJobActivityList(this);
-        list.addActivity(new PickupActivity(this, PICKUP_ACTIVITY_NAME,
-                        shipmentBuilder.getPickupLocation(),
-                        shipmentBuilder.getPickupServiceTime(), shipmentBuilder.getCapacity(),
-                        shipmentBuilder.getPickupTimeWindows().getTimeWindows()));
-        list.addActivity(new ExchangeActivity(this, DELIVERY_ACTIVITY_NAME,
-                        shipmentBuilder.getDeliveryLocation(),
-                        shipmentBuilder.getDeliveryServiceTime(),
-                        shipmentBuilder.getBackhaulCapacity()
-                        .subtract(shipmentBuilder.getCapacity()),
-                        shipmentBuilder.getDeliveryTimeWindows().getTimeWindows()));
-        list.addActivity(new DeliveryActivity(this, BACKHAUL_ACTIVITY_NAME,
-                        shipmentBuilder.getBackhaulLocation(),
-                        shipmentBuilder.getBackhaulServiceTime(),
-                        shipmentBuilder.getBackhaulCapacity(),
-                        shipmentBuilder.getBackhaulTimeWindows().getTimeWindows()));
-        setActivities(list);
-    }
-
-    @Override
-    public PickupActivity getPickupActivity() {
-        return (PickupActivity) getActivityList()
-                        .findByType(PICKUP_ACTIVITY_NAME)
-                        .get();
-    }
-
-    public ExchangeActivity getExchangeActivity() {
-        return (ExchangeActivity) getActivityList()
-                        .findByType(DELIVERY_ACTIVITY_NAME)
-                        .get();
-    }
-
-    public DeliveryActivity getBackhaulActivity() {
-        return (DeliveryActivity) getActivityList()
-                        .findByType(BACKHAUL_ACTIVITY_NAME)
-                        .get();
-    }
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java
index 08f1901b6..9c0368310 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java
@@ -17,56 +17,477 @@
  */
 package com.graphhopper.jsprit.core.problem.job;
 
+import java.util.Collection;
+import java.util.List;
+
+import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
+import com.graphhopper.jsprit.core.problem.Skills;
+import com.graphhopper.jsprit.core.problem.job.CustomJob.BuilderBase.ActivityType;
+import com.graphhopper.jsprit.core.problem.job.CustomJob.BuilderBase.BuilderActivityInfo;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.ServiceActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindowsImpl;
+import com.graphhopper.jsprit.core.util.Coordinate;
 
 /**
  * Service implementation of a job.
- * <p>
- * <p>
- * <p>Note that two services are equal if they have the same id.
+ *
+ * @deprecated Use {@linkplain CustomJob} instead
+ *
+ *
+ *             <p>
+ *             <h1><em>Warning!</em></h1>
+ *             </p>
+ *
+ *             <p>
+ *             <strong>This class is deprecated and only available for backward
+ *             compatibility and for easier migration.</strong>
+ *             </p>
+ *             <p>
+ *             This class wraps a new CustomJob instance and delegates its
+ *             values and the values from its sole activity. It is strongly
+ *             recommended to switch to the {@linkplain CustomJob} and use one
+ *             of the following functions of its builder to add the service
+ *             activity:
+ *
+ *             <ul>
+ *             <li>{@linkplain CustomJob.Builder#addService(Location)}</li>
+ *             <li>{@linkplain CustomJob.Builder#addService(Location, double)}
+ *             </li>
+ *             <li>
+ *             {@linkplain CustomJob.Builder#addService(Location, double, TimeWindow)}
+ *             </li>
+ *             </ul>
+ *
+ *             or if you need more control on the activity, use the
+ *             {@linkplain CustomJob.Builder#addActivity(BuilderActivityInfo)}
+ *             function:
+ *
+ *             <pre>
+ *    BuilderActivityInfo activityInfo = new BuilderActivityInfo(ActivityType.SERVICE, <i>location</i>);
+
+        activityInfo.withName(<i>activity name</i>);
+        activityInfo.withOperationTime(<i>serviceTime</i>);
+        activityInfo.withSize((SizeDimension) <i>capacity</i>);
+        activityInfo.withTimeWindows(<i>timeWindows</i>);
+        activityInfo.withTimeWindow(<i>timeWindow</i>);
+
+        CustomJob.Builder customJobBuilder = new CustomJob.Builder(<i>id</i>);
+        customJobBuilder
+            .addActivity(activityInfo)
+            .addAllRequiredSkills(<i>skills<i>)
+            .setName(<i>job name</i>)
+            .setPriority(<i>priority</i>);
+
+        job = customJobBuilder.build();
+ *             </pre>
+ *
+ *             </p>
  *
  * @author schroeder
+ * @author Balage
+ *
+ * @see {@linkplain CustomJob}
+ * @see {@linkplain CustomJob.Builder}
+ * @see {@linkplain CustomJob.BuilderBase.BuilderActivityInfo}
  */
-public class Service extends AbstractSingleActivityJob<ServiceActivity> {
+@Deprecated
+public class Service extends AbstractJob {
+
+    /**
+     * Builder that builds a service.
+     *
+     * @deprecated Use {@linkplain CustomJob.Builder} instead
+     *
+     * @author schroeder
+     */
+    @Deprecated
+    public static class Builder<T extends Service> {
+
+        /**
+         * Returns a new instance of builder that builds a service.
+         *
+         * @param id the id of the service
+         * @return the builder
+         */
+        public static Builder newInstance(String id) {
+            return new Builder(id);
+        }
+
+        private String id;
+
+        protected String locationId;
+
+        private String type = "service";
+
+        protected Coordinate coord;
+
+        protected double serviceTime;
+
+        protected TimeWindow timeWindow = TimeWindow.newInstance(0.0, Double.MAX_VALUE);
+
+        protected Capacity.Builder capacityBuilder = Capacity.Builder.newInstance();
+
+        protected Capacity capacity;
+
+        protected Skills.Builder skillBuilder = Skills.Builder.newInstance();
+
+        protected Skills skills;
+
+        private String name = "no-name";
+
+        protected Location location;
+
+        protected TimeWindowsImpl timeWindows;
 
+        private boolean twAdded = false;
 
-    public static final class Builder
-    extends AbstractSingleActivityJob.BuilderBase<Service, Builder> {
+        private int priority = 2;
 
-        public Builder(String id) {
-            super(id);
-            setType("pickup");
+        protected Object userData;
+
+        Builder(String id){
+            this.id = id;
+            timeWindows = new TimeWindowsImpl();
+            timeWindows.add(timeWindow);
         }
 
-        public static Builder newInstance(String id) {
-            return new Builder(id);
+        /**
+         * Protected method to set the type-name of the service.
+         * <p>
+         * <p>Currently there are {@link Service}, {@link Pickup} and {@link Delivery}.
+         *
+         * @param name the name of service
+         * @return the builder
+         */
+        protected Builder<T> setType(String name) {
+            this.type = name;
+            return this;
+        }
+
+        /**
+         * Sets location
+         *
+         * @param location location
+         * @return builder
+         */
+        public Builder<T> setLocation(Location location) {
+            this.location = location;
+            return this;
+        }
+
+        /**
+         * Sets the serviceTime of this service.
+         * <p>
+         * <p>It is understood as time that a service or its implied activity takes at the service-location, for instance
+         * to unload goods.
+         *
+         * @param serviceTime the service time / duration of service to be set
+         * @return builder
+         * @throws IllegalArgumentException if serviceTime < 0
+         */
+        public Builder<T> setServiceTime(double serviceTime) {
+            if (serviceTime < 0)
+                throw new IllegalArgumentException("serviceTime must be greater than or equal to zero");
+            this.serviceTime = serviceTime;
+            return this;
+        }
+
+        /**
+         * Sets user specific domain data associated with the object.
+         *
+         * <p>
+         * The user data is a black box for the framework, it only stores it,
+         * but never interacts with it in any way.
+         * </p>
+         *
+         * @param userData
+         *            any object holding the domain specific user data
+         *            associated with the object.
+         * @return builder
+         */
+        public Builder<T> setUserData(Object userData) {
+            this.userData = userData;
+            return this;
+        }
+
+        /**
+         * Adds capacity dimension.
+         *
+         * @param dimensionIndex the dimension index of the capacity value
+         * @param dimensionValue the capacity value
+         * @return the builder
+         * @throws IllegalArgumentException if dimensionValue < 0
+         */
+        public Builder<T> addSizeDimension(int dimensionIndex, int dimensionValue) {
+            if (dimensionValue < 0) throw new IllegalArgumentException("capacity value cannot be negative");
+            capacityBuilder.addDimension(dimensionIndex, dimensionValue);
+            return this;
+        }
+
+        public Builder<T> setTimeWindow(TimeWindow tw){
+            if(tw == null) throw new IllegalArgumentException("time-window arg must not be null");
+            this.timeWindow = tw;
+            this.timeWindows = new TimeWindowsImpl();
+            timeWindows.add(tw);
+            return this;
+        }
+
+        public Builder<T> addTimeWindow(TimeWindow timeWindow) {
+            if(timeWindow == null) throw new IllegalArgumentException("time-window arg must not be null");
+            if(!twAdded){
+                timeWindows = new TimeWindowsImpl();
+                twAdded = true;
+            }
+            timeWindows.add(timeWindow);
+            return this;
         }
 
-        @Override
-        protected Service createInstance() {
-            return new Service(this);
+        public Builder<T> addTimeWindow(double earliest, double latest) {
+            return addTimeWindow(TimeWindow.newInstance(earliest, latest));
+        }
+
+        /**
+         * Builds the service.
+         *
+         * @return {@link Service}
+         * @throws IllegalArgumentException if neither locationId nor coordinate is set.
+         */
+        public T build() {
+            if (location == null) throw new IllegalArgumentException("location is missing");
+            this.setType("service");
+            capacity = capacityBuilder.build();
+            skills = skillBuilder.build();
+            return (T) new Service(this);
+        }
+
+        public Builder<T> addRequiredSkill(String skill) {
+            skillBuilder.addSkill(skill);
+            return this;
+        }
+
+        public Builder<T> setName(String name) {
+            this.name = name;
+            return this;
+        }
+
+        public Builder<T> addAllRequiredSkills(Skills skills){
+            for(String s : skills.values()){
+                skillBuilder.addSkill(s);
+            }
+            return this;
+        }
+
+        public Builder<T> addAllSizeDimensions(Capacity size){
+            for(int i=0;i<size.getNuOfDimensions();i++){
+                capacityBuilder.addDimension(i,size.get(i));
+            }
+            return this;
+        }
+
+        /**
+         * Set priority to service. Only 1 (very high) to 10 (very low) are allowed.
+         * <p>
+         * Default is 2.
+         *
+         * @param priority
+         * @return builder
+         */
+        public Builder<T> setPriority(int priority) {
+            if (priority < 1 || priority > 10)
+                throw new IllegalArgumentException("incorrect priority. only priority values from 1 to 10 are allowed where 1 = high and 10 is low");
+            this.priority = priority;
+            return this;
         }
     }
 
-    Service(Builder builder) {
-        super(builder);
+
+    private CustomJob theRealJob;
+    private ServiceActivity theRealActivity;
+
+    Service(Builder<?> builder) {
+        BuilderActivityInfo activityInfo = new BuilderActivityInfo(ActivityType.SERVICE,
+                builder.location);
+
+        activityInfo.withName(builder.name);
+        activityInfo.withOperationTime(builder.serviceTime);
+        // Safe cast because SizeDimension is the only implementation of
+        // Capacity
+        activityInfo.withSize((SizeDimension) builder.capacity);
+        activityInfo.withTimeWindows(builder.timeWindows.getTimeWindows());
+
+        CustomJob.Builder customJobBuilder = new CustomJob.Builder(builder.id);
+        customJobBuilder.addActivity(activityInfo).addAllRequiredSkills(builder.skills)
+        .setName(builder.name)
+        .addUserData(builder.userData)
+        .setPriority(builder.priority);
+        theRealJob = customJobBuilder.build();
+        theRealActivity = (ServiceActivity) theRealJob.getActivityList().getAll().get(0);
+    }
+
+    @Override
+    public Collection<TimeWindow> getTimeWindows() {
+        return theRealJob.getTimeWindows();
+    }
+
+    @Override
+    public String getId() {
+        return theRealJob.getId();
+    }
+
+    /**
+     * Returns location.
+     *
+     * @return location
+     */
+    public Location getLocation() {
+        return theRealActivity.getLocation();
+    }
+
+
+    /**
+     * Returns the service-time/duration a service takes at service-location.
+     *
+     * @return service duration
+     */
+    public double getServiceDuration() {
+        return theRealActivity.getOperationTime();
+    }
+
+    /**
+     * Returns the time-window a service(-operation) is allowed to start.
+     * It is recommended to use getTimeWindows() instead. If you still use this, it returns the first time window of getTimeWindows() collection.
+     *
+     * @return time window
+     *
+     */
+    public TimeWindow getTimeWindow() {
+        return theRealActivity.getSingleTimeWindow();
+    }
+
+    /**
+     * @return the name
+     */
+    public String getType() {
+        return "service";
+    }
+
+    /**
+     * Returns a string with the service's attributes.
+     * <p>
+     * <p>String is built as follows: [attr1=val1][attr2=val2]...
+     */
+    @Override
+    public String toString() {
+        return "[id=" + getId() + "][name=" + getName() + "][type=" + getType() + "][location="
+                + getLocation() + "][capacity=" + getSize() + "][serviceTime="
+                + getServiceDuration() + "][timeWindow=" + getTimeWindow() + "]";
+    }
+
+
+    @Override
+    public int hashCode() {
+        final int prime = 31;
+        int result = 1;
+        result = prime * result + ((getId() == null) ? 0 : getId().hashCode());
+        return result;
+    }
+
+    /**
+     * Two services are equal if they have the same id.
+     */
+    @Override
+    public boolean equals(Object obj) {
+        if (this == obj)
+            return true;
+        if (obj == null)
+            return false;
+        if (getClass() != obj.getClass())
+            return false;
+        Service other = (Service) obj;
+        if (getId() == null) {
+            if (other.getId() != null)
+                return false;
+        } else if (!getId().equals(other.getId()))
+            return false;
+        return true;
+    }
+
+    @Override
+    public SizeDimension getSize() {
+        return theRealActivity.getLoadSize();
+    }
+
+    @Override
+    public Skills getRequiredSkills() {
+        return theRealJob.getRequiredSkills();
+    }
+
+    @Override
+    public String getName() {
+        return theRealJob.getName();
+    }
+
+    /**
+     * Get priority of service. Only 1 = high priority, 2 = medium and 3 = low are allowed.
+     * <p>
+     * Default is 2 = medium.
+     *
+     * @return priority
+     */
+    @Override
+    public int getPriority() {
+        return theRealJob.getPriority();
+    }
+
+    @Override
+    public Object getUserData() {
+        return theRealJob.getUserData();
+    }
+
+    @Override
+    protected void createActivities(JobBuilder<? extends AbstractJob, ?> jobBuilder) {
+        // This is unused being a legacy implementation
+    }
+
+    @Override
+    public int getIndex() {
+        return theRealJob.getIndex();
+    }
+
+    @Override
+    public void impl_setIndex(int index) {
+        theRealJob.impl_setIndex(index);
+    }
+
+    @Override
+    public List<Location> getAllLocations() {
+        return theRealJob.getAllLocations();
     }
 
     @Override
-    protected ServiceActivity createActivity(
-                    AbstractSingleActivityJob.BuilderBase<? extends AbstractSingleActivityJob<?>, ?> builder) {
-        return new ServiceActivity(this, builder.type,
-                        builder.location, builder.serviceTime, builder.getCapacity(),
-                        builder.timeWindows.getTimeWindows());
-        // return new PickupActivityNEW(this, builder.type, builder.location,
-        // builder.serviceTime,
-        // builder.getCapacity(), builder.timeWindows.getTimeWindows());
+    public SizeDimension getSizeAtStart() {
+        return theRealJob.getSizeAtStart();
     }
 
-    @SuppressWarnings("unchecked")
     @Override
-    public Builder getBuilder(String id) {
-        return Builder.newInstance(id);
+    public SizeDimension getSizeAtEnd() {
+        return theRealJob.getSizeAtEnd();
+    }
+
+    @Override
+    public JobActivityList getActivityList() {
+        return theRealJob.getActivityList();
+    }
+
+    public CustomJob getTheRealJob() {
+        return theRealJob;
+    }
+
+    public ServiceActivity getTheRealActivity() {
+        return theRealActivity;
     }
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/ServiceJob.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/ServiceJob.java
new file mode 100644
index 000000000..eaf89c0c2
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/ServiceJob.java
@@ -0,0 +1,85 @@
+/*
+ * Licensed to GraphHopper GmbH under one or more contributor
+ * license agreements. See the NOTICE file distributed with this work for
+ * additional information regarding copyright ownership.
+ *
+ * GraphHopper GmbH licenses this file to you under the Apache License,
+ * Version 2.0 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.graphhopper.jsprit.core.problem.job;
+
+import com.graphhopper.jsprit.core.problem.solution.route.activity.ServiceActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
+
+/**
+ * Service implementation of a job.
+ *
+ * <h3>Warning!</h3>
+ * <p>
+ * This class and are here for convenience. Most of the time using the
+ * {@linkplain CustomJob} is a better choice. Note that this class may most
+ * likely be deprecated and be removed in the future.
+ * </p>
+ *
+ * @author schroeder
+ * @author Balage
+ *
+ * @see {@linkplain CustomJob.BuilderBase#addService(Location)}
+ * @see {@linkplain CustomJob.BuilderBase#addService(Location, double)}
+ * @see {@linkplain CustomJob.BuilderBase#addService(Location, double, TimeWindow)}
+ */
+public class ServiceJob extends AbstractSingleActivityJob<ServiceActivity> {
+
+    /**
+     * Builder for {@linkplain ServiceJob}.
+     *
+     * @author Balage
+     */
+    public static final class Builder
+    extends AbstractSingleActivityJob.BuilderBase<ServiceJob, Builder> {
+
+        /**
+         * Constructor.
+         *
+         * @param id
+         *            The unique id.
+         */
+        public Builder(String id) {
+            super(id);
+            setType("pickup");
+        }
+
+        @Override
+        protected ServiceJob createInstance() {
+            return new ServiceJob(this);
+        }
+    }
+
+    private ServiceJob(Builder builder) {
+        super(builder);
+    }
+
+    @Override
+    protected ServiceActivity createActivity(
+            AbstractSingleActivityJob.BuilderBase<? extends AbstractSingleActivityJob<?>, ?> builder) {
+        return new ServiceActivity(this, builder.type,
+                builder.location, builder.serviceTime, builder.getCapacity(),
+                builder.timeWindows.getTimeWindows());
+    }
+
+    @SuppressWarnings("unchecked")
+    @Override
+    public Builder getBuilder(String id) {
+        return new Builder(id);
+    }
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java
index cfb07e966..4613606df 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java
@@ -17,8 +17,15 @@
  */
 package com.graphhopper.jsprit.core.problem.job;
 
+import java.util.Collection;
+import java.util.List;
+
+import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.SizeDimension;
+import com.graphhopper.jsprit.core.problem.Skills;
+import com.graphhopper.jsprit.core.problem.job.CustomJob.BuilderBase.ActivityType;
+import com.graphhopper.jsprit.core.problem.job.CustomJob.BuilderBase.BuilderActivityInfo;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
@@ -48,348 +55,550 @@
  * <p>
  * Note that two shipments are equal if they have the same id.
  *
+ * @deprecated Use {@linkplain CustomJob} instead
+ *
+ *
+ *             <p>
+ *             <h1><em>Warning!</em></h1>
+ *             </p>
+ *
+ *             <p>
+ *             <strong>This class is deprecated and only available for backward
+ *             compatibility and for easier migration.</strong>
+ *             </p>
+ *             <p>
+ *             This class wraps a new CustomJob instance and delegates its
+ *             values and the values from its sole activity. It is strongly
+ *             recommended to switch to the {@linkplain CustomJob} and use one
+ *             of the following functions of its builder to add the service
+ *             activity:
+ *
+ *             <ul>
+ *             <li>{@linkplain CustomJob.Builder#addService(Location)}</li>
+ *             <li>
+ *             {@linkplain CustomJob.Builder#addService(Location, double, TimeWindow)}
+ *             </li>
+ *             </ul>
+ *
+ *             or if you need more control on the activity, use the
+ *             {@linkplain CustomJob.Builder#addActivity(BuilderActivityInfo)}
+ *             function:
+ *
+ *             <pre>
+ *    BuilderActivityInfo activityInfo = new BuilderActivityInfo(ActivityType.SERVICE, <i>location</i>);
+
+        activityInfo.withName(<i>activity name</i>);
+        activityInfo.withOperationTime(<i>serviceTime</i>);
+        activityInfo.withSize((SizeDimension) <i>capacity</i>);
+        activityInfo.withTimeWindows(<i>timeWindows</i>);
+        activityInfo.withTimeWindow(<i>timeWindow</i>);
+
+        CustomJob.Builder customJobBuilder = new CustomJob.Builder(<i>id</i>);
+        customJobBuilder
+            .addActivity(activityInfo)
+            .addAllRequiredSkills(<i>skills<i>)
+            .setName(<i>job name</i>)
+            .setPriority(<i>priority</i>);
+
+        job = customJobBuilder.build();
+ *             </pre>
+ *
+ *             </p>
+ *
+ * @author schroeder
+ * @author Balage
+ *
+ * @see {@linkplain CustomJob}
+ * @see {@linkplain CustomJob.Builder}
+ * @see {@linkplain CustomJob.BuilderBase.BuilderActivityInfo}
+ *
+ *
  * @author schroeder
  */
+@Deprecated
 public class Shipment extends AbstractJob {
 
-    public static final String DELIVERY_ACTIVITY_NAME = "deliverShipment";
-    public static final String PICKUP_ACTIVITY_NAME = "pickupShipment";
+
+
 
     /**
      * Builder that builds the shipment.
      *
+     * @deprecated Use {@linkplain CustomJob.Builder} instead
      * @author schroeder
      */
-    public static abstract class BuilderBase<T extends Shipment, B extends BuilderBase<T, B>>
-    extends JobBuilder<T, B> {
+    @Deprecated
+    public static class Builder {
+
+        private String id;
 
         private double pickupServiceTime = 0.0;
 
         private double deliveryServiceTime = 0.0;
 
-        private Location pickupLocation;
+        private TimeWindow deliveryTimeWindow = TimeWindow.newInstance(0.0, Double.MAX_VALUE);
+
+        private TimeWindow pickupTimeWindow = TimeWindow.newInstance(0.0, Double.MAX_VALUE);
+
+        private Capacity.Builder capacityBuilder = Capacity.Builder.newInstance();
+
+        private Capacity capacity;
 
-        private Location deliveryLocation;
+        private Skills.Builder skillBuilder = Skills.Builder.newInstance();
 
-        protected TimeWindowsImpl deliveryTimeWindows = new TimeWindowsImpl();
+        private Skills skills;
 
-        private TimeWindowsImpl pickupTimeWindows = new TimeWindowsImpl();
+        private String name = "no-name";
+
+        private Location pickupLocation_;
+
+        private Location deliveryLocation_;
+
+        protected TimeWindowsImpl deliveryTimeWindows;
+
+        private boolean deliveryTimeWindowAdded = false;
+
+        private boolean pickupTimeWindowAdded = false;
+
+        private TimeWindowsImpl pickupTimeWindows;
+
+        private int priority = 2;
+
+        public Object userData;
 
         /**
          * Returns new instance of this builder.
          *
-         * @param id the id of the shipment which must be a unique identifier
-         *           among all jobs
+         * @param id the id of the shipment which must be a unique identifier among all jobs
          * @return the builder
          */
+        public static Builder newInstance(String id) {
+            return new Builder(id);
+        }
 
-        public BuilderBase(String id) {
-            super(id);
+        Builder(String id) {
+            if (id == null) throw new IllegalArgumentException("id must not be null");
+            this.id = id;
             pickupTimeWindows = new TimeWindowsImpl();
+            pickupTimeWindows.add(pickupTimeWindow);
             deliveryTimeWindows = new TimeWindowsImpl();
+            deliveryTimeWindows.add(deliveryTimeWindow);
+        }
+
+        /**
+         * Sets user specific domain data associated with the object.
+         *
+         * <p>
+         * The user data is a black box for the framework, it only stores it,
+         * but never interacts with it in any way.
+         * </p>
+         *
+         * @param userData
+         *            any object holding the domain specific user data
+         *            associated with the object.
+         * @return builder
+         */
+        public Builder setUserData(Object userData) {
+            this.userData = userData;
+            return this;
         }
 
         /**
          * Sets pickup location.
          *
-         * @param pickupLocation pickup location
+         * @param pickupLocation
+         *            pickup location
          * @return builder
          */
-        @SuppressWarnings("unchecked")
-        public B setPickupLocation(Location pickupLocation) {
-            this.pickupLocation = pickupLocation;
-            return (B) this;
+        public Builder setPickupLocation(Location pickupLocation) {
+            this.pickupLocation_ = pickupLocation;
+            return this;
         }
 
         /**
          * Sets pickupServiceTime.
          * <p>
-         * <p>
-         * ServiceTime is intended to be the time the implied activity takes at
-         * the pickup-location.
+         * <p>ServiceTime is intended to be the time the implied activity takes at the pickup-location.
          *
-         * @param serviceTime the service time / duration the pickup of the associated
-         *                    shipment takes
+         * @param serviceTime the service time / duration the pickup of the associated shipment takes
          * @return builder
          * @throws IllegalArgumentException if servicTime < 0.0
          */
-        @SuppressWarnings("unchecked")
-        public B setPickupServiceTime(double serviceTime) {
-            if (serviceTime < 0.0) {
-                throw new IllegalArgumentException("serviceTime must not be < 0.0");
-            }
-            pickupServiceTime = serviceTime;
-            return (B) this;
+        public Builder setPickupServiceTime(double serviceTime) {
+            if (serviceTime < 0.0) throw new IllegalArgumentException("serviceTime must not be < 0.0");
+            this.pickupServiceTime = serviceTime;
+            return this;
         }
 
         /**
-         * Sets the timeWindow for the pickup, i.e. the time-period in which a
-         * pickup operation is allowed to START.
-         * <p>
+         * Sets the timeWindow for the pickup, i.e. the time-period in which a pickup operation is
+         * allowed to START.
          * <p>
-         * By default timeWindow is [0.0, Double.MAX_VALUE}
+         * <p>By default timeWindow is [0.0, Double.MAX_VALUE}
          *
-         * @param timeWindow the time window within the pickup operation/activity can
-         *                   START
+         * @param timeWindow the time window within the pickup operation/activity can START
          * @return builder
          * @throws IllegalArgumentException if timeWindow is null
          */
-        @SuppressWarnings("unchecked")
-        public B setPickupTimeWindow(TimeWindow timeWindow) {
-            if (timeWindow == null) {
-                throw new IllegalArgumentException("pickup time-window must not be null");
-            }
-            pickupTimeWindows.clear();
-            pickupTimeWindows.add(timeWindow);
-            return (B) this;
+        public Builder setPickupTimeWindow(TimeWindow timeWindow) {
+            if (timeWindow == null) throw new IllegalArgumentException("delivery time-window must not be null");
+            this.pickupTimeWindow = timeWindow;
+            this.pickupTimeWindows = new TimeWindowsImpl();
+            this.pickupTimeWindows.add(timeWindow);
+            return this;
         }
 
 
+
         /**
          * Sets delivery location.
          *
          * @param deliveryLocation delivery location
          * @return builder
          */
-        @SuppressWarnings("unchecked")
-        public B setDeliveryLocation(Location deliveryLocation) {
-            this.deliveryLocation = deliveryLocation;
-            return (B) this;
+        public Builder setDeliveryLocation(Location deliveryLocation) {
+            this.deliveryLocation_ = deliveryLocation;
+            return this;
         }
 
         /**
          * Sets the delivery service-time.
          * <p>
-         * <p>
-         * ServiceTime is intended to be the time the implied activity takes at
-         * the delivery-location.
+         * <p>ServiceTime is intended to be the time the implied activity takes at the delivery-location.
          *
          * @param deliveryServiceTime the service time / duration of shipment's delivery
          * @return builder
          * @throws IllegalArgumentException if serviceTime < 0.0
          */
-        @SuppressWarnings("unchecked")
-        public B setDeliveryServiceTime(double deliveryServiceTime) {
-            if (deliveryServiceTime < 0.0) {
-                throw new IllegalArgumentException("deliveryServiceTime must not be < 0.0");
-            }
+        public Builder setDeliveryServiceTime(double deliveryServiceTime) {
+            if (deliveryServiceTime < 0.0) throw new IllegalArgumentException("deliveryServiceTime must not be < 0.0");
             this.deliveryServiceTime = deliveryServiceTime;
-            return (B) this;
+            return this;
         }
 
         /**
-         * Sets the timeWindow for the delivery, i.e. the time-period in which a
-         * delivery operation is allowed to start.
-         * <p>
+         * Sets the timeWindow for the delivery, i.e. the time-period in which a delivery operation is
+         * allowed to start.
          * <p>
-         * By default timeWindow is [0.0, Double.MAX_VALUE}
+         * <p>By default timeWindow is [0.0, Double.MAX_VALUE}
          *
-         * @param timeWindow the time window within the associated delivery is allowed
-         *                   to START
+         * @param timeWindow the time window within the associated delivery is allowed to START
          * @return builder
          * @throws IllegalArgumentException if timeWindow is null
          */
-        @SuppressWarnings("unchecked")
-        public B setDeliveryTimeWindow(TimeWindow timeWindow) {
-            if (timeWindow == null) {
-                throw new IllegalArgumentException("delivery time-window must not be null");
-            }
-            deliveryTimeWindows.clear();
-            deliveryTimeWindows.add(timeWindow);
-            return (B) this;
+        public Builder setDeliveryTimeWindow(TimeWindow timeWindow) {
+            if (timeWindow == null) throw new IllegalArgumentException("delivery time-window must not be null");
+            this.deliveryTimeWindow = timeWindow;
+            this.deliveryTimeWindows = new TimeWindowsImpl();
+            this.deliveryTimeWindows.add(timeWindow);
+            return this;
+        }
+
+        /**
+         * Adds capacity dimension.
+         *
+         * @param dimensionIndex the dimension index of the corresponding capacity value
+         * @param dimensionValue the capacity value
+         * @return builder
+         * @throws IllegalArgumentException if dimVal < 0
+         */
+        public Builder addSizeDimension(int dimensionIndex, int dimensionValue) {
+            if (dimensionValue < 0) throw new IllegalArgumentException("capacity value cannot be negative");
+            capacityBuilder.addDimension(dimensionIndex, dimensionValue);
+            return this;
+        }
+
+
+
+        public Builder addRequiredSkill(String skill) {
+            skillBuilder.addSkill(skill);
+            return this;
         }
 
-        @SuppressWarnings("unchecked")
-        public B addDeliveryTimeWindow(TimeWindow timeWindow) {
-            if (timeWindow == null) {
-                throw new IllegalArgumentException("time-window arg must not be null");
+        public Builder setName(String name) {
+            this.name = name;
+            return this;
+        }
+
+        public Builder addDeliveryTimeWindow(TimeWindow timeWindow) {
+            if(timeWindow == null) throw new IllegalArgumentException("time-window arg must not be null");
+            if(!deliveryTimeWindowAdded){
+                deliveryTimeWindows = new TimeWindowsImpl();
+                deliveryTimeWindowAdded = true;
             }
             deliveryTimeWindows.add(timeWindow);
-            return (B) this;
+            return this;
         }
 
-        @SuppressWarnings("unchecked")
-        public B addDeliveryTimeWindow(double earliest, double latest) {
+        public Builder addDeliveryTimeWindow(double earliest, double latest) {
             addDeliveryTimeWindow(TimeWindow.newInstance(earliest, latest));
-            return (B) this;
+            return this;
         }
 
-        @SuppressWarnings("unchecked")
-        public B addPickupTimeWindow(TimeWindow timeWindow) {
-            if (timeWindow == null) {
-                throw new IllegalArgumentException("time-window arg must not be null");
+        public Builder addPickupTimeWindow(TimeWindow timeWindow) {
+            if(timeWindow == null) throw new IllegalArgumentException("time-window arg must not be null");
+            if(!pickupTimeWindowAdded){
+                pickupTimeWindows = new TimeWindowsImpl();
+                pickupTimeWindowAdded = true;
             }
             pickupTimeWindows.add(timeWindow);
-            return (B) this;
+            return this;
         }
 
-        @SuppressWarnings("unchecked")
-        public B addPickupTimeWindow(double earliest, double latest) {
-            addPickupTimeWindow(TimeWindow.newInstance(earliest, latest));
-            return (B) this;
+        public Builder addPickupTimeWindow(double earliest, double latest) {
+            return addPickupTimeWindow(TimeWindow.newInstance(earliest, latest));
+        }
+
+        /**
+         * Set priority to shipment. Only 1 (high) to 10 (low) are allowed.
+         * <p>
+         * Default is 2 = medium.
+         *
+         * @param priority
+         * @return builder
+         */
+        public Builder setPriority(int priority) {
+            if (priority < 1 || priority > 10)
+                throw new IllegalArgumentException("incorrect priority. only 1 (very high) to 10 (very low) are allowed");
+            this.priority = priority;
+            return this;
         }
 
-        @Override
-        protected void validate() {
-            if (pickupLocation == null) {
+
+        /**
+         * Builds the shipment.
+         *
+         * @return shipment
+         * @throws IllegalArgumentException
+         *             if neither pickup-location nor pickup-coord is set or if
+         *             neither delivery-location nor delivery-coord is set
+         */
+        public Shipment build() {
+            if (pickupLocation_ == null)
                 throw new IllegalArgumentException("pickup location is missing");
-            }
-            if (deliveryLocation == null) {
+            if (deliveryLocation_ == null)
                 throw new IllegalArgumentException("delivery location is missing");
-            }
-            if (pickupTimeWindows.isEmpty()) {
-                pickupTimeWindows.add(TimeWindow.ETERNITY);
-            }
-            if (deliveryTimeWindows.isEmpty()) {
-                deliveryTimeWindows.add(TimeWindow.ETERNITY);
-            }
+            capacity = capacityBuilder.build();
+            skills = skillBuilder.build();
+            return new Shipment(this);
         }
+    }
 
-        // ---- Refactor test
+    private CustomJob theRealJob;
+    private PickupActivity theRealPickupActivity;
+    private DeliveryActivity theRealDeliveryActivity;
+
+    Shipment(Builder builder) {
+
+        BuilderActivityInfo pickupActivityInfo = new BuilderActivityInfo(ActivityType.PICKUP,
+                builder.pickupLocation_);
+
+        pickupActivityInfo.withName(builder.name == null ? null : builder.name + ".pickup");
+        pickupActivityInfo.withOperationTime(builder.pickupServiceTime);
+        // Safe cast because SizeDimension is the only implementation of
+        // Capacity
+        pickupActivityInfo.withSize((SizeDimension) builder.capacity);
+        pickupActivityInfo.withTimeWindows(builder.pickupTimeWindows.getTimeWindows());
+
+        BuilderActivityInfo deliveryActivityInfo = new BuilderActivityInfo(ActivityType.DELIVERY,
+                builder.deliveryLocation_);
+
+        deliveryActivityInfo.withName(builder.name == null ? null : builder.name + ".delivery");
+        deliveryActivityInfo.withOperationTime(builder.deliveryServiceTime);
+        // Safe cast because SizeDimension is the only implementation of
+        // Capacity
+        deliveryActivityInfo.withSize((SizeDimension) builder.capacity);
+        deliveryActivityInfo.withTimeWindows(builder.deliveryTimeWindows.getTimeWindows());
+
+        CustomJob.Builder customJobBuilder = new CustomJob.Builder(builder.id);
+        customJobBuilder
+        .addActivity(pickupActivityInfo)
+        .addActivity(deliveryActivityInfo)
+        .addAllRequiredSkills(builder.skills)
+        .setName(builder.name)
+        .addUserData(builder.userData)
+        .setPriority(builder.priority);
+        theRealJob = customJobBuilder.build();
+
+        theRealPickupActivity = (PickupActivity) theRealJob.getActivityList().getAll().get(0);
+        theRealDeliveryActivity = (DeliveryActivity) theRealJob.getActivityList().getAll().get(1);
+    }
 
-        public double getPickupServiceTime() {
-            return pickupServiceTime;
-        }
+    @Override
+    public String getId() {
+        return theRealJob.getId();
+    }
 
-        public double getDeliveryServiceTime() {
-            return deliveryServiceTime;
-        }
+    public Location getPickupLocation() {
+        return theRealPickupActivity.getLocation();
+    }
 
-        public Location getPickupLocation() {
-            return pickupLocation;
-        }
+    /**
+     * Returns the pickup service-time.
+     * <p>
+     * <p>By default service-time is 0.0.
+     *
+     * @return service-time
+     */
+    public double getPickupServiceTime() {
+        return theRealPickupActivity.getOperationTime();
+    }
 
-        public Location getDeliveryLocation() {
-            return deliveryLocation;
-        }
+    public Location getDeliveryLocation() {
+        return theRealDeliveryActivity.getLocation();
+    }
 
-        public TimeWindowsImpl getDeliveryTimeWindows() {
-            return deliveryTimeWindows;
-        }
+    /**
+     * Returns service-time of delivery.
+     *
+     * @return service-time of delivery
+     */
+    public double getDeliveryServiceTime() {
+        return theRealDeliveryActivity.getOperationTime();
+    }
 
-        public TimeWindowsImpl getPickupTimeWindows() {
-            return pickupTimeWindows;
-        }
+    /**
+     * Returns the time-window of delivery.
+     *
+     * @return time-window of delivery
+     */
+    public TimeWindow getDeliveryTimeWindow() {
+        return theRealDeliveryActivity.getTimeWindows().iterator().next();
+    }
 
+    public Collection<TimeWindow> getDeliveryTimeWindows() {
+        return theRealDeliveryActivity.getTimeWindows();
     }
 
-    public static final class Builder extends BuilderBase<Shipment, Builder> {
+    /**
+     * Returns the time-window of pickup.
+     *
+     * @return time-window of pickup
+     */
+    public TimeWindow getPickupTimeWindow() {
+        return theRealPickupActivity.getTimeWindows().iterator().next();
+    }
 
-        public static Builder newInstance(String id) {
-            return new Builder(id);
-        }
+    public Collection<TimeWindow> getPickupTimeWindows() {
+        return theRealPickupActivity.getTimeWindows();
+    }
 
-        public Builder(String id) {
-            super(id);
-        }
+    @Override
+    public SizeDimension getSize() {
+        return theRealPickupActivity.getLoadSize();
+    }
 
-        @Override
-        protected Shipment createInstance() {
-            return new Shipment(this);
-        }
+    @Override
+    public Skills getRequiredSkills() {
+        return theRealJob.getRequiredSkills();
+    }
 
+    @Override
+    public String getName() {
+        return theRealJob.getName();
+    }
+
+    /**
+     * Get priority of shipment. Only 1 = high priority, 2 = medium and 3 = low are allowed.
+     * <p>
+     * Default is 2 = medium.
+     *
+     * @return priority
+     */
+    @Override
+    public int getPriority() {
+        return theRealJob.getPriority();
     }
 
 
-    Shipment(BuilderBase<? extends Shipment, ?> builder) {
-        super(builder);
+    @Override
+    protected void createActivities(JobBuilder<? extends AbstractJob, ?> jobBuilder) {
+        // This is unused being a legacy implementation
+    }
+
+    @Override
+    public int getIndex() {
+        return theRealJob.getIndex();
     }
 
+    @Override
+    public Object getUserData() {
+        return theRealJob.getUserData();
+    }
 
     @Override
-    protected void createActivities(JobBuilder<?, ?> builder) {
-        Builder shipmentBuilder = (Builder) builder;
-        JobActivityList list = new SequentialJobActivityList(this);
-        list.addActivity(new PickupActivity(this, PICKUP_ACTIVITY_NAME,
-                        shipmentBuilder.getPickupLocation(),
-                        shipmentBuilder.getPickupServiceTime(), shipmentBuilder.getCapacity(),
-                        shipmentBuilder.getPickupTimeWindows().getTimeWindows()));
-        list.addActivity(new DeliveryActivity(this, DELIVERY_ACTIVITY_NAME,
-                        shipmentBuilder.getDeliveryLocation(),
-                        shipmentBuilder.getDeliveryServiceTime(),
-                        shipmentBuilder.getCapacity().invert(),
-                        shipmentBuilder.getDeliveryTimeWindows().getTimeWindows()));
-
-        setActivities(list);
+    public List<Location> getAllLocations() {
+        return theRealJob.getAllLocations();
     }
 
-    public PickupActivity getPickupActivity() {
-        return (PickupActivity) getActivityList().findByType(PICKUP_ACTIVITY_NAME).get();
+    @Override
+    public SizeDimension getSizeAtStart() {
+        return theRealJob.getSizeAtStart();
     }
 
-    public DeliveryActivity getDeliveryActivity() {
-        return (DeliveryActivity) getActivityList().findByType(DELIVERY_ACTIVITY_NAME).get();
+    @Override
+    public SizeDimension getSizeAtEnd() {
+        return theRealJob.getSizeAtEnd();
     }
 
-    // =================== DEPRECATED GETTERS
-
-    // @Deprecated
-    // public Location getPickupLocation() {
-    // return getPickupActivity().getLocation();
-    // }
-    //
-    // /**
-    // * Returns the pickup service-time.
-    // * <p>
-    // * <p>
-    // * By default service-time is 0.0.
-    // *
-    // * @return service-time
-    // */
-    // @Deprecated
-    // public double getPickupServiceTime() {
-    // return getPickupActivity().getOperationTime();
-    // }
-    //
-    // @Deprecated
-    // public Location getDeliveryLocation() {
-    // return getDeliveryActivity().getLocation();
-    // }
-    //
-    // /**
-    // * Returns service-time of delivery.
-    // *
-    // * @return service-time of delivery
-    // */
-    // @Deprecated
-    // public double getDeliveryServiceTime() {
-    // return getDeliveryActivity().getOperationTime();
-    // }
-    //
-    // /**
-    // * Returns the time-window of delivery.
-    // *
-    // * @return time-window of delivery
-    // */
-    // @Deprecated
-    // public TimeWindow getDeliveryTimeWindow() {
-    // return getDeliveryTimeWindows().iterator().next();
-    // }
-    //
-    // @Deprecated
-    // public Collection<TimeWindow> getDeliveryTimeWindows() {
-    // return getDeliveryActivity().getTimeWindows();
-    // }
-    //
-    // /**
-    // * Returns the time-window of pickup.
-    // *
-    // * @return time-window of pickup
-    // */
-    // @Deprecated
-    // public TimeWindow getPickupTimeWindow() {
-    // return getPickupTimeWindows().iterator().next();
-    // }
-    //
-    // @Deprecated
-    // public Collection<TimeWindow> getPickupTimeWindows() {
-    // return getPickupActivity().getTimeWindows();
-    // }
+    @Override
+    public JobActivityList getActivityList() {
+        return theRealJob.getActivityList();
+    }
 
     @Override
-    @Deprecated
-    public SizeDimension getSize() {
-        return getPickupActivity().getLoadChange();
+    public Collection<TimeWindow> getTimeWindows() {
+        return theRealJob.getTimeWindows();
     }
 
+    @Override
+    public String toString() {
+        return theRealJob.toString();
+    }
+
+    @Override
+    public void impl_setIndex(int index) {
+        theRealJob.impl_setIndex(index);
+    }
+
+
+    @Override
+    public int hashCode() {
+        final int prime = 31;
+        int result = 1;
+        result = prime * result + ((getId() == null) ? 0 : getId().hashCode());
+        return result;
+    }
+
+    /**
+     * Two services are equal if they have the same id.
+     */
+    @Override
+    public boolean equals(Object obj) {
+        if (this == obj)
+            return true;
+        if (obj == null)
+            return false;
+        if (getClass() != obj.getClass())
+            return false;
+        Shipment other = (Shipment) obj;
+        if (getId() == null) {
+            if (other.getId() != null)
+                return false;
+        } else if (!getId().equals(other.getId()))
+            return false;
+        return true;
+    }
+
+    public CustomJob getTheRealJob() {
+        return theRealJob;
+    }
+
+    public PickupActivity getTheRealPickupActivity() {
+        return theRealPickupActivity;
+    }
+
+    public DeliveryActivity getTheRealDeliveryActivity() {
+        return theRealDeliveryActivity;
+    }
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/ShipmentJob.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/ShipmentJob.java
new file mode 100644
index 000000000..21b23272f
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/ShipmentJob.java
@@ -0,0 +1,384 @@
+/*
+ * Licensed to GraphHopper GmbH under one or more contributor
+ * license agreements. See the NOTICE file distributed with this work for
+ * additional information regarding copyright ownership.
+ *
+ * GraphHopper GmbH licenses this file to you under the Apache License,
+ * Version 2.0 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.graphhopper.jsprit.core.problem.job;
+
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindowsImpl;
+
+
+/**
+ * Shipment is an implementation of Job and consists of a pickup and a delivery
+ * of something.
+ * <p>
+ * <h3>Warning!</h3>
+ * <p>
+ * This class and are here for convenience. Most of the time using the
+ * {@linkplain CustomJob} is a better choice. Note that this class may most
+ * likely be deprecated and be removed in the future.
+ * </p>
+ *
+ * @author schroeder
+ * @author Balage
+ *
+ * @see {@linkplain CustomJob.BuilderBase}
+ */
+public class ShipmentJob extends AbstractJob {
+
+    /**
+     * Name of the pickup activity in the shipment.
+     */
+    public static final String DELIVERY_ACTIVITY_NAME = "deliverShipment";
+    /**
+     * Name of the delivery activity in the shipment.
+     */
+    public static final String PICKUP_ACTIVITY_NAME = "pickupShipment";
+
+    /**
+     * Builder that builds the shipment.
+     *
+     * @author schroeder
+     * @author Balage
+     */
+    protected static abstract class BuilderBase<T extends ShipmentJob, B extends BuilderBase<T, B>>
+    extends JobBuilder<T, B> {
+
+        private double pickupServiceTime = 0.0;
+
+        private double deliveryServiceTime = 0.0;
+
+        private Location pickupLocation;
+
+        private Location deliveryLocation;
+
+        private TimeWindowsImpl deliveryTimeWindows = new TimeWindowsImpl();
+
+        private TimeWindowsImpl pickupTimeWindows = new TimeWindowsImpl();
+
+        /**
+         * Constructor.
+         *
+         * @param id
+         *            the id of the shipment which must be a unique identifier
+         *            among all jobs
+         * @return the builder
+         */
+
+        public BuilderBase(String id) {
+            super(id);
+            pickupTimeWindows = new TimeWindowsImpl();
+            deliveryTimeWindows = new TimeWindowsImpl();
+        }
+
+        /**
+         * Sets pickup location.
+         *
+         * @param pickupLocation pickup location
+         * @return builder
+         */
+        @SuppressWarnings("unchecked")
+        public B setPickupLocation(Location pickupLocation) {
+            this.pickupLocation = pickupLocation;
+            return (B) this;
+        }
+
+        /**
+         * Sets pickupServiceTime.
+         * <p>
+         * <p>
+         * ServiceTime is intended to be the time the implied activity takes at
+         * the pickup-location.
+         *
+         * @param serviceTime the service time / duration the pickup of the associated
+         *                    shipment takes
+         * @return builder
+         * @throws IllegalArgumentException if servicTime < 0.0
+         */
+        @SuppressWarnings("unchecked")
+        public B setPickupServiceTime(double serviceTime) {
+            if (serviceTime < 0.0)
+                throw new IllegalArgumentException("serviceTime must not be < 0.0");
+            pickupServiceTime = serviceTime;
+            return (B) this;
+        }
+
+
+
+        /**
+         * Sets delivery location.
+         *
+         * @param deliveryLocation delivery location
+         * @return builder
+         */
+        @SuppressWarnings("unchecked")
+        public B setDeliveryLocation(Location deliveryLocation) {
+            this.deliveryLocation = deliveryLocation;
+            return (B) this;
+        }
+
+        /**
+         * Sets the delivery service-time.
+         * <p>
+         * <p>
+         * ServiceTime is intended to be the time the implied activity takes at
+         * the delivery-location.
+         *
+         * @param deliveryServiceTime the service time / duration of shipment's delivery
+         * @return builder
+         * @throws IllegalArgumentException if serviceTime < 0.0
+         */
+        @SuppressWarnings("unchecked")
+        public B setDeliveryServiceTime(double deliveryServiceTime) {
+            if (deliveryServiceTime < 0.0)
+                throw new IllegalArgumentException("deliveryServiceTime must not be < 0.0");
+            this.deliveryServiceTime = deliveryServiceTime;
+            return (B) this;
+        }
+
+        /**
+         * Sets a single time window.
+         * <p>
+         * This method clears any previously set time windows. Use
+         * {@linkplain #addTimeWindow(TimeWindow)} to add an additional one,
+         * instead of replacing the already set ones.
+         * </p>
+         *
+         * @param timeWindow
+         *            the time window within the associated delivery is allowed
+         *            to start
+         * @return builder
+         * @throws IllegalArgumentException
+         *             if timeWindow is null
+         */
+        @SuppressWarnings("unchecked")
+        public B setDeliveryTimeWindow(TimeWindow timeWindow) {
+            if (timeWindow == null)
+                throw new IllegalArgumentException("delivery time-window must not be null");
+            deliveryTimeWindows.clear();
+            deliveryTimeWindows.add(timeWindow);
+            return (B) this;
+        }
+
+        /**
+         * Adds a single time window to the delivery activity.
+         *
+         * @param timeWindow
+         *            The time window to set.
+         * @return the builder
+         * @throws IllegalArgumentException
+         *             If the time window is null.
+         */
+        @SuppressWarnings("unchecked")
+        public B addDeliveryTimeWindow(TimeWindow timeWindow) {
+            if (timeWindow == null)
+                throw new IllegalArgumentException("time-window arg must not be null");
+            deliveryTimeWindows.add(timeWindow);
+            return (B) this;
+        }
+
+        /**
+         * Constructs and adds a time window to the delivery activity.
+         *
+         * @param earliest
+         *            The earliest start.
+         * @param latest
+         *            The latest start.
+         * @return the builder
+         */
+        @SuppressWarnings("unchecked")
+        public B addDeliveryTimeWindow(double earliest, double latest) {
+            addDeliveryTimeWindow(TimeWindow.newInstance(earliest, latest));
+            return (B) this;
+        }
+
+        /**
+         * Sets the timeWindow for the pickup, i.e. the time-period in which a
+         * pickup operation is allowed to START.
+         * <p>
+         * <p>
+         * By default timeWindow is [0.0, Double.MAX_VALUE}
+         *
+         * @param timeWindow
+         *            the time window within the pickup operation/activity can
+         *            START
+         * @return builder
+         * @throws IllegalArgumentException
+         *             if timeWindow is null
+         */
+        @SuppressWarnings("unchecked")
+        public B setPickupTimeWindow(TimeWindow timeWindow) {
+            if (timeWindow == null)
+                throw new IllegalArgumentException("pickup time-window must not be null");
+            pickupTimeWindows.clear();
+            pickupTimeWindows.add(timeWindow);
+            return (B) this;
+        }
+
+        /**
+         * Adds a single time window to the pickup activity.
+         *
+         * @param timeWindow
+         *            The time window to set.
+         * @return the builder
+         * @throws IllegalArgumentException
+         *             If the time window is null.
+         */
+        @SuppressWarnings("unchecked")
+        public B addPickupTimeWindow(TimeWindow timeWindow) {
+            if (timeWindow == null)
+                throw new IllegalArgumentException("time-window arg must not be null");
+            pickupTimeWindows.add(timeWindow);
+            return (B) this;
+        }
+
+        /**
+         * Constructs and adds a time window to the pickup activity.
+         *
+         * @param earliest
+         *            The earliest start.
+         * @param latest
+         *            The latest start.
+         * @return the builder
+         */
+        @SuppressWarnings("unchecked")
+        public B addPickupTimeWindow(double earliest, double latest) {
+            addPickupTimeWindow(TimeWindow.newInstance(earliest, latest));
+            return (B) this;
+        }
+
+        @Override
+        protected void validate() {
+            if (pickupLocation == null)
+                throw new IllegalArgumentException("pickup location is missing");
+            if (deliveryLocation == null)
+                throw new IllegalArgumentException("delivery location is missing");
+            if (pickupTimeWindows.isEmpty()) {
+                pickupTimeWindows.add(TimeWindow.ETERNITY);
+            }
+            if (deliveryTimeWindows.isEmpty()) {
+                deliveryTimeWindows.add(TimeWindow.ETERNITY);
+            }
+        }
+
+        // ---- Refactor test
+
+        public double getPickupServiceTime() {
+            return pickupServiceTime;
+        }
+
+        public double getDeliveryServiceTime() {
+            return deliveryServiceTime;
+        }
+
+        public Location getPickupLocation() {
+            return pickupLocation;
+        }
+
+        public Location getDeliveryLocation() {
+            return deliveryLocation;
+        }
+
+        public TimeWindowsImpl getDeliveryTimeWindows() {
+            return deliveryTimeWindows;
+        }
+
+        public TimeWindowsImpl getPickupTimeWindows() {
+            return pickupTimeWindows;
+        }
+
+    }
+
+    /**
+     * The builder for {@linkplain ShipmentJob}.
+     *
+     * <h3>Warning!</h3>
+     * <p>
+     * This class and are here for convenience. Most of the time using the
+     * {@linkplain CustomJob} is a better choice. Note that this class may most
+     * likely be deprecated and be removed in the future.
+     * </p>
+     *
+     * @author Balage
+     */
+    public static final class Builder extends BuilderBase<ShipmentJob, Builder> {
+
+        /**
+         * Constructor.
+         *
+         * @param id
+         *            The unique id.
+         */
+        public Builder(String id) {
+            super(id);
+        }
+
+        @Override
+        protected ShipmentJob createInstance() {
+            return new ShipmentJob(this);
+        }
+
+    }
+
+
+    private ShipmentJob(BuilderBase<? extends ShipmentJob, ?> builder) {
+        super(builder);
+    }
+
+
+    @Override
+    protected void createActivities(JobBuilder<?, ?> builder) {
+        Builder shipmentBuilder = (Builder) builder;
+        JobActivityList list = new SequentialJobActivityList(this);
+        list.addActivity(new PickupActivity(this, PICKUP_ACTIVITY_NAME,
+                shipmentBuilder.getPickupLocation(),
+                shipmentBuilder.getPickupServiceTime(), shipmentBuilder.getCapacity(),
+                shipmentBuilder.getPickupTimeWindows().getTimeWindows()));
+        list.addActivity(new DeliveryActivity(this, DELIVERY_ACTIVITY_NAME,
+                shipmentBuilder.getDeliveryLocation(),
+                shipmentBuilder.getDeliveryServiceTime(),
+                shipmentBuilder.getCapacity().invert(),
+                shipmentBuilder.getDeliveryTimeWindows().getTimeWindows()));
+
+        setActivities(list);
+    }
+
+    /**
+     * @return The pickup activity.
+     */
+    public PickupActivity getPickupActivity() {
+        return (PickupActivity) getActivityList().findByType(PICKUP_ACTIVITY_NAME).get();
+    }
+
+    /**
+     * @return The delivery activity.
+     */
+    public DeliveryActivity getDeliveryActivity() {
+        return (DeliveryActivity) getActivityList().findByType(DELIVERY_ACTIVITY_NAME).get();
+    }
+
+
+    @Override
+    @Deprecated
+    public SizeDimension getSize() {
+        return getPickupActivity().getLoadChange();
+    }
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRoute.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRoute.java
index 70151c967..40188c650 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRoute.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRoute.java
@@ -30,9 +30,9 @@
 import com.graphhopper.jsprit.core.problem.driver.DriverImpl;
 import com.graphhopper.jsprit.core.problem.job.AbstractSingleActivityJob;
 import com.graphhopper.jsprit.core.problem.job.Break;
-import com.graphhopper.jsprit.core.problem.job.Delivery;
-import com.graphhopper.jsprit.core.problem.job.Pickup;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.DeliveryJob;
+import com.graphhopper.jsprit.core.problem.job.PickupJob;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.End;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.Start;
@@ -86,7 +86,7 @@ public static VehicleRoute emptyRoute() {
      */
     public static class Builder {
 
-        private Map<Shipment, TourActivity> openActivities = new HashMap<>();
+        private Map<ShipmentJob, TourActivity> openActivities = new HashMap<>();
 
         /**
          * Returns new instance of this builder.
@@ -162,7 +162,7 @@ public static Builder newInstance(Vehicle vehicle) {
         // private TourShipmentActivityFactory shipmentActivityFactory = new
         // DefaultShipmentActivityFactory();
 
-        private Set<Shipment> openShipments = new HashSet<>();
+        private Set<ShipmentJob> openShipments = new HashSet<>();
 
         private JobActivityFactory jobActivityFactory = new SimpleJobActivityFactory();
 
@@ -279,21 +279,21 @@ public Builder addBreak(Break currentbreak, TimeWindow timeWindow) {
          *
          * <p>
          * <i><b>Note: Using this method is not recommended. Use the
-         * {@linkplain #addPickup(Pickup, TimeWindow)} instead.</b></i>
+         * {@linkplain #addPickup(PickupJob, TimeWindow)} instead.</b></i>
          * </p>
          *
          * @param pickup
          *            pickup to be added
          * @return the builder
          */
-        public Builder addPickup(Pickup pickup) {
+        public Builder addPickup(PickupJob pickup) {
             if (pickup == null) {
                 throw new IllegalArgumentException("pickup must not be null");
             }
             return addService(pickup);
         }
 
-        public Builder addPickup(Pickup pickup, TimeWindow timeWindow) {
+        public Builder addPickup(PickupJob pickup, TimeWindow timeWindow) {
             if (pickup == null) {
                 throw new IllegalArgumentException("pickup must not be null");
             }
@@ -305,7 +305,7 @@ public Builder addPickup(Pickup pickup, TimeWindow timeWindow) {
          *
          * <p>
          * <i><b>Note: Using this method is not recommended. Use the
-         * {@linkplain #addDelivery(Delivery, TimeWindow)} instead.</b></i>
+         * {@linkplain #addDelivery(DeliveryJob, TimeWindow)} instead.</b></i>
          * </p>
          *
          *
@@ -313,14 +313,14 @@ public Builder addPickup(Pickup pickup, TimeWindow timeWindow) {
          *            delivery to be added
          * @return the builder
          */
-        public Builder addDelivery(Delivery delivery) {
+        public Builder addDelivery(DeliveryJob delivery) {
             if (delivery == null) {
                 throw new IllegalArgumentException("delivery must not be null");
             }
             return addService(delivery);
         }
 
-        public Builder addDelivery(Delivery delivery, TimeWindow timeWindow) {
+        public Builder addDelivery(DeliveryJob delivery, TimeWindow timeWindow) {
             if (delivery == null) {
                 throw new IllegalArgumentException("delivery must not be null");
             }
@@ -332,7 +332,7 @@ public Builder addDelivery(Delivery delivery, TimeWindow timeWindow) {
          *
          * <p>
          * <i><b>Note: Using this method is not recommended. Use the
-         * {@linkplain #addPickup(Shipment, TimeWindow)} instead.</b></i>
+         * {@linkplain #addPickup(ShipmentJob, TimeWindow)} instead.</b></i>
          * </p>
          *
          * @param shipment
@@ -342,12 +342,12 @@ public Builder addDelivery(Delivery delivery, TimeWindow timeWindow) {
          *             if method has already been called with the specified
          *             shipment.
          */
-        public Builder addPickup(Shipment shipment) {
+        public Builder addPickup(ShipmentJob shipment) {
             return addPickup(shipment,
                             shipment.getPickupActivity().getSingleTimeWindow());
         }
 
-        public Builder addPickup(Shipment shipment, TimeWindow pickupTimeWindow) {
+        public Builder addPickup(ShipmentJob shipment, TimeWindow pickupTimeWindow) {
             if (openShipments.contains(shipment)) {
                 throw new IllegalArgumentException("shipment has already been added. cannot add it twice.");
             }
@@ -367,7 +367,7 @@ public Builder addPickup(Shipment shipment, TimeWindow pickupTimeWindow) {
          *
          * <p>
          * <i><b>Note: Using this method is not recommended. Use the
-         * {@linkplain #addDelivery(Shipment, TimeWindow)} instead.</b></i>
+         * {@linkplain #addDelivery(ShipmentJob, TimeWindow)} instead.</b></i>
          * </p>
          *
          * @param shipment
@@ -377,11 +377,11 @@ public Builder addPickup(Shipment shipment, TimeWindow pickupTimeWindow) {
          *             if specified shipment has not been picked up yet (i.e.
          *             method addPickup(shipment) has not been called yet).
          */
-        public Builder addDelivery(Shipment shipment) {
+        public Builder addDelivery(ShipmentJob shipment) {
             return addDelivery(shipment, shipment.getDeliveryActivity().getSingleTimeWindow());
         }
 
-        public Builder addDelivery(Shipment shipment, TimeWindow deliveryTimeWindow) {
+        public Builder addDelivery(ShipmentJob shipment, TimeWindow deliveryTimeWindow) {
             if (openShipments.contains(shipment)) {
                 TourActivity act = openActivities.get(shipment);
                 act.setTheoreticalEarliestOperationStartTime(deliveryTimeWindow.getStart());
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/AbstractActivity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/AbstractActivity.java
index 60ca868dd..c2281176a 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/AbstractActivity.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/AbstractActivity.java
@@ -6,8 +6,26 @@
 
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.SizeDimension;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
-
+import com.graphhopper.jsprit.core.problem.job.Job;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
+
+/**
+ * Abstract base class for all activities.
+ *
+ * <p>
+ * Activities are the atomic building blocks of a problem. Each activity has its
+ * type, location, duration (operation time), cargo change.
+ * </p>
+ * <p>
+ * There are internal activities, ones only the algorithm could create. These
+ * activities are marked by the {@linkplain InternalActivityMarker} marker
+ * interface. Activities may belong to a {@linkplain Job}, these activities are
+ * the descendants of the {@linkplain JobActivity} base class.
+ * </p>
+ *
+ * @author Balage
+ *
+ */
 public abstract class AbstractActivity implements TourActivity {
 
     private int index;
@@ -19,7 +37,16 @@
     protected String type;
     protected Location location;
 
-
+    /**
+     * Constructor.
+     *
+     * @param type
+     *            The type of the activity.
+     * @param location
+     *            The location of the activity.
+     * @param loadChange
+     *            The cargo change of the activity.
+     */
     public AbstractActivity(String type, Location location, SizeDimension loadChange) {
         super();
         this.loadChange = loadChange;
@@ -28,6 +55,15 @@ public AbstractActivity(String type, Location location, SizeDimension loadChange
     }
 
 
+    /**
+     * Copy constructor.
+     * <p>
+     * This makes a <b>shallow</b> copy of the <code>sourceActivity</code>.
+     * </p>
+     *
+     * @param sourceActivity
+     *            The activity to copy.
+     */
     public AbstractActivity(AbstractActivity sourceActivity) {
         arrTime = sourceActivity.getArrTime();
         endTime = sourceActivity.getEndTime();
@@ -111,9 +147,9 @@ public Location getLocation() {
     @Override
     public String toString() {
         return "[name=" + getName() + "][locationId=" + getLocation().getId()
-                        + "][size=" + getLoadChange().toString()
-                        + "][twStart=" + Activities.round(getTheoreticalEarliestOperationStartTime())
-                        + "][twEnd=" + Activities.round(getTheoreticalLatestOperationStartTime()) + "]";
+                + "][size=" + getLoadChange().toString()
+                + "][twStart=" + Activities.round(getTheoreticalEarliestOperationStartTime())
+                + "][twEnd=" + Activities.round(getTheoreticalLatestOperationStartTime()) + "]";
     }
 
 
@@ -125,17 +161,18 @@ public TourActivity duplicate() {
             Constructor<? extends AbstractActivity> constructor = getClass().getConstructor(getClass());
             return constructor.newInstance(this);
         } catch (NoSuchMethodException | SecurityException | InstantiationException | IllegalAccessException | IllegalArgumentException
-                        | InvocationTargetException e) {
+                | InvocationTargetException e) {
             System.out.println(this.getClass().getCanonicalName() + " : " + this);
             throw new IllegalStateException(e);
         }
     }
 
     // Temporal solution unto eliminated dependency on job type
+    // TODO: remove
     @Deprecated
     public static boolean isShipment(TourActivity activity) {
         return (activity instanceof JobActivity)
-                        && (((JobActivity) activity).getJob() instanceof Shipment);
+                && (((JobActivity) activity).getJob() instanceof ShipmentJob);
     }
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivity.java
index 6111c95b0..2e473b7a1 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivity.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivity.java
@@ -25,24 +25,44 @@
 import com.graphhopper.jsprit.core.problem.job.Break;
 import com.graphhopper.jsprit.core.problem.job.Break.Builder;
 
+/**
+ * An {@linkplain InternalJobActivity} marking the break time of the vehicle.
+ *
+ * @author Balage
+ *
+ */
 public class BreakActivity extends InternalJobActivity {
 
+    /**
+     * Creates a new Break activity instance.
+     *
+     * @param aBreak
+     *            The {@linkplain Break} job instance to associate the activity
+     *            with.
+     * @param builder
+     *            The Break job builder.
+     * @return The new break instance.
+     */
     public static BreakActivity newInstance(Break aBreak, Builder builder) {
         return new BreakActivity(aBreak, "break", builder.getLocation(), builder.getServiceTime(),
-                        builder.getCapacity(), builder.getTimeWindows().getTimeWindows());
+                builder.getCapacity(), builder.getTimeWindows().getTimeWindows());
     }
 
-    // protected BreakActivity(Break aBreak) {
-    // super(aBreak, "Break", aBreak.getLocation(), aBreak.getServiceDuration(),
-    // SizeDimension.createNullCapacity(aBreak.getSize()), aBreak.getTimeWindows());
-    // }
-
+    /**
+     * Copy constructor.
+     * <p>
+     * Makes a shallow copy.
+     * </p>
+     *
+     * @param breakActivity
+     *            The activity to copy.
+     */
     public BreakActivity(BreakActivity breakActivity) {
         super(breakActivity);
     }
 
     private BreakActivity(AbstractJob job, String name, Location location, double operationTime,
-                    SizeDimension capacity, Collection<TimeWindow> timeWindows) {
+            SizeDimension capacity, Collection<TimeWindow> timeWindows) {
         super(job, name, location, operationTime, capacity, timeWindows);
     }
 
@@ -67,31 +87,35 @@ public int hashCode() {
      */
     @Override
     public boolean equals(Object obj) {
-        if (this == obj) {
+        if (this == obj)
             return true;
-        }
-        if (obj == null) {
+        if (obj == null)
             return false;
-        }
-        if (getClass() != obj.getClass()) {
+        if (getClass() != obj.getClass())
             return false;
-        }
         BreakActivity other = (BreakActivity) obj;
         if (getJob() == null) {
-            if (other.getJob() != null) {
+            if (other.getJob() != null)
                 return false;
-            }
-        } else if (!getJob().equals(other.getJob())) {
+        } else if (!getJob().equals(other.getJob()))
             return false;
-        }
         return true;
     }
 
 
+    /**
+     * Sets the location of the break.
+     *
+     * @param location
+     *            The location.
+     */
     public void setLocation(Location breakLocation) {
         location = breakLocation;
     }
 
+    /**
+     * @return The time window of the break.
+     */
     public TimeWindow getTimeWindow() {
         // Break has always a single time window
         return getSingleTimeWindow();
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliveryActivity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliveryActivity.java
index 7441813e7..5f4e36dbb 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliveryActivity.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliveryActivity.java
@@ -24,15 +24,46 @@
 import com.graphhopper.jsprit.core.problem.SizeDimension.SizeDimensionSign;
 import com.graphhopper.jsprit.core.problem.job.AbstractJob;
 
+/**
+ * A {@linkplain JobActivity} representing a activity where something is
+ * delivered (unloaded from the vehicle).
+ *
+ * @author Balage
+ */
 public class DeliveryActivity extends JobActivity {
 
-
+    /**
+     * Constructor.
+     *
+     * @param job
+     *            The job the activity is part of.
+     * @param type
+     *            The type of the activity.
+     * @param location
+     *            The location of the activity.
+     * @param operationTime
+     *            The duration of the activity.
+     * @param capacity
+     *            The cargo change of the activity. If the value is positive, it
+     *            is negated.
+     * @param timeWindows
+     *            The time windows of the activity.
+     */
     public DeliveryActivity(AbstractJob job, String name, Location location,
-                    double operationTime, SizeDimension capacity, Collection<TimeWindow> timeWindows) {
+            double operationTime, SizeDimension capacity, Collection<TimeWindow> timeWindows) {
         super(job, name, location, operationTime, capacity.sign() == SizeDimensionSign.POSITIVE
-                        ? capacity.invert() : capacity, timeWindows);
+                ? capacity.invert() : capacity, timeWindows);
     }
 
+    /**
+     * Copy constructor.
+     * <p>
+     * This makes a <b>shallow</b> copy of the <code>sourceActivity</code>.
+     * </p>
+     *
+     * @param sourceActivity
+     *            The activity to copy.
+     */
     public DeliveryActivity(DeliveryActivity sourceActivity) {
         super(sourceActivity);
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/End.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/End.java
index e2ad63727..5d073d3cc 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/End.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/End.java
@@ -35,11 +35,29 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
+
 
+/**
+ * An {@linkplain InternalActivity} marking the end of a route.
+ *
+ * @author Balage
+ *
+ */
 public final class End extends InternalActivity {
 
+    /**
+     * Factory method to create a new End activity.
+     *
+     * @param locationId
+     *            The location id (depo) of the end of the route.
+     * @param theoreticalStart
+     *            The earliest possible start time of the activity.
+     * @param theoreticalEnd
+     *            The latest possible start time of the activity.
+     * @return The new {@linkplain End} instance.
+     */
     public static End newInstance(String locationId, double theoreticalStart, double theoreticalEnd) {
         Location loc = null;
         if (locationId != null) {
@@ -48,10 +66,28 @@ public static End newInstance(String locationId, double theoreticalStart, double
         return new End(loc, theoreticalStart, theoreticalEnd);
     }
 
+    /**
+     * Copies the the activity.
+     *
+     * @param start
+     *            The activity to copy.
+     * @return The shallow copy of the activity.
+     */
     public static End copyOf(End end) {
         return new End(end);
     }
 
+    /**
+     * Constructor.
+     *
+     * @param locationId
+     *            The location id (depo) of the end of the route.
+     * @param theoreticalStart
+     *            The earliest possible start time of the activity.
+     * @param theoreticalEnd
+     *            The latest possible start time of the activity.
+     * @return The new {@linkplain End} instance.
+     */
     public End(Location location, double theoreticalStart, double theoreticalEnd) {
         super("end", location, SizeDimension.EMPTY);
         setTheoreticalEarliestOperationStartTime(theoreticalStart);
@@ -60,10 +96,25 @@ public End(Location location, double theoreticalStart, double theoreticalEnd) {
         setIndex(-2);
     }
 
+    /**
+     * Copy constructor.
+     * <p>
+     * Makes a shallow copy.
+     * </p>
+     *
+     * @param end
+     *            The activity to copy.
+     */
     private End(End end) {
         super(end);
     }
 
+    /**
+     * Sets the end location.
+     *
+     * @param location
+     *            The location.
+     */
     public void setLocation(Location location) {
         this.location = location;
     }
@@ -76,89 +127,8 @@ public double getOperationTime() {
     @Override
     public String toString() {
         return "[type=" + getName() + "][location=" + location
-            + "][twStart=" + Activities.round(getTheoreticalEarliestOperationStartTime())
-            + "][twEnd=" + Activities.round(getTheoreticalLatestOperationStartTime()) + "]";
+                + "][twStart=" + Activities.round(getTheoreticalEarliestOperationStartTime())
+                + "][twEnd=" + Activities.round(getTheoreticalLatestOperationStartTime()) + "]";
     }
 
 }
-
-
-/*
- * package com.graphhopper.jsprit.core.problem.solution.route.activity;
- *
- * import com.graphhopper.jsprit.core.problem.SizeDimension; import com.graphhopper.jsprit.core.problem.AbstractActivityNEW;
- * import com.graphhopper.jsprit.core.problem.Location;
- *
- * public final class End extends AbstractActivityNEW {
- *
- * public static End newInstance(String locationId, double earliestArrival, double latestArrival) { return new
- * End(locationId, earliestArrival, latestArrival); }
- *
- * public static End copyOf(End end) { return new End(end); }
- *
- * private final static SizeDimension capacity = SizeDimension.Builder.newInstance().build();
- *
- *
- * private double endTime = -1;
- *
- *
- * private double theoretical_earliestOperationStartTime;
- *
- * private double theoretical_latestOperationStartTime;
- *
- * private double arrTime;
- *
- * private Location location;
- *
- * @Override public void setTheoreticalEarliestOperationStartTime(double theoreticalEarliestOperationStartTime) {
- * theoretical_earliestOperationStartTime = theoreticalEarliestOperationStartTime; }
- *
- * @Override public void setTheoreticalLatestOperationStartTime(double theoreticalLatestOperationStartTime) {
- * theoretical_latestOperationStartTime = theoreticalLatestOperationStartTime; }
- *
- * public End(Location location, double theoreticalStart, double theoreticalEnd) { super(); this.location = location;
- * theoretical_earliestOperationStartTime = theoreticalStart; theoretical_latestOperationStartTime = theoreticalEnd;
- * endTime = theoreticalEnd; setIndex(-2); }
- *
- * public End(String locationId, double theoreticalStart, double theoreticalEnd) { super(); if (locationId != null) {
- * location = Location.Builder.newInstance().setId(locationId).build(); } theoretical_earliestOperationStartTime =
- * theoreticalStart; theoretical_latestOperationStartTime = theoreticalEnd; endTime = theoreticalEnd; setIndex(-2); }
- *
- * public End(End end) { location = end.getLocation(); // this.locationId = end.getLocation().getId();
- * theoretical_earliestOperationStartTime = end.getTheoreticalEarliestOperationStartTime();
- * theoretical_latestOperationStartTime = end.getTheoreticalLatestOperationStartTime(); arrTime = end.getArrTime();
- * endTime = end.getEndTime(); setIndex(-2); }
- *
- * @Override public double getTheoreticalEarliestOperationStartTime() { return theoretical_earliestOperationStartTime; }
- *
- * @Override public double getTheoreticalLatestOperationStartTime() { return theoretical_latestOperationStartTime; }
- *
- * @Override public double getEndTime() { return endTime; }
- *
- * @Override public void setEndTime(double endTime) { this.endTime = endTime; }
- *
- * public void setLocation(Location location) { this.location = location; }
- *
- * @Override public Location getLocation() { return location; }
- *
- * @Override public double getOperationTime() { return 0.0; }
- *
- *
- * @Override public String toString() { return "[type=" + getName() + "][location=" + location + "][twStart=" +
- * Activities.round(theoretical_earliestOperationStartTime) + "][twEnd=" +
- * Activities.round(theoretical_latestOperationStartTime) + "]"; }
- *
- * @Override public String getName() { return "end"; }
- *
- * @Override public double getArrTime() { return arrTime; }
- *
- * @Override public void setArrTime(double arrTime) { this.arrTime = arrTime;
- *
- * }
- *
- * @Override public TourActivity duplicate() { return new End(this); }
- *
- * @Override public SizeDimension getSize() { return capacity; }
- *
- * }
- */
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ExchangeActivity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ExchangeActivity.java
index d9c0dae67..c0032d508 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ExchangeActivity.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ExchangeActivity.java
@@ -23,19 +23,77 @@
 import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.job.AbstractJob;
 
+/**
+ * A {@linkplain JobActivity} representing a activity where something is
+ * unloaded and something else is loaded at the same time. (For example, the
+ * cargo is loaded and the empty crates are picked up.) The size dimension may
+ * contain both positive and negative values.
+ *
+ * @author Balage
+ */
 public class ExchangeActivity extends JobActivity {
 
+    /**
+     * Constructor.
+     *
+     * @param job
+     *            The job the activity is part of.
+     * @param type
+     *            The type of the activity.
+     * @param location
+     *            The location of the activity.
+     * @param operationTime
+     *            The duration of the activity.
+     * @param capacity
+     *            The cargo change of the activity. It may contain both positive
+     *            and negative values.
+     * @param timeWindows
+     *            The time windows of the activity.
+     */
     public ExchangeActivity(AbstractJob job, String name, Location location,
-                    double operationTime, SizeDimension size, Collection<TimeWindow> timeWindows) {
+            double operationTime, SizeDimension size, Collection<TimeWindow> timeWindows) {
         super(job, name, location, operationTime, size, timeWindows);
     }
 
+    /**
+     * Constructor.
+     * <p>
+     * This calls the
+     * {@linkplain ExchangeActivity#ExchangeActivity(AbstractJob, String, Location, double, SizeDimension, Collection)}
+     * with the capacity value of
+     * <code>backhaulSize.subtract(deliverySize)</code>.
+     * </p>
+     *
+     * @param job
+     *            The job the activity is part of.
+     * @param type
+     *            The type of the activity.
+     * @param location
+     *            The location of the activity.
+     * @param operationTime
+     *            The duration of the activity.
+     * @param deliverySize
+     *            The unsigned (positive) size of the unloaded cargo.
+     * @param backhaulSize
+     *            The unsigned (positive) size of the picked up backhaul cargo.
+     * @param timeWindows
+     *            The time windows of the activity.
+     */
     public ExchangeActivity(AbstractJob job, String name, Location location,
-                    double operationTime, SizeDimension deliverySize, SizeDimension backhaulSize,
-                    Collection<TimeWindow> timeWindows) {
+            double operationTime, SizeDimension deliverySize, SizeDimension backhaulSize,
+            Collection<TimeWindow> timeWindows) {
         this(job, name, location, operationTime, backhaulSize.subtract(deliverySize), timeWindows);
     }
 
+    /**
+     * Copy constructor.
+     * <p>
+     * This makes a <b>shallow</b> copy of the <code>sourceActivity</code>.
+     * </p>
+     *
+     * @param sourceActivity
+     *            The activity to copy.
+     */
     public ExchangeActivity(ExchangeActivity sourceActivity) {
         super(sourceActivity);
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/InternalActivity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/InternalActivity.java
index 27c6a5f71..43d7b5e82 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/InternalActivity.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/InternalActivity.java
@@ -1,10 +1,10 @@
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 
 /**
- * Common ancesstor for non-job-based, internal activities
+ * Common ancestor for non-job-based, internal activities
  *
  * @author balage
  */
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/InternalJobActivity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/InternalJobActivity.java
index 5b06f9a82..96b59db38 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/InternalJobActivity.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/InternalJobActivity.java
@@ -1,20 +1,20 @@
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.SizeDimension;
+import java.util.Collection;
+
 import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.job.AbstractJob;
 
-import java.util.Collection;
-
 /**
- * Common ancesstor for job-based, internal activities
+ * Common ancestor for job-based, internal activities
  *
  * @author balage
  */
 public abstract class InternalJobActivity extends JobActivity implements InternalActivityMarker {
 
     public InternalJobActivity(AbstractJob job, String name, Location location,
-                               double operationTime, SizeDimension capacity, Collection<TimeWindow> timeWindows) {
+            double operationTime, SizeDimension capacity, Collection<TimeWindow> timeWindows) {
         super(job, name, location, operationTime, capacity, timeWindows);
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/JobActivity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/JobActivity.java
index 9d0b09d56..66f216cd0 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/JobActivity.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/JobActivity.java
@@ -9,12 +9,14 @@
 import com.graphhopper.jsprit.core.problem.job.Job;
 
 /**
- * Basic interface of job-activies.
+ * Basic interface of job-related activies.
  * <p>
- * <p>
- * A job activity is related to a {@link Job}.
+ * A job activity may have time windows, operation time and is related to a
+ * {@link Job}.
+ * </p>
  *
  * @author schroeder
+ * @author Balage
  */
 public abstract class JobActivity extends AbstractActivity {
 
@@ -26,14 +28,39 @@
 
     private int orderNumber;
 
+    /**
+     * Constructor.
+     *
+     * @param job
+     *            The job the activity is part of.
+     * @param type
+     *            The type of the activity.
+     * @param location
+     *            The location of the activity.
+     * @param operationTime
+     *            The duration of the activity.
+     * @param capacity
+     *            The cargo change of the activity.
+     * @param timeWindows
+     *            The time windows of the activity.
+     */
     public JobActivity(AbstractJob job, String type, Location location, double operationTime,
-                    SizeDimension capacity, Collection<TimeWindow> timeWindows) {
+            SizeDimension capacity, Collection<TimeWindow> timeWindows) {
         super(type, location, capacity);
         this.job = job;
         this.operationTime = operationTime;
         this.timeWindows = timeWindows;
     }
 
+    /**
+     * Copy constructor.
+     * <p>
+     * This makes a <b>shallow</b> copy of the <code>sourceActivity</code>.
+     * </p>
+     *
+     * @param sourceActivity
+     *            The activity to copy.
+     */
     protected JobActivity(JobActivity sourceActivity) {
         super(sourceActivity);
         job = sourceActivity.getJob();
@@ -46,6 +73,9 @@ protected JobActivity(JobActivity sourceActivity) {
         }
     }
 
+    /**
+     * @return The job the activity is associated with.
+     */
     public AbstractJob getJob() {
         return job;
     }
@@ -60,14 +90,23 @@ public String getName() {
         return job.getId() + "." + getType();
     }
 
+    /**
+     * @return The time windows.
+     */
     public Collection<TimeWindow> getTimeWindows() {
         return timeWindows;
     }
 
+    /**
+     * @return A single time window.
+     * @throws IllegalArgumentException
+     *             When more than one time window exists.
+     */
+    // TODO: Is it legacy code, should be removed later
+    @Deprecated
     public TimeWindow getSingleTimeWindow() {
-        if (timeWindows.size() > 1) {
+        if (timeWindows.size() > 1)
             throw new IllegalArgumentException("More than one time window in. " + this);
-        }
         return timeWindows.iterator().next();
     }
 
@@ -82,34 +121,39 @@ public int hashCode() {
 
     @Override
     public boolean equals(Object obj) {
-        if (this == obj) {
+        if (this == obj)
             return true;
-        }
-        if (obj == null) {
+        if (obj == null)
             return false;
-        }
-        if (getClass() != obj.getClass()) {
+        if (getClass() != obj.getClass())
             return false;
-        }
         JobActivity other = (JobActivity) obj;
         if (job == null) {
-            if (other.job != null) {
+            if (other.job != null)
                 return false;
-            }
-        } else if (!job.equals(other.job)) {
+        } else if (!job.equals(other.job))
             return false;
-        }
-        if (orderNumber != other.orderNumber) {
+        if (orderNumber != other.orderNumber)
             return false;
-        }
         return true;
     }
 
+    /**
+     * @return The order of the task within its job
+     */
     public int getOrderNumber() {
         return orderNumber;
     }
 
-    public void setOrderNumber(int orderNumber) {
+    /**
+     * Sets the order number of the activity within the job.
+     * <p>
+     * <b>Warning! This function is not part of the API.</b>
+     * </p>
+     *
+     * @param orderNumber
+     */
+    public void impl_setOrderNumber(int orderNumber) {
         this.orderNumber = orderNumber;
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivity.java
index ef4b0fe23..66b436b70 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivity.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivity.java
@@ -23,13 +23,44 @@
 import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.job.AbstractJob;
 
+/**
+ * A {@linkplain JobActivity} representing a activity where something is picked
+ * up (loaded to the vehicle).
+ *
+ * @author Balage
+ */
 public class PickupActivity extends JobActivity {
 
+    /**
+     * Constructor.
+     *
+     * @param job
+     *            The job the activity is part of.
+     * @param type
+     *            The type of the activity.
+     * @param location
+     *            The location of the activity.
+     * @param operationTime
+     *            The duration of the activity.
+     * @param capacity
+     *            The cargo change of the activity.
+     * @param timeWindows
+     *            The time windows of the activity.
+     */
     public PickupActivity(AbstractJob job, String name, Location location, double operationTime,
-                    SizeDimension capacity, Collection<TimeWindow> timeWindows) {
+            SizeDimension capacity, Collection<TimeWindow> timeWindows) {
         super(job, name, location, operationTime, capacity, timeWindows);
     }
 
+    /**
+     * Copy constructor.
+     * <p>
+     * This makes a <b>shallow</b> copy of the <code>sourceActivity</code>.
+     * </p>
+     *
+     * @param sourceActivity
+     *            The activity to copy.
+     */
     public PickupActivity(PickupActivity sourceActivity) {
         super(sourceActivity);
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivity.java
index 3fef91746..1a55b725c 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivity.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivity.java
@@ -23,16 +23,50 @@
 import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.job.AbstractJob;
 
+/**
+ * A {@linkplain JobActivity} representing a activity where something is served.
+ * Theoretically no cargo change is involved, although, for historical reason,
+ * the constructor allows to pass a capacity. When a non-empty capacity is
+ * passed the service acts as an {@linkplain ExchangeActivity}.
+ *
+ * @author Balage
+ */
 public class ServiceActivity extends JobActivity {
 
+    /**
+     * Constructor.
+     *
+     * @param job
+     *            The job the activity is part of.
+     * @param type
+     *            The type of the activity.
+     * @param location
+     *            The location of the activity.
+     * @param operationTime
+     *            The duration of the activity.
+     * @param capacity
+     *            The cargo change of the activity. It should be null or
+     *            {@linkplain SizeDimension#EMPTY}, although it is not enforced.
+     * @param timeWindows
+     *            The time windows of the activity.
+     */
     public ServiceActivity(AbstractJob job, String type, Location location, double operationTime,
-                    SizeDimension capacity, Collection<TimeWindow> timeWindows) {
+            SizeDimension capacity, Collection<TimeWindow> timeWindows) {
         super(job, type, location, operationTime, capacity, timeWindows);
     }
 
 
+    /**
+     * Copy constructor.
+     * <p>
+     * This makes a <b>shallow</b> copy of the <code>sourceActivity</code>.
+     * </p>
+     *
+     * @param sourceActivity
+     *            The activity to copy.
+     */
     public ServiceActivity(ServiceActivity sourceActivity) {
-        super(sourceActivity);
-    }
+         super(sourceActivity);
+     }
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/Start.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/Start.java
index 09e53e7fa..9f4049b83 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/Start.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/Start.java
@@ -17,11 +17,28 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 
+/**
+ * An {@linkplain InternalActivity} marking the start of a route.
+ *
+ * @author Balage
+ *
+ */
 public final class Start extends InternalActivity {
 
+    /**
+     * Factory method to create a new Start activity.
+     *
+     * @param locationId
+     *            The location id (depo) of the start of the route.
+     * @param theoreticalStart
+     *            The earliest possible start time of the activity.
+     * @param theoreticalEnd
+     *            The latest possible start time of the activity.
+     * @return The new {@linkplain Start} instance.
+     */
     public static Start newInstance(String locationId, double theoreticalStart, double theoreticalEnd) {
         Location loc = null;
         if (locationId != null) {
@@ -30,10 +47,27 @@ public static Start newInstance(String locationId, double theoreticalStart, doub
         return new Start(loc, theoreticalStart, theoreticalEnd);
     }
 
+    /**
+     * Copies the the activity.
+     *
+     * @param start
+     *            The activity to copy.
+     * @return The shallow copy of the activity.
+     */
     public static Start copyOf(Start start) {
         return new Start(start);
     }
 
+    /**
+     * Constructor.
+     *
+     * @param locationId
+     *            The location id (depo) of the start of the route.
+     * @param theoreticalStart
+     *            The earliest possible start time of the activity.
+     * @param theoreticalEnd
+     *            The latest possible start time of the activity.
+     */
     public Start(Location location, double theoreticalStart, double theoreticalEnd) {
         super("start", location, SizeDimension.EMPTY);
         setTheoreticalEarliestOperationStartTime(theoreticalStart);
@@ -42,10 +76,25 @@ public Start(Location location, double theoreticalStart, double theoreticalEnd)
         setIndex(-1);
     }
 
+    /**
+     * Copy constructor.
+     * <p>
+     * Makes a shallow copy.
+     * </p>
+     *
+     * @param start
+     *            The activity to copy.
+     */
     private Start(Start start) {
         super(start);
     }
 
+    /**
+     * Sets the start location.
+     * 
+     * @param location
+     *            The location.
+     */
     public void setLocation(Location location) {
         this.location = location;
     }
@@ -58,8 +107,8 @@ public double getOperationTime() {
     @Override
     public String toString() {
         return "[type=" + getName() + "][location=" + location
-            + "][twStart=" + Activities.round(getTheoreticalEarliestOperationStartTime())
-            + "][twEnd=" + Activities.round(getTheoreticalLatestOperationStartTime()) + "]";
+                + "][twStart=" + Activities.round(getTheoreticalEarliestOperationStartTime())
+                + "][twEnd=" + Activities.round(getTheoreticalLatestOperationStartTime()) + "]";
     }
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourShipmentActivityFactory.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourShipmentActivityFactory.java
index 340f77df3..cd61be836 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourShipmentActivityFactory.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourShipmentActivityFactory.java
@@ -17,12 +17,12 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 
 public interface TourShipmentActivityFactory {
 
-    public AbstractActivity createPickup(Shipment shipment);
+    public AbstractActivity createPickup(ShipmentJob shipment);
 
-    public AbstractActivity createDelivery(Shipment shipment);
+    public AbstractActivity createDelivery(ShipmentJob shipment);
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/AbstractPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/AbstractPrinterColumn.java
deleted file mode 100644
index 0a1c1eef7..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/AbstractPrinterColumn.java
+++ /dev/null
@@ -1,115 +0,0 @@
-package com.graphhopper.jsprit.core.reporting;
-
-import java.util.function.Consumer;
-
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition.Builder;
-
-/**
- * Abstract base class for column definitions.
- *
- * @author balage
- *
- * @param <C>
- *            The context the column works on
- * @param <T>
- *            The type of the data it emits
- * @param <A>
- *            The class itself (internal generic parameter: for inheritence and
- *            builder pattern)
- */
-public abstract class AbstractPrinterColumn<C extends PrinterContext, T, A extends AbstractPrinterColumn<C, T, A>> {
-
-    // Decorator is a post creation callback to alter the behaviour of the
-    // column definition.
-    private Consumer<ColumnDefinition.Builder> decorator;
-
-    private boolean isDefaultTitle = true;
-    private String title;
-
-    /**
-     * Constructor.
-     */
-    public AbstractPrinterColumn() {
-        this(null);
-    }
-
-    /**
-     * @param decorator
-     *            Decorator is a post creation callback to alter the behaviour
-     *            of the column definition.
-     */
-    public AbstractPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
-        super();
-        this.decorator = decorator;
-    }
-
-    /**
-     * Creates the column definition of the column.
-     *
-     * @return the decorated column definition.
-     */
-    public ColumnDefinition getColumnDefinition() {
-        Builder builder = getColumnBuilder().withTitle(getTitle());
-        if (decorator != null) {
-            decorator.accept(builder);
-        }
-        return builder.build();
-    }
-
-    /**
-     * @return A title of the column.
-     */
-    public String getTitle() {
-        return isDefaultTitle ? getDefaultTitle() : title;
-    }
-
-    /**
-     * @param title
-     *            the title of the column
-     * @return The object itself (fluent api)
-     */
-    @SuppressWarnings("unchecked")
-    public A withTitle(String title) {
-        this.title = title;
-        isDefaultTitle = false;
-        return (A) this;
-    }
-
-    /**
-     * Decorator is a post creation callback to alter the behaviour of the
-     * column definition.
-     *
-     * @param decorator
-     *            The decorator.
-     * @return The object itself (fluent api)
-     */
-    @SuppressWarnings("unchecked")
-    public A withDecorator(Consumer<ColumnDefinition.Builder> decorator) {
-        this.decorator = decorator;
-        return (A) this;
-    }
-
-    /**
-     * Returns the builder implementation of the corresponding column
-     * definition.
-     *
-     * @return The column definition builder.
-     */
-    protected abstract ColumnDefinition.Builder getColumnBuilder();
-
-    /**
-     * Extracts the data from the context.
-     *
-     * @param context
-     *            The context to process.
-     * @return The extracted data.
-     */
-    public abstract T getData(C context);
-
-    /**
-     * @return the default title
-     */
-    protected abstract String getDefaultTitle();
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/ColumnConfigBase.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/ColumnConfigBase.java
new file mode 100644
index 000000000..5da68d7cd
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/ColumnConfigBase.java
@@ -0,0 +1,79 @@
+package com.graphhopper.jsprit.core.reporting;
+
+import java.util.Collection;
+import java.util.stream.Collectors;
+
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
+
+public abstract class ColumnConfigBase {
+
+    private HumanReadableTimeFormatter timeFormatter;
+    private HumanReadableDurationFormatter durationFormatter;
+
+    public HumanReadableTimeFormatter getTimeFormatter() {
+        return timeFormatter;
+    }
+
+    protected void setTimeFormatter(HumanReadableTimeFormatter timeFormatter) {
+        this.timeFormatter = timeFormatter;
+    }
+
+    public HumanReadableDurationFormatter getDurationFormatter() {
+        return durationFormatter;
+    }
+
+    protected void setDurationFormatter(HumanReadableDurationFormatter durationFormatter) {
+        this.durationFormatter = durationFormatter;
+    }
+
+    protected String formatTimeWindowsNumeric(Collection<TimeWindow> timeWindows) {
+        if (timeWindows == null || timeWindows.isEmpty())
+            return "";
+        return timeWindows.stream().map(tw -> formatTimeWindowNumeric(tw))
+                .collect(Collectors.joining());
+    }
+
+    protected String formatTimeWindowsHuman(Collection<TimeWindow> timeWindows) {
+        if (timeWindows == null || timeWindows.isEmpty())
+            return "";
+        return timeWindows.stream().map(tw -> formatTimeWindowHuman(tw))
+                .collect(Collectors.joining());
+    }
+
+    protected String formatTimeWindowNumeric(TimeWindow tw) {
+        String res = "";
+        if (tw != null) {
+            res = "[" + (long) tw.getStart() + "-";
+            if (tw.getEnd() == Double.MAX_VALUE) {
+                res += "";
+            } else {
+                res += (long) tw.getEnd();
+            }
+            res += "]";
+        }
+        return res;
+    }
+
+    protected String formatTimeWindowHuman(TimeWindow tw) {
+        String res = "";
+        if (tw != null) {
+            res = "[" + timeFormatter.convert((long) tw.getStart()) + "-";
+            if (tw.getEnd() == Double.MAX_VALUE) {
+                res += "";
+            } else {
+                res += timeFormatter.convert((long) tw.getEnd());
+            }
+            res += "]";
+        }
+        return res;
+    }
+
+    protected String formatDurationHuman(Long data) {
+        return durationFormatter.convert(data);
+    }
+
+    protected String formatTimeHuman(Long data) {
+        return timeFormatter.convert(data);
+    }
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/ConfigurableTablePrinter.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/ConfigurableTablePrinter.java
deleted file mode 100644
index 949b6cb8f..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/ConfigurableTablePrinter.java
+++ /dev/null
@@ -1,486 +0,0 @@
-package com.graphhopper.jsprit.core.reporting;
-
-import java.io.IOException;
-import java.io.StringWriter;
-import java.nio.CharBuffer;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.List;
-import java.util.stream.Collectors;
-import java.util.stream.IntStream;
-
-import org.apache.commons.csv.CSVFormat;
-import org.apache.commons.csv.CSVPrinter;
-import org.apache.commons.csv.QuoteMode;
-
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnAlignment;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-
-
-/**
- * A text-base table formatter with extendible and configurable column set.
- *
- * @author balage
- * @param <C>
- *            The context the table formatter operates. When a new row of data
- *            is being added, this context is passed to all column definitions
- *            to create cell information.
- */
-public class ConfigurableTablePrinter<C extends PrinterContext> {
-
-    /**
-     * A row of the table.
-     *
-     * @author balage
-     *
-     */
-    public class TableRow {
-        private String row[] = new String[tableDef.size()];
-
-        // Used by add() function to determine the next column index.
-        private int lastIndex = 0;
-
-        /**
-         * Constructor.
-         */
-        public TableRow() {
-            super();
-            Arrays.fill(row, "");
-        }
-
-        /**
-         * Sets the value of a cell in the row.
-         *
-         * @param index
-         *            The index of the cell.
-         * @param data
-         *            The data to be formatted.
-         * @return The table row itself.
-         * @throws IndexOutOfBoundsException
-         *             When the index is not valid.
-         * @throws ClassCastException
-         *             When the column doesn't accept the data provided.
-         */
-        public TableRow set(int index, Object data) {
-            if (index < 0 || index >= row.length) {
-                throw new IndexOutOfBoundsException("Invalid index: " + index);
-            }
-            if (data != null) {
-                if (!tableDef.getColumns().get(index).getType().accepts(data)) {
-                    throw new ClassCastException("Cannot assign " + data.getClass().getSimpleName()
-                                    + " to " + tableDef.getColumns().get(index).getType().getClass()
-                                    .getSimpleName()
-                                    + "( index: " + index + ")");
-                }
-            }
-            String val = tableDef.getColumns().get(index).getType().convert(data);
-
-            row[index] = val;
-            return this;
-        }
-
-        /**
-         * Adds data for the next cell.
-         * <p>
-         * Note that calling the {@linkplain #set(int, Object)} doesn't alter
-         * the insertation point for this function.
-         * <p>
-         *
-         * @param data
-         *            The data to add.
-         * @return The table row itself (fluent api).
-         * @throws IndexOutOfBoundsException
-         *             When the index is not valid.
-         * @throws ClassCastException
-         *             When the column doesn't accept the data provided.
-         */
-        public TableRow add(Object data) {
-            return set(lastIndex++, data);
-        }
-
-        /**
-         * Adds data for the next cell.
-         * <p>
-         * Note that calling the {@linkplain #set(int, Object)} doesn't alter
-         * the insertation point for this function.
-         * <p>
-         *
-         * @param data
-         *            The data to add.
-         * @return The table row itself (fluent api).
-         * @throws IndexOutOfBoundsException
-         *             When the index is not valid.
-         * @throws ClassCastException
-         *             When the column doesn't accept the data provided.
-         */
-        public TableRow add(int data) {
-            return add(new Integer(data));
-        }
-
-        /**
-         * Adds data for the next cell.
-         * <p>
-         * Note that calling the {@linkplain #set(int, Object)} doesn't alter
-         * the insertation point for this function.
-         * <p>
-         *
-         * @param data
-         *            The data to add.
-         * @return The table row itself (fluent api).
-         * @throws IndexOutOfBoundsException
-         *             When the index is not valid.
-         * @throws ClassCastException
-         *             When the column doesn't accept the data provided.
-         */
-        public TableRow add(long data) {
-            return add(new Long(data));
-        }
-
-        /**
-         * Adds data for the next cell.
-         * <p>
-         * Note that calling the {@linkplain #set(int, Object)} doesn't alter
-         * the insertation point for this function.
-         * <p>
-         *
-         * @param data
-         *            The data to add.
-         * @return The table row itself (fluent api).
-         * @throws IndexOutOfBoundsException
-         *             When the index is not valid.
-         * @throws ClassCastException
-         *             When the column doesn't accept the data provided.
-         */
-        public TableRow add(double data) {
-            return add(new Double(data));
-        }
-
-        /**
-         * Adds data for the next cell.
-         * <p>
-         * Note that calling the {@linkplain #set(int, Object)} doesn't alter
-         * the insertation point for this function.
-         * <p>
-         *
-         * @param data
-         *            The data to add.
-         * @return The table row itself (fluent api).
-         * @throws IndexOutOfBoundsException
-         *             When the index is not valid.
-         * @throws ClassCastException
-         *             When the column doesn't accept the data provided.
-         */
-        public TableRow add(boolean data) {
-            return add(Boolean.valueOf(data));
-        }
-
-        /**
-         * Returns the value of a cell.
-         *
-         * @param index
-         *            The index of the cell.
-         * @return The string representation of the cell.
-         * @throws IndexOutOfBoundsException
-         *             When the index is not valid.
-         */
-        public String get(int index) {
-            if (index < 0 || index >= row.length) {
-                throw new IndexOutOfBoundsException("Invalid index: " + index);
-            }
-            return row[index];
-        }
-
-        /**
-         * @return Returns the unmodifiable data of the complete row.
-         */
-        public List<String> getAll() {
-            return Collections.unmodifiableList(Arrays.asList(row));
-        }
-    }
-
-    /**
-     * Marker row for in-table separator line.
-     *
-     * @author balage
-     */
-    private class Separator extends TableRow {
-    }
-
-    // The column list
-    private PrinterColumnList<C> columnList;
-    // The table definition
-    private DynamicTableDefinition tableDef;
-
-    // The rows of the table
-    List<TableRow> rows = new ArrayList<>();
-
-    /**
-     * Constructor.
-     *
-     * @param columnList
-     *            The list of the columns in the table.
-     */
-    public ConfigurableTablePrinter(PrinterColumnList<C> columnList) {
-        super();
-        this.columnList = columnList;
-        tableDef = columnList.getTableDefinition();
-    }
-
-    /**
-     * Adds and populates a row.
-     *
-     * @param context
-     *            The context to use for row cell population.
-     */
-    public void addRow(C context) {
-        TableRow row = new TableRow();
-        columnList.populateRow(row, context);
-        rows.add(row);
-    }
-
-    /**
-     * Adds an in-table separator line.
-     */
-    public void addSeparator() {
-        rows.add(new Separator());
-    }
-
-
-    /**
-     * Repeats <code>c</code> <code>w</code> times.
-     *
-     * @param c
-     *            The character to repeat.
-     * @param w
-     *            The number of occurencies to repeat.
-     * @return A <code>w</code> long string containing <code>c</code>
-     *         characters.
-     */
-    private String repeat(char c, int w) {
-        return CharBuffer.allocate(w).toString().replace('\0', c);
-    }
-
-    /**
-     * Prints the table into a string.
-     *
-     * @return The string representation of the table.
-     */
-    public String print() {
-        StringBuilder sb = new StringBuilder();
-        // Calculating width of each column
-        int[] colWidth = calculateWidthInfo();
-
-        // The total width of the table: the sum of column width, plus the
-        // padding two times for each column, plus the vertical lines (column
-        // count plus one times)
-        int totalWidth = colWidth.length * (tableDef.getPadding() * 2 + 1) + 1;
-        for (int w : colWidth) {
-            totalWidth += w;
-        }
-
-        // Caching draw characters and padding size (for cleaner code)
-        char corner = tableDef.getCorner();
-        char horizontal = tableDef.getHorizontal();
-        char vertical = tableDef.getVertical();
-        int padding = tableDef.getPadding();
-
-        // Padding string
-        String paddingChars = repeat(' ', padding);
-
-        // Build the line for the separator rows
-        StringBuilder sbSep = new StringBuilder();
-        sbSep.append(corner);
-        for (int w : colWidth) {
-            sbSep.append(repeat(horizontal, w + 2 * padding)).append(corner);
-        }
-        sbSep.append("\n");
-        String separatorLine = sbSep.toString();
-
-        // Printing heading if defined
-        if (tableDef.getHeading() != null) {
-            sb.append(corner).append(repeat(horizontal, totalWidth - 2)).append(corner)
-            .append("\n");
-            sb.append(vertical).append(paddingChars)
-            .append(ColumnAlignment.LEFT.align(tableDef.getHeading(),
-                            totalWidth - 2 * padding - 2))
-            .append(paddingChars)
-            .append(vertical)
-            .append("\n");
-        }
-
-        // Adding a separator line (either as the top line of the table or to
-        // separate heading)
-        sb.append(separatorLine);
-
-        // Printing header line
-        sb.append(vertical);
-        for (int i = 0; i < tableDef.size(); i++) {
-            ColumnDefinition cd = tableDef.getColumns().get(i);
-            sb.append(paddingChars).append(ColumnAlignment.LEFT.align(cd.getTitle(), colWidth[i]))
-            .append(paddingChars).append(vertical);
-        }
-        sb.append("\n");
-        sb.append(separatorLine);
-
-        for(TableRow row : rows) {
-            if (row instanceof ConfigurableTablePrinter.Separator) {
-                // Adding separator line
-                sb.append(separatorLine);
-            } else {
-                // Printing a line
-                sb.append(vertical);
-                for (int i = 0; i < tableDef.size(); i++) {
-                    ColumnDefinition cd = tableDef.getColumns().get(i);
-                    sb.append(paddingChars).append(cd.getAlignment().align(row.get(i), colWidth[i]))
-                    .append(paddingChars).append(vertical);
-                }
-                sb.append("\n");
-            }
-        }
-        // Closing the table
-        sb.append(separatorLine);
-
-        return sb.toString();
-    }
-
-    /**
-     * Calculates width of each column.
-     *
-     * @return The width info for the table.
-     */
-    private int[] calculateWidthInfo() {
-        int colWidth[] = new int[tableDef.size()];
-        // For each column
-        IntStream.range(0, tableDef.size()).forEach(i -> {
-            // Calculate maximum data width
-            int max = rows.stream()
-                            .filter(r -> r instanceof ConfigurableTablePrinter.TableRow)
-                            .map(r -> r.get(i))
-                            .filter(d -> d != null)
-                            .mapToInt(d -> d.length())
-                            .max().orElse(0);
-            ColumnDefinition colDef = tableDef.getColumns().get(i);
-            // The width will be the max data or title with, bounded by the min
-            // and/or max column width constraints.
-            colWidth[i] = Math.max(colDef.getTitle().length(),
-                            Math.max(colDef.getMinWidth(), Math.min(colDef.getMaxWidth(), max)));
-        });
-        return colWidth;
-    }
-
-    /**
-     * CSV export configuration.
-     *
-     * @author balage
-     *
-     */
-    public static class CsvConfig {
-        private char delimiter = ';';
-        private char quote = '\"';
-        private char escape = '\\';
-        private boolean printHeader = true;
-
-        /**
-         * @return the delimeter character (cell separator)
-         */
-        public char getDelimiter() {
-            return delimiter;
-        }
-
-        /**
-         * @param delimiter
-         *            the delimeter character (cell separator)
-         * @return The config itself (fluent api)
-         */
-        public CsvConfig withDelimiter(char delimiter) {
-            this.delimiter = delimiter;
-            return this;
-        }
-
-        /**
-         * @return the quote character
-         */
-        public char getQuote() {
-            return quote;
-        }
-
-        /**
-         * @param quote
-         *            the quote character
-         * @return The config itself (fluent api)
-         */
-        public CsvConfig withQuote(char quote) {
-            this.quote = quote;
-            return this;
-        }
-
-        /**
-         * @return the escape character
-         */
-        public char getEscape() {
-            return escape;
-        }
-
-        /**
-         * @param escape
-         *            the escape character
-         * @return The config itself (fluent api)
-         */
-        public CsvConfig withEscape(char escape) {
-            this.escape = escape;
-            return this;
-        }
-
-        /**
-         * @return whether to print header line
-         */
-        public boolean isPrintHeader() {
-            return printHeader;
-        }
-
-        /**
-         * @param printHeader
-         *            whether to print header line
-         * @return The config itself (fluent api)
-         */
-        public CsvConfig withPrintHeader(boolean printHeader) {
-            this.printHeader = printHeader;
-            return this;
-        }
-
-    }
-
-    /**
-     * Exports the data of the table into a CSV formatted string
-     *
-     * @param config
-     *            The configuration of the CSV formatting.
-     * @return The data in CSV format
-     */
-    public String exportToCsv(CsvConfig config) {
-        CSVFormat format = CSVFormat.DEFAULT
-                        .withDelimiter(config.delimiter)
-                        .withQuote(config.quote)
-                        .withQuoteMode(QuoteMode.NON_NUMERIC)
-                        .withEscape(config.escape);
-
-        StringWriter sw = new StringWriter();
-        try (CSVPrinter printer = new CSVPrinter(sw, format)) {
-            if (config.isPrintHeader()) {
-                printer.printRecord(columnList.getColumns().stream()
-                                .map(c -> c.getColumnDefinition().getTitle())
-                                .collect(Collectors.toList()));
-            }
-            for(TableRow r : rows) {
-                if (!(r instanceof ConfigurableTablePrinter.Separator)) {
-                    printer.printRecord(r.getAll());
-                }
-            }
-        } catch (IOException e) {
-            e.printStackTrace();
-        }
-        return sw.toString();
-    }
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/DynamicTableDefinition.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/DynamicTableDefinition.java
deleted file mode 100644
index 401fe2af3..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/DynamicTableDefinition.java
+++ /dev/null
@@ -1,179 +0,0 @@
-package com.graphhopper.jsprit.core.reporting;
-
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
-
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-
-/**
- * Table definition form dynamic table printers (both implementations)
- *
- * @author balage
- * @see {@linkplain DynamicTablePrinter}
- * @see {@linkplain ConfigurableTablePrinter}
- */
-public class DynamicTableDefinition {
-
-    /**
-     * Builder for the table definition.
-     *
-     * @author balage
-     */
-    public static class Builder {
-        private char corner = '+';
-        private char vertical = '|';
-        private char horizontal = '-';
-
-        private String heading = null;
-        private List<ColumnDefinition> columns = new ArrayList<>();
-
-        private int padding = 1;
-
-        /**
-         * @param corner
-         *            The corner (where vertical and horizontal lines meet)
-         *            character.
-         * @return the builder
-         */
-        public Builder withCorner(char corner) {
-            this.corner = corner;
-            return this;
-        }
-
-        /**
-         * @param vertical
-         *            The vertical line character.
-         * @return the builder
-         */
-        public Builder withVertical(char vertical) {
-            this.vertical = vertical;
-            return this;
-        }
-
-        /**
-         * @param horizontal
-         *            The horizontal line character.
-         * @return the builder
-         */
-        public Builder withHorizontal(char horizontal) {
-            this.horizontal = horizontal;
-            return this;
-        }
-
-        /**
-         * @param heading
-         *            The heading text of the table. If not defined or null
-         *            specified, no heading will be printed.
-         * @return the builder
-         */
-        public Builder withHeading(String heading) {
-            this.heading = heading;
-            return this;
-        }
-
-        /**
-         * Adds a column for the table definition.
-         *
-         * @param column
-         *            The column definition to add.
-         * @return the builder
-         */
-        public Builder addColumn(ColumnDefinition column) {
-            columns.add(column);
-            return this;
-        }
-
-        /**
-         * @param padding
-         *            The padding size of the table.
-         * @return the builder
-         */
-        public Builder withPadding(int padding) {
-            this.padding = Math.max(0, padding);
-            return this;
-        }
-
-        /**
-         * @return The imutable table definition object.
-         */
-        public DynamicTableDefinition build() {
-            return new DynamicTableDefinition(this);
-        }
-    }
-
-
-    private char corner = '+';
-    private char vertical = '|';
-    private char horizontal = '-';
-
-    private String heading = null;
-    private List<ColumnDefinition> columns = new ArrayList<>();
-
-    private int padding = 1;
-
-    /**
-     * Private constructor for builder.
-     *
-     * @param builder
-     *            the builder to initialize from.
-     */
-    private DynamicTableDefinition(Builder builder) {
-        corner = builder.corner;
-        vertical = builder.vertical;
-        horizontal = builder.horizontal;
-        heading = builder.heading;
-        columns = Collections.unmodifiableList(builder.columns);
-        padding = builder.padding;
-    }
-
-    /**
-     * @return the corner (where vertical and horizontal lines meet) character.
-     */
-    public char getCorner() {
-        return corner;
-    }
-
-    /**
-     * @return the character for vertical line
-     */
-    public char getVertical() {
-        return vertical;
-    }
-
-    /**
-     * @return the character for horizontal line
-     */
-    public char getHorizontal() {
-        return horizontal;
-    }
-
-    /**
-     * @return the heading text
-     */
-    public String getHeading() {
-        return heading;
-    }
-
-    /**
-     * @return the unmodifiable column list
-     */
-    public List<ColumnDefinition> getColumns() {
-        return Collections.unmodifiableList(columns);
-    }
-
-    /**
-     * @return the padding size
-     */
-    public int getPadding() {
-        return padding;
-    }
-
-    /**
-     * @return The number of columns.
-     */
-    public int size() {
-        return columns.size();
-    }
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/DynamicTablePrinter.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/DynamicTablePrinter.java
deleted file mode 100644
index bfa4a32d7..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/DynamicTablePrinter.java
+++ /dev/null
@@ -1,210 +0,0 @@
-package com.graphhopper.jsprit.core.reporting;
-
-import java.nio.CharBuffer;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-import java.util.stream.IntStream;
-
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnAlignment;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.columndefinition.DoubleColumnType;
-import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
-
-/**
- * @author balage
- */
-public class DynamicTablePrinter {
-
-    public class TableRow {
-        private String row[] = new String[tableDef.size()];
-        private int lastIndex = 0;
-
-        public TableRow() {
-            super();
-            Arrays.fill(row, "");
-        }
-
-        public TableRow set(int index, Object data) {
-            if (index < 0 || index >= row.length) {
-                throw new IndexOutOfBoundsException("Invalid index: " + index);
-            }
-            if (data != null) {
-                if (!tableDef.getColumns().get(index).getType().accepts(data)) {
-                    throw new ClassCastException("Cannot assign " + data.getClass().getSimpleName()
-                                    + " to " + tableDef.getColumns().get(index).getType().getClass()
-                                    .getSimpleName()
-                                    + "( index: " + index + ")");
-                }
-            }
-            String val = tableDef.getColumns().get(index).getType().convert(data);
-
-            row[index] = val;
-            return this;
-        }
-
-        public TableRow add(Object data) {
-            return set(lastIndex++, data);
-        }
-
-        public TableRow add(int data) {
-            return add(new Integer(data));
-        }
-
-        public TableRow add(long data) {
-            return add(new Long(data));
-        }
-
-        public TableRow add(double data) {
-            return add(new Double(data));
-        }
-
-        public TableRow add(boolean data) {
-            return add(Boolean.valueOf(data));
-        }
-
-        public String get(int index) {
-            if (index < 0 || index >= row.length) {
-                throw new IndexOutOfBoundsException("Invalid index: " + index);
-            }
-            return row[index];
-        }
-    }
-
-    private class Separator extends TableRow {
-    }
-
-    DynamicTableDefinition tableDef;
-
-    List<TableRow> rows = new ArrayList<>();
-
-    public DynamicTablePrinter(DynamicTableDefinition tableDef) {
-        this.tableDef = tableDef;
-    }
-
-    public TableRow addRow() {
-        TableRow row = new TableRow();
-        rows.add(row);
-        return row;
-    }
-
-    public void addSeparator() {
-        rows.add(new Separator());
-    }
-
-
-    private String repeat(char c, int w) {
-        return CharBuffer.allocate(w).toString().replace('\0', c);
-    }
-
-    public String print() {
-        StringBuilder sb = new StringBuilder();
-        int[] colWidth = calculateWidthInfo();
-        int totalWidth = colWidth.length * (tableDef.getPadding() * 2 + 1) + 1;
-        for (int w : colWidth) {
-            totalWidth += w;
-        }
-
-        char corner = tableDef.getCorner();
-        char horizontal = tableDef.getHorizontal();
-        char vertical = tableDef.getVertical();
-        int padding = tableDef.getPadding();
-
-        String paddingChars = repeat(' ', padding);
-
-        StringBuilder sbSep = new StringBuilder();
-        sbSep.append(corner);
-        for (int w : colWidth) {
-            sbSep.append(repeat(horizontal, w + 2 * padding)).append(corner);
-        }
-        sbSep.append("\n");
-        String separatorLine = sbSep.toString();
-
-        if (tableDef.getHeading() != null) {
-            sb.append(corner).append(repeat(horizontal, totalWidth - 2)).append(corner)
-            .append("\n");
-            sb.append(vertical).append(paddingChars)
-            .append(ColumnAlignment.LEFT.align(tableDef.getHeading(),
-                            totalWidth - 2 * padding - 2))
-            .append(paddingChars)
-            .append(vertical)
-            .append("\n");
-        }
-
-        sb.append(separatorLine);
-        sb.append(vertical);
-        for (int i = 0; i < tableDef.size(); i++) {
-            ColumnDefinition cd = tableDef.getColumns().get(i);
-            sb.append(paddingChars).append(ColumnAlignment.LEFT.align(cd.getTitle(), colWidth[i]))
-            .append(paddingChars).append(vertical);
-        }
-        sb.append("\n");
-        sb.append(separatorLine);
-
-        for(TableRow row : rows) {
-            if (row instanceof Separator) {
-                sb.append(separatorLine);
-            } else {
-                sb.append(vertical);
-                for (int i = 0; i < tableDef.size(); i++) {
-                    ColumnDefinition cd = tableDef.getColumns().get(i);
-                    sb.append(paddingChars).append(cd.getAlignment().align(row.get(i), colWidth[i]))
-                    .append(paddingChars).append(vertical);
-                }
-                sb.append("\n");
-            }
-        }
-        sb.append(separatorLine);
-
-        return sb.toString();
-    }
-
-    private int[] calculateWidthInfo() {
-        int colWidth[] = new int[tableDef.size()];
-        IntStream.range(0, tableDef.size()).forEach(i -> {
-            int max = rows.stream()
-                            .filter(r -> r instanceof TableRow)
-                            .map(r -> r.get(i))
-                            .filter(d -> d != null)
-                            .mapToInt(d -> d.length())
-                            .max().orElse(0);
-            ColumnDefinition colDef = tableDef.getColumns().get(i);
-            colWidth[i] = Math.max(colDef.getTitle().length(),
-                            Math.max(colDef.getMinWidth(), Math.min(colDef.getMaxWidth(), max)));
-        });
-        return colWidth;
-    }
-
-    public static void main(String[] args) {
-        DynamicTableDefinition td = new DynamicTableDefinition.Builder()
-                        // .withHeading("Test")
-                        .addColumn(new ColumnDefinition.Builder(new StringColumnType(), "string")
-                                        .build())
-                        .addColumn(new ColumnDefinition.Builder(new StringColumnType(),
-                                        "right-string")
-                                        .withAlignment(ColumnAlignment.CENTER).build())
-                        .addColumn(new ColumnDefinition.Builder(new DoubleColumnType(),
-                                        "double")
-                                        .withMinWidth(10)
-                                        .withAlignment(ColumnAlignment.RIGHT).build())
-                        .build();
-
-        DynamicTablePrinter p = new DynamicTablePrinter(td);
-
-        TableRow r;
-        r = p.addRow();
-        r.add("apple");
-        r.add("one");
-        r.add(Math.PI);
-        r = p.addRow();
-        r.add("banana");
-        r.add("two");
-        r.add(2d);
-        p.addSeparator();
-        r = p.addRow();
-        r.add("cherry");
-        r.add("four");
-
-        System.out.println(p.print());
-    }
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/HumanReadableDurationFormatter.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/HumanReadableDurationFormatter.java
new file mode 100644
index 000000000..7b99ac46f
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/HumanReadableDurationFormatter.java
@@ -0,0 +1,142 @@
+package com.graphhopper.jsprit.core.reporting;
+
+import java.time.format.DateTimeFormatter;
+import java.time.temporal.ChronoUnit;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Set;
+import java.util.stream.Collectors;
+
+import hu.vissy.texttable.dataconverter.DataConverter;
+
+/**
+ * Duration formatter for human readable format.
+ * <p>
+ * The formatter uses the {@linkplain DateTimeFormatter} for time value to
+ * string formatting. The default format is the standard ISO time format (
+ * <code>"HH:mm:ss"</code>). If the input long value is X, the time value is
+ * calculated by adding X of the units to a predefined origin. The default unit
+ * is {@linkplain ChronoUnit#SECONDS}.
+ * </p>
+ *
+ * @author balage
+ *
+ */
+public class HumanReadableDurationFormatter implements DataConverter<Long> {
+
+    private static class UnitInfo {
+        private ChronoUnit unit;
+        private int exchange;
+        private String format;
+        private String prefix;
+        private String postfix;
+
+        public UnitInfo(ChronoUnit unit, int exchange, String format, String prefix,
+                String postfix) {
+            super();
+            this.unit = unit;
+            this.exchange = exchange;
+            this.format = format;
+            this.prefix = prefix;
+            this.postfix = postfix;
+        }
+        public ChronoUnit getUnit() {
+            return unit;
+        }
+        public int getExchange() {
+            return exchange;
+        }
+        public String getFormat() {
+            return format;
+        }
+
+        public String getPrefix() {
+            return prefix;
+        }
+
+        public String getPostfix() {
+            return postfix;
+        }
+
+    }
+
+    private static final List<UnitInfo> UNIT_INFO;
+    private static final Set<ChronoUnit> VALID_UNITS;
+
+
+    static {
+        UNIT_INFO = new ArrayList<>();
+        UNIT_INFO.add(new UnitInfo(ChronoUnit.SECONDS, 60, "%02d", ":", ""));
+        UNIT_INFO.add(new UnitInfo(ChronoUnit.MINUTES, 60, "%02d", ":", ""));
+        UNIT_INFO.add(new UnitInfo(ChronoUnit.HOURS, 24, "%02d", " ", ""));
+        UNIT_INFO.add(new UnitInfo(ChronoUnit.DAYS, Integer.MAX_VALUE, "%d", "", " d"));
+
+        VALID_UNITS = UNIT_INFO.stream().map(ui -> ui.getUnit()).collect(Collectors.toSet());
+    }
+
+    // The time unit
+    private ChronoUnit lowUnit = ChronoUnit.SECONDS;
+    // The highest unit
+    private ChronoUnit highUnit = ChronoUnit.DAYS;
+
+    /**
+     * Constructor with default settings. See
+     * {@linkplain HumanReadableTimeFormatter} for default values.
+     */
+    public HumanReadableDurationFormatter() {
+    }
+
+
+    public HumanReadableDurationFormatter(ChronoUnit lowUnit, ChronoUnit highUnit) {
+        if (!VALID_UNITS.contains(lowUnit))
+            throw new IllegalArgumentException(
+                    lowUnit + " is not allowed. Only: " + VALID_UNITS + " units allowed.");
+        if (!VALID_UNITS.contains(highUnit))
+            throw new IllegalArgumentException(
+                    highUnit + " is not allowed. Only: " + VALID_UNITS + " units allowed.");
+        if (indexOf(lowUnit) > indexOf(highUnit))
+            throw new IllegalArgumentException(
+                    lowUnit + " should be not higher than " + highUnit + ".");
+        this.lowUnit = lowUnit;
+        this.highUnit = highUnit;
+    }
+
+    private int indexOf(ChronoUnit unit) {
+        for (int i = 0; i < UNIT_INFO.size(); i++)
+            if (UNIT_INFO.get(i).getUnit().equals(unit))
+                return i;
+        throw new IllegalArgumentException("Unit " + unit + " is not valid");
+    }
+
+    @Override
+    public String convert(Long data) {
+        if (data == null)
+            return "";
+        else {
+            long val = data;
+            String res = "";
+            int i = indexOf(lowUnit);
+            int highIndex = indexOf(highUnit);
+            while (i <= highIndex) {
+                String s = "";
+                UnitInfo unitInfo = UNIT_INFO.get(i);
+                if (val >= unitInfo.getExchange() && i == highIndex) {
+                    s = String.format("%d", val);
+                } else {
+                    s = String.format(unitInfo.getFormat(), val % unitInfo.exchange);
+                }
+                s = s + unitInfo.getPostfix();
+
+                if (i != highIndex) {
+                    s = unitInfo.getPrefix() + s;
+                }
+                res = s + res;
+                val = val / unitInfo.exchange;
+                i++;
+            }
+
+            return res;
+        }
+    }
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/HumanReadableTimeFormatter.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/HumanReadableTimeFormatter.java
similarity index 91%
rename from jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/HumanReadableTimeFormatter.java
rename to jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/HumanReadableTimeFormatter.java
index 122673a6a..0231f2387 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/HumanReadableTimeFormatter.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/HumanReadableTimeFormatter.java
@@ -1,4 +1,4 @@
-package com.graphhopper.jsprit.core.reporting.columndefinition;
+package com.graphhopper.jsprit.core.reporting;
 
 import java.time.LocalDate;
 import java.time.LocalDateTime;
@@ -6,6 +6,8 @@
 import java.time.format.DateTimeFormatter;
 import java.time.temporal.ChronoUnit;
 
+import hu.vissy.texttable.dataconverter.DataConverter;
+
 /**
  * Time value or duration formatter for human readable format.
  * <p>
@@ -21,7 +23,7 @@
  * @author balage
  *
  */
-public class HumanReadableTimeFormatter {
+public class HumanReadableTimeFormatter implements DataConverter<Long> {
 
     // Default origin
     public static final LocalDateTime DEFAULT_ORIGIN = LocalDateTime.of(LocalDate.now(), LocalTime.MIDNIGHT);
@@ -91,10 +93,11 @@ public HumanReadableTimeFormatter(DateTimeFormatter dateFormatter, LocalDateTime
      *            The value to convert.
      * @return The converted value.
      */
-    public String format(Long timeValue) {
-        if (timeValue == null) {
-            return null;
-        } else {
+    @Override
+    public String convert(Long timeValue) {
+        if (timeValue == null)
+            return "";
+        else {
             LocalDateTime dt = origin.plus(timeValue, unit);
             return dateFormatter.format(dt);
         }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/PrinterColumnList.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/PrinterColumnList.java
deleted file mode 100644
index 3644c7e1b..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/PrinterColumnList.java
+++ /dev/null
@@ -1,164 +0,0 @@
-package com.graphhopper.jsprit.core.reporting;
-
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
-import java.util.Optional;
-import java.util.stream.Collectors;
-
-import com.graphhopper.jsprit.core.reporting.ConfigurableTablePrinter.TableRow;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.Builder;
-
-/**
- * The list of the printer columns. This helps the user to construct, manage and
- * alter the column definitions. Also this function populates the
- * {@linkplain TableRow}.
- *
- * @author balage
- *
- * @param <C>
- *            The context the colums
- */
-public class PrinterColumnList<C extends PrinterContext> {
-
-    // The heading line
-    private String heading = null;
-
-    // The list of the columns
-    private List<AbstractPrinterColumn<C, ?, ?>> columns = new ArrayList<>();
-
-    /**
-     * The constructor to create a table without heading.
-     */
-    public PrinterColumnList() {
-        super();
-    }
-
-    /**
-     * Constructor to create with heading text.
-     *
-     * @param heading
-     *            The heading text.
-     */
-    public PrinterColumnList(String heading) {
-        super();
-        this.heading = heading;
-    }
-
-    /**
-     * Adds a column to the column list.
-     *
-     * @param column
-     *            The column to add.
-     * @return The object itself (fluent api)
-     */
-    public PrinterColumnList<C> addColumn(AbstractPrinterColumn<C, ?,?> column) {
-        if (findByTitle(column.getTitle()).isPresent()) {
-            throw new IllegalArgumentException("Name is duplicated: " + column.getTitle());
-        } else {
-            columns.add(column);
-        }
-        return this;
-    }
-
-    /**
-     * Removes a column.
-     * <p>
-     * Requires the exact column instance that was added- Use the
-     * {@linkplain #findByClass(Class)} or {@linkplain #findByTitle(String)}
-     * functions to get the instance.
-     * </p>
-     *
-     * @param column
-     *            the column to remove.
-     * @return true if the column was found and removed
-     */
-    public boolean removeColumn(AbstractPrinterColumn<C, ?, ?> column) {
-        boolean res = columns.contains(column);
-        if (res) {
-            columns.remove(column);
-        }
-        return res;
-    }
-
-    /**
-     * Builds the table definition from the column list and other parameters.
-     *
-     * @return the table definition
-     */
-    public DynamicTableDefinition getTableDefinition() {
-        Builder defBuilder = new DynamicTableDefinition.Builder();
-        columns.forEach(c -> defBuilder.addColumn(c.getColumnDefinition()));
-        defBuilder.withHeading(heading);
-        return defBuilder.build();
-    }
-
-    /**
-     * Populates a table row with the data extracted from the context and
-     * formatted by the column definition.
-     *
-     * @param row
-     *            The row to populate. The row must match the column definition.
-     * @param context
-     *            The context to work on
-     */
-    void populateRow(ConfigurableTablePrinter<C>.TableRow row, C context) {
-        columns.forEach(c -> row.add(c.getData(context)));
-    }
-
-    /**
-     * @return unmodifiable list of columns
-     */
-    public List<AbstractPrinterColumn<C, ?,?>> getColumns() {
-        return Collections.unmodifiableList(columns);
-    }
-
-    /**
-     * @return the heading text. Null means there will be no heading.
-     */
-    public String getHeading() {
-        return heading;
-    }
-
-    /**
-     * @param heading
-     *            The new heading text or null to remove heading.
-     * @return The object itself (fluent api)
-     */
-    public PrinterColumnList<C> withHeading(String heading) {
-        this.heading = heading;
-        return this;
-    }
-
-    /**
-     * Finds the columns with the type given.
-     * <p>
-     * A table could contain more columns of the same type, so this function
-     * returns all matching columns.
-     * </p>
-     * <p>
-     * Note that this function intentially uses
-     * <code>getClass().equals(clazz)</code> instead of <code>instanceof</code>,
-     * so only the exact matches are returned. Columns of inherited classes are
-     * not returned.
-     *
-     * @param clazz
-     *            The class to look for
-     * @return The list of all the columns with the type
-     */
-    public List<AbstractPrinterColumn<C, ?, ?>> findByClass(Class<? extends AbstractPrinterColumn<C, ?,?>> clazz) {
-        return columns.stream().filter(c -> c.getClass().equals(clazz)).collect(Collectors.toList());
-    }
-
-    /**
-     * Returns the column with the title.
-     * 
-     * @param title
-     *            The title to look for
-     * @return The column definition if there is any match
-     */
-    public Optional<AbstractPrinterColumn<C, ?, ?>> findByTitle(String title) {
-        return columns.stream().filter(c -> c.getTitle().equals(title)).findAny();
-    }
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/PrinterContext.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/PrinterContext.java
deleted file mode 100644
index 58521bd8b..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/PrinterContext.java
+++ /dev/null
@@ -1,10 +0,0 @@
-package com.graphhopper.jsprit.core.reporting;
-
-/**
- * Common marker interface of printer contexts
- *
- * @author balage
- *
- */
-public interface PrinterContext {
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/RouteDeatailsRecord.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/RouteDeatailsRecord.java
new file mode 100644
index 000000000..d43a10f42
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/RouteDeatailsRecord.java
@@ -0,0 +1,122 @@
+package com.graphhopper.jsprit.core.reporting;
+
+import com.graphhopper.jsprit.core.problem.SizeDimension;
+import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
+import com.graphhopper.jsprit.core.problem.job.AbstractJob;
+import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
+
+/**
+ * The context of the detailed route printer columns.
+ *
+ * <p>
+ * This is a imutable class.
+ * </p>
+ *
+ * @author balage
+ *
+ */
+public class RouteDeatailsRecord {
+
+    // The route itself
+    private VehicleRoute route;
+    // The current activity
+    private TourActivity activity;
+    // The problem
+    private VehicleRoutingProblem problem;
+
+    /**
+     * Constructor.
+     *
+     * @param routeNr
+     *            route id
+     * @param route
+     *            the route
+     * @param activity
+     *            current activity
+     * @param problem
+     *            problem
+     */
+    public RouteDeatailsRecord(VehicleRoute route, TourActivity activity,
+            VehicleRoutingProblem problem) {
+        super();
+        this.route = route;
+        this.activity = activity;
+        this.problem = problem;
+    }
+
+    /**
+     * @return The route itself.
+     */
+    public VehicleRoute getRoute() {
+        return route;
+    }
+
+    /**
+     * @return The current activity.
+     */
+    public TourActivity getActivity() {
+        return activity;
+    }
+
+    /**
+     * @return The problem.
+     */
+    public VehicleRoutingProblem getProblem() {
+        return problem;
+    }
+
+    public AbstractJob getJob() {
+        return (getActivity() instanceof JobActivity) ? ((JobActivity) getActivity()).getJob() : null;
+    }
+
+    public SizeDimension calculateInitialLoad() {
+        SizeDimension sd = SizeDimension.EMPTY;
+        for (TourActivity a : getRoute().getActivities()) {
+            sd = sd.add(a.getLoadChange());
+        }
+        sd = sd.getNegativeDimensions().abs();
+        return sd;
+    }
+
+    /**
+     * Returns the activity cost extracted from the context.
+     *
+     * @param context
+     *            The context.
+     * @return The activity cost.
+     */
+    double getActivityCost() {
+        return getProblem().getActivityCosts().getActivityCost(getActivity(),
+                getActivity().getArrTime(), getRoute().getDriver(), getRoute().getVehicle());
+    }
+
+    /**
+     * Returns the transport cost extracted from the
+     *
+     * @param context
+     *            The
+     * @return The transport cost.
+     */
+    double getTransportCost(TourActivity prevAct) {
+        return prevAct == null ? 0d
+                : getProblem().getTransportCosts().getTransportCost(prevAct.getLocation(),
+                        getActivity().getLocation(), getActivity().getArrTime(),
+                        getRoute().getDriver(), getRoute().getVehicle());
+    }
+
+    /**
+     * Returns the transport time extracted from the
+     *
+     * @param context
+     *            The
+     * @return The transpoert time.
+     */
+    double getTransportTime(TourActivity prevAct) {
+        return prevAct == null ? 0d
+                : getProblem().getTransportCosts().getTransportTime(prevAct.getLocation(),
+                        getActivity().getLocation(), getActivity().getArrTime(),
+                        getRoute().getDriver(), getRoute().getVehicle());
+    }
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/RouteDetailsConfig.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/RouteDetailsConfig.java
new file mode 100644
index 000000000..35baa8eae
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/RouteDetailsConfig.java
@@ -0,0 +1,596 @@
+package com.graphhopper.jsprit.core.reporting;
+
+import java.time.LocalDate;
+import java.time.LocalDateTime;
+import java.time.LocalTime;
+import java.time.temporal.ChronoUnit;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.List;
+import java.util.Optional;
+import java.util.function.Function;
+import java.util.stream.Collectors;
+import java.util.stream.IntStream;
+
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
+import com.graphhopper.jsprit.core.problem.job.AbstractJob;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.AbstractActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.End;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.Start;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
+
+import hu.vissy.texttable.column.ColumnDefinition;
+import hu.vissy.texttable.contentformatter.CellContentFormatter;
+import hu.vissy.texttable.dataconverter.DataConverter;
+import hu.vissy.texttable.dataconverter.NumberDataConverter;
+import hu.vissy.texttable.dataextractor.StatefulDataExtractor;
+
+
+public class RouteDetailsConfig extends ColumnConfigBase {
+
+    private static final String[] PRIORITY_NAMES = new String[] { "", /* 1 */ "highest",
+            /* 2 */ "very high", /* 3 */ "high", /* 4 */ "above medium", /* 5 */ "medium",
+            /* 6 */ "below medium", /* 7 */ "low", /* 8 */ "very low", /* 9 */ "extreme low",
+            /* 10 */ "lowest", };
+
+    private static class SizeDimensionAggregator {
+        SizeDimension size;
+    }
+
+    private static class PrevActivityHolder {
+        TourActivity prevAct;
+    }
+
+    private static class CostAggregator {
+        int cost;
+        TourActivity prevAct;
+    }
+
+    private static final DataConverter<SizeDimension> SIZE_DIMENSION_CONVERTER = sd -> {
+        if (sd != null)
+            return IntStream.range(0, sd.getNuOfDimensions()).mapToObj(i -> "" + sd.get(i))
+                    .collect(Collectors.joining(", ", "[", "]"));
+        else
+            return null;
+    };
+
+
+    public enum DisplayMode {
+        NUMERIC {
+            @Override
+            List<ColumnDefinition<RouteDeatailsRecord, ?, ?>> pickColumns(
+                    ColumnDefinition<RouteDeatailsRecord, ?, ?> numeric,
+                    ColumnDefinition<RouteDeatailsRecord, ?, ?> human) {
+                return Collections.singletonList(numeric);
+            }
+        },
+        HUMAN {
+            @Override
+            List<ColumnDefinition<RouteDeatailsRecord, ?, ?>> pickColumns(
+                    ColumnDefinition<RouteDeatailsRecord, ?, ?> numeric,
+                    ColumnDefinition<RouteDeatailsRecord, ?, ?> human) {
+                return Collections.singletonList(human);
+            }
+        },
+        BOTH {
+            @Override
+            List<ColumnDefinition<RouteDeatailsRecord, ?, ?>> pickColumns(
+                    ColumnDefinition<RouteDeatailsRecord, ?, ?> numeric,
+                    ColumnDefinition<RouteDeatailsRecord, ?, ?> human) {
+                List<ColumnDefinition<RouteDeatailsRecord, ?, ?>> res = new ArrayList<>();
+                res.add(numeric);
+                res.add(human);
+                return res;
+            }
+        };
+
+        abstract List<ColumnDefinition<RouteDeatailsRecord, ?, ?>> pickColumns(
+                ColumnDefinition<RouteDeatailsRecord, ?, ?> numeric,
+                ColumnDefinition<RouteDeatailsRecord, ?, ?> human);
+    }
+
+    public enum Column {
+        ROUTE_NUMBER {
+
+            @Override
+            public List<ColumnDefinition<RouteDeatailsRecord, ?, ?>> createColumns(
+                    RouteDetailsConfig routeDetailsConfig) {
+                return Collections.singletonList(
+                        new ColumnDefinition.StatelessBuilder<RouteDeatailsRecord, Integer>()
+                        .withTitle("route")
+                        .withDataExtractor(r -> r.getRoute().getId())
+                        .withCellContentFormatter(CellContentFormatter.rightAlignedCell())
+                        .withDataConverter(NumberDataConverter.defaultIntegerFormatter())
+                        .build());
+            }
+
+        },
+        VEHICLE_NAME {
+
+            @Override
+            public List<ColumnDefinition<RouteDeatailsRecord, ?, ?>> createColumns(
+                    RouteDetailsConfig routeDetailsConfig) {
+                return Collections.singletonList(
+                        new ColumnDefinition.StatelessBuilder<RouteDeatailsRecord, String>()
+                        .withTitle("vehicle")
+                        .withDataExtractor(r -> r.getRoute().getVehicle().getId()).build());
+            }
+
+        },
+        ACTIVITY_TYPE {
+
+            @Override
+            public List<ColumnDefinition<RouteDeatailsRecord, ?, ?>> createColumns(
+                    RouteDetailsConfig routeDetailsConfig) {
+                return Collections.singletonList(
+                        new ColumnDefinition.StatelessBuilder<RouteDeatailsRecord, String>()
+                        .withTitle("activity")
+                        .withDataExtractor(
+                                r -> ((AbstractActivity) r.getActivity()).getType())
+                        .build());
+            }
+
+        },
+        JOB_NAME {
+
+            @Override
+            public List<ColumnDefinition<RouteDeatailsRecord, ?, ?>> createColumns(
+                    RouteDetailsConfig routeDetailsConfig) {
+                return Collections.singletonList(
+                        new ColumnDefinition.StatelessBuilder<RouteDeatailsRecord, String>()
+                        .withTitle("job name").withDataExtractor(r -> {
+                            AbstractJob job = r.getJob();
+                            return job == null ? null : job.getId();
+                        })
+                        .build());
+            }
+
+        },
+        JOB_TYPE {
+
+            @Override
+            public List<ColumnDefinition<RouteDeatailsRecord, ?, ?>> createColumns(
+                    RouteDetailsConfig routeDetailsConfig) {
+                return Collections.singletonList(
+                        new ColumnDefinition.StatelessBuilder<RouteDeatailsRecord, String>()
+                        .withTitle("job type").withDataExtractor(r -> {
+                            AbstractJob job = r.getJob();
+                            return job == null ? null : job.getClass().getSimpleName();
+                        }).build());
+            }
+
+        },
+        JOB_PRIORITY {
+
+            @Override
+            public List<ColumnDefinition<RouteDeatailsRecord, ?, ?>> createColumns(
+                    RouteDetailsConfig routeDetailsConfig) {
+                Function<RouteDeatailsRecord, Integer> dataExtractorCallback = r -> {
+                    AbstractJob job = r.getJob();
+                    return job == null ? null : job.getPriority();
+                };
+                return routeDetailsConfig.displayMode.pickColumns(
+                        new ColumnDefinition.StatelessBuilder<RouteDeatailsRecord, Integer>()
+                        .withTitle("priority")
+                        .withCellContentFormatter(CellContentFormatter.centeredCell())
+                        .withDataExtractor(dataExtractorCallback)
+                        .build(),
+                        new ColumnDefinition.StatelessBuilder<RouteDeatailsRecord, Integer>()
+                        .withTitle("priority (HR)")
+                        .withCellContentFormatter(CellContentFormatter.centeredCell())
+                        .withDataConverter(data -> data == null ? ""
+                                : PRIORITY_NAMES[data] + "(" + data + ")")
+                        .withDataExtractor(dataExtractorCallback).build()
+                        );
+            }
+        },
+
+        LOCATION {
+
+            @Override
+            public List<ColumnDefinition<RouteDeatailsRecord, ?, ?>> createColumns(
+                    RouteDetailsConfig routeDetailsConfig) {
+                return Collections.singletonList(
+                        new ColumnDefinition.StatelessBuilder<RouteDeatailsRecord, String>()
+                        .withTitle("location").withDataExtractor(r -> {
+                            TourActivity act = r.getActivity();
+                            Location loc = act.getLocation();
+                            return loc == null ? null : loc.getId();
+                        }).build());
+            }
+
+        },
+        LOAD_CHANGE {
+
+            @Override
+            public List<ColumnDefinition<RouteDeatailsRecord, ?, ?>> createColumns(
+                    RouteDetailsConfig routeDetailsConfig) {
+                return Collections.singletonList(
+                        new ColumnDefinition.StatelessBuilder<RouteDeatailsRecord,SizeDimension>()
+                        .withTitle("load change")
+                        .withDataConverter(SIZE_DIMENSION_CONVERTER)
+                        .withDataExtractor(r -> {
+                            TourActivity act = r.getActivity();
+                            if (act instanceof Start)
+                                return r.calculateInitialLoad();
+                            else
+                                return act.getLoadChange();
+                        }).build());
+            }
+
+        },
+        ROUTE_LOAD {
+
+            @Override
+            public List<ColumnDefinition<RouteDeatailsRecord, ?, ?>> createColumns(
+                    RouteDetailsConfig routeDetailsConfig) {
+                return Collections.singletonList(
+                        new ColumnDefinition.StatefulBuilder<RouteDeatailsRecord, SizeDimensionAggregator, SizeDimension>()
+                        .withTitle("load").withDataConverter(SIZE_DIMENSION_CONVERTER)
+                        .withDataExtractor(new StatefulDataExtractor<>((r, s) -> {
+                            TourActivity act = r.getActivity();
+                            if (act instanceof Start) {
+                                s.size = r.calculateInitialLoad();
+                            } else {
+                                s.size = s.size.add(act.getLoadChange());
+                            }
+                            return s.size;
+                        }, SizeDimensionAggregator::new, (k, s) -> null)).build());
+            }
+
+        },
+
+        TIME_WINDOWS {
+
+            @Override
+            public List<ColumnDefinition<RouteDeatailsRecord, ?, ?>> createColumns(
+                    RouteDetailsConfig routeDetailsConfig) {
+                Function<RouteDeatailsRecord, Collection<TimeWindow>> dataExtractorCallback = r -> {
+                    TourActivity act = r.getActivity();
+                    if (act instanceof JobActivity)
+                        return ((JobActivity) act).getTimeWindows();
+                    else
+                        return null;
+                };
+                return routeDetailsConfig.displayMode.pickColumns(
+                        new ColumnDefinition.StatelessBuilder<RouteDeatailsRecord, Collection<TimeWindow>>()
+                        .withTitle("time windows").withDataConverter(
+                                tws -> routeDetailsConfig.formatTimeWindowsNumeric(tws))
+                        .withDataExtractor(dataExtractorCallback).build(),
+                        new ColumnDefinition.StatelessBuilder<RouteDeatailsRecord, Collection<TimeWindow>>()
+                        .withTitle("time windows (HR)").withDataConverter(
+                                tws -> routeDetailsConfig.formatTimeWindowsHuman(tws))
+                        .withDataExtractor(dataExtractorCallback).build()
+                        );
+            }
+
+        },
+
+        OPERATION_DURATION {
+            @Override
+            public List<ColumnDefinition<RouteDeatailsRecord, ?, ?>> createColumns(
+                    RouteDetailsConfig routeDetailsConfig) {
+                return createTimeColumns(routeDetailsConfig, "opTime",
+                        routeDetailsConfig.getDurationFormatter(), r -> {
+                            TourActivity act = r.getActivity();
+                            return (long) act.getOperationTime();
+                        });
+            }
+        },
+
+        TRAVEL_DURATION {
+            @Override
+            public List<ColumnDefinition<RouteDeatailsRecord, ?, ?>> createColumns(
+                    RouteDetailsConfig routeDetailsConfig) {
+                return createStatefulDurationColumns(routeDetailsConfig, "travel",
+                        new StatefulDataExtractor<RouteDeatailsRecord, PrevActivityHolder, Long>(
+                                (r, s) -> {
+                                    TourActivity act = r.getActivity();
+                                    if (act instanceof Start) {
+                                        s.prevAct = null;
+                                    }
+                                    long val = (long) (r
+                                            .getTransportTime(s.prevAct));
+                                    s.prevAct = act;
+                                    return val;
+                                }, PrevActivityHolder::new, (k, s) -> null));
+            }
+        },
+
+        WAITING {
+            @Override
+            public List<ColumnDefinition<RouteDeatailsRecord, ?, ?>> createColumns(
+                    RouteDetailsConfig routeDetailsConfig) {
+                return createTimeColumns(routeDetailsConfig, "waitng",
+                        routeDetailsConfig.getDurationFormatter(), (r) -> {
+                            TourActivity act = r.getActivity();
+                            if (act instanceof Start || act instanceof End)
+                                return null;
+                            else
+                                return (long) (act.getEndTime() - act.getOperationTime()
+                                        - act.getArrTime());
+                        });
+            }
+        },
+
+        ACTIVITY_DURATION {
+            @Override
+            public List<ColumnDefinition<RouteDeatailsRecord, ?, ?>> createColumns(
+                    RouteDetailsConfig routeDetailsConfig) {
+                return createStatefulDurationColumns(routeDetailsConfig, "duration",
+                        new StatefulDataExtractor<RouteDeatailsRecord, PrevActivityHolder, Long>(
+                                (r, s) -> {
+                                    TourActivity act = r.getActivity();
+                                    if (act instanceof Start) {
+                                        s.prevAct = null;
+                                    }
+                                    long val = (long) (r.getTransportTime(s.prevAct)
+                                            + act.getOperationTime());
+                                    s.prevAct = act;
+                                    return val;
+                                }, PrevActivityHolder::new, (k, s) -> null));
+            }
+        },
+
+        ARRIVAL_TIME {
+            @Override
+            public List<ColumnDefinition<RouteDeatailsRecord, ?, ?>> createColumns(
+                    RouteDetailsConfig routeDetailsConfig) {
+                return createTimeColumns(routeDetailsConfig, "arrival",
+                        routeDetailsConfig.getTimeFormatter(), r -> {
+                            TourActivity act = r.getActivity();
+                            if (act instanceof Start)
+                                return null;
+                            else
+                                return (long) act.getArrTime();
+                        });
+            }
+        },
+        START_TIME {
+            @Override
+            public List<ColumnDefinition<RouteDeatailsRecord, ?, ?>> createColumns(
+                    RouteDetailsConfig routeDetailsConfig) {
+                return createTimeColumns(routeDetailsConfig, "start",
+                        routeDetailsConfig.getTimeFormatter(), r -> {
+                            TourActivity act = r.getActivity();
+                            if (act instanceof End)
+                                return null;
+                            else
+                                return (long) (act.getEndTime() - act.getOperationTime());
+                        });
+            }
+        },
+        END_TIME {
+            @Override
+            public List<ColumnDefinition<RouteDeatailsRecord, ?, ?>> createColumns(
+                    RouteDetailsConfig routeDetailsConfig) {
+                return createTimeColumns(routeDetailsConfig, "end",
+                        routeDetailsConfig.getTimeFormatter(), r -> {
+                            TourActivity act = r.getActivity();
+                            if (act instanceof End)
+                                return null;
+                            else
+                                return (long) act.getEndTime();
+                        });
+            }
+        },
+
+        SELECTED_TIME_WINDOW {
+            @Override
+            public List<ColumnDefinition<RouteDeatailsRecord, ?, ?>> createColumns(
+                    RouteDetailsConfig routeDetailsConfig) {
+                Function<RouteDeatailsRecord, TimeWindow> dataExtractorCallback = r -> {
+                    TourActivity act = r.getActivity();
+                    if (act instanceof JobActivity) {
+                        Optional<TimeWindow> optTw = ((JobActivity) act)
+                                .getTimeWindows().stream()
+                                .filter(tw -> tw.contains(
+                                        act.getEndTime() - act.getOperationTime()))
+                                .findAny();
+                        if (optTw.isPresent())
+                            return optTw.get();
+                        else
+                            return null;
+                    } else
+                        return null;
+                };
+                return routeDetailsConfig.displayMode.pickColumns(
+                        new ColumnDefinition.StatelessBuilder<RouteDeatailsRecord, TimeWindow>()
+                        .withTitle("selected tw")
+                        .withDataConverter(
+                                tw -> routeDetailsConfig.formatTimeWindowNumeric(tw))
+                        .withDataExtractor(dataExtractorCallback).build(),
+                        new ColumnDefinition.StatelessBuilder<RouteDeatailsRecord, TimeWindow>()
+                        .withTitle("selected tw (HR)")
+                        .withDataConverter(
+                                tw -> routeDetailsConfig.formatTimeWindowHuman(tw))
+                        .withDataExtractor(dataExtractorCallback).build());
+            }
+        },
+
+        TRANSPORT_COST {
+            @Override
+            public List<ColumnDefinition<RouteDeatailsRecord, ?, ?>> createColumns(
+                    RouteDetailsConfig routeDetailsConfig) {
+                return createStatefulCostColumns(routeDetailsConfig, "transCost",
+                        new StatefulDataExtractor<RouteDeatailsRecord, PrevActivityHolder, Integer>(
+                                (r, s) -> {
+                                    TourActivity act = r.getActivity();
+                                    if (act instanceof Start) {
+                                        s.prevAct = null;
+                                    }
+                                    double res = r.getTransportCost(s.prevAct);
+                                    s.prevAct = act;
+                                    return (int) res;
+                                }, PrevActivityHolder::new, (k, s) -> null));
+            }
+        },
+
+
+        ACTIVITY_COST {
+            @Override
+            public List<ColumnDefinition<RouteDeatailsRecord, ?, ?>> createColumns(
+                    RouteDetailsConfig routeDetailsConfig) {
+                return Collections.singletonList(
+                        new ColumnDefinition.StatelessBuilder<RouteDeatailsRecord,Integer>()
+                        .withTitle("actCost")
+                        .withDataExtractor(r -> (int) r.getActivityCost()).build());
+            }
+        },
+
+        ROUTE_COST {
+            @Override
+            public List<ColumnDefinition<RouteDeatailsRecord, ?, ?>> createColumns(
+                    RouteDetailsConfig routeDetailsConfig) {
+                return Collections.singletonList(
+                        new ColumnDefinition.StatefulBuilder<RouteDeatailsRecord, CostAggregator, Integer>()
+                        .withTitle("routeCost")
+                        .withCellContentFormatter(CellContentFormatter.rightAlignedCell())
+                        .withDataExtractor(new StatefulDataExtractor<RouteDeatailsRecord, CostAggregator, Integer>(
+                                (r, s) -> {
+                                    TourActivity act = r.getActivity();
+                                    if (act instanceof Start) {
+                                        s.prevAct = null;
+                                        s.cost = 0;
+                                    }
+
+                                    Double trCost = r.getTransportCost(s.prevAct);
+                                    s.prevAct = act;
+                                    if (trCost != null) {
+                                        s.cost += trCost;
+                                    }
+                                    s.cost += r.getActivityCost();
+                                    return s.cost;
+                                }, CostAggregator::new, (k, s) -> null)
+                                ).build());
+            }
+        },
+        ;
+
+
+        public abstract List<ColumnDefinition<RouteDeatailsRecord, ?, ?>> createColumns(
+                RouteDetailsConfig routeDetailsConfig);
+
+        private static List<ColumnDefinition<RouteDeatailsRecord, ?, ?>> createTimeColumns(
+                RouteDetailsConfig routeDetailsConfig, String title, DataConverter<Long> converter,
+                Function<RouteDeatailsRecord, Long> getter) {
+            return routeDetailsConfig.displayMode.pickColumns(
+                    new ColumnDefinition.StatelessBuilder<RouteDeatailsRecord, Long>()
+                    .withTitle(title).withDataExtractor(getter)
+                    .withCellContentFormatter(CellContentFormatter.rightAlignedCell())
+                    .build(),
+                    new ColumnDefinition.StatelessBuilder<RouteDeatailsRecord, Long>()
+                    .withTitle(title + " (HR)")
+                    .withCellContentFormatter(CellContentFormatter.rightAlignedCell())
+                    .withDataConverter(converter)
+                    .withDataExtractor(getter).build());
+        }
+
+
+        private static List<ColumnDefinition<RouteDeatailsRecord, ?, ?>> createStatefulDurationColumns(
+                RouteDetailsConfig routeDetailsConfig, String title,
+                StatefulDataExtractor<RouteDeatailsRecord, PrevActivityHolder, Long> getter) {
+            return routeDetailsConfig.displayMode.pickColumns(
+                    new ColumnDefinition.StatefulBuilder<RouteDeatailsRecord, PrevActivityHolder, Long>()
+                    .withTitle(title)
+                    .withCellContentFormatter(CellContentFormatter.rightAlignedCell())
+                    .withDataExtractor(getter)
+                    .build(),
+                    new ColumnDefinition.StatefulBuilder<RouteDeatailsRecord, PrevActivityHolder, Long>()
+                    .withTitle(title+" (HR)")
+                    .withCellContentFormatter(CellContentFormatter.rightAlignedCell())
+                    .withDataConverter(dur -> routeDetailsConfig.formatDurationHuman(dur))
+                    .withDataExtractor(getter)
+                    .build());
+        }
+
+        private static List<ColumnDefinition<RouteDeatailsRecord, ?, ?>> createStatefulCostColumns(
+                RouteDetailsConfig routeDetailsConfig, String title,
+                StatefulDataExtractor<RouteDeatailsRecord, PrevActivityHolder, Integer> getter) {
+            return Collections.singletonList(
+                    new ColumnDefinition.StatefulBuilder<RouteDeatailsRecord, PrevActivityHolder, Integer>()
+                    .withTitle(title)
+                    .withCellContentFormatter(CellContentFormatter.rightAlignedCell())
+                    .withDataExtractor(getter).build());
+        }
+    }
+
+    public static class Builder {
+        private LocalDateTime humanReadableOrigin = LocalDateTime.of(LocalDate.now(),
+                LocalTime.MIDNIGHT);
+        private DisplayMode displayMode = DisplayMode.NUMERIC;
+        private List<Column> columns;
+        private ChronoUnit lowUnit = ChronoUnit.SECONDS;
+        private ChronoUnit highUnit = ChronoUnit.HOURS;
+
+        public Builder() {
+            this.columns = new ArrayList<>();
+
+        }
+
+        public Builder withHumanReadableOrigin(LocalDateTime humanReadableOrigin) {
+            this.humanReadableOrigin = humanReadableOrigin;
+            return this;
+        }
+
+        public Builder withTimeDisplayMode(DisplayMode displayMode) {
+            this.displayMode = displayMode;
+            return this;
+        }
+
+        public Builder withLowUnit(ChronoUnit lowUnit) {
+            this.lowUnit = lowUnit;
+            return this;
+        }
+
+        public Builder withHighUnit(ChronoUnit highUnit) {
+            this.highUnit = highUnit;
+            return this;
+        }
+
+        public Builder withColumn(Column columns) {
+            this.columns.add(columns);
+            return this;
+        }
+
+        public Builder withColumns(Column... columns) {
+            for (Column c : columns) {
+                withColumn(c);
+            }
+            return this;
+        }
+
+
+        public RouteDetailsConfig build() {
+            return new RouteDetailsConfig(this);
+        }
+    }
+
+    private DisplayMode displayMode;
+    private List<Column> columns;
+
+    private RouteDetailsConfig(Builder builder) {
+        this.displayMode = builder.displayMode;
+        this.columns = builder.columns;
+        setTimeFormatter(
+                new HumanReadableTimeFormatter(builder.humanReadableOrigin, builder.lowUnit));
+        setDurationFormatter(new HumanReadableDurationFormatter(builder.lowUnit, builder.highUnit));
+    }
+
+
+    public DisplayMode getDisplayMode() {
+        return displayMode;
+    }
+
+    public List<ColumnDefinition<RouteDeatailsRecord, ?, ?>> getColumns() {
+        List<ColumnDefinition<RouteDeatailsRecord, ?, ?>> columns = new ArrayList<>();
+        this.columns.forEach(c -> columns.addAll(c.createColumns(this)));
+        return columns;
+    }
+
+
+}
\ No newline at end of file
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java
index d76ee5006..ce57e0b32 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java
@@ -19,31 +19,18 @@
 
 import java.io.PrintWriter;
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
-import java.util.Map;
-import java.util.Map.Entry;
-import java.util.function.Function;
-import java.util.stream.Collectors;
 
-import com.graphhopper.jsprit.core.algorithm.objectivefunction.ComponentValue;
-import com.graphhopper.jsprit.core.algorithm.objectivefunction.RouteLevelComponentValue;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
+import com.graphhopper.jsprit.core.problem.job.Break;
 import com.graphhopper.jsprit.core.problem.job.Job;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-import com.graphhopper.jsprit.core.reporting.ConfigurableTablePrinter.CsvConfig;
-import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.Builder;
-import com.graphhopper.jsprit.core.reporting.DynamicTablePrinter.TableRow;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnAlignment;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.columndefinition.DoubleColumnType;
-import com.graphhopper.jsprit.core.reporting.columndefinition.SolutionPrintColumnLists;
-import com.graphhopper.jsprit.core.reporting.columndefinition.SolutionPrintColumnLists.PredefinedList;
-import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
-import com.graphhopper.jsprit.core.reporting.route.RoutePrinterContext;
-import com.graphhopper.jsprit.core.reporting.vehicle.VehicleSummaryContext;
 
 
 /**
@@ -69,6 +56,19 @@
         CONCISE, VERBOSE
     }
 
+    private static class Jobs {
+        int nServices;
+        int nShipments;
+        int nBreaks;
+
+        public Jobs(int nServices, int nShipments, int nBreaks) {
+            super();
+            this.nServices = nServices;
+            this.nShipments = nShipments;
+            this.nBreaks = nBreaks;
+        }
+    }
+
 
     /**
      * Prints costs and #vehicles to stdout (out.println).
@@ -102,329 +102,123 @@ public static void print(VehicleRoutingProblem problem, VehicleRoutingProblemSol
         SYSTEM_OUT_AS_PRINT_WRITER.flush();
     }
 
-    public static void print(PrintWriter out, VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution, Print print) {
-        print(out, problem, solution, print, SolutionPrintColumnLists.getNumeric(PredefinedList.DEFAULT));
-    }
-
-    public static void print(VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution,
-                    PrinterColumnList<RoutePrinterContext> verbosePrintColumns) {
-        print(SYSTEM_OUT_AS_PRINT_WRITER, problem, solution, verbosePrintColumns);
-        SYSTEM_OUT_AS_PRINT_WRITER.flush();
-    }
-
-    public static void print(PrintWriter out, VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution,
-                    PrinterColumnList<RoutePrinterContext> verbosePrintColumns) {
-        print(out, problem, solution, Print.VERBOSE, verbosePrintColumns);
-    }
-
     /**
      * Prints costs and #vehicles to the given writer
      *
      * @param out      the destination writer
      * @param solution the solution to be printed
      */
-    public static void print(PrintWriter out, VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution, Print print,
-                    PrinterColumnList<RoutePrinterContext> verbosePrintColumns) {
-
-        DynamicTableDefinition problemTableDef = new DynamicTableDefinition.Builder()
-                        .withHeading("Problem")
-                        .addColumn(new ColumnDefinition.Builder(new StringColumnType(), "indicator")
-                                        .build())
-                        .addColumn(new ColumnDefinition.Builder(new StringColumnType(), "value")
-                                        .build())
-                        .build();
-
-        DynamicTablePrinter problemTablePrinter = new DynamicTablePrinter(problemTableDef);
-        problemTablePrinter.addRow().add("fleetsize").add(problem.getFleetSize());
-        problemTablePrinter.addSeparator();
-        problemTablePrinter.addRow().add("noJobs").add(problem.getJobs().values().size());
-        for (Entry<Class<? extends Job>, Long> jc : getNuOfJobs(problem).entrySet()) {
-            problemTablePrinter.addRow().add("   " + jc.getKey().getSimpleName())
-            .add(jc.getValue());
-        }
-        out.println(problemTablePrinter.print());
-
-        DynamicTableDefinition solutionTableDef = new DynamicTableDefinition.Builder()
-                        .withHeading("Solution")
-                        .addColumn(new ColumnDefinition.Builder(new StringColumnType(), "indicator")
-                                        .build())
-                        .addColumn(new ColumnDefinition.Builder(new StringColumnType(), "value")
-                                        .build())
-                        .build();
-
-        DynamicTablePrinter solutionTablePrinter = new DynamicTablePrinter(solutionTableDef);
-        solutionTablePrinter.addRow().add("costs")
-        .add(String.format("%6.2f", solution.getCost()).trim());
-        solutionTablePrinter.addRow().add("noVehicles").add(solution.getRoutes().size());
-        solutionTablePrinter.addRow().add("unassgndJobs").add(solution.getUnassignedJobs().size());
-        out.println(solutionTablePrinter.print());
+    public static void print(PrintWriter out, VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution, Print print) {
+        String leftAlign = "| %-13s | %-8s | %n";
+
+        out.format("+--------------------------+%n");
+        out.printf("| problem                  |%n");
+        out.format("+---------------+----------+%n");
+        out.printf("| indicator     | value    |%n");
+        out.format("+---------------+----------+%n");
+
+        out.format(leftAlign, "noJobs", problem.getJobs().values().size());
+        Jobs jobs = getNuOfJobs(problem);
+        out.format(leftAlign, "noServices", jobs.nServices);
+        out.format(leftAlign, "noShipments", jobs.nShipments);
+        out.format(leftAlign, "noBreaks", jobs.nBreaks);
+        out.format(leftAlign, "fleetsize", problem.getFleetSize().toString());
+        out.format("+--------------------------+%n");
+
+
+        String leftAlignSolution = "| %-13s | %-40s | %n";
+        out.format("+----------------------------------------------------------+%n");
+        out.printf("| solution                                                 |%n");
+        out.format("+---------------+------------------------------------------+%n");
+        out.printf("| indicator     | value                                    |%n");
+        out.format("+---------------+------------------------------------------+%n");
+        out.format(leftAlignSolution, "costs", solution.getCost());
+        out.format(leftAlignSolution, "noVehicles", solution.getRoutes().size());
+        out.format(leftAlignSolution, "unassgndJobs", solution.getUnassignedJobs().size());
+        out.format("+----------------------------------------------------------+%n");
 
         if (print.equals(Print.VERBOSE)) {
-            printVerbose(out, problem, solution, verbosePrintColumns);
-        }
-    }
-
-
-    private static void printVerbose(PrintWriter out, VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution,
-                    PrinterColumnList<RoutePrinterContext> columns) {
-
-        ConfigurableTablePrinter<RoutePrinterContext> tablePrinter = buildRouteDetailsTable(problem, solution, columns);
-        out.println(tablePrinter.print());
-
-        if (!solution.getUnassignedJobs().isEmpty()) {
-            DynamicTableDefinition unassignedTableDef = new DynamicTableDefinition.Builder().withHeading("Unassigned jobs")
-                            .addColumn(new ColumnDefinition.Builder(new StringColumnType(), "id").withMinWidth(10).build())
-                            .addColumn(new ColumnDefinition.Builder(new StringColumnType(), "type").build()).build();
-
-            DynamicTablePrinter unassignedTablePrinter = new DynamicTablePrinter(unassignedTableDef);
-
-            for (Job j : solution.getUnassignedJobs()) {
-                unassignedTablePrinter.addRow().add(j.getId()).add(j.getClass().getSimpleName());
-            }
-            out.println(unassignedTablePrinter.print());
+            printVerbose(out, problem, solution);
         }
-
-    }
-
-    private static Map<Class<? extends Job>, Long> getNuOfJobs(VehicleRoutingProblem problem) {
-        return problem.getJobs().values().stream()
-                        .map(j -> (Class<? extends Job>) j.getClass())
-                        .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));
     }
 
-    // New print functions (TODO old ones should be migrated into these)
-
-    // ----------------------------------------------------------
-
-    /**
-     * Prints costs and #vehicles to the given writer
-     *
-     * @param out
-     *            the destination writer
-     * @param solution
-     *            the solution to be printed
-     * @return
-     */
-
-    public static void printSummary(VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution) {
-        printSummary(SYSTEM_OUT_AS_PRINT_WRITER, problem, solution);
-        SYSTEM_OUT_AS_PRINT_WRITER.flush();
-    }
-
-    public static void printSummary(PrintWriter out, VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution) {
-
-        DynamicTableDefinition problemTableDef = new DynamicTableDefinition.Builder()
-                        .withHeading("Problem")
-                        .addColumn(new ColumnDefinition.Builder(new StringColumnType(), "indicator")
-                                        .build())
-                        .addColumn(new ColumnDefinition.Builder(new StringColumnType(), "value")
-                                        .build())
-                        .build();
-
-        DynamicTablePrinter problemTablePrinter = new DynamicTablePrinter(problemTableDef);
-        problemTablePrinter.addRow().add("fleetsize").add(problem.getFleetSize());
-        problemTablePrinter.addRow().add("maxNoVehicles")
-        .add(problem.getFleetSize() == FleetSize.FINITE ? problem.getVehicles().size() : "unlimited");
-        problemTablePrinter.addSeparator();
-        problemTablePrinter.addRow().add("noJobs").add(problem.getJobs().values().size());
-        for (Entry<Class<? extends Job>, Long> jc : getNuOfJobs(problem).entrySet()) {
-            problemTablePrinter.addRow().add("   " + jc.getKey().getSimpleName())
-            .add(jc.getValue());
-        }
-        out.println(problemTablePrinter.print());
-
-        DynamicTableDefinition solutionTableDef = new DynamicTableDefinition.Builder()
-                        .withHeading("Solution")
-                        .addColumn(new ColumnDefinition.Builder(new StringColumnType(), "indicator")
-                                        .build())
-                        .addColumn(new ColumnDefinition.Builder(new StringColumnType(), "value")
-                                        .build())
-                        .build();
-
-        DynamicTablePrinter solutionTablePrinter = new DynamicTablePrinter(solutionTableDef);
-        solutionTablePrinter.addRow().add("costs")
-        .add(String.format("%6.2f", solution.getCost()).trim());
-        solutionTablePrinter.addRow().add("noVehicles").add(solution.getRoutes().size());
-        solutionTablePrinter.addRow().add("unassignedJobs").add(solution.getUnassignedJobs().size());
-        out.println(solutionTablePrinter.print());
-    }
-
-    // ----------------------------------------------------------
-
-    public static void printCostDetails(VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution) {
-        printCostDetails(SYSTEM_OUT_AS_PRINT_WRITER, problem, solution);
+    private static void printVerbose(VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution) {
+        printVerbose(SYSTEM_OUT_AS_PRINT_WRITER, problem, solution);
         SYSTEM_OUT_AS_PRINT_WRITER.flush();
     }
 
-    public static void printCostDetails(PrintWriter out, VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution) {
-        if (solution.getDetailedCost() == null) {
-            out.println("No detailed cost info available.");
-            return;
-        }
-
-        DynamicTableDefinition compomentTableDef = new DynamicTableDefinition.Builder()
-                        .withHeading("Cost components")
-                        .addColumn(new ColumnDefinition.Builder(new StringColumnType(), "component id")
-                                        .build())
-                        .addColumn(new ColumnDefinition.Builder(new DoubleColumnType(), "value")
-                                        .withAlignment(ColumnAlignment.RIGHT).build())
-                        .addColumn(new ColumnDefinition.Builder(new DoubleColumnType(), "weight")
-                                        .withAlignment(ColumnAlignment.RIGHT).build())
-                        .addColumn(new ColumnDefinition.Builder(new DoubleColumnType(), "weighted value")
-                                        .withAlignment(ColumnAlignment.RIGHT).build())
-                        .build();
-
-        DynamicTablePrinter componentTablePrinter = new DynamicTablePrinter(compomentTableDef);
-        for (ComponentValue cv : solution.getDetailedCost()) {
-            componentTablePrinter.addRow().add(cv.getKey()).add(cv.getValue()).add(cv.getWeight()).add(cv.getWeightedValue());
-        }
-        out.println(componentTablePrinter.print());
-
-        Builder routeLevelTableDefBuilder = new DynamicTableDefinition.Builder()
-                        .withHeading("Route level costs (weighted)")
-                        .addColumn(new ColumnDefinition.Builder(new StringColumnType(), "Route")
-                                        .build());
-        DynamicTableDefinition routeLevelTableDef = routeLevelTableDefBuilder.build();
-        for (ComponentValue cv : solution.getDetailedCost()) {
-            if (cv instanceof RouteLevelComponentValue) {
-                routeLevelTableDefBuilder.addColumn(new ColumnDefinition.Builder(new DoubleColumnType(), cv.getKey())
-                                .withAlignment(ColumnAlignment.RIGHT).build());
-            }
-        }
-        routeLevelTableDefBuilder.addColumn(new ColumnDefinition.Builder(new DoubleColumnType(), "Total").build());
+    private static void printVerbose(PrintWriter out, VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution) {
+        String leftAlgin = "| %-7s | %-20s | %-21s | %-15s | %-15s | %-15s | %-15s |%n";
+        out.format("+--------------------------------------------------------------------------------------------------------------------------------+%n");
+        out.printf("| detailed solution                                                                                                              |%n");
+        out.format("+---------+----------------------+-----------------------+-----------------+-----------------+-----------------+-----------------+%n");
+        out.printf("| route   | vehicle              | activity              | job             | arrTime         | endTime         | costs           |%n");
+        int routeNu = 1;
 
-        DynamicTablePrinter routeLevelTablePrinter = new DynamicTablePrinter(routeLevelTableDef);
-        TableRow row;
-        // row = routeLevelTablePrinter.addRow().add("Weight");
-        // for (ComponentValue cv : solution.getDetailedCost()) {
-        // if (cv instanceof RouteLevelComponentValue) {
-        // row.add(cv.getWeight());
-        // }
-        // }
-        // routeLevelTablePrinter.addSeparator();
-
-        for (VehicleRoute r : solution.getRoutes()) {
-            row = routeLevelTablePrinter.addRow().add(r.getId());
-            double sum = 0d;
-            for (ComponentValue cv : solution.getDetailedCost()) {
-                if (cv instanceof RouteLevelComponentValue) {
-                    Double val = ((RouteLevelComponentValue) cv).getRouteValue(r.getId()).orElse(null);
-                    if (val != null) {
-                        val *= cv.getWeight();
-                    }
-                    sum += val;
-                    row.add(val);
-                }
-            }
-            row.add(sum);
-        }
-        routeLevelTablePrinter.addSeparator();
-        row = routeLevelTablePrinter.addRow().add("Total");
-        double sum = 0d;
-        for (ComponentValue cv : solution.getDetailedCost()) {
-            if (cv instanceof RouteLevelComponentValue) {
-                Double val = ((RouteLevelComponentValue) cv).getValue();
-                if (val != null) {
-                    val *= cv.getWeight();
+        List<VehicleRoute> list = new ArrayList<>(solution.getRoutes());
+        Collections.sort(list , new com.graphhopper.jsprit.core.util.VehicleIndexComparator());
+        for (VehicleRoute route : list) {
+            out.format("+---------+----------------------+-----------------------+-----------------+-----------------+-----------------+-----------------+%n");
+            double costs = 0;
+            out.format(leftAlgin, routeNu, getVehicleString(route), route.getStart().getName(), "-", "undef", Math.round(route.getStart().getEndTime()),
+                    Math.round(costs));
+            TourActivity prevAct = route.getStart();
+            for (TourActivity act : route.getActivities()) {
+                String jobId;
+                if (act instanceof JobActivity) {
+                    jobId = ((JobActivity) act).getJob().getId();
+                } else {
+                    jobId = "-";
                 }
-                sum += val;
-                row.add(val);
+                double c = problem.getTransportCosts().getTransportCost(prevAct.getLocation(), act.getLocation(), prevAct.getEndTime(), route.getDriver(),
+                        route.getVehicle());
+                c += problem.getActivityCosts().getActivityCost(act, act.getArrTime(), route.getDriver(), route.getVehicle());
+                costs += c;
+                out.format(leftAlgin, routeNu, getVehicleString(route), act.getName(), jobId, Math.round(act.getArrTime()),
+                        Math.round(act.getEndTime()), Math.round(costs));
+                prevAct = act;
             }
+            double c = problem.getTransportCosts().getTransportCost(prevAct.getLocation(), route.getEnd().getLocation(), prevAct.getEndTime(),
+                    route.getDriver(), route.getVehicle());
+            c += problem.getActivityCosts().getActivityCost(route.getEnd(), route.getEnd().getArrTime(), route.getDriver(), route.getVehicle());
+            costs += c;
+            out.format(leftAlgin, routeNu, getVehicleString(route), route.getEnd().getName(), "-", Math.round(route.getEnd().getArrTime()), "undef",
+                    Math.round(costs));
+            routeNu++;
         }
-        row.add(sum);
-
-        out.println(routeLevelTablePrinter.print());
-    }
-
-    // ----------------------------------------------------------
-
-    public static void printRouteDetails(VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution,
-                    PrinterColumnList<RoutePrinterContext> columns) {
-        printRouteDetails(SYSTEM_OUT_AS_PRINT_WRITER, problem, solution, columns);
-        SYSTEM_OUT_AS_PRINT_WRITER.flush();
-    }
-
-    public static void printRouteDetails(PrintWriter out, VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution,
-                    PrinterColumnList<RoutePrinterContext> columns) {
-
-        ConfigurableTablePrinter<RoutePrinterContext> tablePrinter = buildRouteDetailsTable(problem, solution, columns);
-        out.println(tablePrinter.print());
-
+        out.format("+--------------------------------------------------------------------------------------------------------------------------------+%n");
         if (!solution.getUnassignedJobs().isEmpty()) {
-            DynamicTableDefinition unassignedTableDef = new DynamicTableDefinition.Builder().withHeading("Unassigned jobs")
-                            .addColumn(new ColumnDefinition.Builder(new StringColumnType(), "id").withMinWidth(10).build())
-                            .addColumn(new ColumnDefinition.Builder(new StringColumnType(), "type").build()).build();
-
-            DynamicTablePrinter unassignedTablePrinter = new DynamicTablePrinter(unassignedTableDef);
-
+            out.format("+----------------+%n");
+            out.format("| unassignedJobs |%n");
+            out.format("+----------------+%n");
+            String unassignedJobAlgin = "| %-14s |%n";
             for (Job j : solution.getUnassignedJobs()) {
-                unassignedTablePrinter.addRow().add(j.getId()).add(j.getClass().getSimpleName());
+                out.format(unassignedJobAlgin, j.getId());
             }
-            out.println(unassignedTablePrinter.print());
+            out.format("+----------------+%n");
         }
     }
 
-    protected static ConfigurableTablePrinter<RoutePrinterContext> buildRouteDetailsTable(VehicleRoutingProblem problem,
-                    VehicleRoutingProblemSolution solution, PrinterColumnList<RoutePrinterContext> columns) {
-        ConfigurableTablePrinter<RoutePrinterContext> tablePrinter = new ConfigurableTablePrinter<>(columns);
+    private static String getVehicleString(VehicleRoute route) {
+        return route.getVehicle().getId();
+    }
 
-        List<VehicleRoute> list = new ArrayList<>(solution.getRoutes());
-        for (VehicleRoute route : list) {
-            if (route.getId() != 1) {
-                tablePrinter.addSeparator();
+    private static Jobs getNuOfJobs(VehicleRoutingProblem problem) {
+        int nShipments = 0;
+        int nServices = 0;
+        int nBreaks = 0;
+        for (Job j : problem.getJobs().values()) {
+            if (j instanceof ShipmentJob) {
+                nShipments++;
             }
-
-            RoutePrinterContext context = new RoutePrinterContext(route, route.getStart(), problem);
-            tablePrinter.addRow(context);
-
-            for (TourActivity act : route.getActivities()) {
-                context.setActivity(act);
-                tablePrinter.addRow(context);
+            if (j instanceof ServiceJob) {
+                nServices++;
+            }
+            if (j instanceof Break) {
+                nBreaks++;
             }
-
-            context.setActivity(route.getEnd());
-            tablePrinter.addRow(context);
-        }
-        return tablePrinter;
-    }
-
-    public static String exportRouteDetails(VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution,
-                    PrinterColumnList<RoutePrinterContext> columns, CsvConfig csvConfig) {
-        ConfigurableTablePrinter<RoutePrinterContext> table = buildRouteDetailsTable(problem, solution, columns);
-        return table.exportToCsv(csvConfig);
-    }
-
-    // ----------------------------------------------------------
-
-    public static void printVehicleSummary(VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution,
-                    PrinterColumnList<VehicleSummaryContext> columns) {
-        printVehicleSummary(SYSTEM_OUT_AS_PRINT_WRITER, problem, solution, columns);
-        SYSTEM_OUT_AS_PRINT_WRITER.flush();
-    }
-
-    public static void printVehicleSummary(PrintWriter out, VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution,
-                    PrinterColumnList<VehicleSummaryContext> columns) {
-
-        ConfigurableTablePrinter<VehicleSummaryContext> vehicleTablePrinter = buildVehicleSummaryTable(problem, solution, columns);
-        out.println(vehicleTablePrinter.print());
-    }
-
-    public static String exportVehicleSummary(VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution,
-                    PrinterColumnList<VehicleSummaryContext> columns, CsvConfig csvConfig) {
-        ConfigurableTablePrinter<VehicleSummaryContext> table = buildVehicleSummaryTable(problem, solution, columns);
-        return table.exportToCsv(csvConfig);
-    }
-
-    protected static ConfigurableTablePrinter<VehicleSummaryContext> buildVehicleSummaryTable(VehicleRoutingProblem problem,
-                    VehicleRoutingProblemSolution solution, PrinterColumnList<VehicleSummaryContext> columns) {
-        ConfigurableTablePrinter<VehicleSummaryContext> vehicleTablePrinter = new ConfigurableTablePrinter<>(columns);
-
-        List<VehicleRoute> list = solution.getRoutes();
-        for (VehicleRoute route : list) {
-            vehicleTablePrinter.addRow(new VehicleSummaryContext(route, problem));
         }
-        return vehicleTablePrinter;
+        return new Jobs(nServices, nShipments, nBreaks);
     }
 
-
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter2.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter2.java
new file mode 100644
index 000000000..59616f586
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter2.java
@@ -0,0 +1,249 @@
+package com.graphhopper.jsprit.core.reporting;
+
+import java.io.PrintWriter;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
+import java.util.function.Function;
+import java.util.stream.Collectors;
+
+import com.graphhopper.jsprit.core.algorithm.objectivefunction.ComponentValue;
+import com.graphhopper.jsprit.core.algorithm.objectivefunction.RouteLevelComponentValue;
+import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
+import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
+import com.graphhopper.jsprit.core.problem.job.Job;
+import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
+import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
+import com.graphhopper.jsprit.core.reporting.RouteDetailsConfig.Column;
+import com.graphhopper.jsprit.core.reporting.RouteDetailsConfig.DisplayMode;
+
+import hu.vissy.texttable.BorderFormatter;
+import hu.vissy.texttable.BorderFormatter.DefaultFormatters;
+import hu.vissy.texttable.TableFormatter;
+import hu.vissy.texttable.TableFormatter.Builder;
+import hu.vissy.texttable.column.ColumnDefinition;
+import hu.vissy.texttable.contentformatter.CellContentFormatter;
+import hu.vissy.texttable.dataconverter.NumberDataConverter;
+import hu.vissy.texttable.dataextractor.StatefulDataExtractor;
+
+
+public class SolutionPrinter2 {
+
+    private static class Entry {
+        String key;
+        String value;
+
+        public Entry(String key, Object value) {
+            super();
+            this.key = key;
+            this.value = "" + value;
+        }
+
+        public String getKey() {
+            return key;
+        }
+
+        public String getValue() {
+            return value;
+        }
+    }
+
+    private static class Aggregator {
+        double sum;
+    }
+
+    // Wrapping System.out into a PrintWriter
+    private static final PrintWriter SYSTEM_OUT_AS_PRINT_WRITER = new PrintWriter(System.out);
+
+    public static void print(VehicleRoutingProblem problem,
+            VehicleRoutingProblemSolution solution) {
+        print(SYSTEM_OUT_AS_PRINT_WRITER, problem, solution);
+    }
+
+    public static void print(PrintWriter out, VehicleRoutingProblem problem,
+            VehicleRoutingProblemSolution solution) {
+        printProblemTable(out, problem);
+        printSolutionSummary(out, solution);
+        printCostDetails(out, solution);
+        printRouteDetails(out, problem, solution);
+        printVehicleSummary(out, problem, solution);
+        out.flush();
+    }
+
+
+
+    private static void printProblemTable(PrintWriter out, VehicleRoutingProblem problem) {
+        TableFormatter<Entry> problemTableDef = createKeyValueTable("Problem");
+
+        List<Entry> data = new ArrayList<>();
+        data.add(new Entry("fleetsize", problem.getFleetSize()));
+        data.add(new Entry("maxNoVehicles", problem.getFleetSize() == FleetSize.FINITE
+                ? problem.getVehicles().size() : "unlimited"));
+        data.add(null);
+        data.add(new Entry("noJobs", problem.getJobs().values().size()));
+        for (Map.Entry<Class<? extends Job>, Long> jc : getNuOfJobs(problem).entrySet()) {
+            data.add(new Entry("   " + jc.getKey().getSimpleName(), jc.getValue()));
+        }
+
+        out.println(problemTableDef.apply(data));
+    }
+
+    private static void printSolutionSummary(PrintWriter out,
+            VehicleRoutingProblemSolution solution) {
+        TableFormatter<Entry> problemTableDef = createKeyValueTable("Solution");
+
+        List<Entry> data = new ArrayList<>();
+        data.add(new Entry("costs", String.format("%6.2f", solution.getCost()).trim()));
+        data.add(new Entry("noVehicles", solution.getRoutes().size()));
+        data.add(new Entry("unassignedJobs", solution.getUnassignedJobs().size()));
+
+        out.println(problemTableDef.apply(data));
+    }
+
+
+    private static void printCostDetails(PrintWriter out, VehicleRoutingProblemSolution solution) {
+        printCostComponents(out, solution);
+        printPerRouteCosts(out, solution);
+    }
+
+    private static void printCostComponents(PrintWriter out,
+            VehicleRoutingProblemSolution solution) {
+        TableFormatter<ComponentValue> tableDef = new TableFormatter.Builder<ComponentValue>()
+                .withBorderFormatter(new BorderFormatter.Builder(
+                        DefaultFormatters.ASCII_LINEDRAW).build())
+                .withHeading("Cost components")
+                .withColumn(ColumnDefinition.<ComponentValue, String>createSimpleStateless(
+                        "component id", c -> c.getKey()))
+                .withColumn(ColumnDefinition.<ComponentValue, Double>createSimpleStateless(
+                        "value", c -> c.getValue()))
+                .withColumn(ColumnDefinition.<ComponentValue, Double>createSimpleStateless(
+                        "weight", c -> c.getWeight()))
+                .withColumn(ColumnDefinition.<ComponentValue, Double>createSimpleStateless(
+                        "weighted value", c -> c.getWeightedValue()))
+                .build();
+
+        out.println(tableDef.apply(solution.getDetailedCost()));
+    }
+
+    private static void printPerRouteCosts(PrintWriter out,
+            VehicleRoutingProblemSolution solution) {
+
+        Builder<ComponentValue> builder = new TableFormatter.Builder<ComponentValue>()
+                .withBorderFormatter(new BorderFormatter.Builder(
+                        DefaultFormatters.ASCII_LINEDRAW).build())
+                .withHeading("Route level costs (weighted)")
+                .withShowAggregation(true)
+                .withColumn(new ColumnDefinition.StatelessBuilder<ComponentValue, String>()
+                        .withTitle("component id").withDataExtractor(c -> c.getKey())
+                        .withAggregateRowConstant("Total").build());
+
+        for (VehicleRoute r : solution.getRoutes()) {
+            builder.withColumn(
+                    new ColumnDefinition.StatefulBuilder<ComponentValue, Aggregator, Double>()
+                    .withTitle("Route " + r.getId())
+                    .withCellContentFormatter(CellContentFormatter.rightAlignedCell())
+                    .withDataConverter(NumberDataConverter.defaultDoubleFormatter())
+                    .withDataExtractor(new StatefulDataExtractor<>((cv, agg) -> {
+                        Double val = ((RouteLevelComponentValue) cv)
+                                .getRouteValue(r.getId()).orElse(null);
+                        if (val != null) {
+                            agg.sum += val;
+                        }
+                        return val;
+                        }, Aggregator::new, (k, agg) -> agg.sum))
+                    .build());
+        }
+
+
+        TableFormatter<ComponentValue> tableDef = builder.build();
+
+        out.println(tableDef.apply(solution.getDetailedCost().stream()
+                .filter(cv -> cv instanceof RouteLevelComponentValue)
+                .collect(Collectors.toList())));
+
+    }
+
+    private static TableFormatter<Entry> createKeyValueTable(String heading) {
+        TableFormatter<Entry> problemTableDef = new TableFormatter.Builder<Entry>()
+                .withBorderFormatter(new BorderFormatter.Builder(
+                        DefaultFormatters.ASCII_LINEDRAW).build())
+                .withHeading(heading)
+                .withColumn(ColumnDefinition.<Entry, String>createSimpleStateless("key",
+                        en -> en.getKey()))
+                .withColumn(ColumnDefinition.<Entry, String>createSimpleStateless("value",
+                        en -> en.getValue()))
+                .build();
+        return problemTableDef;
+    }
+
+    private static Map<Class<? extends Job>, Long> getNuOfJobs(VehicleRoutingProblem problem) {
+        return problem.getJobs().values().stream().map(j -> (Class<? extends Job>) j.getClass())
+                .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));
+    }
+
+    private static void printRouteDetails(PrintWriter out, VehicleRoutingProblem problem,
+            VehicleRoutingProblemSolution solution) {
+        printUnassignedJobs(out, solution);
+        printRouteData(out, problem, solution);
+    }
+
+    private static void printUnassignedJobs(PrintWriter out,
+            VehicleRoutingProblemSolution solution) {
+        if (solution.getUnassignedJobs().isEmpty())
+            return;
+    }
+
+    private static void printRouteData(PrintWriter out, VehicleRoutingProblem problem,
+            VehicleRoutingProblemSolution solution) {
+        Builder<RouteDeatailsRecord> builder = new TableFormatter.Builder<RouteDeatailsRecord>()
+                .withBorderFormatter(
+                        new BorderFormatter.Builder(DefaultFormatters.ASCII_LINEDRAW).build())
+                .withHeading("Route details");
+
+        new RouteDetailsConfig.Builder().withTimeDisplayMode(DisplayMode.BOTH)
+        .withColumns(Column.values()).build().getColumns()
+        .forEach(c -> builder.withColumn(c));
+
+        TableFormatter<RouteDeatailsRecord> tableDef = builder.build();
+
+        List<RouteDeatailsRecord> data = new ArrayList<>();
+        for (VehicleRoute route : new ArrayList<>(solution.getRoutes())) {
+            if (!data.isEmpty()) {
+                data.add(null);
+            }
+            data.add(new RouteDeatailsRecord(route, route.getStart(), problem));
+
+            for (TourActivity act : route.getActivities()) {
+                data.add(new RouteDeatailsRecord(route, act, problem));
+            }
+            data.add(new RouteDeatailsRecord(route, route.getEnd(), problem));
+        }
+
+        out.println(tableDef.apply(data));
+    }
+
+    private static void printVehicleSummary(PrintWriter out, VehicleRoutingProblem problem,
+            VehicleRoutingProblemSolution solution) {
+        Builder<VehicleSummaryRecord> builder = new TableFormatter.Builder<VehicleSummaryRecord>()
+                .withBorderFormatter(
+                        new BorderFormatter.Builder(DefaultFormatters.ASCII_LINEDRAW).build())
+                .withHeading("Vehicle summary");
+
+        new VehicleSummaryConfig.Builder()
+        .withColumns(VehicleSummaryConfig.Column.values())
+        .build()
+        .getColumns()
+        .forEach(c -> builder.withColumn(c));
+
+        TableFormatter<VehicleSummaryRecord> tableDef = builder.build();
+
+        List<VehicleSummaryRecord> data = solution.getRoutes().stream()
+                .map(r -> new VehicleSummaryRecord(r, problem))
+                .collect(Collectors.toList());
+
+        out.println(tableDef.apply(data));
+    }
+
+}
+
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/VehicleSummaryConfig.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/VehicleSummaryConfig.java
new file mode 100644
index 000000000..d36b8ba72
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/VehicleSummaryConfig.java
@@ -0,0 +1,420 @@
+package com.graphhopper.jsprit.core.reporting;
+
+import java.math.RoundingMode;
+import java.text.NumberFormat;
+import java.time.LocalDate;
+import java.time.LocalDateTime;
+import java.time.LocalTime;
+import java.time.temporal.ChronoUnit;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.EnumSet;
+import java.util.List;
+import java.util.Map;
+import java.util.function.Function;
+import java.util.stream.Collectors;
+
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
+
+import hu.vissy.texttable.column.ColumnDefinition;
+import hu.vissy.texttable.contentformatter.CellContentFormatter;
+import hu.vissy.texttable.dataconverter.NumberDataConverter;
+import hu.vissy.texttable.dataconverter.StringDataConverter;
+
+
+public class VehicleSummaryConfig extends ColumnConfigBase {
+
+    public static final EnumSet<DisplayMode> MODE_SET_HUMAN = EnumSet.<DisplayMode>of(
+            DisplayMode.NUMERIC, DisplayMode.HUMAN_READABLE);
+
+    public static final EnumSet<DisplayMode> MODE_SET_ALL = EnumSet.<DisplayMode>of(
+            DisplayMode.NUMERIC, DisplayMode.HUMAN_READABLE, DisplayMode.PERCENT_ROUTE,
+            DisplayMode.PERCENT_SHIFT);
+
+    public enum DisplayMode {
+        GENERIC(""), NUMERIC(""), HUMAN_READABLE(" (H)"), PERCENT_ROUTE(" (R%)"), PERCENT_SHIFT(
+                " (S%)");
+
+        private String postfix;
+
+        private DisplayMode(String postfix) {
+            this.postfix = postfix;
+        }
+
+        public String getPostfix() {
+            return postfix;
+        }
+    }
+
+    public enum Column {
+        ROUTE_NUMBER(null) {
+            @Override
+            public List<ColumnDefinition<VehicleSummaryRecord, ?, ?>> createColumns(
+                    VehicleSummaryConfig vehicleSummaryConfig) {
+                return Collections.singletonList(
+                        new ColumnDefinition.StatelessBuilder<VehicleSummaryRecord, Integer>()
+                        .withTitle("route #")
+                        .withDataExtractor(r -> r.getRouteNr())
+                        .withCellContentFormatter(CellContentFormatter.rightAlignedCell())
+                        .withDataConverter(NumberDataConverter.defaultIntegerFormatter())
+                        .build());
+            }
+        },
+
+        VEHICLE_NAME(null) {
+            @Override
+            public List<ColumnDefinition<VehicleSummaryRecord, ?, ?>> createColumns(
+                    VehicleSummaryConfig vehicleSummaryConfig) {
+                return Collections.singletonList(
+                        new ColumnDefinition.StatelessBuilder<VehicleSummaryRecord, String>()
+                        .withTitle("vehicle")
+                        .withDataExtractor(r -> r.getVehicle().getId())
+                        .withDataConverter(new StringDataConverter())
+                        .build());
+            }
+        },
+
+        VEHICLE_TYPE(null) {
+            @Override
+            public List<ColumnDefinition<VehicleSummaryRecord, ?, ?>> createColumns(
+                    VehicleSummaryConfig vehicleSummaryConfig) {
+                return Collections.singletonList(
+                        new ColumnDefinition.StatelessBuilder<VehicleSummaryRecord, String>()
+                        .withTitle("vehicle type")
+                        .withDataExtractor(r -> r.getVehicle().getType().getTypeId())
+                        .withDataConverter(new StringDataConverter())
+                        .build());
+            }
+        },
+
+        DRIVER(null) {
+            @Override
+            public List<ColumnDefinition<VehicleSummaryRecord, ?, ?>> createColumns(
+                    VehicleSummaryConfig vehicleSummaryConfig) {
+                return Collections.singletonList(
+                        new ColumnDefinition.StatelessBuilder<VehicleSummaryRecord, String>()
+                        .withTitle("driver")
+                        .withDataExtractor(r -> r.getDriver().getId())
+                        .withDataConverter(new StringDataConverter())
+                        .build());
+            }
+        },
+
+        ACTIVITY_COUNT(null) {
+            @Override
+            public List<ColumnDefinition<VehicleSummaryRecord, ?, ?>> createColumns(
+                    VehicleSummaryConfig vehicleSummaryConfig) {
+                return Collections.singletonList(
+                        new ColumnDefinition.StatelessBuilder<VehicleSummaryRecord, Integer>()
+                        .withTitle("act count")
+                        .withDataExtractor(r -> r.getActivityCount())
+                        .withCellContentFormatter(CellContentFormatter.rightAlignedCell())
+                        .withDataConverter(NumberDataConverter.defaultIntegerFormatter())
+                        .build());
+            }
+        },
+
+        ACTIVITY_COUNT_BY_TYPE(null) {
+            @Override
+            public List<ColumnDefinition<VehicleSummaryRecord, ?, ?>> createColumns(
+                    VehicleSummaryConfig vehicleSummaryConfig) {
+                return Collections.singletonList(
+                        new ColumnDefinition.StatelessBuilder<VehicleSummaryRecord, Map<String, Integer>>()
+                        .withTitle("act stat")
+                        .withDataExtractor(r -> r.getActivityCountByType())
+                        .withDataConverter(d -> d.entrySet().stream()
+                                .map(en -> "[" + en.getKey() + "=" + en.getValue() + "]")
+                                .collect(Collectors.joining()))
+                        .build());
+            }
+        },
+
+        TRAVEL_DISTANCE(null) {
+            @Override
+            public List<ColumnDefinition<VehicleSummaryRecord, ?, ?>> createColumns(
+                    VehicleSummaryConfig vehicleSummaryConfig) {
+                return Collections.singletonList(
+                        new ColumnDefinition.StatelessBuilder<VehicleSummaryRecord, Long>()
+                            .withTitle("travel dist")
+                            .withDataExtractor(r -> r.getTravelDistance())
+                            .withCellContentFormatter(CellContentFormatter.rightAlignedCell())
+                            .withDataConverter(NumberDataConverter.defaultLongFormatter())
+                            .build());
+            }
+        },
+
+        SHIFT_TIME_WINDOW(MODE_SET_HUMAN) {
+
+            @Override
+            public List<ColumnDefinition<VehicleSummaryRecord, ?, ?>> createColumns(
+                    VehicleSummaryConfig vehicleSummaryConfig) {
+                return createTimeWindowColumn(this, "shift tw", vehicleSummaryConfig,
+                        r -> new TimeWindow(r.getVehicle().getEarliestDeparture(),
+                                r.getVehicle().getLatestArrival()));
+            }
+        },
+
+        SHIFT_DURATION(MODE_SET_HUMAN) {
+
+            @Override
+            public List<ColumnDefinition<VehicleSummaryRecord, ?, ?>> createColumns(
+                    VehicleSummaryConfig vehicleSummaryConfig) {
+                return createDurationColumn(this, "shift dur", vehicleSummaryConfig,
+                        r -> r.getShiftDuration());
+            }
+        },
+
+        ROUTE_TIME_WINDOW(MODE_SET_HUMAN) {
+
+            @Override
+            public List<ColumnDefinition<VehicleSummaryRecord, ?, ?>> createColumns(
+                    VehicleSummaryConfig vehicleSummaryConfig) {
+                return createTimeWindowColumn(this, "route tw", vehicleSummaryConfig,
+                        r -> new TimeWindow(r.getStart(), r.getEnd()));
+            }
+        },
+
+        ROUTE_DURATION(MODE_SET_ALL) {
+
+            @Override
+            public List<ColumnDefinition<VehicleSummaryRecord, ?, ?>> createColumns(
+                    VehicleSummaryConfig vehicleSummaryConfig) {
+                return createDurationColumn(this, "route", vehicleSummaryConfig,
+                        r -> r.getRouteDuration());
+            }
+        },
+
+        TRAVEL_DURATION(MODE_SET_ALL) {
+
+            @Override
+            public List<ColumnDefinition<VehicleSummaryRecord, ?, ?>> createColumns(
+                    VehicleSummaryConfig vehicleSummaryConfig) {
+                return createDurationColumn(this, "travel", vehicleSummaryConfig,
+                        r -> r.getTravelDuration());
+            }
+        },
+
+        OPERATION_DURATION(MODE_SET_ALL) {
+
+            @Override
+            public List<ColumnDefinition<VehicleSummaryRecord, ?, ?>> createColumns(
+                    VehicleSummaryConfig vehicleSummaryConfig) {
+                return createDurationColumn(this, "operation", vehicleSummaryConfig,
+                        r -> r.getOperationDuration());
+            }
+        },
+
+        ACTIVE_DURATION(MODE_SET_ALL) {
+
+            @Override
+            public List<ColumnDefinition<VehicleSummaryRecord, ?, ?>> createColumns(
+                    VehicleSummaryConfig vehicleSummaryConfig) {
+                return createDurationColumn(this, "active", vehicleSummaryConfig,
+                        r -> r.getActiveDuration());
+            }
+        },
+
+        IDLE_DURATION(MODE_SET_ALL) {
+
+            @Override
+            public List<ColumnDefinition<VehicleSummaryRecord, ?, ?>> createColumns(
+                    VehicleSummaryConfig vehicleSummaryConfig) {
+                return createDurationColumn(this, "idle", vehicleSummaryConfig,
+                        r -> r.getIdleDuration());
+            }
+        },
+
+        ;
+
+        private EnumSet<DisplayMode> enabledFormats;
+
+
+        private Column(EnumSet<DisplayMode> enabledFormats) {
+            this.enabledFormats = enabledFormats;
+        }
+
+        public abstract List<ColumnDefinition<VehicleSummaryRecord, ?, ?>> createColumns(
+                VehicleSummaryConfig vehicleSummaryConfig);
+
+        public EnumSet<DisplayMode> getEnabledFormats() {
+            return enabledFormats;
+        }
+
+        private static List<ColumnDefinition<VehicleSummaryRecord, ?, ?>> createDurationColumn(
+                Column column, String title, VehicleSummaryConfig vehicleSummaryConfig,
+                Function<VehicleSummaryRecord, Long> extractor) {
+
+            EnumSet<DisplayMode> modes = composeDisplayModes(column, vehicleSummaryConfig);
+
+            List<ColumnDefinition<VehicleSummaryRecord, ?, ?>> cols = new ArrayList<>();
+            for (DisplayMode m : MODE_SET_ALL) {
+                ColumnDefinition.StatelessBuilder<VehicleSummaryRecord, ?> b = null;
+                if (modes.contains(m)) {
+                    switch (m) {
+                    case NUMERIC:
+                        b = new ColumnDefinition.StatelessBuilder<VehicleSummaryRecord, Long>()
+                        .withDataExtractor(extractor)
+                        .withDataConverter(NumberDataConverter.defaultLongFormatter());
+
+                        break;
+                    case HUMAN_READABLE:
+                        b = new ColumnDefinition.StatelessBuilder<VehicleSummaryRecord, Long>()
+                        .withDataExtractor(extractor)
+                        .withDataConverter(
+                                d -> vehicleSummaryConfig.formatDurationHuman(d));
+                        break;
+                    case PERCENT_SHIFT:
+                        b = new ColumnDefinition.StatelessBuilder<VehicleSummaryRecord, Double>()
+                        .withDataExtractor(
+                                r -> (double) extractor.apply(r) / r.getShiftDuration())
+                        .withDataConverter(defaultPercentFormatter());
+                        // TODO
+                        break;
+                    case PERCENT_ROUTE:
+                        b = new ColumnDefinition.StatelessBuilder<VehicleSummaryRecord, Double>()
+                        .withDataExtractor(
+                                r -> (double) extractor.apply(r) / r.getRouteDuration())
+                        .withDataConverter(defaultPercentFormatter());
+                        // TODO
+                        break;
+                    default:
+                        break;
+                    }
+                    if (b != null) {
+                        b.withCellContentFormatter(CellContentFormatter.rightAlignedCell());
+                        cols.add(b.withTitle(title + m.postfix).build());
+                    }
+                }
+            }
+            return cols;
+        }
+
+
+        private static NumberDataConverter<Double> defaultPercentFormatter() {
+            NumberFormat formatter = NumberFormat.getPercentInstance();
+            formatter.setMaximumFractionDigits(2);
+            formatter.setMinimumFractionDigits(2);
+            formatter.setGroupingUsed(false);
+            formatter.setRoundingMode(RoundingMode.HALF_UP);
+            return new NumberDataConverter<>(formatter);
+        }
+
+        private static List<ColumnDefinition<VehicleSummaryRecord, ?, ?>> createTimeWindowColumn(
+                Column column, String title, VehicleSummaryConfig vehicleSummaryConfig,
+                Function<VehicleSummaryRecord, TimeWindow> extractor) {
+
+            EnumSet<DisplayMode> modes = composeDisplayModes(column, vehicleSummaryConfig);
+
+            List<ColumnDefinition<VehicleSummaryRecord, ?, ?>> cols = new ArrayList<>();
+            for(DisplayMode m : MODE_SET_ALL) {
+                if (modes.contains(m)) {
+                    ColumnDefinition.StatelessBuilder<VehicleSummaryRecord, TimeWindow> b = new ColumnDefinition.StatelessBuilder<>();
+                    switch (m) {
+                    case NUMERIC:
+                        b.withDataConverter(
+                                tw -> vehicleSummaryConfig.formatTimeWindowNumeric(tw));
+                        break;
+                    case HUMAN_READABLE:
+                        b.withDataConverter(
+                                tw -> vehicleSummaryConfig.formatTimeWindowHuman(tw));
+                        break;
+
+                    default:
+                        break;
+                    }
+                    if (b != null) {
+                        b.withCellContentFormatter(CellContentFormatter.rightAlignedCell());
+                        b.withDataExtractor(extractor);
+                        cols.add(b.withTitle(title + m.postfix).build());
+                    }
+                }
+            }
+            return cols;
+        }
+
+
+        private static EnumSet<DisplayMode> composeDisplayModes(Column column,
+                VehicleSummaryConfig vehicleSummaryConfig) {
+            EnumSet<DisplayMode> modes = EnumSet.copyOf(column.getEnabledFormats());
+            modes.retainAll(vehicleSummaryConfig.getDisplayModes());
+            return modes;
+        }
+
+
+    }
+
+    public static class Builder {
+        private LocalDateTime humanReadableOrigin = LocalDateTime.of(LocalDate.now(),
+                LocalTime.MIDNIGHT);
+        private EnumSet<DisplayMode> displayModes = MODE_SET_ALL;
+        private List<Column> columns;
+        private ChronoUnit lowUnit = ChronoUnit.SECONDS;
+        private ChronoUnit highUnit = ChronoUnit.HOURS;
+
+        public Builder() {
+            this.columns = new ArrayList<>();
+
+        }
+
+        public Builder withHumanReadableOrigin(LocalDateTime humanReadableOrigin) {
+            this.humanReadableOrigin = humanReadableOrigin;
+            return this;
+        }
+
+        public Builder withTimeDisplayModes(EnumSet<DisplayMode> displayModes) {
+            this.displayModes = displayModes;
+            return this;
+        }
+
+        public Builder withLowUnit(ChronoUnit lowUnit) {
+            this.lowUnit = lowUnit;
+            return this;
+        }
+
+        public Builder withHighUnit(ChronoUnit highUnit) {
+            this.highUnit = highUnit;
+            return this;
+        }
+
+        public Builder withColumn(Column columns) {
+            this.columns.add(columns);
+            return this;
+        }
+
+        public Builder withColumns(Column... columns) {
+            for (Column c : columns) {
+                withColumn(c);
+            }
+            return this;
+        }
+
+
+        public VehicleSummaryConfig build() {
+            return new VehicleSummaryConfig(this);
+        }
+    }
+
+    private EnumSet<DisplayMode> displayModes;
+    private List<Column> columns;
+
+    private VehicleSummaryConfig(Builder builder) {
+        this.displayModes = builder.displayModes;
+        this.columns = builder.columns;
+        setTimeFormatter(
+                new HumanReadableTimeFormatter(builder.humanReadableOrigin, builder.lowUnit));
+        setDurationFormatter(new HumanReadableDurationFormatter(builder.lowUnit, builder.highUnit));
+    }
+
+
+    public EnumSet<DisplayMode> getDisplayModes() {
+        return displayModes;
+    }
+
+    public List<ColumnDefinition<VehicleSummaryRecord, ?, ?>> getColumns() {
+        List<ColumnDefinition<VehicleSummaryRecord, ?, ?>> columns = new ArrayList<>();
+        this.columns.forEach(c -> columns.addAll(c.createColumns(this)));
+        return columns;
+    }
+
+
+}
\ No newline at end of file
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleSummaryContext.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/VehicleSummaryRecord.java
similarity index 79%
rename from jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleSummaryContext.java
rename to jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/VehicleSummaryRecord.java
index c658c1d97..163c6f5fd 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleSummaryContext.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/VehicleSummaryRecord.java
@@ -1,4 +1,4 @@
-package com.graphhopper.jsprit.core.reporting.vehicle;
+package com.graphhopper.jsprit.core.reporting;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -10,9 +10,8 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
-import com.graphhopper.jsprit.core.reporting.PrinterContext;
 
-public class VehicleSummaryContext implements PrinterContext {
+public class VehicleSummaryRecord {
     private Vehicle vehicle;
     private Driver driver;
     private int routeNr;
@@ -25,7 +24,7 @@
     private long breakDuration;
     private long travelDistance;
 
-    public VehicleSummaryContext(VehicleRoute route, VehicleRoutingProblem problem) {
+    public VehicleSummaryRecord(VehicleRoute route, VehicleRoutingProblem problem) {
         routeNr = route.getId();
         vehicle = route.getVehicle();
         driver = route.getDriver();
@@ -47,8 +46,8 @@ public VehicleSummaryContext(VehicleRoute route, VehicleRoutingProblem problem)
                     activityCountByType.put(type, activityCountByType.get(type) + 1);
                     operationDuration += jobAct.getOperationTime();
                     travelDuration += problem.getTransportCosts().getTransportTime(prevAct.getLocation(),
-                                    act.getLocation(),act.getArrTime(), route.getDriver(),
-                                    route.getVehicle());
+                            act.getLocation(),act.getArrTime(), route.getDriver(),
+                            route.getVehicle());
                 }
             prevAct = act;
         }
@@ -92,7 +91,7 @@ public long getOperationDuration() {
 
     public long getShiftDuration() {
         return vehicle.getLatestArrival() == Double.MAX_VALUE ? getRouteDuration()
-                        : (long) (vehicle.getLatestArrival() - vehicle.getEarliestDeparture());
+                : (long) (vehicle.getLatestArrival() - vehicle.getEarliestDeparture());
     }
 
     public long getRouteDuration() {
@@ -118,10 +117,10 @@ public Driver getDriver() {
     @Override
     public String toString() {
         return "VehicleStatisticsContext [vehicleId=" + vehicle.getId() + ", driver=" + driver.getId() + ", routeNr=" + routeNr
-                        + ", start=" + start + ", end=" + end + ", activityCount=" + activityCount + ", activityCountByType="
-                        + activityCountByType + ", travelDuration=" + travelDuration + ", operationDuration=" + operationDuration
-                        + ", totalDuration=" + getRouteDuration() + ", travelDistance=" + travelDistance + ", breakDuration="
-                        + breakDuration + "]";
+                + ", start=" + start + ", end=" + end + ", activityCount=" + activityCount + ", activityCountByType="
+                + activityCountByType + ", travelDuration=" + travelDuration + ", operationDuration=" + operationDuration
+                + ", totalDuration=" + getRouteDuration() + ", travelDistance=" + travelDistance + ", breakDuration="
+                + breakDuration + "]";
     }
 
     public Long getActiveDuration() {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/AbstractColumnType.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/AbstractColumnType.java
deleted file mode 100644
index 6a07a2cb0..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/AbstractColumnType.java
+++ /dev/null
@@ -1,63 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.columndefinition;
-
-/**
- * Common abstract ancestor for column types.
- *
- * @author balage
- *
- * @param <T>
- *            The type it accepts.
- */
-public abstract class AbstractColumnType<T> implements ColumnType<T> {
-
-    // The string to used as null value
-    private String nullValue = "";
-
-    public AbstractColumnType() {
-        super();
-    }
-
-    /**
-     * @param nullValue
-     *            alternative null value
-     */
-    public AbstractColumnType(String nullValue) {
-        super();
-        this.nullValue = nullValue;
-    }
-
-    /**
-     * {@inheritDoc}
-     *
-     * This basic implementation takes the burden to handle null values and
-     * calls the {@linkplain #convertNotNull(Object)} for all other values.
-     *
-     * @see com.graphhopper.jsprit.core.reporting.columndefinition.ColumnType#convert(java.lang.Object)
-     *
-     * @throws ClassCastException
-     *             if the data is not accepted by the column type.
-     */
-    @SuppressWarnings("unchecked")
-    @Override
-    public String convert(Object data) {
-        if (data == null) {
-            return nullValue;
-        } else {
-            if (accepts(data)) {
-                return convertNotNull((T) data);
-            } else {
-                throw new ClassCastException();
-            }
-        }
-    }
-
-    /**
-     * Converts the data into String. This function never gets null as
-     * parameter.
-     *
-     * @param data
-     *            the non-null data to convert.
-     * @return The converted data.
-     */
-    protected abstract String convertNotNull(T data);
-}
\ No newline at end of file
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/BooleanColumnType.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/BooleanColumnType.java
deleted file mode 100644
index ec2159033..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/BooleanColumnType.java
+++ /dev/null
@@ -1,80 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.columndefinition;
-
-/**
- * A column type with boolean values.
- * <p>
- * The display value for true and false values could be configured.
- * </p>
- *
- * @author balage
- *
- */
-public class BooleanColumnType extends AbstractColumnType<Boolean> {
-    // The display value for true
-    private String trueValue = "true";
-    // The display value for false
-    private String falseValue = "false";
-
-    /**
-     * Konstructor. The column will use the default values for null, true or
-     * false.
-     */
-    public BooleanColumnType() {
-        super();
-    }
-
-    /**
-     * Konstructor. The column will use the default values for true or false.
-     *
-     * @param nullValue
-     *            The text representation for null values.
-     */
-    public BooleanColumnType(String nullValue) {
-        super(nullValue);
-    }
-
-    /**
-     * Konstructor. The column will use the default values for null.
-     *
-     * @param trueValue
-     *            The text representation for true values.
-     * @param falseValue
-     *            The text representation for false values.
-     */
-    public BooleanColumnType(String trueValue, String falseValue) {
-        super();
-        this.trueValue = trueValue;
-        this.falseValue = falseValue;
-    }
-
-    /**
-     * Konstructor.
-     *
-     * @param trueValue
-     *            The text representation for true values.
-     * @param falseValue
-     *            The text representation for false values.
-     * @param nullValue
-     *            The text representation for null values.
-     */
-    public BooleanColumnType(String trueValue, String falseValue, String nullValue) {
-        super(nullValue);
-        this.trueValue = trueValue;
-        this.falseValue = falseValue;
-    }
-
-    @Override
-    protected String convertNotNull(Boolean data) {
-        return data ? trueValue : falseValue;
-    }
-
-    /**
-     * {@inheritDoc}
-     *
-     * Only accepts {@linkplain Boolean} input.
-     */
-    @Override
-    public boolean accepts(Object data) {
-        return data instanceof Boolean;
-    }
-}
\ No newline at end of file
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/ColumnAlignment.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/ColumnAlignment.java
deleted file mode 100644
index 44f4bc5fc..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/ColumnAlignment.java
+++ /dev/null
@@ -1,67 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.columndefinition;
-
-/**
- * Alignment of the column.
- * <p>
- * Longer values will be truncated, shorter values will be padded by spaces.
- * </p>
- *
- * @author balage
- *
- */
-public enum ColumnAlignment {
-    /**
-     * The values are aligned left, padded on the right side.
-     */
-    LEFT {
-
-        @Override
-        public String align(String data, int width) {
-            if (data.length() > width) {
-                return data.substring(0, width);
-            }
-            return String.format("%1$-" + width + "s", data);
-        }
-
-    },
-    /**
-     * The values are aligned right, padded on the left side.
-     */
-    RIGHT {
-
-        @Override
-        public String align(String data, int width) {
-            if (data.length() > width) {
-                return data.substring(0, width);
-            }
-            return String.format("%1$" + width + "s", data);
-        }
-
-    },
-    /**
-     * The values are centered, padded on the both sides evenly (in case of odd
-     * character padding, the left padding will be one more than the right one).
-     */
-    CENTER {
-        @Override
-        public String align(String data, int width) {
-            if (data.length() > width) {
-                return data.substring(0, width);
-            }
-            int leftPad = (width - data.length())/2;
-            return LEFT.align(RIGHT.align(data, width-leftPad), width);
-        }
-    };
-
-    /**
-     * Applies the alignment on the data according the width. Truncates or pads
-     * the value.
-     * 
-     * @param data
-     *            The data to align.
-     * @param width
-     *            The width to pad to.
-     * @return The aligned (padded) values with the exact length of width.
-     */
-    public abstract String align(String data, int width);
-}
\ No newline at end of file
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/ColumnDefinition.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/ColumnDefinition.java
deleted file mode 100644
index 7fcdabd13..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/ColumnDefinition.java
+++ /dev/null
@@ -1,192 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.columndefinition;
-
-/**
- * Column definition. Contains all information for converting and formatting the
- * column.
- * <p>
- * The definition itself immutable and cannot be directly instantiate. Use the
- * {@linkplain Builder} class for constructing the definition.
- * </p>
- *
- * @author balage
- *
- */
-public class ColumnDefinition {
-
-    /**
-     * The builder for {@linkplain ColumnDefinition}.
-     * <p>
-     * When it is not specified, the default title is null (the default title of
-     * the column will be used), the minWidth is 0, the maxWidth is
-     * {@linkplain Integer#MAX_VALUE} and the alignment is
-     * {@linkplain ColumnAlignment#LEFT}.
-     * </p>
-     *
-     * @author balage
-     *
-     */
-    public static class Builder {
-        // Type of the column.
-        private ColumnType<?> type;
-        // The title of the column.
-        private String title;
-        // The minimal width of the column.
-        private int minWidth = 0;
-        // The maximal width of the column.
-        private int maxWidth = Integer.MAX_VALUE;
-        // The alignment of the column.
-        private ColumnAlignment alignment = ColumnAlignment.LEFT;
-
-        /**
-         * Constructor with title specified.
-         *
-         * @param type
-         *            Type of the column.
-         * @param title
-         *            The title of the column.
-         * @see {@linkplain #withTitle(String)}
-         */
-        public Builder(ColumnType<?> type, String title) {
-            super();
-            this.type = type;
-            this.title = title;
-        }
-
-        /**
-         * Constructor.
-         *
-         * @param type
-         *            Type of the column.
-         */
-        public Builder(ColumnType<?> type) {
-            super();
-            this.type = type;
-        }
-
-        /**
-         * @param title
-         *            The title of the column
-         * @return The builder object.
-         */
-        public ColumnDefinition.Builder withTitle(String title) {
-            this.title = title;
-            return this;
-        }
-
-        /**
-         * @param minWidth
-         *            The minimal width of the column.
-         * @return The builder object.
-         * @throws IllegalArgumentException
-         *             If the minWidth is negative or higher than the maxWidth.
-         */
-        public ColumnDefinition.Builder withMinWidth(int minWidth) {
-            if (minWidth < 0) {
-                throw new IllegalArgumentException("Minimal width should be non-negative.");
-            }
-            if (minWidth > maxWidth) {
-                throw new IllegalArgumentException("Minimal width should be less or equal than the maximal width.");
-            }
-            this.minWidth = minWidth;
-            return this;
-        }
-
-        /**
-         * @param maxWidth
-         *            The maximal width of the column.
-         * @return The builder object.
-         * @throws IllegalArgumentException
-         *             If the maxWidth is negative or less than the minWidth.
-         */
-        public ColumnDefinition.Builder withMaxWidth(int maxWidth) {
-            if (maxWidth < 0) {
-                throw new IllegalArgumentException("Maximal width should be non-negative.");
-            }
-            if (maxWidth > maxWidth) {
-                throw new IllegalArgumentException("Maximal width should be greater or equal than the minimal width.");
-            }
-            this.maxWidth = maxWidth;
-            return this;
-        }
-
-        /**
-         * @param alignment
-         *            The alignment of the column.
-         * @return The builder object.
-         */
-        public ColumnDefinition.Builder withAlignment(ColumnAlignment alignment) {
-            this.alignment = alignment;
-            return this;
-        }
-
-        /**
-         * @return The constructed imutable definition object.
-         */
-        public ColumnDefinition build() {
-            return new ColumnDefinition(this);
-        }
-
-    }
-
-
-    // Type of the column.
-    private ColumnType<?> type;
-    // The title of the column.
-    private String title;
-    // The minimal width of the column.
-    private int minWidth = 0;
-    // The maximal width of the column.
-    private int maxWidth = Integer.MAX_VALUE;
-    // The alignment of the column.
-    private ColumnAlignment alignment = ColumnAlignment.LEFT;
-
-    /**
-     * Private constructor for the builder.
-     *
-     * @param builder
-     *            The builder.
-     */
-    private ColumnDefinition(ColumnDefinition.Builder builder) {
-        type = builder.type;
-        title = builder.title;
-        minWidth = builder.minWidth;
-        maxWidth = builder.maxWidth;
-        alignment = builder.alignment;
-    }
-
-    /**
-     * @return The type of the column.
-     */
-    public ColumnType<?> getType() {
-        return type;
-    }
-
-    /**
-     * @return The title of the column. If null, the default title will be used.
-     */
-    public String getTitle() {
-        return title;
-    }
-
-    /**
-     * @return The minimal width of the column.
-     */
-    public int getMinWidth() {
-        return minWidth;
-    }
-
-    /**
-     * @return The maximal width of the column.
-     */
-    public int getMaxWidth() {
-        return maxWidth;
-    }
-
-    /**
-     * @return The alignment of the column.
-     */
-    public ColumnAlignment getAlignment() {
-        return alignment;
-    }
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/ColumnType.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/ColumnType.java
deleted file mode 100644
index 4a7b5e48a..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/ColumnType.java
+++ /dev/null
@@ -1,30 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.columndefinition;
-
-/**
- * Column type.
- *
- * @author balage
- *
- * @param <T>
- *            The object type it accepts.
- */
-public interface ColumnType<T> {
-    /**
-     * Converts the data into String.
-     * 
-     * @param data
-     *            the data to convert.
-     * @return The converted data.
-     */
-    public String convert(Object data);
-
-    /**
-     * Checks if the given data is acceptable for the type. (Mostly by class
-     * type.)
-     * 
-     * @param data
-     *            the data to check
-     * @return True if the data can be converted by this implementation.
-     */
-    public boolean accepts(Object data);
-}
\ No newline at end of file
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/DoubleColumnType.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/DoubleColumnType.java
deleted file mode 100644
index 0e73a08f2..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/DoubleColumnType.java
+++ /dev/null
@@ -1,82 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.columndefinition;
-
-/**
- * A column type with double values.
- * <p>
- * The number of decimal places could be configured.
- * </p>
- *
- * @author balage
- *
- */
-public class DoubleColumnType extends AbstractColumnType<Double> {
-
-    // The number of displayed decimal places
-    private int decimals = 2;
-
-    /**
-     * Konstructor. The column will use the default values for null and the
-     * significant decimal places.
-     */
-    public DoubleColumnType() {
-        super();
-    }
-
-    /**
-     * Konstructor. The column will use the default values for the significant
-     * decimal places.
-     *
-     * @param nullValue
-     *            The text representation for null values.
-     */
-    public DoubleColumnType(String nullValue) {
-        super(nullValue);
-    }
-
-    /**
-     * Konstructor. The column will use the default values for null.
-     *
-     * @param decimals The number of decimal places to display.
-     * @throws IllegalArgumentException If the parameter is negative.
-     */
-    public DoubleColumnType(int decimals) {
-        super();
-        if (decimals < 0) {
-            throw new IllegalArgumentException("Decimal places should be 0 or more.");
-        }
-        this.decimals = decimals;
-    }
-
-    /**
-     * Konstructor.
-     *
-     * @param decimals
-     *            The number of decimal places to display.
-     * @param nullValue
-     *            The text representation for null values.
-     * @throws IllegalArgumentException
-     *             If the parameter is negative.
-     */
-    public DoubleColumnType(int decimals, String nullValue) {
-        super(nullValue);
-        if (decimals < 0) {
-            throw new IllegalArgumentException("Decimal places should be 0 or more.");
-        }
-        this.decimals = decimals;
-    }
-
-    @Override
-    protected String convertNotNull(Double data) {
-        return String.format("%50." + decimals + "f", data).trim();
-    }
-
-    /**
-     * {@inheritDoc} Only accepts Double values.
-     */
-    @Override
-    public boolean accepts(Object data) {
-        return data instanceof Double;
-    }
-
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/HumanReadableDurationFormatter.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/HumanReadableDurationFormatter.java
deleted file mode 100644
index 2754c6353..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/HumanReadableDurationFormatter.java
+++ /dev/null
@@ -1,66 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.columndefinition;
-
-import java.time.LocalDate;
-import java.time.LocalDateTime;
-import java.time.LocalTime;
-import java.time.format.DateTimeFormatter;
-import java.time.temporal.ChronoUnit;
-
-/**
- * Duration formatter for human readable format.
- * <p>
- * The formatter uses the {@linkplain DateTimeFormatter} for time value to
- * string formatting. The default format is the standard ISO time format (
- * <code>"HH:mm:ss"</code>). If the input long value is X, the time value is
- * calculated by adding X of the units to a predefined origin. The default unit
- * is {@linkplain ChronoUnit#SECONDS}.
- * </p>
- *
- * @author balage
- *
- */
-public class HumanReadableDurationFormatter extends HumanReadableTimeFormatter {
-
-    // Default origin
-    public static final LocalDateTime DEFAULT_ORIGIN = LocalDateTime.of(LocalDate.now(), LocalTime.MIDNIGHT);
-
-    /**
-     * Constructor with default settings. See
-     * {@linkplain HumanReadableDurationFormatter} for default values.
-     */
-    public HumanReadableDurationFormatter() {
-    }
-
-    /**
-     * Constructor with time mapping values, but with default formatting.
-     *
-     * @param unit
-     *            The unit used to map the numerical value to the time value.
-     */
-    public HumanReadableDurationFormatter(ChronoUnit unit) {
-        super(DEFAULT_ORIGIN, unit);
-    }
-
-    /**
-     * Constructor with user-defined formatting.
-     *
-     * @param dateFormatter
-     *            The date formatter.
-     */
-    public HumanReadableDurationFormatter(DateTimeFormatter dateFormatter) {
-        super(dateFormatter);
-    }
-
-    /**
-     * Constructor with both time mapping values and user-defined formatting.
-     *
-     * @param dateFormatter
-     *            The date formatter.
-     * @param unit
-     *            The unit used to map the numerical value to the time value.
-     */
-    public HumanReadableDurationFormatter(DateTimeFormatter dateFormatter, ChronoUnit unit) {
-        super(dateFormatter, DEFAULT_ORIGIN, unit);
-    }
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/HumanReadableEnabled.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/HumanReadableEnabled.java
deleted file mode 100644
index f8b427a66..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/HumanReadableEnabled.java
+++ /dev/null
@@ -1,27 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.columndefinition;
-
-/**
- * Interface for columns with human readable formats.
- *
- * @author balage
- *
- * @param <T>
- *            The type of the class itself. (Self-reference)
- */
-public interface HumanReadableEnabled<T extends HumanReadableEnabled<T>> {
-    /**
-     * Sets the formatter.
-     * 
-     * @param formatter
-     *            The formatter.
-     * @return The object itself.
-     */
-    public T withFormatter(HumanReadableTimeFormatter formatter);
-
-    /**
-     * Marks the column human readable.
-     * 
-     * @return The object itself.
-     */
-    public T asHumanReadable();
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/IntColumnType.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/IntColumnType.java
deleted file mode 100644
index 305d08911..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/IntColumnType.java
+++ /dev/null
@@ -1,41 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.columndefinition;
-
-/**
- * A column type with integer (4 byte) values.
- *
- * @author balage
- *
- */
-public class IntColumnType extends AbstractColumnType<Integer> {
-
-    /**
-     * Konstructor. The column will use the default values for null.
-     */
-    public IntColumnType() {
-        super();
-    }
-
-    /**
-     * Konstructor.
-     *
-     * @param nullValue
-     *            The text representation for null values.
-     */
-    public IntColumnType(String nullValue) {
-        super(nullValue);
-    }
-
-    @Override
-    protected String convertNotNull(Integer data) {
-        return data.toString();
-    }
-
-    /**
-     * {@inheritDoc} Only accepts Integer values.
-     */
-    @Override
-    public boolean accepts(Object data) {
-        return data instanceof Integer;
-    }
-
-}
\ No newline at end of file
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/LongColumnType.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/LongColumnType.java
deleted file mode 100644
index 5be5b1557..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/LongColumnType.java
+++ /dev/null
@@ -1,42 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.columndefinition;
-
-/**
- * A column type with long (8-byte) values.
- *
- * @author balage
- *
- */
-public class LongColumnType extends AbstractColumnType<Long> {
-
-    /**
-     * Konstructor. The column will use the default values for null.
-     */
-    public LongColumnType() {
-        super();
-    }
-
-    /**
-     * Konstructor.
-     *
-     * @param nullValue
-     *            The text representation for null values.
-     */
-    public LongColumnType(String nullValue) {
-        super(nullValue);
-    }
-
-    @Override
-    protected String convertNotNull(Long data) {
-        return data.toString();
-    }
-
-    /**
-     * {@inheritDoc} Only accepts Long values.
-     */
-    @Override
-    public boolean accepts(Object data) {
-        return data instanceof Long;
-    }
-
-
-}
\ No newline at end of file
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/SolutionPrintColumnLists.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/SolutionPrintColumnLists.java
deleted file mode 100644
index 133768628..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/SolutionPrintColumnLists.java
+++ /dev/null
@@ -1,196 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.columndefinition;
-
-import java.util.ArrayList;
-import java.util.EnumMap;
-import java.util.List;
-
-import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.PrinterColumnList;
-import com.graphhopper.jsprit.core.reporting.route.ActivityCostPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.route.ActivityDurationPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.route.ActivityLoadChangePrinterColumn;
-import com.graphhopper.jsprit.core.reporting.route.ActivityTypePrinterColumn;
-import com.graphhopper.jsprit.core.reporting.route.ArrivalTimePrinterColumn;
-import com.graphhopper.jsprit.core.reporting.route.EndTimePrinterColumn;
-import com.graphhopper.jsprit.core.reporting.route.JobNamePrinterColumn;
-import com.graphhopper.jsprit.core.reporting.route.JobPriorityPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.route.JobTypePrinterColumn;
-import com.graphhopper.jsprit.core.reporting.route.LoacationPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.route.OperationDurationPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.route.RouteCostPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.route.RouteLoadPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.route.RouteNumberPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.route.RoutePrinterContext;
-import com.graphhopper.jsprit.core.reporting.route.SelectedTimeWindowPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.route.StartTimePrinterColumn;
-import com.graphhopper.jsprit.core.reporting.route.TimeWindowsPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.route.TransportCostPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.route.TravelDurationPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.route.VehicleNamePrinterColumn;
-import com.graphhopper.jsprit.core.reporting.route.WaitingDurationPrinterColumn;
-
-/**
- * Utility class to provide predefined column lists for Solution printing.
- *
- * @author balage
- *
- */
-public class SolutionPrintColumnLists {
-
-    /**
-     * The predefined column sets.
-     *
-     * @author balage
-     *
-     */
-    public enum PredefinedList {
-        /**
-         * A minimal column set.
-         */
-        MINIMAL,
-        /**
-         * A general, most often used column set.
-         */
-        DEFAULT,
-        /**
-         * A verbose column set containing all columns.
-         */
-        VERBOSE
-    }
-
-    private static final EnumMap<PredefinedList, List<Class<? extends AbstractPrinterColumn<RoutePrinterContext, ?, ?>>>> COLUMNS;
-
-    static {
-        COLUMNS = new EnumMap<>(PredefinedList.class);
-        List<Class<? extends AbstractPrinterColumn<RoutePrinterContext, ?, ?>>> minimalSet = new ArrayList<>();
-        minimalSet.add(RouteNumberPrinterColumn.class);
-        minimalSet.add(VehicleNamePrinterColumn.class);
-        minimalSet.add(ActivityTypePrinterColumn.class);
-        minimalSet.add(JobNamePrinterColumn.class);
-        minimalSet.add(ArrivalTimePrinterColumn.class);
-        minimalSet.add(EndTimePrinterColumn.class);
-        minimalSet.add(RouteCostPrinterColumn.class);
-        COLUMNS.put(PredefinedList.MINIMAL, minimalSet);
-
-        List<Class<? extends AbstractPrinterColumn<RoutePrinterContext, ?, ?>>> defaultSet = new ArrayList<>();
-        defaultSet.add(RouteNumberPrinterColumn.class);
-        defaultSet.add(VehicleNamePrinterColumn.class);
-        defaultSet.add(ActivityTypePrinterColumn.class);
-        defaultSet.add(JobNamePrinterColumn.class);
-        defaultSet.add(LoacationPrinterColumn.class);
-        defaultSet.add(ActivityLoadChangePrinterColumn.class);
-        defaultSet.add(OperationDurationPrinterColumn.class);
-        defaultSet.add(ArrivalTimePrinterColumn.class);
-        defaultSet.add(StartTimePrinterColumn.class);
-        defaultSet.add(EndTimePrinterColumn.class);
-        defaultSet.add(ActivityCostPrinterColumn.class);
-        defaultSet.add(RouteCostPrinterColumn.class);
-        COLUMNS.put(PredefinedList.DEFAULT, defaultSet);
-
-        List<Class<? extends AbstractPrinterColumn<RoutePrinterContext, ?, ?>>> verboseSet = new ArrayList<>();
-        verboseSet.add(RouteNumberPrinterColumn.class);
-        verboseSet.add(VehicleNamePrinterColumn.class);
-        verboseSet.add(ActivityTypePrinterColumn.class);
-
-        verboseSet.add(JobNamePrinterColumn.class);
-        verboseSet.add(JobTypePrinterColumn.class);
-        verboseSet.add(JobPriorityPrinterColumn.class);
-
-        verboseSet.add(LoacationPrinterColumn.class);
-        verboseSet.add(ActivityLoadChangePrinterColumn.class);
-        verboseSet.add(RouteLoadPrinterColumn.class);
-        verboseSet.add(TimeWindowsPrinterColumn.class);
-
-        verboseSet.add(OperationDurationPrinterColumn.class);
-        verboseSet.add(TravelDurationPrinterColumn.class);
-        verboseSet.add(WaitingDurationPrinterColumn.class);
-        verboseSet.add(ActivityDurationPrinterColumn.class);
-
-        verboseSet.add(ArrivalTimePrinterColumn.class);
-        verboseSet.add(StartTimePrinterColumn.class);
-        verboseSet.add(EndTimePrinterColumn.class);
-        verboseSet.add(SelectedTimeWindowPrinterColumn.class);
-
-        verboseSet.add(TransportCostPrinterColumn.class);
-        verboseSet.add(ActivityCostPrinterColumn.class);
-        verboseSet.add(RouteCostPrinterColumn.class);
-
-        COLUMNS.put(PredefinedList.VERBOSE, verboseSet);
-    }
-
-    /**
-     * Returns the predefined column set with all time, time window and duration
-     * columns printed as numbers.
-     *
-     * @param listType
-     *            The predefined list id.
-     * @return The column list containing the predefined columns.
-     */
-    public static PrinterColumnList<RoutePrinterContext> getNumeric(PredefinedList listType) {
-        return getList(listType, false, null);
-    }
-
-    /**
-     * Returns the predefined column set with all time, time window and duration
-     * columns printed with human readable format, using default formatting.
-     *
-     * @param listType
-     *            The predefined list id.
-     * @return The column list containing the predefined columns.
-     */
-    public static PrinterColumnList<RoutePrinterContext> getHumanReadable(PredefinedList listType) {
-        return getList(listType, true, null);
-    }
-
-    /**
-     * Returns the predefined column set with all time, time window and duration
-     * columns printed with human readable format, using the provided formatter.
-     *
-     * @param listType
-     *            The predefined list id.
-     * @param timeFormatter
-     *            the time formatter to use
-     * @return The column list containing the predefined columns.
-     */
-    public static PrinterColumnList<RoutePrinterContext> getHumanReadable(PredefinedList listType,
-                    HumanReadableTimeFormatter timeFormatter) {
-        return getList(listType, true, timeFormatter);
-    }
-
-    /**
-     * Generates the list.
-     *
-     * @param listType
-     *            The id of the list.
-     * @param humanReadable
-     *            Whether human readable format should be used
-     * @param timeFormatter
-     *            The formatter to use (if null, the default will be used)
-     * @return The generated column list.
-     */
-    private static PrinterColumnList<RoutePrinterContext> getList(PredefinedList listType, boolean humanReadable,
-                    HumanReadableTimeFormatter timeFormatter) {
-        PrinterColumnList<RoutePrinterContext> res = new PrinterColumnList<>();
-
-        for (Class<? extends AbstractPrinterColumn<RoutePrinterContext, ?, ?>> c : COLUMNS.get(listType)) {
-            try {
-                AbstractPrinterColumn<RoutePrinterContext, ?, ?> col = c.newInstance();
-                if (humanReadable && col instanceof HumanReadableEnabled) {
-                    HumanReadableEnabled<?> hrCol = (HumanReadableEnabled<?>) col;
-                    hrCol.asHumanReadable();
-                    if (timeFormatter != null) {
-                        hrCol.withFormatter(timeFormatter);
-                    }
-                }
-                res.addColumn(col);
-            } catch (InstantiationException | IllegalAccessException e) {
-                // Technically you can't get here as long as all column
-                // implementation has default constructor
-                throw new IllegalStateException(e);
-            }
-        }
-
-        return res;
-    }
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/StringColumnType.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/StringColumnType.java
deleted file mode 100644
index 4468eb336..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/columndefinition/StringColumnType.java
+++ /dev/null
@@ -1,42 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.columndefinition;
-
-/**
- * A column type for any values.
- *
- * @author balage
- *
- */
-public class StringColumnType extends AbstractColumnType<Object> {
-
-    /**
-     * Konstructor. The column will use the default values for null.
-     */
-    public StringColumnType() {
-        super();
-    }
-
-    /**
-     * Konstructor.
-     *
-     * @param nullValue
-     *            The text representation for null values.
-     */
-    public StringColumnType(String nullValue) {
-        super(nullValue);
-    }
-
-    @Override
-    protected String convertNotNull(Object data) {
-        return data.toString();
-    }
-
-    /**
-     * {@inheritDoc} Accepts any type of values (uses
-     * {@linkplain Object#toString()}).
-     */
-    @Override
-    public boolean accepts(Object data) {
-        return true;
-    }
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/job/JobNamePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/job/JobNamePrinterColumn.java
deleted file mode 100644
index f141152ed..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/job/JobNamePrinterColumn.java
+++ /dev/null
@@ -1,53 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.job;
-
-import java.util.function.Consumer;
-
-import com.graphhopper.jsprit.core.problem.job.AbstractJob;
-import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
-
-/**
- * Name (id) of the job.
- *
- * <p>
- * This column provides the {@linkplain Job#getId()} of the associated job of
- * the activity for job activities and null for other route activities.
- * </p>
- *
- * @author balage
- */
-public class JobNamePrinterColumn<T extends JobPrinterContext> extends AbstractPrinterColumn<T, String, JobNamePrinterColumn<T>> {
-
-    /**
-     * Constructor.
-     */
-    public JobNamePrinterColumn() {
-        super();
-    }
-
-    /**
-     * Constructor with a post creation decorator provided.
-     */
-    public JobNamePrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
-        super(decorator);
-    }
-
-    @Override
-    public ColumnDefinition.Builder getColumnBuilder() {
-        return new ColumnDefinition.Builder(new StringColumnType("-"));
-    }
-
-    @Override
-    protected String getDefaultTitle() {
-        return "job name";
-    }
-
-    @Override
-    public String getData(T context) {
-        AbstractJob job = context.getJob();
-        return job == null ? null : job.getId();
-    }
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/job/JobPrinterContext.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/job/JobPrinterContext.java
deleted file mode 100644
index 08e1bc591..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/job/JobPrinterContext.java
+++ /dev/null
@@ -1,21 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.job;
-
-import com.graphhopper.jsprit.core.problem.job.AbstractJob;
-import com.graphhopper.jsprit.core.reporting.PrinterContext;
-
-/**
- * The context of the detailed route printer columns.
- *
- * <p>
- * This is a semi-mutable class: only the activity could be altered. Therefore
- * for each route a new instance should be created.
- * </p>
- *
- * @author balage
- *
- */
-public interface JobPrinterContext extends PrinterContext {
-
-    public AbstractJob getJob();
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/job/JobPriorityPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/job/JobPriorityPrinterColumn.java
deleted file mode 100644
index 524bdd7d8..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/job/JobPriorityPrinterColumn.java
+++ /dev/null
@@ -1,58 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.job;
-
-import java.util.function.Consumer;
-
-import com.graphhopper.jsprit.core.problem.job.AbstractJob;
-import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnAlignment;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
-
-/**
- * Priority of the job.
- *
- * <p>
- * This column provides the named (LOW, MEDIUM, HIGH) representation of
- * {@linkplain Job#getPriority()} of the associated job of the activity for job
- * activities and null for other route activities.
- * </p>
- *
- * @author balage
- */
-public class JobPriorityPrinterColumn<T extends JobPrinterContext>
-                extends AbstractPrinterColumn<T, String, JobPriorityPrinterColumn<T>> {
-
-    private static final String[] PRIORITY_NAMES = new String[] { "", "HIGH", "MEDIUM", "LOW" };
-
-    /**
-     * Constructor.
-     */
-    public JobPriorityPrinterColumn() {
-        super();
-    }
-
-    /**
-     * Constructor with a post creation decorator provided.
-     */
-    public JobPriorityPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
-        super(decorator);
-    }
-
-    @Override
-    public ColumnDefinition.Builder getColumnBuilder() {
-        return new ColumnDefinition.Builder(new StringColumnType("-")).withAlignment(ColumnAlignment.CENTER);
-    }
-
-    @Override
-    protected String getDefaultTitle() {
-        return "priority";
-    }
-
-    @Override
-    public String getData(T context) {
-        AbstractJob job = context.getJob();
-        return job == null ? null : PRIORITY_NAMES[job.getPriority()];
-    }
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/job/JobTypePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/job/JobTypePrinterColumn.java
deleted file mode 100644
index e51a1c7bb..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/job/JobTypePrinterColumn.java
+++ /dev/null
@@ -1,52 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.job;
-
-import java.util.function.Consumer;
-
-import com.graphhopper.jsprit.core.problem.job.AbstractJob;
-import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
-
-/**
- * Priority of the job.
- *
- * <p>
- * This column provides the simple class name of the associated job of the
- * activity for job activities and null for other route activities.
- * </p>
- *
- * @author balage
- */
-public class JobTypePrinterColumn<T extends JobPrinterContext> extends AbstractPrinterColumn<T, String, JobTypePrinterColumn<T>> {
-
-    /**
-     * Constructor.
-     */
-    public JobTypePrinterColumn() {
-        super();
-    }
-
-    /**
-     * Constructor with a post creation decorator provided.
-     */
-    public JobTypePrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
-        super(decorator);
-    }
-
-    @Override
-    public ColumnDefinition.Builder getColumnBuilder() {
-        return new ColumnDefinition.Builder(new StringColumnType("-"));
-    }
-
-    @Override
-    protected String getDefaultTitle() {
-        return "job type";
-    }
-
-    @Override
-    public String getData(JobPrinterContext context) {
-        AbstractJob job = context.getJob();
-        return job == null ? null : job.getClass().getSimpleName();
-    }
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractCostPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractCostPrinterColumn.java
deleted file mode 100644
index d12b6e8d6..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractCostPrinterColumn.java
+++ /dev/null
@@ -1,38 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.route;
-
-import java.util.function.Consumer;
-
-import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnAlignment;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.columndefinition.IntColumnType;
-
-/**
- * Abstract base class for cost calculators.
- *
- * <p>
- * this implementation only defines the ColumnDefinition as a right aligned
- * integer column.
- * </p>
- *
- * @author balage
- *
- */
-public abstract class AbstractCostPrinterColumn
-extends AbstractPrinterColumn<RoutePrinterContext, Integer, AbstractCostPrinterColumn>
-implements CostAndTimeExtractor {
-
-    public AbstractCostPrinterColumn() {
-        super();
-    }
-
-    public AbstractCostPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
-        super(decorator);
-    }
-
-    @Override
-    public ColumnDefinition.Builder getColumnBuilder() {
-        return new ColumnDefinition.Builder(new IntColumnType()).withAlignment(ColumnAlignment.RIGHT);
-    }
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractDurationPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractDurationPrinterColumn.java
deleted file mode 100644
index 157db7bf7..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractDurationPrinterColumn.java
+++ /dev/null
@@ -1,36 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.route;
-
-import java.util.function.Consumer;
-
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.columndefinition.HumanReadableDurationFormatter;
-
-/**
- * Abstract base class for duration columns.
- *
- * @author balage
- *
- * @param <T>
- *            Self reference.
- * @See {@linkplain AbstractTimePrinterColumn}
- */
-public abstract class AbstractDurationPrinterColumn<T extends AbstractDurationPrinterColumn<T>>
-extends AbstractTimePrinterColumn<T> {
-
-    /**
-     * Constructor to define a numeric format column.
-     */
-    public AbstractDurationPrinterColumn() {
-        this(null);
-    }
-
-    /**
-     * Constructor to define a numeric format column, with a post creation
-     * decorator provided.
-     */
-    public AbstractDurationPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
-        super(decorator);
-        withFormatter(new HumanReadableDurationFormatter());
-    }
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractSizeDimensionPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractSizeDimensionPrinterColumn.java
deleted file mode 100644
index 999532a84..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractSizeDimensionPrinterColumn.java
+++ /dev/null
@@ -1,85 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.route;
-
-import java.util.function.Consumer;
-import java.util.stream.Collectors;
-import java.util.stream.IntStream;
-
-import com.graphhopper.jsprit.core.problem.SizeDimension;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.columndefinition.HumanReadableTimeFormatter;
-import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
-
-/**
- * Abstract base class for size columns.
- *
- * <p>
- * The representation of a size is the dimension values listed comma separated
- * and wrapped by brackets. (For example: [2, 0, -1])
- * </p>
- *
- * @author balage
- *
- * @See {@linkplain HumanReadableTimeFormatter}
- */
-public abstract class AbstractSizeDimensionPrinterColumn
-extends AbstractPrinterColumn<RoutePrinterContext, String, AbstractSizeDimensionPrinterColumn> {
-
-    /**
-     * Constructor.
-     */
-    public AbstractSizeDimensionPrinterColumn() {
-        super();
-    }
-
-    /**
-     * Constructor with a post creation decorator provided.
-     */
-    public AbstractSizeDimensionPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
-        super(decorator);
-    }
-
-    @Override
-    public ColumnDefinition.Builder getColumnBuilder() {
-        return new ColumnDefinition.Builder(new StringColumnType());
-    }
-
-    /**
-     * {@inheritDoc}
-     *
-     * <p>
-     * The result is a string representation of the size (the dimension values
-     * listed comma separated and wrapped by brackets) or null.
-     * </p>
-     */
-    @Override
-    public String getData(RoutePrinterContext context) {
-        SizeDimension sd = getSizeDimension(context);
-        if (sd != null) {
-            return IntStream.range(0, sd.getNuOfDimensions()).mapToObj(i -> "" + sd.get(i))
-                            .collect(Collectors.joining(", ", "[", "]"));
-        } else {
-            return null;
-        }
-    }
-
-    /**
-     * Extracts the size dimension.
-     *
-     * @param context
-     *            The context.
-     * @return The size dimension or null.
-     */
-    protected abstract SizeDimension getSizeDimension(RoutePrinterContext context);
-
-    protected SizeDimension calculateInitialLoad(RoutePrinterContext context) {
-        SizeDimension sd = SizeDimension.EMPTY;
-        for (TourActivity a : context.getRoute().getActivities()) {
-            sd = sd.add(a.getLoadChange());
-        }
-        sd = sd.getNegativeDimensions().abs();
-        return sd;
-    }
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractTimePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractTimePrinterColumn.java
deleted file mode 100644
index 14639f364..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractTimePrinterColumn.java
+++ /dev/null
@@ -1,125 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.route;
-
-import java.util.function.Consumer;
-
-import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.columndefinition.HumanReadableEnabled;
-import com.graphhopper.jsprit.core.reporting.columndefinition.HumanReadableTimeFormatter;
-import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
-
-/**
- * Abstract base class for time and (technically) duration columns.
- *
- * <p>
- * Each columns derived from this abstract base has two variants: a numerical
- * (an integer value) and a human readable. The numerical value displays the
- * integer value representing the time values internally. The human readable
- * value converts this value into a calendar (date and time) value.
- * </p>
- *
- * @author balage
- *
- * @param <T>
- *            Self reference.
- * @See {@linkplain HumanReadableTimeFormatter}
- */
-public abstract class AbstractTimePrinterColumn<T extends AbstractTimePrinterColumn<T>>
-extends AbstractPrinterColumn<RoutePrinterContext, String, AbstractTimePrinterColumn<T>>
-implements HumanReadableEnabled<T> {
-
-    // The time formatter to use (only used when humanReadable flag is true)
-    private HumanReadableTimeFormatter formatter;
-    // Whether to use human readable form
-    private boolean humanReadable = false;
-
-    /**
-     * Constructor to define a numeric format column.
-     */
-    public AbstractTimePrinterColumn() {
-        this(null);
-    }
-
-    /**
-     * Constructor to define a numeric format column, with a post creation
-     * decorator provided.
-     */
-    public AbstractTimePrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
-        super(decorator);
-        formatter = new HumanReadableTimeFormatter();
-    }
-
-    /**
-     * {@inheritDoc}
-     *
-     */
-    @Override
-    @SuppressWarnings("unchecked")
-    public T withFormatter(HumanReadableTimeFormatter formatter) {
-        this.formatter = formatter;
-        return (T) this;
-    }
-
-    /**
-     * {@inheritDoc}
-     *
-     */
-    @Override
-    @SuppressWarnings("unchecked")
-    public T asHumanReadable() {
-        this.humanReadable = true;
-        return (T) this;
-    }
-
-
-    /**
-     * {@inheritDoc}
-     *
-     * <p>
-     * The column builder returned will be a string column with the null value
-     * represented by a hyphen ("-").
-     * </p>
-     *
-     */
-    @Override
-    public ColumnDefinition.Builder getColumnBuilder() {
-        return new ColumnDefinition.Builder(new StringColumnType("-"));
-    }
-
-    /**
-     * {@inheritDoc}
-     *
-     * <p>
-     * The implementation delegates the value extracting to the abstract method
-     * {@linkplain #getValue(RoutePrinterContext)}.
-     * <p>
-     * <p>
-     * If the value is null, returns null, otherwise it returns the string
-     * representation of the numeric value or the human readable format based on
-     * the humanReadable flag.
-     * </p>
-     *
-     */
-    @Override
-    public String getData(RoutePrinterContext context) {
-        Long timeValue = getValue(context);
-        if (timeValue == null) {
-            return null;
-        }
-        if (humanReadable) {
-            return formatter.format(timeValue);
-        } else {
-            return ""+timeValue;
-        }
-    }
-
-    /**
-     * Extracts the numerical value for this time or duration column.
-     *
-     * @param context
-     *            The context.
-     * @return The numerical value or null.
-     */
-    protected abstract Long getValue(RoutePrinterContext context);
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractTimeWindowPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractTimeWindowPrinterColumn.java
deleted file mode 100644
index 7a3dfde8f..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractTimeWindowPrinterColumn.java
+++ /dev/null
@@ -1,145 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.route;
-
-import java.util.Collection;
-import java.util.function.Consumer;
-import java.util.stream.Collectors;
-
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
-import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.columndefinition.HumanReadableEnabled;
-import com.graphhopper.jsprit.core.reporting.columndefinition.HumanReadableTimeFormatter;
-import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
-
-/**
- * Abstract base class for time window columns.
- *
- * <p>
- * Each columns derived from this abstract base has two variants: a numerical
- * (an integer value) and a human readable. The numerical value displays the
- * integer value pair representing the time windows, the same the algorithm used
- * internally. The human readable value converts this value into a calendar
- * (date and time) value pair.
- * </p>
- *
- * @author balage
- *
- * @param <T>
- *            Self reference.
- * @See {@linkplain HumanReadableTimeFormatter}
- */
-public abstract class AbstractTimeWindowPrinterColumn<T extends AbstractTimeWindowPrinterColumn<T>>
-extends AbstractPrinterColumn<RoutePrinterContext, String, AbstractTimeWindowPrinterColumn<T>>
-implements HumanReadableEnabled<T> {
-
-    // The time formatter to use (only used when humanReadable flag is true)
-    private HumanReadableTimeFormatter formatter;
-    // Whether to use human readable form
-    private boolean humanReadable = false;
-
-    /**
-     * Constructor to define a numeric format column.
-     */
-    public AbstractTimeWindowPrinterColumn() {
-        this(null);
-    }
-
-    /**
-     * Constructor to define a numeric format column, with a post creation
-     * decorator provided.
-     */
-    public AbstractTimeWindowPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
-        super(decorator);
-        formatter = new HumanReadableTimeFormatter();
-    }
-
-    @Override
-    @SuppressWarnings("unchecked")
-    public T withFormatter(HumanReadableTimeFormatter formatter) {
-        this.formatter = formatter;
-        return (T) this;
-    }
-
-    @Override
-    @SuppressWarnings("unchecked")
-    public T asHumanReadable() {
-        this.humanReadable = true;
-        return (T) this;
-    }
-
-
-    @Override
-    public ColumnDefinition.Builder getColumnBuilder() {
-        return new ColumnDefinition.Builder(new StringColumnType("-"));
-    }
-
-    /**
-     * {@inheritDoc}
-     *
-     * <p>
-     * The implementation delegates the value extracting to the abstract method
-     * {@linkplain #getValue(RoutePrinterContext)}.
-     * <p>
-     * <p>
-     * If the value is null or empty, returns null, otherwise it returns the
-     * string representation of the numeric value or the human readable format
-     * based on the humanReadable flag.
-     * </p>
-     *
-     */
-    @Override
-    public String getData(RoutePrinterContext context) {
-        Collection<TimeWindow> timeWindows = getValue(context);
-        if (timeWindows == null || timeWindows.isEmpty()) {
-            return null;
-        }
-        return timeWindows.stream().map(tw -> formatTimeWindow(tw)).collect(Collectors.joining());
-    }
-
-    /**
-     * Formats the time window.
-     *
-     * <p>
-     * The implementation returns the two (start, end) values sepratated by
-     * hyphen (-) and wrapped within brackets. When the end value is
-     * {@linkplain Double#MAX_VALUE} it omits the value indicating open
-     * interval.
-     * </p>
-     *
-     * @param tw
-     *            The time window to format.
-     * @return The string representation of the time window.
-     */
-    protected String formatTimeWindow(TimeWindow tw) {
-        String res = "";
-        if (humanReadable) {
-            res = "[" + formatter.format((long) tw.getStart()) + "-";
-            if (tw.getEnd() == Double.MAX_VALUE) {
-                res += "";
-            } else {
-                res += formatter.format((long) tw.getEnd());
-            }
-            res += "]";
-
-        } else {
-            res = "[" + (long) tw.getStart() + "-";
-            if (tw.getEnd() == Double.MAX_VALUE) {
-                res += "";
-            } else {
-                res += (long) tw.getEnd();
-            }
-            res += "]";
-        }
-        return res;
-    }
-
-    /**
-     * Extracts the collection of time windows from the context.
-     * 
-     * @param context
-     *            The context.
-     * @return The collection of time windows.
-     */
-    protected abstract Collection<TimeWindow> getValue(RoutePrinterContext context);
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityCostPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityCostPrinterColumn.java
deleted file mode 100644
index e94fae46f..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityCostPrinterColumn.java
+++ /dev/null
@@ -1,40 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.route;
-
-import java.util.function.Consumer;
-
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-
-/**
- * Cost of the activity.
- *
- * @author balage
- *
- */
-public class ActivityCostPrinterColumn extends AbstractCostPrinterColumn {
-
-    /**
-     * Constructor.
-     */
-    public ActivityCostPrinterColumn() {
-        super();
-    }
-
-    /**
-     * Constructor with a post creation decorator provided.
-     */
-    public ActivityCostPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
-        super(decorator);
-    }
-
-
-    @Override
-    protected String getDefaultTitle() {
-        return "actCost";
-    }
-
-    @Override
-    public Integer getData(RoutePrinterContext context) {
-        return (int) getActivityCost(context);
-    }
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityDurationPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityDurationPrinterColumn.java
deleted file mode 100644
index 383c6f169..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityDurationPrinterColumn.java
+++ /dev/null
@@ -1,66 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.route;
-
-import java.util.function.Consumer;
-
-import com.graphhopper.jsprit.core.problem.solution.route.activity.Start;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-
-/**
- * Activity duration column.
- * <p>
- * The activity duration is the sum of the activity operation (service) time and
- * the transport time to the location.
- * </p>
- * <p>
- * This column is stateful and stores the previous activity.
- * </p>
- *
- * @author balage
- *
- * @see {@linkplain ArrivalTimePrinterColumn}
- * @see {@linkplain StartTimePrinterColumn}
- * @see {@linkplain EndTimePrinterColumn}
- * @see {@linkplain TravelDurationPrinterColumn}
- * @see {@linkplain WaitingDurationPrinterColumn}
- * @see {@linkplain OperationDurationPrinterColumn}
- */
-public class ActivityDurationPrinterColumn extends AbstractDurationPrinterColumn<ActivityDurationPrinterColumn>
-implements CostAndTimeExtractor {
-
-    // The previous activity
-    private TourActivity prevAct;
-
-    /**
-     * Constructor.
-     */
-    public ActivityDurationPrinterColumn() {
-        super();
-    }
-
-    /**
-     * Constructor with a post creation decorator provided.
-     */
-    public ActivityDurationPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
-        super(decorator);
-    }
-
-
-    @Override
-    protected String getDefaultTitle() {
-        return "duration";
-    }
-
-    @Override
-    public Long getValue(RoutePrinterContext context) {
-        TourActivity act = context.getActivity();
-        if (act instanceof Start) {
-            prevAct = null;
-        }
-        long val = (long) (getTransportTime(context, prevAct) + act.getOperationTime());
-        prevAct = act;
-        return val;
-    }
-
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityLoadChangePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityLoadChangePrinterColumn.java
deleted file mode 100644
index 9aaceaa90..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityLoadChangePrinterColumn.java
+++ /dev/null
@@ -1,65 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.route;
-
-import java.util.function.Consumer;
-
-import com.graphhopper.jsprit.core.problem.SizeDimension;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.Start;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-
-/**
- * The load change value (signed size) of the activity.
- * 
- * <p>
- * If the activity is a route start, the returned value is the initial load,
- * otherwise the loadChange value of the activity.
- * </p>
- *
- * @author balage
- *
- */
-public class ActivityLoadChangePrinterColumn extends AbstractSizeDimensionPrinterColumn {
-
-    /**
-     * Constructor.
-     */
-    public ActivityLoadChangePrinterColumn() {
-        super();
-    }
-
-    /**
-     * Constructor with a post creation decorator provided.
-     */
-    public ActivityLoadChangePrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
-        super(decorator);
-    }
-
-    @Override
-    public ColumnDefinition.Builder getColumnBuilder() {
-        return super.getColumnBuilder().withMinWidth(10);
-    }
-
-    @Override
-    protected String getDefaultTitle() {
-        return "load change";
-    }
-
-    /**
-     * {@inheritDoc}
-     * <p>
-     * If the activity is a route start, the returned value is the initial load,
-     * otherwise the loadChange value of the activity.
-     * </p>
-     */
-    @Override
-    protected SizeDimension getSizeDimension(RoutePrinterContext context) {
-        TourActivity act = context.getActivity();
-        if (act instanceof Start) {
-            return calculateInitialLoad(context);
-        } else {
-            return act.getLoadChange();
-        }
-    }
-
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityTypePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityTypePrinterColumn.java
deleted file mode 100644
index d2e87c0d1..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityTypePrinterColumn.java
+++ /dev/null
@@ -1,47 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.route;
-
-import java.util.function.Consumer;
-
-import com.graphhopper.jsprit.core.problem.solution.route.activity.AbstractActivity;
-import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
-
-/**
- * The type of the activity.
- *
- * @author balage
- *
- */
-public class ActivityTypePrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, String, ActivityTypePrinterColumn> {
-
-    /**
-     * Constructor.
-     */
-    public ActivityTypePrinterColumn() {
-        super();
-    }
-
-    /**
-     * Constructor with a post creation decorator provided.
-     */
-    public ActivityTypePrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
-        super(decorator);
-    }
-
-    @Override
-    public ColumnDefinition.Builder getColumnBuilder() {
-        return new ColumnDefinition.Builder(new StringColumnType());
-    }
-
-    @Override
-    public String getData(RoutePrinterContext context) {
-        return ((AbstractActivity) context.getActivity()).getType();
-    }
-
-    @Override
-    protected String getDefaultTitle() {
-        return "activity";
-    }
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ArrivalTimePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ArrivalTimePrinterColumn.java
deleted file mode 100644
index b4fb6f82f..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ArrivalTimePrinterColumn.java
+++ /dev/null
@@ -1,59 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.route;
-
-import java.util.function.Consumer;
-
-import com.graphhopper.jsprit.core.problem.solution.route.activity.Start;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-
-/**
- * Arrival time of the activity.
- * <p>
- * For route start the value is undefined (null), for other activities, it is
- * the earliest time the location of the activity is reached. (Note, that it is
- * not the time the activity is started, there may be an idle time before.)
- * </p>
- *
- * @author balage
- *
- * @see {@linkplain StartTimePrinterColumn}
- * @see {@linkplain EndTimePrinterColumn}
- * @see {@linkplain TravelDurationPrinterColumn}
- * @see {@linkplain WaitingDurationPrinterColumn}
- * @see {@linkplain OperationDurationPrinterColumn}
- * @see {@linkplain ActivityDurationPrinterColumn}
- */
-public class ArrivalTimePrinterColumn extends AbstractTimePrinterColumn<ArrivalTimePrinterColumn> {
-
-    /**
-     * Constructor.
-     */
-    public ArrivalTimePrinterColumn() {
-        super();
-    }
-
-    /**
-     * Constructor with a post creation decorator provided.
-     */
-    public ArrivalTimePrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
-        super(decorator);
-    }
-
-
-    @Override
-    protected String getDefaultTitle() {
-        return "arrTime";
-    }
-
-    @Override
-    public Long getValue(RoutePrinterContext context) {
-        TourActivity act = context.getActivity();
-        if (act instanceof Start) {
-            return null;
-        } else {
-            return (long) act.getArrTime();
-        }
-    }
-
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/CostAndTimeExtractor.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/CostAndTimeExtractor.java
deleted file mode 100644
index e374708e6..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/CostAndTimeExtractor.java
+++ /dev/null
@@ -1,55 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.route;
-
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-
-/**
- * Utility interface for extracting cost and time values from problem.
- *
- * @author balage
- *
- */
-public interface CostAndTimeExtractor {
-
-    /**
-     * Returns the activity cost extracted from the context.
-     *
-     * @param context
-     *            The context.
-     * @return The activity cost.
-     */
-    default double getActivityCost(RoutePrinterContext context) {
-        return context.getProblem().getActivityCosts().getActivityCost(context.getActivity(),
-                        context.getActivity().getArrTime(), context.getRoute().getDriver(), context.getRoute().getVehicle());
-    }
-
-    /**
-     * Returns the transport cost extracted from the context.
-     *
-     * @param context
-     *            The context.
-     * @return The transport cost.
-     */
-    default double getTransportCost(RoutePrinterContext context, TourActivity prevAct) {
-        return prevAct == null ? 0d
-                        : context.getProblem().getTransportCosts().getTransportCost(prevAct.getLocation(),
-                                        context.getActivity().getLocation(),
-                                        context.getActivity().getArrTime(), context.getRoute().getDriver(),
-                                        context.getRoute().getVehicle());
-    }
-
-    /**
-     * Returns the transport time extracted from the context.
-     *
-     * @param context
-     *            The context.
-     * @return The transpoert time.
-     */
-    default double getTransportTime(RoutePrinterContext context, TourActivity prevAct) {
-        return prevAct == null ? 0d
-                        : context.getProblem().getTransportCosts().getTransportTime(prevAct.getLocation(),
-                                        context.getActivity().getLocation(),
-                                        context.getActivity().getArrTime(), context.getRoute().getDriver(),
-                                        context.getRoute().getVehicle());
-    }
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/EndTimePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/EndTimePrinterColumn.java
deleted file mode 100644
index 6f8418835..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/EndTimePrinterColumn.java
+++ /dev/null
@@ -1,58 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.route;
-
-import java.util.function.Consumer;
-
-import com.graphhopper.jsprit.core.problem.solution.route.activity.End;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-
-/**
- * End time of the activity.
- * <p>
- * For route end the value is undefined (null), for other activities, it is the
- * time when the activity is finished and the vehicle could progress toward the
- * next activity.
- * </p>
- *
- * @author balage
- *
- * @see {@linkplain ArrivalTimePrinterColumn}
- * @see {@linkplain StartTimePrinterColumn}
- * @see {@linkplain TravelDurationPrinterColumn}
- * @see {@linkplain WaitingDurationPrinterColumn}
- * @see {@linkplain OperationDurationPrinterColumn}
- * @see {@linkplain ActivityDurationPrinterColumn}
- */
-public class EndTimePrinterColumn extends AbstractTimePrinterColumn<EndTimePrinterColumn> {
-
-    /**
-     * Constructor.
-     */
-    public EndTimePrinterColumn() {
-        super();
-    }
-
-    /**
-     * Constructor with a post creation decorator provided.
-     */
-    public EndTimePrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
-        super(decorator);
-    }
-
-    @Override
-    protected String getDefaultTitle() {
-        return "endTime";
-    }
-
-    @Override
-    public Long getValue(RoutePrinterContext context) {
-        TourActivity act = context.getActivity();
-        if (act instanceof End) {
-            return null;
-        } else {
-            return (long) act.getEndTime();
-        }
-    }
-
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/JobNamePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/JobNamePrinterColumn.java
deleted file mode 100644
index d58fafbe9..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/JobNamePrinterColumn.java
+++ /dev/null
@@ -1,53 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.route;
-
-import java.util.function.Consumer;
-
-import com.graphhopper.jsprit.core.problem.job.AbstractJob;
-import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
-
-/**
- * Name (id) of the job.
- *
- * <p>
- * This column provides the {@linkplain Job#getId()} of the associated job of
- * the activity for job activities and null for other route activities.
- * </p>
- *
- * @author balage
- */
-public class JobNamePrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, String, JobNamePrinterColumn> {
-
-    /**
-     * Constructor.
-     */
-    public JobNamePrinterColumn() {
-        super();
-    }
-
-    /**
-     * Constructor with a post creation decorator provided.
-     */
-    public JobNamePrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
-        super(decorator);
-    }
-
-    @Override
-    public ColumnDefinition.Builder getColumnBuilder() {
-        return new ColumnDefinition.Builder(new StringColumnType("-"));
-    }
-
-    @Override
-    protected String getDefaultTitle() {
-        return "job name";
-    }
-
-    @Override
-    public String getData(RoutePrinterContext context) {
-        AbstractJob job = context.getJob();
-        return job == null ? null : job.getId();
-    }
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/JobPriorityPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/JobPriorityPrinterColumn.java
deleted file mode 100644
index 6846f4ece..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/JobPriorityPrinterColumn.java
+++ /dev/null
@@ -1,57 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.route;
-
-import java.util.function.Consumer;
-
-import com.graphhopper.jsprit.core.problem.job.AbstractJob;
-import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnAlignment;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
-
-/**
- * Priority of the job.
- *
- * <p>
- * This column provides the named (LOW, MEDIUM, HIGH) representation of
- * {@linkplain Job#getPriority()} of the associated job of the activity for job
- * activities and null for other route activities.
- * </p>
- *
- * @author balage
- */
-public class JobPriorityPrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, String, JobPriorityPrinterColumn> {
-
-    private static final String[] PRIORITY_NAMES = new String[] { "", "HIGH", "MEDIUM", "LOW" };
-
-    /**
-     * Constructor.
-     */
-    public JobPriorityPrinterColumn() {
-        super();
-    }
-
-    /**
-     * Constructor with a post creation decorator provided.
-     */
-    public JobPriorityPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
-        super(decorator);
-    }
-
-    @Override
-    public ColumnDefinition.Builder getColumnBuilder() {
-        return new ColumnDefinition.Builder(new StringColumnType("-")).withAlignment(ColumnAlignment.CENTER);
-    }
-
-    @Override
-    protected String getDefaultTitle() {
-        return "priority";
-    }
-
-    @Override
-    public String getData(RoutePrinterContext context) {
-        AbstractJob job = context.getJob();
-        return job == null ? null : PRIORITY_NAMES[job.getPriority()];
-    }
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/JobTypePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/JobTypePrinterColumn.java
deleted file mode 100644
index 670160eea..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/JobTypePrinterColumn.java
+++ /dev/null
@@ -1,52 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.route;
-
-import java.util.function.Consumer;
-
-import com.graphhopper.jsprit.core.problem.job.AbstractJob;
-import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
-
-/**
- * Priority of the job.
- *
- * <p>
- * This column provides the simple class name of the associated job of the
- * activity for job activities and null for other route activities.
- * </p>
- *
- * @author balage
- */
-public class JobTypePrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, String, JobTypePrinterColumn> {
-
-    /**
-     * Constructor.
-     */
-    public JobTypePrinterColumn() {
-        super();
-    }
-
-    /**
-     * Constructor with a post creation decorator provided.
-     */
-    public JobTypePrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
-        super(decorator);
-    }
-
-    @Override
-    public ColumnDefinition.Builder getColumnBuilder() {
-        return new ColumnDefinition.Builder(new StringColumnType("-"));
-    }
-
-    @Override
-    protected String getDefaultTitle() {
-        return "job type";
-    }
-
-    @Override
-    public String getData(RoutePrinterContext context) {
-        AbstractJob job = context.getJob();
-        return job == null ? null : job.getClass().getSimpleName();
-    }
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/LoacationPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/LoacationPrinterColumn.java
deleted file mode 100644
index 9895b4bf2..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/LoacationPrinterColumn.java
+++ /dev/null
@@ -1,54 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.route;
-
-import java.util.function.Consumer;
-
-import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
-
-/**
- * Priority of the job.
- *
- * <p>
- * This column provides the simple class name of the associated job of the
- * activity for job activities and null for other route activities.
- * </p>
- *
- * @author balage
- */
-public class LoacationPrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, String, LoacationPrinterColumn> {
-
-    /**
-     * Constructor.
-     */
-    public LoacationPrinterColumn() {
-        super();
-    }
-
-    /**
-     * Constructor with a post creation decorator provided.
-     */
-    public LoacationPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
-        super(decorator);
-    }
-
-    @Override
-    public ColumnDefinition.Builder getColumnBuilder() {
-        return new ColumnDefinition.Builder(new StringColumnType("-"));
-    }
-
-    @Override
-    protected String getDefaultTitle() {
-        return "location";
-    }
-
-    @Override
-    public String getData(RoutePrinterContext context) {
-        TourActivity act = context.getActivity();
-        Location loc = act.getLocation();
-        return loc == null ? null : loc.getId();
-    }
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/OperationDurationPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/OperationDurationPrinterColumn.java
deleted file mode 100644
index b4ea2c839..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/OperationDurationPrinterColumn.java
+++ /dev/null
@@ -1,53 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.route;
-
-import java.util.function.Consumer;
-
-import com.graphhopper.jsprit.core.problem.solution.route.activity.AbstractActivity;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-
-/**
- * Duration of the activity.
- * <p>
- * The time it takes to complete the on-site task of the activity. This is the
- * value from {@linkplain AbstractActivity#getOperationTime()}.
- * </p>
- *
- * @author balage
- *
- * @see {@linkplain ArrivalTimePrinterColumn}
- * @see {@linkplain StartTimePrinterColumn}
- * @see {@linkplain EndTimePrinterColumn}
- * @see {@linkplain TravelDurationPrinterColumn}
- * @see {@linkplain WaitingDurationPrinterColumn}
- * @see {@linkplain ActivityDurationPrinterColumn}
- */
-public class OperationDurationPrinterColumn extends AbstractDurationPrinterColumn<OperationDurationPrinterColumn> {
-
-    /**
-     * Constructor.
-     */
-    public OperationDurationPrinterColumn() {
-        super();
-    }
-
-    /**
-     * Constructor with a post creation decorator provided.
-     */
-    public OperationDurationPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
-        super(decorator);
-    }
-
-
-    @Override
-    protected String getDefaultTitle() {
-        return "opTime";
-    }
-
-    @Override
-    public Long getValue(RoutePrinterContext context) {
-        TourActivity act = context.getActivity();
-        return (long) act.getOperationTime();
-    }
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RouteCostPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RouteCostPrinterColumn.java
deleted file mode 100644
index a691628f0..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RouteCostPrinterColumn.java
+++ /dev/null
@@ -1,62 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.route;
-
-import java.util.function.Consumer;
-
-import com.graphhopper.jsprit.core.problem.solution.route.activity.Start;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-
-/**
- * The aggregated cost of the route from start till the current activity.
- *
- * <p>
- * This column sumarizes the cost of all activities from start till the current
- * activity.
- * </p>
- * <p>
- * This column is stateful and stores the sum from the prior activities on the
- * route.
- * </p>
- *
- * @author balage
- */
-public class RouteCostPrinterColumn extends TransportCostPrinterColumn {
-
-    // The aggregated cost of the route so far.
-    private int aggregatedCost = 0;
-
-    /**
-     * Constructor.
-     */
-    public RouteCostPrinterColumn() {
-        super();
-    }
-
-    /**
-     * Constructor with a post creation decorator provided.
-     */
-    public RouteCostPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
-        super(decorator);
-    }
-
-
-    @Override
-    protected String getDefaultTitle() {
-        return "routeCost";
-    }
-
-    @Override
-    public Integer getData(RoutePrinterContext context) {
-        if (context.getActivity() instanceof Start) {
-            aggregatedCost = 0;
-        }
-
-        Integer res = super.getData(context);
-        if (res != null) {
-            aggregatedCost += res;
-        }
-        aggregatedCost += getActivityCost(context);
-        return aggregatedCost;
-    }
-
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RouteLoadPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RouteLoadPrinterColumn.java
deleted file mode 100644
index af853990b..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RouteLoadPrinterColumn.java
+++ /dev/null
@@ -1,61 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.route;
-
-import java.util.function.Consumer;
-
-import com.graphhopper.jsprit.core.problem.SizeDimension;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.Start;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-
-/**
- * The load of the vehicle after the current activity is finished.
- *
- * <p>
- * This column represents the current load of the vehicle on the route after the
- * cargo load/unload performed on the activity. For the start activity (at the
- * start of the route) the value is the initialLoad.
- * </p>
- * <p>
- * This column is stateful and stores the vehicle load from the prior activity
- * on the route.
- * </p>
- *
- * @author balage
- */
-public class RouteLoadPrinterColumn extends AbstractSizeDimensionPrinterColumn {
-
-    // The current vehicle load
-    private SizeDimension aggregated;
-
-    /**
-     * Constructor.
-     */
-    public RouteLoadPrinterColumn() {
-        super();
-    }
-
-    /**
-     * Constructor with a post creation decorator provided.
-     */
-    public RouteLoadPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
-        super(decorator);
-    }
-
-    @Override
-    protected String getDefaultTitle() {
-        return "load";
-    }
-
-    @Override
-    protected SizeDimension getSizeDimension(RoutePrinterContext context) {
-        TourActivity act = context.getActivity();
-        if (act instanceof Start) {
-            aggregated = calculateInitialLoad(context);
-        } else {
-            aggregated = aggregated.add(act.getLoadChange());
-        }
-        return aggregated;
-    }
-
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RouteNumberPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RouteNumberPrinterColumn.java
deleted file mode 100644
index d15cbeede..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RouteNumberPrinterColumn.java
+++ /dev/null
@@ -1,49 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.route;
-
-import java.util.function.Consumer;
-
-import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.columndefinition.IntColumnType;
-
-/**
- * The order number of the route.
- *
- * <p>
- * This is the ordinal of the route.
- * </p>
- *
- * @author balage
- */
-public class RouteNumberPrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, Integer, RouteNumberPrinterColumn> {
-
-    /**
-     * Constructor.
-     */
-    public RouteNumberPrinterColumn() {
-        super();
-    }
-
-    /**
-     * Constructor with a post creation decorator provided.
-     */
-    public RouteNumberPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
-        super(decorator);
-    }
-
-    @Override
-    public ColumnDefinition.Builder getColumnBuilder() {
-        return new ColumnDefinition.Builder(new IntColumnType());
-    }
-
-    @Override
-    protected String getDefaultTitle() {
-        return "route";
-    }
-
-    @Override
-    public Integer getData(RoutePrinterContext context) {
-        return context.getRoute().getId();
-    }
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RoutePrinterContext.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RoutePrinterContext.java
deleted file mode 100644
index d868070bd..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RoutePrinterContext.java
+++ /dev/null
@@ -1,83 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.route;
-
-import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.job.AbstractJob;
-import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-import com.graphhopper.jsprit.core.reporting.job.JobPrinterContext;
-
-/**
- * The context of the detailed route printer columns.
- *
- * <p>
- * This is a semi-mutable class: only the activity could be altered. Therefore
- * for each route a new instance should be created.
- * </p>
- *
- * @author balage
- *
- */
-public class RoutePrinterContext implements JobPrinterContext {
-
-    // The route itself
-    private VehicleRoute route;
-    // The current activity
-    private TourActivity activity;
-    // The problem
-    private VehicleRoutingProblem problem;
-
-    /**
-     * Constructor.
-     *
-     * @param routeNr
-     *            route id
-     * @param route
-     *            the route
-     * @param activity
-     *            current activity
-     * @param problem
-     *            problem
-     */
-    public RoutePrinterContext(VehicleRoute route, TourActivity activity, VehicleRoutingProblem problem) {
-        super();
-        this.route = route;
-        this.activity = activity;
-        this.problem = problem;
-    }
-
-    /**
-     * @return The route itself.
-     */
-    public VehicleRoute getRoute() {
-        return route;
-    }
-
-    /**
-     * @return The current activity.
-     */
-    public TourActivity getActivity() {
-        return activity;
-    }
-
-    /**
-     * @param activity
-     *            The current activity.
-     */
-    public void setActivity(TourActivity activity) {
-        this.activity = activity;
-    }
-
-    /**
-     * @return The problem.
-     */
-    public VehicleRoutingProblem getProblem() {
-        return problem;
-    }
-
-    @Override
-    public AbstractJob getJob() {
-        return (getActivity() instanceof JobActivity) ? ((JobActivity) getActivity()).getJob() : null;
-    }
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/SelectedTimeWindowPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/SelectedTimeWindowPrinterColumn.java
deleted file mode 100644
index 6037d95fc..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/SelectedTimeWindowPrinterColumn.java
+++ /dev/null
@@ -1,74 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.route;
-
-import java.util.Collection;
-import java.util.Collections;
-import java.util.Optional;
-import java.util.function.Consumer;
-
-import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-
-/**
- * The time window used in activity.
- *
- * <p>
- * This is the time window which was choosen by the algorithm. The start time of
- * the activity is within this time window and the end time is within or matches
- * the end value of this time window.
- * </p>
- *
- * @author balage
- *
- * @see {@linkplain TimeWindowsPrinterColumn}
- * @see {@linkplain StartTimePrinterColumn}
- */
-public class SelectedTimeWindowPrinterColumn extends AbstractTimeWindowPrinterColumn<SelectedTimeWindowPrinterColumn> {
-
-    /**
-     * Constructor.
-     */
-    public SelectedTimeWindowPrinterColumn() {
-        super();
-    }
-
-    /**
-     * Constructor with a post creation decorator provided.
-     */
-    public SelectedTimeWindowPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
-        super(decorator);
-    }
-
-    @Override
-    protected String getDefaultTitle() {
-        return "selTimeWindow";
-    }
-
-    /**
-     * {@inheritDoc}
-     *
-     * <p>
-     * This implementation returns at most one time window: the one the activity
-     * start time is within.
-     * </p>
-     */
-    @Override
-    protected Collection<TimeWindow> getValue(RoutePrinterContext context) {
-        TourActivity act = context.getActivity();
-        if (act instanceof JobActivity) {
-            Optional<TimeWindow> optTw = ((JobActivity) act).getTimeWindows().stream()
-                            .filter(tw -> tw.contains(act.getEndTime() - act.getOperationTime()))
-                            .findAny();
-            if (optTw.isPresent()) {
-                return Collections.singleton(optTw.get());
-            } else {
-                return null;
-            }
-        } else {
-            return null;
-        }
-    }
-
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/StartTimePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/StartTimePrinterColumn.java
deleted file mode 100644
index 020158e88..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/StartTimePrinterColumn.java
+++ /dev/null
@@ -1,57 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.route;
-
-import java.util.function.Consumer;
-
-import com.graphhopper.jsprit.core.problem.solution.route.activity.End;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-
-/**
- * Start time of the activity.
- * <p>
- * For route end the value is undefined (null), for other activities, it is the
- * time when the task on location is effectively started.
- * </p>
- *
- * @author balage
- *
- * @see {@linkplain ArrivalTimePrinterColumn}
- * @see {@linkplain EndTimePrinterColumn}
- * @see {@linkplain TravelDurationPrinterColumn}
- * @see {@linkplain WaitingDurationPrinterColumn}
- * @see {@linkplain OperationDurationPrinterColumn}
- * @see {@linkplain ActivityDurationPrinterColumn}
- */
-public class StartTimePrinterColumn extends AbstractTimePrinterColumn<StartTimePrinterColumn> {
-
-    /**
-     * Constructor.
-     */
-    public StartTimePrinterColumn() {
-        super();
-    }
-
-    /**
-     * Constructor with a post creation decorator provided.
-     */
-    public StartTimePrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
-        super(decorator);
-    }
-
-    @Override
-    protected String getDefaultTitle() {
-        return "startTime";
-    }
-
-    @Override
-    public Long getValue(RoutePrinterContext context) {
-        TourActivity act = context.getActivity();
-        if (act instanceof End) {
-            return null;
-        } else {
-            return (long) (act.getEndTime() - act.getOperationTime());
-        }
-    }
-
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/TimeWindowsPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/TimeWindowsPrinterColumn.java
deleted file mode 100644
index 559862757..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/TimeWindowsPrinterColumn.java
+++ /dev/null
@@ -1,54 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.route;
-
-import java.util.Collection;
-import java.util.function.Consumer;
-
-import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-
-/**
- * The time windows of the activity.
- *
- * <p>
- * Returns all time windows assigned to the activity.
- * </p>
- *
- * @author balage
- *
- * @see {@linkplain SelectedTimeWindowPrinterColumn}
- */
-public class TimeWindowsPrinterColumn extends AbstractTimeWindowPrinterColumn<TimeWindowsPrinterColumn> {
-
-    /**
-     * Constructor.
-     */
-    public TimeWindowsPrinterColumn() {
-        super();
-    }
-
-    /**
-     * Constructor with a post creation decorator provided.
-     */
-    public TimeWindowsPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
-        super(decorator);
-    }
-
-    @Override
-    protected String getDefaultTitle() {
-        return "timeWindows";
-    }
-
-    @Override
-    protected Collection<TimeWindow> getValue(RoutePrinterContext context) {
-        TourActivity act = context.getActivity();
-        if (act instanceof JobActivity) {
-            return ((JobActivity) act).getTimeWindows();
-        } else {
-            return null;
-        }
-    }
-
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/TransportCostPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/TransportCostPrinterColumn.java
deleted file mode 100644
index b30a175ac..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/TransportCostPrinterColumn.java
+++ /dev/null
@@ -1,58 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.route;
-
-import java.util.function.Consumer;
-
-import com.graphhopper.jsprit.core.problem.solution.route.activity.Start;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-
-/**
- * The cost of travelling to the activity.
- *
- * <p>
- * This is the cost of the transport from the previous to this activity. For the
- * start of the route this value is undefined (null).
- * </p>
- * <p>
- * This column is stateful and stores the previous activity.
- * </p>
- *
- * @author balage
- */
-public class TransportCostPrinterColumn extends AbstractCostPrinterColumn {
-
-    // The previous activity
-    private TourActivity prevAct;
-
-    /**
-     * Constructor.
-     */
-    public TransportCostPrinterColumn() {
-        super();
-    }
-
-    /**
-     * Constructor with a post creation decorator provided.
-     */
-    public TransportCostPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
-        super(decorator);
-    }
-
-    @Override
-    protected String getDefaultTitle() {
-        return "transCost";
-    }
-
-
-    @Override
-    public Integer getData(RoutePrinterContext context) {
-        TourActivity act = context.getActivity();
-        if (act instanceof Start) {
-            prevAct = null;
-        }
-        double res = getTransportCost(context, prevAct);
-        prevAct = act;
-        return (int) res;
-    }
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/TravelDurationPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/TravelDurationPrinterColumn.java
deleted file mode 100644
index 82622a4e0..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/TravelDurationPrinterColumn.java
+++ /dev/null
@@ -1,66 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.route;
-
-import java.util.function.Consumer;
-
-import com.graphhopper.jsprit.core.problem.solution.route.activity.Start;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-
-/**
- * Travel duration toward the location of the activity.
- * <p>
- * The time it takes to travel to the location of the activity. The value is
- * undefined for route start activity (null).
- * </p>
- * <p>
- * This column is stateful and stores the previous activity.
- * </p>
- *
- * @author balage
- *
- * @see {@linkplain ArrivalTimePrinterColumn}
- * @see {@linkplain StartTimePrinterColumn}
- * @see {@linkplain EndTimePrinterColumn}
- * @see {@linkplain WaitingDurationPrinterColumn}
- * @see {@linkplain OperationDurationPrinterColumn}
- * @see {@linkplain ActivityDurationPrinterColumn}
- */
-public class TravelDurationPrinterColumn extends AbstractDurationPrinterColumn<TravelDurationPrinterColumn>
-implements CostAndTimeExtractor {
-
-    // The previous activity
-    private TourActivity prevAct;
-
-    /**
-     * Constructor.
-     */
-    public TravelDurationPrinterColumn() {
-        super();
-    }
-
-    /**
-     * Constructor with a post creation decorator provided.
-     */
-    public TravelDurationPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
-        super(decorator);
-    }
-
-
-    @Override
-    protected String getDefaultTitle() {
-        return "travel";
-    }
-
-    @Override
-    public Long getValue(RoutePrinterContext context) {
-        TourActivity act = context.getActivity();
-        if (act instanceof Start) {
-            prevAct = null;
-        }
-        long val = (long) (getTransportTime(context, prevAct));
-        prevAct = act;
-        return val;
-    }
-
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/VehicleNamePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/VehicleNamePrinterColumn.java
deleted file mode 100644
index 6ad29433a..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/VehicleNamePrinterColumn.java
+++ /dev/null
@@ -1,49 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.route;
-
-import java.util.function.Consumer;
-
-import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
-
-/**
- * The name of the vehicle associated by this route.
- *
- * <p>
- * This colum returns the id of the vehicle of the route.
- * </p>
- *
- * @author balage
- */
-public class VehicleNamePrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, String, VehicleNamePrinterColumn> {
-
-    /**
-     * Constructor.
-     */
-    public VehicleNamePrinterColumn() {
-        super();
-    }
-
-    /**
-     * Constructor with a post creation decorator provided.
-     */
-    public VehicleNamePrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
-        super(decorator);
-    }
-
-    @Override
-    public ColumnDefinition.Builder getColumnBuilder() {
-        return new ColumnDefinition.Builder(new StringColumnType());
-    }
-
-    @Override
-    protected String getDefaultTitle() {
-        return "vehicle";
-    }
-
-    @Override
-    public String getData(RoutePrinterContext context) {
-        return context.getRoute().getVehicle().getId();
-    }
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/WaitingDurationPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/WaitingDurationPrinterColumn.java
deleted file mode 100644
index fbaadcc07..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/WaitingDurationPrinterColumn.java
+++ /dev/null
@@ -1,61 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.route;
-
-import java.util.function.Consumer;
-
-import com.graphhopper.jsprit.core.problem.solution.route.activity.End;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.Start;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-
-/**
- * Idle duration before starting the activity.
- * <p>
- * This is the time duration between the vehicle arrives to the location (
- * {@linkplain ArrivalTimePrinterColumn}) and the activity could be started (
- * {@linkplain StartTimePrinterColumn}). For route start and end this value is
- * not defined (null).
- * </p>
- *
- * @author balage
- *
- * @see {@linkplain ArrivalTimePrinterColumn}
- * @see {@linkplain StartTimePrinterColumn}
- * @see {@linkplain EndTimePrinterColumn}
- * @see {@linkplain TravelDurationPrinterColumn}
- * @see {@linkplain OperationDurationPrinterColumn}
- * @see {@linkplain ActivityDurationPrinterColumn}
- */
-public class WaitingDurationPrinterColumn extends AbstractDurationPrinterColumn<WaitingDurationPrinterColumn> {
-
-    /**
-     * Constructor.
-     */
-    public WaitingDurationPrinterColumn() {
-        super();
-    }
-
-    /**
-     * Constructor with a post creation decorator provided.
-     */
-    public WaitingDurationPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
-        super(decorator);
-    }
-
-
-    @Override
-    protected String getDefaultTitle() {
-        return "waiting";
-    }
-
-    @Override
-    public Long getValue(RoutePrinterContext context) {
-        TourActivity act = context.getActivity();
-        if (act instanceof Start || act instanceof End) {
-            return null;
-        } else {
-            return (long) (act.getEndTime() - act.getOperationTime() - act.getArrTime());
-        }
-    }
-
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/AbstractVehicleDurationPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/AbstractVehicleDurationPrinterColumn.java
deleted file mode 100644
index 24c8b66d2..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/AbstractVehicleDurationPrinterColumn.java
+++ /dev/null
@@ -1,188 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.vehicle;
-
-import java.util.function.Consumer;
-
-import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnAlignment;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.columndefinition.HumanReadableDurationFormatter;
-import com.graphhopper.jsprit.core.reporting.columndefinition.HumanReadableTimeFormatter;
-import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
-import com.graphhopper.jsprit.core.reporting.route.RoutePrinterContext;
-
-/**
- * Abstract base class for time and (technically) duration columns.
- *
- * <p>
- * Each columns derived from this abstract base has two variants: a numerical
- * (an integer value) and a human readable. The numerical value displays the
- * integer value representing the time values internally. The human readable
- * value converts this value into a calendar (date and time) value.
- * </p>
- *
- * @author balage
- *
- * @param <T>
- *            Self reference.
- * @See {@linkplain HumanReadableTimeFormatter}
- */
-public abstract class AbstractVehicleDurationPrinterColumn<T extends AbstractVehicleDurationPrinterColumn<T>>
-extends AbstractPrinterColumn<VehicleSummaryContext, String, AbstractVehicleDurationPrinterColumn<T>> {
-
-    public enum Mode {
-        NUMERIC(""), HUMAN_READABLE(" (H)"), PERCENT_ROUTE(" (R%)"), PERCENT_SHIFT(" (S%)");
-
-        private String postfix;
-
-        private Mode(String postfix) {
-            this.postfix = postfix;
-        }
-
-        public String getPostfix() {
-            return postfix;
-        }
-    }
-
-    // The time formatter to use (only used when humanReadable flag is true)
-    private HumanReadableDurationFormatter formatter;
-    // Whether to use human readable form
-    private Mode mode = Mode.NUMERIC;
-    // Percent decimals
-    private int percentDecimals = 2;
-
-    /**
-     * Constructor to define a numeric format column.
-     */
-    public AbstractVehicleDurationPrinterColumn() {
-        this(null);
-    }
-
-    /**
-     * Constructor to define a numeric format column, with a post creation
-     * decorator provided.
-     */
-    public AbstractVehicleDurationPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
-        super(decorator);
-        formatter = new HumanReadableDurationFormatter();
-        withDisplayMode(Mode.NUMERIC);
-    }
-
-    /**
-     * @param formatter
-     *            The formatter used for {@linkplain Mode#HUMAN_READABLE}
-     *            format.
-     *
-     */
-    @SuppressWarnings("unchecked")
-    public T withFormatter(HumanReadableDurationFormatter formatter) {
-        this.formatter = formatter;
-        return (T) this;
-    }
-
-    @Override
-    protected String getDefaultTitle() {
-        return getDefaultTitleBase() + mode.postfix;
-    }
-
-    /**
-     * @return The base of the default title. It will be extended by the
-     *         mode-specific postfix.
-     */
-    protected abstract String getDefaultTitleBase();
-
-    /**
-     * @param mode
-     *            The display mode.
-     */
-    @SuppressWarnings("unchecked")
-    public T withDisplayMode(Mode mode) {
-        this.mode = mode;
-        return (T) this;
-    }
-
-
-    /**
-     * @param digits
-     *            Number of decimal digits when mode is
-     *            {@linkplain Mode#PERCENT_SHIFT} or
-     *            {@linkplain Mode#PERCENT_ROUTE}.
-     * @throws IllegalArgumentException
-     *             When the digits parameter is negative.
-     */
-    @SuppressWarnings("unchecked")
-    public T withPercentDecimalDigits(int digits) {
-        if (digits < 0) {
-            throw new IllegalArgumentException("Decimal digit count should be non-negative.");
-        }
-        this.percentDecimals = digits;
-        return (T) this;
-    }
-
-
-    /**
-     * {@inheritDoc}
-     *
-     * <p>
-     * The column builder returned will be a string column with the null value
-     * represented by a hyphen ("-").
-     * </p>
-     *
-     */
-    @Override
-    public ColumnDefinition.Builder getColumnBuilder() {
-        ColumnDefinition.Builder builder = new ColumnDefinition.Builder(new StringColumnType("-"));
-        if (mode != Mode.HUMAN_READABLE) {
-            builder.withAlignment(ColumnAlignment.RIGHT);
-        }
-        return builder;
-    }
-
-    /**
-     * {@inheritDoc}
-     *
-     * <p>
-     * The implementation delegates the value extracting to the abstract method
-     * {@linkplain #getValue(RoutePrinterContext)}.
-     * <p>
-     * <p>
-     * If the value is null, returns null, otherwise it returns the string
-     * representation of the numeric value or the human readable format based on
-     * the humanReadable flag.
-     * </p>
-     *
-     */
-    @Override
-    public String getData(VehicleSummaryContext context) {
-        Long timeValue = getValue(context);
-        if (timeValue == null) {
-            return null;
-        }
-        switch (mode) {
-        case NUMERIC:
-            return "" + timeValue;
-        case HUMAN_READABLE:
-            return formatter.format(timeValue);
-        case PERCENT_ROUTE:
-            return formatPercent(timeValue, context.getRouteDuration() - context.getBreakDuration());
-        case PERCENT_SHIFT:
-            return formatPercent(timeValue, context.getShiftDuration() - context.getBreakDuration());
-        default:
-            throw new AssertionError("Can't get here.");
-        }
-    }
-
-    private String formatPercent(Long timeValue, long total) {
-        double pct = (100d * timeValue) / total;
-        return String.format("%20." + percentDecimals + "f %%", pct).trim();
-    }
-
-    /**
-     * Extracts the numerical value for this time or duration column.
-     *
-     * @param context
-     *            The context.
-     * @return The numerical value or null.
-     */
-    protected abstract Long getValue(VehicleSummaryContext context);
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/AbstractVehicleTimeWindowPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/AbstractVehicleTimeWindowPrinterColumn.java
deleted file mode 100644
index 98d976387..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/AbstractVehicleTimeWindowPrinterColumn.java
+++ /dev/null
@@ -1,153 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.vehicle;
-
-import java.util.Collection;
-import java.util.function.Consumer;
-import java.util.stream.Collectors;
-
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
-import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.columndefinition.HumanReadableEnabled;
-import com.graphhopper.jsprit.core.reporting.columndefinition.HumanReadableTimeFormatter;
-import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
-import com.graphhopper.jsprit.core.reporting.route.RoutePrinterContext;
-
-/**
- * Abstract base class for time window columns.
- *
- * <p>
- * Each columns derived from this abstract base has two variants: a numerical
- * (an integer value) and a human readable. The numerical value displays the
- * integer value pair representing the time windows, the same the algorithm used
- * internally. The human readable value converts this value into a calendar
- * (date and time) value pair.
- * </p>
- *
- * @author balage
- *
- * @param <T>
- *            Self reference.
- * @See {@linkplain HumanReadableTimeFormatter}
- */
-public abstract class AbstractVehicleTimeWindowPrinterColumn<T extends AbstractVehicleTimeWindowPrinterColumn<T>>
-extends AbstractPrinterColumn<VehicleSummaryContext, String, AbstractVehicleTimeWindowPrinterColumn<T>>
-implements HumanReadableEnabled<T> {
-
-    // The time formatter to use (only used when humanReadable flag is true)
-    private HumanReadableTimeFormatter formatter;
-    // Whether to use human readable form
-    private boolean humanReadable = false;
-
-    /**
-     * Constructor to define a numeric format column.
-     */
-    public AbstractVehicleTimeWindowPrinterColumn() {
-        this(null);
-    }
-
-    /**
-     * Constructor to define a numeric format column, with a post creation
-     * decorator provided.
-     */
-    public AbstractVehicleTimeWindowPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
-        super(decorator);
-        formatter = new HumanReadableTimeFormatter();
-    }
-
-    @Override
-    @SuppressWarnings("unchecked")
-    public T withFormatter(HumanReadableTimeFormatter formatter) {
-        this.formatter = formatter;
-        return (T) this;
-    }
-
-    @Override
-    @SuppressWarnings("unchecked")
-    public T asHumanReadable() {
-        this.humanReadable = true;
-        return (T) this;
-    }
-
-    @Override
-    protected String getDefaultTitle() {
-        return getDefaultTitleBase() + (humanReadable ? " (H)" : "");
-    }
-
-    protected abstract String getDefaultTitleBase();
-
-
-    @Override
-    public ColumnDefinition.Builder getColumnBuilder() {
-        return new ColumnDefinition.Builder(new StringColumnType("-"));
-    }
-
-    /**
-     * {@inheritDoc}
-     *
-     * <p>
-     * The implementation delegates the value extracting to the abstract method
-     * {@linkplain #getValue(RoutePrinterContext)}.
-     * <p>
-     * <p>
-     * If the value is null or empty, returns null, otherwise it returns the
-     * string representation of the numeric value or the human readable format
-     * based on the humanReadable flag.
-     * </p>
-     *
-     */
-    @Override
-    public String getData(VehicleSummaryContext context) {
-        Collection<TimeWindow> timeWindows = getValue(context);
-        if (timeWindows == null || timeWindows.isEmpty()) {
-            return null;
-        }
-        return timeWindows.stream().map(tw -> formatTimeWindow(tw)).collect(Collectors.joining());
-    }
-
-    /**
-     * Formats the time window.
-     *
-     * <p>
-     * The implementation returns the two (start, end) values sepratated by
-     * hyphen (-) and wrapped within brackets. When the end value is
-     * {@linkplain Double#MAX_VALUE} it omits the value indicating open
-     * interval.
-     * </p>
-     *
-     * @param tw
-     *            The time window to format.
-     * @return The string representation of the time window.
-     */
-    protected String formatTimeWindow(TimeWindow tw) {
-        String res = "";
-        if (humanReadable) {
-            res = "[" + formatter.format((long) tw.getStart()) + "-";
-            if (tw.getEnd() == Double.MAX_VALUE) {
-                res += "";
-            } else {
-                res += formatter.format((long) tw.getEnd());
-            }
-            res += "]";
-
-        } else {
-            res = "[" + (long) tw.getStart() + "-";
-            if (tw.getEnd() == Double.MAX_VALUE) {
-                res += "";
-            } else {
-                res += (long) tw.getEnd();
-            }
-            res += "]";
-        }
-        return res;
-    }
-
-    /**
-     * Extracts the collection of time windows from the context.
-     *
-     * @param context
-     *            The context.
-     * @return The collection of time windows.
-     */
-    protected abstract Collection<TimeWindow> getValue(VehicleSummaryContext context);
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleActiveDurationPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleActiveDurationPrinterColumn.java
deleted file mode 100644
index b6a08db74..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleActiveDurationPrinterColumn.java
+++ /dev/null
@@ -1,46 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.vehicle;
-
-import java.util.function.Consumer;
-
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-
-/**
- * Travel duration toward the location of the activity.
- * <p>
- * The time it takes to travel to the location of the activity. The value is
- * undefined for route start activity (null).
- * </p>
- *
- * @author balage
- *
- */
-public class VehicleActiveDurationPrinterColumn extends AbstractVehicleDurationPrinterColumn<VehicleActiveDurationPrinterColumn> {
-
-
-    /**
-     * Constructor.
-     */
-    public VehicleActiveDurationPrinterColumn() {
-        super();
-    }
-
-    /**
-     * Constructor with a post creation decorator provided.
-     */
-    public VehicleActiveDurationPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
-        super(decorator);
-    }
-
-
-    @Override
-    protected String getDefaultTitleBase() {
-        return "active";
-    }
-
-    @Override
-    public Long getValue(VehicleSummaryContext context) {
-        return context.getActiveDuration();
-    }
-
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleActivityCountPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleActivityCountPrinterColumn.java
deleted file mode 100644
index 2f64e43df..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleActivityCountPrinterColumn.java
+++ /dev/null
@@ -1,55 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.vehicle;
-
-import java.util.function.Consumer;
-
-import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnAlignment;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition.Builder;
-import com.graphhopper.jsprit.core.reporting.columndefinition.IntColumnType;
-
-/**
- * Travel duration toward the location of the activity.
- * <p>
- * The time it takes to travel to the location of the activity. The value is
- * undefined for route start activity (null).
- * </p>
- *
- * @author balage
- *
- */
-public class VehicleActivityCountPrinterColumn
-                extends AbstractPrinterColumn<VehicleSummaryContext, Integer, VehicleActivityCountPrinterColumn> {
-
-    /**
-     * Constructor.
-     */
-    public VehicleActivityCountPrinterColumn() {
-        super();
-    }
-
-    /**
-     * Constructor with a post creation decorator provided.
-     */
-    public VehicleActivityCountPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
-        super(decorator);
-    }
-
-    @Override
-    protected Builder getColumnBuilder() {
-        return new ColumnDefinition.Builder(new IntColumnType()).withAlignment(ColumnAlignment.RIGHT);
-    }
-
-    @Override
-    public Integer getData(VehicleSummaryContext context) {
-        return context.getActivityCount();
-    }
-
-    @Override
-    protected String getDefaultTitle() {
-        return "act count";
-    }
-
-
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleActivityTypeCountPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleActivityTypeCountPrinterColumn.java
deleted file mode 100644
index c8dfdcc45..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleActivityTypeCountPrinterColumn.java
+++ /dev/null
@@ -1,62 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.vehicle;
-
-import java.util.function.Consumer;
-
-import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnAlignment;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition.Builder;
-import com.graphhopper.jsprit.core.reporting.columndefinition.IntColumnType;
-
-/**
- * Travel duration toward the location of the activity.
- * <p>
- * The time it takes to travel to the location of the activity. The value is
- * undefined for route start activity (null).
- * </p>
- *
- * @author balage
- *
- */
-public class VehicleActivityTypeCountPrinterColumn
-                extends AbstractPrinterColumn<VehicleSummaryContext, Integer, VehicleActivityTypeCountPrinterColumn> {
-
-    private String activityType = "";
-
-    /**
-     * Constructor.
-     */
-    public VehicleActivityTypeCountPrinterColumn() {
-        super();
-    }
-
-    /**
-     * Constructor with a post creation decorator provided.
-     */
-    public VehicleActivityTypeCountPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
-        super(decorator);
-    }
-
-    public VehicleActivityTypeCountPrinterColumn forActivity(String type) {
-        activityType = type;
-        return this;
-    }
-
-    @Override
-    protected Builder getColumnBuilder() {
-        return new ColumnDefinition.Builder(new IntColumnType("0")).withAlignment(ColumnAlignment.RIGHT);
-    }
-
-    @Override
-    public Integer getData(VehicleSummaryContext context) {
-        return context.getActivityCountByType().getOrDefault(activityType, 0);
-    }
-
-    @Override
-    protected String getDefaultTitle() {
-        return activityType;
-    }
-
-
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleAllActivityTypeCountPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleAllActivityTypeCountPrinterColumn.java
deleted file mode 100644
index aa4f94db1..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleAllActivityTypeCountPrinterColumn.java
+++ /dev/null
@@ -1,57 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.vehicle;
-
-import java.util.function.Consumer;
-import java.util.stream.Collectors;
-
-import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition.Builder;
-import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
-
-/**
- * Travel duration toward the location of the activity.
- * <p>
- * The time it takes to travel to the location of the activity. The value is
- * undefined for route start activity (null).
- * </p>
- *
- * @author balage
- *
- */
-public class VehicleAllActivityTypeCountPrinterColumn
-extends AbstractPrinterColumn<VehicleSummaryContext, String, VehicleAllActivityTypeCountPrinterColumn> {
-
-    /**
-     * Constructor.
-     */
-    public VehicleAllActivityTypeCountPrinterColumn() {
-        super();
-    }
-
-    /**
-     * Constructor with a post creation decorator provided.
-     */
-    public VehicleAllActivityTypeCountPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
-        super(decorator);
-    }
-
-    @Override
-    protected Builder getColumnBuilder() {
-        return new ColumnDefinition.Builder(new StringColumnType());
-    }
-
-    @Override
-    public String getData(VehicleSummaryContext context) {
-        return context.getActivityCountByType().entrySet().stream()
-                        .map(en -> "[" + en.getKey() + "=" + en.getValue() + "]")
-                        .collect(Collectors.joining());
-    }
-
-    @Override
-    protected String getDefaultTitle() {
-        return "act counts";
-    }
-
-
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleDriverNamePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleDriverNamePrinterColumn.java
deleted file mode 100644
index a47d06916..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleDriverNamePrinterColumn.java
+++ /dev/null
@@ -1,49 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.vehicle;
-
-import java.util.function.Consumer;
-
-import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
-
-/**
- * The name of the vehicle associated by this route.
- *
- * <p>
- * This colum returns the id of the vehicle of the route.
- * </p>
- *
- * @author balage
- */
-public class VehicleDriverNamePrinterColumn extends AbstractPrinterColumn<VehicleSummaryContext, String, VehicleDriverNamePrinterColumn> {
-
-    /**
-     * Constructor.
-     */
-    public VehicleDriverNamePrinterColumn() {
-        super();
-    }
-
-    /**
-     * Constructor with a post creation decorator provided.
-     */
-    public VehicleDriverNamePrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
-        super(decorator);
-    }
-
-    @Override
-    public ColumnDefinition.Builder getColumnBuilder() {
-        return new ColumnDefinition.Builder(new StringColumnType());
-    }
-
-    @Override
-    protected String getDefaultTitle() {
-        return "driver";
-    }
-
-    @Override
-    public String getData(VehicleSummaryContext context) {
-        return context.getDriver().getId();
-    }
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleIdleDurationPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleIdleDurationPrinterColumn.java
deleted file mode 100644
index 1a5980984..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleIdleDurationPrinterColumn.java
+++ /dev/null
@@ -1,46 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.vehicle;
-
-import java.util.function.Consumer;
-
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-
-/**
- * Travel duration toward the location of the activity.
- * <p>
- * The time it takes to travel to the location of the activity. The value is
- * undefined for route start activity (null).
- * </p>
- *
- * @author balage
- *
- */
-public class VehicleIdleDurationPrinterColumn extends AbstractVehicleDurationPrinterColumn<VehicleIdleDurationPrinterColumn> {
-
-
-    /**
-     * Constructor.
-     */
-    public VehicleIdleDurationPrinterColumn() {
-        super();
-    }
-
-    /**
-     * Constructor with a post creation decorator provided.
-     */
-    public VehicleIdleDurationPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
-        super(decorator);
-    }
-
-
-    @Override
-    protected String getDefaultTitleBase() {
-        return "idle";
-    }
-
-    @Override
-    public Long getValue(VehicleSummaryContext context) {
-        return context.getIdleDuration();
-    }
-
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleOperationDurationPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleOperationDurationPrinterColumn.java
deleted file mode 100644
index 1bf46ba4f..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleOperationDurationPrinterColumn.java
+++ /dev/null
@@ -1,46 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.vehicle;
-
-import java.util.function.Consumer;
-
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-
-/**
- * Travel duration toward the location of the activity.
- * <p>
- * The time it takes to travel to the location of the activity. The value is
- * undefined for route start activity (null).
- * </p>
- *
- * @author balage
- *
- */
-public class VehicleOperationDurationPrinterColumn extends AbstractVehicleDurationPrinterColumn<VehicleOperationDurationPrinterColumn> {
-
-
-    /**
-     * Constructor.
-     */
-    public VehicleOperationDurationPrinterColumn() {
-        super();
-    }
-
-    /**
-     * Constructor with a post creation decorator provided.
-     */
-    public VehicleOperationDurationPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
-        super(decorator);
-    }
-
-
-    @Override
-    protected String getDefaultTitleBase() {
-        return "oper";
-    }
-
-    @Override
-    public Long getValue(VehicleSummaryContext context) {
-        return context.getOperationDuration();
-    }
-
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleRouteDurationPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleRouteDurationPrinterColumn.java
deleted file mode 100644
index 501787ab8..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleRouteDurationPrinterColumn.java
+++ /dev/null
@@ -1,46 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.vehicle;
-
-import java.util.function.Consumer;
-
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-
-/**
- * Travel duration toward the location of the activity.
- * <p>
- * The time it takes to travel to the location of the activity. The value is
- * undefined for route start activity (null).
- * </p>
- *
- * @author balage
- *
- */
-public class VehicleRouteDurationPrinterColumn extends AbstractVehicleDurationPrinterColumn<VehicleRouteDurationPrinterColumn> {
-
-
-    /**
-     * Constructor.
-     */
-    public VehicleRouteDurationPrinterColumn() {
-        super();
-    }
-
-    /**
-     * Constructor with a post creation decorator provided.
-     */
-    public VehicleRouteDurationPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
-        super(decorator);
-    }
-
-
-    @Override
-    protected String getDefaultTitleBase() {
-        return "route";
-    }
-
-    @Override
-    public Long getValue(VehicleSummaryContext context) {
-        return context.getRouteDuration();
-    }
-
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleRouteNumberPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleRouteNumberPrinterColumn.java
deleted file mode 100644
index e9084f706..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleRouteNumberPrinterColumn.java
+++ /dev/null
@@ -1,49 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.vehicle;
-
-import java.util.function.Consumer;
-
-import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.columndefinition.IntColumnType;
-
-/**
- * The order number of the route.
- *
- * <p>
- * This is the ordinal of the route.
- * </p>
- *
- * @author balage
- */
-public class VehicleRouteNumberPrinterColumn extends AbstractPrinterColumn<VehicleSummaryContext, Integer, VehicleRouteNumberPrinterColumn> {
-
-    /**
-     * Constructor.
-     */
-    public VehicleRouteNumberPrinterColumn() {
-        super();
-    }
-
-    /**
-     * Constructor with a post creation decorator provided.
-     */
-    public VehicleRouteNumberPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
-        super(decorator);
-    }
-
-    @Override
-    public ColumnDefinition.Builder getColumnBuilder() {
-        return new ColumnDefinition.Builder(new IntColumnType());
-    }
-
-    @Override
-    protected String getDefaultTitle() {
-        return "route nr";
-    }
-
-    @Override
-    public Integer getData(VehicleSummaryContext context) {
-        return context.getRouteNr();
-    }
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleRouteTimeWindowPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleRouteTimeWindowPrinterColumn.java
deleted file mode 100644
index 2e3b4525d..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleRouteTimeWindowPrinterColumn.java
+++ /dev/null
@@ -1,47 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.vehicle;
-
-import java.util.Collection;
-import java.util.Collections;
-import java.util.function.Consumer;
-
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-
-/**
- * Travel duration toward the location of the activity.
- * <p>
- * The time it takes to travel to the location of the activity. The value is
- * undefined for route start activity (null).
- * </p>
- *
- * @author balage
- *
- */
-public class VehicleRouteTimeWindowPrinterColumn
-extends AbstractVehicleTimeWindowPrinterColumn<VehicleRouteTimeWindowPrinterColumn> {
-
-    /**
-     * Constructor.
-     */
-    public VehicleRouteTimeWindowPrinterColumn() {
-        super();
-    }
-
-    /**
-     * Constructor with a post creation decorator provided.
-     */
-    public VehicleRouteTimeWindowPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
-        super(decorator);
-    }
-
-    @Override
-    protected Collection<TimeWindow> getValue(VehicleSummaryContext context) {
-        return Collections.singleton(new TimeWindow(context.getStart(), context.getEnd()));
-    }
-
-    @Override
-    protected String getDefaultTitleBase() {
-        return "route tw";
-    }
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleShiftDurationPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleShiftDurationPrinterColumn.java
deleted file mode 100644
index 47cdce73a..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleShiftDurationPrinterColumn.java
+++ /dev/null
@@ -1,46 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.vehicle;
-
-import java.util.function.Consumer;
-
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-
-/**
- * Travel duration toward the location of the activity.
- * <p>
- * The time it takes to travel to the location of the activity. The value is
- * undefined for route start activity (null).
- * </p>
- *
- * @author balage
- *
- */
-public class VehicleShiftDurationPrinterColumn extends AbstractVehicleDurationPrinterColumn<VehicleShiftDurationPrinterColumn> {
-
-
-    /**
-     * Constructor.
-     */
-    public VehicleShiftDurationPrinterColumn() {
-        super();
-    }
-
-    /**
-     * Constructor with a post creation decorator provided.
-     */
-    public VehicleShiftDurationPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
-        super(decorator);
-    }
-
-
-    @Override
-    protected String getDefaultTitleBase() {
-        return "shift";
-    }
-
-    @Override
-    public Long getValue(VehicleSummaryContext context) {
-        return context.getShiftDuration();
-    }
-
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleShiftTimeWindowPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleShiftTimeWindowPrinterColumn.java
deleted file mode 100644
index 7590eb138..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleShiftTimeWindowPrinterColumn.java
+++ /dev/null
@@ -1,48 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.vehicle;
-
-import java.util.Collection;
-import java.util.Collections;
-import java.util.function.Consumer;
-
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-
-/**
- * Travel duration toward the location of the activity.
- * <p>
- * The time it takes to travel to the location of the activity. The value is
- * undefined for route start activity (null).
- * </p>
- *
- * @author balage
- *
- */
-public class VehicleShiftTimeWindowPrinterColumn
-extends AbstractVehicleTimeWindowPrinterColumn<VehicleShiftTimeWindowPrinterColumn> {
-
-    /**
-     * Constructor.
-     */
-    public VehicleShiftTimeWindowPrinterColumn() {
-        super();
-    }
-
-    /**
-     * Constructor with a post creation decorator provided.
-     */
-    public VehicleShiftTimeWindowPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
-        super(decorator);
-    }
-
-    @Override
-    protected Collection<TimeWindow> getValue(VehicleSummaryContext context) {
-        return Collections.singleton(
-                        new TimeWindow(context.getVehicle().getEarliestDeparture(), context.getVehicle().getLatestArrival()));
-    }
-
-    @Override
-    protected String getDefaultTitleBase() {
-        return "shift tw";
-    }
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleSummaryColumnLists.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleSummaryColumnLists.java
deleted file mode 100644
index 3c338ee5d..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleSummaryColumnLists.java
+++ /dev/null
@@ -1,152 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.vehicle;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.EnumMap;
-import java.util.List;
-
-import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.PrinterColumnList;
-import com.graphhopper.jsprit.core.reporting.columndefinition.HumanReadableDurationFormatter;
-import com.graphhopper.jsprit.core.reporting.columndefinition.HumanReadableEnabled;
-import com.graphhopper.jsprit.core.reporting.columndefinition.HumanReadableTimeFormatter;
-import com.graphhopper.jsprit.core.reporting.vehicle.AbstractVehicleDurationPrinterColumn.Mode;
-
-/**
- * Utility class to provide predefined column lists for Solution printing.
- *
- * @author balage
- *
- */
-public class VehicleSummaryColumnLists {
-
-    /**
-     * The predefined column sets.
-     *
-     * @author balage
-     *
-     */
-    public enum PredefinedList {
-        /**
-         * A minimal column set.
-         */
-        MINIMAL,
-        /**
-         * A general, most often used column set.
-         */
-        DEFAULT,
-        /**
-         * A verbose column set containing all columns.
-         */
-        VERBOSE
-    }
-
-    private static final EnumMap<PredefinedList, List<Class<? extends AbstractPrinterColumn<VehicleSummaryContext, ?, ?>>>> COLUMNS;
-
-    static {
-        COLUMNS = new EnumMap<>(PredefinedList.class);
-        List<Class<? extends AbstractPrinterColumn<VehicleSummaryContext, ?, ?>>> minimalSet = new ArrayList<>();
-        minimalSet.add(VehicleRouteNumberPrinterColumn.class);
-        minimalSet.add(VehicleTruckNamePrinterColumn.class);
-        minimalSet.add(VehicleAllActivityTypeCountPrinterColumn.class);
-        minimalSet.add(VehicleRouteDurationPrinterColumn.class);
-        minimalSet.add(VehicleActiveDurationPrinterColumn.class);
-        COLUMNS.put(PredefinedList.MINIMAL, minimalSet);
-
-        List<Class<? extends AbstractPrinterColumn<VehicleSummaryContext, ?, ?>>> defaultSet = new ArrayList<>();
-        defaultSet.add(VehicleRouteNumberPrinterColumn.class);
-        defaultSet.add(VehicleTruckNamePrinterColumn.class);
-        defaultSet.add(VehicleAllActivityTypeCountPrinterColumn.class);
-        defaultSet.add(VehicleRouteTimeWindowPrinterColumn.class);
-        defaultSet.add(VehicleRouteDurationPrinterColumn.class);
-        defaultSet.add(VehicleTravelDurationPrinterColumn.class);
-        defaultSet.add(VehicleOperationDurationPrinterColumn.class);
-        defaultSet.add(VehicleActiveDurationPrinterColumn.class);
-        defaultSet.add(VehicleIdleDurationPrinterColumn.class);
-        COLUMNS.put(PredefinedList.DEFAULT, defaultSet);
-
-        List<Class<? extends AbstractPrinterColumn<VehicleSummaryContext, ?, ?>>> verboseSet = new ArrayList<>();
-        verboseSet.add(VehicleRouteNumberPrinterColumn.class);
-        verboseSet.add(VehicleTruckNamePrinterColumn.class);
-        verboseSet.add(VehicleTypePrinterColumn.class);
-        verboseSet.add(VehicleDriverNamePrinterColumn.class);
-        verboseSet.add(VehicleActivityCountPrinterColumn.class);
-        verboseSet.add(VehicleAllActivityTypeCountPrinterColumn.class);
-        verboseSet.add(VehicleShiftTimeWindowPrinterColumn.class);
-        verboseSet.add(VehicleShiftDurationPrinterColumn.class);
-        verboseSet.add(VehicleRouteTimeWindowPrinterColumn.class);
-        verboseSet.add(VehicleRouteDurationPrinterColumn.class);
-        verboseSet.add(VehicleTravelDurationPrinterColumn.class);
-        verboseSet.add(VehicleOperationDurationPrinterColumn.class);
-        verboseSet.add(VehicleActiveDurationPrinterColumn.class);
-        verboseSet.add(VehicleIdleDurationPrinterColumn.class);
-        COLUMNS.put(PredefinedList.VERBOSE, verboseSet);
-    }
-
-    public static PrinterColumnList<VehicleSummaryContext> getNumeric(PredefinedList listType) {
-        return getList(listType, Collections.singletonList(Mode.NUMERIC), false, null, null);
-    }
-
-    public static PrinterColumnList<VehicleSummaryContext> getHumanReadable(PredefinedList listType) {
-        return getList(listType, Collections.singletonList(Mode.HUMAN_READABLE), true, null, null);
-    }
-
-    public static PrinterColumnList<VehicleSummaryContext> getMultiple(PredefinedList listType, Mode... durationModes) {
-        List<Mode> modes = Arrays.asList(durationModes);
-        return getMultiple(listType, modes);
-    }
-
-    public static PrinterColumnList<VehicleSummaryContext> getMultiple(PredefinedList listType, List<Mode> durationModes) {
-        return getList(listType, durationModes, durationModes.contains(Mode.HUMAN_READABLE), null, null);
-    }
-
-    /**
-     * Generates the list.
-     *
-     * @param listType
-     *            The id of the list.
-     * @param humanReadable
-     *            Whether human readable format should be used
-     * @param timeFormatter
-     *            The formatter to use (if null, the default will be used)
-     * @return The generated column list.
-     */
-    public static PrinterColumnList<VehicleSummaryContext> getList(PredefinedList listType, List<Mode> durationModes,
-                    boolean humanReadableTimeWindows, HumanReadableTimeFormatter timeWindowTimeFormatter,
-                    HumanReadableDurationFormatter durationFormatter) {
-        PrinterColumnList<VehicleSummaryContext> res = new PrinterColumnList<>();
-
-        for (Class<? extends AbstractPrinterColumn<VehicleSummaryContext, ?, ?>> c : COLUMNS.get(listType)) {
-            try {
-                if (AbstractVehicleDurationPrinterColumn.class.isAssignableFrom(c)) {
-                    for(Mode mode : durationModes) {
-                        AbstractVehicleDurationPrinterColumn<?> col = (AbstractVehicleDurationPrinterColumn<?>) c.newInstance();
-                        if (durationFormatter != null) {
-                            col.withFormatter(durationFormatter);
-                        }
-                        col.withDisplayMode(mode);
-                        res.addColumn(col);
-                    }
-                } else {
-                    AbstractPrinterColumn<VehicleSummaryContext, ?, ?> col = c.newInstance();
-                    if (humanReadableTimeWindows && col instanceof HumanReadableEnabled) {
-                        HumanReadableEnabled<?> hrCol = (HumanReadableEnabled<?>) col;
-                        hrCol.asHumanReadable();
-                        if (durationFormatter != null) {
-                            hrCol.withFormatter(durationFormatter);
-                        }
-                    }
-                    res.addColumn(col);
-                }
-            } catch (InstantiationException | IllegalAccessException e) {
-                // Technically you can't get here as long as all column
-                // implementation has default constructor
-                throw new IllegalStateException(e);
-            }
-        }
-
-        return res;
-    }
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleTravelDurationPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleTravelDurationPrinterColumn.java
deleted file mode 100644
index 0b2fb7a70..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleTravelDurationPrinterColumn.java
+++ /dev/null
@@ -1,46 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.vehicle;
-
-import java.util.function.Consumer;
-
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-
-/**
- * Travel duration toward the location of the activity.
- * <p>
- * The time it takes to travel to the location of the activity. The value is
- * undefined for route start activity (null).
- * </p>
- *
- * @author balage
- *
- */
-public class VehicleTravelDurationPrinterColumn extends AbstractVehicleDurationPrinterColumn<VehicleTravelDurationPrinterColumn> {
-
-
-    /**
-     * Constructor.
-     */
-    public VehicleTravelDurationPrinterColumn() {
-        super();
-    }
-
-    /**
-     * Constructor with a post creation decorator provided.
-     */
-    public VehicleTravelDurationPrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
-        super(decorator);
-    }
-
-
-    @Override
-    protected String getDefaultTitleBase() {
-        return "travel";
-    }
-
-    @Override
-    public Long getValue(VehicleSummaryContext context) {
-        return context.getTravelDuration();
-    }
-
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleTruckNamePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleTruckNamePrinterColumn.java
deleted file mode 100644
index 726fb82af..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleTruckNamePrinterColumn.java
+++ /dev/null
@@ -1,49 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.vehicle;
-
-import java.util.function.Consumer;
-
-import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
-
-/**
- * The name of the vehicle associated by this route.
- *
- * <p>
- * This colum returns the id of the vehicle of the route.
- * </p>
- *
- * @author balage
- */
-public class VehicleTruckNamePrinterColumn extends AbstractPrinterColumn<VehicleSummaryContext, String, VehicleTruckNamePrinterColumn> {
-
-    /**
-     * Constructor.
-     */
-    public VehicleTruckNamePrinterColumn() {
-        super();
-    }
-
-    /**
-     * Constructor with a post creation decorator provided.
-     */
-    public VehicleTruckNamePrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
-        super(decorator);
-    }
-
-    @Override
-    public ColumnDefinition.Builder getColumnBuilder() {
-        return new ColumnDefinition.Builder(new StringColumnType());
-    }
-
-    @Override
-    protected String getDefaultTitle() {
-        return "vehicle";
-    }
-
-    @Override
-    public String getData(VehicleSummaryContext context) {
-        return context.getVehicle().getId();
-    }
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleTypePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleTypePrinterColumn.java
deleted file mode 100644
index ea6035c6b..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleTypePrinterColumn.java
+++ /dev/null
@@ -1,49 +0,0 @@
-package com.graphhopper.jsprit.core.reporting.vehicle;
-
-import java.util.function.Consumer;
-
-import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
-import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
-
-/**
- * The name of the vehicle associated by this route.
- *
- * <p>
- * This colum returns the id of the vehicle of the route.
- * </p>
- *
- * @author balage
- */
-public class VehicleTypePrinterColumn extends AbstractPrinterColumn<VehicleSummaryContext, String, VehicleTypePrinterColumn> {
-
-    /**
-     * Constructor.
-     */
-    public VehicleTypePrinterColumn() {
-        super();
-    }
-
-    /**
-     * Constructor with a post creation decorator provided.
-     */
-    public VehicleTypePrinterColumn(Consumer<ColumnDefinition.Builder> decorator) {
-        super(decorator);
-    }
-
-    @Override
-    public ColumnDefinition.Builder getColumnBuilder() {
-        return new ColumnDefinition.Builder(new StringColumnType());
-    }
-
-    @Override
-    protected String getDefaultTitle() {
-        return "vehicle type";
-    }
-
-    @Override
-    public String getData(VehicleSummaryContext context) {
-        return context.getVehicle().getType().getTypeId();
-    }
-
-}
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CVRPwithDeliveries_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CVRPwithDeliveries_IT.java
index 4850b7bd1..6ef97cfac 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CVRPwithDeliveries_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CVRPwithDeliveries_IT.java
@@ -26,6 +26,9 @@
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
+import com.graphhopper.jsprit.core.reporting.SolutionPrinter;
+import com.graphhopper.jsprit.core.reporting.SolutionPrinter.Print;
+import com.graphhopper.jsprit.core.reporting.SolutionPrinter2;
 import com.graphhopper.jsprit.core.util.ChristofidesReader;
 import com.graphhopper.jsprit.core.util.JobType;
 import com.graphhopper.jsprit.core.util.Solutions;
@@ -39,8 +42,21 @@ public void whenSolvingVRPNC1withDeliveriesWithJsprit_solutionsMustNoBeWorseThan
         VehicleRoutingProblem vrp = vrpBuilder.build();
         VehicleRoutingAlgorithm vra = Jsprit.createAlgorithm(vrp);
         Collection<VehicleRoutingProblemSolution> solutions = vra.searchSolutions();
-        assertEquals(530.0, Solutions.bestOf(solutions).getCost(), 50.0);
-        assertEquals(5, Solutions.bestOf(solutions).getRoutes().size());
+        VehicleRoutingProblemSolution bestSolution = Solutions.bestOf(solutions);
+        assertEquals(530.0, bestSolution.getCost(), 50.0);
+        assertEquals(5, bestSolution.getRoutes().size());
+        SolutionPrinter.print(vrp, bestSolution, Print.VERBOSE);
+        System.out.println(
+                "\n\n================================================================================\n\n");
+        System.out.println(
+                "\n\n================================================================================\n\n");
+
+        try {
+            SolutionPrinter2.print(vrp, bestSolution);
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
     }
 
 }
+
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CapacityConstraint_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CapacityConstraint_IT.java
index d5bc99a2c..f3f53eb5c 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CapacityConstraint_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CapacityConstraint_IT.java
@@ -27,7 +27,7 @@
 import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.cost.TransportDistance;
-import com.graphhopper.jsprit.core.problem.job.Delivery;
+import com.graphhopper.jsprit.core.problem.job.DeliveryJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
@@ -69,13 +69,13 @@ public void capacityShouldNotBeExceeded() {
         VehicleImpl v4 = VehicleImpl.Builder.newInstance("v4").setStartLocation(Location.newInstance(0, 0)).setType(type4).setReturnToDepot(true).build();
         VehicleImpl v5 = VehicleImpl.Builder.newInstance("v5").setStartLocation(Location.newInstance(0, 0)).setType(type5).setReturnToDepot(true).build();
 
-        Delivery d1 = new Delivery.Builder("d1").setLocation(Location.newInstance(0, 10))
+        DeliveryJob d1 = new DeliveryJob.Builder("d1").setLocation(Location.newInstance(0, 10))
             .addSizeDimension(2, 1).build();
-        Delivery d2 = new Delivery.Builder("d2").setLocation(Location.newInstance(0, 12))
+        DeliveryJob d2 = new DeliveryJob.Builder("d2").setLocation(Location.newInstance(0, 12))
             .addSizeDimension(2, 1).addSizeDimension(3, 1).build();
-        Delivery d3 = new Delivery.Builder("d3").setLocation(Location.newInstance(0, 15))
+        DeliveryJob d3 = new DeliveryJob.Builder("d3").setLocation(Location.newInstance(0, 15))
             .addSizeDimension(0, 1).addSizeDimension(4, 1).build();
-        Delivery d4 = new Delivery.Builder("d4").setLocation(Location.newInstance(0, 20))
+        DeliveryJob d4 = new DeliveryJob.Builder("d4").setLocation(Location.newInstance(0, 20))
             .addSizeDimension(0, 1).addSizeDimension(5, 1).build();
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/DeactivateTimeWindowsTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/DeactivateTimeWindowsTest.java
index f6be8e77c..a8ba0a7b4 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/DeactivateTimeWindowsTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/DeactivateTimeWindowsTest.java
@@ -31,7 +31,7 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
@@ -44,8 +44,8 @@
 
     @Before
     public void doBefore() {
-        Service service = new Service.Builder("s").setLocation(Location.newInstance(20, 0))
-                        .setTimeWindow(TimeWindow.newInstance(40, 50)).build();
+        ServiceJob service = new ServiceJob.Builder("s").setLocation(Location.newInstance(20, 0))
+                .setTimeWindow(TimeWindow.newInstance(40, 50)).build();
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         vrp = VehicleRoutingProblem.Builder.newInstance().addJob(service).addVehicle(vehicle).build();
 
@@ -69,7 +69,7 @@ public void whenActivatingViaStateManager_activityTimesShouldConsiderTimeWindows
         constraintManager.addTimeWindowConstraint();
 
         VehicleRoutingAlgorithm vra = Jsprit.Builder.newInstance(vrp).addCoreStateAndConstraintStuff(true)
-                        .setStateAndConstraintManager(stateManager, constraintManager).buildAlgorithm();
+                .setStateAndConstraintManager(stateManager, constraintManager).buildAlgorithm();
         vra.setMaxIterations(10);
         Collection<VehicleRoutingProblemSolution> solutions = vra.searchSolutions();
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ExternalInitialSolutionIsInValidTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ExternalInitialSolutionIsInValidTest.java
index 601755416..bc7d1a8e4 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ExternalInitialSolutionIsInValidTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ExternalInitialSolutionIsInValidTest.java
@@ -27,7 +27,7 @@
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
@@ -38,8 +38,8 @@
     @Test
     public void itShouldSolveProblemWithIniSolutionExternallyCreated() {
 
-        Service s1 = new Service.Builder("s1").setLocation(Location.newInstance(10, 0)).build();
-        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(0, 10)).build();
+        ServiceJob s1 = new ServiceJob.Builder("s1").setLocation(Location.newInstance(10, 0)).build();
+        ServiceJob s2 = new ServiceJob.Builder("s2").setLocation(Location.newInstance(0, 10)).build();
 
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v1").setStartLocation(Location.newInstance(0, 0)).build();
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/FirstCustomJobExample.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/FirstCustomJobExample.java
index 7ed274caf..c9efc96bd 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/FirstCustomJobExample.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/FirstCustomJobExample.java
@@ -39,11 +39,11 @@
 
     @Test
     public void test() {
-        CustomJob cj = CustomJob.Builder.newInstance("job")
-                        .addPickup(Location.newInstance(10, 0), SizeDimension.EMPTY).build();
+        CustomJob cj = new CustomJob.Builder("job")
+                .addPickup(Location.newInstance(10, 0), SizeDimension.EMPTY).build();
         Vehicle v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance()
-                        .addJob(cj).addVehicle(v).build();
+                .addJob(cj).addVehicle(v).build();
         VehicleRoutingAlgorithm vra = Jsprit.createAlgorithm(vrp);
         VehicleRoutingProblemSolution solution = Solutions.bestOf(vra.searchSolutions());
         SolutionPrinter.print(vrp, solution, SolutionPrinter.Print.VERBOSE);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/FirstCustomJobWithMultipleActivitiesExample.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/FirstCustomJobWithMultipleActivitiesExample.java
index c1751092d..5f979e7c1 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/FirstCustomJobWithMultipleActivitiesExample.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/FirstCustomJobWithMultipleActivitiesExample.java
@@ -45,15 +45,15 @@
 
     @Test
     public void shouldRunOK() {
-        CustomJob cj = CustomJob.Builder.newInstance("job")
-                        .addPickup(Location.newInstance(10, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).build())
-                        .addPickup(Location.newInstance(5, 0), SizeDimension.Builder.newInstance().addDimension(0, 2).build())
-                        .addPickup(Location.newInstance(20, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).build())
-                        .build();
+        CustomJob cj = new CustomJob.Builder("job")
+                .addPickup(Location.newInstance(10, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).build())
+                .addPickup(Location.newInstance(5, 0), SizeDimension.Builder.newInstance().addDimension(0, 2).build())
+                .addPickup(Location.newInstance(20, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).build())
+                .build();
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0, 4).build();
         Vehicle v = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance()
-                        .addJob(cj).addVehicle(v).build();
+                .addJob(cj).addVehicle(v).build();
         VehicleRoutingAlgorithm vra = Jsprit.createAlgorithm(vrp);
         vra.setMaxIterations(10);
         VehicleRoutingProblemSolution solution = Solutions.bestOf(vra.searchSolutions());
@@ -63,15 +63,15 @@ public void shouldRunOK() {
 
     @Test
     public void shouldNotIgnoresCapacity() {
-        CustomJob cj = CustomJob.Builder.newInstance("job")
-                        .addPickup(Location.newInstance(10, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).build())
-                        .addPickup(Location.newInstance(5, 0), SizeDimension.Builder.newInstance().addDimension(0, 2).build())
-                        .addPickup(Location.newInstance(20, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).build())
-                        .build();
+        CustomJob cj = new CustomJob.Builder("job")
+                .addPickup(Location.newInstance(10, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).build())
+                .addPickup(Location.newInstance(5, 0), SizeDimension.Builder.newInstance().addDimension(0, 2).build())
+                .addPickup(Location.newInstance(20, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).build())
+                .build();
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0, 2).build();
         Vehicle v = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance()
-                        .addJob(cj).addVehicle(v).build();
+                .addJob(cj).addVehicle(v).build();
         VehicleRoutingAlgorithm vra = Jsprit.createAlgorithm(vrp);
         vra.setMaxIterations(10);
         VehicleRoutingProblemSolution solution = Solutions.bestOf(vra.searchSolutions());
@@ -81,15 +81,15 @@ public void shouldNotIgnoresCapacity() {
 
     @Test
     public void shouldNotIgnoresCapacityWithMixedPicksAndDeliveries() {
-        CustomJob cj = CustomJob.Builder.newInstance("job")
-                        .addPickup(Location.newInstance(10, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).build())
-                        .addPickup(Location.newInstance(5, 0), SizeDimension.Builder.newInstance().addDimension(0, 2).build())
-                        .addDelivery(Location.newInstance(20, 0), SizeDimension.Builder.newInstance().addDimension(0, 3).build())
-                        .build();
+        CustomJob cj = new CustomJob.Builder("job")
+                .addPickup(Location.newInstance(10, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).build())
+                .addPickup(Location.newInstance(5, 0), SizeDimension.Builder.newInstance().addDimension(0, 2).build())
+                .addDelivery(Location.newInstance(20, 0), SizeDimension.Builder.newInstance().addDimension(0, 3).build())
+                .build();
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0, 2).build();
         Vehicle v = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance()
-                        .addJob(cj).addVehicle(v).build();
+                .addJob(cj).addVehicle(v).build();
         VehicleRoutingAlgorithm vra = Jsprit.createAlgorithm(vrp);
         vra.setMaxIterations(10);
         VehicleRoutingProblemSolution solution = Solutions.bestOf(vra.searchSolutions());
@@ -99,17 +99,17 @@ public void shouldNotIgnoresCapacityWithMixedPicksAndDeliveries() {
 
     @Test
     public void shouldNotIgnoresCapacityWithMixedPicksAndDeliveriesV2() {
-        CustomJob cj = CustomJob.Builder.newInstance("job")
-                        .addPickup(Location.newInstance(10, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).build())
-                        .addPickup(Location.newInstance(5, 0), SizeDimension.Builder.newInstance().addDimension(0, 2).build())
-                        .addDelivery(Location.newInstance(20, 0), SizeDimension.Builder.newInstance().addDimension(0, 3).build())
-                        .build();
+        CustomJob cj = new CustomJob.Builder("job")
+                .addPickup(Location.newInstance(10, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).build())
+                .addPickup(Location.newInstance(5, 0), SizeDimension.Builder.newInstance().addDimension(0, 2).build())
+                .addDelivery(Location.newInstance(20, 0), SizeDimension.Builder.newInstance().addDimension(0, 3).build())
+                .build();
         assertEquals(SizeDimension.Builder.newInstance().addDimension(0, 0).build(), cj.getSizeAtStart());
         assertEquals(SizeDimension.Builder.newInstance().addDimension(0, 0).build(), cj.getSizeAtEnd());
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0, 3).build();
         Vehicle v = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance()
-                        .addJob(cj).addVehicle(v).build();
+                .addJob(cj).addVehicle(v).build();
         VehicleRoutingAlgorithm vra = Jsprit.createAlgorithm(vrp);
         vra.setMaxIterations(10);
         VehicleRoutingProblemSolution solution = Solutions.bestOf(vra.searchSolutions());
@@ -119,15 +119,15 @@ public void shouldNotIgnoresCapacityWithMixedPicksAndDeliveriesV2() {
 
     @Test
     public void shouldNotIgnoresCapacityWithExchange() {
-        CustomJob cj = CustomJob.Builder.newInstance("job")
-                        .addPickup(Location.newInstance(10, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 0).build())
-                        .addExchange(Location.newInstance(5, 0), SizeDimension.Builder.newInstance().addDimension(0, -3).addDimension(1, 2).build())
-                        .addDelivery(Location.newInstance(20, 0), SizeDimension.Builder.newInstance().addDimension(1, 1).build())
-                        .build();
+        CustomJob cj = new CustomJob.Builder("job")
+                .addPickup(Location.newInstance(10, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 0).build())
+                .addExchange(Location.newInstance(5, 0), SizeDimension.Builder.newInstance().addDimension(0, -3).addDimension(1, 2).build())
+                .addDelivery(Location.newInstance(20, 0), SizeDimension.Builder.newInstance().addDimension(1, 1).build())
+                .build();
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0, 3).addCapacityDimension(1, 2).build();
         Vehicle v = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance()
-                        .addJob(cj).addVehicle(v).build();
+                .addJob(cj).addVehicle(v).build();
         VehicleRoutingAlgorithm vra = Jsprit.createAlgorithm(vrp);
         vra.setMaxIterations(10);
         VehicleRoutingProblemSolution solution = Solutions.bestOf(vra.searchSolutions());
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/IgnoreBreakTimeWindowTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/IgnoreBreakTimeWindowTest.java
index 1afb0bdbd..be9f4de0d 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/IgnoreBreakTimeWindowTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/IgnoreBreakTimeWindowTest.java
@@ -26,7 +26,7 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Break;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.BreakActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
@@ -64,22 +64,22 @@ public void doNotIgnoreBreakTW() {
          */
 
 
-        Service service4 = new Service.Builder("2").setLocation(Location.newInstance(0, 0))
+        ServiceJob service4 = new ServiceJob.Builder("2").setLocation(Location.newInstance(0, 0))
                         .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(17, 17)).build();
 
-        Service service5 = new Service.Builder("3").setLocation(Location.newInstance(0, 0))
+        ServiceJob service5 = new ServiceJob.Builder("3").setLocation(Location.newInstance(0, 0))
                         .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(18, 18)).build();
 
-        Service service7 = new Service.Builder("4").setLocation(Location.newInstance(0, 0))
+        ServiceJob service7 = new ServiceJob.Builder("4").setLocation(Location.newInstance(0, 0))
                         .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(10, 10)).build();
 
-        Service service8 = new Service.Builder("5").setLocation(Location.newInstance(0, 0))
+        ServiceJob service8 = new ServiceJob.Builder("5").setLocation(Location.newInstance(0, 0))
                         .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(12, 12)).build();
 
-        Service service10 = new Service.Builder("6").setLocation(Location.newInstance(0, 0))
+        ServiceJob service10 = new ServiceJob.Builder("6").setLocation(Location.newInstance(0, 0))
                         .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(16, 16)).build();
 
-        Service service11 = new Service.Builder("7").setLocation(Location.newInstance(0, 0))
+        ServiceJob service11 = new ServiceJob.Builder("7").setLocation(Location.newInstance(0, 0))
                         .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(13, 13)).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance()
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/InitialRoutesTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/InitialRoutesTest.java
index ca6cb1cca..6a61b0f90 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/InitialRoutesTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/InitialRoutesTest.java
@@ -41,8 +41,8 @@
 import com.graphhopper.jsprit.core.problem.constraint.ServiceLoadActivityLevelConstraint;
 import com.graphhopper.jsprit.core.problem.constraint.ServiceLoadRouteLevelConstraint;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
@@ -64,8 +64,8 @@
     public void before() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         VehicleImpl v = VehicleImpl.Builder.newInstance("veh1").setStartLocation(Location.newInstance(0, 0)).setLatestArrival(48600).build();
-        Service s1 = new Service.Builder("s1").setLocation(Location.newInstance(1000, 0)).build();
-        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(1000, 1000)).build();
+        ServiceJob s1 = new ServiceJob.Builder("s1").setLocation(Location.newInstance(1000, 0)).build();
+        ServiceJob s2 = new ServiceJob.Builder("s2").setLocation(Location.newInstance(1000, 1000)).build();
         builder.addVehicle(v).addJob(s1).addJob(s2);
         initialRoute = VehicleRoute.Builder.newInstance(v).addService(s1).build();
         builder.addInitialVehicleRoute(initialRoute);
@@ -165,13 +165,13 @@ public void maxCapacityShouldNotBeExceeded() {
                         .setType(type)
                         .build();
 
-        Shipment shipment = Shipment.Builder.newInstance("s")
+        ShipmentJob shipment = new ShipmentJob.Builder("s")
                         .setPickupLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(10, 0)).setId("pick").build())
                         .setDeliveryLocation(Location.Builder.newInstance().setId("del").setCoordinate(Coordinate.newInstance(0, 10)).build())
                         .addSizeDimension(0, 100)
                         .build();
 
-        Shipment another_shipment = Shipment.Builder.newInstance("another_s")
+        ShipmentJob another_shipment = new ShipmentJob.Builder("another_s")
                         .setPickupLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(10, 0)).setId("pick").build())
                         .setDeliveryLocation(Location.Builder.newInstance().setId("del").setCoordinate(Coordinate.newInstance(0, 10)).build())
                         .addSizeDimension(0, 50)
@@ -199,7 +199,7 @@ private boolean secondActIsPickup(Collection<VehicleRoutingProblemSolution> solu
 
     @Test
     public void whenAllJobsInInitialRoute_itShouldWork() {
-        Service s = new Service.Builder("s").setLocation(Location.newInstance(0, 10)).build();
+        ServiceJob s = new ServiceJob.Builder("s").setLocation(Location.newInstance(0, 10)).build();
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoute iniRoute = VehicleRoute.Builder.newInstance(v).addService(s).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addInitialVehicleRoute(iniRoute).build();
@@ -211,8 +211,8 @@ public void whenAllJobsInInitialRoute_itShouldWork() {
 
     @Test
     public void buildWithoutTimeConstraints() {
-        Service s1 = new Service.Builder("s1").setLocation(Location.newInstance(0, 10)).addSizeDimension(0, 10).build();
-        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(10, 20)).addSizeDimension(0, 12).build();
+        ServiceJob s1 = new ServiceJob.Builder("s1").setLocation(Location.newInstance(0, 10)).addSizeDimension(0, 10).build();
+        ServiceJob s2 = new ServiceJob.Builder("s2").setLocation(Location.newInstance(10, 20)).addSizeDimension(0, 12).build();
 
         VehicleTypeImpl vt = VehicleTypeImpl.Builder.newInstance("vt").addCapacityDimension(0, 15).build();
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setType(vt).setStartLocation(Location.newInstance(0, 0)).build();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/MeetTimeWindowConstraint_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/MeetTimeWindowConstraint_IT.java
index 703d3b017..1a231bfbe 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/MeetTimeWindowConstraint_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/MeetTimeWindowConstraint_IT.java
@@ -36,8 +36,8 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
@@ -60,9 +60,9 @@ public void doBefore() {
             .setEarliestStart(14400).setLatestArrival(46800).setType(type1).build();
         VehicleImpl vehicle2 = VehicleImpl.Builder.newInstance("19").setStartLocation(Location.newInstance(0, 0))
             .setEarliestStart(39600).setLatestArrival(64800).setType(type2).build();
-        Service service1 = new Service.Builder("2").setLocation(Location.newInstance(2000, 0))
+        ServiceJob service1 = new ServiceJob.Builder("2").setLocation(Location.newInstance(2000, 0))
             .setTimeWindow(TimeWindow.newInstance(54000, 54000)).build();
-        Service service2 = new Service.Builder("1").setLocation(Location.newInstance(1000, 1000))
+        ServiceJob service2 = new ServiceJob.Builder("1").setLocation(Location.newInstance(1000, 1000))
             .setTimeWindow(TimeWindow.newInstance(19800, 21600)).build();
         vrp = VehicleRoutingProblem.Builder.newInstance().addVehicle(vehicle1).addVehicle(vehicle2)
             .addJob(service1).addJob(service2).setFleetSize(VehicleRoutingProblem.FleetSize.FINITE).build();
@@ -321,28 +321,28 @@ private VehicleRoutingProblem createTWBugProblem() throws IOException {
         VehicleImpl v4 = VehicleImpl.Builder.newInstance("vehicle4").setStartLocation(Location.newInstance(0))
             .setEarliestStart(36000).setLatestArrival(54060).setType(type).build();
 
-        Service s1 = new Service.Builder("1").setLocation(Location.Builder.newInstance().setIndex(1).setId("js0").build())
+        ServiceJob s1 = new ServiceJob.Builder("1").setLocation(Location.Builder.newInstance().setIndex(1).setId("js0").build())
             .setServiceTime(600).setTimeWindow(TimeWindow.newInstance(0, 1800)).addSizeDimension(0, 1).build();
-        Service s2 = new Service.Builder("2").setLocation(Location.Builder.newInstance().setIndex(2).setId("js2").build())
+        ServiceJob s2 = new ServiceJob.Builder("2").setLocation(Location.Builder.newInstance().setIndex(2).setId("js2").build())
             .setServiceTime(600).setTimeWindow(TimeWindow.newInstance(5400, 7200)).addSizeDimension(0, 2).build();
-        Service s3 = new Service.Builder("3").setLocation(Location.Builder.newInstance().setIndex(3).setId("js5").build())
+        ServiceJob s3 = new ServiceJob.Builder("3").setLocation(Location.Builder.newInstance().setIndex(3).setId("js5").build())
             .setServiceTime(1800).setTimeWindow(TimeWindow.newInstance(17100, 18000)).addSizeDimension(0, 10).build();
-        Service s4 = new Service.Builder("4").setLocation(Location.Builder.newInstance().setIndex(4).setId("js4").build())
+        ServiceJob s4 = new ServiceJob.Builder("4").setLocation(Location.Builder.newInstance().setIndex(4).setId("js4").build())
             .setServiceTime(900).addSizeDimension(0, 2).build();
-        Service s5 = new Service.Builder("5").setLocation(Location.Builder.newInstance().setIndex(5).setId("js8").build())
+        ServiceJob s5 = new ServiceJob.Builder("5").setLocation(Location.Builder.newInstance().setIndex(5).setId("js8").build())
             .setServiceTime(600).addSizeDimension(0, 4).build();
-        Service s6 = new Service.Builder("6").setLocation(Location.Builder.newInstance().setIndex(6).setId("js10").build())
+        ServiceJob s6 = new ServiceJob.Builder("6").setLocation(Location.Builder.newInstance().setIndex(6).setId("js10").build())
             .setServiceTime(1500).setTimeWindow(TimeWindow.newInstance(29700, 32400)).addSizeDimension(0, 10).build();
-        Service s7 = new Service.Builder("7").setLocation(Location.Builder.newInstance().setIndex(7).setId("jsp3").build())
+        ServiceJob s7 = new ServiceJob.Builder("7").setLocation(Location.Builder.newInstance().setIndex(7).setId("jsp3").build())
             .setServiceTime(5594).build();
 
-        Shipment shipment1 = Shipment.Builder.newInstance("shipment1")
+        ShipmentJob shipment1 = new ShipmentJob.Builder("shipment1")
             .setPickupServiceTime(900)
             .setPickupLocation(Location.Builder.newInstance().setId("jsp1").setIndex(1).build())
             .setDeliveryLocation(Location.Builder.newInstance().setId("jsd1").setIndex(8).build())
             .setDeliveryServiceTime(900).build();
 
-        Shipment shipment2 = Shipment.Builder.newInstance("shipment2")
+        ShipmentJob shipment2 = new ShipmentJob.Builder("shipment2")
             .setPickupLocation(Location.Builder.newInstance().setId("jsp4").setIndex(9).build())
             .setPickupServiceTime(1200)
             .addPickupTimeWindow(21600, 23400)
@@ -351,7 +351,7 @@ private VehicleRoutingProblem createTWBugProblem() throws IOException {
             .addDeliveryTimeWindow(25200, 27000)
             .build();
 
-        Shipment shipment3 = Shipment.Builder.newInstance("shipment3")
+        ShipmentJob shipment3 = new ShipmentJob.Builder("shipment3")
             .setPickupLocation(Location.Builder.newInstance().setId("jsp7").setIndex(9).build())
             .setPickupServiceTime(1200)
             .addPickupTimeWindow(37800, 41400)
@@ -360,7 +360,7 @@ private VehicleRoutingProblem createTWBugProblem() throws IOException {
             .addDeliveryTimeWindow(43200, 45900)
             .build();
 
-        Shipment shipment4 = Shipment.Builder.newInstance("shipment4")
+        ShipmentJob shipment4 = new ShipmentJob.Builder("shipment4")
             .setPickupLocation(Location.Builder.newInstance().setId("jsp9").setIndex(10).build())
             .setPickupServiceTime(300)
             .addPickupTimeWindow(45000, 48600)
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/MultipleTimeWindowsTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/MultipleTimeWindowsTest.java
index 49b38cd72..43034049e 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/MultipleTimeWindowsTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/MultipleTimeWindowsTest.java
@@ -25,7 +25,7 @@
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.util.Solutions;
@@ -37,9 +37,9 @@
 
     @Test
     public void service2ShouldNotBeInserted() {
-        Service s = new Service.Builder("s1").setLocation(Location.newInstance(10, 0)).build();
+        ServiceJob s = new ServiceJob.Builder("s1").setLocation(Location.newInstance(10, 0)).build();
 
-        Service s2 = new Service.Builder("s2")
+        ServiceJob s2 = new ServiceJob.Builder("s2")
                         .addTimeWindow(50., 60.)
                         .setLocation(Location.newInstance(20, 0)).build();
 
@@ -56,10 +56,10 @@ public void service2ShouldNotBeInserted() {
 
     @Test
     public void service2ShouldBeInsertedIntoNewVehicle() {
-        Service s = new Service.Builder("s1").setLocation(Location.newInstance(10, 0))
+        ServiceJob s = new ServiceJob.Builder("s1").setLocation(Location.newInstance(10, 0))
                         .addTimeWindow(5., 15.).build();
 
-        Service s2 = new Service.Builder("s2")
+        ServiceJob s2 = new ServiceJob.Builder("s2")
                         .addTimeWindow(50., 60.)
                         .setLocation(Location.newInstance(20, 0)).build();
 
@@ -80,9 +80,9 @@ public void service2ShouldBeInsertedIntoNewVehicle() {
 
     @Test
     public void service2ShouldBeInserted() {
-        Service s = new Service.Builder("s1").setLocation(Location.newInstance(10, 0)).build();
+        ServiceJob s = new ServiceJob.Builder("s1").setLocation(Location.newInstance(10, 0)).build();
 
-        Service s2 = new Service.Builder("s2")
+        ServiceJob s2 = new ServiceJob.Builder("s2")
                         .addTimeWindow(50., 60.).addTimeWindow(15., 25)
                         .setLocation(Location.newInstance(20, 0)).build();
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/OpenRoutesTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/OpenRoutesTest.java
index 0c0d0d368..91d6a9343 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/OpenRoutesTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/OpenRoutesTest.java
@@ -30,8 +30,8 @@
 import com.graphhopper.jsprit.core.distance.SphericalDistanceCalculator;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.job.Service;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
@@ -50,7 +50,7 @@ public void whenDealingWithOpenRouteAndShipments_insertionShouldNotRequireRouteT
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v").setLatestArrival(11.)
                         .setType(type).setReturnToDepot(false).setStartLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(0, 0)).build()).build();
 
-        Shipment shipment = Shipment.Builder.newInstance("s").setPickupLocation(TestUtils.loc(Coordinate.newInstance(5, 0)))
+        ShipmentJob shipment = new ShipmentJob.Builder("s").setPickupLocation(TestUtils.loc(Coordinate.newInstance(5, 0)))
                         .setDeliveryLocation(TestUtils.loc(Coordinate.newInstance(10, 0))).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(shipment).addVehicle(vehicle).build();
@@ -76,7 +76,7 @@ public void whenDealingWithOpenRoute_insertionShouldNotRequireRouteToBeClosed()
                         .setStartLocation(TestUtils.loc(Coordinate.newInstance(0, 0)))
                         .build();
 
-        Service service = new Service.Builder("s")
+        ServiceJob service = new ServiceJob.Builder("s")
                         .setLocation(TestUtils.loc(Coordinate.newInstance(5, 0)))
                         .build();
 
@@ -104,7 +104,7 @@ public void whenDealingWithOpenRouteAndShipments_algorithmShouldCalculateCorrect
                         .setType(type).setReturnToDepot(false).setStartLocation(Location.Builder.newInstance()
                                         .setCoordinate(Coordinate.newInstance(0, 0)).build()).build();
 
-        Shipment shipment = Shipment.Builder.newInstance("s")
+        ShipmentJob shipment = new ShipmentJob.Builder("s")
                         .setPickupLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(5, 0)).build())
                         .setDeliveryLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(10, 0)).build())
                         .build();
@@ -126,7 +126,7 @@ public void whenDealingWithOpenRoute_algorithmShouldCalculateCorrectCosts() {
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v").setLatestArrival(10.)
                         .setType(type).setReturnToDepot(false).setStartLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(0, 0)).build()).build();
 
-        Service service = new Service.Builder("s")
+        ServiceJob service = new ServiceJob.Builder("s")
                         .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(5, 0)).build()).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(service).addVehicle(vehicle).build();
@@ -148,7 +148,7 @@ public void whenDealingWithOpenRouteAndGreatCircleCost_algorithmShouldRunWithout
                         .setStartLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(0, 0)).build())
                         .build();
 
-        Service service = new Service.Builder("s")
+        ServiceJob service = new ServiceJob.Builder("s")
                         .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(50, 0)).build()).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance()
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollectionWithCostsHigherThanTimesAndFiniteFleet_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollectionWithCostsHigherThanTimesAndFiniteFleet_IT.java
index 627ad6998..bfe3a90c8 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollectionWithCostsHigherThanTimesAndFiniteFleet_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollectionWithCostsHigherThanTimesAndFiniteFleet_IT.java
@@ -30,7 +30,7 @@
 import com.graphhopper.jsprit.core.algorithm.box.GreedySchrimpfFactory;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
@@ -105,7 +105,7 @@ private void readDemandQuantities(VehicleRoutingProblem.Builder vrpBuilder) thro
             /*
              * build service
 			 */
-            Service service = new Service.Builder(lineTokens[0]).addSizeDimension(0, Integer.parseInt(lineTokens[1]))
+            ServiceJob service = new ServiceJob.Builder(lineTokens[0]).addSizeDimension(0, Integer.parseInt(lineTokens[1]))
                 .setLocation(Location.newInstance(lineTokens[0])).build();
             /*
              * and add it to problem
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollectionWithCostsHigherThanTimesAndFiniteFleet_withTimeAndDistanceCosts_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollectionWithCostsHigherThanTimesAndFiniteFleet_withTimeAndDistanceCosts_IT.java
index df36105fb..ec5d6d7cb 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollectionWithCostsHigherThanTimesAndFiniteFleet_withTimeAndDistanceCosts_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollectionWithCostsHigherThanTimesAndFiniteFleet_withTimeAndDistanceCosts_IT.java
@@ -31,7 +31,7 @@
 import com.graphhopper.jsprit.core.algorithm.termination.IterationWithoutImprovementTermination;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
@@ -106,7 +106,7 @@ private void readDemandQuantities(VehicleRoutingProblem.Builder vrpBuilder) thro
             /*
              * build service
 			 */
-            Service service = new Service.Builder(lineTokens[0]).addSizeDimension(0, Integer.parseInt(lineTokens[1]))
+            ServiceJob service = new ServiceJob.Builder(lineTokens[0]).addSizeDimension(0, Integer.parseInt(lineTokens[1]))
                 .setLocation(Location.newInstance(lineTokens[0])).build();
             /*
              * and add it to problem
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollection_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollection_IT.java
index 5e1975bfc..2cd118817 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollection_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollection_IT.java
@@ -33,9 +33,9 @@
 import com.graphhopper.jsprit.core.algorithm.termination.IterationWithoutImprovementTermination;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.job.Delivery;
-import com.graphhopper.jsprit.core.problem.job.Pickup;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.DeliveryJob;
+import com.graphhopper.jsprit.core.problem.job.PickupJob;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
@@ -228,7 +228,7 @@ private void readDemandQuantitiesAsServices(VehicleRoutingProblem.Builder vrpBui
             /*
              * build service
              */
-            Service service = new Service.Builder(lineTokens[0]).addSizeDimension(0, Integer.parseInt(lineTokens[1]))
+            ServiceJob service = new ServiceJob.Builder(lineTokens[0]).addSizeDimension(0, Integer.parseInt(lineTokens[1]))
                             .setLocation(Location.newInstance(lineTokens[0])).build();
             /*
              * and add it to problem
@@ -255,7 +255,7 @@ private void readDemandQuantitiesAsPickups(VehicleRoutingProblem.Builder vrpBuil
             /*
              * build service
              */
-            Pickup service = new Pickup.Builder(lineTokens[0]).addSizeDimension(0, Integer.parseInt(lineTokens[1]))
+            PickupJob service = new PickupJob.Builder(lineTokens[0]).addSizeDimension(0, Integer.parseInt(lineTokens[1]))
                             .setLocation(Location.newInstance(lineTokens[0])).build();
             /*
              * and add it to problem
@@ -278,7 +278,7 @@ private void readDemandQuantitiesAsDeliveries(VehicleRoutingProblem.Builder vrpB
             /*
              * build service
              */
-            Delivery service = new Delivery.Builder(lineTokens[0]).addSizeDimension(0, Integer.parseInt(lineTokens[1]))
+            DeliveryJob service = new DeliveryJob.Builder(lineTokens[0]).addSizeDimension(0, Integer.parseInt(lineTokens[1]))
                             .setLocation(Location.newInstance(lineTokens[0])).build();
             /*
              * and add it to problem
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/SolomonSkills_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/SolomonSkills_IT.java
index cdadb01d4..a426017a1 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/SolomonSkills_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/SolomonSkills_IT.java
@@ -30,7 +30,7 @@
 import com.graphhopper.jsprit.core.problem.Skills;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.ServiceActivity;
@@ -69,9 +69,9 @@ public void itShouldMakeCorrectAssignmentAccordingToSkills() {
             skillProblemBuilder.addVehicle(skill1Vehicle).addVehicle(skill2Vehicle);
         }
         for (Job job : vrp.getJobs().values()) {
-            Service service = (Service) job;
+            ServiceJob service = (ServiceJob) job;
             ServiceActivity activity = service.getActivity();
-            Service.Builder skillServiceBuilder = new Service.Builder(service.getId())
+            ServiceJob.Builder skillServiceBuilder = new ServiceJob.Builder(service.getId())
                             .setServiceTime(activity.getOperationTime())
                             .setLocation(TestUtils.loc(activity.getLocation().getId(),
                                             activity.getLocation().getCoordinate()))
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/UnassignedJobListTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/UnassignedJobListTest.java
index aa21d5b32..07d75bc36 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/UnassignedJobListTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/UnassignedJobListTest.java
@@ -27,7 +27,7 @@
 import com.graphhopper.jsprit.core.algorithm.box.GreedySchrimpfFactory;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
@@ -39,9 +39,9 @@
     public void job2ShouldBeInBadJobList_dueToTimeWindow() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         builder.addVehicle(VehicleImpl.Builder.newInstance("v1").setEarliestStart(0).setLatestArrival(12).setStartLocation(Location.newInstance(1, 1)).build());
-        Service job1 = new Service.Builder("job1").setLocation(Location.newInstance(0, 0)).setTimeWindow(TimeWindow.newInstance(0, 12)).setServiceTime(1).build();
+        ServiceJob job1 = new ServiceJob.Builder("job1").setLocation(Location.newInstance(0, 0)).setTimeWindow(TimeWindow.newInstance(0, 12)).setServiceTime(1).build();
         builder.addJob(job1);
-        Service job2 = new Service.Builder("job2").setLocation(Location.newInstance(2, 2)).setTimeWindow(TimeWindow.newInstance(12, 24)).setServiceTime(1).build();
+        ServiceJob job2 = new ServiceJob.Builder("job2").setLocation(Location.newInstance(2, 2)).setTimeWindow(TimeWindow.newInstance(12, 24)).setServiceTime(1).build();
         builder.addJob(job2);
 
         VehicleRoutingProblem vrp = builder.build();
@@ -58,9 +58,9 @@ public void job2ShouldBeInBadJobList_dueToTimeWindow() {
     public void job2ShouldBeInBadJobList_dueToSize() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         builder.addVehicle(VehicleImpl.Builder.newInstance("v1").setEarliestStart(0).setLatestArrival(12).setStartLocation(Location.newInstance(1, 1)).build());
-        Service job1 = new Service.Builder("job1").setLocation(Location.newInstance(0, 0)).setTimeWindow(TimeWindow.newInstance(0, 12)).setServiceTime(1).build();
+        ServiceJob job1 = new ServiceJob.Builder("job1").setLocation(Location.newInstance(0, 0)).setTimeWindow(TimeWindow.newInstance(0, 12)).setServiceTime(1).build();
         builder.addJob(job1);
-        Service job2 = new Service.Builder("job2").setLocation(Location.newInstance(2, 2)).addSizeDimension(0, 10).setTimeWindow(TimeWindow.newInstance(0, 12)).setServiceTime(1).build();
+        ServiceJob job2 = new ServiceJob.Builder("job2").setLocation(Location.newInstance(2, 2)).addSizeDimension(0, 10).setTimeWindow(TimeWindow.newInstance(0, 12)).setServiceTime(1).build();
         builder.addJob(job2);
 
         VehicleRoutingProblem vrp = builder.build();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/VariableDepartureAndWaitingTime_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/VariableDepartureAndWaitingTime_IT.java
index b8c860f81..e9bf971b1 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/VariableDepartureAndWaitingTime_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/VariableDepartureAndWaitingTime_IT.java
@@ -33,7 +33,7 @@
 import com.graphhopper.jsprit.core.problem.cost.TransportDistance;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingActivityCosts;
 import com.graphhopper.jsprit.core.problem.driver.Driver;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.SolutionCostCalculator;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
@@ -100,8 +100,8 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
     @Test
     public void plainSetupShouldWork() {
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
-        Service s1 = new Service.Builder("s1").setLocation(Location.newInstance(10, 0)).build();
-        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(20, 0)).build();
+        ServiceJob s1 = new ServiceJob.Builder("s1").setLocation(Location.newInstance(10, 0)).build();
+        ServiceJob s2 = new ServiceJob.Builder("s2").setLocation(Location.newInstance(20, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance()
                         .addJob(s1).addJob(s2).addVehicle(v)
                         .setFleetSize(VehicleRoutingProblem.FleetSize.FINITE)
@@ -116,8 +116,8 @@ public void plainSetupShouldWork() {
     @Test
     public void withTimeWindowsShouldWork() {
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
-        Service s1 = new Service.Builder("s1").setTimeWindow(TimeWindow.newInstance(1010, 1100)).setLocation(Location.newInstance(10, 0)).build();
-        Service s2 = new Service.Builder("s2").setTimeWindow(TimeWindow.newInstance(1020, 1100)).setLocation(Location.newInstance(20, 0)).build();
+        ServiceJob s1 = new ServiceJob.Builder("s1").setTimeWindow(TimeWindow.newInstance(1010, 1100)).setLocation(Location.newInstance(10, 0)).build();
+        ServiceJob s2 = new ServiceJob.Builder("s2").setTimeWindow(TimeWindow.newInstance(1020, 1100)).setLocation(Location.newInstance(20, 0)).build();
         final VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance()
                         .addJob(s1).addJob(s2).addVehicle(v)
                         .setFleetSize(VehicleRoutingProblem.FleetSize.FINITE)
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/box/JspritTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/box/JspritTest.java
index 8ae4d1e4f..e30a09f01 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/box/JspritTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/box/JspritTest.java
@@ -40,7 +40,7 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
@@ -54,7 +54,7 @@
 
     @Test
     public void whenRunningJspritWithSingleCustomer_itShouldWork() {
-        Service s = new Service.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
+        ServiceJob s = new ServiceJob.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addVehicle(v).addJob(s).build();
         VehicleRoutingAlgorithm vra = Jsprit.createAlgorithm(vrp);
@@ -85,8 +85,8 @@ private void count(String strategyId) {
 
     @Test
     public void whenActivatingStrat_itShouldBeReflected() {
-        Service s = new Service.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
-        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(1, 2)).build();
+        ServiceJob s = new ServiceJob.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
+        ServiceJob s2 = new ServiceJob.Builder("s2").setLocation(Location.newInstance(1, 2)).build();
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addVehicle(v).addJob(s2).addJob(s).build();
         VehicleRoutingAlgorithm vra = Jsprit.Builder.newInstance(vrp)
@@ -115,9 +115,9 @@ private void count(String strategyId) {
 
     @Test
     public void whenActivatingStrat_itShouldBeReflectedV2() {
-        Service s = new Service.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
-        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(1, 2)).build();
-        Service s3 = new Service.Builder("s3").setLocation(Location.newInstance(1, 2)).build();
+        ServiceJob s = new ServiceJob.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
+        ServiceJob s2 = new ServiceJob.Builder("s2").setLocation(Location.newInstance(1, 2)).build();
+        ServiceJob s3 = new ServiceJob.Builder("s3").setLocation(Location.newInstance(1, 2)).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(s3).addVehicle(v).addJob(s2).addJob(s).build();
@@ -145,10 +145,10 @@ private void count(String strategyId) {
 
     @Test
     public void test_v4() {
-        Service s = new Service.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
-        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(1, 2)).build();
-        Service s3 = new Service.Builder("s3").setLocation(Location.newInstance(1, 2)).build();
-        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance(1, 2)).build();
+        ServiceJob s = new ServiceJob.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
+        ServiceJob s2 = new ServiceJob.Builder("s2").setLocation(Location.newInstance(1, 2)).build();
+        ServiceJob s3 = new ServiceJob.Builder("s3").setLocation(Location.newInstance(1, 2)).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").setLocation(Location.newInstance(1, 2)).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(s4).addJob(s3).addVehicle(v).addJob(s2).addJob(s).build();
@@ -177,10 +177,10 @@ private void count(String strategyId) {
 
     @Test
     public void strategyDrawShouldBeReproducible() {
-        Service s = new Service.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
-        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(1, 2)).build();
-        Service s3 = new Service.Builder("s3").setLocation(Location.newInstance(1, 2)).build();
-        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance(1, 2)).build();
+        ServiceJob s = new ServiceJob.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
+        ServiceJob s2 = new ServiceJob.Builder("s2").setLocation(Location.newInstance(1, 2)).build();
+        ServiceJob s3 = new ServiceJob.Builder("s3").setLocation(Location.newInstance(1, 2)).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").setLocation(Location.newInstance(1, 2)).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(s4).addJob(s3).addVehicle(v).addJob(s2).addJob(s).build();
@@ -222,10 +222,10 @@ public void informSelectedStrategy(SearchStrategy.DiscoveredSolution discoveredS
 
     @Test
     public void strategyDrawShouldBeReproducibleV2() {
-        Service s = new Service.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
-        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(1, 2)).build();
-        Service s3 = new Service.Builder("s3").setLocation(Location.newInstance(1, 2)).build();
-        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance(1, 2)).build();
+        ServiceJob s = new ServiceJob.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
+        ServiceJob s2 = new ServiceJob.Builder("s2").setLocation(Location.newInstance(1, 2)).build();
+        ServiceJob s3 = new ServiceJob.Builder("s3").setLocation(Location.newInstance(1, 2)).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").setLocation(Location.newInstance(1, 2)).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(s4).addJob(s3).addVehicle(v).addJob(s2).addJob(s).build();
@@ -267,10 +267,10 @@ public void informSelectedStrategy(SearchStrategy.DiscoveredSolution discoveredS
 
     @Test
     public void ruinedJobsShouldBeReproducible() {
-        Service s = new Service.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
-        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(1, 2)).build();
-        Service s3 = new Service.Builder("s3").setLocation(Location.newInstance(1, 2)).build();
-        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance(1, 2)).build();
+        ServiceJob s = new ServiceJob.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
+        ServiceJob s2 = new ServiceJob.Builder("s2").setLocation(Location.newInstance(1, 2)).build();
+        ServiceJob s3 = new ServiceJob.Builder("s3").setLocation(Location.newInstance(1, 2)).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").setLocation(Location.newInstance(1, 2)).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(s4).addJob(s3).addVehicle(v).addJob(s2).addJob(s).build();
@@ -332,10 +332,10 @@ public void removed(Job job, VehicleRoute fromRoute) {
 
     @Test
     public void ruinedJobsShouldBeReproducibleV2() {
-        Service s = new Service.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
-        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(1, 2)).build();
-        Service s3 = new Service.Builder("s3").setLocation(Location.newInstance(1, 2)).build();
-        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance(1, 2)).build();
+        ServiceJob s = new ServiceJob.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
+        ServiceJob s2 = new ServiceJob.Builder("s2").setLocation(Location.newInstance(1, 2)).build();
+        ServiceJob s3 = new ServiceJob.Builder("s3").setLocation(Location.newInstance(1, 2)).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").setLocation(Location.newInstance(1, 2)).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(s4).addJob(s3).addVehicle(v).addJob(s2).addJob(s).build();
@@ -391,10 +391,10 @@ public void removed(Job job, VehicleRoute fromRoute) {
 
     @Test
     public void insertionShouldBeReproducible() {
-        Service s = new Service.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
-        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(1, 2)).build();
-        Service s3 = new Service.Builder("s3").setLocation(Location.newInstance(1, 2)).build();
-        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance(1, 2)).build();
+        ServiceJob s = new ServiceJob.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
+        ServiceJob s2 = new ServiceJob.Builder("s2").setLocation(Location.newInstance(1, 2)).build();
+        ServiceJob s3 = new ServiceJob.Builder("s3").setLocation(Location.newInstance(1, 2)).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").setLocation(Location.newInstance(1, 2)).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(s4).addJob(s3).addVehicle(v).addJob(s2).addJob(s).build();
@@ -431,10 +431,10 @@ public void informJobInserted(Job job2insert, VehicleRoute inRoute, double addit
 
     @Test
     public void insertionShouldBeReproducibleV2() {
-        Service s = new Service.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
-        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(1, 1)).build();
-        Service s3 = new Service.Builder("s3").setLocation(Location.newInstance(1, 3)).build();
-        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance(1, 4)).build();
+        ServiceJob s = new ServiceJob.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
+        ServiceJob s2 = new ServiceJob.Builder("s2").setLocation(Location.newInstance(1, 1)).build();
+        ServiceJob s3 = new ServiceJob.Builder("s3").setLocation(Location.newInstance(1, 3)).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").setLocation(Location.newInstance(1, 4)).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().setFleetSize(VehicleRoutingProblem.FleetSize.FINITE).addJob(s4).addJob(s3).addVehicle(v).addJob(s2).addJob(s).build();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/CalcVehicleTypeDependentServiceInsertionTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/CalcVehicleTypeDependentServiceInsertionTest.java
index b54364f48..0c9ddfe56 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/CalcVehicleTypeDependentServiceInsertionTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/CalcVehicleTypeDependentServiceInsertionTest.java
@@ -31,7 +31,7 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleFleetManager;
@@ -45,7 +45,7 @@
     Vehicle veh1;
     Vehicle veh2;
     VehicleFleetManager fleetManager;
-    Service service;
+    ServiceJob service;
     VehicleRoute vehicleRoute;
 
     @Before
@@ -57,7 +57,7 @@ public void doBefore() {
         when(veh1.getStartLocation()).thenReturn(Location.newInstance("loc1"));
         when(veh2.getStartLocation()).thenReturn(Location.newInstance("loc2"));
         fleetManager = mock(VehicleFleetManager.class);
-        service = mock(Service.class);
+        service = mock(ServiceJob.class);
         vehicleRoute = mock(VehicleRoute.class);
 
         when(fleetManager.getAvailableVehicles()).thenReturn(Arrays.asList(veh1, veh2));
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ConfigureFixCostCalculatorTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ConfigureFixCostCalculatorTest.java
index b1c7bfab4..62efe6a4f 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ConfigureFixCostCalculatorTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ConfigureFixCostCalculatorTest.java
@@ -31,7 +31,7 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 
 /**
@@ -45,7 +45,7 @@
     public void before() {
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         for (int i = 0; i < 100; i++) {
-            Service service = new Service.Builder("" + i).setLocation(Location.newInstance(0)).build();
+            ServiceJob service = new ServiceJob.Builder("" + i).setLocation(Location.newInstance(0)).build();
             vrpBuilder.addJob(service);
         }
         vrp = vrpBuilder.build();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionAndLoadConstraintsTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionAndLoadConstraintsTest.java
index e671ff717..95ef0974a 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionAndLoadConstraintsTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionAndLoadConstraintsTest.java
@@ -36,8 +36,8 @@
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.driver.Driver;
 import com.graphhopper.jsprit.core.problem.driver.DriverImpl;
-import com.graphhopper.jsprit.core.problem.job.Delivery;
-import com.graphhopper.jsprit.core.problem.job.Pickup;
+import com.graphhopper.jsprit.core.problem.job.DeliveryJob;
+import com.graphhopper.jsprit.core.problem.job.PickupJob;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
@@ -110,8 +110,8 @@ private void createInsertionCalculator(HardRouteConstraint hardRouteLevelConstra
 
     @Test
     public void whenInsertingServiceWhileNoCapIsAvailable_itMustReturnTheCorrectInsertionIndex() {
-        Delivery delivery = new Delivery.Builder("del").addSizeDimension(0, 41).setLocation(Location.newInstance("10,10")).build();
-        Pickup pickup = new Pickup.Builder("pick").addSizeDimension(0, 15).setLocation(Location.newInstance("0,10")).build();
+        DeliveryJob delivery = new DeliveryJob.Builder("del").addSizeDimension(0, 41).setLocation(Location.newInstance("10,10")).build();
+        PickupJob pickup = new PickupJob.Builder("pick").addSizeDimension(0, 15).setLocation(Location.newInstance("0,10")).build();
 
         VehicleType type = VehicleTypeImpl.Builder.newInstance("t").addCapacityDimension(0, 50).setCostPerDistance(1).build();
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance("0,0")).setType(type).build();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionAndTimeWindowConstraintsTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionAndTimeWindowConstraintsTest.java
index 409a6b4b8..332e04f74 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionAndTimeWindowConstraintsTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionAndTimeWindowConstraintsTest.java
@@ -36,8 +36,8 @@
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.driver.Driver;
 import com.graphhopper.jsprit.core.problem.driver.DriverImpl;
-import com.graphhopper.jsprit.core.problem.job.Delivery;
-import com.graphhopper.jsprit.core.problem.job.Pickup;
+import com.graphhopper.jsprit.core.problem.job.DeliveryJob;
+import com.graphhopper.jsprit.core.problem.job.PickupJob;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
@@ -110,8 +110,8 @@ private void createInsertionCalculator(HardRouteConstraint hardRouteLevelConstra
 
     @Test
     public void whenInsertingServiceWithTW_itMustReturnTheCorrectInsertionIndex() {
-        Delivery delivery = new Delivery.Builder("del").addTimeWindow(30, 40).setLocation(Location.newInstance("10,10")).build();
-        Pickup pickup = new Pickup.Builder("pick").addTimeWindow(60, 80).setLocation(Location.newInstance("0,10")).build();
+        DeliveryJob delivery = new DeliveryJob.Builder("del").addTimeWindow(30, 40).setLocation(Location.newInstance("10,10")).build();
+        PickupJob pickup = new PickupJob.Builder("pick").addTimeWindow(60, 80).setLocation(Location.newInstance("0,10")).build();
 
         VehicleType type = VehicleTypeImpl.Builder.newInstance("t").setCostPerDistance(1).build();
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v").setLatestArrival(40).setStartLocation(Location.newInstance("0,0")).setType(type).build();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionWithServicesAndLoadConstraintsTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionWithServicesAndLoadConstraintsTest.java
index 082d1311a..2ade6bd60 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionWithServicesAndLoadConstraintsTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionWithServicesAndLoadConstraintsTest.java
@@ -36,8 +36,8 @@
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.driver.Driver;
 import com.graphhopper.jsprit.core.problem.driver.DriverImpl;
-import com.graphhopper.jsprit.core.problem.job.Delivery;
-import com.graphhopper.jsprit.core.problem.job.Pickup;
+import com.graphhopper.jsprit.core.problem.job.DeliveryJob;
+import com.graphhopper.jsprit.core.problem.job.PickupJob;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
@@ -102,8 +102,8 @@ public void doBefore() {
 
     @Test
     public void whenInsertingServiceWhileNoCapIsAvailable_itMustReturnTheCorrectInsertionIndex() {
-        Delivery delivery = new Delivery.Builder("del").addSizeDimension(0, 41).setLocation(Location.newInstance("10,10")).build();
-        Pickup pickup = new Pickup.Builder("pick").addSizeDimension(0, 15).setLocation(Location.newInstance("0,10")).build();
+        DeliveryJob delivery = new DeliveryJob.Builder("del").addSizeDimension(0, 41).setLocation(Location.newInstance("10,10")).build();
+        PickupJob pickup = new PickupJob.Builder("pick").addSizeDimension(0, 15).setLocation(Location.newInstance("0,10")).build();
 
         VehicleType type = VehicleTypeImpl.Builder.newInstance("t").addCapacityDimension(0, 50).setCostPerDistance(1).build();
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance("0,0")).setType(type).build();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionWithServicesTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionWithServicesTest.java
index b5cd812df..836d11d4d 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionWithServicesTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionWithServicesTest.java
@@ -41,7 +41,7 @@
 import com.graphhopper.jsprit.core.problem.driver.Driver;
 import com.graphhopper.jsprit.core.problem.driver.DriverImpl;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
@@ -63,11 +63,11 @@
 
     VehicleImpl newVehicle;
 
-    private Service first;
+    private ServiceJob first;
 
-    private Service third;
+    private ServiceJob third;
 
-    private Service second;
+    private ServiceJob second;
 
     private StateManager states;
 
@@ -109,9 +109,9 @@ public double getTransportCost(Location from, Location to, double departureTime,
         };
 
 
-        first = new Service.Builder("1").addSizeDimension(0, 0).setLocation(Location.newInstance("0,10")).setTimeWindow(TimeWindow.newInstance(0.0, 100.0)).build();
-        second = new Service.Builder("2").addSizeDimension(0, 0).setLocation(Location.newInstance("10,10")).setTimeWindow(TimeWindow.newInstance(0.0, 100.0)).build();
-        third = new Service.Builder("3").addSizeDimension(0, 0).setLocation(Location.newInstance("10,0")).setTimeWindow(TimeWindow.newInstance(0.0, 100.0)).build();
+        first = new ServiceJob.Builder("1").addSizeDimension(0, 0).setLocation(Location.newInstance("0,10")).setTimeWindow(TimeWindow.newInstance(0.0, 100.0)).build();
+        second = new ServiceJob.Builder("2").addSizeDimension(0, 0).setLocation(Location.newInstance("10,10")).setTimeWindow(TimeWindow.newInstance(0.0, 100.0)).build();
+        third = new ServiceJob.Builder("3").addSizeDimension(0, 0).setLocation(Location.newInstance("10,0")).setTimeWindow(TimeWindow.newInstance(0.0, 100.0)).build();
 
         Collection<Job> jobs = new ArrayList<>();
         jobs.add(first);
@@ -201,7 +201,7 @@ public void whenInsertingASecondJobWithANewVehicle_itCalculatesLocalMarginalCost
     public void whenInsertingJobAndCurrRouteIsEmpty_accessEggressCalcShouldReturnZero() {
         VehicleRoute route = VehicleRoute.Builder.newInstance(VehicleImpl.createNoVehicle(), DriverImpl.noDriver()).build();
         AdditionalAccessEgressCalculator accessEgressCalc = new AdditionalAccessEgressCalculator(costs);
-        Job job = new Service.Builder("1").addSizeDimension(0, 0).setLocation(Location.newInstance("1")).setTimeWindow(TimeWindow.newInstance(0.0, 100.0)).build();
+        Job job = new ServiceJob.Builder("1").addSizeDimension(0, 0).setLocation(Location.newInstance("1")).setTimeWindow(TimeWindow.newInstance(0.0, 100.0)).build();
         JobInsertionContext iContex = new JobInsertionContext(route, job, newVehicle, mock(Driver.class), 0.0);
         assertEquals(0.0, accessEgressCalc.getCosts(iContex), 0.01);
     }
@@ -239,13 +239,13 @@ public double getTransportCost(Location from, Location to, double departureTime,
         Vehicle oldVehicle = VehicleImpl.Builder.newInstance("oldV").setStartLocation(Location.newInstance("oldV")).build();
 
         VehicleRoute route = VehicleRoute.Builder.newInstance(oldVehicle, DriverImpl.noDriver())
-            .addService(new Service.Builder("service").addSizeDimension(0, 0).setLocation(Location.newInstance("service")).build())
+            .addService(new ServiceJob.Builder("service").addSizeDimension(0, 0).setLocation(Location.newInstance("service")).build())
             .build();
 
         Vehicle newVehicle = VehicleImpl.Builder.newInstance("newV").setStartLocation(Location.newInstance("newV")).build();
 
         AdditionalAccessEgressCalculator accessEgressCalc = new AdditionalAccessEgressCalculator(routingCosts);
-        Job job = new Service.Builder("service2").addSizeDimension(0, 0).setLocation(Location.newInstance("service")).build();
+        Job job = new ServiceJob.Builder("service2").addSizeDimension(0, 0).setLocation(Location.newInstance("service")).build();
         JobInsertionContext iContex = new JobInsertionContext(route, job, newVehicle, mock(Driver.class), 0.0);
         assertEquals(8.0, accessEgressCalc.getCosts(iContex), 0.01);
     }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionWithShipmentsTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionWithShipmentsTest.java
index 0d2ccdced..ec7ed0aa2 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionWithShipmentsTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionWithShipmentsTest.java
@@ -38,8 +38,8 @@
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.driver.Driver;
 import com.graphhopper.jsprit.core.problem.driver.DriverImpl;
-import com.graphhopper.jsprit.core.problem.job.Pickup;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.PickupJob;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
@@ -105,7 +105,7 @@ private void createInsertionCalculator(HardRouteConstraint hardRouteLevelConstra
 
     @Test
     public void whenCalculatingInsertionCostsOfShipment_itShouldReturnCorrectCostValue() {
-        Shipment shipment = Shipment.Builder.newInstance("s").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,10").build()).setDeliveryLocation(Location.newInstance("10,0")).build();
+        ShipmentJob shipment = new ShipmentJob.Builder("s").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,10").build()).setDeliveryLocation(Location.newInstance("10,0")).build();
         VehicleRoutingProblem.Builder.newInstance().addJob(shipment).build();
         VehicleRoute route = VehicleRoute.emptyRoute();
         InsertionData iData = insertionCalculator.getInsertionData(route, shipment, vehicle, 0.0, null, Double.MAX_VALUE);
@@ -114,8 +114,8 @@ public void whenCalculatingInsertionCostsOfShipment_itShouldReturnCorrectCostVal
 
     @Test
     public void whenCalculatingInsertionIntoExistingRoute_itShouldReturnCorrectCosts() {
-        Shipment shipment = Shipment.Builder.newInstance("s").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,10").build()).setDeliveryLocation(Location.newInstance("10,0")).build();
-        Shipment shipment2 = Shipment.Builder.newInstance("s2").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("10,10").build()).setDeliveryLocation(Location.newInstance("0,0")).build();
+        ShipmentJob shipment = new ShipmentJob.Builder("s").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,10").build()).setDeliveryLocation(Location.newInstance("10,0")).build();
+        ShipmentJob shipment2 = new ShipmentJob.Builder("s2").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("10,10").build()).setDeliveryLocation(Location.newInstance("0,0")).build();
 
         VehicleRoutingProblem.Builder.newInstance().addJob(shipment).addJob(shipment2).build();
 
@@ -133,8 +133,8 @@ public void whenCalculatingInsertionIntoExistingRoute_itShouldReturnCorrectCosts
 
     @Test
     public void whenInsertingShipmentInRouteWithNotEnoughCapacity_itShouldReturnNoInsertion() {
-        Shipment shipment = Shipment.Builder.newInstance("s").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,10").build()).setDeliveryLocation(Location.newInstance("10,0")).build();
-        Shipment shipment2 = Shipment.Builder.newInstance("s2").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("10,10").build()).setDeliveryLocation(Location.newInstance("0,0")).build();
+        ShipmentJob shipment = new ShipmentJob.Builder("s").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,10").build()).setDeliveryLocation(Location.newInstance("10,0")).build();
+        ShipmentJob shipment2 = new ShipmentJob.Builder("s2").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("10,10").build()).setDeliveryLocation(Location.newInstance("0,0")).build();
 
         VehicleRoutingProblem.Builder.newInstance().addJob(shipment).addJob(shipment2).build();
 
@@ -153,9 +153,9 @@ public void whenInsertingShipmentInRouteWithNotEnoughCapacity_itShouldReturnNoIn
 
     @Test
     public void whenInsertingThirdShipment_itShouldCalcCorrectVal() {
-        Shipment shipment = Shipment.Builder.newInstance("s").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,10").build()).setDeliveryLocation(Location.newInstance("10,0")).build();
-        Shipment shipment2 = Shipment.Builder.newInstance("s2").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("10,10").build()).setDeliveryLocation(Location.newInstance("0,0")).build();
-        Shipment shipment3 = Shipment.Builder.newInstance("s3").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,0").build()).setDeliveryLocation(Location.newInstance("9,10")).build();
+        ShipmentJob shipment = new ShipmentJob.Builder("s").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,10").build()).setDeliveryLocation(Location.newInstance("10,0")).build();
+        ShipmentJob shipment2 = new ShipmentJob.Builder("s2").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("10,10").build()).setDeliveryLocation(Location.newInstance("0,0")).build();
+        ShipmentJob shipment3 = new ShipmentJob.Builder("s3").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,0").build()).setDeliveryLocation(Location.newInstance("9,10")).build();
 
         VehicleRoutingProblem.Builder.newInstance().addJob(shipment).addJob(shipment2).addJob(shipment3).build();
 
@@ -176,9 +176,9 @@ public void whenInsertingThirdShipment_itShouldCalcCorrectVal() {
 
     @Test
     public void whenInsertingThirdShipment_itShouldCalcCorrectVal2() {
-        Shipment shipment = Shipment.Builder.newInstance("s").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,10").build()).setDeliveryLocation(Location.newInstance("10,0")).build();
-        Shipment shipment2 = Shipment.Builder.newInstance("s2").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("10,10").build()).setDeliveryLocation(Location.newInstance("0,0")).build();
-        Shipment shipment3 = Shipment.Builder.newInstance("s3").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,0").build()).setDeliveryLocation(Location.newInstance("9,9")).build();
+        ShipmentJob shipment = new ShipmentJob.Builder("s").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,10").build()).setDeliveryLocation(Location.newInstance("10,0")).build();
+        ShipmentJob shipment2 = new ShipmentJob.Builder("s2").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("10,10").build()).setDeliveryLocation(Location.newInstance("0,0")).build();
+        ShipmentJob shipment3 = new ShipmentJob.Builder("s3").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,0").build()).setDeliveryLocation(Location.newInstance("9,9")).build();
 
         VehicleRoutingProblem.Builder.newInstance().addJob(shipment).addJob(shipment2).addJob(shipment3).build();
 
@@ -198,9 +198,9 @@ public void whenInsertingThirdShipment_itShouldCalcCorrectVal2() {
 
     @Test
     public void whenInstertingShipmentWithLoadConstraintWhereCapIsNotSufficient_capConstraintsAreFulfilled() {
-        Shipment shipment = Shipment.Builder.newInstance("s").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,10").build()).setDeliveryLocation(Location.newInstance("10,0")).build();
-        Shipment shipment2 = Shipment.Builder.newInstance("s2").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("10,10").build()).setDeliveryLocation(Location.newInstance("0,0")).build();
-        Shipment shipment3 = Shipment.Builder.newInstance("s3").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,0").build()).setDeliveryLocation(Location.newInstance("9,9")).build();
+        ShipmentJob shipment = new ShipmentJob.Builder("s").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,10").build()).setDeliveryLocation(Location.newInstance("10,0")).build();
+        ShipmentJob shipment2 = new ShipmentJob.Builder("s2").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("10,10").build()).setDeliveryLocation(Location.newInstance("0,0")).build();
+        ShipmentJob shipment3 = new ShipmentJob.Builder("s3").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,0").build()).setDeliveryLocation(Location.newInstance("9,9")).build();
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         VehicleRoutingProblem vrp = vrpBuilder.addJob(shipment).addJob(shipment2).addJob(shipment3).build();
@@ -228,8 +228,8 @@ public void whenInstertingShipmentWithLoadConstraintWhereCapIsNotSufficient_capC
 
     @Test
     public void whenInsertingServiceWhileNoCapIsAvailable_itMustReturnNoInsertionData() {
-        Shipment shipment = Shipment.Builder.newInstance("s").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,10").build()).setDeliveryLocation(Location.newInstance("0,0")).build();
-        Shipment shipment2 = Shipment.Builder.newInstance("s2").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("10,10").build()).setDeliveryLocation(Location.newInstance("0,0")).build();
+        ShipmentJob shipment = new ShipmentJob.Builder("s").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,10").build()).setDeliveryLocation(Location.newInstance("0,0")).build();
+        ShipmentJob shipment2 = new ShipmentJob.Builder("s2").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("10,10").build()).setDeliveryLocation(Location.newInstance("0,0")).build();
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         VehicleRoutingProblem vrp = vrpBuilder.addJob(shipment).addJob(shipment2).build();
@@ -251,7 +251,7 @@ public void whenInsertingServiceWhileNoCapIsAvailable_itMustReturnNoInsertionDat
         stateManager.informInsertionStarts(Arrays.asList(route), null);
 
         //		Service service = new Service.Builder("pick", 1).setLocationId("5,5").build();
-        Pickup service = new Pickup.Builder("pick").addSizeDimension(0, 1).setLocation(Location.newInstance("5,5")).build();
+        PickupJob service = new PickupJob.Builder("pick").addSizeDimension(0, 1).setLocation(Location.newInstance("5,5")).build();
 
         InsertionData iData = insertionCalculator.getInsertionData(route, service, vehicle, 0, DriverImpl.noDriver(), Double.MAX_VALUE);
         //		routeActVisitor.visit(route);
@@ -259,7 +259,7 @@ public void whenInsertingServiceWhileNoCapIsAvailable_itMustReturnNoInsertionDat
         assertEquals(3, iData.getUnmodifiableEventsByType(InsertActivity.class).get(0).getIndex());
     }
 
-    private void add(VehicleRoutingProblem vrp, VehicleRoute route, Shipment shipment, int pickI, int delI) {
+    private void add(VehicleRoutingProblem vrp, VehicleRoute route, ShipmentJob shipment, int pickI, int delI) {
         List<JobActivity> shipmentActivities = vrp.copyAndGetActivities(shipment);
         route.getTourActivities().addActivity(delI, shipmentActivities.get(1));
         route.getTourActivities().addActivity(pickI, shipmentActivities.get(0));
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionTest.java
index d1e2c45df..b152c8adf 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionTest.java
@@ -40,8 +40,8 @@
 import com.graphhopper.jsprit.core.problem.constraint.HardRouteConstraint;
 import com.graphhopper.jsprit.core.problem.driver.Driver;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
@@ -61,8 +61,8 @@
 
     @Test
     public void noRoutesShouldBeCorrect() {
-        Service s1 = new Service.Builder("s1").setLocation(Location.newInstance(0, 10)).build();
-        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(0, 5)).build();
+        ServiceJob s1 = new ServiceJob.Builder("s1").setLocation(Location.newInstance(0, 10)).build();
+        ServiceJob s2 = new ServiceJob.Builder("s2").setLocation(Location.newInstance(0, 5)).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(s1).addJob(s2).addVehicle(v).build();
@@ -78,8 +78,8 @@ public void noRoutesShouldBeCorrect() {
 
     @Test
     public void noJobsInRouteShouldBeCorrect() {
-        Service s1 = new Service.Builder("s1").setLocation(Location.newInstance(0, 10)).build();
-        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(0, 5)).build();
+        ServiceJob s1 = new ServiceJob.Builder("s1").setLocation(Location.newInstance(0, 10)).build();
+        ServiceJob s2 = new ServiceJob.Builder("s2").setLocation(Location.newInstance(0, 5)).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(s1).addJob(s2).addVehicle(v).build();
@@ -95,8 +95,8 @@ public void noJobsInRouteShouldBeCorrect() {
 
     @Test
     public void s1ShouldBeAddedFirst() {
-        Service s1 = new Service.Builder("s1").setLocation(Location.newInstance(0, 10)).build();
-        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(0, 5)).build();
+        ServiceJob s1 = new ServiceJob.Builder("s1").setLocation(Location.newInstance(0, 10)).build();
+        ServiceJob s2 = new ServiceJob.Builder("s2").setLocation(Location.newInstance(0, 5)).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         final VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(s1).addJob(s2).addVehicle(v).build();
@@ -114,8 +114,8 @@ public void s1ShouldBeAddedFirst() {
 
     @Test
     public void solutionWithFastRegretMustBeCorrect() {
-        Service s1 = new Service.Builder("s1").setLocation(Location.newInstance(0, 10)).build();
-        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(0, -10)).build();
+        ServiceJob s1 = new ServiceJob.Builder("s1").setLocation(Location.newInstance(0, 10)).build();
+        ServiceJob s2 = new ServiceJob.Builder("s2").setLocation(Location.newInstance(0, -10)).build();
 
         VehicleImpl v1 = VehicleImpl.Builder.newInstance("v1").setStartLocation(Location.newInstance(0, 5)).build();
         VehicleImpl v2 = VehicleImpl.Builder.newInstance("v2").setStartLocation(Location.newInstance(0, -5)).build();
@@ -218,10 +218,10 @@ public boolean fulfilled(JobInsertionContext insertionContext) {
 
     @Test
     public void solutionWithConstraintAndWithFastRegretMustBeCorrect() {
-        Service s1 = new Service.Builder("s1").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 10)).build();
-        Service s2 = new Service.Builder("s2").addSizeDimension(0, 1).setLocation(Location.newInstance(0, -10)).build();
-        Service s3 = new Service.Builder("s3").addSizeDimension(0, 1).setLocation(Location.newInstance(0, -11)).build();
-        Service s4 = new Service.Builder("s4").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 11)).build();
+        ServiceJob s1 = new ServiceJob.Builder("s1").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 10)).build();
+        ServiceJob s2 = new ServiceJob.Builder("s2").addSizeDimension(0, 1).setLocation(Location.newInstance(0, -10)).build();
+        ServiceJob s3 = new ServiceJob.Builder("s3").addSizeDimension(0, 1).setLocation(Location.newInstance(0, -11)).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 11)).build();
 
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0, 2).build();
         VehicleImpl v1 = VehicleImpl.Builder.newInstance("v1").setType(type).setStartLocation(Location.newInstance(0, 10)).build();
@@ -265,10 +265,10 @@ public void solutionWithConstraintAndWithFastRegretMustBeCorrect() {
 
     @Test
     public void solutionWithConstraintAndWithFastRegretConcurrentMustBeCorrect() {
-        Service s1 = new Service.Builder("s1").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 10)).build();
-        Service s2 = new Service.Builder("s2").addSizeDimension(0, 1).setLocation(Location.newInstance(0, -10)).build();
-        Service s3 = new Service.Builder("s3").addSizeDimension(0, 1).setLocation(Location.newInstance(0, -11)).build();
-        Service s4 = new Service.Builder("s4").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 11)).build();
+        ServiceJob s1 = new ServiceJob.Builder("s1").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 10)).build();
+        ServiceJob s2 = new ServiceJob.Builder("s2").addSizeDimension(0, 1).setLocation(Location.newInstance(0, -10)).build();
+        ServiceJob s3 = new ServiceJob.Builder("s3").addSizeDimension(0, 1).setLocation(Location.newInstance(0, -11)).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 11)).build();
 
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0, 2).build();
         VehicleImpl v1 = VehicleImpl.Builder.newInstance("v1").setType(type).setStartLocation(Location.newInstance(0, 10)).build();
@@ -304,12 +304,12 @@ public void solutionWithConstraintAndWithFastRegretConcurrentMustBeCorrect() {
 
     @Test
     public void shipment1ShouldBeAddedFirst() {
-        Shipment s1 = Shipment.Builder.newInstance("s1")
+        ShipmentJob s1 = new ShipmentJob.Builder("s1")
                         .setPickupLocation(Location.Builder.newInstance().setId("pick1").setCoordinate(Coordinate.newInstance(-1, 10)).build())
                         .setDeliveryLocation(Location.Builder.newInstance().setId("del1").setCoordinate(Coordinate.newInstance(1, 10)).build())
                         .build();
 
-        Shipment s2 = Shipment.Builder.newInstance("s2")
+        ShipmentJob s2 = new ShipmentJob.Builder("s2")
                         .setPickupLocation(Location.Builder.newInstance().setId("pick2").setCoordinate(Coordinate.newInstance(-1, 20)).build())
                         .setDeliveryLocation(Location.Builder.newInstance().setId("del2").setCoordinate(Coordinate.newInstance(1, 20)).build())
                         .build();
@@ -377,7 +377,7 @@ private JobInsertionCostsCalculator getCalculator(final VehicleRoutingProblem vr
 
             @Override
             public InsertionData getInsertionData(VehicleRoute currentRoute, Job newJob, Vehicle newVehicle, double newVehicleDepartureTime, Driver newDriver, double bestKnownCosts) {
-                Service service = (Service) newJob;
+                ServiceJob service = (ServiceJob) newJob;
                 Vehicle vehicle = vrp.getVehicles().iterator().next();
                 InsertionData iData;
                 if (currentRoute.isEmpty()) {
@@ -412,7 +412,7 @@ public InsertionData getInsertionData(VehicleRoute currentRoute, Job newJob, Veh
                 return iData;
             }
 
-            private double getMarginalCost(Service service, TourActivity prevAct, TourActivity act) {
+            private double getMarginalCost(ServiceJob service, TourActivity prevAct, TourActivity act) {
                 double prev_new = getCost(prevAct.getLocation(),
                                 service.getActivity().getLocation());
                 double new_act = getCost(service.getActivity().getLocation(), act.getLocation());
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestComparator.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestComparator.java
index a14b6d278..8650c30fd 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestComparator.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestComparator.java
@@ -27,7 +27,7 @@
 
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 
 /**
  * Created by schroeder on 24/05/16.
@@ -36,13 +36,13 @@
 
     @Test
     public void test() {
-        Service s = new Service.Builder("1").setLocation(Location.newInstance("loc"))
+        ServiceJob s = new ServiceJob.Builder("1").setLocation(Location.newInstance("loc"))
             .setPriority(1).build();
-        Service s2 = new Service.Builder("2").setLocation(Location.newInstance("loc"))
+        ServiceJob s2 = new ServiceJob.Builder("2").setLocation(Location.newInstance("loc"))
             .setPriority(2).build();
-        Service s3 = new Service.Builder("3").setLocation(Location.newInstance("loc"))
+        ServiceJob s3 = new ServiceJob.Builder("3").setLocation(Location.newInstance("loc"))
             .setPriority(3).build();
-        Service s4 = new Service.Builder("4").setLocation(Location.newInstance("loc"))
+        ServiceJob s4 = new ServiceJob.Builder("4").setLocation(Location.newInstance("loc"))
             .setPriority(1).build();
         List<Job> jobs = new ArrayList<Job>();
         jobs.add(s2);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestLocalActivityInsertionCostsCalculator.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestLocalActivityInsertionCostsCalculator.java
index 2a7cc9fcd..6072cb41b 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestLocalActivityInsertionCostsCalculator.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestLocalActivityInsertionCostsCalculator.java
@@ -37,8 +37,8 @@
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.cost.WaitingTimeCosts;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.End;
@@ -96,68 +96,68 @@ private Location loc(String i) {
     @Test
     public void whenAddingServiceBetweenDiffStartAndEnd_costMustBeCorrect() {
         VehicleImpl v = VehicleImpl.Builder.newInstance("v")
-            .setStartLocation(Location.newInstance(0, 0))
-            .setEndLocation(Location.newInstance(20, 0))
-            .build();
-        Service s = Service.Builder.newInstance("s")
-            .setLocation(Location.newInstance(10, 0))
-            .build();
+                .setStartLocation(Location.newInstance(0, 0))
+                .setEndLocation(Location.newInstance(20, 0))
+                .build();
+        ServiceJob s = new ServiceJob.Builder("s")
+                .setLocation(Location.newInstance(10, 0))
+                .build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance()
-            .addVehicle(v)
-            .addJob(s)
-            .build();
+                .addVehicle(v)
+                .addJob(s)
+                .build();
         VehicleRoute route = VehicleRoute.emptyRoute();
         JobInsertionContext jobInsertionContext =
-            new JobInsertionContext(route, s, v, null, 0);
+                new JobInsertionContext(route, s, v, null, 0);
         LocalActivityInsertionCostsCalculator localActivityInsertionCostsCalculator =
-            new LocalActivityInsertionCostsCalculator(
-                vrp.getTransportCosts(),
-                vrp.getActivityCosts(),
-                new StateManager(vrp));
+                new LocalActivityInsertionCostsCalculator(
+                        vrp.getTransportCosts(),
+                        vrp.getActivityCosts(),
+                        new StateManager(vrp));
         double cost = localActivityInsertionCostsCalculator.getCosts(
-            jobInsertionContext,
-            new Start(v.getStartLocation(),0,Double.MAX_VALUE),
-            new End(v.getEndLocation(),0,Double.MAX_VALUE),
-            vrp.getActivities(s).get(0),
-            0);
+                jobInsertionContext,
+                new Start(v.getStartLocation(),0,Double.MAX_VALUE),
+                new End(v.getEndLocation(),0,Double.MAX_VALUE),
+                vrp.getActivities(s).get(0),
+                0);
         assertEquals(20., cost, Math.ulp(20.));
     }
 
     @Test
     public void whenAddingShipmentBetweenDiffStartAndEnd_costMustBeCorrect() {
         VehicleImpl v = VehicleImpl.Builder.newInstance("v")
-            .setStartLocation(Location.newInstance(0, 0))
-            .setEndLocation(Location.newInstance(20, 0))
-            .build();
-        Shipment s = Shipment.Builder.newInstance("p")
-            .setPickupLocation(Location.newInstance(10, 0))
-            .setDeliveryLocation(Location.newInstance(10, 7.5))
-            .build();
+                .setStartLocation(Location.newInstance(0, 0))
+                .setEndLocation(Location.newInstance(20, 0))
+                .build();
+        ShipmentJob s = new ShipmentJob.Builder("p")
+                .setPickupLocation(Location.newInstance(10, 0))
+                .setDeliveryLocation(Location.newInstance(10, 7.5))
+                .build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance()
-            .addVehicle(v)
-            .addJob(s)
-            .build();
+                .addVehicle(v)
+                .addJob(s)
+                .build();
         VehicleRoute route = VehicleRoute.emptyRoute();
         JobInsertionContext jobInsertionContext =
-            new JobInsertionContext(route, s, v, null, 0);
+                new JobInsertionContext(route, s, v, null, 0);
         LocalActivityInsertionCostsCalculator localActivityInsertionCostsCalculator =
-            new LocalActivityInsertionCostsCalculator(
-                vrp.getTransportCosts(),
-                vrp.getActivityCosts(),
-                new StateManager(vrp));
+                new LocalActivityInsertionCostsCalculator(
+                        vrp.getTransportCosts(),
+                        vrp.getActivityCosts(),
+                        new StateManager(vrp));
         double cost = localActivityInsertionCostsCalculator.getCosts(
-            jobInsertionContext,
-            new Start(v.getStartLocation(),0,Double.MAX_VALUE),
-            new End(v.getEndLocation(),0,Double.MAX_VALUE),
-            vrp.getActivities(s).get(0),
-            0);
+                jobInsertionContext,
+                new Start(v.getStartLocation(),0,Double.MAX_VALUE),
+                new End(v.getEndLocation(),0,Double.MAX_VALUE),
+                vrp.getActivities(s).get(0),
+                0);
         assertEquals(20., cost, Math.ulp(20.));
         cost = localActivityInsertionCostsCalculator.getCosts(
-            jobInsertionContext,
-            vrp.getActivities(s).get(0),
-            new End(v.getEndLocation(),0,Double.MAX_VALUE),
-            vrp.getActivities(s).get(1),
-            0);
+                jobInsertionContext,
+                vrp.getActivities(s).get(0),
+                new End(v.getEndLocation(),0,Double.MAX_VALUE),
+                vrp.getActivities(s).get(1),
+                0);
         assertEquals(10, cost, Math.ulp(10.));
     }
 
@@ -233,9 +233,9 @@ public void whenInsertingActBetweenLastActAndEndAndRouteIsOpen_itCalculatesTpCos
     public void test() {
         VehicleTypeImpl type = VehicleTypeImpl.Builder.newInstance("t").setCostPerWaitingTime(1.).build();
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance(0, 0)).build();
-        Service prevS = new Service.Builder("prev").setLocation(Location.newInstance(10, 0)).build();
-        Service newS = new Service.Builder("new").setServiceTime(10).setLocation(Location.newInstance(60, 0)).build();
-        Service nextS = new Service.Builder("next").setLocation(Location.newInstance(30, 0)).setTimeWindow(TimeWindow.newInstance(40, 80)).build();
+        ServiceJob prevS = new ServiceJob.Builder("prev").setLocation(Location.newInstance(10, 0)).build();
+        ServiceJob newS = new ServiceJob.Builder("new").setServiceTime(10).setLocation(Location.newInstance(60, 0)).build();
+        ServiceJob nextS = new ServiceJob.Builder("next").setLocation(Location.newInstance(30, 0)).setTimeWindow(TimeWindow.newInstance(40, 80)).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(prevS).addJob(newS).addJob(nextS).addVehicle(v).build();
 
@@ -255,11 +255,11 @@ public void test() {
         double c = calc.getCosts(context, prevAct, nextAct, newAct, 10);
         assertEquals(50., c, 0.01);
 
-		/*
+        /*
         new: dist = 90 & wait = 0
 		old: dist = 30 & wait = 10
 		c = new - old = 90 - 40 = 50
-		 */
+         */
     }
 
     @Test
@@ -268,9 +268,9 @@ public void whenAddingNewBetweenStartAndAct_itShouldCalcInsertionCostsCorrectly(
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance(0, 0)).build();
 
-        Service newS = new Service.Builder("new").setServiceTime(10).setLocation(Location.newInstance(10, 0)).build();
-        Service nextS = new Service.Builder("next").setLocation(Location.newInstance(30, 0))
-            .setTimeWindow(TimeWindow.newInstance(40, 50)).build();
+        ServiceJob newS = new ServiceJob.Builder("new").setServiceTime(10).setLocation(Location.newInstance(10, 0)).build();
+        ServiceJob nextS = new ServiceJob.Builder("next").setLocation(Location.newInstance(30, 0))
+                .setTimeWindow(TimeWindow.newInstance(40, 50)).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(newS).addJob(nextS).addVehicle(v).build();
 
@@ -295,9 +295,9 @@ public void whenAddingNewBetweenStartAndAct2_itShouldCalcInsertionCostsCorrectly
 
         VehicleImpl v2 = VehicleImpl.Builder.newInstance("v2").setType(type).setStartLocation(Location.newInstance(0, 0)).build();
 
-        Service newS = new Service.Builder("new").setServiceTime(10).setLocation(Location.newInstance(10, 0)).build();
-        Service nextS = new Service.Builder("next").setLocation(Location.newInstance(30, 0))
-            .setTimeWindow(TimeWindow.newInstance(140, 150)).build();
+        ServiceJob newS = new ServiceJob.Builder("new").setServiceTime(10).setLocation(Location.newInstance(10, 0)).build();
+        ServiceJob nextS = new ServiceJob.Builder("next").setLocation(Location.newInstance(30, 0))
+                .setTimeWindow(TimeWindow.newInstance(140, 150)).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(newS).addJob(nextS).addVehicle(v2).build();
 
@@ -321,7 +321,7 @@ public void whenAddingNewInEmptyRoute_itShouldCalcInsertionCostsCorrectly() {
         VehicleTypeImpl type = VehicleTypeImpl.Builder.newInstance("t").setCostPerWaitingTime(1.).build();
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance(0, 0)).build();
 
-        Service newS = new Service.Builder("new").setServiceTime(10).setLocation(Location.newInstance(10, 0)).setTimeWindow(TimeWindow.newInstance(100, 150)).build();
+        ServiceJob newS = new ServiceJob.Builder("new").setServiceTime(10).setLocation(Location.newInstance(10, 0)).setTimeWindow(TimeWindow.newInstance(100, 150)).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(newS).addVehicle(v).build();
 
@@ -346,9 +346,9 @@ public void whenAddingNewBetweenTwoActs_itShouldCalcInsertionCostsCorrectly() {
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance(0, 0)).build();
 
-        Service prevS = new Service.Builder("prev").setLocation(Location.newInstance(10, 0)).build();
-        Service newS = new Service.Builder("new").setServiceTime(10).setLocation(Location.newInstance(20, 0)).build();
-        Service nextS = new Service.Builder("next").setLocation(Location.newInstance(30, 0)).setTimeWindow(TimeWindow.newInstance(40, 50)).build();
+        ServiceJob prevS = new ServiceJob.Builder("prev").setLocation(Location.newInstance(10, 0)).build();
+        ServiceJob newS = new ServiceJob.Builder("new").setServiceTime(10).setLocation(Location.newInstance(20, 0)).build();
+        ServiceJob nextS = new ServiceJob.Builder("next").setLocation(Location.newInstance(30, 0)).setTimeWindow(TimeWindow.newInstance(40, 50)).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(prevS).addJob(newS).addJob(nextS).addVehicle(v).build();
 
@@ -373,9 +373,9 @@ public void whenAddingNewWithTWBetweenTwoActs_itShouldCalcInsertionCostsCorrectl
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance(0, 0)).build();
 
-        Service prevS = new Service.Builder("prev").setLocation(Location.newInstance(10, 0)).build();
-        Service newS = new Service.Builder("new").setServiceTime(10).setTimeWindow(TimeWindow.newInstance(100, 120)).setLocation(Location.newInstance(20, 0)).build();
-        Service nextS = new Service.Builder("next").setLocation(Location.newInstance(30, 0)).setTimeWindow(TimeWindow.newInstance(40, 500)).build();
+        ServiceJob prevS = new ServiceJob.Builder("prev").setLocation(Location.newInstance(10, 0)).build();
+        ServiceJob newS = new ServiceJob.Builder("new").setServiceTime(10).setTimeWindow(TimeWindow.newInstance(100, 120)).setLocation(Location.newInstance(20, 0)).build();
+        ServiceJob nextS = new ServiceJob.Builder("next").setLocation(Location.newInstance(30, 0)).setTimeWindow(TimeWindow.newInstance(40, 500)).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(prevS).addJob(newS).addJob(nextS).addVehicle(v).build();
 
@@ -402,13 +402,13 @@ public void whenAddingNewWithTWBetweenTwoActs2_itShouldCalcInsertionCostsCorrect
         VehicleTypeImpl type = VehicleTypeImpl.Builder.newInstance("t").setCostPerWaitingTime(1.).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance(0, 0)).build();
-//		VehicleImpl v2 = VehicleImpl.Builder.newInstance("v2").setHasVariableDepartureTime(true).setType(type).setStartLocation(Location.newInstance(0,0)).build();
+        //		VehicleImpl v2 = VehicleImpl.Builder.newInstance("v2").setHasVariableDepartureTime(true).setType(type).setStartLocation(Location.newInstance(0,0)).build();
 
-        Service prevS = new Service.Builder("prev").setLocation(Location.newInstance(10, 0)).build();
-        Service newS = new Service.Builder("new").setServiceTime(10).setTimeWindow(TimeWindow.newInstance(100, 120)).setLocation(Location.newInstance(20, 0)).build();
-        Service nextS = new Service.Builder("next").setLocation(Location.newInstance(30, 0)).setTimeWindow(TimeWindow.newInstance(40, 500)).build();
+        ServiceJob prevS = new ServiceJob.Builder("prev").setLocation(Location.newInstance(10, 0)).build();
+        ServiceJob newS = new ServiceJob.Builder("new").setServiceTime(10).setTimeWindow(TimeWindow.newInstance(100, 120)).setLocation(Location.newInstance(20, 0)).build();
+        ServiceJob nextS = new ServiceJob.Builder("next").setLocation(Location.newInstance(30, 0)).setTimeWindow(TimeWindow.newInstance(40, 500)).build();
 
-        Service afterNextS = new Service.Builder("afterNext").setLocation(Location.newInstance(40, 0)).setTimeWindow(TimeWindow.newInstance(400, 500)).build();
+        ServiceJob afterNextS = new ServiceJob.Builder("afterNext").setLocation(Location.newInstance(40, 0)).setTimeWindow(TimeWindow.newInstance(400, 500)).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(afterNextS).addJob(prevS).addJob(newS).addJob(nextS).addVehicle(v).build();
 
@@ -441,17 +441,17 @@ public void whenAddingNewWithTWBetweenTwoActs3_itShouldCalcInsertionCostsCorrect
         VehicleTypeImpl type = VehicleTypeImpl.Builder.newInstance("t").setCostPerWaitingTime(1.).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance(0, 0)).build();
-//		VehicleImpl v2 = VehicleImpl.Builder.newInstance("v2").setHasVariableDepartureTime(true).setType(type).setStartLocation(Location.newInstance(0,0)).build();
+        //		VehicleImpl v2 = VehicleImpl.Builder.newInstance("v2").setHasVariableDepartureTime(true).setType(type).setStartLocation(Location.newInstance(0,0)).build();
 
-        Service prevS = new Service.Builder("prev").setLocation(Location.newInstance(10, 0)).build();
-        Service newS = new Service.Builder("new").setServiceTime(10).setTimeWindow(TimeWindow.newInstance(100, 120)).setLocation(Location.newInstance(20, 0)).build();
-        Service nextS = new Service.Builder("next").setLocation(Location.newInstance(30, 0)).setTimeWindow(TimeWindow.newInstance(40, 500)).build();
+        ServiceJob prevS = new ServiceJob.Builder("prev").setLocation(Location.newInstance(10, 0)).build();
+        ServiceJob newS = new ServiceJob.Builder("new").setServiceTime(10).setTimeWindow(TimeWindow.newInstance(100, 120)).setLocation(Location.newInstance(20, 0)).build();
+        ServiceJob nextS = new ServiceJob.Builder("next").setLocation(Location.newInstance(30, 0)).setTimeWindow(TimeWindow.newInstance(40, 500)).build();
 
-        Service afterNextS = new Service.Builder("afterNext").setLocation(Location.newInstance(40, 0)).setTimeWindow(TimeWindow.newInstance(80, 500)).build();
-        Service afterAfterNextS = new Service.Builder("afterAfterNext").setLocation(Location.newInstance(40, 0)).setTimeWindow(TimeWindow.newInstance(100, 500)).build();
+        ServiceJob afterNextS = new ServiceJob.Builder("afterNext").setLocation(Location.newInstance(40, 0)).setTimeWindow(TimeWindow.newInstance(80, 500)).build();
+        ServiceJob afterAfterNextS = new ServiceJob.Builder("afterAfterNext").setLocation(Location.newInstance(40, 0)).setTimeWindow(TimeWindow.newInstance(100, 500)).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addVehicle(v).addJob(prevS).addJob(newS).addJob(nextS)
-            .addJob(afterNextS).addJob(afterAfterNextS).build();
+                .addJob(afterNextS).addJob(afterAfterNextS).build();
 
         TourActivity prevAct = vrp.getActivities(prevS).get(0);
         TourActivity newAct = vrp.getActivities(newS).get(0);
@@ -485,7 +485,7 @@ public void whenAddingNewWithTWBetweenTwoActs3_itShouldCalcInsertionCostsCorrect
         //new: 80 - 10 - 30 - 20 = 20
         /*
         w(new) + w(next) - w_old(next) - min{start_delay(next),future_waiting}
-		 */
+         */
     }
 
     @Test
@@ -493,17 +493,17 @@ public void whenAddingNewWithTWBetweenTwoActs4_itShouldCalcInsertionCostsCorrect
         VehicleTypeImpl type = VehicleTypeImpl.Builder.newInstance("t").setCostPerWaitingTime(1.).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance(0, 0)).build();
-//		VehicleImpl v2 = VehicleImpl.Builder.newInstance("v2").setHasVariableDepartureTime(true).setType(type).setStartLocation(Location.newInstance(0,0)).build();
+        //		VehicleImpl v2 = VehicleImpl.Builder.newInstance("v2").setHasVariableDepartureTime(true).setType(type).setStartLocation(Location.newInstance(0,0)).build();
 
-        Service prevS = new Service.Builder("prev").setLocation(Location.newInstance(10, 0)).build();
-        Service newS = new Service.Builder("new").setServiceTime(10).setTimeWindow(TimeWindow.newInstance(100, 120)).setLocation(Location.newInstance(20, 0)).build();
-        Service nextS = new Service.Builder("next").setLocation(Location.newInstance(30, 0)).setTimeWindow(TimeWindow.newInstance(40, 500)).build();
+        ServiceJob prevS = new ServiceJob.Builder("prev").setLocation(Location.newInstance(10, 0)).build();
+        ServiceJob newS = new ServiceJob.Builder("new").setServiceTime(10).setTimeWindow(TimeWindow.newInstance(100, 120)).setLocation(Location.newInstance(20, 0)).build();
+        ServiceJob nextS = new ServiceJob.Builder("next").setLocation(Location.newInstance(30, 0)).setTimeWindow(TimeWindow.newInstance(40, 500)).build();
 
-        Service afterNextS = new Service.Builder("afterNext").setLocation(Location.newInstance(40, 0)).setTimeWindow(TimeWindow.newInstance(80, 500)).build();
-        Service afterAfterNextS = new Service.Builder("afterAfterNext").setLocation(Location.newInstance(50, 0)).setTimeWindow(TimeWindow.newInstance(100, 500)).build();
+        ServiceJob afterNextS = new ServiceJob.Builder("afterNext").setLocation(Location.newInstance(40, 0)).setTimeWindow(TimeWindow.newInstance(80, 500)).build();
+        ServiceJob afterAfterNextS = new ServiceJob.Builder("afterAfterNext").setLocation(Location.newInstance(50, 0)).setTimeWindow(TimeWindow.newInstance(100, 500)).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addVehicle(v).addJob(prevS).addJob(newS).addJob(nextS)
-            .addJob(afterNextS).addJob(afterAfterNextS).build();
+                .addJob(afterNextS).addJob(afterAfterNextS).build();
 
         TourActivity prevAct = vrp.getActivities(prevS).get(0);
         TourActivity newAct = vrp.getActivities(newS).get(0);
@@ -534,13 +534,13 @@ public void whenAddingNewWithTWBetweenTwoActs4_itShouldCalcInsertionCostsCorrect
         //ref: 10 + 30 + 10 = 50
         //new: 50 - 50 = 0
 
-		/*
+        /*
         activity start time delay at next act = start-time-old - start-time-new is always bigger than subsequent waiting time savings
-		 */
+         */
         /*
         old = 10 + 30 + 10 = 50
 		new = 80 + 0 - 10 - min{80,40} = 30
-		 */
+         */
     }
 
     @Test
@@ -548,17 +548,17 @@ public void whenAddingNewWithTWBetweenTwoActs4WithVarStart_itShouldCalcInsertion
         VehicleTypeImpl type = VehicleTypeImpl.Builder.newInstance("t").setCostPerWaitingTime(1.).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance(0, 0)).build();
-//		VehicleImpl v2 = VehicleImpl.Builder.newInstance("v2").setHasVariableDepartureTime(true).setType(type).setStartLocation(Location.newInstance(0,0)).build();
+        //		VehicleImpl v2 = VehicleImpl.Builder.newInstance("v2").setHasVariableDepartureTime(true).setType(type).setStartLocation(Location.newInstance(0,0)).build();
 
-        Service prevS = new Service.Builder("prev").setLocation(Location.newInstance(10, 0)).build();
-        Service newS = new Service.Builder("new").setServiceTime(10).setTimeWindow(TimeWindow.newInstance(100, 120)).setLocation(Location.newInstance(20, 0)).build();
-        Service nextS = new Service.Builder("next").setLocation(Location.newInstance(30, 0)).setTimeWindow(TimeWindow.newInstance(40, 500)).build();
+        ServiceJob prevS = new ServiceJob.Builder("prev").setLocation(Location.newInstance(10, 0)).build();
+        ServiceJob newS = new ServiceJob.Builder("new").setServiceTime(10).setTimeWindow(TimeWindow.newInstance(100, 120)).setLocation(Location.newInstance(20, 0)).build();
+        ServiceJob nextS = new ServiceJob.Builder("next").setLocation(Location.newInstance(30, 0)).setTimeWindow(TimeWindow.newInstance(40, 500)).build();
 
-        Service afterNextS = new Service.Builder("afterNext").setLocation(Location.newInstance(40, 0)).setTimeWindow(TimeWindow.newInstance(80, 500)).build();
-        Service afterAfterNextS = new Service.Builder("afterAfterNext").setLocation(Location.newInstance(50, 0)).setTimeWindow(TimeWindow.newInstance(100, 500)).build();
+        ServiceJob afterNextS = new ServiceJob.Builder("afterNext").setLocation(Location.newInstance(40, 0)).setTimeWindow(TimeWindow.newInstance(80, 500)).build();
+        ServiceJob afterAfterNextS = new ServiceJob.Builder("afterAfterNext").setLocation(Location.newInstance(50, 0)).setTimeWindow(TimeWindow.newInstance(100, 500)).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addVehicle(v).addJob(prevS).addJob(newS).addJob(nextS)
-            .addJob(afterNextS).addJob(afterAfterNextS).build();
+                .addJob(afterNextS).addJob(afterAfterNextS).build();
 
         TourActivity prevAct = vrp.getActivities(prevS).get(0);
         TourActivity newAct = vrp.getActivities(newS).get(0);
@@ -587,15 +587,15 @@ public void whenAddingNewWithTWBetweenTwoActs4WithVarStart_itShouldCalcInsertion
         calc.setSolutionCompletenessRatio(1.);
         double c = calc.getCosts(context, prevAct, nextAct, newAct, 10);
         assertEquals(30., c, 0.01);
-		/*
+        /*
 		activity start time delay at next act = start-time-old - start-time-new is always bigger than subsequent waiting time savings
-		 */
-		/*
+         */
+        /*
 		old = 10 + 30 + 10 = 50
 		new = 80
 		new - old = 80 - 40 = 40
 
-		 */
+         */
     }
 
     @Test
@@ -603,17 +603,17 @@ public void whenAddingNewWithTWBetweenTwoActs3WithVarStart_itShouldCalcInsertion
         VehicleTypeImpl type = VehicleTypeImpl.Builder.newInstance("t").setCostPerWaitingTime(1.).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance(0, 0)).build();
-//		VehicleImpl v2 = VehicleImpl.Builder.newInstance("v2").setHasVariableDepartureTime(true).setType(type).setStartLocation(Location.newInstance(0,0)).build();
+        //		VehicleImpl v2 = VehicleImpl.Builder.newInstance("v2").setHasVariableDepartureTime(true).setType(type).setStartLocation(Location.newInstance(0,0)).build();
 
-        Service prevS = new Service.Builder("prev").setLocation(Location.newInstance(10, 0)).build();
-        Service newS = new Service.Builder("new").setServiceTime(10).setTimeWindow(TimeWindow.newInstance(50, 70)).setLocation(Location.newInstance(20, 0)).build();
-        Service nextS = new Service.Builder("next").setLocation(Location.newInstance(30, 0)).setTimeWindow(TimeWindow.newInstance(40, 70)).build();
+        ServiceJob prevS = new ServiceJob.Builder("prev").setLocation(Location.newInstance(10, 0)).build();
+        ServiceJob newS = new ServiceJob.Builder("new").setServiceTime(10).setTimeWindow(TimeWindow.newInstance(50, 70)).setLocation(Location.newInstance(20, 0)).build();
+        ServiceJob nextS = new ServiceJob.Builder("next").setLocation(Location.newInstance(30, 0)).setTimeWindow(TimeWindow.newInstance(40, 70)).build();
 
-        Service afterNextS = new Service.Builder("afterNext").setLocation(Location.newInstance(40, 0)).setTimeWindow(TimeWindow.newInstance(50, 100)).build();
-        Service afterAfterNextS = new Service.Builder("afterAfterNext").setLocation(Location.newInstance(50, 0)).setTimeWindow(TimeWindow.newInstance(100, 500)).build();
+        ServiceJob afterNextS = new ServiceJob.Builder("afterNext").setLocation(Location.newInstance(40, 0)).setTimeWindow(TimeWindow.newInstance(50, 100)).build();
+        ServiceJob afterAfterNextS = new ServiceJob.Builder("afterAfterNext").setLocation(Location.newInstance(50, 0)).setTimeWindow(TimeWindow.newInstance(100, 500)).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addVehicle(v).addJob(prevS).addJob(newS).addJob(nextS)
-            .addJob(afterNextS).addJob(afterAfterNextS).build();
+                .addJob(afterNextS).addJob(afterAfterNextS).build();
 
         TourActivity prevAct = vrp.getActivities(prevS).get(0);
 
@@ -644,13 +644,13 @@ public void whenAddingNewWithTWBetweenTwoActs3WithVarStart_itShouldCalcInsertion
         calc.setSolutionCompletenessRatio(1.);
         double c = calc.getCosts(context, prevAct, nextAct, newAct, 10);
         assertEquals(-10., c, 0.01);
-		/*
+        /*
 		activity start time delay at next act = start-time-old - start-time-new is always bigger than subsequent waiting time savings
-		 */
-		/*
+         */
+        /*
 		old = 10 + 40 = 50
 		new = 30 + 10 = 40
-		 */
+         */
     }
 
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestMixedServiceAndShipmentsProblemOnRouteLevel.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestMixedServiceAndShipmentsProblemOnRouteLevel.java
index 7cad5e030..728438f09 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestMixedServiceAndShipmentsProblemOnRouteLevel.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestMixedServiceAndShipmentsProblemOnRouteLevel.java
@@ -25,8 +25,8 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
-import com.graphhopper.jsprit.core.problem.job.Delivery;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.DeliveryJob;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.problem.vehicle.InfiniteFleetManagerFactory;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleFleetManager;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
@@ -63,11 +63,11 @@ public void whenHavingShipmentsAndServicesInOneProblem_andInsertionShouldBeMadeO
 		 * 4: (15,13)->(14,11)
 		 */
 
-        Shipment shipment1 = Shipment.Builder.newInstance("1").addSizeDimension(0, 1).setPickupLocation(TestUtils.loc(Coordinate.newInstance(5, 7))).setDeliveryLocation(TestUtils.loc(Coordinate.newInstance(6, 9))).build();
-        Shipment shipment2 = Shipment.Builder.newInstance("2").addSizeDimension(0, 1).setPickupLocation(TestUtils.loc(Coordinate.newInstance(5, 13))).setDeliveryLocation(TestUtils.loc(Coordinate.newInstance(6, 11))).build();
+        ShipmentJob shipment1 = new ShipmentJob.Builder("1").addSizeDimension(0, 1).setPickupLocation(TestUtils.loc(Coordinate.newInstance(5, 7))).setDeliveryLocation(TestUtils.loc(Coordinate.newInstance(6, 9))).build();
+        ShipmentJob shipment2 = new ShipmentJob.Builder("2").addSizeDimension(0, 1).setPickupLocation(TestUtils.loc(Coordinate.newInstance(5, 13))).setDeliveryLocation(TestUtils.loc(Coordinate.newInstance(6, 11))).build();
 
-        Shipment shipment3 = Shipment.Builder.newInstance("3").addSizeDimension(0, 1).setPickupLocation(TestUtils.loc(Coordinate.newInstance(15, 7))).setDeliveryLocation(TestUtils.loc(Coordinate.newInstance(14, 9))).build();
-        Shipment shipment4 = Shipment.Builder.newInstance("4").addSizeDimension(0, 1).setPickupLocation(TestUtils.loc(Coordinate.newInstance(15, 13))).setDeliveryLocation(TestUtils.loc(Coordinate.newInstance(14, 11))).build();
+        ShipmentJob shipment3 = new ShipmentJob.Builder("3").addSizeDimension(0, 1).setPickupLocation(TestUtils.loc(Coordinate.newInstance(15, 7))).setDeliveryLocation(TestUtils.loc(Coordinate.newInstance(14, 9))).build();
+        ShipmentJob shipment4 = new ShipmentJob.Builder("4").addSizeDimension(0, 1).setPickupLocation(TestUtils.loc(Coordinate.newInstance(15, 13))).setDeliveryLocation(TestUtils.loc(Coordinate.newInstance(14, 11))).build();
 
 		/*
          * build deliveries, (implicitly picked up in the depot)
@@ -76,10 +76,10 @@ public void whenHavingShipmentsAndServicesInOneProblem_andInsertionShouldBeMadeO
 		 * 3: (16,8)
 		 * 4: (16,12)
 		 */
-        Delivery delivery1 = (Delivery) new Delivery.Builder("5").addSizeDimension(0, 1).setLocation(TestUtils.loc(Coordinate.newInstance(4, 8))).build();
-        Delivery delivery2 = (Delivery) new Delivery.Builder("6").addSizeDimension(0, 1).setLocation(TestUtils.loc(Coordinate.newInstance(4, 12))).build();
-        Delivery delivery3 = (Delivery) new Delivery.Builder("7").addSizeDimension(0, 1).setLocation(TestUtils.loc(Coordinate.newInstance(16, 8))).build();
-        Delivery delivery4 = (Delivery) new Delivery.Builder("8").addSizeDimension(0, 1).setLocation(TestUtils.loc(Coordinate.newInstance(16, 12))).build();
+        DeliveryJob delivery1 = (DeliveryJob) new DeliveryJob.Builder("5").addSizeDimension(0, 1).setLocation(TestUtils.loc(Coordinate.newInstance(4, 8))).build();
+        DeliveryJob delivery2 = (DeliveryJob) new DeliveryJob.Builder("6").addSizeDimension(0, 1).setLocation(TestUtils.loc(Coordinate.newInstance(4, 12))).build();
+        DeliveryJob delivery3 = (DeliveryJob) new DeliveryJob.Builder("7").addSizeDimension(0, 1).setLocation(TestUtils.loc(Coordinate.newInstance(16, 8))).build();
+        DeliveryJob delivery4 = (DeliveryJob) new DeliveryJob.Builder("8").addSizeDimension(0, 1).setLocation(TestUtils.loc(Coordinate.newInstance(16, 12))).build();
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addVehicle(vehicle);
@@ -127,10 +127,10 @@ public void whenHavingOnlyServicesInOneProblem_andInsertionShouldBeMadeOnRouteLe
 		 * 3: (16,8)
 		 * 4: (16,12)
 		 */
-        Delivery delivery1 = (Delivery) new Delivery.Builder("5").addSizeDimension(0, 1).setLocation(Location.newInstance(4, 8)).build();
-        Delivery delivery2 = (Delivery) new Delivery.Builder("6").addSizeDimension(0, 1).setLocation(Location.newInstance(4, 12)).build();
-        Delivery delivery3 = (Delivery) new Delivery.Builder("7").addSizeDimension(0, 1).setLocation(Location.newInstance(16, 8)).build();
-        Delivery delivery4 = (Delivery) new Delivery.Builder("8").addSizeDimension(0, 1).setLocation(Location.newInstance(16, 12)).build();
+        DeliveryJob delivery1 = (DeliveryJob) new DeliveryJob.Builder("5").addSizeDimension(0, 1).setLocation(Location.newInstance(4, 8)).build();
+        DeliveryJob delivery2 = (DeliveryJob) new DeliveryJob.Builder("6").addSizeDimension(0, 1).setLocation(Location.newInstance(4, 12)).build();
+        DeliveryJob delivery3 = (DeliveryJob) new DeliveryJob.Builder("7").addSizeDimension(0, 1).setLocation(Location.newInstance(16, 8)).build();
+        DeliveryJob delivery4 = (DeliveryJob) new DeliveryJob.Builder("8").addSizeDimension(0, 1).setLocation(Location.newInstance(16, 12)).build();
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addVehicle(vehicle)
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/DBSCANClustererTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/DBSCANClustererTest.java
index d21dd0c46..15cf69be5 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/DBSCANClustererTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/DBSCANClustererTest.java
@@ -27,7 +27,7 @@
 import com.graphhopper.jsprit.core.distance.EuclideanDistanceCalculator;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.util.DefaultCosts;
@@ -40,9 +40,9 @@
 
     @Test
     public void itShouldReturnOneClusterOfSizeTwo() {
-        Service s1 = new Service.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
-        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(10, 10)).build();
-        Service s3 = new Service.Builder("s3").setLocation(Location.newInstance(9, 9)).build();
+        ServiceJob s1 = new ServiceJob.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
+        ServiceJob s2 = new ServiceJob.Builder("s2").setLocation(Location.newInstance(10, 10)).build();
+        ServiceJob s3 = new ServiceJob.Builder("s3").setLocation(Location.newInstance(9, 9)).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoute r = VehicleRoute.Builder.newInstance(v).addService(s1).addService(s2).addService(s3).build();
@@ -56,9 +56,9 @@ public void itShouldReturnOneClusterOfSizeTwo() {
 
     @Test
     public void itShouldReturnOneCluster() {
-        Service s1 = new Service.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
-        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(10, 10)).build();
-        Service s3 = new Service.Builder("s3").setLocation(Location.newInstance(9, 9)).build();
+        ServiceJob s1 = new ServiceJob.Builder("s1").setLocation(Location.newInstance(1, 1)).build();
+        ServiceJob s2 = new ServiceJob.Builder("s2").setLocation(Location.newInstance(10, 10)).build();
+        ServiceJob s3 = new ServiceJob.Builder("s3").setLocation(Location.newInstance(9, 9)).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoute r = VehicleRoute.Builder.newInstance(v).addService(s1).addService(s2).addService(s3).build();
@@ -72,12 +72,12 @@ public void itShouldReturnOneCluster() {
 
     @Test
     public void itShouldReturnTwoClusters() {
-        Service s0 = new Service.Builder("s0").setLocation(Location.newInstance(9, 0)).build();
-        Service s1 = new Service.Builder("s1").setLocation(Location.newInstance(9, 1)).build();
-        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(9, 10)).build();
-        Service s3 = new Service.Builder("s3").setLocation(Location.newInstance(9, 9)).build();
-        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance(9, 16)).build();
-        Service s5 = new Service.Builder("s5").setLocation(Location.newInstance(9, 17)).build();
+        ServiceJob s0 = new ServiceJob.Builder("s0").setLocation(Location.newInstance(9, 0)).build();
+        ServiceJob s1 = new ServiceJob.Builder("s1").setLocation(Location.newInstance(9, 1)).build();
+        ServiceJob s2 = new ServiceJob.Builder("s2").setLocation(Location.newInstance(9, 10)).build();
+        ServiceJob s3 = new ServiceJob.Builder("s3").setLocation(Location.newInstance(9, 9)).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").setLocation(Location.newInstance(9, 16)).build();
+        ServiceJob s5 = new ServiceJob.Builder("s5").setLocation(Location.newInstance(9, 17)).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoute r = VehicleRoute.Builder.newInstance(v).addService(s1).addService(s2).addService(s3)
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsImplTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsImplTest.java
index 5815322e8..841353033 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsImplTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsImplTest.java
@@ -32,7 +32,7 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 
 
 public class JobNeighborhoodsImplTest {
@@ -41,25 +41,25 @@
 
     JobDistance jobDistance;
 
-    Service target;
-    Service s2;
-    Service s3;
-    Service s4;
-    Service s5;
-    Service s6;
-    Service s7;
+    ServiceJob target;
+    ServiceJob s2;
+    ServiceJob s3;
+    ServiceJob s4;
+    ServiceJob s5;
+    ServiceJob s6;
+    ServiceJob s7;
 
     @Before
     public void doBefore() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
-        target = new Service.Builder("s1").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 5)).build();
-        s2 = new Service.Builder("s2").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 4)).build();
-        s3 = new Service.Builder("s3").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 3)).build();
-        s4 = new Service.Builder("s4").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 2)).build();
+        target = new ServiceJob.Builder("s1").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 5)).build();
+        s2 = new ServiceJob.Builder("s2").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 4)).build();
+        s3 = new ServiceJob.Builder("s3").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 3)).build();
+        s4 = new ServiceJob.Builder("s4").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 2)).build();
 
-        s5 = new Service.Builder("s5").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 6)).build();
-        s6 = new Service.Builder("s6").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 7)).build();
-        s7 = new Service.Builder("s7").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 8)).build();
+        s5 = new ServiceJob.Builder("s5").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 6)).build();
+        s6 = new ServiceJob.Builder("s6").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 7)).build();
+        s7 = new ServiceJob.Builder("s7").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 8)).build();
 
         vrp = builder.addJob(target).addJob(s2).addJob(s3).addJob(s4).addJob(s5).addJob(s6).addJob(s7).build();
 
@@ -71,9 +71,9 @@ public void whenRequestingNeighborhoodOfTargetJob_nNeighborsShouldBeTwo() {
         JobNeighborhoodsImpl jn = new JobNeighborhoodsImpl(vrp, jobDistance);
         jn.initialise();
         Iterator<Job> iter = jn.getNearestNeighborsIterator(2, target);
-        List<Service> services = new ArrayList<Service>();
+        List<ServiceJob> services = new ArrayList<ServiceJob>();
         while (iter.hasNext()) {
-            services.add((Service) iter.next());
+            services.add((ServiceJob) iter.next());
         }
         assertEquals(2, services.size());
     }
@@ -83,9 +83,9 @@ public void whenRequestingNeighborhoodOfTargetJob_s2ShouldBeNeighbor() {
         JobNeighborhoodsImpl jn = new JobNeighborhoodsImpl(vrp, jobDistance);
         jn.initialise();
         Iterator<Job> iter = jn.getNearestNeighborsIterator(2, target);
-        List<Service> services = new ArrayList<Service>();
+        List<ServiceJob> services = new ArrayList<ServiceJob>();
         while (iter.hasNext()) {
-            services.add((Service) iter.next());
+            services.add((ServiceJob) iter.next());
         }
         assertTrue(services.contains(s2));
     }
@@ -95,9 +95,9 @@ public void whenRequestingNeighborhoodOfTargetJob_s4ShouldBeNeighbor() {
         JobNeighborhoodsImpl jn = new JobNeighborhoodsImpl(vrp, jobDistance);
         jn.initialise();
         Iterator<Job> iter = jn.getNearestNeighborsIterator(2, target);
-        List<Service> services = new ArrayList<Service>();
+        List<ServiceJob> services = new ArrayList<ServiceJob>();
         while (iter.hasNext()) {
-            services.add((Service) iter.next());
+            services.add((ServiceJob) iter.next());
         }
         assertTrue(services.contains(s5));
     }
@@ -107,9 +107,9 @@ public void whenRequestingNeighborhoodOfTargetJob_sizeShouldBe4() {
         JobNeighborhoodsImpl jn = new JobNeighborhoodsImpl(vrp, jobDistance);
         jn.initialise();
         Iterator<Job> iter = jn.getNearestNeighborsIterator(4, target);
-        List<Service> services = new ArrayList<Service>();
+        List<ServiceJob> services = new ArrayList<ServiceJob>();
         while (iter.hasNext()) {
-            services.add((Service) iter.next());
+            services.add((ServiceJob) iter.next());
         }
         assertEquals(4, services.size());
     }
@@ -119,9 +119,9 @@ public void whenRequestingMoreNeighborsThanExisting_itShouldReturnMaxNeighbors()
         JobNeighborhoodsImpl jn = new JobNeighborhoodsImpl(vrp, jobDistance);
         jn.initialise();
         Iterator<Job> iter = jn.getNearestNeighborsIterator(100, target);
-        List<Service> services = new ArrayList<Service>();
+        List<ServiceJob> services = new ArrayList<ServiceJob>();
         while (iter.hasNext()) {
-            services.add((Service) iter.next());
+            services.add((ServiceJob) iter.next());
         }
         assertEquals(6, services.size());
     }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsOptimizedTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsOptimizedTest.java
index c22fa8364..2587d4fdd 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsOptimizedTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsOptimizedTest.java
@@ -32,7 +32,7 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 
 
 public class JobNeighborhoodsOptimizedTest {
@@ -41,25 +41,25 @@
 
     JobDistance jobDistance;
 
-    Service target;
-    Service s2;
-    Service s3;
-    Service s4;
-    Service s5;
-    Service s6;
-    Service s7;
+    ServiceJob target;
+    ServiceJob s2;
+    ServiceJob s3;
+    ServiceJob s4;
+    ServiceJob s5;
+    ServiceJob s6;
+    ServiceJob s7;
 
     @Before
     public void doBefore() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
-        target = new Service.Builder("s1").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 5)).build();
-        s2 = new Service.Builder("s2").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 4)).build();
-        s3 = new Service.Builder("s3").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 3)).build();
-        s4 = new Service.Builder("s4").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 2)).build();
+        target = new ServiceJob.Builder("s1").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 5)).build();
+        s2 = new ServiceJob.Builder("s2").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 4)).build();
+        s3 = new ServiceJob.Builder("s3").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 3)).build();
+        s4 = new ServiceJob.Builder("s4").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 2)).build();
 
-        s5 = new Service.Builder("s5").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 6)).build();
-        s6 = new Service.Builder("s6").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 7)).build();
-        s7 = new Service.Builder("s7").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 8)).build();
+        s5 = new ServiceJob.Builder("s5").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 6)).build();
+        s6 = new ServiceJob.Builder("s6").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 7)).build();
+        s7 = new ServiceJob.Builder("s7").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 8)).build();
 
         vrp = builder.addJob(target).addJob(s2).addJob(s3).addJob(s4).addJob(s5).addJob(s6).addJob(s7).build();
 
@@ -71,9 +71,9 @@ public void whenRequestingNeighborhoodOfTargetJob_nNeighborsShouldBeTwo() {
         JobNeighborhoodsOptimized jn = new JobNeighborhoodsOptimized(vrp, jobDistance, 2);
         jn.initialise();
         Iterator<Job> iter = jn.getNearestNeighborsIterator(2, target);
-        List<Service> services = new ArrayList<Service>();
+        List<ServiceJob> services = new ArrayList<ServiceJob>();
         while (iter.hasNext()) {
-            services.add((Service) iter.next());
+            services.add((ServiceJob) iter.next());
         }
         assertEquals(2, services.size());
     }
@@ -83,9 +83,9 @@ public void whenRequestingNeighborhoodOfTargetJob_s2ShouldBeNeighbor() {
         JobNeighborhoodsOptimized jn = new JobNeighborhoodsOptimized(vrp, jobDistance, 2);
         jn.initialise();
         Iterator<Job> iter = jn.getNearestNeighborsIterator(2, target);
-        List<Service> services = new ArrayList<Service>();
+        List<ServiceJob> services = new ArrayList<ServiceJob>();
         while (iter.hasNext()) {
-            services.add((Service) iter.next());
+            services.add((ServiceJob) iter.next());
         }
         assertTrue(services.contains(s2));
     }
@@ -95,9 +95,9 @@ public void whenRequestingNeighborhoodOfTargetJob_s4ShouldBeNeighbor() {
         JobNeighborhoodsOptimized jn = new JobNeighborhoodsOptimized(vrp, jobDistance, 2);
         jn.initialise();
         Iterator<Job> iter = jn.getNearestNeighborsIterator(2, target);
-        List<Service> services = new ArrayList<Service>();
+        List<ServiceJob> services = new ArrayList<ServiceJob>();
         while (iter.hasNext()) {
-            services.add((Service) iter.next());
+            services.add((ServiceJob) iter.next());
         }
         assertTrue(services.contains(s5));
     }
@@ -107,9 +107,9 @@ public void whenRequestingNeighborhoodOfTargetJob_sizeShouldBe4() {
         JobNeighborhoodsOptimized jn = new JobNeighborhoodsOptimized(vrp, jobDistance, 4);
         jn.initialise();
         Iterator<Job> iter = jn.getNearestNeighborsIterator(4, target);
-        List<Service> services = new ArrayList<Service>();
+        List<ServiceJob> services = new ArrayList<ServiceJob>();
         while (iter.hasNext()) {
-            services.add((Service) iter.next());
+            services.add((ServiceJob) iter.next());
         }
         assertEquals(4, services.size());
     }
@@ -119,9 +119,9 @@ public void whenRequestingNeighborhoodOfTargetJob_neighborsShouldBeCorrect() {
         JobNeighborhoodsOptimized jn = new JobNeighborhoodsOptimized(vrp, jobDistance, 4);
         jn.initialise();
         Iterator<Job> iter = jn.getNearestNeighborsIterator(4, s7);
-        List<Service> services = new ArrayList<Service>();
+        List<ServiceJob> services = new ArrayList<ServiceJob>();
         while (iter.hasNext()) {
-            services.add((Service) iter.next());
+            services.add((ServiceJob) iter.next());
         }
         assertEquals(s6, services.get(0));
         assertEquals(s5, services.get(1));
@@ -134,9 +134,9 @@ public void whenRequestingMoreNeighborsThanExisting_itShouldReturnMaxNeighbors()
         JobNeighborhoodsOptimized jn = new JobNeighborhoodsOptimized(vrp, jobDistance, 2);
         jn.initialise();
         Iterator<Job> iter = jn.getNearestNeighborsIterator(100, target);
-        List<Service> services = new ArrayList<Service>();
+        List<ServiceJob> services = new ArrayList<ServiceJob>();
         while (iter.hasNext()) {
-            services.add((Service) iter.next());
+            services.add((ServiceJob) iter.next());
         }
         assertEquals(2, services.size());
     }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsWithCapRestrictionImplTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsWithCapRestrictionImplTest.java
index b4ca09632..e3f751c2d 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsWithCapRestrictionImplTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/JobNeighborhoodsWithCapRestrictionImplTest.java
@@ -32,7 +32,7 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 
 
 public class JobNeighborhoodsWithCapRestrictionImplTest {
@@ -41,25 +41,25 @@
 
     JobDistance jobDistance;
 
-    Service target;
-    Service s2;
-    Service s3;
-    Service s4;
-    Service s5;
-    Service s6;
-    Service s7;
+    ServiceJob target;
+    ServiceJob s2;
+    ServiceJob s3;
+    ServiceJob s4;
+    ServiceJob s5;
+    ServiceJob s6;
+    ServiceJob s7;
 
     @Before
     public void doBefore() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
-        target = new Service.Builder("s1").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 5)).build();
-        s2 = new Service.Builder("s2").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 4)).build();
-        s3 = new Service.Builder("s3").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 3)).build();
-        s4 = new Service.Builder("s4").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 2)).build();
+        target = new ServiceJob.Builder("s1").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 5)).build();
+        s2 = new ServiceJob.Builder("s2").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 4)).build();
+        s3 = new ServiceJob.Builder("s3").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 3)).build();
+        s4 = new ServiceJob.Builder("s4").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 2)).build();
 
-        s5 = new Service.Builder("s5").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 6)).build();
-        s6 = new Service.Builder("s6").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 7)).build();
-        s7 = new Service.Builder("s7").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 8)).build();
+        s5 = new ServiceJob.Builder("s5").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 6)).build();
+        s6 = new ServiceJob.Builder("s6").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 7)).build();
+        s7 = new ServiceJob.Builder("s7").addSizeDimension(0, 1).setLocation(Location.newInstance(0, 8)).build();
 
         vrp = builder.addJob(target).addJob(s2).addJob(s3).addJob(s4).addJob(s5).addJob(s6).addJob(s7).build();
 
@@ -71,9 +71,9 @@ public void whenRequestingNeighborhoodOfTargetJob_nNeighborsShouldBeTwo() {
         JobNeighborhoodsImplWithCapRestriction jn = new JobNeighborhoodsImplWithCapRestriction(vrp, jobDistance, 2);
         jn.initialise();
         Iterator<Job> iter = jn.getNearestNeighborsIterator(2, target);
-        List<Service> services = new ArrayList<Service>();
+        List<ServiceJob> services = new ArrayList<ServiceJob>();
         while (iter.hasNext()) {
-            services.add((Service) iter.next());
+            services.add((ServiceJob) iter.next());
         }
         assertEquals(2, services.size());
     }
@@ -83,9 +83,9 @@ public void whenRequestingNeighborhoodOfTargetJob_s2ShouldBeNeighbor() {
         JobNeighborhoodsImplWithCapRestriction jn = new JobNeighborhoodsImplWithCapRestriction(vrp, jobDistance, 2);
         jn.initialise();
         Iterator<Job> iter = jn.getNearestNeighborsIterator(2, target);
-        List<Service> services = new ArrayList<Service>();
+        List<ServiceJob> services = new ArrayList<ServiceJob>();
         while (iter.hasNext()) {
-            services.add((Service) iter.next());
+            services.add((ServiceJob) iter.next());
         }
         assertTrue(services.contains(s2));
     }
@@ -95,9 +95,9 @@ public void whenRequestingNeighborhoodOfTargetJob_s4ShouldBeNeighbor() {
         JobNeighborhoodsImplWithCapRestriction jn = new JobNeighborhoodsImplWithCapRestriction(vrp, jobDistance, 2);
         jn.initialise();
         Iterator<Job> iter = jn.getNearestNeighborsIterator(2, target);
-        List<Service> services = new ArrayList<Service>();
+        List<ServiceJob> services = new ArrayList<ServiceJob>();
         while (iter.hasNext()) {
-            services.add((Service) iter.next());
+            services.add((ServiceJob) iter.next());
         }
         assertTrue(services.contains(s5));
     }
@@ -107,9 +107,9 @@ public void whenRequestingNeighborhoodOfTargetJob_sizeShouldBe4() {
         JobNeighborhoodsImplWithCapRestriction jn = new JobNeighborhoodsImplWithCapRestriction(vrp, jobDistance, 4);
         jn.initialise();
         Iterator<Job> iter = jn.getNearestNeighborsIterator(4, target);
-        List<Service> services = new ArrayList<Service>();
+        List<ServiceJob> services = new ArrayList<ServiceJob>();
         while (iter.hasNext()) {
-            services.add((Service) iter.next());
+            services.add((ServiceJob) iter.next());
         }
         assertEquals(4, services.size());
     }
@@ -119,9 +119,9 @@ public void whenRequestingMoreNeighborsThanExisting_itShouldReturnMaxNeighbors()
         JobNeighborhoodsImplWithCapRestriction jn = new JobNeighborhoodsImplWithCapRestriction(vrp, jobDistance, 2);
         jn.initialise();
         Iterator<Job> iter = jn.getNearestNeighborsIterator(100, target);
-        List<Service> services = new ArrayList<Service>();
+        List<ServiceJob> services = new ArrayList<ServiceJob>();
         while (iter.hasNext()) {
-            services.add((Service) iter.next());
+            services.add((ServiceJob) iter.next());
         }
         assertEquals(2, services.size());
     }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinClustersTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinClustersTest.java
index 93bfd9c05..fbd9502e0 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinClustersTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinClustersTest.java
@@ -30,7 +30,7 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.util.RandomNumberGeneration;
@@ -42,14 +42,14 @@
 
     @Test
     public void itShouldRuinTwoObviousClusters() {
-        Service s0 = new Service.Builder("s0").setLocation(Location.newInstance(9, 0)).build();
-        Service s1 = new Service.Builder("s1").setLocation(Location.newInstance(9, 1)).build();
-        Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(9, 10)).build();
-        Service s3 = new Service.Builder("s3").setLocation(Location.newInstance(9, 9)).build();
-        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance(9, 16)).build();
-        Service s5 = new Service.Builder("s5").setLocation(Location.newInstance(9, 17)).build();
-        Service s6 = new Service.Builder("s6").setLocation(Location.newInstance(9, 15.5)).build();
-        Service s7 = new Service.Builder("s7").setLocation(Location.newInstance(9, 30)).build();
+        ServiceJob s0 = new ServiceJob.Builder("s0").setLocation(Location.newInstance(9, 0)).build();
+        ServiceJob s1 = new ServiceJob.Builder("s1").setLocation(Location.newInstance(9, 1)).build();
+        ServiceJob s2 = new ServiceJob.Builder("s2").setLocation(Location.newInstance(9, 10)).build();
+        ServiceJob s3 = new ServiceJob.Builder("s3").setLocation(Location.newInstance(9, 9)).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").setLocation(Location.newInstance(9, 16)).build();
+        ServiceJob s5 = new ServiceJob.Builder("s5").setLocation(Location.newInstance(9, 17)).build();
+        ServiceJob s6 = new ServiceJob.Builder("s6").setLocation(Location.newInstance(9, 15.5)).build();
+        ServiceJob s7 = new ServiceJob.Builder("s7").setLocation(Location.newInstance(9, 30)).build();
 
         VehicleImpl v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinWorstTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinWorstTest.java
index 7cc45e874..03b7c037c 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinWorstTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinWorstTest.java
@@ -29,8 +29,8 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.util.Coordinate;
@@ -42,11 +42,11 @@
 
     @Test
     public void itShouldRemoveCorrectNumber() {
-        Service s1 = new Service.Builder("s1")
+        ServiceJob s1 = new ServiceJob.Builder("s1")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(1, 1)).build()).build();
-        Service s2 = new Service.Builder("s2")
+        ServiceJob s2 = new ServiceJob.Builder("s2")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(3, 1)).build()).build();
-        Service s3 = new Service.Builder("s3")
+        ServiceJob s3 = new ServiceJob.Builder("s3")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(10, 10)).build()).build();
         VehicleImpl v = VehicleImpl.Builder.newInstance("v")
             .setStartLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(0, 0)).build()).build();
@@ -61,11 +61,11 @@ public void itShouldRemoveCorrectNumber() {
 
     @Test
     public void itShouldRemoveWorst() {
-        Service s1 = new Service.Builder("s1")
+        ServiceJob s1 = new ServiceJob.Builder("s1")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(1, 1)).build()).build();
-        Service s2 = new Service.Builder("s2")
+        ServiceJob s2 = new ServiceJob.Builder("s2")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(3, 1)).build()).build();
-        Service s3 = new Service.Builder("s3")
+        ServiceJob s3 = new ServiceJob.Builder("s3")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(10, 10)).build()).build();
         VehicleImpl v = VehicleImpl.Builder.newInstance("v")
             .setStartLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(0, 0)).build()).build();
@@ -80,11 +80,11 @@ public void itShouldRemoveWorst() {
 
     @Test
     public void itShouldRemoveWorstTwo() {
-        Service s1 = new Service.Builder("s1")
+        ServiceJob s1 = new ServiceJob.Builder("s1")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(1, 1)).build()).build();
-        Service s2 = new Service.Builder("s2")
+        ServiceJob s2 = new ServiceJob.Builder("s2")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(3, 1)).build()).build();
-        Service s3 = new Service.Builder("s3")
+        ServiceJob s3 = new ServiceJob.Builder("s3")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(10, 10)).build()).build();
         VehicleImpl v = VehicleImpl.Builder.newInstance("v")
             .setStartLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(0, 0)).build()).build();
@@ -108,13 +108,13 @@ public int createNumberToBeRemoved() {
 
     @Test
     public void itShouldRemoveShipment() {
-        Service s1 = new Service.Builder("s1")
+        ServiceJob s1 = new ServiceJob.Builder("s1")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(1, 1)).build()).build();
-        Service s2 = new Service.Builder("s2")
+        ServiceJob s2 = new ServiceJob.Builder("s2")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(3, 1)).build()).build();
-        Service s3 = new Service.Builder("s3")
+        ServiceJob s3 = new ServiceJob.Builder("s3")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(10, 10)).build()).build();
-        Shipment shipment = Shipment.Builder.newInstance("ship1")
+        ShipmentJob shipment = new ShipmentJob.Builder("ship1")
             .setPickupLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(2, 2)).build())
             .setDeliveryLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(9, 9)).build()).build();
         VehicleImpl v = VehicleImpl.Builder.newInstance("v")
@@ -141,13 +141,13 @@ public int createNumberToBeRemoved() {
 
     @Test
     public void itShouldRemoveShipmentFromSecondRoute() {
-        Service s1 = new Service.Builder("s1")
+        ServiceJob s1 = new ServiceJob.Builder("s1")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(1, 1)).build()).build();
-        Service s2 = new Service.Builder("s2")
+        ServiceJob s2 = new ServiceJob.Builder("s2")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(3, 1)).build()).build();
-        Service s3 = new Service.Builder("s3")
+        ServiceJob s3 = new ServiceJob.Builder("s3")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(10, 10)).build()).build();
-        Shipment shipment = Shipment.Builder.newInstance("ship1")
+        ShipmentJob shipment = new ShipmentJob.Builder("ship1")
             .setPickupLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(3, 1)).build())
             .setDeliveryLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(10, 10.1)).build()).build();
         VehicleImpl v = VehicleImpl.Builder.newInstance("v")
@@ -178,13 +178,13 @@ public int createNumberToBeRemoved() {
 
     @Test
     public void itShouldRemoveServiceAndShipmentFromSecondRoute() {
-        Service s1 = new Service.Builder("s1")
+        ServiceJob s1 = new ServiceJob.Builder("s1")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(1, 1)).build()).build();
-        Service s2 = new Service.Builder("s2")
+        ServiceJob s2 = new ServiceJob.Builder("s2")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(3, 1)).build()).build();
-        Service s3 = new Service.Builder("s3")
+        ServiceJob s3 = new ServiceJob.Builder("s3")
             .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(10, 10)).build()).build();
-        Shipment shipment = Shipment.Builder.newInstance("ship1")
+        ShipmentJob shipment = new ShipmentJob.Builder("ship1")
             .setPickupLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(3, 1)).build())
             .setDeliveryLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(10, 10.1)).build()).build();
         VehicleImpl v = VehicleImpl.Builder.newInstance("v")
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/AverageJobDistanceTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/AverageJobDistanceTest.java
index 0c7a4f599..d4ca96390 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/AverageJobDistanceTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/AverageJobDistanceTest.java
@@ -25,8 +25,8 @@
 
 import com.graphhopper.jsprit.core.distance.EuclideanDistanceCalculator;
 import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.job.Service;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.util.Coordinate;
 import com.graphhopper.jsprit.core.util.DefaultCosts;
 import com.graphhopper.jsprit.core.util.Locations;
@@ -57,15 +57,15 @@ public Coordinate getCoord(String id) {
 
     @Test
     public void distanceOfTwoEqualShipmentsShouldBeSmallerThanAnyOtherDistance() {
-        Shipment s1 = Shipment.Builder.newInstance("s1").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,0").build()).setDeliveryLocation(Location.newInstance("10,10")).build();
-        Shipment s2 = Shipment.Builder.newInstance("s2").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,0").build()).setDeliveryLocation(Location.newInstance("10,10")).build();
+        ShipmentJob s1 = new ShipmentJob.Builder("s1").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,0").build()).setDeliveryLocation(Location.newInstance("10,10")).build();
+        ShipmentJob s2 = new ShipmentJob.Builder("s2").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,0").build()).setDeliveryLocation(Location.newInstance("10,10")).build();
 
         double dist = new DefaultJobDistance(routingCosts).getDistance(s1, s2);
 
         for (int i = 0; i < 10; i++) {
             for (int j = 0; j < 10; j++) {
-                Shipment other1 = Shipment.Builder.newInstance("s1").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,0").build()).setDeliveryLocation(Location.newInstance(i + "," + j)).build();
-                Shipment other2 = Shipment.Builder.newInstance("s2").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,0").build()).setDeliveryLocation(Location.newInstance("10,10")).build();
+                ShipmentJob other1 = new ShipmentJob.Builder("s1").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,0").build()).setDeliveryLocation(Location.newInstance(i + "," + j)).build();
+                ShipmentJob other2 = new ShipmentJob.Builder("s2").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,0").build()).setDeliveryLocation(Location.newInstance("10,10")).build();
                 double dist2 = new DefaultJobDistance(routingCosts).getDistance(other1, other2);
                 assertTrue(dist <= dist2 + dist2 * 0.001);
             }
@@ -75,8 +75,8 @@ public void distanceOfTwoEqualShipmentsShouldBeSmallerThanAnyOtherDistance() {
 
     @Test
     public void whenServicesHaveSameLocation_distanceShouldBeZero() {
-        Service s1 = new Service.Builder("s1").addSizeDimension(0, 1).setLocation(Location.newInstance("10,0")).build();
-        Service s2 = new Service.Builder("s2").addSizeDimension(0, 1).setLocation(Location.newInstance("10,0")).build();
+        ServiceJob s1 = new ServiceJob.Builder("s1").addSizeDimension(0, 1).setLocation(Location.newInstance("10,0")).build();
+        ServiceJob s2 = new ServiceJob.Builder("s2").addSizeDimension(0, 1).setLocation(Location.newInstance("10,0")).build();
 
         double dist = new DefaultJobDistance(routingCosts).getDistance(s1, s2);
         assertEquals(0.0, dist, 0.01);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/TestJobDistanceAvgCosts.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/TestJobDistanceAvgCosts.java
index fbdc96cf4..865113cbc 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/TestJobDistanceAvgCosts.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ruin/distance/TestJobDistanceAvgCosts.java
@@ -22,7 +22,7 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.driver.Driver;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 
 
@@ -60,8 +60,8 @@ public double getTransportTime(Location from, Location to,
             }
         };
         DefaultJobDistance c = new DefaultJobDistance(costs);
-        Service s1 = new Service.Builder("1").addSizeDimension(0, 1).setLocation(Location.newInstance("loc")).build();
-        Service s2 = new Service.Builder("2").addSizeDimension(0, 2).setLocation(Location.newInstance("loc")).build();
+        ServiceJob s1 = new ServiceJob.Builder("1").addSizeDimension(0, 1).setLocation(Location.newInstance("loc")).build();
+        ServiceJob s2 = new ServiceJob.Builder("2").addSizeDimension(0, 2).setLocation(Location.newInstance("loc")).build();
         c.getDistance(s1, s2);
     }
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/HardPickupAndDeliveryShipmentActivityConstraintTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/HardPickupAndDeliveryShipmentActivityConstraintTest.java
index b7489e6c3..c807e05b0 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/HardPickupAndDeliveryShipmentActivityConstraintTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/HardPickupAndDeliveryShipmentActivityConstraintTest.java
@@ -27,8 +27,8 @@
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.constraint.HardActivityConstraint.ConstraintsStatus;
 import com.graphhopper.jsprit.core.problem.constraint.PickupAndDeliverShipmentLoadActivityLevelConstraint;
-import com.graphhopper.jsprit.core.problem.job.Service;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivity;
@@ -44,11 +44,11 @@
 
     StateManager stateManager;
 
-    Shipment shipment;
+    ShipmentJob shipment;
 
-    Service s1;
+    ServiceJob s1;
 
-    Service s2;
+    ServiceJob s2;
 
     PickupAndDeliverShipmentLoadActivityLevelConstraint constraint;
 
@@ -58,9 +58,9 @@
 
     @Before
     public void doBefore() {
-        s1 = new Service.Builder("s1").setLocation(Location.newInstance("loc")).build();
-        s2 = new Service.Builder("s2").setLocation(Location.newInstance("loc")).build();
-        shipment = Shipment.Builder.newInstance("shipment").setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).setDeliveryLocation(Location.newInstance("delLoc")).addSizeDimension(0, 1).build();
+        s1 = new ServiceJob.Builder("s1").setLocation(Location.newInstance("loc")).build();
+        s2 = new ServiceJob.Builder("s2").setLocation(Location.newInstance("loc")).build();
+        shipment = new ShipmentJob.Builder("shipment").setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).setDeliveryLocation(Location.newInstance("delLoc")).addSizeDimension(0, 1).build();
 
 
         //		when(vehicle.getCapacity()).thenReturn(2);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/LoadStateTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/LoadStateTest.java
index 14053ebd8..95827a900 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/LoadStateTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/LoadStateTest.java
@@ -32,11 +32,11 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.job.Delivery;
+import com.graphhopper.jsprit.core.problem.job.DeliveryJob;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Pickup;
-import com.graphhopper.jsprit.core.problem.job.Service;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.PickupJob;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
@@ -62,20 +62,20 @@ public void doBefore() {
         when(vehicle.getType()).thenReturn(type);
 
         VehicleRoutingProblem.Builder serviceProblemBuilder = VehicleRoutingProblem.Builder.newInstance();
-        Service s1 = new Service.Builder("s").addSizeDimension(0, 10).setLocation(Location.newInstance("loc")).build();
-        Service s2 = new Service.Builder("s2").addSizeDimension(0, 5).setLocation(Location.newInstance("loc")).build();
+        ServiceJob s1 = new ServiceJob.Builder("s").addSizeDimension(0, 10).setLocation(Location.newInstance("loc")).build();
+        ServiceJob s2 = new ServiceJob.Builder("s2").addSizeDimension(0, 5).setLocation(Location.newInstance("loc")).build();
         serviceProblemBuilder.addJob(s1).addJob(s2);
         final VehicleRoutingProblem serviceProblem = serviceProblemBuilder.build();
 
         final VehicleRoutingProblem.Builder pdProblemBuilder = VehicleRoutingProblem.Builder.newInstance();
-        Pickup pickup = new Pickup.Builder("pick").addSizeDimension(0, 10).setLocation(Location.newInstance("loc")).build();
-        Delivery delivery = new Delivery.Builder("del").addSizeDimension(0, 5).setLocation(Location.newInstance("loc")).build();
+        PickupJob pickup = new PickupJob.Builder("pick").addSizeDimension(0, 10).setLocation(Location.newInstance("loc")).build();
+        DeliveryJob delivery = new DeliveryJob.Builder("del").addSizeDimension(0, 5).setLocation(Location.newInstance("loc")).build();
         pdProblemBuilder.addJob(pickup).addJob(delivery);
         final VehicleRoutingProblem pdProblem = pdProblemBuilder.build();
 
         final VehicleRoutingProblem.Builder shipmentProblemBuilder = VehicleRoutingProblem.Builder.newInstance();
-        Shipment shipment1 = Shipment.Builder.newInstance("s1").addSizeDimension(0, 10).setPickupLocation(Location.Builder.newInstance().setId("pick").build()).setDeliveryLocation(Location.newInstance("del")).build();
-        Shipment shipment2 = Shipment.Builder.newInstance("s2").addSizeDimension(0, 5).setPickupLocation(Location.Builder.newInstance().setId("pick").build()).setDeliveryLocation(Location.newInstance("del")).build();
+        ShipmentJob shipment1 = new ShipmentJob.Builder("s1").addSizeDimension(0, 10).setPickupLocation(Location.Builder.newInstance().setId("pick").build()).setDeliveryLocation(Location.newInstance("del")).build();
+        ShipmentJob shipment2 = new ShipmentJob.Builder("s2").addSizeDimension(0, 5).setPickupLocation(Location.Builder.newInstance().setId("pick").build()).setDeliveryLocation(Location.newInstance("del")).build();
         shipmentProblemBuilder.addJob(shipment1).addJob(shipment2).build();
         final VehicleRoutingProblem shipmentProblem = shipmentProblemBuilder.build();
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/StateManagerTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/StateManagerTest.java
index 336da8d6a..5a3be18e7 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/StateManagerTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/StateManagerTest.java
@@ -34,7 +34,7 @@
 import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.ServiceActivity;
@@ -60,7 +60,7 @@
 
     private VehicleRoute getRoute(Vehicle vehicle) {
         return VehicleRoute.Builder.newInstance(vehicle).setJobActivityFactory(new ActFac())
-            .addService(new Service.Builder("s")
+            .addService(new ServiceJob.Builder("s")
                 .setLocation(Location.newInstance("loc")).build())
             .build();
     }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdatePracticalTimeWindowTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdatePracticalTimeWindowTest.java
index 896276523..9de215a7d 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdatePracticalTimeWindowTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdatePracticalTimeWindowTest.java
@@ -31,8 +31,8 @@
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.cost.WaitingTimeCosts;
 import com.graphhopper.jsprit.core.problem.driver.Driver;
-import com.graphhopper.jsprit.core.problem.job.Delivery;
-import com.graphhopper.jsprit.core.problem.job.Pickup;
+import com.graphhopper.jsprit.core.problem.job.DeliveryJob;
+import com.graphhopper.jsprit.core.problem.job.PickupJob;
 import com.graphhopper.jsprit.core.problem.solution.route.ReverseRouteActivityVisitor;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
@@ -66,9 +66,9 @@ public void doBefore() {
         reverseActivityVisitor = new ReverseRouteActivityVisitor();
         reverseActivityVisitor.addActivityVisitor(new UpdatePracticalTimeWindows(stateManager, routingCosts, activityCosts));
 
-        Pickup pickup = new Pickup.Builder("pick").setLocation(Location.newInstance("0,20")).setTimeWindow(TimeWindow.newInstance(0, 30)).build();
-        Delivery delivery = new Delivery.Builder("del").setLocation(Location.newInstance("20,20")).setTimeWindow(TimeWindow.newInstance(10, 40)).build();
-        Pickup pickup2 = new Pickup.Builder("pick2").setLocation(Location.newInstance("20,0")).setTimeWindow(TimeWindow.newInstance(20, 50)).build();
+        PickupJob pickup = new PickupJob.Builder("pick").setLocation(Location.newInstance("0,20")).setTimeWindow(TimeWindow.newInstance(0, 30)).build();
+        DeliveryJob delivery = new DeliveryJob.Builder("del").setLocation(Location.newInstance("20,20")).setTimeWindow(TimeWindow.newInstance(10, 40)).build();
+        PickupJob pickup2 = new PickupJob.Builder("pick2").setLocation(Location.newInstance("20,0")).setTimeWindow(TimeWindow.newInstance(20, 50)).build();
 
         VehicleType vt = mock(VehicleType.class);
         when(vt.getAvgVelocity()).thenReturn(1d);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdateRequiredSkillsTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdateRequiredSkillsTest.java
index b13114a09..0efa8376a 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdateRequiredSkillsTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdateRequiredSkillsTest.java
@@ -30,7 +30,7 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.Skills;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
@@ -49,9 +49,9 @@
     public void doBefore() {
         VehicleType type = VehicleTypeImpl.Builder.newInstance("t").build();
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance("start")).setType(type).build();
-        Service service = new Service.Builder("s").setLocation(Location.newInstance("loc")).addRequiredSkill("skill1").build();
-        Service service2 = new Service.Builder("s2").setLocation(Location.newInstance("loc")).addRequiredSkill("skill1").addRequiredSkill("skill2").addRequiredSkill("skill3").build();
-        Service service3 = new Service.Builder("s3").setLocation(Location.newInstance("loc")).addRequiredSkill("skill4").addRequiredSkill("skill5").build();
+        ServiceJob service = new ServiceJob.Builder("s").setLocation(Location.newInstance("loc")).addRequiredSkill("skill1").build();
+        ServiceJob service2 = new ServiceJob.Builder("s2").setLocation(Location.newInstance("loc")).addRequiredSkill("skill1").addRequiredSkill("skill2").addRequiredSkill("skill3").build();
+        ServiceJob service3 = new ServiceJob.Builder("s3").setLocation(Location.newInstance("loc")).addRequiredSkill("skill4").addRequiredSkill("skill5").build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addVehicle(vehicle).addJob(service)
                         .addJob(service2).addJob(service3).build();
         route = VehicleRoute.Builder.newInstance(vehicle).setJobActivityFactory(vrp.getJobActivityFactory()).addService(service).addService(service2).addService(service3).build();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdateVehicleDependentTimeWindowTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdateVehicleDependentTimeWindowTest.java
index efe7d6c9c..28f297a60 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdateVehicleDependentTimeWindowTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdateVehicleDependentTimeWindowTest.java
@@ -37,7 +37,7 @@
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.cost.WaitingTimeCosts;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.vehicle.FiniteFleetManagerFactory;
@@ -98,9 +98,9 @@ public void doBefore() {
 
         fleetManager = new FiniteFleetManagerFactory(vehicles).createFleetManager();
 
-        Service service = new Service.Builder("s1").setLocation(Location.newInstance("10,0")).build();
-        Service service2 = new Service.Builder("s2").setLocation(Location.newInstance("20,0")).build();
-        Service service3 = new Service.Builder("s3").setLocation(Location.newInstance("30,0")).build();
+        ServiceJob service = new ServiceJob.Builder("s1").setLocation(Location.newInstance("10,0")).build();
+        ServiceJob service2 = new ServiceJob.Builder("s2").setLocation(Location.newInstance("20,0")).build();
+        ServiceJob service3 = new ServiceJob.Builder("s3").setLocation(Location.newInstance("30,0")).build();
 
         vrpBuilder.addJob(service).addJob(service2).addJob(service3);
         vrp = vrpBuilder.build();
@@ -210,9 +210,9 @@ public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct1WithVehicle3()
     public void twUpdateShouldWorkWithMultipleTWs() {
         //
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance("0,0")).setEarliestStart(0.).setLatestArrival(100.).build();
-        Service service = new Service.Builder("s1").setLocation(Location.newInstance("10,0"))
+        ServiceJob service = new ServiceJob.Builder("s1").setLocation(Location.newInstance("10,0"))
                         .addTimeWindow(30, 40).build();
-        Service service2 = new Service.Builder("s2")
+        ServiceJob service2 = new ServiceJob.Builder("s2")
                         .addTimeWindow(20, 30).addTimeWindow(40, 60).addTimeWindow(70, 80).setLocation(Location.newInstance("20,0")).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(service).addJob(service2).addVehicle(vehicle)
@@ -250,7 +250,7 @@ public void updateOfOpenRoutesShouldBeDoneCorrectly() {
                         .setLatestArrival(51)
                         .build();
 
-        Service service = new Service.Builder("s")
+        ServiceJob service = new ServiceJob.Builder("s")
                         .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(50, 0)).build()).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance()
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyserTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyserTest.java
index 5e4a52b74..daf05a5a0 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyserTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyserTest.java
@@ -35,10 +35,10 @@
 import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.cost.TransportDistance;
-import com.graphhopper.jsprit.core.problem.job.Delivery;
-import com.graphhopper.jsprit.core.problem.job.Pickup;
-import com.graphhopper.jsprit.core.problem.job.Service;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.DeliveryJob;
+import com.graphhopper.jsprit.core.problem.job.PickupJob;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
@@ -71,17 +71,17 @@ public void doBefore() {
         VehicleImpl vehicle2 = VehicleImpl.Builder.newInstance("v2").setType(type)
                         .setStartLocation(Location.newInstance(5, 0)).build();
 
-        Service s1 = new Service.Builder("s1")
+        ServiceJob s1 = new ServiceJob.Builder("s1")
                         .setTimeWindow(TimeWindow.newInstance(10, 20))
                         .setLocation(Location.newInstance(-10, 1)).addSizeDimension(0, 2)
                         .addRequiredSkill("skill1")
                         .build();
-        Service s2 = new Service.Builder("s2")
+        ServiceJob s2 = new ServiceJob.Builder("s2")
                         .setLocation(Location.newInstance(-10, 10))
                         .addSizeDimension(0, 3)
                         .addRequiredSkill("skill2").addRequiredSkill("skill1")
                         .build();
-        Shipment shipment1 = Shipment.Builder.newInstance("ship1")
+        ShipmentJob shipment1 = new ShipmentJob.Builder("ship1")
                         .setPickupLocation(TestUtils.loc(Coordinate.newInstance(-15, 2)))
                         .setDeliveryLocation(TestUtils.loc(Coordinate.newInstance(-16, 5)))
                         .addSizeDimension(0, 10)
@@ -90,13 +90,13 @@ public void doBefore() {
                         .addRequiredSkill("skill3")
                         .build();
 
-        Service s3 = new Service.Builder("s3")
+        ServiceJob s3 = new ServiceJob.Builder("s3")
                         .setTimeWindow(TimeWindow.newInstance(10, 20))
                         .setLocation(TestUtils.loc(Coordinate.newInstance(10, 1))).addSizeDimension(0, 2).build();
 
-        Service s4 = new Service.Builder("s4").setLocation(TestUtils.loc(Coordinate.newInstance(10, 10))).addSizeDimension(0, 3).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").setLocation(TestUtils.loc(Coordinate.newInstance(10, 10))).addSizeDimension(0, 3).build();
 
-        Shipment shipment2 = Shipment.Builder.newInstance("ship2").setPickupLocation(TestUtils.loc(Coordinate.newInstance(15, 2)))
+        ShipmentJob shipment2 = new ShipmentJob.Builder("ship2").setPickupLocation(TestUtils.loc(Coordinate.newInstance(15, 2)))
                         .setPickupServiceTime(20.).setDeliveryServiceTime(20.)
                         .setDeliveryLocation(TestUtils.loc(Coordinate.newInstance(16, 5))).addSizeDimension(0, 10).build();
 
@@ -126,33 +126,33 @@ public void buildAnotherScenarioWithOnlyOneVehicleAndWithoutAnyConstraintsBefore
                         .setLatestArrival(150.)
                         .build();
 
-        Pickup s1 = new Pickup.Builder("s1")
+        PickupJob s1 = new PickupJob.Builder("s1")
                         .setTimeWindow(TimeWindow.newInstance(10, 20))
                         .setLocation(Location.newInstance(-10, 1))
                         .addSizeDimension(0, 10)
                         .build();
-        Delivery s2 = new Delivery.Builder("s2")
+        DeliveryJob s2 = new DeliveryJob.Builder("s2")
                         .setLocation(Location.newInstance(-10, 10))
                         .setTimeWindow(TimeWindow.newInstance(10, 20))
                         .addSizeDimension(0, 20)
                         .build();
-        Shipment shipment1 = Shipment.Builder.newInstance("ship1").setPickupLocation(TestUtils.loc(Coordinate.newInstance(-15, 2)))
+        ShipmentJob shipment1 = new ShipmentJob.Builder("ship1").setPickupLocation(TestUtils.loc(Coordinate.newInstance(-15, 2)))
                         .setDeliveryLocation(TestUtils.loc(Coordinate.newInstance(-16, 5)))
                         .addSizeDimension(0, 15)
                         .setPickupServiceTime(20.).setDeliveryServiceTime(20.)
                         .setPickupTimeWindow(TimeWindow.newInstance(10, 20)).setDeliveryTimeWindow(TimeWindow.newInstance(10, 20))
                         .build();
 
-        Pickup s3 = new Pickup.Builder("s3")
+        PickupJob s3 = new PickupJob.Builder("s3")
                         .setTimeWindow(TimeWindow.newInstance(10, 20))
                         .setLocation(TestUtils.loc(Coordinate.newInstance(10, 1)))
                         .addSizeDimension(0, 10)
                         .build();
-        Delivery s4 = new Delivery.Builder("s4").setLocation(Location.newInstance(10, 10))
+        DeliveryJob s4 = new DeliveryJob.Builder("s4").setLocation(Location.newInstance(10, 10))
                         .addSizeDimension(0, 20)
                         .setTimeWindow(TimeWindow.newInstance(10, 20))
                         .build();
-        Shipment shipment2 = Shipment.Builder.newInstance("ship2").setPickupLocation(TestUtils.loc(Coordinate.newInstance(15, 2)))
+        ShipmentJob shipment2 = new ShipmentJob.Builder("ship2").setPickupLocation(TestUtils.loc(Coordinate.newInstance(15, 2)))
                         .setPickupServiceTime(20.).setDeliveryServiceTime(20.)
                         .setDeliveryLocation(TestUtils.loc(Coordinate.newInstance(16, 5)))
                         .setPickupTimeWindow(TimeWindow.newInstance(10, 20)).setDeliveryTimeWindow(TimeWindow.newInstance(10, 20))
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblemTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblemTest.java
index cdd021422..b1ad85795 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblemTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblemTest.java
@@ -36,11 +36,11 @@
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingActivityCosts;
 import com.graphhopper.jsprit.core.problem.driver.Driver;
 import com.graphhopper.jsprit.core.problem.driver.DriverImpl;
-import com.graphhopper.jsprit.core.problem.job.Delivery;
-import com.graphhopper.jsprit.core.problem.job.Pickup;
+import com.graphhopper.jsprit.core.problem.job.DeliveryJob;
+import com.graphhopper.jsprit.core.problem.job.PickupJob;
 import com.graphhopper.jsprit.core.problem.job.SequentialJobActivityList;
-import com.graphhopper.jsprit.core.problem.job.Service;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
@@ -123,8 +123,8 @@ public void whenBuildingWithFourVehiclesAndTwoTypes_vrpShouldContainTheCorrectNu
 
     @Test
     public void whenShipmentsAreAdded_vrpShouldContainThem() {
-        Shipment s = Shipment.Builder.newInstance("s").addSizeDimension(0, 10).setPickupLocation(Location.Builder.newInstance().setId("foofoo").build()).setDeliveryLocation(Location.newInstance("foo")).build();
-        Shipment s2 = Shipment.Builder.newInstance("s2").addSizeDimension(0, 100).setPickupLocation(Location.Builder.newInstance().setId("foofoo").build()).setDeliveryLocation(Location.newInstance("foo")).build();
+        ShipmentJob s = new ShipmentJob.Builder("s").addSizeDimension(0, 10).setPickupLocation(Location.Builder.newInstance().setId("foofoo").build()).setDeliveryLocation(Location.newInstance("foo")).build();
+        ShipmentJob s2 = new ShipmentJob.Builder("s2").addSizeDimension(0, 100).setPickupLocation(Location.Builder.newInstance().setId("foofoo").build()).setDeliveryLocation(Location.newInstance("foo")).build();
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addJob(s);
         vrpBuilder.addJob(s2);
@@ -138,10 +138,10 @@ public void whenShipmentsAreAdded_vrpShouldContainThem() {
 
     @Test
     public void whenServicesAreAdded_vrpShouldContainThem() {
-        Service s1 = mock(Service.class);
+        ServiceJob s1 = mock(ServiceJob.class);
         when(s1.getId()).thenReturn("s1");
         when(s1.getActivityList()).thenReturn(new SequentialJobActivityList(s1));
-        Service s2 = mock(Service.class);
+        ServiceJob s2 = mock(ServiceJob.class);
         when(s2.getId()).thenReturn("s2");
         when(s2.getActivityList()).thenReturn(new SequentialJobActivityList(s2));
 
@@ -158,10 +158,10 @@ public void whenServicesAreAdded_vrpShouldContainThem() {
 
     @Test
     public void whenPickupsAreAdded_vrpShouldContainThem() {
-        Pickup s1 = mock(Pickup.class);
+        PickupJob s1 = mock(PickupJob.class);
         when(s1.getId()).thenReturn("s1");
         when(s1.getActivityList()).thenReturn(new SequentialJobActivityList(s1));
-        Pickup s2 = mock(Pickup.class);
+        PickupJob s2 = mock(PickupJob.class);
         when(s2.getId()).thenReturn("s2");
         when(s2.getActivityList()).thenReturn(new SequentialJobActivityList(s2));
 
@@ -177,10 +177,10 @@ public void whenPickupsAreAdded_vrpShouldContainThem() {
 
     @Test
     public void whenPickupsAreAddedAllAtOnce_vrpShouldContainThem() {
-        Pickup s1 = mock(Pickup.class);
+        PickupJob s1 = mock(PickupJob.class);
         when(s1.getId()).thenReturn("s1");
         when(s1.getActivityList()).thenReturn(new SequentialJobActivityList(s1));
-        Pickup s2 = mock(Pickup.class);
+        PickupJob s2 = mock(PickupJob.class);
         when(s2.getId()).thenReturn("s2");
         when(s2.getActivityList()).thenReturn(new SequentialJobActivityList(s2));
 
@@ -196,10 +196,10 @@ public void whenPickupsAreAddedAllAtOnce_vrpShouldContainThem() {
 
     @Test
     public void whenDelivieriesAreAdded_vrpShouldContainThem() {
-        Delivery s1 = mock(Delivery.class);
+        DeliveryJob s1 = mock(DeliveryJob.class);
         when(s1.getId()).thenReturn("s1");
         when(s1.getActivityList()).thenReturn(new SequentialJobActivityList(s1));
-        Delivery s2 = mock(Delivery.class);
+        DeliveryJob s2 = mock(DeliveryJob.class);
         when(s2.getId()).thenReturn("s2");
         when(s2.getActivityList()).thenReturn(new SequentialJobActivityList(s2));
 
@@ -215,10 +215,10 @@ public void whenDelivieriesAreAdded_vrpShouldContainThem() {
 
     @Test
     public void whenDelivieriesAreAddedAllAtOnce_vrpShouldContainThem() {
-        Delivery s1 = mock(Delivery.class);
+        DeliveryJob s1 = mock(DeliveryJob.class);
         when(s1.getId()).thenReturn("s1");
         when(s1.getActivityList()).thenReturn(new SequentialJobActivityList(s1));
-        Delivery s2 = mock(Delivery.class);
+        DeliveryJob s2 = mock(DeliveryJob.class);
         when(s2.getId()).thenReturn("s2");
         when(s2.getActivityList()).thenReturn(new SequentialJobActivityList(s2));
 
@@ -234,14 +234,14 @@ public void whenDelivieriesAreAddedAllAtOnce_vrpShouldContainThem() {
 
     @Test
     public void whenServicesAreAddedAllAtOnce_vrpShouldContainThem() {
-        Service s1 = mock(Service.class);
+        ServiceJob s1 = mock(ServiceJob.class);
         when(s1.getId()).thenReturn("s1");
         when(s1.getActivityList()).thenReturn(new SequentialJobActivityList(s1));
-        Service s2 = mock(Service.class);
+        ServiceJob s2 = mock(ServiceJob.class);
         when(s2.getId()).thenReturn("s2");
         when(s2.getActivityList()).thenReturn(new SequentialJobActivityList(s2));
 
-        Collection<Service> services = new ArrayList<Service>();
+        Collection<ServiceJob> services = new ArrayList<ServiceJob>();
         services.add(s1);
         services.add(s2);
 
@@ -425,7 +425,7 @@ public void whenAddingInitialRoute_locationOfVehicleMustBeMemorized() {
 
     @Test
     public void whenAddingJobAndInitialRouteWithThatJobAfterwards_thisJobShouldNotBeInFinalJobMap() {
-        Service service = new Service.Builder("myService").setLocation(Location.newInstance("loc")).build();
+        ServiceJob service = new ServiceJob.Builder("myService").setLocation(Location.newInstance("loc")).build();
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addJob(service);
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v")
@@ -440,8 +440,8 @@ public void whenAddingJobAndInitialRouteWithThatJobAfterwards_thisJobShouldNotBe
 
     @Test
     public void whenAddingTwoJobs_theyShouldHaveProperIndeces() {
-        Service service = new Service.Builder("myService").setLocation(Location.newInstance("loc")).build();
-        Shipment shipment = Shipment.Builder.newInstance("shipment").setPickupLocation(Location.Builder.newInstance().setId("pick").build())
+        ServiceJob service = new ServiceJob.Builder("myService").setLocation(Location.newInstance("loc")).build();
+        ShipmentJob shipment = new ShipmentJob.Builder("shipment").setPickupLocation(Location.Builder.newInstance().setId("pick").build())
                         .setDeliveryLocation(Location.newInstance("del")).build();
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addJob(service);
@@ -456,8 +456,8 @@ public void whenAddingTwoJobs_theyShouldHaveProperIndeces() {
 
     @Test(expected = IllegalArgumentException.class)
     public void whenAddingTwoServicesWithTheSameId_itShouldThrowException() {
-        Service service1 = new Service.Builder("myService").setLocation(Location.newInstance("loc")).build();
-        Service service2 = new Service.Builder("myService").setLocation(Location.newInstance("loc")).build();
+        ServiceJob service1 = new ServiceJob.Builder("myService").setLocation(Location.newInstance("loc")).build();
+        ServiceJob service2 = new ServiceJob.Builder("myService").setLocation(Location.newInstance("loc")).build();
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addJob(service1);
         vrpBuilder.addJob(service2);
@@ -466,9 +466,9 @@ public void whenAddingTwoServicesWithTheSameId_itShouldThrowException() {
 
     @Test(expected = IllegalArgumentException.class)
     public void whenAddingTwoShipmentsWithTheSameId_itShouldThrowException() {
-        Shipment shipment1 = Shipment.Builder.newInstance("shipment").setPickupLocation(Location.Builder.newInstance().setId("pick").build())
+        ShipmentJob shipment1 = new ShipmentJob.Builder("shipment").setPickupLocation(Location.Builder.newInstance().setId("pick").build())
                         .setDeliveryLocation(Location.newInstance("del")).build();
-        Shipment shipment2 = Shipment.Builder.newInstance("shipment").setPickupLocation(Location.Builder.newInstance().setId("pick").build())
+        ShipmentJob shipment2 = new ShipmentJob.Builder("shipment").setPickupLocation(Location.Builder.newInstance().setId("pick").build())
                         .setDeliveryLocation(Location.newInstance("del")).build();
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addJob(shipment1);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/LoadConstraintTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/LoadConstraintTest.java
index 367062d9f..7168f4611 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/LoadConstraintTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/LoadConstraintTest.java
@@ -36,12 +36,12 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.job.Delivery;
 import com.graphhopper.jsprit.core.problem.job.CustomJob;
+import com.graphhopper.jsprit.core.problem.job.DeliveryJob;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Pickup;
-import com.graphhopper.jsprit.core.problem.job.Service;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.PickupJob;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivity;
@@ -74,20 +74,20 @@ public void doBefore() {
         when(vehicle.getType()).thenReturn(type);
 
         VehicleRoutingProblem.Builder serviceProblemBuilder = VehicleRoutingProblem.Builder.newInstance();
-        Service s1 = new Service.Builder("s").addSizeDimension(0, 10).setLocation(Location.newInstance("loc")).build();
-        Service s2 = new Service.Builder("s2").addSizeDimension(0, 5).setLocation(Location.newInstance("loc")).build();
+        ServiceJob s1 = new ServiceJob.Builder("s").addSizeDimension(0, 10).setLocation(Location.newInstance("loc")).build();
+        ServiceJob s2 = new ServiceJob.Builder("s2").addSizeDimension(0, 5).setLocation(Location.newInstance("loc")).build();
         serviceProblemBuilder.addJob(s1).addJob(s2);
         final VehicleRoutingProblem serviceProblem = serviceProblemBuilder.build();
 
         final VehicleRoutingProblem.Builder pdProblemBuilder = VehicleRoutingProblem.Builder.newInstance();
-        Pickup pickup = new Pickup.Builder("pick").addSizeDimension(0, 10).setLocation(Location.newInstance("loc")).build();
-        Delivery delivery = new Delivery.Builder("del").addSizeDimension(0, 5).setLocation(Location.newInstance("loc")).build();
+        PickupJob pickup = new PickupJob.Builder("pick").addSizeDimension(0, 10).setLocation(Location.newInstance("loc")).build();
+        DeliveryJob delivery = new DeliveryJob.Builder("del").addSizeDimension(0, 5).setLocation(Location.newInstance("loc")).build();
         pdProblemBuilder.addJob(pickup).addJob(delivery);
         final VehicleRoutingProblem pdProblem = pdProblemBuilder.build();
 
         final VehicleRoutingProblem.Builder shipmentProblemBuilder = VehicleRoutingProblem.Builder.newInstance();
-        Shipment shipment1 = Shipment.Builder.newInstance("s1").addSizeDimension(0, 10).setPickupLocation(Location.Builder.newInstance().setId("pick").build()).setDeliveryLocation(Location.newInstance("del")).build();
-        Shipment shipment2 = Shipment.Builder.newInstance("s2").addSizeDimension(0, 5).setPickupLocation(Location.Builder.newInstance().setId("pick").build()).setDeliveryLocation(Location.newInstance("del")).build();
+        ShipmentJob shipment1 = new ShipmentJob.Builder("s1").addSizeDimension(0, 10).setPickupLocation(Location.Builder.newInstance().setId("pick").build()).setDeliveryLocation(Location.newInstance("del")).build();
+        ShipmentJob shipment2 = new ShipmentJob.Builder("s2").addSizeDimension(0, 5).setPickupLocation(Location.Builder.newInstance().setId("pick").build()).setDeliveryLocation(Location.newInstance("del")).build();
         shipmentProblemBuilder.addJob(shipment1).addJob(shipment2).build();
         final VehicleRoutingProblem shipmentProblem = shipmentProblemBuilder.build();
 
@@ -111,11 +111,11 @@ public void doBefore() {
 
     @Test
     public void whenCustomJob_itShouldNotIgnoreCapacity() {
-        CustomJob cj = CustomJob.Builder.newInstance("job")
-                        .addPickup(Location.newInstance(10, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).build())
-                        .addPickup(Location.newInstance(5, 0), SizeDimension.Builder.newInstance().addDimension(0, 2).build())
-                        .addPickup(Location.newInstance(20, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).build())
-                        .build();
+        CustomJob cj = new CustomJob.Builder("job")
+                .addPickup(Location.newInstance(10, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).build())
+                .addPickup(Location.newInstance(5, 0), SizeDimension.Builder.newInstance().addDimension(0, 2).build())
+                .addPickup(Location.newInstance(20, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).build())
+                .build();
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0, 2).build();
         Vehicle v = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem.Builder.newInstance().addJob(cj).addVehicle(v).build();
@@ -133,8 +133,8 @@ public void whenCustomJob_itShouldNotIgnoreCapacity() {
     @Test
     public void whenServiceRouteAndNewServiceFitsIn_itShouldReturnFulfilled() {
         stateManager.informInsertionStarts(Arrays.asList(serviceRoute), Collections.emptyList());
-        Service s = Service.Builder.newInstance("service").setLocation(Location.newInstance(0))
-                        .addSizeDimension(0, 5).build();
+        ServiceJob s = new ServiceJob.Builder("service").setLocation(Location.newInstance(0))
+                .addSizeDimension(0, 5).build();
         ServiceLoadRouteLevelConstraint loadConstraint = new ServiceLoadRouteLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(serviceRoute, s, serviceRoute.getVehicle(), null, 0.);
@@ -144,7 +144,7 @@ public void whenServiceRouteAndNewServiceFitsIn_itShouldReturnFulfilled() {
     @Test
     public void whenServiceRouteAndNewServiceFitsInBetweenStartAndAct1_itShouldReturnFulfilled() {
         stateManager.informInsertionStarts(Arrays.asList(serviceRoute), Collections.<Job>emptyList());
-        Service s = mock(Service.class);
+        ServiceJob s = mock(ServiceJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 5).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
@@ -161,7 +161,7 @@ public void whenServiceRouteAndNewServiceFitsInBetweenStartAndAct1_itShouldRetur
     @Test
     public void whenServiceRouteAndNewServiceFitsInBetweenAc1AndAct2_itShouldReturnFulfilled() {
         stateManager.informInsertionStarts(Arrays.asList(serviceRoute), Collections.<Job>emptyList());
-        Service s = mock(Service.class);
+        ServiceJob s = mock(ServiceJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 5).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
@@ -178,7 +178,7 @@ public void whenServiceRouteAndNewServiceFitsInBetweenAc1AndAct2_itShouldReturnF
     @Test
     public void whenServiceRouteAndNewServiceFitsInBetweenAc2AndEnd_itShouldReturnFulfilled() {
         stateManager.informInsertionStarts(Arrays.asList(serviceRoute), Collections.<Job>emptyList());
-        Service s = mock(Service.class);
+        ServiceJob s = mock(ServiceJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 5).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
@@ -198,7 +198,7 @@ public void whenServiceRouteAndNewServiceFitsInBetweenAc2AndEnd_itShouldReturnFu
     @Test
     public void whenServiceRouteAndNewServiceDoesNotFitInBetweenStartAndAct1_itShouldReturnFulfilled() {
         stateManager.informInsertionStarts(Arrays.asList(serviceRoute), Collections.<Job>emptyList());
-        Service s = mock(Service.class);
+        ServiceJob s = mock(ServiceJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 6).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
@@ -215,7 +215,7 @@ public void whenServiceRouteAndNewServiceDoesNotFitInBetweenStartAndAct1_itShoul
     @Test
     public void whenServiceRouteAndNewServiceDoesNotFitInBetweenAc1AndAct2_itShouldReturnFulfilled() {
         stateManager.informInsertionStarts(Arrays.asList(serviceRoute), Collections.<Job>emptyList());
-        Service s = mock(Service.class);
+        ServiceJob s = mock(ServiceJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 6).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
@@ -232,7 +232,7 @@ public void whenServiceRouteAndNewServiceDoesNotFitInBetweenAc1AndAct2_itShouldR
     @Test
     public void whenServiceRouteAndNewServiceDoesNotFitInBetweenAc2AndEnd_itShouldReturnFulfilled() {
         stateManager.informInsertionStarts(Arrays.asList(serviceRoute), Collections.<Job>emptyList());
-        Service s = mock(Service.class);
+        ServiceJob s = mock(ServiceJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 6).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
@@ -250,7 +250,8 @@ public void whenServiceRouteAndNewServiceDoesNotFitInBetweenAc2AndEnd_itShouldRe
     @Test
     public void whenServiceRouteAndNewServiceDoesNotFitIn_itShouldReturnFulfilled() {
         stateManager.informInsertionStarts(Arrays.asList(serviceRoute), Collections.emptyList());
-        Service s = Service.Builder.newInstance("service").setLocation(Location.newInstance(0)).addSizeDimension(0, 6).build();
+        ServiceJob s = new ServiceJob.Builder("service").setLocation(Location.newInstance(0)).addSizeDimension(0, 6)
+                .build();
         ServiceLoadRouteLevelConstraint loadConstraint = new ServiceLoadRouteLevelConstraint(stateManager);
         JobInsertionContext context = new JobInsertionContext(serviceRoute, s, serviceRoute.getVehicle(), null, 0.);
         assertFalse(loadConstraint.fulfilled(context));
@@ -264,7 +265,8 @@ public void whenServiceRouteAndNewServiceDoesNotFitIn_itShouldReturnFulfilled()
     @Test
     public void whenPDRouteRouteAndNewPickupFitsIn_itShouldReturnFulfilled() {
         stateManager.informInsertionStarts(Arrays.asList(pickupDeliveryRoute), Collections.<Job>emptyList());
-        Pickup s = Pickup.Builder.newInstance("pick").addSizeDimension(0, 10).setLocation(Location.newInstance(0)).build();
+        PickupJob s = new PickupJob.Builder("pick").addSizeDimension(0, 10).setLocation(Location.newInstance(0))
+                .build();
         ServiceLoadRouteLevelConstraint loadConstraint = new ServiceLoadRouteLevelConstraint(stateManager);
         JobInsertionContext context = new JobInsertionContext(pickupDeliveryRoute, s, serviceRoute.getVehicle(), null, 0.);
         assertTrue(loadConstraint.fulfilled(context));
@@ -273,7 +275,8 @@ public void whenPDRouteRouteAndNewPickupFitsIn_itShouldReturnFulfilled() {
     @Test
     public void whenPDRouteRouteAndNewDeliveryFitsIn_itShouldReturnFulfilled() {
         stateManager.informInsertionStarts(Arrays.asList(pickupDeliveryRoute), Collections.emptyList());
-        Delivery s = Delivery.Builder.newInstance("del").addSizeDimension(0, 15).setLocation(Location.newInstance(0)).build();
+        DeliveryJob s = new DeliveryJob.Builder("del").addSizeDimension(0, 15).setLocation(Location.newInstance(0))
+                .build();
         ServiceLoadRouteLevelConstraint loadConstraint = new ServiceLoadRouteLevelConstraint(stateManager);
         JobInsertionContext context = new JobInsertionContext(pickupDeliveryRoute, s, serviceRoute.getVehicle(), null, 0.);
         assertTrue(loadConstraint.fulfilled(context));
@@ -282,9 +285,9 @@ public void whenPDRouteRouteAndNewDeliveryFitsIn_itShouldReturnFulfilled() {
     @Test
     public void whenPDRouteRouteAndNewPickupDoesNotFitIn_itShouldReturnNotFulfilled() {
         stateManager.informInsertionStarts(Arrays.asList(pickupDeliveryRoute), Collections.<Job>emptyList());
-        Pickup s = Pickup.Builder.newInstance("pickup")
-                        .setLocation(Location.newInstance(0))
-                        .addSizeDimension(0, 11).build();
+        PickupJob s = new PickupJob.Builder("pickup")
+                .setLocation(Location.newInstance(0))
+                .addSizeDimension(0, 11).build();
         ServiceLoadRouteLevelConstraint loadConstraint = new ServiceLoadRouteLevelConstraint(stateManager);
         JobInsertionContext context = new JobInsertionContext(pickupDeliveryRoute, s, serviceRoute.getVehicle(), null, 0.);
         assertFalse(loadConstraint.fulfilled(context));
@@ -293,8 +296,8 @@ public void whenPDRouteRouteAndNewPickupDoesNotFitIn_itShouldReturnNotFulfilled(
     @Test
     public void whenPDRouteRouteAndNewDeliveryDoesNotFitIn_itShouldReturnNotFulfilled() {
         stateManager.informInsertionStarts(Arrays.asList(pickupDeliveryRoute), Collections.<Job>emptyList());
-        Delivery s = Delivery.Builder.newInstance("del").setLocation(Location.newInstance(0))
-                        .addSizeDimension(0, 16).build();
+        DeliveryJob s = new DeliveryJob.Builder("del").setLocation(Location.newInstance(0))
+                .addSizeDimension(0, 16).build();
         ServiceLoadRouteLevelConstraint loadConstraint = new ServiceLoadRouteLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(pickupDeliveryRoute, s, serviceRoute.getVehicle(), null, 0.);
@@ -307,14 +310,14 @@ public void whenPDRouteRouteAndNewDeliveryDoesNotFitIn_itShouldReturnNotFulfille
     @Test
     public void whenPDRoute_newPickupShouldFitInBetweenStartAndAct1() {
         stateManager.informInsertionStarts(Arrays.asList(pickupDeliveryRoute), Collections.<Job>emptyList());
-        Pickup s = mock(Pickup.class);
+        PickupJob s = mock(PickupJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 5).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(pickupDeliveryRoute, s, pickupDeliveryRoute.getVehicle(), null, 0.);
         PickupActivity newAct = new PickupActivity(s, "pick", null, 0, newSize,
-                        TimeWindows.ANY_TIME.getTimeWindows());
+                TimeWindows.ANY_TIME.getTimeWindows());
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickupDeliveryRoute.getStart(), newAct, pickupDeliveryRoute.getActivities().get(0), 0.);
 
@@ -324,14 +327,14 @@ public void whenPDRoute_newPickupShouldFitInBetweenStartAndAct1() {
     @Test
     public void whenPDRoute_newPickupShouldFitInBetweenAct1AndAct2() {
         stateManager.informInsertionStarts(Arrays.asList(pickupDeliveryRoute), Collections.<Job>emptyList());
-        Pickup s = mock(Pickup.class);
+        PickupJob s = mock(PickupJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 5).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(pickupDeliveryRoute, s, pickupDeliveryRoute.getVehicle(), null, 0.);
         PickupActivity newAct = new PickupActivity(s, "pick", null, 0, newSize,
-                        TimeWindows.ANY_TIME.getTimeWindows());
+                TimeWindows.ANY_TIME.getTimeWindows());
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickupDeliveryRoute.getActivities().get(0), newAct, pickupDeliveryRoute.getActivities().get(1), 0.);
 
@@ -341,14 +344,14 @@ public void whenPDRoute_newPickupShouldFitInBetweenAct1AndAct2() {
     @Test
     public void whenPDRoute_newPickupShouldFitInBetweenAct2AndEnd() {
         stateManager.informInsertionStarts(Arrays.asList(pickupDeliveryRoute), Collections.<Job>emptyList());
-        Pickup s = mock(Pickup.class);
+        PickupJob s = mock(PickupJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 10).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(pickupDeliveryRoute, s, pickupDeliveryRoute.getVehicle(), null, 0.);
         PickupActivity newAct = new PickupActivity(s, "pick", null, 0, newSize,
-                        TimeWindows.ANY_TIME.getTimeWindows());
+                TimeWindows.ANY_TIME.getTimeWindows());
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickupDeliveryRoute.getActivities().get(1), newAct, pickupDeliveryRoute.getEnd(), 0.);
 
@@ -361,14 +364,14 @@ public void whenPDRoute_newPickupShouldFitInBetweenAct2AndEnd() {
     @Test
     public void whenPDRoute_newPickupShouldNotFitInBetweenStartAndAct1() {
         stateManager.informInsertionStarts(Arrays.asList(pickupDeliveryRoute), Collections.<Job>emptyList());
-        Pickup s = mock(Pickup.class);
+        PickupJob s = mock(PickupJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 6).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(pickupDeliveryRoute, s, pickupDeliveryRoute.getVehicle(), null, 0.);
         PickupActivity newAct = new PickupActivity(s, "pick", null, 0, newSize,
-                        TimeWindows.ANY_TIME.getTimeWindows());
+                TimeWindows.ANY_TIME.getTimeWindows());
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickupDeliveryRoute.getStart(), newAct, pickupDeliveryRoute.getActivities().get(0), 0.);
 
@@ -378,14 +381,14 @@ public void whenPDRoute_newPickupShouldNotFitInBetweenStartAndAct1() {
     @Test
     public void whenPDRoute_newPickupShouldNotFitInBetweenAct1AndAct2() {
         stateManager.informInsertionStarts(Arrays.asList(pickupDeliveryRoute), Collections.<Job>emptyList());
-        Pickup s = mock(Pickup.class);
+        PickupJob s = mock(PickupJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 6).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(pickupDeliveryRoute, s, pickupDeliveryRoute.getVehicle(), null, 0.);
         PickupActivity newAct = new PickupActivity(s, "pick", null, 0, newSize,
-                        TimeWindows.ANY_TIME.getTimeWindows());
+                TimeWindows.ANY_TIME.getTimeWindows());
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickupDeliveryRoute.getActivities().get(0), newAct, pickupDeliveryRoute.getActivities().get(1), 0.);
 
@@ -395,14 +398,14 @@ public void whenPDRoute_newPickupShouldNotFitInBetweenAct1AndAct2() {
     @Test
     public void whenPDRoute_newPickupShouldNotFitInBetweenAct2AndEnd() {
         stateManager.informInsertionStarts(Arrays.asList(pickupDeliveryRoute), Collections.<Job>emptyList());
-        Pickup s = mock(Pickup.class);
+        PickupJob s = mock(PickupJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 11).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(pickupDeliveryRoute, s, pickupDeliveryRoute.getVehicle(), null, 0.);
         PickupActivity newAct = new PickupActivity(s, "pick", null, 0, newSize,
-                        TimeWindows.ANY_TIME.getTimeWindows());
+                TimeWindows.ANY_TIME.getTimeWindows());
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickupDeliveryRoute.getActivities().get(1), newAct, pickupDeliveryRoute.getEnd(), 0.);
 
@@ -416,15 +419,15 @@ public void whenPDRoute_newPickupShouldNotFitInBetweenAct2AndEnd() {
     @Test
     public void whenPDRoute_newDeliveryShouldFitInBetweenStartAndAct1() {
         stateManager.informInsertionStarts(Arrays.asList(pickupDeliveryRoute), Collections.<Job>emptyList());
-        Delivery s = mock(Delivery.class);
+        DeliveryJob s = mock(DeliveryJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 15).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(pickupDeliveryRoute, s, pickupDeliveryRoute.getVehicle(), null, 0.);
         DeliveryActivity newAct = new DeliveryActivity(s, "del", null, 0,
-                        newSize.invert(),
-                        TimeWindows.ANY_TIME.getTimeWindows());
+                newSize.invert(),
+                TimeWindows.ANY_TIME.getTimeWindows());
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickupDeliveryRoute.getStart(), newAct, pickupDeliveryRoute.getActivities().get(0), 0.);
 
@@ -434,15 +437,15 @@ public void whenPDRoute_newDeliveryShouldFitInBetweenStartAndAct1() {
     @Test
     public void whenPDRoute_newDeliveryShouldNotFitInBetweenStartAndAct1() {
         stateManager.informInsertionStarts(Arrays.asList(pickupDeliveryRoute), Collections.<Job>emptyList());
-        Delivery s = mock(Delivery.class);
+        DeliveryJob s = mock(DeliveryJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 16).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(pickupDeliveryRoute, s, pickupDeliveryRoute.getVehicle(), null, 0.);
         DeliveryActivity newAct = new DeliveryActivity(s, "del", null, 0,
-                        newSize.invert(),
-                        TimeWindows.ANY_TIME.getTimeWindows());
+                newSize.invert(),
+                TimeWindows.ANY_TIME.getTimeWindows());
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickupDeliveryRoute.getStart(), newAct, pickupDeliveryRoute.getActivities().get(0), 0.);
 
@@ -452,15 +455,15 @@ public void whenPDRoute_newDeliveryShouldNotFitInBetweenStartAndAct1() {
     @Test
     public void whenPDRoute_newDeliveryShouldFitInBetweenAct1AndAct2() {
         stateManager.informInsertionStarts(Arrays.asList(pickupDeliveryRoute), Collections.<Job>emptyList());
-        Delivery s = mock(Delivery.class);
+        DeliveryJob s = mock(DeliveryJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 5).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(pickupDeliveryRoute, s, pickupDeliveryRoute.getVehicle(), null, 0.);
         DeliveryActivity newAct = new DeliveryActivity(s, "del", null, 0,
-                        newSize.invert(),
-                        TimeWindows.ANY_TIME.getTimeWindows());
+                newSize.invert(),
+                TimeWindows.ANY_TIME.getTimeWindows());
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickupDeliveryRoute.getActivities().get(0), newAct, pickupDeliveryRoute.getActivities().get(1), 0.);
 
@@ -470,15 +473,15 @@ public void whenPDRoute_newDeliveryShouldFitInBetweenAct1AndAct2() {
     @Test
     public void whenPDRoute_newDeliveryNotShouldFitInBetweenAct1AndAct2() {
         stateManager.informInsertionStarts(Arrays.asList(pickupDeliveryRoute), Collections.<Job>emptyList());
-        Delivery s = mock(Delivery.class);
+        DeliveryJob s = mock(DeliveryJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 6).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(pickupDeliveryRoute, s, pickupDeliveryRoute.getVehicle(), null, 0.);
         DeliveryActivity newAct = new DeliveryActivity(s, "del", null, 0,
-                        newSize.invert(),
-                        TimeWindows.ANY_TIME.getTimeWindows());
+                newSize.invert(),
+                TimeWindows.ANY_TIME.getTimeWindows());
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickupDeliveryRoute.getActivities().get(0), newAct, pickupDeliveryRoute.getActivities().get(1), 0.);
 
@@ -488,15 +491,15 @@ public void whenPDRoute_newDeliveryNotShouldFitInBetweenAct1AndAct2() {
     @Test
     public void whenPDRoute_newDeliveryShouldFitInBetweenAct2AndEnd() {
         stateManager.informInsertionStarts(Arrays.asList(pickupDeliveryRoute), Collections.<Job>emptyList());
-        Delivery s = mock(Delivery.class);
+        DeliveryJob s = mock(DeliveryJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 5).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(pickupDeliveryRoute, s, pickupDeliveryRoute.getVehicle(), null, 0.);
         DeliveryActivity newAct = new DeliveryActivity(s, "del", null, 0,
-                        newSize.invert(),
-                        TimeWindows.ANY_TIME.getTimeWindows());
+                newSize.invert(),
+                TimeWindows.ANY_TIME.getTimeWindows());
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickupDeliveryRoute.getActivities().get(1), newAct, pickupDeliveryRoute.getEnd(), 0.);
 
@@ -506,15 +509,15 @@ public void whenPDRoute_newDeliveryShouldFitInBetweenAct2AndEnd() {
     @Test
     public void whenPDRoute_newDeliveryShouldNotFitInBetweenAct2AndEnd() {
         stateManager.informInsertionStarts(Arrays.asList(pickupDeliveryRoute), Collections.<Job>emptyList());
-        Delivery s = mock(Delivery.class);
+        DeliveryJob s = mock(DeliveryJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 6).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(pickupDeliveryRoute, s, pickupDeliveryRoute.getVehicle(), null, 0.);
         DeliveryActivity newAct = new DeliveryActivity(s, "del", null, 0,
-                        newSize.invert(),
-                        TimeWindows.ANY_TIME.getTimeWindows());
+                newSize.invert(),
+                TimeWindows.ANY_TIME.getTimeWindows());
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickupDeliveryRoute.getActivities().get(1), newAct, pickupDeliveryRoute.getEnd(), 0.);
 
@@ -524,7 +527,7 @@ public void whenPDRoute_newDeliveryShouldNotFitInBetweenAct2AndEnd() {
     @Test
     public void whenPDRouteAndNewServiceFitsInBetweenAc1AndAct2_itShouldReturnFulfilled() {
         stateManager.informInsertionStarts(Arrays.asList(pickupDeliveryRoute), Collections.<Job>emptyList());
-        Service s = mock(Service.class);
+        ServiceJob s = mock(ServiceJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 5).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
@@ -541,7 +544,7 @@ public void whenPDRouteAndNewServiceFitsInBetweenAc1AndAct2_itShouldReturnFulfil
     @Test
     public void whenPDRouteAndNewServiceFitsInBetweenAc2AndEnd_itShouldReturnFulfilled() {
         stateManager.informInsertionStarts(Arrays.asList(pickupDeliveryRoute), Collections.<Job>emptyList());
-        Service s = mock(Service.class);
+        ServiceJob s = mock(ServiceJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 5).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
@@ -561,7 +564,7 @@ public void whenPDRouteAndNewServiceFitsInBetweenAc2AndEnd_itShouldReturnFulfill
     @Test
     public void whenPDRouteAndNewServiceDoesNotFitInBetweenStartAndAct1_itShouldReturnFulfilled() {
         stateManager.informInsertionStarts(Arrays.asList(serviceRoute), Collections.<Job>emptyList());
-        Service s = mock(Service.class);
+        ServiceJob s = mock(ServiceJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 6).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
@@ -578,7 +581,7 @@ public void whenPDRouteAndNewServiceDoesNotFitInBetweenStartAndAct1_itShouldRetu
     @Test
     public void whenPDRouteAndNewServiceDoesNotFitInBetweenAc1AndAct2_itShouldReturnFulfilled() {
         stateManager.informInsertionStarts(Arrays.asList(pickupDeliveryRoute), Collections.<Job>emptyList());
-        Service s = mock(Service.class);
+        ServiceJob s = mock(ServiceJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 6).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
@@ -595,7 +598,7 @@ public void whenPDRouteAndNewServiceDoesNotFitInBetweenAc1AndAct2_itShouldReturn
     @Test
     public void whenPDRouteAndNewServiceDoesNotFitInBetweenAc2AndEnd_itShouldReturnFulfilled() {
         stateManager.informInsertionStarts(Arrays.asList(serviceRoute), Collections.<Job>emptyList());
-        Service s = mock(Service.class);
+        ServiceJob s = mock(ServiceJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 6).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
@@ -613,7 +616,8 @@ public void whenPDRouteAndNewServiceDoesNotFitInBetweenAc2AndEnd_itShouldReturnF
     @Test
     public void whenPDRouteAndNewServiceDoesNotFitIn_itShouldReturnFulfilled() {
         stateManager.informInsertionStarts(Arrays.asList(serviceRoute), Collections.<Job>emptyList());
-        Service s = Service.Builder.newInstance("service").addSizeDimension(0, 6).setLocation(Location.newInstance(0)).build();
+        ServiceJob s = new ServiceJob.Builder("service").addSizeDimension(0, 6).setLocation(Location.newInstance(0))
+                .build();
         ServiceLoadRouteLevelConstraint loadConstraint = new ServiceLoadRouteLevelConstraint(stateManager);
         JobInsertionContext context = new JobInsertionContext(serviceRoute, s, serviceRoute.getVehicle(), null, 0.);
         assertFalse(loadConstraint.fulfilled(context));
@@ -630,14 +634,14 @@ public void whenPDRouteAndNewServiceDoesNotFitIn_itShouldReturnFulfilled() {
     @Test
     public void whenShipmentRouteAndPickupOfNewShipmentShouldFitInBetweenStartAndAct1() {
         stateManager.informInsertionStarts(Arrays.asList(shipmentRoute), Collections.<Job>emptyList());
-        Shipment s = mock(Shipment.class);
+        ShipmentJob s = mock(ShipmentJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 20).build();
 
 
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
 
         PickupActivity newAct = new PickupActivity(s, "pick", null, 0, newSize,
-                        TimeWindows.ANY_TIME.getTimeWindows());
+                TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipmentRoute.getStart(), newAct, shipmentRoute.getActivities().get(0), 0.);
 
@@ -648,14 +652,14 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldFitInBetweenStartAndAct
     @Test
     public void whenShipmentRouteAndPickupOfNewShipmentShouldNotFitInBetweenStartAndAct1() {
         stateManager.informInsertionStarts(Arrays.asList(shipmentRoute), Collections.<Job>emptyList());
-        Shipment s = mock(Shipment.class);
+        ShipmentJob s = mock(ShipmentJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 21).build();
 
 
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
 
         PickupActivity newAct = new PickupActivity(s, "pick", null, 0, newSize,
-                        TimeWindows.ANY_TIME.getTimeWindows());
+                TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipmentRoute.getStart(), newAct, shipmentRoute.getActivities().get(0), 0.);
 
@@ -666,14 +670,14 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldNotFitInBetweenStartAnd
     @Test
     public void whenShipmentRouteAndPickupOfNewShipmentShouldFitInBetweenAct1AndAct2() {
         stateManager.informInsertionStarts(Arrays.asList(shipmentRoute), Collections.<Job>emptyList());
-        Shipment s = mock(Shipment.class);
+        ShipmentJob s = mock(ShipmentJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 10).build();
 
 
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
 
         PickupActivity newAct = new PickupActivity(s, "pick", null, 0, newSize,
-                        TimeWindows.ANY_TIME.getTimeWindows());
+                TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipmentRoute.getActivities().get(0), newAct, shipmentRoute.getActivities().get(1), 0.);
 
@@ -684,14 +688,14 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldFitInBetweenAct1AndAct2
     @Test
     public void whenShipmentRouteAndPickupOfNewShipmentShouldNotFitInBetweenAct1AndAct2() {
         stateManager.informInsertionStarts(Arrays.asList(shipmentRoute), Collections.<Job>emptyList());
-        Shipment s = mock(Shipment.class);
+        ShipmentJob s = mock(ShipmentJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 11).build();
 
 
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
 
         PickupActivity newAct = new PickupActivity(s, "pick", null, 0, newSize,
-                        TimeWindows.ANY_TIME.getTimeWindows());
+                TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipmentRoute.getActivities().get(0), newAct, shipmentRoute.getActivities().get(1), 0.);
 
@@ -702,14 +706,14 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldNotFitInBetweenAct1AndA
     @Test
     public void whenShipmentRouteAndPickupOfNewShipmentShouldFitInBetweenAct2AndAct3() {
         stateManager.informInsertionStarts(Arrays.asList(shipmentRoute), Collections.<Job>emptyList());
-        Shipment s = mock(Shipment.class);
+        ShipmentJob s = mock(ShipmentJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 5).build();
 
 
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
 
         PickupActivity newAct = new PickupActivity(s, "pick", null, 0, newSize,
-                        TimeWindows.ANY_TIME.getTimeWindows());
+                TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipmentRoute.getActivities().get(1), newAct, shipmentRoute.getActivities().get(2), 0.);
 
@@ -720,14 +724,14 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldFitInBetweenAct2AndAct3
     @Test
     public void whenShipmentRouteAndPickupOfNewShipmentShouldNotFitInBetweenAct2AndAct3() {
         stateManager.informInsertionStarts(Arrays.asList(shipmentRoute), Collections.<Job>emptyList());
-        Shipment s = mock(Shipment.class);
+        ShipmentJob s = mock(ShipmentJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 6).build();
 
 
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
 
         PickupActivity newAct = new PickupActivity(s, "pick", null, 0, newSize,
-                        TimeWindows.ANY_TIME.getTimeWindows());
+                TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipmentRoute.getActivities().get(1), newAct, shipmentRoute.getActivities().get(2), 0.);
 
@@ -738,14 +742,14 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldNotFitInBetweenAct2AndA
     @Test
     public void whenShipmentRouteAndPickupOfNewShipmentShouldFitInBetweenAct3AndAct4() {
         stateManager.informInsertionStarts(Arrays.asList(shipmentRoute), Collections.<Job>emptyList());
-        Shipment s = mock(Shipment.class);
+        ShipmentJob s = mock(ShipmentJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 10).build();
 
 
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
 
         PickupActivity newAct = new PickupActivity(s, "pick", null, 0, newSize,
-                        TimeWindows.ANY_TIME.getTimeWindows());
+                TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipmentRoute.getActivities().get(2), newAct, shipmentRoute.getActivities().get(3), 0.);
 
@@ -756,14 +760,14 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldFitInBetweenAct3AndAct4
     @Test
     public void whenShipmentRouteAndPickupOfNewShipmentShouldNotFitInBetweenAct3AndAct4() {
         stateManager.informInsertionStarts(Arrays.asList(shipmentRoute), Collections.<Job>emptyList());
-        Shipment s = mock(Shipment.class);
+        ShipmentJob s = mock(ShipmentJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 11).build();
 
 
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
 
         PickupActivity newAct = new PickupActivity(s, "pick", null, 0, newSize,
-                        TimeWindows.ANY_TIME.getTimeWindows());
+                TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipmentRoute.getActivities().get(2), newAct, shipmentRoute.getActivities().get(3), 0.);
 
@@ -774,14 +778,14 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldNotFitInBetweenAct3AndA
     @Test
     public void whenShipmentRouteAndPickupOfNewShipmentShouldFitInBetweenAct4AndEnd() {
         stateManager.informInsertionStarts(Arrays.asList(shipmentRoute), Collections.<Job>emptyList());
-        Shipment s = mock(Shipment.class);
+        ShipmentJob s = mock(ShipmentJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 20).build();
 
 
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
 
         PickupActivity newAct = new PickupActivity(s, "pick", null, 0, newSize,
-                        TimeWindows.ANY_TIME.getTimeWindows());
+                TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipmentRoute.getActivities().get(3), newAct, shipmentRoute.getEnd(), 0.);
 
@@ -792,14 +796,14 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldFitInBetweenAct4AndEnd(
     @Test
     public void whenShipmentRouteAndPickupOfNewShipmentShouldNotFitInBetweenAct4AndEnd() {
         stateManager.informInsertionStarts(Arrays.asList(shipmentRoute), Collections.<Job>emptyList());
-        Shipment s = mock(Shipment.class);
+        ShipmentJob s = mock(ShipmentJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 21).build();
 
 
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
 
         PickupActivity newAct = new PickupActivity(s, "pick", null, 0, newSize,
-                        TimeWindows.ANY_TIME.getTimeWindows());
+                TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipmentRoute.getActivities().get(3), newAct, shipmentRoute.getEnd(), 0.);
 
@@ -814,14 +818,14 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldNotFitInBetweenAct4AndE
     @Test
     public void whenShipmentRouteAndDeliveryOfNewShipmentShouldFitInBetweenStartAndAct1() {
         stateManager.informInsertionStarts(Arrays.asList(shipmentRoute), Collections.<Job>emptyList());
-        Shipment s = mock(Shipment.class);
+        ShipmentJob s = mock(ShipmentJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 20).build();
 
 
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
 
         DeliveryActivity newAct = new DeliveryActivity(s, "pick", null, 0,
-                        newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
+                newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipmentRoute.getStart(), newAct, shipmentRoute.getActivities().get(0), 0.);
 
@@ -832,14 +836,14 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldFitInBetweenStartAndA
     @Test
     public void whenShipmentRouteAndDeliveryOfNewShipmentShouldNotFitInBetweenStartAndAct1() {
         stateManager.informInsertionStarts(Arrays.asList(shipmentRoute), Collections.<Job>emptyList());
-        Shipment s = mock(Shipment.class);
+        ShipmentJob s = mock(ShipmentJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 21).build();
 
 
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
 
         DeliveryActivity newAct = new DeliveryActivity(s, "pick", null, 0,
-                        newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
+                newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipmentRoute.getStart(), newAct, shipmentRoute.getActivities().get(0), 0.);
 
@@ -850,14 +854,14 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldNotFitInBetweenStartA
     @Test
     public void whenShipmentRouteAndDeliveryOfNewShipmentShouldFitInBetweenAct1AndAct2() {
         stateManager.informInsertionStarts(Arrays.asList(shipmentRoute), Collections.<Job>emptyList());
-        Shipment s = mock(Shipment.class);
+        ShipmentJob s = mock(ShipmentJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 10).build();
 
 
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
 
         DeliveryActivity newAct = new DeliveryActivity(s, "pick", null, 0,
-                        newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
+                newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipmentRoute.getActivities().get(0), newAct, shipmentRoute.getActivities().get(1), 0.);
 
@@ -868,14 +872,14 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldFitInBetweenAct1AndAc
     @Test
     public void whenShipmentRouteAndDeliveryOfNewShipmentShouldNotFitInBetweenAct1AndAct2() {
         stateManager.informInsertionStarts(Arrays.asList(shipmentRoute), Collections.<Job>emptyList());
-        Shipment s = mock(Shipment.class);
+        ShipmentJob s = mock(ShipmentJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 11).build();
 
 
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
 
         DeliveryActivity newAct = new DeliveryActivity(s, "pick", null, 0,
-                        newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
+                newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipmentRoute.getActivities().get(0), newAct, shipmentRoute.getActivities().get(1), 0.);
 
@@ -886,14 +890,14 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldNotFitInBetweenAct1An
     @Test
     public void whenShipmentRouteAndDeliveryOfNewShipmentShouldFitInBetweenAct2AndAct3() {
         stateManager.informInsertionStarts(Arrays.asList(shipmentRoute), Collections.<Job>emptyList());
-        Shipment s = mock(Shipment.class);
+        ShipmentJob s = mock(ShipmentJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 5).build();
 
 
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
 
         DeliveryActivity newAct = new DeliveryActivity(s, "pick", null, 0,
-                        newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
+                newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipmentRoute.getActivities().get(1), newAct, shipmentRoute.getActivities().get(2), 0.);
 
@@ -904,14 +908,14 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldFitInBetweenAct2AndAc
     @Test
     public void whenShipmentRouteAndDeliveryOfNewShipmentShouldNotFitInBetweenAct2AndAct3() {
         stateManager.informInsertionStarts(Arrays.asList(shipmentRoute), Collections.<Job>emptyList());
-        Shipment s = mock(Shipment.class);
+        ShipmentJob s = mock(ShipmentJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 6).build();
 
 
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
 
         DeliveryActivity newAct = new DeliveryActivity(s, "pick", null, 0,
-                        newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
+                newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipmentRoute.getActivities().get(1), newAct, shipmentRoute.getActivities().get(2), 0.);
 
@@ -922,14 +926,14 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldNotFitInBetweenAct2An
     @Test
     public void whenShipmentRouteAndDeliveryOfNewShipmentShouldFitInBetweenAct3AndAct4() {
         stateManager.informInsertionStarts(Arrays.asList(shipmentRoute), Collections.<Job>emptyList());
-        Shipment s = mock(Shipment.class);
+        ShipmentJob s = mock(ShipmentJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 10).build();
 
 
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
 
         DeliveryActivity newAct = new DeliveryActivity(s, "pick", null, 0,
-                        newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
+                newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipmentRoute.getActivities().get(2), newAct, shipmentRoute.getActivities().get(3), 0.);
 
@@ -940,14 +944,14 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldFitInBetweenAct3AndAc
     @Test
     public void whenShipmentRouteAndDeliveryOfNewShipmentShouldNotFitInBetweenAct3AndAct4() {
         stateManager.informInsertionStarts(Arrays.asList(shipmentRoute), Collections.<Job>emptyList());
-        Shipment s = mock(Shipment.class);
+        ShipmentJob s = mock(ShipmentJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 11).build();
 
 
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
 
         DeliveryActivity newAct = new DeliveryActivity(s, "pick", null, 0,
-                        newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
+                newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipmentRoute.getActivities().get(2), newAct, shipmentRoute.getActivities().get(3), 0.);
 
@@ -958,14 +962,14 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldNotFitInBetweenAct3An
     @Test
     public void whenShipmentRouteAndDeliveryOfNewShipmentShouldFitInBetweenAct4AndEnd() {
         stateManager.informInsertionStarts(Arrays.asList(shipmentRoute), Collections.<Job>emptyList());
-        Shipment s = mock(Shipment.class);
+        ShipmentJob s = mock(ShipmentJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 20).build();
 
 
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
 
         DeliveryActivity newAct = new DeliveryActivity(s, "pick", null, 0,
-                        newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
+                newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipmentRoute.getActivities().get(3), newAct, shipmentRoute.getEnd(), 0.);
 
@@ -976,13 +980,13 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldFitInBetweenAct4AndEn
     @Test
     public void whenShipmentRouteAndDeliveryOfNewShipmentShouldNotFitInBetweenAct4AndEnd() {
         stateManager.informInsertionStarts(Arrays.asList(shipmentRoute), Collections.<Job>emptyList());
-        Shipment s = mock(Shipment.class);
+        ShipmentJob s = mock(ShipmentJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 21).build();
 
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
 
         DeliveryActivity newAct = new DeliveryActivity(s, "pick", null, 0,
-                        newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
+                newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipmentRoute.getActivities().get(3), newAct, shipmentRoute.getEnd(), 0.);
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadRouteLevelConstraintTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadRouteLevelConstraintTest.java
index 4a893bd67..aff3dd424 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadRouteLevelConstraintTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadRouteLevelConstraintTest.java
@@ -32,9 +32,9 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.job.Delivery;
-import com.graphhopper.jsprit.core.problem.job.Pickup;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.DeliveryJob;
+import com.graphhopper.jsprit.core.problem.job.PickupJob;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.state.RouteAndActivityStateGetter;
@@ -80,8 +80,8 @@ public void doBefore() {
 
     @Test
     public void whenLoadPlusDeliverySizeDoesNotExceedsVehicleCapacity_itShouldReturnTrue() {
-        Delivery service = Delivery.Builder.newInstance("del").setLocation(l())
-                        .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 1).addDimension(2, 1).build()).build();
+        DeliveryJob service = new DeliveryJob.Builder("del").setLocation(l())
+                .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 1).addDimension(2, 1).build()).build();
         JobInsertionContext iContext = mock(JobInsertionContext.class);
         when(iContext.getJob()).thenReturn(service);
         when(iContext.getRoute()).thenReturn(route);
@@ -92,8 +92,8 @@ public void whenLoadPlusDeliverySizeDoesNotExceedsVehicleCapacity_itShouldReturn
 
     @Test
     public void whenLoadPlusDeliverySizeExceedsVehicleCapacityInAllDimension_itShouldReturnFalse() {
-        Delivery service = Delivery.Builder.newInstance("d").setLocation(l())
-                        .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 3).addDimension(1, 3).addDimension(2, 3).build()).build();
+        DeliveryJob service = new DeliveryJob.Builder("d").setLocation(l())
+                .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 3).addDimension(1, 3).addDimension(2, 3).build()).build();
         JobInsertionContext iContext = mock(JobInsertionContext.class);
         when(iContext.getJob()).thenReturn(service);
         when(iContext.getRoute()).thenReturn(route);
@@ -104,8 +104,8 @@ public void whenLoadPlusDeliverySizeExceedsVehicleCapacityInAllDimension_itShoul
 
     @Test
     public void whenLoadPlusDeliverySizeExceedsVehicleCapacityInOneDimension_itShouldReturnFalse() {
-        Delivery service = Delivery.Builder.newInstance("d").setLocation(l())
-                        .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 1).addDimension(2, 3).build()).build();
+        DeliveryJob service = new DeliveryJob.Builder("d").setLocation(l())
+                .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 1).addDimension(2, 3).build()).build();
 
         JobInsertionContext iContext = mock(JobInsertionContext.class);
         when(iContext.getJob()).thenReturn(service);
@@ -117,8 +117,8 @@ public void whenLoadPlusDeliverySizeExceedsVehicleCapacityInOneDimension_itShoul
 
     @Test
     public void whenLoadPlusDeliverySizeJustFitIntoVehicle_itShouldReturnTrue() {
-        Delivery service = Delivery.Builder.newInstance("d").setLocation(l())
-                        .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 2).addDimension(1, 2).addDimension(2, 2).build()).build();
+        DeliveryJob service = new DeliveryJob.Builder("d").setLocation(l())
+                .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 2).addDimension(1, 2).addDimension(2, 2).build()).build();
         JobInsertionContext iContext = mock(JobInsertionContext.class);
         when(iContext.getJob()).thenReturn(service);
         when(iContext.getRoute()).thenReturn(route);
@@ -129,8 +129,8 @@ public void whenLoadPlusDeliverySizeJustFitIntoVehicle_itShouldReturnTrue() {
 
     @Test
     public void whenLoadPlusPickupSizeDoesNotExceedsVehicleCapacity_itShouldReturnTrue() {
-        Pickup service = Pickup.Builder.newInstance("p").setLocation(l())
-                        .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 1).addDimension(2, 1).build()).build();
+        PickupJob service = new PickupJob.Builder("p").setLocation(l())
+                .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 1).addDimension(2, 1).build()).build();
 
         JobInsertionContext iContext = mock(JobInsertionContext.class);
         when(iContext.getJob()).thenReturn(service);
@@ -142,8 +142,8 @@ public void whenLoadPlusPickupSizeDoesNotExceedsVehicleCapacity_itShouldReturnTr
 
     @Test
     public void whenLoadPlusPickupSizeExceedsVehicleCapacityInAllDimension_itShouldReturnFalse() {
-        Pickup service = Pickup.Builder.newInstance("p").setLocation(l())
-                        .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 3).addDimension(1, 3).addDimension(2, 3).build()).build();
+        PickupJob service = new PickupJob.Builder("p").setLocation(l())
+                .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 3).addDimension(1, 3).addDimension(2, 3).build()).build();
         JobInsertionContext iContext = mock(JobInsertionContext.class);
         when(iContext.getJob()).thenReturn(service);
         when(iContext.getRoute()).thenReturn(route);
@@ -154,8 +154,8 @@ public void whenLoadPlusPickupSizeExceedsVehicleCapacityInAllDimension_itShouldR
 
     @Test
     public void whenLoadPlusPickupSizeExceedsVehicleCapacityInOneDimension_itShouldReturnFalse() {
-        Pickup service = Pickup.Builder.newInstance("p").setLocation(l())
-                        .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 1).addDimension(2, 3).build()).build();
+        PickupJob service = new PickupJob.Builder("p").setLocation(l())
+                .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 1).addDimension(2, 3).build()).build();
 
         JobInsertionContext iContext = mock(JobInsertionContext.class);
         when(iContext.getJob()).thenReturn(service);
@@ -167,8 +167,8 @@ public void whenLoadPlusPickupSizeExceedsVehicleCapacityInOneDimension_itShouldR
 
     @Test
     public void whenLoadPlusPickupSizeJustFitIntoVehicle_itShouldReturnTrue() {
-        Pickup service = Pickup.Builder.newInstance("p").setLocation(l())
-                        .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 2).addDimension(1, 2).addDimension(2, 2).build()).build();
+        PickupJob service = new PickupJob.Builder("p").setLocation(l())
+                .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 2).addDimension(1, 2).addDimension(2, 2).build()).build();
 
         JobInsertionContext iContext = mock(JobInsertionContext.class);
         when(iContext.getJob()).thenReturn(service);
@@ -180,8 +180,8 @@ public void whenLoadPlusPickupSizeJustFitIntoVehicle_itShouldReturnTrue() {
 
     @Test
     public void whenLoadPlusServiceSizeDoesNotExceedsVehicleCapacity_itShouldReturnTrue() {
-        Service service = Service.Builder.newInstance("s").setLocation(l())
-                        .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 1).addDimension(2, 1).build()).build();
+        ServiceJob service = new ServiceJob.Builder("s").setLocation(l())
+                .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 1).addDimension(2, 1).build()).build();
         JobInsertionContext iContext = mock(JobInsertionContext.class);
         when(iContext.getJob()).thenReturn(service);
         when(iContext.getRoute()).thenReturn(route);
@@ -196,8 +196,8 @@ private Location l() {
 
     @Test
     public void whenLoadPlusServiceSizeExceedsVehicleCapacityInAllDimension_itShouldReturnFalse() {
-        Service service = Service.Builder.newInstance("s").setLocation(l())
-                        .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 3).addDimension(1, 3).addDimension(2, 3).build()).build();
+        ServiceJob service = new ServiceJob.Builder("s").setLocation(l())
+                .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 3).addDimension(1, 3).addDimension(2, 3).build()).build();
 
         JobInsertionContext iContext = mock(JobInsertionContext.class);
         when(iContext.getJob()).thenReturn(service);
@@ -209,8 +209,8 @@ public void whenLoadPlusServiceSizeExceedsVehicleCapacityInAllDimension_itShould
 
     @Test
     public void whenLoadPlusServiceSizeExceedsVehicleCapacityInOneDimension_itShouldReturnFalse() {
-        Service service = Service.Builder.newInstance("s").setLocation(l())
-                        .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 1).addDimension(2, 3).build()).build();
+        ServiceJob service = new ServiceJob.Builder("s").setLocation(l())
+                .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 1).addDimension(2, 3).build()).build();
         JobInsertionContext iContext = mock(JobInsertionContext.class);
         when(iContext.getJob()).thenReturn(service);
         when(iContext.getRoute()).thenReturn(route);
@@ -221,8 +221,8 @@ public void whenLoadPlusServiceSizeExceedsVehicleCapacityInOneDimension_itShould
 
     @Test
     public void whenLoadPlusServiceSizeJustFitIntoVehicle_itShouldReturnTrue() {
-        Service service = Service.Builder.newInstance("s").setLocation(Location.newInstance(0))
-                        .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 2).addDimension(1, 2).addDimension(2, 2).build()).build();
+        ServiceJob service = new ServiceJob.Builder("s").setLocation(Location.newInstance(0))
+                .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 2).addDimension(1, 2).addDimension(2, 2).build()).build();
 
         JobInsertionContext iContext = mock(JobInsertionContext.class);
         when(iContext.getJob()).thenReturn(service);
@@ -234,7 +234,7 @@ public void whenLoadPlusServiceSizeJustFitIntoVehicle_itShouldReturnTrue() {
 
     @Test
     public void whenAddingAServiceAndNewVehicleDoesNotHaveTheCapacity_itShouldReturnFalse() {
-        Service service = mock(Service.class);
+        ServiceJob service = mock(ServiceJob.class);
         when(service.getSize()).thenReturn(SizeDimension.Builder.newInstance().addDimension(0, 2).build());
 
         SizeDimension atBeginning = SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 2).addDimension(2, 1).build();
@@ -262,7 +262,7 @@ public void whenAddingAServiceAndNewVehicleDoesNotHaveTheCapacity_itShouldReturn
 
     @Test
     public void whenAddingADeliveryAndNewVehicleDoesNotHaveTheCapacity_itShouldReturnFalse() {
-        Delivery service = mock(Delivery.class);
+        DeliveryJob service = mock(DeliveryJob.class);
         when(service.getSize()).thenReturn(SizeDimension.Builder.newInstance().addDimension(0, 2).build());
 
         SizeDimension atBeginning = SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 2).addDimension(2, 1).build();
@@ -290,7 +290,7 @@ public void whenAddingADeliveryAndNewVehicleDoesNotHaveTheCapacity_itShouldRetur
 
     @Test
     public void whenAddingAPickupAndNewVehicleDoesNotHaveTheCapacity_itShouldReturnFalse() {
-        Pickup service = mock(Pickup.class);
+        PickupJob service = mock(PickupJob.class);
         when(service.getSize()).thenReturn(SizeDimension.Builder.newInstance().addDimension(0, 2).build());
 
         SizeDimension atBeginning = SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 2).addDimension(2, 1).build();
@@ -318,8 +318,8 @@ public void whenAddingAPickupAndNewVehicleDoesNotHaveTheCapacity_itShouldReturnF
 
     @Test
     public void whenNewVehicleCapacityIsNotSufficiant1_returnFalse() {
-        final Pickup pickup = createPickup("pick", 2);
-        final Pickup pickup2 = createPickup("pick2", 3);
+        final PickupJob pickup = createPickup("pick", 2);
+        final PickupJob pickup2 = createPickup("pick2", 3);
 
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0, 3).build();
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance("loc")).build();
@@ -335,8 +335,8 @@ public void whenNewVehicleCapacityIsNotSufficiant1_returnFalse() {
 
     @Test
     public void whenNewVehicleCapacityIsNotSufficiant2_returnFalse() {
-        Pickup service = createPickup("pick", 2);
-        Pickup serviceInRoute = createPickup("pick1", 3);
+        PickupJob service = createPickup("pick", 2);
+        PickupJob serviceInRoute = createPickup("pick1", 3);
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0, 3).build();
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance("loc")).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addVehicle(vehicle).addJob(service).addJob(serviceInRoute).build();
@@ -348,8 +348,8 @@ public void whenNewVehicleCapacityIsNotSufficiant2_returnFalse() {
     }
 
 
-    private Pickup createPickup(String string, int i) {
-        return new Pickup.Builder(string).addSizeDimension(0, i).setLocation(Location.newInstance("loc")).build();
+    private PickupJob createPickup(String string, int i) {
+        return new PickupJob.Builder(string).addSizeDimension(0, i).setLocation(Location.newInstance("loc")).build();
     }
 
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/SkillConstraintTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/SkillConstraintTest.java
index a072afc88..c54e9165e 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/SkillConstraintTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/SkillConstraintTest.java
@@ -29,7 +29,7 @@
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
@@ -55,11 +55,11 @@ public void doBefore() {
         vehicle = VehicleImpl.Builder.newInstance("v").addSkill("skill1").addSkill("skill2").addSkill("skill3").addSkill("skill4").setStartLocation(Location.newInstance("start")).setType(type).build();
         vehicle2 = VehicleImpl.Builder.newInstance("v2").addSkill("skill4").addSkill("skill5").setStartLocation(Location.newInstance("start")).setType(type).build();
 
-        Service service = new Service.Builder("s").setLocation(Location.newInstance("loc")).addRequiredSkill("skill1").build();
-        Service service2 = new Service.Builder("s2").setLocation(Location.newInstance("loc")).addRequiredSkill("skill1").addRequiredSkill("skill2").addRequiredSkill("skill3").build();
+        ServiceJob service = new ServiceJob.Builder("s").setLocation(Location.newInstance("loc")).addRequiredSkill("skill1").build();
+        ServiceJob service2 = new ServiceJob.Builder("s2").setLocation(Location.newInstance("loc")).addRequiredSkill("skill1").addRequiredSkill("skill2").addRequiredSkill("skill3").build();
 
-        Service service3 = new Service.Builder("s3").setLocation(Location.newInstance("loc")).addRequiredSkill("skill4").addRequiredSkill("skill5").build();
-        Service service4 = new Service.Builder("s4").setLocation(Location.newInstance("loc")).addRequiredSkill("skill1").build();
+        ServiceJob service3 = new ServiceJob.Builder("s3").setLocation(Location.newInstance("loc")).addRequiredSkill("skill4").addRequiredSkill("skill5").build();
+        ServiceJob service4 = new ServiceJob.Builder("s4").setLocation(Location.newInstance("loc")).addRequiredSkill("skill1").build();
 
         vrp = VehicleRoutingProblem.Builder.newInstance().addVehicle(vehicle).addVehicle(vehicle2).addJob(service)
             .addJob(service2).addJob(service3).addJob(service4).build();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowTest.java
index 5aa32795c..dc518b137 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowTest.java
@@ -43,7 +43,7 @@
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.cost.WaitingTimeCosts;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
@@ -107,9 +107,9 @@ public void doBefore() {
 
         vrpBuilder.addVehicle(vehicle).addVehicle(v2).addVehicle(v3).addVehicle(v4).addVehicle(v5).addVehicle(v6);
 
-        Service service = new Service.Builder("s1").setLocation(Location.newInstance("10,0")).build();
-        Service service2 = new Service.Builder("s2").setLocation(Location.newInstance("20,0")).build();
-        Service service3 = new Service.Builder("s3").setLocation(Location.newInstance("30,0")).build();
+        ServiceJob service = new ServiceJob.Builder("s1").setLocation(Location.newInstance("10,0")).build();
+        ServiceJob service2 = new ServiceJob.Builder("s2").setLocation(Location.newInstance("20,0")).build();
+        ServiceJob service3 = new ServiceJob.Builder("s3").setLocation(Location.newInstance("30,0")).build();
 
         vrpBuilder.addJob(service).addJob(service2).addJob(service3);
         final VehicleRoutingProblem vrp = vrpBuilder.build();
@@ -167,7 +167,7 @@ public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct1() {
     @Test
     public void whenNewJobIsInsertedWithOldVeh_itJustShouldReturnTrue() {
 
-        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("50,0")).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").setLocation(Location.newInstance("50,0")).build();
         JobActivity serviceAct = s4.getActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, vehicle, route.getDriver(), 0.);
@@ -182,7 +182,7 @@ public void whenNewJobIsInsertedWithOldVeh_itJustShouldReturnTrue() {
     @Test
     public void whenNewJobIsInsertedWithOldVeh_itJustShouldReturnFalse() {
 
-        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("1000,0")).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").setLocation(Location.newInstance("1000,0")).build();
         JobActivity serviceAct = s4.getActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, vehicle, route.getDriver(), 0.);
@@ -197,7 +197,7 @@ public void whenNewJobIsInsertedWithOldVeh_itJustShouldReturnFalse() {
     @Test
     public void whenNewJobIsInsertedInBetweenAct1And2WithOldVeh_itJustShouldReturnTrue() {
 
-        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("50,0")).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").setLocation(Location.newInstance("50,0")).build();
         JobActivity serviceAct = s4.getActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, vehicle, route.getDriver(), 0.);
@@ -215,7 +215,7 @@ public void whenNewJobIsInsertedInBetweenAct1And2WithOldVeh_itJustShouldReturnTr
     @Test
     public void whenNewJobIsInsertedInBetweenAct1And2WithOldVeh_itJustShouldReturnFalse() {
 
-        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("51,0")).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").setLocation(Location.newInstance("51,0")).build();
         JobActivity serviceAct = s4.getActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, vehicle, route.getDriver(), 0.);
@@ -236,7 +236,7 @@ public void whenJobIsInsertedAlongWithNewVehicleThatNeedsToBeHomeAt60_itShouldRe
 
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
-        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").setLocation(Location.newInstance("40,0")).build();
         JobActivity serviceAct = s4.getActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v2, route.getDriver(), 0.);
@@ -254,7 +254,7 @@ public void whenJobIsInsertedAlongWithNewVehicleThatNeedsToBeHomeAt50_itShouldRe
 
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
-        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").setLocation(Location.newInstance("40,0")).build();
         JobActivity serviceAct = s4.getActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v3, route.getDriver(), 0.);
@@ -271,7 +271,7 @@ public void whenJobIsInsertedAlongWithNewVehicleThatNeedsToBeHomeAt10_itShouldRe
 
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
-        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").setLocation(Location.newInstance("40,0")).build();
         JobActivity serviceAct = s4.getActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v4, route.getDriver(), 0.);
@@ -288,7 +288,7 @@ public void whenJobIsInsertedAlongWithV6BetweenS2AndS3_itShouldReturnFalse() {
 
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
-        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").setLocation(Location.newInstance("40,0")).build();
         JobActivity serviceAct = s4.getActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v6, route.getDriver(), 0.);
@@ -305,7 +305,7 @@ public void whenJobIsInsertedAlongWithV6BetweenS1AndS2_itShouldReturnFalse() {
 
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
-        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").setLocation(Location.newInstance("40,0")).build();
         JobActivity serviceAct = s4.getActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v6, route.getDriver(), 0.);
@@ -322,7 +322,7 @@ public void whenJobIsInsertedAlongWithV6AtTheEndOfRoute_itShouldReturnTrue() {
 
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
-        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").setLocation(Location.newInstance("40,0")).build();
         JobActivity serviceAct = s4.getActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v6, route.getDriver(), 0.);
@@ -337,7 +337,7 @@ public void whenJobIsInsertedAlongWithV6AtTheEndOfRoute_itShouldReturnTrue() {
     public void whenJobIsInsertedAlongWithNewVehicleThatCanOnlyStartAt60_itShouldReturnFalse() {
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
-        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").setLocation(Location.newInstance("40,0")).build();
         JobActivity serviceAct = s4.getActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v5, route.getDriver(), 60.);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowWithStartTimeAndMaxOperationTimeTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowWithStartTimeAndMaxOperationTimeTest.java
index 07893a964..aa9ac515a 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowWithStartTimeAndMaxOperationTimeTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowWithStartTimeAndMaxOperationTimeTest.java
@@ -43,7 +43,7 @@
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.cost.WaitingTimeCosts;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
@@ -105,9 +105,9 @@ public void doBefore() {
 
         vrpBuilder.addVehicle(vehicle).addVehicle(v2).addVehicle(v3).addVehicle(v4).addVehicle(v5).addVehicle(v6);
 
-        Service service = new Service.Builder("s1").setLocation(Location.newInstance("10,0")).build();
-        Service service2 = new Service.Builder("s2").setLocation(Location.newInstance("20,0")).build();
-        Service service3 = new Service.Builder("s3").setLocation(Location.newInstance("30,0")).build();
+        ServiceJob service = new ServiceJob.Builder("s1").setLocation(Location.newInstance("10,0")).build();
+        ServiceJob service2 = new ServiceJob.Builder("s2").setLocation(Location.newInstance("20,0")).build();
+        ServiceJob service3 = new ServiceJob.Builder("s3").setLocation(Location.newInstance("30,0")).build();
 
         vrpBuilder.addJob(service).addJob(service2).addJob(service3);
         final VehicleRoutingProblem vrp = vrpBuilder.build();
@@ -165,7 +165,7 @@ public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct1() {
     @Test
     public void whenNewJobIsInsertedWithOldVeh_itJustShouldReturnTrue() {
 
-        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("50,0")).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").setLocation(Location.newInstance("50,0")).build();
         JobActivity serviceAct = s4.getActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, vehicle, route.getDriver(), 0.);
@@ -180,7 +180,7 @@ public void whenNewJobIsInsertedWithOldVeh_itJustShouldReturnTrue() {
     @Test
     public void whenNewJobIsInsertedWithOldVeh_itJustShouldReturnFalse() {
 
-        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("1000,0")).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").setLocation(Location.newInstance("1000,0")).build();
         JobActivity serviceAct = s4.getActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, vehicle, route.getDriver(), 0.);
@@ -195,7 +195,7 @@ public void whenNewJobIsInsertedWithOldVeh_itJustShouldReturnFalse() {
     @Test
     public void whenNewJobIsInsertedInBetweenAct1And2WithOldVeh_itJustShouldReturnTrue() {
 
-        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("50,0")).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").setLocation(Location.newInstance("50,0")).build();
         JobActivity serviceAct = s4.getActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, vehicle, route.getDriver(), 0.);
@@ -213,7 +213,7 @@ public void whenNewJobIsInsertedInBetweenAct1And2WithOldVeh_itJustShouldReturnTr
     @Test
     public void whenNewJobIsInsertedInBetweenAct1And2WithOldVeh_itJustShouldReturnFalse() {
 
-        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("51,0")).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").setLocation(Location.newInstance("51,0")).build();
         JobActivity serviceAct = s4.getActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, vehicle, route.getDriver(), 0.);
@@ -234,7 +234,7 @@ public void whenJobIsInsertedAlongWithNewVehicleThatNeedsToBeHomeAt60_itShouldRe
 
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
-        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").setLocation(Location.newInstance("40,0")).build();
         JobActivity serviceAct = s4.getActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v2, route.getDriver(), 0.);
@@ -252,7 +252,7 @@ public void whenJobIsInsertedAlongWithNewVehicleThatNeedsToBeHomeAt50_itShouldRe
 
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
-        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").setLocation(Location.newInstance("40,0")).build();
         JobActivity serviceAct = s4.getActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v3, route.getDriver(), 0.);
@@ -269,7 +269,7 @@ public void whenJobIsInsertedAlongWithNewVehicleThatNeedsToBeHomeAt10_itShouldRe
 
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
-        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").setLocation(Location.newInstance("40,0")).build();
         JobActivity serviceAct = s4.getActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v4, route.getDriver(), 0.);
@@ -286,7 +286,7 @@ public void whenJobIsInsertedAlongWithV6BetweenS2AndS3_itShouldReturnFalse() {
 
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
-        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").setLocation(Location.newInstance("40,0")).build();
         JobActivity serviceAct = s4.getActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v6, route.getDriver(), 0.);
@@ -303,7 +303,7 @@ public void whenJobIsInsertedAlongWithV6BetweenS1AndS2_itShouldReturnFalse() {
 
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
-        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").setLocation(Location.newInstance("40,0")).build();
         JobActivity serviceAct = s4.getActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v6, route.getDriver(), 0.);
@@ -320,7 +320,7 @@ public void whenJobIsInsertedAlongWithV6AtTheEndOfRoute_itShouldReturnTrue() {
 
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
-        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").setLocation(Location.newInstance("40,0")).build();
         JobActivity serviceAct = s4.getActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v6, route.getDriver(), 0.);
@@ -335,7 +335,7 @@ public void whenJobIsInsertedAlongWithV6AtTheEndOfRoute_itShouldReturnTrue() {
     public void whenJobIsInsertedAlongWithNewVehicleThatCanOnlyStartAt60_itShouldReturnFalse() {
         assertEquals(60., route.getEnd().getArrTime(), 0.01);
 
-        Service s4 = new Service.Builder("s4").setLocation(Location.newInstance("40,0")).build();
+        ServiceJob s4 = new ServiceJob.Builder("s4").setLocation(Location.newInstance("40,0")).build();
         JobActivity serviceAct = s4.getActivity();
 
         JobInsertionContext insertionContext = new JobInsertionContext(route, s4, v5, route.getDriver(), 60.);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTraveledDistanceTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTraveledDistanceTest.java
index a1ed51458..5db8af407 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTraveledDistanceTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTraveledDistanceTest.java
@@ -19,15 +19,23 @@
 package com.graphhopper.jsprit.core.problem.constraint;
 
 
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Map;
+
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.state.StateId;
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.cost.TransportDistance;
-import com.graphhopper.jsprit.core.problem.job.Delivery;
+import com.graphhopper.jsprit.core.problem.job.DeliveryJob;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Pickup;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.PickupJob;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.problem.misc.ActivityContext;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
@@ -38,14 +46,6 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.util.ManhattanCosts;
 
-import org.junit.Assert;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.*;
-
-import static org.mockito.Mockito.mock;
-
 /**
  * Created by schroeder on 18/05/16.
  */
@@ -63,11 +63,11 @@
 
     VehicleRoutingProblem vrp;
 
-    Delivery d1,d2,newDelivery;
+    DeliveryJob d1,d2,newDelivery;
 
-    Pickup pickup;
+    PickupJob pickup;
 
-    Shipment s1;
+    ShipmentJob s1;
 
     Map<Vehicle,Double> maxDistanceMap;
 
@@ -81,32 +81,27 @@ public void doBefore(){
         maxDistanceMap.put(vehicle,200d);
         maxDistanceMap.put(vehicle2,200d);
 
-        d1 = Delivery.Builder.newInstance("d1").setLocation(Location.newInstance(10,10)).build();
-        d2 = Delivery.Builder.newInstance("d2").setLocation(Location.newInstance(20,15)).build();
-        pickup = Pickup.Builder.newInstance("pickup").setLocation(Location.newInstance(50,50)).build();
-        s1 = Shipment.Builder.newInstance("s1").setPickupLocation(Location.newInstance(35,30))
-            .setDeliveryLocation(Location.newInstance(20,25)).build();
+        d1 = new DeliveryJob.Builder("d1").setLocation(Location.newInstance(10, 10)).build();
+        d2 = new DeliveryJob.Builder("d2").setLocation(Location.newInstance(20, 15)).build();
+        pickup = new PickupJob.Builder("pickup").setLocation(Location.newInstance(50, 50)).build();
+        s1 = new ShipmentJob.Builder("s1").setPickupLocation(Location.newInstance(35,30))
+                .setDeliveryLocation(Location.newInstance(20,25)).build();
 
-        newDelivery = Delivery.Builder.newInstance("new").setLocation(Location.newInstance(-10,10)).build();
+        newDelivery = new DeliveryJob.Builder("new").setLocation(Location.newInstance(-10, 10)).build();
 
         vrp = VehicleRoutingProblem.Builder.newInstance()
-            .setRoutingCost(new ManhattanCosts()).addVehicle(vehicle).addVehicle(vehicle2)
-            .addJob(d1).addJob(d2).addJob(s1).addJob(pickup).addJob(newDelivery).build();
+                .setRoutingCost(new ManhattanCosts()).addVehicle(vehicle).addVehicle(vehicle2)
+                .addJob(d1).addJob(d2).addJob(s1).addJob(pickup).addJob(newDelivery).build();
 
         route = VehicleRoute.Builder.newInstance(vehicle).setJobActivityFactory(vrp.getJobActivityFactory())
-            .addDelivery(d1).addDelivery(d2).addPickup(s1).addPickup(pickup).addDelivery(s1).build();
+                .addDelivery(d1).addDelivery(d2).addPickup(s1).addPickup(pickup).addDelivery(s1).build();
 
         stateManager = new StateManager(vrp);
 
         traveledDistanceId = stateManager.createStateId("traveledDistance");
 
         com.graphhopper.jsprit.core.algorithm.state.VehicleDependentTraveledDistance traveledDistance =
-            new com.graphhopper.jsprit.core.algorithm.state.VehicleDependentTraveledDistance(new TransportDistance() {
-                @Override
-                public double getDistance(Location from, Location to, double departureTime, Vehicle vehicle) {
-                    return new ManhattanCosts().getDistance(from,to,departureTime,vehicle);
-                }
-        },stateManager,traveledDistanceId,Arrays.asList(vehicle,vehicle2));
+                new com.graphhopper.jsprit.core.algorithm.state.VehicleDependentTraveledDistance((from, to, departureTime, vehicle) -> new ManhattanCosts().getDistance(from,to,departureTime,vehicle),stateManager,traveledDistanceId,Arrays.asList(vehicle,vehicle2));
 
         stateManager.addStateUpdater(traveledDistance);
         stateManager.informInsertionStarts(Arrays.asList(route), Collections.<Job>emptyList());
@@ -115,24 +110,19 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
     @Test
     public void whenEndLocationIsSet_constraintShouldWork(){
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0,0))
-            .setEndLocation(Location.newInstance(10,0)).build();
-        Pickup pickup = Pickup.Builder.newInstance("pickup").setLocation(Location.newInstance(10,0)).build();
+                .setEndLocation(Location.newInstance(10,0)).build();
+        PickupJob pickup = new PickupJob.Builder("pickup").setLocation(Location.newInstance(10, 0)).build();
         vrp = VehicleRoutingProblem.Builder.newInstance().addVehicle(vehicle).addJob(pickup).build();
         route = VehicleRoute.emptyRoute();
         maxDistanceMap = new HashMap<>();
         maxDistanceMap.put(vehicle,5d);
 
         MaxDistanceConstraint maxDistanceConstraint =
-            new MaxDistanceConstraint(new StateManager(vrp), traveledDistanceId, new TransportDistance() {
-                @Override
-                public double getDistance(Location from, Location to, double departureTime, Vehicle vehicle) {
-                    return vrp.getTransportCosts().getTransportTime(from,to,departureTime, null, vehicle);
-                }
-            },maxDistanceMap);
+                new MaxDistanceConstraint(new StateManager(vrp), traveledDistanceId, (from, to, departureTime, vehicle1) -> vrp.getTransportCosts().getTransportTime(from,to,departureTime, null, vehicle1),maxDistanceMap);
         JobInsertionContext context = new JobInsertionContext(route,pickup,vehicle,null,0);
         Assert.assertTrue(maxDistanceConstraint.fulfilled(context,
-            new Start(vehicle.getStartLocation(),0,Double.MAX_VALUE),vrp.getActivities(pickup).get(0),
-            new End(vehicle.getEndLocation(),0,Double.MAX_VALUE),0).equals(HardActivityConstraint.ConstraintsStatus.NOT_FULFILLED));
+                new Start(vehicle.getStartLocation(),0,Double.MAX_VALUE),vrp.getActivities(pickup).get(0),
+                new End(vehicle.getEndLocation(),0,Double.MAX_VALUE),0).equals(HardActivityConstraint.ConstraintsStatus.NOT_FULFILLED));
     }
 
     /*
@@ -144,12 +134,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
     @Test
     public void insertNewInVehicleShouldFail(){
         MaxDistanceConstraint maxDistanceConstraint =
-            new MaxDistanceConstraint(stateManager, traveledDistanceId, new TransportDistance() {
-                @Override
-                public double getDistance(Location from, Location to, double departureTime, Vehicle vehicle) {
-                    return vrp.getTransportCosts().getTransportTime(from,to,departureTime, null, vehicle);
-                }
-            },maxDistanceMap);
+                new MaxDistanceConstraint(stateManager, traveledDistanceId, (from, to, departureTime, vehicle) -> vrp.getTransportCosts().getTransportTime(from,to,departureTime, null, vehicle),maxDistanceMap);
         JobInsertionContext context = new JobInsertionContext(route,newDelivery,vehicle,null,0);
         Assert.assertTrue(maxDistanceConstraint.fulfilled(context,route.getStart(),newAct(),act(0),0).equals(HardActivityConstraint.ConstraintsStatus.NOT_FULFILLED));
         Assert.assertTrue(maxDistanceConstraint.fulfilled(context,act(0),newAct(),act(1),0).equals(HardActivityConstraint.ConstraintsStatus.NOT_FULFILLED));
@@ -164,12 +149,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
     public void insertNewInVehicle2ShouldBeCorrect(){
         //current distance vehicle2: 160 allowed: 200
         MaxDistanceConstraint maxDistanceConstraint =
-            new MaxDistanceConstraint(stateManager, traveledDistanceId, new TransportDistance() {
-                @Override
-                public double getDistance(Location from, Location to, double departureTime, Vehicle vehicle) {
-                    return vrp.getTransportCosts().getTransportTime(from,to,departureTime, null, vehicle);
-                }
-            },maxDistanceMap);
+                new MaxDistanceConstraint(stateManager, traveledDistanceId, (from, to, departureTime, vehicle) -> vrp.getTransportCosts().getTransportTime(from,to,departureTime, null, vehicle),maxDistanceMap);
         JobInsertionContext context = new JobInsertionContext(route,newDelivery,vehicle2,null,0);
         Assert.assertTrue(maxDistanceConstraint.fulfilled(context,route.getStart(),newAct(),act(0),0).equals(HardActivityConstraint.ConstraintsStatus.FULFILLED));
         //additional distance: 20+35-15=40
@@ -264,17 +244,17 @@ public void distanceToTravelShouldBeCorrectVehicle2(){
 
     @Test
     public void whenAddingDeliverShipment_constraintShouldWork() {
-        Shipment shipment = Shipment.Builder.newInstance("s")
-            .setPickupLocation(Location.newInstance(0, 3))
-            .setDeliveryLocation(Location.newInstance(4, 0))
-            .build();
+        ShipmentJob shipment = new ShipmentJob.Builder("s")
+                .setPickupLocation(Location.newInstance(0, 3))
+                .setDeliveryLocation(Location.newInstance(4, 0))
+                .build();
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v")
-            .setStartLocation(Location.newInstance(0, 0))
-            .build();
+                .setStartLocation(Location.newInstance(0, 0))
+                .build();
         final VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance()
-            .addJob(shipment)
-            .addVehicle(vehicle)
-            .build();
+                .addJob(shipment)
+                .addVehicle(vehicle)
+                .build();
         VehicleRoute route = VehicleRoute.emptyRoute();
         JobInsertionContext context = new JobInsertionContext(route, shipment, vehicle, null, 0);
         context.getAssociatedActivities().add(vrp.getActivities(shipment).get(0));
@@ -284,17 +264,12 @@ public void whenAddingDeliverShipment_constraintShouldWork() {
 
         StateManager stateManager = new StateManager(vrp);
         MaxDistanceConstraint maxDistanceConstraint =
-            new MaxDistanceConstraint(stateManager, traveledDistanceId, new TransportDistance() {
-                @Override
-                public double getDistance(Location from, Location to, double departureTime, Vehicle vehicle) {
-                    return vrp.getTransportCosts().getTransportTime(from,to,departureTime, null, vehicle);
-                }
-            },maxDistanceMap);
+                new MaxDistanceConstraint(stateManager, traveledDistanceId, (from, to, departureTime, vehicle1) -> vrp.getTransportCosts().getTransportTime(from,to,departureTime, null, vehicle1),maxDistanceMap);
         Assert.assertTrue(maxDistanceConstraint.fulfilled(context,
-            new Start(vehicle.getStartLocation(), 0, Double.MAX_VALUE),
-            vrp.getActivities(shipment).get(0),
-            new End(vehicle.getEndLocation(), 0, Double.MAX_VALUE),
-            0).equals(HardActivityConstraint.ConstraintsStatus.FULFILLED));
+                new Start(vehicle.getStartLocation(), 0, Double.MAX_VALUE),
+                vrp.getActivities(shipment).get(0),
+                new End(vehicle.getEndLocation(), 0, Double.MAX_VALUE),
+                0).equals(HardActivityConstraint.ConstraintsStatus.FULFILLED));
 
         ActivityContext pickupContext = new ActivityContext();
         pickupContext.setArrivalTime(3);
@@ -302,26 +277,26 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
         pickupContext.setInsertionIndex(0);
         context.setRelatedActivityContext(pickupContext);
         Assert.assertTrue(maxDistanceConstraint.fulfilled(context,
-            vrp.getActivities(shipment).get(0),
-            vrp.getActivities(shipment).get(1),
-            new End(vehicle.getEndLocation(), 0, Double.MAX_VALUE),
-            3).equals(HardActivityConstraint.ConstraintsStatus.FULFILLED));
+                vrp.getActivities(shipment).get(0),
+                vrp.getActivities(shipment).get(1),
+                new End(vehicle.getEndLocation(), 0, Double.MAX_VALUE),
+                3).equals(HardActivityConstraint.ConstraintsStatus.FULFILLED));
     }
 
     @Test
     public void whenAddingDeliverShipmentWithVehDiffStartEndLocs_constraintShouldWork() {
-        Shipment shipment = Shipment.Builder.newInstance("s")
-            .setPickupLocation(Location.newInstance(0, 1))
-            .setDeliveryLocation(Location.newInstance(4, 1))
-            .build();
+        ShipmentJob shipment = new ShipmentJob.Builder("s")
+                .setPickupLocation(Location.newInstance(0, 1))
+                .setDeliveryLocation(Location.newInstance(4, 1))
+                .build();
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v")
-            .setStartLocation(Location.newInstance(0, 0))
-            .setEndLocation(Location.newInstance(0, 4))
-            .build();
+                .setStartLocation(Location.newInstance(0, 0))
+                .setEndLocation(Location.newInstance(0, 4))
+                .build();
         final VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance()
-            .addJob(shipment)
-            .addVehicle(vehicle)
-            .build();
+                .addJob(shipment)
+                .addVehicle(vehicle)
+                .build();
         VehicleRoute route = VehicleRoute.emptyRoute();
         JobInsertionContext context = new JobInsertionContext(route, shipment, vehicle, null, 0);
         context.getAssociatedActivities().add(vrp.getActivities(shipment).get(0));
@@ -331,17 +306,12 @@ public void whenAddingDeliverShipmentWithVehDiffStartEndLocs_constraintShouldWor
 
         StateManager stateManager = new StateManager(vrp);
         MaxDistanceConstraint maxDistanceConstraint =
-            new MaxDistanceConstraint(stateManager, traveledDistanceId, new TransportDistance() {
-                @Override
-                public double getDistance(Location from, Location to, double departureTime, Vehicle vehicle) {
-                    return vrp.getTransportCosts().getTransportTime(from,to,departureTime, null, vehicle);
-                }
-            },maxDistanceMap);
+                new MaxDistanceConstraint(stateManager, traveledDistanceId, (from, to, departureTime, vehicle1) -> vrp.getTransportCosts().getTransportTime(from,to,departureTime, null, vehicle1),maxDistanceMap);
         Assert.assertTrue(maxDistanceConstraint.fulfilled(context,
-            new Start(vehicle.getStartLocation(), 0, Double.MAX_VALUE),
-            vrp.getActivities(shipment).get(0),
-            new End(vehicle.getEndLocation(), 0, Double.MAX_VALUE),
-            0).equals(HardActivityConstraint.ConstraintsStatus.FULFILLED));
+                new Start(vehicle.getStartLocation(), 0, Double.MAX_VALUE),
+                vrp.getActivities(shipment).get(0),
+                new End(vehicle.getEndLocation(), 0, Double.MAX_VALUE),
+                0).equals(HardActivityConstraint.ConstraintsStatus.FULFILLED));
 
         ActivityContext pickupContext = new ActivityContext();
         pickupContext.setArrivalTime(1);
@@ -349,9 +319,9 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
         pickupContext.setInsertionIndex(0);
         context.setRelatedActivityContext(pickupContext);
         Assert.assertTrue(maxDistanceConstraint.fulfilled(context,
-            vrp.getActivities(shipment).get(0),
-            vrp.getActivities(shipment).get(1),
-            new End(vehicle.getEndLocation(), 0, Double.MAX_VALUE),
-            1).equals(HardActivityConstraint.ConstraintsStatus.FULFILLED));
+                vrp.getActivities(shipment).get(0),
+                vrp.getActivities(shipment).get(1),
+                new End(vehicle.getEndLocation(), 0, Double.MAX_VALUE),
+                1).equals(HardActivityConstraint.ConstraintsStatus.FULFILLED));
     }
 }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/DeliveryTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/DeliveryJobTest.java
similarity index 79%
rename from jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/DeliveryTest.java
rename to jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/DeliveryJobTest.java
index 1fc15d575..c21b48bee 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/DeliveryTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/DeliveryJobTest.java
@@ -26,16 +26,16 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.SizeDimension;
 
-public class DeliveryTest {
+public class DeliveryJobTest {
 
     @Test(expected = IllegalArgumentException.class)
     public void whenNeitherLocationIdNorCoordIsSet_itThrowsException() {
-        new Delivery.Builder("p").build();
+        new DeliveryJob.Builder("p").build();
     }
 
     @Test
     public void whenAddingTwoCapDimension_nuOfDimsShouldBeTwo() {
-        Delivery one = new Delivery.Builder("s").setLocation(Location.newInstance("foofoo"))
+        DeliveryJob one = new DeliveryJob.Builder("s").setLocation(Location.newInstance("foofoo"))
                         .addSizeDimension(0, 2)
                         .addSizeDimension(1, 4)
                         .build();
@@ -48,7 +48,7 @@ public void whenAddingTwoCapDimension_nuOfDimsShouldBeTwo() {
 
     @Test
     public void sizeAtStartAndEndShouldBeCorrect() {
-        Delivery one = new Delivery.Builder("s").setLocation(Location.newInstance("foofoo"))
+        DeliveryJob one = new DeliveryJob.Builder("s").setLocation(Location.newInstance("foofoo"))
                         .addSizeDimension(0, 2)
                         .addSizeDimension(1, 4)
                         .build();
@@ -60,7 +60,7 @@ public void sizeAtStartAndEndShouldBeCorrect() {
 
     @Test
     public void whenPickupIsBuiltWithoutSpecifyingCapacity_itShouldHvCapWithOneDimAndDimValOfZero() {
-        Delivery one = new Delivery.Builder("s").setLocation(Location.newInstance("foofoo"))
+        DeliveryJob one = new DeliveryJob.Builder("s").setLocation(Location.newInstance("foofoo"))
                         .build();
         SizeDimension size = one.getActivity().getLoadChange();
         assertEquals(1, size.getNuOfDimensions());
@@ -69,7 +69,7 @@ public void whenPickupIsBuiltWithoutSpecifyingCapacity_itShouldHvCapWithOneDimAn
 
     @Test
     public void whenPickupIsBuiltWithConstructorWhereSizeIsSpecified_capacityShouldBeSetCorrectly() {
-        Delivery one = new Delivery.Builder("s").addSizeDimension(0, 1).setLocation(Location.newInstance("foofoo"))
+        DeliveryJob one = new DeliveryJob.Builder("s").addSizeDimension(0, 1).setLocation(Location.newInstance("foofoo"))
                         .build();
         SizeDimension size = one.getActivity().getLoadChange().abs();
         assertEquals(1, size.getNuOfDimensions());
@@ -78,7 +78,7 @@ public void whenPickupIsBuiltWithConstructorWhereSizeIsSpecified_capacityShouldB
 
     @Test
     public void whenAddingSkills_theyShouldBeAddedCorrectly() {
-        Delivery s = new Delivery.Builder("s").setLocation(Location.newInstance("loc"))
+        DeliveryJob s = new DeliveryJob.Builder("s").setLocation(Location.newInstance("loc"))
                         .addRequiredSkill("drill").addRequiredSkill("screwdriver").build();
         assertTrue(s.getRequiredSkills().containsSkill("drill"));
         assertTrue(s.getRequiredSkills().containsSkill("ScrewDriver"));
@@ -86,7 +86,7 @@ public void whenAddingSkills_theyShouldBeAddedCorrectly() {
 
     @Test
     public void whenAddingSkillsCaseSens_theyShouldBeAddedCorrectly() {
-        Delivery s = new Delivery.Builder("s").setLocation(Location.newInstance("loc"))
+        DeliveryJob s = new DeliveryJob.Builder("s").setLocation(Location.newInstance("loc"))
                         .addRequiredSkill("DriLl").addRequiredSkill("screwDriver").build();
         assertTrue(s.getRequiredSkills().containsSkill("drill"));
         assertTrue(s.getRequiredSkills().containsSkill("drilL"));
@@ -94,7 +94,7 @@ public void whenAddingSkillsCaseSens_theyShouldBeAddedCorrectly() {
 
     @Test
     public void whenAddingSkillsCaseSensV2_theyShouldBeAddedCorrectly() {
-        Delivery s = new Delivery.Builder("s").setLocation(Location.newInstance("loc"))
+        DeliveryJob s = new DeliveryJob.Builder("s").setLocation(Location.newInstance("loc"))
                         .addRequiredSkill("screwDriver").build();
         assertFalse(s.getRequiredSkills().containsSkill("drill"));
         assertFalse(s.getRequiredSkills().containsSkill("drilL"));
@@ -102,21 +102,21 @@ public void whenAddingSkillsCaseSensV2_theyShouldBeAddedCorrectly() {
 
     @Test
     public void nameShouldBeAssigned() {
-        Delivery s = new Delivery.Builder("s").setLocation(Location.newInstance("loc"))
+        DeliveryJob s = new DeliveryJob.Builder("s").setLocation(Location.newInstance("loc"))
                         .setName("name").build();
         assertEquals("name", s.getName());
     }
 
     @Test
     public void whenSettingPriorities_itShouldBeSetCorrectly() {
-        Delivery s = new Delivery.Builder("s").setLocation(Location.newInstance("loc"))
+        DeliveryJob s = new DeliveryJob.Builder("s").setLocation(Location.newInstance("loc"))
                         .setPriority(3).build();
         assertEquals(3, s.getPriority());
     }
 
     @Test
     public void whenNotSettingPriorities_defaultShouldBe() {
-        Delivery s = new Delivery.Builder("s").setLocation(Location.newInstance("loc"))
+        DeliveryJob s = new DeliveryJob.Builder("s").setLocation(Location.newInstance("loc"))
                         .build();
         assertEquals(2, s.getPriority());
     }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/GraphJobActivityListTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/GraphJobActivityListTest.java
index f9a802466..307b5eb4f 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/GraphJobActivityListTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/GraphJobActivityListTest.java
@@ -20,7 +20,7 @@
 
     @Before
     public void beforeClass() {
-        job = mock(Service.class);
+        job = mock(ServiceJob.class);
     }
 
 
@@ -79,7 +79,7 @@ public void whenAddingAnActivityTwice_itMustHaveToAddOnlyOnce() {
     @Test(expected = IllegalArgumentException.class)
     public void whenAddingAnActivityWithWrongJob_itMustThrowException() {
         GraphJobActivityList list = new GraphJobActivityList(job);
-        list.addActivity(createActivity(mock(Service.class), "A"));
+        list.addActivity(createActivity(mock(ServiceJob.class), "A"));
     }
 
     @Test
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/PickupTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/PickupJobTest.java
similarity index 80%
rename from jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/PickupTest.java
rename to jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/PickupJobTest.java
index 09524bc55..4cc2dcc7b 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/PickupTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/PickupJobTest.java
@@ -26,16 +26,16 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.SizeDimension;
 
-public class PickupTest {
+public class PickupJobTest {
 
     @Test(expected = IllegalArgumentException.class)
     public void whenNeitherLocationIdNorCoordIsSet_itThrowsException() {
-        new Pickup.Builder("p").build();
+        new PickupJob.Builder("p").build();
     }
 
     @Test
     public void whenAddingTwoCapDimension_nuOfDimsShouldBeTwo() {
-        Pickup one = new Pickup.Builder("s").setLocation(Location.newInstance("foofoo"))
+        PickupJob one = new PickupJob.Builder("s").setLocation(Location.newInstance("foofoo"))
                         .addSizeDimension(0, 2)
                         .addSizeDimension(1, 4)
                         .build();
@@ -48,7 +48,7 @@ public void whenAddingTwoCapDimension_nuOfDimsShouldBeTwo() {
 
     @Test
     public void sizeAtStartAndEndShouldBeCorrect() {
-        Pickup one = new Pickup.Builder("s").setLocation(Location.newInstance("foofoo"))
+        PickupJob one = new PickupJob.Builder("s").setLocation(Location.newInstance("foofoo"))
                         .addSizeDimension(0, 2)
                         .addSizeDimension(1, 4)
                         .build();
@@ -58,7 +58,7 @@ public void sizeAtStartAndEndShouldBeCorrect() {
 
     @Test
     public void whenPickupIsBuiltWithoutSpecifyingCapacity_itShouldHvCapWithOneDimAndDimValOfZero() {
-        Pickup one = new Pickup.Builder("s").setLocation(Location.newInstance("foofoo"))
+        PickupJob one = new PickupJob.Builder("s").setLocation(Location.newInstance("foofoo"))
                         .build();
         SizeDimension size = one.getActivity().getLoadChange();
         assertEquals(1, size.getNuOfDimensions());
@@ -67,7 +67,7 @@ public void whenPickupIsBuiltWithoutSpecifyingCapacity_itShouldHvCapWithOneDimAn
 
     @Test
     public void whenPickupIsBuiltWithConstructorWhereSizeIsSpecified_capacityShouldBeSetCorrectly() {
-        Pickup one = new Pickup.Builder("s").addSizeDimension(0, 1).setLocation(Location.newInstance("foofoo"))
+        PickupJob one = new PickupJob.Builder("s").addSizeDimension(0, 1).setLocation(Location.newInstance("foofoo"))
                         .build();
         SizeDimension size = one.getActivity().getLoadChange();
         assertEquals(1, size.getNuOfDimensions());
@@ -76,7 +76,7 @@ public void whenPickupIsBuiltWithConstructorWhereSizeIsSpecified_capacityShouldB
 
     @Test
     public void whenAddingSkills_theyShouldBeAddedCorrectly() {
-        Pickup s = new Pickup.Builder("s").setLocation(Location.newInstance("loc"))
+        PickupJob s = new PickupJob.Builder("s").setLocation(Location.newInstance("loc"))
                         .addRequiredSkill("drill").addRequiredSkill("screwdriver").build();
         assertTrue(s.getRequiredSkills().containsSkill("drill"));
         assertTrue(s.getRequiredSkills().containsSkill("drill"));
@@ -85,7 +85,7 @@ public void whenAddingSkills_theyShouldBeAddedCorrectly() {
 
     @Test
     public void whenAddingSkillsCaseSens_theyShouldBeAddedCorrectly() {
-        Pickup s = new Pickup.Builder("s").setLocation(Location.newInstance("loc"))
+        PickupJob s = new PickupJob.Builder("s").setLocation(Location.newInstance("loc"))
                         .addRequiredSkill("DriLl").addRequiredSkill("screwDriver").build();
         assertTrue(s.getRequiredSkills().containsSkill("drill"));
         assertTrue(s.getRequiredSkills().containsSkill("drilL"));
@@ -93,7 +93,7 @@ public void whenAddingSkillsCaseSens_theyShouldBeAddedCorrectly() {
 
     @Test
     public void whenAddingSkillsCaseSensV2_theyShouldBeAddedCorrectly() {
-        Pickup s = new Pickup.Builder("s").setLocation(Location.newInstance("loc"))
+        PickupJob s = new PickupJob.Builder("s").setLocation(Location.newInstance("loc"))
                         .addRequiredSkill("screwDriver").build();
         assertFalse(s.getRequiredSkills().containsSkill("drill"));
         assertFalse(s.getRequiredSkills().containsSkill("drilL"));
@@ -101,7 +101,7 @@ public void whenAddingSkillsCaseSensV2_theyShouldBeAddedCorrectly() {
 
     @Test
     public void nameShouldBeAssigned() {
-        Pickup s = new Pickup.Builder("s").setLocation(Location.newInstance("loc"))
+        PickupJob s = new PickupJob.Builder("s").setLocation(Location.newInstance("loc"))
                         .setName("name").build();
         assertEquals("name", s.getName());
     }
@@ -109,14 +109,14 @@ public void nameShouldBeAssigned() {
 
     @Test
     public void whenSettingPriorities_itShouldBeSetCorrectly() {
-        Pickup s = new Pickup.Builder("s").setLocation(Location.newInstance("loc"))
+        PickupJob s = new PickupJob.Builder("s").setLocation(Location.newInstance("loc"))
                         .setPriority(3).build();
         assertEquals(3, s.getPriority());
     }
 
     @Test
     public void whenNotSettingPriorities_defaultShouldBe() {
-        Pickup s = new Pickup.Builder("s").setLocation(Location.newInstance("loc"))
+        PickupJob s = new PickupJob.Builder("s").setLocation(Location.newInstance("loc"))
                         .build();
         assertEquals(2, s.getPriority());
     }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ReturnedShipmentTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ReturnedShipmentTest.java
deleted file mode 100644
index 50b599e7b..000000000
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ReturnedShipmentTest.java
+++ /dev/null
@@ -1,559 +0,0 @@
-/*
- * Licensed to GraphHopper GmbH under one or more contributor
- * license agreements. See the NOTICE file distributed with this work for
- * additional information regarding copyright ownership.
- *
- * GraphHopper GmbH licenses this file to you under the Apache License,
- * Version 2.0 (the "License"); you may not use this file except in
- * compliance with the License. You may obtain a copy of the License at
- *
- *       http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.graphhopper.jsprit.core.problem.job;
-
-import static org.hamcrest.core.Is.is;
-import static org.hamcrest.core.IsCollectionContaining.hasItem;
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertThat;
-import static org.junit.Assert.assertTrue;
-
-import java.util.HashSet;
-import java.util.Set;
-
-import org.junit.Assert;
-import org.junit.Test;
-
-import com.graphhopper.jsprit.core.algorithm.VehicleRoutingAlgorithm;
-import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
-import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.SizeDimension;
-import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
-import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
-import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
-import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
-import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
-import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
-import com.graphhopper.jsprit.core.reporting.SolutionPrinter;
-import com.graphhopper.jsprit.core.util.Coordinate;
-import com.graphhopper.jsprit.core.util.Solutions;
-import com.graphhopper.jsprit.core.util.TestUtils;
-
-public class ReturnedShipmentTest {
-
-    @Test
-    public void whenTwoReturnedShipmentsHaveTheSameId_theyReferencesShouldBeUnEqual() {
-        ReturnedShipment one = ReturnedShipment.Builder.newInstance("s").addSizeDimension(0, 10)
-                        .setPickupLocation(Location.Builder.newInstance().setId("foo").build()).
-                        setDeliveryLocation(TestUtils.loc("foofoo")).setPickupServiceTime(10).setDeliveryServiceTime(20).build();
-        ReturnedShipment two = ReturnedShipment.Builder.newInstance("s").addSizeDimension(0, 10)
-                        .setPickupLocation(Location.Builder.newInstance().setId("foo").build()).
-                        setDeliveryLocation(TestUtils.loc("foofoo")).setPickupServiceTime(10).setDeliveryServiceTime(20).build();
-
-        assertTrue(one != two);
-    }
-
-    @Test
-    public void sizeAtStartAndEndShouldBeCorrect() {
-        ReturnedShipment one = ReturnedShipment.Builder.newInstance("s").addSizeDimension(0, 10)
-                        .addSizeDimension(1, 5)
-                        .setPickupLocation(Location.Builder.newInstance().setId("foo").build()).
-                        setDeliveryLocation(TestUtils.loc("foofoo")).setPickupServiceTime(10).setDeliveryServiceTime(20).build();
-        SizeDimension cap = SizeDimension.Builder.newInstance().addDimension(0, 0).addDimension(1, 0).build();
-        assertTrue(one.getSizeAtStart().equals(cap));
-        assertTrue(one.getSizeAtEnd().equals(cap));
-    }
-
-    @Test
-    public void whenTwoReturnedShipmentsHaveTheSameId_theyShouldBeEqual() {
-        ReturnedShipment one = ReturnedShipment.Builder.newInstance("s").addSizeDimension(0, 10)
-                        .setPickupLocation(Location.Builder.newInstance().setId("foo").build()).
-                        setDeliveryLocation(TestUtils.loc("foofoo")).setPickupServiceTime(10).setDeliveryServiceTime(20).build();
-        ReturnedShipment two = ReturnedShipment.Builder.newInstance("s").addSizeDimension(0, 10)
-                        .setPickupLocation(Location.Builder.newInstance().setId("foo").build()).
-                        setDeliveryLocation(TestUtils.loc("foofoo")).setPickupServiceTime(10).setDeliveryServiceTime(20).build();
-
-        assertTrue(one.equals(two));
-    }
-
-    @Test
-    public void whenReturnedShipmentIsInstantiatedWithASizeOf10_theSizeShouldBe10() {
-        ReturnedShipment one = ReturnedShipment.Builder.newInstance("s").addSizeDimension(0, 10)
-                        .setPickupLocation(Location.Builder.newInstance().setId("foo").build()).
-                        setDeliveryLocation(TestUtils.loc("foofoo")).setPickupServiceTime(10).setDeliveryServiceTime(20).build();
-        assertEquals(10, one.getSize().get(0));
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void whenReturnedShipmentIsBuiltWithNegativeDemand_itShouldThrowException() {
-        @SuppressWarnings("unused")
-        ReturnedShipment one = ReturnedShipment.Builder.newInstance("s").addSizeDimension(0, -10)
-        .setPickupLocation(Location.Builder.newInstance().setId("foo").build())
-        .setDeliveryLocation(TestUtils.loc("foofoo")).build();
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void whenReturnedShipmentIsBuiltWithNegativeDemand_itShouldThrowException_v2() {
-        @SuppressWarnings("unused")
-        ReturnedShipment one = ReturnedShipment.Builder.newInstance("s").addSizeDimension(0, -10)
-        .setPickupLocation(Location.Builder.newInstance().setId("foo").build())
-        .setDeliveryLocation(TestUtils.loc("foofoo")).build();
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void whenIdIsNull_itShouldThrowException() {
-        @SuppressWarnings("unused")
-        ReturnedShipment one = ReturnedShipment.Builder.newInstance(null).addSizeDimension(0, 10)
-        .setPickupLocation(Location.Builder.newInstance().setId("foo").build())
-        .setDeliveryLocation(TestUtils.loc("foofoo")).build();
-    }
-
-    @Test
-    public void whenCallingForANewBuilderInstance_itShouldReturnBuilderCorrectly() {
-        ReturnedShipment.Builder builder = ReturnedShipment.Builder.newInstance("s");
-        assertNotNull(builder);
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void whenNeitherPickupLocationIdNorPickupCoord_itThrowsException() {
-        @SuppressWarnings("unused")
-        ReturnedShipment s = ReturnedShipment.Builder.newInstance("s")
-        .setDeliveryLocation(TestUtils.loc("delLoc")).build();
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void whenNeitherDeliveryLocationIdNorDeliveryCoord_itThrowsException() {
-        @SuppressWarnings("unused")
-        ReturnedShipment s = ReturnedShipment.Builder.newInstance("s")
-        .setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build())
-        .build();
-    }
-
-    @Test
-    public void whenPickupLocationIdIsSet_itShouldBeDoneCorrectly() {
-        ReturnedShipment s = ReturnedShipment.Builder.newInstance("s")
-                        .setDeliveryLocation(TestUtils.loc("delLoc"))
-                        .setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build())
-                        .build();
-        assertEquals("pickLoc", s.getPickupActivity().getLocation().getId());
-        assertEquals("pickLoc", s.getPickupActivity().getLocation().getId());
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void whenPickupLocationIsNull_itThrowsException() {
-        @SuppressWarnings("unused")
-        ReturnedShipment.Builder builder = ReturnedShipment.Builder.newInstance("s")
-        .setPickupLocation(Location.Builder.newInstance().setId(null).build());
-    }
-
-    @Test
-    public void whenPickupCoordIsSet_itShouldBeDoneCorrectly() {
-        ReturnedShipment s = ReturnedShipment.Builder.newInstance("s")
-                        .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").setCoordinate(Coordinate.newInstance(1, 2)).build()).build();
-        assertEquals(1.0, s.getPickupActivity().getLocation().getCoordinate().getX(), 0.01);
-        assertEquals(2.0, s.getPickupActivity().getLocation().getCoordinate().getY(), 0.01);
-        assertEquals(1.0, s.getPickupActivity().getLocation().getCoordinate().getX(), 0.01);
-        assertEquals(2.0, s.getPickupActivity().getLocation().getCoordinate().getY(), 0.01);
-    }
-
-
-    @Test
-    public void whenDeliveryLocationIdIsSet_itShouldBeDoneCorrectly() {
-        ReturnedShipment s = ReturnedShipment.Builder.newInstance("s")
-                        .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
-        assertEquals("delLoc", s.getExchangeActivity().getLocation().getId());
-        assertEquals("delLoc", s.getExchangeActivity().getLocation().getId());
-    }
-
-
-    @Test
-    public void whenDeliveryCoordIsSet_itShouldBeDoneCorrectly() {
-        ReturnedShipment s = ReturnedShipment.Builder.newInstance("s")
-                        .setDeliveryLocation(TestUtils.loc("delLoc", Coordinate.newInstance(1, 2)))
-                        .setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build())
-                        .build();
-        assertEquals(1.0, s.getExchangeActivity().getLocation().getCoordinate().getX(), 0.01);
-        assertEquals(2.0, s.getExchangeActivity().getLocation().getCoordinate().getY(), 0.01);
-        assertEquals(1.0, s.getExchangeActivity().getLocation().getCoordinate().getX(), 0.01);
-        assertEquals(2.0, s.getExchangeActivity().getLocation().getCoordinate().getY(), 0.01);
-    }
-
-    @Test
-    public void whenPickupServiceTimeIsNotSet_itShouldBeZero() {
-        ReturnedShipment s = ReturnedShipment.Builder.newInstance("s")
-                        .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
-        assertEquals(0.0, s.getPickupActivity().getOperationTime(), 0.01);
-    }
-
-    @Test
-    public void whenDeliveryServiceTimeIsNotSet_itShouldBeZero() {
-        ReturnedShipment s = ReturnedShipment.Builder.newInstance("s")
-                        .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
-        assertEquals(0.0, s.getExchangeActivity().getOperationTime(), 0.01);
-    }
-
-    @Test
-    public void whenPickupServiceTimeIsSet_itShouldBeDoneCorrectly() {
-        ReturnedShipment s = ReturnedShipment.Builder.newInstance("s")
-                        .setPickupServiceTime(2.0)
-                        .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
-        assertEquals(2.0, s.getPickupActivity().getOperationTime(), 0.01);
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void whenPickupServiceIsSmallerThanZero_itShouldThrowException() {
-        @SuppressWarnings("unused")
-        ReturnedShipment s = ReturnedShipment.Builder.newInstance("s").setPickupServiceTime(-2.0)
-        .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
-    }
-
-    @Test
-    public void whenDeliveryServiceTimeIsSet_itShouldBeDoneCorrectly() {
-        ReturnedShipment s = ReturnedShipment.Builder.newInstance("s").setDeliveryServiceTime(2.0)
-                        .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
-        assertEquals(2.0, s.getExchangeActivity().getOperationTime(), 0.01);
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void whenDeliveryServiceIsSmallerThanZero_itShouldThrowException() {
-        @SuppressWarnings("unused")
-        ReturnedShipment s = ReturnedShipment.Builder.newInstance("s").setDeliveryServiceTime(-2.0)
-        .setDeliveryLocation(TestUtils.loc("delLoc"))
-        .setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build())
-        .build();
-    }
-
-    @Test
-    public void whenPickupTimeWindowIsNotSet_itShouldBeTheDefaultOne() {
-        ReturnedShipment s = ReturnedShipment.Builder.newInstance("s")
-                        .setDeliveryLocation(TestUtils.loc("delLoc"))
-                        .setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build())
-                        .build();
-        assertEquals(0.0, s.getPickupActivity().getSingleTimeWindow().getStart(),
-                        0.01);
-        assertEquals(Double.MAX_VALUE,
-                        s.getPickupActivity().getSingleTimeWindow().getEnd(), 0.01);
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void whenPickupTimeWindowIsNull_itShouldThrowException() {
-        @SuppressWarnings("unused")
-        ReturnedShipment s = ReturnedShipment.Builder.newInstance("s").setPickupTimeWindow(null)
-        .setDeliveryLocation(TestUtils.loc("delLoc"))
-        .setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build())
-        .build();
-    }
-
-    @Test
-    public void whenPickupTimeWindowIsSet_itShouldBeDoneCorrectly() {
-        ReturnedShipment s = ReturnedShipment.Builder.newInstance("s")
-                        .setPickupTimeWindow(TimeWindow.newInstance(1, 2))
-                        .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
-        assertEquals(1.0, s.getPickupActivity().getSingleTimeWindow().getStart(),
-                        0.01);
-        assertEquals(2.0, s.getPickupActivity().getSingleTimeWindow().getEnd(), 0.01);
-    }
-
-    @Test
-    public void whenDeliveryTimeWindowIsNotSet_itShouldBeTheDefaultOne() {
-        ReturnedShipment s = ReturnedShipment.Builder.newInstance("s")
-                        .setDeliveryLocation(TestUtils.loc("delLoc"))
-                        .setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build())
-                        .build();
-        assertEquals(0.0, s.getExchangeActivity().getSingleTimeWindow().getStart(),
-                        0.01);
-        assertEquals(Double.MAX_VALUE,
-                        s.getExchangeActivity().getSingleTimeWindow().getEnd(), 0.01);
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void whenDeliveryTimeWindowIsNull_itShouldThrowException() {
-        @SuppressWarnings("unused")
-        ReturnedShipment s = ReturnedShipment.Builder.newInstance("s").setDeliveryTimeWindow(null)
-        .setDeliveryLocation(TestUtils.loc("delLoc"))
-        .setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build())
-        .build();
-    }
-
-    @Test
-    public void whenDeliveryTimeWindowIsSet_itShouldBeDoneCorrectly() {
-        ReturnedShipment s = ReturnedShipment.Builder.newInstance("s")
-                        .setDeliveryTimeWindow(TimeWindow.newInstance(1, 2))
-                        .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
-        assertEquals(1.0, s.getExchangeActivity().getSingleTimeWindow().getStart(),
-                        0.01);
-        assertEquals(2.0, s.getExchangeActivity().getSingleTimeWindow().getEnd(),
-                        0.01);
-    }
-
-    @Test
-    public void whenUsingAddDeliveryTimeWindow_itShouldBeDoneCorrectly() {
-        ReturnedShipment s = ReturnedShipment.Builder.newInstance("s")
-                        .addDeliveryTimeWindow(TimeWindow.newInstance(1, 2))
-                        .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
-        assertEquals(1.0, s.getExchangeActivity().getSingleTimeWindow().getStart(),
-                        0.01);
-        assertEquals(2.0, s.getExchangeActivity().getSingleTimeWindow().getEnd(),
-                        0.01);
-    }
-
-    @Test
-    public void whenUsingAddDeliveryTimeWindow2_itShouldBeDoneCorrectly() {
-        ReturnedShipment s = ReturnedShipment.Builder.newInstance("s").addDeliveryTimeWindow(1, 2)
-                        .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
-        assertEquals(1.0, s.getExchangeActivity().getSingleTimeWindow().getStart(),
-                        0.01);
-        assertEquals(2.0, s.getExchangeActivity().getSingleTimeWindow().getEnd(),
-                        0.01);
-    }
-
-    @Test
-    public void whenAddingMultipleDeliveryTimeWindows_itShouldBeDoneCorrectly() {
-        TimeWindow tw1 = TimeWindow.newInstance(1, 2);
-        TimeWindow tw2 = TimeWindow.newInstance(4, 5);
-        ReturnedShipment s = ReturnedShipment.Builder.newInstance("s").addDeliveryTimeWindow(tw1)
-                        .addDeliveryTimeWindow(tw2)
-                        .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
-        assertEquals(s.getExchangeActivity().getTimeWindows().size(), 2);
-        assertThat(s.getExchangeActivity().getTimeWindows(), hasItem(is(tw1)));
-        assertThat(s.getExchangeActivity().getTimeWindows(), hasItem(is(tw2)));
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void whenAddingMultipleOverlappingDeliveryTimeWindows_itShouldThrowException() {
-        ReturnedShipment s = ReturnedShipment.Builder.newInstance("s").addDeliveryTimeWindow(1, 3)
-                        .addDeliveryTimeWindow(2, 5)
-                        .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
-        assertEquals(1.0, s.getExchangeActivity().getSingleTimeWindow().getStart(),
-                        0.01);
-        assertEquals(2.0, s.getExchangeActivity().getSingleTimeWindow().getEnd(),
-                        0.01);
-    }
-
-
-    @Test
-    public void whenUsingAddPickupTimeWindow_itShouldBeDoneCorrectly() {
-        ReturnedShipment s = ReturnedShipment.Builder.newInstance("s")
-                        .addPickupTimeWindow(TimeWindow.newInstance(1, 2))
-                        .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
-        assertEquals(1.0, s.getPickupActivity().getSingleTimeWindow().getStart(),
-                        0.01);
-        assertEquals(2.0, s.getPickupActivity().getSingleTimeWindow().getEnd(), 0.01);
-    }
-
-    @Test
-    public void whenUsingAddPickupTimeWindow2_itShouldBeDoneCorrectly() {
-        ReturnedShipment s = ReturnedShipment.Builder.newInstance("s").addPickupTimeWindow(1, 2)
-                        .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
-        assertEquals(1.0, s.getPickupActivity().getSingleTimeWindow().getStart(),
-                        0.01);
-        assertEquals(2.0, s.getPickupActivity().getSingleTimeWindow().getEnd(), 0.01);
-    }
-
-    @Test
-    public void whenAddingMultiplePickupTimeWindows_itShouldBeDoneCorrectly() {
-        TimeWindow tw1 = TimeWindow.newInstance(1, 2);
-        TimeWindow tw2 = TimeWindow.newInstance(4, 5);
-        ReturnedShipment s = ReturnedShipment.Builder.newInstance("s").addPickupTimeWindow(tw1)
-                        .addPickupTimeWindow(tw2)
-                        .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
-        assertEquals(s.getPickupActivity().getTimeWindows().size(), 2);
-        assertThat(s.getPickupActivity().getTimeWindows(), hasItem(is(tw1)));
-        assertThat(s.getPickupActivity().getTimeWindows(), hasItem(is(tw2)));
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void whenAddingMultipleOverlappingPickupTimeWindows_itShouldThrowException() {
-        ReturnedShipment s = ReturnedShipment.Builder.newInstance("s").addPickupTimeWindow(1, 3)
-                        .addPickupTimeWindow(2, 5)
-                        .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
-        assertEquals(1.0, s.getPickupActivity().getSingleTimeWindow().getStart(), 0.01);
-        assertEquals(2.0, s.getPickupActivity().getSingleTimeWindow().getEnd(), 0.01);
-    }
-
-
-    @Test(expected = IllegalArgumentException.class)
-    public void whenReturnedShipmentHasNegativeCapacityVal_throwIllegalStateExpception() {
-        @SuppressWarnings("unused")
-        ReturnedShipment one = ReturnedShipment.Builder.newInstance("s")
-        .setPickupLocation(Location.Builder.newInstance().setId("foo").build())
-        .setDeliveryLocation(TestUtils.loc("foofoo"))
-        .addSizeDimension(0, -2)
-        .build();
-    }
-
-    @Test
-    public void whenAddingTwoCapDimension_nuOfDimsShouldBeTwo() {
-        ReturnedShipment one = ReturnedShipment.Builder.newInstance("s")
-                        .setPickupLocation(Location.Builder.newInstance().setId("foo").build())
-                        .setDeliveryLocation(TestUtils.loc("foofoo"))
-                        .addSizeDimension(0, 2)
-                        .addSizeDimension(1, 4)
-                        .addBackhaulSizeDimension(0, 3)
-                        .addBackhaulSizeDimension(1, 5)
-                        .build();
-        assertEquals(2, one.getSize().getNuOfDimensions());
-        assertEquals(2, one.getBackhaulActivity().getLoadChange().getNuOfDimensions());
-    }
-
-    @Test
-    public void whenReturnedShipmentIsBuiltWithoutSpecifyingCapacity_itShouldHvCapWithOneDimAndDimValOfZero() {
-        ReturnedShipment one = ReturnedShipment.Builder.newInstance("s")
-                        .setPickupLocation(Location.Builder.newInstance().setId("foo").setCoordinate(Coordinate.newInstance(0, 0)).build())
-                        .setDeliveryLocation(TestUtils.loc("foofoo")).build();
-        assertEquals(1, one.getSize().getNuOfDimensions());
-        assertEquals(0, one.getSize().get(0));
-        assertEquals(1, one.getBackhaulActivity().getLoadChange().getNuOfDimensions());
-    }
-
-    @Test
-    public void whenReturnedShipmentIsBuiltWithConstructorWhereSizeIsSpecified_capacityShouldBeSetCorrectly() {
-        ReturnedShipment one = ReturnedShipment.Builder.newInstance("s").addSizeDimension(0, 1)
-                        .setPickupLocation(Location.Builder.newInstance().setId("foo").setCoordinate(Coordinate.newInstance(0, 0)).build())
-                        .setDeliveryLocation(TestUtils.loc("foofoo")).build();
-        assertEquals(1, one.getSize().getNuOfDimensions());
-        assertEquals(1, one.getSize().get(0));
-    }
-
-    @Test
-    public void whenAddingSkills_theyShouldBeAddedCorrectly() {
-        ReturnedShipment s = ReturnedShipment.Builder.newInstance("s")
-                        .setPickupLocation(Location.Builder.newInstance().setId("loc").build())
-                        .setDeliveryLocation(TestUtils.loc("delLoc"))
-                        .addRequiredSkill("drill").addRequiredSkill("screwdriver").build();
-        assertTrue(s.getRequiredSkills().containsSkill("drill"));
-        assertTrue(s.getRequiredSkills().containsSkill("drill"));
-        assertTrue(s.getRequiredSkills().containsSkill("ScrewDriver"));
-    }
-
-    @Test
-    public void whenAddingSkillsCaseSens_theyShouldBeAddedCorrectly() {
-        ReturnedShipment s = ReturnedShipment.Builder.newInstance("s")
-                        .setPickupLocation(Location.Builder.newInstance().setId("pick").build())
-                        .setDeliveryLocation(TestUtils.loc("del"))
-                        .addRequiredSkill("DriLl").addRequiredSkill("screwDriver").build();
-        assertTrue(s.getRequiredSkills().containsSkill("drill"));
-        assertTrue(s.getRequiredSkills().containsSkill("drilL"));
-    }
-
-    @Test
-    public void whenAddingSkillsCaseSensV2_theyShouldBeAddedCorrectly() {
-        ReturnedShipment s = ReturnedShipment.Builder.newInstance("s")
-                        .setPickupLocation(Location.Builder.newInstance().setId("loc").build())
-                        .setDeliveryLocation(TestUtils.loc("del"))
-                        .addRequiredSkill("screwDriver").build();
-        assertFalse(s.getRequiredSkills().containsSkill("drill"));
-        assertFalse(s.getRequiredSkills().containsSkill("drilL"));
-    }
-
-    @Test
-    public void nameShouldBeAssigned() {
-        ReturnedShipment s = ReturnedShipment.Builder.newInstance("s")
-                        .setPickupLocation(Location.Builder.newInstance().setId("loc").build())
-                        .setDeliveryLocation(TestUtils.loc("del"))
-                        .setName("name").build();
-        assertEquals("name", s.getName());
-    }
-
-    @Test
-    public void whenSettingLocation_itShouldWork() {
-        ReturnedShipment s = ReturnedShipment.Builder.newInstance("s")
-                        .setPickupLocation(Location.Builder.newInstance().setId("loc").build())
-                        .setDeliveryLocation(Location.Builder.newInstance().setId("del").build())
-                        .setBackhaulLocation(Location.Builder.newInstance().setId("back").build())
-                        .build();
-        assertEquals("loc", s.getPickupActivity().getLocation().getId());
-        assertEquals("del", s.getExchangeActivity().getLocation().getId());
-        assertEquals("back", s.getBackhaulActivity().getLocation().getId());
-    }
-
-    @Test
-    public void whenSettingPriorities_itShouldBeSetCorrectly() {
-        ReturnedShipment s = ReturnedShipment.Builder.newInstance("s")
-                        .setPickupLocation(Location.newInstance("loc"))
-                        .setDeliveryLocation(Location.newInstance("loc"))
-                        .setPriority(1).build();
-        assertEquals(1, s.getPriority());
-    }
-
-    @Test
-    public void whenSettingPriorities_itShouldBeSetCorrectly2() {
-        ReturnedShipment s = ReturnedShipment.Builder.newInstance("s")
-                        .setPickupLocation(Location.newInstance("loc"))
-                        .setDeliveryLocation(Location.newInstance("loc"))
-                        .setPriority(3).build();
-        assertEquals(3, s.getPriority());
-    }
-
-    @Test
-    public void whenNotSettingPriorities_defaultShouldBe2() {
-        ReturnedShipment s = ReturnedShipment.Builder.newInstance("s")
-                        .setPickupLocation(Location.newInstance("loc"))
-                        .setDeliveryLocation(Location.newInstance("loc"))
-                        .build();
-        assertEquals(2, s.getPriority());
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void whenSettingIncorrectPriorities_itShouldThrowException() {
-        ReturnedShipment.Builder.newInstance("s").setPickupLocation(Location.newInstance("loc"))
-        .setDeliveryLocation(Location.newInstance("loc"))
-        .setPriority(30).build();
-
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void whenSettingIncorrectPriorities_itShouldThrowException2() {
-        ReturnedShipment.Builder.newInstance("s").setPickupLocation(Location.newInstance("loc"))
-        .setDeliveryLocation(Location.newInstance("loc"))
-        .setPriority(0).build();
-
-    }
-
-    @Test
-    public void firstTest() {
-        Set<Job> jobs = new HashSet<>();
-        jobs.add(CustomJob.Builder.newInstance("job")
-                        .addPickup(Location.newInstance(10, 0), SizeDimension.of(1), 0d, TimeWindow.newInstance(0, 30))
-                        .addExchange(Location.newInstance(5, 30)).addDelivery(Location.newInstance(10, 0), SizeDimension.of(1))
-                        .build());
-        jobs.add(CustomJob.Builder.newInstance("job2")
-                        .addPickup(Location.newInstance(20, 0), SizeDimension.of(1), 0d, TimeWindow.newInstance(0, 30))
-                        .addExchange(Location.newInstance(20, 30), SizeDimension.EMPTY)
-                        .addDelivery(Location.newInstance(20, 0), SizeDimension.of(1))
-                        .build());
-        jobs.add(CustomJob.Builder.newInstance("job3")
-                        .addPickup(Location.newInstance(20, 30), SizeDimension.of(1))
-                        .addExchange(Location.newInstance(40, 30), SizeDimension.EMPTY)
-                        .addDelivery(Location.newInstance(20, 30), SizeDimension.of(1))
-                        .build());
-        jobs.add(CustomJob.Builder.newInstance("job4")
-                        .addPickup(Location.newInstance(20, 30), SizeDimension.of(1))
-                        .addExchange(Location.newInstance(40, 30), SizeDimension.EMPTY)
-                        .addDelivery(Location.newInstance(20, 30), SizeDimension.of(1))
-                        .build());
-        VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0, 2)
-                        .build();
-        Vehicle v = VehicleImpl.Builder.newInstance("v").setType(type)
-                        .setStartLocation(Location.newInstance(0, 0)).build();
-        Vehicle v2 = VehicleImpl.Builder.newInstance("v2").setType(type)
-                        .setStartLocation(Location.newInstance(0, 0)).build();
-        VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance()
-                        .setFleetSize(FleetSize.FINITE)
-                        .addAllJobs(jobs).addVehicle(v).addVehicle(v2).build();
-        VehicleRoutingAlgorithm vra = Jsprit.createAlgorithm(vrp);
-        vra.setMaxIterations(10);
-        VehicleRoutingProblemSolution solution = Solutions.bestOf(vra.searchSolutions());
-        SolutionPrinter.print(vrp, solution, SolutionPrinter.Print.VERBOSE);
-        Assert.assertTrue(solution.getUnassignedJobs().isEmpty());
-    }
-}
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ServiceTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ServiceJobTest.java
similarity index 70%
rename from jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ServiceTest.java
rename to jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ServiceJobTest.java
index 723902fed..271952d83 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ServiceTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ServiceJobTest.java
@@ -34,29 +34,29 @@
 import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 
-public class ServiceTest {
+public class ServiceJobTest {
 
     @Test
     public void whenTwoServicesHaveTheSameId_theirReferencesShouldBeUnEqual() {
-        Service one = new Service.Builder("service").addSizeDimension(0, 10).setLocation(Location.newInstance("foo")).build();
-        Service two = new Service.Builder("service").addSizeDimension(0, 10).setLocation(Location.newInstance("fo")).build();
+        ServiceJob one = new ServiceJob.Builder("service").addSizeDimension(0, 10).setLocation(Location.newInstance("foo")).build();
+        ServiceJob two = new ServiceJob.Builder("service").addSizeDimension(0, 10).setLocation(Location.newInstance("fo")).build();
 
         assertTrue(one != two);
     }
 
     @Test
     public void whenTwoServicesHaveTheSameId_theyShouldBeEqual() {
-        Service one = new Service.Builder("service").addSizeDimension(0, 10).setLocation(Location.newInstance("foo")).build();
-        Service two = new Service.Builder("service").addSizeDimension(0, 10).setLocation(Location.newInstance("fo")).build();
+        ServiceJob one = new ServiceJob.Builder("service").addSizeDimension(0, 10).setLocation(Location.newInstance("foo")).build();
+        ServiceJob two = new ServiceJob.Builder("service").addSizeDimension(0, 10).setLocation(Location.newInstance("fo")).build();
 
         assertTrue(one.equals(two));
     }
 
     @Test
     public void noName() {
-        Set<Service> serviceSet = new HashSet<Service>();
-        Service one = new Service.Builder("service").addSizeDimension(0, 10).setLocation(Location.newInstance("foo")).build();
-        Service two = new Service.Builder("service").addSizeDimension(0, 10).setLocation(Location.newInstance("fo")).build();
+        Set<ServiceJob> serviceSet = new HashSet<ServiceJob>();
+        ServiceJob one = new ServiceJob.Builder("service").addSizeDimension(0, 10).setLocation(Location.newInstance("foo")).build();
+        ServiceJob two = new ServiceJob.Builder("service").addSizeDimension(0, 10).setLocation(Location.newInstance("fo")).build();
         serviceSet.add(one);
         //		assertTrue(serviceSet.contains(two));
         serviceSet.remove(two);
@@ -66,12 +66,12 @@ public void noName() {
     @Test(expected = IllegalArgumentException.class)
     public void whenCapacityDimValueIsNegative_throwIllegalStateExpception() {
         @SuppressWarnings("unused")
-        Service s = new Service.Builder("s").setLocation(Location.newInstance("foo")).addSizeDimension(0, -10).build();
+        ServiceJob s = new ServiceJob.Builder("s").setLocation(Location.newInstance("foo")).addSizeDimension(0, -10).build();
     }
 
     @Test
     public void whenAddingTwoCapDimension_nuOfDimsShouldBeTwo() {
-        Service one = new Service.Builder("s").setLocation(Location.newInstance("foofoo"))
+        ServiceJob one = new ServiceJob.Builder("s").setLocation(Location.newInstance("foofoo"))
                         .addSizeDimension(0, 2)
                         .addSizeDimension(1, 4)
                         .build();
@@ -80,7 +80,7 @@ public void whenAddingTwoCapDimension_nuOfDimsShouldBeTwo() {
 
     @Test
     public void sizeAtStartAndEndShouldBeCorrect() {
-        Service one = new Service.Builder("s").setLocation(Location.newInstance("foofoo"))
+        ServiceJob one = new ServiceJob.Builder("s").setLocation(Location.newInstance("foofoo"))
                         .addSizeDimension(0, 2)
                         .addSizeDimension(1, 4)
                         .build();
@@ -90,7 +90,7 @@ public void sizeAtStartAndEndShouldBeCorrect() {
 
     @Test
     public void whenShipmentIsBuiltWithoutSpecifyingCapacity_itShouldHvCapWithOneDimAndDimValOfZero() {
-        Service one = new Service.Builder("s").setLocation(Location.newInstance("foofoo"))
+        ServiceJob one = new ServiceJob.Builder("s").setLocation(Location.newInstance("foofoo"))
                         .build();
         assertEquals(1, one.getActivity().getLoadChange().getNuOfDimensions());
         assertEquals(0, one.getActivity().getLoadChange().get(0));
@@ -98,7 +98,7 @@ public void whenShipmentIsBuiltWithoutSpecifyingCapacity_itShouldHvCapWithOneDim
 
     @Test
     public void whenShipmentIsBuiltWithConstructorWhereSizeIsSpecified_capacityShouldBeSetCorrectly() {
-        Service one = new Service.Builder("s").addSizeDimension(0, 1).setLocation(Location.newInstance("foofoo"))
+        ServiceJob one = new ServiceJob.Builder("s").addSizeDimension(0, 1).setLocation(Location.newInstance("foofoo"))
                         .build();
         assertEquals(1, one.getActivity().getLoadChange().getNuOfDimensions());
         assertEquals(1, one.getActivity().getLoadChange().get(0));
@@ -106,26 +106,26 @@ public void whenShipmentIsBuiltWithConstructorWhereSizeIsSpecified_capacityShoul
 
     @Test
     public void whenCallingForNewInstanceOfBuilder_itShouldReturnBuilderCorrectly() {
-        Service.Builder builder = new Service.Builder("s");
+        ServiceJob.Builder builder = new ServiceJob.Builder("s");
         assertNotNull(builder);
     }
 
     @Test
     public void whenSettingNoType_itShouldReturn_service() {
-        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc")).build();
+        ServiceJob s = new ServiceJob.Builder("s").setLocation(Location.newInstance("loc")).build();
         assertEquals("pickup", s.getType());
     }
 
     @Test
     public void whenSettingLocation_itShouldBeSetCorrectly() {
-        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc")).build();
+        ServiceJob s = new ServiceJob.Builder("s").setLocation(Location.newInstance("loc")).build();
         assertEquals("loc", s.getActivity().getLocation().getId());
         assertEquals("loc", s.getActivity().getLocation().getId());
     }
 
     @Test
     public void whenSettingLocation_itShouldWork() {
-        Service s = new Service.Builder("s").setLocation(Location.Builder.newInstance().setId("loc").build()).build();
+        ServiceJob s = new ServiceJob.Builder("s").setLocation(Location.Builder.newInstance().setId("loc").build()).build();
         assertEquals("loc", s.getActivity().getLocation().getId());
         assertEquals("loc", s.getActivity().getLocation().getId());
     }
@@ -133,7 +133,7 @@ public void whenSettingLocation_itShouldWork() {
 
     @Test
     public void whenSettingLocationCoord_itShouldBeSetCorrectly() {
-        Service s = new Service.Builder("s").setLocation(Location.newInstance(1, 2)).build();
+        ServiceJob s = new ServiceJob.Builder("s").setLocation(Location.newInstance(1, 2)).build();
         assertEquals(1.0, s.getActivity().getLocation().getCoordinate().getX(), 0.01);
         assertEquals(2.0, s.getActivity().getLocation().getCoordinate().getY(), 0.01);
         assertEquals(1.0, s.getActivity().getLocation().getCoordinate().getX(), 0.01);
@@ -143,37 +143,37 @@ public void whenSettingLocationCoord_itShouldBeSetCorrectly() {
     @Test(expected = IllegalArgumentException.class)
     public void whenSettingNeitherLocationIdNorCoord_throwsException() {
         @SuppressWarnings("unused")
-        Service s = new Service.Builder("s").build();
+        ServiceJob s = new ServiceJob.Builder("s").build();
     }
 
     @Test(expected = IllegalArgumentException.class)
     public void whenServiceTimeSmallerZero_throwIllegalStateException() {
         @SuppressWarnings("unused")
-        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc")).setServiceTime(-1).build();
+        ServiceJob s = new ServiceJob.Builder("s").setLocation(Location.newInstance("loc")).setServiceTime(-1).build();
     }
 
     @Test
     public void whenSettingServiceTime_itShouldBeSetCorrectly() {
-        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc")).setServiceTime(1).build();
+        ServiceJob s = new ServiceJob.Builder("s").setLocation(Location.newInstance("loc")).setServiceTime(1).build();
         assertEquals(1.0, s.getActivity().getOperationTime(), 0.01);
     }
 
     @Test(expected = IllegalArgumentException.class)
     public void whenTimeWindowIsNull_throwException() {
         @SuppressWarnings("unused")
-        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc")).setTimeWindow(null).build();
+        ServiceJob s = new ServiceJob.Builder("s").setLocation(Location.newInstance("loc")).setTimeWindow(null).build();
     }
 
     @Test
     public void whenSettingTimeWindow_itShouldBeSetCorrectly() {
-        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc")).setTimeWindow(TimeWindow.newInstance(1.0, 2.0)).build();
+        ServiceJob s = new ServiceJob.Builder("s").setLocation(Location.newInstance("loc")).setTimeWindow(TimeWindow.newInstance(1.0, 2.0)).build();
         assertEquals(1.0, s.getActivity().getSingleTimeWindow().getStart(), 0.01);
         assertEquals(2.0, s.getActivity().getSingleTimeWindow().getEnd(), 0.01);
     }
 
     @Test
     public void whenAddingSkills_theyShouldBeAddedCorrectly() {
-        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
+        ServiceJob s = new ServiceJob.Builder("s").setLocation(Location.newInstance("loc"))
                         .addRequiredSkill("drill").addRequiredSkill("screwdriver").build();
         assertTrue(s.getRequiredSkills().containsSkill("drill"));
         assertTrue(s.getRequiredSkills().containsSkill("drill"));
@@ -182,7 +182,7 @@ public void whenAddingSkills_theyShouldBeAddedCorrectly() {
 
     @Test
     public void whenAddingSkillsCaseSens_theyShouldBeAddedCorrectly() {
-        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
+        ServiceJob s = new ServiceJob.Builder("s").setLocation(Location.newInstance("loc"))
                         .addRequiredSkill("DriLl").addRequiredSkill("screwDriver").build();
         assertTrue(s.getRequiredSkills().containsSkill("drill"));
         assertTrue(s.getRequiredSkills().containsSkill("drilL"));
@@ -192,7 +192,7 @@ public void whenAddingSkillsCaseSens_theyShouldBeAddedCorrectly() {
     public void whenAddingSeveralTimeWindows_itShouldBeSetCorrectly() {
         TimeWindow tw1 = TimeWindow.newInstance(1.0, 2.0);
         TimeWindow tw2 = TimeWindow.newInstance(3.0, 5.0);
-        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
+        ServiceJob s = new ServiceJob.Builder("s").setLocation(Location.newInstance("loc"))
                         .addTimeWindow(tw1)
                         .addTimeWindow(tw2)
                         .build();
@@ -203,7 +203,7 @@ public void whenAddingSeveralTimeWindows_itShouldBeSetCorrectly() {
 
     @Test
     public void whenAddingTimeWindow_itShouldBeSetCorrectly() {
-        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
+        ServiceJob s = new ServiceJob.Builder("s").setLocation(Location.newInstance("loc"))
                         .addTimeWindow(TimeWindow.newInstance(1.0, 2.0)).build();
         assertEquals(1.0, s.getActivity().getSingleTimeWindow().getStart(), 0.01);
         assertEquals(2.0, s.getActivity().getSingleTimeWindow().getEnd(), 0.01);
@@ -212,7 +212,7 @@ public void whenAddingTimeWindow_itShouldBeSetCorrectly() {
 
     @Test
     public void whenAddingSkillsCaseSensV2_theyShouldBeAddedCorrectly() {
-        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
+        ServiceJob s = new ServiceJob.Builder("s").setLocation(Location.newInstance("loc"))
                         .addRequiredSkill("screwDriver").build();
         assertFalse(s.getRequiredSkills().containsSkill("drill"));
         assertFalse(s.getRequiredSkills().containsSkill("drilL"));
@@ -220,14 +220,14 @@ public void whenAddingSkillsCaseSensV2_theyShouldBeAddedCorrectly() {
 
     @Test
     public void nameShouldBeAssigned() {
-        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
+        ServiceJob s = new ServiceJob.Builder("s").setLocation(Location.newInstance("loc"))
                         .setName("name").build();
         assertEquals("name", s.getName());
     }
 
     @Test
     public void shouldKnowMultipleTimeWindows() {
-        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
+        ServiceJob s = new ServiceJob.Builder("s").setLocation(Location.newInstance("loc"))
                         .addTimeWindow(TimeWindow.newInstance(0., 10.)).addTimeWindow(TimeWindow.newInstance(20., 30.))
                         .setName("name").build();
         assertEquals(2, s.getActivity().getTimeWindows().size());
@@ -235,7 +235,7 @@ public void shouldKnowMultipleTimeWindows() {
 
     @Test(expected = IllegalArgumentException.class)
     public void whenMultipleTWOverlap_throwEx() {
-        new Service.Builder("s").setLocation(Location.newInstance("loc"))
+        new ServiceJob.Builder("s").setLocation(Location.newInstance("loc"))
         .addTimeWindow(TimeWindow.newInstance(0., 10.))
         .addTimeWindow(TimeWindow.newInstance(5., 30.))
         .setName("name").build();
@@ -243,7 +243,7 @@ public void whenMultipleTWOverlap_throwEx() {
 
     @Test(expected = IllegalArgumentException.class)
     public void whenMultipleTWOverlap2_throwEx() {
-        new Service.Builder("s").setLocation(Location.newInstance("loc"))
+        new ServiceJob.Builder("s").setLocation(Location.newInstance("loc"))
         .addTimeWindow(TimeWindow.newInstance(20., 30.))
         .addTimeWindow(TimeWindow.newInstance(0., 25.))
         .setName("name").build();
@@ -251,35 +251,35 @@ public void whenMultipleTWOverlap2_throwEx() {
 
     @Test
     public void whenSettingPriorities_itShouldBeSetCorrectly() {
-        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
+        ServiceJob s = new ServiceJob.Builder("s").setLocation(Location.newInstance("loc"))
                         .setPriority(1).build();
         assertEquals(1, s.getPriority());
     }
 
     @Test
     public void whenSettingPriorities_itShouldBeSetCorrectly2() {
-        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
+        ServiceJob s = new ServiceJob.Builder("s").setLocation(Location.newInstance("loc"))
                         .setPriority(3).build();
         assertEquals(3, s.getPriority());
     }
 
     @Test
     public void whenNotSettingPriorities_defaultShouldBe2() {
-        Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
+        ServiceJob s = new ServiceJob.Builder("s").setLocation(Location.newInstance("loc"))
                         .build();
         assertEquals(2, s.getPriority());
     }
 
     @Test(expected = IllegalArgumentException.class)
     public void whenSettingIncorrectPriorities_itShouldThrowException() {
-        new Service.Builder("s").setLocation(Location.newInstance("loc"))
+        new ServiceJob.Builder("s").setLocation(Location.newInstance("loc"))
         .setPriority(30).build();
 
     }
 
     @Test(expected = IllegalArgumentException.class)
     public void whenSettingIncorrectPriorities_itShouldThrowException2() {
-        new Service.Builder("s").setLocation(Location.newInstance("loc"))
+        new ServiceJob.Builder("s").setLocation(Location.newInstance("loc"))
         .setPriority(0).build();
 
     }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ShipmentTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ShipmentJobTest.java
similarity index 77%
rename from jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ShipmentTest.java
rename to jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ShipmentJobTest.java
index 8950e60af..6b1259eed 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ShipmentTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ShipmentJobTest.java
@@ -33,13 +33,13 @@
 import com.graphhopper.jsprit.core.util.Coordinate;
 import com.graphhopper.jsprit.core.util.TestUtils;
 
-public class ShipmentTest {
+public class ShipmentJobTest {
 
     @Test
     public void whenTwoShipmentsHaveTheSameId_theyReferencesShouldBeUnEqual() {
-        Shipment one = Shipment.Builder.newInstance("s").addSizeDimension(0, 10).setPickupLocation(Location.Builder.newInstance().setId("foo").build()).
+        ShipmentJob one = new ShipmentJob.Builder("s").addSizeDimension(0, 10).setPickupLocation(Location.Builder.newInstance().setId("foo").build()).
                         setDeliveryLocation(TestUtils.loc("foofoo")).setPickupServiceTime(10).setDeliveryServiceTime(20).build();
-        Shipment two = Shipment.Builder.newInstance("s").addSizeDimension(0, 10).setPickupLocation(Location.Builder.newInstance().setId("foo").build()).
+        ShipmentJob two = new ShipmentJob.Builder("s").addSizeDimension(0, 10).setPickupLocation(Location.Builder.newInstance().setId("foo").build()).
                         setDeliveryLocation(TestUtils.loc("foofoo")).setPickupServiceTime(10).setDeliveryServiceTime(20).build();
 
         assertTrue(one != two);
@@ -47,7 +47,7 @@ public void whenTwoShipmentsHaveTheSameId_theyReferencesShouldBeUnEqual() {
 
     @Test
     public void sizeAtStartAndEndShouldBeCorrect() {
-        Shipment one = Shipment.Builder.newInstance("s").addSizeDimension(0, 10).addSizeDimension(1, 5).setPickupLocation(Location.Builder.newInstance().setId("foo").build()).
+        ShipmentJob one = new ShipmentJob.Builder("s").addSizeDimension(0, 10).addSizeDimension(1, 5).setPickupLocation(Location.Builder.newInstance().setId("foo").build()).
                         setDeliveryLocation(TestUtils.loc("foofoo")).setPickupServiceTime(10).setDeliveryServiceTime(20).build();
         SizeDimension cap = SizeDimension.Builder.newInstance().addDimension(0, 0).addDimension(1, 0).build();
         assertTrue(one.getSizeAtStart().equals(cap));
@@ -56,9 +56,9 @@ public void sizeAtStartAndEndShouldBeCorrect() {
 
     @Test
     public void whenTwoShipmentsHaveTheSameId_theyShouldBeEqual() {
-        Shipment one = Shipment.Builder.newInstance("s").addSizeDimension(0, 10).setPickupLocation(Location.Builder.newInstance().setId("foo").build()).
+        ShipmentJob one = new ShipmentJob.Builder("s").addSizeDimension(0, 10).setPickupLocation(Location.Builder.newInstance().setId("foo").build()).
                         setDeliveryLocation(TestUtils.loc("foofoo")).setPickupServiceTime(10).setDeliveryServiceTime(20).build();
-        Shipment two = Shipment.Builder.newInstance("s").addSizeDimension(0, 10).setPickupLocation(Location.Builder.newInstance().setId("foo").build()).
+        ShipmentJob two = new ShipmentJob.Builder("s").addSizeDimension(0, 10).setPickupLocation(Location.Builder.newInstance().setId("foo").build()).
                         setDeliveryLocation(TestUtils.loc("foofoo")).setPickupServiceTime(10).setDeliveryServiceTime(20).build();
 
         assertTrue(one.equals(two));
@@ -66,7 +66,7 @@ public void whenTwoShipmentsHaveTheSameId_theyShouldBeEqual() {
 
     @Test
     public void whenShipmentIsInstantiatedWithASizeOf10_theSizeShouldBe10() {
-        Shipment one = Shipment.Builder.newInstance("s").addSizeDimension(0, 10).setPickupLocation(Location.Builder.newInstance().setId("foo").build()).
+        ShipmentJob one = new ShipmentJob.Builder("s").addSizeDimension(0, 10).setPickupLocation(Location.Builder.newInstance().setId("foo").build()).
                         setDeliveryLocation(TestUtils.loc("foofoo")).setPickupServiceTime(10).setDeliveryServiceTime(20).build();
         assertEquals(10, one.getSize().get(0));
     }
@@ -74,7 +74,7 @@ public void whenShipmentIsInstantiatedWithASizeOf10_theSizeShouldBe10() {
     @Test(expected = IllegalArgumentException.class)
     public void whenShipmentIsBuiltWithNegativeDemand_itShouldThrowException() {
         @SuppressWarnings("unused")
-        Shipment one = Shipment.Builder.newInstance("s").addSizeDimension(0, -10)
+        ShipmentJob one = new ShipmentJob.Builder("s").addSizeDimension(0, -10)
         .setPickupLocation(Location.Builder.newInstance().setId("foo").build())
         .setDeliveryLocation(TestUtils.loc("foofoo")).build();
     }
@@ -82,7 +82,7 @@ public void whenShipmentIsBuiltWithNegativeDemand_itShouldThrowException() {
     @Test(expected = IllegalArgumentException.class)
     public void whenShipmentIsBuiltWithNegativeDemand_itShouldThrowException_v2() {
         @SuppressWarnings("unused")
-        Shipment one = Shipment.Builder.newInstance("s").addSizeDimension(0, -10)
+        ShipmentJob one = new ShipmentJob.Builder("s").addSizeDimension(0, -10)
         .setPickupLocation(Location.Builder.newInstance().setId("foo").build())
         .setDeliveryLocation(TestUtils.loc("foofoo")).build();
     }
@@ -90,32 +90,32 @@ public void whenShipmentIsBuiltWithNegativeDemand_itShouldThrowException_v2() {
     @Test(expected = IllegalArgumentException.class)
     public void whenIdIsNull_itShouldThrowException() {
         @SuppressWarnings("unused")
-        Shipment one = Shipment.Builder.newInstance(null).addSizeDimension(0, 10)
+        ShipmentJob one = new ShipmentJob.Builder(null).addSizeDimension(0, 10)
         .setPickupLocation(Location.Builder.newInstance().setId("foo").build())
         .setDeliveryLocation(TestUtils.loc("foofoo")).build();
     }
 
     @Test
     public void whenCallingForANewBuilderInstance_itShouldReturnBuilderCorrectly() {
-        Shipment.Builder builder = Shipment.Builder.newInstance("s");
+        ShipmentJob.Builder builder = new ShipmentJob.Builder("s");
         assertNotNull(builder);
     }
 
     @Test(expected = IllegalArgumentException.class)
     public void whenNeitherPickupLocationIdNorPickupCoord_itThrowsException() {
         @SuppressWarnings("unused")
-        Shipment s = Shipment.Builder.newInstance("s").setDeliveryLocation(TestUtils.loc("delLoc")).build();
+        ShipmentJob s = new ShipmentJob.Builder("s").setDeliveryLocation(TestUtils.loc("delLoc")).build();
     }
 
     @Test(expected = IllegalArgumentException.class)
     public void whenNeitherDeliveryLocationIdNorDeliveryCoord_itThrowsException() {
         @SuppressWarnings("unused")
-        Shipment s = Shipment.Builder.newInstance("s").setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        ShipmentJob s = new ShipmentJob.Builder("s").setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
     }
 
     @Test
     public void whenPickupLocationIdIsSet_itShouldBeDoneCorrectly() {
-        Shipment s = Shipment.Builder.newInstance("s").setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        ShipmentJob s = new ShipmentJob.Builder("s").setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         assertEquals("pickLoc", s.getPickupActivity().getLocation().getId());
         assertEquals("pickLoc", s.getPickupActivity().getLocation().getId());
     }
@@ -123,12 +123,12 @@ public void whenPickupLocationIdIsSet_itShouldBeDoneCorrectly() {
     @Test(expected = IllegalArgumentException.class)
     public void whenPickupLocationIsNull_itThrowsException() {
         @SuppressWarnings("unused")
-        Shipment.Builder builder = Shipment.Builder.newInstance("s").setPickupLocation(Location.Builder.newInstance().setId(null).build());
+        ShipmentJob.Builder builder = new ShipmentJob.Builder("s").setPickupLocation(Location.Builder.newInstance().setId(null).build());
     }
 
     @Test
     public void whenPickupCoordIsSet_itShouldBeDoneCorrectly() {
-        Shipment s = Shipment.Builder.newInstance("s")
+        ShipmentJob s = new ShipmentJob.Builder("s")
                         .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").setCoordinate(Coordinate.newInstance(1, 2)).build()).build();
         assertEquals(1.0, s.getPickupActivity().getLocation().getCoordinate().getX(), 0.01);
         assertEquals(2.0, s.getPickupActivity().getLocation().getCoordinate().getY(), 0.01);
@@ -139,7 +139,7 @@ public void whenPickupCoordIsSet_itShouldBeDoneCorrectly() {
 
     @Test
     public void whenDeliveryLocationIdIsSet_itShouldBeDoneCorrectly() {
-        Shipment s = Shipment.Builder.newInstance("s")
+        ShipmentJob s = new ShipmentJob.Builder("s")
                         .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         assertEquals("delLoc", s.getDeliveryActivity().getLocation().getId());
         assertEquals("delLoc", s.getDeliveryActivity().getLocation().getId());
@@ -148,7 +148,7 @@ public void whenDeliveryLocationIdIsSet_itShouldBeDoneCorrectly() {
 
     @Test
     public void whenDeliveryCoordIsSet_itShouldBeDoneCorrectly() {
-        Shipment s = Shipment.Builder.newInstance("s").setDeliveryLocation(TestUtils.loc("delLoc", Coordinate.newInstance(1, 2)))
+        ShipmentJob s = new ShipmentJob.Builder("s").setDeliveryLocation(TestUtils.loc("delLoc", Coordinate.newInstance(1, 2)))
                         .setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build())
                         .build();
         assertEquals(1.0, s.getDeliveryActivity().getLocation().getCoordinate().getX(), 0.01);
@@ -159,21 +159,21 @@ public void whenDeliveryCoordIsSet_itShouldBeDoneCorrectly() {
 
     @Test
     public void whenPickupServiceTimeIsNotSet_itShouldBeZero() {
-        Shipment s = Shipment.Builder.newInstance("s")
+        ShipmentJob s = new ShipmentJob.Builder("s")
                         .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         assertEquals(0.0, s.getPickupActivity().getOperationTime(), 0.01);
     }
 
     @Test
     public void whenDeliveryServiceTimeIsNotSet_itShouldBeZero() {
-        Shipment s = Shipment.Builder.newInstance("s")
+        ShipmentJob s = new ShipmentJob.Builder("s")
                         .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         assertEquals(0.0, s.getDeliveryActivity().getOperationTime(), 0.01);
     }
 
     @Test
     public void whenPickupServiceTimeIsSet_itShouldBeDoneCorrectly() {
-        Shipment s = Shipment.Builder.newInstance("s")
+        ShipmentJob s = new ShipmentJob.Builder("s")
                         .setPickupServiceTime(2.0)
                         .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         assertEquals(2.0, s.getPickupActivity().getOperationTime(), 0.01);
@@ -182,13 +182,13 @@ public void whenPickupServiceTimeIsSet_itShouldBeDoneCorrectly() {
     @Test(expected = IllegalArgumentException.class)
     public void whenPickupServiceIsSmallerThanZero_itShouldThrowException() {
         @SuppressWarnings("unused")
-        Shipment s = Shipment.Builder.newInstance("s").setPickupServiceTime(-2.0)
+        ShipmentJob s = new ShipmentJob.Builder("s").setPickupServiceTime(-2.0)
         .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
     }
 
     @Test
     public void whenDeliveryServiceTimeIsSet_itShouldBeDoneCorrectly() {
-        Shipment s = Shipment.Builder.newInstance("s").setDeliveryServiceTime(2.0)
+        ShipmentJob s = new ShipmentJob.Builder("s").setDeliveryServiceTime(2.0)
                         .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         assertEquals(2.0, s.getDeliveryActivity().getOperationTime(), 0.01);
     }
@@ -196,12 +196,12 @@ public void whenDeliveryServiceTimeIsSet_itShouldBeDoneCorrectly() {
     @Test(expected = IllegalArgumentException.class)
     public void whenDeliveryServiceIsSmallerThanZero_itShouldThrowException() {
         @SuppressWarnings("unused")
-        Shipment s = Shipment.Builder.newInstance("s").setDeliveryServiceTime(-2.0).setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        ShipmentJob s = new ShipmentJob.Builder("s").setDeliveryServiceTime(-2.0).setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
     }
 
     @Test
     public void whenPickupTimeWindowIsNotSet_itShouldBeTheDefaultOne() {
-        Shipment s = Shipment.Builder.newInstance("s").setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        ShipmentJob s = new ShipmentJob.Builder("s").setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         assertEquals(0.0, s.getPickupActivity().getSingleTimeWindow().getStart(),
                         0.01);
         assertEquals(Double.MAX_VALUE,
@@ -211,12 +211,12 @@ public void whenPickupTimeWindowIsNotSet_itShouldBeTheDefaultOne() {
     @Test(expected = IllegalArgumentException.class)
     public void whenPickupTimeWindowIsNull_itShouldThrowException() {
         @SuppressWarnings("unused")
-        Shipment s = Shipment.Builder.newInstance("s").setPickupTimeWindow(null).setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        ShipmentJob s = new ShipmentJob.Builder("s").setPickupTimeWindow(null).setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
     }
 
     @Test
     public void whenPickupTimeWindowIsSet_itShouldBeDoneCorrectly() {
-        Shipment s = Shipment.Builder.newInstance("s").setPickupTimeWindow(TimeWindow.newInstance(1, 2))
+        ShipmentJob s = new ShipmentJob.Builder("s").setPickupTimeWindow(TimeWindow.newInstance(1, 2))
                         .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         assertEquals(1.0, s.getPickupActivity().getSingleTimeWindow().getStart(),
                         0.01);
@@ -225,7 +225,7 @@ public void whenPickupTimeWindowIsSet_itShouldBeDoneCorrectly() {
 
     @Test
     public void whenDeliveryTimeWindowIsNotSet_itShouldBeTheDefaultOne() {
-        Shipment s = Shipment.Builder.newInstance("s").setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        ShipmentJob s = new ShipmentJob.Builder("s").setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         assertEquals(0.0, s.getDeliveryActivity().getSingleTimeWindow().getStart(),
                         0.01);
         assertEquals(Double.MAX_VALUE,
@@ -235,12 +235,12 @@ public void whenDeliveryTimeWindowIsNotSet_itShouldBeTheDefaultOne() {
     @Test(expected = IllegalArgumentException.class)
     public void whenDeliveryTimeWindowIsNull_itShouldThrowException() {
         @SuppressWarnings("unused")
-        Shipment s = Shipment.Builder.newInstance("s").setDeliveryTimeWindow(null).setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        ShipmentJob s = new ShipmentJob.Builder("s").setDeliveryTimeWindow(null).setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
     }
 
     @Test
     public void whenDeliveryTimeWindowIsSet_itShouldBeDoneCorrectly() {
-        Shipment s = Shipment.Builder.newInstance("s").setDeliveryTimeWindow(TimeWindow.newInstance(1, 2))
+        ShipmentJob s = new ShipmentJob.Builder("s").setDeliveryTimeWindow(TimeWindow.newInstance(1, 2))
                         .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         assertEquals(1.0, s.getDeliveryActivity().getSingleTimeWindow().getStart(),
                         0.01);
@@ -250,7 +250,7 @@ public void whenDeliveryTimeWindowIsSet_itShouldBeDoneCorrectly() {
 
     @Test
     public void whenUsingAddDeliveryTimeWindow_itShouldBeDoneCorrectly() {
-        Shipment s = Shipment.Builder.newInstance("s").addDeliveryTimeWindow(TimeWindow.newInstance(1, 2))
+        ShipmentJob s = new ShipmentJob.Builder("s").addDeliveryTimeWindow(TimeWindow.newInstance(1, 2))
                         .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         assertEquals(1.0, s.getDeliveryActivity().getSingleTimeWindow().getStart(),
                         0.01);
@@ -260,7 +260,7 @@ public void whenUsingAddDeliveryTimeWindow_itShouldBeDoneCorrectly() {
 
     @Test
     public void whenUsingAddDeliveryTimeWindow2_itShouldBeDoneCorrectly() {
-        Shipment s = Shipment.Builder.newInstance("s").addDeliveryTimeWindow(1, 2)
+        ShipmentJob s = new ShipmentJob.Builder("s").addDeliveryTimeWindow(1, 2)
                         .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         assertEquals(1.0, s.getDeliveryActivity().getSingleTimeWindow().getStart(),
                         0.01);
@@ -272,7 +272,7 @@ public void whenUsingAddDeliveryTimeWindow2_itShouldBeDoneCorrectly() {
     public void whenAddingMultipleDeliveryTimeWindows_itShouldBeDoneCorrectly() {
         TimeWindow tw1 = TimeWindow.newInstance(1, 2);
         TimeWindow tw2 = TimeWindow.newInstance(4, 5);
-        Shipment s = Shipment.Builder.newInstance("s").addDeliveryTimeWindow(tw1).addDeliveryTimeWindow(tw2)
+        ShipmentJob s = new ShipmentJob.Builder("s").addDeliveryTimeWindow(tw1).addDeliveryTimeWindow(tw2)
                         .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         assertEquals(s.getDeliveryActivity().getTimeWindows().size(), 2);
         assertThat(s.getDeliveryActivity().getTimeWindows(), hasItem(is(tw1)));
@@ -281,7 +281,7 @@ public void whenAddingMultipleDeliveryTimeWindows_itShouldBeDoneCorrectly() {
 
     @Test(expected = IllegalArgumentException.class)
     public void whenAddingMultipleOverlappingDeliveryTimeWindows_itShouldThrowException() {
-        Shipment s = Shipment.Builder.newInstance("s").addDeliveryTimeWindow(1, 3).addDeliveryTimeWindow(2, 5)
+        ShipmentJob s = new ShipmentJob.Builder("s").addDeliveryTimeWindow(1, 3).addDeliveryTimeWindow(2, 5)
                         .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         assertEquals(1.0, s.getDeliveryActivity().getSingleTimeWindow().getStart(),
                         0.01);
@@ -292,7 +292,7 @@ public void whenAddingMultipleOverlappingDeliveryTimeWindows_itShouldThrowExcept
 
     @Test
     public void whenUsingAddPickupTimeWindow_itShouldBeDoneCorrectly() {
-        Shipment s = Shipment.Builder.newInstance("s").addPickupTimeWindow(TimeWindow.newInstance(1, 2))
+        ShipmentJob s = new ShipmentJob.Builder("s").addPickupTimeWindow(TimeWindow.newInstance(1, 2))
                         .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         assertEquals(1.0, s.getPickupActivity().getSingleTimeWindow().getStart(),
                         0.01);
@@ -301,7 +301,7 @@ public void whenUsingAddPickupTimeWindow_itShouldBeDoneCorrectly() {
 
     @Test
     public void whenUsingAddPickupTimeWindow2_itShouldBeDoneCorrectly() {
-        Shipment s = Shipment.Builder.newInstance("s").addPickupTimeWindow(1, 2)
+        ShipmentJob s = new ShipmentJob.Builder("s").addPickupTimeWindow(1, 2)
                         .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         assertEquals(1.0, s.getPickupActivity().getSingleTimeWindow().getStart(),
                         0.01);
@@ -312,7 +312,7 @@ public void whenUsingAddPickupTimeWindow2_itShouldBeDoneCorrectly() {
     public void whenAddingMultiplePickupTimeWindows_itShouldBeDoneCorrectly() {
         TimeWindow tw1 = TimeWindow.newInstance(1, 2);
         TimeWindow tw2 = TimeWindow.newInstance(4, 5);
-        Shipment s = Shipment.Builder.newInstance("s").addPickupTimeWindow(tw1).addPickupTimeWindow(tw2)
+        ShipmentJob s = new ShipmentJob.Builder("s").addPickupTimeWindow(tw1).addPickupTimeWindow(tw2)
                         .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         assertEquals(s.getPickupActivity().getTimeWindows().size(), 2);
         assertThat(s.getPickupActivity().getTimeWindows(), hasItem(is(tw1)));
@@ -321,7 +321,7 @@ public void whenAddingMultiplePickupTimeWindows_itShouldBeDoneCorrectly() {
 
     @Test(expected = IllegalArgumentException.class)
     public void whenAddingMultipleOverlappingPickupTimeWindows_itShouldThrowException() {
-        Shipment s = Shipment.Builder.newInstance("s").addPickupTimeWindow(1, 3).addPickupTimeWindow(2, 5)
+        ShipmentJob s = new ShipmentJob.Builder("s").addPickupTimeWindow(1, 3).addPickupTimeWindow(2, 5)
                         .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         assertEquals(1.0, s.getPickupActivity().getSingleTimeWindow().getStart(), 0.01);
         assertEquals(2.0, s.getPickupActivity().getSingleTimeWindow().getEnd(), 0.01);
@@ -331,7 +331,7 @@ public void whenAddingMultipleOverlappingPickupTimeWindows_itShouldThrowExceptio
     @Test(expected = IllegalArgumentException.class)
     public void whenShipmentHasNegativeCapacityVal_throwIllegalStateExpception() {
         @SuppressWarnings("unused")
-        Shipment one = Shipment.Builder.newInstance("s").setPickupLocation(Location.Builder.newInstance().setId("foo").build())
+        ShipmentJob one = new ShipmentJob.Builder("s").setPickupLocation(Location.Builder.newInstance().setId("foo").build())
         .setDeliveryLocation(TestUtils.loc("foofoo"))
         .addSizeDimension(0, -2)
         .build();
@@ -339,7 +339,7 @@ public void whenShipmentHasNegativeCapacityVal_throwIllegalStateExpception() {
 
     @Test
     public void whenAddingTwoCapDimension_nuOfDimsShouldBeTwo() {
-        Shipment one = Shipment.Builder.newInstance("s").setPickupLocation(Location.Builder.newInstance().setId("foo").build())
+        ShipmentJob one = new ShipmentJob.Builder("s").setPickupLocation(Location.Builder.newInstance().setId("foo").build())
                         .setDeliveryLocation(TestUtils.loc("foofoo"))
                         .addSizeDimension(0, 2)
                         .addSizeDimension(1, 4)
@@ -349,7 +349,7 @@ public void whenAddingTwoCapDimension_nuOfDimsShouldBeTwo() {
 
     @Test
     public void whenShipmentIsBuiltWithoutSpecifyingCapacity_itShouldHvCapWithOneDimAndDimValOfZero() {
-        Shipment one = Shipment.Builder.newInstance("s")
+        ShipmentJob one = new ShipmentJob.Builder("s")
                         .setPickupLocation(Location.Builder.newInstance().setId("foo").setCoordinate(Coordinate.newInstance(0, 0)).build())
                         .setDeliveryLocation(TestUtils.loc("foofoo")).build();
         assertEquals(1, one.getSize().getNuOfDimensions());
@@ -358,7 +358,7 @@ public void whenShipmentIsBuiltWithoutSpecifyingCapacity_itShouldHvCapWithOneDim
 
     @Test
     public void whenShipmentIsBuiltWithConstructorWhereSizeIsSpecified_capacityShouldBeSetCorrectly() {
-        Shipment one = Shipment.Builder.newInstance("s").addSizeDimension(0, 1)
+        ShipmentJob one = new ShipmentJob.Builder("s").addSizeDimension(0, 1)
                         .setPickupLocation(Location.Builder.newInstance().setId("foo").setCoordinate(Coordinate.newInstance(0, 0)).build())
                         .setDeliveryLocation(TestUtils.loc("foofoo")).build();
         assertEquals(1, one.getSize().getNuOfDimensions());
@@ -367,7 +367,7 @@ public void whenShipmentIsBuiltWithConstructorWhereSizeIsSpecified_capacityShoul
 
     @Test
     public void whenAddingSkills_theyShouldBeAddedCorrectly() {
-        Shipment s = Shipment.Builder.newInstance("s").setPickupLocation(Location.Builder.newInstance().setId("loc").build())
+        ShipmentJob s = new ShipmentJob.Builder("s").setPickupLocation(Location.Builder.newInstance().setId("loc").build())
                         .setDeliveryLocation(TestUtils.loc("delLoc"))
                         .addRequiredSkill("drill").addRequiredSkill("screwdriver").build();
         assertTrue(s.getRequiredSkills().containsSkill("drill"));
@@ -377,7 +377,7 @@ public void whenAddingSkills_theyShouldBeAddedCorrectly() {
 
     @Test
     public void whenAddingSkillsCaseSens_theyShouldBeAddedCorrectly() {
-        Shipment s = Shipment.Builder.newInstance("s")
+        ShipmentJob s = new ShipmentJob.Builder("s")
                         .setPickupLocation(Location.Builder.newInstance().setId("pick").build())
                         .setDeliveryLocation(TestUtils.loc("del"))
                         .addRequiredSkill("DriLl").addRequiredSkill("screwDriver").build();
@@ -387,7 +387,7 @@ public void whenAddingSkillsCaseSens_theyShouldBeAddedCorrectly() {
 
     @Test
     public void whenAddingSkillsCaseSensV2_theyShouldBeAddedCorrectly() {
-        Shipment s = Shipment.Builder.newInstance("s").setPickupLocation(Location.Builder.newInstance().setId("loc").build())
+        ShipmentJob s = new ShipmentJob.Builder("s").setPickupLocation(Location.Builder.newInstance().setId("loc").build())
                         .setDeliveryLocation(TestUtils.loc("del"))
                         .addRequiredSkill("screwDriver").build();
         assertFalse(s.getRequiredSkills().containsSkill("drill"));
@@ -396,7 +396,7 @@ public void whenAddingSkillsCaseSensV2_theyShouldBeAddedCorrectly() {
 
     @Test
     public void nameShouldBeAssigned() {
-        Shipment s = Shipment.Builder.newInstance("s").setPickupLocation(Location.Builder.newInstance().setId("loc").build())
+        ShipmentJob s = new ShipmentJob.Builder("s").setPickupLocation(Location.Builder.newInstance().setId("loc").build())
                         .setDeliveryLocation(TestUtils.loc("del"))
                         .setName("name").build();
         assertEquals("name", s.getName());
@@ -404,7 +404,7 @@ public void nameShouldBeAssigned() {
 
     @Test
     public void whenSettingLocation_itShouldWork() {
-        Shipment s = Shipment.Builder.newInstance("s").setPickupLocation(Location.Builder.newInstance().setId("loc").build())
+        ShipmentJob s = new ShipmentJob.Builder("s").setPickupLocation(Location.Builder.newInstance().setId("loc").build())
                         .setDeliveryLocation(Location.Builder.newInstance().setId("del").build()).build();
         assertEquals("loc", s.getPickupActivity().getLocation().getId());
         assertEquals("loc", s.getPickupActivity().getLocation().getId());
@@ -414,7 +414,7 @@ public void whenSettingLocation_itShouldWork() {
 
     @Test
     public void whenSettingPriorities_itShouldBeSetCorrectly() {
-        Shipment s = Shipment.Builder.newInstance("s").setPickupLocation(Location.newInstance("loc"))
+        ShipmentJob s = new ShipmentJob.Builder("s").setPickupLocation(Location.newInstance("loc"))
                         .setDeliveryLocation(Location.newInstance("loc"))
                         .setPriority(1).build();
         assertEquals(1, s.getPriority());
@@ -422,7 +422,7 @@ public void whenSettingPriorities_itShouldBeSetCorrectly() {
 
     @Test
     public void whenSettingPriorities_itShouldBeSetCorrectly2() {
-        Shipment s = Shipment.Builder.newInstance("s").setPickupLocation(Location.newInstance("loc"))
+        ShipmentJob s = new ShipmentJob.Builder("s").setPickupLocation(Location.newInstance("loc"))
                         .setDeliveryLocation(Location.newInstance("loc"))
                         .setPriority(3).build();
         assertEquals(3, s.getPriority());
@@ -430,7 +430,7 @@ public void whenSettingPriorities_itShouldBeSetCorrectly2() {
 
     @Test
     public void whenNotSettingPriorities_defaultShouldBe2() {
-        Shipment s = Shipment.Builder.newInstance("s").setPickupLocation(Location.newInstance("loc"))
+        ShipmentJob s = new ShipmentJob.Builder("s").setPickupLocation(Location.newInstance("loc"))
                         .setDeliveryLocation(Location.newInstance("loc"))
                         .build();
         assertEquals(2, s.getPriority());
@@ -438,7 +438,7 @@ public void whenNotSettingPriorities_defaultShouldBe2() {
 
     @Test(expected = IllegalArgumentException.class)
     public void whenSettingIncorrectPriorities_itShouldThrowException() {
-        Shipment.Builder.newInstance("s").setPickupLocation(Location.newInstance("loc"))
+        new ShipmentJob.Builder("s").setPickupLocation(Location.newInstance("loc"))
         .setDeliveryLocation(Location.newInstance("loc"))
         .setPriority(30).build();
 
@@ -446,7 +446,7 @@ public void whenSettingIncorrectPriorities_itShouldThrowException() {
 
     @Test(expected = IllegalArgumentException.class)
     public void whenSettingIncorrectPriorities_itShouldThrowException2() {
-        Shipment.Builder.newInstance("s").setPickupLocation(Location.newInstance("loc"))
+        new ShipmentJob.Builder("s").setPickupLocation(Location.newInstance("loc"))
         .setDeliveryLocation(Location.newInstance("loc"))
         .setPriority(0).build();
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/legacy/LegacyDeliveryTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/legacy/LegacyDeliveryTest.java
new file mode 100644
index 000000000..4aa1a55b2
--- /dev/null
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/legacy/LegacyDeliveryTest.java
@@ -0,0 +1,127 @@
+/*
+ * Licensed to GraphHopper GmbH under one or more contributor
+ * license agreements. See the NOTICE file distributed with this work for
+ * additional information regarding copyright ownership.
+ *
+ * GraphHopper GmbH licenses this file to you under the Apache License,
+ * Version 2.0 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.graphhopper.jsprit.core.problem.job.legacy;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertTrue;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import org.junit.Assert;
+import org.junit.Test;
+
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.job.Delivery;
+
+public class LegacyDeliveryTest {
+
+    @Test(expected = IllegalArgumentException.class)
+    public void whenNeitherLocationIdNorCoordIsSet_itThrowsException() {
+        Delivery.Builder.newInstance("p").build();
+    }
+
+    @Test
+    public void whenAddingTwoCapDimension_nuOfDimsShouldBeTwo() {
+        Delivery one = Delivery.Builder.newInstance("s").setLocation(Location.newInstance("foofoo"))
+                .addSizeDimension(0, 2)
+                .addSizeDimension(1, 4)
+                .build();
+        assertEquals(2, one.getSize().getNuOfDimensions());
+        assertEquals(2, one.getSize().get(0));
+        assertEquals(4, one.getSize().get(1));
+
+    }
+
+    @Test
+    public void whenPickupIsBuiltWithoutSpecifyingCapacity_itShouldHvCapWithOneDimAndDimValOfZero() {
+        Delivery one = Delivery.Builder.newInstance("s").setLocation(Location.newInstance("foofoo"))
+                .build();
+        assertEquals(1, one.getSize().getNuOfDimensions());
+        assertEquals(0, one.getSize().get(0));
+    }
+
+    @Test
+    public void whenPickupIsBuiltWithConstructorWhereSizeIsSpecified_capacityShouldBeSetCorrectly() {
+        Delivery one = Delivery.Builder.newInstance("s").addSizeDimension(0, 1).setLocation(Location.newInstance("foofoo"))
+                .build();
+        assertEquals(1, one.getSize().getNuOfDimensions());
+        assertEquals(1, one.getSize().get(0));
+    }
+
+    @Test
+    public void whenAddingSkills_theyShouldBeAddedCorrectly() {
+        Delivery s = Delivery.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+                .addRequiredSkill("drill").addRequiredSkill("screwdriver").build();
+        assertTrue(s.getRequiredSkills().containsSkill("drill"));
+        assertTrue(s.getRequiredSkills().containsSkill("ScrewDriver"));
+    }
+
+    @Test
+    public void whenAddingSkillsCaseSens_theyShouldBeAddedCorrectly() {
+        Delivery s = Delivery.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+                .addRequiredSkill("DriLl").addRequiredSkill("screwDriver").build();
+        assertTrue(s.getRequiredSkills().containsSkill("drill"));
+        assertTrue(s.getRequiredSkills().containsSkill("drilL"));
+    }
+
+    @Test
+    public void whenAddingSkillsCaseSensV2_theyShouldBeAddedCorrectly() {
+        Delivery s = Delivery.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+                .addRequiredSkill("screwDriver").build();
+        assertFalse(s.getRequiredSkills().containsSkill("drill"));
+        assertFalse(s.getRequiredSkills().containsSkill("drilL"));
+    }
+
+    @Test
+    public void nameShouldBeAssigned() {
+        Delivery s = Delivery.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+                .setName("name").build();
+        assertEquals("name", s.getName());
+    }
+
+    @Test
+    public void whenSettingPriorities_itShouldBeSetCorrectly(){
+        Delivery s = Delivery.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+                .setPriority(3).build();
+        Assert.assertEquals(3, s.getPriority());
+    }
+
+    @Test
+    public void whenNotSettingPriorities_defaultShouldBe(){
+        Delivery s = Delivery.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+                .build();
+        Assert.assertEquals(2, s.getPriority());
+    }
+
+
+    @Test
+    public void whenSettingUserData_itIsAssociatedWithTheJob() {
+        Delivery one = Delivery.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+                .setUserData(new HashMap<String, Object>()).build();
+        Delivery two = Delivery.Builder.newInstance("s2").setLocation(Location.newInstance("loc")).setUserData(42)
+                .build();
+        Delivery three = Delivery.Builder.newInstance("s3").setLocation(Location.newInstance("loc")).build();
+
+        assertTrue(one.getUserData() instanceof Map);
+        assertEquals(42, two.getUserData());
+        assertNull(three.getUserData());
+    }
+}
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/legacy/LegacyPickupTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/legacy/LegacyPickupTest.java
new file mode 100644
index 000000000..adb9e2f75
--- /dev/null
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/legacy/LegacyPickupTest.java
@@ -0,0 +1,127 @@
+/*
+ * Licensed to GraphHopper GmbH under one or more contributor
+ * license agreements. See the NOTICE file distributed with this work for
+ * additional information regarding copyright ownership.
+ *
+ * GraphHopper GmbH licenses this file to you under the Apache License,
+ * Version 2.0 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.graphhopper.jsprit.core.problem.job.legacy;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertTrue;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import org.junit.Assert;
+import org.junit.Test;
+
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.job.Pickup;
+
+public class LegacyPickupTest {
+
+    @Test(expected = IllegalArgumentException.class)
+    public void whenNeitherLocationIdNorCoordIsSet_itThrowsException() {
+        Pickup.Builder.newInstance("p").build();
+    }
+
+    @Test
+    public void whenAddingTwoCapDimension_nuOfDimsShouldBeTwo() {
+        Pickup one = Pickup.Builder.newInstance("s").setLocation(Location.newInstance("foofoo"))
+                .addSizeDimension(0, 2)
+                .addSizeDimension(1, 4)
+                .build();
+        assertEquals(2, one.getSize().getNuOfDimensions());
+        assertEquals(2, one.getSize().get(0));
+        assertEquals(4, one.getSize().get(1));
+
+    }
+
+    @Test
+    public void whenPickupIsBuiltWithoutSpecifyingCapacity_itShouldHvCapWithOneDimAndDimValOfZero() {
+        Pickup one = Pickup.Builder.newInstance("s").setLocation(Location.newInstance("foofoo"))
+                .build();
+        assertEquals(1, one.getSize().getNuOfDimensions());
+        assertEquals(0, one.getSize().get(0));
+    }
+
+    @Test
+    public void whenPickupIsBuiltWithConstructorWhereSizeIsSpecified_capacityShouldBeSetCorrectly() {
+        Pickup one = Pickup.Builder.newInstance("s").addSizeDimension(0, 1).setLocation(Location.newInstance("foofoo"))
+                .build();
+        assertEquals(1, one.getSize().getNuOfDimensions());
+        assertEquals(1, one.getSize().get(0));
+    }
+
+    @Test
+    public void whenAddingSkills_theyShouldBeAddedCorrectly() {
+        Pickup s = Pickup.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+                .addRequiredSkill("drill").addRequiredSkill("screwdriver").build();
+        assertTrue(s.getRequiredSkills().containsSkill("drill"));
+        assertTrue(s.getRequiredSkills().containsSkill("drill"));
+        assertTrue(s.getRequiredSkills().containsSkill("ScrewDriver"));
+    }
+
+    @Test
+    public void whenAddingSkillsCaseSens_theyShouldBeAddedCorrectly() {
+        Pickup s = Pickup.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+                .addRequiredSkill("DriLl").addRequiredSkill("screwDriver").build();
+        assertTrue(s.getRequiredSkills().containsSkill("drill"));
+        assertTrue(s.getRequiredSkills().containsSkill("drilL"));
+    }
+
+    @Test
+    public void whenAddingSkillsCaseSensV2_theyShouldBeAddedCorrectly() {
+        Pickup s = Pickup.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+                .addRequiredSkill("screwDriver").build();
+        assertFalse(s.getRequiredSkills().containsSkill("drill"));
+        assertFalse(s.getRequiredSkills().containsSkill("drilL"));
+    }
+
+    @Test
+    public void nameShouldBeAssigned() {
+        Pickup s = Pickup.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+                .setName("name").build();
+        assertEquals("name", s.getName());
+    }
+
+
+    @Test
+    public void whenSettingPriorities_itShouldBeSetCorrectly(){
+        Pickup s = Pickup.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+                .setPriority(3).build();
+        Assert.assertEquals(3, s.getPriority());
+    }
+
+    @Test
+    public void whenNotSettingPriorities_defaultShouldBe(){
+        Pickup s = Pickup.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+                .build();
+        Assert.assertEquals(2, s.getPriority());
+    }
+
+    @Test
+    public void whenSettingUserData_itIsAssociatedWithTheJob() {
+        Pickup one = Pickup.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+                .setUserData(new HashMap<String, Object>()).build();
+        Pickup two = Pickup.Builder.newInstance("s2").setLocation(Location.newInstance("loc")).setUserData(42).build();
+        Pickup three = Pickup.Builder.newInstance("s3").setLocation(Location.newInstance("loc")).build();
+
+        assertTrue(one.getUserData() instanceof Map);
+        assertEquals(42, two.getUserData());
+        assertNull(three.getUserData());
+    }
+}
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/legacy/LegacyServiceTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/legacy/LegacyServiceTest.java
new file mode 100644
index 000000000..bc7a90317
--- /dev/null
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/legacy/LegacyServiceTest.java
@@ -0,0 +1,297 @@
+/*
+ * Licensed to GraphHopper GmbH under one or more contributor
+ * license agreements. See the NOTICE file distributed with this work for
+ * additional information regarding copyright ownership.
+ *
+ * GraphHopper GmbH licenses this file to you under the Apache License,
+ * Version 2.0 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.graphhopper.jsprit.core.problem.job.legacy;
+
+import static org.hamcrest.core.Is.is;
+import static org.hamcrest.core.IsCollectionContaining.hasItem;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertThat;
+import static org.junit.Assert.assertTrue;
+
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Map;
+import java.util.Set;
+
+import org.junit.Assert;
+import org.junit.Test;
+
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
+
+public class LegacyServiceTest {
+
+    @Test
+    public void whenTwoServicesHaveTheSameId_theirReferencesShouldBeUnEqual() {
+        Service one = Service.Builder.newInstance("service").addSizeDimension(0, 10).setLocation(Location.newInstance("foo")).build();
+        Service two = Service.Builder.newInstance("service").addSizeDimension(0, 10).setLocation(Location.newInstance("fo")).build();
+
+        assertTrue(one != two);
+    }
+
+    @Test
+    public void whenTwoServicesHaveTheSameId_theyShouldBeEqual() {
+        Service one = Service.Builder.newInstance("service").addSizeDimension(0, 10).setLocation(Location.newInstance("foo")).build();
+        Service two = Service.Builder.newInstance("service").addSizeDimension(0, 10).setLocation(Location.newInstance("fo")).build();
+
+        assertTrue(one.equals(two));
+    }
+
+    @Test
+    public void noName() {
+        Set<Service> serviceSet = new HashSet<Service>();
+        Service one = Service.Builder.newInstance("service").addSizeDimension(0, 10).setLocation(Location.newInstance("foo")).build();
+        Service two = Service.Builder.newInstance("service").addSizeDimension(0, 10).setLocation(Location.newInstance("fo")).build();
+        serviceSet.add(one);
+        // assertTrue(serviceSet.contains(two));
+        serviceSet.remove(two);
+        assertTrue(serviceSet.isEmpty());
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void whenCapacityDimValueIsNegative_throwIllegalStateExpception() {
+        @SuppressWarnings("unused")
+        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("foo")).addSizeDimension(0, -10).build();
+    }
+
+    @Test
+    public void whenAddingTwoCapDimension_nuOfDimsShouldBeTwo() {
+        Service one = Service.Builder.newInstance("s").setLocation(Location.newInstance("foofoo"))
+                        .addSizeDimension(0, 2).addSizeDimension(1, 4).build();
+        assertEquals(2, one.getSize().getNuOfDimensions());
+    }
+
+    @Test
+    public void whenShipmentIsBuiltWithoutSpecifyingCapacity_itShouldHvCapWithOneDimAndDimValOfZero() {
+        Service one = Service.Builder.newInstance("s").setLocation(Location.newInstance("foofoo"))
+                        .build();
+        assertEquals(1, one.getSize().getNuOfDimensions());
+        assertEquals(0, one.getSize().get(0));
+    }
+
+    @Test
+    public void whenShipmentIsBuiltWithConstructorWhereSizeIsSpecified_capacityShouldBeSetCorrectly() {
+        Service one = Service.Builder.newInstance("s").addSizeDimension(0, 1).setLocation(Location.newInstance("foofoo"))
+                        .build();
+        assertEquals(1, one.getSize().getNuOfDimensions());
+        assertEquals(1, one.getSize().get(0));
+    }
+
+    @Test
+    public void whenCallingForNewInstanceOfBuilder_itShouldReturnBuilderCorrectly() {
+        Service.Builder builder = Service.Builder.newInstance("s");
+        assertNotNull(builder);
+    }
+
+    @Test
+    public void whenSettingNoType_itShouldReturn_service() {
+        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc")).build();
+        assertEquals("service", s.getType());
+    }
+
+    @Test
+    public void whenSettingLocation_itShouldBeSetCorrectly() {
+        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc")).build();
+        assertEquals("loc", s.getLocation().getId());
+        assertEquals("loc", s.getLocation().getId());
+    }
+
+    @Test
+    public void whenSettingLocation_itShouldWork() {
+        Service s = Service.Builder.newInstance("s").setLocation(Location.Builder.newInstance().setId("loc").build()).build();
+        assertEquals("loc", s.getLocation().getId());
+        assertEquals("loc", s.getLocation().getId());
+    }
+
+
+    @Test
+    public void whenSettingLocationCoord_itShouldBeSetCorrectly(){
+        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance(1, 2)).build();
+        assertEquals(1.0,s.getLocation().getCoordinate().getX(),0.01);
+        assertEquals(2.0,s.getLocation().getCoordinate().getY(),0.01);
+        assertEquals(1.0,s.getLocation().getCoordinate().getX(),0.01);
+        assertEquals(2.0,s.getLocation().getCoordinate().getY(),0.01);
+    }
+
+    @Test(expected=IllegalArgumentException.class)
+    public void whenSettingNeitherLocationIdNorCoord_throwsException(){
+        @SuppressWarnings("unused")
+        Service s = Service.Builder.newInstance("s").build();
+    }
+
+    @Test(expected=IllegalArgumentException.class)
+    public void whenServiceTimeSmallerZero_throwIllegalStateException(){
+        @SuppressWarnings("unused")
+        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc")).setServiceTime(-1).build();
+    }
+
+    @Test
+    public void whenSettingServiceTime_itShouldBeSetCorrectly(){
+        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc")).setServiceTime(1).build();
+        assertEquals(1.0,s.getServiceDuration(),0.01);
+    }
+
+    @Test(expected=IllegalArgumentException.class)
+    public void whenTimeWindowIsNull_throwException(){
+        @SuppressWarnings("unused")
+        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc")).setTimeWindow(null).build();
+    }
+
+    @Test
+    public void whenSettingTimeWindow_itShouldBeSetCorrectly(){
+        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc")).setTimeWindow(TimeWindow.newInstance(1.0, 2.0)).build();
+        assertEquals(1.0,s.getTimeWindow().getStart(),0.01);
+        assertEquals(2.0,s.getTimeWindow().getEnd(),0.01);
+    }
+
+    @Test
+    public void whenAddingSkills_theyShouldBeAddedCorrectly(){
+        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+                        .addRequiredSkill("drill").addRequiredSkill("screwdriver").build();
+        assertTrue(s.getRequiredSkills().containsSkill("drill"));
+        assertTrue(s.getRequiredSkills().containsSkill("drill"));
+        assertTrue(s.getRequiredSkills().containsSkill("ScrewDriver"));
+    }
+
+    @Test
+    public void whenAddingSkillsCaseSens_theyShouldBeAddedCorrectly(){
+        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+                        .addRequiredSkill("DriLl").addRequiredSkill("screwDriver").build();
+        assertTrue(s.getRequiredSkills().containsSkill("drill"));
+        assertTrue(s.getRequiredSkills().containsSkill("drilL"));
+    }
+
+    @Test
+    public void whenAddingSeveralTimeWindows_itShouldBeSetCorrectly(){
+        TimeWindow tw1 = TimeWindow.newInstance(1.0, 2.0);
+        TimeWindow tw2 = TimeWindow.newInstance(3.0, 5.0);
+        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+                        .addTimeWindow(tw1).addTimeWindow(tw2).build();
+        assertEquals(2, s.getTimeWindows().size());
+        assertThat(s.getTimeWindows(),hasItem(is(tw1)));
+        assertThat(s.getTimeWindows(),hasItem(is(tw2)));
+    }
+
+    @Test
+    public void whenAddingTimeWindow_itShouldBeSetCorrectly(){
+        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+                        .addTimeWindow(TimeWindow.newInstance(1.0, 2.0)).build();
+        assertEquals(1.0, s.getTimeWindow().getStart(), 0.01);
+        assertEquals(2.0, s.getTimeWindow().getEnd(), 0.01);
+    }
+
+
+
+
+    @Test
+    public void whenAddingSkillsCaseSensV2_theyShouldBeAddedCorrectly() {
+        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+                        .addRequiredSkill("screwDriver").build();
+        assertFalse(s.getRequiredSkills().containsSkill("drill"));
+        assertFalse(s.getRequiredSkills().containsSkill("drilL"));
+    }
+
+    @Test
+    public void nameShouldBeAssigned() {
+        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+                        .setName("name").build();
+        assertEquals("name", s.getName());
+    }
+
+    @Test
+    public void shouldKnowMultipleTimeWindows(){
+        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+                        .addTimeWindow(TimeWindow.newInstance(0., 10.))
+                        .addTimeWindow(TimeWindow.newInstance(20., 30.)).setName("name").build();
+        assertEquals(2,s.getTimeWindows().size());
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void whenMultipleTWOverlap_throwEx(){
+        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+                        .addTimeWindow(TimeWindow.newInstance(0., 10.))
+                        .addTimeWindow(TimeWindow.newInstance(5., 30.)).setName("name").build();
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void whenMultipleTWOverlap2_throwEx(){
+        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+                        .addTimeWindow(TimeWindow.newInstance(20., 30.))
+                        .addTimeWindow(TimeWindow.newInstance(0., 25.)).setName("name").build();
+    }
+
+    @Test
+    public void whenSettingPriorities_itShouldBeSetCorrectly(){
+        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+                        .setPriority(1).build();
+        Assert.assertEquals(1, s.getPriority());
+    }
+
+    @Test
+    public void whenSettingPriorities_itShouldBeSetCorrectly2(){
+        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+                        .setPriority(3).build();
+        Assert.assertEquals(3, s.getPriority());
+    }
+
+    @Test
+    public void whenSettingPriorities_itShouldBeSetCorrectly3() {
+        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+                        .setPriority(10).build();
+        Assert.assertEquals(10, s.getPriority());
+    }
+
+    @Test
+    public void whenNotSettingPriorities_defaultShouldBe2(){
+        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+                        .build();
+        Assert.assertEquals(2, s.getPriority());
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void whenSettingIncorrectPriorities_itShouldThrowException(){
+        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+                        .setPriority(30).build();
+
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void whenSettingIncorrectPriorities_itShouldThrowException2(){
+        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+                        .setPriority(0).build();
+
+    }
+
+
+    @Test
+    public void whenSettingUserData_itIsAssociatedWithTheJob() {
+        Service one = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+                        .setUserData(new HashMap<String, Object>()).build();
+        Service two = Service.Builder.newInstance("s2").setLocation(Location.newInstance("loc")).setUserData(42)
+                        .build();
+        Service three = Service.Builder.newInstance("s3").setLocation(Location.newInstance("loc")).build();
+
+        assertTrue(one.getUserData() instanceof Map);
+        assertEquals(42, two.getUserData());
+        assertNull(three.getUserData());
+    }
+}
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/legacy/LegacyShipmentTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/legacy/LegacyShipmentTest.java
new file mode 100644
index 000000000..7b16b6da8
--- /dev/null
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/legacy/LegacyShipmentTest.java
@@ -0,0 +1,460 @@
+/*
+ * Licensed to GraphHopper GmbH under one or more contributor
+ * license agreements. See the NOTICE file distributed with this work for
+ * additional information regarding copyright ownership.
+ *
+ * GraphHopper GmbH licenses this file to you under the Apache License,
+ * Version 2.0 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.graphhopper.jsprit.core.problem.job.legacy;
+
+import static org.hamcrest.core.Is.is;
+import static org.hamcrest.core.IsCollectionContaining.hasItem;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertThat;
+import static org.junit.Assert.assertTrue;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import org.junit.Assert;
+import org.junit.Test;
+
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
+import com.graphhopper.jsprit.core.util.Coordinate;
+import com.graphhopper.jsprit.core.util.TestUtils;
+
+public class LegacyShipmentTest {
+
+    @Test
+    public void whenTwoShipmentsHaveTheSameId_theyReferencesShouldBeUnEqual() {
+        Shipment one = Shipment.Builder.newInstance("s").addSizeDimension(0, 10).setPickupLocation(Location.Builder.newInstance().setId("foo").build()).
+                setDeliveryLocation(TestUtils.loc("foofoo")).setPickupServiceTime(10).setDeliveryServiceTime(20).build();
+        Shipment two = Shipment.Builder.newInstance("s").addSizeDimension(0, 10).setPickupLocation(Location.Builder.newInstance().setId("foo").build()).
+                setDeliveryLocation(TestUtils.loc("foofoo")).setPickupServiceTime(10).setDeliveryServiceTime(20).build();
+
+        assertTrue(one != two);
+    }
+
+    @Test
+    public void whenTwoShipmentsHaveTheSameId_theyShouldBeEqual() {
+        Shipment one = Shipment.Builder.newInstance("s").addSizeDimension(0, 10).setPickupLocation(Location.Builder.newInstance().setId("foo").build()).
+                setDeliveryLocation(TestUtils.loc("foofoo")).setPickupServiceTime(10).setDeliveryServiceTime(20).build();
+        Shipment two = Shipment.Builder.newInstance("s").addSizeDimension(0, 10).setPickupLocation(Location.Builder.newInstance().setId("foo").build()).
+                setDeliveryLocation(TestUtils.loc("foofoo")).setPickupServiceTime(10).setDeliveryServiceTime(20).build();
+
+        assertTrue(one.equals(two));
+    }
+
+    @Test
+    public void whenShipmentIsInstantiatedWithASizeOf10_theSizeShouldBe10() {
+        Shipment one = Shipment.Builder.newInstance("s").addSizeDimension(0, 10).setPickupLocation(Location.Builder.newInstance().setId("foo").build()).
+                setDeliveryLocation(TestUtils.loc("foofoo")).setPickupServiceTime(10).setDeliveryServiceTime(20).build();
+        assertEquals(10, one.getSize().get(0));
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void whenShipmentIsBuiltWithNegativeDemand_itShouldThrowException() {
+        @SuppressWarnings("unused")
+        Shipment one = Shipment.Builder.newInstance("s").addSizeDimension(0, -10)
+        .setPickupLocation(Location.Builder.newInstance().setId("foo").build())
+        .setDeliveryLocation(TestUtils.loc("foofoo")).build();
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void whenShipmentIsBuiltWithNegativeDemand_itShouldThrowException_v2() {
+        @SuppressWarnings("unused")
+        Shipment one = Shipment.Builder.newInstance("s").addSizeDimension(0, -10)
+        .setPickupLocation(Location.Builder.newInstance().setId("foo").build())
+        .setDeliveryLocation(TestUtils.loc("foofoo")).build();
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void whenIdIsNull_itShouldThrowException() {
+        @SuppressWarnings("unused")
+        Shipment one = Shipment.Builder.newInstance(null).addSizeDimension(0, 10)
+        .setPickupLocation(Location.Builder.newInstance().setId("foo").build())
+        .setDeliveryLocation(TestUtils.loc("foofoo")).build();
+    }
+
+    @Test
+    public void whenCallingForANewBuilderInstance_itShouldReturnBuilderCorrectly() {
+        Shipment.Builder builder = Shipment.Builder.newInstance("s");
+        assertNotNull(builder);
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void whenNeitherPickupLocationIdNorPickupCoord_itThrowsException() {
+        @SuppressWarnings("unused")
+        Shipment s = Shipment.Builder.newInstance("s").setDeliveryLocation(TestUtils.loc("delLoc")).build();
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void whenNeitherDeliveryLocationIdNorDeliveryCoord_itThrowsException() {
+        @SuppressWarnings("unused")
+        Shipment s = Shipment.Builder.newInstance("s").setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+    }
+
+    @Test
+    public void whenPickupLocationIdIsSet_itShouldBeDoneCorrectly() {
+        Shipment s = Shipment.Builder.newInstance("s").setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        assertEquals("pickLoc", s.getPickupLocation().getId());
+        assertEquals("pickLoc", s.getPickupLocation().getId());
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void whenPickupLocationIsNull_itThrowsException() {
+        @SuppressWarnings("unused")
+        Shipment.Builder builder = Shipment.Builder.newInstance("s").setPickupLocation(Location.Builder.newInstance().setId(null).build());
+    }
+
+    @Test
+    public void whenPickupCoordIsSet_itShouldBeDoneCorrectly() {
+        Shipment s = Shipment.Builder.newInstance("s")
+                .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").setCoordinate(Coordinate.newInstance(1, 2)).build()).build();
+        assertEquals(1.0, s.getPickupLocation().getCoordinate().getX(), 0.01);
+        assertEquals(2.0, s.getPickupLocation().getCoordinate().getY(), 0.01);
+        assertEquals(1.0, s.getPickupLocation().getCoordinate().getX(), 0.01);
+        assertEquals(2.0, s.getPickupLocation().getCoordinate().getY(), 0.01);
+    }
+
+
+    @Test
+    public void whenDeliveryLocationIdIsSet_itShouldBeDoneCorrectly() {
+        Shipment s = Shipment.Builder.newInstance("s")
+                .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        assertEquals("delLoc", s.getDeliveryLocation().getId());
+        assertEquals("delLoc", s.getDeliveryLocation().getId());
+    }
+
+
+    @Test
+    public void whenDeliveryCoordIsSet_itShouldBeDoneCorrectly() {
+        Shipment s = Shipment.Builder.newInstance("s").setDeliveryLocation(TestUtils.loc("delLoc", Coordinate.newInstance(1, 2)))
+                .setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build())
+                .build();
+        assertEquals(1.0, s.getDeliveryLocation().getCoordinate().getX(), 0.01);
+        assertEquals(2.0, s.getDeliveryLocation().getCoordinate().getY(), 0.01);
+        assertEquals(1.0, s.getDeliveryLocation().getCoordinate().getX(), 0.01);
+        assertEquals(2.0, s.getDeliveryLocation().getCoordinate().getY(), 0.01);
+    }
+
+    @Test
+    public void whenPickupServiceTimeIsNotSet_itShouldBeZero() {
+        Shipment s = Shipment.Builder.newInstance("s")
+                .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        assertEquals(0.0, s.getPickupServiceTime(), 0.01);
+    }
+
+    @Test
+    public void whenDeliveryServiceTimeIsNotSet_itShouldBeZero() {
+        Shipment s = Shipment.Builder.newInstance("s")
+                .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        assertEquals(0.0, s.getDeliveryServiceTime(), 0.01);
+    }
+
+    @Test
+    public void whenPickupServiceTimeIsSet_itShouldBeDoneCorrectly() {
+        Shipment s = Shipment.Builder.newInstance("s")
+                .setPickupServiceTime(2.0)
+                .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        assertEquals(2.0, s.getPickupServiceTime(), 0.01);
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void whenPickupServiceIsSmallerThanZero_itShouldThrowException() {
+        @SuppressWarnings("unused")
+        Shipment s = Shipment.Builder.newInstance("s").setPickupServiceTime(-2.0)
+        .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+    }
+
+    @Test
+    public void whenDeliveryServiceTimeIsSet_itShouldBeDoneCorrectly() {
+        Shipment s = Shipment.Builder.newInstance("s").setDeliveryServiceTime(2.0)
+                .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        assertEquals(2.0, s.getDeliveryServiceTime(), 0.01);
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void whenDeliveryServiceIsSmallerThanZero_itShouldThrowException() {
+        @SuppressWarnings("unused")
+        Shipment s = Shipment.Builder.newInstance("s").setDeliveryServiceTime(-2.0).setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+    }
+
+    @Test
+    public void whenPickupTimeWindowIsNotSet_itShouldBeTheDefaultOne() {
+        Shipment s = Shipment.Builder.newInstance("s").setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        assertEquals(0.0, s.getPickupTimeWindow().getStart(), 0.01);
+        assertEquals(Double.MAX_VALUE, s.getPickupTimeWindow().getEnd(), 0.01);
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void whenPickupTimeWindowIsNull_itShouldThrowException() {
+        @SuppressWarnings("unused")
+        Shipment s = Shipment.Builder.newInstance("s").setPickupTimeWindow(null).setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+    }
+
+    @Test
+    public void whenPickupTimeWindowIsSet_itShouldBeDoneCorrectly() {
+        Shipment s = Shipment.Builder.newInstance("s").setPickupTimeWindow(TimeWindow.newInstance(1, 2))
+                .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        assertEquals(1.0, s.getPickupTimeWindow().getStart(), 0.01);
+        assertEquals(2.0, s.getPickupTimeWindow().getEnd(), 0.01);
+    }
+
+    @Test
+    public void whenDeliveryTimeWindowIsNotSet_itShouldBeTheDefaultOne() {
+        Shipment s = Shipment.Builder.newInstance("s").setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        assertEquals(0.0, s.getDeliveryTimeWindow().getStart(), 0.01);
+        assertEquals(Double.MAX_VALUE, s.getDeliveryTimeWindow().getEnd(), 0.01);
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void whenDeliveryTimeWindowIsNull_itShouldThrowException() {
+        @SuppressWarnings("unused")
+        Shipment s = Shipment.Builder.newInstance("s").setDeliveryTimeWindow(null).setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+    }
+
+    @Test
+    public void whenDeliveryTimeWindowIsSet_itShouldBeDoneCorrectly() {
+        Shipment s = Shipment.Builder.newInstance("s").setDeliveryTimeWindow(TimeWindow.newInstance(1, 2))
+                .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        assertEquals(1.0, s.getDeliveryTimeWindow().getStart(), 0.01);
+        assertEquals(2.0, s.getDeliveryTimeWindow().getEnd(), 0.01);
+    }
+
+    @Test
+    public void whenUsingAddDeliveryTimeWindow_itShouldBeDoneCorrectly() {
+        Shipment s = Shipment.Builder.newInstance("s").addDeliveryTimeWindow(TimeWindow.newInstance(1, 2))
+                .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        assertEquals(1.0, s.getDeliveryTimeWindow().getStart(), 0.01);
+        assertEquals(2.0, s.getDeliveryTimeWindow().getEnd(), 0.01);
+    }
+
+    @Test
+    public void whenUsingAddDeliveryTimeWindow2_itShouldBeDoneCorrectly() {
+        Shipment s = Shipment.Builder.newInstance("s").addDeliveryTimeWindow(1, 2)
+                .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        assertEquals(1.0, s.getDeliveryTimeWindow().getStart(), 0.01);
+        assertEquals(2.0, s.getDeliveryTimeWindow().getEnd(), 0.01);
+    }
+
+    @Test
+    public void whenAddingMultipleDeliveryTimeWindows_itShouldBeDoneCorrectly() {
+        TimeWindow tw1 = TimeWindow.newInstance(1,2);
+        TimeWindow tw2 = TimeWindow.newInstance(4,5);
+        Shipment s = Shipment.Builder.newInstance("s").addDeliveryTimeWindow(tw1).addDeliveryTimeWindow(tw2)
+                .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        assertEquals(s.getDeliveryTimeWindows().size(),2);
+        assertThat(s.getDeliveryTimeWindows(),hasItem(is(tw1)));
+        assertThat(s.getDeliveryTimeWindows(),hasItem(is(tw2)));
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void whenAddingMultipleOverlappingDeliveryTimeWindows_itShouldThrowException() {
+        Shipment s = Shipment.Builder.newInstance("s").addDeliveryTimeWindow(1, 3).addDeliveryTimeWindow(2,5)
+                .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        assertEquals(1.0, s.getDeliveryTimeWindow().getStart(), 0.01);
+        assertEquals(2.0, s.getDeliveryTimeWindow().getEnd(), 0.01);
+    }
+
+
+
+    @Test
+    public void whenUsingAddPickupTimeWindow_itShouldBeDoneCorrectly() {
+        Shipment s = Shipment.Builder.newInstance("s").addPickupTimeWindow(TimeWindow.newInstance(1, 2))
+                .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        assertEquals(1.0, s.getPickupTimeWindow().getStart(), 0.01);
+        assertEquals(2.0, s.getPickupTimeWindow().getEnd(), 0.01);
+    }
+
+    @Test
+    public void whenUsingAddPickupTimeWindow2_itShouldBeDoneCorrectly() {
+        Shipment s = Shipment.Builder.newInstance("s").addPickupTimeWindow(1, 2)
+                .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        assertEquals(1.0, s.getPickupTimeWindow().getStart(), 0.01);
+        assertEquals(2.0, s.getPickupTimeWindow().getEnd(), 0.01);
+    }
+
+    @Test
+    public void whenAddingMultiplePickupTimeWindows_itShouldBeDoneCorrectly() {
+        TimeWindow tw1 = TimeWindow.newInstance(1,2);
+        TimeWindow tw2 = TimeWindow.newInstance(4,5);
+        Shipment s = Shipment.Builder.newInstance("s").addPickupTimeWindow(tw1).addPickupTimeWindow(tw2)
+                .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        assertEquals(s.getPickupTimeWindows().size(),2);
+        assertThat(s.getPickupTimeWindows(), hasItem(is(tw1)));
+        assertThat(s.getPickupTimeWindows(), hasItem(is(tw2)));
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void whenAddingMultipleOverlappingPickupTimeWindows_itShouldThrowException() {
+        Shipment s = Shipment.Builder.newInstance("s").addPickupTimeWindow(1, 3).addPickupTimeWindow(2,5)
+                .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        assertEquals(1.0, s.getPickupTimeWindow().getStart(), 0.01);
+        assertEquals(2.0, s.getPickupTimeWindow().getEnd(), 0.01);
+    }
+
+
+
+    @Test(expected = IllegalArgumentException.class)
+    public void whenShipmentHasNegativeCapacityVal_throwIllegalStateExpception() {
+        @SuppressWarnings("unused")
+        Shipment one = Shipment.Builder.newInstance("s").setPickupLocation(Location.Builder.newInstance().setId("foo").build())
+        .setDeliveryLocation(TestUtils.loc("foofoo"))
+        .addSizeDimension(0, -2)
+        .build();
+    }
+
+    @Test
+    public void whenAddingTwoCapDimension_nuOfDimsShouldBeTwo() {
+        Shipment one = Shipment.Builder.newInstance("s").setPickupLocation(Location.Builder.newInstance().setId("foo").build())
+                .setDeliveryLocation(TestUtils.loc("foofoo"))
+                .addSizeDimension(0, 2)
+                .addSizeDimension(1, 4)
+                .build();
+        assertEquals(2, one.getSize().getNuOfDimensions());
+    }
+
+    @Test
+    public void whenShipmentIsBuiltWithoutSpecifyingCapacity_itShouldHvCapWithOneDimAndDimValOfZero() {
+        Shipment one = Shipment.Builder.newInstance("s")
+                .setPickupLocation(Location.Builder.newInstance().setId("foo").setCoordinate(Coordinate.newInstance(0, 0)).build())
+                .setDeliveryLocation(TestUtils.loc("foofoo")).build();
+        assertEquals(1, one.getSize().getNuOfDimensions());
+        assertEquals(0, one.getSize().get(0));
+    }
+
+    @Test
+    public void whenShipmentIsBuiltWithConstructorWhereSizeIsSpecified_capacityShouldBeSetCorrectly() {
+        Shipment one = Shipment.Builder.newInstance("s").addSizeDimension(0, 1)
+                .setPickupLocation(Location.Builder.newInstance().setId("foo").setCoordinate(Coordinate.newInstance(0, 0)).build())
+                .setDeliveryLocation(TestUtils.loc("foofoo")).build();
+        assertEquals(1, one.getSize().getNuOfDimensions());
+        assertEquals(1, one.getSize().get(0));
+    }
+
+    @Test
+    public void whenAddingSkills_theyShouldBeAddedCorrectly() {
+        Shipment s = Shipment.Builder.newInstance("s").setPickupLocation(Location.Builder.newInstance().setId("loc").build())
+                .setDeliveryLocation(TestUtils.loc("delLoc"))
+                .addRequiredSkill("drill").addRequiredSkill("screwdriver").build();
+        assertTrue(s.getRequiredSkills().containsSkill("drill"));
+        assertTrue(s.getRequiredSkills().containsSkill("drill"));
+        assertTrue(s.getRequiredSkills().containsSkill("ScrewDriver"));
+    }
+
+    @Test
+    public void whenAddingSkillsCaseSens_theyShouldBeAddedCorrectly() {
+        Shipment s = Shipment.Builder.newInstance("s")
+                .setPickupLocation(Location.Builder.newInstance().setId("pick").build())
+                .setDeliveryLocation(TestUtils.loc("del"))
+                .addRequiredSkill("DriLl").addRequiredSkill("screwDriver").build();
+        assertTrue(s.getRequiredSkills().containsSkill("drill"));
+        assertTrue(s.getRequiredSkills().containsSkill("drilL"));
+    }
+
+    @Test
+    public void whenAddingSkillsCaseSensV2_theyShouldBeAddedCorrectly() {
+        Shipment s = Shipment.Builder.newInstance("s").setPickupLocation(Location.Builder.newInstance().setId("loc").build())
+                .setDeliveryLocation(TestUtils.loc("del"))
+                .addRequiredSkill("screwDriver").build();
+        assertFalse(s.getRequiredSkills().containsSkill("drill"));
+        assertFalse(s.getRequiredSkills().containsSkill("drilL"));
+    }
+
+    @Test
+    public void nameShouldBeAssigned() {
+        Shipment s = Shipment.Builder.newInstance("s").setPickupLocation(Location.Builder.newInstance().setId("loc").build())
+                .setDeliveryLocation(TestUtils.loc("del"))
+                .setName("name").build();
+        assertEquals("name", s.getName());
+    }
+
+    @Test
+    public void whenSettingLocation_itShouldWork() {
+        Shipment s = Shipment.Builder.newInstance("s").setPickupLocation(Location.Builder.newInstance().setId("loc").build())
+                .setDeliveryLocation(Location.Builder.newInstance().setId("del").build()).build();
+        assertEquals("loc", s.getPickupLocation().getId());
+        assertEquals("loc", s.getPickupLocation().getId());
+        assertEquals("del", s.getDeliveryLocation().getId());
+        assertEquals("del", s.getDeliveryLocation().getId());
+    }
+
+    @Test
+    public void whenSettingPriorities_itShouldBeSetCorrectly(){
+        Shipment s = Shipment.Builder.newInstance("s").setPickupLocation(Location.newInstance("loc"))
+                .setDeliveryLocation(Location.newInstance("loc"))
+                .setPriority(1).build();
+        Assert.assertEquals(1, s.getPriority());
+    }
+
+    @Test
+    public void whenSettingPriorities_itShouldBeSetCorrectly2(){
+        Shipment s = Shipment.Builder.newInstance("s").setPickupLocation(Location.newInstance("loc"))
+                .setDeliveryLocation(Location.newInstance("loc"))
+                .setPriority(3).build();
+        Assert.assertEquals(3, s.getPriority());
+    }
+
+    @Test
+    public void whenSettingPriorities_itShouldBeSetCorrectly3() {
+        Shipment s = Shipment.Builder.newInstance("s").setPickupLocation(Location.newInstance("loc"))
+                .setDeliveryLocation(Location.newInstance("loc"))
+                .setPriority(10).build();
+        Assert.assertEquals(10, s.getPriority());
+    }
+
+    @Test
+    public void whenNotSettingPriorities_defaultShouldBe2(){
+        Shipment s = Shipment.Builder.newInstance("s").setPickupLocation(Location.newInstance("loc"))
+                .setDeliveryLocation(Location.newInstance("loc"))
+                .build();
+        Assert.assertEquals(2, s.getPriority());
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void whenSettingIncorrectPriorities_itShouldThrowException(){
+        Shipment s = Shipment.Builder.newInstance("s").setPickupLocation(Location.newInstance("loc"))
+                .setDeliveryLocation(Location.newInstance("loc"))
+                .setPriority(30).build();
+
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void whenSettingIncorrectPriorities_itShouldThrowException2(){
+        Shipment s = Shipment.Builder.newInstance("s").setPickupLocation(Location.newInstance("loc"))
+                .setDeliveryLocation(Location.newInstance("loc"))
+                .setPriority(0).build();
+
+    }
+
+    @Test
+    public void whenSettingUserData_itIsAssociatedWithTheJob() {
+        Shipment one = Shipment.Builder.newInstance("s").setPickupLocation(Location.newInstance("loc"))
+            .setDeliveryLocation(Location.newInstance("loc"))
+            .setUserData(new HashMap<String, Object>()).build();
+        Shipment two = Shipment.Builder.newInstance("s2").setPickupLocation(Location.newInstance("loc"))
+                .setDeliveryLocation(Location.newInstance("loc")).setUserData(42).build();
+        Shipment three = Shipment.Builder.newInstance("s3").setPickupLocation(Location.newInstance("loc"))
+                .setDeliveryLocation(Location.newInstance("loc")).build();
+
+        assertTrue(one.getUserData() instanceof Map);
+        assertEquals(42, two.getUserData());
+        assertNull(three.getUserData());
+    }
+}
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/TestVehicleRoute.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/TestVehicleRoute.java
index f8cd43d77..84c4b02e3 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/TestVehicleRoute.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/TestVehicleRoute.java
@@ -29,9 +29,9 @@
 import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.driver.DriverImpl;
 import com.graphhopper.jsprit.core.problem.driver.DriverImpl.NoDriver;
-import com.graphhopper.jsprit.core.problem.job.Delivery;
-import com.graphhopper.jsprit.core.problem.job.Pickup;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.DeliveryJob;
+import com.graphhopper.jsprit.core.problem.job.PickupJob;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivity;
@@ -88,7 +88,7 @@ public void whenBuildingRouteWithNulls_itThrowsException() {
     public void whenBuildingANonEmptyTour2Times_tourIterIteratesOverActivitiesCorrectly() {
         VehicleRoute.Builder routeBuilder = VehicleRoute.Builder.newInstance(vehicle, driver);
         Location loc = Location.newInstance("1");
-        routeBuilder.addService(new Service.Builder("2").addSizeDimension(0, 30).setLocation(loc).build());
+        routeBuilder.addService(new ServiceJob.Builder("2").addSizeDimension(0, 30).setLocation(loc).build());
         VehicleRoute route = routeBuilder.build();
 
         {
@@ -102,7 +102,7 @@ public void whenBuildingANonEmptyTour2Times_tourIterIteratesOverActivitiesCorrec
             assertEquals(1, count);
         }
         {
-            Service service = new Service.Builder("3").setLocation(loc).build();
+            ServiceJob service = new ServiceJob.Builder("3").setLocation(loc).build();
             ServiceActivity serviceAct = new ServiceActivity(service, "service",
                             loc,
                             0d, SizeDimension.Builder.newInstance().addDimension(0, 30).build(),
@@ -135,7 +135,7 @@ public void whenBuildingANonEmptyTour_tourReverseIterIteratesOverActivitiesCorre
     @Test
     public void whenBuildingANonEmptyTourV2_tourReverseIterIteratesOverActivitiesCorrectly() {
         VehicleRoute.Builder routeBuilder = VehicleRoute.Builder.newInstance(vehicle, driver);
-        routeBuilder.addService(new Service.Builder("2").addSizeDimension(0, 30).setLocation(Location.newInstance("1")).build());
+        routeBuilder.addService(new ServiceJob.Builder("2").addSizeDimension(0, 30).setLocation(Location.newInstance("1")).build());
         VehicleRoute route = routeBuilder.build();
         Iterator<TourActivity> iter = route.getTourActivities().reverseActivityIterator();
         int count = 0;
@@ -150,8 +150,8 @@ public void whenBuildingANonEmptyTourV2_tourReverseIterIteratesOverActivitiesCor
     @Test
     public void whenBuildingANonEmptyTour2Times_tourReverseIterIteratesOverActivitiesCorrectly() {
         VehicleRoute.Builder routeBuilder = VehicleRoute.Builder.newInstance(vehicle, driver);
-        routeBuilder.addService(new Service.Builder("2").addSizeDimension(0, 30).setLocation(Location.newInstance("1")).build());
-        routeBuilder.addService(new Service.Builder("3").addSizeDimension(0, 30).setLocation(Location.newInstance("2")).build());
+        routeBuilder.addService(new ServiceJob.Builder("2").addSizeDimension(0, 30).setLocation(Location.newInstance("1")).build());
+        routeBuilder.addService(new ServiceJob.Builder("3").addSizeDimension(0, 30).setLocation(Location.newInstance("2")).build());
         VehicleRoute route = routeBuilder.build();
         {
             Iterator<TourActivity> iter = route.getTourActivities().reverseActivityIterator();
@@ -309,56 +309,56 @@ public void whenIniRouteWithNewVehicle_depTimeMustBeSetDepTime() {
     @Test
     public void whenAddingPickup_itShouldBeTreatedAsPickup() {
 
-        Pickup pickup = new Pickup.Builder("pick").setLocation(Location.newInstance("pickLoc")).build();
+        PickupJob pickup = new PickupJob.Builder("pick").setLocation(Location.newInstance("pickLoc")).build();
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("vehicle").setStartLocation(Location.newInstance("startLoc")).build();
         VehicleRoute route = VehicleRoute.Builder.newInstance(vehicle).addService(pickup).build();
 
         TourActivity act = route.getActivities().get(0);
         assertEquals("pick.pickup", act.getName());
         assertTrue(act instanceof PickupActivity);
-        assertTrue(((JobActivity) act).getJob() instanceof Pickup);
+        assertTrue(((JobActivity) act).getJob() instanceof PickupJob);
 
     }
 
     @Test
     public void whenAddingPickup_itShouldBeAdded() {
 
-        Pickup pickup = new Pickup.Builder("pick").setLocation(Location.newInstance("pickLoc")).build();
+        PickupJob pickup = new PickupJob.Builder("pick").setLocation(Location.newInstance("pickLoc")).build();
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("vehicle").setStartLocation(Location.newInstance("startLoc")).build();
         VehicleRoute route = VehicleRoute.Builder.newInstance(vehicle).addPickup(pickup).build();
 
         TourActivity act = route.getActivities().get(0);
         assertEquals("pick.pickup", act.getName());
         assertTrue(act instanceof PickupActivity);
-        assertTrue(((JobActivity) act).getJob() instanceof Pickup);
+        assertTrue(((JobActivity) act).getJob() instanceof PickupJob);
 
     }
 
     @Test
     public void whenAddingDelivery_itShouldBeTreatedAsDelivery() {
 
-        Delivery delivery = new Delivery.Builder("delivery").setLocation(Location.newInstance("deliveryLoc")).build();
+        DeliveryJob delivery = new DeliveryJob.Builder("delivery").setLocation(Location.newInstance("deliveryLoc")).build();
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("vehicle").setStartLocation(Location.newInstance("startLoc")).build();
         VehicleRoute route = VehicleRoute.Builder.newInstance(vehicle).addService(delivery).build();
 
         TourActivity act = route.getActivities().get(0);
         assertEquals("delivery.delivery", act.getName());
         assertTrue(act instanceof DeliveryActivity);
-        assertTrue(((JobActivity) act).getJob() instanceof Delivery);
+        assertTrue(((JobActivity) act).getJob() instanceof DeliveryJob);
 
     }
 
     @Test
     public void whenAddingDelivery_itShouldBeAdded() {
 
-        Delivery delivery = new Delivery.Builder("delivery").setLocation(Location.newInstance("deliveryLoc")).build();
+        DeliveryJob delivery = new DeliveryJob.Builder("delivery").setLocation(Location.newInstance("deliveryLoc")).build();
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("vehicle").setStartLocation(Location.newInstance("startLoc")).build();
         VehicleRoute route = VehicleRoute.Builder.newInstance(vehicle).addDelivery(delivery).build();
 
         TourActivity act = route.getActivities().get(0);
         assertEquals("delivery.delivery", act.getName());
         assertTrue(act instanceof DeliveryActivity);
-        assertTrue(((JobActivity) act).getJob() instanceof Delivery);
+        assertTrue(((JobActivity) act).getJob() instanceof DeliveryJob);
 
     }
 }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRouteBuilderTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRouteBuilderTest.java
index 102dc840a..159267649 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRouteBuilderTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRouteBuilderTest.java
@@ -25,8 +25,8 @@
 
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.driver.Driver;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
-import com.graphhopper.jsprit.core.problem.job.Shipment.Builder;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob.Builder;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
@@ -36,7 +36,7 @@
 
     @Test(expected = IllegalArgumentException.class)
     public void whenDeliveryIsAddedBeforePickup_throwsException() {
-        Shipment s = Shipment.Builder.newInstance("s")
+        ShipmentJob s = new ShipmentJob.Builder("s")
                         .setDeliveryLocation(Location.newInstance("loc1")).build();
         VehicleRoute.Builder builder = VehicleRoute.Builder.newInstance(mock(Vehicle.class), mock(Driver.class));
         builder.addDelivery(s);
@@ -44,7 +44,7 @@ public void whenDeliveryIsAddedBeforePickup_throwsException() {
 
     @Test(expected = IllegalArgumentException.class)
     public void whenPickupIsAddedTwice_throwsException() {
-        Shipment s = createStandardShipment("s1").build();
+        ShipmentJob s = createStandardShipment("s1").build();
         VehicleRoute.Builder builder = VehicleRoute.Builder.newInstance(mock(Vehicle.class), mock(Driver.class));
         builder.addPickup(s);
         builder.addPickup(s);
@@ -52,7 +52,7 @@ public void whenPickupIsAddedTwice_throwsException() {
 
     @Test(expected = IllegalArgumentException.class)
     public void whenShipmentIsPickedDeliveredAndDeliveredAgain_throwsException() {
-        Shipment s = createStandardShipment("s1").build();
+        ShipmentJob s = createStandardShipment("s1").build();
 
         VehicleRoute.Builder builder = VehicleRoute.Builder.newInstance(mock(Vehicle.class), mock(Driver.class));
         builder.addPickup(s);
@@ -62,8 +62,8 @@ public void whenShipmentIsPickedDeliveredAndDeliveredAgain_throwsException() {
 
     @Test(expected = IllegalArgumentException.class)
     public void whenShipmentIsPickedUpThoughButHasNotBeenDeliveredAndRouteIsBuilt_throwsException() {
-        Shipment s = createStandardShipment("s1").build();
-        Shipment s2 = createStandardShipment("s2").build();
+        ShipmentJob s = createStandardShipment("s1").build();
+        ShipmentJob s2 = createStandardShipment("s2").build();
 
         VehicleRoute.Builder builder = VehicleRoute.Builder.newInstance(mock(Vehicle.class), mock(Driver.class));
         builder.addPickup(s);
@@ -74,8 +74,8 @@ public void whenShipmentIsPickedUpThoughButHasNotBeenDeliveredAndRouteIsBuilt_th
 
     @Test
     public void whenTwoShipmentsHaveBeenAdded_nuOfActivitiesMustEqualFour() {
-        Shipment s = createStandardShipment("s1").build();
-        Shipment s2 = createStandardShipment("s2").build();
+        ShipmentJob s = createStandardShipment("s1").build();
+        ShipmentJob s2 = createStandardShipment("s2").build();
 
         VehicleRoute.Builder builder = VehicleRoute.Builder.newInstance(mock(Vehicle.class), mock(Driver.class));
         builder.addPickup(s);
@@ -88,8 +88,8 @@ public void whenTwoShipmentsHaveBeenAdded_nuOfActivitiesMustEqualFour() {
 
     @Test
     public void whenBuildingClosedRoute_routeEndShouldHaveLocationOfVehicle() {
-        Shipment s = createStandardShipment("s1").build();
-        Shipment s2 = createStandardShipment("s2").build();
+        ShipmentJob s = createStandardShipment("s1").build();
+        ShipmentJob s2 = createStandardShipment("s2").build();
 
         Vehicle vehicle = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance("vehLoc")).setEndLocation(Location.newInstance("vehLoc"))
                         .build();
@@ -105,8 +105,8 @@ public void whenBuildingClosedRoute_routeEndShouldHaveLocationOfVehicle() {
 
     @Test
     public void whenBuildingOpenRoute_routeEndShouldHaveLocationOfLastActivity() {
-        Shipment s = createStandardShipment("s1").build();
-        Shipment s2 = createStandardShipment("s2").build();
+        ShipmentJob s = createStandardShipment("s1").build();
+        ShipmentJob s2 = createStandardShipment("s2").build();
 
         Vehicle vehicle = mock(Vehicle.class);
         when(vehicle.isReturnToDepot()).thenReturn(false);
@@ -127,8 +127,8 @@ private Location loc(String delLoc) {
 
     @Test
     public void whenSettingDepartureTime() {
-        Shipment s = createStandardShipment("s1").build();
-        Shipment s2 = createStandardShipment("s2").build();
+        ShipmentJob s = createStandardShipment("s1").build();
+        ShipmentJob s2 = createStandardShipment("s2").build();
 
         Vehicle vehicle = mock(Vehicle.class);
         when(vehicle.isReturnToDepot()).thenReturn(false);
@@ -147,7 +147,7 @@ public void whenSettingDepartureTime() {
     protected Builder createStandardShipment(String name) {
         Location loc = Location.Builder.newInstance().setId("delLoc").build();
         TimeWindow tw = TimeWindow.newInstance(0, 10);
-        return Shipment.Builder.newInstance(name)
+        return new ShipmentJob.Builder(name)
                         .addSizeDimension(0, 10)
                         .setPickupTimeWindow(tw)
                         .setDeliveryTimeWindow(tw)
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivityTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivityTest.java
index 406789f77..d572c76d4 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivityTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivityTest.java
@@ -28,7 +28,7 @@
 import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.job.Break;
 import com.graphhopper.jsprit.core.problem.job.Break.Builder;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 
 
 public class BreakActivityTest {
@@ -96,8 +96,8 @@ public void whenCopyingStart_itShouldBeDoneCorrectly() {
     @Test
     public void whenTwoDeliveriesHaveTheSameUnderlyingJob_theyAreEqual() {
         Location loc = Location.newInstance("loc");
-        Service s1 = new Service.Builder("s").setLocation(loc).build();
-        Service s2 = new Service.Builder("s").setLocation(loc).build();
+        ServiceJob s1 = new ServiceJob.Builder("s").setLocation(loc).build();
+        ServiceJob s2 = new ServiceJob.Builder("s").setLocation(loc).build();
         ServiceActivity d1 = new ServiceActivity(s1, "s1",
                         loc, 0d, SizeDimension.EMPTY,
                         TimeWindows.ANY_TIME.getTimeWindows());
@@ -111,8 +111,8 @@ public void whenTwoDeliveriesHaveTheSameUnderlyingJob_theyAreEqual() {
     @Test
     public void whenTwoDeliveriesHaveTheDifferentUnderlyingJob_theyAreNotEqual() {
         Location loc = Location.newInstance("loc");
-        Service s1 = new Service.Builder("s").setLocation(loc).build();
-        Service s2 = new Service.Builder("s2").setLocation(loc).build();
+        ServiceJob s1 = new ServiceJob.Builder("s").setLocation(loc).build();
+        ServiceJob s2 = new ServiceJob.Builder("s2").setLocation(loc).build();
         ServiceActivity d1 = new ServiceActivity(s1, "s1",
                         loc, 0d, SizeDimension.EMPTY,
                         TimeWindows.ANY_TIME.getTimeWindows());
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliveryActivityTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliveryActivityTest.java
index e632210f6..9f742c250 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliveryActivityTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliveryActivityTest.java
@@ -23,13 +23,13 @@
 import org.junit.Test;
 
 import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.job.Delivery;
+import com.graphhopper.jsprit.core.problem.job.DeliveryJob;
 
 public class DeliveryActivityTest extends JobActivityTest {
 
     @Before
     public void doBefore() {
-        service = new Delivery.Builder("service").setLocation(Location.newInstance("loc"))
+        service = new DeliveryJob.Builder("service").setLocation(Location.newInstance("loc"))
                         .setTimeWindow(TimeWindow.newInstance(1., 2.)).
                         setServiceTime(20d).
                         addSizeDimension(0, 10).addSizeDimension(1, 100).addSizeDimension(2, 1000).build();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivityTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivityTest.java
index ce72fed2a..8886e1dff 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivityTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivityTest.java
@@ -22,13 +22,13 @@
 import org.junit.Before;
 
 import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 
 public class PickupActivityTest extends JobActivityTest {
 
     @Before
     public void doBefore() {
-        service = new Service.Builder("service").setLocation(Location.newInstance("loc")).
+        service = new ServiceJob.Builder("service").setLocation(Location.newInstance("loc")).
                         setTimeWindow(TimeWindow.newInstance(1., 2.)).
                         setServiceTime(20d).
                         addSizeDimension(0, 10).addSizeDimension(1, 100).addSizeDimension(2, 1000).build();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityTest.java
index d68d74b8e..051f3681b 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityTest.java
@@ -22,13 +22,13 @@
 import org.junit.Before;
 
 import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 
 public class ServiceActivityTest extends JobActivityTest {
 
     @Before
     public void doBefore() {
-        service = new Service.Builder("service").setLocation(Location.newInstance("loc")).
+        service = new ServiceJob.Builder("service").setLocation(Location.newInstance("loc")).
                         setTimeWindow(TimeWindow.newInstance(1., 2.)).
                         setServiceTime(20d).
                         addSizeDimension(0, 10).addSizeDimension(1, 100).addSizeDimension(2, 1000).build();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TestTourActivities.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TestTourActivities.java
index 5408dc012..bed105891 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TestTourActivities.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TestTourActivities.java
@@ -26,20 +26,20 @@
 
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.SizeDimension;
-import com.graphhopper.jsprit.core.problem.job.Service;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 
 
 public class TestTourActivities {
 
-    private Service service;
+    private ServiceJob service;
     private ServiceActivity act;
     private TourActivities tour;
 
     @Before
     public void doBefore() {
         Location loc = Location.newInstance("loc");
-        service = new Service.Builder("yo").setLocation(loc).build();
+        service = new ServiceJob.Builder("yo").setLocation(loc).build();
         act = new ServiceActivity(service, "s1",
                         loc, 0d, SizeDimension.Builder.newInstance().addDimension(0, 10).build(),
                         TimeWindows.ANY_TIME.getTimeWindows());
@@ -74,7 +74,7 @@ public void whenAddingAServiceAndThenRemovingTheServiceAgain_tourShouldNotServeI
         assertEquals(0, tour.getActivities().size());
         tour.addActivity(act);
         assertEquals(1, tour.getActivities().size());
-        Service anotherServiceInstance = new Service.Builder("yo").addSizeDimension(0, 10).setLocation(Location.newInstance("loc")).build();
+        ServiceJob anotherServiceInstance = new ServiceJob.Builder("yo").addSizeDimension(0, 10).setLocation(Location.newInstance("loc")).build();
         assertTrue(service.equals(anotherServiceInstance));
         boolean removed = tour.removeJob(anotherServiceInstance);
         assertTrue(removed);
@@ -83,7 +83,7 @@ public void whenAddingAServiceAndThenRemovingTheServiceAgain_tourShouldNotServeI
 
     @Test
     public void whenAddingAShipmentActivity_tourShouldServeShipment() {
-        Shipment s = Shipment.Builder.newInstance("s").addSizeDimension(0, 1).setDeliveryLocation(Location.newInstance("delLoc"))
+        ShipmentJob s = new ShipmentJob.Builder("s").addSizeDimension(0, 1).setDeliveryLocation(Location.newInstance("delLoc"))
                         .setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         TourActivity pickupShipment = s.getPickupActivity();
         TourActivity deliverShipment = s.getDeliveryActivity();
@@ -96,7 +96,7 @@ public void whenAddingAShipmentActivity_tourShouldServeShipment() {
 
     @Test
     public void whenRemovingShipment_tourShouldNotServiceItAnymore() {
-        Shipment s = Shipment.Builder.newInstance("s").addSizeDimension(0, 1)
+        ShipmentJob s = new ShipmentJob.Builder("s").addSizeDimension(0, 1)
                         .setDeliveryLocation(Location.newInstance("delLoc"))
                         .setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build())
                         .build();
@@ -112,7 +112,7 @@ public void whenRemovingShipment_tourShouldNotServiceItAnymore() {
 
     @Test
     public void whenRemovingShipment_theirCorrespondingActivitiesShouldBeRemoved() {
-        Shipment s = Shipment.Builder.newInstance("s").addSizeDimension(0, 1)
+        ShipmentJob s = new ShipmentJob.Builder("s").addSizeDimension(0, 1)
                         .setDeliveryLocation(Location.newInstance("delLoc"))
                         .setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         TourActivity pickupShipment = s.getPickupActivity();
@@ -153,7 +153,7 @@ public void copyingSeqShouldWork() {
 
     @Test
     public void removingShipmentActivityShouldWork() {
-        Shipment s = Shipment.Builder.newInstance("s").addSizeDimension(0, 1)
+        ShipmentJob s = new ShipmentJob.Builder("s").addSizeDimension(0, 1)
                         .setDeliveryLocation(Location.newInstance("delLoc"))
                         .setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         TourActivity pickupShipment = s.getPickupActivity();
@@ -179,7 +179,7 @@ public void removingShipmentActivityShouldWork() {
 
     @Test
     public void whenCopyingShipmentActivitySeq_jobSizeShouldBeCorrect() {
-        Shipment s = Shipment.Builder.newInstance("s").addSizeDimension(0, 1)
+        ShipmentJob s = new ShipmentJob.Builder("s").addSizeDimension(0, 1)
                         .setDeliveryLocation(Location.newInstance("delLoc"))
                         .setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         TourActivity pickupShipment = s.getPickupActivity();
@@ -200,7 +200,7 @@ public void whenCopyingShipmentActivitySeq_jobSizeShouldBeCorrect() {
 
     @Test
     public void whenCopyingShipmentActivitySeq_noActivitiesShouldBeCorrect() {
-        Shipment s = Shipment.Builder.newInstance("s").addSizeDimension(0, 1)
+        ShipmentJob s = new ShipmentJob.Builder("s").addSizeDimension(0, 1)
                         .setDeliveryLocation(Location.newInstance("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         TourActivity pickupShipment = s.getPickupActivity();
         TourActivity deliverShipment = s.getDeliveryActivity();
@@ -220,7 +220,7 @@ public void whenCopyingShipmentActivitySeq_noActivitiesShouldBeCorrect() {
 
     @Test
     public void whenCopyingShipmentActivitySeq_itShouldContaintPickupAct() {
-        Shipment s = Shipment.Builder.newInstance("s").addSizeDimension(0, 1)
+        ShipmentJob s = new ShipmentJob.Builder("s").addSizeDimension(0, 1)
                         .setDeliveryLocation(Location.newInstance("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         TourActivity pickupShipment = s.getPickupActivity();
         TourActivity deliverShipment = s.getDeliveryActivity();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/ChristofidesReader.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/ChristofidesReader.java
index 12671b756..7bafd8b7d 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/ChristofidesReader.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/ChristofidesReader.java
@@ -29,9 +29,9 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
-import com.graphhopper.jsprit.core.problem.job.Delivery;
-import com.graphhopper.jsprit.core.problem.job.Pickup;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.DeliveryJob;
+import com.graphhopper.jsprit.core.problem.job.PickupJob;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 
@@ -97,13 +97,13 @@ public void read(InputStream inputStream) {
                 int demand = Integer.parseInt(tokens[2].trim());
                 String customer = Integer.valueOf(counter - 1).toString();
                 if (jobType.equals(JobType.SERVICE)) {
-                    Service service = new Service.Builder(customer).addSizeDimension(0, demand).setServiceTime(serviceTime).setLocation(Location.newInstance(customerCoord.getX(), customerCoord.getY())).build();
+                    ServiceJob service = new ServiceJob.Builder(customer).addSizeDimension(0, demand).setServiceTime(serviceTime).setLocation(Location.newInstance(customerCoord.getX(), customerCoord.getY())).build();
                     vrpBuilder.addJob(service);
                 } else if (jobType.equals(JobType.DELIVERY)) {
-                    Delivery service = new Delivery.Builder(customer).addSizeDimension(0, demand).setServiceTime(serviceTime).setLocation(Location.newInstance(customerCoord.getX(), customerCoord.getY())).build();
+                    DeliveryJob service = new DeliveryJob.Builder(customer).addSizeDimension(0, demand).setServiceTime(serviceTime).setLocation(Location.newInstance(customerCoord.getX(), customerCoord.getY())).build();
                     vrpBuilder.addJob(service);
                 } else if (jobType.equals(JobType.PICKUP)) {
-                    Pickup service = new Pickup.Builder(customer).addSizeDimension(0, demand).setServiceTime(serviceTime).setLocation(Location.newInstance(customerCoord.getX(), customerCoord.getY())).build();
+                    PickupJob service = new PickupJob.Builder(customer).addSizeDimension(0, demand).setServiceTime(serviceTime).setLocation(Location.newInstance(customerCoord.getX(), customerCoord.getY())).build();
                     vrpBuilder.addJob(service);
                 }
             }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/LiLimReader.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/LiLimReader.java
index 4d418c9e4..a7030b003 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/LiLimReader.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/LiLimReader.java
@@ -32,7 +32,7 @@
 
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.Builder;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
@@ -127,7 +127,7 @@ private void buildShipments() {
             String from = rel.from;
             String to = rel.to;
             int demand = rel.demand;
-            Shipment s = Shipment.Builder.newInstance(counter.toString()).addSizeDimension(0, demand)
+            ShipmentJob s = new ShipmentJob.Builder(counter.toString()).addSizeDimension(0, demand)
                 .setPickupLocation(Location.Builder.newInstance().setCoordinate(customers.get(from).coord).build()).setPickupServiceTime(customers.get(from).serviceTime)
                 .setPickupTimeWindow(TimeWindow.newInstance(customers.get(from).start, customers.get(from).end))
                 .setDeliveryLocation(Location.Builder.newInstance().setCoordinate(customers.get(to).coord).build()).setDeliveryServiceTime(customers.get(to).serviceTime)
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/SolomonReader.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/SolomonReader.java
index 00846d8bc..e0ab1621a 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/SolomonReader.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/SolomonReader.java
@@ -29,7 +29,7 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
@@ -110,7 +110,7 @@ public void read(InputStream inputStream) {
                     vrpBuilder.addVehicle(vehicle);
 
                 } else {
-                    Service service = new Service.Builder(customerId).addSizeDimension(0, demand)
+                    ServiceJob service = new ServiceJob.Builder(customerId).addSizeDimension(0, demand)
                         .setLocation(Location.Builder.newInstance().setCoordinate(coord).setId(customerId).build()).setServiceTime(serviceTime)
                         .setTimeWindow(TimeWindow.newInstance(start, end)).build();
                     vrpBuilder.addJob(service);
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/BicycleMessenger.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/BicycleMessenger.java
index a6ade3283..d5ff54296 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/BicycleMessenger.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/BicycleMessenger.java
@@ -45,7 +45,7 @@
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.driver.DriverImpl;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
@@ -373,7 +373,7 @@ private static void validateSolution(VehicleRoutingProblemSolution bestOf, Vehic
     }
 
     static double getTimeOfDirectRoute(Job job, Vehicle v, VehicleRoutingTransportCosts routingCosts) {
-        Shipment envelope = (Shipment) job;
+        ShipmentJob envelope = (ShipmentJob) job;
         return routingCosts.getTransportTime(v.getStartLocation(), envelope.getPickupActivity().getLocation(), 0.0, DriverImpl.noDriver(), v) +
                 routingCosts.getTransportTime(envelope.getPickupActivity().getLocation(), envelope.getDeliveryActivity().getLocation(), 0.0,
                         DriverImpl.noDriver(), v);
@@ -390,7 +390,7 @@ private static void readEnvelopes(Builder problemBuilder) throws IOException {
             }
             String[] tokens = line.split("\\s+");
             //define your envelope which is basically a shipment from A to B
-            Shipment envelope = Shipment.Builder.newInstance(tokens[1]).addSizeDimension(0, 1)
+            ShipmentJob envelope = new ShipmentJob.Builder(tokens[1]).addSizeDimension(0, 1)
                     .setPickupLocation(Location.Builder.newInstance()
                             .setCoordinate(Coordinate.newInstance(Double.parseDouble(tokens[2]), Double.parseDouble(tokens[3]))).build())
                     .setDeliveryLocation(Location.Builder.newInstance()
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/BreakExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/BreakExample.java
index 7cc2a04f1..8bb90a395 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/BreakExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/BreakExample.java
@@ -23,7 +23,7 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Break;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
@@ -67,11 +67,11 @@ public static void main(String[] args) {
 		/*
 		 * build services at the required locations, each with a capacity-demand of 1.
 		 */
-        Service service1 = new Service.Builder("1").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 7)).build();
-        Service service2 = new Service.Builder("2").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 13)).build();
+        ServiceJob service1 = new ServiceJob.Builder("1").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 7)).build();
+        ServiceJob service2 = new ServiceJob.Builder("2").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 13)).build();
 
-        Service service3 = new Service.Builder("3").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(15, 7)).build();
-        Service service4 = new Service.Builder("4").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(15, 13)).build();
+        ServiceJob service3 = new ServiceJob.Builder("3").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(15, 7)).build();
+        ServiceJob service4 = new ServiceJob.Builder("4").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(15, 13)).build();
 
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/CircleExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/CircleExample.java
index 7c84c292c..ef34714b4 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/CircleExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/CircleExample.java
@@ -26,7 +26,7 @@
 import com.graphhopper.jsprit.core.algorithm.box.GreedySchrimpfFactory;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.util.Coordinate;
@@ -69,7 +69,7 @@ public static void main(String[] args) {
         Collection<Coordinate> circle = createCoordinates(0, 0, 20, step);
         int id = 1;
         for (Coordinate c : circle) {
-            Service s = new Service.Builder(Integer.toString(id)).setLocation(Location.Builder.newInstance().setCoordinate(c).build()).build();
+            ServiceJob s = new ServiceJob.Builder(Integer.toString(id)).setLocation(Location.Builder.newInstance().setCoordinate(c).build()).build();
             vrpBuilder.addJob(s);
             id++;
         }
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/ConfigureAlgorithmInCodeInsteadOfPerXml.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/ConfigureAlgorithmInCodeInsteadOfPerXml.java
index 7e87e20fc..c99371f9f 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/ConfigureAlgorithmInCodeInsteadOfPerXml.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/ConfigureAlgorithmInCodeInsteadOfPerXml.java
@@ -21,7 +21,7 @@
 import com.graphhopper.jsprit.core.algorithm.VehicleRoutingAlgorithm;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl.Builder;
@@ -63,11 +63,11 @@ public static void main(String[] args) {
 		/*
          * build services at the required locations, each with a capacity-demand of 1.
 		 */
-        Service service1 = new Service.Builder("1").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 7)).build();
-        Service service2 = new Service.Builder("2").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 13)).build();
+        ServiceJob service1 = new ServiceJob.Builder("1").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 7)).build();
+        ServiceJob service2 = new ServiceJob.Builder("2").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 13)).build();
 
-        Service service3 = new Service.Builder("3").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 7)).build();
-        Service service4 = new Service.Builder("4").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 13)).build();
+        ServiceJob service3 = new ServiceJob.Builder("3").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 7)).build();
+        ServiceJob service4 = new ServiceJob.Builder("4").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 13)).build();
 
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/CostMatrixExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/CostMatrixExample.java
index bbc2af561..78c6fc9e9 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/CostMatrixExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/CostMatrixExample.java
@@ -24,7 +24,7 @@
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
@@ -54,9 +54,9 @@ public static void main(String[] args) {
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("vehicle")
             .setStartLocation(Location.newInstance("0")).setType(type).build();
 
-        Service s1 = new Service.Builder("1").addSizeDimension(0, 1).setLocation(Location.newInstance("1")).build();
-        Service s2 = new Service.Builder("2").addSizeDimension(0, 1).setLocation(Location.newInstance("2")).build();
-        Service s3 = new Service.Builder("3").addSizeDimension(0, 1).setLocation(Location.newInstance("3")).build();
+        ServiceJob s1 = new ServiceJob.Builder("1").addSizeDimension(0, 1).setLocation(Location.newInstance("1")).build();
+        ServiceJob s2 = new ServiceJob.Builder("2").addSizeDimension(0, 1).setLocation(Location.newInstance("2")).build();
+        ServiceJob s3 = new ServiceJob.Builder("3").addSizeDimension(0, 1).setLocation(Location.newInstance("3")).build();
 
 
 		/*
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EnRoutePickupAndDeliveryWithMultipleDepotsAndOpenRoutesExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EnRoutePickupAndDeliveryWithMultipleDepotsAndOpenRoutesExample.java
index 732430727..29440531e 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EnRoutePickupAndDeliveryWithMultipleDepotsAndOpenRoutesExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EnRoutePickupAndDeliveryWithMultipleDepotsAndOpenRoutesExample.java
@@ -25,7 +25,7 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl.Builder;
@@ -86,29 +86,29 @@ public static void main(String[] args) {
 
 		 */
 
-        Shipment shipment1 = Shipment.Builder.newInstance("1").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(5, 7))).setDeliveryLocation(loc(Coordinate.newInstance(6, 9))).build();
-        Shipment shipment2 = Shipment.Builder.newInstance("2").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(5, 13))).setDeliveryLocation(loc(Coordinate.newInstance(6, 11))).build();
+        ShipmentJob shipment1 = new ShipmentJob.Builder("1").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(5, 7))).setDeliveryLocation(loc(Coordinate.newInstance(6, 9))).build();
+        ShipmentJob shipment2 = new ShipmentJob.Builder("2").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(5, 13))).setDeliveryLocation(loc(Coordinate.newInstance(6, 11))).build();
 
-        Shipment shipment3 = Shipment.Builder.newInstance("3").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(15, 7))).setDeliveryLocation(loc(Coordinate.newInstance(14, 9))).build();
-        Shipment shipment4 = Shipment.Builder.newInstance("4").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(15, 13))).setDeliveryLocation(loc(Coordinate.newInstance(14, 11))).build();
+        ShipmentJob shipment3 = new ShipmentJob.Builder("3").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(15, 7))).setDeliveryLocation(loc(Coordinate.newInstance(14, 9))).build();
+        ShipmentJob shipment4 = new ShipmentJob.Builder("4").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(15, 13))).setDeliveryLocation(loc(Coordinate.newInstance(14, 11))).build();
 
-        Shipment shipment5 = Shipment.Builder.newInstance("5").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(25, 27))).setDeliveryLocation(loc(Coordinate.newInstance(26, 29))).build();
-        Shipment shipment6 = Shipment.Builder.newInstance("6").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(25, 33))).setDeliveryLocation(loc(Coordinate.newInstance(26, 31))).build();
+        ShipmentJob shipment5 = new ShipmentJob.Builder("5").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(25, 27))).setDeliveryLocation(loc(Coordinate.newInstance(26, 29))).build();
+        ShipmentJob shipment6 = new ShipmentJob.Builder("6").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(25, 33))).setDeliveryLocation(loc(Coordinate.newInstance(26, 31))).build();
 
-        Shipment shipment7 = Shipment.Builder.newInstance("7").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(35, 27))).setDeliveryLocation(loc(Coordinate.newInstance(34, 29))).build();
-        Shipment shipment8 = Shipment.Builder.newInstance("8").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(35, 33))).setDeliveryLocation(loc(Coordinate.newInstance(34, 31))).build();
+        ShipmentJob shipment7 = new ShipmentJob.Builder("7").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(35, 27))).setDeliveryLocation(loc(Coordinate.newInstance(34, 29))).build();
+        ShipmentJob shipment8 = new ShipmentJob.Builder("8").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(35, 33))).setDeliveryLocation(loc(Coordinate.newInstance(34, 31))).build();
 
-        Shipment shipment9 = Shipment.Builder.newInstance("9").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(5, 27))).setDeliveryLocation(loc(Coordinate.newInstance(6, 29))).build();
-        Shipment shipment10 = Shipment.Builder.newInstance("10").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(5, 33))).setDeliveryLocation(loc(Coordinate.newInstance(6, 31))).build();
+        ShipmentJob shipment9 = new ShipmentJob.Builder("9").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(5, 27))).setDeliveryLocation(loc(Coordinate.newInstance(6, 29))).build();
+        ShipmentJob shipment10 = new ShipmentJob.Builder("10").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(5, 33))).setDeliveryLocation(loc(Coordinate.newInstance(6, 31))).build();
 
-        Shipment shipment11 = Shipment.Builder.newInstance("11").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(15, 27))).setDeliveryLocation(loc(Coordinate.newInstance(14, 29))).build();
-        Shipment shipment12 = Shipment.Builder.newInstance("12").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(15, 33))).setDeliveryLocation(loc(Coordinate.newInstance(14, 31))).build();
+        ShipmentJob shipment11 = new ShipmentJob.Builder("11").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(15, 27))).setDeliveryLocation(loc(Coordinate.newInstance(14, 29))).build();
+        ShipmentJob shipment12 = new ShipmentJob.Builder("12").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(15, 33))).setDeliveryLocation(loc(Coordinate.newInstance(14, 31))).build();
 
-        Shipment shipment13 = Shipment.Builder.newInstance("13").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(25, 7))).setDeliveryLocation(loc(Coordinate.newInstance(26, 9))).build();
-        Shipment shipment14 = Shipment.Builder.newInstance("14").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(25, 13))).setDeliveryLocation(loc(Coordinate.newInstance(26, 11))).build();
+        ShipmentJob shipment13 = new ShipmentJob.Builder("13").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(25, 7))).setDeliveryLocation(loc(Coordinate.newInstance(26, 9))).build();
+        ShipmentJob shipment14 = new ShipmentJob.Builder("14").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(25, 13))).setDeliveryLocation(loc(Coordinate.newInstance(26, 11))).build();
 
-        Shipment shipment15 = Shipment.Builder.newInstance("15").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(35, 7))).setDeliveryLocation(loc(Coordinate.newInstance(34, 9))).build();
-        Shipment shipment16 = Shipment.Builder.newInstance("16").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(35, 13))).setDeliveryLocation(loc(Coordinate.newInstance(34, 11))).build();
+        ShipmentJob shipment15 = new ShipmentJob.Builder("15").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(35, 7))).setDeliveryLocation(loc(Coordinate.newInstance(34, 9))).build();
+        ShipmentJob shipment16 = new ShipmentJob.Builder("16").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(35, 13))).setDeliveryLocation(loc(Coordinate.newInstance(34, 11))).build();
 
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/HVRPExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/HVRPExample.java
index 94e534aac..357e4cf85 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/HVRPExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/HVRPExample.java
@@ -23,7 +23,7 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
@@ -71,26 +71,26 @@ public static void main(String[] args) {
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
 
         //add customers
-        vrpBuilder.addJob(new Service.Builder("1").addSizeDimension(0, 18).setLocation(Location.newInstance(22, 22)).build());
-        vrpBuilder.addJob(new Service.Builder("2").addSizeDimension(0, 26).setLocation(Location.newInstance(36, 26)).build());
-        vrpBuilder.addJob(new Service.Builder("3").addSizeDimension(0, 11).setLocation(Location.newInstance(21, 45)).build());
-        vrpBuilder.addJob(new Service.Builder("4").addSizeDimension(0, 30).setLocation(Location.newInstance(45, 35)).build());
-        vrpBuilder.addJob(new Service.Builder("5").addSizeDimension(0, 21).setLocation(Location.newInstance(55, 20)).build());
-        vrpBuilder.addJob(new Service.Builder("6").addSizeDimension(0, 19).setLocation(Location.newInstance(33, 34)).build());
-        vrpBuilder.addJob(new Service.Builder("7").addSizeDimension(0, 15).setLocation(Location.newInstance(50, 50)).build());
-        vrpBuilder.addJob(new Service.Builder("8").addSizeDimension(0, 16).setLocation(Location.newInstance(55, 45)).build());
-        vrpBuilder.addJob(new Service.Builder("9").addSizeDimension(0, 29).setLocation(Location.newInstance(26, 59)).build());
-        vrpBuilder.addJob(new Service.Builder("10").addSizeDimension(0, 26).setLocation(Location.newInstance(40, 66)).build());
-        vrpBuilder.addJob(new Service.Builder("11").addSizeDimension(0, 37).setLocation(Location.newInstance(55, 56)).build());
-        vrpBuilder.addJob(new Service.Builder("12").addSizeDimension(0, 16).setLocation(Location.newInstance(35, 51)).build());
-        vrpBuilder.addJob(new Service.Builder("13").addSizeDimension(0, 12).setLocation(Location.newInstance(62, 35)).build());
-        vrpBuilder.addJob(new Service.Builder("14").addSizeDimension(0, 31).setLocation(Location.newInstance(62, 57)).build());
-        vrpBuilder.addJob(new Service.Builder("15").addSizeDimension(0, 8).setLocation(Location.newInstance(62, 24)).build());
-        vrpBuilder.addJob(new Service.Builder("16").addSizeDimension(0, 19).setLocation(Location.newInstance(21, 36)).build());
-        vrpBuilder.addJob(new Service.Builder("17").addSizeDimension(0, 20).setLocation(Location.newInstance(33, 44)).build());
-        vrpBuilder.addJob(new Service.Builder("18").addSizeDimension(0, 13).setLocation(Location.newInstance(9, 56)).build());
-        vrpBuilder.addJob(new Service.Builder("19").addSizeDimension(0, 15).setLocation(Location.newInstance(62, 48)).build());
-        vrpBuilder.addJob(new Service.Builder("20").addSizeDimension(0, 22).setLocation(Location.newInstance(66, 14)).build());
+        vrpBuilder.addJob(new ServiceJob.Builder("1").addSizeDimension(0, 18).setLocation(Location.newInstance(22, 22)).build());
+        vrpBuilder.addJob(new ServiceJob.Builder("2").addSizeDimension(0, 26).setLocation(Location.newInstance(36, 26)).build());
+        vrpBuilder.addJob(new ServiceJob.Builder("3").addSizeDimension(0, 11).setLocation(Location.newInstance(21, 45)).build());
+        vrpBuilder.addJob(new ServiceJob.Builder("4").addSizeDimension(0, 30).setLocation(Location.newInstance(45, 35)).build());
+        vrpBuilder.addJob(new ServiceJob.Builder("5").addSizeDimension(0, 21).setLocation(Location.newInstance(55, 20)).build());
+        vrpBuilder.addJob(new ServiceJob.Builder("6").addSizeDimension(0, 19).setLocation(Location.newInstance(33, 34)).build());
+        vrpBuilder.addJob(new ServiceJob.Builder("7").addSizeDimension(0, 15).setLocation(Location.newInstance(50, 50)).build());
+        vrpBuilder.addJob(new ServiceJob.Builder("8").addSizeDimension(0, 16).setLocation(Location.newInstance(55, 45)).build());
+        vrpBuilder.addJob(new ServiceJob.Builder("9").addSizeDimension(0, 29).setLocation(Location.newInstance(26, 59)).build());
+        vrpBuilder.addJob(new ServiceJob.Builder("10").addSizeDimension(0, 26).setLocation(Location.newInstance(40, 66)).build());
+        vrpBuilder.addJob(new ServiceJob.Builder("11").addSizeDimension(0, 37).setLocation(Location.newInstance(55, 56)).build());
+        vrpBuilder.addJob(new ServiceJob.Builder("12").addSizeDimension(0, 16).setLocation(Location.newInstance(35, 51)).build());
+        vrpBuilder.addJob(new ServiceJob.Builder("13").addSizeDimension(0, 12).setLocation(Location.newInstance(62, 35)).build());
+        vrpBuilder.addJob(new ServiceJob.Builder("14").addSizeDimension(0, 31).setLocation(Location.newInstance(62, 57)).build());
+        vrpBuilder.addJob(new ServiceJob.Builder("15").addSizeDimension(0, 8).setLocation(Location.newInstance(62, 24)).build());
+        vrpBuilder.addJob(new ServiceJob.Builder("16").addSizeDimension(0, 19).setLocation(Location.newInstance(21, 36)).build());
+        vrpBuilder.addJob(new ServiceJob.Builder("17").addSizeDimension(0, 20).setLocation(Location.newInstance(33, 44)).build());
+        vrpBuilder.addJob(new ServiceJob.Builder("18").addSizeDimension(0, 13).setLocation(Location.newInstance(9, 56)).build());
+        vrpBuilder.addJob(new ServiceJob.Builder("19").addSizeDimension(0, 15).setLocation(Location.newInstance(62, 48)).build());
+        vrpBuilder.addJob(new ServiceJob.Builder("20").addSizeDimension(0, 22).setLocation(Location.newInstance(66, 14)).build());
 
 
         //add vehicle - finite fleet
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/JobAndActivityDependenciesExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/JobAndActivityDependenciesExample.java
index 7f5f5c05c..5b2766c4c 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/JobAndActivityDependenciesExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/JobAndActivityDependenciesExample.java
@@ -30,7 +30,7 @@
 import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
 import com.graphhopper.jsprit.core.problem.constraint.HardActivityConstraint;
 import com.graphhopper.jsprit.core.problem.constraint.HardRouteConstraint;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
@@ -216,36 +216,36 @@ public static void main(String[] args) {
             .addSkill("driver3")
             .setStartLocation(Location.newInstance(-3, 5)).setReturnToDepot(true).build();
 
-        Service s1 = new Service.Builder("s1")
+        ServiceJob s1 = new ServiceJob.Builder("s1")
             .addRequiredSkill("driver1")
             .setName("install new device")
             .setLocation(Location.newInstance(2, 2)).build();
-        Service s2 = new Service.Builder("s2")
+        ServiceJob s2 = new ServiceJob.Builder("s2")
             .addRequiredSkill("driver3")
             .setName("deliver key")
             .setLocation(Location.newInstance(2, 4)).build();
 
-        Service s3 = new Service.Builder("s3")
+        ServiceJob s3 = new ServiceJob.Builder("s3")
             .addRequiredSkill("driver1")
             .setName("repair heater")
             .setLocation(Location.newInstance(-2, 2)).build();
 
-        Service s4 = new Service.Builder("s4")
+        ServiceJob s4 = new ServiceJob.Builder("s4")
             .addRequiredSkill("driver3")
             .setName("get key")
             .setLocation(Location.newInstance(-2.3, 4)).build();
 
-        Service s5 = new Service.Builder("s5")
+        ServiceJob s5 = new ServiceJob.Builder("s5")
             .addRequiredSkill("driver1")
             .setName("cleaning")
             .setLocation(Location.newInstance(1, 5)).build();
 
-        Service s6 = new Service.Builder("s6")
+        ServiceJob s6 = new ServiceJob.Builder("s6")
             .addRequiredSkill("driver3")
             .setName("use key")
             .setLocation(Location.newInstance(-2, 3)).build();
 
-        Service s7 = new Service.Builder("s7")
+        ServiceJob s7 = new ServiceJob.Builder("s7")
             .addRequiredSkill("driver3")
             .setName("maintenance")
             .setLocation(Location.newInstance(-1.7, 3.5)).build();
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleDepotWithInitialRoutesExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleDepotWithInitialRoutesExample.java
index bc68cecac..0f184b9a1 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleDepotWithInitialRoutesExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleDepotWithInitialRoutesExample.java
@@ -24,7 +24,7 @@
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.Builder;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
@@ -90,10 +90,10 @@ public static void main(String[] args) {
 
     }
 
-    private static Service getService(String serviceId, Builder vrpBuilder) {
+    private static ServiceJob getService(String serviceId, Builder vrpBuilder) {
         for (Job j : vrpBuilder.getAddedJobs()) {
             if (j.getId().equals(serviceId)) {
-                return (Service) j;
+                return (ServiceJob) j;
             }
         }
         return null;
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleProductsWithLoadConstraintExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleProductsWithLoadConstraintExample.java
index 4caa00536..99b23ad74 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleProductsWithLoadConstraintExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleProductsWithLoadConstraintExample.java
@@ -28,7 +28,7 @@
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
 import com.graphhopper.jsprit.core.problem.constraint.HardActivityConstraint;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
@@ -166,19 +166,19 @@ public static void main(String[] args) {
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("vehicle").setStartLocation(loc(Coordinate.newInstance(0, 0)))
             .setType(type).build();
 
-        Shipment bananas = Shipment.Builder.newInstance("bananas_1").addSizeDimension(BANANAS_DIMENSION_INDEX, 1)
+        ShipmentJob bananas = new ShipmentJob.Builder("bananas_1").addSizeDimension(BANANAS_DIMENSION_INDEX, 1)
             .setPickupLocation(loc(Coordinate.newInstance(1, 8))).setDeliveryLocation(loc(Coordinate.newInstance(10, 8))).build();
 
-        Shipment bananas_2 = Shipment.Builder.newInstance("bananas_2").addSizeDimension(BANANAS_DIMENSION_INDEX, 1)
+        ShipmentJob bananas_2 = new ShipmentJob.Builder("bananas_2").addSizeDimension(BANANAS_DIMENSION_INDEX, 1)
             .setPickupLocation(loc(Coordinate.newInstance(2, 8))).setDeliveryLocation(loc(Coordinate.newInstance(11, 8))).build();
 
-        Shipment bananas_3 = Shipment.Builder.newInstance("bananas_3").addSizeDimension(BANANAS_DIMENSION_INDEX, 1)
+        ShipmentJob bananas_3 = new ShipmentJob.Builder("bananas_3").addSizeDimension(BANANAS_DIMENSION_INDEX, 1)
             .setPickupLocation(loc(Coordinate.newInstance(3, 8))).setDeliveryLocation(loc(Coordinate.newInstance(12, 8))).build();
 
-        Shipment apples = Shipment.Builder.newInstance("apples_1").addSizeDimension(APPLES_DIMENSION_INDEX, 1)
+        ShipmentJob apples = new ShipmentJob.Builder("apples_1").addSizeDimension(APPLES_DIMENSION_INDEX, 1)
             .setPickupLocation(loc(Coordinate.newInstance(1, 6))).setDeliveryLocation(loc(Coordinate.newInstance(10, 12))).build();
 
-        Shipment apples_2 = Shipment.Builder.newInstance("apples_2").addSizeDimension(APPLES_DIMENSION_INDEX, 1)
+        ShipmentJob apples_2 = new ShipmentJob.Builder("apples_2").addSizeDimension(APPLES_DIMENSION_INDEX, 1)
             .setPickupLocation(loc(Coordinate.newInstance(1, 5))).setDeliveryLocation(loc(Coordinate.newInstance(10, 11))).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().setFleetSize(VehicleRoutingProblem.FleetSize.INFINITE)
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleTimeWindowExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleTimeWindowExample.java
index e41b33320..a504061d7 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleTimeWindowExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleTimeWindowExample.java
@@ -22,7 +22,7 @@
 import com.graphhopper.jsprit.core.distance.ManhattanDistanceCalculator;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl.Builder;
@@ -60,28 +60,28 @@ public static void main(String[] args) {
         /*
          * build services at the required locations, each with a capacity-demand of 1.
          */
-        Service service1 = new Service.Builder("1")
+        ServiceJob service1 = new ServiceJob.Builder("1")
             .addTimeWindow(50, 100)
             .addTimeWindow(20, 35)
             .addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(10, 0)).build();
 
-        Service service2 = new Service.Builder("2")
+        ServiceJob service2 = new ServiceJob.Builder("2")
             .addSizeDimension(WEIGHT_INDEX, 1)
 //            .setServiceTime(10)
             .setLocation(Location.newInstance(20, 0)).setServiceTime(10).build();
 
-        Service service3 = new Service.Builder("3")
+        ServiceJob service3 = new ServiceJob.Builder("3")
             .addTimeWindow(5, 10)
             .addTimeWindow(35, 50)
             .addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(30, 0)).build();
 
-        Service service4 = new Service.Builder("4")
+        ServiceJob service4 = new ServiceJob.Builder("4")
 //            .addTimeWindow(5,10)
             .addTimeWindow(20, 40)
             .addTimeWindow(45, 80)
             .addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(40, 0)).build();
 
-        Service service5 = new Service.Builder("5")
+        ServiceJob service5 = new ServiceJob.Builder("5")
             .addTimeWindow(5, 10)
             .addTimeWindow(20, 40)
             .addTimeWindow(60, 100)
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleTimeWindowExample2.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleTimeWindowExample2.java
index d298f015d..b4b8c065a 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleTimeWindowExample2.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleTimeWindowExample2.java
@@ -24,7 +24,7 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.cost.TransportDistance;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
@@ -85,7 +85,7 @@ public static void main(String[] args) {
 
         Random random = RandomNumberGeneration.newInstance();
         for (int i = 0; i < 40; i++) {
-            Service service = new Service.Builder("" + (i + 1))
+            ServiceJob service = new ServiceJob.Builder("" + (i + 1))
                 .addTimeWindow(random.nextInt(50), 200)
                 .addTimeWindow(220 + random.nextInt(50), 350)
                 .addTimeWindow(400 + random.nextInt(50), 550)
@@ -96,7 +96,7 @@ public static void main(String[] args) {
         }
 
         for (int i = 0; i < 12; i++) {
-            Service service = new Service.Builder("" + (i + 51))
+            ServiceJob service = new ServiceJob.Builder("" + (i + 51))
 //                .addTimeWindow(0, 80)
 ////                .addTimeWindow(120, 200)
 //                .addTimeWindow(250,500)
@@ -106,7 +106,7 @@ public static void main(String[] args) {
             vrpBuilder.addJob(service);
         }
 
-        Service service = new Service.Builder("100")
+        ServiceJob service = new ServiceJob.Builder("100")
             .addTimeWindow(50, 80)
             .setServiceTime(10)
             .setLocation(Location.newInstance(40, 1)).build();
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/RefuseCollectionExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/RefuseCollectionExample.java
index 98981b12b..6bdb3c804 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/RefuseCollectionExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/RefuseCollectionExample.java
@@ -23,7 +23,7 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
@@ -113,7 +113,7 @@ private static void readDemandQuantities(VehicleRoutingProblem.Builder vrpBuilde
             /*
              * build service
 			 */
-            Service service = new Service.Builder(lineTokens[0]).addSizeDimension(0, Integer.parseInt(lineTokens[1])).setLocation(Location.newInstance(lineTokens[0])).build();
+            ServiceJob service = new ServiceJob.Builder(lineTokens[0]).addSizeDimension(0, Integer.parseInt(lineTokens[1])).setLocation(Location.newInstance(lineTokens[0])).build();
             /*
              * and add it to problem
 			 */
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/RefuseCollectionWithFastMatrixExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/RefuseCollectionWithFastMatrixExample.java
index 7b5fddb1d..70b8fafc5 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/RefuseCollectionWithFastMatrixExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/RefuseCollectionWithFastMatrixExample.java
@@ -23,7 +23,7 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
@@ -112,7 +112,7 @@ private static void readDemandQuantities(VehicleRoutingProblem.Builder vrpBuilde
             /*
              * build service
 			 */
-            Service service = new Service.Builder(lineTokens[0])
+            ServiceJob service = new ServiceJob.Builder(lineTokens[0])
                 .addSizeDimension(0, Integer.parseInt(lineTokens[1]))
                 .setLocation(Location.Builder.newInstance().setIndex(Integer.parseInt(lineTokens[0])).build())
                 .build();
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/ServicePickupsWithMultipleDepotsExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/ServicePickupsWithMultipleDepotsExample.java
index 4eed4c14c..433eb792a 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/ServicePickupsWithMultipleDepotsExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/ServicePickupsWithMultipleDepotsExample.java
@@ -24,7 +24,7 @@
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl.Builder;
@@ -77,17 +77,17 @@ public static void main(String[] args) {
 		 * 4: (15,13)->(14,11)
 		 */
 
-        Service shipment1 = new Service.Builder("1").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 7)).build();
-        Service shipment2 = new Service.Builder("2").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 13)).build();
+        ServiceJob shipment1 = new ServiceJob.Builder("1").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 7)).build();
+        ServiceJob shipment2 = new ServiceJob.Builder("2").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 13)).build();
 
-        Service shipment3 = new Service.Builder("3").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 7)).build();
-        Service shipment4 = new Service.Builder("4").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 13)).build();
+        ServiceJob shipment3 = new ServiceJob.Builder("3").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 7)).build();
+        ServiceJob shipment4 = new ServiceJob.Builder("4").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 13)).build();
 
-        Service shipment5 = new Service.Builder("5").addSizeDimension(0, 1).setLocation(Location.newInstance(55, 57)).build();
-        Service shipment6 = new Service.Builder("6").addSizeDimension(0, 1).setLocation(Location.newInstance(55, 63)).build();
+        ServiceJob shipment5 = new ServiceJob.Builder("5").addSizeDimension(0, 1).setLocation(Location.newInstance(55, 57)).build();
+        ServiceJob shipment6 = new ServiceJob.Builder("6").addSizeDimension(0, 1).setLocation(Location.newInstance(55, 63)).build();
 
-        Service shipment7 = new Service.Builder("7").addSizeDimension(0, 1).setLocation(Location.newInstance(65, 57)).build();
-        Service shipment8 = new Service.Builder("8").addSizeDimension(0, 1).setLocation(Location.newInstance(65, 63)).build();
+        ServiceJob shipment7 = new ServiceJob.Builder("7").addSizeDimension(0, 1).setLocation(Location.newInstance(65, 57)).build();
+        ServiceJob shipment8 = new ServiceJob.Builder("8").addSizeDimension(0, 1).setLocation(Location.newInstance(65, 63)).build();
 
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleDepotBoundedPickupAndDeliveryExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleDepotBoundedPickupAndDeliveryExample.java
index 6f964f800..b8897c58b 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleDepotBoundedPickupAndDeliveryExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleDepotBoundedPickupAndDeliveryExample.java
@@ -23,8 +23,8 @@
 import com.graphhopper.jsprit.core.algorithm.box.SchrimpfFactory;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.job.Delivery;
-import com.graphhopper.jsprit.core.problem.job.Pickup;
+import com.graphhopper.jsprit.core.problem.job.DeliveryJob;
+import com.graphhopper.jsprit.core.problem.job.PickupJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl.Builder;
@@ -64,11 +64,11 @@ public static void main(String[] args) {
          * build pickups and deliveries at the required locations, each with a capacity-demand of 1.
 		 */
 
-        Pickup pickup1 = new Pickup.Builder("1").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 7)).build();
-        Delivery delivery1 = new Delivery.Builder("2").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 13)).build();
+        PickupJob pickup1 = new PickupJob.Builder("1").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 7)).build();
+        DeliveryJob delivery1 = new DeliveryJob.Builder("2").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 13)).build();
 
-        Pickup pickup2 = new Pickup.Builder("3").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 7)).build();
-        Delivery delivery2 = new Delivery.Builder("4").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 13)).build();
+        PickupJob pickup2 = new PickupJob.Builder("3").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 7)).build();
+        DeliveryJob delivery2 = new DeliveryJob.Builder("4").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 13)).build();
 
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryExample.java
index 6a10a7cc7..a762a38f8 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryExample.java
@@ -23,7 +23,7 @@
 import com.graphhopper.jsprit.core.algorithm.box.SchrimpfFactory;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl.Builder;
@@ -67,14 +67,14 @@ public static void main(String[] args) {
          * (5,13)->(6,11) 3: (15,7)->(14,9) 4: (15,13)->(14,11)
          */
 
-        Shipment shipment1 = Shipment.Builder.newInstance("1").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(5, 7)))
+        ShipmentJob shipment1 = new ShipmentJob.Builder("1").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(5, 7)))
             .setDeliveryLocation(loc(Coordinate.newInstance(6, 9))).build();
-        Shipment shipment2 = Shipment.Builder.newInstance("2").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(5, 13)))
+        ShipmentJob shipment2 = new ShipmentJob.Builder("2").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(5, 13)))
             .setDeliveryLocation(loc(Coordinate.newInstance(6, 11))).build();
 
-        Shipment shipment3 = Shipment.Builder.newInstance("3").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(15, 7)))
+        ShipmentJob shipment3 = new ShipmentJob.Builder("3").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(15, 7)))
             .setDeliveryLocation(loc(Coordinate.newInstance(14, 9))).build();
-        Shipment shipment4 = Shipment.Builder.newInstance("4").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(15, 13)))
+        ShipmentJob shipment4 = new ShipmentJob.Builder("4").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(15, 13)))
             .setDeliveryLocation(loc(Coordinate.newInstance(14, 11))).build();
 
 
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryOpenRoutesExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryOpenRoutesExample.java
index e0781a2b0..51599b50a 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryOpenRoutesExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryOpenRoutesExample.java
@@ -23,7 +23,7 @@
 import com.graphhopper.jsprit.core.algorithm.box.SchrimpfFactory;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl.Builder;
@@ -70,11 +70,11 @@ public static void main(String[] args) {
 		 * 4: (15,13)->(14,11)
 		 */
 
-        Shipment shipment1 = Shipment.Builder.newInstance("1").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(5, 7))).setDeliveryLocation(loc(Coordinate.newInstance(6, 9))).build();
-        Shipment shipment2 = Shipment.Builder.newInstance("2").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(5, 13))).setDeliveryLocation(loc(Coordinate.newInstance(6, 11))).build();
+        ShipmentJob shipment1 = new ShipmentJob.Builder("1").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(5, 7))).setDeliveryLocation(loc(Coordinate.newInstance(6, 9))).build();
+        ShipmentJob shipment2 = new ShipmentJob.Builder("2").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(5, 13))).setDeliveryLocation(loc(Coordinate.newInstance(6, 11))).build();
 
-        Shipment shipment3 = Shipment.Builder.newInstance("3").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(15, 7))).setDeliveryLocation(loc(Coordinate.newInstance(14, 9))).build();
-        Shipment shipment4 = Shipment.Builder.newInstance("4").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(15, 13))).setDeliveryLocation(loc(Coordinate.newInstance(14, 11))).build();
+        ShipmentJob shipment3 = new ShipmentJob.Builder("3").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(15, 7))).setDeliveryLocation(loc(Coordinate.newInstance(14, 9))).build();
+        ShipmentJob shipment4 = new ShipmentJob.Builder("4").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(15, 13))).setDeliveryLocation(loc(Coordinate.newInstance(14, 11))).build();
 
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryWithDepotBoundedDeliveriesExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryWithDepotBoundedDeliveriesExample.java
index 1fe20e3f4..043d83fcd 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryWithDepotBoundedDeliveriesExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryWithDepotBoundedDeliveriesExample.java
@@ -25,8 +25,8 @@
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
 import com.graphhopper.jsprit.core.problem.constraint.ServiceDeliveriesFirstConstraint;
-import com.graphhopper.jsprit.core.problem.job.Delivery;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.DeliveryJob;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl.Builder;
@@ -69,23 +69,23 @@ public static void main(String[] args) {
          * (5,13)->(6,11) 3: (15,7)->(14,9) 4: (15,13)->(14,11)
          */
 
-        Shipment shipment1 = Shipment.Builder.newInstance("1").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(5, 7)))
+        ShipmentJob shipment1 = new ShipmentJob.Builder("1").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(5, 7)))
             .setDeliveryLocation(loc(Coordinate.newInstance(6, 9))).build();
-        Shipment shipment2 = Shipment.Builder.newInstance("2").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(5, 13)))
+        ShipmentJob shipment2 = new ShipmentJob.Builder("2").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(5, 13)))
             .setDeliveryLocation(loc(Coordinate.newInstance(6, 11))).build();
 
-        Shipment shipment3 = Shipment.Builder.newInstance("3").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(15, 7)))
+        ShipmentJob shipment3 = new ShipmentJob.Builder("3").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(15, 7)))
             .setDeliveryLocation(loc(Coordinate.newInstance(14, 9))).build();
-        Shipment shipment4 = Shipment.Builder.newInstance("4").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(15, 13)))
+        ShipmentJob shipment4 = new ShipmentJob.Builder("4").addSizeDimension(0, 1).setPickupLocation(loc(Coordinate.newInstance(15, 13)))
             .setDeliveryLocation(loc(Coordinate.newInstance(14, 11))).build();
 //
         /*
          * build deliveries, (implicitly picked up in the depot) 1: (4,8) 2: (4,12) 3: (16,8) 4: (16,12)
          */
-        Delivery delivery1 = new Delivery.Builder("5").addSizeDimension(0, 1).setLocation(loc(Coordinate.newInstance(4, 8))).build();
-        Delivery delivery2 = new Delivery.Builder("6").addSizeDimension(0, 1).setLocation(loc(Coordinate.newInstance(4, 12))).build();
-        Delivery delivery3 = new Delivery.Builder("7").addSizeDimension(0, 1).setLocation(loc(Coordinate.newInstance(16, 8))).build();
-        Delivery delivery4 = new Delivery.Builder("8").addSizeDimension(0, 1).setLocation(loc(Coordinate.newInstance(16, 12))).build();
+        DeliveryJob delivery1 = new DeliveryJob.Builder("5").addSizeDimension(0, 1).setLocation(loc(Coordinate.newInstance(4, 8))).build();
+        DeliveryJob delivery2 = new DeliveryJob.Builder("6").addSizeDimension(0, 1).setLocation(loc(Coordinate.newInstance(4, 12))).build();
+        DeliveryJob delivery3 = new DeliveryJob.Builder("7").addSizeDimension(0, 1).setLocation(loc(Coordinate.newInstance(16, 8))).build();
+        DeliveryJob delivery4 = new DeliveryJob.Builder("8").addSizeDimension(0, 1).setLocation(loc(Coordinate.newInstance(16, 12))).build();
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addVehicle(vehicle);
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExample.java
index 52d91f51a..f7be818ed 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExample.java
@@ -24,7 +24,7 @@
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl.Builder;
@@ -71,11 +71,11 @@ public static void main(String[] args) {
 		/*
          * build services at the required locations, each with a capacity-demand of 1.
 		 */
-        Service service1 = new Service.Builder("1").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 7)).build();
-        Service service2 = new Service.Builder("2").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 13)).build();
+        ServiceJob service1 = new ServiceJob.Builder("1").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 7)).build();
+        ServiceJob service2 = new ServiceJob.Builder("2").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 13)).build();
 
-        Service service3 = new Service.Builder("3").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(15, 7)).build();
-        Service service4 = new Service.Builder("4").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(15, 13)).build();
+        ServiceJob service3 = new ServiceJob.Builder("3").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(15, 7)).build();
+        ServiceJob service4 = new ServiceJob.Builder("4").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(15, 13)).build();
 
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExampleOpenRoutes.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExampleOpenRoutes.java
index 7b7b8b8eb..0203ae11d 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExampleOpenRoutes.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExampleOpenRoutes.java
@@ -22,7 +22,7 @@
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl.Builder;
@@ -64,11 +64,11 @@ public static void main(String[] args) {
 		/*
          * build services at the required locations, each with a capacity-demand of 1.
 		 */
-        Service service1 = new Service.Builder("1").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 7)).build();
-        Service service2 = new Service.Builder("2").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 13)).build();
+        ServiceJob service1 = new ServiceJob.Builder("1").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 7)).build();
+        ServiceJob service2 = new ServiceJob.Builder("2").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 13)).build();
 
-        Service service3 = new Service.Builder("3").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 7)).build();
-        Service service4 = new Service.Builder("4").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 13)).build();
+        ServiceJob service3 = new ServiceJob.Builder("3").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 7)).build();
+        ServiceJob service4 = new ServiceJob.Builder("4").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 13)).build();
 
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExampleWithPriorities.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExampleWithPriorities.java
index 09d7c4080..c4147f9d4 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExampleWithPriorities.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExampleWithPriorities.java
@@ -23,7 +23,7 @@
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl.Builder;
@@ -70,11 +70,11 @@ public static void main(String[] args) {
 		/*
          * build services at the required locations, each with a capacity-demand of 1.
 		 */
-        Service service1 = new Service.Builder("1").setPriority(1).addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 7)).build();
-        Service service2 = new Service.Builder("2").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 13)).build();
+        ServiceJob service1 = new ServiceJob.Builder("1").setPriority(1).addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 7)).build();
+        ServiceJob service2 = new ServiceJob.Builder("2").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 13)).build();
 
-        Service service3 = new Service.Builder("3").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(15, 7)).build();
-        Service service4 = new Service.Builder("4").setPriority(1).addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(15, 13)).build();
+        ServiceJob service3 = new ServiceJob.Builder("3").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(15, 7)).build();
+        ServiceJob service4 = new ServiceJob.Builder("4").setPriority(1).addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(15, 13)).build();
 
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExampleWithSkills.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExampleWithSkills.java
index 6dbda8f6f..64cedd7c9 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExampleWithSkills.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExampleWithSkills.java
@@ -23,7 +23,7 @@
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl.Builder;
@@ -76,12 +76,12 @@ public static void main(String[] args) {
 		/*
          * build services at the required locations, each with a capacity-demand of 1.
 		 */
-        Service service1 = new Service.Builder("1").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 7)).build();
-        Service service2 = new Service.Builder("2").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 13)).build();
+        ServiceJob service1 = new ServiceJob.Builder("1").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 7)).build();
+        ServiceJob service2 = new ServiceJob.Builder("2").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 13)).build();
 
-        Service service3 = new Service.Builder("3").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(15, 7)).build();
+        ServiceJob service3 = new ServiceJob.Builder("3").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(15, 7)).build();
 
-        Service service4 = new Service.Builder("4").addSizeDimension(WEIGHT_INDEX, 1).addRequiredSkill("drill").setLocation(Location.newInstance(15, 13)).build();
+        ServiceJob service4 = new ServiceJob.Builder("4").addSizeDimension(WEIGHT_INDEX, 1).addRequiredSkill("drill").setLocation(Location.newInstance(15, 13)).build();
 
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleVRPWithBackhaulsExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleVRPWithBackhaulsExample.java
index 062ea2046..2d4c542b5 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleVRPWithBackhaulsExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleVRPWithBackhaulsExample.java
@@ -26,8 +26,8 @@
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
 import com.graphhopper.jsprit.core.problem.constraint.ServiceDeliveriesFirstConstraint;
-import com.graphhopper.jsprit.core.problem.job.Delivery;
-import com.graphhopper.jsprit.core.problem.job.Pickup;
+import com.graphhopper.jsprit.core.problem.job.DeliveryJob;
+import com.graphhopper.jsprit.core.problem.job.PickupJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl.Builder;
@@ -66,11 +66,11 @@ public static void main(String[] args) {
 		/*
          * build pickups and deliveries at the required locations, each with a capacity-demand of 1.
 		 */
-        Pickup pickup1 = new Pickup.Builder("1").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 7)).build();
-        Delivery delivery1 = new Delivery.Builder("2").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 13)).build();
+        PickupJob pickup1 = new PickupJob.Builder("1").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 7)).build();
+        DeliveryJob delivery1 = new DeliveryJob.Builder("2").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 13)).build();
 
-        Pickup pickup2 = new Pickup.Builder("3").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 7)).build();
-        Delivery delivery2 = new Delivery.Builder("4").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 13)).build();
+        PickupJob pickup2 = new PickupJob.Builder("3").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 7)).build();
+        DeliveryJob delivery2 = new DeliveryJob.Builder("4").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 13)).build();
 
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SolomonWithSkillsExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SolomonWithSkillsExample.java
index 005a73a74..182473a34 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SolomonWithSkillsExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SolomonWithSkillsExample.java
@@ -27,7 +27,7 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
@@ -63,17 +63,17 @@ public static void main(String[] args) {
             skillProblemBuilder.addVehicle(skill1Vehicle).addVehicle(skill2Vehicle);
         }
         for (Job job : vrp.getJobs().values()) {
-            Service service = (Service) job;
-            Service.Builder skillServiceBuilder;
+            ServiceJob service = (ServiceJob) job;
+            ServiceJob.Builder skillServiceBuilder;
             if (service.getActivity().getLocation().getCoordinate().getY() < 50.) {
-                skillServiceBuilder = new Service.Builder(service.getId() + "_skill2").setServiceTime(service.getActivity().getOperationTime())
+                skillServiceBuilder = new ServiceJob.Builder(service.getId() + "_skill2").setServiceTime(service.getActivity().getOperationTime())
                         .setLocation(Location.Builder.newInstance().setId(service.getActivity().getLocation().getId())
                                 .setCoordinate(service.getActivity().getLocation().getCoordinate()).build())
                         .addTimeWindows(service.getActivity().getTimeWindows())
                         .addSizeDimension(0, service.getActivity().getLoadChange().get(0));
                 skillServiceBuilder.addRequiredSkill("skill2");
             } else {
-                skillServiceBuilder = new Service.Builder(service.getId() + "_skill1").setServiceTime(service.getActivity().getOperationTime())
+                skillServiceBuilder = new ServiceJob.Builder(service.getId() + "_skill1").setServiceTime(service.getActivity().getOperationTime())
                         .setLocation(
                                 Location.Builder.newInstance().setId(service.getActivity().getLocation().getId())
                                         .setCoordinate(service.getActivity().getLocation().getCoordinate()).build())
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/TransportOfDisabledPeople.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/TransportOfDisabledPeople.java
index a0429fed3..7239e5803 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/TransportOfDisabledPeople.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/TransportOfDisabledPeople.java
@@ -31,7 +31,7 @@
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
 import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
 import com.graphhopper.jsprit.core.problem.constraint.HardRouteConstraint;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl.Builder;
@@ -99,54 +99,54 @@ public static void main(String[] args) {
          * build shipments at the required locations, each with a capacity-demand of 1.
          *
          */
-        Shipment shipment1 = Shipment.Builder.newInstance("wheelchair_1").addSizeDimension(WHEELCHAIRSPACE_INDEX, 1)
+        ShipmentJob shipment1 = new ShipmentJob.Builder("wheelchair_1").addSizeDimension(WHEELCHAIRSPACE_INDEX, 1)
                 .setPickupLocation(loc(Coordinate.newInstance(5, 7))).setDeliveryLocation(loc(Coordinate.newInstance(6, 9))).build();
-        Shipment shipment2 = Shipment.Builder.newInstance("2").addSizeDimension(PASSENGERSEATS_INDEX, 1).setPickupLocation(loc(Coordinate.newInstance(5, 13)))
+        ShipmentJob shipment2 = new ShipmentJob.Builder("2").addSizeDimension(PASSENGERSEATS_INDEX, 1).setPickupLocation(loc(Coordinate.newInstance(5, 13)))
                 .setDeliveryLocation(loc(Coordinate.newInstance(6, 11))).build();
 
-        Shipment shipment3 = Shipment.Builder.newInstance("wheelchair_2").addSizeDimension(WHEELCHAIRSPACE_INDEX, 1)
+        ShipmentJob shipment3 = new ShipmentJob.Builder("wheelchair_2").addSizeDimension(WHEELCHAIRSPACE_INDEX, 1)
                 .setPickupLocation(loc(Coordinate.newInstance(15, 7))).setDeliveryLocation(loc(Coordinate.newInstance(14, 9))).build();
-        Shipment shipment4 = Shipment.Builder.newInstance("4").addSizeDimension(PASSENGERSEATS_INDEX, 1).setPickupLocation(loc(Coordinate.newInstance(15, 13)))
+        ShipmentJob shipment4 = new ShipmentJob.Builder("4").addSizeDimension(PASSENGERSEATS_INDEX, 1).setPickupLocation(loc(Coordinate.newInstance(15, 13)))
                 .setDeliveryLocation(loc(Coordinate.newInstance(14, 11))).build();
 
-        Shipment shipment5 = Shipment.Builder.newInstance("wheelchair_3").addSizeDimension(WHEELCHAIRSPACE_INDEX, 1)
+        ShipmentJob shipment5 = new ShipmentJob.Builder("wheelchair_3").addSizeDimension(WHEELCHAIRSPACE_INDEX, 1)
                 .setPickupLocation(loc(Coordinate.newInstance(25, 27))).setDeliveryLocation(loc(Coordinate.newInstance(26, 29))).build();
-        Shipment shipment6 = Shipment.Builder.newInstance("6").addSizeDimension(PASSENGERSEATS_INDEX, 1).setPickupLocation(loc(Coordinate.newInstance(25, 33)))
+        ShipmentJob shipment6 = new ShipmentJob.Builder("6").addSizeDimension(PASSENGERSEATS_INDEX, 1).setPickupLocation(loc(Coordinate.newInstance(25, 33)))
                 .setDeliveryLocation(loc(Coordinate.newInstance(26, 31))).build();
 
-        Shipment shipment7 = Shipment.Builder.newInstance("7").addSizeDimension(PASSENGERSEATS_INDEX, 1).setPickupLocation(loc(Coordinate.newInstance(35, 27)))
+        ShipmentJob shipment7 = new ShipmentJob.Builder("7").addSizeDimension(PASSENGERSEATS_INDEX, 1).setPickupLocation(loc(Coordinate.newInstance(35, 27)))
                 .setDeliveryLocation(loc(Coordinate.newInstance(34, 29))).build();
-        Shipment shipment8 = Shipment.Builder.newInstance("wheelchair_4").addSizeDimension(WHEELCHAIRSPACE_INDEX, 1)
+        ShipmentJob shipment8 = new ShipmentJob.Builder("wheelchair_4").addSizeDimension(WHEELCHAIRSPACE_INDEX, 1)
                 .setPickupLocation(loc(Coordinate.newInstance(35, 33))).setDeliveryLocation(loc(Coordinate.newInstance(34, 31))).build();
 
-        Shipment shipment9 = Shipment.Builder.newInstance("9").addSizeDimension(PASSENGERSEATS_INDEX, 1).setPickupLocation(loc(Coordinate.newInstance(5, 27)))
+        ShipmentJob shipment9 = new ShipmentJob.Builder("9").addSizeDimension(PASSENGERSEATS_INDEX, 1).setPickupLocation(loc(Coordinate.newInstance(5, 27)))
                 .setDeliveryLocation(loc(Coordinate.newInstance(6, 29))).build();
-        Shipment shipment10 = Shipment.Builder.newInstance("wheelchair_5").addSizeDimension(WHEELCHAIRSPACE_INDEX, 1)
+        ShipmentJob shipment10 = new ShipmentJob.Builder("wheelchair_5").addSizeDimension(WHEELCHAIRSPACE_INDEX, 1)
                 .setPickupLocation(loc(Coordinate.newInstance(5, 33))).setDeliveryLocation(loc(Coordinate.newInstance(6, 31))).build();
 
-        Shipment shipment11 = Shipment.Builder.newInstance("11").addSizeDimension(PASSENGERSEATS_INDEX, 1)
+        ShipmentJob shipment11 = new ShipmentJob.Builder("11").addSizeDimension(PASSENGERSEATS_INDEX, 1)
                 .setPickupLocation(loc(Coordinate.newInstance(15, 27))).setDeliveryLocation(loc(Coordinate.newInstance(14, 29))).build();
-        Shipment shipment12 = Shipment.Builder.newInstance("wheelchair_6").addSizeDimension(WHEELCHAIRSPACE_INDEX, 1)
+        ShipmentJob shipment12 = new ShipmentJob.Builder("wheelchair_6").addSizeDimension(WHEELCHAIRSPACE_INDEX, 1)
                 .setPickupLocation(loc(Coordinate.newInstance(15, 33))).setDeliveryLocation(loc(Coordinate.newInstance(14, 31))).build();
 
-        Shipment shipment13 = Shipment.Builder.newInstance("13").addSizeDimension(PASSENGERSEATS_INDEX, 1).setPickupLocation(loc(Coordinate.newInstance(25, 7)))
+        ShipmentJob shipment13 = new ShipmentJob.Builder("13").addSizeDimension(PASSENGERSEATS_INDEX, 1).setPickupLocation(loc(Coordinate.newInstance(25, 7)))
                 .setDeliveryLocation(loc(Coordinate.newInstance(26, 9))).build();
-        Shipment shipment14 = Shipment.Builder.newInstance("wheelchair_7").addSizeDimension(WHEELCHAIRSPACE_INDEX, 1)
+        ShipmentJob shipment14 = new ShipmentJob.Builder("wheelchair_7").addSizeDimension(WHEELCHAIRSPACE_INDEX, 1)
                 .setPickupLocation(loc(Coordinate.newInstance(25, 13))).setDeliveryLocation(loc(Coordinate.newInstance(26, 11))).build();
 
-        Shipment shipment15 = Shipment.Builder.newInstance("15").addSizeDimension(PASSENGERSEATS_INDEX, 1).setPickupLocation(loc(Coordinate.newInstance(35, 7)))
+        ShipmentJob shipment15 = new ShipmentJob.Builder("15").addSizeDimension(PASSENGERSEATS_INDEX, 1).setPickupLocation(loc(Coordinate.newInstance(35, 7)))
                 .setDeliveryLocation(loc(Coordinate.newInstance(34, 9))).build();
-        Shipment shipment16 = Shipment.Builder.newInstance("wheelchair_8").addSizeDimension(WHEELCHAIRSPACE_INDEX, 1)
+        ShipmentJob shipment16 = new ShipmentJob.Builder("wheelchair_8").addSizeDimension(WHEELCHAIRSPACE_INDEX, 1)
                 .setPickupLocation(loc(Coordinate.newInstance(35, 13))).setDeliveryLocation(loc(Coordinate.newInstance(34, 11))).build();
 
-        Shipment shipment17 = Shipment.Builder.newInstance("17").addSizeDimension(PASSENGERSEATS_INDEX, 1).setPickupLocation(loc(Coordinate.newInstance(5, 14)))
+        ShipmentJob shipment17 = new ShipmentJob.Builder("17").addSizeDimension(PASSENGERSEATS_INDEX, 1).setPickupLocation(loc(Coordinate.newInstance(5, 14)))
                 .setDeliveryLocation(loc(Coordinate.newInstance(6, 16))).build();
-        Shipment shipment18 = Shipment.Builder.newInstance("wheelchair_9").addSizeDimension(WHEELCHAIRSPACE_INDEX, 1)
+        ShipmentJob shipment18 = new ShipmentJob.Builder("wheelchair_9").addSizeDimension(WHEELCHAIRSPACE_INDEX, 1)
                 .setPickupLocation(loc(Coordinate.newInstance(5, 20))).setDeliveryLocation(loc(Coordinate.newInstance(6, 18))).build();
 
-        Shipment shipment19 = Shipment.Builder.newInstance("19").addSizeDimension(PASSENGERSEATS_INDEX, 1)
+        ShipmentJob shipment19 = new ShipmentJob.Builder("19").addSizeDimension(PASSENGERSEATS_INDEX, 1)
                 .setPickupLocation(loc(Coordinate.newInstance(15, 14))).setDeliveryLocation(loc(Coordinate.newInstance(14, 16))).build();
-        Shipment shipment20 = Shipment.Builder.newInstance("wheelchair_10").addSizeDimension(WHEELCHAIRSPACE_INDEX, 1)
+        ShipmentJob shipment20 = new ShipmentJob.Builder("wheelchair_10").addSizeDimension(WHEELCHAIRSPACE_INDEX, 1)
                 .setPickupLocation(loc(Coordinate.newInstance(15, 20))).setDeliveryLocation(loc(Coordinate.newInstance(14, 18))).build();
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
@@ -165,7 +165,7 @@ public static void main(String[] args) {
          * wheelchair-bus can only pickup passenger where x<15
          */
         HardRouteConstraint wheelchair_bus_passenger_pickup_constraint = insertionContext -> {
-            Shipment shipment2insert = ((Shipment) insertionContext.getJob());
+            ShipmentJob shipment2insert = ((ShipmentJob) insertionContext.getJob());
             if (insertionContext.getNewVehicle().getId().equals("wheelchair_bus")) {
                 if (shipment2insert.getSize().get(PASSENGERSEATS_INDEX) > 0) {
                     if (shipment2insert.getPickupActivity().getLocation().getCoordinate().getX() > 15.
diff --git a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/BelhaizaReader.java b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/BelhaizaReader.java
index c26b57bea..365c95970 100644
--- a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/BelhaizaReader.java
+++ b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/BelhaizaReader.java
@@ -21,7 +21,7 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.Coordinate;
@@ -110,7 +110,7 @@ public void read(String solomonFile) {
                     }
 
                 } else {
-                    Service.Builder serviceBuilder = new Service.Builder(customerId);
+                    ServiceJob.Builder serviceBuilder = new ServiceJob.Builder(customerId);
                     serviceBuilder.addSizeDimension(0, demand).setLocation(Location.Builder.newInstance().setCoordinate(coord).setId(customerId).build()).setServiceTime(serviceTime);
                     int noTimeWindows = Integer.parseInt(tokens[7]);
                     for (int i = 0; i < noTimeWindows * 2; i = i + 2) {
diff --git a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/ChristofidesReader.java b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/ChristofidesReader.java
index 45477a206..06132f6ae 100644
--- a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/ChristofidesReader.java
+++ b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/ChristofidesReader.java
@@ -21,7 +21,7 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.Coordinate;
@@ -92,7 +92,7 @@ public void read(String fileName) {
                 Coordinate customerCoord = makeCoord(tokens[0].trim(), tokens[1].trim());
                 int demand = Integer.parseInt(tokens[2].trim());
                 String customer = Integer.valueOf(counter - 1).toString();
-                Service service = new Service.Builder(customer).addSizeDimension(0, demand).setServiceTime(serviceTime).setLocation(Location.newInstance(customerCoord.getX(), customerCoord.getY())).build();
+                ServiceJob service = new ServiceJob.Builder(customer).addSizeDimension(0, demand).setServiceTime(serviceTime).setLocation(Location.newInstance(customerCoord.getX(), customerCoord.getY())).build();
                 vrpBuilder.addJob(service);
             }
             counter++;
diff --git a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/CordeauReader.java b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/CordeauReader.java
index 92defdf39..57e3842cf 100644
--- a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/CordeauReader.java
+++ b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/CordeauReader.java
@@ -21,7 +21,7 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl.Builder;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
@@ -103,7 +103,7 @@ public void read(String fileName) {
                 Coordinate customerCoord = makeCoord(tokens[1].trim(), tokens[2].trim());
                 double serviceTime = Double.parseDouble(tokens[3].trim());
                 int demand = Integer.parseInt(tokens[4].trim());
-                Service service = new Service.Builder(id).addSizeDimension(0, demand).setServiceTime(serviceTime)
+                ServiceJob service = new ServiceJob.Builder(id).addSizeDimension(0, demand).setServiceTime(serviceTime)
                     .setLocation(Location.Builder.newInstance().setId(id).setCoordinate(customerCoord).build()).build();
                 vrpBuilder.addJob(service);
             } else if (counter <= (nOfCustomers + nOfDepots + nOfDepots)) {
diff --git a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/LiLimReader.java b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/LiLimReader.java
index 95bedb71c..0b1dcb7ac 100644
--- a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/LiLimReader.java
+++ b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/LiLimReader.java
@@ -21,7 +21,7 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.Builder;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
@@ -128,7 +128,7 @@ private void buildShipments() {
             String from = rel.from;
             String to = rel.to;
             int demand = rel.demand;
-            Shipment s = Shipment.Builder.newInstance(counter.toString()).addSizeDimension(0, demand)
+            ShipmentJob s = new ShipmentJob.Builder(counter.toString()).addSizeDimension(0, demand)
                 .setPickupLocation(Location.Builder.newInstance().setCoordinate(customers.get(from).coord).build()).setPickupServiceTime(customers.get(from).serviceTime)
                 .setPickupTimeWindow(TimeWindow.newInstance(customers.get(from).start, customers.get(from).end))
                 .setDeliveryLocation(Location.Builder.newInstance().setCoordinate(customers.get(to).coord).build()).setDeliveryServiceTime(customers.get(to).serviceTime)
diff --git a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/LopezIbanezBlumReader.java b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/LopezIbanezBlumReader.java
index 28ef86046..807dec90f 100644
--- a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/LopezIbanezBlumReader.java
+++ b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/LopezIbanezBlumReader.java
@@ -28,7 +28,7 @@
 
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.util.FastVehicleRoutingTransportCostsMatrix;
@@ -80,7 +80,7 @@ public void read(String instanceFile) {
                             .setEarliestStart(Double.parseDouble(twTokens[0])).setLatestArrival(Double.parseDouble(twTokens[1])).build();
                     builder.addVehicle(travelingSalesman);
                 } else {
-                    Service s = new Service.Builder("" + nodeIndex).setLocation(Location.newInstance(nodeIndex))
+                    ServiceJob s = new ServiceJob.Builder("" + nodeIndex).setLocation(Location.newInstance(nodeIndex))
                             .setTimeWindow(TimeWindow.newInstance(Double.parseDouble(twTokens[0]), Double.parseDouble(twTokens[1]))).build();
                     builder.addJob(s);
                 }
@@ -99,12 +99,12 @@ public static void main(String[] args) {
         System.out.println("0->20: " + vrp.getTransportCosts().getTransportCost(Location.newInstance(0), Location.newInstance(20), 0, null, null));
         System.out.println("4->18: " + vrp.getTransportCosts().getTransportCost(Location.newInstance(4), Location.newInstance(18), 0, null, null));
         System.out.println("20->8: " + vrp.getTransportCosts().getTransportCost(Location.newInstance(20), Location.newInstance(8), 0, null, null));
-        System.out.println("18: " + ((Service) vrp.getJobs().get("" + 18)).getActivity().getSingleTimeWindow().getStart() + " "
-                + ((Service) vrp.getJobs().get("" + 18)).getActivity().getSingleTimeWindow().getEnd());
-        System.out.println("20: " + ((Service) vrp.getJobs().get("" + 20)).getActivity().getSingleTimeWindow().getStart() + " "
-                + ((Service) vrp.getJobs().get("" + 20)).getActivity().getSingleTimeWindow().getEnd());
-        System.out.println("1: " + ((Service) vrp.getJobs().get("" + 1)).getActivity().getSingleTimeWindow().getStart() + " "
-                + ((Service) vrp.getJobs().get("" + 1)).getActivity().getSingleTimeWindow().getEnd());
+        System.out.println("18: " + ((ServiceJob) vrp.getJobs().get("" + 18)).getActivity().getSingleTimeWindow().getStart() + " "
+                + ((ServiceJob) vrp.getJobs().get("" + 18)).getActivity().getSingleTimeWindow().getEnd());
+        System.out.println("20: " + ((ServiceJob) vrp.getJobs().get("" + 20)).getActivity().getSingleTimeWindow().getStart() + " "
+                + ((ServiceJob) vrp.getJobs().get("" + 20)).getActivity().getSingleTimeWindow().getEnd());
+        System.out.println("1: " + ((ServiceJob) vrp.getJobs().get("" + 1)).getActivity().getSingleTimeWindow().getStart() + " "
+                + ((ServiceJob) vrp.getJobs().get("" + 1)).getActivity().getSingleTimeWindow().getEnd());
     }
 
     private void close(BufferedReader reader) {
diff --git a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/LuiShenReader.java b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/LuiShenReader.java
index 3d180769f..d841b61d4 100644
--- a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/LuiShenReader.java
+++ b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/LuiShenReader.java
@@ -21,7 +21,7 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
@@ -86,7 +86,7 @@ public void read(String instanceFile, String vehicleFile, String costScenario) {
                 if (counter == 10) {
                     createVehicles(vehicleFile, costScenario, customerId, coord, start, end);
                 } else {
-                    Service service = new Service.Builder("" + counter).addSizeDimension(0, demand)
+                    ServiceJob service = new ServiceJob.Builder("" + counter).addSizeDimension(0, demand)
                         .setLocation(Location.Builder.newInstance().setCoordinate(coord).setId(customerId).build()).setServiceTime(serviceTime)
                         .setTimeWindow(TimeWindow.newInstance(start, end)).build();
                     vrpBuilder.addJob(service);
diff --git a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/SolomonReader.java b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/SolomonReader.java
index eb71dd876..39fed06d3 100644
--- a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/SolomonReader.java
+++ b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/SolomonReader.java
@@ -21,7 +21,7 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
@@ -110,7 +110,7 @@ public void read(String solomonFile) {
                     vrpBuilder.addVehicle(vehicle);
 
                 } else {
-                    Service service = new Service.Builder(customerId).addSizeDimension(0, demand)
+                    ServiceJob service = new ServiceJob.Builder(customerId).addSizeDimension(0, demand)
                         .setLocation(Location.Builder.newInstance().setCoordinate(coord).setId(customerId).build()).setServiceTime(serviceTime)
                         .setTimeWindow(TimeWindow.newInstance(start, end)).build();
                     vrpBuilder.addJob(service);
diff --git a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/TSPLIB95Reader.java b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/TSPLIB95Reader.java
index db119e5c3..18eb87835 100644
--- a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/TSPLIB95Reader.java
+++ b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/TSPLIB95Reader.java
@@ -32,7 +32,7 @@
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
@@ -198,7 +198,7 @@ public void read(String filename) {
                     continue;
                 }
             }
-            Service service = new Service.Builder(id)
+            ServiceJob service = new ServiceJob.Builder(id)
                     .setLocation(Location.Builder.newInstance().setId(id)
                             .setCoordinate(coords[index]).setIndex(index).build())
                     .addSizeDimension(0, demands[index]).build();
@@ -210,7 +210,7 @@ public void read(String filename) {
                 locations.add(v.getStartLocation());
             }
             for (Job j : vrpBuilder.getAddedJobs()) {
-                locations.add(((Service) j).getActivity().getLocation());
+                locations.add(((ServiceJob) j).getActivity().getLocation());
             }
             vrpBuilder.setRoutingCost(getGEOMatrix(locations));
         } else if (edgeType.equals("EXPLICIT")) {
diff --git a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/VrphGoldenReader.java b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/VrphGoldenReader.java
index f9f4bc50e..1ae25ea03 100644
--- a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/VrphGoldenReader.java
+++ b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/VrphGoldenReader.java
@@ -22,7 +22,7 @@
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.Builder;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.Coordinate;
@@ -86,7 +86,7 @@ public void read(String filename) {
                 if (customerCount == 0) {
                     depotCoord = Coordinate.newInstance(Double.parseDouble(tokens[1]), Double.parseDouble(tokens[2]));
                 } else {
-                    Service.Builder serviceBuilder = new Service.Builder(tokens[0]).addSizeDimension(0, Integer.parseInt(tokens[3]));
+                    ServiceJob.Builder serviceBuilder = new ServiceJob.Builder(tokens[0]).addSizeDimension(0, Integer.parseInt(tokens[3]));
                     serviceBuilder.setLocation(Location.newInstance(Double.parseDouble(tokens[1]), Double.parseDouble(tokens[2])));
                     vrpBuilder.addJob(serviceBuilder.build());
                 }
diff --git a/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/BelhaizaReaderTest.java b/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/BelhaizaReaderTest.java
index 490eeb505..be018f78a 100644
--- a/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/BelhaizaReaderTest.java
+++ b/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/BelhaizaReaderTest.java
@@ -30,7 +30,7 @@
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
@@ -98,7 +98,7 @@ public void whenReadingBelhaizaInstance_serviceDurationOfCustomerTwoIsCorrect()
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new BelhaizaReader(builder).read(getPath());
         VehicleRoutingProblem vrp = builder.build();
-        assertEquals(90, ((Service) vrp.getJobs().get("2")).getActivity().getOperationTime(), 0.1);
+        assertEquals(90, ((ServiceJob) vrp.getJobs().get("2")).getActivity().getOperationTime(), 0.1);
     }
 
     @Test
@@ -106,7 +106,7 @@ public void noTimeWindowsShouldBeCorrect() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new BelhaizaReader(builder).read(getPath());
         VehicleRoutingProblem vrp = builder.build();
-        assertEquals(5, ((Service) vrp.getJobs().get("1")).getTimeWindows().size());
+        assertEquals(5, ((ServiceJob) vrp.getJobs().get("1")).getTimeWindows().size());
     }
 
     @Test
@@ -114,7 +114,7 @@ public void noTimeWindowsShouldBeCorrect2() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new BelhaizaReader(builder).read(getPath());
         VehicleRoutingProblem vrp = builder.build();
-        assertEquals(10, ((Service) vrp.getJobs().get("2")).getTimeWindows().size());
+        assertEquals(10, ((ServiceJob) vrp.getJobs().get("2")).getTimeWindows().size());
     }
 
     @Test
@@ -131,7 +131,7 @@ public void secondTimeWindowShouldBeCorrect() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new BelhaizaReader(builder).read(getPath());
         VehicleRoutingProblem vrp = builder.build();
-        List<TimeWindow> timeWindows = new ArrayList<TimeWindow>(((Service) vrp.getJobs().get("1")).getTimeWindows());
+        List<TimeWindow> timeWindows = new ArrayList<TimeWindow>(((ServiceJob) vrp.getJobs().get("1")).getTimeWindows());
         assertEquals(118., timeWindows.get(1).getStart(), 0.1);
         assertEquals(148., timeWindows.get(1).getEnd(), 0.1);
     }
@@ -141,7 +141,7 @@ public void thirdTimeWindowShouldBeCorrect() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new BelhaizaReader(builder).read(getPath());
         VehicleRoutingProblem vrp = builder.build();
-        List<TimeWindow> timeWindows = new ArrayList<TimeWindow>(((Service) vrp.getJobs().get("1")).getTimeWindows());
+        List<TimeWindow> timeWindows = new ArrayList<TimeWindow>(((ServiceJob) vrp.getJobs().get("1")).getTimeWindows());
         assertEquals(235., timeWindows.get(2).getStart(), 0.1);
         assertEquals(258., timeWindows.get(2).getEnd(), 0.1);
     }
@@ -151,7 +151,7 @@ public void fourthTimeWindowShouldBeCorrect() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new BelhaizaReader(builder).read(getPath());
         VehicleRoutingProblem vrp = builder.build();
-        List<TimeWindow> timeWindows = new ArrayList<TimeWindow>(((Service) vrp.getJobs().get("1")).getTimeWindows());
+        List<TimeWindow> timeWindows = new ArrayList<TimeWindow>(((ServiceJob) vrp.getJobs().get("1")).getTimeWindows());
         assertEquals(343., timeWindows.get(3).getStart(), 0.1);
         assertEquals(355., timeWindows.get(3).getEnd(), 0.1);
     }
@@ -161,7 +161,7 @@ public void fifthTimeWindowShouldBeCorrect() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new BelhaizaReader(builder).read(getPath());
         VehicleRoutingProblem vrp = builder.build();
-        List<TimeWindow> timeWindows = new ArrayList<TimeWindow>(((Service) vrp.getJobs().get("1")).getTimeWindows());
+        List<TimeWindow> timeWindows = new ArrayList<TimeWindow>(((ServiceJob) vrp.getJobs().get("1")).getTimeWindows());
         assertEquals(441., timeWindows.get(4).getStart(), 0.1);
         assertEquals(457., timeWindows.get(4).getEnd(), 0.1);
     }
diff --git a/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/ChristophidesReaderTest.java b/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/ChristophidesReaderTest.java
index 57955f01f..d3d6fec95 100644
--- a/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/ChristophidesReaderTest.java
+++ b/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/ChristophidesReaderTest.java
@@ -25,7 +25,7 @@
 
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 
 
@@ -100,7 +100,7 @@ public void whenReadingInstance_serviceDurationOfCustomerTwoIsCorrect() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new ChristofidesReader(builder).read(getPath("vrpnc13.txt"));
         VehicleRoutingProblem vrp = builder.build();
-        assertEquals(50.0, ((Service) vrp.getJobs().get("2")).getActivity().getOperationTime(), 0.1);
+        assertEquals(50.0, ((ServiceJob) vrp.getJobs().get("2")).getActivity().getOperationTime(), 0.1);
     }
 
 
diff --git a/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/CordeauReaderTest.java b/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/CordeauReaderTest.java
index ccf820a36..eebaaa43d 100644
--- a/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/CordeauReaderTest.java
+++ b/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/CordeauReaderTest.java
@@ -26,7 +26,7 @@
 
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 
 
@@ -91,7 +91,7 @@ public void whenReadingCustomersCordeauInstance_customerOneShouldHaveCorrectCoor
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         new CordeauReader(vrpBuilder).read(getPath("p01"));
         VehicleRoutingProblem vrp = vrpBuilder.build();
-        Service service = (Service) vrp.getJobs().get("1");
+        ServiceJob service = (ServiceJob) vrp.getJobs().get("1");
         assertEquals(37.0, service.getActivity().getLocation().getCoordinate().getX(), 0.1);
         assertEquals(52.0, service.getActivity().getLocation().getCoordinate().getY(), 0.1);
     }
@@ -101,7 +101,7 @@ public void whenReadingCustomersCordeauInstance_customerTwoShouldHaveCorrectServ
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         new CordeauReader(vrpBuilder).read(getPath("p01"));
         VehicleRoutingProblem vrp = vrpBuilder.build();
-        Service service = (Service) vrp.getJobs().get("2");
+        ServiceJob service = (ServiceJob) vrp.getJobs().get("2");
         assertEquals(0.0, service.getActivity().getOperationTime(), 0.1);
     }
 
@@ -110,7 +110,7 @@ public void whenReadingCustomersCordeauInstance_customerThreeShouldHaveCorrectDe
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         new CordeauReader(vrpBuilder).read(getPath("p01"));
         VehicleRoutingProblem vrp = vrpBuilder.build();
-        Service service = (Service) vrp.getJobs().get("3");
+        ServiceJob service = (ServiceJob) vrp.getJobs().get("3");
         assertEquals(16.0, service.getActivity().getLoadChange().get(0), 0.1);
     }
 
@@ -119,7 +119,7 @@ public void whenReadingCustomersCordeauInstance_customerFortySevenShouldHaveCorr
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         new CordeauReader(vrpBuilder).read(getPath("p01"));
         VehicleRoutingProblem vrp = vrpBuilder.build();
-        Service service = (Service) vrp.getJobs().get("47");
+        ServiceJob service = (ServiceJob) vrp.getJobs().get("47");
         assertEquals(25.0, service.getActivity().getLoadChange().get(0), 0.1);
     }
 
diff --git a/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/GoldenReaderTest.java b/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/GoldenReaderTest.java
index a6e0de296..5a1511c07 100644
--- a/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/GoldenReaderTest.java
+++ b/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/GoldenReaderTest.java
@@ -28,7 +28,7 @@
 
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.util.Coordinate;
 import com.graphhopper.jsprit.instance.reader.VrphGoldenReader.VrphType;
@@ -295,7 +295,7 @@ public void whenReadingInstance_service50MustHaveCorrectCoordinate() {
 
     private Coordinate getCoord(String string, VehicleRoutingProblem vrp) {
         Job j = getJob(string, vrp);
-        return ((Service) j).getActivity().getLocation().getCoordinate();
+        return ((ServiceJob) j).getActivity().getLocation().getCoordinate();
     }
 
     @Test
diff --git a/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/SolomonReaderTest.java b/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/SolomonReaderTest.java
index be45b0673..4fd684545 100644
--- a/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/SolomonReaderTest.java
+++ b/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/SolomonReaderTest.java
@@ -25,7 +25,7 @@
 
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
-import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 
 
@@ -89,7 +89,7 @@ public void whenReadingSolomonInstance_serviceDurationOfCustomerTwoIsCorrect() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new SolomonReader(builder).read(getPath());
         VehicleRoutingProblem vrp = builder.build();
-        assertEquals(90, ((Service) vrp.getJobs().get("2")).getActivity().getOperationTime(), 0.1);
+        assertEquals(90, ((ServiceJob) vrp.getJobs().get("2")).getActivity().getOperationTime(), 0.1);
     }
 
     @Test
@@ -97,7 +97,7 @@ public void whenReadingSolomonInstance_earliestServiceStartTimeOfCustomerSixtyTw
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new SolomonReader(builder).read(getPath());
         VehicleRoutingProblem vrp = builder.build();
-        assertEquals(262.0, ((Service) vrp.getJobs().get("62")).getActivity().getSingleTimeWindow().getStart(), 0.1);
+        assertEquals(262.0, ((ServiceJob) vrp.getJobs().get("62")).getActivity().getSingleTimeWindow().getStart(), 0.1);
     }
 
     @Test
@@ -105,7 +105,7 @@ public void whenReadingSolomonInstance_latestServiceStartTimeOfCustomerEightySev
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new SolomonReader(builder).read(getPath());
         VehicleRoutingProblem vrp = builder.build();
-        assertEquals(144.0, ((Service) vrp.getJobs().get("87")).getActivity().getSingleTimeWindow().getEnd(), 0.1);
+        assertEquals(144.0, ((ServiceJob) vrp.getJobs().get("87")).getActivity().getSingleTimeWindow().getEnd(), 0.1);
     }
 
 
diff --git a/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLReader.java b/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLReader.java
index efe8666de..4555e96b5 100644
--- a/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLReader.java
+++ b/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLReader.java
@@ -42,11 +42,11 @@
 import com.graphhopper.jsprit.core.problem.driver.DriverImpl;
 import com.graphhopper.jsprit.core.problem.job.AbstractSingleActivityJob;
 import com.graphhopper.jsprit.core.problem.job.Break;
-import com.graphhopper.jsprit.core.problem.job.Delivery;
+import com.graphhopper.jsprit.core.problem.job.DeliveryJob;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Pickup;
-import com.graphhopper.jsprit.core.problem.job.Service;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.PickupJob;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
@@ -61,7 +61,7 @@
 public class VrpXMLReader {
 
     public interface ServiceBuilderFactory {
-        Service.BuilderBase<?, ?> createBuilder(String serviceType, String id, Integer size);
+        ServiceJob.BuilderBase<?, ?> createBuilder(String serviceType, String id, Integer size);
     }
 
     static class DefaultServiceBuilderFactory implements ServiceBuilderFactory {
@@ -70,21 +70,21 @@
         public AbstractSingleActivityJob.BuilderBase<?, ?> createBuilder(String serviceType, String id, Integer size) {
             if (serviceType.equals("pickup")) {
                 if (size != null) {
-                    return new Pickup.Builder(id).addSizeDimension(0, size);
+                    return new PickupJob.Builder(id).addSizeDimension(0, size);
                 } else {
-                    return new Pickup.Builder(id);
+                    return new PickupJob.Builder(id);
                 }
             } else if (serviceType.equals("delivery")) {
                 if (size != null) {
-                    return new Delivery.Builder(id).addSizeDimension(0, size);
+                    return new DeliveryJob.Builder(id).addSizeDimension(0, size);
                 } else {
-                    return new Delivery.Builder(id);
+                    return new DeliveryJob.Builder(id);
                 }
             } else {
                 if (size != null) {
-                    return new Service.Builder(id).addSizeDimension(0, size);
+                    return new ServiceJob.Builder(id).addSizeDimension(0, size);
                 } else {
-                    return new Service.Builder(id);
+                    return new ServiceJob.Builder(id);
                 }
 
             }
@@ -99,7 +99,7 @@
 
     private Map<String, AbstractSingleActivityJob<?>> serviceMap;
 
-    private Map<String, Shipment> shipmentMap;
+    private Map<String, ShipmentJob> shipmentMap;
 
     private Set<String> freezedJobIds = new HashSet<String>();
 
@@ -197,7 +197,7 @@ private void addJobsAndTheirLocationsToVrp() {
                 vrpBuilder.addJob(service);
             }
         }
-        for (Shipment shipment : shipmentMap.values()) {
+        for (ShipmentJob shipment : shipmentMap.values()) {
             if (!freezedJobIds.contains(shipment.getId())) {
                 vrpBuilder.addJob(shipment);
             }
@@ -248,7 +248,7 @@ private void readInitialRoutes(XMLConfiguration xmlConfig) {
                         if (shipmentId == null) {
                             throw new IllegalArgumentException("either serviceId or shipmentId is missing");
                         }
-                        Shipment shipment = getShipment(shipmentId);
+                        ShipmentJob shipment = getShipment(shipmentId);
                         if (shipment == null) {
                             throw new IllegalArgumentException("shipment to shipmentId " + shipmentId
                                     + " is missing (reference in one of your initial routes). make sure you define the shipment you refer to here in <shipments> </shipments>.");
@@ -323,7 +323,7 @@ private void readSolutions(XMLConfiguration vrpProblem) {
                             if (shipmentId == null) {
                                 throw new IllegalArgumentException("either serviceId or shipmentId is missing");
                             }
-                            Shipment shipment = getShipment(shipmentId);
+                            ShipmentJob shipment = getShipment(shipmentId);
                             if (shipment == null) {
                                 throw new IllegalArgumentException("shipment with id " + shipmentId + " does not exist.");
                             }
@@ -357,7 +357,7 @@ private void readSolutions(XMLConfiguration vrpProblem) {
         }
     }
 
-    private Shipment getShipment(String shipmentId) {
+    private ShipmentJob getShipment(String shipmentId) {
         return shipmentMap.get(shipmentId);
     }
 
@@ -402,11 +402,11 @@ private void readShipments(XMLConfiguration config) {
                         "either use capacity or capacity-dimension, not both. prefer the use of 'capacity-dimensions' over 'capacity'.");
             }
 
-            Shipment.Builder builder;
+            ShipmentJob.Builder builder;
             if (capacityString != null) {
-                builder = Shipment.Builder.newInstance(id).addSizeDimension(0, Integer.parseInt(capacityString));
+                builder = new ShipmentJob.Builder(id).addSizeDimension(0, Integer.parseInt(capacityString));
             } else {
-                builder = Shipment.Builder.newInstance(id);
+                builder = new ShipmentJob.Builder(id);
                 List<HierarchicalConfiguration> dimensionConfigs = shipmentConfig.configurationsAt("capacity-dimensions.dimension");
                 for (HierarchicalConfiguration dimension : dimensionConfigs) {
                     Integer index = dimension.getInt("[@index]");
@@ -514,7 +514,7 @@ private void readShipments(XMLConfiguration config) {
             }
 
             //build shipment
-            Shipment shipment = builder.build();
+            ShipmentJob shipment = builder.build();
 //			vrpBuilder.addJob(shipment);
             shipmentMap.put(shipment.getId(), shipment);
         }
diff --git a/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLWriter.java b/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLWriter.java
index e3b0bdacf..a28aa43ec 100644
--- a/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLWriter.java
+++ b/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLWriter.java
@@ -40,8 +40,8 @@
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Break;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivity;
@@ -175,9 +175,9 @@ private void writeInitialRoutes(XMLConf xmlConfig) {
                 xmlConfig.setProperty(path + "(" + routeCounter + ").act(" + actCounter + ")[@type]", act.getName());
                 if (act instanceof JobActivity) {
                     Job job = ((JobActivity) act).getJob();
-                    if (job instanceof Service) {
+                    if (job instanceof ServiceJob) {
                         xmlConfig.setProperty(path + "(" + routeCounter + ").act(" + actCounter + ").serviceId", job.getId());
-                    } else if (job instanceof Shipment) {
+                    } else if (job instanceof ShipmentJob) {
                         xmlConfig.setProperty(path + "(" + routeCounter + ").act(" + actCounter + ").shipmentId", job.getId());
                     } else if (job instanceof Break) {
                         xmlConfig.setProperty(path + "(" + routeCounter + ").act(" + actCounter + ").breakId", job.getId());
@@ -220,10 +220,10 @@ private void writeSolutions(XMLConf xmlConfig) {
                         if (job instanceof Break) {
                             xmlConfig.setProperty(solutionPath + "(" + counter + ").routes.route(" + routeCounter + ").act(" + actCounter + ").breakId",
                                     job.getId());
-                        } else if (job instanceof Service) {
+                        } else if (job instanceof ServiceJob) {
                             xmlConfig.setProperty(solutionPath + "(" + counter + ").routes.route(" + routeCounter + ").act(" + actCounter + ").serviceId",
                                     job.getId());
-                        } else if (job instanceof Shipment) {
+                        } else if (job instanceof ShipmentJob) {
                             xmlConfig.setProperty(solutionPath + "(" + counter + ").routes.route(" + routeCounter + ").act(" + actCounter + ").shipmentId",
                                     job.getId());
                         } else {
@@ -253,10 +253,10 @@ private void writeServices(XMLConf xmlConfig, List<Job> jobs) {
         String shipmentPathString = "services.service";
         int counter = 0;
         for (Job j : jobs) {
-            if (!(j instanceof Service)) {
+            if (!(j instanceof ServiceJob)) {
                 continue;
             }
-            Service service = (Service) j;
+            ServiceJob service = (ServiceJob) j;
             ServiceActivity activity = service.getActivity();
             xmlConfig.setProperty(shipmentPathString + "(" + counter + ")[@id]", service.getId());
             xmlConfig.setProperty(shipmentPathString + "(" + counter + ")[@type]", service.getType());
@@ -303,10 +303,10 @@ private void writeShipments(XMLConf xmlConfig, List<Job> jobs) {
         String shipmentPathString = "shipments.shipment";
         int counter = 0;
         for (Job j : jobs) {
-            if (!(j instanceof Shipment)) {
+            if (!(j instanceof ShipmentJob)) {
                 continue;
             }
-            Shipment shipment = (Shipment) j;
+            ShipmentJob shipment = (ShipmentJob) j;
             PickupActivity pickupActivity = shipment.getPickupActivity();
             DeliveryActivity deliveryActivity = shipment.getDeliveryActivity();
             xmlConfig.setProperty(shipmentPathString + "(" + counter + ")[@id]", shipment.getId());
diff --git a/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/InitialRoutesTest.java b/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/InitialRoutesTest.java
index 5d53510f6..719d0edef 100644
--- a/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/InitialRoutesTest.java
+++ b/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/InitialRoutesTest.java
@@ -21,8 +21,8 @@
 
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import org.junit.Test;
 
@@ -70,7 +70,7 @@ public void whenReading_jobMapShouldContain_shipment4() {
     private int getNuShipments(VehicleRoutingProblem vrp) {
         int nuShipments = 0;
         for (Job job : vrp.getJobs().values()) {
-            if (job instanceof Shipment) {
+            if (job instanceof ShipmentJob) {
                 nuShipments++;
             }
         }
@@ -80,7 +80,7 @@ private int getNuShipments(VehicleRoutingProblem vrp) {
     private int getNuServices(VehicleRoutingProblem vrp) {
         int nuServices = 0;
         for (Job job : vrp.getJobs().values()) {
-            if (job instanceof Service) {
+            if (job instanceof ServiceJob) {
                 nuServices++;
             }
         }
diff --git a/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLReaderTest.java b/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLReaderTest.java
index d9f1a10ea..28189552e 100644
--- a/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLReaderTest.java
+++ b/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLReaderTest.java
@@ -35,8 +35,8 @@
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivity;
@@ -61,7 +61,7 @@ public void shouldReadNameOfService() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
-        Service s = (Service) vrp.getJobs().get("1");
+        ServiceJob s = (ServiceJob) vrp.getJobs().get("1");
         assertTrue(s.getName().equals("cleaning"));
     }
 
@@ -70,7 +70,7 @@ public void shouldReadNameOfShipment() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
-        Shipment s = (Shipment) vrp.getJobs().get("3");
+        ShipmentJob s = (ShipmentJob) vrp.getJobs().get("3");
         assertTrue(s.getName().equals("deliver-smth"));
     }
 
@@ -194,7 +194,7 @@ public void whenReadingServices_itReadsThemCorrectly() {
         VehicleRoutingProblem vrp = builder.build();
         int servCounter = 0;
         for (Job j : vrp.getJobs().values()) {
-            if (j instanceof Service) {
+            if (j instanceof ServiceJob) {
                 servCounter++;
             }
         }
@@ -206,7 +206,7 @@ public void whenReadingService1_skill1ShouldBeAssigned() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
-        Service s = (Service) vrp.getJobs().get("1");
+        ServiceJob s = (ServiceJob) vrp.getJobs().get("1");
         assertTrue(s.getRequiredSkills().containsSkill("skill1"));
     }
 
@@ -215,7 +215,7 @@ public void whenReadingService1_skill2ShouldBeAssigned() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
-        Service s = (Service) vrp.getJobs().get("1");
+        ServiceJob s = (ServiceJob) vrp.getJobs().get("1");
         assertTrue(s.getRequiredSkills().containsSkill("skill2"));
     }
 
@@ -224,7 +224,7 @@ public void whenReadingService1_nuSkillsShouldBeCorrect() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
-        Service s = (Service) vrp.getJobs().get("1");
+        ServiceJob s = (ServiceJob) vrp.getJobs().get("1");
         assertEquals(2, s.getRequiredSkills().values().size());
     }
 
@@ -233,7 +233,7 @@ public void whenReadingService2_nuSkillsOfV2ShouldBeCorrect() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
-        Service s = (Service) vrp.getJobs().get("2");
+        ServiceJob s = (ServiceJob) vrp.getJobs().get("2");
         assertEquals(0, s.getRequiredSkills().values().size());
     }
 
@@ -244,7 +244,7 @@ public void whenReadingShipments_itReadsThemCorrectly() {
         VehicleRoutingProblem vrp = builder.build();
         int shipCounter = 0;
         for (Job j : vrp.getJobs().values()) {
-            if (j instanceof Shipment) {
+            if (j instanceof ShipmentJob) {
                 shipCounter++;
             }
         }
@@ -256,7 +256,7 @@ public void whenReadingShipment3_skill1ShouldBeAssigned() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
-        Shipment s = (Shipment) vrp.getJobs().get("3");
+        ShipmentJob s = (ShipmentJob) vrp.getJobs().get("3");
         assertTrue(s.getRequiredSkills().containsSkill("skill1"));
     }
 
@@ -265,7 +265,7 @@ public void whenReadingShipment3_skill2ShouldBeAssigned() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
-        Shipment s = (Shipment) vrp.getJobs().get("3");
+        ShipmentJob s = (ShipmentJob) vrp.getJobs().get("3");
         assertTrue(s.getRequiredSkills().containsSkill("skill2"));
     }
 
@@ -274,7 +274,7 @@ public void whenReadingShipment3_nuSkillsShouldBeCorrect() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
-        Shipment s = (Shipment) vrp.getJobs().get("3");
+        ShipmentJob s = (ShipmentJob) vrp.getJobs().get("3");
         assertEquals(2, s.getRequiredSkills().values().size());
     }
 
@@ -283,7 +283,7 @@ public void whenReadingShipment4_nuSkillsOfV2ShouldBeCorrect() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
-        Shipment s = (Shipment) vrp.getJobs().get("4");
+        ShipmentJob s = (ShipmentJob) vrp.getJobs().get("4");
         assertEquals(0, s.getRequiredSkills().values().size());
     }
 
@@ -292,7 +292,7 @@ public void whenReadingServices_capOfService1IsReadCorrectly() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
-        Service s1 = (Service) vrp.getJobs().get("1");
+        ServiceJob s1 = (ServiceJob) vrp.getJobs().get("1");
         assertEquals(1, s1.getActivity().getLoadChange().get(0));
     }
 
@@ -301,7 +301,7 @@ public void whenReadingServices_durationOfService1IsReadCorrectly() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
-        Service s1 = (Service) vrp.getJobs().get("1");
+        ServiceJob s1 = (ServiceJob) vrp.getJobs().get("1");
         assertEquals(10.0, s1.getActivity().getOperationTime(), 0.01);
     }
 
@@ -310,7 +310,7 @@ public void whenReadingServices_twOfService1IsReadCorrectly() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
-        Service s1 = (Service) vrp.getJobs().get("1");
+        ServiceJob s1 = (ServiceJob) vrp.getJobs().get("1");
         TimeWindow tw = s1.getActivity().getSingleTimeWindow();
         assertEquals(0.0, tw.getStart(), 0.01);
         assertEquals(4000.0, tw.getEnd(), 0.01);
@@ -321,7 +321,7 @@ public void whenReadingServices_typeOfService1IsReadCorrectly() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
-        Service s1 = (Service) vrp.getJobs().get("1");
+        ServiceJob s1 = (ServiceJob) vrp.getJobs().get("1");
         assertEquals("pickup", s1.getType());
     }
 
@@ -455,7 +455,7 @@ public void whenReadingJobs_capOfShipment3IsReadCorrectly() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
-        Shipment s = (Shipment) vrp.getJobs().get("3");
+        ShipmentJob s = (ShipmentJob) vrp.getJobs().get("3");
         assertEquals(-10, s.getDeliveryActivity().getLoadChange().get(0));
     }
 
@@ -464,7 +464,7 @@ public void whenReadingJobs_pickupServiceTimeOfShipment3IsReadCorrectly() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
-        Shipment s = (Shipment) vrp.getJobs().get("3");
+        ShipmentJob s = (ShipmentJob) vrp.getJobs().get("3");
         assertEquals(10.0, s.getPickupActivity().getOperationTime(), 0.01);
     }
 
@@ -473,7 +473,7 @@ public void whenReadingJobs_pickupTimeWindowOfShipment3IsReadCorrectly() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
-        Shipment s = (Shipment) vrp.getJobs().get("3");
+        ShipmentJob s = (ShipmentJob) vrp.getJobs().get("3");
         TimeWindow tw = s.getPickupActivity().getSingleTimeWindow();
         assertEquals(1000.0, tw.getStart(), 0.01);
         assertEquals(4000.0, tw.getEnd(), 0.01);
@@ -484,7 +484,7 @@ public void whenReadingJobs_deliveryTimeWindowOfShipment3IsReadCorrectly() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
-        Shipment s = (Shipment) vrp.getJobs().get("3");
+        ShipmentJob s = (ShipmentJob) vrp.getJobs().get("3");
         TimeWindow tw = s.getDeliveryActivity().getSingleTimeWindow();
         assertEquals(6000.0, tw.getStart(), 0.01);
         assertEquals(10000.0, tw.getEnd(), 0.01);
@@ -495,7 +495,7 @@ public void whenReadingJobs_deliveryServiceTimeOfShipment3IsReadCorrectly() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
-        Shipment s = (Shipment) vrp.getJobs().get("3");
+        ShipmentJob s = (ShipmentJob) vrp.getJobs().get("3");
         assertEquals(100.0, s.getDeliveryActivity().getOperationTime(), 0.01);
     }
 
@@ -504,7 +504,7 @@ public void whenReadingJobs_deliveryCoordShipment3IsReadCorrectly() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
-        Shipment s = (Shipment) vrp.getJobs().get("3");
+        ShipmentJob s = (ShipmentJob) vrp.getJobs().get("3");
         Location deliveryLocation = s.getDeliveryActivity().getLocation();
         assertEquals(10.0, deliveryLocation.getCoordinate().getX(), 0.01);
         assertEquals(0.0, deliveryLocation.getCoordinate().getY(), 0.01);
@@ -515,7 +515,7 @@ public void whenReadingJobs_pickupCoordShipment3IsReadCorrectly() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
-        Shipment s = (Shipment) vrp.getJobs().get("3");
+        ShipmentJob s = (ShipmentJob) vrp.getJobs().get("3");
         Location pickupLocation = s.getPickupActivity().getLocation();
         assertEquals(10.0, pickupLocation.getCoordinate().getX(), 0.01);
         assertEquals(10.0, pickupLocation.getCoordinate().getY(), 0.01);
@@ -526,7 +526,7 @@ public void whenReadingJobs_deliveryIdShipment3IsReadCorrectly() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
-        Shipment s = (Shipment) vrp.getJobs().get("3");
+        ShipmentJob s = (ShipmentJob) vrp.getJobs().get("3");
         assertEquals("i(9,9)", s.getDeliveryActivity().getLocation().getId());
     }
 
@@ -535,7 +535,7 @@ public void whenReadingJobs_pickupIdShipment3IsReadCorrectly() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
-        Shipment s = (Shipment) vrp.getJobs().get("3");
+        ShipmentJob s = (ShipmentJob) vrp.getJobs().get("3");
         assertEquals("i(3,9)", s.getPickupActivity().getLocation().getId());
     }
 
@@ -544,7 +544,7 @@ public void whenReadingJobs_pickupLocationIdShipment4IsReadCorrectly() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
-        Shipment s = (Shipment) vrp.getJobs().get("4");
+        ShipmentJob s = (ShipmentJob) vrp.getJobs().get("4");
         assertEquals("[x=10.0][y=10.0]", s.getPickupActivity().getLocation().getId());
     }
 
@@ -553,7 +553,7 @@ public void whenReadingJobs_deliveryLocationIdShipment4IsReadCorrectly() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
-        Shipment s = (Shipment) vrp.getJobs().get("4");
+        ShipmentJob s = (ShipmentJob) vrp.getJobs().get("4");
         assertEquals("[x=10.0][y=0.0]", s.getDeliveryActivity().getLocation().getId());
     }
 
@@ -562,7 +562,7 @@ public void whenReadingJobs_pickupServiceTimeOfShipment4IsReadCorrectly() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
-        Shipment s = (Shipment) vrp.getJobs().get("4");
+        ShipmentJob s = (ShipmentJob) vrp.getJobs().get("4");
         assertEquals(0.0, s.getPickupActivity().getOperationTime(), 0.01);
     }
 
@@ -571,7 +571,7 @@ public void whenReadingJobs_deliveryServiceTimeOfShipment4IsReadCorrectly() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
-        Shipment s = (Shipment) vrp.getJobs().get("4");
+        ShipmentJob s = (ShipmentJob) vrp.getJobs().get("4");
         assertEquals(100.0, s.getDeliveryActivity().getOperationTime(), 0.01);
     }
 
diff --git a/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLWriterTest.java b/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLWriterTest.java
index 7fa42fab2..9d2d59cc5 100644
--- a/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLWriterTest.java
+++ b/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLWriterTest.java
@@ -32,8 +32,8 @@
 import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.AbstractSingleActivityJob;
-import com.graphhopper.jsprit.core.problem.job.Service;
-import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.job.ServiceJob;
+import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
@@ -108,8 +108,8 @@ public void whenWritingServices_itWritesThemCorrectly() {
         builder.addVehicle(v2);
 
 
-        Service s1 = new Service.Builder("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
-        Service s2 = new Service.Builder("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
+        ServiceJob s1 = new ServiceJob.Builder("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
+        ServiceJob s2 = new ServiceJob.Builder("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
 
         VehicleRoutingProblem vrp = builder.addJob(s1).addJob(s2).build();
         new VrpXMLWriter(vrp, null).write(infileName);
@@ -119,7 +119,7 @@ public void whenWritingServices_itWritesThemCorrectly() {
         VehicleRoutingProblem readVrp = vrpToReadBuilder.build();
         assertEquals(2, readVrp.getJobs().size());
 
-        Service s1_read = (Service) vrp.getJobs().get("1");
+        ServiceJob s1_read = (ServiceJob) vrp.getJobs().get("1");
         assertEquals("1", s1_read.getId());
         assertEquals("loc", s1_read.getActivity().getLocation().getId());
         assertEquals("pickup", s1_read.getType());
@@ -129,7 +129,7 @@ public void whenWritingServices_itWritesThemCorrectly() {
     @Test
     public void shouldWriteNameOfService() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
-        Service s1 = new Service.Builder("1").setName("cleaning").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
+        ServiceJob s1 = new ServiceJob.Builder("1").setName("cleaning").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
 
         VehicleRoutingProblem vrp = builder.addJob(s1).build();
         new VrpXMLWriter(vrp, null).write(infileName);
@@ -145,7 +145,7 @@ public void shouldWriteNameOfService() {
     public void shouldWriteNameOfShipment() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         Location pickLocation = Location.Builder.newInstance().setId("pick").setIndex(1).build();
-        Shipment s1 = Shipment.Builder.newInstance("1").setName("cleaning")
+        ShipmentJob s1 = new ShipmentJob.Builder("1").setName("cleaning")
                 .setPickupLocation(pickLocation)
                 .setDeliveryLocation(TestUtils.loc("del")).build();
 
@@ -155,7 +155,7 @@ public void shouldWriteNameOfShipment() {
         VehicleRoutingProblem.Builder vrpToReadBuilder = VehicleRoutingProblem.Builder.newInstance();
         new VrpXMLReader(vrpToReadBuilder, null).read(infileName);
         VehicleRoutingProblem readVrp = vrpToReadBuilder.build();
-        Shipment s1_read = (Shipment) readVrp.getJobs().get("1");
+        ShipmentJob s1_read = (ShipmentJob) readVrp.getJobs().get("1");
         assertTrue(s1_read.getName().equals("cleaning"));
         assertEquals(1, s1_read.getPickupActivity().getLocation().getIndex());
     }
@@ -164,11 +164,11 @@ public void shouldWriteNameOfShipment() {
     public void whenWritingServicesWithSeveralCapacityDimensions_itWritesThemCorrectly() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
 
-        Service s1 = new Service.Builder("1")
+        ServiceJob s1 = new ServiceJob.Builder("1")
                 .addSizeDimension(0, 20)
                 .addSizeDimension(1, 200)
                 .setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
-        Service s2 = new Service.Builder("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
+        ServiceJob s2 = new ServiceJob.Builder("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
 
         VehicleRoutingProblem vrp = builder.addJob(s1).addJob(s2).build();
         new VrpXMLWriter(vrp, null).write(infileName);
@@ -178,7 +178,7 @@ public void whenWritingServicesWithSeveralCapacityDimensions_itWritesThemCorrect
         VehicleRoutingProblem readVrp = vrpToReadBuilder.build();
         assertEquals(2, readVrp.getJobs().size());
 
-        Service s1_read = (Service) vrp.getJobs().get("1");
+        ServiceJob s1_read = (ServiceJob) vrp.getJobs().get("1");
 
         SizeDimension size = s1_read.getActivity().getLoadChange();
         assertEquals(2, size.getNuOfDimensions());
@@ -199,11 +199,11 @@ public void whenWritingShipments_readingThemAgainMustReturnTheWrittenLocationIds
         builder.addVehicle(v1);
         builder.addVehicle(v2);
 
-        Shipment s1 = Shipment.Builder.newInstance("1").addSizeDimension(0, 10)
+        ShipmentJob s1 = new ShipmentJob.Builder("1").addSizeDimension(0, 10)
                 .setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build())
                 .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupTimeWindow(TimeWindow.newInstance(1, 2))
                 .setDeliveryTimeWindow(TimeWindow.newInstance(3, 4)).build();
-        Shipment s2 = Shipment.Builder.newInstance("2").addSizeDimension(0, 20)
+        ShipmentJob s2 = new ShipmentJob.Builder("2").addSizeDimension(0, 20)
                 .setPickupLocation(Location.Builder.newInstance().setId("pickLocation").build())
                 .setDeliveryLocation(TestUtils.loc("delLocation")).setPickupTimeWindow(TimeWindow.newInstance(5, 6))
                 .setDeliveryTimeWindow(TimeWindow.newInstance(7, 8)).build();
@@ -217,8 +217,8 @@ public void whenWritingShipments_readingThemAgainMustReturnTheWrittenLocationIds
         VehicleRoutingProblem readVrp = vrpToReadBuilder.build();
         assertEquals(2, readVrp.getJobs().size());
 
-        assertEquals("pickLoc", ((Shipment) readVrp.getJobs().get("1")).getPickupActivity().getLocation().getId());
-        assertEquals("delLoc", ((Shipment) readVrp.getJobs().get("1")).getDeliveryActivity().getLocation().getId());
+        assertEquals("pickLoc", ((ShipmentJob) readVrp.getJobs().get("1")).getPickupActivity().getLocation().getId());
+        assertEquals("delLoc", ((ShipmentJob) readVrp.getJobs().get("1")).getDeliveryActivity().getLocation().getId());
     }
 
     @Test
@@ -233,11 +233,11 @@ public void whenWritingShipments_readingThemAgainMustReturnTheWrittenPickupTimeW
         builder.addVehicle(v1);
         builder.addVehicle(v2);
 
-        Shipment s1 = Shipment.Builder.newInstance("1").addSizeDimension(0, 10)
+        ShipmentJob s1 = new ShipmentJob.Builder("1").addSizeDimension(0, 10)
                 .setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build())
                 .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupTimeWindow(TimeWindow.newInstance(1, 2))
                 .setDeliveryTimeWindow(TimeWindow.newInstance(3, 4)).build();
-        Shipment s2 = Shipment.Builder.newInstance("2").addSizeDimension(0, 20)
+        ShipmentJob s2 = new ShipmentJob.Builder("2").addSizeDimension(0, 20)
                 .setPickupLocation(Location.Builder.newInstance().setId("pickLocation").build())
                 .setDeliveryLocation(TestUtils.loc("delLocation")).setPickupTimeWindow(TimeWindow.newInstance(5, 6))
                 .setDeliveryTimeWindow(TimeWindow.newInstance(7, 8)).build();
@@ -251,7 +251,7 @@ public void whenWritingShipments_readingThemAgainMustReturnTheWrittenPickupTimeW
         VehicleRoutingProblem readVrp = vrpToReadBuilder.build();
         assertEquals(2, readVrp.getJobs().size());
 
-        TimeWindow tw = ((Shipment) readVrp.getJobs().get("1")).getPickupActivity().getSingleTimeWindow();
+        TimeWindow tw = ((ShipmentJob) readVrp.getJobs().get("1")).getPickupActivity().getSingleTimeWindow();
         assertEquals(1.0, tw.getStart(), 0.01);
         assertEquals(2.0, tw.getEnd(), 0.01);
     }
@@ -268,11 +268,11 @@ public void whenWritingShipments_readingThemAgainMustReturnTheWrittenDeliveryTim
         builder.addVehicle(v1);
         builder.addVehicle(v2);
 
-        Shipment s1 = Shipment.Builder.newInstance("1").addSizeDimension(0, 10)
+        ShipmentJob s1 = new ShipmentJob.Builder("1").addSizeDimension(0, 10)
                 .setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build())
                 .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupTimeWindow(TimeWindow.newInstance(1, 2))
                 .setDeliveryTimeWindow(TimeWindow.newInstance(3, 4)).build();
-        Shipment s2 = Shipment.Builder.newInstance("2").addSizeDimension(0, 20)
+        ShipmentJob s2 = new ShipmentJob.Builder("2").addSizeDimension(0, 20)
                 .setPickupLocation(Location.Builder.newInstance().setId("pickLocation").build())
                 .setDeliveryLocation(TestUtils.loc("delLocation")).setPickupTimeWindow(TimeWindow.newInstance(5, 6))
                 .setDeliveryTimeWindow(TimeWindow.newInstance(7, 8)).build();
@@ -286,7 +286,7 @@ public void whenWritingShipments_readingThemAgainMustReturnTheWrittenDeliveryTim
         VehicleRoutingProblem readVrp = vrpToReadBuilder.build();
         assertEquals(2, readVrp.getJobs().size());
 
-        TimeWindow tw = ((Shipment) readVrp.getJobs().get("1")).getDeliveryActivity().getSingleTimeWindow();
+        TimeWindow tw = ((ShipmentJob) readVrp.getJobs().get("1")).getDeliveryActivity().getSingleTimeWindow();
         assertEquals(3.0, tw.getStart(), 0.01);
         assertEquals(4.0, tw.getEnd(), 0.01);
     }
@@ -303,11 +303,11 @@ public void whenWritingShipments_readingThemAgainMustReturnTheWrittenDeliverySer
         builder.addVehicle(v1);
         builder.addVehicle(v2);
 
-        Shipment s1 = Shipment.Builder.newInstance("1").addSizeDimension(0, 10)
+        ShipmentJob s1 = new ShipmentJob.Builder("1").addSizeDimension(0, 10)
                 .setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build())
                 .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupTimeWindow(TimeWindow.newInstance(1, 2))
                 .setDeliveryTimeWindow(TimeWindow.newInstance(3, 4)).setPickupServiceTime(100).setDeliveryServiceTime(50).build();
-        Shipment s2 = Shipment.Builder.newInstance("2").addSizeDimension(0, 20)
+        ShipmentJob s2 = new ShipmentJob.Builder("2").addSizeDimension(0, 20)
                 .setPickupLocation(Location.Builder.newInstance().setId("pickLocation").build())
                 .setDeliveryLocation(TestUtils.loc("delLocation")).setPickupTimeWindow(TimeWindow.newInstance(5, 6))
                 .setDeliveryTimeWindow(TimeWindow.newInstance(7, 8)).build();
@@ -321,8 +321,8 @@ public void whenWritingShipments_readingThemAgainMustReturnTheWrittenDeliverySer
         VehicleRoutingProblem readVrp = vrpToReadBuilder.build();
         assertEquals(2, readVrp.getJobs().size());
 
-        assertEquals(100.0, ((Shipment) readVrp.getJobs().get("1")).getPickupActivity().getOperationTime(), 0.01);
-        assertEquals(50.0, ((Shipment) readVrp.getJobs().get("1")).getDeliveryActivity().getOperationTime(), 0.01);
+        assertEquals(100.0, ((ShipmentJob) readVrp.getJobs().get("1")).getPickupActivity().getOperationTime(), 0.01);
+        assertEquals(50.0, ((ShipmentJob) readVrp.getJobs().get("1")).getDeliveryActivity().getOperationTime(), 0.01);
 
     }
 
@@ -338,11 +338,11 @@ public void whenWritingShipments_readingThemAgainMustReturnTheWrittenLocationIdO
         builder.addVehicle(v1);
         builder.addVehicle(v2);
 
-        Shipment s1 = Shipment.Builder.newInstance("1").addSizeDimension(0, 10)
+        ShipmentJob s1 = new ShipmentJob.Builder("1").addSizeDimension(0, 10)
                 .setPickupLocation(TestUtils.loc(Coordinate.newInstance(1, 2))).setDeliveryLocation(TestUtils.loc("delLoc"))
                 .setPickupTimeWindow(TimeWindow.newInstance(1, 2))
                 .setDeliveryTimeWindow(TimeWindow.newInstance(3, 4)).setPickupServiceTime(100).setDeliveryServiceTime(50).build();
-        Shipment s2 = Shipment.Builder.newInstance("2").addSizeDimension(0, 20)
+        ShipmentJob s2 = new ShipmentJob.Builder("2").addSizeDimension(0, 20)
                 .setPickupLocation(Location.Builder.newInstance().setId("pickLocation").build())
                 .setDeliveryLocation(TestUtils.loc("delLocation")).setPickupTimeWindow(TimeWindow.newInstance(5, 6))
                 .setDeliveryTimeWindow(TimeWindow.newInstance(7, 8)).build();
@@ -356,7 +356,7 @@ public void whenWritingShipments_readingThemAgainMustReturnTheWrittenLocationIdO
         VehicleRoutingProblem readVrp = vrpToReadBuilder.build();
         assertEquals(2, readVrp.getJobs().size());
 
-        assertEquals("[x=1.0][y=2.0]", ((Shipment) readVrp.getJobs().get("1")).getPickupActivity().getLocation().getId());
+        assertEquals("[x=1.0][y=2.0]", ((ShipmentJob) readVrp.getJobs().get("1")).getPickupActivity().getLocation().getId());
     }
 
     @Test
@@ -466,7 +466,7 @@ private Vehicle getVehicle(String v1, VehicleRoutingProblem readVrp) {
     public void whenWritingShipments_shipmentShouldHaveCorrectNuSkills() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
 
-        Shipment s = Shipment.Builder.newInstance("1").addRequiredSkill("skill1").addRequiredSkill("skill2").addRequiredSkill("skill3")
+        ShipmentJob s = new ShipmentJob.Builder("1").addRequiredSkill("skill1").addRequiredSkill("skill2").addRequiredSkill("skill3")
                 .addSizeDimension(0, 10)
                 .setPickupLocation(TestUtils.loc(Coordinate.newInstance(1, 2)))
                 .setDeliveryLocation(TestUtils.loc("delLoc", Coordinate.newInstance(5, 6)))
@@ -487,7 +487,7 @@ public void whenWritingShipments_shipmentShouldHaveCorrectNuSkills() {
     public void whenWritingShipments_shipmentShouldContain_skill1() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
 
-        Shipment s = Shipment.Builder.newInstance("1").addRequiredSkill("skill1").addRequiredSkill("skill2").addRequiredSkill("skill3")
+        ShipmentJob s = new ShipmentJob.Builder("1").addRequiredSkill("skill1").addRequiredSkill("skill2").addRequiredSkill("skill3")
                 .addSizeDimension(0, 10)
                 .setPickupLocation(TestUtils.loc(Coordinate.newInstance(1, 2)))
                 .setDeliveryLocation(TestUtils.loc("delLoc", Coordinate.newInstance(5, 6)))
@@ -508,7 +508,7 @@ public void whenWritingShipments_shipmentShouldContain_skill1() {
     public void whenWritingShipments_shipmentShouldContain_skill2() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
 
-        Shipment s = Shipment.Builder.newInstance("1").addRequiredSkill("skill1").addRequiredSkill("Skill2").addRequiredSkill("skill3")
+        ShipmentJob s = new ShipmentJob.Builder("1").addRequiredSkill("skill1").addRequiredSkill("Skill2").addRequiredSkill("skill3")
                 .addSizeDimension(0, 10)
                 .setPickupLocation(TestUtils.loc(Coordinate.newInstance(1, 2)))
                 .setDeliveryLocation(TestUtils.loc("delLoc", Coordinate.newInstance(5, 6)))
@@ -529,7 +529,7 @@ public void whenWritingShipments_shipmentShouldContain_skill2() {
     public void whenWritingShipments_shipmentShouldContain_skill3() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
 
-        Shipment s = Shipment.Builder.newInstance("1").addRequiredSkill("skill1").addRequiredSkill("Skill2").addRequiredSkill("skill3")
+        ShipmentJob s = new ShipmentJob.Builder("1").addRequiredSkill("skill1").addRequiredSkill("Skill2").addRequiredSkill("skill3")
                 .addSizeDimension(0, 10)
                 .setPickupLocation(TestUtils.loc(Coordinate.newInstance(1, 2)))
                 .setDeliveryLocation(TestUtils.loc("delLoc", Coordinate.newInstance(5, 6)))
@@ -558,11 +558,11 @@ public void whenWritingShipments_readingThemAgainMustReturnTheWrittenLocationCoo
         builder.addVehicle(v1);
         builder.addVehicle(v2);
 
-        Shipment s1 = Shipment.Builder.newInstance("1").addSizeDimension(0, 10).setPickupLocation(TestUtils.loc(Coordinate.newInstance(1, 2)))
+        ShipmentJob s1 = new ShipmentJob.Builder("1").addSizeDimension(0, 10).setPickupLocation(TestUtils.loc(Coordinate.newInstance(1, 2)))
                 .setDeliveryLocation(TestUtils.loc("delLoc", Coordinate.newInstance(5, 6)))
                 .setPickupTimeWindow(TimeWindow.newInstance(1, 2))
                 .setDeliveryTimeWindow(TimeWindow.newInstance(3, 4)).setPickupServiceTime(100).setDeliveryServiceTime(50).build();
-        Shipment s2 = Shipment.Builder.newInstance("2").addSizeDimension(0, 20)
+        ShipmentJob s2 = new ShipmentJob.Builder("2").addSizeDimension(0, 20)
                 .setPickupLocation(Location.Builder.newInstance().setId("pickLocation").build())
                 .setDeliveryLocation(TestUtils.loc("delLocation"))
                 .setPickupTimeWindow(TimeWindow.newInstance(5, 6))
@@ -577,18 +577,18 @@ public void whenWritingShipments_readingThemAgainMustReturnTheWrittenLocationCoo
         VehicleRoutingProblem readVrp = vrpToReadBuilder.build();
         assertEquals(2, readVrp.getJobs().size());
 
-        assertEquals(1.0, ((Shipment) readVrp.getJobs().get("1")).getPickupActivity().getLocation().getCoordinate().getX(), 0.01);
-        assertEquals(2.0, ((Shipment) readVrp.getJobs().get("1")).getPickupActivity().getLocation().getCoordinate().getY(), 0.01);
+        assertEquals(1.0, ((ShipmentJob) readVrp.getJobs().get("1")).getPickupActivity().getLocation().getCoordinate().getX(), 0.01);
+        assertEquals(2.0, ((ShipmentJob) readVrp.getJobs().get("1")).getPickupActivity().getLocation().getCoordinate().getY(), 0.01);
 
-        assertEquals(5.0, ((Shipment) readVrp.getJobs().get("1")).getDeliveryActivity().getLocation().getCoordinate().getX(), 0.01);
-        assertEquals(6.0, ((Shipment) readVrp.getJobs().get("1")).getDeliveryActivity().getLocation().getCoordinate().getY(), 0.01);
+        assertEquals(5.0, ((ShipmentJob) readVrp.getJobs().get("1")).getDeliveryActivity().getLocation().getCoordinate().getX(), 0.01);
+        assertEquals(6.0, ((ShipmentJob) readVrp.getJobs().get("1")).getDeliveryActivity().getLocation().getCoordinate().getY(), 0.01);
     }
 
     @Test
     public void whenWritingShipmentWithSeveralCapacityDimension_itShouldWriteAndReadItCorrectly() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
 
-        Shipment s1 = Shipment.Builder.newInstance("1")
+        ShipmentJob s1 = new ShipmentJob.Builder("1")
                 .setPickupLocation(TestUtils.loc(Coordinate.newInstance(1, 2)))
                 .setDeliveryLocation(TestUtils.loc("delLoc", Coordinate.newInstance(5, 6)))
                 .setPickupTimeWindow(TimeWindow.newInstance(1, 2))
@@ -597,7 +597,7 @@ public void whenWritingShipmentWithSeveralCapacityDimension_itShouldWriteAndRead
                 .addSizeDimension(2, 100)
                 .build();
 
-        Shipment s2 = Shipment.Builder.newInstance("2").addSizeDimension(0, 20)
+        ShipmentJob s2 = new ShipmentJob.Builder("2").addSizeDimension(0, 20)
                 .setPickupLocation(Location.Builder.newInstance().setId("pickLocation").build())
                 .setDeliveryLocation(TestUtils.loc("delLocation")).setPickupTimeWindow(TimeWindow.newInstance(5, 6))
                 .setDeliveryTimeWindow(TimeWindow.newInstance(7, 8)).build();
@@ -630,8 +630,8 @@ public void whenWritingVehicleV1_itsStartLocationMustBeWrittenCorrectly() {
         builder.addVehicle(v1);
         builder.addVehicle(v2);
 
-        Service s1 = new Service.Builder("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
-        Service s2 = new Service.Builder("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
+        ServiceJob s1 = new ServiceJob.Builder("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
+        ServiceJob s2 = new ServiceJob.Builder("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
 
         VehicleRoutingProblem vrp = builder.addJob(s1).addJob(s2).build();
         new VrpXMLWriter(vrp, null).write(infileName);
@@ -650,7 +650,7 @@ public void whenWritingVehicleV1_itsStartLocationMustBeWrittenCorrectly() {
     public void whenWritingService_itShouldHaveTheCorrectNuSkills() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
 
-        Service s = new Service.Builder("1").addRequiredSkill("sKill1").addRequiredSkill("skill2").addSizeDimension(0, 1)
+        ServiceJob s = new ServiceJob.Builder("1").addRequiredSkill("sKill1").addRequiredSkill("skill2").addSizeDimension(0, 1)
                 .setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
 
         VehicleRoutingProblem vrp = builder.addJob(s).build();
@@ -667,7 +667,7 @@ public void whenWritingService_itShouldHaveTheCorrectNuSkills() {
     public void whenWritingService_itShouldContain_skill1() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
 
-        Service s = new Service.Builder("1").addRequiredSkill("sKill1").addRequiredSkill("skill2").addSizeDimension(0, 1)
+        ServiceJob s = new ServiceJob.Builder("1").addRequiredSkill("sKill1").addRequiredSkill("skill2").addSizeDimension(0, 1)
                 .setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
 
         VehicleRoutingProblem vrp = builder.addJob(s).build();
@@ -684,7 +684,7 @@ public void whenWritingService_itShouldContain_skill1() {
     public void whenWritingService_itShouldContain_skill2() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
 
-        Service s = new Service.Builder("1").addRequiredSkill("sKill1").addRequiredSkill("skill2").addSizeDimension(0, 1)
+        ServiceJob s = new ServiceJob.Builder("1").addRequiredSkill("sKill1").addRequiredSkill("skill2").addSizeDimension(0, 1)
                 .setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
 
         VehicleRoutingProblem vrp = builder.addJob(s).build();
@@ -710,8 +710,8 @@ public void whenWritingVehicleV1_itDoesNotReturnToDepotMustBeWrittenCorrectly()
         builder.addVehicle(v1);
         builder.addVehicle(v2);
 
-        Service s1 = new Service.Builder("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
-        Service s2 = new Service.Builder("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
+        ServiceJob s1 = new ServiceJob.Builder("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
+        ServiceJob s2 = new ServiceJob.Builder("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
 
         VehicleRoutingProblem vrp = builder.addJob(s1).addJob(s2).build();
         new VrpXMLWriter(vrp, null).write(infileName);
@@ -736,8 +736,8 @@ public void whenWritingVehicleV1_readingAgainAssignsCorrectType() {
         builder.addVehicle(v1);
         builder.addVehicle(v2);
 
-        Service s1 = new Service.Builder("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
-        Service s2 = new Service.Builder("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
+        ServiceJob s1 = new ServiceJob.Builder("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
+        ServiceJob s2 = new ServiceJob.Builder("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
 
         VehicleRoutingProblem vrp = builder.addJob(s1).addJob(s2).build();
         new VrpXMLWriter(vrp, null).write(infileName);
@@ -762,8 +762,8 @@ public void whenWritingVehicleV2_readingAgainAssignsCorrectType() {
         builder.addVehicle(v1);
         builder.addVehicle(v2);
 
-        Service s1 = new Service.Builder("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
-        Service s2 = new Service.Builder("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
+        ServiceJob s1 = new ServiceJob.Builder("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
+        ServiceJob s2 = new ServiceJob.Builder("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
 
         VehicleRoutingProblem vrp = builder.addJob(s1).addJob(s2).build();
         new VrpXMLWriter(vrp, null).write(infileName);
@@ -792,8 +792,8 @@ public void whenWritingVehicleV2_readingItsLocationsAgainReturnsCorrectLocations
         builder.addVehicle(v1);
         builder.addVehicle(v2);
 
-        Service s1 = new Service.Builder("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
-        Service s2 = new Service.Builder("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
+        ServiceJob s1 = new ServiceJob.Builder("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
+        ServiceJob s2 = new ServiceJob.Builder("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
 
         VehicleRoutingProblem vrp = builder.addJob(s1).addJob(s2).build();
         new VrpXMLWriter(vrp, null).write(infileName);
@@ -822,8 +822,8 @@ public void whenWritingVehicleV2_readingItsLocationsCoordsAgainReturnsCorrectLoc
         builder.addVehicle(v1);
         builder.addVehicle(v2);
 
-        Service s1 = new Service.Builder("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
-        Service s2 = new Service.Builder("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
+        ServiceJob s1 = new ServiceJob.Builder("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
+        ServiceJob s2 = new ServiceJob.Builder("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
 
         VehicleRoutingProblem vrp = builder.addJob(s1).addJob(s2).build();
         new VrpXMLWriter(vrp, null).write(infileName);
@@ -914,8 +914,8 @@ public void solutionWithoutUnassignedJobsShouldBeWrittenCorrectly() {
         VehicleImpl v1 = VehicleImpl.Builder.newInstance("v1").setStartLocation(TestUtils.loc("loc")).setType(type1).build();
         builder.addVehicle(v1);
 
-        Service s1 = new Service.Builder("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
-        Service s2 = new Service.Builder("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
+        ServiceJob s1 = new ServiceJob.Builder("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
+        ServiceJob s2 = new ServiceJob.Builder("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
 
         VehicleRoutingProblem vrp = builder.addJob(s1).addJob(s2).build();
 
@@ -945,8 +945,8 @@ public void solutionWithUnassignedJobsShouldBeWrittenCorrectly() {
         VehicleImpl v1 = VehicleImpl.Builder.newInstance("v1").setStartLocation(TestUtils.loc("loc")).setType(type1).build();
         builder.addVehicle(v1);
 
-        Service s1 = new Service.Builder("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
-        Service s2 = new Service.Builder("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
+        ServiceJob s1 = new ServiceJob.Builder("1").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc")).setServiceTime(2.0).build();
+        ServiceJob s2 = new ServiceJob.Builder("2").addSizeDimension(0, 1).setLocation(TestUtils.loc("loc2")).setServiceTime(4.0).build();
 
         VehicleRoutingProblem vrp = builder.addJob(s1).addJob(s2).build();
 
diff --git a/pom.xml b/pom.xml
index 5a4e63b37..bb83e762a 100644
--- a/pom.xml
+++ b/pom.xml
@@ -78,6 +78,7 @@
         <logger.version>1.7.21</logger.version>
         <maven.javadoc.failOnError>false</maven.javadoc.failOnError>
         <maven.version>3.3.0</maven.version>
+        <ptt.version>[2,3)</ptt.version>
     </properties>
 
     <build>
@@ -176,6 +177,8 @@
             <version>${mockito.version}</version>
             <scope>test</scope>
         </dependency>
+        
+        
 
     </dependencies>
 
