diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractListBackedJobActivityList.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractListBackedJobActivityList.java
index 7ac762d5e..fb750c812 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractListBackedJobActivityList.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractListBackedJobActivityList.java
@@ -34,7 +34,7 @@ public void addActivity(JobActivity activity) {
         validateActivity(activity);
         if (!_activities.contains(activity)) {
             _activities.add(activity);
-            activity.setOrderNumber(_activities.size());
+            activity.impl_setOrderNumber(_activities.size());
         }
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/AbstractActivity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/AbstractActivity.java
index ca033c43d..c2281176a 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/AbstractActivity.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/AbstractActivity.java
@@ -6,8 +6,26 @@
 
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.SizeDimension;
+import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
 
+/**
+ * Abstract base class for all activities.
+ *
+ * <p>
+ * Activities are the atomic building blocks of a problem. Each activity has its
+ * type, location, duration (operation time), cargo change.
+ * </p>
+ * <p>
+ * There are internal activities, ones only the algorithm could create. These
+ * activities are marked by the {@linkplain InternalActivityMarker} marker
+ * interface. Activities may belong to a {@linkplain Job}, these activities are
+ * the descendants of the {@linkplain JobActivity} base class.
+ * </p>
+ *
+ * @author Balage
+ *
+ */
 public abstract class AbstractActivity implements TourActivity {
 
     private int index;
@@ -19,7 +37,16 @@
     protected String type;
     protected Location location;
 
-
+    /**
+     * Constructor.
+     *
+     * @param type
+     *            The type of the activity.
+     * @param location
+     *            The location of the activity.
+     * @param loadChange
+     *            The cargo change of the activity.
+     */
     public AbstractActivity(String type, Location location, SizeDimension loadChange) {
         super();
         this.loadChange = loadChange;
@@ -28,6 +55,15 @@ public AbstractActivity(String type, Location location, SizeDimension loadChange
     }
 
 
+    /**
+     * Copy constructor.
+     * <p>
+     * This makes a <b>shallow</b> copy of the <code>sourceActivity</code>.
+     * </p>
+     *
+     * @param sourceActivity
+     *            The activity to copy.
+     */
     public AbstractActivity(AbstractActivity sourceActivity) {
         arrTime = sourceActivity.getArrTime();
         endTime = sourceActivity.getEndTime();
@@ -111,9 +147,9 @@ public Location getLocation() {
     @Override
     public String toString() {
         return "[name=" + getName() + "][locationId=" + getLocation().getId()
-                        + "][size=" + getLoadChange().toString()
-                        + "][twStart=" + Activities.round(getTheoreticalEarliestOperationStartTime())
-                        + "][twEnd=" + Activities.round(getTheoreticalLatestOperationStartTime()) + "]";
+                + "][size=" + getLoadChange().toString()
+                + "][twStart=" + Activities.round(getTheoreticalEarliestOperationStartTime())
+                + "][twEnd=" + Activities.round(getTheoreticalLatestOperationStartTime()) + "]";
     }
 
 
@@ -125,17 +161,18 @@ public TourActivity duplicate() {
             Constructor<? extends AbstractActivity> constructor = getClass().getConstructor(getClass());
             return constructor.newInstance(this);
         } catch (NoSuchMethodException | SecurityException | InstantiationException | IllegalAccessException | IllegalArgumentException
-                        | InvocationTargetException e) {
+                | InvocationTargetException e) {
             System.out.println(this.getClass().getCanonicalName() + " : " + this);
             throw new IllegalStateException(e);
         }
     }
 
     // Temporal solution unto eliminated dependency on job type
+    // TODO: remove
     @Deprecated
     public static boolean isShipment(TourActivity activity) {
         return (activity instanceof JobActivity)
-                        && (((JobActivity) activity).getJob() instanceof ShipmentJob);
+                && (((JobActivity) activity).getJob() instanceof ShipmentJob);
     }
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivity.java
index 6111c95b0..2e473b7a1 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivity.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivity.java
@@ -25,24 +25,44 @@
 import com.graphhopper.jsprit.core.problem.job.Break;
 import com.graphhopper.jsprit.core.problem.job.Break.Builder;
 
+/**
+ * An {@linkplain InternalJobActivity} marking the break time of the vehicle.
+ *
+ * @author Balage
+ *
+ */
 public class BreakActivity extends InternalJobActivity {
 
+    /**
+     * Creates a new Break activity instance.
+     *
+     * @param aBreak
+     *            The {@linkplain Break} job instance to associate the activity
+     *            with.
+     * @param builder
+     *            The Break job builder.
+     * @return The new break instance.
+     */
     public static BreakActivity newInstance(Break aBreak, Builder builder) {
         return new BreakActivity(aBreak, "break", builder.getLocation(), builder.getServiceTime(),
-                        builder.getCapacity(), builder.getTimeWindows().getTimeWindows());
+                builder.getCapacity(), builder.getTimeWindows().getTimeWindows());
     }
 
-    // protected BreakActivity(Break aBreak) {
-    // super(aBreak, "Break", aBreak.getLocation(), aBreak.getServiceDuration(),
-    // SizeDimension.createNullCapacity(aBreak.getSize()), aBreak.getTimeWindows());
-    // }
-
+    /**
+     * Copy constructor.
+     * <p>
+     * Makes a shallow copy.
+     * </p>
+     *
+     * @param breakActivity
+     *            The activity to copy.
+     */
     public BreakActivity(BreakActivity breakActivity) {
         super(breakActivity);
     }
 
     private BreakActivity(AbstractJob job, String name, Location location, double operationTime,
-                    SizeDimension capacity, Collection<TimeWindow> timeWindows) {
+            SizeDimension capacity, Collection<TimeWindow> timeWindows) {
         super(job, name, location, operationTime, capacity, timeWindows);
     }
 
@@ -67,31 +87,35 @@ public int hashCode() {
      */
     @Override
     public boolean equals(Object obj) {
-        if (this == obj) {
+        if (this == obj)
             return true;
-        }
-        if (obj == null) {
+        if (obj == null)
             return false;
-        }
-        if (getClass() != obj.getClass()) {
+        if (getClass() != obj.getClass())
             return false;
-        }
         BreakActivity other = (BreakActivity) obj;
         if (getJob() == null) {
-            if (other.getJob() != null) {
+            if (other.getJob() != null)
                 return false;
-            }
-        } else if (!getJob().equals(other.getJob())) {
+        } else if (!getJob().equals(other.getJob()))
             return false;
-        }
         return true;
     }
 
 
+    /**
+     * Sets the location of the break.
+     *
+     * @param location
+     *            The location.
+     */
     public void setLocation(Location breakLocation) {
         location = breakLocation;
     }
 
+    /**
+     * @return The time window of the break.
+     */
     public TimeWindow getTimeWindow() {
         // Break has always a single time window
         return getSingleTimeWindow();
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliveryActivity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliveryActivity.java
index 7441813e7..5f4e36dbb 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliveryActivity.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliveryActivity.java
@@ -24,15 +24,46 @@
 import com.graphhopper.jsprit.core.problem.SizeDimension.SizeDimensionSign;
 import com.graphhopper.jsprit.core.problem.job.AbstractJob;
 
+/**
+ * A {@linkplain JobActivity} representing a activity where something is
+ * delivered (unloaded from the vehicle).
+ *
+ * @author Balage
+ */
 public class DeliveryActivity extends JobActivity {
 
-
+    /**
+     * Constructor.
+     *
+     * @param job
+     *            The job the activity is part of.
+     * @param type
+     *            The type of the activity.
+     * @param location
+     *            The location of the activity.
+     * @param operationTime
+     *            The duration of the activity.
+     * @param capacity
+     *            The cargo change of the activity. If the value is positive, it
+     *            is negated.
+     * @param timeWindows
+     *            The time windows of the activity.
+     */
     public DeliveryActivity(AbstractJob job, String name, Location location,
-                    double operationTime, SizeDimension capacity, Collection<TimeWindow> timeWindows) {
+            double operationTime, SizeDimension capacity, Collection<TimeWindow> timeWindows) {
         super(job, name, location, operationTime, capacity.sign() == SizeDimensionSign.POSITIVE
-                        ? capacity.invert() : capacity, timeWindows);
+                ? capacity.invert() : capacity, timeWindows);
     }
 
+    /**
+     * Copy constructor.
+     * <p>
+     * This makes a <b>shallow</b> copy of the <code>sourceActivity</code>.
+     * </p>
+     *
+     * @param sourceActivity
+     *            The activity to copy.
+     */
     public DeliveryActivity(DeliveryActivity sourceActivity) {
         super(sourceActivity);
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/End.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/End.java
index e2ad63727..5d073d3cc 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/End.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/End.java
@@ -35,11 +35,29 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
+
 
+/**
+ * An {@linkplain InternalActivity} marking the end of a route.
+ *
+ * @author Balage
+ *
+ */
 public final class End extends InternalActivity {
 
+    /**
+     * Factory method to create a new End activity.
+     *
+     * @param locationId
+     *            The location id (depo) of the end of the route.
+     * @param theoreticalStart
+     *            The earliest possible start time of the activity.
+     * @param theoreticalEnd
+     *            The latest possible start time of the activity.
+     * @return The new {@linkplain End} instance.
+     */
     public static End newInstance(String locationId, double theoreticalStart, double theoreticalEnd) {
         Location loc = null;
         if (locationId != null) {
@@ -48,10 +66,28 @@ public static End newInstance(String locationId, double theoreticalStart, double
         return new End(loc, theoreticalStart, theoreticalEnd);
     }
 
+    /**
+     * Copies the the activity.
+     *
+     * @param start
+     *            The activity to copy.
+     * @return The shallow copy of the activity.
+     */
     public static End copyOf(End end) {
         return new End(end);
     }
 
+    /**
+     * Constructor.
+     *
+     * @param locationId
+     *            The location id (depo) of the end of the route.
+     * @param theoreticalStart
+     *            The earliest possible start time of the activity.
+     * @param theoreticalEnd
+     *            The latest possible start time of the activity.
+     * @return The new {@linkplain End} instance.
+     */
     public End(Location location, double theoreticalStart, double theoreticalEnd) {
         super("end", location, SizeDimension.EMPTY);
         setTheoreticalEarliestOperationStartTime(theoreticalStart);
@@ -60,10 +96,25 @@ public End(Location location, double theoreticalStart, double theoreticalEnd) {
         setIndex(-2);
     }
 
+    /**
+     * Copy constructor.
+     * <p>
+     * Makes a shallow copy.
+     * </p>
+     *
+     * @param end
+     *            The activity to copy.
+     */
     private End(End end) {
         super(end);
     }
 
+    /**
+     * Sets the end location.
+     *
+     * @param location
+     *            The location.
+     */
     public void setLocation(Location location) {
         this.location = location;
     }
@@ -76,89 +127,8 @@ public double getOperationTime() {
     @Override
     public String toString() {
         return "[type=" + getName() + "][location=" + location
-            + "][twStart=" + Activities.round(getTheoreticalEarliestOperationStartTime())
-            + "][twEnd=" + Activities.round(getTheoreticalLatestOperationStartTime()) + "]";
+                + "][twStart=" + Activities.round(getTheoreticalEarliestOperationStartTime())
+                + "][twEnd=" + Activities.round(getTheoreticalLatestOperationStartTime()) + "]";
     }
 
 }
-
-
-/*
- * package com.graphhopper.jsprit.core.problem.solution.route.activity;
- *
- * import com.graphhopper.jsprit.core.problem.SizeDimension; import com.graphhopper.jsprit.core.problem.AbstractActivityNEW;
- * import com.graphhopper.jsprit.core.problem.Location;
- *
- * public final class End extends AbstractActivityNEW {
- *
- * public static End newInstance(String locationId, double earliestArrival, double latestArrival) { return new
- * End(locationId, earliestArrival, latestArrival); }
- *
- * public static End copyOf(End end) { return new End(end); }
- *
- * private final static SizeDimension capacity = SizeDimension.Builder.newInstance().build();
- *
- *
- * private double endTime = -1;
- *
- *
- * private double theoretical_earliestOperationStartTime;
- *
- * private double theoretical_latestOperationStartTime;
- *
- * private double arrTime;
- *
- * private Location location;
- *
- * @Override public void setTheoreticalEarliestOperationStartTime(double theoreticalEarliestOperationStartTime) {
- * theoretical_earliestOperationStartTime = theoreticalEarliestOperationStartTime; }
- *
- * @Override public void setTheoreticalLatestOperationStartTime(double theoreticalLatestOperationStartTime) {
- * theoretical_latestOperationStartTime = theoreticalLatestOperationStartTime; }
- *
- * public End(Location location, double theoreticalStart, double theoreticalEnd) { super(); this.location = location;
- * theoretical_earliestOperationStartTime = theoreticalStart; theoretical_latestOperationStartTime = theoreticalEnd;
- * endTime = theoreticalEnd; setIndex(-2); }
- *
- * public End(String locationId, double theoreticalStart, double theoreticalEnd) { super(); if (locationId != null) {
- * location = Location.Builder.newInstance().setId(locationId).build(); } theoretical_earliestOperationStartTime =
- * theoreticalStart; theoretical_latestOperationStartTime = theoreticalEnd; endTime = theoreticalEnd; setIndex(-2); }
- *
- * public End(End end) { location = end.getLocation(); // this.locationId = end.getLocation().getId();
- * theoretical_earliestOperationStartTime = end.getTheoreticalEarliestOperationStartTime();
- * theoretical_latestOperationStartTime = end.getTheoreticalLatestOperationStartTime(); arrTime = end.getArrTime();
- * endTime = end.getEndTime(); setIndex(-2); }
- *
- * @Override public double getTheoreticalEarliestOperationStartTime() { return theoretical_earliestOperationStartTime; }
- *
- * @Override public double getTheoreticalLatestOperationStartTime() { return theoretical_latestOperationStartTime; }
- *
- * @Override public double getEndTime() { return endTime; }
- *
- * @Override public void setEndTime(double endTime) { this.endTime = endTime; }
- *
- * public void setLocation(Location location) { this.location = location; }
- *
- * @Override public Location getLocation() { return location; }
- *
- * @Override public double getOperationTime() { return 0.0; }
- *
- *
- * @Override public String toString() { return "[type=" + getName() + "][location=" + location + "][twStart=" +
- * Activities.round(theoretical_earliestOperationStartTime) + "][twEnd=" +
- * Activities.round(theoretical_latestOperationStartTime) + "]"; }
- *
- * @Override public String getName() { return "end"; }
- *
- * @Override public double getArrTime() { return arrTime; }
- *
- * @Override public void setArrTime(double arrTime) { this.arrTime = arrTime;
- *
- * }
- *
- * @Override public TourActivity duplicate() { return new End(this); }
- *
- * @Override public SizeDimension getSize() { return capacity; }
- *
- * }
- */
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ExchangeActivity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ExchangeActivity.java
index d9c0dae67..c0032d508 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ExchangeActivity.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ExchangeActivity.java
@@ -23,19 +23,77 @@
 import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.job.AbstractJob;
 
+/**
+ * A {@linkplain JobActivity} representing a activity where something is
+ * unloaded and something else is loaded at the same time. (For example, the
+ * cargo is loaded and the empty crates are picked up.) The size dimension may
+ * contain both positive and negative values.
+ *
+ * @author Balage
+ */
 public class ExchangeActivity extends JobActivity {
 
+    /**
+     * Constructor.
+     *
+     * @param job
+     *            The job the activity is part of.
+     * @param type
+     *            The type of the activity.
+     * @param location
+     *            The location of the activity.
+     * @param operationTime
+     *            The duration of the activity.
+     * @param capacity
+     *            The cargo change of the activity. It may contain both positive
+     *            and negative values.
+     * @param timeWindows
+     *            The time windows of the activity.
+     */
     public ExchangeActivity(AbstractJob job, String name, Location location,
-                    double operationTime, SizeDimension size, Collection<TimeWindow> timeWindows) {
+            double operationTime, SizeDimension size, Collection<TimeWindow> timeWindows) {
         super(job, name, location, operationTime, size, timeWindows);
     }
 
+    /**
+     * Constructor.
+     * <p>
+     * This calls the
+     * {@linkplain ExchangeActivity#ExchangeActivity(AbstractJob, String, Location, double, SizeDimension, Collection)}
+     * with the capacity value of
+     * <code>backhaulSize.subtract(deliverySize)</code>.
+     * </p>
+     *
+     * @param job
+     *            The job the activity is part of.
+     * @param type
+     *            The type of the activity.
+     * @param location
+     *            The location of the activity.
+     * @param operationTime
+     *            The duration of the activity.
+     * @param deliverySize
+     *            The unsigned (positive) size of the unloaded cargo.
+     * @param backhaulSize
+     *            The unsigned (positive) size of the picked up backhaul cargo.
+     * @param timeWindows
+     *            The time windows of the activity.
+     */
     public ExchangeActivity(AbstractJob job, String name, Location location,
-                    double operationTime, SizeDimension deliverySize, SizeDimension backhaulSize,
-                    Collection<TimeWindow> timeWindows) {
+            double operationTime, SizeDimension deliverySize, SizeDimension backhaulSize,
+            Collection<TimeWindow> timeWindows) {
         this(job, name, location, operationTime, backhaulSize.subtract(deliverySize), timeWindows);
     }
 
+    /**
+     * Copy constructor.
+     * <p>
+     * This makes a <b>shallow</b> copy of the <code>sourceActivity</code>.
+     * </p>
+     *
+     * @param sourceActivity
+     *            The activity to copy.
+     */
     public ExchangeActivity(ExchangeActivity sourceActivity) {
         super(sourceActivity);
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/InternalActivity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/InternalActivity.java
index 27c6a5f71..43d7b5e82 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/InternalActivity.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/InternalActivity.java
@@ -1,10 +1,10 @@
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 
 /**
- * Common ancesstor for non-job-based, internal activities
+ * Common ancestor for non-job-based, internal activities
  *
  * @author balage
  */
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/InternalJobActivity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/InternalJobActivity.java
index 5b06f9a82..96b59db38 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/InternalJobActivity.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/InternalJobActivity.java
@@ -1,20 +1,20 @@
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.SizeDimension;
+import java.util.Collection;
+
 import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.job.AbstractJob;
 
-import java.util.Collection;
-
 /**
- * Common ancesstor for job-based, internal activities
+ * Common ancestor for job-based, internal activities
  *
  * @author balage
  */
 public abstract class InternalJobActivity extends JobActivity implements InternalActivityMarker {
 
     public InternalJobActivity(AbstractJob job, String name, Location location,
-                               double operationTime, SizeDimension capacity, Collection<TimeWindow> timeWindows) {
+            double operationTime, SizeDimension capacity, Collection<TimeWindow> timeWindows) {
         super(job, name, location, operationTime, capacity, timeWindows);
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/JobActivity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/JobActivity.java
index 9d0b09d56..66f216cd0 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/JobActivity.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/JobActivity.java
@@ -9,12 +9,14 @@
 import com.graphhopper.jsprit.core.problem.job.Job;
 
 /**
- * Basic interface of job-activies.
+ * Basic interface of job-related activies.
  * <p>
- * <p>
- * A job activity is related to a {@link Job}.
+ * A job activity may have time windows, operation time and is related to a
+ * {@link Job}.
+ * </p>
  *
  * @author schroeder
+ * @author Balage
  */
 public abstract class JobActivity extends AbstractActivity {
 
@@ -26,14 +28,39 @@
 
     private int orderNumber;
 
+    /**
+     * Constructor.
+     *
+     * @param job
+     *            The job the activity is part of.
+     * @param type
+     *            The type of the activity.
+     * @param location
+     *            The location of the activity.
+     * @param operationTime
+     *            The duration of the activity.
+     * @param capacity
+     *            The cargo change of the activity.
+     * @param timeWindows
+     *            The time windows of the activity.
+     */
     public JobActivity(AbstractJob job, String type, Location location, double operationTime,
-                    SizeDimension capacity, Collection<TimeWindow> timeWindows) {
+            SizeDimension capacity, Collection<TimeWindow> timeWindows) {
         super(type, location, capacity);
         this.job = job;
         this.operationTime = operationTime;
         this.timeWindows = timeWindows;
     }
 
+    /**
+     * Copy constructor.
+     * <p>
+     * This makes a <b>shallow</b> copy of the <code>sourceActivity</code>.
+     * </p>
+     *
+     * @param sourceActivity
+     *            The activity to copy.
+     */
     protected JobActivity(JobActivity sourceActivity) {
         super(sourceActivity);
         job = sourceActivity.getJob();
@@ -46,6 +73,9 @@ protected JobActivity(JobActivity sourceActivity) {
         }
     }
 
+    /**
+     * @return The job the activity is associated with.
+     */
     public AbstractJob getJob() {
         return job;
     }
@@ -60,14 +90,23 @@ public String getName() {
         return job.getId() + "." + getType();
     }
 
+    /**
+     * @return The time windows.
+     */
     public Collection<TimeWindow> getTimeWindows() {
         return timeWindows;
     }
 
+    /**
+     * @return A single time window.
+     * @throws IllegalArgumentException
+     *             When more than one time window exists.
+     */
+    // TODO: Is it legacy code, should be removed later
+    @Deprecated
     public TimeWindow getSingleTimeWindow() {
-        if (timeWindows.size() > 1) {
+        if (timeWindows.size() > 1)
             throw new IllegalArgumentException("More than one time window in. " + this);
-        }
         return timeWindows.iterator().next();
     }
 
@@ -82,34 +121,39 @@ public int hashCode() {
 
     @Override
     public boolean equals(Object obj) {
-        if (this == obj) {
+        if (this == obj)
             return true;
-        }
-        if (obj == null) {
+        if (obj == null)
             return false;
-        }
-        if (getClass() != obj.getClass()) {
+        if (getClass() != obj.getClass())
             return false;
-        }
         JobActivity other = (JobActivity) obj;
         if (job == null) {
-            if (other.job != null) {
+            if (other.job != null)
                 return false;
-            }
-        } else if (!job.equals(other.job)) {
+        } else if (!job.equals(other.job))
             return false;
-        }
-        if (orderNumber != other.orderNumber) {
+        if (orderNumber != other.orderNumber)
             return false;
-        }
         return true;
     }
 
+    /**
+     * @return The order of the task within its job
+     */
     public int getOrderNumber() {
         return orderNumber;
     }
 
-    public void setOrderNumber(int orderNumber) {
+    /**
+     * Sets the order number of the activity within the job.
+     * <p>
+     * <b>Warning! This function is not part of the API.</b>
+     * </p>
+     *
+     * @param orderNumber
+     */
+    public void impl_setOrderNumber(int orderNumber) {
         this.orderNumber = orderNumber;
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivity.java
index ef4b0fe23..66b436b70 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivity.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivity.java
@@ -23,13 +23,44 @@
 import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.job.AbstractJob;
 
+/**
+ * A {@linkplain JobActivity} representing a activity where something is picked
+ * up (loaded to the vehicle).
+ *
+ * @author Balage
+ */
 public class PickupActivity extends JobActivity {
 
+    /**
+     * Constructor.
+     *
+     * @param job
+     *            The job the activity is part of.
+     * @param type
+     *            The type of the activity.
+     * @param location
+     *            The location of the activity.
+     * @param operationTime
+     *            The duration of the activity.
+     * @param capacity
+     *            The cargo change of the activity.
+     * @param timeWindows
+     *            The time windows of the activity.
+     */
     public PickupActivity(AbstractJob job, String name, Location location, double operationTime,
-                    SizeDimension capacity, Collection<TimeWindow> timeWindows) {
+            SizeDimension capacity, Collection<TimeWindow> timeWindows) {
         super(job, name, location, operationTime, capacity, timeWindows);
     }
 
+    /**
+     * Copy constructor.
+     * <p>
+     * This makes a <b>shallow</b> copy of the <code>sourceActivity</code>.
+     * </p>
+     *
+     * @param sourceActivity
+     *            The activity to copy.
+     */
     public PickupActivity(PickupActivity sourceActivity) {
         super(sourceActivity);
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivity.java
index 3fef91746..1a55b725c 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivity.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivity.java
@@ -23,16 +23,50 @@
 import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.job.AbstractJob;
 
+/**
+ * A {@linkplain JobActivity} representing a activity where something is served.
+ * Theoretically no cargo change is involved, although, for historical reason,
+ * the constructor allows to pass a capacity. When a non-empty capacity is
+ * passed the service acts as an {@linkplain ExchangeActivity}.
+ *
+ * @author Balage
+ */
 public class ServiceActivity extends JobActivity {
 
+    /**
+     * Constructor.
+     *
+     * @param job
+     *            The job the activity is part of.
+     * @param type
+     *            The type of the activity.
+     * @param location
+     *            The location of the activity.
+     * @param operationTime
+     *            The duration of the activity.
+     * @param capacity
+     *            The cargo change of the activity. It should be null or
+     *            {@linkplain SizeDimension#EMPTY}, although it is not enforced.
+     * @param timeWindows
+     *            The time windows of the activity.
+     */
     public ServiceActivity(AbstractJob job, String type, Location location, double operationTime,
-                    SizeDimension capacity, Collection<TimeWindow> timeWindows) {
+            SizeDimension capacity, Collection<TimeWindow> timeWindows) {
         super(job, type, location, operationTime, capacity, timeWindows);
     }
 
 
+    /**
+     * Copy constructor.
+     * <p>
+     * This makes a <b>shallow</b> copy of the <code>sourceActivity</code>.
+     * </p>
+     *
+     * @param sourceActivity
+     *            The activity to copy.
+     */
     public ServiceActivity(ServiceActivity sourceActivity) {
-        super(sourceActivity);
-    }
+         super(sourceActivity);
+     }
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/Start.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/Start.java
index 09e53e7fa..9f4049b83 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/Start.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/Start.java
@@ -17,11 +17,28 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 
+/**
+ * An {@linkplain InternalActivity} marking the start of a route.
+ *
+ * @author Balage
+ *
+ */
 public final class Start extends InternalActivity {
 
+    /**
+     * Factory method to create a new Start activity.
+     *
+     * @param locationId
+     *            The location id (depo) of the start of the route.
+     * @param theoreticalStart
+     *            The earliest possible start time of the activity.
+     * @param theoreticalEnd
+     *            The latest possible start time of the activity.
+     * @return The new {@linkplain Start} instance.
+     */
     public static Start newInstance(String locationId, double theoreticalStart, double theoreticalEnd) {
         Location loc = null;
         if (locationId != null) {
@@ -30,10 +47,27 @@ public static Start newInstance(String locationId, double theoreticalStart, doub
         return new Start(loc, theoreticalStart, theoreticalEnd);
     }
 
+    /**
+     * Copies the the activity.
+     *
+     * @param start
+     *            The activity to copy.
+     * @return The shallow copy of the activity.
+     */
     public static Start copyOf(Start start) {
         return new Start(start);
     }
 
+    /**
+     * Constructor.
+     *
+     * @param locationId
+     *            The location id (depo) of the start of the route.
+     * @param theoreticalStart
+     *            The earliest possible start time of the activity.
+     * @param theoreticalEnd
+     *            The latest possible start time of the activity.
+     */
     public Start(Location location, double theoreticalStart, double theoreticalEnd) {
         super("start", location, SizeDimension.EMPTY);
         setTheoreticalEarliestOperationStartTime(theoreticalStart);
@@ -42,10 +76,25 @@ public Start(Location location, double theoreticalStart, double theoreticalEnd)
         setIndex(-1);
     }
 
+    /**
+     * Copy constructor.
+     * <p>
+     * Makes a shallow copy.
+     * </p>
+     *
+     * @param start
+     *            The activity to copy.
+     */
     private Start(Start start) {
         super(start);
     }
 
+    /**
+     * Sets the start location.
+     * 
+     * @param location
+     *            The location.
+     */
     public void setLocation(Location location) {
         this.location = location;
     }
@@ -58,8 +107,8 @@ public double getOperationTime() {
     @Override
     public String toString() {
         return "[type=" + getName() + "][location=" + location
-            + "][twStart=" + Activities.round(getTheoreticalEarliestOperationStartTime())
-            + "][twEnd=" + Activities.round(getTheoreticalLatestOperationStartTime()) + "]";
+                + "][twStart=" + Activities.round(getTheoreticalEarliestOperationStartTime())
+                + "][twEnd=" + Activities.round(getTheoreticalLatestOperationStartTime()) + "]";
     }
 
 }
