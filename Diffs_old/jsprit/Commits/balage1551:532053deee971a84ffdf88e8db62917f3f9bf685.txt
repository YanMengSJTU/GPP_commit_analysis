diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractJob.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractJob.java
index baff060b4..d594a881b 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractJob.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractJob.java
@@ -24,7 +24,9 @@
 import java.util.List;
 import java.util.Set;
 
+import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.Skills;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 
 /**
@@ -32,17 +34,177 @@
  */
 public abstract class AbstractJob implements Job {
 
+    /**
+     * Builder that builds a service.
+     *
+     * @author schroeder
+     */
+    public abstract static class JobBuilder<T extends AbstractJob, B extends JobBuilder<T, B>> {
+
+        protected Capacity.Builder capacityBuilder = Capacity.Builder.newInstance();
+
+        protected Skills.Builder skillBuilder = Skills.Builder.newInstance();
+
+        protected String id;
+
+        protected String name = "no-name";
+
+        protected int priority = 2;
+
+        public JobBuilder(String id) {
+            if (id == null) {
+                throw new IllegalArgumentException("id must not be null");
+            }
+            this.id = id;
+        }
+
+        /**
+         * Adds capacity dimension.
+         *
+         * @param dimensionIndex
+         *            the dimension index of the capacity value
+         * @param dimensionValue
+         *            the capacity value
+         * @return the builder
+         * @throws IllegalArgumentException
+         *             if dimensionValue < 0
+         */
+        @SuppressWarnings("unchecked")
+        public B addSizeDimension(int dimensionIndex, int dimensionValue) {
+            if (dimensionValue < 0) {
+                throw new IllegalArgumentException("capacity value cannot be negative");
+            }
+            capacityBuilder.addDimension(dimensionIndex, dimensionValue);
+            return (B) this;
+        }
+
+        @SuppressWarnings("unchecked")
+        public B addRequiredSkill(String skill) {
+            skillBuilder.addSkill(skill);
+            return (B) this;
+        }
+
+        @SuppressWarnings("unchecked")
+        public B setName(String name) {
+            this.name = name;
+            return (B) this;
+        }
+
+        @SuppressWarnings("unchecked")
+        public B addAllRequiredSkills(Skills skills) {
+            for (String s : skills.values()) {
+                skillBuilder.addSkill(s);
+            }
+            return (B) this;
+        }
+
+        @SuppressWarnings("unchecked")
+        public B addAllSizeDimensions(Capacity size) {
+            for (int i = 0; i < size.getNuOfDimensions(); i++) {
+                capacityBuilder.addDimension(i, size.get(i));
+            }
+            return (B) this;
+        }
+
+        /**
+         * Set priority to service. Only 1 = high priority, 2 = medium and 3 =
+         * low are allowed.
+         * <p>
+         * Default is 2 = medium.
+         *
+         * @param priority
+         * @return builder
+         */
+        @SuppressWarnings("unchecked")
+        public B setPriority(int priority) {
+            if (priority < 1 || priority > 3) {
+                throw new IllegalArgumentException(
+                                "incorrect priority. only 1 = high, 2 = medium and 3 = low is allowed");
+            }
+            this.priority = priority;
+            return (B) this;
+        }
+
+        /**
+         * Builds the service.
+         *
+         * <p>
+         * The implementation of the builder <b>MUST</b> call the
+         * {@linkplain #postProcess(Service)} method after the instance is
+         * constructed:
+         *
+         * <pre>
+         *    &#64;Override
+         *    public Service build() {
+         *        [...]
+         *        Service service = new Service(this);
+         *        postProcess(service);
+         *        return service;
+         *    }
+         * </pre>
+         *
+         * </p>
+         *
+         * @return {@link Service}
+         * @throws IllegalArgumentException
+         *             if neither locationId nor coordinate is set.
+         */
+        public T build() {
+            validate();
+            T job = createInstance();
+            job.createActivities(this);
+            return job;
+        }
+
+        protected abstract void validate();
+
+        protected abstract T createInstance();
+
+        public Capacity getCapacity() {
+            return capacityBuilder.build();
+        }
+
+        public Skills getSkills() {
+            return skillBuilder.build();
+        }
+
+        public String getId() {
+            return id;
+        }
+
+        public String getName() {
+            return name;
+        }
+
+        public int getPriority() {
+            return priority;
+        }
+
+    }
+
     private int index;
 
+    private String id;
+
+    private Skills skills;
+
+    private String name;
+
+    private int priority;
+
     protected List<Location> allLocations;
 
     private JobActivityList activityList;
 
     protected Set<TimeWindow> allTimeWindows;
 
-    public AbstractJob() {
+    public AbstractJob(JobBuilder<?, ?> builder) {
         super();
         activityList = new SequentialJobActivityList(this);
+        id = builder.getId();
+        skills = builder.getSkills();
+        name = builder.getName();
+        priority = builder.getPriority();
     }
 
     @Override
@@ -54,6 +216,7 @@ public void setIndex(int index) {
         this.index = index;
     }
 
+
     private void addLocation(Location location) {
         if (location != null) {
             allLocations.add(location);
@@ -89,7 +252,43 @@ private void addTimeWindows(Collection<TimeWindow> timeWindows) {
      * are added.
      * </p>
      */
-    protected abstract void createActivities();
+    // protected abstract void createActivities();
+    protected abstract void createActivities(JobBuilder<? extends AbstractJob, ?> jobBuilder);
+
+    @Override
+    public int hashCode() {
+        final int prime = 31;
+        int result = 1;
+        result = prime * result + ((id == null) ? 0 : id.hashCode());
+        return result;
+    }
+
+    /**
+     * Two shipments are equal if they have the same id.
+     *
+     * @return true if shipments are equal (have the same id)
+     */
+    @Override
+    public boolean equals(Object obj) {
+        if (this == obj) {
+            return true;
+        }
+        if (obj == null) {
+            return false;
+        }
+        if (getClass() != obj.getClass()) {
+            return false;
+        }
+        AbstractJob other = (AbstractJob) obj;
+        if (id == null) {
+            if (other.id != null) {
+                return false;
+            }
+        } else if (!id.equals(other.id)) {
+            return false;
+        }
+        return true;
+    }
 
     protected void setActivities(JobActivityList list) {
         activityList = list;
@@ -107,5 +306,26 @@ public JobActivityList getActivityList() {
         return allTimeWindows;
     }
 
+    @Override
+    public String getId() {
+        return id;
+    }
+
+    @Override
+    public Skills getRequiredSkills() {
+        return skills;
+    }
+
+    @Override
+    public String getName() {
+        return name;
+    }
+
+    @Override
+    public int getPriority() {
+        return priority;
+    }
+
+
 }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Break.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Break.java
index 317963310..ad37eb9be 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Break.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Break.java
@@ -18,6 +18,7 @@
 package com.graphhopper.jsprit.core.problem.job;
 
 
+import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.BreakActivity;
 
 /**
@@ -27,49 +28,50 @@
  */
 public class Break extends Service implements InternalJobMarker {
 
-    public static class Builder extends Service.ServiceBuilderBase<Builder> {
+    public static final class Builder extends Service.BuilderBase<Break, Builder> {
 
-
-        private boolean variableLocation = true;
+        private static final Location VARIABLE_LOCATION = Location
+                        .newInstance("@@@VARIABLE_LOCATION");
 
         public Builder(String id) {
             super(id);
+            setType("break");
+            setLocation(VARIABLE_LOCATION);
+        }
+
+        public static Builder newInstance(String id) {
+            return new Builder(id);
         }
 
-        /**
-         * Builds Pickup.
-         * <p>
-         * <p>Pickup type is "pickup"
-         *
-         * @return pickup
-         * @throws IllegalStateException if neither locationId nor coordinate has been set
-         */
-        @SuppressWarnings("unchecked")
         @Override
-        public Break build() {
-            if (location != null) {
-                variableLocation = false;
+        protected void validate() {
+            super.validate();
+            // This is a trick: Service requires a location, but after
+            // validation we could remove it.
+            if (location.equals(VARIABLE_LOCATION)) {
+                location = null;
             }
-            setType("break");
-            preProcess();
-            Break instance = new Break(this);
-            postProcess(instance);
-            return instance;
+        }
+
+        @Override
+        protected Break createInstance() {
+            return new Break(this);
         }
 
     }
 
+
     private boolean variableLocation = true;
 
     Break(Builder builder) {
         super(builder);
-        variableLocation = builder.variableLocation;
+        variableLocation = (builder.getLocation() == null);
     }
 
     @Override
-    protected void createActivities() {
+    protected void createActivities(JobBuilder<?, ?> builder) {
         JobActivityList list = new SequentialJobActivityList(this);
-        list.addActivity(BreakActivity.newInstance(this));
+        list.addActivity(BreakActivity.newInstance(this, (Builder) builder));
         setActivities(list);
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Delivery.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Delivery.java
index e78279225..43f513da3 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Delivery.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Delivery.java
@@ -17,6 +17,7 @@
  */
 package com.graphhopper.jsprit.core.problem.job;
 
+import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverServiceDEPRECATED;
 
 /**
@@ -26,48 +27,41 @@
  */
 public class Delivery extends Service {
 
-    public static class Builder extends Service.ServiceBuilderBase<Builder> {
-
+    public static final class Builder extends Service.BuilderBase<Delivery, Builder> {
 
         public Builder(String id) {
             super(id);
-        }
-
-        /**
-         * Builds Delivery.
-         *
-         * @return delivery
-         * @throws IllegalArgumentException if neither locationId nor coord is set
-         */
-        @SuppressWarnings("unchecked")
-        @Override
-        public Delivery build() {
-            if (location == null) {
-                throw new IllegalArgumentException("location is missing");
-            }
             setType("delivery");
-            preProcess();
-            Delivery delivery = new Delivery(this);
-            postProcess(delivery);
-            return delivery;
         }
 
         public static Builder newInstance(String id) {
             return new Builder(id);
         }
+
+        @Override
+        protected Delivery createInstance() {
+            return new Delivery(this);
+        }
     }
 
-    Delivery(Builder builder) {
+    Delivery(BuilderBase<? extends Delivery, ?> builder) {
         super(builder);
     }
 
     @Override
-    protected void createActivities() {
+    protected void createActivities(JobBuilder<?, ?> builder) {
         JobActivityList list = new SequentialJobActivityList(this);
         // TODO - Balage1551
-//      list.addActivity(new DeliveryActivityNEW(this, "delivery", getLocation(), getServiceDuration(), getSize()));
-        list.addActivity(new DeliverServiceDEPRECATED(this));
+        // addActivity(new DeliveryActivityNEW(this, "pickup", getLocation(),
+        // getServiceDuration(), getSize()));
+        list.addActivity(new DeliverServiceDEPRECATED(this, (Builder) builder));
         setActivities(list);
     }
 
+    @Override
+    @Deprecated
+    public Capacity getSize() {
+        return Capacity.invert(super.getSize());
+    }
+
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Pickup.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Pickup.java
index d17aa39ab..28f42c3fc 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Pickup.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Pickup.java
@@ -26,37 +26,21 @@
  */
 public class Pickup extends Service {
 
-    public static class Builder extends Service.ServiceBuilderBase<Builder> {
+    public static final class Builder extends Service.BuilderBase<Pickup, Builder> {
 
         public Builder(String id) {
             super(id);
-        }
-
-        /**
-         * Builds Pickup.
-         * <p>
-         * <p>Pickup type is "pickup"
-         *
-         * @return pickup
-         * @throws IllegalArgumentException if neither locationId nor coordinate has been set
-         */
-        @SuppressWarnings("unchecked")
-        @Override
-        public Pickup build() {
-            if (location == null) {
-                throw new IllegalArgumentException("location is missing");
-            }
             setType("pickup");
-            preProcess();
-            Pickup pickup = new Pickup(this);
-            postProcess(pickup);
-            return pickup;
         }
 
         public static Builder newInstance(String id) {
             return new Builder(id);
         }
 
+        @Override
+        protected Pickup createInstance() {
+            return new Pickup(this);
+        }
     }
 
     Pickup(Builder builder) {
@@ -64,11 +48,11 @@ public static Builder newInstance(String id) {
     }
 
     @Override
-    protected void createActivities() {
+    protected void createActivities(JobBuilder<?, ?> builder) {
         JobActivityList list = new SequentialJobActivityList(this);
         // TODO - Balage1551
-//      addActivity(new PickupActivityNEW(this, "pickup", getLocation(), getServiceDuration(), getSize()));
-        list.addActivity(new PickupServiceDEPRECATED(this));
+        //      addActivity(new PickupActivityNEW(this, "pickup", getLocation(), getServiceDuration(), getSize()));
+        list.addActivity(new PickupServiceDEPRECATED(this, (Builder) builder));
         setActivities(list);
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java
index e78f58643..7c9dd3bfe 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java
@@ -21,11 +21,10 @@
 
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.Skills;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupServiceDEPRECATED;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindowsImpl;
-import com.graphhopper.jsprit.core.util.Coordinate;
 
 /**
  * Service implementation of a job.
@@ -42,42 +41,21 @@
      *
      * @author schroeder
      */
-    public abstract static class ServiceBuilderBase<B extends ServiceBuilderBase<B>> {
-
-        protected String id;
-
-        protected String locationId;
+    public static abstract class BuilderBase<T extends Service, B extends BuilderBase<T, B>>
+    extends JobBuilder<T, B> {
 
         protected String type = "service";
 
-        protected Coordinate coord;
-
         protected double serviceTime;
 
-        protected TimeWindow timeWindow = TimeWindow.newInstance(0.0, Double.MAX_VALUE);
-
-        protected Capacity.Builder capacityBuilder = Capacity.Builder.newInstance();
-
-        protected Capacity capacity;
-
-        protected Skills.Builder skillBuilder = Skills.Builder.newInstance();
-
-        protected Skills skills;
-
-        protected String name = "no-name";
-
         protected Location location;
 
         protected TimeWindowsImpl timeWindows;
 
-        protected boolean twAdded = false;
-
-        protected int priority = 2;
-
-        public ServiceBuilderBase(String id) {
+        public BuilderBase(String id) {
+            super(id);
             this.id = id;
             timeWindows = new TimeWindowsImpl();
-            timeWindows.add(timeWindow);
         }
 
         /**
@@ -133,6 +111,7 @@ public B setServiceTime(double serviceTime) {
          * @return the builder
          * @throws IllegalArgumentException if dimensionValue < 0
          */
+        @Override
         @SuppressWarnings("unchecked")
         public B addSizeDimension(int dimensionIndex, int dimensionValue) {
             if (dimensionValue < 0) {
@@ -147,7 +126,6 @@ public B setTimeWindow(TimeWindow tw) {
             if(tw == null) {
                 throw new IllegalArgumentException("time-window arg must not be null");
             }
-            timeWindow = tw;
             timeWindows = new TimeWindowsImpl();
             timeWindows.add(tw);
             return (B) this;
@@ -158,10 +136,6 @@ public B addTimeWindow(TimeWindow timeWindow) {
             if(timeWindow == null) {
                 throw new IllegalArgumentException("time-window arg must not be null");
             }
-            if(!twAdded){
-                timeWindows = new TimeWindowsImpl();
-                twAdded = true;
-            }
             timeWindows.add(timeWindow);
             return (B) this;
         }
@@ -170,52 +144,6 @@ public B addTimeWindow(double earliest, double latest) {
             return addTimeWindow(TimeWindow.newInstance(earliest, latest));
         }
 
-
-        @SuppressWarnings("unchecked")
-        public B addRequiredSkill(String skill) {
-            skillBuilder.addSkill(skill);
-            return (B) this;
-        }
-
-        @SuppressWarnings("unchecked")
-        public B setName(String name) {
-            this.name = name;
-            return (B) this;
-        }
-
-        @SuppressWarnings("unchecked")
-        public B addAllRequiredSkills(Skills skills) {
-            for(String s : skills.values()){
-                skillBuilder.addSkill(s);
-            }
-            return (B) this;
-        }
-
-        @SuppressWarnings("unchecked")
-        public B addAllSizeDimensions(Capacity size) {
-            for(int i=0;i<size.getNuOfDimensions();i++){
-                capacityBuilder.addDimension(i,size.get(i));
-            }
-            return (B) this;
-        }
-
-        /**
-         * Set priority to service. Only 1 = high priority, 2 = medium and 3 = low are allowed.
-         * <p>
-         * Default is 2 = medium.
-         *
-         * @param priority
-         * @return builder
-         */
-        @SuppressWarnings("unchecked")
-        public B setPriority(int priority) {
-            if(priority < 1 || priority > 3) {
-                throw new IllegalArgumentException("incorrect priority. only 1 = high, 2 = medium and 3 = low is allowed");
-            }
-            this.priority = priority;
-            return (B) this;
-        }
-
         /**
          * Builds the service.
          *
@@ -227,7 +155,6 @@ public B setPriority(int priority) {
          *    &#64;Override
          *    public Service build() {
          *        [...]
-         *        preProcess();
          *        Service service = new Service(this);
          *        postProcess(service);
          *        return service;
@@ -240,93 +167,71 @@ public B setPriority(int priority) {
          * @throws IllegalArgumentException
          *             if neither locationId nor coordinate is set.
          */
-        public abstract <T extends Service> T build();
 
-        protected <T extends Service> void preProcess() {
-            capacity = capacityBuilder.build();
-            skills = skillBuilder.build();
+        @Override
+        protected void validate() {
+            if (location == null) {
+                throw new IllegalArgumentException("location is missing");
+            }
+            if (timeWindows.isEmpty()) {
+                timeWindows.add(new TimeWindow(0, Double.MAX_VALUE));
+            }
+        }
+
+        public String getType() {
+            return type;
+        }
+
+        public double getServiceTime() {
+            return serviceTime;
         }
 
-        protected <T extends Service> void postProcess(T service) {
-            service.createActivities();
+        public Location getLocation() {
+            return location;
+        }
+
+        public TimeWindowsImpl getTimeWindows() {
+            return timeWindows;
         }
     }
 
+    public static class Builder extends BuilderBase<Service, Builder> {
 
-    public static class Builder extends ServiceBuilderBase<Builder> {
+        public static Builder newInstance(String id) {
+            return new Builder(id);
+        }
 
         public Builder(String id) {
             super(id);
         }
 
-        /**
-         * Builds the service.
-         *
-         * @return {@link Service}
-         * @throws IllegalArgumentException
-         *             if neither locationId nor coordinate is set.
-         */
-        @SuppressWarnings("unchecked")
         @Override
-        public Service build() {
-            if (location == null) {
-                throw new IllegalArgumentException("location is missing");
-            }
-            setType("service");
-            preProcess();
-            Service service = new Service(this);
-            postProcess(service);
-            return service;
+        protected Service createInstance() {
+            return new Service(this);
         }
-
     }
 
 
-    private String id;
-
     private String type;
 
-    private double serviceTime;
-
-    private TimeWindow timeWindow;
-
-    private Capacity size;
-
-    private Skills skills;
-
-    private String name;
-
-    private Location location;
-
-    private TimeWindowsImpl timeWindowManager;
-
-    private int priority;
-
-    Service(ServiceBuilderBase<?> builder) {
-        id = builder.id;
-        serviceTime = builder.serviceTime;
-        timeWindow = builder.timeWindow;
+    Service(BuilderBase<? extends Service, ?> builder) {
+        super(builder);
         type = builder.type;
-        size = builder.capacity;
-        skills = builder.skills;
-        name = builder.name;
-        location = builder.location;
-        timeWindowManager = builder.timeWindows;
-        priority = builder.priority;
     }
 
+
     @Override
-    protected void createActivities() {
+    protected void createActivities(JobBuilder<?, ?> builder) {
+        Builder serviceBuilder = (Builder) builder;
         JobActivityList list = new SequentialJobActivityList(this);
         // TODO - Balage1551
         //        list.addActivity(new ServiceActivityNEW(this, "service", getLocation(), getServiceDuration(), getSize()));
-        list.addActivity(new PickupServiceDEPRECATED(this));
+        list.addActivity(new PickupServiceDEPRECATED(this, serviceBuilder));
         setActivities(list);
     }
 
-    @Override
-    public String getId() {
-        return id;
+    public JobActivity getServiceActivity() {
+        return getActivityList().getAll().get(0);
     }
 
     /**
@@ -334,8 +239,9 @@ public String getId() {
      *
      * @return location
      */
+    @Deprecated
     public Location getLocation() {
-        return location;
+        return getServiceActivity().getLocation();
     }
 
 
@@ -344,8 +250,9 @@ public Location getLocation() {
      *
      * @return service duration
      */
+    @Deprecated
     public double getServiceDuration() {
-        return serviceTime;
+        return getServiceActivity().getOperationTime();
     }
 
     /**
@@ -355,12 +262,14 @@ public double getServiceDuration() {
      * @return time window
      *
      */
+    @Deprecated
     public TimeWindow getTimeWindow() {
-        return timeWindowManager.getTimeWindows().iterator().next();
+        return getServiceTimeWindows().iterator().next();
     }
 
+    @Deprecated
     public Collection<TimeWindow> getServiceTimeWindows() {
-        return timeWindowManager.getTimeWindows();
+        return getServiceActivity().getTimeWindows();
     }
 
     /**
@@ -377,80 +286,27 @@ public String getType() {
      */
     @Override
     public String toString() {
-        return "[id=" + id + "][name=" + name + "][type=" + type + "][location=" + location + "][capacity=" + size + "][serviceTime=" + serviceTime + "][timeWindow=" + timeWindow + "]";
+        return "[id=" + getId() + "][name=" + getName() + "][type=" + type + "][location="
+                        + getLocation() + "][capacity=" + getSize() + "][serviceTime="
+                        + getServiceDuration() + "][timeWindow=" + getTimeWindows() + "]";
     }
 
 
     @Override
-    public int hashCode() {
-        final int prime = 31;
-        int result = 1;
-        result = prime * result + ((id == null) ? 0 : id.hashCode());
-        return result;
-    }
-
-    /**
-     * Two services are equal if they have the same id.
-     */
-    @Override
-    public boolean equals(Object obj) {
-        if (this == obj) {
-            return true;
-        }
-        if (obj == null) {
-            return false;
-        }
-        if (getClass() != obj.getClass()) {
-            return false;
-        }
-        Service other = (Service) obj;
-        if (id == null) {
-            if (other.id != null) {
-                return false;
-            }
-        } else if (!id.equals(other.id)) {
-            return false;
-        }
-        return true;
-    }
-
-    @Override
+    @Deprecated
     public Capacity getSize() {
-        return size;
-    }
-
-    @Override
-    public Skills getRequiredSkills() {
-        return skills;
+        return getServiceActivity().getSize();
     }
 
-    @Override
-    public String getName() {
-        return name;
-    }
-
-    /**
-     * Get priority of service. Only 1 = high priority, 2 = medium and 3 = low are allowed.
-     * <p>
-     * Default is 2 = medium.
-     *
-     * @return priority
-     */
-    @Override
-    public int getPriority() {
-        return priority;
-    }
-
-
     @Override
     public Location getStartLocation() {
-        return location;
+        return getServiceActivity().getLocation();
     }
 
 
     @Override
     public Location getEndLocation() {
-        return location;
+        return getServiceActivity().getLocation();
     }
 
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java
index 60629e930..912b9df37 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java
@@ -21,7 +21,6 @@
 
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.Skills;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverShipmentDEPRECATED;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupShipmentDEPRECATED;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
@@ -55,49 +54,25 @@
  */
 public class Shipment extends AbstractJob {
 
-
-
-
     /**
      * Builder that builds the shipment.
      *
      * @author schroeder
      */
-    public static class Builder {
-
-        private String id;
+    public static abstract class BuilderBase<T extends Shipment, B extends BuilderBase<T, B>>
+    extends JobBuilder<T, B> {
 
         private double pickupServiceTime = 0.0;
 
         private double deliveryServiceTime = 0.0;
 
-        private TimeWindow deliveryTimeWindow = TimeWindow.newInstance(0.0, Double.MAX_VALUE);
-
-        private TimeWindow pickupTimeWindow = TimeWindow.newInstance(0.0, Double.MAX_VALUE);
-
-        private Capacity.Builder capacityBuilder = Capacity.Builder.newInstance();
-
-        private Capacity capacity;
-
-        private Skills.Builder skillBuilder = Skills.Builder.newInstance();
+        private Location pickupLocation;
 
-        private Skills skills;
+        private Location deliveryLocation;
 
-        private String name = "no-name";
+        protected TimeWindowsImpl deliveryTimeWindows = new TimeWindowsImpl();
 
-        private Location pickupLocation_;
-
-        private Location deliveryLocation_;
-
-        protected TimeWindowsImpl deliveryTimeWindows;
-
-        private boolean deliveryTimeWindowAdded = false;
-
-        private boolean pickupTimeWindowAdded = false;
-
-        private TimeWindowsImpl pickupTimeWindows;
-
-        private int priority = 2;
+        private TimeWindowsImpl pickupTimeWindows = new TimeWindowsImpl();
 
         /**
          * Returns new instance of this builder.
@@ -107,19 +82,11 @@
          *            among all jobs
          * @return the builder
          */
-        public static Builder newInstance(String id) {
-            return new Builder(id);
-        }
 
-        Builder(String id) {
-            if (id == null) {
-                throw new IllegalArgumentException("id must not be null");
-            }
-            this.id = id;
+        public BuilderBase(String id) {
+            super(id);
             pickupTimeWindows = new TimeWindowsImpl();
-            pickupTimeWindows.add(pickupTimeWindow);
             deliveryTimeWindows = new TimeWindowsImpl();
-            deliveryTimeWindows.add(deliveryTimeWindow);
         }
 
         /**
@@ -129,9 +96,10 @@ public static Builder newInstance(String id) {
          *            pickup location
          * @return builder
          */
-        public Builder setPickupLocation(Location pickupLocation) {
-            pickupLocation_ = pickupLocation;
-            return this;
+        @SuppressWarnings("unchecked")
+        public B setPickupLocation(Location pickupLocation) {
+            this.pickupLocation = pickupLocation;
+            return (B) this;
         }
 
         /**
@@ -148,12 +116,13 @@ public Builder setPickupLocation(Location pickupLocation) {
          * @throws IllegalArgumentException
          *             if servicTime < 0.0
          */
-        public Builder setPickupServiceTime(double serviceTime) {
+        @SuppressWarnings("unchecked")
+        public B setPickupServiceTime(double serviceTime) {
             if (serviceTime < 0.0) {
                 throw new IllegalArgumentException("serviceTime must not be < 0.0");
             }
             pickupServiceTime = serviceTime;
-            return this;
+            return (B) this;
         }
 
         /**
@@ -170,14 +139,14 @@ public Builder setPickupServiceTime(double serviceTime) {
          * @throws IllegalArgumentException
          *             if timeWindow is null
          */
-        public Builder setPickupTimeWindow(TimeWindow timeWindow) {
+        @SuppressWarnings("unchecked")
+        public B setPickupTimeWindow(TimeWindow timeWindow) {
             if (timeWindow == null) {
-                throw new IllegalArgumentException("delivery time-window must not be null");
+                throw new IllegalArgumentException("pickup time-window must not be null");
             }
-            pickupTimeWindow = timeWindow;
-            pickupTimeWindows = new TimeWindowsImpl();
+            pickupTimeWindows.clear();
             pickupTimeWindows.add(timeWindow);
-            return this;
+            return (B) this;
         }
 
 
@@ -189,9 +158,10 @@ public Builder setPickupTimeWindow(TimeWindow timeWindow) {
          *            delivery location
          * @return builder
          */
-        public Builder setDeliveryLocation(Location deliveryLocation) {
-            deliveryLocation_ = deliveryLocation;
-            return this;
+        @SuppressWarnings("unchecked")
+        public B setDeliveryLocation(Location deliveryLocation) {
+            this.deliveryLocation = deliveryLocation;
+            return (B) this;
         }
 
         /**
@@ -207,12 +177,13 @@ public Builder setDeliveryLocation(Location deliveryLocation) {
          * @throws IllegalArgumentException
          *             if serviceTime < 0.0
          */
-        public Builder setDeliveryServiceTime(double deliveryServiceTime) {
+        @SuppressWarnings("unchecked")
+        public B setDeliveryServiceTime(double deliveryServiceTime) {
             if (deliveryServiceTime < 0.0) {
                 throw new IllegalArgumentException("deliveryServiceTime must not be < 0.0");
             }
             this.deliveryServiceTime = deliveryServiceTime;
-            return this;
+            return (B) this;
         }
 
         /**
@@ -229,150 +200,64 @@ public Builder setDeliveryServiceTime(double deliveryServiceTime) {
          * @throws IllegalArgumentException
          *             if timeWindow is null
          */
-        public Builder setDeliveryTimeWindow(TimeWindow timeWindow) {
+        @SuppressWarnings("unchecked")
+        public B setDeliveryTimeWindow(TimeWindow timeWindow) {
             if (timeWindow == null) {
                 throw new IllegalArgumentException("delivery time-window must not be null");
             }
-            deliveryTimeWindow = timeWindow;
-            deliveryTimeWindows = new TimeWindowsImpl();
+            deliveryTimeWindows.clear();
             deliveryTimeWindows.add(timeWindow);
-            return this;
-        }
-
-        /**
-         * Adds capacity dimension.
-         *
-         * @param dimensionIndex
-         *            the dimension index of the corresponding capacity value
-         * @param dimensionValue
-         *            the capacity value
-         * @return builder
-         * @throws IllegalArgumentException
-         *             if dimVal < 0
-         */
-        public Builder addSizeDimension(int dimensionIndex, int dimensionValue) {
-            if (dimensionValue < 0) {
-                throw new IllegalArgumentException("capacity value cannot be negative");
-            }
-            capacityBuilder.addDimension(dimensionIndex, dimensionValue);
-            return this;
-        }
-
-        public Builder addRequiredSkill(String skill) {
-            skillBuilder.addSkill(skill);
-            return this;
+            return (B) this;
         }
 
-        public Builder setName(String name) {
-            this.name = name;
-            return this;
-        }
-
-        public Builder addDeliveryTimeWindow(TimeWindow timeWindow) {
+        @SuppressWarnings("unchecked")
+        public B addDeliveryTimeWindow(TimeWindow timeWindow) {
             if (timeWindow == null) {
                 throw new IllegalArgumentException("time-window arg must not be null");
             }
-            if (!deliveryTimeWindowAdded) {
-                deliveryTimeWindows = new TimeWindowsImpl();
-                deliveryTimeWindowAdded = true;
-            }
             deliveryTimeWindows.add(timeWindow);
-            return this;
+            return (B) this;
         }
 
-        public Builder addDeliveryTimeWindow(double earliest, double latest) {
+        @SuppressWarnings("unchecked")
+        public B addDeliveryTimeWindow(double earliest, double latest) {
             addDeliveryTimeWindow(TimeWindow.newInstance(earliest, latest));
-            return this;
+            return (B) this;
         }
 
-        public Builder addPickupTimeWindow(TimeWindow timeWindow) {
+        @SuppressWarnings("unchecked")
+        public B addPickupTimeWindow(TimeWindow timeWindow) {
             if (timeWindow == null) {
                 throw new IllegalArgumentException("time-window arg must not be null");
             }
-            if (!pickupTimeWindowAdded) {
-                pickupTimeWindows = new TimeWindowsImpl();
-                pickupTimeWindowAdded = true;
-            }
             pickupTimeWindows.add(timeWindow);
-            return this;
+            return (B) this;
         }
 
-        public Builder addPickupTimeWindow(double earliest, double latest) {
-            return addPickupTimeWindow(TimeWindow.newInstance(earliest, latest));
+        @SuppressWarnings("unchecked")
+        public B addPickupTimeWindow(double earliest, double latest) {
+            addPickupTimeWindow(TimeWindow.newInstance(earliest, latest));
+            return (B) this;
         }
 
-        /**
-         * Set priority to shipment. Only 1 = high priority, 2 = medium and 3 =
-         * low are allowed.
-         * <p>
-         * Default is 2 = medium.
-         *
-         * @param priority
-         * @return builder
-         */
-        public Builder setPriority(int priority) {
-            if (priority < 1 || priority > 3) {
-                throw new IllegalArgumentException("incorrect priority. only 1 = high, 2 = medium and 3 = low is allowed");
-            }
-            this.priority = priority;
-            return this;
-        }
-
-
-        /**
-         * Builds a shipment.
-         *
-         * <p>
-         * The implementation of the builder <b>may</b> call the function {@linkplain #preProcess()} prior creating the
-         * instant and <b>MUST</b> call the {@linkplain #postProcess(Service)} method after the instance is constructed:
-         *
-         * <pre>
-         *    &#64;Override
-         *    public {@link Shipment} build() {
-         *        [...]
-         *        preProcess();
-         *        Shipment shipment= new Service(this);
-         *        postProcess(shipment);
-         *        return shipment;
-         *    }
-         * </pre>
-         *
-         * </p>
-         *
-         * @return shipment
-         * @throws IllegalArgumentException
-         *             if neither pickup-location nor pickup-coord is set or if neither delivery-location nor
-         *             delivery-coord is set
-         */
-        public Shipment build() {
-            if (pickupLocation_ == null) {
+        @Override
+        protected void validate() {
+            if (pickupLocation == null) {
                 throw new IllegalArgumentException("pickup location is missing");
             }
-            if (deliveryLocation_ == null) {
+            if (deliveryLocation == null) {
                 throw new IllegalArgumentException("delivery location is missing");
             }
-            preProcess();
-            Shipment shipment = new Shipment(this);
-            postProcess(shipment);
-            return shipment;
-        }
-
-        protected void preProcess() {
-            capacity = capacityBuilder.build();
-            skills = skillBuilder.build();
-        }
-
-        protected <T extends Shipment> void postProcess(T shipment) {
-            shipment.createActivities(this);
+            if (pickupTimeWindows.isEmpty()) {
+                pickupTimeWindows.add(new TimeWindow(0, Double.MAX_VALUE));
+            }
+            if (deliveryTimeWindows.isEmpty()) {
+                deliveryTimeWindows.add(new TimeWindow(0, Double.MAX_VALUE));
+            }
         }
 
-
         // ---- Refactor test
 
-        public String getId() {
-            return id;
-        }
-
         public double getPickupServiceTime() {
             return pickupServiceTime;
         }
@@ -381,165 +266,65 @@ public double getDeliveryServiceTime() {
             return deliveryServiceTime;
         }
 
-        public TimeWindow getDeliveryTimeWindow() {
-            return deliveryTimeWindow;
-        }
-
-        public TimeWindow getPickupTimeWindow() {
-            return pickupTimeWindow;
-        }
-
-        public Capacity.Builder getCapacityBuilder() {
-            return capacityBuilder;
-        }
-
-        public Capacity getCapacity() {
-            return capacity;
-        }
-
-        public Skills.Builder getSkillBuilder() {
-            return skillBuilder;
-        }
-
-        public Skills getSkills() {
-            return skills;
-        }
-
-        public String getName() {
-            return name;
-        }
-
         public Location getPickupLocation() {
-            return pickupLocation_;
+            return pickupLocation;
         }
 
         public Location getDeliveryLocation() {
-            return deliveryLocation_;
+            return deliveryLocation;
         }
 
         public TimeWindowsImpl getDeliveryTimeWindows() {
             return deliveryTimeWindows;
         }
 
-        public boolean isDeliveryTimeWindowAdded() {
-            return deliveryTimeWindowAdded;
-        }
-
-        public boolean isPickupTimeWindowAdded() {
-            return pickupTimeWindowAdded;
-        }
-
         public TimeWindowsImpl getPickupTimeWindows() {
             return pickupTimeWindows;
         }
 
-        public int getPriority() {
-            return priority;
-        }
-
-
-
     }
 
-    private final String id;
+    public static final class Builder extends BuilderBase<Shipment, Builder> {
 
-    private final Skills skills;
+        public static Builder newInstance(String id) {
+            return new Builder(id);
+        }
 
-    private final String name;
+        public Builder(String id) {
+            super(id);
+        }
 
-    private final int priority;
+        @Override
+        protected Shipment createInstance() {
+            return new Shipment(this);
+        }
 
-    Shipment(Builder builder) {
-        id = builder.id;
-        skills = builder.skills;
-        name = builder.name;
-        priority = builder.priority;
     }
 
 
-    @Override
-    protected void createActivities() {
+    Shipment(BuilderBase<? extends Shipment, ?> builder) {
+        super(builder);
     }
 
-    protected void createActivities(Builder builder) {
+
+    @Override
+    protected void createActivities(JobBuilder<?, ?> builder) {
+        Builder shipmentBuilder = (Builder) builder;
         JobActivityList list = new SequentialJobActivityList(this);
         // TODO - Balage1551
         //      list.addActivity(new PickupActivityNEW(this, "pickup", getPickupLocation(), getPickupServiceTime(), getSize()));
         //      list.addActivity(new PickupActivityNEW(this, "delivery", getDeliveryLocation(), getDeliveryServiceTime(), getSize()));
-        list.addActivity(new PickupShipmentDEPRECATED(this, builder));
-        list.addActivity(new DeliverShipmentDEPRECATED(this, builder));
+        list.addActivity(new PickupShipmentDEPRECATED(this, shipmentBuilder));
+        list.addActivity(new DeliverShipmentDEPRECATED(this, shipmentBuilder));
         setActivities(list);
     }
 
-    @Override
-    public String getId() {
-        return id;
-    }
-    @Override
-    public int hashCode() {
-        final int prime = 31;
-        int result = 1;
-        result = prime * result + ((id == null) ? 0 : id.hashCode());
-        return result;
-    }
-
-    /**
-     * Two shipments are equal if they have the same id.
-     *
-     * @return true if shipments are equal (have the same id)
-     */
-    @Override
-    public boolean equals(Object obj) {
-        if (this == obj) {
-            return true;
-        }
-        if (obj == null) {
-            return false;
-        }
-        if (getClass() != obj.getClass()) {
-            return false;
-        }
-        Shipment other = (Shipment) obj;
-        if (id == null) {
-            if (other.id != null) {
-                return false;
-            }
-        } else if (!id.equals(other.id)) {
-            return false;
-        }
-        return true;
-    }
-
-
-    @Override
-    public Skills getRequiredSkills() {
-        return skills;
-    }
-
-    @Override
-    public String getName() {
-        return name;
-    }
-
-    /**
-     * Get priority of shipment. Only 1 = high priority, 2 = medium and 3 = low
-     * are allowed.
-     * <p>
-     * Default is 2 = medium.
-     *
-     * @return priority
-     */
-    @Override
-    public int getPriority() {
-        return priority;
-    }
 
     @Override
     public Location getStartLocation() {
         return getPickupActivity().getLocation();
     }
 
-
     @Override
     public Location getEndLocation() {
         return getDeliveryActivity().getLocation();
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivity.java
index 2d9a50b8f..299a5aaad 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivity.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivity.java
@@ -17,27 +17,34 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
+import java.util.Collection;
+
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.job.AbstractJob;
 import com.graphhopper.jsprit.core.problem.job.Break;
+import com.graphhopper.jsprit.core.problem.job.Break.Builder;
 
 public class BreakActivity extends InternalJobActivity {
 
-    public static BreakActivity newInstance(Break aBreak) {
-        return new BreakActivity(aBreak);
+    public static BreakActivity newInstance(Break aBreak, Builder builder) {
+        return new BreakActivity(aBreak, "break", builder.getLocation(), builder.getServiceTime(),
+                        builder.getCapacity(), builder.getTimeWindows().getTimeWindows());
     }
 
-    protected BreakActivity(Break aBreak) {
-        super(aBreak, "Break", aBreak.getLocation(), aBreak.getServiceDuration(),
-                        Capacity.createNullCapacity(aBreak.getSize()), aBreak.getTimeWindows());
-    }
+    // protected BreakActivity(Break aBreak) {
+    // super(aBreak, "Break", aBreak.getLocation(), aBreak.getServiceDuration(),
+    // Capacity.createNullCapacity(aBreak.getSize()), aBreak.getTimeWindows());
+    // }
 
     public BreakActivity(BreakActivity breakActivity) {
         super(breakActivity);
     }
 
-
-
+    private BreakActivity(AbstractJob job, String name, Location location, double operationTime,
+                    Capacity capacity, Collection<TimeWindow> timeWindows) {
+        super(job, name, location, operationTime, capacity, timeWindows);
+    }
 
     @Override
     public Break getJob() {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverServiceDEPRECATED.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverServiceDEPRECATED.java
index 4480be0da..ad2f90e9f 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverServiceDEPRECATED.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverServiceDEPRECATED.java
@@ -19,9 +19,18 @@
 
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.job.Delivery;
+import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.Service.BuilderBase;
 
 public final class DeliverServiceDEPRECATED extends DeliveryActivityNEW {
 
+    public DeliverServiceDEPRECATED(Service service, BuilderBase<? extends Service, ?> builder) {
+        super(service, builder.getType(), builder.getLocation(),
+                        builder.getServiceTime(),
+                        Capacity.invert(builder.getCapacity()),
+                        builder.getTimeWindows().getTimeWindows());
+    }
+
     public DeliverServiceDEPRECATED(Delivery delivery) {
         super(delivery, delivery.getType(), delivery.getLocation(), delivery.getServiceDuration(),
                         Capacity.invert(delivery.getSize()), delivery.getServiceTimeWindows());
@@ -32,6 +41,7 @@ public DeliverServiceDEPRECATED(DeliverServiceDEPRECATED sourceActivity) {
     }
 
 
+
     @Override
     public Delivery getJob() {
         return (Delivery) super.getJob();
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverShipmentDEPRECATED.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverShipmentDEPRECATED.java
index 2e158a4cd..2c0e71365 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverShipmentDEPRECATED.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverShipmentDEPRECATED.java
@@ -19,13 +19,14 @@
 
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
-import com.graphhopper.jsprit.core.problem.job.Shipment.Builder;
+import com.graphhopper.jsprit.core.problem.job.Shipment.BuilderBase;
 
 public final class DeliverShipmentDEPRECATED extends DeliveryActivityNEW {
 
     public static final String NAME = "deliverShipment";
 
-    public DeliverShipmentDEPRECATED(Shipment shipment, Builder builder) {
+    public DeliverShipmentDEPRECATED(Shipment shipment,
+                    BuilderBase<? extends Shipment, ?> builder) {
         super(shipment, NAME, builder.getDeliveryLocation(), builder.getDeliveryServiceTime(),
                         Capacity.invert(builder.getCapacity()),
                         builder.getDeliveryTimeWindows().getTimeWindows());
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupServiceDEPRECATED.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupServiceDEPRECATED.java
index 4cd852970..eeeec1bc9 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupServiceDEPRECATED.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupServiceDEPRECATED.java
@@ -21,17 +21,26 @@
 
 public final class PickupServiceDEPRECATED extends PickupActivityNEW {
 
-
-    public PickupServiceDEPRECATED(Service service) {
-        super(service, service.getType(), service.getLocation(), service.getServiceDuration(),
-                        service.getSize(), service.getServiceTimeWindows());
+    public PickupServiceDEPRECATED(Service service,
+                    Service.BuilderBase<? extends Service, ?> builder) {
+        super(service, builder.getType(), builder.getLocation(),
+                        builder.getServiceTime(),
+                        builder.getCapacity(),
+                        builder.getTimeWindows().getTimeWindows());
     }
 
 
+
     public PickupServiceDEPRECATED(PickupServiceDEPRECATED sourceActivity) {
         super(sourceActivity);
     }
 
+    @Deprecated
+    public PickupServiceDEPRECATED(Service service) {
+        super(service, service.getType(), service.getLocation(), service.getServiceDuration(),
+                        service.getSize(), service.getServiceTimeWindows());
+    }
+
 
 
     @Override
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupShipmentDEPRECATED.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupShipmentDEPRECATED.java
index 179be8de0..4e66b1a54 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupShipmentDEPRECATED.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupShipmentDEPRECATED.java
@@ -18,13 +18,13 @@
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
 import com.graphhopper.jsprit.core.problem.job.Shipment;
-import com.graphhopper.jsprit.core.problem.job.Shipment.Builder;
+import com.graphhopper.jsprit.core.problem.job.Shipment.BuilderBase;
 
 public final class PickupShipmentDEPRECATED extends PickupActivityNEW{
 
     public static final String NAME = "pickupShipment";
 
-    public PickupShipmentDEPRECATED(Shipment shipment, Builder builder) {
+    public PickupShipmentDEPRECATED(Shipment shipment, BuilderBase<? extends Shipment, ?> builder) {
         super(shipment, NAME, builder.getPickupLocation(),
                         builder.getPickupServiceTime(), builder.getCapacity(),
                         builder.getPickupTimeWindows().getTimeWindows());
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TimeWindowsImpl.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TimeWindowsImpl.java
index 25e5a5785..a407438ed 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TimeWindowsImpl.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TimeWindowsImpl.java
@@ -44,8 +44,17 @@ public void add(TimeWindow timeWindow){
         timeWindows.add(timeWindow);
     }
 
+    @Override
     public Collection<TimeWindow> getTimeWindows() {
         return Collections.unmodifiableCollection(timeWindows);
     }
 
+    public void clear() {
+        timeWindows.clear();
+    }
+
+    public boolean isEmpty() {
+        return timeWindows.isEmpty();
+    }
+
 }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/StateManagerTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/StateManagerTest.java
index 6e831a79c..134bf93b2 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/StateManagerTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/StateManagerTest.java
@@ -60,7 +60,10 @@
     }
 
     private VehicleRoute getRoute(Vehicle vehicle) {
-        return VehicleRoute.Builder.newInstance(vehicle).setJobActivityFactory(new ActFac()).addService(new Service.Builder("s").setLocation(Location.newInstance("loc")).build()).build();
+        return VehicleRoute.Builder.newInstance(vehicle).setJobActivityFactory(new ActFac())
+                        .addService(new Service.Builder("s")
+                                        .setLocation(Location.newInstance("loc")).build())
+                        .build();
     }
 
     private VehicleRoutingProblem vrpMock;
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivityTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivityTest.java
index ca173c79d..68c7ef586 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivityTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivityTest.java
@@ -26,6 +26,7 @@
 
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.job.Break;
+import com.graphhopper.jsprit.core.problem.job.Break.Builder;
 import com.graphhopper.jsprit.core.problem.job.Service;
 
 
@@ -37,9 +38,10 @@
 
     @Before
     public void doBefore() {
-        service = new Break.Builder("service")
-            .setTimeWindow(TimeWindow.newInstance(1., 2.)).setServiceTime(3).build();
-        serviceActivity = BreakActivity.newInstance(service);
+        Builder breakBuilder = new Break.Builder("service")
+                        .setTimeWindow(TimeWindow.newInstance(1., 2.)).setServiceTime(3);
+        service = breakBuilder.build();
+        serviceActivity = BreakActivity.newInstance(service, breakBuilder);
         serviceActivity.setTheoreticalEarliestOperationStartTime(service.getTimeWindow().getStart());
         serviceActivity.setTheoreticalLatestOperationStartTime(service.getTimeWindow().getEnd());
     }
@@ -51,7 +53,7 @@ public void whenCallingCapacity_itShouldReturnCorrectCapacity() {
 
     @Test
     public void hasVariableLocationShouldBeTrue() {
-        Break aBreak = (Break) serviceActivity.getJob();
+        Break aBreak = serviceActivity.getJob();
         assertTrue(aBreak.hasVariableLocation());
     }
 
diff --git a/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLReader.java b/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLReader.java
index 4c350af26..47ccf57ea 100644
--- a/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLReader.java
+++ b/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLReader.java
@@ -62,13 +62,13 @@
 public class VrpXMLReader {
 
     public interface ServiceBuilderFactory {
-        Service.ServiceBuilderBase<?> createBuilder(String serviceType, String id, Integer size);
+        Service.BuilderBase<?, ?> createBuilder(String serviceType, String id, Integer size);
     }
 
     static class DefaultServiceBuilderFactory implements ServiceBuilderFactory {
 
         @Override
-        public Service.ServiceBuilderBase<?> createBuilder(String serviceType, String id, Integer size) {
+        public Service.BuilderBase<?, ?> createBuilder(String serviceType, String id, Integer size) {
             if (serviceType.equals("pickup")) {
                 if (size != null) {
                     return new Pickup.Builder(id).addSizeDimension(0, size);
@@ -579,7 +579,7 @@ private void readServices(XMLConfiguration vrpProblem) {
                         "either use capacity or capacity-dimension, not both. prefer the use of 'capacity-dimensions' over 'capacity'.");
             }
 
-            Service.ServiceBuilderBase<?> builder;
+            Service.BuilderBase<?, ?> builder;
             if (capacityString != null) {
                 builder = serviceBuilderFactory.createBuilder(type, id, Integer.parseInt(capacityString));
             } else {
