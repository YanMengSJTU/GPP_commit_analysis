diff --git a/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/Plotter.java b/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/Plotter.java
index 2124fb02e..2a56fe51a 100644
--- a/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/Plotter.java
+++ b/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/Plotter.java
@@ -27,6 +27,7 @@
 import com.graphhopper.jsprit.core.util.Coordinate;
 import org.jfree.chart.*;
 import org.jfree.chart.axis.NumberAxis;
+import org.jfree.chart.axis.ValueAxis;
 import org.jfree.chart.labels.XYItemLabelGenerator;
 import org.jfree.chart.plot.XYPlot;
 import org.jfree.chart.renderer.xy.XYItemRenderer;
@@ -42,6 +43,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import javax.imageio.ImageIO;
 import java.awt.*;
 import java.awt.geom.Ellipse2D;
 import java.awt.image.BufferedImage;
@@ -300,14 +302,30 @@ private BufferedImage plot(VehicleRoutingProblem vrp, final Collection<VehicleRo
             return null;
         }
         final XYPlot plot = createPlot(problem, shipments, solution);
-        JFreeChart chart = new JFreeChart(title, plot);
+        JFreeChart chart = new JFreeChart(plot);
 
         LegendTitle legend = createLegend(routes, shipments, plot);
         chart.removeLegend();
-        chart.addLegend(legend);
+        //chart.addLegend(legend);
+        chart.getXYPlot().setDomainGridlinesVisible(false);
+        chart.getXYPlot().setRangeGridlinesVisible(false);
+        ValueAxis domain = chart.getXYPlot().getDomainAxis();
+        domain.setVisible(false);
+        ValueAxis domain2 = chart.getXYPlot().getRangeAxis();
+        domain2.setVisible(false);
+        Color trans = new Color(0xFF, 0xFF, 0xFF, 0);
+        chart.getPlot().setBackgroundPaint( trans );
+
+
+        try {
+            BufferedImage icon = ImageIO.read(new File("/home/ai6644/Malmo/Tools/DRTsim/data/osm.png"));
+
+          chart.setBackgroundImage(icon);
+        }
+        catch (IOException e){};
 
         save(chart, pngFile);
-        return chart.createBufferedImage(1024, 1024);
+        return chart.createBufferedImage(3000, 2000);
 
     }
 
@@ -454,7 +472,7 @@ private XYItemRenderer getRouteRenderer(XYSeriesCollection solutionColl) {
 
     private void save(JFreeChart chart, String pngFile) {
         try {
-            ChartUtilities.saveChartAsPNG(new File(pngFile), chart, 1000, 600);
+            ChartUtilities.saveChartAsPNG(new File(pngFile), chart, 3000, 2000);
         } catch (IOException e) {
             log.error("cannot plot");
             log.error(e.toString());
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java
index 35878ade9..7f99071b1 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java
@@ -26,6 +26,8 @@
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 
+import java.io.FileWriter;
+import java.io.IOException;
 import java.io.PrintWriter;
 import java.util.ArrayList;
 import java.util.Collections;
@@ -40,7 +42,16 @@
 public class SolutionPrinter {
 
     // Wrapping System.out into a PrintWriter
-    private static final PrintWriter SYSTEM_OUT_AS_PRINT_WRITER = new PrintWriter(System.out);
+    private static PrintWriter SYSTEM_OUT_AS_PRINT_WRITER;
+
+    static {
+        try {
+//          TODO: output file is hardcoded
+            SYSTEM_OUT_AS_PRINT_WRITER = new PrintWriter((new FileWriter("output/log", true)));
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+    }
 
     /**
      * Enum to indicate verbose-level.
diff --git a/jsprit-examples/input/refuseCollectionExample_Quantities b/jsprit-examples/input/RefuseCollectionExample_Quantities
similarity index 100%
rename from jsprit-examples/input/refuseCollectionExample_Quantities
rename to jsprit-examples/input/RefuseCollectionExample_Quantities
diff --git a/jsprit-examples/pom.xml b/jsprit-examples/pom.xml
index 11a1b637f..6576796f6 100644
--- a/jsprit-examples/pom.xml
+++ b/jsprit-examples/pom.xml
@@ -25,6 +25,18 @@
     <modelVersion>4.0.0</modelVersion>
 
     <artifactId>jsprit-examples</artifactId>
+    <build>
+        <plugins>
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-compiler-plugin</artifactId>
+                <configuration>
+                    <source>8</source>
+                    <target>8</target>
+                </configuration>
+            </plugin>
+        </plugins>
+    </build>
 
 
     <dependencies>
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/DRT_test.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/DRT_test.java
new file mode 100644
index 000000000..33a240ff9
--- /dev/null
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/DRT_test.java
@@ -0,0 +1,140 @@
+package com.graphhopper.jsprit.examples;
+
+import com.graphhopper.jsprit.analysis.toolbox.GraphStreamViewer;
+import com.graphhopper.jsprit.core.algorithm.VehicleRoutingAlgorithm;
+import com.graphhopper.jsprit.core.algorithm.box.GreedySchrimpfFactory;
+import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
+import com.graphhopper.jsprit.core.algorithm.state.StateManager;
+import com.graphhopper.jsprit.core.algorithm.termination.IterationWithoutImprovementTermination;
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
+import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
+import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
+import com.graphhopper.jsprit.core.problem.job.Break;
+import com.graphhopper.jsprit.core.problem.job.Job;
+import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
+import com.graphhopper.jsprit.core.reporting.SolutionPrinter;
+import com.graphhopper.jsprit.core.util.Coordinate;
+import com.graphhopper.jsprit.core.util.FastVehicleRoutingTransportCostsMatrix;
+import com.graphhopper.jsprit.core.util.Solutions;
+import com.graphhopper.jsprit.io.algorithm.AlgorithmConfigXmlReader;
+import com.graphhopper.jsprit.io.problem.VrpXMLReader;
+import com.graphhopper.jsprit.io.problem.VrpXMLWriter;
+import com.graphhopper.jsprit.util.Examples;
+import com.graphhopper.jsprit.analysis.toolbox.Plotter;
+import com.graphhopper.jsprit.io.algorithm.VehicleRoutingAlgorithms;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import java.text.SimpleDateFormat;
+
+
+import javax.xml.stream.XMLOutputFactory;
+import java.util.*;
+import java.io.BufferedReader;
+import java.io.File;
+import java.io.FileReader;
+import java.io.IOException;
+import java.util.stream.Collectors;
+
+public class DRT_test {
+
+    private final static Logger logger = LoggerFactory.getLogger(VehicleRoutingAlgorithm.class);
+
+    public static void main(String[] args) throws IOException {
+        Examples.createOutputFolder();
+
+        VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
+        vrpBuilder.setFleetSize(FleetSize.FINITE);
+
+//      The input problem. Yes, it is hardcoded.
+        new VrpXMLReader(vrpBuilder).read("/home/ai6644/Malmo/Tools/DRTsim/data/vrp.xml");
+
+//      Calculate the size of time-distance matrix from an input vrp file.
+        Set<Integer> ints = vrpBuilder.getLocationMap().keySet().stream()
+            .map(s -> Integer.parseInt(s))
+            .collect(Collectors.toSet());
+        int tdm_size = java.util.Collections.max(ints)+1;
+
+//      Read time-distance matrix from an input csv.
+//        Input csv file location is hardcoded.
+        FastVehicleRoutingTransportCostsMatrix.Builder matrixBuilder = FastVehicleRoutingTransportCostsMatrix.Builder
+            .newInstance(tdm_size, false);
+        initMatrix(matrixBuilder, tdm_size);
+        readDistances(matrixBuilder);
+
+        vrpBuilder.setRoutingCost(matrixBuilder.build());
+
+        VehicleRoutingProblem vrp = vrpBuilder.build();
+
+        Jsprit.Builder algorithmBuilder = Jsprit.Builder.newInstance(vrp);
+        algorithmBuilder.setProperty(Jsprit.Parameter.MAX_TRANSPORT_COSTS, Double.toString(1.0E8));
+        VehicleRoutingAlgorithm algorithm = algorithmBuilder.buildAlgorithm();
+        algorithm.setPrematureAlgorithmTermination(new IterationWithoutImprovementTermination(5));
+        algorithm.setMaxIterations(20);
+
+        Collection<VehicleRoutingProblemSolution> solutions = algorithm.searchSolutions();
+
+        SolutionPrinter.print(Solutions.bestOf(solutions));
+
+        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yymmdd-hhmmss");
+        simpleDateFormat.format( new Date() );
+        new Plotter(vrp, Solutions.bestOf(solutions))
+            .plotShipments(true)
+            .setBoundingBox(13.535156, 55.553495, 13.930664, 55.702355)
+            .setScalingFactor(1)
+            .setLabel(Plotter.Label.ID)
+            .plot("/home/ai6644/Malmo/Tools/DRTsim/pictures/" + simpleDateFormat.format( new Date() ) + ".png", "DRT");
+
+        List<VehicleRoutingProblemSolution> l = new ArrayList<>();
+        l.add(Solutions.bestOf(solutions));
+        new VrpXMLWriter(vrp, l).write("/home/ai6644/Malmo/Tools/DRTsim/data/problem-with-solution.xml");
+
+        SolutionPrinter.print(vrp, Solutions.bestOf(solutions), SolutionPrinter.Print.VERBOSE);
+
+//        new GraphStreamViewer(vrp, Solutions.bestOf(solutions))
+//            .labelWith(GraphStreamViewer.Label.ID).setRenderShipments(true).setRenderDelay(200)
+//            .setGraphStreamFrameScalingFactor(3)
+//            .display();
+    }
+
+    /**
+     * Read time distance matrix from csv.
+     */
+    private static void readDistances(FastVehicleRoutingTransportCostsMatrix.Builder matrixBuilder) throws IOException {
+        BufferedReader reader = new BufferedReader(new FileReader(new File("/home/ai6644/Malmo/Tools/DRTsim/data/time_distance_matrix.csv")));
+        String line;
+        while ((line = reader.readLine()) != null) {
+            String[] lineTokens = line.split(",");
+            matrixBuilder.addTransportTimeAndDistance(
+                Integer.parseInt(lineTokens[0]),
+                Integer.parseInt(lineTokens[1]),
+                Double.parseDouble(lineTokens[2]),
+                Double.parseDouble(lineTokens[3])
+            );
+        }
+        reader.close();
+    }
+
+    /**
+     * Initiates a cost matrix with maxInt values. Viable routs should be rewritten from an input csv.
+     * Moving from a point to itself has zero cost.
+     */
+    private static void initMatrix(FastVehicleRoutingTransportCostsMatrix.Builder matrixBuilder, int tdm_size){
+        for (int i = 0; i < tdm_size; i++){
+            for (int j = 0; j < tdm_size; j++) {
+                if (i == j){
+                    matrixBuilder.addTransportTimeAndDistance(i, j, 0, 0);
+                }
+                else {
+                    matrixBuilder.addTransportTimeAndDistance(i, j, Double.MAX_VALUE, Double.MAX_VALUE);
+                }
+            }
+        }
+    }
+}
diff --git a/jsprit-examples/src/main/resources/log4j2.xml b/jsprit-examples/src/main/resources/log4j2.xml
index ee2596f27..030c799cc 100644
--- a/jsprit-examples/src/main/resources/log4j2.xml
+++ b/jsprit-examples/src/main/resources/log4j2.xml
@@ -17,15 +17,24 @@
   ~ limitations under the License.
   -->
 
-<Configuration>
+<Configuration >
+
     <Appenders>
-        <Console name="STDOUT" target="SYSTEM_OUT">
-            <PatternLayout pattern="%d %-5p [%t] %C{2} - %m%n"/>
+            <File name="File" fileName="output/log">
+                <PatternLayout   pattern="[%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %c{1} - %msg%n" />
+            </File>
+
+
+        <Console name="console" target="SYSTEM_OUT">
+            <PatternLayout   pattern="[%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %c{1} - %msg%n" />
         </Console>
     </Appenders>
     <Loggers>
-        <Root level="info">
-            <AppenderRef ref="STDOUT"/>
+        <Logger name="jsprit" level="debug" additivity="true">
+            <appender-ref ref="File" level="debug" />
+        </Logger>
+        <Root level="warn" additivity="false">
+            <appender-ref ref="console" />
         </Root>
     </Loggers>
 </Configuration>
