diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/MaxDistanceConstraint.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/MaxDistanceConstraint.java
index 96c752a5c..d3fd0b8c7 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/MaxDistanceConstraint.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/MaxDistanceConstraint.java
@@ -18,18 +18,18 @@
 
 package com.graphhopper.jsprit.core.problem.constraint;
 
+import java.util.Collection;
+import java.util.Map;
+
 import com.graphhopper.jsprit.core.algorithm.state.StateId;
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.problem.cost.TransportDistance;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverShipment;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverShipmentDEPRECATED;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.End;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 
-import java.util.Collection;
-import java.util.Map;
-
 /**
  * Created by schroeder on 11/10/16.
  */
@@ -61,14 +61,18 @@ private void makeArray(Map<Vehicle, Double> maxDistances) {
     private int getMaxIndex(Collection<Vehicle> vehicles) {
         int index = 0;
         for(Vehicle v : vehicles){
-            if(v.getIndex() > index) index = v.getIndex();
+            if(v.getIndex() > index) {
+                index = v.getIndex();
+            }
         }
         return index;
     }
 
     @Override
     public ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prevAct, TourActivity newAct, TourActivity nextAct, double prevActDepTime) {
-        if(!hasMaxDistance(iFacts.getNewVehicle())) return ConstraintsStatus.FULFILLED;
+        if(!hasMaxDistance(iFacts.getNewVehicle())) {
+            return ConstraintsStatus.FULFILLED;
+        }
         Double currentDistance = 0d;
         if(!iFacts.getRoute().isEmpty()){
             currentDistance = stateManager.getRouteState(iFacts.getRoute(),iFacts.getNewVehicle(), distanceId,Double.class);
@@ -84,20 +88,24 @@ public ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prev
         }
 
         double additionalDistanceOfPickup = 0;
-        if(newAct instanceof DeliverShipment){
+        if (newAct instanceof DeliverShipmentDEPRECATED) {
             int iIndexOfPickup = iFacts.getRelatedActivityContext().getInsertionIndex();
             TourActivity pickup = iFacts.getAssociatedActivities().get(0);
             TourActivity actBeforePickup;
-            if(iIndexOfPickup > 0) actBeforePickup = iFacts.getRoute().getActivities().get(iIndexOfPickup-1);
-            else actBeforePickup = iFacts.getRoute().getStart();
+            if(iIndexOfPickup > 0) {
+                actBeforePickup = iFacts.getRoute().getActivities().get(iIndexOfPickup-1);
+            } else {
+                actBeforePickup = iFacts.getRoute().getStart();
+            }
 
             TourActivity actAfterPickup;
             boolean associatedPickAndDeliveryAreDirectNeighbors = prevAct.getIndex() == pickup.getIndex();
             if(associatedPickAndDeliveryAreDirectNeighbors){
                 actAfterPickup = newAct;
                 distancePrevAct2NextAct = distanceCalculator.getDistance(prevAct.getLocation(), nextAct.getLocation(), iFacts.getRelatedActivityContext().getEndTime(), iFacts.getNewVehicle());
+            } else {
+                actAfterPickup = iFacts.getRoute().getActivities().get(iIndexOfPickup);
             }
-            else actAfterPickup = iFacts.getRoute().getActivities().get(iIndexOfPickup);
             double distanceActBeforePickup2Pickup = distanceCalculator.getDistance(actBeforePickup.getLocation(), pickup.getLocation(), actBeforePickup.getEndTime(), iFacts.getNewVehicle());
             double distancePickup2ActAfterPickup = distanceCalculator.getDistance(pickup.getLocation(), actAfterPickup.getLocation(), iFacts.getRelatedActivityContext().getEndTime(), iFacts.getNewVehicle());
 
@@ -112,7 +120,9 @@ public ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prev
         }
 
         double additionalDistance = distancePrevAct2NewAct + distanceNewAct2nextAct - distancePrevAct2NextAct;
-        if(currentDistance + additionalDistance > maxDistance) return ConstraintsStatus.NOT_FULFILLED;
+        if(currentDistance + additionalDistance > maxDistance) {
+            return ConstraintsStatus.NOT_FULFILLED;
+        }
 
         if(currentDistance + additionalDistance + additionalDistanceOfPickup > maxDistance){
             return ConstraintsStatus.NOT_FULFILLED;
@@ -122,12 +132,14 @@ public ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prev
     }
 
     private boolean hasMaxDistance(Vehicle newVehicle){
-        return this.maxDistances[newVehicle.getIndex()] != null;
+        return maxDistances[newVehicle.getIndex()] != null;
     }
 
     private double getMaxDistance(Vehicle newVehicle) {
-        Double maxDistance = this.maxDistances[newVehicle.getIndex()];
-        if(maxDistance == null) return Double.MAX_VALUE;
+        Double maxDistance = maxDistances[newVehicle.getIndex()];
+        if(maxDistance == null) {
+            return Double.MAX_VALUE;
+        }
         return maxDistance;
     }
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Delivery.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Delivery.java
index 3a7f10b33..e78279225 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Delivery.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Delivery.java
@@ -51,6 +51,10 @@ public Delivery build() {
             postProcess(delivery);
             return delivery;
         }
+
+        public static Builder newInstance(String id) {
+            return new Builder(id);
+        }
     }
 
     Delivery(Builder builder) {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Pickup.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Pickup.java
index 8353768dd..d17aa39ab 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Pickup.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Pickup.java
@@ -53,6 +53,10 @@ public Pickup build() {
             return pickup;
         }
 
+        public static Builder newInstance(String id) {
+            return new Builder(id);
+        }
+
     }
 
     Pickup(Builder builder) {
