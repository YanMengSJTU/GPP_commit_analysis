diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/SizeDimensionTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/SizeDimensionTest.java
index 13f22c0c8..cb8595cd0 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/SizeDimensionTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/SizeDimensionTest.java
@@ -17,17 +17,51 @@
  */
 package com.graphhopper.jsprit.core.problem;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
+import org.junit.Assert;
+import org.junit.Test;
 
 import java.util.Random;
 
-import org.junit.Assert;
-import org.junit.Test;
+import static org.junit.Assert.*;
 
 public class SizeDimensionTest {
 
+    @Test
+    public void signShouldBePositive() {
+        SizeDimension sd = SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 2).build();
+        Assert.assertTrue(sd.sign().equals(SizeDimension.SizeDimensionSign.POSITIVE));
+    }
+
+    @Test
+    public void signShouldBePositive2() {
+        SizeDimension sd = SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 0).build();
+        Assert.assertTrue(sd.sign().equals(SizeDimension.SizeDimensionSign.POSITIVE));
+    }
+
+    @Test
+    public void signShouldBeNegative() {
+        SizeDimension sd = SizeDimension.Builder.newInstance().addDimension(0, -1).addDimension(1, -2).build();
+        Assert.assertTrue(sd.sign().equals(SizeDimension.SizeDimensionSign.NEGATIVE));
+    }
+
+    @Test
+    public void signShouldBeNegative2() {
+        SizeDimension sd = SizeDimension.Builder.newInstance().addDimension(0, 0).addDimension(1, -2).build();
+        Assert.assertTrue(sd.sign().equals(SizeDimension.SizeDimensionSign.NEGATIVE));
+    }
+
+    @Test
+    public void signShouldBeMixed() {
+        SizeDimension sd = SizeDimension.Builder.newInstance().addDimension(0, -1).addDimension(1, 2).build();
+        Assert.assertTrue(sd.sign().equals(SizeDimension.SizeDimensionSign.MIXED));
+    }
+
+    @Test
+    public void signShouldBeZero() {
+        SizeDimension sd = SizeDimension.Builder.newInstance().addDimension(0, 0).addDimension(1, 0).build();
+        Assert.assertTrue(sd.sign().equals(SizeDimension.SizeDimensionSign.ZERO));
+    }
+
     @Test
     public void getNegativeShouldReturnCorrectCapacity() {
         SizeDimension cap = SizeDimension.Builder.newInstance().addDimension(0, 2).addDimension(1, -3).build();
