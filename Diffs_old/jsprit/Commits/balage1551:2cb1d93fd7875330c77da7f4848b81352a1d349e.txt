diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BreakInsertionCalculator.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BreakInsertionCalculator.java
index a37295657..b982d608c 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BreakInsertionCalculator.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BreakInsertionCalculator.java
@@ -102,12 +102,10 @@ public String toString() {
     @Override
     public InsertionData getInsertionData(final VehicleRoute currentRoute, final Job jobToInsert, final Vehicle newVehicle, double newVehicleDepartureTime, final Driver newDriver, final double bestKnownCosts) {
         Break breakToInsert = (Break) jobToInsert;
-        if (newVehicle.getBreak() == null || newVehicle.getBreak() != breakToInsert) {
+        if (newVehicle.getBreak() == null || newVehicle.getBreak() != breakToInsert)
             return InsertionData.createEmptyInsertionData();
-        }
-        if (currentRoute.isEmpty()) {
+        if (currentRoute.isEmpty())
             return InsertionData.createEmptyInsertionData();
-        }
 
         JobInsertionContext insertionContext = new JobInsertionContext(currentRoute, jobToInsert, newVehicle, newDriver, newVehicleDepartureTime);
         int insertionIndex = InsertionData.NO_INDEX;
@@ -118,9 +116,8 @@ public InsertionData getInsertionData(final VehicleRoute currentRoute, final Job
         /*
         check hard constraints at route level
          */
-        if (!hardRouteLevelConstraint.fulfilled(insertionContext)) {
+        if (!hardRouteLevelConstraint.fulfilled(insertionContext))
             return InsertionData.createEmptyInsertionData();
-        }
 
         /*
         check soft constraints at route level
@@ -182,9 +179,8 @@ public InsertionData getInsertionData(final VehicleRoute currentRoute, final Job
                 break;
             }
         }
-        if (insertionIndex == InsertionData.NO_INDEX) {
+        if (insertionIndex == InsertionData.NO_INDEX)
             return InsertionData.createEmptyInsertionData();
-        }
         InsertionData insertionData = new InsertionData(bestCost, InsertionData.NO_INDEX, insertionIndex, newVehicle, newDriver);
         breakAct2Insert.setLocation(bestLocation);
         insertionData.getEvents().add(new InsertBreak(currentRoute, newVehicle, breakAct2Insert, insertionIndex));
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BreakScheduling.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BreakScheduling.java
index 2388ef5d7..adcbe78ee 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BreakScheduling.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/BreakScheduling.java
@@ -50,7 +50,7 @@
 
     private final EventListeners eventListeners;
 
-    private Set<VehicleRoute> modifiedRoutes = new HashSet<VehicleRoute>();
+    private Set<VehicleRoute> modifiedRoutes = new HashSet<>();
 
     public BreakScheduling(VehicleRoutingProblem vrp, StateManager stateManager, ConstraintManager constraintManager) {
         this.stateManager = stateManager;
@@ -96,7 +96,7 @@ public void ruinEnds(Collection<VehicleRoute> routes, Collection<Job> unassigned
                 logger.trace("ruin: {}", aBreak.getId());
             }
         }
-        List<Break> breaks = new ArrayList<Break>();
+        List<Break> breaks = new ArrayList<>();
         for (Job j : unassignedJobs) {
             if (j instanceof Break) {
                 breaks.add((Break) j);
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblem.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblem.java
index 5d0e3fa0a..8b4338057 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblem.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblem.java
@@ -17,6 +17,20 @@
  */
 package com.graphhopper.jsprit.core.problem;
 
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.LinkedHashMap;
+import java.util.LinkedHashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import com.graphhopper.jsprit.core.distance.EuclideanDistanceCalculator;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingActivityCosts;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
@@ -33,10 +47,6 @@
 import com.graphhopper.jsprit.core.util.Coordinate;
 import com.graphhopper.jsprit.core.util.DefaultCosts;
 import com.graphhopper.jsprit.core.util.Locations;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.util.*;
 
 
 /**
@@ -74,35 +84,27 @@ public static Builder newInstance() {
 
         private VehicleRoutingActivityCosts activityCosts = new WaitingTimeCosts();
 
-        private Map<String, Job> jobs = new LinkedHashMap<String, Job>();
+        private Map<String, Job> jobs = new LinkedHashMap<>();
 
-        private Map<String, Job> tentativeJobs = new LinkedHashMap<String, Job>();
+        private Map<String, Job> tentativeJobs = new LinkedHashMap<>();
 
-        private Set<String> jobsInInitialRoutes = new HashSet<String>();
+        private Set<String> jobsInInitialRoutes = new HashSet<>();
 
-        private Map<String, Coordinate> tentative_coordinates = new HashMap<String, Coordinate>();
+        private Map<String, Coordinate> tentative_coordinates = new HashMap<>();
 
         private FleetSize fleetSize = FleetSize.INFINITE;
 
-        private Collection<VehicleType> vehicleTypes = new ArrayList<VehicleType>();
+        private Collection<VehicleType> vehicleTypes = new ArrayList<>();
 
-        private Collection<VehicleRoute> initialRoutes = new ArrayList<VehicleRoute>();
+        private Collection<VehicleRoute> initialRoutes = new ArrayList<>();
 
-        private Set<Vehicle> uniqueVehicles = new LinkedHashSet<Vehicle>();
+        private Set<Vehicle> uniqueVehicles = new LinkedHashSet<>();
 
-        private Set<String> addedVehicleIds = new LinkedHashSet<String>();
+        private Set<String> addedVehicleIds = new LinkedHashSet<>();
 
         private boolean hasBreaks = false;
 
-        private JobActivityFactory jobActivityFactory = new JobActivityFactory() {
-
-            @Override
-            public List<JobActivity> createActivities(Job job) {
-                // Now its safe, but be carful if another implementation of Job is made
-                return ((AbstractJob) job).getActivityList().getAll();
-            }
-
-        };
+        private JobActivityFactory jobActivityFactory = job -> ((AbstractJob) job).getActivityList().getAll();
 
         private int jobIndexCounter = 1;
 
@@ -112,7 +114,7 @@ public static Builder newInstance() {
 
         private int vehicleTypeIdIndexCounter = 1;
 
-        private Map<VehicleTypeKey, Integer> typeKeyIndices = new HashMap<VehicleTypeKey, Integer>();
+        private Map<VehicleTypeKey, Integer> typeKeyIndices = new HashMap<>();
 
         // Deprecated ?
         //        private Map<Job, List<JobActivity>> activityMap = new HashMap<>();
@@ -135,7 +137,7 @@ private void incVehicleTypeIdIndexCounter() {
             vehicleTypeIdIndexCounter++;
         }
 
-        private Set<Location> allLocations = new HashSet<Location>();
+        private Set<Location> allLocations = new HashSet<>();
 
         /**
          * Returns the unmodifiable map of collected locations (mapped by their location-id).
@@ -155,14 +157,7 @@ private void incVehicleTypeIdIndexCounter() {
          * @return locations
          */
         public Locations getLocations() {
-            return new Locations() {
-
-                @Override
-                public Coordinate getCoord(String id) {
-                    return tentative_coordinates.get(id);
-                }
-
-            };
+            return id -> tentative_coordinates.get(id);
         }
 
         /**
@@ -206,26 +201,52 @@ public Builder setFleetSize(FleetSize fleetSize) {
          * @throws IllegalStateException if job is neither a shipment nor a service, or jobId has already been added.
          */
         public Builder addJob(Job job) {
-            if (!(job instanceof AbstractJob)) {
+            if (!(job instanceof AbstractJob))
                 throw new IllegalArgumentException("job must be of type AbstractJob");
-            }
             return addJob((AbstractJob) job);
         }
 
+        /**
+         * Handshake class for C++ like friend visibility behavior emulation.
+         *
+         * <p>
+         * This is not a class for the end-users. (To be frank, this class can't
+         * be instantiate outside the parent task.
+         * </p>
+         *
+         * <p>
+         * Based on
+         * {@link https://stackoverflow.com/questions/182278/is-there-a-way-to-simulate-the-c-friend-concept-in-java}
+         * </p>
+         *
+         * @author Balage
+         */
+        // C++ like friend behavior simulation
+        public final static class FriendlyHandshake {
+            private FriendlyHandshake() {
+            }
+        }
+
+        private static final FriendlyHandshake FRIENDLY_HANDSHAKE = new FriendlyHandshake();
+
         /**
          * Adds a job which is either a service or a shipment.
          * <p>
-         * <p>Note that job.getId() must be unique, i.e. no job (either it is a shipment or a service) is allowed to have an already allocated id.
+         * <p>
+         * Note that job.getId() must be unique, i.e. no job (either it is a
+         * shipment or a service) is allowed to have an already allocated id.
          *
-         * @param job job to be added
+         * @param job
+         *            job to be added
          * @return this builder
-         * @throws IllegalStateException if job is neither a shipment nor a service, or jobId has already been added.
+         * @throws IllegalStateException
+         *             if job is neither a shipment nor a service, or jobId has
+         *             already been added.
          */
         public Builder addJob(AbstractJob job) {
-            if (tentativeJobs.containsKey(job.getId())) {
+            if (tentativeJobs.containsKey(job.getId()))
                 throw new IllegalArgumentException("vehicle routing problem already contains a service or shipment with id " + job.getId() + ". make sure you use unique ids for all services and shipments");
-            }
-            job.impl_setIndex(jobIndexCounter);
+            job.impl_setIndex(FRIENDLY_HANDSHAKE, jobIndexCounter);
             incJobIndexCounter();
             tentativeJobs.put(job.getId(), job);
             addLocationToTentativeLocations(job);
@@ -260,9 +281,8 @@ private boolean addBreaksToActivityMap() {
                 if (v.getBreak() != null) {
                     hasBreaks = true;
                     List<JobActivity> breakActivities = jobActivityFactory.createActivities(v.getBreak());
-                    if (breakActivities.isEmpty()) {
+                    if (breakActivities.isEmpty())
                         throw new IllegalArgumentException("at least one activity for break needs to be created by activityFactory");
-                    }
                     for (AbstractActivity act : breakActivities) {
                         act.setIndex(activityIndexCounter);
                         incActivityIndexCounter();
@@ -330,9 +350,8 @@ public Builder addInitialVehicleRoutes(Collection<VehicleRoute> routes) {
          * @return this builder
          */
         public Builder addVehicle(Vehicle vehicle) {
-            if (!(vehicle instanceof AbstractVehicle)) {
+            if (!(vehicle instanceof AbstractVehicle))
                 throw new IllegalArgumentException("vehicle must be an AbstractVehicle");
-            }
             return addVehicle((AbstractVehicle) vehicle);
         }
 
@@ -343,9 +362,9 @@ public Builder addVehicle(Vehicle vehicle) {
          * @return this builder
          */
         public Builder addVehicle(AbstractVehicle vehicle) {
-            if (addedVehicleIds.contains(vehicle.getId())) {
+            if (addedVehicleIds.contains(vehicle.getId()))
                 throw new IllegalArgumentException("problem already contains a vehicle with id " + vehicle.getId() + ". choose unique ids for each vehicle.");
-            } else {
+            else {
                 addedVehicleIds.add(vehicle.getId());
             }
             if (!uniqueVehicles.contains(vehicle)) {
@@ -404,7 +423,7 @@ public Builder setActivityCosts(VehicleRoutingActivityCosts activityCosts) {
         public VehicleRoutingProblem build() {
             if (transportCosts == null) {
                 transportCosts = new DefaultCosts(EuclideanDistanceCalculator.getInstance())
-                    .withCoordinateConverter(getLocations());
+                        .withCoordinateConverter(getLocations());
             }
             for (Job job : tentativeJobs.values()) {
                 if (!jobsInInitialRoutes.contains(job.getId())) {
@@ -412,9 +431,8 @@ public VehicleRoutingProblem build() {
                 }
             }
             boolean hasBreaks = addBreaksToActivityMap();
-            if (hasBreaks && fleetSize.equals(FleetSize.INFINITE)) {
+            if (hasBreaks && fleetSize.equals(FleetSize.INFINITE))
                 throw new UnsupportedOperationException("breaks are not yet supported when dealing with infinite fleet. either set it to finite or omit breaks.");
-            }
             return new VehicleRoutingProblem(this);
         }
 
@@ -538,14 +556,7 @@ public Builder addAllVehicles(Collection<? extends Vehicle> vehicles) {
 
     private int nuActivities;
 
-    private final JobActivityFactory jobActivityFactory = new JobActivityFactory() {
-
-        @Override
-        public List<JobActivity> createActivities(Job job) {
-            return copyAndGetActivities(job);
-        }
-
-    };
+    private final JobActivityFactory jobActivityFactory = job -> copyAndGetActivities(job);
 
     private VehicleRoutingProblem(Builder builder) {
         jobs = builder.jobs;
@@ -567,7 +578,7 @@ private VehicleRoutingProblem(Builder builder) {
     @Override
     public String toString() {
         return "[fleetSize=" + fleetSize + "][#jobs=" + jobs.size() + "][#vehicles=" + vehicles.size() + "][#vehicleTypes=" + vehicleTypes.size() + "][" +
-            "transportCost=" + transportCosts + "][activityCosts=" + activityCosts + "]";
+                "transportCost=" + transportCosts + "][activityCosts=" + activityCosts + "]";
     }
 
     /**
@@ -600,7 +611,7 @@ public FleetSize getFleetSize() {
      * @return copied collection of initial vehicle routes
      */
     public Collection<VehicleRoute> getInitialVehicleRoutes() {
-        Collection<VehicleRoute> copiedInitialRoutes = new ArrayList<VehicleRoute>();
+        Collection<VehicleRoute> copiedInitialRoutes = new ArrayList<>();
         for (VehicleRoute route : initialVehicleRoutes) {
             copiedInitialRoutes.add(VehicleRoute.copyOf(route));
         }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractJob.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractJob.java
index cfe0ae55d..39e6af9fe 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractJob.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractJob.java
@@ -27,6 +27,7 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.Skills;
+import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.Builder.FriendlyHandshake;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 
@@ -385,16 +386,20 @@ public int getIndex() {
         return index;
     }
 
+
     /**
      * Sets the index of the job within the problem.
      * <p>
-     * <b>This method isn't part of the public API and should not be called!</b>
+     * <b>This method isn't part of the public API and should not be called! If
+     * it is still called, it will throw {@link IllegalStateException}.</b>
      * </p>
      *
      * @param index
      *            The index.
      */
-    public void impl_setIndex(int index) {
+    public void impl_setIndex(FriendlyHandshake handshake, int index) {
+        if (handshake == null)
+            throw new IllegalStateException();
         this.index = index;
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractListBackedJobActivityList.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractListBackedJobActivityList.java
index fb750c812..9195ea73c 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractListBackedJobActivityList.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractListBackedJobActivityList.java
@@ -1,11 +1,11 @@
 package com.graphhopper.jsprit.core.problem.job;
 
-import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
-
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
+
 /**
  * Simple activity list implementation.
  * <p>
@@ -29,12 +29,35 @@ public AbstractListBackedJobActivityList(AbstractJob job) {
         super(job);
     }
 
+    /**
+     * Handshake class for C++ like friend visibility behavior emulation.
+     *
+     * <p>
+     * This is not a class for the end-users. (To be frank, this class can't be
+     * instantiate outside the parent task.
+     * </p>
+     *
+     * <p>
+     * Based on
+     * {@link https://stackoverflow.com/questions/182278/is-there-a-way-to-simulate-the-c-friend-concept-in-java}
+     * </p>
+     *
+     * @author Balage
+     */
+    // C++ like friend behavior simulation
+    public final static class FriendlyHandshake {
+        private FriendlyHandshake() {
+        }
+    }
+
+    private static final FriendlyHandshake FRIENDLY_HANDSHAKE = new FriendlyHandshake();
+
     @Override
     public void addActivity(JobActivity activity) {
         validateActivity(activity);
         if (!_activities.contains(activity)) {
             _activities.add(activity);
-            activity.impl_setOrderNumber(_activities.size());
+            activity.impl_setOrderNumber(FRIENDLY_HANDSHAKE, _activities.size());
         }
     }
 
@@ -55,9 +78,8 @@ public int size() {
      */
     protected int indexOf(JobActivity activity) {
         int idx = _activities.indexOf(activity);
-        if (idx == -1) {
+        if (idx == -1)
             throw new IllegalArgumentException("Activity " + activity.getName() + " is not in the list.");
-        }
         return idx;
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java
index 40824790d..b3d7b4ba8 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java
@@ -24,6 +24,7 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.Skills;
+import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.Builder.FriendlyHandshake;
 import com.graphhopper.jsprit.core.problem.job.CustomJob.BuilderBase.ActivityType;
 import com.graphhopper.jsprit.core.problem.job.CustomJob.BuilderBase.BuilderActivityInfo;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.ServiceActivity;
@@ -358,17 +359,16 @@ public double getServiceDuration() {
 
     /**
      * Returns the time-window a service(-operation) is allowed to start.
-     *
-     * @deprecated It is recommended to use getTimeWindows() instead. If you
-     *             still use this, it returns the first time window of
-     *             getTimeWindows() collection.
+     * It is recommended to use getTimeWindows() instead. If you still use this, it returns the first time window of getTimeWindows() collection.
      *
      * @return time window
      *
      */
     @Deprecated
     public TimeWindow getTimeWindow() {
-        return theRealActivity.getTimeWindows().iterator().next();
+        if (getTheRealActivity().getTimeWindows().size() > 1)
+            throw new IllegalArgumentException("More than one time window in. " + this);
+        return getTheRealActivity().getTimeWindows().iterator().next();
     }
 
     /**
@@ -462,8 +462,8 @@ public int getIndex() {
     }
 
     @Override
-    public void impl_setIndex(int index) {
-        theRealJob.impl_setIndex(index);
+    public void impl_setIndex(FriendlyHandshake handshake, int index) {
+        theRealJob.impl_setIndex(handshake, index);
     }
 
     @Override
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java
index 4613606df..bda9f53cf 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java
@@ -24,6 +24,7 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.Skills;
+import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.Builder.FriendlyHandshake;
 import com.graphhopper.jsprit.core.problem.job.CustomJob.BuilderBase.ActivityType;
 import com.graphhopper.jsprit.core.problem.job.CustomJob.BuilderBase.BuilderActivityInfo;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivity;
@@ -557,8 +558,8 @@ public String toString() {
     }
 
     @Override
-    public void impl_setIndex(int index) {
-        theRealJob.impl_setIndex(index);
+    public void impl_setIndex(FriendlyHandshake handshake, int index) {
+        theRealJob.impl_setIndex(handshake, index);
     }
 
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRoute.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRoute.java
index 40188c650..e5c056141 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRoute.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRoute.java
@@ -22,19 +22,25 @@
 import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
+import java.util.Map.Entry;
+import java.util.Optional;
 import java.util.Set;
+import java.util.stream.Collectors;
 
 import com.graphhopper.jsprit.core.problem.JobActivityFactory;
 import com.graphhopper.jsprit.core.problem.SimpleJobActivityFactory;
 import com.graphhopper.jsprit.core.problem.driver.Driver;
 import com.graphhopper.jsprit.core.problem.driver.DriverImpl;
+import com.graphhopper.jsprit.core.problem.job.AbstractJob;
 import com.graphhopper.jsprit.core.problem.job.AbstractSingleActivityJob;
 import com.graphhopper.jsprit.core.problem.job.Break;
 import com.graphhopper.jsprit.core.problem.job.DeliveryJob;
 import com.graphhopper.jsprit.core.problem.job.PickupJob;
 import com.graphhopper.jsprit.core.problem.job.ShipmentJob;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.End;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.Start;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivities;
@@ -60,9 +66,8 @@
      *             if route is null
      */
     public static VehicleRoute copyOf(VehicleRoute route) {
-        if (route == null) {
+        if (route == null)
             throw new IllegalArgumentException("route must not be null");
-        }
         return new VehicleRoute(route);
     }
 
@@ -111,10 +116,9 @@ public static VehicleRoute emptyRoute() {
          * @return this builder
          */
         public static Builder newInstance(Vehicle vehicle, Driver driver) {
-            if (vehicle == null || driver == null) {
+            if (vehicle == null || driver == null)
                 throw new IllegalArgumentException(
-                                "null arguments not accepted. ini emptyRoute with VehicleImpl.createNoVehicle() and DriverImpl.noDriver()");
-            }
+                        "null arguments not accepted. ini emptyRoute with VehicleImpl.createNoVehicle() and DriverImpl.noDriver()");
             return new Builder(vehicle, driver);
         }
 
@@ -139,10 +143,9 @@ public static Builder newInstance(Vehicle vehicle, Driver driver) {
          * @return this builder
          */
         public static Builder newInstance(Vehicle vehicle) {
-            if (vehicle == null) {
+            if (vehicle == null)
                 throw new IllegalArgumentException(
-                                "null arguments not accepted. ini emptyRoute with VehicleImpl.createNoVehicle() and DriverImpl.noDriver()");
-            }
+                        "null arguments not accepted. ini emptyRoute with VehicleImpl.createNoVehicle() and DriverImpl.noDriver()");
             return new Builder(vehicle, DriverImpl.noDriver());
         }
 
@@ -162,7 +165,7 @@ public static Builder newInstance(Vehicle vehicle) {
         // private TourShipmentActivityFactory shipmentActivityFactory = new
         // DefaultShipmentActivityFactory();
 
-        private Set<ShipmentJob> openShipments = new HashSet<>();
+        // private Set<ShipmentJob> openShipments = new HashSet<>();
 
         private JobActivityFactory jobActivityFactory = new SimpleJobActivityFactory();
 
@@ -180,98 +183,92 @@ private Builder(Vehicle vehicle, Driver driver) {
             end = new End(vehicle.getEndLocation(), 0.0, vehicle.getLatestArrival());
         }
 
-        /**
-         * Sets the departure-time of the route, i.e. which is the time the
-         * vehicle departs from start-location.
-         * <p>
-         * <p>
-         * <b>Note</b> that departureTime cannot be lower than
-         * earliestDepartureTime of vehicle.
-         *
-         * @param departureTime
-         *            departure time of vehicle being employed for this route
-         * @return builder
-         * @throws IllegalArgumentException
-         *             if departureTime < vehicle.getEarliestDeparture()
-         */
         public Builder setDepartureTime(double departureTime) {
-            if (departureTime < start.getEndTime()) {
-                throw new IllegalArgumentException("departureTime < vehicle.getEarliestDepartureTime(). this must not be.");
-            }
+            if (departureTime < start.getEndTime())
+                throw new IllegalArgumentException(
+                        "departureTime < vehicle.getEarliestDepartureTime(). this must not be.");
             start.setEndTime(departureTime);
             return this;
         }
 
-        /**
-         * Adds a service to this route. Activity is initialized with
-         * .getSingleTimeWindow(). If you want to explicitly set another time
-         * window use {@linkplain #addService(Service TimeWindow)}
-         * <p>
-         * <p>
-         * This implies that for this service a serviceActivity is created with
-         * {@link TourActivityFactory} and added to the sequence of
-         * tourActivities.
-         * <p>
-         * <p>
-         * The resulting activity occurs in the activity-sequence in the order
-         * adding/inserting.
-         *
-         * <p>
-         * <i><b>Note: Using this method is not recommended. Use the
-         * {@linkplain #addService(AbstractSingleActivityJob, TimeWindow)}
-         * instead.</b></i>
-         * </p>
-         *
-         * @param service
-         *            to be added
-         * @return this builder
-         * @throws IllegalArgumentException
-         *             if service is null
-         */
-        public Builder addService(AbstractSingleActivityJob<?> service) {
-            if (service == null) {
-                throw new IllegalArgumentException("service must not be null");
-            }
-            return addSingleActivityJob(service);
+
+        public Builder addActivity(AbstractJob job) {
+            return addActivity(job, 0);
         }
 
-        public Builder addService(AbstractSingleActivityJob<?> service,
-                        TimeWindow timeWindow) {
-            if (service == null) {
-                throw new IllegalArgumentException("service must not be null");
-            }
-            return addSingleActivityJob(service, timeWindow);
+        public Builder addActivity(AbstractJob job, int activityIndex) {
+            if (job == null)
+                throw new IllegalArgumentException("job must not be null");
+            JobActivity activity = job.getActivityList().getAll().get(activityIndex);
+            return addActivity(activity);
         }
 
-        private Builder addSingleActivityJob(AbstractSingleActivityJob<?> service) {
-            return addSingleActivityJob(service, service.getActivity().getSingleTimeWindow());
+        public Builder addActivity(AbstractJob job, Class<? extends JobActivity> activityClass) {
+            if (job == null)
+                throw new IllegalArgumentException("job must not be null");
+            Optional<JobActivity> activity = job.getActivityList().getAll().stream()
+                    .filter(a -> activityClass.isAssignableFrom(a.getClass()))
+                    .findFirst();
+            if (activity.isPresent())
+                return addActivity(activity.get());
+            else
+                throw new IllegalArgumentException("Job has no " + activityClass.getSimpleName() + " activity");
         }
 
-        private Builder addSingleActivityJob(AbstractSingleActivityJob<?> service,
-                        TimeWindow timeWindow) {
-            if (service == null) {
-                throw new IllegalArgumentException("service must not be null");
-            }
-            List<JobActivity> acts = jobActivityFactory.createActivities(service);
-            TourActivity act = acts.get(0);
-            act.setTheoreticalEarliestOperationStartTime(timeWindow.getStart());
-            act.setTheoreticalLatestOperationStartTime(timeWindow.getEnd());
-            tourActivities.addActivity(act);
+        public Builder addActivity(AbstractJob job, TimeWindow timeWindow) {
+            return addActivity(job, 0, timeWindow);
+        }
+
+        public Builder addActivity(AbstractJob job, Class<? extends JobActivity> activityClass, TimeWindow timeWindow) {
+            if (job == null)
+                throw new IllegalArgumentException("job must not be null");
+            Optional<JobActivity> activity = job.getActivityList().getAll().stream()
+                    .filter(a -> activityClass.isAssignableFrom(a.getClass()))
+                    .findFirst();
+            if (activity.isPresent())
+                return addActivity(activity.get(), timeWindow);
+            else
+                throw new IllegalArgumentException("Job has no " + activityClass.getSimpleName() + " activity");
+        }
+
+        public Builder addActivity(AbstractJob job, int activityIndex, TimeWindow timeWindow) {
+            if (job == null)
+                throw new IllegalArgumentException("job must not be null");
+            TourActivity act = job.getActivityList().getAll().get(activityIndex);
+            return addActivity(act, timeWindow);
+        }
+
+        public Builder addActivity(JobActivity activity) {
+            return addActivity(activity, activity.getTimeWindows().iterator().next());
+        }
+
+        public Builder addActivity(TourActivity activity, TimeWindow timeWindow) {
+            if (activity == null)
+                throw new IllegalArgumentException("activity must not be null");
+            activity.setTheoreticalEarliestOperationStartTime(timeWindow.getStart());
+            activity.setTheoreticalLatestOperationStartTime(timeWindow.getEnd());
+            tourActivities.addActivity(activity);
             return this;
         }
 
+        @Deprecated
+        public Builder addService(AbstractSingleActivityJob<?> service) {
+            return addActivity(service);
+        }
+
+        @Deprecated
+        public Builder addService(AbstractSingleActivityJob<?> service, TimeWindow timeWindow) {
+            return addActivity(service, timeWindow);
+        }
+
+        @Deprecated
         public Builder addBreak(Break currentbreak) {
-            if (currentbreak == null) {
-                throw new IllegalArgumentException("break must not be null");
-            }
-            return addSingleActivityJob(currentbreak);
+            return addActivity(currentbreak);
         }
 
+        @Deprecated
         public Builder addBreak(Break currentbreak, TimeWindow timeWindow) {
-            if (currentbreak == null) {
-                throw new IllegalArgumentException("break must not be null");
-            }
-            return addSingleActivityJob(currentbreak, timeWindow);
+            return addActivity(currentbreak, timeWindow);
         }
 
         /**
@@ -286,18 +283,14 @@ public Builder addBreak(Break currentbreak, TimeWindow timeWindow) {
          *            pickup to be added
          * @return the builder
          */
+        @Deprecated
         public Builder addPickup(PickupJob pickup) {
-            if (pickup == null) {
-                throw new IllegalArgumentException("pickup must not be null");
-            }
-            return addService(pickup);
+            return addActivity(pickup);
         }
 
+        @Deprecated
         public Builder addPickup(PickupJob pickup, TimeWindow timeWindow) {
-            if (pickup == null) {
-                throw new IllegalArgumentException("pickup must not be null");
-            }
-            return addSingleActivityJob(pickup, timeWindow);
+            return addActivity(pickup, timeWindow);
         }
 
         /**
@@ -313,18 +306,14 @@ public Builder addPickup(PickupJob pickup, TimeWindow timeWindow) {
          *            delivery to be added
          * @return the builder
          */
+        @Deprecated
         public Builder addDelivery(DeliveryJob delivery) {
-            if (delivery == null) {
-                throw new IllegalArgumentException("delivery must not be null");
-            }
-            return addService(delivery);
+            return addActivity(delivery);
         }
 
+        @Deprecated
         public Builder addDelivery(DeliveryJob delivery, TimeWindow timeWindow) {
-            if (delivery == null) {
-                throw new IllegalArgumentException("delivery must not be null");
-            }
-            return addSingleActivityJob(delivery, timeWindow);
+            return addActivity(delivery, timeWindow);
         }
 
         /**
@@ -342,23 +331,25 @@ public Builder addDelivery(DeliveryJob delivery, TimeWindow timeWindow) {
          *             if method has already been called with the specified
          *             shipment.
          */
+        @Deprecated
         public Builder addPickup(ShipmentJob shipment) {
-            return addPickup(shipment,
-                            shipment.getPickupActivity().getSingleTimeWindow());
+            return addActivity(shipment, PickupActivity.class);
         }
 
+        @Deprecated
         public Builder addPickup(ShipmentJob shipment, TimeWindow pickupTimeWindow) {
-            if (openShipments.contains(shipment)) {
-                throw new IllegalArgumentException("shipment has already been added. cannot add it twice.");
-            }
-            List<JobActivity> acts = jobActivityFactory.createActivities(shipment);
-            TourActivity act = acts.get(0);
-            act.setTheoreticalEarliestOperationStartTime(pickupTimeWindow.getStart());
-            act.setTheoreticalLatestOperationStartTime(pickupTimeWindow.getEnd());
-            tourActivities.addActivity(act);
-            openShipments.add(shipment);
-            openActivities.put(shipment, acts.get(1));
-            return this;
+            // if (openShipments.contains(shipment))
+            // throw new IllegalArgumentException(
+            // "shipment has already been added. cannot add it twice.");
+            // List<JobActivity> acts =
+            // jobActivityFactory.createActivities(shipment);
+            // TourActivity act = acts.get(0);
+            // act.setTheoreticalEarliestOperationStartTime(pickupTimeWindow.getStart());
+            // act.setTheoreticalLatestOperationStartTime(pickupTimeWindow.getEnd());
+            // tourActivities.addActivity(act);
+            // openShipments.add(shipment);
+            // openActivities.put(shipment, acts.get(1));
+            return addActivity(shipment, PickupActivity.class, pickupTimeWindow);
         }
 
         /**
@@ -378,21 +369,24 @@ public Builder addPickup(ShipmentJob shipment, TimeWindow pickupTimeWindow) {
          *             method addPickup(shipment) has not been called yet).
          */
         public Builder addDelivery(ShipmentJob shipment) {
-            return addDelivery(shipment, shipment.getDeliveryActivity().getSingleTimeWindow());
+            return addActivity(shipment, DeliveryActivity.class);
         }
 
-        public Builder addDelivery(ShipmentJob shipment, TimeWindow deliveryTimeWindow) {
-            if (openShipments.contains(shipment)) {
-                TourActivity act = openActivities.get(shipment);
-                act.setTheoreticalEarliestOperationStartTime(deliveryTimeWindow.getStart());
-                act.setTheoreticalLatestOperationStartTime(deliveryTimeWindow.getEnd());
-                tourActivities.addActivity(act);
-                openShipments.remove(shipment);
-            } else {
-                throw new IllegalArgumentException(
-                                "cannot deliver shipment. shipment " + shipment + " needs to be picked up first.");
-            }
-            return this;
+        public Builder addDelivery(ShipmentJob shipment, TimeWindow
+                deliveryTimeWindow) {
+            // if (openShipments.contains(shipment)) {
+            // TourActivity act = openActivities.get(shipment);
+            // act.setTheoreticalEarliestOperationStartTime(deliveryTimeWindow.getStart());
+            // act.setTheoreticalLatestOperationStartTime(deliveryTimeWindow.getEnd());
+            // tourActivities.addActivity(act);
+            // openShipments.remove(shipment);
+            // } else
+            // throw new IllegalArgumentException(
+            // "cannot deliver shipment. shipment " + shipment + " needs to be
+            // picked up first.");
+            // return this;
+            return addActivity(shipment, PickupActivity.class, deliveryTimeWindow);
+
         }
 
         /**
@@ -404,9 +398,7 @@ public Builder addDelivery(ShipmentJob shipment, TimeWindow deliveryTimeWindow)
          *             though but not delivery.
          */
         public VehicleRoute build() {
-            if (!openShipments.isEmpty()) {
-                throw new IllegalArgumentException("there are still shipments that have not been delivered yet.");
-            }
+            validateActivities();
             if (!vehicle.isReturnToDepot()) {
                 if (!tourActivities.isEmpty()) {
                     end.setLocation(tourActivities.getActivities().get(tourActivities.getActivities().size() - 1).getLocation());
@@ -415,6 +407,55 @@ public VehicleRoute build() {
             return new VehicleRoute(this);
         }
 
+        private void validateActivities() {
+            Map<AbstractJob, Set<JobActivity>> activityCounter = new HashMap<>();
+            Set<JobActivity> activities = new HashSet<>();
+            Set<JobActivity> duplicatedActivities = new HashSet<>();
+            tourActivities.getActivities().stream()
+            .filter(a -> a instanceof JobActivity)
+            .map(a -> (JobActivity) a)
+            .forEach(ja -> {
+                // Checks duplicated activities
+                if (activities.contains(ja)) {
+                    duplicatedActivities.add(ja);
+                    return;
+                }
+                activities.add(ja);
+
+                AbstractJob job = ja.getJob();
+                // New job, add all activities to missing list
+                if (!activityCounter.containsKey(job)) {
+                    activityCounter.put(job, new HashSet<>(job.getActivityList().getAll()));
+                }
+                Set<JobActivity> missingActivities = activityCounter.get(job);
+
+                // Remove activity from missing
+                missingActivities.remove(ja);
+
+                // All activity has been found
+                if (missingActivities.isEmpty()) {
+                    activityCounter.remove(job);
+                }
+            });
+
+            if (!duplicatedActivities.isEmpty()) {
+                System.err.println("Duplicated activities: \n" + duplicatedActivities.stream()
+                .map(a -> a.toString())
+                .collect(Collectors.joining("\n   ", "   ", "")));
+            }
+            if (!activityCounter.isEmpty()) {
+                System.err.println("Missing activities:");
+                for (Entry<AbstractJob, Set<JobActivity>> missing : activityCounter.entrySet()) {
+                    System.err.println("   "+missing.getKey());
+                    for (JobActivity act : missing.getValue()) {
+                        System.err.println("      "+act);
+                    }
+                }
+            }
+
+            if (!duplicatedActivities.isEmpty() || !activityCounter.isEmpty())
+                throw new IllegalArgumentException("Invalid route. See details above.");
+        }
     }
 
     private TourActivities tourActivities;
@@ -557,10 +598,9 @@ private void setStartAndEnd(Vehicle vehicle, double vehicleDepTime) {
      *             if start is null
      */
     public double getDepartureTime() {
-        if (start == null) {
+        if (start == null)
             throw new IllegalArgumentException(
-                            "cannot get departureTime without having a vehicle on this route. use setVehicle(vehicle,departureTime) instead.");
-        }
+                    "cannot get departureTime without having a vehicle on this route. use setVehicle(vehicle,departureTime) instead.");
         return start.getEndTime();
     }
 
@@ -595,8 +635,8 @@ public End getEnd() {
     @Override
     public String toString() {
         return "[id=" + id + "][start=" + start + "][end=" + end + "][departureTime=" + start.getEndTime() + "][vehicle=" + vehicle
-                        + "][driver="
-                        + driver + "][nuOfActs=" + tourActivities.getActivities().size() + "]";
+                + "][driver="
+                + driver + "][nuOfActs=" + tourActivities.getActivities().size() + "]";
     }
 
     public void setId(int id) {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/JobActivity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/JobActivity.java
index 66f216cd0..88f9ecc10 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/JobActivity.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/JobActivity.java
@@ -6,6 +6,7 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.job.AbstractJob;
+import com.graphhopper.jsprit.core.problem.job.AbstractListBackedJobActivityList.FriendlyHandshake;
 import com.graphhopper.jsprit.core.problem.job.Job;
 
 /**
@@ -97,18 +98,6 @@ public String getName() {
         return timeWindows;
     }
 
-    /**
-     * @return A single time window.
-     * @throws IllegalArgumentException
-     *             When more than one time window exists.
-     */
-    // TODO: Is it legacy code, should be removed later
-    @Deprecated
-    public TimeWindow getSingleTimeWindow() {
-        if (timeWindows.size() > 1)
-            throw new IllegalArgumentException("More than one time window in. " + this);
-        return timeWindows.iterator().next();
-    }
 
     @Override
     public int hashCode() {
@@ -148,12 +137,18 @@ public int getOrderNumber() {
     /**
      * Sets the order number of the activity within the job.
      * <p>
-     * <b>Warning! This function is not part of the API.</b>
+     * <b>Warning! This function is not part of the API. Calling it would throw
+     * {@linkplain IllegalStateException}. </b>
      * </p>
      *
+     * @param friendLock
+     *            Internal friend handshake object.
      * @param orderNumber
+     *            The order number.
      */
-    public void impl_setOrderNumber(int orderNumber) {
+    public void impl_setOrderNumber(FriendlyHandshake hadshake, int orderNumber) {
+        if (hadshake == null)
+            throw new IllegalStateException();
         this.orderNumber = orderNumber;
     }
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdateVehicleDependentTimeWindowTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdateVehicleDependentTimeWindowTest.java
index 28f297a60..eb5ce91f7 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdateVehicleDependentTimeWindowTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdateVehicleDependentTimeWindowTest.java
@@ -90,7 +90,7 @@ public void doBefore() {
 
         vrpBuilder.addVehicle(vehicle).addVehicle(vehicle2).addVehicle(vehicle3).addVehicle(equivalentOf3);
 
-        Collection<Vehicle> vehicles = new ArrayList<Vehicle>();
+        Collection<Vehicle> vehicles = new ArrayList<>();
         vehicles.add(vehicle);
         vehicles.add(vehicle2);
         vehicles.add(vehicle3);
@@ -106,22 +106,17 @@ public void doBefore() {
         vrp = vrpBuilder.build();
 
         route = VehicleRoute.Builder.newInstance(vehicle).setJobActivityFactory(new CopyJobActivityFactory())
-                        .addService(service).addService(service2)
-                        .addService(service3).build();
+                .addService(service).addService(service2)
+                .addService(service3).build();
 
 
         stateManager = new StateManager(vrp);
         UpdateVehicleDependentPracticalTimeWindows updater = new UpdateVehicleDependentPracticalTimeWindows(stateManager, routingCosts, activityCosts);
-        updater.setVehiclesToUpdate(new UpdateVehicleDependentPracticalTimeWindows.VehiclesToUpdate() {
-
-            @Override
-            public Collection<Vehicle> get(VehicleRoute route) {
-                Collection<Vehicle> vehicles = new ArrayList<Vehicle>();
-                vehicles.add(route.getVehicle());
-                vehicles.addAll(fleetManager.getAvailableVehicles(route.getVehicle()));
-                return vehicles;
-            }
-
+        updater.setVehiclesToUpdate(route -> {
+            Collection<Vehicle> vehicles1 = new ArrayList<>();
+            vehicles1.add(route.getVehicle());
+            vehicles1.addAll(fleetManager.getAvailableVehicles(route.getVehicle()));
+            return vehicles1;
         });
         stateManager.addStateUpdater(updater);
         stateManager.informInsertionStarts(Arrays.asList(route), Collections.<Job>emptyList());
@@ -141,68 +136,68 @@ public void whenSwitchIsNotAllowed_itShouldCalOnlyStatesOfCurrentVehicle() {
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct3() {
         assertEquals(70., stateManager.getActivityState(route.getActivities().get(2), vehicle,
-                        InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+                InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
 
     }
 
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct3_v2() {
         assertEquals(70., stateManager.getActivityState(route.getActivities().get(2), vehicle,
-                        InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+                InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct3WithVehicle2() {
         assertEquals(30., stateManager.getActivityState(route.getActivities().get(2), vehicle2,
-                        InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+                InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct3WithVehicle3() {
         assertEquals(90., stateManager.getActivityState(route.getActivities().get(2), vehicle3,
-                        InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+                InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct2() {
         assertEquals(60., stateManager.getActivityState(route.getActivities().get(1), vehicle,
-                        InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+                InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct2_v2() {
         assertEquals(60., stateManager.getActivityState(route.getActivities().get(1), vehicle,
-                        InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+                InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct2WithVehicle2() {
         assertEquals(20., stateManager.getActivityState(route.getActivities().get(1), vehicle2,
-                        InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+                InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct2WithVehicle3() {
         assertEquals(80., stateManager.getActivityState(route.getActivities().get(1), vehicle3,
-                        InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+                InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct2WithEquivalentOfVehicle3() {
         assertEquals(80., stateManager.getActivityState(route.getActivities().get(1), equivalentOf3,
-                        InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+                InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct1WithVehicle2() {
         assertEquals(10., stateManager.getActivityState(route.getActivities().get(0), vehicle2,
-                        InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+                InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
     @Test
     public void stateManagerShouldHaveMemorizedCorrectLatestEndOfAct1WithVehicle3() {
         assertEquals(70., stateManager.getActivityState(route.getActivities().get(0), vehicle3,
-                        InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+                InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
 
@@ -211,54 +206,51 @@ public void twUpdateShouldWorkWithMultipleTWs() {
         //
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance("0,0")).setEarliestStart(0.).setLatestArrival(100.).build();
         ServiceJob service = new ServiceJob.Builder("s1").setLocation(Location.newInstance("10,0"))
-                        .addTimeWindow(30, 40).build();
+                .addTimeWindow(30, 40).build();
         ServiceJob service2 = new ServiceJob.Builder("s2")
-                        .addTimeWindow(20, 30).addTimeWindow(40, 60).addTimeWindow(70, 80).setLocation(Location.newInstance("20,0")).build();
+                .addTimeWindow(20, 30).addTimeWindow(40, 60).addTimeWindow(70, 80).setLocation(Location.newInstance("20,0")).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addJob(service).addJob(service2).addVehicle(vehicle)
-                        .setRoutingCost(routingCosts).build();
+                .setRoutingCost(routingCosts).build();
 
-        VehicleRoute route = VehicleRoute.Builder.newInstance(vehicle).setJobActivityFactory(vrp.getJobActivityFactory())
-                        .addService(service).addService(service2, TimeWindow.newInstance(70, 80))
-                        .build();
+        VehicleRoute route = VehicleRoute.Builder.newInstance(vehicle)
+                .setJobActivityFactory(vrp.getJobActivityFactory())
+                .addService(service)
+            .addService(service2, TimeWindow.newInstance(70, 80))
+                .build();
 
         StateManager stateManager = new StateManager(vrp);
         UpdateVehicleDependentPracticalTimeWindows updater = new UpdateVehicleDependentPracticalTimeWindows(stateManager, routingCosts, activityCosts);
-        updater.setVehiclesToUpdate(new UpdateVehicleDependentPracticalTimeWindows.VehiclesToUpdate() {
-
-            @Override
-            public Collection<Vehicle> get(VehicleRoute route) {
-                Collection<Vehicle> vehicles = new ArrayList<Vehicle>();
-                vehicles.add(route.getVehicle());
-                //                vehicles.addAll(fleetManager.getAvailableVehicles(route.getVehicle()));
-                return vehicles;
-            }
-
+        updater.setVehiclesToUpdate(route1 -> {
+            Collection<Vehicle> vehicles = new ArrayList<>();
+            vehicles.add(route1.getVehicle());
+            //                vehicles.addAll(fleetManager.getAvailableVehicles(route.getVehicle()));
+            return vehicles;
         });
         stateManager.addStateUpdater(updater);
         stateManager.informInsertionStarts(Arrays.asList(route), Collections.<Job>emptyList());
 
         assertEquals(80., stateManager.getActivityState(route.getActivities().get(1), vehicle,
-                        InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
+                InternalStates.LATEST_OPERATION_START_TIME, Double.class), 0.01);
     }
 
     @Test
     public void updateOfOpenRoutesShouldBeDoneCorrectly() {
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v")
-                        .setReturnToDepot(false)
-                        .setStartLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(0, 0)).build())
-                        .setLatestArrival(51)
-                        .build();
+                .setReturnToDepot(false)
+                .setStartLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(0, 0)).build())
+                .setLatestArrival(51)
+                .build();
 
         ServiceJob service = new ServiceJob.Builder("s")
-                        .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(50, 0)).build()).build();
+                .setLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(50, 0)).build()).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance()
-                        .addJob(service).addVehicle(vehicle).setFleetSize(VehicleRoutingProblem.FleetSize.FINITE)
-                        .build();
+                .addJob(service).addVehicle(vehicle).setFleetSize(VehicleRoutingProblem.FleetSize.FINITE)
+                .build();
 
         VehicleRoute route = VehicleRoute.Builder.newInstance(vehicle)
-                        .setJobActivityFactory(vrp.getJobActivityFactory()).addService(service).build();
+                .setJobActivityFactory(vrp.getJobActivityFactory()).addService(service).build();
 
         stateManager = new StateManager(vrp);
         UpdateVehicleDependentPracticalTimeWindows updater = new UpdateVehicleDependentPracticalTimeWindows(stateManager, vrp.getTransportCosts(), vrp.getActivityCosts());
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ServiceJobTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ServiceJobTest.java
index 271952d83..591c29458 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ServiceJobTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ServiceJobTest.java
@@ -54,7 +54,7 @@ public void whenTwoServicesHaveTheSameId_theyShouldBeEqual() {
 
     @Test
     public void noName() {
-        Set<ServiceJob> serviceSet = new HashSet<ServiceJob>();
+        Set<ServiceJob> serviceSet = new HashSet<>();
         ServiceJob one = new ServiceJob.Builder("service").addSizeDimension(0, 10).setLocation(Location.newInstance("foo")).build();
         ServiceJob two = new ServiceJob.Builder("service").addSizeDimension(0, 10).setLocation(Location.newInstance("fo")).build();
         serviceSet.add(one);
@@ -72,18 +72,18 @@ public void whenCapacityDimValueIsNegative_throwIllegalStateExpception() {
     @Test
     public void whenAddingTwoCapDimension_nuOfDimsShouldBeTwo() {
         ServiceJob one = new ServiceJob.Builder("s").setLocation(Location.newInstance("foofoo"))
-                        .addSizeDimension(0, 2)
-                        .addSizeDimension(1, 4)
-                        .build();
+                .addSizeDimension(0, 2)
+                .addSizeDimension(1, 4)
+                .build();
         assertEquals(2, one.getActivity().getLoadChange().getNuOfDimensions());
     }
 
     @Test
     public void sizeAtStartAndEndShouldBeCorrect() {
         ServiceJob one = new ServiceJob.Builder("s").setLocation(Location.newInstance("foofoo"))
-                        .addSizeDimension(0, 2)
-                        .addSizeDimension(1, 4)
-                        .build();
+                .addSizeDimension(0, 2)
+                .addSizeDimension(1, 4)
+                .build();
         assertTrue(one.getSizeAtEnd().equals(one.getActivity().getLoadChange()));
         assertTrue(one.getSizeAtStart().equals(SizeDimension.Builder.newInstance().addDimension(0, 0).addDimension(1, 0).build()));
     }
@@ -91,7 +91,7 @@ public void sizeAtStartAndEndShouldBeCorrect() {
     @Test
     public void whenShipmentIsBuiltWithoutSpecifyingCapacity_itShouldHvCapWithOneDimAndDimValOfZero() {
         ServiceJob one = new ServiceJob.Builder("s").setLocation(Location.newInstance("foofoo"))
-                        .build();
+                .build();
         assertEquals(1, one.getActivity().getLoadChange().getNuOfDimensions());
         assertEquals(0, one.getActivity().getLoadChange().get(0));
     }
@@ -99,7 +99,7 @@ public void whenShipmentIsBuiltWithoutSpecifyingCapacity_itShouldHvCapWithOneDim
     @Test
     public void whenShipmentIsBuiltWithConstructorWhereSizeIsSpecified_capacityShouldBeSetCorrectly() {
         ServiceJob one = new ServiceJob.Builder("s").addSizeDimension(0, 1).setLocation(Location.newInstance("foofoo"))
-                        .build();
+                .build();
         assertEquals(1, one.getActivity().getLoadChange().getNuOfDimensions());
         assertEquals(1, one.getActivity().getLoadChange().get(0));
     }
@@ -167,14 +167,14 @@ public void whenTimeWindowIsNull_throwException() {
     @Test
     public void whenSettingTimeWindow_itShouldBeSetCorrectly() {
         ServiceJob s = new ServiceJob.Builder("s").setLocation(Location.newInstance("loc")).setTimeWindow(TimeWindow.newInstance(1.0, 2.0)).build();
-        assertEquals(1.0, s.getActivity().getSingleTimeWindow().getStart(), 0.01);
-        assertEquals(2.0, s.getActivity().getSingleTimeWindow().getEnd(), 0.01);
+        assertEquals(1.0, s.getActivity().getTimeWindows().iterator().next().getStart(), 0.01);
+        assertEquals(2.0, s.getActivity().getTimeWindows().iterator().next().getEnd(), 0.01);
     }
 
     @Test
     public void whenAddingSkills_theyShouldBeAddedCorrectly() {
         ServiceJob s = new ServiceJob.Builder("s").setLocation(Location.newInstance("loc"))
-                        .addRequiredSkill("drill").addRequiredSkill("screwdriver").build();
+                .addRequiredSkill("drill").addRequiredSkill("screwdriver").build();
         assertTrue(s.getRequiredSkills().containsSkill("drill"));
         assertTrue(s.getRequiredSkills().containsSkill("drill"));
         assertTrue(s.getRequiredSkills().containsSkill("ScrewDriver"));
@@ -183,7 +183,7 @@ public void whenAddingSkills_theyShouldBeAddedCorrectly() {
     @Test
     public void whenAddingSkillsCaseSens_theyShouldBeAddedCorrectly() {
         ServiceJob s = new ServiceJob.Builder("s").setLocation(Location.newInstance("loc"))
-                        .addRequiredSkill("DriLl").addRequiredSkill("screwDriver").build();
+                .addRequiredSkill("DriLl").addRequiredSkill("screwDriver").build();
         assertTrue(s.getRequiredSkills().containsSkill("drill"));
         assertTrue(s.getRequiredSkills().containsSkill("drilL"));
     }
@@ -193,9 +193,9 @@ public void whenAddingSeveralTimeWindows_itShouldBeSetCorrectly() {
         TimeWindow tw1 = TimeWindow.newInstance(1.0, 2.0);
         TimeWindow tw2 = TimeWindow.newInstance(3.0, 5.0);
         ServiceJob s = new ServiceJob.Builder("s").setLocation(Location.newInstance("loc"))
-                        .addTimeWindow(tw1)
-                        .addTimeWindow(tw2)
-                        .build();
+                .addTimeWindow(tw1)
+                .addTimeWindow(tw2)
+                .build();
         assertEquals(2, s.getActivity().getTimeWindows().size());
         assertThat(s.getActivity().getTimeWindows(), hasItem(is(tw1)));
         assertThat(s.getActivity().getTimeWindows(), hasItem(is(tw2)));
@@ -204,16 +204,16 @@ public void whenAddingSeveralTimeWindows_itShouldBeSetCorrectly() {
     @Test
     public void whenAddingTimeWindow_itShouldBeSetCorrectly() {
         ServiceJob s = new ServiceJob.Builder("s").setLocation(Location.newInstance("loc"))
-                        .addTimeWindow(TimeWindow.newInstance(1.0, 2.0)).build();
-        assertEquals(1.0, s.getActivity().getSingleTimeWindow().getStart(), 0.01);
-        assertEquals(2.0, s.getActivity().getSingleTimeWindow().getEnd(), 0.01);
+                .addTimeWindow(TimeWindow.newInstance(1.0, 2.0)).build();
+        assertEquals(1.0, s.getActivity().getTimeWindows().iterator().next().getStart(), 0.01);
+        assertEquals(2.0, s.getActivity().getTimeWindows().iterator().next().getEnd(), 0.01);
     }
 
 
     @Test
     public void whenAddingSkillsCaseSensV2_theyShouldBeAddedCorrectly() {
         ServiceJob s = new ServiceJob.Builder("s").setLocation(Location.newInstance("loc"))
-                        .addRequiredSkill("screwDriver").build();
+                .addRequiredSkill("screwDriver").build();
         assertFalse(s.getRequiredSkills().containsSkill("drill"));
         assertFalse(s.getRequiredSkills().containsSkill("drilL"));
     }
@@ -221,15 +221,15 @@ public void whenAddingSkillsCaseSensV2_theyShouldBeAddedCorrectly() {
     @Test
     public void nameShouldBeAssigned() {
         ServiceJob s = new ServiceJob.Builder("s").setLocation(Location.newInstance("loc"))
-                        .setName("name").build();
+                .setName("name").build();
         assertEquals("name", s.getName());
     }
 
     @Test
     public void shouldKnowMultipleTimeWindows() {
         ServiceJob s = new ServiceJob.Builder("s").setLocation(Location.newInstance("loc"))
-                        .addTimeWindow(TimeWindow.newInstance(0., 10.)).addTimeWindow(TimeWindow.newInstance(20., 30.))
-                        .setName("name").build();
+                .addTimeWindow(TimeWindow.newInstance(0., 10.)).addTimeWindow(TimeWindow.newInstance(20., 30.))
+                .setName("name").build();
         assertEquals(2, s.getActivity().getTimeWindows().size());
     }
 
@@ -252,21 +252,21 @@ public void whenMultipleTWOverlap2_throwEx() {
     @Test
     public void whenSettingPriorities_itShouldBeSetCorrectly() {
         ServiceJob s = new ServiceJob.Builder("s").setLocation(Location.newInstance("loc"))
-                        .setPriority(1).build();
+                .setPriority(1).build();
         assertEquals(1, s.getPriority());
     }
 
     @Test
     public void whenSettingPriorities_itShouldBeSetCorrectly2() {
         ServiceJob s = new ServiceJob.Builder("s").setLocation(Location.newInstance("loc"))
-                        .setPriority(3).build();
+                .setPriority(3).build();
         assertEquals(3, s.getPriority());
     }
 
     @Test
     public void whenNotSettingPriorities_defaultShouldBe2() {
         ServiceJob s = new ServiceJob.Builder("s").setLocation(Location.newInstance("loc"))
-                        .build();
+                .build();
         assertEquals(2, s.getPriority());
     }
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ShipmentJobTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ShipmentJobTest.java
index 6b1259eed..384fdeb6b 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ShipmentJobTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ShipmentJobTest.java
@@ -38,9 +38,9 @@
     @Test
     public void whenTwoShipmentsHaveTheSameId_theyReferencesShouldBeUnEqual() {
         ShipmentJob one = new ShipmentJob.Builder("s").addSizeDimension(0, 10).setPickupLocation(Location.Builder.newInstance().setId("foo").build()).
-                        setDeliveryLocation(TestUtils.loc("foofoo")).setPickupServiceTime(10).setDeliveryServiceTime(20).build();
+                setDeliveryLocation(TestUtils.loc("foofoo")).setPickupServiceTime(10).setDeliveryServiceTime(20).build();
         ShipmentJob two = new ShipmentJob.Builder("s").addSizeDimension(0, 10).setPickupLocation(Location.Builder.newInstance().setId("foo").build()).
-                        setDeliveryLocation(TestUtils.loc("foofoo")).setPickupServiceTime(10).setDeliveryServiceTime(20).build();
+                setDeliveryLocation(TestUtils.loc("foofoo")).setPickupServiceTime(10).setDeliveryServiceTime(20).build();
 
         assertTrue(one != two);
     }
@@ -48,7 +48,7 @@ public void whenTwoShipmentsHaveTheSameId_theyReferencesShouldBeUnEqual() {
     @Test
     public void sizeAtStartAndEndShouldBeCorrect() {
         ShipmentJob one = new ShipmentJob.Builder("s").addSizeDimension(0, 10).addSizeDimension(1, 5).setPickupLocation(Location.Builder.newInstance().setId("foo").build()).
-                        setDeliveryLocation(TestUtils.loc("foofoo")).setPickupServiceTime(10).setDeliveryServiceTime(20).build();
+                setDeliveryLocation(TestUtils.loc("foofoo")).setPickupServiceTime(10).setDeliveryServiceTime(20).build();
         SizeDimension cap = SizeDimension.Builder.newInstance().addDimension(0, 0).addDimension(1, 0).build();
         assertTrue(one.getSizeAtStart().equals(cap));
         assertTrue(one.getSizeAtEnd().equals(cap));
@@ -57,9 +57,9 @@ public void sizeAtStartAndEndShouldBeCorrect() {
     @Test
     public void whenTwoShipmentsHaveTheSameId_theyShouldBeEqual() {
         ShipmentJob one = new ShipmentJob.Builder("s").addSizeDimension(0, 10).setPickupLocation(Location.Builder.newInstance().setId("foo").build()).
-                        setDeliveryLocation(TestUtils.loc("foofoo")).setPickupServiceTime(10).setDeliveryServiceTime(20).build();
+                setDeliveryLocation(TestUtils.loc("foofoo")).setPickupServiceTime(10).setDeliveryServiceTime(20).build();
         ShipmentJob two = new ShipmentJob.Builder("s").addSizeDimension(0, 10).setPickupLocation(Location.Builder.newInstance().setId("foo").build()).
-                        setDeliveryLocation(TestUtils.loc("foofoo")).setPickupServiceTime(10).setDeliveryServiceTime(20).build();
+                setDeliveryLocation(TestUtils.loc("foofoo")).setPickupServiceTime(10).setDeliveryServiceTime(20).build();
 
         assertTrue(one.equals(two));
     }
@@ -67,7 +67,7 @@ public void whenTwoShipmentsHaveTheSameId_theyShouldBeEqual() {
     @Test
     public void whenShipmentIsInstantiatedWithASizeOf10_theSizeShouldBe10() {
         ShipmentJob one = new ShipmentJob.Builder("s").addSizeDimension(0, 10).setPickupLocation(Location.Builder.newInstance().setId("foo").build()).
-                        setDeliveryLocation(TestUtils.loc("foofoo")).setPickupServiceTime(10).setDeliveryServiceTime(20).build();
+                setDeliveryLocation(TestUtils.loc("foofoo")).setPickupServiceTime(10).setDeliveryServiceTime(20).build();
         assertEquals(10, one.getSize().get(0));
     }
 
@@ -129,7 +129,7 @@ public void whenPickupLocationIsNull_itThrowsException() {
     @Test
     public void whenPickupCoordIsSet_itShouldBeDoneCorrectly() {
         ShipmentJob s = new ShipmentJob.Builder("s")
-                        .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").setCoordinate(Coordinate.newInstance(1, 2)).build()).build();
+                .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").setCoordinate(Coordinate.newInstance(1, 2)).build()).build();
         assertEquals(1.0, s.getPickupActivity().getLocation().getCoordinate().getX(), 0.01);
         assertEquals(2.0, s.getPickupActivity().getLocation().getCoordinate().getY(), 0.01);
         assertEquals(1.0, s.getPickupActivity().getLocation().getCoordinate().getX(), 0.01);
@@ -140,7 +140,7 @@ public void whenPickupCoordIsSet_itShouldBeDoneCorrectly() {
     @Test
     public void whenDeliveryLocationIdIsSet_itShouldBeDoneCorrectly() {
         ShipmentJob s = new ShipmentJob.Builder("s")
-                        .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+                .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         assertEquals("delLoc", s.getDeliveryActivity().getLocation().getId());
         assertEquals("delLoc", s.getDeliveryActivity().getLocation().getId());
     }
@@ -149,8 +149,8 @@ public void whenDeliveryLocationIdIsSet_itShouldBeDoneCorrectly() {
     @Test
     public void whenDeliveryCoordIsSet_itShouldBeDoneCorrectly() {
         ShipmentJob s = new ShipmentJob.Builder("s").setDeliveryLocation(TestUtils.loc("delLoc", Coordinate.newInstance(1, 2)))
-                        .setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build())
-                        .build();
+                .setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build())
+                .build();
         assertEquals(1.0, s.getDeliveryActivity().getLocation().getCoordinate().getX(), 0.01);
         assertEquals(2.0, s.getDeliveryActivity().getLocation().getCoordinate().getY(), 0.01);
         assertEquals(1.0, s.getDeliveryActivity().getLocation().getCoordinate().getX(), 0.01);
@@ -160,22 +160,22 @@ public void whenDeliveryCoordIsSet_itShouldBeDoneCorrectly() {
     @Test
     public void whenPickupServiceTimeIsNotSet_itShouldBeZero() {
         ShipmentJob s = new ShipmentJob.Builder("s")
-                        .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+                .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         assertEquals(0.0, s.getPickupActivity().getOperationTime(), 0.01);
     }
 
     @Test
     public void whenDeliveryServiceTimeIsNotSet_itShouldBeZero() {
         ShipmentJob s = new ShipmentJob.Builder("s")
-                        .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+                .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         assertEquals(0.0, s.getDeliveryActivity().getOperationTime(), 0.01);
     }
 
     @Test
     public void whenPickupServiceTimeIsSet_itShouldBeDoneCorrectly() {
         ShipmentJob s = new ShipmentJob.Builder("s")
-                        .setPickupServiceTime(2.0)
-                        .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+                .setPickupServiceTime(2.0)
+                .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         assertEquals(2.0, s.getPickupActivity().getOperationTime(), 0.01);
     }
 
@@ -189,7 +189,7 @@ public void whenPickupServiceIsSmallerThanZero_itShouldThrowException() {
     @Test
     public void whenDeliveryServiceTimeIsSet_itShouldBeDoneCorrectly() {
         ShipmentJob s = new ShipmentJob.Builder("s").setDeliveryServiceTime(2.0)
-                        .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+                .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         assertEquals(2.0, s.getDeliveryActivity().getOperationTime(), 0.01);
     }
 
@@ -202,10 +202,10 @@ public void whenDeliveryServiceIsSmallerThanZero_itShouldThrowException() {
     @Test
     public void whenPickupTimeWindowIsNotSet_itShouldBeTheDefaultOne() {
         ShipmentJob s = new ShipmentJob.Builder("s").setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
-        assertEquals(0.0, s.getPickupActivity().getSingleTimeWindow().getStart(),
-                        0.01);
+        assertEquals(0.0, s.getPickupActivity().getTimeWindows().iterator().next().getStart(),
+                0.01);
         assertEquals(Double.MAX_VALUE,
-                        s.getPickupActivity().getSingleTimeWindow().getEnd(), 0.01);
+                s.getPickupActivity().getTimeWindows().iterator().next().getEnd(), 0.01);
     }
 
     @Test(expected = IllegalArgumentException.class)
@@ -217,19 +217,19 @@ public void whenPickupTimeWindowIsNull_itShouldThrowException() {
     @Test
     public void whenPickupTimeWindowIsSet_itShouldBeDoneCorrectly() {
         ShipmentJob s = new ShipmentJob.Builder("s").setPickupTimeWindow(TimeWindow.newInstance(1, 2))
-                        .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
-        assertEquals(1.0, s.getPickupActivity().getSingleTimeWindow().getStart(),
-                        0.01);
-        assertEquals(2.0, s.getPickupActivity().getSingleTimeWindow().getEnd(), 0.01);
+                .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        assertEquals(1.0, s.getPickupActivity().getTimeWindows().iterator().next().getStart(),
+                0.01);
+        assertEquals(2.0, s.getPickupActivity().getTimeWindows().iterator().next().getEnd(), 0.01);
     }
 
     @Test
     public void whenDeliveryTimeWindowIsNotSet_itShouldBeTheDefaultOne() {
         ShipmentJob s = new ShipmentJob.Builder("s").setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
-        assertEquals(0.0, s.getDeliveryActivity().getSingleTimeWindow().getStart(),
-                        0.01);
+        assertEquals(0.0, s.getDeliveryActivity().getTimeWindows().iterator().next().getStart(),
+                0.01);
         assertEquals(Double.MAX_VALUE,
-                        s.getDeliveryActivity().getSingleTimeWindow().getEnd(), 0.01);
+                s.getDeliveryActivity().getTimeWindows().iterator().next().getEnd(), 0.01);
     }
 
     @Test(expected = IllegalArgumentException.class)
@@ -241,31 +241,31 @@ public void whenDeliveryTimeWindowIsNull_itShouldThrowException() {
     @Test
     public void whenDeliveryTimeWindowIsSet_itShouldBeDoneCorrectly() {
         ShipmentJob s = new ShipmentJob.Builder("s").setDeliveryTimeWindow(TimeWindow.newInstance(1, 2))
-                        .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
-        assertEquals(1.0, s.getDeliveryActivity().getSingleTimeWindow().getStart(),
-                        0.01);
-        assertEquals(2.0, s.getDeliveryActivity().getSingleTimeWindow().getEnd(),
-                        0.01);
+                .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        assertEquals(1.0, s.getDeliveryActivity().getTimeWindows().iterator().next().getStart(),
+                0.01);
+        assertEquals(2.0, s.getDeliveryActivity().getTimeWindows().iterator().next().getEnd(),
+                0.01);
     }
 
     @Test
     public void whenUsingAddDeliveryTimeWindow_itShouldBeDoneCorrectly() {
         ShipmentJob s = new ShipmentJob.Builder("s").addDeliveryTimeWindow(TimeWindow.newInstance(1, 2))
-                        .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
-        assertEquals(1.0, s.getDeliveryActivity().getSingleTimeWindow().getStart(),
-                        0.01);
-        assertEquals(2.0, s.getDeliveryActivity().getSingleTimeWindow().getEnd(),
-                        0.01);
+                .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        assertEquals(1.0, s.getDeliveryActivity().getTimeWindows().iterator().next().getStart(),
+                0.01);
+        assertEquals(2.0, s.getDeliveryActivity().getTimeWindows().iterator().next().getEnd(),
+                0.01);
     }
 
     @Test
     public void whenUsingAddDeliveryTimeWindow2_itShouldBeDoneCorrectly() {
         ShipmentJob s = new ShipmentJob.Builder("s").addDeliveryTimeWindow(1, 2)
-                        .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
-        assertEquals(1.0, s.getDeliveryActivity().getSingleTimeWindow().getStart(),
-                        0.01);
-        assertEquals(2.0, s.getDeliveryActivity().getSingleTimeWindow().getEnd(),
-                        0.01);
+                .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        assertEquals(1.0, s.getDeliveryActivity().getTimeWindows().iterator().next().getStart(),
+                0.01);
+        assertEquals(2.0, s.getDeliveryActivity().getTimeWindows().iterator().next().getEnd(),
+                0.01);
     }
 
     @Test
@@ -273,7 +273,7 @@ public void whenAddingMultipleDeliveryTimeWindows_itShouldBeDoneCorrectly() {
         TimeWindow tw1 = TimeWindow.newInstance(1, 2);
         TimeWindow tw2 = TimeWindow.newInstance(4, 5);
         ShipmentJob s = new ShipmentJob.Builder("s").addDeliveryTimeWindow(tw1).addDeliveryTimeWindow(tw2)
-                        .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+                .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         assertEquals(s.getDeliveryActivity().getTimeWindows().size(), 2);
         assertThat(s.getDeliveryActivity().getTimeWindows(), hasItem(is(tw1)));
         assertThat(s.getDeliveryActivity().getTimeWindows(), hasItem(is(tw2)));
@@ -281,31 +281,31 @@ public void whenAddingMultipleDeliveryTimeWindows_itShouldBeDoneCorrectly() {
 
     @Test(expected = IllegalArgumentException.class)
     public void whenAddingMultipleOverlappingDeliveryTimeWindows_itShouldThrowException() {
-        ShipmentJob s = new ShipmentJob.Builder("s").addDeliveryTimeWindow(1, 3).addDeliveryTimeWindow(2, 5)
-                        .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
-        assertEquals(1.0, s.getDeliveryActivity().getSingleTimeWindow().getStart(),
-                        0.01);
-        assertEquals(2.0, s.getDeliveryActivity().getSingleTimeWindow().getEnd(),
-                        0.01);
+        ShipmentJob s = new ShipmentJob.Builder("s")
+                .addDeliveryTimeWindow(1, 3)
+                .addDeliveryTimeWindow(2, 5)
+                .setDeliveryLocation(TestUtils.loc("delLoc"))
+                .setPickupLocation(Location.newInstance("pickLoc"))
+                .build();
     }
 
 
     @Test
     public void whenUsingAddPickupTimeWindow_itShouldBeDoneCorrectly() {
         ShipmentJob s = new ShipmentJob.Builder("s").addPickupTimeWindow(TimeWindow.newInstance(1, 2))
-                        .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
-        assertEquals(1.0, s.getPickupActivity().getSingleTimeWindow().getStart(),
-                        0.01);
-        assertEquals(2.0, s.getPickupActivity().getSingleTimeWindow().getEnd(), 0.01);
+                .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        assertEquals(1.0, s.getPickupActivity().getTimeWindows().iterator().next().getStart(),
+                0.01);
+        assertEquals(2.0, s.getPickupActivity().getTimeWindows().iterator().next().getEnd(), 0.01);
     }
 
     @Test
     public void whenUsingAddPickupTimeWindow2_itShouldBeDoneCorrectly() {
         ShipmentJob s = new ShipmentJob.Builder("s").addPickupTimeWindow(1, 2)
-                        .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
-        assertEquals(1.0, s.getPickupActivity().getSingleTimeWindow().getStart(),
-                        0.01);
-        assertEquals(2.0, s.getPickupActivity().getSingleTimeWindow().getEnd(), 0.01);
+                .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+        assertEquals(1.0, s.getPickupActivity().getTimeWindows().iterator().next().getStart(),
+                0.01);
+        assertEquals(2.0, s.getPickupActivity().getTimeWindows().iterator().next().getEnd(), 0.01);
     }
 
     @Test
@@ -313,7 +313,7 @@ public void whenAddingMultiplePickupTimeWindows_itShouldBeDoneCorrectly() {
         TimeWindow tw1 = TimeWindow.newInstance(1, 2);
         TimeWindow tw2 = TimeWindow.newInstance(4, 5);
         ShipmentJob s = new ShipmentJob.Builder("s").addPickupTimeWindow(tw1).addPickupTimeWindow(tw2)
-                        .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
+                .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
         assertEquals(s.getPickupActivity().getTimeWindows().size(), 2);
         assertThat(s.getPickupActivity().getTimeWindows(), hasItem(is(tw1)));
         assertThat(s.getPickupActivity().getTimeWindows(), hasItem(is(tw2)));
@@ -321,10 +321,11 @@ public void whenAddingMultiplePickupTimeWindows_itShouldBeDoneCorrectly() {
 
     @Test(expected = IllegalArgumentException.class)
     public void whenAddingMultipleOverlappingPickupTimeWindows_itShouldThrowException() {
-        ShipmentJob s = new ShipmentJob.Builder("s").addPickupTimeWindow(1, 3).addPickupTimeWindow(2, 5)
-                        .setDeliveryLocation(TestUtils.loc("delLoc")).setPickupLocation(Location.Builder.newInstance().setId("pickLoc").build()).build();
-        assertEquals(1.0, s.getPickupActivity().getSingleTimeWindow().getStart(), 0.01);
-        assertEquals(2.0, s.getPickupActivity().getSingleTimeWindow().getEnd(), 0.01);
+        ShipmentJob s = new ShipmentJob.Builder("s")
+                .addPickupTimeWindow(1, 3)
+                .addPickupTimeWindow(2, 5)
+                .setDeliveryLocation(TestUtils.loc("delLoc"))
+                .setPickupLocation(Location.newInstance("pickLoc")).build();
     }
 
 
@@ -340,18 +341,18 @@ public void whenShipmentHasNegativeCapacityVal_throwIllegalStateExpception() {
     @Test
     public void whenAddingTwoCapDimension_nuOfDimsShouldBeTwo() {
         ShipmentJob one = new ShipmentJob.Builder("s").setPickupLocation(Location.Builder.newInstance().setId("foo").build())
-                        .setDeliveryLocation(TestUtils.loc("foofoo"))
-                        .addSizeDimension(0, 2)
-                        .addSizeDimension(1, 4)
-                        .build();
+                .setDeliveryLocation(TestUtils.loc("foofoo"))
+                .addSizeDimension(0, 2)
+                .addSizeDimension(1, 4)
+                .build();
         assertEquals(2, one.getSize().getNuOfDimensions());
     }
 
     @Test
     public void whenShipmentIsBuiltWithoutSpecifyingCapacity_itShouldHvCapWithOneDimAndDimValOfZero() {
         ShipmentJob one = new ShipmentJob.Builder("s")
-                        .setPickupLocation(Location.Builder.newInstance().setId("foo").setCoordinate(Coordinate.newInstance(0, 0)).build())
-                        .setDeliveryLocation(TestUtils.loc("foofoo")).build();
+                .setPickupLocation(Location.Builder.newInstance().setId("foo").setCoordinate(Coordinate.newInstance(0, 0)).build())
+                .setDeliveryLocation(TestUtils.loc("foofoo")).build();
         assertEquals(1, one.getSize().getNuOfDimensions());
         assertEquals(0, one.getSize().get(0));
     }
@@ -359,8 +360,8 @@ public void whenShipmentIsBuiltWithoutSpecifyingCapacity_itShouldHvCapWithOneDim
     @Test
     public void whenShipmentIsBuiltWithConstructorWhereSizeIsSpecified_capacityShouldBeSetCorrectly() {
         ShipmentJob one = new ShipmentJob.Builder("s").addSizeDimension(0, 1)
-                        .setPickupLocation(Location.Builder.newInstance().setId("foo").setCoordinate(Coordinate.newInstance(0, 0)).build())
-                        .setDeliveryLocation(TestUtils.loc("foofoo")).build();
+                .setPickupLocation(Location.Builder.newInstance().setId("foo").setCoordinate(Coordinate.newInstance(0, 0)).build())
+                .setDeliveryLocation(TestUtils.loc("foofoo")).build();
         assertEquals(1, one.getSize().getNuOfDimensions());
         assertEquals(1, one.getSize().get(0));
     }
@@ -368,8 +369,8 @@ public void whenShipmentIsBuiltWithConstructorWhereSizeIsSpecified_capacityShoul
     @Test
     public void whenAddingSkills_theyShouldBeAddedCorrectly() {
         ShipmentJob s = new ShipmentJob.Builder("s").setPickupLocation(Location.Builder.newInstance().setId("loc").build())
-                        .setDeliveryLocation(TestUtils.loc("delLoc"))
-                        .addRequiredSkill("drill").addRequiredSkill("screwdriver").build();
+                .setDeliveryLocation(TestUtils.loc("delLoc"))
+                .addRequiredSkill("drill").addRequiredSkill("screwdriver").build();
         assertTrue(s.getRequiredSkills().containsSkill("drill"));
         assertTrue(s.getRequiredSkills().containsSkill("drill"));
         assertTrue(s.getRequiredSkills().containsSkill("ScrewDriver"));
@@ -378,9 +379,9 @@ public void whenAddingSkills_theyShouldBeAddedCorrectly() {
     @Test
     public void whenAddingSkillsCaseSens_theyShouldBeAddedCorrectly() {
         ShipmentJob s = new ShipmentJob.Builder("s")
-                        .setPickupLocation(Location.Builder.newInstance().setId("pick").build())
-                        .setDeliveryLocation(TestUtils.loc("del"))
-                        .addRequiredSkill("DriLl").addRequiredSkill("screwDriver").build();
+                .setPickupLocation(Location.Builder.newInstance().setId("pick").build())
+                .setDeliveryLocation(TestUtils.loc("del"))
+                .addRequiredSkill("DriLl").addRequiredSkill("screwDriver").build();
         assertTrue(s.getRequiredSkills().containsSkill("drill"));
         assertTrue(s.getRequiredSkills().containsSkill("drilL"));
     }
@@ -388,8 +389,8 @@ public void whenAddingSkillsCaseSens_theyShouldBeAddedCorrectly() {
     @Test
     public void whenAddingSkillsCaseSensV2_theyShouldBeAddedCorrectly() {
         ShipmentJob s = new ShipmentJob.Builder("s").setPickupLocation(Location.Builder.newInstance().setId("loc").build())
-                        .setDeliveryLocation(TestUtils.loc("del"))
-                        .addRequiredSkill("screwDriver").build();
+                .setDeliveryLocation(TestUtils.loc("del"))
+                .addRequiredSkill("screwDriver").build();
         assertFalse(s.getRequiredSkills().containsSkill("drill"));
         assertFalse(s.getRequiredSkills().containsSkill("drilL"));
     }
@@ -397,15 +398,15 @@ public void whenAddingSkillsCaseSensV2_theyShouldBeAddedCorrectly() {
     @Test
     public void nameShouldBeAssigned() {
         ShipmentJob s = new ShipmentJob.Builder("s").setPickupLocation(Location.Builder.newInstance().setId("loc").build())
-                        .setDeliveryLocation(TestUtils.loc("del"))
-                        .setName("name").build();
+                .setDeliveryLocation(TestUtils.loc("del"))
+                .setName("name").build();
         assertEquals("name", s.getName());
     }
 
     @Test
     public void whenSettingLocation_itShouldWork() {
         ShipmentJob s = new ShipmentJob.Builder("s").setPickupLocation(Location.Builder.newInstance().setId("loc").build())
-                        .setDeliveryLocation(Location.Builder.newInstance().setId("del").build()).build();
+                .setDeliveryLocation(Location.Builder.newInstance().setId("del").build()).build();
         assertEquals("loc", s.getPickupActivity().getLocation().getId());
         assertEquals("loc", s.getPickupActivity().getLocation().getId());
         assertEquals("del", s.getDeliveryActivity().getLocation().getId());
@@ -415,24 +416,24 @@ public void whenSettingLocation_itShouldWork() {
     @Test
     public void whenSettingPriorities_itShouldBeSetCorrectly() {
         ShipmentJob s = new ShipmentJob.Builder("s").setPickupLocation(Location.newInstance("loc"))
-                        .setDeliveryLocation(Location.newInstance("loc"))
-                        .setPriority(1).build();
+                .setDeliveryLocation(Location.newInstance("loc"))
+                .setPriority(1).build();
         assertEquals(1, s.getPriority());
     }
 
     @Test
     public void whenSettingPriorities_itShouldBeSetCorrectly2() {
         ShipmentJob s = new ShipmentJob.Builder("s").setPickupLocation(Location.newInstance("loc"))
-                        .setDeliveryLocation(Location.newInstance("loc"))
-                        .setPriority(3).build();
+                .setDeliveryLocation(Location.newInstance("loc"))
+                .setPriority(3).build();
         assertEquals(3, s.getPriority());
     }
 
     @Test
     public void whenNotSettingPriorities_defaultShouldBe2() {
         ShipmentJob s = new ShipmentJob.Builder("s").setPickupLocation(Location.newInstance("loc"))
-                        .setDeliveryLocation(Location.newInstance("loc"))
-                        .build();
+                .setDeliveryLocation(Location.newInstance("loc"))
+                .build();
         assertEquals(2, s.getPriority());
     }
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRouteBuilderTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRouteBuilderTest.java
index 159267649..96fef67d6 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRouteBuilderTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRouteBuilderTest.java
@@ -37,7 +37,7 @@
     @Test(expected = IllegalArgumentException.class)
     public void whenDeliveryIsAddedBeforePickup_throwsException() {
         ShipmentJob s = new ShipmentJob.Builder("s")
-                        .setDeliveryLocation(Location.newInstance("loc1")).build();
+                .setDeliveryLocation(Location.newInstance("loc1")).build();
         VehicleRoute.Builder builder = VehicleRoute.Builder.newInstance(mock(Vehicle.class), mock(Driver.class));
         builder.addDelivery(s);
     }
@@ -92,7 +92,7 @@ public void whenBuildingClosedRoute_routeEndShouldHaveLocationOfVehicle() {
         ShipmentJob s2 = createStandardShipment("s2").build();
 
         Vehicle vehicle = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance("vehLoc")).setEndLocation(Location.newInstance("vehLoc"))
-                        .build();
+                .build();
 
         VehicleRoute.Builder builder = VehicleRoute.Builder.newInstance(vehicle, mock(Driver.class));
         builder.addPickup(s);
@@ -118,7 +118,7 @@ public void whenBuildingOpenRoute_routeEndShouldHaveLocationOfLastActivity() {
         builder.addDelivery(s2);
         VehicleRoute route = builder.build();
         assertEquals(route.getEnd().getLocation().getId(),
-                        s2.getDeliveryActivity().getLocation().getId());
+                s2.getDeliveryActivity().getLocation().getId());
     }
 
     private Location loc(String delLoc) {
@@ -148,11 +148,11 @@ protected Builder createStandardShipment(String name) {
         Location loc = Location.Builder.newInstance().setId("delLoc").build();
         TimeWindow tw = TimeWindow.newInstance(0, 10);
         return new ShipmentJob.Builder(name)
-                        .addSizeDimension(0, 10)
-                        .setPickupTimeWindow(tw)
-                        .setDeliveryTimeWindow(tw)
-                        .setPickupLocation(loc)
-                        .setDeliveryLocation(loc);
+                .addSizeDimension(0, 10)
+                .setPickupTimeWindow(tw)
+                .setDeliveryTimeWindow(tw)
+                .setPickupLocation(loc)
+                .setDeliveryLocation(loc);
     }
 
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivityTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivityTest.java
index a53477fcf..07429e1eb 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivityTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivityTest.java
@@ -40,13 +40,13 @@
     @Before
     public void doBefore() {
         Builder breakBuilder = new Break.Builder("service")
-                        .setTimeWindow(TimeWindow.newInstance(1., 2.)).setServiceTime(3);
+                .setTimeWindow(TimeWindow.newInstance(1., 2.)).setServiceTime(3);
         service = breakBuilder.build();
         serviceActivity = BreakActivity.newInstance(service, breakBuilder);
         serviceActivity.setTheoreticalEarliestOperationStartTime(
-                        service.getActivity().getBreakTimeWindow().getStart());
+                service.getActivity().getBreakTimeWindow().getStart());
         serviceActivity.setTheoreticalLatestOperationStartTime(
-                        service.getActivity().getBreakTimeWindow().getEnd());
+                service.getActivity().getBreakTimeWindow().getEnd());
     }
 
     @Test
@@ -99,11 +99,11 @@ public void whenTwoDeliveriesHaveTheSameUnderlyingJob_theyAreEqual() {
         ServiceJob s1 = new ServiceJob.Builder("s").setLocation(loc).build();
         ServiceJob s2 = new ServiceJob.Builder("s").setLocation(loc).build();
         ServiceActivity d1 = new ServiceActivity(s1, "s1",
-                        loc, 0d, SizeDimension.EMPTY,
-                        TimeWindows.ANY_TIME.getTimeWindows());
+                loc, 0d, SizeDimension.EMPTY,
+                TimeWindows.ANY_TIME.getTimeWindows());
         ServiceActivity d2 = new ServiceActivity(s2, "s2",
-                        loc, 0d, SizeDimension.EMPTY,
-                        TimeWindows.ANY_TIME.getTimeWindows());
+                loc, 0d, SizeDimension.EMPTY,
+                TimeWindows.ANY_TIME.getTimeWindows());
 
         assertTrue(d1.equals(d2));
     }
@@ -114,11 +114,11 @@ public void whenTwoDeliveriesHaveTheDifferentUnderlyingJob_theyAreNotEqual() {
         ServiceJob s1 = new ServiceJob.Builder("s").setLocation(loc).build();
         ServiceJob s2 = new ServiceJob.Builder("s2").setLocation(loc).build();
         ServiceActivity d1 = new ServiceActivity(s1, "s1",
-                        loc, 0d, SizeDimension.EMPTY,
-                        TimeWindows.ANY_TIME.getTimeWindows());
+                loc, 0d, SizeDimension.EMPTY,
+                TimeWindows.ANY_TIME.getTimeWindows());
         ServiceActivity d2 = new ServiceActivity(s2, "s2",
-                        loc, 0d, SizeDimension.EMPTY,
-                        TimeWindows.ANY_TIME.getTimeWindows());
+                loc, 0d, SizeDimension.EMPTY,
+                TimeWindows.ANY_TIME.getTimeWindows());
 
         assertFalse(d1.equals(d2));
     }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/JobActivityTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/JobActivityTest.java
index 658179a06..348043b7a 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/JobActivityTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/JobActivityTest.java
@@ -33,9 +33,9 @@ public void createActivity(AbstractSingleActivityJob<?> service) {
         this.service = service;
         activity = service.getActivity();
         activity.setTheoreticalEarliestOperationStartTime(
-                        activity.getSingleTimeWindow().getStart());
+                activity.getTimeWindows().iterator().next().getStart());
         activity.setTheoreticalLatestOperationStartTime(
-                        activity.getSingleTimeWindow().getEnd());
+                activity.getTimeWindows().iterator().next().getEnd());
     }
 
     @Test
diff --git a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/LopezIbanezBlumReader.java b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/LopezIbanezBlumReader.java
index 807dec90f..f2e231d2b 100644
--- a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/LopezIbanezBlumReader.java
+++ b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/LopezIbanezBlumReader.java
@@ -91,6 +91,10 @@ public void read(String instanceFile) {
         close(reader);
     }
 
+    private static TimeWindow getFirstTimeWindow(ServiceJob job) {
+        return job.getActivity().getTimeWindows().iterator().next();
+    }
+
     public static void main(String[] args) {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new LopezIbanezBlumReader(builder).read("input/Dumas/n20w20.001.txt");
@@ -99,12 +103,12 @@ public static void main(String[] args) {
         System.out.println("0->20: " + vrp.getTransportCosts().getTransportCost(Location.newInstance(0), Location.newInstance(20), 0, null, null));
         System.out.println("4->18: " + vrp.getTransportCosts().getTransportCost(Location.newInstance(4), Location.newInstance(18), 0, null, null));
         System.out.println("20->8: " + vrp.getTransportCosts().getTransportCost(Location.newInstance(20), Location.newInstance(8), 0, null, null));
-        System.out.println("18: " + ((ServiceJob) vrp.getJobs().get("" + 18)).getActivity().getSingleTimeWindow().getStart() + " "
-                + ((ServiceJob) vrp.getJobs().get("" + 18)).getActivity().getSingleTimeWindow().getEnd());
-        System.out.println("20: " + ((ServiceJob) vrp.getJobs().get("" + 20)).getActivity().getSingleTimeWindow().getStart() + " "
-                + ((ServiceJob) vrp.getJobs().get("" + 20)).getActivity().getSingleTimeWindow().getEnd());
-        System.out.println("1: " + ((ServiceJob) vrp.getJobs().get("" + 1)).getActivity().getSingleTimeWindow().getStart() + " "
-                + ((ServiceJob) vrp.getJobs().get("" + 1)).getActivity().getSingleTimeWindow().getEnd());
+        System.out.println("18: " + getFirstTimeWindow(((ServiceJob) vrp.getJobs().get("" + 18))).getStart() + " "
+                + getFirstTimeWindow(((ServiceJob) vrp.getJobs().get("" + 18))).getEnd());
+        System.out.println("20: " + getFirstTimeWindow(((ServiceJob) vrp.getJobs().get("" + 20))).getStart() + " "
+                + getFirstTimeWindow(((ServiceJob) vrp.getJobs().get("" + 20))).getEnd());
+        System.out.println("1: " + getFirstTimeWindow(((ServiceJob) vrp.getJobs().get("" + 1))).getStart() + " "
+                + getFirstTimeWindow(((ServiceJob) vrp.getJobs().get("" + 1))).getEnd());
     }
 
     private void close(BufferedReader reader) {
diff --git a/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/SolomonReaderTest.java b/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/SolomonReaderTest.java
index 4fd684545..344afadef 100644
--- a/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/SolomonReaderTest.java
+++ b/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/SolomonReaderTest.java
@@ -41,9 +41,8 @@ public void whenReadingSolomonInstance_nuOfCustomersIsCorrect() {
 
     private String getPath() {
         URL resource = getClass().getClassLoader().getResource("C101_solomon.txt");
-        if (resource == null) {
+        if (resource == null)
             throw new IllegalStateException("file C101_solomon.txt does not exist");
-        }
         return resource.getPath();
     }
 
@@ -97,7 +96,9 @@ public void whenReadingSolomonInstance_earliestServiceStartTimeOfCustomerSixtyTw
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new SolomonReader(builder).read(getPath());
         VehicleRoutingProblem vrp = builder.build();
-        assertEquals(262.0, ((ServiceJob) vrp.getJobs().get("62")).getActivity().getSingleTimeWindow().getStart(), 0.1);
+        assertEquals(262.0,
+                ((ServiceJob) vrp.getJobs().get("62")).getActivity().getTimeWindows().iterator().next().getStart(),
+                0.1);
     }
 
     @Test
@@ -105,7 +106,8 @@ public void whenReadingSolomonInstance_latestServiceStartTimeOfCustomerEightySev
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new SolomonReader(builder).read(getPath());
         VehicleRoutingProblem vrp = builder.build();
-        assertEquals(144.0, ((ServiceJob) vrp.getJobs().get("87")).getActivity().getSingleTimeWindow().getEnd(), 0.1);
+        assertEquals(144.0,
+                ((ServiceJob) vrp.getJobs().get("87")).getActivity().getTimeWindows().iterator().next().getEnd(), 0.1);
     }
 
 
diff --git a/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLReaderTest.java b/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLReaderTest.java
index 28189552e..3197dc485 100644
--- a/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLReaderTest.java
+++ b/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLReaderTest.java
@@ -146,15 +146,14 @@ public void whenReadingVehicles_nuSkillsOfV2ShouldBeCorrect() {
 
     private Vehicle getVehicle(String string, Collection<Vehicle> vehicles) {
         for (Vehicle v : vehicles) {
-            if (string.equals(v.getId())) {
+            if (string.equals(v.getId()))
                 return v;
-            }
         }
         return null;
     }
 
     private boolean idsInCollection(List<String> asList, Collection<Vehicle> vehicles) {
-        List<String> ids = new ArrayList<String>(asList);
+        List<String> ids = new ArrayList<>(asList);
         for (Vehicle v : vehicles) {
             if (ids.contains(v.getId())) {
                 ids.remove(v.getId());
@@ -311,7 +310,7 @@ public void whenReadingServices_twOfService1IsReadCorrectly() {
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
         ServiceJob s1 = (ServiceJob) vrp.getJobs().get("1");
-        TimeWindow tw = s1.getActivity().getSingleTimeWindow();
+        TimeWindow tw = s1.getActivity().getTimeWindows().iterator().next();
         assertEquals(0.0, tw.getStart(), 0.01);
         assertEquals(4000.0, tw.getEnd(), 0.01);
     }
@@ -474,7 +473,7 @@ public void whenReadingJobs_pickupTimeWindowOfShipment3IsReadCorrectly() {
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
         ShipmentJob s = (ShipmentJob) vrp.getJobs().get("3");
-        TimeWindow tw = s.getPickupActivity().getSingleTimeWindow();
+        TimeWindow tw = s.getPickupActivity().getTimeWindows().iterator().next();
         assertEquals(1000.0, tw.getStart(), 0.01);
         assertEquals(4000.0, tw.getEnd(), 0.01);
     }
@@ -485,7 +484,7 @@ public void whenReadingJobs_deliveryTimeWindowOfShipment3IsReadCorrectly() {
         new VrpXMLReader(builder, null).read(inputStream);
         VehicleRoutingProblem vrp = builder.build();
         ShipmentJob s = (ShipmentJob) vrp.getJobs().get("3");
-        TimeWindow tw = s.getDeliveryActivity().getSingleTimeWindow();
+        TimeWindow tw = s.getDeliveryActivity().getTimeWindows().iterator().next();
         assertEquals(6000.0, tw.getStart(), 0.01);
         assertEquals(10000.0, tw.getEnd(), 0.01);
     }
@@ -624,7 +623,7 @@ public void whenReadingInitialRoute_nuActivitiesShouldBeCorrect() {
     @Test
     public void testRead_ifReaderIsCalled_itReadsSuccessfullyV2() {
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
-        ArrayList<VehicleRoutingProblemSolution> solutions = new ArrayList<VehicleRoutingProblemSolution>();
+        ArrayList<VehicleRoutingProblemSolution> solutions = new ArrayList<>();
         new VrpXMLReader(vrpBuilder, solutions).read(getClass().getResourceAsStream("finiteVrpWithShipmentsAndSolution.xml"));
         VehicleRoutingProblem vrp = vrpBuilder.build();
         assertEquals(4, vrp.getJobs().size());
@@ -642,7 +641,7 @@ public void testRead_ifReaderIsCalled_itReadsSuccessfullyV2() {
     @Test
     public void testRead_ifReaderIsCalled_itReadsSuccessfully() {
         new VrpXMLReader(VehicleRoutingProblem.Builder.newInstance(), new ArrayList<VehicleRoutingProblemSolution>())
-                .read(getClass().getResourceAsStream("lui-shen-solution.xml"));
+        .read(getClass().getResourceAsStream("lui-shen-solution.xml"));
         assertTrue(true);
     }
 
@@ -650,7 +649,7 @@ public void testRead_ifReaderIsCalled_itReadsSuccessfully() {
     @Test
     public void unassignedJobShouldBeRead() {
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
-        ArrayList<VehicleRoutingProblemSolution> solutions = new ArrayList<VehicleRoutingProblemSolution>();
+        ArrayList<VehicleRoutingProblemSolution> solutions = new ArrayList<>();
         new VrpXMLReader(vrpBuilder, solutions).read(getClass().getResourceAsStream("finiteVrpWithShipmentsAndSolution.xml"));
 
         VehicleRoutingProblemSolution solution = Solutions.bestOf(solutions);
diff --git a/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLWriterTest.java b/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLWriterTest.java
index 9d2d59cc5..1af90352e 100644
--- a/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLWriterTest.java
+++ b/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLWriterTest.java
@@ -251,7 +251,8 @@ public void whenWritingShipments_readingThemAgainMustReturnTheWrittenPickupTimeW
         VehicleRoutingProblem readVrp = vrpToReadBuilder.build();
         assertEquals(2, readVrp.getJobs().size());
 
-        TimeWindow tw = ((ShipmentJob) readVrp.getJobs().get("1")).getPickupActivity().getSingleTimeWindow();
+        TimeWindow tw = ((ShipmentJob) readVrp.getJobs().get("1")).getPickupActivity().getTimeWindows().iterator()
+            .next();
         assertEquals(1.0, tw.getStart(), 0.01);
         assertEquals(2.0, tw.getEnd(), 0.01);
     }
@@ -286,7 +287,8 @@ public void whenWritingShipments_readingThemAgainMustReturnTheWrittenDeliveryTim
         VehicleRoutingProblem readVrp = vrpToReadBuilder.build();
         assertEquals(2, readVrp.getJobs().size());
 
-        TimeWindow tw = ((ShipmentJob) readVrp.getJobs().get("1")).getDeliveryActivity().getSingleTimeWindow();
+        TimeWindow tw = ((ShipmentJob) readVrp.getJobs().get("1")).getDeliveryActivity().getTimeWindows().iterator()
+            .next();
         assertEquals(3.0, tw.getStart(), 0.01);
         assertEquals(4.0, tw.getEnd(), 0.01);
     }
@@ -455,9 +457,8 @@ public void whenWritingVehicles_vehShouldHave0Skills() {
 
     private Vehicle getVehicle(String v1, VehicleRoutingProblem readVrp) {
         for (Vehicle v : readVrp.getVehicles()) {
-            if (v.getId().equals(v1)) {
+            if (v.getId().equals(v1))
                 return v;
-            }
         }
         return null;
     }
@@ -899,9 +900,8 @@ public void whenWritingVehicleWithSeveralCapacityDimensions_itShouldBeWrittenAnd
 
     private Vehicle getVehicle(String string, Collection<Vehicle> vehicles) {
         for (Vehicle v : vehicles) {
-            if (string.equals(v.getId())) {
+            if (string.equals(v.getId()))
                 return v;
-            }
         }
         return null;
     }
@@ -920,16 +920,16 @@ public void solutionWithoutUnassignedJobsShouldBeWrittenCorrectly() {
         VehicleRoutingProblem vrp = builder.addJob(s1).addJob(s2).build();
 
         VehicleRoute route = VehicleRoute.Builder.newInstance(v1).addService(s1).addService(s2).build();
-        List<VehicleRoute> routes = new ArrayList<VehicleRoute>();
+        List<VehicleRoute> routes = new ArrayList<>();
         routes.add(route);
         VehicleRoutingProblemSolution solution = new VehicleRoutingProblemSolution(routes, 10.);
-        List<VehicleRoutingProblemSolution> solutions = new ArrayList<VehicleRoutingProblemSolution>();
+        List<VehicleRoutingProblemSolution> solutions = new ArrayList<>();
         solutions.add(solution);
 
         new VrpXMLWriter(vrp, solutions).write(infileName);
 
         VehicleRoutingProblem.Builder vrpToReadBuilder = VehicleRoutingProblem.Builder.newInstance();
-        List<VehicleRoutingProblemSolution> solutionsToRead = new ArrayList<VehicleRoutingProblemSolution>();
+        List<VehicleRoutingProblemSolution> solutionsToRead = new ArrayList<>();
         new VrpXMLReader(vrpToReadBuilder, solutionsToRead).read(infileName);
 
         assertEquals(1, solutionsToRead.size());
@@ -951,17 +951,17 @@ public void solutionWithUnassignedJobsShouldBeWrittenCorrectly() {
         VehicleRoutingProblem vrp = builder.addJob(s1).addJob(s2).build();
 
         VehicleRoute route = VehicleRoute.Builder.newInstance(v1).addService(s1).build();
-        List<VehicleRoute> routes = new ArrayList<VehicleRoute>();
+        List<VehicleRoute> routes = new ArrayList<>();
         routes.add(route);
         VehicleRoutingProblemSolution solution = new VehicleRoutingProblemSolution(routes, 10.);
         solution.getUnassignedJobs().add(s2);
-        List<VehicleRoutingProblemSolution> solutions = new ArrayList<VehicleRoutingProblemSolution>();
+        List<VehicleRoutingProblemSolution> solutions = new ArrayList<>();
         solutions.add(solution);
 
         new VrpXMLWriter(vrp, solutions).write(infileName);
 
         VehicleRoutingProblem.Builder vrpToReadBuilder = VehicleRoutingProblem.Builder.newInstance();
-        List<VehicleRoutingProblemSolution> solutionsToRead = new ArrayList<VehicleRoutingProblemSolution>();
+        List<VehicleRoutingProblemSolution> solutionsToRead = new ArrayList<>();
         new VrpXMLReader(vrpToReadBuilder, solutionsToRead).read(infileName);
 
         assertEquals(1, solutionsToRead.size());
