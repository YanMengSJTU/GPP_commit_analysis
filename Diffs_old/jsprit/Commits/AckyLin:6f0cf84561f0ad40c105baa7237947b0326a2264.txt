diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExample.java
index 8cf9f200f..b7c1378dd 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExample.java
@@ -22,7 +22,6 @@
 import com.graphhopper.jsprit.analysis.toolbox.Plotter;
 import com.graphhopper.jsprit.core.algorithm.VehicleRoutingAlgorithm;
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
-import com.graphhopper.jsprit.core.algorithm.box.SchrimpfFactory;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Service;
@@ -44,10 +43,10 @@
 
     public static void main(String[] args) {
         /*
-         * some preparation - create output folder
+         * 一些准备 - 创建输出文件夹
 		 */
         File dir = new File("output");
-        // if the directory does not exist, create it
+        // 如果目录不存在，请创建它
         if (!dir.exists()) {
             System.out.println("creating directory ./output");
             boolean result = dir.mkdir();
@@ -55,14 +54,14 @@ public static void main(String[] args) {
         }
 
 		/*
-         * get a vehicle type-builder and build a type with the typeId "vehicleType" and one capacity dimension, i.e. weight, and capacity dimension value of 2
+         * 获得一个车辆类型构建器并构建一个类型为“vehicleType”的类型和一个容量维度，即权重，容量维度值为2
 		 */
         final int WEIGHT_INDEX = 0;
-        VehicleTypeImpl.Builder vehicleTypeBuilder = VehicleTypeImpl.Builder.newInstance("vehicleType").addCapacityDimension(WEIGHT_INDEX, 2);
+        VehicleTypeImpl.Builder vehicleTypeBuilder = VehicleTypeImpl.Builder.newInstance("vehicleType").addCapacityDimension(WEIGHT_INDEX, 8);
         VehicleType vehicleType = vehicleTypeBuilder.build();
 
 		/*
-         * get a vehicle-builder and build a vehicle located at (10,10) with type "vehicleType"
+         * 得到一个车辆制造商并建造一个位于（10,10）的车辆，型号为“vehicleType”
 		 */
         Builder vehicleBuilder = VehicleImpl.Builder.newInstance("vehicle");
         vehicleBuilder.setStartLocation(Location.newInstance(10, 10));
@@ -70,33 +69,38 @@ public static void main(String[] args) {
         VehicleImpl vehicle = vehicleBuilder.build();
 
 		/*
-         * build services at the required locations, each with a capacity-demand of 1.
+         * 在所需位置构建服务，每个服务的容量需求为1。
 		 */
         Service service1 = Service.Builder.newInstance("1").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 7)).build();
-        Service service2 = Service.Builder.newInstance("2").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(5, 13)).build();
+        Service service2 = Service.Builder.newInstance("2").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(7, 15)).build();
 
         Service service3 = Service.Builder.newInstance("3").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(15, 7)).build();
         Service service4 = Service.Builder.newInstance("4").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(15, 13)).build();
 
+        Service service5 = Service.Builder.newInstance("5").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(20, 7)).build();
+        Service service6 = Service.Builder.newInstance("6").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(21, 10)).build();
+        Service service7 = Service.Builder.newInstance("7").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(15, 8)).build();
+        Service service8 = Service.Builder.newInstance("8").addSizeDimension(WEIGHT_INDEX, 1).setLocation(Location.newInstance(19, 2)).build();
+
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addVehicle(vehicle);
-        vrpBuilder.addJob(service1).addJob(service2).addJob(service3).addJob(service4);
+        vrpBuilder.addJob(service1).addJob(service2).addJob(service3).addJob(service4).addJob(service5).addJob(service6).addJob(service7).addJob(service8);
 
         VehicleRoutingProblem problem = vrpBuilder.build();
 
 		/*
-         * get the algorithm out-of-the-box.
+         * 得到开箱即用的算法。
 		 */
         VehicleRoutingAlgorithm algorithm = Jsprit.createAlgorithm(problem);
 
 		/*
-         * and search a solution
+         * 并搜索解决方案
 		 */
         Collection<VehicleRoutingProblemSolution> solutions = algorithm.searchSolutions();
 
 		/*
-         * get the best
+         * 得到最好的
 		 */
         VehicleRoutingProblemSolution bestSolution = Solutions.bestOf(solutions);
 
@@ -105,14 +109,14 @@ public static void main(String[] args) {
         SolutionPrinter.print(problem, bestSolution, SolutionPrinter.Print.VERBOSE);
 
 		/*
-         * plot
+         * 策划
 		 */
         new Plotter(problem,bestSolution).plot("output/plot.png","simple example");
 
         /*
-        render problem and solution with GraphStream
+        使用GraphStream渲染问题和解决方案
          */
-        new GraphStreamViewer(problem, bestSolution).labelWith(Label.ID).setRenderDelay(200).display();
+        new GraphStreamViewer(problem, bestSolution).labelWith(Label.ID).setRenderDelay(100).display();
     }
 
 }
