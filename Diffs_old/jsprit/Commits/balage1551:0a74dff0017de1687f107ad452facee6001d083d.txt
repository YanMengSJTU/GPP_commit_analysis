diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/AbstractPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/AbstractPrinterColumn.java
new file mode 100644
index 000000000..d43087d56
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/AbstractPrinterColumn.java
@@ -0,0 +1,32 @@
+package com.graphhopper.jsprit.core.reporting;
+
+import java.util.function.Consumer;
+
+import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
+
+public abstract class AbstractPrinterColumn<C extends PrinterContext, T> {
+
+    private Consumer<DynamicTableDefinition.ColumnDefinition.Builder> decorator;
+
+    public AbstractPrinterColumn() {
+        super();
+    }
+
+    public AbstractPrinterColumn(Consumer<Builder> decorator) {
+        super();
+        this.decorator = decorator;
+    }
+
+    public DynamicTableDefinition.ColumnDefinition getColumnDefinition() {
+        Builder builder = getColumnBuilder();
+        if (decorator != null) {
+            decorator.accept(builder);
+        }
+        return builder.build();
+    }
+
+    protected abstract DynamicTableDefinition.ColumnDefinition.Builder getColumnBuilder();
+
+    public abstract T getData(C context);
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/ConfigurableTablePrinter.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/ConfigurableTablePrinter.java
new file mode 100644
index 000000000..c8901d76c
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/ConfigurableTablePrinter.java
@@ -0,0 +1,182 @@
+package com.graphhopper.jsprit.core.reporting;
+
+import java.nio.CharBuffer;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+import java.util.stream.IntStream;
+
+import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.Alignment;
+import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition;
+
+
+/**
+ * @author balage
+ * @param <C>
+ */
+public class ConfigurableTablePrinter<C extends PrinterContext> {
+
+    public class TableRow {
+        private String row[] = new String[tableDef.size()];
+        private int lastIndex = 0;
+
+        public TableRow() {
+            super();
+            Arrays.fill(row, "");
+        }
+
+        public TableRow set(int index, Object data) {
+            if (index < 0 || index >= row.length) {
+                throw new IndexOutOfBoundsException("Invalid index: " + index);
+            }
+            if (data != null) {
+                if (!tableDef.getColumns().get(index).getType().accepts(data)) {
+                    throw new ClassCastException("Cannot assign " + data.getClass().getSimpleName()
+                                    + " to " + tableDef.getColumns().get(index).getType().getClass()
+                                    .getSimpleName()
+                                    + "( index: " + index + ")");
+                }
+            }
+            String val = tableDef.getColumns().get(index).getType().convert(data);
+
+            row[index] = val;
+            return this;
+        }
+
+        public TableRow add(Object data) {
+            return set(lastIndex++, data);
+        }
+
+        public TableRow add(int data) {
+            return add(new Integer(data));
+        }
+
+        public TableRow add(long data) {
+            return add(new Long(data));
+        }
+
+        public TableRow add(double data) {
+            return add(new Double(data));
+        }
+
+        public TableRow add(boolean data) {
+            return add(Boolean.valueOf(data));
+        }
+
+        public String get(int index) {
+            if (index < 0 || index >= row.length) {
+                throw new IndexOutOfBoundsException("Invalid index: " + index);
+            }
+            return row[index];
+        }
+    }
+
+    private class Separator extends TableRow {
+    }
+
+    private PrinterColumnList<C> columnList;
+    private DynamicTableDefinition tableDef;
+
+    List<TableRow> rows = new ArrayList<>();
+
+    public ConfigurableTablePrinter(PrinterColumnList<C> columnList) {
+        super();
+        this.columnList = columnList;
+        tableDef = columnList.getTableDefinition();
+    }
+
+    public void addRow(C context) {
+        TableRow row = new TableRow();
+        columnList.populateRow(row, context);
+        rows.add(row);
+    }
+
+    public void addSeparator() {
+        rows.add(new Separator());
+    }
+
+
+    private String repeat(char c, int w) {
+        return CharBuffer.allocate(w).toString().replace('\0', c);
+    }
+
+    public String print() {
+        StringBuilder sb = new StringBuilder();
+        int[] colWidth = calculateWidthInfo();
+        int totalWidth = colWidth.length * (tableDef.getPadding() * 2 + 1) + 1;
+        for (int w : colWidth) {
+            totalWidth += w;
+        }
+
+        char corner = tableDef.getCorner();
+        char horizontal = tableDef.getHorizontal();
+        char vertical = tableDef.getVertical();
+        int padding = tableDef.getPadding();
+
+        String paddingChars = repeat(' ', padding);
+
+        StringBuilder sbSep = new StringBuilder();
+        sbSep.append(corner);
+        for (int w : colWidth) {
+            sbSep.append(repeat(horizontal, w + 2 * padding)).append(corner);
+        }
+        sbSep.append("\n");
+        String separatorLine = sbSep.toString();
+
+        if (tableDef.getHeading() != null) {
+            sb.append(corner).append(repeat(horizontal, totalWidth - 2)).append(corner)
+            .append("\n");
+            sb.append(vertical).append(paddingChars)
+            .append(Alignment.LEFT.align(tableDef.getHeading(),
+                            totalWidth - 2 * padding - 2))
+            .append(paddingChars)
+            .append(vertical)
+            .append("\n");
+        }
+
+        sb.append(separatorLine);
+        sb.append(vertical);
+        for (int i = 0; i < tableDef.size(); i++) {
+            ColumnDefinition cd = tableDef.getColumns().get(i);
+            sb.append(paddingChars).append(Alignment.LEFT.align(cd.getTitle(), colWidth[i]))
+            .append(paddingChars).append(vertical);
+        }
+        sb.append("\n");
+        sb.append(separatorLine);
+
+        for(TableRow row : rows) {
+            if (row instanceof ConfigurableTablePrinter.Separator) {
+                sb.append(separatorLine);
+            } else {
+                sb.append(vertical);
+                for (int i = 0; i < tableDef.size(); i++) {
+                    ColumnDefinition cd = tableDef.getColumns().get(i);
+                    sb.append(paddingChars).append(cd.getAlignment().align(row.get(i), colWidth[i]))
+                    .append(paddingChars).append(vertical);
+                }
+                sb.append("\n");
+            }
+        }
+        sb.append(separatorLine);
+
+        return sb.toString();
+    }
+
+    private int[] calculateWidthInfo() {
+        int colWidth[] = new int[tableDef.size()];
+        IntStream.range(0, tableDef.size()).forEach(i -> {
+            int max = rows.stream()
+                            .filter(r -> r instanceof ConfigurableTablePrinter.TableRow)
+                            .map(r -> r.get(i))
+                            .filter(d -> d != null)
+                            .mapToInt(d -> d.length())
+                            .max().orElse(0);
+            ColumnDefinition colDef = tableDef.getColumns().get(i);
+            colWidth[i] = Math.max(colDef.getTitle().length(),
+                            Math.max(colDef.getMinWidth(), Math.min(colDef.getMaxWidth(), max)));
+        });
+        return colWidth;
+    }
+
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/PrinterColumnList.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/PrinterColumnList.java
new file mode 100644
index 000000000..ea068a786
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/PrinterColumnList.java
@@ -0,0 +1,40 @@
+package com.graphhopper.jsprit.core.reporting;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.Builder;
+
+public class PrinterColumnList<C extends PrinterContext> {
+
+    private String heading = null;
+
+    private List<AbstractPrinterColumn<C, ?>> columns = new ArrayList<>();
+
+    public PrinterColumnList() {
+        super();
+    }
+
+    public PrinterColumnList(String heading) {
+        super();
+        this.heading = heading;
+    }
+
+    public PrinterColumnList<C> addColumn(AbstractPrinterColumn<C, ?> column) {
+        columns.add(column);
+        return this;
+    }
+
+    public DynamicTableDefinition getTableDefinition() {
+        Builder defBuilder = new DynamicTableDefinition.Builder();
+        columns.forEach(c -> defBuilder.addColumn(c.getColumnDefinition()));
+        defBuilder.withHeading(heading);
+        return defBuilder.build();
+    }
+
+    public void populateRow(ConfigurableTablePrinter<C>.TableRow row, C context) {
+        columns.forEach(c -> row.add(c.getData(context)));
+    }
+
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/PrinterContext.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/PrinterContext.java
new file mode 100644
index 000000000..323aeb8d5
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/PrinterContext.java
@@ -0,0 +1,4 @@
+package com.graphhopper.jsprit.core.reporting;
+
+public class PrinterContext {
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java
index 35669a99c..bd4764ca9 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java
@@ -18,6 +18,7 @@
 package com.graphhopper.jsprit.core.reporting;
 
 import java.io.PrintWriter;
+import java.time.LocalDateTime;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
@@ -40,6 +41,21 @@
 import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.IntColumnType;
 import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.LongColumnType;
 import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.StringColumnType;
+import com.graphhopper.jsprit.core.reporting.route.ActivityCostPrinterColumn;
+import com.graphhopper.jsprit.core.reporting.route.ActivityLoadChangePrinterColumn;
+import com.graphhopper.jsprit.core.reporting.route.ActivityTypePrinterColumn;
+import com.graphhopper.jsprit.core.reporting.route.ArrivalTimePrinterColumn;
+import com.graphhopper.jsprit.core.reporting.route.EndTimePrinterColumn;
+import com.graphhopper.jsprit.core.reporting.route.HumanReadableArrivalTimePrinterColumn;
+import com.graphhopper.jsprit.core.reporting.route.HumanReadableEndTimePrinterColumn;
+import com.graphhopper.jsprit.core.reporting.route.JobNamePrinterColumn;
+import com.graphhopper.jsprit.core.reporting.route.LoacationPrinterColumn;
+import com.graphhopper.jsprit.core.reporting.route.RouteCostPrinterColumn;
+import com.graphhopper.jsprit.core.reporting.route.RouteLoadPrinterColumn;
+import com.graphhopper.jsprit.core.reporting.route.RouteNumberPrinterColumn;
+import com.graphhopper.jsprit.core.reporting.route.RoutePrinterContext;
+import com.graphhopper.jsprit.core.reporting.route.TransportCostPrinterColumn;
+import com.graphhopper.jsprit.core.reporting.route.VehicleNamePrinterColumn;
 
 
 /**
@@ -141,6 +157,7 @@ public static void print(PrintWriter out, VehicleRoutingProblem problem, Vehicle
 
         if (print.equals(Print.VERBOSE)) {
             printVerbose(out, problem, solution);
+            printVerbose2(out, problem, solution);
         }
     }
 
@@ -257,6 +274,58 @@ private static void printVerbose(PrintWriter out, VehicleRoutingProblem problem,
         }
     }
 
+    private static void printVerbose2(PrintWriter out, VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution) {
+
+        PrinterColumnList<RoutePrinterContext> columns = new PrinterColumnList<>("Detailed route");
+        columns.addColumn(new RouteNumberPrinterColumn()).addColumn(new VehicleNamePrinterColumn())
+        .addColumn(new ActivityTypePrinterColumn()).addColumn(new JobNamePrinterColumn(b -> b.withMinWidth(10)))
+        .addColumn(new ActivityLoadChangePrinterColumn()).addColumn(new RouteLoadPrinterColumn())
+        .addColumn(new LoacationPrinterColumn()).addColumn(new ArrivalTimePrinterColumn())
+        .addColumn(new EndTimePrinterColumn()).addColumn(new HumanReadableArrivalTimePrinterColumn())
+        .addColumn(new HumanReadableEndTimePrinterColumn().withOrigin(LocalDateTime.now()))
+        .addColumn(new TransportCostPrinterColumn()).addColumn(new ActivityCostPrinterColumn())
+        .addColumn(new RouteCostPrinterColumn());
+
+        ConfigurableTablePrinter<RoutePrinterContext> tablePrinter = new ConfigurableTablePrinter<>(columns);
+        int routeNu = 1;
+
+        List<VehicleRoute> list = new ArrayList<VehicleRoute>(solution.getRoutes());
+        Collections.sort(list, new com.graphhopper.jsprit.core.util.VehicleIndexComparator());
+        for (VehicleRoute route : list) {
+            if (routeNu != 1) {
+                tablePrinter.addSeparator();
+            }
+
+            RoutePrinterContext context = new RoutePrinterContext(routeNu, route, route.getStart(), problem);
+            tablePrinter.addRow(context);
+
+            for (TourActivity act : route.getActivities()) {
+                context.setActivity(act);
+                tablePrinter.addRow(context);
+            }
+
+            context.setActivity(route.getEnd());
+            tablePrinter.addRow(context);
+
+            routeNu++;
+        }
+        out.println(tablePrinter.print());
+
+        if (!solution.getUnassignedJobs().isEmpty()) {
+
+            DynamicTableDefinition unassignedTableDef = new DynamicTableDefinition.Builder().withHeading("Unassigned jobs")
+                            .addColumn(new ColumnDefinition.Builder(new StringColumnType(), "id").withMinWidth(10).build())
+                            .addColumn(new ColumnDefinition.Builder(new StringColumnType(), "type").build()).build();
+
+            DynamicTablePrinter unassignedTablePrinter = new DynamicTablePrinter(unassignedTableDef);
+
+            for (Job j : solution.getUnassignedJobs()) {
+                unassignedTablePrinter.addRow().add(j.getId()).add(j.getClass().getSimpleName());
+            }
+            out.println(unassignedTablePrinter.print());
+        }
+    }
+
     private static String getLocationString(Location l) {
         if (l == null) {
             return null;
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractCostPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractCostPrinterColumn.java
new file mode 100644
index 000000000..27c463cc0
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractCostPrinterColumn.java
@@ -0,0 +1,41 @@
+package com.graphhopper.jsprit.core.reporting.route;
+
+import java.util.function.Consumer;
+
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
+import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
+import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.Alignment;
+import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition;
+import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
+import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.IntColumnType;
+
+public abstract class AbstractCostPrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, Integer> {
+
+    public AbstractCostPrinterColumn() {
+        super();
+    }
+
+    public AbstractCostPrinterColumn(Consumer<Builder> decorator) {
+        super(decorator);
+    }
+
+    @Override
+    public ColumnDefinition.Builder getColumnBuilder() {
+        return new ColumnDefinition.Builder(new IntColumnType(), getTitle()).withAlignment(Alignment.RIGHT);
+    }
+
+    protected abstract String getTitle();
+
+    protected double getActivityCost(RoutePrinterContext context) {
+        return context.getProblem().getActivityCosts().getActivityCost(context.getActivity(),
+                        context.getActivity().getArrTime(), context.getRoute().getDriver(), context.getRoute().getVehicle());
+    }
+
+    protected double getTransportCost(RoutePrinterContext context, TourActivity prevAct) {
+        return prevAct == null ? 0d
+                        : context.getProblem().getTransportCosts().getTransportCost(prevAct.getLocation(),
+                                        context.getActivity().getLocation(),
+                                        context.getActivity().getArrTime(), context.getRoute().getDriver(), context.getRoute().getVehicle());
+    }
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractHumanReadableTimePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractHumanReadableTimePrinterColumn.java
new file mode 100644
index 000000000..fee26b9cd
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractHumanReadableTimePrinterColumn.java
@@ -0,0 +1,64 @@
+package com.graphhopper.jsprit.core.reporting.route;
+
+import java.time.LocalDate;
+import java.time.LocalDateTime;
+import java.time.LocalTime;
+import java.time.format.DateTimeFormatter;
+import java.time.temporal.ChronoUnit;
+import java.util.function.Consumer;
+
+import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
+import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition;
+import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
+import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.StringColumnType;
+
+public abstract class AbstractHumanReadableTimePrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, String> {
+
+    private DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("HH:mm:ss");
+    private LocalDateTime origin = LocalDateTime.of(LocalDate.now(), LocalTime.MIDNIGHT);
+    private ChronoUnit unit = ChronoUnit.SECONDS;
+
+    public AbstractHumanReadableTimePrinterColumn() {
+        super();
+    }
+
+    public AbstractHumanReadableTimePrinterColumn withDateFormat(String pattern) {
+        dateFormatter = DateTimeFormatter.ofPattern(pattern);
+        return this;
+    }
+
+    public AbstractHumanReadableTimePrinterColumn withOrigin(LocalDateTime origin) {
+        this.origin = origin;
+        return this;
+    }
+
+    public AbstractHumanReadableTimePrinterColumn withUnit(ChronoUnit unit) {
+        this.unit = unit;
+        return this;
+    }
+
+    public AbstractHumanReadableTimePrinterColumn(Consumer<Builder> decorator) {
+        super(decorator);
+    }
+
+    @Override
+    public ColumnDefinition.Builder getColumnBuilder() {
+        return new ColumnDefinition.Builder(new StringColumnType("-"), getTitle());
+    }
+
+    @Override
+    public String getData(RoutePrinterContext context) {
+        Long v = getTimeValue(context);
+        if (v == null) {
+            return null;
+        } else {
+            LocalDateTime dt = origin.plus(v, unit);
+            return dateFormatter.format(dt);
+        }
+    }
+
+    protected abstract Long getTimeValue(RoutePrinterContext context);
+
+    protected abstract String getTitle();
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractSizeDimensionPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractSizeDimensionPrinterColumn.java
new file mode 100644
index 000000000..525081a29
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractSizeDimensionPrinterColumn.java
@@ -0,0 +1,53 @@
+package com.graphhopper.jsprit.core.reporting.route;
+
+import java.util.function.Consumer;
+import java.util.stream.Collectors;
+import java.util.stream.IntStream;
+
+import com.graphhopper.jsprit.core.problem.SizeDimension;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
+import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
+import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition;
+import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
+import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.StringColumnType;
+
+public abstract class AbstractSizeDimensionPrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, String> {
+
+    public AbstractSizeDimensionPrinterColumn() {
+        super();
+    }
+
+    public AbstractSizeDimensionPrinterColumn(Consumer<Builder> decorator) {
+        super(decorator);
+    }
+
+    @Override
+    public ColumnDefinition.Builder getColumnBuilder() {
+        return new ColumnDefinition.Builder(new StringColumnType(), getTitle());
+    }
+
+    @Override
+    public String getData(RoutePrinterContext context) {
+        SizeDimension sd = getSizeDimension(context);
+        if (sd != null) {
+            return IntStream.range(0, sd.getNuOfDimensions()).mapToObj(i -> "" + sd.get(i))
+                            .collect(Collectors.joining(", ", "[", "]"));
+        } else {
+            return null;
+        }
+    }
+
+    protected abstract String getTitle();
+
+    protected abstract SizeDimension getSizeDimension(RoutePrinterContext context);
+
+    protected SizeDimension calculateInitialLoad(RoutePrinterContext context) {
+        SizeDimension sd = SizeDimension.EMPTY;
+        for (TourActivity a : context.getRoute().getActivities()) {
+            sd = sd.add(a.getLoadChange());
+        }
+        sd = sd.getNegativeDimensions().abs();
+        return sd;
+    }
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractTimePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractTimePrinterColumn.java
new file mode 100644
index 000000000..7231b0463
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/AbstractTimePrinterColumn.java
@@ -0,0 +1,28 @@
+package com.graphhopper.jsprit.core.reporting.route;
+
+import java.util.function.Consumer;
+
+import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
+import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.Alignment;
+import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition;
+import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
+import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.LongColumnType;
+
+public abstract class AbstractTimePrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, Long> {
+
+    public AbstractTimePrinterColumn() {
+        super();
+    }
+
+    public AbstractTimePrinterColumn(Consumer<Builder> decorator) {
+        super(decorator);
+    }
+
+    @Override
+    public ColumnDefinition.Builder getColumnBuilder() {
+        return new ColumnDefinition.Builder(new LongColumnType("-"), getTitle()).withAlignment(Alignment.RIGHT);
+    }
+
+    protected abstract String getTitle();
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityCostPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityCostPrinterColumn.java
new file mode 100644
index 000000000..6e0d53ae3
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityCostPrinterColumn.java
@@ -0,0 +1,28 @@
+package com.graphhopper.jsprit.core.reporting.route;
+
+import java.util.function.Consumer;
+
+import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
+
+public class ActivityCostPrinterColumn extends AbstractCostPrinterColumn {
+
+    public ActivityCostPrinterColumn() {
+        super();
+    }
+
+    public ActivityCostPrinterColumn(Consumer<Builder> decorator) {
+        super(decorator);
+    }
+
+
+    @Override
+    protected String getTitle() {
+        return "actCost";
+    }
+
+    @Override
+    public Integer getData(RoutePrinterContext context) {
+        return (int) getActivityCost(context);
+    }
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityLoadChangePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityLoadChangePrinterColumn.java
new file mode 100644
index 000000000..fa20d4ea5
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityLoadChangePrinterColumn.java
@@ -0,0 +1,41 @@
+package com.graphhopper.jsprit.core.reporting.route;
+
+import java.util.function.Consumer;
+
+import com.graphhopper.jsprit.core.problem.SizeDimension;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.Start;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
+import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
+
+public class ActivityLoadChangePrinterColumn extends AbstractSizeDimensionPrinterColumn {
+
+    public ActivityLoadChangePrinterColumn() {
+        super();
+    }
+
+    public ActivityLoadChangePrinterColumn(Consumer<Builder> decorator) {
+        super(decorator);
+    }
+
+    @Override
+    public Builder getColumnBuilder() {
+        return super.getColumnBuilder().withMinWidth(10);
+    }
+
+    @Override
+    protected String getTitle() {
+        return "load change";
+    }
+
+    @Override
+    protected SizeDimension getSizeDimension(RoutePrinterContext context) {
+        TourActivity act = context.getActivity();
+        if (act instanceof Start) {
+            return calculateInitialLoad(context);
+        } else {
+            return act.getLoadChange();
+        }
+    }
+
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityTypePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityTypePrinterColumn.java
new file mode 100644
index 000000000..7a8ee816d
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ActivityTypePrinterColumn.java
@@ -0,0 +1,31 @@
+package com.graphhopper.jsprit.core.reporting.route;
+
+import java.util.function.Consumer;
+
+import com.graphhopper.jsprit.core.problem.solution.route.activity.AbstractActivity;
+import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
+import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition;
+import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
+import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.StringColumnType;
+
+public class ActivityTypePrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, String> {
+
+    public ActivityTypePrinterColumn() {
+        super();
+    }
+
+    public ActivityTypePrinterColumn(Consumer<Builder> decorator) {
+        super(decorator);
+    }
+
+    @Override
+    public ColumnDefinition.Builder getColumnBuilder() {
+        return new ColumnDefinition.Builder(new StringColumnType(), "activity");
+    }
+
+    @Override
+    public String getData(RoutePrinterContext context) {
+        return ((AbstractActivity) context.getActivity()).getType();
+    }
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ArrivalTimePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ArrivalTimePrinterColumn.java
new file mode 100644
index 000000000..722b3f994
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/ArrivalTimePrinterColumn.java
@@ -0,0 +1,35 @@
+package com.graphhopper.jsprit.core.reporting.route;
+
+import java.util.function.Consumer;
+
+import com.graphhopper.jsprit.core.problem.solution.route.activity.Start;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
+import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
+
+public class ArrivalTimePrinterColumn extends AbstractTimePrinterColumn {
+
+    public ArrivalTimePrinterColumn() {
+        super();
+    }
+
+    public ArrivalTimePrinterColumn(Consumer<Builder> decorator) {
+        super(decorator);
+    }
+
+    @Override
+    protected String getTitle() {
+        return "arrTime";
+    }
+
+    @Override
+    public Long getData(RoutePrinterContext context) {
+        TourActivity act = context.getActivity();
+        if (act instanceof Start) {
+            return null;
+        } else {
+            return (long) act.getArrTime();
+        }
+    }
+
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/EndTimePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/EndTimePrinterColumn.java
new file mode 100644
index 000000000..50863f7fe
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/EndTimePrinterColumn.java
@@ -0,0 +1,35 @@
+package com.graphhopper.jsprit.core.reporting.route;
+
+import java.util.function.Consumer;
+
+import com.graphhopper.jsprit.core.problem.solution.route.activity.End;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
+import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
+
+public class EndTimePrinterColumn extends AbstractTimePrinterColumn {
+
+    public EndTimePrinterColumn() {
+        super();
+    }
+
+    public EndTimePrinterColumn(Consumer<Builder> decorator) {
+        super(decorator);
+    }
+
+    @Override
+    protected String getTitle() {
+        return "endTime";
+    }
+
+    @Override
+    public Long getData(RoutePrinterContext context) {
+        TourActivity act = context.getActivity();
+        if (act instanceof End) {
+            return null;
+        } else {
+            return (long) act.getEndTime();
+        }
+    }
+
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/HumanReadableArrivalTimePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/HumanReadableArrivalTimePrinterColumn.java
new file mode 100644
index 000000000..2c2ca9111
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/HumanReadableArrivalTimePrinterColumn.java
@@ -0,0 +1,51 @@
+package com.graphhopper.jsprit.core.reporting.route;
+
+import java.time.LocalDateTime;
+import java.time.temporal.ChronoUnit;
+import java.util.function.Consumer;
+
+import com.graphhopper.jsprit.core.problem.solution.route.activity.Start;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
+import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
+
+public class HumanReadableArrivalTimePrinterColumn extends AbstractHumanReadableTimePrinterColumn {
+
+    public HumanReadableArrivalTimePrinterColumn() {
+        super();
+    }
+
+    public HumanReadableArrivalTimePrinterColumn(Consumer<Builder> decorator) {
+        super(decorator);
+    }
+
+    @Override
+    public HumanReadableArrivalTimePrinterColumn withDateFormat(String pattern) {
+        return (HumanReadableArrivalTimePrinterColumn) super.withDateFormat(pattern);
+    }
+
+    @Override
+    public HumanReadableArrivalTimePrinterColumn withOrigin(LocalDateTime origin) {
+        return (HumanReadableArrivalTimePrinterColumn) super.withOrigin(origin);
+    }
+
+    @Override
+    public HumanReadableArrivalTimePrinterColumn withUnit(ChronoUnit unit) {
+        return (HumanReadableArrivalTimePrinterColumn) super.withUnit(unit);
+    }
+
+    @Override
+    protected Long getTimeValue(RoutePrinterContext context) {
+        TourActivity act = context.getActivity();
+        if (act instanceof Start) {
+            return null;
+        } else {
+            return (long) act.getArrTime();
+        }
+    }
+
+    @Override
+    protected String getTitle() {
+        return "arrival";
+    }
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/HumanReadableEndTimePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/HumanReadableEndTimePrinterColumn.java
new file mode 100644
index 000000000..ac5a2622c
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/HumanReadableEndTimePrinterColumn.java
@@ -0,0 +1,51 @@
+package com.graphhopper.jsprit.core.reporting.route;
+
+import java.time.LocalDateTime;
+import java.time.temporal.ChronoUnit;
+import java.util.function.Consumer;
+
+import com.graphhopper.jsprit.core.problem.solution.route.activity.End;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
+import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
+
+public class HumanReadableEndTimePrinterColumn extends AbstractHumanReadableTimePrinterColumn {
+
+    public HumanReadableEndTimePrinterColumn() {
+        super();
+    }
+
+    public HumanReadableEndTimePrinterColumn(Consumer<Builder> decorator) {
+        super(decorator);
+    }
+
+    @Override
+    public HumanReadableEndTimePrinterColumn withDateFormat(String pattern) {
+        return (HumanReadableEndTimePrinterColumn) super.withDateFormat(pattern);
+    }
+
+    @Override
+    public HumanReadableEndTimePrinterColumn withOrigin(LocalDateTime origin) {
+        return (HumanReadableEndTimePrinterColumn) super.withOrigin(origin);
+    }
+
+    @Override
+    public HumanReadableEndTimePrinterColumn withUnit(ChronoUnit unit) {
+        return (HumanReadableEndTimePrinterColumn) super.withUnit(unit);
+    }
+
+    @Override
+    protected Long getTimeValue(RoutePrinterContext context) {
+        TourActivity act = context.getActivity();
+        if (act instanceof End) {
+            return null;
+        } else {
+            return (long) act.getEndTime();
+        }
+    }
+
+    @Override
+    protected String getTitle() {
+        return "departure";
+    }
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/JobNamePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/JobNamePrinterColumn.java
new file mode 100644
index 000000000..d53d31d21
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/JobNamePrinterColumn.java
@@ -0,0 +1,39 @@
+package com.graphhopper.jsprit.core.reporting.route;
+
+import java.util.function.Consumer;
+
+import com.graphhopper.jsprit.core.problem.job.Job;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
+import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
+import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition;
+import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
+import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.StringColumnType;
+
+public class JobNamePrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, String> {
+
+    public JobNamePrinterColumn() {
+        super();
+    }
+
+    public JobNamePrinterColumn(Consumer<Builder> decorator) {
+        super(decorator);
+    }
+
+    @Override
+    public ColumnDefinition.Builder getColumnBuilder() {
+        return new ColumnDefinition.Builder(new StringColumnType("-"), "job name");
+    }
+
+    @Override
+    public String getData(RoutePrinterContext context) {
+        TourActivity act = context.getActivity();
+        if (act instanceof JobActivity) {
+            Job job = ((JobActivity) context.getActivity()).getJob();
+            return job.getId();
+        } else {
+            return null;
+        }
+    }
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/LoacationPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/LoacationPrinterColumn.java
new file mode 100644
index 000000000..8d7ceac77
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/LoacationPrinterColumn.java
@@ -0,0 +1,34 @@
+package com.graphhopper.jsprit.core.reporting.route;
+
+import java.util.function.Consumer;
+
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
+import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
+import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition;
+import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
+import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.StringColumnType;
+
+public class LoacationPrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, String> {
+
+    public LoacationPrinterColumn() {
+        super();
+    }
+
+    public LoacationPrinterColumn(Consumer<Builder> decorator) {
+        super(decorator);
+    }
+
+    @Override
+    public ColumnDefinition.Builder getColumnBuilder() {
+        return new ColumnDefinition.Builder(new StringColumnType("-"), "location");
+    }
+
+    @Override
+    public String getData(RoutePrinterContext context) {
+        TourActivity act = context.getActivity();
+        Location loc = act.getLocation();
+        return loc == null ? null : loc.getId();
+    }
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RouteCostPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RouteCostPrinterColumn.java
new file mode 100644
index 000000000..5d60e89ec
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RouteCostPrinterColumn.java
@@ -0,0 +1,41 @@
+package com.graphhopper.jsprit.core.reporting.route;
+
+import java.util.function.Consumer;
+
+import com.graphhopper.jsprit.core.problem.solution.route.activity.Start;
+import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
+
+public class RouteCostPrinterColumn extends TransportCostPrinterColumn {
+
+    private int aggregatedCost = 0;
+
+    public RouteCostPrinterColumn() {
+        super();
+    }
+
+    public RouteCostPrinterColumn(Consumer<Builder> decorator) {
+        super(decorator);
+    }
+
+
+    @Override
+    protected String getTitle() {
+        return "routeCost";
+    }
+
+    @Override
+    public Integer getData(RoutePrinterContext context) {
+        if (context.getActivity() instanceof Start) {
+            aggregatedCost = 0;
+        }
+
+        Integer res = super.getData(context);
+        if (res != null) {
+            aggregatedCost += res;
+        }
+        aggregatedCost += getActivityCost(context);
+        return aggregatedCost;
+    }
+
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RouteLoadPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RouteLoadPrinterColumn.java
new file mode 100644
index 000000000..36bb03535
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RouteLoadPrinterColumn.java
@@ -0,0 +1,39 @@
+package com.graphhopper.jsprit.core.reporting.route;
+
+import java.util.function.Consumer;
+
+import com.graphhopper.jsprit.core.problem.SizeDimension;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.Start;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
+import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
+
+public class RouteLoadPrinterColumn extends AbstractSizeDimensionPrinterColumn {
+
+    private SizeDimension aggregated;
+
+    public RouteLoadPrinterColumn() {
+        super();
+    }
+
+    public RouteLoadPrinterColumn(Consumer<Builder> decorator) {
+        super(decorator);
+    }
+
+    @Override
+    protected String getTitle() {
+        return "load";
+    }
+
+    @Override
+    protected SizeDimension getSizeDimension(RoutePrinterContext context) {
+        TourActivity act = context.getActivity();
+        if (act instanceof Start) {
+            aggregated = calculateInitialLoad(context);
+        } else {
+            aggregated = aggregated.add(act.getLoadChange());
+        }
+        return aggregated;
+    }
+
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RouteNumberPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RouteNumberPrinterColumn.java
new file mode 100644
index 000000000..7555914a4
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RouteNumberPrinterColumn.java
@@ -0,0 +1,30 @@
+package com.graphhopper.jsprit.core.reporting.route;
+
+import java.util.function.Consumer;
+
+import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
+import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition;
+import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
+import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.IntColumnType;
+
+public class RouteNumberPrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, Integer> {
+
+    public RouteNumberPrinterColumn() {
+        super();
+    }
+
+    public RouteNumberPrinterColumn(Consumer<Builder> decorator) {
+        super(decorator);
+    }
+
+    @Override
+    public ColumnDefinition.Builder getColumnBuilder() {
+        return new ColumnDefinition.Builder(new IntColumnType(), "route");
+    }
+
+    @Override
+    public Integer getData(RoutePrinterContext context) {
+        return context.getRouteNr();
+    }
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RoutePrinterContext.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RoutePrinterContext.java
new file mode 100644
index 000000000..9671fc963
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/RoutePrinterContext.java
@@ -0,0 +1,43 @@
+package com.graphhopper.jsprit.core.reporting.route;
+
+import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
+import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
+import com.graphhopper.jsprit.core.reporting.PrinterContext;
+
+public class RoutePrinterContext extends PrinterContext {
+
+    private int routeNr;
+    private VehicleRoute route;
+    private TourActivity activity;
+    private VehicleRoutingProblem problem;
+
+    public RoutePrinterContext(int routeNr, VehicleRoute route, TourActivity activity, VehicleRoutingProblem problem) {
+        super();
+        this.routeNr = routeNr;
+        this.route = route;
+        this.activity = activity;
+        this.problem = problem;
+    }
+
+    public int getRouteNr() {
+        return routeNr;
+    }
+
+    public VehicleRoute getRoute() {
+        return route;
+    }
+
+    public TourActivity getActivity() {
+        return activity;
+    }
+
+    public void setActivity(TourActivity activity) {
+        this.activity = activity;
+    }
+
+    public VehicleRoutingProblem getProblem() {
+        return problem;
+    }
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/TransportCostPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/TransportCostPrinterColumn.java
new file mode 100644
index 000000000..7e3f73014
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/TransportCostPrinterColumn.java
@@ -0,0 +1,38 @@
+package com.graphhopper.jsprit.core.reporting.route;
+
+import java.util.function.Consumer;
+
+import com.graphhopper.jsprit.core.problem.solution.route.activity.Start;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
+import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
+
+public class TransportCostPrinterColumn extends AbstractCostPrinterColumn {
+
+    private TourActivity prevAct;
+
+    public TransportCostPrinterColumn() {
+        super();
+    }
+
+    public TransportCostPrinterColumn(Consumer<Builder> decorator) {
+        super(decorator);
+    }
+
+    @Override
+    protected String getTitle() {
+        return "transCost";
+    }
+
+
+    @Override
+    public Integer getData(RoutePrinterContext context) {
+        TourActivity act = context.getActivity();
+        if (act instanceof Start) {
+            prevAct = null;
+        }
+        double res = getTransportCost(context, prevAct);
+        prevAct = act;
+        return (int) res;
+    }
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/VehicleNamePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/VehicleNamePrinterColumn.java
new file mode 100644
index 000000000..518c0c632
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/route/VehicleNamePrinterColumn.java
@@ -0,0 +1,30 @@
+package com.graphhopper.jsprit.core.reporting.route;
+
+import java.util.function.Consumer;
+
+import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
+import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition;
+import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.ColumnDefinition.Builder;
+import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.StringColumnType;
+
+public class VehicleNamePrinterColumn extends AbstractPrinterColumn<RoutePrinterContext, String> {
+
+    public VehicleNamePrinterColumn() {
+        super();
+    }
+
+    public VehicleNamePrinterColumn(Consumer<Builder> decorator) {
+        super(decorator);
+    }
+
+    @Override
+    public ColumnDefinition.Builder getColumnBuilder() {
+        return new ColumnDefinition.Builder(new StringColumnType(), "vehicle");
+    }
+
+    @Override
+    public String getData(RoutePrinterContext context) {
+        return context.getRoute().getVehicle().getId();
+    }
+
+}
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ReturnedShipmentTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ReturnedShipmentTest.java
index 400b4cd66..50b599e7b 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ReturnedShipmentTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ReturnedShipmentTest.java
@@ -527,7 +527,7 @@ public void firstTest() {
                         .addExchange(Location.newInstance(5, 30)).addDelivery(Location.newInstance(10, 0), SizeDimension.of(1))
                         .build());
         jobs.add(CustomJob.Builder.newInstance("job2")
-                        .addPickup(Location.newInstance(20, 0), SizeDimension.of(1))
+                        .addPickup(Location.newInstance(20, 0), SizeDimension.of(1), 0d, TimeWindow.newInstance(0, 30))
                         .addExchange(Location.newInstance(20, 30), SizeDimension.EMPTY)
                         .addDelivery(Location.newInstance(20, 0), SizeDimension.of(1))
                         .build());
