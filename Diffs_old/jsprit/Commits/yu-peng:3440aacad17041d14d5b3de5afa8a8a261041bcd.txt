diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinClusters.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinClusters.java
index 4e00ac677..90bb08c33 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinClusters.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinClusters.java
@@ -19,7 +19,9 @@
 
 import com.graphhopper.jsprit.core.algorithm.listener.IterationStartsListener;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
+import com.graphhopper.jsprit.core.problem.job.Delivery;
 import com.graphhopper.jsprit.core.problem.job.Job;
+import com.graphhopper.jsprit.core.problem.job.Pickup;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
@@ -150,6 +152,28 @@ private void ruin(Collection<VehicleRoute> vehicleRoutes, int nOfJobs2BeRemoved,
                 if (removeJob(j, vehicleRoutes)) {
                     lastRemoved.add(j);
                     unassignedJobs.add(j);
+                    
+                    if (j instanceof Pickup) {
+                        // Check if the following job should be removed
+                        Job paired = ((Pickup) j).getPairedDelivery();
+                        if (paired != null && paired instanceof Delivery) {
+                            if (removeJob(paired, vehicleRoutes)) {
+                                unassignedJobs.add(paired);
+                                lastRemoved.add(paired);
+                                toRemove--;
+                            }
+                        }
+                    } else if (j instanceof Delivery) {
+                        // Check if the preceeding job should be removed
+                        Job paired = ((Delivery) j).getPairedPickup();
+                        if (paired != null && paired instanceof Pickup) {
+                            if (removeJob(paired, vehicleRoutes)) {
+                                unassignedJobs.add(paired);
+                                lastRemoved.add(paired);
+                                toRemove--;
+                            }
+                        }
+                    }
                 }
                 toRemove--;
             }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinRadial.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinRadial.java
index e4ea4fc20..d9e85f0b8 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinRadial.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinRadial.java
@@ -19,7 +19,9 @@
 
 import com.graphhopper.jsprit.core.algorithm.ruin.distance.JobDistance;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
+import com.graphhopper.jsprit.core.problem.job.Delivery;
 import com.graphhopper.jsprit.core.problem.job.Job;
+import com.graphhopper.jsprit.core.problem.job.Pickup;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.util.RandomUtils;
 import org.slf4j.Logger;
@@ -136,11 +138,48 @@ public String toString() {
         int nNeighbors = nOfJobs2BeRemoved - 1;
         removeJob(targetJob, vehicleRoutes);
         unassignedJobs.add(targetJob);
+
+        if (targetJob instanceof Pickup) {
+            // Check if the following job should be removed
+            Job paired = ((Pickup) targetJob).getPairedDelivery();
+            if (paired != null && paired instanceof Delivery) {
+                if (removeJob(paired, vehicleRoutes)) {
+                    unassignedJobs.add(paired);
+                }
+            }
+        } else if (targetJob instanceof Delivery) {
+            // Check if the preceeding job should be removed
+            Job paired = ((Delivery) targetJob).getPairedPickup();
+            if (paired != null && paired instanceof Pickup) {
+                if (removeJob(paired, vehicleRoutes)) {
+                    unassignedJobs.add(paired);
+                }
+            }
+        }
+
         Iterator<Job> neighborhoodIterator = jobNeighborhoods.getNearestNeighborsIterator(nNeighbors, targetJob);
         while (neighborhoodIterator.hasNext()) {
             Job job = neighborhoodIterator.next();
             if (removeJob(job, vehicleRoutes)) {
                 unassignedJobs.add(job);
+
+                if (job instanceof Pickup) {
+                    // Check if the following job should be removed
+                    Job paired = ((Pickup) job).getPairedDelivery();
+                    if (paired != null && paired instanceof Delivery) {
+                        if (removeJob(paired, vehicleRoutes)) {
+                            unassignedJobs.add(paired);
+                        }
+                    }
+                } else if (job instanceof Delivery) {
+                    // Check if the preceeding job should be removed
+                    Job paired = ((Delivery) job).getPairedPickup();
+                    if (paired != null && paired instanceof Pickup) {
+                        if (removeJob(paired, vehicleRoutes)) {
+                            unassignedJobs.add(paired);
+                        }
+                    }
+                }
             }
         }
         return unassignedJobs;
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinRandom.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinRandom.java
index 74a083745..f0283b856 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinRandom.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinRandom.java
@@ -18,7 +18,9 @@
 package com.graphhopper.jsprit.core.algorithm.ruin;
 
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
+import com.graphhopper.jsprit.core.problem.job.Delivery;
 import com.graphhopper.jsprit.core.problem.job.Job;
+import com.graphhopper.jsprit.core.problem.job.Pickup;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -81,9 +83,27 @@ private void ruin(Collection<VehicleRoute> vehicleRoutes, int nOfJobs2BeRemoved,
         Collections.shuffle(availableJobs, random);
         int removed = 0;
         for (Job job : availableJobs) {
-            if (removed == nOfJobs2BeRemoved) break;
+            if (removed == nOfJobs2BeRemoved)
+                break;
             if (removeJob(job, vehicleRoutes)) {
                 unassignedJobs.add(job);
+                if (job instanceof Pickup) {
+                    // Check if the following job should be removed
+                    Job paired = ((Pickup) job).getPairedDelivery();
+                    if (paired != null && paired instanceof Delivery) {
+                        if (removeJob(paired, vehicleRoutes)) {
+                            unassignedJobs.add(paired);
+                        }
+                    }
+                } else if (job instanceof Delivery) {
+                    // Check if the preceeding job should be removed
+                    Job paired = ((Delivery) job).getPairedPickup();
+                    if (paired != null && paired instanceof Pickup) {
+                        if (removeJob(paired, vehicleRoutes)) {
+                            unassignedJobs.add(paired);
+                        }
+                    }
+                }
             }
             removed++;
         }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinWorst.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinWorst.java
index 620d1feda..43cff2845 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinWorst.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinWorst.java
@@ -19,7 +19,9 @@
 
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.driver.DriverImpl;
+import com.graphhopper.jsprit.core.problem.job.Delivery;
 import com.graphhopper.jsprit.core.problem.job.Job;
+import com.graphhopper.jsprit.core.problem.job.Pickup;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
@@ -89,6 +91,23 @@ private void ruin(Collection<VehicleRoute> vehicleRoutes, int nOfJobs2BeRemoved,
             if (removeJob(worst, vehicleRoutes)) {
                 availableJobs.remove(worst);
                 unassignedJobs.add(worst);
+                if (worst instanceof Pickup) {
+                    // Check if the following job should be removed
+                    Job paired = ((Pickup) worst).getPairedDelivery();
+                    if (paired != null && paired instanceof Delivery) {
+                        if (removeJob(paired, vehicleRoutes)) {
+                            unassignedJobs.add(paired);
+                        }
+                    }
+                } else if (worst instanceof Delivery) {
+                    // Check if the preceeding job should be removed
+                    Job paired = ((Delivery) worst).getPairedPickup();
+                    if (paired != null && paired instanceof Pickup) {
+                        if (removeJob(paired, vehicleRoutes)) {
+                            unassignedJobs.add(paired);
+                        }
+                    }
+                }
             }
             toRemove--;
         }
