diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/GenericCustomJob.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/GenericCustomJob.java
new file mode 100644
index 000000000..e76e12d88
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/GenericCustomJob.java
@@ -0,0 +1,427 @@
+/*
+ * Licensed to GraphHopper GmbH under one or more contributor
+ * license agreements. See the NOTICE file distributed with this work for
+ * additional information regarding copyright ownership.
+ *
+ * GraphHopper GmbH licenses this file to you under the Apache License,
+ * Version 2.0 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.graphhopper.jsprit.core.problem.job;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.List;
+
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.ExchangeActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.ServiceActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindows;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindowsImpl;
+
+/**
+ * Created by schroeder on 16/11/16.
+ *
+ * @author schroeder
+ * @author balage
+ */
+public class GenericCustomJob extends AbstractJob {
+
+
+    public static abstract class BuilderBase<T extends GenericCustomJob, B extends GenericCustomJob.BuilderBase<T, B>>
+    extends JobBuilder<T, B> {
+
+        private enum ActivityType {
+            SERVICE {
+
+                @Override
+                public JobActivity create(GenericCustomJob job, BuilderBase<?, ?>.BuilderActivityInfo info) {
+                    return new ServiceActivity(job, info.getName() == null ? name().toLowerCase() : info.getName(),
+                                    info.getLocation(), info.getOperationTime(), info.getSize(), prepareTimeWindows(info));
+                }
+            },
+            PICKUP {
+
+                @Override
+                public JobActivity create(GenericCustomJob job, BuilderBase<?, ?>.BuilderActivityInfo info) {
+                    return new PickupActivity(job, info.getName() == null ? name().toLowerCase() : info.getName(),
+                                    info.getLocation(), info.getOperationTime(), info.getSize(), prepareTimeWindows(info));
+                }
+            },
+            DELIVERY {
+
+                @Override
+                public JobActivity create(GenericCustomJob job, BuilderBase<?, ?>.BuilderActivityInfo info) {
+                    return new DeliveryActivity(job, info.getName() == null ? name().toLowerCase() : info.getName(),
+                                    info.getLocation(), info.getOperationTime(), info.getSize(), prepareTimeWindows(info));
+                }
+            },
+            EXCHANGE {
+
+                @Override
+                public JobActivity create(GenericCustomJob job, BuilderBase<?, ?>.BuilderActivityInfo info) {
+                    return new ExchangeActivity(job, info.getName() == null ? name().toLowerCase() : info.getName(),
+                                    info.getLocation(), info.getOperationTime(), info.getSize(), prepareTimeWindows(info));
+                }
+            };
+
+            public abstract JobActivity create(GenericCustomJob job, BuilderBase<?, ?>.BuilderActivityInfo builderActivityInfo);
+
+            private static Collection<TimeWindow> prepareTimeWindows(BuilderBase<?, ?>.BuilderActivityInfo info) {
+                TimeWindows tws = info.getTimeWindows();
+                if (tws.getTimeWindows().isEmpty()) {
+                    tws = TimeWindows.ANY_TIME;
+                }
+                return tws.getTimeWindows();
+            }
+        }
+
+        public class BuilderActivityInfo {
+            private ActivityType type;
+            private Location locs;
+            private SizeDimension size = SizeDimension.EMPTY;
+            private String name = null;
+            private double operationTime = 0;
+            private TimeWindowsImpl timeWindows = new TimeWindowsImpl();
+
+            private BuilderActivityInfo(ActivityType type, Location locs) {
+                super();
+                this.type = type;
+                this.locs = locs;
+            }
+
+            public ActivityType getType() {
+                return type;
+            }
+
+            public Location getLocation() {
+                return locs;
+            }
+
+            public SizeDimension getSize() {
+                return size;
+            }
+
+            public BuilderActivityInfo withSize(SizeDimension size) {
+                this.size = size;
+                return this;
+            }
+
+            public String getName() {
+                return name;
+            }
+
+            public BuilderActivityInfo withName(String name) {
+                this.name = name;
+                return this;
+            }
+
+            public TimeWindows getTimeWindows() {
+                return timeWindows;
+            }
+
+            public BuilderActivityInfo withTimeWindow(TimeWindow timeWindow) {
+                timeWindows.add(timeWindow);
+                return this;
+            }
+
+            public BuilderActivityInfo withTimeWindows(TimeWindow... tws) {
+                timeWindows.addAll(tws);
+                return this;
+            }
+
+            public BuilderBase<T, B> finish() {
+                return BuilderBase.this;
+            }
+
+            public double getOperationTime() {
+                return operationTime;
+            }
+
+            public BuilderActivityInfo withOperationTime(double operationTime) {
+                this.operationTime = operationTime;
+                return this;
+            }
+
+        }
+
+        List<BuilderActivityInfo> acts = new ArrayList<>();
+
+        public BuilderBase(String id) {
+            super(id);
+        }
+
+        public BuilderActivityInfo addService(Location location) {
+            BuilderActivityInfo act = new BuilderActivityInfo(ActivityType.SERVICE, location);
+            acts.add(act);
+            return act;
+        }
+
+        public BuilderActivityInfo addPickup(Location location) {
+            BuilderActivityInfo act = new BuilderActivityInfo(ActivityType.PICKUP, location);
+            acts.add(act);
+            return act;
+        }
+
+        public BuilderActivityInfo addDelivery(Location location) {
+            BuilderActivityInfo act = new BuilderActivityInfo(ActivityType.DELIVERY, location);
+            acts.add(act);
+            return act;
+        }
+
+        public BuilderActivityInfo addExchange(Location location) {
+            BuilderActivityInfo act = new BuilderActivityInfo(ActivityType.EXCHANGE, location);
+            acts.add(act);
+            return act;
+        }
+
+        //        private void add(ActivityType type, Location location, SizeDimension size, String name, Collection<TimeWindow> tws) {
+        //            BuilderActivityInfo builderActivityInfo = new BuilderActivityInfo(type, location);
+        //            if (name != null) {
+        //                builderActivityInfo.setName(name);
+        //            }
+        //            if (size != null) {
+        //                builderActivityInfo.setSize(size);
+        //            }
+        //            if (tws != null) {
+        //                builderActivityInfo.addTimeWindows(tws);
+        //            }
+        //
+        //            acts.add(builderActivityInfo);
+        //        }
+        //
+        //        // Service
+        //
+        //        public GenericCustomJob.BuilderBase<T, B> addService(Location location, SizeDimension size, String name,
+        //                        Collection<TimeWindow> tws) {
+        //            add(ActivityType.SERVICE, location, size, name, tws);
+        //            return this;
+        //        }
+        //
+        //        public GenericCustomJob.BuilderBase<T, B> addService(Location location, SizeDimension size, String name, TimeWindow tw) {
+        //            add(ActivityType.SERVICE, location, size, name, Collections.singleton(tw));
+        //            return this;
+        //        }
+        //
+        //        public GenericCustomJob.BuilderBase<T, B> addService(Location location, SizeDimension size, Collection<TimeWindow> tws) {
+        //            add(ActivityType.SERVICE, location, size, null, tws);
+        //            return this;
+        //        }
+        //
+        //        public GenericCustomJob.BuilderBase<T, B> addService(Location location, SizeDimension size, TimeWindow tw) {
+        //            add(ActivityType.SERVICE, location, size, null, Collections.singleton(tw));
+        //            return this;
+        //        }
+        //
+        //        public GenericCustomJob.BuilderBase<T, B> addService(Location location, SizeDimension size, String name) {
+        //            add(ActivityType.SERVICE, location, size, name, null);
+        //            return this;
+        //        }
+        //
+        //        public GenericCustomJob.BuilderBase<T, B> addService(Location location, SizeDimension size) {
+        //            add(ActivityType.SERVICE, location, size, null, null);
+        //            return this;
+        //        }
+        //
+        //        // Pickup
+        //
+        //        public GenericCustomJob.BuilderBase<T, B> addPickup(Location location, SizeDimension size, String name,
+        //                        Collection<TimeWindow> tws) {
+        //            add(ActivityType.PICKUP, location, size, name, tws);
+        //            return this;
+        //        }
+        //
+        //        public GenericCustomJob.BuilderBase<T, B> addPickup(Location location, SizeDimension size, String name, TimeWindow tw) {
+        //            add(ActivityType.PICKUP, location, size, name, Collections.singleton(tw));
+        //            return this;
+        //        }
+        //
+        //        public GenericCustomJob.BuilderBase<T, B> addPickup(Location location, SizeDimension size, Collection<TimeWindow> tws) {
+        //            add(ActivityType.PICKUP, location, size, null, tws);
+        //            return this;
+        //        }
+        //
+        //        public GenericCustomJob.BuilderBase<T, B> addPickup(Location location, SizeDimension size, TimeWindow tw) {
+        //            add(ActivityType.PICKUP, location, size, null, Collections.singleton(tw));
+        //            return this;
+        //        }
+        //
+        //        public GenericCustomJob.BuilderBase<T, B> addPickup(Location location, SizeDimension size, String name) {
+        //            add(ActivityType.PICKUP, location, size, name, null);
+        //            return this;
+        //        }
+        //
+        //        public GenericCustomJob.BuilderBase<T, B> addPickup(Location location, SizeDimension size) {
+        //            add(ActivityType.PICKUP, location, size, null, null);
+        //            return this;
+        //        }
+        //
+        //        // Delivery
+        //
+        //        public GenericCustomJob.BuilderBase<T, B> addDelivery(Location location, SizeDimension size, String name,
+        //                        Collection<TimeWindow> tws) {
+        //            add(ActivityType.DELIVERY, location, size, name, tws);
+        //            return this;
+        //        }
+        //
+        //        public GenericCustomJob.BuilderBase<T, B> addDelivery(Location location, SizeDimension size, String name, TimeWindow tw) {
+        //            add(ActivityType.DELIVERY, location, size, name, Collections.singleton(tw));
+        //            return this;
+        //        }
+        //
+        //        public GenericCustomJob.BuilderBase<T, B> addDelivery(Location location, SizeDimension size, Collection<TimeWindow> tws) {
+        //            add(ActivityType.DELIVERY, location, size, null, tws);
+        //            return this;
+        //        }
+        //
+        //        public GenericCustomJob.BuilderBase<T, B> addDelivery(Location location, SizeDimension size, TimeWindow tw) {
+        //            add(ActivityType.DELIVERY, location, size, null, Collections.singleton(tw));
+        //            return this;
+        //        }
+        //
+        //        public GenericCustomJob.BuilderBase<T, B> addDelivery(Location location, SizeDimension size, String name) {
+        //            add(ActivityType.DELIVERY, location, size, name, null);
+        //            return this;
+        //        }
+        //
+        //        public GenericCustomJob.BuilderBase<T, B> addDelivery(Location location, SizeDimension size) {
+        //            add(ActivityType.DELIVERY, location, size, null, null);
+        //            return this;
+        //        }
+        //
+        //        // Exchange
+        //
+        //        public GenericCustomJob.BuilderBase<T, B> addExchange(Location location, SizeDimension size, String name,
+        //                        Collection<TimeWindow> tws) {
+        //            add(ActivityType.EXCHANGE, location, size, name, tws);
+        //            return this;
+        //        }
+        //
+        //        public GenericCustomJob.BuilderBase<T, B> addExchange(Location location, SizeDimension size, String name, TimeWindow tw) {
+        //            add(ActivityType.EXCHANGE, location, size, name, Collections.singleton(tw));
+        //            return this;
+        //        }
+        //
+        //        public GenericCustomJob.BuilderBase<T, B> addExchange(Location location, SizeDimension size, Collection<TimeWindow> tws) {
+        //            add(ActivityType.EXCHANGE, location, size, null, tws);
+        //            return this;
+        //        }
+        //
+        //        public GenericCustomJob.BuilderBase<T, B> addExchange(Location location, SizeDimension size, TimeWindow tw) {
+        //            add(ActivityType.EXCHANGE, location, size, null, Collections.singleton(tw));
+        //            return this;
+        //        }
+        //
+        //        public GenericCustomJob.BuilderBase<T, B> addExchange(Location location, SizeDimension size, String name) {
+        //            add(ActivityType.EXCHANGE, location, size, name, null);
+        //            return this;
+        //        }
+        //
+        //        public GenericCustomJob.BuilderBase<T, B> addExchange(Location location, SizeDimension size) {
+        //            add(ActivityType.EXCHANGE, location, size, null, null);
+        //            return this;
+        //        }
+        //
+        //        public GenericCustomJob.BuilderBase<T, B> addExchange(Location location, String name, Collection<TimeWindow> tws) {
+        //            add(ActivityType.EXCHANGE, location, null, name, tws);
+        //            return this;
+        //        }
+        //
+        //        public GenericCustomJob.BuilderBase<T, B> addExchange(Location location, String name, TimeWindow tw) {
+        //            add(ActivityType.EXCHANGE, location, null, name, Collections.singleton(tw));
+        //            return this;
+        //        }
+        //
+        //        public GenericCustomJob.BuilderBase<T, B> addExchange(Location location, Collection<TimeWindow> tws) {
+        //            add(ActivityType.EXCHANGE, location, null, null, tws);
+        //            return this;
+        //        }
+        //
+        //        public GenericCustomJob.BuilderBase<T, B> addExchange(Location location, TimeWindow tw) {
+        //            add(ActivityType.EXCHANGE, location, null, null, Collections.singleton(tw));
+        //            return this;
+        //        }
+        //
+        //        public GenericCustomJob.BuilderBase<T, B> addExchange(Location location, String name) {
+        //            add(ActivityType.EXCHANGE, location, null, name, null);
+        //            return this;
+        //        }
+        //
+        //        public GenericCustomJob.BuilderBase<T, B> addExchange(Location location) {
+        //            add(ActivityType.EXCHANGE, location, null, null, null);
+        //            return this;
+        //        }
+
+        @Override
+        protected void validate() {
+            if (acts.isEmpty()) {
+                throw new IllegalStateException("There is no activities defined for the job.");
+            }
+        }
+
+        public List<BuilderActivityInfo> getActs() {
+            return Collections.unmodifiableList(acts);
+        }
+
+    }
+
+    public static final class Builder extends GenericCustomJob.BuilderBase<GenericCustomJob, GenericCustomJob.Builder> {
+
+        public static GenericCustomJob.Builder newInstance(String id) {
+            return new GenericCustomJob.Builder(id);
+        }
+
+        public Builder(String id) {
+            super(id);
+        }
+
+        @Override
+        protected GenericCustomJob createInstance() {
+            return new GenericCustomJob(this);
+        }
+
+    }
+
+    /**
+     * Builder based constructor.
+     *
+     * @param builder The builder instance.
+     * @see JobBuilder
+     */
+    protected GenericCustomJob(JobBuilder<?, ?> builder) {
+        super(builder);
+
+    }
+
+    @Override
+    public SizeDimension getSize() {
+        return SizeDimension.EMPTY;
+    }
+
+    @Override
+    protected void createActivities(JobBuilder<? extends AbstractJob, ?> jobBuilder) {
+        GenericCustomJob.Builder builder = (GenericCustomJob.Builder) jobBuilder;
+        JobActivityList list = new SequentialJobActivityList(this);
+        for (GenericCustomJob.Builder.BuilderActivityInfo info : builder.getActs()) {
+            JobActivity act = info.getType().create(this, info);
+            list.addActivity(act);
+        }
+        setActivities(list);
+    }
+}
+
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TimeWindows.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TimeWindows.java
index 0e49736f1..c3c8ebfbd 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TimeWindows.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TimeWindows.java
@@ -32,4 +32,29 @@
     public final TimeWindows ANY_TIME = TimeWindowsImpl.INTERNAL_ANY_TIME;
 
     public Collection<TimeWindow> getTimeWindows();
+
+
+    public static TimeWindows of(TimeWindow tw) {
+        TimeWindowsImpl tws = new TimeWindowsImpl();
+        tws.add(tw);
+        return tws;
+    }
+
+    public static TimeWindows of(TimeWindow tw, TimeWindow tw2) {
+        TimeWindowsImpl tws = new TimeWindowsImpl();
+        tws.add(tw);
+        tws.add(tw2);
+        return tws;
+    }
+
+    public static TimeWindows of(TimeWindow tw, TimeWindow tw2, TimeWindow... others) {
+        TimeWindowsImpl tws = new TimeWindowsImpl();
+        tws.add(tw);
+        tws.add(tw2);
+        for (TimeWindow otw : others) {
+            tws.add(otw);
+        }
+        return tws;
+    }
+
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TimeWindowsImpl.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TimeWindowsImpl.java
index f913cfa9a..7c79579ef 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TimeWindowsImpl.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TimeWindowsImpl.java
@@ -65,6 +65,22 @@ public void add(TimeWindow timeWindow) {
         timeWindows.add(timeWindow);
     }
 
+    public void addAll(TimeWindows timeWindows) {
+        addAll(timeWindows.getTimeWindows());
+    }
+
+    public void addAll(Collection<TimeWindow> timeWindows) {
+        for (TimeWindow tw : timeWindows) {
+            add(tw);
+        }
+    }
+
+    public void addAll(TimeWindow... otherTimeWindows) {
+        for (TimeWindow tw : otherTimeWindows) {
+            add(tw);
+        }
+    }
+
     @Override
     public Collection<TimeWindow> getTimeWindows() {
         return Collections.unmodifiableCollection(timeWindows);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ReturnedShipmentTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ReturnedShipmentTest.java
index 13555281a..406996a28 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ReturnedShipmentTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ReturnedShipmentTest.java
@@ -25,6 +25,9 @@
 import static org.junit.Assert.assertThat;
 import static org.junit.Assert.assertTrue;
 
+import java.util.HashSet;
+import java.util.Set;
+
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -519,28 +522,36 @@ public void whenSettingIncorrectPriorities_itShouldThrowException2() {
 
     @Test
     public void firstTest() {
-        CustomJob cj = CustomJob.Builder.newInstance("job")
-                        .addPickup(Location.newInstance(10, 0), SizeDimension.of(1, 0))
-                        .addExchange(Location.newInstance(5, 0), SizeDimension.of(-3, 2))
-                        .addDelivery(Location.newInstance(20, 0), SizeDimension.of(1))
-                        .build();
-        CustomJob cj2 = CustomJob.Builder.newInstance("job2")
-                        .addPickup(Location.newInstance(20, 0), SizeDimension.of(1, 0))
-                        .addExchange(Location.newInstance(30, 0), SizeDimension.of(-3, 2))
+        Set<Job> jobs = new HashSet<>();
+        jobs.add(GenericCustomJob.Builder.newInstance("job").addPickup(Location.newInstance(10, 0)).withSize(SizeDimension.of(1))
+                        .withTimeWindow(TimeWindow.newInstance(0, 30)).finish()
+                        .addExchange(Location.newInstance(5, 30)).finish().addDelivery(Location.newInstance(10, 0))
+                        .withSize(SizeDimension.of(1)).finish()
+                        .build());
+        jobs.add(CustomJob.Builder.newInstance("job2")
+                        .addPickup(Location.newInstance(20, 0), SizeDimension.of(1))
+                        .addExchange(Location.newInstance(20, 30), SizeDimension.EMPTY)
                         .addDelivery(Location.newInstance(20, 0), SizeDimension.of(1))
+                        .build());
+        jobs.add(CustomJob.Builder.newInstance("job3")
+                        .addPickup(Location.newInstance(20, 30), SizeDimension.of(1))
+                        .addExchange(Location.newInstance(40, 30), SizeDimension.EMPTY)
+                        .addDelivery(Location.newInstance(20, 30), SizeDimension.of(1))
+                        .build());
+        jobs.add(CustomJob.Builder.newInstance("job4")
+                        .addPickup(Location.newInstance(20, 30), SizeDimension.of(1))
+                        .addExchange(Location.newInstance(40, 30), SizeDimension.EMPTY)
+                        .addDelivery(Location.newInstance(20, 30), SizeDimension.of(1))
+                        .build());
+        VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0, 2)
                         .build();
-        CustomJob cj3 = CustomJob.Builder.newInstance("job3")
-                        .addPickup(Location.newInstance(20, 0), SizeDimension.of(1, 0))
-                        .addExchange(Location.newInstance(30, 0), SizeDimension.of(-3, 2))
-                        .addDelivery(Location.newInstance(20, 0), SizeDimension.of(1))
-                        .build();
-        VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0, 3)
-                        .addCapacityDimension(1, 2).build();
         Vehicle v = VehicleImpl.Builder.newInstance("v").setType(type)
                         .setStartLocation(Location.newInstance(0, 0)).build();
+        Vehicle v2 = VehicleImpl.Builder.newInstance("v2").setType(type)
+                        .setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance()
                         .setFleetSize(FleetSize.FINITE)
-                        .addJob(cj).addJob(cj2).addJob(cj3).addVehicle(v).build();
+                        .addAllJobs(jobs).addVehicle(v).addVehicle(v2).build();
         VehicleRoutingAlgorithm vra = Jsprit.createAlgorithm(vrp);
         vra.setMaxIterations(10);
         VehicleRoutingProblemSolution solution = Solutions.bestOf(vra.searchSolutions());
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/CustomJob.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/CustomJob.java
index 9cf74cad8..95bb936f9 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/CustomJob.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/CustomJob.java
@@ -20,6 +20,7 @@
 
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Collection;
 import java.util.List;
 
 import com.graphhopper.jsprit.core.problem.Location;
@@ -38,7 +39,7 @@
 public class CustomJob extends AbstractJob {
 
     public static abstract class BuilderBase<T extends CustomJob, B extends CustomJob.BuilderBase<T, B>>
-        extends JobBuilder<T, B> {
+    extends JobBuilder<T, B> {
 
         List<Location> locs = new ArrayList<>();
 
@@ -46,33 +47,52 @@
 
         List<String> types = new ArrayList<>();
 
+        List<TimeWindow> timeWindows = new ArrayList<>();
+
         public BuilderBase(String id) {
             super(id);
         }
 
-        public CustomJob.BuilderBase<T, B> addPickup(Location location, SizeDimension loadChange) {
-            add(location, loadChange);
+        private void add(Location location, SizeDimension loadChange, TimeWindow tw) {
+            locs.add(location);
+            cap.add(loadChange);
+            timeWindows.add(tw);
+        }
+
+        public CustomJob.BuilderBase<T, B> addPickup(Location location, SizeDimension loadChange,
+                        TimeWindow tw) {
+            add(location, loadChange, tw);
             types.add("pickup");
             return this;
         }
 
-        private void add(Location location, SizeDimension loadChange) {
-            locs.add(location);
-            cap.add(loadChange);
+        public CustomJob.BuilderBase<T, B> addPickup(Location location, SizeDimension loadChange) {
+            return addPickup(location, loadChange, TimeWindow.ETERNITY);
         }
 
-        public CustomJob.BuilderBase<T, B> addDelivery(Location location, SizeDimension loadChange) {
-            add(location, loadChange);
+        public CustomJob.BuilderBase<T, B> addDelivery(Location location, SizeDimension loadChange,
+                        TimeWindow tw) {
+            add(location, loadChange, tw);
             types.add("delivery");
             return this;
         }
 
-        public CustomJob.BuilderBase<T, B> addExchange(Location location, SizeDimension loadChange) {
-            add(location, loadChange);
+        public CustomJob.BuilderBase<T, B> addDelivery(Location location,
+                        SizeDimension loadChange) {
+            return addDelivery(location, loadChange, TimeWindow.ETERNITY);
+        }
+
+        public CustomJob.BuilderBase<T, B> addExchange(Location location, SizeDimension loadChange,
+                        TimeWindow tw) {
+            add(location, loadChange, tw);
             types.add("exchange");
             return this;
         }
 
+        public CustomJob.BuilderBase<T, B> addExchange(Location location,
+                        SizeDimension loadChange) {
+            return addExchange(location, loadChange, TimeWindow.ETERNITY);
+        }
 
 
         public List<Location> getLocs() {
@@ -87,6 +107,11 @@ private void add(Location location, SizeDimension loadChange) {
             return types;
         }
 
+        public List<TimeWindow> getTimeWindows() {
+            return timeWindows;
+        }
+
+        @Override
         protected void validate() {
 
         }
@@ -107,6 +132,10 @@ protected CustomJob createInstance() {
             return new CustomJob(this);
         }
 
+        public Collection<TimeWindow> getTimeWindows(int i) {
+            return Arrays.asList(timeWindows.get(i));
+        }
+
     }
 
     /**
@@ -131,11 +160,14 @@ protected void createActivities(JobBuilder<? extends AbstractJob, ?> jobBuilder)
         JobActivityList list = new SequentialJobActivityList(this);
         for (int i = 0; i < builder.getLocs().size(); i++) {
             if (builder.getTypes().get(i).equals("pickup")) {
-                list.addActivity(new PickupActivity(this, "pick", builder.getLocs().get(i), 0, builder.getCaps().get(i), Arrays.asList(TimeWindow.ETERNITY)));
+                list.addActivity(new PickupActivity(this, "pick", builder.getLocs().get(i), 0, builder.getCaps().get(i),
+                                builder.getTimeWindows(i)));
             } else if (builder.getTypes().get(i).equals("delivery")) {
-                list.addActivity(new DeliveryActivity(this, "delivery", builder.getLocs().get(i), 0, builder.getCaps().get(i).invert(), Arrays.asList(TimeWindow.ETERNITY)));
+                list.addActivity(new DeliveryActivity(this, "delivery", builder.getLocs().get(i), 0,
+                                builder.getCaps().get(i).invert(), builder.getTimeWindows(i)));
             } else {
-                list.addActivity(new ExchangeActivity(this, "exchange", builder.getLocs().get(i), 0, builder.getCaps().get(i), Arrays.asList(TimeWindow.ETERNITY)));
+                list.addActivity(new ExchangeActivity(this, "exchange", builder.getLocs().get(i), 0,
+                                builder.getCaps().get(i), builder.getTimeWindows(i)));
             }
         }
         setActivities(list);
