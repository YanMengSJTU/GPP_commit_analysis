diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExampleWithGWR.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExampleWithGWR.java
new file mode 100644
index 000000000..07ee332d5
--- /dev/null
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleExampleWithGWR.java
@@ -0,0 +1,360 @@
+package com.graphhopper.jsprit.examples;
+
+import com.graphhopper.jsprit.analysis.toolbox.GraphStreamViewer;
+import com.graphhopper.jsprit.analysis.toolbox.GraphStreamViewer.Label;
+import com.graphhopper.jsprit.analysis.toolbox.Plotter;
+import com.graphhopper.jsprit.core.algorithm.VehicleRoutingAlgorithm;
+import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
+import com.graphhopper.jsprit.core.algorithm.box.SchrimpfFactory;
+import com.graphhopper.jsprit.core.analysis.SolutionAnalyser;
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
+import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
+import com.graphhopper.jsprit.core.problem.cost.TransportDistance;
+import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
+import com.graphhopper.jsprit.core.problem.job.Job;
+import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
+import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivities;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
+import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl.Builder;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
+import com.graphhopper.jsprit.core.reporting.SolutionPrinter;
+import com.graphhopper.jsprit.core.util.Coordinate;
+import com.graphhopper.jsprit.core.util.EuclideanDistanceCalculator;
+import com.graphhopper.jsprit.core.util.Solutions;
+import com.graphhopper.jsprit.core.util.UnassignedJobReasonTracker;
+import com.graphhopper.jsprit.core.util.VehicleRoutingTransportCostsMatrix;
+import com.graphhopper.jsprit.io.algorithm.VehicleRoutingAlgorithms;
+import com.graphhopper.jsprit.io.problem.VrpXMLWriter;
+
+import junit.framework.Assert;
+
+import java.io.File;
+import java.math.BigDecimal;
+import java.math.RoundingMode;
+import java.security.cert.CertPathValidatorException.Reason;
+import java.sql.DriverManager;
+import java.text.DateFormat;
+import java.text.DecimalFormat;
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Date;
+import java.util.Iterator;
+import java.util.TimeZone;
+
+
+public class SimpleExampleWithGWR {
+
+
+    public static void main(String[] args) {
+        /*
+         * some preparation - create output folder
+	*/
+        File dir = new File("D:\\output");
+        // if the directory does not exist, create it
+        if (!dir.exists()) {
+            System.out.println("creating directory ./output");
+            boolean result = dir.mkdir();
+            if (result) System.out.println("./output created");
+        }
+
+        
+	/*
+         * get a vehicle type-builder and build a type with the typeId "vehicleType" and one capacity dimension,
+         *  i.e. weight, and capacity dimension value of 2
+	*/
+        final int EF_CASES_INDEX = 0;
+        final int KGs_INDEX = 1;
+     
+        VehicleTypeImpl.Builder vehicleTypeBuilder = VehicleTypeImpl.Builder.newInstance("vehicleType")
+        	.addCapacityDimension(EF_CASES_INDEX, 300).setCostPerDistance(1.5).setCostPerWaitingTime(1);
+        VehicleType vehicleType = vehicleTypeBuilder.build();
+        
+
+	/*
+         * get a vehicle-builder and build a vehicle located at (10,10) with type "vehicleType"
+	*/
+        Builder vehicleBuilder = VehicleImpl.Builder.newInstance("vehicle");
+        vehicleBuilder.setStartLocation(Location.newInstance(55.218592 , 25.120694));
+        vehicleBuilder.setType(vehicleType);
+        vehicleBuilder.setEarliestStart(36000);
+        VehicleImpl vehicle = vehicleBuilder.build();
+        
+        Builder vehicleBuilder2 = VehicleImpl.Builder.newInstance("vehicle2");
+        vehicleBuilder2.setStartLocation(Location.newInstance(55.218592 , 25.120694));
+        vehicleBuilder2.setType(vehicleType);
+        vehicleBuilder2.setEarliestStart(36000);
+        VehicleImpl vehicle2= vehicleBuilder2.build();
+        
+        
+        
+
+        
+
+	/*
+         * build services at the required locations
+	*/
+        
+        ArrayList<Service> jobs = new ArrayList<Service>();
+        jobs.add(Service.Builder.newInstance("	15062074	").addSizeDimension(EF_CASES_INDEX,	17	).setLocation(Location.newInstance(	55.145739	,	24.982329	)).setServiceTime(	1200	).build());
+
+        jobs.add(	Service.Builder.newInstance("	15062169	").addSizeDimension(EF_CASES_INDEX,	59	).setLocation(Location.newInstance(	55.278715	,	25.197486	)).setServiceTime(	2059	).build());
+        jobs.add(	Service.Builder.newInstance("	15062215	").addSizeDimension(EF_CASES_INDEX,	13	).setLocation(Location.newInstance(	55.153904	,	24.986100	)).setServiceTime(	1146	).build());
+        jobs.add(	Service.Builder.newInstance("	15062229	").addSizeDimension(EF_CASES_INDEX,	21	).setLocation(Location.newInstance(	55.278715	,	25.197486	)).setServiceTime(	2059	).build());
+        jobs.add(	Service.Builder.newInstance("	15062233	").addSizeDimension(EF_CASES_INDEX,	100	).setLocation(Location.newInstance(	55.151647	,	24.992749	)).setServiceTime(	6930	).build());
+        jobs.add(	Service.Builder.newInstance("	15062235	").addSizeDimension(EF_CASES_INDEX,	6	).setLocation(Location.newInstance(	55.151647	,	24.992749	)).setServiceTime(	6930	).build());
+        jobs.add(	Service.Builder.newInstance("	15062342	").addSizeDimension(EF_CASES_INDEX,	11	).setLocation(Location.newInstance(	55.278715	,	25.197486	)).setServiceTime(	2059	).build());
+        jobs.add(	Service.Builder.newInstance("	15062368	").addSizeDimension(EF_CASES_INDEX,	3	).setLocation(Location.newInstance(	55.278715	,	25.197486	)).setServiceTime(	2059	).build());
+        jobs.add(	Service.Builder.newInstance("	15062125	").addSizeDimension(EF_CASES_INDEX,	22	).setLocation(Location.newInstance(	55.424652	,	25.223728	)).setServiceTime(	1920	).build());
+        jobs.add(	Service.Builder.newInstance("	15062298	").addSizeDimension(EF_CASES_INDEX,	25	).setLocation(Location.newInstance(	55.384321	,	25.232676	)).setServiceTime(	1800	).build());
+        jobs.add(	Service.Builder.newInstance("	15062301	").addSizeDimension(EF_CASES_INDEX,	10	).setLocation(Location.newInstance(	55.386604	,	25.103690	)).setServiceTime(	2712	).build());
+        jobs.add(	Service.Builder.newInstance("	15062302	").addSizeDimension(EF_CASES_INDEX,	34	).setLocation(Location.newInstance(	55.386604	,	25.103690	)).setServiceTime(	2712	).build());
+        jobs.add(	Service.Builder.newInstance("	15062340	").addSizeDimension(EF_CASES_INDEX,	20	).setLocation(Location.newInstance(	55.400436	,	25.225548	)).setServiceTime(	1440	).build());
+        jobs.add(	Service.Builder.newInstance("	15062346	").addSizeDimension(EF_CASES_INDEX,	0	).setLocation(Location.newInstance(	55.340947	,	25.242524	)).setServiceTime(	611	).build());
+        jobs.add(	Service.Builder.newInstance("	15062484	").addSizeDimension(EF_CASES_INDEX,	1	).setLocation(Location.newInstance(	55.378839	,	25.214178	)).setServiceTime(	621	).build());
+        jobs.add(	Service.Builder.newInstance("	15062542	").addSizeDimension(EF_CASES_INDEX,	1	).setLocation(Location.newInstance(	55.351392	,	25.224199	)).setServiceTime(	1167	).build());
+        jobs.add(	Service.Builder.newInstance("	15062560	").addSizeDimension(EF_CASES_INDEX,	23	).setLocation(Location.newInstance(	55.409607	,	25.216531	)).setServiceTime(	965	).build());
+        jobs.add(	Service.Builder.newInstance("	15062605	").addSizeDimension(EF_CASES_INDEX,	10	).setLocation(Location.newInstance(	55.351392	,	25.224199	)).setServiceTime(	1167	).build());
+        jobs.add(	Service.Builder.newInstance("	15062635	").addSizeDimension(EF_CASES_INDEX,	4	).setLocation(Location.newInstance(	55.409607	,	25.216531	)).setServiceTime(	3900	).build());
+        jobs.add(	Service.Builder.newInstance("	15062637	").addSizeDimension(EF_CASES_INDEX,	75	).setLocation(Location.newInstance(	55.409607	,	25.216531	)).setServiceTime(	3900	).build());
+        jobs.add(	Service.Builder.newInstance("	15062728	").addSizeDimension(EF_CASES_INDEX,	3	).setLocation(Location.newInstance(	55.409607	,	25.216531	)).setServiceTime(	126	).build());
+        jobs.add(	Service.Builder.newInstance("	15062170	").addSizeDimension(EF_CASES_INDEX,	48	).setLocation(Location.newInstance(	55.351392	,	25.224199	)).setServiceTime(	1752	).build());
+        jobs.add(	Service.Builder.newInstance("	15062424	").addSizeDimension(EF_CASES_INDEX,	2	).setLocation(Location.newInstance(	55.332716	,	25.252178	)).setServiceTime(	4715	).build());
+        jobs.add(	Service.Builder.newInstance("	15062682	").addSizeDimension(EF_CASES_INDEX,	2	).setLocation(Location.newInstance(	55.332716	,	25.252178	)).setServiceTime(	4715	).build());
+        jobs.add(	Service.Builder.newInstance("	15062683	").addSizeDimension(EF_CASES_INDEX,	94	).setLocation(Location.newInstance(	55.332716	,	25.252178	)).setServiceTime(	4715	).build());
+        jobs.add(	Service.Builder.newInstance("	15062008	").addSizeDimension(EF_CASES_INDEX,	1	).setLocation(Location.newInstance(	55.332716	,	25.252178	)).setServiceTime(	28	).build());
+        jobs.add(	Service.Builder.newInstance("	15062063	").addSizeDimension(EF_CASES_INDEX,	1	).setLocation(Location.newInstance(	55.332716	,	25.252178	)).setServiceTime(	42	).build());
+        jobs.add(	Service.Builder.newInstance("	15062176	").addSizeDimension(EF_CASES_INDEX,	1	).setLocation(Location.newInstance(	55.351960	,	25.295999	)).setServiceTime(	768	).build());
+        jobs.add(	Service.Builder.newInstance("	15062178	").addSizeDimension(EF_CASES_INDEX,	3	).setLocation(Location.newInstance(	55.351960	,	25.295999	)).setServiceTime(	768	).build());
+        jobs.add(	Service.Builder.newInstance("	15062202	").addSizeDimension(EF_CASES_INDEX,	6	).setLocation(Location.newInstance(	55.318326	,	25.269614	)).setServiceTime(	852	).build());
+        jobs.add(	Service.Builder.newInstance("	15062216	").addSizeDimension(EF_CASES_INDEX,	3	).setLocation(Location.newInstance(	55.334124	,	25.250218	)).setServiceTime(	775	).build());
+        jobs.add(	Service.Builder.newInstance("	15062262	").addSizeDimension(EF_CASES_INDEX,	0	).setLocation(Location.newInstance(	55.334125	,	25.250217	)).setServiceTime(	15	).build());
+        jobs.add(	Service.Builder.newInstance("	15062386	").addSizeDimension(EF_CASES_INDEX,	12	).setLocation(Location.newInstance(	55.332716	,	25.252178	)).setServiceTime(	1104	).build());
+        jobs.add(	Service.Builder.newInstance("	15062434	").addSizeDimension(EF_CASES_INDEX,	2	).setLocation(Location.newInstance(	55.334125	,	25.250217	)).setServiceTime(	96	).build());
+        jobs.add(	Service.Builder.newInstance("	15062457	").addSizeDimension(EF_CASES_INDEX,	1	).setLocation(Location.newInstance(	55.334125	,	25.250217	)).setServiceTime(	627	).build());
+        jobs.add(	Service.Builder.newInstance("	15062481	").addSizeDimension(EF_CASES_INDEX,	10	).setLocation(Location.newInstance(	55.320557	,	25.263132	)).setServiceTime(	1080	).build());
+        jobs.add(	Service.Builder.newInstance("	15062488	").addSizeDimension(EF_CASES_INDEX,	0	).setLocation(Location.newInstance(	55.342609	,	25.242249	)).setServiceTime(	610	).build());
+        jobs.add(	Service.Builder.newInstance("	15062539	").addSizeDimension(EF_CASES_INDEX,	10	).setLocation(Location.newInstance(	55.310365	,	25.265519	)).setServiceTime(	1140	).build());
+        jobs.add(	Service.Builder.newInstance("	15062544	").addSizeDimension(EF_CASES_INDEX,	24	).setLocation(Location.newInstance(	55.332716	,	25.252178	)).setServiceTime(	997	).build());
+        jobs.add(	Service.Builder.newInstance("	15062547	").addSizeDimension(EF_CASES_INDEX,	12	).setLocation(Location.newInstance(	55.327736	,	25.254555	)).setServiceTime(	1224	).build());
+        jobs.add(	Service.Builder.newInstance("	15062554	").addSizeDimension(EF_CASES_INDEX,	1	).setLocation(Location.newInstance(	55.327736	,	25.254555	)).setServiceTime(	1224	).build());
+        jobs.add(	Service.Builder.newInstance("	15062598	").addSizeDimension(EF_CASES_INDEX,	4	).setLocation(Location.newInstance(	55.330911	,	25.271321	)).setServiceTime(	792	).build());
+        jobs.add(	Service.Builder.newInstance("	15062629	").addSizeDimension(EF_CASES_INDEX,	8	).setLocation(Location.newInstance(	55.332720	,	25.252178	)).setServiceTime(	1032	).build());
+        jobs.add(	Service.Builder.newInstance("	15062656	").addSizeDimension(EF_CASES_INDEX,	1	).setLocation(Location.newInstance(	55.345145	,	25.250906	)).setServiceTime(	1086	).build());
+        jobs.add(	Service.Builder.newInstance("	15062657	").addSizeDimension(EF_CASES_INDEX,	2	).setLocation(Location.newInstance(	55.345145	,	25.250906	)).setServiceTime(	1086	).build());
+        jobs.add(	Service.Builder.newInstance("	15062748	").addSizeDimension(EF_CASES_INDEX,	6	).setLocation(Location.newInstance(	55.345145	,	25.250906	)).setServiceTime(	1086	).build());
+        jobs.add(	Service.Builder.newInstance("	15062503	").addSizeDimension(EF_CASES_INDEX,	12	).setLocation(Location.newInstance(	55.134416	,	25.078685	)).setServiceTime(	5723	).build());
+        jobs.add(	Service.Builder.newInstance("	15062546	").addSizeDimension(EF_CASES_INDEX,	23	).setLocation(Location.newInstance(	55.133321	,	25.077261	)).setServiceTime(	1565	).build());
+        jobs.add(	Service.Builder.newInstance("	15062299	").addSizeDimension(EF_CASES_INDEX,	56	).setLocation(Location.newInstance(	55.278715	,	25.197486	)).setServiceTime(	2994	).build());
+        jobs.add(	Service.Builder.newInstance("	15062461	").addSizeDimension(EF_CASES_INDEX,	1	).setLocation(Location.newInstance(	55.278715	,	25.197486	)).setServiceTime(	2994	).build());
+        jobs.add(	Service.Builder.newInstance("	15062609	").addSizeDimension(EF_CASES_INDEX,	18	).setLocation(Location.newInstance(	55.278715	,	25.197486	)).setServiceTime(	5662	).build());
+        jobs.add(	Service.Builder.newInstance("	15062612	").addSizeDimension(EF_CASES_INDEX,	17	).setLocation(Location.newInstance(	55.278715	,	25.197486	)).setServiceTime(	5662	).build());
+        jobs.add(	Service.Builder.newInstance("	15062009	").addSizeDimension(EF_CASES_INDEX,	4	).setLocation(Location.newInstance(	55.278715	,	25.197486	)).setServiceTime(	210	).build());
+        jobs.add(	Service.Builder.newInstance("	15062027	").addSizeDimension(EF_CASES_INDEX,	1	).setLocation(Location.newInstance(	55.278715	,	25.197486	)).setServiceTime(	210	).build());
+        jobs.add(	Service.Builder.newInstance("	15062037	").addSizeDimension(EF_CASES_INDEX,	10	).setLocation(Location.newInstance(	55.162134	,	25.030861	)).setServiceTime(	1140	).build());
+        jobs.add(	Service.Builder.newInstance("	15062071	").addSizeDimension(EF_CASES_INDEX,	15	).setLocation(Location.newInstance(	55.188527	,	24.989559	)).setServiceTime(	1800	).build());
+        jobs.add(	Service.Builder.newInstance("	15062197	").addSizeDimension(EF_CASES_INDEX,	10	).setLocation(Location.newInstance(	55.278715	,	25.197486	)).setServiceTime(	420	).build());
+        jobs.add(	Service.Builder.newInstance("	15062288	").addSizeDimension(EF_CASES_INDEX,	6	).setLocation(Location.newInstance(	55.280893	,	25.194355	)).setServiceTime(	865	).build());
+        jobs.add(	Service.Builder.newInstance("	15062310	").addSizeDimension(EF_CASES_INDEX,	1	).setLocation(Location.newInstance(	55.278715	,	25.197486	)).setServiceTime(	654	).build());
+        jobs.add(	Service.Builder.newInstance("	15062330	").addSizeDimension(EF_CASES_INDEX,	1	).setLocation(Location.newInstance(	55.278715	,	25.197486	)).setServiceTime(	42	).build());
+        jobs.add(	Service.Builder.newInstance("	15062350	").addSizeDimension(EF_CASES_INDEX,	8	).setLocation(Location.newInstance(	55.278715	,	25.197486	)).setServiceTime(	336	).build());
+        jobs.add(	Service.Builder.newInstance("	15062354	").addSizeDimension(EF_CASES_INDEX,	1	).setLocation(Location.newInstance(	55.270401	,	25.054112	)).setServiceTime(	654	).build());
+        jobs.add(	Service.Builder.newInstance("	15062363	").addSizeDimension(EF_CASES_INDEX,	5	).setLocation(Location.newInstance(	55.252108	,	25.036694	)).setServiceTime(	840	).build());
+        jobs.add(	Service.Builder.newInstance("	15062385	").addSizeDimension(EF_CASES_INDEX,	1	).setLocation(Location.newInstance(	55.278715	,	25.197486	)).setServiceTime(	42	).build());
+        jobs.add(	Service.Builder.newInstance("	15062394	").addSizeDimension(EF_CASES_INDEX,	1	).setLocation(Location.newInstance(	55.280892	,	25.194356	)).setServiceTime(	642	).build());
+        jobs.add(	Service.Builder.newInstance("	15062425	").addSizeDimension(EF_CASES_INDEX,	8	).setLocation(Location.newInstance(	55.278715	,	25.197486	)).setServiceTime(	336	).build());
+        jobs.add(	Service.Builder.newInstance("	15062451	").addSizeDimension(EF_CASES_INDEX,	2	).setLocation(Location.newInstance(	55.278715	,	25.197486	)).setServiceTime(	63	).build());
+        jobs.add(	Service.Builder.newInstance("	15062495	").addSizeDimension(EF_CASES_INDEX,	13	).setLocation(Location.newInstance(	55.279058	,	25.197544	)).setServiceTime(	1302	).build());
+        jobs.add(	Service.Builder.newInstance("	15062508	").addSizeDimension(EF_CASES_INDEX,	21	).setLocation(Location.newInstance(	55.278715	,	25.197486	)).setServiceTime(	882	).build());
+        jobs.add(	Service.Builder.newInstance("	15062522	").addSizeDimension(EF_CASES_INDEX,	21	).setLocation(Location.newInstance(	55.278715	,	25.197486	)).setServiceTime(	888	).build());
+        jobs.add(	Service.Builder.newInstance("	15062564	").addSizeDimension(EF_CASES_INDEX,	6	).setLocation(Location.newInstance(	55.278715	,	25.197486	)).setServiceTime(	252	).build());
+        jobs.add(	Service.Builder.newInstance("	15062675	").addSizeDimension(EF_CASES_INDEX,	2	).setLocation(Location.newInstance(	55.278715	,	25.197486	)).setServiceTime(	120	).build());
+        jobs.add(	Service.Builder.newInstance("	15062709	").addSizeDimension(EF_CASES_INDEX,	2	).setLocation(Location.newInstance(	55.218440	,	25.030909	)).setServiceTime(	696	).build());
+        jobs.add(	Service.Builder.newInstance("	15062734	").addSizeDimension(EF_CASES_INDEX,	2	).setLocation(Location.newInstance(	55.278715	,	25.197486	)).setServiceTime(	63	).build());
+        jobs.add(	Service.Builder.newInstance("	15062784	").addSizeDimension(EF_CASES_INDEX,	5	).setLocation(Location.newInstance(	55.188527	,	24.989559	)).setServiceTime(	1800	).build());
+        jobs.add(	Service.Builder.newInstance("	15061985	").addSizeDimension(EF_CASES_INDEX,	3	).setLocation(Location.newInstance(	55.117074	,	25.132969	)).setServiceTime(	3209	).build());
+        jobs.add(	Service.Builder.newInstance("	15062052	").addSizeDimension(EF_CASES_INDEX,	1	).setLocation(Location.newInstance(	55.140669	,	25.119176	)).setServiceTime(	762	).build());
+        jobs.add(	Service.Builder.newInstance("	15062091	").addSizeDimension(EF_CASES_INDEX,	9	).setLocation(Location.newInstance(	55.380707	,	25.096792	)).setServiceTime(	1086	).build());
+        jobs.add(	Service.Builder.newInstance("	15062118	").addSizeDimension(EF_CASES_INDEX,	4	).setLocation(Location.newInstance(	55.117074	,	25.132969	)).setServiceTime(	3209	).build());
+        jobs.add(	Service.Builder.newInstance("	15062121	").addSizeDimension(EF_CASES_INDEX,	41	).setLocation(Location.newInstance(	55.117074	,	25.132969	)).setServiceTime(	3209	).build());
+        jobs.add(	Service.Builder.newInstance("	15062164	").addSizeDimension(EF_CASES_INDEX,	1	).setLocation(Location.newInstance(	55.157930	,	25.070420	)).setServiceTime(	897	).build());
+        jobs.add(	Service.Builder.newInstance("	15062191	").addSizeDimension(EF_CASES_INDEX,	2	).setLocation(Location.newInstance(	55.157930	,	25.070420	)).setServiceTime(	897	).build());
+        jobs.add(	Service.Builder.newInstance("	15062220	").addSizeDimension(EF_CASES_INDEX,	2	).setLocation(Location.newInstance(	55.157930	,	25.070420	)).setServiceTime(	897	).build());
+        jobs.add(	Service.Builder.newInstance("	15062224	").addSizeDimension(EF_CASES_INDEX,	5	).setLocation(Location.newInstance(	55.151155	,	25.077244	)).setServiceTime(	810	).build());
+        jobs.add(	Service.Builder.newInstance("	15062246	").addSizeDimension(EF_CASES_INDEX,	1	).setLocation(Location.newInstance(	55.120014	,	25.043809	)).setServiceTime(	642	).build());
+        jobs.add(	Service.Builder.newInstance("	15062296	").addSizeDimension(EF_CASES_INDEX,	30	).setLocation(Location.newInstance(	55.252711	,	25.216521	)).setServiceTime(	1860	).build());
+        jobs.add(	Service.Builder.newInstance("	15062304	").addSizeDimension(EF_CASES_INDEX,	3	).setLocation(Location.newInstance(	55.120014	,	25.043809	)).setServiceTime(	780	).build());
+        jobs.add(	Service.Builder.newInstance("	15062510	").addSizeDimension(EF_CASES_INDEX,	1	).setLocation(Location.newInstance(	55.157930	,	25.070420	)).setServiceTime(	897	).build());
+        jobs.add(	Service.Builder.newInstance("	15062533	").addSizeDimension(EF_CASES_INDEX,	1	).setLocation(Location.newInstance(	55.190307	,	25.144974	)).setServiceTime(	648	).build());
+        jobs.add(	Service.Builder.newInstance("	15062537	").addSizeDimension(EF_CASES_INDEX,	2	).setLocation(Location.newInstance(	55.154450	,	25.099378	)).setServiceTime(	816	).build());
+        jobs.add(	Service.Builder.newInstance("	15062538	").addSizeDimension(EF_CASES_INDEX,	2	).setLocation(Location.newInstance(	55.154450	,	25.099378	)).setServiceTime(	816	).build());
+        jobs.add(	Service.Builder.newInstance("	15062668	").addSizeDimension(EF_CASES_INDEX,	8	).setLocation(Location.newInstance(	55.141898	,	25.070828	)).setServiceTime(	1032	).build());
+        jobs.add(	Service.Builder.newInstance("	15062720	").addSizeDimension(EF_CASES_INDEX,	2	).setLocation(Location.newInstance(	55.140669	,	25.119176	)).setServiceTime(	762	).build());
+        jobs.add(	Service.Builder.newInstance("	15062742	").addSizeDimension(EF_CASES_INDEX,	4	).setLocation(Location.newInstance(	55.131712	,	25.049311	)).setServiceTime(	816	).build());
+        jobs.add(	Service.Builder.newInstance("	15062743	").addSizeDimension(EF_CASES_INDEX,	16	).setLocation(Location.newInstance(	55.140519	,	25.076465	)).setServiceTime(	1272	).build());
+        jobs.add(	Service.Builder.newInstance("	15062796	").addSizeDimension(EF_CASES_INDEX,	1	).setLocation(Location.newInstance(	55.148058	,	25.091299	)).setServiceTime(	636	).build());
+        jobs.add(	Service.Builder.newInstance("	15062136	").addSizeDimension(EF_CASES_INDEX,	6	).setLocation(Location.newInstance(	55.282259	,	25.213250	)).setServiceTime(	893	).build());
+        jobs.add(	Service.Builder.newInstance("	15062144	").addSizeDimension(EF_CASES_INDEX,	45	).setLocation(Location.newInstance(	55.277738	,	25.212426	)).setServiceTime(	3030	).build());
+        jobs.add(	Service.Builder.newInstance("	15062148	").addSizeDimension(EF_CASES_INDEX,	2	).setLocation(Location.newInstance(	55.276625	,	25.215192	)).setServiceTime(	696	).build());
+        jobs.add(	Service.Builder.newInstance("	15062242	").addSizeDimension(EF_CASES_INDEX,	10	).setLocation(Location.newInstance(	55.279371	,	25.212610	)).setServiceTime(	1020	).build());
+        jobs.add(	Service.Builder.newInstance("	15062283	").addSizeDimension(EF_CASES_INDEX,	8	).setLocation(Location.newInstance(	55.278029	,	25.214008	)).setServiceTime(	936	).build());
+        jobs.add(	Service.Builder.newInstance("	15062308	").addSizeDimension(EF_CASES_INDEX,	0	).setLocation(Location.newInstance(	55.287422	,	25.220785	)).setServiceTime(	1092	).build());
+        jobs.add(	Service.Builder.newInstance("	15062337	").addSizeDimension(EF_CASES_INDEX,	10	).setLocation(Location.newInstance(	55.287422	,	25.220785	)).setServiceTime(	1092	).build());
+        jobs.add(	Service.Builder.newInstance("	15062348	").addSizeDimension(EF_CASES_INDEX,	1	).setLocation(Location.newInstance(	55.283350	,	25.217812	)).setServiceTime(	661	).build());
+        jobs.add(	Service.Builder.newInstance("	15062359	").addSizeDimension(EF_CASES_INDEX,	1	).setLocation(Location.newInstance(	55.279870	,	25.220326	)).setServiceTime(	654	).build());
+        
+        
+        
+        VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
+        vrpBuilder.setFleetSize(FleetSize.INFINITE);
+        vrpBuilder.addVehicle(vehicle).addVehicle(vehicle2);
+                  
+        vrpBuilder.addAllJobs(jobs);
+        
+    
+        
+        
+        
+        //vrpBuilder.addJob(service1).addJob(service2).addJob(service3).addJob(service4).addJob(service5).addJob(service6).addJob(service7).addJob(service8);
+        
+        //builds a matrix based on euclidean distances; t_ij = euclidean(i,j) / 2; d_ij = euclidean(i,j);
+        VehicleRoutingTransportCostsMatrix costMatrix = createMatrix(vrpBuilder,true,true);
+        vrpBuilder.setRoutingCost(costMatrix);
+       
+        final VehicleRoutingProblem problem = vrpBuilder.build();
+
+	
+       
+        
+        //Use Algo algorithmConfig_greedyWithRegret
+        VehicleRoutingProblem vrp = vrpBuilder.build(); 
+        VehicleRoutingAlgorithm algo1 = VehicleRoutingAlgorithms.readAndCreateAlgorithm(vrp, "D:\\JSprit/JSprit1.1/jsprit-master/jsprit-master/jsprit-examples/input/algorithmConfig_greedyWithRegret.xml");
+       // VehicleRoutingAlgorithm algo1 = VehicleRoutingAlgorithms.readAndCreateAlgorithm(vrp, "D:\\JSprit/JSprit1.1/jsprit-master/jsprit-master/jsprit-examples/input/algorithmConfigWithSchrimpfAcceptance.xml");
+        //algo1.setMaxIterations(100);
+        try { 
+            Collection<VehicleRoutingProblemSolution> solutionsNew = algo1.searchSolutions();
+            
+           
+            VehicleRoutingProblemSolution bestSolution1 = Solutions.bestOf(solutionsNew);
+            
+            UnassignedJobReasonTracker reasonTracker = new UnassignedJobReasonTracker();
+            algo1.addListener(reasonTracker);
+            
+            
+      /*      SolutionAnalyser solAnylser = new SolutionAnalyser(problem,bestSolution1,new TransportDistance()
+    	{
+    	@Override
+    	public double getDistance(Location from, Location to, double departureTime, Vehicle vehicle)
+    	{
+    	return problem.getTransportCosts().getTransportCost(from, to, 0., null, null);
+    	}
+    	});
+            //Get distance per route
+           System.out.print("Distance per route:");
+            for (VehicleRoute route : bestSolution1.getRoutes()) {
+            	System.out.print(solAnylser.getDistance(route) + " , ");
+            }
+    //Get distance for entire solution:
+            System.out.print("Total Distance: " + solAnylser.getDistance());*/
+          
+            new VrpXMLWriter(problem, solutionsNew).write("D:\\output/problem-with-solution.xml");
+
+            SolutionPrinter.print(problem, bestSolution1, SolutionPrinter.Print.VERBOSE);
+
+    	
+            new Plotter(problem,bestSolution1).plot("D:\\output/plot.png","simple example");
+
+            new GraphStreamViewer(problem, bestSolution1).labelWith(Label.ID).setRenderDelay(0).display();
+            reasonTracker.getMostLikelyReason(" 	service	23701	").toString();
+           
+        } catch (Exception e) { 
+           // Assert.assertTrue(false); 
+        	System.out.println("Algorithm Error"+e);
+        }        
+        
+           	       
+        
+      
+    }
+
+    
+    
+    private static double ConvertTimeToSeconds(String stringDate)
+    {
+    	DateFormat df = new SimpleDateFormat("HH:mm");
+    	df.setTimeZone(TimeZone.getTimeZone("GST"));
+    	Date date = null;
+	try {
+	date = df.parse(stringDate);
+	
+	} catch (ParseException e) {
+	
+	e.printStackTrace();
+	}
+	
+    	return date.getTime()/1000L;
+    }
+    
+    
+    //Function to create straight line distance and create cost matrix, note: Transport time calculation below needs to be changed.
+    private static VehicleRoutingTransportCostsMatrix createMatrix(VehicleRoutingProblem.Builder vrpBuilder , boolean useTravelModel , boolean useTravelTimeModel) 
+    {
+    	double speed, fixedTime = 180 , distance = 0.0; // Fixed time 3 minutes for travel time. 
+    	
+        VehicleRoutingTransportCostsMatrix.Builder costMatrixBuilder = VehicleRoutingTransportCostsMatrix.Builder.newInstance(true);
+        for (String from : vrpBuilder.getLocationMap().keySet()) {
+            for (String to : vrpBuilder.getLocationMap().keySet()) {
+                Coordinate fromCoord = vrpBuilder.getLocationMap().get(from);
+                Coordinate toCoord = vrpBuilder.getLocationMap().get(to);
+                distance =   (EuclideanDistanceCalculator.haversineDistance(fromCoord, toCoord));
+                
+                //Add travel model calculations, distance values and factors should be configurable.
+                if (useTravelModel == true)
+                {
+	               if (distance < 10)
+	               	distance *= 1.37;
+	               else if (distance <50)
+	               	distance *= 1.26;
+	               else if (distance < 100)
+	               	distance *= 1.15;
+	               else distance *= 1.04;
+	           }
+                
+                //Add travel time model calculations, distance values and speeds should be configurable.
+                if (useTravelTimeModel == true)
+                {
+                	if (distance < 2)
+	               	speed = 33.7962;  //KM per H
+	               else if (distance <5)
+	               	speed = 48.2803;
+	               else if (distance < 10)
+	               	speed = 59.5457;
+	               else if (distance < 20)
+	               	speed = 69.2018;
+	               else if (distance < 40)
+                	speed = 77.2485;
+	               else speed = 83.6859;
+                }
+                else speed = 33;    //default speed value as per smallest segment in Travel time model.
+                
+                
+                costMatrixBuilder.addTransportDistance(from, to, distance);
+                costMatrixBuilder.addTransportTime(from, to, ((distance / speed)*3600) + fixedTime);
+               
+            }
+        }
+        return costMatrixBuilder.build();
+    }
+    
+
+
+    
+}
+
