diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateLoads.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateLoads.java
index 13988e23c..0d9a7f778 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateLoads.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateLoads.java
@@ -22,9 +22,9 @@
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionStartsListener;
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.JobInsertedListener;
 import com.graphhopper.jsprit.core.problem.SizeDimension;
-import com.graphhopper.jsprit.core.problem.job.Delivery;
+import com.graphhopper.jsprit.core.problem.job.DeliveryJob;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Pickup;
+import com.graphhopper.jsprit.core.problem.job.PickupJob;
 import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.ActivityVisitor;
@@ -84,9 +84,9 @@ void insertionStarts(VehicleRoute route) {
         SizeDimension loadAtDepot = SizeDimension.Builder.newInstance().build();
         SizeDimension loadAtEnd = SizeDimension.Builder.newInstance().build();
         for (Job j : route.getTourActivities().getJobs()) {
-            if (j instanceof Delivery) {
+            if (j instanceof DeliveryJob) {
                 loadAtDepot = loadAtDepot.add(j.getSize());
-            } else if (j instanceof Pickup || j instanceof ServiceJob) {
+            } else if (j instanceof PickupJob || j instanceof ServiceJob) {
                 loadAtEnd = loadAtEnd.add(j.getSize());
             }
         }
@@ -103,14 +103,14 @@ public void informInsertionStarts(Collection<VehicleRoute> vehicleRoutes, Collec
 
     @Override
     public void informJobInserted(Job job2insert, VehicleRoute inRoute, double additionalCosts, double additionalTime) {
-        if (job2insert instanceof Delivery) {
+        if (job2insert instanceof DeliveryJob) {
             SizeDimension loadAtDepot = stateManager.getRouteState(inRoute, InternalStates.LOAD_AT_BEGINNING, SizeDimension.class);
             if (loadAtDepot == null) {
                 loadAtDepot = defaultValue;
             }
             stateManager.putTypedInternalRouteState(inRoute, InternalStates.LOAD_AT_BEGINNING,
                             loadAtDepot.add(job2insert.getSize()));
-        } else if (job2insert instanceof Pickup || job2insert instanceof ServiceJob) {
+        } else if (job2insert instanceof PickupJob || job2insert instanceof ServiceJob) {
             SizeDimension loadAtEnd = stateManager.getRouteState(inRoute, InternalStates.LOAD_AT_END, SizeDimension.class);
             if (loadAtEnd == null) {
                 loadAtEnd = defaultValue;
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractSingleActivityJob.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractSingleActivityJob.java
index 9dabb2ae7..a285bd016 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractSingleActivityJob.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractSingleActivityJob.java
@@ -61,7 +61,7 @@ public BuilderBase(String id) {
         /**
          * Protected method to set the type-name of the service.
          * <p>
-         * <p>Currently there are {@link AbstractSingleActivityJob}, {@link Pickup} and {@link Delivery}.
+         * <p>Currently there are {@link AbstractSingleActivityJob}, {@link PickupJob} and {@link DeliveryJob}.
          *
          * @param name the name of service
          * @return the builder
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Delivery.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Delivery.java
index 923a55398..53dd66297 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Delivery.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Delivery.java
@@ -17,57 +17,52 @@
  */
 package com.graphhopper.jsprit.core.problem.job;
 
-import com.graphhopper.jsprit.core.problem.SizeDimension;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivity;
 
 /**
  * Delivery extends Service and is intended to model a Service where smth is UNLOADED (i.e. delivered) from a transport unit.
  *
  * @author schroeder
  */
-public class Delivery extends AbstractSingleActivityJob<DeliveryActivity> {
+public class Delivery extends Service {
 
-    public static final class Builder
-    extends AbstractSingleActivityJob.BuilderBase<Delivery, Builder> {
-
-        public Builder(String id) {
-            super(id);
-            setType("delivery");
-        }
+    public static class Builder extends Service.Builder<Delivery> {
 
+        /**
+         * Returns a new instance of builder that builds a delivery.
+         *
+         * @param id the id of the delivery
+         * @return the builder
+         */
         public static Builder newInstance(String id) {
             return new Builder(id);
         }
 
+        Builder(String id) {
+            super(id);
+        }
+
+        /**
+         * Builds Delivery.
+         *
+         * @return delivery
+         * @throws IllegalArgumentException if neither locationId nor coord is set
+         */
         @Override
-        protected Delivery createInstance() {
+        @SuppressWarnings("deprecation")
+        public Delivery build() {
+            if (location == null) throw new IllegalArgumentException("location is missing");
+            this.setType("delivery");
+            super.capacity = super.capacityBuilder.build();
+            super.skills = super.skillBuilder.build();
             return new Delivery(this);
         }
-    }
 
-    Delivery(BuilderBase<? extends Delivery, ?> builder) {
-        super(builder);
-    }
-
-
-    @Override
-    protected DeliveryActivity createActivity(
-                    BuilderBase<? extends AbstractSingleActivityJob<?>, ?> builder) {
-            return new DeliveryActivity(this, builder.type, builder.location,
-                            builder.serviceTime,
-                            builder.getCapacity().invert(), builder.timeWindows.getTimeWindows());
     }
 
-    @Override
-    @Deprecated
-    public SizeDimension getSize() {
-        return super.getSize().abs();
-    }
+    @SuppressWarnings("deprecation")
+    Delivery(Builder builder) {
+        super(builder);
 
-    @SuppressWarnings("unchecked")
-    @Override
-    public Builder getBuilder(String id) {
-        return Builder.newInstance(id);
     }
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/DeliveryJob.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/DeliveryJob.java
new file mode 100644
index 000000000..c1935bb53
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/DeliveryJob.java
@@ -0,0 +1,73 @@
+/*
+ * Licensed to GraphHopper GmbH under one or more contributor
+ * license agreements. See the NOTICE file distributed with this work for
+ * additional information regarding copyright ownership.
+ *
+ * GraphHopper GmbH licenses this file to you under the Apache License,
+ * Version 2.0 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.graphhopper.jsprit.core.problem.job;
+
+import com.graphhopper.jsprit.core.problem.SizeDimension;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivity;
+
+/**
+ * Delivery extends Service and is intended to model a Service where smth is UNLOADED (i.e. delivered) from a transport unit.
+ *
+ * @author schroeder
+ */
+public class DeliveryJob extends AbstractSingleActivityJob<DeliveryActivity> {
+
+    public static final class Builder
+    extends AbstractSingleActivityJob.BuilderBase<DeliveryJob, Builder> {
+
+        public Builder(String id) {
+            super(id);
+            setType("delivery");
+        }
+
+        public static Builder newInstance(String id) {
+            return new Builder(id);
+        }
+
+        @Override
+        protected DeliveryJob createInstance() {
+            return new DeliveryJob(this);
+        }
+    }
+
+    DeliveryJob(BuilderBase<? extends DeliveryJob, ?> builder) {
+        super(builder);
+    }
+
+
+    @Override
+    protected DeliveryActivity createActivity(
+                    BuilderBase<? extends AbstractSingleActivityJob<?>, ?> builder) {
+            return new DeliveryActivity(this, builder.type, builder.location,
+                            builder.serviceTime,
+                            builder.getCapacity().invert(), builder.timeWindows.getTimeWindows());
+    }
+
+    @Override
+    @Deprecated
+    public SizeDimension getSize() {
+        return super.getSize().abs();
+    }
+
+    @SuppressWarnings("unchecked")
+    @Override
+    public Builder getBuilder(String id) {
+        return Builder.newInstance(id);
+    }
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Pickup.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Pickup.java
index 7f94d4407..bd470b807 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Pickup.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Pickup.java
@@ -17,48 +17,53 @@
  */
 package com.graphhopper.jsprit.core.problem.job;
 
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivity;
 
 /**
  * Pickup extends Service and is intended to model a Service where smth is LOADED (i.e. picked up) to a transport unit.
  *
  * @author schroeder
  */
-public class Pickup extends AbstractSingleActivityJob<PickupActivity> {
+public class Pickup extends Service {
 
-    public static final class Builder
-    extends AbstractSingleActivityJob.BuilderBase<Pickup, Builder> {
-
-        public Builder(String id) {
-            super(id);
-            setType("pickup");
-        }
+    public static class Builder extends Service.Builder<Pickup> {
 
+        /**
+         * Returns a new instance of builder that builds a pickup.
+         *
+         * @param id the id of the pickup
+         * @return the builder
+         */
         public static Builder newInstance(String id) {
             return new Builder(id);
         }
 
+        Builder(String id) {
+            super(id);
+        }
+
+        /**
+         * Builds Pickup.
+         * <p>
+         * <p>Pickup type is "pickup"
+         *
+         * @return pickup
+         * @throws IllegalArgumentException if neither locationId nor coordinate has been set
+         */
         @Override
-        protected Pickup createInstance() {
+        @SuppressWarnings("deprecation")
+        public Pickup build() {
+            if (location == null) throw new IllegalArgumentException("location is missing");
+            this.setType("pickup");
+            super.capacity = super.capacityBuilder.build();
+            super.skills = super.skillBuilder.build();
             return new Pickup(this);
         }
+
     }
 
+    @SuppressWarnings("deprecation")
     Pickup(Builder builder) {
         super(builder);
     }
 
-    @Override
-    protected PickupActivity createActivity(
-                    AbstractSingleActivityJob.BuilderBase<? extends AbstractSingleActivityJob<?>, ?> builder) {
-            return new PickupActivity(this, builder.type, builder.location, builder.serviceTime,
-                            builder.getCapacity(), builder.timeWindows.getTimeWindows());
-    }
-
-    @SuppressWarnings("unchecked")
-    @Override
-    public Builder getBuilder(String id) {
-        return Builder.newInstance(id);
-    }
-
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/PickupJob.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/PickupJob.java
new file mode 100644
index 000000000..23d809414
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/PickupJob.java
@@ -0,0 +1,64 @@
+/*
+ * Licensed to GraphHopper GmbH under one or more contributor
+ * license agreements. See the NOTICE file distributed with this work for
+ * additional information regarding copyright ownership.
+ *
+ * GraphHopper GmbH licenses this file to you under the Apache License,
+ * Version 2.0 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.graphhopper.jsprit.core.problem.job;
+
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivity;
+
+/**
+ * Pickup extends Service and is intended to model a Service where smth is LOADED (i.e. picked up) to a transport unit.
+ *
+ * @author schroeder
+ */
+public class PickupJob extends AbstractSingleActivityJob<PickupActivity> {
+
+    public static final class Builder
+    extends AbstractSingleActivityJob.BuilderBase<PickupJob, Builder> {
+
+        public Builder(String id) {
+            super(id);
+            setType("pickup");
+        }
+
+        public static Builder newInstance(String id) {
+            return new Builder(id);
+        }
+
+        @Override
+        protected PickupJob createInstance() {
+            return new PickupJob(this);
+        }
+    }
+
+    PickupJob(Builder builder) {
+        super(builder);
+    }
+
+    @Override
+    protected PickupActivity createActivity(
+                    AbstractSingleActivityJob.BuilderBase<? extends AbstractSingleActivityJob<?>, ?> builder) {
+            return new PickupActivity(this, builder.type, builder.location, builder.serviceTime,
+                            builder.getCapacity(), builder.timeWindows.getTimeWindows());
+    }
+
+    @SuppressWarnings("unchecked")
+    @Override
+    public Builder getBuilder(String id) {
+        return Builder.newInstance(id);
+    }
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRoute.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRoute.java
index 70151c967..4969a9ce2 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRoute.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRoute.java
@@ -30,8 +30,8 @@
 import com.graphhopper.jsprit.core.problem.driver.DriverImpl;
 import com.graphhopper.jsprit.core.problem.job.AbstractSingleActivityJob;
 import com.graphhopper.jsprit.core.problem.job.Break;
-import com.graphhopper.jsprit.core.problem.job.Delivery;
-import com.graphhopper.jsprit.core.problem.job.Pickup;
+import com.graphhopper.jsprit.core.problem.job.DeliveryJob;
+import com.graphhopper.jsprit.core.problem.job.PickupJob;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.End;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
@@ -279,21 +279,21 @@ public Builder addBreak(Break currentbreak, TimeWindow timeWindow) {
          *
          * <p>
          * <i><b>Note: Using this method is not recommended. Use the
-         * {@linkplain #addPickup(Pickup, TimeWindow)} instead.</b></i>
+         * {@linkplain #addPickup(PickupJob, TimeWindow)} instead.</b></i>
          * </p>
          *
          * @param pickup
          *            pickup to be added
          * @return the builder
          */
-        public Builder addPickup(Pickup pickup) {
+        public Builder addPickup(PickupJob pickup) {
             if (pickup == null) {
                 throw new IllegalArgumentException("pickup must not be null");
             }
             return addService(pickup);
         }
 
-        public Builder addPickup(Pickup pickup, TimeWindow timeWindow) {
+        public Builder addPickup(PickupJob pickup, TimeWindow timeWindow) {
             if (pickup == null) {
                 throw new IllegalArgumentException("pickup must not be null");
             }
@@ -305,7 +305,7 @@ public Builder addPickup(Pickup pickup, TimeWindow timeWindow) {
          *
          * <p>
          * <i><b>Note: Using this method is not recommended. Use the
-         * {@linkplain #addDelivery(Delivery, TimeWindow)} instead.</b></i>
+         * {@linkplain #addDelivery(DeliveryJob, TimeWindow)} instead.</b></i>
          * </p>
          *
          *
@@ -313,14 +313,14 @@ public Builder addPickup(Pickup pickup, TimeWindow timeWindow) {
          *            delivery to be added
          * @return the builder
          */
-        public Builder addDelivery(Delivery delivery) {
+        public Builder addDelivery(DeliveryJob delivery) {
             if (delivery == null) {
                 throw new IllegalArgumentException("delivery must not be null");
             }
             return addService(delivery);
         }
 
-        public Builder addDelivery(Delivery delivery, TimeWindow timeWindow) {
+        public Builder addDelivery(DeliveryJob delivery, TimeWindow timeWindow) {
             if (delivery == null) {
                 throw new IllegalArgumentException("delivery must not be null");
             }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CapacityConstraint_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CapacityConstraint_IT.java
index d5bc99a2c..f3f53eb5c 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CapacityConstraint_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CapacityConstraint_IT.java
@@ -27,7 +27,7 @@
 import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.cost.TransportDistance;
-import com.graphhopper.jsprit.core.problem.job.Delivery;
+import com.graphhopper.jsprit.core.problem.job.DeliveryJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
@@ -69,13 +69,13 @@ public void capacityShouldNotBeExceeded() {
         VehicleImpl v4 = VehicleImpl.Builder.newInstance("v4").setStartLocation(Location.newInstance(0, 0)).setType(type4).setReturnToDepot(true).build();
         VehicleImpl v5 = VehicleImpl.Builder.newInstance("v5").setStartLocation(Location.newInstance(0, 0)).setType(type5).setReturnToDepot(true).build();
 
-        Delivery d1 = new Delivery.Builder("d1").setLocation(Location.newInstance(0, 10))
+        DeliveryJob d1 = new DeliveryJob.Builder("d1").setLocation(Location.newInstance(0, 10))
             .addSizeDimension(2, 1).build();
-        Delivery d2 = new Delivery.Builder("d2").setLocation(Location.newInstance(0, 12))
+        DeliveryJob d2 = new DeliveryJob.Builder("d2").setLocation(Location.newInstance(0, 12))
             .addSizeDimension(2, 1).addSizeDimension(3, 1).build();
-        Delivery d3 = new Delivery.Builder("d3").setLocation(Location.newInstance(0, 15))
+        DeliveryJob d3 = new DeliveryJob.Builder("d3").setLocation(Location.newInstance(0, 15))
             .addSizeDimension(0, 1).addSizeDimension(4, 1).build();
-        Delivery d4 = new Delivery.Builder("d4").setLocation(Location.newInstance(0, 20))
+        DeliveryJob d4 = new DeliveryJob.Builder("d4").setLocation(Location.newInstance(0, 20))
             .addSizeDimension(0, 1).addSizeDimension(5, 1).build();
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollection_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollection_IT.java
index 916de89b3..2cd118817 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollection_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/RefuseCollection_IT.java
@@ -33,8 +33,8 @@
 import com.graphhopper.jsprit.core.algorithm.termination.IterationWithoutImprovementTermination;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.job.Delivery;
-import com.graphhopper.jsprit.core.problem.job.Pickup;
+import com.graphhopper.jsprit.core.problem.job.DeliveryJob;
+import com.graphhopper.jsprit.core.problem.job.PickupJob;
 import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
@@ -255,7 +255,7 @@ private void readDemandQuantitiesAsPickups(VehicleRoutingProblem.Builder vrpBuil
             /*
              * build service
              */
-            Pickup service = new Pickup.Builder(lineTokens[0]).addSizeDimension(0, Integer.parseInt(lineTokens[1]))
+            PickupJob service = new PickupJob.Builder(lineTokens[0]).addSizeDimension(0, Integer.parseInt(lineTokens[1]))
                             .setLocation(Location.newInstance(lineTokens[0])).build();
             /*
              * and add it to problem
@@ -278,7 +278,7 @@ private void readDemandQuantitiesAsDeliveries(VehicleRoutingProblem.Builder vrpB
             /*
              * build service
              */
-            Delivery service = new Delivery.Builder(lineTokens[0]).addSizeDimension(0, Integer.parseInt(lineTokens[1]))
+            DeliveryJob service = new DeliveryJob.Builder(lineTokens[0]).addSizeDimension(0, Integer.parseInt(lineTokens[1]))
                             .setLocation(Location.newInstance(lineTokens[0])).build();
             /*
              * and add it to problem
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionAndLoadConstraintsTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionAndLoadConstraintsTest.java
index e671ff717..95ef0974a 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionAndLoadConstraintsTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionAndLoadConstraintsTest.java
@@ -36,8 +36,8 @@
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.driver.Driver;
 import com.graphhopper.jsprit.core.problem.driver.DriverImpl;
-import com.graphhopper.jsprit.core.problem.job.Delivery;
-import com.graphhopper.jsprit.core.problem.job.Pickup;
+import com.graphhopper.jsprit.core.problem.job.DeliveryJob;
+import com.graphhopper.jsprit.core.problem.job.PickupJob;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
@@ -110,8 +110,8 @@ private void createInsertionCalculator(HardRouteConstraint hardRouteLevelConstra
 
     @Test
     public void whenInsertingServiceWhileNoCapIsAvailable_itMustReturnTheCorrectInsertionIndex() {
-        Delivery delivery = new Delivery.Builder("del").addSizeDimension(0, 41).setLocation(Location.newInstance("10,10")).build();
-        Pickup pickup = new Pickup.Builder("pick").addSizeDimension(0, 15).setLocation(Location.newInstance("0,10")).build();
+        DeliveryJob delivery = new DeliveryJob.Builder("del").addSizeDimension(0, 41).setLocation(Location.newInstance("10,10")).build();
+        PickupJob pickup = new PickupJob.Builder("pick").addSizeDimension(0, 15).setLocation(Location.newInstance("0,10")).build();
 
         VehicleType type = VehicleTypeImpl.Builder.newInstance("t").addCapacityDimension(0, 50).setCostPerDistance(1).build();
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance("0,0")).setType(type).build();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionAndTimeWindowConstraintsTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionAndTimeWindowConstraintsTest.java
index 409a6b4b8..332e04f74 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionAndTimeWindowConstraintsTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionAndTimeWindowConstraintsTest.java
@@ -36,8 +36,8 @@
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.driver.Driver;
 import com.graphhopper.jsprit.core.problem.driver.DriverImpl;
-import com.graphhopper.jsprit.core.problem.job.Delivery;
-import com.graphhopper.jsprit.core.problem.job.Pickup;
+import com.graphhopper.jsprit.core.problem.job.DeliveryJob;
+import com.graphhopper.jsprit.core.problem.job.PickupJob;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
@@ -110,8 +110,8 @@ private void createInsertionCalculator(HardRouteConstraint hardRouteLevelConstra
 
     @Test
     public void whenInsertingServiceWithTW_itMustReturnTheCorrectInsertionIndex() {
-        Delivery delivery = new Delivery.Builder("del").addTimeWindow(30, 40).setLocation(Location.newInstance("10,10")).build();
-        Pickup pickup = new Pickup.Builder("pick").addTimeWindow(60, 80).setLocation(Location.newInstance("0,10")).build();
+        DeliveryJob delivery = new DeliveryJob.Builder("del").addTimeWindow(30, 40).setLocation(Location.newInstance("10,10")).build();
+        PickupJob pickup = new PickupJob.Builder("pick").addTimeWindow(60, 80).setLocation(Location.newInstance("0,10")).build();
 
         VehicleType type = VehicleTypeImpl.Builder.newInstance("t").setCostPerDistance(1).build();
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v").setLatestArrival(40).setStartLocation(Location.newInstance("0,0")).setType(type).build();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionWithServicesAndLoadConstraintsTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionWithServicesAndLoadConstraintsTest.java
index 082d1311a..2ade6bd60 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionWithServicesAndLoadConstraintsTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionWithServicesAndLoadConstraintsTest.java
@@ -36,8 +36,8 @@
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.driver.Driver;
 import com.graphhopper.jsprit.core.problem.driver.DriverImpl;
-import com.graphhopper.jsprit.core.problem.job.Delivery;
-import com.graphhopper.jsprit.core.problem.job.Pickup;
+import com.graphhopper.jsprit.core.problem.job.DeliveryJob;
+import com.graphhopper.jsprit.core.problem.job.PickupJob;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
@@ -102,8 +102,8 @@ public void doBefore() {
 
     @Test
     public void whenInsertingServiceWhileNoCapIsAvailable_itMustReturnTheCorrectInsertionIndex() {
-        Delivery delivery = new Delivery.Builder("del").addSizeDimension(0, 41).setLocation(Location.newInstance("10,10")).build();
-        Pickup pickup = new Pickup.Builder("pick").addSizeDimension(0, 15).setLocation(Location.newInstance("0,10")).build();
+        DeliveryJob delivery = new DeliveryJob.Builder("del").addSizeDimension(0, 41).setLocation(Location.newInstance("10,10")).build();
+        PickupJob pickup = new PickupJob.Builder("pick").addSizeDimension(0, 15).setLocation(Location.newInstance("0,10")).build();
 
         VehicleType type = VehicleTypeImpl.Builder.newInstance("t").addCapacityDimension(0, 50).setCostPerDistance(1).build();
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance("0,0")).setType(type).build();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionWithShipmentsTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionWithShipmentsTest.java
index 0d2ccdced..e71fc2254 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionWithShipmentsTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionWithShipmentsTest.java
@@ -38,7 +38,7 @@
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.driver.Driver;
 import com.graphhopper.jsprit.core.problem.driver.DriverImpl;
-import com.graphhopper.jsprit.core.problem.job.Pickup;
+import com.graphhopper.jsprit.core.problem.job.PickupJob;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
@@ -251,7 +251,7 @@ public void whenInsertingServiceWhileNoCapIsAvailable_itMustReturnNoInsertionDat
         stateManager.informInsertionStarts(Arrays.asList(route), null);
 
         //		Service service = new Service.Builder("pick", 1).setLocationId("5,5").build();
-        Pickup service = new Pickup.Builder("pick").addSizeDimension(0, 1).setLocation(Location.newInstance("5,5")).build();
+        PickupJob service = new PickupJob.Builder("pick").addSizeDimension(0, 1).setLocation(Location.newInstance("5,5")).build();
 
         InsertionData iData = insertionCalculator.getInsertionData(route, service, vehicle, 0, DriverImpl.noDriver(), Double.MAX_VALUE);
         //		routeActVisitor.visit(route);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestMixedServiceAndShipmentsProblemOnRouteLevel.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestMixedServiceAndShipmentsProblemOnRouteLevel.java
index 7cad5e030..62f0bf339 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestMixedServiceAndShipmentsProblemOnRouteLevel.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestMixedServiceAndShipmentsProblemOnRouteLevel.java
@@ -25,7 +25,7 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
-import com.graphhopper.jsprit.core.problem.job.Delivery;
+import com.graphhopper.jsprit.core.problem.job.DeliveryJob;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.vehicle.InfiniteFleetManagerFactory;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleFleetManager;
@@ -76,10 +76,10 @@ public void whenHavingShipmentsAndServicesInOneProblem_andInsertionShouldBeMadeO
 		 * 3: (16,8)
 		 * 4: (16,12)
 		 */
-        Delivery delivery1 = (Delivery) new Delivery.Builder("5").addSizeDimension(0, 1).setLocation(TestUtils.loc(Coordinate.newInstance(4, 8))).build();
-        Delivery delivery2 = (Delivery) new Delivery.Builder("6").addSizeDimension(0, 1).setLocation(TestUtils.loc(Coordinate.newInstance(4, 12))).build();
-        Delivery delivery3 = (Delivery) new Delivery.Builder("7").addSizeDimension(0, 1).setLocation(TestUtils.loc(Coordinate.newInstance(16, 8))).build();
-        Delivery delivery4 = (Delivery) new Delivery.Builder("8").addSizeDimension(0, 1).setLocation(TestUtils.loc(Coordinate.newInstance(16, 12))).build();
+        DeliveryJob delivery1 = (DeliveryJob) new DeliveryJob.Builder("5").addSizeDimension(0, 1).setLocation(TestUtils.loc(Coordinate.newInstance(4, 8))).build();
+        DeliveryJob delivery2 = (DeliveryJob) new DeliveryJob.Builder("6").addSizeDimension(0, 1).setLocation(TestUtils.loc(Coordinate.newInstance(4, 12))).build();
+        DeliveryJob delivery3 = (DeliveryJob) new DeliveryJob.Builder("7").addSizeDimension(0, 1).setLocation(TestUtils.loc(Coordinate.newInstance(16, 8))).build();
+        DeliveryJob delivery4 = (DeliveryJob) new DeliveryJob.Builder("8").addSizeDimension(0, 1).setLocation(TestUtils.loc(Coordinate.newInstance(16, 12))).build();
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addVehicle(vehicle);
@@ -127,10 +127,10 @@ public void whenHavingOnlyServicesInOneProblem_andInsertionShouldBeMadeOnRouteLe
 		 * 3: (16,8)
 		 * 4: (16,12)
 		 */
-        Delivery delivery1 = (Delivery) new Delivery.Builder("5").addSizeDimension(0, 1).setLocation(Location.newInstance(4, 8)).build();
-        Delivery delivery2 = (Delivery) new Delivery.Builder("6").addSizeDimension(0, 1).setLocation(Location.newInstance(4, 12)).build();
-        Delivery delivery3 = (Delivery) new Delivery.Builder("7").addSizeDimension(0, 1).setLocation(Location.newInstance(16, 8)).build();
-        Delivery delivery4 = (Delivery) new Delivery.Builder("8").addSizeDimension(0, 1).setLocation(Location.newInstance(16, 12)).build();
+        DeliveryJob delivery1 = (DeliveryJob) new DeliveryJob.Builder("5").addSizeDimension(0, 1).setLocation(Location.newInstance(4, 8)).build();
+        DeliveryJob delivery2 = (DeliveryJob) new DeliveryJob.Builder("6").addSizeDimension(0, 1).setLocation(Location.newInstance(4, 12)).build();
+        DeliveryJob delivery3 = (DeliveryJob) new DeliveryJob.Builder("7").addSizeDimension(0, 1).setLocation(Location.newInstance(16, 8)).build();
+        DeliveryJob delivery4 = (DeliveryJob) new DeliveryJob.Builder("8").addSizeDimension(0, 1).setLocation(Location.newInstance(16, 12)).build();
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addVehicle(vehicle)
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/LoadStateTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/LoadStateTest.java
index 3a56a8e9d..22ee72de8 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/LoadStateTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/LoadStateTest.java
@@ -32,9 +32,9 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.job.Delivery;
+import com.graphhopper.jsprit.core.problem.job.DeliveryJob;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Pickup;
+import com.graphhopper.jsprit.core.problem.job.PickupJob;
 import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
@@ -68,8 +68,8 @@ public void doBefore() {
         final VehicleRoutingProblem serviceProblem = serviceProblemBuilder.build();
 
         final VehicleRoutingProblem.Builder pdProblemBuilder = VehicleRoutingProblem.Builder.newInstance();
-        Pickup pickup = new Pickup.Builder("pick").addSizeDimension(0, 10).setLocation(Location.newInstance("loc")).build();
-        Delivery delivery = new Delivery.Builder("del").addSizeDimension(0, 5).setLocation(Location.newInstance("loc")).build();
+        PickupJob pickup = new PickupJob.Builder("pick").addSizeDimension(0, 10).setLocation(Location.newInstance("loc")).build();
+        DeliveryJob delivery = new DeliveryJob.Builder("del").addSizeDimension(0, 5).setLocation(Location.newInstance("loc")).build();
         pdProblemBuilder.addJob(pickup).addJob(delivery);
         final VehicleRoutingProblem pdProblem = pdProblemBuilder.build();
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdatePracticalTimeWindowTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdatePracticalTimeWindowTest.java
index 896276523..9de215a7d 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdatePracticalTimeWindowTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdatePracticalTimeWindowTest.java
@@ -31,8 +31,8 @@
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.cost.WaitingTimeCosts;
 import com.graphhopper.jsprit.core.problem.driver.Driver;
-import com.graphhopper.jsprit.core.problem.job.Delivery;
-import com.graphhopper.jsprit.core.problem.job.Pickup;
+import com.graphhopper.jsprit.core.problem.job.DeliveryJob;
+import com.graphhopper.jsprit.core.problem.job.PickupJob;
 import com.graphhopper.jsprit.core.problem.solution.route.ReverseRouteActivityVisitor;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
@@ -66,9 +66,9 @@ public void doBefore() {
         reverseActivityVisitor = new ReverseRouteActivityVisitor();
         reverseActivityVisitor.addActivityVisitor(new UpdatePracticalTimeWindows(stateManager, routingCosts, activityCosts));
 
-        Pickup pickup = new Pickup.Builder("pick").setLocation(Location.newInstance("0,20")).setTimeWindow(TimeWindow.newInstance(0, 30)).build();
-        Delivery delivery = new Delivery.Builder("del").setLocation(Location.newInstance("20,20")).setTimeWindow(TimeWindow.newInstance(10, 40)).build();
-        Pickup pickup2 = new Pickup.Builder("pick2").setLocation(Location.newInstance("20,0")).setTimeWindow(TimeWindow.newInstance(20, 50)).build();
+        PickupJob pickup = new PickupJob.Builder("pick").setLocation(Location.newInstance("0,20")).setTimeWindow(TimeWindow.newInstance(0, 30)).build();
+        DeliveryJob delivery = new DeliveryJob.Builder("del").setLocation(Location.newInstance("20,20")).setTimeWindow(TimeWindow.newInstance(10, 40)).build();
+        PickupJob pickup2 = new PickupJob.Builder("pick2").setLocation(Location.newInstance("20,0")).setTimeWindow(TimeWindow.newInstance(20, 50)).build();
 
         VehicleType vt = mock(VehicleType.class);
         when(vt.getAvgVelocity()).thenReturn(1d);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyserTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyserTest.java
index 2b39825e5..2ee44b325 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyserTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyserTest.java
@@ -35,8 +35,8 @@
 import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.cost.TransportDistance;
-import com.graphhopper.jsprit.core.problem.job.Delivery;
-import com.graphhopper.jsprit.core.problem.job.Pickup;
+import com.graphhopper.jsprit.core.problem.job.DeliveryJob;
+import com.graphhopper.jsprit.core.problem.job.PickupJob;
 import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
@@ -126,12 +126,12 @@ public void buildAnotherScenarioWithOnlyOneVehicleAndWithoutAnyConstraintsBefore
                         .setLatestArrival(150.)
                         .build();
 
-        Pickup s1 = new Pickup.Builder("s1")
+        PickupJob s1 = new PickupJob.Builder("s1")
                         .setTimeWindow(TimeWindow.newInstance(10, 20))
                         .setLocation(Location.newInstance(-10, 1))
                         .addSizeDimension(0, 10)
                         .build();
-        Delivery s2 = new Delivery.Builder("s2")
+        DeliveryJob s2 = new DeliveryJob.Builder("s2")
                         .setLocation(Location.newInstance(-10, 10))
                         .setTimeWindow(TimeWindow.newInstance(10, 20))
                         .addSizeDimension(0, 20)
@@ -143,12 +143,12 @@ public void buildAnotherScenarioWithOnlyOneVehicleAndWithoutAnyConstraintsBefore
                         .setPickupTimeWindow(TimeWindow.newInstance(10, 20)).setDeliveryTimeWindow(TimeWindow.newInstance(10, 20))
                         .build();
 
-        Pickup s3 = new Pickup.Builder("s3")
+        PickupJob s3 = new PickupJob.Builder("s3")
                         .setTimeWindow(TimeWindow.newInstance(10, 20))
                         .setLocation(TestUtils.loc(Coordinate.newInstance(10, 1)))
                         .addSizeDimension(0, 10)
                         .build();
-        Delivery s4 = new Delivery.Builder("s4").setLocation(Location.newInstance(10, 10))
+        DeliveryJob s4 = new DeliveryJob.Builder("s4").setLocation(Location.newInstance(10, 10))
                         .addSizeDimension(0, 20)
                         .setTimeWindow(TimeWindow.newInstance(10, 20))
                         .build();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblemTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblemTest.java
index efa44d867..c6ed1bb5e 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblemTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblemTest.java
@@ -36,8 +36,8 @@
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingActivityCosts;
 import com.graphhopper.jsprit.core.problem.driver.Driver;
 import com.graphhopper.jsprit.core.problem.driver.DriverImpl;
-import com.graphhopper.jsprit.core.problem.job.Delivery;
-import com.graphhopper.jsprit.core.problem.job.Pickup;
+import com.graphhopper.jsprit.core.problem.job.DeliveryJob;
+import com.graphhopper.jsprit.core.problem.job.PickupJob;
 import com.graphhopper.jsprit.core.problem.job.SequentialJobActivityList;
 import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
@@ -158,10 +158,10 @@ public void whenServicesAreAdded_vrpShouldContainThem() {
 
     @Test
     public void whenPickupsAreAdded_vrpShouldContainThem() {
-        Pickup s1 = mock(Pickup.class);
+        PickupJob s1 = mock(PickupJob.class);
         when(s1.getId()).thenReturn("s1");
         when(s1.getActivityList()).thenReturn(new SequentialJobActivityList(s1));
-        Pickup s2 = mock(Pickup.class);
+        PickupJob s2 = mock(PickupJob.class);
         when(s2.getId()).thenReturn("s2");
         when(s2.getActivityList()).thenReturn(new SequentialJobActivityList(s2));
 
@@ -177,10 +177,10 @@ public void whenPickupsAreAdded_vrpShouldContainThem() {
 
     @Test
     public void whenPickupsAreAddedAllAtOnce_vrpShouldContainThem() {
-        Pickup s1 = mock(Pickup.class);
+        PickupJob s1 = mock(PickupJob.class);
         when(s1.getId()).thenReturn("s1");
         when(s1.getActivityList()).thenReturn(new SequentialJobActivityList(s1));
-        Pickup s2 = mock(Pickup.class);
+        PickupJob s2 = mock(PickupJob.class);
         when(s2.getId()).thenReturn("s2");
         when(s2.getActivityList()).thenReturn(new SequentialJobActivityList(s2));
 
@@ -196,10 +196,10 @@ public void whenPickupsAreAddedAllAtOnce_vrpShouldContainThem() {
 
     @Test
     public void whenDelivieriesAreAdded_vrpShouldContainThem() {
-        Delivery s1 = mock(Delivery.class);
+        DeliveryJob s1 = mock(DeliveryJob.class);
         when(s1.getId()).thenReturn("s1");
         when(s1.getActivityList()).thenReturn(new SequentialJobActivityList(s1));
-        Delivery s2 = mock(Delivery.class);
+        DeliveryJob s2 = mock(DeliveryJob.class);
         when(s2.getId()).thenReturn("s2");
         when(s2.getActivityList()).thenReturn(new SequentialJobActivityList(s2));
 
@@ -215,10 +215,10 @@ public void whenDelivieriesAreAdded_vrpShouldContainThem() {
 
     @Test
     public void whenDelivieriesAreAddedAllAtOnce_vrpShouldContainThem() {
-        Delivery s1 = mock(Delivery.class);
+        DeliveryJob s1 = mock(DeliveryJob.class);
         when(s1.getId()).thenReturn("s1");
         when(s1.getActivityList()).thenReturn(new SequentialJobActivityList(s1));
-        Delivery s2 = mock(Delivery.class);
+        DeliveryJob s2 = mock(DeliveryJob.class);
         when(s2.getId()).thenReturn("s2");
         when(s2.getActivityList()).thenReturn(new SequentialJobActivityList(s2));
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/LoadConstraintTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/LoadConstraintTest.java
index 7013c0bca..bf989f3dc 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/LoadConstraintTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/LoadConstraintTest.java
@@ -36,10 +36,10 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.job.Delivery;
+import com.graphhopper.jsprit.core.problem.job.DeliveryJob;
 import com.graphhopper.jsprit.core.problem.job.CustomJob;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Pickup;
+import com.graphhopper.jsprit.core.problem.job.PickupJob;
 import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
@@ -80,8 +80,8 @@ public void doBefore() {
         final VehicleRoutingProblem serviceProblem = serviceProblemBuilder.build();
 
         final VehicleRoutingProblem.Builder pdProblemBuilder = VehicleRoutingProblem.Builder.newInstance();
-        Pickup pickup = new Pickup.Builder("pick").addSizeDimension(0, 10).setLocation(Location.newInstance("loc")).build();
-        Delivery delivery = new Delivery.Builder("del").addSizeDimension(0, 5).setLocation(Location.newInstance("loc")).build();
+        PickupJob pickup = new PickupJob.Builder("pick").addSizeDimension(0, 10).setLocation(Location.newInstance("loc")).build();
+        DeliveryJob delivery = new DeliveryJob.Builder("del").addSizeDimension(0, 5).setLocation(Location.newInstance("loc")).build();
         pdProblemBuilder.addJob(pickup).addJob(delivery);
         final VehicleRoutingProblem pdProblem = pdProblemBuilder.build();
 
@@ -264,7 +264,7 @@ public void whenServiceRouteAndNewServiceDoesNotFitIn_itShouldReturnFulfilled()
     @Test
     public void whenPDRouteRouteAndNewPickupFitsIn_itShouldReturnFulfilled() {
         stateManager.informInsertionStarts(Arrays.asList(pickupDeliveryRoute), Collections.<Job>emptyList());
-        Pickup s = Pickup.Builder.newInstance("pick").addSizeDimension(0, 10).setLocation(Location.newInstance(0)).build();
+        PickupJob s = PickupJob.Builder.newInstance("pick").addSizeDimension(0, 10).setLocation(Location.newInstance(0)).build();
         ServiceLoadRouteLevelConstraint loadConstraint = new ServiceLoadRouteLevelConstraint(stateManager);
         JobInsertionContext context = new JobInsertionContext(pickupDeliveryRoute, s, serviceRoute.getVehicle(), null, 0.);
         assertTrue(loadConstraint.fulfilled(context));
@@ -273,7 +273,7 @@ public void whenPDRouteRouteAndNewPickupFitsIn_itShouldReturnFulfilled() {
     @Test
     public void whenPDRouteRouteAndNewDeliveryFitsIn_itShouldReturnFulfilled() {
         stateManager.informInsertionStarts(Arrays.asList(pickupDeliveryRoute), Collections.emptyList());
-        Delivery s = Delivery.Builder.newInstance("del").addSizeDimension(0, 15).setLocation(Location.newInstance(0)).build();
+        DeliveryJob s = DeliveryJob.Builder.newInstance("del").addSizeDimension(0, 15).setLocation(Location.newInstance(0)).build();
         ServiceLoadRouteLevelConstraint loadConstraint = new ServiceLoadRouteLevelConstraint(stateManager);
         JobInsertionContext context = new JobInsertionContext(pickupDeliveryRoute, s, serviceRoute.getVehicle(), null, 0.);
         assertTrue(loadConstraint.fulfilled(context));
@@ -282,7 +282,7 @@ public void whenPDRouteRouteAndNewDeliveryFitsIn_itShouldReturnFulfilled() {
     @Test
     public void whenPDRouteRouteAndNewPickupDoesNotFitIn_itShouldReturnNotFulfilled() {
         stateManager.informInsertionStarts(Arrays.asList(pickupDeliveryRoute), Collections.<Job>emptyList());
-        Pickup s = Pickup.Builder.newInstance("pickup")
+        PickupJob s = PickupJob.Builder.newInstance("pickup")
                         .setLocation(Location.newInstance(0))
                         .addSizeDimension(0, 11).build();
         ServiceLoadRouteLevelConstraint loadConstraint = new ServiceLoadRouteLevelConstraint(stateManager);
@@ -293,7 +293,7 @@ public void whenPDRouteRouteAndNewPickupDoesNotFitIn_itShouldReturnNotFulfilled(
     @Test
     public void whenPDRouteRouteAndNewDeliveryDoesNotFitIn_itShouldReturnNotFulfilled() {
         stateManager.informInsertionStarts(Arrays.asList(pickupDeliveryRoute), Collections.<Job>emptyList());
-        Delivery s = Delivery.Builder.newInstance("del").setLocation(Location.newInstance(0))
+        DeliveryJob s = DeliveryJob.Builder.newInstance("del").setLocation(Location.newInstance(0))
                         .addSizeDimension(0, 16).build();
         ServiceLoadRouteLevelConstraint loadConstraint = new ServiceLoadRouteLevelConstraint(stateManager);
 
@@ -307,7 +307,7 @@ public void whenPDRouteRouteAndNewDeliveryDoesNotFitIn_itShouldReturnNotFulfille
     @Test
     public void whenPDRoute_newPickupShouldFitInBetweenStartAndAct1() {
         stateManager.informInsertionStarts(Arrays.asList(pickupDeliveryRoute), Collections.<Job>emptyList());
-        Pickup s = mock(Pickup.class);
+        PickupJob s = mock(PickupJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 5).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
@@ -324,7 +324,7 @@ public void whenPDRoute_newPickupShouldFitInBetweenStartAndAct1() {
     @Test
     public void whenPDRoute_newPickupShouldFitInBetweenAct1AndAct2() {
         stateManager.informInsertionStarts(Arrays.asList(pickupDeliveryRoute), Collections.<Job>emptyList());
-        Pickup s = mock(Pickup.class);
+        PickupJob s = mock(PickupJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 5).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
@@ -341,7 +341,7 @@ public void whenPDRoute_newPickupShouldFitInBetweenAct1AndAct2() {
     @Test
     public void whenPDRoute_newPickupShouldFitInBetweenAct2AndEnd() {
         stateManager.informInsertionStarts(Arrays.asList(pickupDeliveryRoute), Collections.<Job>emptyList());
-        Pickup s = mock(Pickup.class);
+        PickupJob s = mock(PickupJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 10).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
@@ -361,7 +361,7 @@ public void whenPDRoute_newPickupShouldFitInBetweenAct2AndEnd() {
     @Test
     public void whenPDRoute_newPickupShouldNotFitInBetweenStartAndAct1() {
         stateManager.informInsertionStarts(Arrays.asList(pickupDeliveryRoute), Collections.<Job>emptyList());
-        Pickup s = mock(Pickup.class);
+        PickupJob s = mock(PickupJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 6).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
@@ -378,7 +378,7 @@ public void whenPDRoute_newPickupShouldNotFitInBetweenStartAndAct1() {
     @Test
     public void whenPDRoute_newPickupShouldNotFitInBetweenAct1AndAct2() {
         stateManager.informInsertionStarts(Arrays.asList(pickupDeliveryRoute), Collections.<Job>emptyList());
-        Pickup s = mock(Pickup.class);
+        PickupJob s = mock(PickupJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 6).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
@@ -395,7 +395,7 @@ public void whenPDRoute_newPickupShouldNotFitInBetweenAct1AndAct2() {
     @Test
     public void whenPDRoute_newPickupShouldNotFitInBetweenAct2AndEnd() {
         stateManager.informInsertionStarts(Arrays.asList(pickupDeliveryRoute), Collections.<Job>emptyList());
-        Pickup s = mock(Pickup.class);
+        PickupJob s = mock(PickupJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 11).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
@@ -416,7 +416,7 @@ public void whenPDRoute_newPickupShouldNotFitInBetweenAct2AndEnd() {
     @Test
     public void whenPDRoute_newDeliveryShouldFitInBetweenStartAndAct1() {
         stateManager.informInsertionStarts(Arrays.asList(pickupDeliveryRoute), Collections.<Job>emptyList());
-        Delivery s = mock(Delivery.class);
+        DeliveryJob s = mock(DeliveryJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 15).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
@@ -434,7 +434,7 @@ public void whenPDRoute_newDeliveryShouldFitInBetweenStartAndAct1() {
     @Test
     public void whenPDRoute_newDeliveryShouldNotFitInBetweenStartAndAct1() {
         stateManager.informInsertionStarts(Arrays.asList(pickupDeliveryRoute), Collections.<Job>emptyList());
-        Delivery s = mock(Delivery.class);
+        DeliveryJob s = mock(DeliveryJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 16).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
@@ -452,7 +452,7 @@ public void whenPDRoute_newDeliveryShouldNotFitInBetweenStartAndAct1() {
     @Test
     public void whenPDRoute_newDeliveryShouldFitInBetweenAct1AndAct2() {
         stateManager.informInsertionStarts(Arrays.asList(pickupDeliveryRoute), Collections.<Job>emptyList());
-        Delivery s = mock(Delivery.class);
+        DeliveryJob s = mock(DeliveryJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 5).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
@@ -470,7 +470,7 @@ public void whenPDRoute_newDeliveryShouldFitInBetweenAct1AndAct2() {
     @Test
     public void whenPDRoute_newDeliveryNotShouldFitInBetweenAct1AndAct2() {
         stateManager.informInsertionStarts(Arrays.asList(pickupDeliveryRoute), Collections.<Job>emptyList());
-        Delivery s = mock(Delivery.class);
+        DeliveryJob s = mock(DeliveryJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 6).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
@@ -488,7 +488,7 @@ public void whenPDRoute_newDeliveryNotShouldFitInBetweenAct1AndAct2() {
     @Test
     public void whenPDRoute_newDeliveryShouldFitInBetweenAct2AndEnd() {
         stateManager.informInsertionStarts(Arrays.asList(pickupDeliveryRoute), Collections.<Job>emptyList());
-        Delivery s = mock(Delivery.class);
+        DeliveryJob s = mock(DeliveryJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 5).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
@@ -506,7 +506,7 @@ public void whenPDRoute_newDeliveryShouldFitInBetweenAct2AndEnd() {
     @Test
     public void whenPDRoute_newDeliveryShouldNotFitInBetweenAct2AndEnd() {
         stateManager.informInsertionStarts(Arrays.asList(pickupDeliveryRoute), Collections.<Job>emptyList());
-        Delivery s = mock(Delivery.class);
+        DeliveryJob s = mock(DeliveryJob.class);
         SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 6).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadRouteLevelConstraintTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadRouteLevelConstraintTest.java
index c01e77ee2..549ac225a 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadRouteLevelConstraintTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadRouteLevelConstraintTest.java
@@ -32,8 +32,8 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.job.Delivery;
-import com.graphhopper.jsprit.core.problem.job.Pickup;
+import com.graphhopper.jsprit.core.problem.job.DeliveryJob;
+import com.graphhopper.jsprit.core.problem.job.PickupJob;
 import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
@@ -80,7 +80,7 @@ public void doBefore() {
 
     @Test
     public void whenLoadPlusDeliverySizeDoesNotExceedsVehicleCapacity_itShouldReturnTrue() {
-        Delivery service = Delivery.Builder.newInstance("del").setLocation(l())
+        DeliveryJob service = DeliveryJob.Builder.newInstance("del").setLocation(l())
                         .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 1).addDimension(2, 1).build()).build();
         JobInsertionContext iContext = mock(JobInsertionContext.class);
         when(iContext.getJob()).thenReturn(service);
@@ -92,7 +92,7 @@ public void whenLoadPlusDeliverySizeDoesNotExceedsVehicleCapacity_itShouldReturn
 
     @Test
     public void whenLoadPlusDeliverySizeExceedsVehicleCapacityInAllDimension_itShouldReturnFalse() {
-        Delivery service = Delivery.Builder.newInstance("d").setLocation(l())
+        DeliveryJob service = DeliveryJob.Builder.newInstance("d").setLocation(l())
                         .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 3).addDimension(1, 3).addDimension(2, 3).build()).build();
         JobInsertionContext iContext = mock(JobInsertionContext.class);
         when(iContext.getJob()).thenReturn(service);
@@ -104,7 +104,7 @@ public void whenLoadPlusDeliverySizeExceedsVehicleCapacityInAllDimension_itShoul
 
     @Test
     public void whenLoadPlusDeliverySizeExceedsVehicleCapacityInOneDimension_itShouldReturnFalse() {
-        Delivery service = Delivery.Builder.newInstance("d").setLocation(l())
+        DeliveryJob service = DeliveryJob.Builder.newInstance("d").setLocation(l())
                         .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 1).addDimension(2, 3).build()).build();
 
         JobInsertionContext iContext = mock(JobInsertionContext.class);
@@ -117,7 +117,7 @@ public void whenLoadPlusDeliverySizeExceedsVehicleCapacityInOneDimension_itShoul
 
     @Test
     public void whenLoadPlusDeliverySizeJustFitIntoVehicle_itShouldReturnTrue() {
-        Delivery service = Delivery.Builder.newInstance("d").setLocation(l())
+        DeliveryJob service = DeliveryJob.Builder.newInstance("d").setLocation(l())
                         .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 2).addDimension(1, 2).addDimension(2, 2).build()).build();
         JobInsertionContext iContext = mock(JobInsertionContext.class);
         when(iContext.getJob()).thenReturn(service);
@@ -129,7 +129,7 @@ public void whenLoadPlusDeliverySizeJustFitIntoVehicle_itShouldReturnTrue() {
 
     @Test
     public void whenLoadPlusPickupSizeDoesNotExceedsVehicleCapacity_itShouldReturnTrue() {
-        Pickup service = Pickup.Builder.newInstance("p").setLocation(l())
+        PickupJob service = PickupJob.Builder.newInstance("p").setLocation(l())
                         .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 1).addDimension(2, 1).build()).build();
 
         JobInsertionContext iContext = mock(JobInsertionContext.class);
@@ -142,7 +142,7 @@ public void whenLoadPlusPickupSizeDoesNotExceedsVehicleCapacity_itShouldReturnTr
 
     @Test
     public void whenLoadPlusPickupSizeExceedsVehicleCapacityInAllDimension_itShouldReturnFalse() {
-        Pickup service = Pickup.Builder.newInstance("p").setLocation(l())
+        PickupJob service = PickupJob.Builder.newInstance("p").setLocation(l())
                         .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 3).addDimension(1, 3).addDimension(2, 3).build()).build();
         JobInsertionContext iContext = mock(JobInsertionContext.class);
         when(iContext.getJob()).thenReturn(service);
@@ -154,7 +154,7 @@ public void whenLoadPlusPickupSizeExceedsVehicleCapacityInAllDimension_itShouldR
 
     @Test
     public void whenLoadPlusPickupSizeExceedsVehicleCapacityInOneDimension_itShouldReturnFalse() {
-        Pickup service = Pickup.Builder.newInstance("p").setLocation(l())
+        PickupJob service = PickupJob.Builder.newInstance("p").setLocation(l())
                         .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 1).addDimension(2, 3).build()).build();
 
         JobInsertionContext iContext = mock(JobInsertionContext.class);
@@ -167,7 +167,7 @@ public void whenLoadPlusPickupSizeExceedsVehicleCapacityInOneDimension_itShouldR
 
     @Test
     public void whenLoadPlusPickupSizeJustFitIntoVehicle_itShouldReturnTrue() {
-        Pickup service = Pickup.Builder.newInstance("p").setLocation(l())
+        PickupJob service = PickupJob.Builder.newInstance("p").setLocation(l())
                         .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 2).addDimension(1, 2).addDimension(2, 2).build()).build();
 
         JobInsertionContext iContext = mock(JobInsertionContext.class);
@@ -262,7 +262,7 @@ public void whenAddingAServiceAndNewVehicleDoesNotHaveTheCapacity_itShouldReturn
 
     @Test
     public void whenAddingADeliveryAndNewVehicleDoesNotHaveTheCapacity_itShouldReturnFalse() {
-        Delivery service = mock(Delivery.class);
+        DeliveryJob service = mock(DeliveryJob.class);
         when(service.getSize()).thenReturn(SizeDimension.Builder.newInstance().addDimension(0, 2).build());
 
         SizeDimension atBeginning = SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 2).addDimension(2, 1).build();
@@ -290,7 +290,7 @@ public void whenAddingADeliveryAndNewVehicleDoesNotHaveTheCapacity_itShouldRetur
 
     @Test
     public void whenAddingAPickupAndNewVehicleDoesNotHaveTheCapacity_itShouldReturnFalse() {
-        Pickup service = mock(Pickup.class);
+        PickupJob service = mock(PickupJob.class);
         when(service.getSize()).thenReturn(SizeDimension.Builder.newInstance().addDimension(0, 2).build());
 
         SizeDimension atBeginning = SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 2).addDimension(2, 1).build();
@@ -318,8 +318,8 @@ public void whenAddingAPickupAndNewVehicleDoesNotHaveTheCapacity_itShouldReturnF
 
     @Test
     public void whenNewVehicleCapacityIsNotSufficiant1_returnFalse() {
-        final Pickup pickup = createPickup("pick", 2);
-        final Pickup pickup2 = createPickup("pick2", 3);
+        final PickupJob pickup = createPickup("pick", 2);
+        final PickupJob pickup2 = createPickup("pick2", 3);
 
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0, 3).build();
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance("loc")).build();
@@ -335,8 +335,8 @@ public void whenNewVehicleCapacityIsNotSufficiant1_returnFalse() {
 
     @Test
     public void whenNewVehicleCapacityIsNotSufficiant2_returnFalse() {
-        Pickup service = createPickup("pick", 2);
-        Pickup serviceInRoute = createPickup("pick1", 3);
+        PickupJob service = createPickup("pick", 2);
+        PickupJob serviceInRoute = createPickup("pick1", 3);
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0, 3).build();
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance("loc")).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addVehicle(vehicle).addJob(service).addJob(serviceInRoute).build();
@@ -348,8 +348,8 @@ public void whenNewVehicleCapacityIsNotSufficiant2_returnFalse() {
     }
 
 
-    private Pickup createPickup(String string, int i) {
-        return new Pickup.Builder(string).addSizeDimension(0, i).setLocation(Location.newInstance("loc")).build();
+    private PickupJob createPickup(String string, int i) {
+        return new PickupJob.Builder(string).addSizeDimension(0, i).setLocation(Location.newInstance("loc")).build();
     }
 
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTraveledDistanceTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTraveledDistanceTest.java
index a1ed51458..8dc0589e8 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTraveledDistanceTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTraveledDistanceTest.java
@@ -24,9 +24,9 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.cost.TransportDistance;
-import com.graphhopper.jsprit.core.problem.job.Delivery;
+import com.graphhopper.jsprit.core.problem.job.DeliveryJob;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Pickup;
+import com.graphhopper.jsprit.core.problem.job.PickupJob;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.misc.ActivityContext;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
@@ -63,9 +63,9 @@
 
     VehicleRoutingProblem vrp;
 
-    Delivery d1,d2,newDelivery;
+    DeliveryJob d1,d2,newDelivery;
 
-    Pickup pickup;
+    PickupJob pickup;
 
     Shipment s1;
 
@@ -81,13 +81,13 @@ public void doBefore(){
         maxDistanceMap.put(vehicle,200d);
         maxDistanceMap.put(vehicle2,200d);
 
-        d1 = Delivery.Builder.newInstance("d1").setLocation(Location.newInstance(10,10)).build();
-        d2 = Delivery.Builder.newInstance("d2").setLocation(Location.newInstance(20,15)).build();
-        pickup = Pickup.Builder.newInstance("pickup").setLocation(Location.newInstance(50,50)).build();
+        d1 = DeliveryJob.Builder.newInstance("d1").setLocation(Location.newInstance(10,10)).build();
+        d2 = DeliveryJob.Builder.newInstance("d2").setLocation(Location.newInstance(20,15)).build();
+        pickup = PickupJob.Builder.newInstance("pickup").setLocation(Location.newInstance(50,50)).build();
         s1 = Shipment.Builder.newInstance("s1").setPickupLocation(Location.newInstance(35,30))
             .setDeliveryLocation(Location.newInstance(20,25)).build();
 
-        newDelivery = Delivery.Builder.newInstance("new").setLocation(Location.newInstance(-10,10)).build();
+        newDelivery = DeliveryJob.Builder.newInstance("new").setLocation(Location.newInstance(-10,10)).build();
 
         vrp = VehicleRoutingProblem.Builder.newInstance()
             .setRoutingCost(new ManhattanCosts()).addVehicle(vehicle).addVehicle(vehicle2)
@@ -116,7 +116,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
     public void whenEndLocationIsSet_constraintShouldWork(){
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0,0))
             .setEndLocation(Location.newInstance(10,0)).build();
-        Pickup pickup = Pickup.Builder.newInstance("pickup").setLocation(Location.newInstance(10,0)).build();
+        PickupJob pickup = PickupJob.Builder.newInstance("pickup").setLocation(Location.newInstance(10,0)).build();
         vrp = VehicleRoutingProblem.Builder.newInstance().addVehicle(vehicle).addJob(pickup).build();
         route = VehicleRoute.emptyRoute();
         maxDistanceMap = new HashMap<>();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/DeliveryTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/DeliveryJobTest.java
similarity index 79%
rename from jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/DeliveryTest.java
rename to jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/DeliveryJobTest.java
index 1fc15d575..c21b48bee 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/DeliveryTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/DeliveryJobTest.java
@@ -26,16 +26,16 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.SizeDimension;
 
-public class DeliveryTest {
+public class DeliveryJobTest {
 
     @Test(expected = IllegalArgumentException.class)
     public void whenNeitherLocationIdNorCoordIsSet_itThrowsException() {
-        new Delivery.Builder("p").build();
+        new DeliveryJob.Builder("p").build();
     }
 
     @Test
     public void whenAddingTwoCapDimension_nuOfDimsShouldBeTwo() {
-        Delivery one = new Delivery.Builder("s").setLocation(Location.newInstance("foofoo"))
+        DeliveryJob one = new DeliveryJob.Builder("s").setLocation(Location.newInstance("foofoo"))
                         .addSizeDimension(0, 2)
                         .addSizeDimension(1, 4)
                         .build();
@@ -48,7 +48,7 @@ public void whenAddingTwoCapDimension_nuOfDimsShouldBeTwo() {
 
     @Test
     public void sizeAtStartAndEndShouldBeCorrect() {
-        Delivery one = new Delivery.Builder("s").setLocation(Location.newInstance("foofoo"))
+        DeliveryJob one = new DeliveryJob.Builder("s").setLocation(Location.newInstance("foofoo"))
                         .addSizeDimension(0, 2)
                         .addSizeDimension(1, 4)
                         .build();
@@ -60,7 +60,7 @@ public void sizeAtStartAndEndShouldBeCorrect() {
 
     @Test
     public void whenPickupIsBuiltWithoutSpecifyingCapacity_itShouldHvCapWithOneDimAndDimValOfZero() {
-        Delivery one = new Delivery.Builder("s").setLocation(Location.newInstance("foofoo"))
+        DeliveryJob one = new DeliveryJob.Builder("s").setLocation(Location.newInstance("foofoo"))
                         .build();
         SizeDimension size = one.getActivity().getLoadChange();
         assertEquals(1, size.getNuOfDimensions());
@@ -69,7 +69,7 @@ public void whenPickupIsBuiltWithoutSpecifyingCapacity_itShouldHvCapWithOneDimAn
 
     @Test
     public void whenPickupIsBuiltWithConstructorWhereSizeIsSpecified_capacityShouldBeSetCorrectly() {
-        Delivery one = new Delivery.Builder("s").addSizeDimension(0, 1).setLocation(Location.newInstance("foofoo"))
+        DeliveryJob one = new DeliveryJob.Builder("s").addSizeDimension(0, 1).setLocation(Location.newInstance("foofoo"))
                         .build();
         SizeDimension size = one.getActivity().getLoadChange().abs();
         assertEquals(1, size.getNuOfDimensions());
@@ -78,7 +78,7 @@ public void whenPickupIsBuiltWithConstructorWhereSizeIsSpecified_capacityShouldB
 
     @Test
     public void whenAddingSkills_theyShouldBeAddedCorrectly() {
-        Delivery s = new Delivery.Builder("s").setLocation(Location.newInstance("loc"))
+        DeliveryJob s = new DeliveryJob.Builder("s").setLocation(Location.newInstance("loc"))
                         .addRequiredSkill("drill").addRequiredSkill("screwdriver").build();
         assertTrue(s.getRequiredSkills().containsSkill("drill"));
         assertTrue(s.getRequiredSkills().containsSkill("ScrewDriver"));
@@ -86,7 +86,7 @@ public void whenAddingSkills_theyShouldBeAddedCorrectly() {
 
     @Test
     public void whenAddingSkillsCaseSens_theyShouldBeAddedCorrectly() {
-        Delivery s = new Delivery.Builder("s").setLocation(Location.newInstance("loc"))
+        DeliveryJob s = new DeliveryJob.Builder("s").setLocation(Location.newInstance("loc"))
                         .addRequiredSkill("DriLl").addRequiredSkill("screwDriver").build();
         assertTrue(s.getRequiredSkills().containsSkill("drill"));
         assertTrue(s.getRequiredSkills().containsSkill("drilL"));
@@ -94,7 +94,7 @@ public void whenAddingSkillsCaseSens_theyShouldBeAddedCorrectly() {
 
     @Test
     public void whenAddingSkillsCaseSensV2_theyShouldBeAddedCorrectly() {
-        Delivery s = new Delivery.Builder("s").setLocation(Location.newInstance("loc"))
+        DeliveryJob s = new DeliveryJob.Builder("s").setLocation(Location.newInstance("loc"))
                         .addRequiredSkill("screwDriver").build();
         assertFalse(s.getRequiredSkills().containsSkill("drill"));
         assertFalse(s.getRequiredSkills().containsSkill("drilL"));
@@ -102,21 +102,21 @@ public void whenAddingSkillsCaseSensV2_theyShouldBeAddedCorrectly() {
 
     @Test
     public void nameShouldBeAssigned() {
-        Delivery s = new Delivery.Builder("s").setLocation(Location.newInstance("loc"))
+        DeliveryJob s = new DeliveryJob.Builder("s").setLocation(Location.newInstance("loc"))
                         .setName("name").build();
         assertEquals("name", s.getName());
     }
 
     @Test
     public void whenSettingPriorities_itShouldBeSetCorrectly() {
-        Delivery s = new Delivery.Builder("s").setLocation(Location.newInstance("loc"))
+        DeliveryJob s = new DeliveryJob.Builder("s").setLocation(Location.newInstance("loc"))
                         .setPriority(3).build();
         assertEquals(3, s.getPriority());
     }
 
     @Test
     public void whenNotSettingPriorities_defaultShouldBe() {
-        Delivery s = new Delivery.Builder("s").setLocation(Location.newInstance("loc"))
+        DeliveryJob s = new DeliveryJob.Builder("s").setLocation(Location.newInstance("loc"))
                         .build();
         assertEquals(2, s.getPriority());
     }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/PickupTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/PickupJobTest.java
similarity index 80%
rename from jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/PickupTest.java
rename to jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/PickupJobTest.java
index 09524bc55..4cc2dcc7b 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/PickupTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/PickupJobTest.java
@@ -26,16 +26,16 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.SizeDimension;
 
-public class PickupTest {
+public class PickupJobTest {
 
     @Test(expected = IllegalArgumentException.class)
     public void whenNeitherLocationIdNorCoordIsSet_itThrowsException() {
-        new Pickup.Builder("p").build();
+        new PickupJob.Builder("p").build();
     }
 
     @Test
     public void whenAddingTwoCapDimension_nuOfDimsShouldBeTwo() {
-        Pickup one = new Pickup.Builder("s").setLocation(Location.newInstance("foofoo"))
+        PickupJob one = new PickupJob.Builder("s").setLocation(Location.newInstance("foofoo"))
                         .addSizeDimension(0, 2)
                         .addSizeDimension(1, 4)
                         .build();
@@ -48,7 +48,7 @@ public void whenAddingTwoCapDimension_nuOfDimsShouldBeTwo() {
 
     @Test
     public void sizeAtStartAndEndShouldBeCorrect() {
-        Pickup one = new Pickup.Builder("s").setLocation(Location.newInstance("foofoo"))
+        PickupJob one = new PickupJob.Builder("s").setLocation(Location.newInstance("foofoo"))
                         .addSizeDimension(0, 2)
                         .addSizeDimension(1, 4)
                         .build();
@@ -58,7 +58,7 @@ public void sizeAtStartAndEndShouldBeCorrect() {
 
     @Test
     public void whenPickupIsBuiltWithoutSpecifyingCapacity_itShouldHvCapWithOneDimAndDimValOfZero() {
-        Pickup one = new Pickup.Builder("s").setLocation(Location.newInstance("foofoo"))
+        PickupJob one = new PickupJob.Builder("s").setLocation(Location.newInstance("foofoo"))
                         .build();
         SizeDimension size = one.getActivity().getLoadChange();
         assertEquals(1, size.getNuOfDimensions());
@@ -67,7 +67,7 @@ public void whenPickupIsBuiltWithoutSpecifyingCapacity_itShouldHvCapWithOneDimAn
 
     @Test
     public void whenPickupIsBuiltWithConstructorWhereSizeIsSpecified_capacityShouldBeSetCorrectly() {
-        Pickup one = new Pickup.Builder("s").addSizeDimension(0, 1).setLocation(Location.newInstance("foofoo"))
+        PickupJob one = new PickupJob.Builder("s").addSizeDimension(0, 1).setLocation(Location.newInstance("foofoo"))
                         .build();
         SizeDimension size = one.getActivity().getLoadChange();
         assertEquals(1, size.getNuOfDimensions());
@@ -76,7 +76,7 @@ public void whenPickupIsBuiltWithConstructorWhereSizeIsSpecified_capacityShouldB
 
     @Test
     public void whenAddingSkills_theyShouldBeAddedCorrectly() {
-        Pickup s = new Pickup.Builder("s").setLocation(Location.newInstance("loc"))
+        PickupJob s = new PickupJob.Builder("s").setLocation(Location.newInstance("loc"))
                         .addRequiredSkill("drill").addRequiredSkill("screwdriver").build();
         assertTrue(s.getRequiredSkills().containsSkill("drill"));
         assertTrue(s.getRequiredSkills().containsSkill("drill"));
@@ -85,7 +85,7 @@ public void whenAddingSkills_theyShouldBeAddedCorrectly() {
 
     @Test
     public void whenAddingSkillsCaseSens_theyShouldBeAddedCorrectly() {
-        Pickup s = new Pickup.Builder("s").setLocation(Location.newInstance("loc"))
+        PickupJob s = new PickupJob.Builder("s").setLocation(Location.newInstance("loc"))
                         .addRequiredSkill("DriLl").addRequiredSkill("screwDriver").build();
         assertTrue(s.getRequiredSkills().containsSkill("drill"));
         assertTrue(s.getRequiredSkills().containsSkill("drilL"));
@@ -93,7 +93,7 @@ public void whenAddingSkillsCaseSens_theyShouldBeAddedCorrectly() {
 
     @Test
     public void whenAddingSkillsCaseSensV2_theyShouldBeAddedCorrectly() {
-        Pickup s = new Pickup.Builder("s").setLocation(Location.newInstance("loc"))
+        PickupJob s = new PickupJob.Builder("s").setLocation(Location.newInstance("loc"))
                         .addRequiredSkill("screwDriver").build();
         assertFalse(s.getRequiredSkills().containsSkill("drill"));
         assertFalse(s.getRequiredSkills().containsSkill("drilL"));
@@ -101,7 +101,7 @@ public void whenAddingSkillsCaseSensV2_theyShouldBeAddedCorrectly() {
 
     @Test
     public void nameShouldBeAssigned() {
-        Pickup s = new Pickup.Builder("s").setLocation(Location.newInstance("loc"))
+        PickupJob s = new PickupJob.Builder("s").setLocation(Location.newInstance("loc"))
                         .setName("name").build();
         assertEquals("name", s.getName());
     }
@@ -109,14 +109,14 @@ public void nameShouldBeAssigned() {
 
     @Test
     public void whenSettingPriorities_itShouldBeSetCorrectly() {
-        Pickup s = new Pickup.Builder("s").setLocation(Location.newInstance("loc"))
+        PickupJob s = new PickupJob.Builder("s").setLocation(Location.newInstance("loc"))
                         .setPriority(3).build();
         assertEquals(3, s.getPriority());
     }
 
     @Test
     public void whenNotSettingPriorities_defaultShouldBe() {
-        Pickup s = new Pickup.Builder("s").setLocation(Location.newInstance("loc"))
+        PickupJob s = new PickupJob.Builder("s").setLocation(Location.newInstance("loc"))
                         .build();
         assertEquals(2, s.getPriority());
     }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/legacy/LegacyDeliveryTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/legacy/LegacyDeliveryTest.java
new file mode 100644
index 000000000..4aa1a55b2
--- /dev/null
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/legacy/LegacyDeliveryTest.java
@@ -0,0 +1,127 @@
+/*
+ * Licensed to GraphHopper GmbH under one or more contributor
+ * license agreements. See the NOTICE file distributed with this work for
+ * additional information regarding copyright ownership.
+ *
+ * GraphHopper GmbH licenses this file to you under the Apache License,
+ * Version 2.0 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.graphhopper.jsprit.core.problem.job.legacy;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertTrue;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import org.junit.Assert;
+import org.junit.Test;
+
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.job.Delivery;
+
+public class LegacyDeliveryTest {
+
+    @Test(expected = IllegalArgumentException.class)
+    public void whenNeitherLocationIdNorCoordIsSet_itThrowsException() {
+        Delivery.Builder.newInstance("p").build();
+    }
+
+    @Test
+    public void whenAddingTwoCapDimension_nuOfDimsShouldBeTwo() {
+        Delivery one = Delivery.Builder.newInstance("s").setLocation(Location.newInstance("foofoo"))
+                .addSizeDimension(0, 2)
+                .addSizeDimension(1, 4)
+                .build();
+        assertEquals(2, one.getSize().getNuOfDimensions());
+        assertEquals(2, one.getSize().get(0));
+        assertEquals(4, one.getSize().get(1));
+
+    }
+
+    @Test
+    public void whenPickupIsBuiltWithoutSpecifyingCapacity_itShouldHvCapWithOneDimAndDimValOfZero() {
+        Delivery one = Delivery.Builder.newInstance("s").setLocation(Location.newInstance("foofoo"))
+                .build();
+        assertEquals(1, one.getSize().getNuOfDimensions());
+        assertEquals(0, one.getSize().get(0));
+    }
+
+    @Test
+    public void whenPickupIsBuiltWithConstructorWhereSizeIsSpecified_capacityShouldBeSetCorrectly() {
+        Delivery one = Delivery.Builder.newInstance("s").addSizeDimension(0, 1).setLocation(Location.newInstance("foofoo"))
+                .build();
+        assertEquals(1, one.getSize().getNuOfDimensions());
+        assertEquals(1, one.getSize().get(0));
+    }
+
+    @Test
+    public void whenAddingSkills_theyShouldBeAddedCorrectly() {
+        Delivery s = Delivery.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+                .addRequiredSkill("drill").addRequiredSkill("screwdriver").build();
+        assertTrue(s.getRequiredSkills().containsSkill("drill"));
+        assertTrue(s.getRequiredSkills().containsSkill("ScrewDriver"));
+    }
+
+    @Test
+    public void whenAddingSkillsCaseSens_theyShouldBeAddedCorrectly() {
+        Delivery s = Delivery.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+                .addRequiredSkill("DriLl").addRequiredSkill("screwDriver").build();
+        assertTrue(s.getRequiredSkills().containsSkill("drill"));
+        assertTrue(s.getRequiredSkills().containsSkill("drilL"));
+    }
+
+    @Test
+    public void whenAddingSkillsCaseSensV2_theyShouldBeAddedCorrectly() {
+        Delivery s = Delivery.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+                .addRequiredSkill("screwDriver").build();
+        assertFalse(s.getRequiredSkills().containsSkill("drill"));
+        assertFalse(s.getRequiredSkills().containsSkill("drilL"));
+    }
+
+    @Test
+    public void nameShouldBeAssigned() {
+        Delivery s = Delivery.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+                .setName("name").build();
+        assertEquals("name", s.getName());
+    }
+
+    @Test
+    public void whenSettingPriorities_itShouldBeSetCorrectly(){
+        Delivery s = Delivery.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+                .setPriority(3).build();
+        Assert.assertEquals(3, s.getPriority());
+    }
+
+    @Test
+    public void whenNotSettingPriorities_defaultShouldBe(){
+        Delivery s = Delivery.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+                .build();
+        Assert.assertEquals(2, s.getPriority());
+    }
+
+
+    @Test
+    public void whenSettingUserData_itIsAssociatedWithTheJob() {
+        Delivery one = Delivery.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+                .setUserData(new HashMap<String, Object>()).build();
+        Delivery two = Delivery.Builder.newInstance("s2").setLocation(Location.newInstance("loc")).setUserData(42)
+                .build();
+        Delivery three = Delivery.Builder.newInstance("s3").setLocation(Location.newInstance("loc")).build();
+
+        assertTrue(one.getUserData() instanceof Map);
+        assertEquals(42, two.getUserData());
+        assertNull(three.getUserData());
+    }
+}
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/legacy/LegacyPickupTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/legacy/LegacyPickupTest.java
new file mode 100644
index 000000000..adb9e2f75
--- /dev/null
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/legacy/LegacyPickupTest.java
@@ -0,0 +1,127 @@
+/*
+ * Licensed to GraphHopper GmbH under one or more contributor
+ * license agreements. See the NOTICE file distributed with this work for
+ * additional information regarding copyright ownership.
+ *
+ * GraphHopper GmbH licenses this file to you under the Apache License,
+ * Version 2.0 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.graphhopper.jsprit.core.problem.job.legacy;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertTrue;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import org.junit.Assert;
+import org.junit.Test;
+
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.job.Pickup;
+
+public class LegacyPickupTest {
+
+    @Test(expected = IllegalArgumentException.class)
+    public void whenNeitherLocationIdNorCoordIsSet_itThrowsException() {
+        Pickup.Builder.newInstance("p").build();
+    }
+
+    @Test
+    public void whenAddingTwoCapDimension_nuOfDimsShouldBeTwo() {
+        Pickup one = Pickup.Builder.newInstance("s").setLocation(Location.newInstance("foofoo"))
+                .addSizeDimension(0, 2)
+                .addSizeDimension(1, 4)
+                .build();
+        assertEquals(2, one.getSize().getNuOfDimensions());
+        assertEquals(2, one.getSize().get(0));
+        assertEquals(4, one.getSize().get(1));
+
+    }
+
+    @Test
+    public void whenPickupIsBuiltWithoutSpecifyingCapacity_itShouldHvCapWithOneDimAndDimValOfZero() {
+        Pickup one = Pickup.Builder.newInstance("s").setLocation(Location.newInstance("foofoo"))
+                .build();
+        assertEquals(1, one.getSize().getNuOfDimensions());
+        assertEquals(0, one.getSize().get(0));
+    }
+
+    @Test
+    public void whenPickupIsBuiltWithConstructorWhereSizeIsSpecified_capacityShouldBeSetCorrectly() {
+        Pickup one = Pickup.Builder.newInstance("s").addSizeDimension(0, 1).setLocation(Location.newInstance("foofoo"))
+                .build();
+        assertEquals(1, one.getSize().getNuOfDimensions());
+        assertEquals(1, one.getSize().get(0));
+    }
+
+    @Test
+    public void whenAddingSkills_theyShouldBeAddedCorrectly() {
+        Pickup s = Pickup.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+                .addRequiredSkill("drill").addRequiredSkill("screwdriver").build();
+        assertTrue(s.getRequiredSkills().containsSkill("drill"));
+        assertTrue(s.getRequiredSkills().containsSkill("drill"));
+        assertTrue(s.getRequiredSkills().containsSkill("ScrewDriver"));
+    }
+
+    @Test
+    public void whenAddingSkillsCaseSens_theyShouldBeAddedCorrectly() {
+        Pickup s = Pickup.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+                .addRequiredSkill("DriLl").addRequiredSkill("screwDriver").build();
+        assertTrue(s.getRequiredSkills().containsSkill("drill"));
+        assertTrue(s.getRequiredSkills().containsSkill("drilL"));
+    }
+
+    @Test
+    public void whenAddingSkillsCaseSensV2_theyShouldBeAddedCorrectly() {
+        Pickup s = Pickup.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+                .addRequiredSkill("screwDriver").build();
+        assertFalse(s.getRequiredSkills().containsSkill("drill"));
+        assertFalse(s.getRequiredSkills().containsSkill("drilL"));
+    }
+
+    @Test
+    public void nameShouldBeAssigned() {
+        Pickup s = Pickup.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+                .setName("name").build();
+        assertEquals("name", s.getName());
+    }
+
+
+    @Test
+    public void whenSettingPriorities_itShouldBeSetCorrectly(){
+        Pickup s = Pickup.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+                .setPriority(3).build();
+        Assert.assertEquals(3, s.getPriority());
+    }
+
+    @Test
+    public void whenNotSettingPriorities_defaultShouldBe(){
+        Pickup s = Pickup.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+                .build();
+        Assert.assertEquals(2, s.getPriority());
+    }
+
+    @Test
+    public void whenSettingUserData_itIsAssociatedWithTheJob() {
+        Pickup one = Pickup.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+                .setUserData(new HashMap<String, Object>()).build();
+        Pickup two = Pickup.Builder.newInstance("s2").setLocation(Location.newInstance("loc")).setUserData(42).build();
+        Pickup three = Pickup.Builder.newInstance("s3").setLocation(Location.newInstance("loc")).build();
+
+        assertTrue(one.getUserData() instanceof Map);
+        assertEquals(42, two.getUserData());
+        assertNull(three.getUserData());
+    }
+}
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/TestVehicleRoute.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/TestVehicleRoute.java
index ea97b8717..84c4b02e3 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/TestVehicleRoute.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/TestVehicleRoute.java
@@ -29,8 +29,8 @@
 import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.driver.DriverImpl;
 import com.graphhopper.jsprit.core.problem.driver.DriverImpl.NoDriver;
-import com.graphhopper.jsprit.core.problem.job.Delivery;
-import com.graphhopper.jsprit.core.problem.job.Pickup;
+import com.graphhopper.jsprit.core.problem.job.DeliveryJob;
+import com.graphhopper.jsprit.core.problem.job.PickupJob;
 import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
@@ -309,56 +309,56 @@ public void whenIniRouteWithNewVehicle_depTimeMustBeSetDepTime() {
     @Test
     public void whenAddingPickup_itShouldBeTreatedAsPickup() {
 
-        Pickup pickup = new Pickup.Builder("pick").setLocation(Location.newInstance("pickLoc")).build();
+        PickupJob pickup = new PickupJob.Builder("pick").setLocation(Location.newInstance("pickLoc")).build();
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("vehicle").setStartLocation(Location.newInstance("startLoc")).build();
         VehicleRoute route = VehicleRoute.Builder.newInstance(vehicle).addService(pickup).build();
 
         TourActivity act = route.getActivities().get(0);
         assertEquals("pick.pickup", act.getName());
         assertTrue(act instanceof PickupActivity);
-        assertTrue(((JobActivity) act).getJob() instanceof Pickup);
+        assertTrue(((JobActivity) act).getJob() instanceof PickupJob);
 
     }
 
     @Test
     public void whenAddingPickup_itShouldBeAdded() {
 
-        Pickup pickup = new Pickup.Builder("pick").setLocation(Location.newInstance("pickLoc")).build();
+        PickupJob pickup = new PickupJob.Builder("pick").setLocation(Location.newInstance("pickLoc")).build();
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("vehicle").setStartLocation(Location.newInstance("startLoc")).build();
         VehicleRoute route = VehicleRoute.Builder.newInstance(vehicle).addPickup(pickup).build();
 
         TourActivity act = route.getActivities().get(0);
         assertEquals("pick.pickup", act.getName());
         assertTrue(act instanceof PickupActivity);
-        assertTrue(((JobActivity) act).getJob() instanceof Pickup);
+        assertTrue(((JobActivity) act).getJob() instanceof PickupJob);
 
     }
 
     @Test
     public void whenAddingDelivery_itShouldBeTreatedAsDelivery() {
 
-        Delivery delivery = new Delivery.Builder("delivery").setLocation(Location.newInstance("deliveryLoc")).build();
+        DeliveryJob delivery = new DeliveryJob.Builder("delivery").setLocation(Location.newInstance("deliveryLoc")).build();
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("vehicle").setStartLocation(Location.newInstance("startLoc")).build();
         VehicleRoute route = VehicleRoute.Builder.newInstance(vehicle).addService(delivery).build();
 
         TourActivity act = route.getActivities().get(0);
         assertEquals("delivery.delivery", act.getName());
         assertTrue(act instanceof DeliveryActivity);
-        assertTrue(((JobActivity) act).getJob() instanceof Delivery);
+        assertTrue(((JobActivity) act).getJob() instanceof DeliveryJob);
 
     }
 
     @Test
     public void whenAddingDelivery_itShouldBeAdded() {
 
-        Delivery delivery = new Delivery.Builder("delivery").setLocation(Location.newInstance("deliveryLoc")).build();
+        DeliveryJob delivery = new DeliveryJob.Builder("delivery").setLocation(Location.newInstance("deliveryLoc")).build();
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("vehicle").setStartLocation(Location.newInstance("startLoc")).build();
         VehicleRoute route = VehicleRoute.Builder.newInstance(vehicle).addDelivery(delivery).build();
 
         TourActivity act = route.getActivities().get(0);
         assertEquals("delivery.delivery", act.getName());
         assertTrue(act instanceof DeliveryActivity);
-        assertTrue(((JobActivity) act).getJob() instanceof Delivery);
+        assertTrue(((JobActivity) act).getJob() instanceof DeliveryJob);
 
     }
 }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliveryActivityTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliveryActivityTest.java
index e632210f6..9f742c250 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliveryActivityTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliveryActivityTest.java
@@ -23,13 +23,13 @@
 import org.junit.Test;
 
 import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.job.Delivery;
+import com.graphhopper.jsprit.core.problem.job.DeliveryJob;
 
 public class DeliveryActivityTest extends JobActivityTest {
 
     @Before
     public void doBefore() {
-        service = new Delivery.Builder("service").setLocation(Location.newInstance("loc"))
+        service = new DeliveryJob.Builder("service").setLocation(Location.newInstance("loc"))
                         .setTimeWindow(TimeWindow.newInstance(1., 2.)).
                         setServiceTime(20d).
                         addSizeDimension(0, 10).addSizeDimension(1, 100).addSizeDimension(2, 1000).build();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/ChristofidesReader.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/ChristofidesReader.java
index 211cec884..7bafd8b7d 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/ChristofidesReader.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/ChristofidesReader.java
@@ -29,8 +29,8 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
-import com.graphhopper.jsprit.core.problem.job.Delivery;
-import com.graphhopper.jsprit.core.problem.job.Pickup;
+import com.graphhopper.jsprit.core.problem.job.DeliveryJob;
+import com.graphhopper.jsprit.core.problem.job.PickupJob;
 import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
@@ -100,10 +100,10 @@ public void read(InputStream inputStream) {
                     ServiceJob service = new ServiceJob.Builder(customer).addSizeDimension(0, demand).setServiceTime(serviceTime).setLocation(Location.newInstance(customerCoord.getX(), customerCoord.getY())).build();
                     vrpBuilder.addJob(service);
                 } else if (jobType.equals(JobType.DELIVERY)) {
-                    Delivery service = new Delivery.Builder(customer).addSizeDimension(0, demand).setServiceTime(serviceTime).setLocation(Location.newInstance(customerCoord.getX(), customerCoord.getY())).build();
+                    DeliveryJob service = new DeliveryJob.Builder(customer).addSizeDimension(0, demand).setServiceTime(serviceTime).setLocation(Location.newInstance(customerCoord.getX(), customerCoord.getY())).build();
                     vrpBuilder.addJob(service);
                 } else if (jobType.equals(JobType.PICKUP)) {
-                    Pickup service = new Pickup.Builder(customer).addSizeDimension(0, demand).setServiceTime(serviceTime).setLocation(Location.newInstance(customerCoord.getX(), customerCoord.getY())).build();
+                    PickupJob service = new PickupJob.Builder(customer).addSizeDimension(0, demand).setServiceTime(serviceTime).setLocation(Location.newInstance(customerCoord.getX(), customerCoord.getY())).build();
                     vrpBuilder.addJob(service);
                 }
             }
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleDepotBoundedPickupAndDeliveryExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleDepotBoundedPickupAndDeliveryExample.java
index 6f964f800..b8897c58b 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleDepotBoundedPickupAndDeliveryExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleDepotBoundedPickupAndDeliveryExample.java
@@ -23,8 +23,8 @@
 import com.graphhopper.jsprit.core.algorithm.box.SchrimpfFactory;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
-import com.graphhopper.jsprit.core.problem.job.Delivery;
-import com.graphhopper.jsprit.core.problem.job.Pickup;
+import com.graphhopper.jsprit.core.problem.job.DeliveryJob;
+import com.graphhopper.jsprit.core.problem.job.PickupJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl.Builder;
@@ -64,11 +64,11 @@ public static void main(String[] args) {
          * build pickups and deliveries at the required locations, each with a capacity-demand of 1.
 		 */
 
-        Pickup pickup1 = new Pickup.Builder("1").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 7)).build();
-        Delivery delivery1 = new Delivery.Builder("2").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 13)).build();
+        PickupJob pickup1 = new PickupJob.Builder("1").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 7)).build();
+        DeliveryJob delivery1 = new DeliveryJob.Builder("2").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 13)).build();
 
-        Pickup pickup2 = new Pickup.Builder("3").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 7)).build();
-        Delivery delivery2 = new Delivery.Builder("4").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 13)).build();
+        PickupJob pickup2 = new PickupJob.Builder("3").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 7)).build();
+        DeliveryJob delivery2 = new DeliveryJob.Builder("4").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 13)).build();
 
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryWithDepotBoundedDeliveriesExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryWithDepotBoundedDeliveriesExample.java
index 1fe20e3f4..f93b29a75 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryWithDepotBoundedDeliveriesExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleEnRoutePickupAndDeliveryWithDepotBoundedDeliveriesExample.java
@@ -25,7 +25,7 @@
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
 import com.graphhopper.jsprit.core.problem.constraint.ServiceDeliveriesFirstConstraint;
-import com.graphhopper.jsprit.core.problem.job.Delivery;
+import com.graphhopper.jsprit.core.problem.job.DeliveryJob;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
@@ -82,10 +82,10 @@ public static void main(String[] args) {
         /*
          * build deliveries, (implicitly picked up in the depot) 1: (4,8) 2: (4,12) 3: (16,8) 4: (16,12)
          */
-        Delivery delivery1 = new Delivery.Builder("5").addSizeDimension(0, 1).setLocation(loc(Coordinate.newInstance(4, 8))).build();
-        Delivery delivery2 = new Delivery.Builder("6").addSizeDimension(0, 1).setLocation(loc(Coordinate.newInstance(4, 12))).build();
-        Delivery delivery3 = new Delivery.Builder("7").addSizeDimension(0, 1).setLocation(loc(Coordinate.newInstance(16, 8))).build();
-        Delivery delivery4 = new Delivery.Builder("8").addSizeDimension(0, 1).setLocation(loc(Coordinate.newInstance(16, 12))).build();
+        DeliveryJob delivery1 = new DeliveryJob.Builder("5").addSizeDimension(0, 1).setLocation(loc(Coordinate.newInstance(4, 8))).build();
+        DeliveryJob delivery2 = new DeliveryJob.Builder("6").addSizeDimension(0, 1).setLocation(loc(Coordinate.newInstance(4, 12))).build();
+        DeliveryJob delivery3 = new DeliveryJob.Builder("7").addSizeDimension(0, 1).setLocation(loc(Coordinate.newInstance(16, 8))).build();
+        DeliveryJob delivery4 = new DeliveryJob.Builder("8").addSizeDimension(0, 1).setLocation(loc(Coordinate.newInstance(16, 12))).build();
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
         vrpBuilder.addVehicle(vehicle);
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleVRPWithBackhaulsExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleVRPWithBackhaulsExample.java
index 062ea2046..2d4c542b5 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleVRPWithBackhaulsExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/SimpleVRPWithBackhaulsExample.java
@@ -26,8 +26,8 @@
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
 import com.graphhopper.jsprit.core.problem.constraint.ServiceDeliveriesFirstConstraint;
-import com.graphhopper.jsprit.core.problem.job.Delivery;
-import com.graphhopper.jsprit.core.problem.job.Pickup;
+import com.graphhopper.jsprit.core.problem.job.DeliveryJob;
+import com.graphhopper.jsprit.core.problem.job.PickupJob;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl.Builder;
@@ -66,11 +66,11 @@ public static void main(String[] args) {
 		/*
          * build pickups and deliveries at the required locations, each with a capacity-demand of 1.
 		 */
-        Pickup pickup1 = new Pickup.Builder("1").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 7)).build();
-        Delivery delivery1 = new Delivery.Builder("2").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 13)).build();
+        PickupJob pickup1 = new PickupJob.Builder("1").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 7)).build();
+        DeliveryJob delivery1 = new DeliveryJob.Builder("2").addSizeDimension(0, 1).setLocation(Location.newInstance(5, 13)).build();
 
-        Pickup pickup2 = new Pickup.Builder("3").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 7)).build();
-        Delivery delivery2 = new Delivery.Builder("4").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 13)).build();
+        PickupJob pickup2 = new PickupJob.Builder("3").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 7)).build();
+        DeliveryJob delivery2 = new DeliveryJob.Builder("4").addSizeDimension(0, 1).setLocation(Location.newInstance(15, 13)).build();
 
 
         VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
diff --git a/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLReader.java b/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLReader.java
index e45accf46..8214c6a68 100644
--- a/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLReader.java
+++ b/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLReader.java
@@ -42,9 +42,9 @@
 import com.graphhopper.jsprit.core.problem.driver.DriverImpl;
 import com.graphhopper.jsprit.core.problem.job.AbstractSingleActivityJob;
 import com.graphhopper.jsprit.core.problem.job.Break;
-import com.graphhopper.jsprit.core.problem.job.Delivery;
+import com.graphhopper.jsprit.core.problem.job.DeliveryJob;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Pickup;
+import com.graphhopper.jsprit.core.problem.job.PickupJob;
 import com.graphhopper.jsprit.core.problem.job.ServiceJob;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
@@ -70,15 +70,15 @@
         public AbstractSingleActivityJob.BuilderBase<?, ?> createBuilder(String serviceType, String id, Integer size) {
             if (serviceType.equals("pickup")) {
                 if (size != null) {
-                    return new Pickup.Builder(id).addSizeDimension(0, size);
+                    return new PickupJob.Builder(id).addSizeDimension(0, size);
                 } else {
-                    return new Pickup.Builder(id);
+                    return new PickupJob.Builder(id);
                 }
             } else if (serviceType.equals("delivery")) {
                 if (size != null) {
-                    return new Delivery.Builder(id).addSizeDimension(0, size);
+                    return new DeliveryJob.Builder(id).addSizeDimension(0, size);
                 } else {
-                    return new Delivery.Builder(id);
+                    return new DeliveryJob.Builder(id);
                 }
             } else {
                 if (size != null) {
