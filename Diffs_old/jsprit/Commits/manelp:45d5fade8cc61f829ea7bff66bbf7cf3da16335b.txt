diff --git a/.travis.yml b/.travis.yml
index dbca6aee7..373829e3f 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -3,7 +3,6 @@ sudo: false
 matrix:
   fast_finish: true
   include:
-    - jdk: openjdk7
     - jdk: oraclejdk8
       # Java 9 needs to be manually installed/upgraded
       # see: https://github.com/travis-ci/travis-ci/issues/2968#issuecomment-149164058
@@ -52,7 +51,7 @@ script:
 notifications:
   email:
     - $EMAIL
-    
+
 cache:
   directories:
     - $HOME/.m2
diff --git a/CHANGELOG.md b/CHANGELOG.md
index 7a7da75f0..450c8e9d1 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,5 +1,6 @@
 Change-log
 ==========
+**v1.7.3** @ 2019-04-10
 
 **v1.7.2** @ 2017-06-08
 - see [Whats new](https://github.com/graphhopper/jsprit/blob/master/WHATS_NEW.md)
diff --git a/jsprit-analysis/pom.xml b/jsprit-analysis/pom.xml
index e4dd3e4b7..ec78fec8e 100644
--- a/jsprit-analysis/pom.xml
+++ b/jsprit-analysis/pom.xml
@@ -20,7 +20,7 @@
     <parent>
         <groupId>com.graphhopper</groupId>
         <artifactId>jsprit</artifactId>
-        <version>1.7.3-SNAPSHOT</version>
+        <version>1.8-SNAPSHOT</version>
     </parent>
     <modelVersion>4.0.0</modelVersion>
     <artifactId>jsprit-analysis</artifactId>
diff --git a/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/AlgorithmEventsRecorder.java b/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/AlgorithmEventsRecorder.java
index 441026240..6ca5e9a83 100644
--- a/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/AlgorithmEventsRecorder.java
+++ b/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/AlgorithmEventsRecorder.java
@@ -376,7 +376,7 @@ private void addNode(String nodeId, Coordinate nodeCoord) {
     }
 
     @Override
-    public void informInsertionEnds(Collection<VehicleRoute> vehicleRoutes) {
+    public void informInsertionEnds(Collection<VehicleRoute> vehicleRoutes, Collection<Job> badJobs) {
         if (!record()) return;
         fileSink.stepBegins(graph.getId(), 0, CLEAR_SOLUTION);
         removeRoutes(vehicleRoutes);
diff --git a/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/GraphStreamViewer.java b/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/GraphStreamViewer.java
index e04097f3c..22d38ce9d 100644
--- a/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/GraphStreamViewer.java
+++ b/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/GraphStreamViewer.java
@@ -572,28 +572,30 @@ private void renderRoute(Graph g, VehicleRoute route, int routeId, long renderDe
             n.addAttribute("ui.label", "start");
         }
         for (TourActivity act : route.getActivities()) {
-            Job job = ((JobActivity) act).getJob();
-            String currIdentifier = makeId(job.getId(), act.getLocation().getId());
-            if (label.equals(Label.ACTIVITY)) {
-                Node actNode = g.getNode(currIdentifier);
-                actNode.addAttribute("ui.label", act.getName());
-            } else if (label.equals(Label.JOB_NAME)) {
-                Node actNode = g.getNode(currIdentifier);
-                actNode.addAttribute("ui.label", job.getName());
-            } else if (label.equals(Label.ARRIVAL_TIME)) {
-                Node actNode = g.getNode(currIdentifier);
-                actNode.addAttribute("ui.label", Time.parseSecondsToTime(act.getArrTime()));
-            } else if (label.equals(Label.DEPARTURE_TIME)) {
-                Node actNode = g.getNode(currIdentifier);
-                actNode.addAttribute("ui.label", Time.parseSecondsToTime(act.getEndTime()));
+            if (act instanceof  JobActivity) {
+                Job job = ((JobActivity) act).getJob();
+                String currIdentifier = makeId(job.getId(), act.getLocation().getId());
+                if (label.equals(Label.ACTIVITY)) {
+                    Node actNode = g.getNode(currIdentifier);
+                    actNode.addAttribute("ui.label", act.getName());
+                } else if (label.equals(Label.JOB_NAME)) {
+                    Node actNode = g.getNode(currIdentifier);
+                    actNode.addAttribute("ui.label", job.getName());
+                } else if (label.equals(Label.ARRIVAL_TIME)) {
+                    Node actNode = g.getNode(currIdentifier);
+                    actNode.addAttribute("ui.label", Time.parseSecondsToTime(act.getArrTime()));
+                } else if (label.equals(Label.DEPARTURE_TIME)) {
+                    Node actNode = g.getNode(currIdentifier);
+                    actNode.addAttribute("ui.label", Time.parseSecondsToTime(act.getEndTime()));
+                }
+                g.addEdge(makeEdgeId(routeId, vehicle_edgeId), prevIdentifier, currIdentifier, true);
+                if (act instanceof PickupActivity) g.getNode(currIdentifier).addAttribute("ui.class", "pickupInRoute");
+                else if (act instanceof DeliveryActivity)
+                    g.getNode(currIdentifier).addAttribute("ui.class", "deliveryInRoute");
+                prevIdentifier = currIdentifier;
+                vehicle_edgeId++;
+                sleep(renderDelay_in_ms);
             }
-            g.addEdge(makeEdgeId(routeId, vehicle_edgeId), prevIdentifier, currIdentifier, true);
-            if (act instanceof PickupActivity) g.getNode(currIdentifier).addAttribute("ui.class", "pickupInRoute");
-            else if (act instanceof DeliveryActivity)
-                g.getNode(currIdentifier).addAttribute("ui.class", "deliveryInRoute");
-            prevIdentifier = currIdentifier;
-            vehicle_edgeId++;
-            sleep(renderDelay_in_ms);
         }
         if (route.getVehicle().isReturnToDepot()) {
             String lastIdentifier = makeId(route.getVehicle().getId(), route.getVehicle().getEndLocation().getId());
diff --git a/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/Plotter.java b/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/Plotter.java
index 2124fb02e..c519e759a 100644
--- a/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/Plotter.java
+++ b/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/Plotter.java
@@ -302,6 +302,10 @@ private BufferedImage plot(VehicleRoutingProblem vrp, final Collection<VehicleRo
         final XYPlot plot = createPlot(problem, shipments, solution);
         JFreeChart chart = new JFreeChart(title, plot);
 
+        plot.setBackgroundPaint(Color.WHITE);
+        plot.setDomainGridlinesVisible(false);
+        plot.setRangeGridlinesVisible(false);
+
         LegendTitle legend = createLegend(routes, shipments, plot);
         chart.removeLegend();
         chart.addLegend(legend);
diff --git a/jsprit-core/pom.xml b/jsprit-core/pom.xml
index d925760b1..a1f893e75 100644
--- a/jsprit-core/pom.xml
+++ b/jsprit-core/pom.xml
@@ -21,7 +21,7 @@
     <parent>
         <groupId>com.graphhopper</groupId>
         <artifactId>jsprit</artifactId>
-        <version>1.7.3-SNAPSHOT</version>
+        <version>1.8-SNAPSHOT</version>
     </parent>
     <modelVersion>4.0.0</modelVersion>
     <artifactId>jsprit-core</artifactId>
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/InsertionInitialSolutionFactory.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/InsertionInitialSolutionFactory.java
index 137ad3446..8fec35e43 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/InsertionInitialSolutionFactory.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/InsertionInitialSolutionFactory.java
@@ -51,7 +51,7 @@ public InsertionInitialSolutionFactory(InsertionStrategy insertionStrategy, Solu
     @Override
     public VehicleRoutingProblemSolution createSolution(final VehicleRoutingProblem vrp) {
         logger.info("create initial solution");
-        List<VehicleRoute> vehicleRoutes = new ArrayList<VehicleRoute>();
+        List<VehicleRoute> vehicleRoutes = new ArrayList<>();
         vehicleRoutes.addAll(vrp.getInitialVehicleRoutes());
         Collection<Job> badJobs = insertion.insertJobs(vehicleRoutes, getUnassignedJobs(vrp));
         VehicleRoutingProblemSolution solution = new VehicleRoutingProblemSolution(vehicleRoutes, badJobs, Double.MAX_VALUE);
@@ -61,11 +61,7 @@ public VehicleRoutingProblemSolution createSolution(final VehicleRoutingProblem
     }
 
     private List<Job> getUnassignedJobs(VehicleRoutingProblem vrp) {
-        ArrayList<Job> jobs = new ArrayList<Job>(vrp.getJobs().values());
-//        for (Vehicle v : vrp.getVehicles()) {
-//            if (v.getBreak() != null) jobs.add(v.getBreak());
-//        }
-        return jobs;
+        return new ArrayList<>(vrp.getJobs().values());
     }
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/PrettyAlgorithmBuilder.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/PrettyAlgorithmBuilder.java
index 7d6c4e170..d439f6806 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/PrettyAlgorithmBuilder.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/PrettyAlgorithmBuilder.java
@@ -23,19 +23,13 @@
 import com.graphhopper.jsprit.core.algorithm.listener.AlgorithmStartsListener;
 import com.graphhopper.jsprit.core.algorithm.recreate.InsertionStrategy;
 import com.graphhopper.jsprit.core.algorithm.recreate.VehicleSwitched;
-import com.graphhopper.jsprit.core.algorithm.state.*;
+import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
-import com.graphhopper.jsprit.core.problem.constraint.SwitchNotFeasible;
 import com.graphhopper.jsprit.core.problem.solution.SolutionCostCalculator;
-import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
-import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleFleetManager;
-import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeKey;
-import com.graphhopper.jsprit.core.util.ActivityTimeTracker;
 
-import java.util.*;
+import java.util.Random;
 
 /**
  * Created by schroeder on 10.12.14.
@@ -109,12 +103,9 @@ public VehicleRoutingAlgorithm build() {
                 iniInsertionStrategy.addListener(vehicleSwitched);
             if (!iniInsertionStrategy.getListeners().contains(stateManager))
                 iniInsertionStrategy.addListener(stateManager);
-            vra.addListener(new AlgorithmStartsListener() {
-                @Override
-                public void informAlgorithmStarts(VehicleRoutingProblem problem, VehicleRoutingAlgorithm algorithm, Collection<VehicleRoutingProblemSolution> solutions) {
-                    if (solutions.isEmpty()) {
-                        solutions.add(new InsertionInitialSolutionFactory(iniInsertionStrategy, iniObjFunction).createSolution(vrp));
-                    }
+            vra.addListener((AlgorithmStartsListener) (problem, algorithm, solutions) -> {
+                if (solutions.isEmpty()) {
+                    solutions.add(new InsertionInitialSolutionFactory(iniInsertionStrategy, iniObjFunction).createSolution(vrp));
                 }
             });
         }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/RemoveEmptyVehicles.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/RemoveEmptyVehicles.java
index 702affd5f..705a0300d 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/RemoveEmptyVehicles.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/RemoveEmptyVehicles.java
@@ -18,6 +18,7 @@
 package com.graphhopper.jsprit.core.algorithm;
 
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionEndsListener;
+import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleFleetManager;
 
@@ -41,8 +42,8 @@ public String toString() {
     }
 
     @Override
-    public void informInsertionEnds(Collection<VehicleRoute> vehicleRoutes) {
-        List<VehicleRoute> routes = new ArrayList<VehicleRoute>(vehicleRoutes);
+    public void informInsertionEnds(Collection<VehicleRoute> vehicleRoutes, Collection<Job> badJobs) {
+        List<VehicleRoute> routes = new ArrayList<>(vehicleRoutes);
         for (VehicleRoute route : routes) {
             if (route.isEmpty()) {
                 fleetManager.unlock(route.getVehicle());
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/VehicleRoutingAlgorithm.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/VehicleRoutingAlgorithm.java
index 1155955bd..d8a66285c 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/VehicleRoutingAlgorithm.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/VehicleRoutingAlgorithm.java
@@ -115,7 +115,7 @@ public VehicleRoutingAlgorithm(VehicleRoutingProblem problem, SearchStrategyMana
         super();
         this.problem = problem;
         this.searchStrategyManager = searchStrategyManager;
-        initialSolutions = new ArrayList<VehicleRoutingProblemSolution>();
+        initialSolutions = new ArrayList<>();
         objectiveFunction = null;
     }
 
@@ -131,27 +131,32 @@ public VehicleRoutingAlgorithm(VehicleRoutingProblem problem, SearchStrategyMana
         super();
         this.problem = problem;
         this.searchStrategyManager = searchStrategyManager;
-        initialSolutions = new ArrayList<VehicleRoutingProblemSolution>();
+        initialSolutions = new ArrayList<>();
         this.objectiveFunction = objectiveFunction;
     }
 
-    /**
-     * Adds solution to the collection of initial solutions.
-     *
-     * @param solution the solution to be added
-     */
-    public void addInitialSolution(VehicleRoutingProblemSolution solution) {
+  /**
+   * Adds solution to the collection of initial solutions.
+   *
+   * This method may lead to errors if tour activities in the solution are different to the
+   * ones in the VRP (including differences in indexing)
+   *
+   * @param solution the solution to be added
+   */
+  public void addInitialSolution(VehicleRoutingProblemSolution solution) {
         // We will make changes so let's make a copy
         solution = VehicleRoutingProblemSolution.copyOf(solution);
-        verify(solution);
+        verifyAndAdaptSolution(solution);
         initialSolutions.add(solution);
     }
 
-    private void verify(VehicleRoutingProblemSolution solution) {
-        Set<Job> allJobs = new HashSet<Job>(problem.getJobs().values());
-        allJobs.removeAll(solution.getUnassignedJobs());
+    //this method may lead to errors if tour activities in the solution are different to the ones in the VRP
+    //(including differences in indexing)
+    private void verifyAndAdaptSolution(VehicleRoutingProblemSolution solution) {
+        Set<Job> jobsNotInSolution = new HashSet<>(problem.getJobs().values());
+        jobsNotInSolution.removeAll(solution.getUnassignedJobs());
         for (VehicleRoute route : solution.getRoutes()) {
-            allJobs.removeAll(route.getTourActivities().getJobs());
+            jobsNotInSolution.removeAll(route.getTourActivities().getJobs());
             if (route.getVehicle().getIndex() == 0)
                 throw new IllegalStateException("vehicle used in initial solution has no index. probably a vehicle is used that has not been added to the " +
                     " the VehicleRoutingProblem. only use vehicles that have already been added to the problem.");
@@ -164,7 +169,9 @@ private void verify(VehicleRoutingProblemSolution solution) {
             }
         }
 
-        solution.getUnassignedJobs().addAll(allJobs);
+        //if solution is partial (not all jobs are considered), add these jobs to solution.unassignedJobs
+        solution.getUnassignedJobs().addAll(jobsNotInSolution);
+        //update the cost of solution (regardless if partial or not)
         solution.setCost(getObjectiveFunction().getCosts(solution));
 
         //        if (nuJobs != problem.getJobs().values().size()) {
@@ -218,7 +225,7 @@ public SearchStrategyManager getSearchStrategyManager() {
         double now = System.currentTimeMillis();
         int noIterationsThisAlgoIsRunning = maxIterations;
         counter.reset();
-        Collection<VehicleRoutingProblemSolution> solutions = new ArrayList<VehicleRoutingProblemSolution>(initialSolutions);
+        Collection<VehicleRoutingProblemSolution> solutions = new ArrayList<>(initialSolutions);
         algorithmStarts(problem, solutions);
         bestEver = Solutions.bestOf(solutions);
         if (logger.isTraceEnabled()) {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/box/Jsprit.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/box/Jsprit.java
index 7225cf1fe..513f27597 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/box/Jsprit.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/box/Jsprit.java
@@ -43,7 +43,6 @@
 import com.graphhopper.jsprit.core.problem.vehicle.FiniteFleetManagerFactory;
 import com.graphhopper.jsprit.core.problem.vehicle.InfiniteFleetManagerFactory;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleFleetManager;
-import com.graphhopper.jsprit.core.util.NoiseMaker;
 import com.graphhopper.jsprit.core.util.RandomNumberGeneration;
 import com.graphhopper.jsprit.core.util.Solutions;
 
@@ -353,11 +352,11 @@ public int createNumberToBeRemoved() {
 
     }
 
-    private StateManager stateManager = null;
+    private StateManager stateManager;
 
-    private ConstraintManager constraintManager = null;
+    private ConstraintManager constraintManager;
 
-    private ExecutorService es = null;
+    private ExecutorService es;
 
     private Integer noThreads;
 
@@ -365,7 +364,7 @@ public int createNumberToBeRemoved() {
 
     private boolean addCoreConstraints;
 
-    private SolutionCostCalculator objectiveFunction = null;
+    private SolutionCostCalculator objectiveFunction;
 
     private Properties properties;
 
@@ -406,7 +405,6 @@ private VehicleRoutingAlgorithm create(final VehicleRoutingProblem vrp) {
                 vehicleFleetManager = new InfiniteFleetManagerFactory(vrp.getVehicles()).createFleetManager();
             } else {
                 FiniteFleetManagerFactory finiteFleetManagerFactory = new FiniteFleetManagerFactory(vrp.getVehicles());
-                finiteFleetManagerFactory.setRandom(random);
                 vehicleFleetManager = finiteFleetManagerFactory.createFleetManager();
             }
         }
@@ -494,20 +492,12 @@ private VehicleRoutingAlgorithm create(final VehicleRoutingProblem vrp) {
                 toInteger(properties.getProperty(Parameter.WORST_MAX_SHARE.toString())),
                 random)
         );
-        IterationStartsListener noise = new IterationStartsListener() {
-            @Override
-            public void informIterationStarts(int i, VehicleRoutingProblem problem, Collection<VehicleRoutingProblemSolution> solutions) {
-                worst.setNoiseMaker(new NoiseMaker() {
-
-                    public double makeNoise() {
-                        if (random.nextDouble() < toDouble(getProperty(Parameter.RUIN_WORST_NOISE_PROB.toString()))) {
-                            return toDouble(getProperty(Parameter.RUIN_WORST_NOISE_LEVEL.toString()))
-                                * maxCosts * random.nextDouble();
-                        } else return 0.;
-                    }
-                });
-            }
-        };
+        IterationStartsListener noise = (i, problem, solutions) -> worst.setNoiseMaker(() -> {
+            if (random.nextDouble() < toDouble(getProperty(Parameter.RUIN_WORST_NOISE_PROB.toString()))) {
+                return toDouble(getProperty(Parameter.RUIN_WORST_NOISE_LEVEL.toString()))
+                    * maxCosts * random.nextDouble();
+            } else return 0.;
+        });
 
         final RuinClusters clusters = new RuinClusters(vrp, (int) (vrp.getJobs().values().size() * 0.5), jobNeighborhoods);
         clusters.setRandom(random);
@@ -613,13 +603,10 @@ public double makeNoise() {
             if (properties.containsKey(Parameter.THRESHOLD_INI_ABS.toString())) {
                 schrimpfAcceptance.setInitialThreshold(Double.valueOf(properties.getProperty(Parameter.THRESHOLD_INI_ABS.toString())));
             } else {
-                schrimpfThreshold = new IterationStartsListener() {
-                    @Override
-                    public void informIterationStarts(int i, VehicleRoutingProblem problem, Collection<VehicleRoutingProblemSolution> solutions) {
-                        if (i == 1) {
-                            double initialThreshold = Solutions.bestOf(solutions).getCost() * toDouble(getProperty(Parameter.THRESHOLD_INI.toString()));
-                            schrimpfAcceptance.setInitialThreshold(initialThreshold);
-                        }
+                schrimpfThreshold = (i, problem, solutions) -> {
+                    if (i == 1) {
+                        double initialThreshold = Solutions.bestOf(solutions).getCost() * toDouble(getProperty(Parameter.THRESHOLD_INI.toString()));
+                        schrimpfAcceptance.setInitialThreshold(initialThreshold);
                     }
                 };
             }
@@ -627,29 +614,29 @@ public void informIterationStarts(int i, VehicleRoutingProblem problem, Collecti
         }
 
         SolutionCostCalculator objectiveFunction = getObjectiveFunction(vrp, maxCosts);
-        SearchStrategy radial_regret = new SearchStrategy(Strategy.RADIAL_REGRET.toString(), new SelectBest(), acceptor, objectiveFunction);
-        radial_regret.addModule(configureModule(new RuinAndRecreateModule(Strategy.RADIAL_REGRET.toString(), regret, radial)));
+        SearchStrategy radialRegret = new SearchStrategy(Strategy.RADIAL_REGRET.toString(), new SelectBest(), acceptor, objectiveFunction);
+        radialRegret.addModule(configureModule(new RuinAndRecreateModule(Strategy.RADIAL_REGRET.toString(), regret, radial)));
 
-        SearchStrategy radial_best = new SearchStrategy(Strategy.RADIAL_BEST.toString(), new SelectBest(), acceptor, objectiveFunction);
-        radial_best.addModule(configureModule(new RuinAndRecreateModule(Strategy.RADIAL_BEST.toString(), best, radial)));
+        SearchStrategy radialBest = new SearchStrategy(Strategy.RADIAL_BEST.toString(), new SelectBest(), acceptor, objectiveFunction);
+        radialBest.addModule(configureModule(new RuinAndRecreateModule(Strategy.RADIAL_BEST.toString(), best, radial)));
 
-        SearchStrategy random_best = new SearchStrategy(Strategy.RANDOM_BEST.toString(), new SelectBest(), acceptor, objectiveFunction);
-        random_best.addModule(configureModule(new RuinAndRecreateModule(Strategy.RANDOM_BEST.toString(), best, random_for_best)));
+        SearchStrategy randomBest = new SearchStrategy(Strategy.RANDOM_BEST.toString(), new SelectBest(), acceptor, objectiveFunction);
+        randomBest.addModule(configureModule(new RuinAndRecreateModule(Strategy.RANDOM_BEST.toString(), best, random_for_best)));
 
-        SearchStrategy random_regret = new SearchStrategy(Strategy.RANDOM_REGRET.toString(), new SelectBest(), acceptor, objectiveFunction);
-        random_regret.addModule(configureModule(new RuinAndRecreateModule(Strategy.RANDOM_REGRET.toString(), regret, random_for_regret)));
+        SearchStrategy randomRegret = new SearchStrategy(Strategy.RANDOM_REGRET.toString(), new SelectBest(), acceptor, objectiveFunction);
+        randomRegret.addModule(configureModule(new RuinAndRecreateModule(Strategy.RANDOM_REGRET.toString(), regret, random_for_regret)));
 
-        SearchStrategy worst_regret = new SearchStrategy(Strategy.WORST_REGRET.toString(), new SelectBest(), acceptor, objectiveFunction);
-        worst_regret.addModule(configureModule(new RuinAndRecreateModule(Strategy.WORST_REGRET.toString(), regret, worst)));
+        SearchStrategy worstRegret = new SearchStrategy(Strategy.WORST_REGRET.toString(), new SelectBest(), acceptor, objectiveFunction);
+        worstRegret.addModule(configureModule(new RuinAndRecreateModule(Strategy.WORST_REGRET.toString(), regret, worst)));
 
-        SearchStrategy worst_best = new SearchStrategy(Strategy.WORST_BEST.toString(), new SelectBest(), acceptor, objectiveFunction);
-        worst_best.addModule(configureModule(new RuinAndRecreateModule(Strategy.WORST_BEST.toString(), best, worst)));
+        SearchStrategy worstBest = new SearchStrategy(Strategy.WORST_BEST.toString(), new SelectBest(), acceptor, objectiveFunction);
+        worstBest.addModule(configureModule(new RuinAndRecreateModule(Strategy.WORST_BEST.toString(), best, worst)));
 
-        final SearchStrategy clusters_regret = new SearchStrategy(Strategy.CLUSTER_REGRET.toString(), new SelectBest(), acceptor, objectiveFunction);
-        clusters_regret.addModule(configureModule(new RuinAndRecreateModule(Strategy.CLUSTER_REGRET.toString(), regret, clusters)));
+        final SearchStrategy clustersRegret = new SearchStrategy(Strategy.CLUSTER_REGRET.toString(), new SelectBest(), acceptor, objectiveFunction);
+        clustersRegret.addModule(configureModule(new RuinAndRecreateModule(Strategy.CLUSTER_REGRET.toString(), regret, clusters)));
 
-        final SearchStrategy clusters_best = new SearchStrategy(Strategy.CLUSTER_BEST.toString(), new SelectBest(), acceptor, objectiveFunction);
-        clusters_best.addModule(configureModule(new RuinAndRecreateModule(Strategy.CLUSTER_BEST.toString(), best, clusters)));
+        final SearchStrategy clustersBest = new SearchStrategy(Strategy.CLUSTER_BEST.toString(), new SelectBest(), acceptor, objectiveFunction);
+        clustersBest.addModule(configureModule(new RuinAndRecreateModule(Strategy.CLUSTER_BEST.toString(), best, clusters)));
 
         SearchStrategy stringRegret = new SearchStrategy(Strategy.STRING_REGRET.toString(), new SelectBest(), acceptor, objectiveFunction);
         stringRegret.addModule(configureModule(new RuinAndRecreateModule(Strategy.STRING_REGRET.toString(), regret, stringRuin)));
@@ -662,14 +649,14 @@ public void informIterationStarts(int i, VehicleRoutingProblem problem, Collecti
         if (addCoreConstraints) {
             prettyBuilder.addCoreStateAndConstraintStuff();
         }
-        prettyBuilder.withStrategy(radial_regret, toDouble(getProperty(Strategy.RADIAL_REGRET.toString())))
-            .withStrategy(radial_best, toDouble(getProperty(Strategy.RADIAL_BEST.toString())))
-            .withStrategy(random_best, toDouble(getProperty(Strategy.RANDOM_BEST.toString())))
-            .withStrategy(random_regret, toDouble(getProperty(Strategy.RANDOM_REGRET.toString())))
-            .withStrategy(worst_best, toDouble(getProperty(Strategy.WORST_BEST.toString())))
-            .withStrategy(worst_regret, toDouble(getProperty(Strategy.WORST_REGRET.toString())))
-            .withStrategy(clusters_regret, toDouble(getProperty(Strategy.CLUSTER_REGRET.toString())))
-            .withStrategy(clusters_best, toDouble(getProperty(Strategy.CLUSTER_BEST.toString())))
+        prettyBuilder.withStrategy(radialRegret, toDouble(getProperty(Strategy.RADIAL_REGRET.toString())))
+            .withStrategy(radialBest, toDouble(getProperty(Strategy.RADIAL_BEST.toString())))
+            .withStrategy(randomBest, toDouble(getProperty(Strategy.RANDOM_BEST.toString())))
+            .withStrategy(randomRegret, toDouble(getProperty(Strategy.RANDOM_REGRET.toString())))
+            .withStrategy(worstBest, toDouble(getProperty(Strategy.WORST_BEST.toString())))
+            .withStrategy(worstRegret, toDouble(getProperty(Strategy.WORST_REGRET.toString())))
+            .withStrategy(clustersRegret, toDouble(getProperty(Strategy.CLUSTER_REGRET.toString())))
+            .withStrategy(clustersBest, toDouble(getProperty(Strategy.CLUSTER_BEST.toString())))
             .withStrategy(stringBest, toDouble(getProperty(Strategy.STRING_BEST.toString())))
             .withStrategy(stringRegret, toDouble(getProperty(Strategy.STRING_REGRET.toString())));
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/AbstractInsertionCalculator.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/AbstractInsertionCalculator.java
index 6f3d54a44..fc82d6ad9 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/AbstractInsertionCalculator.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/AbstractInsertionCalculator.java
@@ -21,6 +21,7 @@
 import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
 import com.graphhopper.jsprit.core.problem.constraint.HardActivityConstraint;
 import com.graphhopper.jsprit.core.problem.constraint.HardActivityConstraint.ConstraintsStatus;
+import com.graphhopper.jsprit.core.problem.constraint.HardConstraint;
 import com.graphhopper.jsprit.core.problem.constraint.HardRouteConstraint;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
@@ -45,17 +46,17 @@ InsertionData checkRouteContraints(JobInsertionContext insertionContext, Constra
         return null;
     }
 
-    ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prevAct, TourActivity newAct, TourActivity nextAct, double prevActDepTime, Collection<String> failedActivityConstraints, ConstraintManager constraintManager) {
+    ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prevAct, TourActivity newAct, TourActivity nextAct, double prevActDepTime, Collection<HardConstraint> failedActivityConstraints, ConstraintManager constraintManager) {
         ConstraintsStatus notFulfilled = null;
-        List<String> failed = new ArrayList<>();
+        List<HardConstraint> failed = new ArrayList<>();
         for (HardActivityConstraint c : constraintManager.getCriticalHardActivityConstraints()) {
             ConstraintsStatus status = c.fulfilled(iFacts, prevAct, newAct, nextAct, prevActDepTime);
             if (status.equals(ConstraintsStatus.NOT_FULFILLED_BREAK)) {
-                failedActivityConstraints.add(c.getClass().getSimpleName());
+                failedActivityConstraints.add(c);
                 return status;
             } else {
                 if (status.equals(ConstraintsStatus.NOT_FULFILLED)) {
-                    failed.add(c.getClass().getSimpleName());
+                    failed.add(c);
                     notFulfilled = status;
                 }
             }
@@ -68,11 +69,11 @@ ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prevAct, To
         for (HardActivityConstraint c : constraintManager.getHighPrioHardActivityConstraints()) {
             ConstraintsStatus status = c.fulfilled(iFacts, prevAct, newAct, nextAct, prevActDepTime);
             if (status.equals(ConstraintsStatus.NOT_FULFILLED_BREAK)) {
-                failedActivityConstraints.add(c.getClass().getSimpleName());
+                failedActivityConstraints.add(c);
                 return status;
             } else {
                 if (status.equals(ConstraintsStatus.NOT_FULFILLED)) {
-                    failed.add(c.getClass().getSimpleName());
+                    failed.add(c);
                     notFulfilled = status;
                 }
             }
@@ -85,7 +86,7 @@ ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prevAct, To
         for (HardActivityConstraint constraint : constraintManager.getLowPrioHardActivityConstraints()) {
             ConstraintsStatus status = constraint.fulfilled(iFacts, prevAct, newAct, nextAct, prevActDepTime);
             if (status.equals(ConstraintsStatus.NOT_FULFILLED_BREAK) || status.equals(ConstraintsStatus.NOT_FULFILLED)) {
-                failedActivityConstraints.add(constraint.getClass().getSimpleName());
+                failedActivityConstraints.add(constraint);
                 return status;
             }
         }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/AbstractInsertionStrategy.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/AbstractInsertionStrategy.java
index 5f5973f5a..8bc5a0dfd 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/AbstractInsertionStrategy.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/AbstractInsertionStrategy.java
@@ -89,7 +89,7 @@ public void setRandom(Random random) {
     public Collection<Job> insertJobs(Collection<VehicleRoute> vehicleRoutes, Collection<Job> unassignedJobs) {
         insertionsListeners.informInsertionStarts(vehicleRoutes, unassignedJobs);
         Collection<Job> badJobs = insertUnassignedJobs(vehicleRoutes, unassignedJobs);
-        insertionsListeners.informInsertionEndsListeners(vehicleRoutes);
+        insertionsListeners.informInsertionEndsListeners(vehicleRoutes, badJobs);
         return badJobs;
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/InsertionDataUpdater.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/InsertionDataUpdater.java
index 8d019e2c2..c065084d7 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/InsertionDataUpdater.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/InsertionDataUpdater.java
@@ -62,12 +62,9 @@ static VehicleRoute findRoute(Collection<VehicleRoute> routes, Job job) {
     }
 
     static Comparator<VersionedInsertionData> getComparator(){
-        return new Comparator<VersionedInsertionData>() {
-            @Override
-            public int compare(VersionedInsertionData o1, VersionedInsertionData o2) {
-                if(o1.getiData().getInsertionCost() < o2.getiData().getInsertionCost()) return -1;
-                return 1;
-            }
+        return (o1, o2) -> {
+            if (o1.getiData().getInsertionCost() < o2.getiData().getInsertionCost()) return -1;
+            return 1;
         };
     }
 
@@ -161,7 +158,7 @@ else if(scoredJob.getScore() > bestScoredJob.getScore()){
         return bestScoredJob;
     }
 
-    static double score(Job unassignedJob, InsertionData best, InsertionData secondBest, ScoringFunction scoringFunction) {
+    private static double score(Job unassignedJob, InsertionData best, InsertionData secondBest, ScoringFunction scoringFunction) {
         return Scorer.score(unassignedJob,best,secondBest,scoringFunction);
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionConcurrent.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionConcurrent.java
index b71ac5ab7..e4d033768 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionConcurrent.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionConcurrent.java
@@ -29,7 +29,10 @@
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
-import java.util.concurrent.*;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.ExecutorCompletionService;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Future;
 
 /**
  * Insertion based on regret approach.
@@ -68,7 +71,7 @@ public RegretInsertionConcurrent(JobInsertionCostsCalculator jobInsertionCalcula
         this.scoringFunction = new DefaultScorer(vehicleRoutingProblem);
         this.insertionCostsCalculator = jobInsertionCalculator;
         this.vrp = vehicleRoutingProblem;
-        completionService = new ExecutorCompletionService<ScoredJob>(executorService);
+        completionService = new ExecutorCompletionService<>(executorService);
         logger.debug("initialise " + this);
     }
 
@@ -87,7 +90,7 @@ public String toString() {
      */
     @Override
     public Collection<Job> insertUnassignedJobs(Collection<VehicleRoute> routes, Collection<Job> unassignedJobs) {
-        List<Job> badJobs = new ArrayList<Job>(unassignedJobs.size());
+        List<Job> badJobs = new ArrayList<>(unassignedJobs.size());
 
         Iterator<Job> jobIterator = unassignedJobs.iterator();
         while (jobIterator.hasNext()){
@@ -135,14 +138,7 @@ private ScoredJob nextJob(final Collection<VehicleRoute> routes, List<Job> unass
         ScoredJob bestScoredJob = null;
 
         for (final Job unassignedJob : unassignedJobList) {
-            completionService.submit(new Callable<ScoredJob>() {
-
-                @Override
-                public ScoredJob call() throws Exception {
-                    return RegretInsertion.getScoredJob(routes, unassignedJob, insertionCostsCalculator, scoringFunction);
-                }
-
-            });
+            completionService.submit(() -> RegretInsertion.getScoredJob(routes, unassignedJob, insertionCostsCalculator, scoringFunction));
         }
 
         try {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionConcurrentFast.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionConcurrentFast.java
index be4f5d118..6dbfd14fb 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionConcurrentFast.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionConcurrentFast.java
@@ -93,7 +93,7 @@ public void setSwitchAllowed(boolean switchAllowed) {
     }
 
     private Set<String> getInitialVehicleIds(VehicleRoutingProblem vehicleRoutingProblem) {
-        Set<String> ids = new HashSet<String>();
+        Set<String> ids = new HashSet<>();
         for(VehicleRoute r : vehicleRoutingProblem.getInitialVehicleRoutes()){
             ids.add(r.getVehicle().getId());
         }
@@ -114,7 +114,7 @@ public void setDependencyTypes(DependencyType[] dependencyTypes){
      */
     @Override
     public Collection<Job> insertUnassignedJobs(Collection<VehicleRoute> routes, Collection<Job> unassignedJobs) {
-        List<Job> badJobs = new ArrayList<Job>(unassignedJobs.size());
+        List<Job> badJobs = new ArrayList<>(unassignedJobs.size());
 
         Iterator<Job> jobIterator = unassignedJobs.iterator();
         while (jobIterator.hasNext()){
@@ -136,12 +136,12 @@ public void setDependencyTypes(DependencyType[] dependencyTypes){
             }
         }
 
-        List<Job> jobs = new ArrayList<Job>(unassignedJobs);
+        List<Job> jobs = new ArrayList<>(unassignedJobs);
         TreeSet<VersionedInsertionData>[] priorityQueues = new TreeSet[vrp.getJobs().values().size() + 2];
         VehicleRoute lastModified = null;
         boolean firstRun = true;
         int updateRound = 0;
-        Map<VehicleRoute,Integer> updates = new HashMap<VehicleRoute, Integer>();
+        Map<VehicleRoute, Integer> updates = new HashMap<>();
         while (!jobs.isEmpty()) {
             List<Job> unassignedJobList = new ArrayList<>(jobs);
             List<ScoredJob> badJobList = new ArrayList<>();
@@ -170,7 +170,7 @@ public void setDependencyTypes(DependencyType[] dependencyTypes){
     }
 
     private void updateInsertionData(final TreeSet<VersionedInsertionData>[] priorityQueues, final Collection<VehicleRoute> routes, List<Job> unassignedJobList, final int updateRound, final boolean firstRun, final VehicleRoute lastModified, Map<VehicleRoute, Integer> updates) {
-        List<Callable<Boolean>> tasks = new ArrayList<Callable<Boolean>>();
+        List<Callable<Boolean>> tasks = new ArrayList<>();
         boolean updatedAllRoutes = false;
         for (final Job unassignedJob : unassignedJobList) {
             if(priorityQueues[unassignedJob.getIndex()] == null){
@@ -178,7 +178,7 @@ private void updateInsertionData(final TreeSet<VersionedInsertionData>[] priorit
             }
             if(firstRun) {
                 updatedAllRoutes = true;
-                makeCallables(tasks, updatedAllRoutes, priorityQueues[unassignedJob.getIndex()], updateRound, unassignedJob, routes, lastModified);
+                makeCallables(tasks, true, priorityQueues[unassignedJob.getIndex()], updateRound, unassignedJob, routes, lastModified);
             }
             else{
                 if(dependencyTypes == null || dependencyTypes[unassignedJob.getIndex()] == null){
@@ -188,7 +188,7 @@ private void updateInsertionData(final TreeSet<VersionedInsertionData>[] priorit
                     DependencyType dependencyType = dependencyTypes[unassignedJob.getIndex()];
                     if (dependencyType.equals(DependencyType.INTER_ROUTE) || dependencyType.equals(DependencyType.INTRA_ROUTE)) {
                         updatedAllRoutes = true;
-                        makeCallables(tasks, updatedAllRoutes, priorityQueues[unassignedJob.getIndex()], updateRound, unassignedJob, routes, lastModified);
+                        makeCallables(tasks, true, priorityQueues[unassignedJob.getIndex()], updateRound, unassignedJob, routes, lastModified);
                     } else {
                         makeCallables(tasks, updatedAllRoutes, priorityQueues[unassignedJob.getIndex()], updateRound, unassignedJob, routes, lastModified);
                     }
@@ -211,20 +211,10 @@ private void updateInsertionData(final TreeSet<VersionedInsertionData>[] priorit
 
     private void makeCallables(List<Callable<Boolean>> tasks, boolean updateAll, final TreeSet<VersionedInsertionData> priorityQueue, final int updateRound, final Job unassignedJob, final Collection<VehicleRoute> routes, final VehicleRoute lastModified) {
         if(updateAll) {
-            tasks.add(new Callable<Boolean>() {
-                @Override
-                public Boolean call() throws Exception {
-                    return InsertionDataUpdater.update(switchAllowed, initialVehicleIds, fleetManager, insertionCostsCalculator, priorityQueue, updateRound, unassignedJob, routes);
-                }
-            });
+            tasks.add(() -> InsertionDataUpdater.update(switchAllowed, initialVehicleIds, fleetManager, insertionCostsCalculator, priorityQueue, updateRound, unassignedJob, routes));
         }
         else {
-            tasks.add(new Callable<Boolean>() {
-                @Override
-                public Boolean call() throws Exception {
-                    return InsertionDataUpdater.update(switchAllowed, initialVehicleIds, fleetManager, insertionCostsCalculator, priorityQueue, updateRound, unassignedJob, Arrays.asList(lastModified));
-                }
-            });
+            tasks.add(() -> InsertionDataUpdater.update(switchAllowed, initialVehicleIds, fleetManager, insertionCostsCalculator, priorityQueue, updateRound, unassignedJob, Arrays.asList(lastModified)));
         }
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ServiceInsertionCalculator.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ServiceInsertionCalculator.java
index 6007decb6..1ed5a68b3 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ServiceInsertionCalculator.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ServiceInsertionCalculator.java
@@ -20,6 +20,7 @@
 import com.graphhopper.jsprit.core.problem.JobActivityFactory;
 import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
 import com.graphhopper.jsprit.core.problem.constraint.HardActivityConstraint.ConstraintsStatus;
+import com.graphhopper.jsprit.core.problem.constraint.HardConstraint;
 import com.graphhopper.jsprit.core.problem.constraint.SoftActivityConstraint;
 import com.graphhopper.jsprit.core.problem.constraint.SoftRouteConstraint;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingActivityCosts;
@@ -108,7 +109,7 @@ public InsertionData getInsertionData(final VehicleRoute currentRoute, final Job
         InsertionData noInsertion = checkRouteContraints(insertionContext, constraintManager);
         if (noInsertion != null) return noInsertion;
 
-        Collection<String> failedActivityConstraints = new ArrayList<>();
+        Collection<HardConstraint> failedActivityConstraints = new ArrayList<>();
 
         /*
         check soft constraints at route level
@@ -167,7 +168,9 @@ public InsertionData getInsertionData(final VehicleRoute currentRoute, final Job
         }
         if(insertionIndex == InsertionData.NO_INDEX) {
             InsertionData emptyInsertionData = new InsertionData.NoInsertionFound();
-            emptyInsertionData.getFailedConstraintNames().addAll(failedActivityConstraints);
+            for (HardConstraint c : failedActivityConstraints) {
+                emptyInsertionData.addFailedConstrainName(c.getClass().getSimpleName());
+            }
             return emptyInsertionData;
         }
         InsertionData insertionData = new InsertionData(bestCost, InsertionData.NO_INDEX, insertionIndex, newVehicle, newDriver);
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ShipmentInsertionCalculator.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ShipmentInsertionCalculator.java
index 9eb5967c9..d7b3eecd3 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ShipmentInsertionCalculator.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ShipmentInsertionCalculator.java
@@ -20,6 +20,7 @@
 import com.graphhopper.jsprit.core.problem.JobActivityFactory;
 import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
 import com.graphhopper.jsprit.core.problem.constraint.HardActivityConstraint.ConstraintsStatus;
+import com.graphhopper.jsprit.core.problem.constraint.HardConstraint;
 import com.graphhopper.jsprit.core.problem.constraint.SoftActivityConstraint;
 import com.graphhopper.jsprit.core.problem.constraint.SoftRouteConstraint;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingActivityCosts;
@@ -128,7 +129,7 @@ public InsertionData getInsertionData(final VehicleRoute currentRoute, final Job
         //pickupShipmentLoop
         List<TourActivity> activities = currentRoute.getTourActivities().getActivities();
 
-        List<String> failedActivityConstraints = new ArrayList<>();
+        List<HardConstraint> failedActivityConstraints = new ArrayList<>();
         while (!tourEnd) {
             TourActivity nextAct;
             if (i < activities.size()) {
@@ -228,7 +229,9 @@ else if (pickupShipmentConstraintStatus.equals(ConstraintsStatus.FULFILLED)) {
         }
         if (pickupInsertionIndex == InsertionData.NO_INDEX) {
             InsertionData emptyInsertionData = new InsertionData.NoInsertionFound();
-            emptyInsertionData.getFailedConstraintNames().addAll(failedActivityConstraints);
+            for (HardConstraint failed : failedActivityConstraints) {
+                emptyInsertionData.addFailedConstrainName(failed.getClass().getSimpleName());
+            }
             return emptyInsertionData;
         }
         InsertionData insertionData = new InsertionData(bestCost, pickupInsertionIndex, deliveryInsertionIndex, newVehicle, newDriver);
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ShipmentInsertionCalculatorFlex.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ShipmentInsertionCalculatorFlex.java
index b490b2462..8862481a9 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ShipmentInsertionCalculatorFlex.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ShipmentInsertionCalculatorFlex.java
@@ -20,6 +20,7 @@
 import com.graphhopper.jsprit.core.problem.JobActivityFactory;
 import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
 import com.graphhopper.jsprit.core.problem.constraint.HardActivityConstraint.ConstraintsStatus;
+import com.graphhopper.jsprit.core.problem.constraint.HardConstraint;
 import com.graphhopper.jsprit.core.problem.constraint.SoftActivityConstraint;
 import com.graphhopper.jsprit.core.problem.constraint.SoftRouteConstraint;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingActivityCosts;
@@ -146,7 +147,7 @@ public InsertionData getInsertionData(final VehicleRoute currentRoute, final Job
         //pickupShipmentLoop
         List<TourActivity> activities = currentRoute.getTourActivities().getActivities();
 
-        List<String> failedActivityConstraints = new ArrayList<>();
+        List<HardConstraint> failedActivityConstraints = new ArrayList<>();
         while (!tourEnd) {
             TourActivity nextAct;
             if (i < activities.size()) {
@@ -252,7 +253,9 @@ public InsertionData getInsertionData(final VehicleRoute currentRoute, final Job
 
         if (pickupInsertionIndex == InsertionData.NO_INDEX) {
             InsertionData emptyInsertionData = new InsertionData.NoInsertionFound();
-            emptyInsertionData.getFailedConstraintNames().addAll(failedActivityConstraints);
+            for (HardConstraint failed : failedActivityConstraints) {
+                emptyInsertionData.addFailedConstrainName(failed.getClass().getSimpleName());
+            }
             return emptyInsertionData;
         }
         InsertionData insertionData = new InsertionData(bestCost, pickupInsertionIndex, deliveryInsertionIndex, newVehicle, newDriver);
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/listener/InsertionEndsListener.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/listener/InsertionEndsListener.java
index c9cde4d64..96f3db200 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/listener/InsertionEndsListener.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/listener/InsertionEndsListener.java
@@ -17,6 +17,7 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate.listener;
 
+import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 
 import java.util.Collection;
@@ -24,5 +25,5 @@
 
 public interface InsertionEndsListener extends InsertionListener {
 
-    public void informInsertionEnds(Collection<VehicleRoute> vehicleRoutes);
+    void informInsertionEnds(Collection<VehicleRoute> vehicleRoutes, Collection<Job> badJobs);
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/listener/InsertionListeners.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/listener/InsertionListeners.java
index f0c5e9a8e..c791fd661 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/listener/InsertionListeners.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/listener/InsertionListeners.java
@@ -29,7 +29,7 @@
 
 public class InsertionListeners {
 
-    private Collection<InsertionListener> listeners = new ArrayList<InsertionListener>();
+    private Collection<InsertionListener> listeners = new ArrayList<>();
 
     public Collection<InsertionListener> getListeners() {
         return listeners;
@@ -67,10 +67,10 @@ public void informInsertionStarts(Collection<VehicleRoute> vehicleRoutes, Collec
         }
     }
 
-    public void informInsertionEndsListeners(Collection<VehicleRoute> vehicleRoutes) {
+    public void informInsertionEndsListeners(Collection<VehicleRoute> vehicleRoutes, Collection<Job> badJobs) {
         for (InsertionListener l : listeners) {
             if (l instanceof InsertionEndsListener) {
-                ((InsertionEndsListener) l).informInsertionEnds(vehicleRoutes);
+                ((InsertionEndsListener) l).informInsertionEnds(vehicleRoutes, badJobs);
             }
         }
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinWorst.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinWorst.java
index 620d1feda..10c5cc422 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinWorst.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinWorst.java
@@ -104,6 +104,10 @@ private Job getWorst(Collection<VehicleRoute> copied) {
             TourActivity actBefore = route.getStart();
             TourActivity actToEval = null;
             for (TourActivity act : route.getActivities()) {
+                if (!(act instanceof TourActivity.JobActivity)) {
+                    continue;
+                }
+
                 if (actToEval == null) {
                     actToEval = act;
                     continue;
@@ -119,6 +123,9 @@ private Job getWorst(Collection<VehicleRoute> copied) {
                 actBefore = actToEval;
                 actToEval = act;
             }
+            if (actToEval == null) {
+                continue;
+            }
             double savings = savings(route, actBefore, actToEval, route.getEnd());
             Job job = ((TourActivity.JobActivity) actToEval).getJob();
             if (!savingsMap.containsKey(job)) {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/StateManager.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/StateManager.java
index 9d9fbb63e..e2fffd55d 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/StateManager.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/StateManager.java
@@ -301,7 +301,7 @@ private ClassCastException getClassCastException(ClassCastException e, StateId s
      */
     @Override
     public <T> T getRouteState(VehicleRoute route, StateId stateId, Class<T> type) {
-        if (route.isEmpty()) return null;
+        if (route == null) return null;
         T state = null;
         if(isIndexedBased){
             try {
@@ -351,7 +351,7 @@ public boolean hasRouteState(VehicleRoute route, Vehicle vehicle, StateId stateI
      * @throws java.lang.IllegalStateException if <code>!route.isEmpty()</code> and <code>act(0).getIndex()==0</code> since this suggests that act has no index at all
      */
     public <T> T getRouteState(VehicleRoute route, Vehicle vehicle, StateId stateId, Class<T> type) {
-        if (route.isEmpty()) return null;
+//        if (route.isEmpty()) return null;
         T state = null;
         if(isIndexedBased){
             try {
@@ -458,7 +458,7 @@ public boolean hasRouteState(VehicleRoute route, Vehicle vehicle, StateId stateI
     }
 
     <T> void putTypedInternalRouteState(VehicleRoute route, StateId stateId, T state) {
-        if (route.isEmpty()) return;
+//        if (route.isEmpty()) return;
         if(isIndexedBased){
             routeStatesArr[route.getVehicle().getIndex()][stateId.getIndex()] = state;
         }
@@ -471,7 +471,7 @@ public boolean hasRouteState(VehicleRoute route, Vehicle vehicle, StateId stateI
     }
 
     <T> void putTypedInternalRouteState(VehicleRoute route, Vehicle vehicle, StateId stateId, T state) {
-        if (route.isEmpty()) return;
+//        if (route.isEmpty()) return;
         if(isIndexedBased){
             vehicleDependentRouteStatesArr[route.getVehicle().getIndex()][vehicle.getVehicleTypeIdentifier().getIndex()][stateId.getIndex()] = state;
         }
@@ -602,8 +602,8 @@ public void removed(Job job, VehicleRoute fromRoute) {
     }
 
     @Override
-    public void informInsertionEnds(Collection<VehicleRoute> vehicleRoutes) {
-        insertionListeners.informInsertionEndsListeners(vehicleRoutes);
+    public void informInsertionEnds(Collection<VehicleRoute> vehicleRoutes, Collection<Job> badJobs) {
+        insertionListeners.informInsertionEndsListeners(vehicleRoutes, badJobs);
     }
 
     /**
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyser.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyser.java
index e6cedd77b..cdb82f5c5 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyser.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyser.java
@@ -355,11 +355,11 @@ public void finish() {
 
     private static class DistanceUpdater implements StateUpdater, ActivityVisitor {
 
-        private StateId distance_id;
+        private StateId distanceId;
 
         private StateManager stateManager;
 
-        private double sum_distance = 0.;
+        private double sumDistance = 0.;
 
         private TransportDistance distanceCalculator;
 
@@ -367,15 +367,15 @@ public void finish() {
 
         private VehicleRoute route;
 
-        private DistanceUpdater(StateId distance_id, StateManager stateManager, TransportDistance distanceCalculator) {
-            this.distance_id = distance_id;
+        private DistanceUpdater(StateId distanceId, StateManager stateManager, TransportDistance distanceCalculator) {
+            this.distanceId = distanceId;
             this.stateManager = stateManager;
             this.distanceCalculator = distanceCalculator;
         }
 
         @Override
         public void begin(VehicleRoute route) {
-            sum_distance = 0.;
+            sumDistance = 0.;
             this.route = route;
             this.prevAct = route.getStart();
         }
@@ -383,16 +383,16 @@ public void begin(VehicleRoute route) {
         @Override
         public void visit(TourActivity activity) {
             double distance = distanceCalculator.getDistance(prevAct.getLocation(), activity.getLocation(), prevAct.getEndTime(), route.getVehicle());
-            sum_distance += distance;
-            stateManager.putActivityState(activity, distance_id, sum_distance);
+            sumDistance += distance;
+            stateManager.putActivityState(activity, distanceId, sumDistance);
             prevAct = activity;
         }
 
         @Override
         public void finish() {
             double distance = distanceCalculator.getDistance(prevAct.getLocation(), route.getEnd().getLocation(),prevAct.getEndTime(), route.getVehicle());
-            sum_distance += distance;
-            stateManager.putRouteState(route, distance_id, sum_distance);
+            sumDistance += distance;
+            stateManager.putRouteState(route, distanceId, sumDistance);
         }
     }
 
@@ -446,27 +446,27 @@ public void finish() {
 
     private TransportDistance distanceCalculator;
 
-    private StateId waiting_time_id;
+    private StateId waitingTimeId;
 
-    private StateId transport_time_id;
+    private StateId transportTimeId;
 
-    private StateId service_time_id;
+    private StateId serviceTimeId;
 
-    private StateId distance_id;
+    private StateId distanceId;
 
-    private StateId too_late_id;
+    private StateId tooLateId;
 
-    private StateId shipment_id;
+    private StateId shipmentId;
 
-    private StateId backhaul_id;
+    private StateId backhaulId;
 
-    private StateId skill_id;
+    private StateId skillId;
 
-    private StateId last_transport_distance_id;
+    private StateId lastTransportDistanceId;
 
-    private StateId last_transport_time_id;
+    private StateId lastTransportTimeId;
 
-    private StateId last_transport_cost_id;
+    private StateId lastTransportCostId;
 
 
     private ActivityTimeTracker.ActivityPolicy activityPolicy;
@@ -533,24 +533,24 @@ private void initialise() {
         activityPolicy = ActivityTimeTracker.ActivityPolicy.AS_SOON_AS_TIME_WINDOW_OPENS;
         this.stateManager.addStateUpdater(new UpdateActivityTimes(vrp.getTransportCosts(), activityPolicy, vrp.getActivityCosts()));
         this.stateManager.addStateUpdater(new UpdateVariableCosts(vrp.getActivityCosts(), vrp.getTransportCosts(), stateManager));
-        waiting_time_id = stateManager.createStateId("waiting-time");
-        transport_time_id = stateManager.createStateId("transport-time");
-        service_time_id = stateManager.createStateId("service-time");
-        distance_id = stateManager.createStateId("distance");
-        too_late_id = stateManager.createStateId("too-late");
-        shipment_id = stateManager.createStateId("shipment");
-        backhaul_id = stateManager.createStateId("backhaul");
-        skill_id = stateManager.createStateId("skills-violated");
-        last_transport_cost_id = stateManager.createStateId("last-transport-cost");
-        last_transport_distance_id = stateManager.createStateId("last-transport-distance");
-        last_transport_time_id = stateManager.createStateId("last-transport-time");
-
-        stateManager.addStateUpdater(new SumUpActivityTimes(waiting_time_id, transport_time_id, service_time_id, too_late_id, stateManager, activityPolicy, vrp.getActivityCosts()));
-        stateManager.addStateUpdater(new DistanceUpdater(distance_id, stateManager, distanceCalculator));
-        stateManager.addStateUpdater(new BackhaulAndShipmentUpdater(backhaul_id, shipment_id, stateManager));
-        stateManager.addStateUpdater(new SkillUpdater(stateManager, skill_id));
+        waitingTimeId = stateManager.createStateId("waiting-time");
+        transportTimeId = stateManager.createStateId("transport-time");
+        serviceTimeId = stateManager.createStateId("service-time");
+        distanceId = stateManager.createStateId("distance");
+        tooLateId = stateManager.createStateId("too-late");
+        shipmentId = stateManager.createStateId("shipment");
+        backhaulId = stateManager.createStateId("backhaul");
+        skillId = stateManager.createStateId("skills-violated");
+        lastTransportCostId = stateManager.createStateId("last-transport-cost");
+        lastTransportDistanceId = stateManager.createStateId("last-transport-distance");
+        lastTransportTimeId = stateManager.createStateId("last-transport-time");
+
+        stateManager.addStateUpdater(new SumUpActivityTimes(waitingTimeId, transportTimeId, serviceTimeId, tooLateId, stateManager, activityPolicy, vrp.getActivityCosts()));
+        stateManager.addStateUpdater(new DistanceUpdater(distanceId, stateManager, distanceCalculator));
+        stateManager.addStateUpdater(new BackhaulAndShipmentUpdater(backhaulId, shipmentId, stateManager));
+        stateManager.addStateUpdater(new SkillUpdater(stateManager, skillId));
         stateManager.addStateUpdater(new LoadAndActivityCounter(stateManager));
-        stateManager.addStateUpdater(new LastTransportUpdater(stateManager, vrp.getTransportCosts(), distanceCalculator, last_transport_distance_id, last_transport_time_id, last_transport_cost_id));
+        stateManager.addStateUpdater(new LastTransportUpdater(stateManager, vrp.getTransportCosts(), distanceCalculator, lastTransportDistanceId, lastTransportTimeId, lastTransportCostId));
     }
 
 
@@ -779,7 +779,7 @@ public Capacity getCapacityViolationAfterActivity(TourActivity activity, Vehicle
      */
     public Double getTimeWindowViolation(VehicleRoute route) {
         if (route == null) throw new IllegalArgumentException("route is missing.");
-        return stateManager.getRouteState(route, too_late_id, Double.class);
+        return stateManager.getRouteState(route, tooLateId, Double.class);
     }
 
     /**
@@ -800,7 +800,7 @@ public Double getTimeWindowViolationAtActivity(TourActivity activity, VehicleRou
      */
     public Boolean hasSkillConstraintViolation(VehicleRoute route) {
         if (route == null) throw new IllegalArgumentException("route is missing.");
-        return stateManager.getRouteState(route, skill_id, Boolean.class);
+        return stateManager.getRouteState(route, skillId, Boolean.class);
     }
 
     /**
@@ -816,7 +816,7 @@ public Boolean hasSkillConstraintViolationAtActivity(TourActivity activity, Vehi
         if (activity instanceof Start) return false;
         if (activity instanceof End) return false;
         verifyThatRouteContainsAct(activity, route);
-        return stateManager.getActivityState(activity, skill_id, Boolean.class);
+        return stateManager.getActivityState(activity, skillId, Boolean.class);
     }
 
     /**
@@ -831,7 +831,7 @@ public Boolean hasSkillConstraintViolationAtActivity(TourActivity activity, Vehi
      */
     public Boolean hasBackhaulConstraintViolation(VehicleRoute route) {
         if (route == null) throw new IllegalArgumentException("route is missing.");
-        return stateManager.getRouteState(route, backhaul_id, Boolean.class);
+        return stateManager.getRouteState(route, backhaulId, Boolean.class);
     }
 
     /**
@@ -846,7 +846,7 @@ public Boolean hasBackhaulConstraintViolationAtActivity(TourActivity activity, V
         if (activity instanceof Start) return false;
         if (activity instanceof End) return false;
         verifyThatRouteContainsAct(activity, route);
-        return stateManager.getActivityState(activity, backhaul_id, Boolean.class);
+        return stateManager.getActivityState(activity, backhaulId, Boolean.class);
     }
 
     /**
@@ -859,7 +859,7 @@ public Boolean hasBackhaulConstraintViolationAtActivity(TourActivity activity, V
      */
     public Boolean hasShipmentConstraintViolation(VehicleRoute route) {
         if (route == null) throw new IllegalArgumentException("route is missing.");
-        return stateManager.getRouteState(route, shipment_id, Boolean.class);
+        return stateManager.getRouteState(route, shipmentId, Boolean.class);
     }
 
     /**
@@ -877,7 +877,7 @@ public Boolean hasShipmentConstraintViolationAtActivity(TourActivity activity, V
         if (activity instanceof Start) return false;
         if (activity instanceof End) return false;
         verifyThatRouteContainsAct(activity, route);
-        return stateManager.getActivityState(activity, shipment_id, Boolean.class);
+        return stateManager.getActivityState(activity, shipmentId, Boolean.class);
     }
 
 
@@ -897,7 +897,7 @@ public Double getOperationTime(VehicleRoute route) {
      */
     public Double getWaitingTime(VehicleRoute route) {
         if (route == null) throw new IllegalArgumentException("route is missing.");
-        return stateManager.getRouteState(route, waiting_time_id, Double.class);
+        return stateManager.getRouteState(route, waitingTimeId, Double.class);
     }
 
     /**
@@ -906,7 +906,7 @@ public Double getWaitingTime(VehicleRoute route) {
      */
     public Double getTransportTime(VehicleRoute route) {
         if (route == null) throw new IllegalArgumentException("route is missing.");
-        return stateManager.getRouteState(route, transport_time_id, Double.class);
+        return stateManager.getRouteState(route, transportTimeId, Double.class);
     }
 
     /**
@@ -915,7 +915,7 @@ public Double getTransportTime(VehicleRoute route) {
      */
     public Double getServiceTime(VehicleRoute route) {
         if (route == null) throw new IllegalArgumentException("route is missing.");
-        return stateManager.getRouteState(route, service_time_id, Double.class);
+        return stateManager.getRouteState(route, serviceTimeId, Double.class);
     }
 
     /**
@@ -965,7 +965,7 @@ public Double getTransportTimeAtActivity(TourActivity activity, VehicleRoute rou
         if (activity instanceof Start) return 0.;
         if (activity instanceof End) return getTransportTime(route);
         verifyThatRouteContainsAct(activity, route);
-        return stateManager.getActivityState(activity, transport_time_id, Double.class);
+        return stateManager.getActivityState(activity, transportTimeId, Double.class);
     }
 
     /**
@@ -974,7 +974,7 @@ public Double getTransportTimeAtActivity(TourActivity activity, VehicleRoute rou
      * @return The transport time from the previous activity to this one.
      */
     public Double getLastTransportTimeAtActivity(TourActivity activity, VehicleRoute route) {
-        return getLastTransport(activity, route, last_transport_time_id);
+        return getLastTransport(activity, route, lastTransportTimeId);
     }
 
     /**
@@ -983,7 +983,7 @@ public Double getLastTransportTimeAtActivity(TourActivity activity, VehicleRoute
      * @return The transport distance from the previous activity to this one.
      */
     public Double getLastTransportDistanceAtActivity(TourActivity activity, VehicleRoute route) {
-        return getLastTransport(activity, route, last_transport_distance_id);
+        return getLastTransport(activity, route, lastTransportDistanceId);
     }
 
     /**
@@ -992,7 +992,7 @@ public Double getLastTransportDistanceAtActivity(TourActivity activity, VehicleR
      * @return The transport cost from the previous activity to this one.
      */
     public Double getLastTransportCostAtActivity(TourActivity activity, VehicleRoute route) {
-        return getLastTransport(activity, route, last_transport_cost_id);
+        return getLastTransport(activity, route, lastTransportCostId);
     }
 
 
@@ -1026,7 +1026,7 @@ public Double getWaitingTimeAtActivity(TourActivity activity, VehicleRoute route
      */
     public Double getDistance(VehicleRoute route) {
         if (route == null) throw new IllegalArgumentException("route is missing.");
-        return stateManager.getRouteState(route, distance_id, Double.class);
+        return stateManager.getRouteState(route, distanceId, Double.class);
     }
 
     /**
@@ -1039,7 +1039,7 @@ public Double getDistanceAtActivity(TourActivity activity, VehicleRoute route) {
         if (activity instanceof Start) return 0.;
         if (activity instanceof End) return getDistance(route);
         verifyThatRouteContainsAct(activity, route);
-        return stateManager.getActivityState(activity, distance_id, Double.class);
+        return stateManager.getActivityState(activity, distanceId, Double.class);
     }
 
     /**
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/Capacity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/Capacity.java
index 0017d21ab..094398f0c 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/Capacity.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/Capacity.java
@@ -171,9 +171,7 @@ public Builder addDimension(int index, int dimValue) {
         }
 
         private void copy(int[] from, int[] to) {
-            for (int i = 0; i < dimensions.length; i++) {
-                to[i] = from[i];
-            }
+            System.arraycopy(from, 0, to, 0, dimensions.length);
         }
 
         /**
@@ -195,7 +193,7 @@ public Capacity build() {
      *
      * @param capacity capacity to be copied
      */
-    Capacity(Capacity capacity) {
+    private Capacity(Capacity capacity) {
         this.dimensions = new int[capacity.getNuOfDimensions()];
         for (int i = 0; i < capacity.getNuOfDimensions(); i++) {
             this.dimensions[i] = capacity.get(i);
@@ -261,11 +259,11 @@ public boolean isGreaterOrEqual(Capacity toCompare) {
 
     @Override
     public String toString() {
-        String string = "[noDimensions=" + getNuOfDimensions() + "]";
+        StringBuilder string = new StringBuilder("[noDimensions=" + getNuOfDimensions() + "]");
         for (int i = 0; i < getNuOfDimensions(); i++) {
-            string += "[[dimIndex=" + i + "][dimValue=" + dimensions[i] + "]]";
+            string.append("[[dimIndex=").append(i).append("][dimValue=").append(dimensions[i]).append("]]");
         }
-        return string;
+        return string.toString();
     }
 
     /**
@@ -300,9 +298,7 @@ public boolean equals(Object o) {
 
         Capacity capacity = (Capacity) o;
 
-        if (!Arrays.equals(dimensions, capacity.dimensions)) return false;
-
-        return true;
+        return Arrays.equals(dimensions, capacity.dimensions);
     }
 
     @Override
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/HasId.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/HasId.java
index 8c4b63518..74e7f842a 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/HasId.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/HasId.java
@@ -23,6 +23,6 @@
  */
 public interface HasId {
 
-    public String getId();
+    String getId();
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/HasIndex.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/HasIndex.java
index f8830cb83..edbfc922b 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/HasIndex.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/HasIndex.java
@@ -23,6 +23,6 @@
  */
 public interface HasIndex {
 
-    public int getIndex();
+    int getIndex();
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/JobActivityFactory.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/JobActivityFactory.java
index 8ee69533d..3911f6b73 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/JobActivityFactory.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/JobActivityFactory.java
@@ -27,6 +27,6 @@
  */
 public interface JobActivityFactory {
 
-    public List<AbstractActivity> createActivities(Job job);
+    List<AbstractActivity> createActivities(Job job);
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/Location.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/Location.java
index 51c74612c..d15bf4e4f 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/Location.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/Location.java
@@ -49,8 +49,8 @@ public static Location newInstance(String id) {
     /**
      * Factory method (and shortcut) for creating location object just with location index
      *
-     * @param index
-     * @return
+     * @param index of location
+     * @return this builder
      */
     public static Location newInstance(int index) {
         return Location.Builder.newInstance().setIndex(index).build();
@@ -92,7 +92,7 @@ public Builder setUserData(Object userData) {
         /**
          * Sets location index
          *
-         * @param index
+         * @param index location index
          * @return the builder
          */
         public Builder setIndex(int index) {
@@ -104,8 +104,8 @@ public Builder setIndex(int index) {
         /**
          * Sets coordinate of location
          *
-         * @param coordinate
-         * @return
+         * @param coordinate of location
+         * @return this Builder
          */
         public Builder setCoordinate(Coordinate coordinate) {
             this.coordinate = coordinate;
@@ -115,8 +115,8 @@ public Builder setCoordinate(Coordinate coordinate) {
         /**
          * Sets location id
          *
-         * @param id
-         * @return
+         * @param id id of location
+         * @return this Builder
          */
         public Builder setId(String id) {
             this.id = id;
@@ -126,8 +126,8 @@ public Builder setId(String id) {
         /**
          * Adds name, e.g. street name, to location
          *
-         * @param name
-         * @return
+         * @param name name of location
+         * @return this Builder
          */
         public Builder setName(String name) {
             this.name = name;
@@ -198,14 +198,10 @@ public String getName() {
     public boolean equals(Object o) {
         if (this == o) return true;
         if (!(o instanceof Location)) return false;
-
         Location location = (Location) o;
-
         if (index != location.index) return false;
         if (coordinate != null ? !coordinate.equals(location.coordinate) : location.coordinate != null) return false;
-        if (id != null ? !id.equals(location.id) : location.id != null) return false;
-
-        return true;
+        return id != null ? id.equals(location.id) : location.id == null;
     }
 
     @Override
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/Skills.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/Skills.java
index ddc7df8e0..f52831fcc 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/Skills.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/Skills.java
@@ -39,7 +39,7 @@ public static Builder newInstance() {
             return new Builder();
         }
 
-        private Set<String> skills = new HashSet<String>();
+        private Set<String> skills = new HashSet<>();
 
         /**
          * Adds skill. Skill is transformed into lowerCase.
@@ -74,7 +74,7 @@ public Skills build() {
 
     }
 
-    private Set<String> skills = new HashSet<String>();
+    private Set<String> skills = new HashSet<>();
 
     private Skills(Builder builder) {
         skills.addAll(builder.skills);
@@ -90,16 +90,16 @@ private Skills(Builder builder) {
     }
 
     public String toString() {
-        String s = "[";
+        StringBuilder s = new StringBuilder("[");
         boolean first = true;
         for (String skill : values()) {
             if (first) {
-                s += skill;
+                s.append(skill);
                 first = false;
-            } else s += ", " + skill;
+            } else s.append(", ").append(skill);
         }
-        s += "]";
-        return s;
+        s.append("]");
+        return s.toString();
     }
 
     /**
@@ -119,9 +119,7 @@ public boolean equals(Object o) {
 
         Skills skills1 = (Skills) o;
 
-        if (skills != null ? !skills.equals(skills1.skills) : skills1.skills != null) return false;
-
-        return true;
+        return skills != null ? skills.equals(skills1.skills) : skills1.skills == null;
     }
 
     @Override
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblem.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblem.java
index fa6afae5b..c688ce9c7 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblem.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblem.java
@@ -157,14 +157,7 @@ private void incVehicleTypeIdIndexCounter() {
          * @return locations
          */
         public Locations getLocations() {
-            return new Locations() {
-
-                @Override
-                public Coordinate getCoord(String id) {
-                    return tentative_coordinates.get(id);
-                }
-
-            };
+            return id -> tentative_coordinates.get(id);
         }
 
         /**
@@ -421,6 +414,17 @@ public Builder setActivityCosts(VehicleRoutingActivityCosts activityCosts) {
             return this;
         }
 
+        private final List<AbstractActivity> nonJobActivities = new ArrayList<>();
+
+        public Builder addNonJobActivities(Collection<? extends AbstractActivity> nonJobActivities) {
+            for (AbstractActivity act : nonJobActivities) {
+                act.setIndex(activityIndexCounter);
+                incActivityIndexCounter();
+                this.nonJobActivities.add(act);
+            }
+            return this;
+        }
+
         /**
          * Builds the {@link VehicleRoutingProblem}.
          * <p>
@@ -513,7 +517,6 @@ public Builder addAllVehicles(Collection<? extends Vehicle> vehicles) {
         }
 
         private Builder addService(Service service) {
-//            tentative_coordinates.put(service.getLocation().getId(), service.getLocation().getCoordinate());
             addLocationToTentativeLocations(service);
             if (jobs.containsKey(service.getId())) {
                 logger.warn("The service " + service + " has already been added to job list. This overrides existing job.");
@@ -579,14 +582,7 @@ private Builder addService(Service service) {
 
     private int nuActivities;
 
-    private final JobActivityFactory jobActivityFactory = new JobActivityFactory() {
-
-        @Override
-        public List<AbstractActivity> createActivities(Job job) {
-            return copyAndGetActivities(job);
-        }
-
-    };
+    private final JobActivityFactory jobActivityFactory = job -> copyAndGetActivities(job);
 
     private VehicleRoutingProblem(Builder builder) {
         this.jobs = builder.jobs;
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/MaxDistanceConstraint.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/MaxDistanceConstraint.java
index bb88358b1..bf2d8800a 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/MaxDistanceConstraint.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/MaxDistanceConstraint.java
@@ -78,8 +78,8 @@ public ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prev
         double maxDistance = getMaxDistance(iFacts.getNewVehicle());
         if (currentDistance > maxDistance) return ConstraintsStatus.NOT_FULFILLED_BREAK;
 
-        double distancePrevAct2NewAct = distanceCalculator.getDistance(prevAct.getLocation(), newAct.getLocation(), iFacts.getNewDepTime(), iFacts.getNewVehicle());
-        double distanceNewAct2nextAct = distanceCalculator.getDistance(newAct.getLocation(), nextAct.getLocation(), iFacts.getNewDepTime(), iFacts.getNewVehicle());
+        double distancePrevAct2NewAct = distanceCalculator.getDistance(prevAct.getLocation(), newAct.getLocation(), prevActDepTime, iFacts.getNewVehicle());
+        double distanceNewAct2nextAct = distanceCalculator.getDistance(newAct.getLocation(), nextAct.getLocation(), prevActDepTime, iFacts.getNewVehicle());
         double distancePrevAct2NextAct = distanceCalculator.getDistance(prevAct.getLocation(), nextAct.getLocation(), prevActDepTime, iFacts.getNewVehicle());
         if (prevAct instanceof Start && nextAct instanceof End) distancePrevAct2NextAct = 0;
         if (nextAct instanceof End && !iFacts.getNewVehicle().isReturnToDepot()) {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Job.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Job.java
index 76b65084d..66146d500 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Job.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Job.java
@@ -55,9 +55,9 @@
     public String getName();
 
     /**
-     * Get priority of job. Only 1 = high priority, 2 = medium and 3 = low are allowed.
+     * Get priority of job. Only 1 (very high) to 10 (very low) are allowed.
      * <p>
-     * Default is 2 = medium.
+     * Default is 2.
      *
      * @return priority
      */
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java
index 99608c233..f9be6a4c7 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java
@@ -398,9 +398,9 @@ public String getName() {
     }
 
     /**
-     * Get priority of service. Only 1 = high priority, 2 = medium and 3 = low are allowed.
+     * Get priority of service. Only 1 (high) to 10 (low) are allowed.
      * <p>
-     * Default is 2 = medium.
+     * Default is 2.
      *
      * @return priority
      */
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java
index 8d356a020..0af407c2b 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java
@@ -318,7 +318,7 @@ public Builder addAllPickupTimeWindows(Collection<TimeWindow> timeWindow) {
         /**
          * Set priority to shipment. Only 1 (high) to 10 (low) are allowed.
          * <p>
-         * Default is 2 = medium.
+         * Default is 2.
          *
          * @param priority
          * @return builder
@@ -505,9 +505,9 @@ public String getName() {
     }
 
     /**
-     * Get priority of shipment. Only 1 = high priority, 2 = medium and 3 = low are allowed.
+     * Get priority of shipment. Only 1 (high) to 10 (low) are allowed.
      * <p>
-     * Default is 2 = medium.
+     * Default is 2.
      *
      * @return priority
      */
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRoute.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRoute.java
index 40fe59075..ee14a75f5 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRoute.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRoute.java
@@ -367,7 +367,7 @@ private VehicleRoute(Builder builder) {
      * @return list of tourActivities
      */
     public List<TourActivity> getActivities() {
-        return Collections.unmodifiableList(tourActivities.getActivities());
+        return tourActivities.getActivities();
     }
 
     /**
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivity.java
index cb37c9fc8..1106dc04f 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivity.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivity.java
@@ -25,8 +25,6 @@
 
 public class BreakActivity extends AbstractActivity implements TourActivity.JobActivity {
 
-    public static int counter = 0;
-
     public double arrTime;
 
     public double endTime;
@@ -78,13 +76,11 @@ public static BreakActivity newInstance(Break aBreak) {
     private double latest = Double.MAX_VALUE;
 
     protected BreakActivity(Break aBreak) {
-        counter++;
         this.aBreak = aBreak;
         this.duration = aBreak.getServiceDuration();
     }
 
     protected BreakActivity(BreakActivity breakActivity) {
-        counter++;
         this.aBreak = (Break) breakActivity.getJob();
         this.arrTime = breakActivity.getArrTime();
         this.endTime = breakActivity.getEndTime();
@@ -96,37 +92,6 @@ protected BreakActivity(BreakActivity breakActivity) {
     }
 
 
-    /* (non-Javadoc)
-     * @see java.lang.Object#hashCode()
-     */
-    @Override
-    public int hashCode() {
-        final int prime = 31;
-        int result = 1;
-        result = prime * result + ((aBreak == null) ? 0 : aBreak.hashCode());
-        return result;
-    }
-
-    /* (non-Javadoc)
-     * @see java.lang.Object#equals(java.lang.Object)
-     */
-    @Override
-    public boolean equals(Object obj) {
-        if (this == obj)
-            return true;
-        if (obj == null)
-            return false;
-        if (getClass() != obj.getClass())
-            return false;
-        BreakActivity other = (BreakActivity) obj;
-        if (aBreak == null) {
-            if (other.aBreak != null)
-                return false;
-        } else if (!aBreak.equals(other.aBreak))
-            return false;
-        return true;
-    }
-
     public double getTheoreticalEarliestOperationStartTime() {
         return earliest;
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/FiniteFleetManagerFactory.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/FiniteFleetManagerFactory.java
index c9c2fe73a..50ef18f69 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/FiniteFleetManagerFactory.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/FiniteFleetManagerFactory.java
@@ -17,10 +17,7 @@
  */
 package com.graphhopper.jsprit.core.problem.vehicle;
 
-import com.graphhopper.jsprit.core.util.RandomNumberGeneration;
-
 import java.util.Collection;
-import java.util.Random;
 
 /**
  * Factory that creates a finite fleetmanager.
@@ -31,8 +28,6 @@
 
     private Collection<Vehicle> vehicles;
 
-    private Random random = RandomNumberGeneration.getRandom();
-
     /**
      * Constucts the factory.
      *
@@ -43,10 +38,6 @@ public FiniteFleetManagerFactory(Collection<Vehicle> vehicles) {
         this.vehicles = vehicles;
     }
 
-    public void setRandom(Random random) {
-        this.random = random;
-    }
-
     /**
      * Creates the finite fleetmanager.
      *
@@ -58,7 +49,6 @@ public VehicleFleetManager createFleetManager() {
         if (vehicles == null) throw new IllegalStateException("vehicles is null. this must not be.");
         if (vehicles.isEmpty()) throw new IllegalStateException("vehicle-collection is empty. this must not be");
         VehicleFleetManagerImpl vehicleFleetManager = new VehicleFleetManagerImpl(vehicles);
-        vehicleFleetManager.setRandom(random);
         vehicleFleetManager.init();
         return vehicleFleetManager;
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/InfiniteFleetManagerFactory.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/InfiniteFleetManagerFactory.java
index 46d4e9d6b..93269fbb7 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/InfiniteFleetManagerFactory.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/InfiniteFleetManagerFactory.java
@@ -32,7 +32,7 @@
     /**
      * Constructs the factory.
      *
-     * @param vehicles
+     * @param vehicles that are used to initialize the fleet manager
      */
     public InfiniteFleetManagerFactory(Collection<Vehicle> vehicles) {
         super();
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/InfiniteVehicles.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/InfiniteVehicles.java
index 5fbdb93c1..bd67b1736 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/InfiniteVehicles.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/InfiniteVehicles.java
@@ -34,11 +34,10 @@
 
     private static Logger logger = LoggerFactory.getLogger(InfiniteVehicles.class);
 
-    private Map<VehicleTypeKey, Vehicle> types = new HashMap<VehicleTypeKey, Vehicle>();
+    private Map<VehicleTypeKey, Vehicle> types = new HashMap<>();
 
-//	private List<VehicleTypeKey> sortedTypes = new ArrayList<VehicleTypeKey>();
 
-    public InfiniteVehicles(Collection<Vehicle> vehicles) {
+    InfiniteVehicles(Collection<Vehicle> vehicles) {
         extractTypes(vehicles);
         logger.debug("initialise " + this);
     }
@@ -85,7 +84,7 @@ public void unlockAll() {
 
     @Override
     public Collection<Vehicle> getAvailableVehicles(Vehicle withoutThisType) {
-        Collection<Vehicle> vehicles = new ArrayList<Vehicle>();
+        Collection<Vehicle> vehicles = new ArrayList<>();
         VehicleTypeKey thisKey = new VehicleTypeKey(withoutThisType.getType().getTypeId(), withoutThisType.getStartLocation().getId(), withoutThisType.getEndLocation().getId(), withoutThisType.getEarliestDeparture(), withoutThisType.getLatestArrival(), withoutThisType.getSkills(), withoutThisType.isReturnToDepot());
         for (VehicleTypeKey key : types.keySet()) {
             if (!key.equals(thisKey)) {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/Vehicle.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/Vehicle.java
index 6d430655c..927ace885 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/Vehicle.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/Vehicle.java
@@ -35,50 +35,50 @@
      *
      * @return earliest departure time
      */
-    public abstract double getEarliestDeparture();
+    double getEarliestDeparture();
 
     /**
      * Returns the latest arrival time at this vehicle's end-location which should be the upper bound of this vehicle's arrival times at end-location.
      *
      * @return latest arrival time of this vehicle
      */
-    public abstract double getLatestArrival();
+    double getLatestArrival();
 
     /**
      * Returns the {@link VehicleType} of this vehicle.
      *
      * @return {@link VehicleType} of this vehicle
      */
-    public abstract VehicleType getType();
+    VehicleType getType();
 
     /**
      * Returns the id of this vehicle.
      *
      * @return id
      */
-    public abstract String getId();
+    String getId();
 
     /**
      * Returns true if vehicle returns to depot, false otherwise.
      *
      * @return true if isReturnToDepot
      */
-    public abstract boolean isReturnToDepot();
+    boolean isReturnToDepot();
 
-    public abstract Location getStartLocation();
+    Location getStartLocation();
 
-    public abstract Location getEndLocation();
+    Location getEndLocation();
 
-    public abstract VehicleTypeKey getVehicleTypeIdentifier();
+    VehicleTypeKey getVehicleTypeIdentifier();
 
-    public abstract Skills getSkills();
+    Skills getSkills();
 
     /**
      * @return User-specific domain data associated with the vehicle
      */
-    public Object getUserData();
+    Object getUserData();
 
-    public abstract Break getBreak();
+    Break getBreak();
     // Switch to this as soon as we switct to Java 8:
     // default Object getUserData() {
     // return null;
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleFleetManager.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleFleetManager.java
index b6861c9b2..ccbca7598 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleFleetManager.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleFleetManager.java
@@ -27,31 +27,31 @@
      * <p>
      * <p>This indicates that this vehicle is being used. Thus it is not in list of available vehicles.
      *
-     * @param vehicle
+     * @param vehicle to lock
      */
-    public abstract void lock(Vehicle vehicle);
+    void lock(Vehicle vehicle);
 
     /**
      * Unlocks vehicle.
      * <p>
      * <p>This indicates that this vehicle is not being used anymore. Thus it is in list of available vehicles.
      *
-     * @param vehicle
+     * @param vehicle to unlock
      */
-    public abstract void unlock(Vehicle vehicle);
+    void unlock(Vehicle vehicle);
 
     /**
      * Returns true if locked.
      *
-     * @param vehicle
-     * @return
+     * @param vehicle vehicle to lock
+     * @return true if locked
      */
-    public abstract boolean isLocked(Vehicle vehicle);
+    boolean isLocked(Vehicle vehicle);
 
     /**
      * Unlocks all locked vehicles.
      */
-    public abstract void unlockAll();
+    void unlockAll();
 
     /**
      * Returns a collection of available vehicles.
@@ -61,11 +61,11 @@
      * This is to avoid returning too many vehicles that are basically equal.
      * <p>Look at {@link VehicleTypeKey} to figure out whether two vehicles are equal or not.
      *
-     * @return
+     * @return collection of available vehicles
      */
-    public abstract Collection<Vehicle> getAvailableVehicles();
+    Collection<Vehicle> getAvailableVehicles();
 
-    public Collection<Vehicle> getAvailableVehicles(Vehicle withoutThisType);
+    Collection<Vehicle> getAvailableVehicles(Vehicle withoutThisType);
 
-    public Vehicle getAvailableVehicle(VehicleTypeKey vehicleTypeIdentifier);
+    Vehicle getAvailableVehicle(VehicleTypeKey vehicleTypeIdentifier);
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleFleetManagerFactory.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleFleetManagerFactory.java
index f5e4525ea..7bfe691f2 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleFleetManagerFactory.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleFleetManagerFactory.java
@@ -19,6 +19,6 @@
 
 public interface VehicleFleetManagerFactory {
 
-    public VehicleFleetManager createFleetManager();
+    VehicleFleetManager createFleetManager();
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleFleetManagerImpl.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleFleetManagerImpl.java
index 5741594aa..34c91b819 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleFleetManagerImpl.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleFleetManagerImpl.java
@@ -23,7 +23,6 @@
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
-import java.util.Random;
 
 
 class VehicleFleetManagerImpl implements VehicleFleetManager {
@@ -40,7 +39,7 @@ public VehicleFleetManagerImpl newInstance(Collection<Vehicle> vehicles) {
 
         TypeContainer() {
             super();
-            vehicleList = new ArrayList<Vehicle>();
+            vehicleList = new ArrayList<>();
         }
 
         void add(Vehicle vehicle) {
@@ -56,8 +55,7 @@ void remove(Vehicle vehicle) {
 
         Vehicle getVehicle() {
             if(index >= vehicleList.size()) index = 0;
-            Vehicle vehicle = vehicleList.get(index);
-            return vehicle;
+            return vehicleList.get(index);
         }
 
         void incIndex(){
@@ -80,8 +78,6 @@ boolean isEmpty() {
 
     private Vehicle[] vehicleArr;
 
-    private Random random;
-
     VehicleFleetManagerImpl(Collection<Vehicle> vehicles) {
         super();
         this.vehicles = vehicles;
@@ -90,10 +86,6 @@ boolean isEmpty() {
         vehicleArr = new Vehicle[arrSize];
     }
 
-    void setRandom(Random random) {
-        this.random = random;
-    }
-
     void init(){
         initializeVehicleTypes();
         logger.debug("initialise {}",this);
@@ -142,10 +134,10 @@ private void removeVehicle(Vehicle v) {
      */
     @Override
     public Collection<Vehicle> getAvailableVehicles() {
-        List<Vehicle> vehicles = new ArrayList<Vehicle>();
-        for(int i=0;i< vehicleTypes.length;i++){
-            if(!vehicleTypes[i].isEmpty()){
-                vehicles.add(vehicleTypes[i].getVehicle());
+        List<Vehicle> vehicles = new ArrayList<>();
+        for (TypeContainer vehicleType : vehicleTypes) {
+            if (!vehicleType.isEmpty()) {
+                vehicles.add(vehicleType.getVehicle());
             }
         }
         return vehicles;
@@ -153,7 +145,7 @@ private void removeVehicle(Vehicle v) {
 
     @Override
     public Collection<Vehicle> getAvailableVehicles(Vehicle withoutThisType) {
-        List<Vehicle> vehicles = new ArrayList<Vehicle>();
+        List<Vehicle> vehicles = new ArrayList<>();
         for(int i=0;i< vehicleTypes.length;i++){
             if(!vehicleTypes[i].isEmpty() && i != withoutThisType.getVehicleTypeIdentifier().getIndex()){
                 vehicles.add(vehicleTypes[i].getVehicle());
@@ -218,8 +210,8 @@ public void unlockAll() {
                 unlock(vehicleArr[i]);
             }
         }
-        for(int i=0;i<vehicleTypes.length;i++){
-            vehicleTypes[i].incIndex();
+        for (TypeContainer vehicleType : vehicleTypes) {
+            vehicleType.incIndex();
         }
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleImpl.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleImpl.java
index 0731abf21..198934256 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleImpl.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleImpl.java
@@ -21,8 +21,6 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.Skills;
 import com.graphhopper.jsprit.core.problem.job.Break;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 
 import java.util.Collection;
 
@@ -48,9 +46,6 @@
 
         private VehicleType type = VehicleTypeImpl.Builder.newInstance("noType").build();
 
-        public NoVehicle() {
-        }
-
         @Override
         public double getEarliestDeparture() {
             return 0;
@@ -110,8 +105,6 @@ public Break getBreak() {
      */
     public static class Builder {
 
-        static final Logger log = LoggerFactory.getLogger(Builder.class.getName());
-
         private String id;
 
         private double earliestStart = 0.0;
@@ -140,6 +133,24 @@ private Builder(String id) {
             if (id == null) throw new IllegalArgumentException("Vehicle id must not be null.");
         }
 
+        /**
+         * This can be used to initialize the new vehicle (to be built) with another vehicle.
+         *
+         * @param baseVehicle vehicle to build from
+         */
+        private Builder(Vehicle baseVehicle) {
+            this.id = baseVehicle.getId();
+            this.earliestStart = baseVehicle.getEarliestDeparture();
+            this.latestArrival = baseVehicle.getLatestArrival();
+            this.returnToDepot = baseVehicle.isReturnToDepot();
+            this.type = baseVehicle.getType();
+            this.skills = baseVehicle.getSkills();
+            this.startLocation = baseVehicle.getStartLocation();
+            this.endLocation = baseVehicle.getEndLocation();
+            this.aBreak = baseVehicle.getBreak();
+            this.userData = baseVehicle.getUserData();
+        }
+
         /**
          * Sets the {@link VehicleType}.<br>
          *
@@ -291,6 +302,16 @@ public static Builder newInstance(String vehicleId) {
             return new Builder(vehicleId);
         }
 
+        /**
+         * Returns new instance of vehicle builder and initializes every attribute with a attributes of baseVehicle
+         *
+         * @param baseVehicle base vehicle that is used to initialize the vehicle builder
+         * @return this builder
+         */
+        public static Builder newInstance(Vehicle baseVehicle) {
+            return new Builder(baseVehicle);
+        }
+
         public Builder addSkills(Skills skills) {
             this.skillBuilder.addAllSkills(skills.values());
             return this;
@@ -302,6 +323,16 @@ public Builder setBreak(Break aBreak) {
         }
     }
 
+    /**
+     * Returns a simple copy of vehicle.
+     *
+     * @param vehicle to copy
+     * @return copied vehicle
+     */
+    public static Vehicle copyOf(Vehicle vehicle) {
+        return VehicleImpl.Builder.newInstance(vehicle).build();
+    }
+
     /**
      * Returns empty/noVehicle which is a vehicle having no capacity, no type and no reasonable id.
      * <p>
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleType.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleType.java
index e2eee81d4..753254561 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleType.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleType.java
@@ -31,38 +31,34 @@
      *
      * @return typeId
      */
-    public String getTypeId();
+    String getTypeId();
 
     /**
      * Returns capacity dimensions.
      *
      * @return {@link com.graphhopper.jsprit.core.problem.Capacity}
      */
-    public Capacity getCapacityDimensions();
+    Capacity getCapacityDimensions();
 
     /**
      * Returns maximum velocity of this vehicle-type.
      *
      * @return max velocity
      */
-    public double getMaxVelocity();
+    double getMaxVelocity();
 
     /**
      * Return the cost-parameter of this vehicle-type.
      *
      * @return parameter
      */
-    public VehicleTypeImpl.VehicleCostParams getVehicleCostParams();
+    VehicleTypeImpl.VehicleCostParams getVehicleCostParams();
 
-    public String getProfile();
+    String getProfile();
 
     /**
      * @return User-specific domain data associated with the vehicle type
      */
-    public Object getUserData();
+    Object getUserData();
 
-    // Switch to this as soon as we switct to Java 8:
-    // default Object getUserData() {
-    // return null;
-    // };
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleTypeImpl.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleTypeImpl.java
index 931d61870..f4279a933 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleTypeImpl.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleTypeImpl.java
@@ -42,8 +42,7 @@
         }
 
         public final double fix;
-        @Deprecated
-        public final double perTimeUnit;
+
         public final double perTransportTimeUnit;
         public final double perDistanceUnit;
         public final double perWaitingTimeUnit;
@@ -52,7 +51,6 @@
         private VehicleCostParams(double fix, double perTimeUnit, double perDistanceUnit) {
             super();
             this.fix = fix;
-            this.perTimeUnit = perTimeUnit;
             this.perTransportTimeUnit = perTimeUnit;
             this.perDistanceUnit = perDistanceUnit;
             this.perWaitingTimeUnit = 0.;
@@ -61,7 +59,6 @@ private VehicleCostParams(double fix, double perTimeUnit, double perDistanceUnit
 
         public VehicleCostParams(double fix, double perTimeUnit, double perDistanceUnit, double perWaitingTimeUnit) {
             this.fix = fix;
-            this.perTimeUnit = perTimeUnit;
             this.perTransportTimeUnit = perTimeUnit;
             this.perDistanceUnit = perDistanceUnit;
             this.perWaitingTimeUnit = perWaitingTimeUnit;
@@ -70,7 +67,6 @@ public VehicleCostParams(double fix, double perTimeUnit, double perDistanceUnit,
 
         public VehicleCostParams(double fix, double perTimeUnit, double perDistanceUnit, double perWaitingTimeUnit, double perServiceTimeUnit) {
             this.fix = fix;
-            this.perTimeUnit = perTimeUnit;
             this.perTransportTimeUnit = perTimeUnit;
             this.perDistanceUnit = perDistanceUnit;
             this.perWaitingTimeUnit = perWaitingTimeUnit;
@@ -128,7 +124,6 @@ public int hashCode() {
         }
 
         private String id;
-        private int capacity = 0;
         private double maxVelo = Double.MAX_VALUE;
         /**
          * default cost values for default vehicle type
@@ -176,7 +171,7 @@ public Builder setUserData(Object userData) {
          * Sets the maximum velocity this vehicle-type can go [in meter per
          * seconds].
          *
-         * @param inMeterPerSeconds
+         * @param inMeterPerSeconds in m/s
          * @return this builder
          * @throws IllegalArgumentException
          *             if velocity is smaller than zero
@@ -193,7 +188,7 @@ public Builder setUserData(Object userData) {
          * <p>
          * <p>by default it is 0.
          *
-         * @param fixedCost
+         * @param fixedCost fixed cost of vehicle type
          * @return this builder
          * @throws IllegalArgumentException if fixedCost is smaller than zero
          */
@@ -208,7 +203,7 @@ public Builder setUserData(Object userData) {
          * <p>
          * <p>by default it is 1.0
          *
-         * @param perDistance
+         * @param perDistance cost per distance
          * @return this builder
          * @throws IllegalArgumentException if perDistance is smaller than zero
          */
@@ -224,7 +219,7 @@ public Builder setUserData(Object userData) {
          * <p>
          * <p>by default it is 0.0
          *
-         * @param perTime
+         * @param perTime cost per time
          * @return this builder
          * @throws IllegalArgumentException if costPerTime is smaller than zero
          * @deprecated use .setCostPerTransportTime(..) instead
@@ -241,7 +236,7 @@ public Builder setUserData(Object userData) {
          * <p>
          * <p>by default it is 0.0
          *
-         * @param perTime
+         * @param perTime cost per time
          * @return this builder
          * @throws IllegalArgumentException if costPerTime is smaller than zero
          */
@@ -256,7 +251,7 @@ public Builder setUserData(Object userData) {
          * <p>
          * <p>by default it is 0.0
          *
-         * @param perWaitingTime
+         * @param perWaitingTime cost per waiting time
          * @return this builder
          * @throws IllegalArgumentException if costPerTime is smaller than zero
          */
@@ -286,8 +281,8 @@ public VehicleTypeImpl build() {
         /**
          * Adds a capacity dimension.
          *
-         * @param dimIndex
-         * @param dimVal
+         * @param dimIndex dimension index
+         * @param dimVal dimension value
          * @return the builder
          * @throws IllegalArgumentException if dimVal < 0
          * @throws IllegalArgumentException    if capacity dimension is already set
@@ -310,7 +305,7 @@ public Builder addCapacityDimension(int dimIndex, int dimVal) {
          * your dimensions with <code>addCapacityDimension(int dimIndex, int dimVal)</code> or set the already built dimensions with
          * this method.
          *
-         * @param capacity
+         * @param capacity capacity of vehicle type
          * @return this builder
          * @throws IllegalArgumentException if capacityDimension has already been added
          */
@@ -358,8 +353,6 @@ public int hashCode() {
 
     private final String typeId;
 
-    private final int capacity;
-
     private final String profile;
 
     private final VehicleTypeImpl.VehicleCostParams vehicleCostParams;
@@ -373,12 +366,11 @@ public int hashCode() {
     /**
      * priv constructor constructing vehicle-type
      *
-     * @param builder
+     * @param builder vehicle type builder
      */
     private VehicleTypeImpl(VehicleTypeImpl.Builder builder) {
         this.userData = builder.userData;
         typeId = builder.id;
-        capacity = builder.capacity;
         maxVelocity = builder.maxVelo;
         vehicleCostParams = new VehicleCostParams(builder.fixedCost, builder.perTime, builder.perDistance, builder.perWaitingTime, builder.perServiceTime);
         capacityDimensions = builder.capacityDimensions;
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleTypeKey.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleTypeKey.java
index 4f8bdc44b..807d802b2 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleTypeKey.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleTypeKey.java
@@ -84,10 +84,8 @@ public int hashCode() {
 
     @Override
     public String toString() {
-        StringBuilder stringBuilder = new StringBuilder();
-        stringBuilder.append(type).append("_").append(startLocationId).append("_").append(endLocationId)
-            .append("_").append(Double.toString(earliestStart)).append("_").append(Double.toString(latestEnd));
-        return stringBuilder.toString();
+        return type + "_" + startLocationId + "_" + endLocationId +
+            "_" + Double.toString(earliestStart) + "_" + Double.toString(latestEnd);
     }
 
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyserTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyserTest.java
index 3ce9bcfae..28284bcff 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyserTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyserTest.java
@@ -22,6 +22,7 @@
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
+import com.graphhopper.jsprit.core.problem.cost.TransportDistance;
 import com.graphhopper.jsprit.core.problem.job.Delivery;
 import com.graphhopper.jsprit.core.problem.job.Pickup;
 import com.graphhopper.jsprit.core.problem.job.Service;
@@ -1615,4 +1616,21 @@ public void skillViolationOnSolution_shouldWorkWhenNotViolated() {
         assertFalse(violated);
     }
 
+    @Test
+    public void shouldWorkWithRouteWithoutActivities() {
+        Vehicle vehicle = VehicleImpl.Builder.newInstance("vehicle").setStartLocation(Location.newInstance(0, 0))
+            .setEndLocation(Location.newInstance(10, 0)).build();
+        VehicleRoute vehicleRoute = VehicleRoute.Builder.newInstance(vehicle).build();
+
+        VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addVehicle(vehicle).build();
+        VehicleRoutingProblemSolution solution = new VehicleRoutingProblemSolution(Arrays.asList(vehicleRoute), 0);
+        SolutionAnalyser analyser = new SolutionAnalyser(vrp, solution, new TransportDistance() {
+            @Override
+            public double getDistance(Location from, Location to, double departureTime, Vehicle vehicle) {
+                return 100;
+            }
+        });
+
+    }
+
 }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleImplTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleImplTest.java
index cf276e48d..ae09e4483 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleImplTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleImplTest.java
@@ -52,6 +52,23 @@ public void whenAddingDriverBreak_itShouldBeAddedCorrectly() {
         assertEquals(30., v.getBreak().getServiceDuration(), 0.1);
     }
 
+    @Test
+    public void buildingANewVehicleBasedOnAnotherOneShouldWork() {
+        VehicleTypeImpl type1 = VehicleTypeImpl.Builder.newInstance("type").build();
+        Break aBreak = Break.Builder.newInstance("break").setTimeWindow(TimeWindow.newInstance(100, 200)).setServiceTime(30).build();
+        Vehicle v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance("start"))
+            .setType(type1).setEndLocation(Location.newInstance("start"))
+            .setBreak(aBreak).build();
+
+        Vehicle newVehicle = VehicleImpl.Builder.newInstance(v).setStartLocation(Location.newInstance("newStartLocation")).build();
+        assertNotNull(newVehicle.getBreak());
+        assertEquals(100., newVehicle.getBreak().getTimeWindow().getStart(), 0.1);
+        assertEquals(200., newVehicle.getBreak().getTimeWindow().getEnd(), 0.1);
+        assertEquals(30., newVehicle.getBreak().getServiceDuration(), 0.1);
+        assertEquals("newStartLocation", newVehicle.getStartLocation().getId());
+        assertEquals(type1, newVehicle.getType());
+    }
+
 
     @Test
     public void whenAddingSkills_theyShouldBeAddedCorrectly() {
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleTypeImplTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleTypeImplTest.java
index bd1454794..168797dde 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleTypeImplTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleTypeImplTest.java
@@ -136,11 +136,6 @@ public void whenPerTimeCostsSmallerThanZero_itShouldThrowException() {
         VehicleTypeImpl type = VehicleTypeImpl.Builder.newInstance("type").setCostPerTime(-10).build();
     }
 
-    @Test
-    public void whenSettingPerTimeCosts_itShouldBeSetCorrectly() {
-        VehicleTypeImpl type = VehicleTypeImpl.Builder.newInstance("type").setCostPerTime(10).build();
-        assertEquals(10.0, type.getVehicleCostParams().perTimeUnit, 0.0);
-    }
 
     @Test
     public void whenHavingTwoTypesWithTheSameId_theyShouldBeEqual() {
diff --git a/jsprit-examples/pom.xml b/jsprit-examples/pom.xml
index 11a1b637f..5473ad74b 100644
--- a/jsprit-examples/pom.xml
+++ b/jsprit-examples/pom.xml
@@ -20,7 +20,7 @@
     <parent>
         <groupId>com.graphhopper</groupId>
         <artifactId>jsprit</artifactId>
-        <version>1.7.3-SNAPSHOT</version>
+        <version>1.8-SNAPSHOT</version>
     </parent>
     <modelVersion>4.0.0</modelVersion>
 
diff --git a/jsprit-instances/pom.xml b/jsprit-instances/pom.xml
index 5f657739c..72a47d531 100644
--- a/jsprit-instances/pom.xml
+++ b/jsprit-instances/pom.xml
@@ -20,7 +20,7 @@
     <parent>
         <groupId>com.graphhopper</groupId>
         <artifactId>jsprit</artifactId>
-        <version>1.7.3-SNAPSHOT</version>
+        <version>1.8-SNAPSHOT</version>
     </parent>
     <modelVersion>4.0.0</modelVersion>
 
diff --git a/jsprit-io/pom.xml b/jsprit-io/pom.xml
index 1886f762c..b41e04501 100644
--- a/jsprit-io/pom.xml
+++ b/jsprit-io/pom.xml
@@ -23,7 +23,7 @@
     <parent>
         <groupId>com.graphhopper</groupId>
         <artifactId>jsprit</artifactId>
-        <version>1.7.3-SNAPSHOT</version>
+        <version>1.8-SNAPSHOT</version>
     </parent>
     <modelVersion>4.0.0</modelVersion>
 
diff --git a/pom.xml b/pom.xml
index 3740641cd..ffe307d16 100644
--- a/pom.xml
+++ b/pom.xml
@@ -22,7 +22,7 @@
 
     <groupId>com.graphhopper</groupId>
     <artifactId>jsprit</artifactId>
-    <version>1.7.3-SNAPSHOT</version>
+    <version>1.8-SNAPSHOT</version>
 
     <packaging>pom</packaging>
 
@@ -71,7 +71,7 @@
     </modules>
 
     <properties>
-        <jdkVersion>1.7</jdkVersion>
+        <jdkVersion>1.8</jdkVersion>
         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
         <junit.version>4.12</junit.version>
         <mockito.version>1.9.5</mockito.version>
