diff --git a/app/src/main/assets/applozic-settings.json b/app/src/main/assets/applozic-settings.json
index 990b212a..2407b91a 100644
--- a/app/src/main/assets/applozic-settings.json
+++ b/app/src/main/assets/applozic-settings.json
@@ -46,7 +46,7 @@
   "startNewGroup": true,
   "imageCompression": true,
   "inviteFriendsInContactActivity": true,
-  "registeredUserContactListCall": true,
+  "registeredUserContactListCall": false,
   "createAnyContact": false,
   "showActionDialWithOutCalling": false,
   "profileLogoutButton": false,
diff --git a/app/src/main/java/com/applozic/mobicomkit/sample/HomeActivity.java b/app/src/main/java/com/applozic/mobicomkit/sample/HomeActivity.java
index 7a0a33ae..cadb8dc9 100644
--- a/app/src/main/java/com/applozic/mobicomkit/sample/HomeActivity.java
+++ b/app/src/main/java/com/applozic/mobicomkit/sample/HomeActivity.java
@@ -29,6 +29,7 @@
 import com.applozic.mobicomkit.api.conversation.Message;
 import com.applozic.mobicomkit.api.people.UserIntentService;
 import com.applozic.mobicomkit.broadcast.BroadcastService;
+import com.applozic.mobicomkit.contact.AppContactService;
 import com.applozic.mobicomkit.contact.database.ContactDatabase;
 import com.applozic.mobicomkit.uiwidgets.ApplozicSetting;
 import com.applozic.mobicomkit.uiwidgets.conversation.ConversationUIService;
@@ -111,6 +112,9 @@ protected void onCreate(Bundle savedInstanceState) {
         setContentView(R.layout.activity_home);
         initialize();
 
+        //Put Support Contact Data
+        //buildSupportContactData();
+
         //Manually displaying the first fragment - one time only
         bottomNavigationView.setSelectedItemId(R.id.action_home);
         mobiComQuickConversationFragment = new MobiComQuickConversationFragment();
@@ -449,11 +453,11 @@ public void onClick(DialogInterface dialog, int which) {
         };
 
         User user = new User();
-        user.setUserId("testapplozicuser5"); //testapplozicuser1
+        user.setUserId("testapplozicuser7");
         //user.setEmail("pskreddy"@gmail.com);
-        user.setContactNumber("8298298295"); //8298298290
-        user.setPassword("8298298295");
-        user.setDisplayName("Sai4"); //display name and user name are similar //Sai //In all contacts, conatct shows with display name and number
+        user.setContactNumber("7777777777");
+        user.setPassword("7777777777");
+        user.setDisplayName("Seven"); //display name and user name are similar //Sai //In all contacts, conatct shows with display name and number
         //user.setAuthenticationTypeId(authenticationType.getValue());
 
 
@@ -470,12 +474,16 @@ protected void onActivityResult(int requestCode, int resultCode, Intent data) {
                 intent.putExtra(ConversationUIService.SEARCH_STRING, "");
                 intent.putExtra(ConversationUIService.TAKE_ORDER, true);
                 String userId = data.getStringExtra(ConversationUIService.USER_ID);
+                Integer groupId = data.getIntExtra(ConversationUIService.GROUP_ID, 0);
                 Contact contact = new ContactDatabase(this).getContactById(userId);
 
                 if (contact != null) {
                     intent.putExtra(ConversationUIService.USER_ID, contact.getUserId());
                     intent.putExtra(ConversationUIService.DISPLAY_NAME, contact.getDisplayName());
                     startActivity(intent);
+                } else if (groupId != 0) {
+                    intent.putExtra(ConversationUIService.GROUP_ID, groupId);
+                    startActivity(intent);
                 }
             }
             //  conversationUIService.onActivityResult(requestCode, resultCode, data);
@@ -536,4 +544,19 @@ public void handleOnActivityResult(int requestCode, Intent intent) {
         }
     }
 
+    private void buildSupportContactData() {
+        Context context = getApplicationContext();
+        AppContactService appContactService = new AppContactService(context);
+        // avoid each time update ....
+        if (!appContactService.isContactExists(getString(R.string.support_contact_userId))) {
+            Contact contact = new Contact();
+            contact.setUserId(getString(R.string.support_contact_userId));
+            contact.setFullName(getString(R.string.support_contact_display_name));
+            contact.setContactNumber(getString(R.string.support_contact_number));
+            contact.setImageURL(getString(R.string.support_contact_image_url));
+            contact.setEmailId(getString(R.string.support_contact_emailId));
+            appContactService.add(contact);
+        }
+    }
+
 }
diff --git a/mobicomkitui/src/main/assets/fonts/NotoSans-Bold.ttf b/mobicomkitui/src/main/assets/fonts/NotoSans-Bold.ttf
new file mode 100644
index 00000000..ab11d316
Binary files /dev/null and b/mobicomkitui/src/main/assets/fonts/NotoSans-Bold.ttf differ
diff --git a/mobicomkitui/src/main/assets/fonts/NotoSans-Regular.ttf b/mobicomkitui/src/main/assets/fonts/NotoSans-Regular.ttf
new file mode 100644
index 00000000..a1b8994e
Binary files /dev/null and b/mobicomkitui/src/main/assets/fonts/NotoSans-Regular.ttf differ
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/CustomTextViewBold.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/CustomTextViewBold.java
new file mode 100644
index 00000000..758db0fa
--- /dev/null
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/CustomTextViewBold.java
@@ -0,0 +1,36 @@
+package com.applozic.mobicomkit.uiwidgets;
+
+import android.content.Context;
+import android.graphics.Typeface;
+import android.util.AttributeSet;
+
+
+/**
+ * Util class for creating bold custom textView with app specific font
+ */
+
+public class CustomTextViewBold extends android.support.v7.widget.AppCompatTextView {
+
+    public CustomTextViewBold(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        setTypeface(context);
+    }
+
+    public CustomTextViewBold(Context context) {
+        super(context);
+        setTypeface(context);
+    }
+
+
+    public CustomTextViewBold(Context context, AttributeSet attrs, int defStyleAttr) {
+        super(context, attrs, defStyleAttr);
+        setTypeface(context);
+    }
+
+    private void setTypeface(Context context) {
+        Typeface face = Typeface.createFromAsset(context.getAssets(), "fonts/NotoSans-Bold.ttf");
+        this.setTypeface(face);
+    }
+
+
+}
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/CustomTextViewRegular.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/CustomTextViewRegular.java
new file mode 100644
index 00000000..c492c07d
--- /dev/null
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/CustomTextViewRegular.java
@@ -0,0 +1,35 @@
+package com.applozic.mobicomkit.uiwidgets;
+
+import android.content.Context;
+import android.graphics.Typeface;
+import android.support.annotation.Nullable;
+import android.util.AttributeSet;
+
+/**
+ * Custom TextView Class
+ */
+
+public class CustomTextViewRegular extends android.support.v7.widget.AppCompatTextView {
+
+    public CustomTextViewRegular(Context context) {
+        super(context);
+        setTypeface(context);
+    }
+
+    public CustomTextViewRegular(Context context, @Nullable AttributeSet attrs) {
+        super(context, attrs);
+        setTypeface(context);
+    }
+
+    public CustomTextViewRegular(Context context, @Nullable AttributeSet attrs, int defStyleAttr) {
+        super(context, attrs, defStyleAttr);
+        setTypeface(context);
+    }
+
+    private void setTypeface(Context context) {
+        Typeface face = Typeface.createFromAsset(context.getAssets(), "fonts/NotoSans-Regular.ttf");
+        this.setTypeface(face);
+    }
+
+
+}
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/ContactSelectionActivity.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/ContactSelectionActivity.java
index f8f4888a..f159a285 100755
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/ContactSelectionActivity.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/ContactSelectionActivity.java
@@ -134,6 +134,7 @@ public boolean onCreateOptionsMenu(Menu menu) {
         if (disableCheckBox) {
             menu.removeItem(R.id.Done);
         }
+
         MenuItem searchItem = menu.findItem(R.id.menu_search);
         searchView = (SearchView) MenuItemCompat.getActionView(searchItem);
         searchView.setQueryHint(getResources().getString(R.string.search_hint));
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/channel/ChannelFragment.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/channel/ChannelFragment.java
index 5f912f8e..e831abc3 100755
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/channel/ChannelFragment.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/channel/ChannelFragment.java
@@ -26,6 +26,7 @@
 import android.widget.AdapterView;
 import android.widget.AlphabetIndexer;
 import android.widget.Button;
+import android.widget.RelativeLayout;
 import android.widget.SectionIndexer;
 import android.widget.TextView;
 
@@ -61,10 +62,11 @@
     // Contact selected listener that allows the activity holding this fragment to be notified of
 // a contact being selected
     private OnContactsInteractionListener mOnChannelSelectedListener;
-    private Button shareButton;
+    // private Button shareButton;
     private TextView resultTextView;
     private boolean syncStatus = true;
     private int mPreviouslySelectedSearchItem = 0;
+    RelativeLayout startInviteLayout;
 
     public ChannelFragment() {
 
@@ -110,9 +112,15 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container,
                              Bundle savedInstanceState) {
         // Inflate the list fragment layout
         View view = inflater.inflate(R.layout.contact_list_fragment, container, false);
-        shareButton = (Button) view.findViewById(R.id.actionButton);
-        shareButton.setVisibility(View.GONE);
+        //shareButton = (Button) view.findViewById(R.id.actionButton);
+        //shareButton.setVisibility(View.GONE);
+
+        startInviteLayout = (RelativeLayout) view.findViewById(R.id.startInviteLayout);
+        startInviteLayout.setVisibility(View.GONE);
+
+
         resultTextView = (TextView) view.findViewById(R.id.result);
+        resultTextView.setVisibility(View.VISIBLE);
         resultTextView.setText(getString(R.string.no_groups));
         return view;
     }
@@ -135,7 +143,7 @@ public void onAttach(Activity activity) {
     @Override
     public void onActivityCreated(Bundle savedInstanceState) {
         super.onActivityCreated(savedInstanceState);
-        shareButton.setOnClickListener(new View.OnClickListener() {
+        /*shareButton.setOnClickListener(new View.OnClickListener() {
             public void onClick(View v) {
                 Intent intent = new Intent();
                 intent.setAction(Intent.ACTION_SEND)
@@ -159,7 +167,7 @@ public void onClick(View v) {
                     startActivity(chooserIntent);
                 }
             }
-        });
+        });*/
 
         setListAdapter(mAdapter);
         getListView().setOnItemClickListener(this);
@@ -297,9 +305,22 @@ public ChannelAdapter(Context context) {
          */
         private int indexOfSearchQuery(String displayName) {
             if (!TextUtils.isEmpty(mSearchTerm)) {
-                return displayName.toLowerCase(Locale.getDefault()).indexOf(
-                        mSearchTerm.toLowerCase(Locale.getDefault()));
+                resultTextView.setVisibility(View.VISIBLE);
+                resultTextView.setText(R.string.no_groups);
+                return displayName.toLowerCase(Locale.getDefault()).indexOf(mSearchTerm.toLowerCase(Locale.getDefault()));
+            }else{
+                resultTextView.setVisibility(View.GONE);
+                //resultTextView.setText("No Groups");
             }
+
+            if(displayName!=null){
+                resultTextView.setVisibility(View.GONE);
+            }else{
+                resultTextView.setVisibility(View.VISIBLE);
+                resultTextView.setText(R.string.no_groups);
+            }
+
+
             return -1;
         }
 
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/contact/AppContactFragment.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/contact/AppContactFragment.java
index 2056b0a2..28fe332b 100755
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/contact/AppContactFragment.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/contact/AppContactFragment.java
@@ -8,12 +8,10 @@
 import android.content.Context;
 import android.content.Intent;
 import android.content.IntentFilter;
-import android.content.pm.ResolveInfo;
 import android.database.Cursor;
 import android.graphics.Bitmap;
 import android.graphics.drawable.GradientDrawable;
 import android.os.Bundle;
-import android.os.Parcelable;
 import android.support.v4.app.ListFragment;
 import android.support.v4.app.LoaderManager;
 import android.support.v4.content.Loader;
@@ -45,8 +43,8 @@
 import com.applozic.mobicomkit.contact.BaseContactService;
 import com.applozic.mobicomkit.contact.database.ContactDatabase;
 import com.applozic.mobicomkit.feed.RegisteredUsersApiResponse;
-import com.applozic.mobicomkit.uiwidgets.ApplozicSetting;
 import com.applozic.mobicomkit.uiwidgets.AlCustomizationSettings;
+import com.applozic.mobicomkit.uiwidgets.ApplozicSetting;
 import com.applozic.mobicomkit.uiwidgets.R;
 import com.applozic.mobicomkit.uiwidgets.alphanumbericcolor.AlphaNumberColorUtil;
 import com.applozic.mobicomkit.uiwidgets.async.AlGetMembersFromContactGroupListTask;
@@ -86,6 +84,7 @@
     private static String inviteMessage;
     AlCustomizationSettings alCustomizationSettings;
     RefreshContactsScreenBroadcast refreshContactsScreenBroadcast;
+    RelativeLayout startInviteLayout;
     private ContactsAdapter mAdapter; // The main query adapter
     private ImageLoader mImageLoader; // Handles loading the contact image in a background thread
     private String mSearchTerm; // Stores the current search query term
@@ -96,7 +95,7 @@
 // can be reselected again
     private int mPreviouslySelectedSearchItem = 0;
     private BaseContactService contactService;
-    private Button shareButton;
+    //private Button shareButton;
     private TextView resultTextView;
     private String[] userIdArray;
     private MobiComUserPreference userPreference;
@@ -164,10 +163,14 @@ public void onFailure(String response, Context context) {
 
                     }
                 };
-                ApplozicGetMemberFromContactGroupTask applozicGetMemberFromContactGroupTask = new ApplozicGetMemberFromContactGroupTask(getActivity(), MobiComUserPreference.getInstance(context).getContactsGroupId(), String.valueOf(Channel.GroupType.CONTACT_GROUP.getValue()), eventMemberListener);
+                ApplozicGetMemberFromContactGroupTask applozicGetMemberFromContactGroupTask =
+                        new ApplozicGetMemberFromContactGroupTask(getActivity(),
+                                MobiComUserPreference.getInstance(context).getContactsGroupId(),
+                                String.valueOf(Channel.GroupType.CONTACT_GROUP.getValue()), eventMemberListener);
                 applozicGetMemberFromContactGroupTask.execute();
             } else if (userIdArray != null) {
-                getLoaderManager().initLoader(ContactSelectionFragment.ContactsQuery.QUERY_ID, null, AppContactFragment.this);
+                getLoaderManager().initLoader(ContactSelectionFragment.ContactsQuery.QUERY_ID,
+                        null, AppContactFragment.this);
             }
         } else if (MobiComUserPreference.getInstance(getContext()).getContactGroupIdList() != null && !MobiComUserPreference.getInstance(getContext()).getContactGroupIdList().isEmpty()) {
             List<String> groupList = new ArrayList<String>();
@@ -206,8 +209,21 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container,
                              Bundle savedInstanceState) {
         // Inflate the list fragment layout
         View view = inflater.inflate(R.layout.contact_list_fragment, container, false);
-        shareButton = (Button) view.findViewById(R.id.actionButton);
-        shareButton.setVisibility(alCustomizationSettings.isInviteFriendsInContactActivity() ? View.VISIBLE : View.GONE);
+        //shareButton = (Button) view.findViewById(R.id.actionButton);
+
+        //shareButton.setVisibility(alCustomizationSettings.isInviteFriendsInContactActivity() ? View.VISIBLE : View.GONE);
+
+        startInviteLayout = (RelativeLayout) view.findViewById(R.id.startInviteLayout);
+        startInviteLayout.setVisibility(View.VISIBLE);
+
+        Button btn_invite = (Button) view.findViewById(R.id.actionButton);
+        btn_invite.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                Toast.makeText(getActivity(), "Invite", Toast.LENGTH_LONG).show();
+            }
+        });
+
         resultTextView = (TextView) view.findViewById(R.id.result);
         return view;
     }
@@ -216,7 +232,9 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container,
     @Override
     public void onActivityCreated(Bundle savedInstanceState) {
         super.onActivityCreated(savedInstanceState);
-        shareButton.setOnClickListener(new View.OnClickListener() {
+
+
+        /*shareButton.setOnClickListener(new View.OnClickListener() {
             public void onClick(View v) {
                 Intent intent = new Intent();
                 intent.setAction(Intent.ACTION_SEND)
@@ -240,7 +258,7 @@ public void onClick(View v) {
                     startActivity(chooserIntent);
                 }
             }
-        });
+        });*/
 
         setListAdapter(mAdapter);
         getListView().setOnItemClickListener(this);
@@ -255,44 +273,6 @@ public void onClick(View v) {
         }
     }
 
-    public class EndlessScrollListener implements AbsListView.OnScrollListener {
-
-        private int visibleThreshold = 5;
-        private int currentPage = 0;
-        private int previousTotal = 0;
-        private boolean loading = true;
-
-        public EndlessScrollListener() {
-        }
-
-        public EndlessScrollListener(int visibleThreshold) {
-            this.visibleThreshold = visibleThreshold;
-        }
-
-        @Override
-        public void onScroll(AbsListView view, int firstVisibleItem,
-                             int visibleItemCount, int totalItemCount) {
-            if (loading &&
-                    ((alCustomizationSettings.isRegisteredUserContactListCall() || ApplozicSetting.getInstance(getActivity()).isRegisteredUsersContactCall()) && Utils.isInternetAvailable(getActivity().getApplicationContext()) && TextUtils.isEmpty(userPreference.getContactsGroupId())) &&
-                    (totalItemCount > previousTotal)) {
-                loading = false;
-                previousTotal = totalItemCount;
-                currentPage++;
-
-            }
-            if ((!loading && (totalItemCount - visibleItemCount) <= (firstVisibleItem + visibleThreshold)) && (!MobiComKitPeopleActivity.isSearching)) {
-                // I load the next page of gigs using a background task,
-                // but you can call any function here.
-                processLoadRegisteredUsers();
-                loading = true;
-            }
-        }
-
-        @Override
-        public void onScrollStateChanged(AbsListView view, int scrollState) {
-        }
-    }
-
     @Override
     public void onAttach(Activity activity) {
         super.onAttach(activity);
@@ -460,7 +440,9 @@ public void onCompletion() {
 
             }
         };
-        RegisteredUsersAsyncTask usersAsyncTask = new RegisteredUsersAsyncTask(getActivity(), usersAsyncTaskTaskListener, alCustomizationSettings.getTotalRegisteredUserToFetch(), userPreference.getRegisteredUsersLastFetchTime(), null, null, true);
+        RegisteredUsersAsyncTask usersAsyncTask = new RegisteredUsersAsyncTask(getActivity(),
+                usersAsyncTaskTaskListener, alCustomizationSettings.getTotalRegisteredUserToFetch(),
+                userPreference.getRegisteredUsersLastFetchTime(), null, null, true);
         usersAsyncTask.execute((Void) null);
     }
 
@@ -481,7 +463,6 @@ public void onDestroy() {
         }
     }
 
-
     /**
      * This interface defines constants for the Cursor and CursorLoader, based on constants defined
      * in the {@link android.provider.ContactsContract.Contacts} class.
@@ -492,6 +473,48 @@ public void onDestroy() {
 
     }
 
+    public class EndlessScrollListener implements AbsListView.OnScrollListener {
+
+        private int visibleThreshold = 5;
+        private int currentPage = 0;
+        private int previousTotal = 0;
+        private boolean loading = true;
+
+        public EndlessScrollListener() {
+        }
+
+        public EndlessScrollListener(int visibleThreshold) {
+            this.visibleThreshold = visibleThreshold;
+        }
+
+        @Override
+        public void onScroll(AbsListView view, int firstVisibleItem,
+                             int visibleItemCount, int totalItemCount) {
+            if (loading &&
+                    ((alCustomizationSettings.isRegisteredUserContactListCall() ||
+                            ApplozicSetting.getInstance(getActivity()).isRegisteredUsersContactCall())
+                            && Utils.isInternetAvailable(getActivity().getApplicationContext())
+                            && TextUtils.isEmpty(userPreference.getContactsGroupId())) &&
+                    (totalItemCount > previousTotal)) {
+                loading = false;
+                previousTotal = totalItemCount;
+                currentPage++;
+
+            }
+            if ((!loading && (totalItemCount - visibleItemCount) <= (firstVisibleItem + visibleThreshold))
+                    && (!MobiComKitPeopleActivity.isSearching)) {
+                // I load the next page of gigs using a background task,
+                // but you can call any function here.
+                processLoadRegisteredUsers();
+                loading = true;
+            }
+        }
+
+        @Override
+        public void onScrollStateChanged(AbsListView view, int scrollState) {
+        }
+    }
+
     /**
      * This is a subclass of CursorAdapter that supports binding Cursor columns to a view layout.
      * If those items are part of search results, the search string is marked by highlighting the
@@ -542,9 +565,26 @@ public ContactsAdapter(Context context) {
          */
         private int indexOfSearchQuery(String displayName) {
             if (!TextUtils.isEmpty(mSearchTerm)) {
+                resultTextView.setVisibility(View.VISIBLE);
+                resultTextView.setText(R.string.no_contacts);
+                startInviteLayout.setVisibility(View.GONE);
                 return displayName.toLowerCase(Locale.getDefault()).indexOf(
                         mSearchTerm.toLowerCase(Locale.getDefault()));
+            } else {
+                resultTextView.setVisibility(View.GONE);
             }
+
+            if (displayName != null) {
+                resultTextView.setVisibility(View.GONE);
+                startInviteLayout.setVisibility(View.GONE);
+            } else {
+                resultTextView.setVisibility(View.GONE);
+                resultTextView.setText(R.string.no_contacts);
+                startInviteLayout.setVisibility(View.VISIBLE);
+
+            }
+
+
             return -1;
         }
 
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/contact/ContactSelectionFragment.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/contact/ContactSelectionFragment.java
index c935660e..6868e6c4 100644
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/contact/ContactSelectionFragment.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/contact/ContactSelectionFragment.java
@@ -19,6 +19,7 @@
 import android.support.v4.content.LocalBroadcastManager;
 import android.support.v4.widget.CursorAdapter;
 import android.support.v7.widget.AppCompatCheckBox;
+import android.support.v7.widget.Toolbar;
 import android.text.SpannableString;
 import android.text.TextUtils;
 import android.text.style.TextAppearanceSpan;
@@ -35,6 +36,7 @@
 import android.widget.AdapterView;
 import android.widget.AlphabetIndexer;
 import android.widget.Button;
+import android.widget.RelativeLayout;
 import android.widget.SectionIndexer;
 import android.widget.TextView;
 import android.widget.Toast;
@@ -70,7 +72,6 @@
 import com.applozic.mobicommons.json.GsonUtils;
 import com.applozic.mobicommons.people.SearchListFragment;
 import com.applozic.mobicommons.people.channel.Channel;
-import com.applozic.mobicommons.people.channel.ChannelMetadata;
 import com.applozic.mobicommons.people.contact.Contact;
 
 import java.util.ArrayList;
@@ -101,6 +102,8 @@
     MobiComUserPreference userPreference;
     AlCustomizationSettings alCustomizationSettings;
     String contactsGroupId;
+    RefreshContactsScreenBroadcast refreshContactsScreenBroadcast;
+    RelativeLayout startInviteLayout;
     private String mSearchTerm; // Stores the current search query term
     private ContactsAdapter mAdapter;
     private boolean isScrolling = false;
@@ -117,7 +120,7 @@
     private String[] groupContacts;
     private Bundle bundle;
     private List<String> userIdList;
-    RefreshContactsScreenBroadcast refreshContactsScreenBroadcast;
+    private TextView resultTextView;
 
     @Override
     public void onCreate(@Nullable Bundle savedInstanceState) {
@@ -185,7 +188,7 @@ public void onFailure(String response, Context context) {
             } else if (groupContacts != null) {
                 getLoaderManager().initLoader(ContactsQuery.QUERY_ID, null, ContactSelectionFragment.this);
             }
-        }else if (MobiComUserPreference.getInstance(getContext()).getContactGroupIdList() != null && !MobiComUserPreference.getInstance(getContext()).getContactGroupIdList().isEmpty()) {
+        } else if (MobiComUserPreference.getInstance(getContext()).getContactGroupIdList() != null && !MobiComUserPreference.getInstance(getContext()).getContactGroupIdList().isEmpty()) {
             List<String> groupList = new ArrayList<String>();
             groupList.addAll(MobiComUserPreference.getInstance(getContext()).getContactGroupIdList());
 
@@ -237,6 +240,7 @@ public void onItemClick(AdapterView<?> adapterView, View view, int position, lon
     @Override
     public void onActivityCreated(Bundle savedInstanceState) {
         super.onActivityCreated(savedInstanceState);
+
         setListAdapter(mAdapter);
         getListView().setOnItemClickListener(this);
         getListView().setOnScrollListener(new AbsListView.OnScrollListener() {
@@ -381,73 +385,94 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container,
                              Bundle savedInstanceState) {
         // Inflate the list fragment layout
         View view = inflater.inflate(R.layout.contact_list_fragment, container, false);
+        /*
         Button shareButton = (Button) view.findViewById(R.id.actionButton);
-        shareButton.setVisibility(alCustomizationSettings.isInviteFriendsInContactActivity() ? View.VISIBLE : View.GONE);
-        TextView resultTextView = (TextView) view.findViewById(R.id.result);
+        shareButton.setVisibility(alCustomizationSettings.isInviteFriendsInContactActivity() ? View.VISIBLE : View.GONE);*/
+
+        startInviteLayout = (RelativeLayout) view.findViewById(R.id.startInviteLayout);
+        startInviteLayout.setVisibility(View.VISIBLE);
+
+        Button btn_invite = (Button) view.findViewById(R.id.actionButton);
+        btn_invite.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                Toast.makeText(getActivity(), "Invite", Toast.LENGTH_LONG).show();
+            }
+        });
+
+
+
+        resultTextView = (TextView) view.findViewById(R.id.result);
         return view;
+
     }
 
     @Override
     public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
         super.onCreateOptionsMenu(menu, inflater);
+
     }
 
     @Override
     public boolean onOptionsItemSelected(MenuItem item) {
+
         int id = item.getItemId();
         if (id == R.id.Done) {
             if (userIdList != null && userIdList.size() == 0) {
                 Toast.makeText(getActivity(), R.string.select_at_least, Toast.LENGTH_SHORT).show();
             } else {
                 final ProgressDialog progressDialog = ProgressDialog.show(getActivity(), "",
-                        getActivity().getString(TextUtils.isEmpty(channelName) ? R.string.broadcast_creating_info : R.string.group_creating_info), true);
-                AlChannelCreateAsyncTask.TaskListenerInterface taskListenerInterface = new AlChannelCreateAsyncTask.TaskListenerInterface() {
-                    @Override
-                    public void onSuccess(Channel channel, Context context) {
-                        if (progressDialog != null && progressDialog.isShowing()) {
-                            progressDialog.dismiss();
-                        }
-                        if (channel != null) {
-                            Intent intent = new Intent(getActivity(), ConversationActivity.class);
-                            if (ApplozicClient.getInstance(getActivity().getApplicationContext()).isContextBasedChat()) {
-                                intent.putExtra(ConversationUIService.CONTEXT_BASED_CHAT, true);
-                            }
-                            intent.putExtra(ConversationUIService.GROUP_ID, channel.getKey());
-                            intent.putExtra(ConversationUIService.GROUP_NAME, channel.getName());
-                            getActivity().startActivity(intent);
-                        }
+                        getActivity().getString(TextUtils.isEmpty(channelName)
+                                ? R.string.broadcast_creating_info : R.string.group_creating_info), true);
+
+                AlChannelCreateAsyncTask.TaskListenerInterface taskListenerInterface =
+                        new AlChannelCreateAsyncTask.TaskListenerInterface() {
+                            @Override
+                            public void onSuccess(Channel channel, Context context) {
+                                if (progressDialog != null && progressDialog.isShowing()) {
+                                    progressDialog.dismiss();
+                                }
+                                if (channel != null) {
+                                    Intent intent = new Intent(getActivity(), ConversationActivity.class);
+                                    if (ApplozicClient.getInstance(getActivity().getApplicationContext()).isContextBasedChat()) {
+                                        intent.putExtra(ConversationUIService.CONTEXT_BASED_CHAT, true);
+                                    }
+                                    intent.putExtra(ConversationUIService.GROUP_ID, channel.getKey());
+                                    intent.putExtra(ConversationUIService.GROUP_NAME, channel.getName());
+                                    getActivity().startActivity(intent);
+                                }
 
-                        if (bundle != null && bundle.getString(CHANNEL) != null) {
-                            getActivity().sendBroadcast(new Intent(ChannelCreateActivity.ACTION_FINISH_CHANNEL_CREATE));
-                        }
-                        if (getActivity() != null) {
-                            getActivity().finish();
-                        }
-                    }
+                                if (bundle != null && bundle.getString(CHANNEL) != null) {
+                                    getActivity().sendBroadcast(new Intent(ChannelCreateActivity.ACTION_FINISH_CHANNEL_CREATE));
+                                }
+                                if (getActivity() != null) {
+                                    getActivity().finish();
+                                }
+                            }
 
-                    @Override
-                    public void onFailure(ChannelFeedApiResponse channelFeedApiResponse, Context context) {
-                        if (progressDialog != null && progressDialog.isShowing()) {
-                            progressDialog.dismiss();
-                        }
-                        if (channelFeedApiResponse != null) {
-                            List<ErrorResponseFeed> error = channelFeedApiResponse.getErrorResponse();
-                            if (error != null && error.size() > 0) {
-                                ErrorResponseFeed errorResponseFeed = error.get(0);
-                                String errorDescription = errorResponseFeed.getDescription();
-                                if (!TextUtils.isEmpty(errorDescription)) {
-                                    if (MobiComKitConstants.GROUP_USER_LIMIT_EXCEED.equalsIgnoreCase(errorDescription)) {
-                                        Toast.makeText(context, R.string.group_members_limit_exceeds, Toast.LENGTH_SHORT).show();
-                                    } else {
-                                        Toast.makeText(context, R.string.applozic_server_error, Toast.LENGTH_SHORT).show();
+                            @Override
+                            public void onFailure(ChannelFeedApiResponse channelFeedApiResponse, Context context) {
+                                if (progressDialog != null && progressDialog.isShowing()) {
+                                    progressDialog.dismiss();
+                                }
+                                if (channelFeedApiResponse != null) {
+                                    List<ErrorResponseFeed> error = channelFeedApiResponse.getErrorResponse();
+                                    if (error != null && error.size() > 0) {
+                                        ErrorResponseFeed errorResponseFeed = error.get(0);
+                                        String errorDescription = errorResponseFeed.getDescription();
+                                        if (!TextUtils.isEmpty(errorDescription)) {
+                                            if (MobiComKitConstants.GROUP_USER_LIMIT_EXCEED.equalsIgnoreCase(errorDescription)) {
+                                                Toast.makeText(context, R.string.group_members_limit_exceeds, Toast.LENGTH_SHORT).show();
+                                            } else {
+                                                Toast.makeText(context, R.string.applozic_server_error, Toast.LENGTH_SHORT).show();
+                                            }
+                                        }
                                     }
+                                } else {
+                                    Toast.makeText(context, Utils.isInternetAvailable(context) ? R.string.applozic_server_error : R.string.you_dont_have_any_network_access_info, Toast.LENGTH_SHORT).show();
                                 }
                             }
-                        } else {
-                            Toast.makeText(context, Utils.isInternetAvailable(context) ? R.string.applozic_server_error : R.string.you_dont_have_any_network_access_info, Toast.LENGTH_SHORT).show();
-                        }
-                    }
-                };
+                        };
 
                 if (userIdList != null && userIdList.size() > 0) {
                     if (TextUtils.isEmpty(channelName)) {
@@ -511,6 +536,7 @@ public void onLoaderReset(Loader<Cursor> loader) {
         }
     }
 
+
     @Override
     public boolean onQueryTextChange(String newText) {
         // Called when the action bar search text has changed.  Updates
@@ -528,6 +554,22 @@ public boolean onQueryTextChange(String newText) {
         return true;
     }
 
+    @Override
+    public void onResume() {
+        super.onResume();
+        if (refreshContactsScreenBroadcast != null) {
+            LocalBroadcastManager.getInstance(getActivity()).registerReceiver(refreshContactsScreenBroadcast, new IntentFilter(BroadcastService.INTENT_ACTIONS.UPDATE_USER_DETAIL.toString()));
+        }
+
+    }
+
+    @Override
+    public void onDestroy() {
+        super.onDestroy();
+        if (refreshContactsScreenBroadcast != null) {
+            LocalBroadcastManager.getInstance(getActivity()).unregisterReceiver(refreshContactsScreenBroadcast);
+        }
+    }
 
     /**
      * This interface defines constants for the Cursor and CursorLoader, based on constants defined
@@ -586,9 +628,29 @@ public ContactsAdapter(Context context) {
          */
         private int indexOfSearchQuery(String displayName) {
             if (!TextUtils.isEmpty(mSearchTerm)) {
+                resultTextView.setVisibility(View.VISIBLE);
+                resultTextView.setText(R.string.no_contacts);
+                startInviteLayout.setVisibility(View.GONE);
+
                 return displayName.toLowerCase(Locale.getDefault()).indexOf(
                         mSearchTerm.toLowerCase(Locale.getDefault()));
+            } else {
+                resultTextView.setVisibility(View.GONE);
+
+            }
+
+            if (displayName != null) {
+                resultTextView.setVisibility(View.GONE);
+                startInviteLayout.setVisibility(View.GONE);
+
+            } else {
+                resultTextView.setVisibility(View.GONE);
+                resultTextView.setText(R.string.no_contacts);
+                startInviteLayout.setVisibility(View.VISIBLE);
+
+
             }
+
             return -1;
         }
 
@@ -772,7 +834,6 @@ public int getSectionForPosition(int i) {
         TextView textView2;
     }
 
-
     private final class RefreshContactsScreenBroadcast extends BroadcastReceiver {
         @Override
         public void onReceive(Context context, Intent intent) {
@@ -791,21 +852,4 @@ public void onReceive(Context context, Intent intent) {
         }
     }
 
-    @Override
-    public void onResume() {
-        super.onResume();
-        if (refreshContactsScreenBroadcast != null) {
-            LocalBroadcastManager.getInstance(getActivity()).registerReceiver(refreshContactsScreenBroadcast, new IntentFilter(BroadcastService.INTENT_ACTIONS.UPDATE_USER_DETAIL.toString()));
-        }
-
-    }
-
-    @Override
-    public void onDestroy() {
-        super.onDestroy();
-        if (refreshContactsScreenBroadcast != null) {
-            LocalBroadcastManager.getInstance(getActivity()).unregisterReceiver(refreshContactsScreenBroadcast);
-        }
-    }
-
 }
diff --git a/mobicomkitui/src/main/res/layout/contact_list_fragment.xml b/mobicomkitui/src/main/res/layout/contact_list_fragment.xml
index 7ea8bbc0..5d953223 100755
--- a/mobicomkitui/src/main/res/layout/contact_list_fragment.xml
+++ b/mobicomkitui/src/main/res/layout/contact_list_fragment.xml
@@ -3,40 +3,130 @@
     android:layout_width="match_parent"
     android:layout_height="match_parent">
 
-    <!-- Use standard android.R class list id instead of app specific id. This is just useful for
-         consistency. -->
     <ListView
         android:id="@id/android:list"
         style="@style/ContactListView"
         android:layout_width="match_parent"
         android:layout_height="match_parent" />
 
-    <LinearLayout
-        android:id="@id/android:empty"
+
+    <!-- <TextView
+         android:id="@+id/result"
+         android:layout_width="match_parent"
+         android:layout_height="wrap_content"
+         android:fontFamily="notosans-regular"
+         android:layout_centerInParent="true"
+         android:gravity="center"
+         android:text="@string/no_contacts"
+         android:textAppearance="?android:attr/textAppearanceLarge"
+         />-->
+
+    <!--android:fontFamily="sans-serif-light"-->
+
+    <!-- <LinearLayout
+         android:id="@id/android:empty"
+         android:layout_width="match_parent"
+         android:layout_height="match_parent"
+         android:gravity="center"
+         android:orientation="vertical">
+
+         <TextView
+             android:id="@+id/result"
+             android:layout_width="match_parent"
+             android:layout_height="wrap_content"
+             android:fontFamily="sans-serif-light"
+             android:gravity="center"
+             android:text="@string/no_contacts"
+             android:textAppearance="?android:attr/textAppearanceLarge" />
+
+         <Button
+             android:id="@+id/actionButton"
+             android:layout_width="match_parent"
+             android:layout_height="wrap_content"
+             android:fontFamily="sans-serif-light"
+             android:gravity="center"
+             android:text="@string/invite"
+             android:textAppearance="?android:attr/textAppearanceLarge"
+             android:visibility="gone" />
+
+     </LinearLayout>-->
+
+    <RelativeLayout
+        android:id="@+id/rLayout"
         android:layout_width="match_parent"
-        android:layout_height="match_parent"
-        android:gravity="center"
-        android:orientation="vertical">
+        android:layout_height="match_parent">
 
-        <TextView
-            android:id="@+id/result"
+
+        <RelativeLayout
+            android:id="@+id/startInviteLayout"
             android:layout_width="match_parent"
-            android:layout_height="wrap_content"
-            android:fontFamily="sans-serif-light"
-            android:gravity="center"
-            android:text="@string/no_contacts"
-            android:textAppearance="?android:attr/textAppearanceLarge" />
+            android:layout_height="match_parent"
+            android:visibility="gone">
+
+            <ImageView
+                android:id="@+id/img_Invite"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:src="@drawable/mobicom_ic_launcher"
+                android:layout_centerHorizontal="true"
+                android:padding="16dp"
+                android:layout_marginBottom="20dp" />
+
+
+            <TextView
+                android:id="@+id/inviteFriend"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:gravity="center"
+                android:layout_margin="4dp"
+                android:text="Invite a friend"
+                android:textColor="#000000"
+                android:textSize="20sp"
+                android:fontFamily="notosans-regular"
+                android:layout_below="@+id/img_Invite" />
+
+            <TextView
+                android:id="@+id/textView1"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:gravity="center"
+                android:layout_margin="16dp"
+                android:text="Looks like none of your friends are here. Invite your friends to enjoy chatting"
+                android:textSize="14sp"
+                android:textColor="#FF666666"
+                android:layout_below="@+id/inviteFriend" />
+
+            <Button
+                android:id="@+id/actionButton"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:background="@drawable/button_rounded"
+                android:layout_centerHorizontal="true"
+                android:layout_below="@+id/textView1"
+                android:layout_marginTop="32dp"
+                android:textAllCaps="false"
+                android:text="Invite"
+                android:textSize="16sp"
+                android:textColor="#ffffff"
+                android:paddingLeft="48dp"
+                android:paddingRight="48dp" />
 
-        <Button
-            android:id="@+id/actionButton"
+        </RelativeLayout>
+
+        <com.applozic.mobicomkit.uiwidgets.CustomTextViewRegular
+            android:id="@+id/result"
             android:layout_width="match_parent"
             android:layout_height="wrap_content"
-            android:fontFamily="sans-serif-light"
+            android:layout_centerInParent="true"
             android:gravity="center"
-            android:text="@string/invite"
+            android:text="@string/no_contacts"
             android:textAppearance="?android:attr/textAppearanceLarge"
-            android:visibility="gone" />
+            android:visibility="gone"/>
+
+    </RelativeLayout>
+
+    <!-- Use standard android.R class list id instead of app specific id. This is just useful for
+        consistency. -->
 
-    </LinearLayout>
 
 </FrameLayout>
\ No newline at end of file
