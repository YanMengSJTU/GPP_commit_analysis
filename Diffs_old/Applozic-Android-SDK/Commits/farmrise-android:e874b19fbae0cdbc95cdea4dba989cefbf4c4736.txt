diff --git a/app/app.iml b/app/app.iml
index f8071a79..790f720f 100755
--- a/app/app.iml
+++ b/app/app.iml
@@ -80,19 +80,25 @@
       <sourceFolder url="file://$MODULE_DIR$/src/androidTest/shaders" isTestSource="true" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/assets" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/blame" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/classes" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/incremental" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/incremental-safeguard" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/jniLibs" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/manifests" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/multi-dex" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/res" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/rs" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/shaders" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/symbols" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/transforms" />
       <excludeFolder url="file://$MODULE_DIR$/build/outputs" />
+      <excludeFolder url="file://$MODULE_DIR$/build/tmp" />
     </content>
     <orderEntry type="jdk" jdkName="Android API 27 Platform" jdkType="Android SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
     <orderEntry type="library" exported="" name="gifdecoder-4.5.0" level="project" />
     <orderEntry type="library" exported="" name="play-services-maps-license-11.8.0" level="project" />
+    <orderEntry type="library" exported="" name="libphonenumber-7.0.1" level="project" />
     <orderEntry type="library" exported="" name="firebase-messaging-license-11.8.0" level="project" />
     <orderEntry type="library" exported="" name="firebase-messaging-11.8.0" level="project" />
     <orderEntry type="library" exported="" name="firebase-common-license-11.8.0" level="project" />
diff --git a/app/build.gradle b/app/build.gradle
index f744ba50..d401c36b 100755
--- a/app/build.gradle
+++ b/app/build.gradle
@@ -64,6 +64,8 @@ dependencies {
     //compile 'com.facebook.android:facebook-android-sdk:4.1.0'
     compile 'com.android.support:design:27.1.0'
     compile 'com.android.support:multidex:1.0.1'
+    compile 'com.googlecode.libphonenumber:libphonenumber:7.0.1'
+
     //compile 'com.android.support:cardview-v7:22.0'
     //compile 'com.android.support:recyclerview-v7:22.0'
     compile('com.crashlytics.sdk.android:crashlytics:2.5.7@aar') {
diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
index 7bddc182..7d7bf5a4 100755
--- a/app/src/main/AndroidManifest.xml
+++ b/app/src/main/AndroidManifest.xml
@@ -21,6 +21,9 @@
     <uses-permission android:name="android.permission.CAMERA" />
     <uses-permission android:name="com.mobicomkit.sample.permission.MAPS_RECEIVE" />
 
+    <uses-permission android:name="android.permission.WRITE_CONTACTS" />
+
+
     <!-- To auto-complete the email text field in the login form with the user's emails -->
     <uses-permission android:name="android.permission.GET_ACCOUNTS" />
 
diff --git a/app/src/main/assets/applozic-settings.json b/app/src/main/assets/applozic-settings.json
index 990b212a..2407b91a 100644
--- a/app/src/main/assets/applozic-settings.json
+++ b/app/src/main/assets/applozic-settings.json
@@ -46,7 +46,7 @@
   "startNewGroup": true,
   "imageCompression": true,
   "inviteFriendsInContactActivity": true,
-  "registeredUserContactListCall": true,
+  "registeredUserContactListCall": false,
   "createAnyContact": false,
   "showActionDialWithOutCalling": false,
   "profileLogoutButton": false,
diff --git a/app/src/main/java/com/applozic/mobicomkit/sample/FRApplication.java b/app/src/main/java/com/applozic/mobicomkit/sample/FRApplication.java
new file mode 100644
index 00000000..9b29349c
--- /dev/null
+++ b/app/src/main/java/com/applozic/mobicomkit/sample/FRApplication.java
@@ -0,0 +1,126 @@
+package com.applozic.mobicomkit.sample;
+
+import android.annotation.SuppressLint;
+import android.app.Application;
+import android.content.Context;
+import android.content.pm.PackageInfo;
+import android.content.pm.PackageManager;
+import android.provider.Settings;
+import android.support.multidex.MultiDex;
+import android.text.TextUtils;
+
+import com.applozic.mobicommons.people.ALContactProcessor;
+import com.crashlytics.android.Crashlytics;
+import com.google.i18n.phonenumbers.PhoneNumberUtil;
+import com.google.i18n.phonenumbers.Phonenumber;
+
+import io.fabric.sdk.android.Fabric;
+
+/**
+ * Application Class for loading data prior to launcher activity and global app level implementations
+ */
+
+public class FRApplication extends Application implements ALContactProcessor {
+
+    private static FRApplication fr_applicationInstance;
+
+    public static FRApplication getInstance() {
+//        initializeFarmRiseApplicationInstance();
+        return fr_applicationInstance;
+    }
+
+
+    @Override
+    public void onCreate() {
+        super.onCreate();
+
+
+        initializeFarmRiseApplicationInstance();
+
+        //Initiate Crashlytics
+        initializeFabric();
+
+
+    }
+
+    private void initializeFabric() {
+        Fabric.with(this, new Crashlytics());
+        Crashlytics.log("Users Device Id " + getDeviceId());
+    }
+
+    @SuppressLint("HardwareIds")
+    public String getDeviceId() {
+        return Settings.Secure.getString(this.getContentResolver(),
+                Settings.Secure.ANDROID_ID);
+    }
+
+    private void initializeFarmRiseApplicationInstance() {
+        if (fr_applicationInstance == null) {
+            fr_applicationInstance = this;
+        }
+    }
+
+    /**
+     * Returns the current version name of the App
+     *
+     * @return appVersion
+     */
+    public String getAppVersion() {
+        PackageInfo packageInfo = null;
+        try {
+            packageInfo = getPackageManager().getPackageInfo(getPackageName(), 0);
+        } catch (PackageManager.NameNotFoundException e) {
+            e.printStackTrace();
+        }
+
+        if (packageInfo != null) {
+            return packageInfo.versionName;
+        } else {
+            //Update version name on every release to PlayStore
+            //Even if the package info is null, this will work
+            return "2.0.0";
+        }
+
+    }
+
+
+    // To avoid Multidex error
+    @Override
+    protected void attachBaseContext(Context base) {
+        super.attachBaseContext(base);
+        MultiDex.install(this);
+    }
+
+    @Override
+    public String processContact(String number, String defaultCountryCode) {
+        if (TextUtils.isEmpty(number)) {
+            return "";
+        }
+
+        Phonenumber.PhoneNumber phoneNumber;
+        PhoneNumberUtil phoneUtil = PhoneNumberUtil.getInstance();
+
+        if (TextUtils.isEmpty(number)) {
+            return "";
+        }
+
+        long contactNumber = 0;
+        int countryCode = 0;
+
+        try {
+            phoneNumber = phoneUtil.parse(number, defaultCountryCode);
+            if (phoneNumber.hasCountryCode()) {
+                countryCode = phoneNumber.getCountryCode();
+            }
+
+            contactNumber = phoneNumber.getNationalNumber();
+        } catch (Exception ex) {
+            try {
+                contactNumber = Long.parseLong(number);
+            } catch (Exception e) {
+                return number;
+            }
+        }
+        return "+" + countryCode + contactNumber;
+    }
+}
diff --git a/app/src/main/java/com/applozic/mobicomkit/sample/HomeActivity.java b/app/src/main/java/com/applozic/mobicomkit/sample/HomeActivity.java
index cadb8dc9..53758b0a 100644
--- a/app/src/main/java/com/applozic/mobicomkit/sample/HomeActivity.java
+++ b/app/src/main/java/com/applozic/mobicomkit/sample/HomeActivity.java
@@ -1,13 +1,17 @@
 package com.applozic.mobicomkit.sample;
 
+import android.*;
 import android.app.AlertDialog;
 import android.content.Context;
 import android.content.DialogInterface;
 import android.content.Intent;
+import android.content.pm.PackageManager;
 import android.net.Uri;
+import android.os.Build;
 import android.os.Bundle;
 import android.support.annotation.NonNull;
 import android.support.design.widget.BottomNavigationView;
+import android.support.v4.app.ActivityCompat;
 import android.support.v4.app.Fragment;
 import android.support.v4.app.FragmentActivity;
 import android.support.v4.app.FragmentManager;
@@ -17,6 +21,7 @@
 import android.support.v7.app.AppCompatActivity;
 import android.view.MenuItem;
 import android.view.View;
+import android.widget.Toast;
 
 import com.applozic.mobicomkit.Applozic;
 import com.applozic.mobicomkit.ApplozicClient;
@@ -39,6 +44,7 @@
 import com.applozic.mobicomkit.uiwidgets.conversation.activity.MobiComKitActivityInterface;
 import com.applozic.mobicomkit.uiwidgets.conversation.fragment.ConversationFragment;
 import com.applozic.mobicomkit.uiwidgets.conversation.fragment.MobiComQuickConversationFragment;
+import com.applozic.mobicomkit.uiwidgets.people.contact.DeviceContactSyncService;
 import com.applozic.mobicomkit.uiwidgets.people.fragment.ProfileFragment;
 import com.applozic.mobicommons.commons.core.utils.Utils;
 import com.applozic.mobicommons.people.channel.Channel;
@@ -66,6 +72,8 @@
     private BottomNavigationView bottomNavigationView;
     private String currentTab;
     private boolean isStopCalled = false;
+    // Request code for READ_CONTACTS. It can be any number > 0.
+    private static final int PERMISSIONS_REQUEST_READ_CONTACTS = 100;
     private BottomNavigationView.OnNavigationItemSelectedListener mOnNavigationItemSelectedListener
             = new BottomNavigationView.OnNavigationItemSelectedListener() {
         @Override
@@ -111,6 +119,7 @@ protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_home);
         initialize();
+        showContacts();
 
         //Put Support Contact Data
         //buildSupportContactData();
@@ -136,6 +145,43 @@ protected void onCreate(Bundle savedInstanceState) {
         fragmentTransaction.commit();
     }*/
 
+    /**
+     * Show the contacts in the ListView.
+     */
+    private void showContacts() {
+        // Check the SDK version and whether the permission is already granted or not.
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M &&
+
+                ActivityCompat.checkSelfPermission(this, android.Manifest.permission.READ_CONTACTS) !=
+                        PackageManager.PERMISSION_GRANTED){
+
+            ActivityCompat.requestPermissions(this, new String[]{android.Manifest.permission.READ_CONTACTS},
+                    PERMISSIONS_REQUEST_READ_CONTACTS);
+            //After this point you wait for callback in
+            // onRequestPermissionsResult(int, String[], int[]) override method
+        } else {
+            // Android version is lesser than 6.0 or the permission is already granted.
+            Intent intent = new Intent(this, DeviceContactSyncService.class);
+            DeviceContactSyncService.enqueueWork(this, intent);
+        }
+    }
+
+    @Override
+    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions,
+                                           @NonNull int[] grantResults) {
+        if (requestCode == PERMISSIONS_REQUEST_READ_CONTACTS) {
+            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {
+                // Permission is granted
+                showContacts();
+            } else {
+                Toast.makeText(this, "Until you grant the permission, we cannot display the names",
+                        Toast.LENGTH_SHORT).show();
+            }
+        }else{
+            super.onRequestPermissionsResult(requestCode, permissions, grantResults);
+        }
+    }
+
     private void initialize() {
 
         //Set Up BottomNavigationView
@@ -392,6 +438,9 @@ public void onSuccess(RegistrationResponse registrationResponse, final Context c
 
                 ApplozicClient.getInstance(context).setContextBasedChat(true).setHandleDial(true);
 
+                ApplozicClient.getInstance(context).enableDeviceContactSync(true);
+
+
                 /*Map<ApplozicSetting.RequestCode, String> activityCallbacks = new HashMap<ApplozicSetting.RequestCode, String>();
                 activityCallbacks.put(ApplozicSetting.RequestCode.USER_LOOUT, HomeActivity.class.getName());
                 ApplozicSetting.getInstance(context).setActivityCallbacks(activityCallbacks);*/
diff --git a/mobicomkit/mobicomkit.iml b/mobicomkit/mobicomkit.iml
index 295fe7d5..03339729 100755
--- a/mobicomkit/mobicomkit.iml
+++ b/mobicomkit/mobicomkit.iml
@@ -77,16 +77,22 @@
       <sourceFolder url="file://$MODULE_DIR$/src/androidTest/java" isTestSource="true" />
       <sourceFolder url="file://$MODULE_DIR$/src/androidTest/rs" isTestSource="true" />
       <sourceFolder url="file://$MODULE_DIR$/src/androidTest/shaders" isTestSource="true" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/annotations" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/blame" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/bundles" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/classes" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/incremental" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/incremental-safeguard" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/jniLibs" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/lint" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/manifests" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/res" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/rs" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/shaders" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/symbols" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/transforms" />
       <excludeFolder url="file://$MODULE_DIR$/build/outputs" />
+      <excludeFolder url="file://$MODULE_DIR$/build/tmp" />
     </content>
     <orderEntry type="jdk" jdkName="Android API 27 Platform" jdkType="Android SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/ApplozicClient.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/ApplozicClient.java
index 40113964..62e49d3e 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/ApplozicClient.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/ApplozicClient.java
@@ -7,6 +7,7 @@
 import com.applozic.mobicomkit.api.MobiComKitClientService;
 import com.applozic.mobicomkit.api.account.register.RegistrationResponse;
 import com.applozic.mobicomkit.api.account.user.MobiComUserPreference;
+import com.applozic.mobicommons.json.GsonUtils;
 
 import org.json.JSONObject;
 
@@ -38,6 +39,8 @@
     private static String vibration_notification = "vibration_notification";
     private static final String CUSTOM_STORAGE_SERVICE_ENABLED = "CUSTOM_STORAGE_SERVICE_ENABLED";
     private static final String STORAGE_SERVICE_ENABLE = "STORAGE_SERVICE_ENABLE";
+    private static final String CUSTOM_MESSAGE_TEMPLATE = "CUSTOM_MESSAGE_TEMPLATE";
+    private static final String ENABLE_DEVICE_CONTACT_SYNC = "ENABLE_DEVICE_CONTACT_SYNC";
 
     public static ApplozicClient applozicClient;
     public SharedPreferences sharedPreferences;
@@ -274,4 +277,22 @@ public boolean isStorageServiceEnabled() {
         return sharedPreferences.getBoolean(STORAGE_SERVICE_ENABLE, false);
     }
 
+    public Map<String, String> getMessageTemplates() {
+        return (Map<String, String>) GsonUtils.getObjectFromJson(sharedPreferences.getString(CUSTOM_MESSAGE_TEMPLATE, null), Map.class);
+    }
+
+    public ApplozicClient setMessageTemplates(Map<String, String> messageTemplates) {
+        sharedPreferences.edit().putString(CUSTOM_MESSAGE_TEMPLATE, GsonUtils.getJsonFromObject(messageTemplates, Map.class)).commit();
+        return this;
+    }
+
+    public boolean isDeviceContactSync() {
+        return sharedPreferences.getBoolean(ENABLE_DEVICE_CONTACT_SYNC, false);
+    }
+
+    public ApplozicClient enableDeviceContactSync(boolean isDeviceContactSync) {
+        sharedPreferences.edit().putBoolean(ENABLE_DEVICE_CONTACT_SYNC, isDeviceContactSync).commit();
+        return this;
+    }
+
 }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/ApplozicMqttService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/ApplozicMqttService.java
index 410c0d32..4e21c103 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/ApplozicMqttService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/ApplozicMqttService.java
@@ -4,6 +4,7 @@
 import android.os.Process;
 import android.text.TextUtils;
 
+import com.applozic.mobicomkit.ApplozicClient;
 import com.applozic.mobicomkit.api.account.user.MobiComUserPreference;
 import com.applozic.mobicomkit.api.conversation.Message;
 import com.applozic.mobicomkit.api.conversation.SyncCallService;
@@ -312,6 +313,10 @@ public void run() {
                                 syncCallService.syncUserDetail(userId);
                             }
 
+                            if (ApplozicClient.getInstance(context).isDeviceContactSync() && NOTIFICATION_TYPE.CONTACT_SYNC.getValue().equals(mqttMessageResponse.getType())) {
+                                syncCallService.processContactSync(mqttMessageResponse.getMessage().toString());
+                            }
+
                             if (NOTIFICATION_TYPE.MESSAGE_METADATA_UPDATE.getValue().equals(mqttMessageResponse.getType())) {
                                 String keyString = null;
                                 String deviceKey = null;
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/register/SyncClientService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/register/SyncClientService.java
new file mode 100644
index 00000000..3ed7efbc
--- /dev/null
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/register/SyncClientService.java
@@ -0,0 +1,58 @@
+package com.applozic.mobicomkit.api.account.register;
+
+import android.content.Context;
+import android.util.Log;
+
+import com.applozic.mobicomkit.api.HttpRequestUtils;
+import com.applozic.mobicomkit.api.MobiComKitClientService;
+import com.applozic.mobicomkit.feed.SyncApiResponse;
+import com.applozic.mobicommons.json.GsonUtils;
+
+/**
+ * Created by devashish on 24/12/14.
+ */
+public class SyncClientService extends MobiComKitClientService {
+
+    private static final String TAG = "SyncClientService";
+
+    public static final String SYNC_URL = "/rest/ws/sync/get";
+
+    private HttpRequestUtils httpRequestUtils;
+
+    public enum SyncType {
+        MESSAGE(0), GROUP(1), CONVERSATION(2), CONTACT(3);
+
+        private Integer value;
+
+        SyncType(Integer value) {
+            this.value = value;
+        }
+
+        public Short getValue() {
+            return value.shortValue();
+        }
+    }
+
+    public SyncClientService(Context context) {
+        super(context);
+        this.httpRequestUtils = new HttpRequestUtils(context);
+    }
+
+    public String getSyncUrl() {
+        return getBaseUrl() + SYNC_URL;
+    }
+
+    public SyncApiResponse getSyncCall(Long syncTime, SyncType syncType) {
+        try {
+            String response = httpRequestUtils.getResponse(getSyncUrl() + "?syncTime=" + syncTime + "&syncType=" + syncType.getValue() , "application/json", "application/json");
+            if(response != null) {
+                Log.i(TAG,"Sync call response: "+ response);
+                return (SyncApiResponse) GsonUtils.getObjectFromJson(response, SyncApiResponse.class);
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        return null;
+    }
+
+}
\ No newline at end of file
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/MobiComUserPreference.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/MobiComUserPreference.java
index 6cea6459..757f069b 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/MobiComUserPreference.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/MobiComUserPreference.java
@@ -68,6 +68,9 @@
     private static String last_sync_time_for_metadata_update = "lastSyncTimeForMetadataUpdate";
     private static String START_TIME_FOR_MESSAGE_LIST_SCROLL = "startTimeForMessageListScroll";
     private static String USER_ROLE_TYPE = "userRoleType";
+    private static String sync_contacts = "sync_contacts";
+    private static String contact_sync_time = "contact_sync_time";
+    private static String device_contact_sync_time = "device_contact_sync_time";
 
     private static SharedPreferences sharedPreferences;
     private Context context;
@@ -760,4 +763,48 @@ public Short getUserRoleType() {
         }
         return 0;
     }
+
+    public boolean isSyncRequired() {
+        if (sharedPreferences != null) {
+            return sharedPreferences.getBoolean(sync_contacts, false);
+        }
+        return false;
+    }
+
+
+    public void setSyncContacts(boolean syncConatcts) {
+        if (sharedPreferences != null) {
+            sharedPreferences.edit().putBoolean(sync_contacts, syncConatcts).commit();
+        }
+    }
+
+
+    public long getDeviceContactSyncTime() {
+        if (sharedPreferences != null) {
+            return sharedPreferences.getLong(device_contact_sync_time, 0);
+        }
+        return 0;
+    }
+
+
+    public void setDeviceContactSyncTime(long contactSyncTime) {
+        if (sharedPreferences != null) {
+            sharedPreferences.edit().putLong(device_contact_sync_time, contactSyncTime).commit();
+        }
+    }
+
+
+    public long getContactSyncTime() {
+        if (sharedPreferences != null) {
+            return sharedPreferences.getLong(contact_sync_time, 0);
+        }
+        return 0;
+    }
+
+
+    public void setContactSyncTime(long contactSyncTime) {
+        if (sharedPreferences != null) {
+            sharedPreferences.edit().putLong(contact_sync_time, contactSyncTime).commit();
+        }
+    }
 }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/UserClientService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/UserClientService.java
index ebf4a482..4bddff89 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/UserClientService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/UserClientService.java
@@ -59,9 +59,9 @@
     public static final String UPDATE_USER_PASSWORD = "/rest/ws/user/update/password";
     public static final String USER_LOGOUT = "/rest/ws/device/logout";
     public static final String APPLICATION_INFO_UPDATE_URL = "/apps/customer/application/info/update";
+    public static final int BATCH_SIZE = 60;
     private static final String MUTE_USER_URL = "/rest/ws/user/chat/mute";
     private static final String GET_MUTED_USER_LIST = "/rest/ws/user/chat/mute/list";
-    public static final int BATCH_SIZE = 60;
     private static final String TAG = "UserClientService";
     private HttpRequestUtils httpRequestUtils;
 
@@ -589,4 +589,51 @@ public String packageDetail(CustomerPackageDetail customerPackageDetail) {
         }
         return null;
     }
+
+    public String postUserDetailsByContactNos(Set<String> phoneNos) {
+        try {
+            if (phoneNos != null && phoneNos.size() > 0) {
+                List<String> phoneNumberList = new ArrayList<>();
+                String response = "";
+                int count = 0;
+                for (String phoneNo : phoneNos) {
+                    count++;
+                    phoneNumberList.add(phoneNo);
+                    if (count % BATCH_SIZE == 0) {
+                        UserDetailListFeed userDetailListFeed = new UserDetailListFeed();
+                        userDetailListFeed.setContactSync(true);
+                        userDetailListFeed.setPhoneNumberList(phoneNumberList);
+                        String jsonFromObject = GsonUtils.getJsonFromObject(userDetailListFeed, userDetailListFeed.getClass());
+                        Log.i(TAG, "Sending json:" + jsonFromObject);
+                        response = httpRequestUtils.postData(getUserDetailsListPostUrl() + "?contactSync=true", "application/json", "application/json", jsonFromObject);
+                        phoneNumberList = new ArrayList<String>();
+                        if (!TextUtils.isEmpty(response)) {
+                            UserService.getInstance(context).processUserDetailsResponse(response);
+                        }
+                    }
+                }
+                if (!phoneNumberList.isEmpty() && phoneNumberList.size() > 0) {
+                    UserDetailListFeed userDetailListFeed = new UserDetailListFeed();
+                    userDetailListFeed.setContactSync(true);
+                    userDetailListFeed.setPhoneNumberList(phoneNumberList);
+                    String jsonFromObject = GsonUtils.getJsonFromObject(userDetailListFeed, userDetailListFeed.getClass());
+                    response = httpRequestUtils.postData(getUserDetailsListPostUrl() + "?contactSync=true", "application/json", "application/json", jsonFromObject);
+
+                    Log.i(TAG, "User details response is :" + response);
+                    if (TextUtils.isEmpty(response) || response.contains("<html>")) {
+                        return null;
+                    }
+
+                    if (!TextUtils.isEmpty(response)) {
+                        UserService.getInstance(context).processUserDetailsResponse(response);
+                    }
+                }
+                return response;
+            }
+
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        return null;
+    }
 }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/UserService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/UserService.java
index c2e06d31..7b2dd359 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/UserService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/UserService.java
@@ -3,8 +3,10 @@
 import android.content.Context;
 import android.text.TextUtils;
 
+import com.applozic.mobicomkit.ApplozicClient;
 import com.applozic.mobicomkit.api.MobiComKitClientService;
 import com.applozic.mobicomkit.api.MobiComKitConstants;
+import com.applozic.mobicomkit.api.account.register.SyncClientService;
 import com.applozic.mobicomkit.api.notification.MuteUserResponse;
 import com.applozic.mobicomkit.broadcast.BroadcastService;
 import com.applozic.mobicomkit.contact.AppContactService;
@@ -12,7 +14,9 @@
 import com.applozic.mobicomkit.contact.database.ContactDatabase;
 import com.applozic.mobicomkit.feed.ApiResponse;
 import com.applozic.mobicomkit.feed.RegisteredUsersApiResponse;
+import com.applozic.mobicomkit.feed.SyncApiResponse;
 import com.applozic.mobicomkit.feed.SyncBlockUserApiResponse;
+import com.applozic.mobicomkit.feed.SyncPxy;
 import com.applozic.mobicomkit.sync.SyncUserBlockFeed;
 import com.applozic.mobicomkit.sync.SyncUserBlockListFeed;
 import com.applozic.mobicommons.commons.core.utils.Utils;
@@ -31,10 +35,12 @@
  */
 public class UserService {
 
+    private static final String TAG = "UserService";
     private static UserService userService;
     Context context;
     UserClientService userClientService;
     BaseContactService baseContactService;
+    SyncClientService syncClientService;
     private MobiComUserPreference userPreference;
 
     private UserService(Context context) {
@@ -42,7 +48,7 @@ private UserService(Context context) {
         userClientService = new UserClientService(context);
         userPreference = MobiComUserPreference.getInstance(context);
         baseContactService = new AppContactService(context);
-
+        this.syncClientService = new SyncClientService(context);
     }
 
     public static UserService getInstance(Context context) {
@@ -68,6 +74,9 @@ public synchronized void processSyncUserBlock() {
                                     baseContactService.updateUserBlocked(syncUserBlockedFeed.getBlockedTo(), syncUserBlockedFeed.getUserBlocked());
                                 } else {
                                     contact.setBlocked(syncUserBlockedFeed.getUserBlocked());
+                                    if (ApplozicClient.getInstance(context).isDeviceContactSync()) {
+                                        contact.setDeviceContactType(Contact.ContactType.APPLOZIC.getValue());
+                                    }
                                     contact.setUserId(syncUserBlockedFeed.getBlockedTo());
                                     baseContactService.upsert(contact);
                                     baseContactService.updateUserBlocked(syncUserBlockedFeed.getBlockedTo(), syncUserBlockedFeed.getUserBlocked());
@@ -83,6 +92,9 @@ public synchronized void processSyncUserBlock() {
                                     baseContactService.updateUserBlockedBy(syncUserBlockByFeed.getBlockedBy(), syncUserBlockByFeed.getUserBlocked());
                                 } else {
                                     contact.setBlockedBy(syncUserBlockByFeed.getUserBlocked());
+                                    if (ApplozicClient.getInstance(context).isDeviceContactSync()) {
+                                        contact.setDeviceContactType(Contact.ContactType.APPLOZIC.getValue());
+                                    }
                                     contact.setUserId(syncUserBlockByFeed.getBlockedBy());
                                     baseContactService.upsert(contact);
                                     baseContactService.updateUserBlockedBy(syncUserBlockByFeed.getBlockedBy(), syncUserBlockByFeed.getUserBlocked());
@@ -116,6 +128,10 @@ public synchronized void processUserDetail(Set<UserDetail> userDetails) {
         }
     }
 
+    public synchronized void processUserDetailsByContactNos(Set<String> contactNumbers) {
+        userClientService.postUserDetailsByContactNos(contactNumbers);
+    }
+
     public synchronized void processUserDetails(String userId) {
         Set<String> userIds = new HashSet<String>();
         userIds.add(userId);
@@ -132,8 +148,12 @@ public synchronized void processUserDetails(Set<String> userIds) {
         }
     }
 
-
     public synchronized void processUser(UserDetail userDetail) {
+        processUser(userDetail, Contact.ContactType.APPLOZIC);
+    }
+
+
+    public synchronized void processUser(UserDetail userDetail, Contact.ContactType contactType) {
         Contact contact = new Contact();
         contact.setUserId(userDetail.getUserId());
         contact.setContactNumber(userDetail.getPhoneNumber());
@@ -149,6 +169,11 @@ public synchronized void processUser(UserDetail userDetail) {
         if (!TextUtils.isEmpty(userDetail.getImageLink())) {
             contact.setImageURL(userDetail.getImageLink());
         }
+        if (ApplozicClient.getInstance(context).isDeviceContactSync()) {
+            contact.setDeviceContactType(contactType.getValue());
+        } else {
+            contact.setContactType(contactType.getValue());
+        }
         baseContactService.upsert(contact);
     }
 
@@ -303,4 +328,18 @@ public void processPackageDetail() {
             userPreference.setApplicationInfoCallDone(false);
         }
     }
+
+    public void processContactSync() {
+        Set<String> userIds = new HashSet<String>();
+        SyncApiResponse apiResponse = syncClientService.getSyncCall(MobiComUserPreference.getInstance(context).getContactSyncTime(), SyncClientService.SyncType.CONTACT);
+        if (apiResponse == null || apiResponse.getResponse() == null || apiResponse.getResponse().isEmpty()) {
+            Utils.printLog(context, TAG, "Contact Sync call response is empty.");
+            return;
+        }
+        for (SyncPxy syncPxy : apiResponse.getResponse()) {
+            userIds.add(syncPxy.getParam());
+        }
+        processUserDetails(userIds);
+        MobiComUserPreference.getInstance(context).setContactSyncTime(apiResponse.getGeneratedAt());
+    }
 }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/FileClientService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/FileClientService.java
index e2705b40..2dc5b57f 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/FileClientService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/FileClientService.java
@@ -18,7 +18,6 @@
 import com.applozic.mobicomkit.api.conversation.database.MessageDatabaseService;
 import com.applozic.mobicomkit.api.conversation.service.ConversationService;
 import com.applozic.mobicomkit.feed.TopicDetail;
-import com.applozic.mobicomkit.listners.MediaUploadProgressHandler;
 import com.applozic.mobicommons.commons.core.utils.Utils;
 import com.applozic.mobicommons.commons.image.ImageUtils;
 import com.applozic.mobicommons.file.FileUtils;
@@ -44,8 +43,8 @@
 public class FileClientService extends MobiComKitClientService {
 
     //Todo: Make the base folder configurable using either strings.xml or properties file
-    public static final String MOBI_COM_IMAGES_FOLDER = "/image";
-    public static final String MOBI_COM_VIDEOS_FOLDER = "/video";
+    public static final String MOBI_COM_IMAGES_FOLDER = "/FarmRise Images"; ///image
+    public static final String MOBI_COM_VIDEOS_FOLDER = "/FarmRise Videos"; ///video
     public static final String MOBI_COM_CONTACT_FOLDER = "/contact";
     public static final String MOBI_COM_OTHER_FILES_FOLDER = "/other";
     public static final String MOBI_COM_THUMBNAIL_SUFIX = "/.Thumbnail";
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/ConversationIntentService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/ConversationIntentService.java
index f3ccb0b1..51fa3e40 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/ConversationIntentService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/ConversationIntentService.java
@@ -1,17 +1,23 @@
 package com.applozic.mobicomkit.api.conversation;
 
-import android.app.IntentService;
 import android.content.Context;
 import android.content.Intent;
 import android.support.annotation.NonNull;
 import android.support.v4.app.JobIntentService;
+import android.text.TextUtils;
 
+import com.applozic.mobicomkit.ApplozicClient;
+import com.applozic.mobicomkit.api.account.user.MobiComUserPreference;
 import com.applozic.mobicomkit.api.account.user.UserService;
+import com.applozic.mobicomkit.contact.AppContactService;
 import com.applozic.mobicommons.commons.core.utils.Utils;
 import com.applozic.mobicommons.people.channel.Channel;
 import com.applozic.mobicommons.people.contact.Contact;
 
+import java.util.Date;
+import java.util.HashSet;
 import java.util.List;
+import java.util.Set;
 
 /**
  * Created by devashish on 15/12/13.
@@ -94,6 +100,23 @@ public void run() {
                 MobiComConversationService mobiComConversationService = new MobiComConversationService(ConversationIntentService.this);
                 List<Message> messages = mobiComConversationService.getLatestMessagesGroupByPeople();
                 UserService.getInstance(ConversationIntentService.this).processSyncUserBlock();
+
+                if (ApplozicClient.getInstance(ConversationIntentService.this).isDeviceContactSync()) {
+                    Set<String> contactNoSet = new HashSet<String>();
+                    List<Contact> contacts = new AppContactService(ConversationIntentService.this).getContacts(Contact.ContactType.DEVICE);
+                    for (Contact contact : contacts) {
+                        if (!TextUtils.isEmpty(contact.getFormattedContactNumber())) {
+                            contactNoSet.add(contact.getFormattedContactNumber());
+                        }
+                    }
+
+                    if (!contactNoSet.isEmpty()) {
+                        UserService userService = UserService.getInstance(getApplicationContext());
+                        userService.processUserDetailsByContactNos(contactNoSet);
+                    }
+                    MobiComUserPreference.getInstance(ConversationIntentService.this).setDeviceContactSyncTime(new Date().getTime());
+                }
+
                 for (Message message : messages.subList(0, Math.min(PRE_FETCH_MESSAGES_FOR, messages.size()))) {
                     Contact contact = null;
                     Channel channel = null;
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/MessageListTask.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/MessageListTask.java
index b596b993..4dd2265f 100644
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/MessageListTask.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/MessageListTask.java
@@ -73,7 +73,9 @@ protected void onPostExecute(List<Message> messageList) {
                         messages.add(message);
                     }
                 }
-                MobiComUserPreference.getInstance(context.get()).setStartTimeForPagination(messageList.get(messageList.size() - 1).getCreatedAtTime());
+                if (!messageList.isEmpty()) {
+                    MobiComUserPreference.getInstance(context.get()).setStartTimeForPagination(messageList.get(messageList.size() - 1).getCreatedAtTime());
+                }
             }
         }
         if (handler != null) {
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/SyncCallService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/SyncCallService.java
index cefc19c2..68a301ac 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/SyncCallService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/SyncCallService.java
@@ -13,6 +13,7 @@
 import com.applozic.mobicomkit.contact.BaseContactService;
 import com.applozic.mobicomkit.contact.database.ContactDatabase;
 import com.applozic.mobicommons.commons.core.utils.Utils;
+import com.applozic.mobicommons.people.contact.Contact;
 
 import java.util.Calendar;
 import java.util.Date;
@@ -180,4 +181,23 @@ public void syncUserDetail(String userId) {
         messageClientService.processUserStatus(userId, true);
     }
 
+    public void processContactSync(final String userId) {
+        Utils.printLog(context,TAG, "process contact sync for userId: " + userId);
+        if (!TextUtils.isEmpty(userId) && contactService.isContactPresent(userId)) {
+            Contact contact = contactService.getContactById(userId);
+
+
+            if (contact.isApplozicType()) {
+                Utils.printLog(context,TAG, "Contact is already present, MQTT reached before GCM.");
+                return;
+            }
+        }
+        new Thread(new Runnable() {
+            @Override
+            public void run() {
+                UserService.getInstance(context).processContactSync();
+            }
+        }).start();
+    }
+
 }
\ No newline at end of file
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/notification/MobiComPushReceiver.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/notification/MobiComPushReceiver.java
index 1c7e0120..c4af86a8 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/notification/MobiComPushReceiver.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/notification/MobiComPushReceiver.java
@@ -6,14 +6,15 @@
 import android.text.TextUtils;
 import android.util.Log;
 
+import com.applozic.mobicomkit.ApplozicClient;
 import com.applozic.mobicomkit.api.account.user.MobiComUserPreference;
 import com.applozic.mobicomkit.api.conversation.Message;
 import com.applozic.mobicomkit.api.conversation.MobiComConversationService;
 import com.applozic.mobicomkit.api.conversation.SyncCallService;
 import com.applozic.mobicomkit.api.conversation.database.MessageDatabaseService;
 import com.applozic.mobicomkit.broadcast.BroadcastService;
-import com.applozic.mobicomkit.feed.InstantMessageResponse;
 import com.applozic.mobicomkit.feed.GcmMessageResponse;
+import com.applozic.mobicomkit.feed.InstantMessageResponse;
 import com.applozic.mobicomkit.feed.MqttMessageResponse;
 import com.applozic.mobicommons.json.GsonUtils;
 
@@ -160,7 +161,7 @@ public static void processMessage(Context context, Bundle bundle, Map<String, St
                     messageSent = null, deleteConversationForContact = null, deleteConversationForChannel = null,
                     deleteMessage = null, conversationReadResponse = null,
                     userBlockedResponse = null, userUnBlockedResponse = null, conversationReadForContact = null, conversationReadForChannel = null, conversationReadForSingleMessage = null,
-                    userDetailChanged = null, userDeleteNotification = null, messageMetadataUpdate = null, mutedUserListResponse = null;
+                    userDetailChanged = null, userDeleteNotification = null, messageMetadataUpdate = null, mutedUserListResponse = null, contactSync = null;
             SyncCallService syncCallService = SyncCallService.getInstance(context);
 
             if (bundle != null) {
@@ -182,6 +183,7 @@ public static void processMessage(Context context, Bundle bundle, Map<String, St
                 userDeleteNotification = bundle.getString(notificationKeyList.get(31));
                 messageMetadataUpdate = bundle.getString(notificationKeyList.get(30));
                 mutedUserListResponse = bundle.getString(notificationKeyList.get(32));
+                contactSync = bundle.getString(notificationKeyList.get(25));
             } else if (data != null) {
                 deleteConversationForContact = data.get(notificationKeyList.get(5));
                 deleteMessage = data.get(notificationKeyList.get(4));
@@ -201,6 +203,7 @@ public static void processMessage(Context context, Bundle bundle, Map<String, St
                 userDeleteNotification = data.get(notificationKeyList.get(31));
                 messageMetadataUpdate = data.get(notificationKeyList.get(30));
                 mutedUserListResponse = data.get(notificationKeyList.get(32));
+                contactSync = data.get(notificationKeyList.get(25));
             }
 
             if (!TextUtils.isEmpty(payloadForDelivered)) {
@@ -405,6 +408,15 @@ public static void processMessage(Context context, Bundle bundle, Map<String, St
                 syncCallService.syncMessageMetadataUpdate(keyString, true);
             }
 
+            if (ApplozicClient.getInstance(context).isDeviceContactSync() && !TextUtils.isEmpty(contactSync)) {
+                MqttMessageResponse mqttMessageResponse = (MqttMessageResponse) GsonUtils.getObjectFromJson(contactSync, MqttMessageResponse.class);
+                if (processPushNotificationId(mqttMessageResponse.getId())) {
+                    return;
+                }
+                addPushNotificationId(mqttMessageResponse.getId());
+                syncCallService.processContactSync(mqttMessageResponse.getMessage().toString());
+            }
+
             if (!TextUtils.isEmpty(mutedUserListResponse)) {
                 try {
                     InstantMessageResponse response = (InstantMessageResponse) GsonUtils.getObjectFromJson(mutedUserListResponse, InstantMessageResponse.class);
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/notification/NotificationService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/notification/NotificationService.java
index 38a5a0c9..c9e9b708 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/notification/NotificationService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/notification/NotificationService.java
@@ -93,6 +93,12 @@ public void notifyUser(Contact contact, Channel channel, Message message) {
                     Contact newContact = appContactService.getContactById(userId);
                     notificationIconBitmap = appContactService.downloadContactImage(context, newContact);
                 }
+            } else if (Channel.GroupType.SUPPORT_GROUP.getValue().equals(channel.getType())) {
+                String userId = message.getTo();
+                if (!TextUtils.isEmpty(userId)) {
+                    Contact newContact = appContactService.getContactById(userId);
+                    notificationIconBitmap = appContactService.downloadContactImage(context, newContact);
+                }
             } else {
                 notificationIconBitmap = appContactService.downloadGroupImage(context, channel);
             }
@@ -148,7 +154,7 @@ public void notifyUser(Contact contact, Channel channel, Message message) {
 
         // Sets a title for the Inbox in expanded layout
 
-        inboxStyle.setBigContentTitle(getNotificationTitle(count, contact, channel));
+        inboxStyle.setBigContentTitle(getNotificationTitle(count, contact, channel, message));
 
         // Moves events into the expanded layout
         try {
@@ -188,7 +194,7 @@ public void notifyUser(Contact contact, Channel channel, Message message) {
             mBuilder.setContentText(summaryText);
         }
         inboxStyle.setSummaryText(summaryText);
-        mBuilder.setContentTitle(getNotificationTitle(count, contact, channel));
+        mBuilder.setContentTitle(getNotificationTitle(count, contact, channel, message));
         mBuilder.setStyle(inboxStyle);
 
         // Issue the notification here.
@@ -231,7 +237,7 @@ public void notifyUser(Contact contact, Channel channel, Message message) {
         }
     }
 
-    public CharSequence getNotificationTitle(int conversationCount, Contact contact, Channel channel) {
+    public CharSequence getNotificationTitle(int conversationCount, Contact contact, Channel channel, Message message) {
         if (conversationCount < 2) {
             String notificationTitle = null;
             if (channel != null) {
@@ -243,6 +249,14 @@ public CharSequence getNotificationTitle(int conversationCount, Contact contact,
                             notificationTitle = receiverContact.getDisplayName();
                         }
                     }
+                } else if (Channel.GroupType.SUPPORT_GROUP.getValue().equals(channel.getType())) {
+                    String userId = message.getTo();
+                    if (!TextUtils.isEmpty(userId)) {
+                        Contact receiverContact = appContactService.getContactById(userId);
+                        if (receiverContact != null) {
+                            notificationTitle = receiverContact.getDisplayName();
+                        }
+                    }
                 } else {
                     notificationTitle = channel.getName().trim();
                 }
@@ -272,7 +286,7 @@ public CharSequence getMessageBody(Message message, int count, Channel channel,
         CharSequence messageBody;
         Contact messageContactDisplayName = contact != null ? contact : appContactService.getContactById(message.getTo());
         if (message.getGroupId() != null) {
-            if (Channel.GroupType.GROUPOFTWO.getValue().equals(channel.getType())) {
+            if (Channel.GroupType.GROUPOFTWO.getValue().equals(channel.getType()) || Channel.GroupType.SUPPORT_GROUP.getValue().equals(channel.getType())) {
                 messageBody = Utils.getStyleStringForMessage(notificationText);
             } else {
                 messageBody = Utils.getStyledStringForChannel(messageContactDisplayName.getDisplayName(), channel.getName(), notificationText);
@@ -308,6 +322,13 @@ public void notifyUserForNormalMessage(Contact contact, Channel channel, Message
                     notificationIconBitmap = appContactService.downloadContactImage(context, newContact);
                     title = newContact.getDisplayName();
                 }
+            } else if (Channel.GroupType.SUPPORT_GROUP.getValue().equals(channel.getType())) {
+                String userId = message.getTo();
+                if (!TextUtils.isEmpty(userId)) {
+                    Contact newContact = appContactService.getContactById(userId);
+                    notificationIconBitmap = appContactService.downloadGroupImage(context, channel);
+                    title = newContact.getDisplayName();
+                }
             } else {
                 displayNameContact = appContactService.getContactById(message.getTo());
                 title = ChannelUtils.getChannelTitleName(channel, MobiComUserPreference.getInstance(context).getUserId());
@@ -355,12 +376,12 @@ public void notifyUserForNormalMessage(Contact contact, Channel channel, Message
         NotificationCompat.Builder mBuilder = new NotificationCompat.Builder(context, MobiComKitConstants.AL_PUSH_NOTIFICATION);
 
         mBuilder.setSmallIcon(smallIconResourceId)
-                .setLargeIcon(ApplozicClient.getInstance(context).isShowAppIconInNotification() ? BitmapFactory.decodeResource(context.getResources(), iconResourceId) : notificationIconBitmap != null ? notificationIconBitmap : BitmapFactory.decodeResource(context.getResources(), context.getResources().getIdentifier(channel != null && !Channel.GroupType.GROUPOFTWO.getValue().equals(channel.getType()) ? applozicClient.getDefaultChannelImage() : applozicClient.getDefaultContactImage(), "drawable", context.getPackageName())))
+                .setLargeIcon(ApplozicClient.getInstance(context).isShowAppIconInNotification() ? BitmapFactory.decodeResource(context.getResources(), iconResourceId) : notificationIconBitmap != null ? notificationIconBitmap : BitmapFactory.decodeResource(context.getResources(), context.getResources().getIdentifier(channel != null && !(Channel.GroupType.GROUPOFTWO.getValue().equals(channel.getType()) || Channel.GroupType.SUPPORT_GROUP.getValue().equals(channel.getType())) ? applozicClient.getDefaultChannelImage() : applozicClient.getDefaultContactImage(), "drawable", context.getPackageName())))
                 .setCategory(NotificationCompat.CATEGORY_MESSAGE)
                 .setPriority(NotificationCompat.PRIORITY_MAX)
                 .setWhen(System.currentTimeMillis())
                 .setContentTitle(title)
-                .setContentText(channel != null && !Channel.GroupType.GROUPOFTWO.getValue().equals(channel.getType()) ? displayNameContact.getDisplayName() + ": " + notificationText : notificationText)
+                .setContentText(channel != null && !(Channel.GroupType.GROUPOFTWO.getValue().equals(channel.getType()) || Channel.GroupType.SUPPORT_GROUP.getValue().equals(channel.getType())) ? displayNameContact.getDisplayName() + ": " + notificationText : notificationText)
                 .setSound(TextUtils.isEmpty(MobiComUserPreference.getInstance(context).getNotificationSoundFilePath()) ? RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION) : Uri.parse(MobiComUserPreference.getInstance(context).getNotificationSoundFilePath()));
         mBuilder.setContentIntent(pendingIntent);
         mBuilder.setAutoCancel(true);
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/broadcast/BroadcastService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/broadcast/BroadcastService.java
index 01cd2f7b..6028fd6a 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/broadcast/BroadcastService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/broadcast/BroadcastService.java
@@ -7,7 +7,7 @@
 
 import com.applozic.mobicomkit.api.MobiComKitConstants;
 import com.applozic.mobicomkit.api.conversation.Message;
-
+import com.applozic.mobicomkit.api.notification.NotificationIntentService;
 import com.applozic.mobicommons.commons.core.utils.Utils;
 import com.applozic.mobicommons.json.GsonUtils;
 
@@ -55,7 +55,7 @@ public static synchronized boolean setContextBasedChat(boolean contextBasedChat)
     }
 
     public static void sendFirstTimeSyncCompletedBroadcast(Context context) {
-        Utils.printLog(context,TAG, "Sending " + INTENT_ACTIONS.FIRST_TIME_SYNC_COMPLETE.toString() + " broadcast");
+        Utils.printLog(context, TAG, "Sending " + INTENT_ACTIONS.FIRST_TIME_SYNC_COMPLETE.toString() + " broadcast");
         Intent intent = new Intent();
         intent.setAction(INTENT_ACTIONS.FIRST_TIME_SYNC_COMPLETE.toString());
         intent.addCategory(Intent.CATEGORY_DEFAULT);
@@ -63,7 +63,7 @@ public static void sendFirstTimeSyncCompletedBroadcast(Context context) {
     }
 
     public static void sendLoadMoreBroadcast(Context context, boolean loadMore) {
-        Utils.printLog(context,TAG, "Sending " + INTENT_ACTIONS.LOAD_MORE.toString() + " broadcast");
+        Utils.printLog(context, TAG, "Sending " + INTENT_ACTIONS.LOAD_MORE.toString() + " broadcast");
         Intent intent = new Intent();
         intent.setAction(INTENT_ACTIONS.LOAD_MORE.toString());
         intent.addCategory(Intent.CATEGORY_DEFAULT);
@@ -72,7 +72,7 @@ public static void sendLoadMoreBroadcast(Context context, boolean loadMore) {
     }
 
     public static void sendDeliveryReportForContactBroadcast(Context context, String action, String contactId) {
-        Utils.printLog(context,TAG, "Sending message delivery report of contact broadcast for " + action + ", " + contactId);
+        Utils.printLog(context, TAG, "Sending message delivery report of contact broadcast for " + action + ", " + contactId);
         Intent intentUpdate = new Intent();
         intentUpdate.setAction(action);
         intentUpdate.addCategory(Intent.CATEGORY_DEFAULT);
@@ -81,7 +81,7 @@ public static void sendDeliveryReportForContactBroadcast(Context context, String
     }
 
     public static void sendMessageUpdateBroadcast(Context context, String action, Message message) {
-        Utils.printLog(context,TAG, "Sending message update broadcast for " + action + ", " + message.getKeyString());
+        Utils.printLog(context, TAG, "Sending message update broadcast for " + action + ", " + message.getKeyString());
         Intent intentUpdate = new Intent();
         intentUpdate.setAction(action);
         intentUpdate.addCategory(Intent.CATEGORY_DEFAULT);
@@ -90,7 +90,7 @@ public static void sendMessageUpdateBroadcast(Context context, String action, Me
     }
 
     public static void sendMessageDeleteBroadcast(Context context, String action, String keyString, String contactNumbers) {
-        Utils.printLog(context,TAG, "Sending message delete broadcast for " + action);
+        Utils.printLog(context, TAG, "Sending message delete broadcast for " + action);
         Intent intentDelete = new Intent();
         intentDelete.setAction(action);
         intentDelete.putExtra("keyString", keyString);
@@ -100,7 +100,7 @@ public static void sendMessageDeleteBroadcast(Context context, String action, St
     }
 
     public static void sendConversationDeleteBroadcast(Context context, String action, String contactNumber, Integer channelKey, String response) {
-        Utils.printLog(context,TAG, "Sending conversation delete broadcast for " + action);
+        Utils.printLog(context, TAG, "Sending conversation delete broadcast for " + action);
         Intent intentDelete = new Intent();
         intentDelete.setAction(action);
         intentDelete.putExtra("channelKey", channelKey);
@@ -112,13 +112,18 @@ public static void sendConversationDeleteBroadcast(Context context, String actio
 
 
     public static void sendNotificationBroadcast(Context context, Message message) {
-        Utils.printLog(context,TAG, "Sending notification broadcast....");
-        PushNotificationDispatcher.scheduleJob(context, message);
+        Utils.printLog(context, TAG, "Sending notification broadcast....");
+        //PushNotificationDispatcher.scheduleJob(context, message);
+        Intent notificationIntentService = new Intent(context, NotificationIntentService.class);
+        notificationIntentService.setAction(NotificationIntentService.ACTION_AL_NOTIFICATION);
+        notificationIntentService.putExtra(MobiComKitConstants.AL_MESSAGE_KEY, message.getKeyString());
+        NotificationIntentService.enqueueWork(context, notificationIntentService, 0, 0, 0, 0);
+
     }
 
 
     public static void sendUpdateLastSeenAtTimeBroadcast(Context context, String action, String contactId) {
-        Utils.printLog(context,TAG, "Sending lastSeenAt broadcast....");
+        Utils.printLog(context, TAG, "Sending lastSeenAt broadcast....");
         Intent intent = new Intent();
         intent.setAction(action);
         intent.putExtra("contactId", contactId);
@@ -127,7 +132,7 @@ public static void sendUpdateLastSeenAtTimeBroadcast(Context context, String act
     }
 
     public static void sendUpdateTypingBroadcast(Context context, String action, String applicationId, String userId, String isTyping) {
-        Utils.printLog(context,TAG, "Sending typing Broadcast.......");
+        Utils.printLog(context, TAG, "Sending typing Broadcast.......");
         Intent intentTyping = new Intent();
         intentTyping.setAction(action);
         intentTyping.putExtra("applicationId", applicationId);
@@ -139,7 +144,7 @@ public static void sendUpdateTypingBroadcast(Context context, String action, Str
 
 
     public static void sendUpdate(Context context, String action) {
-        Utils.printLog(context,TAG, action);
+        Utils.printLog(context, TAG, action);
         Intent intent = new Intent();
         intent.setAction(action);
         intent.addCategory(Intent.CATEGORY_DEFAULT);
@@ -157,7 +162,7 @@ public static void updateMessageMetadata(Context context, String messageKey, Str
 
 
     public static void sendConversationReadBroadcast(Context context, String action, String currentId, boolean isGroup) {
-        Utils.printLog(context,TAG, "Sending  Broadcast for conversation read ......");
+        Utils.printLog(context, TAG, "Sending  Broadcast for conversation read ......");
         Intent intent = new Intent();
         intent.setAction(action);
         intent.putExtra("currentId", currentId);
@@ -226,7 +231,7 @@ public static void sendBroadcast(Context context, Intent intent) {
 
     public enum INTENT_ACTIONS {
         LOAD_MORE, FIRST_TIME_SYNC_COMPLETE, MESSAGE_SYNC_ACK_FROM_SERVER,
-        SYNC_MESSAGE, DELETE_MESSAGE, DELETE_CONVERSATION, MESSAGE_DELIVERY, MESSAGE_DELIVERY_FOR_CONTACT, INSTRUCTION,UPDATE_GROUP_INFO,
+        SYNC_MESSAGE, DELETE_MESSAGE, DELETE_CONVERSATION, MESSAGE_DELIVERY, MESSAGE_DELIVERY_FOR_CONTACT, INSTRUCTION, UPDATE_GROUP_INFO,
         UPLOAD_ATTACHMENT_FAILED, MESSAGE_ATTACHMENT_DOWNLOAD_DONE, MESSAGE_ATTACHMENT_DOWNLOAD_FAILD,
         UPDATE_LAST_SEEN_AT_TIME, UPDATE_TYPING_STATUS, MESSAGE_READ_AND_DELIVERED, MESSAGE_READ_AND_DELIVERED_FOR_CONTECT, CHANNEL_SYNC,
         CONTACT_VERIFIED, NOTIFY_USER, MQTT_DISCONNECTED, UPDATE_CHANNEL_NAME, UPDATE_TITLE_SUBTITLE, CONVERSATION_READ, UPDATE_USER_DETAIL, MESSAGE_METADATA_UPDATE, MUTE_USER_CHAT
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/broadcast/ConnectivityReceiver.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/broadcast/ConnectivityReceiver.java
index d8903c72..80d459f0 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/broadcast/ConnectivityReceiver.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/broadcast/ConnectivityReceiver.java
@@ -29,7 +29,13 @@ public void onReceive(@NonNull final Context context,@NonNull Intent intent) {
         LocalBroadcastManager.getInstance(context).sendBroadcast(new Intent(action));
         Utils.printLog(context, TAG, action);
 
-        if (action.equalsIgnoreCase(CONNECTIVITY_CHANGE) || action.equalsIgnoreCase(BOOT_COMPLETED)) {
+        if(BOOT_COMPLETED.equalsIgnoreCase(action)){
+            Intent connectivityIntent = new Intent(context, ApplozicIntentService.class);
+            connectivityIntent.putExtra(ApplozicIntentService.AL_SYNC_ON_CONNECTIVITY, true);
+            ApplozicIntentService.enqueueWork(context,connectivityIntent);
+        }
+
+        if (CONNECTIVITY_CHANGE.equalsIgnoreCase(action)) {
             if (!Utils.isInternetAvailable(context)) {
                 firstConnect = true;
                 return;
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/contact/AppContactService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/contact/AppContactService.java
index e6d05794..43db78df 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/contact/AppContactService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/contact/AppContactService.java
@@ -4,6 +4,7 @@
 import android.graphics.Bitmap;
 import android.text.TextUtils;
 
+import com.applozic.mobicomkit.ApplozicClient;
 import com.applozic.mobicomkit.api.attachment.FileClientService;
 import com.applozic.mobicomkit.broadcast.BroadcastService;
 import com.applozic.mobicomkit.channel.service.ChannelService;
@@ -66,24 +67,55 @@ public Contact getContactById(String contactId) {
             contact.processContactNumbers(context);
         } else {
             contact = new Contact(context, contactId);
-            add(contact);
+            if (ApplozicClient.getInstance(context).isDeviceContactSync()) {
+                upsert(contact);
+            } else {
+                add(contact);
+            }
         }
         return contact;
     }
 
     @Override
     public void updateContact(Contact contact) {
+        if (ApplozicClient.getInstance(context).isDeviceContactSync()) {
+            contact.processContactNumbers(context);
+        }
         contactDatabase.updateContact(contact);
     }
 
     @Override
     public void upsert(Contact contact) {
-        if (contactDatabase.getContactById(contact.getUserId()) == null) {
-            contactDatabase.addContact(contact);
+        if (ApplozicClient.getInstance(context).isDeviceContactSync()) {
+            contact.processContactNumbers(context);
+            if (contact.getDeviceContactType() == null || TextUtils.isEmpty(contact.getFormattedContactNumber())) {
+                if (contactDatabase.getContactById(contact.getUserId()) == null) {
+                    contactDatabase.addContact(contact);
+                } else {
+                    contactDatabase.updateContact(contact);
+                }
+            } else {
+                //Need to check if contact no exist
+                if (contactDatabase.getContactByPhoneNo(contact.getFormattedContactNumber()) != null) {
+                    contactDatabase.updateContactByPhoneNumber(contact);
+                } else if (contactDatabase.getContactById(contact.getUserId()) == null) {
+                    contactDatabase.addContact(contact);
+                } else {
+                    contactDatabase.updateContact(contact);
+                }
+            }
         } else {
-            contactDatabase.updateContact(contact);
+            if (contactDatabase.getContactById(contact.getUserId()) == null) {
+                contactDatabase.addContact(contact);
+            } else {
+                contactDatabase.updateContact(contact);
+            }
         }
+    }
 
+    @Override
+    public List<Contact> getContacts(Contact.ContactType contactType) {
+        return contactDatabase.getContacts(contactType);
     }
 
     @Override
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/contact/BaseContactService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/contact/BaseContactService.java
index e48dfe1c..ad50dba7 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/contact/BaseContactService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/contact/BaseContactService.java
@@ -53,4 +53,6 @@
     int getGroupConversationCount();
 
     void updateLocalImageUri(Contact contact);
+
+    List<Contact> getContacts(Contact.ContactType contactType);
 }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/contact/DeviceContactService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/contact/DeviceContactService.java
index 6c2bfd45..2f9895b9 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/contact/DeviceContactService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/contact/DeviceContactService.java
@@ -1,14 +1,25 @@
 package com.applozic.mobicomkit.contact;
 
 import android.content.Context;
+import android.database.Cursor;
 import android.graphics.Bitmap;
-
+import android.provider.ContactsContract;
+import android.telephony.TelephonyManager;
+import android.text.TextUtils;
+
+import com.applozic.mobicomkit.api.account.user.UserService;
+import com.applozic.mobicomkit.contact.database.ContactDatabase;
+import com.applozic.mobicommons.commons.core.utils.Utils;
+import com.applozic.mobicommons.people.ALContactProcessor;
 import com.applozic.mobicommons.people.channel.Channel;
 import com.applozic.mobicommons.people.contact.Contact;
 import com.applozic.mobicommons.people.contact.ContactUtils;
 
+import java.util.ArrayList;
 import java.util.Date;
+import java.util.HashSet;
 import java.util.List;
+import java.util.Set;
 
 /**
  * Created by adarsh on 7/7/15.
@@ -130,4 +141,124 @@ public void updateLocalImageUri(Contact contact) {
 
     }
 
+    @Override
+    public List<Contact> getContacts(Contact.ContactType contactType) {
+        return null;
+    }
+
+    public Contact getContactFromContactCursor(Cursor people) {
+        String contactNO = people.getString(people.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER));
+        String displayName = people.getString(people.getColumnIndex(ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME));
+        String lookupKey = "lkupkey-" + people.getString(people.getColumnIndex(ContactsContract.CommonDataKinds.Phone.LOOKUP_KEY));
+
+
+        if (!TextUtils.isEmpty(contactNO) && contactNO.trim().length() > 8) {
+            contactNO = contactNO.trim().replace(" ", "").replace("-", "");
+            contactNO = contactNO.replaceFirst("^0+(?!$)", "");
+        } else {
+            return null;
+        }
+
+        Utils.printLog(context, "DeviceContactService", "Modified Display name  : " + displayName);
+
+        String formattedPhoneNumber = contactNO;
+
+        TelephonyManager telephonyManager = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);
+        String countryCode = telephonyManager.getSimCountryIso().toUpperCase();
+        if (((ALContactProcessor) context.getApplicationContext()) != null) {
+            formattedPhoneNumber = ((ALContactProcessor) context.getApplicationContext()).processContact(contactNO, countryCode);
+        }
+
+        ContactDatabase contactDatabase = new ContactDatabase(context);
+        Contact contact = contactDatabase.getContactByPhoneNo(formattedPhoneNumber);
+        Contact contactByLookupKey = contactDatabase.getContactById(lookupKey);
+
+        /*if (contactDatabase.isContactPresent(formattedPhoneNumber, Contact.ContactType.DEVICE_AND_APPLOZIC)) {
+            return null;
+        }*/
+
+        if (contact != null) {
+            //Log.d(TAG, "Contact is present with the same phone number: " + formattedPhoneNumber);
+            lookupKey = contact.getUserId();
+            if (!displayName.equals(contact.getPhoneDisplayName())) {
+                contactDatabase.updatePhoneContactDisplayName(formattedPhoneNumber, displayName, contact.getDeviceContactType());
+                return contact;
+            }
+        } else if (contactByLookupKey != null) {
+            //Log.d(TAG, "Contact is present with the same lookupkey: " + lookupKey);
+            lookupKey = lookupKey + "-" + formattedPhoneNumber;
+            if (!displayName.equals(contactByLookupKey.getPhoneDisplayName())) {
+                contactDatabase.updateContact(contactByLookupKey);
+                return contactByLookupKey;
+            }
+        }
+
+        if (contactDatabase.isContactPresent(formattedPhoneNumber, Contact.ContactType.DEVICE_AND_APPLOZIC)) {
+            return null;
+        }
+
+        Contact newContact = new Contact();
+        newContact.setContactNumber(formattedPhoneNumber);
+        newContact.setUserId(lookupKey);
+        newContact.setDeviceContactType(Contact.ContactType.DEVICE.getValue());
+        newContact.setFullName(displayName);
+        newContact.setPhoneDisplayName(displayName);
+        newContact.processContactNumbers(context);
+        return newContact;
+    }
+
+    public List<String> getModifiedContacts() {
+        List<String> contactIdList = new ArrayList<>();
+        Cursor cursor = context.getContentResolver().query(ContactsContract.RawContacts.CONTENT_URI,
+                new String[]{ContactsContract.RawContacts.CONTACT_ID}, ContactsContract.RawContacts.DIRTY + "=1", null, null);
+        if (cursor != null && cursor.getCount() > 0) {
+            while (cursor.moveToNext()) {
+                if (!TextUtils.isEmpty(cursor.getString(0))) {
+                    contactIdList.add(cursor.getString(0));
+                }
+            }
+        }
+
+        if (cursor != null) {
+            cursor.close();
+        }
+        Utils.printLog(context, "DeviceContactService", "Total modified contacts to sync : " + contactIdList.size());
+        return contactIdList;
+    }
+
+    public void processModifiedContacts() {
+        try {
+            Set<String> contactNumberList = new HashSet<String>();
+            AppContactService appContactService = new AppContactService(context);
+            for (String contactId : getModifiedContacts()) {
+                Cursor cursorPhone = context.getContentResolver().query(ContactsContract.CommonDataKinds.Phone.CONTENT_URI,
+                        new String[]{ContactsContract.CommonDataKinds.Phone.NUMBER, ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME,
+                                ContactsContract.CommonDataKinds.Phone.LOOKUP_KEY},
+                        ContactsContract.CommonDataKinds.Phone.CONTACT_ID + " = ? AND " +
+                                ContactsContract.CommonDataKinds.Phone.TYPE + " = " +
+                                ContactsContract.CommonDataKinds.Phone.TYPE_MOBILE,
+                        new String[]{contactId},
+                        null);
+
+                if (cursorPhone != null && cursorPhone.getCount() > 0) {
+                    while (cursorPhone.moveToNext()) {
+                        Contact contact = getContactFromContactCursor(cursorPhone);
+                        appContactService.upsert(contact);
+                        contactNumberList.add(contact.getFormattedContactNumber());
+                    }
+                }
+                if (cursorPhone != null) {
+                    cursorPhone.close();
+                }
+            }
+
+            if (contactNumberList != null && contactNumberList.size() > 0) {
+                UserService.getInstance(context).processUserDetailsByContactNos(contactNumberList);
+            }
+
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+
 }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/contact/database/ContactDatabase.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/contact/database/ContactDatabase.java
index 05820d26..951265d7 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/contact/database/ContactDatabase.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/contact/database/ContactDatabase.java
@@ -4,6 +4,8 @@
 import android.content.Context;
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
+import android.net.Uri;
+import android.provider.ContactsContract;
 import android.support.v4.content.CursorLoader;
 import android.support.v4.content.Loader;
 import android.text.TextUtils;
@@ -74,6 +76,13 @@ public Contact getContact(Cursor cursor, String primaryKeyAliash) {
             contact.setRoleType(cursor.getShort(cursor.getColumnIndex(MobiComDatabaseHelper.USER_ROLE_TYPE)));
             contact.setLastMessageAtTime(cursor.getLong(cursor.getColumnIndex(MobiComDatabaseHelper.LAST_MESSAGED_AT)));
 
+            if (ApplozicClient.getInstance(context).isDeviceContactSync()) {
+                //String phoneDisplayName = getContactName(contact.getFormattedContactNumber());
+                //contact.setPhoneDisplayName(!TextUtils.isEmpty(phoneDisplayName) ? phoneDisplayName : cursor.getString(cursor.getColumnIndex(MobiComDatabaseHelper.PHONE_CONTACT_DISPLAY_NAME)));
+                contact.setDeviceContactType(cursor.getShort(cursor.getColumnIndex(MobiComDatabaseHelper.DEVICE_CONTACT_TYPE)));
+                contact.setPhoneDisplayName(cursor.getString(cursor.getColumnIndex(MobiComDatabaseHelper.PHONE_CONTACT_DISPLAY_NAME)));
+            }
+
             String metadata = cursor.getString(cursor.getColumnIndex(MobiComDatabaseHelper.USER_METADATA));
             if (!TextUtils.isEmpty(metadata)) {
                 contact.setMetadata((Map<String, String>) GsonUtils.getObjectFromJson(metadata, Map.class));
@@ -84,6 +93,24 @@ public Contact getContact(Cursor cursor, String primaryKeyAliash) {
         return contact;
     }
 
+    private String getContactName(String contactNumber) {
+        String contactName = null;
+        try {
+            Uri uri = Uri.withAppendedPath(ContactsContract.PhoneLookup.CONTENT_FILTER_URI, Uri.encode(contactNumber));
+            Cursor cursor = context.getContentResolver().query(uri, new String[]{ContactsContract.PhoneLookup.DISPLAY_NAME}, null, null, null);
+            if (cursor != null && cursor.moveToFirst()) {
+                contactName = cursor.getString(cursor.getColumnIndex(ContactsContract.Contacts.DISPLAY_NAME));
+            }
+            if (cursor != null) {
+                cursor.close();
+            }
+
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        return contactName;
+    }
+
     /**
      * Form a single contact details from cursor
      *
@@ -209,23 +236,43 @@ public void updateUserBlockByStatus(String userId, boolean userBlockedBy) {
 
     public void addContact(Contact contact) {
         try {
+            if (ApplozicClient.getInstance(context).isDeviceContactSync()) {
+                contact.processContactNumbers(context);
+                if (contact.getDeviceContactType() == null) {
+                    contact.setDeviceContactType(Contact.ContactType.APPLOZIC.getValue());
+                }
+            }
             ContentValues contentValues = prepareContactValues(contact);
             dbHelper.getWritableDatabase().insert(CONTACT, null, contentValues);
         } catch (Exception e) {
-            Utils.printLog(context,TAG,"Ignoring duplicate entry for contact");
+            Utils.printLog(context, TAG, "Ignoring duplicate entry for contact");
         } finally {
             dbHelper.close();
         }
-
     }
 
     public ContentValues prepareContactValues(Contact contact) {
         ContentValues contentValues = new ContentValues();
         Contact contactImage = null;
         contentValues.put(MobiComDatabaseHelper.FULL_NAME, getFullNameForUpdate(contact));
-        if (!TextUtils.isEmpty(contact.getContactNumber())) {
-            contentValues.put(MobiComDatabaseHelper.CONTACT_NO, contact.getContactNumber());
+
+        if (ApplozicClient.getInstance(context).isDeviceContactSync()) {
+            if (contact.getDeviceContactType() != null) {
+                contentValues.put(MobiComDatabaseHelper.DEVICE_CONTACT_TYPE, contact.getDeviceContactType());
+                contentValues.put(MobiComDatabaseHelper.APPLOZIC_TYPE, contact.isApplozicType() ? 1 : 0);
+            }
+            if (!TextUtils.isEmpty(contact.getFormattedContactNumber())) {
+                contentValues.put(MobiComDatabaseHelper.CONTACT_NO, contact.getFormattedContactNumber());
+            }
+            if (!TextUtils.isEmpty(contact.getPhoneDisplayName())) {
+                contentValues.put(MobiComDatabaseHelper.PHONE_CONTACT_DISPLAY_NAME, contact.getPhoneDisplayName());
+            }
+        } else {
+            if (!TextUtils.isEmpty(contact.getContactNumber())) {
+                contentValues.put(MobiComDatabaseHelper.CONTACT_NO, contact.getContactNumber());
+            }
         }
+
         if (!TextUtils.isEmpty(contact.getImageURL())) {
             contentValues.put(MobiComDatabaseHelper.CONTACT_IMAGE_URL, contact.getImageURL());
             contactImage = getContactById(contact.getUserId());
@@ -419,9 +466,210 @@ public Cursor loadInBackground() {
         };
     }
 
+    public Loader<Cursor> getPhoneContactCursorLoader(final String searchString, final String[] userIdArray, final boolean isLoadAllContact) {
+
+
+        return new CursorLoader(context, null, null, null, null, MobiComDatabaseHelper.DISPLAY_NAME + " asc") {
+            @Override
+            public Cursor loadInBackground() {
+
+                if (TextUtils.isEmpty(userPreferences.getUserId())) {
+                    return null;
+                }
+                SQLiteDatabase db = dbHelper.getReadableDatabase();
+                Cursor cursor;
+                String query = "select userId as _id, fullName, contactNO, " +
+                        "displayName,contactImageURL,contactImageLocalURI,email," +
+                        "applicationId,connected,lastSeenAt,unreadCount,blocked," +
+                        "blockedBy,status,contactType,phoneContactDisplayName,deviceContactType,userTypeId,applozicType,deletedAtTime,notificationAfterTime,userRoleType,userMetadata,lastMessagedAt from " + CONTACT + " where deletedAtTime=0 ";
+
+                if (userIdArray != null && userIdArray.length > 0) {
+                    String placeHolderString = Utils.makePlaceHolders(userIdArray.length);
+                    if (!TextUtils.isEmpty(searchString)) {
+                        query = query + " and phoneContactDisplayName like '%" + searchString.replaceAll("'", "''") + "%' and  userId  IN (" + placeHolderString + ")";
+                    } else {
+                        query = query + " and userId IN (" + placeHolderString + ")";
+                    }
+                    query = query + " order by connected desc,lastSeenAt desc ";
+
+                    cursor = db.rawQuery(query, userIdArray);
+                } else {
+                    if (ApplozicClient.getInstance(context).isShowMyContacts()) {
+                        if (!TextUtils.isEmpty(searchString)) {
+                            query = query + " and phoneContactDisplayName like '%" + searchString.replaceAll("'", "''") + "%' AND deviceContactType != 0 AND userId NOT IN ('" + userPreferences.getUserId().replaceAll("'", "''") + "')";
+                        } else {
+                            query = query + " and deviceContactType != 0 AND userId != '" + userPreferences.getUserId() + "'";
+                        }
+                    } else {
+                        if (!TextUtils.isEmpty(searchString)) {
+                            query = query + " AND phoneContactDisplayName like '%" + searchString.replaceAll("'", "''") + "%' AND " + (isLoadAllContact ? "deviceContactType != 0" : "deviceContactType = 2") + " AND userId NOT IN ('" + userPreferences.getUserId().replaceAll("'", "''") + "')";
+                        } else {
+                            query = query + " AND " + (isLoadAllContact ? "deviceContactType != 0" : "deviceContactType = 2") + " AND userId != '" + userPreferences.getUserId() + "'";
+                        }
+                    }
+                    query = query + " order by applozicType desc, phoneContactDisplayName COLLATE NOCASE,userId COLLATE NOCASE asc ";
+                    cursor = db.rawQuery(query, null);
+                }
+
+                return cursor;
+
+            }
+        };
+    }
+
+
     public void updateContactLocalImageURIToNull(String userId) {
         ContentValues contentValues = new ContentValues();
         contentValues.putNull(MobiComDatabaseHelper.CONTACT_IMAGE_LOCAL_URI);
         int updatedRow = dbHelper.getWritableDatabase().update(CONTACT, contentValues, MobiComDatabaseHelper.USERID + "=?", new String[]{userId});
     }
+
+    public List<Contact> getContacts(Contact.ContactType contactType) {
+        SQLiteDatabase db = dbHelper.getWritableDatabase();
+        String structuredNameWhere = MobiComDatabaseHelper.CONTACT_TYPE + " = ?";
+        Cursor cursor = db.query(CONTACT, null, structuredNameWhere, new String[]{String.valueOf(contactType.getValue())}, null, null, MobiComDatabaseHelper.FULL_NAME + " asc");
+        List<Contact> contactList = getContactList(cursor);
+        cursor.close();
+        dbHelper.close();
+        return contactList;
+    }
+
+    public void updateContactByPhoneNumber(Contact contact) {
+        try {
+            if (contact == null || TextUtils.isEmpty(contact.getFormattedContactNumber())) {
+                return;
+            }
+
+
+            if (Contact.ContactType.APPLOZIC.getValue().equals(contact.getDeviceContactType()) || Contact.ContactType.DEVICE_AND_APPLOZIC.getValue().equals(contact.getDeviceContactType())) {
+                //applozic contact
+                if (isContactPresent(contact.getFormattedContactNumber(), Contact.ContactType.DEVICE)) {
+                    List<Contact> contactDevice = getContactsByContactNumberAndType(contact.getFormattedContactNumber(), Contact.ContactType.DEVICE.getValue());
+                    for (Contact c : contactDevice) {
+                        contact.setPhoneDisplayName(c.getPhoneDisplayName());
+                    }
+                    contact.setDeviceContactType(Contact.ContactType.DEVICE_AND_APPLOZIC.getValue());
+                }
+                saveOrUpdate(contact);
+            } else if (Contact.ContactType.DEVICE.getValue().equals(contact.getDeviceContactType())) {
+                //device contact
+                if (isContactPresent(contact.getFormattedContactNumber(), Contact.ContactType.DEVICE_AND_APPLOZIC)) {//do nothing
+                } else if (isContactPresent(contact.getFormattedContactNumber(), Contact.ContactType.APPLOZIC)) {
+                    List<Contact> contactListApplozic = getContactsByContactNumberAndType(contact.getFormattedContactNumber(), Contact.ContactType.APPLOZIC.getValue());
+                    for (Contact c : contactListApplozic) {
+                        c.setDeviceContactType(Contact.ContactType.DEVICE_AND_APPLOZIC.getValue());
+                        updateContact(c);
+                    }
+                } else if (isContactPresent(contact.getFormattedContactNumber(), Contact.ContactType.DEVICE)) {
+                    saveOrUpdate(contact);
+                } else {
+                    addContact(contact);
+                }
+            } else {
+                saveOrUpdate(contact);
+            }
+
+
+            if (isContactPresent(contact.getFormattedContactNumber(), Contact.ContactType.DEVICE_AND_APPLOZIC)) {
+                if (!TextUtils.isEmpty(contact.getPhoneDisplayName())) {
+                    updatePhoneContactDisplayName(contact.getFormattedContactNumber(), contact.getPhoneDisplayName(), Contact.ContactType.DEVICE_AND_APPLOZIC.getValue());
+                }
+                deleteContactByPhoneNumber(contact.getFormattedContactNumber(), Contact.ContactType.DEVICE.getValue());
+                deleteContactByPhoneNumber(contact.getFormattedContactNumber(), Contact.ContactType.APPLOZIC.getValue());
+                //deleteContactByLookUpKey(contact.getContactNumber());
+            }
+
+
+            dbHelper.close();
+        } catch (Throwable t) {
+        }
+    }
+
+
+    public void updatePhoneContactDisplayName(String contactNumber, String displayName, int type) {
+        try {
+            ContentValues contentValues = new ContentValues();
+            contentValues.put(MobiComDatabaseHelper.PHONE_CONTACT_DISPLAY_NAME, displayName);
+            int row = dbHelper.getWritableDatabase().update(CONTACT, contentValues, MobiComDatabaseHelper.CONTACT_NO + "=? AND " + MobiComDatabaseHelper.DEVICE_CONTACT_TYPE + "=?", new String[]{contactNumber, String.valueOf(type)});
+        } catch (Exception e) {
+            e.printStackTrace();
+        } finally {
+            dbHelper.close();
+        }
+    }
+
+
+    public boolean isContactPresent(String contactNumber, Contact.ContactType contactType) {
+        try {
+            SQLiteDatabase db = dbHelper.getWritableDatabase();
+            final Cursor cursor = db.rawQuery("SELECT COUNT(*) FROM contact where  " + MobiComDatabaseHelper.CONTACT_NO + " = ?  AND " + MobiComDatabaseHelper.DEVICE_CONTACT_TYPE + " = ? ", new String[]{contactNumber, String.valueOf(contactType.getValue())});
+
+
+            cursor.moveToFirst();
+            boolean present = cursor.getInt(0) > 0;
+
+
+            if (cursor != null) {
+                cursor.close();
+            }
+            dbHelper.close();
+            return present;
+
+
+        } catch (Exception ex) {
+        }
+        return false;
+    }
+
+
+    public void saveOrUpdate(Contact contact) {
+        Contact existingContact = getContactById(contact.getUserId());
+        if (existingContact == null) {
+            addContact(contact);
+        } else {
+            if (Contact.ContactType.DEVICE_AND_APPLOZIC.getValue().equals(contact.getDeviceContactType())) {
+                contact.setDeviceContactType(existingContact.getDeviceContactType());
+            }
+            updateContact(contact);
+        }
+    }
+
+
+    public void deleteContactByPhoneNumber(String conatctNumber, int type) {
+        dbHelper.getWritableDatabase().delete(CONTACT, MobiComDatabaseHelper.CONTACT_NO + "=? AND " + MobiComDatabaseHelper.DEVICE_CONTACT_TYPE + "=?", new String[]{conatctNumber, String.valueOf(type)});
+        dbHelper.close();
+    }
+
+
+    public List<Contact> getContactsByContactNumberAndType(String contactNumber, int contactType) {
+        SQLiteDatabase db = dbHelper.getWritableDatabase();
+        String structuredNameWhere = MobiComDatabaseHelper.CONTACT_NO + " = ? AND " + MobiComDatabaseHelper.DEVICE_CONTACT_TYPE + " = ? ";
+        Cursor cursor = db.query(CONTACT, null, structuredNameWhere, new String[]{contactNumber, String.valueOf(contactType)}, null, null, null);
+        List<Contact> contactList = getContactList(cursor);
+        cursor.close();
+        dbHelper.close();
+        return contactList;
+    }
+
+
+    public Contact getContactByPhoneNo(String contactNO) {
+        if (TextUtils.isEmpty(contactNO)) {
+            return null;
+        }
+
+
+        String structuredNameWhere = "contactNO = ?";
+        SQLiteDatabase db = dbHelper.getWritableDatabase();
+        Cursor cursor = db.query(CONTACT, null, structuredNameWhere, new String[]{contactNO}, null, null, null);
+        Contact contact = null;
+        if (cursor != null) {
+            if (cursor.getCount() > 0) {
+                cursor.moveToFirst();
+                contact = getContact(cursor);
+            }
+            cursor.close();
+        }
+        dbHelper.close();
+        return contact;
+    }
 }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/database/MobiComDatabaseHelper.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/database/MobiComDatabaseHelper.java
index e7caa135..97f9d1e1 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/database/MobiComDatabaseHelper.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/database/MobiComDatabaseHelper.java
@@ -4,6 +4,7 @@
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteOpenHelper;
 
+import com.applozic.mobicomkit.ApplozicClient;
 import com.applozic.mobicomkit.api.MobiComKitClientService;
 import com.applozic.mobicomkit.api.account.user.MobiComUserPreference;
 import com.applozic.mobicomkit.api.account.user.UserClientService;
@@ -12,7 +13,7 @@
 
 public class MobiComDatabaseHelper extends SQLiteOpenHelper {
 
-    public static final int DB_VERSION = 30;
+    public static final int DB_VERSION = 31;
 
     public static final String _ID = "_id";
     public static final String DB_NAME = "APPLOZIC_LOCAL_DATABASE";
@@ -73,6 +74,9 @@
     public static final String LAST_MESSAGED_AT = "lastMessagedAt";
     public static final String URL = "url";
     public static final String ROLE = "role";
+    public static final String APPLOZIC_TYPE = "applozicType";
+    public static final String PHONE_CONTACT_DISPLAY_NAME = "phoneContactDisplayName";
+    public static final String DEVICE_CONTACT_TYPE = "deviceContactType";
 
 
     public static final String CREATE_SCHEDULE_SMS_TABLE = "create table " + SCHEDULE_SMS_TABLE_NAME + "( "
@@ -154,6 +158,10 @@
     private static final String ALTER_CONTACT_TABLE_FOR_LAST_MESSAGED_AT = "ALTER TABLE " + CONTACT_TABLE_NAME + " ADD COLUMN " + LAST_MESSAGED_AT + " integer default 0";
     private static final String ALTER_SMS_TABLE_FOR_FILE_URL = "ALTER TABLE " + SMS + " ADD COLUMN url varchar(2000)";
     private static final String ALTER_CHANNEL_USER_MAPPER_TABLE_FOR_ROLE = "ALTER TABLE " + CHANNEL_USER_X + " ADD COLUMN " + ROLE + " integer default 0";
+    private static final String ALTER_CONTACT_TABLE_FOR_PHONE_CONTACT_DISPLAY_NAME = "ALTER TABLE " + CONTACT_TABLE_NAME + " ADD COLUMN " + PHONE_CONTACT_DISPLAY_NAME + " varchar(100) ";
+    private static final String ALTER_CONTACT_TABLE_FOR_APPLOZIC_TYPE = "ALTER TABLE " + CONTACT_TABLE_NAME + " ADD COLUMN " + APPLOZIC_TYPE + " integer default 1";
+    private static final String ALTER_CONTACT_TABLE_FOR_DEVICE_CONTACT_TYPE = "ALTER TABLE " + CONTACT_TABLE_NAME + " ADD COLUMN " + DEVICE_CONTACT_TYPE + " integer default 1";
+
     private static final String CREATE_CONTACT_TABLE = " CREATE TABLE contact ( " +
             USERID + " VARCHAR(50) primary key, "
             + FULL_NAME + " VARCHAR(200), "
@@ -169,13 +177,16 @@
             + BLOCKED + " integer default 0, "
             + BLOCKED_BY + " integer default 0, "
             + STATUS + " varchar(2500) null, "
+            + PHONE_CONTACT_DISPLAY_NAME + " varchar(100),"
             + CONTACT_TYPE + " integer default 0,"
+            + APPLOZIC_TYPE + " integer default 0, "
             + USER_TYPE_ID + " integer default 0,"
             + DELETED_AT + " INTEGER default 0, "
             + NOTIFICATION_AFTER_TIME + " integer default 0, "
             + USER_ROLE_TYPE + " integer default 0, "
             + LAST_MESSAGED_AT + " integer, "
-            + USER_METADATA + " varchar(2000) null"
+            + USER_METADATA + " varchar(2000) null, "
+            + DEVICE_CONTACT_TYPE + " integer default 1"
             + " ) ";
 
     private static final String CREATE_CHANNEL_TABLE = " CREATE TABLE channel ( " +
@@ -385,6 +396,15 @@ public void onUpgrade(SQLiteDatabase database, int oldVersion,
             if (!DBUtils.existsColumnInTable(database, "CHANNEL_USER_X", ROLE)) {
                 database.execSQL(ALTER_CHANNEL_USER_MAPPER_TABLE_FOR_ROLE);
             }
+            if (!DBUtils.existsColumnInTable(database, "contact", APPLOZIC_TYPE)) {
+                database.execSQL(ALTER_CONTACT_TABLE_FOR_APPLOZIC_TYPE);
+            }
+            if (!DBUtils.existsColumnInTable(database, "contact", PHONE_CONTACT_DISPLAY_NAME)) {
+                database.execSQL(ALTER_CONTACT_TABLE_FOR_PHONE_CONTACT_DISPLAY_NAME);
+            }
+            if (!DBUtils.existsColumnInTable(database, CONTACT_TABLE_NAME, DEVICE_CONTACT_TYPE)) {
+                database.execSQL(ALTER_CONTACT_TABLE_FOR_DEVICE_CONTACT_TYPE);
+            }
             database.execSQL(CREATE_INDEX_ON_CREATED_AT);
             database.execSQL(CREATE_INDEX_SMS_TYPE);
             database.execSQL(ALTER_SMS_TABLE);
@@ -421,7 +441,7 @@ public int delDatabase() {
 
         db.execSQL("delete from " + SMS_TABLE_NAME);
 
-        db.execSQL("delete from " + CONTACT_TABLE_NAME);
+        db.execSQL("delete from " + CONTACT_TABLE_NAME + (ApplozicClient.getInstance(context).isDeviceContactSync() ? " where " + DEVICE_CONTACT_TYPE + " = 0" : ""));
 
         db.execSQL("delete from " + CHANNEL);
 
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/ApiResponse.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/ApiResponse.java
index 50e5af7a..a7eee1b5 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/ApiResponse.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/ApiResponse.java
@@ -7,12 +7,12 @@
 /**
  * Created by sunil on 23/12/15.
  */
-public class ApiResponse extends JsonMarker {
+public class ApiResponse<T> extends JsonMarker {
 
     private static final String SUCCESS = "success";
     private String status;
-    private String generatedAt;
-    private Object response;
+    private Long generatedAt;
+    private T response;
     private List<ErrorResponseFeed> errorResponse;
 
 
@@ -24,19 +24,19 @@ public void setStatus(String status) {
         this.status = status;
     }
 
-    public String getGeneratedAt() {
+    public Long getGeneratedAt() {
         return generatedAt;
     }
 
-    public void setGeneratedAt(String generatedAt) {
+    public void setGeneratedAt(Long generatedAt) {
         this.generatedAt = generatedAt;
     }
 
-    public Object getResponse() {
+    public T getResponse() {
         return response;
     }
 
-    public void setResponse(Object response) {
+    public void setResponse(T response) {
         this.response = response;
     }
 
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/SyncApiResponse.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/SyncApiResponse.java
new file mode 100644
index 00000000..c0d309c6
--- /dev/null
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/SyncApiResponse.java
@@ -0,0 +1,10 @@
+package com.applozic.mobicomkit.feed;
+
+import java.util.List;
+
+/**
+ * Created by Devashish on 12/08/16.
+ */
+public class SyncApiResponse extends ApiResponse<List<SyncPxy>> {
+
+}
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/SyncPxy.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/SyncPxy.java
new file mode 100644
index 00000000..f7ed1a3c
--- /dev/null
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/SyncPxy.java
@@ -0,0 +1,45 @@
+package com.applozic.mobicomkit.feed;
+
+/**
+ * Created by Devashish on 12/08/16.
+ */
+
+public class SyncPxy {
+
+    private Short type;
+    private String operation;
+    private String param;
+    private Long createdAtTime;
+
+    public Short getType() {
+        return type;
+    }
+
+    public void setType(Short type) {
+        this.type = type;
+    }
+
+    public String getOperation() {
+        return operation;
+    }
+
+    public void setOperation(String operation) {
+        this.operation = operation;
+    }
+
+    public String getParam() {
+        return param;
+    }
+
+    public void setParam(String param) {
+        this.param = param;
+    }
+
+    public Long getCreatedAtTime() {
+        return createdAtTime;
+    }
+
+    public void setCreatedAtTime(Long createdAtTime) {
+        this.createdAtTime = createdAtTime;
+    }
+}
\ No newline at end of file
diff --git a/mobicomkitui/mobicomkitui.iml b/mobicomkitui/mobicomkitui.iml
index fd8e0d55..6fa826ad 100755
--- a/mobicomkitui/mobicomkitui.iml
+++ b/mobicomkitui/mobicomkitui.iml
@@ -77,16 +77,22 @@
       <sourceFolder url="file://$MODULE_DIR$/src/test/java" isTestSource="true" />
       <sourceFolder url="file://$MODULE_DIR$/src/test/rs" isTestSource="true" />
       <sourceFolder url="file://$MODULE_DIR$/src/test/shaders" isTestSource="true" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/annotations" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/blame" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/bundles" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/classes" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/incremental" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/incremental-safeguard" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/jniLibs" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/lint" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/manifests" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/res" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/rs" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/shaders" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/symbols" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/transforms" />
       <excludeFolder url="file://$MODULE_DIR$/build/outputs" />
+      <excludeFolder url="file://$MODULE_DIR$/build/tmp" />
     </content>
     <orderEntry type="jdk" jdkName="Android API 27 Platform" jdkType="Android SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/ContactsChangeObserver.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/ContactsChangeObserver.java
new file mode 100644
index 00000000..778fedcf
--- /dev/null
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/ContactsChangeObserver.java
@@ -0,0 +1,43 @@
+package com.applozic.mobicomkit.uiwidgets;
+
+import android.content.Context;
+import android.content.Intent;
+import android.database.ContentObserver;
+import android.os.Handler;
+import android.util.Log;
+
+import com.applozic.mobicomkit.uiwidgets.people.contact.DeviceContactSyncService;
+
+/**
+ * Created by ashish on 23/03/18.
+ */
+
+public class ContactsChangeObserver extends ContentObserver {
+
+    private static final String TAG = "ContactsChangeObserver";
+    Context context;
+    /**
+     * Creates a content observer.
+     *
+     * @param handler The handler to run {@link #onChange} on, or null if none.
+     */
+    public ContactsChangeObserver(Handler handler, Context context) {
+        super(handler);
+        this.context = context;
+    }
+
+    @Override
+    public boolean deliverSelfNotifications() {
+        return true;
+    }
+
+    @Override
+    public void onChange(boolean selfChange) {
+        super.onChange(selfChange);
+        Log.i(TAG, "ContentObserver is called for contacts change");
+        Intent intent = new Intent(context.getApplicationContext(), DeviceContactSyncService.class);
+        intent.putExtra(DeviceContactSyncService.PROCESS_MODIFIED_DEVICE_CONTACTS, true);
+        DeviceContactSyncService.enqueueWork(context.getApplicationContext(), intent);
+    }
+
+}
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/ConversationActivity.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/ConversationActivity.java
index e95fd326..1b688b96 100755
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/ConversationActivity.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/ConversationActivity.java
@@ -654,7 +654,8 @@ public void onRequestPermissionsResult(int requestCode, String[] permissions,int
     }
 
     public void processingLocation() {
-        if (alCustomizationSettings.isLocationShareViaMap() && !TextUtils.isEmpty(geoApiKey) && !API_KYE_STRING.equals(geoApiKey)) {
+        if (alCustomizationSettings.isLocationShareViaMap() && !TextUtils.isEmpty(geoApiKey)
+                && !API_KYE_STRING.equals(geoApiKey)) {
             Intent toMapActivity = new Intent(this, MobicomLocationActivity.class);
             startActivityForResult(toMapActivity, MultimediaOptionFragment.REQUEST_CODE_SEND_LOCATION);
         } else {
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/adapter/MobicomMessageTemplateAdapter.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/adapter/MobicomMessageTemplateAdapter.java
index 059385d6..04628da8 100644
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/adapter/MobicomMessageTemplateAdapter.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/adapter/MobicomMessageTemplateAdapter.java
@@ -3,7 +3,6 @@
 import android.content.Context;
 import android.graphics.Color;
 import android.graphics.drawable.GradientDrawable;
-import android.support.annotation.NonNull;
 import android.support.v7.widget.RecyclerView;
 import android.util.TypedValue;
 import android.view.LayoutInflater;
@@ -11,6 +10,7 @@
 import android.view.ViewGroup;
 import android.widget.TextView;
 
+import com.applozic.mobicomkit.ApplozicClient;
 import com.applozic.mobicomkit.uiwidgets.R;
 import com.applozic.mobicomkit.uiwidgets.conversation.MobicomMessageTemplate;
 
@@ -28,23 +28,31 @@
     private MessageTemplateDataListener listener;
     private List<String> messageList;
     private Map<String, String> messageMap;
+    private Context context;
 
-    public MobicomMessageTemplateAdapter(MobicomMessageTemplate messageTemplate) {
+    public MobicomMessageTemplateAdapter(Context context, MobicomMessageTemplate messageTemplate) {
         this.messageTemplate = messageTemplate;
-        this.messageList = new ArrayList<>(messageTemplate.getMessages().keySet());
-        this.messageMap = messageTemplate.getMessages();
+        messageMap = messageTemplate.getMessages();
+        Map<String, String> tempMap = ApplozicClient.getInstance(context).getMessageTemplates();
+
+        if (tempMap != null && !tempMap.isEmpty()) {
+            messageMap.putAll(tempMap);
+        }
+
+        messageList = new ArrayList<>(messageMap.keySet());
+
+        this.context = context;
     }
 
-    @NonNull
     @Override
-    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
+    public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
         View itemView = LayoutInflater.from(parent.getContext())
                 .inflate(R.layout.mobicom_message_template_item, parent, false);
         return new ViewHolder(itemView);
     }
 
     @Override
-    public void onBindViewHolder(@NonNull ViewHolder holder, final int position) {
+    public void onBindViewHolder(ViewHolder holder, final int position) {
         holder.messageText.setText(messageList.get(position));
         holder.messageText.setTextColor(Color.parseColor(messageTemplate.getTextColor()));
         holder.messageText.setBackgroundDrawable(getShape(holder.messageText.getContext()));
@@ -63,8 +71,14 @@ public int getItemCount() {
     }
 
     public void setMessageList(Map<String, String> messageList) {
-        this.messageMap = messageList;
-        this.messageList = new ArrayList<>(messageList.keySet());
+        Map<String, String> tempMap = ApplozicClient.getInstance(context).getMessageTemplates();
+        messageMap = messageList;
+
+        if (tempMap != null && !tempMap.isEmpty()) {
+            messageMap.putAll(tempMap);
+        }
+
+        this.messageList = new ArrayList<>(messageMap.keySet());
     }
 
     public class ViewHolder extends RecyclerView.ViewHolder {
@@ -97,4 +111,9 @@ public void setOnItemSelected(MessageTemplateDataListener listener) {
     public interface MessageTemplateDataListener {
         void onItemSelected(String messsage);
     }
+
+    public void removeTemplates() {
+        messageList.clear();
+        notifyDataSetChanged();
+    }
 }
\ No newline at end of file
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/adapter/QuickConversationAdapter.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/adapter/QuickConversationAdapter.java
index ba1ff168..041b9867 100644
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/adapter/QuickConversationAdapter.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/adapter/QuickConversationAdapter.java
@@ -96,6 +96,10 @@
     private View view;
     private ConversationUIService conversationUIService;
 
+    public void setAlCustomizationSettings(AlCustomizationSettings alCustomizationSettings) {
+        this.alCustomizationSettings = alCustomizationSettings;
+    }
+
     public QuickConversationAdapter(final Context context, List<Message> messageList, EmojiconHandler emojiconHandler) {
         this.context = context;
         this.emojiconHandler = emojiconHandler;
@@ -124,9 +128,10 @@ protected Bitmap processBitmap(Object data) {
         highlightTextSpan = new TextAppearanceSpan(context, R.style.searchTextHiglight);
     }
 
-    public void setAlCustomizationSettings(AlCustomizationSettings alCustomizationSettings) {
+
+   /* public void setAlCustomizationSettings(AlCustomizationSettings alCustomizationSettings) {
         this.alCustomizationSettings = alCustomizationSettings;
-    }
+    }*/
 
     @NonNull
     @Override
@@ -183,22 +188,38 @@ public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int positi
                 } else if (message.getGroupId() != null) {
                     if (channel != null && Channel.GroupType.GROUPOFTWO.getValue().equals(channel.getType())) {
                         contactImageLoader.setLoadingImage(R.drawable.applozic_ic_contact_picture_holo_light);
-                        Contact withUserContact = contactService.getContactById(ChannelService.getInstance(context).getGroupOfTwoReceiverUserId(channel.getKey()));
-                        if (withUserContact != null) {
-                            myholder.smReceivers.setText(withUserContact.getDisplayName());
-                            processContactImage(withUserContact, myholder.onlineTextView, myholder.alphabeticTextView, myholder.contactImage);
+
+                        if (Channel.GroupType.GROUPOFTWO.getValue().equals(channel.getType())) {
+
+                            Contact withUserContact = contactService.getContactById(ChannelService.getInstance(context).getGroupOfTwoReceiverUserId(channel.getKey()));
+                            if (withUserContact != null) {
+                                myholder.smReceivers.setText(withUserContact.getDisplayName());
+                                processContactImage(withUserContact, myholder.onlineTextView, myholder.alphabeticTextView, myholder.contactImage);
+                            }
                         }
                     } else {
-                        channelImageLoader.setLoadingImage(R.drawable.applozic_group_icon);
+                        //channelImageLoader.setLoadingImage(R.drawable.applozic_group_icon);
+
+                        if (channel != null && Channel.GroupType.SUPPORT_GROUP.getValue().
+                                equals(channel.getType())) {
+                            channelImageLoader.setLoadingImage(R.drawable.applozic_ic_contact_picture_holo_light);
+                            myholder.contactImage.setImageResource(R.drawable.applozic_ic_contact_picture_holo_light);
+                        } else {
+                            channelImageLoader.setLoadingImage(R.drawable.applozic_group_icon);
+                            myholder.contactImage.setImageResource(R.drawable.applozic_group_icon);
+                        }
+
                         myholder.smReceivers.setText(ChannelUtils.getChannelTitleName(channel, MobiComUserPreference.getInstance(context).getUserId()));
                         myholder.alphabeticTextView.setVisibility(View.GONE);
-                        myholder.contactImage.setImageResource(R.drawable.applozic_group_icon);
+                        //myholder.contactImage.setImageResource(R.drawable.applozic_group_icon);
                         myholder.contactImage.setVisibility(View.VISIBLE);
 
                         if (channel != null && !TextUtils.isEmpty(channel.getImageUrl())) {
                             channelImageLoader.loadImage(channel, myholder.contactImage);
                         } else if (channel != null && channel.isBroadcastMessage()) {
                             myholder.contactImage.setImageResource(R.drawable.applozic_ic_applozic_broadcast);
+                        } else if (channel != null && Channel.GroupType.SUPPORT_GROUP.getValue().equals(channel.getType())) {
+                            channelImageLoader.setLoadingImage(R.drawable.applozic_ic_contact_picture_holo_light);
                         } else {
                             channelImageLoader.setLoadingImage(R.drawable.applozic_group_icon);
                         }
@@ -503,6 +524,7 @@ public boolean onMenuItemClick(MenuItem item) {
                 return true;
             }
         };
+
         TextView smReceivers;
         TextView createdAtTime;
         TextView messageTextView;
@@ -572,11 +594,17 @@ public void onCreateContextMenu(ContextMenu menu, View v, ContextMenu.ContextMen
 
             for (int i = 0; i < menuItems.length; i++) {
 
-                if ((message.getGroupId() == null ||
-                        (channel != null &&
-                                Channel.GroupType.GROUPOFTWO.getValue().equals(channel.getType()))) &&
-                        (menuItems[i].equals(context.getResources().getString(R.string.delete_group)) ||
-                                menuItems[i].equals(context.getResources().getString(R.string.exit_group)))) {
+              /*  if ((message.getGroupId() == null || (channel != null && Channel.GroupType.GROUPOFTWO.getValue().
+                        equals(channel.getType())))
+                        && (menuItems[i].equals(context.getResources().getString(R.string.delete_group)) ||
+                        menuItems[i].equals(context.getResources().getString(R.string.exit_group)))) {
+                    continue;
+                }
+*/
+                if ((message.getGroupId() == null || (channel != null && (Channel.GroupType.GROUPOFTWO.getValue().
+                        equals(channel.getType()) || Channel.GroupType.SUPPORT_GROUP.getValue().equals(channel.getType()))))
+                        && (menuItems[i].equals(context.getResources().getString(R.string.delete_group)) ||
+                        menuItems[i].equals(context.getResources().getString(R.string.exit_group)))) {
                     continue;
                 }
 
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/fragment/MobiComConversationFragment.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/fragment/MobiComConversationFragment.java
index 9038e387..12fdbc93 100644
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/fragment/MobiComConversationFragment.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/fragment/MobiComConversationFragment.java
@@ -24,7 +24,6 @@
 import android.os.CountDownTimer;
 import android.os.Vibrator;
 import android.provider.OpenableColumns;
-import android.support.annotation.NonNull;
 import android.support.v4.app.ActivityCompat;
 import android.support.v4.app.Fragment;
 import android.support.v4.app.NotificationManagerCompat;
@@ -40,7 +39,6 @@
 import android.text.TextUtils;
 import android.text.TextWatcher;
 import android.util.DisplayMetrics;
-import android.util.Log;
 import android.util.TypedValue;
 import android.view.GestureDetector;
 import android.view.Gravity;
@@ -72,6 +70,7 @@
 import com.applozic.mobicomkit.ApplozicClient;
 import com.applozic.mobicomkit.api.MobiComKitConstants;
 import com.applozic.mobicomkit.api.account.user.MobiComUserPreference;
+import com.applozic.mobicomkit.api.account.user.User;
 import com.applozic.mobicomkit.api.account.user.UserBlockTask;
 import com.applozic.mobicomkit.api.attachment.AttachmentView;
 import com.applozic.mobicomkit.api.attachment.FileClientService;
@@ -97,6 +96,7 @@
 import com.applozic.mobicomkit.contact.VCFContactData;
 import com.applozic.mobicomkit.feed.ApiResponse;
 import com.applozic.mobicomkit.uiwidgets.AlCustomizationSettings;
+import com.applozic.mobicomkit.uiwidgets.CustomTextViewRegular;
 import com.applozic.mobicomkit.uiwidgets.R;
 import com.applozic.mobicomkit.uiwidgets.async.AlMessageMetadataUpdateTask;
 import com.applozic.mobicomkit.uiwidgets.attachmentview.ApplozicAudioManager;
@@ -176,7 +176,7 @@
     protected MobiComConversationService conversationService;
     protected TextView infoBroadcast;
     protected Class messageIntentClass;
-    protected TextView emptyTextView;
+    protected CustomTextViewRegular emptyTextView;
     protected boolean loadMore = true;
     protected Contact contact;
     protected Channel channel;
@@ -213,7 +213,7 @@
     protected Message messageToForward;
     protected String searchString;
     protected AlCustomizationSettings alCustomizationSettings;
-    protected TextView isTyping, bottomlayoutTextView;
+    protected CustomTextViewRegular isTyping, bottomlayoutTextView;
     protected LinearLayoutManager linearLayoutManager;
     String audio_duration;
     LinearLayout userNotAbleToChatLayout;
@@ -236,7 +236,7 @@
     RelativeLayout imageViewRLayout;
     Map<String, String> messageMetaData = new HashMap<>();
     LinearLayout slideTextLinearlayout;
-    TextView recordTimeTextView;
+    CustomTextViewRegular recordTimeTextView;
     FrameLayout audioRecordFrameLayout;
     ApplozicAudioRecordManager applozicAudioRecordManager;
     String timeStamp, audioFileName;
@@ -320,7 +320,7 @@ protected Bitmap processBitmap(Object data) {
 
     }
 
-    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container,
+    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                              Bundle savedInstanceState) {
         final View list = inflater.inflate(R.layout.mobicom_message_list, container, false);
         recyclerView = (RecyclerView) list.findViewById(R.id.messageList);
@@ -359,7 +359,7 @@ public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container,
         extendedSendingOptionLayout = (LinearLayout) list.findViewById(R.id.extended_sending_option_layout);
 
         attachmentLayout = (RelativeLayout) list.findViewById(R.id.attachment_layout);
-        isTyping = (TextView) list.findViewById(R.id.isTyping);
+        isTyping = (CustomTextViewRegular) list.findViewById(R.id.isTyping);
 
         contextFrameLayout = (FrameLayout) list.findViewById(R.id.contextFrameLayout);
 
@@ -367,7 +367,7 @@ public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container,
         slideTextLinearlayout = (LinearLayout) list.findViewById(R.id.slide_LinearLayout);
         errorEditTextView = (EditText) list.findViewById(R.id.error_edit_text_view);
         audioRecordIconImageView = (ImageView) list.findViewById(R.id.audio_record_icon_image_view);
-        recordTimeTextView = (TextView) list.findViewById(R.id.recording_time_text_view);
+        recordTimeTextView = (CustomTextViewRegular) list.findViewById(R.id.recording_time_text_view);
         mDetector = new GestureDetectorCompat(getContext(), this);
         adapterView = new AdapterView.OnItemSelectedListener() {
             @Override
@@ -407,9 +407,8 @@ public void onNothingSelected(AdapterView<?> adapterView) {
         spinnerLayout = inflater.inflate(R.layout.mobicom_message_list_header_footer, null);
         infoBroadcast = (TextView) spinnerLayout.findViewById(R.id.info_broadcast);
         spinnerLayout.setVisibility(View.GONE);
-        emptyTextView = (TextView) list.findViewById(R.id.noConversations);
-        emptyTextView.setTextColor(Color.parseColor
-                (alCustomizationSettings.getNoConversationLabelTextColor().trim()));
+        emptyTextView = (CustomTextViewRegular) list.findViewById(R.id.noConversations);
+        emptyTextView.setTextColor(Color.parseColor(alCustomizationSettings.getNoConversationLabelTextColor().trim()));
         emoticonsBtn.setOnClickListener(this);
         //listView.addHeaderView(spinnerLayout);
         sentIcon = getResources().getDrawable(R.drawable.applozic_ic_action_message_sent);
@@ -417,20 +416,15 @@ public void onNothingSelected(AdapterView<?> adapterView) {
 
         //listView.setLongClickable(true);
 
-        recordButton.setVisibility(alCustomizationSettings.isRecordButton()
-                && (contact != null || channel != null &&
-                !Channel.GroupType.OPEN.getValue().equals(channel.getType())) ? View.VISIBLE : View.GONE);
+        recordButton.setVisibility(alCustomizationSettings.isRecordButton() && (contact != null || channel != null && !Channel.GroupType.OPEN.getValue().equals(channel.getType())) ? View.VISIBLE : View.GONE);
 
-        sendButton.setVisibility(alCustomizationSettings.isRecordButton() &&
-                (contact != null || channel != null &&
-                        !Channel.GroupType.OPEN.getValue().equals(channel.getType())) ? View.GONE : View.VISIBLE);
+        sendButton.setVisibility(alCustomizationSettings.isRecordButton() && (contact != null || channel != null && !Channel.GroupType.OPEN.getValue().equals(channel.getType())) ? View.GONE : View.VISIBLE);
 
         GradientDrawable bgShape = (GradientDrawable) sendButton.getBackground();
         bgShape.setColor(Color.parseColor(alCustomizationSettings.getSendButtonBackgroundColor().trim()));
 
         GradientDrawable bgShapeRecordButton = (GradientDrawable) recordButton.getBackground();
-        bgShapeRecordButton.setColor(Color.parseColor
-                (alCustomizationSettings.getSendButtonBackgroundColor().trim()));
+        bgShapeRecordButton.setColor(Color.parseColor(alCustomizationSettings.getSendButtonBackgroundColor().trim()));
 
         attachButton = (ImageButton) individualMessageSendLayout.findViewById(R.id.attach_button);
 
@@ -449,7 +443,7 @@ public void onNothingSelected(AdapterView<?> adapterView) {
             userNotAbleToChatTextView.setText(R.string.group_has_been_deleted_text);
         }
 
-        bottomlayoutTextView = (TextView) list.findViewById(R.id.user_not_able_to_chat_textView);
+        bottomlayoutTextView = (CustomTextViewRegular) list.findViewById(R.id.user_not_able_to_chat_textView);
         if (!TextUtils.isEmpty(defaultText)) {
             messageEditText.setText(defaultText);
             defaultText = "";
@@ -748,8 +742,7 @@ public void onClick(View v) {
             @Override
             public void onScrollStateChanged(RecyclerView recyclerView, int newState) {
                 if (recyclerDetailConversationAdapter != null) {
-                    recyclerDetailConversationAdapter.contactImageLoader.
-                            setPauseWork(newState == RecyclerView.SCROLL_STATE_DRAGGING);
+                    recyclerDetailConversationAdapter.contactImageLoader.setPauseWork(newState == RecyclerView.SCROLL_STATE_DRAGGING);
                 }
             }
 
@@ -770,6 +763,12 @@ public void onScrolled(final RecyclerView recyclerView, int dx, int dy) {
             public void onClick(View v) {
 
                 if (channel != null) {
+
+                    if (Channel.GroupType.SUPPORT_GROUP.getValue().equals(channel.getType())
+                            && User.RoleType.USER_ROLE.getValue().equals(MobiComUserPreference.getInstance(getContext()).getUserRoleType())) {
+                        return;
+                    }
+
                     if (channel.isDeleted()) {
                         return;
                     }
@@ -815,7 +814,7 @@ public void onClick(View v) {
         messageTemplate = alCustomizationSettings.getMessageTemplate();
 
         if (messageTemplate != null && messageTemplate.isEnabled()) {
-            templateAdapter = new MobicomMessageTemplateAdapter(messageTemplate);
+            templateAdapter = new MobicomMessageTemplateAdapter(getContext(), messageTemplate);
             MobicomMessageTemplateAdapter.MessageTemplateDataListener listener = new MobicomMessageTemplateAdapter.MessageTemplateDataListener() {
                 @Override
                 public void onItemSelected(String message) {
@@ -836,8 +835,10 @@ public void onItemSelected(String message) {
                         AlMessageMetadataUpdateTask.MessageMetadataListener listener1 = new AlMessageMetadataUpdateTask.MessageMetadataListener() {
                             @Override
                             public void onSuccess(Context context, String message) {
-                                templateAdapter.setMessageList(new HashMap<String, String>());
-                                templateAdapter.notifyDataSetChanged();
+//                                templateAdapter.setMessageList(new HashMap<String, String>());
+//                                templateAdapter.notifyDataSetChanged();
+
+                                templateAdapter.removeTemplates();
                             }
 
                             @Override
@@ -1073,7 +1074,6 @@ public void deleteMessageFromDeviceList(String messageKeyString) {
                     recyclerDetailConversationAdapter.notifyDataSetChanged();
                     if (messageList.isEmpty()) {
                         emptyTextView.setVisibility(VISIBLE);
-                        Log.d("emptyTextView31", "emptyTextView31");
                         ((MobiComKitActivityInterface) getActivity()).removeConversation(message, channel != null ? String.valueOf(channel.getKey()) : contact.getFormattedContactNumber());
                     }
                     break;
@@ -1148,7 +1148,6 @@ public void run() {
                     messageList.clear();
                     if (messageList.isEmpty()) {
                         emptyTextView.setVisibility(View.VISIBLE);
-                        Log.d("emptyTextView32", "emptyTextView32");
                     }
                     recyclerDetailConversationAdapter.notifyDataSetChanged();
                 }
@@ -1186,10 +1185,16 @@ public void updateMessageMetadata(String keyString) {
         }
         if (i != -1) {
             messageList.get(i).setMetadata(messageDatabaseService.getMessage(keyString).getMetadata());
-            conversationAdapter.notifyDataSetChanged();
+            if (conversationAdapter != null) {
+                conversationAdapter.notifyDataSetChanged();
+            }
             if (messageList.get(messageList.size() - 1).getMetadata().containsKey("isDoneWithClicking")) {
-                templateAdapter.setMessageList(new HashMap<String, String>());
-                templateAdapter.notifyDataSetChanged();
+                /*templateAdapter.setMessageList(new HashMap<String, String>());
+                templateAdapter.notifyDataSetChanged();*/
+
+                if (templateAdapter != null) {
+                    templateAdapter.notifyDataSetChanged();
+                }
             }
         }
     }
@@ -1210,7 +1215,6 @@ public void run() {
                     recyclerDetailConversationAdapter.notifyDataSetChanged();
                     linearLayoutManager.scrollToPositionWithOffset(messageList.size() - 1, 0);
                     emptyTextView.setVisibility(View.GONE);
-                    Log.d("emptyTextView33", "emptyTextView33");
                     currentConversationId = message.getConversationId();
                     channelKey = message.getGroupId();
                     if (Message.MessageType.MT_INBOX.getValue().equals(message.getType()) && (contact != null || (channel != null && !Channel.GroupType.OPEN.getValue().equals(channel.getType())))) {
@@ -1528,7 +1532,7 @@ public boolean onItemClick(int position, MenuItem item) {
                             galleryImageView.setVisibility(View.GONE);
                             imageViewRLayout.setVisibility(View.GONE);
                         } else {
-                            imageViewForAttachmentType.setImageResource(R.drawable.applozic_ic_action_attachment);
+                            imageViewForAttachmentType.setImageResource(R.drawable.ic_action_attachment);
                             if (TextUtils.isEmpty(message.getMessage())) {
                                 messageTextView.setText(getString(R.string.attachment_string));
                             } else {
@@ -1757,12 +1761,9 @@ public void run() {
                 if (withUserContact != null) {
                     if (withUserContact.isConnected()) {
                         typingStarted = false;
-                        ((AppCompatActivity) getActivity()).getSupportActionBar().
-                                setSubtitle(getActivity().getString(R.string.user_online));
+                        ((AppCompatActivity) getActivity()).getSupportActionBar().setSubtitle(getActivity().getString(R.string.user_online));
                     } else if (withUserContact.getLastSeenAt() != 0) {
-                        ((AppCompatActivity) getActivity()).getSupportActionBar().
-                                setSubtitle(getActivity().getString(R.string.subtitle_last_seen_at_time) + " " +
-                                        DateUtils.getDateAndTimeForLastSeen(withUserContact.getLastSeenAt()));
+                        ((AppCompatActivity) getActivity()).getSupportActionBar().setSubtitle(getActivity().getString(R.string.subtitle_last_seen_at_time) + " " + DateUtils.getDateAndTimeForLastSeen(withUserContact.getLastSeenAt()));
                     } else {
                         ((AppCompatActivity) getActivity()).getSupportActionBar().setSubtitle("");
                     }
@@ -1847,8 +1848,9 @@ protected void setChannel(Channel channel) {
         this.channel = channel;
         if (channel != null && !ChannelService.getInstance(getContext()).isUserAlreadyPresentInChannel(channel.getKey(), MobiComUserPreference.getInstance(getContext()).getUserId())
                 && messageTemplate != null && messageTemplate.isEnabled() && templateAdapter != null) {
-            templateAdapter.setMessageList(new HashMap<String, String>());
-            templateAdapter.notifyDataSetChanged();
+            /*templateAdapter.setMessageList(new HashMap<String, String>());
+            templateAdapter.notifyDataSetChanged();*/
+            templateAdapter.removeTemplates();
         }
     }
 
@@ -1996,7 +1998,6 @@ public void run() {
                         messageList.add(message);
                         linearLayoutManager.scrollToPositionWithOffset(messageList.size() - 1, 0);
                         emptyTextView.setVisibility(View.GONE);
-                        Log.d("emptyTextView34", "emptyTextView34");
                         recyclerDetailConversationAdapter.notifyDataSetChanged();
                     }
                 } catch (Exception ex) {
@@ -2280,6 +2281,9 @@ public void sendMessage(String message, Map<String, String> messageMetaData, Fil
         } else {
             messageToSend.setContentType(messageContentType);
         }
+        if (messageMetaData == null) {
+            messageMetaData = new HashMap<>();
+        }
         messageToSend.setFileMetaKeyStrings(fileMetaKeyStrings);
         messageToSend.setFileMetas(fileMetas);
         if (!TextUtils.isEmpty(ApplozicClient.getInstance(getActivity()).getMessageMetaData())) {
@@ -2288,13 +2292,25 @@ public void sendMessage(String message, Map<String, String> messageMetaData, Fil
             Map<String, String> messageMetaDataMap = null;
             try {
                 messageMetaDataMap = new Gson().fromJson(ApplozicClient.getInstance(getActivity()).getMessageMetaData(), mapType);
-                messageToSend.setMetadata(messageMetaDataMap);
+
+                if (messageMetaDataMap != null && !messageMetaDataMap.isEmpty()) {
+                    messageMetaData.putAll(messageMetaDataMap);
+                }
+
+                //messageToSend.setMetadata(messageMetaDataMap);
+
+
             } catch (Exception e) {
                 e.printStackTrace();
             }
-        } else {
+        } /*else {
             messageToSend.setMetadata(this.messageMetaData);
+        }*/
+
+        if (this.messageMetaData != null && !this.messageMetaData.isEmpty()) {
+            messageMetaData.putAll(this.messageMetaData);
         }
+        messageToSend.setMetadata(messageMetaData);
 
         conversationService.sendMessage(messageToSend, messageIntentClass);
         if (replayRelativeLayout != null) {
@@ -2652,8 +2668,9 @@ public void onPause() {
         BroadcastService.currentUserId = null;
         BroadcastService.currentConversationId = null;
         if (typingStarted) {
-            //app is crashing here when it is |
-            if (contact != null | channel != null && !Channel.GroupType.OPEN.getValue().equals(channel.getType()) || contact != null) {
+            //app is crashing here when it is "|"
+            //if (contact != null || channel != null && !Channel.GroupType.OPEN.getValue().equals(channel.getType()) || contact != null) {
+            if (contact != null || (channel != null && !Channel.GroupType.OPEN.getValue().equals(channel.getType()))) {
                 Intent intent = new Intent(getActivity(), ApplozicMqttIntentService.class);
                 intent.putExtra(ApplozicMqttIntentService.CHANNEL, channel);
                 intent.putExtra(ApplozicMqttIntentService.CONTACT, contact);
@@ -2872,7 +2889,7 @@ public boolean onContextItemSelected(MenuItem item) {
                             galleryImageView.setVisibility(View.GONE);
                             imageViewRLayout.setVisibility(View.GONE);
                         } else {
-                            imageViewForAttachmentType.setImageResource(R.drawable.applozic_ic_action_attachment);
+                            imageViewForAttachmentType.setImageResource(R.drawable.ic_action_attachment);
                             if (TextUtils.isEmpty(message.getMessage())) {
                                 messageTextView.setText(getString(R.string.attachment_string));
                             } else {
@@ -3034,8 +3051,9 @@ public void updateChannelTitleAndSubTitle() {
                 userNotAbleToChatTextView.setText(R.string.group_has_been_deleted_text);
                 if (channel != null && !ChannelService.getInstance(getContext()).isUserAlreadyPresentInChannel(channel.getKey(), MobiComUserPreference.getInstance(getContext()).getUserId())
                         && messageTemplate != null && messageTemplate.isEnabled() && templateAdapter != null) {
-                    templateAdapter.setMessageList(new HashMap<String, String>());
-                    templateAdapter.notifyDataSetChanged();
+//                    templateAdapter.setMessageList(new HashMap<String, String>());
+//                    templateAdapter.notifyDataSetChanged();
+                    templateAdapter.removeTemplates();
                 }
             } else {
                 if ((!ChannelService.getInstance(getActivity()).processIsUserPresentInChannel(channel.getKey())
@@ -3045,8 +3063,9 @@ public void updateChannelTitleAndSubTitle() {
                     individualMessageSendLayout.setVisibility(View.GONE);
                     userNotAbleToChatLayout.setVisibility(VISIBLE);
                     if (messageTemplate != null && messageTemplate.isEnabled() && templateAdapter != null) {
-                        templateAdapter.setMessageList(new HashMap<String, String>());
-                        templateAdapter.notifyDataSetChanged();
+                        //templateAdapter.setMessageList(new HashMap<String, String>());
+                        //templateAdapter.notifyDataSetChanged();
+                        templateAdapter.removeTemplates();
                     }
                 } else if (ChannelService.getInstance(getActivity()).processIsUserPresentInChannel(channel.getKey())
                         && userNotAbleToChatLayout != null
@@ -3505,7 +3524,6 @@ public DownloadConversation(RecyclerView recyclerView, boolean initial, int firs
         protected void onPreExecute() {
             super.onPreExecute();
             emptyTextView.setVisibility(View.GONE);
-            Log.d("emptyTextView35", "emptyTextView35");
             isAlreadyLoading = true;
             swipeLayout.post(new Runnable() {
                 @Override
@@ -3657,7 +3675,7 @@ public void run() {
                 messageList.addAll(nextMessageList);
                 recyclerDetailConversationAdapter.searchString = searchString;
                 emptyTextView.setVisibility(messageList.isEmpty() ? VISIBLE : View.GONE);
-                Log.d("emptyTextView36", "emptyTextView36");
+
                 if (!messageList.isEmpty()) {
                     recyclerView.post(new Runnable() {
                         @Override
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/fragment/MobiComQuickConversationFragment.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/fragment/MobiComQuickConversationFragment.java
index 36904ee6..c4f70516 100644
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/fragment/MobiComQuickConversationFragment.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/fragment/MobiComQuickConversationFragment.java
@@ -5,7 +5,7 @@
 import android.os.AsyncTask;
 import android.os.Bundle;
 import android.os.Process;
-import android.support.annotation.NonNull;
+import android.provider.ContactsContract;
 import android.support.v4.app.Fragment;
 import android.support.v4.view.MenuItemCompat;
 import android.support.v4.widget.SwipeRefreshLayout;
@@ -14,7 +14,6 @@
 import android.support.v7.widget.SearchView;
 import android.support.v7.widget.Toolbar;
 import android.text.TextUtils;
-import android.util.Log;
 import android.view.LayoutInflater;
 import android.view.Menu;
 import android.view.MenuInflater;
@@ -38,6 +37,8 @@
 import com.applozic.mobicomkit.contact.BaseContactService;
 import com.applozic.mobicomkit.uiwidgets.AlCustomizationSettings;
 import com.applozic.mobicomkit.uiwidgets.ApplozicSetting;
+import com.applozic.mobicomkit.uiwidgets.ContactsChangeObserver;
+import com.applozic.mobicomkit.uiwidgets.CustomTextViewRegular;
 import com.applozic.mobicomkit.uiwidgets.R;
 import com.applozic.mobicomkit.uiwidgets.conversation.AlLinearLayoutManager;
 import com.applozic.mobicomkit.uiwidgets.conversation.ConversationUIService;
@@ -47,7 +48,6 @@
 import com.applozic.mobicomkit.uiwidgets.conversation.activity.MobiComKitActivityInterface;
 import com.applozic.mobicomkit.uiwidgets.conversation.activity.RecyclerViewPositionHelper;
 import com.applozic.mobicomkit.uiwidgets.conversation.adapter.QuickConversationAdapter;
-import com.applozic.mobicomkit.uiwidgets.people.activity.MobiComKitPeopleActivity;
 import com.applozic.mobicommons.commons.core.utils.DateUtils;
 import com.applozic.mobicommons.commons.core.utils.Utils;
 import com.applozic.mobicommons.file.FileUtils;
@@ -67,12 +67,12 @@
 /**
  * Created by devashish on 10/2/15.
  */
-public class MobiComQuickConversationFragment extends Fragment implements SearchListFragment,
-        SearchView.OnQueryTextListener {
+public class MobiComQuickConversationFragment extends Fragment implements SearchListFragment, SearchView.OnQueryTextListener {
 
     public static final String QUICK_CONVERSATION_EVENT = "quick_conversation";
     protected RecyclerView recyclerView = null;
-    protected TextView emptyTextView;
+    //protected ImageButton fabButton;
+    protected CustomTextViewRegular emptyTextView;
     protected Button startNewButton;
     protected SwipeRefreshLayout swipeLayout;
     protected int listIndex;
@@ -84,26 +84,24 @@
     ConversationUIService conversationUIService;
     AlCustomizationSettings alCustomizationSettings;
     String searchString;
-    MessageDatabaseService messageDatabaseService;
     RecyclerViewPositionHelper recyclerViewPositionHelper;
     AlLinearLayoutManager linearLayoutManager;
     int position;
     boolean isAlreadyLoading = false;
     int pastVisiblesItems, visibleItemCount, totalItemCount;
-    //protected ImageButton fabButton;
-    private RelativeLayout startChatLayout;
     private Long minCreatedAtTime;
     private DownloadConversation downloadConversation;
     private BaseContactService baseContactService;
     private Toolbar toolbar;
+    private MessageDatabaseService messageDatabaseService;
     private int visibleThreshold = 5;
     private int currentPage = 0;
     private int previousTotalItemCount = 0;
     private boolean loading = true;
     private int startingPageIndex = 0;
     private ProgressBar progressBar;
-    //private SearchView searchView;
-    private SearchListFragment searchListFragment;
+    ContactsChangeObserver observer;
+    private RelativeLayout startChatLayout;
     private Menu menu;
 
     public RecyclerView getRecyclerView() {
@@ -113,12 +111,9 @@ public RecyclerView getRecyclerView() {
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-
         String jsonString = FileUtils.loadSettingsJsonFile(getActivity().getApplicationContext());
-
         if (!TextUtils.isEmpty(jsonString)) {
-            alCustomizationSettings = (AlCustomizationSettings)
-                    GsonUtils.getObjectFromJson(jsonString, AlCustomizationSettings.class);
+            alCustomizationSettings = (AlCustomizationSettings) GsonUtils.getObjectFromJson(jsonString, AlCustomizationSettings.class);
         } else {
             alCustomizationSettings = new AlCustomizationSettings();
         }
@@ -137,10 +132,14 @@ public void run() {
         thread.start();
         setHasOptionsMenu(true);
         BroadcastService.lastIndexForChats = 0;
+
+        observer = new ContactsChangeObserver(null, getContext());
+        getContext().getApplicationContext().getContentResolver().registerContentObserver(
+                ContactsContract.Contacts.CONTENT_URI, true, observer);
     }
 
     @Override
-    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container,
+    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                              Bundle savedInstanceState) {
         View list = inflater.inflate(R.layout.mobicom_message_list, container, false);
 
@@ -162,23 +161,17 @@ public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container,
         recyclerView.addItemDecoration(dividerItemDecoration);
         recyclerView.setAdapter(recyclerAdapter);
         //recyclerView.addItemDecoration(new FooterItemDecoration(getContext(), recyclerView, R.layout.mobicom_message_list_header_footer));
+
         toolbar = (Toolbar) list.findViewById(R.id.custom_toolbar);
         //toolbar.setClickable(false);
-
         toolbar.setVisibility(View.VISIBLE);
 
-       /* searchView = (SearchView) list.findViewById(R.id.search_bar);
-        searchView.setVisibility(View.VISIBLE);
-        searchView.setQueryHint(getResources().getString(R.string.search_hint));
-        searchView.setOnQueryTextListener(this);
-        searchView.setSubmitButtonEnabled(true);
-        searchView.setIconified(true);*/
-
-
         AppCompatActivity activity = (AppCompatActivity) getActivity();
         if (activity != null) {
             activity.setSupportActionBar(toolbar);
         }
+
+
         //fabButton = (ImageButton) list.findViewById(R.id.fab_start_new);
         loading = true;
         LinearLayout individualMessageSendLayout = (LinearLayout) list.findViewById(R.id.individual_message_send_layout);
@@ -199,19 +192,20 @@ public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container,
             progressBar = view.findViewById(R.id.load_more_progressbar);
         }
 
-
         //spinner = (ProgressBar) spinnerLayout.findViewById(R.id.spinner);
-        emptyTextView = (TextView) list.findViewById(R.id.noConversations);
+        emptyTextView = (CustomTextViewRegular) list.findViewById(R.id.noConversations);
+        startChatLayout = (RelativeLayout) list.findViewById(R.id.startChatLayout);
         //emptyTextView.setTextColor(Color.parseColor(alCustomizationSettings.getNoConversationLabelTextColor().trim()));
 
-        startChatLayout = (RelativeLayout) list.findViewById(R.id.startChatLayout);
-        TextView txt_newChat = (TextView) list.findViewById(R.id.txt_newChat);
+        //startNewButton = (Button) spinnerLayout.findViewById(R.id.start_new_conversation);
+
+        /*TextView txt_newChat = (TextView) list.findViewById(R.id.txt_newChat);
         txt_newChat.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
                 conversationUIService.startContactActivityForResult();
             }
-        });
+        });*/
 
         Button btn_newChat = (Button) list.findViewById(R.id.btn_newChat);
         btn_newChat.setOnClickListener(new View.OnClickListener() {
@@ -221,9 +215,6 @@ public void onClick(View v) {
             }
         });
 
-
-        //startNewButton = (Button) spinnerLayout.findViewById(R.id.start_new_conversation);
-
         //fabButton.setVisibility(alCustomizationSettings.isStartNewFloatingButton() ? View.VISIBLE : View.GONE);
 
         swipeLayout = (SwipeRefreshLayout) list.findViewById(R.id.swipe_container);
@@ -235,8 +226,6 @@ public void onClick(View v) {
         recyclerView.setLongClickable(true);
         registerForContextMenu(recyclerView);
 
-        syncCallService.syncMessages(null);
-
         return list;
     }
 
@@ -249,15 +238,15 @@ public void onClick(View view) {
         };
     }
 
-
     @Override
     public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
-        // super.onCreateOptionsMenu(menu, inflater);
+        //super.onCreateOptionsMenu(menu, inflater);
 
         toolbar.inflateMenu(R.menu.mobicom_basic_menu_for_normal_message);
         this.menu = menu;
+
         MenuItem searchItem = menu.findItem(R.id.menu_search);
-        //searchItem.setVisible(true);
+        searchItem.setVisible(true);
         SearchView searchView = (SearchView) MenuItemCompat.getActionView(searchItem);
         searchView.setQueryHint(getResources().getString(R.string.search_hint));
         if (Utils.hasICS()) {
@@ -268,12 +257,10 @@ public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
         searchView.setIconified(true);
 
 
-        if (alCustomizationSettings.isStartNewButton() ||
-                ApplozicSetting.getInstance(getContext()).isStartNewButtonVisible()) {
+        if (alCustomizationSettings.isStartNewButton() || ApplozicSetting.getInstance(getContext()).isStartNewButtonVisible()) {
             menu.findItem(R.id.start_new).setVisible(true);
         }
-        if (alCustomizationSettings.isStartNewGroup() ||
-                ApplozicSetting.getInstance(getContext()).isStartNewGroupButtonVisible()) {
+        if (alCustomizationSettings.isStartNewGroup() || ApplozicSetting.getInstance(getContext()).isStartNewGroupButtonVisible()) {
             menu.findItem(R.id.conversations).setVisible(true);
         }
         if (alCustomizationSettings.isRefreshOption()) {
@@ -285,13 +272,82 @@ public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
         if (alCustomizationSettings.isMessageSearchOption()) {
             menu.findItem(R.id.menu_search).setVisible(true);
         }
-       /* if (alCustomizationSettings.isBroadcastOption()) {
+        /*if (alCustomizationSettings.isBroadcastOption()) {
             menu.findItem(R.id.broadcast).setVisible(true);
-        }*/
-      /*  if (alCustomizationSettings.isLogoutOption()) {
+        }
+        if (alCustomizationSettings.isLogoutOption()) {
             menu.findItem(R.id.logout).setVisible(true);
         }*/
-        //super.onCreateOptionsMenu(menu, inflater);
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        // Handle action bar item clicks here. The action bar will
+        // automatically handle clicks on the Home/Up button, so long
+        // as you specify a parent activity in AndroidManifest.xml.
+        int id = item.getItemId();
+        //noinspection SimplifiableIfStatement
+        if (id == R.id.start_new) {
+           /* if (!TextUtils.isEmpty(contactsGroupId)) {
+                if (Utils.isInternetAvailable(getActivity())) {
+                    conversationUIService.startContactActivityForResult();
+                } else {
+                    Intent intent = new Intent(getActivity(), MobiComKitPeopleActivity.class);
+                    ChannelDatabaseService channelDatabaseService = ChannelDatabaseService.getInstance(getActivity());
+                    String[] userIdArray = channelDatabaseService.getChannelMemberByName(contactsGroupId, null);
+                    if (userIdArray != null) {
+                        conversationUIService.startContactActivityForResult(intent, null, null, userIdArray);
+                    }
+                }
+            } else {*/
+            conversationUIService.startContactActivityForResult();
+            //}
+        } else if (id == R.id.conversations) {
+            Intent intent = new Intent(getActivity(), ChannelCreateActivity.class);
+            intent.putExtra(ChannelCreateActivity.GROUP_TYPE, Channel.GroupType.PUBLIC.getValue().intValue());
+            startActivity(intent);
+        } /*else if (id == R.id.broadcast) {
+            Intent intent = new Intent(getActivity(), ContactSelectionActivity.class);
+            intent.putExtra(ContactSelectionActivity.GROUP_TYPE, Channel.GroupType.BROADCAST.getValue().intValue());
+            startActivity(intent);
+        } */ else if (id == R.id.refresh) {
+            Toast.makeText(getActivity(), getString(R.string.info_message_sync), Toast.LENGTH_LONG).show();
+            //new ConversationActivity.SyncMessagesAsyncTask(this).execute();
+        } else if (id == R.id.shareOptions) {
+            Intent intent = new Intent(Intent.ACTION_SEND);
+            intent.setAction(Intent.ACTION_SEND)
+                    .setType("text/plain").putExtra(Intent.EXTRA_TEXT, "hi");
+            startActivity(Intent.createChooser(intent, "Share Via"));
+            return super.onOptionsItemSelected(item);
+        } else if (id == R.id.applozicUserProfile) {
+
+            Intent intent = new Intent(getActivity(), ConversationActivity.class);
+            intent.putExtra(ConversationUIService.SEARCH_STRING, searchString);
+            intent.putExtra(ConversationUIService.TAKE_ORDER, true);
+            intent.putExtra(ConversationUIService.PROFILE_INTENT, true);
+            startActivity(intent);
+
+            //profilefragment.setApplozicPermissions(applozicPermission);
+            //addFragment(this, profilefragment, ProfileFragment.ProfileFragmentTag);
+
+        } /*else if (id == R.id.logout) {
+            try {
+                if (!TextUtils.isEmpty(alCustomizationSettings.getLogoutPackage())) {
+                    Class loginActivity = Class.forName(alCustomizationSettings.getLogoutPackage().trim());
+                    if (loginActivity != null) {
+                        new UserClientService(this).logout();
+                        Toast.makeText(getBaseContext(), getString(R.string.user_logout_info), Toast.LENGTH_SHORT).show();
+                        Intent intent = new Intent(this, loginActivity);
+                        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_SINGLE_TOP);
+                        startActivity(intent);
+                        finish();
+                    }
+                }
+            } catch (ClassNotFoundException e) {
+                e.printStackTrace();
+            }
+        }*/
+        return false;
     }
 
     public void addMessage(final Message message) {
@@ -326,10 +382,9 @@ public void run() {
                 //listView.smoothScrollToPosition(messageList.size());
                 //listView.setSelection(0);
 
-                Log.d("emptyTextView1", "emptyTextView1");
-                startChatLayout.setVisibility(View.GONE);
                 emptyTextView.setVisibility(View.GONE);
-                emptyTextView.setText(!TextUtils.isEmpty(alCustomizationSettings.getNoConversationLabel()) ? alCustomizationSettings.getNoConversationLabel() : getResources().getString(R.string.no_conversation));
+                startChatLayout.setVisibility(View.GONE);
+                //emptyTextView.setText(!TextUtils.isEmpty(alCustomizationSettings.getNoConversationLabel()) ? alCustomizationSettings.getNoConversationLabel() : getResources().getString(R.string.no_conversation));
                 // startQNewButton.setVisibility(View.GONE);
 
                 menu.findItem(R.id.start_new).setVisible(true);
@@ -485,7 +540,7 @@ public void run() {
                     recyclerAdapter.notifyDataSetChanged();
                     if (messageList.isEmpty()) {
                         //emptyTextView.setVisibility(View.VISIBLE);
-                        Log.d("emptyTextView2", "emptyTextView2");
+
                         emptyTextView.setVisibility(View.GONE);
                         startChatLayout.setVisibility(View.VISIBLE);
                     }
@@ -558,13 +613,9 @@ public void checkForEmptyConversations() {
         boolean isLodingConversation = (downloadConversation != null &&
                 downloadConversation.getStatus() == AsyncTask.Status.RUNNING);
         if (latestMessageForEachContact.isEmpty() && !isLodingConversation) {
-
             /*emptyTextView.setVisibility(View.VISIBLE);
             emptyTextView.setText(!TextUtils.isEmpty(alCustomizationSettings.getNoConversationLabel()) ? alCustomizationSettings.getNoConversationLabel() : getResources().getString(R.string.no_conversation));
-*/
-
-
-            Log.d("emptyTextView3", "emptyTextView3");
+            *///startNewButton.setVisibility(applozicSetting.isStartNewButtonVisible() ? View.VISIBLE : View.GONE);
 
             emptyTextView.setVisibility(View.GONE);
             startChatLayout.setVisibility(View.VISIBLE);
@@ -572,12 +623,10 @@ public void checkForEmptyConversations() {
             menu.findItem(R.id.start_new).setVisible(false);
             menu.findItem(R.id.menu_search).setVisible(false);
 
-            //startNewButton.setVisibility(applozicSetting.isStartNewButtonVisible() ? View.VISIBLE : View.GONE);
         } else {
             emptyTextView.setVisibility(View.GONE);
-            //startNewButton.setVisibility(View.GONE);
-            Log.d("emptyTextView4", "emptyTextView4");
             startChatLayout.setVisibility(View.GONE);
+            // startNewButton.setVisibility(View.GONE);
         }
     }
 
@@ -628,6 +677,14 @@ public void onRefresh() {
         }
     }
 
+    @Override
+    public void onDestroy() {
+        super.onDestroy();
+        if(observer != null){
+            getContext().getApplicationContext().getContentResolver().unregisterContentObserver(observer);
+        }
+    }
+
     @Override
     public void onActivityCreated(Bundle savedInstanceState) {
         super.onActivityCreated(savedInstanceState);
@@ -771,7 +828,6 @@ public boolean onQueryTextSubmit(String query) {
         return false;
     }
 
-
     @Override
     public boolean onQueryTextChange(String newText) {
         this.searchString = newText;
@@ -783,77 +839,6 @@ public boolean onQueryTextChange(String newText) {
         return true;
     }
 
-    @Override
-    public boolean onOptionsItemSelected(MenuItem item) {
-        // Handle action bar item clicks here. The action bar will
-        // automatically handle clicks on the Home/Up button, so long
-        // as you specify a parent activity in AndroidManifest.xml.
-        int id = item.getItemId();
-        //noinspection SimplifiableIfStatement
-        if (id == R.id.start_new) {
-           /* if (!TextUtils.isEmpty(contactsGroupId)) {
-                if (Utils.isInternetAvailable(getActivity())) {
-                    conversationUIService.startContactActivityForResult();
-                } else {
-                    Intent intent = new Intent(getActivity(), MobiComKitPeopleActivity.class);
-                    ChannelDatabaseService channelDatabaseService = ChannelDatabaseService.getInstance(getActivity());
-                    String[] userIdArray = channelDatabaseService.getChannelMemberByName(contactsGroupId, null);
-                    if (userIdArray != null) {
-                        conversationUIService.startContactActivityForResult(intent, null, null, userIdArray);
-                    }
-                }
-            } else {*/
-            conversationUIService.startContactActivityForResult();
-            //}
-        } else if (id == R.id.conversations) {
-            Intent intent = new Intent(getActivity(), ChannelCreateActivity.class);
-            intent.putExtra(ChannelCreateActivity.GROUP_TYPE, Channel.GroupType.PUBLIC.getValue().intValue());
-            startActivity(intent);
-        } /*else if (id == R.id.broadcast) {
-            Intent intent = new Intent(getActivity(), ContactSelectionActivity.class);
-            intent.putExtra(ContactSelectionActivity.GROUP_TYPE, Channel.GroupType.BROADCAST.getValue().intValue());
-            startActivity(intent);
-        } */ else if (id == R.id.refresh) {
-            Toast.makeText(getActivity(), getString(R.string.info_message_sync), Toast.LENGTH_LONG).show();
-            //new ConversationActivity.SyncMessagesAsyncTask(this).execute();
-            new SyncMessages().execute();
-        } else if (id == R.id.shareOptions) {
-            Intent intent = new Intent(Intent.ACTION_SEND);
-            intent.setAction(Intent.ACTION_SEND)
-                    .setType("text/plain").putExtra(Intent.EXTRA_TEXT, "hi");
-            startActivity(Intent.createChooser(intent, "Share Via"));
-            return super.onOptionsItemSelected(item);
-        } else if (id == R.id.applozicUserProfile) {
-
-            Intent intent = new Intent(getActivity(), ConversationActivity.class);
-            intent.putExtra(ConversationUIService.SEARCH_STRING, searchString);
-            intent.putExtra(ConversationUIService.TAKE_ORDER, true);
-            intent.putExtra(ConversationUIService.PROFILE_INTENT, true);
-            startActivity(intent);
-
-            //profilefragment.setApplozicPermissions(applozicPermission);
-            //addFragment(this, profilefragment, ProfileFragment.ProfileFragmentTag);
-
-        } /*else if (id == R.id.logout) {
-            try {
-                if (!TextUtils.isEmpty(alCustomizationSettings.getLogoutPackage())) {
-                    Class loginActivity = Class.forName(alCustomizationSettings.getLogoutPackage().trim());
-                    if (loginActivity != null) {
-                        new UserClientService(this).logout();
-                        Toast.makeText(getBaseContext(), getString(R.string.user_logout_info), Toast.LENGTH_SHORT).show();
-                        Intent intent = new Intent(this, loginActivity);
-                        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_SINGLE_TOP);
-                        startActivity(intent);
-                        finish();
-                    }
-                }
-            } catch (ClassNotFoundException e) {
-                e.printStackTrace();
-            }
-        }*/
-        return false;
-    }
-
     public class DownloadConversation extends AsyncTask<Void, Integer, Long> {
 
         private RecyclerView view;
@@ -870,19 +855,6 @@ public boolean onOptionsItemSelected(MenuItem item) {
         private WeakReference<QuickConversationAdapter> quickConversationAdapterWeakReference;
         private WeakReference<TextView> textViewWeakReference;
 
-
-        public void setQuickConversationAdapterWeakReference(QuickConversationAdapter quickConversationAdapterWeakReference) {
-            this.quickConversationAdapterWeakReference = new WeakReference<QuickConversationAdapter>(quickConversationAdapterWeakReference);
-        }
-
-        public void setTextViewWeakReference(TextView emptyTextViewWeakReference) {
-            this.textViewWeakReference = new WeakReference<TextView>(emptyTextViewWeakReference);
-        }
-
-        public void setSwipeRefreshLayoutWeakReference(SwipeRefreshLayout swipeRefreshLayout) {
-            this.swipeRefreshLayoutWeakReference = new WeakReference<SwipeRefreshLayout>(swipeRefreshLayout);
-        }
-
         public DownloadConversation(RecyclerView view, boolean initial, int firstVisibleItem, int amountVisible, int totalItems, boolean showInstruction, String searchString) {
             this.context = getActivity();
             this.view = view;
@@ -899,6 +871,18 @@ public DownloadConversation(RecyclerView view, boolean initial, int firstVisible
             loadMoreMessages = true;
         }
 
+        public void setQuickConversationAdapterWeakReference(QuickConversationAdapter quickConversationAdapterWeakReference) {
+            this.quickConversationAdapterWeakReference = new WeakReference<QuickConversationAdapter>(quickConversationAdapterWeakReference);
+        }
+
+        public void setTextViewWeakReference(TextView emptyTextViewWeakReference) {
+            this.textViewWeakReference = new WeakReference<TextView>(emptyTextViewWeakReference);
+        }
+
+        public void setSwipeRefreshLayoutWeakReference(SwipeRefreshLayout swipeRefreshLayout) {
+            this.swipeRefreshLayoutWeakReference = new WeakReference<SwipeRefreshLayout>(swipeRefreshLayout);
+        }
+
         @Override
         protected void onPreExecute() {
             super.onPreExecute();
@@ -1019,9 +1003,6 @@ public void run() {
                     TextView emptyTextView = textViewWeakReference.get();
                     if (emptyTextView != null) {
                         //emptyTextView.setVisibility(messageList.isEmpty() ? View.VISIBLE : View.GONE);
-
-                        Log.d("emptyTextViewmessageList", ""+messageList.size());
-
                         emptyTextView.setVisibility(View.GONE);
                         startChatLayout.setVisibility(View.GONE);
 
@@ -1030,39 +1011,24 @@ public void run() {
                             menu.findItem(R.id.menu_search).setVisible(true);
                         }
 
-/*
-                        if(messageList.isEmpty()){
-                            emptyTextView.setVisibility(View.GONE);
-                            startChatLayout.setVisibility(View.VISIBLE);
-                            Log.d("emptyTextViewEmpty", "emptyTextViewEmpty");
-                        }else{
-                            emptyTextView.setVisibility(View.GONE);
-                            startChatLayout.setVisibility(View.GONE);
-                            Log.d("emptyTextViewEmptyNo", "emptyTextViewEmptyNo");
-                        }*/
-
                         if (!TextUtils.isEmpty(searchString) && messageList.isEmpty()) {
                             emptyTextView.setText(!TextUtils.isEmpty
                                     (alCustomizationSettings.getNoSearchFoundForChatMessages()) ?
-                                    alCustomizationSettings.getNoSearchFoundForChatMessages() :
-                                    getResources().getString(R.string.search_not_found_for_messages));
-                            Log.d("emptyTextView20", "emptyTextView20");
-
+                                    alCustomizationSettings.getNoSearchFoundForChatMessages() : getResources().getString(R.string.search_not_found_for_messages));
                             emptyTextView.setVisibility(View.VISIBLE);
                             startChatLayout.setVisibility(View.GONE);
 
                         } else if (TextUtils.isEmpty(searchString) && messageList.isEmpty()) {
                             emptyTextView.setText(!TextUtils.isEmpty
-                                    (alCustomizationSettings.getNoConversationLabel())
-                                    ? alCustomizationSettings.getNoConversationLabel() :
-                                    getResources().getString(R.string.no_conversation));
-                            Log.d("emptyTextView30", "emptyTextView30");
+                                    (alCustomizationSettings.getNoConversationLabel()) ?
+                                    alCustomizationSettings.getNoConversationLabel() : getResources().getString(R.string.no_conversation));
 
                             emptyTextView.setVisibility(View.GONE);
                             startChatLayout.setVisibility(View.VISIBLE);
 
                             menu.findItem(R.id.start_new).setVisible(false);
                             menu.findItem(R.id.menu_search).setVisible(false);
+
                         }
                     }
                 }
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/contact/AppContactFragment.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/contact/AppContactFragment.java
index 28fe332b..c50e20df 100755
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/contact/AppContactFragment.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/contact/AppContactFragment.java
@@ -2,10 +2,12 @@
 
 import android.annotation.SuppressLint;
 import android.app.Activity;
+import android.app.AlertDialog;
 import android.app.ProgressDialog;
 import android.app.SearchManager;
 import android.content.BroadcastReceiver;
 import android.content.Context;
+import android.content.DialogInterface;
 import android.content.Intent;
 import android.content.IntentFilter;
 import android.database.Cursor;
@@ -35,16 +37,20 @@
 import android.widget.TextView;
 import android.widget.Toast;
 
+import com.applozic.mobicomkit.ApplozicClient;
 import com.applozic.mobicomkit.api.account.user.MobiComUserPreference;
 import com.applozic.mobicomkit.api.account.user.RegisteredUsersAsyncTask;
+import com.applozic.mobicomkit.api.account.user.UserBlockTask;
 import com.applozic.mobicomkit.broadcast.BroadcastService;
 import com.applozic.mobicomkit.channel.database.ChannelDatabaseService;
 import com.applozic.mobicomkit.contact.AppContactService;
 import com.applozic.mobicomkit.contact.BaseContactService;
 import com.applozic.mobicomkit.contact.database.ContactDatabase;
+import com.applozic.mobicomkit.feed.ApiResponse;
 import com.applozic.mobicomkit.feed.RegisteredUsersApiResponse;
 import com.applozic.mobicomkit.uiwidgets.AlCustomizationSettings;
 import com.applozic.mobicomkit.uiwidgets.ApplozicSetting;
+import com.applozic.mobicomkit.uiwidgets.CustomTextViewRegular;
 import com.applozic.mobicomkit.uiwidgets.R;
 import com.applozic.mobicomkit.uiwidgets.alphanumbericcolor.AlphaNumberColorUtil;
 import com.applozic.mobicomkit.uiwidgets.async.AlGetMembersFromContactGroupListTask;
@@ -58,6 +64,7 @@
 import com.applozic.mobicommons.people.contact.Contact;
 
 import java.util.ArrayList;
+import java.util.Date;
 import java.util.List;
 import java.util.Locale;
 
@@ -81,6 +88,7 @@
     // Bundle key for saving previously selected search result item
     private static final String STATE_PREVIOUSLY_SELECTED_KEY =
             "net.mobitexter.mobiframework.contact.ui.SELECTED_ITEM";
+    static int CONSTANT_TIME = 60 * 1000;
     private static String inviteMessage;
     AlCustomizationSettings alCustomizationSettings;
     RefreshContactsScreenBroadcast refreshContactsScreenBroadcast;
@@ -100,6 +108,7 @@
     private String[] userIdArray;
     private MobiComUserPreference userPreference;
     private ContactDatabase contactDatabase;
+    private boolean isDeviceContactSync;
 
     /**
      * Fragments require an empty constructor.
@@ -125,6 +134,7 @@ public void onCreate(Bundle savedInstanceState) {
         mAdapter = new ContactsAdapter(getActivity().getApplicationContext());
         userPreference = MobiComUserPreference.getInstance(getContext());
         inviteMessage = Utils.getMetaDataValue(getActivity().getApplicationContext(), SHARE_TEXT);
+        isDeviceContactSync = ApplozicClient.getInstance(getContext()).isDeviceContactSync();
         if (savedInstanceState != null) {
             mSearchTerm = savedInstanceState.getString(SearchManager.QUERY);
             mPreviouslySelectedSearchItem =
@@ -233,7 +243,6 @@ public void onClick(View v) {
     public void onActivityCreated(Bundle savedInstanceState) {
         super.onActivityCreated(savedInstanceState);
 
-
         /*shareButton.setOnClickListener(new View.OnClickListener() {
             public void onClick(View v) {
                 Intent intent = new Intent();
@@ -262,6 +271,7 @@ public void onClick(View v) {
 
         setListAdapter(mAdapter);
         getListView().setOnItemClickListener(this);
+        getListView().setFastScrollEnabled(true);
         getListView().setOnScrollListener(new EndlessScrollListener());
 
         // If there's a previously selected search item from a saved state then don't bother
@@ -306,6 +316,19 @@ public void onItemClick(AdapterView<?> parent, View v, int position, long id) {
         // Moves to the Cursor row corresponding to the ListView item that was clicked
         cursor.moveToPosition(position);
         Contact contact = contactDatabase.getContact(cursor, "_id");
+
+        if (contact.isBlocked()) {
+            userUnBlockDialog(contact);
+            return;
+        }
+
+        //TODO: place Invite code here.Invite view is invisible, make visibility here based on condition.
+        if (contact.isDeviceContact()) {
+            //Starting sms app for invite with number
+            //openInvite();
+            return;
+        }
+
         mOnContactSelectedListener.onCustomContactSelected(contact);
     }
 
@@ -380,8 +403,14 @@ private int getListPreferredItemHeight() {
     @Override
     public Loader<Cursor> onCreateLoader(int id, Bundle args) {
 
-        Loader<Cursor> loader = contactDatabase.getSearchCursorLoader(mSearchTerm, userIdArray);
-        return loader;
+       /* Loader<Cursor> loader = contactDatabase.getSearchCursorLoader(mSearchTerm, userIdArray);
+        return loader;*/
+
+        if (isDeviceContactSync) {
+            return contactDatabase.getPhoneContactCursorLoader(mSearchTerm, userIdArray, true);
+        } else {
+            return contactDatabase.getSearchCursorLoader(mSearchTerm, userIdArray);
+        }
     }
 
     @Override
@@ -449,8 +478,27 @@ public void onCompletion() {
     @Override
     public void onResume() {
         super.onResume();
-        if (refreshContactsScreenBroadcast != null) {
+       /* if (refreshContactsScreenBroadcast != null) {
             LocalBroadcastManager.getInstance(getActivity()).registerReceiver(refreshContactsScreenBroadcast, new IntentFilter(BroadcastService.INTENT_ACTIONS.UPDATE_USER_DETAIL.toString()));
+        }*/
+
+        try {
+            if (refreshContactsScreenBroadcast != null) {
+                LocalBroadcastManager.getInstance(getActivity()).registerReceiver(refreshContactsScreenBroadcast, new IntentFilter(BroadcastService.INTENT_ACTIONS.UPDATE_USER_DETAIL.toString()));
+            }
+
+            if (isDeviceContactSync) {
+                if (userPreference.getDeviceContactSyncTime() != 0) {
+                    Date date = new Date();
+                    if ((date.getTime() - userPreference.getDeviceContactSyncTime()) >= CONSTANT_TIME) {
+                        Intent intent = new Intent(getActivity(), DeviceContactSyncService.class);
+                        intent.putExtra(DeviceContactSyncService.PROCESS_USER_DETAILS, true);
+                        DeviceContactSyncService.enqueueWork(getContext(), intent);
+                    }
+                }
+            }
+        } catch (Exception e) {
+
         }
 
     }
@@ -463,6 +511,57 @@ public void onDestroy() {
         }
     }
 
+    public void blockUserProcess(final Contact contact, final boolean block) {
+        final ProgressDialog progressDialog = ProgressDialog.show(getActivity(), "",
+                getActivity().getString(R.string.please_wait_info), true);
+
+        UserBlockTask.TaskListener listener = new UserBlockTask.TaskListener() {
+
+            @Override
+            public void onSuccess(ApiResponse apiResponse) {
+                getLoaderManager().restartLoader(
+                        ContactsQuery.QUERY_ID, null, AppContactFragment.this);
+            }
+
+            @Override
+            public void onFailure(ApiResponse apiResponse, Exception exception) {
+                String error = getString(Utils.isInternetAvailable(getActivity()) ? R.string.applozic_server_error : R.string.you_need_network_access_for_block_or_unblock);
+                Toast toast = Toast.makeText(getActivity(), error, Toast.LENGTH_LONG);
+                toast.setGravity(Gravity.CENTER, 0, 0);
+                toast.show();
+            }
+
+            @Override
+            public void onCompletion() {
+                if (progressDialog != null && progressDialog.isShowing()) {
+                    progressDialog.dismiss();
+                }
+            }
+
+        };
+
+        new UserBlockTask(getActivity(), listener, contact.getUserId(), block).execute((Void) null);
+    }
+
+    public void userUnBlockDialog(final Contact contact) {
+        AlertDialog.Builder alertDialog = new AlertDialog.Builder(getActivity()).
+                setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialogInterface, int i) {
+                        blockUserProcess(contact, false);
+                    }
+                });
+        alertDialog.setNegativeButton(android.R.string.cancel, new DialogInterface.OnClickListener() {
+            @Override
+            public void onClick(DialogInterface dialogInterface, int i) {
+            }
+        });
+        String name = contact.getDisplayName();
+        alertDialog.setMessage(getString(R.string.user_un_block_info).replace("[name]", name));
+        alertDialog.setCancelable(true);
+        alertDialog.create().show();
+    }
+
     /**
      * This interface defines constants for the Cursor and CursorLoader, based on constants defined
      * in the {@link android.provider.ContactsContract.Contacts} class.
@@ -565,9 +664,11 @@ public ContactsAdapter(Context context) {
          */
         private int indexOfSearchQuery(String displayName) {
             if (!TextUtils.isEmpty(mSearchTerm)) {
+
                 resultTextView.setVisibility(View.VISIBLE);
                 resultTextView.setText(R.string.no_contacts);
                 startInviteLayout.setVisibility(View.GONE);
+
                 return displayName.toLowerCase(Locale.getDefault()).indexOf(
                         mSearchTerm.toLowerCase(Locale.getDefault()));
             } else {
@@ -594,11 +695,13 @@ public View newView(Context context, Cursor cursor, ViewGroup parent) {
                     mInflater.inflate(R.layout.contact_list_item, parent, false);
 
             final ViewHolder holder = new ViewHolder();
-            holder.text1 = (TextView) itemLayout.findViewById(R.id.text1);
-            holder.text2 = (TextView) itemLayout.findViewById(R.id.text2);
-            holder.contactNumberTextView = (TextView) itemLayout.findViewById(R.id.contactNumberTextView);
+            holder.text1 = (CustomTextViewRegular) itemLayout.findViewById(R.id.text1);
+            holder.text2 = (CustomTextViewRegular) itemLayout.findViewById(R.id.text2);
+            holder.contactNumberTextView = (CustomTextViewRegular) itemLayout.findViewById(R.id.contactNumberTextView);
             holder.icon = (CircleImageView) itemLayout.findViewById(R.id.contactImage);
             holder.contactIcon = (TextView) itemLayout.findViewById(R.id.contactIcon);
+            holder.invite = itemLayout.findViewById(R.id.invite);
+            holder.unBlock = itemLayout.findViewById(R.id.unblock);
             itemLayout.setTag(holder);
             return itemLayout;
         }
@@ -616,8 +719,25 @@ public void bindView(View view, Context context, Cursor cursor) {
             Contact contact = contactDatabase.getContact(cursor, "_id");
             ///////////////////
 
-            holder.text1.setText(contact.getDisplayName() == null ? contact.getUserId() : contact.getDisplayName());
+            holder.text1.setText(contact.getDisplayName());
+            //== null ? contact.getUserId() : contact.getDisplayName());
             holder.text2.setText(contact.getUserId());
+            holder.unBlock.setVisibility(View.GONE);
+            holder.invite.setVisibility(View.GONE);
+
+            if (isDeviceContactSync) {
+                if (contact.isDeviceContact()) {
+                    holder.invite.setVisibility(View.VISIBLE);
+                } else {
+                    holder.invite.setVisibility(View.GONE);
+                }
+
+                if (contact.isBlocked()) {
+                    holder.unBlock.setVisibility(View.VISIBLE);
+                } else {
+                    holder.unBlock.setVisibility(View.GONE);
+                }
+            }
             if (contact != null && !TextUtils.isEmpty(contact.getDisplayName())) {
                 contactNumber = contact.getDisplayName().toUpperCase();
                 firstLetter = contact.getDisplayName().toUpperCase().charAt(0);
@@ -640,12 +760,17 @@ public void bindView(View view, Context context, Cursor cursor) {
                     mImageLoader.loadImage(contact, holder.icon, holder.contactIcon);
                 }
             }
-            if (!TextUtils.isEmpty(contact.getContactNumber())) {
+            if (!TextUtils.isEmpty(contact.getContactNumber()) || isDeviceContactSync) {
                 layoutParams = (RelativeLayout.LayoutParams) holder.text1.getLayoutParams();
                 layoutParams.setMargins(0, 20, 0, 0);
                 holder.text1.setLayoutParams(layoutParams);
                 holder.contactNumberTextView.setVisibility(View.VISIBLE);
-                holder.contactNumberTextView.setText(contact.getContactNumber());
+                if (isDeviceContactSync) {
+                    holder.contactNumberTextView.setText(contact.getFormattedContactNumber());
+                } else {
+                    holder.contactNumberTextView.setText(contact.getContactNumber());
+                }
+                //holder.contactNumberTextView.setText(contact.getContactNumber());
 
             } else {
                 holder.text2.setVisibility(View.GONE);
@@ -753,11 +878,13 @@ public int getSectionForPosition(int i) {
          * calling findViewById in each iteration of bindView.
          */
         private class ViewHolder {
-            TextView text1;
-            TextView text2;
+            CustomTextViewRegular text1;
+            CustomTextViewRegular text2;
             CircleImageView icon;
             TextView contactIcon;
-            TextView contactNumberTextView;
+            CustomTextViewRegular contactNumberTextView;
+            TextView invite;
+            TextView unBlock;
         }
     }
 
@@ -776,6 +903,5 @@ public void onReceive(Context context, Intent intent) {
             }
         }
     }
-
 }
 
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/contact/ContactSelectionFragment.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/contact/ContactSelectionFragment.java
index fe5934bb..d3819b5a 100644
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/contact/ContactSelectionFragment.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/contact/ContactSelectionFragment.java
@@ -514,8 +514,14 @@ public void onFailure(ChannelFeedApiResponse channelFeedApiResponse, Context con
     @Override
     public Loader<Cursor> onCreateLoader(int id, Bundle args) {
 
-        Loader<Cursor> loader = contactDatabase.getSearchCursorLoader(mSearchTerm, groupContacts);
-        return loader;
+        /*Loader<Cursor> loader = contactDatabase.getSearchCursorLoader(mSearchTerm, groupContacts);
+        return loader;*/
+
+        if (ApplozicClient.getInstance(getContext()).isDeviceContactSync()) {
+            return contactDatabase.getPhoneContactCursorLoader(mSearchTerm, groupContacts, false);
+        } else {
+            return contactDatabase.getSearchCursorLoader(mSearchTerm, groupContacts);
+        }
     }
 
     @Override
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/contact/DeviceContactSyncService.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/contact/DeviceContactSyncService.java
new file mode 100644
index 00000000..70635510
--- /dev/null
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/contact/DeviceContactSyncService.java
@@ -0,0 +1,105 @@
+package com.applozic.mobicomkit.uiwidgets.people.contact;
+
+import android.content.Context;
+import android.content.Intent;
+import android.database.Cursor;
+import android.net.Uri;
+import android.provider.ContactsContract;
+import android.support.annotation.NonNull;
+import android.support.v4.app.JobIntentService;
+import android.util.Log;
+
+import com.applozic.mobicomkit.api.account.user.MobiComUserPreference;
+import com.applozic.mobicomkit.api.account.user.UserService;
+import com.applozic.mobicomkit.contact.AppContactService;
+import com.applozic.mobicomkit.contact.DeviceContactService;
+import com.applozic.mobicommons.people.contact.Contact;
+
+import java.util.Date;
+import java.util.HashSet;
+import java.util.Set;
+
+/**
+ * Created by devashish on 02/06/16.
+ */
+public class DeviceContactSyncService extends JobIntentService {
+
+    private static final String TAG= "DvcContactSync";
+    public static final String PROCESS_USER_DETAILS = "PROCESS_USER_DETAILS";
+    public static final String PROCESS_MODIFIED_DEVICE_CONTACTS = "PROCESS_MODIFIED_DEVICE_CONTACTS";
+
+    static final int JOB_ID = 2000;
+
+
+    static public void enqueueWork(Context context, Intent work) {
+        enqueueWork(context, DeviceContactSyncService.class, JOB_ID, work);
+    }
+
+    @Override
+    protected void onHandleWork(@NonNull Intent intent) {
+        if(intent == null){
+            return;
+        }
+        Thread thread = new Thread(new DeviceContactSync(intent.getBooleanExtra(PROCESS_USER_DETAILS, false), intent.getBooleanExtra(PROCESS_MODIFIED_DEVICE_CONTACTS, false)));
+        thread.start();
+    }
+
+    private class DeviceContactSync implements Runnable {
+
+        private boolean processUserDetails;
+        private boolean processModifiedContacts;
+
+        public DeviceContactSync(boolean processUserDetails, boolean processModifiedContacts) {
+            this.processUserDetails = processUserDetails;
+            this.processModifiedContacts = processModifiedContacts;
+        }
+
+        @Override
+        public void run() {
+            try {
+                if (processModifiedContacts) {
+                    processModifiedContacts();
+                } else {
+                    process(processUserDetails);
+                }
+            } catch (Exception e) {
+                e.printStackTrace();
+            }
+        }
+    }
+
+    private void process(boolean processUserDetails) {
+        Uri uri = ContactsContract.CommonDataKinds.Phone.CONTENT_URI;
+        String[] projection = new String[]{ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME,
+                ContactsContract.CommonDataKinds.Phone.NUMBER,  ContactsContract.CommonDataKinds.Phone.LOOKUP_KEY};
+        Cursor people = getApplicationContext().getContentResolver().query(uri, projection, null, null, null);
+        AppContactService appContactService = new AppContactService(this);
+        Log.i(TAG, "Found " + people.getCount() + " device contacts");
+
+        DeviceContactService deviceContactService = new DeviceContactService(getApplicationContext());
+        Set<String> userIdList = new HashSet<>();
+
+        while (people.moveToNext()) {
+            Contact contact = deviceContactService.getContactFromContactCursor(people);
+            if (contact == null) {
+                continue;
+            }
+            appContactService.upsert(contact);
+            userIdList.add(contact.getFormattedContactNumber());
+        }
+
+        if (processUserDetails && !userIdList.isEmpty()) {
+            UserService userService = UserService.getInstance(DeviceContactSyncService.this);
+            userService.processUserDetailsByContactNos(userIdList);
+        }
+
+        if (processUserDetails) {
+            MobiComUserPreference.getInstance(DeviceContactSyncService.this).setDeviceContactSyncTime(new Date().getTime());
+        }
+    }
+
+    private void processModifiedContacts() {
+        new DeviceContactService(DeviceContactSyncService.this).processModifiedContacts();
+    }
+
+}
diff --git a/mobicomkitui/src/main/res/drawable/rounded_square_invite.xml b/mobicomkitui/src/main/res/drawable/rounded_square_invite.xml
new file mode 100644
index 00000000..72d38e4b
--- /dev/null
+++ b/mobicomkitui/src/main/res/drawable/rounded_square_invite.xml
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<shape xmlns:android="http://schemas.android.com/apk/res/android">
+    <solid android:color="@android:color/transparent" />
+    <stroke
+        android:width="1dp"
+        android:color="@color/alphabet_k" />
+    <corners android:radius="5dp" />
+    <padding
+        android:bottom="0dp"
+        android:left="5dp"
+        android:right="5dp"
+        android:top="0dp" />
+</shape>
\ No newline at end of file
diff --git a/mobicomkitui/src/main/res/drawable/rounded_square_unblock.xml b/mobicomkitui/src/main/res/drawable/rounded_square_unblock.xml
new file mode 100644
index 00000000..441e51ef
--- /dev/null
+++ b/mobicomkitui/src/main/res/drawable/rounded_square_unblock.xml
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<shape xmlns:android="http://schemas.android.com/apk/res/android">
+    <solid android:color="@android:color/transparent" />
+    <stroke
+        android:width="1dp"
+        android:color="@color/alphabet_g" />
+    <corners android:radius="2dp" />
+    <padding
+        android:bottom="0dp"
+        android:left="5dp"
+        android:right="5dp"
+        android:top="0dp" />
+</shape>
\ No newline at end of file
diff --git a/mobicomkitui/src/main/res/layout/contact_list_item.xml b/mobicomkitui/src/main/res/layout/contact_list_item.xml
index eab75335..e08f34d2 100755
--- a/mobicomkitui/src/main/res/layout/contact_list_item.xml
+++ b/mobicomkitui/src/main/res/layout/contact_list_item.xml
@@ -56,18 +56,18 @@
         android:layout_toEndOf="@+id/profile_image_relative_layout"
         android:layout_alignParentEnd="true">
 
-        <TextView
+        <com.applozic.mobicomkit.uiwidgets.CustomTextViewRegular
             android:id="@+id/contactNumberTextView"
             android:layout_width="match_parent"
             android:layout_height="26dp"
             android:layout_marginBottom="5dp"
             android:layout_marginTop="2dp"
             android:ellipsize="end"
-            android:singleLine="true"
+            android:maxLines="1"
             android:text=""
             android:textColor="@color/message_details_text_color"
             android:textSize="14sp"
-            android:visibility="gone" />
+            android:visibility="visible" />
 
     </RelativeLayout>
 
@@ -77,34 +77,36 @@
     <!-- Use standard android.R class text2 id instead of app specific id. This is just useful for
          consistency. This is secondary text and not always visible so by default is has its
          visibility set to gone -->
-    <TextView
+
+    <com.applozic.mobicomkit.uiwidgets.CustomTextViewRegular
         android:id="@+id/text2"
         android:layout_width="match_parent"
         android:layout_height="26dp"
         android:layout_alignParentBottom="true"
+        android:layout_alignParentEnd="true"
         android:layout_alignParentRight="true"
+        android:layout_toEndOf="@+id/profile_image_relative_layout"
         android:layout_toRightOf="@+id/profile_image_relative_layout"
+        android:layout_toLeftOf="@+id/applozic_contact_text_relative_layout"
+        android:layout_toStartOf="@+id/applozic_contact_text_relative_layout"
         android:ellipsize="marquee"
-        android:fontFamily="sans-serif"
+        android:paddingEnd="@dimen/listview_item_padding"
         android:paddingLeft="@dimen/listview_item_padding"
-        android:paddingStart="@dimen/listview_item_padding"
         android:paddingRight="@dimen/listview_item_padding"
-        android:paddingEnd="@dimen/listview_item_padding"
-        android:singleLine="true"
+        android:paddingStart="@dimen/listview_item_padding"
+        android:maxLines="1"
         android:text="@string/search_match_other"
+        android:textAlignment="gravity"
         android:textColor="@color/message_text_color"
-        android:textSize="14dp"
-        android:visibility="gone"
-        android:layout_alignParentEnd="true"
-        android:layout_toEndOf="@+id/profile_image_relative_layout"
         android:textDirection="locale"
-        android:textAlignment="gravity" />
+        android:textSize="14sp"
+        android:visibility="visible" />
 
     <!-- Use standard android.R class text1 id instead of app specific id. This is just useful for
          consistency. This view also sets layout_alignWithParentIfMissing=true which lets the view
          align with the parent view if the text2 view is not part of the view hierarchy (which is
          its initial state). -->
-    <TextView
+    <com.applozic.mobicomkit.uiwidgets.CustomTextViewRegular
         android:id="@+id/text1"
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
@@ -118,11 +120,57 @@
         android:gravity="center_vertical"
         android:paddingLeft="@dimen/listview_item_padding"
         android:paddingStart="@dimen/listview_item_padding"
-        android:singleLine="true"
+        android:maxLines="1"
         android:textDirection="locale"
         android:textColor="@color/message_details_text_color"
         android:textSize="18sp"
         android:layout_toEndOf="@id/profile_image_relative_layout" />
 
+    <RelativeLayout
+        android:id="@+id/applozic_contact_text_relative_layout"
+        android:layout_width="wrap_content"
+        android:layout_height="match_parent">
+
+        <TextView
+            android:id="@+id/unblock"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_alignParentEnd="true"
+            android:layout_alignParentRight="true"
+            android:layout_centerVertical="true"
+            android:layout_marginEnd="8dp"
+            android:layout_marginRight="8dp"
+            android:background="@drawable/rounded_square_unblock"
+            android:gravity="center_vertical"
+            android:paddingBottom="10dp"
+            android:paddingTop="10dp"
+            android:text="Unblock"
+            android:textAlignment="gravity"
+            android:textColor="@color/alphabet_g"
+            android:textDirection="locale"
+            android:textSize="12sp"
+            android:visibility="gone" />
+
+        <TextView
+            android:id="@+id/invite"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_alignParentEnd="true"
+            android:layout_alignParentRight="true"
+            android:layout_centerVertical="true"
+            android:layout_marginEnd="8dp"
+            android:layout_marginRight="8dp"
+            android:background="@drawable/rounded_square_invite"
+            android:gravity="center_vertical"
+            android:paddingBottom="10dp"
+            android:paddingTop="10dp"
+            android:text="Invite"
+            android:textAlignment="gravity"
+            android:textColor="@color/alphabet_k"
+            android:textDirection="locale"
+            android:textSize="12sp"
+            android:visibility="visible" />
+    </RelativeLayout>
+
 
 </RelativeLayout>
\ No newline at end of file
diff --git a/mobicomkitui/src/main/res/layout/contact_users_layout.xml b/mobicomkitui/src/main/res/layout/contact_users_layout.xml
index 995161fc..c5ff4379 100755
--- a/mobicomkitui/src/main/res/layout/contact_users_layout.xml
+++ b/mobicomkitui/src/main/res/layout/contact_users_layout.xml
@@ -2,7 +2,6 @@
 <RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
     android:layout_width="match_parent"
     android:layout_height="match_parent"
-    xmlns:app="http://schemas.android.com/apk/res-auto"
     android:orientation="vertical"
     android:padding="8dp">
 
@@ -15,7 +14,7 @@
         android:layout_marginTop="6dp"
         android:layout_marginStart="6dp">
 
-        <TextView
+        <com.applozic.mobicomkit.uiwidgets.CustomTextViewRegular
             android:id="@+id/alphabeticImage"
             android:layout_width="50dp"
             android:layout_height="50dp"
@@ -39,7 +38,7 @@
 
     </RelativeLayout>
 
-    <TextView
+    <com.applozic.mobicomkit.uiwidgets.CustomTextViewRegular
         android:id="@+id/lastSeenAtTextView"
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
@@ -50,7 +49,7 @@
         android:paddingLeft="@dimen/listview_item_padding"
         android:paddingStart="@dimen/listview_item_padding"
         android:textDirection="locale"
-        android:textAlignment="gravity" android:text="Just now"
+        android:textAlignment="gravity"
         android:paddingRight="@dimen/listview_item_padding"
         android:paddingEnd="@dimen/listview_item_padding"
         android:singleLine="true"
@@ -63,7 +62,8 @@
          consistency. This view also sets layout_alignWithParentIfMissing=true which lets the view
          align with the parent view if the text2 view is not part of the view hierarchy (which is
          its initial state). -->
-    <TextView
+
+    <com.applozic.mobicomkit.uiwidgets.CustomTextViewRegular
         android:id="@+id/displayName"
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
@@ -82,13 +82,13 @@
         android:paddingEnd="@dimen/listview_item_padding"
         android:maxLines="1"
         android:textColor="#FF333333"
-        android:textSize="15sp" android:text="Sai Android"
+        android:textSize="15sp"
         android:layout_alignParentEnd="true"
         android:layout_toEndOf="@id/profile_image_relative_layout" />
 
 
     <!--Originally, @string/admin_text at android:text="Group Admin"-->
-    <TextView
+    <com.applozic.mobicomkit.uiwidgets.CustomTextViewRegular
         android:id="@+id/adminTextView"
         android:layout_width="wrap_content"
         android:layout_height="wrap_content"
@@ -107,7 +107,6 @@
         android:text="@string/admin_text"
         android:textSize="12sp"
         android:visibility="gone"
-        android:layout_alignParentEnd="true"
-        />
+        android:layout_alignParentEnd="true" />
 
 </RelativeLayout>
\ No newline at end of file
diff --git a/mobicomkitui/src/main/res/layout/mobicom_message_list.xml b/mobicomkitui/src/main/res/layout/mobicom_message_list.xml
index f26982fa..37b9dd7a 100644
--- a/mobicomkitui/src/main/res/layout/mobicom_message_list.xml
+++ b/mobicomkitui/src/main/res/layout/mobicom_message_list.xml
@@ -84,7 +84,7 @@
 
         </android.support.v4.widget.SwipeRefreshLayout>
 
-        <TextView
+        <com.applozic.mobicomkit.uiwidgets.CustomTextViewRegular
         android:id="@+id/noConversations"
         android:layout_width="match_parent"
         android:layout_height="match_parent"
@@ -183,7 +183,8 @@
 
     </RelativeLayout>
 
-    <TextView
+    <com.applozic.mobicomkit.uiwidgets.CustomTextViewRegular
+
         android:id="@+id/emptyConversation"
         android:layout_width="fill_parent"
         android:layout_height="fill_parent"
@@ -212,7 +213,7 @@
             android:layout_height="fill_parent"
             android:adjustViewBounds="true" />
 
-        <TextView
+        <com.applozic.mobicomkit.uiwidgets.CustomTextViewRegular
             android:id="@+id/attached_file"
             android:layout_width="fill_parent"
             android:layout_height="fill_parent"
@@ -316,7 +317,7 @@
         android:orientation="horizontal"
         android:visibility="gone">
 
-        <TextView
+        <com.applozic.mobicomkit.uiwidgets.CustomTextViewRegular
             android:id="@+id/isTyping"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
@@ -500,7 +501,7 @@
                         android:layout_marginTop="1dp"
                         android:src="@drawable/applozic_audio_record" />
 
-                    <TextView
+                    <com.applozic.mobicomkit.uiwidgets.CustomTextViewRegular
                         android:id="@+id/recording_time_text_view"
                         android:layout_width="wrap_content"
                         android:layout_height="wrap_content"
@@ -572,7 +573,7 @@
         android:orientation="horizontal"
         android:visibility="gone">
 
-        <TextView
+        <com.applozic.mobicomkit.uiwidgets.CustomTextViewRegular
             android:id="@+id/user_not_able_to_chat_textView"
             android:layout_width="match_parent"
             android:layout_height="match_parent"
diff --git a/mobicomkitui/src/main/res/values-hi/String.xml b/mobicomkitui/src/main/res/values-hi/String.xml
deleted file mode 100644
index 294a8bac..00000000
--- a/mobicomkitui/src/main/res/values-hi/String.xml
+++ /dev/null
@@ -1,403 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<resources  xmlns:tools="http://schemas.android.com/tools"
-    tools:ignore="MissingTranslation">
-    <string name="internet_connection_not_available">कोई इंटरनेट कनेक्शन नहीं</string>
-    <string name="you_need_network_access_for_delete">वार्तालाप हटाने के लिए आपको नेटवर्क एक्सेस की आवश्यकता है </string>
-    <string name="applozic_server_error">ऊप्स! आपको एक त्रुटि मिली, बाद में फिर से प्रयास करें</string>
-    <string name="you_need_network_access_for_block_or_unblock">ब्लॉक / अनब्लॉक उपयोगकर्ता के लिए आपको नेटवर्क एक्सेस की आवश्यकता है</string>
-    <string name="internet_connection_for_group_name_info">समूह नाम बदलने के लिए आपके फ़ोन को इंटरनेट कनेक्शन की आवश्यकता है</string>
-    <string name="you_dont_have_any_network_access_info">आपके पास अभी तक कोई नेटवर्क पहुंच नहीं है</string>
-    <string name="failed_to_leave_group">समूह को छोड़ने में विफल रहा</string>
-    <string name="user_is_already_exists">उपयोगकर्ता पहले से ही समूह में मौजूद है</string>
-    <string name="delete_conversation_failed">हटाएं विफल</string>
-    <string name="menu_search">खोज</string>
-    <string name="menu_add_contact">एक नया संपर्क बनाएं</string>
-    <string name="no_contacts">कोई संपर्क नहीं मिला</string>
-    <string name="search_hint">खोज...</string>
-    <string name="phone_number_not_present">फोन नंबर मौजूद नहीं है</string>
-    <string name="zero_friends_on_phone">फोन संपर्कों पर कोई मिलान संपर्क नहीं मिला लेकिन आप अभी भी ईमेल, यूजर आईडी या फोन नंबर दर्ज करके संदेश भेज सकते हैं</string>
-    <string name="delete_thread_text">हटाया जा रहा है ....</string>
-    <string name="search_title">खोज</string>
-    <string name ="applozic_user_already_in_a_group">समूह प्रकार में पहले से ही जोड़ा गया है</string>
-    <string name ="applozic_contacts_loading_info">लोड हो रहा है, कृपया प्रतीक्षा करें...</string>
-    <string name ="applozic_contacts_loading_error">संपर्कों को लोड करने के लिए आपको नेटवर्क एक्सेस की आवश्यकता है</string>
-    <string name="alphabet">ABCDEFGHIJKLMNOPQRSTUVWXYZ</string>
-    <string name="contact_permission">संपर्क की अनुमति के उपयोग के लिए आवश्यक हैं</string>
-    <string name="storage_permission">उपयोग करने के लिए संग्रहण अनुमति आवश्यक है</string>
-    <string name="location_permission">उपयोग करने के लिए स्थान अनुमति आवश्यक है</string>
-    <string name="phone_call_permission">प्रवेश करने के लिए फोन कॉल की अनुमति आवश्यक है</string>
-    <string name="phone_camera_permission">एक्सेस करने के लिए कैमरा अनुमति आवश्यक है</string>
-    <string name="record_audio">ऑडियो रिकॉर्डिंग अनुमति की आवश्यकता है</string>
-    <string name="contact_permission_not_granted">संपर्क के लिए अनुमति नहीं दी गई थी</string>
-    <string name="storage_permission_not_granted">संग्रहण के लिए अनुमतियाँ नहीं दी गईं</string>
-    <string name="location_permission_not_granted">स्थान के लिए अनुमतियाँ नहीं दी गईं</string>
-    <string name="phone_state_permission_not_granted">फ़ोन स्टेट के लिए अनुमतियां प्रदान नहीं की गईं</string>
-    <string name="phone_call_permission_not_granted">फोन कॉल के लिए अनुमति नहीं दी गई थी</string>
-    <string name="phone_camera_permission_not_granted">कैमरे के लिए अनुमति नहीं दी गई थी</string>
-    <string name="record_audio_permission_not_granted">ऑडियो रिकॉर्डिंग के लिए अनुमतियां प्रदान नहीं की गईं</string>
-    <string name="contact_permission_granted">संपर्क अनुमति दी गई है</string>
-    <string name="storage_permission_granted">संग्रहण अनुमतियां दी गई हैं</string>
-    <string name="location_permission_granted">स्थान अनुमतियां दी गई हैं</string>
-    <string name="phone_state_permission_granted">फोन स्थिति अनुमति दी गई है</string>
-    <string name="phone_call_permission_granted">फोन कॉल की अनुमति दी गई है</string>
-    <string name="phone_camera_permission_granted">कैमरा अनुमति दी गई है</string>
-    <string name="record_audio_permission_granted">ऑडियो रिकार्ड अनुमति दी गई है</string>
-    <string name="mobicom_max_attachment_warning">अधिकतम लगाव सीमा तक पहुंची</string>
-    <string name="mobicom_select_attachment_text">कम से कम एक अटैचमेंट चुनें</string>
-    <string name="audio_recording_send_text">ऑडियो रिकॉर्ड करने के लिए प्रारंभ पर टैप करें</string>
-    <string name="applozic_audio_permission_missing">ऑडियो रिकॉर्डर लॉन्च करने में असमर्थ</string>
-    <string name="applozic_message_info">संदेश जानकारी</string>
-    <string name="applozic_message_info_no_network">संदेश जानकारी लाने में सक्षम नहीं</string>
-    <string name="applozic_user_profile_heading">प्रोफाइल</string>
-    <string name="send_message_to">भेजना..</string>
-    <string name="info_attachment_max_allowed_file_size_exceeded">अधिकतम अपलोड फ़ाइल आकार सीमा नहीं पार कर सकते हैं</string>
-    <string name="please_wait_creating_group_of_two">कृपया प्रतीक्षा करें...</string>
-    <string name="sort_contacts_by_lastSeenAt">पिछले द्वारा देखा द्वारा क्रमबद्ध</string>
-    <string name="sort_contacts_by_recent_chats">हाल ही की चैट के आधार पर क्रमबद्ध करें</string>
-    <string name="app_name">Applozic</string>
-    <string name="conversations">बातचीत</string>
-    <string name="channel_create_title">नया समूह</string>
-    <string name="channel_members_title">सदस्य जोड़ें</string>
-    <string name="select_at_least">कम से कम एक संपर्क का चयन होना चाहिए</string>
-    <string name="group_name_hint">समूह का नाम</string>
-    <string name="empty_conversations">कोई वार्तालाप नहीं!!!</string>
-    <string name="enter_message_hint">एक सन्देश लिखिए...</string>
-    <string name="send_text">भेजें</string>
-    <string name="cancel_text">रद्द करना</string>
-    <string name="start_text">प्रारंभ</string>
-    <string name="no_conversation">आपके पास कोई बातचीत नहीं है</string>
-    <string name="search_not_found_for_messages">कोई बातचीत नहीं मिली</string>
-    <string name="info_broadcast_message">कोई भी संदेश नहीं मिलेगा प्रत्येक प्राप्तकर्ता को अलग-अलग पाया जाएगा</string>
-    <string name="shareOptions">शेयर</string>
-    <string name="email">ईमेल आईडी मान</string>
-    <string name="info_sample_contact_list">नमूना के रूप में डिवाइस संपर्क दिखाते हुए यहां अपने ऐप संपर्कों को पॉप्युलेट करें</string>
-    <string name="info_message_sync">सर्वर के साथ संदेश सिंक करना, इसमें कुछ मिनट लग सकते हैं!</string>
-    <string name="instruction_open_conversation_thread">पूरी तरह से देखने के लिए किसी भी बातचीत पर टैप करें</string>
-    <string name="instruction_go_back_to_recent_conversation_list">पिछली स्क्रीन पर वापस जाने के लिए, बाएं से दाएं स्लाइड करें</string>
-    <string name="action_settings">सेटिंग्स</string>
-    <string name="user_block">ब्लॉक</string>
-    <string name="user_un_block">अनब्लॉक</string>
-    <string name="applozic_my_profile_option_info">प्रोफाइल</string>
-    <string name="location_services_disabled_message">स्थान भेजने के लिए आपके स्थान तक पहुंच की आवश्यकता है। स्थान पहुंच चालू करें</string>
-    <string name="location_services_disabled_title">स्थान सेवाएं अक्षम</string>
-    <string name="location_service_settings">सेटिंग्स</string>
-    <string name="location_sending_cancelled">स्थान भेजना रद्द</string>
-    <string name="unable_to_fetch_location">स्थान प्राप्त करने में असमर्थ</string>
-    <string name="waiting_for_current_location">वर्तमान स्थान की प्रतीक्षा कर रहा है</string>
-    <string name="select_file">किसी फाइल का चयन करें</string>
-    <string name="attachment_retry">पुन: प्रयास करें</string>
-    <string name="delete_conversation">मिटाना</string>
-    <string name="info_app_not_found_to_open_file">इस फ़ाइल को खोलने के लिए कोई एप्लिकेशन नहीं मिला</string>
-    <string name="unable_to_play_requested_audio_file">इस फ़ाइल को खोलने के लिए कोई एप्लिकेशन नहीं मिला</string>
-    <string name="file_not_selected">क्या आप फ़ाइल का चयन करना भूल गए?</string>
-    <string name="info_attachment_max_allowed_file_size">अधिकतम अपलोड फ़ाइल आकार की सीमा 10 Mb से अधिक नहीं हो सकती</string>
-    <string name="info_file_attachment_error">नहीं भेज सकते हैं! फ़ाइल पढ़ने के दौरान कुछ अनपेक्षित त्रुटि हुई</string>
-    <string name="select_file_count_limit">एक से अधिक फाइल का चयन नहीं कर सकता</string>
-    <string name="ScheduleText">अनुसूची</string>
-    <string name="enter_mt_message_hint">एक सन्देश लिखिए..</string>
-    <string name="messageOptions">संदेश विकल्प</string>
-    <string name="conversation">बातचीत</string>
-    <string name="conversation_options">विकल्प</string>
-    <string name="info_message_scheduled">संदेश सफलतापूर्वक शेड्यूल किया गया है</string>
-    <string name="sync_older_messages">क्या आप पुराने संदेशों को समन्वयित करना चाहते हैं?</string>
-    <string name="dialog_delete_conversation_title">बातचीत मिटा दो</string>
-    <string name="dialog_delete_conversation_confir">नाम के सभी संदेश हटाएं?</string>
-    <string name="negetiveButtonText">साफ़</string>
-    <string name="scheduleDialogHeader">अनुसूची संदेश</string>
-    <string name="scheduledDateText">निर्धारित तिथि :</string>
-    <string name="scheduledTimeText">निर्धारित समय</string>
-    <string name="defaultDate">dd-mm-yyyy</string>
-    <string name="defaultTime">HH:MM:SS</string>
-    <string name="selectionRequestText">अपना संदेश शेड्यूल करने के लिए दिनांक और समय चुनें।</string>
-    <string name="wearable_action_title">जवाब दें</string>
-    <string name="wearable_action_label"> को जवाब दें</string>
-
-    <string name ="you_string">आप</string>
-    <string name="applozic_account_closed">अपने ऐप में चैट को सक्रिय करने के लिए कृपया एप्लीकोज से संपर्क करें</string>
-    <string name="applozic_free_version_not_allowed_on_release_build">अपने ऐप में चैट को सक्रिय करने के लिए कृपया एप्लीकोज से संपर्क करें</string>
-    <string name ="ok_alert">ठीक</string>
-    <string name ="subtitle_last_seen_at_time">अंतिम बार देखा गया</string>
-    <string name="is_typing">टाइप कर रहा है...</string>
-    <string name="user_online">ऑनलाइन</string>
-    <string name="removing_channel_user">निकाला जा रहा है</string>
-    <string name="adding_channel_user">जोड़ा जा रहा है ....</string>
-    <string name="deleting_channel_user">हटा रहा है ...</string>
-    <string name="channel_member_exit">बाहर निकल रहा है ....</string>
-    <string name="channel_update">समूह जानकारी अपडेट कर रहा है ....</string>
-    <string name="dialog_remove_group_user">[समूह] से [नाम] निकालें?</string>
-    <string name="dialog_add_group_user">[नाम] को [समूह] में जोड़ें?</string>
-    <string name="group_name_info">[समूह]</string>
-    <string name="groupType_info">[समूह प्रकार]</string>
-    <string name="group_string">समूह</string>
-    <string name="broadcast_string">प्रसारण</string>
-    <string name="new_broadcast_name_info">नया प्रसारण</string>
-    <string name="mute_Group">म्यूट </string>
-    <string name="unmute_Group">अनम्यूट</string>
-    <string name="user_name_info">[नाम]</string>
-    <string name="channel_member_title">संपर्क का चयन करें</string>
-    <string name="channel_delete_group_button">समूह हटाएं</string>
-    <string name="broadcast_exit_button">ब्रॉडकास्ट से बाहर निकलें</string>
-    <string name="broadcast_delete_button">प्रसारण हटायें</string>
-    <string name="channel_created_by">द्वारा बनाया गया</string>
-    <string name="remove_member">हटाना</string>
-    <string name="add">जोड़ना</string>
-    <string name="group_creating_info">समूह बनाना कृपया प्रतीक्षा करें</string>
-    <string name="broadcast_creating_info">प्रसारण बनाना कृपया प्रतीक्षा करें</string>
-    <string name="channel_exit">बाहर जाएं</string>
-    <string name="channel_deleting">हटाना</string>
-    <string name="leave_channel">क्या आप वाकई इस [समूह प्रकार] से बाहर निकलना चाहते हैं?</string>
-    <string name="exit_channel_message_info">क्या आप वाकई [समूह] [समूह प्रकार] से बाहर निकलना चाहते हैं?</string>
-    <string name="delete_channel_messages_and_channel_info">क्या आप वाकई [समूह] [समूह प्रकार] को हटाना चाहते हैं?</string>
-    <string name="channel_name_empty">समूह का नाम रिक्त नहीं हो सकता</string>
-    <string name="channel_add_alert">समूह में प्रतिभागी को जोड़ने में असमर्थ क्योंकि आप प्रतिभागी नहीं हैं</string>
-    <string name="channel_edit_alert">समूह का नाम बदलने में असमर्थ क्योंकि आप प्रतिभागी नहीं हैं</string>
-    <string name="admin_text">समूह प्रशासन</string>
-    <string name="user_not_in_this_group_text">आप अब इस समूह के प्रतिभागी नहीं हैं</string>
-    <string name="update_channel_title_name">समूह नाम दर्ज करें</string>
-    <string name="new_channel_name_hint">समूह का नाम..</string>
-    <string name="user_block_info">ब्लॉक [नाम]? अवरुद्ध उपयोगकर्ता अब आपको संदेश भेजने में सक्षम नहीं होगा</string>
-    <string name="user_un_block_info">एक संदेश भेजने के लिए [नाम] को अनवरोधित करें</string>
-    <string name="please_wait_info">एक क्षण प्रतीक्षा करें...</string>
-    <string name="applozic_userId_error_info_in_logs">कृपया आईडी रिक्त नहीं हो सकती और चैनल कुंजी को रिक्त नहीं होना चाहिए</string>
-    <string name="applozic_add_user_to_multiple_channel_error_info_in_logs">यूज़र आईडी रिक्त या रिक्त नहीं हो सकती और चैनल की सूची रिक्त नहीं होनी चाहिए</string>
-    <string name="unable_share_message">साझा करने में असमर्थ आप इस समूह के प्रतिभागी नहीं हैं</string>
-    <string name="user_is_blocked">भेजने में असमर्थ, उपयोगकर्ता ब्लॉक है</string>
-    <string name="when_on_wifi">जब वाईफाई चालू है</string>
-    <string name="when_on_cellular_network">जब सेलुलर नेटवर्क चालू है</string>
-    <string name="media_auto_download">मीडिया ऑटो डाउनलोड</string>
-    <string name="applozic_network_usage">नेटवर्क उपयोग</string>
-    <string name="enable_vibration_notification">सूचना पर कंपन सक्षम करें</string>
-    <string name="group_members_limit_exceeds">सीमा तक पहुंचे, किसी व्यक्ति को पहले समूह से निकालें</string>
-    <string name="user_has_been_deleted_text">भेजने हटा दिया गया है</string>
-    <string name="make_admin_text_info">समूह व्यवस्थापक बनाना</string>
-    <string name="attachment_string">अनुलग्नक </string>
-    <string name="photo_string">फ़ोटो</string>
-    <string name="contact_string">संपर्क </string>
-    <string name="video_string">वीडियो</string>
-    <string name="audio_string">ऑडियो</string>
-    <string name="al_location_string">स्थान</string>
-    <string name="user_logout_info">लॉगआउट सफल</string>
-    <string name="participants">प्रतिभागियों</string>
-    <string name="channel_exit_button">ग्रुप से बाहर निकलें</string>
-    <string name="chats">चैट</string>
-    <string name="refresh">रीफ्रेश</string>
-    <string name="start_New">नया शुरू करें</string>
-    <string name="dial">डायल</string>
-    <string name="logout">लोग आउट</string>
-    <string name="next">बाद</string>
-    <string name="done">समाप्त</string>
-    <string name="gallery">गेलरी</string>
-    <string name="Contact">संपर्क </string>
-    <string name="Group">समूह</string>
-    <string name="today">आज</string>
-    <string name="status">स्थिति</string>
-    <string name="name">नाम</string>
-    <string name="phone">फ़ोन</string>
-    <string name="copy">कॉपी</string>
-    <string name="forward">आगे</string>
-    <string name="resend">पुन: भेजें</string>
-    <string name="delete">मिटाना</string>
-    <string name="info">जानकारी</string>
-    <string name="share">शेयर</string>
-    <string name="reply">जवाब दें</string>
-    <string name="self_destruct">आत्म विनाश</string>
-    <string name="off">ऑफ </string>
-    <string name="one_min">1 मिनट</string>
-    <string name="two_min">2 मिनट</string>
-    <string name="five_min">5 मिनट</string>
-    <string name="ten_min">10 मिनट</string>
-    <string name="sms">एसएमएस</string>
-    <string name="mt">मीट्रिक टन</string>
-    <string name="Delete_conversation">चैट हटाएं</string>
-    <string name="delete_group">समूह हटाएं</string>
-    <string name="exit_group">समूह से बाहर निकलें</string>
-    <string name="message">संदेश </string>
-    <string name="remove">हटाना</string>
-    <string name="make_group_admin">समूह व्यवस्थापक को बनाएं</string>
-    <string name="take_photo">फोटो लो</string>
-    <string name="attach_file">फ़ाइल जोड़ें</string>
-    <string name="audio_message">ऑडियो संदेश</string>
-    <string name="video_message">वीडियो संदेश</string>
-    <string name="share_contact">संपर्क साझा करें</string>
-    <string name="al_location">:स्थान</string>
-    <string name="al_file">:फ़ाइल</string>
-    <string name="al_audio">:ऑडियो</string>
-    <string name="al_video">:वीडियो</string>
-    <string name="al_camera">:कैमरा</string>
-    <string name="al_contact">:संपर्क</string>
-    <string name="current_location">वर्तमान स्थान</string>
-    <string name="Add_caption">शीर्षक दें...</string>
-    <string name="New_Attachment">नई अनुलग्नक</string>
-    <string name="send_location">स्थान भेजें</string>
-    <string name="send_your_current_location">अपना वर्तमान स्थान भेजें</string>
-    <string name="stop">स्टाँप</string>
-    <string name="profile_status">प्रोफ़ाइल स्थिति</string>
-    <string name="no_status">स्टेटस</string>
-    <string name="online">ऑनलाइन</string>
-    <string name="notifications">सूचनाएं</string>
-    <string name="sales_manager">सेल्स प्रबंधक</string>
-    <string name="display_name">प्रदर्शित होने वाला नाम</string>
-    <string name="kb45">45 केबी</string>
-    <string name="message_text">संदेश  टेक्स्ट</string>
-    <string name="read">रीड</string>
-    <string name="delivered">पहुंचा दिया</string>
-    <string name="remove_image">छवि निकालें</string>
-    <string name="file_name_will_come_here_for_attachment">फ़ाइल नाम अटैचमेंट के लिए यहां आएगा</string>
-    <string name="mb_10">10 एमबी</string>
-    <string name="mobile_number">मोबाइल नंबर</string>
-    <string name="schedule">शिड्यूल</string>
-    <string name="delivery_status">वितरण की स्थिति</string>
-    <string name="testTime">टेस्ट समय</string>
-    <string name="created_at_time">समय पर बनाया गया</string>
-    <string name="edit_group_name">समूह का नाम संपादित करें</string>
-    <string name="add_member">सदस्य जोड़ें</string>
-    <string name="push_notifications">सूचनाएं भेजना</string>
-    <string name="group_not_exist">समूह मौजूद नहीं है</string>
-    <string name="Add_Contacts">संपर्क जोड़ें</string>
-    <string name="no_groups">कोई समूह नहीं</string>
-    <string name="search_match_other">अन्य फ़ील्ड से मेल खाता है</string>
-    <string name="invite">अपने दोस्तों को आमंत्रित करें</string>
-    <string name="contacts_not_found">कोई संपर्क नहीं मिला</string>
-    <string name="Location">स्थान</string>
-    <string name="applozic_failed_to_load_contact">संपर्क लोड करने में विफल</string>
-    <string name="applozic_Cropping_failed">क्रॉपिंग असफल</string>
-    <string name="applozic_resending_attachment">एटचमेंट पुनः भेजें....</string>
-    <string name="processing_please_wait">प्रसंस्करण किया जा रहा है .. कृपया प्रतीक्षा करें</string>
-    <string name="success">सफलता</string>
-    <string name="error">एरर</string>
-    <string name="camera_option">कैमरा</string>
-    <string name="attach_price">Attach price</string>
-    <string name="mute_group_for">समय के लिए म्यूट समूह ..</string>
-    <string name="eight_Hours">आठ घंटे</string>
-    <string name="one_week"> एक हफ्ता</string>
-    <string name="one_year"> एक साल</string>
-    <string name="file_does_not_exist">दस्तावेज मौजूद नहीं है</string>
-    <string name="copied_message">कॉपी किए गए संदेश</string>
-    <string name="cancel">रद्द करना</string>
-    <string name="data_usage">डेटा का उपयोग</string>
-    <string name="missed">मिस्ड </string>>
-    <string name="hold_to_record_release_to_send">रिकॉर्ड करने के लिए पकड़ो, भेजने के लिए जारी</string>
-    <string name="slide_to_cancel">रद्द करने के लिए स्लाइड करें</string>
-    <string name="tap_on_mic_button_to_record_audio">ऑडियो रिकॉर्डिंग प्रारंभ करने के लिए माइक बटन पर टैप करें</string>
-    <string name="profile_contact">No Contact number</string>
-    <string name="profile_contact_number">Contact Number</string>
-    <string name="user_name">User Name</string>
-
-
-    <string-array name="secret_message_timer_array">
-        <item>आत्म विनाश</item>
-        <item>ऑफ</item>
-        <item>1 मिनट</item>
-        <item>2 मिनट</item>
-        <item>5 मिनट</item>
-        <item>10 मिनट</item>
-    </string-array>
-
-    <string-array name="send_type_options">
-        <item>एसएमएस</item>
-        <item>MT</item>
-    </string-array>
-
-    <!-- Scheduled Message strings -->
-
-    <string-array name="schedule_menu">
-        <item>कॉपी</item>
-        <item>रद्द</item>
-    </string-array>
-
-    <string-array name="menu">
-        <item>कॉपी</item>
-        <item>आगे भेजना</item>
-        <item>पुन: भेजें</item>
-        <item>मिटाना</item>
-        <item>जानकारी</item>
-        <item>शेयर</item>
-        <item>जवाब दें</item>
-    </string-array>
-
-    <string-array name="conversation_options_menu">
-        <item>चैट हटाएं</item>
-        <item>समूह हटाएं</item>
-        <item>समूह से बाहर निकलें</item>
-    </string-array>
-
-    <!--Group member list menu -->
-    <string-array name="channel_users_menu_option">
-        <item>संदेश</item>
-        <item>हटाना</item>
-    </string-array>
-
-    <!--Multimedia options -->
-    <string-array name="multimediaOptions_sms">
-        <item>वर्तमान स्थान</item>
-    </string-array>
-
-    <string-array name="multimediaOptions_mt">
-        <item>वर्तमान स्थान</item>
-        <item>फोटो लो</item>
-        <item>फ़ाइल जोड़ें</item>
-        <item>ऑडियो संदेश</item>
-        <item>वीडियो संदेश</item>
-        <item>संपर्क साझा करें</item>
-    </string-array>
-
-    <string-array name="multimediaOptions_with_price">
-        <item>वर्तमान स्थान</item>
-        <item>फोटो लो</item>
-        <item>फ़ाइल जोड़ें</item>
-        <item>ऑडियो संदेश</item>
-        <item>वीडियो संदेश</item>
-        <item>संपर्क साझा करें</item>
-        <item>कीमत संलग्न करें</item>
-
-    </string-array>
-
-    <string-array name="multimediaOptions_with_price_text">
-        <item>स्थान</item>
-        <item>कैमरा</item>
-        <item>फ़ाइल</item>
-        <item>ऑडियो</item>
-        <item>वीडियो</item>
-        <item>संपर्क</item>
-        <item>मूल्य</item>
-    </string-array>
-
-    <string-array name="multimediaOptions_without_price_text">
-        <item>स्थान</item>
-        <item>कैमरा</item>
-        <item>फ़ाइल</item>
-        <item>ऑडियो</item>
-        <item>वीडियो</item>
-        <item>संपर्क</item>
-    </string-array>
-
-    <string-array name="multimediaOptions_without_price_key">
-        <item>:स्थान</item>
-        <item>:कैमरा</item>
-        <item>:फ़ाइल</item>
-        <item>:ऑडियो</item>
-        <item>:वीडियो</item>
-        <item>:संपर्क</item>
-    </string-array>
-
-    <string-array name="multimediaOptionIcons_without_price">
-        <item>&#xf041;</item>
-        <item>&#xf030;</item>
-        <item>&#xf0c6;</item>
-        <item>&#xf130;</item>
-        <item>&#xf03d;</item>
-        <item>&#xf007;</item>
-    </string-array>
-
-    <array name="alphabet_color">
-        <item>#f16364</item>
-        <item>#f58559</item>
-        <item>#f9a43e</item>
-        <item>#e4c62e</item>
-        <item>#67bf74</item>
-        <item>#59a2be</item>
-        <item>#2093cd</item>
-        <item>#ad62a7</item>
-    </array>
-
-</resources>
\ No newline at end of file
diff --git a/mobicomkitui/src/main/res/values-hi/strings.xml b/mobicomkitui/src/main/res/values-hi/strings.xml
index 03862a12..5456eb2a 100644
--- a/mobicomkitui/src/main/res/values-hi/strings.xml
+++ b/mobicomkitui/src/main/res/values-hi/strings.xml
@@ -1,4 +1,412 @@
 <?xml version="1.0" encoding="utf-8"?>
-<resources>
+<resources  xmlns:tools="http://schemas.android.com/tools"
+    tools:ignore="MissingTranslation">
+    <string name="internet_connection_not_available">कोई इंटरनेट कनेक्शन नहीं</string>
+    <string name="you_need_network_access_for_delete">वार्तालाप हटाने के लिए आपको नेटवर्क एक्सेस की आवश्यकता है </string>
+    <string name="applozic_server_error">ऊप्स! आपको एक त्रुटि मिली, बाद में फिर से प्रयास करें</string>
+    <string name="you_need_network_access_for_block_or_unblock">ब्लॉक / अनब्लॉक उपयोगकर्ता के लिए आपको नेटवर्क एक्सेस की आवश्यकता है</string>
+    <string name="internet_connection_for_group_name_info">समूह नाम बदलने के लिए आपके फ़ोन को इंटरनेट कनेक्शन की आवश्यकता है</string>
+    <string name="you_dont_have_any_network_access_info">आपके पास अभी तक कोई नेटवर्क पहुंच नहीं है</string>
+    <string name="failed_to_leave_group">समूह को छोड़ने में विफल रहा</string>
+    <string name="user_is_already_exists">उपयोगकर्ता पहले से ही समूह में मौजूद है</string>
+    <string name="delete_conversation_failed">हटाएं विफल</string>
+    <string name="menu_search">खोज</string>
+    <string name="menu_add_contact">एक नया संपर्क बनाएं</string>
+    <string name="no_contacts">कोई संपर्क नहीं मिला</string>
+    <string name="search_hint">खोज...</string>
+    <string name="phone_number_not_present">फोन नंबर मौजूद नहीं है</string>
+    <string name="zero_friends_on_phone">फोन संपर्कों पर कोई मिलान संपर्क नहीं मिला लेकिन आप अभी भी ईमेल, यूजर आईडी या फोन नंबर दर्ज करके संदेश भेज सकते हैं</string>
+    <string name="delete_thread_text">हटाया जा रहा है ....</string>
+    <string name="search_title">खोज</string>
+    <string name ="applozic_user_already_in_a_group">समूह प्रकार में पहले से ही जोड़ा गया है</string>
+    <string name ="applozic_contacts_loading_info">लोड हो रहा है, कृपया प्रतीक्षा करें...</string>
+    <string name ="applozic_contacts_loading_error">संपर्कों को लोड करने के लिए आपको नेटवर्क एक्सेस की आवश्यकता है</string>
+    <string name="alphabet">ABCDEFGHIJKLMNOPQRSTUVWXYZ</string>
+    <string name="contact_permission">संपर्क की अनुमति के उपयोग के लिए आवश्यक हैं</string>
+    <string name="storage_permission">उपयोग करने के लिए संग्रहण अनुमति आवश्यक है</string>
+    <string name="location_permission">उपयोग करने के लिए स्थान अनुमति आवश्यक है</string>
+    <string name="phone_call_permission">प्रवेश करने के लिए फोन कॉल की अनुमति आवश्यक है</string>
+    <string name="phone_camera_permission">एक्सेस करने के लिए कैमरा अनुमति आवश्यक है</string>
+    <string name="record_audio">ऑडियो रिकॉर्डिंग अनुमति की आवश्यकता है</string>
+    <string name="contact_permission_not_granted">संपर्क के लिए अनुमति नहीं दी गई थी</string>
+    <string name="storage_permission_not_granted">संग्रहण के लिए अनुमतियाँ नहीं दी गईं</string>
+    <string name="location_permission_not_granted">स्थान के लिए अनुमतियाँ नहीं दी गईं</string>
+    <string name="phone_state_permission_not_granted">फ़ोन स्टेट के लिए अनुमतियां प्रदान नहीं की गईं</string>
+    <string name="phone_call_permission_not_granted">फोन कॉल के लिए अनुमति नहीं दी गई थी</string>
+    <string name="phone_camera_permission_not_granted">कैमरे के लिए अनुमति नहीं दी गई थी</string>
+    <string name="record_audio_permission_not_granted">ऑडियो रिकॉर्डिंग के लिए अनुमतियां प्रदान नहीं की गईं</string>
+    <string name="contact_permission_granted">संपर्क अनुमति दी गई है</string>
+    <string name="storage_permission_granted">संग्रहण अनुमतियां दी गई हैं</string>
+    <string name="location_permission_granted">स्थान अनुमतियां दी गई हैं</string>
+    <string name="phone_state_permission_granted">फोन स्थिति अनुमति दी गई है</string>
+    <string name="phone_call_permission_granted">फोन कॉल की अनुमति दी गई है</string>
+    <string name="phone_camera_permission_granted">कैमरा अनुमति दी गई है</string>
+    <string name="record_audio_permission_granted">ऑडियो रिकार्ड अनुमति दी गई है</string>
+    <string name="mobicom_max_attachment_warning">अधिकतम लगाव सीमा तक पहुंची</string>
+    <string name="mobicom_select_attachment_text">कम से कम एक अटैचमेंट चुनें</string>
+    <string name="audio_recording_send_text">ऑडियो रिकॉर्ड करने के लिए प्रारंभ पर टैप करें</string>
+    <string name="applozic_audio_permission_missing">ऑडियो रिकॉर्डर लॉन्च करने में असमर्थ</string>
+    <string name="applozic_message_info">संदेश जानकारी</string>
+    <string name="applozic_message_info_no_network">संदेश जानकारी लाने में सक्षम नहीं</string>
+    <string name="applozic_user_profile_heading">प्रोफाइल</string>
+    <string name="send_message_to">भेजना..</string>
+    <string name="info_attachment_max_allowed_file_size_exceeded">अधिकतम अपलोड फ़ाइल आकार सीमा नहीं पार कर सकते हैं</string>
+    <string name="please_wait_creating_group_of_two">कृपया प्रतीक्षा करें...</string>
+    <string name="sort_contacts_by_lastSeenAt">पिछले द्वारा देखा द्वारा क्रमबद्ध</string>
+    <string name="sort_contacts_by_recent_chats">हाल ही की चैट के आधार पर क्रमबद्ध करें</string>
+    <string name="app_name">Applozic</string>
+    <string name="conversations">बातचीत</string>
+    <string name="channel_create_title">नया समूह</string>
+    <string name="channel_members_title">सदस्य जोड़ें</string>
+    <string name="select_at_least">कम से कम एक संपर्क का चयन होना चाहिए</string>
+    <string name="group_name_hint">समूह का नाम</string>
+    <string name="empty_conversations">कोई वार्तालाप नहीं!!!</string>
+    <string name="enter_message_hint">एक सन्देश लिखिए...</string>
+    <string name="send_text">भेजें</string>
+    <string name="cancel_text">रद्द करना</string>
+    <string name="start_text">प्रारंभ</string>
+    <string name="no_conversation">आपके पास कोई बातचीत नहीं है</string>
+    <string name="search_not_found_for_messages">कोई बातचीत नहीं मिली</string>
+    <string name="info_broadcast_message">कोई भी संदेश नहीं मिलेगा प्रत्येक प्राप्तकर्ता को अलग-अलग पाया जाएगा</string>
+    <string name="shareOptions">शेयर</string>
+    <string name="email">ईमेल आईडी मान</string>
+    <string name="info_sample_contact_list">नमूना के रूप में डिवाइस संपर्क दिखाते हुए यहां अपने ऐप संपर्कों को पॉप्युलेट करें</string>
+    <string name="info_message_sync">सर्वर के साथ संदेश सिंक करना, इसमें कुछ मिनट लग सकते हैं!</string>
+    <string name="instruction_open_conversation_thread">पूरी तरह से देखने के लिए किसी भी बातचीत पर टैप करें</string>
+    <string name="instruction_go_back_to_recent_conversation_list">पिछली स्क्रीन पर वापस जाने के लिए, बाएं से दाएं स्लाइड करें</string>
+    <string name="action_settings">सेटिंग्स</string>
+    <string name="user_block">ब्लॉक</string>
+    <string name="user_un_block">अनब्लॉक</string>
+    <string name="applozic_my_profile_option_info">प्रोफाइल</string>
+    <string name="location_services_disabled_message">स्थान भेजने के लिए आपके स्थान तक पहुंच की आवश्यकता है। स्थान पहुंच चालू करें</string>
+    <string name="location_services_disabled_title">स्थान सेवाएं अक्षम</string>
+    <string name="location_service_settings">सेटिंग्स</string>
+    <string name="location_sending_cancelled">स्थान भेजना रद्द</string>
+    <string name="unable_to_fetch_location">स्थान प्राप्त करने में असमर्थ</string>
+    <string name="waiting_for_current_location">वर्तमान स्थान की प्रतीक्षा कर रहा है</string>
+    <string name="select_file">किसी फाइल का चयन करें</string>
+    <string name="attachment_retry">पुन: प्रयास करें</string>
+    <string name="delete_conversation">मिटाना</string>
+    <string name="info_app_not_found_to_open_file">इस फ़ाइल को खोलने के लिए कोई एप्लिकेशन नहीं मिला</string>
+    <string name="unable_to_play_requested_audio_file">इस फ़ाइल को खोलने के लिए कोई एप्लिकेशन नहीं मिला</string>
+    <string name="file_not_selected">क्या आप फ़ाइल का चयन करना भूल गए?</string>
+    <string name="info_attachment_max_allowed_file_size">अधिकतम अपलोड फ़ाइल आकार की सीमा 10 Mb से अधिक नहीं हो सकती</string>
+    <string name="info_file_attachment_error">नहीं भेज सकते हैं! फ़ाइल पढ़ने के दौरान कुछ अनपेक्षित त्रुटि हुई</string>
+    <string name="select_file_count_limit">एक से अधिक फाइल का चयन नहीं कर सकता</string>
+    <string name="ScheduleText">अनुसूची</string>
+    <string name="enter_mt_message_hint">एक सन्देश लिखिए..</string>
+    <string name="messageOptions">संदेश विकल्प</string>
+    <string name="conversation">बातचीत</string>
+    <string name="conversation_options">विकल्प</string>
+    <string name="info_message_scheduled">संदेश सफलतापूर्वक शेड्यूल किया गया है</string>
+    <string name="sync_older_messages">क्या आप पुराने संदेशों को समन्वयित करना चाहते हैं?</string>
+    <string name="dialog_delete_conversation_title">बातचीत मिटा दो</string>
+    <string name="dialog_delete_conversation_confir">नाम के सभी संदेश हटाएं?</string>
+    <string name="negetiveButtonText">साफ़</string>
+    <string name="scheduleDialogHeader">अनुसूची संदेश</string>
+    <string name="scheduledDateText">निर्धारित तिथि :</string>
+    <string name="scheduledTimeText">निर्धारित समय</string>
+    <string name="defaultDate">dd-mm-yyyy</string>
+    <string name="defaultTime">HH:MM:SS</string>
+    <string name="selectionRequestText">अपना संदेश शेड्यूल करने के लिए दिनांक और समय चुनें।</string>
+    <string name="wearable_action_title">जवाब दें</string>
+    <string name="wearable_action_label"> को जवाब दें</string>
+
+    <string name ="you_string">आप</string>
+    <string name="applozic_account_closed">अपने ऐप में चैट को सक्रिय करने के लिए कृपया एप्लीकोज से संपर्क करें</string>
+    <string name="applozic_free_version_not_allowed_on_release_build">अपने ऐप में चैट को सक्रिय करने के लिए कृपया एप्लीकोज से संपर्क करें</string>
+    <string name ="ok_alert">ठीक</string>
+    <string name ="subtitle_last_seen_at_time">अंतिम बार देखा गया</string>
+    <string name="is_typing">टाइप कर रहा है...</string>
+    <string name="user_online">ऑनलाइन</string>
+    <string name="removing_channel_user">निकाला जा रहा है</string>
+    <string name="adding_channel_user">जोड़ा जा रहा है ....</string>
+    <string name="deleting_channel_user">हटा रहा है ...</string>
+    <string name="channel_member_exit">बाहर निकल रहा है ....</string>
+    <string name="channel_update">समूह जानकारी अपडेट कर रहा है ....</string>
+    <string name="dialog_remove_group_user">[समूह] से [नाम] निकालें?</string>
+    <string name="dialog_add_group_user">[नाम] को [समूह] में जोड़ें?</string>
+    <string name="group_name_info">[समूह]</string>
+    <string name="groupType_info">[समूह प्रकार]</string>
+    <string name="group_string">समूह</string>
+    <string name="broadcast_string">प्रसारण</string>
+    <string name="new_broadcast_name_info">नया प्रसारण</string>
+    <string name="mute_Group">म्यूट </string>
+    <string name="unmute_Group">अनम्यूट</string>
+    <string name="user_name_info">[नाम]</string>
+    <string name="channel_member_title">संपर्क का चयन करें</string>
+    <string name="channel_delete_group_button">समूह हटाएं</string>
+    <string name="broadcast_exit_button">ब्रॉडकास्ट से बाहर निकलें</string>
+    <string name="broadcast_delete_button">प्रसारण हटायें</string>
+    <string name="channel_created_by">द्वारा बनाया गया</string>
+    <string name="remove_member">हटाना</string>
+    <string name="add">जोड़ना</string>
+    <string name="group_creating_info">समूह बनाना कृपया प्रतीक्षा करें</string>
+    <string name="broadcast_creating_info">प्रसारण बनाना कृपया प्रतीक्षा करें</string>
+    <string name="channel_exit">बाहर जाएं</string>
+    <string name="channel_deleting">हटाना</string>
+    <string name="leave_channel">क्या आप वाकई इस [समूह प्रकार] से बाहर निकलना चाहते हैं?</string>
+    <string name="exit_channel_message_info">क्या आप वाकई [समूह] [समूह प्रकार] से बाहर निकलना चाहते हैं?</string>
+    <string name="delete_channel_messages_and_channel_info">क्या आप वाकई [समूह] [समूह प्रकार] को हटाना चाहते हैं?</string>
+    <string name="channel_name_empty">समूह का नाम रिक्त नहीं हो सकता</string>
+    <string name="channel_add_alert">समूह में प्रतिभागी को जोड़ने में असमर्थ क्योंकि आप प्रतिभागी नहीं हैं</string>
+    <string name="channel_edit_alert">समूह का नाम बदलने में असमर्थ क्योंकि आप प्रतिभागी नहीं हैं</string>
+    <string name="admin_text">समूह प्रशासन</string>
+    <string name="user_not_in_this_group_text">आप अब इस समूह के प्रतिभागी नहीं हैं</string>
+    <string name="update_channel_title_name">समूह नाम दर्ज करें</string>
+    <string name="new_channel_name_hint">समूह का नाम..</string>
+    <string name="user_block_info">ब्लॉक [नाम]? अवरुद्ध उपयोगकर्ता अब आपको संदेश भेजने में सक्षम नहीं होगा</string>
+    <string name="user_un_block_info">एक संदेश भेजने के लिए [नाम] को अनवरोधित करें</string>
+    <string name="please_wait_info">एक क्षण प्रतीक्षा करें...</string>
+    <string name="applozic_userId_error_info_in_logs">कृपया आईडी रिक्त नहीं हो सकती और चैनल कुंजी को रिक्त नहीं होना चाहिए</string>
+    <string name="applozic_add_user_to_multiple_channel_error_info_in_logs">यूज़र आईडी रिक्त या रिक्त नहीं हो सकती और चैनल की सूची रिक्त नहीं होनी चाहिए</string>
+    <string name="unable_share_message">साझा करने में असमर्थ आप इस समूह के प्रतिभागी नहीं हैं</string>
+    <string name="user_is_blocked">भेजने में असमर्थ, उपयोगकर्ता ब्लॉक है</string>
+    <string name="when_on_wifi">जब वाईफाई चालू है</string>
+    <string name="when_on_cellular_network">जब सेलुलर नेटवर्क चालू है</string>
+    <string name="media_auto_download">मीडिया ऑटो डाउनलोड</string>
+    <string name="applozic_network_usage">नेटवर्क उपयोग</string>
+    <string name="enable_vibration_notification">सूचना पर कंपन सक्षम करें</string>
+    <string name="group_members_limit_exceeds">सीमा तक पहुंचे, किसी व्यक्ति को पहले समूह से निकालें</string>
+    <string name="user_has_been_deleted_text">भेजने हटा दिया गया है</string>
+    <string name="make_admin_text_info">समूह व्यवस्थापक बनाना</string>
+    <string name="attachment_string">अनुलग्नक </string>
+    <string name="photo_string">फ़ोटो</string>
+    <string name="contact_string">संपर्क </string>
+    <string name="video_string">वीडियो</string>
+    <string name="audio_string">ऑडियो</string>
+    <string name="al_location_string">स्थान</string>
+    <string name="user_logout_info">लॉगआउट सफल</string>
+    <string name="participants">प्रतिभागियों</string>
+    <string name="channel_exit_button">ग्रुप से बाहर निकलें</string>
+    <string name="chats">चैट</string>
+    <string name="refresh">रीफ्रेश</string>
+    <string name="start_New">नया शुरू करें</string>
+    <string name="dial">डायल</string>
+    <string name="logout">लोग आउट</string>
+    <string name="next">बाद</string>
+    <string name="done">समाप्त</string>
+    <string name="gallery">गेलरी</string>
+    <string name="Contact">संपर्क </string>
+    <string name="Group">समूह</string>
+    <string name="today">आज</string>
+    <string name="status">स्थिति</string>
+    <string name="name">नाम</string>
+    <string name="phone">फ़ोन</string>
+    <string name="copy">कॉपी</string>
+    <string name="forward">आगे</string>
+    <string name="resend">पुन: भेजें</string>
+    <string name="delete">मिटाना</string>
+    <string name="info">जानकारी</string>
+    <string name="share">शेयर</string>
+    <string name="reply">जवाब दें</string>
+    <string name="self_destruct">आत्म विनाश</string>
+    <string name="off">ऑफ </string>
+    <string name="one_min">1 मिनट</string>
+    <string name="two_min">2 मिनट</string>
+    <string name="five_min">5 मिनट</string>
+    <string name="ten_min">10 मिनट</string>
+    <string name="sms">एसएमएस</string>
+    <string name="mt">मीट्रिक टन</string>
+    <string name="Delete_conversation">चैट हटाएं</string>
+    <string name="delete_group">समूह हटाएं</string>
+    <string name="exit_group">समूह से बाहर निकलें</string>
+    <string name="message">संदेश </string>
+    <string name="remove">हटाना</string>
+    <string name="make_group_admin">समूह व्यवस्थापक को बनाएं</string>
+    <string name="take_photo">फोटो लो</string>
+    <string name="attach_file">फ़ाइल जोड़ें</string>
+    <string name="audio_message">ऑडियो संदेश</string>
+    <string name="video_message">वीडियो संदेश</string>
+    <string name="share_contact">संपर्क साझा करें</string>
+    <string name="al_location">:स्थान</string>
+    <string name="al_file">:फ़ाइल</string>
+    <string name="al_audio">:ऑडियो</string>
+    <string name="al_video">:वीडियो</string>
+    <string name="al_camera">:कैमरा</string>
+    <string name="al_contact">:संपर्क</string>
+    <string name="current_location">वर्तमान स्थान</string>
+    <string name="Add_caption">शीर्षक दें...</string>
+    <string name="New_Attachment">नई अनुलग्नक</string>
+    <string name="send_location">स्थान भेजें</string>
+    <string name="send_your_current_location">अपना वर्तमान स्थान भेजें</string>
+    <string name="stop">स्टाँप</string>
+    <string name="profile_status">प्रोफ़ाइल स्थिति</string>
+    <string name="no_status">स्टेटस</string>
+    <string name="online">ऑनलाइन</string>
+    <string name="notifications">सूचनाएं</string>
+    <string name="sales_manager">सेल्स प्रबंधक</string>
+    <string name="display_name">प्रदर्शित होने वाला नाम</string>
+    <string name="kb45">45 केबी</string>
+    <string name="message_text">संदेश  टेक्स्ट</string>
+    <string name="read">रीड</string>
+    <string name="delivered">पहुंचा दिया</string>
+    <string name="remove_image">छवि निकालें</string>
+    <string name="file_name_will_come_here_for_attachment">फ़ाइल नाम अटैचमेंट के लिए यहां आएगा</string>
+    <string name="mb_10">10 एमबी</string>
+    <string name="mobile_number">मोबाइल नंबर</string>
+    <string name="schedule">शिड्यूल</string>
+    <string name="delivery_status">वितरण की स्थिति</string>
+    <string name="testTime">टेस्ट समय</string>
+    <string name="created_at_time">समय पर बनाया गया</string>
+    <string name="edit_group_name">समूह का नाम संपादित करें</string>
+    <string name="add_member">सदस्य जोड़ें</string>
+    <string name="push_notifications">सूचनाएं भेजना</string>
+    <string name="group_not_exist">समूह मौजूद नहीं है</string>
+    <string name="Add_Contacts">संपर्क जोड़ें</string>
+    <string name="no_groups">कोई समूह नहीं</string>
+    <string name="search_match_other">अन्य फ़ील्ड से मेल खाता है</string>
+    <string name="invite">अपने दोस्तों को आमंत्रित करें</string>
+    <string name="contacts_not_found">कोई संपर्क नहीं मिला</string>
+    <string name="Location">स्थान</string>
+    <string name="applozic_failed_to_load_contact">संपर्क लोड करने में विफल</string>
+    <string name="applozic_Cropping_failed">क्रॉपिंग असफल</string>
+    <string name="applozic_resending_attachment">एटचमेंट पुनः भेजें....</string>
+    <string name="processing_please_wait">प्रसंस्करण किया जा रहा है .. कृपया प्रतीक्षा करें</string>
+    <string name="success">सफलता</string>
+    <string name="error">एरर</string>
+    <string name="camera_option">कैमरा</string>
+    <string name="attach_price">Attach price</string>
+    <string name="mute_group_for">समय के लिए म्यूट समूह ..</string>
+    <string name="eight_Hours">आठ घंटे</string>
+    <string name="one_week"> एक हफ्ता</string>
+    <string name="one_year"> एक साल</string>
+    <string name="file_does_not_exist">दस्तावेज मौजूद नहीं है</string>
+    <string name="copied_message">कॉपी किए गए संदेश</string>
+    <string name="cancel">रद्द करना</string>
+    <string name="data_usage">डेटा का उपयोग</string>
+    <string name="missed">मिस्ड </string>>
+    <string name="hold_to_record_release_to_send">रिकॉर्ड करने के लिए पकड़ो, भेजने के लिए जारी</string>
+    <string name="slide_to_cancel">रद्द करने के लिए स्लाइड करें</string>
+    <string name="tap_on_mic_button_to_record_audio">ऑडियो रिकॉर्डिंग प्रारंभ करने के लिए माइक बटन पर टैप करें</string>
+    <string name="profile_contact">No Contact number</string>
+    <string name="profile_contact_number">Contact Number</string>
+    <string name="user_name">User Name</string>
+
+
+    <string-array name="secret_message_timer_array">
+        <item>आत्म विनाश</item>
+        <item>ऑफ</item>
+        <item>1 मिनट</item>
+        <item>2 मिनट</item>
+        <item>5 मिनट</item>
+        <item>10 मिनट</item>
+    </string-array>
+
+    <string-array name="send_type_options">
+        <item>एसएमएस</item>
+        <item>MT</item>
+    </string-array>
+
+    <!-- Scheduled Message strings -->
+
+    <string-array name="schedule_menu">
+        <item>कॉपी</item>
+        <item>रद्द</item>
+    </string-array>
+
+    <string-array name="menu">
+        <item>कॉपी</item>
+        <item>आगे भेजना</item>
+        <item>पुन: भेजें</item>
+        <item>मिटाना</item>
+        <item>जानकारी</item>
+        <item>शेयर</item>
+        <item>जवाब दें</item>
+    </string-array>
+
+    <string-array name="conversation_options_menu">
+        <item>चैट हटाएं</item>
+        <item>समूह हटाएं</item>
+        <item>समूह से बाहर निकलें</item>
+    </string-array>
+
+    <!--Group member list menu -->
+    <string-array name="channel_users_menu_option">
+        <item>संदेश</item>
+        <item>हटाना</item>
+    </string-array>
+
+    <!--Multimedia options -->
+    <string-array name="multimediaOptions_sms">
+        <item>वर्तमान स्थान</item>
+    </string-array>
+
+    <string-array name="multimediaOptions_mt">
+        <item>वर्तमान स्थान</item>
+        <item>फोटो लो</item>
+        <item>फ़ाइल जोड़ें</item>
+        <item>ऑडियो संदेश</item>
+        <item>वीडियो संदेश</item>
+        <item>संपर्क साझा करें</item>
+    </string-array>
+
+    <string-array name="multimediaOptions_with_price">
+        <item>वर्तमान स्थान</item>
+        <item>फोटो लो</item>
+        <item>फ़ाइल जोड़ें</item>
+        <item>ऑडियो संदेश</item>
+        <item>वीडियो संदेश</item>
+        <item>संपर्क साझा करें</item>
+        <item>कीमत संलग्न करें</item>
+
+    </string-array>
+
+    <string-array name="multimediaOptions_with_price_text">
+        <item>स्थान</item>
+        <item>कैमरा</item>
+        <item>फ़ाइल</item>
+        <item>ऑडियो</item>
+        <item>वीडियो</item>
+        <item>संपर्क</item>
+        <item>मूल्य</item>
+    </string-array>
+
+    <string-array name="multimediaOptions_without_price_text">
+        <item>स्थान</item>
+        <item>कैमरा</item>
+        <item>फ़ाइल</item>
+        <item>ऑडियो</item>
+        <item>वीडियो</item>
+        <item>संपर्क</item>
+    </string-array>
+
+    <string-array name="multimediaOptions_without_price_key">
+        <item>:स्थान</item>
+        <item>:कैमरा</item>
+        <item>:फ़ाइल</item>
+        <item>:ऑडियो</item>
+        <item>:वीडियो</item>
+        <item>:संपर्क</item>
+    </string-array>
+
+    <string-array name="multimediaOptionIcons_without_price">
+        <item>&#xf041;</item>
+        <item>&#xf030;</item>
+        <item>&#xf0c6;</item>
+        <item>&#xf130;</item>
+        <item>&#xf03d;</item>
+        <item>&#xf007;</item>
+    </string-array>
+
+    <array name="alphabet_color">
+        <item>#f16364</item>
+        <item>#f58559</item>
+        <item>#f9a43e</item>
+        <item>#e4c62e</item>
+        <item>#67bf74</item>
+        <item>#59a2be</item>
+        <item>#2093cd</item>
+        <item>#ad62a7</item>
+    </array>
+
     <string name="new_group">New group</string>
+    <string name="new_chat">New Chat</string>
+    <string name="it_s_always_so_much_fun">It\'s always so much fun</string>
+    <string name="with_a_friend_around">with a friend around</string>
+    <string name="start_chatting_with_a_friend">Start Chatting with a friend</string>
+    <string name="invite_a_friend">Invite a friend</string>
+    <string name="looks_like_none_of_your_friends_are_here_invite_your_friends_to_enjoy_chatting">Looks like none of your friends are here. Invite your friends to enjoy chatting</string>
+    <string name="str_invite">Invite</string>
+    <string name="no_groups_found">No Groups Found</string>
 </resources>
\ No newline at end of file
diff --git a/mobicommons/mobicommons.iml b/mobicommons/mobicommons.iml
index ac08476a..e6217844 100755
--- a/mobicommons/mobicommons.iml
+++ b/mobicommons/mobicommons.iml
@@ -77,16 +77,22 @@
       <sourceFolder url="file://$MODULE_DIR$/src/test/java" isTestSource="true" />
       <sourceFolder url="file://$MODULE_DIR$/src/test/rs" isTestSource="true" />
       <sourceFolder url="file://$MODULE_DIR$/src/test/shaders" isTestSource="true" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/annotations" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/blame" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/bundles" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/classes" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/incremental" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/incremental-safeguard" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/jniLibs" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/lint" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/manifests" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/res" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/rs" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/shaders" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/symbols" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/transforms" />
       <excludeFolder url="file://$MODULE_DIR$/build/outputs" />
+      <excludeFolder url="file://$MODULE_DIR$/build/tmp" />
     </content>
     <orderEntry type="jdk" jdkName="Android API 27 Platform" jdkType="Android SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
diff --git a/mobicommons/src/main/java/com/applozic/mobicommons/people/ALContactProcessor.java b/mobicommons/src/main/java/com/applozic/mobicommons/people/ALContactProcessor.java
new file mode 100644
index 00000000..122f83f6
--- /dev/null
+++ b/mobicommons/src/main/java/com/applozic/mobicommons/people/ALContactProcessor.java
@@ -0,0 +1,9 @@
+package com.applozic.mobicommons.people;
+
+/**
+ * Created by ashish on 22/03/18.
+ */
+
+public interface ALContactProcessor {
+    String processContact(String contactNumber, String countryCode);
+}
diff --git a/mobicommons/src/main/java/com/applozic/mobicommons/people/channel/Channel.java b/mobicommons/src/main/java/com/applozic/mobicommons/people/channel/Channel.java
index c4d873bb..848d3bbc 100755
--- a/mobicommons/src/main/java/com/applozic/mobicommons/people/channel/Channel.java
+++ b/mobicommons/src/main/java/com/applozic/mobicommons/people/channel/Channel.java
@@ -215,6 +215,7 @@ public String toString() {
         OPEN(6),
         GROUPOFTWO(7),
         CONTACT_GROUP(9),
+        SUPPORT_GROUP(10),
         BROADCAST_ONE_BY_ONE(106);
 
         private Integer value;
diff --git a/mobicommons/src/main/java/com/applozic/mobicommons/people/contact/Contact.java b/mobicommons/src/main/java/com/applozic/mobicommons/people/contact/Contact.java
index 70dc7196..997211a5 100755
--- a/mobicommons/src/main/java/com/applozic/mobicommons/people/contact/Contact.java
+++ b/mobicommons/src/main/java/com/applozic/mobicommons/people/contact/Contact.java
@@ -5,10 +5,10 @@
 import android.text.TextUtils;
 
 import com.applozic.mobicommons.json.JsonMarker;
+import com.applozic.mobicommons.people.ALContactProcessor;
 import com.google.gson.annotations.Expose;
 import com.google.gson.annotations.SerializedName;
 
-import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.Calendar;
 import java.util.Date;
@@ -58,12 +58,15 @@
     private boolean blockedBy;
     private String status;
     private short contactType;
+    private Short deviceContactType;
     private Short userTypeId;
     private Long deletedAtTime;
     private Long notificationAfterTime;
     private Long lastMessageAtTime;
     private Map<String, String> metadata;
     private Short roleType;
+    private String phoneDisplayName;
+    private boolean applozicType = true;
 
     public Contact() {
 
@@ -95,6 +98,15 @@ public Contact(Context context, String userId) {
         this.processContactNumbers(context);
     }
 
+    public Short getDeviceContactType() {
+        return deviceContactType;
+    }
+
+    public void setDeviceContactType(Short contactType) {
+        this.deviceContactType = contactType;
+        setApplozicType(ContactType.APPLOZIC.getValue().equals(this.deviceContactType) || ContactType.DEVICE_AND_APPLOZIC.getValue().equals(this.deviceContactType));
+    }
+
     public short getContactType() {
         return contactType;
     }
@@ -108,9 +120,39 @@ public void processContactNumbers(Context context) {
         String countryCode = telephonyManager.getSimCountryIso().toUpperCase();
         if (TextUtils.isEmpty(getFormattedContactNumber())) {
             //setFormattedContactNumber(ContactNumberUtils.getPhoneNumber(getContactNumber(), countryCode));
+
+            if (((ALContactProcessor) context.getApplicationContext()) != null) {
+                setFormattedContactNumber(((ALContactProcessor) context.getApplicationContext()).processContact(getContactNumber(), countryCode));
+            }
         }
     }
 
+    public boolean isApplozicType() {
+        return applozicType;
+    }
+
+    public void setApplozicType(boolean applozicType) {
+        this.applozicType = applozicType;
+    }
+
+
+    public String getPhoneDisplayName() {
+        return phoneDisplayName;
+    }
+
+
+    public void setPhoneDisplayName(String phoneDisplayName) {
+        this.phoneDisplayName = phoneDisplayName;
+    }
+
+    public boolean isDeviceContact() {
+        return (deviceContactType != null && ContactType.DEVICE.getValue().equals(deviceContactType));
+    }
+
+    public String getContactNumber() {
+        return contactNumber;
+    }
+
 /*  Todo: Will be used for device contacts
     public void processContactNumbers(Context context) {
         TelephonyManager telephonyManager = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);
@@ -161,10 +203,6 @@ public void processContactNumbers(Context context) {
         setFormattedContactNumber(ContactNumberUtils.getPhoneNumber(getContactNumber(), countryCode));
     }*/
 
-    public String getContactNumber() {
-        return contactNumber;
-    }
-
     public void setContactNumber(String contactNumber) {
         this.contactNumber = contactNumber;
     }
@@ -226,10 +264,18 @@ public void setContactId(long contactId) {
     }
 
     public String getDisplayName() {
+
+        if (deviceContactType != null && (ContactType.DEVICE.getValue().equals(deviceContactType) || ContactType.DEVICE_AND_APPLOZIC.getValue().equals(deviceContactType))) {
+            return TextUtils.isEmpty(phoneDisplayName) ? TextUtils.isEmpty(getFormattedContactNumber()) ? getContactIds() : getFormattedContactNumber() : phoneDisplayName;
+        }
+
         return TextUtils.isEmpty(fullName) ? getContactIds() : fullName;
     }
 
     public String getFullName() {
+        if (deviceContactType != null && (ContactType.DEVICE.getValue().equals(deviceContactType) || ContactType.DEVICE_AND_APPLOZIC.getValue().equals(deviceContactType))) {
+            return TextUtils.isEmpty(phoneDisplayName) ? fullName : phoneDisplayName;
+        }
         return fullName == null ? "" : fullName;
     }
 
@@ -350,7 +396,6 @@ public void setUserTypeId(Short userTypeId) {
         this.userTypeId = userTypeId;
     }
 
-
     public String getUserId() {
         return userId;
     }
@@ -440,14 +485,14 @@ public void setMetadata(Map<String, String> metadata) {
         this.metadata = metadata;
     }
 
-    public void setRoleType(Short roleType) {
-        this.roleType = roleType;
-    }
-
     public Short getRoleType() {
         return roleType;
     }
 
+    public void setRoleType(Short roleType) {
+        this.roleType = roleType;
+    }
+
     @Override
     public String toString() {
         return "Contact{" +
@@ -474,11 +519,33 @@ public String toString() {
                 ", blockedBy=" + blockedBy +
                 ", status='" + status + '\'' +
                 ", contactType=" + contactType + '\'' +
+                ", deviceContactType=" + deviceContactType +
                 ", userTypeId=" + userTypeId + '\'' +
-                ", deletedAtTime=" + deletedAtTime + '\''+
+                ", deletedAtTime=" + deletedAtTime + '\'' +
+                ", notificationAfterTime=" + notificationAfterTime +
+                ", lastMessageAtTime=" + lastMessageAtTime +
+                ", metadata=" + metadata +
                 ", roleType=" + roleType +
-                ", lastMessagedAt=" + lastMessageAtTime +
-                ", metadata='" + metadata + '\''+
+                ", phoneDisplayName='" + phoneDisplayName + '\'' +
+                ", applozicType=" + applozicType +
+             /*   ", lastMessagedAt=" + lastMessageAtTime +
+                ", metadata='" + metadata + '\'' +*/
                 '}';
     }
+
+    public enum ContactType {
+        APPLOZIC(Short.valueOf("0")), DEVICE(Short.valueOf("1")), DEVICE_AND_APPLOZIC(Short.valueOf("2"));
+
+        private Short value;
+
+        ContactType(Short value) {
+            this.value = value;
+        }
+
+        public Short getValue() {
+            return value;
+        }
+    }
+
+
 }
