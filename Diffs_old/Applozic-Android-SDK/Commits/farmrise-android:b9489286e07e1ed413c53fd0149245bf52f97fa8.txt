diff --git a/app/src/main/java/com/applozic/mobicomkit/sample/HomeActivity.java b/app/src/main/java/com/applozic/mobicomkit/sample/HomeActivity.java
index 1c71738a..fe9abcc7 100644
--- a/app/src/main/java/com/applozic/mobicomkit/sample/HomeActivity.java
+++ b/app/src/main/java/com/applozic/mobicomkit/sample/HomeActivity.java
@@ -9,6 +9,7 @@
 import android.net.Uri;
 import android.os.Build;
 import android.os.Bundle;
+import android.provider.ContactsContract;
 import android.support.annotation.NonNull;
 import android.support.design.widget.BottomNavigationView;
 import android.support.v4.app.ActivityCompat;
@@ -37,6 +38,7 @@
 import com.applozic.mobicomkit.contact.AppContactService;
 import com.applozic.mobicomkit.contact.database.ContactDatabase;
 import com.applozic.mobicomkit.uiwidgets.ApplozicSetting;
+import com.applozic.mobicomkit.uiwidgets.ContactsChangeObserver;
 import com.applozic.mobicomkit.uiwidgets.conversation.ConversationUIService;
 import com.applozic.mobicomkit.uiwidgets.conversation.MessageCommunicator;
 import com.applozic.mobicomkit.uiwidgets.conversation.MobiComKitBroadcastReceiver;
@@ -74,6 +76,7 @@
     private boolean isStopCalled = false;
     // Request code for READ_CONTACTS. It can be any number > 0.
     private static final int PERMISSIONS_REQUEST_READ_CONTACTS = 100;
+    private ContactsChangeObserver observer;
     private BottomNavigationView.OnNavigationItemSelectedListener mOnNavigationItemSelectedListener
             = new BottomNavigationView.OnNavigationItemSelectedListener() {
         @Override
@@ -153,7 +156,7 @@ private void showContacts() {
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M &&
 
                 ActivityCompat.checkSelfPermission(this, android.Manifest.permission.READ_CONTACTS) !=
-                        PackageManager.PERMISSION_GRANTED){
+                        PackageManager.PERMISSION_GRANTED) {
 
             ActivityCompat.requestPermissions(this, new String[]{android.Manifest.permission.READ_CONTACTS},
                     PERMISSIONS_REQUEST_READ_CONTACTS);
@@ -161,8 +164,8 @@ private void showContacts() {
             // onRequestPermissionsResult(int, String[], int[]) override method
         } else {
             // Android version is lesser than 6.0 or the permission is already granted.
-            Intent intent = new Intent(this, DeviceContactSyncService.class);
-            DeviceContactSyncService.enqueueWork(this, intent);
+            /*Intent intent = new Intent(this, DeviceContactSyncService.class);
+            DeviceContactSyncService.enqueueWork(this, intent);*/
         }
     }
 
@@ -177,7 +180,7 @@ public void onRequestPermissionsResult(int requestCode, @NonNull String[] permis
                 Toast.makeText(this, "Until you grant the permission, we cannot display the names",
                         Toast.LENGTH_SHORT).show();
             }
-        }else{
+        } else {
             super.onRequestPermissionsResult(requestCode, permissions, grantResults);
         }
     }
@@ -249,7 +252,7 @@ public void pushFragments(String tag, Fragment fragment, boolean shouldAdd) {
                         !getSupportFragmentManager().isDestroyed()) {
 
                     if (shouldAdd)
-                    mStacks.get(tag).push(fragment);
+                        mStacks.get(tag).push(fragment);
                     //FragmentManager manager = getSupportFragmentManager();
                     FragmentTransaction ft = manager.beginTransaction();
                     ft.replace(R.id.layout_child_activity, fragment);
@@ -416,6 +419,11 @@ protected void onResume() {
         subscribeIntent.putExtra(ApplozicMqttIntentService.SUBSCRIBE, true);
         startService(subscribeIntent);
 
+        if (observer != null && MobiComUserPreference.getInstance(this).isLoggedIn()) {
+            getApplicationContext().getContentResolver().registerContentObserver(
+                    ContactsContract.Contacts.CONTENT_URI, true, observer);
+        }
+
         if (!Utils.isInternetAvailable(this)) {
             String errorMessage = getResources().getString(R.string.internet_connection_not_available);
             showErrorMessageView(errorMessage);
@@ -425,6 +433,9 @@ protected void onResume() {
     @Override
     protected void onPause() {
         LocalBroadcastManager.getInstance(this).unregisterReceiver(mobiComKitBroadcastReceiver);
+        if (observer != null && MobiComUserPreference.getInstance(this).isLoggedIn()) {
+            getApplicationContext().getContentResolver().unregisterContentObserver(observer);
+        }
         super.onPause();
     }
 
@@ -440,6 +451,9 @@ public void onSuccess(RegistrationResponse registrationResponse, final Context c
 
                 ApplozicClient.getInstance(context).enableDeviceContactSync(true);
 
+                Intent intent = new Intent(context, DeviceContactSyncService.class);
+                DeviceContactSyncService.enqueueWork(context, intent);
+
 
                 /*Map<ApplozicSetting.RequestCode, String> activityCallbacks = new HashMap<ApplozicSetting.RequestCode, String>();
                 activityCallbacks.put(ApplozicSetting.RequestCode.USER_LOOUT, HomeActivity.class.getName());
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/contact/DeviceContactService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/contact/DeviceContactService.java
index 78f1a858..30d7701a 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/contact/DeviceContactService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/contact/DeviceContactService.java
@@ -159,42 +159,35 @@ public Contact getContactFromContactCursor(Cursor people) {
             return null;
         }
 
-        //Utils.printLog(context, "DeviceContactService", "Modified Display name  : " + displayName);
-
         String formattedPhoneNumber = contactNO;
 
         TelephonyManager telephonyManager = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);
         String countryCode = telephonyManager.getSimCountryIso().toUpperCase();
-        if (((ALContactProcessor) context.getApplicationContext()) != null) {
-            formattedPhoneNumber = ((ALContactProcessor) context.getApplicationContext()).processContact(contactNO, countryCode);
+        try {
+            if (context.getApplicationContext() instanceof ALContactProcessor) {
+                formattedPhoneNumber = ((ALContactProcessor) context.getApplicationContext()).processContact(contactNO, countryCode);
+            }
+        } catch (ClassCastException e) {
+
         }
 
         ContactDatabase contactDatabase = new ContactDatabase(context);
         Contact contact = contactDatabase.getContactByPhoneNo(formattedPhoneNumber);
         Contact contactByLookupKey = contactDatabase.getContactById(lookupKey);
 
-        /*if (contactDatabase.isContactPresent(formattedPhoneNumber, Contact.ContactType.DEVICE_AND_APPLOZIC)) {
+        if (contactDatabase.isContactPresent(formattedPhoneNumber, Contact.ContactType.DEVICE_AND_APPLOZIC)) {
+            if (!displayName.equals(contact.getPhoneDisplayName())) {
+                contactDatabase.updatePhoneContactDisplayName(formattedPhoneNumber, displayName, Contact.ContactType.DEVICE_AND_APPLOZIC.getValue());
+            }
             return null;
-        }*/
+        }
 
         if (contact != null) {
             //Log.d(TAG, "Contact is present with the same phone number: " + formattedPhoneNumber);
             lookupKey = contact.getUserId();
-            if (!displayName.equals(contact.getPhoneDisplayName())) {
-                contactDatabase.updatePhoneContactDisplayName(formattedPhoneNumber, displayName, contact.getDeviceContactType());
-                return contact;
-            }
         } else if (contactByLookupKey != null) {
             //Log.d(TAG, "Contact is present with the same lookupkey: " + lookupKey);
             lookupKey = lookupKey + "-" + formattedPhoneNumber;
-            if (!displayName.equals(contactByLookupKey.getPhoneDisplayName())) {
-                contactDatabase.updateContact(contactByLookupKey);
-                return contactByLookupKey;
-            }
-        }
-
-        if (contactDatabase.isContactPresent(formattedPhoneNumber, Contact.ContactType.DEVICE_AND_APPLOZIC)) {
-            return null;
         }
 
         Contact newContact = new Contact();
@@ -243,6 +236,9 @@ public void processModifiedContacts() {
                 if (cursorPhone != null && cursorPhone.getCount() > 0) {
                     while (cursorPhone.moveToNext()) {
                         Contact contact = getContactFromContactCursor(cursorPhone);
+                        if (contact == null) {
+                            continue;
+                        }
                         appContactService.upsert(contact);
                         contactNumberList.add(contact.getFormattedContactNumber());
                     }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/contact/database/ContactDatabase.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/contact/database/ContactDatabase.java
index 951265d7..0e6506c7 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/contact/database/ContactDatabase.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/contact/database/ContactDatabase.java
@@ -77,8 +77,6 @@ public Contact getContact(Cursor cursor, String primaryKeyAliash) {
             contact.setLastMessageAtTime(cursor.getLong(cursor.getColumnIndex(MobiComDatabaseHelper.LAST_MESSAGED_AT)));
 
             if (ApplozicClient.getInstance(context).isDeviceContactSync()) {
-                //String phoneDisplayName = getContactName(contact.getFormattedContactNumber());
-                //contact.setPhoneDisplayName(!TextUtils.isEmpty(phoneDisplayName) ? phoneDisplayName : cursor.getString(cursor.getColumnIndex(MobiComDatabaseHelper.PHONE_CONTACT_DISPLAY_NAME)));
                 contact.setDeviceContactType(cursor.getShort(cursor.getColumnIndex(MobiComDatabaseHelper.DEVICE_CONTACT_TYPE)));
                 contact.setPhoneDisplayName(cursor.getString(cursor.getColumnIndex(MobiComDatabaseHelper.PHONE_CONTACT_DISPLAY_NAME)));
             }
@@ -257,10 +255,12 @@ public ContentValues prepareContactValues(Contact contact) {
         contentValues.put(MobiComDatabaseHelper.FULL_NAME, getFullNameForUpdate(contact));
 
         if (ApplozicClient.getInstance(context).isDeviceContactSync()) {
+
             if (contact.getDeviceContactType() != null) {
                 contentValues.put(MobiComDatabaseHelper.DEVICE_CONTACT_TYPE, contact.getDeviceContactType());
                 contentValues.put(MobiComDatabaseHelper.APPLOZIC_TYPE, contact.isApplozicType() ? 1 : 0);
             }
+
             if (!TextUtils.isEmpty(contact.getFormattedContactNumber())) {
                 contentValues.put(MobiComDatabaseHelper.CONTACT_NO, contact.getFormattedContactNumber());
             }
@@ -318,7 +318,9 @@ public ContentValues prepareContactValues(Contact contact) {
         contentValues.put(MobiComDatabaseHelper.USER_ROLE_TYPE, contact.getRoleType());
         contentValues.put(MobiComDatabaseHelper.LAST_MESSAGED_AT, contact.getLastMessageAtTime());
         contentValues.put(MobiComDatabaseHelper.USER_TYPE_ID, contact.getUserTypeId());
-        contentValues.put(MobiComDatabaseHelper.DELETED_AT, contact.getDeletedAtTime());
+        if (contact.getDeletedAtTime() != null && contact.getDeletedAtTime() != 0) {
+            contentValues.put(MobiComDatabaseHelper.DELETED_AT, contact.getDeletedAtTime());
+        }
         return contentValues;
     }
 
@@ -627,7 +629,9 @@ public void saveOrUpdate(Contact contact) {
         if (existingContact == null) {
             addContact(contact);
         } else {
-            if (Contact.ContactType.DEVICE_AND_APPLOZIC.getValue().equals(contact.getDeviceContactType())) {
+            if (Contact.ContactType.DEVICE_AND_APPLOZIC.getValue().equals(existingContact.getDeviceContactType())) {
+                contact.setDeviceContactType(existingContact.getDeviceContactType());
+            }else if(Contact.ContactType.DEVICE_AND_APPLOZIC.getValue().equals(contact.getDeviceContactType())){
                 contact.setDeviceContactType(existingContact.getDeviceContactType());
             }
             updateContact(contact);
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/database/MobiComDatabaseHelper.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/database/MobiComDatabaseHelper.java
index 97f9d1e1..fb8ce6ce 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/database/MobiComDatabaseHelper.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/database/MobiComDatabaseHelper.java
@@ -186,7 +186,7 @@
             + USER_ROLE_TYPE + " integer default 0, "
             + LAST_MESSAGED_AT + " integer, "
             + USER_METADATA + " varchar(2000) null, "
-            + DEVICE_CONTACT_TYPE + " integer default 1"
+            + DEVICE_CONTACT_TYPE + " integer default 0"
             + " ) ";
 
     private static final String CREATE_CHANNEL_TABLE = " CREATE TABLE channel ( " +
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/ConversationActivity.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/ConversationActivity.java
index 1b688b96..22bd1994 100755
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/ConversationActivity.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/ConversationActivity.java
@@ -69,6 +69,7 @@
 import com.applozic.mobicomkit.contact.BaseContactService;
 import com.applozic.mobicomkit.uiwidgets.AlCustomizationSettings;
 import com.applozic.mobicomkit.uiwidgets.ApplozicSetting;
+import com.applozic.mobicomkit.uiwidgets.ContactsChangeObserver;
 import com.applozic.mobicomkit.uiwidgets.R;
 import com.applozic.mobicomkit.uiwidgets.conversation.ConversationUIService;
 import com.applozic.mobicomkit.uiwidgets.conversation.MessageCommunicator;
@@ -168,6 +169,7 @@
     private SearchView searchView;
     private String searchTerm;
     private SearchListFragment searchListFragment;
+    private ContactsChangeObserver observer;
 
     public ConversationActivity() {
 
@@ -265,11 +267,19 @@ protected void onResume() {
             String errorMessage = getResources().getString(R.string.internet_connection_not_available);
             showErrorMessageView(errorMessage);
         }
+
+        if (observer != null) {
+            getApplicationContext().getContentResolver().registerContentObserver(
+                    ContactsContract.Contacts.CONTENT_URI, true, observer);
+        }
     }
 
     @Override
     protected void onPause() {
         //ApplozicMqttService.getInstance(this).unSubscribe();
+        if (observer != null) {
+            getApplicationContext().getContentResolver().unregisterContentObserver(observer);
+        }
         super.onPause();
     }
 
@@ -434,6 +444,8 @@ protected void onCreate(Bundle savedInstanceState) {
             }
         }
         LocalBroadcastManager.getInstance(this).registerReceiver(mobiComKitBroadcastReceiver, BroadcastService.getIntentFilter());
+
+        observer = new ContactsChangeObserver(null, this);
     }
 
     @Override
@@ -567,7 +579,7 @@ void beginCrop(Uri imageUri) {
     }
 
     @Override
-    public void onRequestPermissionsResult(int requestCode, String[] permissions,int[] grantResults) {
+    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
         if (requestCode == PermissionsUtils.REQUEST_STORAGE) {
             if (PermissionsUtils.verifyPermissions(grantResults)) {
                 showSnackBar(R.string.storage_permission_granted);
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/fragment/MobiComQuickConversationFragment.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/fragment/MobiComQuickConversationFragment.java
index ebec4190..836e3f85 100644
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/fragment/MobiComQuickConversationFragment.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/fragment/MobiComQuickConversationFragment.java
@@ -100,7 +100,6 @@
     private boolean loading = true;
     private int startingPageIndex = 0;
     private ProgressBar progressBar;
-    ContactsChangeObserver observer;
     private RelativeLayout startChatLayout;
     private Menu menu;
 
@@ -132,10 +131,6 @@ public void run() {
         thread.start();
         setHasOptionsMenu(true);
         BroadcastService.lastIndexForChats = 0;
-
-        observer = new ContactsChangeObserver(null, getContext());
-        getContext().getApplicationContext().getContentResolver().registerContentObserver(
-                ContactsContract.Contacts.CONTENT_URI, true, observer);
     }
 
     @Override
@@ -692,9 +687,6 @@ public void onRefresh() {
     @Override
     public void onDestroy() {
         super.onDestroy();
-        if(observer != null){
-            getContext().getApplicationContext().getContentResolver().unregisterContentObserver(observer);
-        }
     }
 
     @Override
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/activity/MobiComKitPeopleActivity.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/activity/MobiComKitPeopleActivity.java
index 712f3a92..c3eec9d0 100644
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/activity/MobiComKitPeopleActivity.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/activity/MobiComKitPeopleActivity.java
@@ -9,6 +9,7 @@
 import android.os.AsyncTask;
 import android.os.Build;
 import android.os.Bundle;
+import android.provider.ContactsContract;
 import android.support.design.widget.TabLayout;
 import android.support.v4.app.Fragment;
 import android.support.v4.app.FragmentActivity;
@@ -33,6 +34,7 @@
 import com.applozic.mobicomkit.api.attachment.FileClientService;
 import com.applozic.mobicomkit.channel.service.ChannelService;
 import com.applozic.mobicomkit.uiwidgets.AlCustomizationSettings;
+import com.applozic.mobicomkit.uiwidgets.ContactsChangeObserver;
 import com.applozic.mobicomkit.uiwidgets.R;
 import com.applozic.mobicomkit.uiwidgets.conversation.ConversationUIService;
 import com.applozic.mobicomkit.uiwidgets.conversation.activity.ConversationActivity;
@@ -82,6 +84,7 @@
     OnContactsInteractionListener onContactsInteractionListener;
     private SearchListFragment searchListFragment;
     private boolean isSearchResultView = false;
+    private ContactsChangeObserver observer;
 
     public static void addFragment(FragmentActivity fragmentActivity, Fragment fragmentToAdd, String fragmentTag) {
         FragmentManager supportFragmentManager = fragmentActivity.getSupportFragmentManager();
@@ -173,6 +176,7 @@ protected void onCreate(Bundle savedInstanceState) {
       /*  if (Intent.ACTION_SEARCH.equals(intent.getAction())) {
             mContactsListFragment.onQueryTextChange(searchQuery);
         }*/
+        observer = new ContactsChangeObserver(null, this);
     }
 
     @TargetApi(Build.VERSION_CODES.HONEYCOMB)
@@ -268,6 +272,24 @@ public void onGroupSelected(Channel channel) {
         }
     }
 
+    @Override
+    protected void onResume() {
+        super.onResume();
+
+        if (observer != null) {
+            getApplicationContext().getContentResolver().registerContentObserver(
+                    ContactsContract.Contacts.CONTENT_URI, true, observer);
+        }
+    }
+
+    @Override
+    protected void onPause() {
+        if (observer != null) {
+            getApplicationContext().getContentResolver().unregisterContentObserver(observer);
+        }
+        super.onPause();
+    }
+
     @Override
     public void onCustomContactSelected(Contact contact) {
         Intent intent = null;
diff --git a/mobicommons/src/main/java/com/applozic/mobicommons/people/contact/Contact.java b/mobicommons/src/main/java/com/applozic/mobicommons/people/contact/Contact.java
index 997211a5..2905178c 100755
--- a/mobicommons/src/main/java/com/applozic/mobicommons/people/contact/Contact.java
+++ b/mobicommons/src/main/java/com/applozic/mobicommons/people/contact/Contact.java
@@ -103,6 +103,9 @@ public Short getDeviceContactType() {
     }
 
     public void setDeviceContactType(Short contactType) {
+        if(contactType == null){
+            return;
+        }
         this.deviceContactType = contactType;
         setApplozicType(ContactType.APPLOZIC.getValue().equals(this.deviceContactType) || ContactType.DEVICE_AND_APPLOZIC.getValue().equals(this.deviceContactType));
     }
@@ -118,9 +121,7 @@ public void setContactType(short contactType) {
     public void processContactNumbers(Context context) {
         TelephonyManager telephonyManager = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);
         String countryCode = telephonyManager.getSimCountryIso().toUpperCase();
-        if (TextUtils.isEmpty(getFormattedContactNumber())) {
-            //setFormattedContactNumber(ContactNumberUtils.getPhoneNumber(getContactNumber(), countryCode));
-
+        if (TextUtils.isEmpty(formattedContactNumber)) {
             if (((ALContactProcessor) context.getApplicationContext()) != null) {
                 setFormattedContactNumber(((ALContactProcessor) context.getApplicationContext()).processContact(getContactNumber(), countryCode));
             }
@@ -265,7 +266,7 @@ public void setContactId(long contactId) {
 
     public String getDisplayName() {
 
-        if (deviceContactType != null && (ContactType.DEVICE.getValue().equals(deviceContactType) || ContactType.DEVICE_AND_APPLOZIC.getValue().equals(deviceContactType))) {
+        if (formattedContactNumber != null) {
             return TextUtils.isEmpty(phoneDisplayName) ? TextUtils.isEmpty(getFormattedContactNumber()) ? getContactIds() : getFormattedContactNumber() : phoneDisplayName;
         }
 
@@ -273,7 +274,7 @@ public String getDisplayName() {
     }
 
     public String getFullName() {
-        if (deviceContactType != null && (ContactType.DEVICE.getValue().equals(deviceContactType) || ContactType.DEVICE_AND_APPLOZIC.getValue().equals(deviceContactType))) {
+        if (formattedContactNumber != null) {
             return TextUtils.isEmpty(phoneDisplayName) ? fullName : phoneDisplayName;
         }
         return fullName == null ? "" : fullName;
