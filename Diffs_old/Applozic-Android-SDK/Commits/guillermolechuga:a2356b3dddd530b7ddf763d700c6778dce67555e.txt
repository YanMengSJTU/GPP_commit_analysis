diff --git a/INTEGRATION-DOC.md b/INTEGRATION-DOC.md
index 25c2b9f1..e98ec479 100644
--- a/INTEGRATION-DOC.md
+++ b/INTEGRATION-DOC.md
@@ -22,13 +22,13 @@ Add the following in your build.gradle dependency
 a) Chat SDK (Without audio/video)
 
 ```
-compile 'com.applozic.communication.uiwidget:mobicomkitui:5.4'
+compile 'com.applozic.communication.uiwidget:mobicomkitui:5.5'
 ```
 
 b) Chat SDK with Audio/Video.
 
 ```
-compile 'com.applozic.communication.uiwidget:audiovideo:1.6'
+compile 'com.applozic.communication.uiwidget:audiovideo:1.7'
 ```
 **NOTE** : To enable Audio/Video you need to follow extra steps:
 https://www.applozic.com/docs/android-chat-sdk.html#audio-video-call-setup
diff --git a/README.md b/README.md
index 871ff0cb..13423543 100644
--- a/README.md
+++ b/README.md
@@ -24,7 +24,7 @@ Documentation: [Applozic Android Chat & Messaging SDK Documentation](https://www
 
 #### Step 1: Add the following in your build.gradle dependency:      
 
-`compile 'com.applozic.communication.uiwidget:mobicomkitui:5.4' `
+`compile 'com.applozic.communication.uiwidget:mobicomkitui:5.5' `
 
 
 Add the following in gradle android target:      
diff --git a/app/build.gradle b/app/build.gradle
index e2dcd70a..12d69d89 100755
--- a/app/build.gradle
+++ b/app/build.gradle
@@ -58,7 +58,7 @@ android {
 dependencies {
     compile fileTree(dir: 'libs', include: ['*.jar'])
     compile project(':mobicomkitui') //Note: use this for customization
-    //compile 'com.applozic.communication.uiwidget:mobicomkitui:5.4'
+    //compile 'com.applozic.communication.uiwidget:mobicomkitui:5.5'
     compile 'com.android.support:support-v4:27.0.2'
     compile 'com.android.support:appcompat-v7:27.0.2'
     //compile 'com.facebook.android:facebook-android-sdk:4.1.0'
diff --git a/app/src/main/assets/applozic-settings.json b/app/src/main/assets/applozic-settings.json
index f5343659..bb7efb2d 100644
--- a/app/src/main/assets/applozic-settings.json
+++ b/app/src/main/assets/applozic-settings.json
@@ -92,53 +92,55 @@
     "sendMessageOnClick": true,
     "cornerRadius": 20,
     "textColor": "#ffffff",
-    "messageList": ["Hey",
-      "How may I help you?",
-      "May I know your emailId",
-      "May I know your company name?",
-      "Is this related to Android, iOS, or web?",
-      "Did you follow our doc?"],
+    "messageList": {
+      "Greetings": "Hey",
+      "Help?": "How may I help you?",
+      "Email-Id": "May I know your emailId",
+      "Company": "May I know your company name?",
+      "Platform?": "Is this related to Android, iOS, or web?",
+      "Doc?": "Did you follow our doc?"
+    },
     "textMessageList": {
       "showOnSenderSide": false,
       "showOnReceiverSide": false,
       "sendMessageOnClick": false,
-      "messageList": [
-      ]
+      "messageList": {
+      }
     },
     "imageMessageList": {
       "showOnSenderSide": false,
       "sendMessageOnClick": false,
       "showOnReceiverSide": false,
-      "messageList": [
-      ]
+      "messageList": {
+      }
     },
     "videoMessageList": {
       "showOnSenderSide": false,
       "sendMessageOnClick": false,
       "showOnReceiverSide": false,
-      "messageList": [
-      ]
+      "messageList": {
+      }
     },
     "audioMessageList": {
       "showOnSenderSide": false,
       "sendMessageOnClick": false,
       "showOnReceiverSide": false,
-      "messageList": [
-      ]
+      "messageList": {
+      }
     },
     "locationMessageList": {
       "showOnSenderSide": false,
       "sendMessageOnClick": false,
       "showOnReceiverSide": false,
-      "messageList": [
-      ]
+      "messageList": {
+      }
     },
     "contactMessageList": {
       "showOnSenderSide": false,
       "sendMessageOnClick": false,
       "showOnReceiverSide": false,
-      "messageList": [
-      ]
+      "messageList": {
+      }
     }
   }
 }
diff --git a/mobicomkit/build.gradle b/mobicomkit/build.gradle
index 5e3aa0d3..f5969305 100755
--- a/mobicomkit/build.gradle
+++ b/mobicomkit/build.gradle
@@ -8,7 +8,7 @@ android {
         minSdkVersion 14
         targetSdkVersion 27
         versionCode 1
-        versionName "5.4"
+        versionName "5.5"
     }
     useLibrary 'org.apache.http.legacy'
     buildTypes {
@@ -43,7 +43,7 @@ dependencies {
     compile 'com.google.code.gson:gson:2.8.0'
     compile 'com.firebase:firebase-jobdispatcher:0.8.4'
     compile project(':mobicommons') //Note: use this for customization
-    //compile 'com.applozic.mobiframework:mobicommons:5.3' //Note: use this in case customization is not required
+    //compile 'com.applozic.mobiframework:mobicommons:5.5' //Note: use this in case customization is not required
 }
 
 
@@ -63,7 +63,7 @@ dependencies {
     artifact = 'mobicomkit'
 
     libraryDescription = 'Applozic Communication Chat/Messaging library'
-    libraryVersion = '5.4'
+    libraryVersion = '5.5'
 
     developerId = 'devashish'
     developerName = 'Applozic'
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/HttpRequestUtils.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/HttpRequestUtils.java
index 8933a19d..56753ebe 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/HttpRequestUtils.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/HttpRequestUtils.java
@@ -124,6 +124,7 @@ public String postJsonToServer(String StringUrl, String data) throws Exception {
         }
         connection.setDoInput(true);
         connection.setDoOutput(true);
+        addGlobalHeaders(connection);
         connection.connect();
 
         byte[] dataBytes = data.getBytes("UTF-8");
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/register/RegisterUserClientService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/register/RegisterUserClientService.java
index 7c59beed..68651fb6 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/register/RegisterUserClientService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/register/RegisterUserClientService.java
@@ -66,7 +66,7 @@ public String getUpdateAccountUrl() {
 //    final RegistrationResponse registrationResponse = createAccount(user);
 //    Intent intent = new Intent(context, ApplozicMqttIntentService.class);
 //    intent.putExtra(ApplozicMqttIntentService.CONNECTED_PUBLISH,true);
-//    context.startService(intent);
+//    ApplozicMqttIntentService.enqueueWork(context, intent);
 //    return registrationResponse;
 
 
@@ -170,7 +170,7 @@ public RegistrationResponse createAccount(User user) throws Exception {
 
         Intent mutedUserListService = new Intent(context, ConversationIntentService.class);
         mutedUserListService.putExtra(ConversationIntentService.MUTED_USER_LIST_SYNC, true);
-        context.startService(mutedUserListService);
+        ConversationIntentService.enqueueWork(context, mutedUserListService);
 
         Intent intent = new Intent(context, ApplozicMqttIntentService.class);
         intent.putExtra(ApplozicMqttIntentService.CONNECTED_PUBLISH, true);
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/ApplozicMultipartUtility.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/ApplozicMultipartUtility.java
index 242e4e3a..00e0d527 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/ApplozicMultipartUtility.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/ApplozicMultipartUtility.java
@@ -1,10 +1,10 @@
 package com.applozic.mobicomkit.api.attachment;
 
 import android.content.Context;
+import android.os.Handler;
 
 import com.applozic.mobicomkit.api.HttpRequestUtils;
-import com.applozic.mobicomkit.exception.ApplozicException;
-import com.applozic.mobicomkit.listners.MediaUploadProgressHandler;
+import com.applozic.mobicomkit.api.conversation.MobiComConversationService;
 
 import java.io.BufferedReader;
 import java.io.File;
@@ -46,7 +46,7 @@ public ApplozicMultipartUtility(String requestURL, String charset, Context conte
     }
 
 
-    public void addFilePart(String fieldName, File uploadFile, MediaUploadProgressHandler handler)
+    public void addFilePart(String fieldName, File uploadFile, Handler handler)
             throws IOException, InterruptedException {
         String fileName = uploadFile.getName();
         writer.append("--" + boundary).append(LINE_FEED);
@@ -64,31 +64,43 @@ public void addFilePart(String fieldName, File uploadFile, MediaUploadProgressHa
 
         FileInputStream inputStream = new FileInputStream(uploadFile);
         byte[] buffer = new byte[4096];
-        int bytesRead = -1;
+        long bytesRead = -1;
         long totalRead = 0;
-        int previousPercent = 0;
+        long previousPercent = 0;
         long totalSize = uploadFile.length();
         if (handler != null) {
-            handler.onUploadStarted(null);
+            android.os.Message msg = handler.obtainMessage();
+            msg.what = MobiComConversationService.UPLOAD_STARTED;
+            msg.getData().putString("error", null);
+            msg.sendToTarget();
+            //handler.onUploadStarted(null);
         }
         while ((bytesRead = inputStream.read(buffer)) != -1) {
             if (Thread.interrupted()) {
                 throw new InterruptedException();
             }
             try {
-                outputStream.write(buffer, 0, bytesRead);
+                outputStream.write(buffer, 0, (int) bytesRead);
                 totalRead += bytesRead;
                 int percentage = (int) ((totalRead / (float) totalSize) * 100);
 
                 if (percentage != previousPercent) {
                     if (handler != null) {
-                        handler.onProgressUpdate(percentage, null);
+                        android.os.Message msg = handler.obtainMessage();
+                        msg.what = MobiComConversationService.UPLOAD_PROGRESS;
+                        msg.arg1 = percentage;
+                        msg.sendToTarget();
+                        //handler.onProgressUpdate(percentage, null);
                     }
                     previousPercent = percentage;
                 }
             } catch (Exception e) {
                 if (handler != null) {
-                    handler.onCompleted(new ApplozicException(e.getMessage()));
+                    android.os.Message msg = handler.obtainMessage();
+                    msg.what = MobiComConversationService.UPLOAD_COMPLETED;
+                    msg.getData().putString("error", e.getMessage());
+                    msg.sendToTarget();
+                    //handler.onCompleted(new ApplozicException(e.getMessage()));
                 }
             }
         }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/AttachmentDownloader.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/AttachmentDownloader.java
index 953ce8f9..1425796d 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/AttachmentDownloader.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/AttachmentDownloader.java
@@ -113,7 +113,7 @@ public void run() {
                  */
                 mPhotoTask.handleDownloadState(HTTP_STATE_STARTED);
                 // Downloads the image and catches IO errors
-                loadAttachmentImage(mPhotoTask.getMessage(), mPhotoTask.getDownloadHandler(), mPhotoTask.getContext());
+                loadAttachmentImage(mPhotoTask.getMessage(), mPhotoTask.getContext());
             }
 
             /*
@@ -151,7 +151,7 @@ public void run() {
         }
     }
 
-    public void loadAttachmentImage(Message message, MediaDownloadProgressHandler handler, Context context) {
+    public void loadAttachmentImage(Message message, Context context) {
         File file = null;
         try {
             InputStream inputStream = null;
@@ -185,22 +185,25 @@ public void loadAttachmentImage(Message message, MediaDownloadProgressHandler ha
 
                 OutputStream output = new FileOutputStream(file);
                 byte data[] = new byte[1024];
-                int totalSize = fileMeta.getSize();
-                int progressCount = 0;
+                long totalSize = fileMeta.getSize();
+                long progressCount = 0;
                 int count = 0;
                 int prevPrecentage = 0;
                 while ((count = inputStream.read(data)) != -1) {
                     output.write(data, 0, count);
                     progressCount = progressCount + count;
+                    long percentage =  progressCount * 100 / totalSize;
                     android.os.Message msg = new android.os.Message();
-                    int percentage = progressCount * 100 / totalSize;
                     //TODO: pecentage should be transfer via handler
                     //Message code 2 represents image is successfully downloaded....
-                    if (percentage != prevPrecentage) {
-                        if (handler != null) {
-                            handler.onProgressUpdate(percentage, null);
-                        }
-                        prevPrecentage = percentage;
+                    if (percentage + 1 != prevPrecentage) {
+                        mPhotoTask.handleDownloadState(5);
+                        mPhotoTask.downloadProgress((int) percentage + 1);
+                        msg.what = 5;
+                        msg.arg1 = (int) percentage + 1;
+                        msg.obj = this;
+                        //msg.sendToTarget();
+                        prevPrecentage = (int) percentage + 1;
                     }
                     if ((percentage % 10 == 0)) {
                         msg.what = 1;
@@ -221,10 +224,6 @@ public void loadAttachmentImage(Message message, MediaDownloadProgressHandler ha
             arrayList.add(file.getAbsolutePath());
             message.setFilePaths(arrayList);
 
-            if (handler != null) {
-                handler.onCompleted(message, null);
-            }
-
             MediaScannerConnection.scanFile(mPhotoTask.getContext(),
                     new String[]{file.toString()}, null,
                     new MediaScannerConnection.OnScanCompletedListener() {
@@ -240,9 +239,6 @@ public void onScanCompleted(String path, Uri uri) {
         } catch (Exception ex) {
             //If partial file got created delete it, we try to download it again
             if (file != null && file.exists()) {
-                if (handler != null) {
-                    handler.onCompleted(null, new ApplozicException("Exception occured while downloading"));
-                }
                 Utils.printLog(context, TAG, " Exception occured while downloading :" + file.getAbsolutePath());
                 file.delete();
             }
@@ -286,6 +282,8 @@ public void onScanCompleted(String path, Uri uri) {
 
         MediaDownloadProgressHandler getDownloadHandler();
 
+        void downloadProgress(int progress);
+
         String getContentType();
     }
 }
\ No newline at end of file
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/AttachmentManager.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/AttachmentManager.java
index ab970375..3e86cecb 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/AttachmentManager.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/AttachmentManager.java
@@ -75,6 +75,7 @@
     static final int DOWNLOAD_COMPLETE = 2;
     static final int DECODE_STARTED = 3;
     static final int TASK_COMPLETE = 4;
+    public static final int DOWNLOAD_PROGRESS = 5;
     private static final String TAG = "AttachmentManager";
     // Sets the size of the storage that's used to cache images
     // Sets the amount of time an idle thread will wait for a task before terminating
@@ -216,8 +217,12 @@ public void handleMessage(Message inputMessage) {
                             attachmentTask.getMessage().setAttDownloadInProgress(true);
                             attachmentTask.getDownloadHandler().onDownloadStarted();
                             break;
+                        case DOWNLOAD_PROGRESS:
+                            attachmentTask.getDownloadHandler().onProgressUpdate(inputMessage.arg1, null);
+                            break;
                         case DOWNLOAD_COMPLETE:
                             attachmentTask.getMessage().setAttDownloadInProgress(false);
+                            attachmentTask.getDownloadHandler().onCompleted(attachmentTask.getMessage(), null);
                             break;
                         case DECODE_STARTED:
                             break;
@@ -233,7 +238,6 @@ public void handleMessage(Message inputMessage) {
                         case DOWNLOAD_FAILED:
                             //localView.setStatusResource(R.drawable.imagedownloadfailed);
                             attachmentTask.getMessage().setAttDownloadInProgress(false);
-                            localView.getDownloadProgressLayout().setVisibility(View.GONE);
                             attachmentTask.getDownloadHandler().onCompleted(null, new ApplozicException("Download failed"));
                             // Attempts to re-use the Task object
                             recycleTask(attachmentTask);
@@ -649,9 +653,20 @@ public void handleState(AttachmentTask photoTask, int state) {
                     //We need not to cache the Data here ..as we have nothing to load
                     // ...directly sending TASK complete message is enough
                     mHandler.obtainMessage(TASK_COMPLETE, photoTask).sendToTarget();
+
+                    if (photoTask.getDownloadHandler() != null) {
+                        mHandler.obtainMessage(DOWNLOAD_COMPLETE, photoTask).sendToTarget();
+                    }
                 }
+                break;
+
+            // In all other cases, pass along the message without any other action.
+            case DOWNLOAD_PROGRESS:
+                Message msg = mHandler.obtainMessage(DOWNLOAD_PROGRESS, photoTask);
+                msg.arg1 = photoTask.getProgress();
+                msg.sendToTarget();
+                break;
 
-                // In all other cases, pass along the message without any other action.
             default:
                 mHandler.obtainMessage(state, photoTask).sendToTarget();
                 break;
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/AttachmentTask.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/AttachmentTask.java
index 638f50db..17170394 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/AttachmentTask.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/AttachmentTask.java
@@ -85,6 +85,7 @@
     private Thread mCurrentThread;
     private Message message;
     private MediaDownloadProgressHandler mediaDownloadProgressHandler;
+    private int progress;
 
     /**
      * Creates an PhotoTask containing a download object and a decoder object.
@@ -223,6 +224,15 @@ public MediaDownloadProgressHandler getDownloadHandler() {
         return mediaDownloadProgressHandler;
     }
 
+    @Override
+    public void downloadProgress(int progress) {
+        this.progress = progress;
+    }
+
+    public int getProgress() {
+        return progress;
+    }
+
     @Override
     public String getContentType() {
         //This is just an extra check yo avoid NPE ..but it should not come.
@@ -336,13 +346,13 @@ public void handleDownloadState(int state) {
                 sPhotoManager.attachmentTaskList.remove(this);
                 break;
             case AttachmentDownloader.HTTP_STATE_FAILED:
-                if (mediaDownloadProgressHandler != null) {
-                    mediaDownloadProgressHandler.onCompleted(null,new ApplozicException("Download failed"));
-                }
                 outState = AttachmentManager.DOWNLOAD_FAILED;
                 sPhotoManager.attachmentInProgress.remove(getMessage().getKeyString());
                 sPhotoManager.attachmentTaskList.remove(this);
                 break;
+            case AttachmentManager.DOWNLOAD_PROGRESS:
+                outState = AttachmentManager.DOWNLOAD_PROGRESS;
+                break;
             default:
                 outState = AttachmentManager.DOWNLOAD_STARTED;
                 break;
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/FileClientService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/FileClientService.java
index a23c24a3..e2705b40 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/FileClientService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/FileClientService.java
@@ -7,6 +7,7 @@
 import android.media.ThumbnailUtils;
 import android.net.Uri;
 import android.os.Environment;
+import android.os.Handler;
 import android.provider.MediaStore;
 import android.text.TextUtils;
 
@@ -242,7 +243,7 @@ public Bitmap loadMessageImage(Context context, String url) {
         return null;
     }
 
-    public String uploadBlobImage(String path, MediaUploadProgressHandler handler) throws UnsupportedEncodingException {
+    public String uploadBlobImage(String path, Handler handler) throws UnsupportedEncodingException {
         try {
             ApplozicMultipartUtility multipart = new ApplozicMultipartUtility(getUploadKey(), "UTF-8", context);
             if (ApplozicClient.getInstance(context).isCustomStorageServiceEnabled()) {
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/ApplozicConversation.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/ApplozicConversation.java
new file mode 100644
index 00000000..eab83be3
--- /dev/null
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/ApplozicConversation.java
@@ -0,0 +1,112 @@
+package com.applozic.mobicomkit.api.conversation;
+
+import android.content.Context;
+
+import com.applozic.mobicomkit.api.account.user.MobiComUserPreference;
+import com.applozic.mobicomkit.api.attachment.AttachmentManager;
+import com.applozic.mobicomkit.api.attachment.AttachmentTask;
+import com.applozic.mobicomkit.channel.service.ChannelService;
+import com.applozic.mobicomkit.contact.AppContactService;
+import com.applozic.mobicomkit.exception.ApplozicException;
+import com.applozic.mobicomkit.listners.MediaDownloadProgressHandler;
+import com.applozic.mobicomkit.listners.MessageListHandler;
+import com.applozic.mobicommons.people.channel.Channel;
+import com.applozic.mobicommons.people.contact.Contact;
+
+import java.util.Iterator;
+import java.util.List;
+
+/**
+ * Created by ashish on 05/01/18.
+ */
+
+public class ApplozicConversation {
+
+    public static void getLatestMessageList(Context context, boolean isScroll, MessageListHandler handler) {
+        if (!isScroll) {
+            new MessageListTask(context, null, null, null, null, handler, true).execute();
+        } else {
+            new MessageListTask(context, null, null, MobiComUserPreference.getInstance(context).getStartTimeForPagination(), null, handler, true).execute();
+        }
+    }
+
+    public static void getLatestMessageList(Context context, Long startTime, MessageListHandler handler) {
+        new MessageListTask(context, null, null, startTime, null, handler, true).execute();
+    }
+
+    public static void getMessageListForContact(Context context, Contact contact, Long endTime, MessageListHandler handler) {
+        new MessageListTask(context, contact, null, null, endTime, handler, false).execute();
+    }
+
+    public static void getMessageListForChannel(Context context, Channel channel, Long endTime, MessageListHandler handler) {
+        new MessageListTask(context, null, channel, null, endTime, handler, false).execute();
+    }
+
+    public static void getMessageListForContact(Context context, String userId, Long endTime, MessageListHandler handler) {
+        new MessageListTask(context, new AppContactService(context).getContactById(userId), null, null, endTime, handler, false).execute();
+    }
+
+    public static void getMessageListForChannel(Context context, Integer channelKey, Long endTime, MessageListHandler handler) {
+        new MessageListTask(context, null, ChannelService.getInstance(context).getChannel(channelKey), null, endTime, handler, false).execute();
+    }
+
+    public static void downloadMessage(Context context, Message message, MediaDownloadProgressHandler handler) {
+        ApplozicException e;
+        if (message == null || handler == null) {
+            return;
+        }
+        if (!message.hasAttachment()) {
+            e = new ApplozicException("Message does not have Attachment");
+            handler.onProgressUpdate(0, e);
+            handler.onCompleted(null, e);
+        } else if (message.isAttachmentDownloaded()) {
+            e = new ApplozicException("Attachment for the message already downloaded");
+            handler.onProgressUpdate(0, e);
+            handler.onCompleted(null, e);
+        } else {
+            AttachmentTask mDownloadThread = null;
+            if (!AttachmentManager.isAttachmentInProgress(message.getKeyString())) {
+                // Starts downloading this View, using the current cache setting
+                mDownloadThread = AttachmentManager.startDownload(null, true, message, handler, context);
+                // After successfully downloading the image, this marks that it's available.
+            }
+            if (mDownloadThread == null) {
+                mDownloadThread = AttachmentManager.getBGThreadForAttachment(message.getKeyString());
+                if (mDownloadThread != null) {
+                    mDownloadThread.setAttachment(message, handler, context);
+                }
+            }
+        }
+    }
+
+    public static synchronized void addLatestMessage(Message message, List<Message> messageList) {
+        Iterator<Message> iterator = messageList.iterator();
+        boolean shouldAdd = false;
+
+        while (iterator.hasNext()) {
+            Message currentMessage = iterator.next();
+
+            if ((message.getGroupId() != null && currentMessage.getGroupId() != null && message.getGroupId().equals(currentMessage.getGroupId())) ||
+                    (message.getContactIds() != null && currentMessage.getContactIds() != null && message.getContactIds().equals(currentMessage.getContactIds()))) {
+
+            } else {
+                currentMessage = null;
+            }
+
+            if (currentMessage != null) {
+                if (message.getCreatedAtTime() >= currentMessage.getCreatedAtTime()) {
+                    iterator.remove();
+                } else {
+                    return;
+                }
+            }
+
+            shouldAdd = true;
+        }
+
+        if(shouldAdd){
+            messageList.add(0, message);
+        }
+    }
+
+}
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/Message.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/Message.java
index 243a32c1..a77693ad 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/Message.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/Message.java
@@ -58,6 +58,12 @@
     private short status = Status.READ.getValue();
     private boolean hidden;
     private int replyMessage;
+    public static final String IMAGE = "image";
+    public static final String VIDEO = "video";
+    public static final String AUDIO = "audio";
+    public static final String CONTACT = "contact";
+    public static final String LOCATION = "location";
+    public static final String OTHER = "other";
 
     public Message() {
 
@@ -135,7 +141,7 @@ public boolean hasAttachment() {
     }
 
     public boolean isAttachmentUploadInProgress() {
-        return filePaths != null && !filePaths.isEmpty() && FileUtils.isFileExist(filePaths.get(0))&& !sentToServer;
+        return filePaths != null && !filePaths.isEmpty() && FileUtils.isFileExist(filePaths.get(0)) && !sentToServer;
     }
 
     public boolean isAttachmentDownloaded() {
@@ -481,6 +487,50 @@ public boolean equals(Object o) {
         return false;
     }
 
+    public String getAttachmentType() {
+        String type = "no_attachment";
+
+        if (getContentType() == Message.ContentType.LOCATION.getValue()) {
+            type = "location";
+        } else if (getContentType() == Message.ContentType.AUDIO_MSG.getValue()) {
+            type = "audio";
+        } else if (getContentType() == Message.ContentType.VIDEO_MSG.getValue()) {
+            type = "video";
+        } else if (getContentType() == Message.ContentType.ATTACHMENT.getValue()) {
+            if (getFilePaths() != null) {
+                String filePath = getFilePaths().get(getFilePaths().size() - 1);
+                String mimeType = FileUtils.getMimeType(filePath);
+
+                if (mimeType != null) {
+                    if (mimeType.startsWith("image")) {
+                        type = "image";
+                    } else if (mimeType.startsWith("audio")) {
+                        type = "audio";
+                    } else if (mimeType.startsWith("video")) {
+                        type = "video";
+                    } else {
+                        type = "others";
+                    }
+                }
+            } else if (getFileMetas() != null) {
+                if (getFileMetas().getContentType().contains("image")) {
+                    type = "image";
+                } else if (getFileMetas().getContentType().contains("audio")) {
+                    type = "audio";
+                } else if (getFileMetas().getContentType().contains("video")) {
+                    type = "video";
+                } else {
+                    type = "others";
+                }
+            }
+        } else if (getContentType() == Message.ContentType.CONTACT_MSG.getValue()) {
+            type = "contact";
+        } else if (hasAttachment()) {
+            type = "others";
+        }
+        return type;
+    }
+
     @Override
     public int hashCode() {
         int result = key != null ? key.hashCode() : 0;
@@ -760,7 +810,7 @@ public String getValue() {
         }
     }
 
-    public enum ReplyMessage{
+    public enum ReplyMessage {
         NON_HIDDEN(0),
         REPLY_MESSAGE(1),
         HIDE_MESSAGE(2);
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/MessageBuilder.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/MessageBuilder.java
index 24025ef5..36635999 100644
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/MessageBuilder.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/MessageBuilder.java
@@ -72,7 +72,7 @@ public void send(MediaUploadProgressHandler handler) {
         if (handler == null || !message.hasAttachment()) {
             new MobiComConversationService(context).sendMessage(message);
         } else if (message.hasAttachment()) {
-            new MobiComConversationService(context).sendMessage(message, handler);
+            new MobiComConversationService(context).sendMessage(message, handler, null);
         }
     }
 }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/MessageClientService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/MessageClientService.java
index 1ad58b4f..45261280 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/MessageClientService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/MessageClientService.java
@@ -1,6 +1,7 @@
 package com.applozic.mobicomkit.api.conversation;
 
 import android.content.Context;
+import android.os.Handler;
 import android.text.TextUtils;
 
 import com.applozic.mobicomkit.ApplozicClient;
@@ -16,10 +17,8 @@
 import com.applozic.mobicomkit.channel.service.ChannelService;
 import com.applozic.mobicomkit.contact.AppContactService;
 import com.applozic.mobicomkit.contact.BaseContactService;
-import com.applozic.mobicomkit.exception.ApplozicException;
 import com.applozic.mobicomkit.feed.ApiResponse;
 import com.applozic.mobicomkit.feed.MessageResponse;
-import com.applozic.mobicomkit.listners.MediaUploadProgressHandler;
 import com.applozic.mobicomkit.sync.SmsSyncRequest;
 import com.applozic.mobicomkit.sync.SyncMessageFeed;
 import com.applozic.mobicomkit.sync.SyncUserDetailsResponse;
@@ -38,7 +37,6 @@
 import java.util.Map;
 import java.util.UUID;
 
-;import static com.applozic.mobicomkit.api.account.user.MobiComUserPreference.userpref;
 
 /**
  * Created by devashish on 26/12/14.
@@ -290,18 +288,18 @@ public void sendPendingMessageToServer(Message message, boolean broadcast) {
 
     }
 
-    public void sendMessageToServer(Message message, MediaUploadProgressHandler handler) throws Exception {
+    public void sendMessageToServer(Message message, Handler handler) throws Exception {
         sendMessageToServer(message, handler, null);
     }
 
-    public void sendMessageToServer(Message message, MediaUploadProgressHandler handler, Class intentClass) throws Exception {
+    public void sendMessageToServer(Message message, Handler handler, Class intentClass) throws Exception {
         processMessage(message, handler);
         if (message.getScheduledAt() != null && message.getScheduledAt() != 0 && intentClass != null) {
             new ScheduledMessageUtil(context, intentClass).createScheduleMessage(message, context);
         }
     }
 
-    public void processMessage(Message message, MediaUploadProgressHandler handler) throws Exception {
+    public void processMessage(Message message, Handler handler) throws Exception {
 
         boolean isBroadcast = (message.getMessageId() == null);
 
@@ -352,7 +350,10 @@ public void processMessage(Message message, MediaUploadProgressHandler handler)
                             return;
                         }
                         if (handler != null) {
-                            handler.onCompleted(new ApplozicException("Error while uploading"));
+                            android.os.Message msg = handler.obtainMessage();
+                            msg.what = MobiComConversationService.UPLOAD_COMPLETED;
+                            msg.getData().putString("error", "Error while uploading");
+                            msg.sendToTarget();
                         }
                         if (!message.isContactMessage()) {
                             messageDatabaseService.updateCanceledFlag(messageId, 1);
@@ -363,8 +364,11 @@ public void processMessage(Message message, MediaUploadProgressHandler handler)
                     if (ApplozicClient.getInstance(context).isCustomStorageServiceEnabled()) {
                         if (!TextUtils.isEmpty(fileMetaResponse)) {
                             message.setFileMetas((FileMeta) GsonUtils.getObjectFromJson(fileMetaResponse, FileMeta.class));
-                            if(handler != null){
-                                handler.onCompleted(null);
+                            if (handler != null) {
+                                android.os.Message msg = handler.obtainMessage();
+                                msg.what = MobiComConversationService.UPLOAD_COMPLETED;
+                                msg.getData().putString("error", null);
+                                msg.sendToTarget();
                             }
                         }
                     } else {
@@ -373,15 +377,21 @@ public void processMessage(Message message, MediaUploadProgressHandler handler)
                         if (jsonObject.has(FILE_META)) {
                             Gson gson = new Gson();
                             message.setFileMetas(gson.fromJson(jsonObject.get(FILE_META), FileMeta.class));
-                            if(handler != null){
-                                handler.onCompleted(null);
+                            if (handler != null) {
+                                android.os.Message msg = handler.obtainMessage();
+                                msg.what = MobiComConversationService.UPLOAD_COMPLETED;
+                                msg.getData().putString("error", null);
+                                msg.sendToTarget();
                             }
                         }
                     }
                 } catch (Exception ex) {
                     Utils.printLog(context, TAG, "Error uploading file to server: " + filePath);
                     if (handler != null) {
-                        handler.onCompleted(new ApplozicException("Error uploading file to server: " + filePath));
+                        android.os.Message msg = handler.obtainMessage();
+                        msg.what = MobiComConversationService.UPLOAD_COMPLETED;
+                        msg.getData().putString("error", "Error uploading file to server: " + filePath);
+                        msg.sendToTarget();
                     }
                   /*  recentMessageSentToServer.remove(message);*/
                     if (!message.isContactMessage() && !skipMessage) {
@@ -441,7 +451,10 @@ public void processMessage(Message message, MediaUploadProgressHandler handler)
                 if (message.hasAttachment() && TextUtils.isEmpty(response) && !message.isContactMessage() && !skipMessage) {
                     messageDatabaseService.updateCanceledFlag(messageId, 1);
                     if (handler != null) {
-                        handler.onCompleted(new ApplozicException("Error uploading file to server"));
+                        android.os.Message msg = handler.obtainMessage();
+                        msg.what = MobiComConversationService.UPLOAD_COMPLETED;
+                        msg.getData().putString("error", "Error uploading file to server");
+                        msg.sendToTarget();
                     }
                     BroadcastService.sendMessageUpdateBroadcast(context, BroadcastService.INTENT_ACTIONS.UPLOAD_ATTACHMENT_FAILED.toString(), message);
                 }
@@ -461,8 +474,12 @@ public void processMessage(Message message, MediaUploadProgressHandler handler)
                 messageDatabaseService.updateMessage(messageId, message.getSentMessageTimeAtServer(), keyString, message.isSentToServer());
             }
             if (message.isSentToServer()) {
+
                 if (handler != null) {
-                    handler.onSent(message);
+                    android.os.Message msg = handler.obtainMessage();
+                    msg.what = MobiComConversationService.MESSAGE_SENT;
+                    msg.getData().putString("message", message.getKeyString());
+                    msg.sendToTarget();
                 }
             }
 
@@ -477,7 +494,11 @@ public void processMessage(Message message, MediaUploadProgressHandler handler)
 
         } catch (Exception e) {
             if (handler != null) {
-                handler.onCompleted(new ApplozicException("Error uploading file"));
+                android.os.Message msg = handler.obtainMessage();
+                msg.what = MobiComConversationService.UPLOAD_COMPLETED;
+                msg.getData().putString("error", "Error uploading file");
+                msg.sendToTarget();
+                //handler.onCompleted(new ApplozicException("Error uploading file"));
             }
         }
 
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/MessageIntentService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/MessageIntentService.java
index 2d37ddbe..1751488f 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/MessageIntentService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/MessageIntentService.java
@@ -3,6 +3,7 @@
 import android.app.IntentService;
 import android.content.Context;
 import android.content.Intent;
+import android.os.Handler;
 import android.support.annotation.NonNull;
 import android.support.v4.app.JobIntentService;
 
@@ -21,7 +22,7 @@
 
     private static final String TAG = "MessageIntentService";
     private MessageClientService messageClientService;
-    private static Map<Long, MediaUploadProgressHandler> uploadQueueMap = new HashMap<>();
+    private static Map<Long, Handler> uploadQueueMap = new HashMap<>();
 
     /**
      * Unique job ID for this service.
@@ -31,7 +32,7 @@
     /**
      * Convenience method for enqueuing work in to this service.
      */
-    static public void enqueueWork(Context context, Intent work, MediaUploadProgressHandler handler) {
+    static public void enqueueWork(Context context, Intent work, Handler handler) {
         enqueueWork(context, MessageIntentService.class, JOB_ID, work);
         if (work != null) {
             final Message message = (Message) GsonUtils.getObjectFromJson(work.getStringExtra(MobiComKitConstants.MESSAGE_JSON_INTENT), Message.class);
@@ -52,9 +53,9 @@ protected void onHandleWork(@NonNull Intent intent) {
 
     private class MessageSender implements Runnable {
         private Message message;
-        private MediaUploadProgressHandler handler;
+        private Handler handler;
 
-        public MessageSender(Message message, MediaUploadProgressHandler handler) {
+        public MessageSender(Message message, Handler handler) {
             this.message = message;
             this.handler = handler;
         }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/MobiComConversationService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/MobiComConversationService.java
index 1a15a7c0..9d83e5bd 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/MobiComConversationService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/MobiComConversationService.java
@@ -3,17 +3,16 @@
 import android.content.Context;
 import android.content.Intent;
 import android.content.SharedPreferences;
+import android.os.Bundle;
+import android.os.Handler;
 import android.os.Process;
 import android.support.v4.content.LocalBroadcastManager;
 import android.text.TextUtils;
 
-import com.applozic.mobicomkit.ApplozicClient;
 import com.applozic.mobicomkit.api.MobiComKitClientService;
 import com.applozic.mobicomkit.api.MobiComKitConstants;
 import com.applozic.mobicomkit.api.account.user.MobiComUserPreference;
 import com.applozic.mobicomkit.api.account.user.UserDetail;
-import com.applozic.mobicomkit.api.attachment.AttachmentManager;
-import com.applozic.mobicomkit.api.attachment.AttachmentTask;
 import com.applozic.mobicomkit.api.attachment.FileClientService;
 import com.applozic.mobicomkit.api.attachment.FileMeta;
 import com.applozic.mobicomkit.api.conversation.database.MessageDatabaseService;
@@ -25,9 +24,7 @@
 import com.applozic.mobicomkit.contact.BaseContactService;
 import com.applozic.mobicomkit.exception.ApplozicException;
 import com.applozic.mobicomkit.feed.ChannelFeed;
-import com.applozic.mobicomkit.listners.MediaDownloadProgressHandler;
 import com.applozic.mobicomkit.listners.MediaUploadProgressHandler;
-import com.applozic.mobicomkit.listners.MessageListHandler;
 import com.applozic.mobicomkit.sync.SyncUserDetailsResponse;
 import com.applozic.mobicommons.commons.core.utils.Utils;
 import com.applozic.mobicommons.file.FileUtils;
@@ -59,6 +56,12 @@
     private BaseContactService baseContactService;
     private ConversationService conversationService;
     private ChannelService channelService;
+    public static final int UPLOAD_STARTED = 1;
+    public static final int UPLOAD_PROGRESS = 2;
+    public static final int UPLOAD_CANCELLED = 3;
+    public static final int UPLOAD_COMPLETED = 4;
+    public static final int MESSAGE_SENT = 5;
+
 
     public MobiComConversationService(Context context) {
         this.context = context;
@@ -74,18 +77,25 @@ public void sendMessage(Message message) {
         sendMessage(message, null, MessageIntentService.class);
     }
 
-    public void sendMessage(Message message, MediaUploadProgressHandler handler, Class messageIntentClass) {
+    public void sendMessage(Message message, final MediaUploadProgressHandler progressHandler, Class messageIntentClass) {
         Intent intent = new Intent(context, messageIntentClass);
         intent.putExtra(MobiComKitConstants.MESSAGE_JSON_INTENT, GsonUtils.getJsonFromObject(message, Message.class));
-        MessageIntentService.enqueueWork(context, intent, handler);
 
+        Handler handler = new Handler(new Handler.Callback() {
+            @Override
+            public boolean handleMessage(android.os.Message message) {
+                handleState(message, progressHandler);
+                return true;
+            }
+        });
+
+        MessageIntentService.enqueueWork(context, intent, handler);
     }
 
     public void sendMessage(Message message, Class messageIntentClass) {
         Intent intent = new Intent(context, messageIntentClass);
         intent.putExtra(MobiComKitConstants.MESSAGE_JSON_INTENT, GsonUtils.getJsonFromObject(message, Message.class));
         MessageIntentService.enqueueWork(context, intent, null);
-
     }
 
     public void sendMessage(Message message, MediaUploadProgressHandler handler) {
@@ -97,9 +107,11 @@ public void sendMessage(Message message, MediaUploadProgressHandler handler) {
 
         if (!message.hasAttachment()) {
             e = new ApplozicException("Message does not have any attachment");
-            handler.onUploadStarted(e);
-            handler.onProgressUpdate(0, e);
-            handler.onCancelled(e);
+            if (handler != null) {
+                handler.onUploadStarted(e);
+                handler.onProgressUpdate(0, e);
+                handler.onCancelled(e);
+            }
         }
         sendMessage(message, handler, MessageIntentService.class);
     }
@@ -521,59 +533,45 @@ public void read(Contact contact, Channel channel) {
         }
     }
 
-    public void getMessageList(boolean isScroll, MessageListHandler handler) {
-        if (!isScroll) {
-            new MessageListTask(context, null, null, null, null, handler, true).execute();
-        } else {
-            new MessageListTask(context, null, null, MobiComUserPreference.getInstance(context).getStartTimeForPagination(), null, handler, true).execute();
-        }
-    }
-
-    public void getMessageList(Long startTime, MessageListHandler handler){
-        new MessageListTask(context, null, null, startTime, null, handler, true).execute();
-    }
-
-    public void getMessageListForContact(Contact contact, Long endTime, MessageListHandler handler) {
-        new MessageListTask(context, contact, null, null, endTime, handler, false).execute();
-    }
+    private void handleState(android.os.Message message, MediaUploadProgressHandler progressHandler) {
+        if (message != null) {
+            Bundle b = message.getData();
+            String e = null;
+            if (b != null) {
+                e = b.getString("error");
+            }
+            switch (message.what) {
+                case UPLOAD_STARTED:
+                    if (progressHandler != null) {
+                        progressHandler.onUploadStarted(e != null ? new ApplozicException(e) : null);
+                    }
+                    break;
 
-    public void getMessageListForChannel(Channel channel, Long endTime, MessageListHandler handler) {
-        new MessageListTask(context, null, channel, null, endTime, handler, false).execute();
-    }
+                case UPLOAD_PROGRESS:
+                    if (progressHandler != null) {
+                        progressHandler.onProgressUpdate(message.arg1, e != null ? new ApplozicException(e) : null);
+                    }
+                    break;
 
-    public void getMessageListForContact(String userId, Long endTime, MessageListHandler handler) {
-        new MessageListTask(context, baseContactService.getContactById(userId), null, null, endTime, handler, false).execute();
-    }
+                case UPLOAD_COMPLETED:
+                    if (progressHandler != null) {
+                        progressHandler.onCompleted(e != null ? new ApplozicException(e) : null);
+                    }
+                    break;
 
-    public void getMessageListForChannel(Integer channelKey, Long endTime, MessageListHandler handler) {
-        new MessageListTask(context, null, channelService.getChannel(channelKey), null, endTime, handler, false).execute();
-    }
+                case UPLOAD_CANCELLED:
+                    if (progressHandler != null) {
+                        progressHandler.onCancelled(e != null ? new ApplozicException(e) : null);
+                    }
+                    break;
 
-    public void downloadMessage(Message message, MediaDownloadProgressHandler handler) {
-        ApplozicException e;
-        if (message == null || handler == null) {
-            return;
-        }
-        if (!message.hasAttachment()) {
-            e = new ApplozicException("Message does not have Attachment");
-            handler.onProgressUpdate(0, e);
-            handler.onCompleted(null, e);
-        } else if (message.isAttachmentDownloaded()) {
-            e = new ApplozicException("Attachment for the message already downloaded");
-            handler.onProgressUpdate(0, e);
-            handler.onCompleted(null, e);
-        } else {
-            AttachmentTask mDownloadThread = null;
-            if (!AttachmentManager.isAttachmentInProgress(message.getKeyString())) {
-                // Starts downloading this View, using the current cache setting
-                mDownloadThread = AttachmentManager.startDownload(null, true, message, handler, context);
-                // After successfully downloading the image, this marks that it's available.
-            }
-            if (mDownloadThread == null) {
-                mDownloadThread = AttachmentManager.getBGThreadForAttachment(message.getKeyString());
-                if (mDownloadThread != null) {
-                    mDownloadThread.setAttachment(message, handler, context);
-                }
+                case MESSAGE_SENT:
+                    if (b != null) {
+                        if (progressHandler != null) {
+                            progressHandler.onSent(messageDatabaseService.getMessage(b.getString("message")));
+                        }
+                    }
+                    break;
             }
         }
     }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/SyncCallService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/SyncCallService.java
index 46d32b05..54cf8cf8 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/SyncCallService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/SyncCallService.java
@@ -82,7 +82,7 @@ public synchronized void syncMessages(String key) {
         } else {
             Intent intent = new Intent(context, ConversationIntentService.class);
             intent.putExtra(ConversationIntentService.SYNC, true);
-            ConversationIntentService.enqueueWork(context,intent);
+            ConversationIntentService.enqueueWork(context, intent);
         }
     }
 
@@ -91,7 +91,7 @@ public synchronized void syncMessageMetadataUpdate(String key, boolean isFromFcm
             Utils.printLog(context, TAG, "Syncing updated message metadata from " + (isFromFcm ? "FCM" : "MQTT") + " for message key : " + key);
             Intent intent = new Intent(context, ConversationIntentService.class);
             intent.putExtra(ConversationIntentService.MESSAGE_METADATA_UPDATE, true);
-            context.startService(intent);
+            ConversationIntentService.enqueueWork(context, intent);
         }
     }
 
@@ -101,7 +101,7 @@ public synchronized void syncMutedUserList(boolean isFromFcm, String userId) {
             Utils.printLog(context, TAG, "Syncing muted user list from " + (isFromFcm ? "FCM" : "MQTT"));
             Intent intent = new Intent(context, ConversationIntentService.class);
             intent.putExtra(ConversationIntentService.MUTED_USER_LIST_SYNC, true);
-            context.startService(intent);
+            ConversationIntentService.enqueueWork(context, intent);
         } else {
             Utils.printLog(context, TAG, "Unmuting userId : " + userId + " from " + (isFromFcm ? "FCM" : "MQTT"));
             new ContactDatabase(context).updateNotificationAfterTime(userId, Calendar.getInstance(TimeZone.getTimeZone("UTC")).getTime().getTime());
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/broadcast/ApplozicBroadcastReceiver.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/broadcast/ApplozicBroadcastReceiver.java
index b63c1dc7..eaeaf27f 100644
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/broadcast/ApplozicBroadcastReceiver.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/broadcast/ApplozicBroadcastReceiver.java
@@ -37,14 +37,20 @@ public void onReceive(Context context, Intent intent) {
         Utils.printLog(context, TAG, "Received broadcast, action: " + action + ", message: " + message);
 
         if (message != null && !message.isSentToMany()) {
-            applozicUIListener.onNewMessage(message);
+            if (!message.isTypeOutbox()) {
+                applozicUIListener.onMessageReceived(message);
+            } else {
+                applozicUIListener.onMessageSent(message);
+            }
         } else if (message != null && message.isSentToMany() && BroadcastService.INTENT_ACTIONS.SYNC_MESSAGE.toString().equals(intent.getAction())) {
             for (String toField : message.getTo().split(",")) {
                 Message singleMessage = new Message(message);
                 singleMessage.setKeyString(message.getKeyString());
                 singleMessage.setTo(toField);
                 singleMessage.processContactIds(context);
-                applozicUIListener.onNewMessage(message);
+                if (!message.isTypeOutbox()) {
+                    applozicUIListener.onMessageReceived(message);
+                }
             }
         }
 
@@ -106,6 +112,8 @@ public void onReceive(Context context, Intent intent) {
             applozicUIListener.onConversationRead(currentId, isGroup);
         } else if (BroadcastService.INTENT_ACTIONS.UPDATE_USER_DETAIL.toString().equals(action)) {
             applozicUIListener.onUserDetailUpdated(intent.getStringExtra("contactId"));
+        } else if (BroadcastService.INTENT_ACTIONS.MESSAGE_METADATA_UPDATE.toString().equals(action)) {
+            applozicUIListener.onMessageMetadataUpdated(keyString);
         }
     }
 }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/channel/database/ChannelDatabaseService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/channel/database/ChannelDatabaseService.java
index a6352ffa..36d756a8 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/channel/database/ChannelDatabaseService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/channel/database/ChannelDatabaseService.java
@@ -50,6 +50,7 @@ public static ChannelUserMapper getChannelUser(Cursor cursor) {
         channelUserMapper.setUserKey(cursor.getString(cursor.getColumnIndex(MobiComDatabaseHelper.USERID)));
         channelUserMapper.setKey(cursor.getInt(cursor.getColumnIndex(MobiComDatabaseHelper.CHANNEL_KEY)));
         channelUserMapper.setUnreadCount(cursor.getShort(cursor.getColumnIndex(MobiComDatabaseHelper.UNREAD_COUNT)));
+        channelUserMapper.setRole(cursor.getInt(cursor.getColumnIndex(MobiComDatabaseHelper.ROLE)));
         return channelUserMapper;
     }
 
@@ -141,6 +142,7 @@ public ContentValues prepareChannelUserMapperValues(ChannelUserMapper channelUse
             if (channelUserMapper.getStatus() != 0) {
                 contentValues.put(MobiComDatabaseHelper.STATUS, channelUserMapper.getStatus());
             }
+            contentValues.put(MobiComDatabaseHelper.ROLE, channelUserMapper.getRole());
         }
         return contentValues;
     }
@@ -472,4 +474,51 @@ public String getGroupOfTwoReceiverId(Integer channelKey) {
         return null;
     }
 
+    public void updateRoleInChannelUserMapper(Integer channelKey,String userId,Integer role) {
+        ContentValues contentValues =  new ContentValues();
+        contentValues.put(MobiComDatabaseHelper.ROLE,role);
+        dbHelper.getWritableDatabase().update(CHANNEL_USER_X,contentValues, MobiComDatabaseHelper.CHANNEL_KEY + "=? AND "+ MobiComDatabaseHelper.USERID+"=?", new String[]{String.valueOf(channelKey),userId});
+    }
+
+    public ChannelUserMapper getChannelUserByChannelKey(final Integer channelKey) {
+        ChannelUserMapper channelUserMapper = null;
+        try {
+            String structuredNameWhere = MobiComDatabaseHelper.CHANNEL_KEY + " =? AND "+MobiComDatabaseHelper.USERID +"="+MobiComUserPreference.getInstance(context).getUserId();
+            SQLiteDatabase db = dbHelper.getWritableDatabase();
+            Cursor cursor = db.query(CHANNEL_USER_X, null, structuredNameWhere, new String[]{String.valueOf(channelKey)}, null, null, null);
+            if (cursor != null) {
+                if (cursor.getCount() > 0) {
+                    cursor.moveToFirst();
+                    channelUserMapper = getChannelUser(cursor);
+                }
+                cursor.close();
+            }
+            dbHelper.close();
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        return channelUserMapper;
+    }
+
+    public ChannelUserMapper getChannelUserByChannelKeyAndUserId(final Integer channelKey,final  String userId) {
+        ChannelUserMapper channelUserMapper = null;
+        try {
+            String structuredNameWhere = MobiComDatabaseHelper.CHANNEL_KEY + " =? AND "+MobiComDatabaseHelper.USERID+" =?";
+            SQLiteDatabase db = dbHelper.getWritableDatabase();
+            Cursor cursor = db.query(CHANNEL_USER_X, null, structuredNameWhere, new String[]{String.valueOf(channelKey),userId}, null, null, null);
+            if (cursor != null) {
+                if (cursor.getCount() > 0) {
+                    cursor.moveToFirst();
+                    channelUserMapper = getChannelUser(cursor);
+                }
+                cursor.close();
+            }
+            dbHelper.close();
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        return channelUserMapper;
+    }
+
+
 }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/channel/service/ChannelService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/channel/service/ChannelService.java
index 8afc0e63..d5031036 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/channel/service/ChannelService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/channel/service/ChannelService.java
@@ -17,12 +17,12 @@
 import com.applozic.mobicomkit.feed.ChannelFeed;
 import com.applozic.mobicomkit.feed.ChannelFeedApiResponse;
 import com.applozic.mobicomkit.feed.ChannelFeedListResponse;
+import com.applozic.mobicomkit.feed.ChannelUsersFeed;
 import com.applozic.mobicomkit.feed.GroupInfoUpdate;
 import com.applozic.mobicomkit.sync.SyncChannelFeed;
 import com.applozic.mobicommons.people.channel.Channel;
 import com.applozic.mobicommons.people.channel.ChannelUserMapper;
 
-import java.util.ArrayList;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
@@ -108,11 +108,46 @@ public void createMultipleChannels(List<ChannelInfo> channelInfo) {
     public void processChannelFeedList(ChannelFeed[] channelFeeds, boolean isUserDetails) {
         if (channelFeeds != null && channelFeeds.length > 0) {
             for (ChannelFeed channelFeed : channelFeeds) {
-                processChannelFeed(channelFeed, isUserDetails);
+                Set<String> memberUserIds = channelFeed.getMembersName();
+                Set<String> userIds = new HashSet<>();
+                Channel channel = getChannel(channelFeed);
+                if (channelDatabaseService.isChannelPresent(channel.getKey())) {
+                    channelDatabaseService.updateChannel(channel);
+                } else {
+                    channelDatabaseService.addChannel(channel);
+                }
+                if (channelFeed.getConversationPxy() != null) {
+                    channelFeed.getConversationPxy().setGroupId(channelFeed.getId());
+                    ConversationService.getInstance(context).addConversation(channelFeed.getConversationPxy());
+                }
+                if (memberUserIds != null && memberUserIds.size() > 0) {
+                    for (String userId : memberUserIds) {
+                        ChannelUserMapper channelUserMapper = new ChannelUserMapper(channelFeed.getId(), userId);
+                        if (channelDatabaseService.isChannelUserPresent(channelFeed.getId(), userId)) {
+                            channelDatabaseService.updateChannelUserMapper(channelUserMapper);
+                        } else {
+                            channelDatabaseService.addChannelUserMapper(channelUserMapper);
+                        }
+                    }
+                }
+
+                if (channelFeed.getGroupUsers() != null && channelFeed.getGroupUsers().size() > 0) {
+                    for (ChannelUsersFeed channelUsers : channelFeed.getGroupUsers()) {
+                        if(channelUsers.getRole() != null){
+                            channelDatabaseService.updateRoleInChannelUserMapper(channelFeed.getId(),channelUsers.getUserId(),channelUsers.getRole());
+                        }
+                    }
+                }
+
+
+                if (isUserDetails) {
+                    userService.processUserDetail(channelFeed.getUsers());
+                }
             }
         }
     }
 
+
     public void processChannelFeed(ChannelFeed channelFeed, boolean isUserDetails) {
         if (channelFeed != null) {
             Set<String> memberUserIds = null;
@@ -379,18 +414,39 @@ public synchronized void processChannelList(List<ChannelFeed> channelFeedList) {
                     for (String userId : memberUserIds) {
                         ChannelUserMapper channelUserMapper = new ChannelUserMapper(channelFeed.getId(), userId);
                         channelDatabaseService.addChannelUserMapper(channelUserMapper);
-                        if (!baseContactService.isContactExists(userId)) {
+                        if (!baseContactService.isContactExists(userId)){
                             userIds.add(userId);
                         }
                     }
-                    if (userIds != null && userIds.size() > 0) {
+                    if(userIds != null && userIds.size()>0){
                         userService.processUserDetailsByUserIds(userIds);
                     }
                 }
+
+                if (channelFeed.getGroupUsers() != null && channelFeed.getGroupUsers().size() > 0) {
+                    for (ChannelUsersFeed channelUsers : channelFeed.getGroupUsers()) {
+                        if(channelUsers.getRole() != null){
+                            channelDatabaseService.updateRoleInChannelUserMapper(channelFeed.getId(),channelUsers.getUserId(),channelUsers.getRole());
+                        }
+                    }
+                }
             }
         }
     }
 
+    public ChannelUserMapper getChannelUserMapper(Integer channelKey){
+        return channelDatabaseService.getChannelUserByChannelKey(channelKey);
+    }
+
+
+    public  void updateRoleInChannelUserMapper(Integer channelKey,String userId,Integer role){
+        channelDatabaseService.updateRoleInChannelUserMapper(channelKey,userId,role);
+    }
+
+    public ChannelUserMapper getChannelUserMapperByUserId(Integer channelKey,String userId){
+        return channelDatabaseService.getChannelUserByChannelKeyAndUserId(channelKey,userId);
+    }
+
     public synchronized boolean processIsUserPresentInChannel(Integer channelKey) {
         return channelDatabaseService.isChannelUserPresent(channelKey, MobiComUserPreference.getInstance(context).getUserId());
     }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/database/MobiComDatabaseHelper.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/database/MobiComDatabaseHelper.java
index 6ffd5071..6983e49d 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/database/MobiComDatabaseHelper.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/database/MobiComDatabaseHelper.java
@@ -12,7 +12,7 @@
 
 public class MobiComDatabaseHelper extends SQLiteOpenHelper {
 
-    public static final int DB_VERSION = 29;
+    public static final int DB_VERSION = 30;
 
     public static final String _ID = "_id";
     public static final String SMS_KEY_STRING = "smsKeyString";
@@ -71,6 +71,7 @@
     public static final String USER_ROLE_TYPE = "userRoleType";
     public static final String LAST_MESSAGED_AT = "lastMessagedAt";
     public static final String URL = "url";
+    public static final String ROLE = "role";
 
 
     public static final String CREATE_SCHEDULE_SMS_TABLE = "create table " + SCHEDULE_SMS_TABLE_NAME + "( "
@@ -151,6 +152,7 @@
     private static final String ALTER_CONTACT_TABLE_FOR_ROLE_TYPE = "ALTER TABLE " + CONTACT_TABLE_NAME + " ADD COLUMN " + USER_ROLE_TYPE + " integer default 0";
     private static final String ALTER_CONTACT_TABLE_FOR_LAST_MESSAGED_AT = "ALTER TABLE " + CONTACT_TABLE_NAME + " ADD COLUMN " + LAST_MESSAGED_AT + " integer default 0";
     private static final String ALTER_SMS_TABLE_FOR_FILE_URL = "ALTER TABLE " + SMS + " ADD COLUMN url varchar(2000)";
+    private static final String ALTER_CHANNEL_USER_MAPPER_TABLE_FOR_ROLE = "ALTER TABLE " + CHANNEL_USER_X + " ADD COLUMN " + ROLE + " integer default 0";
     private static final String CREATE_CONTACT_TABLE = " CREATE TABLE contact ( " +
             USERID + " VARCHAR(50) primary key, "
             + FULL_NAME + " VARCHAR(200), "
@@ -196,6 +198,7 @@
             + USERID + " varchar(100), "
             + UNREAD_COUNT + " integer, "
             + STATUS + " integer, "
+            + ROLE +" integer default 0,"
             + "UNIQUE (" + CHANNEL_KEY + ", " + USERID + "))";
 
     private static final String CREATE_CONVERSATION_TABLE = " CREATE TABLE conversation ( " +
@@ -378,6 +381,9 @@ public void onUpgrade(SQLiteDatabase database, int oldVersion,
             if (!DBUtils.existsColumnInTable(database, "sms", URL)) {
                 database.execSQL(ALTER_SMS_TABLE_FOR_FILE_URL);
             }
+            if (!DBUtils.existsColumnInTable(database, "CHANNEL_USER_X", ROLE)) {
+                database.execSQL(ALTER_CHANNEL_USER_MAPPER_TABLE_FOR_ROLE);
+            }
             database.execSQL(CREATE_INDEX_ON_CREATED_AT);
             database.execSQL(CREATE_INDEX_SMS_TYPE);
             database.execSQL(ALTER_SMS_TABLE);
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/ChannelFeed.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/ChannelFeed.java
index 74b279cd..42ebdc57 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/ChannelFeed.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/ChannelFeed.java
@@ -8,6 +8,7 @@
 import com.applozic.mobicommons.people.channel.Conversation;
 
 import java.util.HashMap;
+import java.util.List;
 import java.util.Map;
 import java.util.Set;
 
@@ -29,6 +30,7 @@
     private Set<String> membersId;
     private Set<UserDetail> users;
     private Conversation conversationPxy;
+    private List<ChannelUsersFeed> groupUsers;
     private Long notificationAfterTime;
     private Long deletedAtTime;
     private Map<String, String> metadata = new HashMap<>();
@@ -68,7 +70,7 @@ public void setName(String name) {
     }
 
     public String getAdminName() {
-        return TextUtils.isEmpty(adminName) ? adminId : adminName;
+        return TextUtils.isEmpty(adminName)?adminId:adminName;
     }
 
     public void setAdminName(String adminName) {
@@ -101,7 +103,7 @@ public void setType(short type) {
 
     public Set<String> getMembersName() {
 
-        return (membersName == null) ? membersId : membersName;
+        return (membersName==null) ? membersId: membersName;
     }
 
     public void setMembersName(Set<String> membersName) {
@@ -172,6 +174,14 @@ public void setAdminId(String adminId) {
         this.adminId = adminId;
     }
 
+    public List<ChannelUsersFeed> getGroupUsers() {
+        return groupUsers;
+    }
+
+    public void setGroupUsers(List<ChannelUsersFeed> groupUsers) {
+        this.groupUsers = groupUsers;
+    }
+
     public Map<String, String> getMetadata() {
         return metadata;
     }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/ChannelUsersFeed.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/ChannelUsersFeed.java
new file mode 100644
index 00000000..7bb06401
--- /dev/null
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/ChannelUsersFeed.java
@@ -0,0 +1,47 @@
+package com.applozic.mobicomkit.feed;
+
+import com.applozic.mobicommons.json.JsonMarker;
+
+/**
+ * Created by sunil on 1/12/16.
+ */
+
+public class ChannelUsersFeed extends JsonMarker {
+    private String userId;
+    private Integer parentGroupKey;
+    private Integer role;
+
+    public String getUserId() {
+        return userId;
+    }
+
+    public void setUserId(String userId) {
+        this.userId = userId;
+    }
+
+    public Integer getParentGroupKey() {
+        return parentGroupKey;
+    }
+
+    public void setParentGroupKey(Integer parentGroupKey) {
+        this.parentGroupKey = parentGroupKey;
+    }
+
+    public Integer getRole() {
+        return role == null ?0:role;
+    }
+
+    public void setRole(Integer role) {
+        this.role = role;
+    }
+
+    @Override
+    public String toString() {
+        return "ChannelUsersFeed{" +
+                "userId='" + userId + '\'' +
+                ", parentGroupKey=" + parentGroupKey +
+                ", role=" + role +
+                '}';
+    }
+}
+
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/GroupInfoUpdate.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/GroupInfoUpdate.java
index d9f3b849..5e9569a7 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/GroupInfoUpdate.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/GroupInfoUpdate.java
@@ -4,8 +4,10 @@
 import com.applozic.mobicommons.json.JsonMarker;
 import com.applozic.mobicommons.people.channel.Channel;
 
+import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.HashSet;
+import java.util.List;
 import java.util.Map;
 import java.util.Set;
 
@@ -27,6 +29,7 @@
     @Exclude
     private String contentUri;
     private Map<String, String> metadata = new HashMap<>();
+    private List<ChannelUsersFeed> users = new ArrayList<>();
 
     public GroupInfoUpdate(Integer channelKey) {
         this.groupId = channelKey;
@@ -134,6 +137,14 @@ public void setMetadata(Map<String, String> metadata) {
         this.metadata = metadata;
     }
 
+    public List<ChannelUsersFeed> getUsers() {
+        return users;
+    }
+
+    public void setUsers(List<ChannelUsersFeed> users) {
+        this.users = users;
+    }
+
     @Override
     public String toString() {
         return "GroupInfoUpdate{" +
@@ -145,6 +156,8 @@ public String toString() {
                 ", imageUrl='" + imageUrl + '\'' +
                 ", localImagePath='" + localImagePath + '\'' +
                 ", newlocalPath='" + newlocalPath + '\'' +
+                ", contentUri='" + contentUri + '\'' +
+                ", users=" + users +
                 '}';
     }
 }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/listners/ApplozicUIListener.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/listners/ApplozicUIListener.java
index 8874bb22..96a02f16 100644
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/listners/ApplozicUIListener.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/listners/ApplozicUIListener.java
@@ -7,7 +7,9 @@
  */
 
 public interface ApplozicUIListener {
-    void onNewMessage(Message message);
+    void onMessageSent(Message message);
+
+    void onMessageReceived(Message message);
 
     void onChannelNameUpdated();
 
@@ -38,4 +40,6 @@
     void onConversationRead(String userId, boolean isGroup);
 
     void onUserDetailUpdated(String userId);
+
+    void onMessageMetadataUpdated(String keyString);
 }
diff --git a/mobicomkitui/build.gradle b/mobicomkitui/build.gradle
index b11fef6d..acc0eda7 100755
--- a/mobicomkitui/build.gradle
+++ b/mobicomkitui/build.gradle
@@ -8,7 +8,7 @@ android {
         minSdkVersion 14
         targetSdkVersion 27
         versionCode 1
-        versionName "5.4"
+        versionName "5.5"
     }
     buildTypes {
         release {
@@ -37,7 +37,7 @@ dependencies {
     compile 'com.theartofdev.edmodo:android-image-cropper:2.5+'
     compile 'com.android.support:cardview-v7:27.0.2'
     compile project(':mobicomkit')//Note: use this for customization
-   // compile 'com.applozic.communication.message:mobicomkit:5.4' //Note: use this in case customization is not required
+   //compile 'com.applozic.communication.message:mobicomkit:5.5' //Note: use this in case customization is not required
 
 }
 
@@ -55,7 +55,7 @@ dependencies {
     artifact = 'mobicomkitui'
 
     libraryDescription = 'Applozic Communication UI Widget'
-    libraryVersion = '5.4'
+    libraryVersion = '5.5'
 
     developerId = 'devashish'
     developerName = 'Applozic'
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/MobicomMessageTemplate.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/MobicomMessageTemplate.java
index 84d2e6ff..0f0b7797 100644
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/MobicomMessageTemplate.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/MobicomMessageTemplate.java
@@ -3,6 +3,7 @@
 import com.applozic.mobicommons.json.JsonMarker;
 
 import java.util.ArrayList;
+import java.util.Map;
 
 /**
  * Created by reytum on 1/8/17.
@@ -10,14 +11,14 @@
 
 public class MobicomMessageTemplate extends JsonMarker {
 
-    private boolean isEnabled;
+    private boolean isEnabled = false;
     private String backgroundColor;
     private String borderColor;
     private String textColor;
     private int cornerRadius;
     private boolean sendMessageOnClick;
     private boolean hideOnSend = false;
-    private ArrayList<String> messageList;
+    private Map<String, String> messageList;
     private MessageContentItem textMessageList;
     private MessageContentItem imageMessageList;
     private MessageContentItem videoMessageList;
@@ -105,11 +106,11 @@ public boolean getHideOnSend() {
         return hideOnSend;
     }
 
-    public ArrayList<String> getMessages() {
+    public Map<String, String> getMessages() {
         return messageList;
     }
 
-    public void setMessages(ArrayList<String> messages) {
+    public void setMessages(Map<String, String> messages) {
         this.messageList = messages;
     }
 
@@ -141,7 +142,7 @@ public void setSendMessageOnClick(boolean sendMessageOnClick) {
         private boolean showOnSenderSide;
         private boolean showOnReceiverSide;
         private boolean sendMessageOnClick;
-        private ArrayList<String> messageList;
+        private Map<String, String> messageList;
 
         public boolean isShowOnSenderSide() {
             return showOnSenderSide;
@@ -167,11 +168,11 @@ public void setSendMessageOnClick(boolean sendMessageOnClick) {
             this.sendMessageOnClick = sendMessageOnClick;
         }
 
-        public ArrayList<String> getMessageList() {
+        public Map<String, String> getMessageList() {
             return messageList;
         }
 
-        public void setMessageList(ArrayList<String> messageList) {
+        public void setMessageList(Map<String, String> messageList) {
             this.messageList = messageList;
         }
     }
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/ChannelInfoActivity.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/ChannelInfoActivity.java
index c4dbbfc8..c3351388 100755
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/ChannelInfoActivity.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/ChannelInfoActivity.java
@@ -51,6 +51,7 @@
 import com.applozic.mobicomkit.contact.AppContactService;
 import com.applozic.mobicomkit.contact.BaseContactService;
 import com.applozic.mobicomkit.feed.ApiResponse;
+import com.applozic.mobicomkit.feed.ChannelUsersFeed;
 import com.applozic.mobicomkit.feed.ErrorResponseFeed;
 import com.applozic.mobicomkit.feed.GroupInfoUpdate;
 import com.applozic.mobicomkit.feed.RegisteredUsersApiResponse;
@@ -72,6 +73,7 @@
 
 import java.io.File;
 import java.io.UnsupportedEncodingException;
+import java.util.ArrayList;
 import java.util.List;
 
 import de.hdodenhof.circleimageview.CircleImageView;
@@ -255,7 +257,7 @@ public void onClick(View v) {
     protected void onPause() {
         super.onPause();
         LocalBroadcastManager.getInstance(this).unregisterReceiver(mobiComKitBroadcastReceiver);
-        if(refreshBroadcast != null){
+        if (refreshBroadcast != null) {
             LocalBroadcastManager.getInstance(this).unregisterReceiver(refreshBroadcast);
         }
         BroadcastService.currentInfoId = null;
@@ -328,6 +330,22 @@ public boolean onContextItemSelected(MenuItem item) {
             case 1:
                 removeChannelUser(channel, channelUserMapper);
                 break;
+            case 2:
+                if (Utils.isInternetAvailable(getApplicationContext())) {
+                    GroupInfoUpdate groupInfoUpdate = new GroupInfoUpdate(channelUserMapper.getKey());
+                    List<ChannelUsersFeed> channelUsersFeedList = new ArrayList<>();
+                    ChannelUsersFeed channelUsersFeed = new ChannelUsersFeed();
+                    channelUsersFeed.setUserId(channelUserMapper.getUserKey());
+                    channelUsersFeed.setRole(1);
+                    channelUsersFeedList.add(channelUsersFeed);
+                    groupInfoUpdate.setUsers(channelUsersFeedList);
+                    new ChannelUserRoleAsyncTask(channelUserMapper, groupInfoUpdate, this).execute();
+                } else {
+                    Toast toast = Toast.makeText(this, getString(R.string.you_dont_have_any_network_access_info), Toast.LENGTH_SHORT);
+                    toast.setGravity(Gravity.CENTER, 0, 0);
+                    toast.show();
+                }
+                break;
             default:
                 return super.onContextItemSelected(item);
         }
@@ -339,7 +357,12 @@ public boolean onContextItemSelected(MenuItem item) {
     @Override
     public boolean onCreateOptionsMenu(Menu menu) {
         getMenuInflater().inflate(R.menu.channel_menu_option, menu);
-        if (alCustomizationSettings.isHideGroupAddMembersButton() || !ChannelUtils.isAdminUserId(userPreference.getUserId(), channel)) {
+        if (channel == null) {
+            return true;
+        }
+
+        ChannelUserMapper loggedInUserMapper = ChannelService.getInstance(this).getChannelUserMapperByUserId(channel.getKey(), MobiComUserPreference.getInstance(ChannelInfoActivity.this).getUserId());
+        if (alCustomizationSettings.isHideGroupAddMembersButton() || loggedInUserMapper != null && ChannelUserMapper.UserRole.MEMBER.getValue().equals(loggedInUserMapper.getRole()) || (!ChannelUtils.isAdminUserId(userPreference.getUserId(), channel) && loggedInUserMapper != null && Integer.valueOf(0).equals(loggedInUserMapper.getRole()))) {
             menu.removeItem(R.id.add_member_to_channel);
         }
         if (alCustomizationSettings.isHideGroupNameUpdateButton() || channel.isBroadcastMessage()) {
@@ -360,13 +383,24 @@ public void onCreateContextMenu(ContextMenu menu, View v, ContextMenu.ContextMen
             return;
         }
         boolean isHideRemove = alCustomizationSettings.isHideGroupRemoveMemberOption();
+        ChannelUserMapper loggedInUserMapper = ChannelService.getInstance(this).getChannelUserMapperByUserId(channelUserMapper.getKey(), MobiComUserPreference.getInstance(ChannelInfoActivity.this).getUserId());
         String[] menuItems = getResources().getStringArray(R.array.channel_users_menu_option);
         Contact contact = baseContactService.getContactById(channelUserMapper.getUserKey());
         for (int i = 0; i < menuItems.length; i++) {
-            if (menuItems[i].equals(getString(R.string.remove_member)) && (isHideRemove || !isUserPresent || !ChannelUtils.isAdminUserId(userPreference.getUserId(), channel))) {
+            if (menuItems[i].equals(getString(R.string.make_admin_text_info)) && loggedInUserMapper != null && ChannelUserMapper.UserRole.MEMBER.getValue().equals(loggedInUserMapper.getRole())) {
+                continue;
+            }
+            if (menuItems[i].equals(getString(R.string.remove_member)) && (isHideRemove || !isUserPresent || !ChannelUtils.isAdminUserId(userPreference.getUserId(), channel) && loggedInUserMapper != null && Integer.valueOf(0).equals(loggedInUserMapper.getRole()) || loggedInUserMapper != null && ChannelUserMapper.UserRole.MEMBER.getValue().equals(loggedInUserMapper.getRole()))) {
                 continue;
             }
-            menu.add(Menu.NONE, i, i, menuItems[i] + " " + contact.getDisplayName());
+            if (menuItems[i].equals(getString(R.string.make_admin_text_info)) && (!isUserPresent || ChannelUserMapper.UserRole.ADMIN.getValue().equals(channelUserMapper.getRole()))) {
+                continue;
+            }
+            if (menuItems[i].equals(getString(R.string.make_admin_text_info))) {
+                menu.add(Menu.NONE, i, i, menuItems[i]);
+            } else {
+                menu.add(Menu.NONE, i, i, menuItems[i] + " " + contact.getDisplayName());
+            }
         }
     }
 
@@ -381,7 +415,7 @@ public boolean onOptionsItemSelected(MenuItem item) {
         if (id == R.id.add_member_to_channel) {
             if (isUserPresent) {
                 Utils.toggleSoftKeyBoard(ChannelInfoActivity.this, true);
-                if (alCustomizationSettings.getTotalRegisteredUserToFetch() > 0 && (alCustomizationSettings.isRegisteredUserContactListCall() || ApplozicSetting.getInstance(this).isRegisteredUsersContactCall())&& !userPreference.getWasContactListServerCallAlreadyDone()) {
+                if (alCustomizationSettings.getTotalRegisteredUserToFetch() > 0 && (alCustomizationSettings.isRegisteredUserContactListCall() || ApplozicSetting.getInstance(this).isRegisteredUsersContactCall()) && !userPreference.getWasContactListServerCallAlreadyDone()) {
                     processLoadRegisteredUsers();
                 } else {
                     Intent addMemberIntent = new Intent(ChannelInfoActivity.this, ContactSelectionActivity.class);
@@ -619,7 +653,7 @@ public View getView(int position, View convertView, ViewGroup parent) {
             } else {
                 holder.displayName.setText(contact.getDisplayName());
             }
-            if (ChannelUtils.isAdminUserId(contact.getUserId(), channel)) {
+            if (ChannelUtils.isAdminUserId(channelUserMapper.getUserKey(), channel) && Integer.valueOf(0).equals(channelUserMapper.getRole()) || ChannelUserMapper.UserRole.ADMIN.getValue().equals(channelUserMapper.getRole())) {
                 holder.adminTextView.setVisibility(View.VISIBLE);
             } else {
                 holder.adminTextView.setVisibility(View.GONE);
@@ -945,4 +979,65 @@ public void onReceive(Context context, Intent intent) {
         }
     }
 
+    public class ChannelUserRoleAsyncTask extends AsyncTask<Void, Integer, Long> {
+        private ChannelService channelService;
+        private ProgressDialog progressDialog;
+        private Context context;
+        ChannelUserMapper channelUserMapper;
+        String response;
+        GroupInfoUpdate groupInfoUpdate;
+
+        public ChannelUserRoleAsyncTask(ChannelUserMapper channelUserMapper, GroupInfoUpdate groupInfoUpdate, Context context) {
+            this.channelUserMapper = channelUserMapper;
+            this.context = context;
+            this.groupInfoUpdate = groupInfoUpdate;
+            this.channelService = ChannelService.getInstance(context);
+
+        }
+
+        @Override
+        protected void onPreExecute() {
+            super.onPreExecute();
+            progressDialog = ProgressDialog.show(context, "",
+                    context.getString(R.string.please_wait_info), true);
+        }
+
+        @Override
+        protected Long doInBackground(Void... params) {
+            if (groupInfoUpdate != null) {
+                response = channelService.updateChannel(groupInfoUpdate);
+                if (!TextUtils.isEmpty(response) && MobiComKitConstants.SUCCESS.equals(response)) {
+                    for (ChannelUsersFeed channelUsersFeed : groupInfoUpdate.getUsers()) {
+                        channelUserMapper.setRole(channelUsersFeed.getRole());
+                        channelService.updateRoleInChannelUserMapper(groupInfoUpdate.getGroupId(), channelUserMapper.getUserKey(), channelUsersFeed.getRole());
+                    }
+                }
+            }
+            return null;
+        }
+
+        @Override
+        protected void onPostExecute(Long aLong) {
+            super.onPostExecute(aLong);
+            if (progressDialog != null && progressDialog.isShowing()) {
+                progressDialog.dismiss();
+            }
+            if (!TextUtils.isEmpty(response) && MobiComKitConstants.SUCCESS.equals(response)) {
+                if (channelUserMapper != null && channelUserMapperList != null) {
+                    try {
+                        int index = channelUserMapperList.indexOf(channelUserMapper);
+                        channelUserMapperList.remove(channelUserMapper);
+                        channelUserMapperList.add(index, channelUserMapper);
+                        contactsAdapter.notifyDataSetChanged();
+                    } catch (Exception e) {
+
+                    }
+
+                }
+            }
+
+        }
+
+    }
+
 }
\ No newline at end of file
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/adapter/MobicomMessageTemplateAdapter.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/adapter/MobicomMessageTemplateAdapter.java
index 814dc26e..cf51b1b7 100644
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/adapter/MobicomMessageTemplateAdapter.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/adapter/MobicomMessageTemplateAdapter.java
@@ -13,7 +13,9 @@
 import com.applozic.mobicomkit.uiwidgets.R;
 import com.applozic.mobicomkit.uiwidgets.conversation.MobicomMessageTemplate;
 
+import java.util.ArrayList;
 import java.util.List;
+import java.util.Map;
 
 /**
  * Created by reytum on 1/8/17.
@@ -24,10 +26,12 @@
     private MobicomMessageTemplate messageTemplate;
     private MessageTemplateDataListener listener;
     private List<String> messageList;
+    private Map<String, String> messageMap;
 
     public MobicomMessageTemplateAdapter(MobicomMessageTemplate messageTemplate) {
         this.messageTemplate = messageTemplate;
-        this.messageList = messageTemplate.getMessages();
+        this.messageList = new ArrayList<>(messageTemplate.getMessages().keySet());
+        this.messageMap = messageTemplate.getMessages();
     }
 
     @Override
@@ -46,7 +50,7 @@ public void onBindViewHolder(ViewHolder holder, final int position) {
         holder.messageText.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
-                listener.onItemSelected(messageList.get(position));
+                listener.onItemSelected(messageMap.get(messageList.get(position)));
             }
         });
     }
@@ -56,8 +60,9 @@ public int getItemCount() {
         return messageList.size();
     }
 
-    public void setMessageList(List<String> messageList) {
-        this.messageList = messageList;
+    public void setMessageList(Map<String, String> messageList) {
+        this.messageMap = messageList;
+        this.messageList = new ArrayList<>(messageList.keySet());
     }
 
     public class ViewHolder extends RecyclerView.ViewHolder {
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/fragment/MobiComConversationFragment.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/fragment/MobiComConversationFragment.java
index 41f11522..307c6d83 100755
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/fragment/MobiComConversationFragment.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/fragment/MobiComConversationFragment.java
@@ -592,7 +592,7 @@ public void afterTextChanged(Editable s) {
                         intent.putExtra(ApplozicMqttIntentService.CHANNEL, channel);
                         intent.putExtra(ApplozicMqttIntentService.CONTACT, contact);
                         intent.putExtra(ApplozicMqttIntentService.TYPING, typingStarted);
-                        ApplozicMqttIntentService.enqueueWork(getActivity(),intent);
+                        ApplozicMqttIntentService.enqueueWork(getActivity(), intent);
                     } else if (s.toString().trim().length() == 0 && typingStarted) {
                         //Log.i(TAG, "typing stopped event...");
                         typingStarted = false;
@@ -601,7 +601,7 @@ public void afterTextChanged(Editable s) {
                         intent.putExtra(ApplozicMqttIntentService.CHANNEL, channel);
                         intent.putExtra(ApplozicMqttIntentService.CONTACT, contact);
                         intent.putExtra(ApplozicMqttIntentService.TYPING, typingStarted);
-                        ApplozicMqttIntentService.enqueueWork(getActivity(),intent);
+                        ApplozicMqttIntentService.enqueueWork(getActivity(), intent);
                     }
 
                 } catch (Exception e) {
@@ -638,7 +638,7 @@ public void onFocusChange(View v, boolean hasFocus) {
                         intent.putExtra(ApplozicMqttIntentService.CHANNEL, channel);
                         intent.putExtra(ApplozicMqttIntentService.CONTACT, contact);
                         intent.putExtra(ApplozicMqttIntentService.TYPING, typingStarted);
-                        ApplozicMqttIntentService.enqueueWork(getActivity(),intent);
+                        ApplozicMqttIntentService.enqueueWork(getActivity(), intent);
 
                     }
                     emoticonsFrameLayout.setVisibility(View.GONE);
@@ -793,7 +793,8 @@ public void onClick(View v) {
             MobicomMessageTemplateAdapter.MessageTemplateDataListener listener = new MobicomMessageTemplateAdapter.MessageTemplateDataListener() {
                 @Override
                 public void onItemSelected(String message) {
-                    final Message lastMessage = messageList.get(messageList.size() - 1);
+
+                    final Message lastMessage = !messageList.isEmpty() ? messageList.get(messageList.size() - 1) : null;
 
                     if ((messageTemplate.getTextMessageList() != null && !messageTemplate.getTextMessageList().getMessageList().isEmpty() && messageTemplate.getTextMessageList().isSendMessageOnClick() && "text".equals(getMessageType(lastMessage)))
                             || (messageTemplate.getImageMessageList() != null && !messageTemplate.getImageMessageList().getMessageList().isEmpty() && messageTemplate.getImageMessageList().isSendMessageOnClick() && "image".equals(getMessageType(lastMessage)))
@@ -809,7 +810,7 @@ public void onItemSelected(String message) {
                         AlMessageMetadataUpdateTask.MessageMetadataListener listener1 = new AlMessageMetadataUpdateTask.MessageMetadataListener() {
                             @Override
                             public void onSuccess(Context context, String message) {
-                                templateAdapter.setMessageList(new ArrayList<String>());
+                                templateAdapter.setMessageList(new HashMap<String, String>());
                                 templateAdapter.notifyDataSetChanged();
                             }
 
@@ -818,10 +819,12 @@ public void onFailure(Context context, String error) {
                             }
                         };
 
-                        Map<String, String> metadata = lastMessage.getMetadata();
-                        metadata.put("isDoneWithClicking", "true");
-                        lastMessage.setMetadata(metadata);
-                        new AlMessageMetadataUpdateTask(getContext(), lastMessage.getKeyString(), lastMessage.getMetadata(), listener1).execute();
+                        if (lastMessage != null) {
+                            Map<String, String> metadata = lastMessage.getMetadata();
+                            metadata.put("isDoneWithClicking", "true");
+                            lastMessage.setMetadata(metadata);
+                            new AlMessageMetadataUpdateTask(getContext(), lastMessage.getKeyString(), lastMessage.getMetadata(), listener1).execute();
+                        }
                     }
 
                     final Intent intent = new Intent();
@@ -831,6 +834,7 @@ public void onFailure(Context context, String error) {
                     getActivity().sendBroadcast(intent);
                 }
             };
+
             templateAdapter.setOnItemSelected(listener);
             LinearLayoutManager horizontalLayoutManagaer
                     = new LinearLayoutManager(getContext(), LinearLayoutManager.HORIZONTAL, false);
@@ -1138,7 +1142,7 @@ public void updateMessageMetadata(String keyString) {
             messageList.get(i).setMetadata(messageDatabaseService.getMessage(keyString).getMetadata());
             conversationAdapter.notifyDataSetChanged();
             if (messageList.get(messageList.size() - 1).getMetadata().containsKey("isDoneWithClicking")) {
-                templateAdapter.setMessageList(new ArrayList<String>());
+                templateAdapter.setMessageList(new HashMap<String, String>());
                 templateAdapter.notifyDataSetChanged();
             }
         }
@@ -1165,7 +1169,7 @@ public void run() {
                             intent.putExtra(UserIntentService.SINGLE_MESSAGE_READ, true);
                             intent.putExtra(UserIntentService.CONTACT, contact);
                             intent.putExtra(UserIntentService.CHANNEL, channel);
-                            UserIntentService.enqueueWork(getActivity(),intent);
+                            UserIntentService.enqueueWork(getActivity(), intent);
                         } catch (Exception e) {
                             Utils.printLog(getContext(), TAG, "Got exception while read");
                         }
@@ -1437,7 +1441,7 @@ public void loadConversation(final Contact contact, final Channel channel, final
         if (ApplozicClient.getInstance(getActivity()).isNotificationStacking()) {
             NotificationManagerCompat nMgr = NotificationManagerCompat.from(getActivity());
             nMgr.cancel(NotificationService.NOTIFICATION_ID);
-        }else {
+        } else {
             if (contact != null) {
                 if (!TextUtils.isEmpty(contact.getContactIds())) {
                     NotificationManager notificationManager =
@@ -1496,7 +1500,7 @@ public void loadConversation(final Contact contact, final Channel channel, final
         if (contact != null) {
             Intent intent = new Intent(getActivity(), UserIntentService.class);
             intent.putExtra(UserIntentService.USER_ID, contact.getUserId());
-            UserIntentService.enqueueWork(getActivity(),intent);
+            UserIntentService.enqueueWork(getActivity(), intent);
         }
 
         if (channel != null) {
@@ -1505,7 +1509,7 @@ public void loadConversation(final Contact contact, final Channel channel, final
                 if (!TextUtils.isEmpty(userId)) {
                     Intent intent = new Intent(getActivity(), UserIntentService.class);
                     intent.putExtra(UserIntentService.USER_ID, userId);
-                    UserIntentService.enqueueWork(getActivity(),intent);
+                    UserIntentService.enqueueWork(getActivity(), intent);
                 }
             } else {
                 updateChannelSubTitle();
@@ -1652,6 +1656,11 @@ public Channel getChannel() {
 
     protected void setChannel(Channel channel) {
         this.channel = channel;
+        if (channel != null && !ChannelService.getInstance(getContext()).isUserAlreadyPresentInChannel(channel.getKey(), MobiComUserPreference.getInstance(getContext()).getUserId())
+                && messageTemplate != null && messageTemplate.isEnabled() && templateAdapter != null) {
+            templateAdapter.setMessageList(new HashMap<String, String>());
+            templateAdapter.notifyDataSetChanged();
+        }
     }
 
     public boolean isMsgForConversation(Message message) {
@@ -1676,8 +1685,8 @@ public boolean compareConversationId(Message message) {
 //    }
 
     public void updateUploadFailedStatus(final Message message) {
-        if(getActivity()  == null){
-           return;
+        if (getActivity() == null) {
+            return;
         }
         getActivity().runOnUiThread(new Runnable() {
             @Override
@@ -2430,13 +2439,13 @@ public void onPause() {
             intent.putExtra(ApplozicMqttIntentService.CHANNEL, channel);
             intent.putExtra(ApplozicMqttIntentService.CONTACT, contact);
             intent.putExtra(ApplozicMqttIntentService.TYPING, false);
-            ApplozicMqttIntentService.enqueueWork(getActivity(),intent);
+            ApplozicMqttIntentService.enqueueWork(getActivity(), intent);
             typingStarted = false;
         }
         Intent intent = new Intent(getActivity(), ApplozicMqttIntentService.class);
         intent.putExtra(ApplozicMqttIntentService.CHANNEL, channel);
         intent.putExtra(ApplozicMqttIntentService.UN_SUBSCRIBE_TO_TYPING, true);
-        ApplozicMqttIntentService.enqueueWork(getActivity(),intent);
+        ApplozicMqttIntentService.enqueueWork(getActivity(), intent);
         if (conversationAdapter != null) {
             conversationAdapter.contactImageLoader.setPauseWork(false);
         }
@@ -2719,7 +2728,7 @@ public void onResume() {
             Intent intent = new Intent(getActivity(), ApplozicMqttIntentService.class);
             intent.putExtra(ApplozicMqttIntentService.CHANNEL, channel);
             intent.putExtra(ApplozicMqttIntentService.SUBSCRIBE_TO_TYPING, true);
-            ApplozicMqttIntentService.enqueueWork(getActivity(),intent);
+            ApplozicMqttIntentService.enqueueWork(getActivity(), intent);
 
             if (downloadConversation != null) {
                 downloadConversation.cancel(true);
@@ -2804,6 +2813,11 @@ public void updateChannelTitleAndSubTitle() {
                 individualMessageSendLayout.setVisibility(View.GONE);
                 userNotAbleToChatLayout.setVisibility(VISIBLE);
                 userNotAbleToChatTextView.setText(R.string.group_has_been_deleted_text);
+                if (channel != null && !ChannelService.getInstance(getContext()).isUserAlreadyPresentInChannel(channel.getKey(), MobiComUserPreference.getInstance(getContext()).getUserId())
+                        && messageTemplate != null && messageTemplate.isEnabled() && templateAdapter != null) {
+                    templateAdapter.setMessageList(new HashMap<String, String>());
+                    templateAdapter.notifyDataSetChanged();
+                }
             } else {
                 if ((!ChannelService.getInstance(getActivity()).processIsUserPresentInChannel(channel.getKey())
                         && userNotAbleToChatLayout != null
@@ -2811,6 +2825,11 @@ public void updateChannelTitleAndSubTitle() {
 
                     individualMessageSendLayout.setVisibility(View.GONE);
                     userNotAbleToChatLayout.setVisibility(VISIBLE);
+                    if (channel != null && !ChannelService.getInstance(getContext()).isUserAlreadyPresentInChannel(channel.getKey(), MobiComUserPreference.getInstance(getContext()).getUserId())
+                            && messageTemplate != null && messageTemplate.isEnabled() && templateAdapter != null) {
+                        templateAdapter.setMessageList(new HashMap<String, String>());
+                        templateAdapter.notifyDataSetChanged();
+                    }
                 }
             }
 
@@ -2887,7 +2906,7 @@ public void onSuccess(ApiResponse apiResponse) {
                     Intent intent = new Intent(getActivity(), ApplozicMqttIntentService.class);
                     intent.putExtra(ApplozicMqttIntentService.CONTACT, contact);
                     intent.putExtra(ApplozicMqttIntentService.STOP_TYPING, true);
-                    ApplozicMqttIntentService.enqueueWork(getActivity(),intent);
+                    ApplozicMqttIntentService.enqueueWork(getActivity(), intent);
 
                 }
                 menu.findItem(R.id.userBlock).setVisible(!block);
@@ -3130,8 +3149,8 @@ public void createTemplateMessages() {
             }
 
             if (lastMessage.getMetadata() != null && lastMessage.getMetadata().containsKey(MobiComKitConstants.TEMPLATE_MESSAGE_LIST)) {
-                String[] messageArray = (String[]) GsonUtils.getObjectFromJson(lastMessage.getMetadata().get(MobiComKitConstants.TEMPLATE_MESSAGE_LIST), String[].class);
-                templateAdapter.setMessageList(Arrays.asList(messageArray));
+                Map<String, String> messageArray = (Map<String, String>) GsonUtils.getObjectFromJson(lastMessage.getMetadata().get(MobiComKitConstants.TEMPLATE_MESSAGE_LIST), Map.class);
+                templateAdapter.setMessageList(messageArray);
                 templateAdapter.notifyDataSetChanged();
                 //createMessageTemplate(Arrays.asList(messageArray));
             } else {
diff --git a/mobicomkitui/src/main/res/values/mobicom_array.xml b/mobicomkitui/src/main/res/values/mobicom_array.xml
index 994f39ec..25894c3c 100755
--- a/mobicomkitui/src/main/res/values/mobicom_array.xml
+++ b/mobicomkitui/src/main/res/values/mobicom_array.xml
@@ -43,6 +43,7 @@
     <string-array name="channel_users_menu_option">
         <item>Message</item>
         <item>Remove</item>
+        <item>Make group admin</item>
     </string-array>
 
     <!--Multimedia options -->
diff --git a/mobicommons/build.gradle b/mobicommons/build.gradle
index 676a9125..b816fd8d 100755
--- a/mobicommons/build.gradle
+++ b/mobicommons/build.gradle
@@ -8,7 +8,7 @@ android {
         minSdkVersion 14
         targetSdkVersion 27
         versionCode 1
-        versionName "5.4"
+        versionName "5.5"
     }
     buildTypes {
         release {
@@ -45,7 +45,7 @@ dependencies {
     artifact = 'mobicommons'
 
     libraryDescription = 'Applozic MobiFramekwork mobicommons library for utilities'
-    libraryVersion = '5.4'
+    libraryVersion = '5.5'
     developerId = 'devashish'
     developerName = 'Applozic'
     developerEmail = 'devashish.mamgain@gmail.com'
diff --git a/mobicommons/src/main/java/com/applozic/mobicommons/people/channel/ChannelUserMapper.java b/mobicommons/src/main/java/com/applozic/mobicommons/people/channel/ChannelUserMapper.java
index 6eb65e1e..1f356e72 100755
--- a/mobicommons/src/main/java/com/applozic/mobicommons/people/channel/ChannelUserMapper.java
+++ b/mobicommons/src/main/java/com/applozic/mobicommons/people/channel/ChannelUserMapper.java
@@ -2,8 +2,6 @@
 
 import com.applozic.mobicommons.json.JsonMarker;
 
-import java.io.Serializable;
-
 /**
  * Created by sunil on 28/12/15.
  */
@@ -13,6 +11,7 @@
     private String userKey;
     private short status;
     private int unreadCount;
+    private Integer role;
 
     public ChannelUserMapper() {
     }
@@ -60,12 +59,36 @@ public void setStatus(short status) {
         this.status = status;
     }
 
+    public Integer getRole() {
+        return role == null ?0:role;
+    }
+
+    public void setRole(Integer role) {
+        this.role = role;
+    }
+
+    public enum UserRole {
+        ADMIN(1),
+        MODERATOR(2),
+        MEMBER(3);
+        private Integer value;
+
+        UserRole(Integer value) {
+            this.value = value;
+        }
+        public Integer getValue() {
+            return value;
+        }
+    }
+
     @Override
     public String toString() {
         return "ChannelUserMapper{" +
                 "key=" + key +
                 ", userKey='" + userKey + '\'' +
                 ", status=" + status +
+                ", unreadCount=" + unreadCount +
+                ", role=" + role +
                 '}';
     }
 }
