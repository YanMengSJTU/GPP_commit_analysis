diff --git a/.github/ISSUE_TEMPLATE.md b/.github/ISSUE_TEMPLATE.md
new file mode 100644
index 00000000..43dc9b07
--- /dev/null
+++ b/.github/ISSUE_TEMPLATE.md
@@ -0,0 +1,41 @@
+<!---
+
+We LOVE to help with any issues or bugs you have!
+
+**Feature Request**: Just fill in the first two sections below.
+
+**Bugs**: To help you as fast as possible with an issue please describe your issue
+and the steps you have taken to reproduce it in as many details as possible.
+
+Thanks for helping us help you! :-)
+-->
+
+## Goals
+<!--- What do you want to achieve? -->
+
+## Expected Results
+<!--- What did you expect to happen? -->
+
+## Actual Results
+<!--- What happened instead?
+e.g. the stack trace of a crash
+-->
+
+## Steps to Reproduce
+<!--- What are steps we can follow to reproduce this issue? -->
+
+## Code Sample
+<!---
+Provide a code sample or test case that highlights the issue.
+For larger code samples, links to external gists/repositories are preferred.
+Android studio sample project that we can compile ourselves are ideal!
+-->
+
+Applozic Android SDK version: ?
+<!--- You can get the version from gradle Dependency or from module build.gradle file versionName -->
+
+Android device: ?
+
+Android OS version: ?
+
+Dependencies used with version: ?
\ No newline at end of file
diff --git a/ADVANCED-DOC.md b/ADVANCED-DOC.md
index ce31c84c..5157bac4 100644
--- a/ADVANCED-DOC.md
+++ b/ADVANCED-DOC.md
@@ -33,6 +33,42 @@ Example
 new MobiComConversationService(activity).sendMessage(new Message("contact@applozic.com", "hello test"));         
 ```
 
+#### Send message with metadata
+
+You can send extra information along with message text as meta-data. These key value pair can be used to do some extra processing or keep information about messages.
+
+```
+        MobiComUserPreference userPreferences = MobiComUserPreference.getInstance(context);
+        Message message = new Message();
+        //Note:This is only for sending a message to Group then pass the channelKey
+        message.setGroupId(channelKey);  
+        
+        //Note:This is only for sending a message to User then pass the receiver UserId 
+        message.setTo(receiverUserId); 
+        message.setContactIds(receiverUserId); 
+        
+        message.setRead(Boolean.TRUE);
+        message.setStoreOnDevice(Boolean.TRUE);
+        message.setCreatedAtTime(System.currentTimeMillis() + userPreferences.getDeviceTimeOffset());
+        message.setSendToDevice(Boolean.FALSE);
+        message.setType(Message.MessageType.MT_OUTBOX.getValue());
+        message.setMessage(messageToSend); //Message to send
+        message.setDeviceKeyString(userPreferences.getDeviceKeyString());
+        message.setSource(Message.Source.MT_MOBILE_APP.getValue());
+        
+       //Messsage metadata map 
+        Map<String,String> messageMetaDataMap = new HashMap<>();
+        messageMetaDataMap.put("key1","value1");
+        messageMetaDataMap.put("key2","value2");
+        message.setMetadata(messageMetaDataMap);
+        
+        //Method for sending a message 
+        new MobiComConversationService(context).sendMessage(message);
+
+```
+
+
+
 
 #### Messages list 
 
@@ -64,7 +100,7 @@ Code
 
 #### Unread Count
 
-i)To get the unread count of individual conatct pass the userId
+i)To get the unread count of individual contact pass the userId
 
 Code
 
@@ -115,7 +151,7 @@ The below methods are for creating contacts to be stored locally on the user's d
 You can create the contact list in two easy steps by using AppContactService.java api. 
 Sample method **buildContactData()** for adding contacts is present in sample app MainActivity.java.
 
-#####Step 1: Creating contact   
+##### Step 1: Creating contact   
 
 Create
 ```
@@ -138,7 +174,7 @@ Example :
     contact.setEmailId("github@applozic.com");                
 ```
 
-#####Step 2: Save contact
+##### Step 2: Save contact
 
 Save the contact using AppContactService.java add() method.
  
@@ -150,7 +186,7 @@ Save the contact using AppContactService.java add() method.
 
 
 
-#####AppContactService.Java at a glance
+##### AppContactService.Java at a glance
 
 
 AppContactService.java provides methods you need to add, delete and update contacts.
@@ -205,18 +241,7 @@ startActivity(intent);
 ```
 
 
-Enable Group Messaging for a user
-```
-ApplozicSetting.getInstance(context).showStartNewGroupButton();
-```
-
-Disable Group Messaging for a user
-```
-ApplozicSetting.getInstance(context).hideStartNewGroupButton();
-```
-
-
-#####1) Create Group
+##### 1) Create Group
 
  Create a group with a specific group type 
  
@@ -268,11 +293,12 @@ Code
        List<String> channelMembersList =  new ArrayList<String>();
        channelMembersList.add("user1");
        channelMembersList.add("user2");
-       channelMembersList.add("user3");
+       channelMembersList.add("user3");//Note:while creating group exclude logged in userId from list
        ChannelInfo channelInfo  = new ChannelInfo("Group name",channelMembersList);
        channelInfo.setType(Channel.GroupType.PUBLIC.getValue().intValue()); //group type
        //channelInfo.setImageUrl(""); //pass group image link URL
        //channelInfo.setChannelMetadata(channelMetadata); //Optional option for setting group meta data 
+       //channelInfo.setClientGroupId(clientGroupId); //Optional if you have your own groupId then you can pass here
         Channel channel = ChannelService.getInstance(context).createChannel(channelInfo);
 
  ```
@@ -311,7 +337,7 @@ Code
 | userId | Unique identifier of the user |
 
  
-#####3) Remove Member from Group
+##### 3) Remove Member from Group
  
 Import  
 ```
@@ -346,7 +372,7 @@ Code
   __NOTE:__ Only admin can remove member from the group/channel.
   
  
-#####4) Leave Group
+##### 4) Leave Group
  
 Import
 ```
@@ -379,7 +405,7 @@ Code
  
  __Note:__ This is only for logged in user who want's to leave from group
  
-#####5) Change Group Name
+##### 5) Change Group Name
 
 Import
 
@@ -497,9 +523,9 @@ Steps to create Context based chat
 ##### Step 2 : Create Async task and Starting Conversation chat
 
 ```
-   ApplzoicConversationCreateTask applzoicConversationCreateTask = null;
+   ApplozicConversationCreateTask applozicConversationCreateTask = null;
 
-   ApplzoicConversationCreateTask.ConversationCreateListener conversationCreateListener =  new ApplzoicConversationCreateTask.ConversationCreateListener() {
+   ApplozicConversationCreateTask.ConversationCreateListener conversationCreateListener =  new ApplozicConversationCreateTask.ConversationCreateListener() {
             @Override
             public void onSuccess(Integer conversationId, Context context) {
 
@@ -520,7 +546,62 @@ Steps to create Context based chat
             }
         };
     Conversation conversation = buildConversation(); //From Step 1 
-applzoicConversationCreateTask = new ApplzoicConversationCreateTask(context,conversationCreateListener,conversation);
-   applzoicConversationCreateTask.execute((Void)null);
+applozicConversationCreateTask = new ApplozicConversationCreateTask(context,conversationCreateListener,conversation);
+   applozicConversationCreateTask.execute((Void)null);
  
 ```
+#### Audio/Video Call setup
+
+Once you are done with [normal chat integration](https://www.applozic.com/docs/android-chat-sdk.html#overview), below steps you need to follow to enable audio/video call.
+
+a) Enable audio/video feature: 
+
+while doing user registration, you should set audio/video feature in user detail.
+
+```
+List<String> featureList =  new ArrayList<>();
+featureList.add(User.Features.IP_AUDIO_CALL.getValue());// FOR AUDIO
+featureList.add(User.Features.IP_VIDEO_CALL.getValue());// FOR VIDEO
+user.setFeatures(featureList); // ADD FEATURES
+```
+
+b) Add setting for audio/video handler class:
+
+onSuccess of UserLoginTask, you need to set below handlers in settings.
+
+```
+  ApplozicClient.getInstance(context).setHandleDial(true).setIPCallEnabled(true);
+  Map<ApplozicSetting.RequestCode, String> activityCallbacks = new HashMap<ApplozicSetting.RequestCode, String>();
+  activityCallbacks.put(ApplozicSetting.RequestCode.AUDIO_CALL, AudioCallActivityV2.class.getName());
+  activityCallbacks.put(ApplozicSetting.RequestCode.VIDEO_CALL, VideoActivity.class.getName());
+  ApplozicSetting.getInstance(context).setActivityCallbacks(activityCallbacks);
+  
+```
+
+c) Add these activity in your AndroidManifest.xml.
+
+```
+<activity android:name="com.applozic.audiovideo.activity.AudioCallActivityV2"
+            android:configChanges="keyboardHidden|orientation|screenSize"
+            android:exported="true"
+            android:launchMode="singleTop"
+            android:theme="@style/Applozic_FullScreen_Theme"/>
+
+        <activity
+            android:name="com.applozic.audiovideo.activity.CallActivity"
+            android:configChanges="orientation|keyboardHidden|screenSize"
+            android:label="@string/app_name"
+            android:launchMode="singleTop"
+            android:theme="@style/Applozic_FullScreen_Theme"/>
+
+        <activity
+            android:name="com.applozic.audiovideo.activity.VideoActivity"
+            android:launchMode="singleTop"
+            android:configChanges="keyboardHidden|orientation|screenSize"
+            android:exported="true"
+            android:theme="@style/Applozic_FullScreen_Theme">
+        </activity>
+```
+
+
+
diff --git a/CHANGELOG.md b/CHANGELOG.md
index 7dd5b989..0939f77a 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,7 +1,142 @@
 
-##Changelog
+## Changelog
+
+**Version 4.78**  - Thursday, 2 March 2017
+   
+  - Group of two support 
+  - Group member limit in group create and group member add
+  - Launch one to one chat in group member name click or profile click 
+  - Sending meta data in message by adding settings 
+  - Group and profile image upload bug fix
+  - Other bug fixes 
+ 
+
+ **Version 4.76**  - Friday,10 February 2017
+   
+  - Android N contact sharing bug fix  .
+ 
+
+ **Version 4.75**  - Wednesday,8 February 2017
+   
+  - Group Delete support: deleted group will be disabled.
+ 
+ **Version 4.74**  - Sunday, 5 February 2017
+   
+  - Support for version 7.1 
+  - Support for support-library version 25.1.0
+  - Chat not syncing bug fix for android 7.1
+  
+ **Version 4.73**  - Sunday, 5 January 2017
+ 
+ - Support for version 7.0 
+ - Group mute
+ 
+   
+ **Version 4.71**  - Thursday, 5 January 2017
+ 
+ - Attachments options settings 
+ - Restricted words settings 
+ 
+  
+   
+ **Version 4.64**  - Friday, 18 November 2016
+   
+  Group info members context menu
+ 
+  Smart messaging with message meta data : Push notification,Archive
+  
+  Group silent notifications 
+
+  Bug fixes and Improvements
+  
+### Steps for upgrading from 4.63 to 4.64
+
+
+**Step 1: Add the following in your build.gradle dependency**
+
+`compile 'com.applozic.communication.uiwidget:mobicomkitui:4.64'`
+
+
+**Version 4.63**  - Tuesday, 25 October 2016
+   
+  Broadcast messageing 
+  
+  Smart messaging with message meta data : Hidden messages
+
+  Bug fixes and Improvements
+
+
+### Steps for upgrading from 4.62 to 4.63
+
+
+**Step 1: Add the following in your Top-level/Proejct level build.gradle file change the version according to your app**:   
+
+ ```
+ext.googlePlayServicesVersion = '9.0.2'
+ext.supportLibraryVersion = '23.1.1'
+ ```
+
+**Step 2: Add the following in your build.gradle dependency**
+
+`compile 'com.applozic.communication.uiwidget:mobicomkitui:4.63'`
+
+
+ **Version 4.62**  - Tuesday, 11 October 2016
+
+  
+  Change in Settings config now added json file 
+  
+  Bug fixes and Improvements
+
+
+### Steps for upgrading from 4.61 to 4.62
 
 
+**Step 1: Add the following in your build.gradle dependency**
+
+`compile 'com.applozic.communication.uiwidget:mobicomkitui:4.62'`
+
+
+ **Version 4.61**  - wednesday, 5 October 2016
+
+   Contact list selection added search option ,UI change
+
+   Bug fixes and Improvements
+
+
+### Steps for upgrading from 4.60 to 4.61
+
+
+**Step 1: Add the following in your build.gradle dependency**
+
+`compile 'com.applozic.communication.uiwidget:mobicomkitui:4.61'`
+
+
+ **Version 4.60**  - Friday, 30 September 2016
+ 
+ Bug fixes and Improvements
+ 
+  
+### Steps for upgrading from 4.59 to 4.60
+
+
+**Step 1: Add the following in your build.gradle dependency**
+
+`compile 'com.applozic.communication.uiwidget:mobicomkitui:4.60'`
+
+ 
+ **Version 4.59**  - Saturday, 17 September 2016
+ 
+ Bug fixes and Improvements
+ 
+ 
+###  Steps for upgrading from 4.58 to 4.59
+
+**Step 1: Add the following in your build.gradle dependency**
+
+`compile 'com.applozic.communication.uiwidget:mobicomkitui:4.59'`
+ 
+
  **Version 4.58**  - Thursday, 15 September 2016
  
  Unread count bug fix
diff --git a/CUSTOMIZATION-DOC.md b/CUSTOMIZATION-DOC.md
index 5ce23641..2eb9785f 100644
--- a/CUSTOMIZATION-DOC.md
+++ b/CUSTOMIZATION-DOC.md
@@ -1,157 +1,76 @@
-#### Chat Bubble
 
-Add UI customization setting inside UserLoginTask "onSuccess" method
+Applozic provide easy settings to customise your ui themes color, pop-up messages etc. You need to follow below steps to enable/change these settings:
 
-Sent Message Chat Bubble Color
-
- ```
-ApplozicSetting.getInstance(context).setSentMessageBackgroundColor(int color); // accepts the R.color.name
- ```
- 
-Received Message Chat Bubble Color
-
- ```
-ApplozicSetting.getInstance(context).setReceivedMessageBackgroundColor(int color); // accepts the R.color.name
- ```
-
- Sent Message Chat Bubble Border Color
-
- ```
-ApplozicSetting.getInstance(context).setSentMessageBorderColor(int color); // accepts the R.color.name
- ```
+ **1**.Download applozic-settings.json file from here [Json file](https://github.com/AppLozic/Applozic-Android-SDK/tree/master/app/src/main/assets/applozic-settings.json)
  
-Received Message Chat Bubble Border Color
-
- ```
-ApplozicSetting.getInstance(context).setReceivedMessageBorderColor(int color); // accepts the R.color.name
- ```
-
-Sent Message Text color
-
- ```
-ApplozicSetting.getInstance(context).setSentMessageTextColor(int color); // accepts the R.color.name
- ```
- 
-Received Message Text Color
-
- ```
-ApplozicSetting.getInstance(context).setReceivedMessageTextColor(int color); // accepts the R.color.name
- ```
-
-
-Sent Contact Message Text color
-
- ```
-ApplozicSetting.getInstance(context).setSentContactMessageTextColor(int color); // accepts the R.color.name
- ```
- 
-Received Contact Message Text Color
-
- ```
-ApplozicSetting.getInstance(context).setReceivedContactMessageTextColor(int color); // accepts the R.color.name
- ```
- 
-Sent Message Hyper Link Text Color
-
- ```
-ApplozicSetting.getInstance(context).setSentMessageLinkTextColor(int color); // accepts the R.color.name
- ```
- 
- Received Message Hyper Link Text Color
-
- ```
-ApplozicSetting.getInstance(context).setReceivedMessageLinkTextColor(int color); // accepts the R.color.name
- ```
+ **2**.Create an assets directory in app-->main and paste that applozic-settings.json file in assets directory
  
- 
-#### Chat Background
-
-Chat Background Image or Color
-
- ```
-ApplozicSetting.getInstance(context).setChatBackgroundColorOrDrawableResource(int color); // accepts the R.color.name or  R.drawable.drawableName
- ```
- 
-Edit Text Background  Color Or DrawableResource 
-
- ```
-ApplozicSetting.getInstance(context).setEditTextBackgroundColorOrDrawableResource(int colorOrdrawableName); // accepts the R.color.name or  R.drawable.drawableName
- ```
-
-#### Send Message Layout
-
-Message EditText Text Color
-
- ```
-ApplozicSetting.getInstance(context).setMessageEditTextTextColor(int color); // accepts the R.color.name
- ```
-
-Message EditText Hint Color
-
- ```
-ApplozicSetting.getInstance(context).setMessageEditTextHintColor(int color); // accepts the R.color.name
- ```
-
-Attachment Icons Background Color
-
- ```
-ApplozicSetting.getInstance(context).setAttachmentIconsBackgroundColor(int color); // accepts the R.color.name
- ```
- 
- Send Button Background Color
- 
- ```
-  ApplozicSetting.getInstance(context).setSendButtonBackgroundColor(int color); // accepts the R.color.name
-  ```
-
-#### Online status
-
-Show/Hide Green Dot for Online
-
- ```
-ApplozicSetting.getInstance(context).showOnlineStatusInMasterList();
-ApplozicSetting.getInstance(context).hideOnlineStatusInMasterList();
- ```
-
-#### Group Messaging
+#### Applozic settings  Json Properites detail
 
-For Group Add Member Button Hide
 
-```
-ApplozicSetting.getInstance(context).setHideGroupAddButton(true);
-```
-For Group Exit Button Hide
 
-```
- ApplozicSetting.getInstance(context).setHideGroupExitButton(true);
- ```
- 
- For Group Name Change Button Hide
- 
- ```
- ApplozicSetting.getInstance(context).setHideGroupNameEditButton(true);
- ```
- 
- For  Group Member Remove Option Hide
- 
-  ```
- ApplozicSetting.getInstance(context).setHideGroupRemoveMemberOption(true);
-  ```
   
-#### 'Start New' button
-Show/hide 'Start New Conversation' Plus (+) Button 
- 
- ```
- ApplozicSetting.getInstance(context).showStartNewButton();
- ApplozicSetting.getInstance(context).hideStartNewButton();
+| Properites | Sample Value | Description |
+| ---------- | ------| ----------- |
+| sentMessageBackgroundColor | Color hex (#FF03A9F4) |  Sent message chat bubble color |
+| receivedMessageBackgroundColor| Color hex (#FFFFFFFF) | Received message chat bubble color |
+| sendButtonBackgroundColor | Color hex (#FF03A9F4) | Send button background color |
+| attachmentIconsBackgroundColor | Color hex (#FF03A9F4) |Attachment icons background color |
+| channelCustomMessageBgColor | Color hex (#cccccc) | Group add,remove,left message background color |
+| sentContactMessageTextColor | Color hex (#FFFFFFFF) | Sent contact message text color |
+| receivedContactMessageTextColor| Color hex (#000000)|Received contact message text color |
+| sentMessageTextColor | Color hex (#FFFFFFFF) | Sent message text color |
+| receivedMessageTextColor | Color hex (#000000) |  Received message text color |
+| messageEditTextTextColor | Color hex (#000000) | Edit text text color |
+| sentMessageLinkTextColor | Color hex (#5fba7d) |  Sent message hyper link text color |
+| receivedMessageLinkTextColor | Color hex (#FFFFFFFF) |  Received message hyper link text color |
+| messageEditTextHintTextColor | Color hex (#bdbdbd) | Edit text hint text color |
+| noConversationLabelTextColor | Color hex  (#000000) | No Conversation Label text color |
+| conversationDateTextColor | Color hex (#333333) | Message data text color |
+| conversationDayTextColor | Color hex  (#333333) | Message day text color |
+| messageTimeTextColor | Color hex  (#838b83) |    Message time text color |
+| channelCustomMessageTextColor | Color hex (#666666) |  Group add,remove,left message text color |
+| sentMessageBorderColor | Color hex  (#FF03A9F4) |Sent Message chat bubble border color |
+| receivedMessageBorderColor | Color hex  (#FFFFFFFF )| Received message chat bubble border color |
+| channelCustomMessageBorderColor | Color hex  (#cccccc) |Group add,remove,left message border color |
+| noConversationLabel| String | No  conversation text label |
+| noSearchFoundForChatMessages | String | No search found text label |
+| totalRegisteredUserToFetch | int (Prefered 100)| Total Registerer User to get from server for conatct list |
+| maxAttachmentAllowed | int (Prefered 10) | Maximum attachment allowed to attch while sending Multiple attchemnets |
+| locationShareViaMap | true/false | Location share activity |
+| startNewFloatingButton | true/false |Start New Conversation Plus (+) FloatingActionButton |
+| startNewButton | true/false | Start New Conversation Plus (+) Button |
+| onlineStatusMasterList | true/false | Online status Green Dot in Chat list |
+| startNewGroup | true/false | Create group  option | 
+| inviteFriendsInContactActivity | true/false | Invite friends button in Conatct list when no contcats are there |
+| registeredUserContactListCall | true/false | Registered users contact list call |
+| createAnyContact | true/false | Launch a chat with any user in contact list | 
+| userProfileFragment |  true/false | Show other user profile on click of App bar|
+| messageSearchOption | true/false | Message search option |
+| hideGroupAddMembersButton | true/false | Hide the add memeber option in group |
+| hideGroupNameUpdateButton | true/false | Hide group name and group image change option  in group |
+| hideGroupExitButton | true/false | Hide group exit option button in group |
+| hideGroupRemoveMemberOption | true/false | Hide remove member option  from group |
+| profileOption | true/false | Show and hide the profile option |
+| restrictedWordMessage | String | Restricted words are not allowed |
+| hideAttachmentButton | true/false | Show and hide media attachment button |
+
+#### Customizing attachment options.
+
+You can hide particular attachment options by setting value as **false** in attachmentOptions in applozic-settings.json file. 
 ```
+"attachmentOptions": {
+      ":location": true,
+      ":camera": true,
+      ":file": true,
+      ":audio": true,
+      ":video": true,
+      ":contact": true
+    }
+```
+Example : to hide location option in attachment set **":location": false**. 
 
-Show/hide 'Start New' FloatingActionButton
 
-```
-ApplozicSetting.getInstance(context).showStartNewFloatingActionButton();
-ApplozicSetting.getInstance(context).hideStartNewFloatingActionButton();
-```
 
 #### Notifications
 
@@ -163,11 +82,6 @@ ApplozicClient.getInstance(context).enableNotification();
 ```
 
 
-
-
-
-
-
 #### Theme customization
 
   To customize the theme, copy paste the following style in your theme's  res file:
@@ -209,3 +123,38 @@ For your custom contact list, replace MobiComKitPeopleActivity with your contact
 
 Sample app with integration is available under [app](https://github.com/AppLozic/Applozic-Android-SDK/tree/master/app)
 
+
+#### Fragment support
+
+You can add the chat fragments to any activity  below documentation links will explain how to add the chat fragments to your activity   
+
+**1**. [Adding Chat fragments to Activity](https://docs.google.com/document/d/1qH1razXLCg_aCWgdhVp4ATCAZqU3APugWiUbSEJm0-A/edit?usp=sharing)
+
+ **2**. [Adding Chat fragments to TabView Activity](https://docs.google.com/document/d/1-TbJWCUEIzwWGD8mBkV6y2PLrNAIWTmTI6jJuzgC7c4/edit?usp=sharing)
+ 
+ 
+ #### Localization
+ 
+  Steps to Add resources in your Application
+  
+ **Step 1**. Create the android resource directory for your locale
+ 
+ **Step 2**. Create resource file inside android resource directory for your locale (i.e created from Step1)
+ 
+ Download and override resource string for your locale from below
+ 
+ 
+  [Array Options](https://github.com/AppLozic/Applozic-Android-SDK/blob/master/mobicomkitui/src/main/res/values/mobicom_array.xml)
+
+
+  [Common Strings](https://github.com/AppLozic/Applozic-Android-SDK/blob/master/mobicomkitui/src/main/res/values/mobicom_strings.xml)
+
+
+  [Simple Strings](https://github.com/AppLozic/Applozic-Android-SDK/blob/master/mobicomkitui/src/main/res/values/strings.xml)
+  
+  Ex. Change resource string (message) value to spanish locale
+  
+  
+      <string name="message">Mensaje</string>
+
+
diff --git a/INTEGRATION-DOC.md b/INTEGRATION-DOC.md
index e3e08c0c..8001727a 100644
--- a/INTEGRATION-DOC.md
+++ b/INTEGRATION-DOC.md
@@ -1,4 +1,4 @@
-###Building a New App
+### Building a New App
 
 If you are building a new app, you can download the sample app with chat integrated from Github:
 [https://github.com/Applozic/Applozic-Android-SDK/](https://github.com/Applozic/Applozic-Android-SDK/)
@@ -11,19 +11,29 @@ Open the downloaded project in Android Studio, replace Applozic Application Key
 ```
 
 
-###Add Applozic Chat to existing App
+### Add Applozic Chat to existing App
 
-####Step 1: Gradle Dependency
+
+
+
+#### Step 1: Gradle Dependency
 
 Add the following in your build.gradle dependency  
+a) Chat SDK (Without audio/video)
 
 ```
-compile 'com.applozic.communication.uiwidget:mobicomkitui:4.59'
+compile 'com.applozic.communication.uiwidget:mobicomkitui:4.96'
 ```
 
+b) Chat SDK with Audio/Video.
 
-Add the following in gradle android target:      
+```
+compile 'com.applozic.communication.uiwidget:audiovideo:1.2'
+```
+**NOTE** : To enable Audio/Video you need to follow extra steps:
+https://www.applozic.com/docs/android-chat-sdk.html#audio-video-call-setup
 
+Add the following in gradle android target:
 
 ```
 android {
@@ -41,7 +51,7 @@ android {
 ```
 
 
-####Step 2: AndroidManifest
+#### Step 2: AndroidManifest
 Add the following Permissions, Activities, Services and Receivers in androidmanifest.xml
        
 **Note**: Add meta-data, Activities, Services and Receivers within application Tag ``` <application> </application>  ``` 
@@ -52,9 +62,6 @@ Add the following Permissions, Activities, Services and Receivers in androidmani
 <meta-data android:name="com.applozic.application.key"
            android:value="YOUR_APPLOZIC_APPLICATION_KEY" /> <!-- Applozic Application Key -->
 
-<meta-data android:name="com.applozic.mobicomkit.notification.icon" 
-           android:resource="YOUR_LAUNCHER_ICON" />  <!-- Launcher Icon -->
-
 <meta-data android:name="com.applozic.mobicomkit.notification.smallIcon"
            android:resource="YOUR_LAUNCHER_SMALL_ICON" /> <!-- Launcher white Icon -->
            
@@ -71,6 +78,14 @@ To disable the location sharing via map add this line ApplozicSetting.getInstanc
             
  <meta-data android:name="com.package.name" 
            android:value="${applicationId}" /> <!-- NOTE: Do NOT change this, it should remain same i.e 'com.package.name' -->
+           
+<provider android:name="android.support.v4.content.FileProvider"
+           android:authorities="${applicationId}.provider"
+           android:exported="false"
+           android:grantUriPermissions="true">
+<meta-data android:name="android.support.FILE_PROVIDER_PATHS"
+           android:resource="@xml/applozic_provider_paths"/>
+ </provider>         
          
 ```
    **Note**: If you are **not using gradle build** you need to replace ${applicationId}  with your Android app package name
@@ -82,8 +97,6 @@ To disable the location sharing via map add this line ApplozicSetting.getInstanc
 <string name="default_media_location_folder">YOUR_APP_NAME</string> 
 ```
 
-
-
 Permissions:          
 
 
@@ -95,16 +108,16 @@ Permissions:
 <uses-permission android:name="android.permission.INTERNET" />
 <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"  />
 <uses-permission android:name="android.permission.READ_CONTACTS" />
-<uses-permission android:name="android.permission.VIBRATE"/>
 <uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED" />
 <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
 <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
 <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
 <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
-<uses-permission android:name="android.permission.GET_TASKS" />
 <uses-permission android:name="android.permission.CALL_PHONE" />
 <uses-permission android:name="android.permission.CAMERA" />
 <uses-permission android:name="android.permission.RECORD_AUDIO" />
+<uses-permission android:name="android.permission.READ_PHONE_STATE" />
+<uses-permission android:name="android.permission.VIBRATE" />
   ```
 
 
@@ -132,7 +145,7 @@ Paste the following in your androidmanifest.xml:
    
 ```
  <activity android:name="com.applozic.mobicomkit.uiwidgets.conversation.activity.ConversationActivity"
-           android:configChanges="keyboardHidden|orientation|screenSize"
+           android:configChanges="keyboardHidden|screenSize|smallestScreenSize|screenLayout|orientation"
            android:label="@string/app_name"
            android:parentActivityName="<APP_PARENT_ACTIVITY>"
            android:theme="@style/ApplozicTheme"
@@ -143,22 +156,31 @@ Paste the following in your androidmanifest.xml:
            android:value="<APP_PARENT_ACTIVITY>" />
  </activity>
                    
-<activity android:name="com.applozic.mobicomkit.uiwidgets.people.activity.MobiComKitPeopleActivity"
-          android:configChanges="keyboardHidden|orientation|screenSize"
-          android:label="@string/activity_contacts_list"
-          android:parentActivityName="com.applozic.mobicomkit.uiwidgets.conversation.activity.ConversationActivity"
-          android:theme="@style/ApplozicTheme"
-          android:windowSoftInputMode="adjustResize">
-     <!-- Parent activity meta-data to support API level 7+ -->
-<meta-data
-          android:name="android.support.PARENT_ACTIVITY"
-          android:value="com.applozic.mobicomkit.uiwidgets.conversation.activity.ConversationActivity" />
+ <activity android:name="com.applozic.mobicomkit.uiwidgets.people.activity.MobiComKitPeopleActivity"
+           android:configChanges="keyboardHidden|screenSize|smallestScreenSize|screenLayout|orientation"
+           android:label="@string/app_name"
+           android:parentActivityName="com.applozic.mobicomkit.uiwidgets.conversation.activity.ConversationActivity"
+           android:theme="@style/ApplozicTheme"
+           android:windowSoftInputMode="adjustResize">
+
+            <!-- Parent activity meta-data to support API level 7+ -->
+<meta-data android:name="android.support.PARENT_ACTIVITY"
+           android:value="com.applozic.mobicomkit.uiwidgets.conversation.activity.ConversationActivity" />
+
          <intent-filter>
-             <action android:name="android.intent.action.SEARCH" />
+                <action android:name="android.intent.action.SEARCH" />
          </intent-filter>
-<meta-data
-          android:name="android.app.searchable"
-          android:resource="@xml/searchable_contacts" />
+
+         <intent-filter>
+               <action android:name="android.intent.action.SEND" />             
+               <category android:name="android.intent.category.DEFAULT" />
+               <data android:mimeType="image/*" />
+               <data android:mimeType="audio/*" />
+               <data android:mimeType="video/*" />
+               <data android:mimeType="text/plain"/>
+         </intent-filter>
+<meta-data android:name="android.app.searchable"
+           android:resource="@xml/searchable_contacts" />
 </activity>
 
 <activity android:name="com.applozic.mobicomkit.uiwidgets.conversation.activity.FullScreenImageActivity"
@@ -173,7 +195,7 @@ Paste the following in your androidmanifest.xml:
 </activity>
 
 <activity android:name="com.applozic.mobicomkit.uiwidgets.conversation.activity.ContactSelectionActivity"
-          android:configChanges="keyboardHidden|orientation|screenSize"
+          android:configChanges="keyboardHidden|screenSize|smallestScreenSize|screenLayout|orientation"
           android:launchMode="singleTop"
           android:parentActivityName="com.applozic.mobicomkit.uiwidgets.conversation.activity.ConversationActivity"
           android:theme="@style/ApplozicTheme">
@@ -183,7 +205,7 @@ Paste the following in your androidmanifest.xml:
 </activity>
 
 <activity android:name="com.applozic.mobicomkit.uiwidgets.conversation.activity.ChannelCreateActivity"
-          android:configChanges="keyboardHidden|orientation|screenSize"
+          android:configChanges="keyboardHidden|screenSize|smallestScreenSize|screenLayout|orientation"
           android:launchMode="singleTop"
           android:parentActivityName="com.applozic.mobicomkit.uiwidgets.conversation.activity.ConversationActivity"
           android:theme="@style/ApplozicTheme">
@@ -193,14 +215,14 @@ Paste the following in your androidmanifest.xml:
 </activity>
 
 <activity android:name="com.applozic.mobicomkit.uiwidgets.conversation.activity.ChannelNameActivity"
-          android:configChanges="keyboardHidden|orientation|screenSize"
+          android:configChanges="keyboardHidden|screenSize|smallestScreenSize|screenLayout|orientation"
           android:launchMode="singleTop"
           android:parentActivityName="com.applozic.mobicomkit.uiwidgets.conversation.activity.ConversationActivity"
           android:theme="@style/ApplozicTheme">
 </activity>
 
 <activity android:name="com.applozic.mobicomkit.uiwidgets.conversation.activity.ChannelInfoActivity"
-          android:configChanges="keyboardHidden|orientation|screenSize"
+          android:configChanges="keyboardHidden|screenSize|smallestScreenSize|screenLayout|orientation"
           android:launchMode="singleTop"
           android:parentActivityName="com.applozic.mobicomkit.uiwidgets.conversation.activity.ConversationActivity"
           android:theme="@style/ApplozicTheme">
@@ -210,7 +232,7 @@ Paste the following in your androidmanifest.xml:
  </activity>
 
 <activity android:name="com.applozic.mobicomkit.uiwidgets.conversation.activity.MobiComAttachmentSelectorActivity"
-          android:configChanges="keyboardHidden|orientation|screenSize"
+          android:configChanges="keyboardHidden|screenSize|smallestScreenSize|screenLayout|orientation"
           android:launchMode="singleTop"
           android:parentActivityName="com.applozic.mobicomkit.uiwidgets.conversation.activity.ConversationActivity"
           android:theme="@style/ApplozicTheme"
@@ -221,14 +243,15 @@ Paste the following in your androidmanifest.xml:
 </activity>
   
 <activity android:name="com.applozic.mobicomkit.uiwidgets.conversation.activity.MobicomLocationActivity"
-          android:configChanges="keyboardHidden|orientation|screenSize"
+          android:configChanges="keyboardHidden|screenSize|smallestScreenSize|screenLayout|orientation"
           android:parentActivityName="com.applozic.mobicomkit.uiwidgets.conversation.activity.ConversationActivity"
           android:theme="@style/ApplozicTheme"
           android:windowSoftInputMode="adjustResize">
  </activity>
  
-<activity android:name="com.soundcloud.android.crop.CropImageActivity" />
-
+<activity android:name="com.theartofdev.edmodo.cropper.CropImageActivity"
+           android:theme="@style/Base.Theme.AppCompat"/>
+           
 <service android:name="com.applozic.mobicomkit.api.conversation.MessageIntentService"
          android:exported="false" />
               
@@ -248,6 +271,9 @@ Paste the following in your androidmanifest.xml:
             
 <service android:name="com.applozic.mobicomkit.api.conversation.ConversationReadService"
          android:exported="false" />
+         
+<service android:name="com.applozic.mobicomkit.uiwidgets.notification.NotificationIntentService"
+         android:exported="false" />
 
 <receiver android:name="com.applozic.mobicomkit.broadcast.TimeChangeBroadcastReceiver">
          <intent-filter>
@@ -260,19 +286,14 @@ Paste the following in your androidmanifest.xml:
           android:exported="true" android:enabled="true">
           <intent-filter>
               <action android:name="android.intent.action.BOOT_COMPLETED" />
-              <action android:name="android.net.conn.CONNECTIVITY_CHANGE" />
           </intent-filter>
 </receiver>                  
 ```
 
 
-
-
-
-
 Replace APP_PARENT_ACTIVITY with your app's parent activity.        
 
-####Step 3: Login/Register User
+#### Step 3: Login/Register User
 Applozic will create a new user if the user doesn't exists. userId is the unique identifier for any user, it can be anything like email, phone number or uuid from your database.
 
      
@@ -282,8 +303,6 @@ UserLoginTask.TaskListener listener = new UserLoginTask.TaskListener() {
 @Override          
 public void onSuccess(RegistrationResponse registrationResponse, Context context) {           
      //After successful registration with Applozic server the callback will come here 
-     ApplozicSetting.getInstance(context).showStartNewButton();//To show contact list.
-     //ApplozicSetting.getInstance(context).enableRegisteredUsersContactCall();//To enable the applozic Registered Users Contact Note:for disable that you can comment this line of code
 }                       
 
 @Override             
@@ -294,23 +313,29 @@ public void onFailure(RegistrationResponse registrationResponse, Exception excep
 User user = new User();          
 user.setUserId(userId); //userId it can be any unique user identifier
 user.setDisplayName(displayName); //displayName is the name of the user which will be shown in chat messages
-user.setEmail(email); //optional   
+user.setEmail(email); //optional
+user.setAuthenticationTypeId(User.AuthenticationType.APPLOZIC.getValue());  //User.AuthenticationType.APPLOZIC.getValue() for password verification from Applozic server and User.AuthenticationType.CLIENT.getValue() for access Token verification from your server set access token as password
+user.setPassword(""); //optional, leave it blank for testing purpose, read this if you want to add additional security by verifying password from your server https://www.applozic.com/docs/configuration.html#access-token-url
 user.setImageLink("");//optional,pass your image link
 new UserLoginTask(user, listener, this).execute((Void) null);                                       
 ```
 
 If it is a new user, new user account will get created else existing user will be logged in to the application.
+You can check if user is logged in to applozic or not by using ``` MobiComUserPreference.getInstance(this).isLoggedIn() ```
 
 
-####Step 4: Push Notification Setup
 
-***Go to Applozic Dashboard, Edit Application. 
-Under Module section, update the GCM Server Key.***
+#### Step 4: Push Notification Setup
 
+For push notifications, you must have a Firebase account.
+Signup to https://console.firebase.google.com/ and create your application and generate push notification services file.
 
-##### Firebase Cloud Messaging (FCM)  is already enabled in my app
+***Go to Applozic Dashboard, Edit Application -> Push Notification -> Android -> GCM/FCM Server Key.***
 
-  Add the below code and pass the push notification token:
+
+#### Firebase Cloud Messaging (FCM)  is already enabled in my app
+
+  Add the below code and pass the FCM registration token:
   
  **1.** In UserLoginTask "onSuccess" (refer Step 3)
   
@@ -331,7 +356,7 @@ public void onFailure(RegistrationResponse registrationResponse, Exception excep
 
 };                    
 
-pushNotificationTask = new PushNotificationTask(pushnotificationId, listener, mActivity);            
+pushNotificationTask = new PushNotificationTask(registrationToken, listener, mActivity);            
 pushNotificationTask.execute((Void) null);  
 }
 ```
@@ -356,27 +381,40 @@ Add the following in your FcmListenerService  in onMessageReceived(RemoteMessage
 ```
 
 
+#### GCM is already enabled in my app
 
-#####GCM is already enabled in my app
+If you already have GCM enabled in your app, add the below code and pass the GCM registration token:
+  
+ **1.** In UserLoginTask "onSuccess" (refer Step 3)
+  
 
-If you already have GCM enabled in your app, then paste PushNotificationTask code at the place where you are getting the GCM registration id in your app.       
-     
 ```
+if(MobiComUserPreference.getInstance(context).isRegistered()) {
+
 PushNotificationTask pushNotificationTask = null;         
 PushNotificationTask.TaskListener listener = new PushNotificationTask.TaskListener() {                  
 @Override           
-public void onSuccess(RegistrationResponse registrationResponse) {  
+public void onSuccess(RegistrationResponse registrationResponse) {   
 
 }            
 @Override          
-public void onFailure(RegistrationResponse registrationResponse, Exception exception) {     
+public void onFailure(RegistrationResponse registrationResponse, Exception exception) {
 
 } 
 
 };                    
 
-pushNotificationTask = new PushNotificationTask(pushnotificationId, listener, mActivity);            
-pushNotificationTask.execute((Void) null);                          
+pushNotificationTask = new PushNotificationTask(registrationToken, listener, mActivity);            
+pushNotificationTask.execute((Void) null);  
+}
+```
+
+ **2.** At the place where you are getting the GCM registration token in your app.       
+
+ ```
+ if (MobiComUserPreference.getInstance(this).isRegistered()) {
+      new RegisterUserClientService(this).updatePushNotificationId(registrationToken);
+ }
 ```
 
 
@@ -395,12 +433,9 @@ if(MobiComPushReceiver.isMobiComPushNotification(data)) {
 
 
 
-#####Don't have Android Push Notification code ?
+#### Don't have Android Push Notification code ?
 
-To Enable Android Push Notification using Firebase Cloud Messaging (FCM) visit the 
-[Firebase console](https://console.firebase.google.com) and create new project , add the google service json to your app by getting server key from project settings update in  
-***[Applozic Dashboard](https://www.applozic.com/views/applozic/page/admin/dashboard.jsp) under Edit Application. 
-Under Module section, update the GCM Server Key.***
+To Enable Android Push Notification using Firebase Cloud Messaging (FCM) visit the [Firebase console](https://console.firebase.google.com) and create new project, add the google service json to your app, configure the build.gradle files in your app ,finally get server key from project settings and update in  ***[Applozic Dashboard](https://dashboard.applozic.com/views/applozic/page/admin/dashboard.jsp) under Edit Application -> Push Notification -> Android -> GCM/FCM Server Key.***
 
 
 In case, if you don't have the existing FCM related code, then copy the push notification related files from Applozic sample app to your project from the below github link
@@ -424,7 +459,7 @@ And add below code in your androidmanifest.xml file
        </intent-filter>
 </service>
   ``` 
-####Setup PushNotificationTask in UserLoginTask "onSuccess" (refer Step 3).
+#### Setup PushNotificationTask in UserLoginTask "onSuccess" (refer Step 3).
 
 ```
  PushNotificationTask pushNotificationTask = null;
@@ -443,7 +478,7 @@ And add below code in your androidmanifest.xml file
  pushNotificationTask.execute((Void)null);
 ```
 
-####Step 5: Initiate Chat
+#### Step 5: Initiate Chat
 
 For starting the messaging activity      
       
@@ -456,17 +491,43 @@ For starting individual conversation thread, set "userId" in intent:
  
 ```
 Intent intent = new Intent(this, ConversationActivity.class);            
-intent.putExtra(ConversationUIService.USER_ID, "devashish@applozic.com");             
-intent.putExtra(ConversationUIService.DISPLAY_NAME, "Devashish Mamgain"); //put it for displaying the title.             
+intent.putExtra(ConversationUIService.USER_ID, "receiveruserid123");   
+intent.putExtra(ConversationUIService.DISPLAY_NAME, "Receiver display name"); //put it for displaying the title.
+intent.putExtra(ConversationUIService.TAKE_ORDER,true); //Skip chat list for showing on back press 
 startActivity(intent);                              
 ```
 
-####Step 6: Logout user       
+#### Step 6: Logout user       
 
 Call the following when user logout from your app:
 
 ```
-new UserClientService(this).logout();      
+1)Async task call for logout:
+
+ UserLogoutTask.TaskListener userLogoutTaskListener = new UserLogoutTask.TaskListener() {
+ @Override
+ public void onSuccess(Context context) {
+   //Logout success
+ } 
+  @Override
+ public void onFailure(Exception exception) {
+  //Logout failure
+ }
+ };
+
+ UserLogoutTask userLogoutTask = new UserLogoutTask(userLogoutTaskListener, context);
+ userLogoutTask.execute((Void) null);     
+ 
+ 2)Logout Method call  
+ 
+ ApiResponse apiResponse =  new UserClientService(this).logout();
+ 
+ if(apiResponse != null && apiResponse.isSuccess()){
+      //Logout success
+  }else {
+     //Logout failure 
+ }
+Note :Use async task or thread to call this logout method  
 ```
  
 
@@ -489,4 +550,9 @@ Add the following if you are using ProGuard:
 -keep class org.eclipse.paho.client.mqttv3.logging.JSR47Logger { *; } 
 -keep class android.support.** { *; }
 -keep interface android.support.** { *; }
+-dontwarn android.support.v4.**
+-keep public class com.google.android.gms.* { public *; }
+-dontwarn com.google.android.gms.**
+-keep class com.google.gson.** { *; }
+
  ``` 
diff --git a/README.md b/README.md
index f5d5d49e..2e4ab5c7 100644
--- a/README.md
+++ b/README.md
@@ -23,9 +23,9 @@ Documentation: [Applozic Android Chat & Messaging SDK Documentation](https://www
 
 
 
-**Step 1: Add the following in your build.gradle dependency**:      
+#### Step 1: Add the following in your build.gradle dependency:      
 
-`compile 'com.applozic.communication.uiwidget:mobicomkitui:4.59' `
+`compile 'com.applozic.communication.uiwidget:mobicomkitui:4.96' `
 
 
 Add the following in gradle android target:      
@@ -47,7 +47,7 @@ android {
 ```
 
 
-**Step 2: Addition of Permissions,Activities, Services and Receivers in androidmanifest.xml**:
+#### Step 2: Addition of Permissions,Activities, Services and Receivers in androidmanifest.xml:
         
 **Note**: Add meta-data, Activities, Services and Receivers within application Tag ``` <application> </application> ```
 
@@ -57,9 +57,6 @@ android {
 <meta-data android:name="com.applozic.application.key"
            android:value="YOUR_APPLOZIC_APPLICATION_KEY" /> <!-- Applozic Application Key -->
 
-<meta-data android:name="com.applozic.mobicomkit.notification.icon" 
-           android:resource="YOUR_LAUNCHER_ICON" />  <!-- Launcher Icon -->
-
 <meta-data android:name="com.applozic.mobicomkit.notification.smallIcon"
            android:resource="YOUR_LAUNCHER_SMALL_ICON" /> <!-- Launcher white Icon -->
            
@@ -76,6 +73,14 @@ To disable the location sharing via map add this line ApplozicSetting.getInstanc
             
 <meta-data android:name="com.package.name" 
            android:value="${applicationId}" /> <!-- NOTE: Do NOT change this, it should remain same i.e 'com.package.name' -->
+           
+ <provider android:name="android.support.v4.content.FileProvider"
+           android:authorities="${applicationId}.provider"
+           android:exported="false"
+           android:grantUriPermissions="true">
+<meta-data android:name="android.support.FILE_PROVIDER_PATHS"
+           android:resource="@xml/applozic_provider_paths"/>
+ </provider>           
          
 ```
    **Note**: If you are **not using gradle build** you need to replace ${applicationId}  with your Android app package name
@@ -87,8 +92,6 @@ To disable the location sharing via map add this line ApplozicSetting.getInstanc
 <string name="default_media_location_folder">YOUR_APP_NAME</string> 
 ```
 
-
-
 Permissions:          
 
 
@@ -102,16 +105,16 @@ Permissions:
 <uses-permission android:name="android.permission.INTERNET" />
 <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"  />
 <uses-permission android:name="android.permission.READ_CONTACTS" />
-<uses-permission android:name="android.permission.VIBRATE"/>
 <uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED" />
 <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
 <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
 <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
 <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
-<uses-permission android:name="android.permission.GET_TASKS" />
 <uses-permission android:name="android.permission.CALL_PHONE" />
 <uses-permission android:name="android.permission.CAMERA" />
 <uses-permission android:name="android.permission.RECORD_AUDIO" />
+<uses-permission android:name="android.permission.READ_PHONE_STATE" />
+<uses-permission android:name="android.permission.VIBRATE" />
   ```
 
 
@@ -139,7 +142,7 @@ Paste the following in your androidmanifest.xml:
    
 ```
 <activity android:name="com.applozic.mobicomkit.uiwidgets.conversation.activity.ConversationActivity"
-           android:configChanges="keyboardHidden|orientation|screenSize"
+           android:configChanges="keyboardHidden|screenSize|smallestScreenSize|screenLayout|orientation"
            android:label="@string/app_name"
            android:parentActivityName="<APP_PARENT_ACTIVITY>"
            android:theme="@style/ApplozicTheme"
@@ -150,26 +153,35 @@ Paste the following in your androidmanifest.xml:
            android:value="<APP_PARENT_ACTIVITY>" />
  </activity>
                    
-<activity android:name="com.applozic.mobicomkit.uiwidgets.people.activity.MobiComKitPeopleActivity"
-          android:configChanges="keyboardHidden|orientation|screenSize"
-          android:label="@string/activity_contacts_list"
-          android:parentActivityName="com.applozic.mobicomkit.uiwidgets.conversation.activity.ConversationActivity"
-          android:theme="@style/ApplozicTheme"
-          android:windowSoftInputMode="adjustResize">
-     <!-- Parent activity meta-data to support API level 7+ -->
-<meta-data
-          android:name="android.support.PARENT_ACTIVITY"
-          android:value="com.applozic.mobicomkit.uiwidgets.conversation.activity.ConversationActivity" />
+ <activity android:name="com.applozic.mobicomkit.uiwidgets.people.activity.MobiComKitPeopleActivity"
+           android:configChanges="keyboardHidden|screenSize|smallestScreenSize|screenLayout|orientation"
+           android:label="@string/app_name"
+           android:parentActivityName="com.applozic.mobicomkit.uiwidgets.conversation.activity.ConversationActivity"
+           android:theme="@style/ApplozicTheme"
+           android:windowSoftInputMode="adjustResize">
+
+            <!-- Parent activity meta-data to support API level 7+ -->
+<meta-data android:name="android.support.PARENT_ACTIVITY"
+           android:value="com.applozic.mobicomkit.uiwidgets.conversation.activity.ConversationActivity" />
+
          <intent-filter>
-             <action android:name="android.intent.action.SEARCH" />
+                <action android:name="android.intent.action.SEARCH" />
          </intent-filter>
-<meta-data
-          android:name="android.app.searchable"
-          android:resource="@xml/searchable_contacts" />
+
+         <intent-filter>
+               <action android:name="android.intent.action.SEND" />             
+               <category android:name="android.intent.category.DEFAULT" />
+               <data android:mimeType="image/*" />
+               <data android:mimeType="audio/*" />
+               <data android:mimeType="video/*" />
+               <data android:mimeType="text/plain"/>
+         </intent-filter>
+<meta-data android:name="android.app.searchable"
+           android:resource="@xml/searchable_contacts" />
 </activity>
 
 <activity android:name="com.applozic.mobicomkit.uiwidgets.conversation.activity.FullScreenImageActivity"
-          android:configChanges="keyboardHidden|orientation|screenSize"
+          android:configChanges="keyboardHidden|screenSize|smallestScreenSize|screenLayout|orientation"
           android:label="Image"
  android:parentActivityName="com.applozic.mobicomkit.uiwidgets.conversation.activity.ConversationActivity"
           android:theme="@style/Applozic_FullScreen_Theme">
@@ -180,7 +192,7 @@ Paste the following in your androidmanifest.xml:
 </activity>
 
 <activity android:name="com.applozic.mobicomkit.uiwidgets.conversation.activity.ContactSelectionActivity"
-          android:configChanges="keyboardHidden|orientation|screenSize"
+          android:configChanges="keyboardHidden|screenSize|smallestScreenSize|screenLayout|orientation"
           android:launchMode="singleTop"
           android:parentActivityName="com.applozic.mobicomkit.uiwidgets.conversation.activity.ConversationActivity"
           android:theme="@style/ApplozicTheme">
@@ -190,7 +202,7 @@ Paste the following in your androidmanifest.xml:
 </activity>
 
 <activity android:name="com.applozic.mobicomkit.uiwidgets.conversation.activity.ChannelCreateActivity"
-          android:configChanges="keyboardHidden|orientation|screenSize"
+          android:configChanges="keyboardHidden|screenSize|smallestScreenSize|screenLayout|orientation"
           android:launchMode="singleTop"
           android:parentActivityName="com.applozic.mobicomkit.uiwidgets.conversation.activity.ConversationActivity"
           android:theme="@style/ApplozicTheme">
@@ -200,14 +212,14 @@ Paste the following in your androidmanifest.xml:
 </activity>
 
 <activity android:name="com.applozic.mobicomkit.uiwidgets.conversation.activity.ChannelNameActivity"
-          android:configChanges="keyboardHidden|orientation|screenSize"
+          android:configChanges="keyboardHidden|screenSize|smallestScreenSize|screenLayout|orientation"
           android:launchMode="singleTop"
           android:parentActivityName="com.applozic.mobicomkit.uiwidgets.conversation.activity.ConversationActivity"
           android:theme="@style/ApplozicTheme">
 </activity>
 
 <activity android:name="com.applozic.mobicomkit.uiwidgets.conversation.activity.ChannelInfoActivity"
-          android:configChanges="keyboardHidden|orientation|screenSize"
+          android:configChanges="keyboardHidden|screenSize|smallestScreenSize|screenLayout|orientation"
           android:launchMode="singleTop"
           android:parentActivityName="com.applozic.mobicomkit.uiwidgets.conversation.activity.ConversationActivity"
           android:theme="@style/ApplozicTheme">
@@ -217,7 +229,7 @@ Paste the following in your androidmanifest.xml:
  </activity>
 
 <activity android:name="com.applozic.mobicomkit.uiwidgets.conversation.activity.MobiComAttachmentSelectorActivity"
-          android:configChanges="keyboardHidden|orientation|screenSize"
+          android:configChanges="keyboardHidden|screenSize|smallestScreenSize|screenLayout|orientation"
           android:launchMode="singleTop"
           android:parentActivityName="com.applozic.mobicomkit.uiwidgets.conversation.activity.ConversationActivity"
           android:theme="@style/ApplozicTheme"
@@ -228,14 +240,15 @@ Paste the following in your androidmanifest.xml:
 </activity>
   
 <activity android:name="com.applozic.mobicomkit.uiwidgets.conversation.activity.MobicomLocationActivity"
-          android:configChanges="keyboardHidden|orientation|screenSize"
+          android:configChanges="keyboardHidden|screenSize|smallestScreenSize|screenLayout|orientation"
           android:parentActivityName="com.applozic.mobicomkit.uiwidgets.conversation.activity.ConversationActivity"
           android:theme="@style/ApplozicTheme"
           android:windowSoftInputMode="adjustResize">
  </activity>
  
-<activity android:name="com.soundcloud.android.crop.CropImageActivity" />
-
+<activity android:name="com.theartofdev.edmodo.cropper.CropImageActivity"
+           android:theme="@style/Base.Theme.AppCompat"/>
+           
 <service android:name="com.applozic.mobicomkit.api.conversation.MessageIntentService"
          android:exported="false" />
               
@@ -255,6 +268,9 @@ Paste the following in your androidmanifest.xml:
             
 <service android:name="com.applozic.mobicomkit.api.conversation.ConversationReadService"
          android:exported="false" />
+         
+<service android:name="com.applozic.mobicomkit.uiwidgets.notification.NotificationIntentService"
+         android:exported="false" />
 
 <receiver android:name="com.applozic.mobicomkit.broadcast.TimeChangeBroadcastReceiver">
          <intent-filter>
@@ -267,7 +283,6 @@ Paste the following in your androidmanifest.xml:
           android:exported="true" android:enabled="true">
           <intent-filter>
               <action android:name="android.intent.action.BOOT_COMPLETED" />
-              <action android:name="android.net.conn.CONNECTIVITY_CHANGE" />
           </intent-filter>
 </receiver>                 
 ```
@@ -279,7 +294,7 @@ Paste the following in your androidmanifest.xml:
 
 Replace APP_PARENT_ACTIVITY with your app's parent activity.        
 
-**Step 3: Register user account**:     
+#### Step 3: Register user account:     
 
 
 
@@ -290,8 +305,6 @@ UserLoginTask.TaskListener listener = new UserLoginTask.TaskListener() {
 @Override          
 public void onSuccess(RegistrationResponse registrationResponse, Context context) {           
    // After successful registration with Applozic server the callback will come here 
-    ApplozicSetting.getInstance(context).showStartNewButton();//To show contact list.
-    ApplozicSetting.getInstance(context).enableRegisteredUsersContactCall();//To enable the applozic Registered Users Contact Note:for disable that you can comment this line of code
 }                       
 
 @Override             
@@ -303,22 +316,24 @@ User user = new User();
 user.setUserId(userId); //userId it can be any unique user identifier
 user.setDisplayName(displayName); //displayName is the name of the user which will be shown in chat messages
 user.setEmail(email); //optional  
+user.setAuthenticationTypeId(User.AuthenticationType.APPLOZIC.getValue());  //User.AuthenticationType.APPLOZIC.getValue() for password verification from Applozic server and User.AuthenticationType.CLIENT.getValue() for access Token verification from your server set access token as password
+user.setPassword(""); //optional, leave it blank for testing purpose, read this if you want to add additional security by verifying password from your server https://www.applozic.com/docs/configuration.html#access-token-url
 user.setImageLink("");//optional,pass your image link
 new UserLoginTask(user, listener, this).execute((Void) null);                                       
 ```
 
 If it is a new user, new user account will get created else existing user will be logged in to the application.
+You can check if user is logged in to applozic or not by using ``` MobiComUserPreference.getInstance(this).isLoggedIn() ```
 
 
 
-####Step 4: Push Notification Setup
+#### Step 4: Push Notification Setup
 
-***Go to Applozic Dashboard, Edit Application. 
-Under Module section, update the GCM Server Key.***
+***Go to Applozic Dashboard, Edit Application -> Push Notification -> Android -> GCM/FCM Server Key.***
 
-##### Firebase Cloud Messaging (FCM)  is already enabled in my app
+#### Firebase Cloud Messaging (FCM)  is already enabled in my app
 
-  Add the below code and pass the push notification tooken:
+  Add the below code and pass the FCM registration token:
   
  **1.** In UserLoginTask "onSuccess" (refer Step 3)
   
@@ -339,7 +354,7 @@ public void onFailure(RegistrationResponse registrationResponse, Exception excep
 
 };                    
 
-pushNotificationTask = new PushNotificationTask(pushnotificationId, listener, mActivity);            
+pushNotificationTask = new PushNotificationTask(registrationToken, listener, mActivity);            
 pushNotificationTask.execute((Void) null);  
 }
 ```
@@ -365,28 +380,41 @@ Add the following in your FcmListenerService  in onMessageReceived(RemoteMessage
 
 
 
-#####GCM is already enabled in my app
+#### GCM is already enabled in my app
+
+If you already have GCM enabled in your app, add the below code and pass the GCM registration token:
+  
+ **1.** In UserLoginTask "onSuccess" (refer Step 3)
+  
 
-If you already have GCM enabled in your app, then paste PushNotificationTask code at the place where you are getting the GCM registration id in your app.       
-     
 ```
+if(MobiComUserPreference.getInstance(context).isRegistered()) {
+
 PushNotificationTask pushNotificationTask = null;         
 PushNotificationTask.TaskListener listener = new PushNotificationTask.TaskListener() {                  
 @Override           
-public void onSuccess(RegistrationResponse registrationResponse) {  
+public void onSuccess(RegistrationResponse registrationResponse) {   
 
 }            
 @Override          
-public void onFailure(RegistrationResponse registrationResponse, Exception exception) {     
+public void onFailure(RegistrationResponse registrationResponse, Exception exception) {
 
 } 
 
 };                    
 
-pushNotificationTask = new PushNotificationTask(pushnotificationId, listener, mActivity);            
-pushNotificationTask.execute((Void) null);                          
+pushNotificationTask = new PushNotificationTask(registrationToken, listener, mActivity);            
+pushNotificationTask.execute((Void) null);  
+}
 ```
 
+ **2.** At the place where you are getting the GCM registration token in your app.       
+
+ ```
+ if (MobiComUserPreference.getInstance(this).isRegistered()) {
+      new RegisterUserClientService(this).updatePushNotificationId(registrationToken);
+ }
+```
 
 ##### For Receiving Notifications In GCM
 
@@ -403,11 +431,10 @@ if(MobiComPushReceiver.isMobiComPushNotification(data)) {
 
 
 
-#####Don't have Android Push Notification code ?
+#### Don't have Android Push Notification code ?
 
-To Enable Android Push Notification using Firebase Cloud Messaging (FCM) visit the [Firebase console](https://console.firebase.google.com) and create new project , add the google service json to your app by getting server key from project settings update in  
-***[Applozic Dashboard](https://www.applozic.com/views/applozic/page/admin/dashboard.jsp) under Edit Application. 
-Under Module section, update the GCM Server Key.***
+To Enable Android Push Notification using Firebase Cloud Messaging (FCM) visit the [Firebase console](https://console.firebase.google.com) and create new project, add the google service json to your app, configure the build.gradle files in your app ,finally get server key from project settings and update in  
+***[Applozic Dashboard](https://dashboard.applozic.com/views/applozic/page/admin/dashboard.jsp) under Edit Application -> Push Notification -> Android -> GCM/FCM Server Key.***
 
 
 In case, if you don't have the existing FCM related code, then copy the push notification related files from Applozic sample app to your project from the below github link
@@ -431,7 +458,7 @@ And add below code in your androidmanifest.xml file
        </intent-filter>
 </service>
   ``` 
-####Setup PushNotificationTask in UserLoginTask "onSuccess" (refer Step 3).
+#### Setup PushNotificationTask in UserLoginTask "onSuccess" (refer Step 3).
 
 ```
  PushNotificationTask pushNotificationTask = null;
@@ -451,7 +478,7 @@ And add below code in your androidmanifest.xml file
 ```
 
 
-**Step 5: For starting the messaging activity**:        
+#### Step 5: For starting the messaging activity:        
 
       
 ```
@@ -465,18 +492,44 @@ startActivity(intent);
            
 ```
 Intent intent = new Intent(this, ConversationActivity.class);            
-intent.putExtra(ConversationUIService.USER_ID, "devashish@applozic.com");             
-intent.putExtra(ConversationUIService.DISPLAY_NAME, "Devashish Mamgain"); //put it for displaying the title.             
+intent.putExtra(ConversationUIService.USER_ID, "receiveruserid123");             
+intent.putExtra(ConversationUIService.DISPLAY_NAME, "Receiver display name"); //put it for displaying the title.  
+intent.putExtra(ConversationUIService.TAKE_ORDER,true); //Skip chat list for showing on back press 
 startActivity(intent);                              
 ```
 
-**Step 6: On logout, call the following**:       
+#### Step 6: On logout, call the following:       
 
 
 
+```
+1)Async task call for logout:
+
+ UserLogoutTask.TaskListener userLogoutTaskListener = new UserLogoutTask.TaskListener() {
+ @Override
+ public void onSuccess(Context context) {
+   //Logout success
+ } 
+  @Override
+ public void onFailure(Exception exception) {
+  //Logout failure
+ }
+ };
 
- new UserClientService(this).logout();      
+ UserLogoutTask userLogoutTask = new UserLogoutTask(userLogoutTaskListener, context);
+ userLogoutTask.execute((Void) null);     
+ 
+ 2)Logout Method call  
  
+ ApiResponse apiResponse =  new UserClientService(this).logout();
+ 
+ if(apiResponse != null && apiResponse.isSuccess()){
+      //Logout success
+    }else {
+       //Logout failure 
+  }
+Note :Use async task or thread to call this logout method       
+ ```
  
  
  Note: If you are running ProGuard, please add following lines:        
@@ -501,6 +554,11 @@ startActivity(intent);
 -keep class org.eclipse.paho.client.mqttv3.logging.JSR47Logger { *; } 
 -keep class android.support.** { *; }
 -keep interface android.support.** { *; }
+-dontwarn android.support.v4.**
+-keep public class com.google.android.gms.* { public *; }
+-dontwarn com.google.android.gms.**
+-keep class com.google.gson.** { *; }
+
  ``` 
    
 **Trying out the demo app:**
@@ -515,15 +573,15 @@ ApplozicClient.getInstance(this).setHandleDisplayName(false);
 By default, the display name feature is enabled.
 
 
-###Documentation:
+### Documentation:
 For advanced options and customization, visit [Applozic Android Chat & Messaging SDK Documentation](https://www.applozic.com/docs/android-chat-sdk.html?utm_source=github&utm_medium=readme&utm_campaign=android)
 
 
-###Changelog
+### Changelog
 [Changelog](https://github.com/AppLozic/Applozic-Android-SDK/blob/master/CHANGELOG.md)
 
 
-####Features:
+#### Features:
 
 
  One to one and Group Chat
@@ -565,22 +623,22 @@ For advanced options and customization, visit [Applozic Android Chat & Messaging
  Cross Platform Support (iOS, Android & Web)
 
 
-###Sample code to build messenger and chat app
+### Sample source code to build messenger and chat app
 https://github.com/AppLozic/Applozic-Android-SDK/tree/master/app
 
 
-##Help
+## Help
 
 We provide support over at [StackOverflow] (http://stackoverflow.com/questions/tagged/applozic) when you tag using applozic, ask us anything.
 
 Applozic is the best android chat sdk for instant messaging, still not convinced? Write to us at github@applozic.com and we will be happy to schedule a demo for you.
 
 
-###Free Android Chat SDK
+### Free Android Chat SDK
 Special plans for startup and open source contributors, write to us at github@applozic.com 
 
 
-##Github projects
+## Github projects
 
 Android Chat SDK https://github.com/AppLozic/Applozic-Android-SDK
 
diff --git a/app/build.gradle b/app/build.gradle
index 757b6713..f86abea0 100755
--- a/app/build.gradle
+++ b/app/build.gradle
@@ -14,14 +14,14 @@ repositories {
     maven { url 'https://maven.fabric.io/public' }
 }
 android {
-    compileSdkVersion 23
-    buildToolsVersion "23.0.2"
+    compileSdkVersion 25
+    buildToolsVersion "25.0.2"
 
 
     defaultConfig {
         applicationId "com.mobicomkit.sample"
-        minSdkVersion 10
-        targetSdkVersion 23
+        minSdkVersion 14
+        targetSdkVersion 25
         versionCode 1
         versionName "1.0"
         multiDexEnabled true
@@ -57,12 +57,12 @@ android {
 
 dependencies {
     compile fileTree(dir: 'libs', include: ['*.jar'])
-   compile project(':mobicomkitui') //Note: use this for customization
-  // compile 'com.applozic.communication.uiwidget:mobicomkitui:4.59' //Note:use this in case customization is not required
-    compile 'com.android.support:support-v4:23.1.1'
-    compile 'com.android.support:appcompat-v7:23.1.1'
+    compile project(':mobicomkitui') //Note: use this for customization
+    //compile 'com.applozic.communication.uiwidget:mobicomkitui:4.96'
+    compile 'com.android.support:support-v4:25.3.1'
+    compile 'com.android.support:appcompat-v7:25.3.1'
     //compile 'com.facebook.android:facebook-android-sdk:4.1.0'
-    compile 'com.android.support:design:23.1.1'
+    compile 'com.android.support:design:25.3.1'
     compile 'com.android.support:multidex:1.0.1'
     //compile 'com.android.support:cardview-v7:22.0'
     //compile 'com.android.support:recyclerview-v7:22.0'
diff --git a/app/proguard-rules.pro b/app/proguard-rules.pro
index 5d593fad..93f8683d 100755
--- a/app/proguard-rules.pro
+++ b/app/proguard-rules.pro
@@ -45,6 +45,10 @@
     public static final *** NULL;
 }
 
+-dontwarn android.support.v4.**
+-keep public class com.google.android.gms.* { public *; }
+-dontwarn com.google.android.gms.**
+-keep class com.google.gson.** { *; }
 
 -keep public class * extends View {
 public <init>(android.content.Context);
diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
index e38b2cc4..8a58f3ea 100755
--- a/app/src/main/AndroidManifest.xml
+++ b/app/src/main/AndroidManifest.xml
@@ -6,9 +6,11 @@
     <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
     <uses-permission android:name="android.permission.READ_CONTACTS" />
     <uses-permission android:name="android.permission.VIBRATE" />
-    <!-- <uses-permission android:name="android.permission.CALL_PHONE" />-->
-    <!-- <uses-permission android:name="android.permission.READ_PROFILE" />
-     <uses-permission android:name="android.permission.READ_PHONE_STATE" />-->
+    <!-- <uses-permission android:name="android.permission.CALL_PHONE" /> -->
+    <!--
+     <uses-permission android:name="android.permission.READ_PROFILE" />-->
+     <uses-permission android:name="android.permission.READ_PHONE_STATE" />
+
     <uses-permission android:name="android.permission.CALL_PHONE" />
     <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
     <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
@@ -17,39 +19,41 @@
     <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
     <uses-permission android:name="android.permission.RECORD_AUDIO" />
     <uses-permission android:name="android.permission.CAMERA" />
-    <uses-permission android:name="android.permission.GET_TASKS" />
-    <uses-permission android:name="com.applozic.mobicomkit.sample.permission.MAPS_RECEIVE" />
-
+    <uses-permission android:name="com.mobicomkit.sample.permission.MAPS_RECEIVE" />
 
     <!-- To auto-complete the email text field in the login form with the user's emails -->
     <uses-permission android:name="android.permission.GET_ACCOUNTS" />
 
     <permission
-        android:name="com.applozic.mobicomkit.sample.permission.MAPS_RECEIVE"
+        android:name="com.mobicomkit.sample.permission.MAPS_RECEIVE"
         android:protectionLevel="signature" />
 
     <application
         android:name=".ApplozicSampleApplication"
-        android:allowBackup="true"
+        android:allowBackup="false"
         android:icon="@drawable/ic_launcher"
         android:label="@string/app_name"
+        android:supportsRtl="true"
         android:theme="@style/ApplozicTheme">
+        <provider
+            android:name="android.support.v4.content.FileProvider"
+            android:authorities="${applicationId}.provider"
+            android:exported="false"
+            android:grantUriPermissions="true">
+            <meta-data
+                android:name="android.support.FILE_PROVIDER_PATHS"
+                android:resource="@xml/applozic_provider_paths" />
+        </provider>
+
         <activity
             android:name=".MainActivity"
             android:configChanges="keyboardHidden|orientation|screenSize"
             android:exported="true"
             android:label="@string/ecommerce"
-            android:theme="@style/MobiComAppBaseTheme">
-            <intent-filter>
-                <action android:name="android.intent.action.MAIN" />
-
-                <category android:name="android.intent.category.LAUNCHER" />
-            </intent-filter>
-        </activity>
-
+            android:theme="@style/MobiComAppBaseTheme"></activity>
         <activity
             android:name="com.applozic.mobicomkit.uiwidgets.conversation.activity.ConversationActivity"
-            android:configChanges="keyboardHidden|orientation|screenSize"
+            android:configChanges="keyboardHidden|screenSize|locale|smallestScreenSize|screenLayout|orientation"
             android:label="@string/app_name"
             android:launchMode="singleTask"
             android:parentActivityName=".MainActivity"
@@ -69,7 +73,7 @@
 
         <activity
             android:name="com.applozic.mobicomkit.uiwidgets.conversation.activity.ContactSelectionActivity"
-            android:configChanges="keyboardHidden|orientation|screenSize"
+            android:configChanges="keyboardHidden|screenSize|smallestScreenSize|screenLayout|orientation"
             android:launchMode="singleTop"
             android:parentActivityName="com.applozic.mobicomkit.uiwidgets.conversation.activity.ConversationActivity"
             android:theme="@style/ApplozicTheme">
@@ -77,10 +81,9 @@
                 android:name="android.support.PARENT_ACTIVITY"
                 android:value="com.applozic.mobicomkit.uiwidgets.conversation.activity.ConversationActivity" />
         </activity>
-
         <activity
             android:name="com.applozic.mobicomkit.uiwidgets.conversation.activity.ChannelCreateActivity"
-            android:configChanges="keyboardHidden|orientation|screenSize"
+            android:configChanges="keyboardHidden|screenSize|smallestScreenSize|screenLayout|orientation"
             android:launchMode="singleTop"
             android:parentActivityName="com.applozic.mobicomkit.uiwidgets.conversation.activity.ConversationActivity"
             android:theme="@style/ApplozicTheme">
@@ -90,7 +93,7 @@
         </activity>
         <activity
             android:name="com.applozic.mobicomkit.uiwidgets.conversation.activity.MobiComAttachmentSelectorActivity"
-            android:configChanges="keyboardHidden|orientation|screenSize"
+            android:configChanges="keyboardHidden|screenSize|smallestScreenSize|screenLayout|orientation"
             android:launchMode="singleTop"
             android:parentActivityName="com.applozic.mobicomkit.uiwidgets.conversation.activity.ConversationActivity"
             android:theme="@style/ApplozicTheme"
@@ -101,14 +104,13 @@
         </activity>
         <activity
             android:name="com.applozic.mobicomkit.uiwidgets.conversation.activity.ChannelNameActivity"
-            android:configChanges="keyboardHidden|orientation|screenSize"
+            android:configChanges="keyboardHidden|screenSize|smallestScreenSize|screenLayout|orientation"
             android:launchMode="singleTop"
             android:parentActivityName="com.applozic.mobicomkit.uiwidgets.conversation.activity.ConversationActivity"
-            android:theme="@style/ApplozicTheme">
-        </activity>
+            android:theme="@style/ApplozicTheme"></activity>
         <activity
             android:name="com.applozic.mobicomkit.uiwidgets.conversation.activity.ChannelInfoActivity"
-            android:configChanges="keyboardHidden|orientation|screenSize"
+            android:configChanges="keyboardHidden|screenSize|smallestScreenSize|screenLayout|orientation"
             android:launchMode="singleTop"
             android:parentActivityName="com.applozic.mobicomkit.uiwidgets.conversation.activity.ConversationActivity"
             android:theme="@style/ApplozicTheme">
@@ -127,13 +129,11 @@
             android:name="com.applozic.loginActivity"
             android:value="com.applozic.mobicomkit.sample.LoginActivity" />
 
-        <service
-            android:name=".pushnotification.FcmListenerService">
+        <service android:name=".pushnotification.FcmListenerService">
             <intent-filter>
                 <action android:name="com.google.firebase.MESSAGING_EVENT" />
             </intent-filter>
         </service>
-
         <service
             android:name=".pushnotification.FcmInstanceIDListenerService"
             android:exported="false">
@@ -142,12 +142,13 @@
             </intent-filter>
         </service>
 
-        <meta-data
-            android:name="com.applozic.mobicomkit.notification.icon"
-            android:resource="@drawable/ic_launcher" />
         <meta-data
             android:name="com.google.android.gms.version"
             android:value="@integer/google_play_services_version" />
+        <meta-data
+            android:name="com.applozic.mobicomkit.notification.smallIcon"
+            android:resource="@drawable/ic_launcher" /> <!-- Launcher white Icon -->
+
         <meta-data
             android:name="com.applozic.application.key"
             android:value="@string/application_key" />
@@ -181,50 +182,56 @@
         <meta-data
             android:name="activity.open.on.notification"
             android:value="com.applozic.mobicomkit.uiwidgets.conversation.activity.ConversationActivity" />
-
         <meta-data
             android:name="activity.open.on.call.button.click"
             android:value="com.applozic.mobicomkit.sample.MainActivity" />
-
         <meta-data
             android:name="io.fabric.ApiKey"
             android:value="9b43bb084d2988834ffc7cc5c9de46ad80356861" />
 
-        <!--<activity
+        <!--
+            <activity
             android:name="com.facebook.FacebookActivity"
             android:configChanges="keyboard|keyboardHidden|screenLayout|screenSize|orientation"
             android:label="@string/app_name"
-            android:theme="@android:style/Theme.Translucent.NoTitleBar" />-->
+            android:theme="@android:style/Theme.Translucent.NoTitleBar" />
+        -->
+
 
-        <!--Applozic -->
+        <!-- Applozic -->
         <service
             android:name="com.applozic.mobicomkit.api.conversation.MessageIntentService"
             android:exported="false" />
-
         <service
             android:name="com.applozic.mobicomkit.api.conversation.ApplozicIntentService"
             android:exported="false" />
-
         <service
             android:name="com.applozic.mobicomkit.api.conversation.ApplozicMqttIntentService"
             android:exported="false" />
-
-        <service android:name="com.applozic.mobicomkit.api.people.UserIntentService"
+        <service
+            android:name="com.applozic.mobicomkit.api.people.UserIntentService"
+            android:exported="false" />
+        <service
+            android:name="com.applozic.mobicomkit.api.conversation.ConversationReadService"
             android:exported="false" />
 
-        <service android:name="com.applozic.mobicomkit.api.conversation.ConversationReadService"
+        <service
+            android:name="com.applozic.mobicomkit.uiwidgets.notification.NotificationIntentService"
             android:exported="false" />
 
+
         <receiver android:name="com.applozic.mobicomkit.broadcast.NotificationBroadcastReceiver">
             <intent-filter>
                 <action android:name="applozic.LAUNCH_APP" />
             </intent-filter>
+
             <meta-data
                 android:name="activity.open.on.notification"
                 android:value="com.applozic.mobicomkit.uiwidgets.conversation.activity.ConversationActivity" />
         </receiver>
 
-        <service android:name="com.applozic.mobicomkit.api.conversation.ConversationIntentService"
+        <service
+            android:name="com.applozic.mobicomkit.api.conversation.ConversationIntentService"
             android:exported="false" />
 
         <receiver android:name="com.applozic.mobicomkit.broadcast.TimeChangeBroadcastReceiver">
@@ -234,14 +241,16 @@
             </intent-filter>
         </receiver>
 
-        <activity android:name="com.soundcloud.android.crop.CropImageActivity" />
+        <activity
+            android:name="com.theartofdev.edmodo.cropper.CropImageActivity"
+            android:theme="@style/Base.Theme.AppCompat" />
+
         <receiver
             android:name="com.applozic.mobicomkit.broadcast.ConnectivityReceiver"
             android:enabled="true"
             android:exported="true">
             <intent-filter>
                 <action android:name="android.intent.action.BOOT_COMPLETED" />
-                <action android:name="android.net.conn.CONNECTIVITY_CHANGE" />
             </intent-filter>
         </receiver>
 
@@ -249,11 +258,12 @@
 
         <activity
             android:name="com.applozic.mobicomkit.uiwidgets.people.activity.MobiComKitPeopleActivity"
-            android:configChanges="keyboardHidden|orientation|screenSize"
-            android:label="@string/activity_contacts_list"
+            android:configChanges="keyboardHidden|screenSize|smallestScreenSize|screenLayout|orientation"
+            android:label="@string/app_name"
             android:parentActivityName="com.applozic.mobicomkit.uiwidgets.conversation.activity.ConversationActivity"
             android:theme="@style/ApplozicTheme"
             android:windowSoftInputMode="adjustResize">
+
             <!-- Parent activity meta-data to support API level 7+ -->
             <meta-data
                 android:name="android.support.PARENT_ACTIVITY"
@@ -263,6 +273,15 @@
                 <action android:name="android.intent.action.SEARCH" />
             </intent-filter>
 
+            <intent-filter>
+                <action android:name="android.intent.action.SEND" />
+                <category android:name="android.intent.category.DEFAULT" />
+                <data android:mimeType="image/*" />
+                <data android:mimeType="audio/*" />
+                <data android:mimeType="video/*" />
+                <data android:mimeType="text/plain"/>
+            </intent-filter>
+
             <meta-data
                 android:name="android.app.searchable"
                 android:resource="@xml/searchable_contacts" />
@@ -274,20 +293,30 @@
             android:label="Image"
             android:parentActivityName="com.applozic.mobicomkit.uiwidgets.conversation.activity.ConversationActivity"
             android:theme="@style/Applozic_FullScreen_Theme">
+
             <!-- Parent activity meta-data to support API level 7+ -->
             <meta-data
                 android:name="android.support.PARENT_ACTIVITY"
                 android:value="com.applozic.mobicomkit.uiwidgets.conversation.activity.ConversationActivity" />
         </activity>
-
         <activity
             android:name="com.applozic.mobicomkit.uiwidgets.conversation.activity.MobicomLocationActivity"
-            android:configChanges="keyboardHidden|orientation|screenSize"
+            android:configChanges="keyboardHidden|screenSize|smallestScreenSize|screenLayout|orientation"
             android:parentActivityName="com.applozic.mobicomkit.uiwidgets.conversation.activity.ConversationActivity"
             android:theme="@style/ApplozicTheme"
-            android:windowSoftInputMode="adjustResize"></activity>
+            android:windowSoftInputMode="adjustResize" />
+        <activity
+            android:name=".SplashScreenActivity"
+            android:configChanges="keyboardHidden|orientation|screenSize"
+            android:label="@string/app_name"
+            android:theme="@style/Theme.Transparent">
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
 
+                <category android:name="android.intent.category.LAUNCHER" />
+            </intent-filter>
+        </activity>
 
     </application>
 
-</manifest>
+</manifest>
\ No newline at end of file
diff --git a/app/src/main/assets/applozic-settings.json b/app/src/main/assets/applozic-settings.json
new file mode 100644
index 00000000..2bef8849
--- /dev/null
+++ b/app/src/main/assets/applozic-settings.json
@@ -0,0 +1,84 @@
+{
+  "customMessageBackgroundColor": "#FF03A9F4",
+  "sentMessageBackgroundColor": "#FF03A9F4",
+  "receivedMessageBackgroundColor": "#FFFFFFFF",
+  "sendButtonBackgroundColor": "#FF03A9F4",
+  "attachmentIconsBackgroundColor": "#FF03A9F4",
+  "channelCustomMessageBgColor": "#cccccc",
+  "sentContactMessageTextColor:": "#5fba7d",
+  "receivedContactMessageTextColor": "#5fba7d",
+  "sentMessageTextColor": "#FFFFFFFF",
+  "receivedMessageTextColor": "#000000",
+  "messageEditTextTextColor": "#000000",
+  "sentMessageLinkTextColor": "#FFFFFFFF",
+  "receivedMessageLinkTextColor": "#5fba7d",
+  "messageEditTextHintTextColor": "#bdbdbd",
+  "noConversationLabelTextColor": "#000000",
+  "conversationDateTextColor": "#333333",
+  "conversationDayTextColor": "#333333",
+  "messageTimeTextColor": "#838b83",
+  "channelCustomMessageTextColor": "#666666",
+  "sentMessageBorderColor": "#FF03A9F4",
+  "receivedMessageBorderColor": "#FFFFFFFF",
+  "channelCustomMessageBorderColor": "#cccccc",
+  "collapsingToolbarLayoutColor": "#FF03A9F4",
+  "groupParticipantsTextColor": "#FF03A9F4",
+  "groupDeleteButtonBackgroundColor": "#FF03A9F4",
+  "groupExitButtonBackgroundColor": "#FF03A9F4",
+  "adminTextColor": "#FF03A9F4",
+  "attachCameraIconName": "applozic_ic_action_camera_new",
+  "adminBackgroundColor": "#FFFFFFFF",
+  "adminBorderColor": "#FF03A9F4",
+  "userNotAbleToChatTextColor": "#000000",
+  "audioPermissionNotFoundMsg": "",
+  "noConversationLabel": "You have no conversations",
+  "noSearchFoundForChatMessages": "No conversation found",
+  "totalRegisteredUserToFetch": 100,
+  "maxAttachmentAllowed": 10,
+  "maxAttachmentSizeAllowed": 30,
+  "totalOnlineUsers": 0,
+  "conversationContactImageVisibility": false,
+  "locationShareViaMap": true,
+  "startNewFloatingButton": false,
+  "startNewButton": true,
+  "onlineStatusMasterList": false,
+  "startNewGroup": true,
+  "imageCompression": false,
+  "inviteFriendsInContactActivity": false,
+  "registeredUserContactListCall": false,
+  "createAnyContact": false,
+  "showActionDialWithOutCalling": false,
+  "profileLogoutButton": false,
+  "userProfileFragment": true,
+  "messageSearchOption": false,
+  "hideGroupAddMembersButton": false,
+  "hideGroupNameUpdateButton": false,
+  "hideGroupExitButton": false,
+  "hideGroupRemoveMemberOption": false,
+  "profileOption": false,
+  "broadcastOption": true,
+  "restrictedWordMessage": " Please don't use restricted word",
+  "hideAttachmentButton": false,
+  "groupUsersOnlineStatus": false,
+  "launchChatFromProfilePicOrName": false,
+  "refreshOption": true,
+  "deleteOption": true,
+  "blockOption": true,
+  "muteOption": true,
+  "replyOption": true,
+  "logoutOption": false,
+  "logoutPackageName": "",
+  "attachmentOptions": {
+    ":location": true,
+    ":camera": true,
+    ":file": true,
+    ":audio": true,
+    ":video": true,
+    ":contact": true
+  },
+  "editTextHintText:":"Write a Message..",
+  "replyMessageLayoutSentMessageBackground":"#C0C0C0",
+  "replyMessageLayoutReceivedMessageBackground":"#F5F5F5",
+  "groupInfoScreenVisible":true
+
+}
diff --git a/app/src/main/assets/restrictWords.txt b/app/src/main/assets/restrictWords.txt
new file mode 100644
index 00000000..a9aee17e
--- /dev/null
+++ b/app/src/main/assets/restrictWords.txt
@@ -0,0 +1,723 @@
+a55
+,a55hole
+,aeolus
+,ahole
+,anal
+,analprobe
+,anilingus
+,anus
+,areola
+,areole
+,arian
+,aryan
+,ass
+,assbang
+,assbanged
+,assbangs
+,asses
+,assfuck
+,assfucker
+,assh0le
+,asshat
+,assho1e
+,ass hole
+,assholes
+,assmaster
+,assmunch
+,asswipe
+,asswipes
+,azazel
+,azz
+,b1tch
+,babe
+,babes
+,ballsack
+,bang
+,banger
+,barf
+,bastard
+,bastards
+,bawdy
+,beaner
+,beardedclam
+,beastiality
+,beatch
+,beater
+,beaver
+,beer
+,beeyotch
+,beotch
+,biatch
+,bigtits
+,big tits
+,bimbo
+,bitch
+,bitched
+,bitches
+,bitchy
+,blow job
+,blow
+,blowjob
+,blowjobs
+,bod
+,bodily
+,boink
+,bollock
+,bollocks
+,bollok
+,bone
+,boned
+,boner
+,boners
+,bong
+,boob
+,boobies
+,boobs
+,booby
+,booger
+,bookie
+,bootee
+,bootie
+,booty
+,booze
+,boozer
+,boozy
+,bosom
+,bosomy
+,bowel
+,bowels
+,bra
+,brassiere
+,breast
+,breasts
+,bugger
+,bukkake
+,bullshit
+,bull shit
+,bullshits
+,bullshitted
+,bullturds
+,bung
+,busty
+,butt
+,butt fuck
+,buttfuck
+,buttfucker
+,buttfucker
+,buttplug
+,c.0.c.k
+,c.o.c.k.
+,c.u.n.t
+,c0ck
+,c-0-c-k
+,caca
+,cahone
+,cameltoe
+,carpetmuncher
+,cawk
+,cervix
+,chinc
+,chincs
+,chink
+,chink
+,chode
+,chodes
+,cl1t
+,climax
+,clit
+,clitoris
+,clitorus
+,clits
+,clitty
+,cocain
+,cocaine
+,cock
+,c-o-c-k
+,cockblock
+,cockholster
+,cockknocker
+,cocks
+,cocksmoker
+,cocksucker
+,cock sucker
+,coital
+,commie
+,condom
+,coon
+,coons
+,corksucker
+,crabs
+,crack
+,cracker
+,crackwhore
+,crap
+,crappy
+,cum
+,cummin
+,cumming
+,cumshot
+,cumshots
+,cumslut
+,cumstain
+,cunilingus
+,cunnilingus
+,cunny
+,cunt
+,cunt
+,c-u-n-t
+,cuntface
+,cunthunter
+,cuntlick
+,cuntlicker
+,cunts
+,d0ng
+,d0uch3
+,d0uche
+,d1ck
+,d1ld0
+,d1ldo
+,dago
+,dagos
+,dammit
+,damn
+,damned
+,damnit
+,dawgie-style
+,dick
+,dickbag
+,dickdipper
+,dickface
+,dickflipper
+,dickhead
+,dickheads
+,dickish
+,dick-ish
+,dickripper
+,dicksipper
+,dickweed
+,dickwhipper
+,dickzipper
+,diddle
+,dike
+,dildo
+,dildos
+,diligaf
+,dillweed
+,dimwit
+,dingle
+,dipship
+,doggie-style
+,doggy-style
+,dong
+,doofus
+,doosh
+,dopey
+,douch3
+,douche
+,douchebag
+,douchebags
+,douchey
+,drunk
+,dumass
+,dumbass
+,dumbasses
+,dummy
+,dyke
+,dykes
+,ejaculate
+,enlargement
+,erect
+,erection
+,erotic
+,essohbee
+,extacy
+,extasy
+,f.u.c.k
+,fack
+,fag
+,fagg
+,fagged
+,faggit
+,faggot
+,fagot
+,fags
+,faig
+,faigt
+,fannybandit
+,fart
+,fartknocker
+,fat
+,felch
+,felcher
+,felching
+,fellate
+,fellatio
+,feltch
+,feltcher
+,fisted
+,fisting
+,fisty
+,floozy
+,foad
+,fondle
+,foobar
+,foreskin
+,freex
+,frigg
+,frigga
+,fubar
+,fuck
+,f-u-c-k
+,fuckass
+,fucked
+,fucked
+,fucker
+,fuckface
+,fuckin
+,fucking
+,fucknugget
+,fucknut
+,fuckoff
+,fucks
+,fucktard
+,fuck-tard
+,fuckup
+,fuckwad
+,fuckwit
+,fudgepacker
+,fuk
+,fvck
+,fxck
+,gae
+,gai
+,ganja
+,gay
+,gays
+,gey
+,gfy
+,ghay
+,ghey
+,gigolo
+,glans
+,goatse
+,godamn
+,godamnit
+,goddam
+,goddammit
+,goddamn
+,goldenshower
+,gonad
+,gonads
+,gook
+,gooks
+,gringo
+,gspot
+,g-spot
+,gtfo
+,guido
+,h0m0
+,h0mo
+,handjob
+,hard on
+,he11
+,hebe
+,heeb
+,hell
+,hemp
+,heroin
+,herp
+,herpes
+,herpy
+,hitler
+,hiv
+,hobag
+,hom0
+,homey
+,homo
+,homoey
+,honky
+,hooch
+,hookah
+,hooker
+,hoor
+,hootch
+,hooter
+,hooters
+,horny
+,hump
+,humped
+,humping
+,hussy
+,hymen
+,inbred
+,incest
+,injun
+,j3rk0ff
+,jackass
+,jackhole
+,jackoff
+,jap
+,japs
+,jerk
+,jerk0ff
+,jerked
+,jerkoff
+,jism
+,jiz
+,jizm
+,jizz
+,jizzed
+,junkie
+,junky
+,kike
+,kikes
+,kill
+,kinky
+,kkk
+,klan
+,knobend
+,kooch
+,kooches
+,kootch
+,kraut
+,kyke
+,labia
+,lech
+,leper
+,lesbians
+,lesbo
+,lesbos
+,lez
+,lezbian
+,lezbians
+,lezbo
+,lezbos
+,lezzie
+,lezzies
+,lezzy
+,lmao
+,lmfao
+,loin
+,loins
+,lube
+,lusty
+,mams
+,massa
+,masterbate
+,masterbating
+,masterbation
+,masturbate
+,masturbating
+,masturbation
+,maxi
+,menses
+,menstruate
+,menstruation
+,meth
+,m-fucking
+,mofo
+,molest
+,moolie
+,moron
+,motherfucka
+,motherfucker
+,motherfucking
+,mtherfucker
+,mthrfucker
+,mthrfucking
+,muff
+,muffdiver
+,murder
+,muthafuckaz
+,muthafucker
+,mutherfucker
+,mutherfucking
+,muthrfucking
+,nad
+,nads
+,naked
+,napalm
+,nappy
+,nazi
+,nazism
+,negro
+,nigga
+,niggah
+,niggas
+,niggaz
+,nigger
+,nigger
+,niggers
+,niggle
+,niglet
+,nimrod
+,ninny
+,nipple
+,nooky
+,nympho
+,opiate
+,opium
+,oral
+,orally
+,organ
+,orgasm
+,orgasmic
+,orgies
+,orgy
+,ovary
+,ovum
+,ovums
+,p.u.s.s.y.
+,paddy
+,paki
+,pantie
+,panties
+,panty
+,pastie
+,pasty
+,pcp
+,pecker
+,pedo
+,pedophile
+,pedophilia
+,pedophiliac
+,pee
+,peepee
+,penetrate
+,penetration
+,penial
+,penile
+,penis
+,perversion
+,peyote
+,phalli
+,phallic
+,phuck
+,pillowbiter
+,pimp
+,pinko
+,piss
+,pissed
+,pissoff
+,piss-off
+,pms
+,polack
+,pollock
+,poon
+,poontang
+,porn
+,porno
+,pornography
+,pot
+,potty
+,prick
+,prig
+,prostitute
+,prude
+,pube
+,pubic
+,pubis
+,punkass
+,punky
+,puss
+,pussies
+,pussy
+,pussypounder
+,puto
+,queaf
+,queef
+,queef
+,queer
+,queero
+,queers
+,quicky
+,quim
+,racy
+,rape
+,raped
+,raper
+,rapist
+,raunch
+,rectal
+,rectum
+,rectus
+,reefer
+,reetard
+,reich
+,retard
+,retarded
+,revue
+,rimjob
+,ritard
+,rtard
+,r-tard
+,rum
+,rump
+,rumprammer
+,ruski
+,s.h.i.t.
+,s.o.b.
+,s0b
+,sadism
+,sadist
+,scag
+,scantily
+,schizo
+,schlong
+,screw
+,screwed
+,scrog
+,scrot
+,scrote
+,scrotum
+,scrud
+,scum
+,seaman
+,seamen
+,seduce
+,semen
+,sex
+,sexual
+,sh1t
+,s-h-1-t
+,shamedame
+,shit
+,s-h-i-t
+,shite
+,shiteater
+,shitface
+,shithead
+,shithole
+,shithouse
+,shits
+,shitt
+,shitted
+,shitter
+,shitty
+,shiz
+,sissy
+,skag
+,skank
+,slave
+,sleaze
+,sleazy
+,slut
+,slutdumper
+,slutkiss
+,sluts
+,smegma
+,smut
+,smutty
+,snatch
+,sniper
+,snuff
+,s-o-b
+,sodom
+,souse
+,soused
+,sperm
+,spic
+,spick
+,spik
+,spiks
+,spooge
+,spunk
+,steamy
+,stfu
+,stiffy
+,stoned
+,strip
+,stroke
+,stupid
+,suck
+,sucked
+,sucking
+,sumofabiatch
+,t1t
+,tampon
+,tard
+,tawdry
+,teabagging
+,teat
+,terd
+,teste
+,testee
+,testes
+,testicle
+,testis
+,thrust
+,thug
+,tinkle
+,tit
+,titfuck
+,titi
+,tits
+,tittiefucker
+,titties
+,titty
+,tittyfuck
+,tittyfucker
+,toke
+,toots
+,tramp
+,transsexual
+,trashy
+,tubgirl
+,turd
+,tush
+,twat
+,twats
+,ugly
+,undies
+,unwed
+,urinal
+,urine
+,uterus
+,uzi
+,vag
+,vagina
+,valium
+,viagra
+,virgin
+,vixen
+,vodka
+,vomit
+,voyeur
+,vulgar
+,vulva
+,wad
+,wang
+,wank
+,wanker
+,wazoo
+,wedgie
+,weed
+,weenie
+,weewee
+,weiner
+,weirdo
+,wench
+,wetback
+,wh0re
+,wh0reface
+,whitey
+,whiz
+,whoralicious
+,whore
+,whorealicious
+,whored
+,whoreface
+,whorehopper
+,whorehouse
+,whores
+,whoring
+,wigger
+,womb
+,woody
+,wop
+,wtf
+,x-rated
+,xxx
+,yeasty
+,yobbo
+,zoophile
diff --git a/app/src/main/java/com/applozic/mobicomkit/sample/ApplozicSampleApplication.java b/app/src/main/java/com/applozic/mobicomkit/sample/ApplozicSampleApplication.java
index 2f7f3feb..a288f309 100644
--- a/app/src/main/java/com/applozic/mobicomkit/sample/ApplozicSampleApplication.java
+++ b/app/src/main/java/com/applozic/mobicomkit/sample/ApplozicSampleApplication.java
@@ -14,7 +14,7 @@
     @Override
     public void onCreate() {
         super.onCreate();
-       /// Fabric.with(this, new Crashlytics());
+       Fabric.with(this, new Crashlytics());
     }
 
     @Override
diff --git a/app/src/main/java/com/applozic/mobicomkit/sample/EcommerceFragment.java b/app/src/main/java/com/applozic/mobicomkit/sample/EcommerceFragment.java
index da0bcc85..7d4dcdcc 100755
--- a/app/src/main/java/com/applozic/mobicomkit/sample/EcommerceFragment.java
+++ b/app/src/main/java/com/applozic/mobicomkit/sample/EcommerceFragment.java
@@ -9,7 +9,6 @@
 import android.view.ViewGroup;
 
 
-
 /**
  * A simple {@link Fragment} subclass.
  * Activities that contain this fragment must implement the
@@ -30,6 +29,10 @@
 
     private OnFragmentInteractionListener mListener;
 
+    public EcommerceFragment() {
+        // Required empty public constructor
+    }
+
     /**
      * Use this factory method to create a new instance of
      * this fragment using the provided parameters.
@@ -48,10 +51,6 @@ public static EcommerceFragment newInstance(String param1, String param2) {
         return fragment;
     }
 
-    public EcommerceFragment() {
-        // Required empty public constructor
-    }
-
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
diff --git a/app/src/main/java/com/applozic/mobicomkit/sample/InitiateDialogFragment.java b/app/src/main/java/com/applozic/mobicomkit/sample/InitiateDialogFragment.java
new file mode 100644
index 00000000..d2926d91
--- /dev/null
+++ b/app/src/main/java/com/applozic/mobicomkit/sample/InitiateDialogFragment.java
@@ -0,0 +1,52 @@
+package com.applozic.mobicomkit.sample;
+
+import android.app.Dialog;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.os.Bundle;
+import android.support.v4.app.DialogFragment;
+import android.support.v7.app.AlertDialog;
+import android.text.TextUtils;
+import android.widget.EditText;
+import android.widget.Toast;
+
+import com.applozic.mobicomkit.uiwidgets.conversation.ConversationUIService;
+import com.applozic.mobicomkit.uiwidgets.conversation.activity.ConversationActivity;
+
+/**
+ * Created by sunil on 30/9/16.
+ */
+public class InitiateDialogFragment extends DialogFragment implements DialogInterface.OnClickListener {
+
+    private EditText inputEditText;
+
+    @Override
+    public Dialog onCreateDialog(Bundle savedInstanceState) {
+        inputEditText = new EditText(getActivity());
+        return new AlertDialog.Builder(getActivity()).setTitle(R.string.initiate_chat_info).setMessage(R.string.enter_user_id_info)
+                .setPositiveButton(R.string.start, this).setNegativeButton(R.string.cancel, null).setView(inputEditText).create();
+    }
+
+    @Override
+    public void onClick(DialogInterface dialog, int position) {
+
+        switch (position) {
+            case -1:
+                String editTextValue = inputEditText.getText().toString();
+                if (TextUtils.isEmpty(editTextValue) || inputEditText.getText().toString().trim().length() == 0) {
+                    Toast.makeText(getActivity(), R.string.empty_user_id_info, Toast.LENGTH_SHORT).show();
+                    return;
+                }
+                Intent intent = new Intent(getActivity(), ConversationActivity.class);
+                intent.putExtra(ConversationUIService.USER_ID, editTextValue);
+                startActivity(intent);
+                dialog.dismiss();
+                break;
+            case -2:
+                dialog.dismiss();
+                break;
+        }
+
+    }
+
+}
diff --git a/app/src/main/java/com/applozic/mobicomkit/sample/LoginActivity.java b/app/src/main/java/com/applozic/mobicomkit/sample/LoginActivity.java
index 813db86c..69865d99 100755
--- a/app/src/main/java/com/applozic/mobicomkit/sample/LoginActivity.java
+++ b/app/src/main/java/com/applozic/mobicomkit/sample/LoginActivity.java
@@ -101,7 +101,6 @@ protected void onCreate(Bundle savedInstanceState) {
 
         // Set up the login form.
         mEmailView = (AutoCompleteTextView) findViewById(R.id.email);
-        populateAutoComplete();
 
         mPhoneNumberView = (EditText) findViewById(R.id.phoneNumber);
         mUserIdView = (EditText) findViewById(R.id.userId);
@@ -146,7 +145,7 @@ public void onClick(View view) {
                     touchCount = 0;
 
                 } else {
-                    Toast.makeText(getApplicationContext(), "Click more  " + Integer.toString(5 - touchCount), Toast.LENGTH_SHORT).show();
+                    Toast.makeText(getApplicationContext(), getBaseContext().getString(R.string.click_more) + Integer.toString(5 - touchCount), Toast.LENGTH_SHORT).show();
                 }
             }
         });
@@ -218,7 +217,7 @@ public void attemptLogin(User.AuthenticationType authenticationType) {
         // Store values at the time of the login attempt.
         String email = mEmailView.getText().toString();
         String phoneNumber = mPhoneNumberView.getText().toString();
-        String userId = mUserIdView.getText().toString();
+        String userId = mUserIdView.getText().toString().trim();
         String password = mPasswordView.getText().toString();
         String displayName = mDisplayName.getText().toString();
 
@@ -231,7 +230,7 @@ public void attemptLogin(User.AuthenticationType authenticationType) {
             cancel = true;
         }
         // Check for a valid password, if the user entered one.
-        if ((TextUtils.isEmpty(mPasswordView.getText().toString())||mPasswordView.getText().toString().trim().length() == 0) && !isPasswordValid(mPasswordView.getText().toString())) {
+        if ((TextUtils.isEmpty(mPasswordView.getText().toString()) || mPasswordView.getText().toString().trim().length() == 0) && !isPasswordValid(mPasswordView.getText().toString())) {
             mPasswordView.setError(getString(R.string.error_invalid_password));
             focusView = mPasswordView;
             cancel = true;
@@ -265,15 +264,9 @@ public void attemptLogin(User.AuthenticationType authenticationType) {
                 public void onSuccess(RegistrationResponse registrationResponse, final Context context) {
                     mAuthTask = null;
                     showProgress(false);
-                    ApplozicSetting.getInstance(context).showStartNewButton().showPriceOption();
 
                     //Basic settings...
 
-                    //ApplozicSetting.getInstance(context).hideConversationContactImage().hideStartNewButton().hideStartNewFloatingActionButton();
-                    ApplozicSetting.getInstance(context).showStartNewGroupButton()
-                            .setCompressedImageSizeInMB(5)
-                            .enableImageCompression()
-                            .setMaxAttachmentAllowed(5);
                     ApplozicClient.getInstance(context).setContextBasedChat(true).setHandleDial(true);
 
                     Map<ApplozicSetting.RequestCode, String> activityCallbacks = new HashMap<ApplozicSetting.RequestCode, String>();
@@ -287,7 +280,7 @@ public void onSuccess(RegistrationResponse registrationResponse, final Context c
 
                     //Start GCM registration....
 
-                    PushNotificationTask.TaskListener pushNotificationTaskListener=  new PushNotificationTask.TaskListener() {
+                    PushNotificationTask.TaskListener pushNotificationTaskListener = new PushNotificationTask.TaskListener() {
                         @Override
                         public void onSuccess(RegistrationResponse registrationResponse) {
 
@@ -298,8 +291,8 @@ public void onFailure(RegistrationResponse registrationResponse, Exception excep
 
                         }
                     };
-                    PushNotificationTask pushNotificationTask = new PushNotificationTask(Applozic.getInstance(context).getDeviceRegistrationId(),pushNotificationTaskListener,context);
-                    pushNotificationTask.execute((Void)null);
+                    PushNotificationTask pushNotificationTask = new PushNotificationTask(Applozic.getInstance(context).getDeviceRegistrationId(), pushNotificationTaskListener, context);
+                    pushNotificationTask.execute((Void) null);
 
                     buildContactData();
 
@@ -307,8 +300,8 @@ public void onFailure(RegistrationResponse registrationResponse, Exception excep
                     Intent mainActvity = new Intent(context, MainActivity.class);
                     startActivity(mainActvity);
                     Intent intent = new Intent(context, ConversationActivity.class);
-                    if(ApplozicClient.getInstance(LoginActivity.this).isContextBasedChat()){
-                        intent.putExtra(ConversationUIService.CONTEXT_BASED_CHAT,true);
+                    if (ApplozicClient.getInstance(LoginActivity.this).isContextBasedChat()) {
+                        intent.putExtra(ConversationUIService.CONTEXT_BASED_CHAT, true);
                     }
                     startActivity(intent);
                     finish();
@@ -323,7 +316,7 @@ public void onFailure(RegistrationResponse registrationResponse, Exception excep
                     AlertDialog alertDialog = new AlertDialog.Builder(LoginActivity.this).create();
                     alertDialog.setTitle(getString(R.string.text_alert));
                     alertDialog.setMessage(exception.toString());
-                    alertDialog.setButton(AlertDialog.BUTTON_NEUTRAL, getString(android.R.string.ok),
+                    alertDialog.setButton(AlertDialog.BUTTON_NEUTRAL, getString(R.string.ok_alert),
                             new DialogInterface.OnClickListener() {
                                 public void onClick(DialogInterface dialog, int which) {
                                     dialog.dismiss();
@@ -426,7 +419,7 @@ public void onBackPressed() {
         if (exit) {
             finish();
         } else {
-            Toast.makeText(this, "Press Back again to Exit.", Toast.LENGTH_SHORT).show();
+            Toast.makeText(this, this.getString(R.string.press_back_again_to_exit), Toast.LENGTH_SHORT).show();
             exit = true;
 
             new Handler().postDelayed(new Runnable() {
@@ -511,7 +504,7 @@ private void requestContactsPermissions() {
 
             Snackbar.make(layout, R.string.contact_permission,
                     Snackbar.LENGTH_INDEFINITE)
-                    .setAction(android.R.string.ok, new View.OnClickListener() {
+                    .setAction(R.string.ok_alert, new View.OnClickListener() {
                         @Override
                         public void onClick(View view) {
                             ActivityCompat
diff --git a/app/src/main/java/com/applozic/mobicomkit/sample/MainActivity.java b/app/src/main/java/com/applozic/mobicomkit/sample/MainActivity.java
index 7588bf20..de4439f6 100755
--- a/app/src/main/java/com/applozic/mobicomkit/sample/MainActivity.java
+++ b/app/src/main/java/com/applozic/mobicomkit/sample/MainActivity.java
@@ -6,6 +6,7 @@
 import android.content.Intent;
 import android.net.Uri;
 import android.os.Bundle;
+import android.support.v4.app.DialogFragment;
 import android.support.v4.app.Fragment;
 import android.support.v4.app.FragmentActivity;
 import android.support.v4.app.FragmentManager;
@@ -25,23 +26,28 @@
 import com.applozic.mobicomkit.ApplozicClient;
 import com.applozic.mobicomkit.api.account.user.MobiComUserPreference;
 import com.applozic.mobicomkit.api.account.user.UserLogoutTask;
+import com.applozic.mobicomkit.api.conversation.Message;
+import com.applozic.mobicomkit.api.conversation.MessageIntentService;
+import com.applozic.mobicomkit.api.conversation.MobiComConversationService;
 import com.applozic.mobicomkit.contact.AppContactService;
 import com.applozic.mobicomkit.feed.TopicDetail;
-import com.applozic.mobicomkit.uiwidgets.async.ApplzoicConversationCreateTask;
+import com.applozic.mobicomkit.uiwidgets.async.ApplozicConversationCreateTask;
 import com.applozic.mobicomkit.uiwidgets.conversation.ConversationUIService;
 import com.applozic.mobicomkit.uiwidgets.conversation.activity.ConversationActivity;
 import com.applozic.mobicommons.people.channel.Conversation;
 import com.applozic.mobicommons.people.contact.Contact;
 
+import java.util.HashMap;
+import java.util.Map;
+
 
 public class MainActivity extends ActionBarActivity
         implements NavigationDrawerFragment.NavigationDrawerCallbacks, EcommerceFragment.OnFragmentInteractionListener {
-    private UserLogoutTask userLogoutTask;
     public static final String TAKE_ORDER = "takeOrder";
     public static final String TAG = "MainActivity";
     public static final String TAKE_ORDER_USERID_METADATA = "com.applozic.take.order.userId";
     private static final String CONVERSATION_FRAGMENT = "ConversationFragment";
-
+    private UserLogoutTask userLogoutTask;
     /**
      * Fragment managing the behaviors, interactions and presentation of the navigation drawer.
      */
@@ -86,6 +92,15 @@ protected void onCreate(Bundle savedInstanceState) {
 
         setContentView(R.layout.activity_main);
 
+        MobiComUserPreference userPreference = MobiComUserPreference.getInstance(this);
+        if (!userPreference.isRegistered()) {
+            Intent intent = new Intent(this, LoginActivity.class);
+            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_SINGLE_TOP);
+            startActivity(intent);
+            finish();
+            return;
+        }
+
         mNavigationDrawerFragment = (NavigationDrawerFragment)
                 getSupportFragmentManager().findFragmentById(R.id.navigation_drawer);
         mTitle = getTitle();
@@ -98,15 +113,7 @@ protected void onCreate(Bundle savedInstanceState) {
         //Put Support Contact Data
         buildSupportContactData();
 
-        MobiComUserPreference userPreference = MobiComUserPreference.getInstance(this);
-        if (!userPreference.isRegistered()) {
-            Intent intent = new Intent(this, LoginActivity.class);
-            //startActivity(intent);
-            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_SINGLE_TOP);
-            startActivity(intent);
-            finish();
-            return;
-        } /*else {
+        /*else {
             Intent intent = new Intent(this, ConversationActivity.class);
                 startActivity(intent);
         }*/
@@ -123,8 +130,8 @@ public void onNavigationDrawerItemSelected(int position) {
 
         if (position == 1) {
             Intent intent = new Intent(this, ConversationActivity.class);
-            if(ApplozicClient.getInstance(this).isContextBasedChat()){
-                intent.putExtra(ConversationUIService.CONTEXT_BASED_CHAT,true);
+            if (ApplozicClient.getInstance(this).isContextBasedChat()) {
+                intent.putExtra(ConversationUIService.CONTEXT_BASED_CHAT, true);
             }
             startActivity(intent);
             return;
@@ -149,12 +156,12 @@ public void onNavigationDrawerItemSelected(int position) {
 
         if (position == 2) {
 
-            UserLogoutTask.TaskListener userLogoutTaskListener = new UserLogoutTask.TaskListener(){
+            UserLogoutTask.TaskListener userLogoutTaskListener = new UserLogoutTask.TaskListener() {
 
                 @Override
                 public void onSuccess(Context context) {
                     userLogoutTask = null;
-                    Toast.makeText(getBaseContext(), "Log out successful", Toast.LENGTH_SHORT).show();
+                    Toast.makeText(getBaseContext(),getBaseContext().getString(R.string.log_out_successful), Toast.LENGTH_SHORT).show();
                     Intent intent = new Intent(context, LoginActivity.class);
                     intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_SINGLE_TOP);
                     startActivity(intent);
@@ -167,7 +174,7 @@ public void onFailure(Exception exception) {
                     AlertDialog alertDialog = new AlertDialog.Builder(MainActivity.this).create();
                     alertDialog.setTitle(getString(R.string.text_alert));
                     alertDialog.setMessage(exception.toString());
-                    alertDialog.setButton(AlertDialog.BUTTON_NEUTRAL, getString(android.R.string.ok),
+                    alertDialog.setButton(AlertDialog.BUTTON_NEUTRAL, getString(R.string.ok_alert),
                             new DialogInterface.OnClickListener() {
                                 public void onClick(DialogInterface dialog, int which) {
                                     dialog.dismiss();
@@ -179,10 +186,32 @@ public void onClick(DialogInterface dialog, int which) {
                 }
             };
 
-            userLogoutTask = new UserLogoutTask(userLogoutTaskListener,this);
-            userLogoutTask.execute((Void)null);
+            userLogoutTask = new UserLogoutTask(userLogoutTaskListener, this);
+            userLogoutTask.execute((Void) null);
+
+        }
+
+        if (position == 3) {
+            Map<String, String> messageMetaData = new HashMap<>();
+            messageMetaData.put(Message.MetaDataType.KEY.getValue(), Message.MetaDataType.HIDDEN.getValue());
+            Message message = new Message();
+            MobiComUserPreference userPreferences = MobiComUserPreference.getInstance(MainActivity.this);
+            message.setContactIds("android");
+            message.setTo("android");
+            message.setContentType(Message.ContentType.CUSTOM.getValue());
+            message.setMessage("this is meta data hidden");
+            message.setMetadata(messageMetaData);
+            message.setStoreOnDevice(Boolean.TRUE);
+            message.setRead(Boolean.TRUE);
+            message.setCreatedAtTime(System.currentTimeMillis() + userPreferences.getDeviceTimeOffset());
+            message.setSendToDevice(Boolean.FALSE);
+            message.setType(Message.MessageType.MT_OUTBOX.getValue());
+            message.setDeviceKeyString(userPreferences.getDeviceKeyString());
+            message.setSource(Message.Source.MT_MOBILE_APP.getValue());
+            new MobiComConversationService(MainActivity.this).sendMessage(message, MessageIntentService.class);
         }
 
+
         FragmentManager fragmentManager = getSupportFragmentManager();
         fragmentManager.beginTransaction()
                 .replace(R.id.container, PlaceholderFragment.newInstance(position + 1))
@@ -202,17 +231,17 @@ public void onClick(DialogInterface dialog, int which) {
 
     public void takeOrder(View v) {
         Conversation conversation = buildConversation();
-        ApplzoicConversationCreateTask applzoicConversationCreateTask;
+        ApplozicConversationCreateTask applozicConversationCreateTask;
 
-        ApplzoicConversationCreateTask.ConversationCreateListener conversationCreateListener =  new ApplzoicConversationCreateTask.ConversationCreateListener() {
+        ApplozicConversationCreateTask.ConversationCreateListener conversationCreateListener = new ApplozicConversationCreateTask.ConversationCreateListener() {
             @Override
             public void onSuccess(Integer conversationId, Context context) {
-                Log.i(TAG,"ConversationID is:"+conversationId);
+                Log.i(TAG, "ConversationID is:" + conversationId);
                 Intent takeOrderIntent = new Intent(context, ConversationActivity.class);
                 takeOrderIntent.putExtra(TAKE_ORDER, true);
-                takeOrderIntent.putExtra(ConversationUIService.CONTEXT_BASED_CHAT,true);
+                takeOrderIntent.putExtra(ConversationUIService.CONTEXT_BASED_CHAT, true);
                 takeOrderIntent.putExtra(ConversationUIService.USER_ID, "usertest2");
-                takeOrderIntent.putExtra(ConversationUIService.DEFAULT_TEXT, "Hello I am interested in your property, Can we chat?");
+                takeOrderIntent.putExtra(ConversationUIService.DEFAULT_TEXT, R.string.intrest_in_chat);
                 takeOrderIntent.putExtra(ConversationUIService.CONVERSATION_ID,conversationId);
                 startActivity(takeOrderIntent);
 
@@ -223,8 +252,8 @@ public void onFailure(Exception e, Context context) {
 
             }
         };
-        applzoicConversationCreateTask =  new ApplzoicConversationCreateTask(MainActivity.this,conversationCreateListener,conversation);
-        applzoicConversationCreateTask.execute((Void)null);
+        applozicConversationCreateTask = new ApplozicConversationCreateTask(MainActivity.this, conversationCreateListener, conversation);
+        applozicConversationCreateTask.execute((Void) null);
 
     }
 
@@ -234,19 +263,32 @@ private Conversation buildConversation() {
         conversation.setUserId("usertest2");
         conversation.setTopicId("Topic#Id#Test");
         TopicDetail topic = new TopicDetail();
-        topic.setTitle("TestTopic2");
-        topic.setSubtitle("Topic1");
+        topic.setTitle(getResources().getString(R.string.TestTopic2));
+        topic.setSubtitle(getResources().getString(R.string.Topic_1));
         topic.setLink("https://www.applozic.com/resources/sidebox/images/applozic.png");
-        topic.setKey1("Qty");
+        topic.setKey1(getResources().getString(R.string.Qty));
         topic.setValue1("1000");
-        topic.setKey2("Price");
-        topic.setValue2("20 Rs");
+        topic.setKey2(getResources().getString(R.string.Price));
+        topic.setValue2(getResources().getString(R.string.rs));
         conversation.setSenderSmsFormat(MobiComUserPreference.getInstance(this).getUserId(), "SENDER SMS  FORMAT");
         conversation.setReceiverSmsFormat("usertest2", "RECEIVER SMS FORMAT");
         conversation.setTopicDetail(topic.getJson());
         return conversation;
     }
 
+    public void initiateChatClick(View v) {
+        FragmentManager supportFragmentManager = getSupportFragmentManager();
+        DialogFragment fragment = new InitiateDialogFragment();
+        FragmentTransaction fragmentTransaction = supportFragmentManager
+                .beginTransaction();
+        Fragment prev = getSupportFragmentManager().findFragmentByTag("InitiateDialogFragment");
+        if (prev != null) {
+            fragmentTransaction.remove(prev);
+        }
+        fragmentTransaction.addToBackStack(null);
+        fragment.show(fragmentTransaction, "InitiateDialogFragment");
+    }
+
     public void groupChat(View v) {
         Intent groupChat = new Intent(this, ConversationActivity.class);
         groupChat.putExtra(TAKE_ORDER, true);
diff --git a/app/src/main/java/com/applozic/mobicomkit/sample/NavigationDrawerFragment.java b/app/src/main/java/com/applozic/mobicomkit/sample/NavigationDrawerFragment.java
index 9e0ae885..888c3128 100755
--- a/app/src/main/java/com/applozic/mobicomkit/sample/NavigationDrawerFragment.java
+++ b/app/src/main/java/com/applozic/mobicomkit/sample/NavigationDrawerFragment.java
@@ -255,8 +255,8 @@ public boolean onOptionsItemSelected(MenuItem item) {
 
         if (item.getItemId() == R.id.action_example) {
             Intent intent = new Intent(getActivity(), ConversationActivity.class);
-            if(ApplozicClient.getInstance(getActivity()).isContextBasedChat()){
-                intent.putExtra(ConversationUIService.CONTEXT_BASED_CHAT,true);
+            if (ApplozicClient.getInstance(getActivity()).isContextBasedChat()) {
+                intent.putExtra(ConversationUIService.CONTEXT_BASED_CHAT, true);
             }
             startActivity(intent);
             return true;
diff --git a/app/src/main/java/com/applozic/mobicomkit/sample/SplashScreenActivity.java b/app/src/main/java/com/applozic/mobicomkit/sample/SplashScreenActivity.java
new file mode 100644
index 00000000..cca43e41
--- /dev/null
+++ b/app/src/main/java/com/applozic/mobicomkit/sample/SplashScreenActivity.java
@@ -0,0 +1,36 @@
+package com.applozic.mobicomkit.sample;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+import android.os.Handler;
+
+import com.applozic.mobicomkit.api.account.user.MobiComUserPreference;
+
+/**
+ * Created by sunil on 21/12/2016.
+ */
+
+public class SplashScreenActivity extends Activity {
+    private final int SPLASH_DISPLAY_LENGTH = 1000;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.splash_screen_layout);
+        new Handler().postDelayed(new Runnable() {
+            @Override
+            public void run() {
+                if (MobiComUserPreference.getInstance(SplashScreenActivity.this).isLoggedIn()) {
+                    Intent mainIntent = new Intent(SplashScreenActivity.this, MainActivity.class);
+                    SplashScreenActivity.this.startActivity(mainIntent);
+                    SplashScreenActivity.this.finish();
+                } else {
+                    Intent mainIntent = new Intent(SplashScreenActivity.this, LoginActivity.class);
+                    SplashScreenActivity.this.startActivity(mainIntent);
+                    SplashScreenActivity.this.finish();
+                }
+            }
+        }, SPLASH_DISPLAY_LENGTH);
+    }
+}
diff --git a/app/src/main/java/com/applozic/mobicomkit/sample/pushnotification/FCMRegistrationUtils.java b/app/src/main/java/com/applozic/mobicomkit/sample/pushnotification/FCMRegistrationUtils.java
deleted file mode 100755
index 7ba97dff..00000000
--- a/app/src/main/java/com/applozic/mobicomkit/sample/pushnotification/FCMRegistrationUtils.java
+++ /dev/null
@@ -1,125 +0,0 @@
-package com.applozic.mobicomkit.sample.pushnotification;
-
-import android.content.Context;
-import android.os.Handler;
-import android.os.Message;
-import android.text.TextUtils;
-import android.util.Log;
-import android.widget.Toast;
-
-import com.applozic.mobicomkit.api.account.register.RegistrationResponse;
-import com.applozic.mobicomkit.api.account.user.MobiComUserPreference;
-import com.applozic.mobicomkit.api.account.user.PushNotificationTask;
-import com.google.android.gms.common.ConnectionResult;
-import com.google.android.gms.common.GoogleApiAvailability;
-import com.google.firebase.iid.FirebaseInstanceId;
-
-public class FCMRegistrationUtils extends Handler {
-
-    private static final String TAG = "GCMRegistrationUtils";
-    private static final String GCM_SENDER_ID = "195932243324";
-    private final static int PLAY_SERVICES_RESOLUTION_REQUEST = 9000;
-    private  Context context;
-    private PushNotificationTask pushNotificationTask = null;
-
-    public FCMRegistrationUtils(Context context) {
-        super();
-       this.context = context;
-    }
-
-    @Override
-    public void handleMessage(final Message msg) {
-        super.handleMessage(msg);
-        if (msg.what == 1) {
-            final String pushnotificationId = msg.obj.toString();
-            PushNotificationTask.TaskListener listener = new PushNotificationTask.TaskListener() {
-
-                @Override
-                public void onSuccess(RegistrationResponse registrationResponse) {
-                }
-
-                @Override
-                public void onFailure(RegistrationResponse registrationResponse, Exception exception) {
-                }
-            };
-
-            pushNotificationTask = new PushNotificationTask(pushnotificationId, listener, context);
-            pushNotificationTask.execute((Void) null);
-
-        } else {
-            Log.i(TAG, "Handler: Background registration failed");
-        }
-    }
-
-    // To Register for push notification service
-    public void setUpFcmNotification() {
-        // Check device for Play Services APK. If check succeeds, proceed with
-        // GCM registration.
-        if (checkPlayServices()) {
-            String regid = MobiComUserPreference.getInstance(context).getDeviceRegistrationId();
-            if (TextUtils.isEmpty(regid)) {
-                registerInBackground(this);
-            }
-            Log.i(TAG, "push regid: " + regid);
-        } else {
-            Log.i(TAG, "No valid Google Play Services APK found.");
-        }
-    }
-
-    /**
-     * Check the device to make sure it has the Google Play Services APK. If it doesn't, display a dialog that allows users
-     * to download the APK from the Google Play Store or enable it in the device's system settings.
-     */
-    private boolean checkPlayServices() {
-        GoogleApiAvailability apiAvailability = GoogleApiAvailability.getInstance();
-        int resultCode = apiAvailability.isGooglePlayServicesAvailable(context);
-        if (resultCode != ConnectionResult.SUCCESS) {
-            if (apiAvailability.isUserResolvableError(resultCode)) {
-                Toast.makeText(context,"Please download the Google play store apk",Toast.LENGTH_SHORT).show();
-            }else {
-                Log.e(TAG, "This device is not supported for Google Play Services");
-            }
-            return false;
-        }
-        return true;
-    }
-
-    /**
-     * Registers the application with GCM servers asynchronously. Stores the registration ID and app versionCode in the
-     * application's shared preferences.
-     */
-    private void registerInBackground(final Handler handler) {
-
-        new Thread(new Runnable() {
-
-            int retryCount = 0;
-
-            @Override
-            public void run() {
-                Log.i(TAG, "Registering In Background Thread");
-                try {
-                    String refreshedToken = FirebaseInstanceId.getInstance().getToken();
-                    Message msg = new Message();
-                    msg.what = 1; // success
-                    msg.obj = refreshedToken;
-                    handler.sendMessage(msg);
-                } catch (Exception ex) {
-                    // Retry three times....
-                    retryCount++;
-                    if (retryCount < 3) {
-                        try {
-                            Thread.sleep(2000);
-                        } catch (InterruptedException e) {
-                        }
-                        run();
-                    } else {
-                        Log.i(TAG, "Error :" + ex.getMessage() + "\n");
-                        Message msg = new Message();
-                        msg.what = 0; // failure
-                        handler.sendMessage(msg);
-                    }
-                }
-            }
-        }).start();
-    }
-}
\ No newline at end of file
diff --git a/app/src/main/java/com/applozic/mobicomkit/sample/pushnotification/FcmInstanceIDListenerService.java b/app/src/main/java/com/applozic/mobicomkit/sample/pushnotification/FcmInstanceIDListenerService.java
index 2eaa4feb..b082b17c 100755
--- a/app/src/main/java/com/applozic/mobicomkit/sample/pushnotification/FcmInstanceIDListenerService.java
+++ b/app/src/main/java/com/applozic/mobicomkit/sample/pushnotification/FcmInstanceIDListenerService.java
@@ -15,6 +15,7 @@
 public class FcmInstanceIDListenerService extends FirebaseInstanceIdService {
 
     final private static String TAG = "FcmInstanceIDListener";
+
     @Override
     public void onTokenRefresh() {
         super.onTokenRefresh();
diff --git a/app/src/main/java/com/applozic/mobicomkit/sample/pushnotification/FcmListenerService.java b/app/src/main/java/com/applozic/mobicomkit/sample/pushnotification/FcmListenerService.java
index 3d744e94..fa2507bc 100755
--- a/app/src/main/java/com/applozic/mobicomkit/sample/pushnotification/FcmListenerService.java
+++ b/app/src/main/java/com/applozic/mobicomkit/sample/pushnotification/FcmListenerService.java
@@ -18,9 +18,9 @@
     @Override
     public void onMessageReceived(RemoteMessage remoteMessage) {
 
-        Log.i(TAG,"Message data:"+remoteMessage.getData());
+        Log.i(TAG, "Message data:" + remoteMessage.getData());
 
-        if(remoteMessage.getData().size()>0){
+        if (remoteMessage.getData().size() > 0) {
             if (MobiComPushReceiver.isMobiComPushNotification(remoteMessage.getData())) {
                 Log.i(TAG, "Applozic notification processing...");
                 MobiComPushReceiver.processMessageAsync(this, remoteMessage.getData());
diff --git a/app/src/main/res/layout-land/activity_login.xml b/app/src/main/res/layout-land/activity_login.xml
index 4d8b64da..0506fd3f 100755
--- a/app/src/main/res/layout-land/activity_login.xml
+++ b/app/src/main/res/layout-land/activity_login.xml
@@ -9,6 +9,8 @@
     android:orientation="vertical"
     android:paddingBottom="@dimen/activity_vertical_margin"
     android:paddingLeft="@dimen/mobicom_activity_horizontal_margin"
+    android:paddingStart="@dimen/mobicom_activity_horizontal_margin"
+    android:paddingEnd="@dimen/mobicom_activity_horizontal_margin"
     android:paddingRight="@dimen/mobicom_activity_horizontal_margin"
     android:paddingTop="@dimen/activity_vertical_margin"
     tools:context="com.applozic.mobicomkit.sample.LoginActivity">
@@ -50,7 +52,7 @@
         android:layout_gravity="center"
         android:background="#FFFFFF"
         android:entries="@array/select_url"
-        android:textAlignment="center"/>
+        android:textAlignment="center" />
 
     <ScrollView
         android:id="@+id/login_form"
@@ -71,8 +73,8 @@
                 style="@style/EditText"
                 android:layout_width="match_parent"
                 android:layout_height="wrap_content"
-                android:layout_marginTop="2dp"
                 android:layout_marginBottom="5dp"
+                android:layout_marginTop="2dp"
                 android:background="#FFF"
                 android:hint="@string/prompt_user_id"
                 android:imeOptions="actionNext"
@@ -136,7 +138,7 @@
                 android:layout_height="wrap_content"
                 android:layout_marginBottom="5dp"
                 android:background="#FFF"
-                android:hint="Display Name"
+                android:hint="@string/prompt_display_name"
                 android:imeOptions="actionNext"
                 android:inputType="text"
                 android:maxLines="2"
@@ -164,10 +166,9 @@
         android:id="@+id/footerSnack"
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
+        android:layout_gravity="top"
         android:orientation="vertical"
-        android:visibility="gone"
-        android:layout_gravity="top">
-    </LinearLayout>
+        android:visibility="gone"></LinearLayout>
 
     <!--
     <com.facebook.login.widget.LoginButton
diff --git a/app/src/main/res/layout/activity_login.xml b/app/src/main/res/layout/activity_login.xml
index de2cb596..23c88150 100755
--- a/app/src/main/res/layout/activity_login.xml
+++ b/app/src/main/res/layout/activity_login.xml
@@ -11,6 +11,8 @@
     android:paddingLeft="@dimen/mobicom_activity_horizontal_margin"
     android:paddingRight="@dimen/mobicom_activity_horizontal_margin"
     android:paddingTop="@dimen/activity_vertical_margin"
+    android:paddingStart="@dimen/mobicom_activity_horizontal_margin"
+    android:paddingEnd="@dimen/mobicom_activity_horizontal_margin"
     tools:context="com.applozic.mobicomkit.sample.LoginActivity">
 
     <!-- Login progress -->
@@ -71,8 +73,8 @@
                 style="@style/EditText"
                 android:layout_width="match_parent"
                 android:layout_height="wrap_content"
-                android:layout_marginTop="5dp"
                 android:layout_marginBottom="5dp"
+                android:layout_marginTop="5dp"
                 android:background="#FFF"
                 android:hint="@string/prompt_user_id"
                 android:imeOptions="actionNext"
@@ -136,7 +138,7 @@
                 android:layout_height="wrap_content"
                 android:layout_marginBottom="5dp"
                 android:background="#FFF"
-                android:hint="Display Name"
+                android:hint="@string/prompt_display_name"
                 android:imeOptions="actionNext"
                 android:inputType="text"
                 android:maxLines="2"
@@ -164,10 +166,9 @@
         android:id="@+id/footerSnack"
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
+        android:layout_gravity="top"
         android:orientation="vertical"
-        android:visibility="gone"
-        android:layout_gravity="top">
-    </LinearLayout>
+        android:visibility="gone"/>
 
     <!--
     <com.facebook.login.widget.LoginButton
diff --git a/app/src/main/res/layout/activity_main.xml b/app/src/main/res/layout/activity_main.xml
index f8fd1190..2b09b9bc 100755
--- a/app/src/main/res/layout/activity_main.xml
+++ b/app/src/main/res/layout/activity_main.xml
@@ -21,10 +21,10 @@
          the container. -->
     <fragment
         android:id="@+id/navigation_drawer"
+        android:name="com.applozic.mobicomkit.sample.NavigationDrawerFragment"
         android:layout_width="@dimen/navigation_drawer_width"
         android:layout_height="match_parent"
         android:layout_gravity="start"
-        android:name="com.applozic.mobicomkit.sample.NavigationDrawerFragment"
         tools:layout="@layout/fragment_navigation_drawer" />
 
 </android.support.v4.widget.DrawerLayout>
diff --git a/app/src/main/res/layout/fragment_ecommerce.xml b/app/src/main/res/layout/fragment_ecommerce.xml
index dade9107..3594a91d 100755
--- a/app/src/main/res/layout/fragment_ecommerce.xml
+++ b/app/src/main/res/layout/fragment_ecommerce.xml
@@ -13,34 +13,48 @@
         android:orientation="vertical">
 
         <TextView
+            android:id="@+id/textView2"
             android:layout_width="fill_parent"
             android:layout_height="wrap_content"
-            android:textSize="25sp"
-            android:text="Applozic "
-            android:textColor="#000000"
+            android:layout_alignParentTop="true"
             android:gravity="center"
-            android:id="@+id/textView2"
-            android:layout_alignParentTop="true" />
+            android:text="@string/app_name"
+            android:textColor="#000000"
+            android:textSize="25sp" />
 
         <TextView
             android:layout_width="fill_parent"
             android:layout_height="wrap_content"
+            android:layout_alignParentLeft="true"
+            android:layout_alignParentStart="true"
+            android:layout_below="@+id/textView2"
+            android:layout_marginTop="10dp"
+            android:gravity="center"
             android:paddingLeft="2dp"
             android:paddingRight="2dp"
-            android:gravity="center"
             android:text="@string/ecommerce_text1"
-            android:textColor="#000000"
-            android:layout_below="@+id/textView2"
-            android:layout_alignParentLeft="true"
-            android:layout_alignParentStart="true"
-            android:layout_marginTop="10dp" />
+            android:textColor="#000000" />
+
+        <Button
+            android:id="@+id/initiateChatButton"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_centerInParent="true"
+            android:layout_gravity="center"
+            android:layout_marginLeft="10dp"
+            android:layout_marginRight="10dp"
+            android:layout_marginTop="10dp"
+            android:background="@color/holo_blue"
+            android:onClick="initiateChatClick"
+            android:text="@string/initiate_chat_button_info"
+            android:textColor="@color/white" />
 
         <Button
             android:id="@+id/button_order"
             android:layout_width="match_parent"
             android:layout_height="wrap_content"
+            android:layout_below="@+id/initiateChatButton"
             android:layout_gravity="center"
-            android:layout_centerInParent="true"
             android:layout_marginLeft="10dp"
             android:layout_marginRight="10dp"
             android:layout_marginTop="10dp"
@@ -49,7 +63,7 @@
             android:text="@string/order_sample_button"
             android:textColor="@color/white" />
 
-       <Button
+        <Button
             android:id="@+id/launch_group"
             android:layout_width="match_parent"
             android:layout_height="wrap_content"
@@ -60,9 +74,9 @@
             android:layout_marginTop="10dp"
             android:background="@color/holo_blue"
             android:onClick="groupChat"
-            android:text="Group chat"
-            android:visibility="gone"
-            android:textColor="@color/white" />
+	    android:text="@string/group_chat"
+            android:textColor="@color/white"
+            android:visibility="gone" />
 
     </RelativeLayout>
 
@@ -228,8 +242,6 @@
               android:textColor="@color/white" />-->
 
 
-
-
     </LinearLayout>
 
 </FrameLayout>
diff --git a/app/src/main/res/layout/fragment_main.xml b/app/src/main/res/layout/fragment_main.xml
index 78a6f18a..af8ea726 100755
--- a/app/src/main/res/layout/fragment_main.xml
+++ b/app/src/main/res/layout/fragment_main.xml
@@ -2,10 +2,12 @@
     xmlns:tools="http://schemas.android.com/tools"
     android:layout_width="match_parent"
     android:layout_height="match_parent"
+    android:paddingBottom="@dimen/activity_vertical_margin"
     android:paddingLeft="@dimen/mobicom_activity_horizontal_margin"
     android:paddingRight="@dimen/mobicom_activity_horizontal_margin"
+    android:paddingEnd="@dimen/mobicom_activity_horizontal_margin"
     android:paddingTop="@dimen/activity_vertical_margin"
-    android:paddingBottom="@dimen/activity_vertical_margin"
+    android:paddingStart="@dimen/mobicom_activity_horizontal_margin"
     tools:context="com.applozic.mobicomkit.sample.MainActivity$PlaceholderFragment">
 
     <TextView
diff --git a/app/src/main/res/layout/fragment_navigation_drawer.xml b/app/src/main/res/layout/fragment_navigation_drawer.xml
index 192d433e..a96b2c52 100755
--- a/app/src/main/res/layout/fragment_navigation_drawer.xml
+++ b/app/src/main/res/layout/fragment_navigation_drawer.xml
@@ -2,8 +2,8 @@
     xmlns:tools="http://schemas.android.com/tools"
     android:layout_width="match_parent"
     android:layout_height="match_parent"
+    android:background="#cccc"
     android:choiceMode="singleChoice"
     android:divider="@android:color/transparent"
     android:dividerHeight="0dp"
-    android:background="#cccc"
     tools:context="com.applozic.mobicomkit.sample.NavigationDrawerFragment" />
diff --git a/app/src/main/res/layout/splash_screen_layout.xml b/app/src/main/res/layout/splash_screen_layout.xml
new file mode 100644
index 00000000..863343dc
--- /dev/null
+++ b/app/src/main/res/layout/splash_screen_layout.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:background="@color/background">
+
+    <ImageView
+        android:id="@+id/imageView_logo"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_centerInParent="true"
+        android:src="@drawable/ic_launcher" />
+
+    <TextView
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_below="@+id/imageView_logo"
+        android:layout_centerInParent="true"
+        android:text="@string/app_name"
+        android:textColor="@color/white"
+        android:textSize="14sp" />
+
+</RelativeLayout>
\ No newline at end of file
diff --git a/app/src/main/res/menu/menu_take_order.xml b/app/src/main/res/menu/menu_take_order.xml
index 6340508a..da31f0bd 100755
--- a/app/src/main/res/menu/menu_take_order.xml
+++ b/app/src/main/res/menu/menu_take_order.xml
@@ -1,6 +1,10 @@
 <menu xmlns:android="http://schemas.android.com/apk/res/android"
     xmlns:app="http://schemas.android.com/apk/res-auto"
-    xmlns:tools="http://schemas.android.com/tools" tools:context="com.applozic.mobicomkit.sample.TakeOrderActivity">
-    <item android:id="@+id/action_settings" android:title="@string/action_settings"
-        android:orderInCategory="100" app:showAsAction="never" />
+    xmlns:tools="http://schemas.android.com/tools"
+    tools:context="com.applozic.mobicomkit.sample.TakeOrderActivity">
+    <item
+        android:id="@+id/action_settings"
+        android:orderInCategory="100"
+        android:title="@string/action_settings"
+        app:showAsAction="never" />
 </menu>
diff --git a/app/src/main/res/values-hi/String.xml b/app/src/main/res/values-hi/String.xml
new file mode 100644
index 00000000..cb1b8618
--- /dev/null
+++ b/app/src/main/res/values-hi/String.xml
@@ -0,0 +1,95 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources  xmlns:tools="http://schemas.android.com/tools"
+    tools:ignore="MissingTranslation">
+    <string name="app_name">Applozic</string>
+    <string name="mobicomkit_label">Applozic</string>
+    <string name="title_activity_main">मुख्य गतिविधि</string>
+    <string name="title_section1">अनुभाग </string>
+    <string name="title_section2">फ्रैगमेंट का उपयोग करके चैट करें </string>
+    <string name="title_section3">संदेश</string>
+    <string name="title_section4">ईकॉमर्स</string>
+    <string name="title_section5">संदेश (गतिविधि आधारित)</string>
+    <string name="title_section6">संदेश</string>
+    <string name="title_section7">लोग आउट</string>
+    <string name="navigation_drawer_open">नेविगेशन ड्रॉवर खोलें</string>
+    <string name="navigation_drawer_close">नेविगेशन ड्रॉवर को बंद करें</string>
+    <string name="action_example">चैट</string>
+    <string name="action_settings">सेटिंग्स</string>
+    <string name="hello_blank_fragment">हैलो खाली टुकड़ा</string>
+    <string name="button_text">टेस्ट</string>
+    <string name="hello_world">हैलो वर्ल्ड टेस्ट!</string>
+    <string name="ecommerce">Applozic</string>
+    <string name="ecommerce_button1_text">गैजेट्स</string>
+    <string name="ecommerce_button2_text">होम </string>
+    <string name="ecommerce_button3_text">पीसी</string>
+    <string name="ecommerce_button4_text">बैग</string>
+    <string name="ecommerce_button5_text">घड़ियों</string>
+    <string name="ecommerce_button6_text">मोबाइल्स</string>
+    <string name="ecommerce_button7_text">कारें</string>
+    <string name="ecommerce_button8_text">खेल</string>
+    <string name="ecommerce_button9_text">संगीत</string>
+    <string name="ecommerce_ad_button">मुफ्त विज्ञापन पोस्ट करें</string>
+    <string name="ecommerce_chat_button">चैट</string>
+    <string name="ecommerce_ad_text">नि: शुल्क विज्ञापन दें</string>
+    <string name="ecommerce_text1">संदेश एकीकरण दिखाने के लिए डेमो स्क्रीन, नीचे चैट बटन पर टैप करें</string>
+    <string name="application_key">applozic-sample-app</string>
+    <string name="default_server_url">https://apps.applozic.com</string>
+    <string name="default_mqtt_server_url">tcp://apps.applozic.com:1883</string>
+    <string name="default_media_location_folder">Applozic</string>
+    <string name="order_sample_button">विक्रेता के साथ चैट करें</string>
+    <string name="take_order_userid">ApplozicShop</string>
+    <string name="initiate_chat_button_info">चैटिंग शुरू करें</string>
+    <string name="enter_user_id_info">कृपया उपयोगकर्ता आईडी दर्ज करें</string>
+    <string name="empty_user_id_info">उपयोगकर्ता आईडी खाली है</string>
+
+    <!-- support or admin  contact information ...please add details here  -->
+    <string name="support_contact_display_name">AppLozic</string>
+    <string name="initiate_chat_info">उपयोगकर्ता के साथ चैट आरंभ करें</string>
+    <string name="support_contact_userId">applozic</string>
+    <string name="support_contact_emailId">devashish@applozic.com</string>
+    <string name="support_contact_number">918042028425</string>
+    <string name="support_contact_image_url">R.drawable.ic_launcher</string>
+    <string name="invite_message">Hey, check out Applozic -
+        Plug &amp; Play Messaging: http://www.applozic.com</string>
+    <string name="facebook_app_id">2194468880571702</string>
+
+    <!-- Strings related to login -->
+    <string name="prompt_email">ईमेल</string>
+    <string name="prompt_user_id">यूज़र आईडी</string>
+    <string name="prompt_phone_number">फ़ोन नंबर</string>
+    <string name="prompt_password">पासवर्ड</string>
+    <string name="prompt_display_name">प्रदर्शित होने वाला नाम</string>
+    <string name="action_sign_in">लॉगिन या साइन अप करें</string>
+    <string name="action_sign_in_short">साइन अप करें</string>
+    <string name="error_invalid_email">यह ईमेल आईडी अमान्य है</string>
+    <string name="error_invalid_password">यह पासवर्ड बहुत छोटा है</string>
+    <string name="error_incorrect_password">यह पासवर्ड गलत है</string>
+    <string name="error_field_required">यह फ़ील्ड आवश्यक है</string>
+    <string name="text_alert">अलर्ट </string>
+    <string name="mobicomkitdemo">डेमो ऐप</string>
+    <string name="intrest_in_chat">हैलो आपकी संपत्ति में दिलचस्पी है, क्या हम चैट कर सकते हैं?</string>
+    <string name="start">स्टार्ट</string>
+    <string name="cancel">रद्द करें</string>
+    <string name="TestTopic2">टेस्टटोपिक 2</string>
+    <string name="Topic_1">विषय 1</string>
+    <string name="Price">मूल्य</string>
+    <string name="Qty">मात्रा</string>
+    <string name="rs">20 रुपये</string>
+    <string name="group_chat">समूह चैट</string>
+    <string name="send_your_current_location">अपना वर्तमान स्थान भेजें</string>
+    <string name="Please_download_the_Google_play_store_apk">कृपया गूगल प्ले स्टोर एपीके डाउनलोड करें</string>
+    <string name="click_more">अधिक क्लिक करें</string>
+    <string name="press_back_again_to_exit">बाहर निकलने के लिए वापस बटन दबाएं</string>
+    <string name="log_out_successful">लॉग आउट सफल है</string>
+    <string-array name="select_url">
+        <item>https://apps.applozic.com</item>
+        <item>https://staging.applozic.com</item>
+        <item>https://apps-test.applozic.com</item>
+        <item>https://test.applozic.com</item>
+        <item>https://applozic.appspot.com</item>
+        <item>http://test.applozic.com</item>
+        <item>https://test.applozic.com</item>
+        <item>https://mobi-com.appspot.com</item>
+        <item>http://dashboard.mobicomkit.com</item>
+    </string-array>
+</resources>
diff --git a/app/src/main/res/values/strings.xml b/app/src/main/res/values/strings.xml
index cee1039d..102dfc1e 100755
--- a/app/src/main/res/values/strings.xml
+++ b/app/src/main/res/values/strings.xml
@@ -1,5 +1,6 @@
 <?xml version="1.0" encoding="utf-8"?>
-<resources>
+<resources  xmlns:tools="http://schemas.android.com/tools"
+    tools:ignore="MissingTranslation">
 
     <string name="app_name">Applozic</string>
     <string name="mobicomkit_label">Applozic</string>
@@ -41,9 +42,13 @@
     <string name="default_media_location_folder">Applozic</string>
     <string name="order_sample_button">Chat with seller</string>
     <string name="take_order_userid">ApplozicShop</string>
+    <string name="initiate_chat_button_info">Start Chatting</string>
+    <string name="enter_user_id_info">Please Enter UserId</string>
+    <string name="empty_user_id_info">UserId is empty</string>
 
     <!-- support or admin  contact information ...please add details here  -->
     <string name="support_contact_display_name">AppLozic</string>
+    <string name="initiate_chat_info">Initiate chat with user</string>
     <string name="support_contact_userId">applozic</string>
     <string name="support_contact_emailId">devashish@applozic.com</string>
     <string name="support_contact_number">918042028425</string>
@@ -51,5 +56,17 @@
     <string name="invite_message">Hey, check out Applozic -
         Plug &amp; Play Messaging: http://www.applozic.com</string>
     <string name="facebook_app_id">2194468880571702</string>
-
+    <string name="intrest_in_chat">Hello I am interested in your property, Can we chat?</string>
+    <string name="start">START</string>
+    <string name="cancel">Cancel</string>
+    <string name="TestTopic2">TestTopic2</string>
+    <string name="Topic_1">Topic 1</string>
+    <string name="Price">Price</string>
+    <string name="Qty">Qty</string>
+    <string name="rs">20 Rs</string>
+    <string name="group_chat">Group chat</string>
+    <string name="Please_download_the_Google_play_store_apk">Please download the Google play store apk</string>
+    <string name="click_more">Click more</string>
+    <string name="press_back_again_to_exit">Press Back again to Exit.</string>
+    <string name="log_out_successful">Log out successful</string>
 </resources>
diff --git a/app/src/main/res/values/strings_activity_login.xml b/app/src/main/res/values/strings_activity_login.xml
index 468d272c..0403ae5c 100755
--- a/app/src/main/res/values/strings_activity_login.xml
+++ b/app/src/main/res/values/strings_activity_login.xml
@@ -1,10 +1,9 @@
-<resources>
-    <string name="title_activity_login">Sign up</string>
-
-    <!-- Strings related to login -->
+<resources  xmlns:tools="http://schemas.android.com/tools"
+    tools:ignore="MissingTranslation">
     <string name="prompt_email">Email</string>
     <string name="prompt_user_id">UserId</string>
     <string name="prompt_phone_number">Phone Number</string>
+    <string name="prompt_display_name">Display Name</string>
     <string name="prompt_password">Password</string>
     <string name="action_sign_in">Login/Sign up</string>
     <string name="action_sign_in_short">Sign up</string>
@@ -18,6 +17,7 @@
     <string-array name="select_url">
         <item>https://apps.applozic.com</item>
         <item>https://staging.applozic.com</item>
+        <item>https://apps-test.applozic.com</item>
         <item>https://test.applozic.com</item>
         <item>https://applozic.appspot.com</item>
         <item>http://test.applozic.com</item>
diff --git a/app/src/main/res/values/styles.xml b/app/src/main/res/values/styles.xml
index f901181a..20c8a6dc 100755
--- a/app/src/main/res/values/styles.xml
+++ b/app/src/main/res/values/styles.xml
@@ -22,4 +22,12 @@ Theme.Holo.Light.DarkActionBar
         <item name="android:background">@color/buttonbgcolor</item>
     </style>
 
+    <style name="Theme.Transparent" parent="Theme.AppCompat.Light.NoActionBar">
+        <item name="android:windowNoTitle">true</item>
+        <item name="android:windowActionBar">false</item>
+        <item name="android:windowFullscreen">true</item>
+        <item name="android:windowContentOverlay">@null</item>
+        <item name="android:windowIsTranslucent">true</item>
+    </style>
+
 </resources>
\ No newline at end of file
diff --git a/app/src/main/res/xml/provider_paths.xml b/app/src/main/res/xml/provider_paths.xml
new file mode 100644
index 00000000..fd31665a
--- /dev/null
+++ b/app/src/main/res/xml/provider_paths.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<paths>
+    <external-path
+        name="files"
+        path="." />
+</paths>
\ No newline at end of file
diff --git a/build.gradle b/build.gradle
index 4706d1d7..a1298cac 100755
--- a/build.gradle
+++ b/build.gradle
@@ -5,10 +5,11 @@ buildscript {
         jcenter()
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:1.3.1'
+        classpath 'com.android.tools.build:gradle:2.3.3'
         classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.1'
-        //classpath 'com.github.dcendents:android-maven-gradle-plugin:1.3'
-       // classpath 'com.github.dcendents:android-maven-plugin:1.2'
+       // classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
+
+        // classpath 'com.github.dcendents:android-maven-plugin:1.2'
         classpath 'com.google.gms:google-services:3.0.0'
         classpath 'com.novoda:bintray-release:0.3.4'
 
@@ -16,7 +17,6 @@ buildscript {
         // in the individual module build.gradle files
     }
 }
-
 allprojects {
     repositories {
         jcenter()
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 0c71e760..24b49011 100755
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Wed Apr 10 15:27:10 PDT 2013
+#Sun Apr 30 10:52:12 IST 2017
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.2.1-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-3.3-all.zip
diff --git a/mobicomkit/build.gradle b/mobicomkit/build.gradle
index 8a2668e5..0c1f1507 100755
--- a/mobicomkit/build.gradle
+++ b/mobicomkit/build.gradle
@@ -1,14 +1,14 @@
 apply plugin: 'com.android.library'
 
 android {
-    compileSdkVersion 23
-    buildToolsVersion "23.0.2"
+    compileSdkVersion 25
+    buildToolsVersion "25.0.2"
 
     defaultConfig {
-        minSdkVersion 10
-        targetSdkVersion 23
+        minSdkVersion 14
+        targetSdkVersion 25
         versionCode 1
-        versionName "4.59"
+        versionName "4.96"
     }
     useLibrary 'org.apache.http.legacy'
     buildTypes {
@@ -39,15 +39,16 @@ dependencies {
     compile fileTree(dir: 'libs', include: ['*.jar'])
     compile files('libs/org.eclipse.paho.android.service-1.0.2.jar')
     compile files('libs/org.eclipse.paho.client.mqttv3-1.0.2.jar')
-    compile 'com.android.support:appcompat-v7:23.1.1'
+    compile 'com.android.support:appcompat-v7:25.3.1'
     compile 'com.google.code.gson:gson:2.2.4'
     compile project(':mobicommons') //Note: use this for customization
-    //compile 'com.applozic.mobiframework:mobicommons:4.59' //Note: use this in case customization is not required
+    //compile 'com.applozic.mobiframework:mobicommons:4.96' //Note: use this in case customization is not required
 }
 
 
 
 /*
+
 ext {
     // Where you will see your artifact in Bintray's web interface
     // The "bintrayName" should match the name of the Bintray repro.
@@ -62,7 +63,7 @@ ext {
     artifact = 'mobicomkit'
 
     libraryDescription = 'Applozic Communication Chat/Messaging library'
-    libraryVersion = '4.59'
+    libraryVersion = '4.96'
 
     developerId = 'devashish'
     developerName = 'Applozic'
@@ -72,5 +73,6 @@ ext {
 
 apply from: 'https://raw.githubusercontent.com/attwellBrian/JCenter/master/installv1.gradle'
 apply from: 'https://raw.githubusercontent.com/attwellBrian/JCenter/master/bintrayv1.gradle'
+
 */
 
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/Applozic.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/Applozic.java
index be2c5409..8016c710 100644
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/Applozic.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/Applozic.java
@@ -28,7 +28,7 @@ public static Applozic init(Context context, String applicationKey) {
 
     public static Applozic getInstance(Context context) {
         if (applozic == null) {
-            applozic = new Applozic(context);
+            applozic = new Applozic(context.getApplicationContext());
         }
         return applozic;
     }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/ApplozicClient.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/ApplozicClient.java
index 9d63d8b1..fdda861b 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/ApplozicClient.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/ApplozicClient.java
@@ -8,19 +8,31 @@
 import com.applozic.mobicomkit.api.account.register.RegistrationResponse;
 import com.applozic.mobicomkit.api.account.user.MobiComUserPreference;
 
+import org.json.JSONObject;
+
+import java.util.Map;
+
 /**
  * Created by devashish on 8/21/2015.
  */
 public class ApplozicClient {
 
+    public static final String AL_MESSAGE_META_DATA_KEY = "AL_MESSAGE_META_DATA_KEY";
     private static final String HANDLE_DISPLAY_NAME = "CLIENT_HANDLE_DISPLAY_NAME";
     private static final String HANDLE_DIAL = "CLIENT_HANDLE_DIAL";
     private static final String CHAT_LIST_HIDE_ON_NOTIFICATION = "CHAT_LIST_HIDE_ON_NOTIFICATION";
     private static final String CONTEXT_BASED_CHAT = "CONTEXT_BASED_CHAT";
-    private static final String NOTIFICATION_SMALL_ICON= "NOTIFICATION_SMALL_ICON";
+    private static final String NOTIFICATION_SMALL_ICON = "NOTIFICATION_SMALL_ICON";
     private static final String APP_NAME = "APP_NAME";
     private static final String APPLICATION_KEY = "APPLICATION_KEY";
-    private static final String NOTIFICATION_DISABLE= "NOTIFICATION_DISABLE";
+    private static final String NOTIFICATION_DISABLE = "NOTIFICATION_DISABLE";
+    private static final String CONTACT_DEFAULT_IMAGE = "CONTACT_DEFAULT_IMAGE";
+    private static final String GROUP_DEFAULT_IMAGE = "GROUP_DEFAULT_IMAGE";
+    private static final String MESSAGE_META_DATA_SERVICE = "MESSAGE_META_DATA_SERVICE";
+    private static final String ENABLE_IP_CALL = "ENABLE_IP_CALL";
+    private static final String SHOW_MY_CONTACT_ONLY = "SHOW_MY_CONTACT_ONLY";
+    private static final String START_GROUP_OF_TWO = "START_GROUP_OF_TWO";
+    private static final String AL_SHOW_APP_ICON = "AL_SHOW_APP_ICON";
     public static ApplozicClient applozicClient;
     public SharedPreferences sharedPreferences;
     private Context context;
@@ -32,7 +44,7 @@ private ApplozicClient(Context context) {
 
     public static ApplozicClient getInstance(Context context) {
         if (applozicClient == null) {
-            applozicClient = new ApplozicClient(context);
+            applozicClient = new ApplozicClient(context.getApplicationContext());
         }
 
         return applozicClient;
@@ -65,29 +77,29 @@ public boolean isChatListOnNotificationIsHidden() {
         return sharedPreferences.getBoolean(CHAT_LIST_HIDE_ON_NOTIFICATION, false);
     }
 
-    public ApplozicClient setContextBasedChat(boolean enable){
-        sharedPreferences.edit().putBoolean(CONTEXT_BASED_CHAT,enable).commit();
-        return this;
-    }
-
     public boolean isContextBasedChat() {
         return sharedPreferences.getBoolean(CONTEXT_BASED_CHAT, false);
     }
 
+    public ApplozicClient setContextBasedChat(boolean enable) {
+        sharedPreferences.edit().putBoolean(CONTEXT_BASED_CHAT, enable).commit();
+        return this;
+    }
+
     public ApplozicClient hideNotificationSmallIcon() {
         sharedPreferences.edit().putBoolean(NOTIFICATION_SMALL_ICON, true).commit();
         return this;
     }
 
     public boolean isNotificationSmallIconHidden() {
-      return sharedPreferences.getBoolean(NOTIFICATION_SMALL_ICON, false);
+        return sharedPreferences.getBoolean(NOTIFICATION_SMALL_ICON, false);
     }
 
     public boolean isNotAllowed() {
         MobiComUserPreference pref = MobiComUserPreference.getInstance(context);
-        boolean isDebuggable =  ( 0 != ( context.getApplicationInfo().flags & ApplicationInfo.FLAG_DEBUGGABLE ) );
+        boolean isDebuggable = (0 != (context.getApplicationInfo().flags & ApplicationInfo.FLAG_DEBUGGABLE));
         return !isDebuggable && (pref.getPricingPackage() == RegistrationResponse.PricingType.CLOSED.getValue()
-                ||  pref.getPricingPackage() == RegistrationResponse.PricingType.BETA.getValue());
+                || pref.getPricingPackage() == RegistrationResponse.PricingType.BETA.getValue());
     }
 
     public boolean isAccountClosed() {
@@ -113,7 +125,7 @@ public ApplozicClient setApplicationKey(String applicationKey) {
     }
 
     public boolean isNotificationDisabled() {
-        return  sharedPreferences.getBoolean(NOTIFICATION_DISABLE, false);
+        return sharedPreferences.getBoolean(NOTIFICATION_DISABLE, false);
     }
 
     public ApplozicClient enableNotification() {
@@ -125,4 +137,88 @@ public ApplozicClient disableNotification() {
         sharedPreferences.edit().putBoolean(NOTIFICATION_DISABLE, true).commit();
         return this;
     }
+
+    public String getDefaultContactImage() {
+        return sharedPreferences.getString(CONTACT_DEFAULT_IMAGE, "applozic_ic_contact_picture_holo_light");
+    }
+
+    public ApplozicClient setDefaultContactImage(String imageName) {
+        sharedPreferences.edit().putString(CONTACT_DEFAULT_IMAGE, imageName).commit();
+        return this;
+    }
+
+    public String getDefaultChannelImage() {
+        return sharedPreferences.getString(GROUP_DEFAULT_IMAGE, "applozic_group_icon");
+    }
+
+    public ApplozicClient setDefaultChannelImage(String groupImageName) {
+        sharedPreferences.edit().putString(GROUP_DEFAULT_IMAGE, groupImageName).commit();
+        return this;
+    }
+
+    public String getMessageMetaDataServiceName() {
+        return sharedPreferences.getString(MESSAGE_META_DATA_SERVICE, null);
+    }
+
+    public ApplozicClient setMessageMetaDataServiceName(String messageMetaDataServiceName) {
+        sharedPreferences.edit().putString(MESSAGE_META_DATA_SERVICE, messageMetaDataServiceName).commit();
+        return this;
+    }
+
+    public boolean isShowMyContacts() {
+        return sharedPreferences.getBoolean(SHOW_MY_CONTACT_ONLY, false);
+    }
+
+    public ApplozicClient enableShowMyContacts() {
+        sharedPreferences.edit().putBoolean(SHOW_MY_CONTACT_ONLY, true).commit();
+        return this;
+    }
+
+    public ApplozicClient disableShowMyContacts() {
+        sharedPreferences.edit().putBoolean(SHOW_MY_CONTACT_ONLY, false).commit();
+        return this;
+    }
+
+    public boolean isIPCallEnabled() {
+        return sharedPreferences.getBoolean(ENABLE_IP_CALL, false);
+    }
+
+    public void setIPCallEnabled(boolean iPCallEnabled) {
+        sharedPreferences.edit().putBoolean(ENABLE_IP_CALL, iPCallEnabled).commit();
+    }
+
+    public String getMessageMetaData() {
+        return sharedPreferences.getString(AL_MESSAGE_META_DATA_KEY, null);
+    }
+
+    public ApplozicClient setMessageMetaData(Map<String, String> messageMetaDataMap) {
+        if (messageMetaDataMap != null) {
+            sharedPreferences.edit().putString(AL_MESSAGE_META_DATA_KEY, new JSONObject(messageMetaDataMap).toString()).commit();
+        }
+        return this;
+    }
+
+    public ApplozicClient startGroupOfTwo() {
+        sharedPreferences.edit().putBoolean(START_GROUP_OF_TWO, true).commit();
+        return this;
+    }
+
+    public boolean isStartGroupOfTwo() {
+        return sharedPreferences.getBoolean(START_GROUP_OF_TWO, false);
+    }
+
+    public ApplozicClient disableStartGroupOfTwo() {
+        sharedPreferences.edit().putBoolean(START_GROUP_OF_TWO, false).commit();
+        return this;
+    }
+
+    public ApplozicClient showAppIconInNotification(boolean showOrHide) {
+        sharedPreferences.edit().putBoolean(AL_SHOW_APP_ICON, showOrHide).commit();
+        return this;
+    }
+
+    public boolean isShowAppIconInNotification() {
+        return sharedPreferences.getBoolean(AL_SHOW_APP_ICON, false);
+    }
+
 }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/ApplozicMqttService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/ApplozicMqttService.java
index 81742c65..7af8f822 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/ApplozicMqttService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/ApplozicMqttService.java
@@ -3,13 +3,13 @@
 import android.content.Context;
 import android.os.Process;
 import android.text.TextUtils;
-import android.util.Log;
 
 import com.applozic.mobicomkit.api.account.user.MobiComUserPreference;
 import com.applozic.mobicomkit.api.conversation.Message;
 import com.applozic.mobicomkit.api.conversation.SyncCallService;
 import com.applozic.mobicomkit.api.notification.MobiComPushReceiver;
 import com.applozic.mobicomkit.broadcast.BroadcastService;
+import com.applozic.mobicomkit.feed.InstantMessageResponse;
 import com.applozic.mobicomkit.feed.GcmMessageResponse;
 import com.applozic.mobicomkit.feed.MqttMessageResponse;
 import com.applozic.mobicommons.commons.core.utils.Utils;
@@ -40,48 +40,16 @@
     private MemoryPersistence memoryPersistence;
     private Context context;
 
-    public static enum NOTIFICATION_TYPE {
-        MESSAGE_RECEIVED("APPLOZIC_01"), MESSAGE_SENT("APPLOZIC_02"),
-        MESSAGE_SENT_UPDATE("APPLOZIC_03"), MESSAGE_DELIVERED("APPLOZIC_04"),
-        MESSAGE_DELETED("APPLOZIC_05"), CONVERSATION_DELETED("APPLOZIC_06"),
-        MESSAGE_READ("APPLOZIC_07"), MESSAGE_DELIVERED_AND_READ("APPLOZIC_08"),
-        CONVERSATION_READ("APPLOZIC_09"), CONVERSATION_DELIVERED_AND_READ("APPLOZIC_10"),
-        USER_CONNECTED("APPLOZIC_11"), USER_DISCONNECTED("APPLOZIC_12"),
-        GROUP_DELETED("APPLOZIC_13"), GROUP_LEFT("APPLOZIC_14"), GROUP_SYNC("APPLOZIC_15"),
-        USER_BLOCKED("APPLOZIC_16"), USER_UN_BLOCKED("APPLOZIC_17"),
-        ACTIVATED("APPLOZIC_18"),
-        DEACTIVATED("APPLOZIC_19"),
-        REGISTRATION("APPLOZIC_20"),
-        GROUP_CONVERSATION_READ("APPLOZIC_21"),
-        GROUP_MESSAGE_DELETED("APPLOZIC_22"),
-        GROUP_CONVERSATION_DELETED("APPLOZIC_23"),
-        APPLOZIC_TEST("APPLOZIC_24"),
-        USER_ONLINE_STATUS("APPLOZIC_25"),
-        CONTACT_SYNC("APPLOZIC_26");
-        private String value;
-
-        private NOTIFICATION_TYPE(String c) {
-            value = c;
-        }
-
-        public String getValue() {
-            return String.valueOf(value);
-        }
-
-    }
-
-
     private ApplozicMqttService(Context context) {
         super(context);
         this.context = context;
         memoryPersistence = new MemoryPersistence();
     }
 
-
     public static ApplozicMqttService getInstance(Context context) {
 
         if (applozicMqttService == null) {
-            applozicMqttService = new ApplozicMqttService(context);
+            applozicMqttService = new ApplozicMqttService(context.getApplicationContext());
         }
         return applozicMqttService;
     }
@@ -97,16 +65,16 @@ private MqttClient connect() {
             }
 
             if (!client.isConnected()) {
-                Log.i(TAG, "Connecting to mqtt...");
+                Utils.printLog(context,TAG, "Connecting to mqtt...");
                 MqttConnectOptions options = new MqttConnectOptions();
                 options.setConnectionTimeout(60);
-                options.setWill(STATUS, (MobiComUserPreference.getInstance(context).getSuUserKeyString()+","+MobiComUserPreference.getInstance(context).getDeviceKeyString() + "," + "0").getBytes(), 0, true);
+                options.setWill(STATUS, (MobiComUserPreference.getInstance(context).getSuUserKeyString() + "," + MobiComUserPreference.getInstance(context).getDeviceKeyString() + "," + "0").getBytes(), 0, true);
                 client.setCallback(ApplozicMqttService.this);
 
                 client.connect(options);
             }
         } catch (MqttException e) {
-            Log.d(TAG, "Connecting already in progress.");
+            Utils.printLog(context,TAG, "Connecting already in progress.");
         } catch (Exception e) {
             e.printStackTrace();
         }
@@ -114,7 +82,7 @@ private MqttClient connect() {
         return client;
     }
 
-    public synchronized void connectPublish(final String userKeyString,final String deviceKeyString, final String status) {
+    public synchronized void connectPublish(final String userKeyString, final String deviceKeyString, final String status) {
 
         try {
             final MqttClient client = connect();
@@ -124,7 +92,7 @@ public synchronized void connectPublish(final String userKeyString,final String
             MqttMessage message = new MqttMessage();
             message.setRetained(false);
             message.setPayload((userKeyString + "," + deviceKeyString + "," + status).getBytes());
-            Log.i(TAG, "UserKeyString,DeviceKeyString,status:" + userKeyString + "," + deviceKeyString + "," + status);
+            Utils.printLog(context,TAG, "UserKeyString,DeviceKeyString,status:" + userKeyString + "," + deviceKeyString + "," + status);
             message.setQos(0);
             client.publish(STATUS, message);
         } catch (Exception e) {
@@ -147,7 +115,7 @@ public synchronized void subscribe() {
             if (client == null || !client.isConnected()) {
                 return;
             }
-            connectPublish(userKeyString,deviceKeyString, "1");
+            connectPublish(userKeyString, deviceKeyString, "1");
             subscribeToConversation();
             if (client != null) {
                 client.setCallback(ApplozicMqttService.this);
@@ -159,7 +127,7 @@ public synchronized void subscribe() {
 
     public synchronized void unSubscribe() {
         unSubscribeToConversation();
-       // unSubscribeToTypingTopic();
+        // unSubscribeToTypingTopic();
     }
 
     public synchronized void subscribeToConversation() {
@@ -169,7 +137,7 @@ public synchronized void subscribeToConversation() {
                 return;
             }
             if (client != null && client.isConnected()) {
-                Log.i(TAG, "Subscribing to conversation topic.");
+                Utils.printLog(context,TAG, "Subscribing to conversation topic.");
                 client.subscribe(userKeyString, 0);
             }
         } catch (Exception e) {
@@ -196,9 +164,9 @@ public void run() {
         thread.start();
     }
 
-    public void disconnectPublish(String userKeyString,String deviceKeyString, String status) {
+    public void disconnectPublish(String userKeyString, String deviceKeyString, String status) {
         try {
-            connectPublish(userKeyString,deviceKeyString, status);
+            connectPublish(userKeyString, deviceKeyString, status);
             if (!MobiComUserPreference.getInstance(context).isLoggedIn()) {
                 disconnect();
             }
@@ -211,7 +179,7 @@ public void disconnect() {
         if (client != null && client.isConnected()) {
             try {
                 client.disconnect();
-            } catch (MqttException e) {
+            } catch (Exception e) {
                 e.printStackTrace();
             }
         }
@@ -219,12 +187,12 @@ public void disconnect() {
 
     @Override
     public void connectionLost(Throwable throwable) {
-        BroadcastService.sendMQTTDisconnected(context, BroadcastService.INTENT_ACTIONS.MQTT_DISCONNECTED.toString());
+        BroadcastService.sendUpdate(context, BroadcastService.INTENT_ACTIONS.MQTT_DISCONNECTED.toString());
     }
 
     @Override
-    public void messageArrived(String s,final MqttMessage mqttMessage) throws Exception {
-        Log.i(TAG, "Received MQTT message: " + new String(mqttMessage.getPayload()));
+    public void messageArrived(String s, final MqttMessage mqttMessage) throws Exception {
+        Utils.printLog(context,TAG, "Received MQTT message: " + new String(mqttMessage.getPayload()));
         try {
             if (!TextUtils.isEmpty(s) && s.startsWith(TYPINGTOPIC)) {
                 String typingResponse[] = mqttMessage.toString().split(",");
@@ -243,7 +211,7 @@ public void messageArrived(String s,final MqttMessage mqttMessage) throws Except
                     Thread thread = new Thread(new Runnable() {
                         @Override
                         public void run() {
-                            Log.i(TAG, "MQTT message type: " + mqttMessageResponse.getType());
+                            Utils.printLog(context,TAG, "MQTT message type: " + mqttMessageResponse.getType());
                             if (NOTIFICATION_TYPE.MESSAGE_RECEIVED.getValue().equals(mqttMessageResponse.getType()) || "MESSAGE_RECEIVED".equals(mqttMessageResponse.getType())) {
                                 syncCallService.syncMessages(null);
                             }
@@ -256,7 +224,7 @@ public void run() {
                                 syncCallService.updateDeliveryStatus(keyString);
                             }
 
-                            if ( NOTIFICATION_TYPE.MESSAGE_DELIVERED_AND_READ.getValue().equals(mqttMessageResponse.getType())
+                            if (NOTIFICATION_TYPE.MESSAGE_DELIVERED_AND_READ.getValue().equals(mqttMessageResponse.getType())
                                     || "MT_MESSAGE_DELIVERED_READ".equals(mqttMessageResponse.getType())) {
                                 String splitKeyString[] = (mqttMessageResponse.getMessage()).toString().split(",");
                                 String keyString = splitKeyString[0];
@@ -268,6 +236,15 @@ public void run() {
                                 syncCallService.updateDeliveryStatusForContact(contactId, true);
                             }
 
+                            if (NOTIFICATION_TYPE.CONVERSATION_READ.getValue().equals(mqttMessageResponse.getType())) {
+                                syncCallService.updateConversationReadStatus(mqttMessageResponse.getMessage().toString(), false);
+                            }
+
+                            if (NOTIFICATION_TYPE.GROUP_CONVERSATION_READ.getValue().equals(mqttMessageResponse.getType())) {
+                                InstantMessageResponse instantMessageResponse = (InstantMessageResponse) GsonUtils.getObjectFromJson(mqttMessage.toString(), InstantMessageResponse.class);
+                                syncCallService.updateConversationReadStatus(instantMessageResponse.getMessage(), true);
+                            }
+
                             if (NOTIFICATION_TYPE.USER_CONNECTED.getValue().equals(mqttMessageResponse.getType())) {
                                 syncCallService.updateConnectedStatus(mqttMessageResponse.getMessage().toString(), new Date(), true);
                             }
@@ -283,11 +260,17 @@ public void run() {
                                 syncCallService.updateConnectedStatus(userId, lastSeenAt, false);
                             }
 
-                            if(NOTIFICATION_TYPE.CONVERSATION_DELETED.getValue().equals(mqttMessageResponse.getType())) {
+                            if (NOTIFICATION_TYPE.CONVERSATION_DELETED.getValue().equals(mqttMessageResponse.getType())) {
                                 syncCallService.deleteConversationThread(mqttMessageResponse.getMessage().toString());
                                 BroadcastService.sendConversationDeleteBroadcast(context, BroadcastService.INTENT_ACTIONS.DELETE_CONVERSATION.toString(), mqttMessageResponse.getMessage().toString(), 0, "success");
                             }
 
+                            if (NOTIFICATION_TYPE.GROUP_CONVERSATION_DELETED.getValue().equals(mqttMessageResponse.getType())) {
+                                InstantMessageResponse instantMessageResponse = (InstantMessageResponse) GsonUtils.getObjectFromJson(mqttMessage.toString(), InstantMessageResponse.class);
+                                syncCallService.deleteChannelConversationThread(instantMessageResponse.getMessage());
+                                BroadcastService.sendConversationDeleteBroadcast(context, BroadcastService.INTENT_ACTIONS.DELETE_CONVERSATION.toString(), null, Integer.valueOf(instantMessageResponse.getMessage()), "success");
+                            }
+
                             if (NOTIFICATION_TYPE.MESSAGE_DELETED.getValue().equals(mqttMessageResponse.getType())) {
                                 String messageKey = mqttMessageResponse.getMessage().toString().split(",")[0];
                                 syncCallService.deleteMessage(messageKey);
@@ -305,6 +288,11 @@ public void run() {
                                 syncCallService.syncBlockUsers();
                             }
 
+                            if (NOTIFICATION_TYPE.USER_DETAIL_CHANGED.getValue().equals(mqttMessageResponse.getType()) || NOTIFICATION_TYPE.USER_DELETE_NOTIFICATION.getValue().equals(mqttMessageResponse.getType())) {
+                                String userId = mqttMessageResponse.getMessage().toString();
+                                syncCallService.syncUserDetail(userId);
+                            }
+
                         }
                     });
                     thread.start();
@@ -329,17 +317,18 @@ public synchronized void publishTopic(final String applicationId, final String s
             message.setPayload((applicationId + "," + loggedInUserId + "," + status).getBytes());
             message.setQos(0);
             client.publish("typing" + "-" + applicationId + "-" + userId, message);
-            Log.i(TAG, "Published " + new String(message.getPayload()) + " to topic: " + "typing" + "-" + applicationId + "-" + userId);
-        } catch (MqttException e) {
+            Utils.printLog(context,TAG, "Published " + new String(message.getPayload()) + " to topic: " + "typing" + "-" + applicationId + "-" + userId);
+        } catch (Exception e) {
             e.printStackTrace();
         }
     }
+
     public synchronized void subscribeToTypingTopic(Channel channel) {
         try {
             String currentId = null;
-            if(channel != null) {
+            if (channel != null) {
                 currentId = String.valueOf(channel.getKey());
-            }else {
+            } else {
                 MobiComUserPreference mobiComUserPreference = MobiComUserPreference.getInstance(context);
                 currentId = mobiComUserPreference.getUserId();
             }
@@ -350,19 +339,18 @@ public synchronized void subscribeToTypingTopic(Channel channel) {
             }
 
             client.subscribe("typing-" + getApplicationKey(context) + "-" + currentId, 0);
-            Log.i(TAG, "Subscribed to topic: " + "typing-" +  getApplicationKey(context)  + "-" + currentId);
+            Utils.printLog(context,TAG, "Subscribed to topic: " + "typing-" + getApplicationKey(context) + "-" + currentId);
         } catch (Exception e) {
             e.printStackTrace();
         }
     }
 
-
     public synchronized void unSubscribeToTypingTopic(Channel channel) {
         try {
             String currentId = null;
-            if(channel != null) {
+            if (channel != null) {
                 currentId = String.valueOf(channel.getKey());
-            }else {
+            } else {
                 MobiComUserPreference mobiComUserPreference = MobiComUserPreference.getInstance(context);
                 currentId = mobiComUserPreference.getUserId();
             }
@@ -373,7 +361,7 @@ public synchronized void unSubscribeToTypingTopic(Channel channel) {
             }
 
             client.unsubscribe("typing-" + getApplicationKey(context) + "-" + currentId);
-            Log.i(TAG, "UnSubscribed to topic: " + "typing-" +  getApplicationKey(context) + "-" + currentId);
+            Utils.printLog(context,TAG, "UnSubscribed to topic: " + "typing-" + getApplicationKey(context) + "-" + currentId);
         } catch (Exception e) {
             e.printStackTrace();
         }
@@ -386,26 +374,62 @@ public void deliveryComplete(IMqttDeliveryToken iMqttDeliveryToken) {
 
     public void typingStarted(Contact contact, Channel channel) {
         String currentId;
-        if(channel != null){
+        if (channel != null) {
             currentId = String.valueOf(channel.getKey());
-        }else {
+        } else {
             currentId = contact.getUserId();
         }
         MobiComUserPreference mobiComUserPreference = MobiComUserPreference.getInstance(context);
         publishTopic(getApplicationKey(context), "1", mobiComUserPreference.getUserId(), currentId);
     }
 
-    public void typingStopped(Contact contact,Channel channel) {
+    public void typingStopped(Contact contact, Channel channel) {
         String currentId;
-        if(channel != null){
+        if (channel != null) {
             currentId = String.valueOf(channel.getKey());
-        }else {
+        } else {
             currentId = contact.getUserId();
         }
         MobiComUserPreference mobiComUserPreference = MobiComUserPreference.getInstance(context);
         publishTopic(getApplicationKey(context), "0", mobiComUserPreference.getUserId(), currentId);
     }
 
+    public static enum NOTIFICATION_TYPE {
+        MESSAGE_RECEIVED("APPLOZIC_01"), MESSAGE_SENT("APPLOZIC_02"),
+        MESSAGE_SENT_UPDATE("APPLOZIC_03"), MESSAGE_DELIVERED("APPLOZIC_04"),
+        MESSAGE_DELETED("APPLOZIC_05"), CONVERSATION_DELETED("APPLOZIC_06"),
+        MESSAGE_READ("APPLOZIC_07"), MESSAGE_DELIVERED_AND_READ("APPLOZIC_08"),
+        CONVERSATION_READ("APPLOZIC_09"), CONVERSATION_DELIVERED_AND_READ("APPLOZIC_10"),
+        USER_CONNECTED("APPLOZIC_11"), USER_DISCONNECTED("APPLOZIC_12"),
+        GROUP_DELETED("APPLOZIC_13"), GROUP_LEFT("APPLOZIC_14"), GROUP_SYNC("APPLOZIC_15"),
+        USER_BLOCKED("APPLOZIC_16"), USER_UN_BLOCKED("APPLOZIC_17"),
+        ACTIVATED("APPLOZIC_18"),
+        DEACTIVATED("APPLOZIC_19"),
+        REGISTRATION("APPLOZIC_20"),
+        GROUP_CONVERSATION_READ("APPLOZIC_21"),
+        GROUP_MESSAGE_DELETED("APPLOZIC_22"),
+        GROUP_CONVERSATION_DELETED("APPLOZIC_23"),
+        APPLOZIC_TEST("APPLOZIC_24"),
+        USER_ONLINE_STATUS("APPLOZIC_25"),
+        CONTACT_SYNC("APPLOZIC_26"),
+        CONVERSATION_DELETED_NEW("APPLOZIC_27"),
+        CONVERSATION_DELIVERED_AND_READ_NEW("APPLOZIC_28"),
+        CONVERSATION_READ_NEW("APPLOZIC_29"),
+        USER_DETAIL_CHANGED("APPLOZIC_30"),
+        MESSAGE_LIKE("APPLOZIC_33"),
+        USER_DELETE_NOTIFICATION("APPLOZIC_34");
+        private String value;
+
+        private NOTIFICATION_TYPE(String c) {
+            value = c;
+        }
+
+        public String getValue() {
+            return String.valueOf(value);
+        }
+
+    }
+
 }
 
 
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/HttpRequestUtils.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/HttpRequestUtils.java
index d2fe4e44..fe0f4705 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/HttpRequestUtils.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/HttpRequestUtils.java
@@ -7,6 +7,7 @@
 
 import com.applozic.mobicomkit.api.account.user.MobiComUserPreference;
 import com.applozic.mobicomkit.api.account.user.User;
+import com.applozic.mobicommons.commons.core.utils.Utils;
 import com.applozic.mobicommons.encryption.EncryptionUtils;
 
 import java.io.BufferedReader;
@@ -25,29 +26,20 @@
  */
 public class HttpRequestUtils {
 
-    private Context context;
-
     private static final String TAG = "HttpRequestUtils";
-
-    private static String SOURCE_HEADER = "Source";
-
-    private static String SOURCE_HEADER_VALUE = "1";
-
     public static String APPLICATION_KEY_HEADER = "Application-Key";
-
     public static String USERID_HEADER = "UserId-Enabled";
-
     public static String USERID_HEADER_VALUE = "true";
-
     public static String DEVICE_KEY_HEADER = "Device-Key";
-
     public static String APP_MODULE_NAME_KEY_HEADER = "App-Module-Name";
-
     public static String ACCESS_TOKEN = "Access-Token";
+    private static String SOURCE_HEADER = "Source";
+    private static String SOURCE_HEADER_VALUE = "1";
+    private Context context;
 
 
     public HttpRequestUtils(Context context) {
-        this.context = context;
+        this.context = context.getApplicationContext();
     }
 
     private void log(String message) {
@@ -55,12 +47,12 @@ private void log(String message) {
     }
 
     public String postData(String urlString, String contentType, String accept, String data) throws Exception {
-        Log.i(TAG, "Calling url: " + urlString);
+        Utils.printLog(context,TAG, "Calling url: " + urlString);
         HttpURLConnection connection;
         URL url;
         try {
-            if(!TextUtils.isEmpty(MobiComUserPreference.getInstance(context).getEncryptionKey())){
-                data = EncryptionUtils.encrypt(MobiComUserPreference.getInstance(context).getEncryptionKey(),data);
+            if (!TextUtils.isEmpty(MobiComUserPreference.getInstance(context).getEncryptionKey())) {
+                data = EncryptionUtils.encrypt(MobiComUserPreference.getInstance(context).getEncryptionKey(), data);
             }
             url = new URL(urlString);
             connection = (HttpURLConnection) url.openConnection();
@@ -80,20 +72,22 @@ public String postData(String urlString, String contentType, String accept, Stri
             if (connection == null) {
                 return null;
             }
-
-            byte[] dataBytes = data.getBytes("UTF-8");
-            DataOutputStream os = new DataOutputStream(connection.getOutputStream());
-            os.write(dataBytes);
-            os.flush();
-            os.close();
+            if (data != null) {
+                byte[] dataBytes = data.getBytes("UTF-8");
+                DataOutputStream os = new DataOutputStream(connection.getOutputStream());
+                os.write(dataBytes);
+                os.flush();
+                os.close();
+            }
             BufferedReader br = null;
-            if(connection.getResponseCode() == 200){
+            if (connection.getResponseCode() == 200) {
                 InputStream inputStream = connection.getInputStream();
                 br = new BufferedReader(new InputStreamReader(inputStream, "UTF-8"));
             }
             StringBuilder sb = new StringBuilder();
             try {
-                String line;if(br != null){
+                String line;
+                if (br != null) {
                     while ((line = br.readLine()) != null) {
                         sb.append(line);
                     }
@@ -103,10 +97,10 @@ public String postData(String urlString, String contentType, String accept, Stri
             } catch (Exception e) {
                 e.printStackTrace();
             }
-            Log.i(TAG, "Response : " + sb.toString());
-            if(!TextUtils.isEmpty(sb.toString())){
-                if(!TextUtils.isEmpty(MobiComUserPreference.getInstance(context).getEncryptionKey())){
-                   return EncryptionUtils.decrypt(MobiComUserPreference.getInstance(context).getEncryptionKey(),sb.toString());
+            Utils.printLog(context,TAG, "Response : " + sb.toString());
+            if (!TextUtils.isEmpty(sb.toString())) {
+                if (!TextUtils.isEmpty(MobiComUserPreference.getInstance(context).getEncryptionKey())) {
+                    return EncryptionUtils.decrypt(MobiComUserPreference.getInstance(context).getEncryptionKey(), sb.toString());
                 }
             }
             return sb.toString();
@@ -115,7 +109,7 @@ public String postData(String urlString, String contentType, String accept, Stri
         } catch (Exception e) {
             e.printStackTrace();
         }
-        Log.e(TAG, "Http call failed");
+        Utils.printLog(context,TAG, "Http call failed");
         return null;
     }
 
@@ -125,7 +119,7 @@ public String postJsonToServer(String StringUrl, String data) throws Exception {
         connection = (HttpURLConnection) url.openConnection();
         connection.setRequestMethod("POST");
         connection.setRequestProperty("Content-Type", "application/json");
-        if(!TextUtils.isEmpty(MobiComUserPreference.getInstance(context).getDeviceKeyString())){
+        if (!TextUtils.isEmpty(MobiComUserPreference.getInstance(context).getDeviceKeyString())) {
             connection.setRequestProperty(DEVICE_KEY_HEADER, MobiComUserPreference.getInstance(context).getDeviceKeyString());
         }
         connection.setDoInput(true);
@@ -138,16 +132,16 @@ public String postJsonToServer(String StringUrl, String data) throws Exception {
         os.flush();
         os.close();
         BufferedReader br = null;
-        if(connection.getResponseCode() == HttpURLConnection.HTTP_OK){
+        if (connection.getResponseCode() == HttpURLConnection.HTTP_OK) {
             InputStream inputStream = connection.getInputStream();
             br = new BufferedReader(new InputStreamReader(inputStream, "UTF-8"));
-        }else {
-            Log.i(TAG,"Response code for post json is :"+connection.getResponseCode());
+        } else {
+            Utils.printLog(context,TAG, "Response code for post json is :" + connection.getResponseCode());
         }
         StringBuilder sb = new StringBuilder();
         try {
             String line;
-            if(br != null){
+            if (br != null) {
                 while ((line = br.readLine()) != null) {
                     sb.append(line);
                 }
@@ -155,15 +149,16 @@ public String postJsonToServer(String StringUrl, String data) throws Exception {
         } catch (Exception e) {
             e.printStackTrace();
         }
-        Log.i(TAG, "Response: " + sb.toString());
+        Utils.printLog(context,TAG, "Response: " + sb.toString());
         return sb.toString();
     }
-    public String getResponse(String urlString, String contentType, String accept){
-        return getResponse(urlString, contentType, accept,false);
+
+    public String getResponse(String urlString, String contentType, String accept) {
+        return getResponse(urlString, contentType, accept, false);
     }
 
-    public String getResponse(String urlString, String contentType, String accept,boolean isFileUpload) {
-        Log.i(TAG, "Calling url: " + urlString);
+    public String getResponse(String urlString, String contentType, String accept, boolean isFileUpload) {
+        Utils.printLog(context,TAG, "Calling url: " + urlString);
 
         HttpURLConnection connection = null;
         URL url;
@@ -189,17 +184,17 @@ public String getResponse(String urlString, String contentType, String accept,bo
                 return null;
             }
             BufferedReader br = null;
-            if(connection.getResponseCode() == HttpURLConnection.HTTP_OK){
+            if (connection.getResponseCode() == HttpURLConnection.HTTP_OK) {
                 InputStream inputStream = connection.getInputStream();
                 br = new BufferedReader(new InputStreamReader(inputStream, "UTF-8"));
-            }else {
-                Log.i(TAG,"Response code for getResponse is  :"+connection.getResponseCode());
+            } else {
+                Utils.printLog(context,TAG, "Response code for getResponse is  :" + connection.getResponseCode());
             }
 
             StringBuilder sb = new StringBuilder();
             try {
                 String line;
-                if (br != null){
+                if (br != null) {
                     while ((line = br.readLine()) != null) {
                         sb.append(line);
                     }
@@ -207,16 +202,16 @@ public String getResponse(String urlString, String contentType, String accept,bo
             } catch (Exception e) {
                 e.printStackTrace();
             }
-            Log.i(TAG,"Response :"+sb.toString());
+            Utils.printLog(context,TAG, "Response :" + sb.toString());
 
-            if(!TextUtils.isEmpty(sb.toString())){
-                if(!TextUtils.isEmpty(MobiComUserPreference.getInstance(context).getEncryptionKey())){
-                   return isFileUpload?sb.toString(): EncryptionUtils.decrypt(MobiComUserPreference.getInstance(context).getEncryptionKey(),sb.toString());
+            if (!TextUtils.isEmpty(sb.toString())) {
+                if (!TextUtils.isEmpty(MobiComUserPreference.getInstance(context).getEncryptionKey())) {
+                    return isFileUpload ? sb.toString() : EncryptionUtils.decrypt(MobiComUserPreference.getInstance(context).getEncryptionKey(), sb.toString());
                 }
             }
             return sb.toString();
         } catch (ConnectException e) {
-            Log.i(TAG, "failed to connect Internet is not working");
+            Utils.printLog(context,TAG, "failed to connect Internet is not working");
         } catch (Exception e) {
             e.printStackTrace();
         } finally {
@@ -238,17 +233,17 @@ public void addGlobalHeaders(HttpURLConnection connection) {
             connection.setRequestProperty(USERID_HEADER, USERID_HEADER_VALUE);
             connection.setRequestProperty(DEVICE_KEY_HEADER, MobiComUserPreference.getInstance(context).getDeviceKeyString());
             Short authenticationType = Short.valueOf(MobiComUserPreference.getInstance(context).getAuthenticationType());
-            if(User.AuthenticationType.APPLOZIC.getValue() == authenticationType ){
+            if (User.AuthenticationType.APPLOZIC.getValue() == authenticationType) {
                 connection.setRequestProperty(ACCESS_TOKEN, MobiComUserPreference.getInstance(context).getPassword());
             }
 
-            if(MobiComKitClientService.getAppModuleName(context)!=null){
-                connection.setRequestProperty(APP_MODULE_NAME_KEY_HEADER,MobiComKitClientService.getAppModuleName(context));
+            if (MobiComKitClientService.getAppModuleName(context) != null) {
+                connection.setRequestProperty(APP_MODULE_NAME_KEY_HEADER, MobiComKitClientService.getAppModuleName(context));
             }
 
             MobiComUserPreference userPreferences = MobiComUserPreference.getInstance(context);
             if (userPreferences.isRegistered()) {
-                String userCredentials = getCredentials().getUserName() + ":" +String.valueOf(getCredentials().getPassword());
+                String userCredentials = getCredentials().getUserName() + ":" + String.valueOf(getCredentials().getPassword());
                 String basicAuth = "Basic " + Base64.encodeToString(userCredentials.getBytes(), Base64.NO_WRAP);
                 connection.setRequestProperty("Authorization", basicAuth);
             }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/MobiComKitClientService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/MobiComKitClientService.java
index c10751c4..f35bd1fc 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/MobiComKitClientService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/MobiComKitClientService.java
@@ -20,15 +20,14 @@
  */
 public class MobiComKitClientService {
 
-    protected Context context;
     public static final String BASE_URL_METADATA = "com.applozic.server.url";
     public static final String MQTT_BASE_URL_METADATA = "com.applozic.mqtt.server.url";
+    public static final String FILE_URL = "/rest/ws/aws/file/";
     public static String APPLICATION_KEY_HEADER = "Application-Key";
     public static String APP_MOUDLE_NAME_KEY_HEADER = "App-Module-Name";
     public static String APPLICATION_KEY_HEADER_VALUE_METADATA = "com.applozic.application.key";
-    public static String APP_MODULE_NAME_META_DATA_KEY= "com.applozic.module.key";
-
-    public static final String FILE_URL = "/rest/ws/aws/file/";
+    public static String APP_MODULE_NAME_META_DATA_KEY = "com.applozic.module.key";
+    protected Context context;
     protected String DEFAULT_URL = "https://apps.applozic.com";
     protected String FILE_BASE_URL = "https://applozic.appspot.com";
     protected String DEFAULT_MQTT_URL = "tcp://apps.applozic.com:1883";
@@ -38,7 +37,21 @@ public MobiComKitClientService() {
     }
 
     public MobiComKitClientService(Context context) {
-        this.context = context;
+        this.context = context.getApplicationContext();
+    }
+
+    public static String getApplicationKey(Context context) {
+        String applicationKey = Applozic.getInstance(context).getApplicationKey();
+        if (!TextUtils.isEmpty(applicationKey)) {
+            return applicationKey;
+        }
+        return Utils.getMetaDataValue(context.getApplicationContext(), APPLICATION_KEY_HEADER_VALUE_METADATA);
+    }
+
+    public static String getAppModuleName(Context context) {
+
+        return Utils.getMetaDataValue(context.getApplicationContext(), APP_MODULE_NAME_META_DATA_KEY);
+
     }
 
     protected String getBaseUrl() {
@@ -47,7 +60,7 @@ protected String getBaseUrl() {
         if (!TextUtils.isEmpty(SELECTED_BASE_URL)) {
             return SELECTED_BASE_URL;
         }
-        String BASE_URL = Utils.getMetaDataValue(context, BASE_URL_METADATA);
+        String BASE_URL = Utils.getMetaDataValue(context.getApplicationContext(), BASE_URL_METADATA);
         if (!TextUtils.isEmpty(BASE_URL)) {
             return BASE_URL;
         }
@@ -56,11 +69,11 @@ protected String getBaseUrl() {
     }
 
     protected String getMqttBaseUrl() {
-        String MQTT_BROKER_URL =  MobiComUserPreference.getInstance(context).getMqttBrokerUrl();
-        if(!TextUtils.isEmpty(MQTT_BROKER_URL)){
+        String MQTT_BROKER_URL = MobiComUserPreference.getInstance(context).getMqttBrokerUrl();
+        if (!TextUtils.isEmpty(MQTT_BROKER_URL)) {
             return MQTT_BROKER_URL;
         }
-        String MQTT_BASE_URL = Utils.getMetaDataValue(context, MQTT_BASE_URL_METADATA);
+        String MQTT_BASE_URL = Utils.getMetaDataValue(context.getApplicationContext(), MQTT_BASE_URL_METADATA);
         if (!TextUtils.isEmpty(MQTT_BASE_URL)) {
             return MQTT_BASE_URL;
         }
@@ -74,6 +87,7 @@ public PasswordAuthentication getCredentials() {
         }
         return new PasswordAuthentication(userPreferences.getUserId(), userPreferences.getDeviceKeyString().toCharArray());
     }
+
     public HttpURLConnection openHttpConnection(String urlString) throws IOException {
         HttpURLConnection httpConn;
 
@@ -112,21 +126,6 @@ public HttpURLConnection openHttpConnection(String urlString) throws IOException
         return httpConn;
     }
 
-    public static String getApplicationKey(Context context) {
-        String applicationKey = Applozic.getInstance(context).getApplicationKey();
-        if(!TextUtils.isEmpty(applicationKey)){
-            return applicationKey;
-        }
-        return Utils.getMetaDataValue(context, APPLICATION_KEY_HEADER_VALUE_METADATA);
-    }
-
-    public static String getAppModuleName(Context context) {
-
-        return Utils.getMetaDataValue(context, APP_MODULE_NAME_META_DATA_KEY);
-
-    }
-
-
     public String getFileUrl() {
         return FILE_BASE_URL + FILE_URL;
     }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/MobiComKitConstants.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/MobiComKitConstants.java
index 8976a175..4320f4a4 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/MobiComKitConstants.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/MobiComKitConstants.java
@@ -10,14 +10,25 @@
     public static final String ERROR = "error";
     public static final String SUCCESS = "success";
     public static final String APPLOZIC_UNREAD_COUNT = "APPLOZIC_UNREAD_COUNT";
+    public static final String QUICK_LIST = "QUICK_LIST";
+    public static final String MESSAGE = "MESSAGE";
+    public static final String HIDDEN = "HIDDEN";
+    public static final String PUSH_NOTIFICATION = "PUSH_NOTIFICATION";
 
     public static final String ACTIVITY_TO_OPEN = "ACTIVITY_TO_OPEN";
     public static final String LOCATION = "Location";
     public static final String AUDIO = "Audio";
     public static final String VIDEO = "Video";
     public static final String ATTACHMENT = "Attachment";
+    public static final String APPLOZIC_VIDEO_CALL_ANSWER = "applozic.video.call.answer";
+    public static final String APPLOZIC_VIDEO_CALL_REJECTED = "applozic.video.call.rejected";
+    public static final String APPLOZIC_VIDEO_DIALED = "applozic.video.call.dialed";
+    public static final String PACKAGE_NAME = "com.package.name";
+    public static final String AL_MESSAGE = "AL_MESSAGE";
     public static String APPLICATION_KEY_META_DATA = "com.applozic.application.key";
     public static String APPLICATION_ACTIVITY_TO_OPEN_ON_CHAT_TOOLBAR_TAP = "com.applozic.mobicomkit.uiwidgets.toolbar.tap.activity";
     public static String APPLICATION_LOGIN_ACTIVITY = "com.applozic.loginActivity";
+    public static String GROUP_USER_LIMIT_EXCEED = "GROUP_USER_LIMIT_EXCEED";
+    public static final String APPLICATION_INFO_RESPONSE  = "\"success\"";
 
 }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/MobiComKitServer.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/MobiComKitServer.java
index cd5401c7..61a6d6a4 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/MobiComKitServer.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/MobiComKitServer.java
@@ -7,24 +7,23 @@
  */
 public class MobiComKitServer {
 
-    private Context context;
-    public MobiComKitServer(Context context) {
-        this.context = context;
-    }
-
     public static final boolean PROD = true;
     public static final String PROD_DISPLAY_URL = "https://apps.applozic.com";
-    public static final String SERVER_DEVICE_CONTACT_SYNC_URL =  "/rest/ws/contact/v1/device/add";
+    public static final String SERVER_DEVICE_CONTACT_SYNC_URL = "/rest/ws/contact/v1/device/add";
     public static final String SERVER_CONTACT_SYNC_URL = "/rest/ws/contact/v1/add";
     public static final String FREE_MESSAGE_FAILED_URL = "/rest/ws/sms/mtext/failed?";
-    public static final String CONTACT_SYNC_COMPLETE_URL =  "/rest/ws/contact/syncCompleted?suUserKeyString";
-
+    public static final String CONTACT_SYNC_COMPLETE_URL = "/rest/ws/contact/syncCompleted?suUserKeyString";
     //Todo: Fix this url.
     public static final String APP_SERVER_URL = "xxx";
     //public static final String ERROR_BASE_URL = "http://onlinesmsutility.appspot.com";
     public static final String ERROR_BASE_URL = "https://osu-alpha.appspot.com";
     public static final String SUBMIT_ERROR_URL = ERROR_BASE_URL + "/rest/ws/error/submit";
     public static String SUPPORT_PHONE_NUMBER_METADATA = "com.applozic.support.phone.number";
+    private Context context;
+
+    public MobiComKitServer(Context context) {
+        this.context = context;
+    }
 //    public static String APPLICATION_KEY_HEADER_VALUE = "c";
 
 
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/register/RegisterUserClientService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/register/RegisterUserClientService.java
index 48db1d0c..c2794801 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/register/RegisterUserClientService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/register/RegisterUserClientService.java
@@ -3,7 +3,6 @@
 import android.content.Context;
 import android.content.Intent;
 import android.text.TextUtils;
-import android.util.Log;
 
 import com.applozic.mobicomkit.api.HttpRequestUtils;
 import com.applozic.mobicomkit.api.MobiComKitClientService;
@@ -32,13 +31,13 @@
     public static final String CREATE_ACCOUNT_URL = "/rest/ws/register/client?";
     public static final String UPDATE_ACCOUNT_URL = "/rest/ws/register/update?";
     public static final String CHECK_PRICING_PACKAGE = "/rest/ws/application/pricing/package";
-    public static final Short MOBICOMKIT_VERSION_CODE = 107;
+    public static final Short MOBICOMKIT_VERSION_CODE = 109;
     private static final String TAG = "RegisterUserClient";
     private static final String INVALID_APP_ID = "INVALID_APPLICATIONID";
     private HttpRequestUtils httpRequestUtils;
 
     public RegisterUserClientService(Context context) {
-        this.context = context;
+        this.context = context.getApplicationContext();
         this.httpRequestUtils = new HttpRequestUtils(context);
     }
 
@@ -67,6 +66,8 @@ public RegistrationResponse createAccount(User user) throws Exception {
         user.setDeviceType(Short.valueOf("1"));
         user.setPrefContactAPI(Short.valueOf("2"));
         user.setTimezone(TimeZone.getDefault().getID());
+        user.setEnableEncryption(user.isEnableEncryption());
+
 
         MobiComUserPreference mobiComUserPreference = MobiComUserPreference.getInstance(context);
 
@@ -79,17 +80,17 @@ public RegistrationResponse createAccount(User user) throws Exception {
             user.setAppModuleName(getAppModuleName(context));
         }
 
-        Log.i(TAG, "Net status" + Utils.isInternetAvailable(context));
+        Utils.printLog(context,TAG, "Net status" + Utils.isInternetAvailable(context.getApplicationContext()));
 
-        if (!Utils.isInternetAvailable(context)) {
+        if (!Utils.isInternetAvailable(context.getApplicationContext())) {
             throw new ConnectException("No Internet Connection");
         }
 
 //        Log.i(TAG, "App Id is: " + getApplicationKey(context));
-        Log.i(TAG, "Registration json " + gson.toJson(user));
+        Utils.printLog(context,TAG, "Registration json " + gson.toJson(user));
         String response = httpRequestUtils.postJsonToServer(getCreateAccountUrl(), gson.toJson(user));
 
-        Log.i(TAG, "Registration response is: " + response);
+        Utils.printLog(context,TAG, "Registration response is: " + response);
 
         if (TextUtils.isEmpty(response) || response.contains("<html")) {
             throw new Exception("503 Service Unavailable");
@@ -104,11 +105,12 @@ public RegistrationResponse createAccount(User user) throws Exception {
             throw new UnAuthoriseException("Invalid uername/password");
 
         }
-        Log.i("Registration response ", "is " + registrationResponse);
-       if(registrationResponse.getNotificationResponse() != null){
-           Log.e("Registration response ",""+registrationResponse.getNotificationResponse());
-       }
+        Utils.printLog(context,"Registration response ", "is " + registrationResponse);
+        if (registrationResponse.getNotificationResponse() != null) {
+            Utils.printLog(context,"Registration response ", "" + registrationResponse.getNotificationResponse());
+        }
         mobiComUserPreference.setEncryptionKey(registrationResponse.getEncryptionKey());
+        mobiComUserPreference.enableEncryption(user.isEnableEncryption());
         mobiComUserPreference.setCountryCode(user.getCountryCode());
         mobiComUserPreference.setUserId(user.getUserId());
         mobiComUserPreference.setContactNumber(user.getContactNumber());
@@ -126,24 +128,28 @@ public RegistrationResponse createAccount(User user) throws Exception {
         mobiComUserPreference.setPassword(user.getPassword());
         mobiComUserPreference.setPricingPackage(registrationResponse.getPricingPackage());
         mobiComUserPreference.setAuthenticationType(String.valueOf(user.getAuthenticationTypeId()));
-
-        Contact contact=  new Contact();
+        if (user.getUserTypeId() != null) {
+            mobiComUserPreference.setUserTypeId(String.valueOf(user.getUserTypeId()));
+        }
+        if(!TextUtils.isEmpty(user.getNotificationSoundFilePath())){
+            mobiComUserPreference.setNotificationSoundFilePath(user.getNotificationSoundFilePath());
+        }
+        Contact contact = new Contact();
         contact.setUserId(user.getUserId());
         contact.setFullName(registrationResponse.getDisplayName());
         contact.setImageURL(registrationResponse.getImageLink());
         contact.setContactNumber(registrationResponse.getContactNumber());
+        if (user.getUserTypeId() != null) {
+            contact.setUserTypeId(user.getUserTypeId());
+        }
         contact.setStatus(registrationResponse.getStatusMessage());
         contact.processContactNumbers(context);
         new AppContactService(context).upsert(contact);
 
-        new Thread(new Runnable() {
-            @Override
-            public void run() {
-                SyncCallService.getInstance(context).getLatestMessagesGroupByPeople();
-                Intent intent = new Intent(context, ConversationIntentService.class);
-                context.startService(intent);
-            }
-        }).start();
+        Intent conversationIntentService = new Intent(context, ConversationIntentService.class);
+        conversationIntentService.putExtra(ConversationIntentService.SYNC, false);
+        context.startService(conversationIntentService);
+
         Intent intent = new Intent(context, ApplozicMqttIntentService.class);
         intent.putExtra(ApplozicMqttIntentService.CONNECTED_PUBLISH, true);
         context.startService(intent);
@@ -218,14 +224,20 @@ public RegistrationResponse updateRegisteredAccount(User user) throws Exception
         MobiComUserPreference mobiComUserPreference = MobiComUserPreference.getInstance(context);
 
         Gson gson = new Gson();
+        user.setEnableEncryption(mobiComUserPreference.isEncryptionEnabled());
         user.setAppVersionCode(MOBICOMKIT_VERSION_CODE);
         user.setApplicationId(getApplicationKey(context));
-        if(getAppModuleName(context) != null){
+        user.setAuthenticationTypeId(Short.valueOf(mobiComUserPreference.getAuthenticationType()));
+        if (!TextUtils.isEmpty(mobiComUserPreference.getUserTypeId())) {
+            user.setUserTypeId(Short.valueOf(mobiComUserPreference.getUserTypeId()));
+        }
+        if (getAppModuleName(context) != null) {
             user.setAppModuleName(getAppModuleName(context));
         }
-        user.setRegistrationId(mobiComUserPreference.getDeviceRegistrationId());
-
-        Log.i(TAG, "Registration update json " + gson.toJson(user));
+        if (!TextUtils.isEmpty(mobiComUserPreference.getDeviceRegistrationId())) {
+            user.setRegistrationId(mobiComUserPreference.getDeviceRegistrationId());
+        }
+        Utils.printLog(context,TAG, "Registration update json " + gson.toJson(user));
         String response = httpRequestUtils.postJsonToServer(getUpdateAccountUrl(), gson.toJson(user));
 
         if (TextUtils.isEmpty(response) || response.contains("<html")) {
@@ -235,16 +247,16 @@ public RegistrationResponse updateRegisteredAccount(User user) throws Exception
             throw new InvalidApplicationException("Invalid Application Id");
         }
 
-        registrationResponse  = gson.fromJson(response, RegistrationResponse.class);
+        registrationResponse = gson.fromJson(response, RegistrationResponse.class);
 
         if (registrationResponse.isPasswordInvalid()) {
             throw new UnAuthoriseException("Invalid uername/password");
         }
 
-        Log.i(TAG, "Registration update response: " + registrationResponse);
+        Utils.printLog(context,TAG, "Registration update response: " + registrationResponse);
         mobiComUserPreference.setPricingPackage(registrationResponse.getPricingPackage());
-        if(registrationResponse.getNotificationResponse() != null){
-            Log.e(TAG,"Notification response: "+registrationResponse.getNotificationResponse());
+        if (registrationResponse.getNotificationResponse() != null) {
+            Utils.printLog(context,TAG, "Notification response: " + registrationResponse.getNotificationResponse());
         }
 
         return registrationResponse;
@@ -267,14 +279,14 @@ private User getUserDetail() {
     public void syncAccountStatus() {
         try {
             String response = httpRequestUtils.getResponse(getPricingPackageUrl(), "application/json", "application/json");
-            Log.i(TAG, "Pricing package response: " + response);
+            Utils.printLog(context,TAG, "Pricing package response: " + response);
             ApiResponse apiResponse = (ApiResponse) GsonUtils.getObjectFromJson(response, ApiResponse.class);
             if (apiResponse.getResponse() != null) {
                 int pricingPackage = Integer.parseInt(apiResponse.getResponse().toString());
                 MobiComUserPreference.getInstance(context).setPricingPackage(pricingPackage);
             }
         } catch (Exception e) {
-            Log.i(TAG, "Account status sync call failed");
+            Utils.printLog(context,TAG, "Account status sync call failed");
         }
     }
 
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/register/RegistrationResponse.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/register/RegistrationResponse.java
index 3402c369..60298c06 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/register/RegistrationResponse.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/register/RegistrationResponse.java
@@ -22,27 +22,15 @@
     private String imageLink;
     private String statusMessage;
     private String encryptionKey;
+    private boolean enableEncryption;
     private Short pricingPackage = PricingType.STARTER.getValue();
 
-    public static enum PricingType {
-
-        CLOSED(Short.valueOf("-1")), BETA(Short.valueOf("0")), STARTER(Short.valueOf("1")), LAUNCH(Short.valueOf("2")), GROWTH(Short.valueOf("3")), ENTERPRISE(
-                Short.valueOf("4"));
-        private final Short value;
-
-        private PricingType(Short c) {
-            value = c;
-        }
-
-        public Short getValue() {
-            return value;
-        }
-    };
-
     public String getMessage() {
         return message;
     }
 
+    ;
+
     public void setMessage(String message) {
         this.message = message;
     }
@@ -103,8 +91,8 @@ public void setBrokerUrl(String brokerUrl) {
         this.brokerUrl = brokerUrl;
     }
 
-    public boolean isPasswordInvalid(){
-        return (! TextUtils.isEmpty(message) && ( "PASSWORD_INVALID".equals(message) || "PASSWORD_REQUIRED".equals(message) ));
+    public boolean isPasswordInvalid() {
+        return (!TextUtils.isEmpty(message) && ("PASSWORD_INVALID".equals(message) || "PASSWORD_REQUIRED".equals(message)));
     }
 
     public Short getPricingPackage() {
@@ -130,6 +118,7 @@ public String getDisplayName() {
     public void setDisplayName(String displayName) {
         this.displayName = displayName;
     }
+
     public String getImageLink() {
         return imageLink;
     }
@@ -154,6 +143,14 @@ public void setEncryptionKey(String encryptionKey) {
         this.encryptionKey = encryptionKey;
     }
 
+    public boolean isEnableEncryption() {
+        return enableEncryption;
+    }
+
+    public void setEnableEncryption(boolean enableEncryption) {
+        this.enableEncryption = enableEncryption;
+    }
+
     @Override
     public String toString() {
         return "RegistrationResponse{" +
@@ -170,7 +167,23 @@ public String toString() {
                 ", imageLink='" + imageLink + '\'' +
                 ", statusMessage='" + statusMessage + '\'' +
                 ", encryptionKey='" + encryptionKey + '\'' +
+                ", enableEncryption=" + enableEncryption +
                 ", pricingPackage=" + pricingPackage +
                 '}';
     }
+
+    public static enum PricingType {
+
+        CLOSED(Short.valueOf("-1")), BETA(Short.valueOf("0")), STARTER(Short.valueOf("1")), LAUNCH(Short.valueOf("2")), GROWTH(Short.valueOf("3")), ENTERPRISE(
+                Short.valueOf("4"));
+        private final Short value;
+
+        private PricingType(Short c) {
+            value = c;
+        }
+
+        public Short getValue() {
+            return value;
+        }
+    }
 }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/CustomerPackageDetail.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/CustomerPackageDetail.java
new file mode 100644
index 00000000..d8146b54
--- /dev/null
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/CustomerPackageDetail.java
@@ -0,0 +1,46 @@
+package com.applozic.mobicomkit.api.account.user;
+
+import com.applozic.mobicommons.json.JsonMarker;
+
+/**
+ * Created by Rahul-PC on 17-05-2017.
+ */
+
+public class CustomerPackageDetail extends JsonMarker {
+    private String applicationKey;
+    private String packageName;
+    private String bundleIdentifier;
+    private String webInfo;
+
+    public String getApplicationKey() {
+        return applicationKey;
+    }
+
+    public void setApplicationKey(String applicationKey) {
+        this.applicationKey = applicationKey;
+    }
+
+    public String getPackageName() {
+        return packageName;
+    }
+
+    public void setPackageName(String packageName) {
+        this.packageName = packageName;
+    }
+
+    public String getBundleIdentifier() {
+        return bundleIdentifier;
+    }
+
+    public void setBundleIdentifier(String bundleIdentifier) {
+        this.bundleIdentifier = bundleIdentifier;
+    }
+
+    public String getWebInfo() {
+        return webInfo;
+    }
+
+    public void setWebInfo(String webInfo) {
+        this.webInfo = webInfo;
+    }
+}
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/MobiComUserPreference.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/MobiComUserPreference.java
index 6da0b7bd..0a4868e4 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/MobiComUserPreference.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/MobiComUserPreference.java
@@ -38,11 +38,11 @@
     private static String base_url = "base_url";
     private static String display_name = "display_name";
     private static String logged_in = "logged_in";
-    private static String lastSeenAtSyncTime ="lastSeenAtSyncTime";
-    private static String channelSyncTime ="channelSyncTime";
+    private static String lastSeenAtSyncTime = "lastSeenAtSyncTime";
+    private static String channelSyncTime = "channelSyncTime";
     private static String device_time_offset_from_UTC = "device_time_offset_from_UTC";
     private static String image_compression_enabled = "image_compression_enabled";
-    private static  String userBlockSyncTime = "user_block_Sync_Time";
+    private static String userBlockSyncTime = "user_block_Sync_Time";
     private static String max_compressed_image_size = "max_compressed_image_size";
     private static String image_link = "image_link";
     private static String registered_users_last_fetch_time = "registered_users_last_fetch_time";
@@ -53,6 +53,13 @@
     private static String pricing_package = "pricing_package";
     private static String delete_channel = "delete_channel";
     private static String encryption_Key = "encryption_Key";
+    private static String enable_encryption = "enable_encryption";
+    private static String enable_auto_download_on_wifi = "enable_auto_download_on_wifi";
+    private static String enable_auto_download_on_cellular = "enable_auto_download_on_cellular";
+    private static String video_call_token = "video_call_token";
+    private static String user_type_id = "user_type_id";
+    private static String application_info_call_done = "application_info_call_done";
+    private static String notification_sound_fileName = "notificationSoundFileName";
 
     public SharedPreferences sharedPreferences;
     private Context context;
@@ -67,7 +74,7 @@ private MobiComUserPreference(Context context) {
 
     public static MobiComUserPreference getInstance(Context context) {
         if (userpref == null) {
-            userpref = new MobiComUserPreference(context);
+            userpref = new MobiComUserPreference(context.getApplicationContext());
         }
         return userpref;
     }
@@ -264,7 +271,7 @@ public String getContactNumber() {
     }
 
     public void setContactNumber(String contactNumber) {
-       // contactNumber = ContactNumberUtils.getPhoneNumber(contactNumber, getCountryCode());
+        // contactNumber = ContactNumberUtils.getPhoneNumber(contactNumber, getCountryCode());
         sharedPreferences.edit().putString(phone_number_key, contactNumber).commit();
     }
 
@@ -276,14 +283,14 @@ public void setDisplayCallRecordEnable(boolean enable) {
         sharedPreferences.edit().putBoolean(call_history_display_within_messages_pref_key, enable).commit();
     }
 
-    public void setNewMessageFlag(boolean enable) {
-        sharedPreferences.edit().putBoolean(new_message_flag, enable).commit();
-    }
-
     public boolean getNewMessageFlag() {
         return sharedPreferences.getBoolean(new_message_flag, false);
     }
 
+    public void setNewMessageFlag(boolean enable) {
+        sharedPreferences.edit().putBoolean(new_message_flag, enable).commit();
+    }
+
     public long getDeviceTimeOffset() {
         return sharedPreferences.getLong(device_time_offset_from_UTC, 0L);
     }
@@ -331,14 +338,14 @@ public void setMqttBrokerUrl(String url) {
         sharedPreferences.edit().putString(mqtt_broker_url, url).commit();
     }
 
-    public void setPricingPackage(int pricingPackage) {
-        sharedPreferences.edit().putInt(pricing_package, pricingPackage).commit();
-    }
-
     public int getPricingPackage() {
         return sharedPreferences.getInt(pricing_package, RegistrationResponse.PricingType.STARTER.getValue());
     }
 
+    public void setPricingPackage(int pricingPackage) {
+        sharedPreferences.edit().putInt(pricing_package, pricingPackage).commit();
+    }
+
     public String getDisplayName() {
         return sharedPreferences.getString(display_name, null);
     }
@@ -367,14 +374,14 @@ public void setChannelSyncTime(String syncChannelTime) {
         sharedPreferences.edit().putString(channelSyncTime, syncChannelTime).commit();
     }
 
-    public void setCompressedImageSizeInMB(int maxSize) {
+    public int getCompressedImageSizeInMB() {
+        return sharedPreferences.getInt(max_compressed_image_size, 10);
 
-        sharedPreferences.edit().putInt(max_compressed_image_size, maxSize).commit();
     }
 
-    public int getCompressedImageSizeInMB() {
-       return  sharedPreferences.getInt(max_compressed_image_size,10);
+    public void setCompressedImageSizeInMB(int maxSize) {
 
+        sharedPreferences.edit().putInt(max_compressed_image_size, maxSize).commit();
     }
 
     public String getUserBlockSyncTime() {
@@ -422,7 +429,7 @@ public void setDeleteChannel(boolean channelDelete) {
     }
 
     public boolean isChannelDeleted() {
-        return sharedPreferences.getBoolean(delete_channel,false);
+        return sharedPreferences.getBoolean(delete_channel, false);
     }
 
     @Override
@@ -445,14 +452,14 @@ public boolean clearAll() {
 
     }
 
-    public void setImageCompressionEnabled(boolean imageCompressionEnabled) {
-        sharedPreferences.edit().putBoolean(image_compression_enabled, imageCompressionEnabled).commit();
-    }
-
     public boolean isImageCompressionEnabled() {
         return sharedPreferences.getBoolean(image_compression_enabled, true);
     }
 
+    public void setImageCompressionEnabled(boolean imageCompressionEnabled) {
+        sharedPreferences.edit().putBoolean(image_compression_enabled, imageCompressionEnabled).commit();
+    }
+
     public boolean getWasContactListServerCallAlreadyDone() {
         return sharedPreferences.getBoolean(contact_list_server_call, false);
     }
@@ -468,4 +475,62 @@ public String getEncryptionKey() {
     public void setEncryptionKey(String encryptionKey) {
         sharedPreferences.edit().putString(encryption_Key, encryptionKey).commit();
     }
+
+    public boolean isEncryptionEnabled() {
+        return sharedPreferences.getBoolean(enable_encryption, false);
+    }
+
+    public void enableEncryption(boolean enableEncryption) {
+        sharedPreferences.edit().putBoolean(enable_encryption, enableEncryption).commit();
+    }
+
+    public boolean getAutoDownloadOnWifi() {
+        return sharedPreferences.getBoolean(enable_auto_download_on_wifi, false);
+    }
+
+    public void setAutoDownloadOnWifi(boolean enable) {
+        sharedPreferences.edit().putBoolean(enable_auto_download_on_wifi, enable).commit();
+    }
+
+    public boolean getAutoDownloadOnCellular() {
+        return sharedPreferences.getBoolean(enable_auto_download_on_cellular, false);
+    }
+
+    public void setAutoDownloadOnCellular(boolean enable) {
+        sharedPreferences.edit().putBoolean(enable_auto_download_on_cellular, enable).commit();
+    }
+
+    public String getVideoCallToken() {
+        return sharedPreferences.getString(video_call_token, null);
+    }
+
+    public void setVideoCallToken(String token) {
+        sharedPreferences.edit().putString(video_call_token, token).commit();
+
+    }
+
+    public String getUserTypeId() {
+        return sharedPreferences.getString(user_type_id, null);
+    }
+
+    public void setUserTypeId(String userTypeId) {
+        sharedPreferences.edit().putString(user_type_id, userTypeId).commit();
+    }
+
+
+    public boolean getApplicationInfoCall() {
+        return sharedPreferences.getBoolean(application_info_call_done, false);
+    }
+
+    public  void setApplicationInfoCallDone(boolean customerResponse) {
+        sharedPreferences.edit().putBoolean(application_info_call_done,customerResponse).commit();
+    }
+
+    public String getNotificationSoundFilePath() {
+        return sharedPreferences.getString(notification_sound_fileName, null);
+    }
+
+    public void setNotificationSoundFilePath(String soundUri) {
+        sharedPreferences.edit().putString(notification_sound_fileName, soundUri).commit();
+    }
 }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/PushNotificationTask.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/PushNotificationTask.java
index 61412e7f..54a929ae 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/PushNotificationTask.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/PushNotificationTask.java
@@ -11,21 +11,12 @@
  */
 public class PushNotificationTask extends AsyncTask<Void, Void, Boolean> {
 
-    public interface TaskListener {
-
-        void onSuccess(RegistrationResponse registrationResponse);
-
-        void onFailure(RegistrationResponse registrationResponse, Exception exception);
-
-    }
-
     private final String pushNotificationId;
     private final TaskListener taskListener;
     private final Context context;
     private Exception mException;
     private RegistrationResponse registrationResponse;
 
-
     public PushNotificationTask(String pushNotificationId, TaskListener listener, Context context) {
         this.pushNotificationId = pushNotificationId;
         this.taskListener = listener;
@@ -54,4 +45,12 @@ protected void onPostExecute(final Boolean result) {
             this.taskListener.onFailure(registrationResponse, mException);
         }
     }
+
+    public interface TaskListener {
+
+        void onSuccess(RegistrationResponse registrationResponse);
+
+        void onFailure(RegistrationResponse registrationResponse, Exception exception);
+
+    }
 }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/RegisteredUsersAsyncTask.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/RegisteredUsersAsyncTask.java
new file mode 100644
index 00000000..7925e996
--- /dev/null
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/RegisteredUsersAsyncTask.java
@@ -0,0 +1,83 @@
+package com.applozic.mobicomkit.api.account.user;
+
+import android.content.Context;
+import android.os.AsyncTask;
+
+import com.applozic.mobicomkit.api.conversation.Message;
+import com.applozic.mobicomkit.feed.RegisteredUsersApiResponse;
+
+/**
+ * Created by sunil on 3/10/16.
+ */
+public class RegisteredUsersAsyncTask extends AsyncTask<Void, Void, Boolean> {
+
+    private final TaskListener taskListener;
+    Context context;
+    int numberOfUsersToFetch;
+    UserService userService;
+    long lastTimeFetched;
+    String[] userIdArray;
+    RegisteredUsersApiResponse registeredUsersApiResponse;
+    boolean callForRegistered;
+    private Exception mException;
+    private Message message;
+    private String messageContent;
+
+    public RegisteredUsersAsyncTask(Context context, TaskListener listener, int numberOfUsersToFetch, Message message, String messageContent) {
+        this.message = message;
+        this.context = context;
+        this.taskListener = listener;
+        this.messageContent = messageContent;
+        this.numberOfUsersToFetch = numberOfUsersToFetch;
+        this.userService = UserService.getInstance(context);
+    }
+
+
+    public RegisteredUsersAsyncTask(Context context, TaskListener listener, int numberOfUsersToFetch, long lastTimeFetched, Message message, String messageContent, boolean callForRegistered) {
+        this.callForRegistered = callForRegistered;
+        this.message = message;
+        this.taskListener = listener;
+        this.context = context;
+        this.messageContent = messageContent;
+        this.numberOfUsersToFetch = numberOfUsersToFetch;
+        this.lastTimeFetched = lastTimeFetched;
+        this.userService = UserService.getInstance(context);
+    }
+
+    @Override
+    protected Boolean doInBackground(Void... params) {
+        try {
+            if (callForRegistered) {
+                registeredUsersApiResponse = userService.getRegisteredUsersList(lastTimeFetched, numberOfUsersToFetch);
+            } else {
+                userIdArray = userService.getOnlineUsers(numberOfUsersToFetch);
+            }
+            return registeredUsersApiResponse != null || userIdArray != null;
+        } catch (Exception e) {
+            e.printStackTrace();
+            mException = e;
+            return false;
+        }
+    }
+
+    @Override
+    protected void onPostExecute(final Boolean result) {
+        if (result && this.taskListener != null) {
+            this.taskListener.onSuccess(registeredUsersApiResponse, userIdArray);
+        } else if (!result && this.taskListener != null) {
+            this.taskListener.onFailure(registeredUsersApiResponse, userIdArray, mException);
+        }
+        this.taskListener.onCompletion();
+    }
+
+    public interface TaskListener {
+
+        void onSuccess(RegisteredUsersApiResponse registeredUsersApiResponse, String[] userIdArray);
+
+        void onFailure(RegisteredUsersApiResponse registeredUsersApiResponse, String[] userIdArray, Exception exception);
+
+        void onCompletion();
+    }
+
+
+}
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/User.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/User.java
index 14eaad18..8a0d85d5 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/User.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/User.java
@@ -2,6 +2,8 @@
 
 import com.applozic.mobicommons.json.JsonMarker;
 
+import java.util.List;
+
 /**
  * Created by devashish on 22/12/14.
  */
@@ -21,10 +23,21 @@
     private String roleName = "USER";
     private Short deviceType;
     private String imageLink;
+    private boolean enableEncryption;
     private Short authenticationTypeId = AuthenticationType.CLIENT.getValue();
     private String displayName;
-
     private String appModuleName;
+    private Short userTypeId;
+    private List<String> features;
+    private String notificationSoundFilePath;
+
+    public List<String> getFeatures() {
+        return features;
+    }
+
+    public void setFeatures(List<String> features) {
+        this.features = features;
+    }
 
     public String getUserId() {
         return userId;
@@ -162,6 +175,30 @@ public void setImageLink(String imageLink) {
         this.imageLink = imageLink;
     }
 
+    public boolean isEnableEncryption() {
+        return enableEncryption;
+    }
+
+    public void setEnableEncryption(boolean enableEncryption) {
+        this.enableEncryption = enableEncryption;
+    }
+
+    public Short getUserTypeId() {
+        return userTypeId;
+    }
+
+    public void setUserTypeId(Short userTypeId) {
+        this.userTypeId = userTypeId;
+    }
+
+    public String getNotificationSoundFilePath() {
+        return notificationSoundFilePath;
+    }
+
+    public void setNotificationSoundFilePath(String notificationSoundFilePath) {
+        this.notificationSoundFilePath = notificationSoundFilePath;
+    }
+
     public enum AuthenticationType {
 
         CLIENT(Short.valueOf("0")), APPLOZIC(Short.valueOf("1")), FACEBOOK(Short.valueOf("2"));
@@ -175,4 +212,18 @@ public Short getValue() {
             return value;
         }
     }
+
+    public enum Features {
+
+        IP_AUDIO_CALL("100"), IP_VIDEO_CALL("101");
+        private String value;
+
+        Features(String c) {
+            value = c;
+        }
+
+        public String getValue() {
+            return value;
+        }
+    }
 }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/UserBlockTask.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/UserBlockTask.java
index 92cd681f..2554621b 100644
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/UserBlockTask.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/UserBlockTask.java
@@ -8,15 +8,6 @@
 
 public class UserBlockTask extends AsyncTask<Void, Void, Boolean> {
 
-    public interface TaskListener {
-
-        void onSuccess(ApiResponse apiResponse);
-
-        void onFailure(ApiResponse apiResponse, Exception exception);
-
-        void onCompletion();
-    }
-
     private final TaskListener taskListener;
     private final Context context;
     private ApiResponse apiResponse;
@@ -35,12 +26,12 @@ public UserBlockTask(Context context, TaskListener listener, String userId, bool
     protected Boolean doInBackground(Void... params) {
         try {
             apiResponse = UserService.getInstance(context).processUserBlock(userId, block);
+            return apiResponse != null && apiResponse.isSuccess();
         } catch (Exception e) {
             e.printStackTrace();
             mException = e;
             return false;
         }
-        return true;
     }
 
     @Override
@@ -53,5 +44,14 @@ protected void onPostExecute(final Boolean result) {
         this.taskListener.onCompletion();
     }
 
+    public interface TaskListener {
+
+        void onSuccess(ApiResponse apiResponse);
+
+        void onFailure(ApiResponse apiResponse, Exception exception);
+
+        void onCompletion();
+    }
+
 
 }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/UserClientService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/UserClientService.java
index c1d12168..6be924aa 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/UserClientService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/UserClientService.java
@@ -14,6 +14,8 @@
 import com.applozic.mobicomkit.database.MobiComDatabaseHelper;
 import com.applozic.mobicomkit.feed.ApiResponse;
 import com.applozic.mobicomkit.feed.SyncBlockUserApiResponse;
+import com.applozic.mobicomkit.feed.UserDetailListFeed;
+import com.applozic.mobicommons.commons.core.utils.Utils;
 import com.applozic.mobicommons.json.GsonUtils;
 
 import org.json.JSONException;
@@ -21,8 +23,10 @@
 
 import java.io.UnsupportedEncodingException;
 import java.net.URLEncoder;
+import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.Iterator;
+import java.util.List;
 import java.util.Map;
 import java.util.Set;
 
@@ -31,7 +35,6 @@
  */
 public class UserClientService extends MobiComKitClientService {
 
-    private static final String TAG = "UserClientService";
     public static final String SHARED_PREFERENCE_VERSION_UPDATE_KEY = "mck.version.update";
     public static final String PHONE_NUMBER_UPDATE_URL = "/rest/ws/registration/phone/number/update";
     public static final String NOTIFY_CONTACTS_ABOUT_JOINING_MT = "/rest/ws/registration/notify/contacts";
@@ -41,7 +44,7 @@
     public static final String SETTING_UPDATE_URL = "/rest/ws/setting/single/update";
     public static final String TIMEZONE_UPDATAE_URL = "/rest/ws/setting/updateTZ";
     public static final String USER_INFO_URL = "/rest/ws/user/info?";
-    public static final Short MOBICOMKIT_VERSION_CODE = 107;
+    public static final Short MOBICOMKIT_VERSION_CODE = 109;
     public static final String USER_DISPLAY_NAME_UPDATE = "/rest/ws/user/name?";
     public static final String BLOCK_USER_URL = "/rest/ws/user/block";
     public static final String BLOCK_USER_SYNC_URL = "/rest/ws/user/blocked/sync";
@@ -51,8 +54,12 @@
     public static final String REGISTERED_USER_LIST_URL = "/rest/ws/user/filter";
     public static final String USER_PROFILE_UPDATE_URL = "/rest/ws/user/update";
     public static final String USER_READ_URL = "/rest/ws/user/read";
-
-
+    public static final String USER_DETAILS_LIST_POST_URL = "/rest/ws/user/detail";
+    public static final String UPDATE_USER_PASSWORD = "/rest/ws/user/update/password";
+    public static final String USER_LOGOUT = "/rest/ws/device/logout";
+    public static final String APPLICATION_INFO_UPDATE_URL = "/apps/customer/application/info/update";
+    public static final int BATCH_SIZE = 60;
+    private static final String TAG = "UserClientService";
     private HttpRequestUtils httpRequestUtils;
 
     public UserClientService(Context context) {
@@ -111,6 +118,7 @@ public String getBlockUserSyncUrl() {
     public String getUnBlockUserSyncUrl() {
         return getBaseUrl() + UNBLOCK_USER_SYNC_URL;
     }
+
     public String getUserDetailsListUrl() {
         return getBaseUrl() + USER_DETAILS_URL;
     }
@@ -123,34 +131,83 @@ public String getRegisteredUserListUrl() {
         return getBaseUrl() + REGISTERED_USER_LIST_URL;
     }
 
+    public String getUserDetailsListPostUrl() {
+        return getBaseUrl() + USER_DETAILS_LIST_POST_URL;
+    }
+
     public String getUserReadUrl() {
         return getBaseUrl() + USER_READ_URL;
     }
 
-    public void logout() {
-        logout(false);
+    public String getUpdateUserPasswordUrl() {
+        return getBaseUrl() + UPDATE_USER_PASSWORD;
     }
 
-    public void logout(boolean fromLogin) {
+    public String getUserLogout() {
+        return getBaseUrl() + USER_LOGOUT;
+    }
+
+    public String getApplicationInfoUrl() {
+        return getBaseUrl() + APPLICATION_INFO_UPDATE_URL;
+    }
+
+    public ApiResponse logout() {
+        return logout(false);
+    }
+
+    public void clearDataAndPreference() {
         MobiComUserPreference mobiComUserPreference = MobiComUserPreference.getInstance(context);
         final String deviceKeyString = mobiComUserPreference.getDeviceKeyString();
         final String userKeyString = mobiComUserPreference.getSuUserKeyString();
         String url = mobiComUserPreference.getUrl();
-
         NotificationManager notificationManager = (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);
         notificationManager.cancelAll();
         mobiComUserPreference.clearAll();
         MessageDatabaseService.recentlyAddedMessage.clear();
         MobiComDatabaseHelper.getInstance(context).delDatabase();
-
         mobiComUserPreference.setUrl(url);
+        Intent intent = new Intent(context, ApplozicMqttIntentService.class);
+        intent.putExtra(ApplozicMqttIntentService.USER_KEY_STRING, userKeyString);
+        intent.putExtra(ApplozicMqttIntentService.DEVICE_KEY_STRING, deviceKeyString);
+        context.startService(intent);
+    }
+
+    public ApiResponse logout(boolean fromLogin) {
+        Utils.printLog(context, TAG, "Al Logout call !!");
+        ApiResponse apiResponse = userLogoutResponse();
+        if (apiResponse != null && apiResponse.isSuccess()) {
+            MobiComUserPreference mobiComUserPreference = MobiComUserPreference.getInstance(context);
+            final String deviceKeyString = mobiComUserPreference.getDeviceKeyString();
+            final String userKeyString = mobiComUserPreference.getSuUserKeyString();
+            String url = mobiComUserPreference.getUrl();
+            NotificationManager notificationManager = (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);
+            notificationManager.cancelAll();
+            mobiComUserPreference.clearAll();
+            MessageDatabaseService.recentlyAddedMessage.clear();
+            MobiComDatabaseHelper.getInstance(context).delDatabase();
+            mobiComUserPreference.setUrl(url);
+            if (!fromLogin) {
+                Intent intent = new Intent(context, ApplozicMqttIntentService.class);
+                intent.putExtra(ApplozicMqttIntentService.USER_KEY_STRING, userKeyString);
+                intent.putExtra(ApplozicMqttIntentService.DEVICE_KEY_STRING, deviceKeyString);
+                context.startService(intent);
+            }
+        }
+        return apiResponse;
+    }
 
-        if (!fromLogin) {
-            Intent intent = new Intent(context, ApplozicMqttIntentService.class);
-            intent.putExtra(ApplozicMqttIntentService.USER_KEY_STRING, userKeyString);
-            intent.putExtra(ApplozicMqttIntentService.DEVICE_KEY_STRING, deviceKeyString);
-            context.startService(intent);
+    public ApiResponse userLogoutResponse() {
+        String response = "";
+        ApiResponse apiResponse = null;
+        try {
+            response = httpRequestUtils.postData(getUserLogout(), "application/json", "application/json", null);
+            if (!TextUtils.isEmpty(response)) {
+                apiResponse = (ApiResponse) GsonUtils.getObjectFromJson(response, ApiResponse.class);
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
         }
+        return apiResponse;
     }
 
     public boolean sendVerificationCodeToServer(String verificationCode) {
@@ -159,7 +216,7 @@ public boolean sendVerificationCodeToServer(String verificationCode) {
             JSONObject json = new JSONObject(response);
             return json.has("code") && json.get("code").equals("200");
         } catch (Exception e) {
-            Log.e("Verification Code", "Got Exception while submitting verification code to server: " + e);
+            Utils.printLog(context, "Verification Code", "Got Exception while submitting verification code to server: " + e);
         }
         return false;
     }
@@ -167,7 +224,7 @@ public boolean sendVerificationCodeToServer(String verificationCode) {
     public void updateCodeVersion(final String deviceKeyString) {
         String url = getAppVersionUpdateUrl() + "?appVersionCode=" + MOBICOMKIT_VERSION_CODE + "&deviceKey=" + deviceKeyString;
         String response = httpRequestUtils.getResponse(url, "text/plain", "text/plain");
-        Log.i(TAG, "Version update response: " + response);
+        Utils.printLog(context, TAG, "Version update response: " + response);
 
     }
 
@@ -177,7 +234,7 @@ public String updatePhoneNumber(String contactNumber) throws UnsupportedEncoding
 
     public void notifyFriendsAboutJoiningThePlatform() {
         String response = httpRequestUtils.getResponse(getNotifyContactsAboutJoiningMt(), "text/plain", "text/plain");
-        Log.i(TAG, "Response for notify contact about joining MT: " + response);
+        Utils.printLog(context, TAG, "Response for notify contact about joining MT: " + response);
     }
 
     public String sendPhoneNumberForVerification(String contactNumber, String countryCode, boolean viaSms) {
@@ -188,7 +245,7 @@ public String sendPhoneNumberForVerification(String contactNumber, String countr
             }
             return httpRequestUtils.getResponse(getVerificationContactNumberUrl() + "?countryCode=" + countryCode + "&contactNumber=" + URLEncoder.encode(contactNumber, "UTF-8") + viaSmsParam, "application/json", "application/json");
         } catch (Exception e) {
-            Log.e("Verification Code", "Got Exception while submitting contact number for verification to server: " + e);
+            Utils.printLog(context, "Verification Code", "Got Exception while submitting contact number for verification to server: " + e);
         }
         return null;
     }
@@ -223,7 +280,7 @@ public void run() {
         }
 
         String response = httpRequestUtils.getResponse(getUserInfoUrl() + userIdParam, "application/json", "application/json");
-        Log.i(TAG, "Response: " + response);
+        Utils.printLog(context, TAG, "Response: " + response);
 
         JSONObject jsonObject = new JSONObject(response);
 
@@ -249,8 +306,8 @@ public void run() {
                         String response = httpRequestUtils.getResponse(getUpdateUserDisplayNameUrl() + parameters, "application/json", "application/json");
 
                         ApiResponse apiResponse = (ApiResponse) GsonUtils.getObjectFromJson(response, ApiResponse.class);
-                        if(apiResponse != null){
-                            Log.i(TAG, " Update display name Response :" + apiResponse.getStatus());
+                        if (apiResponse != null) {
+                            Utils.printLog(context, TAG, " Update display name Response :" + apiResponse.getStatus());
                         }
                     }
                 } catch (Exception e) {
@@ -283,7 +340,7 @@ public ApiResponse userUnBlock(String userId) {
         try {
             if (!TextUtils.isEmpty(userId)) {
                 response = httpRequestUtils.getResponse(getUnBlockUserSyncUrl() + "?userId=" + URLEncoder.encode(userId, "UTF-8"), "application/json", "application/json");
-                apiResponse = (ApiResponse) GsonUtils.getObjectFromJson(response,ApiResponse.class);
+                apiResponse = (ApiResponse) GsonUtils.getObjectFromJson(response, ApiResponse.class);
             }
         } catch (Exception e) {
             e.printStackTrace();
@@ -291,7 +348,7 @@ public ApiResponse userUnBlock(String userId) {
         return apiResponse;
     }
 
-    public SyncBlockUserApiResponse getSyncUserBlockList(String lastSyncTime){
+    public SyncBlockUserApiResponse getSyncUserBlockList(String lastSyncTime) {
         try {
             String url = getBlockUserSyncUrl() + "?lastSyncTime=" + lastSyncTime;
             String response = httpRequestUtils.getResponse(url, "application/json", "application/json");
@@ -315,7 +372,7 @@ public String getUserDetails(Set<String> userIds) {
                     userIdParam += "&userIds" + "=" + URLEncoder.encode(userId, "UTF-8");
                 }
                 response = httpRequestUtils.getResponse(getUserDetailsListUrl() + userIdParam, "application/json", "application/json");
-                Log.i(TAG, "User details response is :" + response);
+                Utils.printLog(context, TAG, "User details response is :" + response);
                 if (TextUtils.isEmpty(response) || response.contains("<html>")) {
                     return null;
                 }
@@ -328,6 +385,54 @@ public String getUserDetails(Set<String> userIds) {
         return null;
     }
 
+
+    public String postUserDetailsByUserIds(Set<String> userIds) {
+        try {
+            if (userIds != null && userIds.size() > 0) {
+                List<String> userDetailsList = new ArrayList<>();
+                String response = "";
+                int count = 0;
+                for (String userId : userIds) {
+                    count++;
+                    userDetailsList.add(userId);
+                    if (count % BATCH_SIZE == 0) {
+                        UserDetailListFeed userDetailListFeed = new UserDetailListFeed();
+                        userDetailListFeed.setContactSync(true);
+                        userDetailListFeed.setUserIdList(userDetailsList);
+                        String jsonFromObject = GsonUtils.getJsonFromObject(userDetailListFeed, userDetailListFeed.getClass());
+                        Utils.printLog(context, TAG, "Sending json:" + jsonFromObject);
+                        response = httpRequestUtils.postData(getUserDetailsListPostUrl() + "?contactSync=true", "application/json", "application/json", jsonFromObject);
+                        userDetailsList = new ArrayList<String>();
+                        if (!TextUtils.isEmpty(response)) {
+                            UserService.getInstance(context).processUserDetailsResponse(response);
+                        }
+                    }
+                }
+                if (!userDetailsList.isEmpty() && userDetailsList.size() > 0) {
+                    UserDetailListFeed userDetailListFeed = new UserDetailListFeed();
+                    userDetailListFeed.setContactSync(true);
+                    userDetailListFeed.setUserIdList(userDetailsList);
+                    String jsonFromObject = GsonUtils.getJsonFromObject(userDetailListFeed, userDetailListFeed.getClass());
+                    response = httpRequestUtils.postData(getUserDetailsListPostUrl() + "?contactSync=true", "application/json", "application/json", jsonFromObject);
+
+                    Utils.printLog(context, TAG, "User details response is :" + response);
+                    if (TextUtils.isEmpty(response) || response.contains("<html>")) {
+                        return null;
+                    }
+
+                    if (!TextUtils.isEmpty(response)) {
+                        UserService.getInstance(context).processUserDetailsResponse(response);
+                    }
+                }
+                return response;
+            }
+
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        return null;
+    }
+
     public Map<String, String> getOnlineUserList(int numberOfUser) {
         Map<String, String> info = new HashMap<String, String>();
         try {
@@ -363,26 +468,27 @@ public String getRegisteredUsers(Long startTime, int pageSize) {
         return response;
     }
 
-    public ApiResponse updateDisplayNameORImageLink(String displayName, String profileImageLink,String status)  {
-
+    public ApiResponse updateDisplayNameORImageLink(String displayName, String profileImageLink, String status, String contactNumber) {
         JSONObject jsonFromObject = new JSONObject();
         try {
-            User user = new User();
-            if(!TextUtils.isEmpty(displayName) ){
-                jsonFromObject.put("displayName",displayName);
+            if (!TextUtils.isEmpty(displayName)) {
+                jsonFromObject.put("displayName", displayName);
+            }
+            if (!TextUtils.isEmpty(profileImageLink)) {
+                jsonFromObject.put("imageLink", profileImageLink);
             }
-            if(!TextUtils.isEmpty(profileImageLink) ){
-                jsonFromObject.put("imageLink",profileImageLink);
+            if (!TextUtils.isEmpty(status)) {
+                jsonFromObject.put("statusMessage", status);
             }
-            if(!TextUtils.isEmpty(status) ){
-                jsonFromObject.put("statusMessage",status);
+            if (!TextUtils.isEmpty(contactNumber)) {
+                jsonFromObject.put("phoneNumber", contactNumber);
             }
-            String response = httpRequestUtils.postData(getUserProfileUpdateUrl() , "application/json", "application/json",jsonFromObject.toString());
-            Log.i(TAG,response);
-            return ((ApiResponse) GsonUtils.getObjectFromJson(response,ApiResponse.class));
+            String response = httpRequestUtils.postData(getUserProfileUpdateUrl(), "application/json", "application/json", jsonFromObject.toString());
+            Utils.printLog(context, TAG, response);
+            return ((ApiResponse) GsonUtils.getObjectFromJson(response, ApiResponse.class));
         } catch (JSONException e) {
             e.printStackTrace();
-        }catch (Exception e){
+        } catch (Exception e) {
             e.printStackTrace();
         }
         return null;
@@ -392,15 +498,47 @@ public ApiResponse getUserReadServerCall() {
         String response = null;
         ApiResponse apiResponse = null;
         try {
-            response = httpRequestUtils.getResponse(getUserReadUrl() , null, null);
-            if(response != null){
-                apiResponse = (ApiResponse)GsonUtils.getObjectFromJson(response,ApiResponse.class);
+            response = httpRequestUtils.getResponse(getUserReadUrl(), null, null);
+            if (response != null) {
+                apiResponse = (ApiResponse) GsonUtils.getObjectFromJson(response, ApiResponse.class);
             }
-            Log.i(TAG,"User read response: "+response);
+            Utils.printLog(context, TAG, "User read response: " + response);
         } catch (Exception e) {
             e.printStackTrace();
         }
         return apiResponse;
     }
 
+    public String updateUserPassword(String oldPassword, String newPassword) {
+        if (TextUtils.isEmpty(oldPassword) || TextUtils.isEmpty(newPassword)) {
+            return null;
+        }
+        String response = "";
+        ApiResponse apiResponse = null;
+        try {
+            response = httpRequestUtils.getResponse(getUpdateUserPasswordUrl() + "?oldPassword=" + oldPassword + "&newPassword=" + newPassword, "application/json", "application/json");
+            if (TextUtils.isEmpty(response)) {
+                return null;
+            }
+            apiResponse = (ApiResponse) GsonUtils.getObjectFromJson(response, ApiResponse.class);
+            if (apiResponse != null && apiResponse.isSuccess()) {
+                return apiResponse.getStatus();
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        return null;
+    }
+
+    public String packageDetail(CustomerPackageDetail customerPackageDetail) {
+        String response;
+        String jsonFromObject = GsonUtils.getJsonFromObject(customerPackageDetail, CustomerPackageDetail.class);
+        try {
+            response = httpRequestUtils.postData(getApplicationInfoUrl(), "application/json", "application/json", jsonFromObject);
+            return response;
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        return null;
+    }
 }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/UserDetail.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/UserDetail.java
index 887b3e23..102b2f98 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/UserDetail.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/UserDetail.java
@@ -15,6 +15,8 @@
     private Integer unreadCount;
     private String phoneNumber;
     private String statusMessage;
+    private Short userTypeId;
+    private Long deletedAtTime;
 
 
     public String getUserId() {
@@ -81,6 +83,23 @@ public void setStatusMessage(String statusMessage) {
         this.statusMessage = statusMessage;
     }
 
+    public Short getUserTypeId() {
+        return userTypeId;
+    }
+
+    public void setUserTypeId(Short userTypeId) {
+        this.userTypeId = userTypeId;
+    }
+
+    public Long getDeletedAtTime() {
+        return deletedAtTime;
+    }
+
+    public void setDeletedAtTime(Long deletedAtTime) {
+        this.deletedAtTime = deletedAtTime;
+    }
+
+
     @Override
     public String toString() {
         return "UserDetail{" +
@@ -92,6 +111,8 @@ public String toString() {
                 ", unreadCount=" + unreadCount +
                 ", phoneNumber='" + phoneNumber + '\'' +
                 ", statusMessage='" + statusMessage + '\'' +
+                ", userTypeId=" + userTypeId +
+                ", deletedAtTime=" + deletedAtTime +
                 '}';
     }
 }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/UserLoginTask.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/UserLoginTask.java
index 898873ad..06fcb475 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/UserLoginTask.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/UserLoginTask.java
@@ -16,43 +16,30 @@
  */
 public class UserLoginTask extends AsyncTask<Void, Void, Boolean> {
 
-    public interface TaskListener {
-        void onSuccess(RegistrationResponse registrationResponse, Context context);
-
-        void onFailure(RegistrationResponse registrationResponse, Exception exception);
-
-    }
-    private  User user;
     private final TaskListener taskListener;
-    private final String mUserId;
-    private final String mEmail;
-    private final String mPassword;
-    private final String mPhoneNumber;
-    private final String mDisplayName;
-    private  String mImageLink;
     private final Context context;
+    private User user;
     private Exception mException;
     private RegistrationResponse registrationResponse;
-
+    private UserClientService userClientService;
+    private RegisterUserClientService registerUserClientService;
+    private UserService userService;
 
     public UserLoginTask(User user, TaskListener listener, Context context) {
-        mUserId = user.getUserId();
-        mEmail = user.getEmail();
-        mPassword = user.getPassword();
-        mPhoneNumber = user.getContactNumber();
-        mDisplayName = user.getDisplayName();
-        mImageLink = user.getImageLink();
         this.taskListener = listener;
         this.context = context;
-        this.user=user;
+        this.user = user;
+        this.userClientService = new UserClientService(context);
+        this.registerUserClientService = new RegisterUserClientService(context);
+        this.userService = UserService.getInstance(context);
     }
 
     @Override
     protected Boolean doInBackground(Void... params) {
         try {
-            new UserClientService(context).logout();
-            //registrationResponse = new RegisterUserClientService(context).createAccount(mEmail, mUserId, mPhoneNumber,mDisplayName,mImageLink, "");
-            registrationResponse  = new RegisterUserClientService(context).createAccount(user);
+            userClientService.clearDataAndPreference();
+            registrationResponse = registerUserClientService.createAccount(user);
+            userService.processPackageDetail();
         } catch (Exception e) {
             e.printStackTrace();
             mException = e;
@@ -65,12 +52,19 @@ protected Boolean doInBackground(Void... params) {
     protected void onPostExecute(final Boolean result) {
         // And if it is we call the callback function on it.
         if (result && this.taskListener != null) {
-            this.taskListener.onSuccess(registrationResponse,context);
+            this.taskListener.onSuccess(registrationResponse, context);
 
         } else if (mException != null && this.taskListener != null) {
             this.taskListener.onFailure(registrationResponse, mException);
         }
     }
 
+    public interface TaskListener {
+        void onSuccess(RegistrationResponse registrationResponse, Context context);
+
+        void onFailure(RegistrationResponse registrationResponse, Exception exception);
+
+    }
+
 
 }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/UserLogoutTask.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/UserLogoutTask.java
index ed5f733f..4cbe8ded 100644
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/UserLogoutTask.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/UserLogoutTask.java
@@ -3,37 +3,32 @@
 import android.content.Context;
 import android.os.AsyncTask;
 
+import com.applozic.mobicomkit.feed.ApiResponse;
 
-public class UserLogoutTask extends AsyncTask<Void,Void,Boolean> {
-
-    public interface TaskListener{
-        void onSuccess(Context context);
-        void onFailure(Exception exception);
-    }
+public class UserLogoutTask extends AsyncTask<Void, Void, Boolean> {
 
     private final TaskListener taskListener;
     private final Context context;
+    UserClientService userClientService;
     private Exception mException;
 
-
-
     public UserLogoutTask(TaskListener listener, Context context) {
-
         this.taskListener = listener;
         this.context = context;
-
+        userClientService = new UserClientService(context);
     }
 
     @Override
     protected Boolean doInBackground(Void... params) {
+        ApiResponse apiResponse = null;
         try {
-            new UserClientService(context).logout();
+            apiResponse = userClientService.logout();
+            return apiResponse != null && apiResponse.isSuccess();
         } catch (Exception e) {
             e.printStackTrace();
             mException = e;
             return false;
         }
-        return true;
     }
 
     @Override
@@ -46,4 +41,10 @@ protected void onPostExecute(final Boolean result) {
             this.taskListener.onFailure(mException);
         }
     }
+
+    public interface TaskListener {
+        void onSuccess(Context context);
+
+        void onFailure(Exception exception);
+    }
 }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/UserService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/UserService.java
index 892f2634..add71c86 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/UserService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/UserService.java
@@ -2,8 +2,8 @@
 
 import android.content.Context;
 import android.text.TextUtils;
-import android.util.Log;
 
+import com.applozic.mobicomkit.api.MobiComKitClientService;
 import com.applozic.mobicomkit.api.MobiComKitConstants;
 import com.applozic.mobicomkit.contact.AppContactService;
 import com.applozic.mobicomkit.contact.BaseContactService;
@@ -12,8 +12,10 @@
 import com.applozic.mobicomkit.feed.SyncBlockUserApiResponse;
 import com.applozic.mobicomkit.sync.SyncUserBlockFeed;
 import com.applozic.mobicomkit.sync.SyncUserBlockListFeed;
+import com.applozic.mobicommons.commons.core.utils.Utils;
 import com.applozic.mobicommons.json.GsonUtils;
 import com.applozic.mobicommons.people.contact.Contact;
+import com.google.gson.reflect.TypeToken;
 
 import java.util.HashSet;
 import java.util.List;
@@ -25,11 +27,11 @@
  */
 public class UserService {
 
+    private static UserService userService;
     Context context;
     UserClientService userClientService;
-    private static UserService userService;
-    private MobiComUserPreference userPreference;
     BaseContactService baseContactService;
+    private MobiComUserPreference userPreference;
 
     private UserService(Context context) {
         this.context = context;
@@ -41,64 +43,58 @@ private UserService(Context context) {
 
     public static UserService getInstance(Context context) {
         if (userService == null) {
-            userService = new UserService(context);
+            userService = new UserService(context.getApplicationContext());
         }
         return userService;
     }
 
     public synchronized void processSyncUserBlock() {
-        Thread thread = new Thread(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    SyncBlockUserApiResponse apiResponse = userClientService.getSyncUserBlockList(userPreference.getUserBlockSyncTime());
-                    if (apiResponse != null && SyncBlockUserApiResponse.SUCCESS.equals(apiResponse.getStatus())) {
-                        SyncUserBlockListFeed syncUserBlockListFeed = apiResponse.getResponse();
-                        if (syncUserBlockListFeed != null) {
-                            List<SyncUserBlockFeed> blockedToUserList = syncUserBlockListFeed.getBlockedToUserList();
-                            List<SyncUserBlockFeed> blockedByUserList = syncUserBlockListFeed.getBlockedByUserList();
-                            if (blockedToUserList != null && blockedToUserList.size() > 0) {
-                                for (SyncUserBlockFeed syncUserBlockedFeed : blockedToUserList) {
-                                    Contact contact = new Contact();
-                                    if (syncUserBlockedFeed.getUserBlocked() != null && !TextUtils.isEmpty(syncUserBlockedFeed.getBlockedTo())) {
-                                        if(baseContactService.isContactExists(syncUserBlockedFeed.getBlockedTo())){
-                                            baseContactService.updateUserBlocked(syncUserBlockedFeed.getBlockedTo(),syncUserBlockedFeed.getUserBlocked());
-                                        }else {
-                                            contact.setBlocked(syncUserBlockedFeed.getUserBlocked());
-                                            contact.setUserId(syncUserBlockedFeed.getBlockedTo());
-                                            baseContactService.upsert(contact);
-                                            baseContactService.updateUserBlocked(syncUserBlockedFeed.getBlockedTo(),syncUserBlockedFeed.getUserBlocked());
-                                        }
-                                    }
+        try {
+            SyncBlockUserApiResponse apiResponse = userClientService.getSyncUserBlockList(userPreference.getUserBlockSyncTime());
+            if (apiResponse != null && SyncBlockUserApiResponse.SUCCESS.equals(apiResponse.getStatus())) {
+                SyncUserBlockListFeed syncUserBlockListFeed = apiResponse.getResponse();
+                if (syncUserBlockListFeed != null) {
+                    List<SyncUserBlockFeed> blockedToUserList = syncUserBlockListFeed.getBlockedToUserList();
+                    List<SyncUserBlockFeed> blockedByUserList = syncUserBlockListFeed.getBlockedByUserList();
+                    if (blockedToUserList != null && blockedToUserList.size() > 0) {
+                        for (SyncUserBlockFeed syncUserBlockedFeed : blockedToUserList) {
+                            Contact contact = new Contact();
+                            if (syncUserBlockedFeed.getUserBlocked() != null && !TextUtils.isEmpty(syncUserBlockedFeed.getBlockedTo())) {
+                                if (baseContactService.isContactExists(syncUserBlockedFeed.getBlockedTo())) {
+                                    baseContactService.updateUserBlocked(syncUserBlockedFeed.getBlockedTo(), syncUserBlockedFeed.getUserBlocked());
+                                } else {
+                                    contact.setBlocked(syncUserBlockedFeed.getUserBlocked());
+                                    contact.setUserId(syncUserBlockedFeed.getBlockedTo());
+                                    baseContactService.upsert(contact);
+                                    baseContactService.updateUserBlocked(syncUserBlockedFeed.getBlockedTo(), syncUserBlockedFeed.getUserBlocked());
                                 }
                             }
-                            if (blockedByUserList != null && blockedByUserList.size() > 0) {
-                                for (SyncUserBlockFeed syncUserBlockByFeed : blockedByUserList) {
-                                    Contact contact = new Contact();
-                                    if (syncUserBlockByFeed.getUserBlocked() != null && !TextUtils.isEmpty(syncUserBlockByFeed.getBlockedBy())) {
-                                        if(baseContactService.isContactExists(syncUserBlockByFeed.getBlockedBy())){
-                                            baseContactService.updateUserBlockedBy(syncUserBlockByFeed.getBlockedBy(),syncUserBlockByFeed.getUserBlocked());
-                                        }else {
-                                            contact.setBlockedBy(syncUserBlockByFeed.getUserBlocked());
-                                            contact.setUserId(syncUserBlockByFeed.getBlockedBy());
-                                            baseContactService.upsert(contact);
-                                            baseContactService.updateUserBlockedBy(syncUserBlockByFeed.getBlockedBy(),syncUserBlockByFeed.getUserBlocked());
-                                        }
-                                    }
+                        }
+                    }
+                    if (blockedByUserList != null && blockedByUserList.size() > 0) {
+                        for (SyncUserBlockFeed syncUserBlockByFeed : blockedByUserList) {
+                            Contact contact = new Contact();
+                            if (syncUserBlockByFeed.getUserBlocked() != null && !TextUtils.isEmpty(syncUserBlockByFeed.getBlockedBy())) {
+                                if (baseContactService.isContactExists(syncUserBlockByFeed.getBlockedBy())) {
+                                    baseContactService.updateUserBlockedBy(syncUserBlockByFeed.getBlockedBy(), syncUserBlockByFeed.getUserBlocked());
+                                } else {
+                                    contact.setBlockedBy(syncUserBlockByFeed.getUserBlocked());
+                                    contact.setUserId(syncUserBlockByFeed.getBlockedBy());
+                                    baseContactService.upsert(contact);
+                                    baseContactService.updateUserBlockedBy(syncUserBlockByFeed.getBlockedBy(), syncUserBlockByFeed.getUserBlocked());
                                 }
                             }
                         }
-                        userPreference.setUserBlockSyncTime(apiResponse.getGeneratedAt());
                     }
-                } catch (Exception e) {
-                    e.printStackTrace();
                 }
+                userPreference.setUserBlockSyncTime(apiResponse.getGeneratedAt());
             }
-        });
-        thread.setPriority(android.os.Process.THREAD_PRIORITY_BACKGROUND);
-        thread.start();
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
     }
 
+
     public ApiResponse processUserBlock(String userId, boolean block) {
         ApiResponse apiResponse = userClientService.userBlock(userId, block);
         if (apiResponse != null && apiResponse.isSuccess()) {
@@ -141,6 +137,7 @@ public synchronized void processUser(UserDetail userDetail) {
         contact.setStatus(userDetail.getStatusMessage());
         contact.setFullName(userDetail.getDisplayName());
         contact.setLastSeenAt(userDetail.getLastSeenAtTime());
+        contact.setUserTypeId(userDetail.getUserTypeId());
         contact.setUnreadCount(0);
         if (!TextUtils.isEmpty(userDetail.getImageLink())) {
             contact.setImageURL(userDetail.getImageLink());
@@ -187,29 +184,76 @@ public synchronized RegisteredUsersApiResponse getRegisteredUsersList(Long start
         return null;
     }
 
-    public void updateDisplayNameORImageLink( String displayName, String profileImageLink, String localURL, String status ){
+    public String updateDisplayNameORImageLink(String displayName, String profileImageLink, String localURL, String status) {
+        return updateDisplayNameORImageLink(displayName, profileImageLink, status, null);
+    }
+
+    public String updateDisplayNameORImageLink(String displayName, String profileImageLink, String localURL, String status, String contactNumber) {
+
+        ApiResponse response = userClientService.updateDisplayNameORImageLink(displayName, profileImageLink, status, contactNumber);
 
-        ApiResponse response = userClientService.updateDisplayNameORImageLink(displayName,profileImageLink,status);
-        if(response != null && response.isSuccess()){
-            Contact contact=   baseContactService.getContactById(MobiComUserPreference.getInstance(context).getUserId());
-            if(!TextUtils.isEmpty(displayName)){
+        if (response == null) {
+            return null;
+        }
+        if (response != null && response.isSuccess()) {
+            Contact contact = baseContactService.getContactById(MobiComUserPreference.getInstance(context).getUserId());
+            if (!TextUtils.isEmpty(displayName)) {
                 contact.setFullName(displayName);
             }
-            if(!TextUtils.isEmpty(profileImageLink)){
+            if (!TextUtils.isEmpty(profileImageLink)) {
                 contact.setImageURL(profileImageLink);
             }
             contact.setLocalImageUrl(localURL);
-            if(!TextUtils.isEmpty(status)){
+            if (!TextUtils.isEmpty(status)) {
                 contact.setStatus(status);
             }
+            if (!TextUtils.isEmpty(contactNumber)) {
+                contact.setContactNumber(contactNumber);
+            }
             baseContactService.upsert(contact);
-            Contact contact1=   baseContactService.getContactById(MobiComUserPreference.getInstance(context).getUserId());
-            Log.i("UserService", contact1.getImageURL() + ", " +contact1.getDisplayName() + "," + contact1.getStatus() );
+            Contact contact1 = baseContactService.getContactById(MobiComUserPreference.getInstance(context).getUserId());
+            Utils.printLog(context, "UserService", contact1.getImageURL() + ", " + contact1.getDisplayName() + "," + contact1.getStatus() + "," + contact1.getStatus());
         }
+        return response.getStatus();
     }
 
-    public ApiResponse processUserReadConversation(){
-        return  userClientService.getUserReadServerCall();
+
+    public void processUserDetailsResponse(String response) {
+        if (!TextUtils.isEmpty(response)) {
+            List<UserDetail> userDetails = (List<UserDetail>) GsonUtils.getObjectFromJson(response, new TypeToken<List<UserDetail>>() {
+            }.getType());
+            for (UserDetail userDetail : userDetails) {
+                processUser(userDetail);
+            }
+        }
+    }
+
+    public void processUserDetailsByUserIds(Set<String> userIds) {
+        userClientService.postUserDetailsByUserIds(userIds);
     }
 
+    public ApiResponse processUserReadConversation() {
+        return userClientService.getUserReadServerCall();
+    }
+
+    public String processUpdateUserPassword(String oldPassword, String newPassword) {
+        String response = userClientService.updateUserPassword(oldPassword, newPassword);
+        if (!TextUtils.isEmpty(response) && MobiComKitConstants.SUCCESS.equals(response)) {
+            userPreference.setPassword(newPassword);
+        }
+        return response;
+    }
+
+
+    public void processPackageDetail() {
+        CustomerPackageDetail customerPackageDetail = new CustomerPackageDetail();
+        customerPackageDetail.setApplicationKey((MobiComKitClientService.getApplicationKey(context)));
+        customerPackageDetail.setPackageName(context.getPackageName());
+        String response = userClientService.packageDetail(customerPackageDetail);
+        if (!TextUtils.isEmpty(response) && response.equals(MobiComKitConstants.APPLICATION_INFO_RESPONSE)) {
+            userPreference.setApplicationInfoCallDone(true);
+        } else {
+            userPreference.setApplicationInfoCallDone(false);
+        }
+    }
 }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/ApplozicMultipartUtility.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/ApplozicMultipartUtility.java
index 0df3ffcf..26009e0d 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/ApplozicMultipartUtility.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/ApplozicMultipartUtility.java
@@ -17,8 +17,9 @@
 import java.net.URLConnection;
 
 public class ApplozicMultipartUtility {
-    private final String boundary;
     private static final String LINE_FEED = "\r\n";
+    final String TAG = "AlMultipartUtility";
+    private final String boundary;
     private HttpURLConnection httpConn;
     private OutputStream outputStream;
     private PrintWriter writer;
@@ -44,7 +45,7 @@ public ApplozicMultipartUtility(String requestURL, String charset, Context conte
 
 
     public void addFilePart(String fieldName, File uploadFile)
-            throws IOException {
+            throws IOException, InterruptedException {
         String fileName = uploadFile.getName();
         writer.append("--" + boundary).append(LINE_FEED);
         writer.append(
@@ -63,6 +64,9 @@ public void addFilePart(String fieldName, File uploadFile)
         byte[] buffer = new byte[4096];
         int bytesRead = -1;
         while ((bytesRead = inputStream.read(buffer)) != -1) {
+            if (Thread.interrupted()) {
+                throw new InterruptedException();
+            }
             outputStream.write(buffer, 0, bytesRead);
         }
         outputStream.flush();
@@ -80,9 +84,9 @@ public String getResponse() throws IOException {
         writer.close();
         BufferedReader reader = null;
         int status = httpConn.getResponseCode();
-        try{
+        try {
             if (status == HttpURLConnection.HTTP_OK) {
-                reader  = new BufferedReader(new InputStreamReader(httpConn.getInputStream(), "UTF-8"));
+                reader = new BufferedReader(new InputStreamReader(httpConn.getInputStream(), "UTF-8"));
                 String line = null;
                 while ((line = reader.readLine()) != null) {
                     sb.append(line);
@@ -91,10 +95,10 @@ public String getResponse() throws IOException {
                 throw new IOException("Server exception with status code: " + status);
             }
 
-        }catch (Exception e){
+        } catch (Exception e) {
             e.printStackTrace();
-        }finally {
-            if(reader != null){
+        } finally {
+            if (reader != null) {
                 reader.close();
                 httpConn.disconnect();
             }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/AttachmentDownloader.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/AttachmentDownloader.java
index 17041b01..c276cb9f 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/AttachmentDownloader.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/AttachmentDownloader.java
@@ -24,6 +24,7 @@
 import com.applozic.mobicomkit.api.MobiComKitClientService;
 import com.applozic.mobicomkit.api.conversation.Message;
 import com.applozic.mobicomkit.api.conversation.database.MessageDatabaseService;
+import com.applozic.mobicommons.commons.core.utils.Utils;
 import com.applozic.mobicommons.file.FileUtils;
 
 import java.io.File;
@@ -125,7 +126,7 @@ public void run() {
         } finally {
 
             // If the byteBuffer is null, reports that the download failed.
-            if (mPhotoTask.getMessage() != null && !mPhotoTask.getMessage().isAttachmentDownloaded()) {
+            if (mPhotoTask.getMessage() != null && !mPhotoTask.getMessage().isAttachmentDownloaded() && mPhotoTask.getMessage().isSentToServer()) {
                 mPhotoTask.handleDownloadState(HTTP_STATE_FAILED);
             } else {
                 mPhotoTask.handleDownloadState(HTTP_STATE_COMPLETED);
@@ -154,21 +155,21 @@ public void loadAttachmentImage(Message message, Context context) {
             String contentType = fileMeta.getContentType();
             String fileKey = fileMeta.getKeyString();
             HttpURLConnection connection = null;
-            String fileName=null;
-            if( message.getContentType()== Message.ContentType.AUDIO_MSG.getValue() ) {
+            String fileName = null;
+            if (message.getContentType() == Message.ContentType.AUDIO_MSG.getValue()) {
                 fileName = fileMeta.getName();
-            }else{
-                fileName = fileMeta.getBlobKeyString() + "." + FileUtils.getFileFormat(fileMeta.getName());
+            } else {
+                fileName = FileUtils.getName(fileMeta.getName()) + message.getCreatedAtTime() + "." + FileUtils.getFileFormat(fileMeta.getName());
             }
 
-            file = FileClientService.getFilePath(fileName, context, contentType);
+            file = FileClientService.getFilePath(fileName, context.getApplicationContext(), contentType);
             if (!file.exists()) {
                 connection = new MobiComKitClientService(context).openHttpConnection(new MobiComKitClientService(context).getFileUrl() + fileMeta.getBlobKeyString());
                 if (connection.getResponseCode() == HttpURLConnection.HTTP_OK) {
                     inputStream = connection.getInputStream();
                 } else {
                     //TODO: Error Handling...
-                    Log.i(TAG, "Got Error response while uploading file : " + connection.getResponseCode());
+                    Utils.printLog(context,TAG, "Got Error response while uploading file : " + connection.getResponseCode());
                     return;
                 }
 
@@ -214,15 +215,15 @@ public void onScanCompleted(String path, Uri uri) {
 
         } catch (FileNotFoundException ex) {
             ex.printStackTrace();
-            Log.e(TAG, "File not found on server");
+            Utils.printLog(context,TAG, "File not found on server");
         } catch (Exception ex) {
             //If partial file got created delete it, we try to download it again
             if (file != null && file.exists()) {
-                Log.i(TAG, " Exception occured while downloading :" + file.getAbsolutePath());
+                Utils.printLog(context,TAG, " Exception occured while downloading :" + file.getAbsolutePath());
                 file.delete();
             }
             ex.printStackTrace();
-            Log.e(TAG, "Exception fetching file from server");
+            Utils.printLog(context,TAG, "Exception fetching file from server");
         }
     }
 
@@ -262,4 +263,3 @@ public void onScanCompleted(String path, Uri uri) {
         String getContentType();
     }
 }
-
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/AttachmentManager.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/AttachmentManager.java
index 3542a678..caf74ccc 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/AttachmentManager.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/AttachmentManager.java
@@ -17,11 +17,13 @@
 package com.applozic.mobicomkit.api.attachment;
 
 import android.annotation.SuppressLint;
+import android.content.Context;
 import android.graphics.Bitmap;
 import android.os.Handler;
 import android.os.Looper;
 import android.os.Message;
 import android.support.v4.util.LruCache;
+import android.text.TextUtils;
 import android.util.Log;
 import android.view.View;
 import android.widget.Toast;
@@ -73,11 +75,12 @@
     static final int TASK_COMPLETE = 4;
     private static final String TAG = "AttachmentManager";
     // Sets the size of the storage that's used to cache images
-    private static final int IMAGE_CACHE_SIZE = 1024 * 1024 * 4;
-
     // Sets the amount of time an idle thread will wait for a task before terminating
     private static final int KEEP_ALIVE_TIME = 1;
 
+    // Sets the size of the storage that's used to cache images
+    private static final int IMAGE_CACHE_SIZE = 1024 * 1024 * 4;
+
     // Sets the Time Unit to seconds
     private static final TimeUnit KEEP_ALIVE_TIME_UNIT;
 
@@ -96,8 +99,6 @@
     private static int NUMBER_OF_CORES = Runtime.getRuntime().availableProcessors();
     // A single instance of PhotoManager, used to implement the singleton pattern
     private static AttachmentManager sInstance = null;
-    public final List<String> attachmentInProgress;
-    public final List<AttachmentTask> attachmentTaskList;
 
     // A static block that sets class fields
     static {
@@ -109,11 +110,8 @@
         sInstance = new AttachmentManager();
     }
 
-    /*
-     * Creates a cache of byte arrays indexed by image URLs. As new items are added to the
-     * cache, the oldest items are ejected and subject to garbage collection.
-     */
-    private LruCache<String, Bitmap> mPhotoCache = null;
+    public final List<String> attachmentInProgress;
+    public final List<AttachmentTask> attachmentTaskList;
     // A queue of Runnables for the image download pool
     private final BlockingQueue<Runnable> mDownloadWorkQueue;
     // A queue of Runnables for the image decoding pool
@@ -122,10 +120,14 @@
     private final Queue<AttachmentTask> mPhotoTaskWorkQueue;
     // A managed pool of background download threads
     private final ThreadPoolExecutor mDownloadThreadPool;
-
     //taking reference for future use ::
     // A managed pool of background decoder threads
     private final ThreadPoolExecutor mDecodeThreadPool;
+    /*
+     * Creates a cache of byte arrays indexed by image URLs. As new items are added to the
+     * cache, the oldest items are ejected and subject to garbage collection.
+     */
+    private LruCache<String, Bitmap> mPhotoCache = null;
     // An object that manages Messages in a Thread
     private Handler mHandler;
 
@@ -231,15 +233,21 @@ public void handleMessage(Message inputMessage) {
 
                         case DOWNLOAD_STARTED:
                             localView.getMessage().setAttDownloadInProgress(true);
-                            localView.getProressBar().setVisibility(View.VISIBLE);
+                            if (localView.getProressBar() != null) {
+                                localView.getProressBar().setVisibility(View.VISIBLE);
+                            }
                             break;
                         case DOWNLOAD_COMPLETE:
-                            localView.getProressBar().setProgress(70);
+                            if (localView.getProressBar() != null) {
+                                localView.getProressBar().setProgress(70);
+                            }
                             localView.getMessage().setAttDownloadInProgress(false);
                             break;
                         case DECODE_STARTED:
-                            localView.getProressBar().setVisibility(View.VISIBLE);
-                            localView.getProressBar().setProgress(90);
+                            if (localView.getProressBar() != null) {
+                                localView.getProressBar().setVisibility(View.VISIBLE);
+                                localView.getProressBar().setProgress(90);
+                            }
                             break;
                             /*
                              * The decoding is done, so this sets the
@@ -274,6 +282,33 @@ public void handleMessage(Message inputMessage) {
                             // Otherwise, calls the super method
                             super.handleMessage(inputMessage);
                     }
+                } else if (attachmentTask.getAttachmentView() != null) {
+                    AttachmentViewProperties attachmentView = attachmentTask.getAttachmentView();
+                    switch (inputMessage.what) {
+
+                        case DOWNLOAD_STARTED:
+                            break;
+                        case DOWNLOAD_COMPLETE:
+                            break;
+                        case DECODE_STARTED:
+                            break;
+                        case TASK_COMPLETE:
+                            BroadcastService.sendMessageUpdateBroadcast(attachmentView.getContext(), BroadcastService.INTENT_ACTIONS.MESSAGE_ATTACHMENT_DOWNLOAD_DONE.toString(), attachmentView.getMessage());
+                            recycleTask(attachmentTask);
+                            break;
+                        // The download failed, sets the background color to dark red
+                        case DOWNLOAD_FAILED:
+                            //localView.setStatusResource(R.drawable.imagedownloadfailed);
+                            attachmentView.getMessage().setAttDownloadInProgress(false);
+                            BroadcastService.sendMessageUpdateBroadcast(attachmentView.getContext(), BroadcastService.INTENT_ACTIONS.MESSAGE_ATTACHMENT_DOWNLOAD_FAILD.toString(), attachmentView.getMessage());
+                            Toast.makeText(attachmentView.getContext(), "Download failed.", Toast.LENGTH_SHORT).show();
+                            // Attempts to re-use the Task object
+                            recycleTask(attachmentTask);
+                            break;
+                        default:
+                            // Otherwise, calls the super method
+                            super.handleMessage(inputMessage);
+                    }
                 }
             }
         };
@@ -338,7 +373,7 @@ public static void cancelAll() {
      *
      * @param downloaderTask The download task associated with the Thread
      */
-    static public void removeDownload(AttachmentTask downloaderTask) {
+    static public void removeDownload(AttachmentTask downloaderTask, boolean documentView) {
 
         // If the Thread object still exists and the download matches the specified URL
         if (downloaderTask != null) {
@@ -354,6 +389,12 @@ static public void removeDownload(AttachmentTask downloaderTask) {
                     thread.interrupt();
                 } else {
                     Log.i(TAG, "Thread is coming null");
+                    if (downloaderTask.getAttachmentView() == null && downloaderTask.getPhotoView() == null) {
+                        return;
+                    }
+                    Context context = documentView ? downloaderTask.getAttachmentView().getContext() : downloaderTask.getPhotoView().getContext();
+                    com.applozic.mobicomkit.api.conversation.Message message = documentView ? downloaderTask.getAttachmentView().getMessage() : downloaderTask.getPhotoView().getMessage();
+                    BroadcastService.sendMessageUpdateBroadcast(context, BroadcastService.INTENT_ACTIONS.MESSAGE_ATTACHMENT_DOWNLOAD_FAILD.toString(), message);
                 }
 
             }
@@ -400,7 +441,54 @@ static public AttachmentTask startDownload(
             sInstance.attachmentInProgress.add(downloadTask.getMessage().getKeyString());
             sInstance.attachmentTaskList.add(downloadTask);
             // Sets the display to show that the image is queued for downloading and decoding.
-            imageView.getProressBar().setVisibility(View.VISIBLE);
+            if (imageView.getProressBar() != null) {
+                imageView.getProressBar().setVisibility(View.VISIBLE);
+            }
+            //imageView.setStatusResource(R.drawable.imagequeued);
+
+            // The image was cached, so no download is required.
+        } else {
+
+            /*
+             * Signals that the download is "complete", because the byte array already contains the
+             * undecoded image. The decoding starts.
+             */
+            //imageView.getProressBar().setVisibility(View.VISIBLE);
+            sInstance.handleState(downloadTask, DOWNLOAD_COMPLETE);
+        }
+
+        // Returns a task object, either newly-created or one from the task pool
+        return downloadTask;
+    }
+
+
+    static public AttachmentTask startDownload(AttachmentViewProperties attachmentViewProperties,
+                                               boolean cacheFlag) {
+
+        /*
+         * Gets a task from the pool of tasks, returning null if the pool is empty
+         */
+        AttachmentTask downloadTask = sInstance.mPhotoTaskWorkQueue.poll();
+
+        // If the queue was empty, create a new task instead.
+        if (null == downloadTask) {
+            downloadTask = new AttachmentTask();
+        }
+
+        // Initializes the task
+        downloadTask.initializeDownloaderTask(AttachmentManager.sInstance, attachmentViewProperties, cacheFlag);
+
+        // If image is already downloaded ...just pass-message as download complete
+        if (!downloadTask.getMessage().isAttachmentDownloaded()) {
+
+            /*
+             * "Executes" the tasks' download Runnable in order to download the image. If no
+             * Threads are available in the thread pool, the Runnable waits in the queue.
+             */
+            sInstance.mDownloadThreadPool.execute(downloadTask.getHTTPDownloadRunnable());
+            sInstance.attachmentInProgress.add(downloadTask.getMessage().getKeyString());
+            sInstance.attachmentTaskList.add(downloadTask);
+            // Sets the display to show that the image is queued for downloading and decoding.
             //imageView.setStatusResource(R.drawable.imagequeued);
 
             // The image was cached, so no download is required.
@@ -451,7 +539,7 @@ public void handleState(AttachmentTask photoTask, int state) {
                     // If the task is set to cache the results, put the buffer
                     // that was
                     // successfully decoded into the cache
-                    if (photoTask != null && photoTask.getImage() != null) {
+                    if (photoTask != null && photoTask.getImage() != null && !TextUtils.isEmpty(photoTask.getMessage().getKeyString())) {
                         mPhotoCache.put(photoTask.getMessage().getKeyString(), photoTask.getImage());
                     }
                 }
@@ -498,7 +586,7 @@ void recycleTask(AttachmentTask downloadTask) {
     }
 
     public Bitmap getBitMapFromCache(String key) {
-        if (mPhotoCache != null) {
+        if (mPhotoCache != null && !TextUtils.isEmpty(key)) {
             return mPhotoCache.get(key);
         }
         return null;
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/AttachmentTask.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/AttachmentTask.java
index b5074731..e597c4bb 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/AttachmentTask.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/AttachmentTask.java
@@ -62,6 +62,7 @@
      * ensures that the reference is more transitory in nature.
      */
     private WeakReference<AttachmentView> mImageWeakRef;
+    private WeakReference<AttachmentViewProperties> mImageWeakRefNew;
     // The image's URL
     private String mImageURL;
     // The width and height of the decoded image
@@ -118,12 +119,42 @@ void initializeDownloaderTask(
         // Gets the width and height of the provided ImageView
         mTargetWidth = photoView.getWidth();
         mTargetHeight = photoView.getHeight();
-        context = photoView.getContext();
+        context = photoView.getContext().getApplicationContext();
+
+    }
+
+    void initializeDownloaderTask(
+            AttachmentManager photoManager,
+            AttachmentViewProperties photoView,
+            boolean cacheFlag) {
+        // Sets this object's ThreadPool field to be the input argument
+        sPhotoManager = photoManager;
+
+        // Gets the URL for the View
+        mImageURL = photoView.getImageUrl();
+        message = photoView.getMessage();
+        // Instantiates the weak reference to the incoming view
+        setAttachementViewNew(photoView);
 
+        // Sets the cache flag to the input argument
+        mCacheEnabled = cacheFlag;
+
+        // Gets the width and height of the provided ImageView
+        mTargetWidth = photoView.getWidth();
+        mTargetHeight = photoView.getHeight();
+        context = photoView.getContext();
     }
 
     public void setAttachementView(AttachmentView photoView) {
         mImageWeakRef = new WeakReference<AttachmentView>(photoView);
+        this.message = photoView.getMessage();
+        this.context = photoView.getContext();
+    }
+
+    public void setAttachementViewNew(AttachmentViewProperties photoView) {
+        mImageWeakRefNew = new WeakReference<AttachmentViewProperties>(photoView);
+        this.message = photoView.getMessage();
+        this.context = photoView.getContext();
     }
 
 
@@ -139,6 +170,10 @@ void recycle() {
             mImageWeakRef = null;
         }
 
+        if (null != mImageWeakRefNew) {
+            mImageWeakRefNew.clear();
+            mImageWeakRefNew = null;
+        }
         // Releases references to the byte buffer and the BitMap
         mImageBuffer = null;
         mDecodedImage = null;
@@ -169,7 +204,7 @@ public Message getMessage() {
 
     @Override
     public Context getContext() {
-        return context;
+        return context.getApplicationContext();
     }
 
     @Override
@@ -183,7 +218,7 @@ public String getContentType() {
             final String mimeType = FileUtils.getMimeType(filePath);
             return mimeType;
 
-        } else if (message.getFileMetas() != null ) {
+        } else if (message.getFileMetas() != null) {
             return message.getFileMetas().getContentType();
         }
         return null;
@@ -224,6 +259,13 @@ public AttachmentView getPhotoView() {
         return null;
     }
 
+    public AttachmentViewProperties getAttachmentView() {
+        if (null != mImageWeakRefNew) {
+            return mImageWeakRefNew.get();
+        }
+        return null;
+    }
+
     /*
      * Returns the Thread that this Task is running on. The method must first get a lock on a
      * static field, in this case the ThreadPool singleton. The lock is needed because the
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/AttachmentView.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/AttachmentView.java
index 52cbcd2e..096dd269 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/AttachmentView.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/AttachmentView.java
@@ -193,7 +193,7 @@ public void setImageURI(Uri uri) {
     }
 
     public String getImageUrl() {
-        if (message == null || message.getFileMetas() == null ) {
+        if (message == null || message.getFileMetas() == null) {
             return null;
         }
         return new MobiComKitClientService(getContext().getApplicationContext()).getFileUrl() + message.getFileMetas().getBlobKeyString();
@@ -224,10 +224,11 @@ public void setDownloadProgressLayout(RelativeLayout downloadProgressLayout) {
     }
 
     public void cancelDownload() {
-        AttachmentManager.removeDownload(mDownloadThread);
+        AttachmentManager.removeDownload(mDownloadThread, false);
         getDownloadProgressLayout().setVisibility(GONE);
-        mIsDrawn= false;
+        mIsDrawn = false;
     }
+
     public void setMCacheFlag(boolean cacheFlag) {
         this.mCacheFlag = cacheFlag;
     }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/AttachmentViewProperties.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/AttachmentViewProperties.java
new file mode 100644
index 00000000..2d27da57
--- /dev/null
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/AttachmentViewProperties.java
@@ -0,0 +1,49 @@
+package com.applozic.mobicomkit.api.attachment;
+
+import android.content.Context;
+
+import com.applozic.mobicomkit.api.MobiComKitClientService;
+import com.applozic.mobicomkit.api.conversation.Message;
+
+/**
+ * Created by devashish on 22/07/16.
+ */
+public class AttachmentViewProperties {
+
+    public AttachmentViewProperties(int width, int height, Context context, Message message) {
+        this.width = width;
+        this.height = height;
+        this.context = context;
+        this.message = message;
+    }
+
+    private int width;
+    private int height;
+    private Context context;
+    private Message message;
+
+    public String getImageUrl(){
+        //file url...
+        if (message == null || message.getFileMetas() == null ) {
+            return null;
+        }
+        return new MobiComKitClientService(getContext().getApplicationContext()).getFileUrl() + message.getFileMetas().getBlobKeyString();
+    }
+
+
+    public Message getMessage() {
+        return message;
+    }
+
+    public int getWidth() {
+        return width;
+    }
+
+    public int getHeight() {
+        return height;
+    }
+
+    public Context getContext() {
+        return context;
+    }
+}
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/FileClientService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/FileClientService.java
index c7b938ad..289ebbfb 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/FileClientService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/FileClientService.java
@@ -5,19 +5,23 @@
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
 import android.media.ThumbnailUtils;
+import android.net.Uri;
 import android.os.Environment;
 import android.provider.MediaStore;
-import android.util.Log;
+import android.text.TextUtils;
 
 import com.applozic.mobicomkit.api.HttpRequestUtils;
 import com.applozic.mobicomkit.api.MobiComKitClientService;
-
 import com.applozic.mobicomkit.api.conversation.Message;
 import com.applozic.mobicomkit.api.conversation.database.MessageDatabaseService;
+import com.applozic.mobicomkit.api.conversation.service.ConversationService;
+import com.applozic.mobicomkit.feed.TopicDetail;
 import com.applozic.mobicommons.commons.core.utils.Utils;
 import com.applozic.mobicommons.commons.image.ImageUtils;
 import com.applozic.mobicommons.file.FileUtils;
+import com.applozic.mobicommons.json.GsonUtils;
 import com.applozic.mobicommons.people.channel.Channel;
+import com.applozic.mobicommons.people.channel.Conversation;
 import com.applozic.mobicommons.people.contact.Contact;
 
 import java.io.File;
@@ -39,31 +43,22 @@
     //Todo: Make the base folder configurable using either strings.xml or properties file
     public static final String MOBI_COM_IMAGES_FOLDER = "/image";
     public static final String MOBI_COM_VIDEOS_FOLDER = "/video";
-    public static final String MOBI_COM_CONTACT_FOLDER= "/contact";
+    public static final String MOBI_COM_CONTACT_FOLDER = "/contact";
     public static final String MOBI_COM_OTHER_FILES_FOLDER = "/other";
     public static final String MOBI_COM_THUMBNAIL_SUFIX = "/.Thumbnail";
     public static final String FILE_UPLOAD_URL = "/rest/ws/aws/file/url";
     public static final String IMAGE_DIR = "image";
+    public static final String AL_UPLOAD_FILE_URL = "/rest/ws/upload/file";
     private static final int MARK = 1024;
     private static final String TAG = "FileClientService";
-    private HttpRequestUtils httpRequestUtils;
-    public static final String AL_UPLOAD_FILE_URL = "/rest/ws/upload/file";
-
     private static final String MAIN_FOLDER_META_DATA = "main_folder_name";
+    private HttpRequestUtils httpRequestUtils;
 
     public FileClientService(Context context) {
         super(context);
         this.httpRequestUtils = new HttpRequestUtils(context);
     }
 
-    public String profileImageUploadURL(){
-        return getBaseUrl() + AL_UPLOAD_FILE_URL;
-    }
-
-    public String getFileUploadUrl() {
-        return FILE_BASE_URL + FILE_UPLOAD_URL;
-    }
-
     public static File getFilePath(String fileName, Context context, String contentType, boolean isThumbnail) {
         File filePath;
         File dir;
@@ -74,7 +69,7 @@ public static File getFilePath(String fileName, Context context, String contentT
                 folder = "/" + Utils.getMetaDataValue(context, MAIN_FOLDER_META_DATA) + MOBI_COM_IMAGES_FOLDER;
             } else if (contentType.startsWith("video")) {
                 folder = "/" + Utils.getMetaDataValue(context, MAIN_FOLDER_META_DATA) + MOBI_COM_VIDEOS_FOLDER;
-            } else if(contentType.equalsIgnoreCase("text/x-vCard")){
+            } else if (contentType.equalsIgnoreCase("text/x-vCard")) {
                 folder = "/" + Utils.getMetaDataValue(context, MAIN_FOLDER_META_DATA) + MOBI_COM_CONTACT_FOLDER;
             }
             if (isThumbnail) {
@@ -95,26 +90,34 @@ public static File getFilePath(String fileName, Context context, String contentT
         return filePath;
     }
 
-
     public static File getFilePath(String fileName, Context context, String contentType) {
         return getFilePath(fileName, context, contentType, false);
     }
 
-    public Bitmap loadThumbnailImage(Context context, FileMeta fileMeta, int reqWidth, int reqHeight) {
+    public String profileImageUploadURL() {
+        return getBaseUrl() + AL_UPLOAD_FILE_URL;
+    }
+
+    public String getFileUploadUrl() {
+        return FILE_BASE_URL + FILE_UPLOAD_URL;
+    }
+
+    public Bitmap loadThumbnailImage(Context context, Message message, int reqWidth, int reqHeight) {
         try {
             Bitmap attachedImage = null;
+            FileMeta fileMeta = message.getFileMetas();
             String thumbnailUrl = fileMeta.getThumbnailUrl();
             String contentType = fileMeta.getContentType();
             final BitmapFactory.Options options = new BitmapFactory.Options();
             options.inJustDecodeBounds = true;
             // Todo get the file format from server and append
-            String imageName = fileMeta.getBlobKeyString() + "." + FileUtils.getFileFormat(fileMeta.getName());
+            String imageName = FileUtils.getName(fileMeta.getName()) + message.getCreatedAtTime() + "." + FileUtils.getFileFormat(fileMeta.getName());
             String imageLocalPath = getFilePath(imageName, context, fileMeta.getContentType(), true).getAbsolutePath();
             if (imageLocalPath != null) {
                 try {
                     attachedImage = BitmapFactory.decodeFile(imageLocalPath);
                 } catch (Exception ex) {
-                    Log.e(TAG, "File not found on local storage: " + ex.getMessage());
+                    Utils.printLog(context,TAG, "File not found on local storage: " + ex.getMessage());
                 }
             }
             if (attachedImage == null) {
@@ -126,7 +129,7 @@ public Bitmap loadThumbnailImage(Context context, FileMeta fileMeta, int reqWidt
                     imageLocalPath = ImageUtils.saveImageToInternalStorage(file, attachedImage);
 
                 } else {
-                    Log.w(TAG, "Download is failed response code is ...." + connection.getResponseCode());
+                    Utils.printLog(context,TAG, "Download is failed response code is ...." + connection.getResponseCode());
                     return null;
                 }
             }
@@ -138,18 +141,15 @@ public Bitmap loadThumbnailImage(Context context, FileMeta fileMeta, int reqWidt
             attachedImage = BitmapFactory.decodeFile(imageLocalPath, options);
             return attachedImage;
         } catch (FileNotFoundException ex) {
-            ex.printStackTrace();
-            Log.e(TAG, "File not found on server: " + ex.getMessage());
+            Utils.printLog(context,TAG, "File not found on server: " + ex.getMessage());
         } catch (Exception ex) {
-            ex.printStackTrace();
-            Log.e(TAG, "Exception fetching file from server: " + ex.getMessage());
+            Utils.printLog(context,TAG, "Exception fetching file from server: " + ex.getMessage());
         }
 
         return null;
     }
 
     /**
-     *
      * @param message
      */
 
@@ -161,20 +161,20 @@ public void loadContactsvCard(Message message) {
             String contentType = fileMeta.getContentType();
             HttpURLConnection connection;
             String fileName = fileMeta.getName();
-            file = FileClientService.getFilePath(fileName, context, contentType);
+            file = FileClientService.getFilePath(fileName, context.getApplicationContext(), contentType);
             if (!file.exists()) {
                 connection = openHttpConnection(new MobiComKitClientService(context).getFileUrl() + fileMeta.getBlobKeyString());
                 if (connection.getResponseCode() == HttpURLConnection.HTTP_OK) {
                     inputStream = connection.getInputStream();
                 } else {
                     //TODO: Error Handling...
-                    Log.i(TAG, "Got Error response while uploading file : " + connection.getResponseCode());
+                    Utils.printLog(context,TAG, "Got Error response while uploading file : " + connection.getResponseCode());
                     return;
                 }
 
                 OutputStream output = new FileOutputStream(file);
                 byte data[] = new byte[1024];
-                int count=0;
+                int count = 0;
                 while ((count = inputStream.read(data)) != -1) {
                     output.write(data, 0, count);
                 }
@@ -191,15 +191,15 @@ public void loadContactsvCard(Message message) {
 
         } catch (FileNotFoundException ex) {
             ex.printStackTrace();
-            Log.e(TAG, "File not found on server");
+            Utils.printLog(context,TAG, "File not found on server");
         } catch (Exception ex) {
             //If partial file got created delete it, we try to download it again
             if (file != null && file.exists()) {
-                Log.i(TAG, " Exception occured while downloading :" + file.getAbsolutePath());
+                Utils.printLog(context,TAG, " Exception occured while downloading :" + file.getAbsolutePath());
                 file.delete();
             }
             ex.printStackTrace();
-            Log.e(TAG, "Exception fetching file from server");
+            Utils.printLog(context,TAG, "Exception fetching file from server");
         }
     }
 
@@ -217,64 +217,76 @@ public Bitmap loadMessageImage(Context context, String url) {
             return attachedImage;
         } catch (FileNotFoundException ex) {
             ex.printStackTrace();
-            Log.e(TAG, "File not found on server: " + ex.getMessage());
+            Utils.printLog(context,TAG, "File not found on server: " + ex.getMessage());
         } catch (Exception ex) {
             ex.printStackTrace();
-            Log.e(TAG, "Exception fetching file from server: " + ex.getMessage());
+            Utils.printLog(context,TAG, "Exception fetching file from server: " + ex.getMessage());
         }
 
         return null;
     }
 
     public String uploadBlobImage(String path) throws UnsupportedEncodingException {
-        try{
-            ApplozicMultipartUtility multipart = new ApplozicMultipartUtility(getUploadKey(),"UTF-8",context);
+        try {
+            ApplozicMultipartUtility multipart = new ApplozicMultipartUtility(getUploadKey(), "UTF-8", context);
             multipart.addFilePart("files[]", new File(path));
             return multipart.getResponse();
-        }catch (Exception e){
+        } catch (Exception e) {
             e.printStackTrace();
         }
         return null;
     }
 
     public String getUploadKey() {
-        return httpRequestUtils.getResponse(getFileUploadUrl() + "?" + new Date().getTime(), "text/plain", "text/plain",true);
+        return httpRequestUtils.getResponse(getFileUploadUrl() + "?" + new Date().getTime(), "text/plain", "text/plain", true);
     }
 
     public Bitmap downloadBitmap(Contact contact, Channel channel) {
+        HttpURLConnection connection = null;
+        MarkStream inputStream = null;
         try {
-            HttpURLConnection connection;
             if (contact != null) {
                 connection = openHttpConnection(contact.getImageURL());
             } else {
                 connection = openHttpConnection(channel.getImageUrl());
             }
-            if (connection != null && connection.getResponseCode() == 200) {
-                MarkStream inputStream =  new MarkStream(connection.getInputStream());
-                BitmapFactory.Options optionsBitmap = new BitmapFactory.Options();
-                optionsBitmap.inJustDecodeBounds = true;
-                inputStream.allowMarksToExpire(false);
-                long mark = inputStream.setPos(MARK);
-                BitmapFactory.decodeStream(inputStream, null, optionsBitmap);
-                inputStream.resetPos(mark);
-                optionsBitmap.inJustDecodeBounds = false;
-                optionsBitmap.inSampleSize = ImageUtils.calculateInSampleSize(optionsBitmap, 100, 50);
-                Bitmap attachedImage = BitmapFactory.decodeStream(inputStream, null, optionsBitmap);
-                inputStream.allowMarksToExpire(true);
-                inputStream.close();
-                connection.disconnect();
-                return attachedImage;
-            } else {
-                Log.w(TAG, "Download is failed response code is ...." + connection.getResponseCode());
+            if (connection != null) {
+                if (connection.getResponseCode() == 200) {
+                    inputStream = new MarkStream(connection.getInputStream());
+                    BitmapFactory.Options optionsBitmap = new BitmapFactory.Options();
+                    optionsBitmap.inJustDecodeBounds = true;
+                    inputStream.allowMarksToExpire(false);
+                    long mark = inputStream.setPos(MARK);
+                    BitmapFactory.decodeStream(inputStream, null, optionsBitmap);
+                    inputStream.resetPos(mark);
+                    optionsBitmap.inJustDecodeBounds = false;
+                    optionsBitmap.inSampleSize = ImageUtils.calculateInSampleSize(optionsBitmap, 100, 50);
+                    Bitmap attachedImage = BitmapFactory.decodeStream(inputStream, null, optionsBitmap);
+                    inputStream.allowMarksToExpire(true);
+                    return attachedImage;
+                } else {
+                    Utils.printLog(context,TAG, "Download is failed response code is ...." + connection.getResponseCode());
+                }
             }
         } catch (FileNotFoundException ex) {
             ex.printStackTrace();
-            Log.e(TAG, "Image not found on server: " + ex.getMessage());
+            Utils.printLog(context,TAG, "Image not found on server: " + ex.getMessage());
         } catch (Exception ex) {
             ex.printStackTrace();
-            Log.e(TAG, "Exception fetching file from server: " + ex.getMessage());
+            Utils.printLog(context,TAG, "Exception fetching file from server: " + ex.getMessage());
         } catch (Throwable t) {
 
+        } finally {
+            if (connection != null) {
+                connection.disconnect();
+            }
+            if (inputStream != null) {
+                try {
+                    inputStream.close();
+                } catch (IOException e) {
+                    e.printStackTrace();
+                }
+            }
         }
         return null;
 
@@ -294,7 +306,6 @@ public Bitmap createAndSaveVideoThumbnail(String filePath) {
         if (!dir.exists()) {
             dir.mkdirs();
         }
-        Log.i("abc", thumbnailDir);
         videoThumbnailPath = thumbnailDir + videoFileName + ".jpeg";
         Bitmap videoThumbnail = null;
 
@@ -310,7 +321,7 @@ public Bitmap createAndSaveVideoThumbnail(String filePath) {
                 videoThumbnail.compress(Bitmap.CompressFormat.JPEG, 50, fOut);
                 fOut.flush();
                 fOut.close();
-            } catch (IOException e) {
+            } catch (Exception e) {
                 e.printStackTrace();
             }
         }
@@ -319,13 +330,115 @@ public Bitmap createAndSaveVideoThumbnail(String filePath) {
     }
 
     public String uploadProfileImage(String path) throws UnsupportedEncodingException {
-        try{
-            ApplozicMultipartUtility multipart = new ApplozicMultipartUtility(profileImageUploadURL(),"UTF-8",context);
+        try {
+            ApplozicMultipartUtility multipart = new ApplozicMultipartUtility(profileImageUploadURL(), "UTF-8", context);
             multipart.addFilePart("file", new File(path));
             return multipart.getResponse();
-        }catch (Exception e){
+        } catch (Exception e) {
             e.printStackTrace();
         }
         return null;
     }
+
+    public Bitmap loadMessageImage(Context context, Conversation conversation) {
+        try {
+            if (conversation == null) {
+                return null;
+            }
+            Bitmap attachedImage = ImageUtils.getBitMapFromLocalPath(conversation.getTopicLocalImageUri());
+            if (attachedImage != null) {
+                return attachedImage;
+            }
+            Bitmap bitmap = downloadProductImage(conversation);
+            if (bitmap != null) {
+                File file = FileClientService.getFilePath("topic_" + conversation.getId(), context.getApplicationContext(), "image", true);
+                String imageLocalPath = ImageUtils.saveImageToInternalStorage(file, bitmap);
+                conversation.setTopicLocalImageUri(imageLocalPath);
+            }
+            if (!TextUtils.isEmpty(conversation.getTopicLocalImageUri())) {
+                ConversationService.getInstance(context).updateTopicLocalImageUri(conversation.getTopicLocalImageUri(), conversation.getId());
+            }
+            return bitmap;
+
+        } catch (Exception e) {
+
+        }
+        return null;
+    }
+
+    public Bitmap downloadProductImage(Conversation conversation) {
+        TopicDetail topicDetail = (TopicDetail) GsonUtils.getObjectFromJson(conversation.getTopicDetail(), TopicDetail.class);
+        if (TextUtils.isEmpty(topicDetail.getLink())) {
+            return null;
+        }
+        HttpURLConnection connection = null;
+        MarkStream inputStream = null;
+        try {
+            if (conversation != null) {
+                connection = openHttpConnection(topicDetail.getLink());
+            }
+            if (connection != null) {
+                if (connection.getResponseCode() == 200) {
+                    inputStream = new MarkStream(connection.getInputStream());
+                    BitmapFactory.Options optionsBitmap = new BitmapFactory.Options();
+                    optionsBitmap.inJustDecodeBounds = true;
+                    inputStream.allowMarksToExpire(false);
+                    long mark = inputStream.setPos(MARK);
+                    BitmapFactory.decodeStream(inputStream, null, optionsBitmap);
+                    inputStream.resetPos(mark);
+                    optionsBitmap.inJustDecodeBounds = false;
+                    optionsBitmap.inSampleSize = ImageUtils.calculateInSampleSize(optionsBitmap, 100, 50);
+                    Bitmap attachedImage = BitmapFactory.decodeStream(inputStream, null, optionsBitmap);
+                    inputStream.allowMarksToExpire(true);
+                    return attachedImage;
+                } else {
+                    return null;
+                }
+            }
+        } catch (FileNotFoundException ex) {
+            Utils.printLog(context,TAG, "Image not found on server: " + ex.getMessage());
+        } catch (Exception ex) {
+            Utils.printLog(context,TAG, "Exception fetching file from server: " + ex.getMessage());
+        } catch (Throwable t) {
+
+        } finally {
+            if (connection != null) {
+                connection.disconnect();
+            }
+            if (inputStream != null) {
+                try {
+                    inputStream.close();
+                } catch (IOException e) {
+                    e.printStackTrace();
+                }
+            }
+        }
+        return null;
+    }
+
+    public void writeFile(Uri uri, File file) {
+        InputStream in = null;
+        OutputStream out = null;
+        try {
+            in = context.getContentResolver().openInputStream(uri);
+            byte[] buffer = new byte[1024];
+            int bytesRead = -1;
+            out = new FileOutputStream(file);
+            while ((bytesRead = in.read(buffer)) != -1) {
+                out.write(buffer, 0, bytesRead);
+            }
+        } catch (Exception ex) {
+            ex.printStackTrace();
+        } finally {
+            if (in != null && out != null) {
+                try {
+                    out.flush();
+                    in.close();
+                } catch (IOException e) {
+                    e.printStackTrace();
+                }
+
+            }
+        }
+    }
 }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/FileMeta.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/FileMeta.java
index 35ac0174..836f49c4 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/FileMeta.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/FileMeta.java
@@ -102,7 +102,7 @@ public String getSizeInReadableFormat() {
     @Override
     public String toString() {
         return "FileMeta{" +
-                "key='" + key+ '\'' +
+                "key='" + key + '\'' +
                 ", userKey='" + userKey + '\'' +
                 ", blobKey='" + blobKey + '\'' +
                 ", url=" + url +
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/ApplozicIntentService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/ApplozicIntentService.java
index 8dc141c0..c8c4c255 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/ApplozicIntentService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/ApplozicIntentService.java
@@ -2,8 +2,8 @@
 
 import android.app.IntentService;
 import android.content.Intent;
-import android.os.Process;
-import android.text.TextUtils;
+
+import com.applozic.mobicomkit.api.account.user.UserService;
 
 /**
  * Created by sunil on 26/12/15.
@@ -14,32 +14,38 @@
      *
      * @param name Used to name the worker thread, important only for debugging.
      */
-    public static final String PAIRED_MESSAGE_KEY_STRING = "pairedMessageKey";
     public static final String CONTACT = "contact";
     public static final String CHANNEL = "channel";
+    public static final String AL_SYNC_ON_CONNECTIVITY = "AL_SYNC_ON_CONNECTIVITY";
     private static final String TAG = "ApplozicIntentService";
+    MobiComConversationService conversationService;
     private MessageClientService messageClientService;
 
     public ApplozicIntentService() {
         super(TAG);
-        this.messageClientService = new MessageClientService(ApplozicIntentService.this);
+    }
+
+    @Override
+    public void onCreate() {
+        super.onCreate();
+        this.messageClientService = new MessageClientService(this);
+        this.conversationService = new MobiComConversationService(this);
     }
 
     @Override
     protected void onHandleIntent(Intent intent) {
-        final String pairedMessageKeyString = intent.getStringExtra(PAIRED_MESSAGE_KEY_STRING);
-        Thread thread = new Thread(new Runnable() {
-            @Override
-            public void run() {
-                if (!TextUtils.isEmpty(pairedMessageKeyString)) {
-                    messageClientService.updateReadStatusForSingleMessage(pairedMessageKeyString);
-                }
-
-            }
-        });
-        thread.setPriority(Process.THREAD_PRIORITY_BACKGROUND);
-        thread.start();
+        if (intent == null) {
+            return;
+        }
 
+        boolean connectivityChange = intent.getBooleanExtra(AL_SYNC_ON_CONNECTIVITY, false);
+        if (connectivityChange) {
+            SyncCallService.getInstance(ApplozicIntentService.this).syncMessages(null);
+            messageClientService.syncPendingMessages(true);
+            messageClientService.syncDeleteMessages(true);
+            conversationService.processLastSeenAtStatus();
+            UserService.getInstance(ApplozicIntentService.this).processSyncUserBlock();
+        }
     }
 }
 
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/ApplozicMqttIntentService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/ApplozicMqttIntentService.java
index 13fd20ac..4f941583 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/ApplozicMqttIntentService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/ApplozicMqttIntentService.java
@@ -36,51 +36,54 @@ public ApplozicMqttIntentService() {
 
     @Override
     protected void onHandleIntent(Intent intent) {
-        boolean subscribe = intent.getBooleanExtra(SUBSCRIBE,false);
+        if (intent == null) {
+            return;
+        }
+        boolean subscribe = intent.getBooleanExtra(SUBSCRIBE, false);
         if (subscribe) {
             ApplozicMqttService.getInstance(getApplicationContext()).subscribe();
         }
         Contact contact = (Contact) intent.getSerializableExtra(CONTACT);
         Channel channel = (Channel) intent.getSerializableExtra(CHANNEL);
 
-        boolean subscribeToTyping = intent.getBooleanExtra(SUBSCRIBE_TO_TYPING,false);
-        if(subscribeToTyping){
+        boolean subscribeToTyping = intent.getBooleanExtra(SUBSCRIBE_TO_TYPING, false);
+        if (subscribeToTyping) {
             ApplozicMqttService.getInstance(getApplicationContext()).subscribeToTypingTopic(channel);
             return;
         }
-        boolean unSubscribeToTyping = intent.getBooleanExtra(UN_SUBSCRIBE_TO_TYPING,false);
-        if(unSubscribeToTyping){
+        boolean unSubscribeToTyping = intent.getBooleanExtra(UN_SUBSCRIBE_TO_TYPING, false);
+        if (unSubscribeToTyping) {
             ApplozicMqttService.getInstance(getApplicationContext()).unSubscribeToTypingTopic(channel);
             return;
         }
         String userKeyString = intent.getStringExtra(USER_KEY_STRING);
         String deviceKeyString = intent.getStringExtra(DEVICE_KEY_STRING);
         if (!TextUtils.isEmpty(userKeyString) && !TextUtils.isEmpty(deviceKeyString)) {
-            ApplozicMqttService.getInstance(getApplicationContext()).disconnectPublish(userKeyString,deviceKeyString, "0");
+            ApplozicMqttService.getInstance(getApplicationContext()).disconnectPublish(userKeyString, deviceKeyString, "0");
         }
 
         boolean connectedStatus = intent.getBooleanExtra(CONNECTED_PUBLISH, false);
         if (connectedStatus) {
-            ApplozicMqttService.getInstance(getApplicationContext()).connectPublish(MobiComUserPreference.getInstance(getApplicationContext()).getSuUserKeyString(),MobiComUserPreference.getInstance(getApplicationContext()).getDeviceKeyString(), "1");
+            ApplozicMqttService.getInstance(getApplicationContext()).connectPublish(MobiComUserPreference.getInstance(getApplicationContext()).getSuUserKeyString(), MobiComUserPreference.getInstance(getApplicationContext()).getDeviceKeyString(), "1");
         }
 
-        if (contact != null ){
+        if (contact != null) {
             boolean stop = intent.getBooleanExtra(STOP_TYPING, false);
             if (stop) {
-                ApplozicMqttService.getInstance(getApplicationContext()).typingStopped(contact,null);
+                ApplozicMqttService.getInstance(getApplicationContext()).typingStopped(contact, null);
             }
         }
 
-        if(contact != null && (contact.isBlocked() || contact.isBlockedBy())){
+        if (contact != null && (contact.isBlocked() || contact.isBlockedBy())) {
             return;
         }
 
-        if (contact != null || channel != null){
+        if (contact != null || channel != null) {
             boolean typing = intent.getBooleanExtra(TYPING, false);
             if (typing) {
-                ApplozicMqttService.getInstance(getApplicationContext()).typingStarted(contact,channel);
+                ApplozicMqttService.getInstance(getApplicationContext()).typingStarted(contact, channel);
             } else {
-                ApplozicMqttService.getInstance(getApplicationContext()).typingStopped(contact,channel);
+                ApplozicMqttService.getInstance(getApplicationContext()).typingStopped(contact, channel);
             }
         }
 
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/ConversationIntentService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/ConversationIntentService.java
index 3085dd75..b577ab7f 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/ConversationIntentService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/ConversationIntentService.java
@@ -2,9 +2,9 @@
 
 import android.app.IntentService;
 import android.content.Intent;
-import android.util.Log;
 
 import com.applozic.mobicomkit.api.account.user.UserService;
+import com.applozic.mobicommons.commons.core.utils.Utils;
 import com.applozic.mobicommons.people.channel.Channel;
 import com.applozic.mobicommons.people.contact.Contact;
 
@@ -15,8 +15,8 @@
  */
 public class ConversationIntentService extends IntentService {
 
-    private static final String TAG = "ConversationIntent";
     public static final String SYNC = "AL_SYNC";
+    private static final String TAG = "ConversationIntent";
     private static final int PRE_FETCH_MESSAGES_FOR = 6;
     private MobiComMessageService mobiComMessageService;
 
@@ -32,8 +32,11 @@ public void onCreate() {
 
     @Override
     protected void onHandleIntent(Intent intent) {
+        if (intent == null) {
+            return;
+        }
         boolean sync = intent.getBooleanExtra(SYNC, false);
-        Log.i(TAG, "Syncing messages service started: " + sync);
+        Utils.printLog(ConversationIntentService.this,TAG, "Syncing messages service started: " + sync);
         if (sync) {
             mobiComMessageService.syncMessages();
         } else {
@@ -50,20 +53,20 @@ public ConversationSync() {
         @Override
         public void run() {
             try {
-                UserService.getInstance(ConversationIntentService.this).processSyncUserBlock();
                 MobiComConversationService mobiComConversationService = new MobiComConversationService(ConversationIntentService.this);
                 List<Message> messages = mobiComConversationService.getLatestMessagesGroupByPeople();
-                for (Message message: messages.subList(0, Math.min(PRE_FETCH_MESSAGES_FOR, messages.size()))) {
+                UserService.getInstance(ConversationIntentService.this).processSyncUserBlock();
+                for (Message message : messages.subList(0, Math.min(PRE_FETCH_MESSAGES_FOR, messages.size()))) {
                     Contact contact = null;
                     Channel channel = null;
 
                     if (message.getGroupId() != null) {
                         channel = new Channel(message.getGroupId());
-                    }else {
+                    } else {
                         contact = new Contact(message.getContactIds());
                     }
 
-                    mobiComConversationService.getMessages(1L, null, contact, channel, null);
+                    mobiComConversationService.getMessages(1L, null, contact, channel, null, true);
                 }
             } catch (Exception e) {
                 e.printStackTrace();
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/ConversationReadService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/ConversationReadService.java
index b9bd0c1c..6a2eab34 100644
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/ConversationReadService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/ConversationReadService.java
@@ -2,8 +2,9 @@
 
 import android.app.IntentService;
 import android.content.Intent;
+import android.support.v4.content.LocalBroadcastManager;
 
-import com.applozic.mobicomkit.api.account.user.UserService;
+import com.applozic.mobicomkit.api.MobiComKitConstants;
 import com.applozic.mobicommons.people.channel.Channel;
 import com.applozic.mobicommons.people.contact.Contact;
 
@@ -12,10 +13,11 @@
  */
 public class ConversationReadService extends IntentService {
 
-    private static final String TAG = "ConversationReadService";
     public static final String CONTACT = "contact";
     public static final String CHANNEL = "channel";
     public static final String UNREAD_COUNT = "UNREAD_COUNT";
+    public static final String SINGLE_MESSAGE_READ = "SINGLE_MESSAGE_READ";
+    private static final String TAG = "ConversationReadService";
 
     public ConversationReadService() {
         super(TAG);
@@ -23,15 +25,21 @@ public ConversationReadService() {
 
     @Override
     protected void onHandleIntent(Intent intent) {
+        if (intent == null) {
+            return;
+        }
+        MessageClientService messageClientService = new MessageClientService(getApplicationContext());
         Integer unreadCount = intent.getIntExtra(UNREAD_COUNT, 0);
-
+        boolean singleMessageRead = intent.getBooleanExtra(SINGLE_MESSAGE_READ, false);
+        Contact contact = (Contact) intent.getSerializableExtra(CONTACT);
+        Channel channel = (Channel) intent.getSerializableExtra(CHANNEL);
         if (unreadCount != 0) {
-            Contact contact = (Contact) intent.getSerializableExtra(CONTACT);
-            Channel channel = (Channel) intent.getSerializableExtra(CHANNEL);
-            new MessageClientService(getApplicationContext()).updateReadStatus(contact, channel);
-        } else {
-            UserService.getInstance(getApplicationContext()).processUserReadConversation();
+            Intent readIntent = new Intent(MobiComKitConstants.APPLOZIC_UNREAD_COUNT);
+            LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(readIntent);
+        }
+        if (unreadCount != 0 || singleMessageRead) {
+            messageClientService.updateReadStatus(contact, channel);
         }
-    }
 
+    }
 }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/Message.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/Message.java
index 7e63f574..243a32c1 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/Message.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/Message.java
@@ -3,6 +3,7 @@
 import android.content.Context;
 import android.text.TextUtils;
 
+import com.applozic.mobicomkit.api.notification.VideoCallNotificationHelper;
 import com.applozic.mobicommons.json.JsonMarker;
 import com.applozic.mobicomkit.api.account.user.MobiComUserPreference;
 import com.applozic.mobicomkit.api.attachment.FileMeta;
@@ -54,8 +55,9 @@
     private boolean connected = false;
     private short contentType = ContentType.DEFAULT.getValue();
     private Map<String, String> metadata = new HashMap<>();
-
     private short status = Status.READ.getValue();
+    private boolean hidden;
+    private int replyMessage;
 
     public Message() {
 
@@ -133,7 +135,7 @@ public boolean hasAttachment() {
     }
 
     public boolean isAttachmentUploadInProgress() {
-        return filePaths != null && !filePaths.isEmpty() && !sentToServer;
+        return filePaths != null && !filePaths.isEmpty() && FileUtils.isFileExist(filePaths.get(0))&& !sentToServer;
     }
 
     public boolean isAttachmentDownloaded() {
@@ -410,7 +412,7 @@ public void setTopicId(String topicId) {
     }
 
     public String getCurrentId() {
-        return getGroupId() != null ? String.valueOf(getGroupId()): getContactIds();
+        return getGroupId() != null ? String.valueOf(getGroupId()) : getContactIds();
     }
 
     public Integer getGroupId() {
@@ -518,33 +520,36 @@ public boolean isTempDateType() {
         return type.equals(MessageType.DATE_TEMP.value);
     }
 
+    public void setTempDateType(short tempDateType) {
+        this.type = tempDateType;
+    }
+
     public boolean isCustom() {
         return contentType == ContentType.CUSTOM.value;
     }
 
-    public boolean isChannelCustomMessage(){
+    public boolean isChannelCustomMessage() {
         return contentType == ContentType.CHANNEL_CUSTOM_MESSAGE.getValue();
     }
 
-    public void setTempDateType(short tempDateType) {
-        this.type = tempDateType;
-    }
-
     public boolean isDeliveredAndRead() {
-        return Status.DELIVERED_AND_READ.getValue().shortValue() == getStatus();
+        return Message.Status.DELIVERED_AND_READ.getValue().shortValue() == getStatus();
     }
 
     public boolean isReadStatus() {
-        return Status.READ.getValue()== getStatus();
+        return Status.READ.getValue() == getStatus();
     }
 
+    public boolean isReadStatusForUpdate() {
+        return Status.READ.getValue() == getStatus() || isTypeOutbox();
+    }
 
-    public boolean isContactMessage(){
-        return ContentType.CONTACT_MSG.getValue().equals( getContentType());
+    public boolean isContactMessage() {
+        return ContentType.CONTACT_MSG.getValue().equals(getContentType());
     }
 
-    public boolean isLocationMessage(){
-        return ContentType.LOCATION.getValue().equals( getContentType());
+    public boolean isLocationMessage() {
+        return ContentType.LOCATION.getValue().equals(getContentType());
     }
 
     public Map<String, String> getMetadata() {
@@ -556,7 +561,7 @@ public void setMetadata(Map<String, String> metadata) {
     }
 
     public boolean isGroupMessage() {
-        return ( this.groupId != null );
+        return (this.groupId != null);
     }
 
     public String getClientGroupId() {
@@ -567,6 +572,58 @@ public void setClientGroupId(String clientGroupId) {
         this.clientGroupId = clientGroupId;
     }
 
+    public String getMetaDataValueForKey(String key) {
+        return getMetadata() != null ? getMetadata().get(key) : null;
+    }
+
+    public boolean isUpdateMessage() {
+        return !Message.ContentType.HIDDEN.getValue().equals(contentType)
+                && !Message.MetaDataType.ARCHIVE.getValue().equals(getMetaDataValueForKey(Message.MetaDataType.KEY.getValue()))
+                && !isVideoNotificationMessage();
+
+    }
+
+    public boolean isVideoNotificationMessage() {
+        return ContentType.VIDEO_CALL_NOTIFICATION_MSG.getValue().equals(getContentType());
+    }
+
+    public boolean isVideoCallMessage() {
+        return ContentType.VIDEO_CALL_STATUS_MSG.getValue().equals(getContentType());
+    }
+
+    public boolean isVideoOrAudioCallMessage() {
+        String msgType = getMetaDataValueForKey(VideoCallNotificationHelper.MSG_TYPE);
+        return (VideoCallNotificationHelper.CALL_STARTED.equals(msgType)
+                || VideoCallNotificationHelper.CALL_REJECTED.equals(msgType)
+                || VideoCallNotificationHelper.CALL_CANCELED.equals(msgType)
+                || VideoCallNotificationHelper.CALL_ANSWERED.equals(msgType)
+                || VideoCallNotificationHelper.CALL_END.equals(msgType)
+                || VideoCallNotificationHelper.CALL_DIALED.equals(msgType)
+                || VideoCallNotificationHelper.CALL_ANSWERED.equals(msgType)
+                || VideoCallNotificationHelper.CALL_MISSED.equals(msgType));
+    }
+
+    public boolean isConsideredForCount() {
+        return (!Message.ContentType.HIDDEN.getValue().equals(getContentType()) &&
+                !ContentType.VIDEO_CALL_NOTIFICATION_MSG.getValue().equals(getContentType()) && !isReadStatus() && !isHidden());
+    }
+
+    public boolean isHidden() {
+        return GroupMessageMetaData.TRUE.getValue().equals(getMetaDataValueForKey(GroupMessageMetaData.HIDE_KEY.getValue())) || Message.ContentType.HIDDEN.getValue().equals(getContentType());
+    }
+
+    public void setHidden(boolean hidden) {
+        hidden = hidden;
+    }
+
+    public int isReplyMessage() {
+        return replyMessage;
+    }
+
+    public void setReplyMessage(int replyMessage) {
+        this.replyMessage = replyMessage;
+    }
+
     @Override
     public String toString() {
         return "Message{" +
@@ -643,8 +700,8 @@ public Short getValue() {
     public enum ContentType {
 
         DEFAULT(Short.valueOf("0")), ATTACHMENT(Short.valueOf("1")), LOCATION(Short.valueOf("2")),
-        TEXT_HTML(Short.valueOf("3")), PRICE(Short.valueOf("4")), TEXT_URL(Short.valueOf("5")),CONTACT_MSG(Short.valueOf("7")),AUDIO_MSG(Short.valueOf("8"))
-        ,VIDEO_MSG(Short.valueOf("9")),CHANNEL_CUSTOM_MESSAGE(Short.valueOf("10")), CUSTOM(Short.valueOf("101")),HIDDEN(Short.valueOf("11"));
+        TEXT_HTML(Short.valueOf("3")), PRICE(Short.valueOf("4")), TEXT_URL(Short.valueOf("5")), CONTACT_MSG(Short.valueOf("7")), AUDIO_MSG(Short.valueOf("8")), VIDEO_MSG(Short.valueOf("9")), CHANNEL_CUSTOM_MESSAGE(Short.valueOf("10")), CUSTOM(Short.valueOf("101")), HIDDEN(Short.valueOf("11")), VIDEO_CALL_NOTIFICATION_MSG(Short.valueOf("102")),
+        VIDEO_CALL_STATUS_MSG(Short.valueOf("103"));
         private Short value;
 
         ContentType(Short value) {
@@ -671,4 +728,51 @@ public Short getValue() {
         }
     }
 
+    public enum MetaDataType {
+        KEY("category"),
+        HIDDEN("HIDDEN"),
+        PUSHNOTIFICATION("PUSHNOTIFICATION"),
+        ARCHIVE("ARCHIVE"), AL_REPLY("AL_REPLY");
+        private String value;
+
+        MetaDataType(String value) {
+            this.value = value;
+        }
+
+        public String getValue() {
+            return value;
+        }
+    }
+
+    public enum GroupMessageMetaData {
+        KEY("show"),
+        HIDE_KEY("hide"),
+        FALSE("false"),
+        TRUE("true");
+        private String value;
+
+        GroupMessageMetaData(String value) {
+            this.value = value;
+        }
+
+        public String getValue() {
+            return value;
+        }
+    }
+
+    public enum ReplyMessage{
+        NON_HIDDEN(0),
+        REPLY_MESSAGE(1),
+        HIDE_MESSAGE(2);
+        private Integer value;
+
+        ReplyMessage(Integer value) {
+            this.value = value;
+        }
+
+        public Integer getValue() {
+            return value;
+        }
+    }
+
 }
\ No newline at end of file
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/MessageClientService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/MessageClientService.java
index a1e3dc02..bec855f6 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/MessageClientService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/MessageClientService.java
@@ -2,7 +2,6 @@
 
 import android.content.Context;
 import android.text.TextUtils;
-import android.util.Log;
 
 import com.applozic.mobicomkit.api.HttpRequestUtils;
 import com.applozic.mobicomkit.api.MobiComKitClientService;
@@ -21,6 +20,7 @@
 import com.applozic.mobicomkit.sync.SmsSyncRequest;
 import com.applozic.mobicomkit.sync.SyncMessageFeed;
 import com.applozic.mobicomkit.sync.SyncUserDetailsResponse;
+import com.applozic.mobicommons.commons.core.utils.Utils;
 import com.applozic.mobicommons.json.GsonUtils;
 import com.applozic.mobicommons.people.channel.Channel;
 import com.applozic.mobicommons.people.contact.Contact;
@@ -34,6 +34,8 @@
 import java.util.List;
 import java.util.UUID;
 
+;
+
 /**
  * Created by devashish on 26/12/14.
  */
@@ -57,21 +59,22 @@
     public static final String MESSAGE_THREAD_DELETE_URL = "/rest/ws/message/delete/conversation";
     public static final String USER_DETAILS_URL = "/rest/ws/user/detail";
     public static final String USER_DETAILS_LIST_URL = "/rest/ws/user/status";
-    public static final String PRODUCT_CONVERSATION_ID_URL ="/rest/ws/conversation/id";
+    public static final String PRODUCT_CONVERSATION_ID_URL = "/rest/ws/conversation/id";
     public static final String PRODUCT_TOPIC_ID_URL = "/rest/ws/conversation/topicId";
     public static final String ARGUMRNT_SAPERATOR = "&";
     public static final String UPDATE_READ_STATUS_FOR_SINGLE_MESSAGE_URL = "/rest/ws/message/read";
     public static final String MESSAGE_INFO_URL = "/rest/ws/message/info";
+    public static final String MESSAGE_BY_MESSAGE_KEYS_URL = "/rest/ws/message/detail";
 
     private static final String TAG = "MessageClientService";
     private Context context;
     private MessageDatabaseService messageDatabaseService;
     private HttpRequestUtils httpRequestUtils;
-    private BaseContactService baseContactService ;
+    private BaseContactService baseContactService;
 
     public MessageClientService(Context context) {
         super(context);
-        this.context = context;
+        this.context = context.getApplicationContext();
         this.messageDatabaseService = new MessageDatabaseService(context);
         this.httpRequestUtils = new HttpRequestUtils(context);
         this.baseContactService = new AppContactService(context);
@@ -129,7 +132,7 @@ public String getProductTopicIdUrl() {
         return getBaseUrl() + PRODUCT_TOPIC_ID_URL;
     }
 
-    public String getMessageInfoUrl(){
+    public String getMessageInfoUrl() {
         return getBaseUrl() + MESSAGE_INFO_URL;
     }
 
@@ -137,6 +140,10 @@ public String getSingleMessageReadUrl() {
         return getBaseUrl() + UPDATE_READ_STATUS_FOR_SINGLE_MESSAGE_URL;
     }
 
+    public String getMessageByMessageKeysUrl(){
+        return getBaseUrl() + MESSAGE_BY_MESSAGE_KEYS_URL;
+    }
+
     public void updateDeliveryStatus(String messageKeyString, String userId, String receiverNumber) {
         try {
             //Note: messageKeyString comes as null for the welcome message as it is inserted directly.
@@ -146,22 +153,22 @@ public void updateDeliveryStatus(String messageKeyString, String userId, String
             httpRequestUtils.getResponse(getMtextDeliveryUrl() + "?key=" + messageKeyString
                     + "&userId=" + userId, "text/plain", "text/plain");
         } catch (Exception ex) {
-            Log.e(TAG, "Exception while updating delivery report for MT message", ex);
+            Utils.printLog(context,TAG, "Exception while updating delivery report for MT message");
         }
     }
 
     public synchronized void syncPendingMessages(boolean broadcast) {
         List<Message> pendingMessages = messageDatabaseService.getPendingMessages();
-        Log.i(TAG, "Found " + pendingMessages.size() + " pending messages to sync.");
+        Utils.printLog(context,TAG, "Found " + pendingMessages.size() + " pending messages to sync.");
         for (Message message : pendingMessages) {
-            Log.i(TAG, "Syncing pending message: " + message);
+            Utils.printLog(context,TAG, "Syncing pending message: " + message);
             sendPendingMessageToServer(message, broadcast);
         }
     }
 
     public synchronized void syncDeleteMessages(boolean deleteMessage) {
         List<Message> pendingDeleteMessages = messageDatabaseService.getPendingDeleteMessages();
-        Log.i(TAG, "Found " + pendingDeleteMessages.size() + " pending messages for Delete.");
+        Utils.printLog(context,TAG, "Found " + pendingDeleteMessages.size() + " pending messages for Delete.");
         for (Message message : pendingDeleteMessages) {
             deletePendingMessages(message, deleteMessage);
         }
@@ -181,7 +188,7 @@ public void deletePendingMessages(Message message, boolean deleteMessage) {
         if (message.isSentToServer()) {
             response = httpRequestUtils.getResponse(getMessageDeleteUrl() + "?key=" + message.getKeyString() + contactNumberParameter, "text/plain", "text/plain");
         }
-        Log.i(TAG, "Delete response from server for pending message: " + response);
+        Utils.printLog(context,TAG, "Delete response from server for pending message: " + response);
         if ("success".equals(response)) {
             messageDatabaseService.deleteMessage(message, message.getContactIds());
         }
@@ -189,7 +196,7 @@ public void deletePendingMessages(Message message, boolean deleteMessage) {
     }
 
     public boolean syncMessagesWithServer(List<Message> messageList) {
-        Log.i(TAG, "Total messages to sync: " + messageList.size());
+        Utils.printLog(context,TAG, "Total messages to sync: " + messageList.size());
         List<Message> messages = new ArrayList<Message>(messageList);
         do {
             try {
@@ -204,7 +211,7 @@ public boolean syncMessagesWithServer(List<Message> messageList) {
                 }
 
                 String response = syncMessages(smsSyncRequest);
-                Log.i(TAG, "response from sync sms url::" + response);
+                Utils.printLog(context,TAG, "response from sync sms url::" + response);
                 String[] keyStrings = null;
                 if (!TextUtils.isEmpty(response) && !response.equals("error")) {
                     keyStrings = response.trim().split(",");
@@ -221,7 +228,7 @@ public boolean syncMessagesWithServer(List<Message> messageList) {
                 }
             } catch (Exception e) {
                 e.printStackTrace();
-                Log.e(TAG, "exception" + e);
+                Utils.printLog(context,TAG, "exception" + e);
                 return false;
             }
         } while (messages.size() > 0);
@@ -230,44 +237,48 @@ public boolean syncMessagesWithServer(List<Message> messageList) {
 
     public void sendPendingMessageToServer(Message message, boolean broadcast) {
 
-
-        if(message.isContactMessage()){
-            try {
-                this.processMessage(message);
-            }catch ( Exception e){
-                Log.e(TAG, "Exception while sending contact message.",e);
+        try {
+            if (message.isContactMessage()) {
+                try {
+                    this.processMessage(message);
+                } catch (Exception e) {
+                    Utils.printLog(context,TAG, "Exception while sending contact message.");
+                }
+                return;
             }
-            return;
-        }
 
-        if (message.hasAttachment()) {
-            return;
-        }
+            if (message.hasAttachment()) {
+                return;
+            }
 
-        MobiComUserPreference mobiComUserPreference = MobiComUserPreference.getInstance(context);
-        message.setDeviceKeyString(mobiComUserPreference.getDeviceKeyString());
-        message.setSuUserKeyString(mobiComUserPreference.getSuUserKeyString());
+            MobiComUserPreference mobiComUserPreference = MobiComUserPreference.getInstance(context);
+            message.setDeviceKeyString(mobiComUserPreference.getDeviceKeyString());
+            message.setSuUserKeyString(mobiComUserPreference.getSuUserKeyString());
 
-        String response = sendMessage(message);
+            String response = sendMessage(message);
 
-        if (TextUtils.isEmpty(response) || response.contains("<html>") || response.equals("error")) {
-            Log.w(TAG, "Error while sending pending messages.");
-            return;
-        }
+            if (TextUtils.isEmpty(response) || response.contains("<html>") || response.equals("error")) {
+                Utils.printLog(context,TAG, "Error while sending pending messages.");
+                return;
+            }
 
-        MessageResponse messageResponse = (MessageResponse) GsonUtils.getObjectFromJson(response, MessageResponse.class);
-        String keyString = messageResponse.getMessageKey();
-        String createdAt = messageResponse.getCreatedAtTime();
-        message.setSentMessageTimeAtServer(Long.parseLong(createdAt));
-        message.setKeyString(keyString);
+            MessageResponse messageResponse = (MessageResponse) GsonUtils.getObjectFromJson(response, MessageResponse.class);
+            String keyString = messageResponse.getMessageKey();
+            String createdAt = messageResponse.getCreatedAtTime();
+            message.setSentMessageTimeAtServer(Long.parseLong(createdAt));
+            message.setKeyString(keyString);
 
         /*recentMessageSentToServer.add(message);*/
 
-        if (broadcast) {
-            BroadcastService.sendMessageUpdateBroadcast(context, BroadcastService.INTENT_ACTIONS.MESSAGE_SYNC_ACK_FROM_SERVER.toString(), message);
+            if (broadcast) {
+                BroadcastService.sendMessageUpdateBroadcast(context, BroadcastService.INTENT_ACTIONS.MESSAGE_SYNC_ACK_FROM_SERVER.toString(), message);
+            }
+
+            messageDatabaseService.updateMessageSyncStatus(message, keyString);
+        } catch (Exception e) {
+            Utils.printLog(context,TAG, "Error while sending pending messages.");
         }
 
-        messageDatabaseService.updateMessageSyncStatus(message, keyString);
     }
 
     public void sendMessageToServer(Message message) throws Exception {
@@ -293,6 +304,7 @@ public void processMessage(Message message) throws Exception {
         Contact contact = null;
         Channel channel = null;
         boolean isBroadcastOneByOneGroupType = false;
+        boolean skipMessage = false;
         if (message.getGroupId() == null) {
             contact = baseContactService.getContactById(message.getContactIds());
         } else {
@@ -303,17 +315,23 @@ public void processMessage(Message message) throws Exception {
 
         List<String> fileKeys = new ArrayList<String>();
         String keyString = null;
-        if(!isBroadcastOneByOneGroupType){
+        if (!isBroadcastOneByOneGroupType) {
             keyString = UUID.randomUUID().toString();
             message.setKeyString(keyString);
             message.setSentToServer(false);
-        }else {
+        } else {
             message.setSentToServer(true);
         }
 
-        messageId = messageDatabaseService.createMessage(message);
+        if (Message.MetaDataType.HIDDEN.getValue().equals(message.getMetaDataValueForKey(Message.MetaDataType.KEY.getValue())) || Message.MetaDataType.PUSHNOTIFICATION.getValue().equals(message.getMetaDataValueForKey(Message.MetaDataType.KEY.getValue()))) {
+            skipMessage = true;
+        }
 
-        if (isBroadcast) {
+        if (!skipMessage) {
+            messageId = messageDatabaseService.createMessage(message);
+        }
+
+        if (isBroadcast && !skipMessage) {
             BroadcastService.sendMessageUpdateBroadcast(context, BroadcastService.INTENT_ACTIONS.SYNC_MESSAGE.toString(), message);
         }
         if (!isBroadcastOneByOneGroupType && message.isUploadRequired()) {
@@ -321,7 +339,10 @@ public void processMessage(Message message) throws Exception {
                 try {
                     String fileMetaResponse = new FileClientService(context).uploadBlobImage(filePath);
                     if (fileMetaResponse == null) {
-                        if( !message.isContactMessage() ){
+                        if (skipMessage) {
+                            return;
+                        }
+                        if (!message.isContactMessage()) {
                             messageDatabaseService.updateCanceledFlag(messageId, 1);
                         }
                         BroadcastService.sendMessageUpdateBroadcast(context, BroadcastService.INTENT_ACTIONS.UPLOAD_ATTACHMENT_FAILED.toString(), message);
@@ -334,17 +355,18 @@ public void processMessage(Message message) throws Exception {
                         message.setFileMetas(gson.fromJson(jsonObject.get(FILE_META), FileMeta.class));
                     }
                 } catch (Exception ex) {
-                    Log.e(TAG, "Error uploading file to server: " + filePath);
+                    Utils.printLog(context,TAG, "Error uploading file to server: " + filePath);
                   /*  recentMessageSentToServer.remove(message);*/
-                    if( !message.isContactMessage() ){
+                    if (!message.isContactMessage() && !skipMessage) {
                         messageDatabaseService.updateCanceledFlag(messageId, 1);
                     }
-
-                    BroadcastService.sendMessageUpdateBroadcast(context, BroadcastService.INTENT_ACTIONS.UPLOAD_ATTACHMENT_FAILED.toString(), message);
+                    if (!skipMessage) {
+                        BroadcastService.sendMessageUpdateBroadcast(context, BroadcastService.INTENT_ACTIONS.UPLOAD_ATTACHMENT_FAILED.toString(), message);
+                    }
                     return;
                 }
             }
-            if (messageId != -1) {
+            if (messageId != -1 && !skipMessage) {
                 messageDatabaseService.updateMessageFileMetas(messageId, message);
             }
         }
@@ -371,10 +393,10 @@ public void processMessage(Message message) throws Exception {
         newMessage.setSendToDevice(message.isSendToDevice());
         newMessage.setContentType(message.getContentType());
         newMessage.setConversationId(message.getConversationId());
-        if (message.getGroupId() != null ) {
+        if (message.getGroupId() != null) {
             newMessage.setGroupId(message.getGroupId());
         }
-        if(!TextUtils.isEmpty(message.getClientGroupId())){
+        if (!TextUtils.isEmpty(message.getClientGroupId())) {
             newMessage.setClientGroupId(message.getClientGroupId());
         }
 
@@ -387,9 +409,9 @@ public void processMessage(Message message) throws Exception {
         //Todo: set filePaths
 
         try {
-            if(!isBroadcastOneByOneGroupType) {
+            if (!isBroadcastOneByOneGroupType) {
                 String response = sendMessage(newMessage);
-                if (message.hasAttachment() && TextUtils.isEmpty(response) && !message.isContactMessage()) {
+                if (message.hasAttachment() && TextUtils.isEmpty(response) && !message.isContactMessage() && !skipMessage) {
                     messageDatabaseService.updateCanceledFlag(messageId, 1);
                     BroadcastService.sendMessageUpdateBroadcast(context, BroadcastService.INTENT_ACTIONS.UPLOAD_ATTACHMENT_FAILED.toString(), message);
                 }
@@ -401,7 +423,9 @@ public void processMessage(Message message) throws Exception {
                     message.setSentToServer(true);
                     message.setKeyString(keyString);
                 }
-                messageDatabaseService.updateMessage(messageId, message.getSentMessageTimeAtServer(), keyString, message.isSentToServer());
+                if (!skipMessage) {
+                    messageDatabaseService.updateMessage(messageId, message.getSentMessageTimeAtServer(), keyString, message.isSentToServer());
+                }
             } else {
                 message.setSentMessageTimeAtServer(message.getCreatedAtTime());
                 messageDatabaseService.updateMessage(messageId, message.getSentMessageTimeAtServer(), keyString, message.isSentToServer());
@@ -412,8 +436,9 @@ public void processMessage(Message message) throws Exception {
             } else {
                 //Todo: If message type is mtext, tell user that internet is not working, else send update with db id.
             }
-
-            BroadcastService.sendMessageUpdateBroadcast(context, BroadcastService.INTENT_ACTIONS.MESSAGE_SYNC_ACK_FROM_SERVER.toString(), message);
+            if (!skipMessage) {
+                BroadcastService.sendMessageUpdateBroadcast(context, BroadcastService.INTENT_ACTIONS.MESSAGE_SYNC_ACK_FROM_SERVER.toString(), message);
+            }
 
         } catch (Exception e) {
         }
@@ -429,11 +454,11 @@ public String syncMessages(SmsSyncRequest smsSyncRequest) throws Exception {
     }
 
     public String sendMessage(Message message) {
-        try{
+        try {
             String jsonFromObject = GsonUtils.getJsonFromObject(message, message.getClass());
-            Log.i(TAG, "Sending message to server: " + jsonFromObject);
+            Utils.printLog(context,TAG, "Sending message to server: " + jsonFromObject);
             return httpRequestUtils.postData(getSendMessageUrl(), "application/json;charset=utf-8", null, jsonFromObject);
-        }catch (Exception e){
+        } catch (Exception e) {
             return null;
         }
     }
@@ -444,7 +469,7 @@ public SyncMessageFeed getMessageFeed(String lastSyncTime) {
                 + "=" + lastSyncTime;
         try {
             String response = httpRequestUtils.getResponse(url, "application/json", "application/json");
-            Log.i(TAG, "Sync call response: " + response);
+            Utils.printLog(context,TAG, "Sync call response: " + response);
             return (SyncMessageFeed) GsonUtils.getObjectFromJson(response, SyncMessageFeed.class);
         } catch (Exception e) {
             // showAlert("Unable to Process request .Please Contact Support");
@@ -459,7 +484,7 @@ public void deleteConversationThreadFromServer(Contact contact) {
         try {
             String url = getMessageThreadDeleteUrl() + "?userId=" + contact.getContactIds();
             String response = httpRequestUtils.getResponse(url, "text/plain", "text/plain");
-            Log.i(TAG, "Delete messages response from server: " + response + contact.getContactIds());
+            Utils.printLog(context,TAG, "Delete messages response from server: " + response + contact.getContactIds());
         } catch (Exception e) {
             e.printStackTrace();
         }
@@ -472,12 +497,12 @@ public String syncDeleteConversationThreadFromServer(Contact contact, Channel ch
         try {
             if (contact != null && !TextUtils.isEmpty(contact.getContactIds())) {
                 parameterString = "?userId=" + contact.getContactIds();
-            } else if(channel != null){
+            } else if (channel != null) {
                 parameterString = "?groupId=" + channel.getKey();
             }
             String url = getMessageThreadDeleteUrl() + parameterString;
             response = httpRequestUtils.getResponse(url, "text/plain", "text/plain");
-            Log.i(TAG, "Delete messages response from server: " + response);
+            Utils.printLog(context,TAG, "Delete messages response from server: " + response);
         } catch (Exception e) {
             e.printStackTrace();
         }
@@ -496,31 +521,49 @@ public String deleteMessage(Message message, Contact contact) {
         }
         if (message.isSentToServer()) {
             response = httpRequestUtils.getResponse(getMessageDeleteUrl() + "?key=" + message.getKeyString() + contactNumberParameter, "text/plain", "text/plain");
-            Log.i(TAG, "delete response is " + response);
+            Utils.printLog(context,TAG, "delete response is " + response);
         }
         return response;
     }
 
-    public void updateReadStatus(Contact contact,Channel channel) {
+
+    public String getMessageByMessageKeys(List<String> messageKeys){
+        if(messageKeys != null && messageKeys.size()>0){
+            String messageKeyUrlBuild="";
+            for (String messageKey : messageKeys) {
+                messageKeyUrlBuild += "keys" + "=" + messageKey+"&";
+            }
+            String  response = httpRequestUtils.getResponse(getMessageByMessageKeysUrl() +"?"+ messageKeyUrlBuild, "application/json", "application/json");
+            Utils.printLog(context,TAG, "Message keys response is :" + response);
+            if (TextUtils.isEmpty(response) || response.contains("<html>")) {
+                return null;
+            }
+            return response;
+        }
+        return null;
+    }
+
+
+    public void updateReadStatus(Contact contact, Channel channel) {
         String contactNumberParameter = "";
         String response = "";
         if (contact != null && !TextUtils.isEmpty(contact.getContactIds())) {
             contactNumberParameter = "?userId=" + contact.getContactIds();
-        } else if(channel != null){
+        } else if (channel != null) {
             contactNumberParameter = "?groupId=" + channel.getKey();
         }
         response = httpRequestUtils.getResponse(getUpdateReadStatusUrl() + contactNumberParameter, "text/plain", "text/plain");
-        Log.i(TAG, "Read status response is " + response);
+        Utils.printLog(context,TAG, "Read status response is " + response);
     }
 
-    public void updateReadStatusForSingleMessage(String  pairedmessagekey) {
+    public void updateReadStatusForSingleMessage(String pairedmessagekey) {
         String singleReadMessageParm = "";
         String response = "";
         if (!TextUtils.isEmpty(pairedmessagekey)) {
             try {
                 singleReadMessageParm = "?key=" + pairedmessagekey;
                 response = httpRequestUtils.getResponse(getSingleMessageReadUrl() + singleReadMessageParm, "text/plain", "text/plain");
-                Log.i(TAG, "Read status response for single message is " + response);
+                Utils.printLog(context,TAG, "Read status response for single message is " + response);
             } catch (Exception e) {
                 e.printStackTrace();
             }
@@ -528,14 +571,18 @@ public void updateReadStatusForSingleMessage(String  pairedmessagekey) {
 
     }
 
-    public String getMessages(Contact contact, Channel channel, Long startTime, Long endTime,Integer conversationId) throws UnsupportedEncodingException {
+    public String getMessages(Contact contact, Channel channel, Long startTime, Long endTime, Integer conversationId) throws UnsupportedEncodingException {
+        return getMessages(contact, channel, startTime, endTime, conversationId, false);
+    }
+
+    public String getMessages(Contact contact, Channel channel, Long startTime, Long endTime, Integer conversationId, boolean isSkipRead) throws UnsupportedEncodingException {
         String contactNumber = (contact != null ? contact.getFormattedContactNumber() : "");
         String params = "";
         if (contact != null || channel != null) {
-            params = "startIndex=0&pageSize=50" + "&";
+            params = isSkipRead ? "skipRead=" + isSkipRead + "&startIndex=0&pageSize=50" + "&" : "startIndex=0&pageSize=50&";
         }
-        if(contact == null && channel == null){
-            params =  "startIndex=0&mainPageSize=60" + "&";
+        if (contact == null && channel == null) {
+            params = "startIndex=0&mainPageSize=60" + "&";
         }
         if (contact != null && !TextUtils.isEmpty(contact.getUserId())) {
             params += "userId=" + contact.getUserId() + "&";
@@ -544,14 +591,16 @@ public String getMessages(Contact contact, Channel channel, Long startTime, Long
         params += (endTime != null && endTime.intValue() != 0) ? "endTime=" + endTime + "&" : "";
         params += (channel != null && channel.getKey() != null) ? "groupId=" + channel.getKey() + "&" : "";
 
-        if(BroadcastService.isContextBasedChatEnabled()){
-            if(conversationId != null && conversationId != 0){
-                params += "conversationId="+conversationId+"&";
+        if (BroadcastService.isContextBasedChatEnabled()) {
+            if (conversationId != null && conversationId != 0) {
+                params += "conversationId=" + conversationId + "&";
             }
-            if(endTime != null && endTime.intValue() == 0 || endTime == null){
+            if (endTime != null && endTime.intValue() == 0 || endTime == null) {
                 params += "conversationReq=true";
             }
         }
+        params = params + "&" + "deletedGroupIncluded=true";
+
         return httpRequestUtils.getResponse(getMessageListUrl() + "?" + params
                 , "application/json", "application/json");
     }
@@ -572,7 +621,7 @@ public SyncUserDetailsResponse getUserDetailsList(String lastSeenAt) {
             if (response == null || TextUtils.isEmpty(response) || response.equals("UnAuthorized Access")) {
                 return null;
             }
-            Log.i(TAG,"Sync UserDetails response is:"+response);
+            Utils.printLog(context,TAG, "Sync UserDetails response is:" + response);
             SyncUserDetailsResponse userDetails = (SyncUserDetailsResponse) GsonUtils.getObjectFromJson(response, SyncUserDetailsResponse.class);
             return userDetails;
         } catch (Exception e) {
@@ -583,7 +632,7 @@ public SyncUserDetailsResponse getUserDetailsList(String lastSeenAt) {
 
     public String[] getConnectedUsers() {
         try {
-            String response = getMessages(null, null, null, null,null);
+            String response = getMessages(null, null, null, null, null);
             if (response == null || TextUtils.isEmpty(response) || response.equals("UnAuthorized Access") || !response.contains("{")) {
                 return null;
             }
@@ -599,11 +648,15 @@ public SyncUserDetailsResponse getUserDetailsList(String lastSeenAt) {
 
     public void processUserStatus(Contact contact) {
         if (contact != null && contact.getContactIds() != null) {
-            processUserStatus(contact.getUserId());
+            processUserStatus(contact.getUserId(),false);
         }
     }
 
-    public void processUserStatus(String userId) {
+    public void processUserStatus(String userId){
+        processUserStatus(userId,false);
+    }
+
+    public void processUserStatus(String userId,boolean isProfileImageUpdated) {
         try {
             String contactNumberParameter = "";
             String response = "";
@@ -615,7 +668,7 @@ public void processUserStatus(String userId) {
             }
 
             response = httpRequestUtils.getResponse(getUserDetailUrl() + contactNumberParameter, "application/json", "application/json");
-            Log.i(TAG, "User details response is " + response);
+            Utils.printLog(context,TAG, "User details response is " + response);
             if (TextUtils.isEmpty(response) || response.contains("<html>")) {
                 return;
             }
@@ -632,16 +685,21 @@ public void processUserStatus(String userId) {
                     contact.setLastSeenAt(userDetail.getLastSeenAtTime());
                     contact.setImageURL(userDetail.getImageLink());
                     contact.setStatus(userDetail.getStatusMessage());
+                    contact.setUserTypeId(userDetail.getUserTypeId());
+                    contact.setDeletedAtTime(userDetail.getDeletedAtTime());
                     contact.setUnreadCount(0);
                     baseContactService.upsert(contact);
                 }
-                BroadcastService.sendUpdateLastSeenAtTimeBroadcast(context,BroadcastService.INTENT_ACTIONS.UPDATE_LAST_SEEN_AT_TIME.toString(), userId);
+                if(isProfileImageUpdated){
+                    BroadcastService.sendUpdateUserDetailBroadcast(context,BroadcastService.INTENT_ACTIONS.UPDATE_USER_DETAIL.toString(), userId);
+                }else{
+                    BroadcastService.sendUpdateLastSeenAtTimeBroadcast(context,BroadcastService.INTENT_ACTIONS.UPDATE_LAST_SEEN_AT_TIME.toString(), userId);
+                }
             }
         } catch (Exception e) {
             e.printStackTrace();
         }
     }
-
     public String getTopicId(Integer conversationId) {
         try {
             String topicId = null;
@@ -663,7 +721,7 @@ public String getTopicId(Integer conversationId) {
     }
 
 
-    public MessageInfoResponse getMessageInfoList(String messageKey){
+    public MessageInfoResponse getMessageInfoList(String messageKey) {
 
         String url = getMessageInfoUrl() + "?key=" + messageKey;
         String response = httpRequestUtils.getResponse(url, "application/json", "application/json");
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/MessageInfo.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/MessageInfo.java
index 707c6ba2..b05ac530 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/MessageInfo.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/MessageInfo.java
@@ -7,7 +7,7 @@
 import com.applozic.mobicommons.json.JsonMarker;
 
 
-public class MessageInfo extends JsonMarker{
+public class MessageInfo extends JsonMarker {
 
 
     String userId;
@@ -47,8 +47,8 @@ public void setStatus(Short status) {
         this.status = status;
     }
 
-    public boolean isRead(){
-        return readAtTime!=null;
+    public boolean isRead() {
+        return readAtTime != null;
     }
 
 
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/MessageInfoResponse.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/MessageInfoResponse.java
index 697ab0ca..0cf8dbe5 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/MessageInfoResponse.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/MessageInfoResponse.java
@@ -40,17 +40,17 @@ public void setMessageInfoList(List<MessageInfo> messageInfoList) {
 
     public List<MessageInfo> getReadByUserList() {
 
-            if (this.messageInfoList == null) {
-                return null;
-            }
-            List<MessageInfo> readList = new ArrayList<MessageInfo>();
+        if (this.messageInfoList == null) {
+            return null;
+        }
+        List<MessageInfo> readList = new ArrayList<MessageInfo>();
 
-            for (MessageInfo messageInfo : messageInfoList) {
-                if (messageInfo.isRead()) {
-                    readList.add(messageInfo);
-                }
+        for (MessageInfo messageInfo : messageInfoList) {
+            if (messageInfo.isRead()) {
+                readList.add(messageInfo);
             }
-            return readList;
         }
+        return readList;
+    }
 
 }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/MessageIntentService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/MessageIntentService.java
index 1da66784..2dc6c078 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/MessageIntentService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/MessageIntentService.java
@@ -21,6 +21,9 @@ public MessageIntentService() {
 
     @Override
     protected void onHandleIntent(Intent intent) {
+        if (intent == null) {
+            return;
+        }
         messageClientService = new MessageClientService(MessageIntentService.this);
         final Message message = (Message) GsonUtils.getObjectFromJson(intent.getStringExtra(MobiComKitConstants.MESSAGE_JSON_INTENT), Message.class);
         Thread thread = new Thread(new MessageSender(message));
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/MobiComConversationService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/MobiComConversationService.java
index d4298be9..d5116e8f 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/MobiComConversationService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/MobiComConversationService.java
@@ -4,9 +4,10 @@
 import android.content.Intent;
 import android.content.SharedPreferences;
 import android.os.Process;
+import android.support.v4.content.LocalBroadcastManager;
 import android.text.TextUtils;
-import android.util.Log;
 
+import com.applozic.mobicomkit.ApplozicClient;
 import com.applozic.mobicomkit.api.MobiComKitClientService;
 import com.applozic.mobicomkit.api.MobiComKitConstants;
 import com.applozic.mobicomkit.api.account.user.MobiComUserPreference;
@@ -21,6 +22,7 @@
 import com.applozic.mobicomkit.contact.BaseContactService;
 import com.applozic.mobicomkit.feed.ChannelFeed;
 import com.applozic.mobicomkit.sync.SyncUserDetailsResponse;
+import com.applozic.mobicommons.commons.core.utils.Utils;
 import com.applozic.mobicommons.file.FileUtils;
 import com.applozic.mobicommons.json.AnnotationExclusionStrategy;
 import com.applozic.mobicommons.json.ArrayAdapterFactory;
@@ -32,6 +34,7 @@
 import com.google.gson.GsonBuilder;
 import com.google.gson.JsonParser;
 
+import org.json.JSONException;
 import org.json.JSONObject;
 
 import java.io.File;
@@ -71,26 +74,30 @@ public void sendMessage(Message message, Class messageIntentClass) {
     }
 
     public List<Message> getLatestMessagesGroupByPeople() {
-        return getLatestMessagesGroupByPeople(null);
+        return getLatestMessagesGroupByPeople(null, null);
     }
 
-    public synchronized List<Message> getLatestMessagesGroupByPeople(Long createdAt) {
+    public synchronized List<Message> getLatestMessagesGroupByPeople(Long createdAt, String searchString) {
         boolean emptyTable = messageDatabaseService.isMessageTableEmpty();
 
-        if (emptyTable || createdAt != null  && createdAt != 0) {
-            getMessages(null, createdAt, null, null,null);
+        if (emptyTable || createdAt != null && createdAt != 0) {
+            getMessages(null, createdAt, null, null, null, false);
         }
 
-        return  messageDatabaseService.getMessages(createdAt);
+        return messageDatabaseService.getMessages(createdAt, searchString);
     }
 
     public List<Message> getMessages(String userId, Long startTime, Long endTime) {
-        return getMessages(startTime, endTime, new Contact(userId), null,null);
+        return getMessages(startTime, endTime, new Contact(userId), null, null, false);
     }
 
     public synchronized List<Message> getMessages(Long startTime, Long endTime, Contact contact, Channel channel, Integer conversationId) {
+        return getMessages(startTime, endTime, contact, channel, conversationId, false);
+    }
+
+    public synchronized List<Message> getMessages(Long startTime, Long endTime, Contact contact, Channel channel, Integer conversationId, boolean isSkipRead) {
         List<Message> messageList = new ArrayList<Message>();
-        List<Message> cachedMessageList = messageDatabaseService.getMessages(startTime, endTime, contact, channel,conversationId);
+        List<Message> cachedMessageList = messageDatabaseService.getMessages(startTime, endTime, contact, channel, conversationId);
         boolean isServerCallNotRequired = false;
 
         if (channel != null) {
@@ -103,14 +110,14 @@ public void sendMessage(Message message, Class messageIntentClass) {
         if (isServerCallNotRequired && (!cachedMessageList.isEmpty() &&
                 (cachedMessageList.size() > 1 || wasServerCallDoneBefore(contact, channel, conversationId))
                 || (contact == null && channel == null && cachedMessageList.isEmpty() && wasServerCallDoneBefore(contact, channel, conversationId)))) {
-            Log.i(TAG, "cachedMessageList size is : " + cachedMessageList.size());
+            Utils.printLog(context,TAG, "cachedMessageList size is : " + cachedMessageList.size());
             return cachedMessageList;
         }
 
         String data;
         try {
-            data = messageClientService.getMessages(contact, channel, startTime, endTime,conversationId);
-            Log.i(TAG, "Received response from server for Messages: " + data);
+            data = messageClientService.getMessages(contact, channel, startTime, endTime, conversationId, isSkipRead);
+            Utils.printLog(context,TAG, "Received response from server for Messages: " + data);
         } catch (Exception ex) {
             ex.printStackTrace();
             return cachedMessageList;
@@ -132,7 +139,7 @@ public void sendMessage(Message message, Class messageIntentClass) {
             JsonParser parser = new JsonParser();
             JSONObject jsonObject = new JSONObject(data);
             String channelFeedResponse = "";
-            String conversationPxyResponse="";
+            String conversationPxyResponse = "";
             String element = parser.parse(data).getAsJsonObject().get("message").toString();
             String userDetailsElement = parser.parse(data).getAsJsonObject().get("userDetails").toString();
 
@@ -144,15 +151,15 @@ public void sendMessage(Message message, Class messageIntentClass) {
             if (jsonObject.has("groupFeeds")) {
                 channelFeedResponse = parser.parse(data).getAsJsonObject().get("groupFeeds").toString();
                 ChannelFeed[] channelFeeds = (ChannelFeed[]) GsonUtils.getObjectFromJson(channelFeedResponse, ChannelFeed[].class);
-                ChannelService.getInstance(context).processChannelFeedList(channelFeeds,false);
-                if(channel != null && !isServerCallNotRequired ){
-                    BroadcastService.sendUpdateTitleAndSubtitle(context, BroadcastService.INTENT_ACTIONS.UPDATE_TITLE_SUBTITLE.toString());
+                ChannelService.getInstance(context).processChannelFeedList(channelFeeds, false);
+                if (channel != null && !isServerCallNotRequired) {
+                    BroadcastService.sendUpdate(context, BroadcastService.INTENT_ACTIONS.UPDATE_TITLE_SUBTITLE.toString());
                 }
             }
             if (jsonObject.has("conversationPxys")) {
                 conversationPxyResponse = parser.parse(data).getAsJsonObject().get("conversationPxys").toString();
                 Conversation[] conversationPxy = (Conversation[]) GsonUtils.getObjectFromJson(conversationPxyResponse, Conversation[].class);
-                ConversationService.getInstance(context).processConversationArray(conversationPxy,channel,contact);
+                ConversationService.getInstance(context).processConversationArray(conversationPxy, channel, contact);
             }
             Message[] messages = gson.fromJson(element, Message[].class);
             MobiComUserPreference userPreferences = MobiComUserPreference.getInstance(context);
@@ -161,7 +168,7 @@ public void sendMessage(Message message, Class messageIntentClass) {
 
             if (messages != null && messages.length > 0 && cachedMessageList.size() > 0 && cachedMessageList.get(0).isLocalMessage()) {
                 if (cachedMessageList.get(0).equals(messages[0])) {
-                    Log.i(TAG, "Both messages are same.");
+                    Utils.printLog(context,TAG, "Both messages are same.");
                     deleteMessage(cachedMessageList.get(0));
                 }
             }
@@ -174,30 +181,40 @@ public void sendMessage(Message message, Class messageIntentClass) {
                     if (message.getTo() == null) {
                         continue;
                     }
-                    /*if(connectedUserIds != null && connectedUserIds.length>0){
-                        for (String userId : connectedUserIds) {
-                            if (message.getTo().equals(userId)) {
-                                Contact connectedContact = new Contact();
-                                connectedContact.setUserId(userId);
-                                connectedContact.setConnected(true);
-                                connectedContact.setContactNumber(userId);
-                                baseContactService.upsert(connectedContact);
-                            }
-                        }
-                    }*/
 
                     if (message.hasAttachment() && !(message.getContentType() == Message.ContentType.TEXT_URL.getValue())) {
                         setFilePathifExist(message);
                     }
-                    if(message.getContentType()== Message.ContentType.CONTACT_MSG.getValue()){
+                    if (message.getContentType() == Message.ContentType.CONTACT_MSG.getValue()) {
                         FileClientService fileClientService = new FileClientService(context);
                         fileClientService.loadContactsvCard(message);
                     }
-                    messageList.add(message);
-                    messageDatabaseService.createMessage(message);
+                    if (Message.MetaDataType.HIDDEN.getValue().equals(message.getMetaDataValueForKey(Message.MetaDataType.KEY.getValue())) || Message.MetaDataType.PUSHNOTIFICATION.getValue().equals(message.getMetaDataValueForKey(Message.MetaDataType.KEY.getValue()))) {
+                        continue;
+                    }
+                    if (messageDatabaseService.isMessagePresent(message.getKeyString(), Message.ReplyMessage.HIDE_MESSAGE.getValue())) {
+                        messageDatabaseService.updateMessageReplyType(message.getKeyString(), Message.ReplyMessage.NON_HIDDEN.getValue());
+                    } else {
+                        messageDatabaseService.createMessage(message);
+                    }
+                    if (contact == null && channel == null) {
+                        if (message.isHidden()) {
+                            if (message.getGroupId() != null) {
+                                Channel newChannel = ChannelService.getInstance(context).getChannelByChannelKey(message.getGroupId());
+                                if (newChannel != null) {
+                                    getMessages(null, null, null, newChannel, null, true);
+                                }
+                            } else {
+                                getMessages(null, null, new Contact(message.getContactIds()), null, null, true);
+                            }
+                        }
+                    }
                 }
             }
-
+            if (contact == null && channel == null) {
+                Intent intent = new Intent(MobiComKitConstants.APPLOZIC_UNREAD_COUNT);
+                LocalBroadcastManager.getInstance(context).sendBroadcast(intent);
+            }
         } catch (Exception e) {
             e.printStackTrace();
         }
@@ -212,7 +229,43 @@ public int compare(Message lhs, Message rhs) {
             }
         });*/
 
-        return messageDatabaseService.getMessages(startTime, endTime, contact, channel,conversationId);
+        List<Message> finalMessageList = messageDatabaseService.getMessages(startTime, endTime, contact, channel, conversationId);
+        List<String> messageKeys = new ArrayList<>();
+        for (Message msg : finalMessageList) {
+            if (msg.getTo() == null) {
+                continue;
+            }
+            if (Message.MetaDataType.HIDDEN.getValue().equals(msg.getMetaDataValueForKey(Message.MetaDataType.KEY.getValue())) || Message.MetaDataType.PUSHNOTIFICATION.getValue().equals(msg.getMetaDataValueForKey(Message.MetaDataType.KEY.getValue()))) {
+                continue;
+            }
+            if (msg.getMetadata() != null && msg.getMetaDataValueForKey(Message.MetaDataType.AL_REPLY.getValue()) != null && !messageDatabaseService.isMessagePresent(msg.getMetaDataValueForKey(Message.MetaDataType.AL_REPLY.getValue()))) {
+                messageKeys.add(msg.getMetaDataValueForKey(Message.MetaDataType.AL_REPLY.getValue()));
+            }
+        }
+        if (messageKeys != null && messageKeys.size() > 0) {
+            Message[] replyMessageList = getMessageListByKeyList(messageKeys);
+            if (replyMessageList != null) {
+                for (Message replyMessage : replyMessageList) {
+                    if (replyMessage.getTo() == null) {
+                        continue;
+                    }
+                    if (Message.MetaDataType.HIDDEN.getValue().equals(replyMessage.getMetaDataValueForKey(Message.MetaDataType.KEY.getValue())) || Message.MetaDataType.PUSHNOTIFICATION.getValue().equals(replyMessage.getMetaDataValueForKey(Message.MetaDataType.KEY.getValue()))) {
+                        continue;
+                    }
+                    if (replyMessage.hasAttachment() && !(replyMessage.getContentType() == Message.ContentType.TEXT_URL.getValue())) {
+                        setFilePathifExist(replyMessage);
+                    }
+                    if (replyMessage.getContentType() == Message.ContentType.CONTACT_MSG.getValue()) {
+                        FileClientService fileClientService = new FileClientService(context);
+                        fileClientService.loadContactsvCard(replyMessage);
+                    }
+                    replyMessage.setReplyMessage(Message.ReplyMessage.HIDE_MESSAGE.getValue());
+                    messageDatabaseService.createMessage(replyMessage);
+                }
+            }
+        }
+
+        return finalMessageList;
     }
 
     private void processUserDetails(SyncUserDetailsResponse userDetailsResponse) {
@@ -226,12 +279,14 @@ private void processUserDetails(SyncUserDetailsResponse userDetailsResponse) {
             contact.setConnected(userDetail.isConnected());
             contact.setFullName(userDetail.getDisplayName());
             contact.setLastSeenAt(userDetail.getLastSeenAtTime());
-            if(userDetail.getUnreadCount() != null){
+            if (userDetail.getUnreadCount() != null) {
                 contact.setUnreadCount(userDetail.getUnreadCount());
             }
-            if(!TextUtils.isEmpty(userDetail.getImageLink())){
+            if (!TextUtils.isEmpty(userDetail.getImageLink())) {
                 contact.setImageURL(userDetail.getImageLink());
             }
+            contact.setUserTypeId(userDetail.getUserTypeId());
+            contact.setDeletedAtTime(userDetail.getDeletedAtTime());
             if (newContact != null) {
                 if (newContact.isConnected() != contact.isConnected()) {
                     BroadcastService.sendUpdateLastSeenAtTimeBroadcast(context, BroadcastService.INTENT_ACTIONS.UPDATE_LAST_SEEN_AT_TIME.toString(), contact.getContactIds());
@@ -242,30 +297,56 @@ private void processUserDetails(SyncUserDetailsResponse userDetailsResponse) {
         MobiComUserPreference.getInstance(context).setLastSeenAtSyncTime(userDetailsResponse.getGeneratedAt());
     }
 
+
+    public Message[] getMessageListByKeyList(List<String> messageKeyList) {
+        String response = messageClientService.getMessageByMessageKeys(messageKeyList);
+        if (!TextUtils.isEmpty(response)) {
+            JsonParser parser = new JsonParser();
+            JSONObject jsonObject;
+            try {
+                jsonObject = new JSONObject(response);
+                String status = null;
+                if (jsonObject.has("status")) {
+                    status = jsonObject.getString("status");
+                }
+                if (!TextUtils.isEmpty(status) && "success".equals(status)) {
+                    String responseString = jsonObject.getString("response");
+                    String messageResponse = parser.parse(responseString).getAsJsonObject().get("message").toString();
+                    if (!TextUtils.isEmpty(messageResponse)) {
+                        return (Message[]) GsonUtils.getObjectFromJson(messageResponse, Message[].class);
+                    }
+                }
+            } catch (JSONException e) {
+                e.printStackTrace();
+            }
+        }
+        return null;
+    }
+
     private boolean wasServerCallDoneBefore(Contact contact, Channel channel, Integer conversationId) {
-        if(contact == null && channel == null ){
+        if (contact == null && channel == null) {
             return false;
         }
         return sharedPreferences.getBoolean(getServerSyncCallKey(contact, channel, conversationId), false);
     }
 
     private void updateServerCallDoneStatus(Contact contact, Channel channel, Integer conversationId) {
-        if (contact == null && channel == null){
+        if (contact == null && channel == null) {
             return;
         }
-        Log.i(TAG, "updating server call to true");
+        Utils.printLog(context,TAG, "updating server call to true");
         sharedPreferences.edit().putBoolean(getServerSyncCallKey(contact, channel, conversationId), true).commit();
     }
 
     public String getServerSyncCallKey(Contact contact, Channel channel, Integer conversationId) {
         return SERVER_SYNC.replace("[CONVERSATION]", conversationId != null ? String.valueOf(conversationId) : "")
                 .replace("[CONTACT]", contact != null ? contact.getContactIds() : "")
-                .replace("[CHANNEL]", channel != null ? String.valueOf(channel.getKey()): "");
+                .replace("[CHANNEL]", channel != null ? String.valueOf(channel.getKey()) : "");
     }
 
-    private void setFilePathifExist(Message message) {
+    public void setFilePathifExist(Message message) {
         FileMeta fileMeta = message.getFileMetas();
-        File file = FileClientService.getFilePath(fileMeta.getBlobKeyString() + "." + FileUtils.getFileFormat(fileMeta.getName()), context, fileMeta.getContentType());
+        File file = FileClientService.getFilePath(FileUtils.getName(fileMeta.getName()) + message.getCreatedAtTime() + "." + FileUtils.getFileFormat(fileMeta.getName()), context.getApplicationContext(), fileMeta.getContentType());
         if (file.exists()) {
             ArrayList<String> arrayList = new ArrayList<String>();
             arrayList.add(file.getAbsolutePath());
@@ -302,6 +383,10 @@ public void deleteConversationFromDevice(String contactNumber) {
         messageDatabaseService.deleteConversation(contactNumber);
     }
 
+    public void deleteChannelConversationFromDevice(Integer channelKey) {
+        messageDatabaseService.deleteChannelConversation(channelKey);
+    }
+
     public void deleteAndBroadCast(final Contact contact, boolean deleteFromServer) {
         deleteConversationFromDevice(contact.getContactIds());
         if (deleteFromServer) {
@@ -317,16 +402,16 @@ public void run() {
         BroadcastService.sendConversationDeleteBroadcast(context, BroadcastService.INTENT_ACTIONS.DELETE_CONVERSATION.toString(), contact.getContactIds(), 0, "success");
     }
 
-    public String deleteSync(final Contact contact, final Channel channel,Integer conversationId) {
+    public String deleteSync(final Contact contact, final Channel channel, Integer conversationId) {
         String response = "";
-        if(contact != null || channel != null){
+        if (contact != null || channel != null) {
             response = messageClientService.syncDeleteConversationThreadFromServer(contact, channel);
         }
 
-        if (!TextUtils.isEmpty(response) && "success".equals(response)){
+        if (!TextUtils.isEmpty(response) && "success".equals(response)) {
             if (contact != null) {
                 messageDatabaseService.deleteConversation(contact.getContactIds());
-                if(conversationId != null && conversationId != 0){
+                if (conversationId != null && conversationId != 0) {
                     conversationService.deleteConversation(contact.getContactIds());
                 }
             } else {
@@ -344,22 +429,14 @@ public String deleteMessageFromDevice(String keyString, String contactNumber) {
     }
 
     public synchronized void processLastSeenAtStatus() {
-        Thread thread = new Thread(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    SyncUserDetailsResponse userDetailsResponse = messageClientService.getUserDetailsList(MobiComUserPreference.getInstance(context).getLastSeenAtSyncTime());
-                    if (userDetailsResponse != null && userDetailsResponse.getResponse() != null && "success".equals(userDetailsResponse.getStatus())) {
-                        processUserDetails(userDetailsResponse);
-                    }
-                } catch (Exception e) {
-                    e.printStackTrace();
-                }
+        try {
+            SyncUserDetailsResponse userDetailsResponse = messageClientService.getUserDetailsList(MobiComUserPreference.getInstance(context).getLastSeenAtSyncTime());
+            if (userDetailsResponse != null && userDetailsResponse.getResponse() != null && "success".equals(userDetailsResponse.getStatus())) {
+                processUserDetails(userDetailsResponse);
             }
-        });
-        thread.setPriority(Process.THREAD_PRIORITY_BACKGROUND);
-        thread.start();
-
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
     }
 
     public void processUserDetails(UserDetail[] userDetails) {
@@ -373,14 +450,16 @@ public void processUserDetails(UserDetail[] userDetails) {
                 contact.setLastSeenAt(userDetail.getLastSeenAtTime());
                 contact.setStatus(userDetail.getStatusMessage());
                 contact.setUnreadCount(userDetail.getUnreadCount());
+                contact.setUserTypeId(userDetail.getUserTypeId());
                 contact.setImageURL(userDetail.getImageLink());
+                contact.setDeletedAtTime(userDetail.getDeletedAtTime());
                 baseContactService.upsert(contact);
             }
         }
     }
 
-    public String getConversationIdString(Integer conversationId){
-        return BroadcastService.isContextBasedChatEnabled() && conversationId != null && conversationId != 0 ? "_"+conversationId :"";
+    public String getConversationIdString(Integer conversationId) {
+        return BroadcastService.isContextBasedChatEnabled() && conversationId != null && conversationId != 0 ? "_" + conversationId : "";
     }
 
     public void read(Contact contact, Channel channel) {
@@ -396,12 +475,12 @@ public void read(Contact contact, Channel channel) {
                 messageDatabaseService.updateReadStatusForChannel(String.valueOf(newChannel.getKey()));
             }
 
-            Intent intent =  new Intent(context, ConversationReadService.class);
-            intent.putExtra(ConversationReadService.CONTACT,contact);
-            intent.putExtra(ConversationReadService.CHANNEL,channel);
+            Intent intent = new Intent(context, ConversationReadService.class);
+            intent.putExtra(ConversationReadService.CONTACT, contact);
+            intent.putExtra(ConversationReadService.CHANNEL, channel);
             intent.putExtra(ConversationReadService.UNREAD_COUNT, unreadCount);
             context.startService(intent);
-        } catch (Exception e){
+        } catch (Exception e) {
         }
     }
 
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/MobiComMessageService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/MobiComMessageService.java
index e131ba29..ddc41869 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/MobiComMessageService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/MobiComMessageService.java
@@ -4,7 +4,7 @@
 import android.content.Intent;
 import android.net.Uri;
 import android.support.v4.content.LocalBroadcastManager;
-import android.util.Log;
+import android.text.TextUtils;
 import android.widget.Toast;
 
 import com.applozic.mobicomkit.ApplozicClient;
@@ -15,6 +15,7 @@
 import com.applozic.mobicomkit.api.attachment.FileClientService;
 import com.applozic.mobicomkit.api.conversation.database.MessageDatabaseService;
 import com.applozic.mobicomkit.api.conversation.selfdestruct.DisappearingMessageTask;
+import com.applozic.mobicomkit.api.notification.VideoCallNotificationHelper;
 import com.applozic.mobicomkit.broadcast.BroadcastService;
 import com.applozic.mobicomkit.channel.service.ChannelService;
 import com.applozic.mobicomkit.contact.AppContactService;
@@ -23,6 +24,7 @@
 
 import com.applozic.mobicommons.commons.core.utils.Support;
 import com.applozic.mobicommons.commons.core.utils.Utils;
+import com.applozic.mobicommons.people.channel.Channel;
 import com.applozic.mobicommons.people.contact.Contact;
 import com.applozic.mobicommons.personalization.PersonalizedMessage;
 
@@ -30,6 +32,7 @@
 import org.json.JSONObject;
 
 import java.io.UnsupportedEncodingException;
+import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.LinkedHashMap;
@@ -64,23 +67,84 @@ public MobiComMessageService(Context context, Class messageIntentServiceClass) {
         this.messageIntentServiceClass = messageIntentServiceClass;
         //Todo: this can be changed to DeviceContactService for device contacts usage.
         this.baseContactService = new AppContactService(context);
-        fileClientService =  new FileClientService(context);;
+        fileClientService = new FileClientService(context);
+        ;
         this.userService = UserService.getInstance(context);
     }
 
     public Message processMessage(final Message messageToProcess, String tofield) {
+        try {
+            if (!TextUtils.isEmpty(ApplozicClient.getInstance(context).getMessageMetaDataServiceName())) {
+                Class serviceName = Class.forName(ApplozicClient.getInstance(context).getMessageMetaDataServiceName());
+                Intent intentService = new Intent(context, serviceName);
+                if (Message.MetaDataType.HIDDEN.getValue().equals(messageToProcess.getMetaDataValueForKey(Message.MetaDataType.KEY.getValue()))) {
+                    intentService.putExtra(MobiComKitConstants.MESSAGE, messageToProcess);
+                    intentService.putExtra(MobiComKitConstants.HIDDEN, true);
+                    context.startService(intentService);
+                    return null;
+                } else if (Message.MetaDataType.PUSHNOTIFICATION.getValue().equals(messageToProcess.getMetaDataValueForKey(Message.MetaDataType.KEY.getValue()))) {
+                    BroadcastService.sendNotificationBroadcast(context, messageToProcess);
+                    intentService.putExtra(MobiComKitConstants.MESSAGE, messageToProcess);
+                    intentService.putExtra(MobiComKitConstants.PUSH_NOTIFICATION, true);
+                    context.startService(intentService);
+                    return null;
+                }
+            }
+        } catch (ClassNotFoundException e) {
+            e.printStackTrace();
+        }
         Message message = prepareMessage(messageToProcess, tofield);
+        //download contacts in advance.
+        if (message.getGroupId() != null) {
+            Channel channel = ChannelService.getInstance(context).getChannelInfo(message.getGroupId());
+            if (channel == null) {
+                return null;
+            }
+        }
+        if (message.getContentType() == Message.ContentType.CONTACT_MSG.getValue()) {
+            fileClientService.loadContactsvCard(message);
+        }
+        try {
+            List<String> messageKeys = new ArrayList<>();
+            if (message.getMetadata() != null && message.getMetaDataValueForKey(Message.MetaDataType.AL_REPLY.getValue()) != null && !messageDatabaseService.isMessagePresent(message.getMetaDataValueForKey(Message.MetaDataType.AL_REPLY.getValue()))) {
+                messageKeys.add(message.getMetaDataValueForKey(Message.MetaDataType.AL_REPLY.getValue()));
+            }
+            if (messageKeys != null && messageKeys.size() > 0) {
+                Message[] replyMessageList = conversationService.getMessageListByKeyList(messageKeys);
+                if (replyMessageList != null) {
+                    Message replyMessage = replyMessageList[0];
+                    if (replyMessage != null) {
+                        if (replyMessage.hasAttachment() && !(replyMessage.getContentType() == Message.ContentType.TEXT_URL.getValue())) {
+                            conversationService.setFilePathifExist(replyMessage);
+                        }
+                        if (replyMessage.getContentType() == Message.ContentType.CONTACT_MSG.getValue()) {
+                            fileClientService.loadContactsvCard(replyMessage);
+                        }
+                        replyMessage.setReplyMessage(Message.ReplyMessage.HIDE_MESSAGE.getValue());
+                        messageDatabaseService.createMessage(replyMessage);
+                    }
+                }
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
 
         if (message.getType().equals(Message.MessageType.MT_INBOX.getValue())) {
             addMTMessage(message);
-        }  else if (message.getType().equals(Message.MessageType.MT_OUTBOX.getValue())) {
+        } else if (message.getType().equals(Message.MessageType.MT_OUTBOX.getValue())) {
             BroadcastService.sendMessageUpdateBroadcast(context, BroadcastService.INTENT_ACTIONS.SYNC_MESSAGE.toString(), message);
             messageDatabaseService.createMessage(message);
             if (!message.getCurrentId().equals(BroadcastService.currentUserId)) {
                 MobiComUserPreference.getInstance(context).setNewMessageFlag(true);
             }
+            if (message.isVideoNotificationMessage()) {
+                Utils.printLog(context,TAG, "Got notifications for Video call...");
+                VideoCallNotificationHelper helper = new VideoCallNotificationHelper(context);
+                helper.handleVideoCallNotificationMessages(message);
+
+            }
         }
-        Log.i(TAG, "processing message: " + message);
+        Utils.printLog(context,TAG, "processing message: " + message);
         return message;
     }
 
@@ -92,7 +156,7 @@ public Message prepareMessage(Message messageToProcess, String tofield) {
 
         if (message.getMessage() != null && PersonalizedMessage.isPersonalized(message.getMessage())) {
             Contact contact = null;
-            if(message.getGroupId() == null){
+            if (message.getGroupId() == null) {
                 contact = baseContactService.getContactById(tofield);
             }
             if (contact != null) {
@@ -108,7 +172,7 @@ public Contact addMTMessage(Message message) {
         message.processContactIds(context);
 
         String currentId = message.getCurrentId();
-        if(message.getGroupId() == null){
+        if (message.getGroupId() == null) {
             receiverContact = baseContactService.getContactById(message.getContactIds());
         }
 
@@ -117,59 +181,79 @@ public Contact addMTMessage(Message message) {
         }
 
         messageDatabaseService.createMessage(message);
-        //download contacts in advance.
-        if(message.getContentType()== Message.ContentType.CONTACT_MSG.getValue()){
-            fileClientService.loadContactsvCard(message);
-        }
-
-        BroadcastService.sendMessageUpdateBroadcast(context, BroadcastService.INTENT_ACTIONS.SYNC_MESSAGE.toString(), message);
 
         //Check if we are........container is already opened...don't send broadcast
         boolean isContainerOpened;
-        if(message.getConversationId() != null && BroadcastService.isContextBasedChatEnabled()){
-            if(BroadcastService.currentConversationId == null){
+        if (message.getConversationId() != null && BroadcastService.isContextBasedChatEnabled()) {
+            if (BroadcastService.currentConversationId == null) {
                 BroadcastService.currentConversationId = message.getConversationId();
             }
             isContainerOpened = (currentId.equals(BroadcastService.currentUserId) && message.getConversationId().equals(BroadcastService.currentConversationId));
-        }else {
+        } else {
             isContainerOpened = currentId.equals(BroadcastService.currentUserId);
         }
-        if (!isContainerOpened) {
-            if(!Message.ContentType.HIDDEN.getValue().equals(message.getContentType())  && !message.isReadStatus()){
-                    if(message.getTo() != null && message.getGroupId() == null){
-                        messageDatabaseService.updateContactUnreadCount(message.getTo());
-                    }
-                    if(message.getGroupId() != null && message.getContentType() != Message.ContentType.CHANNEL_CUSTOM_MESSAGE.getValue()){
+        if (message.isVideoNotificationMessage()) {
+            Utils.printLog(context,TAG, "Got notifications for Video call...");
+            BroadcastService.sendMessageUpdateBroadcast(context, BroadcastService.INTENT_ACTIONS.SYNC_MESSAGE.toString(), message);
+
+            VideoCallNotificationHelper helper = new VideoCallNotificationHelper(context);
+            helper.handleVideoCallNotificationMessages(message);
+
+        } else if (message.isVideoCallMessage()) {
+            BroadcastService.sendMessageUpdateBroadcast(context, BroadcastService.INTENT_ACTIONS.SYNC_MESSAGE.toString(), message);
+            VideoCallNotificationHelper.buildVideoCallNotification(context, message);
+        } else if (!isContainerOpened) {
+            if (message.isConsideredForCount()) {
+                if (message.getTo() != null && message.getGroupId() == null) {
+                    messageDatabaseService.updateContactUnreadCount(message.getTo());
+                    BroadcastService.sendMessageUpdateBroadcast(context, BroadcastService.INTENT_ACTIONS.SYNC_MESSAGE.toString(), message);
+                    sendNotification(message);
+                }
+                if (message.getGroupId() != null && !Message.GroupMessageMetaData.FALSE.getValue().equals(message.getMetaDataValueForKey(Message.GroupMessageMetaData.KEY.getValue()))) {
+                    if (!Message.ContentType.CHANNEL_CUSTOM_MESSAGE.getValue().equals(message.getContentType())) {
                         messageDatabaseService.updateChannelUnreadCount(message.getGroupId());
                     }
+                    BroadcastService.sendMessageUpdateBroadcast(context, BroadcastService.INTENT_ACTIONS.SYNC_MESSAGE.toString(), message);
+                    Channel currentChannel = ChannelService.getInstance(context).getChannelInfo(message.getGroupId());
+                    if (currentChannel != null && !currentChannel.isNotificationMuted()) {
+                        sendNotification(message);
+                    }
+                }
                 MobiComUserPreference.getInstance(context).setNewMessageFlag(true);
-                BroadcastService.sendNotificationBroadcast(context, message);
-                Intent intent = new Intent(MobiComKitConstants.APPLOZIC_UNREAD_COUNT);
-                LocalBroadcastManager.getInstance(context).sendBroadcast(intent);
+            } else {
+                BroadcastService.sendMessageUpdateBroadcast(context, BroadcastService.INTENT_ACTIONS.SYNC_MESSAGE.toString(), message);
             }
+        } else {
+            BroadcastService.sendMessageUpdateBroadcast(context, BroadcastService.INTENT_ACTIONS.SYNC_MESSAGE.toString(), message);
         }
 
-        Log.i(TAG, "Updating delivery status: " + message.getPairedMessageKeyString() + ", " + userPreferences.getUserId() + ", " + userPreferences.getContactNumber());
+        Utils.printLog(context,TAG, "Updating delivery status: " + message.getPairedMessageKeyString() + ", " + userPreferences.getUserId() + ", " + userPreferences.getContactNumber());
         messageClientService.updateDeliveryStatus(message.getPairedMessageKeyString(), userPreferences.getUserId(), userPreferences.getContactNumber());
         return receiverContact;
     }
 
+    public void sendNotification(Message message) {
+        BroadcastService.sendNotificationBroadcast(context, message);
+        Intent intent = new Intent(MobiComKitConstants.APPLOZIC_UNREAD_COUNT);
+        LocalBroadcastManager.getInstance(context).sendBroadcast(intent);
+    }
+
     public synchronized void syncMessages() {
         final MobiComUserPreference userpref = MobiComUserPreference.getInstance(context);
-        Log.i(TAG, "Starting syncMessages for lastSyncTime: " + userpref.getLastSyncTime());
+        Utils.printLog(context,TAG, "Starting syncMessages for lastSyncTime: " + userpref.getLastSyncTime());
         SyncMessageFeed syncMessageFeed = messageClientService.getMessageFeed(userpref.getLastSyncTime());
-        if(syncMessageFeed == null){
+        if (syncMessageFeed == null) {
             return;
         }
         if (syncMessageFeed != null && syncMessageFeed.getMessages() != null) {
-            Log.i(TAG, "Got sync response " + syncMessageFeed.getMessages().size() + " messages.");
+            Utils.printLog(context,TAG, "Got sync response " + syncMessageFeed.getMessages().size() + " messages.");
             processUserDetailFromMessages(syncMessageFeed.getMessages());
         }
         // if regIdInvalid in syncrequest, tht means device reg with c2dm is no
         // more valid, do it again and make the sync request again
         if (syncMessageFeed != null && syncMessageFeed.isRegIdInvalid()
                 && Utils.hasFroyo()) {
-            Log.i(TAG, "Going to call GCM device registration");
+            Utils.printLog(context,TAG, "Going to call GCM device registration");
             //Todo: Replace it with mobicomkit gcm registration
             // C2DMessaging.register(context);
         }
@@ -177,17 +261,13 @@ public synchronized void syncMessages() {
             List<Message> messageList = syncMessageFeed.getMessages();
 
             for (final Message message : messageList) {
-                String[] toList = message.getTo().trim().replace("undefined,", "").split(",");
-
-               if(Message.ContentType.CHANNEL_CUSTOM_MESSAGE.getValue().equals(message.getContentType())){
-                   ChannelService.getInstance(context).syncChannels();
-                   //Todo: fix this, what if there are mulitple messages.
-                   ChannelService.isUpdateTitle = true;
-               }
-                for (String tofield : toList) {
-                    processMessage(message, tofield);
-                    MobiComUserPreference.getInstance(context).setLastInboxSyncTime(message.getCreatedAtTime());
+                if (Message.ContentType.CHANNEL_CUSTOM_MESSAGE.getValue().equals(message.getContentType())) {
+                    ChannelService.getInstance(context).syncChannels();
+                    //Todo: fix this, what if there are mulitple messages.
+                    ChannelService.isUpdateTitle = true;
                 }
+                processMessage(message, message.getTo());
+                MobiComUserPreference.getInstance(context).setLastInboxSyncTime(message.getCreatedAtTime());
             }
 
             updateDeliveredStatus(syncMessageFeed.getDeliveredMessageKeys());
@@ -195,8 +275,8 @@ public synchronized void syncMessages() {
         }
     }
 
-    public MessageInfoResponse getMessageInfoResponse(String messageKey){
-        MessageInfoResponse messageInfoResponse =  messageClientService.getMessageInfoList(messageKey);
+    public MessageInfoResponse getMessageInfoResponse(String messageKey) {
+        MessageInfoResponse messageInfoResponse = messageClientService.getMessageInfoList(messageKey);
         return messageInfoResponse;
 
     }
@@ -205,7 +285,7 @@ private void updateDeliveredStatus(List<String> deliveredMessageKeys) {
         if (deliveredMessageKeys == null) {
             return;
         }
-        for (String messageKey: deliveredMessageKeys) {
+        for (String messageKey : deliveredMessageKeys) {
             messageDatabaseService.updateMessageDeliveryReportForContact(messageKey, false);
             Message message = messageDatabaseService.getMessage(messageKey);
             if (message != null) {
@@ -231,7 +311,7 @@ public void run() {
     public void processContactFromMessages(List<Message> messages) {
         try {
 
-            if(!ApplozicClient.getInstance(context).isHandleDisplayName()){
+            if (!ApplozicClient.getInstance(context).isHandleDisplayName()) {
                 return;
             }
             Set<String> userIds = new HashSet<String>();
@@ -269,7 +349,7 @@ public void processContactFromMessages(List<Message> messages) {
 
     public void processUserDetailFromMessages(List<Message> messages) {
         try {
-            if(!ApplozicClient.getInstance(context).isHandleDisplayName()){
+            if (!ApplozicClient.getInstance(context).isHandleDisplayName()) {
                 return;
             }
             Set<String> userIds = new HashSet<String>();
@@ -330,7 +410,7 @@ public void putMtextToDatabase(String payloadForMtextReceived) {
             try {
                 messageClientService.sendMessageToServer(mTextMessageReceived);
             } catch (Exception ex) {
-                Log.i(TAG, "Received message error " + ex.getMessage());
+                Utils.printLog(context,TAG, "Received message error " + ex.getMessage());
             }
             messageClientService.updateDeliveryStatus(smsKeyString, null, receiverNumber);
         } catch (JSONException e) {
@@ -364,9 +444,9 @@ public void sendCustomMessage(Message message) {
         conversationService.sendMessage(message, messageIntentServiceClass);
     }
 
-    public synchronized void updateDeliveryStatusForContact(String contactId,boolean markRead) {
-        int rows = messageDatabaseService.updateMessageDeliveryReportForContact(contactId,markRead);
-        Log.i(TAG, "Updated delivery report of " + rows + " messages for contactId: " + contactId);
+    public synchronized void updateDeliveryStatusForContact(String contactId, boolean markRead) {
+        int rows = messageDatabaseService.updateMessageDeliveryReportForContact(contactId, markRead);
+        Utils.printLog(context,TAG, "Updated delivery report of " + rows + " messages for contactId: " + contactId);
 
         if (rows > 0) {
             String action = markRead ? BroadcastService.INTENT_ACTIONS.MESSAGE_READ_AND_DELIVERED_FOR_CONTECT.toString() :
@@ -375,17 +455,17 @@ public synchronized void updateDeliveryStatusForContact(String contactId,boolean
         }
     }
 
-    public synchronized void updateDeliveryStatus(String key,boolean markRead) {
+    public synchronized void updateDeliveryStatus(String key, boolean markRead) {
         //Todo: Check if this is possible? In case the delivery report reaches before the sms is reached, then wait for the sms.
-        Log.i(TAG, "Got the delivery report for key: " + key);
+        Utils.printLog(context,TAG, "Got the delivery report for key: " + key);
         String keyParts[] = key.split((","));
         Message message = messageDatabaseService.getMessage(keyParts[0]);
-        if (message != null && (message.getStatus()!= Message.Status.DELIVERED_AND_READ.getValue())) {
+        if (message != null && (message.getStatus() != Message.Status.DELIVERED_AND_READ.getValue())) {
             message.setDelivered(Boolean.TRUE);
 
-            if(markRead){
+            if (markRead) {
                 message.setStatus(Message.Status.DELIVERED_AND_READ.getValue());
-            }else{
+            } else {
                 message.setStatus(Message.Status.DELIVERED.getValue());
             }
             //Todo: Server need to send the contactNumber of the receiver in case of group messaging and update
@@ -399,7 +479,7 @@ public synchronized void updateDeliveryStatus(String key,boolean markRead) {
                 timer.schedule(new DisappearingMessageTask(context, new MobiComConversationService(context), message), message.getTimeToLive() * 60 * 1000);
             }
         } else if (message == null) {
-            Log.i(TAG, "Message is not present in table, keyString: " + keyParts[0]);
+            Utils.printLog(context,TAG, "Message is not present in table, keyString: " + keyParts[0]);
         }
         map.remove(key);
         mtMessages.remove(key);
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/SyncCallService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/SyncCallService.java
index 0f85e4d0..d64f38f6 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/SyncCallService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/SyncCallService.java
@@ -3,18 +3,19 @@
 import android.content.Context;
 import android.content.Intent;
 import android.text.TextUtils;
-import android.util.Log;
 
 import com.applozic.mobicomkit.api.account.register.RegisterUserClientService;
 import com.applozic.mobicomkit.api.account.user.UserService;
+import com.applozic.mobicomkit.api.conversation.database.MessageDatabaseService;
+import com.applozic.mobicomkit.broadcast.BroadcastService;
 import com.applozic.mobicomkit.channel.service.ChannelService;
 import com.applozic.mobicomkit.contact.AppContactService;
 import com.applozic.mobicomkit.contact.BaseContactService;
-import com.applozic.mobicommons.people.channel.Channel;
-import com.applozic.mobicommons.people.contact.Contact;
+import com.applozic.mobicommons.commons.core.utils.Utils;
 
 import java.util.Date;
 import java.util.List;
+
 /**
  * Created by applozic on 12/2/15.
  */
@@ -23,13 +24,14 @@
     private static final String TAG = "SyncCall";
 
     public static boolean refreshView = false;
-    private Context context;
     private static SyncCallService syncCallService;
+    private Context context;
     private MobiComMessageService mobiComMessageService;
     private MobiComConversationService mobiComConversationService;
     private BaseContactService contactService;
     private ChannelService channelService;
     private MessageClientService messageClientService;
+    private MessageDatabaseService messageDatabaseService;
 
     private SyncCallService(Context context) {
         this.context = context;
@@ -38,48 +40,65 @@ private SyncCallService(Context context) {
         this.contactService = new AppContactService(context);
         this.channelService = ChannelService.getInstance(context);
         this.messageClientService = new MessageClientService(context);
+        this.messageDatabaseService = new MessageDatabaseService(context);
     }
 
     public synchronized static SyncCallService getInstance(Context context) {
         if (syncCallService == null) {
-            syncCallService = new SyncCallService(context);
+            syncCallService = new SyncCallService(context.getApplicationContext());
         }
         return syncCallService;
     }
-    
+
     public synchronized void updateDeliveryStatus(String key) {
-        mobiComMessageService.updateDeliveryStatus(key,false);
-        refreshView= true;
+        mobiComMessageService.updateDeliveryStatus(key, false);
+        refreshView = true;
     }
 
     public synchronized void updateReadStatus(String key) {
-        mobiComMessageService.updateDeliveryStatus(key,true);
-        refreshView= true;
+        mobiComMessageService.updateDeliveryStatus(key, true);
+        refreshView = true;
+
+    }
 
+    public synchronized List<Message> getLatestMessagesGroupByPeople(String searchString) {
+        return mobiComConversationService.getLatestMessagesGroupByPeople(null, searchString);
     }
 
     public synchronized List<Message> getLatestMessagesGroupByPeople() {
-        return mobiComConversationService.getLatestMessagesGroupByPeople(null);
+        return mobiComConversationService.getLatestMessagesGroupByPeople(null, null);
     }
 
-    public synchronized List<Message> getLatestMessagesGroupByPeople(Long createdAt) {
-        return mobiComConversationService.getLatestMessagesGroupByPeople(createdAt);
+    public synchronized List<Message> getLatestMessagesGroupByPeople(Long createdAt, String searchString) {
+        return mobiComConversationService.getLatestMessagesGroupByPeople(createdAt, searchString);
     }
 
     public synchronized void syncMessages(String key) {
         if (!TextUtils.isEmpty(key) && mobiComMessageService.isMessagePresent(key)) {
-            Log.d(TAG, "Message is already present, MQTT reached before GCM.");
-        }else {
+            Utils.printLog(context,TAG, "Message is already present, MQTT reached before GCM.");
+        } else {
             Intent intent = new Intent(context, ConversationIntentService.class);
             intent.putExtra(ConversationIntentService.SYNC, true);
             context.startService(intent);
         }
     }
 
-    public synchronized void updateDeliveryStatusForContact(String contactId,boolean markRead) {
+    public synchronized void updateDeliveryStatusForContact(String contactId, boolean markRead) {
         mobiComMessageService.updateDeliveryStatusForContact(contactId, markRead);
     }
 
+    public synchronized void updateConversationReadStatus(String currentId, boolean isGroup) {
+        if (TextUtils.isEmpty(currentId)) {
+            return;
+        }
+        if (isGroup) {
+            messageDatabaseService.updateChannelUnreadCountToZero(Integer.valueOf(currentId));
+        } else {
+            messageDatabaseService.updateContactUnreadCountToZero(currentId);
+        }
+        BroadcastService.sendConversationReadBroadcast(context, BroadcastService.INTENT_ACTIONS.CONVERSATION_READ.toString(), currentId, isGroup);
+    }
+
     public synchronized void updateConnectedStatus(String contactId, Date date, boolean connected) {
         contactService.updateConnectedStatus(contactId, date, connected);
     }
@@ -89,6 +108,11 @@ public synchronized void deleteConversationThread(String userId) {
         refreshView = true;
     }
 
+    public synchronized void deleteChannelConversationThread(String channelKey) {
+        mobiComConversationService.deleteChannelConversationFromDevice(Integer.valueOf(channelKey));
+        refreshView = true;
+    }
+
     public synchronized void deleteMessage(String messageKey) {
         mobiComConversationService.deleteMessageFromDevice(messageKey, null);
         refreshView = true;
@@ -119,4 +143,8 @@ public void processUserStatus(String userId) {
         messageClientService.processUserStatus(userId);
     }
 
+    public void syncUserDetail(String userId) {
+        messageClientService.processUserStatus(userId,true);
+    }
+
 }
\ No newline at end of file
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/database/ConversationDatabaseService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/database/ConversationDatabaseService.java
index 19941b3d..b281d24c 100644
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/database/ConversationDatabaseService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/database/ConversationDatabaseService.java
@@ -5,9 +5,9 @@
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
 import android.text.TextUtils;
-import android.util.Log;
 
 import com.applozic.mobicomkit.database.MobiComDatabaseHelper;
+import com.applozic.mobicommons.commons.core.utils.Utils;
 import com.applozic.mobicommons.people.channel.Channel;
 import com.applozic.mobicommons.people.channel.Conversation;
 import com.applozic.mobicommons.people.contact.Contact;
@@ -32,7 +32,7 @@ private ConversationDatabaseService(Context context) {
 
     public static synchronized ConversationDatabaseService getInstance(Context context) {
         if (conversationDatabaseService == null) {
-            conversationDatabaseService = new ConversationDatabaseService(context);
+            conversationDatabaseService = new ConversationDatabaseService(context.getApplicationContext());
         }
         return conversationDatabaseService;
     }
@@ -60,11 +60,11 @@ public static Conversation getConversation(Cursor cursor) {
         if (!TextUtils.isEmpty(topicDetail)) {
             conversation.setTopicDetail(topicDetail);
         }
-
         String userId = cursor.getString(cursor.getColumnIndex(MobiComDatabaseHelper.USERID));
         if (!TextUtils.isEmpty(userId)) {
             conversation.setUserId(userId);
         }
+        conversation.setTopicLocalImageUri(cursor.getString(cursor.getColumnIndex(MobiComDatabaseHelper.TOPIC_LOCAL_IMAGE_URL)));
         return conversation;
     }
 
@@ -97,6 +97,9 @@ public ContentValues prepareConversationValue(Conversation conversation) {
             if (!TextUtils.isEmpty(conversation.getTopicDetail())) {
                 contentValues.put(MobiComDatabaseHelper.TOPIC_DETAIL, conversation.getTopicDetail());
             }
+            if (!TextUtils.isEmpty(conversation.getTopicLocalImageUri())) {
+                contentValues.put(MobiComDatabaseHelper.TOPIC_LOCAL_IMAGE_URL, conversation.getTopicLocalImageUri());
+            }
         }
         return contentValues;
     }
@@ -122,6 +125,33 @@ public Conversation getConversationByConversationId(final Integer conversationId
         return conversation;
     }
 
+
+    public Conversation getConversationByTopicId(final String topicId, Context context) {
+        if (TextUtils.isEmpty(topicId)) {
+            return null;
+        }
+        Conversation conversation = null;
+        SQLiteDatabase database = MobiComDatabaseHelper.getInstance(context).getReadableDatabase();
+        String conversationParameters = "";
+        List<String> structuredNameParamsList = new ArrayList<>();
+
+        conversationParameters += MobiComDatabaseHelper.TOPIC_ID + "= ? ";
+        structuredNameParamsList.add(topicId);
+
+        Cursor cursor = database.query(MobiComDatabaseHelper.CONVERSATION, null, conversationParameters, structuredNameParamsList.toArray(new String[structuredNameParamsList.size()]), null, null, null);
+
+        if (cursor.moveToFirst()) {
+            conversation = getConversation(cursor);
+        }
+        if (cursor != null) {
+            cursor.close();
+        }
+
+        dbHelper.close();
+        return conversation;
+    }
+
+
     public List<Conversation> getConversationList(final Channel channel, final Contact contact) {
         List<Conversation> conversation = null;
         SQLiteDatabase database = dbHelper.getReadableDatabase();
@@ -140,9 +170,10 @@ public Conversation getConversationByConversationId(final Integer conversationId
 
         if (cursor.moveToFirst()) {
             conversation = getConversationList(cursor);
+        }
+        if (cursor != null) {
             cursor.close();
         }
-
         return conversation;
     }
 
@@ -171,10 +202,10 @@ public void updateConversation(Conversation conversation) {
 
     public void deleteConversation(String userId) {
         int deletedRows = dbHelper.getWritableDatabase().delete(MobiComDatabaseHelper.CONVERSATION, MobiComDatabaseHelper.USERID + "=?", new String[]{userId});
-        Log.i(TAG, "Delete no of conversation:" + deletedRows);
+        Utils.printLog(context,TAG, "Delete no of conversation:" + deletedRows);
     }
 
-    public Integer isConversationExit(String userId,String topicId){
+    public Integer isConversationExit(String userId, String topicId) {
         Conversation conversation = null;
         SQLiteDatabase database = dbHelper.getReadableDatabase();
 
@@ -194,7 +225,16 @@ public Integer isConversationExit(String userId,String topicId){
             cursor.close();
             return conversation.getId();
         }
+        if (cursor != null) {
+            cursor.close();
+        }
         return null;
     }
 
+    public void updateTopicLocalImageUri(String imageUri, Integer conversationId) {
+        ContentValues contentValues = new ContentValues();
+        contentValues.put(MobiComDatabaseHelper.TOPIC_LOCAL_IMAGE_URL, imageUri);
+        int updatedRow = dbHelper.getWritableDatabase().update(MobiComDatabaseHelper.CONVERSATION, contentValues, MobiComDatabaseHelper.KEY + "=?", new String[]{String.valueOf(conversationId)});
+    }
+
 }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/database/MessageDatabaseService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/database/MessageDatabaseService.java
index 4eb3871e..567122e8 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/database/MessageDatabaseService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/database/MessageDatabaseService.java
@@ -4,10 +4,9 @@
 import android.content.Context;
 import android.content.SharedPreferences;
 import android.database.Cursor;
-import android.database.sqlite.SQLiteConstraintException;
+import android.database.SQLException;
 import android.database.sqlite.SQLiteDatabase;
 import android.text.TextUtils;
-import android.util.Log;
 
 import com.applozic.mobicomkit.api.MobiComKitClientService;
 import com.applozic.mobicomkit.api.account.user.MobiComUserPreference;
@@ -16,6 +15,7 @@
 import com.applozic.mobicomkit.broadcast.BroadcastService;
 import com.applozic.mobicomkit.database.MobiComDatabaseHelper;
 import com.applozic.mobicommons.commons.core.utils.DBUtils;
+import com.applozic.mobicommons.commons.core.utils.Utils;
 import com.applozic.mobicommons.json.GsonUtils;
 import com.applozic.mobicommons.people.channel.Channel;
 import com.applozic.mobicommons.people.contact.Contact;
@@ -43,7 +43,7 @@
     private MobiComDatabaseHelper dbHelper;
 
     public MessageDatabaseService(Context context) {
-        this.context = context;
+        this.context = context.getApplicationContext();
         this.userPreferences = MobiComUserPreference.getInstance(context);
         this.dbHelper = MobiComDatabaseHelper.getInstance(context);
     }
@@ -78,6 +78,7 @@ public static Message getMessage(Cursor cursor) {
         message.setSentToServer(sentToServer != null && sentToServer.intValue() == 1);
         message.setTo(cursor.getString(cursor.getColumnIndex("toNumbers")));
         int timeToLive = cursor.getInt(cursor.getColumnIndex("timeToLive"));
+        message.setReplyMessage(cursor.getInt(cursor.getColumnIndex("replyMessage")));
         message.setTimeToLive(timeToLive != 0 ? timeToLive : null);
         String fileMetaKeyStrings = cursor.getString(cursor.getColumnIndex("fileMetaKeyStrings"));
         if (!TextUtils.isEmpty(fileMetaKeyStrings)) {
@@ -87,9 +88,10 @@ public static Message getMessage(Cursor cursor) {
         if (!TextUtils.isEmpty(filePaths)) {
             message.setFilePaths(Arrays.asList(filePaths.split(",")));
         }
+        message.setHidden(cursor.getInt(cursor.getColumnIndex(MobiComDatabaseHelper.HIDDEN)) == 1);
         String metadata = cursor.getString(cursor.getColumnIndex(MobiComDatabaseHelper.MESSAGE_METADATA));
         if (!TextUtils.isEmpty(metadata)) {
-            message.setMetadata(((Map<String, String>)GsonUtils.getObjectFromJson(metadata, Map.class)));
+            message.setMetadata(((Map<String, String>) GsonUtils.getObjectFromJson(metadata, Map.class)));
         }
         message.setApplicationId(cursor.getString(cursor.getColumnIndex("applicationId")));
         message.setContentType(cursor.getShort(cursor.getColumnIndex(MobiComDatabaseHelper.MESSAGE_CONTENT_TYPE)));
@@ -107,7 +109,7 @@ public static Message getMessage(Cursor cursor) {
             message.setGroupId(channelKey);
         }
 
-        if (cursor.getString(cursor.getColumnIndex("blobKeyString"))==null) {
+        if (cursor.getString(cursor.getColumnIndex("blobKeyString")) == null) {
             //file is not present...  Don't set anything ...
         } else {
             FileMeta fileMeta = new FileMeta();
@@ -123,24 +125,87 @@ public static Message getMessage(Cursor cursor) {
     }
 
     public static List<Message> getMessageList(Cursor cursor) {
-        List<Message> smsList = new ArrayList<Message>();
-        cursor.moveToFirst();
-        if (cursor.getCount() > 0) {
-            do {
-                smsList.add(getMessage(cursor));
-            } while (cursor.moveToNext());
+        List<Message> messageList = new ArrayList<Message>();
+        try {
+            cursor.moveToFirst();
+            if (cursor.getCount() > 0) {
+                do {
+                    Message message = getMessage(cursor);
+                    if (Message.ContentType.CHANNEL_CUSTOM_MESSAGE.getValue().equals(message.getContentType())) {
+                        if (!Message.GroupMessageMetaData.TRUE.getValue().equals(message.getMetaDataValueForKey(Message.GroupMessageMetaData.HIDE_KEY.getValue()))) {
+                            messageList.add(message);
+                        }
+                    } else {
+                        messageList.add(message);
+                    }
+                } while (cursor.moveToNext());
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+        } finally {
+            if (cursor != null) {
+                cursor.close();
+            }
         }
-        return smsList;
+        return messageList;
+    }
+
+    public static List<Message> getLatestMessageList(Cursor cursor) {
+        List<Message> messageList = new ArrayList<Message>();
+        try {
+            cursor.moveToFirst();
+            if (cursor.getCount() > 0) {
+                do {
+                    Message message = getMessage(cursor);
+                    if (message != null) {
+                        if (!Message.MetaDataType.ARCHIVE.getValue().equals(message.getMetaDataValueForKey(Message.MetaDataType.KEY.getValue()))) {
+                            messageList.add(message);
+                        }
+                    }
+                } while (cursor.moveToNext());
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+        } finally {
+            if (cursor != null) {
+                cursor.close();
+            }
+        }
+        return messageList;
     }
 
-    public List<Message> getMessages(Long startTime, Long endTime, Contact contact, Channel channel,Integer conversationId) {
+    public static List<Message> getLatestMessageListForNotification(Cursor cursor) {
+        List<Message> messageList = new ArrayList<Message>();
+        try {
+            cursor.moveToFirst();
+            if (cursor.getCount() > 0) {
+                do {
+                    Message message = getMessage(cursor);
+                    if (message != null) {
+                        if (!Message.GroupMessageMetaData.FALSE.getValue().equals(message.getMetaDataValueForKey(Message.GroupMessageMetaData.KEY.getValue()))) {
+                            messageList.add(message);
+                        }
+                    }
+                } while (cursor.moveToNext());
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+        } finally {
+            if (cursor != null) {
+                cursor.close();
+            }
+        }
+        return messageList;
+    }
+
+    public List<Message> getMessages(Long startTime, Long endTime, Contact contact, Channel channel, Integer conversationId) {
         String structuredNameWhere = "";
         List<String> structuredNameParamsList = new ArrayList<String>();
 
-        if (channel != null && channel.getKey() != null ) {
+        if (channel != null && channel.getKey() != null) {
             structuredNameWhere += "channelKey = ? AND ";
             structuredNameParamsList.add(String.valueOf(channel.getKey()));
-        }else {
+        } else {
             structuredNameWhere += "channelKey = ? AND ";
             structuredNameParamsList.add("0");
         }
@@ -156,14 +221,19 @@ public static Message getMessage(Cursor cursor) {
             structuredNameWhere += "createdAt < ? AND ";
             structuredNameParamsList.add(String.valueOf(endTime));
         }
-        if( BroadcastService.isContextBasedChatEnabled() && conversationId != null && conversationId != 0 ){
+        if (BroadcastService.isContextBasedChatEnabled() && conversationId != null && conversationId != 0) {
             structuredNameWhere += "conversationId = ? AND ";
             structuredNameParamsList.add(String.valueOf(conversationId));
         }
-        structuredNameWhere += "messageContentType != ? AND ";
+        structuredNameWhere += "messageContentType not in ( ?,? ) AND ";
         structuredNameParamsList.add(String.valueOf(Message.ContentType.HIDDEN.getValue()));
+        structuredNameParamsList.add(String.valueOf(Message.ContentType.VIDEO_CALL_NOTIFICATION_MSG.getValue()));
         structuredNameWhere += "deleted = ? AND ";
         structuredNameParamsList.add("0");
+        structuredNameWhere += "hidden = ? AND ";
+        structuredNameParamsList.add("0");
+        structuredNameWhere += "replyMessage != ? AND ";
+        structuredNameParamsList.add(String.valueOf(Message.ReplyMessage.HIDE_MESSAGE.getValue()));
 
         MobiComUserPreference userPreferences = MobiComUserPreference.getInstance(context);
         if (!userPreferences.isDisplayCallRecordEnable()) {
@@ -179,21 +249,20 @@ public static Message getMessage(Cursor cursor) {
         SQLiteDatabase db = dbHelper.getWritableDatabase();
         Cursor cursor = db.query("sms", null, structuredNameWhere, structuredNameParamsList.toArray(new String[structuredNameParamsList.size()]), null, null, "createdAt asc");
         List<Message> messageList = MessageDatabaseService.getMessageList(cursor);
-        cursor.close();
         dbHelper.close();
         return messageList;
     }
 
-    public List<Message> getUnreadMessages(){
+    public List<Message> getUnreadMessages() {
         String structuredNameWhere = "";
         List<String> structuredNameParamsList = new ArrayList<String>();
-        structuredNameWhere += "messageContentType not in (10,11) AND ";
+        structuredNameWhere += "messageContentType not in (11) AND ";
         structuredNameWhere += "status in (0,3) AND ";
         structuredNameWhere += "type = ? ";
         structuredNameParamsList.add(String.valueOf(Message.MessageType.MT_INBOX.getValue()));
         SQLiteDatabase db = dbHelper.getWritableDatabase();
         Cursor cursor = db.query("sms", null, structuredNameWhere, structuredNameParamsList.toArray(new String[structuredNameParamsList.size()]), null, null, "createdAt desc limit 10");
-        return  MessageDatabaseService.getMessageList(cursor);
+        return MessageDatabaseService.getLatestMessageListForNotification(cursor);
     }
 
     public List<Message> getPendingMessages() {
@@ -205,7 +274,6 @@ public static Message getMessage(Cursor cursor) {
         structuredNameParamsList.add("0");
         Cursor cursor = dbHelper.getWritableDatabase().query("sms", null, structuredNameWhere, structuredNameParamsList.toArray(new String[structuredNameParamsList.size()]), null, null, "createdAt asc");
         List<Message> messageList = getMessageList(cursor);
-        cursor.close();
         dbHelper.close();
         return messageList;
     }
@@ -218,7 +286,6 @@ public static Message getMessage(Cursor cursor) {
         structuredNameParamsList.add("1");
         Cursor cursor = dbHelper.getWritableDatabase().query("sms", null, structuredNameWhere, structuredNameParamsList.toArray(new String[structuredNameParamsList.size()]), null, null, "createdAt asc");
         List<Message> messageList = getMessageList(cursor);
-        cursor.close();
         return messageList;
     }
 
@@ -400,7 +467,7 @@ public synchronized long createMessage(final Message message) {
             for (String tofield : toList) {
                 Message singleMessage = new Message(message);
                 singleMessage.setKeyString(message.getKeyString());
-              //  singleMessage.setBroadcastGroupId(null);
+                //  singleMessage.setBroadcastGroupId(null);
                 singleMessage.setTo(tofield);
                 singleMessage.processContactIds(context);
                 singleMessage.setMessageId(createSingleMessage(singleMessage));
@@ -463,6 +530,9 @@ public synchronized long createSingleMessage(final Message message) {
                 dbHelper.close();
                 return -1;
             }
+            if (cursor != null) {
+                cursor.close();
+            }
         }
 
         try {
@@ -483,13 +553,14 @@ public synchronized long createSingleMessage(final Message message) {
             values.put("read", message.isRead() ? 1 : 0);
             values.put("applicationId", message.getApplicationId());
             values.put(MobiComDatabaseHelper.MESSAGE_CONTENT_TYPE, message.getContentType());
-            values.put(MobiComDatabaseHelper.STATUS,message.getStatus());
+            values.put(MobiComDatabaseHelper.STATUS, message.getStatus());
             values.put(MobiComDatabaseHelper.CONVERSATION_ID, message.getConversationId());
             values.put(MobiComDatabaseHelper.TOPIC_ID, message.getTopicId());
-            if(message.getGroupId() != null) {
+            values.put(MobiComDatabaseHelper.HIDDEN, message.isHidden());
+            if (message.getGroupId() != null) {
                 values.put(MobiComDatabaseHelper.CHANNEL_KEY, message.getGroupId());
             }
-            if(!TextUtils.isEmpty(message.getClientGroupId())) {
+            if (!TextUtils.isEmpty(message.getClientGroupId())) {
                 values.put(MobiComDatabaseHelper.CLIENT_GROUP_ID, message.getClientGroupId());
             }
             if (message.getFileMetaKeyStrings() != null) {
@@ -501,6 +572,7 @@ public synchronized long createSingleMessage(final Message message) {
             if (message.getMetadata() != null && !message.getMetadata().isEmpty()) {
                 values.put(MobiComDatabaseHelper.MESSAGE_METADATA, GsonUtils.getJsonFromObject(message.getMetadata(), Map.class));
             }
+            values.put(MobiComDatabaseHelper.REPLY_MESSAGE,message.isReplyMessage());
             //TODO:Right now we are supporting single image attachment...making entry in same table
             if (message.getFileMetas() != null) {
                 FileMeta fileMeta = message.getFileMetas();
@@ -513,9 +585,9 @@ public synchronized long createSingleMessage(final Message message) {
                     values.put("blobKeyString", fileMeta.getBlobKeyString());
                 }
             }
-            id = database.insert("sms", null, values);
-        } catch (SQLiteConstraintException ex) {
-            Log.e(TAG, "Duplicate entry in sms table, sms: " + message);
+            id = database.insertOrThrow("sms", null, values);
+        } catch (SQLException ex) {
+            Utils.printLog(context,TAG, " Ignore Duplicate entry in sms table, sms: " + message);
         } finally {
             dbHelper.close();
         }
@@ -530,30 +602,30 @@ public void updateSmsType(String smsKeyString, Message.MessageType messageType)
         dbHelper.close();
     }
 
-    public int updateMessageDeliveryReportForContact(String contactId,boolean markRead) {
+    public int updateMessageDeliveryReportForContact(String contactId, boolean markRead) {
         SQLiteDatabase database = dbHelper.getWritableDatabase();
         ContentValues values = new ContentValues();
-        String whereClause="contactNumbers= '" +contactId + "' and ";
+        String whereClause = "contactNumbers= '" + contactId + "' and ";
         values.put("delivered", "1");
-        if(markRead){
+        if (markRead) {
             whereClause = whereClause + "status not in (5)";
             values.put("status", String.valueOf(Message.Status.DELIVERED_AND_READ.getValue()));
-        }else{
+        } else {
             whereClause = whereClause + "status not in (4,5)";
             values.put("status", String.valueOf(Message.Status.DELIVERED.getValue()));
         }
-        whereClause = whereClause +  " and type=5 ";
+        whereClause = whereClause + " and type=5 ";
         int rows = database.update("sms", values, whereClause, null);
         dbHelper.close();
         return rows;
     }
 
-    public void updateMessageDeliveryReportForContact(String messageKeyString, String contactNumber,boolean markRead) {
+    public void updateMessageDeliveryReportForContact(String messageKeyString, String contactNumber, boolean markRead) {
         SQLiteDatabase database = dbHelper.getWritableDatabase();
         ContentValues values = new ContentValues();
-        if(markRead){
+        if (markRead) {
             values.put("status", String.valueOf(Message.Status.DELIVERED_AND_READ.getValue()));
-        }else{
+        } else {
             values.put("status", String.valueOf(Message.Status.DELIVERED.getValue()));
         }
         values.put("delivered", "1");
@@ -618,7 +690,7 @@ public void updateCanceledFlag(long smsId, int value) {
     public void updateMessageReadFlag(long smsId, boolean read) {
         ContentValues values = new ContentValues();
         values.put("read", read ? 1 : 0);
-        values.put("status",1);
+        values.put("status", 1);
         dbHelper.getWritableDatabase().update("sms", values, "id=" + smsId, null);
         dbHelper.close();
     }
@@ -672,7 +744,7 @@ public int getUnreadConversationCount() {
             dbHelper.close();
             return conversationCount;
         } catch (Exception ex) {
-            Log.w(TAG, "Exception while fetching unread conversation count");
+            Utils.printLog(context,TAG, "Exception while fetching unread conversation count");
         }
         return 0;
     }
@@ -690,7 +762,7 @@ public int getUnreadMessageCount() {
             dbHelper.close();
             return unreadMessageCount;
         } catch (Exception ex) {
-            Log.w(TAG, "Exception while fetching unread message count");
+            Utils.printLog(context,TAG, "Exception while fetching unread message count");
             return 0;
         }
     }
@@ -702,20 +774,20 @@ public int getUnreadMessageCount() {
         if (cursor.moveToFirst()) {
             messages = MessageDatabaseService.getMessageList(cursor);
         }
-        cursor.close();
         dbHelper.close();
         return messages;
     }
 
+
     public List<Message> getLatestMessageByClientGroupId(String clientGroupId) {
-        return getLatestMessageForChannel(null,clientGroupId);
+        return getLatestMessageForChannel(null, clientGroupId);
     }
 
     public List<Message> getLatestMessageByChannelKey(Integer channelKey) {
-        return getLatestMessageForChannel(channelKey,null);
+        return getLatestMessageForChannel(channelKey, null);
     }
 
-    private List<Message> getLatestMessageForChannel(Integer channelKey,String clientGroupId) {
+    private List<Message> getLatestMessageForChannel(Integer channelKey, String clientGroupId) {
 
         String clauseString = null;
 
@@ -736,15 +808,30 @@ public int getUnreadMessageCount() {
     }
 
 
+    public boolean isMessagePresent(String key,Integer replyMessageType) {
+        SQLiteDatabase database = dbHelper.getWritableDatabase();
+        Cursor cursor = database.rawQuery(
+                "SELECT COUNT(*) FROM sms WHERE keyString = ? AND replyMessage = ?",
+                new String[]{key,String.valueOf(replyMessageType)});
+        cursor.moveToFirst();
+        boolean present = cursor.getInt(0) > 0;
+        if (cursor != null) {
+            cursor.close();
+        }
+        dbHelper.close();
+        return present;
+    }
+
+
     public List<Message> getChannelCustomMessagesByClientGroupId(String clientGroupId) {
-        return getChannelCustomMessageList(null,clientGroupId);
+        return getChannelCustomMessageList(null, clientGroupId);
     }
 
     public List<Message> getChannelCustomMessagesByChannelKey(Integer channelKey) {
-        return getChannelCustomMessageList(channelKey,null);
+        return getChannelCustomMessageList(channelKey, null);
     }
 
-    private List<Message> getChannelCustomMessageList(Integer channelKey,String clientGroupId){
+    private List<Message> getChannelCustomMessageList(Integer channelKey, String clientGroupId) {
         String structuredNameWhere = "";
         List<String> structuredNameParamsList = new ArrayList<String>();
         if (channelKey != null && channelKey != 0) {
@@ -758,11 +845,10 @@ public int getUnreadMessageCount() {
         structuredNameWhere += "messageContentType in (10) ";
         SQLiteDatabase db = dbHelper.getWritableDatabase();
         Cursor cursor = db.query("sms", null, structuredNameWhere, structuredNameParamsList.toArray(new String[structuredNameParamsList.size()]), null, null, "createdAt desc");
-        return  MessageDatabaseService.getMessageList(cursor);
+        return MessageDatabaseService.getMessageList(cursor);
     }
 
 
-
     public int updateReadStatus(String contactNumbers) {
         ContentValues values = new ContentValues();
         values.put("read", 1);
@@ -796,7 +882,12 @@ public int updateReadStatusForChannel(String channelKey) {
         return read;
     }
 
+
     public List<Message> getMessages(Long createdAt) {
+        return getMessages(createdAt, null);
+    }
+
+    public List<Message> getMessages(Long createdAt, String searchText) {
         String createdAtClause = "";
         if (createdAt != null && createdAt > 0) {
             createdAtClause = " and m1.createdAt < " + createdAt;
@@ -805,64 +896,70 @@ public int updateReadStatusForChannel(String channelKey) {
 
         String messageTypeClause = "";
         String messageTypeJoinClause = "";
+        String searchCaluse = "";
         MobiComUserPreference userPreferences = MobiComUserPreference.getInstance(context);
         if (!userPreferences.isDisplayCallRecordEnable()) {
             messageTypeClause = " and m1.type != " + Message.MessageType.CALL_INCOMING.getValue() + " and m1.type != " + Message.MessageType.CALL_OUTGOING.getValue();
             messageTypeJoinClause = " and m1.type = m2.type";
         }
 
-        String hiddenType = " and m1.messageContentType != "+Message.ContentType.HIDDEN.getValue() ;
+        if (!TextUtils.isEmpty(searchText)) {
+            searchCaluse += " and m1.message like '%" + searchText.replaceAll("'", "''") + "%' ";
+        }
+
+        String hiddenType = " and m1.messageContentType not in (" + Message.ContentType.HIDDEN.getValue()
+                + "," + Message.ContentType.VIDEO_CALL_NOTIFICATION_MSG.getValue() + ") AND m1.hidden = 0 AND m1.replyMessage not in (" + Message.ReplyMessage.HIDE_MESSAGE.getValue()+")";
 
         SQLiteDatabase db = dbHelper.getWritableDatabase();
         /*final Cursor cursor = db.rawQuery("select * from sms where createdAt in " +
                 "(select max(createdAt) from sms group by contactNumbers) order by createdAt desc", null);*/
         final Cursor cursor = db.rawQuery("select m1.* from sms m1 left outer join sms m2 on (m1.createdAt < m2.createdAt"
-                + " and m1.channelKey = m2.channelKey and m1.contactNumbers = m2.contactNumbers and m1.deleted = m2.deleted and  m1.messageContentType = m2.messageContentType" + messageTypeJoinClause + " ) where m2.createdAt is null " + createdAtClause +hiddenType+ messageTypeClause
+                + " and m1.channelKey = m2.channelKey and m1.contactNumbers = m2.contactNumbers and m1.deleted = m2.deleted and  m1.messageContentType = m2.messageContentType" + messageTypeJoinClause + " ) where m2.createdAt is null " + createdAtClause + searchCaluse + hiddenType + messageTypeClause
                 + " order by m1.createdAt desc", null);
 
         /*final Cursor cursor = db.rawQuery("SELECT t1.* FROM sms t1" +
                 "  JOIN (SELECT contactNumbers, MAX(createdAt) createdAt FROM sms GROUP BY contactNumbers) t2" +
                 "  ON t1.contactNumbers = t2.contactNumbers AND t1.createdAt = t2.createdAt order by createdAt desc", null);*/
-        List<Message> messageList = getMessageList(cursor);
-        cursor.close();
+        List<Message> messageList = getLatestMessageList(cursor);
+
         dbHelper.close();
         return messageList;
     }
 
     public String deleteMessage(Message message, String contactNumber) {
-        String contactNumbers = contactNumber;
-        String contactNumberClause = TextUtils.isEmpty(contactNumber) ? "" : " and contactNumbers='" + contactNumber + "'";
-        SQLiteDatabase database = dbHelper.getWritableDatabase();
-        Cursor cursor = database.rawQuery("select contactNumbers from sms where keyString=" + "'" + message.getKeyString() + "'"
-                + contactNumberClause, null);
-        try {
-            if (cursor.moveToFirst()) {
-                contactNumbers = cursor.getString(cursor.getColumnIndex("contactNumbers"));
-            }
-        } finally {
-            if (cursor != null) {
-                cursor.close();
-            }
+        if (!message.isSentToServer()) {
+            deleteMessageFromDb(message);
+        } else if (isMessagePresent(message.getKeyString(), Message.ReplyMessage.REPLY_MESSAGE.getValue())) {
+            updateReplyFlag(message.getKeyString(), Message.ReplyMessage.HIDE_MESSAGE.getValue());
+        } else if (!isMessagePresent(message.getKeyString(), Message.ReplyMessage.HIDE_MESSAGE.getValue())) {
+            deleteMessageFromDb(message);
         }
-        database.delete("sms", "keyString" + "='" + message.getKeyString() + "'" + contactNumberClause, null);
-        dbHelper.close();
-        return contactNumbers;
+        return null;
     }
 
+    public void deleteMessageFromDb(Message message) {
+        try {
+            SQLiteDatabase database = dbHelper.getWritableDatabase();
+            database.delete("sms", "keyString" + "='" + message.getKeyString() + "'" , null);
+            dbHelper.close();
+        } catch (Exception e){
+            e.printStackTrace();
+        }
+    }
     public void deleteConversation(String contactNumber) {
-        Log.i(TAG, "Deleting conversation for contactNumber: " + contactNumber);
+        Utils.printLog(context,TAG, "Deleting conversation for contactNumber: " + contactNumber);
         int deletedRows = dbHelper.getWritableDatabase().delete("sms", "contactNumbers=? AND channelKey = 0", new String[]{contactNumber});
         updateContactUnreadCountToZero(contactNumber);
         dbHelper.close();
-        Log.i(TAG, "Delete " + deletedRows + " messages.");
+        Utils.printLog(context,TAG, "Delete " + deletedRows + " messages.");
     }
 
     public void deleteChannelConversation(Integer channelKey) {
-        Log.i(TAG, "Deleting  Conversation for channel: " + channelKey);
+        Utils.printLog(context,TAG, "Deleting  Conversation for channel: " + channelKey);
         int deletedRows = dbHelper.getWritableDatabase().delete("sms", "channelKey=?", new String[]{String.valueOf(channelKey)});
         updateChannelUnreadCountToZero(channelKey);
         dbHelper.close();
-        Log.i(TAG, "Delete " + deletedRows + " messages.");
+        Utils.printLog(context,TAG, "Delete " + deletedRows + " messages.");
     }
 
     public synchronized void updateContactUnreadCount(String userId) {
@@ -883,7 +980,7 @@ public synchronized void updateChannelUnreadCount(Integer channelKey) {
         }
     }
 
-    public synchronized void updateChannelUnreadCountToZero(Integer channelKey){
+    public synchronized void updateChannelUnreadCountToZero(Integer channelKey) {
         try {
             SQLiteDatabase db = dbHelper.getWritableDatabase();
             db.execSQL("UPDATE channel SET unreadCount = 0 WHERE channelKey =" + "'" + channelKey + "'");
@@ -892,7 +989,7 @@ public synchronized void updateChannelUnreadCountToZero(Integer channelKey){
         }
     }
 
-    public synchronized void updateContactUnreadCountToZero(String userId){
+    public synchronized void updateContactUnreadCountToZero(String userId) {
         try {
             SQLiteDatabase db = dbHelper.getWritableDatabase();
             db.execSQL("UPDATE contact SET unreadCount = 0 WHERE userId =" + "'" + userId + "'");
@@ -901,6 +998,24 @@ public synchronized void updateContactUnreadCountToZero(String userId){
         }
     }
 
+    public void updateReplyFlag(String messageKey,int isReplyMessage){
+        ContentValues values = new ContentValues();
+        values.put("replyMessage", isReplyMessage);
+        int updatedMessage = dbHelper.getWritableDatabase().update("sms", values, " keyString = '" + messageKey + "'", null);
+    }
+
+    public void updateMessageReplyType(String messageKey,Integer replyMessage){
+        try {
+            ContentValues values = new ContentValues();
+            values.put("replyMessage", replyMessage);
+            dbHelper.getWritableDatabase().update("sms", values, "keyString = ?",new String[]{messageKey});
+        } catch (Exception ex) {
+            ex.printStackTrace();
+        } finally {
+            dbHelper.close();
+        }
+    }
+
     public int getTotalUnreadCount() {
         Cursor channelCursor = null;
         Cursor contactCursor = null;
@@ -925,14 +1040,38 @@ public int getTotalUnreadCount() {
         } catch (Exception e) {
             e.printStackTrace();
         } finally {
-                if (channelCursor != null) {
-                    channelCursor.close();
-                }
-                if (contactCursor != null) {
-                    contactCursor.close();
-                }
+            if (channelCursor != null) {
+                channelCursor.close();
+            }
+            if (contactCursor != null) {
+                contactCursor.close();
+            }
         }
         return totalCount;
     }
 
-}
\ No newline at end of file
+    public List<Message> getAttachmentMessages(String contactId, Integer groupId, boolean downloadedOnly) {
+
+        if (contactId == null && (groupId == null || groupId == 0)) {
+            return new ArrayList<>();
+        }
+
+        String query = "SELECT * FROM " + MobiComDatabaseHelper.SMS_TABLE_NAME + " WHERE ";
+        String params = "";
+
+        if (groupId != null && groupId != 0) {
+            params = MobiComDatabaseHelper.CHANNEL_KEY + " = " + groupId + " AND";
+        } else if (contactId != null) {
+            params = "contactNumbers = '" + contactId + "' AND";
+        }
+
+        String selectionArgs = (downloadedOnly ? " filePaths" : " blobKeyString") + " IS NOT NULL ORDER BY createdAt DESC";
+
+        SQLiteDatabase db = dbHelper.getWritableDatabase();
+        Cursor cursor = db.rawQuery(query + params + selectionArgs, null);
+
+        return getMessageList(cursor);
+
+    }
+
+}
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/service/ConversationClientService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/service/ConversationClientService.java
index 9ee163d1..5df1e4db 100644
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/service/ConversationClientService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/service/ConversationClientService.java
@@ -1,7 +1,7 @@
 package com.applozic.mobicomkit.api.conversation.service;
 
 import android.content.Context;
-import android.util.Log;
+import android.text.TextUtils;
 
 import com.applozic.mobicomkit.api.HttpRequestUtils;
 import com.applozic.mobicomkit.api.MobiComKitClientService;
@@ -9,9 +9,14 @@
 import com.applozic.mobicomkit.feed.ApiResponse;
 import com.applozic.mobicomkit.feed.ChannelFeed;
 import com.applozic.mobicomkit.feed.ChannelFeedApiResponse;
+import com.applozic.mobicomkit.feed.ConversationFeed;
+import com.applozic.mobicommons.commons.core.utils.Utils;
 import com.applozic.mobicommons.json.GsonUtils;
 import com.applozic.mobicommons.people.channel.Conversation;
 
+import java.net.URLEncoder;
+import java.util.Set;
+
 /**
  * Created by sunil on 18/2/16.
  */
@@ -19,13 +24,16 @@
 
     private static final String CREATE_CONVERSATION_URL = "/rest/ws/conversation/id";
     private static final String CONVERSATION_URL = "/rest/ws/conversation/topicId";
+    private static final String CONVERSATION_CLOSE_TOPIC_ID_URL = "/rest/ws/conversation/closeall";
+    private static final String CONVERSATION_CLOSE_URL = "/rest/ws/conversation/close";
     private static final String TAG = "ConversationClient";
+    final private static String TOPIC_ID = "topicId";
+    final private static String WITH_USER_ID = "withUserId";
     private static ConversationClientService conversationClientService;
     private Context context;
     private ConversationDatabaseService conversationDatabaseService;
     private HttpRequestUtils httpRequestUtils;
 
-
     private ConversationClientService(Context context) {
         super(context);
         this.context = context;
@@ -35,7 +43,7 @@ private ConversationClientService(Context context) {
 
     public synchronized static ConversationClientService getInstance(Context context) {
         if (conversationClientService == null) {
-            conversationClientService = new ConversationClientService(context);
+            conversationClientService = new ConversationClientService(context.getApplicationContext());
         }
         return conversationClientService;
     }
@@ -48,13 +56,20 @@ public String getConversationUrl() {
         return getBaseUrl() + CONVERSATION_URL;
     }
 
+    public String getConversationCloseUrl() {
+        return getBaseUrl() + CONVERSATION_CLOSE_URL;
+    }
+
+    public String getConversationCloseByTopicIdUrl() {
+        return getBaseUrl() + CONVERSATION_CLOSE_TOPIC_ID_URL;
+    }
 
     public ChannelFeed createConversation(Conversation conversation) {
         ChannelFeed channelFeed = null;
         try {
             String jsonFromObject = GsonUtils.getJsonFromObject(conversation, conversation.getClass());
             String createChannelResponse = httpRequestUtils.postData(getCreateConversationUrl(), "application/json", "application/json", jsonFromObject);
-            Log.i(TAG, "Create Conversation reponse:" + createChannelResponse);
+            Utils.printLog(context,TAG, "Create Conversation reponse:" + createChannelResponse);
             ChannelFeedApiResponse channelFeedApiResponse = (ChannelFeedApiResponse) GsonUtils.getObjectFromJson(createChannelResponse, ChannelFeedApiResponse.class);
 
             if (channelFeedApiResponse != null && channelFeedApiResponse.isSuccess()) {
@@ -72,8 +87,8 @@ public Conversation getConversation(Integer conversationId) {
         try {
             if (conversationId != null) {
                 response = httpRequestUtils.getResponse(getConversationUrl() + "?id=" + String.valueOf(conversationId), "application/json", "application/json");
-                ApiResponse apiResponse = (ApiResponse) GsonUtils.getObjectFromJson(response, ApiResponse.class);
-                Log.i(TAG, "Conversation response  is :" + response);
+                ConversationFeed apiResponse = (ConversationFeed) GsonUtils.getObjectFromJson(response, ConversationFeed.class);
+                Utils.printLog(context,TAG, "Conversation response  is :" + response);
                 if (apiResponse != null && apiResponse.isSuccess()) {
                     return (Conversation) apiResponse.getResponse();
                 }
@@ -84,4 +99,49 @@ public Conversation getConversation(Integer conversationId) {
         return null;
     }
 
+    public String closeConversation(Integer conversationId) {
+        String response;
+        try {
+            if (conversationId != null) {
+                response = httpRequestUtils.getResponse(getConversationCloseUrl() + "?id=" + String.valueOf(conversationId), "application/json", "application/json");
+                if (TextUtils.isEmpty(response)) {
+                    return null;
+                }
+                ApiResponse apiResponse = (ApiResponse) GsonUtils.getObjectFromJson(response, ApiResponse.class);
+                Utils.printLog(context,TAG, "Conversation close  API Response :" + response);
+                if (apiResponse != null && apiResponse.isSuccess()) {
+                    return apiResponse.getResponse().toString();
+                }
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        return null;
+    }
+
+    public String closeConversationByTopicId(Set<String> topicIds, String userId) {
+        String response = "";
+        try {
+            StringBuffer stringBuffer = new StringBuffer();
+            if (topicIds != null && topicIds.size() > 0) {
+                for (String topicId : topicIds) {
+                    stringBuffer.append(TOPIC_ID).append("=").append(URLEncoder.encode(topicId, "UTF-8")).append("&");
+                }
+                stringBuffer.append(WITH_USER_ID).append("=").append(URLEncoder.encode(userId, "UTF-8"));
+                response = httpRequestUtils.getResponse(getConversationCloseByTopicIdUrl() + "?" + stringBuffer.toString(), "application/json", null);
+                if (TextUtils.isEmpty(response)) {
+                    return null;
+                }
+                ApiResponse apiResponse = (ApiResponse) GsonUtils.getObjectFromJson(response, ApiResponse.class);
+                Utils.printLog(context,TAG, "Conversation close by topic id :" + response);
+                if (apiResponse != null && apiResponse.isSuccess()) {
+                    return apiResponse.getResponse().toString();
+                }
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        return null;
+    }
+
 }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/service/ConversationService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/service/ConversationService.java
index 5893db8a..ba5e3caf 100644
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/service/ConversationService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/service/ConversationService.java
@@ -31,7 +31,7 @@ private ConversationService(Context context) {
 
     public synchronized static ConversationService getInstance(Context context) {
         if (conversationService == null) {
-            conversationService = new ConversationService(context);
+            conversationService = new ConversationService(context.getApplicationContext());
         }
         return conversationService;
     }
@@ -77,13 +77,14 @@ public synchronized void addConversation(Conversation conversation) {
 
     public synchronized Integer createConversation(Conversation conversation) {
         ChannelFeed channelFeed = conversationClientService.createConversation(conversation);
-        if(channelFeed != null){
+        if (channelFeed != null) {
             if (conversation.getSupportIds() != null) {
                 ChannelFeed[] channelFeeds = new ChannelFeed[1];
                 channelFeeds[0] = channelFeed;
-                ChannelService.getInstance(context).processChannelFeedList(channelFeeds, false);;
+                ChannelService.getInstance(context).processChannelFeedList(channelFeeds, false);
+                ;
             }
-            if(channelFeed.getConversationPxy()!= null){
+            if (channelFeed.getConversationPxy() != null) {
                 addConversation(channelFeed.getConversationPxy());
                 return channelFeed.getConversationPxy().getId();
             }
@@ -105,11 +106,14 @@ public synchronized void deleteConversation(String userId) {
         conversationDatabaseService.deleteConversation(userId);
     }
 
-    public synchronized Integer isConversationExist(String userId,String topicId){
-        if(TextUtils.isEmpty(userId) ||  TextUtils.isEmpty(topicId)){
+    public synchronized Integer isConversationExist(String userId, String topicId) {
+        if (TextUtils.isEmpty(userId) || TextUtils.isEmpty(topicId)) {
             return null;
         }
-        return  conversationDatabaseService.isConversationExit(userId,topicId);
+        return conversationDatabaseService.isConversationExit(userId, topicId);
     }
 
+    public void updateTopicLocalImageUri(String imageUri, Integer conversationId) {
+        conversationDatabaseService.updateTopicLocalImageUri(imageUri, conversationId);
+    }
 }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/stat/MessageStatClientService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/stat/MessageStatClientService.java
index b6fe90b0..f2e0ceef 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/stat/MessageStatClientService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/stat/MessageStatClientService.java
@@ -12,26 +12,26 @@
  */
 public class MessageStatClientService extends MobiComKitClientService {
 
+    public static final String MESSAGE_STAT_URL = "/rest/ws/sms/stat/update";
     private static final String TAG = "MessageStatClientService";
-    public static final String MESSAGE_STAT_URL =  "/rest/ws/sms/stat/update";
 
 
     public MessageStatClientService(Context context) {
         super(context);
     }
 
-    public  String getMessageStatUrl() {
+    public String getMessageStatUrl() {
         return getBaseUrl() + MESSAGE_STAT_URL;
     }
 
 
     public String sendMessageStat(MessageStat messageStat) {
-        try{
+        try {
             return new HttpRequestUtils(context).postData(getMessageStatUrl(), "application/json", null, GsonUtils.getJsonFromObject(messageStat, MessageStat.class));
-        }catch (Exception e){
+        } catch (Exception e) {
             e.printStackTrace();
         }
-       return null;
+        return null;
     }
 
 }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/notification/MobiComPushReceiver.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/notification/MobiComPushReceiver.java
index 3ab224bd..fe5a94ca 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/notification/MobiComPushReceiver.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/notification/MobiComPushReceiver.java
@@ -11,6 +11,7 @@
 import com.applozic.mobicomkit.api.conversation.MobiComConversationService;
 import com.applozic.mobicomkit.api.conversation.SyncCallService;
 import com.applozic.mobicomkit.broadcast.BroadcastService;
+import com.applozic.mobicomkit.feed.InstantMessageResponse;
 import com.applozic.mobicomkit.feed.GcmMessageResponse;
 import com.applozic.mobicomkit.feed.MqttMessageResponse;
 import com.applozic.mobicommons.json.GsonUtils;
@@ -60,18 +61,23 @@
         notificationKeyList.add("APPLOZIC_24");//23 APPLOZIC_TEST
         notificationKeyList.add("APPLOZIC_25");//24 USER_ONLINE_STATUS
         notificationKeyList.add("APPLOZIC_26");//25 CONTACT_SYNC
-
+        notificationKeyList.add("APPLOZIC_27");//26 CONVERSATION_DELETED_NEW
+        notificationKeyList.add("APPLOZIC_28");//27 CONVERSATION_DELIVERED_AND_READ_NEW
+        notificationKeyList.add("APPLOZIC_29");//28 CONVERSATION_READ_NEW
+        notificationKeyList.add("APPLOZIC_30");//29 for user detail changes
+        notificationKeyList.add("APPLOZIC_33");//30 for Meta data update changes
+        notificationKeyList.add("APPLOZIC_34");//31 for user delete notification
     }
 
     public static boolean isMobiComPushNotification(Intent intent) {
-        Log.i(TAG, "checking for Applozic notification.");
+        Log.d(TAG, "checking for Applozic notification.");
         return isMobiComPushNotification(intent.getExtras());
     }
 
     public static boolean isMobiComPushNotification(Bundle bundle) {
         //This is to identify collapse key sent in notification..
         String payLoad = bundle.getString("collapse_key");
-        Log.i(TAG, "Received notification: " + payLoad);
+        Log.d(TAG, "Received notification");
 
         if (payLoad != null && payLoad.contains(MTCOM_PREFIX) || notificationKeyList.contains(payLoad)) {
             return true;
@@ -86,17 +92,17 @@ public static boolean isMobiComPushNotification(Bundle bundle) {
         }
     }
 
-    public static boolean isMobiComPushNotification(Map<String,String> data) {
+    public static boolean isMobiComPushNotification(Map<String, String> data) {
 
         //This is to identify collapse key sent in notification..
         String payLoad = data.toString();
-        Log.i(TAG, "Received notification: " + payLoad);
+        Log.d(TAG, "Received notification");
 
         if (payLoad != null && payLoad.contains(MTCOM_PREFIX) || notificationKeyList.contains(payLoad)) {
             return true;
         } else {
             for (String key : notificationKeyList) {
-                if(data.containsKey(key)){
+                if (data.containsKey(key)) {
                     return true;
                 }
             }
@@ -138,9 +144,10 @@ public static void processMessage(Context context, Bundle bundle, Map<String, St
         try {
             String payloadForDelivered = null, userConnected = null,
                     userDisconnected = null, payloadDeliveredAndRead = null, messageKey = null,
-                    messageSent = null, deleteConversationForContact = null,
+                    messageSent = null, deleteConversationForContact = null, deleteConversationForChannel = null,
                     deleteMessage = null, conversationReadResponse = null,
-                    userBlockedResponse = null, userUnBlockedResponse = null;
+                    userBlockedResponse = null, userUnBlockedResponse = null, conversationReadForContact = null, conversationReadForChannel = null, conversationReadForSingleMessage = null,
+                    userDetailChanged =null,userDeleteNotification =null;
             SyncCallService syncCallService = SyncCallService.getInstance(context);
 
             if (bundle != null) {
@@ -155,6 +162,11 @@ public static void processMessage(Context context, Bundle bundle, Map<String, St
                 conversationReadResponse = bundle.getString(notificationKeyList.get(9));
                 userBlockedResponse = bundle.getString(notificationKeyList.get(15));
                 userUnBlockedResponse = bundle.getString(notificationKeyList.get(16));
+                conversationReadForContact = bundle.getString(notificationKeyList.get(8));
+                conversationReadForChannel = bundle.getString(notificationKeyList.get(20));
+                deleteConversationForChannel = bundle.getString(notificationKeyList.get(22));
+                userDetailChanged = bundle.getString(notificationKeyList.get(29));
+                userDeleteNotification = bundle.getString(notificationKeyList.get(31));
             } else if (data != null) {
                 deleteConversationForContact = data.get(notificationKeyList.get(5));
                 deleteMessage = data.get(notificationKeyList.get(4));
@@ -167,7 +179,11 @@ public static void processMessage(Context context, Bundle bundle, Map<String, St
                 conversationReadResponse = data.get(notificationKeyList.get(9));
                 userBlockedResponse = data.get(notificationKeyList.get(15));
                 userUnBlockedResponse = data.get(notificationKeyList.get(16));
-
+                conversationReadForContact = data.get(notificationKeyList.get(8));
+                conversationReadForChannel = data.get(notificationKeyList.get(20));
+                deleteConversationForChannel = data.get(notificationKeyList.get(22));
+                userDetailChanged = data.get(notificationKeyList.get(29));
+                userDeleteNotification = data.get(notificationKeyList.get(31));
             }
 
             if (!TextUtils.isEmpty(payloadForDelivered)) {
@@ -205,6 +221,16 @@ public static void processMessage(Context context, Bundle bundle, Map<String, St
                 BroadcastService.sendConversationDeleteBroadcast(context, BroadcastService.INTENT_ACTIONS.DELETE_CONVERSATION.toString(), deleteConversationResponse.getMessage().toString(), 0, "success");
             }
 
+            if (!TextUtils.isEmpty(deleteConversationForChannel)) {
+                InstantMessageResponse instantMessageResponse = (InstantMessageResponse) GsonUtils.getObjectFromJson(deleteConversationForChannel, InstantMessageResponse.class);
+                if (processPushNotificationId(instantMessageResponse.getId())) {
+                    return;
+                }
+                addPushNotificationId(instantMessageResponse.getId());
+                syncCallService.deleteChannelConversationThread(instantMessageResponse.getMessage());
+                BroadcastService.sendConversationDeleteBroadcast(context, BroadcastService.INTENT_ACTIONS.DELETE_CONVERSATION.toString(), null, Integer.valueOf(instantMessageResponse.getMessage()), "success");
+            }
+
             if (!TextUtils.isEmpty(userConnected)) {
                 MqttMessageResponse userConnectedResponse = (MqttMessageResponse) GsonUtils.getObjectFromJson(userConnected, MqttMessageResponse.class);
                 if (processPushNotificationId(userConnectedResponse.getId())) {
@@ -294,6 +320,39 @@ public static void processMessage(Context context, Bundle bundle, Map<String, St
                 SyncCallService.getInstance(context).syncBlockUsers();
             }
 
+            if (!TextUtils.isEmpty(conversationReadForContact)) {
+                MqttMessageResponse conversationReadForContactResponse = (MqttMessageResponse) GsonUtils.getObjectFromJson(conversationReadForContact, MqttMessageResponse.class);
+                if (processPushNotificationId(conversationReadForContactResponse.getId())) {
+                    return;
+                }
+                addPushNotificationId(conversationReadForContactResponse.getId());
+                syncCallService.updateConversationReadStatus(conversationReadForContactResponse.getMessage().toString(), false);
+            }
+
+            if (!TextUtils.isEmpty(conversationReadForChannel)) {
+                InstantMessageResponse conversationReadForChannelResponse = (InstantMessageResponse) GsonUtils.getObjectFromJson(conversationReadForChannel, InstantMessageResponse.class);
+                if (processPushNotificationId(conversationReadForChannelResponse.getId())) {
+                    return;
+                }
+                addPushNotificationId(conversationReadForChannelResponse.getId());
+                syncCallService.updateConversationReadStatus(conversationReadForChannelResponse.getMessage(), true);
+            }
+
+            if (!TextUtils.isEmpty(userDetailChanged) || !TextUtils.isEmpty(userDeleteNotification)) {
+                MqttMessageResponse response = null;
+                if(!TextUtils.isEmpty(userDetailChanged)) {
+                    response = (MqttMessageResponse) GsonUtils.getObjectFromJson(userDetailChanged, MqttMessageResponse.class);
+                }else if(!TextUtils.isEmpty(userDeleteNotification)){
+                    response =  (MqttMessageResponse) GsonUtils.getObjectFromJson(userDeleteNotification, MqttMessageResponse.class);
+                }
+                if (processPushNotificationId(response.getId())) {
+                    return;
+                }
+                addPushNotificationId(response.getId());
+                String userId = response.getMessage().toString();
+                syncCallService.syncUserDetail(userId);
+            }
+
         } catch (Exception e) {
             e.printStackTrace();
         }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/notification/MuteNotificationAsync.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/notification/MuteNotificationAsync.java
new file mode 100644
index 00000000..06c33f3d
--- /dev/null
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/notification/MuteNotificationAsync.java
@@ -0,0 +1,59 @@
+package com.applozic.mobicomkit.api.notification;
+
+import android.content.Context;
+import android.os.AsyncTask;
+
+import com.applozic.mobicomkit.channel.service.ChannelService;
+import com.applozic.mobicomkit.feed.ApiResponse;
+
+/**
+ * Created by Adarsh on 12/30/16.
+ */
+
+public class MuteNotificationAsync extends AsyncTask<Void, Void, Boolean> {
+
+    private final MuteNotificationAsync.TaskListener taskListener;
+    private final Context context;
+    private ApiResponse apiResponse;
+    private Exception mException;
+    private MuteNotificationRequest muteNotificationRequest;
+
+    public MuteNotificationAsync(Context context, MuteNotificationAsync.TaskListener listener, MuteNotificationRequest request) {
+        this.context = context;
+        this.taskListener = listener;
+        this.muteNotificationRequest = request;
+    }
+
+    @Override
+    protected Boolean doInBackground(Void... params) {
+        try {
+            apiResponse = ChannelService.getInstance(context).muteNotifications(muteNotificationRequest);
+        } catch (Exception e) {
+            e.printStackTrace();
+            mException = e;
+            return false;
+        }
+        return true;
+    }
+
+    @Override
+    protected void onPostExecute(final Boolean result) {
+        if (result && this.taskListener != null) {
+            this.taskListener.onSuccess(apiResponse);
+        } else if (mException != null && this.taskListener != null) {
+            this.taskListener.onFailure(apiResponse, mException);
+        }
+        this.taskListener.onCompletion();
+    }
+
+    public interface TaskListener {
+
+        void onSuccess(ApiResponse apiResponse);
+
+        void onFailure(ApiResponse apiResponse, Exception exception);
+
+        void onCompletion();
+    }
+
+
+}
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/notification/MuteNotificationRequest.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/notification/MuteNotificationRequest.java
new file mode 100644
index 00000000..351ce792
--- /dev/null
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/notification/MuteNotificationRequest.java
@@ -0,0 +1,72 @@
+package com.applozic.mobicomkit.api.notification;
+
+import android.text.TextUtils;
+
+import com.applozic.mobicommons.json.JsonMarker;
+import com.google.gson.annotations.SerializedName;
+
+/**
+ * Created by Adarsh on 12/30/16.
+ */
+
+public class MuteNotificationRequest extends JsonMarker {
+
+    String userId;
+    @SerializedName("id")
+    Integer groupId;            //Group unique identifier
+    String clientGroupId;        //	Client Group unique identifier
+    Long notificationAfterTime; //Time Interval for which notification has be be disabled
+
+    public MuteNotificationRequest(String clientGroupId, Long notificationAfterTime) {
+        this.clientGroupId = clientGroupId;
+        this.notificationAfterTime = notificationAfterTime;
+    }
+
+    public MuteNotificationRequest(Integer groupId, Long notificationAfterTime) {
+        this.groupId = groupId;
+        this.notificationAfterTime = notificationAfterTime;
+    }
+
+    public MuteNotificationRequest(Long notificationAfterTime, String userId) {
+        this.notificationAfterTime = notificationAfterTime;
+        this.userId = userId;
+    }
+
+    public String getUserId() {
+        return userId;
+    }
+
+    public void setUserId(String userId) {
+        this.userId = userId;
+    }
+
+    public Integer getId() {
+        return groupId;
+    }
+
+    public void setId(Integer groupId) {
+        this.groupId = groupId;
+    }
+
+    public String getClientGroupId() {
+        return clientGroupId;
+    }
+
+    public void setClientGroupId(String clientGroupId) {
+        this.clientGroupId = clientGroupId;
+    }
+
+    public Long getNotificationAfterTime() {
+        return notificationAfterTime;
+    }
+
+    public void setNotificationAfterTime(Long notificationAfterTime) {
+        this.notificationAfterTime = notificationAfterTime;
+    }
+
+    public boolean isRequestValid() {
+
+        return !((notificationAfterTime == null || notificationAfterTime <= 0) ||
+                (TextUtils.isEmpty(userId) && TextUtils.isEmpty(clientGroupId) && groupId == null));
+    }
+}
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/notification/NotificationService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/notification/NotificationService.java
index 20dcc447..eaeb5ed4 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/notification/NotificationService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/notification/NotificationService.java
@@ -1,16 +1,14 @@
 package com.applozic.mobicomkit.api.notification;
 
-import android.app.ActivityManager;
 import android.app.PendingIntent;
 import android.content.Context;
 import android.content.Intent;
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
 import android.media.RingtoneManager;
+import android.net.Uri;
 import android.support.v4.app.NotificationCompat;
-import android.support.v4.app.TaskStackBuilder;
 import android.text.TextUtils;
-import android.util.Log;
 
 import com.applozic.mobicomkit.ApplozicClient;
 import com.applozic.mobicomkit.api.MobiComKitClientService;
@@ -19,6 +17,7 @@
 import com.applozic.mobicomkit.api.attachment.FileClientService;
 import com.applozic.mobicomkit.api.attachment.FileMeta;
 import com.applozic.mobicomkit.api.conversation.Message;
+import com.applozic.mobicomkit.channel.service.ChannelService;
 import com.applozic.mobicomkit.contact.AppContactService;
 import com.applozic.mobicommons.commons.core.utils.Utils;
 import com.applozic.mobicommons.commons.image.ImageUtils;
@@ -31,7 +30,6 @@
 import java.io.File;
 import java.io.InputStream;
 import java.net.HttpURLConnection;
-import java.util.List;
 
 /**
  * Created with IntelliJ IDEA.
@@ -43,8 +41,8 @@
 
     private static final int NOTIFICATION_ID = 1000;
     private static final String NOTIFICATION_SMALL_ICON_METADATA = "com.applozic.mobicomkit.notification.smallIcon";
-    private Context context;
     private static final String TAG = "NotificationService";
+    private Context context;
     private int iconResourceId;
     private int wearable_action_title;
     private int wearable_action_label;
@@ -59,35 +57,50 @@ public NotificationService(int iconResourceID, Context context, int wearable_act
         this.wearable_action_label = wearable_action_label;
         this.wearable_action_title = wearable_action_title;
         this.wearable_send_icon = wearable_send_icon;
-        this.applozicClient =  ApplozicClient.getInstance(context);
+        this.applozicClient = ApplozicClient.getInstance(context);
         this.appContactService = new AppContactService(context);
-        activityToOpen = Utils.getMetaDataValue(context,"activity.open.on.notification");
+        activityToOpen = Utils.getMetaDataValue(context, "activity.open.on.notification");
     }
 
     public void notifyUser(Contact contact, Channel channel, Message message) {
-        if(ApplozicClient.getInstance(context).isNotificationDisabled()){
-            Log.i(TAG,"Notification is disabled");
+        if (ApplozicClient.getInstance(context).isNotificationDisabled()) {
+            Utils.printLog(context,TAG, "Notification is disabled");
             return;
         }
-        String title;
+        String title = null;
         String notificationText;
+        Bitmap notificationIconBitmap = null;
         Contact displayNameContact = null;
         if (message.getGroupId() != null) {
-            title = ChannelUtils.getChannelTitleName(channel, MobiComUserPreference.getInstance(context).getUserId());
-            displayNameContact = appContactService.getContactById(message.getTo());
+            if (channel == null) {
+                return;
+            }
+            if (Channel.GroupType.GROUPOFTWO.getValue().equals(channel.getType())) {
+                String userId = ChannelService.getInstance(context).getGroupOfTwoReceiverUserId(channel.getKey());
+                if (!TextUtils.isEmpty(userId)) {
+                    Contact newContact = appContactService.getContactById(userId);
+                    notificationIconBitmap = appContactService.downloadContactImage(context, newContact);
+                    title = newContact.getDisplayName();
+                }
+            } else {
+                displayNameContact = appContactService.getContactById(message.getTo());
+                title = ChannelUtils.getChannelTitleName(channel, MobiComUserPreference.getInstance(context).getUserId());
+                notificationIconBitmap = appContactService.downloadGroupImage(context, channel);
+            }
         } else {
             title = contact.getDisplayName();
+            notificationIconBitmap = appContactService.downloadContactImage(context, contact);
         }
 
         if (message.getContentType() == Message.ContentType.LOCATION.getValue()) {
             notificationText = MobiComKitConstants.LOCATION;
         } else if (message.getContentType() == Message.ContentType.AUDIO_MSG.getValue()) {
             notificationText = MobiComKitConstants.AUDIO;
-        } else if (message.getContentType() == Message.ContentType.VIDEO_MSG.getValue()){
+        } else if (message.getContentType() == Message.ContentType.VIDEO_MSG.getValue()) {
             notificationText = MobiComKitConstants.VIDEO;
-        } else if(message.hasAttachment() && TextUtils.isEmpty(message.getMessage())){
+        } else if (message.hasAttachment() && TextUtils.isEmpty(message.getMessage())) {
             notificationText = MobiComKitConstants.ATTACHMENT;
-        }else {
+        } else {
             notificationText = message.getMessage();
         }
 
@@ -101,50 +114,41 @@ public void notifyUser(Contact contact, Channel channel, Message message) {
         Integer smallIconResourceId = Utils.getMetaDataValueForResources(context, NOTIFICATION_SMALL_ICON_METADATA) != null ? Utils.getMetaDataValueForResources(context, NOTIFICATION_SMALL_ICON_METADATA) : iconResourceId;
         Intent intent = new Intent(context, activity);
         intent.putExtra(MobiComKitConstants.MESSAGE_JSON_INTENT, GsonUtils.getJsonFromObject(message, Message.class));
-        if(applozicClient.isChatListOnNotificationIsHidden()) {
-            intent.putExtra("takeOrder",true);
+        if (applozicClient.isChatListOnNotificationIsHidden()) {
+            intent.putExtra("takeOrder", true);
         }
-        if(applozicClient.isContextBasedChat()){
-            intent.putExtra("contextBasedChat",true);
+        if (applozicClient.isContextBasedChat()) {
+            intent.putExtra("contextBasedChat", true);
         }
         intent.putExtra("sms_body", "text");
         intent.setType("vnd.android-dir/mms-sms");
-        PendingIntent pendingIntent;
 
-        TaskStackBuilder stackBuilder = TaskStackBuilder.create(context);
-        if (!isRunning(context)) {
-            stackBuilder.addParentStack(activity);
-            stackBuilder.addNextIntent(intent);
-            pendingIntent = stackBuilder.getPendingIntent((int) (System.currentTimeMillis() & 0xfffffff), PendingIntent.FLAG_UPDATE_CURRENT);
-        }else {
-            pendingIntent = PendingIntent.getActivity(context, (int) (System.currentTimeMillis() & 0xfffffff),
-                    intent, PendingIntent.FLAG_UPDATE_CURRENT);
-        }
+        PendingIntent pendingIntent = PendingIntent.getActivity(context, (int) (System.currentTimeMillis() & 0xfffffff),
+                intent, PendingIntent.FLAG_UPDATE_CURRENT);
+
         NotificationCompat.Builder mBuilder =
                 new NotificationCompat.Builder(context)
                         .setSmallIcon(smallIconResourceId)
-                        .setLargeIcon(BitmapFactory.decodeResource(context.getResources(), iconResourceId))
+                        .setLargeIcon(ApplozicClient.getInstance(context).isShowAppIconInNotification() ? BitmapFactory.decodeResource(context.getResources(), iconResourceId) : notificationIconBitmap != null ? notificationIconBitmap : BitmapFactory.decodeResource(context.getResources(), context.getResources().getIdentifier(channel != null && !Channel.GroupType.GROUPOFTWO.getValue().equals(channel.getType()) ? applozicClient.getDefaultChannelImage() : applozicClient.getDefaultContactImage(), "drawable", context.getPackageName())))
                         .setCategory(NotificationCompat.CATEGORY_MESSAGE)
                         .setPriority(NotificationCompat.PRIORITY_MAX)
                         .setWhen(System.currentTimeMillis())
                         .setContentTitle(title)
-                        .setContentText(channel != null ? displayNameContact.getDisplayName() + ": " + notificationText : notificationText)
-                        .setSound(RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION));
+                        .setContentText(channel != null && !Channel.GroupType.GROUPOFTWO.getValue().equals(channel.getType()) ? displayNameContact.getDisplayName() + ": " + notificationText : notificationText)
+                        .setSound(TextUtils.isEmpty(MobiComUserPreference.getInstance(context).getNotificationSoundFilePath())?RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION): Uri.parse(MobiComUserPreference.getInstance(context).getNotificationSoundFilePath()));
         mBuilder.setContentIntent(pendingIntent);
         mBuilder.setAutoCancel(true);
         if (message.hasAttachment()) {
             try {
-                InputStream in;
                 FileMeta fileMeta = message.getFileMetas();
                 HttpURLConnection httpConn = null;
                 if (fileMeta.getThumbnailUrl() != null) {
                     httpConn = new MobiComKitClientService(context).openHttpConnection(fileMeta.getThumbnailUrl());
                     int response = httpConn.getResponseCode();
                     if (response == HttpURLConnection.HTTP_OK) {
-                        in = httpConn.getInputStream();
-                        Bitmap bitmap = BitmapFactory.decodeStream(in);
-                        String imageName = fileMeta.getBlobKeyString() + "." + FileUtils.getFileFormat(fileMeta.getName());
-                        File file = new FileClientService(context).getFilePath(imageName, context, "image", true);
+                        Bitmap bitmap = BitmapFactory.decodeStream(httpConn.getInputStream());
+                        String imageName = FileUtils.getName(fileMeta.getName()) + message.getCreatedAtTime() + "." + FileUtils.getFileFormat(fileMeta.getName());
+                        File file = FileClientService.getFilePath(imageName, context, "image", true);
                         ImageUtils.saveImageToInternalStorage(file, bitmap);
                         mBuilder.setStyle(new NotificationCompat.BigPictureStyle().bigPicture(bitmap));
                     }
@@ -166,16 +170,4 @@ public void notifyUser(Contact contact, Channel channel, Message message) {
         }
     }
 
-    public boolean isRunning(Context ctx) {
-        try {
-            ActivityManager activityManager = (ActivityManager) ctx.getSystemService(Context.ACTIVITY_SERVICE);
-            List<ActivityManager.RunningTaskInfo> tasks = activityManager.getRunningTasks(Integer.MAX_VALUE);
-            return tasks != null && tasks.size() > 1;
-        } catch (Exception e) {
-            e.printStackTrace();
-        }
-        return false;
-    }
-
-
 }
\ No newline at end of file
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/notification/VideoCallNotificationHelper.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/notification/VideoCallNotificationHelper.java
new file mode 100644
index 00000000..e6b7231c
--- /dev/null
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/notification/VideoCallNotificationHelper.java
@@ -0,0 +1,422 @@
+package com.applozic.mobicomkit.api.notification;
+
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.support.annotation.NonNull;
+import android.support.v4.content.LocalBroadcastManager;
+import android.text.TextUtils;
+import android.util.Log;
+
+import com.applozic.mobicomkit.api.MobiComKitConstants;
+import com.applozic.mobicomkit.api.account.user.MobiComUserPreference;
+import com.applozic.mobicomkit.api.conversation.Message;
+import com.applozic.mobicomkit.api.conversation.MessageIntentService;
+import com.applozic.mobicomkit.api.conversation.MobiComConversationService;
+import com.applozic.mobicomkit.broadcast.BroadcastService;
+import com.applozic.mobicomkit.contact.AppContactService;
+import com.applozic.mobicommons.people.contact.Contact;
+
+import java.util.HashMap;
+import java.util.Map;
+
+/**
+ * Created by devashish on 08/08/16.
+ */
+public class VideoCallNotificationHelper {
+
+    public static final String CALL_STARTED = "CALL_STARTED";
+    public static final String CALL_END = "CALL_END";
+    public static final String MSG_TYPE = "MSG_TYPE";
+    public static final String CALL_ID = "CALL_ID";
+    public static final String CALL_DIALED = "CALL_DIALED";
+    public static final String CALL_REJECTED = "CALL_REJECTED";
+    public static final String CALL_ANSWERED = "CALL_ANSWERED";
+    public static final String CALL_MISSED = "CALL_MISSED";
+    public static final String CALL_CANCELED = "CALL_CANCELED";
+    public static final String CALL_AUDIO_ONLY = "CALL_AUDIO_ONLY";
+    public static final int MAX_NOTIFICATION_RING_DURATION = 1 * 60 * 1000;
+    public static final String NOTIFICATION_ACTIVITY_NAME = "com.applozic.audiovideo.activity.CallActivity";
+    public static final String CALL_DURATION = "CALL_DURATION";
+    private static final String TAG = "CallNotiHandler";
+    String videoCallId;
+    Context context;
+    boolean isAudioOnly;
+
+    private MobiComConversationService conversationService;
+    private AppContactService baseContactService;
+
+    public VideoCallNotificationHelper(Context context) {
+        this.context = context;
+        this.isAudioOnly = false;
+        init();
+    }
+
+    public VideoCallNotificationHelper(Context context, boolean isAudioOnly) {
+        this.context = context;
+        this.isAudioOnly = isAudioOnly;
+        init();
+    }
+
+    public static String getStatus(Map<String, String> metaDataMap) {
+
+        String type = metaDataMap.get(MSG_TYPE);
+
+        String audioORVideoCallPrefix = Boolean.valueOf(metaDataMap.get(CALL_AUDIO_ONLY)) ? "Audio call" : "Video call";
+        if (type.equals(CALL_STARTED)) {
+            return audioORVideoCallPrefix + " started";
+        } else if (type.equals(CALL_END)) {
+            return audioORVideoCallPrefix;
+        } else if (type.equals(CALL_REJECTED)) {
+            return "Call busy";
+        } else {
+            return "Missed " + audioORVideoCallPrefix;
+        }
+    }
+
+    public static boolean isMissedCall(Message message) {
+        String msgType = message.getMetaDataValueForKey(VideoCallNotificationHelper.MSG_TYPE);
+        return (VideoCallNotificationHelper.CALL_MISSED.equals(msgType)
+                || VideoCallNotificationHelper.CALL_REJECTED.equals(msgType)
+                || VideoCallNotificationHelper.CALL_CANCELED.equals(msgType));
+    }
+
+    public static boolean isAudioCall(Message message) {
+        return Boolean.parseBoolean(message.getMetaDataValueForKey(CALL_AUDIO_ONLY));
+    }
+
+    public static void buildVideoCallNotification(Context context, Message message) {
+        Map<String, String> metaDataMap = message.getMetadata();
+        Contact contact = new AppContactService(context).getContactById(message.getContactIds());
+        String audioORVideoCallPrefix = Boolean.valueOf(metaDataMap.get(CALL_AUDIO_ONLY)) ? "audio call " : "video call ";
+        if (metaDataMap.get(VideoCallNotificationHelper.MSG_TYPE).equals(VideoCallNotificationHelper.CALL_MISSED)) {
+            Message message1 = new Message(message);
+            message1.setMessage("You missed " + audioORVideoCallPrefix + " from " + contact.getDisplayName());
+            BroadcastService.sendNotificationBroadcast(context, message1);
+        }
+    }
+
+    public void init() {
+        this.conversationService = new MobiComConversationService(context);
+        this.baseContactService = new AppContactService(context);
+    }
+
+    public Map<String, String> getDialCallMetaData() {
+
+        Map<String, String> metaData = new HashMap<>();
+        metaData.put(MSG_TYPE, CALL_DIALED);
+        metaData.put(CALL_ID, videoCallId);
+        metaData.put(CALL_AUDIO_ONLY, Boolean.toString(isAudioOnly));
+        return metaData;
+
+    }
+
+    public Map<String, String> getAnswerCallMetaData() {
+
+        Map<String, String> metaData = new HashMap<>();
+
+        metaData.put(CALL_ID, videoCallId);
+        metaData.put(MSG_TYPE, CALL_ANSWERED);
+        metaData.put(CALL_AUDIO_ONLY, Boolean.toString(isAudioOnly));
+        return metaData;
+
+    }
+
+    public Map<String, String> getVideoCallStartedMap() {
+
+        Map<String, String> metaData = new HashMap<>();
+        metaData.put(MSG_TYPE, CALL_STARTED);
+        metaData.put(CALL_ID, videoCallId);
+        metaData.put(CALL_AUDIO_ONLY, Boolean.toString(isAudioOnly));
+        return metaData;
+
+    }
+
+    public Map<String, String> getVideoCallEndMap(String callDuration) {
+
+        Map<String, String> metaData = new HashMap<>();
+        metaData.put(MSG_TYPE, CALL_END);
+        metaData.put(CALL_ID, videoCallId);
+        metaData.put(CALL_DURATION, callDuration);
+        metaData.put(CALL_AUDIO_ONLY, Boolean.toString(isAudioOnly));
+        return metaData;
+
+    }
+
+    public Map<String, String> getVideoCanceledMap() {
+
+        Map<String, String> metaData = new HashMap<>();
+        metaData.put(MSG_TYPE, CALL_CANCELED);
+        metaData.put(CALL_ID, videoCallId);
+        metaData.put(CALL_AUDIO_ONLY, Boolean.toString(isAudioOnly));
+        return metaData;
+
+    }
+
+    public Map<String, String> getRejectedCallMap() {
+
+        Map<String, String> metaData = new HashMap<>();
+        metaData.put(CALL_ID, videoCallId);
+        metaData.put(MSG_TYPE, CALL_REJECTED);
+        metaData.put(CALL_AUDIO_ONLY, Boolean.toString(isAudioOnly));
+        return metaData;
+    }
+
+    public Map<String, String> getMissedCallMap() {
+        Map<String, String> metaData = new HashMap<>();
+        metaData.put(CALL_ID, videoCallId);
+        metaData.put(MSG_TYPE, CALL_MISSED);
+        metaData.put(CALL_AUDIO_ONLY, Boolean.toString(isAudioOnly));
+        return metaData;
+    }
+
+    public String sendVideoCallRequest(Contact contact, boolean audioOnly) {
+        Message notificationMessage = getNotificationMessage(contact);
+        this.videoCallId = MobiComUserPreference.getInstance(context).getDeviceKeyString()
+                + ":" + notificationMessage.getCreatedAtTime();
+        notificationMessage.setMessage(videoCallId);
+        notificationMessage.setMetadata(getDialCallMetaData());
+        if (audioOnly) {
+            notificationMessage.getMetadata().put(CALL_AUDIO_ONLY, "true");
+        }
+        conversationService.sendMessage(notificationMessage, MessageIntentService.class);
+        return videoCallId;
+
+    }
+
+    /**
+     * @param contact
+     * @return
+     */
+
+    public String sendVideoCallRequest(Contact contact) {
+        return sendVideoCallRequest(contact, false);
+    }
+
+    /**
+     * @param contact
+     * @return
+     */
+    public String sendAudioCallRequest(Contact contact) {
+        return sendVideoCallRequest(contact, true);
+    }
+
+    public void sendVideoCallAnswer(Contact contact, String videoCallId) {
+
+        Log.i(TAG, "sendVideoCallAnswer()");
+
+        this.videoCallId = videoCallId;
+        Message notificationMessage = getNotificationMessage(contact);
+        notificationMessage.setMessage(videoCallId);
+        notificationMessage.setMetadata(getAnswerCallMetaData());
+        conversationService.sendMessage(notificationMessage, MessageIntentService.class);
+        Log.i(TAG, "sendVideoCallAnswer()  END");
+
+    }
+
+//    public void sendVideoCallCanceled(Contact contact, String videoCallId) {
+//
+//        Message statusMessage = getVideoCallStatusMessage(contact);
+//        statusMessage.setMetadata(getVideoCanceledMap());
+//        statusMessage.setMessage(videoCallId);
+//        conversationService.sendMessage(statusMessage, MessageIntentService.class);
+//
+//    }
+
+//    public void sendVideoCallCanceledNotification(Contact contact, String videoCallId) {
+//
+//        Message statusMessage = getNotificationMessage(contact);
+//        statusMessage.setMetadata(getVideoCanceledMap());
+//        statusMessage.setMessage(videoCallId);
+//        conversationService.sendMessage(statusMessage, MessageIntentService.class);
+//
+//    }
+
+    public void sendVideoCallReject(Contact contact, String videoCallId) {
+        this.videoCallId = videoCallId;
+        Message notificationMessage = getNotificationMessage(contact);
+        notificationMessage.setMetadata(getRejectedCallMap());
+        notificationMessage.setMessage(videoCallId);
+        conversationService.sendMessage(notificationMessage, MessageIntentService.class);
+    }
+
+    public void sendCallMissed(Contact contact, String videoCallId) {
+        this.videoCallId = videoCallId;
+        Message notificationMessage = getNotificationMessage(contact);
+        notificationMessage.setMetadata(getMissedCallMap());
+        notificationMessage.setMessage(videoCallId);
+        conversationService.sendMessage(notificationMessage, MessageIntentService.class);
+    }
+
+
+//    public void updateVideoMessageStatus(String callId,String type){
+//        messageDatabaseService.updateVideoCallMetaData(callId,type);
+//    }
+
+    public void sendVideoCallStarted(Contact contact, String videoCallId) {
+        Message statusMessage = getVideoCallStatusMessage(contact);
+        statusMessage.setMetadata(getVideoCallStartedMap());
+        statusMessage.setMessage(videoCallId);
+        conversationService.sendMessage(statusMessage, MessageIntentService.class);
+    }
+
+    public void sendVideoCallEnd(Contact contact, String videoCallId, String duration) {
+
+        Message statusMessage = getVideoCallStatusMessage(contact);
+        statusMessage.setMetadata(getVideoCallEndMap(duration));
+        statusMessage.setMessage("Call End");
+        conversationService.sendMessage(statusMessage, MessageIntentService.class);
+
+    }
+
+    @NonNull
+    private Message getNotificationMessage(Contact contact) {
+        Message notificationMessage = new Message();
+        MobiComUserPreference userPreferences = MobiComUserPreference.getInstance(context);
+
+        notificationMessage.setContactIds(contact.getContactIds());
+        notificationMessage.setTo(contact.getContactIds());
+        notificationMessage.setCreatedAtTime(System.currentTimeMillis());
+
+        notificationMessage.setStoreOnDevice(Boolean.TRUE);
+        notificationMessage.setSendToDevice(Boolean.TRUE);
+        notificationMessage.setContentType(Message.ContentType.VIDEO_CALL_NOTIFICATION_MSG.getValue());
+        notificationMessage.setDeviceKeyString(userPreferences.getDeviceKeyString());
+        notificationMessage.setMessage(videoCallId);
+        return notificationMessage;
+    }
+
+    @NonNull
+    private Message getVideoCallStatusMessage(Contact contact) {
+
+        Message notificationMessage = new Message();
+        MobiComUserPreference userPreferences = MobiComUserPreference.getInstance(context);
+
+        notificationMessage.setContactIds(contact.getContactIds());
+        notificationMessage.setTo(contact.getContactIds());
+        notificationMessage.setCreatedAtTime(System.currentTimeMillis());
+
+        notificationMessage.setStoreOnDevice(Boolean.TRUE);
+        notificationMessage.setSendToDevice(Boolean.TRUE);
+        notificationMessage.setContentType(Message.ContentType.VIDEO_CALL_STATUS_MSG.getValue());
+        notificationMessage.setDeviceKeyString(userPreferences.getDeviceKeyString());
+        return notificationMessage;
+    }
+
+    public void handleVideoCallNotificationMessages(final Message message) {
+
+        Map<String, String> valueMap = message.getMetadata();
+        String type = valueMap.get(MSG_TYPE);
+        videoCallId = valueMap.get(CALL_ID);
+
+        if (TextUtils.isEmpty(type)) {
+            return;
+        }
+
+        if (type.equals(CALL_DIALED)) {
+
+            handleIncomingVideoNotification(message);
+
+        } else if (type.equals(CALL_ANSWERED)) {
+
+            Intent intent = new Intent(MobiComKitConstants.APPLOZIC_VIDEO_CALL_ANSWER);
+            intent.putExtra(CALL_ID, videoCallId);
+            LocalBroadcastManager.getInstance(context).sendBroadcast(intent);
+
+        } else if (type.equals(CALL_REJECTED)) {
+
+            Intent intent = new Intent(MobiComKitConstants.APPLOZIC_VIDEO_CALL_REJECTED);
+            intent.putExtra(CALL_ID, videoCallId);
+            LocalBroadcastManager.getInstance(context).sendBroadcast(intent);
+
+            if (!message.isTypeOutbox() && BroadcastService.videoCallAcitivityOpend) {
+
+                Contact contact = baseContactService.getContactById(message.getContactIds());
+                Message statusMessage = getVideoCallStatusMessage(contact);
+                statusMessage.setMessage("Call Busy");
+                statusMessage.setMetadata(getRejectedCallMap());
+                conversationService.sendMessage(statusMessage, MessageIntentService.class);
+
+            }
+
+        } else if (type.equals(CALL_MISSED)) {
+
+            Intent intent = new Intent(CALL_MISSED);
+            intent.putExtra(CALL_ID, videoCallId);
+            LocalBroadcastManager.getInstance(context).sendBroadcast(intent);
+
+        } else if (type.equals(CALL_CANCELED)) {
+
+            Intent intent = new Intent(CALL_CANCELED);
+            intent.putExtra(CALL_ID, videoCallId);
+            LocalBroadcastManager.getInstance(context).sendBroadcast(intent);
+
+        } else if (type.equals(CALL_END)) {
+            Intent intent = new Intent(CALL_END);
+            intent.putExtra(CALL_ID, videoCallId);
+            LocalBroadcastManager.getInstance(context).sendBroadcast(intent);
+        }
+
+    }
+
+    private void handleIncomingVideoNotification(Message msg) {
+
+        String isAudioCallOnly = msg.getMetadata().get(CALL_AUDIO_ONLY);
+        boolean staleNotification = System.currentTimeMillis() - msg.getCreatedAtTime() > MAX_NOTIFICATION_RING_DURATION;
+        //OR SELF Connecting
+
+        if (staleNotification || msg.isTypeOutbox()) {
+
+            //Contact contact = baseContactService.getContactById(msg.getContactIds());
+            //sendCallMissed(contact, msg.getMessage());
+            Log.i(TAG, "notification not valid ignoring..");
+            return;
+
+        }
+
+        if (BroadcastService.callRinging) {
+
+            Contact contactDetail = baseContactService.getContactById(msg.getTo());
+            VideoCallNotificationHelper helper = new VideoCallNotificationHelper(context, isAudioOnly);
+            helper.sendVideoCallReject(contactDetail, videoCallId);
+            return;
+        }
+
+        if (BroadcastService.videoCallAcitivityOpend) {
+
+            Intent intent = new Intent(MobiComKitConstants.APPLOZIC_VIDEO_DIALED);
+            intent.putExtra("CONTACT_ID", msg.getTo());
+            intent.putExtra(CALL_ID, videoCallId);
+            LocalBroadcastManager.getInstance(context).sendBroadcast(intent);
+            return;
+        }
+
+        Class activityToOpen = null;
+        try {
+            activityToOpen = Class.forName(NOTIFICATION_ACTIVITY_NAME);
+
+        } catch (Exception e) {
+
+        }
+        Intent intent1 = new Intent(context, activityToOpen);
+        intent1.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+        intent1.putExtra("CONTACT_ID", msg.getTo());
+        intent1.putExtra(CALL_ID, videoCallId);
+
+        if (!TextUtils.isEmpty(isAudioCallOnly) && "true".equals(isAudioCallOnly)) {
+            intent1.putExtra(CALL_AUDIO_ONLY, true);
+        }
+        context.startActivity(intent1);
+        return;
+    }
+
+    public void sendVideoCallMissedMessage(Contact contactToCall, String callId) {
+        Message notificationMessage = getVideoCallStatusMessage(contactToCall);
+        notificationMessage.setMetadata(getMissedCallMap());
+        notificationMessage.setMessage("Call Missed");
+        conversationService.sendMessage(notificationMessage, MessageIntentService.class);
+
+    }
+
+
+}
\ No newline at end of file
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/notification/WearableNotificationWithVoice.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/notification/WearableNotificationWithVoice.java
index 873a67cf..01b691a0 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/notification/WearableNotificationWithVoice.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/notification/WearableNotificationWithVoice.java
@@ -20,6 +20,7 @@
  */
 public class WearableNotificationWithVoice {
 
+    public static final String EXTRA_VOICE_REPLY = "extra_voice_reply";
     Class<?> notificationHandler;
     Context mContext;
     int actionIconResId;
@@ -29,8 +30,6 @@
     int notificationId;
     PendingIntent pendingIntent;
 
-    public static final String EXTRA_VOICE_REPLY = "extra_voice_reply";
-
     /**
      * @param notificationBuilder
      * @param actionTitleId
@@ -69,17 +68,17 @@ public void sendNotification() throws Exception {
         if (pendingIntent == null && notificationHandler == null) {
             throw new RuntimeException("Either pendingIntent or handler class requires.");
         }
-        Action action = buildWearableAction();
-        Notification notification = notificationBuilder.extend(new WearableExtender().addAction(action)).build();
+        //Action action = buildWearableAction(); removed remote input action for now
+        Notification notification = notificationBuilder.extend(new WearableExtender()).build();
 
-        if(ApplozicClient.getInstance(mContext).isNotificationSmallIconHidden() && Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN ){
+        if (ApplozicClient.getInstance(mContext).isNotificationSmallIconHidden() && Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
             int smallIconViewId = mContext.getResources().getIdentifier("right_icon", "id", android.R.class.getPackage().getName());
             if (smallIconViewId != 0) {
 
                 if (notification.contentIntent != null) {
                     notification.contentView.setViewVisibility(smallIconViewId, View.INVISIBLE);
                 }
-                if( Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP ){
+                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
                     if (notification.headsUpContentView != null) {
                         notification.headsUpContentView.setViewVisibility(smallIconViewId, View.INVISIBLE);
                     }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/people/ChannelInfo.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/people/ChannelInfo.java
index 0de19878..9f197703 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/people/ChannelInfo.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/people/ChannelInfo.java
@@ -81,8 +81,8 @@ public ChannelMetadata getChannelMetadata() {
     public void setChannelMetadata(ChannelMetadata channelMetadata) {
         this.channelMetadata = channelMetadata;
         if (channelMetadata != null) {
-            if(metadata == null){
-                metadata  = new HashMap<String, String>();
+            if (metadata == null) {
+                metadata = new HashMap<String, String>();
             }
             metadata.put(ChannelMetadata.CREATE_GROUP_MESSAGE, channelMetadata.getCreateGroupMessage());
             metadata.put(ChannelMetadata.ADD_MEMBER_MESSAGE, channelMetadata.getAddMemberMessage());
@@ -92,9 +92,19 @@ public void setChannelMetadata(ChannelMetadata channelMetadata) {
             metadata.put(ChannelMetadata.JOIN_MEMBER_MESSAGE, channelMetadata.getJoinMemberMessage());
             metadata.put(ChannelMetadata.DELETED_GROUP_MESSAGE, channelMetadata.getDeletedGroupMessage());
             metadata.put(ChannelMetadata.REMOVE_MEMBER_MESSAGE, channelMetadata.getRemoveMemberMessage());
+            metadata.put(ChannelMetadata.HIDE_METADATA_NOTIFICATION, channelMetadata.getHideMetaDataNotification() + "");
+
         }
     }
 
+    public Map<String, String> getMetadata() {
+        return metadata;
+    }
+
+    public void setMetadata(Map<String, String> metadata) {
+        this.metadata = metadata;
+    }
+
     @Override
     public String toString() {
         return "ChannelInfo{" +
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/people/MTUserClientService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/people/MTUserClientService.java
index 25634171..a6fa2847 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/people/MTUserClientService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/people/MTUserClientService.java
@@ -16,20 +16,20 @@
  */
 public class MTUserClientService extends MobiComKitClientService {
 
+    public static final String CHECK_FOR_MT_USER = "/rest/ws/contact/v2/ismtexter";
+
     public MTUserClientService(Context context) {
         super(context);
     }
 
-    public static final String CHECK_FOR_MT_USER = "/rest/ws/contact/v2/ismtexter";
-
-    public String getCheckForMtUser(){
+    public String getCheckForMtUser() {
         return getBaseUrl() + CHECK_FOR_MT_USER;
     }
 
     public ContactContent getContactContent(String contactNumber) {
         String response = null;
         try {
-            response = new HttpRequestUtils(context).getResponse(getCheckForMtUser()+ "?requestSource=1&contactNumber=" + URLEncoder.encode(contactNumber, "UTF-8"), "text/plain", "application/json");
+            response = new HttpRequestUtils(context).getResponse(getCheckForMtUser() + "?requestSource=1&contactNumber=" + URLEncoder.encode(contactNumber, "UTF-8"), "text/plain", "application/json");
         } catch (UnsupportedEncodingException e) {
             e.printStackTrace();
         }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/people/PeopleClientService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/people/PeopleClientService.java
index 1f8fd4eb..5b17aee1 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/people/PeopleClientService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/people/PeopleClientService.java
@@ -11,10 +11,9 @@
  * Created by devashish on 27/12/14.
  */
 public class PeopleClientService extends MobiComKitClientService {
-    private HttpRequestUtils httpRequestUtils;
     public static final String GOOGLE_CONTACT_URL = "/rest/ws/user/session/contact/google/list";
     public static final String PLATFORM_CONTACT_URL = "/rest/ws/user/session/contact/google/list";
-
+    private HttpRequestUtils httpRequestUtils;
 
 
     public PeopleClientService(Context context) {
@@ -22,11 +21,11 @@ public PeopleClientService(Context context) {
         this.httpRequestUtils = new HttpRequestUtils(context);
     }
 
-    public  String getGoogleContactUrl() {
+    public String getGoogleContactUrl() {
         return getBaseUrl() + GOOGLE_CONTACT_URL;
     }
 
-    public  String getPlatformContactUrl() {
+    public String getPlatformContactUrl() {
         return getBaseUrl() + PLATFORM_CONTACT_URL;
     }
 
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/people/UserIntentService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/people/UserIntentService.java
index 59e28e27..e9b29e95 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/people/UserIntentService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/people/UserIntentService.java
@@ -2,7 +2,9 @@
 
 import android.app.IntentService;
 import android.content.Intent;
+import android.text.TextUtils;
 
+import com.applozic.mobicomkit.api.conversation.MobiComConversationService;
 import com.applozic.mobicomkit.api.conversation.SyncCallService;
 
 /**
@@ -10,8 +12,9 @@
  */
 public class UserIntentService extends IntentService {
 
-    private static final String TAG = "UserIntentService";
     public static final String USER_ID = "userId";
+    public static final String USER_LAST_SEEN_AT_STATUS = "USER_LAST_SEEN_AT_STATUS";
+    private static final String TAG = "UserIntentService";
 
     public UserIntentService() {
         super("UserIntentService");
@@ -19,8 +22,16 @@ public UserIntentService() {
 
     @Override
     protected void onHandleIntent(Intent intent) {
+        if (intent == null) {
+            return;
+        }
+
         String userId = intent.getStringExtra(USER_ID);
-        SyncCallService.getInstance(UserIntentService.this).processUserStatus(userId);
+        if (!TextUtils.isEmpty(userId)) {
+            SyncCallService.getInstance(UserIntentService.this).processUserStatus(userId);
+        } else if (intent.getBooleanExtra(USER_LAST_SEEN_AT_STATUS, false)) {
+            new MobiComConversationService(UserIntentService.this).processLastSeenAtStatus();
+        }
     }
 
 }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/broadcast/BroadcastService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/broadcast/BroadcastService.java
index 2b4f1d1e..096cc236 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/broadcast/BroadcastService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/broadcast/BroadcastService.java
@@ -4,7 +4,6 @@
 import android.content.Intent;
 import android.content.IntentFilter;
 import android.support.v4.content.LocalBroadcastManager;
-import android.util.Log;
 
 import com.applozic.mobicomkit.api.MobiComKitConstants;
 import com.applozic.mobicomkit.api.conversation.Message;
@@ -24,8 +23,12 @@
     public static String currentUserId = null;
     public static Integer currentConversationId = null;
     public static boolean mobiTexterBroadcastReceiverActivated;
-    private static boolean contextBasedChatEnabled = false;
     public static String currentInfoId = null;
+    public static boolean videoCallAcitivityOpend = false;
+    public static boolean callRinging = false;
+    public static int lastIndexForChats = 0;
+    private static boolean contextBasedChatEnabled = false;
+    public static String currentUserProfileUserId= null;
 
     public static void selectMobiComKitAll() {
         currentUserId = MOBICOMKIT_ALL;
@@ -34,6 +37,7 @@ public static void selectMobiComKitAll() {
     public static boolean isQuick() {
         return currentUserId != null && currentUserId.equals(MOBICOMKIT_ALL);
     }
+
     public static boolean isChannelInfo() {
         return currentInfoId != null;
     }
@@ -51,7 +55,7 @@ public static synchronized boolean setContextBasedChat(boolean contextBasedChat)
     }
 
     public static void sendFirstTimeSyncCompletedBroadcast(Context context) {
-        Log.i(TAG, "Sending " + INTENT_ACTIONS.FIRST_TIME_SYNC_COMPLETE.toString() + " broadcast");
+        Utils.printLog(context,TAG, "Sending " + INTENT_ACTIONS.FIRST_TIME_SYNC_COMPLETE.toString() + " broadcast");
         Intent intent = new Intent();
         intent.setAction(INTENT_ACTIONS.FIRST_TIME_SYNC_COMPLETE.toString());
         intent.addCategory(Intent.CATEGORY_DEFAULT);
@@ -59,7 +63,7 @@ public static void sendFirstTimeSyncCompletedBroadcast(Context context) {
     }
 
     public static void sendLoadMoreBroadcast(Context context, boolean loadMore) {
-        Log.i(TAG, "Sending " + INTENT_ACTIONS.LOAD_MORE.toString() + " broadcast");
+        Utils.printLog(context,TAG, "Sending " + INTENT_ACTIONS.LOAD_MORE.toString() + " broadcast");
         Intent intent = new Intent();
         intent.setAction(INTENT_ACTIONS.LOAD_MORE.toString());
         intent.addCategory(Intent.CATEGORY_DEFAULT);
@@ -68,7 +72,7 @@ public static void sendLoadMoreBroadcast(Context context, boolean loadMore) {
     }
 
     public static void sendDeliveryReportForContactBroadcast(Context context, String action, String contactId) {
-        Log.i(TAG, "Sending message delivery report of contact broadcast for " + action + ", " + contactId);
+        Utils.printLog(context,TAG, "Sending message delivery report of contact broadcast for " + action + ", " + contactId);
         Intent intentUpdate = new Intent();
         intentUpdate.setAction(action);
         intentUpdate.addCategory(Intent.CATEGORY_DEFAULT);
@@ -77,7 +81,7 @@ public static void sendDeliveryReportForContactBroadcast(Context context, String
     }
 
     public static void sendMessageUpdateBroadcast(Context context, String action, Message message) {
-        Log.i(TAG, "Sending message update broadcast for " + action + ", " + message.getKeyString());
+        Utils.printLog(context,TAG, "Sending message update broadcast for " + action + ", " + message.getKeyString());
         Intent intentUpdate = new Intent();
         intentUpdate.setAction(action);
         intentUpdate.addCategory(Intent.CATEGORY_DEFAULT);
@@ -86,7 +90,7 @@ public static void sendMessageUpdateBroadcast(Context context, String action, Me
     }
 
     public static void sendMessageDeleteBroadcast(Context context, String action, String keyString, String contactNumbers) {
-        Log.i(TAG, "Sending message delete broadcast for " + action);
+        Utils.printLog(context,TAG, "Sending message delete broadcast for " + action);
         Intent intentDelete = new Intent();
         intentDelete.setAction(action);
         intentDelete.putExtra("keyString", keyString);
@@ -95,8 +99,8 @@ public static void sendMessageDeleteBroadcast(Context context, String action, St
         sendBroadcast(context, intentDelete);
     }
 
-    public static void sendConversationDeleteBroadcast(Context context, String action, String contactNumber, Integer channelKey,String response) {
-        Log.i(TAG, "Sending conversation delete broadcast for " + action);
+    public static void sendConversationDeleteBroadcast(Context context, String action, String contactNumber, Integer channelKey, String response) {
+        Utils.printLog(context,TAG, "Sending conversation delete broadcast for " + action);
         Intent intentDelete = new Intent();
         intentDelete.setAction(action);
         intentDelete.putExtra("channelKey", channelKey);
@@ -106,24 +110,16 @@ public static void sendConversationDeleteBroadcast(Context context, String actio
         sendBroadcast(context, intentDelete);
     }
 
-    public static void sendNumberVerifiedBroadcast(Context context, String action) {
-        Log.i(TAG, "Sending number verified broadcast");
-        Intent intentUpdate = new Intent();
-        intentUpdate.setAction(action);
-        intentUpdate.addCategory(Intent.CATEGORY_DEFAULT);
-        sendBroadcast(context, intentUpdate);
-    }
-
     public static void sendNotificationBroadcast(Context context, Message message) {
-        Log.i(TAG, "Sending notification broadcast....");
+        Utils.printLog(context,TAG, "Sending notification broadcast....");
         Intent notificationIntent = new Intent();
         notificationIntent.putExtra(MobiComKitConstants.MESSAGE_JSON_INTENT, GsonUtils.getJsonFromObject(message, Message.class));
-        notificationIntent.setAction(Utils.getMetaDataValue(context, PACKAGE_NAME) + ".send.notification");
+        notificationIntent.setAction(Utils.getMetaDataValue(context.getApplicationContext(), PACKAGE_NAME) + ".send.notification");
         context.sendBroadcast(notificationIntent);
     }
 
-    public static void sendUpdateLastSeenAtTimeBroadcast(Context context, String action, String contactId){
-        Log.i(TAG, "Sending lastSeenAt broadcast....");
+    public static void sendUpdateLastSeenAtTimeBroadcast(Context context, String action, String contactId) {
+        Utils.printLog(context,TAG, "Sending lastSeenAt broadcast....");
         Intent intent = new Intent();
         intent.setAction(action);
         intent.putExtra("contactId", contactId);
@@ -131,47 +127,42 @@ public static void sendUpdateLastSeenAtTimeBroadcast(Context context, String act
         sendBroadcast(context, intent);
     }
 
-    public static void sendUpdateTypingBroadcast(Context context, String action, String applicationId, String userId, String isTyping){
-        Log.i(TAG, "Sending typing Broadcast.......");
+    public static void sendUpdateTypingBroadcast(Context context, String action, String applicationId, String userId, String isTyping) {
+        Utils.printLog(context,TAG, "Sending typing Broadcast.......");
         Intent intentTyping = new Intent();
         intentTyping.setAction(action);
         intentTyping.putExtra("applicationId", applicationId);
         intentTyping.putExtra("userId", userId);
-        intentTyping.putExtra("isTyping",isTyping);
+        intentTyping.putExtra("isTyping", isTyping);
         intentTyping.addCategory(Intent.CATEGORY_DEFAULT);
         sendBroadcast(context, intentTyping);
     }
 
-    public static void sendMQTTDisconnected(Context context, String action){
-        Log.i(TAG, "Sending typing Broadcast.......");
-        Intent intentTyping = new Intent();
-        intentTyping.setAction(action);
-        intentTyping.addCategory(Intent.CATEGORY_DEFAULT);
-        sendBroadcast(context, intentTyping);
-    }
 
-    public static void sendUpdateForName(Context context,Integer channelKey,String action){
-        Log.i(TAG, "Sending  Broadcast for dataChange.......");
+    public static void sendUpdate(Context context, String action) {
+        Utils.printLog(context,TAG, action);
         Intent intent = new Intent();
-        intent.putExtra("channelKey", channelKey);
         intent.setAction(action);
         intent.addCategory(Intent.CATEGORY_DEFAULT);
         sendBroadcast(context, intent);
     }
 
-    public static void sendUpdateForChannelSync(Context context,String action){
-        Log.i(TAG, "Sending  Broadcast for channelSync ......");
+
+    public static void sendConversationReadBroadcast(Context context, String action, String currentId, boolean isGroup) {
+        Utils.printLog(context,TAG, "Sending  Broadcast for conversation read ......");
         Intent intent = new Intent();
         intent.setAction(action);
+        intent.putExtra("currentId", currentId);
+        intent.putExtra("isGroup", isGroup);
         intent.addCategory(Intent.CATEGORY_DEFAULT);
         sendBroadcast(context, intent);
     }
 
-    public static void sendUpdateTitleAndSubtitle(Context context,String action){
-        Log.i(TAG, "Sending  Broadcast for Update title and subtitle ......");
+    public static void sendUpdateUserDetailBroadcast(Context context, String action, String contactId){
+        Utils.printLog(context,TAG, "Sending profileImage update....");
         Intent intent = new Intent();
         intent.setAction(action);
-        intent.addCategory(Intent.CATEGORY_DEFAULT);
+        intent.putExtra("contactId", contactId);
         sendBroadcast(context, intent);
     }
 
@@ -192,24 +183,26 @@ public static IntentFilter getIntentFilter() {
         intentFilter.addAction(INTENT_ACTIONS.UPDATE_LAST_SEEN_AT_TIME.toString());
         intentFilter.addAction(INTENT_ACTIONS.UPDATE_TYPING_STATUS.toString());
         intentFilter.addAction(INTENT_ACTIONS.MQTT_DISCONNECTED.toString());
-        intentFilter.addAction(INTENT_ACTIONS.UPDATE_NAME.toString());
+        intentFilter.addAction(INTENT_ACTIONS.UPDATE_CHANNEL_NAME.toString());
         intentFilter.addAction(INTENT_ACTIONS.MESSAGE_READ_AND_DELIVERED.toString());
         intentFilter.addAction(INTENT_ACTIONS.MESSAGE_READ_AND_DELIVERED_FOR_CONTECT.toString());
         intentFilter.addAction(INTENT_ACTIONS.CHANNEL_SYNC.toString());
         intentFilter.addAction(INTENT_ACTIONS.UPDATE_TITLE_SUBTITLE.toString());
+        intentFilter.addAction(INTENT_ACTIONS.CONVERSATION_READ.toString());
+        intentFilter.addAction(INTENT_ACTIONS.UPDATE_USER_DETAIL.toString());
         intentFilter.addCategory(Intent.CATEGORY_DEFAULT);
         return intentFilter;
     }
 
+    public static void sendBroadcast(Context context, Intent intent) {
+        LocalBroadcastManager.getInstance(context).sendBroadcast(intent);
+    }
+
     public enum INTENT_ACTIONS {
         LOAD_MORE, FIRST_TIME_SYNC_COMPLETE, MESSAGE_SYNC_ACK_FROM_SERVER,
         SYNC_MESSAGE, DELETE_MESSAGE, DELETE_CONVERSATION, MESSAGE_DELIVERY, MESSAGE_DELIVERY_FOR_CONTACT, INSTRUCTION,
         UPLOAD_ATTACHMENT_FAILED, MESSAGE_ATTACHMENT_DOWNLOAD_DONE, MESSAGE_ATTACHMENT_DOWNLOAD_FAILD,
-        UPDATE_LAST_SEEN_AT_TIME,UPDATE_TYPING_STATUS, MESSAGE_READ_AND_DELIVERED, MESSAGE_READ_AND_DELIVERED_FOR_CONTECT,CHANNEL_SYNC,
-        CONTACT_VERIFIED, NOTIFY_USER, MQTT_DISCONNECTED,UPDATE_NAME,UPDATE_TITLE_SUBTITLE
-    }
-
-    public static void sendBroadcast(Context context, Intent intent) {
-        LocalBroadcastManager.getInstance(context).sendBroadcast(intent);
+        UPDATE_LAST_SEEN_AT_TIME, UPDATE_TYPING_STATUS, MESSAGE_READ_AND_DELIVERED, MESSAGE_READ_AND_DELIVERED_FOR_CONTECT, CHANNEL_SYNC,
+        CONTACT_VERIFIED, NOTIFY_USER, MQTT_DISCONNECTED, UPDATE_CHANNEL_NAME, UPDATE_TITLE_SUBTITLE, CONVERSATION_READ,UPDATE_USER_DETAIL
     }
 }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/broadcast/ConnectivityReceiver.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/broadcast/ConnectivityReceiver.java
index 8e384105..c8cb323b 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/broadcast/ConnectivityReceiver.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/broadcast/ConnectivityReceiver.java
@@ -3,15 +3,11 @@
 import android.content.BroadcastReceiver;
 import android.content.Context;
 import android.content.Intent;
-import android.os.Process;
 import android.net.ConnectivityManager;
-import android.util.Log;
+import android.support.v4.content.LocalBroadcastManager;
 
 import com.applozic.mobicomkit.api.account.user.MobiComUserPreference;
-import com.applozic.mobicomkit.api.account.user.UserService;
-import com.applozic.mobicomkit.api.conversation.MessageClientService;
-import com.applozic.mobicomkit.api.conversation.MobiComConversationService;
-import com.applozic.mobicomkit.api.conversation.SyncCallService;
+import com.applozic.mobicomkit.api.conversation.ApplozicIntentService;
 import com.applozic.mobicommons.commons.core.utils.Utils;
 
 /**
@@ -19,25 +15,19 @@
  */
 public class ConnectivityReceiver extends BroadcastReceiver {
 
+    static final public String CONNECTIVITY_CHANGE = "android.net.conn.CONNECTIVITY_CHANGE";
     static final private String TAG = "ConnectivityReceiver";
-    static final private String CONNECTIVITY_CHANGE = "android.net.conn.CONNECTIVITY_CHANGE";
     private static final String BOOT_COMPLETED = "android.intent.action.BOOT_COMPLETED";
-    Context context;
     private static boolean firstConnect = true;
-    private MessageClientService messageClientService;
-    private MobiComConversationService conversationService;
+    Context context;
 
     @Override
     public void onReceive(final Context context, Intent intent) {
         this.context = context;
-        this.messageClientService = new MessageClientService(context);
-        this.conversationService = new MobiComConversationService(context);
-
         String action = intent.getAction();
-
-        Log.i(TAG, action);
-
-        if (action.equalsIgnoreCase(CONNECTIVITY_CHANGE) ||  action.equalsIgnoreCase(BOOT_COMPLETED)) {
+        Utils.printLog(context,TAG, action);
+        LocalBroadcastManager.getInstance(context).sendBroadcast(new Intent(action));
+        if (action.equalsIgnoreCase(CONNECTIVITY_CHANGE) || action.equalsIgnoreCase(BOOT_COMPLETED)) {
             if (!Utils.isInternetAvailable(context)) {
                 firstConnect = true;
                 return;
@@ -49,22 +39,13 @@ public void onReceive(final Context context, Intent intent) {
             if (cm.getActiveNetworkInfo() != null && cm.getActiveNetworkInfo().isConnected()) {
                 if (firstConnect) {
                     firstConnect = false;
-                    Thread thread =  new Thread(new Runnable() {
-                        @Override
-                        public void run() {
-                            SyncCallService.getInstance(context).syncMessages(null);
-                            messageClientService.syncPendingMessages(true);
-                            messageClientService.syncDeleteMessages(true);
-                            conversationService.processLastSeenAtStatus();
-                            UserService.getInstance(context).processSyncUserBlock();
-                        }
-                    });
-                    thread.setPriority(Process.THREAD_PRIORITY_BACKGROUND);
-                    thread.start();
+                    Intent connectivityIntent = new Intent(context, ApplozicIntentService.class);
+                    connectivityIntent.putExtra(ApplozicIntentService.AL_SYNC_ON_CONNECTIVITY, true);
+                    context.startService(connectivityIntent);
                 }
             }
         }
     }
-
 }
 
+
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/broadcast/NotificationBroadcastReceiver.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/broadcast/NotificationBroadcastReceiver.java
index ec00220b..d7df05c1 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/broadcast/NotificationBroadcastReceiver.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/broadcast/NotificationBroadcastReceiver.java
@@ -33,8 +33,7 @@ public void onReceive(Context context, Intent intent) {
         String actionName = intent.getAction();
 
         String messageJson = intent.getStringExtra(MobiComKitConstants.MESSAGE_JSON_INTENT);
-        String activityToOpen = Utils.getMetaDataValueForReceiver(context, NotificationBroadcastReceiver.class.getName(),  "activity.open.on.notification");
-        Log.i(TAG, "got broadcast receiver.." + messageJson + " , " + activityToOpen + " class name : " + NotificationBroadcastReceiver.class.getName());
+        String activityToOpen = Utils.getMetaDataValueForReceiver(context, NotificationBroadcastReceiver.class.getName(), "activity.open.on.notification");
         Intent newIntent;
         if (actionName.equals(LAUNCH_APP)) {
             String messageText = getMessageText(intent) == null ? null : getMessageText(intent).toString();
@@ -60,7 +59,6 @@ public void onReceive(Context context, Intent intent) {
                 activity = Class.forName(activityToOpen);
             } catch (ClassNotFoundException e) {
                 e.printStackTrace();
-                Log.i(TAG, "not able to load class. Please,  ");
             }
             if (activity == null) {
 
@@ -70,7 +68,7 @@ public void onReceive(Context context, Intent intent) {
             newIntent.putExtra("sms_body", "text");
             newIntent.setType("vnd.android-dir/mms-sms");
             newIntent.setAction(NotificationBroadcastReceiver.LAUNCH_APP);
-            newIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK|Intent.FLAG_ACTIVITY_CLEAR_TOP);
+            newIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP);
             context.startActivity(newIntent);
         }
     }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/broadcast/TimeChangeBroadcastReceiver.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/broadcast/TimeChangeBroadcastReceiver.java
index 127526e3..c95c807c 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/broadcast/TimeChangeBroadcastReceiver.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/broadcast/TimeChangeBroadcastReceiver.java
@@ -17,13 +17,13 @@
     public void onReceive(final Context context, Intent intent) {
 
         new Thread(new Runnable() {
-           @Override
-           public void run() {
-               Log.i("TimeChange :: ", "This has been called on date change" );
-               long diff = DateUtils.getTimeDiffFromUtc();
-               MobiComUserPreference.getInstance(context).setDeviceTimeOffset(diff);
-           }
-       }).start();
+            @Override
+            public void run() {
+                Log.i("TimeChange :: ", "This has been called on date change");
+                long diff = DateUtils.getTimeDiffFromUtc();
+                MobiComUserPreference.getInstance(context).setDeviceTimeOffset(diff);
+            }
+        }).start();
 
     }
 }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/channel/database/ChannelDatabaseService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/channel/database/ChannelDatabaseService.java
index 751128f5..3c740686 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/channel/database/ChannelDatabaseService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/channel/database/ChannelDatabaseService.java
@@ -11,11 +11,13 @@
 import com.applozic.mobicomkit.api.account.user.MobiComUserPreference;
 import com.applozic.mobicomkit.database.MobiComDatabaseHelper;
 import com.applozic.mobicomkit.feed.GroupInfoUpdate;
+import com.applozic.mobicommons.json.GsonUtils;
 import com.applozic.mobicommons.people.channel.Channel;
 import com.applozic.mobicommons.people.channel.ChannelUserMapper;
 
 import java.util.ArrayList;
 import java.util.List;
+import java.util.Map;
 
 /**
  * Created by sunil on 28/12/15.
@@ -38,7 +40,7 @@ private ChannelDatabaseService(Context context) {
 
     public synchronized static ChannelDatabaseService getInstance(Context context) {
         if (channelDatabaseService == null) {
-            channelDatabaseService = new ChannelDatabaseService(context);
+            channelDatabaseService = new ChannelDatabaseService(context.getApplicationContext());
         }
         return channelDatabaseService;
     }
@@ -53,11 +55,19 @@ public static ChannelUserMapper getChannelUser(Cursor cursor) {
 
     public static List<ChannelUserMapper> getListOfUsers(Cursor cursor) {
         List<ChannelUserMapper> channelUserMapper = new ArrayList<ChannelUserMapper>();
-        cursor.moveToFirst();
-        if (cursor.getCount() > 0) {
-            do {
-                channelUserMapper.add(getChannelUser(cursor));
-            } while (cursor.moveToNext());
+        try {
+            cursor.moveToFirst();
+            if (cursor.getCount() > 0) {
+                do {
+                    channelUserMapper.add(getChannelUser(cursor));
+                } while (cursor.moveToNext());
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+        } finally {
+            if (cursor != null) {
+                cursor.close();
+            }
         }
         return channelUserMapper;
     }
@@ -79,14 +89,16 @@ public ContentValues prepareChannelValues(Channel channel) {
         contentValues.put(MobiComDatabaseHelper.CHANNEL_KEY, channel.getKey());
         contentValues.put(MobiComDatabaseHelper.CLIENT_GROUP_ID, channel.getClientGroupId());
         contentValues.put(MobiComDatabaseHelper.TYPE, channel.getType());
+        contentValues.put(MobiComDatabaseHelper.NOTIFICATION_AFTER_TIME, channel.getNotificationAfterTime());
+        contentValues.put(MobiComDatabaseHelper.DELETED_AT, channel.getDeletedAtTime());
         contentValues.put(MobiComDatabaseHelper.ADMIN_ID, channel.getAdminKey());
         Channel oldChannel = null;
         if (!TextUtils.isEmpty(channel.getImageUrl())) {
             contentValues.put(MobiComDatabaseHelper.CHANNEL_IMAGE_URL, channel.getImageUrl());
             oldChannel = ChannelDatabaseService.getInstance(context).getChannelByChannelKey(channel.getKey());
         }
-        if(oldChannel != null && !TextUtils.isEmpty(channel.getImageUrl()) && !TextUtils.isEmpty(oldChannel.getImageUrl()) && !channel.getImageUrl().equals(oldChannel.getImageUrl())){
-            updateChannelLocalImageURI(channel.getKey(),null);
+        if (oldChannel != null && !TextUtils.isEmpty(channel.getImageUrl()) && !TextUtils.isEmpty(oldChannel.getImageUrl()) && !channel.getImageUrl().equals(oldChannel.getImageUrl())) {
+            updateChannelLocalImageURI(channel.getKey(), null);
         }
         if (!TextUtils.isEmpty(channel.getLocalImageUri())) {
             contentValues.put(MobiComDatabaseHelper.CHANNEL_IMAGE_LOCAL_URI, channel.getLocalImageUri());
@@ -97,6 +109,9 @@ public ContentValues prepareChannelValues(Channel channel) {
         if (channel.getUnreadCount() != 0) {
             contentValues.put(MobiComDatabaseHelper.UNREAD_COUNT, channel.getUnreadCount());
         }
+        if (channel.getMetadata() != null) {
+            contentValues.put(MobiComDatabaseHelper.CHANNEL_META_DATA, GsonUtils.getJsonFromObject(channel.getMetadata(), Map.class));
+        }
         return contentValues;
     }
 
@@ -204,6 +219,10 @@ public Channel getChannel(Cursor cursor) {
         channel.setImageUrl(cursor.getString(cursor.getColumnIndex(MobiComDatabaseHelper.CHANNEL_IMAGE_URL)));
         channel.setLocalImageUri(cursor.getString(cursor.getColumnIndex(MobiComDatabaseHelper.CHANNEL_IMAGE_LOCAL_URI)));
         int count = cursor.getInt(cursor.getColumnIndex(MobiComDatabaseHelper.UNREAD_COUNT));
+        channel.setNotificationAfterTime(cursor.getLong(cursor.getColumnIndex(MobiComDatabaseHelper.NOTIFICATION_AFTER_TIME)));
+        channel.setDeletedAtTime(cursor.getLong(cursor.getColumnIndex(MobiComDatabaseHelper.DELETED_AT)));
+        String metadata = cursor.getString(cursor.getColumnIndex(MobiComDatabaseHelper.CHANNEL_META_DATA));
+        channel.setMetadata(((Map<String, String>) GsonUtils.getObjectFromJson(metadata, Map.class)));
         if (count > 0) {
             channel.setUnreadCount(count);
         }
@@ -242,7 +261,13 @@ public void updateChannel(Channel channel) {
         dbHelper.close();
     }
 
-    public void updateChannel(ChannelUserMapper channelUserMapper) {
+    public void updateNotificationAfterTime(Integer id, Long notificationAfterTime) {
+        ContentValues contentValues = new ContentValues();
+        contentValues.put(MobiComDatabaseHelper.NOTIFICATION_AFTER_TIME, notificationAfterTime);
+        dbHelper.getWritableDatabase().update(CHANNEL, contentValues, MobiComDatabaseHelper.CHANNEL_KEY + "=?", new String[]{String.valueOf(id)});
+    }
+
+    public void updateChannelUserMapper(ChannelUserMapper channelUserMapper) {
         ContentValues contentValues = prepareChannelUserMapperValues(channelUserMapper);
         dbHelper.getWritableDatabase().update(CHANNEL_USER_X, contentValues, MobiComDatabaseHelper.CHANNEL_KEY + "=?  and " + MobiComDatabaseHelper.USERID + "=?", new String[]{String.valueOf(channelUserMapper.getKey()), String.valueOf(channelUserMapper.getUserKey())});
         dbHelper.close();
@@ -261,10 +286,10 @@ public boolean isChannelPresent(Integer channelKey) {
         return present;
     }
 
-    public void updateChannelLocalImageURI(Integer channelKey ,String channelLocalURI){
-        ContentValues contentValues =  new ContentValues();
-        contentValues.put(MobiComDatabaseHelper.CHANNEL_IMAGE_LOCAL_URI,channelLocalURI);
-        int updatedRow =  dbHelper.getWritableDatabase().update(CHANNEL,contentValues, MobiComDatabaseHelper.CHANNEL_KEY + "=?", new String[]{String.valueOf(channelKey)});
+    public void updateChannelLocalImageURI(Integer channelKey, String channelLocalURI) {
+        ContentValues contentValues = new ContentValues();
+        contentValues.put(MobiComDatabaseHelper.CHANNEL_IMAGE_LOCAL_URI, channelLocalURI);
+        int updatedRow = dbHelper.getWritableDatabase().update(CHANNEL, contentValues, MobiComDatabaseHelper.CHANNEL_KEY + "=?", new String[]{String.valueOf(channelKey)});
 
     }
 
@@ -281,6 +306,7 @@ public boolean isChannelUserPresent(Integer channelKey, String userId) {
         dbHelper.close();
         return present;
     }
+
     public int removeMemberFromChannel(String clientGroupId, String userId) {
         Channel channel = getChannelByClientGroupId(clientGroupId);
         return removeMemberFromChannel(channel.getKey(), userId);
@@ -304,25 +330,30 @@ public int leaveMemberFromChannel(String clientGroupId, String userId) {
     public int leaveMemberFromChannel(Integer channelKey, String userId) {
         int deletedRows = 0;
         try {
-            deletedRows = dbHelper.getWritableDatabase().delete(MobiComDatabaseHelper.CHANNEL_USER_X, "channelKey=? AND userId= ?", new String[]{String.valueOf(channelKey),userId });
+            deletedRows = dbHelper.getWritableDatabase().delete(MobiComDatabaseHelper.CHANNEL_USER_X, "channelKey=? AND userId= ?", new String[]{String.valueOf(channelKey), userId});
         } catch (Exception e) {
             e.printStackTrace();
         }
         return deletedRows;
     }
+
     public int updateChannel(GroupInfoUpdate groupInfoUpdate) {
+        if (groupInfoUpdate.getImageUrl() == null && groupInfoUpdate.getNewName() == null) {
+            return 0;
+        }
+
         int rowUpdated = 0;
         try {
             ContentValues values = new ContentValues();
-            if(groupInfoUpdate != null){
-                if(!TextUtils.isEmpty(groupInfoUpdate.getClientGroupId())){
+            if (groupInfoUpdate != null) {
+                if (!TextUtils.isEmpty(groupInfoUpdate.getClientGroupId())) {
                     Channel channel = getChannelByClientGroupId(groupInfoUpdate.getClientGroupId());
                     groupInfoUpdate.setGroupId(channel.getKey());
                 }
-                if(groupInfoUpdate.getNewName() != null){
+                if (groupInfoUpdate.getNewName() != null) {
                     values.put("channelName", groupInfoUpdate.getNewName());
                 }
-                if(groupInfoUpdate.getImageUrl() != null){
+                if (groupInfoUpdate.getImageUrl() != null) {
                     values.put("channelImageURL", groupInfoUpdate.getImageUrl());
                     values.putNull("channelImageLocalURI");
                 }
@@ -334,7 +365,7 @@ public int updateChannel(GroupInfoUpdate groupInfoUpdate) {
         return rowUpdated;
     }
 
-    public int deleteChannel(Integer channelKey){
+    public int deleteChannel(Integer channelKey) {
         int deletedRows = 0;
         try {
             deletedRows = dbHelper.getWritableDatabase().delete(MobiComDatabaseHelper.CHANNEL, "channelKey=?", new String[]{String.valueOf(channelKey)});
@@ -344,7 +375,7 @@ public int deleteChannel(Integer channelKey){
         return deletedRows;
     }
 
-    public int deleteChannelUserMappers(Integer channelKey){
+    public int deleteChannelUserMappers(Integer channelKey) {
         int deletedRows = 0;
         try {
             deletedRows = dbHelper.getWritableDatabase().delete(MobiComDatabaseHelper.CHANNEL_USER_X, "channelKey=?", new String[]{String.valueOf(channelKey)});
@@ -366,14 +397,16 @@ public Cursor loadInBackground() {
                 StringBuffer stringBuffer = new StringBuffer();
 
                 stringBuffer.append("SELECT ").append(MobiComDatabaseHelper._ID).append(",").append(MobiComDatabaseHelper.CHANNEL_KEY).append(",").append(MobiComDatabaseHelper.CLIENT_GROUP_ID).append(",").append(MobiComDatabaseHelper.CHANNEL_DISPLAY_NAME).append(",").
-                        append(MobiComDatabaseHelper.ADMIN_ID).append(",").append(MobiComDatabaseHelper.TYPE).append(",").append(MobiComDatabaseHelper.UNREAD_COUNT).append(",").append(MobiComDatabaseHelper.CHANNEL_IMAGE_URL).append(",").append(MobiComDatabaseHelper.CHANNEL_IMAGE_LOCAL_URI).
+                        append(MobiComDatabaseHelper.ADMIN_ID).append(",").append(MobiComDatabaseHelper.TYPE).append(",").append(MobiComDatabaseHelper.UNREAD_COUNT).append(",").append(MobiComDatabaseHelper.CHANNEL_IMAGE_URL).append(",").append(MobiComDatabaseHelper.CHANNEL_IMAGE_LOCAL_URI).append(",").
+                        append(MobiComDatabaseHelper.NOTIFICATION_AFTER_TIME).append(" , ").
+                        append(MobiComDatabaseHelper.DELETED_AT).append(",").append(MobiComDatabaseHelper.CHANNEL_META_DATA).
                         append(" FROM ").append(MobiComDatabaseHelper.CHANNEL);
 
 
                 if (!TextUtils.isEmpty(searchString)) {
                     stringBuffer.append(" where " + MobiComDatabaseHelper.CHANNEL_DISPLAY_NAME + " like '%" + searchString.replaceAll("'", "''") + "%'");
                 }
-                stringBuffer.append(" order by "+MobiComDatabaseHelper.CHANNEL_DISPLAY_NAME +" asc ");
+                stringBuffer.append(" order by " + MobiComDatabaseHelper.CHANNEL_DISPLAY_NAME + " COLLATE NOCASE asc ");
                 cursor = db.rawQuery(stringBuffer.toString(), null);
 
                 return cursor;
@@ -382,4 +415,52 @@ public Cursor loadInBackground() {
         };
     }
 
+
+    public String getGroupOfTwoReceiverId(Integer channelKey) {
+        try {
+            SQLiteDatabase db = dbHelper.getReadableDatabase();
+            String structuredNameWhere = "";
+
+            structuredNameWhere += "channelKey = ? AND userId NOT IN ('" + MobiComUserPreference.getInstance(context).getUserId().replaceAll("'", "''") + "')";
+            Cursor cursor = db.query(CHANNEL_USER_X, null, structuredNameWhere, new String[]{String.valueOf(channelKey)}, null, null, null);
+
+            List<ChannelUserMapper> channelUserMappers = getListOfUsers(cursor);
+            if (channelUserMappers != null && channelUserMappers.size() > 0) {
+                ChannelUserMapper channelUserMapper = channelUserMappers.get(0);
+                if (channelUserMapper != null) {
+                    return channelUserMapper.getUserKey();
+                }
+            }
+            if (!cursor.isClosed()) {
+                cursor.close();
+            }
+            dbHelper.close();
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        return null;
+    }
+
+
+    public String[] getChannelMemberByName(String name, String type) {
+        SQLiteDatabase database = dbHelper.getWritableDatabase();
+        List<String> userIds = new ArrayList<String>();
+        Cursor cursor = database.rawQuery("Select cu.userId from channel c JOIN channel_User_X cu on c.channelKey = cu.channelKey where c.channelName ='" + name + "' AND c.type ='" + type + "'", null);
+        cursor.moveToFirst();
+        if (cursor.getCount() > 0) {
+            do {
+                userIds.add(cursor.getString(cursor.getColumnIndex(MobiComDatabaseHelper.USERID)));
+
+            } while (cursor.moveToNext());
+            cursor.close();
+        }
+        if (userIds.contains(MobiComUserPreference.getInstance(context).getUserId())) {
+            userIds.remove(MobiComUserPreference.getInstance(context).getUserId());
+        }
+        if (userIds != null && userIds.size() > 0) {
+            return userIds.toArray(new String[userIds.size()]);
+        }
+        return null;
+    }
+
 }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/channel/service/ApplozicAddMemberOfGroupType.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/channel/service/ApplozicAddMemberOfGroupType.java
new file mode 100644
index 00000000..e0bf3137
--- /dev/null
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/channel/service/ApplozicAddMemberOfGroupType.java
@@ -0,0 +1,29 @@
+package com.applozic.mobicomkit.channel.service;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * Created by Rahul-PC on 28-06-2017.
+ */
+
+public class ApplozicAddMemberOfGroupType {
+    List<String> groupMemberList = new ArrayList<>();
+    String type;
+
+    public List<String> getGroupMemberList() {
+        return groupMemberList;
+    }
+
+    public void setGroupMemberList(List<String> groupMemberList) {
+        this.groupMemberList = groupMemberList;
+    }
+
+    public String getType() {
+        return type;
+    }
+
+    public void setType(String type) {
+        this.type = type;
+    }
+}
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/channel/service/ChannelClientService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/channel/service/ChannelClientService.java
index 436db82f..606dbdd9 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/channel/service/ChannelClientService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/channel/service/ChannelClientService.java
@@ -2,17 +2,19 @@
 
 import android.content.Context;
 import android.text.TextUtils;
-import android.util.Log;
 
 import com.applozic.mobicomkit.MultipleChannelFeedApiResponse;
 import com.applozic.mobicomkit.api.HttpRequestUtils;
 import com.applozic.mobicomkit.api.MobiComKitClientService;
+import com.applozic.mobicomkit.api.notification.MuteNotificationRequest;
 import com.applozic.mobicomkit.api.people.ChannelInfo;
 import com.applozic.mobicomkit.feed.ApiResponse;
 import com.applozic.mobicomkit.feed.ChannelFeed;
 import com.applozic.mobicomkit.feed.ChannelFeedApiResponse;
+import com.applozic.mobicomkit.feed.ChannelFeedListResponse;
 import com.applozic.mobicomkit.feed.GroupInfoUpdate;
 import com.applozic.mobicomkit.sync.SyncChannelFeed;
+import com.applozic.mobicommons.commons.core.utils.Utils;
 import com.applozic.mobicommons.json.GsonUtils;
 import com.google.gson.reflect.TypeToken;
 
@@ -25,7 +27,8 @@
  */
 public class ChannelClientService extends MobiComKitClientService {
     private static final String CHANNEL_INFO_URL = "/rest/ws/group/info";
-    private static final String CHANNEL_SYNC_URL = "/rest/ws/group/list";
+    // private static final String CHANNEL_SYNC_URL = "/rest/ws/group/list";
+    private static final String CHANNEL_SYNC_URL = "/rest/ws/group/v3/list";
     private static final String CREATE_CHANNEL_URL = "/rest/ws/group/create";
     private static final String CREATE_MULTIPLE_CHANNEL_URL = "/rest/ws/group/create/multiple";
     private static final String ADD_MEMBER_TO_CHANNEL_URL = "/rest/ws/group/add/member";
@@ -35,13 +38,19 @@
     private static final String ADD_MEMBER_TO_MULTIPLE_CHANNELS_URL = "/rest/ws/group/add/user";
     private static final String CHANNEL_DELETE_URL = "/rest/ws/group/delete";
     private static final String REMOVE_MEMBERS_FROM_MULTIPE_CHANNELS = "/rest/ws/group/remove/user";
-
+    private static final String MUTE_CHANNEL_UPDATE = "/rest/ws/group/user/update";
+    private static final String ADD_MEMBERS_TO_CONTACT_GROUP_URL = "/rest/ws/group/%s/add";
+    private static final String GET_MEMBERS_FROM_CONTACT_GROUP_URL = "/rest/ws/group/%s/get";
+    private static final String GET_GROUP_INFO_FROM_GROUP_IDS_URL = "/rest/ws/group/details";
+    private static final String ADD_MEMBERS_TO_CONTACT_GROUP_OF_TYPE_URL = "/rest/ws/group/%s/add/members";
+    private static final String GET_MEMBERS_TO_CONTACT_GROUP_OF_TYPE_URL = "/rest/ws/group/%s/get";
     private static final String UPDATED_AT = "updatedAt";
     private static final String USER_ID = "userId";
     private static final String GROUP_ID = "groupId";
     private static final String CLIENT_GROUPID = "clientGroupId";
     private static final String GROUPIDS = "groupIds";
     private static final String CLIENT_GROUPIDs = "clientGroupIds";
+    private static final String GROUPTYPE = "groupType";
     private static final String TAG = "ChannelClientService";
     private static ChannelClientService channelClientService;
     private HttpRequestUtils httpRequestUtils;
@@ -56,7 +65,7 @@ private ChannelClientService(Context context) {
 
     public static ChannelClientService getInstance(Context context) {
         if (channelClientService == null) {
-            channelClientService = new ChannelClientService(context);
+            channelClientService = new ChannelClientService(context.getApplicationContext());
         }
         return channelClientService;
     }
@@ -73,6 +82,11 @@ public String getCreateChannelUrl() {
         return getBaseUrl() + CREATE_CHANNEL_URL;
     }
 
+    public String getMuteChannelUrl() {
+        return getBaseUrl() + MUTE_CHANNEL_UPDATE;
+    }
+
+
     public String getCreateMultipleChannelUrl() {
         return getBaseUrl() + CREATE_MULTIPLE_CHANNEL_URL;
     }
@@ -105,12 +119,32 @@ public String getRemoveMembersFromMultipChannels() {
         return getBaseUrl() + REMOVE_MEMBERS_FROM_MULTIPE_CHANNELS;
     }
 
+    public String addMembersToContactGroupUrl() {
+        return getBaseUrl() + ADD_MEMBERS_TO_CONTACT_GROUP_URL;
+    }
+
+    public String addMembersToContactGroupOfTypeUrl() {
+        return getBaseUrl() + ADD_MEMBERS_TO_CONTACT_GROUP_OF_TYPE_URL;
+    }
+
+    public String getMembersFromContactGroupUrl() {
+        return getBaseUrl() + GET_MEMBERS_FROM_CONTACT_GROUP_URL;
+    }
+
+    public String getMembersFromContactGroupOfTypeUrl() {
+        return getBaseUrl() + GET_MEMBERS_TO_CONTACT_GROUP_OF_TYPE_URL;
+    }
+
+    public String getGroupInfoFromGroupIdsUrl() {
+        return getBaseUrl() + GET_GROUP_INFO_FROM_GROUP_IDS_URL;
+    }
+
     public ChannelFeed getChannelInfoByParameters(String parameters) {
         String response = "";
         try {
             response = httpRequestUtils.getResponse(getChannelInfoUrl() + "?" + parameters, "application/json", "application/json");
             ChannelFeedApiResponse channelFeedApiResponse = (ChannelFeedApiResponse) GsonUtils.getObjectFromJson(response, ChannelFeedApiResponse.class);
-            Log.i(TAG, "Channel info response  is :" + response);
+            Utils.printLog(context, TAG, "Channel info response  is :" + response);
 
             if (channelFeedApiResponse != null && channelFeedApiResponse.isSuccess()) {
                 ChannelFeed channelFeed = channelFeedApiResponse.getResponse();
@@ -131,13 +165,35 @@ public ChannelFeed getChannelInfo(Integer channelKey) {
         return getChannelInfoByParameters(GROUP_ID + "=" + channelKey);
     }
 
+
+    public ApiResponse muteNotification(MuteNotificationRequest muteNotificationRequest) {
+        ApiResponse apiResponse = null;
+
+        try {
+            if (muteNotificationRequest.isRequestValid()) {
+                String requestJson = GsonUtils.getJsonFromObject(muteNotificationRequest, MuteNotificationRequest.class);
+                String response = httpRequestUtils.postData(getMuteChannelUrl(), "application/json", "application/json", requestJson);
+                apiResponse = (ApiResponse) GsonUtils.getObjectFromJson(response, ApiResponse.class);
+
+                if (apiResponse != null) {
+                    Utils.printLog(context, TAG, "Mute notification response: " + apiResponse.getStatus());
+                }
+            }
+
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+
+        return apiResponse;
+    }
+
     public SyncChannelFeed getChannelFeed(String lastChannelSyncTime) {
         String url = getChannelSyncUrl() + "?" +
                 UPDATED_AT
                 + "=" + lastChannelSyncTime;
         try {
             String response = httpRequestUtils.getResponse(url, "application/json", "application/json");
-            Log.i(TAG, "Channel sync call response: " + response);
+            Utils.printLog(context, TAG, "Channel sync call response: " + response);
             return (SyncChannelFeed) GsonUtils.getObjectFromJson(response, SyncChannelFeed.class);
         } catch (Exception e) {
             return null;
@@ -149,7 +205,7 @@ public ChannelFeed createChannel(ChannelInfo channelInfo) {
         try {
             String jsonFromObject = GsonUtils.getJsonFromObject(channelInfo, channelInfo.getClass());
             String createChannelResponse = httpRequestUtils.postData(getCreateChannelUrl(), "application/json", "application/json", jsonFromObject);
-            Log.i(TAG, "Create channel Response :" + createChannelResponse);
+            Utils.printLog(context, TAG, "Create channel Response :" + createChannelResponse);
             ChannelFeedApiResponse channelFeedApiResponse = (ChannelFeedApiResponse) GsonUtils.getObjectFromJson(createChannelResponse, ChannelFeedApiResponse.class);
 
             if (channelFeedApiResponse != null && channelFeedApiResponse.isSuccess()) {
@@ -166,9 +222,10 @@ public ChannelFeed createChannel(ChannelInfo channelInfo) {
     public List<ChannelFeed> createMultipleChannels(List<ChannelInfo> channels) {
         List<ChannelFeed> channelFeeds = null;
         try {
-            String jsonFromObject = GsonUtils.getJsonFromObject(channels, new TypeToken<List<ChannelInfo>>() {}.getType());
+            String jsonFromObject = GsonUtils.getJsonFromObject(channels, new TypeToken<List<ChannelInfo>>() {
+            }.getType());
             String createChannelResponse = httpRequestUtils.postData(getCreateMultipleChannelUrl(), "application/json", "application/json", jsonFromObject);
-            Log.i(TAG, "Create Multiple channel Response :" + createChannelResponse);
+            Utils.printLog(context, TAG, "Create Multiple channel Response :" + createChannelResponse);
             MultipleChannelFeedApiResponse channelFeedApiResponse = (MultipleChannelFeedApiResponse) GsonUtils.getObjectFromJson(createChannelResponse, MultipleChannelFeedApiResponse.class);
 
             if (channelFeedApiResponse != null && channelFeedApiResponse.isSuccess()) {
@@ -182,36 +239,36 @@ public ChannelFeed createChannel(ChannelInfo channelInfo) {
         return channelFeeds;
     }
 
-    public ApiResponse removeMembersFromMultipleChannelsByChannelKeys(Set<Integer> channelKeys, Set<String> userIds){
-        return removeMembersFromMultipleChannels(null,channelKeys, userIds);
+    public ApiResponse removeMembersFromMultipleChannelsByChannelKeys(Set<Integer> channelKeys, Set<String> userIds) {
+        return removeMembersFromMultipleChannels(null, channelKeys, userIds);
     }
 
-    public ApiResponse removeMembersFromMultipleChannelsByClientGroupIds(Set<String> clientGroupIds, Set<String> userIds){
-        return removeMembersFromMultipleChannels(clientGroupIds,null, userIds);
+    public ApiResponse removeMembersFromMultipleChannelsByClientGroupIds(Set<String> clientGroupIds, Set<String> userIds) {
+        return removeMembersFromMultipleChannels(clientGroupIds, null, userIds);
     }
 
-    private  ApiResponse removeMembersFromMultipleChannels(Set<String> clientGroupIds, Set<Integer> channelKeys, Set<String> userIds) {
+    private ApiResponse removeMembersFromMultipleChannels(Set<String> clientGroupIds, Set<Integer> channelKeys, Set<String> userIds) {
         ApiResponse apiResponse = null;
         try {
-            if (userIds != null && userIds.size()>0) {
+            if (userIds != null && userIds.size() > 0) {
                 String parameters = "";
-                if(clientGroupIds != null && clientGroupIds.size()>0){
+                if (clientGroupIds != null && clientGroupIds.size() > 0) {
                     for (String clientGroupId : clientGroupIds) {
                         parameters += CLIENT_GROUPIDs + "=" + URLEncoder.encode(clientGroupId, "UTF-8") + "&";
                     }
-                } else if(channelKeys != null && channelKeys.size()>0){
+                } else if (channelKeys != null && channelKeys.size() > 0) {
                     for (Integer channelKey : channelKeys) {
                         parameters += GROUPIDS + "=" + channelKey + "&";
                     }
                 }
-                for(String userId:userIds){
+                for (String userId : userIds) {
                     parameters += USER_ID + "=" + URLEncoder.encode(userId, "UTF-8") + "&";
                 }
                 String url = getRemoveMembersFromMultipChannels() + "?" + parameters;
                 String response = httpRequestUtils.getResponse(url, "application/json", "application/json");
                 apiResponse = (ApiResponse) GsonUtils.getObjectFromJson(response, ApiResponse.class);
                 if (apiResponse != null) {
-                    Log.i(TAG, "Channel remove members from channels response: " + apiResponse.getStatus());
+                    Utils.printLog(context, TAG, "Channel remove members from channels response: " + apiResponse.getStatus());
                 }
             }
         } catch (Exception e) {
@@ -226,11 +283,11 @@ public synchronized ApiResponse addMemberToMultipleChannels(Set<String> clientGr
         try {
             if (!TextUtils.isEmpty(userId)) {
                 String parameters = "";
-                if(clientGroupIds != null && clientGroupIds.size()>0){
+                if (clientGroupIds != null && clientGroupIds.size() > 0) {
                     for (String clientGroupId : clientGroupIds) {
                         parameters += CLIENT_GROUPIDs + "=" + URLEncoder.encode(clientGroupId, "UTF-8") + "&";
                     }
-                }else {
+                } else {
                     for (Integer channelKey : channelKeys) {
                         parameters += GROUPIDS + "=" + channelKey + "&";
                     }
@@ -239,7 +296,7 @@ public synchronized ApiResponse addMemberToMultipleChannels(Set<String> clientGr
                 String response = httpRequestUtils.getResponse(url, "application/json", "application/json");
                 apiResponse = (ApiResponse) GsonUtils.getObjectFromJson(response, ApiResponse.class);
                 if (apiResponse != null) {
-                    Log.i(TAG, "Channel add member call response: " + apiResponse.getStatus());
+                    Utils.printLog(context, TAG, "Channel add member call response: " + apiResponse.getStatus());
                 }
             }
         } catch (Exception e) {
@@ -264,13 +321,13 @@ public synchronized ApiResponse addMemberToChannel(String clientGroupId, Integer
             } else {
                 parameters = GROUP_ID + "=" + channelKey;
             }
-            if (!TextUtils.isEmpty(parameters) && !TextUtils.isEmpty(userId) ) {
+            if (!TextUtils.isEmpty(parameters) && !TextUtils.isEmpty(userId)) {
                 String url = getAddMemberToGroup() + "?" +
                         parameters + "&" + USER_ID + "=" + URLEncoder.encode(userId, "UTF-8");
                 String response = httpRequestUtils.getResponse(url, "application/json", "application/json");
                 ApiResponse apiResponse = (ApiResponse) GsonUtils.getObjectFromJson(response, ApiResponse.class);
-                if(apiResponse != null){
-                    Log.i(TAG, "Channel add member call response: " + apiResponse.getStatus());
+                if (apiResponse != null) {
+                    Utils.printLog(context, TAG, "Channel add member call response: " + apiResponse.getStatus());
                 }
                 return apiResponse;
             }
@@ -297,13 +354,13 @@ public synchronized ApiResponse removeMemberFromChannel(String clientGroupId, In
             } else {
                 parameters = GROUP_ID + "=" + channelKey;
             }
-            if (!TextUtils.isEmpty(parameters) &&  !TextUtils.isEmpty(userId) ) {
+            if (!TextUtils.isEmpty(parameters) && !TextUtils.isEmpty(userId)) {
                 String url = getRemoveMemberUrl() + "?" +
                         parameters + "&" + USER_ID + "=" + URLEncoder.encode(userId, "UTF-8");
                 String response = httpRequestUtils.getResponse(url, "application/json", "application/json");
                 apiResponse = (ApiResponse) GsonUtils.getObjectFromJson(response, ApiResponse.class);
-                if(apiResponse != null){
-                    Log.i(TAG, "Channel remove member response: " + apiResponse.getStatus());
+                if (apiResponse != null) {
+                    Utils.printLog(context, TAG, "Channel remove member response: " + apiResponse.getStatus());
                 }
             }
         } catch (Exception e) {
@@ -323,12 +380,12 @@ public synchronized ApiResponse removeMemberFromChannel(String clientGroupId, St
     public synchronized ApiResponse updateChannel(GroupInfoUpdate groupInfoUpdate) {
         ApiResponse apiResponse = null;
         try {
-            if (groupInfoUpdate != null && (!TextUtils.isEmpty(groupInfoUpdate.getClientGroupId()) || groupInfoUpdate.getGroupId() != null) && (!TextUtils.isEmpty(groupInfoUpdate.getNewName()) || !TextUtils.isEmpty(groupInfoUpdate.getImageUrl()))) {
+            if (groupInfoUpdate != null && (!TextUtils.isEmpty(groupInfoUpdate.getClientGroupId()) || groupInfoUpdate.getGroupId() != null) && (!TextUtils.isEmpty(groupInfoUpdate.getNewName()) || TextUtils.isEmpty(groupInfoUpdate.getImageUrl()) || !TextUtils.isEmpty(groupInfoUpdate.getImageUrl()))) {
                 String channelNameUpdateJson = GsonUtils.getJsonFromObject(groupInfoUpdate, GroupInfoUpdate.class);
-                String response = httpRequestUtils.postData(getChannelUpdateUrl() , "application/json", "application/json", channelNameUpdateJson);
+                String response = httpRequestUtils.postData(getChannelUpdateUrl(), "application/json", "application/json", channelNameUpdateJson);
                 apiResponse = (ApiResponse) GsonUtils.getObjectFromJson(response, ApiResponse.class);
-                if(apiResponse != null){
-                    Log.i(TAG, "Update Channel response: " + apiResponse.getStatus());
+                if (apiResponse != null) {
+                    Utils.printLog(context, TAG, "Update Channel response: " + apiResponse.getStatus());
                 }
             }
         } catch (Exception e) {
@@ -359,8 +416,8 @@ public synchronized ApiResponse leaveMemberFromChannel(String clientGroupId, Int
                 String url = getChannelLeftUrl() + "?" + parameters;
                 String response = httpRequestUtils.getResponse(url, "application/json", "application/json");
                 apiResponse = (ApiResponse) GsonUtils.getObjectFromJson(response, ApiResponse.class);
-                if(apiResponse != null){
-                    Log.i(TAG, "Channel leave member call response: " + apiResponse.getStatus());
+                if (apiResponse != null) {
+                    Utils.printLog(context, TAG, "Channel leave member call response: " + apiResponse.getStatus());
                 }
             }
         } catch (Exception e) {
@@ -377,8 +434,8 @@ public synchronized ApiResponse deleteChannel(Integer channelKey) {
                         + "=" + URLEncoder.encode(String.valueOf(channelKey), "UTF-8");
                 String response = httpRequestUtils.getResponse(url, "application/json", "application/json");
                 ApiResponse apiResponse = (ApiResponse) GsonUtils.getObjectFromJson(response, ApiResponse.class);
-                if(apiResponse != null){
-                    Log.i(TAG, "Channel delete call response: " + apiResponse.getStatus());
+                if (apiResponse != null) {
+                    Utils.printLog(context, TAG, "Channel delete call response: " + apiResponse.getStatus());
                 }
                 return apiResponse;
             }
@@ -388,4 +445,134 @@ public synchronized ApiResponse deleteChannel(Integer channelKey) {
         return null;
     }
 
+
+    public ChannelFeedApiResponse createChannelWithResponse(ChannelInfo channelInfo) {
+        try {
+            String jsonFromObject = GsonUtils.getJsonFromObject(channelInfo, channelInfo.getClass());
+            String createChannelResponse = httpRequestUtils.postData(getCreateChannelUrl(), "application/json", "application/json", jsonFromObject);
+            Utils.printLog(context, TAG, "Create channel Response :" + createChannelResponse);
+            if (TextUtils.isEmpty(createChannelResponse)) {
+                return null;
+            }
+            return (ChannelFeedApiResponse) GsonUtils.getObjectFromJson(createChannelResponse, ChannelFeedApiResponse.class);
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        return null;
+    }
+
+    public ApiResponse addMemberToContactGroup(String contactGroupId, List<String> contactGroupMemberList) {
+        String response;
+        if (!TextUtils.isEmpty(contactGroupId) && contactGroupMemberList != null) {
+            String url = String.format(addMembersToContactGroupUrl(), contactGroupId);
+            Utils.printLog(context, TAG, url);
+            String jsonFromObject = GsonUtils.getJsonFromObject(contactGroupMemberList, List.class);
+            Utils.printLog(context, TAG, "Sending json:" + jsonFromObject);
+            try {
+                response = httpRequestUtils.postData(url, "application/json", "application/json", jsonFromObject);
+                ApiResponse apiResponse = (ApiResponse) GsonUtils.getObjectFromJson(response, ApiResponse.class);
+
+                if (apiResponse != null) {
+                    Utils.printLog(context, TAG, "Add Member To Contact Group Response: " + apiResponse.getStatus());
+                    return apiResponse;
+                }
+            } catch (Exception e) {
+                e.printStackTrace();
+            }
+        }
+        return null;
+    }
+
+    public ApiResponse addMemberToContactGroupOfType(String contactGroupId, String groupType, List<String> contactGroupMemberList) {
+        String response;
+        if (!TextUtils.isEmpty(contactGroupId) && !TextUtils.isEmpty(groupType) && contactGroupMemberList != null) {
+            String url = String.format(addMembersToContactGroupOfTypeUrl(), contactGroupId);
+            ApplozicAddMemberOfGroupType applozicAddMemberOfGroupType = new ApplozicAddMemberOfGroupType();
+            applozicAddMemberOfGroupType.setGroupMemberList(contactGroupMemberList);
+            applozicAddMemberOfGroupType.setType(groupType);
+            String jsonFromObject = GsonUtils.getJsonFromObject(applozicAddMemberOfGroupType, ApplozicAddMemberOfGroupType.class);
+            Utils.printLog(context, TAG, "Sending json:" + jsonFromObject);
+            try {
+                response = httpRequestUtils.postData(url, "application/json", "application/json", jsonFromObject);
+                ApiResponse apiResponse = (ApiResponse) GsonUtils.getObjectFromJson(response, ApiResponse.class);
+
+                if (apiResponse != null) {
+                    Utils.printLog(context, TAG, "Add Member To Contact Group Response: " + apiResponse.getStatus());
+                    return apiResponse;
+                }
+            } catch (Exception e) {
+                e.printStackTrace();
+            }
+        }
+        return null;
+    }
+
+    public ChannelFeed getMembersFromContactGroup(String contactGroupId) {
+        String response;
+        if (!TextUtils.isEmpty(contactGroupId)) {
+            String url = String.format(getMembersFromContactGroupUrl(), contactGroupId);
+            response = httpRequestUtils.getResponse(url, "application/json", "application/json");
+            ChannelFeedApiResponse channelFeedApiResponse = (ChannelFeedApiResponse) GsonUtils.getObjectFromJson(response, ChannelFeedApiResponse.class);
+            if (channelFeedApiResponse != null && channelFeedApiResponse.isSuccess()) {
+                ChannelFeed channelFeed = channelFeedApiResponse.getResponse();
+                return channelFeed;
+            }
+        }
+        return null;
+    }
+
+    public ChannelFeed getMembersFromContactGroupOfType(String contactGroupId, String groupType) {
+        String response;
+        if (!TextUtils.isEmpty(contactGroupId) && !TextUtils.isEmpty(groupType)) {
+            String url = String.format(getMembersFromContactGroupOfTypeUrl() + "?" + GROUPTYPE + "=" + groupType, contactGroupId);
+            response = httpRequestUtils.getResponse(url, "application/json", "application/json");
+            ChannelFeedApiResponse channelFeedApiResponse = (ChannelFeedApiResponse) GsonUtils.getObjectFromJson(response, ChannelFeedApiResponse.class);
+            if (channelFeedApiResponse != null && channelFeedApiResponse.isSuccess()) {
+                ChannelFeed channelFeed = channelFeedApiResponse.getResponse();
+                return channelFeed;
+            }
+        }
+        return null;
+    }
+
+    public ChannelFeedListResponse getGroupInfoFromGroupIds(List<String> groupIds, List<String> clientGroupIds) {
+        ChannelFeedListResponse apiResponse = null;
+
+        try {
+            StringBuilder parameters = new StringBuilder("?");
+
+            if (groupIds != null) {
+                for (String groupId : groupIds) {
+                    if (!TextUtils.isEmpty(groupId)) {
+                        parameters.append(GROUPIDS + "=" + groupId + "&");
+                    }
+                }
+            }
+
+            if (clientGroupIds != null) {
+                for (String clientGroupId : clientGroupIds) {
+                    if (!TextUtils.isEmpty(clientGroupId)) {
+                        if (groupIds != null && groupIds.contains(clientGroupId)) {
+                            continue;
+                        } else {
+                            parameters.append(CLIENT_GROUPIDs + "=" + clientGroupId + "&");
+                        }
+                    }
+                }
+            }
+
+            String url = getGroupInfoFromGroupIdsUrl() + parameters;
+            String response = httpRequestUtils.getResponse(url, "application/json", "application/json");
+            apiResponse = (ChannelFeedListResponse) GsonUtils.getObjectFromJson(response, ChannelFeedListResponse.class);
+
+            if (apiResponse != null) {
+                Utils.printLog(context, TAG, "Group Info from groupIds/clientGroupIds response : " + apiResponse.getStatus());
+            }
+        } catch (Exception e) {
+            Utils.printLog(context, TAG, e.getMessage());
+        }
+        return apiResponse;
+    }
+
+
 }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/channel/service/ChannelService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/channel/service/ChannelService.java
index 31034ca7..0fb15e00 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/channel/service/ChannelService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/channel/service/ChannelService.java
@@ -7,6 +7,7 @@
 import com.applozic.mobicomkit.api.account.user.UserService;
 import com.applozic.mobicomkit.api.conversation.MobiComConversationService;
 import com.applozic.mobicomkit.api.conversation.service.ConversationService;
+import com.applozic.mobicomkit.api.notification.MuteNotificationRequest;
 import com.applozic.mobicomkit.api.people.ChannelInfo;
 import com.applozic.mobicomkit.broadcast.BroadcastService;
 import com.applozic.mobicomkit.channel.database.ChannelDatabaseService;
@@ -14,6 +15,8 @@
 import com.applozic.mobicomkit.contact.BaseContactService;
 import com.applozic.mobicomkit.feed.ApiResponse;
 import com.applozic.mobicomkit.feed.ChannelFeed;
+import com.applozic.mobicomkit.feed.ChannelFeedApiResponse;
+import com.applozic.mobicomkit.feed.ChannelFeedListResponse;
 import com.applozic.mobicomkit.feed.GroupInfoUpdate;
 import com.applozic.mobicomkit.sync.SyncChannelFeed;
 import com.applozic.mobicommons.people.channel.Channel;
@@ -46,7 +49,7 @@ private ChannelService(Context context) {
 
     public synchronized static ChannelService getInstance(Context context) {
         if (channelService == null) {
-            channelService = new ChannelService(context);
+            channelService = new ChannelService(context.getApplicationContext());
         }
         return channelService;
     }
@@ -63,9 +66,11 @@ public Channel getChannelInfo(Integer key) {
         if (channel == null) {
             ChannelFeed channelFeed = channelClientService.getChannelInfo(key);
             if (channelFeed != null) {
+                channelFeed.setUnreadCount(0);
                 ChannelFeed[] channelFeeds = new ChannelFeed[1];
                 channelFeeds[0] = channelFeed;
                 processChannelFeedList(channelFeeds, false);
+                //BroadcastService.sendUpdate(context, BroadcastService.INTENT_ACTIONS.UPDATE_CHANNEL_NAME.toString());
                 channel = getChannel(channelFeed);
                 return channel;
             }
@@ -73,8 +78,27 @@ public Channel getChannelInfo(Integer key) {
         return channel;
     }
 
-    public void createMultipleChannels(List<ChannelInfo> channelInfo){
-        List<ChannelFeed>  channelFeeds = channelClientService.createMultipleChannels(channelInfo);
+    public Channel getChannelInfo(String clientGroupId) {
+        if (TextUtils.isEmpty(clientGroupId)) {
+            return null;
+        }
+        Channel channel = channelDatabaseService.getChannelByClientGroupId(clientGroupId);
+        if (channel == null) {
+            ChannelFeed channelFeed = channelClientService.getChannelInfo(clientGroupId);
+            if (channelFeed != null) {
+                channelFeed.setUnreadCount(0);
+                ChannelFeed[] channelFeeds = new ChannelFeed[1];
+                channelFeeds[0] = channelFeed;
+                processChannelFeedList(channelFeeds, false);
+                channel = getChannel(channelFeed);
+                return channel;
+            }
+        }
+        return channel;
+    }
+
+    public void createMultipleChannels(List<ChannelInfo> channelInfo) {
+        List<ChannelFeed> channelFeeds = channelClientService.createMultipleChannels(channelInfo);
         if (channelFeeds != null) {
             processChannelList(channelFeeds);
         }
@@ -83,37 +107,43 @@ public void createMultipleChannels(List<ChannelInfo> channelInfo){
     public void processChannelFeedList(ChannelFeed[] channelFeeds, boolean isUserDetails) {
         if (channelFeeds != null && channelFeeds.length > 0) {
             for (ChannelFeed channelFeed : channelFeeds) {
-                Set<String> memberUserIds = channelFeed.getMembersName();
-                Set<String> userIds = new HashSet<>();
-                Channel channel = getChannel(channelFeed);
-                if (channelDatabaseService.isChannelPresent(channel.getKey())) {
-                    channelDatabaseService.updateChannel(channel);
-                } else {
-                    channelDatabaseService.addChannel(channel);
-                }
-                if (channelFeed.getConversationPxy() != null) {
-                    channelFeed.getConversationPxy().setGroupId(channelFeed.getId());
-                    ConversationService.getInstance(context).addConversation(channelFeed.getConversationPxy());
-                }
-                if (memberUserIds != null && memberUserIds.size() > 0) {
-                    for (String userId : memberUserIds) {
-                        ChannelUserMapper channelUserMapper = new ChannelUserMapper(channelFeed.getId(), userId);
-                        if (channelDatabaseService.isChannelUserPresent(channelFeed.getId(), userId)) {
-                            channelDatabaseService.updateChannel(channelUserMapper);
-                        } else {
-                            channelDatabaseService.addChannelUserMapper(channelUserMapper);
-                        }
-                        if (!baseContactService.isContactExists(userId)) {
-                            userIds.add(userId);
-                        }
+                processChannelFeed(channelFeed, isUserDetails);
+            }
+        }
+    }
+
+    public void processChannelFeed(ChannelFeed channelFeed, boolean isUserDetails) {
+        if (channelFeed != null) {
+            Set<String> memberUserIds = null;
+            if (channelFeed.getMembersName() != null) {
+                memberUserIds = channelFeed.getMembersName();
+            } else {
+                memberUserIds = channelFeed.getContactGroupMembersId();
+            }
+
+            Channel channel = getChannel(channelFeed);
+            if (channelDatabaseService.isChannelPresent(channel.getKey())) {
+                channelDatabaseService.updateChannel(channel);
+            } else {
+                channelDatabaseService.addChannel(channel);
+            }
+            if (channelFeed.getConversationPxy() != null) {
+                channelFeed.getConversationPxy().setGroupId(channelFeed.getId());
+                ConversationService.getInstance(context).addConversation(channelFeed.getConversationPxy());
+            }
+            if (memberUserIds != null && memberUserIds.size() > 0) {
+                for (String userId : memberUserIds) {
+                    ChannelUserMapper channelUserMapper = new ChannelUserMapper(channelFeed.getId(), userId);
+                    if (channelDatabaseService.isChannelUserPresent(channelFeed.getId(), userId)) {
+                        channelDatabaseService.updateChannelUserMapper(channelUserMapper);
+                    } else {
+                        channelDatabaseService.addChannelUserMapper(channelUserMapper);
                     }
                 }
-                if (!isUserDetails && userIds != null && userIds.size() > 0) {
-                    userService.processUserDetails(userIds);
-                }
-                if (isUserDetails) {
-                    userService.processUserDetail(channelFeed.getUsers());
-                }
+            }
+
+            if (isUserDetails) {
+                userService.processUserDetail(channelFeed.getUsers());
             }
         }
     }
@@ -153,12 +183,12 @@ public void updateChannel(Channel channel) {
     public synchronized void syncChannels() {
         final MobiComUserPreference userpref = MobiComUserPreference.getInstance(context);
         SyncChannelFeed syncChannelFeed = channelClientService.getChannelFeed(userpref.getChannelSyncTime());
-        if(syncChannelFeed == null){
+        if (syncChannelFeed == null) {
             return;
         }
         if (syncChannelFeed.isSuccess()) {
             processChannelList(syncChannelFeed.getResponse());
-            BroadcastService.sendUpdateForChannelSync(context, BroadcastService.INTENT_ACTIONS.CHANNEL_SYNC.toString());
+            BroadcastService.sendUpdate(context, BroadcastService.INTENT_ACTIONS.CHANNEL_SYNC.toString());
         }
         userpref.setChannelSyncTime(syncChannelFeed.getGeneratedAt());
 
@@ -177,8 +207,11 @@ public synchronized Channel createChannel(final ChannelInfo channelInfo) {
     }
 
     public Channel getChannel(ChannelFeed channelFeed) {
-        Channel channel = new Channel(channelFeed.getId(), channelFeed.getName(), channelFeed.getAdminName(), channelFeed.getType(), channelFeed.getUnreadCount(),channelFeed.getImageUrl());
+        Channel channel = new Channel(channelFeed.getId(), channelFeed.getName(), channelFeed.getAdminName(), channelFeed.getType(), channelFeed.getUnreadCount(), channelFeed.getImageUrl());
         channel.setClientGroupId(channelFeed.getClientGroupId());
+        channel.setNotificationAfterTime(channelFeed.getNotificationAfterTime());
+        channel.setDeletedAtTime(channelFeed.getDeletedAtTime());
+        channel.setMetadata(channelFeed.getMetadata());
         return channel;
     }
 
@@ -209,6 +242,7 @@ public String removeMemberFromChannelProcess(String clientGroupId, String userId
             channelDatabaseService.removeMemberFromChannel(clientGroupId, userId);
         }
         return apiResponse.getStatus();
+
     }
 
     public String addMemberToChannelProcess(Integer channelKey, String userId) {
@@ -226,7 +260,7 @@ public String addMemberToChannelProcess(Integer channelKey, String userId) {
         return apiResponse.getStatus();
     }
 
-    public String addMemberToChannelProcess(String  clientGroupId, String userId) {
+    public String addMemberToChannelProcess(String clientGroupId, String userId) {
         if (TextUtils.isEmpty(clientGroupId) && TextUtils.isEmpty(userId)) {
             return "";
         }
@@ -234,16 +268,37 @@ public String addMemberToChannelProcess(String  clientGroupId, String userId) {
         if (apiResponse == null) {
             return null;
         }
+        return apiResponse.getStatus();
+    }
+
+    public ApiResponse addMemberToChannelProcessWithResponse(String clientGroupId, String userId) {
+        if (TextUtils.isEmpty(clientGroupId) && TextUtils.isEmpty(userId)) {
+            return null;
+        }
+        ApiResponse apiResponse = channelClientService.addMemberToChannel(clientGroupId, userId);
+        if (apiResponse == null) {
+            return null;
+        }
+        return apiResponse;
+    }
+
+    public ApiResponse addMemberToChannelProcessWithResponse(Integer channelKey, String userId) {
+        if (channelKey == null && TextUtils.isEmpty(userId)) {
+            return null;
+        }
+        ApiResponse apiResponse = channelClientService.addMemberToChannel(channelKey, userId);
+        if (apiResponse == null) {
+            return null;
+        }
         if (apiResponse.isSuccess()) {
-            Channel channel = channelDatabaseService.getChannelByClientGroupId(clientGroupId);
-            ChannelUserMapper channelUserMapper = new ChannelUserMapper(channel.getKey(), userId);
+            ChannelUserMapper channelUserMapper = new ChannelUserMapper(channelKey, userId);
             channelDatabaseService.addChannelUserMapper(channelUserMapper);
         }
-        return apiResponse.getStatus();
+        return apiResponse;
     }
 
     public String addMemberToMultipleChannelsProcess(Set<String> clientGroupIds, String userId) {
-        if (clientGroupIds == null &&  TextUtils.isEmpty(userId)) {
+        if (clientGroupIds == null && TextUtils.isEmpty(userId)) {
             return "";
         }
         ApiResponse apiResponse = channelClientService.addMemberToMultipleChannelsByClientGroupIds(clientGroupIds, userId);
@@ -254,7 +309,7 @@ public String addMemberToMultipleChannelsProcess(Set<String> clientGroupIds, Str
     }
 
     public String addMemberToMultipleChannelsProcessByChannelKeys(Set<Integer> channelKeys, String userId) {
-        if (channelKeys == null &&  TextUtils.isEmpty(userId)) {
+        if (channelKeys == null && TextUtils.isEmpty(userId)) {
             return "";
         }
         ApiResponse apiResponse = channelClientService.addMemberToMultipleChannelsByChannelKey(channelKeys, userId);
@@ -323,12 +378,12 @@ public synchronized void processChannelList(List<ChannelFeed> channelFeedList) {
                     for (String userId : memberUserIds) {
                         ChannelUserMapper channelUserMapper = new ChannelUserMapper(channelFeed.getId(), userId);
                         channelDatabaseService.addChannelUserMapper(channelUserMapper);
-                        if (!baseContactService.isContactExists(userId)){
+                        if (!baseContactService.isContactExists(userId)) {
                             userIds.add(userId);
                         }
                     }
-                    if(userIds != null && userIds.size()>0){
-                        userService.processUserDetails(userIds);
+                    if (userIds != null && userIds.size() > 0) {
+                        userService.processUserDetailsByUserIds(userIds);
                     }
                 }
             }
@@ -348,14 +403,14 @@ public synchronized boolean processIsUserPresentInChannel(String clientGroupId)
         return channelDatabaseService.isChannelUserPresent(channel.getKey(), MobiComUserPreference.getInstance(context).getUserId());
     }
 
-    public synchronized boolean isUserAlreadyPresentInChannel(String  clientGroupId, String userId) {
+    public synchronized boolean isUserAlreadyPresentInChannel(String clientGroupId, String userId) {
         Channel channel = channelDatabaseService.getChannelByClientGroupId(clientGroupId);
         return channelDatabaseService.isChannelUserPresent(channel.getKey(), userId);
     }
 
     public synchronized String processChannelDeleteConversation(Channel channel, Context context) {
-           String response =  new MobiComConversationService(context).deleteSync(null,channel,null);
-         if(!TextUtils.isEmpty(response) && "success".equals(response)){
+        String response = new MobiComConversationService(context).deleteSync(null, channel, null);
+        if (!TextUtils.isEmpty(response) && "success".equals(response)) {
             channelDatabaseService.deleteChannelUserMappers(channel.getKey());
             channelDatabaseService.deleteChannel(channel.getKey());
         }
@@ -363,12 +418,156 @@ public synchronized String processChannelDeleteConversation(Channel channel, Con
 
     }
 
-    public void updateChannelLocalImageURI(Integer channelKey,String localImageURI){
-        channelDatabaseService.updateChannelLocalImageURI(channelKey,localImageURI);
+    public void updateChannelLocalImageURI(Integer channelKey, String localImageURI) {
+        channelDatabaseService.updateChannelLocalImageURI(channelKey, localImageURI);
     }
 
-}
+    public ApiResponse muteNotifications(MuteNotificationRequest muteNotificationRequest) {
+
+        ApiResponse apiResponse = channelClientService.muteNotification(muteNotificationRequest);
+
+        if (apiResponse == null) {
+            return null;
+        }
+        if (apiResponse.isSuccess()) {
+            channelDatabaseService.updateNotificationAfterTime(muteNotificationRequest.getId(), muteNotificationRequest.getNotificationAfterTime());
+        }
+        return apiResponse;
+    }
 
+    public Channel getChannelByClientGroupId(String clientGroupId) {
+        if (TextUtils.isEmpty(clientGroupId)) {
+            return null;
+        }
+        return channelDatabaseService.getChannelByClientGroupId(clientGroupId);
+    }
 
+    public ChannelFeedApiResponse createChannelWithResponse(ChannelInfo channelInfo) {
+        ChannelFeedApiResponse channelFeedApiResponse = channelClientService.createChannelWithResponse(channelInfo);
+        if (channelFeedApiResponse == null) {
+            return null;
+        }
+        if (channelFeedApiResponse.isSuccess()) {
+            ChannelFeed channelFeed = channelFeedApiResponse.getResponse();
+            if (channelFeed != null) {
+                ChannelFeed[] channelFeeds = new ChannelFeed[1];
+                channelFeeds[0] = channelFeed;
+                processChannelFeedList(channelFeeds, true);
+            }
+        }
+        return channelFeedApiResponse;
+    }
 
+    public ApiResponse addMemberToChannelWithResponseProcess(Integer channelKey, String userId) {
+        if (channelKey == null && TextUtils.isEmpty(userId)) {
+            return null;
+        }
+        ApiResponse apiResponse = channelClientService.addMemberToChannel(channelKey, userId);
+        if (apiResponse == null) {
+            return null;
+        }
+        if (apiResponse.isSuccess()) {
+            ChannelUserMapper channelUserMapper = new ChannelUserMapper(channelKey, userId);
+            channelDatabaseService.addChannelUserMapper(channelUserMapper);
+        }
+        return apiResponse;
+    }
+
+    public String getGroupOfTwoReceiverUserId(Integer channelKey) {
+        return channelDatabaseService.getGroupOfTwoReceiverId(channelKey);
+    }
 
+    public Channel createGroupOfTwo(ChannelInfo channelInfo) {
+        if (channelInfo == null) {
+            return null;
+        }
+        if (!TextUtils.isEmpty(channelInfo.getClientGroupId())) {
+            Channel channel = channelDatabaseService.getChannelByClientGroupId(channelInfo.getClientGroupId());
+            if (channel != null) {
+                return channel;
+            } else {
+                ChannelFeedApiResponse channelFeedApiResponse = channelClientService.createChannelWithResponse(channelInfo);
+                if (channelFeedApiResponse == null) {
+                    return null;
+                }
+                if (channelFeedApiResponse.isSuccess()) {
+                    ChannelFeed channelFeed = channelFeedApiResponse.getResponse();
+                    if (channelFeed != null) {
+                        ChannelFeed[] channelFeeds = new ChannelFeed[1];
+                        channelFeeds[0] = channelFeed;
+                        processChannelFeedList(channelFeeds, true);
+                        return getChannel(channelFeed);
+                    }
+                } else {
+                    ChannelFeed channelFeed = channelClientService.getChannelInfo(channelInfo.getClientGroupId());
+                    if (channelFeed != null) {
+                        ChannelFeed[] channelFeeds = new ChannelFeed[1];
+                        channelFeeds[0] = channelFeed;
+                        processChannelFeedList(channelFeeds, false);
+                        return getChannel(channelFeed);
+                    }
+                }
+            }
+        }
+        return null;
+    }
+
+    public List<ChannelFeed> getGroupInfoFromGroupIds(List<String> groupIds) {
+        return getGroupInfoFromGroupIds(groupIds, null);
+    }
+
+    public List<ChannelFeed> getGroupInfoFromClientGroupIds(List<String> clientGroupIds) {
+        return getGroupInfoFromGroupIds(null, clientGroupIds);
+    }
+
+    public List<ChannelFeed> getGroupInfoFromGroupIds(List<String> groupIds, List<String> clientGroupIds) {
+
+        ChannelFeedListResponse channelFeedList = channelClientService.getGroupInfoFromGroupIds(groupIds, clientGroupIds);
+
+        if (channelFeedList == null) {
+            return null;
+        }
+
+        if (channelFeedList != null && ChannelFeedListResponse.SUCCESS.equals(channelFeedList.getStatus())) {
+            processChannelFeedList(channelFeedList.getResponse().toArray(new ChannelFeed[channelFeedList.getResponse().size()]), false);
+        }
+
+        return channelFeedList.getResponse();
+    }
+
+    public boolean addMemberToContactGroup(String contactGroupId, String groupType, List<String> contactGroupMemberList) {
+
+        ApiResponse apiResponse = null;
+        if(!TextUtils.isEmpty(contactGroupId) && contactGroupMemberList!=null) {
+            if (!TextUtils.isEmpty(groupType)) {
+                apiResponse = channelClientService.addMemberToContactGroupOfType(contactGroupId, groupType, contactGroupMemberList);
+
+            } else {
+                apiResponse = channelClientService.addMemberToContactGroup(contactGroupId, contactGroupMemberList);
+            }
+        }
+
+        if (apiResponse == null) {
+            return false;
+        }
+        return apiResponse.isSuccess();
+    }
+
+    public ChannelFeed getMembersFromContactGroup(String contactGroupId, String groupType) {
+        ChannelFeed channelFeed = null;
+        if(!TextUtils.isEmpty(contactGroupId)) {
+            if (!TextUtils.isEmpty(groupType)) {
+                channelFeed = channelClientService.getMembersFromContactGroupOfType(contactGroupId, groupType);
+            } else {
+                channelFeed = channelClientService.getMembersFromContactGroup(contactGroupId);
+            }
+        }
+        if (channelFeed != null) {
+            ChannelFeed[] channelFeeds = new ChannelFeed[1];
+            channelFeeds[0] = channelFeed;
+            processChannelFeedList(channelFeeds, false);
+            return channelFeed;
+        }
+        return null;
+    }
+}
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/contact/AppContactService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/contact/AppContactService.java
index 38513ff6..e6d05794 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/contact/AppContactService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/contact/AppContactService.java
@@ -3,7 +3,6 @@
 import android.content.Context;
 import android.graphics.Bitmap;
 import android.text.TextUtils;
-import android.util.Log;
 
 import com.applozic.mobicomkit.api.attachment.FileClientService;
 import com.applozic.mobicomkit.broadcast.BroadcastService;
@@ -28,9 +27,9 @@
     FileClientService fileClientService;
 
     public AppContactService(Context context) {
-        this.context = context;
+        this.context = context.getApplicationContext();
         this.contactDatabase = new ContactDatabase(context);
-        this.fileClientService =  new FileClientService(context);
+        this.fileClientService = new FileClientService(context);
     }
 
     @Override
@@ -40,7 +39,7 @@ public void add(Contact contact) {
 
     @Override
     public void addAll(List<Contact> contactList) {
-        for (Contact contact: contactList) {
+        for (Contact contact : contactList) {
             upsert(contact);
         }
     }
@@ -105,7 +104,7 @@ public Bitmap downloadContactImage(Context context, Contact contact) {
 
         Bitmap bitmap = fileClientService.downloadBitmap(contact, null);
         if (bitmap != null) {
-            File file = FileClientService.getFilePath(contact.getContactIds(), context, "image", true);
+            File file = FileClientService.getFilePath(contact.getContactIds(), context.getApplicationContext(), "image", true);
             String imageLocalPath = ImageUtils.saveImageToInternalStorage(file, bitmap);
             contact.setLocalImageUrl(imageLocalPath);
         }
@@ -128,7 +127,7 @@ public Bitmap downloadGroupImage(Context context, Channel channel) {
 
         Bitmap bitmap = fileClientService.downloadBitmap(null, channel);
         if (bitmap != null) {
-            File file = FileClientService.getFilePath(String.valueOf(channel.getKey()), context, "image", true);
+            File file = FileClientService.getFilePath(String.valueOf(channel.getKey()), context.getApplicationContext(), "image", true);
             String imageLocalPath = ImageUtils.saveImageToInternalStorage(file, bitmap);
             channel.setLocalImageUri(imageLocalPath);
         }
@@ -158,23 +157,23 @@ public boolean isContactExists(String contactId) {
     @Override
     public void updateConnectedStatus(String contactId, Date date, boolean connected) {
         Contact contact = contactDatabase.getContactById(contactId);
-            if(contact != null && contact.isConnected() != connected){
-                contactDatabase.updateConnectedOrDisconnectedStatus(contactId, date, connected);
-                BroadcastService.sendUpdateLastSeenAtTimeBroadcast(context, BroadcastService.INTENT_ACTIONS.UPDATE_LAST_SEEN_AT_TIME.toString(), contactId);
-            }
+        if (contact != null && contact.isConnected() != connected) {
+            contactDatabase.updateConnectedOrDisconnectedStatus(contactId, date, connected);
+            BroadcastService.sendUpdateLastSeenAtTimeBroadcast(context, BroadcastService.INTENT_ACTIONS.UPDATE_LAST_SEEN_AT_TIME.toString(), contactId);
+        }
     }
 
     @Override
-    public void updateUserBlocked(String userId,boolean userBlocked) {
-        if(!TextUtils.isEmpty(userId)){
-            contactDatabase.updateUserBlockStatus(userId,userBlocked);
+    public void updateUserBlocked(String userId, boolean userBlocked) {
+        if (!TextUtils.isEmpty(userId)) {
+            contactDatabase.updateUserBlockStatus(userId, userBlocked);
             BroadcastService.sendUpdateLastSeenAtTimeBroadcast(context, BroadcastService.INTENT_ACTIONS.UPDATE_LAST_SEEN_AT_TIME.toString(), userId);
         }
     }
 
     @Override
     public void updateUserBlockedBy(String userId, boolean userBlockedBy) {
-        if(!TextUtils.isEmpty(userId)){
+        if (!TextUtils.isEmpty(userId)) {
             contactDatabase.updateUserBlockByStatus(userId, userBlockedBy);
             BroadcastService.sendUpdateLastSeenAtTimeBroadcast(context, BroadcastService.INTENT_ACTIONS.UPDATE_LAST_SEEN_AT_TIME.toString(), userId);
         }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/contact/ContactService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/contact/ContactService.java
index bc3c46b7..adf7148f 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/contact/ContactService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/contact/ContactService.java
@@ -1,17 +1,18 @@
 package com.applozic.mobicomkit.contact;
 
 import android.content.Context;
-import android.content.res.AssetFileDescriptor;
 import android.database.Cursor;
 import android.net.Uri;
 import android.provider.ContactsContract;
-import android.util.Log;
 
 import com.applozic.mobicomkit.api.attachment.FileClientService;
+import com.applozic.mobicommons.commons.core.utils.Utils;
 
+import java.io.BufferedReader;
 import java.io.File;
-import java.io.FileInputStream;
 import java.io.FileOutputStream;
+import java.io.InputStream;
+import java.io.InputStreamReader;
 import java.text.SimpleDateFormat;
 import java.util.Date;
 
@@ -37,24 +38,31 @@ public File vCard(Uri contactData) throws Exception {
         Uri uri = Uri.withAppendedPath(ContactsContract.Contacts.CONTENT_VCARD_URI, lookupKey);
         String name = cursor.getString(cursor.getColumnIndexOrThrow(ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME));
 
-        AssetFileDescriptor fd;
-
         String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());
         String imageFileName = "CONTACT_" + timeStamp + "_" + ".vcf";
 
-        File outputFile = FileClientService.getFilePath(imageFileName, context, "text/x-vcard");
+        File outputFile = FileClientService.getFilePath(imageFileName, context.getApplicationContext(), "text/x-vcard");
+        BufferedReader br = null;
+        InputStream inputStream = context.getContentResolver().openInputStream(uri);
 
-        fd = context.getContentResolver().openAssetFileDescriptor(uri, "r");
+        br = new BufferedReader(new InputStreamReader(inputStream));
+        StringBuilder sb = new StringBuilder();
+        try {
+            String line;
+            if (br != null) {
+                while ((line = br.readLine()) != null) {
+                    sb.append(line).append('\n');
+                }
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
 
-        FileInputStream fis = fd.createInputStream();
-        byte[] buf = new byte[(int) fd.getDeclaredLength()];
-        fis.read(buf);
-        String cvFdata = new String(buf);
-        if (!MobiComVCFParser.validateData(cvFdata)) {
-            Log.i("vCard ::", cvFdata.toString());
+        byte[] buf = sb.toString().trim().getBytes();
+        if (!MobiComVCFParser.validateData(sb.toString())) {
+            Utils.printLog(context,"vCard ::", sb.toString().toString());
             throw new Exception("contact exported is not proper in proper format");
         }
-        Log.i(" data:", new String(buf));
         FileOutputStream fileOutputStream = new FileOutputStream(outputFile.getAbsoluteFile());
         fileOutputStream.write(buf);
         fileOutputStream.close();
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/contact/MobiComVCFParser.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/contact/MobiComVCFParser.java
index c2ae78d3..f214861f 100644
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/contact/MobiComVCFParser.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/contact/MobiComVCFParser.java
@@ -3,11 +3,11 @@
 /**
  * Created by devashish on 08/03/16.
  */
+
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
 
 import android.util.Base64;
-import android.util.Log;
 
 import java.io.BufferedReader;
 import java.io.File;
@@ -17,8 +17,7 @@
 /**
  * Parser code for parsing the vCard file and creating a CSV file.
  */
-public class MobiComVCFParser
-{
+public class MobiComVCFParser {
 
     public static final String BEGIN_VCARD = "BEGIN:VCARD";
     public static final String END_VCARD = "END:VCARD";
@@ -27,22 +26,21 @@
     public VCFContactData vcfContactData;
 
     /**
-     *  This method will validate basic initial data exported from contact.
+     * This method will validate basic initial data exported from contact.
+     *
      * @param data
      * @return
      */
-    public static boolean validateData(String data){
-
-        return (data!=null && data.replaceAll("[\n\r]", "").startsWith(BEGIN_VCARD) && data.replaceAll("[\n\r]", "").endsWith(END_VCARD));
+    public static boolean validateData(String data) {
+        return (data != null && data.replaceAll("[\n\r]", "").trim().startsWith(BEGIN_VCARD) && data.replaceAll("[\n\r]", "").trim().endsWith(END_VCARD));
     }
 
     /**
-     *
      * @param filePath path of the vcf stored.
-     * @return  returns VCFContactData- data prased from vcf file.
+     * @return returns VCFContactData- data prased from vcf file.
      * @throws Exception
      */
-    public VCFContactData parseCVFContactData(String filePath) throws  Exception {
+    public VCFContactData parseCVFContactData(String filePath) throws Exception {
 
         File file = new File(filePath);
         FileReader fin = new FileReader(file);
@@ -59,7 +57,7 @@ public VCFContactData parseCVFContactData(String filePath) throws  Exception {
 
                 //END
                 vcfContactData.setTelephoneNumber(contactBuffer.toString());
-                if(imageByteCode!=null){
+                if (imageByteCode != null) {
                     vcfContactData.setProfilePic(stringToBitMap(imageByteCode.toString()));
                 }
                 return vcfContactData;
@@ -82,13 +80,13 @@ public VCFContactData parseCVFContactData(String filePath) throws  Exception {
                 if (tokens.length >= 2) {
                     imageByteCode = new StringBuffer().append(tokens[1]);
                 }
-            }else if(sLine.startsWith("EMAIL")){
+            } else if (sLine.startsWith("EMAIL")) {
                 String[] tokens = sLine.split(":");
                 if (tokens.length >= 2) {
                     vcfContactData.setEmail(tokens[1]);
                 }
             } else {
-                if(imageByteCode!=null){
+                if (imageByteCode != null) {
                     imageByteCode.append(sLine);
                 }
             }
@@ -100,13 +98,12 @@ public VCFContactData parseCVFContactData(String filePath) throws  Exception {
      * @param encodedString
      * @return bitmap (from given string)
      */
-    public Bitmap stringToBitMap(String encodedString){
-        try{
-            byte [] encodeByte= Base64.decode(encodedString, Base64.DEFAULT);
-            Bitmap bitmap= BitmapFactory.decodeByteArray(encodeByte, 0, encodeByte.length);
+    public Bitmap stringToBitMap(String encodedString) {
+        try {
+            byte[] encodeByte = Base64.decode(encodedString, Base64.DEFAULT);
+            Bitmap bitmap = BitmapFactory.decodeByteArray(encodeByte, 0, encodeByte.length);
             return bitmap;
-        }catch(Exception e){
-            Log.e("MobiComVCFParser", encodedString , e);
+        } catch (Exception e) {
             return null;
         }
     }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/contact/VCFContactData.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/contact/VCFContactData.java
index dc286170..7c42cb04 100644
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/contact/VCFContactData.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/contact/VCFContactData.java
@@ -45,8 +45,8 @@ public void setTelephoneNumber(String telephoneNumber) {
         this.telephoneNumber = telephoneNumber;
     }
 
-    public boolean isValid(){
-      return (this.name!=null && (this.telephoneNumber!=null || this.email!=null)) ;
+    public boolean isValid() {
+        return (this.name != null && (this.telephoneNumber != null || this.email != null));
 
     }
 
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/contact/database/ContactDatabase.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/contact/database/ContactDatabase.java
index a5d5cade..f5856ab5 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/contact/database/ContactDatabase.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/contact/database/ContactDatabase.java
@@ -8,6 +8,7 @@
 import android.support.v4.content.Loader;
 import android.text.TextUtils;
 
+import com.applozic.mobicomkit.ApplozicClient;
 import com.applozic.mobicomkit.api.account.user.MobiComUserPreference;
 import com.applozic.mobicomkit.database.MobiComDatabaseHelper;
 import com.applozic.mobicommons.commons.core.utils.Utils;
@@ -29,7 +30,7 @@
     private MobiComDatabaseHelper dbHelper;
 
     public ContactDatabase(Context context) {
-        this.context = context;
+        this.context = context.getApplicationContext();
         this.userPreferences = MobiComUserPreference.getInstance(context);
         this.dbHelper = MobiComDatabaseHelper.getInstance(context);
     }
@@ -46,24 +47,30 @@ public Contact getContact(Cursor cursor) {
      * @return
      */
     public Contact getContact(Cursor cursor, String primaryKeyAliash) {
-
         Contact contact = new Contact();
-        contact.setFullName(cursor.getString(cursor.getColumnIndex(MobiComDatabaseHelper.FULL_NAME)));
-        contact.setUserId(cursor.getString(cursor.getColumnIndex(primaryKeyAliash == null ? MobiComDatabaseHelper.USERID : primaryKeyAliash)));
-        contact.setLocalImageUrl(cursor.getString(cursor.getColumnIndex(MobiComDatabaseHelper.CONTACT_IMAGE_LOCAL_URI)));
-        contact.setImageURL(cursor.getString(cursor.getColumnIndex(MobiComDatabaseHelper.CONTACT_IMAGE_URL)));
-        contact.setContactNumber(cursor.getString(cursor.getColumnIndex(MobiComDatabaseHelper.CONTACT_NO)));
-        contact.setApplicationId(cursor.getString(cursor.getColumnIndex(MobiComDatabaseHelper.APPLICATION_ID)));
-        Long connected = cursor.getLong(cursor.getColumnIndex(MobiComDatabaseHelper.CONNECTED));
-        contact.setConnected(connected != 0 && connected.intValue() == 1);
-        contact.setLastSeenAt(cursor.getLong(cursor.getColumnIndex(MobiComDatabaseHelper.LAST_SEEN_AT_TIME)));
-        contact.processContactNumbers(context);
-        contact.setUnreadCount(cursor.getInt(cursor.getColumnIndex(MobiComDatabaseHelper.UNREAD_COUNT)));
-        Boolean userBlocked = (cursor.getInt(cursor.getColumnIndex(MobiComDatabaseHelper.BLOCKED)) == 1);
-        contact.setBlocked(userBlocked);
-        Boolean userBlockedBy = (cursor.getInt(cursor.getColumnIndex(MobiComDatabaseHelper.BLOCKED_BY)) == 1);
-        contact.setBlockedBy(userBlockedBy);
-        contact.setStatus(cursor.getString(cursor.getColumnIndex(MobiComDatabaseHelper.STATUS)));
+        try {
+            contact.setFullName(cursor.getString(cursor.getColumnIndex(MobiComDatabaseHelper.FULL_NAME)));
+            contact.setUserId(cursor.getString(cursor.getColumnIndex(primaryKeyAliash == null ? MobiComDatabaseHelper.USERID : primaryKeyAliash)));
+            contact.setLocalImageUrl(cursor.getString(cursor.getColumnIndex(MobiComDatabaseHelper.CONTACT_IMAGE_LOCAL_URI)));
+            contact.setImageURL(cursor.getString(cursor.getColumnIndex(MobiComDatabaseHelper.CONTACT_IMAGE_URL)));
+            contact.setContactNumber(cursor.getString(cursor.getColumnIndex(MobiComDatabaseHelper.CONTACT_NO)));
+            contact.setApplicationId(cursor.getString(cursor.getColumnIndex(MobiComDatabaseHelper.APPLICATION_ID)));
+            Long connected = cursor.getLong(cursor.getColumnIndex(MobiComDatabaseHelper.CONNECTED));
+            contact.setContactType(cursor.getShort(cursor.getColumnIndex(MobiComDatabaseHelper.CONTACT_TYPE)));
+            contact.setConnected(connected != 0 && connected.intValue() == 1);
+            contact.setLastSeenAt(cursor.getLong(cursor.getColumnIndex(MobiComDatabaseHelper.LAST_SEEN_AT_TIME)));
+            contact.processContactNumbers(context);
+            contact.setUnreadCount(cursor.getInt(cursor.getColumnIndex(MobiComDatabaseHelper.UNREAD_COUNT)));
+            Boolean userBlocked = (cursor.getInt(cursor.getColumnIndex(MobiComDatabaseHelper.BLOCKED)) == 1);
+            contact.setBlocked(userBlocked);
+            Boolean userBlockedBy = (cursor.getInt(cursor.getColumnIndex(MobiComDatabaseHelper.BLOCKED_BY)) == 1);
+            contact.setBlockedBy(userBlockedBy);
+            contact.setStatus(cursor.getString(cursor.getColumnIndex(MobiComDatabaseHelper.STATUS)));
+            contact.setUserTypeId(cursor.getShort(cursor.getColumnIndex(MobiComDatabaseHelper.USER_TYPE_ID)));
+            contact.setDeletedAtTime(cursor.getLong(cursor.getColumnIndex(MobiComDatabaseHelper.DELETED_AT)));
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
         return contact;
     }
 
@@ -87,6 +94,9 @@ public Contact getContact(Cursor cursor, String primaryKeyAliash) {
 
     public List<Contact> getAllContactListExcludingLoggedInUser() {
         SQLiteDatabase db = dbHelper.getWritableDatabase();
+        if (TextUtils.isEmpty(MobiComUserPreference.getInstance(context).getUserId())) {
+            return new ArrayList<Contact>();
+        }
         String structuredNameWhere = MobiComDatabaseHelper.USERID + " != ?";
         Cursor cursor = db.query(CONTACT, null, structuredNameWhere, new String[]{MobiComUserPreference.getInstance(context).getUserId()}, null, null, MobiComDatabaseHelper.FULL_NAME + " asc");
         List<Contact> contactList = getContactList(cursor);
@@ -105,6 +115,9 @@ public Contact getContact(Cursor cursor, String primaryKeyAliash) {
     }
 
     public Contact getContactById(String id) {
+        if (TextUtils.isEmpty(id)) {
+            return null;
+        }
         String structuredNameWhere = MobiComDatabaseHelper.USERID + " =?";
         SQLiteDatabase db = dbHelper.getWritableDatabase();
         Cursor cursor = db.query(CONTACT, null, structuredNameWhere, new String[]{id}, null, null, null);
@@ -127,10 +140,10 @@ public void updateContact(Contact contact) {
         dbHelper.close();
     }
 
-    public void updateLocalImageUri(Contact contact){
-        ContentValues contentValues =  new ContentValues();
-        contentValues.put(MobiComDatabaseHelper.CONTACT_IMAGE_LOCAL_URI,contact.getLocalImageUrl());
-        int updatedRow =  dbHelper.getWritableDatabase().update(CONTACT,contentValues, MobiComDatabaseHelper.USERID + "=?", new String[]{contact.getUserId()});
+    public void updateLocalImageUri(Contact contact) {
+        ContentValues contentValues = new ContentValues();
+        contentValues.put(MobiComDatabaseHelper.CONTACT_IMAGE_LOCAL_URI, contact.getLocalImageUrl());
+        int updatedRow = dbHelper.getWritableDatabase().update(CONTACT, contentValues, MobiComDatabaseHelper.USERID + "=?", new String[]{contact.getUserId()});
     }
 
     public void updateConnectedOrDisconnectedStatus(String userId, Date date, boolean connected) {
@@ -159,19 +172,6 @@ public void updateLastSeenTimeAt(String userId, long lastSeenTime) {
         }
     }
 
-    public Cursor loadContacts() {
-        SQLiteDatabase db = dbHelper.getReadableDatabase();
-        Cursor cursor;
-
-        String query = "select userId as _id, fullName, contactNO, " +
-                "displayName,contactImageURL,contactImageLocalURI,email," +
-                "applicationId,connected,lastSeenAt,unreadCount,blocked," +
-                "blockedBy,status from " + CONTACT;
-
-        cursor = db.rawQuery(query, null);
-
-        return cursor;
-    }
 
     public void updateUserBlockStatus(String userId, boolean userBlocked) {
         try {
@@ -198,9 +198,15 @@ public void updateUserBlockByStatus(String userId, boolean userBlockedBy) {
     }
 
     public void addContact(Contact contact) {
-        ContentValues contentValues = prepareContactValues(contact);
-        dbHelper.getWritableDatabase().insert(CONTACT, null, contentValues);
-        dbHelper.close();
+        try {
+            ContentValues contentValues = prepareContactValues(contact);
+            dbHelper.getWritableDatabase().insert(CONTACT, null, contentValues);
+        } catch (Exception e) {
+            e.printStackTrace();
+        } finally {
+            dbHelper.close();
+        }
+
     }
 
     public ContentValues prepareContactValues(Contact contact) {
@@ -214,7 +220,7 @@ public ContentValues prepareContactValues(Contact contact) {
             contentValues.put(MobiComDatabaseHelper.CONTACT_IMAGE_URL, contact.getImageURL());
             contactImage = getContactById(contact.getUserId());
         }
-        if(contactImage != null && !TextUtils.isEmpty(contactImage.getImageURL()) && !TextUtils.isEmpty(contact.getImageURL()) && !contact.getImageURL().equals(contactImage.getImageURL())){
+        if (contactImage != null && !TextUtils.isEmpty(contactImage.getImageURL()) && !TextUtils.isEmpty(contact.getImageURL()) && !contact.getImageURL().equals(contactImage.getImageURL())) {
             updateContactLocalImageURIToNull(contact.getUserId());
         }
 
@@ -243,6 +249,11 @@ public ContentValues prepareContactValues(Contact contact) {
         if (contact.isBlockedBy()) {
             contentValues.put(MobiComDatabaseHelper.BLOCKED_BY, contact.isBlockedBy());
         }
+        if (contact.getContactType() != 0) {
+            contentValues.put(MobiComDatabaseHelper.CONTACT_TYPE, contact.getContactType());
+        }
+        contentValues.put(MobiComDatabaseHelper.USER_TYPE_ID, contact.getUserTypeId());
+        contentValues.put(MobiComDatabaseHelper.DELETED_AT, contact.getDeletedAtTime());
         return contentValues;
     }
 
@@ -300,7 +311,7 @@ public void deleteAllContact(List<Contact> contacts) {
         }
     }
 
-    public int getChatUnreadCount(){
+    public int getChatUnreadCount() {
         try {
             SQLiteDatabase db = dbHelper.getWritableDatabase();
             final Cursor cursor = db.rawQuery("SELECT COUNT(DISTINCT (userId)) FROM contact WHERE unreadCount > 0 ", null);
@@ -317,7 +328,7 @@ public int getChatUnreadCount(){
         return 0;
     }
 
-    public int getGroupUnreadCount(){
+    public int getGroupUnreadCount() {
         try {
             SQLiteDatabase db = dbHelper.getWritableDatabase();
             final Cursor cursor = db.rawQuery("SELECT COUNT(DISTINCT (channelKey)) FROM channel WHERE unreadCount > 0 ", null);
@@ -340,31 +351,41 @@ public int getGroupUnreadCount(){
             @Override
             public Cursor loadInBackground() {
 
+                if (TextUtils.isEmpty(userPreferences.getUserId())) {
+                    return null;
+                }
                 SQLiteDatabase db = dbHelper.getReadableDatabase();
                 Cursor cursor;
-
                 String query = "select userId as _id, fullName, contactNO, " +
                         "displayName,contactImageURL,contactImageLocalURI,email," +
                         "applicationId,connected,lastSeenAt,unreadCount,blocked," +
-                        "blockedBy,status from " + CONTACT;
+                        "blockedBy,status,contactType,userTypeId,deletedAtTime from " + CONTACT + " where deletedAtTime=0 ";
 
                 if (userIdArray != null && userIdArray.length > 0) {
                     String placeHolderString = Utils.makePlaceHolders(userIdArray.length);
                     if (!TextUtils.isEmpty(searchString)) {
-                        query = query + " where fullName like '%" + searchString.replaceAll("'","''") + "%' and  userId  IN (" + placeHolderString + ")";
+                        query = query + " and fullName like '%" + searchString.replaceAll("'", "''") + "%' and  userId  IN (" + placeHolderString + ")";
                     } else {
-                        query = query + " where userId IN (" + placeHolderString + ")";
+                        query = query + " and userId IN (" + placeHolderString + ")";
                     }
                     query = query + " order by connected desc,lastSeenAt desc ";
 
                     cursor = db.rawQuery(query, userIdArray);
                 } else {
-                    if (!TextUtils.isEmpty(searchString)) {
-                        query = query + " where fullName like '%" + searchString.replaceAll("'","''") + "%'";
+                    if (ApplozicClient.getInstance(context).isShowMyContacts()) {
+                        if (!TextUtils.isEmpty(searchString)) {
+                            query = query + " and fullName like '%" + searchString.replaceAll("'", "''") + "%' AND contactType != 0 AND userId NOT IN ('" + userPreferences.getUserId().replaceAll("'", "''") + "')";
+                        } else {
+                            query = query + " and contactType != 0 AND userId != '" + userPreferences.getUserId() + "'";
+                        }
                     } else {
-                        query = query + " where userId != '" + userPreferences.getUserId() + "'";
+                        if (!TextUtils.isEmpty(searchString)) {
+                            query = query + " and fullName like '%" + searchString.replaceAll("'", "''") + "%' AND userId NOT IN ('" + userPreferences.getUserId().replaceAll("'", "''") + "')";
+                        } else {
+                            query = query + " and userId != '" + userPreferences.getUserId() + "'";
+                        }
                     }
-                    query = query + " order by fullName,userId asc ";
+                    query = query + " order by fullName COLLATE NOCASE,userId COLLATE NOCASE asc ";
                     cursor = db.rawQuery(query, null);
                 }
 
@@ -374,9 +395,9 @@ public Cursor loadInBackground() {
         };
     }
 
-    public void updateContactLocalImageURIToNull(String userId ){
-        ContentValues contentValues =  new ContentValues();
+    public void updateContactLocalImageURIToNull(String userId) {
+        ContentValues contentValues = new ContentValues();
         contentValues.putNull(MobiComDatabaseHelper.CONTACT_IMAGE_LOCAL_URI);
-        int updatedRow =  dbHelper.getWritableDatabase().update(CONTACT,contentValues, MobiComDatabaseHelper.USERID + "=?", new String[]{userId});
+        int updatedRow = dbHelper.getWritableDatabase().update(CONTACT, contentValues, MobiComDatabaseHelper.USERID + "=?", new String[]{userId});
     }
 }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/database/MobiComDatabaseHelper.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/database/MobiComDatabaseHelper.java
index 8b191659..bba275f1 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/database/MobiComDatabaseHelper.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/database/MobiComDatabaseHelper.java
@@ -3,16 +3,16 @@
 import android.content.Context;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteOpenHelper;
-import android.util.Log;
 
 import com.applozic.mobicomkit.api.MobiComKitClientService;
 import com.applozic.mobicomkit.api.account.user.MobiComUserPreference;
 import com.applozic.mobicomkit.api.account.user.UserClientService;
 import com.applozic.mobicommons.commons.core.utils.DBUtils;
+import com.applozic.mobicommons.commons.core.utils.Utils;
 
 public class MobiComDatabaseHelper extends SQLiteOpenHelper {
 
-    public static final int DB_VERSION = 18;
+    public static final int DB_VERSION = 27;
 
     public static final String _ID = "_id";
     public static final String SMS_KEY_STRING = "smsKeyString";
@@ -32,7 +32,7 @@
     public static final String CONTACT_IMAGE_LOCAL_URI = "contactImageLocalURI";
     public static final String CONTACT_IMAGE_URL = "contactImageURL";
     public static final String CHANNEL_IMAGE_URL = "channelImageURL";
-    public static final String CHANNEL_IMAGE_LOCAL_URI= "channelImageLocalURI";
+    public static final String CHANNEL_IMAGE_LOCAL_URI = "channelImageLocalURI";
     public static final String USERID = "userId";
     public static final String EMAIL = "email";
     public static final String APPLICATION_ID = "applicationId";
@@ -53,12 +53,21 @@
     public static final String BLOCKED_BY = "blockedBy";
     public static final String UNREAD_COUNT = "unreadCount";
     public static final String TOPIC_DETAIL = "topicDetail";
+    public static final String TOPIC_LOCAL_IMAGE_URL = "topicLocalImageUrl";
     public static final String CREATED = "created";
     public static final String SENDER_USER_NAME = "senderUserName";
     public static final String CHANNEL = "channel";
     public static final String CHANNEL_USER_X = "channel_User_X";
     public static final String KEY = "key";
     public static final String CONVERSATION = "conversation";
+    public static final String CONTACT_TYPE = "contactType";
+    public static final String USER_TYPE_ID = "userTypeId";
+    public static final String NOTIFICATION_AFTER_TIME = "notificationAfterTime";
+    public static final String DELETED_AT = "deletedAtTime";
+    public static final String CHANNEL_META_DATA = "channelMetadata";
+    public static final String HIDDEN = "hidden";
+    public static final String REPLY_MESSAGE = "replyMessage";
+
 
     public static final String CREATE_SCHEDULE_SMS_TABLE = "create table " + SCHEDULE_SMS_TABLE_NAME + "( "
             + _ID + " integer primary key autoincrement  ," + SMS
@@ -96,11 +105,13 @@
             + "topicId varchar(300) null,"
             + "channelKey integer default 0,"
             + STATUS + " varchar(200) default 0,"
-            + CLIENT_GROUP_ID +" varchar(1000) default null,"
+            + CLIENT_GROUP_ID + " varchar(1000) default null,"
+            + HIDDEN + " integer default 0,"
+            + REPLY_MESSAGE + " INTEGER default 0,"
             + "UNIQUE (keyString,contactNumbers,channelKey))";
     private static final String SMS_BACKUP = "sms_backup";
-    public static final String INSERT_INTO_SMS_FROM_SMS_BACKUP_QUERY = "INSERT INTO sms (id,keyString,toNumbers,contactNumbers,message,type,read,delivered,storeOnDevice,sentToServer,createdAt,scheduledAt,source,timeToLive,fileMetaKeyStrings,filePaths,thumbnailUrl,size,name,contentType,metaFileKeyString,blobKeyString,canceled,deleted,applicationId,messageContentType,conversationId,topicId,channelKey,status)" +
-            " SELECT id,keyString,toNumbers,contactNumbers,message,type,read,delivered,storeOnDevice,sentToServer,createdAt,scheduledAt,source,timeToLive,fileMetaKeyStrings,filePaths,thumbnailUrl,size,name,contentType,metaFileKeyString,blobKeyString,canceled,deleted,applicationId,messageContentType,conversationId,topicId,channelKey,status" +
+    public static final String INSERT_INTO_SMS_FROM_SMS_BACKUP_QUERY = "INSERT INTO sms (id,keyString,toNumbers,contactNumbers,message,type,read,delivered,storeOnDevice,sentToServer,createdAt,scheduledAt,source,timeToLive,fileMetaKeyStrings,filePaths,metadata,thumbnailUrl,size,name,contentType,metaFileKeyString,blobKeyString,canceled,deleted,applicationId,messageContentType,conversationId,topicId,channelKey,status,hidden,replyMessage)" +
+            " SELECT id,keyString,toNumbers,contactNumbers,message,type,read,delivered,storeOnDevice,sentToServer,createdAt,scheduledAt,source,timeToLive,fileMetaKeyStrings,filePaths,metadata,thumbnailUrl,size,name,contentType,metaFileKeyString,blobKeyString,canceled,deleted,applicationId,messageContentType,conversationId,topicId,channelKey,status,hidden,replyMessage" +
             " FROM " + SMS_BACKUP;
     private static final String DROP_SMS_BACKUP = "DROP TABLE " + SMS_BACKUP;
     private static final String ALTER_SMS_TABLE_FOR_DELETE_COLUMN = "ALTER TABLE " + SMS + " ADD COLUMN deleted integer default 0";
@@ -115,12 +126,22 @@
     private static final String ALTER_MESSAGE_TABLE_FOR_TOPIC_ID_COLUMN = "ALTER TABLE " + SMS + " ADD COLUMN " + TOPIC_ID + " varchar(300) null";
     private static final String ALTER_CONTACT_TABLE_UNREAD_COUNT_COLUMN = "ALTER TABLE " + CONTACT_TABLE_NAME + " ADD COLUMN " + UNREAD_COUNT + " integer default 0";
     private static final String ALTER_CHANNEL_TABLE_UNREAD_COUNT_COLUMN = "ALTER TABLE " + CHANNEL + " ADD COLUMN " + UNREAD_COUNT + " integer default 0";
-    private static final String ALTER_CONTACT_TABLE_BLOCKED_COLUMN = "ALTER TABLE " + CONTACT_TABLE_NAME + " ADD COLUMN " + BLOCKED+ " integer default 0";
-    private static final String ALTER_CONTACT_TABLE_BLOCKED_BY_COLUMN = "ALTER TABLE " + CONTACT_TABLE_NAME + " ADD COLUMN " + BLOCKED_BY+ " integer default 0";
+    private static final String ALTER_CONTACT_TABLE_BLOCKED_COLUMN = "ALTER TABLE " + CONTACT_TABLE_NAME + " ADD COLUMN " + BLOCKED + " integer default 0";
+    private static final String ALTER_CONTACT_TABLE_BLOCKED_BY_COLUMN = "ALTER TABLE " + CONTACT_TABLE_NAME + " ADD COLUMN " + BLOCKED_BY + " integer default 0";
     private static final String ALTER_CHANNEL_TABLE_FOR_IMAGE_URL_COLUMN = "ALTER TABLE " + CHANNEL + " ADD COLUMN " + CHANNEL_IMAGE_URL + " varchar(300) null";
     private static final String ALTER_CHANNEL_TABLE_FOR_IMAGE_LOCAL_URI_COLUMN = "ALTER TABLE " + CHANNEL + " ADD COLUMN " + CHANNEL_IMAGE_LOCAL_URI + " varchar(300) null";
     private static final String ALTER_CHANNEL_TABLE_FOR_CLIENT_GROUP_ID = "ALTER TABLE " + CHANNEL + " ADD COLUMN " + CLIENT_GROUP_ID + " varchar(200) null";
     private static final String ALTER_SMS_TABLE = "ALTER TABLE " + SMS + " RENAME TO " + SMS_BACKUP;
+    private static final String ALTER_CONVERSATION_TABLE_FOR_TOPIC_LOCAL_IMAGE_URL = "ALTER TABLE " + CONVERSATION + " ADD COLUMN " + TOPIC_LOCAL_IMAGE_URL + " varchar(500) null";
+    private static final String ALTER_CONTACT_TABLE_FOR_CONTENT_TYPE_COLUMN = "ALTER TABLE " + CONTACT_TABLE_NAME + " ADD COLUMN " + CONTACT_TYPE + " integer default 0";
+    private static final String ALTER_CONTACT_TABLE_FOR_USER_TYPE_ID_COLUMN = "ALTER TABLE " + CONTACT_TABLE_NAME + " ADD COLUMN " + USER_TYPE_ID + " integer default 0";
+    private static final String ALTER_CHANNEL_TABLE_FOR_NOTIFICATION_AFTER_TIME_COLUMN = "ALTER TABLE " + CHANNEL + " ADD COLUMN " + NOTIFICATION_AFTER_TIME + " integer default 0";
+    private static final String ALTER_CHANNEL_TABLE_FOR_DELETED_AT_COLUMN = "ALTER TABLE " + CHANNEL + " ADD COLUMN " + DELETED_AT + " integer";
+    private static final String ALTER_CHANNEL_TABLE_FOR_CHANNEL_META_DATA = "ALTER TABLE " + CHANNEL + " ADD COLUMN " + CHANNEL_META_DATA + " VARCHAR(2000)";
+    private static final String ALTER_SMS_TABLE_FOR_HIDDEN = "ALTER TABLE " + SMS + " ADD COLUMN hidden integer default 0";
+    private static final String ALTER_SMS_TABLE_FOR_REPLY_MESSAGE_COLUMN = "ALTER TABLE " + SMS + " ADD COLUMN replyMessage INTEGER default 0";
+    private static final String ALTER_CONTACT_TABLE_FOR_DELETED_AT = "ALTER TABLE " + CONTACT_TABLE_NAME + " ADD COLUMN " + DELETED_AT + " integer default 0";
+
     private static final String CREATE_CONTACT_TABLE = " CREATE TABLE contact ( " +
             USERID + " VARCHAR(50) primary key, "
             + FULL_NAME + " VARCHAR(200), "
@@ -135,7 +156,10 @@
             + UNREAD_COUNT + " integer default 0,"
             + BLOCKED + " integer default 0, "
             + BLOCKED_BY + " integer default 0, "
-            + STATUS +" varchar(2500) null "
+            + STATUS + " varchar(2500) null, "
+            + CONTACT_TYPE + " integer default 0,"
+            + USER_TYPE_ID + " integer default 0,"
+            + DELETED_AT +" INTEGER default 0 "
             + " ) ";
 
     private static final String CREATE_CHANNEL_TABLE = " CREATE TABLE channel ( " +
@@ -148,8 +172,10 @@
             + UNREAD_COUNT + " integer default 0, "
             + USER_COUNT + "integer, "
             + CHANNEL_IMAGE_URL + " VARCHAR(300), "
-            + CHANNEL_IMAGE_LOCAL_URI + " VARCHAR(300)"
-            + " )";
+            + CHANNEL_IMAGE_LOCAL_URI + " VARCHAR(300), "
+            + NOTIFICATION_AFTER_TIME + " integer default 0, "
+            + DELETED_AT + " integer,"
+            + CHANNEL_META_DATA + " VARCHAR(2000)) ";
 
     private static final String CREATE_CHANNEL_USER_X_TABLE = " CREATE TABLE channel_User_X ( " +
             _ID + " integer primary key autoincrement, "
@@ -165,10 +191,11 @@
             + TOPIC_ID + " varchar(100) , "
             + USERID + " varchar(100) ,"
             + CHANNEL_KEY + " integer ,"
-            + TOPIC_DETAIL + " varchar(2500))";
+            + TOPIC_DETAIL + " varchar(2500),"
+            + TOPIC_LOCAL_IMAGE_URL + " varchar(500))";
 
     private static final String CREATE_INDEX_SMS_TYPE = "CREATE INDEX IF NOT EXISTS INDEX_SMS_TYPE ON sms (type)";
-    private static final String CREATE_INDEX_ON_CREATED_AT =  "CREATE INDEX IF NOT EXISTS message_createdAt ON sms (createdAt)";
+    private static final String CREATE_INDEX_ON_CREATED_AT = "CREATE INDEX IF NOT EXISTS message_createdAt ON sms (createdAt)";
     private static final String TAG = "MobiComDatabaseHelper";
     private static MobiComDatabaseHelper sInstance;
     private Context context;
@@ -213,6 +240,7 @@ public void onCreate(SQLiteDatabase database) {
         if (!DBUtils.isTableExists(database, CHANNEL_USER_X)) {
             database.execSQL(CREATE_CHANNEL_USER_X_TABLE);
         }
+
         //ALL indexes should go here after creating tables.
         database.execSQL(CREATE_INDEX_ON_CREATED_AT);
         database.execSQL(CREATE_INDEX_SMS_TYPE);
@@ -225,7 +253,7 @@ public void onUpgrade(SQLiteDatabase database, int oldVersion,
         //Note: some user might directly upgrade from an old version to the new version, in that case it may happen that
         //schedule sms table is not present.
         if (newVersion > oldVersion) {
-            Log.i(TAG, "Upgrading database from version "
+            Utils.printLog(context,TAG, "Upgrading database from version "
                     + oldVersion + " to " + newVersion
                     + ", which will destroy all old data");
 
@@ -289,12 +317,39 @@ public void onUpgrade(SQLiteDatabase database, int oldVersion,
             if (!DBUtils.existsColumnInTable(database, "channel", CLIENT_GROUP_ID)) {
                 database.execSQL(ALTER_CHANNEL_TABLE_FOR_CLIENT_GROUP_ID);
             }
-            if(!DBUtils.existsColumnInTable(database, CHANNEL, UNREAD_COUNT)){
+            if (!DBUtils.existsColumnInTable(database, CHANNEL, UNREAD_COUNT)) {
                 database.execSQL(ALTER_CHANNEL_TABLE_UNREAD_COUNT_COLUMN);
             }
             if (!DBUtils.existsColumnInTable(database, "contact", STATUS)) {
                 database.execSQL(ALTER_CONTACT_TABLE_FOR_STATUS);
             }
+            if (!DBUtils.existsColumnInTable(database, "contact", CONTACT_TYPE)) {
+                database.execSQL(ALTER_CONTACT_TABLE_FOR_CONTENT_TYPE_COLUMN);
+            }
+            if (!DBUtils.existsColumnInTable(database, CONVERSATION, TOPIC_LOCAL_IMAGE_URL)) {
+                database.execSQL(ALTER_CONVERSATION_TABLE_FOR_TOPIC_LOCAL_IMAGE_URL);
+            }
+            if (!DBUtils.existsColumnInTable(database, "contact", USER_TYPE_ID)) {
+                database.execSQL(ALTER_CONTACT_TABLE_FOR_USER_TYPE_ID_COLUMN);
+            }
+            if (!DBUtils.existsColumnInTable(database, "channel", NOTIFICATION_AFTER_TIME)) {
+                database.execSQL(ALTER_CHANNEL_TABLE_FOR_NOTIFICATION_AFTER_TIME_COLUMN);
+            }
+            if (!DBUtils.existsColumnInTable(database, "channel", DELETED_AT)) {
+                database.execSQL(ALTER_CHANNEL_TABLE_FOR_DELETED_AT_COLUMN);
+            }
+            if (!DBUtils.existsColumnInTable(database, "contact", DELETED_AT)) {
+                database.execSQL(ALTER_CONTACT_TABLE_FOR_DELETED_AT);
+            }
+            if (!DBUtils.existsColumnInTable(database, CHANNEL, CHANNEL_META_DATA)) {
+                database.execSQL(ALTER_CHANNEL_TABLE_FOR_CHANNEL_META_DATA);
+            }
+            if (!DBUtils.existsColumnInTable(database, SMS, HIDDEN)) {
+                database.execSQL(ALTER_SMS_TABLE_FOR_HIDDEN);
+            }
+            if (!DBUtils.existsColumnInTable(database, SMS, REPLY_MESSAGE)) {
+                database.execSQL(ALTER_SMS_TABLE_FOR_REPLY_MESSAGE_COLUMN);
+            }
             database.execSQL(CREATE_INDEX_ON_CREATED_AT);
             database.execSQL(CREATE_INDEX_SMS_TYPE);
             database.execSQL(ALTER_SMS_TABLE);
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/ApiResponse.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/ApiResponse.java
index 97ea3ea6..50e5af7a 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/ApiResponse.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/ApiResponse.java
@@ -2,6 +2,8 @@
 
 import com.applozic.mobicommons.json.JsonMarker;
 
+import java.util.List;
+
 /**
  * Created by sunil on 23/12/15.
  */
@@ -11,6 +13,8 @@
     private String status;
     private String generatedAt;
     private Object response;
+    private List<ErrorResponseFeed> errorResponse;
+
 
     public String getStatus() {
         return status;
@@ -36,10 +40,18 @@ public void setResponse(Object response) {
         this.response = response;
     }
 
-    public boolean isSuccess(){
+    public boolean isSuccess() {
         return SUCCESS.equals(status);
     }
 
+    public List<ErrorResponseFeed> getErrorResponse() {
+        return errorResponse;
+    }
+
+    public void setErrorResponse(List<ErrorResponseFeed> errorResponse) {
+        this.errorResponse = errorResponse;
+    }
+
     @Override
     public String toString() {
         return "ApiResponse{" +
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/ChannelFeed.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/ChannelFeed.java
index 5cf86859..74b279cd 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/ChannelFeed.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/ChannelFeed.java
@@ -1,10 +1,14 @@
 package com.applozic.mobicomkit.feed;
 
+import android.text.TextUtils;
+
 import com.applozic.mobicommons.json.JsonMarker;
 import com.applozic.mobicomkit.api.account.user.UserDetail;
 import com.applozic.mobicommons.people.channel.Channel;
 import com.applozic.mobicommons.people.channel.Conversation;
 
+import java.util.HashMap;
+import java.util.Map;
 import java.util.Set;
 
 /**
@@ -16,14 +20,18 @@
     private String clientGroupId;
     private String name;
     private String adminName;
+    private String adminId;
     private int unreadCount;
     private int userCount;
     private String imageUrl;
     private short type;
     private Set<String> membersName;
+    private Set<String> membersId;
     private Set<UserDetail> users;
     private Conversation conversationPxy;
-
+    private Long notificationAfterTime;
+    private Long deletedAtTime;
+    private Map<String, String> metadata = new HashMap<>();
 
     public ChannelFeed(Integer id, String name) {
         this.id = id;
@@ -60,7 +68,7 @@ public void setName(String name) {
     }
 
     public String getAdminName() {
-        return adminName;
+        return TextUtils.isEmpty(adminName) ? adminId : adminName;
     }
 
     public void setAdminName(String adminName) {
@@ -92,13 +100,22 @@ public void setType(short type) {
     }
 
     public Set<String> getMembersName() {
-        return membersName;
+
+        return (membersName == null) ? membersId : membersName;
     }
 
     public void setMembersName(Set<String> membersName) {
         this.membersName = membersName;
     }
 
+    public Set<String> getContactGroupMembersId() {
+        return membersId;
+    }
+
+    public void setContactGroupMembersId(Set<String> membersId) {
+        this.membersId = membersId;
+    }
+
     public Conversation getConversationPxy() {
         return conversationPxy;
     }
@@ -123,19 +140,64 @@ public void setImageUrl(String imageUrl) {
         this.imageUrl = imageUrl;
     }
 
+    public Long getNotificationAfterTime() {
+        return notificationAfterTime;
+    }
+
+    public void setNotificationAfterTime(Long notificationAfterTime) {
+        this.notificationAfterTime = notificationAfterTime;
+    }
+
+    public Long getDeletedAtTime() {
+        return deletedAtTime;
+    }
+
+    public void setDeletedAtTime(Long deletedAtTime) {
+        this.deletedAtTime = deletedAtTime;
+    }
+
+    public Set<String> getMembersId() {
+        return membersId;
+    }
+
+    public void setMembersId(Set<String> membersId) {
+        this.membersId = membersId;
+    }
+
+    public String getAdminId() {
+        return adminId;
+    }
+
+    public void setAdminId(String adminId) {
+        this.adminId = adminId;
+    }
+
+    public Map<String, String> getMetadata() {
+        return metadata;
+    }
+
+    public void setMetadata(Map<String, String> metadata) {
+        this.metadata = metadata;
+    }
+
     @Override
     public String toString() {
         return "ChannelFeed{" +
                 "id=" + id +
+                ", clientGroupId='" + clientGroupId + '\'' +
                 ", name='" + name + '\'' +
                 ", adminName='" + adminName + '\'' +
+                ", adminId='" + adminId + '\'' +
                 ", unreadCount=" + unreadCount +
                 ", userCount=" + userCount +
                 ", imageUrl='" + imageUrl + '\'' +
                 ", type=" + type +
                 ", membersName=" + membersName +
+                ", membersId=" + membersId +
                 ", users=" + users +
                 ", conversationPxy=" + conversationPxy +
+                ", notificationAfterTime=" + notificationAfterTime +
+                ", deletedAtTime=" + deletedAtTime +
                 '}';
     }
 }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/ChannelFeedApiResponse.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/ChannelFeedApiResponse.java
index ee5fb103..ec233247 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/ChannelFeedApiResponse.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/ChannelFeedApiResponse.java
@@ -2,15 +2,18 @@
 
 import com.applozic.mobicommons.json.JsonMarker;
 
+import java.util.List;
+
 /**
  * Created by sunil on 12/1/16.
  */
 public class ChannelFeedApiResponse extends JsonMarker {
 
-    private static final String SUCCESS = "success";
+    public static final String SUCCESS = "success";
     private String status;
     private String generatedAt;
     private ChannelFeed response;
+    private List<ErrorResponseFeed> errorResponse;
 
     public String getStatus() {
         return status;
@@ -40,12 +43,21 @@ public boolean isSuccess() {
         return SUCCESS.equals(status);
     }
 
+    public List<ErrorResponseFeed> getErrorResponse() {
+        return errorResponse;
+    }
+
+    public void setErrorResponse(List<ErrorResponseFeed> errorResponse) {
+        this.errorResponse = errorResponse;
+    }
+
     @Override
     public String toString() {
-        return "ApiResponse{" +
+        return "ChannelFeedApiResponse{" +
                 "status='" + status + '\'' +
                 ", generatedAt='" + generatedAt + '\'' +
-                ", response='" + response + '\'' +
+                ", response=" + response +
+                ", errorResponse=" + errorResponse +
                 '}';
     }
 }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/ChannelFeedListResponse.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/ChannelFeedListResponse.java
new file mode 100644
index 00000000..5098708e
--- /dev/null
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/ChannelFeedListResponse.java
@@ -0,0 +1,60 @@
+package com.applozic.mobicomkit.feed;
+
+import com.applozic.mobicommons.json.JsonMarker;
+
+import java.util.List;
+
+/**
+ * Created by reytum on 22/6/17.
+ */
+
+public class ChannelFeedListResponse extends JsonMarker {
+
+    public static final String SUCCESS = "success";
+    private String status;
+    private String generatedAt;
+    private List<ChannelFeed> response;
+    private List<ErrorResponseFeed> errorResponse;
+
+    public String getStatus() {
+        return status;
+    }
+
+    public void setStatus(String status) {
+        this.status = status;
+    }
+
+    public String getGeneratedAt() {
+        return generatedAt;
+    }
+
+    public void setGeneratedAt(String generatedAt) {
+        this.generatedAt = generatedAt;
+    }
+
+    public List<ChannelFeed> getResponse() {
+        return response;
+    }
+
+    public void setResponse(List<ChannelFeed> response) {
+        this.response = response;
+    }
+
+    public List<ErrorResponseFeed> getErrorResponse() {
+        return errorResponse;
+    }
+
+    public void setErrorResponse(List<ErrorResponseFeed> errorResponse) {
+        this.errorResponse = errorResponse;
+    }
+
+    @Override
+    public String toString() {
+        return "ChannelFeedListResponse{" +
+                "status='" + status + '\'' +
+                ", generatedAt='" + generatedAt + '\'' +
+                ", response=" + response +
+                ", errorResponse=" + errorResponse +
+                '}';
+    }
+}
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/ConversationFeed.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/ConversationFeed.java
new file mode 100644
index 00000000..6f78a7eb
--- /dev/null
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/ConversationFeed.java
@@ -0,0 +1,65 @@
+package com.applozic.mobicomkit.feed;
+
+import com.applozic.mobicommons.json.JsonMarker;
+import com.applozic.mobicommons.people.channel.Conversation;
+
+import java.util.List;
+
+/**
+ * Created by ninu on 27/04/17.
+ */
+
+public class ConversationFeed extends JsonMarker {
+
+    private static final String SUCCESS = "success";
+    private String status;
+    private String generatedAt;
+    private Conversation response;
+    private List<ErrorResponseFeed> errorResponse;
+
+    public String getStatus() {
+        return status;
+    }
+
+    public void setStatus(String status) {
+        this.status = status;
+    }
+
+    public String getGeneratedAt() {
+        return generatedAt;
+    }
+
+    public void setGeneratedAt(String generatedAt) {
+        this.generatedAt = generatedAt;
+    }
+
+    public Object getResponse() {
+        return response;
+    }
+
+    public void setResponse(Conversation response) {
+        this.response = response;
+    }
+
+    public boolean isSuccess() {
+        return SUCCESS.equals(status);
+    }
+
+    public List<ErrorResponseFeed> getErrorResponse() {
+        return errorResponse;
+    }
+
+    public void setErrorResponse(List<ErrorResponseFeed> errorResponse) {
+        this.errorResponse = errorResponse;
+    }
+
+    @Override
+    public String toString() {
+        return "ConversationFeed{" +
+                "status='" + status + '\'' +
+                ", generatedAt='" + generatedAt + '\'' +
+                ", response=" + response +
+                ", errorResponse=" + errorResponse +
+                '}';
+    }
+}
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/ErrorResponseFeed.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/ErrorResponseFeed.java
new file mode 100644
index 00000000..2e065825
--- /dev/null
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/ErrorResponseFeed.java
@@ -0,0 +1,38 @@
+package com.applozic.mobicomkit.feed;
+
+import com.applozic.mobicommons.json.JsonMarker;
+
+/**
+ * Created by sunil on 16/12/2016.
+ */
+
+public class ErrorResponseFeed extends JsonMarker {
+    private String errorCode;
+    private String description;
+    private String displayMessage;
+
+    public String getErrorCode() {
+        return errorCode;
+    }
+
+    public void setErrorCode(String errorCode) {
+        this.errorCode = errorCode;
+    }
+
+    public String getDescription() {
+        return description;
+    }
+
+    public void setDescription(String description) {
+        this.description = description;
+    }
+
+    public String getDisplayMessage() {
+        return displayMessage;
+    }
+
+    public void setDisplayMessage(String displayMessage) {
+        this.displayMessage = displayMessage;
+    }
+
+}
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/GcmMessageResponse.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/GcmMessageResponse.java
index 00473903..5bdce5be 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/GcmMessageResponse.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/GcmMessageResponse.java
@@ -6,7 +6,7 @@
 /**
  * Created by sunil on 30/12/15.
  */
-public class GcmMessageResponse  extends JsonMarker{
+public class GcmMessageResponse extends JsonMarker {
 
     private String id;
     private String type;
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/GroupInfoUpdate.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/GroupInfoUpdate.java
index 1d2416e4..d9f3b849 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/GroupInfoUpdate.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/GroupInfoUpdate.java
@@ -4,6 +4,11 @@
 import com.applozic.mobicommons.json.JsonMarker;
 import com.applozic.mobicommons.people.channel.Channel;
 
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Map;
+import java.util.Set;
+
 /**
  * Created by sunil on 11/3/16.
  */
@@ -11,12 +16,25 @@
 
     private Integer groupId;
     private String clientGroupId;
+    private Integer parentKey;
+    private Set<Integer> childKeys = new HashSet<>();
     private String newName;
     private String imageUrl;
     @Exclude
     private String localImagePath;
     @Exclude
     private String newlocalPath;
+    @Exclude
+    private String contentUri;
+    private Map<String, String> metadata = new HashMap<>();
+
+    public GroupInfoUpdate(Integer channelKey) {
+        this.groupId = channelKey;
+    }
+
+    public GroupInfoUpdate(String clientGroupId) {
+        this.clientGroupId = clientGroupId;
+    }
 
     public GroupInfoUpdate(Channel channel) {
         this.newName = channel.getName();
@@ -84,13 +102,49 @@ public void setNewlocalPath(String newlocalPath) {
         this.newlocalPath = newlocalPath;
     }
 
+    public Integer getParentKey() {
+        return parentKey;
+    }
+
+    public void setParentKey(Integer parentKey) {
+        this.parentKey = parentKey;
+    }
+
+    public Set<Integer> getChildKeys() {
+        return childKeys;
+    }
+
+    public void setChildKeys(Set<Integer> childKeys) {
+        this.childKeys = childKeys;
+    }
+
+    public String getContentUri() {
+        return contentUri;
+    }
+
+    public void setContentUri(String contentUri) {
+        this.contentUri = contentUri;
+    }
+
+    public Map<String, String> getMetadata() {
+        return metadata;
+    }
+
+    public void setMetadata(Map<String, String> metadata) {
+        this.metadata = metadata;
+    }
+
     @Override
     public String toString() {
         return "GroupInfoUpdate{" +
                 "groupId=" + groupId +
                 ", clientGroupId='" + clientGroupId + '\'' +
+                ", parentKey=" + parentKey +
+                ", childKeys=" + childKeys +
                 ", newName='" + newName + '\'' +
                 ", imageUrl='" + imageUrl + '\'' +
+                ", localImagePath='" + localImagePath + '\'' +
+                ", newlocalPath='" + newlocalPath + '\'' +
                 '}';
     }
 }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/InstantMessageResponse.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/InstantMessageResponse.java
new file mode 100644
index 00000000..a1448566
--- /dev/null
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/InstantMessageResponse.java
@@ -0,0 +1,57 @@
+package com.applozic.mobicomkit.feed;
+
+import com.applozic.mobicommons.json.JsonMarker;
+
+/**
+ * Created by sunil on 19/9/16.
+ */
+public class InstantMessageResponse extends JsonMarker {
+
+    private String id;
+    private String type;
+    private String message;
+    private boolean notifyUser;
+
+    public String getId() {
+        return id;
+    }
+
+    public void setId(String id) {
+        this.id = id;
+    }
+
+    public String getType() {
+        return type;
+    }
+
+    public void setType(String type) {
+        this.type = type;
+    }
+
+    public String getMessage() {
+        return message;
+    }
+
+    public void setMessage(String message) {
+        this.message = message;
+    }
+
+    public boolean isNotifyUser() {
+        return notifyUser;
+    }
+
+    public void setNotifyUser(boolean notifyUser) {
+        this.notifyUser = notifyUser;
+    }
+
+    @Override
+    public String toString() {
+        return "MqttMessageResponse{" +
+                "id='" + id + '\'' +
+                "type='" + type + '\'' +
+                ", message='" + message + '\'' +
+                ", notifyUser=" + notifyUser +
+                '}';
+    }
+
+}
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/RegisteredUsersApiResponse.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/RegisteredUsersApiResponse.java
index 58a53b6a..947d3ad8 100644
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/RegisteredUsersApiResponse.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/RegisteredUsersApiResponse.java
@@ -11,7 +11,7 @@
  */
 public class RegisteredUsersApiResponse extends JsonMarker {
 
-    private Set<UserDetail> users ;
+    private Set<UserDetail> users;
     private long lastFetchTime;
     private Integer totalUnreadCount;
 
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/ResultFeed.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/ResultFeed.java
index 135d39f4..a08fea4e 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/ResultFeed.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/ResultFeed.java
@@ -33,15 +33,15 @@ public int getCode() {
         return code;
     }
 
+    public void setCode(int code) {
+        this.code = code;
+    }
+
     public void setRestAPICode(RestAPICodes apiCode) {
         this.code = apiCode.code;
         this.message = apiCode.message;
     }
 
-    public void setCode(int code) {
-        this.code = code;
-    }
-
     public String getMessage() {
         return message;
     }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/SyncBlockUserApiResponse.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/SyncBlockUserApiResponse.java
index 310b7b99..0897bd44 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/SyncBlockUserApiResponse.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/SyncBlockUserApiResponse.java
@@ -8,10 +8,10 @@
  */
 public class SyncBlockUserApiResponse extends JsonMarker {
 
+    public static final String SUCCESS = "success";
     private String status;
     private String generatedAt;
     private SyncUserBlockListFeed response;
-    public static final String SUCCESS ="success";
 
     public String getStatus() {
         return status;
@@ -38,7 +38,7 @@ public void setResponse(SyncUserBlockListFeed response) {
     }
 
 
-    public boolean isSuccess(){
+    public boolean isSuccess() {
         return SUCCESS.equals(status);
     }
 
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/TopicDetail.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/TopicDetail.java
index 0ded860b..c471c6d7 100644
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/TopicDetail.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/TopicDetail.java
@@ -8,8 +8,7 @@
 /**
  * Created by sunil on 19/2/16.
  */
-public class TopicDetail  extends JsonParcelableMarker {
-
+public class TopicDetail extends JsonParcelableMarker {
 
 
     public static final Creator<TopicDetail> CREATOR = new Creator<TopicDetail>() {
@@ -43,6 +42,10 @@ protected TopicDetail(Parcel in) {
         value2 = in.readString();
     }
 
+    public TopicDetail() {
+
+    }
+
     public String getTitle() {
         return title;
     }
@@ -99,19 +102,11 @@ public void setValue2(String value2) {
         this.value2 = value2;
     }
 
-
     @Override
     public int describeContents() {
         return 0;
     }
 
-
-
-    public TopicDetail() {
-
-    }
-
-
     @Override
     public void writeToParcel(Parcel dest, int flags) {
 
@@ -124,8 +119,8 @@ public void writeToParcel(Parcel dest, int flags) {
         dest.writeString(value2);
     }
 
-    public String getJson(){
-        return GsonUtils.getJsonFromObject(this,TopicDetail.class);
+    public String getJson() {
+        return GsonUtils.getJsonFromObject(this, TopicDetail.class);
     }
 
 }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/UserDetailListFeed.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/UserDetailListFeed.java
new file mode 100644
index 00000000..a15751e9
--- /dev/null
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/UserDetailListFeed.java
@@ -0,0 +1,48 @@
+package com.applozic.mobicomkit.feed;
+
+
+import com.applozic.mobicommons.json.JsonMarker;
+
+import java.util.List;
+
+/**
+ * Created by sunil on 13/6/16.
+ */
+public class UserDetailListFeed extends JsonMarker {
+
+    private List<String> userIdList;
+    private List<String> phoneNumberList;
+    private boolean contactSync;
+
+    public List<String> getUserIdList() {
+        return userIdList;
+    }
+
+    public void setUserIdList(List<String> userIdList) {
+        this.userIdList = userIdList;
+    }
+
+    public List<String> getPhoneNumberList() {
+        return phoneNumberList;
+    }
+
+    public void setPhoneNumberList(List<String> phoneNumberList) {
+        this.phoneNumberList = phoneNumberList;
+    }
+
+    public boolean isContactSync() {
+        return contactSync;
+    }
+
+    public void setContactSync(boolean contactSync) {
+        this.contactSync = contactSync;
+    }
+
+    @Override
+    public String toString() {
+        return "UserDetailListFeed{" +
+                "userIdList=" + userIdList +
+                ", phoneNumberList=" + phoneNumberList +
+                '}';
+    }
+}
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/sync/SyncUserBlockFeed.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/sync/SyncUserBlockFeed.java
index 480db3f9..444e3049 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/sync/SyncUserBlockFeed.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/sync/SyncUserBlockFeed.java
@@ -6,7 +6,7 @@
 /**
  * Created by sunil on 3/3/16.
  */
-public class SyncUserBlockFeed extends JsonMarker{
+public class SyncUserBlockFeed extends JsonMarker {
 
     private String blockedTo;
     private String blockedBy;
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/sync/SyncUserBlockListFeed.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/sync/SyncUserBlockListFeed.java
index 77597682..33ed37bd 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/sync/SyncUserBlockListFeed.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/sync/SyncUserBlockListFeed.java
@@ -9,8 +9,8 @@
  */
 public class SyncUserBlockListFeed extends JsonMarker {
 
-    List<SyncUserBlockFeed>  blockedByUserList;
-    List<SyncUserBlockFeed>  blockedToUserList;
+    List<SyncUserBlockFeed> blockedByUserList;
+    List<SyncUserBlockFeed> blockedToUserList;
 
     public List<SyncUserBlockFeed> getBlockedByUserList() {
         return blockedByUserList;
diff --git a/mobicomkitui/build.gradle b/mobicomkitui/build.gradle
index 7047ef25..f6a9079f 100755
--- a/mobicomkitui/build.gradle
+++ b/mobicomkitui/build.gradle
@@ -1,14 +1,14 @@
 apply plugin: 'com.android.library'
 
 android {
-    compileSdkVersion 23
-    buildToolsVersion "23.0.2"
+    compileSdkVersion 25
+    buildToolsVersion "25.0.2"
 
     defaultConfig {
-        minSdkVersion 10
-        targetSdkVersion 23
+        minSdkVersion 14
+        targetSdkVersion 25
         versionCode 1
-        versionName "4.59"
+        versionName "4.96"
     }
     buildTypes {
         release {
@@ -25,22 +25,20 @@ android {
 
 dependencies {
     compile fileTree(dir: 'libs', include: ['*.jar'])
-    compile 'com.android.support:support-v4:23.1.1'
-    compile 'com.android.support:appcompat-v7:23.1.1'
+    compile 'com.android.support:support-v4:25.3.1'
+    compile 'com.android.support:appcompat-v7:25.3.1'
     compile 'com.google.code.gson:gson:2.2.4'
     //compile 'com.googlecode.libphonenumber:libphonenumber:7.0.1'
-    //compile 'com.google.android.gms:play-services:7.5.0'
-    compile 'com.google.firebase:firebase-messaging:9.0.2'
-    compile 'com.google.android.gms:play-services-maps:9.0.2'
-    compile 'com.google.android.gms:play-services-location:9.0.2'
+    compile 'com.google.firebase:firebase-messaging:11.0.4'
+    compile 'com.google.android.gms:play-services-maps:11.0.4'
+    compile 'com.google.android.gms:play-services-location:11.0.4'
     compile 'de.hdodenhof:circleimageview:2.0.0'
-    compile 'com.android.support:design:23.1.1'
-    compile 'com.soundcloud.android:android-crop:1.0.1@aar'
-    compile 'com.android.support:cardview-v7:23.1.1'
+    compile 'com.android.support:design:25.3.1'
+    compile 'com.theartofdev.edmodo:android-image-cropper:2.4.5'
+    compile 'com.android.support:cardview-v7:25.3.1'
     compile project(':mobicomkit')//Note: use this for customization
-    //compile 'com.applozic.communication.message:mobicomkit:4.59' //Note: use this in case customization is not required
+   // compile 'com.applozic.communication.message:mobicomkit:4.96' //Note: use this in case customization is not required
 }
-
 /*
 ext {
     // Where you will see your artifact in Bintray's web interface
@@ -56,7 +54,7 @@ ext {
     artifact = 'mobicomkitui'
 
     libraryDescription = 'Applozic Communication UI Widget'
-    libraryVersion = '4.59'
+    libraryVersion = '4.96'
 
     developerId = 'devashish'
     developerName = 'Applozic'
@@ -120,3 +118,5 @@ bintray {
     }
 }*/
 
+
+
diff --git a/mobicomkitui/src/main/AndroidManifest.xml b/mobicomkitui/src/main/AndroidManifest.xml
index bd095114..44bc578d 100755
--- a/mobicomkitui/src/main/AndroidManifest.xml
+++ b/mobicomkitui/src/main/AndroidManifest.xml
@@ -1,3 +1,4 @@
+<?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
     package="com.applozic.mobicomkit.uiwidgets">
 
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/AlCustomizationSettings.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/AlCustomizationSettings.java
new file mode 100644
index 00000000..5a859726
--- /dev/null
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/AlCustomizationSettings.java
@@ -0,0 +1,535 @@
+package com.applozic.mobicomkit.uiwidgets;
+
+import com.applozic.mobicommons.json.JsonMarker;
+
+import java.util.Map;
+
+/**
+ * Created by sunil on 10/10/16.
+ */
+public class AlCustomizationSettings extends JsonMarker {
+
+
+    public String customMessageBackgroundColor = "#FF03A9F4";
+    private String sentMessageBackgroundColor = "#FF03A9F4";
+    private String receivedMessageBackgroundColor = "#FFFFFFFF";
+    private String sendButtonBackgroundColor = "#FF03A9F4";
+    private String attachmentIconsBackgroundColor = "#FF03A9F4";
+    private String chatBackgroundColorOrDrawable;
+    private String editTextBackgroundColorOrDrawable;
+    private String editTextLayoutBackgroundColorOrDrawable;
+    private String channelCustomMessageBgColor = "#cccccc";
+
+    private String sentContactMessageTextColor = "#FFFFFFFF";
+    private String receivedContactMessageTextColor = "#000000";
+    private String sentMessageTextColor = "#FFFFFFFF";
+    private String receivedMessageTextColor = "#000000";
+    private String messageEditTextTextColor = "#000000";
+    private String sentMessageLinkTextColor = "#FFFFFFFF";
+    private String receivedMessageLinkTextColor = "#5fba7d";
+    private String messageEditTextHintTextColor = "#bdbdbd";
+    private String typingTextColor;
+    private String noConversationLabelTextColor = "#000000";
+    private String conversationDateTextColor = "#333333";
+    private String conversationDayTextColor = "#333333";
+    private String messageTimeTextColor = "#838b83";
+    private String channelCustomMessageTextColor = "#666666";
+
+    private String sentMessageBorderColor = "#FF03A9F4";
+    private String receivedMessageBorderColor = "#FFFFFFFF";
+    private String channelCustomMessageBorderColor = "#cccccc";
+    private String collapsingToolbarLayoutColor = "#FF03A9F4";
+    private String groupParticipantsTextColor = "#FF03A9F4";
+    private String groupDeleteButtonBackgroundColor = "#FF03A9F4";
+    private String groupExitButtonBackgroundColor = "#FF03A9F4";
+    private String adminTextColor = "#FF03A9F4";
+    private String adminBackgroundColor = "#FFFFFFFF";
+    private String attachCameraIconName = "applozic_ic_action_camera_new";
+    private String adminBorderColor = "#FF03A9F4";
+    private String userNotAbleToChatTextColor = "#000000";
+    private String chatBackgroundImageName;
+
+    private String audioPermissionNotFoundMsg;
+    private String noConversationLabel = "You have no conversations";
+    private String noSearchFoundForChatMessages = "No conversation found";
+    private String restrictedWordMessage = "Restricted words are not allowed";
+    private boolean locationShareViaMap = true;
+    private boolean startNewFloatingButton;
+    private boolean startNewButton;
+    private boolean onlineStatusMasterList;
+    private boolean priceWidget;
+    private boolean startNewGroup = true;
+    private boolean imageCompression;
+    private boolean inviteFriendsInContactActivity;
+    private boolean registeredUserContactListCall;
+    private boolean createAnyContact;
+    private boolean showActionDialWithOutCalling;
+    private boolean profileLogoutButton;
+    private boolean userProfileFragment = true;
+    private boolean messageSearchOption;
+    private boolean conversationContactImageVisibility = true;
+    private boolean hideGroupAddMembersButton;
+    private boolean hideGroupNameUpdateButton;
+    private boolean hideGroupExitButton;
+    private boolean hideGroupRemoveMemberOption;
+    private boolean profileOption;
+    private boolean broadcastOption;
+    private boolean hideAttachmentButton;
+    private boolean groupUsersOnlineStatus;
+    private boolean refreshOption = true;
+    private boolean deleteOption = true;
+    private boolean blockOption = true;
+    private boolean muteOption = true;
+    private String logoutPackageName;
+    private boolean logoutOption = false;
+
+    private int totalRegisteredUserToFetch = 100;
+    private int maxAttachmentAllowed = 5;
+    private int maxAttachmentSizeAllowed = 30;
+    private int totalOnlineUsers = 0;
+    private String themeColorPrimary;
+    private String themeColorPrimaryDark;
+    private String editTextHintText = "Write a Message..";
+    private boolean replyOption = true;
+    private String replyMessageLayoutSentMessageBackground = "#C0C0C0";
+    private String replyMessageLayoutReceivedMessageBackground = "#F5F5F5";
+    private boolean groupInfoScreenVisible = true;
+
+    private boolean launchChatFromProfilePicOrName;
+
+    private Map<String, Boolean> attachmentOptions;
+
+    public boolean isBroadcastOption() {
+        return broadcastOption;
+    }
+
+    public boolean isStartNewFloatingButton() {
+        return startNewFloatingButton;
+    }
+
+    public boolean isStartNewButton() {
+        return startNewButton;
+    }
+
+    public String getNoConversationLabel() {
+        return noConversationLabel;
+    }
+
+    public String getCustomMessageBackgroundColor() {
+        return customMessageBackgroundColor;
+    }
+
+
+    public String getSentMessageBackgroundColor() {
+        return sentMessageBackgroundColor;
+    }
+
+    public String getReceivedMessageBackgroundColor() {
+        return receivedMessageBackgroundColor;
+    }
+
+    public boolean isOnlineStatusMasterList() {
+        return onlineStatusMasterList;
+    }
+
+    public boolean isPriceWidget() {
+        return priceWidget;
+    }
+
+    public String getSendButtonBackgroundColor() {
+        return sendButtonBackgroundColor;
+    }
+
+    public boolean isStartNewGroup() {
+        return startNewGroup;
+    }
+
+    public boolean isImageCompression() {
+        return imageCompression;
+    }
+
+
+    public boolean isInviteFriendsInContactActivity() {
+        return inviteFriendsInContactActivity;
+    }
+
+    public String getAttachmentIconsBackgroundColor() {
+        return attachmentIconsBackgroundColor;
+    }
+
+    public boolean isLocationShareViaMap() {
+        return locationShareViaMap;
+    }
+
+    public boolean isConversationContactImageVisibility() {
+        return conversationContactImageVisibility;
+    }
+
+    public String getSentContactMessageTextColor() {
+        return sentContactMessageTextColor;
+    }
+
+    public String getReceivedContactMessageTextColor() {
+        return receivedContactMessageTextColor;
+    }
+
+    public String getSentMessageTextColor() {
+        return sentMessageTextColor;
+    }
+
+    public String getReceivedMessageTextColor() {
+        return receivedMessageTextColor;
+    }
+
+    public String getSentMessageBorderColor() {
+        return sentMessageBorderColor;
+    }
+
+    public String getReceivedMessageBorderColor() {
+        return receivedMessageBorderColor;
+    }
+
+    public String getChatBackgroundColorOrDrawable() {
+        return chatBackgroundColorOrDrawable;
+    }
+
+    public String getMessageEditTextTextColor() {
+        return messageEditTextTextColor;
+    }
+
+    public String getAudioPermissionNotFoundMsg() {
+        return audioPermissionNotFoundMsg;
+    }
+
+    public boolean isRegisteredUserContactListCall() {
+        return registeredUserContactListCall;
+    }
+
+    public boolean isCreateAnyContact() {
+        return createAnyContact;
+    }
+
+    public boolean isShowActionDialWithOutCalling() {
+        return showActionDialWithOutCalling;
+    }
+
+    public String getSentMessageLinkTextColor() {
+        return sentMessageLinkTextColor;
+    }
+
+    public String getReceivedMessageLinkTextColor() {
+        return receivedMessageLinkTextColor;
+    }
+
+    public String getMessageEditTextHintTextColor() {
+        return messageEditTextHintTextColor;
+    }
+
+    public boolean isHideGroupAddMembersButton() {
+        return hideGroupAddMembersButton;
+    }
+
+    public boolean isHideGroupNameUpdateButton() {
+        return hideGroupNameUpdateButton;
+    }
+
+    public boolean isHideGroupExitButton() {
+        return hideGroupExitButton;
+    }
+
+    public boolean isHideGroupRemoveMemberOption() {
+        return hideGroupRemoveMemberOption;
+    }
+
+
+    public String getEditTextBackgroundColorOrDrawable() {
+        return editTextBackgroundColorOrDrawable;
+    }
+
+    public String getEditTextLayoutBackgroundColorOrDrawable() {
+        return editTextLayoutBackgroundColorOrDrawable;
+    }
+
+    public String getTypingTextColor() {
+        return typingTextColor;
+    }
+
+    public boolean isProfileOption() {
+        return profileOption;
+    }
+
+    public String getNoConversationLabelTextColor() {
+        return noConversationLabelTextColor;
+    }
+
+    public String getConversationDateTextColor() {
+        return conversationDateTextColor;
+    }
+
+    public String getConversationDayTextColor() {
+        return conversationDayTextColor;
+    }
+
+    public String getMessageTimeTextColor() {
+        return messageTimeTextColor;
+    }
+
+    public String getChannelCustomMessageBgColor() {
+        return channelCustomMessageBgColor;
+    }
+
+    public String getChannelCustomMessageBorderColor() {
+        return channelCustomMessageBorderColor;
+    }
+
+    public String getChannelCustomMessageTextColor() {
+        return channelCustomMessageTextColor;
+    }
+
+    public String getNoSearchFoundForChatMessages() {
+        return noSearchFoundForChatMessages;
+    }
+
+    public boolean isProfileLogoutButton() {
+        return profileLogoutButton;
+    }
+
+    public boolean isUserProfileFragment() {
+        return userProfileFragment;
+    }
+
+    public boolean isMessageSearchOption() {
+        return messageSearchOption;
+    }
+
+
+    public int getTotalRegisteredUserToFetch() {
+        return totalRegisteredUserToFetch;
+    }
+
+
+    public int getMaxAttachmentAllowed() {
+        return maxAttachmentAllowed;
+    }
+
+    public int getMaxAttachmentSizeAllowed() {
+        return maxAttachmentSizeAllowed;
+    }
+
+    public int getTotalOnlineUsers() {
+        return totalOnlineUsers;
+    }
+
+    public String getCollapsingToolbarLayoutColor() {
+        return collapsingToolbarLayoutColor;
+    }
+
+    public String getGroupParticipantsTextColor() {
+        return groupParticipantsTextColor;
+    }
+
+    public String getGroupExitButtonBackgroundColor() {
+        return groupExitButtonBackgroundColor;
+    }
+
+    public String getGroupDeleteButtonBackgroundColor() {
+        return groupDeleteButtonBackgroundColor;
+    }
+
+    public String getAdminTextColor() {
+        return adminTextColor;
+    }
+
+    public String getAdminBackgroundColor() {
+        return adminBackgroundColor;
+    }
+
+    public String getAttachCameraIconName() {
+        return attachCameraIconName;
+    }
+
+    public String getAdminBorderColor() {
+        return adminBorderColor;
+    }
+
+    public String getUserNotAbleToChatTextColor() {
+        return userNotAbleToChatTextColor;
+    }
+
+    public String getChatBackgroundImageName() {
+        return chatBackgroundImageName;
+    }
+
+    public Map<String, Boolean> getAttachmentOptions() {
+        return attachmentOptions;
+    }
+
+    public void setAttachmentOptions(Map<String, Boolean> attachmentOptions) {
+        this.attachmentOptions = attachmentOptions;
+    }
+
+
+    public boolean isHideAttachmentButton() {
+        return hideAttachmentButton;
+    }
+
+    public void setHideAttachmentButton(boolean hideAttachmentButton) {
+        this.hideAttachmentButton = hideAttachmentButton;
+    }
+
+    public String getRestrictedWordMessage() {
+        return restrictedWordMessage;
+    }
+
+    public void setRestrictedWordMessage(String restrictedWordMessage) {
+        this.restrictedWordMessage = restrictedWordMessage;
+    }
+
+    public boolean isLaunchChatFromProfilePicOrName() {
+        return launchChatFromProfilePicOrName;
+    }
+
+    public boolean isGroupUsersOnlineStatus() {
+        return groupUsersOnlineStatus;
+    }
+
+
+    public boolean isRefreshOption() {
+        return refreshOption;
+    }
+
+    public void setRefreshOption(boolean refreshOption) {
+        this.refreshOption = refreshOption;
+    }
+
+    public boolean isDeleteOption() {
+        return deleteOption;
+    }
+
+    public void setDeleteOption(boolean deleteOption) {
+        this.deleteOption = deleteOption;
+    }
+
+    public boolean isBlockOption() {
+        return blockOption;
+    }
+
+    public void setBlockOption(boolean blockOption) {
+        this.blockOption = blockOption;
+    }
+
+    public boolean isMuteOption() {
+        return muteOption;
+    }
+
+    public void setMuteOption(boolean muteOption) {
+        this.muteOption = muteOption;
+    }
+
+    public boolean isLogoutOption() {
+        return logoutOption;
+    }
+
+    public void setLogout(boolean logoutOption) {
+        this.logoutOption = logoutOption;
+    }
+
+    public String getLogoutPackage() {
+        return logoutPackageName;
+    }
+
+    public void setLogoutPackageName(String logoutPackageName) {
+        this.logoutPackageName = logoutPackageName;
+    }
+
+    public String getThemeColorPrimary() {
+        return themeColorPrimary;
+    }
+
+    public String getThemeColorPrimaryDark() {
+        return themeColorPrimaryDark;
+    }
+
+    public String getEditTextHintText() {
+        return editTextHintText;
+    }
+
+    public boolean isReplyOption() {
+        return replyOption;
+    }
+
+    public void setReplyOption(boolean replyOption) {
+        this.replyOption = replyOption;
+    }
+
+    public String getReplyMessageLayoutSentMessageBackground() {
+        return replyMessageLayoutSentMessageBackground;
+    }
+
+    public String getReplyMessageLayoutReceivedMessageBackground() {
+        return replyMessageLayoutReceivedMessageBackground;
+    }
+
+    public boolean isGroupInfoScreenVisible() {
+        return groupInfoScreenVisible;
+    }
+
+    @Override
+    public String toString() {
+        return "AlCustomizationSettings{" +
+                "customMessageBackgroundColor='" + customMessageBackgroundColor + '\'' +
+                ", sentMessageBackgroundColor='" + sentMessageBackgroundColor + '\'' +
+                ", receivedMessageBackgroundColor='" + receivedMessageBackgroundColor + '\'' +
+                ", sendButtonBackgroundColor='" + sendButtonBackgroundColor + '\'' +
+                ", attachmentIconsBackgroundColor='" + attachmentIconsBackgroundColor + '\'' +
+                ", chatBackgroundColorOrDrawable='" + chatBackgroundColorOrDrawable + '\'' +
+                ", editTextBackgroundColorOrDrawable='" + editTextBackgroundColorOrDrawable + '\'' +
+                ", editTextLayoutBackgroundColorOrDrawable='" + editTextLayoutBackgroundColorOrDrawable + '\'' +
+                ", channelCustomMessageBgColor='" + channelCustomMessageBgColor + '\'' +
+                ", sentContactMessageTextColor='" + sentContactMessageTextColor + '\'' +
+                ", receivedContactMessageTextColor='" + receivedContactMessageTextColor + '\'' +
+                ", sentMessageTextColor='" + sentMessageTextColor + '\'' +
+                ", receivedMessageTextColor='" + receivedMessageTextColor + '\'' +
+                ", messageEditTextTextColor='" + messageEditTextTextColor + '\'' +
+                ", sentMessageLinkTextColor='" + sentMessageLinkTextColor + '\'' +
+                ", receivedMessageLinkTextColor='" + receivedMessageLinkTextColor + '\'' +
+                ", messageEditTextHintTextColor='" + messageEditTextHintTextColor + '\'' +
+                ", typingTextColor='" + typingTextColor + '\'' +
+                ", noConversationLabelTextColor='" + noConversationLabelTextColor + '\'' +
+                ", conversationDateTextColor='" + conversationDateTextColor + '\'' +
+                ", conversationDayTextColor='" + conversationDayTextColor + '\'' +
+                ", messageTimeTextColor='" + messageTimeTextColor + '\'' +
+                ", channelCustomMessageTextColor='" + channelCustomMessageTextColor + '\'' +
+                ", sentMessageBorderColor='" + sentMessageBorderColor + '\'' +
+                ", receivedMessageBorderColor='" + receivedMessageBorderColor + '\'' +
+                ", channelCustomMessageBorderColor='" + channelCustomMessageBorderColor + '\'' +
+                ", audioPermissionNotFoundMsg='" + audioPermissionNotFoundMsg + '\'' +
+                ", noConversationLabel='" + noConversationLabel + '\'' +
+                ", noSearchFoundForChatMessages='" + noSearchFoundForChatMessages + '\'' +
+                ", locationShareViaMap=" + locationShareViaMap +
+                ", startNewFloatingButton=" + startNewFloatingButton +
+                ", startNewButton=" + startNewButton +
+                ", onlineStatusMasterList=" + onlineStatusMasterList +
+                ", priceWidget=" + priceWidget +
+                ", startNewGroup=" + startNewGroup +
+                ", imageCompression=" + imageCompression +
+                ", inviteFriendsInContactActivity=" + inviteFriendsInContactActivity +
+                ", registeredUserContactListCall=" + registeredUserContactListCall +
+                ", createAnyContact=" + createAnyContact +
+                ", showActionDialWithOutCalling=" + showActionDialWithOutCalling +
+                ", profileLogoutButton=" + profileLogoutButton +
+                ", userProfileFragment=" + userProfileFragment +
+                ", messageSearchOption=" + messageSearchOption +
+                ", conversationContactImageVisibility=" + conversationContactImageVisibility +
+                ", hideGroupAddMembersButton=" + hideGroupAddMembersButton +
+                ", hideGroupNameUpdateButton=" + hideGroupNameUpdateButton +
+                ", hideGroupExitButton=" + hideGroupExitButton +
+                ", hideGroupRemoveMemberOption=" + hideGroupRemoveMemberOption +
+                ", profileOption=" + profileOption +
+                ", totalRegisteredUserToFetch=" + totalRegisteredUserToFetch +
+                ", maxAttachmentAllowed=" + maxAttachmentAllowed +
+                ", maxAttachmentSizeAllowed=" + maxAttachmentSizeAllowed +
+                ", totalOnlineUsers=" + totalOnlineUsers +
+                '}';
+    }
+}
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/ApplozicApplication.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/ApplozicApplication.java
index ca89c8e8..a42eb8f1 100755
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/ApplozicApplication.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/ApplozicApplication.java
@@ -25,8 +25,8 @@ public void onCreate() {
 
     @Override
     protected void attachBaseContext(Context base) {
-       super.attachBaseContext(base);
-       // MultiDex.install(this);
+        super.attachBaseContext(base);
+        // MultiDex.install(this);
     }
 
 }
\ No newline at end of file
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/ApplozicSetting.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/ApplozicSetting.java
index 6c08d44f..61c52596 100755
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/ApplozicSetting.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/ApplozicSetting.java
@@ -13,23 +13,22 @@
  */
 public class ApplozicSetting {
 
-    private Context context;
-    public SharedPreferences sharedPreferences;
+    public static final String CUSTOM_MESSAGE_BACKGROUND_COLOR = "CUSTOM_MESSAGE_BACKGROUND_COLOR";
+    protected static final String TYPING_TEXT_COLOR = "TYPING_TEXT_COLOR";
     private static final String START_NEW_FLOATING_ACTION_BUTTON_DISPLAY = "SETTING_START_NEW_FLOATING_ACTION_BUTTON_DISPLAY";
     private static final String START_NEW_BUTTON_DISPLAY = "SETTING_START_NEW_BUTTON_DISPLAY";
     private static final String NO_CONVERSATION_LABEL = "SETTING_NO_CONVERSATION_LABEL";
     private static final String CONVERSATION_CONTACT_IMAGE_VISIBILITY = "CONVERSATION_CONTACT_IMAGE_VISIBILITY";
-    public static final String CUSTOM_MESSAGE_BACKGROUND_COLOR = "CUSTOM_MESSAGE_BACKGROUND_COLOR";
     private static final String SENT_MESSAGE_BACKGROUND_COLOR = "SENT_MESSAGE_BACKGROUND_COLOR";
     private static final String RECEIVED_MESSAGE_BACKGROUND_COLOR = "RECEIVED_MESSAGE_BACKGROUND_COLOR";
     private static final String ONLINE_STATUS_MASTER_LIST = "ONLINE_STATUS_MASTER_LIST";
     private static final String PRICE_WIDGET = "PRICE_WIDGET";
-    private static final String SEND_BUTTON_BACKGROUND_COLOR ="SEND_BUTTON_BACKGROUND_COLOR";
-    private static final String START_NEW_GROUP ="START_NEW_GROUP";
-    private static final String IMAGE_COMPRESSION ="IMAGE_COMPRESSION";
-    private static final String MAX_ATTACHMENT_ALLOWED= "MAX_ATTACHMENT_ALLOWED";
+    private static final String SEND_BUTTON_BACKGROUND_COLOR = "SEND_BUTTON_BACKGROUND_COLOR";
+    private static final String START_NEW_GROUP = "START_NEW_GROUP";
+    private static final String IMAGE_COMPRESSION = "IMAGE_COMPRESSION";
+    private static final String MAX_ATTACHMENT_ALLOWED = "MAX_ATTACHMENT_ALLOWED";
     private static final String LOCATION_SHARE_VIA_MAP = "LOCATION_SHARE_VIA_MAP";
-    private static final String MAX_ATTACHMENT_SIZE_ALLOWED= "MAX_ATTACHMENT_SIZE_ALLOWED";
+    private static final String MAX_ATTACHMENT_SIZE_ALLOWED = "MAX_ATTACHMENT_SIZE_ALLOWED";
     private static final String INVITE_FRIENDS_IN_PEOPLE_ACTIVITY = "INVITE_FRIENDS_IN_PEOPLE_ACTIVITY";
     private static final String ATTACHMENT_ICONS_BACKGROUND_COLOR = "ATTACHMENT_ICONS_BACKGROUND_COLOR";
     private static final String SENT_CONTACT_MESSAGE_TEXT_COLOR = "SENT_CONTACT_MESSAGE_TEXT_COLOR";
@@ -39,30 +38,38 @@
     private static final String TOTAL_ONLINE_USERS = "TOTAL_ONLINE_USERS";
     private static final String SENT_MESSAGE_BORDER_COLOR = "SENT_MESSAGE_BORDER_COLOR";
     private static final String RECEIVED_MESSAGE_BORDER_COLOR = "RECEIVED_MESSAGE_BORDER_COLOR";
-    private static final String CHAT_BACKGROUND_COLOR_OR_DRAWABLE= "CHAT_BACKGROUND_COLOR_OR_DRAWABLE";
-    private static final String MESSAGE_EDITTEXT_TEXT_COLOR= "MESSAGE_EDITTEXT_TEXT_COLOR";
-    private static final String AUDIO_PERMISSON_NOT_FOUND_MSG= "AUDIO_PERMISSON_NOT_FOUND_MSG";
+    private static final String CHAT_BACKGROUND_COLOR_OR_DRAWABLE = "CHAT_BACKGROUND_COLOR_OR_DRAWABLE";
+    private static final String MESSAGE_EDITTEXT_TEXT_COLOR = "MESSAGE_EDITTEXT_TEXT_COLOR";
+    private static final String AUDIO_PERMISSON_NOT_FOUND_MSG = "AUDIO_PERMISSON_NOT_FOUND_MSG";
     private static final String REGISTERED_USER_CONTACT_LIST = "REGISTERED_USER_CONTACT_LIST";
     private static final String REGISTERED_USER_CONTACT_LIST_CALL = "REGISTERED_USER_CONTACT_LIST_CALL";
     private static final String CREATE_ANY_CONTACT = "CREATE_ANY_CONTACT";
     private static final String SHOW_ACTION_DIAL_WITH_OUT_CALLING = "SHOW_ACTION_DIAL_WITH_OUT_CALLING";
     private static final String SENT_MESSAGE_LINK_TEXT_COLOR = "SENT_MESSAGE_LINK_TEXT_COLOR";
-    private static final String RECEIVED_MESSAGE_LINK_TEXT_COLOR  = "RECEIVED_MESSAGE_LINK_TEXT_COLOR";
-    private static final String MESSAGE_EDITTEXT_HINT_TEXT_COLOR= "MESSAGE_EDITTEXT_HINT_TEXT_COLOR";
-
+    private static final String RECEIVED_MESSAGE_LINK_TEXT_COLOR = "RECEIVED_MESSAGE_LINK_TEXT_COLOR";
+    private static final String MESSAGE_EDITTEXT_HINT_TEXT_COLOR = "MESSAGE_EDITTEXT_HINT_TEXT_COLOR";
     private static final String HIDE_GROUP_ADD_MEMBERS_BUTTON = "HIDE_GROUP_ADD_MEMBERS_BUTTON";
-    private static final String HIDE_GROUP_NAME_UPDATE_BUTTON= "HIDE_GROUP_NAME_UPDATE_BUTTON";
-    private static final String HIDE_GROUP_EXIT_BUTTON= "HIDE_GROUP_EXIT_BUTTON";
-    private static final String HIDE_GROUP_REMOVE_MEMBER_OPTION= "HIDE_GROUP_REMOVE_MEMBER_OPTION";
-    private static final String EDIT_TEXT_BACKGROUND_COLOR_OR_DRAWABLE= "EDIT_TEXT_BACKGROUND_COLOR_OR_DRAWABLE";
-    private static final String EDIT_TEXT_LAYOUT_BACKGROUND_COLOR_OR_DRAWABLE= "EDIT_TEXT_LAYOUT_BACKGROUND_COLOR_OR_DRAWABLE";
-    protected static final String TYPING_TEXT_COLOR= "TYPING_TEXT_COLOR";
-    private static final String PROFILE_OPTION= "PROFILE_OPTION";
-
-
+    private static final String HIDE_GROUP_NAME_UPDATE_BUTTON = "HIDE_GROUP_NAME_UPDATE_BUTTON";
+    private static final String HIDE_GROUP_EXIT_BUTTON = "HIDE_GROUP_EXIT_BUTTON";
+    private static final String HIDE_GROUP_REMOVE_MEMBER_OPTION = "HIDE_GROUP_REMOVE_MEMBER_OPTION";
+    private static final String EDIT_TEXT_BACKGROUND_COLOR_OR_DRAWABLE = "EDIT_TEXT_BACKGROUND_COLOR_OR_DRAWABLE";
+    private static final String EDIT_TEXT_LAYOUT_BACKGROUND_COLOR_OR_DRAWABLE = "EDIT_TEXT_LAYOUT_BACKGROUND_COLOR_OR_DRAWABLE";
+    private static final String PROFILE_OPTION = "PROFILE_OPTION";
+    private static final String NO_CONVERSATION_LABEL_TEXT_COLOR = "NO_CONVERSATION_LABEL_TEXT_COLOR";
+    private static final String CONVERSATION_DATE_TEXT_COLOR = "CONVERSATION_DATE_TEXT_COLOR";
+    private static final String CONVERSATION_DAY_TEXT_COLOR = "CONVERSATION_DATE_TEXT_COLOR";
+    private static final String MESSAGE_TIME_TEXT_COLOR = "MESSAGE_TIME_TEXT_COLOR";
+    private static final String CHANNEL_CUSTOM_MESSAGE_BG_COLOR = "CHANNEL_CUSTOM_MESSAGE_BG_COLOR";
+    private static final String CHANNEL_CUSTOM_MESSAGE_BORDER_COLOR = "CHANNEL_CUSTOM_MESSAGE_BORDER_COLOR";
+    private static final String CHANNEL_CUSTOM_MESSAGE_TEXT_COLOR = "CHANNEL_CUSTOM_MESSAGE_TEXT_COLOR";
+    private static final String NO_SEARCH_FOUND_FOR_CHAT_MESSAGES = "NO_SEARCH_FOUND_FOR_CHAT_MESSAGES";
+    private static final String PROFILE_LOGOUT_BUTTON = "PROFILE_LOGOUT_BUTTON";
+    private static final String USER_PROFILE_FRAGMENT = "PROFILE_LOGOUT_BUTTON";
+    private static final String MESSAGE_SEARCH_OPTION = "MESSAGE_SEARCH_OPTION";
     private static final String ACTIVITY_CALLBACK = "ACTIVITY_CALLBACK_";
-
     public static ApplozicSetting applozicSetting;
+    public SharedPreferences sharedPreferences;
+    private Context context;
 
     private ApplozicSetting(Context context) {
         this.context = context;
@@ -71,27 +78,12 @@ private ApplozicSetting(Context context) {
 
     public static ApplozicSetting getInstance(Context context) {
         if (applozicSetting == null) {
-            applozicSetting = new ApplozicSetting(context);
+            applozicSetting = new ApplozicSetting(context.getApplicationContext());
         }
 
         return applozicSetting;
     }
 
-    public enum RequestCode {
-
-        MESSAGE_TAP(Integer.valueOf("1905")), PROFILE_VIEW(Integer.valueOf("1903")), USER_BLOCK(Integer.valueOf("1904")),USER_LOOUT(Integer.valueOf("1905"));
-        private Integer value;
-
-        RequestCode(Integer c) {
-            value = c;
-        }
-
-        public Integer getValue() {
-            return value;
-        }
-    }
-
-
     public ApplozicSetting setActivityCallbacks(Map<RequestCode, String> activityCallbacks) {
         for (Map.Entry<RequestCode, String> entry : activityCallbacks.entrySet()) {
             sharedPreferences.edit().putString(ACTIVITY_CALLBACK + entry.getKey().getValue(), entry.getValue()).commit();
@@ -112,22 +104,26 @@ public int getColor(String key) {
         return sharedPreferences.getInt(key, R.color.applozic_theme_color_primary);
     }
 
+    public int getSentMessageBackgroundColor() {
+        return sharedPreferences.getInt(SENT_MESSAGE_BACKGROUND_COLOR, R.color.applozic_theme_color_primary);
+    }
+
     public ApplozicSetting setSentMessageBackgroundColor(int color) {
         sharedPreferences.edit().putInt(SENT_MESSAGE_BACKGROUND_COLOR, color).commit();
         return this;
     }
 
+    public int getReceivedMessageBackgroundColor() {
+        return sharedPreferences.getInt(RECEIVED_MESSAGE_BACKGROUND_COLOR, R.color.white);
+    }
+
     public ApplozicSetting setReceivedMessageBackgroundColor(int color) {
         sharedPreferences.edit().putInt(RECEIVED_MESSAGE_BACKGROUND_COLOR, color).commit();
         return this;
     }
 
-    public int getSentMessageBackgroundColor() {
-        return sharedPreferences.getInt(SENT_MESSAGE_BACKGROUND_COLOR, R.color.applozic_theme_color_primary);
-    }
-
-    public int getReceivedMessageBackgroundColor() {
-        return sharedPreferences.getInt(RECEIVED_MESSAGE_BACKGROUND_COLOR, R.color.white);
+    public int getSentMessageBorderColor() {
+        return sharedPreferences.getInt(SENT_MESSAGE_BORDER_COLOR, R.color.applozic_theme_color_primary);
     }
 
     public ApplozicSetting setSentMessageBorderColor(int color) {
@@ -135,17 +131,17 @@ public ApplozicSetting setSentMessageBorderColor(int color) {
         return this;
     }
 
+    public int getReceivedMessageBorderColor() {
+        return sharedPreferences.getInt(RECEIVED_MESSAGE_BORDER_COLOR, R.color.white);
+    }
+
     public ApplozicSetting setReceivedMessageBorderColor(int color) {
         sharedPreferences.edit().putInt(RECEIVED_MESSAGE_BORDER_COLOR, color).commit();
         return this;
     }
 
-    public int getSentMessageBorderColor() {
-        return sharedPreferences.getInt(SENT_MESSAGE_BORDER_COLOR, R.color.applozic_theme_color_primary);
-    }
-
-    public int getReceivedMessageBorderColor() {
-        return sharedPreferences.getInt(RECEIVED_MESSAGE_BORDER_COLOR, R.color.white);
+    public int getAttachmentIconsBackgroundColor() {
+        return sharedPreferences.getInt(ATTACHMENT_ICONS_BACKGROUND_COLOR, R.color.applozic_theme_color_primary);
     }
 
     public ApplozicSetting setAttachmentIconsBackgroundColor(int color) {
@@ -153,8 +149,8 @@ public ApplozicSetting setAttachmentIconsBackgroundColor(int color) {
         return this;
     }
 
-    public int getAttachmentIconsBackgroundColor() {
-        return sharedPreferences.getInt(ATTACHMENT_ICONS_BACKGROUND_COLOR,R.color.applozic_theme_color_primary);
+    public int getChatBackgroundColorOrDrawableResource() {
+        return sharedPreferences.getInt(CHAT_BACKGROUND_COLOR_OR_DRAWABLE, R.color.conversation_list_background);
     }
 
     public ApplozicSetting setChatBackgroundColorOrDrawableResource(int colorOrDrawable) {
@@ -162,8 +158,8 @@ public ApplozicSetting setChatBackgroundColorOrDrawableResource(int colorOrDrawa
         return this;
     }
 
-    public int getChatBackgroundColorOrDrawableResource() {
-        return sharedPreferences.getInt(CHAT_BACKGROUND_COLOR_OR_DRAWABLE,R.color.conversation_list_background);
+    public int getEditTextBackgroundColorOrDrawableResource() {
+        return sharedPreferences.getInt(EDIT_TEXT_BACKGROUND_COLOR_OR_DRAWABLE, R.drawable.input);
     }
 
     public ApplozicSetting setEditTextBackgroundColorOrDrawableResource(int colorOrDrawable) {
@@ -171,28 +167,26 @@ public ApplozicSetting setEditTextBackgroundColorOrDrawableResource(int colorOrD
         return this;
     }
 
-    public int getEditTextBackgroundColorOrDrawableResource() {
-        return sharedPreferences.getInt(EDIT_TEXT_BACKGROUND_COLOR_OR_DRAWABLE,R.drawable.input);
+    public int getEditTextLayoutBackgroundColorOrDrawableResource() {
+        return sharedPreferences.getInt(EDIT_TEXT_LAYOUT_BACKGROUND_COLOR_OR_DRAWABLE, android.R.color.transparent);
     }
 
-
     public ApplozicSetting setEditTextLayoutBackgroundColorOrDrawableResource(int colorOrDrawable) {
         sharedPreferences.edit().putInt(EDIT_TEXT_LAYOUT_BACKGROUND_COLOR_OR_DRAWABLE, colorOrDrawable).commit();
         return this;
     }
 
-    public int getEditTextLayoutBackgroundColorOrDrawableResource() {
-        return sharedPreferences.getInt(EDIT_TEXT_LAYOUT_BACKGROUND_COLOR_OR_DRAWABLE,android.R.color.transparent);
+    public int getTypingTextColor() {
+        return sharedPreferences.getInt(TYPING_TEXT_COLOR, R.color.black);
     }
 
-
     public ApplozicSetting setTypingTextColor(int color) {
         sharedPreferences.edit().putInt(TYPING_TEXT_COLOR, color).commit();
         return this;
     }
 
-    public int getTypingTextColor() {
-        return sharedPreferences.getInt(TYPING_TEXT_COLOR,R.color.black);
+    public int getMessageEditTextTextColor() {
+        return sharedPreferences.getInt(MESSAGE_EDITTEXT_TEXT_COLOR, R.color.black);
     }
 
     public ApplozicSetting setMessageEditTextTextColor(int textColor) {
@@ -200,8 +194,8 @@ public ApplozicSetting setMessageEditTextTextColor(int textColor) {
         return this;
     }
 
-    public int getMessageEditTextTextColor() {
-        return sharedPreferences.getInt(MESSAGE_EDITTEXT_TEXT_COLOR,R.color.black);
+    public int getMessageEditTextHintColor() {
+        return sharedPreferences.getInt(MESSAGE_EDITTEXT_HINT_TEXT_COLOR, R.color.edittext_hint_color);
     }
 
     public ApplozicSetting setMessageEditTextHintColor(int textColor) {
@@ -209,8 +203,8 @@ public ApplozicSetting setMessageEditTextHintColor(int textColor) {
         return this;
     }
 
-    public int getMessageEditTextHintColor() {
-        return sharedPreferences.getInt(MESSAGE_EDITTEXT_HINT_TEXT_COLOR,R.color.edittext_hint_color);
+    public int getSentContactMessageTextColor() {
+        return sharedPreferences.getInt(SENT_CONTACT_MESSAGE_TEXT_COLOR, R.color.white);
     }
 
     public ApplozicSetting setSentContactMessageTextColor(int color) {
@@ -218,8 +212,8 @@ public ApplozicSetting setSentContactMessageTextColor(int color) {
         return this;
     }
 
-    public int getSentContactMessageTextColor() {
-        return sharedPreferences.getInt(SENT_CONTACT_MESSAGE_TEXT_COLOR,R.color.white);
+    public int getReceivedContactMessageTextColor() {
+        return sharedPreferences.getInt(RECEIVED_CONTACT_MESSAGE_TEXT_COLOR, R.color.black);
     }
 
     public ApplozicSetting setReceivedContactMessageTextColor(int color) {
@@ -227,8 +221,8 @@ public ApplozicSetting setReceivedContactMessageTextColor(int color) {
         return this;
     }
 
-    public int getReceivedContactMessageTextColor() {
-        return sharedPreferences.getInt(RECEIVED_CONTACT_MESSAGE_TEXT_COLOR,R.color.black);
+    public int getSentMessageTextColor() {
+        return sharedPreferences.getInt(SENT_MESSAGE_TEXT_COLOR, R.color.white);
     }
 
     public ApplozicSetting setSentMessageTextColor(int color) {
@@ -236,8 +230,8 @@ public ApplozicSetting setSentMessageTextColor(int color) {
         return this;
     }
 
-    public int getSentMessageTextColor() {
-        return sharedPreferences.getInt(SENT_MESSAGE_TEXT_COLOR,R.color.white);
+    public int getReceivedMessageTextColor() {
+        return sharedPreferences.getInt(RECEIVED_MESSAGE_TEXT_COLOR, R.color.black);
     }
 
     public ApplozicSetting setReceivedMessageTextColor(int color) {
@@ -245,8 +239,8 @@ public ApplozicSetting setReceivedMessageTextColor(int color) {
         return this;
     }
 
-    public int getReceivedMessageTextColor() {
-        return sharedPreferences.getInt(RECEIVED_MESSAGE_TEXT_COLOR,R.color.black);
+    public int getSentMessageLinkTextColor() {
+        return sharedPreferences.getInt(SENT_MESSAGE_LINK_TEXT_COLOR, R.color.white);
     }
 
     public ApplozicSetting setSentMessageLinkTextColor(int color) {
@@ -254,8 +248,8 @@ public ApplozicSetting setSentMessageLinkTextColor(int color) {
         return this;
     }
 
-    public int getSentMessageLinkTextColor() {
-        return sharedPreferences.getInt(SENT_MESSAGE_LINK_TEXT_COLOR,R.color.white);
+    public int getReceivedMessageLinkTextColor() {
+        return sharedPreferences.getInt(RECEIVED_MESSAGE_LINK_TEXT_COLOR, R.color.applozic_green_color);
     }
 
     public ApplozicSetting setReceivedMessageLinkTextColor(int color) {
@@ -263,11 +257,6 @@ public ApplozicSetting setReceivedMessageLinkTextColor(int color) {
         return this;
     }
 
-    public int getReceivedMessageLinkTextColor() {
-        return sharedPreferences.getInt(RECEIVED_MESSAGE_LINK_TEXT_COLOR,R.color.applozic_green_color);
-    }
-
-
     public ApplozicSetting showOnlineStatusInMasterList() {
         sharedPreferences.edit().putBoolean(ONLINE_STATUS_MASTER_LIST, true).commit();
         return this;
@@ -347,15 +336,15 @@ public boolean isPriceOptionVisible() {
         return sharedPreferences.getBoolean(PRICE_WIDGET, false);
     }
 
+    public int getSendButtonBackgroundColor() {
+        return sharedPreferences.getInt(SEND_BUTTON_BACKGROUND_COLOR, R.color.applozic_theme_color_primary);
+    }
+
     public ApplozicSetting setSendButtonBackgroundColor(int color) {
         sharedPreferences.edit().putInt(SEND_BUTTON_BACKGROUND_COLOR, color).commit();
         return this;
     }
 
-    public int getSendButtonBackgroundColor() {
-        return sharedPreferences.getInt(SEND_BUTTON_BACKGROUND_COLOR, R.color.applozic_theme_color_primary);
-    }
-
     public ApplozicSetting showStartNewGroupButton() {
         sharedPreferences.edit().putBoolean(START_NEW_GROUP, true).commit();
         return this;
@@ -367,7 +356,7 @@ public ApplozicSetting hideStartNewGroupButton() {
     }
 
     public boolean isStartNewGroupButtonVisible() {
-        return sharedPreferences.getBoolean(START_NEW_GROUP, true);
+        return sharedPreferences.getBoolean(START_NEW_GROUP, false);
     }
 
     public ApplozicSetting showInviteFriendsButton() {
@@ -384,7 +373,6 @@ public boolean isInviteFriendsButtonVisible() {
         return sharedPreferences.getBoolean(INVITE_FRIENDS_IN_PEOPLE_ACTIVITY, false);
     }
 
-
     public ApplozicSetting enableImageCompression() {
         MobiComUserPreference.getInstance(context).setImageCompressionEnabled(true);
         return this;
@@ -399,15 +387,6 @@ public boolean isImageCompressionEnabled() {
         return MobiComUserPreference.getInstance(context).isImageCompressionEnabled();
     }
 
-    public ApplozicSetting setCompressedImageSizeInMB(int size) {
-        MobiComUserPreference.getInstance(context).setCompressedImageSizeInMB(size);
-        return this;
-
-    }
-
-    //==== LOCATION SHARING PREFERENCE =====================
-
-
     public ApplozicSetting enableLocationSharingViaMap() {
         setLocationSharingViaMap(true);
         return this;
@@ -418,6 +397,8 @@ public ApplozicSetting disableLocationSharingViaMap() {
         return this;
     }
 
+    //==== LOCATION SHARING PREFERENCE =====================
+
     public boolean isLocationSharingViaMap() {
         return sharedPreferences.getBoolean(LOCATION_SHARE_VIA_MAP, true);
     }
@@ -427,21 +408,27 @@ public ApplozicSetting setLocationSharingViaMap(boolean value) {
         return this;
     }
 
-
-    //===== END ========================================
-
     public int getCompressedImageSizeInMB() {
         return MobiComUserPreference.getInstance(context).getCompressedImageSizeInMB();
     }
 
-    public ApplozicSetting setMaxAttachmentAllowed(int maxAttachment) {
-        sharedPreferences.edit().putInt(MAX_ATTACHMENT_ALLOWED, maxAttachment).commit();
+    public ApplozicSetting setCompressedImageSizeInMB(int size) {
+        MobiComUserPreference.getInstance(context).setCompressedImageSizeInMB(size);
         return this;
+
     }
 
+
+    //===== END ========================================
+
     //Default value is 5.
-    public int getMaxAttachmentAllowed(){
-        return  sharedPreferences.getInt(MAX_ATTACHMENT_ALLOWED, 5);
+    public int getMaxAttachmentAllowed() {
+        return sharedPreferences.getInt(MAX_ATTACHMENT_ALLOWED, 5);
+    }
+
+    public ApplozicSetting setMaxAttachmentAllowed(int maxAttachment) {
+        sharedPreferences.edit().putInt(MAX_ATTACHMENT_ALLOWED, maxAttachment).commit();
+        return this;
     }
 
     public ApplozicSetting setMaxAttachmentSize(int maxAttachmentSize) {
@@ -450,12 +437,12 @@ public ApplozicSetting setMaxAttachmentSize(int maxAttachmentSize) {
     }
 
     //Default file size is 10.
-    public int getMaxAttachmentSizeAllowed(){
-        return  sharedPreferences.getInt(MAX_ATTACHMENT_SIZE_ALLOWED, 10);
+    public int getMaxAttachmentSizeAllowed() {
+        return sharedPreferences.getInt(MAX_ATTACHMENT_SIZE_ALLOWED, 10);
     }
 
-    public int getTotalOnlineUser(){
-        return  sharedPreferences.getInt(TOTAL_ONLINE_USERS, 0);
+    public int getTotalOnlineUser() {
+        return sharedPreferences.getInt(TOTAL_ONLINE_USERS, 0);
     }
 
     public ApplozicSetting setTotalOnlineUserToFetch(int totalNumber) {
@@ -481,7 +468,6 @@ public ApplozicSetting setHideGroupAddButton(boolean hideGroupAddButton) {
         return this;
     }
 
-
     public boolean isHideGroupExitMemberButton() {
         return sharedPreferences.getBoolean(HIDE_GROUP_EXIT_BUTTON, false);
     }
@@ -491,7 +477,6 @@ public ApplozicSetting setHideGroupExitButton(boolean hideGroupExitButton) {
         return this;
     }
 
-
     public boolean isHideGroupNameEditButton() {
         return sharedPreferences.getBoolean(HIDE_GROUP_NAME_UPDATE_BUTTON, false);
     }
@@ -510,8 +495,8 @@ public ApplozicSetting setHideGroupRemoveMemberOption(boolean hideRemoveMemberOp
         return this;
     }
 
-    public int getTotalRegisteredUsers(){
-        return  sharedPreferences.getInt(REGISTERED_USER_CONTACT_LIST, 100);
+    public int getTotalRegisteredUsers() {
+        return sharedPreferences.getInt(REGISTERED_USER_CONTACT_LIST, 100);
     }
 
     public ApplozicSetting setTotalRegisteredUsersToFetch(int totalNumber) {
@@ -519,8 +504,8 @@ public ApplozicSetting setTotalRegisteredUsersToFetch(int totalNumber) {
         return this;
     }
 
-    public ApplozicSetting enableRegisteredUsersContactCall(){
-        sharedPreferences.edit().putBoolean(REGISTERED_USER_CONTACT_LIST_CALL,true).commit();
+    public ApplozicSetting enableRegisteredUsersContactCall() {
+        sharedPreferences.edit().putBoolean(REGISTERED_USER_CONTACT_LIST_CALL, true).commit();
         return this;
     }
 
@@ -528,8 +513,8 @@ public boolean isRegisteredUsersContactCall() {
         return sharedPreferences.getBoolean(REGISTERED_USER_CONTACT_LIST_CALL, false);
     }
 
-    public ApplozicSetting enableCreateAnyContact(){
-        sharedPreferences.edit().putBoolean(CREATE_ANY_CONTACT,true).commit();
+    public ApplozicSetting enableCreateAnyContact() {
+        sharedPreferences.edit().putBoolean(CREATE_ANY_CONTACT, true).commit();
         return this;
     }
 
@@ -537,17 +522,22 @@ public boolean isCreateAnyContact() {
         return sharedPreferences.getBoolean(CREATE_ANY_CONTACT, false);
     }
 
-    public ApplozicSetting disableProfileOption(){
-        sharedPreferences.edit().putBoolean(PROFILE_OPTION,true).commit();
+    public ApplozicSetting disableProfileOption() {
+        sharedPreferences.edit().putBoolean(PROFILE_OPTION, false).commit();
+        return this;
+    }
+
+    public ApplozicSetting enableProfileOption() {
+        sharedPreferences.edit().putBoolean(PROFILE_OPTION, true).commit();
         return this;
     }
 
     public boolean isProfileOptionEnabled() {
-        return sharedPreferences.getBoolean(PROFILE_OPTION, true);
+        return sharedPreferences.getBoolean(PROFILE_OPTION, false);
     }
 
-    public ApplozicSetting showActionDialWithoutCalling(){
-        sharedPreferences.edit().putBoolean(SHOW_ACTION_DIAL_WITH_OUT_CALLING,true).commit();
+    public ApplozicSetting showActionDialWithoutCalling() {
+        sharedPreferences.edit().putBoolean(SHOW_ACTION_DIAL_WITH_OUT_CALLING, true).commit();
         return this;
     }
 
@@ -555,8 +545,142 @@ public boolean isActionDialWithoutCallingEnabled() {
         return sharedPreferences.getBoolean(SHOW_ACTION_DIAL_WITH_OUT_CALLING, false);
     }
 
+    public int getNoConversationLabelTextColor() {
+        return sharedPreferences.getInt(NO_CONVERSATION_LABEL_TEXT_COLOR, R.color.black);
+    }
+
+    public ApplozicSetting setNoConversationLabelTextColor(int color) {
+        sharedPreferences.edit().putInt(NO_CONVERSATION_LABEL_TEXT_COLOR, color).commit();
+        return this;
+    }
+
+    public int getConversationDateTextColor() {
+        return sharedPreferences.getInt(CONVERSATION_DATE_TEXT_COLOR, R.color.apploizc_gray_color);
+    }
+
+    public ApplozicSetting setConversationDateTextColor(int color) {
+        sharedPreferences.edit().putInt(CONVERSATION_DATE_TEXT_COLOR, color).commit();
+        return this;
+    }
+
+    public int getConversationDayTextColor() {
+        return sharedPreferences.getInt(CONVERSATION_DAY_TEXT_COLOR, R.color.apploizc_gray_color);
+    }
+
+    public ApplozicSetting setConversationDayTextColor(int color) {
+        sharedPreferences.edit().putInt(CONVERSATION_DAY_TEXT_COLOR, color).commit();
+        return this;
+    }
+
+    public int getMessageTimeTextColor() {
+        return sharedPreferences.getInt(MESSAGE_TIME_TEXT_COLOR, R.color.message_details_text_color);
+    }
+
+    public ApplozicSetting setMessageTimeTextColor(int color) {
+        sharedPreferences.edit().putInt(MESSAGE_TIME_TEXT_COLOR, color).commit();
+        return this;
+    }
+
+    public int getChannelCustomMesssageTextColor() {
+        return sharedPreferences.getInt(CHANNEL_CUSTOM_MESSAGE_TEXT_COLOR, R.color.apploizc_lite_gray_color);
+    }
+
+    public ApplozicSetting setChannelCustomMesssageTextColor(int color) {
+        sharedPreferences.edit().putInt(CHANNEL_CUSTOM_MESSAGE_TEXT_COLOR, color).commit();
+        return this;
+    }
+
+    public int getChannelCustomMesssageBgColor() {
+        return sharedPreferences.getInt(CHANNEL_CUSTOM_MESSAGE_BG_COLOR, R.color.apploizc_custom_channel_message_text_color);
+    }
+
+    public ApplozicSetting setChannelCustomMesssageBgColor(int color) {
+        sharedPreferences.edit().putInt(CHANNEL_CUSTOM_MESSAGE_BG_COLOR, color).commit();
+        return this;
+    }
+
+    public int getChannelCustomMesssageBorderColor() {
+        return sharedPreferences.getInt(CHANNEL_CUSTOM_MESSAGE_BORDER_COLOR, R.color.apploizc_custom_channel_message_text_color);
+    }
+
+    public ApplozicSetting setChannelCustomMesssageBorderColor(int color) {
+        sharedPreferences.edit().putInt(CHANNEL_CUSTOM_MESSAGE_BORDER_COLOR, color).commit();
+        return this;
+    }
+
+    public String getSearchNotFoundLabelForChats() {
+        return sharedPreferences.getString(NO_SEARCH_FOUND_FOR_CHAT_MESSAGES, context.getResources().getString(R.string.search_not_found_for_messages));
+    }
+
+    public ApplozicSetting setSearchNotFoundLabelForChats(String label) {
+        sharedPreferences.edit().putString(NO_SEARCH_FOUND_FOR_CHAT_MESSAGES, label).commit();
+        return this;
+    }
+
+    public ApplozicSetting showProfileLogout() {
+        sharedPreferences.edit().putBoolean(PROFILE_LOGOUT_BUTTON, true).commit();
+        return this;
+    }
+
+    public ApplozicSetting hideProfileLogout() {
+        sharedPreferences.edit().putBoolean(PROFILE_LOGOUT_BUTTON, false).commit();
+        return this;
+    }
+
+    public boolean isProfileLogoutEnable() {
+        return sharedPreferences.getBoolean(PROFILE_LOGOUT_BUTTON, false);
+    }
+
+    public ApplozicSetting showUserProfileFragment() {
+        sharedPreferences.edit().putBoolean(USER_PROFILE_FRAGMENT, true).commit();
+        return this;
+    }
+
+    public ApplozicSetting hideUserProfileFragment() {
+        sharedPreferences.edit().putBoolean(USER_PROFILE_FRAGMENT, false).commit();
+        return this;
+    }
+
+    public boolean isUserProfileFragmentVisible() {
+        return sharedPreferences.getBoolean(USER_PROFILE_FRAGMENT, true);
+    }
+
+    public ApplozicSetting enableMessageSearch() {
+        sharedPreferences.edit().putBoolean(MESSAGE_SEARCH_OPTION, true).commit();
+        return this;
+    }
+
+    public ApplozicSetting disableMessageSearch() {
+        sharedPreferences.edit().putBoolean(MESSAGE_SEARCH_OPTION, false).commit();
+        return this;
+    }
+
+    public boolean isMessageSearchEnabled() {
+        return sharedPreferences.getBoolean(MESSAGE_SEARCH_OPTION, false);
+    }
+
     public boolean clearAll() {
         return sharedPreferences.edit().clear().commit();
     }
 
+    public enum RequestCode {
+
+        MESSAGE_TAP(Integer.valueOf("1905")),
+        PROFILE_VIEW(Integer.valueOf("1903")),
+        USER_BLOCK(Integer.valueOf("1904")),
+        USER_LOOUT(Integer.valueOf("1905")),
+        VIDEO_CALL(Integer.valueOf("1906")),
+        AUDIO_CALL(Integer.valueOf("1907"));
+
+        private Integer value;
+
+        RequestCode(Integer c) {
+            value = c;
+        }
+
+        public Integer getValue() {
+            return value;
+        }
+    }
+
 }
\ No newline at end of file
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/async/AlChannelAddMemberTask.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/async/AlChannelAddMemberTask.java
new file mode 100644
index 00000000..248ac456
--- /dev/null
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/async/AlChannelAddMemberTask.java
@@ -0,0 +1,91 @@
+package com.applozic.mobicomkit.uiwidgets.async;
+
+import android.content.Context;
+import android.os.AsyncTask;
+import android.text.TextUtils;
+
+import com.applozic.mobicomkit.channel.service.ChannelService;
+import com.applozic.mobicomkit.feed.ApiResponse;
+import com.applozic.mobicomkit.feed.ErrorResponseFeed;
+import com.applozic.mobicomkit.uiwidgets.R;
+
+import java.util.List;
+
+/**
+ * Created by ninu on 13/07/17.
+ */
+
+public class AlChannelAddMemberTask extends AsyncTask<Void, Void, Boolean> {
+    Context context;
+    Integer channelKey;
+    String userId;
+    ChannelAddMemberListener channelAddMemberListener;
+    ChannelService channelService;
+    Exception exception;
+    String addResponse;
+    String clientGroupId;
+    ApiResponse apiResponse;
+
+    public AlChannelAddMemberTask(Context context, Integer channelKey, String userId, ChannelAddMemberListener channelAddMemberListener) {
+        this.channelKey = channelKey;
+        this.userId = userId;
+        this.context = context;
+        this.channelAddMemberListener = channelAddMemberListener;
+        this.channelService = ChannelService.getInstance(context);
+    }
+
+    public AlChannelAddMemberTask(Context context, String clientGroupId, String userId, ChannelAddMemberListener channelAddMemberListener) {
+        this.clientGroupId = clientGroupId;
+        this.userId = userId;
+        this.channelAddMemberListener = channelAddMemberListener;
+        this.context = context;
+        this.channelService = ChannelService.getInstance(context);
+    }
+
+    @Override
+    protected Boolean doInBackground(Void... params) {
+        try {
+            if (!TextUtils.isEmpty(userId) && userId.trim().length() != 0 && (channelKey != null && channelKey != 0 || !TextUtils.isEmpty(clientGroupId))) {
+                if (channelKey != null) {
+                    apiResponse = channelService.addMemberToChannelProcessWithResponse(channelKey, userId.trim());
+                } else if (!TextUtils.isEmpty(clientGroupId)) {
+                    apiResponse = channelService.addMemberToChannelProcessWithResponse(clientGroupId, userId.trim());
+                }
+                if (apiResponse != null) {
+                    return apiResponse.isSuccess();
+                }
+            } else {
+                throw new Exception(context.getString(R.string.applozic_userId_error_info_in_logs));
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+            exception = e;
+            return false;
+        }
+        return false;
+    }
+
+
+    @Override
+    protected void onPostExecute(Boolean result) {
+        super.onPostExecute(result);
+        if (result && channelAddMemberListener != null) {
+            channelAddMemberListener.onSuccess(apiResponse.getStatus(), context);
+        } else if (!result && channelAddMemberListener != null) {
+            if (apiResponse != null) {
+                channelAddMemberListener.onFailure(apiResponse.getStatus(), exception, context, apiResponse.getErrorResponse());
+            } else {
+                channelAddMemberListener.onFailure(addResponse, exception, context, null);
+            }
+        }
+    }
+
+    public interface ChannelAddMemberListener {
+        void onSuccess(String response, Context context);
+
+        void onFailure(String response, Exception e, Context context, List<ErrorResponseFeed> errorResponseFeeds);
+    }
+
+}
+
+
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/async/AlChannelCreateAsyncTask.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/async/AlChannelCreateAsyncTask.java
new file mode 100644
index 00000000..4118aabd
--- /dev/null
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/async/AlChannelCreateAsyncTask.java
@@ -0,0 +1,55 @@
+package com.applozic.mobicomkit.uiwidgets.async;
+
+import android.content.Context;
+import android.os.AsyncTask;
+
+import com.applozic.mobicomkit.api.people.ChannelInfo;
+import com.applozic.mobicomkit.channel.service.ChannelService;
+import com.applozic.mobicomkit.feed.ChannelFeedApiResponse;
+import com.applozic.mobicommons.people.channel.Channel;
+
+/**
+ * Created by Sunil on 12/26/2016.
+ */
+
+public class AlChannelCreateAsyncTask extends AsyncTask<Void, Void, ChannelFeedApiResponse> {
+    Context context;
+    ChannelService channelService;
+    ChannelInfo channelInfo;
+    TaskListenerInterface taskListenerInterface;
+
+    public AlChannelCreateAsyncTask(Context context, ChannelInfo channelInfo, TaskListenerInterface taskListenerInterface) {
+        this.context = context;
+        this.taskListenerInterface = taskListenerInterface;
+        this.channelInfo = channelInfo;
+        this.channelService = ChannelService.getInstance(context);
+    }
+
+    @Override
+    protected ChannelFeedApiResponse doInBackground(Void... voids) {
+        if (channelInfo != null) {
+            return channelService.createChannelWithResponse(channelInfo);
+        }
+        return null;
+    }
+
+    @Override
+    protected void onPostExecute(ChannelFeedApiResponse channelFeedApiResponse) {
+        super.onPostExecute(channelFeedApiResponse);
+        if (channelFeedApiResponse != null) {
+            if (channelFeedApiResponse.isSuccess()) {
+                taskListenerInterface.onSuccess(channelService.getChannel(channelFeedApiResponse.getResponse()), context);
+            } else {
+                taskListenerInterface.onFailure(channelFeedApiResponse, context);
+            }
+        } else {
+            taskListenerInterface.onFailure(channelFeedApiResponse, context);
+        }
+    }
+
+    public interface TaskListenerInterface {
+        void onSuccess(Channel channel, Context context);
+
+        void onFailure(ChannelFeedApiResponse channelFeedApiResponse, Context context);
+    }
+}
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/async/AlGroupInformationAsyncTask.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/async/AlGroupInformationAsyncTask.java
new file mode 100644
index 00000000..441c4948
--- /dev/null
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/async/AlGroupInformationAsyncTask.java
@@ -0,0 +1,66 @@
+package com.applozic.mobicomkit.uiwidgets.async;
+
+import android.content.Context;
+import android.os.AsyncTask;
+import android.text.TextUtils;
+
+import com.applozic.mobicomkit.channel.service.ChannelService;
+import com.applozic.mobicommons.people.channel.Channel;
+
+/**
+ * Created by ninu on 02/08/17.
+ */
+
+public class AlGroupInformationAsyncTask extends AsyncTask<Object, Object, Channel> {
+    Context context;
+    ChannelService channelService;
+    GroupMemberListener groupMemberListener;
+    private Exception exception;
+    private String clientGroupId;
+    private Integer channelKey;
+
+    public AlGroupInformationAsyncTask(Context context, String clientGroupId, GroupMemberListener groupMemberListener) {
+        this.context = context;
+        this.channelService = ChannelService.getInstance(context);
+        this.clientGroupId = clientGroupId;
+        this.groupMemberListener = groupMemberListener;
+    }
+
+    public AlGroupInformationAsyncTask(Context context, Integer channelKey, GroupMemberListener groupMemberListener) {
+        this.context = context;
+        this.channelService = ChannelService.getInstance(context);
+        this.channelKey = channelKey;
+        this.groupMemberListener = groupMemberListener;
+    }
+
+    @Override
+    protected Channel doInBackground(Object... params) {
+        try {
+            if (!TextUtils.isEmpty(clientGroupId)) {
+                return channelService.getChannelInfo(clientGroupId);
+            } else if (channelKey != null) {
+                return channelService.getChannelInfo(channelKey);
+            }
+        } catch (Exception e) {
+            exception = e;
+            return null;
+        }
+        return null;
+    }
+
+    @Override
+    protected void onPostExecute(Channel channel) {
+        super.onPostExecute(channel);
+        if (channel != null && groupMemberListener != null) {
+            groupMemberListener.onSuccess(channel, context);
+        } else if (channel == null && groupMemberListener != null) {
+            groupMemberListener.onFailure(channel, exception, context);
+        }
+    }
+
+    public interface GroupMemberListener {
+        void onSuccess(Channel channel, Context context);
+
+        void onFailure(Channel channel, Exception e, Context context);
+    }
+}
\ No newline at end of file
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/async/AlSyncAccountStatusTask.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/async/AlSyncAccountStatusTask.java
new file mode 100644
index 00000000..b1a772da
--- /dev/null
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/async/AlSyncAccountStatusTask.java
@@ -0,0 +1,51 @@
+package com.applozic.mobicomkit.uiwidgets.async;
+
+import android.content.Context;
+import android.os.AsyncTask;
+
+import com.applozic.mobicomkit.api.account.register.RegisterUserClientService;
+import com.applozic.mobicomkit.api.account.user.MobiComUserPreference;
+import com.applozic.mobicomkit.api.account.user.User;
+
+
+/**
+ * Created by sunil on 19/12/2016.
+ */
+
+public class AlSyncAccountStatusTask extends AsyncTask<Void, Void, Boolean> {
+    Context context;
+    RegisterUserClientService registerUserClientService;
+    TaskListener taskListener;
+    String loggedInUserId;
+
+    public AlSyncAccountStatusTask(Context context, TaskListener taskListener) {
+        this.context = context;
+        this.taskListener = taskListener;
+        this.registerUserClientService = new RegisterUserClientService(context);
+        this.loggedInUserId = MobiComUserPreference.getInstance(context).getUserId();
+    }
+
+    @Override
+    protected Boolean doInBackground(Void... voids) {
+        User user = new User();
+        user.setUserId(loggedInUserId);
+        try {
+            registerUserClientService.updateRegisteredAccount(user);
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        return true;
+    }
+
+    @Override
+    protected void onPostExecute(Boolean aBoolean) {
+        super.onPostExecute(aBoolean);
+        if (taskListener != null) {
+            taskListener.onCompletion(context);
+        }
+    }
+
+    public interface TaskListener {
+        void onCompletion(Context context);
+    }
+}
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/async/ApplozicAddMemberToContactGroupTask.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/async/ApplozicAddMemberToContactGroupTask.java
new file mode 100644
index 00000000..ed3e7c15
--- /dev/null
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/async/ApplozicAddMemberToContactGroupTask.java
@@ -0,0 +1,63 @@
+package com.applozic.mobicomkit.uiwidgets.async;
+
+import android.content.Context;
+import android.os.AsyncTask;
+
+import com.applozic.mobicomkit.channel.service.ChannelService;
+
+import java.util.List;
+
+/**
+ * Created by Rahul-PC on 06-06-2017.
+ */
+
+public class ApplozicAddMemberToContactGroupTask extends AsyncTask<Object, Object, Boolean> {
+    String contactGroupId;
+    Context context;
+    List<String> groupMemberList;
+    ChannelService channelService;
+    GroupMemberListener groupMemberListener;
+    private Exception exception;
+    private String groupType;
+
+
+    public ApplozicAddMemberToContactGroupTask(Context context, String contactGroupId, String groupType, List<String> groupMemberList, GroupMemberListener groupMemberListener) {
+        this.context = context;
+        this.contactGroupId = contactGroupId;
+        this.groupMemberList = groupMemberList;
+        channelService = ChannelService.getInstance(context);
+        this.groupMemberListener = groupMemberListener;
+        this.groupType = groupType;
+    }
+
+    @Override
+    protected Boolean doInBackground(Object... params) {
+        try {
+            if (contactGroupId != null && groupMemberList != null) {
+                boolean response = channelService.addMemberToContactGroup(contactGroupId, groupType, groupMemberList);
+                if (response)
+                    return true;
+            }
+        } catch (Exception e) {
+            exception = e;
+            return false;
+        }
+        return false;
+    }
+
+    @Override
+    protected void onPostExecute(Boolean result) {
+        super.onPostExecute(result);
+        if (result && groupMemberListener != null) {
+            groupMemberListener.onSuccess(result, context);
+        } else if (!result && exception != null && groupMemberListener != null) {
+            groupMemberListener.onFailure(result, exception, context);
+        }
+    }
+
+    public interface GroupMemberListener {
+        void onSuccess(boolean response, Context context);
+
+        void onFailure(boolean response, Exception e, Context context);
+    }
+}
\ No newline at end of file
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/async/ApplozicAddMemberToMultipleChannels.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/async/ApplozicAddMemberToMultipleChannels.java
index 668a4698..9040f08f 100644
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/async/ApplozicAddMemberToMultipleChannels.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/async/ApplozicAddMemberToMultipleChannels.java
@@ -63,7 +63,7 @@ protected void onPostExecute(Boolean resultBoolean) {
 
         if (resultBoolean && addMemberToMultipleChannels != null) {
             addMemberToMultipleChannels.onSuccess(addResponse, context);
-        } else if (!resultBoolean && exception != null && addMemberToMultipleChannels != null) {
+        } else if (!resultBoolean  && addMemberToMultipleChannels != null) {
             addMemberToMultipleChannels.onFailure(addResponse, exception, context);
         }
     }
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/async/ApplozicChannelAddMemberTask.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/async/ApplozicChannelAddMemberTask.java
index 7416ff38..b5e438bc 100644
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/async/ApplozicChannelAddMemberTask.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/async/ApplozicChannelAddMemberTask.java
@@ -19,7 +19,7 @@
     ChannelAddMemberListener channelAddMemberListener;
     ChannelService channelService;
     Exception exception;
-    String addResponse;
+    String addResponse ;
 
     public ApplozicChannelAddMemberTask(Context context, Integer channelKey, String userId, ChannelAddMemberListener channelAddMemberListener) {
         this.channelKey = channelKey;
@@ -49,12 +49,12 @@ protected Boolean doInBackground(Void... params) {
     }
 
     @Override
-    protected void onPostExecute(Boolean resultBoolean) {
-        super.onPostExecute(resultBoolean);
+    protected void onPostExecute(Boolean result) {
+        super.onPostExecute(result);
 
-        if (resultBoolean  && channelAddMemberListener != null) {
+        if (result && channelAddMemberListener != null) {
             channelAddMemberListener.onSuccess(addResponse, context);
-        } else if (!resultBoolean && exception != null && channelAddMemberListener != null) {
+        } else if (!result && channelAddMemberListener != null) {
             channelAddMemberListener.onFailure(addResponse, exception, context);
         }
     }
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/async/ApplozicChannelCreateTask.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/async/ApplozicChannelCreateTask.java
index 05252712..49c93833 100644
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/async/ApplozicChannelCreateTask.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/async/ApplozicChannelCreateTask.java
@@ -6,7 +6,6 @@
 
 import com.applozic.mobicomkit.api.people.ChannelInfo;
 import com.applozic.mobicomkit.channel.service.ChannelService;
-import com.applozic.mobicomkit.uiwidgets.R;
 import com.applozic.mobicommons.people.channel.Channel;
 
 import java.util.List;
@@ -25,6 +24,7 @@
     ChannelCreateListener channelCreateListener;
     String groupImageLink;
     String clientGroupId;
+    int type = Channel.GroupType.PUBLIC.getValue().intValue();
 
 
     public ApplozicChannelCreateTask(Context context, ChannelCreateListener channelCreateListener, String groupName, List<String> groupMemberList, String groupImageLink) {
@@ -36,6 +36,22 @@ public ApplozicChannelCreateTask(Context context, ChannelCreateListener channelC
         this.channelService = ChannelService.getInstance(context);
     }
 
+    public String getClientGroupId() {
+        return clientGroupId;
+    }
+
+    public void setClientGroupId(String clientGroupId) {
+        this.clientGroupId = clientGroupId;
+    }
+
+    public int getType() {
+        return type;
+    }
+
+    public void setType(int type) {
+        this.type = type;
+    }
+
     @Override
     protected Boolean doInBackground(Void... params) {
         try {
@@ -44,11 +60,11 @@ protected Boolean doInBackground(Void... params) {
                 if (!TextUtils.isEmpty(clientGroupId)) {
                     channelInfo.setClientGroupId(clientGroupId);
                 }
+                channelInfo.setType(type);
                 channel = channelService.createChannel(channelInfo);
-                return true;
-            } else {
-                throw new Exception(context.getString(R.string.applozic_channel_error_info_in_logs));
+                return channel != null;
             }
+            return false;
         } catch (Exception e) {
             e.printStackTrace();
             exception = e;
@@ -62,7 +78,7 @@ protected void onPostExecute(Boolean resultBoolean) {
 
         if (resultBoolean && channel != null && channelCreateListener != null) {
             channelCreateListener.onSuccess(channel, context);
-        } else if (exception != null && !resultBoolean && channelCreateListener != null) {
+        } else if (!resultBoolean && channelCreateListener != null) {
             channelCreateListener.onFailure(exception, context);
         }
 
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/async/ApplozicChannelDeleteTask.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/async/ApplozicChannelDeleteTask.java
index fce81cf4..a4f5582f 100644
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/async/ApplozicChannelDeleteTask.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/async/ApplozicChannelDeleteTask.java
@@ -14,15 +14,6 @@
 public class ApplozicChannelDeleteTask extends AsyncTask<Void, Void, Boolean> {
 
 
-    public interface TaskListener {
-
-        void onSuccess(String response);
-
-        void onFailure(String response, Exception exception);
-
-        void onCompletion();
-    }
-
     private final TaskListener taskListener;
     private final Context context;
     private String response;
@@ -35,7 +26,6 @@ public ApplozicChannelDeleteTask(Context context, TaskListener listener, Channel
         this.taskListener = listener;
     }
 
-
     @Override
     protected Boolean doInBackground(Void... params) {
         try {
@@ -58,4 +48,13 @@ protected void onPostExecute(final Boolean result) {
         this.taskListener.onCompletion();
     }
 
+    public interface TaskListener {
+
+        void onSuccess(String response);
+
+        void onFailure(String response, Exception exception);
+
+        void onCompletion();
+    }
+
 }
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/async/ApplozicChannelLeaveMember.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/async/ApplozicChannelLeaveMember.java
index e68ed34c..f0936f44 100644
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/async/ApplozicChannelLeaveMember.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/async/ApplozicChannelLeaveMember.java
@@ -25,6 +25,14 @@
     ProgressDialog progressDialog;
     boolean enableProgressDialog;
 
+    public ApplozicChannelLeaveMember(Context context, Integer channelKey, String userId, ChannelLeaveMemberListener channelLeaveMemberListener) {
+        this.channelKey = channelKey;
+        this.userId = userId;
+        this.channelLeaveMemberListener = channelLeaveMemberListener;
+        this.context = context;
+        this.channelService = ChannelService.getInstance(context);
+    }
+
     public boolean isEnableProgressDialog() {
         return enableProgressDialog;
     }
@@ -41,18 +49,10 @@ public void setClientGroupId(String clientGroupId) {
         this.clientGroupId = clientGroupId;
     }
 
-    public ApplozicChannelLeaveMember(Context context, Integer channelKey, String userId, ChannelLeaveMemberListener channelLeaveMemberListener) {
-        this.channelKey = channelKey;
-        this.userId = userId;
-        this.channelLeaveMemberListener = channelLeaveMemberListener;
-        this.context = context;
-        this.channelService = ChannelService.getInstance(context);
-    }
-
     @Override
     protected void onPreExecute() {
         super.onPreExecute();
-        if(enableProgressDialog){
+        if (enableProgressDialog) {
             progressDialog = ProgressDialog.show(context, "",
                     context.getString(R.string.channel_member_exit), true);
         }
@@ -84,7 +84,7 @@ protected Boolean doInBackground(Void... params) {
     @Override
     protected void onPostExecute(Boolean resultBoolean) {
         super.onPostExecute(resultBoolean);
-        if(progressDialog!=null && progressDialog.isShowing()){
+        if (progressDialog != null && progressDialog.isShowing()) {
             progressDialog.dismiss();
         }
 
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/async/ApplozicChannelRemoveMemberTask.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/async/ApplozicChannelRemoveMemberTask.java
index 28da8572..419dec8b 100644
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/async/ApplozicChannelRemoveMemberTask.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/async/ApplozicChannelRemoveMemberTask.java
@@ -34,9 +34,9 @@ protected Boolean doInBackground(Void... params) {
         try {
             if (!TextUtils.isEmpty(userId) && userId.trim().length() != 0 && channelKey != null) {
                 removeResponse = channelService.removeMemberFromChannelProcess(channelKey, userId.trim());
-               if(!TextUtils.isEmpty(removeResponse)){
-                   return MobiComKitConstants.SUCCESS.equals(removeResponse);
-               }
+                if (!TextUtils.isEmpty(removeResponse)) {
+                    return MobiComKitConstants.SUCCESS.equals(removeResponse);
+                }
             } else {
                 throw new Exception(context.getString(R.string.applozic_userId_error_info_in_logs));
             }
@@ -55,11 +55,11 @@ protected void onPostExecute(Boolean resultBoolean) {
         if (resultBoolean && channelRemoveMemberListener != null) {
             channelRemoveMemberListener.onSuccess(removeResponse, context);
         } else if (!resultBoolean && exception != null && channelRemoveMemberListener != null) {
-            channelRemoveMemberListener.onFailure(removeResponse,exception, context);
+            channelRemoveMemberListener.onFailure(removeResponse, exception, context);
         }
     }
 
-    public  interface ChannelRemoveMemberListener {
+    public interface ChannelRemoveMemberListener {
         void onSuccess(String response, Context context);
 
         void onFailure(String response, Exception e, Context context);
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/async/ApplzoicConversationCreateTask.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/async/ApplozicConversationCreateTask.java
similarity index 94%
rename from mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/async/ApplzoicConversationCreateTask.java
rename to mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/async/ApplozicConversationCreateTask.java
index 9f1a8d4f..98ee3f34 100644
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/async/ApplzoicConversationCreateTask.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/async/ApplozicConversationCreateTask.java
@@ -10,7 +10,7 @@
 /**
  * Created by sunil on 17/5/16.
  */
-public class ApplzoicConversationCreateTask extends AsyncTask<Void, Void, Boolean> {
+public class ApplozicConversationCreateTask extends AsyncTask<Void, Void, Boolean> {
     Context context;
     ChannelService channelService;
     Exception exception;
@@ -19,7 +19,7 @@
     Conversation conversation;
     Integer conversationId;
 
-    public ApplzoicConversationCreateTask(Context context, ConversationCreateListener conversationCreateListener, Conversation conversation) {
+    public ApplozicConversationCreateTask(Context context, ConversationCreateListener conversationCreateListener, Conversation conversation) {
         this.context = context;
         this.conversationCreateListener = conversationCreateListener;
         this.channelService = ChannelService.getInstance(context);
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/async/ApplozicGetMemberFromContactGroupTask.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/async/ApplozicGetMemberFromContactGroupTask.java
new file mode 100644
index 00000000..f1a8d71c
--- /dev/null
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/async/ApplozicGetMemberFromContactGroupTask.java
@@ -0,0 +1,82 @@
+package com.applozic.mobicomkit.uiwidgets.async;
+
+import android.app.ProgressDialog;
+import android.content.Context;
+import android.os.AsyncTask;
+
+import com.applozic.mobicomkit.api.account.user.MobiComUserPreference;
+import com.applozic.mobicomkit.channel.service.ChannelService;
+import com.applozic.mobicomkit.feed.ChannelFeed;
+import com.applozic.mobicomkit.uiwidgets.R;
+
+/**
+ * Created by Rahul-PC on 07-06-2017.
+ */
+
+public class ApplozicGetMemberFromContactGroupTask extends AsyncTask<Void, Void, String[]> {
+    private final String contactGroupId;
+    Context context;
+    GroupMemberListener groupMemberListener;
+    ProgressDialog dialog;
+    private ChannelService channelService;
+    private String groupType;
+
+    public ApplozicGetMemberFromContactGroupTask(Context context, String contactGroupId, String groupType, GroupMemberListener groupMemberListener) {
+        this.context = context;
+        this.contactGroupId = contactGroupId;
+        channelService = ChannelService.getInstance(context);
+        this.groupType = groupType;
+        this.groupMemberListener = groupMemberListener;
+    }
+
+    @Override
+    protected void onPreExecute() {
+        super.onPreExecute();
+        dialog = new ProgressDialog(context);
+        dialog.setMessage(context.getResources().getString(R.string.processing_please_wait));
+        dialog.show();
+
+    }
+
+    @Override
+    protected String[] doInBackground(Void[] params) {
+        try {
+            if (contactGroupId != null) {
+                ChannelFeed channelFeed = channelService.getMembersFromContactGroup(contactGroupId, groupType);
+                if (channelFeed != null && channelFeed.getContactGroupMembersId() != null) {
+
+                    String userIdArray[] = channelFeed.getContactGroupMembersId().toArray(new String[channelFeed.getContactGroupMembersId().size()]);
+                    for (int i = 0; i < userIdArray.length; i++) {
+                        if (MobiComUserPreference.getInstance(context).getUserId().equals(userIdArray[i])) {
+                            userIdArray[i] = "";
+                        }
+                    }
+                    return userIdArray;
+                }
+            }
+        } catch (Exception e) {
+            return null;
+        }
+        return null;
+    }
+
+    @Override
+    protected void onPostExecute(String[] userIdArray) {
+        super.onPostExecute(userIdArray);
+        if (dialog.isShowing()) {
+            dialog.dismiss();
+        }
+        if (userIdArray != null) {
+            groupMemberListener.onSuccess(userIdArray, context);
+        } else {
+            groupMemberListener.onFailure(context.getString(R.string.error), context);
+        }
+    }
+
+
+    public interface GroupMemberListener {
+        void onSuccess(String[] userIdArray, Context context);
+
+        void onFailure(String userIdArray, Context context);
+    }
+}
\ No newline at end of file
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/attachmentview/ApplozicAudioManager.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/attachmentview/ApplozicAudioManager.java
new file mode 100644
index 00000000..1fac4f58
--- /dev/null
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/attachmentview/ApplozicAudioManager.java
@@ -0,0 +1,196 @@
+package com.applozic.mobicomkit.uiwidgets.attachmentview;
+
+import android.content.Context;
+import android.media.MediaPlayer;
+import android.net.Uri;
+import android.telephony.PhoneStateListener;
+import android.telephony.TelephonyManager;
+import android.widget.SeekBar;
+import android.widget.Toast;
+
+import com.applozic.mobicomkit.uiwidgets.R;
+
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+
+import static android.content.Context.TELEPHONY_SERVICE;
+
+/**
+ * Created by Rahul-PC on 28-02-2017.
+ */
+
+public class ApplozicAudioManager {
+    private static ApplozicAudioManager myObj;
+    private final TelephonyManager mTelephonyMgr;
+    public ApplozicDocumentView currentView;
+    Map<String, MediaPlayer> pool = new HashMap<>();
+    Context context;
+    int maxsize = 5;
+    String TAG = "ApplozicAudioManager";
+    String audio_duration;
+    int hours, minute, second, duration;
+    PhoneStateListener mPhoneStateListener;
+
+    private ApplozicAudioManager(Context context) {
+        this.context = context;
+        mTelephonyMgr = (TelephonyManager) context.getSystemService(TELEPHONY_SERVICE);
+        mTelephonyMgr.listen(mPhoneStateListener, PhoneStateListener.LISTEN_CALL_STATE);
+    }
+
+    public static ApplozicAudioManager getInstance(Context context) {
+        try {
+            if (myObj == null) {
+                myObj = new ApplozicAudioManager(context.getApplicationContext());
+            }
+            return myObj;
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        return null;
+    }
+
+    void play(Uri uri, final ApplozicDocumentView view) {
+        final String key = view.message.getKeyString();
+        MediaPlayer mp = pool.get(key);
+        if (mp != null) {
+            if (mp.isPlaying()) {
+                mp.pause();
+                return;
+            } else {
+                mp.seekTo(mp.getCurrentPosition());
+                mp.start();
+            }
+        } else {
+            mp = new MediaPlayer();
+            if (pool.size() >= maxsize) {
+                Map.Entry<String, MediaPlayer> entry = pool.entrySet().iterator().next();
+                String first = entry.getKey();
+                pool.remove(first);
+            }
+            pool.put(key, mp);
+        }
+        pauseOthersifPlaying();
+        mp.setOnErrorListener(new MediaPlayer.OnErrorListener() {
+            @Override
+            public boolean onError(MediaPlayer mp, int what, int extra) {
+                Toast.makeText(context, R.string.unable_to_play_requested_audio_file, Toast.LENGTH_LONG).show();
+                return false;
+            }
+        });
+        try {
+            if (context != null) {
+                mp.setDataSource(context, uri);
+                mp.prepare();
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        mp.start();
+        if (currentView != null) {
+            currentView.setAudioIcons();
+        }
+        this.currentView = view;
+        mp.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
+
+            @Override
+            public void onCompletion(MediaPlayer mp) {
+                mp.release();
+                pool.remove(key);
+                currentView.setAudioIcons();
+            }
+        });
+        currentView.audioseekbar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {
+            @Override
+            public void onStopTrackingTouch(SeekBar seekBar) {
+            }
+
+            @Override
+            public void onStartTrackingTouch(SeekBar seekBar) {
+            }
+
+            @Override
+            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
+                if (fromUser) {
+                    if (getMediaPlayer(key) != null) {
+                        getMediaPlayer(key).seekTo(progress);
+                    }
+                }
+            }
+        });
+        mPhoneStateListener = new PhoneStateListener() {
+            @Override
+            public void onCallStateChanged(int state, String incomingNumber) {
+                super.onCallStateChanged(state, incomingNumber);
+                if (state == TelephonyManager.CALL_STATE_RINGING || state == TelephonyManager.CALL_STATE_OFFHOOK) {
+                    if (getMediaPlayer(key) != null) {
+                        getMediaPlayer(key).pause();
+                        currentView.setAudioIcons();
+                    }
+                }
+            }
+        };
+        mTelephonyMgr.listen(mPhoneStateListener, PhoneStateListener.LISTEN_CALL_STATE);
+    }
+
+    public void pauseOthersifPlaying() {
+        MediaPlayer m;
+        Iterator it = pool.entrySet().iterator();
+        while (it.hasNext()) {
+            Map.Entry pair = (Map.Entry) it.next();
+            {
+                m = (MediaPlayer) pair.getValue();
+                if (m.isPlaying()) {
+                    m.pause();
+                }
+            }
+        }
+    }
+
+    int getAudioState(String key) {
+        MediaPlayer mp = pool.get(key);
+        if (mp != null) {
+            if (mp.isPlaying()) {
+                return 1;
+            }
+            return 0;
+        }
+        return -1;
+    }
+
+    public MediaPlayer getMediaPlayer(String key) {
+        return pool.get(key);
+    }
+
+    public void audiostop() {
+        MediaPlayer temp;
+        Iterator it = pool.entrySet().iterator();
+        while (it.hasNext()) {
+            Map.Entry pair = (Map.Entry) it.next();
+            {
+                temp = (MediaPlayer) pair.getValue();
+                temp.stop();
+                temp.release();
+            }
+        }
+        pool.clear();
+    }
+
+    public String refreshAudioDuration(String filePath) {
+        MediaPlayer mediaPlayer = new MediaPlayer();
+        try {
+            mediaPlayer.setDataSource(filePath);
+            mediaPlayer.prepare();
+            duration = mediaPlayer.getDuration();
+            duration = duration / 1000;
+            hours = duration / 3600;
+            minute = duration / 60;
+            second = (duration % 60) + 1;
+            mediaPlayer.release();
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        audio_duration = String.format("%02d:%02d", minute, second);
+        return audio_duration;
+    }
+}
\ No newline at end of file
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/attachmentview/ApplozicAudioRecordManager.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/attachmentview/ApplozicAudioRecordManager.java
new file mode 100644
index 00000000..3466267f
--- /dev/null
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/attachmentview/ApplozicAudioRecordManager.java
@@ -0,0 +1,138 @@
+package com.applozic.mobicomkit.uiwidgets.attachmentview;
+
+import android.media.MediaRecorder;
+import android.support.v4.app.FragmentActivity;
+import android.widget.Toast;
+
+import com.applozic.mobicomkit.uiwidgets.R;
+import com.applozic.mobicomkit.uiwidgets.conversation.ConversationUIService;
+import com.applozic.mobicommons.commons.core.utils.Utils;
+
+import java.io.File;
+
+/**
+ * Created by Rahul-PC on 17-07-2017.
+ */
+
+public class ApplozicAudioRecordManager implements MediaRecorder.OnInfoListener, MediaRecorder.OnErrorListener {
+
+    FragmentActivity context;
+    String audioFileName, timeStamp;
+    private MediaRecorder audioRecorder;
+    private String outputFile = null;
+    private boolean isRecordring;
+
+
+    public ApplozicAudioRecordManager(FragmentActivity context) {
+        this.context = context;
+    }
+
+    public void setOutputFile(String outputFile) {
+        this.outputFile = outputFile;
+    }
+
+    public void setAudioFileName(String audioFileName) {
+        this.audioFileName = audioFileName;
+    }
+
+    public void setTimeStamp(String timeStamp) {
+        this.timeStamp = timeStamp;
+    }
+
+    public void recordAudio() {
+        try {
+
+            if (isRecordring) {
+                ApplozicAudioRecordManager.this.stopRecording();
+
+            } else {
+                if (audioRecorder == null) {
+                    prepareMediaRecorder();
+                }
+                audioRecorder.prepare();
+                audioRecorder.start();
+                isRecordring = true;
+            }
+
+        } catch (Exception e){
+            e.printStackTrace();
+        }
+    }
+
+    public void cancelAudio() {
+        if (isRecordring) {
+            ApplozicAudioRecordManager.this.stopRecording();
+        }
+
+        File file = new File(outputFile);
+        if (file != null) {
+            Utils.printLog(context, "AudioFRG:", "File deleted...");
+            file.delete();
+        }
+
+    }
+
+    public void sendAudio() {
+
+        //IF recording is running stoped it ...
+        if (isRecordring) {
+            stopRecording();
+        }
+
+        //FILE CHECK ....
+        if (!(new File(outputFile).exists())) {
+            Toast.makeText(context, R.string.tap_on_mic_button_to_record_audio, Toast.LENGTH_SHORT).show();
+            return;
+        }
+        ConversationUIService conversationUIService = new ConversationUIService(context);
+        conversationUIService.sendAudioMessage(outputFile);
+
+
+    }
+
+
+    public void stopRecording() {
+
+        if (audioRecorder != null) {
+            try {
+                audioRecorder.stop();
+            } catch (RuntimeException stopException) {
+                Utils.printLog(context, "AudioMsgFrag:", "Runtime exception.This is thrown intentionally if stop is called just after start");
+            } finally {
+                audioRecorder.release();
+                audioRecorder = null;
+                isRecordring = false;
+
+            }
+
+        }
+
+    }
+
+    public MediaRecorder prepareMediaRecorder() {
+
+        audioRecorder = new MediaRecorder();
+        audioRecorder.setAudioSource(MediaRecorder.AudioSource.MIC);
+        audioRecorder.setOutputFormat(MediaRecorder.OutputFormat.MPEG_4);
+        audioRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.AAC);
+        audioRecorder.setAudioEncodingBitRate(256);
+        audioRecorder.setAudioChannels(1);
+        audioRecorder.setAudioSamplingRate(44100);
+        audioRecorder.setOutputFile(outputFile);
+        audioRecorder.setOnInfoListener(this);
+        audioRecorder.setOnErrorListener(this);
+
+        return audioRecorder;
+    }
+
+
+    @Override
+    public void onInfo(MediaRecorder mr, int what, int extra) {
+
+    }
+
+    @Override
+    public void onError(MediaRecorder mr, int what, int extra) {
+
+    }
+}
\ No newline at end of file
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/attachmentview/ApplozicDocumentView.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/attachmentview/ApplozicDocumentView.java
new file mode 100644
index 00000000..23c0d12d
--- /dev/null
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/attachmentview/ApplozicDocumentView.java
@@ -0,0 +1,381 @@
+package com.applozic.mobicomkit.uiwidgets.attachmentview;
+
+import android.Manifest;
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.content.pm.PackageManager;
+import android.graphics.PorterDuff;
+import android.media.MediaPlayer;
+import android.net.Uri;
+import android.os.Handler;
+import android.support.v4.app.ActivityCompat;
+import android.support.v4.content.ContextCompat;
+import android.support.v4.content.FileProvider;
+import android.util.Log;
+import android.view.View;
+import android.widget.ImageView;
+import android.widget.ProgressBar;
+import android.widget.RelativeLayout;
+import android.widget.SeekBar;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import com.applozic.mobicomkit.api.MobiComKitConstants;
+import com.applozic.mobicomkit.api.attachment.AttachmentManager;
+import com.applozic.mobicomkit.api.attachment.AttachmentTask;
+import com.applozic.mobicomkit.api.attachment.AttachmentViewProperties;
+import com.applozic.mobicomkit.api.conversation.Message;
+import com.applozic.mobicomkit.api.conversation.MessageIntentService;
+import com.applozic.mobicomkit.api.conversation.database.MessageDatabaseService;
+import com.applozic.mobicomkit.uiwidgets.R;
+import com.applozic.mobicommons.commons.core.utils.Utils;
+import com.applozic.mobicommons.file.FileUtils;
+import com.applozic.mobicommons.json.GsonUtils;
+
+import java.io.File;
+
+/**
+ * Created by devashish on 22/07/16.
+ */
+public class ApplozicDocumentView {
+
+    private static final String TAG = "ApplozicDocumentView";
+    RelativeLayout mainLayout;
+    RelativeLayout downloadInProgressLayout;
+    RelativeLayout downloadedLayout;
+    RelativeLayout previewLayout;
+    RelativeLayout retryLayout;
+    TextView sizeTextView;
+    TextView fileText;
+    Message message;
+    Context context;
+    AttachmentViewProperties attachmentViewProperties;
+    ProgressBar progressBar;
+    ImageView uploadDownloadImage;
+    SeekBar audioseekbar;
+    Uri uri;
+    String filePath, mimeType = null;
+    ImageView docIcon;
+    TextView audio_duration_textView;
+    String audio_duration;
+    private AttachmentTask mDownloadThread;
+    private boolean mCacheFlag = false;
+    private Handler mHandler = new Handler();
+
+
+    public ApplozicDocumentView(Context context) {
+        this.context = context;
+    }
+
+    public void inflateViewWithMessage(View rootview, Message message) {
+        this.message = message;
+        mainLayout = (RelativeLayout) rootview.findViewById(R.id.attachment_doc_relative_layout);
+        downloadInProgressLayout = (RelativeLayout) rootview.findViewById(R.id.applozic_doc_download_progress_rl);
+        downloadedLayout = (RelativeLayout) rootview.findViewById(R.id.applozic_doc_downloaded);
+        previewLayout = (RelativeLayout) rootview.findViewById(R.id.download_doc_relative_layout);
+        retryLayout = (RelativeLayout) rootview.findViewById(R.id.retry_doc_relative_layout);
+        progressBar = (ProgressBar) rootview.findViewById(R.id.applozic_doc_download_progress);
+        sizeTextView = (TextView) rootview.findViewById(R.id.applozic_doc_file_size);
+        fileText = (TextView) rootview.findViewById(R.id.applozic_doc_file_name);
+        uploadDownloadImage = (ImageView) rootview.findViewById(R.id.applozic_download_image);
+        docIcon = (ImageView) rootview.findViewById(R.id.doc_icon);
+        ImageView cancelIcon = (ImageView) rootview.findViewById(R.id.download_calcle_icon);
+        audioseekbar = (SeekBar) rootview.findViewById(R.id.applozic_audio_seekbar);
+        audio_duration_textView = (TextView) rootview.findViewById(R.id.audio_duration_textView);
+        if (message.isTypeOutbox()) {
+            progressBar.getIndeterminateDrawable().setColorFilter(R.color.applozic_green_color, android.graphics.PorterDuff.Mode.MULTIPLY);
+            cancelIcon.setColorFilter(R.color.white, android.graphics.PorterDuff.Mode.MULTIPLY);
+
+
+            if (message.getFileMetas() != null) {
+                if (message.getFileMetas().getContentType().contains("audio")) {
+                    setAudioIcons();
+                    updateApplozicSeekBar();
+                }
+            } else if (message.getFilePaths() != null) {
+                filePath = message.getFilePaths().get(0);
+                mimeType = FileUtils.getMimeType(filePath);
+                if (mimeType != null && mimeType.contains("audio")) {
+                    setAudioIcons();
+                    updateApplozicSeekBar();
+                }
+            }
+            fileText.setTextColor(ContextCompat.getColor(context, R.color.message_text_color));
+            audioseekbar.getProgressDrawable().setColorFilter(0xFFFFFFFF, PorterDuff.Mode.MULTIPLY);
+            cancelIcon.setVisibility(View.GONE);
+            docIcon.setColorFilter(0xffffffff);
+
+        } else {
+            progressBar.getIndeterminateDrawable().setColorFilter(R.color.black, android.graphics.PorterDuff.Mode.MULTIPLY);
+            if (message.getFileMetas() != null) {
+                if (message.getFileMetas().getContentType().contains("audio")) {
+                    setAudioIcons();
+                    updateApplozicSeekBar();
+                }
+            } else if (message.getFilePaths() != null) {
+                filePath = message.getFilePaths().get(0);
+                mimeType = FileUtils.getMimeType(filePath);
+                if (mimeType != null && mimeType.contains("audio")) {
+                    setAudioIcons();
+                    updateApplozicSeekBar();
+                }
+            }
+            cancelIcon.setVisibility(View.VISIBLE);
+            cancelIcon.setColorFilter(R.color.black, android.graphics.PorterDuff.Mode.MULTIPLY);
+            fileText.setTextColor(ContextCompat.getColor(context, R.color.message_text_color));
+            audioseekbar.getProgressDrawable().setColorFilter(0xFFFFB242, PorterDuff.Mode.MULTIPLY);
+        }
+
+        if (!message.hasAttachment()) {
+            return;
+        }
+        setupAttachmentView();
+        registerEvents();
+        if (message.isCanceled()) {
+            showRetry();
+        } else if (message.isAttachmentUploadInProgress() && !message.isCanceled()) {
+            showUploadingProgress();
+        } else if (AttachmentManager.isAttachmentInProgress(message.getKeyString())) {
+
+            this.mDownloadThread = AttachmentManager.getBGThreadForAttachment(message.getKeyString());
+            this.mDownloadThread.setAttachementViewNew(attachmentViewProperties);
+            showDownloadInProgress();
+
+        } else if (message.isAttachmentDownloaded()) {
+            showDownloaded();
+        } else {
+            showPreview();
+        }
+
+        if (message.getFileMetas() != null && message.getFilePaths() == null) {
+            if (!(message.getFileMetas().getContentType().contains("audio"))) {
+
+                sizeTextView.setText(message.getFileMetas().getSizeInReadableFormat());
+                fileText.setText(message.getFileMetas().getName());
+                audioseekbar.setVisibility(View.GONE);
+            } else {
+                fileText.setVisibility(View.GONE);
+                if (message.isAttachmentDownloaded()) {
+                    audio_duration = ApplozicAudioManager.getInstance(context).refreshAudioDuration(filePath);
+                    audio_duration_textView.setVisibility(View.VISIBLE);
+                    audio_duration_textView.setText(audio_duration);
+                } else {
+                    audio_duration_textView.setVisibility(View.VISIBLE);
+                    audio_duration_textView.setText("00:00");
+                }
+                setAudioIcons();
+                audioseekbar.setVisibility(View.VISIBLE);
+            }
+        } else {
+            if (message.getFilePaths() != null) {
+                filePath = message.getFilePaths().get(0);
+                mimeType = FileUtils.getMimeType(filePath);
+                if (mimeType != null && !(mimeType.contains("audio"))) {
+                    String fileName = new File(filePath).getName();
+                    fileText.setText(fileName);
+                    audioseekbar.setVisibility(View.GONE);
+                } else {
+                    if (message.isAttachmentDownloaded()) {
+                        audio_duration = ApplozicAudioManager.getInstance(context).refreshAudioDuration(filePath);
+                        audio_duration_textView.setVisibility(View.VISIBLE);
+                        audio_duration_textView.setText(audio_duration);
+                    } else {
+                        audio_duration_textView.setVisibility(View.VISIBLE);
+                        audio_duration_textView.setText("00:00");
+                    }
+                    fileText.setVisibility(View.GONE);
+                    audioseekbar.setVisibility(View.VISIBLE);
+                    setAudioIcons();
+                }
+            }
+        }
+    }
+
+    private void showRetry() {
+        if (isDownloadRequire()) {
+            showPreview();
+        } else {
+            mainLayout.setVisibility(View.VISIBLE);
+            retryLayout.setVisibility(View.VISIBLE);
+
+            uploadDownloadImage.setImageResource(R.drawable.circle_arrow_upload);
+            downloadInProgressLayout.setVisibility(View.GONE);
+            downloadedLayout.setVisibility(View.GONE);
+            previewLayout.setVisibility(View.GONE);
+        }
+    }
+
+    private void showUploadingProgress() {
+        Utils.printLog(context, TAG, "showUploadingProgress :: ");
+        showDownloadInProgress();
+    }
+
+    private void setupAttachmentView() {
+        attachmentViewProperties = new AttachmentViewProperties(mainLayout.getWidth(), mainLayout.getHeight(), context, message);
+        if (mDownloadThread == null && AttachmentManager.isAttachmentInProgress(message.getKeyString())) {
+            mDownloadThread = AttachmentManager.getBGThreadForAttachment(message.getKeyString());
+            if (mDownloadThread != null)
+                mDownloadThread.setAttachementViewNew(attachmentViewProperties);
+        }
+    }
+
+    public void hideView(boolean hideView) {
+        mainLayout.setVisibility(hideView ? View.GONE : View.VISIBLE);
+    }
+
+    public void showPreview() {
+        mainLayout.setVisibility(View.VISIBLE);
+        previewLayout.setVisibility(View.VISIBLE);
+        uploadDownloadImage.setImageResource(R.drawable.circle_arrow_down_download);
+        downloadInProgressLayout.setVisibility(View.GONE);
+        downloadedLayout.setVisibility(View.GONE);
+        retryLayout.setVisibility(View.GONE);
+    }
+
+    public void showDownloadInProgress() {
+        Utils.printLog(context, TAG, "showDownloadInProgress :: ");
+        mainLayout.setVisibility(View.VISIBLE);
+        downloadInProgressLayout.setVisibility(View.VISIBLE);
+        previewLayout.setVisibility(View.GONE);
+        downloadedLayout.setVisibility(View.GONE);
+        retryLayout.setVisibility(View.GONE);
+    }
+
+    public void showDownloaded() {
+        Utils.printLog(context, TAG, "showDownloaded :: ");
+        mainLayout.setVisibility(View.VISIBLE);
+        downloadedLayout.setVisibility(View.VISIBLE);
+        previewLayout.setVisibility(View.GONE);
+        downloadInProgressLayout.setVisibility(View.GONE);
+        retryLayout.setVisibility(View.GONE);
+    }
+
+    public void registerEvents() {
+        previewLayout.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                if (!AttachmentManager.isAttachmentInProgress(message.getKeyString())) {
+                    // Starts downloading this View, using the current cache setting
+                    mDownloadThread = AttachmentManager.startDownload(attachmentViewProperties, mCacheFlag);
+                    // After successfully downloading the image, this marks that it's available.
+                    showDownloadInProgress();
+                }
+                if (mDownloadThread == null) {
+                    mDownloadThread = AttachmentManager.getBGThreadForAttachment(message.getKeyString());
+                    if (mDownloadThread != null)
+                        mDownloadThread.setAttachementViewNew(attachmentViewProperties);
+                }
+            }
+        });
+
+        downloadedLayout.setOnClickListener(new View.OnClickListener() {
+
+            public void onClick(View v) {
+                final String mimeType = FileUtils.getMimeType(message.getFileMetas().getName());
+                if (Utils.hasNougat()) {
+                    uri = FileProvider.getUriForFile(context, Utils.getMetaDataValue(context, MobiComKitConstants.PACKAGE_NAME) + ".provider", new File(message.getFilePaths().get(0)));
+                } else {
+                    uri = Uri.fromFile(new File(message.getFilePaths().get(0)));
+                    Log.i(TAG, uri.toString());
+                }
+                if (mimeType != null && mimeType.contains("audio")) {
+                    if (ActivityCompat.checkSelfPermission(context, Manifest.permission.READ_PHONE_STATE)
+                            != PackageManager.PERMISSION_GRANTED) {
+                        ActivityCompat.requestPermissions((Activity) context, new String[]{Manifest.permission.READ_PHONE_STATE},
+                                10);
+                    } else {
+                        ApplozicAudioManager.getInstance(context).play(uri, ApplozicDocumentView.this);
+                        setAudioIcons();
+                        updateApplozicSeekBar();
+                    }
+                } else {
+                    Intent intent = new Intent();
+                    intent.setAction(Intent.ACTION_VIEW);
+                    intent.setDataAndType(uri, mimeType);
+                    if (intent.resolveActivity(context.getPackageManager()) != null) {
+                        context.startActivity(intent);
+                    } else {
+                        Toast.makeText(context, R.string.info_app_not_found_to_open_file, Toast.LENGTH_LONG).show();
+                    }
+                }
+            }
+
+        });
+
+        downloadInProgressLayout.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                cancelDownload();
+            }
+        });
+
+        retryLayout.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                message.setCanceled(false);
+                MessageDatabaseService messageDatabaseService = new MessageDatabaseService(context);
+                messageDatabaseService.updateCanceledFlag(message.getMessageId(), 0);
+                Intent intent = new Intent(context, MessageIntentService.class);
+                intent.putExtra(MobiComKitConstants.MESSAGE_JSON_INTENT, GsonUtils.getJsonFromObject(message, Message.class));
+                context.startService(intent);
+                showDownloadInProgress();
+
+            }
+        });
+    }
+
+    public void setAudioIcons() {
+        int state = ApplozicAudioManager.getInstance(context).getAudioState(message.getKeyString());
+        Utils.printLog(context, "statee:", String.valueOf(state));
+        if (state == 1) {
+            docIcon.setImageResource(R.drawable.ic_pause_circle_outline);
+        } else {
+            docIcon.setImageResource(R.drawable.ic_play_circle_outline);
+        }
+    }
+
+    public boolean isUploadRequire() {
+        return (message.hasAttachment() && message.isTypeOutbox() && !message.isSentToServer());
+    }
+
+    public boolean isDownloadRequire() {
+        return (message.hasAttachment() && message.isSentToServer() && message.getFileMetas() != null && message.getFilePaths() != null);
+    }
+
+    public void cancelDownload() {
+        if (mDownloadThread == null) {
+            if (message.isAttachmentUploadInProgress()) {
+                message.setCanceled(true);
+            }
+            return;
+        }
+        AttachmentManager.removeDownload(mDownloadThread, true);
+        getDownloadProgressLayout().setVisibility(View.GONE);
+        showPreview();
+    }
+
+    public View getDownloadProgressLayout() {
+        return downloadInProgressLayout;
+    }
+
+    public void updateApplozicSeekBar() {
+        MediaPlayer mediaplayer = ApplozicAudioManager.getInstance(context).getMediaPlayer(message.getKeyString());
+        if (mediaplayer == null) {
+            audioseekbar.setProgress(0);
+        } else if (mediaplayer.isPlaying()) {
+            audioseekbar.setMax(mediaplayer.getDuration());
+            audioseekbar.setProgress(mediaplayer.getCurrentPosition());
+            Runnable runnable = new Runnable() {
+                @Override
+                public void run() {
+                    updateApplozicSeekBar();
+                }
+            };
+            mHandler.postDelayed(runnable, 500);
+        } else {
+            audioseekbar.setMax(mediaplayer.getDuration());
+            audioseekbar.setProgress(mediaplayer.getCurrentPosition());
+        }
+    }
+}
\ No newline at end of file
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/ConversationUIService.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/ConversationUIService.java
index 017a2906..37a9503d 100755
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/ConversationUIService.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/ConversationUIService.java
@@ -2,13 +2,13 @@
 
 import android.app.Activity;
 import android.app.AlertDialog;
+import android.app.NotificationManager;
 import android.app.ProgressDialog;
 import android.content.Context;
 import android.content.DialogInterface;
 import android.content.Intent;
-import android.graphics.Bitmap;
+import android.media.MediaScannerConnection;
 import android.net.Uri;
-import android.os.AsyncTask;
 import android.os.Bundle;
 import android.os.Environment;
 import android.os.Handler;
@@ -25,8 +25,9 @@
 
 import com.applozic.mobicomkit.api.MobiComKitConstants;
 import com.applozic.mobicomkit.api.account.user.MobiComUserPreference;
+import com.applozic.mobicomkit.api.account.user.RegisteredUsersAsyncTask;
 import com.applozic.mobicomkit.api.account.user.UserClientService;
-import com.applozic.mobicomkit.api.account.user.UserService;
+import com.applozic.mobicomkit.api.attachment.FileClientService;
 import com.applozic.mobicomkit.api.attachment.FileMeta;
 import com.applozic.mobicomkit.api.conversation.ApplozicMqttIntentService;
 import com.applozic.mobicomkit.api.conversation.Message;
@@ -38,6 +39,7 @@
 import com.applozic.mobicomkit.contact.ContactService;
 import com.applozic.mobicomkit.feed.RegisteredUsersApiResponse;
 import com.applozic.mobicomkit.feed.TopicDetail;
+import com.applozic.mobicomkit.uiwidgets.AlCustomizationSettings;
 import com.applozic.mobicomkit.uiwidgets.ApplozicSetting;
 import com.applozic.mobicomkit.uiwidgets.R;
 import com.applozic.mobicomkit.uiwidgets.async.ApplozicChannelDeleteTask;
@@ -51,11 +53,10 @@
 import com.applozic.mobicomkit.uiwidgets.conversation.fragment.MobiComQuickConversationFragment;
 import com.applozic.mobicomkit.uiwidgets.conversation.fragment.MultimediaOptionFragment;
 import com.applozic.mobicomkit.uiwidgets.people.activity.MobiComKitPeopleActivity;
+import com.applozic.mobicomkit.uiwidgets.people.fragment.UserProfileFragment;
 import com.applozic.mobicommons.commons.core.utils.LocationInfo;
 import com.applozic.mobicommons.commons.core.utils.Support;
 import com.applozic.mobicommons.commons.core.utils.Utils;
-import com.applozic.mobicommons.commons.image.ImageUtils;
-import com.applozic.mobicommons.file.FilePathFinder;
 import com.applozic.mobicommons.file.FileUtils;
 import com.applozic.mobicommons.json.GsonUtils;
 import com.applozic.mobicommons.people.channel.Channel;
@@ -65,16 +66,17 @@
 
 import java.io.File;
 import java.util.ArrayList;
-import java.util.regex.Pattern;
 
 
 public class ConversationUIService {
 
-    public static final int REQUEST_CODE_CONTACT_GROUP_SELECTION = 101;
+    public static final int REQUEST_CODE_CONTACT_GROUP_SELECTION = 1011;
     public static final String CONVERSATION_FRAGMENT = "ConversationFragment";
     public static final String MESSGAE_INFO_FRAGMENT = "messageInfoFagment";
     public static final String USER_PROFILE_FRAMENT = "userProfilefragment";
     public static final String QUICK_CONVERSATION_FRAGMENT = "QuickConversationFragment";
+    public static final String FORWARD_MESSAGE = "forwardMessage";
+    public static final String CLIENT_GROUP_ID = "clientGroupId";
     public static final String DISPLAY_NAME = "displayName";
     public static final String TAKE_ORDER = "takeOrder";
     public static final String USER_ID = "userId";
@@ -89,26 +91,29 @@
     public static final String FINAL_PRICE_TEXT = "Final agreed price ";
     public static final String PRODUCT_TOPIC_ID = "topicId";
     public static final String PRODUCT_IMAGE_URL = "productImageUrl";
-    private static final String TAG = "ConversationUIService";
     public static final String CONTACT = "CONTACT";
-    private static final String APPLICATION_KEY_META_DATA = "com.applozic.application.key";
     public static final String GROUP = "group-";
     public static final String SUCCESS = "success";
+    public static final String SEARCH_STRING = "searchString";
+    public static final String CONVERSATION_ID = "CONVERSATION_ID";
+    public static final String TOPIC_ID = "TOPIC_ID";
+    private static final String TAG = "ConversationUIService";
+    private static final String APPLICATION_KEY_META_DATA = "com.applozic.application.key";
+    FileClientService fileClientService;
     private FragmentActivity fragmentActivity;
     private BaseContactService baseContactService;
     private MobiComUserPreference userPreference;
-    private ApplozicSetting applozicSetting;
     private Conversation conversation;
     private TopicDetail topicDetailsParcelable;
-    public static final String CONVERSATION_ID = "CONVERSATION_ID";
-    public static final String TOPIC_ID = "TOPIC_ID";
     private Contact contact;
+    private NotificationManager notificationManager;
 
     public ConversationUIService(FragmentActivity fragmentActivity) {
         this.fragmentActivity = fragmentActivity;
         this.baseContactService = new AppContactService(fragmentActivity);
         this.userPreference = MobiComUserPreference.getInstance(fragmentActivity);
-        this.applozicSetting = ApplozicSetting.getInstance(fragmentActivity);
+        this.notificationManager = (NotificationManager) fragmentActivity.getSystemService(Context.NOTIFICATION_SERVICE);
+        this.fileClientService = new FileClientService(fragmentActivity);
     }
 
     public MobiComQuickConversationFragment getQuickConversationFragment() {
@@ -130,7 +135,7 @@ public ConversationFragment getConversationFragment() {
             Contact contact = ((ConversationActivity) fragmentActivity).getContact();
             Channel channel = ((ConversationActivity) fragmentActivity).getChannel();
             Integer conversationId = ((ConversationActivity) fragmentActivity).getConversationId();
-            conversationFragment = new ConversationFragment(contact, channel, conversationId);
+            conversationFragment = ConversationFragment.newInstance(contact, channel, conversationId, null);
             ConversationActivity.addFragment(fragmentActivity, conversationFragment, CONVERSATION_FRAGMENT);
         }
         return conversationFragment;
@@ -139,32 +144,37 @@ public ConversationFragment getConversationFragment() {
     public void onQuickConversationFragmentItemClick(View view, Contact contact) {
         TextView textView = (TextView) view.findViewById(R.id.unreadSmsCount);
         textView.setVisibility(View.GONE);
-        openConversationFragment(contact, null);
+        openConversationFragment(contact, null, null);
     }
 
-    public void openConversationFragment(final Contact contact, final Integer conversationId) {
+    public void openConversationFragment(final Contact contact, final Integer conversationId, final String searchString) {
         new Handler().post(new Runnable() {
             @Override
             public void run() {
                 ConversationFragment conversationFragment = (ConversationFragment) UIService.getFragmentByTag(fragmentActivity, CONVERSATION_FRAGMENT);
                 if (conversationFragment == null) {
-                    conversationFragment = new ConversationFragment(contact, null, conversationId);
+                    conversationFragment = ConversationFragment.newInstance(contact, null, conversationId, searchString);
                     ((MobiComKitActivityInterface) fragmentActivity).addFragment(conversationFragment);
                 } else {
-                    conversationFragment.loadConversation(contact, conversationId);
+                    conversationFragment.loadConversation(contact, conversationId, searchString);
                 }
             }
         });
     }
 
-    public void openConversationFragment(final Channel channel, Integer conversationId) {
-        ConversationFragment conversationFragment = (ConversationFragment) UIService.getFragmentByTag(fragmentActivity, CONVERSATION_FRAGMENT);
-        if (conversationFragment == null) {
-            conversationFragment = new ConversationFragment(null, channel, conversationId);
-            ((MobiComKitActivityInterface) fragmentActivity).addFragment(conversationFragment);
-        } else {
-            conversationFragment.loadConversation(channel, conversationId);
-        }
+    public void openConversationFragment(final Channel channel, final Integer conversationId, final String searchString) {
+        new Handler().post(new Runnable() {
+            @Override
+            public void run() {
+                ConversationFragment conversationFragment = (ConversationFragment) UIService.getFragmentByTag(fragmentActivity, CONVERSATION_FRAGMENT);
+                if (conversationFragment == null) {
+                    conversationFragment = ConversationFragment.newInstance(null, channel, conversationId, searchString);
+                    ((MobiComKitActivityInterface) fragmentActivity).addFragment(conversationFragment);
+                } else {
+                    conversationFragment.loadConversation(channel, conversationId, searchString);
+                }
+            }
+        });
     }
 
     public void onActivityResult(int requestCode, int resultCode, Intent intent) {
@@ -173,18 +183,24 @@ public void onActivityResult(int requestCode, int resultCode, Intent intent) {
                     requestCode == MultimediaOptionFragment.REQUEST_CODE_TAKE_PHOTO)
                     && resultCode == Activity.RESULT_OK) {
                 Uri selectedFileUri = (intent == null ? null : intent.getData());
+                File file = null;
                 if (selectedFileUri == null) {
-
+                    file = ((ConversationActivity) fragmentActivity).getFileObject();
                     selectedFileUri = ((ConversationActivity) fragmentActivity).getCapturedImageUri();
-                    ImageUtils.addImageToGallery(FilePathFinder.getPath(fragmentActivity, selectedFileUri), fragmentActivity);
                 }
 
-                if (selectedFileUri == null) {
-                    Bitmap photo = (Bitmap) (intent != null ? intent.getExtras().get("data") : null);
-                    selectedFileUri = ImageUtils.getImageUri(fragmentActivity, photo);
+                if (selectedFileUri != null) {
+                    selectedFileUri = ((ConversationActivity) fragmentActivity).getCapturedImageUri();
+                    file = ((ConversationActivity) fragmentActivity).getFileObject();
                 }
-                getConversationFragment().loadFile(selectedFileUri);
-                Log.i(TAG, "File uri: " + selectedFileUri);
+                MediaScannerConnection.scanFile(fragmentActivity,
+                        new String[]{file.getAbsolutePath()}, null,
+                        new MediaScannerConnection.OnScanCompletedListener() {
+                            public void onScanCompleted(String path, Uri uri) {
+                            }
+                        });
+                getConversationFragment().loadFile(selectedFileUri, file);
+                Utils.printLog(fragmentActivity,TAG, "File uri: " + selectedFileUri);
             }
 
             if (requestCode == REQUEST_CODE_CONTACT_GROUP_SELECTION && resultCode == Activity.RESULT_OK) {
@@ -194,16 +210,16 @@ public void onActivityResult(int requestCode, int resultCode, Intent intent) {
 
                 Uri selectedFilePath = ((ConversationActivity) fragmentActivity).getVideoFileUri();
 
-                String file = Pattern.compile("//").split(selectedFilePath.toString())[1];
+                File file = ((ConversationActivity) fragmentActivity).getFileObject();
 
-                if (!(new File(file).exists())) {
-                    FileUtils.getLastModifiedFile(Environment.getExternalStorageDirectory().getAbsolutePath() + "/DCIM/Camera/").renameTo(new File(file));
+                if (!(file != null && file.exists())) {
+                    FileUtils.getLastModifiedFile(Environment.getExternalStorageDirectory().getAbsolutePath() + "/DCIM/Camera/").renameTo(file);
                 }
 
                 if (selectedFilePath != null) {
-                    getConversationFragment().loadFile(selectedFilePath);
+                    getConversationFragment().loadFile(selectedFilePath, file);
+                    getConversationFragment().sendMessage("", Message.ContentType.VIDEO_MSG.getValue());
                 }
-                getConversationFragment().sendMessage("", Message.ContentType.VIDEO_MSG.getValue());
             }
 
             if (requestCode == MultimediaOptionFragment.REQUEST_CODE_CONTACT_SHARE && resultCode == Activity.RESULT_OK) {
@@ -212,12 +228,11 @@ public void onActivityResult(int requestCode, int resultCode, Intent intent) {
                     File vCradFile = new ContactService(fragmentActivity).vCard(intent.getData());
 
                     if (vCradFile != null) {
-                        getConversationFragment().loadFile(Uri.fromFile(vCradFile));
-                        getConversationFragment().sendMessage("", Message.ContentType.CONTACT_MSG.getValue());
+                        getConversationFragment().sendMessage(Message.ContentType.CONTACT_MSG.getValue(), vCradFile.getAbsolutePath());
                     }
 
                 } catch (Exception e) {
-                    Toast.makeText(fragmentActivity, "Failed to load Contact", Toast.LENGTH_SHORT).show();
+                    Toast.makeText(fragmentActivity, fragmentActivity.getString(R.string.applozic_failed_to_load_contact), Toast.LENGTH_SHORT).show();
                     Log.e("Exception::", "Exception", e);
                 }
             }
@@ -229,14 +244,12 @@ public void onActivityResult(int requestCode, int resultCode, Intent intent) {
                 //TODO: check performance, we might need to put in each posting in separate thread.
 
                 for (Uri info : attachmentList) {
-                    getConversationFragment().loadFile(info);
-                    getConversationFragment().sendMessage(messageText, Message.ContentType.ATTACHMENT.getValue());
+                    getConversationFragment().sendMessage(messageText, Message.ContentType.ATTACHMENT.getValue(), info.toString());
                 }
 
             }
 
             if (requestCode == MultimediaOptionFragment.REQUEST_CODE_SEND_LOCATION && resultCode == Activity.RESULT_OK) {
-                Log.i("test", "posi");
                 Double latitude = intent.getDoubleExtra("latitude", 0);
                 Double longitude = intent.getDoubleExtra("longitude", 0);
                 //TODO: put your location(lat/lon ) in constructor.
@@ -259,14 +272,22 @@ public void onClick(DialogInterface dialogInterface, int i) {
 
                     }
                 });
-        alertDialog.setNegativeButton(android.R.string.cancel, new DialogInterface.OnClickListener() {
+        alertDialog.setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() {
             @Override
             public void onClick(DialogInterface dialogInterface, int i) {
             }
         });
         String name = "";
         if (channel != null) {
-            name = ChannelUtils.getChannelTitleName(channel, MobiComUserPreference.getInstance(fragmentActivity).getUserId());
+            if (Channel.GroupType.GROUPOFTWO.getValue().equals(channel.getType())) {
+                String userId = ChannelService.getInstance(fragmentActivity).getGroupOfTwoReceiverUserId(channel.getKey());
+                if (!TextUtils.isEmpty(userId)) {
+                    Contact withUserContact = baseContactService.getContactById(userId);
+                    name = withUserContact.getDisplayName();
+                }
+            } else {
+                name = ChannelUtils.getChannelTitleName(channel, MobiComUserPreference.getInstance(fragmentActivity).getUserId());
+            }
         } else {
             name = contact.getDisplayName();
         }
@@ -314,12 +335,12 @@ public void onCompletion() {
                         applozicChannelDeleteTask.execute((Void) null);
                     }
                 });
-        alertDialog.setNegativeButton(android.R.string.cancel, new DialogInterface.OnClickListener() {
+        alertDialog.setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() {
             @Override
             public void onClick(DialogInterface dialogInterface, int i) {
             }
         });
-        alertDialog.setMessage(fragmentActivity.getString(R.string.delete_channel_messages_and_channel_info).replace(fragmentActivity.getString(R.string.group_name_info), channel.getName()));
+        alertDialog.setMessage(fragmentActivity.getString(R.string.delete_channel_messages_and_channel_info).replace(fragmentActivity.getString(R.string.group_name_info), channel.getName()).replace(fragmentActivity.getString(R.string.groupType_info), Channel.GroupType.BROADCAST.getValue().equals(channel.getType()) ? fragmentActivity.getString(R.string.broadcast_string) : fragmentActivity.getString(R.string.group_string)));
         alertDialog.setCancelable(true);
         alertDialog.create().show();
     }
@@ -349,12 +370,12 @@ public void onFailure(String response, Exception e, Context context) {
 
                     }
                 });
-        alertDialog.setNegativeButton(android.R.string.cancel, new DialogInterface.OnClickListener() {
+        alertDialog.setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() {
             @Override
             public void onClick(DialogInterface dialogInterface, int i) {
             }
         });
-        alertDialog.setMessage(fragmentActivity.getString(R.string.exit_channel_message_info).replace(fragmentActivity.getString(R.string.group_name_info), channel.getName()));
+        alertDialog.setMessage(fragmentActivity.getString(R.string.exit_channel_message_info).replace(fragmentActivity.getString(R.string.group_name_info), channel.getName()).replace(fragmentActivity.getString(R.string.groupType_info), Channel.GroupType.BROADCAST.getValue().equals(channel.getType()) ? fragmentActivity.getString(R.string.broadcast_string) : fragmentActivity.getString(R.string.group_string)));
         alertDialog.setCancelable(true);
         alertDialog.create().show();
     }
@@ -374,14 +395,18 @@ public void removeConversation(Message message, String formattedContactNumber) {
     }
 
     public void addMessage(Message message) {
-        if (!Message.ContentType.HIDDEN.getValue().equals(message.getContentType())) {
+        if (message.isUpdateMessage()) {
             if (!BroadcastService.isQuick()) {
                 return;
             }
 
             MobiComQuickConversationFragment fragment = (MobiComQuickConversationFragment) UIService.getFragmentByTag(fragmentActivity, QUICK_CONVERSATION_FRAGMENT);
             if (fragment != null) {
-                fragment.addMessage(message);
+                if (message.isHidden()) {
+                    fragment.refreshView();
+                } else {
+                    fragment.addMessage(message);
+                }
             }
         }
     }
@@ -401,29 +426,33 @@ public boolean isBroadcastedToGroup(Integer channelKey) {
     }
 
     public void syncMessages(Message message, String keyString) {
-        if (!Message.ContentType.HIDDEN.getValue().equals(message.getContentType())) {
-            String userId = null;
-            if (message.getGroupId() == null) {
-                userId = message.getContactIds();
-            }
+        if (!message.isHidden() && !message.isVideoNotificationMessage()) {
+
             if (BroadcastService.isIndividual()) {
                 ConversationFragment conversationFragment = getConversationFragment();
-                if (conversationFragment.isMsgForConversation(message)) {
+                if (conversationFragment.isMsgForConversation(message) && !Message.GroupMessageMetaData.TRUE.getValue().equals(message.getMetaDataValueForKey(Message.GroupMessageMetaData.HIDE_KEY.getValue()))) {
                     conversationFragment.addMessage(message);
                 }
             }
 
-            if (message.getGroupId() == null) {
-                updateLastMessage(keyString, userId);
+            if (!Message.MetaDataType.ARCHIVE.getValue().equals(message.getMetaDataValueForKey(Message.MetaDataType.KEY.getValue()))) {
+                updateLastMessage(message);
             }
         }
     }
 
+    public void updateLastMessage(Message message) {
+        if (!BroadcastService.isQuick()) {
+            return;
+        }
+        getQuickConversationFragment().updateLastMessage(message);
+    }
+
     public void downloadConversations(boolean showInstruction) {
         if (!BroadcastService.isQuick()) {
             return;
         }
-        getQuickConversationFragment().downloadConversations(showInstruction);
+        getQuickConversationFragment().downloadConversations(showInstruction, null);
     }
 
     public void setLoadMore(boolean loadMore) {
@@ -459,7 +488,7 @@ public void updateLastSeenStatus(String contactId) {
         }
         if (BroadcastService.isIndividual()) {
             ConversationFragment conversationFragment = getConversationFragment();
-            if (conversationFragment.getContact() != null && contactId.equals(conversationFragment.getContact().getContactIds())) {
+            if (conversationFragment.getContact() != null && contactId.equals(conversationFragment.getContact().getContactIds()) || conversationFragment.getChannel() != null) {
                 conversationFragment.updateLastSeenStatus();
             }
         }
@@ -532,19 +561,18 @@ public void updateDownloadStatus(Message message) {
         getConversationFragment().updateDownloadStatus(message);
     }
 
-    public void updateName(Integer channelKey) {
-        if (BroadcastService.isIndividual()) {
-            return;
+    public void updateChannelName() {
+        if (BroadcastService.isQuick()) {
+            getQuickConversationFragment().updateChannelName();
         }
-        getQuickConversationFragment().updateUserName(channelKey);
     }
 
-    public void updateTypingStatus(String userId,String isTypingStatus) {
+    public void updateTypingStatus(String userId, String isTypingStatus) {
         if (!BroadcastService.isIndividual()) {
             return;
         }
         ConversationFragment conversationFragment = getConversationFragment();
-        Log.i(TAG, "Received typing status for: " + userId);
+        Utils.printLog(fragmentActivity,TAG, "Received typing status for: " + userId);
         if (conversationFragment.getContact() != null && userId.equals(conversationFragment.getContact().getContactIds()) || conversationFragment.getChannel() != null){
             conversationFragment.updateUserTypingStatus(userId, isTypingStatus);
         }
@@ -569,6 +597,43 @@ public void updateTitleAndSubtitle() {
         }
     }
 
+    public void updateUserInfo(String userId) {
+        if (TextUtils.isEmpty(userId)) {
+            return;
+        }
+
+        if (BroadcastService.isQuick()) {
+            getQuickConversationFragment().updateUserInfo(userId);
+            return;
+        }
+        if (userId.equals(BroadcastService.currentUserProfileUserId)) {
+            UserProfileFragment userProfileFragment = (UserProfileFragment) UIService.getFragmentByTag(fragmentActivity, ConversationUIService.USER_PROFILE_FRAMENT);
+            if (userProfileFragment != null  && userId.equals(BroadcastService.currentUserProfileUserId)) {
+                userProfileFragment.refreshContactData();
+            }
+        }
+        if (BroadcastService.isIndividual()) {
+            ConversationFragment conversationFragment = getConversationFragment();
+            if (conversationFragment.getContact() != null && userId.equals(conversationFragment.getContact().getContactIds()) || conversationFragment.getChannel() != null) {
+                conversationFragment.reload();
+            }
+        }
+
+    }
+
+
+    public void updateConversationRead(String currentId, boolean isGroup) {
+        if (TextUtils.isEmpty(currentId)) {
+            return;
+        }
+        if (!BroadcastService.isIndividual()) {
+            notificationManager.cancel(currentId.hashCode());
+        }
+        if (BroadcastService.isQuick()) {
+            getQuickConversationFragment().updateConversationRead(currentId, isGroup);
+        }
+    }
+
     public void startContactActivityForResult(Intent intent, Message message, String messageContent, String[] userIdArray) {
         if (message != null) {
             intent.putExtra(MobiComKitPeopleActivity.FORWARD_MESSAGE, GsonUtils.getJsonFromObject(message, message.getClass()));
@@ -588,11 +653,18 @@ public void startContactActivityForResult() {
     }
 
     public void startContactActivityForResult(final Message message, final String messageContent) {
-        if (applozicSetting.getTotalOnlineUser() > 0 && Utils.isInternetAvailable(fragmentActivity)) {
-            new DownloadNNumberOfUserAsync(applozicSetting.getTotalOnlineUser(), message, messageContent).execute((Void[]) null);
-        } else if (applozicSetting.getTotalRegisteredUsers() > 0 && applozicSetting.isRegisteredUsersContactCall() && !userPreference.getWasContactListServerCallAlreadyDone()) {
+        AlCustomizationSettings alCustomizationSettings;
+        String jsonString = FileUtils.loadSettingsJsonFile(fragmentActivity.getApplicationContext());
+        if (!TextUtils.isEmpty(jsonString)) {
+            alCustomizationSettings = (AlCustomizationSettings) GsonUtils.getObjectFromJson(jsonString, AlCustomizationSettings.class);
+        } else {
+            alCustomizationSettings = new AlCustomizationSettings();
+        }
+        if (alCustomizationSettings.getTotalOnlineUsers() > 0 && Utils.isInternetAvailable(fragmentActivity)) {
+            processLoadUsers(false, message, messageContent, alCustomizationSettings.getTotalRegisteredUserToFetch(), alCustomizationSettings.getTotalOnlineUsers());
+        } else if (alCustomizationSettings.getTotalRegisteredUserToFetch() > 0 && (alCustomizationSettings.isRegisteredUserContactListCall() || ApplozicSetting.getInstance(fragmentActivity).isRegisteredUsersContactCall())&& !userPreference.getWasContactListServerCallAlreadyDone()) {
             if (Utils.isInternetAvailable(fragmentActivity)) {
-                new DownloadNNumberOfUserAsync(applozicSetting.getTotalRegisteredUsers(), message, messageContent, true).execute((Void[]) null);
+                processLoadUsers(true, message, messageContent, alCustomizationSettings.getTotalRegisteredUserToFetch(), alCustomizationSettings.getTotalOnlineUsers());
             }
         } else {
             Intent intent = new Intent(fragmentActivity, MobiComKitPeopleActivity.class);
@@ -642,13 +714,9 @@ public void onClick(DialogInterface dialog, int which) {
 
     public void sendAudioMessage(String selectedFilePath) {
 
-        Log.i("ConversationUIService:", "Send audio message ...");
+        Utils.printLog(fragmentActivity,"ConversationUIService:", "Send audio message ...");
 
-        if (selectedFilePath != null) {
-            Uri uri = Uri.fromFile(new File(selectedFilePath));
-            getConversationFragment().loadFile(uri);
-        }
-        getConversationFragment().sendMessage("", Message.ContentType.AUDIO_MSG.getValue());
+        getConversationFragment().sendMessage(Message.ContentType.AUDIO_MSG.getValue(), selectedFilePath);
 
     }
 
@@ -670,7 +738,6 @@ public void checkForStartNewConversation(Intent intent) {
         Contact contact = null;
         Channel channel = null;
         Integer conversationId = null;
-        ;
 
         if (Intent.ACTION_SEND.equals(intent.getAction()) && intent.getType() != null) {
             if ("text/plain".equals(intent.getType())) {
@@ -695,9 +762,15 @@ public void checkForStartNewConversation(Intent intent) {
         }
 
         Integer channelKey = intent.getIntExtra(GROUP_ID, -1);
+        String clientGroupId = intent.getStringExtra(CLIENT_GROUP_ID);
         String channelName = intent.getStringExtra(GROUP_NAME);
 
-        if (channelKey != -1 && channelKey != null && channelKey != 0) {
+        if (!TextUtils.isEmpty(clientGroupId)) {
+            channel = ChannelService.getInstance(fragmentActivity).getChannelByClientGroupId(clientGroupId);
+            if (channel == null) {
+                return;
+            }
+        } else if (channelKey != -1 && channelKey != null && channelKey != 0) {
             channel = ChannelService.getInstance(fragmentActivity).getChannel(channelKey);
         }
 
@@ -724,7 +797,7 @@ public void checkForStartNewConversation(Intent intent) {
         if (!TextUtils.isEmpty(userId)) {
             contact = baseContactService.getContactById(userId);
         }
-
+        String searchString = intent.getStringExtra(SEARCH_STRING);
         String applicationId = intent.getStringExtra(APPLICATION_ID);
         if (contact != null) {
             contact.setApplicationId(applicationId);
@@ -768,15 +841,15 @@ public void checkForStartNewConversation(Intent intent) {
         String forwardMessage = intent.getStringExtra(MobiComKitPeopleActivity.FORWARD_MESSAGE);
         if (!TextUtils.isEmpty(forwardMessage)) {
             Message messageToForward = (Message) GsonUtils.getObjectFromJson(forwardMessage, Message.class);
-            getConversationFragment().forwardMessage(messageToForward, contact,channel);
+            getConversationFragment().forwardMessage(messageToForward, contact, channel);
         }
 
         if (contact != null) {
-            openConversationFragment(contact, conversationId);
+            openConversationFragment(contact, conversationId, searchString);
         }
 
         if (channel != null) {
-            openConversationFragment(channel, conversationId);
+            openConversationFragment(channel, conversationId, searchString);
         }
         String productTopicId = intent.getStringExtra(ConversationUIService.PRODUCT_TOPIC_ID);
         String productImageUrl = intent.getStringExtra(ConversationUIService.PRODUCT_IMAGE_URL);
@@ -807,7 +880,7 @@ public void reconnectMQTT() {
         try {
             if (((MobiComKitActivityInterface) fragmentActivity).getRetryCount() <= 3) {
                 if (Utils.isInternetAvailable(fragmentActivity)) {
-                    Log.i(TAG, "Reconnecting to mqtt.");
+                    Utils.printLog(fragmentActivity,TAG, "Reconnecting to mqtt.");
                     ((MobiComKitActivityInterface) fragmentActivity).retry();
                     Intent intent = new Intent(fragmentActivity, ApplozicMqttIntentService.class);
                     intent.putExtra(ApplozicMqttIntentService.SUBSCRIBE, true);
@@ -823,73 +896,58 @@ public void sendLocation(String position) {
         getConversationFragment().sendMessage(position, Message.ContentType.LOCATION.getValue());
     }
 
-    public class DownloadNNumberOfUserAsync extends AsyncTask<Void, Integer, Long> {
-
-        private Message message;
-        private UserService userService;
-        private ProgressDialog progressDialog;
-        private String messageContent;
-        private int nNumberOfUsers;
-        private String[] userIdArray;
-        boolean callForRegistered;
-        private RegisteredUsersApiResponse registeredUsersApiResponse;
+    public void processLoadUsers(boolean isRegisteredUserCall, final Message message, final String messageContent, int totalRegisteredUsers, int totalOnlineUser) {
 
-        public DownloadNNumberOfUserAsync(int nNumberOfUsers, Message message, String messageContent) {
-            this.message = message;
-            this.messageContent = messageContent;
-            this.nNumberOfUsers = nNumberOfUsers;
-            this.userService = UserService.getInstance(fragmentActivity);
-        }
-
-        public DownloadNNumberOfUserAsync(int numberOfUsersToFetch, Message message, String messageContent, boolean callForRegistered) {
-            this.callForRegistered = callForRegistered;
-            this.message = message;
-            this.messageContent = messageContent;
-            this.nNumberOfUsers = numberOfUsersToFetch;
-            this.userService = UserService.getInstance(fragmentActivity);
-        }
+        final ProgressDialog progressDialog = ProgressDialog.show(fragmentActivity, "",
+                fragmentActivity.getString(R.string.applozic_contacts_loading_info), true);
 
-        @Override
-        protected void onPreExecute() {
-            super.onPreExecute();
-            progressDialog = ProgressDialog.show(fragmentActivity, "",
-                    fragmentActivity.getString(R.string.applozic_contacts_loading_info), true);
-        }
-
-        @Override
-        protected Long doInBackground(Void... params) {
-            if (callForRegistered) {
-                registeredUsersApiResponse = userService.getRegisteredUsersList(0l, nNumberOfUsers);
-            } else {
-                userIdArray = userService.getOnlineUsers(nNumberOfUsers);
-            }
-            return null;
-        }
+        RegisteredUsersAsyncTask.TaskListener usersAsyncTaskTaskListener = new RegisteredUsersAsyncTask.TaskListener() {
+            @Override
+            public void onSuccess(RegisteredUsersApiResponse registeredUsersApiResponse, String[] userIdArray) {
+                if (progressDialog != null && progressDialog.isShowing()) {
+                    progressDialog.dismiss();
+                }
+                try {
+                    if (registeredUsersApiResponse != null) {
+                        userPreference.setWasContactListServerCallAlreadyDone(true);
+                        Intent intent = new Intent(fragmentActivity, MobiComKitPeopleActivity.class);
+                        startContactActivityForResult(intent, message, messageContent, null);
+                    }
 
-        @Override
-        protected void onPostExecute(Long aLong) {
-            super.onPostExecute(aLong);
-            if (progressDialog != null && progressDialog.isShowing()) {
-                progressDialog.dismiss();
+                    if (userIdArray != null && userIdArray.length > 0) {
+                        Intent intent = new Intent(fragmentActivity, MobiComKitPeopleActivity.class);
+                        startContactActivityForResult(intent, message, messageContent, userIdArray);
+                    }
+                } catch (Exception e) {
+                    e.printStackTrace();
+                }
             }
 
-            if (!Utils.isInternetAvailable(fragmentActivity)) {
-                Toast toast = Toast.makeText(fragmentActivity, fragmentActivity.getString(R.string.applozic_contacts_loading_error), Toast.LENGTH_SHORT);
+            @Override
+            public void onFailure(RegisteredUsersApiResponse registeredUsersApiResponse, String[] userIdArray, Exception exception) {
+                if (progressDialog != null && progressDialog.isShowing()) {
+                    progressDialog.dismiss();
+                }
+                String error = fragmentActivity.getString(Utils.isInternetAvailable(fragmentActivity) ? R.string.applozic_server_error : R.string.you_need_network_access_for_block_or_unblock);
+                Toast toast = Toast.makeText(fragmentActivity, error, Toast.LENGTH_LONG);
                 toast.setGravity(Gravity.CENTER, 0, 0);
                 toast.show();
             }
-            if (userIdArray != null && userIdArray.length > 0) {
-                Intent intent = new Intent(fragmentActivity, MobiComKitPeopleActivity.class);
-                startContactActivityForResult(intent, message, messageContent, userIdArray);
-            }
 
-            if (registeredUsersApiResponse != null) {
-                userPreference.setWasContactListServerCallAlreadyDone(true);
-                Intent intent = new Intent(fragmentActivity, MobiComKitPeopleActivity.class);
-                startContactActivityForResult(intent, message, messageContent, null);
-            }
+            @Override
+            public void onCompletion() {
 
+            }
+        };
+        RegisteredUsersAsyncTask usersAsyncTask;
+        if (isRegisteredUserCall) {
+            usersAsyncTask = new RegisteredUsersAsyncTask(fragmentActivity, usersAsyncTaskTaskListener, totalRegisteredUsers, 0l, message, messageContent, true);
+        } else {
+            usersAsyncTask = new RegisteredUsersAsyncTask(fragmentActivity, usersAsyncTaskTaskListener, totalOnlineUser, message, messageContent);
         }
+        usersAsyncTask.execute((Void) null);
+
     }
 
-}
\ No newline at end of file
+
+}
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/DeleteConversationAsyncTask.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/DeleteConversationAsyncTask.java
index c80b73fd..9e7e4725 100755
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/DeleteConversationAsyncTask.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/DeleteConversationAsyncTask.java
@@ -20,7 +20,7 @@
     private Message message;
     private Contact contact;
     private MobiComConversationService conversationService;
-    private boolean isThreaddelete=false;
+    private boolean isThreaddelete = false;
     private ProgressDialog progressDialog;
     private Context context;
     private Channel channel;
@@ -33,9 +33,9 @@ public DeleteConversationAsyncTask(MobiComConversationService conversationServic
         this.conversationService = conversationService;
     }
 
-    public DeleteConversationAsyncTask( MobiComConversationService conversationService,Contact contact,Channel channel,Integer conversationId,Context context){
+    public DeleteConversationAsyncTask(MobiComConversationService conversationService, Contact contact, Channel channel, Integer conversationId, Context context) {
         this.contact = contact;
-        this.context= context;
+        this.context = context;
         this.channel = channel;
         this.conversationId = conversationId;
         this.conversationService = conversationService;
@@ -46,7 +46,7 @@ public DeleteConversationAsyncTask( MobiComConversationService conversationServi
     @Override
     protected void onPreExecute() {
         super.onPreExecute();
-        if( isThreaddelete ){
+        if (isThreaddelete) {
             progressDialog = ProgressDialog.show(context, "",
                     context.getString(R.string.delete_thread_text), true);
         }
@@ -54,9 +54,9 @@ protected void onPreExecute() {
 
     @Override
     protected Long doInBackground(Void... params) {
-        if(isThreaddelete){
-            conversationService.deleteSync(contact,channel,conversationId);
-        }else{
+        if (isThreaddelete) {
+            conversationService.deleteSync(contact, channel, conversationId);
+        } else {
             conversationService.deleteMessage(message, contact);
         }
 
@@ -66,7 +66,7 @@ protected Long doInBackground(Void... params) {
     @Override
     protected void onPostExecute(Long aLong) {
         super.onPostExecute(aLong);
-        if(progressDialog!=null && progressDialog.isShowing()){
+        if (progressDialog != null && progressDialog.isShowing()) {
             progressDialog.dismiss();
         }
     }
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/MobiComKitBroadcastReceiver.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/MobiComKitBroadcastReceiver.java
index 01098109..282ada40 100755
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/MobiComKitBroadcastReceiver.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/MobiComKitBroadcastReceiver.java
@@ -5,7 +5,6 @@
 import android.content.Intent;
 import android.support.v4.app.FragmentActivity;
 import android.text.TextUtils;
-import android.util.Log;
 
 import com.applozic.mobicomkit.api.MobiComKitConstants;
 import com.applozic.mobicomkit.api.conversation.Message;
@@ -14,7 +13,7 @@
 import com.applozic.mobicomkit.contact.BaseContactService;
 import com.applozic.mobicomkit.uiwidgets.R;
 import com.applozic.mobicomkit.uiwidgets.instruction.InstructionUtil;
-
+import com.applozic.mobicommons.commons.core.utils.Utils;
 import com.applozic.mobicommons.json.GsonUtils;
 import com.applozic.mobicommons.people.contact.Contact;
 
@@ -41,7 +40,7 @@ public void onReceive(Context context, Intent intent) {
         if (!TextUtils.isEmpty(messageJson)) {
             message = (Message) GsonUtils.getObjectFromJson(messageJson, Message.class);
         }
-        Log.i(TAG, "Received broadcast, action: " + action + ", message: " + message);
+        Utils.printLog(context,TAG, "Received broadcast, action: " + action + ", message: " + message);
 
         if (message != null && !message.isSentToMany()) {
             conversationUIService.addMessage(message);
@@ -60,14 +59,9 @@ public void onReceive(Context context, Intent intent) {
 
         if (BroadcastService.INTENT_ACTIONS.INSTRUCTION.toString().equals(action)) {
             InstructionUtil.showInstruction(context, intent.getIntExtra("resId", -1), intent.getBooleanExtra("actionable", false), R.color.instruction_color);
-        } else if (BroadcastService.INTENT_ACTIONS.UPDATE_NAME.toString().equals(action)) {
-            Integer channelKey = intent.getIntExtra("channelKey",0);
-            if(channelKey == 0){
-                channelKey = null;
-            }
-            conversationUIService.updateName(channelKey);
-        }
-        else if (BroadcastService.INTENT_ACTIONS.FIRST_TIME_SYNC_COMPLETE.toString().equals(action)) {
+        } else if (BroadcastService.INTENT_ACTIONS.UPDATE_CHANNEL_NAME.toString().equals(action)) {
+            conversationUIService.updateChannelName();
+        } else if (BroadcastService.INTENT_ACTIONS.FIRST_TIME_SYNC_COMPLETE.toString().equals(action)) {
             conversationUIService.downloadConversations(true);
         } else if (BroadcastService.INTENT_ACTIONS.LOAD_MORE.toString().equals(action)) {
             conversationUIService.setLoadMore(intent.getBooleanExtra("loadMore", true));
@@ -90,7 +84,7 @@ else if (BroadcastService.INTENT_ACTIONS.FIRST_TIME_SYNC_COMPLETE.toString().equ
             Integer channelKey = intent.getIntExtra("channelKey", 0);
             String response = intent.getStringExtra("response");
             Contact contact = null;
-            if(contactNumber != null){
+            if (contactNumber != null) {
                 contact = baseContactService.getContactById(contactNumber);
             }
             conversationUIService.deleteConversation(contact, channelKey, response);
@@ -108,10 +102,16 @@ else if (BroadcastService.INTENT_ACTIONS.FIRST_TIME_SYNC_COMPLETE.toString().equ
             conversationUIService.updateLastSeenStatus(intent.getStringExtra("contactId"));
         } else if (BroadcastService.INTENT_ACTIONS.MQTT_DISCONNECTED.toString().equals(action)) {
             conversationUIService.reconnectMQTT();
-        } else if(BroadcastService.INTENT_ACTIONS.CHANNEL_SYNC.toString().equals(action)){
+        } else if (BroadcastService.INTENT_ACTIONS.CHANNEL_SYNC.toString().equals(action)) {
             conversationUIService.updateChannelSync();
-        }else  if(BroadcastService.INTENT_ACTIONS.UPDATE_TITLE_SUBTITLE.toString().equals(action)){
+        } else if (BroadcastService.INTENT_ACTIONS.UPDATE_TITLE_SUBTITLE.toString().equals(action)) {
             conversationUIService.updateTitleAndSubtitle();
+        } else if (BroadcastService.INTENT_ACTIONS.CONVERSATION_READ.toString().equals(action)) {
+            String currentId = intent.getStringExtra("currentId");
+            boolean isGroup = intent.getBooleanExtra("isGroup", false);
+            conversationUIService.updateConversationRead(currentId, isGroup);
+        } else if (BroadcastService.INTENT_ACTIONS.UPDATE_USER_DETAIL.toString().equals(action)) {
+            conversationUIService.updateUserInfo(intent.getStringExtra("contactId"));
         }
     }
 }
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/MultimediaOptionsGridView.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/MultimediaOptionsGridView.java
index 18217fa7..95259208 100755
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/MultimediaOptionsGridView.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/MultimediaOptionsGridView.java
@@ -1,78 +1,62 @@
 package com.applozic.mobicomkit.uiwidgets.conversation;
 
-import android.content.Intent;
 import android.net.Uri;
-import android.provider.ContactsContract;
-import android.provider.MediaStore;
 import android.support.v4.app.FragmentActivity;
 import android.view.View;
 import android.widget.AdapterView;
 import android.widget.GridView;
 import android.widget.PopupWindow;
 
-import com.applozic.mobicomkit.api.attachment.FileClientService;
+import com.applozic.mobicomkit.uiwidgets.R;
 import com.applozic.mobicomkit.uiwidgets.conversation.activity.ConversationActivity;
-import com.applozic.mobicomkit.uiwidgets.conversation.activity.MobiComAttachmentSelectorActivity;
-import com.applozic.mobicomkit.uiwidgets.conversation.fragment.MultimediaOptionFragment;
 
-import java.io.File;
-import java.text.SimpleDateFormat;
-import java.util.Date;
+import java.util.List;
 
 /**
  * Created by reytum on 19/3/16.
  */
 public class MultimediaOptionsGridView {
-    private Uri capturedImageUri;
     public PopupWindow showPopup;
     FragmentActivity context;
     GridView multimediaOptions;
+    private Uri capturedImageUri;
 
     public MultimediaOptionsGridView(FragmentActivity context, GridView multimediaOptions) {
         this.context = context;
         this.multimediaOptions = multimediaOptions;
     }
 
-    public void setMultimediaClickListener() {
+    public void setMultimediaClickListener(final List<String> keys) {
         capturedImageUri = null;
+
         multimediaOptions.setOnItemClickListener(new AdapterView.OnItemClickListener() {
             @Override
             public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
 
-                switch (position) {
-                    case 0:
-                        ((ConversationActivity) context).processLocation();
-                        break;
-                    case 1:
-                        ((ConversationActivity) context).isTakePhoto(true);
-                        ((ConversationActivity) context).processCameraAction();
-
-                        break;
-                    case 2:
-                        ((ConversationActivity) context).isAttachment(true);
-                        ((ConversationActivity) context).processAttachment();
-                        break;
-                    case 3:
-                        ((ConversationActivity) context).showAudioRecordingDialog();
-                        break;
-                    case 4:
-                        ((ConversationActivity) context).isTakePhoto(false);
-                        ((ConversationActivity) context).processVideoRecording();
-                        break;
-                    case 5:
-                        //Sharing contact.
-                        ((ConversationActivity) context).processContact();
-                        break;
-
-                    case 6:
-                        new ConversationUIService(context).sendPriceMessage();
-                        break;
-                    default:
-
-                }
-                multimediaOptions.setVisibility(View.GONE);
+                executeMethod(keys.get(position));
             }
         });
     }
 
-}
+    public void executeMethod(String key) {
+        if (key.equals(context.getResources().getString(R.string.location))) {
+            ((ConversationActivity) context).processLocation();
+        } else if (key.equals(context.getString(R.string.camera))) {
+            ((ConversationActivity) context).isTakePhoto(true);
+            ((ConversationActivity) context).processCameraAction();
+        } else if (key.equals(context.getString(R.string.file))) {
+            ((ConversationActivity) context).isAttachment(true);
+            ((ConversationActivity) context).processAttachment();
+        } else if (key.equals(context.getString(R.string.audio))) {
+            ((ConversationActivity) context).showAudioRecordingDialog();
+        } else if (key.equals(context.getString(R.string.video))) {
+            ((ConversationActivity) context).isTakePhoto(false);
+            ((ConversationActivity) context).processVideoRecording();
+        } else if (key.equals(context.getString(R.string.contact))) {
+            ((ConversationActivity) context).processContact();
+        } else if (key.equals(context.getString(R.string.contact))) {
+            new ConversationUIService(context).sendPriceMessage();
+        }
+        multimediaOptions.setVisibility(View.GONE);
+    }
+}
\ No newline at end of file
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/TouchImageView.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/TouchImageView.java
new file mode 100644
index 00000000..8bee3b7c
--- /dev/null
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/TouchImageView.java
@@ -0,0 +1,1293 @@
+package com.applozic.mobicomkit.uiwidgets.conversation;
+
+/*
+ * TouchImageView.java
+ * By: Michael Ortiz
+ * Updated By: Patrick Lackemacher
+ * Updated By: Babay88
+ * Updated By: @ipsilondev
+ * Updated By: hank-cp
+ * Updated By: singpolyma
+ * -------------------
+ * Extends Android ImageView to include pinch zooming, panning, fling and double tap zoom.
+ */
+
+
+import android.annotation.TargetApi;
+import android.content.Context;
+import android.content.res.Configuration;
+import android.graphics.Bitmap;
+import android.graphics.Canvas;
+import android.graphics.Matrix;
+import android.graphics.PointF;
+import android.graphics.RectF;
+import android.graphics.drawable.Drawable;
+import android.net.Uri;
+import android.os.Build.VERSION;
+import android.os.Build.VERSION_CODES;
+import android.os.Bundle;
+import android.os.Parcelable;
+import android.util.AttributeSet;
+import android.util.Log;
+import android.view.GestureDetector;
+import android.view.MotionEvent;
+import android.view.ScaleGestureDetector;
+import android.view.View;
+import android.view.animation.AccelerateDecelerateInterpolator;
+import android.widget.ImageView;
+import android.widget.OverScroller;
+import android.widget.Scroller;
+
+public class TouchImageView extends ImageView {
+
+    private static final String DEBUG = "DEBUG";
+
+    //
+    // SuperMin and SuperMax multipliers. Determine how much the image can be
+    // zoomed below or above the zoom boundaries, before animating back to the
+    // min/max zoom boundary.
+    //
+    private static final float SUPER_MIN_MULTIPLIER = .75f;
+    private static final float SUPER_MAX_MULTIPLIER = 1.25f;
+
+    //
+    // Scale of image ranges from minScale to maxScale, where minScale == 1
+    // when the image is stretched to fit view.
+    //
+    private float normalizedScale;
+
+    //
+    // Matrix applied to image. MSCALE_X and MSCALE_Y should always be equal.
+    // MTRANS_X and MTRANS_Y are the other values used. prevMatrix is the matrix
+    // saved prior to the screen rotating.
+    //
+    private Matrix matrix, prevMatrix;
+
+    private static enum State {NONE, DRAG, ZOOM, FLING, ANIMATE_ZOOM}
+
+    ;
+    private State state;
+
+    private float minScale;
+    private float maxScale;
+    private float superMinScale;
+    private float superMaxScale;
+    private float[] m;
+
+    private Context context;
+    private Fling fling;
+
+    private ScaleType mScaleType;
+
+    private boolean imageRenderedAtLeastOnce;
+    private boolean onDrawReady;
+
+    private ZoomVariables delayedZoomVariables;
+
+    //
+    // Size of view and previous view size (ie before rotation)
+    //
+    private int viewWidth, viewHeight, prevViewWidth, prevViewHeight;
+
+    //
+    // Size of image when it is stretched to fit view. Before and After rotation.
+    //
+    private float matchViewWidth, matchViewHeight, prevMatchViewWidth, prevMatchViewHeight;
+
+    private ScaleGestureDetector mScaleDetector;
+    private GestureDetector mGestureDetector;
+    private GestureDetector.OnDoubleTapListener doubleTapListener = null;
+    private OnTouchListener userTouchListener = null;
+    private OnTouchImageViewListener touchImageViewListener = null;
+
+    public TouchImageView(Context context) {
+        super(context);
+        sharedConstructing(context);
+    }
+
+    public TouchImageView(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        sharedConstructing(context);
+    }
+
+    public TouchImageView(Context context, AttributeSet attrs, int defStyle) {
+        super(context, attrs, defStyle);
+        sharedConstructing(context);
+    }
+
+    private void sharedConstructing(Context context) {
+        super.setClickable(true);
+        this.context = context;
+        mScaleDetector = new ScaleGestureDetector(context, new ScaleListener());
+        mGestureDetector = new GestureDetector(context, new GestureListener());
+        matrix = new Matrix();
+        prevMatrix = new Matrix();
+        m = new float[9];
+        normalizedScale = 1;
+        if (mScaleType == null) {
+            mScaleType = ScaleType.FIT_CENTER;
+        }
+        minScale = 1;
+        maxScale = 3;
+        superMinScale = SUPER_MIN_MULTIPLIER * minScale;
+        superMaxScale = SUPER_MAX_MULTIPLIER * maxScale;
+        setImageMatrix(matrix);
+        setScaleType(ScaleType.MATRIX);
+        setState(State.NONE);
+        onDrawReady = false;
+        super.setOnTouchListener(new PrivateOnTouchListener());
+    }
+
+    @Override
+    public void setOnTouchListener(OnTouchListener l) {
+        userTouchListener = l;
+    }
+
+    public void setOnTouchImageViewListener(OnTouchImageViewListener l) {
+        touchImageViewListener = l;
+    }
+
+    public void setOnDoubleTapListener(GestureDetector.OnDoubleTapListener l) {
+        doubleTapListener = l;
+    }
+
+    @Override
+    public void setImageResource(int resId) {
+        super.setImageResource(resId);
+        savePreviousImageValues();
+        fitImageToView();
+    }
+
+    @Override
+    public void setImageBitmap(Bitmap bm) {
+        super.setImageBitmap(bm);
+        savePreviousImageValues();
+        fitImageToView();
+    }
+
+    @Override
+    public void setImageDrawable(Drawable drawable) {
+        super.setImageDrawable(drawable);
+        savePreviousImageValues();
+        fitImageToView();
+    }
+
+    @Override
+    public void setImageURI(Uri uri) {
+        super.setImageURI(uri);
+        savePreviousImageValues();
+        fitImageToView();
+    }
+
+    @Override
+    public void setScaleType(ScaleType type) {
+        if (type == ScaleType.FIT_START || type == ScaleType.FIT_END) {
+            throw new UnsupportedOperationException("TouchImageView does not support FIT_START or FIT_END");
+        }
+        if (type == ScaleType.MATRIX) {
+            super.setScaleType(ScaleType.MATRIX);
+
+        } else {
+            mScaleType = type;
+            if (onDrawReady) {
+                //
+                // If the image is already rendered, scaleType has been called programmatically
+                // and the TouchImageView should be updated with the new scaleType.
+                //
+                setZoom(this);
+            }
+        }
+    }
+
+    @Override
+    public ScaleType getScaleType() {
+        return mScaleType;
+    }
+
+    /**
+     * Returns false if image is in initial, unzoomed state. False, otherwise.
+     *
+     * @return true if image is zoomed
+     */
+    public boolean isZoomed() {
+        return normalizedScale != 1;
+    }
+
+    /**
+     * Return a Rect representing the zoomed image.
+     *
+     * @return rect representing zoomed image
+     */
+    public RectF getZoomedRect() {
+        if (mScaleType == ScaleType.FIT_XY) {
+            throw new UnsupportedOperationException("getZoomedRect() not supported with FIT_XY");
+        }
+        PointF topLeft = transformCoordTouchToBitmap(0, 0, true);
+        PointF bottomRight = transformCoordTouchToBitmap(viewWidth, viewHeight, true);
+
+        float w = getDrawable().getIntrinsicWidth();
+        float h = getDrawable().getIntrinsicHeight();
+        return new RectF(topLeft.x / w, topLeft.y / h, bottomRight.x / w, bottomRight.y / h);
+    }
+
+    /**
+     * Save the current matrix and view dimensions
+     * in the prevMatrix and prevView variables.
+     */
+    private void savePreviousImageValues() {
+        if (matrix != null && viewHeight != 0 && viewWidth != 0) {
+            matrix.getValues(m);
+            prevMatrix.setValues(m);
+            prevMatchViewHeight = matchViewHeight;
+            prevMatchViewWidth = matchViewWidth;
+            prevViewHeight = viewHeight;
+            prevViewWidth = viewWidth;
+        }
+    }
+
+    @Override
+    public Parcelable onSaveInstanceState() {
+        Bundle bundle = new Bundle();
+        bundle.putParcelable("instanceState", super.onSaveInstanceState());
+        bundle.putFloat("saveScale", normalizedScale);
+        bundle.putFloat("matchViewHeight", matchViewHeight);
+        bundle.putFloat("matchViewWidth", matchViewWidth);
+        bundle.putInt("viewWidth", viewWidth);
+        bundle.putInt("viewHeight", viewHeight);
+        matrix.getValues(m);
+        bundle.putFloatArray("matrix", m);
+        bundle.putBoolean("imageRendered", imageRenderedAtLeastOnce);
+        return bundle;
+    }
+
+    @Override
+    public void onRestoreInstanceState(Parcelable state) {
+        if (state instanceof Bundle) {
+            Bundle bundle = (Bundle) state;
+            normalizedScale = bundle.getFloat("saveScale");
+            m = bundle.getFloatArray("matrix");
+            prevMatrix.setValues(m);
+            prevMatchViewHeight = bundle.getFloat("matchViewHeight");
+            prevMatchViewWidth = bundle.getFloat("matchViewWidth");
+            prevViewHeight = bundle.getInt("viewHeight");
+            prevViewWidth = bundle.getInt("viewWidth");
+            imageRenderedAtLeastOnce = bundle.getBoolean("imageRendered");
+            super.onRestoreInstanceState(bundle.getParcelable("instanceState"));
+            return;
+        }
+
+        super.onRestoreInstanceState(state);
+    }
+
+    @Override
+    protected void onDraw(Canvas canvas) {
+        onDrawReady = true;
+        imageRenderedAtLeastOnce = true;
+        if (delayedZoomVariables != null) {
+            setZoom(delayedZoomVariables.scale, delayedZoomVariables.focusX, delayedZoomVariables.focusY, delayedZoomVariables.scaleType);
+            delayedZoomVariables = null;
+        }
+        super.onDraw(canvas);
+    }
+
+    @Override
+    public void onConfigurationChanged(Configuration newConfig) {
+        super.onConfigurationChanged(newConfig);
+        savePreviousImageValues();
+    }
+
+    /**
+     * Get the max zoom multiplier.
+     *
+     * @return max zoom multiplier.
+     */
+    public float getMaxZoom() {
+        return maxScale;
+    }
+
+    /**
+     * Set the max zoom multiplier. Default value: 3.
+     *
+     * @param max max zoom multiplier.
+     */
+    public void setMaxZoom(float max) {
+        maxScale = max;
+        superMaxScale = SUPER_MAX_MULTIPLIER * maxScale;
+    }
+
+    /**
+     * Get the min zoom multiplier.
+     *
+     * @return min zoom multiplier.
+     */
+    public float getMinZoom() {
+        return minScale;
+    }
+
+    /**
+     * Get the current zoom. This is the zoom relative to the initial
+     * scale, not the original resource.
+     *
+     * @return current zoom multiplier.
+     */
+    public float getCurrentZoom() {
+        return normalizedScale;
+    }
+
+    /**
+     * Set the min zoom multiplier. Default value: 1.
+     *
+     * @param min min zoom multiplier.
+     */
+    public void setMinZoom(float min) {
+        minScale = min;
+        superMinScale = SUPER_MIN_MULTIPLIER * minScale;
+    }
+
+    /**
+     * Reset zoom and translation to initial state.
+     */
+    public void resetZoom() {
+        normalizedScale = 1;
+        fitImageToView();
+    }
+
+    /**
+     * Set zoom to the specified scale. Image will be centered by default.
+     *
+     * @param scale
+     */
+    public void setZoom(float scale) {
+        setZoom(scale, 0.5f, 0.5f);
+    }
+
+    /**
+     * Set zoom to the specified scale. Image will be centered around the point
+     * (focusX, focusY). These floats range from 0 to 1 and denote the focus point
+     * as a fraction from the left and top of the view. For example, the top left
+     * corner of the image would be (0, 0). And the bottom right corner would be (1, 1).
+     *
+     * @param scale
+     * @param focusX
+     * @param focusY
+     */
+    public void setZoom(float scale, float focusX, float focusY) {
+        setZoom(scale, focusX, focusY, mScaleType);
+    }
+
+    /**
+     * Set zoom to the specified scale. Image will be centered around the point
+     * (focusX, focusY). These floats range from 0 to 1 and denote the focus point
+     * as a fraction from the left and top of the view. For example, the top left
+     * corner of the image would be (0, 0). And the bottom right corner would be (1, 1).
+     *
+     * @param scale
+     * @param focusX
+     * @param focusY
+     * @param scaleType
+     */
+    public void setZoom(float scale, float focusX, float focusY, ScaleType scaleType) {
+        //
+        // setZoom can be called before the image is on the screen, but at this point,
+        // image and view sizes have not yet been calculated in onMeasure. Thus, we should
+        // delay calling setZoom until the view has been measured.
+        //
+        if (!onDrawReady) {
+            delayedZoomVariables = new ZoomVariables(scale, focusX, focusY, scaleType);
+            return;
+        }
+
+        if (scaleType != mScaleType) {
+            setScaleType(scaleType);
+        }
+        resetZoom();
+        scaleImage(scale, viewWidth / 2, viewHeight / 2, true);
+        matrix.getValues(m);
+        m[Matrix.MTRANS_X] = -((focusX * getImageWidth()) - (viewWidth * 0.5f));
+        m[Matrix.MTRANS_Y] = -((focusY * getImageHeight()) - (viewHeight * 0.5f));
+        matrix.setValues(m);
+        fixTrans();
+        setImageMatrix(matrix);
+    }
+
+    /**
+     * Set zoom parameters equal to another TouchImageView. Including scale, position,
+     * and ScaleType.
+     *
+     *
+     */
+    public void setZoom(TouchImageView img) {
+        PointF center = img.getScrollPosition();
+        setZoom(img.getCurrentZoom(), center.x, center.y, img.getScaleType());
+    }
+
+    /**
+     * Return the point at the center of the zoomed image. The PointF coordinates range
+     * in value between 0 and 1 and the focus point is denoted as a fraction from the left
+     * and top of the view. For example, the top left corner of the image would be (0, 0).
+     * And the bottom right corner would be (1, 1).
+     *
+     * @return PointF representing the scroll position of the zoomed image.
+     */
+    public PointF getScrollPosition() {
+        Drawable drawable = getDrawable();
+        if (drawable == null) {
+            return null;
+        }
+        int drawableWidth = drawable.getIntrinsicWidth();
+        int drawableHeight = drawable.getIntrinsicHeight();
+
+        PointF point = transformCoordTouchToBitmap(viewWidth / 2, viewHeight / 2, true);
+        point.x /= drawableWidth;
+        point.y /= drawableHeight;
+        return point;
+    }
+
+    /**
+     * Set the focus point of the zoomed image. The focus points are denoted as a fraction from the
+     * left and top of the view. The focus points can range in value between 0 and 1.
+     *
+     * @param focusX
+     * @param focusY
+     */
+    public void setScrollPosition(float focusX, float focusY) {
+        setZoom(normalizedScale, focusX, focusY);
+    }
+
+    /**
+     * Performs boundary checking and fixes the image matrix if it
+     * is out of bounds.
+     */
+    private void fixTrans() {
+        matrix.getValues(m);
+        float transX = m[Matrix.MTRANS_X];
+        float transY = m[Matrix.MTRANS_Y];
+
+        float fixTransX = getFixTrans(transX, viewWidth, getImageWidth());
+        float fixTransY = getFixTrans(transY, viewHeight, getImageHeight());
+
+        if (fixTransX != 0 || fixTransY != 0) {
+            matrix.postTranslate(fixTransX, fixTransY);
+        }
+    }
+
+    /**
+     * When transitioning from zooming from focus to zoom from center (or vice versa)
+     * the image can become unaligned within the view. This is apparent when zooming
+     * quickly. When the content size is less than the view size, the content will often
+     * be centered incorrectly within the view. fixScaleTrans first calls fixTrans() and
+     * then makes sure the image is centered correctly within the view.
+     */
+    private void fixScaleTrans() {
+        fixTrans();
+        matrix.getValues(m);
+        if (getImageWidth() < viewWidth) {
+            m[Matrix.MTRANS_X] = (viewWidth - getImageWidth()) / 2;
+        }
+
+        if (getImageHeight() < viewHeight) {
+            m[Matrix.MTRANS_Y] = (viewHeight - getImageHeight()) / 2;
+        }
+        matrix.setValues(m);
+    }
+
+    private float getFixTrans(float trans, float viewSize, float contentSize) {
+        float minTrans, maxTrans;
+
+        if (contentSize <= viewSize) {
+            minTrans = 0;
+            maxTrans = viewSize - contentSize;
+
+        } else {
+            minTrans = viewSize - contentSize;
+            maxTrans = 0;
+        }
+
+        if (trans < minTrans)
+            return -trans + minTrans;
+        if (trans > maxTrans)
+            return -trans + maxTrans;
+        return 0;
+    }
+
+    private float getFixDragTrans(float delta, float viewSize, float contentSize) {
+        if (contentSize <= viewSize) {
+            return 0;
+        }
+        return delta;
+    }
+
+    private float getImageWidth() {
+        return matchViewWidth * normalizedScale;
+    }
+
+    private float getImageHeight() {
+        return matchViewHeight * normalizedScale;
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        Drawable drawable = getDrawable();
+        if (drawable == null || drawable.getIntrinsicWidth() == 0 || drawable.getIntrinsicHeight() == 0) {
+            setMeasuredDimension(0, 0);
+            return;
+        }
+
+        int drawableWidth = drawable.getIntrinsicWidth();
+        int drawableHeight = drawable.getIntrinsicHeight();
+        int widthSize = MeasureSpec.getSize(widthMeasureSpec);
+        int widthMode = MeasureSpec.getMode(widthMeasureSpec);
+        int heightSize = MeasureSpec.getSize(heightMeasureSpec);
+        int heightMode = MeasureSpec.getMode(heightMeasureSpec);
+        viewWidth = setViewSize(widthMode, widthSize, drawableWidth);
+        viewHeight = setViewSize(heightMode, heightSize, drawableHeight);
+
+        //
+        // Set view dimensions
+        //
+        setMeasuredDimension(viewWidth, viewHeight);
+
+        //
+        // Fit content within view
+        //
+        fitImageToView();
+    }
+
+    /**
+     * If the normalizedScale is equal to 1, then the image is made to fit the screen. Otherwise,
+     * it is made to fit the screen according to the dimensions of the previous image matrix. This
+     * allows the image to maintain its zoom after rotation.
+     */
+    private void fitImageToView() {
+        Drawable drawable = getDrawable();
+        if (drawable == null || drawable.getIntrinsicWidth() == 0 || drawable.getIntrinsicHeight() == 0) {
+            return;
+        }
+        if (matrix == null || prevMatrix == null) {
+            return;
+        }
+
+        int drawableWidth = drawable.getIntrinsicWidth();
+        int drawableHeight = drawable.getIntrinsicHeight();
+
+        //
+        // Scale image for view
+        //
+        float scaleX = (float) viewWidth / drawableWidth;
+        float scaleY = (float) viewHeight / drawableHeight;
+
+        switch (mScaleType) {
+            case CENTER:
+                scaleX = scaleY = 1;
+                break;
+
+            case CENTER_CROP:
+                scaleX = scaleY = Math.max(scaleX, scaleY);
+                break;
+
+            case CENTER_INSIDE:
+                scaleX = scaleY = Math.min(1, Math.min(scaleX, scaleY));
+
+            case FIT_CENTER:
+                scaleX = scaleY = Math.min(scaleX, scaleY);
+                break;
+
+            case FIT_XY:
+                break;
+
+            default:
+                //
+                // FIT_START and FIT_END not supported
+                //
+                throw new UnsupportedOperationException("TouchImageView does not support FIT_START or FIT_END");
+
+        }
+
+        //
+        // Center the image
+        //
+        float redundantXSpace = viewWidth - (scaleX * drawableWidth);
+        float redundantYSpace = viewHeight - (scaleY * drawableHeight);
+        matchViewWidth = viewWidth - redundantXSpace;
+        matchViewHeight = viewHeight - redundantYSpace;
+        if (!isZoomed() && !imageRenderedAtLeastOnce) {
+            //
+            // Stretch and center image to fit view
+            //
+            matrix.setScale(scaleX, scaleY);
+            matrix.postTranslate(redundantXSpace / 2, redundantYSpace / 2);
+            normalizedScale = 1;
+
+        } else {
+            //
+            // These values should never be 0 or we will set viewWidth and viewHeight
+            // to NaN in translateMatrixAfterRotate. To avoid this, call savePreviousImageValues
+            // to set them equal to the current values.
+            //
+            if (prevMatchViewWidth == 0 || prevMatchViewHeight == 0) {
+                savePreviousImageValues();
+            }
+
+            prevMatrix.getValues(m);
+
+            //
+            // Rescale Matrix after rotation
+            //
+            m[Matrix.MSCALE_X] = matchViewWidth / drawableWidth * normalizedScale;
+            m[Matrix.MSCALE_Y] = matchViewHeight / drawableHeight * normalizedScale;
+
+            //
+            // TransX and TransY from previous matrix
+            //
+            float transX = m[Matrix.MTRANS_X];
+            float transY = m[Matrix.MTRANS_Y];
+
+            //
+            // Width
+            //
+            float prevActualWidth = prevMatchViewWidth * normalizedScale;
+            float actualWidth = getImageWidth();
+            translateMatrixAfterRotate(Matrix.MTRANS_X, transX, prevActualWidth, actualWidth, prevViewWidth, viewWidth, drawableWidth);
+
+            //
+            // Height
+            //
+            float prevActualHeight = prevMatchViewHeight * normalizedScale;
+            float actualHeight = getImageHeight();
+            translateMatrixAfterRotate(Matrix.MTRANS_Y, transY, prevActualHeight, actualHeight, prevViewHeight, viewHeight, drawableHeight);
+
+            //
+            // Set the matrix to the adjusted scale and translate values.
+            //
+            matrix.setValues(m);
+        }
+        fixTrans();
+        setImageMatrix(matrix);
+    }
+
+    /**
+     * Set view dimensions based on layout params
+     *
+     * @param mode
+     * @param size
+     * @param drawableWidth
+     * @return
+     */
+    private int setViewSize(int mode, int size, int drawableWidth) {
+        int viewSize;
+        switch (mode) {
+            case MeasureSpec.EXACTLY:
+                viewSize = size;
+                break;
+
+            case MeasureSpec.AT_MOST:
+                viewSize = Math.min(drawableWidth, size);
+                break;
+
+            case MeasureSpec.UNSPECIFIED:
+                viewSize = drawableWidth;
+                break;
+
+            default:
+                viewSize = size;
+                break;
+        }
+        return viewSize;
+    }
+
+    /**
+     * After rotating, the matrix needs to be translated. This function finds the area of image
+     * which was previously centered and adjusts translations so that is again the center, post-rotation.
+     *
+     * @param axis          Matrix.MTRANS_X or Matrix.MTRANS_Y
+     * @param trans         the value of trans in that axis before the rotation
+     * @param prevImageSize the width/height of the image before the rotation
+     * @param imageSize     width/height of the image after rotation
+     * @param prevViewSize  width/height of view before rotation
+     * @param viewSize      width/height of view after rotation
+     * @param drawableSize  width/height of drawable
+     */
+    private void translateMatrixAfterRotate(int axis, float trans, float prevImageSize, float imageSize, int prevViewSize, int viewSize, int drawableSize) {
+        if (imageSize < viewSize) {
+            //
+            // The width/height of image is less than the view's width/height. Center it.
+            //
+            m[axis] = (viewSize - (drawableSize * m[Matrix.MSCALE_X])) * 0.5f;
+
+        } else if (trans > 0) {
+            //
+            // The image is larger than the view, but was not before rotation. Center it.
+            //
+            m[axis] = -((imageSize - viewSize) * 0.5f);
+
+        } else {
+            //
+            // Find the area of the image which was previously centered in the view. Determine its distance
+            // from the left/top side of the view as a fraction of the entire image's width/height. Use that percentage
+            // to calculate the trans in the new view width/height.
+            //
+            float percentage = (Math.abs(trans) + (0.5f * prevViewSize)) / prevImageSize;
+            m[axis] = -((percentage * imageSize) - (viewSize * 0.5f));
+        }
+    }
+
+    private void setState(State state) {
+        this.state = state;
+    }
+
+    public boolean canScrollHorizontallyFroyo(int direction) {
+        return canScrollHorizontally(direction);
+    }
+
+    @Override
+    public boolean canScrollHorizontally(int direction) {
+        matrix.getValues(m);
+        float x = m[Matrix.MTRANS_X];
+
+        if (getImageWidth() < viewWidth) {
+            return false;
+
+        } else if (x >= -1 && direction < 0) {
+            return false;
+
+        } else if (Math.abs(x) + viewWidth + 1 >= getImageWidth() && direction > 0) {
+            return false;
+        }
+
+        return true;
+    }
+
+    /**
+     * Gesture Listener detects a single click or long click and passes that on
+     * to the view's listener.
+     *
+     * @author Ortiz
+     */
+    private class GestureListener extends GestureDetector.SimpleOnGestureListener {
+
+        @Override
+        public boolean onSingleTapConfirmed(MotionEvent e) {
+            if (doubleTapListener != null) {
+                return doubleTapListener.onSingleTapConfirmed(e);
+            }
+            return performClick();
+        }
+
+        @Override
+        public void onLongPress(MotionEvent e) {
+            performLongClick();
+        }
+
+        @Override
+        public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {
+            if (fling != null) {
+                //
+                // If a previous fling is still active, it should be cancelled so that two flings
+                // are not run simultaenously.
+                //
+                fling.cancelFling();
+            }
+            fling = new Fling((int) velocityX, (int) velocityY);
+            compatPostOnAnimation(fling);
+            return super.onFling(e1, e2, velocityX, velocityY);
+        }
+
+        @Override
+        public boolean onDoubleTap(MotionEvent e) {
+            boolean consumed = false;
+            if (doubleTapListener != null) {
+                consumed = doubleTapListener.onDoubleTap(e);
+            }
+            if (state == State.NONE) {
+                float targetZoom = (normalizedScale == minScale) ? maxScale : minScale;
+                DoubleTapZoom doubleTap = new DoubleTapZoom(targetZoom, e.getX(), e.getY(), false);
+                compatPostOnAnimation(doubleTap);
+                consumed = true;
+            }
+            return consumed;
+        }
+
+        @Override
+        public boolean onDoubleTapEvent(MotionEvent e) {
+            if (doubleTapListener != null) {
+                return doubleTapListener.onDoubleTapEvent(e);
+            }
+            return false;
+        }
+    }
+
+    public interface OnTouchImageViewListener {
+        public void onMove();
+    }
+
+    /**
+     * Responsible for all touch events. Handles the heavy lifting of drag and also sends
+     * touch events to Scale Detector and Gesture Detector.
+     *
+     * @author Ortiz
+     */
+    private class PrivateOnTouchListener implements OnTouchListener {
+
+        //
+        // Remember last point position for dragging
+        //
+        private PointF last = new PointF();
+
+        @Override
+        public boolean onTouch(View v, MotionEvent event) {
+            mScaleDetector.onTouchEvent(event);
+            mGestureDetector.onTouchEvent(event);
+            PointF curr = new PointF(event.getX(), event.getY());
+
+            if (state == State.NONE || state == State.DRAG || state == State.FLING) {
+                switch (event.getAction()) {
+                    case MotionEvent.ACTION_DOWN:
+                        last.set(curr);
+                        if (fling != null)
+                            fling.cancelFling();
+                        setState(State.DRAG);
+                        break;
+
+                    case MotionEvent.ACTION_MOVE:
+                        if (state == State.DRAG) {
+                            float deltaX = curr.x - last.x;
+                            float deltaY = curr.y - last.y;
+                            float fixTransX = getFixDragTrans(deltaX, viewWidth, getImageWidth());
+                            float fixTransY = getFixDragTrans(deltaY, viewHeight, getImageHeight());
+                            matrix.postTranslate(fixTransX, fixTransY);
+                            fixTrans();
+                            last.set(curr.x, curr.y);
+                        }
+                        break;
+
+                    case MotionEvent.ACTION_UP:
+                    case MotionEvent.ACTION_POINTER_UP:
+                        setState(State.NONE);
+                        break;
+                }
+            }
+
+            setImageMatrix(matrix);
+
+            //
+            // User-defined OnTouchListener
+            //
+            if (userTouchListener != null) {
+                userTouchListener.onTouch(v, event);
+            }
+
+            //
+            // OnTouchImageViewListener is set: TouchImageView dragged by user.
+            //
+            if (touchImageViewListener != null) {
+                touchImageViewListener.onMove();
+            }
+
+            //
+            // indicate event was handled
+            //
+            return true;
+        }
+    }
+
+    /**
+     * ScaleListener detects user two finger scaling and scales image.
+     *
+     * @author Ortiz
+     */
+    private class ScaleListener extends ScaleGestureDetector.SimpleOnScaleGestureListener {
+        @Override
+        public boolean onScaleBegin(ScaleGestureDetector detector) {
+            setState(State.ZOOM);
+            return true;
+        }
+
+        @Override
+        public boolean onScale(ScaleGestureDetector detector) {
+            scaleImage(detector.getScaleFactor(), detector.getFocusX(), detector.getFocusY(), true);
+
+            //
+            // OnTouchImageViewListener is set: TouchImageView pinch zoomed by user.
+            //
+            if (touchImageViewListener != null) {
+                touchImageViewListener.onMove();
+            }
+            return true;
+        }
+
+        @Override
+        public void onScaleEnd(ScaleGestureDetector detector) {
+            super.onScaleEnd(detector);
+            setState(State.NONE);
+            boolean animateToZoomBoundary = false;
+            float targetZoom = normalizedScale;
+            if (normalizedScale > maxScale) {
+                targetZoom = maxScale;
+                animateToZoomBoundary = true;
+
+            } else if (normalizedScale < minScale) {
+                targetZoom = minScale;
+                animateToZoomBoundary = true;
+            }
+
+            if (animateToZoomBoundary) {
+                DoubleTapZoom doubleTap = new DoubleTapZoom(targetZoom, viewWidth / 2, viewHeight / 2, true);
+                compatPostOnAnimation(doubleTap);
+            }
+        }
+    }
+
+    private void scaleImage(double deltaScale, float focusX, float focusY, boolean stretchImageToSuper) {
+
+        float lowerScale, upperScale;
+        if (stretchImageToSuper) {
+            lowerScale = superMinScale;
+            upperScale = superMaxScale;
+
+        } else {
+            lowerScale = minScale;
+            upperScale = maxScale;
+        }
+
+        float origScale = normalizedScale;
+        normalizedScale *= deltaScale;
+        if (normalizedScale > upperScale) {
+            normalizedScale = upperScale;
+            deltaScale = upperScale / origScale;
+        } else if (normalizedScale < lowerScale) {
+            normalizedScale = lowerScale;
+            deltaScale = lowerScale / origScale;
+        }
+
+        matrix.postScale((float) deltaScale, (float) deltaScale, focusX, focusY);
+        fixScaleTrans();
+    }
+
+    /**
+     * DoubleTapZoom calls a series of runnables which apply
+     * an animated zoom in/out graphic to the image.
+     *
+     * @author Ortiz
+     */
+    private class DoubleTapZoom implements Runnable {
+
+        private long startTime;
+        private static final float ZOOM_TIME = 500;
+        private float startZoom, targetZoom;
+        private float bitmapX, bitmapY;
+        private boolean stretchImageToSuper;
+        private AccelerateDecelerateInterpolator interpolator = new AccelerateDecelerateInterpolator();
+        private PointF startTouch;
+        private PointF endTouch;
+
+        DoubleTapZoom(float targetZoom, float focusX, float focusY, boolean stretchImageToSuper) {
+            setState(State.ANIMATE_ZOOM);
+            startTime = System.currentTimeMillis();
+            this.startZoom = normalizedScale;
+            this.targetZoom = targetZoom;
+            this.stretchImageToSuper = stretchImageToSuper;
+            PointF bitmapPoint = transformCoordTouchToBitmap(focusX, focusY, false);
+            this.bitmapX = bitmapPoint.x;
+            this.bitmapY = bitmapPoint.y;
+
+            //
+            // Used for translating image during scaling
+            //
+            startTouch = transformCoordBitmapToTouch(bitmapX, bitmapY);
+            endTouch = new PointF(viewWidth / 2, viewHeight / 2);
+        }
+
+        @Override
+        public void run() {
+            float t = interpolate();
+            double deltaScale = calculateDeltaScale(t);
+            scaleImage(deltaScale, bitmapX, bitmapY, stretchImageToSuper);
+            translateImageToCenterTouchPosition(t);
+            fixScaleTrans();
+            setImageMatrix(matrix);
+
+            //
+            // OnTouchImageViewListener is set: double tap runnable updates listener
+            // with every frame.
+            //
+            if (touchImageViewListener != null) {
+                touchImageViewListener.onMove();
+            }
+
+            if (t < 1f) {
+                //
+                // We haven't finished zooming
+                //
+                compatPostOnAnimation(this);
+
+            } else {
+                //
+                // Finished zooming
+                //
+                setState(State.NONE);
+            }
+        }
+
+        /**
+         * Interpolate between where the image should start and end in order to translate
+         * the image so that the point that is touched is what ends up centered at the end
+         * of the zoom.
+         *
+         * @param t
+         */
+        private void translateImageToCenterTouchPosition(float t) {
+            float targetX = startTouch.x + t * (endTouch.x - startTouch.x);
+            float targetY = startTouch.y + t * (endTouch.y - startTouch.y);
+            PointF curr = transformCoordBitmapToTouch(bitmapX, bitmapY);
+            matrix.postTranslate(targetX - curr.x, targetY - curr.y);
+        }
+
+        /**
+         * Use interpolator to get t
+         *
+         * @return
+         */
+        private float interpolate() {
+            long currTime = System.currentTimeMillis();
+            float elapsed = (currTime - startTime) / ZOOM_TIME;
+            elapsed = Math.min(1f, elapsed);
+            return interpolator.getInterpolation(elapsed);
+        }
+
+        /**
+         * Interpolate the current targeted zoom and get the delta
+         * from the current zoom.
+         *
+         * @param t
+         * @return
+         */
+        private double calculateDeltaScale(float t) {
+            double zoom = startZoom + t * (targetZoom - startZoom);
+            return zoom / normalizedScale;
+        }
+    }
+
+    /**
+     * This function will transform the coordinates in the touch event to the coordinate
+     * system of the drawable that the imageview contain
+     *
+     * @param x            x-coordinate of touch event
+     * @param y            y-coordinate of touch event
+     * @param clipToBitmap Touch event may occur within view, but outside image content. True, to clip return value
+     *                     to the bounds of the bitmap size.
+     * @return Coordinates of the point touched, in the coordinate system of the original drawable.
+     */
+    private PointF transformCoordTouchToBitmap(float x, float y, boolean clipToBitmap) {
+        matrix.getValues(m);
+        float origW = getDrawable().getIntrinsicWidth();
+        float origH = getDrawable().getIntrinsicHeight();
+        float transX = m[Matrix.MTRANS_X];
+        float transY = m[Matrix.MTRANS_Y];
+        float finalX = ((x - transX) * origW) / getImageWidth();
+        float finalY = ((y - transY) * origH) / getImageHeight();
+
+        if (clipToBitmap) {
+            finalX = Math.min(Math.max(finalX, 0), origW);
+            finalY = Math.min(Math.max(finalY, 0), origH);
+        }
+
+        return new PointF(finalX, finalY);
+    }
+
+    /**
+     * Inverse of transformCoordTouchToBitmap. This function will transform the coordinates in the
+     * drawable's coordinate system to the view's coordinate system.
+     *
+     * @param bx x-coordinate in original bitmap coordinate system
+     * @param by y-coordinate in original bitmap coordinate system
+     * @return Coordinates of the point in the view's coordinate system.
+     */
+    private PointF transformCoordBitmapToTouch(float bx, float by) {
+        matrix.getValues(m);
+        float origW = getDrawable().getIntrinsicWidth();
+        float origH = getDrawable().getIntrinsicHeight();
+        float px = bx / origW;
+        float py = by / origH;
+        float finalX = m[Matrix.MTRANS_X] + getImageWidth() * px;
+        float finalY = m[Matrix.MTRANS_Y] + getImageHeight() * py;
+        return new PointF(finalX, finalY);
+    }
+
+    /**
+     * Fling launches sequential runnables which apply
+     * the fling graphic to the image. The values for the translation
+     * are interpolated by the Scroller.
+     *
+     * @author Ortiz
+     */
+    private class Fling implements Runnable {
+
+        CompatScroller scroller;
+        int currX, currY;
+
+        Fling(int velocityX, int velocityY) {
+            setState(State.FLING);
+            scroller = new CompatScroller(context);
+            matrix.getValues(m);
+
+            int startX = (int) m[Matrix.MTRANS_X];
+            int startY = (int) m[Matrix.MTRANS_Y];
+            int minX, maxX, minY, maxY;
+
+            if (getImageWidth() > viewWidth) {
+                minX = viewWidth - (int) getImageWidth();
+                maxX = 0;
+
+            } else {
+                minX = maxX = startX;
+            }
+
+            if (getImageHeight() > viewHeight) {
+                minY = viewHeight - (int) getImageHeight();
+                maxY = 0;
+
+            } else {
+                minY = maxY = startY;
+            }
+
+            scroller.fling(startX, startY, (int) velocityX, (int) velocityY, minX,
+                    maxX, minY, maxY);
+            currX = startX;
+            currY = startY;
+        }
+
+        public void cancelFling() {
+            if (scroller != null) {
+                setState(State.NONE);
+                scroller.forceFinished(true);
+            }
+        }
+
+        @Override
+        public void run() {
+
+            //
+            // OnTouchImageViewListener is set: TouchImageView listener has been flung by user.
+            // Listener runnable updated with each frame of fling animation.
+            //
+            if (touchImageViewListener != null) {
+                touchImageViewListener.onMove();
+            }
+
+            if (scroller.isFinished()) {
+                scroller = null;
+                return;
+            }
+
+            if (scroller.computeScrollOffset()) {
+                int newX = scroller.getCurrX();
+                int newY = scroller.getCurrY();
+                int transX = newX - currX;
+                int transY = newY - currY;
+                currX = newX;
+                currY = newY;
+                matrix.postTranslate(transX, transY);
+                fixTrans();
+                setImageMatrix(matrix);
+                compatPostOnAnimation(this);
+            }
+        }
+    }
+
+    @TargetApi(VERSION_CODES.GINGERBREAD)
+    private class CompatScroller {
+        Scroller scroller;
+        OverScroller overScroller;
+        boolean isPreGingerbread;
+
+        public CompatScroller(Context context) {
+            if (VERSION.SDK_INT < VERSION_CODES.GINGERBREAD) {
+                isPreGingerbread = true;
+                scroller = new Scroller(context);
+
+            } else {
+                isPreGingerbread = false;
+                overScroller = new OverScroller(context);
+            }
+        }
+
+        public void fling(int startX, int startY, int velocityX, int velocityY, int minX, int maxX, int minY, int maxY) {
+            if (isPreGingerbread) {
+                scroller.fling(startX, startY, velocityX, velocityY, minX, maxX, minY, maxY);
+            } else {
+                overScroller.fling(startX, startY, velocityX, velocityY, minX, maxX, minY, maxY);
+            }
+        }
+
+        public void forceFinished(boolean finished) {
+            if (isPreGingerbread) {
+                scroller.forceFinished(finished);
+            } else {
+                overScroller.forceFinished(finished);
+            }
+        }
+
+        public boolean isFinished() {
+            if (isPreGingerbread) {
+                return scroller.isFinished();
+            } else {
+                return overScroller.isFinished();
+            }
+        }
+
+        public boolean computeScrollOffset() {
+            if (isPreGingerbread) {
+                return scroller.computeScrollOffset();
+            } else {
+                overScroller.computeScrollOffset();
+                return overScroller.computeScrollOffset();
+            }
+        }
+
+        public int getCurrX() {
+            if (isPreGingerbread) {
+                return scroller.getCurrX();
+            } else {
+                return overScroller.getCurrX();
+            }
+        }
+
+        public int getCurrY() {
+            if (isPreGingerbread) {
+                return scroller.getCurrY();
+            } else {
+                return overScroller.getCurrY();
+            }
+        }
+    }
+
+    @TargetApi(VERSION_CODES.JELLY_BEAN)
+    private void compatPostOnAnimation(Runnable runnable) {
+        if (VERSION.SDK_INT >= VERSION_CODES.JELLY_BEAN) {
+            postOnAnimation(runnable);
+
+        } else {
+            postDelayed(runnable, 1000 / 60);
+        }
+    }
+
+    private class ZoomVariables {
+        public float scale;
+        public float focusX;
+        public float focusY;
+        public ScaleType scaleType;
+
+        public ZoomVariables(float scale, float focusX, float focusY, ScaleType scaleType) {
+            this.scale = scale;
+            this.focusX = focusX;
+            this.focusY = focusY;
+            this.scaleType = scaleType;
+        }
+    }
+
+    private void printMatrixInfo() {
+        float[] n = new float[9];
+        matrix.getValues(n);
+        Log.d(DEBUG, "Scale: " + n[Matrix.MSCALE_X] + " TransX: " + n[Matrix.MTRANS_X] + " TransY: " + n[Matrix.MTRANS_Y]);
+    }
+}
\ No newline at end of file
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/ChannelCreateActivity.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/ChannelCreateActivity.java
index 0baac0be..4274b7c0 100755
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/ChannelCreateActivity.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/ChannelCreateActivity.java
@@ -2,36 +2,63 @@
 
 import android.app.Activity;
 import android.app.ProgressDialog;
+import android.content.BroadcastReceiver;
 import android.content.Context;
 import android.content.Intent;
+import android.content.IntentFilter;
+import android.graphics.Color;
+import android.graphics.drawable.ColorDrawable;
+import android.net.ConnectivityManager;
 import android.net.Uri;
 import android.os.AsyncTask;
+import android.os.Build;
 import android.os.Bundle;
+import android.os.Handler;
 import android.support.annotation.NonNull;
 import android.support.design.widget.Snackbar;
 import android.support.v4.app.ActivityCompat;
+import android.support.v4.app.DialogFragment;
+import android.support.v4.app.Fragment;
+import android.support.v4.app.FragmentManager;
+import android.support.v4.app.FragmentTransaction;
+import android.support.v4.content.FileProvider;
 import android.support.v7.app.ActionBar;
 import android.support.v7.app.AppCompatActivity;
 import android.support.v7.widget.Toolbar;
 import android.text.TextUtils;
-import android.util.Log;
+import android.view.Gravity;
 import android.view.Menu;
 import android.view.MenuItem;
 import android.view.View;
 import android.widget.EditText;
 import android.widget.ImageView;
 import android.widget.LinearLayout;
+import android.widget.Toast;
 
+import com.applozic.mobicomkit.api.MobiComKitConstants;
+import com.applozic.mobicomkit.api.account.user.MobiComUserPreference;
+import com.applozic.mobicomkit.api.account.user.RegisteredUsersAsyncTask;
 import com.applozic.mobicomkit.api.attachment.FileClientService;
+import com.applozic.mobicomkit.broadcast.ConnectivityReceiver;
+import com.applozic.mobicomkit.feed.RegisteredUsersApiResponse;
+import com.applozic.mobicomkit.uiwidgets.AlCustomizationSettings;
+import com.applozic.mobicomkit.uiwidgets.ApplozicSetting;
 import com.applozic.mobicomkit.uiwidgets.R;
+import com.applozic.mobicomkit.uiwidgets.conversation.fragment.PictureUploadPopUpFragment;
 import com.applozic.mobicomkit.uiwidgets.instruction.ApplozicPermissions;
+import com.applozic.mobicomkit.uiwidgets.people.fragment.ProfileFragment;
+import com.applozic.mobicomkit.uiwidgets.uilistener.MobicomkitUriListener;
 import com.applozic.mobicommons.commons.core.utils.PermissionsUtils;
 import com.applozic.mobicommons.commons.core.utils.Utils;
-import com.applozic.mobicommons.file.FilePathFinder;
+import com.applozic.mobicommons.file.FileUtils;
+import com.applozic.mobicommons.json.GsonUtils;
 import com.applozic.mobicommons.people.channel.Channel;
-import com.soundcloud.android.crop.Crop;
+import com.theartofdev.edmodo.cropper.CropImage;
+import com.theartofdev.edmodo.cropper.CropImageView;
 
 import java.io.File;
+import java.text.SimpleDateFormat;
+import java.util.Date;
 
 import de.hdodenhof.circleimageview.CircleImageView;
 
@@ -40,23 +67,32 @@
  */
 
 
-public class ChannelCreateActivity extends AppCompatActivity implements ActivityCompat.OnRequestPermissionsResultCallback {
+public class ChannelCreateActivity extends AppCompatActivity implements ActivityCompat.OnRequestPermissionsResultCallback, MobicomkitUriListener, RemoveInterfaceListener {
 
+    public static final String ACTION_FINISH_CHANNEL_CREATE =
+            "channelCreateActivity.ACTION_FINISH";
     private static final int REQUEST_CODE_ATTACH_PHOTO = 901;
     private static final String TAG = "ChannelCreateActivity";
-    public static String GROUP_TYPE ="GroupType";
+    public static String GROUP_TYPE = "GroupType";
+    public static String CONTACTS_GROUP_ID = "ContactsGroupId";
+    public String contactsGroupId;
+    MobiComUserPreference userPreference;
+    AlCustomizationSettings alCustomizationSettings;
+    ConnectivityReceiver connectivityReceiver;
+    File profilePhotoFile;
+    FileClientService fileClientService;
     private EditText channelName;
     private CircleImageView circleImageView;
     private View focus;
     private ActionBar mActionBar;
-    public static Activity channelActivity;
     private ImageView uploadImageButton;
     private Uri imageChangeUri;
     private String groupIconImageLink;
-    private Integer groupType;
+    private int groupType;
     private LinearLayout layout;
     private Snackbar snackbar;
     private ApplozicPermissions applozicPermissions;
+    private FinishActivityReceiver finishActivityReceiver;
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
@@ -64,33 +100,59 @@ protected void onCreate(Bundle savedInstanceState) {
         setContentView(R.layout.channel_create_activty_layout);
         Toolbar toolbar = (Toolbar) findViewById(R.id.my_toolbar);
         setSupportActionBar(toolbar);
-        channelActivity = this;
+        String jsonString = FileUtils.loadSettingsJsonFile(getApplicationContext());
+        if (!TextUtils.isEmpty(jsonString)) {
+            alCustomizationSettings = (AlCustomizationSettings) GsonUtils.getObjectFromJson(jsonString, AlCustomizationSettings.class);
+        } else {
+            alCustomizationSettings = new AlCustomizationSettings();
+        }
+        connectivityReceiver = new ConnectivityReceiver();
+        userPreference = MobiComUserPreference.getInstance(ChannelCreateActivity.this);
         mActionBar = getSupportActionBar();
+        if(!TextUtils.isEmpty(alCustomizationSettings.getThemeColorPrimary()) && !TextUtils.isEmpty(alCustomizationSettings.getThemeColorPrimaryDark())){
+            mActionBar.setBackgroundDrawable(new ColorDrawable(Color.parseColor(alCustomizationSettings.getThemeColorPrimary())));
+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
+                getWindow().setStatusBarColor(Color.parseColor(alCustomizationSettings.getThemeColorPrimaryDark()));
+            }
+        }
         mActionBar.setTitle(R.string.channel_create_title);
         mActionBar.setDisplayShowHomeEnabled(true);
         mActionBar.setDisplayHomeAsUpEnabled(true);
+        finishActivityReceiver = new FinishActivityReceiver();
+        registerReceiver(finishActivityReceiver, new IntentFilter(ACTION_FINISH_CHANNEL_CREATE));
         layout = (LinearLayout) findViewById(R.id.footerAd);
         applozicPermissions = new ApplozicPermissions(this, layout);
         channelName = (EditText) findViewById(R.id.channelName);
         circleImageView = (CircleImageView) findViewById(R.id.channelIcon);
-        uploadImageButton = (ImageView)  findViewById(R.id.applozic_channel_profile_camera);
+        uploadImageButton = (CircleImageView) findViewById(R.id.applozic_channel_profile_camera);
         uploadImageButton.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
                 processImagePicker();
             }
         });
+
+        int drawableResourceId = getResources().getIdentifier(alCustomizationSettings.getAttachCameraIconName(), "drawable", getPackageName());
+        uploadImageButton.setImageResource(drawableResourceId);
+
+        fileClientService = new FileClientService(this);
+        if (getIntent() != null) {
+            groupType = getIntent().getIntExtra(GROUP_TYPE, Channel.GroupType.PUBLIC.getValue().intValue());
+            contactsGroupId = getIntent().getStringExtra(CONTACTS_GROUP_ID);
+        }
        /* groupType = getIntent().getIntExtra(GROUP_TYPE, Channel.GroupType.PRIVATE.getValue().intValue());
         if(groupType.equals(Channel.GroupType.BROADCAST.getValue().intValue())){
             circleImageView.setImageResource(R.drawable.applozic_ic_applozic_broadcast);
             uploadImageButton.setVisibility(View.GONE);
         }*/
+        registerReceiver(connectivityReceiver, new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION));
     }
 
     @Override
     public boolean onCreateOptionsMenu(Menu menu) {
         getMenuInflater().inflate(R.menu.group_create_menu, menu);
         menu.removeItem(R.id.Done);
+        menu.findItem(R.id.menu_search).setVisible(false);
         return true;
     }
 
@@ -107,54 +169,224 @@ public boolean onOptionsItemSelected(MenuItem item) {
             }
             if (check) {
                 Utils.toggleSoftKeyBoard(ChannelCreateActivity.this, true);
+                if (alCustomizationSettings.getTotalRegisteredUserToFetch() > 0 && (alCustomizationSettings.isRegisteredUserContactListCall() || ApplozicSetting.getInstance(this).isRegisteredUsersContactCall())&& !userPreference.getWasContactListServerCallAlreadyDone()) {
+                    processDownloadRegisteredUsers();
+                } else {
+                    Intent intent = new Intent(ChannelCreateActivity.this, ContactSelectionActivity.class);
+                    intent.putExtra(ContactSelectionActivity.CHANNEL, channelName.getText().toString());
+                    if (!TextUtils.isEmpty(groupIconImageLink)) {
+                        intent.putExtra(ContactSelectionActivity.IMAGE_LINK, groupIconImageLink);
+                    }
+                    if (contactsGroupId != null) {
+                        intent.putExtra(ContactSelectionActivity.CONTACTS_GROUP_ID, contactsGroupId);
+                    }
+                    intent.putExtra(ContactSelectionActivity.GROUP_TYPE, groupType);
+                    startActivity(intent);
+                }
+
+            }
+            return true;
+        }
+        return super.onOptionsItemSelected(item);
+    }
+
+    public void processDownloadRegisteredUsers() {
+        final ProgressDialog progressDialog = ProgressDialog.show(ChannelCreateActivity.this, "",
+                getString(R.string.applozic_contacts_loading_info), true);
+
+        RegisteredUsersAsyncTask.TaskListener usersAsyncTaskTaskListener = new RegisteredUsersAsyncTask.TaskListener() {
+            @Override
+            public void onSuccess(RegisteredUsersApiResponse registeredUsersApiResponse, String[] userIdArray) {
+                if (progressDialog != null && progressDialog.isShowing()) {
+                    progressDialog.dismiss();
+                }
+                userPreference.setWasContactListServerCallAlreadyDone(true);
                 Intent intent = new Intent(ChannelCreateActivity.this, ContactSelectionActivity.class);
                 intent.putExtra(ContactSelectionActivity.CHANNEL, channelName.getText().toString());
-                if(!TextUtils.isEmpty(groupIconImageLink)){
+                if (!TextUtils.isEmpty(groupIconImageLink)) {
                     intent.putExtra(ContactSelectionActivity.IMAGE_LINK, groupIconImageLink);
                 }
-                // intent.putExtra(GROUP_TYPE, groupType);
+                intent.putExtra(ContactSelectionActivity.GROUP_TYPE, groupType);
                 startActivity(intent);
+
             }
-            return true;
+
+            @Override
+            public void onFailure(RegisteredUsersApiResponse registeredUsersApiResponse, String[] userIdArray, Exception exception) {
+                if (progressDialog != null && progressDialog.isShowing()) {
+                    progressDialog.dismiss();
+                }
+                String error = getString(Utils.isInternetAvailable(ChannelCreateActivity.this) ? R.string.applozic_server_error : R.string.you_need_network_access_for_block_or_unblock);
+                Toast toast = Toast.makeText(ChannelCreateActivity.this, error, Toast.LENGTH_LONG);
+                toast.setGravity(Gravity.CENTER, 0, 0);
+                toast.show();
+            }
+
+            @Override
+            public void onCompletion() {
+
+            }
+        };
+        RegisteredUsersAsyncTask usersAsyncTask = new RegisteredUsersAsyncTask(ChannelCreateActivity.this, usersAsyncTaskTaskListener, alCustomizationSettings.getTotalRegisteredUserToFetch(), userPreference.getRegisteredUsersLastFetchTime(), null, null, true);
+        usersAsyncTask.execute((Void) null);
+
+    }
+
+
+    @Override
+    protected void onActivityResult(int requestCode, int resultCode, Intent intent) {
+        super.onActivityResult(requestCode, resultCode, intent);
+        try {
+            if (requestCode == CropImage.CROP_IMAGE_ACTIVITY_REQUEST_CODE) {
+                CropImage.ActivityResult result = CropImage.getActivityResult(intent);
+                if (resultCode == RESULT_OK) {
+                    if (intent == null) {
+                        return;
+                    }
+                    if (imageChangeUri != null) {
+                        imageChangeUri = result.getUri();
+                        circleImageView.setImageDrawable(null); // <--- added to force redraw of ImageView
+                        circleImageView.setImageURI(imageChangeUri);
+                        new ProfilePictureUpload(true, profilePhotoFile, imageChangeUri, ChannelCreateActivity.this).execute((Void[]) null);
+                    } else {
+                        imageChangeUri = result.getUri();
+                        String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());
+                        String imageFileName = "JPEG_" + timeStamp + "_" + ".jpeg";
+                        circleImageView.setImageDrawable(null); // <--- added to force redraw of ImageView
+                        circleImageView.setImageURI(imageChangeUri);
+                        profilePhotoFile = FileClientService.getFilePath(imageFileName, this, "image/jpeg");
+                        new ProfilePictureUpload(true, profilePhotoFile, imageChangeUri, ChannelCreateActivity.this).execute((Void[]) null);
+                    }
+                } else if (resultCode == CropImage.CROP_IMAGE_ACTIVITY_RESULT_ERROR_CODE) {
+                    Toast.makeText(this, this.getString(R.string.applozic_Cropping_failed) + result.getError(), Toast.LENGTH_LONG).show();
+                }
+            }
+            if (resultCode == Activity.RESULT_OK) {
+                handleOnActivityResult(requestCode, intent);
+            }
+        } catch (Exception e) {
+            Utils.printLog(this, TAG, "exception in profile image");
+        }
+    }
+
+
+    public void handleOnActivityResult(int requestCode, Intent intent) {
+
+        switch (requestCode) {
+
+            case ProfileFragment.REQUEST_CODE_ATTACH_PHOTO:
+                Uri selectedFileUri = (intent == null ? null : intent.getData());
+                imageChangeUri = null;
+                beginCrop(selectedFileUri);
+                break;
+
+            case ProfileFragment.REQUEST_CODE_TAKE_PHOTO:
+                beginCrop(imageChangeUri);
+                break;
+
         }
-        return super.onOptionsItemSelected(item);
     }
 
-    private void beginCrop(Uri source) {
-        Uri destination = Uri.fromFile(new File(getCacheDir(), "new_group_profile.jpeg"));
-        Crop.of(source, destination).asSquare().start(this);
+    void beginCrop(Uri imageUri) {
+        try {
+            CropImage.activity(imageUri)
+                    .setGuidelines(CropImageView.Guidelines.OFF)
+                    .setMultiTouchEnabled(true)
+                    .start(this);
+
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
     }
 
-    public void processImagePicker(){
-        if(Utils.hasMarshmallow() && PermissionsUtils.checkSelfForStoragePermission(this)){
-            applozicPermissions.requestStoragePermissions();
-        }else {
-            Intent getContentIntent = new Intent(Intent.ACTION_PICK,
-                    android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
-            startActivityForResult(getContentIntent, REQUEST_CODE_ATTACH_PHOTO);
+    @Override
+    public void removeCallBack() {
+        try {
+            imageChangeUri = null;
+            groupIconImageLink = null;
+            circleImageView.setImageDrawable(null); // <--- added to force redraw of ImageView
+            circleImageView.setImageResource(R.drawable.applozic_group_icon);
+        } catch (Exception e) {
+            e.printStackTrace();
         }
+
     }
 
     @Override
-    protected void onActivityResult(int requestCode, int resultCode, Intent intent) {
-        super.onActivityResult(requestCode, resultCode, intent);
-        Uri selectedFileUri=null;
-        if(requestCode == REQUEST_CODE_ATTACH_PHOTO  && resultCode == RESULT_OK){
-            selectedFileUri = (intent == null ? null : intent.getData());
-            Log.i(TAG, "selectedFileUri :: " + selectedFileUri);
-            beginCrop(selectedFileUri);
-        }
-        if (requestCode == Crop.REQUEST_CROP && resultCode == RESULT_OK) {
-            try{
-                imageChangeUri = Crop.getOutput(intent);
-                circleImageView.setImageDrawable(null); // <--- added to force redraw of ImageView
-                circleImageView.setImageURI(imageChangeUri);
-                new ProfilePictureUpload(imageChangeUri,ChannelCreateActivity.this).execute((Void[]) null);
-            }catch (Exception e){
-                Log.i(TAG, "exception in profile image");
+    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
+        if (requestCode == PermissionsUtils.REQUEST_STORAGE) {
+            if (PermissionsUtils.verifyPermissions(grantResults)) {
+                showSnackBar(R.string.storage_permission_granted);
+                processImagePicker();
+            } else {
+                showSnackBar(R.string.storage_permission_not_granted);
             }
+        } else {
+            super.onRequestPermissionsResult(requestCode, permissions, grantResults);
         }
+    }
 
+    public void showSnackBar(int resId) {
+        snackbar = Snackbar.make(layout, resId,
+                Snackbar.LENGTH_SHORT);
+        snackbar.show();
+    }
+
+    @Override
+    protected void onDestroy() {
+        super.onDestroy();
+        try {
+            if (finishActivityReceiver != null) {
+                unregisterReceiver(finishActivityReceiver);
+            }
+            if (connectivityReceiver != null) {
+                unregisterReceiver(connectivityReceiver);
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+
+    }
+
+    public void processImagePicker() {
+
+        if (PermissionsUtils.isCameraPermissionGranted(this) && !PermissionsUtils.checkSelfForStoragePermission(this)) {
+
+            new Handler().post(new Runnable() {
+                public void run() {
+                    FragmentManager supportFragmentManager = getSupportFragmentManager();
+                    DialogFragment fragment = PictureUploadPopUpFragment.newInstance(true, imageChangeUri == null);
+                    FragmentTransaction fragmentTransaction = supportFragmentManager
+                            .beginTransaction();
+                    Fragment prev = getSupportFragmentManager().findFragmentByTag("PhotosAttachmentFragment");
+                    if (prev != null) {
+                        fragmentTransaction.remove(prev);
+                    }
+                    fragmentTransaction.addToBackStack(null);
+                    fragment.show(fragmentTransaction, "PhotosAttachmentFragment");
+                }
+            });
+
+        } else {
+            if (Utils.hasMarshmallow()) {
+                if (PermissionsUtils.checkSelfForCameraPermission(this)) {
+                    applozicPermissions.requestCameraPermission();
+                } else {
+                    applozicPermissions.requestStoragePermissions();
+                }
+            } else {
+                processImagePicker();
+            }
+        }
+    }
+
+    @Override
+    public Uri getCurrentImageUri() {
+        String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());
+        String imageFileName = "JPEG_" + timeStamp + "_" + ".jpeg";
+        profilePhotoFile = FileClientService.getFilePath(imageFileName, getApplicationContext(), "image/jpeg");
+        imageChangeUri = FileProvider.getUriForFile(this, Utils.getMetaDataValue(this, MobiComKitConstants.PACKAGE_NAME) + ".provider", profilePhotoFile);
+        return imageChangeUri;
     }
 
     class ProfilePictureUpload extends AsyncTask<Void, Void, Boolean> {
@@ -162,11 +394,17 @@ protected void onActivityResult(int requestCode, int resultCode, Intent intent)
         Context context;
         Uri fileUri;
         String displayName;
+        File file;
+        boolean isSaveFile;
+        FileClientService fileClientService;
         private ProgressDialog progressDialog;
 
-        public ProfilePictureUpload( Uri fileUri , Context context) {
+        public ProfilePictureUpload(boolean isSaveFile, File file, Uri fileUri, Context context) {
             this.context = context;
-            this.fileUri=fileUri;
+            this.fileUri = fileUri;
+            this.file = file;
+            this.isSaveFile = isSaveFile;
+            this.fileClientService = new FileClientService(context);
 
         }
 
@@ -180,46 +418,35 @@ protected void onPreExecute() {
         @Override
         protected Boolean doInBackground(Void... params) {
 
-            FileClientService fileClientService =new FileClientService(context);
             try {
-                if(fileUri!=null){
-                    String filePath = FilePathFinder.getPath(context, fileUri);
-                    groupIconImageLink= fileClientService.uploadProfileImage(filePath);
+                if (fileUri != null) {
+                    String filePath = file.getAbsolutePath();
+                    if (isSaveFile) {
+                        fileClientService.writeFile(fileUri, file);
+                    }
+                    groupIconImageLink = fileClientService.uploadProfileImage(filePath);
                 }
             } catch (Exception e) {
                 e.printStackTrace();
-                Log.i(ChannelCreateActivity.class.getName(),  "Exception");
-
             }
             return true;
         }
 
         @Override
         protected void onPostExecute(final Boolean result) {
-            progressDialog.dismiss();
+            if (progressDialog != null && progressDialog.isShowing()) {
+                progressDialog.dismiss();
+            }
         }
 
     }
 
-    @Override
-    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
-        if (requestCode == PermissionsUtils.REQUEST_STORAGE) {
-            if (PermissionsUtils.verifyPermissions(grantResults)) {
-                showSnackBar(R.string.storage_permission_granted);
-                processImagePicker();
-            } else {
-                showSnackBar(R.string.storage_permission_not_granted);
-            }
-        }else {
-            super.onRequestPermissionsResult(requestCode, permissions, grantResults);
+    private final class FinishActivityReceiver extends BroadcastReceiver {
+        @Override
+        public void onReceive(Context context, Intent intent) {
+            if (intent != null && intent.getAction().equals(ACTION_FINISH_CHANNEL_CREATE))
+                finish();
         }
     }
 
-    public void showSnackBar(int resId) {
-        snackbar = Snackbar.make(layout, resId,
-                Snackbar.LENGTH_SHORT);
-        snackbar.show();
-    }
-
-
 }
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/ChannelInfoActivity.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/ChannelInfoActivity.java
index bd2aa763..c4dbbfc8 100755
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/ChannelInfoActivity.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/ChannelInfoActivity.java
@@ -3,11 +3,15 @@
 import android.app.Activity;
 import android.app.AlertDialog;
 import android.app.ProgressDialog;
+import android.content.BroadcastReceiver;
 import android.content.Context;
 import android.content.DialogInterface;
 import android.content.Intent;
+import android.content.IntentFilter;
 import android.graphics.Bitmap;
+import android.graphics.Color;
 import android.graphics.drawable.GradientDrawable;
+import android.net.ConnectivityManager;
 import android.net.Uri;
 import android.os.AsyncTask;
 import android.os.Bundle;
@@ -37,13 +41,20 @@
 import android.widget.Toast;
 
 import com.applozic.mobicomkit.ApplozicClient;
+import com.applozic.mobicomkit.api.MobiComKitConstants;
 import com.applozic.mobicomkit.api.account.user.MobiComUserPreference;
+import com.applozic.mobicomkit.api.account.user.RegisteredUsersAsyncTask;
 import com.applozic.mobicomkit.api.attachment.FileClientService;
 import com.applozic.mobicomkit.broadcast.BroadcastService;
+import com.applozic.mobicomkit.broadcast.ConnectivityReceiver;
 import com.applozic.mobicomkit.channel.service.ChannelService;
 import com.applozic.mobicomkit.contact.AppContactService;
 import com.applozic.mobicomkit.contact.BaseContactService;
+import com.applozic.mobicomkit.feed.ApiResponse;
+import com.applozic.mobicomkit.feed.ErrorResponseFeed;
 import com.applozic.mobicomkit.feed.GroupInfoUpdate;
+import com.applozic.mobicomkit.feed.RegisteredUsersApiResponse;
+import com.applozic.mobicomkit.uiwidgets.AlCustomizationSettings;
 import com.applozic.mobicomkit.uiwidgets.ApplozicSetting;
 import com.applozic.mobicomkit.uiwidgets.R;
 import com.applozic.mobicomkit.uiwidgets.alphanumbericcolor.AlphaNumberColorUtil;
@@ -52,6 +63,7 @@
 import com.applozic.mobicommons.commons.core.utils.DateUtils;
 import com.applozic.mobicommons.commons.core.utils.Utils;
 import com.applozic.mobicommons.commons.image.ImageLoader;
+import com.applozic.mobicommons.file.FileUtils;
 import com.applozic.mobicommons.json.GsonUtils;
 import com.applozic.mobicommons.people.channel.Channel;
 import com.applozic.mobicommons.people.channel.ChannelUserMapper;
@@ -69,31 +81,34 @@
  */
 public class ChannelInfoActivity extends AppCompatActivity {
 
-    private static final String TAG = "ChannelInfoActivity";
-    public static final String GROUP_UPDTAE_INFO ="GROUP_UPDTAE_INFO" ;
-    private ActionBar mActionBar;
-    private ImageLoader contactImageLoader,channelImageLoader;
+    public static final String GROUP_UPDTAE_INFO = "GROUP_UPDTAE_INFO";
     public static final String CHANNEL_KEY = "CHANNEL_KEY";
-    private List<ChannelUserMapper> channelUserMapperList;
-    private Channel channel;
-    private static final String SUCCESS= "success" ;
-    private ImageView channelImage;
     public static final String USERID = "USERID";
-    private TextView createdBy;
-    protected ListView mainListView;
-    CollapsingToolbarLayout collapsingToolbarLayout;
     public static final String CHANNEL_NAME = "CHANNEL_NAME";
-    protected ContactsAdapter contactsAdapter;
-    private Button exitChannelButton, deleteChannelButton;
-    private RelativeLayout channelDeleteRelativeLayout, channelExitRelativeLayout;
-    private Integer channelKey;
     public static final int REQUEST_CODE_FOR_CONTACT = 1;
     public static final int REQUEST_CODE_FOR_CHANNEL_NEW_NAME = 2;
+    private static final String TAG = "ChannelInfoActivity";
+    private static final String SUCCESS = "success";
+    protected ListView mainListView;
+    protected ContactsAdapter contactsAdapter;
+    CollapsingToolbarLayout collapsingToolbarLayout;
     boolean isUserPresent;
     Contact contact;
     BaseContactService baseContactService;
     MobiComKitBroadcastReceiver mobiComKitBroadcastReceiver;
-
+    MobiComUserPreference userPreference;
+    AlCustomizationSettings alCustomizationSettings;
+    ConnectivityReceiver connectivityReceiver;
+    private ActionBar mActionBar;
+    private ImageLoader contactImageLoader, channelImageLoader;
+    private List<ChannelUserMapper> channelUserMapperList;
+    private Channel channel;
+    private ImageView channelImage;
+    private TextView createdBy, groupParticipantsTexView;
+    private Button exitChannelButton, deleteChannelButton;
+    private RelativeLayout channelDeleteRelativeLayout, channelExitRelativeLayout;
+    private Integer channelKey;
+    private RefreshBroadcast refreshBroadcast;
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
@@ -101,14 +116,28 @@ protected void onCreate(Bundle savedInstanceState) {
         setContentView(R.layout.channel_info_layout);
         Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
         setSupportActionBar(toolbar);
-        baseContactService = new AppContactService(this);
+        String jsonString = FileUtils.loadSettingsJsonFile(getApplicationContext());
+        if (!TextUtils.isEmpty(jsonString)) {
+            alCustomizationSettings = (AlCustomizationSettings) GsonUtils.getObjectFromJson(jsonString, AlCustomizationSettings.class);
+        } else {
+            alCustomizationSettings = new AlCustomizationSettings();
+        }
+        refreshBroadcast = new RefreshBroadcast();
+        baseContactService = new AppContactService(getApplicationContext());
         channelImage = (ImageView) findViewById(R.id.channelImage);
+        userPreference = MobiComUserPreference.getInstance(this);
         createdBy = (TextView) findViewById(R.id.created_by);
+        groupParticipantsTexView = (TextView) findViewById(R.id.groupParticipantsTexView);
         exitChannelButton = (Button) findViewById(R.id.exit_channel);
         deleteChannelButton = (Button) findViewById(R.id.delete_channel_button);
         channelDeleteRelativeLayout = (RelativeLayout) findViewById(R.id.channel_delete_relativeLayout);
         channelExitRelativeLayout = (RelativeLayout) findViewById(R.id.channel_exit_relativeLayout);
         collapsingToolbarLayout = (CollapsingToolbarLayout) findViewById(R.id.toolbar_layout);
+        collapsingToolbarLayout.setContentScrimColor(Color.parseColor(alCustomizationSettings.getCollapsingToolbarLayoutColor()));
+        groupParticipantsTexView.setTextColor(Color.parseColor(alCustomizationSettings.getGroupParticipantsTextColor()));
+        deleteChannelButton.setBackgroundColor(Color.parseColor((alCustomizationSettings.getGroupDeleteButtonBackgroundColor())));
+        exitChannelButton.setBackgroundColor(Color.parseColor(alCustomizationSettings.getGroupExitButtonBackgroundColor()));
+
         mActionBar = getSupportActionBar();
         mActionBar.setDisplayHomeAsUpEnabled(true);
         mActionBar.setHomeButtonEnabled(true);
@@ -119,11 +148,12 @@ protected void onCreate(Bundle savedInstanceState) {
         if (Utils.hasLollipop()) {
             mainListView.setNestedScrollingEnabled(true);
         }
+        connectivityReceiver = new ConnectivityReceiver();
         mobiComKitBroadcastReceiver = new MobiComKitBroadcastReceiver(this);
 
         registerForContextMenu(mainListView);
 
-        if(ApplozicSetting.getInstance(this).isHideGroupExitMemberButton()){
+        if (alCustomizationSettings.isHideGroupExitButton()) {
             channelExitRelativeLayout.setVisibility(View.GONE);
         }
         if (getIntent().getExtras() != null) {
@@ -131,13 +161,13 @@ protected void onCreate(Bundle savedInstanceState) {
             channel = ChannelService.getInstance(this).getChannelByChannelKey(channelKey);
             isUserPresent = ChannelService.getInstance(this).processIsUserPresentInChannel(channelKey);
             if (channel != null) {
-                String title = ChannelUtils.getChannelTitleName(channel, MobiComUserPreference.getInstance(getApplicationContext()).getUserId());
-                if(!TextUtils.isEmpty(channel.getAdminKey())){
+                String title = ChannelUtils.getChannelTitleName(channel, userPreference.getUserId());
+                if (!TextUtils.isEmpty(channel.getAdminKey())) {
                     contact = baseContactService.getContactById(channel.getAdminKey());
                     mActionBar.setTitle(title);
-                    if(MobiComUserPreference.getInstance(this).getUserId().equals(contact.getUserId())){
-                        createdBy.setText(getString(R.string.channel_created_by) + " " +getString(R.string.you_string));
-                    }else {
+                    if (userPreference.getUserId().equals(contact.getUserId())) {
+                        createdBy.setText(getString(R.string.channel_created_by) + " " + getString(R.string.you_string));
+                    } else {
                         createdBy.setText(getString(R.string.channel_created_by) + " " + contact.getDisplayName());
                     }
                 }
@@ -147,7 +177,18 @@ protected void onCreate(Bundle savedInstanceState) {
                 }
             }
         }
-        contactImageLoader = new ImageLoader(this, getListPreferredItemHeight()) {
+
+        if (channel != null && channel.getType() != null) {
+            if (Channel.GroupType.BROADCAST.getValue().equals(channel.getType())) {
+                deleteChannelButton.setText(R.string.broadcast_delete_button);
+                exitChannelButton.setText(R.string.broadcast_exit_button);
+            } else {
+                deleteChannelButton.setText(R.string.channel_delete_group_button);
+                exitChannelButton.setText(R.string.channel_exit_button);
+            }
+        }
+
+        contactImageLoader = new ImageLoader(getApplicationContext(), getListPreferredItemHeight()) {
             @Override
             protected Bitmap processBitmap(Object data) {
                 return baseContactService.downloadContactImage(getApplicationContext(), (Contact) data);
@@ -156,10 +197,10 @@ protected Bitmap processBitmap(Object data) {
         contactImageLoader.setLoadingImage(R.drawable.applozic_ic_contact_picture_holo_light);
         contactImageLoader.addImageCache(this.getSupportFragmentManager(), 0.1f);
         contactImageLoader.setImageFadeIn(false);
-        channelImageLoader = new ImageLoader(this, getListPreferredItemHeight()) {
+        channelImageLoader = new ImageLoader(getApplicationContext(), getListPreferredItemHeight()) {
             @Override
             protected Bitmap processBitmap(Object data) {
-                return baseContactService.downloadGroupImage(ChannelInfoActivity.this, (Channel) data);
+                return baseContactService.downloadGroupImage(getApplicationContext(), (Channel) data);
             }
         };
 
@@ -167,9 +208,9 @@ protected Bitmap processBitmap(Object data) {
         channelImageLoader.addImageCache(this.getSupportFragmentManager(), 0.1f);
         channelImageLoader.setImageFadeIn(false);
 
-        if(channelImage != null && !channel.isBroadcastMessage()){
-            channelImageLoader.loadImage(channel,channelImage);
-        }else{
+        if (channelImage != null && !channel.isBroadcastMessage()) {
+            channelImageLoader.loadImage(channel, channelImage);
+        } else {
             channelImage.setImageResource(R.drawable.applozic_ic_applozic_broadcast);
         }
 
@@ -206,12 +247,17 @@ public void onClick(View v) {
                 deleteChannel(channel);
             }
         });
+
+        registerReceiver(connectivityReceiver, new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION));
     }
 
     @Override
     protected void onPause() {
         super.onPause();
         LocalBroadcastManager.getInstance(this).unregisterReceiver(mobiComKitBroadcastReceiver);
+        if(refreshBroadcast != null){
+            LocalBroadcastManager.getInstance(this).unregisterReceiver(refreshBroadcast);
+        }
         BroadcastService.currentInfoId = null;
         contactImageLoader.setPauseWork(false);
 
@@ -221,8 +267,17 @@ protected void onPause() {
     protected void onResume() {
         super.onResume();
         LocalBroadcastManager.getInstance(this).registerReceiver(mobiComKitBroadcastReceiver, BroadcastService.getIntentFilter());
+        LocalBroadcastManager.getInstance(this).registerReceiver(refreshBroadcast, new IntentFilter(BroadcastService.INTENT_ACTIONS.UPDATE_USER_DETAIL.toString()));
         if (channel != null) {
             BroadcastService.currentInfoId = String.valueOf(channel.getKey());
+            Channel newChannel = ChannelService.getInstance(this).getChannelByChannelKey(channel.getKey());
+            if (newChannel != null && TextUtils.isEmpty(newChannel.getImageUrl())) {
+                if (!channel.isBroadcastMessage()) {
+                    channelImage.setImageResource(R.drawable.applozic_group_icon);
+                } else {
+                    channelImage.setImageResource(R.drawable.applozic_ic_applozic_broadcast);
+                }
+            }
         }
     }
 
@@ -231,19 +286,19 @@ protected void onActivityResult(int requestCode, int resultCode, final Intent da
         boolean isUserAlreadyPresent;
         if (data != null) {
             if (requestCode == REQUEST_CODE_FOR_CONTACT && resultCode == Activity.RESULT_OK) {
-                isUserAlreadyPresent =  ChannelService.getInstance(this).isUserAlreadyPresentInChannel(channel.getKey(),data.getExtras().getString(USERID));
-                if(!isUserAlreadyPresent){
+                isUserAlreadyPresent = ChannelService.getInstance(this).isUserAlreadyPresentInChannel(channel.getKey(), data.getExtras().getString(USERID));
+                if (!isUserAlreadyPresent) {
                     addChannelUser(data.getExtras().getString(USERID), channel);
-                }else {
-                    Toast toast=  Toast.makeText(this, getString(R.string.user_is_already_exists), Toast.LENGTH_SHORT);
+                } else {
+                    Toast toast = Toast.makeText(this, getString(R.string.user_is_already_exists), Toast.LENGTH_SHORT);
                     toast.setGravity(Gravity.CENTER, 0, 0);
                     toast.show();
                 }
             }
             if (requestCode == REQUEST_CODE_FOR_CHANNEL_NEW_NAME && resultCode == Activity.RESULT_OK) {
                 GroupInfoUpdate groupInfoUpdate = (GroupInfoUpdate) GsonUtils.getObjectFromJson(data.getExtras().getString(GROUP_UPDTAE_INFO), GroupInfoUpdate.class);
-                System.out.println("GroupInfoUpdate ::: " +  data.getExtras().getString(GROUP_UPDTAE_INFO));
-                if (channel.getName().equals(groupInfoUpdate.getNewName())){
+                System.out.println("GroupInfoUpdate ::: " + data.getExtras().getString(GROUP_UPDTAE_INFO));
+                if (channel.getName().equals(groupInfoUpdate.getNewName())) {
                     groupInfoUpdate.setNewName(null);
                 }
                 new ChannelAsync(groupInfoUpdate, ChannelInfoActivity.this).execute();
@@ -258,17 +313,19 @@ public boolean onContextItemSelected(MenuItem item) {
         if (channelUserMapperList.size() <= position) {
             return true;
         }
-
         if (channel == null) {
             return true;
         }
 
         ChannelUserMapper channelUserMapper = channelUserMapperList.get(position);
-        if (MobiComUserPreference.getInstance(this).getUserId().equals(channelUserMapper.getUserKey())) {
-            return true;
-        }
         switch (item.getItemId()) {
             case 0:
+                Intent startConversationIntent = new Intent(ChannelInfoActivity.this, ConversationActivity.class);
+                startConversationIntent.putExtra(ConversationUIService.USER_ID, channelUserMapper.getUserKey());
+                startActivity(startConversationIntent);
+                finish();
+                break;
+            case 1:
                 removeChannelUser(channel, channelUserMapper);
                 break;
             default:
@@ -282,11 +339,10 @@ public boolean onContextItemSelected(MenuItem item) {
     @Override
     public boolean onCreateOptionsMenu(Menu menu) {
         getMenuInflater().inflate(R.menu.channel_menu_option, menu);
-        ApplozicSetting setting = ApplozicSetting.getInstance(this);
-        if (setting.isHideGroupAddMemberButton() || !ChannelUtils.isAdminUserId(MobiComUserPreference.getInstance(ChannelInfoActivity.this).getUserId(), channel)) {
+        if (alCustomizationSettings.isHideGroupAddMembersButton() || !ChannelUtils.isAdminUserId(userPreference.getUserId(), channel)) {
             menu.removeItem(R.id.add_member_to_channel);
         }
-        if(setting.isHideGroupNameEditButton()|| channel.isBroadcastMessage()){
+        if (alCustomizationSettings.isHideGroupNameUpdateButton() || channel.isBroadcastMessage()) {
             menu.removeItem(R.id.edit_channel_name);
         }
         return true;
@@ -300,12 +356,17 @@ public void onCreateContextMenu(ContextMenu menu, View v, ContextMenu.ContextMen
             return;
         }
         ChannelUserMapper channelUserMapper = channelUserMapperList.get(positionInList);
-        if (ChannelUtils.isAdminUserId(MobiComUserPreference.getInstance(ChannelInfoActivity.this).getUserId(), channel)) {
-            isUserPresent = ChannelService.getInstance(this).processIsUserPresentInChannel(channelKey);
-            boolean isHideRemove = ApplozicSetting.getInstance(this).isHideGroupRemoveMemberOption();
-            if (!ChannelUtils.isAdminUserId(channelUserMapper.getUserKey(), channel)  &&  isUserPresent && !isHideRemove ) {
-                menu.add(Menu.NONE, Menu.NONE, 0, "Remove");
+        if (MobiComUserPreference.getInstance(ChannelInfoActivity.this).getUserId().equals(channelUserMapper.getUserKey())) {
+            return;
+        }
+        boolean isHideRemove = alCustomizationSettings.isHideGroupRemoveMemberOption();
+        String[] menuItems = getResources().getStringArray(R.array.channel_users_menu_option);
+        Contact contact = baseContactService.getContactById(channelUserMapper.getUserKey());
+        for (int i = 0; i < menuItems.length; i++) {
+            if (menuItems[i].equals(getString(R.string.remove_member)) && (isHideRemove || !isUserPresent || !ChannelUtils.isAdminUserId(userPreference.getUserId(), channel))) {
+                continue;
             }
+            menu.add(Menu.NONE, i, i, menuItems[i] + " " + contact.getDisplayName());
         }
     }
 
@@ -319,19 +380,25 @@ public boolean onOptionsItemSelected(MenuItem item) {
         }
         if (id == R.id.add_member_to_channel) {
             if (isUserPresent) {
-                Intent addMemberIntent = new Intent(ChannelInfoActivity.this, ContactSelectionActivity.class);
-                addMemberIntent.putExtra(ContactSelectionActivity.CHECK_BOX, true);
-                addMemberIntent.putExtra(ContactSelectionActivity.CHANNEL_OBJECT, channel);
-                startActivityForResult(addMemberIntent, REQUEST_CODE_FOR_CONTACT);
+                Utils.toggleSoftKeyBoard(ChannelInfoActivity.this, true);
+                if (alCustomizationSettings.getTotalRegisteredUserToFetch() > 0 && (alCustomizationSettings.isRegisteredUserContactListCall() || ApplozicSetting.getInstance(this).isRegisteredUsersContactCall())&& !userPreference.getWasContactListServerCallAlreadyDone()) {
+                    processLoadRegisteredUsers();
+                } else {
+                    Intent addMemberIntent = new Intent(ChannelInfoActivity.this, ContactSelectionActivity.class);
+                    addMemberIntent.putExtra(ContactSelectionActivity.CHECK_BOX, true);
+                    addMemberIntent.putExtra(ContactSelectionActivity.CHANNEL_OBJECT, channel);
+                    startActivityForResult(addMemberIntent, REQUEST_CODE_FOR_CONTACT);
+                }
+
             } else {
                 Toast.makeText(this, getString(R.string.channel_add_alert), Toast.LENGTH_SHORT).show();
             }
         } else if (id == R.id.edit_channel_name) {
             if (isUserPresent) {
                 Intent editChannelNameIntent = new Intent(ChannelInfoActivity.this, ChannelNameActivity.class);
-                GroupInfoUpdate groupInfoUpdate =  new GroupInfoUpdate(channel);
+                GroupInfoUpdate groupInfoUpdate = new GroupInfoUpdate(channel);
                 String groupJson = GsonUtils.getJsonFromObject(groupInfoUpdate, GroupInfoUpdate.class);
-                editChannelNameIntent.putExtra(GROUP_UPDTAE_INFO,groupJson);
+                editChannelNameIntent.putExtra(GROUP_UPDTAE_INFO, groupJson);
                 startActivityForResult(editChannelNameIntent, REQUEST_CODE_FOR_CHANNEL_NEW_NAME);
             } else {
                 Toast.makeText(this, getString(R.string.channel_edit_alert), Toast.LENGTH_SHORT).show();
@@ -341,6 +408,44 @@ public boolean onOptionsItemSelected(MenuItem item) {
     }
 
 
+    public void processLoadRegisteredUsers() {
+        final ProgressDialog progressDialog = ProgressDialog.show(ChannelInfoActivity.this, "",
+                getString(R.string.applozic_contacts_loading_info), true);
+
+        RegisteredUsersAsyncTask.TaskListener usersAsyncTaskTaskListener = new RegisteredUsersAsyncTask.TaskListener() {
+            @Override
+            public void onSuccess(RegisteredUsersApiResponse registeredUsersApiResponse, String[] userIdArray) {
+                if (progressDialog != null && progressDialog.isShowing()) {
+                    progressDialog.dismiss();
+                }
+                userPreference.setWasContactListServerCallAlreadyDone(true);
+                Intent addMemberIntent = new Intent(ChannelInfoActivity.this, ContactSelectionActivity.class);
+                addMemberIntent.putExtra(ContactSelectionActivity.CHECK_BOX, true);
+                addMemberIntent.putExtra(ContactSelectionActivity.CHANNEL_OBJECT, channel);
+                startActivityForResult(addMemberIntent, REQUEST_CODE_FOR_CONTACT);
+            }
+
+            @Override
+            public void onFailure(RegisteredUsersApiResponse registeredUsersApiResponse, String[] userIdArray, Exception exception) {
+                if (progressDialog != null && progressDialog.isShowing()) {
+                    progressDialog.dismiss();
+                }
+                String error = getString(Utils.isInternetAvailable(ChannelInfoActivity.this) ? R.string.applozic_server_error : R.string.you_need_network_access_for_block_or_unblock);
+                Toast toast = Toast.makeText(ChannelInfoActivity.this, error, Toast.LENGTH_LONG);
+                toast.setGravity(Gravity.CENTER, 0, 0);
+                toast.show();
+            }
+
+            @Override
+            public void onCompletion() {
+
+            }
+        };
+        RegisteredUsersAsyncTask usersAsyncTask = new RegisteredUsersAsyncTask(ChannelInfoActivity.this, usersAsyncTaskTaskListener, alCustomizationSettings.getTotalRegisteredUserToFetch(), userPreference.getRegisteredUsersLastFetchTime(), null, null, true);
+        usersAsyncTask.execute((Void) null);
+
+    }
+
     private int getListPreferredItemHeight() {
         final TypedValue typedValue = new TypedValue();
 
@@ -360,17 +465,123 @@ public void updateChannelList() {
             contactsAdapter.notifyDataSetChanged();
             String oldChannelName = channel.getName();
             channel = ChannelService.getInstance(this).getChannelByChannelKey(channel.getKey());
-            if(!oldChannelName.equals(channel.getName())){
+            if (!oldChannelName.equals(channel.getName())) {
                 mActionBar.setTitle(channel.getName());
                 collapsingToolbarLayout.setTitle(channel.getName());
             }
         }
     }
 
+    public void removeChannelUser(final Channel channel, final ChannelUserMapper channelUserMapper) {
+        AlertDialog.Builder alertDialog = new AlertDialog.Builder(this).
+                setPositiveButton(R.string.remove_member, new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialogInterface, int i) {
+                        new ChannelMember(channelUserMapper, channel, ChannelInfoActivity.this).execute();
+
+                    }
+                });
+        alertDialog.setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() {
+            @Override
+            public void onClick(DialogInterface dialogInterface, int i) {
+            }
+        });
+        String name = "";
+        String channelName = "";
+        Contact contact;
+        if (!TextUtils.isEmpty(channelUserMapper.getUserKey())) {
+            contact = baseContactService.getContactById(channelUserMapper.getUserKey());
+            name = contact.getDisplayName();
+            channelName = channel.getName();
+        }
+
+        alertDialog.setMessage(getString(R.string.dialog_remove_group_user).replace(getString(R.string.user_name_info), name).replace(getString(R.string.group_name_info), channelName));
+        alertDialog.setCancelable(true);
+        alertDialog.create().show();
+    }
+
+    public void addChannelUser(final String userId, final Channel channel) {
+        AlertDialog.Builder alertDialog = new AlertDialog.Builder(this).
+                setPositiveButton(R.string.add, new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialogInterface, int i) {
+                        new ChannelMemberAdd(channel, userId, ChannelInfoActivity.this).execute();
+
+                    }
+                });
+        alertDialog.setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() {
+            @Override
+            public void onClick(DialogInterface dialogInterface, int i) {
+            }
+        });
+        String name = "";
+        String channelName = "";
+        Contact contact;
+        if (channel != null) {
+            contact = baseContactService.getContactById(userId);
+            name = contact.getDisplayName();
+            channelName = channel.getName();
+        }
+        alertDialog.setMessage(getString(R.string.dialog_add_group_user).replace(getString(R.string.user_name_info), name).replace(getString(R.string.group_name_info), channelName));
+        alertDialog.setCancelable(true);
+        alertDialog.create().show();
+    }
+
+    public void leaveChannel(final Channel channel) {
+        AlertDialog.Builder alertDialog = new AlertDialog.Builder(this).
+                setPositiveButton(R.string.channel_exit, new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialogInterface, int i) {
+                        new ChannelAsync(channel, ChannelInfoActivity.this).execute();
+                    }
+                });
+        alertDialog.setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() {
+            @Override
+            public void onClick(DialogInterface dialogInterface, int i) {
+            }
+        });
+        if (channel.getType() != null) {
+            alertDialog.setMessage(getString(R.string.leave_channel).replace(getString(R.string.groupType_info), Channel.GroupType.BROADCAST.getValue().equals(channel.getType()) ? getString(R.string.broadcast_string) : getString(R.string.group_string)));
+        }
+        alertDialog.setCancelable(true);
+        alertDialog.create().show();
+    }
+
+    public void deleteChannel(final Channel channel) {
+        AlertDialog.Builder alertDialog = new AlertDialog.Builder(this).
+                setPositiveButton(R.string.channel_deleting, new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialogInterface, int i) {
+                        new ChannelMemberAdd(channel, ChannelInfoActivity.this).execute();
+                    }
+                });
+        alertDialog.setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() {
+            @Override
+            public void onClick(DialogInterface dialogInterface, int i) {
+            }
+        });
+        if (channel.getType() != null) {
+            alertDialog.setMessage(getString(R.string.delete_channel_messages_and_channel_info).replace(getString(R.string.group_name_info), channel.getName()).replace(getString(R.string.groupType_info), Channel.GroupType.BROADCAST.getValue().equals(channel.getType()) ? getString(R.string.broadcast_string) : getString(R.string.group_string)));
+        }
+        alertDialog.setCancelable(true);
+        alertDialog.create().show();
+    }
+
+    @Override
+    protected void onDestroy() {
+        super.onDestroy();
+        try {
+            if (connectivityReceiver != null) {
+                unregisterReceiver(connectivityReceiver);
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
 
     private class ContactsAdapter extends BaseAdapter {
-        private LayoutInflater mInflater;
         Context context;
+        private LayoutInflater mInflater;
 
         public ContactsAdapter(Context context) {
             this.context = context;
@@ -397,9 +608,15 @@ public View getView(int position, View convertView, ViewGroup parent) {
             } else {
                 holder = (ContactViewHolder) convertView.getTag();
             }
-            if(MobiComUserPreference.getInstance(context).getUserId().equals(contact.getUserId())){
+
+            GradientDrawable bgShapeAdminText = (GradientDrawable) holder.adminTextView.getBackground();
+            bgShapeAdminText.setColor(Color.parseColor(alCustomizationSettings.getAdminBackgroundColor()));
+            bgShapeAdminText.setStroke(2, Color.parseColor(alCustomizationSettings.getAdminBorderColor()));
+            holder.adminTextView.setTextColor(Color.parseColor(alCustomizationSettings.getAdminTextColor()));
+
+            if (userPreference.getUserId().equals(contact.getUserId())) {
                 holder.displayName.setText(getString(R.string.you_string));
-            }else {
+            } else {
                 holder.displayName.setText(contact.getDisplayName());
             }
             if (ChannelUtils.isAdminUserId(contact.getUserId(), channel)) {
@@ -407,7 +624,7 @@ public View getView(int position, View convertView, ViewGroup parent) {
             } else {
                 holder.adminTextView.setVisibility(View.GONE);
             }
-            if (!MobiComUserPreference.getInstance(context).getUserId().equals(contact.getUserId())) {
+            if (!userPreference.getUserId().equals(contact.getUserId())) {
                 if (contact.isConnected()) {
                     holder.lastSeenAtTextView.setVisibility(View.VISIBLE);
                     holder.lastSeenAtTextView.setText(getString(R.string.user_online));
@@ -437,7 +654,7 @@ public View getView(int position, View convertView, ViewGroup parent) {
             }
             holder.alphabeticImage.setVisibility(View.GONE);
             holder.circleImageView.setVisibility(View.VISIBLE);
-            if(contact != null){
+            if (contact != null) {
                 if (contact.isDrawableResources()) {
                     int drawableResourceId = context.getResources().getIdentifier(contact.getrDrawableName(), "drawable", context.getPackageName());
                     holder.circleImageView.setImageResource(drawableResourceId);
@@ -468,12 +685,12 @@ public long getItemId(int position) {
     }
 
     public class ChannelMember extends AsyncTask<Void, Integer, Long> {
+        String responseForRemove;
         private ChannelUserMapper channelUserMapper;
         private ChannelService channelService;
         private ProgressDialog progressDialog;
         private Context context;
         private Channel channel;
-        String responseForRemove;
 
 
         public ChannelMember(ChannelUserMapper channelUserMapper, Channel channel, Context context) {
@@ -497,7 +714,6 @@ protected Long doInBackground(Void... params) {
             if (channel != null && channelUserMapper != null) {
                 responseForRemove = channelService.removeMemberFromChannelProcess(channel.getKey(), channelUserMapper.getUserKey());
             }
-
             return null;
         }
 
@@ -507,8 +723,8 @@ protected void onPostExecute(Long aLong) {
             if (progressDialog != null && progressDialog.isShowing()) {
                 progressDialog.dismiss();
             }
-            if(!Utils.isInternetAvailable(context)){
-                Toast toast=  Toast.makeText(context, getString(R.string.you_dont_have_any_network_access_info), Toast.LENGTH_SHORT);
+            if (!Utils.isInternetAvailable(context)) {
+                Toast toast = Toast.makeText(context, getString(R.string.you_dont_have_any_network_access_info), Toast.LENGTH_SHORT);
                 toast.setGravity(Gravity.CENTER, 0, 0);
                 toast.show();
             }
@@ -522,35 +738,6 @@ protected void onPostExecute(Long aLong) {
 
     }
 
-    public void removeChannelUser(final Channel channel, final ChannelUserMapper channelUserMapper) {
-        AlertDialog.Builder alertDialog = new AlertDialog.Builder(this).
-                setPositiveButton(R.string.remove_member, new DialogInterface.OnClickListener() {
-                    @Override
-                    public void onClick(DialogInterface dialogInterface, int i) {
-                        new ChannelMember(channelUserMapper, channel, ChannelInfoActivity.this).execute();
-
-                    }
-                });
-        alertDialog.setNegativeButton(android.R.string.cancel, new DialogInterface.OnClickListener() {
-            @Override
-            public void onClick(DialogInterface dialogInterface, int i) {
-            }
-        });
-        String name = "";
-        String channelName = "";
-        Contact contact;
-        if (!TextUtils.isEmpty(channelUserMapper.getUserKey())) {
-            contact = baseContactService.getContactById(channelUserMapper.getUserKey());
-            name = contact.getDisplayName();
-            channelName = channel.getName();
-        }
-
-        alertDialog.setMessage(getString(R.string.dialog_remove_group_user).replace(getString(R.string.user_name_info), name).replace(getString(R.string.group_name_info), channelName));
-        alertDialog.setCancelable(true);
-        alertDialog.create().show();
-    }
-
-
     private class ContactViewHolder {
         public TextView displayName, alphabeticImage, adminTextView, lastSeenAtTextView;
         public CircleImageView circleImageView;
@@ -560,15 +747,14 @@ public ContactViewHolder() {
 
     }
 
-
     public class ChannelMemberAdd extends AsyncTask<Void, Integer, Long> {
+        ApiResponse apiResponse;
+        String responseForDeleteGroup;
+        String userId;
         private ChannelService channelService;
         private ProgressDialog progressDialog;
         private Context context;
         private Channel channel;
-        String responseForAdd;
-        String responseForDeleteGroup;
-        String userId;
 
 
         public ChannelMemberAdd(Channel channel, String userId, Context context) {
@@ -587,10 +773,10 @@ public ChannelMemberAdd(Channel channel, Context context) {
         @Override
         protected void onPreExecute() {
             super.onPreExecute();
-            if(!TextUtils.isEmpty(userId)){
+            if (!TextUtils.isEmpty(userId)) {
                 progressDialog = ProgressDialog.show(context, "",
                         context.getString(R.string.adding_channel_user), true);
-            }else {
+            } else {
                 progressDialog = ProgressDialog.show(context, "",
                         context.getString(R.string.deleting_channel_user), true);
             }
@@ -599,9 +785,9 @@ protected void onPreExecute() {
         @Override
         protected Long doInBackground(Void... params) {
             if (channel != null && !TextUtils.isEmpty(userId)) {
-                responseForAdd = channelService.addMemberToChannelProcess(channel.getKey(), userId);
+                apiResponse = channelService.addMemberToChannelWithResponseProcess(channel.getKey(), userId);
             }
-            if(channel != null && TextUtils.isEmpty(userId)){
+            if (channel != null && TextUtils.isEmpty(userId)) {
                 responseForDeleteGroup = channelService.processChannelDeleteConversation(channel, context);
             }
             return null;
@@ -613,102 +799,52 @@ protected void onPostExecute(Long aLong) {
             if (progressDialog != null && progressDialog.isShowing()) {
                 progressDialog.dismiss();
             }
-            if(!Utils.isInternetAvailable(context)){
-                Toast toast=  Toast.makeText(context, getString(R.string.you_dont_have_any_network_access_info), Toast.LENGTH_SHORT);
+            if (!Utils.isInternetAvailable(context)) {
+                Toast toast = Toast.makeText(context, getString(R.string.you_dont_have_any_network_access_info), Toast.LENGTH_SHORT);
                 toast.setGravity(Gravity.CENTER, 0, 0);
                 toast.show();
             }
-            if (!TextUtils.isEmpty(responseForAdd) && SUCCESS.equals(responseForAdd)) {
-                ChannelUserMapper channelUserMapper = new ChannelUserMapper(channel.getKey(), userId);
-                channelUserMapperList.add(channelUserMapper);
-                contactsAdapter.notifyDataSetChanged();
+            if (apiResponse != null) {
+                if (apiResponse.isSuccess()) {
+                    ChannelUserMapper channelUserMapper = new ChannelUserMapper(channel.getKey(), userId);
+                    channelUserMapperList.add(channelUserMapper);
+                    contactsAdapter.notifyDataSetChanged();
+                } else {
+                    List<ErrorResponseFeed> error = apiResponse.getErrorResponse();
+                    if (error != null && error.size() > 0) {
+                        ErrorResponseFeed errorResponseFeed = error.get(0);
+                        String errorDescription = errorResponseFeed.getDescription();
+                        if (!TextUtils.isEmpty(errorDescription)) {
+                            if (MobiComKitConstants.GROUP_USER_LIMIT_EXCEED.equalsIgnoreCase(errorDescription)) {
+                                Toast.makeText(context, R.string.group_members_limit_exceeds, Toast.LENGTH_SHORT).show();
+                            } else {
+                                Toast.makeText(context, R.string.applozic_server_error, Toast.LENGTH_SHORT).show();
+                            }
+                        }
+                    }
+                }
             }
-
             if (!TextUtils.isEmpty(responseForDeleteGroup) && SUCCESS.equals(responseForDeleteGroup)) {
                 Intent intent = new Intent(ChannelInfoActivity.this, ConversationActivity.class);
-                if(ApplozicClient.getInstance(ChannelInfoActivity.this).isContextBasedChat()){
-                    intent.putExtra(ConversationUIService.CONTEXT_BASED_CHAT,true);
+                if (ApplozicClient.getInstance(ChannelInfoActivity.this).isContextBasedChat()) {
+                    intent.putExtra(ConversationUIService.CONTEXT_BASED_CHAT, true);
                 }
                 startActivity(intent);
-                MobiComUserPreference.getInstance(ChannelInfoActivity.this).setDeleteChannel(true);
+                userPreference.setDeleteChannel(true);
                 finish();
             }
 
         }
     }
 
-    public void addChannelUser(final String userId, final Channel channel) {
-        AlertDialog.Builder alertDialog = new AlertDialog.Builder(this).
-                setPositiveButton(R.string.add_member, new DialogInterface.OnClickListener() {
-                    @Override
-                    public void onClick(DialogInterface dialogInterface, int i) {
-                        new ChannelMemberAdd(channel, userId, ChannelInfoActivity.this).execute();
-
-                    }
-                });
-        alertDialog.setNegativeButton(android.R.string.cancel, new DialogInterface.OnClickListener() {
-            @Override
-            public void onClick(DialogInterface dialogInterface, int i) {
-            }
-        });
-        String name = "";
-        String channelName = "";
-        Contact contact ;
-        if (channel != null) {
-            contact = baseContactService.getContactById(userId);
-            name = contact.getDisplayName();
-            channelName = channel.getName();
-        }
-        alertDialog.setMessage(getString(R.string.dialog_add_group_user).replace(getString(R.string.user_name_info), name).replace(getString(R.string.group_name_info), channelName));
-        alertDialog.setCancelable(true);
-        alertDialog.create().show();
-    }
-
-
-    public void leaveChannel(final Channel channel) {
-        AlertDialog.Builder alertDialog = new AlertDialog.Builder(this).
-                setPositiveButton(R.string.channel_exit, new DialogInterface.OnClickListener() {
-                    @Override
-                    public void onClick(DialogInterface dialogInterface, int i) {
-                        new ChannelAsync(channel, ChannelInfoActivity.this).execute();
-                    }
-                });
-        alertDialog.setNegativeButton(android.R.string.cancel, new DialogInterface.OnClickListener() {
-            @Override
-            public void onClick(DialogInterface dialogInterface, int i) {
-            }
-        });
-        alertDialog.setMessage(getString(R.string.leave_channel));
-        alertDialog.setCancelable(true);
-        alertDialog.create().show();
-    }
-
-    public void deleteChannel(final Channel channel) {
-        AlertDialog.Builder alertDialog = new AlertDialog.Builder(this).
-                setPositiveButton(R.string.channel_deleting, new DialogInterface.OnClickListener() {
-                    @Override
-                    public void onClick(DialogInterface dialogInterface, int i) {
-                        new ChannelMemberAdd(channel, ChannelInfoActivity.this).execute();
-                    }
-                });
-        alertDialog.setNegativeButton(android.R.string.cancel, new DialogInterface.OnClickListener() {
-            @Override
-            public void onClick(DialogInterface dialogInterface, int i) {
-            }
-        });
-        alertDialog.setMessage(getString(R.string.delete_channel_messages_and_channel_info).replace(getString(R.string.group_name_info),channel.getName()));
-        alertDialog.setCancelable(true);
-        alertDialog.create().show();
-    }
-
     public class ChannelAsync extends AsyncTask<Void, Integer, Long> {
+        GroupInfoUpdate groupInfoUpdate;
+        String responseForExit;
+        String responseForChannelUpdate;
         private ChannelService channelService;
         private ProgressDialog progressDialog;
         private Context context;
         private Channel channel;
-        GroupInfoUpdate groupInfoUpdate;
-        String responseForExit;
-        String responseForChannelUpdate;
 
         public ChannelAsync(Channel channel, Context context) {
             this.channel = channel;
@@ -741,20 +877,20 @@ protected void onPreExecute() {
         @Override
         protected Long doInBackground(Void... params) {
             if (groupInfoUpdate != null) {
-                if(!TextUtils.isEmpty(groupInfoUpdate.getNewlocalPath())){
+                if (!TextUtils.isEmpty(groupInfoUpdate.getNewlocalPath())) {
                     try {
-                        String  response= new FileClientService(context).uploadProfileImage(groupInfoUpdate.getNewlocalPath());
+                        String response = new FileClientService(context).uploadProfileImage(groupInfoUpdate.getNewlocalPath());
                         groupInfoUpdate.setImageUrl(response);
                     } catch (UnsupportedEncodingException e) {
                         e.printStackTrace();
                     }
-                }else{
+                } else {
                     groupInfoUpdate.setImageUrl(null);
                 }
                 responseForChannelUpdate = channelService.updateChannel(groupInfoUpdate);
             }
             if (channel != null) {
-                responseForExit = channelService.leaveMemberFromChannelProcess(channel.getKey(),MobiComUserPreference.getInstance(context).getUserId());
+                responseForExit = channelService.leaveMemberFromChannelProcess(channel.getKey(), userPreference.getUserId());
             }
             return null;
         }
@@ -765,13 +901,13 @@ protected void onPostExecute(Long aLong) {
             if (progressDialog != null && progressDialog.isShowing()) {
                 progressDialog.dismiss();
             }
-            if(channel != null && !Utils.isInternetAvailable(context)){
-                Toast toast=  Toast.makeText(context, getString(R.string.failed_to_leave_group), Toast.LENGTH_SHORT);
+            if (channel != null && !Utils.isInternetAvailable(context)) {
+                Toast toast = Toast.makeText(context, getString(R.string.failed_to_leave_group), Toast.LENGTH_SHORT);
                 toast.setGravity(Gravity.CENTER, 0, 0);
                 toast.show();
             }
-            if(groupInfoUpdate != null && !Utils.isInternetAvailable(context)){
-                Toast toast=  Toast.makeText(context, getString(R.string.internet_connection_for_group_name_info), Toast.LENGTH_SHORT);
+            if (groupInfoUpdate != null && !Utils.isInternetAvailable(context)) {
+                Toast toast = Toast.makeText(context, getString(R.string.internet_connection_for_group_name_info), Toast.LENGTH_SHORT);
                 toast.setGravity(Gravity.CENTER, 0, 0);
                 toast.show();
             }
@@ -779,25 +915,34 @@ protected void onPostExecute(Long aLong) {
                 ChannelInfoActivity.this.finish();
             }
             if (!TextUtils.isEmpty(responseForChannelUpdate) && SUCCESS.equals(responseForChannelUpdate)) {
-                if(!TextUtils.isEmpty(groupInfoUpdate.getNewName())){
+                if (!TextUtils.isEmpty(groupInfoUpdate.getNewName())) {
                     mActionBar.setTitle(groupInfoUpdate.getNewName());
                     collapsingToolbarLayout.setTitle(groupInfoUpdate.getNewName());
                 }
                 //File has been updated..rename new file to oldfile
-                if(!TextUtils.isEmpty(groupInfoUpdate.getNewlocalPath()) && !TextUtils.isEmpty(groupInfoUpdate.getImageUrl())){
+                if (!TextUtils.isEmpty(groupInfoUpdate.getNewlocalPath()) && !TextUtils.isEmpty(groupInfoUpdate.getImageUrl()) && !TextUtils.isEmpty(groupInfoUpdate.getContentUri())) {
                     File file = new File(groupInfoUpdate.getNewlocalPath());
                     channel = ChannelInfoActivity.this.channel;
-                    if(!TextUtils.isEmpty(channel.getLocalImageUri())){
+                    if (!TextUtils.isEmpty(channel.getLocalImageUri())) {
                         file.renameTo(new File(channel.getLocalImageUri()));
-                    }else{
-                        file.renameTo(FileClientService.getFilePath(channel.getKey() + "_profile.jpeg",context,"image"));
+                    } else {
+                        file.renameTo(FileClientService.getFilePath(channel.getKey() + "_profile.jpeg", context.getApplicationContext(), "image"));
                     }
                     channel.setLocalImageUri(file.getAbsolutePath());
                     channelService.updateChannel(channel);
-                    channelImage.setImageURI(Uri.fromFile(file));
+                    channelImage.setImageURI(Uri.parse(groupInfoUpdate.getContentUri()));
                 }
             }
         }
     }
 
+
+    public class RefreshBroadcast extends BroadcastReceiver {
+
+        @Override
+        public void onReceive(Context context, Intent intent) {
+            updateChannelList();
+        }
+    }
+
 }
\ No newline at end of file
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/ChannelNameActivity.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/ChannelNameActivity.java
index fad9e77f..f3a0702f 100644
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/ChannelNameActivity.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/ChannelNameActivity.java
@@ -1,17 +1,32 @@
 package com.applozic.mobicomkit.uiwidgets.conversation.activity;
 
 
+import android.app.Activity;
+import android.app.ProgressDialog;
+import android.content.Context;
 import android.content.Intent;
+import android.content.IntentFilter;
+import android.content.pm.PackageManager;
+import android.graphics.Color;
+import android.graphics.drawable.ColorDrawable;
+import android.net.ConnectivityManager;
 import android.net.Uri;
+import android.os.AsyncTask;
+import android.os.Build;
 import android.os.Bundle;
+import android.os.Handler;
 import android.support.annotation.NonNull;
 import android.support.design.widget.Snackbar;
 import android.support.v4.app.ActivityCompat;
+import android.support.v4.app.DialogFragment;
+import android.support.v4.app.Fragment;
+import android.support.v4.app.FragmentManager;
+import android.support.v4.app.FragmentTransaction;
+import android.support.v4.content.FileProvider;
 import android.support.v7.app.ActionBar;
 import android.support.v7.app.AppCompatActivity;
 import android.support.v7.widget.Toolbar;
 import android.text.TextUtils;
-import android.util.Log;
 import android.view.View;
 import android.widget.Button;
 import android.widget.EditText;
@@ -19,39 +34,56 @@
 import android.widget.LinearLayout;
 import android.widget.Toast;
 
-
+import com.applozic.mobicomkit.api.MobiComKitConstants;
+import com.applozic.mobicomkit.api.attachment.FileClientService;
+import com.applozic.mobicomkit.broadcast.ConnectivityReceiver;
+import com.applozic.mobicomkit.channel.service.ChannelService;
 import com.applozic.mobicomkit.feed.GroupInfoUpdate;
+import com.applozic.mobicomkit.uiwidgets.AlCustomizationSettings;
 import com.applozic.mobicomkit.uiwidgets.R;
+import com.applozic.mobicomkit.uiwidgets.conversation.fragment.PictureUploadPopUpFragment;
 import com.applozic.mobicomkit.uiwidgets.instruction.ApplozicPermissions;
+import com.applozic.mobicomkit.uiwidgets.people.fragment.ProfileFragment;
+import com.applozic.mobicomkit.uiwidgets.uilistener.MobicomkitUriListener;
 import com.applozic.mobicommons.commons.core.utils.PermissionsUtils;
 import com.applozic.mobicommons.commons.core.utils.Utils;
-import com.applozic.mobicommons.file.FilePathFinder;
+import com.applozic.mobicommons.file.FileUtils;
 import com.applozic.mobicommons.json.GsonUtils;
-import com.soundcloud.android.crop.Crop;
+import com.applozic.mobicommons.people.channel.Channel;
+import com.theartofdev.edmodo.cropper.CropImage;
+import com.theartofdev.edmodo.cropper.CropImageView;
 
 import java.io.File;
+import java.lang.ref.WeakReference;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+
+import de.hdodenhof.circleimageview.CircleImageView;
 
 /**
  * Created by sunil on 10/3/16.
  */
-public class ChannelNameActivity extends AppCompatActivity implements ActivityCompat.OnRequestPermissionsResultCallback {
+public class ChannelNameActivity extends AppCompatActivity implements ActivityCompat.OnRequestPermissionsResultCallback, MobicomkitUriListener, RemoveInterfaceListener {
 
-    private static final String TAG = "ChannelNameActivity";
-    private EditText channelName;
-    private Button ok, cancel;
     public static final String CHANNEL_NAME = "CHANNEL_NAME";
     public static final String CHANNEL_IMAGE_URL = "IMAGE_URL";
-    private static final int REQUEST_CODE_ATTACH_PHOTO = 701;
+    public static final int REQUEST_CODE_ATTACH_PHOTO = 101;
+    private static final String TAG = "ChannelNameActivity";
     String oldChannelName;
     ActionBar mActionBar;
+    GroupInfoUpdate groupInfoUpdate;
+    File profilePhotoFile;
+    FileClientService fileClientService;
+    private EditText channelName;
+    private Button ok, cancel;
     private ImageView selectImageProfileIcon;
     private ImageView applozicGroupProfileIcon;
-    GroupInfoUpdate groupInfoUpdate;
     private LinearLayout layout;
     private Uri imageChangeUri;
     private Snackbar snackbar;
     private ApplozicPermissions applozicPermissions;
-
+    private AlCustomizationSettings alCustomizationSettings;
+    private ConnectivityReceiver connectivityReceiver;
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
@@ -63,26 +95,43 @@ protected void onCreate(Bundle savedInstanceState) {
         layout = (LinearLayout) findViewById(R.id.footerAd);
         applozicPermissions = new ApplozicPermissions(this, layout);
         mActionBar.setTitle(getString(R.string.update_channel_title_name));
-        selectImageProfileIcon = (ImageView) findViewById(R.id.applozic_group_profile_camera);
+        selectImageProfileIcon = (CircleImageView) findViewById(R.id.applozic_group_profile_camera);
         applozicGroupProfileIcon = (ImageView) findViewById(R.id.applozic_group_profile);
+        String jsonString = FileUtils.loadSettingsJsonFile(getApplicationContext());
+        fileClientService = new FileClientService(this);
+        if (!TextUtils.isEmpty(jsonString)) {
+            alCustomizationSettings = (AlCustomizationSettings) GsonUtils.getObjectFromJson(jsonString, AlCustomizationSettings.class);
+        } else {
+            alCustomizationSettings = new AlCustomizationSettings();
+        }
+
+        if(!TextUtils.isEmpty(alCustomizationSettings.getThemeColorPrimary()) && !TextUtils.isEmpty(alCustomizationSettings.getThemeColorPrimaryDark())){
+            mActionBar.setBackgroundDrawable(new ColorDrawable(Color.parseColor(alCustomizationSettings.getThemeColorPrimary())));
+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
+                getWindow().setStatusBarColor(Color.parseColor(alCustomizationSettings.getThemeColorPrimaryDark()));
+            }
+        }
+        int drawableResourceId = getResources().getIdentifier(alCustomizationSettings.getAttachCameraIconName(), "drawable", getPackageName());
+        selectImageProfileIcon.setImageResource(drawableResourceId);
 
         if (getIntent().getExtras() != null) {
-            String groupInfoJson  = getIntent().getExtras().getString(ChannelInfoActivity.GROUP_UPDTAE_INFO);
-            groupInfoUpdate = (GroupInfoUpdate) GsonUtils.getObjectFromJson(groupInfoJson,GroupInfoUpdate.class);
+            String groupInfoJson = getIntent().getExtras().getString(ChannelInfoActivity.GROUP_UPDTAE_INFO);
+            groupInfoUpdate = (GroupInfoUpdate) GsonUtils.getObjectFromJson(groupInfoJson, GroupInfoUpdate.class);
         }
 
-        if( groupInfoUpdate!=null && !TextUtils.isEmpty(groupInfoUpdate.getLocalImagePath())){
-            Uri uri =  Uri.fromFile(new File(groupInfoUpdate.getLocalImagePath()));
-            if(uri!=null){
-                Log.i("ChannelNameActivity::",   uri.toString());
+        if (groupInfoUpdate != null && !TextUtils.isEmpty(groupInfoUpdate.getLocalImagePath())) {
+            File file = new File(groupInfoUpdate.getLocalImagePath());
+            Uri uri = Uri.parse(file.getAbsolutePath());
+            if (uri != null) {
+                Utils.printLog(this,"ChannelNameActivity::", uri.toString());
                 applozicGroupProfileIcon.setImageURI(uri);
             }
-        }else{
+        } else {
             applozicGroupProfileIcon.setImageResource(R.drawable.applozic_group_icon);
 
         }
         channelName = (EditText) findViewById(R.id.newChannelName);
-        channelName.setText( groupInfoUpdate.getNewName());
+        channelName.setText(groupInfoUpdate.getNewName());
         ok = (Button) findViewById(R.id.channelNameOk);
         cancel = (Button) findViewById(R.id.channelNameCancel);
         selectImageProfileIcon.setOnClickListener(new View.OnClickListener() {
@@ -96,7 +145,7 @@ public void onClick(View v) {
             @Override
             public void onClick(View v) {
 
-                if (groupInfoUpdate.getNewName().equals(channelName.getText().toString())&& imageChangeUri==null) {
+                if (channelName.getText().toString().equals(groupInfoUpdate.getNewName()) && imageChangeUri == null || groupInfoUpdate.getNewName() == null) {
                     ChannelNameActivity.this.finish();
                 }
                 if (TextUtils.isEmpty(channelName.getText().toString()) || channelName.getText().toString().trim().length() == 0) {
@@ -107,11 +156,11 @@ public void onClick(View v) {
                 } else {
                     Intent intent = new Intent();
                     groupInfoUpdate.setNewName(channelName.getText().toString());
-                    if(imageChangeUri!=null){
-                        String filePath = FilePathFinder.getPath(ChannelNameActivity.this, imageChangeUri);
-                        groupInfoUpdate.setNewlocalPath(filePath);
+                    if (imageChangeUri != null && profilePhotoFile != null) {
+                        groupInfoUpdate.setNewlocalPath(profilePhotoFile.getAbsolutePath());
+                        groupInfoUpdate.setContentUri(imageChangeUri.toString());
                     }
-                    intent.putExtra(ChannelInfoActivity.GROUP_UPDTAE_INFO,GsonUtils.getJsonFromObject(groupInfoUpdate,GroupInfoUpdate.class));
+                    intent.putExtra(ChannelInfoActivity.GROUP_UPDTAE_INFO, GsonUtils.getJsonFromObject(groupInfoUpdate, GroupInfoUpdate.class));
                     setResult(RESULT_OK, intent);
                     finish();
                 }
@@ -124,6 +173,8 @@ public void onClick(View v) {
 
             }
         });
+        connectivityReceiver = new ConnectivityReceiver();
+        registerReceiver(connectivityReceiver, new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION));
     }
 
     @Override
@@ -135,7 +186,14 @@ public void onRequestPermissionsResult(int requestCode, @NonNull String[] permis
             } else {
                 showSnackBar(R.string.storage_permission_not_granted);
             }
-        }else {
+        } else if (requestCode == PermissionsUtils.REQUEST_CAMERA) {
+            if (grantResults.length == 1 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
+                showSnackBar(R.string.phone_camera_permission_granted);
+                processImagePicker();
+            } else {
+                showSnackBar(R.string.phone_camera_permission_not_granted);
+            }
+        } else {
             super.onRequestPermissionsResult(requestCode, permissions, grantResults);
         }
     }
@@ -143,42 +201,189 @@ public void onRequestPermissionsResult(int requestCode, @NonNull String[] permis
     @Override
     protected void onActivityResult(int requestCode, int resultCode, Intent intent) {
         super.onActivityResult(requestCode, resultCode, intent);
-        Uri selectedFileUri=null;
-        if(requestCode == REQUEST_CODE_ATTACH_PHOTO  && resultCode == RESULT_OK){
-            selectedFileUri = (intent == null ? null : intent.getData());
-            beginCrop(selectedFileUri);
-        }
-        if (requestCode == Crop.REQUEST_CROP && resultCode == RESULT_OK) {
-            try{
-                imageChangeUri = Crop.getOutput(intent);
-                applozicGroupProfileIcon.setImageDrawable(null); // <--- added to force redraw of ImageView
-                applozicGroupProfileIcon.setImageURI(imageChangeUri);
-            }catch (Exception e){
-                Log.i(TAG, "exception in profile image");
+        if (requestCode == CropImage.CROP_IMAGE_ACTIVITY_REQUEST_CODE) {
+            CropImage.ActivityResult result = CropImage.getActivityResult(intent);
+            if (resultCode == RESULT_OK) {
+                if (intent == null) {
+                    return;
+                }
+                if (imageChangeUri != null) {
+                    imageChangeUri = result.getUri();
+                    applozicGroupProfileIcon.setImageDrawable(null); // <--- added to force redraw of ImageView
+                    applozicGroupProfileIcon.setImageURI(imageChangeUri);
+                } else {
+                    imageChangeUri = result.getUri();
+                    String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());
+                    String imageFileName = "JPEG_" + timeStamp + "_" + ".jpeg";
+                    applozicGroupProfileIcon.setImageDrawable(null); // <--- added to force redraw of ImageView
+                    applozicGroupProfileIcon.setImageURI(imageChangeUri);
+                    profilePhotoFile = FileClientService.getFilePath(imageFileName, this, "image/jpeg");
+                    fileClientService.writeFile(imageChangeUri, profilePhotoFile);
+                }
+            } else if (resultCode == CropImage.CROP_IMAGE_ACTIVITY_RESULT_ERROR_CODE) {
+                Utils.printLog(this,ChannelNameActivity.class.getName(),this.getString(R.string.applozic_Cropping_failed)+result.getError());
             }
         }
-
+        if (resultCode == Activity.RESULT_OK) {
+            handleOnActivityResult(requestCode, intent);
+        }
     }
 
-    private void beginCrop(Uri source) {
-        Uri destination = Uri.fromFile(new File(getCacheDir(),groupInfoUpdate.getGroupId()+ "_profile_temp.jpeg"));
-        Crop.of(source, destination).asSquare().start(this);
+    public void handleOnActivityResult(int requestCode, Intent intent) {
+
+        switch (requestCode) {
+
+            case ProfileFragment.REQUEST_CODE_ATTACH_PHOTO:
+                Uri selectedFileUri = (intent == null ? null : intent.getData());
+                imageChangeUri = null;
+                beginCrop(selectedFileUri);
+                break;
+
+            case ProfileFragment.REQUEST_CODE_TAKE_PHOTO:
+                beginCrop(imageChangeUri);
+                break;
+        }
     }
 
-    public void processImagePicker(){
-        if(Utils.hasMarshmallow() && PermissionsUtils.checkSelfForStoragePermission(this)){
-            applozicPermissions.requestStoragePermissions();
-        }else {
-            Intent getContentIntent = new Intent(Intent.ACTION_PICK,
-                    android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
-            startActivityForResult(getContentIntent, REQUEST_CODE_ATTACH_PHOTO);
+    void beginCrop(Uri imageUri) {
+        try {
+            CropImage.activity(imageUri)
+                    .setGuidelines(CropImageView.Guidelines.OFF)
+                    .setMultiTouchEnabled(true)
+                    .start(this);
+
+        } catch (Exception e) {
+            e.printStackTrace();
         }
     }
 
+
+    @Override
+    public Uri getCurrentImageUri() {
+        String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());
+        String imageFileName = "JPEG_" + timeStamp + "_" + ".jpeg";
+        profilePhotoFile = FileClientService.getFilePath(imageFileName, getApplicationContext(), "image/jpeg");
+        imageChangeUri = FileProvider.getUriForFile(this, Utils.getMetaDataValue(this, MobiComKitConstants.PACKAGE_NAME) + ".provider", profilePhotoFile);
+        return imageChangeUri;
+    }
+
     public void showSnackBar(int resId) {
         snackbar = Snackbar.make(layout, resId,
                 Snackbar.LENGTH_SHORT);
         snackbar.show();
     }
 
+    public void processImagePicker() {
+
+        if (PermissionsUtils.isCameraPermissionGranted(this) && !PermissionsUtils.checkSelfForStoragePermission(this)) {
+
+            new Handler().post(new Runnable() {
+                public void run() {
+                    FragmentManager supportFragmentManager = getSupportFragmentManager();
+                    Channel channel = ChannelService.getInstance(ChannelNameActivity.this).getChannel(groupInfoUpdate.getGroupId());
+                    DialogFragment fragment = PictureUploadPopUpFragment.newInstance(true, TextUtils.isEmpty(channel.getImageUrl()));
+                    FragmentTransaction fragmentTransaction = supportFragmentManager
+                            .beginTransaction();
+                    Fragment prev = getSupportFragmentManager().findFragmentByTag("PhotosAttachmentFragment");
+                    if (prev != null) {
+                        fragmentTransaction.remove(prev);
+                    }
+                    fragmentTransaction.addToBackStack(null);
+                    fragment.show(fragmentTransaction, "PhotosAttachmentFragment");
+                }
+            });
+
+        } else {
+            if (Utils.hasMarshmallow()) {
+                if (PermissionsUtils.checkSelfForCameraPermission(this)) {
+                    applozicPermissions.requestCameraPermission();
+                } else {
+                    applozicPermissions.requestStoragePermissions();
+                }
+            } else {
+                processImagePicker();
+            }
+        }
+    }
+
+    @Override
+    public void removeCallBack() {
+        try {
+            new ProfilePictureUpload(this, applozicGroupProfileIcon, groupInfoUpdate).execute((Void) null);
+
+        } catch (Exception e) {
+
+        }
+    }
+
+    @Override
+    protected void onDestroy() {
+        super.onDestroy();
+        try {
+            if (connectivityReceiver != null) {
+                unregisterReceiver(connectivityReceiver);
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+
+    class ProfilePictureUpload extends AsyncTask<Void, Void, Boolean> {
+        Context context;
+        WeakReference<ImageView> weakReferenceImageView;
+        FileClientService fileClientService;
+        ChannelService channelService;
+        String responseForChannelUpdate;
+        WeakReference<GroupInfoUpdate> groupInfoUpdateWeakReference;
+        private ProgressDialog progressDialog;
+
+        public ProfilePictureUpload(Context context, ImageView imageView, GroupInfoUpdate groupInfoUpdate) {
+            this.context = context;
+            this.weakReferenceImageView = new WeakReference<ImageView>(imageView);
+            this.fileClientService = new FileClientService(context);
+            this.channelService = ChannelService.getInstance(context);
+            this.groupInfoUpdateWeakReference = new WeakReference<GroupInfoUpdate>(groupInfoUpdate);
+
+        }
+
+        @Override
+        protected void onPreExecute() {
+            super.onPreExecute();
+            progressDialog = ProgressDialog.show(context, "",
+                    context.getString(R.string.applozic_contacts_loading_info), true);
+        }
+
+        @Override
+        protected Boolean doInBackground(Void... params) {
+            try {
+                GroupInfoUpdate giu = groupInfoUpdateWeakReference.get();
+                if (giu != null) {
+                    giu.setImageUrl("");
+                    giu.setNewName(null);
+                    responseForChannelUpdate = channelService.updateChannel(giu);
+                    if (!TextUtils.isEmpty(responseForChannelUpdate) && MobiComKitConstants.SUCCESS.equals(responseForChannelUpdate)) {
+                        channelService.updateChannelLocalImageURI(giu.getGroupId(), null);
+                    }
+                }
+            } catch (Exception e) {
+                e.printStackTrace();
+            }
+            return true;
+        }
+
+        @Override
+        protected void onPostExecute(final Boolean result) {
+            progressDialog.dismiss();
+            if (!TextUtils.isEmpty(responseForChannelUpdate) && MobiComKitConstants.SUCCESS.equals(responseForChannelUpdate)) {
+                ImageView imageView = weakReferenceImageView.get();
+                if (imageView != null) {
+                    imageChangeUri = null;
+                    imageView.setImageDrawable(null); // <--- added to force redraw of ImageView
+                    imageView.setImageResource(R.drawable.applozic_group_icon);
+                }
+            }
+        }
+
+    }
+
 }
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/ContactSelectionActivity.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/ContactSelectionActivity.java
index 7e1cc3b5..e6c02750 100755
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/ContactSelectionActivity.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/ContactSelectionActivity.java
@@ -1,148 +1,131 @@
 package com.applozic.mobicomkit.uiwidgets.conversation.activity;
 
-import android.content.Context;
-import android.content.Intent;
-import android.graphics.Bitmap;
+import android.content.IntentFilter;
+import android.graphics.Color;
+import android.graphics.drawable.ColorDrawable;
+import android.net.ConnectivityManager;
+import android.os.Build;
 import android.os.Bundle;
+import android.support.v4.app.Fragment;
+import android.support.v4.app.FragmentActivity;
+import android.support.v4.app.FragmentManager;
+import android.support.v4.app.FragmentTransaction;
+import android.support.v4.view.MenuItemCompat;
 import android.support.v7.app.ActionBar;
 import android.support.v7.app.AppCompatActivity;
-import android.support.v7.widget.AppCompatCheckBox;
+import android.support.v7.widget.SearchView;
 import android.support.v7.widget.Toolbar;
 import android.text.TextUtils;
-import android.text.style.TextAppearanceSpan;
-import android.util.DisplayMetrics;
-import android.util.TypedValue;
-import android.view.LayoutInflater;
 import android.view.Menu;
 import android.view.MenuItem;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.AbsListView;
-import android.widget.AdapterView;
-import android.widget.AlphabetIndexer;
-import android.widget.BaseAdapter;
-import android.widget.CompoundButton;
-import android.widget.ListView;
-import android.widget.TextView;
-import android.widget.Toast;
 
-import com.applozic.mobicomkit.ApplozicClient;
-import com.applozic.mobicomkit.api.people.ChannelInfo;
-import com.applozic.mobicomkit.channel.service.ChannelService;
+import com.applozic.mobicomkit.broadcast.ConnectivityReceiver;
 import com.applozic.mobicomkit.contact.AppContactService;
-import com.applozic.mobicomkit.contact.BaseContactService;
+import com.applozic.mobicomkit.contact.database.ContactDatabase;
+import com.applozic.mobicomkit.uiwidgets.AlCustomizationSettings;
 import com.applozic.mobicomkit.uiwidgets.R;
-import com.applozic.mobicomkit.uiwidgets.conversation.ConversationUIService;
+import com.applozic.mobicomkit.uiwidgets.people.contact.ContactSelectionFragment;
 import com.applozic.mobicommons.commons.core.utils.Utils;
-import com.applozic.mobicommons.commons.image.ImageLoader;
+import com.applozic.mobicommons.file.FileUtils;
+import com.applozic.mobicommons.json.GsonUtils;
+import com.applozic.mobicommons.people.SearchListFragment;
 import com.applozic.mobicommons.people.channel.Channel;
-import com.applozic.mobicommons.people.contact.Contact;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import de.hdodenhof.circleimageview.CircleImageView;
 
 /**
  * Created by sunil on 6/2/16.
  */
-public class ContactSelectionActivity extends AppCompatActivity {
+public class ContactSelectionActivity extends AppCompatActivity implements SearchView.OnQueryTextListener {
     public static final String CHANNEL = "CHANNEL_NAME";
     public static final String CHANNEL_OBJECT = "CHANNEL";
     public static final String CHECK_BOX = "CHECK_BOX";
     public static final String IMAGE_LINK = "IMAGE_LINK";
-    ListView mainListView;
+    public static final String GROUP_TYPE = "GROUP_TYPE";
+    public static final String CONTACTS_GROUP_ID = "CONTACTS_GROUP_ID";
+    public static boolean isSearching = false;
+    protected SearchView searchView;
     Channel channel;
+    boolean disableCheckBox;
+    int groupType;
+    ContactDatabase contactDatabase;
+    ContactSelectionFragment contactSelectionFragment;
+    String contactsGroupId;
+    AlCustomizationSettings alCustomizationSettings;
     private String name;
     private String imageUrl;
-    private ContactsAdapter mAdapter;
-    private ImageLoader mImageLoader;
-    private BaseContactService contactService;
-    private List<Contact> contactList;
     private ActionBar mActionBar;
-    boolean disableCheckBox;
-    boolean isUserPresnt;
-    Integer groupType;
+    private SearchListFragment searchListFragment;
+    private boolean isSearchResultView = false;
+    private String mSearchTerm;
+    private AppContactService contactService;
+    private ConnectivityReceiver connectivityReceiver;
+
+    public static void addFragment(FragmentActivity fragmentActivity, Fragment fragmentToAdd, String fragmentTag) {
+        FragmentManager supportFragmentManager = fragmentActivity.getSupportFragmentManager();
+
+        FragmentTransaction fragmentTransaction = supportFragmentManager
+                .beginTransaction();
+        fragmentTransaction.replace(R.id.layout_child_activity, fragmentToAdd,
+                fragmentTag);
+
+        if (supportFragmentManager.getBackStackEntryCount() > 1) {
+            supportFragmentManager.popBackStack();
+        }
+        fragmentTransaction.addToBackStack(fragmentTag);
+        fragmentTransaction.commitAllowingStateLoss();
+        supportFragmentManager.executePendingTransactions();
+    }
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.contact_select_layout);
+        contactDatabase = new ContactDatabase(this);
+        contactSelectionFragment = new ContactSelectionFragment();
+        setSearchListFragment(contactSelectionFragment);
         Toolbar toolbar = (Toolbar) findViewById(R.id.my_toolbar);
         setSupportActionBar(toolbar);
         contactService = new AppContactService(this);
         mActionBar = getSupportActionBar();
+        String jsonString = FileUtils.loadSettingsJsonFile(getApplicationContext());
+        if (!TextUtils.isEmpty(jsonString)) {
+            alCustomizationSettings = (AlCustomizationSettings) GsonUtils.getObjectFromJson(jsonString, AlCustomizationSettings.class);
+        } else {
+            alCustomizationSettings = new AlCustomizationSettings();
+        }
+        if (!TextUtils.isEmpty(alCustomizationSettings.getThemeColorPrimary()) && !TextUtils.isEmpty(alCustomizationSettings.getThemeColorPrimaryDark())) {
+            mActionBar.setBackgroundDrawable(new ColorDrawable(Color.parseColor(alCustomizationSettings.getThemeColorPrimary())));
+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
+                getWindow().setStatusBarColor(Color.parseColor(alCustomizationSettings.getThemeColorPrimaryDark()));
+            }
+        }
         mActionBar.setDisplayShowHomeEnabled(true);
         mActionBar.setDisplayHomeAsUpEnabled(true);
         if (getIntent().getExtras() != null) {
             channel = (Channel) getIntent().getSerializableExtra(CHANNEL_OBJECT);
             disableCheckBox = getIntent().getBooleanExtra(CHECK_BOX, false);
             mActionBar.setTitle(R.string.channel_member_title);
+            name = getIntent().getStringExtra(CHANNEL);
+            imageUrl = getIntent().getStringExtra(IMAGE_LINK);
+            contactsGroupId = getIntent().getStringExtra(CONTACTS_GROUP_ID);
+            groupType = getIntent().getIntExtra(GROUP_TYPE, Channel.GroupType.PUBLIC.getValue().intValue());
         } else {
             mActionBar.setTitle(R.string.channel_members_title);
         }
-        mainListView = (ListView) findViewById(R.id.mainList);
-        mainListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
-            @Override
-            public void onItemClick(AdapterView<?> parent, View item,
-                                    int position, long id) {
-                Contact contact = contactList.get(position);
-                if (disableCheckBox) {
-                    isUserPresnt = ChannelService.getInstance(ContactSelectionActivity.this).isUserAlreadyPresentInChannel(channel.getKey(), contact.getContactIds());
-                    if (!isUserPresnt) {
-                        Intent intent = new Intent();
-                        intent.putExtra(ChannelInfoActivity.USERID, contact.getUserId());
-                        setResult(RESULT_OK, intent);
-                        finish();
-                    }
-                }
-                contact.toggleChecked();
-                ContactViewHolder viewHolder = (ContactViewHolder) item.getTag();
-                viewHolder.getCheckBox().setChecked(contact.isChecked());
-            }
-        });
-
-        mImageLoader = new ImageLoader(this, getListPreferredItemHeight()) {
-            @Override
-            protected Bitmap processBitmap(Object data) {
-                return contactService.downloadContactImage(getApplicationContext(), (Contact) data);
-            }
-        };
-        mImageLoader.setLoadingImage(R.drawable.applozic_ic_contact_picture_holo_light);
-        mImageLoader.addImageCache(this.getSupportFragmentManager(), 0.1f);
-        mImageLoader.setImageFadeIn(false);
-        contactList = contactService.getAllContactListExcludingLoggedInUser();
-        mAdapter = new ContactsAdapter(this);
-        mainListView.setAdapter(mAdapter);
-        mainListView.setOnScrollListener(new AbsListView.OnScrollListener() {
-            @Override
-            public void onScrollStateChanged(AbsListView absListView, int scrollState) {
-                // Pause image loader to ensure smoother scrolling when flinging
-                if (scrollState == AbsListView.OnScrollListener.SCROLL_STATE_FLING) {
-                    Utils.toggleSoftKeyBoard(ContactSelectionActivity.this, true);
-                    mImageLoader.setPauseWork(true);
-                } else {
-                    mImageLoader.setPauseWork(false);
-                }
-            }
-            @Override
-            public void onScroll(AbsListView absListView, int i, int i1, int i2) {
-            }
-
-        });
-
-    }
-
-    private int getListPreferredItemHeight() {
-        final TypedValue typedValue = new TypedValue();
-        this.getTheme().resolveAttribute(
-                android.R.attr.listPreferredItemHeight, typedValue, true);
-        final DisplayMetrics metrics = new DisplayMetrics();
-        this.getWindowManager().getDefaultDisplay().getMetrics(metrics);
-        return (int) typedValue.getDimension(metrics);
+        Bundle bundle = new Bundle();
+        bundle.putSerializable(CHANNEL_OBJECT, channel);
+        bundle.putBoolean(CHECK_BOX, disableCheckBox);
+        bundle.putString(CHANNEL, name);
+        bundle.putString(IMAGE_LINK, imageUrl);
+        bundle.putInt(GROUP_TYPE, groupType);
+        contactSelectionFragment.setArguments(bundle);
+        if (contactsGroupId != null) {
+            bundle.putString(CONTACTS_GROUP_ID, contactsGroupId);
+        }
+        addFragment(this, contactSelectionFragment, "ContactSelectionFragment");
+        connectivityReceiver = new ConnectivityReceiver();
+        registerReceiver(connectivityReceiver, new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION));
     }
 
-
     @Override
     public void onBackPressed() {
         super.onBackPressed();
@@ -157,48 +140,31 @@ public boolean onCreateOptionsMenu(Menu menu) {
         if (disableCheckBox) {
             menu.removeItem(R.id.Done);
         }
-        return true;
+        MenuItem searchItem = menu.findItem(R.id.menu_search);
+        searchView = (SearchView) MenuItemCompat.getActionView(searchItem);
+        searchView.setQueryHint(getResources().getString(R.string.search_hint));
+        if (Utils.hasICS()) {
+            searchItem.collapseActionView();
+        }
+        searchView.setOnQueryTextListener(this);
+        searchView.setSubmitButtonEnabled(true);
+        searchView.setIconified(true);
+        return super.onCreateOptionsMenu(menu);
     }
 
     @Override
     public boolean onOptionsItemSelected(MenuItem item) {
-        int id = item.getItemId();
-        if (id == R.id.Done) {
-            if (mAdapter.getResult().size() == 0) {
-                Toast.makeText(this, R.string.select_at_least, Toast.LENGTH_SHORT).show();
-            } else {
-                new Thread(new Runnable() {
-                    @Override
-                    public void run() {
-                        name = getIntent().getStringExtra(CHANNEL);
-                        imageUrl = getIntent().getStringExtra(IMAGE_LINK);
-                        // groupType = getIntent().getIntExtra(ChannelCreateActivity.GROUP_TYPE,2);
-                        List<String> channelMemberNames = null;
-                        if (!TextUtils.isEmpty(name) && mAdapter.getResult().size() > 0) {
-                            channelMemberNames = mAdapter.getResult();
-                            ChannelInfo channelInfo = new ChannelInfo(name, channelMemberNames);
-                            channelInfo.setImageUrl(imageUrl);
-                            // channelInfo.setType(groupType);
-                            Channel channel = ChannelService.getInstance(ContactSelectionActivity.this).createChannel(channelInfo);
-                            if (channel != null) {
-                                Intent intent = new Intent(getApplicationContext(), ConversationActivity.class);
-                                if (ApplozicClient.getInstance(ContactSelectionActivity.this).isContextBasedChat()) {
-                                    intent.putExtra(ConversationUIService.CONTEXT_BASED_CHAT, true);
-                                }
-                                intent.putExtra(ConversationUIService.GROUP_ID, channel.getKey());
-                                intent.putExtra(ConversationUIService.GROUP_NAME, channel.getName());
-                                startActivity(intent);
-                            }
-                        }
-                    }
-                }).start();
-                ChannelCreateActivity.channelActivity.finish();
-                finish();
-            }
-            return true;
+        if (item.getItemId() == R.id.menu_search) {
+            onSearchRequested();
         }
-        return false;
+        return super.onOptionsItemSelected(item);
+    }
 
+    @Override
+    public boolean onSearchRequested() {
+        // Don't allow another search if this activity instance is already showing
+        // search results. Only used pre-HC.
+        return !isSearchResultView && super.onSearchRequested();
     }
 
     @Override
@@ -206,186 +172,45 @@ public boolean onSupportNavigateUp() {
         this.finish();
         return super.onSupportNavigateUp();
     }
+
     @Override
-    public void onPause() {
-        super.onPause();
-        mImageLoader.setPauseWork(false);
+    public boolean onQueryTextSubmit(String query) {
+        this.mSearchTerm = query;
+        isSearching = false;
+        return false;
     }
 
-
-    private class ContactsAdapter extends BaseAdapter {
-        Context context;
-
-        CompoundButton.OnCheckedChangeListener myCheckChangList = new CompoundButton.OnCheckedChangeListener() {
-            public void onCheckedChanged(CompoundButton buttonView,
-                                         boolean isChecked) {
-                ((Contact) buttonView.getTag()).setChecked(isChecked);
-            }
-        };
-
-        private LayoutInflater mInflater; // Stores the layout inflater
-        private AlphabetIndexer mAlphabetIndexer; // Stores the AlphabetIndexer instance
-        private TextAppearanceSpan highlightTextSpan; // Stores the highlight text appearance style
-
-        public ContactsAdapter(Context context) {
-            this.context = context;
-            mInflater = LayoutInflater.from(context);
-            final String alphabet = context.getString(R.string.alphabet);
-
-            highlightTextSpan = new TextAppearanceSpan(ContactSelectionActivity.this, R.style.searchTextHiglight);
-        }
-
-        /**
-         * Overrides newView() to inflate the list item views.
-         */
-        @Override
-        public View getView(int position, View convertView, ViewGroup parent) {
-            // Inflates the list item layout.
-            AppCompatCheckBox checkBox;
-            TextView text2;
-            TextView text1;
-            Contact contact = getContact(position);
-            CircleImageView circleImageView;
-            if (convertView == null) {
-                convertView =
-                        mInflater.inflate(R.layout.contact_select_list_item, parent, false);
-
-                text1 = (TextView) convertView.findViewById(R.id.applozic_group_member_info);
-                text2 = (TextView) convertView.findViewById(R.id.displayName);
-                checkBox = (AppCompatCheckBox) convertView.findViewById(R.id.checkbox);
-                checkBox.setVisibility(View.VISIBLE);
-                circleImageView = (CircleImageView) convertView.findViewById(R.id.contactImage);
-                convertView.setTag(new ContactViewHolder(text1, text2, checkBox, circleImageView));
-            } else {
-                ContactViewHolder viewHolder = (ContactViewHolder) convertView
-                        .getTag();
-                checkBox = viewHolder.getCheckBox();
-                text1 = viewHolder.getTextView1();
-                text2 = viewHolder.getTextView2();
-                circleImageView = viewHolder.getCircleImageView();
-            }
-            if (disableCheckBox) {
-                isUserPresnt = ChannelService.getInstance(ContactSelectionActivity.this).isUserAlreadyPresentInChannel(channel.getKey(), contact.getContactIds());
-                if (isUserPresnt) {
-                    text1.setVisibility(View.VISIBLE);
-                    text1.setTextColor(getResources().getColor(R.color.applozic_lite_black_color));
-                    text2.setTextColor(getResources().getColor(R.color.applozic_lite_black_color));
-                } else {
-                    text1.setVisibility(View.GONE);
-                    text2.setTextColor(getResources().getColor(R.color.black));
-                }
-                checkBox.setVisibility(View.GONE);
-            } else {
-                text2.setTextColor(getResources().getColor(R.color.black));
-            }
-
-            if (contact.isDrawableResources()) {
-                int drawableResourceId = context.getResources().getIdentifier(contact.getrDrawableName(), "drawable", context.getPackageName());
-                circleImageView.setImageResource(drawableResourceId);
-            } else {
-                mImageLoader.loadImage(contact, circleImageView);
-            }
-
-            checkBox.setTag(contact);
-            checkBox.setChecked(contact.isChecked());
-            checkBox.setOnCheckedChangeListener(myCheckChangList);
-            text2.setText(contact.getDisplayName());
-            return convertView;
-        }
-
-        List<Contact> getContacts() {
-            List<Contact> selectedContactList = new ArrayList<>();
-            for (Contact contact : contactList) {
-                if (contact.isChecked()) {
-                    selectedContactList.add(contact);
-
-                }
-            }
-            return selectedContactList;
-        }
-
-        List<String> getResult() {
-            List<String> membersList = new ArrayList<>();
-            for (Contact contact : getContacts()) {
-                if (contact.isChecked()) {
-                    membersList.add(contact.getContactIds());
-                }
+    @Override
+    public boolean onQueryTextChange(String query) {
+        this.mSearchTerm = query;
+        if (getSearchListFragment() != null) {
+            getSearchListFragment().onQueryTextChange(query);
+            isSearching = true;
+
+            if (query.isEmpty()) {
+                isSearching = false;
             }
-            return membersList;
-        }
-
-        /**
-         * An override of getCount that simplifies accessing the Cursor. If the Cursor is null,
-         * getCount returns zero. As a result, no test for Cursor == null is needed.
-         */
-        @Override
-        public int getCount() {
-            return contactList.size();
         }
-
-        @Override
-        public Object getItem(int position) {
-            return contactList.get(position);
-        }
-
-        @Override
-        public long getItemId(int position) {
-            return 0;
-        }
-
-        Contact getContact(int position) {
-            return ((Contact) getItem(position));
-        }
-
+        return true;
     }
 
-    private class ContactViewHolder {
-        private AppCompatCheckBox checkBox;
-        private TextView textView1;
-        private CircleImageView circleImageView;
-        private TextView textView2;
-
-
-        public ContactViewHolder() {
-        }
-
-        public ContactViewHolder(TextView textView1, TextView textView2, AppCompatCheckBox checkBox, CircleImageView circleImageView) {
-            this.checkBox = checkBox;
-            this.textView1 = textView1;
-            this.textView2 = textView2;
-            this.circleImageView = circleImageView;
-        }
-
-        public AppCompatCheckBox getCheckBox() {
-            return checkBox;
-        }
-
-        public void setCheckBox(AppCompatCheckBox checkBox) {
-            this.checkBox = checkBox;
-        }
-
-        public CircleImageView getCircleImageView() {
-            return circleImageView;
-        }
-
-        public void setCircleImageView(CircleImageView circleImageView) {
-            this.circleImageView = circleImageView;
-        }
-
-        public TextView getTextView1() {
-            return textView1;
-        }
-
-        public void setTextView1(TextView textView2) {
-            this.textView1 = textView2;
-        }
+    public SearchListFragment getSearchListFragment() {
+        return searchListFragment;
+    }
 
-        public TextView getTextView2() {
-            return textView2;
-        }
+    public void setSearchListFragment(SearchListFragment searchListFragment) {
+        this.searchListFragment = searchListFragment;
+    }
 
-        public void setTextView2(TextView textView2) {
-            this.textView2 = textView2;
+    @Override
+    protected void onDestroy() {
+        super.onDestroy();
+        try {
+            if (connectivityReceiver != null) {
+                unregisterReceiver(connectivityReceiver);
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
         }
 
     }
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/ConversationActivity.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/ConversationActivity.java
index a6590146..663f5204 100755
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/ConversationActivity.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/ConversationActivity.java
@@ -1,15 +1,23 @@
 package com.applozic.mobicomkit.uiwidgets.conversation.activity;
 
+import android.annotation.SuppressLint;
 import android.app.AlertDialog;
+import android.content.ClipData;
 import android.content.Context;
 import android.content.DialogInterface;
 import android.content.Intent;
+import android.content.IntentFilter;
 import android.content.IntentSender;
 import android.content.pm.PackageManager;
+import android.content.pm.ResolveInfo;
 import android.graphics.Color;
+import android.graphics.drawable.ColorDrawable;
 import android.location.Location;
 import android.location.LocationManager;
+import android.net.ConnectivityManager;
 import android.net.Uri;
+import android.os.AsyncTask;
+import android.os.Build;
 import android.os.Bundle;
 import android.provider.ContactsContract;
 import android.provider.MediaStore;
@@ -21,9 +29,14 @@
 import android.support.v4.app.FragmentActivity;
 import android.support.v4.app.FragmentManager;
 import android.support.v4.app.FragmentTransaction;
+import android.support.v4.app.NavUtils;
+import android.support.v4.app.TaskStackBuilder;
+import android.support.v4.content.FileProvider;
 import android.support.v4.content.LocalBroadcastManager;
+import android.support.v4.view.MenuItemCompat;
 import android.support.v7.app.ActionBar;
 import android.support.v7.app.AppCompatActivity;
+import android.support.v7.widget.SearchView;
 import android.support.v7.widget.Toolbar;
 import android.text.TextUtils;
 import android.util.Log;
@@ -37,19 +50,23 @@
 import android.widget.Toast;
 
 import com.applozic.mobicomkit.ApplozicClient;
+import com.applozic.mobicomkit.api.MobiComKitConstants;
+import com.applozic.mobicomkit.api.account.register.RegisterUserClientService;
 import com.applozic.mobicomkit.api.account.user.MobiComUserPreference;
-import com.applozic.mobicomkit.api.account.user.UserService;
+import com.applozic.mobicomkit.api.account.user.User;
+import com.applozic.mobicomkit.api.account.user.UserClientService;
 import com.applozic.mobicomkit.api.attachment.FileClientService;
 import com.applozic.mobicomkit.api.conversation.ApplozicMqttIntentService;
 import com.applozic.mobicomkit.api.conversation.Message;
 import com.applozic.mobicomkit.api.conversation.MessageIntentService;
-import com.applozic.mobicomkit.api.conversation.MobiComConversationService;
 import com.applozic.mobicomkit.api.conversation.MobiComMessageService;
-import com.applozic.mobicomkit.api.conversation.SyncCallService;
 import com.applozic.mobicomkit.api.conversation.service.ConversationService;
+import com.applozic.mobicomkit.api.people.UserIntentService;
 import com.applozic.mobicomkit.broadcast.BroadcastService;
+import com.applozic.mobicomkit.broadcast.ConnectivityReceiver;
 import com.applozic.mobicomkit.contact.AppContactService;
 import com.applozic.mobicomkit.contact.BaseContactService;
+import com.applozic.mobicomkit.uiwidgets.AlCustomizationSettings;
 import com.applozic.mobicomkit.uiwidgets.ApplozicSetting;
 import com.applozic.mobicomkit.uiwidgets.R;
 import com.applozic.mobicomkit.uiwidgets.conversation.ConversationUIService;
@@ -65,6 +82,9 @@
 import com.applozic.mobicomkit.uiwidgets.uilistener.MobicomkitUriListener;
 import com.applozic.mobicommons.commons.core.utils.PermissionsUtils;
 import com.applozic.mobicommons.commons.core.utils.Utils;
+import com.applozic.mobicommons.file.FileUtils;
+import com.applozic.mobicommons.json.GsonUtils;
+import com.applozic.mobicommons.people.SearchListFragment;
 import com.applozic.mobicommons.people.channel.Channel;
 import com.applozic.mobicommons.people.channel.Conversation;
 import com.applozic.mobicommons.people.contact.Contact;
@@ -74,18 +94,20 @@
 import com.google.android.gms.location.LocationListener;
 import com.google.android.gms.location.LocationRequest;
 import com.google.android.gms.location.LocationServices;
-import com.soundcloud.android.crop.Crop;
-
+import com.theartofdev.edmodo.cropper.CropImage;
+import com.theartofdev.edmodo.cropper.CropImageView;
 
 import java.io.File;
+import java.lang.ref.WeakReference;
 import java.text.SimpleDateFormat;
 import java.util.Date;
+import java.util.List;
 
 
 /**
  * Created by devashish on 6/25/2015.
  */
-public class ConversationActivity extends AppCompatActivity implements MessageCommunicator, MobiComKitActivityInterface, GoogleApiClient.ConnectionCallbacks, GoogleApiClient.OnConnectionFailedListener, LocationListener, ActivityCompat.OnRequestPermissionsResultCallback,MobicomkitUriListener {
+public class ConversationActivity extends AppCompatActivity implements MessageCommunicator, MobiComKitActivityInterface, GoogleApiClient.ConnectionCallbacks, GoogleApiClient.OnConnectionFailedListener, LocationListener, ActivityCompat.OnRequestPermissionsResultCallback, MobicomkitUriListener, SearchView.OnQueryTextListener, OnClickReplyInterface {
 
     public static final int LOCATION_SERVICE_ENABLE = 1001;
     public static final String TAKE_ORDER = "takeOrder";
@@ -96,64 +118,104 @@
     public static final String ACTIVITY_TO_OPEN_ONCLICK_OF_CALL_BUTTON_META_DATA = "activity.open.on.call.button.click";
     protected static final long UPDATE_INTERVAL = 500;
     protected static final long FASTEST_INTERVAL = 1;
+    private static final String LOAD_FILE = "loadFile";
     private final static int CONNECTION_FAILURE_RESOLUTION_REQUEST = 9000;
     private static final String API_KYE_STRING = "YOUR_GEO_API_KEY";
     private static final String CAPTURED_IMAGE_URI = "capturedImageUri";
     private static final String CAPTURED_VIDEO_URI = "capturedVideoUri";
-
     private static final String SHARE_TEXT = "share_text";
+    public static final String CONTACTS_GROUP_ID = "CONTACTS_GROUP_ID";
     private static Uri capturedImageUri;
     private static String inviteMessage;
+    private static int retry;
+    public Contact contact;
+    public LinearLayout layout;
+    public boolean isTakePhoto;
+    public boolean isAttachment;
+    public Integer currentConversationId;
+    public Snackbar snackbar;
     protected ConversationFragment conversation;
     protected MobiComQuickConversationFragment quickConversationFragment;
     protected MobiComKitBroadcastReceiver mobiComKitBroadcastReceiver;
     protected ActionBar mActionBar;
     protected GoogleApiClient googleApiClient;
-    private LocationRequest locationRequest;
-    private Contact contact;
-    private Channel channel;
-    private static int retry;
-    public LinearLayout layout;
     String geoApiKey;
     String activityToOpenOnClickOfCallButton;
     int resourceId;
     RelativeLayout childFragmentLayout;
-    boolean isTakePhoto;
-    boolean isAttachment;
+    ProfileFragment profilefragment;
+    MobiComMessageService mobiComMessageService;
+    AlCustomizationSettings alCustomizationSettings;
+    ConnectivityReceiver connectivityReceiver;
+    File mediaFile;
+    File profilePhotoFile;
+    SyncAccountStatusAsyncTask accountStatusAsyncTask;
+    String contactsGroupId;
+    private LocationRequest locationRequest;
+    private Channel channel;
     private BaseContactService baseContactService;
     private ApplozicPermissions applozicPermission;
-    private ApplozicSetting applozicSetting;
-    Integer currentConversationId;
     private Uri videoFileUri;
     private Uri imageUri;
-    ProfileFragment profilefragment;
-    MobiComMessageService  mobiComMessageService;
     private ConversationUIService conversationUIService;
+    private SearchView searchView;
+    private String searchTerm;
+    private SearchListFragment searchListFragment;
 
     public ConversationActivity() {
 
     }
 
-    public Snackbar snackbar;
+    public static void addFragment(FragmentActivity fragmentActivity, Fragment fragmentToAdd, String fragmentTag) {
+        FragmentManager supportFragmentManager = fragmentActivity.getSupportFragmentManager();
+
+        // Fragment activeFragment = UIService.getActiveFragment(fragmentActivity);
+        FragmentTransaction fragmentTransaction = supportFragmentManager
+                .beginTransaction();
+        fragmentTransaction.replace(R.id.layout_child_activity, fragmentToAdd,
+                fragmentTag);
+
+        if (supportFragmentManager.getBackStackEntryCount() > 1
+                && !ConversationUIService.MESSGAE_INFO_FRAGMENT.equalsIgnoreCase(fragmentTag)) {
+            supportFragmentManager.popBackStackImmediate();
+        }
+        fragmentTransaction.addToBackStack(fragmentTag);
+        fragmentTransaction.commitAllowingStateLoss();
+        supportFragmentManager.executePendingTransactions();
+        //Log.i(TAG, "BackStackEntryCount: " + supportFragmentManager.getBackStackEntryCount());
+    }
+
+    public static Uri getCapturedImageUri() {
+        return capturedImageUri;
+    }
+
+    public static void setCapturedImageUri(Uri capturedImageUri) {
+        ConversationActivity.capturedImageUri = capturedImageUri;
+    }
 
     @Override
     public void showErrorMessageView(String message) {
-        layout.setVisibility(View.VISIBLE);
-        snackbar = Snackbar.make(layout, message, Snackbar.LENGTH_LONG);
-        snackbar.setAction("OK", new View.OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                snackbar.dismiss();
-            }
-        });
-        snackbar.setDuration(Snackbar.LENGTH_LONG);
-        ViewGroup group = (ViewGroup) snackbar.getView();
-        TextView textView = (TextView) group.findViewById(R.id.snackbar_action);
-        textView.setTextColor(Color.YELLOW);
-        group.setBackgroundColor(getResources().getColor(R.color.error_background_color));
-        TextView txtView = (TextView) group.findViewById(R.id.snackbar_text);
-        txtView.setMaxLines(5);
-        snackbar.show();
+        try {
+            layout.setVisibility(View.VISIBLE);
+            snackbar = Snackbar.make(layout, message, Snackbar.LENGTH_LONG);
+            snackbar.setAction(this.getString(R.string.ok_alert), new View.OnClickListener() {
+                @Override
+                public void onClick(View view) {
+                    snackbar.dismiss();
+                }
+            });
+            snackbar.setDuration(Snackbar.LENGTH_LONG);
+            ViewGroup group = (ViewGroup) snackbar.getView();
+            TextView textView = (TextView) group.findViewById(R.id.snackbar_action);
+            textView.setTextColor(Color.YELLOW);
+            group.setBackgroundColor(getResources().getColor(R.color.error_background_color));
+            TextView txtView = (TextView) group.findViewById(R.id.snackbar_text);
+            txtView.setMaxLines(5);
+            snackbar.show();
+        } catch (Exception e) {
+
+        }
+
     }
 
     @Override
@@ -172,28 +234,6 @@ public void dismissErrorMessage() {
         }
     }
 
-    public static void addFragment(FragmentActivity fragmentActivity, Fragment fragmentToAdd, String fragmentTag) {
-        FragmentManager supportFragmentManager = fragmentActivity.getSupportFragmentManager();
-
-        // Fragment activeFragment = UIService.getActiveFragment(fragmentActivity);
-        FragmentTransaction fragmentTransaction = supportFragmentManager
-                .beginTransaction();
-        fragmentTransaction.replace(R.id.layout_child_activity, fragmentToAdd,
-                fragmentTag);
-
-        if (supportFragmentManager.getBackStackEntryCount() > 1
-                && !ConversationUIService.MESSGAE_INFO_FRAGMENT.equalsIgnoreCase(fragmentTag)){
-            supportFragmentManager.popBackStack();
-        }
-        fragmentTransaction.addToBackStack(fragmentTag);
-      /*if (activeFragment != null) {
-            fragmentTransaction.hide(activeFragment);
-        }*/
-        fragmentTransaction.commitAllowingStateLoss();
-        supportFragmentManager.executePendingTransactions();
-        //Log.i(TAG, "BackStackEntryCount: " + supportFragmentManager.getBackStackEntryCount());
-    }
-
     @Override
     protected void onStop() {
         super.onStop();
@@ -213,7 +253,7 @@ protected void onResume() {
         subscribeIntent.putExtra(ApplozicMqttIntentService.SUBSCRIBE, true);
         startService(subscribeIntent);
 
-        if (!Utils.isInternetAvailable(this)) {
+        if (!Utils.isInternetAvailable(getApplicationContext())) {
             String errorMessage = getResources().getString(R.string.internet_connection_not_available);
             showErrorMessageView(errorMessage);
         }
@@ -238,15 +278,32 @@ protected void onSaveInstanceState(Bundle savedInstanceState) {
         if (videoFileUri != null) {
             savedInstanceState.putString(CAPTURED_VIDEO_URI, videoFileUri.toString());
         }
+        if (mediaFile != null) {
+            savedInstanceState.putSerializable(LOAD_FILE, mediaFile);
+        }
+
         super.onSaveInstanceState(savedInstanceState);
     }
 
     @Override
     public boolean onSupportNavigateUp() {
         if (getSupportFragmentManager().getBackStackEntryCount() > 0) {
+            if (getSupportFragmentManager().getBackStackEntryCount() == 1) {
+                Intent upIntent = NavUtils.getParentActivityIntent(this);
+                if (upIntent != null && isTaskRoot()) {
+                    TaskStackBuilder.create(this).addNextIntentWithParentStack(upIntent).startActivities();
+                }
+                ConversationActivity.this.finish();
+                return true;
+            }
             Boolean takeOrder = getIntent().getBooleanExtra(TAKE_ORDER, false);
             if (takeOrder) {
-                this.finish();
+                Intent upIntent = NavUtils.getParentActivityIntent(this);
+                if (upIntent != null && isTaskRoot()) {
+                    TaskStackBuilder.create(this).addNextIntentWithParentStack(upIntent).startActivities();
+                }
+                ConversationActivity.this.finish();
+                return true;
             } else {
                 getSupportFragmentManager().popBackStack();
             }
@@ -259,28 +316,45 @@ public boolean onSupportNavigateUp() {
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        resourceId = ApplozicSetting.getInstance(this).getChatBackgroundColorOrDrawableResource();
-        baseContactService =  new AppContactService(this);
-        applozicSetting = ApplozicSetting.getInstance(this);
-        conversationUIService =  new ConversationUIService(this);
-        mobiComMessageService = new MobiComMessageService(this, MessageIntentService.class);
-        if(resourceId != 0){
+        String jsonString = FileUtils.loadSettingsJsonFile(getApplicationContext());
+        if (!TextUtils.isEmpty(jsonString)) {
+            alCustomizationSettings = (AlCustomizationSettings) GsonUtils.getObjectFromJson(jsonString, AlCustomizationSettings.class);
+        } else {
+            alCustomizationSettings = new AlCustomizationSettings();
+        }
+        if (!TextUtils.isEmpty(alCustomizationSettings.getChatBackgroundImageName())) {
+            resourceId = getResources().getIdentifier(alCustomizationSettings.getChatBackgroundImageName(), "drawable", getPackageName());
+        }
+        if (resourceId != 0) {
             getWindow().setBackgroundDrawableResource(resourceId);
         }
+        contactsGroupId = getIntent().getStringExtra(CONTACTS_GROUP_ID);
         setContentView(R.layout.quickconversion_activity);
         Toolbar myToolbar = (Toolbar) findViewById(R.id.my_toolbar);
         setSupportActionBar(myToolbar);
-        geoApiKey = Utils.getMetaDataValue(this, GOOGLE_API_KEY_META_DATA);
-        activityToOpenOnClickOfCallButton = Utils.getMetaDataValue(this, ACTIVITY_TO_OPEN_ONCLICK_OF_CALL_BUTTON_META_DATA);
+        baseContactService = new AppContactService(this);
+        conversationUIService = new ConversationUIService(this);
+        mobiComMessageService = new MobiComMessageService(this, MessageIntentService.class);
+        quickConversationFragment = new MobiComQuickConversationFragment();
+        connectivityReceiver = new ConnectivityReceiver();
+        geoApiKey = Utils.getMetaDataValue(getApplicationContext(), GOOGLE_API_KEY_META_DATA);
+        activityToOpenOnClickOfCallButton = Utils.getMetaDataValue(getApplicationContext(), ACTIVITY_TO_OPEN_ONCLICK_OF_CALL_BUTTON_META_DATA);
         layout = (LinearLayout) findViewById(R.id.footerAd);
         applozicPermission = new ApplozicPermissions(this, layout);
         childFragmentLayout = (RelativeLayout) findViewById(R.id.layout_child_activity);
-        profilefragment =  new ProfileFragment();
+        profilefragment = new ProfileFragment();
+        profilefragment.setAlCustomizationSettings(alCustomizationSettings);
 
         if (Utils.hasMarshmallow()) {
             applozicPermission.checkRuntimePermissionForStorage();
         }
         mActionBar = getSupportActionBar();
+        if (!TextUtils.isEmpty(alCustomizationSettings.getThemeColorPrimary()) && !TextUtils.isEmpty(alCustomizationSettings.getThemeColorPrimaryDark())) {
+            mActionBar.setBackgroundDrawable(new ColorDrawable(Color.parseColor(alCustomizationSettings.getThemeColorPrimary())));
+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
+                getWindow().setStatusBarColor(Color.parseColor(alCustomizationSettings.getThemeColorPrimaryDark()));
+            }
+        }
         inviteMessage = Utils.getMetaDataValue(getApplicationContext(), SHARE_TEXT);
         retry = 0;
         if (savedInstanceState != null) {
@@ -288,36 +362,31 @@ protected void onCreate(Bundle savedInstanceState) {
                     Uri.parse(savedInstanceState.getString(CAPTURED_IMAGE_URI)) : null;
             videoFileUri = savedInstanceState.getString(CAPTURED_VIDEO_URI) != null ?
                     Uri.parse(savedInstanceState.getString(CAPTURED_VIDEO_URI)) : null;
+            mediaFile = savedInstanceState.getSerializable(LOAD_FILE) != null ? (File) savedInstanceState.getSerializable(LOAD_FILE) : null;
 
             contact = (Contact) savedInstanceState.getSerializable(CONTACT);
             channel = (Channel) savedInstanceState.getSerializable(CHANNEL);
             currentConversationId = savedInstanceState.getInt(CONVERSATION_ID);
-            if (channel != null) {
-                conversation = new ConversationFragment(null, channel,currentConversationId);
-            } else {
-                conversation = new ConversationFragment(contact, null,currentConversationId);
+            if (contact != null || channel != null) {
+                if (channel != null) {
+                    conversation = ConversationFragment.newInstance(null, channel, currentConversationId, null);
+                } else {
+                    conversation = ConversationFragment.newInstance(contact, null, currentConversationId, null);
+                }
+                addFragment(this, conversation, ConversationUIService.CONVERSATION_FRAGMENT);
             }
-            addFragment(this, conversation, ConversationUIService.CONVERSATION_FRAGMENT);
         } else {
-            quickConversationFragment = new MobiComQuickConversationFragment();
+            setSearchListFragment(quickConversationFragment);
             addFragment(this, quickConversationFragment, ConversationUIService.QUICK_CONVERSATION_FRAGMENT);
         }
-
         mobiComKitBroadcastReceiver = new MobiComKitBroadcastReceiver(this);
         InstructionUtil.showInfo(this, R.string.info_message_sync, BroadcastService.INTENT_ACTIONS.INSTRUCTION.toString());
 
-        FragmentManager fragmentManager = getSupportFragmentManager();
-        fragmentManager.addOnBackStackChangedListener(new FragmentManager.OnBackStackChangedListener() {
-            @Override
-            public void onBackStackChanged() {
-                if (getSupportFragmentManager().getBackStackEntryCount() == 0) finish();
-            }
-        });
         mActionBar.setTitle(R.string.conversations);
         mActionBar.setDisplayHomeAsUpEnabled(true);
         mActionBar.setHomeButtonEnabled(true);
 
-        googleApiClient = new GoogleApiClient.Builder(this)
+        googleApiClient = new GoogleApiClient.Builder(getApplicationContext())
                 .addConnectionCallbacks(this)
                 .addOnConnectionFailedListener(this)
                 .addApi(LocationServices.API).build();
@@ -325,16 +394,17 @@ public void onBackStackChanged() {
 
         Boolean takeOrder = getIntent().getBooleanExtra(TAKE_ORDER, false);
 
-        if(!takeOrder){
-            new MobiComConversationService(this).processLastSeenAtStatus();
+        if (!takeOrder) {
+            Intent lastSeenStatusIntent = new Intent(this, UserIntentService.class);
+            lastSeenStatusIntent.putExtra(UserIntentService.USER_LAST_SEEN_AT_STATUS, true);
+            startService(lastSeenStatusIntent);
         }
 
         if (ApplozicClient.getInstance(this).isAccountClosed() || ApplozicClient.getInstance(this).isNotAllowed()) {
-            snackbar = Snackbar.make(layout, ApplozicClient.getInstance(this).isAccountClosed() ?
-                            R.string.applozic_account_closed : R.string.applozic_free_version_not_allowed_on_release_build,
-                    Snackbar.LENGTH_INDEFINITE);
-            snackbar.show();
+            accountStatusAsyncTask = new SyncAccountStatusAsyncTask(this, layout, snackbar);
+            accountStatusAsyncTask.execute();
         }
+        registerReceiver(connectivityReceiver, new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION));
     }
 
     @Override
@@ -343,12 +413,12 @@ protected void onNewIntent(Intent intent) {
         //setIntent(intent);
         if (!MobiComUserPreference.getInstance(this).isLoggedIn()) {
             //user is not logged in
-            Log.i("AL", "user is not logged in yet.");
+            Utils.printLog(this, "AL", "user is not logged in yet.");
             return;
         }
 
         try {
-            if(intent.getExtras() != null){
+            if (intent.getExtras() != null) {
                 BroadcastService.setContextBasedChat(intent.getExtras().getBoolean(ConversationUIService.CONTEXT_BASED_CHAT));
             }
             conversationUIService.checkForStartNewConversation(intent);
@@ -361,30 +431,68 @@ private void showActionBar() {
         mActionBar.setDisplayShowTitleEnabled(true);
     }
 
+    @SuppressLint("NewApi")
     @Override
     public boolean onCreateOptionsMenu(Menu menu) {
         // Inflate the menu; this adds items to the action bar if it is present.
         showActionBar();
         //return false;
         getMenuInflater().inflate(R.menu.mobicom_basic_menu_for_normal_message, menu);
-        return true;
+        MenuItem searchItem = menu.findItem(R.id.menu_search);
+        searchView = (SearchView) MenuItemCompat.getActionView(searchItem);
+        searchView.setQueryHint(getResources().getString(R.string.search_hint));
+        if (Utils.hasICS()) {
+            searchItem.collapseActionView();
+        }
+        searchView.setOnQueryTextListener(this);
+        searchView.setSubmitButtonEnabled(true);
+        searchView.setIconified(true);
+        return super.onCreateOptionsMenu(menu);
     }
 
     @Override
     protected void onActivityResult(int requestCode, int resultCode, Intent data) {
-        conversationUIService.onActivityResult(requestCode, resultCode, data);
-        handleOnActivityResult(requestCode,data);
-        if (requestCode == LOCATION_SERVICE_ENABLE) {
-            if (((LocationManager) getSystemService(Context.LOCATION_SERVICE))
-                    .isProviderEnabled(LocationManager.GPS_PROVIDER)) {
-                googleApiClient.connect();
-            } else {
-                Toast.makeText(ConversationActivity.this, R.string.unable_to_fetch_location, Toast.LENGTH_LONG).show();
+        try {
+            conversationUIService.onActivityResult(requestCode, resultCode, data);
+            handleOnActivityResult(requestCode, data);
+            if (requestCode == CropImage.CROP_IMAGE_ACTIVITY_REQUEST_CODE) {
+                CropImage.ActivityResult result = CropImage.getActivityResult(data);
+                if (resultCode == RESULT_OK) {
+                    if (data == null) {
+                        return;
+                    }
+                    if (imageUri != null) {
+                        imageUri = result.getUri();
+                        if (imageUri != null && profilefragment != null) {
+                            profilefragment.handleProfileimageUpload(true, imageUri, profilePhotoFile);
+                        }
+                    } else {
+                        imageUri = result.getUri();
+                        String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());
+                        String imageFileName = "JPEG_" + timeStamp + "_" + ".jpeg";
+                        profilePhotoFile = FileClientService.getFilePath(imageFileName, this, "image/jpeg");
+                        if (imageUri != null && profilefragment != null) {
+                            profilefragment.handleProfileimageUpload(true, imageUri, profilePhotoFile);
+                        }
+                    }
+                } else if (resultCode == CropImage.CROP_IMAGE_ACTIVITY_RESULT_ERROR_CODE) {
+                    Utils.printLog(this, ConversationActivity.class.getName(), "Cropping failed:" + result.getError());
+                }
             }
-            return;
+            if (requestCode == LOCATION_SERVICE_ENABLE) {
+                if (((LocationManager) getSystemService(Context.LOCATION_SERVICE))
+                        .isProviderEnabled(LocationManager.GPS_PROVIDER)) {
+                    googleApiClient.connect();
+                } else {
+                    Toast.makeText(ConversationActivity.this, R.string.unable_to_fetch_location, Toast.LENGTH_LONG).show();
+                }
+                return;
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
         }
-    }
 
+    }
 
     public void handleOnActivityResult(int requestCode, Intent intent) {
 
@@ -392,31 +500,26 @@ public void handleOnActivityResult(int requestCode, Intent intent) {
 
             case ProfileFragment.REQUEST_CODE_ATTACH_PHOTO:
                 Uri selectedFileUri = (intent == null ? null : intent.getData());
+                imageUri = null;
                 beginCrop(selectedFileUri);
                 break;
 
-
-            case MultimediaOptionFragment.REQUEST_CODE_TAKE_PHOTO:
+            case ProfileFragment.REQUEST_CODE_TAKE_PHOTO:
                 beginCrop(imageUri);
                 break;
 
-            case Crop.REQUEST_CROP:
-                try {
-                    Uri imageUri = Crop.getOutput(intent);
-                    if (imageUri != null && profilefragment != null) {
-                        profilefragment.handleProfileimageUpload(imageUri);
-
-                    }
-                } catch (Exception e) {
-                    Log.i("ConversationActivity", "exception in profile image");
-                }
-                break;
         }
     }
 
-    private void beginCrop(Uri source) {
-        Uri destination = Uri.fromFile(new File(getCacheDir(), "profile.jpeg"));
-        Crop.of(source, destination).asSquare().start(ConversationActivity.this);
+    void beginCrop(Uri imageUri) {
+        try {
+            CropImage.activity(imageUri)
+                    .setGuidelines(CropImageView.Guidelines.OFF)
+                    .setMultiTouchEnabled(true)
+                    .start(this);
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
     }
 
     @Override
@@ -424,14 +527,13 @@ public void onRequestPermissionsResult(int requestCode, String[] permissions, in
         if (requestCode == PermissionsUtils.REQUEST_STORAGE) {
             if (PermissionsUtils.verifyPermissions(grantResults)) {
                 showSnackBar(R.string.storage_permission_granted);
-                if(isAttachment){
+                if (isAttachment) {
                     isAttachment = false;
                     processAttachment();
                 }
             } else {
                 showSnackBar(R.string.storage_permission_not_granted);
             }
-
         } else if (requestCode == PermissionsUtils.REQUEST_LOCATION) {
             if (PermissionsUtils.verifyPermissions(grantResults)) {
                 showSnackBar(R.string.location_permission_granted);
@@ -446,11 +548,10 @@ public void onRequestPermissionsResult(int requestCode, String[] permissions, in
             } else {
                 showSnackBar(R.string.phone_state_permission_not_granted);
             }
-        }
-        else if (requestCode == PermissionsUtils.REQUEST_CALL_PHONE) {
+        } else if (requestCode == PermissionsUtils.REQUEST_CALL_PHONE) {
             if (grantResults.length == 1 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                 showSnackBar(R.string.phone_call_permission_granted);
-                processCall(contact,currentConversationId);
+                processCall(contact, currentConversationId);
             } else {
                 showSnackBar(R.string.phone_call_permission_not_granted);
             }
@@ -482,30 +583,30 @@ else if (requestCode == PermissionsUtils.REQUEST_CALL_PHONE) {
         } else if (requestCode == PermissionsUtils.REQUEST_CAMERA_FOR_PROFILE_PHOTO) {
             if (grantResults.length == 1 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                 showSnackBar(R.string.phone_camera_permission_granted);
-                processImageCaptureForProfilePhoto();
+                if (profilefragment != null) {
+                    profilefragment.processPhotoOption();
+                }
             } else {
                 showSnackBar(R.string.phone_camera_permission_not_granted);
             }
-        }else if (requestCode == PermissionsUtils.REQUEST_STORAGE_FOR_PROFILE_PHOTO) {
+        } else if (requestCode == PermissionsUtils.REQUEST_STORAGE_FOR_PROFILE_PHOTO) {
             if (PermissionsUtils.verifyPermissions(grantResults)) {
                 showSnackBar(R.string.storage_permission_granted);
-                processGalleryPhotoSelection();
+                if (profilefragment != null) {
+                    profilefragment.processPhotoOption();
+                }
             } else {
                 showSnackBar(R.string.storage_permission_not_granted);
             }
-        }
-        else {
+        } else {
             super.onRequestPermissionsResult(requestCode, permissions, grantResults);
         }
     }
 
-
     public void processingLocation() {
-        if (ApplozicSetting.getInstance(this).isLocationSharingViaMap() && !TextUtils.isEmpty(geoApiKey) && !API_KYE_STRING.equals(geoApiKey)) {
+        if (alCustomizationSettings.isLocationShareViaMap() && !TextUtils.isEmpty(geoApiKey) && !API_KYE_STRING.equals(geoApiKey)) {
             Intent toMapActivity = new Intent(this, MobicomLocationActivity.class);
             startActivityForResult(toMapActivity, MultimediaOptionFragment.REQUEST_CODE_SEND_LOCATION);
-            Log.i("test", "Activity for result strarted");
-
         } else {
             //================= START GETTING LOCATION WITHOUT LOADING MAP AND SEND LOCATION AS TEXT===============
 
@@ -521,7 +622,7 @@ public void onClick(DialogInterface dialog, int id) {
                                 startActivityForResult(intent, LOCATION_SERVICE_ENABLE);
                             }
                         })
-                        .setNegativeButton(android.R.string.cancel, new DialogInterface.OnClickListener() {
+                        .setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() {
                             public void onClick(DialogInterface dialog, int id) {
                                 dialog.cancel();
                                 Toast.makeText(ConversationActivity.this, R.string.location_sending_cancelled, Toast.LENGTH_LONG).show();
@@ -559,25 +660,50 @@ public boolean onOptionsItemSelected(MenuItem item) {
             conversationUIService.startContactActivityForResult();
         } else if (id == R.id.conversations) {
             Intent intent = new Intent(this, ChannelCreateActivity.class);
+            intent.putExtra(ChannelCreateActivity.GROUP_TYPE, Channel.GroupType.PUBLIC.getValue().intValue());
+            if (contactsGroupId != null) {
+                intent.putExtra(ChannelCreateActivity.CONTACTS_GROUP_ID, contactsGroupId);
+            }
+            startActivity(intent);
+        } else if (id == R.id.broadcast) {
+            Intent intent = new Intent(this, ContactSelectionActivity.class);
+            intent.putExtra(ContactSelectionActivity.GROUP_TYPE, Channel.GroupType.BROADCAST.getValue().intValue());
             startActivity(intent);
         } else if (id == R.id.refresh) {
-            String message = this.getString(R.string.info_message_sync);
-            mobiComMessageService.syncMessagesWithServer(message);
+            Toast.makeText(this, getString(R.string.info_message_sync), Toast.LENGTH_LONG).show();
+            new SyncMessagesAsyncTask(this).execute();
         } else if (id == R.id.shareOptions) {
             Intent intent = new Intent(Intent.ACTION_SEND);
             intent.setAction(Intent.ACTION_SEND)
                     .setType("text/plain").putExtra(Intent.EXTRA_TEXT, inviteMessage);
             startActivity(Intent.createChooser(intent, "Share Via"));
             return super.onOptionsItemSelected(item);
-        }else if(id == R.id.applozicUserProfile){
-            addFragment(this,profilefragment,ProfileFragment.ProfileFragmentTag);
+        } else if (id == R.id.applozicUserProfile) {
+            profilefragment.setApplozicPermissions(applozicPermission);
+            addFragment(this, profilefragment, ProfileFragment.ProfileFragmentTag);
+        } else if (id == R.id.logout) {
+            try {
+                if (!TextUtils.isEmpty(alCustomizationSettings.getLogoutPackage())) {
+                    Class loginActivity = Class.forName(alCustomizationSettings.getLogoutPackage().trim());
+                    if (loginActivity != null) {
+                        new UserClientService(this).logout();
+                        Toast.makeText(getBaseContext(), getString(R.string.user_logout_info), Toast.LENGTH_SHORT).show();
+                        Intent intent = new Intent(this, loginActivity);
+                        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_SINGLE_TOP);
+                        startActivity(intent);
+                        finish();
+                    }
+                }
+            } catch (ClassNotFoundException e) {
+                e.printStackTrace();
+            }
         }
         return false;
     }
 
     @Override
-    public void onQuickConversationFragmentItemClick(View view, Contact contact, Channel channel,Integer conversationId) {
-        conversation = new ConversationFragment(contact, channel,conversationId);
+    public void onQuickConversationFragmentItemClick(View view, Contact contact, Channel channel, Integer conversationId, String searchString) {
+        conversation = ConversationFragment.newInstance(contact, channel, conversationId, searchString);
         addFragment(this, conversation, ConversationUIService.CONVERSATION_FRAGMENT);
         this.channel = channel;
         this.contact = contact;
@@ -597,15 +723,31 @@ public void addFragment(ConversationFragment conversationFragment) {
 
     @Override
     public void onBackPressed() {
+        if (getSupportFragmentManager().getBackStackEntryCount() == 1) {
+            try {
+                Intent upIntent = NavUtils.getParentActivityIntent(this);
+                if (upIntent != null && isTaskRoot()) {
+                    TaskStackBuilder.create(this).addNextIntentWithParentStack(upIntent).startActivities();
+                }
+            } catch (Exception e) {
+                e.printStackTrace();
+            }
+            this.finish();
+            return;
+        }
         Boolean takeOrder = getIntent().getBooleanExtra(TAKE_ORDER, false);
         ConversationFragment conversationFragment = (ConversationFragment) getSupportFragmentManager().findFragmentByTag(ConversationUIService.CONVERSATION_FRAGMENT);
         if (conversationFragment != null && conversationFragment.isVisible() && (conversationFragment.multimediaPopupGrid.getVisibility() == View.VISIBLE)) {
             conversationFragment.hideMultimediaOptionGrid();
             return;
         }
-        if (takeOrder){
-            this.finish();
-        }else {
+        if (takeOrder) {
+            Intent upIntent = NavUtils.getParentActivityIntent(this);
+            if (upIntent != null && isTaskRoot()) {
+                TaskStackBuilder.create(this).addNextIntentWithParentStack(upIntent).startActivities();
+            }
+            ConversationActivity.this.finish();
+        } else {
             super.onBackPressed();
         }
 
@@ -678,11 +820,12 @@ public void onConnectionFailed(ConnectionResult connectionResult) {
 
     }
 
-    public void setChildFragmentLayoutBG(){
+    public void setChildFragmentLayoutBG() {
 
         childFragmentLayout.setBackgroundResource(R.color.conversation_list_all_background);
     }
-    public void setChildFragmentLayoutBGToTransparent(){
+
+    public void setChildFragmentLayoutBGToTransparent() {
 
         childFragmentLayout.setBackgroundResource(android.R.color.transparent);
     }
@@ -704,14 +847,6 @@ public Integer getConversationId() {
         return currentConversationId;
     }
 
-    public static Uri getCapturedImageUri() {
-        return capturedImageUri;
-    }
-
-    public static void setCapturedImageUri(Uri capturedImageUri) {
-        ConversationActivity.capturedImageUri = capturedImageUri;
-    }
-
     public void showSnackBar(int resId) {
         snackbar = Snackbar.make(layout, resId,
                 Snackbar.LENGTH_SHORT);
@@ -734,28 +869,31 @@ public void isAttachment(boolean attachment) {
         this.isAttachment = attachment;
     }
 
+    public File getFileObject() {
+        return mediaFile;
+    }
 
     public void showAudioRecordingDialog() {
 
         if (Utils.hasMarshmallow() && PermissionsUtils.checkSelfPermissionForAudioRecording(this)) {
             new ApplozicPermissions(this, layout).requestAudio();
-        } else if(PermissionsUtils.isAudioRecordingPermissionGranted(this)) {
+        } else if (PermissionsUtils.isAudioRecordingPermissionGranted(this)) {
 
             FragmentManager supportFragmentManager = getSupportFragmentManager();
             DialogFragment fragment = AudioMessageFragment.newInstance();
 
             FragmentTransaction fragmentTransaction = supportFragmentManager
-                    .beginTransaction().add(fragment, "dialog");
+                    .beginTransaction().add(fragment, "AudioMessageFragment");
 
             fragmentTransaction.addToBackStack(null);
             fragmentTransaction.commitAllowingStateLoss();
 
-        }else{
+        } else {
 
-            if(ApplozicSetting.getInstance(this).getTextForAudioPermissionNotFound()==null){
+            if (alCustomizationSettings.getAudioPermissionNotFoundMsg() == null) {
                 showSnackBar(R.string.applozic_audio_permission_missing);
-            }else{
-                snackbar = Snackbar.make(layout,ApplozicSetting.getInstance(this).getTextForAudioPermissionNotFound(),
+            } else {
+                snackbar = Snackbar.make(layout, alCustomizationSettings.getAudioPermissionNotFoundMsg(),
                         Snackbar.LENGTH_SHORT);
                 snackbar.show();
             }
@@ -768,6 +906,16 @@ public void processCall(Contact contactObj, Integer conversationId) {
         this.contact = baseContactService.getContactById(contactObj.getContactIds());
         this.currentConversationId = conversationId;
         try {
+            if (ApplozicClient.getInstance(getApplicationContext()).isIPCallEnabled()) {
+                //Audio Call
+                String activityName = ApplozicSetting.getInstance(this).getActivityCallback(ApplozicSetting.RequestCode.AUDIO_CALL);
+                Class activityToOpen = Class.forName(activityName);
+                Intent intent = new Intent(this, activityToOpen);
+                intent.putExtra("CONTACT_ID", contact.getUserId());
+                startActivity(intent);
+                return;
+            }
+
             if (activityToOpenOnClickOfCallButton != null) {
                 Intent callIntent = new Intent(this, Class.forName(activityToOpenOnClickOfCallButton));
                 if (currentConversationId != null) {
@@ -776,18 +924,18 @@ public void processCall(Contact contactObj, Integer conversationId) {
                 }
                 callIntent.putExtra(ConversationUIService.CONTACT, contact);
                 startActivity(callIntent);
-            } else if (applozicSetting.isActionDialWithoutCallingEnabled()){
-                if(!TextUtils.isEmpty(contact.getContactNumber())) {
+            } else if (alCustomizationSettings.isShowActionDialWithOutCalling()) {
+                if (!TextUtils.isEmpty(contact.getContactNumber())) {
                     Intent callIntent;
                     String uri = "tel:" + contact.getContactNumber().trim();
                     callIntent = new Intent(Intent.ACTION_DIAL);
                     callIntent.setData(Uri.parse(uri));
                     startActivity(callIntent);
                 }
-            }else {
+            } else {
                 if (Utils.hasMarshmallow() && PermissionsUtils.checkSelfForCallPermission(this)) {
                     applozicPermission.requestCallPermission();
-                } else if(PermissionsUtils.isCallPermissionGranted(this)){
+                } else if (PermissionsUtils.isCallPermissionGranted(this)) {
                     if (!TextUtils.isEmpty(contact.getContactNumber())) {
                         Intent callIntent;
                         String uri = "tel:" + contact.getContactNumber().trim();
@@ -796,14 +944,14 @@ public void processCall(Contact contactObj, Integer conversationId) {
                         startActivity(callIntent);
                     }
                 } else {
-                    snackbar = Snackbar.make(layout,R.string.phone_call_permission_not_granted ,
+                    snackbar = Snackbar.make(layout, R.string.phone_call_permission_not_granted,
                             Snackbar.LENGTH_SHORT);
                     snackbar.show();
                 }
             }
 
         } catch (Exception e) {
-            Log.i("ConversationActivity", "Call permission is not added in androidManifest");
+            Utils.printLog(this, "ConversationActivity", "Call permission is not added in androidManifest");
         }
     }
 
@@ -826,124 +974,269 @@ public void processCameraAction() {
     }
 
     public void processVideoRecording() {
-        try{
-            if(PermissionsUtils.isCameraPermissionGranted(this)){
+        try {
+            if (PermissionsUtils.isCameraPermissionGranted(this)) {
                 showVideoCapture();
-            }else {
+            } else {
                 if (Utils.hasMarshmallow() && PermissionsUtils.checkSelfForCameraPermission(this)) {
                     applozicPermission.requestCameraPermission();
                 } else {
                     showVideoCapture();
                 }
             }
-        }catch (Exception e){
+        } catch (Exception e) {
             e.printStackTrace();
         }
     }
 
-    public void processContact(){
-        if(Utils.hasMarshmallow() && PermissionsUtils.checkSelfForContactPermission(this)){
+    public void processContact() {
+        if (Utils.hasMarshmallow() && PermissionsUtils.checkSelfForContactPermission(this)) {
             applozicPermission.requestContactPermission();
-        }else {
+        } else {
             Intent contactIntent = new Intent(Intent.ACTION_PICK, ContactsContract.Contacts.CONTENT_URI);
             contactIntent.setType(ContactsContract.Contacts.CONTENT_TYPE);
             startActivityForResult(contactIntent, MultimediaOptionFragment.REQUEST_CODE_CONTACT_SHARE);
         }
     }
 
-
     public void imageCapture() {
-        Intent cameraIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
-        // Ensure that there's a camera activity to handle the intent
-        if (cameraIntent.resolveActivity(getApplicationContext().getPackageManager()) != null) {
-            // Create the File where the photo should go
-            File photoFile;
+        try {
             String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());
             String imageFileName = "JPEG_" + timeStamp + "_" + ".jpeg";
 
-            photoFile = FileClientService.getFilePath(imageFileName, this, "image/jpeg");
+            mediaFile = FileClientService.getFilePath(imageFileName, getApplicationContext(), "image/jpeg");
+
+            capturedImageUri = FileProvider.getUriForFile(this, Utils.getMetaDataValue(this, MobiComKitConstants.PACKAGE_NAME) + ".provider", mediaFile);
 
-            // Continue only if the File was successfully created
-            if (photoFile != null) {
-                capturedImageUri = Uri.fromFile(photoFile);
-                cameraIntent.putExtra(MediaStore.EXTRA_OUTPUT, capturedImageUri);
-                startActivityForResult(cameraIntent, MultimediaOptionFragment.REQUEST_CODE_TAKE_PHOTO);
+            Intent cameraIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
+
+            cameraIntent.putExtra(MediaStore.EXTRA_OUTPUT, capturedImageUri);
+
+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
+                cameraIntent.addFlags(Intent.FLAG_GRANT_WRITE_URI_PERMISSION);
+                cameraIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
+            } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
+                ClipData clip =
+                        ClipData.newUri(getContentResolver(), "a Photo", capturedImageUri);
+
+                cameraIntent.setClipData(clip);
+                cameraIntent.addFlags(Intent.FLAG_GRANT_WRITE_URI_PERMISSION);
+                cameraIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
+
+            } else {
+                List<ResolveInfo> resInfoList =
+                        getPackageManager()
+                                .queryIntentActivities(cameraIntent, PackageManager.MATCH_DEFAULT_ONLY);
+
+                for (ResolveInfo resolveInfo : resInfoList) {
+                    String packageName = resolveInfo.activityInfo.packageName;
+                    grantUriPermission(packageName, capturedImageUri,
+                            Intent.FLAG_GRANT_WRITE_URI_PERMISSION);
+                    grantUriPermission(packageName, capturedImageUri,
+                            Intent.FLAG_GRANT_READ_URI_PERMISSION);
+                }
+            }
+
+            if (cameraIntent.resolveActivity(getApplicationContext().getPackageManager()) != null) {
+                if (mediaFile != null) {
+                    startActivityForResult(cameraIntent, MultimediaOptionFragment.REQUEST_CODE_TAKE_PHOTO);
+                }
             }
+        } catch (Exception e) {
+            e.printStackTrace();
         }
     }
 
-    public void processAttachment(){
-        if(Utils.hasMarshmallow() && PermissionsUtils.checkSelfForStoragePermission(this)){
+    public void processAttachment() {
+        if (Utils.hasMarshmallow() && PermissionsUtils.checkSelfForStoragePermission(this)) {
             applozicPermission.requestStoragePermissions();
-        }else {
+        } else {
             Intent intentPick = new Intent(this, MobiComAttachmentSelectorActivity.class);
             startActivityForResult(intentPick, MultimediaOptionFragment.REQUEST_MULTI_ATTCAHMENT);
         }
     }
 
     public void showVideoCapture() {
-        Intent videoIntent = new Intent(MediaStore.ACTION_VIDEO_CAPTURE);
-        String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());
-        String imageFileName = "VID_" + timeStamp + "_" + ".mp4";
 
-        File fileUri = FileClientService.getFilePath(imageFileName, this, "video/mp4");
-        videoIntent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(fileUri));
-        videoIntent.putExtra(MediaStore.EXTRA_VIDEO_QUALITY, 0);
-        videoFileUri = Uri.fromFile(fileUri);
-        startActivityForResult(videoIntent, MultimediaOptionFragment.REQUEST_CODE_CAPTURE_VIDEO_ACTIVITY);
-    }
+        try {
+            Intent videoIntent = new Intent(MediaStore.ACTION_VIDEO_CAPTURE);
+            String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());
+            String imageFileName = "VID_" + timeStamp + "_" + ".mp4";
+
+            mediaFile = FileClientService.getFilePath(imageFileName, getApplicationContext(), "video/mp4");
+
+            videoFileUri = FileProvider.getUriForFile(this, Utils.getMetaDataValue(this, MobiComKitConstants.PACKAGE_NAME) + ".provider", mediaFile);
+
+            videoIntent.putExtra(MediaStore.EXTRA_OUTPUT, videoFileUri);
+
+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
+                videoIntent.addFlags(Intent.FLAG_GRANT_WRITE_URI_PERMISSION);
+                videoIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
+            } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
+                ClipData clip =
+                        ClipData.newUri(getContentResolver(), "a Video", videoFileUri);
+
+                videoIntent.setClipData(clip);
+                videoIntent.addFlags(Intent.FLAG_GRANT_WRITE_URI_PERMISSION);
+                videoIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
+
+            } else {
+                List<ResolveInfo> resInfoList =
+                        getPackageManager()
+                                .queryIntentActivities(videoIntent, PackageManager.MATCH_DEFAULT_ONLY);
 
+                for (ResolveInfo resolveInfo : resInfoList) {
+                    String packageName = resolveInfo.activityInfo.packageName;
+                    grantUriPermission(packageName, videoFileUri,
+                            Intent.FLAG_GRANT_WRITE_URI_PERMISSION);
+                    grantUriPermission(packageName, videoFileUri,
+                            Intent.FLAG_GRANT_READ_URI_PERMISSION);
+
+                }
+            }
+
+            if (videoIntent.resolveActivity(getApplicationContext().getPackageManager()) != null) {
+                if (mediaFile != null) {
+                    videoIntent.putExtra(MediaStore.EXTRA_VIDEO_QUALITY, 0);
+                    startActivityForResult(videoIntent, MultimediaOptionFragment.REQUEST_CODE_CAPTURE_VIDEO_ACTIVITY);
+                }
+            }
+
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+
+    }
 
     @Override
     public Uri getCurrentImageUri() {
         String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());
         String imageFileName = "JPEG_" + timeStamp + "_" + ".jpeg";
-
-        File photoFile = FileClientService.getFilePath(imageFileName, this, "image/jpeg");
-        imageUri= Uri.fromFile(photoFile);
+        profilePhotoFile = FileClientService.getFilePath(imageFileName, getApplicationContext(), "image/jpeg");
+        imageUri = FileProvider.getUriForFile(this, Utils.getMetaDataValue(this, MobiComKitConstants.PACKAGE_NAME) + ".provider", profilePhotoFile);
         return imageUri;
     }
 
 
-    public void imageCaptureForProfilePhoto() {
-        if( !(this instanceof  MobicomkitUriListener) ){
-            Log.d("ConversationActvity" , "Activity must implement MobicomkitUriListener to get image file uri");
-            return;
+    public void processGalleryPhotoSelection() {
+        if (Utils.hasMarshmallow() && PermissionsUtils.checkSelfForStoragePermission(this)) {
+            applozicPermission.requestStoragePermissionsForProfilePhoto();
+        } else {
+            Intent getContentIntent = new Intent(Intent.ACTION_PICK,
+                    android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
+            startActivityForResult(getContentIntent, ProfileFragment.REQUEST_CODE_ATTACH_PHOTO);
         }
-        Intent cameraIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
-        if (cameraIntent.resolveActivity(getPackageManager()) != null) {
-            Uri capturedImageUri = ((MobicomkitUriListener) ConversationActivity.this).getCurrentImageUri();
-            cameraIntent.putExtra(MediaStore.EXTRA_OUTPUT, capturedImageUri);
-            startActivityForResult(cameraIntent, MultimediaOptionFragment.REQUEST_CODE_TAKE_PHOTO);
+    }
+
+    @Override
+    public boolean onQueryTextSubmit(String query) {
+        this.searchTerm = query;
+        return false;
+    }
+
+    @Override
+    public boolean onQueryTextChange(String query) {
+        this.searchTerm = query;
+        if (getSearchListFragment() != null) {
+            getSearchListFragment().onQueryTextChange(query);
         }
+        return true;
+    }
+
+    public SearchListFragment getSearchListFragment() {
+        return searchListFragment;
     }
 
+    public void setSearchListFragment(SearchListFragment searchListFragment) {
+        this.searchListFragment = searchListFragment;
+    }
 
-    public void processImageCaptureForProfilePhoto() {
+
+    @Override
+    protected void onDestroy() {
+        super.onDestroy();
         try {
-            if (PermissionsUtils.isCameraPermissionGranted(this)) {
-                imageCaptureForProfilePhoto();
-            } else {
-                if (Utils.hasMarshmallow() && PermissionsUtils.checkSelfForCameraPermission(this)) {
-                    applozicPermission.requestCameraPermissionForProfilePhoto();
-                } else {
-                    imageCaptureForProfilePhoto();
-                }
+            if (connectivityReceiver != null) {
+                unregisterReceiver(connectivityReceiver);
+            }
+            if (accountStatusAsyncTask != null) {
+                accountStatusAsyncTask.cancel(true);
             }
-
         } catch (Exception e) {
             e.printStackTrace();
         }
     }
 
-    public void processGalleryPhotoSelection(){
-        if(Utils.hasMarshmallow() && PermissionsUtils.checkSelfForStoragePermission(this)){
-            applozicPermission.requestStoragePermissionsForProfilePhoto();
-        }else {
-            Intent getContentIntent = new Intent(Intent.ACTION_PICK,
-                    android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
-            startActivityForResult(getContentIntent, ProfileFragment.REQUEST_CODE_ATTACH_PHOTO);
+    @Override
+    public void onClickOnMessageReply(Message message) {
+        if (message != null && conversation != null) {
+            conversation.onClickOnMessageReply(message);
+        }
+    }
+
+    private class SyncMessagesAsyncTask extends AsyncTask<Boolean, Void, Void> {
+        MobiComMessageService messageService;
+
+        public SyncMessagesAsyncTask(Context context) {
+            messageService = new MobiComMessageService(context, MessageIntentService.class);
+        }
+
+        protected Void doInBackground(Boolean... parms) {
+            messageService.syncMessages();
+            return null;
+        }
+    }
+
+    public class SyncAccountStatusAsyncTask extends AsyncTask<Void, Void, Boolean> {
+        Context context;
+        RegisterUserClientService registerUserClientService;
+        String loggedInUserId;
+        ApplozicClient applozicClient;
+        WeakReference<Snackbar> snackBarWeakReference;
+        WeakReference<LinearLayout> linearLayoutWeakReference;
+
+        public SyncAccountStatusAsyncTask(Context context, LinearLayout linearLayout, Snackbar snackbar) {
+            this.context = context;
+            this.registerUserClientService = new RegisterUserClientService(context);
+            this.linearLayoutWeakReference = new WeakReference<LinearLayout>(linearLayout);
+            this.snackBarWeakReference = new WeakReference<Snackbar>(snackbar);
+            this.applozicClient = ApplozicClient.getInstance(context);
+            this.loggedInUserId = MobiComUserPreference.getInstance(context).getUserId();
+        }
+
+        @Override
+        protected Boolean doInBackground(Void... voids) {
+            User applozicUser = new User();
+            applozicUser.setUserId(loggedInUserId);
+            try {
+                registerUserClientService.updateRegisteredAccount(applozicUser);
+            } catch (Exception e) {
+                e.printStackTrace();
+            }
+            return true;
+        }
+
+
+        @Override
+        protected void onPostExecute(Boolean aBoolean) {
+            super.onPostExecute(aBoolean);
+            if (applozicClient.isAccountClosed() || applozicClient.isNotAllowed()) {
+                LinearLayout linearLayout = null;
+                Snackbar snackbar = null;
+                if (snackBarWeakReference != null) {
+                    snackbar = snackBarWeakReference.get();
+                }
+                if (linearLayoutWeakReference != null) {
+                    linearLayout = linearLayoutWeakReference.get();
+                }
+                if (snackbar != null && linearLayout != null) {
+                    snackbar = Snackbar.make(linearLayout, applozicClient.isAccountClosed() ?
+                                    R.string.applozic_account_closed : R.string.applozic_free_version_not_allowed_on_release_build,
+                            Snackbar.LENGTH_INDEFINITE);
+                    snackbar.show();
+                }
+            }
         }
     }
 
-}
\ No newline at end of file
+}
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/FullScreenImageActivity.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/FullScreenImageActivity.java
index a6332d29..238ba311 100755
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/FullScreenImageActivity.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/FullScreenImageActivity.java
@@ -1,10 +1,19 @@
 package com.applozic.mobicomkit.uiwidgets.conversation.activity;
 
 import android.annotation.TargetApi;
+import android.content.ClipData;
 import android.content.Intent;
+import android.content.IntentFilter;
+import android.content.pm.PackageManager;
+import android.content.pm.ResolveInfo;
+import android.graphics.Bitmap;
+import android.graphics.Color;
+import android.graphics.drawable.ColorDrawable;
+import android.net.ConnectivityManager;
 import android.net.Uri;
 import android.os.Build;
 import android.os.Bundle;
+import android.support.v4.content.FileProvider;
 import android.support.v7.app.ActionBar;
 import android.support.v7.app.AppCompatActivity;
 import android.support.v7.widget.Toolbar;
@@ -18,67 +27,74 @@
 import android.widget.ProgressBar;
 
 import com.applozic.mobicomkit.api.MobiComKitConstants;
-import com.applozic.mobicomkit.api.attachment.AttachmentView;
 import com.applozic.mobicomkit.api.conversation.Message;
+import com.applozic.mobicomkit.broadcast.ConnectivityReceiver;
 import com.applozic.mobicomkit.uiwidgets.R;
 
+import com.applozic.mobicomkit.uiwidgets.conversation.TouchImageView;
+import com.applozic.mobicommons.commons.core.utils.Utils;
+import com.applozic.mobicommons.commons.image.ImageUtils;
 import com.applozic.mobicommons.file.FileUtils;
 import com.applozic.mobicommons.json.GsonUtils;
 
 import java.io.File;
+import java.util.List;
 
 /**
  * Created by devashish on 22/9/14.
  */
-public class FullScreenImageActivity extends AppCompatActivity {
+public class FullScreenImageActivity extends AppCompatActivity  {
+    TouchImageView mediaImageViewView;
 
     private Message message;
+    private ConnectivityReceiver connectivityReceiver;
 
     protected void onCreate(Bundle savedInstanceState) {
 
         super.onCreate(savedInstanceState);
-
         setContentView(R.layout.mobicom_image_full_screen);
         Toolbar toolbar = (Toolbar) findViewById(R.id.my_toolbar);
         setSupportActionBar(toolbar);
+        getSupportActionBar().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
         getSupportActionBar().setDisplayHomeAsUpEnabled(true);
         getSupportActionBar().show();
         showUi();
-        AttachmentView mediaImageViewView = (AttachmentView) findViewById(R.id.full_screen_image);
-        mediaImageViewView.setMCacheFlag(false);
+
+        mediaImageViewView = (TouchImageView) findViewById(R.id.full_screen_image);
         ProgressBar progressBar = (ProgressBar) findViewById(R.id.full_screen_progress_bar);
-        mediaImageViewView.setProressBar(progressBar);
+        progressBar.setVisibility(View.VISIBLE);
         String messageJson = getIntent().getStringExtra(MobiComKitConstants.MESSAGE_JSON_INTENT);
+
         if (!TextUtils.isEmpty(messageJson)) {
             message = (Message) GsonUtils.getObjectFromJson(messageJson, Message.class);
         }
 
         if (message != null && message.getFilePaths() != null && !message.getFilePaths().isEmpty()) {
-            mediaImageViewView.setMessage(message);
+            try {
+                Bitmap imageBitmap = ImageUtils.decodeSampledBitmapFromPath(message.getFilePaths().get(0));
+                mediaImageViewView.setImageBitmap(imageBitmap);
+            } catch (Exception e) {
+                e.printStackTrace();
+            }
         }
 
-        getWindow().getDecorView().setOnSystemUiVisibilityChangeListener(new View.OnSystemUiVisibilityChangeListener() {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
+            getWindow().getDecorView().setOnSystemUiVisibilityChangeListener(new View.OnSystemUiVisibilityChangeListener() {
 
-            @Override
-            public void onSystemUiVisibilityChange(int visibility) {
-                if (visibility == 0) {
-                    getSupportActionBar().show();
+                @Override
+                public void onSystemUiVisibilityChange(int visibility) {
+                    if (visibility == 0) {
+                        getSupportActionBar().show();
+                    }
                 }
-            }
-        });
+            });
+        }
+        progressBar.setVisibility(View.GONE);
 
+        connectivityReceiver = new ConnectivityReceiver();
+        registerReceiver(connectivityReceiver, new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION));
     }
 
-    @Override
-    public boolean onTouchEvent(MotionEvent event) {
-
-
-        if (event.getAction() == MotionEvent.ACTION_DOWN) {
-            toggleActionBar();
-
-        }
-        return true;
-    }
 
     private void toggleActionBar() {
 
@@ -113,7 +129,9 @@ private void showUi() {
                             | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);
 
         } else {
-            requestWindowFeature(Window.FEATURE_ACTION_BAR_OVERLAY);
+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
+                requestWindowFeature(Window.FEATURE_ACTION_BAR_OVERLAY);
+            }
             getWindow().clearFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);
         }
     }
@@ -144,12 +162,40 @@ public boolean onCreateOptionsMenu(Menu menu) {
     public boolean onOptionsItemSelected(MenuItem item) {
         int i = item.getItemId();
         if (i == R.id.shareOptions) {
+
             Intent shareIntent = new Intent();
             shareIntent.setAction(Intent.ACTION_SEND);
-            Uri uri = Uri.fromFile(new File(message.getFilePaths().get(0)));
+
+            Uri uri = FileProvider.getUriForFile(this, Utils.getMetaDataValue(this, MobiComKitConstants.PACKAGE_NAME) + ".provider", new File(message.getFilePaths().get(0)));
+
+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
+                shareIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
+            } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
+                ClipData clip =
+                        ClipData.newUri(getContentResolver(), "a Photo", uri);
+
+                shareIntent.setClipData(clip);
+                shareIntent.addFlags(Intent.FLAG_GRANT_WRITE_URI_PERMISSION);
+                shareIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
+
+            } else {
+                List<ResolveInfo> resInfoList =
+                        getPackageManager()
+                                .queryIntentActivities(shareIntent, PackageManager.MATCH_DEFAULT_ONLY);
+
+                for (ResolveInfo resolveInfo : resInfoList) {
+                    String packageName = resolveInfo.activityInfo.packageName;
+                    grantUriPermission(packageName, uri,
+                            Intent.FLAG_GRANT_WRITE_URI_PERMISSION);
+                    grantUriPermission(packageName, uri,
+                            Intent.FLAG_GRANT_READ_URI_PERMISSION);
+                }
+            }
+
             shareIntent.putExtra(Intent.EXTRA_STREAM, uri);
             shareIntent.setType(FileUtils.getMimeType(new File(message.getFilePaths().get(0))));
             startActivity(Intent.createChooser(shareIntent, ""));
+
         } else if (i == R.id.forward) {
             Intent intent = new Intent();
             intent.putExtra(MobiComKitConstants.MESSAGE_JSON_INTENT, GsonUtils.getJsonFromObject(message, Message.class));
@@ -160,4 +206,16 @@ public boolean onOptionsItemSelected(MenuItem item) {
         return super.onOptionsItemSelected(item);
     }
 
+    @Override
+    protected void onDestroy() {
+        super.onDestroy();
+        try {
+            if (connectivityReceiver != null) {
+                unregisterReceiver(connectivityReceiver);
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+
 }
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/MobiComAttachmentSelectorActivity.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/MobiComAttachmentSelectorActivity.java
index 5dd60421..0393674e 100644
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/MobiComAttachmentSelectorActivity.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/MobiComAttachmentSelectorActivity.java
@@ -1,56 +1,107 @@
 package com.applozic.mobicomkit.uiwidgets.conversation.activity;
 
 import android.app.Activity;
+import android.app.ProgressDialog;
+import android.content.Context;
 import android.content.Intent;
+import android.content.IntentFilter;
 import android.database.Cursor;
+import android.net.ConnectivityManager;
 import android.net.Uri;
+import android.os.AsyncTask;
 import android.os.Bundle;
 import android.provider.OpenableColumns;
 import android.support.v7.app.AppCompatActivity;
-import android.util.Log;
+import android.text.TextUtils;
 import android.view.View;
 import android.widget.Button;
 import android.widget.EditText;
 import android.widget.GridView;
 import android.widget.Toast;
 
-import com.applozic.mobicomkit.uiwidgets.ApplozicSetting;
+import com.applozic.mobicomkit.api.account.user.MobiComUserPreference;
+import com.applozic.mobicomkit.api.attachment.FileClientService;
+import com.applozic.mobicomkit.api.conversation.Message;
+import com.applozic.mobicomkit.broadcast.ConnectivityReceiver;
+import com.applozic.mobicomkit.uiwidgets.AlCustomizationSettings;
 import com.applozic.mobicomkit.uiwidgets.R;
+import com.applozic.mobicomkit.uiwidgets.conversation.ConversationUIService;
 import com.applozic.mobicomkit.uiwidgets.conversation.adapter.MobiComAttachmentGridViewAdapter;
+import com.applozic.mobicommons.commons.core.utils.Utils;
+import com.applozic.mobicommons.file.FilePathFinder;
 import com.applozic.mobicommons.file.FileUtils;
+import com.applozic.mobicommons.json.GsonUtils;
 
+import java.io.File;
+import java.text.SimpleDateFormat;
 import java.util.ArrayList;
+import java.util.Date;
+import java.util.List;
 
 /**
  *
  */
-public class MobiComAttachmentSelectorActivity extends AppCompatActivity  {
+public class MobiComAttachmentSelectorActivity extends AppCompatActivity {
 
     public static final String MULTISELECT_SELECTED_FILES = "multiselect.selectedFiles";
     public static final String MULTISELECT_MESSAGE = "multiselect.message";
+    public static final String URI_LIST = "URI_LIST";
+    public static String USER_ID = "USER_ID";
+    public static String DISPLAY_NAME = "DISPLAY_NAME";
+    public static String GROUP_ID = "GROUP_ID";
+    public static String GROUP_NAME = "GROUP_NAME";
+    private static int REQUEST_CODE_ATTACH_PHOTO = 10;
+    AlCustomizationSettings alCustomizationSettings;
+    FileClientService fileClientService;
+    Uri imageUri;
+    String userID, displayName, groupName;
+    Integer groupID;
+    Message message;
+    MobiComUserPreference userPreferences;
     private String TAG = "MultiAttActivity";
-    private static int REQUEST_CODE_ATTACH_PHOTO =10;
-    private  Button sendAttachment;
-    private  Button cancelAttachment;
+    private Button sendAttachment;
+    private Button cancelAttachment;
     private EditText messageEditText;
-
-
-    private  GridView galleryImagesGridView;
-    private  ArrayList<Uri> attachmentFileList = new ArrayList<Uri>();
-
+    private ConnectivityReceiver connectivityReceiver;
+    private GridView galleryImagesGridView;
+    private ArrayList<Uri> attachmentFileList = new ArrayList<Uri>();
     private MobiComAttachmentGridViewAdapter imagesAdapter;
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.mobicom_multi_attachment_activity);
+        String jsonString = FileUtils.loadSettingsJsonFile(getApplicationContext());
+        if (!TextUtils.isEmpty(jsonString)) {
+            alCustomizationSettings = (AlCustomizationSettings) GsonUtils.getObjectFromJson(jsonString, AlCustomizationSettings.class);
+        } else {
+            alCustomizationSettings = new AlCustomizationSettings();
+        }
+
+        fileClientService = new FileClientService(this);
+        userPreferences = MobiComUserPreference.getInstance(this);
+        Intent intent = getIntent();
+        if (intent.getExtras() != null) {
+            userID = intent.getExtras().getString(USER_ID);
+            displayName = intent.getExtras().getString(DISPLAY_NAME);
+            groupID = intent.getExtras().getInt(GROUP_ID, 0);
+            groupName = intent.getExtras().getString(GROUP_NAME);
+            imageUri = (Uri) intent.getParcelableExtra(URI_LIST);
+            if (imageUri != null) {
+                attachmentFileList.add(imageUri);
+            }
+        }
         initViews();
         setUpGridView();
-
-        Intent getContentIntent = FileUtils.createGetContentIntent();
-        getContentIntent.putExtra(Intent.EXTRA_LOCAL_ONLY, true);
-        Intent intentPick = Intent.createChooser(getContentIntent, getString(R.string.select_file));
-        startActivityForResult(intentPick, REQUEST_CODE_ATTACH_PHOTO);
+        fileClientService = new FileClientService(this);
+        if (imageUri == null) {
+            Intent getContentIntent = FileUtils.createGetContentIntent();
+            getContentIntent.putExtra(Intent.EXTRA_LOCAL_ONLY, true);
+            Intent intentPick = Intent.createChooser(getContentIntent, getString(R.string.select_file));
+            startActivityForResult(intentPick, REQUEST_CODE_ATTACH_PHOTO);
+        }
+        connectivityReceiver = new ConnectivityReceiver();
+        registerReceiver(connectivityReceiver, new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION));
     }
 
     /**
@@ -59,7 +110,7 @@ protected void onCreate(Bundle savedInstanceState) {
     private void initViews() {
 
         sendAttachment = (Button) findViewById(R.id.mobicom_attachment_send_btn);
-        cancelAttachment=  (Button) findViewById(R.id.mobicom_attachment_cancel_btn);
+        cancelAttachment = (Button) findViewById(R.id.mobicom_attachment_cancel_btn);
         galleryImagesGridView = (GridView) findViewById(R.id.mobicom_attachment_grid_View);
         messageEditText = (EditText) findViewById(R.id.mobicom_attachment_edit_text);
 
@@ -78,29 +129,80 @@ public void onClick(View v) {
             @Override
             public void onClick(View v) {
 
-                if(attachmentFileList.isEmpty()){
-                    Toast.makeText(getApplicationContext(),R.string.mobicom_select_attachment_text, Toast.LENGTH_SHORT).show();
+                if (attachmentFileList.isEmpty()) {
+                    Toast.makeText(getApplicationContext(), R.string.mobicom_select_attachment_text, Toast.LENGTH_SHORT).show();
                     return;
                 }
 
-                Intent intent = new Intent();
-                intent.putParcelableArrayListExtra(MULTISELECT_SELECTED_FILES, attachmentFileList);
-                intent.putExtra(MULTISELECT_MESSAGE, messageEditText.getText().toString());
-                setResult(RESULT_OK, intent);
-                finish();
+                if (imageUri != null) {
+                    for (Uri uri : attachmentFileList) {
+                        try {
+                            String filePath = uri.getPath();
+                            if (TextUtils.isEmpty(filePath)) {
+                                Toast.makeText(MobiComAttachmentSelectorActivity.this, R.string.info_file_attachment_error, Toast.LENGTH_LONG).show();
+                                return;
+                            }
+                            Message messageToSend = new Message();
+                            if (groupID != 0) {
+                                messageToSend.setGroupId(groupID);
+                            } else {
+                                messageToSend.setTo(userID);
+                                messageToSend.setContactIds(userID);
+                            }
+                            messageToSend.setContentType(Message.ContentType.ATTACHMENT.getValue());
+                            messageToSend.setRead(Boolean.TRUE);
+                            messageToSend.setStoreOnDevice(Boolean.TRUE);
+                            if (messageToSend.getCreatedAtTime() == null) {
+                                messageToSend.setCreatedAtTime(System.currentTimeMillis() + userPreferences.getDeviceTimeOffset());
+                            }
+                            messageToSend.setSendToDevice(Boolean.FALSE);
+                            messageToSend.setType(Message.MessageType.MT_OUTBOX.getValue());
+                            messageToSend.setMessage(messageEditText.getText().toString());
+                            messageToSend.setDeviceKeyString(userPreferences.getDeviceKeyString());
+                            messageToSend.setSource(Message.Source.MT_MOBILE_APP.getValue());
+                            if (!TextUtils.isEmpty(filePath)) {
+                                List<String> filePaths = new ArrayList<String>();
+                                filePaths.add(filePath);
+                                messageToSend.setFilePaths(filePaths);
+                            }
+                            Intent startConversationActivity = new Intent(MobiComAttachmentSelectorActivity.this, ConversationActivity.class);
+                            if (groupID != 0) {
+                                startConversationActivity.putExtra(ConversationUIService.GROUP_ID, groupID);
+                                startConversationActivity.putExtra(ConversationUIService.GROUP_NAME, groupName);
+                                startConversationActivity.putExtra(ConversationUIService.FORWARD_MESSAGE, GsonUtils.getJsonFromObject(messageToSend, messageToSend.getClass()));
+                            } else {
+                                startConversationActivity.putExtra(ConversationUIService.USER_ID, userID);
+                                startConversationActivity.putExtra(ConversationUIService.DISPLAY_NAME, displayName);
+                                startConversationActivity.putExtra(ConversationUIService.FORWARD_MESSAGE, GsonUtils.getJsonFromObject(messageToSend, messageToSend.getClass()));
+                            }
+                            startActivity(startConversationActivity);
+                            finish();
+                        } catch (Exception e) {
+                            e.printStackTrace();
+                        }
+                    }
+
+                } else {
+                    Intent intent = new Intent();
+                    intent.putParcelableArrayListExtra(MULTISELECT_SELECTED_FILES, attachmentFileList);
+                    intent.putExtra(MULTISELECT_MESSAGE, messageEditText.getText().toString());
+                    setResult(RESULT_OK, intent);
+                    finish();
+                }
+
+
             }
         });
 
     }
 
     /**
-     *
      * @param uri
      */
     private void addUri(Uri uri) {
 
         attachmentFileList.add(uri);
-        Log.i(TAG, "attachmentFileList  :: " + attachmentFileList);
+        Utils.printLog(MobiComAttachmentSelectorActivity.this,TAG, "attachmentFileList  :: " + attachmentFileList);
 
 
     }
@@ -109,37 +211,105 @@ private void addUri(Uri uri) {
      *
      */
     private void setUpGridView() {
-        imagesAdapter = new MobiComAttachmentGridViewAdapter(MobiComAttachmentSelectorActivity.this, attachmentFileList);
+        imagesAdapter = new MobiComAttachmentGridViewAdapter(MobiComAttachmentSelectorActivity.this, attachmentFileList, alCustomizationSettings, imageUri != null);
         galleryImagesGridView.setAdapter(imagesAdapter);
     }
-        @Override
-        protected void onActivityResult(int requestCode, int resultCode, Intent intent) {
-            if(resultCode == Activity.RESULT_OK ){
-                Uri selectedFileUri = (intent == null ? null : intent.getData());
-                Log.i(TAG, "selectedFileUri :: " + selectedFileUri);
-                if(selectedFileUri != null) {
-                    try{
-                        int maxFileSize = ApplozicSetting.getInstance(this).getMaxAttachmentSizeAllowed()*1024*1024;
-                        Cursor returnCursor =
-                                getContentResolver().query(selectedFileUri, null, null, null, null);
-                        if (returnCursor != null) {
-                            int sizeIndex = returnCursor.getColumnIndex(OpenableColumns.SIZE);
-                            returnCursor.moveToFirst();
-                            Long fileSize = returnCursor.getLong(sizeIndex);
-                            returnCursor.close();
-                            if (fileSize > maxFileSize) {
-                                Toast.makeText(this, R.string.info_attachment_max_allowed_file_size, Toast.LENGTH_LONG).show();
-                                return;
-                            }
+
+    @Override
+    protected void onActivityResult(int requestCode, int resultCode, Intent intent) {
+        if (resultCode == Activity.RESULT_OK) {
+            Uri selectedFileUri = (intent == null ? null : intent.getData());
+            Utils.printLog(MobiComAttachmentSelectorActivity.this,TAG, "selectedFileUri :: " + selectedFileUri);
+            if(selectedFileUri != null) {
+                String fileName = null;
+                try {
+                    int maxFileSize = alCustomizationSettings.getMaxAttachmentSizeAllowed() * 1024 * 1024;
+                    Cursor returnCursor =
+                            getContentResolver().query(selectedFileUri, null, null, null, null);
+                    if (returnCursor != null) {
+                        int sizeIndex = returnCursor.getColumnIndex(OpenableColumns.SIZE);
+                        returnCursor.moveToFirst();
+                        Long fileSize = returnCursor.getLong(sizeIndex);
+                        returnCursor.close();
+                        if (fileSize > maxFileSize) {
+                            Toast.makeText(this, R.string.info_attachment_max_allowed_file_size, Toast.LENGTH_LONG).show();
+                            return;
                         }
-                        addUri(selectedFileUri);
-                        imagesAdapter.notifyDataSetChanged();
-                    }catch (Exception e){
-                        e.printStackTrace();
                     }
+                    String mimeType = FileUtils.getMimeTypeByContentUriOrOther(this, selectedFileUri);
+                    if (TextUtils.isEmpty(mimeType)) {
+                        return;
+                    }
+                    String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());
+                    fileName = FileUtils.getFileName(this, selectedFileUri);
+                    String fileFormat = FileUtils.getFileFormat(fileName);
+                    if (TextUtils.isEmpty(fileFormat)) {
+                        return;
+                    }
+                    String fileNameToWrite = timeStamp + "." + fileFormat;
+                    File mediaFile = FileClientService.getFilePath(fileNameToWrite, getApplicationContext(), mimeType);
+                    new FileTaskAsync(mediaFile, selectedFileUri, this).execute((Void) null);
+                } catch (Exception e) {
+                    e.printStackTrace();
                 }
             }
-            super.onActivityResult(requestCode, resultCode, intent);
+        }
+        super.onActivityResult(requestCode, resultCode, intent);
+    }
+
+    @Override
+    protected void onDestroy() {
+        super.onDestroy();
+        try {
+            if (connectivityReceiver != null) {
+                unregisterReceiver(connectivityReceiver);
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+
+    public class FileTaskAsync extends AsyncTask<Void, Integer, Boolean> {
+        Context context;
+        FileClientService fileClientService;
+        File file;
+        Uri uri;
+        ProgressDialog progressDialog;
+
+        public FileTaskAsync(File file, Uri uri, Context context) {
+            this.context = context;
+            this.file = file;
+            this.uri = uri;
+            this.fileClientService = new FileClientService(context);
+
+        }
+
+        @Override
+        protected void onPreExecute() {
+            super.onPreExecute();
+            progressDialog = ProgressDialog.show(context, "",
+                    context.getString(R.string.applozic_contacts_loading_info), true);
+        }
+
+        @Override
+        protected Boolean doInBackground(Void... params) {
+            fileClientService.writeFile(uri, file);
+            return true;
+        }
+
+        @Override
+        protected void onPostExecute(Boolean b) {
+            super.onPostExecute(b);
+            if (progressDialog != null && progressDialog.isShowing()) {
+                progressDialog.dismiss();
+            }
+            if (file == null) {
+                return;
+            }
+            Uri uri = Uri.parse(file.getAbsolutePath());
+            addUri(uri);
+            imagesAdapter.notifyDataSetChanged();
         }
 
-}
\ No newline at end of file
+    }
+}
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/MobiComKitActivityInterface.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/MobiComKitActivityInterface.java
index 77dfe941..4967b13f 100755
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/MobiComKitActivityInterface.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/MobiComKitActivityInterface.java
@@ -17,17 +17,17 @@
     int REQUEST_CODE_FULL_SCREEN_ACTION = 301;
     int INSTRUCTION_DELAY = 5000;
 
-    void onQuickConversationFragmentItemClick(View view, Contact contact,Channel channel,Integer conversationId);
+    void onQuickConversationFragmentItemClick(View view, Contact contact, Channel channel, Integer conversationId, String searchString);
 
     void startContactActivityForResult();
 
     void addFragment(ConversationFragment conversationFragment);
 
-    void updateLatestMessage(Message message,String number);
+    void updateLatestMessage(Message message, String number);
 
-    void removeConversation(Message message,String number);
+    void removeConversation(Message message, String number);
 
-    void startActivityForResult(Intent intent,int code);
+    void startActivityForResult(Intent intent, int code);
 
     void showErrorMessageView(String errorMessage);
 
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/MobicomLocationActivity.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/MobicomLocationActivity.java
index 21175611..bf3a5e48 100644
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/MobicomLocationActivity.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/MobicomLocationActivity.java
@@ -5,25 +5,36 @@
 import android.content.Context;
 import android.content.DialogInterface;
 import android.content.Intent;
+import android.content.IntentFilter;
 import android.content.pm.PackageManager;
+import android.graphics.Color;
+import android.graphics.drawable.ColorDrawable;
 import android.location.Location;
 import android.location.LocationManager;
+import android.net.ConnectivityManager;
+import android.os.Build;
 import android.os.Bundle;
 import android.provider.Settings;
 import android.support.design.widget.Snackbar;
 import android.support.v4.app.ActivityCompat;
 import android.support.v7.app.AppCompatActivity;
 import android.support.v7.widget.Toolbar;
+import android.text.TextUtils;
 import android.util.Log;
 import android.view.View;
 import android.widget.LinearLayout;
 import android.widget.RelativeLayout;
 import android.widget.Toast;
 
+import com.applozic.mobicomkit.broadcast.ConnectivityReceiver;
+import com.applozic.mobicomkit.uiwidgets.AlCustomizationSettings;
 import com.applozic.mobicomkit.uiwidgets.R;
 import com.applozic.mobicomkit.uiwidgets.conversation.ConversationUIService;
+import com.applozic.mobicomkit.uiwidgets.instruction.ApplozicPermissions;
 import com.applozic.mobicommons.commons.core.utils.PermissionsUtils;
 import com.applozic.mobicommons.commons.core.utils.Utils;
+import com.applozic.mobicommons.file.FileUtils;
+import com.applozic.mobicommons.json.GsonUtils;
 import com.google.android.gms.common.ConnectionResult;
 import com.google.android.gms.common.api.GoogleApiClient;
 import com.google.android.gms.location.LocationListener;
@@ -34,10 +45,9 @@
 import com.google.android.gms.maps.OnMapReadyCallback;
 import com.google.android.gms.maps.SupportMapFragment;
 import com.google.android.gms.maps.model.LatLng;
+import com.google.android.gms.maps.model.Marker;
 import com.google.android.gms.maps.model.MarkerOptions;
 
-import com.applozic.mobicomkit.uiwidgets.instruction.ApplozicPermissions;
-
 
 public class MobicomLocationActivity extends AppCompatActivity implements OnMapReadyCallback, LocationListener, GoogleApiClient.OnConnectionFailedListener, GoogleApiClient.ConnectionCallbacks, ActivityCompat.OnRequestPermissionsResultCallback {
 
@@ -52,6 +62,11 @@
     public static final int LOCATION_SERVICE_ENABLE = 1001;
     protected static final long UPDATE_INTERVAL = 5;
     protected static final long FASTEST_INTERVAL = 1;
+    private ConnectivityReceiver connectivityReceiver;
+    AlCustomizationSettings alCustomizationSettings;
+    Marker myLocationMarker;
+    ApplozicPermissions applozicPermissions;
+    static final String TAG = "MobicomLocationActivity";
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
@@ -59,41 +74,92 @@ protected void onCreate(Bundle savedInstanceState) {
         setContentView(R.layout.activity_applozic_location);
 
         Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar_map_screen);
-        toolbar.setTitle("Send Location");
+        toolbar.setTitle(getResources().getString(R.string.send_location));
         setSupportActionBar(toolbar);
+        String jsonString = FileUtils.loadSettingsJsonFile(getApplicationContext());
+        if (!TextUtils.isEmpty(jsonString)) {
+            alCustomizationSettings = (AlCustomizationSettings) GsonUtils.getObjectFromJson(jsonString, AlCustomizationSettings.class);
+        } else {
+            alCustomizationSettings = new AlCustomizationSettings();
+        }
+        if (!TextUtils.isEmpty(alCustomizationSettings.getThemeColorPrimary()) && !TextUtils.isEmpty(alCustomizationSettings.getThemeColorPrimaryDark())) {
+            getSupportActionBar().setBackgroundDrawable(new ColorDrawable(Color.parseColor(alCustomizationSettings.getThemeColorPrimary())));
+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
+                getWindow().setStatusBarColor(Color.parseColor(alCustomizationSettings.getThemeColorPrimaryDark()));
+            }
+        }
         getSupportActionBar().setDisplayHomeAsUpEnabled(true);
-
+        layout = (LinearLayout) findViewById(R.id.footerAd);
         sendLocation = (RelativeLayout) findViewById(R.id.sendLocation);
         mapFragment = (SupportMapFragment) getSupportFragmentManager().findFragmentById(R.id.map);
-
-        googleApiClient = new GoogleApiClient.Builder(this)
+        applozicPermissions = new ApplozicPermissions(MobicomLocationActivity.this, layout);
+        googleApiClient = new GoogleApiClient.Builder(getApplicationContext())
                 .addConnectionCallbacks(this)
                 .addOnConnectionFailedListener(this)
                 .addApi(LocationServices.API).build();
-        onNewIntent(getIntent());
-
         processLocation();
+        onNewIntent(getIntent());
+        connectivityReceiver = new ConnectivityReceiver();
+        registerReceiver(connectivityReceiver, new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION));
     }
 
+
     @Override
-    public void onMapReady(GoogleMap googleMap) {
-        position = new LatLng(mCurrentLocation.getLatitude(), mCurrentLocation.getLongitude());
-
-        googleMap.addMarker(new MarkerOptions().position(position).title(""));
-        googleMap.moveCamera(CameraUpdateFactory.newLatLngZoom(position, 20));
-        googleMap.animateCamera(CameraUpdateFactory.zoomTo(17), 2000, null);
-
-        sendLocation.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                Log.i("test", "in map");
-                Intent intent = new Intent();
-                intent.putExtra("latitude", mCurrentLocation.getLatitude());
-                intent.putExtra("longitude", mCurrentLocation.getLongitude());
-                setResult(RESULT_OK, intent);
-                finish();
+    public void onMapReady(final GoogleMap googleMap) {
+        try {
+            if (mCurrentLocation != null) {
+                position = new LatLng(mCurrentLocation.getLatitude(), mCurrentLocation.getLongitude());
+                googleMap.clear();
+                MarkerOptions markerOptions = new MarkerOptions();
+                markerOptions.draggable(true);
+                if (myLocationMarker == null) {
+                    myLocationMarker = googleMap.addMarker(markerOptions.position(position).title(""));
+                    googleMap.moveCamera(CameraUpdateFactory.newLatLngZoom(position, 20));
+                    googleMap.animateCamera(CameraUpdateFactory.zoomTo(17), 2000, null);
+                } else {
+                    googleMap.addMarker(markerOptions.position(myLocationMarker.getPosition()).title(""));
+                }
+                googleMap.setMyLocationEnabled(true);
+                googleMap.getUiSettings().setZoomGesturesEnabled(true);
+                googleMap.setOnMarkerDragListener(new GoogleMap.OnMarkerDragListener() {
+                    @Override
+                    public void onMarkerDragStart(Marker marker) {
+
+                    }
+
+                    @Override
+                    public void onMarkerDrag(Marker marker) {
+
+                    }
+
+                    @Override
+                    public void onMarkerDragEnd(Marker marker) {
+                        if (myLocationMarker != null) {
+                            myLocationMarker.remove();
+                        }
+                        MarkerOptions newMarkerOptions = new MarkerOptions();
+                        newMarkerOptions.draggable(true);
+                        myLocationMarker = googleMap.addMarker(newMarkerOptions.position(marker.getPosition()).title(""));
+                    }
+                });
             }
-        });
+
+            sendLocation.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    Utils.printLog(MobicomLocationActivity.this,TAG, "On click of send location button");
+                    if (myLocationMarker != null) {
+                        Intent intent = new Intent();
+                        intent.putExtra("latitude", myLocationMarker.getPosition().latitude);
+                        intent.putExtra("longitude", myLocationMarker.getPosition().longitude);
+                        setResult(RESULT_OK, intent);
+                        finish();
+                    }
+                }
+            });
+        } catch (Exception e) {
+            Utils.printLog(MobicomLocationActivity.this,TAG, "Check if location permission are added");
+        }
 
     }
 
@@ -124,7 +190,7 @@ public void onClick(DialogInterface dialog, int id) {
                             startActivityForResult(intent, LOCATION_SERVICE_ENABLE);
                         }
                     })
-                    .setNegativeButton(android.R.string.cancel, new DialogInterface.OnClickListener() {
+                    .setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() {
                         public void onClick(DialogInterface dialog, int id) {
                             dialog.cancel();
                             Toast.makeText(MobicomLocationActivity.this, R.string.location_sending_cancelled, Toast.LENGTH_LONG).show();
@@ -138,17 +204,35 @@ public void onClick(DialogInterface dialog, int id) {
         }
     }
 
+
     public void processLocation() {
-      //  if (Utils.hasMarshmallow()) {
-          //  new ApplozicPermissions(MobicomLocationActivity.this, layout).checkRuntimePermissionForLocation();
-       // } else {
+        if (Utils.hasMarshmallow()) {
+            applozicPermissions.checkRuntimePermissionForLocationActivity();
+        } else {
             processingLocation();
-       // }
+        }
+    }
+
+    @Override
+    protected void onStart() {
+        super.onStart();
+        if (googleApiClient != null) {
+            googleApiClient.connect();
+        }
+    }
+
+
+    @Override
+    protected void onStop() {
+        super.onStop();
+        if (googleApiClient != null) {
+            googleApiClient.disconnect();
+        }
     }
 
     @Override
     public void onConnectionSuspended(int i) {
-        Log.w(((Object) this).getClass().getSimpleName(),
+        Log.w(TAG,
                 "onConnectionSuspended() called.");
 
     }
@@ -170,16 +254,18 @@ public void onConnected(Bundle bundle) {
             if (mCurrentLocation == null) {
                 Toast.makeText(this, R.string.waiting_for_current_location, Toast.LENGTH_SHORT).show();
                 locationRequest = new LocationRequest();
-                locationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);
+                locationRequest.setPriority(LocationRequest.PRIORITY_BALANCED_POWER_ACCURACY);
                 locationRequest.setInterval(UPDATE_INTERVAL);
                 locationRequest.setFastestInterval(FASTEST_INTERVAL);
                 LocationServices.FusedLocationApi.requestLocationUpdates(googleApiClient, locationRequest, this);
             }
 
-            if (mCurrentLocation != null)
+            if (mCurrentLocation != null) {
                 mapFragment.getMapAsync(this);
+            }
 
         } catch (Exception e) {
+            e.printStackTrace();
         }
 
     }
@@ -196,9 +282,13 @@ public void onLocationChanged(Location location) {
     }
 
     public void showSnackBar(int resId) {
-        snackbar = Snackbar.make(layout, resId,
-                Snackbar.LENGTH_SHORT);
-        snackbar.show();
+        try {
+            snackbar = Snackbar.make(layout, resId,
+                    Snackbar.LENGTH_SHORT);
+            snackbar.show();
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
     }
 
     @Override
@@ -206,4 +296,30 @@ public void onConnectionFailed(ConnectionResult connectionResult) {
 
     }
 
+    @Override
+    protected void onDestroy() {
+        super.onDestroy();
+        try {
+            if (connectivityReceiver != null) {
+                unregisterReceiver(connectivityReceiver);
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+
+    @Override
+    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
+        if (requestCode == PermissionsUtils.REQUEST_LOCATION) {
+            if (PermissionsUtils.verifyPermissions(grantResults)) {
+                showSnackBar(R.string.location_permission_granted);
+                processingLocation();
+            } else {
+                showSnackBar(R.string.location_permission_not_granted);
+            }
+        } else {
+            super.onRequestPermissionsResult(requestCode, permissions, grantResults);
+        }
+    }
+
 }
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/OnClickReplyInterface.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/OnClickReplyInterface.java
new file mode 100644
index 00000000..756ada0e
--- /dev/null
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/OnClickReplyInterface.java
@@ -0,0 +1,11 @@
+package com.applozic.mobicomkit.uiwidgets.conversation.activity;
+
+import com.applozic.mobicomkit.api.conversation.Message;
+
+/**
+ * Created by ninu on 10/04/17.
+ */
+
+public interface OnClickReplyInterface {
+    void onClickOnMessageReply(Message message);
+}
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/RemoveInterfaceListener.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/RemoveInterfaceListener.java
new file mode 100644
index 00000000..449ee5fb
--- /dev/null
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/RemoveInterfaceListener.java
@@ -0,0 +1,11 @@
+package com.applozic.mobicomkit.uiwidgets.conversation.activity;
+
+/**
+ * Created by Sunil on 12/28/2016.
+ */
+
+public interface RemoveInterfaceListener {
+
+    void removeCallBack();
+
+}
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/adapter/ApplozicContextSpinnerAdapter.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/adapter/ApplozicContextSpinnerAdapter.java
index 3d1e2d34..f002a22d 100644
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/adapter/ApplozicContextSpinnerAdapter.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/adapter/ApplozicContextSpinnerAdapter.java
@@ -11,6 +11,7 @@
 import android.widget.BaseAdapter;
 import android.widget.ImageView;
 import android.widget.TextView;
+
 import com.applozic.mobicomkit.uiwidgets.R;
 import com.applozic.mobicomkit.api.attachment.FileClientService;
 import com.applozic.mobicomkit.feed.TopicDetail;
@@ -26,65 +27,66 @@
  */
 public class ApplozicContextSpinnerAdapter extends BaseAdapter {
 
-        private LayoutInflater mInflater;
-        private List<Conversation> conversationList;
-        private ImageLoader productImageLoader;
-        private FileClientService fileClientService;
-        private Context context;
+    private LayoutInflater mInflater;
+    private List<Conversation> conversationList;
+    private ImageLoader productImageLoader;
+    private FileClientService fileClientService;
+    private Context context;
 
-        public ApplozicContextSpinnerAdapter(final Context context, List<Conversation> conversations) {
-            if(context == null){
-                return;
-            }
-            mInflater = LayoutInflater.from(context);
-            this.conversationList = conversations;
-            this.fileClientService = new FileClientService(context);
-            this.context = context;
-            productImageLoader = new ImageLoader(context, ImageUtils.getLargestScreenDimension((Activity) context)) {
-                @Override
-                protected Bitmap processBitmap(Object data) {
-                    return fileClientService.loadMessageImage(context, (String) data);
-                }
-            };
-            productImageLoader.addImageCache(((FragmentActivity) context).getSupportFragmentManager(), 0.1f);
-            productImageLoader.setImageFadeIn(false);
+    public ApplozicContextSpinnerAdapter(final Context context, List<Conversation> conversations) {
+        if (context == null) {
+            return;
         }
+        mInflater = LayoutInflater.from(context);
+        this.conversationList = conversations;
+        this.fileClientService = new FileClientService(context);
+        this.context = context;
+        productImageLoader = new ImageLoader(context, ImageUtils.getLargestScreenDimension((Activity) context)) {
+            @Override
+            protected Bitmap processBitmap(Object data) {
+                return fileClientService.loadMessageImage(context, (Conversation) data);
+            }
+        };
+        productImageLoader.addImageCache(((FragmentActivity) context).getSupportFragmentManager(), 0.1f);
+        productImageLoader.setImageFadeIn(false);
+    }
 
 
-        @Override
-        public View getDropDownView(int position, View convertView, ViewGroup parent) {
-            return getCustomView(position, convertView, parent);
-        }
+    @Override
+    public View getDropDownView(int position, View convertView, ViewGroup parent) {
+        return getCustomView(position, convertView, parent);
+    }
 
 
-        public View getCustomView(int position, View convertView, ViewGroup parent) {
-
-            Conversation conversation = (Conversation) getItem(position);
-            ApplozicProductViewHolder viewHolder;
-
-            if (convertView == null) {
-                convertView = mInflater.inflate(R.layout.applozic_context_based_layout, parent, false);
-                viewHolder = new ApplozicProductViewHolder();
-                viewHolder.productImage = (ImageView) convertView.findViewById(R.id.productImage);
-                viewHolder.titleTextView = (TextView) convertView.findViewById(R.id.title);
-                viewHolder.subTitleTextView = (TextView) convertView.findViewById(R.id.subTitle);
-                viewHolder.key1TextView = (TextView) convertView.findViewById(R.id.qtyTitleTextView);
-                viewHolder.value1TextView = (TextView) convertView.findViewById(R.id.qtyValueTextView);
-                viewHolder.key2TextView = (TextView) convertView.findViewById(R.id.priceTitleTextView);
-                viewHolder.value2TextView = (TextView) convertView.findViewById(R.id.priceValueTextview);
-                convertView.setTag(viewHolder);
-            } else {
-                viewHolder = (ApplozicProductViewHolder) convertView
-                        .getTag();
-            }
+    public View getCustomView(int position, View convertView, ViewGroup parent) {
+
+        Conversation conversation = (Conversation) getItem(position);
+        ApplozicProductViewHolder viewHolder;
+
+        if (convertView == null) {
+            convertView = mInflater.inflate(R.layout.applozic_context_based_layout, parent, false);
+            viewHolder = new ApplozicProductViewHolder();
+            viewHolder.productImage = (ImageView) convertView.findViewById(R.id.productImage);
+            viewHolder.titleTextView = (TextView) convertView.findViewById(R.id.title);
+            viewHolder.subTitleTextView = (TextView) convertView.findViewById(R.id.subTitle);
+            viewHolder.key1TextView = (TextView) convertView.findViewById(R.id.qtyTitleTextView);
+            viewHolder.value1TextView = (TextView) convertView.findViewById(R.id.qtyValueTextView);
+            viewHolder.key2TextView = (TextView) convertView.findViewById(R.id.priceTitleTextView);
+            viewHolder.value2TextView = (TextView) convertView.findViewById(R.id.priceValueTextview);
+            convertView.setTag(viewHolder);
+        } else {
+            viewHolder = (ApplozicProductViewHolder) convertView
+                    .getTag();
+        }
 
+        try {
             if (conversation != null) {
                 String topicId = conversation.getTopicId();
                 String topicDetailJson = conversation.getTopicDetail();
                 if (!TextUtils.isEmpty(topicDetailJson)) {
                     TopicDetail topicDetail = (TopicDetail) GsonUtils.getObjectFromJson(topicDetailJson, TopicDetail.class);
                     if (!TextUtils.isEmpty(topicDetail.getLink())) {
-                        productImageLoader.loadImage(topicDetail.getLink(), viewHolder.productImage);
+                        productImageLoader.loadImage(conversation, viewHolder.productImage);
                     }
                     if (!TextUtils.isEmpty(topicDetail.getTitle())) {
                         viewHolder.titleTextView.setText(topicDetail.getTitle());
@@ -116,45 +118,48 @@ public View getCustomView(int position, View convertView, ViewGroup parent) {
                 }
             }
 
-            return convertView;
+        } catch (Exception e) {
 
         }
+        return convertView;
 
+    }
 
-        @Override
-        public int getCount() {
-            if(context == null){
-                return 0;
-            }
-            return conversationList.size();
-        }
-
-        @Override
-        public Object getItem(int position) {
-            if(context == null){
-                return null;
-            }
-            return conversationList.get(position);
-        }
 
-        @Override
-        public long getItemId(int position) {
+    @Override
+    public int getCount() {
+        if (context == null) {
             return 0;
         }
+        return conversationList.size();
+    }
 
-        @Override
-        public View getView(int position, View convertView, ViewGroup parent) {
-            return getCustomView(position, convertView, parent);
+    @Override
+    public Object getItem(int position) {
+        if (context == null) {
+            return null;
         }
+        return conversationList.get(position);
+    }
 
+    @Override
+    public long getItemId(int position) {
+        return 0;
+    }
 
-        private static class ApplozicProductViewHolder {
-            TextView titleTextView, subTitleTextView, key1TextView, value1TextView, key2TextView, value2TextView;
-            ImageView productImage;
+    @Override
+    public View getView(int position, View convertView, ViewGroup parent) {
+        return getCustomView(position, convertView, parent);
+    }
 
-            ApplozicProductViewHolder() {
 
-            }
+    private static class ApplozicProductViewHolder {
+        TextView titleTextView, subTitleTextView, key1TextView, value1TextView, key2TextView, value2TextView;
+        ImageView productImage;
+
+        ApplozicProductViewHolder() {
 
         }
+
     }
+}
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/adapter/DetailedConversationAdapter.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/adapter/DetailedConversationAdapter.java
index 9d50dd02..2ab84163 100755
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/adapter/DetailedConversationAdapter.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/adapter/DetailedConversationAdapter.java
@@ -3,22 +3,29 @@
 import android.app.Activity;
 import android.content.Context;
 import android.content.Intent;
+import android.content.res.Configuration;
 import android.graphics.Bitmap;
+import android.graphics.Color;
 import android.graphics.drawable.Drawable;
 import android.graphics.drawable.GradientDrawable;
 import android.net.Uri;
+import android.os.Build;
 import android.support.v4.app.FragmentActivity;
-import android.support.v4.content.ContextCompat;
+import android.support.v4.content.FileProvider;
+import android.text.Html;
+import android.text.SpannableString;
 import android.text.TextUtils;
+import android.text.style.TextAppearanceSpan;
 import android.util.DisplayMetrics;
-import android.util.Log;
 import android.util.TypedValue;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
 import android.view.WindowManager;
+import android.widget.AlphabetIndexer;
 import android.widget.ArrayAdapter;
 import android.widget.Button;
+import android.widget.Filter;
 import android.widget.ImageView;
 import android.widget.LinearLayout;
 import android.widget.ProgressBar;
@@ -35,19 +42,24 @@
 import com.applozic.mobicomkit.api.conversation.Message;
 import com.applozic.mobicomkit.api.conversation.MobiComConversationService;
 import com.applozic.mobicomkit.api.conversation.database.MessageDatabaseService;
+import com.applozic.mobicomkit.api.notification.VideoCallNotificationHelper;
 import com.applozic.mobicomkit.contact.AppContactService;
 import com.applozic.mobicomkit.contact.BaseContactService;
 import com.applozic.mobicomkit.contact.MobiComVCFParser;
 import com.applozic.mobicomkit.contact.VCFContactData;
-import com.applozic.mobicomkit.uiwidgets.ApplozicSetting;
+import com.applozic.mobicomkit.uiwidgets.AlCustomizationSettings;
 import com.applozic.mobicomkit.uiwidgets.R;
 import com.applozic.mobicomkit.uiwidgets.alphanumbericcolor.AlphaNumberColorUtil;
+import com.applozic.mobicomkit.uiwidgets.attachmentview.ApplozicDocumentView;
 import com.applozic.mobicomkit.uiwidgets.conversation.ConversationUIService;
+import com.applozic.mobicomkit.uiwidgets.conversation.activity.ConversationActivity;
 import com.applozic.mobicomkit.uiwidgets.conversation.activity.FullScreenImageActivity;
 import com.applozic.mobicomkit.uiwidgets.conversation.activity.MobiComKitActivityInterface;
+import com.applozic.mobicomkit.uiwidgets.conversation.activity.OnClickReplyInterface;
 import com.applozic.mobicommons.commons.core.utils.DateUtils;
 import com.applozic.mobicommons.commons.core.utils.LocationUtils;
 import com.applozic.mobicommons.commons.core.utils.Support;
+import com.applozic.mobicommons.commons.core.utils.Utils;
 import com.applozic.mobicommons.commons.image.ImageCache;
 import com.applozic.mobicommons.commons.image.ImageLoader;
 import com.applozic.mobicommons.commons.image.ImageUtils;
@@ -60,9 +72,9 @@
 
 import java.io.File;
 import java.text.SimpleDateFormat;
+import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Date;
-import java.util.HashMap;
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
@@ -79,6 +91,8 @@
     private static final int FILE_THRESOLD_SIZE = 400;
 
     public ImageLoader contactImageLoader, loadImage;
+    public String searchString;
+    AlCustomizationSettings alCustomizationSettings;
     private Context context;
     private Contact contact;
     private Channel channel;
@@ -96,9 +110,13 @@
     private Contact senderContact;
     private long deviceTimeOffset = 0;
     private Class<?> messageIntentClass;
+    private List<Message> messageList;
+    private List<Message> originalList;
     private MobiComConversationService conversationService;
     private ImageCache imageCache;
-    ApplozicSetting applozicSetting;
+    private AlphabetIndexer mAlphabetIndexer; // Stores the AlphabetIndexer instance
+    private TextAppearanceSpan highlightTextSpan;
+
 
     public DetailedConversationAdapter(final Context context, int textViewResourceId, List<Message> messageList, Channel channel, Class messageIntentClass, EmojiconHandler emojiconHandler) {
         this(context, textViewResourceId, messageList, null, channel, messageIntentClass, emojiconHandler);
@@ -122,7 +140,7 @@ public DetailedConversationAdapter(final Context context, int textViewResourceId
         this.contactService = new AppContactService(context);
         this.imageCache = ImageCache.getInstance(((FragmentActivity) context).getSupportFragmentManager(), 0.1f);
         this.senderContact = contactService.getContactById(MobiComUserPreference.getInstance(context).getUserId());
-        applozicSetting = ApplozicSetting.getInstance(context);
+        this.messageList = messageList;
         contactImageLoader = new ImageLoader(getContext(), ImageUtils.getLargestScreenDimension((Activity) getContext())) {
             @Override
             protected Bitmap processBitmap(Object data) {
@@ -144,7 +162,7 @@ protected Bitmap processBitmap(Object data) {
         imageThumbnailLoader = new ImageLoader(getContext(), ImageUtils.getLargestScreenDimension((Activity) getContext())) {
             @Override
             protected Bitmap processBitmap(Object data) {
-                return fileClientService.loadThumbnailImage(getContext(), (FileMeta) data, getImageLayoutParam(false).width, getImageLayoutParam(false).height);
+                return fileClientService.loadThumbnailImage(getContext(), (Message) data, getImageLayoutParam(false).width, getImageLayoutParam(false).height);
             }
         };
         imageThumbnailLoader.setImageFadeIn(false);
@@ -154,6 +172,13 @@ protected Bitmap processBitmap(Object data) {
         deliveredIcon = getContext().getResources().getDrawable(R.drawable.applozic_ic_action_message_delivered);
         pendingIcon = getContext().getResources().getDrawable(R.drawable.applozic_ic_action_message_pending);
         scheduledIcon = getContext().getResources().getDrawable(R.drawable.applozic_ic_action_message_schedule);
+        final String alphabet = context.getString(R.string.alphabet);
+        mAlphabetIndexer = new AlphabetIndexer(null, 1, alphabet);
+        highlightTextSpan = new TextAppearanceSpan(context, R.style.searchTextHiglight);
+    }
+
+    public void setAlCustomizationSettings(AlCustomizationSettings alCustomizationSettings) {
+        this.alCustomizationSettings = alCustomizationSettings;
     }
 
     public View getView(int position, View convertView, ViewGroup parent) {
@@ -169,9 +194,12 @@ public View getView(int position, View convertView, ViewGroup parent) {
             TextView dateView = (TextView) customView.findViewById(R.id.chat_screen_date);
             TextView dayTextView = (TextView) customView.findViewById(R.id.chat_screen_day);
             Date date = new Date(message.getCreatedAtTime());
+            dateView.setTextColor(Color.parseColor(alCustomizationSettings.getConversationDateTextColor().trim()));
+            dayTextView.setTextColor(Color.parseColor(alCustomizationSettings.getConversationDayTextColor().trim()));
+
             if (DateUtils.isSameDay(message.getCreatedAtTime())) {
                 dayTextView.setVisibility(View.VISIBLE);
-                dayTextView.setText("Today");
+                dayTextView.setText(R.string.today);
             } else {
                 dayTextView.setVisibility(View.VISIBLE);
                 dateView.setVisibility(View.VISIBLE);
@@ -187,9 +215,18 @@ public View getView(int position, View convertView, ViewGroup parent) {
             return customView;
         } else if (type == 4) {
             customView = inflater.inflate(R.layout.applozic_channel_custom_message_layout, parent, false);
-            TextView channelMessageTextview = (TextView) customView.findViewById(R.id.channel_message);
-            channelMessageTextview.setText(message.getMessage());
+            TextView channelMessageTextView = (TextView) customView.findViewById(R.id.channel_message);
+            GradientDrawable bgGradientDrawable = (GradientDrawable) channelMessageTextView.getBackground();
+            bgGradientDrawable.setColor(Color.parseColor(alCustomizationSettings.getChannelCustomMessageBgColor()));
+            bgGradientDrawable.setStroke(3, Color.parseColor(alCustomizationSettings.getChannelCustomMessageBorderColor()));
+            channelMessageTextView.setTextColor(Color.parseColor(alCustomizationSettings.getChannelCustomMessageTextColor()));
+            channelMessageTextView.setText(message.getMessage());
+            return customView;
+        } else if (type == 5) {
+            customView = inflater.inflate(R.layout.applozic_call_layout, parent, false);
+            populateVideoCall(customView, message);
             return customView;
+
         } else if (type == 0) {
             customView = inflater.inflate(R.layout.mobicom_received_message_list_view, parent, false);
         } else {
@@ -220,16 +257,19 @@ public View getView(int position, View convertView, ViewGroup parent) {
                 }
             }
 
+            Configuration config = context.getResources().getConfiguration();
             View messageTextLayout = customView.findViewById(R.id.messageTextLayout);
             //TextView smReceivers = (TextView) customView.findViewById(R.id.smReceivers);
             //TextView status = (TextView) customView.findViewById(R.id.status);
             TextView createdAtTime = (TextView) customView.findViewById(R.id.createdAtTime);
             TextView messageTextView = (TextView) customView.findViewById(R.id.message);
+            TextView onlineTextView = (TextView) customView.findViewById(R.id.onlineTextView);
             CircleImageView contactImage = (CircleImageView) customView.findViewById(R.id.contactImage);
             //ImageView contactImage = (ImageView) customView.findViewById(R.id.contactImage);
             TextView alphabeticTextView = (TextView) customView.findViewById(R.id.alphabeticImage);
             ImageView sentOrReceived = (ImageView) customView.findViewById(R.id.sentOrReceivedIcon);
             ImageView mapImageView = (ImageView) customView.findViewById(R.id.static_mapview);
+            LinearLayout nameTextLayout = (LinearLayout) customView.findViewById(R.id.nameTextLayout);
             RelativeLayout chatLocation = (RelativeLayout) customView.findViewById(R.id.chat_location);
             TextView deliveryStatus = (TextView) customView.findViewById(R.id.status);
             TextView selfDestruct = (TextView) customView.findViewById(R.id.selfDestruct);
@@ -242,29 +282,142 @@ public View getView(int position, View convertView, ViewGroup parent) {
             final LinearLayout attachmentRetry = (LinearLayout) customView.findViewById(R.id.attachment_retry_layout);
             final RelativeLayout attachmentDownloadProgressLayout = (RelativeLayout) customView.findViewById(R.id.attachment_download_progress_layout);
             final RelativeLayout mainAttachmentLayout = (RelativeLayout) customView.findViewById(R.id.attachment_preview_layout);
-            final LinearLayout mainContactShareLayout = (LinearLayout) customView.findViewById(R.id.contact_share_layout);
+            LinearLayout mainContactShareLayout = (LinearLayout) customView.findViewById(R.id.contact_share_layout);
             final ImageView videoIcon = (ImageView) customView.findViewById(R.id.video_icon);
 
             final ProgressBar mediaDownloadProgressBar = (ProgressBar) customView.findViewById(R.id.media_download_progress_bar);
             final ProgressBar mediaUploadProgressBar = (ProgressBar) customView.findViewById(R.id.media_upload_progress_bar);
             TextView nameTextView = (TextView) customView.findViewById(R.id.name_textView);
+            RelativeLayout replyRelativeLayout = (RelativeLayout) customView.findViewById(R.id.reply_message_layout);
+            RelativeLayout imageViewRLayout = (RelativeLayout) customView.findViewById(R.id.imageViewRLayout);
+            TextView replyMessageTextView = (TextView) customView.findViewById(R.id.messageTextView);
+            ImageView imageViewPhoto = (ImageView) customView.findViewById(R.id.imageViewForPhoto);
+            TextView replyNameTextView = (TextView) customView.findViewById(R.id.replyNameTextView);
+            ImageView imageViewForAttachmentType = (ImageView) customView.findViewById(R.id.imageViewForAttachmentType);
+            createdAtTime.setTextColor(Color.parseColor(alCustomizationSettings.getMessageTimeTextColor()));
+
+            if (message.getMetadata() != null && !message.getMetadata().isEmpty() && message.getMetadata().containsKey(Message.MetaDataType.AL_REPLY.getValue())) {
+                final Message msg = messageDatabaseService.getMessage(message.getMetaDataValueForKey(Message.MetaDataType.AL_REPLY.getValue()));
+                if (msg != null) {
+                    String displayName;
+
+                    replyRelativeLayout.setBackgroundColor(message.isTypeOutbox() ?
+                            Color.parseColor(alCustomizationSettings.getReplyMessageLayoutSentMessageBackground()) : Color.parseColor(alCustomizationSettings.getReplyMessageLayoutReceivedMessageBackground()));
+
+                    replyNameTextView.setTextColor(message.isTypeOutbox() ?
+                            Color.parseColor(alCustomizationSettings.getSentMessageTextColor()) : Color.parseColor(alCustomizationSettings.getReceivedMessageTextColor()));
+
+                    replyMessageTextView.setTextColor(message.isTypeOutbox() ?
+                            Color.parseColor(alCustomizationSettings.getSentMessageTextColor()) : Color.parseColor(alCustomizationSettings.getReceivedMessageTextColor()));
+
+                    if (msg.getGroupId() != null) {
+                        if (MobiComUserPreference.getInstance(context).getUserId().equals(msg.getContactIds()) || TextUtils.isEmpty(msg.getContactIds())) {
+                            displayName = context.getString(R.string.you_string);
+                        } else {
+                            displayName = contactService.getContactById(msg.getContactIds()).getDisplayName();
+                        }
+                    } else {
+                        if (msg.isTypeOutbox()) {
+                            displayName = context.getString(R.string.you_string);
+                        } else {
+                            displayName = contactService.getContactById(msg.getContactIds()).getDisplayName();
+                        }
+                    }
 
-
-            final String messageTapActivityClassName = ApplozicSetting.getInstance(context).getActivityCallback(ApplozicSetting.RequestCode.MESSAGE_TAP);
-
-            if (!TextUtils.isEmpty(messageTapActivityClassName) && message.getMetadata() != null && !message.getMetadata().isEmpty()) {
-                customView.setOnClickListener(new View.OnClickListener() {
-                    @Override
-                    public void onClick(View v) {
-                        try {
-                            Intent intent = new Intent(context, Class.forName(messageTapActivityClassName));
-                            intent.putExtra(MobiComKitConstants.MESSAGE_JSON_INTENT, GsonUtils.getJsonFromObject(message, Message.class));
-                            context.startActivity(intent);
-                        } catch (ClassNotFoundException e) {
-                            e.printStackTrace();
+                    replyNameTextView.setText(displayName);
+                    if (msg.hasAttachment()) {
+                        FileMeta fileMeta = msg.getFileMetas();
+                        imageViewForAttachmentType.setVisibility(View.VISIBLE);
+                        if (fileMeta.getContentType().contains("image")) {
+                            imageViewForAttachmentType.setImageResource(R.drawable.applozic_ic_image_camera_alt);
+                            if (TextUtils.isEmpty(msg.getMessage())) {
+                                replyMessageTextView.setText(context.getString(R.string.photo_string));
+                            } else {
+                                replyMessageTextView.setText(msg.getMessage());
+                            }
+                            imageViewPhoto.setVisibility(View.VISIBLE);
+                            imageViewRLayout.setVisibility(View.VISIBLE);
+                            imageThumbnailLoader.loadImage(msg, imageViewPhoto);
+                        } else if (fileMeta.getContentType().contains("video")) {
+                            imageViewForAttachmentType.setImageResource(R.drawable.applozic_ic_action_video);
+                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
+                                if (config.getLayoutDirection() == View.LAYOUT_DIRECTION_RTL) {
+                                    imageViewForAttachmentType.setScaleX(-1);
+                                }
+                            }
+                            if (TextUtils.isEmpty(msg.getMessage())) {
+                                replyMessageTextView.setText(context.getString(R.string.video_string));
+                            } else {
+                                replyMessageTextView.setText(msg.getMessage());
+                            }
+                            imageViewPhoto.setVisibility(View.VISIBLE);
+                            imageViewRLayout.setVisibility(View.VISIBLE);
+                            if (msg.getFilePaths() != null && msg.getFilePaths().size() > 0) {
+                                if (imageCache.getBitmapFromMemCache(msg.getKeyString()) != null) {
+                                    imageViewPhoto.setImageBitmap(imageCache.getBitmapFromMemCache(msg.getKeyString()));
+                                } else {
+                                    imageCache.addBitmapToCache(message.getKeyString(), fileClientService.createAndSaveVideoThumbnail(msg.getFilePaths().get(0)));
+                                    imageViewPhoto.setImageBitmap(fileClientService.createAndSaveVideoThumbnail(msg.getFilePaths().get(0)));
+                                }
+                            }
+                        } else if (fileMeta.getContentType().contains("audio")) {
+                            imageViewForAttachmentType.setImageResource(R.drawable.applozic_ic_music_note);
+                            if (TextUtils.isEmpty(msg.getMessage())) {
+                                replyMessageTextView.setText(context.getString(R.string.audio_string));
+                            } else {
+                                replyMessageTextView.setText(msg.getMessage());
+                            }
+                            imageViewPhoto.setVisibility(View.GONE);
+                            imageViewRLayout.setVisibility(View.GONE);
+                        } else if (msg.isContactMessage()) {
+                            MobiComVCFParser parser = new MobiComVCFParser();
+                            try {
+                                VCFContactData data = parser.parseCVFContactData(msg.getFilePaths().get(0));
+                                if (data != null) {
+                                    imageViewForAttachmentType.setImageResource(R.drawable.applozic_ic_person_white);
+                                    replyMessageTextView.setText(context.getString(R.string.contact_string));
+                                    replyMessageTextView.append(" " + data.getName());
+                                }
+                            } catch (Exception e) {
+                                imageViewForAttachmentType.setImageResource(R.drawable.applozic_ic_person_white);
+                                replyMessageTextView.setText(context.getString(R.string.contact_string));
+                            }
+                            imageViewPhoto.setVisibility(View.GONE);
+                            imageViewRLayout.setVisibility(View.GONE);
+                        } else {
+                            imageViewForAttachmentType.setImageResource(R.drawable.applozic_ic_action_attachment);
+                            if (TextUtils.isEmpty(msg.getMessage())) {
+                                replyMessageTextView.setText(context.getString(R.string.attachment_string));
+                            } else {
+                                replyMessageTextView.setText(msg.getMessage());
+                            }
+                            imageViewPhoto.setVisibility(View.GONE);
+                            imageViewRLayout.setVisibility(View.GONE);
                         }
+                        imageViewForAttachmentType.setColorFilter(Color.parseColor(message.isTypeOutbox() ? alCustomizationSettings.getSentMessageTextColor() : alCustomizationSettings.getReceivedMessageTextColor()));
+                    } else if (msg.getContentType() == Message.ContentType.LOCATION.getValue()) {
+                        imageViewForAttachmentType.setVisibility(View.VISIBLE);
+                        imageViewPhoto.setVisibility(View.VISIBLE);
+                        imageViewRLayout.setVisibility(View.VISIBLE);
+                        replyMessageTextView.setText(context.getString(R.string.al_location_string));
+                        imageViewForAttachmentType.setColorFilter(Color.parseColor(message.isTypeOutbox() ? alCustomizationSettings.getSentMessageTextColor() : alCustomizationSettings.getReceivedMessageTextColor()));
+                        imageViewForAttachmentType.setImageResource(R.drawable.applozic_ic_location_on_white_24dp);
+                        loadImage.setLoadingImage(R.drawable.applozic_map_offline_thumbnail);
+                        loadImage.loadImage(LocationUtils.loadStaticMap(msg.getMessage()), imageViewPhoto);
+                    } else {
+                        imageViewForAttachmentType.setVisibility(View.GONE);
+                        imageViewRLayout.setVisibility(View.GONE);
+                        imageViewPhoto.setVisibility(View.GONE);
+                        replyMessageTextView.setText(msg.getMessage());
                     }
-                });
+                    replyRelativeLayout.setVisibility(View.VISIBLE);
+                    replyRelativeLayout.setOnClickListener(new View.OnClickListener() {
+                        @Override
+                        public void onClick(View v) {
+                            ((OnClickReplyInterface) context).onClickOnMessageReply(msg);
+                        }
+                    });
+                }
             }
 
 
@@ -281,7 +434,20 @@ public void onClick(View v) {
             }
 
             if (channel != null && nameTextView != null && contactDisplayName != null) {
-                nameTextView.setVisibility(View.VISIBLE);
+                nameTextView.setVisibility(Channel.GroupType.GROUPOFTWO.getValue().equals(channel.getType()) ? View.GONE : View.VISIBLE);
+                if (alCustomizationSettings.isLaunchChatFromProfilePicOrName()) {
+                    nameTextView.setOnClickListener(new View.OnClickListener() {
+                        @Override
+                        public void onClick(View view) {
+                            Intent intent = new Intent(context, ConversationActivity.class);
+                            intent.putExtra(ConversationUIService.USER_ID, message.getContactIds());
+                            if (message.getConversationId() != null) {
+                                intent.putExtra(ConversationUIService.CONVERSATION_ID, message.getConversationId());
+                            }
+                            context.startActivity(intent);
+                        }
+                    });
+                }
                 String userId = contactDisplayName.getDisplayName();
                 char firstLetter = contactDisplayName.getDisplayName().charAt(0);
                 if (userId.length() > 0) {
@@ -329,6 +495,10 @@ public void onClick(View v) {
                 }
             }
 
+            if (nameTextLayout != null && contact != null) {
+                nameTextLayout.setVisibility(View.GONE);
+            }
+
             if (message.isCall() || message.isDummyEmptyMessage()) {
                 createdAtTime.setCompoundDrawablesWithIntrinsicBounds(null, null, null, null);
             } else if (!message.isSentToServer() && message.isTypeOutbox()) {
@@ -352,11 +522,41 @@ public void onClick(View v) {
                 deliveryStatus.setText("via Carrier");
             }*/
 
+            if (contactDisplayName != null && contactImage != null && alCustomizationSettings.isLaunchChatFromProfilePicOrName()) {
+                contactImage.setOnClickListener(new View.OnClickListener() {
+                    @Override
+                    public void onClick(View view) {
+                        Intent intent = new Intent(context, ConversationActivity.class);
+                        intent.putExtra(ConversationUIService.USER_ID, message.getContactIds());
+                        if (message.getConversationId() != null) {
+                            intent.putExtra(ConversationUIService.CONVERSATION_ID, message.getConversationId());
+                        }
+                        context.startActivity(intent);
+                    }
+                });
+
+                alphabeticTextView.setOnClickListener(new View.OnClickListener() {
+                    @Override
+                    public void onClick(View view) {
+                        Intent intent = new Intent(context, ConversationActivity.class);
+                        intent.putExtra(ConversationUIService.USER_ID, message.getContactIds());
+                        if (message.getConversationId() != null) {
+                            intent.putExtra(ConversationUIService.CONVERSATION_ID, message.getConversationId());
+                        }
+                        context.startActivity(intent);
+                    }
+                });
+
+            }
             if (message.isTypeOutbox()) {
-                loadContactImage(senderContact, contactDisplayName, message, contactImage, alphabeticTextView);
+                loadContactImage(senderContact, contactDisplayName, message, contactImage, alphabeticTextView, onlineTextView);
             } else {
-                loadContactImage(receiverContact, contactDisplayName, message, contactImage, alphabeticTextView);
+                loadContactImage(receiverContact, contactDisplayName, message, contactImage, alphabeticTextView, onlineTextView);
             }
+
+            ApplozicDocumentView audioView =  new ApplozicDocumentView(this.context);
+            audioView.inflateViewWithMessage(customView,message);
+            audioView.hideView(true);
             if (message.hasAttachment() && attachedFile != null & !(message.getContentType() == Message.ContentType.TEXT_URL.getValue())) {
                 mainAttachmentLayout.setLayoutParams(getImageLayoutParam(false));
                 if (message.getFileMetas() != null && (message.getFileMetas().getContentType().contains("image") || message.getFileMetas().getContentType().contains("video"))) {
@@ -433,6 +633,15 @@ public void onClick(View v) {
                     //  }
 
                 }
+                if (isNormalAttachment(message)) {
+                    attachedFile.setVisibility(View.GONE);
+                    mainAttachmentLayout.setVisibility(View.GONE);
+                    mainContactShareLayout.setVisibility(View.GONE);
+                    chatLocation.setVisibility(View.GONE);
+                    audioView.hideView(false);
+                    createdAtTime.setText(DateUtils.getFormattedDate(message.getCreatedAtTime()));
+                    return customView;
+                }
             }
             if (message.isCanceled()) {
                 attachmentRetry.setVisibility(View.VISIBLE);
@@ -440,13 +649,25 @@ public void onClick(View v) {
             attachmentRetry.setOnClickListener(new View.OnClickListener() {
                 @Override
                 public void onClick(View view) {
-                    Toast.makeText(context, "Resending attachment....", Toast.LENGTH_LONG).show();
-                    mediaUploadProgressBar.setVisibility(View.VISIBLE);
-                    attachmentRetry.setVisibility(View.GONE);
-                    //updating Cancel Flag to smListItem....
-                    message.setCanceled(false);
-                    messageDatabaseService.updateCanceledFlag(message.getMessageId(), 0);
-                    conversationService.sendMessage(message, messageIntentClass);
+                    if (Utils.isInternetAvailable(context)) {
+                        File file = null;
+                        if (message != null && message.getFilePaths() != null) {
+                            file = new File(message.getFilePaths().get(0));
+                        }
+                        if (file != null && !file.exists()) {
+                            Toast.makeText(context, context.getString(R.string.file_does_not_exist), Toast.LENGTH_SHORT).show();
+                            return;
+                        }
+                        Toast.makeText(context, context.getString(R.string.applozic_resending_attachment), Toast.LENGTH_SHORT).show();
+                        mediaUploadProgressBar.setVisibility(View.VISIBLE);
+                        attachmentRetry.setVisibility(View.GONE);
+                        //updating Cancel Flag to smListItem....
+                        message.setCanceled(false);
+                        messageDatabaseService.updateCanceledFlag(message.getMessageId(), 0);
+                        conversationService.sendMessage(message, messageIntentClass);
+                    } else {
+                        Toast.makeText(context, context.getString(R.string.internet_connection_not_available), Toast.LENGTH_SHORT).show();
+                    }
                 }
             });
             attachmentDownloadProgressLayout.setOnClickListener(new View.OnClickListener() {
@@ -471,7 +692,8 @@ public void onClick(View v) {
                     }
                     if (message.isAttachmentDownloaded()) {
                         showFullView(message);
-                    } else {
+                        return;
+                    } if ((message.isTypeOutbox() && message.isSentToServer()) || (!message.isTypeOutbox())) {
                         attachmentDownloadLayout.setVisibility(View.GONE);
                         attachmentView.setProressBar(mediaDownloadProgressBar);
                         attachmentView.setDownloadProgressLayout(attachmentDownloadProgressLayout);
@@ -517,10 +739,10 @@ public boolean onLongClick(View v) {
             }
             String mimeType = "";
             if (messageTextView != null) {
-                messageTextView.setTextColor(ContextCompat.getColor(context, message.isTypeOutbox() ?
-                        applozicSetting.getSentMessageTextColor() : applozicSetting.getReceivedMessageTextColor()));
-                messageTextView.setLinkTextColor(ContextCompat.getColor(context, message.isTypeOutbox() ?
-                        applozicSetting.getSentMessageLinkTextColor() : applozicSetting.getReceivedMessageLinkTextColor()));
+                messageTextView.setTextColor(message.isTypeOutbox() ?
+                        Color.parseColor(alCustomizationSettings.getSentMessageTextColor()) : Color.parseColor(alCustomizationSettings.getReceivedMessageTextColor()));
+                messageTextView.setLinkTextColor(message.isTypeOutbox() ?
+                        Color.parseColor(alCustomizationSettings.getSentMessageLinkTextColor()) : Color.parseColor(alCustomizationSettings.getReceivedMessageLinkTextColor()));
 
                 if (message.getContentType() == Message.ContentType.TEXT_URL.getValue()) {
                     try {
@@ -562,6 +784,8 @@ public void onClick(View v) {
                 } else if ((message.getContentType() == Message.ContentType.VIDEO_MSG.getValue()) && !message.isAttachmentDownloaded()) {
                     preview.setVisibility(View.VISIBLE);
                     preview.setImageResource(R.drawable.applozic_video_default_thumbnail);
+                } else if (message.getContentType() == Message.ContentType.TEXT_HTML.getValue()) {
+                    messageTextView.setText(Html.fromHtml(message.getMessage()));
                 } else {
                     messageTextView.setText(EmoticonUtils.getSmiledText(context, message.getMessage(), emojiconHandler));
                     if (mimeType != null && attachmentIcon != null) {
@@ -574,13 +798,11 @@ public void onClick(View v) {
                 }
 
                 if (messageTextLayout != null) {
-                    int resId = message.isTypeOutbox() ?
-                            applozicSetting.getSentMessageBackgroundColor() : applozicSetting.getReceivedMessageBackgroundColor();
-                    int borderResId = message.isTypeOutbox() ?
-                            applozicSetting.getSentMessageBorderColor() : applozicSetting.getReceivedMessageBorderColor();
                     GradientDrawable bgShape = (GradientDrawable) messageTextLayout.getBackground();
-                    bgShape.setColor(ContextCompat.getColor(context, resId));
-                    bgShape.setStroke(3, ContextCompat.getColor(context, borderResId));
+                    bgShape.setColor(message.isTypeOutbox() ?
+                            Color.parseColor(alCustomizationSettings.getSentMessageBackgroundColor()) : Color.parseColor(alCustomizationSettings.getReceivedMessageBackgroundColor()));
+                    bgShape.setStroke(3, message.isTypeOutbox() ?
+                            Color.parseColor(alCustomizationSettings.getSentMessageBorderColor()) : Color.parseColor(alCustomizationSettings.getReceivedMessageBackgroundColor()));
                 }
                /* if (messageTextLayout != null) {
                     //messageTextLayout.setBackgroundResource(messageTypeColorMap.get(message.getType()));
@@ -613,6 +835,18 @@ public void onClick(View v) {
                 mainContactShareLayout.setVisibility(View.GONE);
 
             }
+
+            int startIndex = indexOfSearchQuery(message.getMessage());
+            if (startIndex != -1) {
+                final SpannableString highlightedName = new SpannableString(message.getMessage());
+
+                // Sets the span to start at the starting point of the match and end at "length"
+                // characters beyond the starting point
+                highlightedName.setSpan(highlightTextSpan, startIndex,
+                        startIndex + searchString.toString().length(), 0);
+
+                messageTextView.setText(highlightedName);
+            }
         }
         return customView;
     }
@@ -632,11 +866,11 @@ private void setupContactShareView(final Message message, LinearLayout mainConta
             Button addContactButton = (Button) mainContactShareLayout.findViewById(R.id.contact_share_add_btn);
             shareContactName.setText(data.getName());
 
-            int resId = message.isTypeOutbox() ? applozicSetting.getSentContactMessageTextColor() : applozicSetting.getReceivedContactMessageTextColor();
-            shareContactName.setTextColor(ContextCompat.getColor(context, resId));
-            shareContactNo.setTextColor(ContextCompat.getColor(context, resId));
-            shareEmailContact.setTextColor(ContextCompat.getColor(context, resId));
-            addContactButton.setTextColor(ContextCompat.getColor(context, resId));
+            int resId = message.isTypeOutbox() ? Color.parseColor(alCustomizationSettings.getSentMessageTextColor()) : Color.parseColor(alCustomizationSettings.getReceivedMessageTextColor());
+            shareContactName.setTextColor(resId);
+            shareContactNo.setTextColor(resId);
+            shareEmailContact.setTextColor(resId);
+            addContactButton.setTextColor(resId);
 
             if (data.getProfilePic() != null) {
                 if (imageCache.getBitmapFromMemCache(message.getKeyString()) == null) {
@@ -656,13 +890,21 @@ private void setupContactShareView(final Message message, LinearLayout mainConta
                 shareEmailContact.setVisibility(View.GONE);
             }
 
+
             addContactButton.setOnClickListener(new View.OnClickListener() {
                 @Override
                 public void onClick(View v) {
                     Intent intent = new Intent();
                     intent.setAction(Intent.ACTION_VIEW);
-                    intent.setDataAndType(Uri.fromFile(new File(message.getFilePaths().get(0))), "text/x-vcard");
+                    Uri outputUri = null;
+                    intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
+                    if (Utils.hasNougat()) {
+                        outputUri = FileProvider.getUriForFile(context, Utils.getMetaDataValue(context, MobiComKitConstants.PACKAGE_NAME) + ".provider", new File(message.getFilePaths().get(0)));
+                    } else {
+                        outputUri = Uri.fromFile(new File(message.getFilePaths().get(0)));
+                    }
                     if (intent.resolveActivity(context.getPackageManager()) != null) {
+                        intent.setDataAndType(outputUri, "text/x-vcard");
                         context.startActivity(intent);
                     } else {
                         Toast.makeText(context, R.string.info_app_not_found_to_open_file, Toast.LENGTH_LONG).show();
@@ -671,14 +913,12 @@ public void onClick(View v) {
             });
 
         } catch (Exception e) {
-            Log.e("DetailedConvAdapter", "Exception in parsing", e);
+            Utils.printLog(context,"DetailedConvAdapter", "Exception in parsing");
         }
+
     }
 
-    private void loadContactImage(Contact contact, Contact contactDisplayName, Message messageObj, ImageView contactImage, TextView alphabeticTextView) {
-        if (!applozicSetting.isConversationContactImageVisible()) {
-            return;
-        }
+    private void loadContactImage(Contact contact, Contact contactDisplayName, Message messageObj, ImageView contactImage, TextView alphabeticTextView, TextView onlineTextView) {
 
         if (alphabeticTextView != null) {
             String contactNumber = "";
@@ -724,6 +964,13 @@ private void loadContactImage(Contact contact, Contact contactDisplayName, Messa
             contactImage.setVisibility(View.VISIBLE);
             alphabeticTextView.setVisibility(View.GONE);
         } else if (contactDisplayName != null && contactImage != null) {
+            if (alCustomizationSettings.isGroupUsersOnlineStatus() && onlineTextView != null) {
+                if (contactDisplayName.isConnected()) {
+                    onlineTextView.setVisibility(View.VISIBLE);
+                } else {
+                    onlineTextView.setVisibility(View.GONE);
+                }
+            }
             if (TextUtils.isEmpty(contactDisplayName.getImageURL())) {
                 contactImage.setVisibility(View.GONE);
                 alphabeticTextView.setVisibility(View.VISIBLE);
@@ -742,62 +989,84 @@ private void showAttachmentIconAndText(TextView attachedFile, final Message mess
         } else if (message.getFileMetas() != null) {
             fileName = message.getFileMetas().getName();
         }
-        attachedFile.setTextColor(ContextCompat.getColor(context, message.isTypeOutbox() ?
-                applozicSetting.getSentMessageTextColor() : applozicSetting.getReceivedMessageTextColor()));
+        attachedFile.setTextColor(message.isTypeOutbox() ?
+                Color.parseColor(alCustomizationSettings.getSentMessageTextColor()) : Color.parseColor(alCustomizationSettings.getReceivedMessageTextColor()));
         attachedFile.setText(fileName);
         attachedFile.setVisibility(View.VISIBLE);
         attachedFile.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
-                if (message.isAttachmentDownloaded()) {
-                    Intent intent = new Intent();
-                    intent.setAction(Intent.ACTION_VIEW);
-                    intent.setDataAndType(Uri.fromFile(new File(message.getFilePaths().get(0))), mimeType);
-                    if (intent.resolveActivity(context.getPackageManager()) != null) {
-                        context.startActivity(intent);
-                    } else {
-                        Toast.makeText(context, R.string.info_app_not_found_to_open_file, Toast.LENGTH_LONG).show();
+                try {
+                    if (message.isAttachmentDownloaded()) {
+                        Intent intent = new Intent();
+                        intent.setAction(Intent.ACTION_VIEW);
+                        Uri outputUri;
+                        if (Utils.hasNougat()) {
+                            outputUri = FileProvider.getUriForFile(context, Utils.getMetaDataValue(context, MobiComKitConstants.PACKAGE_NAME) + ".provider", new File(message.getFilePaths().get(0)));
+                        } else {
+                            outputUri = Uri.fromFile(new File(message.getFilePaths().get(0)));
+                        }
+                        intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
+                        if (intent.resolveActivity(context.getPackageManager()) != null) {
+                            intent.setDataAndType(outputUri, mimeType);
+                            context.startActivity(intent);
+                        } else {
+                            Toast.makeText(context, R.string.info_app_not_found_to_open_file, Toast.LENGTH_LONG).show();
+                        }
                     }
+                } catch (Exception e) {
+                    Utils.printLog(context,TAG, "No application found to open this file");
                 }
             }
 
         });
     }
 
-    private void showPreview(Message smListItem, ImageView preview, LinearLayout attachmentDownloadLayout) {
-        FileMeta fileMeta = smListItem.getFileMetas();
+    private void showPreview(Message message, ImageView preview, LinearLayout attachmentDownloadLayout) {
         imageThumbnailLoader.setImageFadeIn(false);
         imageThumbnailLoader.setLoadingImage(R.id.media_upload_progress_bar);
-        imageThumbnailLoader.loadImage(fileMeta, preview);
+        imageThumbnailLoader.loadImage(message, preview);
         attachmentDownloadLayout.setVisibility(View.GONE);
     }
 
     private void showFullView(Message smListItem) {
-        final String mimeType = FileUtils.getMimeType(smListItem.getFilePaths().get(0));
-        if(mimeType != null){
-            if (mimeType.startsWith("image")) {
-                Intent intent = new Intent(context, FullScreenImageActivity.class);
-                intent.putExtra(MobiComKitConstants.MESSAGE_JSON_INTENT, GsonUtils.getJsonFromObject(smListItem, Message.class));
-                ((MobiComKitActivityInterface) context).startActivityForResult(intent, MobiComKitActivityInterface.REQUEST_CODE_FULL_SCREEN_ACTION);
-            }
-            if (mimeType.startsWith("video")) {
-                if (smListItem.isAttachmentDownloaded()) {
-                    Intent intentVideo = new Intent();
-                    intentVideo.setAction(Intent.ACTION_VIEW);
-                    intentVideo.setDataAndType(Uri.fromFile(new File(smListItem.getFilePaths().get(0))), "video/*");
-                    if (intentVideo.resolveActivity(context.getPackageManager()) != null) {
-                        context.startActivity(intentVideo);
-                    } else {
-                        Toast.makeText(context, R.string.info_app_not_found_to_open_file, Toast.LENGTH_LONG).show();
+        try {
+            final String mimeType = FileUtils.getMimeType(smListItem.getFilePaths().get(0));
+            if (mimeType != null) {
+                if (mimeType.startsWith("image")) {
+                    Intent intent = new Intent(context, FullScreenImageActivity.class);
+                    intent.putExtra(MobiComKitConstants.MESSAGE_JSON_INTENT, GsonUtils.getJsonFromObject(smListItem, Message.class));
+                    ((MobiComKitActivityInterface) context).startActivityForResult(intent, MobiComKitActivityInterface.REQUEST_CODE_FULL_SCREEN_ACTION);
+                }
+                if (mimeType.startsWith("video")) {
+                    if (smListItem.isAttachmentDownloaded()) {
+                        Intent intentVideo = new Intent();
+                        intentVideo.setAction(Intent.ACTION_VIEW);
+                        Uri outputUri;
+                        if (Utils.hasNougat()) {
+                            outputUri = FileProvider.getUriForFile(context, Utils.getMetaDataValue(context, MobiComKitConstants.PACKAGE_NAME) + ".provider", new File(smListItem.getFilePaths().get(0)));
+                        } else {
+                            outputUri = Uri.fromFile(new File(smListItem.getFilePaths().get(0)));
+                        }
+                        intentVideo.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
+                        if (intentVideo.resolveActivity(context.getPackageManager()) != null) {
+                            intentVideo.setDataAndType(outputUri, "video/*");
+                            context.startActivity(intentVideo);
+                        } else {
+                            Toast.makeText(context, R.string.info_app_not_found_to_open_file, Toast.LENGTH_LONG).show();
+                        }
                     }
                 }
             }
+        } catch (Exception e) {
+            Utils.printLog(context,TAG, "No application found to open this file");
         }
+
     }
 
     @Override
     public int getViewTypeCount() {
-        return 5;
+        return 6;
     }
 
     @Override
@@ -815,6 +1084,9 @@ public int getItemViewType(int position) {
         if (message.isChannelCustomMessage()) {
             return 4;
         }
+        if (message.isVideoCallMessage()) {
+            return 5;
+        }
         return message.isTypeOutbox() ? 1 : 0;
     }
 
@@ -835,4 +1107,110 @@ public int getItemViewType(int position) {
         }
         return params;
     }
+
+    @Override
+    public Filter getFilter() {
+        return new Filter() {
+            @Override
+            protected FilterResults performFiltering(CharSequence constraint) {
+
+                final FilterResults oReturn = new FilterResults();
+                final List<Message> results = new ArrayList<Message>();
+                if (originalList == null)
+                    originalList = messageList;
+                if (constraint != null) {
+                    searchString = constraint.toString();
+                    if (originalList != null && originalList.size() > 0) {
+                        for (final Message message : originalList) {
+                            if (message.getMessage().toLowerCase()
+                                    .contains(constraint.toString())) {
+                                results.add(message);
+
+
+                            }
+                        }
+                    }
+                    oReturn.values = results;
+                } else {
+                    oReturn.values = originalList;
+                }
+                return oReturn;
+            }
+
+            @SuppressWarnings("unchecked")
+            @Override
+            protected void publishResults(CharSequence constraint,
+                                          FilterResults results) {
+                messageList = (ArrayList<Message>) results.values;
+                notifyDataSetChanged();
+            }
+        };
+    }
+
+    private int indexOfSearchQuery(String message) {
+        if (!TextUtils.isEmpty(searchString)) {
+            return message.toLowerCase(Locale.getDefault()).indexOf(
+                    searchString.toString().toLowerCase(Locale.getDefault()));
+        }
+        return -1;
+    }
+
+
+    private void populateVideoCall(View customView, Message msg) {
+
+
+        Map<String, String> metaData = msg.getMetadata();
+
+        TextView statusTextView = (TextView) customView.findViewById(R.id.applozic_call_status);
+        TextView timeTextView = (TextView) customView.findViewById(R.id.applozic_call_timing);
+        TextView durationTextView = (TextView) customView.findViewById(R.id.applozic_call_duration);
+
+        ImageView imageView = (ImageView) customView.findViewById(R.id.applozic_call_image_type);
+
+        timeTextView.setText(DateUtils.getFormattedDate(msg.getCreatedAtTime()));
+        statusTextView.setText(VideoCallNotificationHelper.getStatus(metaData));
+
+        if (VideoCallNotificationHelper.isMissedCall(msg)) {
+            imageView.setImageResource(R.drawable.ic_communication_call_missed);
+        }
+
+        if (!VideoCallNotificationHelper.isAudioCall(msg)) {
+            imageView.setImageResource(R.drawable.ic_videocam_white_24px);
+        }
+
+        if (metaData.get(VideoCallNotificationHelper.MSG_TYPE).equals(VideoCallNotificationHelper.CALL_END)) {
+
+            String duration = metaData.get(VideoCallNotificationHelper.CALL_DURATION);
+
+            if (!TextUtils.isEmpty(duration)) {
+
+                durationTextView.setVisibility(View.VISIBLE);
+                duration = Utils.getTimeDurationInFormat(Long.parseLong(duration));
+                durationTextView.setText(duration);
+            }
+        } else {
+            durationTextView.setVisibility(View.GONE);
+        }
+
+    }
+
+    public void  refreshContactData(){
+        if(contact != null){
+            contact = contactService.getContactById(contact.getContactIds());
+        }
+    }
+
+    private boolean isNormalAttachment(Message message) {
+
+        if (message.getFileMetas() != null) {
+            return !(message.getFileMetas().getContentType().contains("image") || message.getFileMetas().getContentType().contains("video")|| message.isContactMessage());
+        }else if( message.getFilePaths() != null){
+            String filePath = message.getFilePaths().get(0);
+            final String mimeType = FileUtils.getMimeType(filePath);
+            if(mimeType!=null) {
+                return !(mimeType.contains("image") || mimeType.contains("video") || message.isContactMessage());
+            }
+        }
+        return false;
+    }
 }
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/adapter/MobiComAttachmentGridViewAdapter.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/adapter/MobiComAttachmentGridViewAdapter.java
index 7009e04f..d9111176 100755
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/adapter/MobiComAttachmentGridViewAdapter.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/adapter/MobiComAttachmentGridViewAdapter.java
@@ -3,21 +3,19 @@
 import android.app.Activity;
 import android.content.Context;
 import android.content.Intent;
-import android.database.Cursor;
 import android.graphics.Bitmap;
-import android.graphics.BitmapFactory;
 import android.net.Uri;
-import android.provider.OpenableColumns;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.BaseAdapter;
+
 import android.widget.ImageButton;
 import android.widget.ImageView;
 import android.widget.TextView;
 import android.widget.Toast;
 
-import com.applozic.mobicomkit.uiwidgets.ApplozicSetting;
+import com.applozic.mobicomkit.uiwidgets.AlCustomizationSettings;
 import com.applozic.mobicomkit.uiwidgets.R;
 import com.applozic.mobicommons.commons.image.ImageUtils;
 import com.applozic.mobicommons.file.FileUtils;
@@ -28,26 +26,31 @@
 public class MobiComAttachmentGridViewAdapter extends BaseAdapter {
 
     public static final int REQUEST_CODE = 100;
-    private Context context;
-    private ArrayList<Uri> uris;
-
     ImageButton deleteButton;
     ImageView galleryImageView;
     TextView fileSize;
     ImageView attachmentImageView;
     TextView fileName;
+    AlCustomizationSettings alCustomizationSettings;
+    boolean disableNewAttachment;
+    private Context context;
+    private ArrayList<Uri> uris;
+
 
-    public MobiComAttachmentGridViewAdapter(Context context, ArrayList<Uri> uris) {
+    public MobiComAttachmentGridViewAdapter(Context context, ArrayList<Uri> uris, AlCustomizationSettings alCustomizationSettings, boolean disableNewAttachment) {
         this.context = context;
+        this.alCustomizationSettings = alCustomizationSettings;
         this.uris = uris;
+        this.disableNewAttachment = disableNewAttachment;
     }
 
     @Override
     public int getCount() {
         //Extra one item is added
-        return uris.size() + 1;
+        return uris.size() + (disableNewAttachment ? 0 : 1);
     }
 
+
     @Override
     public Object getItem(int i) {
         return uris.get(i);
@@ -74,12 +77,12 @@ public View getView(final int position, View view, ViewGroup viewGroup) {
             @Override
             public void onClick(View v) {
 
-                if(position<getCount()-1){
+                if (position < getCount() - 1) {
                     return;
                 }
 
-                if( getCount()> ApplozicSetting.getInstance(context).getMaxAttachmentAllowed()){
-                    Toast.makeText(context,R.string.mobicom_max_attachment_warning,Toast.LENGTH_LONG).show();
+                if (getCount() > alCustomizationSettings.getMaxAttachmentAllowed()) {
+                    Toast.makeText(context, R.string.mobicom_max_attachment_warning, Toast.LENGTH_LONG).show();
                     return;
                 }
 
@@ -90,6 +93,9 @@ public void onClick(View v) {
             }
         });
 
+        if (disableNewAttachment) {
+            deleteButton.setVisibility(View.GONE);
+        }
         deleteButton.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
@@ -99,23 +105,27 @@ public void onClick(View v) {
         });
 
         if (position == getCount() - 1) {
-            setNewAttachmentView();
-            return view;
+            if (!disableNewAttachment) {
+                setNewAttachmentView();
+                return view;
+            }
         } else {
-            deleteButton.setVisibility(View.VISIBLE);
-
+            if (!disableNewAttachment) {
+                deleteButton.setVisibility(View.VISIBLE);
+            }
         }
-        try{
+
+        try {
             Uri uri = (Uri) getItem(position);
-            Bitmap previewBitmap = ImageUtils.getPreview(context,uri);
+            Bitmap previewBitmap = ImageUtils.getPreview(context, uri);
             if (previewBitmap != null) {
                 setGalleryView(previewBitmap);
             } else {
                 setAttachmentView(uri);
             }
-            fileSize.setText(FileUtils.getSize(context,uri));
+            fileSize.setText(FileUtils.getSize(context, uri));
 
-        }catch (Exception e){
+        } catch (Exception e) {
             e.printStackTrace();
         }
 
@@ -126,7 +136,7 @@ public void onClick(View v) {
     private void setAttachmentView(Uri uri) {
         attachmentImageView.setVisibility(View.VISIBLE);
         fileName.setVisibility(View.VISIBLE);
-        fileName.setText(FileUtils.getFileName(context,uri));
+        fileName.setText(FileUtils.getFileName(uri));
         galleryImageView.setImageBitmap(null);
     }
 
@@ -141,7 +151,7 @@ private void setNewAttachmentView() {
         galleryImageView.setImageResource(R.drawable.applozic_ic_action_add);
         fileName.setVisibility(View.GONE);
         attachmentImageView.setVisibility(View.GONE);
-        fileSize.setText("New Attachment");
+        fileSize.setText(R.string.New_Attachment);
     }
 
 }
\ No newline at end of file
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/adapter/MobicomMultimediaPopupAdapter.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/adapter/MobicomMultimediaPopupAdapter.java
index d7cc6067..2542d4a7 100644
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/adapter/MobicomMultimediaPopupAdapter.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/adapter/MobicomMultimediaPopupAdapter.java
@@ -1,34 +1,41 @@
 package com.applozic.mobicomkit.uiwidgets.conversation.adapter;
 
 import android.content.Context;
+import android.graphics.Color;
 import android.graphics.Typeface;
-import android.support.v4.content.ContextCompat;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.BaseAdapter;
 import android.widget.TextView;
 
-import com.applozic.mobicomkit.uiwidgets.ApplozicSetting;
+import com.applozic.mobicomkit.uiwidgets.AlCustomizationSettings;
 import com.applozic.mobicomkit.uiwidgets.R;
 
+import java.util.List;
+
 /**
  * Created by reytum on 18/3/16.
  */
 public class MobicomMultimediaPopupAdapter extends BaseAdapter {
     Context context;
-    String[] multimediaIcons;
-    String[] multimediaText;
+    List<String> multimediaIcons;
+    List<String> multimediaText;
+    AlCustomizationSettings alCustomizationSettings;
 
-    public MobicomMultimediaPopupAdapter(Context context, String[] multimediaIcons, String[] multimediaText) {
+    public MobicomMultimediaPopupAdapter(Context context, List<String> multimediaIcons, List<String> multimediaText) {
         this.context = context;
         this.multimediaIcons = multimediaIcons;
         this.multimediaText = multimediaText;
     }
 
+    public void setAlCustomizationSettings(AlCustomizationSettings alCustomizationSettings) {
+        this.alCustomizationSettings = alCustomizationSettings;
+    }
+
     @Override
     public int getCount() {
-        return multimediaText.length;
+        return multimediaText.size();
     }
 
     @Override
@@ -50,9 +57,9 @@ public View getView(int position, View convertView, ViewGroup parent) {
         Typeface iconTypeface = Typeface.createFromAsset(context.getAssets(), "fonts/fontawesome-webfont.ttf");
         icon.setTypeface(iconTypeface);
         TextView text = (TextView) convertView.findViewById(R.id.mobicom_multimedia_text);
-        icon.setTextColor(ContextCompat.getColor(context, ApplozicSetting.getInstance(context).getAttachmentIconsBackgroundColor()));
-        icon.setText(multimediaIcons[position]);
-        text.setText(multimediaText[position]);
+        icon.setTextColor(Color.parseColor(alCustomizationSettings.getAttachmentIconsBackgroundColor()));
+        icon.setText(multimediaIcons.get(position));
+        text.setText(multimediaText.get(position));
         return convertView;
     }
 
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/adapter/QuickConversationAdapter.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/adapter/QuickConversationAdapter.java
index 770d1dbc..abf75e42 100755
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/adapter/QuickConversationAdapter.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/adapter/QuickConversationAdapter.java
@@ -5,28 +5,35 @@
 import android.graphics.Bitmap;
 import android.graphics.drawable.GradientDrawable;
 import android.support.v4.app.FragmentActivity;
+import android.text.Html;
+import android.text.SpannableString;
 import android.text.TextUtils;
+import android.text.style.TextAppearanceSpan;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
+import android.widget.AlphabetIndexer;
 import android.widget.BaseAdapter;
+import android.widget.Filter;
+import android.widget.Filterable;
 import android.widget.ImageView;
 import android.widget.TextView;
 
 import com.applozic.mobicomkit.api.account.user.MobiComUserPreference;
 import com.applozic.mobicomkit.api.conversation.Message;
 import com.applozic.mobicomkit.api.conversation.database.MessageDatabaseService;
+import com.applozic.mobicomkit.api.notification.VideoCallNotificationHelper;
 import com.applozic.mobicomkit.channel.database.ChannelDatabaseService;
+import com.applozic.mobicomkit.channel.service.ChannelService;
 import com.applozic.mobicomkit.contact.AppContactService;
 import com.applozic.mobicomkit.contact.BaseContactService;
-import com.applozic.mobicomkit.uiwidgets.ApplozicSetting;
+import com.applozic.mobicomkit.uiwidgets.AlCustomizationSettings;
 import com.applozic.mobicomkit.uiwidgets.R;
 import com.applozic.mobicomkit.uiwidgets.alphanumbericcolor.AlphaNumberColorUtil;
 import com.applozic.mobicomkit.uiwidgets.conversation.ConversationUIService;
 import com.applozic.mobicomkit.uiwidgets.conversation.activity.MobiComKitActivityInterface;
 import com.applozic.mobicomkit.uiwidgets.instruction.InstructionUtil;
 import com.applozic.mobicommons.commons.core.utils.DateUtils;
-import com.applozic.mobicommons.commons.core.utils.Support;
 import com.applozic.mobicommons.commons.image.ImageLoader;
 import com.applozic.mobicommons.commons.image.ImageUtils;
 import com.applozic.mobicommons.emoticon.EmojiconHandler;
@@ -35,9 +42,11 @@
 import com.applozic.mobicommons.people.channel.ChannelUtils;
 import com.applozic.mobicommons.people.contact.Contact;
 
+import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.HashMap;
 import java.util.List;
+import java.util.Locale;
 import java.util.Map;
 
 import de.hdodenhof.circleimageview.CircleImageView;
@@ -45,7 +54,7 @@
 /**
  * Created by adarsh on 4/7/15.
  */
-public class QuickConversationAdapter extends BaseAdapter {
+public class QuickConversationAdapter extends BaseAdapter implements Filterable {
 
     private static Map<Short, Integer> messageTypeColorMap = new HashMap<Short, Integer>();
 
@@ -59,13 +68,22 @@
         messageTypeColorMap.put(Message.MessageType.CALL_OUTGOING.getValue(), R.color.message_type_outgoing_call);
     }
 
-    public ImageLoader contactImageLoader,channelImageLoader;
+    public ImageLoader contactImageLoader, channelImageLoader;
+    public String searchString = null;
+    TextView messageTextView;
+    ImageView attachmentIcon;
+    TextView alphabeticTextView;
+    CircleImageView contactImage;
     private Context context;
     private MessageDatabaseService messageDatabaseService;
     private List<Message> messageList;
     private BaseContactService contactService;
     private EmojiconHandler emojiconHandler;
     private long deviceTimeOffset = 0;
+    private List<Message> originalList;
+    private AlphabetIndexer mAlphabetIndexer;
+    private TextAppearanceSpan highlightTextSpan;
+    private AlCustomizationSettings alCustomizationSettings;
 
     public QuickConversationAdapter(final Context context, List<Message> messageList, EmojiconHandler emojiconHandler) {
         this.context = context;
@@ -89,8 +107,14 @@ protected Bitmap processBitmap(Object data) {
         };
         channelImageLoader.addImageCache(((FragmentActivity) context).getSupportFragmentManager(), 0.1f);
         channelImageLoader.setImageFadeIn(false);
+        final String alphabet = context.getString(R.string.alphabet);
+        mAlphabetIndexer = new AlphabetIndexer(null, 1, alphabet);
+        highlightTextSpan = new TextAppearanceSpan(context, R.style.searchTextHiglight);
     }
 
+    public void setAlCustomizationSettings(AlCustomizationSettings alCustomizationSettings) {
+        this.alCustomizationSettings = alCustomizationSettings;
+    }
 
     @Override
     public View getView(int position, View convertView, ViewGroup parent) {
@@ -101,17 +125,16 @@ public View getView(int position, View convertView, ViewGroup parent) {
         smTime.setVisibility(View.GONE);
         final Message message = getItem(position);
         if (message != null) {
-
             TextView smReceivers = (TextView) customView.findViewById(R.id.smReceivers);
             TextView createdAtTime = (TextView) customView.findViewById(R.id.createdAtTime);
-            TextView messageTextView = (TextView) customView.findViewById(R.id.message);
+            messageTextView = (TextView) customView.findViewById(R.id.message);
             //ImageView contactImage = (ImageView) customView.findViewById(R.id.contactImage);
-            CircleImageView contactImage = (CircleImageView) customView.findViewById(R.id.contactImage);
-            TextView alphabeticTextView = (TextView) customView.findViewById(R.id.alphabeticImage);
+            contactImage = (CircleImageView) customView.findViewById(R.id.contactImage);
+            alphabeticTextView = (TextView) customView.findViewById(R.id.alphabeticImage);
             TextView onlineTextView = (TextView) customView.findViewById(R.id.onlineTextView);
             ImageView sentOrReceived = (ImageView) customView.findViewById(R.id.sentOrReceivedIcon);
             TextView attachedFile = (TextView) customView.findViewById(R.id.attached_file);
-            final ImageView attachmentIcon = (ImageView) customView.findViewById(R.id.attachmentIcon);
+            attachmentIcon = (ImageView) customView.findViewById(R.id.attachmentIcon);
             TextView unReadCountTextView = (TextView) customView.findViewById(R.id.unreadSmsCount);
             List<String> items = null;
             List<String> userIds = null;
@@ -139,48 +162,34 @@ public View getView(int position, View convertView, ViewGroup parent) {
             if (message.getGroupId() == null) {
                 contactImageLoader.setLoadingImage(R.drawable.applozic_ic_contact_picture_holo_light);
             } else {
-                channelImageLoader.setLoadingImage(R.drawable.applozic_group_icon);
-            }
-            String contactNumber = "";
-            char firstLetter = 0;
-            if (channel != null && message.getGroupId() != null) {
-                smReceivers.setText(ChannelUtils.getChannelTitleName(channel, MobiComUserPreference.getInstance(context).getUserId()));
-                if (!TextUtils.isEmpty(channel.getImageUrl())) {
-                    channelImageLoader.loadImage(channel, contactImage);
-                }else if(channel.isBroadcastMessage()){
-                    contactImage.setImageResource(R.drawable.applozic_ic_applozic_broadcast);
-                }else {
+                if (Channel.GroupType.GROUPOFTWO.getValue().equals(channel.getType())) {
+                    contactImageLoader.setLoadingImage(R.drawable.applozic_ic_contact_picture_holo_light);
+                } else {
                     channelImageLoader.setLoadingImage(R.drawable.applozic_group_icon);
                 }
-            } else if (contactReceiver != null) {
-                contactNumber = contactReceiver.getDisplayName().toUpperCase();
-                firstLetter = contactReceiver.getDisplayName().toUpperCase().charAt(0);
-
-                if (contactReceiver != null) {
-                    if (firstLetter != '+') {
-                        alphabeticTextView.setText(String.valueOf(firstLetter));
-                    } else if (contactNumber.length() >= 2) {
-                        alphabeticTextView.setText(String.valueOf(contactNumber.charAt(1)));
+            }
+            if (channel != null && message.getGroupId() != null) {
+                if (Channel.GroupType.GROUPOFTWO.getValue().equals(channel.getType())) {
+                    Contact withUserContact = contactService.getContactById(ChannelService.getInstance(context).getGroupOfTwoReceiverUserId(channel.getKey()));
+                    if (withUserContact != null) {
+                        smReceivers.setText(withUserContact.getDisplayName());
+                        processContactImage(withUserContact);
                     }
-                    Character colorKey = AlphaNumberColorUtil.alphabetBackgroundColorMap.containsKey(firstLetter) ? firstLetter : null;
-                /*alphabeticTextView.setTextColor(context.getResources().getColor(AlphaNumberColorUtil.alphabetTextColorMap.get(colorKey)));
-                alphabeticTextView.setBackgroundResource(AlphaNumberColorUtil.alphabetBackgroundColorMap.get(colorKey));*/
-                    GradientDrawable bgShape = (GradientDrawable) alphabeticTextView.getBackground();
-                    bgShape.setColor(context.getResources().getColor(AlphaNumberColorUtil.alphabetBackgroundColorMap.get(colorKey)));
-                }
-                if (contactReceiver.isDrawableResources()) {
-                    int drawableResourceId = context.getResources().getIdentifier(contactReceiver.getrDrawableName(), "drawable", context.getPackageName());
-                    contactImage.setImageResource(drawableResourceId);
                 } else {
-                    if(TextUtils.isEmpty(contactReceiver.getImageURL())){
-                        alphabeticTextView.setVisibility(View.VISIBLE);
-                        contactImage.setVisibility(View.GONE);
-                    }else {
-                        contactImageLoader.loadImage(contactReceiver, contactImage, alphabeticTextView);
+                    smReceivers.setText(ChannelUtils.getChannelTitleName(channel, MobiComUserPreference.getInstance(context).getUserId()));
+                    if (!TextUtils.isEmpty(channel.getImageUrl())) {
+                        channelImageLoader.loadImage(channel, contactImage);
+                    } else if (channel.isBroadcastMessage()) {
+                        contactImage.setImageResource(R.drawable.applozic_ic_applozic_broadcast);
+                    } else {
+                        channelImageLoader.setLoadingImage(R.drawable.applozic_group_icon);
                     }
                 }
+            } else if (contactReceiver != null) {
+                processContactImage(contactReceiver);
             }
-            if (ApplozicSetting.getInstance(context).isOnlineStatusInMasterListVisible()) {
+
+            if (alCustomizationSettings.isOnlineStatusMasterList()) {
                 onlineTextView.setVisibility(contactReceiver != null && contactReceiver.isOnline() ? View.VISIBLE : View.GONE);
             }
 
@@ -188,7 +197,7 @@ public View getView(int position, View convertView, ViewGroup parent) {
                 @Override
                 public void onClick(View view) {
                     InstructionUtil.hideInstruction(context, R.string.instruction_open_conversation_thread);
-                    ((MobiComKitActivityInterface) context).onQuickConversationFragmentItemClick(view, contactReceiver, channel,message.getConversationId());
+                    ((MobiComKitActivityInterface) context).onQuickConversationFragmentItemClick(view, contactReceiver, channel, message.getConversationId(), searchString);
                 }
             });
 
@@ -210,9 +219,11 @@ public void onClick(View view) {
             } else if (attachmentIcon != null && message.getContentType() == Message.ContentType.LOCATION.getValue()) {
                 attachmentIcon.setVisibility(View.VISIBLE);
                 attachmentIcon.setImageResource(R.drawable.mobicom_notification_location_icon);
-                messageTextView.setText("Location");
+                messageTextView.setText(context.getString(R.string.Location));
             } else if (message.getContentType() == Message.ContentType.PRICE.getValue()) {
                 messageTextView.setText(EmoticonUtils.getSmiledText(context, ConversationUIService.FINAL_PRICE_TEXT + message.getMessage(), emojiconHandler));
+            } else if (message.getContentType() == Message.ContentType.TEXT_HTML.getValue()) {
+                messageTextView.setText(Html.fromHtml(message.getMessage()));
             } else {
                 messageTextView.setText(EmoticonUtils.getSmiledText(context, message.getMessage(), emojiconHandler));
             }
@@ -246,6 +257,24 @@ public void onClick(View view) {
             } else {
                 unReadCountTextView.setVisibility(View.GONE);
             }
+
+            int startIndex = indexOfSearchQuery(message.getMessage());
+            if (startIndex != -1) {
+
+                final SpannableString highlightedName = new SpannableString(message.getMessage());
+
+                // Sets the span to start at the starting point of the match and end at "length"
+                // characters beyond the starting point
+                highlightedName.setSpan(highlightTextSpan, startIndex,
+                        startIndex + searchString.toString().length(), 0);
+
+                messageTextView.setText(highlightedName);
+            }
+
+            if (message.isVideoCallMessage()) {
+                createVideoCallView(message);
+            }
+
         }
 
 
@@ -272,4 +301,105 @@ public int getItemViewType(int position) {
         return getItem(position).isTypeOutbox() ? 1 : 0;
     }
 
+
+    private int indexOfSearchQuery(String message) {
+        if (!TextUtils.isEmpty(searchString)) {
+            return message.toLowerCase(Locale.getDefault()).indexOf(
+                    searchString.toString().toLowerCase(Locale.getDefault()));
+        }
+        return -1;
+    }
+
+    @Override
+    public Filter getFilter() {
+        return new Filter() {
+            @Override
+            protected FilterResults performFiltering(CharSequence constraint) {
+
+                final FilterResults oReturn = new FilterResults();
+                final List<Message> results = new ArrayList<Message>();
+                if (originalList == null)
+                    originalList = messageList;
+                if (constraint != null) {
+                    searchString = constraint.toString();
+                    if (originalList != null && originalList.size() > 0) {
+                        for (final Message message : originalList) {
+                            if (message.getMessage().toLowerCase()
+                                    .contains(constraint.toString())) {
+                                results.add(message);
+                            }
+                        }
+                    }
+                    oReturn.values = results;
+                } else {
+                    oReturn.values = originalList;
+                }
+                return oReturn;
+            }
+
+            @SuppressWarnings("unchecked")
+            @Override
+            protected void publishResults(CharSequence constraint,
+                                          FilterResults results) {
+                messageList = (ArrayList<Message>) results.values;
+                notifyDataSetChanged();
+            }
+        };
+    }
+
+    public void createVideoCallView(Message message) {
+
+        if (message.getMetadata() == null || message.getMetadata().isEmpty()) {
+
+            attachmentIcon.setImageResource(R.drawable.ic_videocam_white_24px);
+            attachmentIcon.setColorFilter(R.color.applozic_green_color);
+            return;
+        }
+        messageTextView.setText(VideoCallNotificationHelper.getStatus(message.getMetadata()));
+        attachmentIcon.setVisibility(View.VISIBLE);
+
+        if (VideoCallNotificationHelper.isMissedCall(message)) {
+            attachmentIcon.setImageResource(R.drawable.ic_communication_call_missed);
+        } else if (VideoCallNotificationHelper.isAudioCall(message)) {
+            attachmentIcon.setImageResource(R.drawable.applozic_ic_action_call_holo_light);
+        } else {
+            attachmentIcon.setImageResource(R.drawable.ic_videocam_white_24px);
+            attachmentIcon.setColorFilter(R.color.applozic_green_color);
+        }
+
+    }
+
+    private void processContactImage(Contact contact) {
+        try {
+            String contactNumber = "";
+            char firstLetter = 0;
+            contactNumber = contact.getDisplayName().toUpperCase();
+            firstLetter = contact.getDisplayName().toUpperCase().charAt(0);
+
+            if (contact != null) {
+                if (firstLetter != '+') {
+                    alphabeticTextView.setText(String.valueOf(firstLetter));
+                } else if (contactNumber.length() >= 2) {
+                    alphabeticTextView.setText(String.valueOf(contactNumber.charAt(1)));
+                }
+                Character colorKey = AlphaNumberColorUtil.alphabetBackgroundColorMap.containsKey(firstLetter) ? firstLetter : null;
+                GradientDrawable bgShape = (GradientDrawable) alphabeticTextView.getBackground();
+                bgShape.setColor(context.getResources().getColor(AlphaNumberColorUtil.alphabetBackgroundColorMap.get(colorKey)));
+            }
+            if (contact.isDrawableResources()) {
+                int drawableResourceId = context.getResources().getIdentifier(contact.getrDrawableName(), "drawable", context.getPackageName());
+                contactImage.setImageResource(drawableResourceId);
+            } else {
+                if (TextUtils.isEmpty(contact.getImageURL())) {
+                    alphabeticTextView.setVisibility(View.VISIBLE);
+                    contactImage.setVisibility(View.GONE);
+                } else {
+                    contactImageLoader.loadImage(contact, contactImage, alphabeticTextView);
+                }
+            }
+        } catch (Exception e) {
+
+        }
+    }
+
 }
\ No newline at end of file
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/fragment/ApplozicAudioRecordAnimation.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/fragment/ApplozicAudioRecordAnimation.java
new file mode 100644
index 00000000..a12d44f6
--- /dev/null
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/fragment/ApplozicAudioRecordAnimation.java
@@ -0,0 +1,74 @@
+package com.applozic.mobicomkit.uiwidgets.conversation.fragment;
+
+import android.os.Build;
+import android.view.View;
+import android.view.animation.Animation;
+
+import java.lang.ref.WeakReference;
+import java.util.WeakHashMap;
+
+public class ApplozicAudioRecordAnimation extends Animation {
+
+    private static final WeakHashMap<View, ApplozicAudioRecordAnimation> PROXIES = new WeakHashMap<View, ApplozicAudioRecordAnimation>();
+    public static boolean NEED_PROXY = Build.VERSION.SDK_INT < 11;
+    private final WeakReference<View> mView;
+    private float mAlpha = 1;
+
+    private ApplozicAudioRecordAnimation(View view) {
+        setDuration(0);
+        setFillAfter(true);
+        view.setAnimation(this);
+        mView = new WeakReference<View>(view);
+    }
+
+    public static ApplozicAudioRecordAnimation wrap(View view) {
+        ApplozicAudioRecordAnimation proxy = PROXIES.get(view);
+        Animation animation = view.getAnimation();
+        if (proxy == null || proxy != animation && animation != null) {
+            proxy = new ApplozicAudioRecordAnimation(view);
+            PROXIES.put(view, proxy);
+        } else if (animation == null) {
+            view.setAnimation(proxy);
+        }
+        return proxy;
+    }
+
+    public static void setAlpha(View view, float alpha) {
+        if (ApplozicAudioRecordAnimation.NEED_PROXY) {
+            ApplozicAudioRecordAnimation.wrap(view).setAlpha(alpha);
+        } else {
+            view.setAlpha(alpha);
+        }
+    }
+
+    public static float getX(View view) {
+        if (ApplozicAudioRecordAnimation.NEED_PROXY) {
+            return ApplozicAudioRecordAnimation.wrap(view).getX();
+        } else {
+            return view.getX();
+        }
+    }
+
+    public float getAlpha() {
+        return mAlpha;
+    }
+
+    public void setAlpha(float alpha) {
+        if (mAlpha != alpha) {
+            mAlpha = alpha;
+            View view = mView.get();
+            if (view != null) {
+                view.invalidate();
+            }
+        }
+    }
+
+    public float getX() {
+        View view = mView.get();
+        if (view == null) {
+            return 0;
+        }
+        return view.getLeft();
+    }
+
+}
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/fragment/AudioMessageFragment.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/fragment/AudioMessageFragment.java
index 5a6efa4f..8d57040c 100755
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/fragment/AudioMessageFragment.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/fragment/AudioMessageFragment.java
@@ -5,7 +5,6 @@
 import android.os.CountDownTimer;
 import android.support.v4.app.DialogFragment;
 
-import android.util.Log;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
@@ -17,6 +16,7 @@
 import com.applozic.mobicomkit.api.attachment.FileClientService;
 import com.applozic.mobicomkit.uiwidgets.R;
 import com.applozic.mobicomkit.uiwidgets.conversation.ConversationUIService;
+import com.applozic.mobicommons.commons.core.utils.Utils;
 
 import java.io.File;
 import java.io.IOException;
@@ -31,9 +31,9 @@
     Button cancel, send;
     TextView txtcount, audioRecordingText;
     ImageButton record;
+    CountDownTimer t;
     private MediaRecorder audioRecorder;
     private String outputFile = null;
-    CountDownTimer t;
     private int cnt;
     private boolean isRecordring;
 
@@ -52,6 +52,7 @@ public View onCreateView(LayoutInflater inflater, final ViewGroup container,
 
         this.getDialog().setTitle("Voice Message");
         this.getDialog().setCancelable(Boolean.TRUE);
+        this.getDialog().setCanceledOnTouchOutside(Boolean.FALSE);
 
         record = (ImageButton) v.findViewById(R.id.audio_mic_imageview);
         send = (Button) v.findViewById(R.id.audio_send);
@@ -62,7 +63,7 @@ public View onCreateView(LayoutInflater inflater, final ViewGroup container,
         String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());
         String audioFileName = "AUD_" + timeStamp + "_" + ".m4a";
 
-        outputFile = FileClientService.getFilePath(audioFileName, getContext(), "audio/m4a").getAbsolutePath();
+        outputFile = FileClientService.getFilePath(audioFileName, getActivity().getApplicationContext(), "audio/m4a").getAbsolutePath();
         prepareMediaRecorder();
 
         record.setOnClickListener(new View.OnClickListener() {
@@ -80,7 +81,7 @@ public void onClick(View v) {
                         if (audioRecorder == null) {
                             prepareMediaRecorder();
                         }
-                        audioRecordingText.setText("STOP");
+                        audioRecordingText.setText(getResources().getString(R.string.stop));
                         audioRecorder.prepare();
                         audioRecorder.start();
                         isRecordring = true;
@@ -109,7 +110,7 @@ public void onClick(View v) {
 
                 File file = new File(outputFile);
                 if (file != null) {
-                    Log.i("AudioFRG:", "File deleted...");
+                    Utils.printLog(getContext(),"AudioFRG:", "File deleted...");
                     file.delete();
                 }
                 AudioMessageFragment.this.dismiss();
@@ -126,8 +127,8 @@ public void onClick(View v) throws IllegalArgumentException, SecurityException,
                     stopRecording();
                 }
                 //FILE CHECK ....
-                if(!(new File(outputFile).exists())){
-                    Toast.makeText(getContext(),R.string.audio_recording_send_text,Toast.LENGTH_SHORT).show();
+                if (!(new File(outputFile).exists())) {
+                    Toast.makeText(getContext(), R.string.audio_recording_send_text, Toast.LENGTH_SHORT).show();
                     return;
                 }
                 ConversationUIService conversationUIService = new ConversationUIService(getActivity());
@@ -165,7 +166,7 @@ public void stopRecording() {
             try {
                 audioRecorder.stop();
             } catch (RuntimeException stopException) {
-                Log.i("AudioMsgFrag:", "Runtime exception.This is thrown intentionally if stop is called just after start");
+                Utils.printLog(getContext(),"AudioMsgFrag:", "Runtime exception.This is thrown intentionally if stop is called just after start");
             } finally {
                 audioRecorder.release();
                 audioRecorder = null;
@@ -193,6 +194,3 @@ public MediaRecorder prepareMediaRecorder() {
         return audioRecorder;
     }
 }
-
-
-
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/fragment/ConversationFragment.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/fragment/ConversationFragment.java
index 5e566a78..dcab3561 100755
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/fragment/ConversationFragment.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/fragment/ConversationFragment.java
@@ -3,6 +3,7 @@
 import android.app.Activity;
 import android.location.Location;
 import android.os.Bundle;
+import android.support.v7.app.AppCompatActivity;
 import android.text.TextUtils;
 import android.view.LayoutInflater;
 import android.view.View;
@@ -13,29 +14,69 @@
 
 import com.applozic.mobicomkit.api.conversation.MessageIntentService;
 import com.applozic.mobicomkit.api.conversation.MobiComConversationService;
+import com.applozic.mobicomkit.api.conversation.SyncCallService;
+import com.applozic.mobicomkit.channel.service.ChannelService;
 import com.applozic.mobicomkit.uiwidgets.ApplozicApplication;
 import com.applozic.mobicomkit.uiwidgets.R;
 import com.applozic.mobicomkit.uiwidgets.conversation.MultimediaOptionsGridView;
 import com.applozic.mobicomkit.uiwidgets.conversation.adapter.MobicomMultimediaPopupAdapter;
 import com.applozic.mobicommons.commons.core.utils.LocationUtils;
+import com.applozic.mobicommons.commons.core.utils.Utils;
+import com.applozic.mobicommons.people.SearchListFragment;
 import com.applozic.mobicommons.people.channel.Channel;
 import com.applozic.mobicommons.people.contact.Contact;
 
-public class ConversationFragment extends MobiComConversationFragment {
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
 
+
+public class ConversationFragment extends MobiComConversationFragment implements SearchListFragment {
+
+    public static final int ATTCHMENT_OPTIONS = 6;
     private static final String TAG = "ConversationFragment";
-    private MultimediaOptionsGridView popupGrid;
+    private final static String CONTACT = "CONTACT";
+    private final static String CHANNEL = "CHANNEL";
+    private final static String CONVERSATION_ID = "CONVERSATION_ID";
+    private final static String SEARCH_STRING = "SEARCH_STRING";
     InputMethodManager inputMethodManager;
+    Bundle bundle;
+    private MultimediaOptionsGridView popupGrid;
+    private List<String> attachmentKey = new ArrayList<>();
+    private List<String> attachmentText = new ArrayList<>();
+    private List<String> attachmentIcon = new ArrayList<>();
 
-    public ConversationFragment() {
-        this.messageIntentClass = MessageIntentService.class;
+    public static ConversationFragment newInstance(Contact contact, Channel channel, Integer conversationId, String searchString) {
+        ConversationFragment f = new ConversationFragment();
+        Bundle args = new Bundle();
+        if (contact != null) {
+            args.putSerializable(CONTACT, contact);
+        }
+        if (channel != null) {
+            args.putSerializable(CHANNEL, channel);
+        }
+        if (conversationId != null) {
+            args.putInt(CONVERSATION_ID, conversationId);
+        }
+        args.putString(SEARCH_STRING, searchString);
+        f.setArguments(args);
+        return f;
     }
 
-    public ConversationFragment(Contact contact, Channel channel,Integer conversationId) {
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
         this.messageIntentClass = MessageIntentService.class;
-        this.contact = contact;
-        this.channel = channel;
-        this.currentConversationId = conversationId;
+        bundle = getArguments();
+        if (bundle != null) {
+            contact = (Contact) bundle.getSerializable(CONTACT);
+            channel = (Channel) bundle.getSerializable(CHANNEL);
+            currentConversationId = bundle.getInt(CONVERSATION_ID);
+            searchString = bundle.getString(SEARCH_STRING);
+            if (searchString != null) {
+                SyncCallService.refreshView = true;
+            }
+        }
     }
 
     public void attachLocation(Location mCurrentLocation) {
@@ -50,15 +91,21 @@ public void attachLocation(Location mCurrentLocation) {
 
     public View onCreateView(LayoutInflater inflater, ViewGroup container,
                              Bundle savedInstanceState) {
-        this.title = ApplozicApplication.TITLE;
+        this.title = getResources().getString(R.string.chats);
         this.conversationService = new MobiComConversationService(getActivity());
         hideExtendedSendingOptionLayout = true;
 
         View view = super.onCreateView(inflater, container, savedInstanceState);
+        populateAttachmentOptions();
+
+        if (alCustomizationSettings.isHideAttachmentButton()) {
 
+            attachButton.setVisibility(View.GONE);
+            messageEditText.setPadding(20, 0, 0, 0);
+        }
         sendType.setSelection(1);
 
-        messageEditText.setHint(R.string.enter_mt_message_hint);
+        messageEditText.setHint(alCustomizationSettings.getEditTextHintText());
 
         multimediaPopupGrid.setVisibility(View.GONE);
         ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(getActivity(),
@@ -80,16 +127,6 @@ public void onClick(View v) {
             @Override
             public void onClick(View view) {
 
-                MobicomMultimediaPopupAdapter adap = new MobicomMultimediaPopupAdapter(getActivity(), getResources().getStringArray(R.array.multimediaOptionIcons_without_price), getResources().getStringArray(R.array.multimediaOptions_without_price_text));
-                multimediaPopupGrid.setAdapter(adap);
-                multimediaPopupGrid.setVisibility(View.VISIBLE);
-                if (inputMethodManager.isActive()) {
-                    inputMethodManager.hideSoftInputFromWindow(view.getWindowToken(), 0);
-                }
-
-                MultimediaOptionsGridView itemClickHandler = new MultimediaOptionsGridView(getActivity(), multimediaPopupGrid);
-                itemClickHandler.setMultimediaClickListener();
-
                 if (contact != null && !contact.isBlocked() || channel != null) {
                     if (attachmentLayout.getVisibility() == View.VISIBLE) {
                         Toast.makeText(getActivity(), R.string.select_file_count_limit, Toast.LENGTH_LONG).show();
@@ -97,12 +134,29 @@ public void onClick(View view) {
                     }
                 }
 
-                if (contact != null && contact.isBlocked()) {
-                    userBlockDialog(false);
+                if (channel != null) {
+                    if (Channel.GroupType.GROUPOFTWO.getValue().equals(channel.getType())) {
+                        String userId = ChannelService.getInstance(getActivity()).getGroupOfTwoReceiverUserId(channel.getKey());
+                        if (!TextUtils.isEmpty(userId)) {
+                            Contact withUserContact = appContactService.getContactById(userId);
+                            if (withUserContact.isBlocked()) {
+                                userBlockDialog(false, withUserContact, true);
+                            } else {
+                                processAttachButtonClick(view);
+                            }
+                        }
+                    }else {
+                        processAttachButtonClick(view);
+                    }
+                } else if (contact != null) {
+                    if (contact.isBlocked()) {
+                        userBlockDialog(false, contact, false);
+                    } else {
+                        processAttachButtonClick(view);
+                    }
                 }
             }
         });
-
         return view;
     }
 
@@ -121,4 +175,89 @@ public void hideMultimediaOptionGrid() {
             multimediaPopupGrid.setVisibility(View.GONE);
         }
     }
+
+    @Override
+    public boolean onQueryTextChange(String newText) {
+        if (TextUtils.isEmpty(newText)) {
+            conversationAdapter.getFilter().filter(null);
+        } else {
+            conversationAdapter.getFilter().filter(newText);
+        }
+        return true;
+    }
+
+
+    void processAttachButtonClick(View view) {
+        MobicomMultimediaPopupAdapter mobicomMultimediaPopupAdapter = new MobicomMultimediaPopupAdapter(getActivity(), attachmentIcon, attachmentText);
+        mobicomMultimediaPopupAdapter.setAlCustomizationSettings(alCustomizationSettings);
+        multimediaPopupGrid.setAdapter(mobicomMultimediaPopupAdapter);
+
+        int noOfColumn = (attachmentKey.size() == ATTCHMENT_OPTIONS) ? 3 : attachmentKey.size();
+        multimediaPopupGrid.setNumColumns(noOfColumn);
+        multimediaPopupGrid.setVisibility(View.VISIBLE);
+        if (inputMethodManager.isActive()) {
+            inputMethodManager.hideSoftInputFromWindow(view.getWindowToken(), 0);
+        }
+
+        MultimediaOptionsGridView itemClickHandler = new MultimediaOptionsGridView(getActivity(), multimediaPopupGrid);
+        itemClickHandler.setMultimediaClickListener(attachmentKey);
+
+    }
+
+    private void populateAttachmentOptions() {
+
+        String[] allKeys = getResources().getStringArray(R.array.multimediaOptions_without_price_key);
+        String[] allValues = getResources().getStringArray(R.array.multimediaOptions_without_price_text);
+        String[] allIcons = getResources().getStringArray(R.array.multimediaOptionIcons_without_price);
+
+        Map<String, Boolean> maps = alCustomizationSettings.getAttachmentOptions();
+
+        for (int index = 0; index < allKeys.length; index++) {
+
+            String key = allKeys[index];
+            if (maps == null || maps.get(key) == null || maps.get(key)) {
+                attachmentKey.add(key);
+                attachmentText.add(allValues[index]);
+                attachmentIcon.add(allIcons[index]);
+            }
+        }
+    }
+
+    public void reload() {
+
+        try {
+            StringBuffer stringBufferTitle = new StringBuffer();
+            if (contact != null) {
+                Contact updatedInfoContact = appContactService.getContactById(contact.getContactIds());
+                if (updatedInfoContact.isDeleted()) {
+                    Utils.toggleSoftKeyBoard(getActivity(), true);
+                    bottomlayoutTextView.setText(R.string.user_has_been_deleted_text);
+                    userNotAbleToChatLayout.setVisibility(View.VISIBLE);
+                    individualMessageSendLayout.setVisibility(View.GONE);
+                    ((AppCompatActivity) getActivity()).getSupportActionBar().setSubtitle("");
+                }
+                if (updatedInfoContact != null && (!TextUtils.isEmpty(contact.getDisplayName())) && (!contact.getDisplayName().equals(updatedInfoContact.getDisplayName()))) {
+                    stringBufferTitle.append(updatedInfoContact.getDisplayName());
+                }
+            } else if (channel != null) {
+                if (Channel.GroupType.GROUPOFTWO.getValue().equals(channel.getType())) {
+                    String userId = ChannelService.getInstance(getActivity()).getGroupOfTwoReceiverUserId(channel.getKey());
+                    if (!TextUtils.isEmpty(userId)) {
+                        Contact withUserContact = appContactService.getContactById(userId);
+                        if (withUserContact != null && (!TextUtils.isEmpty(contact.getDisplayName())) && (!contact.getDisplayName().equals(withUserContact.getDisplayName()))) {
+                            stringBufferTitle.append(withUserContact.getDisplayName());
+                        }
+                    }
+                }
+            }
+            if (!TextUtils.isEmpty(stringBufferTitle)) {
+                ((AppCompatActivity) getActivity()).getSupportActionBar().setTitle(stringBufferTitle.toString());
+            }
+            conversationAdapter.refreshContactData();
+            conversationAdapter.notifyDataSetChanged();
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+
+    }
 }
\ No newline at end of file
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/fragment/MessageInfoFragment.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/fragment/MessageInfoFragment.java
index 09dae2dd..24b5c7e7 100755
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/fragment/MessageInfoFragment.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/fragment/MessageInfoFragment.java
@@ -8,6 +8,8 @@
 import android.os.Bundle;
 import android.support.v4.app.Fragment;
 import android.support.v4.app.FragmentActivity;
+import android.support.v7.widget.LinearLayoutManager;
+import android.support.v7.widget.RecyclerView;
 import android.support.v7.widget.Toolbar;
 import android.text.TextUtils;
 import android.util.DisplayMetrics;
@@ -18,17 +20,14 @@
 import android.view.MenuInflater;
 import android.view.View;
 import android.view.ViewGroup;
-import android.widget.BaseAdapter;
 import android.widget.Button;
 import android.widget.ImageView;
 import android.widget.LinearLayout;
-import android.widget.ListView;
 import android.widget.ProgressBar;
 import android.widget.RelativeLayout;
 import android.widget.TextView;
 import android.widget.Toast;
 
-import com.applozic.mobicomkit.ApplozicClient;
 import com.applozic.mobicomkit.api.attachment.AttachmentView;
 import com.applozic.mobicomkit.api.attachment.FileClientService;
 import com.applozic.mobicomkit.api.attachment.FileMeta;
@@ -55,16 +54,16 @@
 import de.hdodenhof.circleimageview.CircleImageView;
 
 
-public class MessageInfoFragment extends Fragment  {
+public class MessageInfoFragment extends Fragment {
 
-    public static final String MESSAGE_ARGUMENT_KEY= "MESSAGE";
-    Message message=null;
+    public static final String MESSAGE_ARGUMENT_KEY = "MESSAGE";
+    Message message = null;
     AttachmentView attachmentView;
     MessageInfoResponse messageInfoResponse;
-    private ImageLoader contactImageLoader,locationImageLoader;
-    private ListView readListView;
-    private  ListView deliveredListView;
-
+    MessageInfoAsyncTask messageInfoAsyncTask;
+    private ImageLoader contactImageLoader, locationImageLoader;
+    private RecyclerView readListView;
+    private RecyclerView deliveredListView;
 
     public MessageInfoFragment() {
     }
@@ -73,7 +72,6 @@ public MessageInfoFragment() {
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setHasOptionsMenu(true);
-
     }
 
     public View onCreateView(LayoutInflater inflater, ViewGroup container,
@@ -82,8 +80,8 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container,
         init();
 
         View view = inflater.inflate(R.layout.applozic_message_info, container, false);
-        Bundle bundle=getArguments();
-        String messageJson=bundle.getString(MESSAGE_ARGUMENT_KEY);
+        Bundle bundle = getArguments();
+        String messageJson = bundle.getString(MESSAGE_ARGUMENT_KEY);
         message = (Message) GsonUtils.getObjectFromJson(messageJson, Message.class);
 
         attachmentView = (AttachmentView) view.findViewById(R.id.applozic_message_info_attachmentview);
@@ -92,59 +90,70 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container,
         attachmentView.setVisibility(message.hasAttachment() ? View.VISIBLE : View.GONE);
 
 
-        RelativeLayout defaultRelativeLayout  =(RelativeLayout) view.findViewById(R.id.applozic_message_info_default_layout);
+        RelativeLayout defaultRelativeLayout = (RelativeLayout) view.findViewById(R.id.applozic_message_info_default_layout);
         TextView textView = (TextView) view.findViewById(R.id.applozic_message_info_message_text);
-        readListView = (ListView)view.findViewById(R.id.applozic_message_info_read_list);
-        deliveredListView =  (ListView)view.findViewById(R.id.applozic_message_info_delivered_list_view);
-        ImageView locationImageView  = (ImageView)view.findViewById(R.id.static_mapview);
+        readListView = (RecyclerView) view.findViewById(R.id.applozic_message_info_read_list);
+        deliveredListView = (RecyclerView) view.findViewById(R.id.applozic_message_info_delivered_list_view);
+        readListView.setHasFixedSize(true);
+        deliveredListView.setHasFixedSize(true);
+
+        RecyclerView.LayoutManager mLayoutManager = new LinearLayoutManager(getActivity());
+        RecyclerView.LayoutManager mLayoutManagerForDev = new LinearLayoutManager(getActivity());
+        readListView.setLayoutManager(mLayoutManager);
+        readListView.setClickable(true);
+        deliveredListView.setLayoutManager(mLayoutManagerForDev);
+        deliveredListView.setClickable(true);
+
+
+        ImageView locationImageView = (ImageView) view.findViewById(R.id.static_mapview);
         final LinearLayout mainContactShareLayout = (LinearLayout) view.findViewById(R.id.contact_share_layout);
 
         RelativeLayout chatLocation = (RelativeLayout) view.findViewById(R.id.chat_location);
 
-        if( message.hasAttachment() && !message.isContactMessage() && !message.isLocationMessage()){
+        if (message.hasAttachment() && !message.isContactMessage() && !message.isLocationMessage()) {
             textView.setVisibility(View.GONE);
             attachmentView.setMessage(message);
             chatLocation.setVisibility(View.GONE);
             defaultRelativeLayout.setVisibility(View.GONE);
             defaultRelativeLayout.setVisibility(View.VISIBLE);
-            setupAttachmentView(message,defaultRelativeLayout);
+            setupAttachmentView(message, defaultRelativeLayout);
 
-        }else{
+        } else {
 
             defaultRelativeLayout.setVisibility(View.GONE);
             textView.setVisibility(View.VISIBLE);
             textView.setText(message.getMessage());
 
         }
-        if(message.isLocationMessage()){
+        if (message.isLocationMessage()) {
             defaultRelativeLayout.setVisibility(View.GONE);
             chatLocation.setVisibility(View.VISIBLE);
             locationImageLoader.setImageFadeIn(false);
             locationImageLoader.setLoadingImage(R.drawable.applozic_map_offline_thumbnail);
             locationImageLoader.loadImage(LocationUtils.loadStaticMap(message.getMessage()), locationImageView);
             textView.setVisibility(View.GONE);
-        }else{
+        } else {
             chatLocation.setVisibility(View.GONE);
 
         }
 
-        if( message.isContactMessage() ){
+        if (message.isContactMessage()) {
             chatLocation.setVisibility(View.GONE);
             defaultRelativeLayout.setVisibility(View.GONE);
             setupContactShareView(message, mainContactShareLayout);
             textView.setVisibility(View.GONE);
-        }else{
+        } else {
             mainContactShareLayout.setVisibility(View.GONE);
         }
 
-        new MessageInfoAsyncTask(message.getKeyString()).execute();
+        messageInfoAsyncTask = new MessageInfoAsyncTask(message.getKeyString(), getActivity());
+        messageInfoAsyncTask.execute();
         return view;
     }
 
 
-
     private void init() {
-        if(contactImageLoader==null){
+        if (contactImageLoader == null) {
             contactImageLoader = new ImageLoader(getContext(), getListPreferredItemHeight()) {
                 @Override
                 protected Bitmap processBitmap(Object data) {
@@ -156,11 +165,11 @@ protected Bitmap processBitmap(Object data) {
             contactImageLoader.addImageCache(getActivity().getSupportFragmentManager(), 0.1f);
         }
 
-        if(locationImageLoader==null){
+        if (locationImageLoader == null) {
             locationImageLoader = new ImageLoader(getContext(), ImageUtils.getLargestScreenDimension((Activity) getContext())) {
                 @Override
                 protected Bitmap processBitmap(Object data) {
-                    FileClientService fileClientService =  new FileClientService(getContext());
+                    FileClientService fileClientService = new FileClientService(getContext());
                     return fileClientService.loadMessageImage(getContext(), (String) data);
                 }
             };
@@ -185,11 +194,102 @@ public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
 
     }
 
+    private int getListPreferredItemHeight() {
+        final TypedValue typedValue = new TypedValue();
+
+        getActivity().getTheme().resolveAttribute(
+                android.R.attr.listPreferredItemHeight, typedValue, true);
+        final DisplayMetrics metrics = new DisplayMetrics();
+
+        getActivity().getWindowManager().getDefaultDisplay().getMetrics(metrics);
+        return (int) typedValue.getDimension(metrics);
+    }
+
+    private void setupAttachmentView(Message message, RelativeLayout defaultRelativeLayout) {
+
+        FileMeta fileMeta = message.getFileMetas();
+        ImageView attachmentInconView = (ImageView) defaultRelativeLayout.findViewById(R.id.applozic_message_info_attachment_icon);
+        TextView attachmentFilename = (TextView) defaultRelativeLayout.findViewById(R.id.applozic_message_info_attachment_filename);
+        TextView messageText = (TextView) defaultRelativeLayout.findViewById(R.id.messageText);
+
+        if (TextUtils.isEmpty(message.getMessage())) {
+            messageText.setVisibility(View.GONE);
+        }
+        if (message.getMessage() != null) {
+            messageText.setText(message.getMessage());
+        }
+        if (fileMeta.getContentType().contains("image")) {
+
+            attachmentView.setVisibility(View.VISIBLE);
+            attachmentInconView.setVisibility(View.GONE);
+            attachmentFilename.setVisibility(View.GONE);
+
+        } else {
+
+            attachmentView.setVisibility(View.GONE);
+            attachmentInconView.setVisibility(View.VISIBLE);
+            attachmentFilename.setVisibility(View.VISIBLE);
+            attachmentFilename.setText(fileMeta.getName());
+
+        }
+
+    }
+
+    /**
+     * Set up contectMessage
+     *
+     * @param message
+     * @param mainContactShareLayout
+     */
+    private void setupContactShareView(final Message message, LinearLayout mainContactShareLayout) {
+        mainContactShareLayout.setVisibility(View.VISIBLE);
+        MobiComVCFParser parser = new MobiComVCFParser();
+        try {
+
+            VCFContactData data = parser.parseCVFContactData(message.getFilePaths().get(0));
+            ImageView shareContactImage = (ImageView) mainContactShareLayout.findViewById(R.id.contact_share_image);
+            TextView shareContactName = (TextView) mainContactShareLayout.findViewById(R.id.contact_share_tv_name);
+            TextView shareContactNo = (TextView) mainContactShareLayout.findViewById(R.id.contact_share_tv_no);
+            TextView shareEmailContact = (TextView) mainContactShareLayout.findViewById(R.id.contact_share_emailId);
+            (mainContactShareLayout.findViewById(R.id.divider)).setVisibility(View.GONE);
+            Button addContactButton = (Button) mainContactShareLayout.findViewById(R.id.contact_share_add_btn);
+            addContactButton.setVisibility(View.GONE);
+            shareContactName.setText(data.getName());
+
+            if (data.getProfilePic() != null) {
+                shareContactImage.setImageBitmap(data.getProfilePic());
+            }
+            if (!TextUtils.isEmpty(data.getTelephoneNumber())) {
+                shareContactNo.setText(data.getTelephoneNumber());
+            } else {
+                shareContactNo.setVisibility(View.GONE);
+            }
+            if (data.getEmail() != null) {
+                shareEmailContact.setText(data.getEmail());
+            } else {
+                shareEmailContact.setVisibility(View.GONE);
+            }
+        } catch (Exception e) {
+            Log.e("DetailedConvAdapter", "Exception in parsing", e);
+        }
+    }
+
+    @Override
+    public void onDestroy() {
+        super.onDestroy();
+        if (messageInfoAsyncTask != null) {
+            messageInfoAsyncTask.cancel(true);
+        }
+    }
+
     public class MessageInfoAsyncTask extends AsyncTask<Void, Integer, Long> {
 
         String messageKey;
-        public MessageInfoAsyncTask(String messageKey) {
-          this.messageKey = messageKey;
+        MobiComMessageService messageService;
+
+        public MessageInfoAsyncTask(String messageKey, Context context) {
+            this.messageKey = messageKey;
+            this.messageService = new MobiComMessageService(context, MessageIntentService.class);
         }
 
         @Override
@@ -201,9 +301,11 @@ protected void onPreExecute() {
 
         @Override
         protected Long doInBackground(Void... params) {
-            Context context = getActivity();
-            MobiComMessageService messageService =  new MobiComMessageService(context, MessageIntentService.class);
-            messageInfoResponse = messageService.getMessageInfoResponse(messageKey);
+            try {
+                messageInfoResponse = messageService.getMessageInfoResponse(messageKey);
+            } catch (Exception e) {
+                e.printStackTrace();
+            }
             return null;
         }
 
@@ -212,20 +314,20 @@ protected void onPostExecute(Long aLong) {
             super.onPostExecute(aLong);
             //Populating view....
 
-            if(!MessageInfoFragment.this.isVisible()){
+            if (!MessageInfoFragment.this.isVisible()) {
                 return;
             }
-            if(messageInfoResponse==null){
-                Toast.makeText(getContext(), getString(R.string.applozic_message_info_no_network),Toast.LENGTH_SHORT).show();
+            if (messageInfoResponse == null) {
+                Toast.makeText(getContext(), getString(R.string.applozic_message_info_no_network), Toast.LENGTH_SHORT).show();
                 return;
             }
-            if (messageInfoResponse.getReadByUserList()!=null){
+            if (messageInfoResponse.getReadByUserList() != null) {
                 ContactsAdapter readAdapter = new ContactsAdapter(messageInfoResponse.getReadByUserList());
                 readListView.setAdapter(readAdapter);
             }
 
 
-            if (messageInfoResponse.getDeliverdToUserList()!=null){
+            if (messageInfoResponse.getDeliverdToUserList() != null) {
                 ContactsAdapter deliveredAdapter = new ContactsAdapter(messageInfoResponse.getDeliverdToUserList());
                 deliveredListView.setAdapter(deliveredAdapter);
             }
@@ -235,54 +337,34 @@ protected void onPostExecute(Long aLong) {
 
     }
 
-    //Contact Adapter
-    private class ContactsAdapter extends BaseAdapter {
+    public class ContactsAdapter extends RecyclerView.Adapter<ContactsAdapter.MyViewHolder> {
 
         List<MessageInfo> messageInfoList;
-        private LayoutInflater mInflater;
         BaseContactService contactService;
 
-
-        public ContactsAdapter(){
-
-        }
-
-        public ContactsAdapter(List<MessageInfo> messageInfoList){
-
+        public ContactsAdapter(List<MessageInfo> messageInfoList) {
+            this.contactService = new AppContactService(getContext());
             this.messageInfoList = messageInfoList;
-            this.contactService =  new AppContactService(getContext());
-            mInflater = LayoutInflater.from(getContext());
+        }
 
+        @Override
+        public MyViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
+            View itemView = LayoutInflater.from(parent.getContext())
+                    .inflate(R.layout.contact_users_layout, parent, false);
 
+            return new MyViewHolder(itemView);
         }
 
         @Override
-        public View getView(int position, View convertView, ViewGroup parent) {
+        public void onBindViewHolder(MyViewHolder holder, int position) {
+            MessageInfo messageInfo = messageInfoList.get(position);
             String contactNumber;
             char firstLetter;
-            ContactViewHolder holder;
-
-            MessageInfo messageInfo =  messageInfoList.get(position);
             Contact contact = contactService.getContactById(messageInfo.getUserId());
-            if (convertView == null) {
-                convertView =
-                        mInflater.inflate(R.layout.contact_users_layout, parent, false);
-                holder = new ContactViewHolder();
-                holder.displayName = (TextView) convertView.findViewById(R.id.displayName);
-                holder.alphabeticImage = (TextView) convertView.findViewById(R.id.alphabeticImage);
-                holder.circleImageView = (CircleImageView) convertView.findViewById(R.id.contactImage);
-                holder.adminTextView = (TextView) convertView.findViewById(R.id.adminTextView);
-                holder.lastSeenAtTextView = (TextView) convertView.findViewById(R.id.lastSeenAtTextView);
-                convertView.setTag(holder);
-            } else {
-                holder = (ContactViewHolder) convertView.getTag();
-            }
-
             holder.displayName.setText(contact.getDisplayName());
-
             long timeStamp = messageInfo.isRead() ? messageInfo.getReadAtTime() :
-                    ( messageInfo.getDeliveredAtTime()==null ? 0 : messageInfo.getDeliveredAtTime());
-            if (timeStamp !=0 ) {
+                    (messageInfo.getDeliveredAtTime() == null ? 0 : messageInfo.getDeliveredAtTime());
+            if (timeStamp != 0) {
 
                 holder.lastSeenAtTextView.setVisibility(View.VISIBLE);
                 holder.lastSeenAtTextView.setText(String.valueOf(DateUtils.getDateAndTimeInDefaultFormat(timeStamp)));
@@ -311,158 +393,25 @@ public View getView(int position, View convertView, ViewGroup parent) {
             } else {
                 contactImageLoader.loadImage(contact, holder.circleImageView, holder.alphabeticImage);
             }
-
-            return convertView;
         }
 
         @Override
-        public int getCount() {
+        public int getItemCount() {
             return messageInfoList.size();
         }
 
-        @Override
-        public Object getItem(int position) {
-            return messageInfoList.get(position);
-        }
-
-        @Override
-        public long getItemId(int position) {
-            return 0;
-        }
-
-    }
-
-    private class ContactViewHolder {
-        public TextView displayName, alphabeticImage, adminTextView, lastSeenAtTextView;
-        public CircleImageView circleImageView;
-
-        public ContactViewHolder() {
-        }
-
-        public ContactViewHolder(TextView displayName, TextView alphabeticImage, TextView adminTextView, TextView lastSeenAtTextView, CircleImageView circleImageView) {
-            this.displayName = displayName;
-            this.alphabeticImage = alphabeticImage;
-            this.adminTextView = adminTextView;
-            this.lastSeenAtTextView = lastSeenAtTextView;
-            this.circleImageView = circleImageView;
-        }
-
-        public TextView getDisplayName() {
-            return displayName;
-        }
-
-        public void setDisplayName(TextView displayName) {
-            this.displayName = displayName;
-        }
-
-        public TextView getAlphabeticImage() {
-            return alphabeticImage;
-        }
-
-        public void setAlphabeticImage(TextView alphabeticImage) {
-            this.alphabeticImage = alphabeticImage;
-        }
-
-        public TextView getAdminTextView() {
-            return adminTextView;
-        }
-
-        public void setAdminTextView(TextView adminTextView) {
-            this.adminTextView = adminTextView;
-        }
-
-        public CircleImageView getCircleImageView() {
-            return circleImageView;
-        }
-
-        public void setCircleImageView(CircleImageView circleImageView) {
-            this.circleImageView = circleImageView;
-        }
-
-        public TextView getLastSeenAtTextView() {
-            return lastSeenAtTextView;
-        }
-
-        public void setLastSeenAtTextView(TextView lastSeenAtTextView) {
-            this.lastSeenAtTextView = lastSeenAtTextView;
-        }
-    }
-
-    private int getListPreferredItemHeight() {
-        final TypedValue typedValue = new TypedValue();
-
-        getActivity().getTheme().resolveAttribute(
-                android.R.attr.listPreferredItemHeight, typedValue, true);
-        final DisplayMetrics metrics = new DisplayMetrics();
-
-        getActivity().getWindowManager().getDefaultDisplay().getMetrics(metrics);
-        return (int) typedValue.getDimension(metrics);
-    }
-
-    private void setupAttachmentView(Message message, RelativeLayout defaultRelativeLayout) {
-
-        FileMeta fileMeta =  message.getFileMetas();
-        ImageView attachmentInconView = (ImageView) defaultRelativeLayout.findViewById(R.id.applozic_message_info_attachment_icon);
-        TextView  attachmentFilename =  (TextView) defaultRelativeLayout.findViewById(R.id.applozic_message_info_attachment_filename);
-        TextView messageText = (TextView) defaultRelativeLayout.findViewById(R.id.messageText);
-
-        if(message.getMessage()!=null){
-            messageText.setText(message.getMessage());
-        }
-
-        if (fileMeta.getContentType().contains("image") ) {
-
-            attachmentView.setVisibility(View.VISIBLE);
-            attachmentInconView.setVisibility(View.GONE);
-            attachmentFilename.setVisibility(View.GONE);
-
-        }else{
-
-            attachmentView.setVisibility(View.GONE);
-            attachmentInconView.setVisibility(View.VISIBLE);
-            attachmentFilename.setVisibility(View.VISIBLE);
-            attachmentFilename.setText(fileMeta.getName());
-
-        }
-
-    }
-
-    /**
-     * Set up contectMessage
-     * @param message
-     * @param mainContactShareLayout
-     */
-    private void setupContactShareView(final Message message, LinearLayout mainContactShareLayout) {
-        mainContactShareLayout.setVisibility(View.VISIBLE);
-        MobiComVCFParser parser = new MobiComVCFParser();
-        try {
-
-            VCFContactData data = parser.parseCVFContactData(message.getFilePaths().get(0));
-            ImageView shareContactImage = (ImageView) mainContactShareLayout.findViewById(R.id.contact_share_image);
-            TextView shareContactName = (TextView) mainContactShareLayout.findViewById(R.id.contact_share_tv_name);
-            TextView shareContactNo = (TextView) mainContactShareLayout.findViewById(R.id.contact_share_tv_no);
-            TextView shareEmailContact = (TextView) mainContactShareLayout.findViewById(R.id.contact_share_emailId);
-            (mainContactShareLayout.findViewById(R.id.divider)).setVisibility(View.GONE);
-            Button addContactButton = (Button) mainContactShareLayout.findViewById(R.id.contact_share_add_btn);
-            addContactButton.setVisibility(View.GONE);
-            shareContactName.setText(data.getName());
-
-            if (data.getProfilePic() != null) {
-                shareContactImage.setImageBitmap(data.getProfilePic());
+        public class MyViewHolder extends RecyclerView.ViewHolder {
+            public TextView displayName, alphabeticImage, adminTextView, lastSeenAtTextView;
+            CircleImageView circleImageView;
+
+            public MyViewHolder(View view) {
+                super(view);
+                displayName = (TextView) view.findViewById(R.id.displayName);
+                alphabeticImage = (TextView) view.findViewById(R.id.alphabeticImage);
+                circleImageView = (CircleImageView) view.findViewById(R.id.contactImage);
+                adminTextView = (TextView) view.findViewById(R.id.adminTextView);
+                lastSeenAtTextView = (TextView) view.findViewById(R.id.lastSeenAtTextView);
             }
-            if (!TextUtils.isEmpty(data.getTelephoneNumber())) {
-                shareContactNo.setText(data.getTelephoneNumber());
-            } else {
-                shareContactNo.setVisibility(View.GONE);
-            }
-            if (data.getEmail() != null) {
-                shareEmailContact.setText(data.getEmail());
-            } else {
-                shareEmailContact.setVisibility(View.GONE);
-            }
-        } catch (Exception e) {
-            Log.e("DetailedConvAdapter", "Exception in parsing", e);
         }
     }
-
-}
+}
\ No newline at end of file
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/fragment/MobiComConversationFragment.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/fragment/MobiComConversationFragment.java
index 508fb886..0a068ad7 100755
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/fragment/MobiComConversationFragment.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/fragment/MobiComConversationFragment.java
@@ -1,6 +1,7 @@
 package com.applozic.mobicomkit.uiwidgets.conversation.fragment;
 
 
+import android.Manifest;
 import android.app.Activity;
 import android.app.AlertDialog;
 import android.app.NotificationManager;
@@ -8,34 +9,47 @@
 import android.content.Context;
 import android.content.DialogInterface;
 import android.content.Intent;
+import android.content.pm.PackageManager;
+import android.content.res.Configuration;
 import android.database.Cursor;
 import android.graphics.Bitmap;
+import android.graphics.Color;
 import android.graphics.drawable.Drawable;
 import android.graphics.drawable.GradientDrawable;
 import android.location.Location;
 import android.net.Uri;
 import android.os.AsyncTask;
+import android.os.Build;
 import android.os.Bundle;
+import android.os.CountDownTimer;
+import android.os.Vibrator;
 import android.provider.OpenableColumns;
+import android.support.v4.app.ActivityCompat;
 import android.support.v4.app.Fragment;
 import android.support.v4.content.ContextCompat;
+import android.support.v4.content.FileProvider;
 import android.support.v4.os.AsyncTaskCompat;
+import android.support.v4.view.GestureDetectorCompat;
 import android.support.v4.widget.SwipeRefreshLayout;
 import android.support.v7.app.AppCompatActivity;
 import android.support.v7.widget.Toolbar;
-import android.telephony.PhoneNumberUtils;
 import android.text.Editable;
 import android.text.TextUtils;
 import android.text.TextWatcher;
 import android.util.DisplayMetrics;
 import android.util.Log;
+import android.util.TypedValue;
 import android.view.ContextMenu;
+import android.view.GestureDetector;
 import android.view.Gravity;
+import android.view.KeyEvent;
 import android.view.LayoutInflater;
 import android.view.Menu;
 import android.view.MenuInflater;
 import android.view.MenuItem;
+import android.view.MotionEvent;
 import android.view.View;
+import android.view.ViewConfiguration;
 import android.view.ViewGroup;
 import android.view.WindowManager;
 import android.widget.AbsListView;
@@ -56,13 +70,14 @@
 import android.widget.Toast;
 
 import com.applozic.mobicomkit.ApplozicClient;
+import com.applozic.mobicomkit.api.MobiComKitConstants;
 import com.applozic.mobicomkit.api.account.user.MobiComUserPreference;
 import com.applozic.mobicomkit.api.account.user.UserBlockTask;
 import com.applozic.mobicomkit.api.attachment.AttachmentView;
 import com.applozic.mobicomkit.api.attachment.FileClientService;
 import com.applozic.mobicomkit.api.attachment.FileMeta;
-import com.applozic.mobicomkit.api.conversation.ApplozicIntentService;
 import com.applozic.mobicomkit.api.conversation.ApplozicMqttIntentService;
+import com.applozic.mobicomkit.api.conversation.ConversationReadService;
 import com.applozic.mobicomkit.api.conversation.Message;
 import com.applozic.mobicomkit.api.conversation.MessageClientService;
 import com.applozic.mobicomkit.api.conversation.MessageIntentService;
@@ -71,15 +86,22 @@
 import com.applozic.mobicomkit.api.conversation.database.MessageDatabaseService;
 import com.applozic.mobicomkit.api.conversation.selfdestruct.DisappearingMessageTask;
 import com.applozic.mobicomkit.api.conversation.service.ConversationService;
+import com.applozic.mobicomkit.api.notification.MuteNotificationAsync;
+import com.applozic.mobicomkit.api.notification.MuteNotificationRequest;
 import com.applozic.mobicomkit.api.people.UserIntentService;
 import com.applozic.mobicomkit.broadcast.BroadcastService;
 import com.applozic.mobicomkit.channel.service.ChannelService;
 import com.applozic.mobicomkit.contact.AppContactService;
+import com.applozic.mobicomkit.contact.MobiComVCFParser;
+import com.applozic.mobicomkit.contact.VCFContactData;
 import com.applozic.mobicomkit.feed.ApiResponse;
+import com.applozic.mobicomkit.uiwidgets.AlCustomizationSettings;
 import com.applozic.mobicomkit.uiwidgets.ApplozicSetting;
 import com.applozic.mobicomkit.uiwidgets.R;
+import com.applozic.mobicomkit.uiwidgets.attachmentview.ApplozicAudioManager;
+import com.applozic.mobicomkit.uiwidgets.attachmentview.ApplozicAudioRecordManager;
+import com.applozic.mobicomkit.uiwidgets.attachmentview.ApplozicDocumentView;
 import com.applozic.mobicomkit.uiwidgets.conversation.ConversationListView;
-import com.applozic.mobicomkit.api.conversation.ConversationReadService;
 import com.applozic.mobicomkit.uiwidgets.conversation.ConversationUIService;
 import com.applozic.mobicomkit.uiwidgets.conversation.DeleteConversationAsyncTask;
 import com.applozic.mobicomkit.uiwidgets.conversation.MessageCommunicator;
@@ -87,7 +109,6 @@
 import com.applozic.mobicomkit.uiwidgets.conversation.activity.ChannelInfoActivity;
 import com.applozic.mobicomkit.uiwidgets.conversation.activity.ConversationActivity;
 import com.applozic.mobicomkit.uiwidgets.conversation.activity.MobiComKitActivityInterface;
-import com.applozic.mobicomkit.uiwidgets.conversation.activity.SpinnerNavItem;
 import com.applozic.mobicomkit.uiwidgets.conversation.adapter.ApplozicContextSpinnerAdapter;
 import com.applozic.mobicomkit.uiwidgets.conversation.adapter.DetailedConversationAdapter;
 import com.applozic.mobicomkit.uiwidgets.instruction.InstructionUtil;
@@ -95,10 +116,13 @@
 import com.applozic.mobicomkit.uiwidgets.schedule.ConversationScheduler;
 import com.applozic.mobicomkit.uiwidgets.schedule.ScheduledTimeHolder;
 import com.applozic.mobicommons.commons.core.utils.DateUtils;
+import com.applozic.mobicommons.commons.core.utils.LocationUtils;
 import com.applozic.mobicommons.commons.core.utils.Support;
 import com.applozic.mobicommons.commons.core.utils.Utils;
+import com.applozic.mobicommons.commons.image.ImageCache;
+import com.applozic.mobicommons.commons.image.ImageLoader;
+import com.applozic.mobicommons.commons.image.ImageUtils;
 import com.applozic.mobicommons.emoticon.EmojiconHandler;
-import com.applozic.mobicommons.file.FilePathFinder;
 import com.applozic.mobicommons.file.FileUtils;
 import com.applozic.mobicommons.json.GsonUtils;
 import com.applozic.mobicommons.people.channel.Channel;
@@ -106,24 +130,39 @@
 import com.applozic.mobicommons.people.channel.ChannelUtils;
 import com.applozic.mobicommons.people.channel.Conversation;
 import com.applozic.mobicommons.people.contact.Contact;
+import com.google.gson.Gson;
+import com.google.gson.reflect.TypeToken;
 
+import java.io.File;
+import java.lang.reflect.Type;
+import java.text.SimpleDateFormat;
 import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Calendar;
 import java.util.Date;
+import java.util.HashMap;
 import java.util.List;
+import java.util.Locale;
 import java.util.Map;
+import java.util.TimeZone;
 import java.util.Timer;
 
+import static android.view.View.VISIBLE;
+import static java.util.Collections.disjoint;
+
 /**
  * reg
  * Created by devashish on 10/2/15.
  */
-abstract public class MobiComConversationFragment extends Fragment implements View.OnClickListener {
+abstract public class MobiComConversationFragment extends Fragment implements View.OnClickListener, GestureDetector.OnGestureListener {
 
     //Todo: Increase the file size limit
     public static final int MAX_ALLOWED_FILE_SIZE = 10 * 1024 * 1024;
-    protected List<Conversation> conversations;
     private static final String TAG = "MobiComConversation";
+    private static int count;
     public FrameLayout emoticonsFrameLayout, contextFrameLayout;
+    public GridView multimediaPopupGrid;
+    protected List<Conversation> conversations;
     protected String title = "Conversations";
     protected DownloadConversation downloadConversation;
     protected MobiComConversationService conversationService;
@@ -138,7 +177,7 @@
     protected ImageButton sendButton;
     protected ImageButton attachButton;
     protected Spinner sendType;
-    protected LinearLayout individualMessageSendLayout,editTextLinearLayout;
+    protected LinearLayout individualMessageSendLayout, mainEditTextLinearLayout;
     protected LinearLayout extendedSendingOptionLayout;
     protected RelativeLayout attachmentLayout;
     protected ProgressBar mediaUploadProgressBar;
@@ -148,7 +187,7 @@
     protected ScheduledTimeHolder scheduledTimeHolder = new ScheduledTimeHolder();
     protected Spinner selfDestructMessageSpinner;
     protected ImageView mediaContainer;
-    protected TextView attachedFile;
+    protected TextView attachedFile, userNotAbleToChatTextView;
     protected String filePath;
     protected boolean firstTimeMTexterFriend;
     protected MessageCommunicator messageCommunicator;
@@ -161,28 +200,65 @@
     protected Support support;
     protected MultimediaOptionFragment multimediaOptionFragment = new MultimediaOptionFragment();
     protected boolean hideExtendedSendingOptionLayout;
+    protected SyncCallService syncCallService;
+    protected ApplozicContextSpinnerAdapter applozicContextSpinnerAdapter;
+    protected Message messageToForward;
+    protected String searchString;
+    protected AlCustomizationSettings alCustomizationSettings;
+    String audio_duration;
+    LinearLayout userNotAbleToChatLayout;
+    int resourceId;
+    List<ChannelUserMapper> channelUserMapperList;
+    AdapterView.OnItemSelectedListener adapterView;
+    MessageDatabaseService messageDatabaseService;
+    AppContactService appContactService;
+    ConversationUIService conversationUIService;
+    long millisecond;
+    MuteNotificationRequest muteNotificationRequest;
+    List<String> restrictedWords;
+    RelativeLayout replayRelativeLayout;
+    ImageButton attachReplyCancelLayout;
+    TextView nameTextView, messageTextView;
+    ImageView galleryImageView;
+    FileClientService fileClientService;
+    ImageLoader imageThumbnailLoader, messageImageLoader;
+    ImageView imageViewForAttachmentType;
+    RelativeLayout imageViewRLayout;
+    Map<String, String> messageMetaData = new HashMap<>();
+    LinearLayout slideTextLinearlayout;
+    TextView recordTimeTextView;
+    FrameLayout audioRecordFrameLayout;
+    ApplozicAudioRecordManager applozicAudioRecordManager;
+    String timeStamp, audioFileName;
+    String outputFile;
+    CountDownTimer t;
+    GestureDetectorCompat mDetector;
+    boolean longPress;
+    boolean isToastVisible = false;
+    int seconds = 0, minutes = 0;
+    ApplozicDocumentView applozicDocumentView;
+    ImageView slideImageView;
     private EmojiconHandler emojiIconHandler;
     private Bitmap previewThumbnail;
-    private TextView isTyping;
+    protected TextView isTyping, bottomlayoutTextView;
     private LinearLayout statusMessageLayout;
     private String defaultText;
     private boolean typingStarted;
     private Integer channelKey;
     private Toolbar toolbar;
-    LinearLayout userNotAbleToChatLayout;
-    protected ApplozicSetting applozicSetting;
-    public GridView multimediaPopupGrid;
-    int resourceId;
     private Menu menu;
-    protected SyncCallService syncCallService;
     private Spinner contextSpinner;
-    protected ApplozicContextSpinnerAdapter applozicContextSpinnerAdapter;
     private boolean onSelected;
-    List<ChannelUserMapper> channelUserMapperList;
-    AdapterView.OnItemSelectedListener adapterView;
-    MessageDatabaseService messageDatabaseService;
-    AppContactService appContactService;
-    protected Message messageToForward;
+    private ImageCache imageCache;
+    private float startedDraggingX = -1;
+    private float distCanMove = dp(80);
+    private EditText errorEditTextView;
+    private ImageView audioRecordIconImageView;
+
+    public static int dp(float value) {
+        return (int) Math.ceil(1 * value);
+    }
+
     public void setEmojiIconHandler(EmojiconHandler emojiIconHandler) {
         this.emojiIconHandler = emojiIconHandler;
     }
@@ -190,19 +266,48 @@ public void setEmojiIconHandler(EmojiconHandler emojiIconHandler) {
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
+        String jsonString = FileUtils.loadSettingsJsonFile(getActivity().getApplicationContext());
+        if (!TextUtils.isEmpty(jsonString)) {
+            alCustomizationSettings = (AlCustomizationSettings) GsonUtils.getObjectFromJson(jsonString, AlCustomizationSettings.class);
+        } else {
+            alCustomizationSettings = new AlCustomizationSettings();
+        }
+        applozicDocumentView = new ApplozicDocumentView(getContext());
+        restrictedWords = FileUtils.loadRestrictedWordsFile(getContext());
+        conversationUIService = new ConversationUIService(getActivity());
         syncCallService = SyncCallService.getInstance(getActivity());
-        applozicSetting = ApplozicSetting.getInstance(getActivity());
         appContactService = new AppContactService(getActivity());
         messageDatabaseService = new MessageDatabaseService(getActivity());
+        fileClientService = new FileClientService(getActivity());
         setHasOptionsMenu(true);
+        imageThumbnailLoader = new ImageLoader(getContext(), ImageUtils.getLargestScreenDimension((Activity) getContext())) {
+            @Override
+            protected Bitmap processBitmap(Object data) {
+                return fileClientService.loadThumbnailImage(getContext(), (Message) data, getImageLayoutParam(false).width, getImageLayoutParam(false).height);
+            }
+        };
+
+        imageCache = ImageCache.getInstance((getActivity()).getSupportFragmentManager(), 0.1f);
+        imageThumbnailLoader.setImageFadeIn(false);
+        imageThumbnailLoader.addImageCache((getActivity()).getSupportFragmentManager(), 0.1f);
+        messageImageLoader = new ImageLoader(getContext(), ImageUtils.getLargestScreenDimension((Activity) getContext())) {
+            @Override
+            protected Bitmap processBitmap(Object data) {
+                return fileClientService.loadMessageImage(getContext(), (String) data);
+            }
+        };
+        messageImageLoader.setImageFadeIn(false);
+        messageImageLoader.addImageCache((getActivity()).getSupportFragmentManager(), 0.1f);
+        applozicAudioRecordManager = new ApplozicAudioRecordManager(getActivity());
+        mDetector = new GestureDetectorCompat(getContext(), this);
+
     }
 
     public View onCreateView(LayoutInflater inflater, ViewGroup container,
                              Bundle savedInstanceState) {
         final View list = inflater.inflate(R.layout.mobicom_message_list, container, false);
         listView = (ConversationListView) list.findViewById(R.id.messageList);
-        listView.setScrollToBottomOnSizeChange(Boolean.TRUE);
-        ((ConversationActivity)getActivity()).setChildFragmentLayoutBGToTransparent();
+        ((ConversationActivity) getActivity()).setChildFragmentLayoutBGToTransparent();
         listView.setDivider(null);
         messageList = new ArrayList<Message>();
         multimediaPopupGrid = (GridView) list.findViewById(R.id.mobicom_multimedia_options1);
@@ -211,20 +316,38 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container,
 
         toolbar = (Toolbar) getActivity().findViewById(R.id.my_toolbar);
         toolbar.setClickable(true);
-
+        mainEditTextLinearLayout = (LinearLayout) list.findViewById(R.id.main_edit_text_linear_layout);
         individualMessageSendLayout = (LinearLayout) list.findViewById(R.id.individual_message_send_layout);
-        individualMessageSendLayout.setBackgroundResource(applozicSetting.getEditTextLayoutBackgroundColorOrDrawableResource());
+        slideImageView = (ImageView) list.findViewById(R.id.slide_image_view);
+        sendButton = (ImageButton) individualMessageSendLayout.findViewById(R.id.conversation_send);
+        mainEditTextLinearLayout = (LinearLayout) list.findViewById(R.id.main_edit_text_linear_layout);
+        audioRecordFrameLayout = (FrameLayout) list.findViewById(R.id.audio_record_frame_layout);
+        Configuration config = getResources().getConfiguration();
+
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
+            if (config.getLayoutDirection() == View.LAYOUT_DIRECTION_RTL) {
+                sendButton.setScaleX(-1);
+                mainEditTextLinearLayout.setBackgroundResource(R.drawable.applozic_chat_left_icon);
+                audioRecordFrameLayout.setBackgroundResource(R.drawable.applozic_chat_left_icon);
+                slideImageView.setImageResource(R.drawable.slide_arrow_right);
+
+            }
+        }
         extendedSendingOptionLayout = (LinearLayout) list.findViewById(R.id.extended_sending_option_layout);
-        editTextLinearLayout = (LinearLayout) list.findViewById(R.id.edit_text_linear_layout);
-        editTextLinearLayout.setBackgroundResource(applozicSetting.getEditTextBackgroundColorOrDrawableResource());
+
         statusMessageLayout = (LinearLayout) list.findViewById(R.id.status_message_layout);
         attachmentLayout = (RelativeLayout) list.findViewById(R.id.attachment_layout);
         isTyping = (TextView) list.findViewById(R.id.isTyping);
-        isTyping.setTextColor(ContextCompat.getColor(getActivity(), applozicSetting.getTypingTextColor()));
+
         contextFrameLayout = (FrameLayout) list.findViewById(R.id.contextFrameLayout);
 
         contextSpinner = (Spinner) list.findViewById(R.id.spinner_show);
-        adapterView =  new AdapterView.OnItemSelectedListener() {
+        slideTextLinearlayout = (LinearLayout) list.findViewById(R.id.slide_LinearLayout);
+        errorEditTextView = (EditText) list.findViewById(R.id.error_edit_text_view);
+        audioRecordIconImageView = (ImageView) list.findViewById(R.id.audio_record_icon_image_view);
+        recordTimeTextView = (TextView) list.findViewById(R.id.recording_time_text_view);
+        mDetector = new GestureDetectorCompat(getContext(), this);
+        adapterView = new AdapterView.OnItemSelectedListener() {
             @Override
             public void onItemSelected(AdapterView<?> adapterView, View view, int pos, long l) {
                 if (conversations != null && conversations.size() > 0) {
@@ -252,28 +375,44 @@ public void onNothingSelected(AdapterView<?> adapterView) {
         if (emojiIconHandler == null && emoticonsBtn != null) {
             emoticonsBtn.setVisibility(View.GONE);
         }
+        replayRelativeLayout = (RelativeLayout) list.findViewById(R.id.reply_message_layout);
+        messageTextView = (TextView) list.findViewById(R.id.messageTextView);
+        galleryImageView = (ImageView) list.findViewById(R.id.imageViewForPhoto);
+        nameTextView = (TextView) list.findViewById(R.id.replyNameTextView);
+        attachReplyCancelLayout = (ImageButton) list.findViewById(R.id.imageCancel);
+        imageViewRLayout = (RelativeLayout) list.findViewById(R.id.imageViewRLayout);
+        imageViewForAttachmentType = (ImageView) list.findViewById(R.id.imageViewForAttachmentType);
         spinnerLayout = inflater.inflate(R.layout.mobicom_message_list_header_footer, null);
         infoBroadcast = (TextView) spinnerLayout.findViewById(R.id.info_broadcast);
         spinnerLayout.setVisibility(View.GONE);
         emptyTextView = (TextView) list.findViewById(R.id.noConversations);
+        emptyTextView.setTextColor(Color.parseColor(alCustomizationSettings.getNoConversationLabelTextColor().trim()));
         emoticonsBtn.setOnClickListener(this);
         listView.addHeaderView(spinnerLayout);
         sentIcon = getResources().getDrawable(R.drawable.applozic_ic_action_message_sent);
         deliveredIcon = getResources().getDrawable(R.drawable.applozic_ic_action_message_delivered);
 
         listView.setLongClickable(true);
-
-        sendButton = (ImageButton) individualMessageSendLayout.findViewById(R.id.conversation_send);
         GradientDrawable bgShape = (GradientDrawable) sendButton.getBackground();
-        bgShape.setColor(getActivity().getResources().getColor(applozicSetting.getSendButtonBackgroundColor()));
-
+        bgShape.setColor(Color.parseColor(alCustomizationSettings.getSendButtonBackgroundColor().trim()));
         attachButton = (ImageButton) individualMessageSendLayout.findViewById(R.id.attach_button);
+
         sendType = (Spinner) extendedSendingOptionLayout.findViewById(R.id.sendTypeSpinner);
         messageEditText = (EditText) individualMessageSendLayout.findViewById(R.id.conversation_message);
-        messageEditText.setTextColor(ContextCompat.getColor(getActivity(), applozicSetting.getMessageEditTextTextColor()));
-        messageEditText.setHintTextColor(ContextCompat.getColor(getActivity(), applozicSetting.getMessageEditTextHintColor()));
+
+        messageEditText.setTextColor(Color.parseColor(alCustomizationSettings.getMessageEditTextTextColor()));
+
+        messageEditText.setHintTextColor(Color.parseColor(alCustomizationSettings.getMessageEditTextHintTextColor()));
+
         userNotAbleToChatLayout = (LinearLayout) list.findViewById(R.id.user_not_able_to_chat_layout);
+        userNotAbleToChatTextView = (TextView) userNotAbleToChatLayout.findViewById(R.id.user_not_able_to_chat_textView);
+        userNotAbleToChatTextView.setTextColor(Color.parseColor(alCustomizationSettings.getUserNotAbleToChatTextColor()));
+
+        if (channel != null && channel.isDeleted()) {
+            userNotAbleToChatTextView.setText(R.string.group_has_been_deleted_text);
+        }
 
+        bottomlayoutTextView = (TextView) list.findViewById(R.id.user_not_able_to_chat_textView);
         if (!TextUtils.isEmpty(defaultText)) {
             messageEditText.setText(defaultText);
             defaultText = "";
@@ -296,6 +435,108 @@ public void onNothingSelected(AdapterView<?> adapterView) {
         sendTypeAdapter.setDropDownViewResource(R.layout.mobiframework_custom_spinner);
         sendType.setAdapter(sendTypeAdapter);
 
+        t = new CountDownTimer(Long.MAX_VALUE, 1000) {
+
+            @Override
+            public void onTick(long millisUntilFinished) {
+                count++;
+                seconds = count;
+                if (seconds == 60) {
+                    minutes++;
+                    count = 0;
+                    seconds = 0;
+                }
+                if (minutes == 60) {
+                    minutes = 0;
+                    count = 0;
+                }
+                if (count % 2 == 0) {
+                    audioRecordIconImageView.setVisibility(VISIBLE);
+                    audioRecordIconImageView.setImageResource(R.drawable.applozic_audio_record);
+                } else {
+                    audioRecordIconImageView.setVisibility(View.INVISIBLE);
+                }
+
+                recordTimeTextView.setText(String.format("%02d:%02d", minutes, seconds));
+            }
+
+            @Override
+            public void onFinish() {
+                count = 0;
+            }
+        };
+
+
+        sendButton.setOnTouchListener(new View.OnTouchListener() {
+
+
+            @Override
+            public boolean onTouch(View view, MotionEvent motionEvent) {
+                mDetector.onTouchEvent(motionEvent);
+                if (motionEvent.getAction() == MotionEvent.ACTION_UP && longPress) {
+                    isToastVisible = true;
+                    errorEditTextView.setVisibility(View.GONE);
+                    errorEditTextView.requestFocus();
+                    errorEditTextView.setError(null);
+                    startedDraggingX = -1;
+                    audioRecordFrameLayout.setVisibility(View.GONE);
+                    mainEditTextLinearLayout.setVisibility(View.VISIBLE);
+                    applozicAudioRecordManager.sendAudio();
+                    t.cancel();
+                    longPress = false;
+                    messageEditText.requestFocus();
+                    seconds = 0;
+                    minutes = 0;
+                    count = 0;
+                } else if (motionEvent.getAction() == MotionEvent.ACTION_MOVE) {
+                    float x = motionEvent.getX();
+                    if (x < -distCanMove) {
+                        count = 0;
+                        t.cancel();
+                        audioRecordIconImageView.setImageResource(R.drawable.applozic_audio_delete);
+                        recordTimeTextView.setVisibility(View.GONE);
+                        applozicAudioRecordManager.cancelAudio();
+                        messageEditText.requestFocus();
+                    }
+                    x = x + ApplozicAudioRecordAnimation.getX(sendButton);
+                    FrameLayout.LayoutParams params = (FrameLayout.LayoutParams) slideTextLinearlayout
+                            .getLayoutParams();
+                    if (startedDraggingX != -1) {
+                        float dist = (x - startedDraggingX);
+                        params.leftMargin = dp(30) + (int) dist;
+                        slideTextLinearlayout.setLayoutParams(params);
+                        float alpha = 1.0f + dist / distCanMove;
+                        if (alpha > 1) {
+                            alpha = 1;
+                        } else if (alpha < 0) {
+                            alpha = 0;
+                        }
+                        ApplozicAudioRecordAnimation.setAlpha(slideTextLinearlayout, alpha);
+                    }
+                    if (x <= ApplozicAudioRecordAnimation.getX(slideTextLinearlayout) + slideTextLinearlayout.getWidth()
+                            + dp(30)) {
+                        if (startedDraggingX == -1) {
+                            startedDraggingX = x;
+                            distCanMove = (audioRecordFrameLayout.getMeasuredWidth()
+                                    - slideTextLinearlayout.getMeasuredWidth() - dp(48)) / 2.0f;
+                            if (distCanMove <= 0) {
+                                distCanMove = dp(80);
+                            } else if (distCanMove > dp(80)) {
+                                distCanMove = dp(80);
+                            }
+                        }
+                    }
+                    if (params.leftMargin > dp(30)) {
+                        params.leftMargin = dp(30);
+                        slideTextLinearlayout.setLayoutParams(params);
+                        ApplozicAudioRecordAnimation.setAlpha(slideTextLinearlayout, 1);
+                        startedDraggingX = -1;
+                    }
+                }
+                view.onTouchEvent(motionEvent);
+                return true;
+            }
+        });
 
         scheduleOption.setOnClickListener(new View.OnClickListener() {
 
@@ -322,22 +563,29 @@ public void onTextChanged(CharSequence s, int start, int before, int count) {
             }
 
             public void afterTextChanged(Editable s) {
-                if (!TextUtils.isEmpty(s.toString()) && s.toString().trim().length() > 0 && !typingStarted ) {
-                    //Log.i(TAG, "typing started event...");
-                    typingStarted = true;
-                    Intent intent = new Intent(getActivity(), ApplozicMqttIntentService.class);
-                    intent.putExtra(ApplozicMqttIntentService.CHANNEL, channel);
-                    intent.putExtra(ApplozicMqttIntentService.CONTACT, contact);
-                    intent.putExtra(ApplozicMqttIntentService.TYPING, typingStarted);
-                    getActivity().startService(intent);
-                } else if (s.toString().trim().length() == 0 && typingStarted) {
-                    //Log.i(TAG, "typing stopped event...");
-                    typingStarted = false;
-                    Intent intent = new Intent(getActivity(), ApplozicMqttIntentService.class);
-                    intent.putExtra(ApplozicMqttIntentService.CHANNEL, channel);
-                    intent.putExtra(ApplozicMqttIntentService.CONTACT, contact);
-                    intent.putExtra(ApplozicMqttIntentService.TYPING, typingStarted);
-                    getActivity().startService(intent);
+                try {
+                    if (!TextUtils.isEmpty(s.toString()) && s.toString().trim().length() > 0 && !typingStarted) {
+                        //Log.i(TAG, "typing started event...");
+                        typingStarted = true;
+                        Intent intent = new Intent(getActivity(), ApplozicMqttIntentService.class);
+                        intent.putExtra(ApplozicMqttIntentService.CHANNEL, channel);
+                        intent.putExtra(ApplozicMqttIntentService.CONTACT, contact);
+                        intent.putExtra(ApplozicMqttIntentService.TYPING, typingStarted);
+                        sendButton.setImageResource(R.drawable.mobicom_ic_action_send);
+                        getActivity().startService(intent);
+                    } else if (s.toString().trim().length() == 0 && typingStarted) {
+                        //Log.i(TAG, "typing stopped event...");
+                        typingStarted = false;
+                        Intent intent = new Intent(getActivity(), ApplozicMqttIntentService.class);
+                        intent.putExtra(ApplozicMqttIntentService.CHANNEL, channel);
+                        intent.putExtra(ApplozicMqttIntentService.CONTACT, contact);
+                        intent.putExtra(ApplozicMqttIntentService.TYPING, typingStarted);
+                        sendButton.setImageResource(R.drawable.applozic_mic_pressed);
+                        getActivity().startService(intent);
+                    }
+
+                } catch (Exception e) {
+
                 }
                 //sendButton.setVisibility((s == null || s.toString().trim().length() == 0) && TextUtils.isEmpty(filePath) ? View.GONE : View.VISIBLE);
                 //attachButton.setVisibility(s == null || s.toString().trim().length() == 0 ? View.VISIBLE : View.GONE);
@@ -352,6 +600,14 @@ public void onClick(View view) {
             }
         });
 
+        attachReplyCancelLayout.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                messageMetaData = null;
+                replayRelativeLayout.setVisibility(View.GONE);
+            }
+        });
+
         messageEditText.setOnFocusChangeListener(new View.OnFocusChangeListener() {
 
             @Override
@@ -372,49 +628,48 @@ public void onFocusChange(View v, boolean hasFocus) {
 
         });
 
+        messageEditText.setOnKeyListener(new View.OnKeyListener() {
+            public boolean onKey(View v, int keyCode, KeyEvent event) {
+                if ((event.getAction() == KeyEvent.ACTION_DOWN) &&
+                        (keyCode == KeyEvent.KEYCODE_ENTER)) {
+                    Utils.toggleSoftKeyBoard(getActivity(), true);
+                    return true;
+                }
+                return false;
+            }
+        });
 
         sendButton.setOnClickListener(new View.OnClickListener() {
                                           @Override
                                           public void onClick(View view) {
-                                              emoticonsFrameLayout.setVisibility(View.GONE);
-                                              if (contact != null && !contact.isBlocked() || channel != null) {
-
-                                                  if (TextUtils.isEmpty(messageEditText.getText().toString().trim()) && TextUtils.isEmpty(filePath)) {
-                                                /*final AlertDialog.Builder alertDialog = new AlertDialog.Builder(getActivity()).
-                                                          setPositiveButton(R.string.yes_alert, new DialogInterface.OnClickListener() {
-                                                              @Override
-                                                              public void onClick(DialogInterface dialogInterface, int i) {
-                                                                  sendMessage(messageEditText.getText().toString());
-                                                                  messageEditText.setText("");
-                                                                  scheduleOption.setText(R.string.ScheduleText);
-                                                                  if (scheduledTimeHolder.getTimestamp() != null) {
-                                                                      showScheduleMessageToast();
-                                                                  }
-                                                                  scheduledTimeHolder.resetScheduledTimeHolder();
-                                                              }
-                                                          });
-                                                  alertDialog.setNegativeButton(android.R.string.cancel, new DialogInterface.OnClickListener() {
+                                              if (!isToastVisible && !typingStarted) {
+                                                  vibrate();
+                                                  errorEditTextView.requestFocus();
+                                                  errorEditTextView.setError(getResources().getString(R.string.hold_to_record_release_to_send));
+                                                  isToastVisible = true;
+                                                  new CountDownTimer(3000, 1000) {
+
                                                       @Override
-                                                      public void onClick(DialogInterface dialogInterface, int i) {
-                                                      }
-                                                  });
-                                                  alertDialog.setTitle(getActivity().getString(R.string.alert_for_empty_message));
-                                                  alertDialog.setCancelable(true);
-                                                  alertDialog.create().show();*/
-                                                  } else {
-                                                      sendMessage(messageEditText.getText().toString().trim());
-                                                      messageEditText.setText("");
-                                                      scheduleOption.setText(R.string.ScheduleText);
-                                                      if (scheduledTimeHolder.getTimestamp() != null) {
-                                                          showScheduleMessageToast();
+                                                      public void onTick(long millisUntilFinished) {
                                                       }
-                                                      scheduledTimeHolder.resetScheduledTimeHolder();
 
-                                                  }
-                                              }
-                                              if (contact != null && contact.isBlocked()) {
-                                                  userBlockDialog(false);
+                                                      @Override
+                                                      public void onFinish() {
+                                                          errorEditTextView.setError(null);
+                                                          messageEditText.requestFocus();
+                                                          isToastVisible = false;
+
+                                                      }
+                                                  }.start();
+                                              } else {
+                                                  errorEditTextView.setError(null);
+                                                  isToastVisible = false;
                                               }
+                                              emoticonsFrameLayout.setVisibility(View.GONE);
+                                              sendMessage();
+                                              sendButton.setVisibility(VISIBLE);
+                                              sendButton.setImageResource(R.drawable.applozic_mic_pressed);
+                                              errorEditTextView.setVisibility(VISIBLE);
                                           }
                                       }
         );
@@ -454,19 +709,41 @@ public void onScroll(AbsListView view, int firstVisibleItem, int amountVisible,
         toolbar.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
+
                 if (channel != null) {
-                    Intent channelInfo = new Intent(getActivity(), ChannelInfoActivity.class);
-                    channelInfo.putExtra(ChannelInfoActivity.CHANNEL_KEY, channel.getKey());
-                    startActivity(channelInfo);
+                    if (channel.isDeleted()) {
+                        return;
+                    }
+                    if (alCustomizationSettings.isGroupInfoScreenVisible() && !Channel.GroupType.GROUPOFTWO.getValue().equals(channel.getType())) {
+                        Intent channelInfo = new Intent(getActivity(), ChannelInfoActivity.class);
+                        channelInfo.putExtra(ChannelInfoActivity.CHANNEL_KEY, channel.getKey());
+                        startActivity(channelInfo);
+                    } else if (Channel.GroupType.GROUPOFTWO.getValue().equals(channel.getType()) && alCustomizationSettings.isUserProfileFragment()) {
+                        UserProfileFragment userProfileFragment = (UserProfileFragment) UIService.getFragmentByTag(getActivity(), ConversationUIService.USER_PROFILE_FRAMENT);
+                        if (userProfileFragment == null) {
+                            String userId = ChannelService.getInstance(getActivity()).getGroupOfTwoReceiverUserId(channel.getKey());
+                            if (!TextUtils.isEmpty(userId)) {
+                                Contact newcContact = appContactService.getContactById(userId);
+                                userProfileFragment = new UserProfileFragment();
+                                Bundle bundle = new Bundle();
+                                bundle.putSerializable(ConversationUIService.CONTACT, newcContact);
+                                userProfileFragment.setArguments(bundle);
+                                ConversationActivity.addFragment(getActivity(), userProfileFragment, ConversationUIService.USER_PROFILE_FRAMENT);
+                            }
+                        }
+                    }
                 } else {
-                    UserProfileFragment userProfileFragment = (UserProfileFragment) UIService.getFragmentByTag(getActivity(), ConversationUIService.USER_PROFILE_FRAMENT);
-                    if (userProfileFragment == null) {
-                        userProfileFragment = new UserProfileFragment();
-                        Bundle bundle = new Bundle();
-                        bundle.putSerializable(ConversationUIService.CONTACT, contact);
-                        userProfileFragment.setArguments(bundle);
-                        ConversationActivity.addFragment(getActivity(), userProfileFragment, ConversationUIService.USER_PROFILE_FRAMENT);
+                    if (alCustomizationSettings.isUserProfileFragment()) {
+                        UserProfileFragment userProfileFragment = (UserProfileFragment) UIService.getFragmentByTag(getActivity(), ConversationUIService.USER_PROFILE_FRAMENT);
+                        if (userProfileFragment == null) {
+                            userProfileFragment = new UserProfileFragment();
+                            Bundle bundle = new Bundle();
+                            bundle.putSerializable(ConversationUIService.CONTACT, contact);
+                            userProfileFragment.setArguments(bundle);
+                            ConversationActivity.addFragment(getActivity(), userProfileFragment, ConversationUIService.USER_PROFILE_FRAMENT);
+                        }
                     }
+
                 }
             }
         });
@@ -478,6 +755,147 @@ public void onClick(View v) {
         return list;
     }
 
+    @Override
+    public boolean onFling(MotionEvent event1, MotionEvent event2,
+                           float velocityX, float velocityY) {
+        return true;
+    }
+
+    @Override
+    public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX,
+                            float distanceY) {
+        return true;
+    }
+
+    @Override
+    public boolean onSingleTapUp(MotionEvent event) {
+        return true;
+    }
+
+
+    @Override
+    public void onShowPress(MotionEvent event) {
+    }
+
+    @Override
+    public boolean onDown(MotionEvent event) {
+        return true;
+    }
+
+    @Override
+    public void onLongPress(MotionEvent event) {
+        isToastVisible = true;
+        errorEditTextView.requestFocus();
+        errorEditTextView.setError(null);
+        recordTimeTextView.setVisibility(View.VISIBLE);
+        audioRecordIconImageView.setImageResource(R.drawable.applozic_audio_record);
+        ApplozicAudioManager.getInstance(getContext()).audiostop();
+        FrameLayout.LayoutParams params = (FrameLayout.LayoutParams) slideTextLinearlayout
+                .getLayoutParams();
+        params.leftMargin = dp(30);
+        slideTextLinearlayout.setLayoutParams(params);
+        ApplozicAudioRecordAnimation.setAlpha(slideTextLinearlayout, 1);
+        startedDraggingX = -1;
+        ViewConfiguration.getLongPressTimeout();
+        timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());
+        audioFileName = "AUD_" + timeStamp + "_" + ".m4a";
+        outputFile = FileClientService.getFilePath(audioFileName, getContext().getApplicationContext(), "audio/m4a").getAbsolutePath();
+        applozicAudioRecordManager.setTimeStamp(timeStamp);
+        applozicAudioRecordManager.setAudioFileName(audioFileName);
+        applozicAudioRecordManager.setOutputFile(outputFile);
+        vibrate();
+        if (ActivityCompat.checkSelfPermission(getContext(), Manifest.permission.RECORD_AUDIO)
+                != PackageManager.PERMISSION_GRANTED) {
+            ActivityCompat.requestPermissions(getActivity(), new String[]{Manifest.permission.RECORD_AUDIO},
+                    10);
+        } else {
+            applozicAudioRecordManager.recordAudio();
+            t.cancel();
+            t.start();
+            count = 0;
+        }
+
+        sendButton.getParent()
+                .requestDisallowInterceptTouchEvent(true);
+        audioRecordFrameLayout.setVisibility(View.VISIBLE);
+        mainEditTextLinearLayout.setVisibility(View.GONE);
+        longPress = true;
+    }
+
+    private void vibrate() {
+        try {
+            Vibrator v = (Vibrator) getActivity().getSystemService(Context.VIBRATOR_SERVICE);
+            v.vibrate(200);
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+
+    protected void sendMessage() {
+        if (channel != null) {
+            if (Channel.GroupType.GROUPOFTWO.getValue().equals(channel.getType())) {
+                String userId = ChannelService.getInstance(getActivity()).getGroupOfTwoReceiverUserId(channel.getKey());
+                if (!TextUtils.isEmpty(userId)) {
+                    Contact withUserContact = appContactService.getContactById(userId);
+                    if (withUserContact.isBlocked()) {
+                        userBlockDialog(false, withUserContact, true);
+                    } else {
+                        processSendMessage();
+                    }
+                }
+            } else if (Channel.GroupType.OPEN.getValue().equals(channel.getType())) {
+                if (Utils.isInternetAvailable(getActivity())) {
+                    processSendMessage();
+                } else {
+                    Toast.makeText(getActivity(), getActivity().getString(R.string.internet_connection_not_available), Toast.LENGTH_SHORT).show();
+                }
+            } else {
+                processSendMessage();
+            }
+        } else if (contact != null) {
+            if (contact.isBlocked()) {
+                userBlockDialog(false, contact, false);
+            } else {
+                processSendMessage();
+            }
+        }
+    }
+
+    protected void processSendMessage() {
+        if (!TextUtils.isEmpty(messageEditText.getText().toString().trim()) || !TextUtils.isEmpty(filePath)) {
+            String inputMessage = messageEditText.getText().toString();
+            String[] inputMsg = inputMessage.toLowerCase().split(" ");
+            List<String> userInputList = Arrays.asList(inputMsg);
+
+            boolean disjointResult = (restrictedWords == null) ? true : disjoint(restrictedWords, userInputList);
+
+            if (disjointResult) {
+
+                sendMessage(messageEditText.getText().toString().trim());
+                messageEditText.setText("");
+                scheduleOption.setText(R.string.ScheduleText);
+                if (scheduledTimeHolder.getTimestamp() != null) {
+                    showScheduleMessageToast();
+                }
+                scheduledTimeHolder.resetScheduledTimeHolder();
+
+            } else {
+                final AlertDialog.Builder alertDialog = new AlertDialog.Builder(getActivity()).
+                        setPositiveButton(R.string.ok_alert, new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialogInterface, int i) {
+
+                            }
+                        });
+                alertDialog.setTitle(alCustomizationSettings.getRestrictedWordMessage());
+                alertDialog.setCancelable(true);
+                alertDialog.create().show();
+
+            }
+        }
+
+    }
+
     public void showScheduleMessageToast() {
         getActivity().runOnUiThread(new Runnable() {
             public void run() {
@@ -521,7 +939,7 @@ public void deleteMessageFromDeviceList(String messageKeyString) {
                     messageList.remove(position);
                     conversationAdapter.notifyDataSetChanged();
                     if (messageList.isEmpty()) {
-                        emptyTextView.setVisibility(View.VISIBLE);
+                        emptyTextView.setVisibility(VISIBLE);
                         ((MobiComKitActivityInterface) getActivity()).removeConversation(message, channel != null ? String.valueOf(channel.getKey()) : contact.getFormattedContactNumber());
                     }
                     break;
@@ -626,10 +1044,16 @@ public void run() {
                     currentConversationId = message.getConversationId();
                     channelKey = message.getGroupId();
                     if (Message.MessageType.MT_INBOX.getValue().equals(message.getType())) {
-                        Intent intent = new Intent(getActivity(), ApplozicIntentService.class);
-                        intent.putExtra(ApplozicIntentService.PAIRED_MESSAGE_KEY_STRING, message.getPairedMessageKeyString());
-                        getActivity().startService(intent);
-                        messageDatabaseService.updateReadStatusForKeyString(message.getKeyString());
+                        try {
+                            messageDatabaseService.updateReadStatusForKeyString(message.getKeyString());
+                            Intent intent = new Intent(getActivity(), ConversationReadService.class);
+                            intent.putExtra(ConversationReadService.SINGLE_MESSAGE_READ, true);
+                            intent.putExtra(ConversationReadService.CONTACT, contact);
+                            intent.putExtra(ConversationReadService.CHANNEL, channel);
+                            getActivity().startService(intent);
+                        } catch (Exception e) {
+                            Utils.printLog(getContext(), TAG, "Got exception while read");
+                        }
                     }
                 }
 
@@ -661,27 +1085,36 @@ public void onCreateContextMenu(ContextMenu menu, View view,
 
             for (int i = 0; i < menuItems.length; i++) {
 
-                if (!( message.isGroupMessage() && message.isTypeOutbox() && message.isSentToServer() ) && menuItems[i].equals("Info")) {
+                if (!(message.isGroupMessage() && message.isTypeOutbox() && message.isSentToServer()) && menuItems[i].equals(getResources().getString(R.string.info))) {
                     continue;
                 }
 
-                if ((message.hasAttachment() || message.getContentType() == Message.ContentType.LOCATION.getValue()) &&
-                        menuItems[i].equals("Copy")) {
+                if ((message.hasAttachment() || message.getContentType() == Message.ContentType.LOCATION.getValue() || message.isVideoOrAudioCallMessage()) &&
+                        menuItems[i].equals(getResources().getString(R.string.copy))) {
+                    continue;
+                }
+                if (((channel != null && Channel.GroupType.OPEN.getValue().equals(channel.getType())) || message.isCall() || (message.hasAttachment() && !message.isAttachmentDownloaded())) && (menuItems[i].equals(getResources().getString(R.string.forward)) ||
+                        menuItems[i].equals(getResources().getString(R.string.resend)))) {
                     continue;
                 }
-                if (message.isCall() && (menuItems[i].equals("Forward") ||
-                        menuItems[i].equals("Resend"))) {
+                if (menuItems[i].equals(getResources().getString(R.string.resend)) && (!message.isSentViaApp() || message.isSentToServer() || message.isVideoOrAudioCallMessage())) {
                     continue;
                 }
-                if (menuItems[i].equals("Resend") && (!message.isSentViaApp() || message.isSentToServer())) {
+
+                if (menuItems[i].equals(getResources().getString(R.string.reply)) &&  (!alCustomizationSettings.isReplyOption() || message.isAttachmentUploadInProgress() || TextUtils.isEmpty(message.getKeyString()) || !message.isSentToServer() || (channel != null && Channel.GroupType.OPEN.getValue().equals(channel.getType())) || (message.hasAttachment() && !message.isAttachmentDownloaded()) || channel != null && !ChannelService.getInstance(getActivity()).processIsUserPresentInChannel(channel.getKey()) || message.isVideoOrAudioCallMessage() || contact != null && contact.isDeleted() ) ) {
+                    continue;
+                }
+
+                if (menuItems[i].equals(getResources().getString(R.string.delete)) && (TextUtils.isEmpty(message.getKeyString()) || (channel != null && Channel.GroupType.OPEN.getValue().equals(channel.getType())))) {
                     continue;
                 }
-                if (menuItems[i].equals("Delete") && (message.isAttachmentUploadInProgress() || TextUtils.isEmpty(message.getKeyString()))) {
+                if (menuItems[i].equals(getResources().getString(R.string.info)) && (TextUtils.isEmpty(message.getKeyString()) || (channel != null && Channel.GroupType.OPEN.getValue().equals(channel.getType())) || message.isVideoOrAudioCallMessage())) {
                     continue;
                 }
-                if(menuItems[i].equals("Info") && TextUtils.isEmpty(message.getKeyString())){
+                if (menuItems[i].equals(getResources().getString(R.string.share)) && (message.isAttachmentUploadInProgress() || message.getFilePaths() == null || !(new File(message.getFilePaths().get(0)).exists()))) {
                     continue;
                 }
+
                 menu.add(Menu.NONE, i, i, menuItems[i]);
             }
         }
@@ -692,26 +1125,73 @@ public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
         super.onCreateOptionsMenu(menu, inflater);
         this.menu = menu;
 
+        if (contact != null && contact.isDeleted()) {
+            menu.findItem(R.id.dial).setVisible(false);
+            menu.findItem(R.id.refresh).setVisible(false);
+            menu.removeItem(R.id.conversations);
+            menu.findItem(R.id.userBlock).setVisible(false);
+            menu.findItem(R.id.userUnBlock).setVisible(false);
+            menu.findItem(R.id.dial).setVisible(false);
+            return;
+        }
+
         String contactNumber = contact != null ? contact.getContactNumber() : null;
-        if (ApplozicClient.getInstance(getActivity()).isHandleDial() && !TextUtils.isEmpty(contactNumber) && contactNumber.length() > 2) {
-            menu.findItem(R.id.dial).setVisible(true);
+        ApplozicClient setting = ApplozicClient.getInstance(getActivity());
+
+        if ((setting.isHandleDial() && !TextUtils.isEmpty(contactNumber) && contactNumber.length() > 2)
+                || (setting.isIPCallEnabled())) {
+            if (setting.isIPCallEnabled()) {
+                menu.findItem(R.id.dial).setVisible(true);
+                menu.findItem(R.id.video_call).setVisible(true);
+            }
+            if (setting.isHandleDial()) {
+                menu.findItem(R.id.dial).setVisible(true);
+            }
         } else {
+            menu.findItem(R.id.video_call).setVisible(false);
             menu.findItem(R.id.dial).setVisible(false);
         }
         if (channel != null) {
-            menu.findItem(R.id.userBlock).setVisible(false);
-            menu.findItem(R.id.userUnBlock).setVisible(false);
             menu.findItem(R.id.dial).setVisible(false);
-        } else if (contact != null) {
+            menu.findItem(R.id.video_call).setVisible(false);
+
+            if (Channel.GroupType.GROUPOFTWO.getValue().equals(channel.getType())) {
+                String userId = ChannelService.getInstance(getActivity()).getGroupOfTwoReceiverUserId(channel.getKey());
+                if (!TextUtils.isEmpty(userId) && alCustomizationSettings.isBlockOption()) {
+                    Contact withUserContact = appContactService.getContactById(userId);
+                    if (withUserContact.isBlocked()) {
+                        menu.findItem(R.id.userUnBlock).setVisible(true);
+                    } else {
+                        menu.findItem(R.id.userBlock).setVisible(true);
+                    }
+                }
+            } else {
+                menu.findItem(R.id.userBlock).setVisible(false);
+                menu.findItem(R.id.userUnBlock).setVisible(false);
+                if (alCustomizationSettings.isMuteOption()) {
+                    menu.findItem(R.id.unmuteGroup).setVisible(!channel.isDeleted() && channel.isNotificationMuted());
+                    menu.findItem(R.id.muteGroup).setVisible(!channel.isDeleted() && !channel.isNotificationMuted());
+                }
+            }
+        } else if (contact != null && alCustomizationSettings.isBlockOption()) {
             if (contact.isBlocked()) {
                 menu.findItem(R.id.userUnBlock).setVisible(true);
             } else {
                 menu.findItem(R.id.userBlock).setVisible(true);
             }
         }
+
+        menu.removeItem(R.id.menu_search);
         menu.removeItem(R.id.start_new);
-        menu.findItem(R.id.refresh).setVisible(true);
-        menu.findItem(R.id.deleteConversation).setVisible(true);
+
+        if (channel != null && channel.isDeleted()) {
+            menu.findItem(R.id.refresh).setVisible(false);
+            menu.findItem(R.id.deleteConversation).setVisible(false);
+        } else {
+            menu.findItem(R.id.refresh).setVisible(alCustomizationSettings.isRefreshOption());
+            menu.findItem(R.id.deleteConversation).setVisible(alCustomizationSettings.isDeleteOption());
+        }
+
         menu.removeItem(R.id.conversations);
     }
 
@@ -719,22 +1199,71 @@ public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
     public boolean onOptionsItemSelected(MenuItem item) {
         int id = item.getItemId();
         if (id == R.id.userBlock) {
-            userBlockDialog(true);
+            if (channel != null) {
+                if (Channel.GroupType.GROUPOFTWO.getValue().equals(channel.getType())) {
+                    String userId = ChannelService.getInstance(getActivity()).getGroupOfTwoReceiverUserId(channel.getKey());
+                    if (!TextUtils.isEmpty(userId)) {
+                        userBlockDialog(true, appContactService.getContactById(userId), true);
+                    }
+                }
+            } else if (contact != null) {
+                userBlockDialog(true, contact, false);
+            }
         }
         if (id == R.id.userUnBlock) {
-            userBlockDialog(false);
+            if (channel != null) {
+                if (Channel.GroupType.GROUPOFTWO.getValue().equals(channel.getType())) {
+                    String userId = ChannelService.getInstance(getActivity()).getGroupOfTwoReceiverUserId(channel.getKey());
+                    if (!TextUtils.isEmpty(userId)) {
+                        userBlockDialog(false, appContactService.getContactById(userId), true);
+                    }
+                }
+            } else if (contact != null) {
+                userBlockDialog(false, contact, false);
+            }
         }
         if (id == R.id.dial) {
-            ((ConversationActivity)getActivity()).processCall(contact,currentConversationId);
+            if (contact != null) {
+                if (contact.isBlocked()) {
+                    userBlockDialog(false, contact, false);
+                } else {
+                    ((ConversationActivity) getActivity()).processCall(contact, currentConversationId);
+                }
+            }
         }
         if (id == R.id.deleteConversation) {
             deleteConversationThread();
             return true;
         }
+
+        if (id == R.id.video_call) {
+            if (contact != null) {
+                if (contact.isBlocked()) {
+                    userBlockDialog(false, contact, false);
+                } else {
+                    try {
+                        String activityName = ApplozicSetting.getInstance(getActivity()).getActivityCallback(ApplozicSetting.RequestCode.VIDEO_CALL);
+                        Class activityToOpen = Class.forName(activityName);
+                        Intent intent = new Intent(getActivity(), activityToOpen);
+                        intent.putExtra("CONTACT_ID", contact.getUserId());
+                        startActivity(intent);
+                    } catch (Exception e) {
+                        e.printStackTrace();
+                    }
+                }
+
+            }
+        }
+        if (id == R.id.muteGroup) {
+            muteGroupChat();
+        }
+        if (id == R.id.unmuteGroup) {
+            umuteGroupChat();
+        }
         return false;
     }
 
-    public void loadConversation(final Contact contact,final Channel channel,final Integer conversationId) {
+    public void loadConversation(final Contact contact, final Channel channel, final Integer conversationId, final String searchString) {
         if (downloadConversation != null) {
             downloadConversation.cancel(true);
         }
@@ -742,20 +1271,44 @@ public void loadConversation(final Contact contact,final Channel channel,final I
         BroadcastService.currentUserId = contact != null ? contact.getContactIds() : String.valueOf(channel.getKey());
         typingStarted = false;
         onSelected = false;
+        messageMetaData = null;
+
+        if (userNotAbleToChatLayout != null) {
+            if (contact != null && contact.isDeleted()) {
+                userNotAbleToChatLayout.setVisibility(VISIBLE);
+                individualMessageSendLayout.setVisibility(View.GONE);
+            } else {
+                userNotAbleToChatLayout.setVisibility(View.GONE);
+                individualMessageSendLayout.setVisibility(VISIBLE);
+            }
+        }
 
+        if (contact != null && this.channel != null) {
+            ((AppCompatActivity) getActivity()).getSupportActionBar().setSubtitle("");
+            if (menu != null) {
+                menu.findItem(R.id.unmuteGroup).setVisible(false);
+                menu.findItem(R.id.muteGroup).setVisible(false);
+            }
+        }
+        if (replayRelativeLayout != null) {
+            replayRelativeLayout.setVisibility(View.GONE);
+        }
         /*
         filePath = null;*/
-        if (TextUtils.isEmpty(filePath)) {
+        if (TextUtils.isEmpty(filePath) && attachmentLayout != null) {
             attachmentLayout.setVisibility(View.GONE);
         }
 
+        if (!TextUtils.isEmpty(defaultText) && messageEditText != null) {
+            messageEditText.setText(defaultText);
+            defaultText = "";
+        }
+
         // infoBroadcast.setVisibility(channel != null ? View.VISIBLE : View.GONE);
-        individualMessageSendLayout.setVisibility(View.VISIBLE);
-        extendedSendingOptionLayout.setVisibility(View.VISIBLE);
+        extendedSendingOptionLayout.setVisibility(VISIBLE);
         setContact(contact);
         setChannel(channel);
 
-
         unregisterForContextMenu(listView);
         clearList();
         updateTitle();
@@ -768,9 +1321,11 @@ public void loadConversation(final Contact contact,final Channel channel,final I
         if (contact != null) {
             conversationAdapter = new DetailedConversationAdapter(getActivity(),
                     R.layout.mobicom_message_row_view, messageList, contact, messageIntentClass, emojiIconHandler);
+            conversationAdapter.setAlCustomizationSettings(alCustomizationSettings);
         } else if (channel != null) {
             conversationAdapter = new DetailedConversationAdapter(getActivity(),
                     R.layout.mobicom_message_row_view, messageList, channel, messageIntentClass, emojiIconHandler);
+            conversationAdapter.setAlCustomizationSettings(alCustomizationSettings);
         }
         listView.setTranscriptMode(ListView.TRANSCRIPT_MODE_ALWAYS_SCROLL);
         listView.setAdapter(conversationAdapter);
@@ -779,7 +1334,6 @@ public void loadConversation(final Contact contact,final Channel channel,final I
         processMobiTexterUserCheck();
 
         if (contact != null) {
-            processPhoneNumbers();
             if (!TextUtils.isEmpty(contact.getContactIds())) {
                 NotificationManager notificationManager =
                         (NotificationManager) getActivity().getSystemService(Context.NOTIFICATION_SERVICE);
@@ -793,7 +1347,7 @@ public void loadConversation(final Contact contact,final Channel channel,final I
             notificationManager.cancel(String.valueOf(channel.getKey()).hashCode());
         }
 
-        downloadConversation = new DownloadConversation(listView, true, 1, 0, 0, contact, channel,conversationId);
+        downloadConversation = new DownloadConversation(listView, true, 1, 0, 0, contact, channel, conversationId);
         AsyncTaskCompat.executeParallel(downloadConversation);
 
          /*  if (contact != null && support.isSupportNumber(contact.getFormattedContactNumber())) {
@@ -814,13 +1368,24 @@ public void loadConversation(final Contact contact,final Channel channel,final I
             getActivity().startService(intent);
 
         }
+
         if (channel != null) {
-            updateChannelSubTitle();
+            if (Channel.GroupType.GROUPOFTWO.getValue().equals(channel.getType())) {
+                String userId = ChannelService.getInstance(getActivity()).getGroupOfTwoReceiverUserId(channel.getKey());
+                if (!TextUtils.isEmpty(userId)) {
+                    Intent intent = new Intent(getActivity(), UserIntentService.class);
+                    intent.putExtra(UserIntentService.USER_ID, userId);
+                    getActivity().startService(intent);
+                }
+            } else {
+                updateChannelSubTitle();
+            }
         }
 
         InstructionUtil.showInstruction(getActivity(), R.string.instruction_go_back_to_recent_conversation_list, MobiComKitActivityInterface.INSTRUCTION_DELAY, BroadcastService.INTENT_ACTIONS.INSTRUCTION.toString());
     }
 
+
     public void updateLastSeenStatus() {
         if (this.getActivity() == null) {
             return;
@@ -829,34 +1394,54 @@ public void updateLastSeenStatus() {
             contact = appContactService.getContactById(contact.getContactIds());
         }
 
-        if (contact == null) {
+        if (contact != null) {
+            processUpdateLastSeenStatus(contact);
+        } else if (channel != null && Channel.GroupType.GROUPOFTWO.getValue().equals(channel.getType())) {
+            String userId = ChannelService.getInstance(getActivity()).getGroupOfTwoReceiverUserId(channel.getKey());
+            if (!TextUtils.isEmpty(userId)) {
+                Contact withUserContact = appContactService.getContactById(userId);
+                processUpdateLastSeenStatus(withUserContact);
+            }
+
+        }
+
+    }
+
+
+    protected void processUpdateLastSeenStatus(final Contact withUserContact) {
+        if (withUserContact == null) {
             return;
         }
 
-        if (contact.isBlocked() || contact.isBlockedBy()) {
-            ((AppCompatActivity)getActivity()).getSupportActionBar().setSubtitle("");
-            if(menu != null){
-                menu.findItem(R.id.userBlock).setVisible(!contact.isBlocked());
-                menu.findItem(R.id.userUnBlock).setVisible(contact.isBlocked());
-            }
+        if(userNotAbleToChatLayout != null && individualMessageSendLayout != null){
+            userNotAbleToChatLayout.setVisibility(withUserContact.isDeleted() ? VISIBLE : View.GONE);
+            individualMessageSendLayout.setVisibility(withUserContact.isDeleted() ? View.GONE : VISIBLE);
+            bottomlayoutTextView.setText(R.string.user_has_been_deleted_text);
+        }
+
+        if (menu != null) {
+            menu.findItem(R.id.userBlock).setVisible(alCustomizationSettings.isBlockOption() ? !withUserContact.isDeleted() && !withUserContact.isBlocked(): alCustomizationSettings.isBlockOption());
+            menu.findItem(R.id.userUnBlock).setVisible(alCustomizationSettings.isBlockOption() ? !withUserContact.isDeleted() && withUserContact.isBlocked() : alCustomizationSettings.isBlockOption());
+            menu.findItem(R.id.refresh).setVisible(alCustomizationSettings.isRefreshOption() ? !withUserContact.isDeleted() : alCustomizationSettings.isRefreshOption());
+
+        }
+
+        if (withUserContact.isBlocked() || withUserContact.isBlockedBy() || withUserContact.isDeleted()) {
+            ((AppCompatActivity) getActivity()).getSupportActionBar().setSubtitle("");
             return;
-        }else {
-            if(menu != null){
-                menu.findItem(R.id.userBlock).setVisible(!contact.isBlocked());
-                menu.findItem(R.id.userUnBlock).setVisible(contact.isBlocked());
-            }
         }
+
         this.getActivity().runOnUiThread(new Runnable() {
             @Override
             public void run() {
-                if (contact != null && channel == null) {
-                    if (contact.isConnected()) {
+                if (withUserContact != null) {
+                    if (withUserContact.isConnected()) {
                         typingStarted = false;
-                        ((AppCompatActivity)getActivity()).getSupportActionBar().setSubtitle(getActivity().getString(R.string.user_online));
-                    } else if (contact.getLastSeenAt() != 0) {
-                        ((AppCompatActivity)getActivity()).getSupportActionBar().setSubtitle(getActivity().getString(R.string.subtitle_last_seen_at_time) + " " + DateUtils.getDateAndTimeForLastSeen(contact.getLastSeenAt()));
-                    }else {
-                        ((AppCompatActivity)getActivity()).getSupportActionBar().setSubtitle("");
+                        ((AppCompatActivity) getActivity()).getSupportActionBar().setSubtitle(getActivity().getString(R.string.user_online));
+                    } else if (withUserContact.getLastSeenAt() != 0) {
+                        ((AppCompatActivity) getActivity()).getSupportActionBar().setSubtitle(getActivity().getString(R.string.subtitle_last_seen_at_time) + " " + DateUtils.getDateAndTimeForLastSeen(withUserContact.getLastSeenAt()));
+                    } else {
+                        ((AppCompatActivity) getActivity()).getSupportActionBar().setSubtitle("");
                     }
                 }
             }
@@ -865,39 +1450,61 @@ public void run() {
     }
 
     public void updateChannelSubTitle() {
-        channelUserMapperList  = ChannelService.getInstance(getActivity()).getListOfUsersFromChannelUserMapper(channel.getKey());
+        channelUserMapperList = ChannelService.getInstance(getActivity()).getListOfUsersFromChannelUserMapper(channel.getKey());
         if (channelUserMapperList != null && channelUserMapperList.size() > 0) {
-            StringBuffer stringBuffer = new StringBuffer();
-            Contact contactDisplayName;
-            String youString = null;
-            int i = 0;
-            for (ChannelUserMapper channelUserMapper : channelUserMapperList) {
-                i++;
-                if (i > 20)
-                    break;
-                contactDisplayName = appContactService.getContactById(channelUserMapper.getUserKey());
-                if (!TextUtils.isEmpty(channelUserMapper.getUserKey())) {
-                    if(MobiComUserPreference.getInstance(getActivity()).getUserId().equals(channelUserMapper.getUserKey())){
-                        youString = getString(R.string.you_string);
-                    }else {
-                        stringBuffer.append(contactDisplayName.getDisplayName()).append(",");
+            if (Channel.GroupType.GROUPOFTWO.getValue().equals(channel.getType())) {
+                String userId = ChannelService.getInstance(getActivity()).getGroupOfTwoReceiverUserId(channel.getKey());
+                if (!TextUtils.isEmpty(userId)) {
+                    Contact withUserContact = appContactService.getContactById(userId);
+                    if (withUserContact != null) {
+                        if (withUserContact.isBlocked()) {
+                            ((AppCompatActivity) getActivity()).getSupportActionBar().setSubtitle("");
+                        } else {
+                            if (withUserContact.isConnected()) {
+                                ((AppCompatActivity) getActivity()).getSupportActionBar().setSubtitle(getActivity().getString(R.string.user_online));
+                            } else if (withUserContact.getLastSeenAt() != 0) {
+                                ((AppCompatActivity) getActivity()).getSupportActionBar().setSubtitle(getActivity().getString(R.string.subtitle_last_seen_at_time) + " " + DateUtils.getDateAndTimeForLastSeen(withUserContact.getLastSeenAt()));
+                            } else {
+                                ((AppCompatActivity) getActivity()).getSupportActionBar().setSubtitle("");
+                            }
+                        }
                     }
                 }
-            }
-            if (!TextUtils.isEmpty(stringBuffer)) {
-                if (channelUserMapperList.size() <= 20) {
-                    if(!TextUtils.isEmpty(youString)){
-                        stringBuffer.append(youString).append(",");
+
+            } else {
+                StringBuffer stringBuffer = new StringBuffer();
+                Contact contactDisplayName;
+                String youString = null;
+                int i = 0;
+                for (ChannelUserMapper channelUserMapper : channelUserMapperList) {
+                    i++;
+                    if (i > 20)
+                        break;
+                    contactDisplayName = appContactService.getContactById(channelUserMapper.getUserKey());
+                    if (!TextUtils.isEmpty(channelUserMapper.getUserKey())) {
+                        if (MobiComUserPreference.getInstance(getActivity()).getUserId().equals(channelUserMapper.getUserKey())) {
+                            youString = getString(R.string.you_string);
+                        } else {
+                            stringBuffer.append(contactDisplayName.getDisplayName()).append(",");
+                        }
+                    }
+                }
+                if (!TextUtils.isEmpty(stringBuffer)) {
+                    if (channelUserMapperList.size() <= 20) {
+                        if (!TextUtils.isEmpty(youString)) {
+                            stringBuffer.append(youString).append(",");
+                        }
+                        int lastIndex = stringBuffer.lastIndexOf(",");
+                        String userIds = stringBuffer.replace(lastIndex, lastIndex + 1, "").toString();
+                        ((AppCompatActivity) getActivity()).getSupportActionBar().setSubtitle(userIds);
+                    } else {
+                        ((AppCompatActivity) getActivity()).getSupportActionBar().setSubtitle(stringBuffer.toString());
                     }
-                    int lastIndex = stringBuffer.lastIndexOf(",");
-                    String userIds = stringBuffer.replace(lastIndex, lastIndex + 1, "").toString();
-                    ((AppCompatActivity)getActivity()).getSupportActionBar().setSubtitle(userIds);
                 } else {
-                    ((AppCompatActivity)getActivity()).getSupportActionBar().setSubtitle(stringBuffer.toString());
+                    ((AppCompatActivity) getActivity()).getSupportActionBar().setSubtitle(youString);
                 }
-            }else {
-                ((AppCompatActivity)getActivity()).getSupportActionBar().setSubtitle(youString);
             }
+
         }
     }
 
@@ -919,7 +1526,7 @@ protected void setChannel(Channel channel) {
 
     public boolean isMsgForConversation(Message message) {
 
-        if (BroadcastService.isContextBasedChatEnabled() && message.getConversationId() != null ) {
+        if (BroadcastService.isContextBasedChatEnabled() && message.getConversationId() != null) {
             return isMessageForCurrentConversation(message) && compareConversationId(message);
         }
         return isMessageForCurrentConversation(message);
@@ -958,7 +1565,7 @@ public void run() {
 
                     if (view != null) {
                         final LinearLayout attachmentDownloadLayout = (LinearLayout) view.findViewById(R.id.attachment_download_layout);
-                        attachmentDownloadLayout.setVisibility(View.VISIBLE);
+                        attachmentDownloadLayout.setVisibility(VISIBLE);
                     }
 
                 }
@@ -984,8 +1591,14 @@ public void run() {
                         if ((message.getStatus() == Message.Status.DELIVERED_AND_READ.getValue()) || message.isTempDateType() || message.isCustom() || !message.isTypeOutbox() || message.isChannelCustomMessage()) {
                             continue;
                         }
+                        if (messageList.get(index) != null) {
+                            messageList.get(index).setDelivered(true);
+                        }
                         message.setDelivered(true);
                         if (markRead) {
+                            if (messageList.get(index) != null) {
+                                messageList.get(index).setStatus(Message.Status.DELIVERED_AND_READ.getValue());
+                            }
                             message.setStatus(Message.Status.DELIVERED_AND_READ.getValue());
                         }
                         View view = listView.getChildAt(index -
@@ -998,7 +1611,7 @@ public void run() {
                         }
                     }
                 } catch (Exception ex) {
-                    Log.i(TAG, "Exception while updating delivery status in UI.");
+                    Utils.printLog(getContext(), TAG, "Exception while updating delivery status in UI.");
                 }
             }
         });
@@ -1032,7 +1645,7 @@ public void run() {
                             }
                             createdAtTime.setCompoundDrawablesWithIntrinsicBounds(null, null, statusIcon, null);
                         }
-                    } else {
+                    } else if (!message.isVideoNotificationMessage() && !message.isHidden()) {
                         messageList.add(message);
                         listView.smoothScrollToPosition(messageList.size());
                         listView.setSelection(messageList.size());
@@ -1040,47 +1653,48 @@ public void run() {
                         conversationAdapter.notifyDataSetChanged();
                     }
                 } catch (Exception ex) {
-                    Log.i(TAG, "Exception while updating delivery status in UI.");
+                    Utils.printLog(getContext(), TAG, "Exception while updating delivery status in UI.");
                 }
             }
         });
     }
 
     public void loadFile(Uri uri) {
-        if (uri == null) {
+        loadFile(uri, null);
+    }
+
+    public void loadFile(Uri uri, File file) {
+        if (uri == null || file == null) {
             Toast.makeText(getActivity(), R.string.file_not_selected, Toast.LENGTH_LONG).show();
             return;
         }
-        this.filePath = FilePathFinder.getPath(getActivity(), uri);
+        sendButton.setVisibility(VISIBLE);
+        sendButton.setImageResource(R.drawable.mobicom_ic_action_send);
+        errorEditTextView.setVisibility(View.GONE);
+        filePath = Uri.parse(file.getAbsolutePath()).toString();
         if (TextUtils.isEmpty(filePath)) {
-            Log.i(TAG, "Error while fetching filePath");
+            Utils.printLog(getContext(), TAG, "Error while fetching filePath");
             attachmentLayout.setVisibility(View.GONE);
             Toast.makeText(getActivity(), R.string.info_file_attachment_error, Toast.LENGTH_LONG).show();
             return;
         }
-
+        String mimeType = getActivity().getContentResolver().getType(uri);
         Cursor returnCursor =
                 getActivity().getContentResolver().query(uri, null, null, null, null);
         if (returnCursor != null) {
             int sizeIndex = returnCursor.getColumnIndex(OpenableColumns.SIZE);
             returnCursor.moveToFirst();
             Long fileSize = returnCursor.getLong(sizeIndex);
-            int maxFileSize = ApplozicSetting.getInstance(getActivity()).getMaxAttachmentSizeAllowed() * 1024 * 1024;
+            int maxFileSize = alCustomizationSettings.getMaxAttachmentSizeAllowed() * 1024 * 1024;
             if (fileSize > maxFileSize) {
                 Toast.makeText(getActivity(), R.string.info_attachment_max_allowed_file_size, Toast.LENGTH_LONG).show();
                 return;
             }
-
             attachedFile.setText(returnCursor.getString(returnCursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)));
             returnCursor.close();
         }
-
-        attachmentLayout.setVisibility(View.VISIBLE);
-
-        String mimeType = FileUtils.getMimeType(getActivity(), uri);
-
+        attachmentLayout.setVisibility(VISIBLE);
         if (mimeType != null && (mimeType.startsWith("image") || mimeType.startsWith("video"))) {
-
             attachedFile.setVisibility(View.GONE);
             int reqWidth = mediaContainer.getWidth();
             int reqHeight = mediaContainer.getHeight();
@@ -1090,10 +1704,10 @@ public void loadFile(Uri uri) {
                 reqHeight = displaymetrics.heightPixels;
                 reqWidth = displaymetrics.widthPixels;
             }
-            previewThumbnail = FileUtils.getPreview(filePath, reqWidth, reqHeight, ApplozicSetting.getInstance(getActivity()).isImageCompressionEnabled(), mimeType);
+            previewThumbnail = FileUtils.getPreview(filePath, reqWidth, reqHeight, alCustomizationSettings.isImageCompression(), mimeType);
             mediaContainer.setImageBitmap(previewThumbnail);
         } else {
-            attachedFile.setVisibility(View.VISIBLE);
+            attachedFile.setVisibility(VISIBLE);
             mediaContainer.setImageBitmap(null);
         }
     }
@@ -1143,7 +1757,7 @@ public void onClick(DialogInterface dialog, int id) {
                 sendType.setSelection(0);
             }
         });
-        builder.setNegativeButton(android.R.string.cancel, new DialogInterface.OnClickListener() {
+        builder.setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() {
             public void onClick(DialogInterface dialog, int id) {
                 sendType.setSelection(0);
             }
@@ -1153,23 +1767,60 @@ public void onClick(DialogInterface dialog, int id) {
         return dialog;
     }
 
+
     public String getNameForInviteDialog() {
         if (contact != null) {
             return contact.getDisplayName();
         } else if (channel != null) {
-            return ChannelUtils.getChannelTitleName(channel, MobiComUserPreference.getInstance(getActivity()).getUserId());
+            if (Channel.GroupType.GROUPOFTWO.getValue().equals(channel.getType())) {
+                String userId = ChannelService.getInstance(getActivity()).getGroupOfTwoReceiverUserId(channel.getKey());
+                if (!TextUtils.isEmpty(userId)) {
+                    Contact withUserContact = appContactService.getContactById(userId);
+                    return withUserContact.getDisplayName();
+                }
+            } else {
+                return ChannelUtils.getChannelTitleName(channel, MobiComUserPreference.getInstance(getActivity()).getUserId());
+            }
         }
         return "";
     }
 
-    public void forwardMessage(Message messageToForward, Contact contact,Channel channel) {
+    public void onClickOnMessageReply(Message message) {
+        if (message != null) {
+            if (listView != null) {
+                int height = listView.getHeight();
+                int itemHeight = listView.getChildAt(0).getHeight();
+                int index = messageList.indexOf(message);
+                if (index != -1) {
+                    listView.requestFocusFromTouch();
+                    ((ListView) listView).setSelectionFromTop(index + 1, height / 2 - itemHeight / 2);
+                    listView.postDelayed(new Runnable() {
+                        @Override
+                        public void run() {
+                            if (listView != null) {
+                                try {
+                                    if (listView.isFocused()) {
+                                        listView.clearFocus();
+                                    }
+                                } catch (Exception e) {
+                                }
+                            }
+                        }
+                    }, 800);
+                }
+            }
+
+        }
+    }
+
+    public void forwardMessage(Message messageToForward, Contact contact, Channel channel) {
         this.contact = contact;
         this.channel = channel;
         if (messageToForward.isAttachmentDownloaded()) {
             filePath = messageToForward.getFilePaths().get(0);
         }
         this.messageToForward = messageToForward;
-        loadConversation(contact,channel,currentConversationId);
+        loadConversation(contact, channel, currentConversationId, null);
 
     }
 
@@ -1178,17 +1829,19 @@ private void sendForwardMessage(Message messageToForward) {
         MobiComUserPreference userPreferences = MobiComUserPreference.getInstance(getActivity());
 
         if (channel != null) {
-            if(!ChannelService.getInstance(getContext()).processIsUserPresentInChannel(channel.getKey())){
+            if (!ChannelService.getInstance(getContext()).processIsUserPresentInChannel(channel.getKey())) {
                 return;
             }
             messageToForward.setGroupId(channel.getKey());
+            messageToForward.setClientGroupId(null);
             messageToForward.setContactIds(null);
             messageToForward.setTo(null);
         } else {
-            if(contact.isBlocked()){
+            if (contact.isBlocked()) {
                 return;
             }
             messageToForward.setGroupId(null);
+            messageToForward.setClientGroupId(null);
             messageToForward.setTo(contact.getContactIds());
             messageToForward.setContactIds(contact.getContactIds());
         }
@@ -1199,14 +1852,19 @@ private void sendForwardMessage(Message messageToForward) {
         messageToForward.setRead(Boolean.TRUE);
         messageToForward.setStoreOnDevice(Boolean.TRUE);
         messageToForward.setCreatedAtTime(System.currentTimeMillis() + userPreferences.getDeviceTimeOffset());
-        if(currentConversationId != null && currentConversationId != 0){
+        if (currentConversationId != null && currentConversationId != 0) {
             messageToForward.setConversationId(currentConversationId);
         }
+        Map<String, String> metaDataMapForward = messageToForward.getMetadata();
+        if (metaDataMapForward != null && !metaDataMapForward.isEmpty() && metaDataMapForward.get(Message.MetaDataType.AL_REPLY.getValue()) != null) {
+            messageToForward.setMetadata(null);
+        }
         messageToForward.setSendToDevice(Boolean.FALSE);
         messageToForward.setType(sendType.getSelectedItemId() == 1 ? Message.MessageType.MT_OUTBOX.getValue() : Message.MessageType.OUTBOX.getValue());
         messageToForward.setTimeToLive(getTimeToLive());
         messageToForward.setSentToServer(false);
         messageToForward.setStatus(Message.Status.READ.getValue());
+
         if (!TextUtils.isEmpty(filePath)) {
             List<String> filePaths = new ArrayList<String>();
             filePaths.add(filePath);
@@ -1221,13 +1879,13 @@ private void sendForwardMessage(Message messageToForward) {
     }
 
 
-    public void sendMessage(String message, Map<String,String> messageMetaData, FileMeta fileMetas, String fileMetaKeyStrings, short messageContentType) {
+    public void sendMessage(String message, Map<String, String> messageMetaData, FileMeta fileMetas, String fileMetaKeyStrings, short messageContentType) {
         MobiComUserPreference userPreferences = MobiComUserPreference.getInstance(getActivity());
         Message messageToSend = new Message();
 
         if (channel != null) {
             messageToSend.setGroupId(channel.getKey());
-            if (!TextUtils.isEmpty(channel.getClientGroupId())){
+            if (!TextUtils.isEmpty(channel.getClientGroupId())) {
                 messageToSend.setClientGroupId(channel.getClientGroupId());
             }
             /*   List<String> contactIds = new ArrayList<String>();
@@ -1244,14 +1902,12 @@ public void sendMessage(String message, Map<String,String> messageMetaData, File
             messageToSend.setTo(contact.getContactIds());
             messageToSend.setContactIds(contact.getContactIds());
         }
-
-        messageToSend.setContentType(messageContentType);
         messageToSend.setRead(Boolean.TRUE);
         messageToSend.setStoreOnDevice(Boolean.TRUE);
         if (messageToSend.getCreatedAtTime() == null) {
             messageToSend.setCreatedAtTime(System.currentTimeMillis() + userPreferences.getDeviceTimeOffset());
         }
-        if(currentConversationId != null && currentConversationId != 0){
+        if (currentConversationId != null && currentConversationId != 0) {
             messageToSend.setConversationId(currentConversationId);
         }
         messageToSend.setSendToDevice(Boolean.FALSE);
@@ -1265,20 +1921,42 @@ public void sendMessage(String message, Map<String,String> messageMetaData, File
             List<String> filePaths = new ArrayList<String>();
             filePaths.add(filePath);
             messageToSend.setFilePaths(filePaths);
+            if (messageContentType == Message.ContentType.AUDIO_MSG.getValue() || messageContentType == Message.ContentType.CONTACT_MSG.getValue() || messageContentType == Message.ContentType.VIDEO_MSG.getValue()) {
+                messageToSend.setContentType(messageContentType);
+            } else {
+                messageToSend.setContentType(Message.ContentType.ATTACHMENT.getValue());
+            }
+        } else {
+            messageToSend.setContentType(messageContentType);
         }
         messageToSend.setFileMetaKeyStrings(fileMetaKeyStrings);
         messageToSend.setFileMetas(fileMetas);
-        messageToSend.setMetadata(messageMetaData);
+        if (!TextUtils.isEmpty(ApplozicClient.getInstance(getActivity()).getMessageMetaData())) {
+            Type mapType = new TypeToken<Map<String, String>>() {
+            }.getType();
+            Map<String, String> messageMetaDataMap = null;
+            try {
+                messageMetaDataMap = new Gson().fromJson(ApplozicClient.getInstance(getActivity()).getMessageMetaData(), mapType);
+                messageToSend.setMetadata(messageMetaDataMap);
+            } catch (Exception e) {
+                e.printStackTrace();
+            }
+        } else {
+            messageToSend.setMetadata(this.messageMetaData);
+        }
 
         conversationService.sendMessage(messageToSend, messageIntentClass);
-
+        if (replayRelativeLayout != null) {
+            replayRelativeLayout.setVisibility(View.GONE);
+        }
         if (selfDestructMessageSpinner != null) {
             selfDestructMessageSpinner.setSelection(0);
         }
         attachmentLayout.setVisibility(View.GONE);
-        if(channel != null &&  channel.getType() != null && Channel.GroupType.BROADCAST_ONE_BY_ONE.getValue().equals(channel.getType())){
-            sendBroadcastMessage(message,filePath);
+        if (channel != null && channel.getType() != null && Channel.GroupType.BROADCAST_ONE_BY_ONE.getValue().equals(channel.getType())) {
+            sendBroadcastMessage(message, filePath);
         }
+        this.messageMetaData = null;
         filePath = null;
     }
 
@@ -1316,7 +1994,7 @@ public void run() {
 
     }
 
-    public void sendBroadcastMessage(String message,String path) {
+    public void sendBroadcastMessage(String message, String path) {
         MobiComUserPreference userPreferences = MobiComUserPreference.getInstance(getActivity());
         if (channelUserMapperList != null && channelUserMapperList.size() > 0) {
             for (ChannelUserMapper channelUserMapper : channelUserMapperList) {
@@ -1363,20 +2041,25 @@ private Integer getTimeToLive() {
     }
 
     public void sendMessage(String message) {
-        sendMessage(message, null,null, null, Message.ContentType.DEFAULT.getValue());
+        sendMessage(message, null, null, null, Message.ContentType.DEFAULT.getValue());
     }
 
     public void sendMessage(short messageContentType, String filePath) {
         this.filePath = filePath;
-        sendMessage("",messageContentType);
+        sendMessage("", messageContentType);
+    }
+
+    public void sendMessage(String message, short messageContentType, String filePath) {
+        this.filePath = filePath;
+        sendMessage(message, null, null, null, messageContentType);
     }
 
     public void sendMessage(String message, short messageContentType) {
-        sendMessage(message,null, null, null, messageContentType);
+        sendMessage(message, null, null, null, messageContentType);
     }
 
-    public void sendMessage(String message,Map<String,String> messageMetaData, short messageContentType) {
-        sendMessage(message,messageMetaData ,null, null, messageContentType);
+    public void sendMessage(String message, Map<String, String> messageMetaData, short messageContentType) {
+        sendMessage(message, messageMetaData, null, null, messageContentType);
     }
 
     public void updateMessageKeyString(final Message message) {
@@ -1391,12 +2074,44 @@ public void run() {
                     messageListItem.setCreatedAtTime(message.getSentMessageTimeAtServer());
                     messageListItem.setFileMetaKeyStrings(message.getFileMetaKeyStrings());
                     messageListItem.setFileMetas(message.getFileMetas());
+                    if (messageList.get(index) != null) {
+                        messageList.get(index).setKeyString(message.getKeyString());
+                        messageList.get(index).setSentToServer(true);
+                        messageList.get(index).setCreatedAtTime(message.getSentMessageTimeAtServer());
+                        messageList.get(index).setFileMetaKeyStrings(message.getFileMetaKeyStrings());
+                        messageList.get(index).setFileMetas(message.getFileMetas());
+                    }
                     View view = listView.getChildAt(index - listView.getFirstVisiblePosition() + 1);
                     if (view != null) {
                         ProgressBar mediaUploadProgressBarIndividualMessage = (ProgressBar) view.findViewById(R.id.media_upload_progress_bar);
+                        RelativeLayout downloadInProgressLayout = (RelativeLayout) view.findViewById(R.id.applozic_doc_download_progress_rl);
                         if (mediaUploadProgressBarIndividualMessage != null) {
                             mediaUploadProgressBarIndividualMessage.setVisibility(View.GONE);
                         }
+                        if (downloadInProgressLayout != null) {
+                            downloadInProgressLayout.setVisibility(View.GONE);
+                        }
+                        if (message.getFileMetas() != null && !"image".contains(message.getFileMetas().getContentType()) && !"video".contains(message.getFileMetas().getContentType())) {
+                            RelativeLayout applozicDocRelativeLayout = (RelativeLayout) view.findViewById(R.id.applozic_doc_downloaded);
+                            ImageView imageViewDoc = (ImageView) applozicDocRelativeLayout.findViewById(R.id.doc_icon);
+                            if (message.getFileMetas() != null) {
+                                if (message.getFileMetas().getContentType().contains("audio")) {
+                                    imageViewDoc.setImageResource(R.drawable.ic_play_circle_outline);
+                                } else {
+                                    imageViewDoc.setImageResource(R.drawable.ic_documentreceive);
+                                }
+                                applozicDocRelativeLayout.setVisibility(VISIBLE);
+                            } else if (message.getFilePaths() != null) {
+                                String filePath = message.getFilePaths().get(0);
+                                final String mimeType = FileUtils.getMimeType(filePath);
+                                if (mimeType.contains("audio")) {
+                                    imageViewDoc.setImageResource(R.drawable.ic_play_circle_outline);
+                                } else {
+                                    imageViewDoc.setImageResource(R.drawable.ic_documentreceive);
+                                }
+                                applozicDocRelativeLayout.setVisibility(VISIBLE);
+                            }
+                        }
                         TextView createdAtTime = (TextView) view.findViewById(R.id.createdAtTime);
                         if (createdAtTime != null && messageListItem.getKeyString() != null && messageListItem.isTypeOutbox() && !messageListItem.isCall() && !messageListItem.getDelivered() && !messageListItem.isCustom() && !messageListItem.isChannelCustomMessage() && messageListItem.getScheduledAt() == null) {
                             createdAtTime.setCompoundDrawablesWithIntrinsicBounds(null, null, support.isSupportNumber(getCurrentUserId()) ? deliveredIcon : sentIcon, null);
@@ -1406,7 +2121,6 @@ public void run() {
             }
         });
     }
-
     public void updateDownloadStatus(final Message message) {
         this.getActivity().runOnUiThread(new Runnable() {
             @Override
@@ -1417,34 +2131,65 @@ public void run() {
                         Message smListItem = messageList.get(index);
                         smListItem.setKeyString(message.getKeyString());
                         smListItem.setFileMetaKeyStrings(message.getFileMetaKeyStrings());
+                        if (messageList.get(index) != null) {
+                            messageList.get(index).setKeyString(message.getKeyString());
+                            messageList.get(index).setFileMetaKeyStrings(message.getFileMetaKeyStrings());
+                        }
                         View view = listView.getChildAt(index - listView.getFirstVisiblePosition() + 1);
                         if (view != null) {
                             final RelativeLayout attachmentDownloadProgressLayout = (RelativeLayout) view.findViewById(R.id.attachment_download_progress_layout);
                             final AttachmentView attachmentView = (AttachmentView) view.findViewById(R.id.main_attachment_view);
                             final ImageView preview = (ImageView) view.findViewById(R.id.preview);
+                            TextView audioDurationTextView = (TextView) view.findViewById(R.id.audio_duration_textView);
                             final ImageView videoIcon = (ImageView) view.findViewById(R.id.video_icon);
+                            String audioDuration;
                             if (message.getFileMetas() != null && message.getFileMetas().getContentType().contains("image")) {
-                                attachmentView.setVisibility(View.VISIBLE);
+                                attachmentView.setVisibility(VISIBLE);
                                 preview.setVisibility(View.GONE);
                                 attachmentView.setMessage(smListItem);
                                 attachmentDownloadProgressLayout.setVisibility(View.GONE);
-                            }else if (message.getFileMetas() != null && message.getFileMetas().getContentType().contains("video")) {
+                            } else if (message.getFileMetas() != null && message.getFileMetas().getContentType().contains("video")) {
                                 FileClientService fileClientService = new FileClientService(getContext());
                                 attachedFile.setVisibility(View.GONE);
-                                preview.setVisibility(View.VISIBLE);
-                                videoIcon.setVisibility(View.VISIBLE);
+                                preview.setVisibility(VISIBLE);
+                                videoIcon.setVisibility(VISIBLE);
                                 preview.setImageBitmap(fileClientService.createAndSaveVideoThumbnail(message.getFilePaths().get(0)));
-                            } else if (message.getFileMetas() != null && !message.getFileMetas().getContentType().contains("image") && !message.getFileMetas().getContentType().contains("video")) {
-                                attachmentView.setMessage(smListItem);
-                                attachmentDownloadProgressLayout.setVisibility(View.GONE);
-                                attachmentView.setVisibility(View.GONE);
-                                preview.setVisibility(View.GONE);
+                            } else if (message.getFileMetas() != null) {
+                                //Hide Attachment View...
+                                RelativeLayout applozicDocRelativeLayout = (RelativeLayout) view.findViewById(R.id.applozic_doc_downloaded);
+                                ImageView imageViewDoc = (ImageView) applozicDocRelativeLayout.findViewById(R.id.doc_icon);
+                                if (message.getFileMetas() != null && message.getFilePaths() == null) {
+                                    if (message.getFileMetas().getContentType().contains("audio")) {
+                                        imageViewDoc.setImageResource(R.drawable.ic_play_circle_outline);
+                                    } else {
+                                        imageViewDoc.setImageResource(R.drawable.ic_documentreceive);
+                                    }
+                                    applozicDocRelativeLayout.setVisibility(VISIBLE);
+                                } else if (message.getFilePaths() != null) {
+                                    String filePath = message.getFilePaths().get(0);
+                                    final String mimeType = FileUtils.getMimeType(filePath);
+                                    if (mimeType.contains("audio")) {
+                                        if (message.isAttachmentDownloaded()) {
+                                            audioDuration = ApplozicAudioManager.getInstance(getContext()).refreshAudioDuration(filePath);
+                                            audioDurationTextView.setVisibility(View.VISIBLE);
+                                            audioDurationTextView.setText(audioDuration);
+                                        } else {
+                                            audioDurationTextView.setVisibility(View.VISIBLE);
+                                            audioDurationTextView.setText("00:00");
+                                        }
+                                        imageViewDoc.setImageResource(R.drawable.ic_play_circle_outline);
+                                    } else {
+                                        imageViewDoc.setImageResource(R.drawable.ic_documentreceive);
+                                    }
+                                    applozicDocRelativeLayout.setVisibility(VISIBLE);
+                                }
+                                view.findViewById(R.id.applozic_doc_download_progress_rl).setVisibility(View.GONE);
                             }
                         }
 
                     }
                 } catch (Exception ex) {
-                    Log.i(TAG, "Exception while updating download status: " + ex.getMessage());
+                    Utils.printLog(getContext(), TAG, "Exception while updating download status: " + ex.getMessage());
                 }
             }
         });
@@ -1471,7 +2216,14 @@ public void run() {
                     if (channel != null) {
                         if (!MobiComUserPreference.getInstance(getActivity()).getUserId().equals(typingUserId)) {
                             Contact displayNameContact = appContactService.getContactById(typingUserId);
-                            ((AppCompatActivity) getActivity()).getSupportActionBar().setSubtitle(displayNameContact.getDisplayName() +" "+ getActivity().getString(R.string.is_typing));
+                            if (displayNameContact.isBlocked() || displayNameContact.isBlockedBy()) {
+                                return;
+                            }
+                            if (Channel.GroupType.GROUPOFTWO.getValue().equals(channel.getType())) {
+                                ((AppCompatActivity) getActivity()).getSupportActionBar().setSubtitle(getActivity().getString(R.string.is_typing));
+                            } else {
+                                ((AppCompatActivity) getActivity()).getSupportActionBar().setSubtitle(displayNameContact.getDisplayName() + " " + getActivity().getString(R.string.is_typing));
+                            }
                         }
                     } else {
                         ((AppCompatActivity) getActivity()).getSupportActionBar().setSubtitle(getActivity().getString(R.string.is_typing));
@@ -1479,6 +2231,10 @@ public void run() {
                 } else {
                     if (channel != null) {
                         if (!MobiComUserPreference.getInstance(getActivity()).getUserId().equals(typingUserId)) {
+                            Contact displayNameContact = appContactService.getContactById(typingUserId);
+                            if (displayNameContact.isBlocked() || displayNameContact.isBlockedBy()) {
+                                return;
+                            }
                             updateChannelSubTitle();
                         }
                     } else {
@@ -1508,12 +2264,12 @@ public LayoutInflater getLayoutInflater(Bundle savedInstanceState) {
     @Override
     public void onClick(View v) {
         if (v.getId() == R.id.emoticons_btn) {
-            if (emoticonsFrameLayout.getVisibility() == View.VISIBLE) {
+            if (emoticonsFrameLayout.getVisibility() == VISIBLE) {
                 emoticonsFrameLayout.setVisibility(View.GONE);
                 Utils.toggleSoftKeyBoard(getActivity(), false);
             } else {
                 Utils.toggleSoftKeyBoard(getActivity(), true);
-                emoticonsFrameLayout.setVisibility(View.VISIBLE);
+                emoticonsFrameLayout.setVisibility(VISIBLE);
             }
         }
     }
@@ -1521,6 +2277,14 @@ public void onClick(View v) {
     @Override
     public void onPause() {
         super.onPause();
+        if (longPress) {
+            count = 0;
+            t.cancel();
+            longPress = false;
+            applozicAudioRecordManager.cancelAudio();
+            audioRecordFrameLayout.setVisibility(View.GONE);
+            mainEditTextLinearLayout.setVisibility(VISIBLE);
+        }
         BroadcastService.currentUserId = null;
         BroadcastService.currentConversationId = null;
         if (typingStarted) {
@@ -1531,34 +2295,51 @@ public void onPause() {
             getActivity().startService(intent);
             typingStarted = false;
         }
-        Intent intent =  new Intent(getActivity(),ApplozicMqttIntentService.class);
-        intent.putExtra(ApplozicMqttIntentService.CHANNEL,channel);
-        intent.putExtra(ApplozicMqttIntentService.UN_SUBSCRIBE_TO_TYPING,true);
+        Intent intent = new Intent(getActivity(), ApplozicMqttIntentService.class);
+        intent.putExtra(ApplozicMqttIntentService.CHANNEL, channel);
+        intent.putExtra(ApplozicMqttIntentService.UN_SUBSCRIBE_TO_TYPING, true);
         getActivity().startService(intent);
-        if(conversationAdapter != null){
+        if (conversationAdapter != null) {
             conversationAdapter.contactImageLoader.setPauseWork(false);
         }
     }
 
     public void updateTitle() {
-        String title = null;
+        StringBuffer stringBufferTitle = new StringBuffer();
         if (contact != null) {
-            title = contact.getDisplayName();
+            stringBufferTitle.append(contact.getDisplayName());
         } else if (channel != null) {
-            title = ChannelUtils.getChannelTitleName(channel, MobiComUserPreference.getInstance(getActivity()).getUserId());
+            if (Channel.GroupType.GROUPOFTWO.getValue().equals(channel.getType())) {
+                String userId = ChannelService.getInstance(getActivity()).getGroupOfTwoReceiverUserId(channel.getKey());
+                if (!TextUtils.isEmpty(userId)) {
+                    Contact withUserContact = appContactService.getContactById(userId);
+                    stringBufferTitle.append(withUserContact.getDisplayName());
+                }
+            } else {
+                stringBufferTitle.append(ChannelUtils.getChannelTitleName(channel, MobiComUserPreference.getInstance(getActivity()).getUserId()));
+            }
         }
-        if (title != null) {
-            ((AppCompatActivity)getActivity()).getSupportActionBar().setTitle(title);
+        if (stringBufferTitle != null) {
+            ((AppCompatActivity) getActivity()).getSupportActionBar().setTitle(stringBufferTitle.toString());
         }
 
     }
 
-    public void loadConversation(Channel channel,Integer conversationId) {
-        loadConversation(null, channel,conversationId);
+    public void loadConversation(Channel channel, Integer conversationId) {
+        loadConversation(null, channel, conversationId, null);
+    }
+
+    public void loadConversation(Contact contact, Integer conversationId) {
+        loadConversation(contact, null, conversationId, null);
+    }
+
+    //With search
+    public void loadConversation(Contact contact, Integer conversationId, String searchString) {
+        loadConversation(contact, null, conversationId, searchString);
     }
 
-    public void loadConversation(Contact contact,Integer conversationId) {
-        loadConversation(contact, null,conversationId);
+    public void loadConversation(Channel channel, Integer conversationId, String searchString) {
+        loadConversation(null, channel, conversationId, searchString);
     }
 
     public void deleteConversationThread() {
@@ -1566,10 +2347,10 @@ public void deleteConversationThread() {
                 setPositiveButton(R.string.delete_conversation, new DialogInterface.OnClickListener() {
                     @Override
                     public void onClick(DialogInterface dialogInterface, int i) {
-                        new DeleteConversationAsyncTask(new MobiComConversationService(getActivity()), contact, channel,currentConversationId, getActivity()).execute();
+                        new DeleteConversationAsyncTask(new MobiComConversationService(getActivity()), contact, channel, currentConversationId, getActivity()).execute();
                     }
                 });
-        alertDialog.setNegativeButton(android.R.string.cancel, new DialogInterface.OnClickListener() {
+        alertDialog.setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() {
             @Override
             public void onClick(DialogInterface dialogInterface, int i) {
             }
@@ -1580,24 +2361,6 @@ public void onClick(DialogInterface dialogInterface, int i) {
         alertDialog.create().show();
     }
 
-    protected void processPhoneNumbers() {
-        if (contact.hasMultiplePhoneNumbers()) {
-            ArrayList<SpinnerNavItem> navSpinner = new ArrayList<SpinnerNavItem>();
-            navSpinner.add(new SpinnerNavItem(contact, contact.getContactNumber(), contact.getPhoneNumbers().get(contact.getContactNumber()), R.drawable.applozic_ic_action_email));
-
-            for (String phoneNumber : contact.getPhoneNumbers().keySet()) {
-                if (!PhoneNumberUtils.compare(contact.getContactNumber(), phoneNumber)) {
-                    navSpinner.add(new SpinnerNavItem(contact, phoneNumber, contact.getPhoneNumbers().get(phoneNumber), R.drawable.applozic_ic_action_email));
-                }
-            }
-            // title drop down adapter
-        /*    MobiComActivityForFragment activity = ((MobiComActivityForFragment) getActivity());
-            TitleNavigationAdapter adapter = new TitleNavigationAdapter(getActivity().getApplicationContext(), navSpinner);
-            activity.setNavSpinner(navSpinner);
-            activity.setAdapter(adapter);*/
-        }
-    }
-
     @Override
     public boolean onContextItemSelected(MenuItem item) {
         AdapterView.AdapterContextMenuInfo info = (AdapterView.AdapterContextMenuInfo) item.getMenuInfo();
@@ -1617,12 +2380,12 @@ public boolean onContextItemSelected(MenuItem item) {
                     clipboard.setText(message.getMessage());
                 } else {
                     android.content.ClipboardManager clipboard = (android.content.ClipboardManager) getActivity().getSystemService(Context.CLIPBOARD_SERVICE);
-                    android.content.ClipData clip = android.content.ClipData.newPlainText("Copied message", message.getMessage());
+                    android.content.ClipData clip = android.content.ClipData.newPlainText(getContext().getString(R.string.copied_message), message.getMessage());
                     clipboard.setPrimaryClip(clip);
                 }
                 break;
             case 1:
-                new ConversationUIService(getActivity()).startContactActivityForResult(message, null);
+                conversationUIService.startContactActivityForResult(message, null);
                 break;
             case 2:
                 Message messageToResend = new Message(message);
@@ -1636,10 +2399,151 @@ public boolean onContextItemSelected(MenuItem item) {
                 deleteMessageFromDeviceList(messageKeyString);
                 break;
             case 4:
-                ConversationUIService conversationUIService = new ConversationUIService(getActivity());
                 String messageJson = GsonUtils.getJsonFromObject(message, Message.class);
                 conversationUIService.startMessageInfoFragment(messageJson);
                 break;
+            case 5:
+                Intent shareIntent = new Intent();
+                shareIntent.setAction(Intent.ACTION_SEND);
+                if (message.getFilePaths() != null) {
+                    Uri shareUri = null;
+                    if (Utils.hasNougat()) {
+                        shareUri = FileProvider.getUriForFile(getActivity(), Utils.getMetaDataValue(getActivity(), MobiComKitConstants.PACKAGE_NAME) + ".provider", new File(message.getFilePaths().get(0)));
+                    } else {
+                        shareUri = Uri.fromFile(new File(message.getFilePaths().get(0)));
+                    }
+                    shareIntent.setDataAndType(shareUri, "text/x-vcard");
+                    shareIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
+                    shareIntent.putExtra(Intent.EXTRA_STREAM, shareUri);
+                    if (!TextUtils.isEmpty(message.getMessage())) {
+                        shareIntent.putExtra(Intent.EXTRA_TEXT, message.getMessage());
+                    }
+                    shareIntent.setType(FileUtils.getMimeType(new File(message.getFilePaths().get(0))));
+                } else {
+                    shareIntent.putExtra(Intent.EXTRA_TEXT, message.getMessage());
+                    shareIntent.setType("text/plain");
+                }
+                startActivity(Intent.createChooser(shareIntent, getString(R.string.send_message_to)));
+                break;
+
+            case 6:
+                try {
+                    Configuration config = getActivity().getResources().getConfiguration();
+                    messageMetaData = new HashMap<>();
+                    String displayName;
+                    if (message.getGroupId() != null) {
+                        if (MobiComUserPreference.getInstance(getActivity()).getUserId().equals(message.getContactIds()) || TextUtils.isEmpty(message.getContactIds())) {
+                            displayName = getString(R.string.you_string);
+                        } else {
+                            displayName = appContactService.getContactById(message.getContactIds()).getDisplayName();
+                        }
+                    } else {
+                        if (message.isTypeOutbox()) {
+                            displayName = getString(R.string.you_string);
+                        } else {
+                            displayName = appContactService.getContactById(message.getContactIds()).getDisplayName();
+                        }
+                    }
+                    nameTextView.setText(displayName);
+                    if (message.hasAttachment()) {
+                        FileMeta fileMeta = message.getFileMetas();
+                        imageViewForAttachmentType.setVisibility(VISIBLE);
+                        if (fileMeta.getContentType().contains("image")) {
+                            imageViewForAttachmentType.setImageResource(R.drawable.applozic_ic_image_camera_alt);
+                            if (TextUtils.isEmpty(message.getMessage())) {
+                                messageTextView.setText(getString(R.string.photo_string));
+                            } else {
+                                messageTextView.setText(message.getMessage());
+                            }
+                            galleryImageView.setVisibility(VISIBLE);
+                            imageViewRLayout.setVisibility(VISIBLE);
+                            imageThumbnailLoader.loadImage(message, galleryImageView);
+                        } else if (fileMeta.getContentType().contains("video")) {
+                            imageViewForAttachmentType.setImageResource(R.drawable.applozic_ic_action_video);
+                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
+                                if (config.getLayoutDirection() == View.LAYOUT_DIRECTION_RTL) {
+                                    imageViewForAttachmentType.setScaleX(-1);
+                                }
+                            }
+                            if (TextUtils.isEmpty(message.getMessage())) {
+                                messageTextView.setText(getString(R.string.video_string));
+                            } else {
+                                messageTextView.setText(message.getMessage());
+                            }
+                            if (message.getFilePaths() != null && message.getFilePaths().size() > 0) {
+                                if (imageCache.getBitmapFromMemCache(message.getKeyString()) != null) {
+                                    galleryImageView.setImageBitmap(imageCache.getBitmapFromMemCache(message.getKeyString()));
+                                } else {
+                                    imageCache.addBitmapToCache(message.getKeyString(), fileClientService.createAndSaveVideoThumbnail(message.getFilePaths().get(0)));
+                                    galleryImageView.setImageBitmap(fileClientService.createAndSaveVideoThumbnail(message.getFilePaths().get(0)));
+                                }
+                            }
+                            galleryImageView.setVisibility(VISIBLE);
+                            imageViewRLayout.setVisibility(VISIBLE);
+                        } else if (fileMeta.getContentType().contains("audio")) {
+                            imageViewForAttachmentType.setImageResource(R.drawable.applozic_ic_music_note);
+                            if (TextUtils.isEmpty(message.getMessage())) {
+                                messageTextView.setText(getString(R.string.audio_string));
+                            } else {
+                                messageTextView.setText(message.getMessage());
+                            }
+                            galleryImageView.setVisibility(View.GONE);
+                            imageViewRLayout.setVisibility(View.GONE);
+                        } else if (message.isContactMessage()) {
+                            MobiComVCFParser parser = new MobiComVCFParser();
+                            imageViewForAttachmentType.setImageResource(R.drawable.applozic_ic_person_white);
+                            try {
+                                VCFContactData data = parser.parseCVFContactData(message.getFilePaths().get(0));
+                                if (data != null) {
+                                    messageTextView.setText(getString(R.string.contact_string));
+                                    messageTextView.append(" " + data.getName());
+                                }
+                            } catch (Exception e) {
+                                imageViewForAttachmentType.setImageResource(R.drawable.applozic_ic_person_white);
+                                messageTextView.setText(getString(R.string.contact_string));
+                            }
+                            galleryImageView.setVisibility(View.GONE);
+                            imageViewRLayout.setVisibility(View.GONE);
+                        } else {
+                            imageViewForAttachmentType.setImageResource(R.drawable.applozic_ic_action_attachment);
+                            if (TextUtils.isEmpty(message.getMessage())) {
+                                messageTextView.setText(getString(R.string.attachment_string));
+                            } else {
+                                messageTextView.setText(message.getMessage());
+                            }
+                            galleryImageView.setVisibility(View.GONE);
+                            imageViewRLayout.setVisibility(View.GONE);
+                        }
+                        imageViewForAttachmentType.setColorFilter(ContextCompat.getColor(getActivity(), R.color.apploizc_lite_gray_color));
+                    } else if (message.getContentType() == Message.ContentType.LOCATION.getValue()) {
+                        imageViewForAttachmentType.setVisibility(VISIBLE);
+                        galleryImageView.setVisibility(VISIBLE);
+                        imageViewRLayout.setVisibility(VISIBLE);
+                        messageTextView.setText(getString(R.string.al_location_string));
+                        imageViewForAttachmentType.setImageResource(R.drawable.applozic_ic_location_on_white_24dp);
+                        imageViewForAttachmentType.setColorFilter(ContextCompat.getColor(getActivity(), R.color.apploizc_lite_gray_color));
+                        messageImageLoader.setLoadingImage(R.drawable.applozic_map_offline_thumbnail);
+                        messageImageLoader.loadImage(LocationUtils.loadStaticMap(message.getMessage()), galleryImageView);
+                    } else {
+                        imageViewForAttachmentType.setVisibility(View.GONE);
+                        imageViewRLayout.setVisibility(View.GONE);
+                        galleryImageView.setVisibility(View.GONE);
+                        messageTextView.setText(message.getMessage());
+                    }
+                    messageMetaData.put(Message.MetaDataType.AL_REPLY.getValue(), message.getKeyString());
+                    if (messageMetaData != null && !messageMetaData.isEmpty()) {
+                        String replyMessageKey = messageMetaData.get(Message.MetaDataType.AL_REPLY.getValue());
+                        if (!TextUtils.isEmpty(replyMessageKey)) {
+                            messageDatabaseService.updateMessageReplyType(replyMessageKey, Message.ReplyMessage.REPLY_MESSAGE.getValue());
+                        }
+                    }
+                    attachReplyCancelLayout.setVisibility(VISIBLE);
+                    replayRelativeLayout.setVisibility(VISIBLE);
+                } catch (Exception e) {
+
+                }
+                break;
+
         }
         return true;
     }
@@ -1649,10 +2553,12 @@ public void onResume() {
         super.onResume();
         if (MobiComUserPreference.getInstance(getActivity()).isChannelDeleted()) {
             MobiComUserPreference.getInstance(getActivity()).setDeleteChannel(false);
-            getActivity().onBackPressed();
+            if (getActivity().getSupportFragmentManager() != null) {
+                getActivity().getSupportFragmentManager().popBackStack();
+            }
             return;
         }
-        ((ConversationActivity)getActivity()).setChildFragmentLayoutBGToTransparent();
+        ((ConversationActivity) getActivity()).setChildFragmentLayoutBGToTransparent();
         if (contact != null || channel != null) {
             BroadcastService.currentUserId = contact != null ? contact.getContactIds() : String.valueOf(channel.getKey());
             BroadcastService.currentConversationId = currentConversationId;
@@ -1662,9 +2568,9 @@ public void onResume() {
                 nMgr.cancel(BroadcastService.currentUserId.hashCode());
             }
 
-            Intent intent =  new Intent(getActivity(),ApplozicMqttIntentService.class);
-            intent.putExtra(ApplozicMqttIntentService.CHANNEL,channel);
-            intent.putExtra(ApplozicMqttIntentService.SUBSCRIBE_TO_TYPING,true);
+            Intent intent = new Intent(getActivity(), ApplozicMqttIntentService.class);
+            intent.putExtra(ApplozicMqttIntentService.CHANNEL, channel);
+            intent.putExtra(ApplozicMqttIntentService.SUBSCRIBE_TO_TYPING, true);
             getActivity().startService(intent);
 
             if (downloadConversation != null) {
@@ -1672,10 +2578,15 @@ public void onResume() {
             }
 
             if (contact != null) {
-                userNotAbleToChatLayout.setVisibility(View.GONE);
+                if (contact.isDeleted()) {
+                    individualMessageSendLayout.setVisibility(View.GONE);
+                    userNotAbleToChatLayout.setVisibility(VISIBLE);
+                } else {
+                    userNotAbleToChatLayout.setVisibility(View.GONE);
+                }
                 contact = appContactService.getContactById(contact.getContactIds());
                 if (contact.isBlocked() || contact.isBlockedBy()) {
-                    ((AppCompatActivity)getActivity()).getSupportActionBar().setSubtitle("");
+                    ((AppCompatActivity) getActivity()).getSupportActionBar().setSubtitle("");
                 } else {
                     updateLastSeenStatus();
                 }
@@ -1694,7 +2605,7 @@ public void onResume() {
             }
 
             if (messageList.isEmpty()) {
-                loadConversation(contact, channel, currentConversationId);
+                loadConversation(contact, channel, currentConversationId, null);
             } else if (MobiComUserPreference.getInstance(getActivity()).getNewMessageFlag()) {
                 loadnewMessageOnResume(contact, channel, currentConversationId);
             }
@@ -1703,20 +2614,19 @@ public void onResume() {
         }
         swipeLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {
             public void onRefresh() {
-                downloadConversation = new DownloadConversation(listView, false, 1, 1, 1, contact, channel,currentConversationId);
+                downloadConversation = new DownloadConversation(listView, false, 1, 1, 1, contact, channel, currentConversationId);
                 AsyncTaskCompat.executeParallel(downloadConversation);
             }
         });
         if (channel != null) {
             updateChannelTitle();
-            if(channel.getType() != null  && !Channel.GroupType.OPEN.getValue().equals(channel.getType())){
+
+            if (channel.getType() != null && !Channel.GroupType.OPEN.getValue().equals(channel.getType())) {
                 boolean present = ChannelService.getInstance(getActivity()).processIsUserPresentInChannel(channel.getKey());
-                if (!present) {
-                    individualMessageSendLayout.setVisibility(View.GONE);
-                    userNotAbleToChatLayout.setVisibility(View.VISIBLE);
-                }else {
-                    userNotAbleToChatLayout.setVisibility(View.GONE);
-                }
+                hideSendMessageLayout(channel.isDeleted() || !present);
+
+            } else {
+                hideSendMessageLayout(channel.isDeleted());
             }
             if (ChannelService.isUpdateTitle) {
                 updateChannelSubTitle();
@@ -1726,18 +2636,50 @@ public void onRefresh() {
 
     }
 
+    private void hideSendMessageLayout(boolean hide) {
+        if (hide) {
+            individualMessageSendLayout.setVisibility(View.GONE);
+            userNotAbleToChatLayout.setVisibility(VISIBLE);
+        } else {
+            userNotAbleToChatLayout.setVisibility(View.GONE);
+
+        }
+
+    }
+
     public void updateChannelTitleAndSubTitle() {
         if (channel != null) {
+            Channel channelInfo = ChannelService.getInstance(getActivity()).getChannelInfo(channel.getKey());
+
+            if (channelInfo.isDeleted()) {
+                channel.setDeletedAtTime(channelInfo.getDeletedAtTime());
+                individualMessageSendLayout.setVisibility(View.GONE);
+                userNotAbleToChatLayout.setVisibility(VISIBLE);
+                userNotAbleToChatTextView.setText(R.string.group_has_been_deleted_text);
+            } else {
+                if ((!ChannelService.getInstance(getActivity()).processIsUserPresentInChannel(channel.getKey())
+                        && userNotAbleToChatLayout != null
+                        && !Channel.GroupType.OPEN.getValue().equals(channel.getType()))) {
+
+                    individualMessageSendLayout.setVisibility(View.GONE);
+                    userNotAbleToChatLayout.setVisibility(VISIBLE);
+                }
+            }
+
             updateChannelTitle();
             updateChannelSubTitle();
         }
     }
 
+
     public void updateChannelTitle() {
-        Channel newChannel = ChannelService.getInstance(getActivity()).getChannelByChannelKey(channel.getKey());
-        if (newChannel != null && !TextUtils.isEmpty(channel.getName()) && !channel.getName().equals(newChannel.getName())) {
-            title = ChannelUtils.getChannelTitleName(newChannel, MobiComUserPreference.getInstance(getActivity()).getUserId());
-            ((AppCompatActivity) getActivity()).getSupportActionBar().setTitle(title);
+        if (!Channel.GroupType.GROUPOFTWO.getValue().equals(channel.getType())) {
+            Channel newChannel = ChannelService.getInstance(getActivity()).getChannelByChannelKey(channel.getKey());
+            if (newChannel != null && !TextUtils.isEmpty(channel.getName()) && !channel.getName().equals(newChannel.getName())) {
+                title = ChannelUtils.getChannelTitleName(newChannel, MobiComUserPreference.getInstance(getActivity()).getUserId());
+                channel = newChannel;
+                ((AppCompatActivity) getActivity()).getSupportActionBar().setTitle(title);
+            }
         }
     }
 
@@ -1760,11 +2702,201 @@ public void selfDestructMessage(Message message) {
         }
     }
 
-    public void loadnewMessageOnResume(Contact contact, Channel channel,Integer conversationId) {
-        downloadConversation = new DownloadConversation(listView, true, 1, 0, 0, contact, channel,conversationId);
+    public void loadnewMessageOnResume(Contact contact, Channel channel, Integer conversationId) {
+        downloadConversation = new DownloadConversation(listView, true, 1, 0, 0, contact, channel, conversationId);
         downloadConversation.execute();
     }
 
+    public int ScrollToFirstSearchIndex() {
+
+        int position = 0;
+        if (searchString != null) {
+
+            for (position = messageList.size() - 1; position >= 0; position--) {
+                Message message = messageList.get(position);
+                if (!TextUtils.isEmpty(message.getMessage()) && message.getMessage().toLowerCase(Locale.getDefault()).indexOf(
+                        searchString.toString().toLowerCase(Locale.getDefault())) != -1) {
+                    return position;
+                }
+            }
+        } else {
+            position = messageList.size();
+        }
+        return position;
+    }
+
+    public void blockUserProcess(final String userId, final boolean block, final boolean isFromChannel) {
+
+        final ProgressDialog progressDialog = ProgressDialog.show(getActivity(), "",
+                getActivity().getString(R.string.please_wait_info), true);
+
+        UserBlockTask.TaskListener listener = new UserBlockTask.TaskListener() {
+
+            @Override
+            public void onSuccess(ApiResponse apiResponse) {
+                if (block && typingStarted) {
+                    ((AppCompatActivity) getActivity()).getSupportActionBar().setSubtitle("");
+                    Intent intent = new Intent(getActivity(), ApplozicMqttIntentService.class);
+                    intent.putExtra(ApplozicMqttIntentService.CONTACT, contact);
+                    intent.putExtra(ApplozicMqttIntentService.STOP_TYPING, true);
+                    getActivity().startService(intent);
+                }
+                menu.findItem(R.id.userBlock).setVisible(!block);
+                menu.findItem(R.id.userUnBlock).setVisible(block);
+            }
+
+            @Override
+            public void onFailure(ApiResponse apiResponse, Exception exception) {
+                String error = getString(Utils.isInternetAvailable(getActivity()) ? R.string.applozic_server_error : R.string.you_need_network_access_for_block_or_unblock);
+                Toast toast = Toast.makeText(getActivity(), error, Toast.LENGTH_LONG);
+                toast.setGravity(Gravity.CENTER, 0, 0);
+                toast.show();
+            }
+
+            @Override
+            public void onCompletion() {
+                if (progressDialog != null && progressDialog.isShowing()) {
+                    progressDialog.dismiss();
+                }
+                if (!isFromChannel) {
+                    contact = appContactService.getContactById(userId);
+                }
+            }
+
+        };
+
+        new UserBlockTask(getActivity(), listener, userId, block).execute((Void) null);
+    }
+
+    public void userBlockDialog(final boolean block, final Contact withUserContact, final boolean isFromChannel) {
+        if (withUserContact == null) {
+            return;
+        }
+        AlertDialog.Builder alertDialog = new AlertDialog.Builder(getActivity()).
+                setPositiveButton(R.string.ok_alert, new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialogInterface, int i) {
+                        blockUserProcess(withUserContact.getUserId(), block, isFromChannel);
+                    }
+                });
+        alertDialog.setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() {
+            @Override
+            public void onClick(DialogInterface dialogInterface, int i) {
+            }
+        });
+        String name = withUserContact.getDisplayName();
+        alertDialog.setMessage(getString(block ? R.string.user_block_info : R.string.user_un_block_info).replace("[name]", name));
+        alertDialog.setCancelable(true);
+        alertDialog.create().show();
+    }
+
+    public void muteGroupChat() {
+
+        final CharSequence[] items = {getString(R.string.eight_Hours), getString(R.string.one_week), getString(R.string.one_year)};
+        Date date = Calendar.getInstance(TimeZone.getTimeZone("UTC")).getTime();
+        millisecond = date.getTime();
+
+        final MuteNotificationAsync.TaskListener taskListener = new MuteNotificationAsync.TaskListener() {
+            @Override
+            public void onSuccess(ApiResponse apiResponse) {
+                if (menu != null) {
+                    menu.findItem(R.id.muteGroup).setVisible(false);
+                    menu.findItem(R.id.unmuteGroup).setVisible(true);
+                }
+            }
+
+            @Override
+            public void onFailure(ApiResponse apiResponse, Exception exception) {
+
+            }
+
+            @Override
+            public void onCompletion() {
+
+            }
+        };
+
+        AlertDialog.Builder builder = new AlertDialog.Builder(getContext())
+                .setTitle(getResources().getString(R.string.mute_group_for))
+                .setSingleChoiceItems(items, -1, new DialogInterface.OnClickListener() {
+
+                    @Override
+                    public void onClick(DialogInterface dialog, final int selectedItem) {
+                        if (selectedItem == 0) {
+                            millisecond = millisecond + 28800000;
+                        } else if (selectedItem == 1) {
+                            millisecond = millisecond + 604800000;
+
+                        } else if (selectedItem == 2) {
+                            millisecond = millisecond + 31558000000L;
+                        }
+
+                        muteNotificationRequest = new MuteNotificationRequest(channel.getKey(), millisecond);
+                        MuteNotificationAsync muteNotificationAsync = new MuteNotificationAsync(getContext(), taskListener, muteNotificationRequest);
+                        muteNotificationAsync.execute((Void) null);
+                        dialog.dismiss();
+
+                    }
+                });
+        AlertDialog alertdialog = builder.create();
+        alertdialog.show();
+    }
+
+    public void umuteGroupChat() {
+        Date date = Calendar.getInstance(TimeZone.getTimeZone("UTC")).getTime();
+        millisecond = date.getTime();
+
+        final MuteNotificationAsync.TaskListener taskListener = new MuteNotificationAsync.TaskListener() {
+            @Override
+            public void onSuccess(ApiResponse apiResponse) {
+                if (menu != null) {
+                    menu.findItem(R.id.unmuteGroup).setVisible(false);
+                    menu.findItem(R.id.muteGroup).setVisible(true);
+                }
+            }
+
+            @Override
+            public void onFailure(ApiResponse apiResponse, Exception exception) {
+
+            }
+
+            @Override
+            public void onCompletion() {
+
+            }
+        };
+        muteNotificationRequest = new MuteNotificationRequest(channel.getKey(), millisecond);
+        MuteNotificationAsync muteNotificationAsync = new MuteNotificationAsync(getContext(), taskListener, muteNotificationRequest);
+        muteNotificationAsync.execute((Void) null);
+
+
+    }
+
+    @Override
+    public void onDestroyView() {
+        super.onDestroyView();
+        count = 0;
+        t.cancel();
+        ((ConversationActivity) getActivity()).setChildFragmentLayoutBG();
+        ApplozicAudioManager.getInstance(getContext()).audiostop();
+    }
+
+    public ViewGroup.LayoutParams getImageLayoutParam(boolean outBoxType) {
+        DisplayMetrics metrics = new DisplayMetrics();
+        WindowManager wm = (WindowManager) getActivity().getSystemService(Context.WINDOW_SERVICE);
+        wm.getDefaultDisplay().getMetrics(metrics);
+        float wt_px = TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 60, getActivity().getResources().getDisplayMetrics());
+        ViewGroup.MarginLayoutParams params;
+        if (outBoxType) {
+            params = new RelativeLayout.LayoutParams(metrics.widthPixels + (int) wt_px * 2, ViewGroup.LayoutParams.WRAP_CONTENT);
+            params.setMargins((int) wt_px, 0, (int) wt_px, 0);
+        } else {
+            params = new LinearLayout.LayoutParams(metrics.widthPixels - (int) wt_px * 2, ViewGroup.LayoutParams.WRAP_CONTENT);
+            params.setMargins(0, 0, 0, 0);
+        }
+        return params;
+    }
+
     public class DownloadConversation extends AsyncTask<Void, Integer, Long> {
 
         private AbsListView view;
@@ -1778,7 +2910,7 @@ public void loadnewMessageOnResume(Contact contact, Channel channel,Integer conv
         private List<Conversation> conversationList;
         private List<Message> nextMessageList = new ArrayList<Message>();
 
-        public DownloadConversation(AbsListView view, boolean initial, int firstVisibleItem, int amountVisible, int totalItems, Contact contact, Channel channel,Integer conversationId) {
+        public DownloadConversation(AbsListView view, boolean initial, int firstVisibleItem, int amountVisible, int totalItems, Contact contact, Channel channel, Integer conversationId) {
             this.view = view;
             this.initial = initial;
             this.firstVisibleItem = firstVisibleItem;
@@ -1806,13 +2938,13 @@ public void run() {
 
             if (!initial && messageList.isEmpty()) {
                 AlertDialog.Builder alertDialog = new AlertDialog.Builder(getActivity()).
-                        setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener() {
+                        setPositiveButton(R.string.ok_alert, new DialogInterface.OnClickListener() {
                             @Override
                             public void onClick(DialogInterface dialogInterface, int i) {
 
                             }
                         });
-                alertDialog.setNegativeButton(android.R.string.cancel, new DialogInterface.OnClickListener() {
+                alertDialog.setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() {
                     @Override
                     public void onClick(DialogInterface dialogInterface, int i) {
                         loadMore = false;
@@ -1840,8 +2972,8 @@ protected Long doInBackground(Void... voids) {
                         }
                     }
 
-                    Log.i(TAG, " loading conversation with  lastConversationloadTime " + lastConversationloadTime);
-                    nextMessageList = conversationService.getMessages(lastConversationloadTime + 1L, null, contact, channel,conversationId);
+
+                    nextMessageList = conversationService.getMessages(lastConversationloadTime + 1L, null, contact, channel, conversationId);
                 } else if (firstVisibleItem == 1 && loadMore && !messageList.isEmpty()) {
                     loadMore = false;
                     Long endTime = null;
@@ -1852,9 +2984,9 @@ protected Long doInBackground(Void... voids) {
                         endTime = messageList.get(0).getCreatedAtTime();
                         break;
                     }
-                    nextMessageList = conversationService.getMessages(null, endTime, contact, channel,conversationId);
+                    nextMessageList = conversationService.getMessages(null, endTime, contact, channel, conversationId);
                 }
-                if(BroadcastService.isContextBasedChatEnabled()){
+                if (BroadcastService.isContextBasedChatEnabled()) {
                     conversations = ConversationService.getInstance(getActivity()).getConversationList(channel, contact);
                 }
 
@@ -1915,7 +3047,7 @@ public void run() {
                     swipeLayout.setRefreshing(true);
                 }
             });
-            if(nextMessageList.isEmpty()){
+            if (nextMessageList.isEmpty()) {
                 listView.setTranscriptMode(ListView.TRANSCRIPT_MODE_DISABLED);
             }
             //Note: This is done to avoid duplicates with same timestamp entries
@@ -1935,12 +3067,21 @@ public void run() {
 
             if (initial) {
                 messageList.addAll(nextMessageList);
-                emptyTextView.setVisibility(messageList.isEmpty() ? View.VISIBLE : View.GONE);
+                conversationAdapter.searchString = searchString;
+                emptyTextView.setVisibility(messageList.isEmpty() ? VISIBLE : View.GONE);
                 if (!messageList.isEmpty()) {
                     listView.post(new Runnable() {
                         @Override
                         public void run() {
-                            listView.setSelection(messageList.size() - 1);
+                            if (!TextUtils.isEmpty(searchString)) {
+                                int height = listView.getHeight();
+                                int itemHeight = listView.getChildAt(0).getHeight();
+                                listView.requestFocusFromTouch();
+                                ((ListView) listView).setSelectionFromTop(ScrollToFirstSearchIndex() + 1, height / 2 - itemHeight / 2);
+                            } else {
+                                listView.setSelection(messageList.size() - 1);
+
+                            }
                         }
                     });
                 }
@@ -1964,15 +3105,15 @@ public void run() {
                 }
             }
 
-            if(conversations != null && conversations.size()>0 ){
+            if (conversations != null && conversations.size() > 0) {
                 conversationList = conversations;
             }
-            if (conversationList != null  && conversationList.size()>0 && !onSelected) {
+            if (conversationList != null && conversationList.size() > 0 && !onSelected) {
                 onSelected = true;
                 applozicContextSpinnerAdapter = new ApplozicContextSpinnerAdapter(getActivity(), conversationList);
                 if (applozicContextSpinnerAdapter != null) {
                     contextSpinner.setAdapter(applozicContextSpinnerAdapter);
-                    contextFrameLayout.setVisibility(View.VISIBLE);
+                    contextFrameLayout.setVisibility(VISIBLE);
                     int i = 0;
                     for (Conversation c : conversationList) {
                         i++;
@@ -1994,7 +3135,7 @@ public void run() {
                 }
             });
 
-            if(messageToForward != null){
+            if (messageToForward != null) {
                 sendForwardMessage(messageToForward);
                 messageToForward = null;
             }
@@ -2010,72 +3151,4 @@ public void run() {
         }
 
     }
-    public void blockUserProcess(final String userId, final boolean block) {
-
-        final ProgressDialog progressDialog = ProgressDialog.show(getActivity(), "",
-                getActivity().getString(R.string.please_wait_info), true);
-
-        UserBlockTask.TaskListener listener = new UserBlockTask.TaskListener() {
-
-            @Override
-            public void onSuccess(ApiResponse apiResponse) {
-                if (block && typingStarted) {
-                    ((AppCompatActivity)getActivity()).getSupportActionBar().setSubtitle("");
-                    Intent intent = new Intent(getActivity(), ApplozicMqttIntentService.class);
-                    intent.putExtra(ApplozicMqttIntentService.CONTACT, contact);
-                    intent.putExtra(ApplozicMqttIntentService.STOP_TYPING, true);
-                    getActivity().startService(intent);
-                }
-                menu.findItem(R.id.userBlock).setVisible(!block);
-                menu.findItem(R.id.userUnBlock).setVisible(block);
-            }
-
-            @Override
-            public void onFailure(ApiResponse apiResponse, Exception exception) {
-                String error = getString(Utils.isInternetAvailable(getActivity()) ? R.string.applozic_server_error : R.string.you_need_network_access_for_block_or_unblock);
-                Toast toast = Toast.makeText(getActivity(), error, Toast.LENGTH_LONG);
-                toast.setGravity(Gravity.CENTER, 0, 0);
-                toast.show();
-            }
-
-            @Override
-            public void onCompletion() {
-                if (progressDialog != null && progressDialog.isShowing()) {
-                    progressDialog.dismiss();
-                }
-                contact = appContactService.getContactById(userId);
-            }
-
-        };
-
-        new UserBlockTask(getActivity(), listener, userId, block).execute((Void) null);
-    }
-
-    public void userBlockDialog(final boolean block) {
-        if (contact == null) {
-            return;
-        }
-        AlertDialog.Builder alertDialog = new AlertDialog.Builder(getActivity()).
-                setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener() {
-                    @Override
-                    public void onClick(DialogInterface dialogInterface, int i) {
-                        blockUserProcess(contact.getUserId(), block);
-                    }
-                });
-        alertDialog.setNegativeButton(android.R.string.cancel, new DialogInterface.OnClickListener() {
-            @Override
-            public void onClick(DialogInterface dialogInterface, int i) {
-            }
-        });
-        String name = contact.getDisplayName();
-        alertDialog.setMessage(getString(block ? R.string.user_block_info : R.string.user_un_block_info).replace("[name]", name));
-        alertDialog.setCancelable(true);
-        alertDialog.create().show();
-    }
-
-    @Override
-    public void onDestroyView() {
-        super.onDestroyView();
-        ((ConversationActivity)getActivity()).setChildFragmentLayoutBG();
-    }
-}
\ No newline at end of file
+}
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/fragment/MobiComQuickConversationFragment.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/fragment/MobiComQuickConversationFragment.java
index 8a974ffb..839e5079 100755
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/fragment/MobiComQuickConversationFragment.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/fragment/MobiComQuickConversationFragment.java
@@ -1,6 +1,7 @@
 package com.applozic.mobicomkit.uiwidgets.conversation.fragment;
 
 import android.content.Context;
+import android.graphics.Color;
 import android.os.AsyncTask;
 import android.os.Bundle;
 import android.os.Process;
@@ -8,7 +9,7 @@
 import android.support.v4.os.AsyncTaskCompat;
 import android.support.v4.widget.SwipeRefreshLayout;
 import android.support.v7.widget.Toolbar;
-import android.util.Log;
+import android.text.TextUtils;
 import android.view.ContextMenu;
 import android.view.LayoutInflater;
 import android.view.Menu;
@@ -20,6 +21,7 @@
 import android.widget.AdapterView;
 import android.widget.Button;
 import android.widget.ImageButton;
+import android.widget.ImageView;
 import android.widget.LinearLayout;;
 import android.widget.ProgressBar;
 import android.widget.TextView;
@@ -35,6 +37,7 @@
 import com.applozic.mobicomkit.contact.AppContactService;
 import com.applozic.mobicomkit.contact.BaseContactService;
 import com.applozic.mobicomkit.uiwidgets.ApplozicApplication;
+import com.applozic.mobicomkit.uiwidgets.AlCustomizationSettings;
 import com.applozic.mobicomkit.uiwidgets.ApplozicSetting;
 import com.applozic.mobicomkit.uiwidgets.R;
 import com.applozic.mobicomkit.uiwidgets.conversation.ConversationListView;
@@ -44,6 +47,9 @@
 import com.applozic.mobicomkit.uiwidgets.instruction.InstructionUtil;
 import com.applozic.mobicommons.commons.core.utils.DateUtils;
 import com.applozic.mobicommons.commons.core.utils.Utils;
+import com.applozic.mobicommons.file.FileUtils;
+import com.applozic.mobicommons.json.GsonUtils;
+import com.applozic.mobicommons.people.SearchListFragment;
 import com.applozic.mobicommons.people.channel.Channel;
 import com.applozic.mobicommons.people.contact.Contact;
 
@@ -55,7 +61,7 @@
 /**
  * Created by devashish on 10/2/15.
  */
-public class MobiComQuickConversationFragment extends Fragment {
+public class MobiComQuickConversationFragment extends Fragment implements SearchListFragment {
 
     public static final String QUICK_CONVERSATION_EVENT = "quick_conversation";
     protected ConversationListView listView = null;
@@ -69,7 +75,9 @@
     protected QuickConversationAdapter conversationAdapter = null;
     protected boolean loadMore = false;
     protected SyncCallService syncCallService;
-    private ApplozicSetting applozicSetting;
+    ConversationUIService conversationUIService;
+    AlCustomizationSettings alCustomizationSettings;
+    String searchString;
     private Long minCreatedAtTime;
     private DownloadConversation downloadConversation;
     private BaseContactService baseContactService;
@@ -81,7 +89,6 @@
     private boolean loading = true;
     private int startingPageIndex = 0;
     private ProgressBar progressBar;
-    ConversationUIService conversationUIService;
 
     public ConversationListView getListView() {
         return listView;
@@ -90,10 +97,16 @@ public ConversationListView getListView() {
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        applozicSetting = ApplozicSetting.getInstance(getActivity());
+        String jsonString = FileUtils.loadSettingsJsonFile(getActivity().getApplicationContext());
+        if (!TextUtils.isEmpty(jsonString)) {
+            alCustomizationSettings = (AlCustomizationSettings) GsonUtils.getObjectFromJson(jsonString, AlCustomizationSettings.class);
+        } else {
+            alCustomizationSettings = new AlCustomizationSettings();
+        }
         syncCallService = SyncCallService.getInstance(getActivity());
         conversationAdapter = new QuickConversationAdapter(getActivity(),
                 messageList, null);
+        conversationAdapter.setAlCustomizationSettings(alCustomizationSettings);
         conversationUIService = new ConversationUIService(getActivity());
         baseContactService = new AppContactService(getActivity());
         messageDatabaseService = new MessageDatabaseService(getActivity());
@@ -106,6 +119,7 @@ public void run() {
         thread.setPriority(Process.THREAD_PRIORITY_BACKGROUND);
         thread.start();
         setHasOptionsMenu(true);
+        BroadcastService.lastIndexForChats = 0;
     }
 
     @Override
@@ -131,9 +145,11 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container,
 
         //spinner = (ProgressBar) spinnerLayout.findViewById(R.id.spinner);
         emptyTextView = (TextView) list.findViewById(R.id.noConversations);
+        emptyTextView.setTextColor(Color.parseColor(alCustomizationSettings.getNoConversationLabelTextColor().trim()));
+
         // startNewButton = (Button) spinnerLayout.findViewById(R.id.start_new_conversation);
 
-        fabButton.setVisibility(applozicSetting.isStartNewFloatingActionButtonVisible() ? View.VISIBLE : View.GONE);
+        fabButton.setVisibility(alCustomizationSettings.isStartNewFloatingButton() ? View.VISIBLE : View.GONE);
 
         swipeLayout = (SwipeRefreshLayout) list.findViewById(R.id.swipe_container);
         swipeLayout.setColorScheme(android.R.color.holo_blue_bright,
@@ -171,22 +187,31 @@ public void onCreateContextMenu(ContextMenu menu, View v, ContextMenu.ContextMen
         String[] menuItems = getResources().getStringArray(R.array.conversation_options_menu);
 
         boolean isUserPresentInGroup = false;
+        boolean isChannelDeleted = false;
+        Channel channel = null;
         if (message.getGroupId() != null) {
-            isUserPresentInGroup =  ChannelService.getInstance(getActivity()).processIsUserPresentInChannel(message.getGroupId());
+            channel = ChannelService.getInstance(getActivity()).getChannelByChannelKey(message.getGroupId());
+            if (channel != null) {
+                isChannelDeleted = channel.isDeleted();
+            }
+            isUserPresentInGroup = ChannelService.getInstance(getActivity()).processIsUserPresentInChannel(message.getGroupId());
         }
 
         for (int i = 0; i < menuItems.length; i++) {
 
-            if (message.getGroupId() == null &&  (menuItems[i].equals("Delete group") ||
-                    menuItems[i].equals("Exit group"))) {
+            if ((message.getGroupId() == null || (channel != null && Channel.GroupType.GROUPOFTWO.getValue().equals(channel.getType()))) && (menuItems[i].equals(getResources().getString(R.string.delete_group)) ||
+                    menuItems[i].equals(getResources().getString(R.string.exit_group)))) {
                 continue;
             }
 
-            if (menuItems[i].equals("Exit group") && !isUserPresentInGroup) {
+            if (menuItems[i].equals(getResources().getString(R.string.exit_group)) && (isChannelDeleted || !isUserPresentInGroup)) {
                 continue;
             }
 
-            if (menuItems[i].equals("Delete group") && isUserPresentInGroup) {
+            if (menuItems[i].equals(getResources().getString(R.string.delete_group)) && (isUserPresentInGroup || !isChannelDeleted)) {
+                continue;
+            }
+            if (menuItems[i].equals(getResources().getString(R.string.delete_conversation)) && !alCustomizationSettings.isDeleteOption()) {
                 continue;
             }
 
@@ -206,7 +231,6 @@ public boolean onContextItemSelected(MenuItem item) {
 
         Channel channel = null;
         Contact contact = null;
-
         if (message.getGroupId() != null) {
             channel = ChannelDatabaseService.getInstance(getActivity()).getChannelByChannelKey(message.getGroupId());
         } else {
@@ -215,7 +239,11 @@ public boolean onContextItemSelected(MenuItem item) {
 
         switch (item.getItemId()) {
             case 0:
-                conversationUIService.deleteConversationThread(contact, channel);
+                if (channel != null && channel.isDeleted()) {
+                    conversationUIService.deleteGroupConversation(channel);
+                } else {
+                    conversationUIService.deleteConversationThread(contact, channel);
+                }
                 break;
             case 1:
                 conversationUIService.deleteGroupConversation(channel);
@@ -233,23 +261,34 @@ public boolean onContextItemSelected(MenuItem item) {
     public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
         super.onCreateOptionsMenu(menu, inflater);
 
-        if (!ApplozicSetting.getInstance(getActivity()).isStartNewButtonVisible()) {
-            menu.removeItem(R.id.start_new);
-        }else {
+
+        if (alCustomizationSettings.isStartNewButton() || ApplozicSetting.getInstance(getContext()).isStartNewButtonVisible()) {
             menu.findItem(R.id.start_new).setVisible(true);
         }
-        if (!ApplozicSetting.getInstance(getActivity()).isStartNewGroupButtonVisible()) {
-            menu.removeItem(R.id.conversations);
-        }else {
+        if (alCustomizationSettings.isStartNewGroup() || ApplozicSetting.getInstance(getContext()).isStartNewGroupButtonVisible()) {
             menu.findItem(R.id.conversations).setVisible(true);
         }
-        menu.findItem(R.id.refresh).setVisible(true);
-        if(ApplozicSetting.getInstance(getActivity()).isProfileOptionEnabled()){
+        if (alCustomizationSettings.isRefreshOption()) {
+            menu.findItem(R.id.refresh).setVisible(true);
+        }
+        if (alCustomizationSettings.isProfileOption()) {
             menu.findItem(R.id.applozicUserProfile).setVisible(true);
         }
+        if (alCustomizationSettings.isMessageSearchOption()) {
+            menu.findItem(R.id.menu_search).setVisible(true);
+        }
+        if (alCustomizationSettings.isBroadcastOption()) {
+            menu.findItem(R.id.broadcast).setVisible(true);
+        }
+        if (alCustomizationSettings.isLogoutOption()) {
+            menu.findItem(R.id.logout).setVisible(true);
+        }
     }
 
     public void addMessage(final Message message) {
+        if (getActivity() == null) {
+            return;
+        }
         final Context context = getActivity();
         this.getActivity().runOnUiThread(new Runnable() {
             @Override
@@ -277,19 +316,72 @@ public void run() {
                 //listView.smoothScrollToPosition(messageList.size());
                 listView.setSelection(0);
                 emptyTextView.setVisibility(View.GONE);
+                emptyTextView.setText(alCustomizationSettings.getNoConversationLabel());
                 // startQNewButton.setVisibility(View.GONE);
             }
         });
     }
 
+    public void refreshView() {
+        if (!getUserVisibleHint()) {
+            return;
+        }
+        if (getActivity() == null) {
+            return;
+        }
+        try {
+            if (getActivity() != null) {
+                if (conversationAdapter != null) {
+                    conversationAdapter.notifyDataSetChanged();
+                }
+            }
+        } catch (Exception e) {
+            Utils.printLog(getActivity(), "AL", "Exception while updating view .");
+        }
+    }
+
+
+    public void updateUserInfo(final String userId) {
+        if (!getUserVisibleHint()) {
+            return;
+        }
+        if (getActivity() == null) {
+            return;
+        }
+        if (getActivity() != null) {
+            this.getActivity().runOnUiThread(new Runnable() {
+                @Override
+                public void run() {
+                    try {
+                        Message message = latestMessageForEachContact.get(userId);
+                        if (message != null) {
+                            int index = messageList.indexOf(message);
+                            View view = listView.getChildAt(index - listView.getFirstVisiblePosition());
+                            Contact contact = baseContactService.getContactById(userId);
+                            if (view != null && contact != null) {
+                                ImageView contactImage = (ImageView) view.findViewById(R.id.contactImage);
+                                TextView displayNameTextView = (TextView) view.findViewById(R.id.smReceivers);
+                                displayNameTextView.setText(contact.getDisplayName());
+                                conversationAdapter.contactImageLoader.loadImage(contact, contactImage);
+                            }
+                        }
+                    } catch (Exception ex) {
+                        Utils.printLog(getActivity(),"AL", "Exception while updating view .");
+                    }
+                }
+            });
+        }
+
+    }
+
     public void updateLastMessage(String keyString, String userId) {
         for (Message message : messageList) {
             if (message.getKeyString() != null && message.getKeyString().equals(keyString)) {
                 List<Message> lastMessage;
-                if(message.getGroupId() != null){
-                    lastMessage =  messageDatabaseService.getLatestMessageByChannelKey(message.getGroupId());
-                }else {
-                    lastMessage  = messageDatabaseService.getLatestMessage(message.getContactIds());
+                if (message.getGroupId() != null) {
+                    lastMessage = messageDatabaseService.getLatestMessageByChannelKey(message.getGroupId());
+                } else {
+                    lastMessage = messageDatabaseService.getLatestMessage(message.getContactIds());
                 }
                 if (lastMessage.isEmpty()) {
                     removeConversation(message, userId);
@@ -301,6 +393,23 @@ public void updateLastMessage(String keyString, String userId) {
         }
     }
 
+    public void updateLastMessage(Message message) {
+        if (message == null) {
+            return;
+        }
+        List<Message> lastMessage = new ArrayList<>();
+        if (message.getGroupId() != null) {
+            lastMessage = messageDatabaseService.getLatestMessageByChannelKey(message.getGroupId());
+        } else {
+            lastMessage = messageDatabaseService.getLatestMessage(message.getContactIds());
+        }
+        if (lastMessage.isEmpty()) {
+            removeConversation(message, message.getContactIds());
+        } else {
+            deleteMessage(lastMessage.get(0), message.getContactIds());
+        }
+    }
+
     public String getLatestContact() {
         if (messageList != null && !messageList.isEmpty()) {
             Message message = messageList.get(0);
@@ -309,30 +418,13 @@ public String getLatestContact() {
         return null;
     }
 
-    public void updateUserName(final Integer channelKey) {
+    public void updateChannelName() {
         this.getActivity().runOnUiThread(new Runnable() {
             @Override
             public void run() {
-                try{
+                try {
                     conversationAdapter.notifyDataSetChanged();
-                   /* Message message = latestMessageForEachContact.get("group-" + channelKey);
-                    if (message != null) {
-                        int index = messageList.indexOf(message);
-                        if (index != -1) {
-                            View view = listView.getChildAt(index -
-                                    listView.getFirstVisiblePosition());
-                            if (view != null) {
-                                TextView receiver = (TextView) view.findViewById(R.id.smReceivers);
-                                Channel channel = ChannelService.getInstance(getActivity()).getChannelByChannelKey(channelKey);
-                                if(channel != null){
-                                    receiver.setText(ChannelUtils.getChannelTitleName(channel, MobiComUserPreference.getInstance(getActivity()).getUserId()));
-                                    conversationAdapter.notifyDataSetChanged();
-                                }
-
-                            }
-                        }
-                    }*/
-                }catch (Exception e){
+                } catch (Exception e) {
                     e.printStackTrace();
                 }
             }
@@ -342,6 +434,9 @@ public void run() {
 
 
     public void deleteMessage(final Message message, final String userId) {
+        if (getActivity() == null) {
+            return;
+        }
         this.getActivity().runOnUiThread(new Runnable() {
             @Override
             public void run() {
@@ -375,6 +470,9 @@ public void updateLatestMessage(Message message, String userId) {
     }
 
     public void removeConversation(final Message message, final String userId) {
+        if (getActivity() == null) {
+            return;
+        }
         this.getActivity().runOnUiThread(new Runnable() {
             @Override
             public void run() {
@@ -391,7 +489,9 @@ public void run() {
     }
 
     public void removeConversation(final Contact contact, final Integer channelKey, String response) {
-
+        if (getActivity() == null) {
+            return;
+        }
         if ("success".equals(response)) {
             this.getActivity().runOnUiThread(new Runnable() {
                 @Override
@@ -402,6 +502,9 @@ public void run() {
                     } else {
                         message = latestMessageForEachContact.get(contact.getUserId());
                     }
+                    if (message == null) {
+                        return;
+                    }
                     messageList.remove(message);
                     if (channelKey != null && channelKey != 0) {
                         latestMessageForEachContact.remove(ConversationUIService.GROUP + channelKey);
@@ -426,6 +529,7 @@ public void checkForEmptyConversations() {
         boolean isLodingConversation = (downloadConversation != null && downloadConversation.getStatus() == AsyncTask.Status.RUNNING);
         if (latestMessageForEachContact.isEmpty() && !isLodingConversation) {
             emptyTextView.setVisibility(View.VISIBLE);
+            emptyTextView.setText(alCustomizationSettings.getNoConversationLabel());
             //startNewButton.setVisibility(applozicSetting.isStartNewButtonVisible() ? View.VISIBLE : View.GONE);
         } else {
             emptyTextView.setVisibility(View.GONE);
@@ -442,7 +546,10 @@ public void onPause() {
         super.onPause();
         listIndex = listView.getFirstVisiblePosition();
         BroadcastService.currentUserId = null;
-        if(conversationAdapter != null){
+        if (listView != null) {
+            BroadcastService.lastIndexForChats = listView.getFirstVisiblePosition();
+        }
+        if (conversationAdapter != null) {
             conversationAdapter.contactImageLoader.setPauseWork(false);
             conversationAdapter.channelImageLoader.setPauseWork(false);
         }
@@ -451,20 +558,20 @@ public void onPause() {
     @Override
     public void onResume() {
         //Assigning to avoid notification in case if quick conversation fragment is opened....
-        toolbar.setTitle(ApplozicApplication.TITLE);
+        toolbar.setTitle(getResources().getString(R.string.chats));
         toolbar.setSubtitle("");
         BroadcastService.selectMobiComKitAll();
         super.onResume();
         latestMessageForEachContact.clear();
         messageList.clear();
         if (listView != null) {
-            if (listView.getCount() > listIndex) {
-                listView.setSelection(listIndex);
+            if (listView.getCount() > BroadcastService.lastIndexForChats) {
+                listView.setSelection(BroadcastService.lastIndexForChats);
             } else {
                 listView.setSelection(0);
             }
         }
-        downloadConversations();
+        downloadConversations(false, searchString);
         swipeLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {
             public void onRefresh() {
                 SyncMessages syncMessages = new SyncMessages();
@@ -497,7 +604,7 @@ public void onScroll(AbsListView view, int firstVisibleItem,
                                  int visibleItemCount, int totalItemCount) {
                 if (loading) {
                     if (totalItemCount > previousTotalItemCount) {
-                        if(!messageList.isEmpty()){
+                        if (!messageList.isEmpty()) {
                             loading = false;
                         }
                         previousTotalItemCount = totalItemCount;
@@ -507,8 +614,10 @@ public void onScroll(AbsListView view, int firstVisibleItem,
                 if ((totalItemCount - visibleItemCount) == 0) {
                     return;
                 }
-
-                if (loadMore && !loading && (totalItemCount - visibleItemCount)<=(firstVisibleItem + visibleThreshold)) {
+                if (totalItemCount <= 5) {
+                    return;
+                }
+                if (loadMore && !loading && (totalItemCount - visibleItemCount) <= (firstVisibleItem + visibleThreshold)) {
                     DownloadConversation downloadConversation = new DownloadConversation(view, false, firstVisibleItem, visibleItemCount, totalItemCount);
                     AsyncTaskCompat.executeParallel(downloadConversation);
                     loading = true;
@@ -519,39 +628,83 @@ public void onScroll(AbsListView view, int firstVisibleItem,
 
 
     public void downloadConversations() {
-        downloadConversations(false);
+        downloadConversations(false, null);
     }
 
-    public void downloadConversations(boolean showInstruction) {
+    public void downloadConversations(boolean showInstruction, String searchString) {
         minCreatedAtTime = null;
-        downloadConversation = new DownloadConversation(listView, true, 1, 0, 0, showInstruction);
+        downloadConversation = new DownloadConversation(listView, true, 1, 0, 0, showInstruction, searchString);
         AsyncTaskCompat.executeParallel(downloadConversation);
+        if (conversationAdapter != null) {
+            conversationAdapter.searchString = searchString;
+        }
     }
 
     public void updateLastSeenStatus(final String userId) {
-        if (!ApplozicSetting.getInstance(getActivity()).isOnlineStatusInMasterListVisible()) {
+        if (!alCustomizationSettings.isOnlineStatusMasterList()) {
+            return;
+        }
+        if (getActivity() == null) {
+            return;
+        }
+        if (MobiComUserPreference.getInstance(getContext()).getUserId().equals(userId)) {
             return;
         }
         this.getActivity().runOnUiThread(new Runnable() {
             @Override
             public void run() {
                 try {
-                    Message message = latestMessageForEachContact.get(userId);
+                    if (conversationAdapter != null) {
+                        conversationAdapter.notifyDataSetChanged();
+                    }
+                } catch (Exception ex) {
+                    Utils.printLog(getActivity(), "AL", "Exception while updating online status.");
+                }
+            }
+        });
+    }
+
+    public void updateConversationRead(final String currentId, final boolean isGroup) {
+        if (getActivity() == null) {
+            return;
+        }
+        this.getActivity().runOnUiThread(new Runnable() {
+            @Override
+            public void run() {
+                try {
+                    Message message = null;
+                    if (isGroup) {
+                        message = latestMessageForEachContact.get(ConversationUIService.GROUP + currentId);
+                    } else {
+                        message = latestMessageForEachContact.get(currentId);
+                    }
+
                     if (message != null) {
                         int index = messageList.indexOf(message);
-                        View view = listView.getChildAt(index - listView.getFirstVisiblePosition());
-                        if (view != null) {
-                            TextView onlineTextView = (TextView) view.findViewById(R.id.onlineTextView);
-                            Contact contact = baseContactService.getContactById(userId);
-                            onlineTextView.setVisibility(contact != null && contact.isOnline() ? View.VISIBLE : View.GONE);
+                        if (index != -1) {
+                            View view = listView.getChildAt(index - listView.getFirstVisiblePosition());
+                            if (view != null) {
+                                TextView unreadCountTextView = (TextView) view.findViewById(R.id.unreadSmsCount);
+                                unreadCountTextView.setVisibility(View.GONE);
+                            }
                         }
                     }
                 } catch (Exception ex) {
-                    Log.w("AL", "Exception while updating online status.");
+                    Utils.printLog(getActivity(), "AL", "Exception while updating Unread count...");
                 }
             }
         });
+    }
 
+    @Override
+    public boolean onQueryTextChange(String newText) {
+        this.searchString = newText;
+        if (TextUtils.isEmpty(newText)) {
+            downloadConversations(false, null);
+        } else {
+            downloadConversations(false, newText);
+        }
+        return true;
     }
 
     public class DownloadConversation extends AsyncTask<Void, Integer, Long> {
@@ -565,8 +718,9 @@ public void run() {
         private List<Message> nextMessageList = new ArrayList<Message>();
         private Context context;
         private boolean loadMoreMessages;
+        private String searchString;
 
-        public DownloadConversation(AbsListView view, boolean initial, int firstVisibleItem, int amountVisible, int totalItems, boolean showInstruction) {
+        public DownloadConversation(AbsListView view, boolean initial, int firstVisibleItem, int amountVisible, int totalItems, boolean showInstruction, String searchString) {
             this.context = getActivity();
             this.view = view;
             this.initial = initial;
@@ -574,10 +728,11 @@ public DownloadConversation(AbsListView view, boolean initial, int firstVisibleI
             this.amountVisible = amountVisible;
             this.totalItems = totalItems;
             this.showInstruction = showInstruction;
+            this.searchString = searchString;
         }
 
         public DownloadConversation(AbsListView view, boolean initial, int firstVisibleItem, int amountVisible, int totalItems) {
-            this(view, initial, firstVisibleItem, amountVisible, totalItems, false);
+            this(view, initial, firstVisibleItem, amountVisible, totalItems, false, null);
             loadMoreMessages = true;
         }
 
@@ -585,22 +740,24 @@ public DownloadConversation(AbsListView view, boolean initial, int firstVisibleI
         protected void onPreExecute() {
             super.onPreExecute();
 
-            if(progressBar != null && loadMoreMessages){
+            if (progressBar != null && loadMoreMessages) {
                 progressBar.setVisibility(View.VISIBLE);
-            }else {
-                swipeLayout.setEnabled(true);
-                swipeLayout.post(new Runnable() {
-                    @Override
-                    public void run() {
-                        swipeLayout.setRefreshing(true);
-                    }
-                });
+            } else {
+                if (swipeLayout != null) {
+                    swipeLayout.setEnabled(true);
+                    swipeLayout.post(new Runnable() {
+                        @Override
+                        public void run() {
+                            swipeLayout.setRefreshing(true);
+                        }
+                    });
+                }
             }
         }
 
         protected Long doInBackground(Void... voids) {
             if (initial) {
-                nextMessageList = syncCallService.getLatestMessagesGroupByPeople();
+                nextMessageList = syncCallService.getLatestMessagesGroupByPeople(searchString);
                 if (!nextMessageList.isEmpty()) {
                     minCreatedAtTime = nextMessageList.get(nextMessageList.size() - 1).getCreatedAtTime();
                 }
@@ -608,7 +765,7 @@ protected Long doInBackground(Void... voids) {
                 listIndex = firstVisibleItem;
                 Long createdAt = messageList.isEmpty() ? null : messageList.get(messageList.size() - 1).getCreatedAtTime();
                 minCreatedAtTime = (minCreatedAtTime == null ? createdAt : Math.min(minCreatedAtTime, createdAt));
-                nextMessageList = syncCallService.getLatestMessagesGroupByPeople(minCreatedAtTime);
+                nextMessageList = syncCallService.getLatestMessagesGroupByPeople(minCreatedAtTime, searchString);
             }
 
             return 0L;
@@ -619,15 +776,24 @@ protected void onProgressUpdate(Integer... progress) {
         }
 
         protected void onPostExecute(Long result) {
-            if(!loadMoreMessages){
-                swipeLayout.setEnabled(true);
-                swipeLayout.post(new Runnable() {
-                    @Override
-                    public void run() {
-                        swipeLayout.setRefreshing(false);
-                    }
-                });
+            if (!loadMoreMessages) {
+                if (swipeLayout != null) {
+                    swipeLayout.setEnabled(true);
+                    swipeLayout.post(new Runnable() {
+                        @Override
+                        public void run() {
+                            swipeLayout.setRefreshing(false);
+                        }
+                    });
+                }
             }
+
+            if (!TextUtils.isEmpty(searchString)) {
+                messageList.clear();
+                latestMessageForEachContact.clear();
+
+            }
+
             for (Message currentMessage : nextMessageList) {
                 if (currentMessage.isSentToMany()) {
                     continue;
@@ -646,8 +812,6 @@ public void run() {
                         } else {
                             latestMessageForEachContact.put(currentMessage.getContactIds(), currentMessage);
                         }
-
-                        Log.d("Current message", "message" + currentMessage);
                         messageList.remove(recentSms);
                         messageList.add(currentMessage);
                     }
@@ -661,42 +825,46 @@ public void run() {
                     messageList.add(currentMessage);
                 }
             }
-            if(progressBar != null && loadMoreMessages){
+            if (progressBar != null && loadMoreMessages) {
                 progressBar.setVisibility(View.GONE);
             }
-            conversationAdapter.notifyDataSetChanged();
+            if (conversationAdapter != null) {
+                conversationAdapter.notifyDataSetChanged();
+            }
             if (initial) {
-                emptyTextView.setVisibility(messageList.isEmpty() ? View.VISIBLE : View.GONE);
-                if (applozicSetting.isStartNewButtonVisible()) {
-                    // startNewButton.setVisibility(messageList.isEmpty() ? View.VISIBLE : View.GONE);
+                if (emptyTextView != null) {
+                    emptyTextView.setVisibility(messageList.isEmpty() ? View.VISIBLE : View.GONE);
+                    if (!TextUtils.isEmpty(searchString) && messageList.isEmpty()) {
+                        emptyTextView.setText(alCustomizationSettings.getNoSearchFoundForChatMessages());
+                    } else if (TextUtils.isEmpty(searchString) && messageList.isEmpty()) {
+                        emptyTextView.setText(alCustomizationSettings.getNoConversationLabel());
+                    }
                 }
                 if (!messageList.isEmpty()) {
-                    listView.setSelection(0);
+                    if (listView != null) {
+                        if (listView.getCount() > BroadcastService.lastIndexForChats) {
+                            listView.setSelection(BroadcastService.lastIndexForChats);
+                            BroadcastService.lastIndexForChats = 0;
+                        } else {
+                            listView.setSelection(0);
+                        }
+                    }
                 }
             } else {
-                if(!loadMoreMessages){
+                if (!loadMoreMessages) {
                     listView.setSelection(firstVisibleItem);
                 }
             }
-            /*if (isAdded()) {
-                //Utils.isNetworkAvailable(getActivity(), errorMessage);
-                if (!Utils.isInternetAvailable(getActivity())) {
-                    String errorMessage = getResources().getString(R.string.internet_connection_not_available);
-                    ((MobiComKitActivityInterface) getActivity()).showErrorMessageView(errorMessage);
-                }
-            }*/
-
-            if (context != null && showInstruction) {
-                InstructionUtil.showInstruction(context, R.string.instruction_open_conversation_thread, MobiComKitActivityInterface.INSTRUCTION_DELAY, BroadcastService.INTENT_ACTIONS.INSTRUCTION.toString());
-            }
-            if(!nextMessageList.isEmpty()){
+            if (!nextMessageList.isEmpty()) {
                 loadMore = true;
             }
         }
     }
-    private class SyncMessages extends AsyncTask<Void, Integer, Long>{
-        SyncMessages(){
+
+    private class SyncMessages extends AsyncTask<Void, Integer, Long> {
+        SyncMessages() {
         }
+
         @Override
         protected Long doInBackground(Void... params) {
             syncCallService.syncMessages(null);
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/fragment/MultimediaOptionFragment.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/fragment/MultimediaOptionFragment.java
index 29ef7847..01870fd8 100755
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/fragment/MultimediaOptionFragment.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/fragment/MultimediaOptionFragment.java
@@ -10,7 +10,6 @@
 import android.provider.MediaStore;
 import android.support.v4.app.DialogFragment;
 import android.support.v4.app.FragmentManager;
-import android.util.Log;
 
 import com.applozic.mobicomkit.api.attachment.FileClientService;
 import com.applozic.mobicomkit.uiwidgets.R;
@@ -35,11 +34,11 @@
     public static final int REQUEST_CODE_SEND_LOCATION = 10;
     public static final int REQUEST_CODE_TAKE_PHOTO = 11;
     public static final int REQUEST_CODE_ATTACH_PHOTO = 12;
-    public static final int REQUEST_MULTI_ATTCAHMENT=16;
+    public static final int REQUEST_MULTI_ATTCAHMENT = 16;
     public static final int REQUEST_CODE_ATTACHE_AUDIO = 13;
     public static final int MEDIA_TYPE_VIDEO = 2;
     public static final int REQUEST_CODE_CAPTURE_VIDEO_ACTIVITY = 14;
-    public static final int REQUEST_CODE_CONTACT_SHARE =15;
+    public static final int REQUEST_CODE_CONTACT_SHARE = 15;
     private Uri capturedImageUri;
     private int menuOptionsResourceId = R.array.multimediaOptions_sms;
 
@@ -59,7 +58,7 @@ public Dialog onCreateDialog(Bundle savedInstanceState) {
             public void onClick(DialogInterface dialog, int which) {
                 switch (which) {
                     case 0:
-                        ((ConversationActivity)getActivity()).processLocation();
+                        ((ConversationActivity) getActivity()).processLocation();
                         break;
                     case 1:
                         Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
@@ -105,9 +104,9 @@ public void onClick(DialogInterface dialog, int which) {
                         getActivity().startActivityForResult(intent, REQUEST_CODE_CAPTURE_VIDEO_ACTIVITY);
                         break;
 
-                    case 5 :
+                    case 5:
                         //Sharing contact.
-                        intent = new Intent( Intent.ACTION_PICK, ContactsContract.Contacts.CONTENT_URI );
+                        intent = new Intent(Intent.ACTION_PICK, ContactsContract.Contacts.CONTENT_URI);
                         intent.setType(ContactsContract.Contacts.CONTENT_TYPE);
                         getActivity().startActivityForResult(intent, REQUEST_CODE_CONTACT_SHARE);
                         break;
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/fragment/PictureUploadPopUpFragment.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/fragment/PictureUploadPopUpFragment.java
index 033296fb..ae8a230e 100644
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/fragment/PictureUploadPopUpFragment.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/fragment/PictureUploadPopUpFragment.java
@@ -2,7 +2,14 @@
 
 import android.app.Activity;
 import android.app.Dialog;
+import android.content.ClipData;
+import android.content.Intent;
+import android.content.pm.PackageManager;
+import android.content.pm.ResolveInfo;
+import android.net.Uri;
+import android.os.Build;
 import android.os.Bundle;
+import android.provider.MediaStore;
 import android.support.v4.app.DialogFragment;
 import android.view.LayoutInflater;
 import android.view.View;
@@ -12,16 +19,34 @@
 import android.widget.RelativeLayout;
 
 import com.applozic.mobicomkit.uiwidgets.R;
-import com.applozic.mobicomkit.uiwidgets.conversation.activity.ConversationActivity;
+import com.applozic.mobicomkit.uiwidgets.conversation.activity.RemoveInterfaceListener;
 import com.applozic.mobicomkit.uiwidgets.people.fragment.ProfileFragment;
+import com.applozic.mobicomkit.uiwidgets.uilistener.MobicomkitUriListener;
+import com.applozic.mobicommons.commons.core.utils.Utils;
+
+import java.util.List;
 
 /**
  * Created by sunil on 25/5/16.
  */
 public class PictureUploadPopUpFragment extends DialogFragment {
 
-    private static final String TAG = "PictureUploadPopUpFrag" ;
+    public static final String REMOVE_PHOTO = "REMOVE_PHOTO";
+    public static final String REMOVE_OPTION = "REMOVE_OPTION";
+    private static final String TAG = "PictureUploadPopUpFrag";
     LinearLayout removeLayout, galleryLayout, cameraLayout;
+    boolean removePhoto;
+    boolean disableRemoveOption;
+    Bundle bundle;
+
+    public static PictureUploadPopUpFragment newInstance(boolean removePhoto, boolean disableRemoveOption) {
+        PictureUploadPopUpFragment f = new PictureUploadPopUpFragment();
+        Bundle args = new Bundle();
+        args.putBoolean(REMOVE_PHOTO, removePhoto);
+        args.putBoolean(REMOVE_OPTION, disableRemoveOption);
+        f.setArguments(args);
+        return f;
+    }
 
     @Override
     public Dialog onCreateDialog(final Bundle savedInstanceState) {
@@ -40,13 +65,27 @@ public Dialog onCreateDialog(final Bundle savedInstanceState) {
     public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
 
         View view = inflater.inflate(R.layout.attach_photo_popup_window_layout, container, false);
+        bundle = getArguments();
         getDialog().setCancelable(Boolean.TRUE);
         cameraLayout = (LinearLayout) view.findViewById(R.id.upload_camera_layout);
         removeLayout = (LinearLayout) view.findViewById(R.id.upload_remove_image_layout);
+        removeLayout.setVisibility(View.GONE);
+
+        if (bundle != null) {
+            removePhoto = bundle.getBoolean(REMOVE_PHOTO);
+            disableRemoveOption = bundle.getBoolean(REMOVE_OPTION);
+        }
+        if (disableRemoveOption) {
+            removeLayout.setVisibility(View.GONE);
+        }
         removeLayout.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
-                getTargetFragment().onActivityResult(ProfileFragment.REQUEST_REMOVE_PHOTO,Activity.RESULT_OK,getActivity().getIntent());
+                if (removePhoto) {
+                    ((RemoveInterfaceListener) getActivity()).removeCallBack();
+                } else {
+                    getTargetFragment().onActivityResult(ProfileFragment.REQUEST_REMOVE_PHOTO, Activity.RESULT_OK, getActivity().getIntent());
+                }
                 getDialog().dismiss();
             }
         });
@@ -55,13 +94,9 @@ public void onClick(View v) {
             @Override
             public void onClick(View v) {
                 getDialog().dismiss();
-
-                try {
-                    ((ConversationActivity)getActivity()).processGalleryPhotoSelection();
-                } catch (Exception e) {
-
-                }
-
+                Intent getContentIntent = new Intent(Intent.ACTION_PICK,
+                        android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
+                getActivity().startActivityForResult(getContentIntent, ProfileFragment.REQUEST_CODE_ATTACH_PHOTO);
             }
         });
 
@@ -69,14 +104,53 @@ public void onClick(View v) {
             @Override
             public void onClick(View v) {
                 getDialog().dismiss();
-                try {
-                    ((ConversationActivity)getActivity()).processImageCaptureForProfilePhoto();
-                } catch (Exception e) {
-
-                }
+                imageCapture();
             }
         });
+
         return view;
+
     }
 
+    public void imageCapture() {
+
+        Intent cameraIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
+
+        if (!(getActivity() instanceof MobicomkitUriListener)) {
+            Utils.printLog(getContext(),TAG, "Activity must implement MobicomkitUriListener to get image file uri");
+            return;
+        }
+
+        if (cameraIntent.resolveActivity(getContext().getPackageManager()) != null) {
+
+            Uri capturedImageUri = ((MobicomkitUriListener) getActivity()).getCurrentImageUri();
+
+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
+                cameraIntent.addFlags(Intent.FLAG_GRANT_WRITE_URI_PERMISSION);
+                cameraIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
+            } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
+                ClipData clip =
+                        ClipData.newUri(getActivity().getContentResolver(), "a Photo", capturedImageUri);
+
+                cameraIntent.setClipData(clip);
+                cameraIntent.addFlags(Intent.FLAG_GRANT_WRITE_URI_PERMISSION);
+                cameraIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
+
+            } else {
+                List<ResolveInfo> resInfoList =
+                        getActivity().getPackageManager()
+                                .queryIntentActivities(cameraIntent, PackageManager.MATCH_DEFAULT_ONLY);
+
+                for (ResolveInfo resolveInfo : resInfoList) {
+                    String packageName = resolveInfo.activityInfo.packageName;
+                    getActivity().grantUriPermission(packageName, capturedImageUri,
+                            Intent.FLAG_GRANT_WRITE_URI_PERMISSION);
+                    getActivity().grantUriPermission(packageName, capturedImageUri,
+                            Intent.FLAG_GRANT_READ_URI_PERMISSION);
+                }
+            }
+            cameraIntent.putExtra(MediaStore.EXTRA_OUTPUT, capturedImageUri);
+            getActivity().startActivityForResult(cameraIntent, ProfileFragment.REQUEST_CODE_TAKE_PHOTO);
+        }
+    }
 }
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/instruction/ApplozicPermissions.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/instruction/ApplozicPermissions.java
index 19f5e7de..2bb453fc 100755
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/instruction/ApplozicPermissions.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/instruction/ApplozicPermissions.java
@@ -7,6 +7,7 @@
 
 import com.applozic.mobicomkit.uiwidgets.R;
 import com.applozic.mobicomkit.uiwidgets.conversation.activity.ConversationActivity;
+import com.applozic.mobicomkit.uiwidgets.conversation.activity.MobicomLocationActivity;
 import com.applozic.mobicommons.commons.core.utils.PermissionsUtils;
 
 /**
@@ -99,10 +100,18 @@ public void requestStoragePermissionsForProfilePhoto() {
         }
     }
 
+    public void checkRuntimePermissionForLocationActivity() {
+        if (PermissionsUtils.checkSelfPermissionForLocation(activity)) {
+            requestLocationPermissions();
+        } else {
+            ((MobicomLocationActivity) activity).processingLocation();
+        }
+    }
+
     public void showSnackBar(int resId, final String[] permissions, final int requestCode) {
         Snackbar.make(snackBarLayout, resId,
                 Snackbar.LENGTH_INDEFINITE)
-                .setAction(android.R.string.ok, new View.OnClickListener() {
+                .setAction(R.string.ok_alert, new View.OnClickListener() {
                     @Override
                     public void onClick(View view) {
                         PermissionsUtils.requestPermissions(activity, permissions, requestCode);
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/notification/MTNotificationBroadcastReceiver.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/notification/MTNotificationBroadcastReceiver.java
index f910f1f0..885a391c 100755
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/notification/MTNotificationBroadcastReceiver.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/notification/MTNotificationBroadcastReceiver.java
@@ -4,62 +4,30 @@
 import android.content.Context;
 import android.content.Intent;
 import android.text.TextUtils;
-import android.util.Log;
 
 import com.applozic.mobicomkit.api.MobiComKitConstants;
-import com.applozic.mobicomkit.api.account.user.MobiComUserPreference;
 import com.applozic.mobicomkit.api.conversation.Message;
-import com.applozic.mobicomkit.api.conversation.service.ConversationService;
-import com.applozic.mobicomkit.api.notification.NotificationService;
-import com.applozic.mobicomkit.channel.service.ChannelService;
-import com.applozic.mobicomkit.contact.AppContactService;
-import com.applozic.mobicomkit.uiwidgets.R;
 import com.applozic.mobicommons.commons.core.utils.Utils;
 import com.applozic.mobicommons.json.GsonUtils;
-import com.applozic.mobicommons.people.channel.Channel;
-import com.applozic.mobicommons.people.contact.Contact;
 
 /**
  * Created by adarsh on 3/5/15.
  */
 public class MTNotificationBroadcastReceiver extends BroadcastReceiver {
 
-
     private static final String TAG = "MTBroadcastReceiver";
 
-    private static String NOTIFICATION_ICON_METADATA = "com.applozic.mobicomkit.notification.icon";
-
     @Override
     public void onReceive(final Context context, Intent intent) {
-
-        Integer notificationId = Utils.getMetaDataValueForResources(context, NOTIFICATION_ICON_METADATA);
-
         String action = intent.getAction();
         String messageJson = intent.getStringExtra(MobiComKitConstants.MESSAGE_JSON_INTENT);
-        Log.i(TAG, "Received broadcast, action: " + action + ", message: " + messageJson);
+        Utils.printLog(context,TAG, "Received broadcast, action: " + action + ", message: " + messageJson);
         if (!TextUtils.isEmpty(messageJson)) {
             final Message message = (Message) GsonUtils.getObjectFromJson(messageJson, Message.class);
-            final NotificationService notificationService =
-                    new NotificationService(notificationId == null ? R.drawable.mobicom_ic_launcher : notificationId, context, R.string.wearable_action_label, R.string.wearable_action_title, R.drawable.mobicom_ic_action_send);
-
-
-            if (MobiComUserPreference.getInstance(context).isLoggedIn()) {
-                new Thread(new Runnable() {
-                    @Override
-                    public void run() {
-                        Channel channel = ChannelService.getInstance(context).getChannelInfo(message.getGroupId());
-                        Contact contact = null;
-                        if(message.getConversationId() != null){
-                            ConversationService.getInstance(context).getConversation(message.getConversationId());
-                        }
-                        if (message.getGroupId() == null) {
-                            contact = new AppContactService(context).getContactById(message.getContactIds());
-                        }
-                        notificationService.notifyUser(contact, channel, message);
-                    }
-                }).start();
-            }
-
+            Intent notificationIntentService = new Intent(context, NotificationIntentService.class);
+            notificationIntentService.setAction(NotificationIntentService.ACTION_AL_NOTIFICATION);
+            notificationIntentService.putExtra(MobiComKitConstants.AL_MESSAGE, message);
+            context.startService(notificationIntentService);
         }
     }
 }
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/notification/NotificationIntentService.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/notification/NotificationIntentService.java
new file mode 100644
index 00000000..5acac886
--- /dev/null
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/notification/NotificationIntentService.java
@@ -0,0 +1,52 @@
+package com.applozic.mobicomkit.uiwidgets.notification;
+
+import android.app.IntentService;
+import android.content.Intent;
+
+import com.applozic.mobicomkit.api.MobiComKitConstants;
+import com.applozic.mobicomkit.api.account.user.MobiComUserPreference;
+import com.applozic.mobicomkit.api.conversation.Message;
+import com.applozic.mobicomkit.api.conversation.service.ConversationService;
+import com.applozic.mobicomkit.api.notification.NotificationService;
+import com.applozic.mobicomkit.channel.service.ChannelService;
+import com.applozic.mobicomkit.contact.AppContactService;
+import com.applozic.mobicomkit.uiwidgets.R;
+import com.applozic.mobicommons.commons.core.utils.Utils;
+import com.applozic.mobicommons.people.channel.Channel;
+import com.applozic.mobicommons.people.contact.Contact;
+
+
+public class NotificationIntentService extends IntentService {
+    public static final String ACTION_AL_NOTIFICATION = "com.applozic.mobicomkit.api.notification.action.NOTIFICATION";
+
+    public NotificationIntentService() {
+        super("NotificationIntentService");
+    }
+
+    @Override
+    protected void onHandleIntent(Intent intent) {
+        if (intent != null) {
+            final String action = intent.getAction();
+            if (ACTION_AL_NOTIFICATION.equals(action)) {
+                Message message = (Message) intent.getSerializableExtra(MobiComKitConstants.AL_MESSAGE);
+                int notificationId = Utils.getLauncherIcon(getApplicationContext());
+                final NotificationService notificationService =
+                        new NotificationService(notificationId == 0 ? R.drawable.mobicom_ic_launcher : notificationId, NotificationIntentService.this, R.string.wearable_action_label, R.string.wearable_action_title, R.drawable.mobicom_ic_action_send);
+
+                if (MobiComUserPreference.getInstance(NotificationIntentService.this).isLoggedIn()) {
+                    Channel channel = ChannelService.getInstance(NotificationIntentService.this).getChannelInfo(message.getGroupId());
+                    Contact contact = null;
+                    if (message.getConversationId() != null) {
+                        ConversationService.getInstance(NotificationIntentService.this).getConversation(message.getConversationId());
+                    }
+                    if (message.getGroupId() == null) {
+                        contact = new AppContactService(NotificationIntentService.this).getContactById(message.getContactIds());
+                    }
+                    notificationService.notifyUser(contact, channel, message);
+                }
+            }
+
+        }
+    }
+
+}
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/activity/MobiComKitPeopleActivity.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/activity/MobiComKitPeopleActivity.java
index b94db782..377fa3a7 100755
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/activity/MobiComKitPeopleActivity.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/activity/MobiComKitPeopleActivity.java
@@ -1,16 +1,18 @@
 package com.applozic.mobicomkit.uiwidgets.people.activity;
 
 import android.annotation.TargetApi;
-import android.app.SearchManager;
+import android.content.Context;
 import android.content.Intent;
+import android.graphics.Color;
+import android.graphics.drawable.ColorDrawable;
 import android.net.Uri;
+import android.os.AsyncTask;
 import android.os.Build;
 import android.os.Bundle;
 import android.support.design.widget.TabLayout;
 import android.support.v4.app.Fragment;
 import android.support.v4.app.FragmentActivity;
 import android.support.v4.app.FragmentManager;
-import android.support.v4.app.FragmentPagerAdapter;
 import android.support.v4.app.FragmentStatePagerAdapter;
 import android.support.v4.app.FragmentTransaction;
 import android.support.v4.app.NavUtils;
@@ -27,79 +29,134 @@
 import android.view.View;
 import android.widget.Toast;
 
-import com.applozic.mobicomkit.uiwidgets.ApplozicSetting;
+import com.applozic.mobicomkit.api.account.user.MobiComUserPreference;
+import com.applozic.mobicomkit.api.attachment.FileClientService;
+import com.applozic.mobicomkit.channel.service.ChannelService;
+import com.applozic.mobicomkit.uiwidgets.AlCustomizationSettings;
 import com.applozic.mobicomkit.uiwidgets.R;
-
+import com.applozic.mobicomkit.uiwidgets.conversation.ConversationUIService;
+import com.applozic.mobicomkit.uiwidgets.conversation.activity.ConversationActivity;
+import com.applozic.mobicomkit.uiwidgets.conversation.activity.MobiComAttachmentSelectorActivity;
 import com.applozic.mobicomkit.uiwidgets.people.channel.ChannelFragment;
 import com.applozic.mobicomkit.uiwidgets.people.contact.AppContactFragment;
 import com.applozic.mobicommons.commons.core.utils.Utils;
+import com.applozic.mobicommons.file.FileUtils;
+import com.applozic.mobicommons.json.GsonUtils;
 import com.applozic.mobicommons.people.OnContactsInteractionListener;
 import com.applozic.mobicommons.people.SearchListFragment;
+import com.applozic.mobicommons.people.channel.Channel;
 import com.applozic.mobicommons.people.contact.Contact;
 import com.applozic.mobicommons.people.contact.ContactUtils;
 
-import com.applozic.mobicommons.people.channel.Channel;
-
+import java.io.File;
+import java.lang.ref.WeakReference;
+import java.text.SimpleDateFormat;
 import java.util.ArrayList;
+import java.util.Date;
 import java.util.List;
 import java.util.Map;
 
 public class MobiComKitPeopleActivity extends AppCompatActivity implements OnContactsInteractionListener,
-        SearchView.OnQueryTextListener,TabLayout.OnTabSelectedListener  {
+        SearchView.OnQueryTextListener, TabLayout.OnTabSelectedListener {
 
     public static final String SHARED_TEXT = "SHARED_TEXT";
     public static final String FORWARD_MESSAGE = "forwardMessage";
+    public static final String USER_ID_ARRAY = "userIdArray";
     private static final String CONTACT_ID = "contactId";
     private static final String GROUP_ID = "groupId";
     private static final String GROUP_NAME = "groupName";
     private static final String USER_ID = "userId";
-    public static final String USER_ID_ARRAY = "userIdArray";
+    public static boolean isSearching = false;
     protected SearchView searchView;
     protected String searchTerm;
-    private SearchListFragment searchListFragment;
-    private boolean isSearchResultView = false;
-    ApplozicSetting applozicSetting;
     ViewPager viewPager;
     TabLayout tabLayout;
     ActionBar actionBar;
     String[] userIdArray;
-    public static boolean isSearching = false;
     AppContactFragment appContactFragment;
     ChannelFragment channelFragment;
     ViewPagerAdapter adapter;
+    AlCustomizationSettings alCustomizationSettings;
+    Intent intentExtra;
+    String action, type;
+    OnContactsInteractionListener onContactsInteractionListener;
+    private SearchListFragment searchListFragment;
+    private boolean isSearchResultView = false;
+
+    public static void addFragment(FragmentActivity fragmentActivity, Fragment fragmentToAdd, String fragmentTag) {
+        FragmentManager supportFragmentManager = fragmentActivity.getSupportFragmentManager();
+
+        FragmentTransaction fragmentTransaction = supportFragmentManager
+                .beginTransaction();
+        fragmentTransaction.replace(R.id.layout_child_activity, fragmentToAdd,
+                fragmentTag);
 
+        if (supportFragmentManager.getBackStackEntryCount() > 1) {
+            supportFragmentManager.popBackStack();
+        }
+        fragmentTransaction.addToBackStack(fragmentTag);
+        fragmentTransaction.commitAllowingStateLoss();
+        supportFragmentManager.executePendingTransactions();
+    }
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
+        if (!MobiComUserPreference.getInstance(this).isLoggedIn()) {
+            finish();
+        }
         setContentView(R.layout.people_activity);
-        applozicSetting = ApplozicSetting.getInstance(getBaseContext());
-        appContactFragment = new AppContactFragment(userIdArray);
-        channelFragment = new ChannelFragment();
+        String jsonString = FileUtils.loadSettingsJsonFile(getApplicationContext());
+        if (!TextUtils.isEmpty(jsonString)) {
+            alCustomizationSettings = (AlCustomizationSettings) GsonUtils.getObjectFromJson(jsonString, AlCustomizationSettings.class);
+        } else {
+            alCustomizationSettings = new AlCustomizationSettings();
+        }
 
+        onContactsInteractionListener = this;
         Toolbar myToolbar = (Toolbar) findViewById(R.id.my_toolbar);
         setSupportActionBar(myToolbar);
         // Set up the action bar.
         actionBar = getSupportActionBar();
+        if (!TextUtils.isEmpty(alCustomizationSettings.getThemeColorPrimary()) && !TextUtils.isEmpty(alCustomizationSettings.getThemeColorPrimaryDark())) {
+            actionBar.setBackgroundDrawable(new ColorDrawable(Color.parseColor(alCustomizationSettings.getThemeColorPrimary())));
+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
+                getWindow().setStatusBarColor(Color.parseColor(alCustomizationSettings.getThemeColorPrimaryDark()));
+            }
+        }
         actionBar.setHomeButtonEnabled(true);
         actionBar.setDisplayHomeAsUpEnabled(true);
         actionBar.setDisplayShowTitleEnabled(true);
+
+
+        intentExtra = getIntent();
+        action = intentExtra.getAction();
+        type = intentExtra.getType();
+
         if (getIntent().getExtras() != null) {
-            userIdArray = getIntent().getStringArrayExtra(USER_ID_ARRAY);
+            if (Intent.ACTION_SEND.equals(action) && type != null) {
+                actionBar.setTitle(getString(R.string.send_message_to));
+            } else {
+                actionBar.setTitle(getString(R.string.search_title));
+                userIdArray = getIntent().getStringArrayExtra(USER_ID_ARRAY);
+            }
+        } else {
+            actionBar.setTitle(getString(R.string.search_title));
         }
+        appContactFragment = new AppContactFragment(userIdArray);
+        appContactFragment.setAlCustomizationSettings(alCustomizationSettings);
+        channelFragment = new ChannelFragment();
         setSearchListFragment(appContactFragment);
-        if (applozicSetting.isStartNewGroupButtonVisible()) {
-            actionBar.setTitle(getString(R.string.search_title));
+        if (alCustomizationSettings.isStartNewGroup()) {
             viewPager = (ViewPager) findViewById(R.id.viewPager);
             viewPager.setVisibility(View.VISIBLE);
             setupViewPager(viewPager);
             tabLayout = (TabLayout) findViewById(R.id.tab_layout);
             tabLayout.setVisibility(View.VISIBLE);
             tabLayout.setupWithViewPager(viewPager);
-            tabLayout.setOnTabSelectedListener(this);
+            tabLayout.addOnTabSelectedListener(this);
         } else {
-            actionBar.setTitle(getString(R.string.search_title));
-            addFragment(this,appContactFragment , "AppContactFragment");
+            addFragment(this, appContactFragment, "AppContactFragment");
         }
       /*  mContactsListFragment = (AppContactFragment)
                 getSupportFragmentManager().findFragmentById(R.id.contact_list);*/
@@ -111,11 +168,7 @@ protected void onCreate(Bundle savedInstanceState) {
 
         // Get the intent, verify the action and get the query
         Intent intent = getIntent();
-
-        String searchQuery = intent.getStringExtra(SearchManager.QUERY);
         // Set special title for search results
-        String title = getString(R.string.contacts_list_search_results_title, searchQuery);
-        setTitle(title);
 
       /*  if (Intent.ACTION_SEARCH.equals(intent.getAction())) {
             mContactsListFragment.onQueryTextChange(searchQuery);
@@ -138,22 +191,6 @@ public boolean onCreateOptionsMenu(Menu menu) {
         return super.onCreateOptionsMenu(menu);
     }
 
-    public static void addFragment(FragmentActivity fragmentActivity, Fragment fragmentToAdd, String fragmentTag) {
-        FragmentManager supportFragmentManager = fragmentActivity.getSupportFragmentManager();
-
-        FragmentTransaction fragmentTransaction = supportFragmentManager
-                .beginTransaction();
-        fragmentTransaction.replace(R.id.layout_child_activity, fragmentToAdd,
-                fragmentTag);
-
-        if (supportFragmentManager.getBackStackEntryCount() > 1) {
-            supportFragmentManager.popBackStack();
-        }
-        fragmentTransaction.addToBackStack(fragmentTag);
-        fragmentTransaction.commitAllowingStateLoss();
-        supportFragmentManager.executePendingTransactions();
-    }
-
     /**
      * This interface callback lets the main contacts list fragment notify
      * this activity that a contact has been selected.
@@ -184,21 +221,95 @@ public void startNewConversation(String contactNumber) {
         finishActivity(intent);
     }
 
+
     @Override
     public void onGroupSelected(Channel channel) {
-        Intent intent = new Intent();
-        intent.putExtra(GROUP_ID, channel.getKey());
-        intent.putExtra(GROUP_NAME, channel.getName());
-        finishActivity(intent);
+        Intent intent = null;
+        if (Intent.ACTION_SEND.equals(action) && type != null) {
+            if (!ChannelService.getInstance(MobiComKitPeopleActivity.this).processIsUserPresentInChannel(channel.getKey())) {
+                Toast.makeText(this, getString(R.string.unable_share_message), Toast.LENGTH_SHORT).show();
+                return;
+            }
+            if ("text/plain".equals(type)) {
+                intent = new Intent(this, ConversationActivity.class);
+                intent.putExtra(GROUP_ID, channel.getKey());
+                intent.putExtra(GROUP_NAME, channel.getName());
+                intent.putExtra(ConversationUIService.DEFAULT_TEXT, intentExtra.getStringExtra(Intent.EXTRA_TEXT));
+                startActivity(intent);
+                finish();
+            } else if (type.startsWith("image/") || type.startsWith("audio/") || type.startsWith("video/")) {
+                Uri fileUri = (Uri) intentExtra.getParcelableExtra(Intent.EXTRA_STREAM);
+                if (fileUri != null) {
+                    int maxSize = alCustomizationSettings.getMaxAttachmentSizeAllowed() * 1024 * 1024;
+                    if (FileUtils.isMaxUploadSizeReached(this, fileUri, maxSize)) {
+                        Toast.makeText(this, getString(R.string.info_attachment_max_allowed_file_size), Toast.LENGTH_LONG).show();
+                        return;
+                    }
+                    if (FileUtils.isContentScheme(fileUri)) {
+                        new ShareAsyncTask(this, fileUri, null, channel).execute();
+                    } else {
+                        Intent intentImage = new Intent(this, MobiComAttachmentSelectorActivity.class);
+                        intentImage.putExtra(MobiComAttachmentSelectorActivity.GROUP_ID, channel.getKey());
+                        intentImage.putExtra(MobiComAttachmentSelectorActivity.GROUP_NAME, channel.getName());
+                        if (fileUri != null) {
+                            intentImage.putExtra(MobiComAttachmentSelectorActivity.URI_LIST, fileUri);
+                        }
+                        startActivity(intentImage);
+                    }
+
+                }
+
+            }
+        } else {
+            intent = new Intent();
+            intent.putExtra(GROUP_ID, channel.getKey());
+            intent.putExtra(GROUP_NAME, channel.getName());
+            finishActivity(intent);
+        }
     }
 
     @Override
     public void onCustomContactSelected(Contact contact) {
-        Intent intent = new Intent();
-        intent.putExtra(USER_ID, contact.getUserId());
-        finishActivity(intent);
+        Intent intent = null;
+        if (Intent.ACTION_SEND.equals(action) && type != null) {
+            if (contact.isBlocked()) {
+                Toast.makeText(this, getString(R.string.user_is_blocked), Toast.LENGTH_SHORT).show();
+                return;
+            }
+            if ("text/plain".equals(type)) {
+                intent = new Intent(this, ConversationActivity.class);
+                intent.putExtra(USER_ID, contact.getUserId());
+                intent.putExtra(ConversationUIService.DEFAULT_TEXT, intentExtra.getStringExtra(Intent.EXTRA_TEXT));
+                startActivity(intent);
+                finish();
+            } else if (type.startsWith("image/") || type.startsWith("audio/") || type.startsWith("video/")) {
+                Uri fileUri = (Uri) intentExtra.getParcelableExtra(Intent.EXTRA_STREAM);
+                int maxSize = alCustomizationSettings.getMaxAttachmentSizeAllowed() * 1024 * 1024;
+                if (FileUtils.isMaxUploadSizeReached(this, fileUri, maxSize)) {
+                    Toast.makeText(this, getString(R.string.info_attachment_max_allowed_file_size), Toast.LENGTH_LONG).show();
+                    return;
+                }
+                if (FileUtils.isContentScheme(fileUri)) {
+                    new ShareAsyncTask(this, fileUri, contact, null).execute();
+                } else {
+                    Intent intentImage = new Intent(this, MobiComAttachmentSelectorActivity.class);
+                    intentImage.putExtra(MobiComAttachmentSelectorActivity.USER_ID, contact.getUserId());
+                    intentImage.putExtra(MobiComAttachmentSelectorActivity.DISPLAY_NAME, contact.getDisplayName());
+                    if (fileUri != null) {
+                        intentImage.putExtra(MobiComAttachmentSelectorActivity.URI_LIST, fileUri);
+                    }
+                    startActivity(intentImage);
+                }
+
+            }
+        } else {
+            intent = new Intent();
+            intent.putExtra(USER_ID, contact.getUserId());
+            finishActivity(intent);
+        }
     }
 
+
     public void finishActivity(Intent intent) {
         String forwardMessage = getIntent().getStringExtra(FORWARD_MESSAGE);
         if (!TextUtils.isEmpty(forwardMessage)) {
@@ -247,7 +358,7 @@ public String getSearchTerm() {
 
     @Override
     public boolean onQueryTextSubmit(String query) {
-        if (applozicSetting.isCreateAnyContact()) {
+        if (alCustomizationSettings.isCreateAnyContact()) {
             this.searchTerm = query;
             startNewConversation(query);
             isSearching = false;
@@ -279,8 +390,8 @@ public void setSearchListFragment(SearchListFragment searchListFragment) {
 
     private void setupViewPager(ViewPager viewPager) {
         adapter = new ViewPagerAdapter(getSupportFragmentManager());
-        adapter.addFrag(appContactFragment, "Contact");
-        adapter.addFrag(channelFragment, "Group");
+        adapter.addFrag(appContactFragment, getString(R.string.Contact));
+        adapter.addFrag(channelFragment, getString(R.string.Group));
         viewPager.setAdapter(adapter);
     }
 
@@ -289,14 +400,14 @@ public void onTabSelected(TabLayout.Tab tab) {
         viewPager.setCurrentItem(tab.getPosition(), true);
         switch (tab.getPosition()) {
             case 0:
-                setSearchListFragment((AppContactFragment)adapter.getItem(0));
-                if(getSearchListFragment() != null){
+                setSearchListFragment((AppContactFragment) adapter.getItem(0));
+                if (getSearchListFragment() != null) {
                     getSearchListFragment().onQueryTextChange(null);
                 }
                 break;
             case 1:
-                setSearchListFragment((ChannelFragment)adapter.getItem(1));
-                if(getSearchListFragment() != null){
+                setSearchListFragment((ChannelFragment) adapter.getItem(1));
+                if (getSearchListFragment() != null) {
                     getSearchListFragment().onQueryTextChange(null);
                 }
                 break;
@@ -306,7 +417,7 @@ public void onTabSelected(TabLayout.Tab tab) {
 
     @Override
     public void onTabUnselected(TabLayout.Tab tab) {
-        viewPager.setCurrentItem(tab.getPosition(),true);
+        viewPager.setCurrentItem(tab.getPosition(), true);
     }
 
     @Override
@@ -314,6 +425,14 @@ public void onTabReselected(TabLayout.Tab tab) {
 
     }
 
+    @Override
+    protected void onDestroy() {
+        super.onDestroy();
+        if (onContactsInteractionListener != null) {
+            onContactsInteractionListener = null;
+        }
+    }
+
     class ViewPagerAdapter extends FragmentStatePagerAdapter {
         private final List<Fragment> fragmentList = new ArrayList<>();
         private final List<String> titleList = new ArrayList<>();
@@ -344,4 +463,71 @@ public CharSequence getPageTitle(int position) {
 
     }
 
+    private class ShareAsyncTask extends AsyncTask<Void, Void, File> {
+
+        WeakReference<Context> contextWeakReference;
+        Uri uri;
+        FileClientService fileClientService;
+        Contact contact;
+        Channel channel;
+
+        public ShareAsyncTask(Context context, Uri uri, Contact contact, Channel channel) {
+            this.contextWeakReference = new WeakReference<Context>(context);
+            this.uri = uri;
+            this.contact = contact;
+            this.channel = channel;
+            this.fileClientService = new FileClientService(context);
+        }
+
+        @Override
+        protected File doInBackground(Void... voids) {
+
+            if (contextWeakReference != null) {
+                Context context = contextWeakReference.get();
+                if (context != null) {
+                    String mimeType = FileUtils.getMimeTypeByContentUriOrOther(context, uri);
+                    if (TextUtils.isEmpty(mimeType)) {
+                        return null;
+                    }
+                    String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());
+                    String fileName = FileUtils.getFileName(context, uri);
+                    String fileFormat = FileUtils.getFileFormat(fileName);
+                    if (TextUtils.isEmpty(fileFormat)) {
+                        return null;
+                    }
+                    String fileNameToWrite = timeStamp + "." + fileFormat;
+                    File mediaFile = FileClientService.getFilePath(fileNameToWrite, context, mimeType);
+                    fileClientService.writeFile(uri, mediaFile);
+                    return mediaFile;
+                }
+            }
+            return null;
+        }
+
+        @Override
+        protected void onPostExecute(File file) {
+            super.onPostExecute(file);
+            if (contextWeakReference != null) {
+                Context context = contextWeakReference.get();
+                if (file != null && file.exists() && context != null) {
+                    Uri fileUri = Uri.parse(file.getAbsolutePath());
+                    Intent sendAttachmentIntent = new Intent(context, MobiComAttachmentSelectorActivity.class);
+                    if (channel != null) {
+                        sendAttachmentIntent.putExtra(MobiComAttachmentSelectorActivity.GROUP_ID, channel.getKey());
+                        sendAttachmentIntent.putExtra(MobiComAttachmentSelectorActivity.GROUP_NAME, channel.getName());
+                    } else if (contact != null) {
+                        sendAttachmentIntent.putExtra(MobiComAttachmentSelectorActivity.USER_ID, contact.getUserId());
+                        sendAttachmentIntent.putExtra(MobiComAttachmentSelectorActivity.DISPLAY_NAME, contact.getDisplayName());
+                    }
+                    if (fileUri != null) {
+                        sendAttachmentIntent.putExtra(MobiComAttachmentSelectorActivity.URI_LIST, fileUri);
+                    }
+                    context.startActivity(sendAttachmentIntent);
+                }
+            }
+        }
+    }
 }
+
+
+
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/channel/ChannelFragment.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/channel/ChannelFragment.java
index f779d78a..5f912f8e 100755
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/channel/ChannelFragment.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/channel/ChannelFragment.java
@@ -49,23 +49,21 @@
  * Created by sunil on 28/1/16.
  */
 public class ChannelFragment extends ListFragment implements
-        AdapterView.OnItemClickListener,SearchListFragment,LoaderManager.LoaderCallbacks<Cursor> {
+        AdapterView.OnItemClickListener, SearchListFragment, LoaderManager.LoaderCallbacks<Cursor> {
 
     private static final String SHARE_TEXT = "share_text";
+    static int QUERY_ID = 1;
     private static String inviteMessage;
+    String mSearchTerm;
+    ImageLoader mChannelImageLoader;
+    BaseContactService baseContactService;
     private ChannelAdapter mAdapter; // The main query adapter
     // Contact selected listener that allows the activity holding this fragment to be notified of
 // a contact being selected
     private OnContactsInteractionListener mOnChannelSelectedListener;
-
     private Button shareButton;
     private TextView resultTextView;
-
     private boolean syncStatus = true;
-    String mSearchTerm;
-    ImageLoader mChannelImageLoader;
-    BaseContactService baseContactService;
-    static  int QUERY_ID = 1;
     private int mPreviouslySelectedSearchItem = 0;
 
     public ChannelFragment() {
@@ -76,13 +74,13 @@ public ChannelFragment() {
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         inviteMessage = Utils.getMetaDataValue(getActivity().getApplicationContext(), SHARE_TEXT);
-        baseContactService =  new AppContactService(getActivity());
+        baseContactService = new AppContactService(getActivity());
         mAdapter = new ChannelAdapter(getActivity().getApplicationContext());
 
         if (savedInstanceState != null) {
             mSearchTerm = savedInstanceState.getString(SearchManager.QUERY);
         }
-        final Context context = getActivity();
+        final Context context = getActivity().getApplicationContext();
         mChannelImageLoader = new ImageLoader(context, getListPreferredItemHeight()) {
             @Override
             protected Bitmap processBitmap(Object data) {
@@ -103,7 +101,7 @@ public void onItemClick(AdapterView<?> parent, View v, int position, long id) {
 
         // Moves to the Cursor row corresponding to the ListView item that was clicked
         cursor.moveToPosition(position);
-        Channel channel =  ChannelDatabaseService.getInstance(getContext()).getChannel(cursor);
+        Channel channel = ChannelDatabaseService.getInstance(getContext()).getChannel(cursor);
         mOnChannelSelectedListener.onGroupSelected(channel);
     }
 
@@ -115,7 +113,7 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container,
         shareButton = (Button) view.findViewById(R.id.actionButton);
         shareButton.setVisibility(View.GONE);
         resultTextView = (TextView) view.findViewById(R.id.result);
-        resultTextView.setText("No Groups");
+        resultTextView.setText(getString(R.string.no_groups));
         return view;
     }
 
@@ -208,7 +206,6 @@ public void onLoaderReset(Loader<Cursor> loader) {
     }
 
 
-
     @Override
     public void onSaveInstanceState(Bundle outState) {
         super.onSaveInstanceState(outState);
@@ -227,15 +224,39 @@ public boolean onQueryTextChange(String newText) {
 
         // Updates current filter to new filter
         mSearchTerm = newFilter;
-        mAdapter.indexOfSearchQuery(newFilter);
-
+        if(mAdapter != null){
+            mAdapter.indexOfSearchQuery(newFilter);
+        }
         getLoaderManager().restartLoader(
                 QUERY_ID, null, ChannelFragment.this);
 
         return true;
     }
 
+    private int getListPreferredItemHeight() {
+        final TypedValue typedValue = new TypedValue();
+
+        // Resolve list item preferred height theme attribute into typedValue
+        getActivity().getTheme().resolveAttribute(
+                android.R.attr.listPreferredItemHeight, typedValue, true);
+
+// Create a new DisplayMetrics object
+        final DisplayMetrics metrics = new DisplayMetrics();
+
+        // Populate the DisplayMetrics
+        getActivity().getWindowManager().getDefaultDisplay().getMetrics(metrics);
 
+        // Return theme value based on DisplayMetrics
+        return (int) typedValue.getDimension(metrics);
+    }
+
+    @Override
+    public void onPause() {
+        super.onPause();
+        if (mChannelImageLoader != null) {
+            mChannelImageLoader.setPauseWork(false);
+        }
+    }
 
     private class ChannelAdapter extends CursorAdapter implements SectionIndexer {
         Context context;
@@ -307,11 +328,11 @@ public void bindView(View view, Context context, Cursor cursor) {
             ///////////////////
 
 
-            if(!TextUtils.isEmpty(channel.getImageUrl())){
+            if (!TextUtils.isEmpty(channel.getImageUrl())) {
                 mChannelImageLoader.loadImage(channel, holder.groupIcon);
-            } else if(channel.isBroadcastMessage()){
+            } else if (channel.isBroadcastMessage()) {
                 holder.groupIcon.setImageResource(R.drawable.applozic_ic_applozic_broadcast);
-            }else {
+            } else {
                 holder.groupIcon.setImageResource(R.drawable.applozic_group_icon);
             }
 
@@ -418,31 +439,4 @@ public int getSectionForPosition(int i) {
         }
     }
 
-
-    private int getListPreferredItemHeight() {
-        final TypedValue typedValue = new TypedValue();
-
-        // Resolve list item preferred height theme attribute into typedValue
-        getActivity().getTheme().resolveAttribute(
-                android.R.attr.listPreferredItemHeight, typedValue, true);
-
-// Create a new DisplayMetrics object
-        final DisplayMetrics metrics = new DisplayMetrics();
-
-        // Populate the DisplayMetrics
-        getActivity().getWindowManager().getDefaultDisplay().getMetrics(metrics);
-
-        // Return theme value based on DisplayMetrics
-        return (int) typedValue.getDimension(metrics);
-    }
-
-
-    @Override
-    public void onPause() {
-        super.onPause();
-        if(mChannelImageLoader != null){
-            mChannelImageLoader.setPauseWork(false);
-        }
-    }
-
 }
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/contact/AppContactFragment.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/contact/AppContactFragment.java
index 25fda90c..2e0d9abc 100755
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/contact/AppContactFragment.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/contact/AppContactFragment.java
@@ -4,17 +4,20 @@
 import android.app.Activity;
 import android.app.ProgressDialog;
 import android.app.SearchManager;
+import android.content.BroadcastReceiver;
 import android.content.Context;
 import android.content.Intent;
+import android.content.IntentFilter;
 import android.content.pm.ResolveInfo;
 import android.database.Cursor;
 import android.graphics.Bitmap;
-import android.os.AsyncTask;
+import android.graphics.drawable.GradientDrawable;
 import android.os.Bundle;
 import android.os.Parcelable;
 import android.support.v4.app.ListFragment;
 import android.support.v4.app.LoaderManager;
 import android.support.v4.content.Loader;
+import android.support.v4.content.LocalBroadcastManager;
 import android.support.v4.widget.CursorAdapter;
 import android.text.SpannableString;
 import android.text.TextUtils;
@@ -29,19 +32,22 @@
 import android.widget.AdapterView;
 import android.widget.AlphabetIndexer;
 import android.widget.Button;
+import android.widget.RelativeLayout;
 import android.widget.SectionIndexer;
 import android.widget.TextView;
 import android.widget.Toast;
 
 import com.applozic.mobicomkit.api.account.user.MobiComUserPreference;
-import com.applozic.mobicomkit.api.account.user.UserService;
-import com.applozic.mobicomkit.api.conversation.Message;
+import com.applozic.mobicomkit.api.account.user.RegisteredUsersAsyncTask;
+import com.applozic.mobicomkit.broadcast.BroadcastService;
 import com.applozic.mobicomkit.contact.AppContactService;
 import com.applozic.mobicomkit.contact.BaseContactService;
 import com.applozic.mobicomkit.contact.database.ContactDatabase;
 import com.applozic.mobicomkit.feed.RegisteredUsersApiResponse;
 import com.applozic.mobicomkit.uiwidgets.ApplozicSetting;
+import com.applozic.mobicomkit.uiwidgets.AlCustomizationSettings;
 import com.applozic.mobicomkit.uiwidgets.R;
+import com.applozic.mobicomkit.uiwidgets.alphanumbericcolor.AlphaNumberColorUtil;
 import com.applozic.mobicomkit.uiwidgets.people.activity.MobiComKitPeopleActivity;
 import com.applozic.mobicommons.commons.core.utils.Utils;
 import com.applozic.mobicommons.commons.image.ImageLoader;
@@ -66,6 +72,7 @@
 public class AppContactFragment extends ListFragment implements SearchListFragment,
         AdapterView.OnItemClickListener, LoaderManager.LoaderCallbacks<Cursor> {
 
+    static final String AL_CUSTOMIZATION_SETTINGS = "alCustomizationSettings";
     // Defines a tag for identifying log entries
     private static final String TAG = "AppContactFragment";
     private static final String SHARE_TEXT = "share_text";
@@ -73,23 +80,20 @@
     private static final String STATE_PREVIOUSLY_SELECTED_KEY =
             "net.mobitexter.mobiframework.contact.ui.SELECTED_ITEM";
     private static String inviteMessage;
+    AlCustomizationSettings alCustomizationSettings;
+    RefreshContactsScreenBroadcast refreshContactsScreenBroadcast;
     private ContactsAdapter mAdapter; // The main query adapter
     private ImageLoader mImageLoader; // Handles loading the contact image in a background thread
     private String mSearchTerm; // Stores the current search query term
-
     // Contact selected listener that allows the activity holding this fragment to be notified of
 // a contact being selected
     private OnContactsInteractionListener mOnContactSelectedListener;
-
     // Stores the previously selected search item so that on a configuration change the same item
 // can be reselected again
     private int mPreviouslySelectedSearchItem = 0;
     private BaseContactService contactService;
-
-
     private Button shareButton;
     private TextView resultTextView;
-
     private List<Contact> contactList;
     private boolean syncStatus = true;
     private String[] userIdArray;
@@ -100,7 +104,6 @@
     private int previousTotalItemCount = 0;
     private boolean loading = true;
     private int startingPageIndex = 0;
-    private ApplozicSetting applozicSetting;
     private ContactDatabase contactDatabase;
 
     /**
@@ -114,22 +117,27 @@ public AppContactFragment(String[] userIdArray) {
         this.userIdArray = userIdArray;
     }
 
+
+    public void setAlCustomizationSettings(AlCustomizationSettings alCustomizationSettings) {
+        this.alCustomizationSettings = alCustomizationSettings;
+    }
+
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         contactDatabase = new ContactDatabase(getContext());
         contactService = new AppContactService(getActivity());
         mAdapter = new ContactsAdapter(getActivity().getApplicationContext());
-        applozicSetting = ApplozicSetting.getInstance(getContext());
         userPreference = MobiComUserPreference.getInstance(getContext());
         inviteMessage = Utils.getMetaDataValue(getActivity().getApplicationContext(), SHARE_TEXT);
         if (savedInstanceState != null) {
-
             mSearchTerm = savedInstanceState.getString(SearchManager.QUERY);
             mPreviouslySelectedSearchItem =
                     savedInstanceState.getInt(STATE_PREVIOUSLY_SELECTED_KEY, 0);
+            alCustomizationSettings = (AlCustomizationSettings) savedInstanceState.getSerializable(AL_CUSTOMIZATION_SETTINGS);
         }
-        final Context context = getActivity();
+        refreshContactsScreenBroadcast = new RefreshContactsScreenBroadcast();
+        final Context context = getActivity().getApplicationContext();
         mImageLoader = new ImageLoader(context, getListPreferredItemHeight()) {
             @Override
             protected Bitmap processBitmap(Object data) {
@@ -150,7 +158,7 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container,
         // Inflate the list fragment layout
         View view = inflater.inflate(R.layout.contact_list_fragment, container, false);
         shareButton = (Button) view.findViewById(R.id.actionButton);
-        shareButton.setVisibility(ApplozicSetting.getInstance(getActivity()).isInviteFriendsButtonVisible() ? View.VISIBLE : View.GONE);
+        shareButton.setVisibility(alCustomizationSettings.isInviteFriendsInContactActivity() ? View.VISIBLE : View.GONE);
         resultTextView = (TextView) view.findViewById(R.id.result);
         return view;
     }
@@ -201,13 +209,15 @@ public void onScrollStateChanged(AbsListView absListView, int scrollState) {
 
             @Override
             public void onScroll(AbsListView absListView, int firstVisibleItem, int visibleItemCount, int totalItemsCount) {
-                if (applozicSetting.isRegisteredUsersContactCall() && Utils.isInternetAvailable(getContext())) {
-
+                if ((alCustomizationSettings.isRegisteredUserContactListCall() || ApplozicSetting.getInstance(getActivity()).isRegisteredUsersContactCall()) && Utils.isInternetAvailable(getActivity().getApplicationContext())) {
                     if (totalItemsCount < previousTotalItemCount) {
                         currentPage = startingPageIndex;
                         previousTotalItemCount = totalItemsCount;
                         if (totalItemsCount == 0) {
                             loading = true;
+                        } else {
+                            loading = false;
+
                         }
                     }
 
@@ -217,15 +227,20 @@ public void onScroll(AbsListView absListView, int firstVisibleItem, int visibleI
                         currentPage++;
                     }
 
+                    if (totalItemsCount - visibleItemCount == 0) {
+                        return;
+                    }
+
+                    if (totalItemsCount <= 5) {
+                        return;
+                    }
+
                     if (!loading && (totalItemsCount - visibleItemCount) <= (firstVisibleItem + visibleThreshold)) {
                         if (!MobiComKitPeopleActivity.isSearching) {
                             loading = true;
-                            new DownloadNNumberOfUserAsync(applozicSetting.getTotalRegisteredUsers(), userPreference.getRegisteredUsersLastFetchTime(), null, null, true).execute((Void[]) null);
+                            processLoadRegisteredUsers();
                         }
                     }
-               /* if ((getListView().getLastVisiblePosition() >= totalItemsCount - 5) && (!MobiComKitPeopleActivity.isSearching)) {
-                    new DownloadNNumberOfUserAsync(ApplozicSetting.getInstance(getActivity()).getTotalRegisteredUsers(), userPreference.getRegisteredUsersLastFetchTime(), null, null, true).execute((Void[]) null);
-                }*/
                 }
             }
         });
@@ -296,6 +311,9 @@ public void onSaveInstanceState(Bundle outState) {
             // Saves the current search string
             outState.putString(SearchManager.QUERY, mSearchTerm);
         }
+        if (alCustomizationSettings != null) {
+            outState.putSerializable(AL_CUSTOMIZATION_SETTINGS, alCustomizationSettings);
+        }
     }
 
     @Override
@@ -366,6 +384,66 @@ public void onLoaderReset(Loader<Cursor> loader) {
         }
     }
 
+    public void processLoadRegisteredUsers() {
+
+        final ProgressDialog progressDialog = ProgressDialog.show(getActivity(), "",
+                getActivity().getString(R.string.applozic_contacts_loading_info), true);
+
+        RegisteredUsersAsyncTask.TaskListener usersAsyncTaskTaskListener = new RegisteredUsersAsyncTask.TaskListener() {
+            @Override
+            public void onSuccess(RegisteredUsersApiResponse registeredUsersApiResponse, String[] userIdArray) {
+                if (progressDialog != null && progressDialog.isShowing()) {
+                    progressDialog.dismiss();
+                }
+                try {
+                    if (registeredUsersApiResponse != null) {
+                        getLoaderManager().restartLoader(
+                                AppContactFragment.ContactsQuery.QUERY_ID, null, AppContactFragment.this);
+                    }
+
+                } catch (Exception e) {
+                    e.printStackTrace();
+                }
+            }
+
+            @Override
+            public void onFailure(RegisteredUsersApiResponse registeredUsersApiResponse, String[] userIdArray, Exception exception) {
+                if (progressDialog != null && progressDialog.isShowing()) {
+                    progressDialog.dismiss();
+                }
+                String error = getString(Utils.isInternetAvailable(getActivity()) ? R.string.applozic_server_error : R.string.you_need_network_access_for_block_or_unblock);
+                Toast toast = Toast.makeText(getActivity(), error, Toast.LENGTH_LONG);
+                toast.setGravity(Gravity.CENTER, 0, 0);
+                toast.show();
+            }
+
+            @Override
+            public void onCompletion() {
+
+            }
+        };
+        RegisteredUsersAsyncTask usersAsyncTask = new RegisteredUsersAsyncTask(getActivity(), usersAsyncTaskTaskListener, alCustomizationSettings.getTotalRegisteredUserToFetch(), userPreference.getRegisteredUsersLastFetchTime(), null, null, true);
+        usersAsyncTask.execute((Void) null);
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        if (refreshContactsScreenBroadcast != null) {
+            LocalBroadcastManager.getInstance(getActivity()).registerReceiver(refreshContactsScreenBroadcast, new IntentFilter(BroadcastService.INTENT_ACTIONS.UPDATE_USER_DETAIL.toString()));
+        }
+
+    }
+
+    @Override
+    public void onDestroy() {
+        super.onDestroy();
+        if (refreshContactsScreenBroadcast != null) {
+            LocalBroadcastManager.getInstance(getActivity()).unregisterReceiver(refreshContactsScreenBroadcast);
+        }
+    }
+
+
     /**
      * This interface defines constants for the Cursor and CursorLoader, based on constants defined
      * in the {@link android.provider.ContactsContract.Contacts} class.
@@ -376,7 +454,6 @@ public void onLoaderReset(Loader<Cursor> loader) {
 
     }
 
-
     /**
      * This is a subclass of CursorAdapter that supports binding Cursor columns to a view layout.
      * If those items are part of search results, the search string is marked by highlighting the
@@ -441,13 +518,18 @@ public View newView(Context context, Cursor cursor, ViewGroup parent) {
             final ViewHolder holder = new ViewHolder();
             holder.text1 = (TextView) itemLayout.findViewById(R.id.text1);
             holder.text2 = (TextView) itemLayout.findViewById(R.id.text2);
+            holder.contactNumberTextView = (TextView) itemLayout.findViewById(R.id.contactNumberTextView);
             holder.icon = (CircleImageView) itemLayout.findViewById(R.id.contactImage);
+            holder.contactIcon = (TextView) itemLayout.findViewById(R.id.contactIcon);
             itemLayout.setTag(holder);
             return itemLayout;
         }
 
         @Override
         public void bindView(View view, Context context, Cursor cursor) {
+            RelativeLayout.LayoutParams layoutParams;
+            String contactNumber;
+            char firstLetter = 0;
 
             // Gets handles to individual view resources
             final ViewHolder holder = (ViewHolder) view.getTag();
@@ -458,11 +540,41 @@ public void bindView(View view, Context context, Cursor cursor) {
 
             holder.text1.setText(contact.getDisplayName() == null ? contact.getUserId() : contact.getDisplayName());
             holder.text2.setText(contact.getUserId());
-            if (contact.isDrawableResources()) {
-                int drawableResourceId = context.getResources().getIdentifier(contact.getrDrawableName(), "drawable", context.getPackageName());
-                holder.icon.setImageResource(drawableResourceId);
+            if (contact != null && !TextUtils.isEmpty(contact.getDisplayName())) {
+                contactNumber = contact.getDisplayName().toUpperCase();
+                firstLetter = contact.getDisplayName().toUpperCase().charAt(0);
+                if (firstLetter != '+') {
+                    holder.contactIcon.setText(String.valueOf(firstLetter));
+                } else if (contactNumber.length() >= 2) {
+                    holder.contactIcon.setText(String.valueOf(contactNumber.charAt(1)));
+                }
+                Character colorKey = AlphaNumberColorUtil.alphabetBackgroundColorMap.containsKey(firstLetter) ? firstLetter : null;
+                GradientDrawable bgShape = (GradientDrawable) holder.contactIcon.getBackground();
+                bgShape.setColor(context.getResources().getColor(AlphaNumberColorUtil.alphabetBackgroundColorMap.get(colorKey)));
+            }
+            holder.contactIcon.setVisibility(View.GONE);
+            holder.icon.setVisibility(View.VISIBLE);
+            if (contact != null) {
+                if (contact.isDrawableResources()) {
+                    int drawableResourceId = context.getResources().getIdentifier(contact.getrDrawableName(), "drawable", context.getPackageName());
+                    holder.icon.setImageResource(drawableResourceId);
+                } else {
+                    mImageLoader.loadImage(contact, holder.icon, holder.contactIcon);
+                }
+            }
+            if (!TextUtils.isEmpty(contact.getContactNumber())) {
+                layoutParams = (RelativeLayout.LayoutParams) holder.text1.getLayoutParams();
+                layoutParams.setMargins(0, 20, 0, 0);
+                holder.text1.setLayoutParams(layoutParams);
+                holder.contactNumberTextView.setVisibility(View.VISIBLE);
+                holder.contactNumberTextView.setText(contact.getContactNumber());
+
             } else {
-                mImageLoader.loadImage(contact, holder.icon);
+                holder.text2.setVisibility(View.GONE);
+                holder.contactNumberTextView.setVisibility(View.GONE);
+                layoutParams = (RelativeLayout.LayoutParams) holder.text1.getLayoutParams();
+                layoutParams.setMargins(0, 50, 0, 0);
+                holder.text1.setLayoutParams(layoutParams);
             }
             // Returns the item layout view
 
@@ -566,74 +678,26 @@ public int getSectionForPosition(int i) {
             TextView text1;
             TextView text2;
             CircleImageView icon;
+            TextView contactIcon;
+            TextView contactNumberTextView;
         }
     }
 
-    public class DownloadNNumberOfUserAsync extends AsyncTask<Void, Integer, Long> {
-
-        private Message message;
-        private UserService userService;
-        private ProgressDialog progressDialog;
-        private String messageContent;
-        private int nNumberOfUsers;
-        private String[] userIdArray;
-        private long timeToFetch;
-        boolean callForRegistered;
-        private RegisteredUsersApiResponse registeredUsersApiResponse;
-        private Context context = getContext();
-
-        public DownloadNNumberOfUserAsync(int nNumberOfUsers, Message message, String messageContent) {
-            this.message = message;
-            this.messageContent = messageContent;
-            this.nNumberOfUsers = nNumberOfUsers;
-            this.userService = UserService.getInstance(context);
-        }
-
-        public DownloadNNumberOfUserAsync(int numberOfUsersToFetch, long timeToFetch, Message message, String messageContent, boolean callForRegistered) {
-            this.callForRegistered = callForRegistered;
-            this.message = message;
-            this.messageContent = messageContent;
-            this.nNumberOfUsers = numberOfUsersToFetch;
-            this.timeToFetch = timeToFetch;
-            this.userService = UserService.getInstance(context);
-        }
-
-        @Override
-        protected void onPreExecute() {
-            super.onPreExecute();
-            progressDialog = ProgressDialog.show(context, "",
-                    context.getString(R.string.applozic_contacts_loading_info), true);
-        }
-
-        @Override
-        protected Long doInBackground(Void... params) {
-            if (callForRegistered) {
-                registeredUsersApiResponse = userService.getRegisteredUsersList(timeToFetch, nNumberOfUsers);
-            } else {
-                userIdArray = userService.getOnlineUsers(nNumberOfUsers);
-            }
-            return null;
-        }
-
+    private final class RefreshContactsScreenBroadcast extends BroadcastReceiver {
         @Override
-        protected void onPostExecute(Long aLong) {
-            super.onPostExecute(aLong);
-            if (progressDialog != null && progressDialog.isShowing()) {
-                progressDialog.dismiss();
-            }
-
-            if (!Utils.isInternetAvailable(context)) {
-                Toast toast = Toast.makeText(context, context.getString(R.string.applozic_contacts_loading_error), Toast.LENGTH_SHORT);
-                toast.setGravity(Gravity.CENTER, 0, 0);
-                toast.show();
-            }
+        public void onReceive(Context context, Intent intent) {
+            if (intent != null && BroadcastService.INTENT_ACTIONS.UPDATE_USER_DETAIL.toString().equals(intent.getAction())) {
+                try {
+                    if (getLoaderManager() != null && userIdArray == null) {
+                        getLoaderManager().restartLoader(
+                                AppContactFragment.ContactsQuery.QUERY_ID, null, AppContactFragment.this);
+                    }
+                } catch (Exception e) {
 
-            if (registeredUsersApiResponse != null) {
-                mAdapter.changeCursor(contactDatabase.loadContacts());
-                mAdapter.notifyDataSetChanged();
+                }
             }
-
         }
     }
+
 }
 
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/contact/ContactSelectionFragment.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/contact/ContactSelectionFragment.java
new file mode 100644
index 00000000..9c97a743
--- /dev/null
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/contact/ContactSelectionFragment.java
@@ -0,0 +1,777 @@
+package com.applozic.mobicomkit.uiwidgets.people.contact;
+
+import android.annotation.SuppressLint;
+import android.app.ProgressDialog;
+import android.app.SearchManager;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.database.Cursor;
+import android.graphics.Bitmap;
+import android.graphics.drawable.GradientDrawable;
+import android.os.Bundle;
+import android.support.annotation.Nullable;
+import android.support.v4.app.ListFragment;
+import android.support.v4.app.LoaderManager;
+import android.support.v4.content.ContextCompat;
+import android.support.v4.content.Loader;
+import android.support.v4.content.LocalBroadcastManager;
+import android.support.v4.widget.CursorAdapter;
+import android.support.v7.widget.AppCompatCheckBox;
+import android.text.SpannableString;
+import android.text.TextUtils;
+import android.text.style.TextAppearanceSpan;
+import android.util.DisplayMetrics;
+import android.util.TypedValue;
+import android.view.Gravity;
+import android.view.LayoutInflater;
+import android.view.Menu;
+import android.view.MenuInflater;
+import android.view.MenuItem;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.AbsListView;
+import android.widget.AdapterView;
+import android.widget.AlphabetIndexer;
+import android.widget.Button;
+import android.widget.SectionIndexer;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import com.applozic.mobicomkit.ApplozicClient;
+import com.applozic.mobicomkit.api.MobiComKitConstants;
+import com.applozic.mobicomkit.api.account.user.MobiComUserPreference;
+import com.applozic.mobicomkit.api.account.user.RegisteredUsersAsyncTask;
+import com.applozic.mobicomkit.api.people.ChannelInfo;
+import com.applozic.mobicomkit.broadcast.BroadcastService;
+import com.applozic.mobicomkit.channel.database.ChannelDatabaseService;
+import com.applozic.mobicomkit.channel.service.ChannelService;
+import com.applozic.mobicomkit.contact.AppContactService;
+import com.applozic.mobicomkit.contact.database.ContactDatabase;
+import com.applozic.mobicomkit.feed.ChannelFeedApiResponse;
+import com.applozic.mobicomkit.feed.ErrorResponseFeed;
+import com.applozic.mobicomkit.feed.RegisteredUsersApiResponse;
+import com.applozic.mobicomkit.uiwidgets.AlCustomizationSettings;
+import com.applozic.mobicomkit.uiwidgets.ApplozicSetting;
+import com.applozic.mobicomkit.uiwidgets.R;
+import com.applozic.mobicomkit.uiwidgets.alphanumbericcolor.AlphaNumberColorUtil;
+import com.applozic.mobicomkit.uiwidgets.async.AlChannelCreateAsyncTask;
+import com.applozic.mobicomkit.uiwidgets.async.ApplozicGetMemberFromContactGroupTask;
+import com.applozic.mobicomkit.uiwidgets.conversation.ConversationUIService;
+import com.applozic.mobicomkit.uiwidgets.conversation.activity.ChannelCreateActivity;
+import com.applozic.mobicomkit.uiwidgets.conversation.activity.ChannelInfoActivity;
+import com.applozic.mobicomkit.uiwidgets.conversation.activity.ContactSelectionActivity;
+import com.applozic.mobicomkit.uiwidgets.conversation.activity.ConversationActivity;
+import com.applozic.mobicommons.commons.core.utils.Utils;
+import com.applozic.mobicommons.commons.image.ImageLoader;
+import com.applozic.mobicommons.file.FileUtils;
+import com.applozic.mobicommons.json.GsonUtils;
+import com.applozic.mobicommons.people.SearchListFragment;
+import com.applozic.mobicommons.people.channel.Channel;
+import com.applozic.mobicommons.people.contact.Contact;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Locale;
+
+import de.hdodenhof.circleimageview.CircleImageView;
+
+/**
+ * Created by sunil on 28/9/16.
+ */
+public class ContactSelectionFragment extends ListFragment implements SearchListFragment,
+        AdapterView.OnItemClickListener, LoaderManager.LoaderCallbacks<Cursor> {
+
+    public static final String CHANNEL = "CHANNEL_NAME";
+    public static final String CHANNEL_OBJECT = "CHANNEL";
+    public static final String CHECK_BOX = "CHECK_BOX";
+    public static final String IMAGE_LINK = "IMAGE_LINK";
+    public static final String GROUP_TYPE = "GROUP_TYPE";
+    private static final String STATE_PREVIOUSLY_SELECTED_KEY =
+            "SELECTED_ITEM";
+    public static boolean isSearching = false;
+    ContactDatabase contactDatabase;
+    boolean disableCheckBox;
+    boolean isUserPresnt;
+    AppContactService appContactService;
+    Channel channel;
+    MobiComUserPreference userPreference;
+    AlCustomizationSettings alCustomizationSettings;
+    String contactsGroupId;
+    private String mSearchTerm; // Stores the current search query term
+    private ContactsAdapter mAdapter;
+    private boolean isScrolling = false;
+    private int visibleThreshold = 0;
+    private int currentPage = 0;
+    private int previousTotalItemCount = 0;
+    private boolean loading = true;
+    private int startingPageIndex = 0;
+    private ImageLoader mImageLoader;
+    private int mPreviouslySelectedSearchItem = 0;
+    private String imageUrl;
+    private String channelName;
+    private int groupType;
+    private String[] groupContacts;
+    private Bundle bundle;
+    private List<String> userIdList;
+    RefreshContactsScreenBroadcast refreshContactsScreenBroadcast;
+
+    @Override
+    public void onCreate(@Nullable Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        bundle = getArguments();
+        String jsonString = FileUtils.loadSettingsJsonFile(getActivity().getApplicationContext());
+        if (!TextUtils.isEmpty(jsonString)) {
+            alCustomizationSettings = (AlCustomizationSettings) GsonUtils.getObjectFromJson(jsonString, AlCustomizationSettings.class);
+        } else {
+            alCustomizationSettings = new AlCustomizationSettings();
+        }
+        if (bundle != null) {
+            channel = (Channel) bundle.getSerializable(CHANNEL_OBJECT);
+            disableCheckBox = bundle.getBoolean(CHECK_BOX, false);
+            channelName = bundle.getString(CHANNEL);
+            imageUrl = bundle.getString(IMAGE_LINK);
+            groupType = bundle.getInt(GROUP_TYPE);
+            contactsGroupId = bundle.getString(ContactSelectionActivity.CONTACTS_GROUP_ID);
+        }
+        userPreference = MobiComUserPreference.getInstance(getActivity());
+        setHasOptionsMenu(true);
+        refreshContactsScreenBroadcast = new RefreshContactsScreenBroadcast();
+        if (savedInstanceState != null) {
+            mSearchTerm = savedInstanceState.getString(SearchManager.QUERY);
+            mPreviouslySelectedSearchItem =
+                    savedInstanceState.getInt(STATE_PREVIOUSLY_SELECTED_KEY, 0);
+        }
+
+        contactDatabase = new ContactDatabase(getContext());
+        appContactService = new AppContactService(getActivity());
+        mAdapter = new ContactsAdapter(getActivity());
+        final Context context = getActivity().getApplicationContext();
+        mImageLoader = new ImageLoader(context, getListPreferredItemHeight()) {
+            @Override
+            protected Bitmap processBitmap(Object data) {
+                return appContactService.downloadContactImage(context, (Contact) data);
+            }
+        };
+        // Set a placeholder loading image for the image loader
+        mImageLoader.setLoadingImage(R.drawable.applozic_ic_contact_picture_holo_light);
+        // Add a cache to the image loader
+        mImageLoader.addImageCache(getActivity().getSupportFragmentManager(), 0.1f);
+        mImageLoader.setImageFadeIn(false);
+        if (contactsGroupId != null) {
+            ChannelDatabaseService channelDatabaseService = ChannelDatabaseService.getInstance(context);
+            groupContacts = channelDatabaseService.getChannelMemberByName(contactsGroupId, String.valueOf(Channel.GroupType.CONTACT_GROUP.getValue()));
+            if (Utils.isInternetAvailable(getContext())) {
+                ApplozicGetMemberFromContactGroupTask.GroupMemberListener eventMemberListener = new ApplozicGetMemberFromContactGroupTask.GroupMemberListener() {
+                    @Override
+                    public void onSuccess(String[] userIdArray, Context context) {
+                        if (isAdded()) {
+                            groupContacts = new String[userIdArray.length];
+                            groupContacts = userIdArray;
+                            getLoaderManager().initLoader(ContactsQuery.QUERY_ID, null, ContactSelectionFragment.this);
+                        }
+                    }
+
+                    @Override
+                    public void onFailure(String response, Context context) {
+
+                    }
+                };
+                ApplozicGetMemberFromContactGroupTask applozicGetMemberFromContactGroupTask = new ApplozicGetMemberFromContactGroupTask(getActivity(), contactsGroupId, String.valueOf(Channel.GroupType.CONTACT_GROUP.getValue()), eventMemberListener);        // pass GroupId whose contact Members you want to show, contactGroupType
+                applozicGetMemberFromContactGroupTask.execute();
+            } else if (groupContacts != null) {
+                getLoaderManager().initLoader(ContactsQuery.QUERY_ID, null, ContactSelectionFragment.this);
+            }
+        }
+    }
+
+    @Override
+    public void onItemClick(AdapterView<?> adapterView, View view, int position, long l) {
+
+        final Cursor cursor = mAdapter.getCursor();
+        cursor.moveToPosition(position);
+        Contact contact = contactDatabase.getContact(cursor, "_id");
+        if (disableCheckBox) {
+            isUserPresnt = ChannelService.getInstance(getActivity()).isUserAlreadyPresentInChannel(channel.getKey(), contact.getContactIds());
+            if (!isUserPresnt) {
+                Intent intent = new Intent();
+                intent.putExtra(ChannelInfoActivity.USERID, contact.getUserId());
+                getActivity().setResult(getActivity().RESULT_OK, intent);
+                getActivity().finish();
+            }
+        }
+    }
+
+    @SuppressLint("NewApi")
+    @Override
+    public void onActivityCreated(Bundle savedInstanceState) {
+        super.onActivityCreated(savedInstanceState);
+        setListAdapter(mAdapter);
+        getListView().setOnItemClickListener(this);
+        getListView().setOnScrollListener(new AbsListView.OnScrollListener() {
+            @Override
+            public void onScrollStateChanged(AbsListView absListView, int scrollState) {
+                // Pause image loader to ensure smoother scrolling when flinging
+                if (scrollState == AbsListView.OnScrollListener.SCROLL_STATE_FLING) {
+                    mImageLoader.setPauseWork(true);
+                    Utils.toggleSoftKeyBoard(getActivity(), true);
+                } else {
+                    mImageLoader.setPauseWork(false);
+                }
+            }
+
+            @Override
+            public void onScroll(AbsListView absListView, int firstVisibleItem, int visibleItemCount, int totalItemsCount) {
+                if ((alCustomizationSettings.isRegisteredUserContactListCall() || ApplozicSetting.getInstance(getActivity()).isRegisteredUsersContactCall()) && Utils.isInternetAvailable(getActivity().getApplicationContext())) {
+
+                    if (totalItemsCount < previousTotalItemCount) {
+                        currentPage = startingPageIndex;
+                        previousTotalItemCount = totalItemsCount;
+                        if (totalItemsCount == 0) {
+                            loading = true;
+                        } else {
+                            loading = false;
+
+                        }
+                    }
+
+                    if (loading && (totalItemsCount > previousTotalItemCount)) {
+                        loading = false;
+                        previousTotalItemCount = totalItemsCount;
+                        currentPage++;
+                    }
+
+                    if (totalItemsCount - visibleItemCount == 0) {
+                        return;
+                    }
+
+                    if (totalItemsCount <= 5) {
+                        return;
+                    }
+
+                    if (!loading && (totalItemsCount - visibleItemCount) <= (firstVisibleItem + visibleThreshold)) {
+                        if (!ContactSelectionActivity.isSearching) {
+                            loading = true;
+                            processDownloadRegisteredUsers();
+                        }
+                    }
+                }
+            }
+        });
+
+        // If there's a previously selected search item from a saved state then don't bother
+        // initializing the loader as it will be restarted later when the query is populated into
+        // the action bar search view (see onQueryTextChange() in onCreateOptionsMenu()).
+        if (mPreviouslySelectedSearchItem == 0 && contactsGroupId == null) {
+            // Initialize the loader, and create a loader identified by ContactsQuery.QUERY_ID
+            getLoaderManager().initLoader(ContactsQuery.QUERY_ID, null, this);
+        }
+    }
+
+    @Override
+    public void onPause() {
+        super.onPause();
+        // In the case onPause() is called during a fling the image loader is
+        // un-paused to let any remaining background work complete.
+        mImageLoader.setPauseWork(false);
+    }
+
+    public void processDownloadRegisteredUsers() {
+
+        final ProgressDialog progressDialog = ProgressDialog.show(getActivity(), "",
+                getActivity().getString(R.string.applozic_contacts_loading_info), true);
+
+        RegisteredUsersAsyncTask.TaskListener usersAsyncTaskTaskListener = new RegisteredUsersAsyncTask.TaskListener() {
+            @Override
+            public void onSuccess(RegisteredUsersApiResponse registeredUsersApiResponse, String[] userIdArray) {
+                if (progressDialog != null && progressDialog.isShowing()) {
+                    progressDialog.dismiss();
+                }
+                if (registeredUsersApiResponse != null) {
+                    try {
+                        if (!Utils.isInternetAvailable(getActivity())) {
+                            Toast toast = Toast.makeText(getActivity(), getActivity().getString(R.string.applozic_contacts_loading_error), Toast.LENGTH_SHORT);
+                            toast.setGravity(Gravity.CENTER, 0, 0);
+                            toast.show();
+                        }
+                        if (registeredUsersApiResponse != null && contactsGroupId == null) {
+                            getLoaderManager().restartLoader(
+                                    ContactSelectionFragment.ContactsQuery.QUERY_ID, null, ContactSelectionFragment.this);
+                        }
+
+                    } catch (Exception e) {
+
+                    }
+                }
+
+            }
+
+            @Override
+            public void onFailure(RegisteredUsersApiResponse registeredUsersApiResponse, String[] userIdArray, Exception exception) {
+                if (progressDialog != null && progressDialog.isShowing()) {
+                    progressDialog.dismiss();
+                }
+                String error = getString(Utils.isInternetAvailable(getActivity()) ? R.string.applozic_server_error : R.string.you_need_network_access_for_block_or_unblock);
+                Toast toast = Toast.makeText(getActivity(), error, Toast.LENGTH_LONG);
+                toast.setGravity(Gravity.CENTER, 0, 0);
+                toast.show();
+            }
+
+            @Override
+            public void onCompletion() {
+
+            }
+        };
+        RegisteredUsersAsyncTask usersAsyncTask = new RegisteredUsersAsyncTask(getActivity(), usersAsyncTaskTaskListener, alCustomizationSettings.getTotalRegisteredUserToFetch(), userPreference.getRegisteredUsersLastFetchTime(), null, null, true);
+        usersAsyncTask.execute((Void) null);
+
+    }
+
+    private int getListPreferredItemHeight() {
+        final TypedValue typedValue = new TypedValue();
+
+        // Resolve list item preferred height theme attribute into typedValue
+        getActivity().getTheme().resolveAttribute(
+                android.R.attr.listPreferredItemHeight, typedValue, true);
+
+        // Create a new DisplayMetrics object
+        final DisplayMetrics metrics = new DisplayMetrics();
+
+        // Populate the DisplayMetrics
+        getActivity().getWindowManager().getDefaultDisplay().getMetrics(metrics);
+
+        // Return theme value based on DisplayMetrics
+        return (int) typedValue.getDimension(metrics);
+    }
+
+
+    @Override
+    public View onCreateView(LayoutInflater inflater, ViewGroup container,
+                             Bundle savedInstanceState) {
+        // Inflate the list fragment layout
+        View view = inflater.inflate(R.layout.contact_list_fragment, container, false);
+        Button shareButton = (Button) view.findViewById(R.id.actionButton);
+        shareButton.setVisibility(alCustomizationSettings.isInviteFriendsInContactActivity() ? View.VISIBLE : View.GONE);
+        TextView resultTextView = (TextView) view.findViewById(R.id.result);
+        return view;
+    }
+
+    @Override
+    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
+        super.onCreateOptionsMenu(menu, inflater);
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        int id = item.getItemId();
+        if (id == R.id.Done) {
+            if (userIdList != null && userIdList.size() == 0) {
+                Toast.makeText(getActivity(), R.string.select_at_least, Toast.LENGTH_SHORT).show();
+            } else {
+                final ProgressDialog progressDialog = ProgressDialog.show(getActivity(), "",
+                        getActivity().getString(TextUtils.isEmpty(channelName) ? R.string.broadcast_creating_info : R.string.group_creating_info), true);
+                AlChannelCreateAsyncTask.TaskListenerInterface taskListenerInterface = new AlChannelCreateAsyncTask.TaskListenerInterface() {
+                    @Override
+                    public void onSuccess(Channel channel, Context context) {
+                        if (progressDialog != null && progressDialog.isShowing()) {
+                            progressDialog.dismiss();
+                        }
+                        if (channel != null) {
+                            Intent intent = new Intent(getActivity(), ConversationActivity.class);
+                            if (ApplozicClient.getInstance(getActivity().getApplicationContext()).isContextBasedChat()) {
+                                intent.putExtra(ConversationUIService.CONTEXT_BASED_CHAT, true);
+                            }
+                            intent.putExtra(ConversationUIService.GROUP_ID, channel.getKey());
+                            intent.putExtra(ConversationUIService.GROUP_NAME, channel.getName());
+                            getActivity().startActivity(intent);
+                        }
+
+                        if (bundle != null && bundle.getString(CHANNEL) != null) {
+                            getActivity().sendBroadcast(new Intent(ChannelCreateActivity.ACTION_FINISH_CHANNEL_CREATE));
+                        }
+                        if (getActivity() != null) {
+                            getActivity().finish();
+                        }
+                    }
+
+                    @Override
+                    public void onFailure(ChannelFeedApiResponse channelFeedApiResponse, Context context) {
+                        if (progressDialog != null && progressDialog.isShowing()) {
+                            progressDialog.dismiss();
+                        }
+                        if (channelFeedApiResponse != null) {
+                            List<ErrorResponseFeed> error = channelFeedApiResponse.getErrorResponse();
+                            if (error != null && error.size() > 0) {
+                                ErrorResponseFeed errorResponseFeed = error.get(0);
+                                String errorDescription = errorResponseFeed.getDescription();
+                                if (!TextUtils.isEmpty(errorDescription)) {
+                                    if (MobiComKitConstants.GROUP_USER_LIMIT_EXCEED.equalsIgnoreCase(errorDescription)) {
+                                        Toast.makeText(context, R.string.group_members_limit_exceeds, Toast.LENGTH_SHORT).show();
+                                    } else {
+                                        Toast.makeText(context, R.string.applozic_server_error, Toast.LENGTH_SHORT).show();
+                                    }
+                                }
+                            }
+                        } else {
+                            Toast.makeText(context, Utils.isInternetAvailable(context) ? R.string.applozic_server_error : R.string.you_dont_have_any_network_access_info, Toast.LENGTH_SHORT).show();
+                        }
+                    }
+                };
+
+                if (userIdList != null && userIdList.size() > 0) {
+                    if (TextUtils.isEmpty(channelName)) {
+                        StringBuffer stringBuffer = new StringBuffer();
+                        int i = 0;
+                        for (String userId : userIdList) {
+                            i++;
+                            if (i > 10)
+                                break;
+                            Contact contactDisplayName = appContactService.getContactById(userId);
+                            stringBuffer.append(contactDisplayName.getDisplayName()).append(",");
+                        }
+                        int lastIndex = stringBuffer.lastIndexOf(",");
+                        channelName = stringBuffer.replace(lastIndex, lastIndex + 1, "").toString();
+                    }
+
+                    ChannelInfo channelInfo = new ChannelInfo(channelName, userIdList);
+                    if (!TextUtils.isEmpty(imageUrl)) {
+                        channelInfo.setImageUrl(imageUrl);
+                    }
+                    channelInfo.setType(groupType);
+                    AlChannelCreateAsyncTask alChannelCreateAsyncTask = new AlChannelCreateAsyncTask(getActivity(), channelInfo, taskListenerInterface);
+                    alChannelCreateAsyncTask.execute((Void) null);
+                }
+            }
+            return true;
+        }
+        return false;
+
+    }
+
+    @Override
+    public Loader<Cursor> onCreateLoader(int id, Bundle args) {
+
+        Loader<Cursor> loader = contactDatabase.getSearchCursorLoader(mSearchTerm, groupContacts);
+        return loader;
+    }
+
+    @Override
+    public void onLoadFinished(Loader<Cursor> loader, Cursor data) {
+        // This swaps the new cursor into the adapter.
+        if (loader.getId() == ContactsQuery.QUERY_ID) {
+            mAdapter.swapCursor(data);
+        }
+    }
+
+    @Override
+    public void onLoaderReset(Loader<Cursor> loader) {
+
+        if (loader.getId() == ContactsQuery.QUERY_ID) {
+            // When the loader is being reset, clear the cursor from the adapter. This allows the
+            // cursor resources to be freed.
+            mAdapter.swapCursor(null);
+        }
+    }
+
+    @Override
+    public boolean onQueryTextChange(String newText) {
+        // Called when the action bar search text has changed.  Updates
+        // the search filter, and restarts the loader to do a new query
+        // using the new search string.
+        String newFilter = !TextUtils.isEmpty(newText) ? newText : null;
+
+        // Don't do anything if the filter is empty
+
+        // Updates current filter to new filter
+        mSearchTerm = newFilter;
+        mAdapter.indexOfSearchQuery(newFilter);
+        if (contactsGroupId == null || mSearchTerm != null) {
+            getLoaderManager().restartLoader(
+                    ContactSelectionFragment.ContactsQuery.QUERY_ID, null, ContactSelectionFragment.this);
+        }
+
+        return true;
+    }
+
+
+    /**
+     * This interface defines constants for the Cursor and CursorLoader, based on constants defined
+     * in the {@link android.provider.ContactsContract.Contacts} class.
+     */
+    public interface ContactsQuery {
+        // An identifier for the loader
+        int QUERY_ID = 1;
+
+    }
+
+    private class ContactsAdapter extends CursorAdapter implements SectionIndexer {
+
+
+        private Context context;
+        private LayoutInflater mInflater; // Stores the layout inflater
+        private AlphabetIndexer mAlphabetIndexer; // Stores the AlphabetIndexer instance
+        private TextAppearanceSpan highlightTextSpan; // Stores the highlight text appearance style
+
+        /**
+         * Instantiates a new Contacts Adapter.
+         *
+         * @param context A context that has access to the app's layout.
+         */
+        public ContactsAdapter(Context context) {
+            super(context, null, 0);
+            this.context = context;
+            userIdList = new ArrayList<String>();
+            // Stores inflater for use later
+            mInflater = LayoutInflater.from(context);
+            // Loads a string containing the English alphabet. To fully localize the app, provide a
+            // strings.xml file in res/values-<x> directories, where <x> is a locale. In the file,
+            // define a string with android:name="alphabet" and contents set to all of the
+            // alphabetic characters in the language in their proper sort order, in upper case if
+            // applicable.
+            final String alphabet = context.getString(R.string.alphabet);
+
+            // Instantiates a new AlphabetIndexer bound to the column used to sort contact names.
+            // The cursor is left null, because it has not yet been retrieved.
+            mAlphabetIndexer = new AlphabetIndexer(null, 1, alphabet);
+
+            // Defines a span for highlighting the part of a display name that matches the search
+            // string
+            highlightTextSpan = new TextAppearanceSpan(context, R.style.searchTextHiglight);
+        }
+
+        /**
+         * Identifies the start of the search string in the display name column of a Cursor row.
+         * E.g. If displayName was "Adam" and search query (mSearchTerm) was "da" this would
+         * return 1.
+         *
+         * @param displayName The contact display name.
+         * @return The starting position of the search string in the display name, 0-based. The
+         * method returns -1 if the string is not found in the display name, or if the search
+         * string is empty or null.
+         */
+        private int indexOfSearchQuery(String displayName) {
+            if (!TextUtils.isEmpty(mSearchTerm)) {
+                return displayName.toLowerCase(Locale.getDefault()).indexOf(
+                        mSearchTerm.toLowerCase(Locale.getDefault()));
+            }
+            return -1;
+        }
+
+        @Override
+        public View newView(Context context, Cursor cursor, ViewGroup parent) {
+            final View itemLayout =
+                    mInflater.inflate(R.layout.contact_select_list_item, parent, false);
+
+            final ContactViewHolder holder = new ContactViewHolder();
+
+            holder.textView1 = (TextView) itemLayout.findViewById(R.id.applozic_group_member_info);
+            holder.textView2 = (TextView) itemLayout.findViewById(R.id.displayName);
+            holder.contactNumberTextView = (TextView) itemLayout.findViewById(R.id.contactNumberTextView);
+            holder.checkBox = (AppCompatCheckBox) itemLayout.findViewById(R.id.checkbox);
+            holder.checkBox.setVisibility(View.VISIBLE);
+            holder.alphabeticImage = (TextView) itemLayout.findViewById(R.id.alphabeticImage);
+            holder.circleImageView = (CircleImageView) itemLayout.findViewById(R.id.contactImage);
+            itemLayout.setTag(holder);
+            return itemLayout;
+        }
+
+        @Override
+        public void bindView(View view, Context context, Cursor cursor) {
+
+            final ContactViewHolder holder = (ContactViewHolder) view.getTag();
+            String contactNumber;
+            char firstLetter = 0;
+
+            final Contact contact = contactDatabase.getContact(cursor, "_id");
+
+            if (disableCheckBox) {
+                isUserPresnt = ChannelService.getInstance(context).isUserAlreadyPresentInChannel(channel.getKey(), contact.getContactIds());
+                if (isUserPresnt) {
+                    holder.textView1.setVisibility(View.VISIBLE);
+                    holder.textView1.setText(getString(R.string.applozic_user_already_in_a_group).replace(getString(R.string.groupType_info), Channel.GroupType.BROADCAST.getValue().equals(channel.getType()) ? getString(R.string.broadcast_string) : getString(R.string.group_string)));
+                    holder.contactNumberTextView.setVisibility(View.GONE);
+                    holder.textView1.setTextColor(ContextCompat.getColor(context, R.color.applozic_lite_black_color));
+                    holder.textView2.setTextColor(ContextCompat.getColor(context, R.color.applozic_lite_black_color));
+                } else {
+                    holder.textView1.setVisibility(View.GONE);
+                    holder.contactNumberTextView.setVisibility(View.VISIBLE);
+                    holder.textView2.setTextColor(ContextCompat.getColor(context, R.color.black));
+                }
+                holder.checkBox.setVisibility(View.GONE);
+            } else {
+                holder.checkBox.setVisibility(View.VISIBLE);
+                holder.contactNumberTextView.setVisibility(View.VISIBLE);
+                holder.textView2.setTextColor(ContextCompat.getColor(context, R.color.black));
+            }
+
+            if (contact != null && !TextUtils.isEmpty(contact.getDisplayName())) {
+                contactNumber = contact.getDisplayName().toUpperCase();
+                firstLetter = contact.getDisplayName().toUpperCase().charAt(0);
+                if (firstLetter != '+') {
+                    holder.alphabeticImage.setText(String.valueOf(firstLetter));
+                } else if (contactNumber.length() >= 2) {
+                    holder.alphabeticImage.setText(String.valueOf(contactNumber.charAt(1)));
+                }
+                Character colorKey = AlphaNumberColorUtil.alphabetBackgroundColorMap.containsKey(firstLetter) ? firstLetter : null;
+                GradientDrawable bgShape = (GradientDrawable) holder.alphabeticImage.getBackground();
+                bgShape.setColor(context.getResources().getColor(AlphaNumberColorUtil.alphabetBackgroundColorMap.get(colorKey)));
+            }
+            holder.alphabeticImage.setVisibility(View.GONE);
+            holder.circleImageView.setVisibility(View.VISIBLE);
+            if (contact != null) {
+                if (contact.isDrawableResources()) {
+                    int drawableResourceId = context.getResources().getIdentifier(contact.getrDrawableName(), "drawable", context.getPackageName());
+                    holder.circleImageView.setImageResource(drawableResourceId);
+                } else {
+                    mImageLoader.loadImage(contact, holder.circleImageView, holder.alphabeticImage);
+                }
+            }
+            holder.textView2.setText(contact.getDisplayName());
+            if (!TextUtils.isEmpty(contact.getContactNumber())) {
+                holder.contactNumberTextView.setText(contact.getContactNumber());
+            } else {
+                holder.contactNumberTextView.setText("");
+            }
+            holder.checkBox.setOnClickListener(new View.OnClickListener() {
+                public void onClick(View v) {
+                    AppCompatCheckBox checkBox = (AppCompatCheckBox) v;
+                    if (checkBox.isChecked()) {
+                        userIdList.add(contact.getContactIds());
+                    } else if (!checkBox.isChecked()) {
+                        userIdList.remove(contact.getContactIds());
+                    }
+                }
+            });
+
+            // If the selected items contains the current item, set the checkbox to be checked
+
+            holder.checkBox.setChecked(userIdList.contains(contact.getContactIds()));
+
+
+            ///////////////////////
+            final int startIndex = indexOfSearchQuery(contact.getDisplayName());
+
+            if (startIndex == -1) {
+                // If the user didn't do a search, or the search string didn't match a display
+                // name, show the display name without highlighting
+                holder.textView2.setText(contact.getDisplayName());
+            } else {
+                // If the search string matched the display name, applies a SpannableString to
+                // highlight the search string with the displayed display name
+
+                // Wraps the display name in the SpannableString
+                final SpannableString highlightedName = new SpannableString(contact.getDisplayName());
+
+                // Sets the span to start at the starting point of the match and end at "length"
+                // characters beyond the starting point
+                highlightedName.setSpan(highlightTextSpan, startIndex,
+                        startIndex + mSearchTerm.length(), 0);
+
+                // Binds the SpannableString to the display name View object
+                holder.textView2.setText(highlightedName);
+
+            }
+
+        }
+
+        /**
+         * Overrides swapCursor to move the new Cursor into the AlphabetIndex as well as the
+         * CursorAdapter.
+         */
+        @Override
+        public Cursor swapCursor(Cursor newCursor) {
+            // Update the AlphabetIndexer with new cursor as well
+            mAlphabetIndexer.setCursor(newCursor);
+            return super.swapCursor(newCursor);
+        }
+
+        /**
+         * An override of getCount that simplifies accessing the Cursor. If the Cursor is null,
+         * getCount returns zero. As a result, no test for Cursor == null is needed.
+         */
+        @Override
+        public int getCount() {
+            if (getCursor() == null) {
+                return 0;
+            }
+            return super.getCount();
+        }
+
+        /**
+         * Defines the SectionIndexer.getSections() interface.
+         */
+        @Override
+        public Object[] getSections() {
+            return mAlphabetIndexer.getSections();
+        }
+
+        /**
+         * Defines the SectionIndexer.getPositionForSection() interface.
+         */
+        @Override
+        public int getPositionForSection(int i) {
+            if (getCursor() == null) {
+                return 0;
+            }
+            return mAlphabetIndexer.getPositionForSection(i);
+        }
+
+        /**
+         * Defines the SectionIndexer.getSectionForPosition() interface.
+         */
+        @Override
+        public int getSectionForPosition(int i) {
+            if (getCursor() == null) {
+                return 0;
+            }
+            return mAlphabetIndexer.getSectionForPosition(i);
+        }
+
+    }
+
+    private class ContactViewHolder {
+        AppCompatCheckBox checkBox;
+        TextView textView1, contactNumberTextView;
+        TextView alphabeticImage;
+        CircleImageView circleImageView;
+        TextView textView2;
+    }
+
+
+    private final class RefreshContactsScreenBroadcast extends BroadcastReceiver {
+        @Override
+        public void onReceive(Context context, Intent intent) {
+            if (intent != null && BroadcastService.INTENT_ACTIONS.UPDATE_USER_DETAIL.toString().equals(intent.getAction())){
+                if(getLoaderManager() != null) {
+                    try {
+                        if (TextUtils.isEmpty(contactsGroupId)) {
+                            getLoaderManager().restartLoader(
+                                    AppContactFragment.ContactsQuery.QUERY_ID, null, ContactSelectionFragment.this);
+                        }
+                    } catch (Exception e) {
+
+                    }
+                }
+            }
+        }
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        if(refreshContactsScreenBroadcast !=  null){
+            LocalBroadcastManager.getInstance(getActivity()).registerReceiver(refreshContactsScreenBroadcast,new IntentFilter(BroadcastService.INTENT_ACTIONS.UPDATE_USER_DETAIL.toString()));
+        }
+
+    }
+
+    @Override
+    public void onDestroy() {
+        super.onDestroy();
+        if(refreshContactsScreenBroadcast !=  null){
+            LocalBroadcastManager.getInstance(getActivity()).unregisterReceiver(refreshContactsScreenBroadcast);
+        }
+    }
+
+}
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/fragment/ProfileFragment.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/fragment/ProfileFragment.java
index 3c404ac7..ab293d72 100644
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/fragment/ProfileFragment.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/fragment/ProfileFragment.java
@@ -1,29 +1,27 @@
 package com.applozic.mobicomkit.uiwidgets.people.fragment;
 
 import android.app.Activity;
-import android.content.DialogInterface;
-import android.graphics.BitmapFactory;
-import android.graphics.Typeface;
-import android.support.v4.app.DialogFragment;
-import android.support.v4.app.Fragment;
 import android.app.ProgressDialog;
 import android.content.Context;
+import android.content.DialogInterface;
 import android.content.Intent;
 import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
 import android.net.Uri;
 import android.os.AsyncTask;
 import android.os.Bundle;
-
+import android.os.Handler;
+import android.support.v4.app.DialogFragment;
+import android.support.v4.app.Fragment;
 import android.support.v4.app.FragmentManager;
 import android.support.v4.app.FragmentTransaction;
 import android.support.v7.app.AlertDialog;
+import android.support.v7.widget.AppCompatCheckBox;
 import android.support.v7.widget.Toolbar;
 import android.text.InputType;
 import android.text.TextUtils;
-import android.util.Log;
 import android.util.TypedValue;
 import android.view.LayoutInflater;
-
 import android.view.Menu;
 import android.view.MenuInflater;
 import android.view.View;
@@ -35,64 +33,80 @@
 import android.widget.RelativeLayout;
 import android.widget.TextView;
 
-import com.applozic.mobicomkit.api.MobiComKitConstants;
 import com.applozic.mobicomkit.api.account.user.MobiComUserPreference;
 import com.applozic.mobicomkit.api.account.user.UserClientService;
 import com.applozic.mobicomkit.api.account.user.UserService;
 import com.applozic.mobicomkit.api.attachment.FileClientService;
-
 import com.applozic.mobicomkit.contact.AppContactService;
-
+import com.applozic.mobicomkit.uiwidgets.AlCustomizationSettings;
 import com.applozic.mobicomkit.uiwidgets.ApplozicSetting;
+import com.applozic.mobicomkit.uiwidgets.R;
 import com.applozic.mobicomkit.uiwidgets.conversation.fragment.PictureUploadPopUpFragment;
+import com.applozic.mobicomkit.uiwidgets.instruction.ApplozicPermissions;
+import com.applozic.mobicommons.commons.core.utils.PermissionsUtils;
 import com.applozic.mobicommons.commons.core.utils.Utils;
 import com.applozic.mobicommons.commons.image.ImageLoader;
 import com.applozic.mobicommons.commons.image.ImageUtils;
 import com.applozic.mobicommons.people.contact.Contact;
-import com.applozic.mobicomkit.uiwidgets.R;
 
 import java.io.File;
+import java.lang.ref.WeakReference;
 
 
 public class ProfileFragment extends Fragment {
 
     public static final int REQUEST_CODE_ATTACH_PHOTO = 101;
+    public static final int REQUEST_CODE_TAKE_PHOTO = 102;
     public static final int REQUEST_REMOVE_PHOTO = 102;
-    private static final String TAG = "ProfileFragment";
     public static final String ProfileFragmentTag = "ProfileFragment";
     public static final int PROFILE_UPDATED = 1001;
     public static final int LINE_WIDTH = 2;
     public static final float LEFT_MARGIN = 7.0f;
+    private static final String TAG = "ProfileFragment";
+    AppContactService contactService;
+    Contact userContact;
+    AlCustomizationSettings alCustomizationSettings;
     private ImageView img_profile;
-    private ImageView selectImageProfileIcon,statusEdit;
+    private ImageView selectImageProfileIcon, statusEdit, displayNameEdit, contactEdit;
     private Button logoutbtn;
     private TextView displayNameText;
     private TextView statusText;
-    private String DEFAULT_CONATCT_IMAGE= "applozic_default_contactImg.jpeg";
-
+    private TextView contactNumberText;
+    private String DEFAULT_CONATCT_IMAGE = "applozic_default_contactImg.jpeg";
     private ImageLoader mImageLoader; // Handles loading the contact image in a background thread
-    AppContactService contactService;
-    Contact userContact;
     private String changedStatusString;
+    private String displayName;
+    private String contactNumber;
+    private ApplozicPermissions applozicPermissions;
+    private RelativeLayout applozicProfileContactLayout;
+
+    public void setApplozicPermissions(ApplozicPermissions applozicPermissions) {
+        this.applozicPermissions = applozicPermissions;
+    }
 
+    public void setAlCustomizationSettings(AlCustomizationSettings alCustomizationSettings) {
+        this.alCustomizationSettings = alCustomizationSettings;
+    }
 
     @Override
     public View onCreateView(LayoutInflater inflater, ViewGroup container,
                              Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        View view = inflater.inflate(R.layout.activity_profile, container, false);
-
-
+        View view = inflater.inflate(R.layout.al_activity_profile, container, false);
         img_profile = (ImageView) view.findViewById(R.id.applozic_user_profile);
         statusEdit = (ImageView) view.findViewById(R.id.status_edit_btn);
+        displayNameEdit = (ImageView) view.findViewById(R.id.displayName_edit_btn);
+        contactEdit = (ImageView) view.findViewById(R.id.contact_edit_btn);
         selectImageProfileIcon = (ImageView) view.findViewById(R.id.applozic_user_profile_camera);
-        logoutbtn =  (Button) view.findViewById(R.id.applozic_profile_logout);
+        logoutbtn = (Button) view.findViewById(R.id.applozic_profile_logout);
         displayNameText = (TextView) view.findViewById(R.id.applozic_profile_displayname);
         statusText = (TextView) view.findViewById(R.id.applozic_profile_status);
+        contactNumberText = (TextView) view.findViewById(R.id.applozic_profile_contact);
+        applozicProfileContactLayout =  (RelativeLayout)view.findViewById(R.id.applozic_profile_contact_section_rl);
 
-        setupDeviderView(view,R.id.applozic_profile_section_rl,R.id.applozic_profile_verticalline_rl);
-        setupDeviderView(view,R.id.applozic_datausage_section_rl,R.id.applozic_datausage_verticalline_rl);
-        setupDeviderView(view,R.id.applozic_notification_section_rl,R.id.applozic_notification_verticalline_rl);
+        setupDeviderView(view, R.id.applozic_profile_section_rl, R.id.applozic_profile_verticalline_rl);
+        setupDeviderView(view, R.id.applozic_datausage_section_rl, R.id.applozic_datausage_verticalline_rl);
+        setupDeviderView(view, R.id.applozic_notification_section_rl, R.id.applozic_notification_verticalline_rl);
 
         Toolbar toolbar = (Toolbar) getActivity().findViewById(R.id.my_toolbar);
         toolbar.setClickable(false);
@@ -102,15 +116,23 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container,
 
         contactService = new AppContactService(getActivity());
         userContact = contactService.getContactById(MobiComUserPreference.getInstance(getActivity()).getUserId());
-        displayNameText.setText(userContact.getDisplayName());
-
-        if(!TextUtils.isEmpty(userContact.getStatus())){
+        if (!TextUtils.isEmpty(userContact.getDisplayName())) {
+            displayNameText.setText(userContact.getDisplayName());
+        }
+        if (!TextUtils.isEmpty(userContact.getStatus())) {
             statusText.setText(userContact.getStatus());
         }
-        mImageLoader = new ImageLoader(getActivity(), img_profile.getHeight()) {
+        if (!TextUtils.isEmpty(userContact.getContactNumber())) {
+            contactNumberText.setText(userContact.getContactNumber());
+        }else {
+            applozicProfileContactLayout.setVisibility(View.GONE);
+        }
+
+        final Context context = getActivity().getApplicationContext();
+        mImageLoader = new ImageLoader(context, img_profile.getHeight()) {
             @Override
             protected Bitmap processBitmap(Object data) {
-                return contactService.downloadContactImage(getContext(), (Contact) data);
+                return contactService.downloadContactImage(context, (Contact) data);
             }
         };
         //For profile image
@@ -121,7 +143,8 @@ public void onClick(View v) {
             }
         });
 
-        logoutbtn.setOnClickListener(new View.OnClickListener(){
+        logoutbtn.setVisibility(View.GONE);
+        logoutbtn.setOnClickListener(new View.OnClickListener() {
 
             @Override
             public void onClick(View v) {
@@ -144,20 +167,87 @@ public void onClick(View v) {
             @Override
             public void onClick(View v) {
                 AlertDialog.Builder builder = new AlertDialog.Builder(getContext());
-                builder.setTitle("Status");
+                builder.setTitle(R.string.status);
 
                 final EditText input = new EditText(getContext());
                 input.setInputType(InputType.TYPE_CLASS_TEXT);
                 builder.setView(input);
 
-                builder.setPositiveButton("OK", new DialogInterface.OnClickListener() {
+                builder.setPositiveButton(R.string.ok_alert, new DialogInterface.OnClickListener() {
                     @Override
                     public void onClick(DialogInterface dialog, int which) {
                         changedStatusString = input.getText().toString();
-                        new ProfilePictureUpload(changedStatusString,getActivity()).execute((Void[]) null);
+                        Contact contact = new Contact();
+                        contact.setStatus(changedStatusString);
+                        new ProfilePictureUpload(contact, getActivity(), null, statusText, null).execute((Void[]) null);
+                    }
+                });
+                builder.setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialog, int which) {
+                        dialog.cancel();
+                    }
+                });
+
+                builder.show();
+            }
+        });
+
+        displayNameEdit.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                AlertDialog.Builder builder = new AlertDialog.Builder(getContext());
+                builder.setTitle(getString(R.string.display_name));
+                final EditText input = new EditText(getContext());
+                input.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_FLAG_CAP_SENTENCES);
+                builder.setView(input);
+
+
+                builder.setPositiveButton(getString(R.string.ok_alert), new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialog, int which) {
+                        displayName = input.getText().toString();
+                        if (!displayName.trim().isEmpty() && !TextUtils.isEmpty(displayName)) {
+                            Contact contact = new Contact();
+                            contact.setFullName(displayName);
+                            new ProfilePictureUpload(contact, getActivity(), displayNameText, null, null).execute((Void[]) null);
+                        }
+                    }
+                });
+                builder.setNegativeButton(getString(R.string.cancel), new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialog, int which) {
+                        dialog.cancel();
+                    }
+                });
+
+                builder.show();
+            }
+        });
+
+        contactEdit.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                AlertDialog.Builder builder = new AlertDialog.Builder(getContext());
+                builder.setTitle(getString(R.string.profile_contact));
+                final EditText input = new EditText(getContext());
+                input.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_CLASS_PHONE);
+                builder.setView(input);
+
+
+                builder.setPositiveButton(getString(R.string.ok_alert), new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialog, int which) {
+                        contactNumber = input.getText().toString();
+
+                        if (!contactNumber.trim().isEmpty() && !TextUtils.isEmpty(contactNumber)) {
+                            Contact contact = new Contact();
+                            contact.setContactNumber(contactNumber);
+                            new ProfilePictureUpload(contact, getActivity(), null, null, contactNumberText).execute((Void[]) null);
+                        }
                     }
                 });
-                builder.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
+                builder.setNegativeButton(getString(R.string.cancel), new DialogInterface.OnClickListener() {
                     @Override
                     public void onClick(DialogInterface dialog, int which) {
                         dialog.cancel();
@@ -167,6 +257,7 @@ public void onClick(DialogInterface dialog, int which) {
                 builder.show();
             }
         });
+
         mImageLoader.setImageFadeIn(false);
         mImageLoader.setLoadingImage(R.drawable.applozic_ic_contact_picture_180_holo_light);
         mImageLoader.loadImage(userContact, img_profile);
@@ -178,15 +269,15 @@ public void onClick(DialogInterface dialog, int which) {
     public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
         super.onCreateOptionsMenu(menu, inflater);
         menu.findItem(R.id.refresh).setVisible(false);
+        menu.findItem(R.id.menu_search).setVisible(false);
     }
 
-    private void setupDeviderView(View view,int parentLayout, int childVerticalLineLayout) {
+    private void setupDeviderView(View view, int parentLayout, int childVerticalLineLayout) {
         final RelativeLayout layout = (RelativeLayout) view.findViewById(parentLayout);
-        final RelativeLayout childLayout = (RelativeLayout)view.findViewById(childVerticalLineLayout);
+        final RelativeLayout childLayout = (RelativeLayout) view.findViewById(childVerticalLineLayout);
         ViewTreeObserver viewTreeObserver = layout.getViewTreeObserver();
 
 
-
         viewTreeObserver.addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {
             @Override
             public void onGlobalLayout() {
@@ -194,8 +285,8 @@ public void onGlobalLayout() {
                 int height = layout.getMeasuredHeight();
                 float marginPx = TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, LEFT_MARGIN, getActivity().getResources().getDisplayMetrics());
                 float liineWidth = TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, LINE_WIDTH, getActivity().getResources().getDisplayMetrics());
-                RelativeLayout.LayoutParams layoutPrams = new RelativeLayout.LayoutParams((int)liineWidth, height );
-                layoutPrams.setMargins((int)marginPx,0,0,0);
+                RelativeLayout.LayoutParams layoutPrams = new RelativeLayout.LayoutParams((int) liineWidth, height);
+                layoutPrams.setMargins((int) marginPx, 0, 0, 0);
                 childLayout.setLayoutParams(layoutPrams);
             }
         });
@@ -204,28 +295,62 @@ public void onGlobalLayout() {
 
     public void processPhotoOption() {
         try {
-            FragmentManager supportFragmentManager = getActivity().getSupportFragmentManager();
-            DialogFragment fragment = new PictureUploadPopUpFragment();
-            fragment.setTargetFragment(this, REQUEST_CODE_ATTACH_PHOTO);
-            FragmentTransaction fragmentTransaction = supportFragmentManager
-                    .beginTransaction();
-            fragmentTransaction.addToBackStack(null);
-            fragment.show(fragmentTransaction, "PhotosAttachmentFragment");
-
+        if (PermissionsUtils.isCameraPermissionGranted(getContext()) && !PermissionsUtils.checkSelfForStoragePermission(getActivity())) {
+
+            new Handler().post(new Runnable() {
+                public void run() {
+                    FragmentManager supportFragmentManager = getActivity().getSupportFragmentManager();
+                    DialogFragment fragment = new PictureUploadPopUpFragment();
+                    fragment.setTargetFragment(ProfileFragment.this, REQUEST_CODE_ATTACH_PHOTO);
+                    FragmentTransaction fragmentTransaction = supportFragmentManager
+                            .beginTransaction();
+                    Fragment prev = getFragmentManager().findFragmentByTag("PhotosAttachmentFragment");
+                    if (prev != null) {
+                        fragmentTransaction.remove(prev);
+                    }
+                    fragmentTransaction.addToBackStack(null);
+                    fragment.show(fragmentTransaction, "PhotosAttachmentFragment");
+                }
+            });
 
+        } else {
+            if (Utils.hasMarshmallow()) {
+                if (PermissionsUtils.checkSelfForCameraPermission(getActivity())) {
+                    applozicPermissions.requestCameraPermissionForProfilePhoto();
+                } else {
+                    applozicPermissions.requestStoragePermissionsForProfilePhoto();
+                }
+            } else {
+                processPhotoOption();
+            }
+        }
         } catch (Exception e) {
 
         }
-
     }
 
-    public void handleProfileimageUpload(Uri imageUri) {
+    public void handleProfileimageUpload(boolean isSaveFile, Uri imageUri, File file) {
         img_profile.setImageDrawable(null);
         img_profile.setImageURI(imageUri);
-        new ProfilePictureUpload(imageUri,getActivity()).execute((Void[]) null);
+        new ProfilePictureUpload(isSaveFile, imageUri, file, getActivity()).execute((Void[]) null);
     }
 
-
+    @Override
+    public void onActivityResult(int requestCode, int resultCode, Intent intent) {
+        if (resultCode == Activity.RESULT_OK) {
+            super.onActivityResult(requestCode, resultCode, intent);
+            File file = FileClientService.getFilePath(DEFAULT_CONATCT_IMAGE, getContext(), "image", true);
+            if (file == null || !file.exists()) {
+                Utils.printLog(getActivity(),TAG, "file not found,exporting it from drawable");
+                Bitmap bm = BitmapFactory.decodeResource(getActivity().getResources(), R.drawable.applozic_ic_contact_picture_180_holo_light);
+                String filePath = ImageUtils.saveImageToInternalStorage(FileClientService.getFilePath(DEFAULT_CONATCT_IMAGE, getActivity().getApplicationContext(), "image", true), bm);
+                file = new File(filePath);
+            }
+            handleProfileimageUpload(false, Uri.parse(file.getAbsolutePath()), file);
+        } else {
+            Utils.printLog(getActivity(),TAG, "Activity result failed with code: " + resultCode);
+        }
+    }
 
     class ProfilePictureUpload extends AsyncTask<Void, Void, Boolean> {
 
@@ -233,16 +358,40 @@ public void handleProfileimageUpload(Uri imageUri) {
         Uri fileUri;
         String displayName;
         String status;
+        File file;
+        FileClientService fileClientService;
+        UserService userService;
+        boolean isSaveFile;
+        WeakReference<TextView> weakReferenceStatus;
+        WeakReference<TextView> weakReferenceDisplayName;
+        WeakReference<TextView> weakReferenceContactNumber;
+        String contactNumber;
         private ProgressDialog progressDialog;
 
-        public ProfilePictureUpload( Uri fileUri ,Context context) {
+
+        public ProfilePictureUpload(boolean isSaveFile, Uri fileUri, File file, Context context) {
             this.context = context;
-            this.fileUri=fileUri;
+            this.fileUri = fileUri;
+            this.isSaveFile = isSaveFile;
+            this.file = file;
+            this.fileClientService = new FileClientService(getActivity());
+            this.userService = UserService.getInstance(context);
+
         }
-        public ProfilePictureUpload( String status ,Context context) {
+
+        public ProfilePictureUpload(Contact contact, Context context, TextView displayNameTextView, TextView statusTextView, TextView contactNumberTextView) {
             this.context = context;
-            this.status=status;
+            this.status = contact.getStatus();
+            this.displayName = contact.getFullName();
+            this.contactNumber = contact.getContactNumber();
+            this.weakReferenceStatus = new WeakReference<TextView>(statusTextView);
+            this.weakReferenceDisplayName = new WeakReference<TextView>(displayNameTextView);
+            this.weakReferenceContactNumber = new WeakReference<TextView>(contactNumberTextView);
+            this.fileClientService = new FileClientService(getActivity());
+            this.userService = UserService.getInstance(context);
+
         }
+
         @Override
         protected void onPreExecute() {
             super.onPreExecute();
@@ -252,24 +401,20 @@ protected void onPreExecute() {
 
         @Override
         protected Boolean doInBackground(Void... params) {
-
-            FileClientService fileClientService =new FileClientService(getActivity());
-            UserService userService =  UserService.getInstance(context);
             try {
-                String response =null;
-                String filePath=null;
-                if(fileUri!=null){
-                    File myFile = new File(fileUri.getPath());
-                    response= fileClientService.uploadProfileImage(myFile.getAbsolutePath());
-                    filePath =  myFile.getAbsolutePath();
-                }
-                if(TextUtils.isEmpty(displayName)){
-                    this.displayName = userContact.getDisplayName();
+                String response = null;
+                String filePath = null;
+                if (fileUri != null) {
+                    if (isSaveFile) {
+                        fileClientService.writeFile(fileUri, file);
+                    }
+                    response = fileClientService.uploadProfileImage(file.getAbsolutePath());
+                    filePath = file.getAbsolutePath();
                 }
-                userService.updateDisplayNameORImageLink(displayName,response,filePath,status);
+                userService.updateDisplayNameORImageLink(displayName, response, filePath, status, contactNumber);
             } catch (Exception e) {
                 e.printStackTrace();
-                Log.i(ProfileFragment.class.getName(),  "Exception");
+                Utils.printLog(context, ProfileFragment.class.getName(), "Exception");
 
             }
             return true;
@@ -277,28 +422,28 @@ protected Boolean doInBackground(Void... params) {
 
         @Override
         protected void onPostExecute(final Boolean result) {
-            if(!TextUtils.isEmpty(changedStatusString)){
-                statusText.setText(changedStatusString);
+            if (weakReferenceStatus != null) {
+                TextView statusTextView = weakReferenceStatus.get();
+                if (statusTextView != null && !TextUtils.isEmpty(changedStatusString)) {
+                    statusTextView.setText(changedStatusString);
+                }
+            }
+            if (weakReferenceDisplayName != null) {
+                TextView displayNameTextView = weakReferenceDisplayName.get();
+                if (displayNameTextView != null && !TextUtils.isEmpty(displayName)) {
+                    displayNameTextView.setText(displayName);
+                }
             }
-            progressDialog.dismiss();
-        }
-
-    }
 
-    @Override
-    public void onActivityResult(int requestCode, int resultCode, Intent intent) {
-        if (resultCode == Activity.RESULT_OK) {
-            super.onActivityResult(requestCode, resultCode, intent);
-            File file = FileClientService.getFilePath(DEFAULT_CONATCT_IMAGE,getContext(), "image",true);
-            if(file==null || !file.exists()) {
-                Log.i(TAG,"file not found,exporting it from drawable");
-                Bitmap bm = BitmapFactory.decodeResource(getActivity().getResources(), R.drawable.applozic_ic_contact_picture_180_holo_light);
-                String filePath = ImageUtils.saveImageToInternalStorage(FileClientService.getFilePath(DEFAULT_CONATCT_IMAGE, getContext(), "image", true), bm);
-                file= new File(filePath);
+            if (weakReferenceContactNumber != null) {
+                TextView contactNumberTextView = weakReferenceContactNumber.get();
+                if (contactNumberTextView != null && !TextUtils.isEmpty(contactNumber)) {
+                    contactNumberTextView.setText(contactNumber);
+                }
+            }
+            if(progressDialog.isShowing()){
+                progressDialog.dismiss();
             }
-            handleProfileimageUpload(Uri.fromFile(file));
-        } else {
-            Log.i(TAG, "Activity result failed with code: " + resultCode);
         }
 
     }
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/fragment/UserProfileFragment.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/fragment/UserProfileFragment.java
index 25639c05..336f0d0b 100644
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/fragment/UserProfileFragment.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/fragment/UserProfileFragment.java
@@ -1,6 +1,7 @@
 package com.applozic.mobicomkit.uiwidgets.people.fragment;
 
 import android.app.Activity;
+import android.content.Context;
 import android.graphics.Bitmap;
 import android.graphics.drawable.GradientDrawable;
 import android.os.Bundle;
@@ -14,6 +15,7 @@
 import android.view.ViewGroup;
 import android.widget.TextView;
 
+import com.applozic.mobicomkit.broadcast.BroadcastService;
 import com.applozic.mobicomkit.contact.AppContactService;
 import com.applozic.mobicomkit.uiwidgets.R;
 import com.applozic.mobicomkit.uiwidgets.alphanumbericcolor.AlphaNumberColorUtil;
@@ -41,10 +43,11 @@
     public void onCreate(@Nullable Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         baseContactService = new AppContactService(getActivity());
-        contactImageLoader = new ImageLoader(getContext(), ImageUtils.getLargestScreenDimension((Activity) getContext())) {
+        final Context context = getActivity().getApplicationContext();
+        contactImageLoader = new ImageLoader(context, ImageUtils.getLargestScreenDimension((Activity) getContext())) {
             @Override
             protected Bitmap processBitmap(Object data) {
-                return baseContactService.downloadContactImage(getContext(), (Contact) data);
+                return baseContactService.downloadContactImage(context, (Contact) data);
             }
         };
         contactImageLoader.setLoadingImage(R.drawable.applozic_ic_contact_picture_180_holo_light);
@@ -105,7 +108,7 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle sa
             if (!TextUtils.isEmpty(contact.getContactNumber())) {
                 phone_cardView.setVisibility(View.VISIBLE);
                 phone.setText(contact.getContactNumber());
-            }else {
+            } else {
                 phone_cardView.setVisibility(View.GONE);
             }
 
@@ -113,4 +116,56 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle sa
 
         return view;
     }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        if (contact != null) {
+            BroadcastService.currentUserProfileUserId = contact.getUserId();
+            refreshContactData();
+        }
+    }
+
+    @Override
+    public void onPause() {
+        super.onPause();
+        BroadcastService.currentUserProfileUserId = null;
+    }
+
+    public void refreshContactData() {
+        if (contact != null) {
+            Contact updateContact = baseContactService.getContactById(contact.getContactIds());
+            if (updateContact != null && (!TextUtils.isEmpty(contact.getImageURL())) && (!contact.getImageURL().equals(updateContact.getImageURL()))) {
+                contactImageLoader.loadImage(updateContact, contactImage);
+            }
+            if (!TextUtils.isEmpty(updateContact.getStatus())) {
+                status_cardView.setVisibility(View.VISIBLE);
+                status.setText(updateContact.getStatus());
+            }
+
+            if (!TextUtils.isEmpty(updateContact.getContactNumber())) {
+                phone_cardView.setVisibility(View.VISIBLE);
+                phone.setText(updateContact.getContactNumber());
+            }
+            if (updateContact != null && (!TextUtils.isEmpty(contact.getDisplayName())) && (!contact.getDisplayName().equals(updateContact.getDisplayName()))) {
+                name_cardView.setVisibility(View.VISIBLE);
+                name.setText(updateContact.getDisplayName());
+                reload();
+            }
+        }
+    }
+
+    void reload() {
+        StringBuffer stringBufferTitle = new StringBuffer();
+        if (contact != null) {
+            Contact updatedInfoContact = baseContactService.getContactById(contact.getContactIds());
+            if (updatedInfoContact != null && (!TextUtils.isEmpty(contact.getDisplayName())) && (!contact.getDisplayName().equals(updatedInfoContact.getDisplayName()))) {
+                stringBufferTitle.append(updatedInfoContact.getDisplayName());
+            }
+        }
+        if (stringBufferTitle != null) {
+            ((AppCompatActivity) getActivity()).getSupportActionBar().setTitle(stringBufferTitle.toString());
+        }
+    }
+
 }
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/schedule/SelectDateFragment.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/schedule/SelectDateFragment.java
index 32727644..0c298d40 100755
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/schedule/SelectDateFragment.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/schedule/SelectDateFragment.java
@@ -20,10 +20,6 @@ public SelectDateFragment() {
 
     }
 
-    public SelectDateFragment(TextView selectedDate) {
-        this.selectedDate = selectedDate;
-    }
-
     public void setScheduledDateView(View scheduledDateView) {
         this.scheduledDateView = scheduledDateView;
     }
diff --git a/mobicomkitui/src/main/res/anim/mobicom_multimedia_option_shrink_from_bottom.xml b/mobicomkitui/src/main/res/anim/mobicom_multimedia_option_shrink_from_bottom.xml
deleted file mode 100755
index d7e178d5..00000000
--- a/mobicomkitui/src/main/res/anim/mobicom_multimedia_option_shrink_from_bottom.xml
+++ /dev/null
@@ -1,16 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<set xmlns:android="http://schemas.android.com/apk/res/android">
-    <scale
-        android:duration="@android:integer/config_shortAnimTime"
-        android:fromXScale="1.0"
-        android:fromYScale="1.0"
-        android:pivotX="50%"
-        android:pivotY="0%"
-        android:toXScale="0.3"
-        android:toYScale="0.3" />
-    <alpha
-        android:duration="@android:integer/config_shortAnimTime"
-        android:fromAlpha="1.0"
-        android:interpolator="@android:anim/accelerate_interpolator"
-        android:toAlpha="0.0" />
-</set>
\ No newline at end of file
diff --git a/mobicomkitui/src/main/res/anim/mobicom_multimedia_options_grow_from_top.xml b/mobicomkitui/src/main/res/anim/mobicom_multimedia_options_grow_from_top.xml
deleted file mode 100644
index 767c1b12..00000000
--- a/mobicomkitui/src/main/res/anim/mobicom_multimedia_options_grow_from_top.xml
+++ /dev/null
@@ -1,16 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<set xmlns:android="http://schemas.android.com/apk/res/android">
-    <scale
-        android:duration="@android:integer/config_shortAnimTime"
-        android:fromXScale="0.3"
-        android:fromYScale="0.3"
-        android:pivotX="50%"
-        android:pivotY="0%"
-        android:toXScale="1.0"
-        android:toYScale="1.0" />
-    <alpha
-        android:duration="@android:integer/config_shortAnimTime"
-        android:fromAlpha="0.0"
-        android:interpolator="@android:anim/decelerate_interpolator"
-        android:toAlpha="1.0" />
-</set>
\ No newline at end of file
diff --git a/mobicomkitui/src/main/res/drawable-hdpi/applozic_audio_delete.png b/mobicomkitui/src/main/res/drawable-hdpi/applozic_audio_delete.png
new file mode 100644
index 00000000..d29bab89
Binary files /dev/null and b/mobicomkitui/src/main/res/drawable-hdpi/applozic_audio_delete.png differ
diff --git a/mobicomkitui/src/main/res/drawable-hdpi/applozic_audio_record.png b/mobicomkitui/src/main/res/drawable-hdpi/applozic_audio_record.png
new file mode 100644
index 00000000..5509646d
Binary files /dev/null and b/mobicomkitui/src/main/res/drawable-hdpi/applozic_audio_record.png differ
diff --git a/mobicomkitui/src/main/res/drawable-hdpi/applozic_chat_left_icon.9.png b/mobicomkitui/src/main/res/drawable-hdpi/applozic_chat_left_icon.9.png
new file mode 100755
index 00000000..bdecc700
Binary files /dev/null and b/mobicomkitui/src/main/res/drawable-hdpi/applozic_chat_left_icon.9.png differ
diff --git a/mobicomkitui/src/main/res/drawable-hdpi/applozic_ic_action_email.png b/mobicomkitui/src/main/res/drawable-hdpi/applozic_ic_action_email.png
deleted file mode 100755
index 2e585513..00000000
Binary files a/mobicomkitui/src/main/res/drawable-hdpi/applozic_ic_action_email.png and /dev/null differ
diff --git a/mobicomkitui/src/main/res/drawable-hdpi/applozic_ic_action_help.png b/mobicomkitui/src/main/res/drawable-hdpi/applozic_ic_action_help.png
deleted file mode 100755
index 382d314c..00000000
Binary files a/mobicomkitui/src/main/res/drawable-hdpi/applozic_ic_action_help.png and /dev/null differ
diff --git a/mobicomkitui/src/main/res/drawable-hdpi/applozic_ic_action_settings.png b/mobicomkitui/src/main/res/drawable-hdpi/applozic_ic_action_settings.png
deleted file mode 100755
index 0eb78f7c..00000000
Binary files a/mobicomkitui/src/main/res/drawable-hdpi/applozic_ic_action_settings.png and /dev/null differ
diff --git a/mobicomkitui/src/main/res/drawable-hdpi/applozic_ic_location_on_white_24dp.png b/mobicomkitui/src/main/res/drawable-hdpi/applozic_ic_location_on_white_24dp.png
new file mode 100644
index 00000000..7c281c3f
Binary files /dev/null and b/mobicomkitui/src/main/res/drawable-hdpi/applozic_ic_location_on_white_24dp.png differ
diff --git a/mobicomkitui/src/main/res/drawable-hdpi/applozic_ic_music_note.png b/mobicomkitui/src/main/res/drawable-hdpi/applozic_ic_music_note.png
new file mode 100644
index 00000000..c3f81e50
Binary files /dev/null and b/mobicomkitui/src/main/res/drawable-hdpi/applozic_ic_music_note.png differ
diff --git a/mobicomkitui/src/main/res/drawable-hdpi/applozic_ic_person_white.png b/mobicomkitui/src/main/res/drawable-hdpi/applozic_ic_person_white.png
new file mode 100644
index 00000000..56708b0b
Binary files /dev/null and b/mobicomkitui/src/main/res/drawable-hdpi/applozic_ic_person_white.png differ
diff --git a/mobicomkitui/src/main/res/drawable-hdpi/applozic_ic_twitter.png b/mobicomkitui/src/main/res/drawable-hdpi/applozic_ic_twitter.png
deleted file mode 100755
index e2be3215..00000000
Binary files a/mobicomkitui/src/main/res/drawable-hdpi/applozic_ic_twitter.png and /dev/null differ
diff --git a/mobicomkitui/src/main/res/drawable-hdpi/applozic_mic_pressed.png b/mobicomkitui/src/main/res/drawable-hdpi/applozic_mic_pressed.png
new file mode 100644
index 00000000..566b5acb
Binary files /dev/null and b/mobicomkitui/src/main/res/drawable-hdpi/applozic_mic_pressed.png differ
diff --git a/mobicomkitui/src/main/res/drawable-hdpi/cancel_icon.png b/mobicomkitui/src/main/res/drawable-hdpi/cancel_icon.png
new file mode 100755
index 00000000..f889617e
Binary files /dev/null and b/mobicomkitui/src/main/res/drawable-hdpi/cancel_icon.png differ
diff --git a/mobicomkitui/src/main/res/drawable-hdpi/circle_arrow_down_download.png b/mobicomkitui/src/main/res/drawable-hdpi/circle_arrow_down_download.png
new file mode 100644
index 00000000..ad0f89b7
Binary files /dev/null and b/mobicomkitui/src/main/res/drawable-hdpi/circle_arrow_down_download.png differ
diff --git a/mobicomkitui/src/main/res/drawable-hdpi/circle_arrow_upload.png b/mobicomkitui/src/main/res/drawable-hdpi/circle_arrow_upload.png
new file mode 100644
index 00000000..f62dd755
Binary files /dev/null and b/mobicomkitui/src/main/res/drawable-hdpi/circle_arrow_upload.png differ
diff --git a/mobicomkitui/src/main/res/drawable-hdpi/ic_communication_call_missed.png b/mobicomkitui/src/main/res/drawable-hdpi/ic_communication_call_missed.png
new file mode 100755
index 00000000..d0369547
Binary files /dev/null and b/mobicomkitui/src/main/res/drawable-hdpi/ic_communication_call_missed.png differ
diff --git a/mobicomkitui/src/main/res/drawable-hdpi/ic_documentreceive.png b/mobicomkitui/src/main/res/drawable-hdpi/ic_documentreceive.png
new file mode 100644
index 00000000..996baeba
Binary files /dev/null and b/mobicomkitui/src/main/res/drawable-hdpi/ic_documentreceive.png differ
diff --git a/mobicomkitui/src/main/res/drawable-hdpi/ic_pause_circle_outline.png b/mobicomkitui/src/main/res/drawable-hdpi/ic_pause_circle_outline.png
new file mode 100644
index 00000000..4b082da8
Binary files /dev/null and b/mobicomkitui/src/main/res/drawable-hdpi/ic_pause_circle_outline.png differ
diff --git a/mobicomkitui/src/main/res/drawable-hdpi/ic_play_circle_outline.png b/mobicomkitui/src/main/res/drawable-hdpi/ic_play_circle_outline.png
new file mode 100644
index 00000000..3cb3343d
Binary files /dev/null and b/mobicomkitui/src/main/res/drawable-hdpi/ic_play_circle_outline.png differ
diff --git a/mobicomkitui/src/main/res/drawable-hdpi/mobicom_ic_launcher.png b/mobicomkitui/src/main/res/drawable-hdpi/mobicom_ic_launcher.png
old mode 100755
new mode 100644
index 6558fbc2..cde69bcc
Binary files a/mobicomkitui/src/main/res/drawable-hdpi/mobicom_ic_launcher.png and b/mobicomkitui/src/main/res/drawable-hdpi/mobicom_ic_launcher.png differ
diff --git a/mobicomkitui/src/main/res/drawable-hdpi/slide_arrow_left.png b/mobicomkitui/src/main/res/drawable-hdpi/slide_arrow_left.png
new file mode 100644
index 00000000..6592d1a4
Binary files /dev/null and b/mobicomkitui/src/main/res/drawable-hdpi/slide_arrow_left.png differ
diff --git a/mobicomkitui/src/main/res/drawable-hdpi/slide_arrow_right.png b/mobicomkitui/src/main/res/drawable-hdpi/slide_arrow_right.png
new file mode 100644
index 00000000..9bbd3805
Binary files /dev/null and b/mobicomkitui/src/main/res/drawable-hdpi/slide_arrow_right.png differ
diff --git a/mobicomkitui/src/main/res/drawable-mdpi/applozic_audio_delete.png b/mobicomkitui/src/main/res/drawable-mdpi/applozic_audio_delete.png
new file mode 100644
index 00000000..115a1acc
Binary files /dev/null and b/mobicomkitui/src/main/res/drawable-mdpi/applozic_audio_delete.png differ
diff --git a/mobicomkitui/src/main/res/drawable-mdpi/applozic_audio_record.png b/mobicomkitui/src/main/res/drawable-mdpi/applozic_audio_record.png
new file mode 100644
index 00000000..d38940c1
Binary files /dev/null and b/mobicomkitui/src/main/res/drawable-mdpi/applozic_audio_record.png differ
diff --git a/mobicomkitui/src/main/res/drawable-mdpi/applozic_chat_left_icon.9.png b/mobicomkitui/src/main/res/drawable-mdpi/applozic_chat_left_icon.9.png
new file mode 100755
index 00000000..f3723a03
Binary files /dev/null and b/mobicomkitui/src/main/res/drawable-mdpi/applozic_chat_left_icon.9.png differ
diff --git a/mobicomkitui/src/main/res/drawable-mdpi/applozic_ic_action_email.png b/mobicomkitui/src/main/res/drawable-mdpi/applozic_ic_action_email.png
deleted file mode 100755
index 1fc44434..00000000
Binary files a/mobicomkitui/src/main/res/drawable-mdpi/applozic_ic_action_email.png and /dev/null differ
diff --git a/mobicomkitui/src/main/res/drawable-mdpi/applozic_ic_action_help.png b/mobicomkitui/src/main/res/drawable-mdpi/applozic_ic_action_help.png
deleted file mode 100755
index 5876cdea..00000000
Binary files a/mobicomkitui/src/main/res/drawable-mdpi/applozic_ic_action_help.png and /dev/null differ
diff --git a/mobicomkitui/src/main/res/drawable-mdpi/applozic_ic_action_settings.png b/mobicomkitui/src/main/res/drawable-mdpi/applozic_ic_action_settings.png
deleted file mode 100755
index c290e590..00000000
Binary files a/mobicomkitui/src/main/res/drawable-mdpi/applozic_ic_action_settings.png and /dev/null differ
diff --git a/mobicomkitui/src/main/res/drawable-mdpi/applozic_ic_location_on_white_24dp.png b/mobicomkitui/src/main/res/drawable-mdpi/applozic_ic_location_on_white_24dp.png
new file mode 100644
index 00000000..933eb514
Binary files /dev/null and b/mobicomkitui/src/main/res/drawable-mdpi/applozic_ic_location_on_white_24dp.png differ
diff --git a/mobicomkitui/src/main/res/drawable-mdpi/applozic_ic_music_note.png b/mobicomkitui/src/main/res/drawable-mdpi/applozic_ic_music_note.png
new file mode 100644
index 00000000..bb376b56
Binary files /dev/null and b/mobicomkitui/src/main/res/drawable-mdpi/applozic_ic_music_note.png differ
diff --git a/mobicomkitui/src/main/res/drawable-mdpi/applozic_ic_person_white.png b/mobicomkitui/src/main/res/drawable-mdpi/applozic_ic_person_white.png
new file mode 100644
index 00000000..f0b1c725
Binary files /dev/null and b/mobicomkitui/src/main/res/drawable-mdpi/applozic_ic_person_white.png differ
diff --git a/mobicomkitui/src/main/res/drawable-mdpi/applozic_ic_twitter.png b/mobicomkitui/src/main/res/drawable-mdpi/applozic_ic_twitter.png
deleted file mode 100755
index e2be3215..00000000
Binary files a/mobicomkitui/src/main/res/drawable-mdpi/applozic_ic_twitter.png and /dev/null differ
diff --git a/mobicomkitui/src/main/res/drawable-mdpi/cancel_icon.png b/mobicomkitui/src/main/res/drawable-mdpi/cancel_icon.png
new file mode 100755
index 00000000..f889617e
Binary files /dev/null and b/mobicomkitui/src/main/res/drawable-mdpi/cancel_icon.png differ
diff --git a/mobicomkitui/src/main/res/drawable-mdpi/circle_arrow_down_download.png b/mobicomkitui/src/main/res/drawable-mdpi/circle_arrow_down_download.png
new file mode 100644
index 00000000..2a955e74
Binary files /dev/null and b/mobicomkitui/src/main/res/drawable-mdpi/circle_arrow_down_download.png differ
diff --git a/mobicomkitui/src/main/res/drawable-mdpi/circle_arrow_upload.png b/mobicomkitui/src/main/res/drawable-mdpi/circle_arrow_upload.png
new file mode 100644
index 00000000..c0783ba7
Binary files /dev/null and b/mobicomkitui/src/main/res/drawable-mdpi/circle_arrow_upload.png differ
diff --git a/mobicomkitui/src/main/res/drawable-mdpi/ic_communication_call_missed.png b/mobicomkitui/src/main/res/drawable-mdpi/ic_communication_call_missed.png
new file mode 100755
index 00000000..dcaf17ce
Binary files /dev/null and b/mobicomkitui/src/main/res/drawable-mdpi/ic_communication_call_missed.png differ
diff --git a/mobicomkitui/src/main/res/drawable-mdpi/ic_documentreceive.png b/mobicomkitui/src/main/res/drawable-mdpi/ic_documentreceive.png
new file mode 100644
index 00000000..2c368528
Binary files /dev/null and b/mobicomkitui/src/main/res/drawable-mdpi/ic_documentreceive.png differ
diff --git a/mobicomkitui/src/main/res/drawable-mdpi/ic_pause_circle_outline.png b/mobicomkitui/src/main/res/drawable-mdpi/ic_pause_circle_outline.png
new file mode 100644
index 00000000..0c9ac5ed
Binary files /dev/null and b/mobicomkitui/src/main/res/drawable-mdpi/ic_pause_circle_outline.png differ
diff --git a/mobicomkitui/src/main/res/drawable-mdpi/ic_play_circle_outline.png b/mobicomkitui/src/main/res/drawable-mdpi/ic_play_circle_outline.png
new file mode 100644
index 00000000..5f57cbe3
Binary files /dev/null and b/mobicomkitui/src/main/res/drawable-mdpi/ic_play_circle_outline.png differ
diff --git a/mobicomkitui/src/main/res/drawable-mdpi/mobicom_ic_launcher.png b/mobicomkitui/src/main/res/drawable-mdpi/mobicom_ic_launcher.png
old mode 100755
new mode 100644
index 347e03ee..c133a0cb
Binary files a/mobicomkitui/src/main/res/drawable-mdpi/mobicom_ic_launcher.png and b/mobicomkitui/src/main/res/drawable-mdpi/mobicom_ic_launcher.png differ
diff --git a/mobicomkitui/src/main/res/drawable-mdpi/slide_left.png b/mobicomkitui/src/main/res/drawable-mdpi/slide_left.png
new file mode 100644
index 00000000..8209120b
Binary files /dev/null and b/mobicomkitui/src/main/res/drawable-mdpi/slide_left.png differ
diff --git a/mobicomkitui/src/main/res/drawable-mdpi/slidearrow.png b/mobicomkitui/src/main/res/drawable-mdpi/slidearrow.png
new file mode 100644
index 00000000..9a7ce8dd
Binary files /dev/null and b/mobicomkitui/src/main/res/drawable-mdpi/slidearrow.png differ
diff --git a/mobicomkitui/src/main/res/drawable-xhdpi/applozic_audio_delete.png b/mobicomkitui/src/main/res/drawable-xhdpi/applozic_audio_delete.png
new file mode 100644
index 00000000..131d4700
Binary files /dev/null and b/mobicomkitui/src/main/res/drawable-xhdpi/applozic_audio_delete.png differ
diff --git a/mobicomkitui/src/main/res/drawable-xhdpi/applozic_audio_record.png b/mobicomkitui/src/main/res/drawable-xhdpi/applozic_audio_record.png
new file mode 100644
index 00000000..abc7689c
Binary files /dev/null and b/mobicomkitui/src/main/res/drawable-xhdpi/applozic_audio_record.png differ
diff --git a/mobicomkitui/src/main/res/drawable-xhdpi/applozic_chat_left_icon.9.png b/mobicomkitui/src/main/res/drawable-xhdpi/applozic_chat_left_icon.9.png
new file mode 100755
index 00000000..69682103
Binary files /dev/null and b/mobicomkitui/src/main/res/drawable-xhdpi/applozic_chat_left_icon.9.png differ
diff --git a/mobicomkitui/src/main/res/drawable-xhdpi/applozic_ic_action_email.png b/mobicomkitui/src/main/res/drawable-xhdpi/applozic_ic_action_email.png
deleted file mode 100755
index b91e4b26..00000000
Binary files a/mobicomkitui/src/main/res/drawable-xhdpi/applozic_ic_action_email.png and /dev/null differ
diff --git a/mobicomkitui/src/main/res/drawable-xhdpi/applozic_ic_action_help.png b/mobicomkitui/src/main/res/drawable-xhdpi/applozic_ic_action_help.png
deleted file mode 100755
index 19a9df33..00000000
Binary files a/mobicomkitui/src/main/res/drawable-xhdpi/applozic_ic_action_help.png and /dev/null differ
diff --git a/mobicomkitui/src/main/res/drawable-xhdpi/applozic_ic_action_settings.png b/mobicomkitui/src/main/res/drawable-xhdpi/applozic_ic_action_settings.png
deleted file mode 100755
index 999d0f0d..00000000
Binary files a/mobicomkitui/src/main/res/drawable-xhdpi/applozic_ic_action_settings.png and /dev/null differ
diff --git a/mobicomkitui/src/main/res/drawable-xhdpi/applozic_ic_location_on_white_24dp.png b/mobicomkitui/src/main/res/drawable-xhdpi/applozic_ic_location_on_white_24dp.png
new file mode 100644
index 00000000..814ca8dd
Binary files /dev/null and b/mobicomkitui/src/main/res/drawable-xhdpi/applozic_ic_location_on_white_24dp.png differ
diff --git a/mobicomkitui/src/main/res/drawable-xhdpi/applozic_ic_music_note.png b/mobicomkitui/src/main/res/drawable-xhdpi/applozic_ic_music_note.png
new file mode 100644
index 00000000..e44e4c09
Binary files /dev/null and b/mobicomkitui/src/main/res/drawable-xhdpi/applozic_ic_music_note.png differ
diff --git a/mobicomkitui/src/main/res/drawable-xhdpi/applozic_ic_person_white.png b/mobicomkitui/src/main/res/drawable-xhdpi/applozic_ic_person_white.png
new file mode 100644
index 00000000..aea15f0b
Binary files /dev/null and b/mobicomkitui/src/main/res/drawable-xhdpi/applozic_ic_person_white.png differ
diff --git a/mobicomkitui/src/main/res/drawable-xhdpi/applozic_ic_twitter.png b/mobicomkitui/src/main/res/drawable-xhdpi/applozic_ic_twitter.png
deleted file mode 100755
index 68c394ad..00000000
Binary files a/mobicomkitui/src/main/res/drawable-xhdpi/applozic_ic_twitter.png and /dev/null differ
diff --git a/mobicomkitui/src/main/res/drawable-xhdpi/cancel_icon.png b/mobicomkitui/src/main/res/drawable-xhdpi/cancel_icon.png
new file mode 100755
index 00000000..f889617e
Binary files /dev/null and b/mobicomkitui/src/main/res/drawable-xhdpi/cancel_icon.png differ
diff --git a/mobicomkitui/src/main/res/drawable-xhdpi/circle_arrow_down_download.png b/mobicomkitui/src/main/res/drawable-xhdpi/circle_arrow_down_download.png
new file mode 100644
index 00000000..9de1a7c8
Binary files /dev/null and b/mobicomkitui/src/main/res/drawable-xhdpi/circle_arrow_down_download.png differ
diff --git a/mobicomkitui/src/main/res/drawable-xhdpi/circle_arrow_upload.png b/mobicomkitui/src/main/res/drawable-xhdpi/circle_arrow_upload.png
new file mode 100644
index 00000000..a87ad35a
Binary files /dev/null and b/mobicomkitui/src/main/res/drawable-xhdpi/circle_arrow_upload.png differ
diff --git a/mobicomkitui/src/main/res/drawable-xhdpi/ic_communication_call_missed.png b/mobicomkitui/src/main/res/drawable-xhdpi/ic_communication_call_missed.png
new file mode 100755
index 00000000..4bda4b95
Binary files /dev/null and b/mobicomkitui/src/main/res/drawable-xhdpi/ic_communication_call_missed.png differ
diff --git a/mobicomkitui/src/main/res/drawable-xhdpi/ic_documentreceive.png b/mobicomkitui/src/main/res/drawable-xhdpi/ic_documentreceive.png
new file mode 100644
index 00000000..b9425847
Binary files /dev/null and b/mobicomkitui/src/main/res/drawable-xhdpi/ic_documentreceive.png differ
diff --git a/mobicomkitui/src/main/res/drawable-xhdpi/ic_pause_circle_outline.png b/mobicomkitui/src/main/res/drawable-xhdpi/ic_pause_circle_outline.png
new file mode 100644
index 00000000..41da9eaf
Binary files /dev/null and b/mobicomkitui/src/main/res/drawable-xhdpi/ic_pause_circle_outline.png differ
diff --git a/mobicomkitui/src/main/res/drawable-xhdpi/ic_play_circle_outline.png b/mobicomkitui/src/main/res/drawable-xhdpi/ic_play_circle_outline.png
new file mode 100644
index 00000000..beb25686
Binary files /dev/null and b/mobicomkitui/src/main/res/drawable-xhdpi/ic_play_circle_outline.png differ
diff --git a/mobicomkitui/src/main/res/drawable-xhdpi/mobicom_ic_launcher.png b/mobicomkitui/src/main/res/drawable-xhdpi/mobicom_ic_launcher.png
old mode 100755
new mode 100644
index d17f991a..bfa42f0e
Binary files a/mobicomkitui/src/main/res/drawable-xhdpi/mobicom_ic_launcher.png and b/mobicomkitui/src/main/res/drawable-xhdpi/mobicom_ic_launcher.png differ
diff --git a/mobicomkitui/src/main/res/drawable-xhdpi/slide_left.png b/mobicomkitui/src/main/res/drawable-xhdpi/slide_left.png
new file mode 100644
index 00000000..4b477dc1
Binary files /dev/null and b/mobicomkitui/src/main/res/drawable-xhdpi/slide_left.png differ
diff --git a/mobicomkitui/src/main/res/drawable-xhdpi/slidearrow.png b/mobicomkitui/src/main/res/drawable-xhdpi/slidearrow.png
new file mode 100644
index 00000000..b6193e2e
Binary files /dev/null and b/mobicomkitui/src/main/res/drawable-xhdpi/slidearrow.png differ
diff --git a/mobicomkitui/src/main/res/drawable-xxhdpi/applozic_audio_delete.png b/mobicomkitui/src/main/res/drawable-xxhdpi/applozic_audio_delete.png
new file mode 100644
index 00000000..1990416c
Binary files /dev/null and b/mobicomkitui/src/main/res/drawable-xxhdpi/applozic_audio_delete.png differ
diff --git a/mobicomkitui/src/main/res/drawable-xxhdpi/applozic_audio_record.png b/mobicomkitui/src/main/res/drawable-xxhdpi/applozic_audio_record.png
new file mode 100644
index 00000000..7b6b9e6d
Binary files /dev/null and b/mobicomkitui/src/main/res/drawable-xxhdpi/applozic_audio_record.png differ
diff --git a/mobicomkitui/src/main/res/drawable-xxhdpi/applozic_chat_left_icon.9.png b/mobicomkitui/src/main/res/drawable-xxhdpi/applozic_chat_left_icon.9.png
new file mode 100755
index 00000000..49851edc
Binary files /dev/null and b/mobicomkitui/src/main/res/drawable-xxhdpi/applozic_chat_left_icon.9.png differ
diff --git a/mobicomkitui/src/main/res/drawable-xxhdpi/applozic_ic_location_on_white_24dp.png b/mobicomkitui/src/main/res/drawable-xxhdpi/applozic_ic_location_on_white_24dp.png
new file mode 100644
index 00000000..078b10d4
Binary files /dev/null and b/mobicomkitui/src/main/res/drawable-xxhdpi/applozic_ic_location_on_white_24dp.png differ
diff --git a/mobicomkitui/src/main/res/drawable-xxhdpi/applozic_ic_music_note.png b/mobicomkitui/src/main/res/drawable-xxhdpi/applozic_ic_music_note.png
new file mode 100644
index 00000000..f2773b52
Binary files /dev/null and b/mobicomkitui/src/main/res/drawable-xxhdpi/applozic_ic_music_note.png differ
diff --git a/mobicomkitui/src/main/res/drawable-xxhdpi/applozic_ic_person_white.png b/mobicomkitui/src/main/res/drawable-xxhdpi/applozic_ic_person_white.png
new file mode 100644
index 00000000..184f7418
Binary files /dev/null and b/mobicomkitui/src/main/res/drawable-xxhdpi/applozic_ic_person_white.png differ
diff --git a/mobicomkitui/src/main/res/drawable-xxhdpi/applozic_ic_twitter.png b/mobicomkitui/src/main/res/drawable-xxhdpi/applozic_ic_twitter.png
deleted file mode 100755
index 6a09a47d..00000000
Binary files a/mobicomkitui/src/main/res/drawable-xxhdpi/applozic_ic_twitter.png and /dev/null differ
diff --git a/mobicomkitui/src/main/res/drawable-xxhdpi/cancel_icon.png b/mobicomkitui/src/main/res/drawable-xxhdpi/cancel_icon.png
new file mode 100755
index 00000000..f889617e
Binary files /dev/null and b/mobicomkitui/src/main/res/drawable-xxhdpi/cancel_icon.png differ
diff --git a/mobicomkitui/src/main/res/drawable-xxhdpi/circle_arrow_down_download.png b/mobicomkitui/src/main/res/drawable-xxhdpi/circle_arrow_down_download.png
new file mode 100644
index 00000000..15558a64
Binary files /dev/null and b/mobicomkitui/src/main/res/drawable-xxhdpi/circle_arrow_down_download.png differ
diff --git a/mobicomkitui/src/main/res/drawable-xxhdpi/circle_arrow_upload.png b/mobicomkitui/src/main/res/drawable-xxhdpi/circle_arrow_upload.png
new file mode 100644
index 00000000..f35fc043
Binary files /dev/null and b/mobicomkitui/src/main/res/drawable-xxhdpi/circle_arrow_upload.png differ
diff --git a/mobicomkitui/src/main/res/drawable-xxhdpi/ic_communication_call_missed.png b/mobicomkitui/src/main/res/drawable-xxhdpi/ic_communication_call_missed.png
new file mode 100755
index 00000000..91e80008
Binary files /dev/null and b/mobicomkitui/src/main/res/drawable-xxhdpi/ic_communication_call_missed.png differ
diff --git a/mobicomkitui/src/main/res/drawable-xxhdpi/ic_documentreceive.png b/mobicomkitui/src/main/res/drawable-xxhdpi/ic_documentreceive.png
new file mode 100644
index 00000000..e25ea11c
Binary files /dev/null and b/mobicomkitui/src/main/res/drawable-xxhdpi/ic_documentreceive.png differ
diff --git a/mobicomkitui/src/main/res/drawable-xxhdpi/ic_pause_circle_outline.png b/mobicomkitui/src/main/res/drawable-xxhdpi/ic_pause_circle_outline.png
new file mode 100644
index 00000000..cb1409a7
Binary files /dev/null and b/mobicomkitui/src/main/res/drawable-xxhdpi/ic_pause_circle_outline.png differ
diff --git a/mobicomkitui/src/main/res/drawable-xxhdpi/ic_play_circle_outline.png b/mobicomkitui/src/main/res/drawable-xxhdpi/ic_play_circle_outline.png
new file mode 100644
index 00000000..86f37160
Binary files /dev/null and b/mobicomkitui/src/main/res/drawable-xxhdpi/ic_play_circle_outline.png differ
diff --git a/mobicomkitui/src/main/res/drawable-xxhdpi/mobicom_ic_launcher.png b/mobicomkitui/src/main/res/drawable-xxhdpi/mobicom_ic_launcher.png
old mode 100755
new mode 100644
index 2e68a49a..324e72cd
Binary files a/mobicomkitui/src/main/res/drawable-xxhdpi/mobicom_ic_launcher.png and b/mobicomkitui/src/main/res/drawable-xxhdpi/mobicom_ic_launcher.png differ
diff --git a/mobicomkitui/src/main/res/drawable-xxhdpi/slide_left.png b/mobicomkitui/src/main/res/drawable-xxhdpi/slide_left.png
new file mode 100644
index 00000000..4d3b1e8a
Binary files /dev/null and b/mobicomkitui/src/main/res/drawable-xxhdpi/slide_left.png differ
diff --git a/mobicomkitui/src/main/res/drawable-xxhdpi/slidearrow.png b/mobicomkitui/src/main/res/drawable-xxhdpi/slidearrow.png
new file mode 100644
index 00000000..2aea8040
Binary files /dev/null and b/mobicomkitui/src/main/res/drawable-xxhdpi/slidearrow.png differ
diff --git a/mobicomkitui/src/main/res/drawable/applozic_profile_dot.xml b/mobicomkitui/src/main/res/drawable/applozic_profile_dot.xml
index 24647c6b..72f129c2 100755
--- a/mobicomkitui/src/main/res/drawable/applozic_profile_dot.xml
+++ b/mobicomkitui/src/main/res/drawable/applozic_profile_dot.xml
@@ -1,5 +1,4 @@
 <shape xmlns:android="http://schemas.android.com/apk/res/android"
     android:shape="oval">
-    <solid
-        android:color="@color/applozic_theme_color_primary"/>
+    <solid android:color="@color/applozic_theme_color_primary" />
 </shape>
\ No newline at end of file
diff --git a/mobicomkitui/src/main/res/drawable/applozic_relative_layout_drawable.xml b/mobicomkitui/src/main/res/drawable/applozic_relative_layout_drawable.xml
index 691c0b4b..68f17cfa 100644
--- a/mobicomkitui/src/main/res/drawable/applozic_relative_layout_drawable.xml
+++ b/mobicomkitui/src/main/res/drawable/applozic_relative_layout_drawable.xml
@@ -1,14 +1,14 @@
 <?xml version="1.0" encoding="utf-8"?>
-<layer-list xmlns:android="http://schemas.android.com/apk/res/android" >
+<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
     <item android:bottom="20dp">
-        <shape android:shape="rectangle" >
+        <shape android:shape="rectangle">
             <size android:height="20dp" />
             <solid android:color="@color/applozic_theme_divider" />
         </shape>
     </item>
 
     <item android:top="20dp">
-        <shape android:shape="rectangle" >
+        <shape android:shape="rectangle">
             <size android:height="20dp" />
             <solid android:color="@color/apploizc_transparent_color" />
         </shape>
diff --git a/mobicomkitui/src/main/res/drawable/applozic_upload_dot.xml b/mobicomkitui/src/main/res/drawable/applozic_upload_dot.xml
new file mode 100644
index 00000000..1c27bfcf
--- /dev/null
+++ b/mobicomkitui/src/main/res/drawable/applozic_upload_dot.xml
@@ -0,0 +1,5 @@
+<shape xmlns:android="http://schemas.android.com/apk/res/android"
+    android:shape="oval">
+    <solid
+        android:color="@color/white"/>
+</shape>
\ No newline at end of file
diff --git a/mobicomkitui/src/main/res/drawable/button_circle.xml b/mobicomkitui/src/main/res/drawable/button_circle.xml
index 56c57d69..b9d6f5af 100755
--- a/mobicomkitui/src/main/res/drawable/button_circle.xml
+++ b/mobicomkitui/src/main/res/drawable/button_circle.xml
@@ -4,5 +4,5 @@
     <gradient
         android:angle="270"
         android:endColor="@color/applozic_theme_color_control_activated"
-        android:startColor="@color/applozic_theme_color_control_highlight"/>
+        android:startColor="@color/applozic_theme_color_control_highlight" />
 </shape>
\ No newline at end of file
diff --git a/mobicomkitui/src/main/res/drawable/ic_phone_missed_white_24dp.xml b/mobicomkitui/src/main/res/drawable/ic_phone_missed_white_24dp.xml
new file mode 100644
index 00000000..9520e310
--- /dev/null
+++ b/mobicomkitui/src/main/res/drawable/ic_phone_missed_white_24dp.xml
@@ -0,0 +1,9 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportHeight="24.0"
+    android:viewportWidth="24.0">
+    <path
+        android:fillColor="#ffffff"
+        android:pathData="M6.5,5.5L12,11l7,-7 -1,-1 -6,6 -4.5,-4.5H11V3H5v6h1.5V5.5zm17.21,11.17C20.66,13.78 16.54,12 12,12 7.46,12 3.34,13.78 0.29,16.67c-0.18,0.18 -0.29,0.43 -0.29,0.71s0.11,0.53 0.29,0.71l2.48,2.48c0.18,0.18 0.43,0.29 0.71,0.29 0.27,0 0.52,-0.11 0.7,-0.28 0.79,-0.74 1.69,-1.36 2.66,-1.85 0.33,-0.16 0.56,-0.5 0.56,-0.9v-3.1c1.45,-0.48 3,-0.73 4.6,-0.73 1.6,0 3.15,0.25 4.6,0.72v3.1c0,0.39 0.23,0.74 0.56,0.9 0.98,0.49 1.87,1.12 2.67,1.85 0.18,0.18 0.43,0.28 0.7,0.28 0.28,0 0.53,-0.11 0.71,-0.29l2.48,-2.48c0.18,-0.18 0.29,-0.43 0.29,-0.71s-0.12,-0.52 -0.3,-0.7z" />
+</vector>
\ No newline at end of file
diff --git a/mobicomkitui/src/main/res/drawable/ic_videocam_white_24px.xml b/mobicomkitui/src/main/res/drawable/ic_videocam_white_24px.xml
new file mode 100644
index 00000000..422be9d8
--- /dev/null
+++ b/mobicomkitui/src/main/res/drawable/ic_videocam_white_24px.xml
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportHeight="24"
+    android:viewportWidth="24">
+
+    <path android:pathData="M0 0h24v24H0z" />
+    <path
+        android:fillColor="#ffffff"
+        android:pathData="M17 10.5V7c0-.55-.45-1-1-1H4c-.55 0-1 .45-1 1v10c0 .55 .45 1 1 1h12c.55 0 1-.45
+1-1v-3.5l4 4v-11l-4 4z" />
+</vector>
\ No newline at end of file
diff --git a/mobicomkitui/src/main/res/drawable/layout_shadow_border.xml b/mobicomkitui/src/main/res/drawable/layout_shadow_border.xml
index 08908008..2e3510d0 100755
--- a/mobicomkitui/src/main/res/drawable/layout_shadow_border.xml
+++ b/mobicomkitui/src/main/res/drawable/layout_shadow_border.xml
@@ -1,10 +1,9 @@
 <?xml version="1.0" encoding="utf-8"?>
 <layer-list xmlns:android="http://schemas.android.com/apk/res/android">
     <item android:top="3dp">
-        <shape
-            android:shape="rectangle">
-            <solid android:color="@color/white"/>
-            <corners android:radius="5dp"/>
+        <shape android:shape="rectangle">
+            <solid android:color="@color/white" />
+            <corners android:radius="5dp" />
         </shape>
     </item>
 </layer-list>
\ No newline at end of file
diff --git a/mobicomkitui/src/main/res/drawable/mobicom_attachment_download.xml b/mobicomkitui/src/main/res/drawable/mobicom_attachment_download.xml
index cf956d3d..3db42f4b 100755
--- a/mobicomkitui/src/main/res/drawable/mobicom_attachment_download.xml
+++ b/mobicomkitui/src/main/res/drawable/mobicom_attachment_download.xml
@@ -7,14 +7,14 @@
         android:color="#ffffff" />
 
     <padding
+        android:bottom="1dp"
         android:left="1dp"
-        android:top="1dp"
         android:right="8dp"
-        android:bottom="1dp" />
+        android:top="1dp" />
 
     <corners
-        android:bottomRightRadius="7dp"
         android:bottomLeftRadius="7dp"
+        android:bottomRightRadius="7dp"
         android:topLeftRadius="7dp"
         android:topRightRadius="7dp" />
 </shape>
\ No newline at end of file
diff --git a/mobicomkitui/src/main/res/drawable/mobiframework_circular_text_view.xml b/mobicomkitui/src/main/res/drawable/mobiframework_circular_text_view.xml
index 0d6967f3..79862317 100755
--- a/mobicomkitui/src/main/res/drawable/mobiframework_circular_text_view.xml
+++ b/mobicomkitui/src/main/res/drawable/mobiframework_circular_text_view.xml
@@ -1,5 +1,4 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
+<?xml version="1.0" encoding="utf-8"?><!--
 <shape xmlns:android="http://schemas.android.com/apk/res/android"
     android:shape="rectangle">
     <corners android:radius="0dip" />
@@ -9,11 +8,10 @@
 </shape>
 -->
 
-<shape
-    xmlns:android="http://schemas.android.com/apk/res/android"
+<shape xmlns:android="http://schemas.android.com/apk/res/android"
     android:shape="oval">
 
     <size
         android:width="110dp"
-        android:height="110dp"/>
+        android:height="110dp" />
 </shape>
diff --git a/mobicomkitui/src/main/res/drawable/online_circle.xml b/mobicomkitui/src/main/res/drawable/online_circle.xml
index cbc7e9cc..c8ae2146 100755
--- a/mobicomkitui/src/main/res/drawable/online_circle.xml
+++ b/mobicomkitui/src/main/res/drawable/online_circle.xml
@@ -6,5 +6,5 @@
         android:width="2dp"
         android:color="#ffffff" />
     <solid android:color="#31913A" />
-    <corners android:radius="24dp"  />
+    <corners android:radius="24dp" />
 </shape>
\ No newline at end of file
diff --git a/mobicomkitui/src/main/res/drawable/quickcontact_badge_small.xml b/mobicomkitui/src/main/res/drawable/quickcontact_badge_small.xml
index 18ecde83..2a623db3 100755
--- a/mobicomkitui/src/main/res/drawable/quickcontact_badge_small.xml
+++ b/mobicomkitui/src/main/res/drawable/quickcontact_badge_small.xml
@@ -1,8 +1,8 @@
 <?xml version="1.0" encoding="utf-8"?><!-- Refer to documentation for the <selector> element. -->
 <selector xmlns:android="http://schemas.android.com/apk/res/android">
 
-    <item android:state_focused="false" android:state_selected="false" android:state_pressed="false" android:drawable="@drawable/quickcontact_badge_small_unpressed" />
+    <item android:drawable="@drawable/quickcontact_badge_small_unpressed" android:state_focused="false" android:state_pressed="false" android:state_selected="false" />
 
-    <item android:state_pressed="true" android:drawable="@drawable/quickcontact_badge_small_pressed" />
+    <item android:drawable="@drawable/quickcontact_badge_small_pressed" android:state_pressed="true" />
 
 </selector>
diff --git a/mobicomkitui/src/main/res/layout-land/contact_list_fragment.xml b/mobicomkitui/src/main/res/layout-land/contact_list_fragment.xml
index c7008777..7ea8bbc0 100755
--- a/mobicomkitui/src/main/res/layout-land/contact_list_fragment.xml
+++ b/mobicomkitui/src/main/res/layout-land/contact_list_fragment.xml
@@ -7,35 +7,35 @@
          consistency. -->
     <ListView
         android:id="@id/android:list"
+        style="@style/ContactListView"
         android:layout_width="match_parent"
-        android:layout_height="match_parent"
-        style="@style/ContactListView" />
+        android:layout_height="match_parent" />
 
     <LinearLayout
         android:id="@id/android:empty"
-        android:gravity="center"
         android:layout_width="match_parent"
         android:layout_height="match_parent"
+        android:gravity="center"
         android:orientation="vertical">
 
         <TextView
             android:id="@+id/result"
-            android:gravity="center"
             android:layout_width="match_parent"
             android:layout_height="wrap_content"
-            android:text="@string/no_contacts"
             android:fontFamily="sans-serif-light"
+            android:gravity="center"
+            android:text="@string/no_contacts"
             android:textAppearance="?android:attr/textAppearanceLarge" />
 
         <Button
             android:id="@+id/actionButton"
-            android:gravity="center"
             android:layout_width="match_parent"
             android:layout_height="wrap_content"
-            android:text="@string/invite"
-            android:visibility="gone"
             android:fontFamily="sans-serif-light"
-            android:textAppearance="?android:attr/textAppearanceLarge" />
+            android:gravity="center"
+            android:text="@string/invite"
+            android:textAppearance="?android:attr/textAppearanceLarge"
+            android:visibility="gone" />
 
     </LinearLayout>
 
diff --git a/mobicomkitui/src/main/res/layout/activity_applozic_location.xml b/mobicomkitui/src/main/res/layout/activity_applozic_location.xml
index 340bdc05..e6890790 100644
--- a/mobicomkitui/src/main/res/layout/activity_applozic_location.xml
+++ b/mobicomkitui/src/main/res/layout/activity_applozic_location.xml
@@ -14,8 +14,9 @@
         android:background="?attr/colorPrimary"
         android:elevation="4dp"
         android:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar"
-        android:titleTextAppearance="@color/white"
-        app:popupTheme="@style/ThemeOverlay.AppCompat.Light" />
+        app:popupTheme="@style/ThemeOverlay.AppCompat.Light"
+        app:subtitleTextAppearance="@style/ToolbarSubtitle"
+        app:titleTextAppearance="@style/ToolbarTitle" />
 
     <fragment
         android:id="@+id/map"
@@ -26,36 +27,38 @@
     <RelativeLayout
         android:id="@+id/sendLocation"
         android:layout_width="match_parent"
-        android:paddingTop="5dp"
-        android:background="?attr/selectableItemBackground"
-        android:paddingBottom="5dp"
         android:layout_height="wrap_content"
+        android:background="?attr/selectableItemBackground"
         android:clickable="true"
-        android:elevation="4dp">
+        android:elevation="4dp"
+        android:paddingBottom="5dp"
+        android:paddingTop="5dp">
 
         <ImageView
+            android:id="@+id/locationIcon"
             android:layout_width="48dp"
             android:layout_height="48dp"
-            android:background="@drawable/button_circle"
-            android:scaleType="center"
-            android:src="@drawable/applozic_ic_my_location_white_18dp"
-            android:layout_gravity="bottom"
-            android:id="@+id/locationIcon"
             android:layout_alignParentLeft="true"
             android:layout_alignParentStart="true"
+            android:layout_gravity="bottom"
             android:layout_marginLeft="35dp"
-            android:layout_marginStart="35dp" />
+            android:layout_marginStart="35dp"
+            android:background="@drawable/button_circle"
+            android:scaleType="center"
+            android:src="@drawable/applozic_ic_my_location_white_18dp" />
 
         <TextView
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
-            android:textSize="14sp"
+            android:layout_centerHorizontal="true"
+            android:layout_centerVertical="true"
             android:layout_marginLeft="8dp"
             android:layout_toRightOf="@+id/locationIcon"
-            android:text="Send your current location"
+            android:text="@string/send_your_current_location"
             android:textColor="@color/black"
-            android:layout_centerVertical="true"
-            android:layout_centerHorizontal="true" />
+            android:layout_marginStart="8dp"
+            android:layout_toEndOf="@+id/locationIcon"
+            android:textSize="14sp" />
     </RelativeLayout>
 
     <View
@@ -63,5 +66,14 @@
         android:layout_height="1dp"
         android:background="@color/applozic_location_view_divider_color" />
 
+    <LinearLayout
+        android:id="@+id/footerAd"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="vertical"
+        android:visibility="gone"
+        android:layout_gravity="top">
+    </LinearLayout>
+
 </LinearLayout>
 
diff --git a/mobicomkitui/src/main/res/layout/activity_profile.xml b/mobicomkitui/src/main/res/layout/al_activity_profile.xml
similarity index 59%
rename from mobicomkitui/src/main/res/layout/activity_profile.xml
rename to mobicomkitui/src/main/res/layout/al_activity_profile.xml
index c4cb5aec..bad4993a 100755
--- a/mobicomkitui/src/main/res/layout/activity_profile.xml
+++ b/mobicomkitui/src/main/res/layout/al_activity_profile.xml
@@ -28,9 +28,9 @@
                     android:id="@+id/applozic_user_profile"
                     android:layout_width="100dp"
                     android:layout_height="100dp"
-                    android:layout_marginTop="10dp"
                     android:layout_centerHorizontal="true"
                     android:layout_centerVertical="true"
+                    android:layout_marginTop="10dp"
                     android:src="@drawable/applozic_ic_contact_picture_180_holo_light" />
 
                 <de.hdodenhof.circleimageview.CircleImageView
@@ -48,28 +48,21 @@
 
             </RelativeLayout>
 
-            <TextView
-                android:id="@+id/applozic_profile_displayname"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:layout_below="@+id/applozic_user_profile"
-                android:layout_centerHorizontal="true"
-                android:layout_gravity="center_horizontal"
-                android:text="Display Name"
-                android:textSize="23sp" />
 
             <TextView
                 android:id="@+id/applozic_profile_title"
                 android:layout_width="wrap_content"
                 android:layout_height="wrap_content"
-                android:visibility="gone"
+                android:textAlignment="gravity"
+                android:textDirection="locale"
                 android:layout_alignParentBottom="true"
                 android:layout_below="@+id/applozic_profile_displayname"
                 android:layout_centerHorizontal="true"
                 android:layout_gravity="center_horizontal"
                 android:layout_marginTop="12dp"
-                android:text="Sales Manager"
-                android:textSize="15sp" />
+                android:text="@string/sales_manager"
+                android:textSize="15sp"
+                android:visibility="gone" />
 
 
             <View
@@ -78,12 +71,73 @@
                 android:layout_centerHorizontal="true"
                 android:layout_marginTop="20dp"
                 android:background="@color/applozic_profile_devider_color"
-                android:text="Sales Manager" />
+                android:text="@string/sales_manager" />
+
+            <RelativeLayout
+                android:id="@+id/applozic_profile_displayname_section_rl"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:paddingStart="10dp"
+                android:paddingRight="10dp"
+                android:paddingEnd="10dp"
+                android:paddingLeft="10dp">
+                <RelativeLayout
+                    android:id="@+id/applozic_profile_displayname_verticalline_rl"
+                    android:layout_width="2dp"
+                    android:layout_height="wrap_content"
+                    android:layout_marginLeft="4dp"
+                    android:layout_marginRight="4dp"
+                    android:visibility="visible"
+                    android:background="@color/applozic_profile_devider_color"/>
+                <View
+                    android:layout_width="15dp"
+                    android:layout_height="15dp"
+                    android:layout_marginTop="15dp"
+                    android:background="@drawable/applozic_profile_dot" />
+
+                <ImageView
+                    android:id="@+id/displayName_edit_btn"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:layout_alignParentRight="true"
+                    android:layout_alignParentEnd="true"
+                    android:layout_alignParentTop="true"
+                    android:textDirection="locale"
+                    android:padding="10dp"
+                    android:src="@drawable/applozic_ic_action_edit" />
+
+                <TextView
+                    android:id="@+id/applozic_profile_displayname_section_heading"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:layout_marginLeft="20dp"
+                    android:textDirection="locale"
+                    android:layout_marginStart="20dp"
+                    android:layout_marginTop="10dp"
+                    android:text="@string/display_name"
+                    android:textColor="@color/message_details_text_color"
+                    android:textSize="20sp" />
+
+                <TextView
+                    android:id="@+id/applozic_profile_displayname"
+                    android:layout_width="wrap_content"
+                    android:textDirection="locale"
+                    android:layout_height="wrap_content"
+                    android:layout_below="@+id/applozic_profile_displayname_section_heading"
+                    android:layout_marginBottom="10dp"
+                    android:layout_marginLeft="15dp"
+                    android:layout_marginStart="15dp"
+                    android:layout_marginTop="15dp"
+                    android:text="@string/user_name"
+                    android:textColor="@color/applozic_theme_color_primary"
+                    android:textSize="20sp" />
+            </RelativeLayout>
 
             <RelativeLayout
                 android:id="@+id/applozic_profile_section_rl"
                 android:layout_width="match_parent"
                 android:layout_height="wrap_content"
+                android:paddingStart="10dp"
                 android:paddingLeft="10dp">
 
                 <RelativeLayout
@@ -91,6 +145,7 @@
                     android:layout_width="2dp"
                     android:layout_height="wrap_content"
                     android:layout_marginLeft="4dp"
+                    android:layout_marginStart="4dp"
                     android:background="@color/applozic_profile_devider_color" />
 
                 <View
@@ -100,32 +155,40 @@
                     android:background="@drawable/applozic_profile_dot" />
 
                 <ImageView
+                    android:id="@+id/status_edit_btn"
                     android:layout_width="wrap_content"
                     android:layout_height="wrap_content"
-                    android:id="@+id/status_edit_btn"
-                    android:src="@drawable/applozic_ic_action_edit"
+                    android:layout_alignParentRight="true"
                     android:layout_alignParentTop="true"
                     android:padding="10dp"
-                    android:layout_alignParentRight="true" />
+                    android:layout_alignParentEnd="true"
+                    android:src="@drawable/applozic_ic_action_edit" />
+
                 <TextView
                     android:id="@+id/applozic_profile_section_heading"
                     android:layout_width="wrap_content"
                     android:layout_height="wrap_content"
                     android:layout_marginLeft="20dp"
+                    android:textAlignment="gravity"
+                    android:textDirection="locale"
+                    android:layout_marginStart="20dp"
                     android:layout_marginTop="10dp"
-                    android:text="Profile Status"
-                    android:textColor="@color/black"
+                    android:text="@string/profile_status"
+                    android:textColor="@color/message_details_text_color"
                     android:textSize="20sp" />
 
                 <TextView
                     android:id="@+id/applozic_profile_status"
                     android:layout_width="wrap_content"
                     android:layout_height="wrap_content"
+                    android:textAlignment="gravity"
+                    android:textDirection="locale"
                     android:layout_below="@+id/applozic_profile_section_heading"
+                    android:layout_marginBottom="10dp"
                     android:layout_marginLeft="15dp"
+                    android:layout_marginStart="15dp"
                     android:layout_marginTop="15dp"
-                    android:layout_marginBottom="10dp"
-                    android:text="No Status"
+                    android:text="@string/no_status"
                     android:textColor="@color/applozic_theme_color_primary"
                     android:textSize="20sp" />
 
@@ -134,12 +197,13 @@
                     android:layout_width="wrap_content"
                     android:layout_height="wrap_content"
                     android:layout_below="@+id/applozic_profile_status"
+                    android:layout_marginBottom="20dp"
                     android:layout_marginLeft="15dp"
+                    android:layout_marginStart="15dp"
                     android:layout_marginTop="10dp"
-                    android:visibility="gone"
-                    android:layout_marginBottom="20dp"
-                    android:text="online"
-                    android:textSize="16sp" />
+                    android:text="@string/online"
+                    android:textSize="16sp"
+                    android:visibility="gone" />
 
 
                 <android.support.v7.widget.SwitchCompat
@@ -147,35 +211,95 @@
                     android:layout_width="wrap_content"
                     android:layout_height="wrap_content"
                     android:layout_alignParentRight="true"
+                    android:layout_alignParentEnd="true"
+                    android:layout_alignTop="@+id/applozic_profile_status_online"
+                    android:layout_marginBottom="20dp"
                     android:layout_marginEnd="18dp"
                     android:layout_marginRight="18dp"
-                    android:visibility="gone"
-                    android:layout_marginBottom="20dp"
                     android:text=""
-                    android:layout_alignTop="@+id/applozic_profile_status_online" />
+                    android:visibility="gone" />
+            </RelativeLayout>
+
+
+            <RelativeLayout
+                android:id="@+id/applozic_profile_contact_section_rl"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:paddingLeft="10dp">
+
+
+                <RelativeLayout
+                    android:id="@+id/applozic_profile_contact_verticalline_rl"
+                    android:layout_width="2dp"
+                    android:layout_height="wrap_content"
+                    android:layout_marginLeft="4dp"
+                    android:background="@color/applozic_profile_devider_color"
+                    android:visibility="visible" />
+
+
+                <View
+                    android:id="@+id/view2"
+                    android:layout_width="15dp"
+                    android:layout_height="15dp"
+                    android:layout_marginTop="15dp"
+                    android:background="@drawable/applozic_profile_dot" />
+
+
+                <ImageView
+                    android:id="@+id/contact_edit_btn"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:layout_alignParentRight="true"
+                    android:layout_alignParentTop="true"
+                    android:padding="10dp"
+                    android:src="@drawable/applozic_ic_action_edit" />
+
+                <TextView
+                    android:id="@+id/applozic_profile_contact_section_heading"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:layout_marginLeft="20dp"
+                    android:layout_marginTop="10dp"
+                    android:text="@string/profile_contact_number"
+                    android:textColor="@color/message_details_text_color"
+                    android:textSize="20sp" />
+
+                <TextView
+                    android:id="@+id/applozic_profile_contact"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:layout_below="@+id/applozic_profile_contact_section_heading"
+                    android:layout_marginBottom="10dp"
+                    android:layout_marginLeft="15dp"
+                    android:layout_marginTop="15dp"
+                    android:text="@string/profile_contact"
+                    android:textColor="@color/applozic_theme_color_primary"
+                    android:textSize="20sp" />
             </RelativeLayout>
 
             <View
                 android:layout_width="match_parent"
                 android:layout_height="2dp"
-                android:visibility="gone"
                 android:layout_centerHorizontal="true"
                 android:layout_marginTop="0dp"
                 android:background="@color/applozic_profile_devider_color"
-                android:text="Sales Manager" />
+                android:text="@string/sales_manager"
+                android:visibility="gone" />
 
             <RelativeLayout
                 android:id="@+id/applozic_notification_section_rl"
                 android:layout_width="match_parent"
-                android:visibility="gone"
                 android:layout_height="wrap_content"
-                android:paddingLeft="10dp">
+                android:paddingLeft="10dp"
+                android:paddingStart="10dp"
+                android:visibility="gone">
 
                 <RelativeLayout
                     android:id="@+id/applozic_notification_verticalline_rl"
                     android:layout_width="2dp"
                     android:layout_height="wrap_content"
                     android:layout_marginLeft="4dp"
+                    android:layout_marginStart="4dp"
                     android:background="@color/applozic_profile_devider_color" />
 
                 <View
@@ -189,8 +313,9 @@
                     android:layout_width="wrap_content"
                     android:layout_height="wrap_content"
                     android:layout_marginLeft="20dp"
+                    android:layout_marginStart="20dp"
                     android:layout_marginTop="10dp"
-                    android:text="Notifications"
+                    android:text="@string/notifications"
                     android:textColor="@color/black"
                     android:textSize="20sp" />
 
@@ -199,10 +324,11 @@
                     android:layout_width="wrap_content"
                     android:layout_height="wrap_content"
                     android:layout_below="@+id/applozic_profile_notification_heading"
+                    android:layout_marginBottom="20dp"
                     android:layout_marginLeft="15dp"
+                    android:layout_marginStart="20dp"
                     android:layout_marginTop="10dp"
-                    android:layout_marginBottom="20dp"
-                    android:text="Push Notifications"
+                    android:text="@string/push_notifications"
                     android:textColor="@color/applozic_theme_color_primary"
                     android:textSize="20sp" />
 
@@ -211,13 +337,13 @@
                     android:id="@+id/applozic_switch_notification"
                     android:layout_width="wrap_content"
                     android:layout_height="wrap_content"
+                    android:layout_alignBottom="@+id/applozic_notification_status"
+                    android:layout_alignParentEnd="true"
+                    android:layout_alignParentRight="true"
                     android:layout_marginEnd="21dp"
                     android:layout_marginRight="21dp"
                     android:textOff=" OFF "
-                    android:textOn=" ON "
-                    android:layout_alignBottom="@+id/applozic_notification_status"
-                    android:layout_alignParentRight="true"
-                    android:layout_alignParentEnd="true" />
+                    android:textOn=" ON " />
 
             </RelativeLayout>
 
@@ -226,19 +352,20 @@
                 android:layout_height="2dp"
                 android:layout_centerHorizontal="true"
                 android:background="@color/applozic_profile_devider_color"
-                android:text="Sales Manager" />
+                android:text="@string/sales_manager" />
 
             <RelativeLayout
                 android:id="@+id/applozic_datausage_section_rl"
                 android:layout_width="match_parent"
                 android:layout_height="wrap_content"
-                android:visibility="gone"
-                android:paddingLeft="10dp">
+                android:paddingLeft="10dp"
+                android:visibility="gone">
 
                 <RelativeLayout
                     android:id="@+id/applozic_datausage_verticalline_rl"
                     android:layout_width="2dp"
                     android:layout_height="wrap_content"
+                    android:layout_marginStart="4dp"
                     android:layout_marginLeft="4dp"
                     android:background="@color/applozic_profile_devider_color" />
 
@@ -254,8 +381,9 @@
                     android:layout_width="wrap_content"
                     android:layout_height="wrap_content"
                     android:layout_marginLeft="20dp"
+                    android:layout_marginStart="20dp"
                     android:layout_marginTop="10dp"
-                    android:text="Data Usage"
+                    android:text="@string/data_usage"
                     android:textColor="@color/black"
                     android:textSize="20sp" />
 
@@ -263,11 +391,12 @@
                     android:layout_width="wrap_content"
                     android:layout_height="wrap_content"
                     android:layout_below="@+id/applozic_profile_data_usage"
+                    android:layout_marginBottom="20dp"
                     android:layout_marginLeft="15dp"
+                    android:layout_marginStart="15dp"
                     android:layout_marginTop="10dp"
-                    android:text="Network Usage"
+                    android:text="@string/applozic_network_usage"
                     android:textColor="@color/applozic_theme_color_primary"
-                    android:layout_marginBottom="20dp"
                     android:textSize="20sp" />
 
             </RelativeLayout>
@@ -280,20 +409,23 @@
 
             <RelativeLayout
                 android:layout_width="match_parent"
-                android:layout_height="wrap_content"
-                >
+                android:layout_height="wrap_content">
+
                 <Button
                     android:id="@+id/applozic_profile_logout"
                     android:layout_width="wrap_content"
                     android:layout_height="wrap_content"
-                    android:layout_marginBottom="15dp"
-                    android:layout_marginTop="15dp"
                     android:layout_alignParentRight="true"
+                    android:layout_marginBottom="15dp"
                     android:layout_marginRight="10dp"
+                    android:layout_marginTop="15dp"
                     android:background="@color/applozic_theme_color_primary"
-                    android:textSize="10sp"
+                    android:text="@string/logout"
+                    android:layout_marginEnd="10dp"
+                    android:layout_alignParentEnd="true"
                     android:textColor="@color/white"
-                    android:text="Logout" />
+                    android:textSize="10sp"
+                    android:visibility="gone" />
             </RelativeLayout>
 
         </LinearLayout>
diff --git a/mobicomkitui/src/main/res/layout/applozic_call_layout.xml b/mobicomkitui/src/main/res/layout/applozic_call_layout.xml
new file mode 100644
index 00000000..9fca8fc6
--- /dev/null
+++ b/mobicomkitui/src/main/res/layout/applozic_call_layout.xml
@@ -0,0 +1,86 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="fill_parent"
+    android:layout_height="wrap_content"
+    android:layout_centerInParent="true"
+    android:layout_gravity="center"
+    android:clickable="false"
+    android:gravity="center"
+    android:longClickable="false"
+    android:orientation="horizontal"
+    android:paddingBottom="10dp"
+    android:paddingTop="10dp">
+
+
+    <RelativeLayout
+        android:layout_width="250dp"
+        android:layout_height="wrap_content"
+        android:background="@color/applozic_share_contact_divider"
+        android:paddingTop="10dp">
+
+        <ImageView
+            android:id="@+id/applozic_call_image_type"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_alignParentLeft="true"
+            android:layout_alignParentStart="true"
+            android:layout_centerVertical="true"
+            android:layout_gravity="center_vertical"
+            android:layout_marginLeft="10dp"
+            android:background="@android:color/transparent"
+            android:layout_marginStart="10dp"
+            android:src="@drawable/applozic_ic_action_call" />
+
+
+        <TextView
+            android:id="@+id/applozic_call_status"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_centerVertical="true"
+            android:layout_marginLeft="10dp"
+            android:layout_marginStart="10dp"
+            android:paddingEnd="10dp"
+            android:layout_toEndOf="@+id/applozic_call_image_type"
+            android:layout_toRightOf="@+id/applozic_call_image_type"
+            android:fontFamily="sans-serif-condensed"
+            android:paddingRight="10dp"
+            android:text="@string/missed"
+            android:textColor="@color/white"
+            android:textSize="15sp" />
+
+        <TextView
+            android:id="@+id/applozic_call_duration"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_alignLeft="@+id/applozic_call_status"
+            android:layout_alignParentBottom="true"
+            android:layout_below="@+id/applozic_call_status"
+            android:fontFamily="sans-serif"
+            android:paddingEnd="10dp"
+            android:paddingBottom="10dp"
+            android:paddingRight="10dp"
+            android:paddingTop="15dp"
+            android:layout_alignStart="@+id/applozic_call_status"
+            android:text="1 min 5 sec"
+            android:textColor="@color/white"
+            android:textSize="10sp" />
+
+        <TextView
+            android:id="@+id/applozic_call_timing"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_alignParentBottom="true"
+            android:layout_alignParentRight="true"
+            android:layout_marginTop="10dp"
+            android:fontFamily="sans-serif-condensed"
+            android:layout_alignParentEnd="true"
+            android:padding="10dp"
+            android:text="11:40"
+            android:textColor="@color/white"
+            android:textSize="10sp" />
+
+    </RelativeLayout>
+
+
+</LinearLayout>
diff --git a/mobicomkitui/src/main/res/layout/applozic_channel_custom_message_layout.xml b/mobicomkitui/src/main/res/layout/applozic_channel_custom_message_layout.xml
index f46e8763..30794a5a 100644
--- a/mobicomkitui/src/main/res/layout/applozic_channel_custom_message_layout.xml
+++ b/mobicomkitui/src/main/res/layout/applozic_channel_custom_message_layout.xml
@@ -2,11 +2,11 @@
 <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
     android:layout_width="fill_parent"
     android:layout_height="wrap_content"
+    android:layout_centerInParent="true"
     android:layout_gravity="center"
     android:clickable="false"
-    android:layout_centerInParent="true"
-    android:longClickable="false"
     android:gravity="center"
+    android:longClickable="false"
     android:orientation="horizontal"
     android:paddingBottom="15dp"
     android:paddingTop="15dp">
@@ -14,12 +14,11 @@
     <TextView
         android:id="@+id/channel_message"
         android:layout_width="wrap_content"
-        android:background="@drawable/applozic_channel_custom_message"
         android:layout_height="wrap_content"
         android:layout_gravity="center_horizontal"
+        android:background="@drawable/applozic_channel_custom_message"
         android:gravity="center_horizontal"
         android:padding="8dp"
-        android:textColor="#666666"
         android:textSize="14sp" />
 
 </LinearLayout>
\ No newline at end of file
diff --git a/mobicomkitui/src/main/res/layout/applozic_context_based_layout.xml b/mobicomkitui/src/main/res/layout/applozic_context_based_layout.xml
index 08239c2a..faafb76c 100644
--- a/mobicomkitui/src/main/res/layout/applozic_context_based_layout.xml
+++ b/mobicomkitui/src/main/res/layout/applozic_context_based_layout.xml
@@ -1,111 +1,125 @@
 <?xml version="1.0" encoding="utf-8"?>
 <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:orientation="vertical" android:layout_width="match_parent"
-    android:paddingTop="3dp"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical"
     android:paddingBottom="3dp"
-    android:layout_height="match_parent">
+    android:paddingTop="3dp">
+
     <RelativeLayout
         android:layout_width="match_parent"
         android:layout_height="80dp"
-        android:minHeight="80dp"
         android:layout_gravity="center"
+        android:minHeight="80dp"
         android:orientation="horizontal">
 
         <ImageView
             android:id="@+id/productImage"
             android:layout_width="80dp"
-            android:paddingTop="2dp"
+            android:layout_height="match_parent"
+            android:layout_alignParentBottom="true"
+            android:layout_alignParentLeft="true"
+            android:textDirection="locale"
+            android:textAlignment="gravity"
             android:layout_margin="4dp"
             android:adjustViewBounds="true"
             android:paddingBottom="2dp"
-            android:layout_height="match_parent"
-            android:layout_alignParentLeft="true"
-            android:layout_alignParentBottom="true" />
+            android:layout_alignParentStart="true"
+            android:paddingTop="2dp" />
 
         <TextView
             android:id="@+id/subTitle"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
-            android:textSize="12sp"
+            android:layout_centerVertical="true"
+            android:textDirection="locale"
+            android:textAlignment="gravity"
+            android:layout_toEndOf="@+id/productImage"
+            android:layout_toRightOf="@+id/productImage"
             android:ellipsize="marquee"
-            android:singleLine="true"
             android:maxLength="25"
             android:maxLines="1"
-            android:layout_centerVertical="true"
-            android:layout_toRightOf="@+id/productImage"
-            android:layout_toEndOf="@+id/productImage" />
+            android:singleLine="true"
+            android:textSize="12sp" />
 
         <TextView
             android:id="@+id/title"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
-            android:textSize="12sp"
-            android:maxLength="25"
-            android:singleLine="true"
-            android:ellipsize="marquee"
-            android:maxLines="1"
-            android:textStyle="bold"
-            android:layout_marginTop="3dp"
             android:layout_alignParentTop="true"
+            android:textDirection="locale"
+            android:textAlignment="gravity"
+            android:layout_marginTop="3dp"
+            android:layout_toEndOf="@+id/productImage"
             android:layout_toRightOf="@+id/productImage"
-            android:layout_toEndOf="@+id/productImage" />
+            android:ellipsize="marquee"
+            android:maxLength="25"
+            android:maxLines="1"
+            android:singleLine="true"
+            android:textSize="12sp"
+            android:textStyle="bold" />
 
         <TextView
             android:id="@+id/qtyTitleTextView"
+            android:textDirection="locale"
+            android:textAlignment="gravity"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
-            android:text="Qty:"
-            android:textSize="12sp"
-            android:padding="2dp"
-            android:textStyle="bold"
-            android:layout_gravity="center_horizontal"
-            android:layout_alignTop="@+id/qtyValueTextView"
             android:layout_alignLeft="@+id/priceTitleTextView"
-            android:layout_alignStart="@+id/priceTitleTextView" />
+            android:layout_alignStart="@+id/priceTitleTextView"
+            android:layout_alignTop="@+id/qtyValueTextView"
+            android:layout_gravity="center_horizontal"
+            android:padding="2dp"
+            android:textSize="12sp"
+            android:textStyle="bold" />
 
         <TextView
             android:id="@+id/qtyValueTextView"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
-            android:textSize="12sp"
-            android:padding="2dp"
-            android:maxLines="1"
-            android:text="20000"
-            android:layout_gravity="right"
-            android:layout_marginRight="39dp"
-            android:layout_marginEnd="39dp"
-            android:layout_alignTop="@+id/title"
+            android:textDirection="locale"
+            android:textAlignment="gravity"
+            android:layout_alignParentEnd="true"
             android:layout_alignParentRight="true"
-            android:layout_alignParentEnd="true" />
+            android:layout_alignTop="@+id/title"
+            android:layout_gravity="end"
+            android:layout_marginEnd="39dp"
+            android:layout_marginRight="39dp"
+            android:maxLines="1"
+            android:padding="2dp"
+            android:textSize="12sp" />
 
         <TextView
             android:id="@+id/priceTitleTextView"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
-            android:text="price:"
-            android:padding="2dp"
-            android:textStyle="bold"
-            android:layout_gravity="center_horizontal"
+            android:textDirection="locale"
+            android:textAlignment="gravity"
             android:layout_below="@+id/qtyTitleTextView"
+            android:layout_gravity="center_horizontal"
             android:layout_toLeftOf="@+id/priceValueTextview"
-            android:layout_toStartOf="@+id/priceValueTextview" />
+            android:layout_toStartOf="@+id/priceValueTextview"
+            android:padding="2dp"
+            android:textStyle="bold" />
 
         <TextView
             android:id="@+id/priceValueTextview"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
-            android:text="1000rs"
-            android:textSize="12sp"
-            android:maxLines="1"
-            android:padding="2dp"
+            android:textDirection="locale"
+            android:textAlignment="gravity"
             android:layout_alignBottom="@+id/priceTitleTextView"
             android:layout_alignLeft="@+id/qtyValueTextView"
-            android:layout_alignStart="@+id/qtyValueTextView" />
+            android:layout_alignStart="@+id/qtyValueTextView"
+            android:maxLines="1"
+            android:padding="2dp"
+            android:textSize="12sp" />
+
         <View
             android:layout_width="match_parent"
             android:layout_height="1dp"
             android:layout_alignParentBottom="true"
-            android:background="#000"/>
+            android:background="#000" />
 
     </RelativeLayout>
 
diff --git a/mobicomkitui/src/main/res/layout/applozic_custom_message_layout.xml b/mobicomkitui/src/main/res/layout/applozic_custom_message_layout.xml
index d6cf876b..e14fdc15 100644
--- a/mobicomkitui/src/main/res/layout/applozic_custom_message_layout.xml
+++ b/mobicomkitui/src/main/res/layout/applozic_custom_message_layout.xml
@@ -2,11 +2,11 @@
 <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
     android:layout_width="fill_parent"
     android:layout_height="wrap_content"
+    android:layout_centerInParent="true"
     android:layout_gravity="center"
     android:clickable="false"
-    android:layout_centerInParent="true"
-    android:longClickable="false"
     android:gravity="center"
+    android:longClickable="false"
     android:orientation="horizontal"
     android:paddingBottom="15dp"
     android:paddingTop="15dp">
@@ -16,15 +16,17 @@
         android:layout_width="wrap_content"
         android:layout_height="wrap_content"
         android:layout_gravity="center_horizontal"
-        android:gravity="center_horizontal"
         android:background="@color/applozic_theme_color"
+        android:gravity="center_horizontal"
+        android:paddingBottom="10dp"
+        android:paddingStart="20dp"
+        android:paddingEnd="20dp"
         android:paddingLeft="20dp"
         android:paddingRight="20dp"
         android:paddingTop="10dp"
-        android:paddingBottom="10dp"
         android:text=""
-        android:visibility="gone"
         android:textColor="#333"
-        android:textSize="14sp" />
+        android:textSize="14sp"
+        android:visibility="gone" />
 
 </LinearLayout>
diff --git a/mobicomkitui/src/main/res/layout/applozic_document_attachment.xml b/mobicomkitui/src/main/res/layout/applozic_document_attachment.xml
new file mode 100644
index 00000000..d44af2ae
--- /dev/null
+++ b/mobicomkitui/src/main/res/layout/applozic_document_attachment.xml
@@ -0,0 +1,143 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/attachment_doc_relative_layout"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:background="@android:color/transparent">
+
+    <SeekBar
+        android:id="@+id/applozic_audio_seekbar"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentTop="true"
+        android:layout_marginLeft="100dp"
+        android:layout_marginRight="20dp"
+        android:layout_marginEnd="20dp"
+        android:layout_marginStart="60dp"
+        android:layout_marginTop="25dp"
+        android:thumbTint="@color/apploizc_lite_gray_color"
+        android:visibility="gone" />
+
+    <LinearLayout
+        android:id="@+id/download_doc_linear_layout"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:layout_alignParentTop="true"
+        android:orientation="horizontal">
+
+        <RelativeLayout
+            android:id="@+id/download_doc_relative_layout"
+            android:layout_width="70dp"
+            android:layout_height="70dp"
+            android:background="@color/applozic_theme_color_primary">
+
+            <ImageView
+                android:id="@+id/applozic_download_image"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_centerInParent="true"
+                android:src="@drawable/circle_arrow_down_download" />
+
+            <TextView
+                android:id="@+id/applozic_doc_file_size"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_alignEnd="@+id/applozic_download_image"
+                android:layout_alignParentBottom="true"
+                android:layout_alignRight="@+id/applozic_download_image"
+                android:text="@string/kb45"
+                android:textColor="@color/white" />
+
+
+        </RelativeLayout>
+
+        <RelativeLayout
+            android:id="@+id/retry_doc_relative_layout"
+            android:layout_width="70dp"
+            android:layout_height="70dp"
+            android:background="@color/applozic_theme_color_primary">
+
+            <ImageView
+                android:id="@+id/applozic_retry__image"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_centerInParent="true"
+                android:src="@drawable/circle_arrow_upload" />
+
+            <TextView
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_alignEnd="@+id/applozic_retry__image"
+                android:layout_alignParentBottom="true"
+                android:layout_alignRight="@+id/applozic_retry__image"
+                android:text="@string/attachment_retry"
+                android:textColor="@color/white"
+                android:textSize="10sp" />
+
+
+        </RelativeLayout>
+
+        <RelativeLayout
+            android:id="@+id/applozic_doc_download_progress_rl"
+            android:layout_width="70dp"
+            android:layout_height="70dp"
+            android:visibility="gone">
+
+            <ProgressBar
+                android:id="@+id/applozic_doc_download_progress"
+                android:layout_width="50dp"
+                android:layout_height="50dp"
+                android:layout_centerInParent="true"
+                android:background="@drawable/applozic_upload_dot"
+                android:indeterminate="true"
+                android:visibility="visible" />
+
+            <ImageView
+                android:id="@+id/download_calcle_icon"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_centerInParent="true"
+                android:src="@drawable/applozic_ic_action_cancel" />
+
+        </RelativeLayout>
+
+
+        <RelativeLayout
+            android:id="@+id/applozic_doc_downloaded"
+            android:layout_width="70dp"
+            android:layout_height="70dp"
+            android:visibility="visible">
+
+            <ImageView
+                android:id="@+id/doc_icon"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_centerInParent="true"
+                android:src="@drawable/ic_documentreceive" />
+        </RelativeLayout>
+
+
+        <TextView
+            android:id="@+id/audio_duration_textView"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_weight="1"
+            android:text=""
+            android:visibility="gone" />
+
+        <TextView
+            android:id="@+id/applozic_doc_file_name"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center"
+            android:layout_marginLeft="10dp"
+            android:layout_marginStart="10dp"
+            android:maxLines="3"
+            android:text=" "
+            android:textColor="@color/white"
+            android:textSize="15sp" />
+    </LinearLayout>
+
+</RelativeLayout>
\ No newline at end of file
diff --git a/mobicomkitui/src/main/res/layout/applozic_groups_list_layout.xml b/mobicomkitui/src/main/res/layout/applozic_groups_list_layout.xml
index 3743bcff..d70049d7 100644
--- a/mobicomkitui/src/main/res/layout/applozic_groups_list_layout.xml
+++ b/mobicomkitui/src/main/res/layout/applozic_groups_list_layout.xml
@@ -1,29 +1,31 @@
 <?xml version="1.0" encoding="utf-8"?>
 <RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    style="@style/listViewActivatedStyle"
     android:layout_width="match_parent"
-    android:layout_height="?android:attr/listPreferredItemHeight"
-    style="@style/listViewActivatedStyle">
+    android:layout_height="?android:attr/listPreferredItemHeight">
 
     <!-- Use standard android.R class icon id instead of app specific id. This is just useful for
          consistency. Use scaleType=centerCrop to give a nice full cropped image in the assigned
          space -->
 
     <RelativeLayout
-        android:layout_width="wrap_content"
         android:id="@+id/profile_image_relative_layout"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:paddingBottom="6dp"
+        android:paddingStart="@dimen/listview_item_padding"
         android:paddingLeft="@dimen/listview_item_padding"
+        android:paddingEnd="0dp"
         android:paddingRight="0dp"
-        android:paddingTop="8dp"
-        android:paddingBottom="6dp"
-        android:layout_height="wrap_content">
+        android:paddingTop="8dp">
 
         <TextView
             android:id="@+id/alphabeticImage"
             android:layout_width="48dp"
             android:layout_height="48dp"
+            android:layout_gravity="center"
             android:background="@drawable/mobiframework_circular_text_view"
             android:gravity="center"
-            android:layout_gravity="center"
             android:text=""
             android:textColor="#ffffff"
             android:textSize="20sp"
@@ -34,9 +36,10 @@
             android:id="@+id/contactImage"
             android:layout_width="48dp"
             android:layout_height="48dp"
+            android:layout_gravity="center"
             android:layout_toRightOf="@+id/alphabeticImage"
             android:src="@drawable/applozic_group_icon"
-            android:layout_gravity="center"
+            android:layout_toEndOf="@+id/alphabeticImage"
             android:visibility="visible" />
 
     </RelativeLayout>
@@ -45,18 +48,21 @@
          visibility set to gone -->
     <TextView
         android:id="@+id/applozic_group_members"
-        android:paddingLeft="@dimen/listview_item_padding"
         android:layout_width="match_parent"
         android:layout_height="26dp"
-        android:layout_toRightOf="@id/profile_image_relative_layout"
         android:layout_alignParentBottom="true"
         android:layout_alignParentRight="true"
-        android:textColor="@color/message_text_color"
-        android:singleLine="true"
+        android:paddingStart="@dimen/listview_item_padding"
+        android:layout_alignParentEnd="true"
+        android:layout_toEndOf="@id/profile_image_relative_layout"
+        android:layout_toRightOf="@id/profile_image_relative_layout"
         android:ellipsize="end"
-        android:visibility="gone"
+        android:paddingLeft="@dimen/listview_item_padding"
+        android:singleLine="true"
         android:text=""
-        android:textSize="14sp" />
+        android:textColor="@color/message_text_color"
+        android:textSize="14sp"
+        android:visibility="gone" />
 
     <!-- Use standard android.R class text1 id instead of app specific id. This is just useful for
          consistency. This view also sets layout_alignWithParentIfMissing=true which lets the view
@@ -64,18 +70,22 @@
          its initial state). -->
     <TextView
         android:id="@+id/applozic_group_name"
-        android:paddingLeft="@dimen/listview_item_padding"
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
         android:layout_above="@id/applozic_group_members"
-        android:layout_toRightOf="@id/profile_image_relative_layout"
-        android:gravity="center_vertical"
         android:layout_alignParentRight="true"
         android:layout_alignParentTop="true"
         android:layout_alignWithParentIfMissing="true"
-        android:textColor="@color/message_text_color"
-        android:singleLine="true"
+        android:paddingStart="@dimen/listview_item_padding"
+        android:layout_toEndOf="@id/profile_image_relative_layout"
+        android:layout_alignParentEnd="true"
+        android:layout_toRightOf="@id/profile_image_relative_layout"
         android:ellipsize="end"
+        android:gravity="center_vertical"
+        android:paddingLeft="@dimen/listview_item_padding"
+        android:singleLine="true"
+        android:textDirection="locale"
+        android:textColor="@color/message_text_color"
         android:textSize="18sp" />
 
 
diff --git a/mobicomkitui/src/main/res/layout/applozic_message_info.xml b/mobicomkitui/src/main/res/layout/applozic_message_info.xml
index 9d2f6788..db4a27f7 100755
--- a/mobicomkitui/src/main/res/layout/applozic_message_info.xml
+++ b/mobicomkitui/src/main/res/layout/applozic_message_info.xml
@@ -1,11 +1,9 @@
 <?xml version="1.0" encoding="utf-8"?>
-<android.support.v4.widget.NestedScrollView xmlns:android="http://schemas.android.com/apk/res/android"
+<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
     xmlns:app="http://schemas.android.com/apk/res-auto"
     android:layout_width="match_parent"
     android:layout_height="match_parent"
-    android:fillViewport="true"
-    app:layout_behavior="@string/appbar_scrolling_view_behavior"
-    app:layout_scrollFlags="scroll">
+    app:layout_behavior="@string/appbar_scrolling_view_behavior">
 
     <LinearLayout
         android:layout_width="match_parent"
@@ -17,101 +15,113 @@
             android:layout_width="match_parent"
             android:layout_height="wrap_content"
             android:layout_gravity="end"
-            android:padding="0dp"
             android:layout_marginLeft="70dp"
             android:layout_marginRight="10dp"
             android:layout_marginTop="10dp"
             android:background="@drawable/applozic_sent_message"
-            android:clickable="false">
-
-        <!--FrameLayout for message text -->
-        <include
-            android:layout_width="match_parent"
-            android:layout_height="wrap_content"
-            android:layout_gravity="end"
-            layout="@layout/mobicom_contact_share_layout" />
+            android:layout_marginStart="70dp"
+            android:layout_marginEnd="10dp"
+            android:clickable="false"
+            android:padding="0dp">
+
+            <!--FrameLayout for message text -->
+            <include
+                layout="@layout/mobicom_contact_share_layout"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:layout_gravity="end" />
 
-        <include
-            android:layout_width="match_parent"
-            android:layout_height="wrap_content"
-            android:layout_gravity="end"
-            layout="@layout/mobicom_chat_location_view" />
+            <include
+                layout="@layout/mobicom_chat_location_view"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:layout_gravity="end" />
         </RelativeLayout>
+
         <RelativeLayout
 
+            android:id="@+id/applozic_message_info_default_layout"
             android:layout_width="match_parent"
             android:layout_height="wrap_content"
             android:layout_gravity="end"
-            android:id="@+id/applozic_message_info_default_layout"
             android:layout_marginLeft="70dp"
             android:layout_marginRight="10dp"
             android:layout_marginTop="10dp"
+            android:layout_marginEnd="10dp"
+            android:layout_marginStart="70dp"
             android:background="@drawable/applozic_sent_message"
             android:clickable="false">
+
             <RelativeLayout
+                android:id="@+id/applozic_file_info_inner_layout"
                 android:layout_width="match_parent"
-                android:layout_height="wrap_content"
-                android:id="@+id/applozic_file_info_inner_layout">
-            <com.applozic.mobicomkit.api.attachment.AttachmentView
-                android:id="@+id/applozic_message_info_attachmentview"
-                android:layout_width="match_parent"
-                android:layout_height="150dp"
-                android:adjustViewBounds="true"
-                android:scaleType="centerCrop"
-                android:visibility="visible" />
+                android:layout_height="wrap_content">
 
-            <ProgressBar
-                android:id="@+id/applozic_message_info_progress_bar"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:layout_centerInParent="true"
-                android:visibility="gone" />
-            <ImageView
-                android:layout_height="wrap_content"
-                android:layout_width="wrap_content"
-                android:layout_alignParentTop="true"
-                android:layout_alignParentLeft="true"
-                android:id="@+id/applozic_message_info_attachment_icon"
-                android:visibility="visible"
-                android:src="@drawable/applozic_ic_action_attachment"
-                />
+                <com.applozic.mobicomkit.api.attachment.AttachmentView
+                    android:id="@+id/applozic_message_info_attachmentview"
+                    android:layout_width="match_parent"
+                    android:layout_height="150dp"
+                    android:adjustViewBounds="true"
+                    android:scaleType="centerCrop"
+                    android:visibility="visible" />
 
-            <TextView
-                android:id="@+id/applozic_message_info_attachment_filename"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:layout_toRightOf="@+id/applozic_message_info_attachment_icon"
-                android:layout_gravity="bottom"
-                android:padding="10dp"
-                android:text="Message Text"
-                android:textColor="@color/applozic_send_message_layout_background_color"
-                android:textSize="18sp" />
+                <ProgressBar
+                    android:id="@+id/applozic_message_info_progress_bar"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:layout_centerInParent="true"
+                    android:visibility="gone" />
+
+                <ImageView
+                    android:id="@+id/applozic_message_info_attachment_icon"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:layout_alignParentLeft="true"
+                    android:layout_alignParentStart="true"
+                    android:layout_alignParentTop="true"
+                    android:src="@drawable/applozic_ic_action_attachment"
+                    android:visibility="visible" />
+
+                <TextView
+                    android:id="@+id/applozic_message_info_attachment_filename"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:layout_gravity="bottom"
+                    android:layout_toRightOf="@+id/applozic_message_info_attachment_icon"
+                    android:padding="10dp"
+                    android:layout_toEndOf="@+id/applozic_message_info_attachment_icon"
+                    android:text="@string/message_text"
+                    android:textColor="@color/applozic_send_message_layout_background_color"
+                    android:textSize="18sp" />
             </RelativeLayout>
+
             <TextView
                 android:id="@+id/messageText"
                 android:layout_width="match_parent"
                 android:layout_height="wrap_content"
+                android:layout_below="@+id/applozic_file_info_inner_layout"
                 android:layout_gravity="end|bottom"
                 android:padding="10dp"
-                android:layout_below="@+id/applozic_file_info_inner_layout"
-                android:text="Message Text"
+                android:text="@string/message_text"
                 android:textColor="@color/applozic_send_message_layout_background_color"
                 android:textSize="18sp" />
         </RelativeLayout>
 
         <TextView
-                android:id="@+id/applozic_message_info_message_text"
-                android:layout_width="match_parent"
-                android:layout_height="wrap_content"
-                android:layout_gravity="end|bottom"
-                android:padding="10dp"
-                android:layout_marginLeft="70dp"
-                android:layout_marginRight="10dp"
-                android:layout_marginTop="20dp"
-                android:background="@drawable/applozic_sent_message"
-                android:text="Message Text"
-                android:textColor="@color/applozic_send_message_layout_background_color"
-                android:textSize="18sp" />
+            android:id="@+id/applozic_message_info_message_text"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_gravity="end|bottom"
+            android:layout_marginLeft="70dp"
+            android:layout_marginRight="10dp"
+            android:layout_marginTop="20dp"
+            android:background="@drawable/applozic_sent_message"
+            android:padding="10dp"
+            android:layout_marginEnd="10dp"
+           android:layout_marginStart="70dp"
+           android:text="@string/message_text"
+            android:textColor="@color/applozic_send_message_layout_background_color"
+            android:textSize="18sp" />
 
         <!-- List View for read -->
         <RelativeLayout
@@ -126,6 +136,8 @@
                 android:layout_marginLeft="10dp"
                 android:layout_marginRight="10dp"
                 android:layout_marginTop="20dp"
+                android:layout_marginEnd="10dp"
+                android:layout_marginStart="10dp"
                 android:clickable="true"
                 app:cardCornerRadius="0dp"
                 app:layout_behavior="@string/appbar_scrolling_view_behavior">
@@ -135,7 +147,8 @@
                     android:layout_height="wrap_content"
                     android:layout_marginLeft="3dp"
                     android:padding="5dp"
-                    android:text="Read"
+                    android:text="@string/read"
+                    android:layout_marginStart="3dp"
                     android:textColor="@color/applozic_theme_color_primary"
                     android:textSize="18sp" />
 
@@ -157,15 +170,17 @@
                 android:layout_marginRight="10dp"
                 android:clickable="true"
                 app:cardCornerRadius="0dp"
+                android:layout_marginEnd="10dp"
+                android:layout_marginStart="10dp"
                 app:layout_behavior="@string/appbar_scrolling_view_behavior">
 
-
-                <ListView
+                <android.support.v7.widget.RecyclerView
                     android:id="@+id/applozic_message_info_read_list"
                     android:layout_width="match_parent"
-                    android:layout_height="match_parent"
-                    android:fillViewport="true"
-                    android:fitsSystemWindows="true"
+                    android:layout_height="wrap_content"
+                    android:scrollbars="vertical"
+                    android:layout_marginEnd="10dp"
+                    android:layout_marginStart="10dp"
                     app:layout_behavior="@string/appbar_scrolling_view_behavior" />
 
             </android.support.v7.widget.CardView>
@@ -194,7 +209,8 @@
                     android:layout_height="wrap_content"
                     android:layout_marginLeft="3dp"
                     android:padding="5dp"
-                    android:text="Delivered"
+                    android:text="@string/delivered"
+                    android:layout_marginStart="3dp"
                     android:textColor="@color/applozic_theme_color_primary"
                     android:textSize="18sp" />
 
@@ -213,18 +229,20 @@
                 android:layout_marginBottom="65dp"
                 android:layout_marginLeft="10dp"
                 android:layout_marginRight="10dp"
+                android:layout_marginStart="10dp"
+                android:layout_marginEnd="10dp"
                 android:clickable="true"
                 app:cardCornerRadius="0dp"
                 app:layout_behavior="@string/appbar_scrolling_view_behavior">
 
-                <ListView
+                <android.support.v7.widget.RecyclerView
                     android:id="@+id/applozic_message_info_delivered_list_view"
                     android:layout_width="match_parent"
-                    android:layout_height="match_parent"
-                    android:fillViewport="true"
-                    android:fitsSystemWindows="true"
+                    android:layout_height="wrap_content"
+                    android:scrollbars="vertical"
                     app:layout_behavior="@string/appbar_scrolling_view_behavior" />
+
             </android.support.v7.widget.CardView>
         </RelativeLayout>
     </LinearLayout>
-</android.support.v4.widget.NestedScrollView>
\ No newline at end of file
+</ScrollView>
\ No newline at end of file
diff --git a/mobicomkitui/src/main/res/layout/attach_photo_popup_window_layout.xml b/mobicomkitui/src/main/res/layout/attach_photo_popup_window_layout.xml
index 816e7ea2..443e92aa 100644
--- a/mobicomkitui/src/main/res/layout/attach_photo_popup_window_layout.xml
+++ b/mobicomkitui/src/main/res/layout/attach_photo_popup_window_layout.xml
@@ -1,17 +1,18 @@
 <?xml version="1.0" encoding="utf-8"?>
 <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:orientation="vertical"
     android:layout_width="match_parent"
-    android:padding="10dp"
-    android:layout_height="wrap_content">
+    android:layout_height="wrap_content"
+    android:orientation="vertical"
+    android:padding="10dp">
 
     <LinearLayout
-        android:orientation="horizontal"
+        android:id="@+id/upload_gallery_layout"
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
-        android:padding="10dp"
-        android:id="@+id/upload_gallery_layout"
-        android:background="@color/applozic_theme_color_primary">
+        android:background="@color/applozic_theme_color_primary"
+        android:orientation="horizontal"
+        android:padding="10dp">
+
         <ImageView
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
@@ -20,63 +21,61 @@
         <TextView
             android:layout_width="match_parent"
             android:layout_height="wrap_content"
-            android:text=" Gallery "
-            android:textSize="20sp"
-            android:textColor="@color/white"
             android:layout_gravity="center_horizontal"
-            />
+            android:text="@string/gallery"
+            android:textColor="@color/white"
+            android:textSize="20sp" />
 
     </LinearLayout>
 
     <LinearLayout
-        android:orientation="horizontal"
+        android:id="@+id/upload_camera_layout"
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
         android:layout_gravity="center_horizontal"
-        android:padding="10dp"
-        android:id="@+id/upload_camera_layout"
-        android:background="@color/applozic_theme_color_primary">
+        android:background="@color/applozic_theme_color_primary"
+        android:orientation="horizontal"
+        android:padding="10dp">
 
         <ImageView
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
-            android:src="@drawable/applozic_ic_image_camera_alt"
-            android:layout_gravity="center_horizontal" />
+            android:layout_gravity="center_horizontal"
+            android:src="@drawable/applozic_ic_image_camera_alt" />
 
         <TextView
             android:layout_width="match_parent"
             android:layout_height="wrap_content"
-            android:text=" Camera "
-            android:textSize="20sp"
-            android:textColor="@color/white"
             android:layout_gravity="center"
-            />
+            android:text="@string/camera_option"
+            android:textColor="@color/white"
+            android:textSize="20sp" />
 
 
     </LinearLayout>
 
     <LinearLayout
-        android:orientation="horizontal"
+        android:id="@+id/upload_remove_image_layout"
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
-        android:layout_gravity="right"
-        android:padding="10dp"
-        android:id="@+id/upload_remove_image_layout"
-        android:background="@color/applozic_theme_color_primary">
+        android:layout_gravity="end"
+        android:background="@color/applozic_theme_color_primary"
+        android:orientation="horizontal"
+        android:padding="10dp">
+
         <ImageView
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
-            android:src="@drawable/applozic_ic_action_highlight_remove"
-            android:layout_gravity="center" />
+            android:layout_gravity="center"
+            android:src="@drawable/applozic_ic_action_highlight_remove" />
 
         <TextView
             android:layout_width="match_parent"
             android:layout_height="wrap_content"
-            android:text=" Remove Image "
-            android:textSize="20sp"
-            android:textColor="@color/white"
             android:layout_gravity="center"
-            />
+            android:text="@string/remove_image"
+            android:textColor="@color/white"
+            android:textSize="20sp" />
 
     </LinearLayout>
 </LinearLayout>
\ No newline at end of file
diff --git a/mobicomkitui/src/main/res/layout/channel_create_activty_layout.xml b/mobicomkitui/src/main/res/layout/channel_create_activty_layout.xml
index 30b4a2f0..bad2feda 100755
--- a/mobicomkitui/src/main/res/layout/channel_create_activty_layout.xml
+++ b/mobicomkitui/src/main/res/layout/channel_create_activty_layout.xml
@@ -13,8 +13,9 @@
         android:background="?attr/colorPrimary"
         android:elevation="4dp"
         android:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar"
-        android:titleTextAppearance="@color/white"
-        app:popupTheme="@style/ThemeOverlay.AppCompat.Light" />
+        app:popupTheme="@style/ThemeOverlay.AppCompat.Light"
+        app:subtitleTextAppearance="@style/ToolbarSubtitle"
+        app:titleTextAppearance="@style/ToolbarTitle" />
 
     <de.hdodenhof.circleimageview.CircleImageView
         android:id="@+id/channelIcon"
@@ -27,27 +28,30 @@
 
 
     <de.hdodenhof.circleimageview.CircleImageView
+        android:id="@+id/applozic_channel_profile_camera"
         android:layout_width="60dp"
         android:layout_height="60dp"
-        android:clickable="true"
-        android:id="@+id/applozic_channel_profile_camera"
-        android:background="@color/apploizc_transparent_color"
-        android:src="@drawable/applozic_ic_action_camera_new"
         android:layout_above="@+id/channelName"
+        android:layout_alignEnd="@+id/channelIcon"
         android:layout_alignRight="@+id/channelIcon"
-        android:layout_alignEnd="@+id/channelIcon" />
+        android:background="@color/apploizc_transparent_color"
+        android:clickable="true"
+        android:src="@drawable/applozic_ic_action_camera_new" />
 
     <EditText
         android:id="@+id/channelName"
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
         android:layout_below="@id/channelIcon"
-        android:layout_gravity="center_vertical"
         android:layout_marginLeft="30dp"
         android:layout_marginRight="30dp"
         android:layout_marginTop="15dp"
         android:layout_weight="8"
+        android:layout_marginStart="30dp"
+        android:layout_marginEnd="30dp"
         android:hint="@string/group_name_hint"
+        android:textAlignment="viewStart"
+        android:layout_gravity="start"
         android:inputType="textAutoCorrect"
         android:lines="1"
         android:maxLength="255" />
@@ -56,8 +60,7 @@
         android:id="@+id/footerAd"
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
+        android:layout_gravity="top"
         android:orientation="vertical"
-        android:visibility="gone"
-        android:layout_gravity="top">
-    </LinearLayout>
+        android:visibility="gone"/>
 </RelativeLayout>
\ No newline at end of file
diff --git a/mobicomkitui/src/main/res/layout/channel_info_layout.xml b/mobicomkitui/src/main/res/layout/channel_info_layout.xml
index ac94ff44..45af724f 100755
--- a/mobicomkitui/src/main/res/layout/channel_info_layout.xml
+++ b/mobicomkitui/src/main/res/layout/channel_info_layout.xml
@@ -1,177 +1,188 @@
 <?xml version="1.0" encoding="utf-8"?>
 <android.support.design.widget.CoordinatorLayout xmlns:android="http://schemas.android.com/apk/res/android"
-        xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:fitsSystemWindows="true"
+    app:layout_behavior="@string/appbar_scrolling_view_behavior">
+
+    <android.support.design.widget.AppBarLayout
+        android:id="@+id/app_bar"
         android:layout_width="match_parent"
+        android:layout_height="256dp"
         android:fitsSystemWindows="true"
-        android:layout_height="match_parent"
-        app:layout_behavior="@string/appbar_scrolling_view_behavior">
+        android:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar"
+        app:layout_scrollFlags="scroll">
 
-        <android.support.design.widget.AppBarLayout
-            android:id="@+id/app_bar"
+        <android.support.design.widget.CollapsingToolbarLayout
+            android:id="@+id/toolbar_layout"
             android:layout_width="match_parent"
-            android:layout_height="256dp"
+            android:layout_height="match_parent"
             android:fitsSystemWindows="true"
-            android:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar"
-            app:layout_scrollFlags="scroll">
+            app:expandedTitleGravity="bottom"
+            app:expandedTitleMarginBottom="35dp"
+            app:expandedTitleMarginStart="10dp"
+            app:expandedTitleTextAppearance="@style/TextAppearance.AppCompat.Title"
+            app:layout_scrollFlags="scroll|exitUntilCollapsed">
 
-            <android.support.design.widget.CollapsingToolbarLayout
-                android:id="@+id/toolbar_layout"
+
+            <ImageView
+                android:id="@+id/channelImage"
                 android:layout_width="match_parent"
                 android:layout_height="match_parent"
                 android:fitsSystemWindows="true"
-                app:contentScrim="#0288D1"
-                app:expandedTitleGravity="bottom"
-                app:expandedTitleMarginBottom="35dp"
-                app:expandedTitleMarginStart="10dp"
-                app:expandedTitleTextAppearance="@style/TextAppearance.AppCompat.Title"
-                app:layout_scrollFlags="scroll|exitUntilCollapsed">
-
+                android:src="@drawable/applozic_group_icon"
+                app:layout_collapseMode="parallax" />
 
-                <ImageView
-                    android:id="@+id/channelImage"
-                    android:layout_width="match_parent"
-                    android:layout_height="match_parent"
-                    android:fitsSystemWindows="true"
-                    android:src="@drawable/applozic_group_icon"
-                    app:layout_collapseMode="parallax"  />
-
-                <View
-                    android:layout_width="match_parent"
-                    android:layout_height="match_parent"
-                    android:background="#7F000000"
-                    android:fitsSystemWindows="true"
-                    app:layout_collapseMode="parallax" />
-
-                <TextView
-                    android:id="@+id/created_by"
-                    android:layout_width="wrap_content"
-                    android:layout_height="wrap_content"
-                    android:layout_gravity="bottom"
-                    android:layout_marginBottom="10dp"
-                    android:layout_marginLeft="10dp"
-                    android:textColor="@color/white"
-                    android:textSize="16sp"
-                    app:layout_collapseMode="parallax" />
-
-                <android.support.v7.widget.Toolbar
-                    android:id="@+id/toolbar"
-                    android:layout_width="match_parent"
-                    android:layout_height="?attr/actionBarSize"
-                    android:titleTextAppearance="@color/white"
-                    app:layout_collapseMode="pin"
-                    android:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar"
-                    app:popupTheme="@style/ThemeOverlay.AppCompat.Light"  />
-
-            </android.support.design.widget.CollapsingToolbarLayout>
-        </android.support.design.widget.AppBarLayout>
+            <View
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                android:background="#7F000000"
+                android:fitsSystemWindows="true"
+                app:layout_collapseMode="parallax" />
+
+            <TextView
+                android:id="@+id/created_by"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:textDirection="locale"
+                android:textAlignment="gravity"
+                android:layout_gravity="bottom"
+                android:layout_marginBottom="10dp"
+                android:layout_marginLeft="10dp"
+                android:textColor="@color/white"
+                android:textSize="16sp"
+                android:layout_marginStart="10dp"
+                app:layout_collapseMode="parallax" />
+
+            <android.support.v7.widget.Toolbar
+                android:id="@+id/toolbar"
+                android:layout_width="match_parent"
+                android:layout_height="?attr/actionBarSize"
+                android:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar"
+                app:layout_collapseMode="pin"
+                android:layout_marginStart="20dp"
+                android:layout_marginEnd="20dp"
+                app:popupTheme="@style/ThemeOverlay.AppCompat.Light"
+                app:subtitleTextAppearance="@style/ToolbarSubtitle"
+                app:titleTextAppearance="@style/ToolbarTitle" />
+
+        </android.support.design.widget.CollapsingToolbarLayout>
+    </android.support.design.widget.AppBarLayout>
+
+    <android.support.v4.widget.NestedScrollView
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:fillViewport="true"
+        app:layout_behavior="@string/appbar_scrolling_view_behavior"
+        app:layout_scrollFlags="scroll">
 
-        <android.support.v4.widget.NestedScrollView
+        <RelativeLayout
             android:layout_width="match_parent"
-            app:layout_behavior="@string/appbar_scrolling_view_behavior"
             android:layout_height="match_parent"
-            android:fillViewport="true"
+            app:layout_behavior="@string/appbar_scrolling_view_behavior"
             app:layout_scrollFlags="scroll">
 
-            <RelativeLayout
+            <android.support.v7.widget.CardView
+                android:id="@+id/participantsCardView"
                 android:layout_width="match_parent"
-                android:layout_height="match_parent"
-                app:layout_behavior="@string/appbar_scrolling_view_behavior"
-                app:layout_scrollFlags="scroll">
+                android:layout_height="wrap_content"
+                android:layout_marginLeft="20dp"
+                android:layout_marginRight="20dp"
+                android:layout_marginTop="20dp"
+                android:clickable="true"
+                app:cardCornerRadius="0dp"
+                app:layout_behavior="@string/appbar_scrolling_view_behavior">
 
-                <android.support.v7.widget.CardView
-                    android:id="@+id/participantsCardView"
+                <TextView
+                    android:id="@+id/groupParticipantsTexView"
                     android:layout_width="match_parent"
+                    android:textDirection="locale"
+                    android:textAlignment="gravity"
                     android:layout_height="wrap_content"
-                    android:layout_marginLeft="20dp"
-                    android:layout_marginRight="20dp"
-                    android:layout_marginTop="20dp"
-                    android:clickable="true"
-                    app:cardCornerRadius="0dp"
-                    app:layout_behavior="@string/appbar_scrolling_view_behavior">
-
-                    <TextView
-                        android:layout_width="match_parent"
-                        android:layout_height="wrap_content"
-                        android:layout_marginLeft="3dp"
-                        android:padding="5dp"
-                        android:text="Participants"
-                        android:textColor="#0277BD"
-                        android:textSize="18sp" />
-
-                </android.support.v7.widget.CardView>
-
-                <android.support.v7.widget.CardView
-                    android:id="@+id/listCardView"
-                    android:layout_width="wrap_content"
-                    android:layout_height="wrap_content"
-                    android:layout_below="@+id/participantsCardView"
-                    android:layout_marginBottom="65dp"
-                    android:layout_marginLeft="20dp"
-                    android:layout_marginRight="20dp"
-                    android:clickable="true"
-                    app:cardCornerRadius="0dp"
-                    app:layout_behavior="@string/appbar_scrolling_view_behavior">
-
-
-                    <ListView
-                        android:id="@+id/mainList"
-                        android:layout_width="match_parent"
-                        android:layout_height="match_parent"
-                        android:fillViewport="true"
-                        android:fitsSystemWindows="true"
-                        app:layout_behavior="@string/appbar_scrolling_view_behavior" />
-
-                </android.support.v7.widget.CardView>
-
-                <RelativeLayout
-                    android:id="@+id/channel_exit_relativeLayout"
+                    android:layout_marginLeft="3dp"
+                    android:layout_marginStart="3dp"
+                    android:padding="5dp"
+	            android:text="@string/participants"
+                    android:textSize="18sp" />
+
+            </android.support.v7.widget.CardView>
+
+            <android.support.v7.widget.CardView
+                android:id="@+id/listCardView"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_below="@+id/participantsCardView"
+                android:layout_marginBottom="65dp"
+                android:layout_marginLeft="20dp"
+                android:layout_marginRight="20dp"
+                android:clickable="true"
+                app:cardCornerRadius="0dp"
+                android:layout_marginEnd="20dp"
+                android:layout_marginStart="20dp"
+                app:layout_behavior="@string/appbar_scrolling_view_behavior">
+
+
+                <ListView
+                    android:id="@+id/mainList"
+                    android:layout_width="match_parent"
+                    android:layout_height="match_parent"
+                    android:fillViewport="true"
+                    android:fitsSystemWindows="true"
+                    app:layout_behavior="@string/appbar_scrolling_view_behavior" />
+
+            </android.support.v7.widget.CardView>
+
+            <RelativeLayout
+                android:id="@+id/channel_exit_relativeLayout"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_marginBottom="10dp"
+                android:layout_marginLeft="20dp"
+                android:layout_marginRight="10dp"
+                android:layout_marginEnd="10dp"
+                android:layout_marginStart="20dp"
+                app:layout_behavior="@string/appbar_scrolling_view_behavior">
+
+                <Button
+                    android:id="@+id/exit_channel"
                     android:layout_width="wrap_content"
                     android:layout_height="wrap_content"
-                    android:layout_marginBottom="10dp"
-                    android:layout_marginLeft="20dp"
-                    android:layout_marginRight="10dp"
-                    app:layout_behavior="@string/appbar_scrolling_view_behavior">
-
-                    <Button
-                        android:id="@+id/exit_channel"
-                        android:layout_width="wrap_content"
-                        android:layout_height="wrap_content"
-                        android:layout_alignParentBottom="true"
-                        android:layout_marginBottom="20dp"
-                        android:background="#0288D1"
-                        android:configChanges="orientation"
-                        android:padding="5dp"
-                        android:text="@string/channel_exit_button"
-                        android:textColor="#ffffff"
-                        android:textSize="15sp" />
-
-                </RelativeLayout>
-
-                <RelativeLayout
-                    android:id="@+id/channel_delete_relativeLayout"
+                    android:layout_alignParentBottom="true"
+                    android:layout_marginBottom="20dp"
+                    android:layout_marginStart="20dp"
+                    android:layout_marginEnd="10dp"
+                    android:background="@color/applozic_theme_color_primary"
+                    android:configChanges="orientation"
+                    android:padding="5dp"
+                    android:textColor="#ffffff"
+                    android:textSize="15sp" />
+
+            </RelativeLayout>
+
+            <RelativeLayout
+                android:id="@+id/channel_delete_relativeLayout"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_marginBottom="10dp"
+                android:layout_marginLeft="20dp"
+                android:layout_marginRight="10dp"
+                android:visibility="gone"
+                app:layout_behavior="@string/appbar_scrolling_view_behavior">
+
+                <Button
+                    android:id="@+id/delete_channel_button"
                     android:layout_width="wrap_content"
                     android:layout_height="wrap_content"
-                    android:layout_marginBottom="10dp"
-                    android:layout_marginLeft="20dp"
-                    android:layout_marginRight="10dp"
-                    android:visibility="gone"
-                    app:layout_behavior="@string/appbar_scrolling_view_behavior">
-
-                    <Button
-                        android:id="@+id/delete_channel_button"
-                        android:layout_width="wrap_content"
-                        android:layout_height="wrap_content"
-                        android:layout_alignParentBottom="true"
-                        android:layout_marginBottom="20dp"
-                        android:background="#0288D1"
-                        android:configChanges="orientation"
-                        android:padding="5dp"
-                        android:text="@string/channel_delete_group_button"
-                        android:textColor="#ffffff"
-                        android:textSize="15sp" />
-
-                </RelativeLayout>
+                    android:layout_alignParentBottom="true"
+                    android:layout_marginBottom="20dp"
+                    android:configChanges="orientation"
+                    android:padding="5dp"
+                    android:textColor="#ffffff"
+                    android:textSize="15sp" />
+
             </RelativeLayout>
-        </android.support.v4.widget.NestedScrollView>
+        </RelativeLayout>
+    </android.support.v4.widget.NestedScrollView>
 
-    </android.support.design.widget.CoordinatorLayout>
\ No newline at end of file
+</android.support.design.widget.CoordinatorLayout>
\ No newline at end of file
diff --git a/mobicomkitui/src/main/res/layout/contact_list_fragment.xml b/mobicomkitui/src/main/res/layout/contact_list_fragment.xml
index c7008777..7ea8bbc0 100755
--- a/mobicomkitui/src/main/res/layout/contact_list_fragment.xml
+++ b/mobicomkitui/src/main/res/layout/contact_list_fragment.xml
@@ -7,35 +7,35 @@
          consistency. -->
     <ListView
         android:id="@id/android:list"
+        style="@style/ContactListView"
         android:layout_width="match_parent"
-        android:layout_height="match_parent"
-        style="@style/ContactListView" />
+        android:layout_height="match_parent" />
 
     <LinearLayout
         android:id="@id/android:empty"
-        android:gravity="center"
         android:layout_width="match_parent"
         android:layout_height="match_parent"
+        android:gravity="center"
         android:orientation="vertical">
 
         <TextView
             android:id="@+id/result"
-            android:gravity="center"
             android:layout_width="match_parent"
             android:layout_height="wrap_content"
-            android:text="@string/no_contacts"
             android:fontFamily="sans-serif-light"
+            android:gravity="center"
+            android:text="@string/no_contacts"
             android:textAppearance="?android:attr/textAppearanceLarge" />
 
         <Button
             android:id="@+id/actionButton"
-            android:gravity="center"
             android:layout_width="match_parent"
             android:layout_height="wrap_content"
-            android:text="@string/invite"
-            android:visibility="gone"
             android:fontFamily="sans-serif-light"
-            android:textAppearance="?android:attr/textAppearanceLarge" />
+            android:gravity="center"
+            android:text="@string/invite"
+            android:textAppearance="?android:attr/textAppearanceLarge"
+            android:visibility="gone" />
 
     </LinearLayout>
 
diff --git a/mobicomkitui/src/main/res/layout/contact_list_item.xml b/mobicomkitui/src/main/res/layout/contact_list_item.xml
index 8464b80f..eab75335 100755
--- a/mobicomkitui/src/main/res/layout/contact_list_item.xml
+++ b/mobicomkitui/src/main/res/layout/contact_list_item.xml
@@ -1,41 +1,104 @@
 <?xml version="1.0" encoding="utf-8"?>
 <RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    style="@style/listViewActivatedStyle"
     android:layout_width="match_parent"
-    android:layout_height="?android:attr/listPreferredItemHeight"
-    style="@style/listViewActivatedStyle">
+    android:layout_height="?android:attr/listPreferredItemHeight">
+
+    <RelativeLayout
+        android:id="@+id/profile_image_relative_layout"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:paddingBottom="6dp"
+        android:paddingLeft="@dimen/listview_item_padding"
+        android:paddingStart="@dimen/listview_item_padding"
+        android:paddingRight="0dp"
+        android:paddingEnd="0dp"
+        android:paddingTop="8dp">
+
+        <TextView
+            android:id="@+id/contactIcon"
+            android:layout_width="48dp"
+            android:layout_height="48dp"
+            android:layout_gravity="center"
+            android:background="@drawable/mobiframework_circular_text_view"
+            android:gravity="center"
+            android:text=""
+            android:textColor="#ffffff"
+            android:textSize="20sp"
+            android:visibility="gone" />
+
+
+        <de.hdodenhof.circleimageview.CircleImageView
+            android:id="@+id/contactImage"
+            android:layout_width="48dp"
+            android:layout_height="48dp"
+            android:layout_gravity="center"
+            android:layout_toRightOf="@+id/contactIcon"
+            android:src="@drawable/applozic_ic_contact_picture_holo_light"
+            android:visibility="visible"
+            android:layout_toEndOf="@+id/contactIcon" />
+
+    </RelativeLayout>
+
+    <RelativeLayout
+        android:id="@+id/displayNameLayout"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_alignParentBottom="true"
+        android:layout_alignParentRight="true"
+        android:layout_marginRight="5dp"
+        android:layout_toRightOf="@+id/profile_image_relative_layout"
+        android:paddingLeft="@dimen/listview_item_padding"
+        android:paddingStart="@dimen/listview_item_padding"
+        android:paddingRight="@dimen/listview_item_padding"
+        android:paddingEnd="@dimen/listview_item_padding"
+        android:layout_marginEnd="5dp"
+        android:layout_toEndOf="@+id/profile_image_relative_layout"
+        android:layout_alignParentEnd="true">
+
+        <TextView
+            android:id="@+id/contactNumberTextView"
+            android:layout_width="match_parent"
+            android:layout_height="26dp"
+            android:layout_marginBottom="5dp"
+            android:layout_marginTop="2dp"
+            android:ellipsize="end"
+            android:singleLine="true"
+            android:text=""
+            android:textColor="@color/message_details_text_color"
+            android:textSize="14sp"
+            android:visibility="gone" />
+
+    </RelativeLayout>
 
     <!-- Use standard android.R class icon id instead of app specific id. This is just useful for
          consistency. Use scaleType=centerCrop to give a nice full cropped image in the assigned
          space -->
-    <de.hdodenhof.circleimageview.CircleImageView
-        android:id="@+id/contactImage"
-        android:layout_width="52dp"
-        android:layout_height="52dp"
-        android:padding="5dp"
-        android:layout_margin="5dp"
-        android:src="@drawable/applozic_ic_contact_picture_180_holo_light"
-        android:layout_gravity="center"
-        android:visibility="visible" />
-
     <!-- Use standard android.R class text2 id instead of app specific id. This is just useful for
          consistency. This is secondary text and not always visible so by default is has its
          visibility set to gone -->
     <TextView
         android:id="@+id/text2"
-        android:paddingLeft="@dimen/listview_item_padding"
-        android:paddingRight="@dimen/listview_item_padding"
         android:layout_width="match_parent"
         android:layout_height="26dp"
-        android:layout_toRightOf="@id/contactImage"
         android:layout_alignParentBottom="true"
         android:layout_alignParentRight="true"
+        android:layout_toRightOf="@+id/profile_image_relative_layout"
+        android:ellipsize="marquee"
         android:fontFamily="sans-serif"
-        android:textColor="@color/message_text_color"
+        android:paddingLeft="@dimen/listview_item_padding"
+        android:paddingStart="@dimen/listview_item_padding"
+        android:paddingRight="@dimen/listview_item_padding"
+        android:paddingEnd="@dimen/listview_item_padding"
         android:singleLine="true"
-        android:ellipsize="marquee"
-        android:visibility="gone"
         android:text="@string/search_match_other"
-        android:textAppearance="?android:attr/textAppearanceSmall" />
+        android:textColor="@color/message_text_color"
+        android:textSize="14dp"
+        android:visibility="gone"
+        android:layout_alignParentEnd="true"
+        android:layout_toEndOf="@+id/profile_image_relative_layout"
+        android:textDirection="locale"
+        android:textAlignment="gravity" />
 
     <!-- Use standard android.R class text1 id instead of app specific id. This is just useful for
          consistency. This view also sets layout_alignWithParentIfMissing=true which lets the view
@@ -43,20 +106,23 @@
          its initial state). -->
     <TextView
         android:id="@+id/text1"
-        android:paddingLeft="@dimen/listview_item_padding"
-        android:paddingRight="@dimen/listview_item_padding"
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
-        android:layout_above="@id/text2"
-        android:layout_toRightOf="@id/contactImage"
-        android:gravity="center_vertical"
-        android:layout_alignParentRight="true"
         android:layout_alignParentTop="true"
         android:layout_alignWithParentIfMissing="true"
-        android:textColor="@color/message_text_color"
-        android:fontFamily="sans-serif-light"
+        android:layout_marginRight="30dp"
+        android:layout_marginEnd="30dp"
+        android:layout_marginTop="5dp"
+        android:layout_toRightOf="@id/profile_image_relative_layout"
+        android:ellipsize="end"
+        android:gravity="center_vertical"
+        android:paddingLeft="@dimen/listview_item_padding"
+        android:paddingStart="@dimen/listview_item_padding"
         android:singleLine="true"
-        android:ellipsize="marquee"
-        android:textAppearance="?android:attr/textAppearanceLarge" />
+        android:textDirection="locale"
+        android:textColor="@color/message_details_text_color"
+        android:textSize="18sp"
+        android:layout_toEndOf="@id/profile_image_relative_layout" />
+
 
-</RelativeLayout>
+</RelativeLayout>
\ No newline at end of file
diff --git a/mobicomkitui/src/main/res/layout/contact_select_layout.xml b/mobicomkitui/src/main/res/layout/contact_select_layout.xml
index 45d3b23b..689879f7 100755
--- a/mobicomkitui/src/main/res/layout/contact_select_layout.xml
+++ b/mobicomkitui/src/main/res/layout/contact_select_layout.xml
@@ -1,9 +1,8 @@
 <?xml version="1.0" encoding="utf-8"?>
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
     xmlns:app="http://schemas.android.com/apk/res-auto"
     android:layout_width="match_parent"
-    android:layout_height="match_parent"
-    android:orientation="vertical">
+    android:layout_height="match_parent">
 
     <android.support.v7.widget.Toolbar
         android:id="@+id/my_toolbar"
@@ -12,14 +11,15 @@
         android:background="?attr/colorPrimary"
         android:elevation="4dp"
         android:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar"
-        android:titleTextAppearance="@color/white"
-        app:popupTheme="@style/ThemeOverlay.AppCompat.Light" />
+        app:popupTheme="@style/ThemeOverlay.AppCompat.Light"
+        app:subtitleTextAppearance="@style/ToolbarSubtitle"
+        app:titleTextAppearance="@style/ToolbarTitle" />
 
+    <RelativeLayout
+        android:id="@+id/layout_child_activity"
+        android:layout_width="fill_parent"
+        android:layout_height="fill_parent"
+        android:layout_below="@+id/my_toolbar"
+        android:layout_gravity="start|top" />
 
-    <ListView
-        android:id="@+id/mainList"
-        style="@style/ContactListView"
-        android:layout_width="match_parent"
-        android:layout_height="match_parent" />
-
-</LinearLayout>
\ No newline at end of file
+</RelativeLayout>
\ No newline at end of file
diff --git a/mobicomkitui/src/main/res/layout/contact_select_list_item.xml b/mobicomkitui/src/main/res/layout/contact_select_list_item.xml
index b3da8da1..730f91c4 100755
--- a/mobicomkitui/src/main/res/layout/contact_select_list_item.xml
+++ b/mobicomkitui/src/main/res/layout/contact_select_list_item.xml
@@ -1,69 +1,145 @@
 <?xml version="1.0" encoding="utf-8"?>
 <RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
     android:layout_width="match_parent"
-    android:layout_height="?android:attr/listPreferredItemHeight"
-    xmlns:app="http://schemas.android.com/apk/res-auto">
+    android:layout_height="?android:attr/listPreferredItemHeight">
 
     <!-- Use standard android.R class icon id instead of app specific id. This is just useful for
          consistency. Use scaleType=centerCrop to give a nice full cropped image in the assigned
          space -->
-    <de.hdodenhof.circleimageview.CircleImageView
-        android:id="@+id/contactImage"
-        android:layout_width="52dp"
-        android:layout_height="52dp"
-        android:layout_gravity="center"
-        android:layout_margin="5dp"
-        android:padding="5dp"
-        android:src="@drawable/applozic_ic_contact_picture_180_holo_light"
-        android:visibility="visible" />
+
+    <RelativeLayout
+        android:id="@+id/profile_image_relative_layout"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:paddingBottom="6dp"
+        android:paddingLeft="@dimen/listview_item_padding"
+        android:paddingStart="@dimen/listview_item_padding"
+        android:paddingRight="0dp"
+        android:paddingEnd="0dp"
+        android:paddingTop="8dp">
+
+        <TextView
+            android:id="@+id/alphabeticImage"
+            android:layout_width="48dp"
+            android:layout_height="48dp"
+            android:layout_gravity="center"
+            android:background="@drawable/mobiframework_circular_text_view"
+            android:gravity="center"
+            android:text=""
+            android:textColor="#ffffff"
+            android:textSize="20sp"
+            android:visibility="gone" />
+
+
+        <de.hdodenhof.circleimageview.CircleImageView
+            android:id="@+id/contactImage"
+            android:layout_width="48dp"
+            android:layout_height="48dp"
+            android:layout_gravity="center"
+            android:layout_toRightOf="@+id/alphabeticImage"
+            android:src="@drawable/applozic_ic_contact_picture_holo_light"
+            android:visibility="visible"
+            android:layout_toEndOf="@+id/alphabeticImage" />
+
+    </RelativeLayout>
+
+    <TextView
+        android:id="@+id/onlineTextView"
+        android:layout_width="15dp"
+        android:layout_height="15dp"
+        android:layout_alignBottom="@+id/profile_image_relative_layout"
+        android:layout_alignEnd="@+id/profile_image_relative_layout"
+        android:layout_alignRight="@+id/profile_image_relative_layout"
+        android:layout_gravity="start|top"
+        android:background="@drawable/online_circle"
+        android:textColor="@color/white"
+        android:textStyle="bold"
+        android:visibility="gone" />
 
     <!-- Use standard android.R class text2 id instead of app specific id. This is just useful for
          consistency. This is secondary text and not always visible so by default is has its
          visibility set to gone -->
-    <TextView
-        android:id="@+id/applozic_group_member_info"
-        android:layout_width="match_parent"
-        android:layout_height="26dp"
+
+    <RelativeLayout
+        android:id="@+id/displayNameLayout"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
         android:layout_alignParentBottom="true"
         android:layout_alignParentRight="true"
-        android:layout_toRightOf="@id/contactImage"
-        android:ellipsize="marquee"
-        android:fontFamily="sans-serif"
+        android:layout_marginRight="5dp"
+        android:layout_toRightOf="@+id/profile_image_relative_layout"
         android:paddingLeft="@dimen/listview_item_padding"
+        android:paddingStart="@dimen/listview_item_padding"
         android:paddingRight="@dimen/listview_item_padding"
-        android:visibility="gone"
-        android:singleLine="true"
-        android:text="@string/applozic_user_already_in_a_group"
-        android:textAppearance="?android:attr/textAppearanceSmall" />
+        android:paddingEnd="@dimen/listview_item_padding"
+        android:layout_toEndOf="@+id/profile_image_relative_layout"
+        android:layout_alignParentEnd="true"
+        android:layout_marginEnd="5dp">
+
+        <TextView
+            android:id="@+id/applozic_group_member_info"
+            android:layout_width="match_parent"
+            android:layout_height="26dp"
+            android:layout_marginTop="2dp"
+            android:ellipsize="marquee"
+            android:singleLine="true"
+            android:textSize="14sp"
+            android:visibility="gone" />
+
+        <!-- Use standard android.R class text1 id instead of app specific id. This is just useful for
+             consistency. This view also sets layout_alignWithParentIfMissing=true which lets the view
+             align with the parent view if the text2 view is not part of the view hierarchy (which is
+             its initial state). -->
+        <TextView
+            android:id="@+id/contactNumberTextView"
+            android:layout_width="match_parent"
+            android:layout_height="26dp"
+            android:layout_marginTop="2dp"
+            android:ellipsize="end"
+            android:singleLine="true"
+            android:text=""
+            android:textColor="@color/message_details_text_color"
+            android:textSize="14sp"
+            android:visibility="gone" />
+
+    </RelativeLayout>
 
-    <!-- Use standard android.R class text1 id instead of app specific id. This is just useful for
-         consistency. This view also sets layout_alignWithParentIfMissing=true which lets the view
-         align with the parent view if the text2 view is not part of the view hierarchy (which is
-         its initial state). -->
     <TextView
         android:id="@+id/displayName"
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
-        android:layout_alignParentRight="true"
+        android:layout_above="@id/displayNameLayout"
         android:layout_alignParentTop="true"
         android:layout_alignWithParentIfMissing="true"
-        android:layout_toRightOf="@id/contactImage"
-        android:ellipsize="marquee"
-        android:fontFamily="sans-serif-light"
+        android:layout_marginRight="30dp"
+        android:layout_toRightOf="@id/profile_image_relative_layout"
+        android:ellipsize="end"
         android:gravity="center_vertical"
+        android:textDirection="locale"
         android:paddingLeft="@dimen/listview_item_padding"
-        android:paddingRight="@dimen/listview_item_padding"
+        android:paddingStart="@dimen/listview_item_padding"
         android:singleLine="true"
-        android:textAppearance="?android:attr/textAppearanceLarge" />
+        android:textColor="@color/message_details_text_color"
+        android:textSize="18sp"
+        android:layout_marginEnd="30dp"
+        android:layout_toEndOf="@id/profile_image_relative_layout" />
+
 
     <android.support.v7.widget.AppCompatCheckBox
-        android:layout_width="wrap_content"
         android:id="@+id/checkbox"
+        android:layout_width="wrap_content"
         android:layout_height="wrap_content"
         android:layout_alignEnd="@+id/displayName"
+        android:layout_alignParentRight="true"
         android:layout_alignRight="@+id/displayName"
         android:layout_centerVertical="true"
+        android:layout_marginLeft="5dp"
+        android:layout_marginRight="5dp"
         android:padding="10dp"
-        app:buttonTint="#b2b2b2" />
+        app:buttonTint="#b2b2b2"
+        android:layout_alignParentEnd="true"
+        android:layout_marginEnd="5dp"
+        android:layout_marginStart="5dp" />
 
-</RelativeLayout>
+</RelativeLayout>
\ No newline at end of file
diff --git a/mobicomkitui/src/main/res/layout/contact_users_layout.xml b/mobicomkitui/src/main/res/layout/contact_users_layout.xml
index 472ca78f..0cbd92a9 100755
--- a/mobicomkitui/src/main/res/layout/contact_users_layout.xml
+++ b/mobicomkitui/src/main/res/layout/contact_users_layout.xml
@@ -1,24 +1,25 @@
 <?xml version="1.0" encoding="utf-8"?>
 <RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
     android:layout_width="match_parent"
-    android:orientation="vertical"
-    android:layout_height="?android:attr/listPreferredItemHeight">
+    android:layout_height="?android:attr/listPreferredItemHeight"
+    android:orientation="vertical">
 
     <RelativeLayout
-        android:layout_width="wrap_content"
         android:id="@+id/profile_image_relative_layout"
-        android:layout_marginTop="6dp"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
         android:layout_marginBottom="6dp"
         android:layout_marginLeft="6dp"
-        android:layout_height="wrap_content">
+        android:layout_marginTop="6dp"
+        android:layout_marginStart="6dp">
 
         <TextView
             android:id="@+id/alphabeticImage"
             android:layout_width="50dp"
             android:layout_height="50dp"
+            android:layout_gravity="center"
             android:background="@drawable/mobiframework_circular_text_view"
             android:gravity="center"
-            android:layout_gravity="center"
             android:text=""
             android:textColor="#ffffff"
             android:textSize="20dp"
@@ -29,10 +30,11 @@
             android:id="@+id/contactImage"
             android:layout_width="50dp"
             android:layout_height="50dp"
+            android:layout_gravity="center"
             android:layout_toRightOf="@+id/alphabeticImage"
             android:src="@drawable/applozic_ic_contact_picture_holo_light"
-            android:layout_gravity="center"
-            android:visibility="visible" />
+            android:visibility="visible"
+            android:layout_toEndOf="@+id/alphabeticImage" />
 
     </RelativeLayout>
 
@@ -44,11 +46,17 @@
         android:layout_below="@+id/displayName"
         android:layout_toRightOf="@id/profile_image_relative_layout"
         android:ellipsize="marquee"
-        android:textSize="14sp"
         android:paddingLeft="@dimen/listview_item_padding"
+        android:paddingStart="@dimen/listview_item_padding"
+        android:textDirection="locale"
+        android:textAlignment="gravity"
         android:paddingRight="@dimen/listview_item_padding"
+        android:paddingEnd="@dimen/listview_item_padding"
         android:singleLine="true"
-        android:textColor="#757575" />
+        android:textColor="#757575"
+        android:textSize="14sp"
+        android:layout_toEndOf="@id/profile_image_relative_layout"
+        android:layout_alignParentEnd="true" />
 
     <!-- Use standard android.R class text1 id instead of app specific id. This is just useful for
          consistency. This view also sets layout_alignWithParentIfMissing=true which lets the view
@@ -59,18 +67,24 @@
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
         android:layout_alignParentRight="true"
-        android:layout_marginTop="6dp"
         android:layout_alignParentTop="true"
         android:layout_alignWithParentIfMissing="true"
+        android:layout_marginTop="6dp"
+        android:textDirection="locale"
+        android:textAlignment="gravity"
         android:layout_toRightOf="@id/profile_image_relative_layout"
         android:ellipsize="marquee"
         android:fontFamily="sans-serif-light"
         android:gravity="center_vertical"
         android:paddingLeft="@dimen/listview_item_padding"
+        android:paddingStart="@dimen/listview_item_padding"
         android:paddingRight="@dimen/listview_item_padding"
+        android:paddingEnd="@dimen/listview_item_padding"
         android:singleLine="true"
+        android:textColor="#616161"
         android:textSize="15sp"
-        android:textColor="#616161" />
+        android:layout_alignParentEnd="true"
+        android:layout_toEndOf="@id/profile_image_relative_layout" />
 
 
     <!--Originally, @string/admin_text at android:text="Group Admin"-->
@@ -78,20 +92,22 @@
         android:id="@+id/adminTextView"
         android:layout_width="wrap_content"
         android:layout_height="wrap_content"
-        android:gravity="center"
+        android:layout_alignBottom="@+id/displayName"
+        android:layout_alignParentRight="true"
         android:layout_marginRight="10dp"
-        android:singleLine="true"
-        android:visibility="gone"
-        android:paddingTop="1dp"
+        android:background="@drawable/admin_text"
+        android:gravity="center"
+        android:padding="2dp"
         android:paddingBottom="1dp"
         android:paddingLeft="10dp"
+        android:paddingStart="10dp"
         android:paddingRight="10dp"
-        android:layout_alignBottom="@+id/displayName"
-        android:layout_alignParentRight="true"
+        android:paddingEnd="10dp"
+        android:paddingTop="1dp"
+        android:singleLine="true"
         android:text="@string/admin_text"
-        android:background="@drawable/admin_text"
         android:textSize="12sp"
-        android:padding="2dp"
-        android:textColor="@color/applozic_theme_color_primary"
-        />
+        android:visibility="gone"
+        android:layout_alignParentEnd="true"
+        android:layout_marginEnd="10dp" />
 </RelativeLayout>
\ No newline at end of file
diff --git a/mobicomkitui/src/main/res/layout/conversation_scheduler.xml b/mobicomkitui/src/main/res/layout/conversation_scheduler.xml
index 5a5c0daa..521441ca 100755
--- a/mobicomkitui/src/main/res/layout/conversation_scheduler.xml
+++ b/mobicomkitui/src/main/res/layout/conversation_scheduler.xml
@@ -1,10 +1,10 @@
 <?xml version="1.0" encoding="utf-8"?>
 
 <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:orientation="vertical"
+    android:id="@+id/conversation_scheduler"
     android:layout_width="match_parent"
     android:layout_height="match_parent"
-    android:id="@+id/conversation_scheduler">
+    android:orientation="vertical">
 
     <RelativeLayout
         android:layout_width="fill_parent"
@@ -12,83 +12,90 @@
         android:padding="10dp">
 
         <TextView
+            android:id="@+id/schedule_header"
             android:layout_width="fill_parent"
             android:layout_height="wrap_content"
-            android:text="@string/scheduleDialogHeader"
-            android:id="@+id/schedule_header"
             android:layout_alignParentLeft="true"
+            android:layout_alignParentRight="true"
             android:layout_alignParentTop="true"
-            android:paddingBottom="10dp"
-            android:textStyle="bold"
-            android:textSize="18dp"
             android:layout_centerHorizontal="true"
+            android:layout_marginBottom="15dp"
+            android:background="@color/mobitexter_main_color"
             android:gravity="center_horizontal"
-            android:layout_alignParentRight="true"
+            android:paddingBottom="10dp"
             android:paddingTop="10dp"
-            android:background="@color/mobitexter_main_color"
-            android:layout_marginBottom="15dp"
-            android:textColor="@color/white" />
+            android:text="@string/scheduleDialogHeader"
+            android:textColor="@color/white"
+            android:textSize="18dp"
+            android:layout_alignParentStart="true"
+            android:layout_alignParentEnd="true"
+            android:textStyle="bold" />
 
         <TextView
+            android:id="@+id/selectionRequest"
             android:layout_width="fill_parent"
             android:layout_height="wrap_content"
-            android:text="@string/selectionRequestText"
-            android:id="@+id/selectionRequest"
             android:layout_below="@+id/schedule_header"
+            android:text="@string/selectionRequestText"
             android:textSize="15dp" />
 
         <TextView
-            android:text="@string/scheduledDateText"
+            android:id="@+id/scheduledDateText"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
-            android:textSize="15dp"
-            android:layout_gravity="left|top"
-            android:id="@+id/scheduledDateText"
+            android:layout_below="@+id/selectionRequest"
+            android:layout_gravity="start|top"
+            android:focusableInTouchMode="false"
             android:paddingBottom="20dp"
             android:paddingRight="20dp"
-            android:layout_below="@+id/selectionRequest"
             android:paddingTop="20px"
-            android:focusableInTouchMode="false" />
+            android:paddingEnd="20dp"
+            android:text="@string/scheduledDateText"
+            android:textSize="15dp" />
 
         <TextView
             android:id="@+id/scheduledDate"
-            android:text="@string/defaultDate"
-            android:textAppearance="?android:attr/textAppearanceLarge"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
-            android:textSize="15dp"
+            android:layout_alignBottom="@+id/scheduledDateText"
             android:layout_gravity="center_horizontal|top"
-            android:textColor="@color/holo_blue"
+            android:layout_toRightOf="@+id/scheduledDateText"
             android:paddingBottom="20dp"
             android:paddingTop="20dp"
-            android:layout_toRightOf="@+id/scheduledDateText"
-            android:layout_alignBottom="@+id/scheduledDateText"
+            android:text="@string/defaultDate"
+            android:textAppearance="?android:attr/textAppearanceLarge"
+            android:textColor="@color/holo_blue"
+            android:layout_toEndOf="@+id/scheduledDateText"
+            android:textSize="15dp"
             android:textStyle="bold" />
 
         <TextView
-            android:text="@string/scheduledTimeText"
+            android:id="@+id/scheduledTimeText"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
-            android:textSize="15dp"
-            android:layout_gravity="left|center_vertical"
             android:layout_alignLeft="@+id/scheduledDateText"
             android:layout_below="@+id/scheduledDateText"
+            android:layout_gravity="start|center_vertical"
             android:paddingBottom="15dp"
+            android:layout_alignStart="@+id/scheduledDateText"
+            android:paddingEnd="20dp"
             android:paddingRight="20dp"
-            android:id="@+id/scheduledTimeText" />
+            android:text="@string/scheduledTimeText"
+            android:textSize="15dp" />
 
         <TextView
             android:id="@+id/scheduledTime"
-            android:text="@string/defaultTime"
-            android:textAppearance="?android:attr/textAppearanceLarge"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
-            android:textSize="15dp"
+            android:layout_below="@+id/scheduledDateText"
             android:layout_gravity="center"
-            android:textColor="@color/holo_blue"
             android:layout_toRightOf="@+id/scheduledDateText"
-            android:layout_below="@+id/scheduledDateText"
             android:paddingBottom="15dp"
+            android:text="@string/defaultTime"
+            android:layout_toEndOf="@+id/scheduledDateText"
+            android:textAppearance="?android:attr/textAppearanceLarge"
+            android:textColor="@color/holo_blue"
+            android:textSize="15dp"
             android:textStyle="bold" />
     </RelativeLayout>
 </LinearLayout>
\ No newline at end of file
diff --git a/mobicomkitui/src/main/res/layout/fragment_contact.xml b/mobicomkitui/src/main/res/layout/fragment_contact.xml
deleted file mode 100755
index 28564e22..00000000
--- a/mobicomkitui/src/main/res/layout/fragment_contact.xml
+++ /dev/null
@@ -1,16 +0,0 @@
-<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    xmlns:tools="http://schemas.android.com/tools"
-    android:layout_width="match_parent"
-    android:layout_height="match_parent"
-    android:paddingBottom="@dimen/activity_vertical_margin"
-    android:paddingLeft="@dimen/mobicom_activity_horizontal_margin"
-    android:paddingRight="@dimen/mobicom_activity_horizontal_margin"
-    android:paddingTop="@dimen/activity_vertical_margin"
-    tools:context="com.applozic.mobicomkit.uiwidgets.people.activity.MobiComKitPeopleActivity$PlaceholderFragment">
-
-    <TextView
-        android:id="@+id/section_label"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content" />
-
-</RelativeLayout>
diff --git a/mobicomkitui/src/main/res/layout/mobicom_attachment_gridview_item.xml b/mobicomkitui/src/main/res/layout/mobicom_attachment_gridview_item.xml
index f78e630c..da6da37b 100644
--- a/mobicomkitui/src/main/res/layout/mobicom_attachment_gridview_item.xml
+++ b/mobicomkitui/src/main/res/layout/mobicom_attachment_gridview_item.xml
@@ -2,66 +2,68 @@
 <RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
     android:layout_width="wrap_content"
     android:layout_height="wrap_content"
-    android:background="@color/whitesmoke"
-    android:layout_margin="3dp">
+    android:layout_margin="3dp"
+    android:background="@color/whitesmoke">
 
     <ImageView
         android:id="@+id/galleryImageView"
         android:layout_width="200dp"
         android:layout_height="200dp"
         android:background="@color/apploizc_transparent_color"
-        android:scaleType="centerCrop"/>
+        android:scaleType="centerCrop" />
 
     <ImageView
         android:id="@+id/mobicom_attachment_image"
         android:layout_width="wrap_content"
         android:layout_height="wrap_content"
-        android:drawablePadding="6dp"
-        android:visibility="gone"
         android:background="@color/apploizc_transparent_color"
+        android:drawablePadding="6dp"
+        android:scaleType="centerCrop"
         android:src="@drawable/applozic_ic_action_attachment"
-        android:scaleType="centerCrop"/>
+        android:visibility="gone" />
 
     <TextView
+        android:id="@+id/mobicom_attachment_file_name"
         android:layout_width="wrap_content"
         android:layout_height="wrap_content"
-        android:ellipsize="end"
-        android:layout_marginLeft="5dp"
-        android:textColor="#000000"
-        android:text="file name will come here for attachment"
-        android:id="@+id/mobicom_attachment_file_name"
-        android:visibility="gone"
         android:layout_alignBottom="@+id/mobicom_attachment_image"
-        android:layout_toRightOf="@+id/mobicom_attachment_image"
+        android:layout_alignParentTop="true"
+        android:layout_marginLeft="5dp"
         android:layout_toEndOf="@+id/mobicom_attachment_image"
-        android:layout_alignParentTop="true" />
+        android:layout_toRightOf="@+id/mobicom_attachment_image"
+        android:ellipsize="end"
+        android:textAlignment="viewStart"
+        android:layout_gravity="start"
+        android:text="@string/file_name_will_come_here_for_attachment"
+        android:textColor="#000000"
+        android:layout_marginStart="5dp"
+        android:visibility="gone" />
 
     <ImageButton
         android:id="@+id/mobicom_attachment_delete_btn"
-        android:src="@drawable/mobicom_ic_delete_white_18dp"
         android:layout_width="wrap_content"
         android:layout_height="wrap_content"
         android:layout_alignParentBottom="true"
+        android:layout_alignParentEnd="true"
         android:layout_alignParentRight="true"
-        android:layout_alignParentEnd="true" />
+        android:src="@drawable/mobicom_ic_delete_white_18dp" />
 
     <TextView
+        android:id="@+id/mobicom_attachment_file_size"
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
-        android:textColor="@color/white"
-        android:paddingLeft="10dp"
-        android:background="#80000000"
-        android:height="50dp"
-        android:gravity="center_vertical"
-        android:textAppearance="?android:attr/textAppearanceSmall"
-        android:textAlignment="center"
-        android:text=""
-        android:id="@+id/mobicom_attachment_file_size"
         android:layout_alignParentBottom="true"
         android:layout_alignParentLeft="true"
-        android:layout_alignParentStart="true" />
-
-
+        android:layout_alignParentStart="true"
+        android:textAlignment="viewStart"
+        android:layout_gravity="start"
+        android:height="50dp"
+        android:background="#80000000"
+        android:paddingLeft="10dp"
+        android:paddingStart="10dp"
+        android:text=""
+        android:textAppearance="?android:attr/textAppearanceSmall"
+        android:textColor="@color/white" />
 
 
 </RelativeLayout>
\ No newline at end of file
diff --git a/mobicomkitui/src/main/res/layout/mobicom_attachment_gridview_layout.xml b/mobicomkitui/src/main/res/layout/mobicom_attachment_gridview_layout.xml
index d628abfe..dd01cda7 100644
--- a/mobicomkitui/src/main/res/layout/mobicom_attachment_gridview_layout.xml
+++ b/mobicomkitui/src/main/res/layout/mobicom_attachment_gridview_layout.xml
@@ -4,12 +4,11 @@
     android:id="@+id/grid"
     android:layout_width="wrap_content"
     android:layout_height="fill_parent"
-    android:numColumns="2"
-    android:verticalSpacing="10dp"
-    android:horizontalSpacing="10dp"
-    android:layout_marginTop="20dp"
     android:layout_marginBottom="10dp"
+    android:layout_marginTop="20dp"
+    android:horizontalSpacing="10dp"
+    android:numColumns="2"
     android:scrollbarStyle="outsideOverlay"
+    android:scrollbars="vertical"
     android:verticalScrollbarPosition="right"
-    android:scrollbars="vertical">
-</GridView>
+    android:verticalSpacing="10dp"></GridView>
diff --git a/mobicomkitui/src/main/res/layout/mobicom_attachment_preview_layout.xml b/mobicomkitui/src/main/res/layout/mobicom_attachment_preview_layout.xml
index 9f4b9495..879f0053 100755
--- a/mobicomkitui/src/main/res/layout/mobicom_attachment_preview_layout.xml
+++ b/mobicomkitui/src/main/res/layout/mobicom_attachment_preview_layout.xml
@@ -58,7 +58,8 @@
             android:layout_height="wrap_content"
             android:layout_gravity="center_vertical"
             android:layout_marginLeft="5dp"
-            android:text="10 MB"
+            android:text="@string/mb_10"
+            android:layout_marginStart="5dp"
             android:textColor="@color/white"
             android:textSize="20sp" />
 
@@ -111,9 +112,13 @@
         <TextView
             android:id="@+id/attachment_retry_text"
             android:layout_width="wrap_content"
+            android:textDirection="locale"
+            android:textAlignment="gravity"
             android:layout_height="wrap_content"
             android:layout_gravity="center_vertical"
             android:layout_marginBottom="10dp"
+            android:layout_marginStart="15dp"
+            android:layout_marginEnd="15dp"
             android:layout_marginLeft="15dp"
             android:layout_marginRight="15dp"
             android:layout_marginTop="10dp"
diff --git a/mobicomkitui/src/main/res/layout/mobicom_audio_message_layout.xml b/mobicomkitui/src/main/res/layout/mobicom_audio_message_layout.xml
index a0659202..ec69b295 100755
--- a/mobicomkitui/src/main/res/layout/mobicom_audio_message_layout.xml
+++ b/mobicomkitui/src/main/res/layout/mobicom_audio_message_layout.xml
@@ -3,8 +3,8 @@
 <RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
     android:layout_width="match_parent"
     android:layout_height="wrap_content"
-    android:orientation="vertical"
     android:background="@color/apploizc_transparent_color"
+    android:orientation="vertical"
     android:weightSum="1">
 
 
@@ -12,72 +12,75 @@
         android:layout_width="wrap_content"
         android:layout_height="wrap_content"
         android:layout_centerInParent="true"
-        android:background="@color/white"
+        android:layout_margin="0dp"
         android:layout_marginLeft="0dp"
         android:layout_marginRight="0dp"
+        android:layout_marginEnd="0dp"
+        android:layout_marginStart="0dp"
         android:layout_marginTop="0dp"
-        android:layout_margin="0dp">
+        android:background="@color/white">
 
         <RelativeLayout
             android:layout_width="268dp"
             android:layout_height="242dp"
-            android:orientation="vertical"
-            android:background="@color/apploizc_transparent_color"
-            android:weightSum="1"
+            android:layout_gravity="center_horizontal|top"
             android:layout_marginBottom="10dp"
-            android:layout_gravity="center_horizontal|top">
+            android:background="@color/apploizc_transparent_color"
+            android:orientation="vertical"
+            android:weightSum="1">
+
             <ImageButton
+                android:id="@+id/audio_mic_imageview"
                 android:layout_width="wrap_content"
                 android:layout_height="wrap_content"
-                android:id="@+id/audio_mic_imageview"
-                android:src="@drawable/applozic_audio_normal"
                 android:layout_centerHorizontal="true"
+                android:layout_gravity="center_horizontal"
                 android:background="@color/apploizc_transparent_color"
-                android:layout_gravity="center_horizontal" />
+                android:src="@drawable/applozic_audio_normal" />
 
             <TextView
+                android:id="@+id/txtcount"
                 android:layout_width="wrap_content"
                 android:layout_height="wrap_content"
-                android:id="@+id/txtcount"
-                android:textSize="30sp"
-                android:textColor="@color/black"
-                android:textAlignment="center"
-                android:text="00:00:00"
-                android:layout_marginTop="55dp"
-                android:layout_gravity="center_horizontal"
                 android:layout_below="@+id/audio_mic_imageview"
                 android:layout_centerHorizontal="true"
-                android:phoneNumber="false" />
+                android:layout_gravity="center_horizontal"
+                android:layout_marginTop="55dp"
+                android:phoneNumber="false"
+                android:text="00:00:00"
+                android:textAlignment="center"
+                android:textColor="@color/black"
+                android:textSize="30sp" />
 
             <TextView
+                android:id="@+id/audio_recording_text"
                 android:layout_width="wrap_content"
                 android:layout_height="wrap_content"
-                android:text="@string/start_text"
-                android:id="@+id/audio_recording_text"
                 android:layout_below="@+id/audio_mic_imageview"
-                android:layout_centerHorizontal="true" />
+                android:layout_centerHorizontal="true"
+                android:text="@string/start_text" />
 
             <Button
+                android:id="@+id/audio_cancel"
                 android:layout_width="wrap_content"
                 android:layout_height="wrap_content"
-                android:id="@+id/audio_cancel"
-                android:text="@string/cancel_text"
-                android:layout_gravity="left|bottom"
-                android:background="@color/apploizc_transparent_color"
                 android:layout_alignParentBottom="true"
                 android:layout_alignParentLeft="true"
-                android:layout_alignParentStart="true" />
+                android:layout_alignParentStart="true"
+                android:layout_gravity="start|bottom"
+                android:background="@color/apploizc_transparent_color"
+                android:text="@string/cancel_text" />
 
             <Button
+                android:id="@+id/audio_send"
                 android:layout_width="wrap_content"
                 android:layout_height="wrap_content"
-                android:id="@+id/audio_send"
-                android:text="@string/send_text"
-                android:layout_gravity="right|bottom"
-                android:background="@color/apploizc_transparent_color"
                 android:layout_alignTop="@+id/audio_cancel"
+                android:layout_gravity="end|bottom"
+                android:layout_toEndOf="@+id/audio_mic_imageview"
                 android:layout_toRightOf="@+id/audio_mic_imageview"
-                android:layout_toEndOf="@+id/audio_mic_imageview" />
+                android:background="@color/apploizc_transparent_color"
+                android:text="@string/send_text" />
         </RelativeLayout>
     </FrameLayout>
 </RelativeLayout>
\ No newline at end of file
diff --git a/mobicomkitui/src/main/res/layout/mobicom_chat_location_view.xml b/mobicomkitui/src/main/res/layout/mobicom_chat_location_view.xml
index 8c9e37a3..d5e9837b 100644
--- a/mobicomkitui/src/main/res/layout/mobicom_chat_location_view.xml
+++ b/mobicomkitui/src/main/res/layout/mobicom_chat_location_view.xml
@@ -12,8 +12,8 @@
         android:layout_height="200dp"
         android:layout_centerInParent="true"
         android:gravity="center"
-        android:src="@drawable/applozic_map_offline_thumbnail"
         android:scaleType="centerCrop"
+        android:src="@drawable/applozic_map_offline_thumbnail"
         android:visibility="visible" />
 
 </RelativeLayout>
\ No newline at end of file
diff --git a/mobicomkitui/src/main/res/layout/mobicom_contact_share_layout.xml b/mobicomkitui/src/main/res/layout/mobicom_contact_share_layout.xml
index 526236dc..074a3b9e 100755
--- a/mobicomkitui/src/main/res/layout/mobicom_contact_share_layout.xml
+++ b/mobicomkitui/src/main/res/layout/mobicom_contact_share_layout.xml
@@ -1,10 +1,10 @@
 <?xml version="1.0" encoding="utf-8"?>
 
 <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/contact_share_layout"
     android:layout_width="match_parent"
     android:layout_height="wrap_content"
     android:background="@color/apploizc_transparent_color"
-    android:id="@+id/contact_share_layout"
     android:orientation="vertical">
 
 
@@ -35,9 +35,10 @@
             android:layout_alignParentEnd="true"
             android:layout_alignParentRight="true"
             android:layout_alignParentTop="true"
-            android:layout_gravity="right"
+            android:layout_gravity="end"
             android:layout_marginLeft="15dp"
             android:layout_marginStart="28dp"
+            android:layout_toEndOf="@+id/contact_share_image"
             android:layout_toRightOf="@+id/contact_share_image">
             <!--<TextView-->
             <!--android:layout_width="wrap_content"-->
@@ -54,25 +55,31 @@
                 android:layout_alignParentStart="true"
                 android:layout_weight="2.16"
                 android:text=""
-                android:textAppearance="?android:attr/textAppearanceMedium"
-                android:textColor="@color/black" />
+                android:textDirection="locale"
+                android:textAlignment="gravity"
+                android:textColor="@color/black"
+                android:textSize="16sp" />
 
             <TextView
                 android:id="@+id/contact_share_tv_no"
                 android:layout_width="wrap_content"
                 android:layout_height="wrap_content"
+                android:textDirection="locale"
+                android:textAlignment="gravity"
                 android:layout_below="@+id/contact_share_tv_name"
                 android:layout_marginTop="5dp"
                 android:text=""
-                android:textAppearance="?android:attr/textAppearanceSmall" />
+                android:textSize="14sp" />
 
             <TextView
                 android:id="@+id/contact_share_emailId"
                 android:layout_width="wrap_content"
                 android:layout_height="wrap_content"
+                android:textDirection="locale"
+                android:textAlignment="gravity"
                 android:layout_below="@+id/contact_share_tv_no"
                 android:text=""
-                android:textAppearance="?android:attr/textAppearanceSmall" />
+                android:textSize="14sp" />
 
 
         </RelativeLayout>
@@ -94,7 +101,7 @@
         android:layout_alignRight="@+id/relativeLayout"
         android:layout_marginTop="3dp"
         android:background="@color/apploizc_transparent_color"
-        android:text="Add Contacts" />
+        android:text="@string/Add_Contacts" />
 
 
 </LinearLayout>
\ No newline at end of file
diff --git a/mobicomkitui/src/main/res/layout/mobicom_date_layout.xml b/mobicomkitui/src/main/res/layout/mobicom_date_layout.xml
index 0caaaed0..4dfd34de 100755
--- a/mobicomkitui/src/main/res/layout/mobicom_date_layout.xml
+++ b/mobicomkitui/src/main/res/layout/mobicom_date_layout.xml
@@ -2,11 +2,11 @@
 <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
     android:layout_width="fill_parent"
     android:layout_height="wrap_content"
+    android:layout_centerInParent="true"
     android:layout_gravity="center"
     android:clickable="false"
-    android:layout_centerInParent="true"
-    android:longClickable="false"
     android:gravity="center"
+    android:longClickable="false"
     android:orientation="horizontal"
     android:paddingBottom="15dp"
     android:paddingTop="15dp">
@@ -18,10 +18,9 @@
         android:layout_gravity="center_horizontal"
         android:gravity="center_horizontal"
         android:text="10"
-        android:textColor="#333"
         android:textSize="14sp"
         android:textStyle="bold"
-        android:visibility="gone"/>
+        android:visibility="gone" />
 
     <TextView
         android:id="@+id/chat_screen_date"
@@ -30,8 +29,8 @@
         android:layout_gravity="center_horizontal"
         android:gravity="center_horizontal"
         android:paddingLeft="10dp"
+        android:paddingStart="10dp"
         android:text=""
-        android:visibility="gone"
-        android:textColor="#333"
-        android:textSize="14sp" />
+        android:textSize="14sp"
+        android:visibility="gone" />
 </LinearLayout>
diff --git a/mobicomkitui/src/main/res/layout/mobicom_image_full_screen.xml b/mobicomkitui/src/main/res/layout/mobicom_image_full_screen.xml
index 7d4a0ab9..31ff4c50 100755
--- a/mobicomkitui/src/main/res/layout/mobicom_image_full_screen.xml
+++ b/mobicomkitui/src/main/res/layout/mobicom_image_full_screen.xml
@@ -1,8 +1,8 @@
 <?xml version="1.0" encoding="utf-8"?>
 <RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
     android:layout_width="fill_parent"
     android:layout_height="fill_parent"
-    xmlns:app="http://schemas.android.com/apk/res-auto"
     android:background="@color/apploizc_dark_black_color"
     android:orientation="vertical">
 
@@ -14,14 +14,16 @@
         android:elevation="4dp"
         android:paddingTop="10dp"
         android:theme="@style/Applozic_FullScreen_Theme"
-        app:popupTheme="@style/Applozic_PopUpTheme"/>
+        app:popupTheme="@style/Applozic_PopUpTheme"
+        app:subtitleTextAppearance="@style/ToolbarSubtitle"
+        app:titleTextAppearance="@style/ToolbarTitle" />
 
-    <com.applozic.mobicomkit.api.attachment.AttachmentView
+    <com.applozic.mobicomkit.uiwidgets.conversation.TouchImageView
         android:id="@+id/full_screen_image"
         android:layout_width="match_parent"
         android:layout_height="match_parent"
-        android:scaleType="fitCenter"
-        android:adjustViewBounds="true" />
+        android:adjustViewBounds="true"
+        android:scaleType="fitCenter" />
 
     <ProgressBar
         android:id="@+id/full_screen_progress_bar"
diff --git a/mobicomkitui/src/main/res/layout/mobicom_individual_multimedia_option_item.xml b/mobicomkitui/src/main/res/layout/mobicom_individual_multimedia_option_item.xml
index 7ddf6dac..2118f638 100644
--- a/mobicomkitui/src/main/res/layout/mobicom_individual_multimedia_option_item.xml
+++ b/mobicomkitui/src/main/res/layout/mobicom_individual_multimedia_option_item.xml
@@ -4,6 +4,8 @@
     android:layout_height="wrap_content"
     android:layout_marginLeft="2dp"
     android:layout_marginRight="2dp"
+    android:layout_marginStart="2dp"
+    android:layout_marginEnd="2dp"
     android:background="@color/white"
     android:orientation="vertical"
     android:padding="10dp">
diff --git a/mobicomkitui/src/main/res/layout/mobicom_list_item_title_navigation.xml b/mobicomkitui/src/main/res/layout/mobicom_list_item_title_navigation.xml
index a571ac19..c3f46f85 100755
--- a/mobicomkitui/src/main/res/layout/mobicom_list_item_title_navigation.xml
+++ b/mobicomkitui/src/main/res/layout/mobicom_list_item_title_navigation.xml
@@ -11,36 +11,41 @@
         android:layout_alignParentLeft="true"
         android:layout_alignParentTop="true"
         android:layout_marginRight="0dp"
+        android:layout_marginEnd="0dp"
+        android:layout_alignParentStart="true"
         android:visibility="gone" />
 
     <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
         android:layout_width="match_parent"
         android:layout_height="match_parent"
-        android:gravity="left"
         android:layout_toRightOf="@id/imgIcon"
-        android:background="@color/mobitexter_main_color">
+        android:layout_toEndOf="@id/imgIcon"
+        android:background="@color/mobitexter_main_color"
+        android:gravity="start">
 
         <TextView
             android:id="@+id/txtName"
-            android:text="name"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
+            android:layout_marginRight="4dp"
+            android:layout_marginEnd="4dp"
             android:singleLine="false"
+            android:text="@string/name"
             android:textColor="@color/white"
-            android:layout_marginRight="4dp"
             android:textSize="14dp" />
 
         <TextView
             android:id="@+id/txtTitle"
-            android:text="mobile number"
-            android:paddingLeft="8dp"
-            android:singleLine="false"
-            android:textColor="@color/whitesmoke"
             android:layout_width="match_parent"
             android:layout_height="wrap_content"
-            android:textSize="12dp"
+            android:paddingBottom="10dp"
+            android:paddingLeft="8dp"
+            android:paddingStart="8dp"
             android:paddingTop="10dp"
-            android:paddingBottom="10dp" />
+            android:singleLine="false"
+            android:text="@string/mobile_number"
+            android:textColor="@color/whitesmoke"
+            android:textSize="12dp" />
     </LinearLayout>
 
 
diff --git a/mobicomkitui/src/main/res/layout/mobicom_message_list.xml b/mobicomkitui/src/main/res/layout/mobicom_message_list.xml
index 4f8fdad1..03426c65 100755
--- a/mobicomkitui/src/main/res/layout/mobicom_message_list.xml
+++ b/mobicomkitui/src/main/res/layout/mobicom_message_list.xml
@@ -63,6 +63,7 @@
             android:layout_alignParentEnd="true"
             android:layout_alignParentRight="true"
             android:layout_marginBottom="15dp"
+            android:layout_marginEnd="15dp"
             android:layout_marginRight="15dp"
             android:background="@drawable/circle"
             android:src="@drawable/applozic_ic_action_add"
@@ -78,7 +79,7 @@
         android:gravity="center_vertical|center_horizontal"
         android:text="@string/empty_conversations"
         android:textColor="@color/empty_conversation_text_color"
-        android:textSize="18dp"
+        android:textSize="18sp"
         android:textStyle="bold"
         android:visibility="gone" />
 
@@ -116,6 +117,7 @@
             android:id="@+id/close_attachment_layout"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
+            android:layout_alignParentEnd="true"
             android:layout_alignParentRight="true"
             android:layout_alignParentTop="true"
             android:src="@drawable/applozic_ic_action_cancel" />
@@ -139,6 +141,7 @@
             android:layout_width="0dp"
             android:layout_height="35dp"
             android:layout_marginBottom="0dp"
+            android:layout_marginEnd="4dp"
             android:layout_marginRight="4dp"
             android:layout_weight="2"
             android:background="@color/message_action_button">
@@ -156,6 +159,7 @@
             android:layout_width="0dp"
             android:layout_height="35dp"
             android:layout_marginBottom="0dp"
+            android:layout_marginEnd="4dp"
             android:layout_marginRight="4dp"
             android:layout_weight="3"
             android:background="@color/message_action_button">
@@ -165,7 +169,7 @@
                 android:layout_width="fill_parent"
                 android:layout_height="fill_parent"
                 android:background="@color/message_action_button"
-                android:text="Schedule"
+                android:text="@string/schedule"
                 android:textColor="@color/black" />
 
         </FrameLayout>
@@ -175,6 +179,7 @@
             android:layout_width="0dp"
             android:layout_height="35dp"
             android:layout_marginBottom="0dp"
+            android:layout_marginEnd="2dp"
             android:layout_marginRight="2dp"
             android:layout_weight="3"
             android:background="@color/message_action_button">
@@ -203,9 +208,7 @@
             android:id="@+id/isTyping"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
-            android:layout_alignParentBottom="true"
-            android:layout_alignParentLeft="true"
-            android:layout_gravity="left"
+            android:layout_gravity="start"
             android:gravity="center"
             android:padding="20dp"
             android:textSize="16sp"
@@ -218,93 +221,206 @@
         android:layout_width="fill_parent"
         android:layout_height="wrap_content"
         android:layout_gravity="bottom"
+        android:background="@color/apploizc_transparent_color"
         android:orientation="horizontal"
         android:visibility="gone">
 
         <LinearLayout
-            android:id="@+id/edit_text_linear_layout"
+            android:id="@+id/main_edit_text_linear_layout"
             android:layout_width="0dp"
             android:layout_height="wrap_content"
             android:layout_gravity="bottom"
             android:layout_marginBottom="8dp"
             android:layout_marginLeft="8dp"
+            android:layout_marginStart="8dp"
             android:layout_marginTop="8dp"
-            android:layout_weight="1"
-            android:orientation="horizontal">
+            android:layout_weight="2"
+            android:background="@drawable/input"
+            android:orientation="vertical">
 
-            <ImageButton
-                android:id="@+id/emoticons_btn"
-                android:layout_width="wrap_content"
-                android:layout_height="match_parent"
-                android:layout_weight="2"
-                android:background="@color/apploizc_transparent_color"
-                android:paddingLeft="20dp"
-                android:paddingRight="20dp"
-                android:scaleType="center"
-                android:src="@drawable/mobicom_emoticons_icon" />
+            <include layout="@layout/reply_message_layout" />
 
-            <ImageButton
-                android:id="@+id/attach_button"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:layout_gravity="bottom|left"
-                android:background="@color/apploizc_transparent_color"
-                android:paddingLeft="10dp"
-                android:gravity="center"
-                android:minHeight="48dp"
-                android:scaleType="center"
-                android:paddingRight="20dp"
-                android:src="@drawable/applozic_ic_action_attachment"
-                android:visibility="visible" />
-
-            <!--
-                    <EditText
-                        android:id="@+id/conversation_message"
-                        android:layout_width="fill_parent"
-                        android:layout_height="wrap_content"
-                        android:layout_weight="8"
-                        android:hint="@string/enter_message_hint"
-                        android:maxLines="6"
-                        android:minLines="2"
-                        android:textColor="@color/black"
-                        android:textSize="16sp" />
-            -->
-            <EditText
-                android:id="@+id/conversation_message"
-                android:layout_width="fill_parent"
+            <LinearLayout
+                android:id="@+id/edit_text_linear_layout"
+                android:layout_width="match_parent"
                 android:layout_height="wrap_content"
-                android:layout_weight="8"
-                android:background="@color/apploizc_transparent_color"
-                android:cursorVisible="true"
-                android:hint="@string/enter_message_hint"
-                android:maxLines="6"
-                android:minHeight="50dp"
-                android:minLines="2"
-                android:textColor="@color/black"
-                android:textColorHint="@color/edittext_hint_color"
-                android:textSize="16sp" />
+                android:layout_gravity="bottom"
+                android:layout_marginLeft="8dp"
+                android:layout_marginStart="8dp"
+                android:layout_weight="1"
+                android:orientation="horizontal">
+
+                <ImageButton
+                    android:id="@+id/emoticons_btn"
+                    android:layout_width="wrap_content"
+                    android:layout_height="match_parent"
+                    android:layout_weight="2"
+                    android:background="@color/apploizc_transparent_color"
+                    android:paddingEnd="20dp"
+                    android:paddingLeft="20dp"
+                    android:paddingRight="20dp"
+                    android:paddingStart="20dp"
+                    android:scaleType="center"
+                    android:src="@drawable/mobicom_emoticons_icon" />
+
+                <ImageButton
+                    android:id="@+id/attach_button"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:layout_gravity="bottom|start"
+                    android:background="@color/apploizc_transparent_color"
+                    android:gravity="center"
+                    android:minHeight="48dp"
+                    android:paddingEnd="20dp"
+                    android:paddingLeft="10dp"
+                    android:paddingRight="20dp"
+                    android:paddingStart="10dp"
+                    android:scaleType="center"
+                    android:src="@drawable/applozic_ic_action_attachment"
+                    android:visibility="visible" />
+
+                <!--
+                        <EditText
+                            android:id="@+id/conversation_message"
+                            android:layout_width="fill_parent"
+                            android:layout_height="wrap_content"
+                            android:layout_weight="8"
+                            android:hint="@string/enter_message_hint"
+                            android:maxLines="6"
+                            android:minLines="2"
+                            android:textColor="@color/black"
+                            android:textSize="16sp" />
+                -->
+                <EditText
+                    android:id="@+id/conversation_message"
+                    android:layout_width="fill_parent"
+                    android:layout_height="wrap_content"
+                    android:layout_gravity="start"
+                    android:layout_weight="8"
+                    android:background="@color/apploizc_transparent_color"
+                    android:cursorVisible="true"
+                    android:inputType="textCapSentences|textMultiLine"
+                    android:maxLines="6"
+                    android:minHeight="50dp"
+                    android:minLines="2"
+                    android:textAlignment="viewStart"
+                    android:textColor="@color/black"
+                    android:textColorHint="@color/edittext_hint_color"
+                    android:textSize="16sp" />
+            </LinearLayout>
         </LinearLayout>
+        <FrameLayout
+            android:id="@+id/audio_record_frame_layout"
+            android:layout_width="0dp"
+            android:layout_height="53dp"
+            android:layout_gravity="bottom"
+            android:layout_marginBottom="8dp"
+            android:layout_marginLeft="8dp"
+            android:layout_marginStart="8dp"
+            android:layout_marginTop="8dp"
+            android:layout_weight="2"
+            android:background="@drawable/input"
+            android:orientation="vertical"
+            android:visibility="gone">
+
+            <include layout="@layout/reply_message_layout" />
 
+            <LinearLayout
+                android:id="@+id/slide_LinearLayout"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_gravity="center"
+                android:layout_marginLeft="40dp"
+                android:layout_marginStart="40dp"
+                android:orientation="horizontal"
+                android:paddingLeft="50dp"
+                android:paddingRight="50dp"
+                android:visibility="visible">
+
+                <ImageView
+                    android:id="@+id/slide_image_view"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:layout_gravity="center_vertical"
+                    android:layout_marginTop="1dp"
+                    android:src="@drawable/slide_arrow_left" />
+
+                <TextView
+                    android:id="@+id/slide_to_cancel_text_view"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:layout_gravity="center_vertical"
+                    android:layout_marginLeft="6dp"
+                    android:layout_marginStart="6dp"
+                    android:text="@string/slide_to_cancel"
+                    android:textColor="#999999"
+                    android:textSize="12dp" />
+            </LinearLayout>
+
+            <LinearLayout
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_gravity="start|center"
+                android:orientation="horizontal"
+                android:paddingEnd="13dp"
+                android:paddingLeft="13dp"
+                android:paddingStart="13dp">
+
+                <ImageView
+                    android:id="@+id/audio_record_icon_image_view"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:layout_gravity="start|center"
+                    android:layout_marginTop="1dp"
+                    android:src="@drawable/applozic_audio_record" />
+
+                <TextView
+                    android:id="@+id/recording_time_text_view"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:layout_gravity="start|center"
+                    android:layout_marginLeft="6dp"
+                    android:layout_marginStart="6dp"
+                    android:text="00:00"
+                    android:textColor="#4d4c4b"
+                    android:textSize="16dp" />
+            </LinearLayout>
 
+        </FrameLayout>
         <!--<com.rockerhieu.emojicon.EmojiconEditText-->
         <!--android:id="@+id/conversation_message"-->
         <!--android:text="I \ue32d emojicon"-->
         <!--emojicon:emojiconSize="28sp"-->
         <!--android:layout_width="match_parent"-->
         <!--android:layout_height="wrap_content"/>-->
+        <FrameLayout
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="bottom"
+            android:gravity="center">
 
-        <ImageButton
-            android:id="@+id/conversation_send"
-            android:layout_width="48dp"
-            android:layout_height="48dp"
-            android:layout_gravity="bottom|right"
-            android:layout_margin="10dp"
-            android:background="@drawable/button_circle"
-            android:clickable="true"
-            android:gravity="center"
-            android:scaleType="center"
-            android:src="@drawable/mobicom_ic_action_send"
-            android:visibility="visible" />
+            <ImageButton
+                android:id="@+id/conversation_send"
+                android:layout_width="48dp"
+                android:layout_height="48dp"
+                android:layout_gravity="bottom|end"
+                android:layout_margin="10dp"
+                android:background="@drawable/button_circle"
+                android:clickable="true"
+                android:gravity="center"
+                android:scaleType="center"
+                android:src="@drawable/applozic_mic_pressed"
+                android:visibility="visible" />
+
+            <EditText
+                android:id="@+id/error_edit_text_view"
+                android:layout_width="0dp"
+                android:layout_height="wrap_content"
+                android:layout_gravity="center"
+                android:enabled="false"
+                android:hint=""
+                android:inputType="none" />
+        </FrameLayout>
     </LinearLayout>
 
     <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
@@ -347,7 +463,7 @@
             android:horizontalSpacing="1dp"
             android:numColumns="3"
             android:stretchMode="columnWidth"
-            android:verticalSpacing="1dp"></GridView>
+            android:verticalSpacing="1dp" />
 
     </LinearLayout>
 
diff --git a/mobicomkitui/src/main/res/layout/mobicom_message_list_header_footer.xml b/mobicomkitui/src/main/res/layout/mobicom_message_list_header_footer.xml
index e1875464..20081d54 100755
--- a/mobicomkitui/src/main/res/layout/mobicom_message_list_header_footer.xml
+++ b/mobicomkitui/src/main/res/layout/mobicom_message_list_header_footer.xml
@@ -1,10 +1,10 @@
 <?xml version="1.0" encoding="utf-8"?>
 
 <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:orientation="vertical"
     android:layout_width="fill_parent"
     android:layout_height="wrap_content"
-    android:gravity="center_vertical|center_horizontal">
+    android:gravity="center_vertical|center_horizontal"
+    android:orientation="vertical">
     <!-- simplified -->
     <!--<TextView
           android:id="@+id/no_conversation"
@@ -20,10 +20,10 @@
         android:layout_width="wrap_content"
         android:layout_height="wrap_content"
         android:gravity="center_vertical|center_horizontal"
-        android:visibility="gone"
-        android:paddingTop="10dp"
         android:paddingBottom="4dp"
-        android:text="@string/info_broadcast_message" />
+        android:paddingTop="10dp"
+        android:text="@string/info_broadcast_message"
+        android:visibility="gone" />
 
     <!--<Button
         android:id="@+id/start_new_conversation"
diff --git a/mobicomkitui/src/main/res/layout/mobicom_message_row_view.xml b/mobicomkitui/src/main/res/layout/mobicom_message_row_view.xml
index 11977abe..f3cb5bea 100755
--- a/mobicomkitui/src/main/res/layout/mobicom_message_row_view.xml
+++ b/mobicomkitui/src/main/res/layout/mobicom_message_row_view.xml
@@ -1,63 +1,56 @@
 <RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
     android:layout_width="wrap_content"
     android:layout_height="wrap_content"
+    android:gravity="center"
     android:longClickable="true"
     android:minHeight="68dp"
     android:orientation="horizontal"
-    android:gravity="center"
+    android:paddingBottom="9dp"
     android:paddingLeft="10dp"
+    android:paddingStart="10dp"
     android:paddingRight="10dp"
-    android:paddingTop="9dp"
-    android:paddingBottom="9dp">
+    android:paddingEnd="10dp"
+    android:paddingTop="9dp">
 
-    <FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
-        android:id="@+id/layout_online"
+    <RelativeLayout
+        android:id="@+id/profile_image_relative_layout"
         android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:layout_alignTop="@+id/onlineTextView"
-        android:visibility="gone">
-    </FrameLayout>
+        android:layout_height="wrap_content">
 
+        <TextView
+            android:id="@+id/alphabeticImage"
+            android:layout_width="46dp"
+            android:layout_height="46dp"
+            android:layout_gravity="center"
+            android:layout_margin="4dp"
+            android:background="@drawable/mobiframework_circular_text_view"
+            android:gravity="center"
+            android:text=""
+            android:textColor="#ffffff"
+            android:textSize="20sp"
+            android:visibility="gone" />
 
-    <TextView
-        android:id="@+id/alphabeticImage"
-        android:layout_width="46dp"
-        android:layout_height="46dp"
-        android:layout_margin="4dp"
-        android:background="@drawable/mobiframework_circular_text_view"
-        android:gravity="center"
-        android:layout_gravity="center"
-        android:text=""
-        android:textColor="#ffffff"
-        android:textSize="20dp"
-        android:visibility="gone" />
+        <de.hdodenhof.circleimageview.CircleImageView
+            android:id="@+id/contactImage"
+            android:layout_width="46dp"
+            android:layout_height="46dp"
+            android:layout_gravity="center"
+            android:layout_margin="4dp"
+            android:layout_toRightOf="@+id/alphabeticImage"
+            android:layout_toEndOf="@+id/alphabeticImage"
+            android:src="@drawable/applozic_group_icon"
+            android:visibility="visible" />
 
-    <!--<ImageView
-        android:id="@+id/contactImage"
-        android:layout_width="55dp"
-        android:layout_height="55dp"
-        android:layout_gravity="center"
-        android:layout_margin="4dp"
-        android:layout_toRightOf="@+id/alphabeticImage"
-        android:src="@drawable/applozic_ic_contact_picture_180_holo_light"
-        android:visibility="visible" />-->
-
-      <de.hdodenhof.circleimageview.CircleImageView
-        android:id="@+id/contactImage"
-        android:layout_width="46dp"
-        android:layout_height="46dp"
-        android:layout_toRightOf="@+id/alphabeticImage"
-        android:layout_margin="4dp"
-        android:src="@drawable/applozic_group_icon"
-        android:layout_gravity="center"
-        android:visibility="visible" />
+    </RelativeLayout>
 
     <LinearLayout
         android:id="@+id/name_time"
         android:layout_width="fill_parent"
         android:layout_height="wrap_content"
         android:layout_marginLeft="12dp"
-        android:layout_toRightOf="@+id/contactImage"
+        android:layout_toRightOf="@+id/profile_image_relative_layout"
+        android:layout_marginStart="12dp"
+        android:layout_toEndOf="@+id/profile_image_relative_layout"
         android:orientation="horizontal"
         android:paddingBottom="1dp"
         android:visibility="visible"
@@ -67,12 +60,14 @@
             android:id="@+id/smReceivers"
             android:layout_width="fill_parent"
             android:layout_height="wrap_content"
+            android:textDirection="locale"
+            android:textAlignment="gravity"
             android:layout_weight="22"
             android:ellipsize="end"
             android:singleLine="true"
             android:text=""
             android:textIsSelectable="false"
-            android:textSize="18dp" />
+            android:textSize="18sp" />
 
         <TextView
             android:id="@+id/createdAtTime"
@@ -84,7 +79,7 @@
             android:singleLine="true"
             android:text="22 Apr 08:10 AM"
             android:textColor="@color/message_details_text_color"
-            android:textSize="10dp" />
+            android:textSize="10sp" />
     </LinearLayout>
 
     <ImageView
@@ -92,7 +87,7 @@
         android:layout_width="18dp"
         android:layout_height="18dp"
         android:layout_below="@+id/name_time"
-        android:layout_toRightOf="@+id/contactImage"
+        android:layout_toRightOf="@+id/profile_image_relative_layout"
         android:gravity="center_vertical"
         android:visibility="gone" />
 
@@ -105,9 +100,11 @@
         android:layout_alignParentRight="false"
         android:layout_below="@+id/messageUnread"
         android:gravity="center_vertical"
-        android:text="delivery status"
+        android:text="@string/delivery_status"
+        android:layout_alignParentEnd="false"
+        android:layout_alignParentStart="false"
         android:textColor="@color/message_details_text_color"
-        android:textSize="12dp"
+        android:textSize="12sp"
         android:visibility="gone" />
 
     <TextView
@@ -115,10 +112,11 @@
         android:layout_width="wrap_content"
         android:layout_height="wrap_content"
         android:layout_alignParentRight="false"
-        android:text="testTime"
+        android:layout_alignParentEnd="false"
+        android:text="@string/testTime"
         android:textColor="@color/message_details_text_color"
         android:textIsSelectable="true"
-        android:textSize="13dp"
+        android:textSize="13sp"
         android:textStyle="bold"
         android:visibility="gone" />
 
@@ -128,7 +126,9 @@
         android:layout_height="wrap_content"
         android:layout_below="@id/name_time"
         android:layout_marginLeft="12dp"
-        android:layout_toRightOf="@+id/contactImage"
+        android:layout_toEndOf="@+id/profile_image_relative_layout"
+        android:layout_marginStart="12dp"
+        android:layout_toRightOf="@+id/profile_image_relative_layout"
         android:orientation="horizontal">
 
         <ImageView
@@ -147,9 +147,12 @@
             android:layout_weight="1"
             android:ellipsize="end"
             android:maxLines="1"
-            android:paddingTop="3dp"
             android:paddingBottom="3dp"
-            android:text="message"
+            android:paddingTop="3dp"
+            android:text="@string/message"
+            android:layout_marginEnd="48dp"
+            android:textDirection="locale"
+            android:textAlignment="gravity"
             android:textColor="#999"
             android:textSize="14sp" />
 
@@ -157,8 +160,9 @@
             android:id="@+id/unreadSmsCount"
             android:layout_width="18dp"
             android:layout_height="18dp"
-            android:layout_gravity="right"
+            android:layout_gravity="end"
             android:layout_marginRight="2dp"
+            android:layout_marginEnd="2dp"
             android:background="@drawable/unread_message_background"
             android:gravity="center_horizontal|center_vertical"
             android:text=""
@@ -174,8 +178,9 @@
         android:layout_width="wrap_content"
         android:layout_height="wrap_content"
         android:layout_below="@+id/messageUnread"
-        android:layout_toRightOf="@+id/contactImage"
-        android:text="Self destruct"
+        android:layout_toRightOf="@+id/profile_image_relative_layout"
+        android:layout_toEndOf="@+id/profile_image_relative_layout"
+        android:text="@string/self_destruct"
         android:textColor="@color/message_details_text_color"
         android:textSize="12dp"
         android:visibility="gone" />
@@ -184,10 +189,10 @@
         android:id="@+id/onlineTextView"
         android:layout_width="15dp"
         android:layout_height="15dp"
-        android:layout_alignBottom="@+id/alphabeticImage"
-        android:layout_alignEnd="@+id/alphabeticImage"
-        android:layout_alignRight="@+id/alphabeticImage"
-        android:layout_gravity="left|top"
+        android:layout_alignBottom="@+id/profile_image_relative_layout"
+        android:layout_alignEnd="@+id/profile_image_relative_layout"
+        android:layout_alignRight="@+id/profile_image_relative_layout"
+        android:layout_gravity="start|top"
         android:background="@drawable/online_circle"
         android:textColor="@color/white"
         android:textStyle="bold"
diff --git a/mobicomkitui/src/main/res/layout/mobicom_multi_attachment_activity.xml b/mobicomkitui/src/main/res/layout/mobicom_multi_attachment_activity.xml
index 0ba39c0c..d7ecac7e 100644
--- a/mobicomkitui/src/main/res/layout/mobicom_multi_attachment_activity.xml
+++ b/mobicomkitui/src/main/res/layout/mobicom_multi_attachment_activity.xml
@@ -4,58 +4,48 @@
     xmlns:app="http://schemas.android.com/apk/res-auto"
     android:layout_width="fill_parent"
     android:layout_height="fill_parent"
-    android:padding="10dp"
     android:background="@color/apploizc_transparent_color"
-    android:weightSum="1"
     android:orientation="vertical"
-    >
-    <!--<android.support.v7.widget.Toolbar-->
-    <!--android:id="@+id/my_toolbar"-->
-    <!--android:layout_width="match_parent"-->
-    <!--android:layout_height="?attr/actionBarSize"-->
-    <!--android:background="?attr/colorPrimary"-->
-    <!--android:elevation="4dp"-->
-    <!--android:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar"-->
-    <!--android:titleTextAppearance="@color/white"-->
-    <!--app:popupTheme="@style/ThemeOverlay.AppCompat.Light" />-->
-
+    android:padding="10dp"
+    android:weightSum="1">
     <include
         android:id="@+id/mobicom_attachment_grid_View"
         layout="@layout/mobicom_attachment_gridview_layout"
-        android:layout_height="0dp"
-        android:layout_weight="0.8"
-        android:layout_marginTop="10dp"
         android:layout_width="wrap_content"
+        android:layout_height="0dp"
         android:layout_alignParentLeft="true"
         android:layout_alignParentStart="true"
-        android:layout_alignParentTop="true" />
+        android:layout_alignParentTop="true"
+        android:layout_marginTop="10dp"
+        android:layout_weight="0.8" />
 
     <RelativeLayout
+        android:id="@+id/multi_attachment_heading_layout"
         android:layout_width="wrap_content"
         android:layout_height="0dp"
-        android:layout_marginTop="10dp"
-        android:layout_weight="0.15"
         android:layout_below="@+id/mobicom_attachment_grid_View"
-        android:id="@+id/multi_attachment_heading_layout"
-        >
+        android:layout_marginTop="10dp"
+        android:layout_weight="0.15">
+
         <EditText
+            android:id="@+id/mobicom_attachment_edit_text"
             android:layout_width="match_parent"
             android:layout_height="wrap_content"
-            android:inputType="textMultiLine"
-            android:ems="10"
-            android:paddingBottom="10dp"
-            android:paddingLeft="10dp"
+            android:layout_alignParentLeft="true"
+            android:layout_alignParentStart="true"
+            android:layout_alignParentTop="true"
             android:background="@drawable/input"
-            android:textColor="@color/black"
-            android:id="@+id/mobicom_attachment_edit_text"
-            android:layout_gravity="center_horizontal"
+            android:ems="10"
             android:focusable="true"
-            android:hint="Add caption..."
+            android:hint="@string/Add_caption"
             android:focusableInTouchMode="true"
-            android:layout_alignParentTop="true"
-            android:layout_alignParentLeft="true"
-            android:layout_alignParentStart="true" />
-
+            android:inputType="textMultiLine"
+            android:textAlignment="viewStart"
+            android:layout_gravity="start"
+            android:paddingBottom="10dp"
+            android:paddingLeft="10dp"
+            android:paddingStart="10dp"
+            android:textColor="@color/black" />
 
 
     </RelativeLayout>
@@ -67,38 +57,41 @@
         android:layout_alignParentBottom="true"
         android:layout_alignParentLeft="true"
         android:layout_alignParentStart="true"
-        android:background="#80000000"
         android:layout_below="@+id/mobicom_attachment_edit_text"
-        >
+        android:background="#80000000">
 
         <Button
             android:id="@+id/mobicom_attachment_cancel_btn"
             android:layout_width="165dp"
             android:layout_height="wrap_content"
+            android:layout_gravity="start|center_vertical"
+            android:background="@color/apploizc_transparent_color"
+            android:paddingLeft="10dp"
+            android:paddingStart="10dp"
             android:text="@string/cancel_text"
             android:textColor="@color/white"
-            android:background="@color/apploizc_transparent_color"
             android:textSize="15sp"
-            android:paddingLeft="10dp"
-            android:visibility="visible"
-            android:layout_gravity="left|center_vertical" />
+            android:visibility="visible" />
+
         <View
             android:layout_width="1dp"
             android:layout_height="30dp"
             android:layout_gravity="center"
             android:background="@color/white" />
+
         <Button
             android:id="@+id/mobicom_attachment_send_btn"
             android:layout_width="167dp"
             android:layout_height="wrap_content"
-            android:text="@string/send_text"
-            android:paddingRight="10dp"
+            android:layout_gravity="end|center_vertical"
             android:background="@color/apploizc_transparent_color"
+            android:gravity="center"
+            android:paddingRight="10dp"
+            android:paddingEnd="10dp"
+            android:text="@string/send_text"
             android:textColor="@color/white"
             android:textSize="15sp"
-            android:visibility="visible"
-            android:gravity="center"
-            android:layout_gravity="right|center_vertical" />
+            android:visibility="visible" />
 
     </FrameLayout>
 </LinearLayout>
\ No newline at end of file
diff --git a/mobicomkitui/src/main/res/layout/mobicom_received_message_list_view.xml b/mobicomkitui/src/main/res/layout/mobicom_received_message_list_view.xml
index f787a6e5..1c818104 100755
--- a/mobicomkitui/src/main/res/layout/mobicom_received_message_list_view.xml
+++ b/mobicomkitui/src/main/res/layout/mobicom_received_message_list_view.xml
@@ -2,24 +2,25 @@
     android:id="@+id/messageLayout"
     android:layout_width="match_parent"
     android:layout_height="wrap_content"
-    android:gravity="left"
-    android:longClickable="true"
     android:layout_marginTop="2dp"
-    android:padding="3dp"
-    android:orientation="horizontal">
+    android:gravity="start"
+    android:longClickable="true"
+    android:orientation="horizontal"
+    android:padding="3dp">
 
     <TextView
+        android:id="@+id/alphabeticImage"
         android:layout_width="44dp"
         android:layout_height="44dp"
+        android:layout_gravity="center"
         android:layout_margin="4dp"
-        android:text=""
-        android:id="@+id/alphabeticImage"
+        android:layout_marginRight="4dp"
         android:background="@drawable/mobiframework_circular_text_view"
+        android:gravity="center"
+        android:text=""
         android:textColor="#ffffff"
-        android:layout_gravity="center"
         android:textSize="20dp"
-        android:gravity="center"
-        android:layout_marginRight="4dp"
+        android:layout_marginEnd="4dp"
         android:visibility="gone" />
 
     <de.hdodenhof.circleimageview.CircleImageView
@@ -27,32 +28,54 @@
         android:layout_width="44dp"
         android:layout_height="44dp"
         android:layout_margin="4dp"
-        android:visibility="visible"
         android:layout_toRightOf="@+id/alphabeticImage"
-        android:src="@drawable/applozic_ic_contact_picture_180_holo_light" />
+        android:layout_toEndOf="@+id/alphabeticImage"
+        android:src="@drawable/applozic_ic_contact_picture_180_holo_light"
+        android:visibility="visible" />
 
     <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
         android:id="@+id/messageTextLayout"
         android:layout_width="wrap_content"
         android:layout_height="wrap_content"
-        android:orientation="vertical"
-        android:padding="5dp"
-        android:minWidth="32dp"
-        android:layout_toRightOf="@+id/contactImage"
         android:layout_marginRight="59dp"
-        android:gravity="center_vertical"
+        android:layout_marginEnd="59dp"
+        android:layout_toRightOf="@+id/contactImage"
+        android:layout_toEndOf="@+id/contactImage"
         android:background="@drawable/applozic_received_message"
-        android:minHeight="55dp">
+        android:gravity="center_vertical"
+        android:minHeight="55dp"
+        android:minWidth="32dp"
+        android:orientation="vertical"
+        android:padding="5dp">
 
-        <TextView
-            android:id="@+id/name_textView"
+        <LinearLayout
+            android:id="@+id/nameTextLayout"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
-            android:textSize="16sp"
-            android:paddingTop="5dp"
             android:paddingLeft="8dp"
+            android:paddingStart="8dp"
+            android:paddingEnd="8dp"
             android:paddingRight="8dp"
-            android:visibility="gone"/>
+            android:paddingTop="8dp">
+
+            <TextView
+                android:id="@+id/onlineTextView"
+                android:layout_width="18dp"
+                android:layout_height="18dp"
+                android:background="@drawable/online_circle"
+                android:visibility="gone" />
+
+            <TextView
+                android:id="@+id/name_textView"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:paddingRight="2dp"
+                android:paddingLeft="2dp"
+                android:paddingStart="2dp"
+                android:paddingEnd="2dp"
+                android:textSize="16sp"
+                android:visibility="gone" />
+        </LinearLayout>
 
         <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
             android:id="@+id/messageTextInsideLayout"
@@ -61,23 +84,27 @@
             android:layout_gravity="start"
             android:orientation="vertical">
 
+            <include layout="@layout/reply_message_layout"/>
+
             <TextView
                 android:id="@+id/attached_file"
                 android:layout_width="fill_parent"
                 android:layout_height="wrap_content"
+                android:textDirection="locale"
+                android:textAlignment="gravity"
                 android:drawableLeft="@drawable/applozic_ic_action_attachment"
+                android:drawableStart="@drawable/applozic_ic_action_attachment"
                 android:drawablePadding="8dp"
                 android:textColor="@color/black"
                 android:textSize="16sp" />
 
-            <include
-                layout="@layout/mobicom_attachment_preview_layout" />
+            <include layout="@layout/mobicom_attachment_preview_layout" />
 
-            <include
-                layout="@layout/mobicom_contact_share_layout" />
+            <include layout="@layout/mobicom_contact_share_layout" />
 
             <include layout="@layout/mobicom_chat_location_view" />
 
+            <include layout="@layout/applozic_document_attachment" />
             <ImageView
                 android:id="@+id/sentOrReceivedIcon"
                 android:layout_width="20dp"
@@ -88,8 +115,12 @@
                 android:layout_width="match_parent"
                 android:layout_height="wrap_content"
                 android:autoLink="all"
+                android:paddingBottom="8dp"
+                android:paddingRight="8dp"
+                android:textDirection="locale"
+                android:textAlignment="gravity"
+                android:paddingLeft="8dp"
                 android:text=""
-                android:padding="10dp"
                 android:textColor="@color/message_text_color"
                 android:textSize="16sp" />
         </LinearLayout>
@@ -100,8 +131,10 @@
             android:layout_height="wrap_content"
             android:layout_marginTop="2dp"
             android:paddingLeft="8dp"
+            android:paddingStart="8dp"
             android:paddingRight="2dp"
-            android:text="Self destruct"
+            android:paddingEnd="2dp"
+            android:text="@string/self_destruct"
             android:textColor="@color/apploizc_darker_gray_color"
             android:textSize="11sp"
             android:visibility="gone" />
@@ -113,11 +146,13 @@
         android:layout_height="wrap_content"
         android:layout_below="@+id/messageTextLayout"
         android:layout_marginLeft="44dp"
+        android:layout_marginStart="44dp"
+        android:layout_marginTop="2dp"
+        android:gravity="bottom"
         android:orientation="horizontal"
         android:paddingBottom="6dp"
-        android:gravity="bottom"
-        android:paddingLeft="15dp"
-        android:layout_marginTop="2dp">
+        android:paddingStart="15dp"
+        android:paddingLeft="15dp">
 
         <TextView
             android:id="@+id/status"
@@ -125,7 +160,9 @@
             android:layout_height="wrap_content"
             android:gravity="center_vertical"
             android:paddingLeft="0dp"
+            android:paddingStart="0dp"
             android:paddingRight="2dp"
+            android:paddingEnd="2dp"
             android:text=""
             android:textColor="@color/message_details_text_color"
             android:textSize="11sp" />
@@ -136,19 +173,21 @@
             android:layout_height="wrap_content"
             android:gravity="center"
             android:paddingRight="2dp"
-            android:text="created at time"
-            android:textColor="@color/message_details_text_color"
+            android:paddingStart="2dp"
+            android:paddingEnd="2dp"
+            android:text="@string/created_at_time"
             android:textSize="11sp" />
 
         <TextView
             android:id="@+id/tempForLayoutAdjustment"
-            android:visibility="gone"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
             android:drawableRight="@drawable/applozic_ic_action_message_pending"
+            android:drawableEnd="@drawable/applozic_ic_action_message_pending"
             android:gravity="center_vertical"
             android:textColor="@color/apploizc_darker_gray_color"
-            android:textSize="11sp" />
+            android:textSize="11sp"
+            android:visibility="gone" />
 
     </LinearLayout>
 
diff --git a/mobicomkitui/src/main/res/layout/mobicom_sent_message_list_view.xml b/mobicomkitui/src/main/res/layout/mobicom_sent_message_list_view.xml
index 5a38637e..a61a9c9f 100755
--- a/mobicomkitui/src/main/res/layout/mobicom_sent_message_list_view.xml
+++ b/mobicomkitui/src/main/res/layout/mobicom_sent_message_list_view.xml
@@ -3,23 +3,25 @@
     android:layout_width="wrap_content"
     android:layout_height="wrap_content"
     android:layout_marginTop="2dp"
-    android:gravity="right"
+    android:gravity="end"
     android:longClickable="true"
-    android:padding="4dp"
-    android:orientation="horizontal">
+    android:orientation="horizontal"
+    android:padding="4dp">
 
     <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
         android:id="@+id/messageTextLayout"
         android:layout_width="wrap_content"
         android:layout_height="wrap_content"
+        android:layout_alignParentEnd="true"
         android:layout_alignParentRight="true"
         android:layout_marginLeft="95dp"
-        android:padding="5dp"
-        android:minWidth="32dp"
+        android:layout_marginStart="95dp"
         android:background="@drawable/applozic_sent_message"
-        android:gravity="right|center_vertical"
+        android:gravity="end|center_vertical"
         android:minHeight="55dp"
-        android:orientation="vertical">
+        android:minWidth="32dp"
+        android:orientation="vertical"
+        android:padding="5dp">
 
         <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
             android:id="@+id/messageTextInsideLayout"
@@ -28,11 +30,16 @@
             android:layout_gravity="start"
             android:orientation="vertical">
 
+            <include layout="@layout/reply_message_layout" />
+
             <TextView
                 android:id="@+id/attached_file"
                 android:layout_width="fill_parent"
                 android:layout_height="wrap_content"
+                android:textDirection="locale"
+                android:textAlignment="gravity"
                 android:drawableLeft="@drawable/applozic_ic_action_attachment"
+                android:drawableStart="@drawable/applozic_ic_action_attachment"
                 android:drawablePadding="8dp"
                 android:textColor="@color/white"
                 android:textSize="16sp" />
@@ -42,18 +49,23 @@
             <include layout="@layout/mobicom_contact_share_layout" />
 
             <include layout="@layout/mobicom_chat_location_view" />
+            <include layout="@layout/applozic_document_attachment" />
 
-            <ImageView
-                android:id="@+id/sentOrReceivedIcon"
-                android:layout_width="20dp"
-                android:layout_height="20dp" />
+        <ImageView
+            android:id="@+id/sentOrReceivedIcon"
+            android:layout_width="20dp"
+            android:layout_height="20dp" />
 
             <TextView
                 android:id="@+id/message"
                 android:layout_width="match_parent"
                 android:layout_height="wrap_content"
                 android:autoLink="all"
-                android:padding="10dp"
+                android:paddingBottom="8dp"
+                android:paddingLeft="8dp"
+                android:textDirection="locale"
+                android:textAlignment="gravity"
+                android:paddingRight="8dp"
                 android:text=""
                 android:textColor="@color/sent_message_text_color"
                 android:textSize="16sp" />
@@ -64,21 +76,26 @@
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
             android:layout_marginTop="2dp"
+            android:paddingEnd="8dp"
             android:paddingLeft="2dp"
             android:paddingRight="8dp"
-            android:text="Self destruct"
+            android:paddingStart="2dp"
+	    android:text="@string/self_destruct"
             android:textColor="@color/message_details_text_color"
-            android:textSize="11dp"
+            android:textSize="12sp"
             android:visibility="gone" />
     </LinearLayout>
 
     <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
         android:layout_width="wrap_content"
         android:layout_height="wrap_content"
+        android:layout_alignParentEnd="true"
         android:layout_alignParentRight="true"
         android:layout_below="@+id/messageTextLayout"
         android:orientation="horizontal"
         android:paddingBottom="6dp"
+        android:paddingStart="4dp"
+        android:paddingEnd="4dp"
         android:paddingRight="4dp">
 
         <TextView
@@ -87,7 +104,9 @@
             android:layout_height="wrap_content"
             android:gravity="center_vertical"
             android:paddingLeft="0dp"
+            android:paddingStart="0dp"
             android:paddingRight="2dp"
+            android:paddingEnd="2dp"
             android:text=""
             android:textColor="@color/message_details_text_color"
             android:textSize="11sp" />
@@ -97,9 +116,10 @@
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
             android:gravity="center"
+            android:paddingStart="2dp"
+            android:paddingEnd="2dp"
             android:paddingLeft="2dp"
-            android:text="created at time"
-            android:textColor="@color/message_details_text_color"
+            android:text="@string/created_at_time"
             android:textSize="11sp" />
 
     </LinearLayout>
diff --git a/mobicomkitui/src/main/res/layout/mobiframework_custom_spinner.xml b/mobicomkitui/src/main/res/layout/mobiframework_custom_spinner.xml
index a2aa49ff..70a07d8d 100755
--- a/mobicomkitui/src/main/res/layout/mobiframework_custom_spinner.xml
+++ b/mobicomkitui/src/main/res/layout/mobiframework_custom_spinner.xml
@@ -3,9 +3,9 @@
 <TextView xmlns:android="http://schemas.android.com/apk/res/android"
     android:id="@android:id/text1"
     style="?android:attr/spinnerDropDownItemStyle"
-    android:singleLine="true"
     android:layout_width="match_parent"
     android:layout_height="?attr/dropdownListPreferredItemHeight"
     android:ellipsize="marquee"
-    android:textColor="@color/black"
-    android:paddingBottom="2dp" />
\ No newline at end of file
+    android:paddingBottom="2dp"
+    android:singleLine="true"
+    android:textColor="@color/black" />
\ No newline at end of file
diff --git a/mobicomkitui/src/main/res/layout/mtmainactivity_layout.xml b/mobicomkitui/src/main/res/layout/mtmainactivity_layout.xml
index 5dacb6f2..2d615291 100755
--- a/mobicomkitui/src/main/res/layout/mtmainactivity_layout.xml
+++ b/mobicomkitui/src/main/res/layout/mtmainactivity_layout.xml
@@ -15,6 +15,6 @@
             android:id="@+id/layout_child_activity"
             android:layout_width="fill_parent"
             android:layout_height="fill_parent"
-            android:layout_gravity="left|top" />
+            android:layout_gravity="start|top" />
     </FrameLayout>
 </android.support.v4.widget.DrawerLayout>
\ No newline at end of file
diff --git a/mobicomkitui/src/main/res/layout/people_activity.xml b/mobicomkitui/src/main/res/layout/people_activity.xml
index 155c450b..87d5e7f7 100755
--- a/mobicomkitui/src/main/res/layout/people_activity.xml
+++ b/mobicomkitui/src/main/res/layout/people_activity.xml
@@ -1,17 +1,19 @@
 <?xml version="1.0" encoding="utf-8"?>
 <RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
     android:layout_width="match_parent"
-    android:layout_height="match_parent"
-    xmlns:app="http://schemas.android.com/apk/res-auto">
+    android:layout_height="match_parent">
 
- <android.support.v7.widget.Toolbar
-    android:id="@+id/my_toolbar"
-    android:layout_width="match_parent"
-    android:layout_height="?attr/actionBarSize"
-    android:background="?attr/colorPrimary"
-    android:elevation="4dp"
-     android:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar"
-    app:popupTheme="@style/ThemeOverlay.AppCompat.Light" />
+    <android.support.v7.widget.Toolbar
+        android:id="@+id/my_toolbar"
+        android:layout_width="match_parent"
+        android:layout_height="?attr/actionBarSize"
+        android:background="?attr/colorPrimary"
+        android:elevation="4dp"
+        android:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar"
+        app:popupTheme="@style/ThemeOverlay.AppCompat.Light"
+        app:subtitleTextAppearance="@style/ToolbarSubtitle"
+        app:titleTextAppearance="@style/ToolbarTitle" />
 
     <android.support.design.widget.TabLayout
         android:id="@+id/tab_layout"
@@ -20,24 +22,24 @@
         android:layout_below="@+id/my_toolbar"
         android:background="?attr/colorPrimary"
         android:elevation="6dp"
+        android:minHeight="?attr/actionBarSize"
+        android:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar"
         android:visibility="gone"
-        app:tabMode="fixed"
         app:tabGravity="fill"
-        android:minHeight="?attr/actionBarSize"
-        android:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar"/>
+        app:tabMode="fixed" />
 
     <android.support.v4.view.ViewPager
         android:id="@+id/viewPager"
-        android:visibility="gone"
         android:layout_width="match_parent"
         android:layout_height="fill_parent"
-        android:layout_below="@id/tab_layout"/>
+        android:layout_below="@id/tab_layout"
+        android:visibility="gone" />
 
     <RelativeLayout
         android:id="@+id/layout_child_activity"
-        android:layout_below="@+id/my_toolbar"
         android:layout_width="fill_parent"
-        android:layout_gravity="left|top"
-        android:layout_height="fill_parent"/>
+        android:layout_height="fill_parent"
+        android:layout_below="@+id/my_toolbar"
+        android:layout_gravity="left|top" />
 
 </RelativeLayout>
\ No newline at end of file
diff --git a/mobicomkitui/src/main/res/layout/quickconversion_activity.xml b/mobicomkitui/src/main/res/layout/quickconversion_activity.xml
index 8cae6a21..8ee05bda 100755
--- a/mobicomkitui/src/main/res/layout/quickconversion_activity.xml
+++ b/mobicomkitui/src/main/res/layout/quickconversion_activity.xml
@@ -1,36 +1,34 @@
 <?xml version="1.0" encoding="utf-8"?>
 <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
     android:layout_width="match_parent"
     android:layout_height="match_parent"
-    xmlns:app="http://schemas.android.com/apk/res-auto"
     android:orientation="vertical">
 
-   <android.support.v7.widget.Toolbar
+    <android.support.v7.widget.Toolbar
         android:id="@+id/my_toolbar"
         android:layout_width="match_parent"
         android:layout_height="?attr/actionBarSize"
         android:background="?attr/colorPrimary"
         android:elevation="4dp"
-        android:titleTextAppearance="@color/white"
-       android:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar"
-        app:popupTheme="@style/ThemeOverlay.AppCompat.Light" >
-       </android.support.v7.widget.Toolbar>
+        android:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar"
+        app:popupTheme="@style/ThemeOverlay.AppCompat.Light"
+        app:subtitleTextAppearance="@style/ToolbarSubtitle"
+        app:titleTextAppearance="@style/ToolbarTitle"></android.support.v7.widget.Toolbar>
 
-     <RelativeLayout
+    <RelativeLayout
         android:id="@+id/layout_child_activity"
-         android:background="@color/conversation_list_all_background"
         android:layout_width="fill_parent"
         android:layout_height="fill_parent"
-        android:layout_gravity="left|top" />
+        android:layout_gravity="start|top"
+        android:background="@color/conversation_list_all_background" />
 
     <LinearLayout
         android:id="@+id/footerAd"
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
+        android:layout_gravity="top"
         android:orientation="vertical"
-        android:visibility="gone"
-        android:layout_gravity="top">
-    </LinearLayout>
-
+        android:visibility="gone"></LinearLayout>
 
 </LinearLayout>
\ No newline at end of file
diff --git a/mobicomkitui/src/main/res/layout/reply_message_layout.xml b/mobicomkitui/src/main/res/layout/reply_message_layout.xml
new file mode 100644
index 00000000..202810e2
--- /dev/null
+++ b/mobicomkitui/src/main/res/layout/reply_message_layout.xml
@@ -0,0 +1,100 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/reply_message_layout"
+    android:layout_width="wrap_content"
+    android:layout_height="wrap_content"
+    android:orientation="vertical"
+    android:paddingLeft="5dp"
+    android:paddingRight="5dp"
+    android:visibility="gone">
+
+    <LinearLayout
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:baselineAligned="false"
+        android:orientation="horizontal"
+        android:weightSum="1">
+
+        <RelativeLayout
+            android:id="@+id/messageTextLayout"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_weight="0.2">
+
+            <TextView
+                android:id="@+id/replyNameTextView"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:layout_marginLeft="5dp"
+                android:textDirection="locale"
+                android:textAlignment="gravity"
+                android:layout_marginRight="5dp"
+                android:textStyle="bold" />
+
+            <LinearLayout
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_below="@+id/replyNameTextView"
+                android:baselineAligned="false">
+
+                <ImageView
+                    android:id="@+id/imageViewForAttachmentType"
+                    android:layout_width="25dp"
+                    android:layout_height="25dp"
+                    android:gravity="end"
+                    android:scaleType="centerCrop"
+                    android:src="@drawable/applozic_group_icon"
+                    android:visibility="gone" />
+
+                <TextView
+                    android:id="@+id/messageTextView"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:textDirection="locale"
+                    android:textAlignment="gravity"
+                    android:layout_gravity="center"
+                    android:layout_marginLeft="5dp"
+                    android:layout_marginRight="5dp"
+                    android:maxLines="3" />
+            </LinearLayout>
+
+        </RelativeLayout>
+
+        <RelativeLayout
+            android:id="@+id/imageViewRLayout"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:layout_gravity="center"
+            android:layout_weight="0.8"
+            android:visibility="gone">
+
+            <ImageView
+                android:id="@+id/imageViewForPhoto"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_centerInParent="true"
+                android:gravity="end"
+                android:scaleType="centerCrop"
+                android:visibility="gone" />
+        </RelativeLayout>
+
+    </LinearLayout>
+
+    <FrameLayout
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_alignParentRight="true"
+        android:layout_alignParentEnd="true"
+        android:layout_alignParentTop="true">
+
+        <ImageButton
+            android:id="@+id/imageCancel"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:background="@drawable/cancel_icon"
+            android:visibility="gone" />
+    </FrameLayout>
+
+</RelativeLayout>
+
+
diff --git a/mobicomkitui/src/main/res/layout/sliding_pane.xml b/mobicomkitui/src/main/res/layout/sliding_pane.xml
index 22bc607d..4a428d0b 100755
--- a/mobicomkitui/src/main/res/layout/sliding_pane.xml
+++ b/mobicomkitui/src/main/res/layout/sliding_pane.xml
@@ -32,6 +32,8 @@
         android:layout_height="match_parent"
         android:layout_weight="1"
         android:paddingLeft="16dp"
-        android:paddingRight="16dp" />
+        android:paddingStart="16dp"
+        android:paddingRight="16dp"
+        android:paddingEnd="16dp" />
 
 </android.support.v4.widget.SlidingPaneLayout>
\ No newline at end of file
diff --git a/mobicomkitui/src/main/res/layout/update_channel_name_layout.xml b/mobicomkitui/src/main/res/layout/update_channel_name_layout.xml
index 328484be..1eb1d9f9 100644
--- a/mobicomkitui/src/main/res/layout/update_channel_name_layout.xml
+++ b/mobicomkitui/src/main/res/layout/update_channel_name_layout.xml
@@ -1,9 +1,9 @@
 <?xml version="1.0" encoding="utf-8"?>
 <RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
     xmlns:app="http://schemas.android.com/apk/res-auto"
-    android:orientation="vertical"
     android:layout_width="match_parent"
-    android:layout_height="match_parent">
+    android:layout_height="match_parent"
+    android:orientation="vertical">
 
     <android.support.v7.widget.Toolbar
         android:id="@+id/my_toolbar"
@@ -11,70 +11,73 @@
         android:layout_height="?attr/actionBarSize"
         android:background="?attr/colorPrimary"
         android:elevation="4dp"
-        android:titleTextAppearance="@color/white"
         android:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar"
-        app:popupTheme="@style/ThemeOverlay.AppCompat.Light" />
+        app:popupTheme="@style/ThemeOverlay.AppCompat.Light"
+        app:subtitleTextAppearance="@style/ToolbarSubtitle"
+        app:titleTextAppearance="@style/ToolbarTitle" />
 
     <RelativeLayout
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
-        android:layout_marginTop="10dp"
-        >
+        android:layout_marginTop="10dp">
 
         <de.hdodenhof.circleimageview.CircleImageView
             android:id="@+id/applozic_group_profile"
             android:layout_width="150dp"
             android:layout_height="150dp"
-            android:src="@drawable/applozic_ic_contact_picture_180_holo_light"
             android:layout_alignParentTop="true"
             android:layout_centerHorizontal="true"
-            android:layout_marginTop="42dp" />
+            android:layout_marginTop="42dp"
+            android:src="@drawable/applozic_ic_contact_picture_180_holo_light" />
 
         <de.hdodenhof.circleimageview.CircleImageView
+            android:id="@+id/applozic_group_profile_camera"
             android:layout_width="60dp"
             android:layout_height="60dp"
-            android:clickable="true"
-            android:id="@+id/applozic_group_profile_camera"
-            android:background="@color/apploizc_transparent_color"
-            android:src="@drawable/applozic_ic_action_camera_new"
             android:layout_alignBottom="@+id/applozic_group_profile"
+            android:layout_alignEnd="@+id/applozic_group_profile"
             android:layout_alignRight="@+id/applozic_group_profile"
-            android:layout_alignEnd="@+id/applozic_group_profile" />
+            android:background="@color/apploizc_transparent_color"
+            android:clickable="true" />
     </RelativeLayout>
 
     <EditText
         android:id="@+id/newChannelName"
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
-        android:layout_gravity="center"
+        android:layout_above="@+id/linearLayout"
+        android:layout_centerHorizontal="true"
+        android:layout_marginBottom="156dp"
         android:layout_weight="8"
         android:hint="@string/new_channel_name_hint"
+        android:textAlignment="viewStart"
+        android:layout_gravity="start"
         android:inputType="textAutoCorrect"
         android:lines="1"
-        android:maxLength="255"
-        android:layout_above="@+id/linearLayout"
-        android:layout_centerHorizontal="true"
-        android:layout_marginBottom="156dp" />
+        android:maxLength="255" />
+
     <LinearLayout
+        android:id="@+id/linearLayout"
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
-        android:layout_gravity="center_horizontal"
         android:layout_alignParentBottom="true"
+        android:layout_gravity="center_horizontal"
         android:gravity="center"
-        android:orientation="horizontal"
-        android:id="@+id/linearLayout">
+        android:orientation="horizontal">
+
         <Button
-            android:layout_width="200dp"
             android:id="@+id/channelNameCancel"
-            android:background="@color/white"
+            android:layout_width="200dp"
             android:layout_height="wrap_content"
-            android:text="Cancel"/>
+            android:background="@color/white"
+            android:text="@string/cancel" />
+
         <Button
-            android:layout_width="200dp"
             android:id="@+id/channelNameOk"
-            android:background="@color/white"
+            android:layout_width="200dp"
             android:layout_height="wrap_content"
-            android:text="Ok" />
+            android:background="@color/white"
+            android:text="@string/ok_alert" />
 
     </LinearLayout>
 
@@ -82,9 +85,8 @@
         android:id="@+id/footerAd"
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
+        android:layout_gravity="top"
         android:orientation="vertical"
-        android:visibility="gone"
-        android:layout_gravity="top">
-    </LinearLayout>
+        android:visibility="gone"></LinearLayout>
 
 </RelativeLayout>
\ No newline at end of file
diff --git a/mobicomkitui/src/main/res/layout/user_profile_fragment_layout.xml b/mobicomkitui/src/main/res/layout/user_profile_fragment_layout.xml
index 6fd486d1..c1aef7de 100644
--- a/mobicomkitui/src/main/res/layout/user_profile_fragment_layout.xml
+++ b/mobicomkitui/src/main/res/layout/user_profile_fragment_layout.xml
@@ -17,6 +17,7 @@
         android:gravity="center"
         android:textColor="#ffffff"
         android:textSize="20sp"
+        android:layout_marginStart="8dp"
         android:visibility="gone" />
 
     <de.hdodenhof.circleimageview.CircleImageView
@@ -53,8 +54,11 @@
                     android:layout_height="wrap_content"
                     android:paddingBottom="5dp"
                     android:paddingLeft="20dp"
+                    android:paddingStart="20dp"
                     android:paddingTop="10dp"
-                    android:text="Name"
+                    android:textAlignment="gravity"
+                    android:textDirection="locale"
+                    android:text="@string/name"
                     android:textColor="@color/black"
                     android:textSize="18sp" />
 
@@ -63,7 +67,10 @@
                     android:layout_width="match_parent"
                     android:layout_height="wrap_content"
                     android:paddingBottom="10dp"
+                    android:textAlignment="gravity"
+                    android:textDirection="locale"
                     android:paddingLeft="20dp"
+                    android:paddingStart="20dp"
                     android:textColor="#7F000000"
                     android:textSize="14sp" />
             </LinearLayout>
@@ -91,8 +98,11 @@
                     android:layout_height="wrap_content"
                     android:paddingBottom="5dp"
                     android:paddingLeft="20dp"
+                    android:paddingStart="20dp"
+                    android:textAlignment="gravity"
+                    android:textDirection="locale"
                     android:paddingTop="10dp"
-                    android:text="Status"
+                    android:text="@string/status"
                     android:textColor="@color/black"
                     android:textSize="18sp" />
 
@@ -102,6 +112,9 @@
                     android:layout_height="wrap_content"
                     android:paddingBottom="10dp"
                     android:paddingLeft="20dp"
+                    android:textAlignment="gravity"
+                    android:textDirection="locale"
+                    android:paddingStart="20dp"
                     android:textColor="#7F000000"
                     android:textSize="14sp" />
             </LinearLayout>
@@ -127,8 +140,11 @@
                     android:layout_height="wrap_content"
                     android:paddingBottom="5dp"
                     android:paddingLeft="20dp"
+                    android:paddingStart="20dp"
+                    android:textAlignment="gravity"
+                    android:textDirection="locale"
                     android:paddingTop="10dp"
-                    android:text="Email"
+                    android:text="@string/email"
                     android:textColor="@color/black"
                     android:textSize="18sp" />
 
@@ -137,7 +153,10 @@
                     android:layout_width="match_parent"
                     android:layout_height="wrap_content"
                     android:paddingBottom="10dp"
+                    android:textAlignment="gravity"
+                    android:textDirection="locale"
                     android:paddingLeft="20dp"
+                    android:paddingStart="20dp"
                     android:textColor="#7F000000"
                     android:textSize="14sp" />
             </LinearLayout>
@@ -163,9 +182,12 @@
                     android:layout_width="match_parent"
                     android:layout_height="wrap_content"
                     android:paddingBottom="5dp"
+                    android:textAlignment="gravity"
+                    android:textDirection="locale"
                     android:paddingLeft="20dp"
+                    android:paddingStart="20dp"
                     android:paddingTop="10dp"
-                    android:text="Phone"
+                    android:text="@string/phone"
                     android:textColor="@color/black"
                     android:textSize="18sp" />
 
@@ -174,7 +196,10 @@
                     android:layout_width="match_parent"
                     android:layout_height="wrap_content"
                     android:paddingBottom="10dp"
+                    android:textAlignment="gravity"
+                    android:textDirection="locale"
                     android:paddingLeft="20dp"
+                    android:paddingStart="20dp"
                     android:textColor="#7F000000"
                     android:textSize="14sp" />
             </LinearLayout>
diff --git a/mobicomkitui/src/main/res/menu/attachment_menu.xml b/mobicomkitui/src/main/res/menu/attachment_menu.xml
index dd1ce84a..d92d9e82 100755
--- a/mobicomkitui/src/main/res/menu/attachment_menu.xml
+++ b/mobicomkitui/src/main/res/menu/attachment_menu.xml
@@ -6,22 +6,22 @@
 
     <item
         android:id="@+id/forward"
-        android:orderInCategory="1"
+        android:actionProviderClass="android.support.v7.widget.ShareActionProvider"
         android:icon="@drawable/applozic_ic_action_forward"
-        android:visible="false"
-        mobitexter:showAsAction="always"
+        android:orderInCategory="1"
         android:showAsAction="always"
-        android:actionProviderClass="android.support.v7.widget.ShareActionProvider"
-        android:title="@string/shareOptions" />
+        android:title="@string/shareOptions"
+        android:visible="false"
+        mobitexter:showAsAction="always" />
 
     <item
         android:id="@+id/shareOptions"
-        android:orderInCategory="2"
+        android:actionProviderClass="android.support.v7.widget.ShareActionProvider"
         android:icon="@drawable/mobicom_social_share"
-        mobitexter:showAsAction="always"
+        android:orderInCategory="2"
         android:showAsAction="always"
-        android:actionProviderClass="android.support.v7.widget.ShareActionProvider"
-        android:title="@string/shareOptions" />
+        android:title="@string/shareOptions"
+        mobitexter:showAsAction="always" />
 
 
 </menu>
\ No newline at end of file
diff --git a/mobicomkitui/src/main/res/menu/channel_menu_option.xml b/mobicomkitui/src/main/res/menu/channel_menu_option.xml
index 249db32e..466a6891 100644
--- a/mobicomkitui/src/main/res/menu/channel_menu_option.xml
+++ b/mobicomkitui/src/main/res/menu/channel_menu_option.xml
@@ -4,16 +4,16 @@
 
     <item
         android:id="@+id/edit_channel_name"
-        android:orderInCategory="1"
         android:icon="@drawable/applozic_ic_mode_edit_white"
+        android:orderInCategory="1"
         android:showAsAction="ifRoom"
-        android:title="Edit group name"
+        android:title="@string/edit_group_name"
         mobitexter:showAsAction="ifRoom" />
     <item
         android:id="@+id/add_member_to_channel"
+        android:icon="@drawable/applozic_ic_person_add_white"
         android:orderInCategory="2"
         android:showAsAction="ifRoom"
-        mobitexter:showAsAction="ifRoom"
-        android:icon="@drawable/applozic_ic_person_add_white"
-        android:title="Add member" />
-    </menu>
\ No newline at end of file
+        android:title="@string/add_member"
+        mobitexter:showAsAction="ifRoom" />
+</menu>
\ No newline at end of file
diff --git a/mobicomkitui/src/main/res/menu/group_create_menu.xml b/mobicomkitui/src/main/res/menu/group_create_menu.xml
index a953a2ec..f9c01bae 100755
--- a/mobicomkitui/src/main/res/menu/group_create_menu.xml
+++ b/mobicomkitui/src/main/res/menu/group_create_menu.xml
@@ -4,11 +4,25 @@
 
     <item
         android:id="@+id/Next"
-        android:title="Next"
+        android:title="@string/next"
+        android:orderInCategory="2"
         app:showAsAction="always|withText" />
 
     <item
         android:id="@+id/Done"
-        android:title="Done"
+        android:title="@string/done"
+        android:orderInCategory="2"
         app:showAsAction="always|withText" />
+
+    <item
+        android:id="@+id/menu_search"
+        android:actionViewClass="android.support.v7.widget.SearchView"
+        android:icon="@drawable/applozic_ic_action_search"
+        android:iconifiedByDefault="true"
+        android:showAsAction="always"
+        android:orderInCategory="1"
+        android:title="@string/menu_search"
+        app:actionViewClass="android.support.v7.widget.SearchView"
+        app:iconifiedByDefault="true"
+        app:showAsAction="always" />
 </menu>
\ No newline at end of file
diff --git a/mobicomkitui/src/main/res/menu/mobicom_basic_menu.xml b/mobicomkitui/src/main/res/menu/mobicom_basic_menu.xml
deleted file mode 100755
index 503d921d..00000000
--- a/mobicomkitui/src/main/res/menu/mobicom_basic_menu.xml
+++ /dev/null
@@ -1,63 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-
-<menu xmlns:android="http://schemas.android.com/apk/res/android"
-    xmlns:mobitexter="http://schemas.android.com/apk/res-auto">
-
- <item
-        android:id="@+id/conversations"
-        android:orderInCategory="1"
-        android:icon="@drawable/applozic_ic_action_chat"
-        mobitexter:showAsAction="ifRoom"
-        android:showAsAction="ifRoom"
-        android:title="Conversations" />
-
-    <item
-        android:id="@+id/start_new"
-        android:orderInCategory="2"
-        android:icon="@drawable/applozic_ic_action_add"
-        mobitexter:showAsAction="ifRoom|collapseActionView"
-        android:showAsAction="ifRoom|collapseActionView"
-        android:title="Start New" />
-
-    <item
-        android:id="@+id/dial"
-        android:orderInCategory="3"
-        android:icon="@drawable/applozic_ic_action_call"
-        mobitexter:showAsAction="ifRoom|collapseActionView"
-        android:showAsAction="ifRoom|collapseActionView"
-        android:title="Dial" />
-
-    <item
-        android:id="@+id/refresh"
-        android:orderInCategory="4"
-        android:icon="@drawable/applozic_ic_action_time"
-        mobitexter:showAsAction="collapseActionView"
-        android:showAsAction="collapseActionView"
-        android:title="Refresh" />
-
-    <item
-        android:id="@+id/deleteConversation"
-        android:orderInCategory="5"
-        android:icon="@drawable/applozic_ic_action_edit"
-        mobitexter:showAsAction="collapseActionView"
-        android:showAsAction="collapseActionView"
-        android:title="@string/delete_conversation" />
-
-    <item
-        android:id="@+id/support"
-        android:orderInCategory="8"
-        android:icon="@drawable/applozic_ic_action_help"
-        mobitexter:showAsAction="collapseActionView"
-        android:showAsAction="collapseActionView"
-        android:title="Support" />
-
-    <item
-        android:id="@+id/shareOptions"
-        android:orderInCategory="10"
-        android:icon="@drawable/mobicom_social_share"
-        mobitexter:showAsAction="collapseActionView"
-        android:showAsAction="collapseActionView"
-        android:actionProviderClass="android.support.v7.widget.ShareActionProvider"
-        android:title="@string/shareOptions" />
-
-</menu>
\ No newline at end of file
diff --git a/mobicomkitui/src/main/res/menu/mobicom_basic_menu_for_normal_message.xml b/mobicomkitui/src/main/res/menu/mobicom_basic_menu_for_normal_message.xml
index 85be10d3..3c8762d1 100755
--- a/mobicomkitui/src/main/res/menu/mobicom_basic_menu_for_normal_message.xml
+++ b/mobicomkitui/src/main/res/menu/mobicom_basic_menu_for_normal_message.xml
@@ -1,51 +1,65 @@
 <?xml version="1.0" encoding="utf-8"?>
 <menu xmlns:android="http://schemas.android.com/apk/res/android"
-    xmlns:mobitexter="http://schemas.android.com/apk/res-auto">
+    xmlns:mobicomkit="http://schemas.android.com/apk/res-auto">
+
+    <item
+        android:id="@+id/menu_search"
+        android:actionViewClass="android.support.v7.widget.SearchView"
+        android:icon="@drawable/applozic_ic_action_search"
+        android:iconifiedByDefault="true"
+        android:orderInCategory="1"
+        android:showAsAction="always"
+        android:title="@string/menu_search"
+        android:visible="false"
+        mobicomkit:actionViewClass="android.support.v7.widget.SearchView"
+        mobicomkit:iconifiedByDefault="true"
+        mobicomkit:showAsAction="always" />
 
 
     <item
         android:id="@+id/conversations"
         android:icon="@drawable/applozic_ic_action_chat"
-        android:orderInCategory="1"
+        android:orderInCategory="2"
         android:showAsAction="ifRoom"
+        android:title="@string/conversation"
         android:visible="false"
-        android:title="Conversations"
-        mobitexter:showAsAction="ifRoom" />
+        mobicomkit:showAsAction="ifRoom" />
+
     <item
         android:id="@+id/start_new"
         android:icon="@drawable/applozic_ic_action_add"
-        android:orderInCategory="2"
-        android:visible="false"
+        android:orderInCategory="3"
         android:showAsAction="ifRoom|collapseActionView"
-        android:title="Start New"
-        mobitexter:showAsAction="ifRoom|collapseActionView" />
+        android:title="@string/start_New"
+        android:visible="false"
+        mobicomkit:showAsAction="ifRoom|collapseActionView" />
 
     <item
         android:id="@+id/dial"
         android:icon="@drawable/applozic_ic_action_call"
-        android:orderInCategory="3"
-        android:visible="false"
+        android:orderInCategory="4"
         android:showAsAction="ifRoom|collapseActionView"
-        android:title="Dial"
-        mobitexter:showAsAction="ifRoom|collapseActionView" />
+        android:title="@string/dial"
+        android:visible="false"
+        mobicomkit:showAsAction="ifRoom|collapseActionView" />
 
     <item
         android:id="@+id/refresh"
         android:icon="@drawable/applozic_ic_action_time"
-        android:orderInCategory="4"
-        android:visible="false"
+        android:orderInCategory="5"
         android:showAsAction="collapseActionView"
-        android:title="Refresh"
-        mobitexter:showAsAction="collapseActionView" />
+        android:title="@string/refresh"
+        android:visible="false"
+        mobicomkit:showAsAction="collapseActionView" />
 
     <item
         android:id="@+id/deleteConversation"
         android:icon="@drawable/applozic_ic_action_edit"
-        android:orderInCategory="5"
-        android:visible="false"
+        android:orderInCategory="6"
         android:showAsAction="collapseActionView"
         android:title="@string/delete_conversation"
-        mobitexter:showAsAction="collapseActionView" />
+        android:visible="false"
+        mobicomkit:showAsAction="collapseActionView" />
 
     <item
         android:id="@+id/shareOptions"
@@ -55,29 +69,67 @@
         android:showAsAction="collapseActionView"
         android:title="@string/shareOptions"
         android:visible="false"
-        mobitexter:showAsAction="collapseActionView" />
+        mobicomkit:showAsAction="collapseActionView" />
+
+    <item
+        android:id="@+id/video_call"
+        android:icon="@drawable/ic_videocam_white_24px"
+        android:orderInCategory="3"
+        android:padding="8dp"
+        android:title="@string/video_string"
+        android:visible="false"
+        mobicomkit:showAsAction="ifRoom|collapseActionView" />
 
     <item
         android:id="@+id/userBlock"
+        android:orderInCategory="7"
         android:showAsAction="collapseActionView"
         android:title="@string/user_block"
-        android:orderInCategory="6"
         android:visible="false"
-        mobitexter:showAsAction="collapseActionView" />
+        mobicomkit:showAsAction="collapseActionView" />
     <item
         android:id="@+id/userUnBlock"
+        android:orderInCategory="7"
         android:showAsAction="collapseActionView"
         android:title="@string/user_un_block"
         android:visible="false"
-        android:orderInCategory="6"
-        mobitexter:showAsAction="collapseActionView" />
+        mobicomkit:showAsAction="collapseActionView" />
     <item
         android:id="@+id/applozicUserProfile"
         android:orderInCategory="2"
+        android:showAsAction="collapseActionView"
         android:title="@string/applozic_my_profile_option_info"
         android:visible="false"
-        mobitexter:showAsAction="collapseActionView"
-        android:showAsAction="collapseActionView"/>
+        mobicomkit:showAsAction="collapseActionView" />
 
+    <item
+        android:id="@+id/broadcast"
+        android:orderInCategory="8"
+        android:showAsAction="ifRoom"
+        android:title="@string/new_broadcast_name_info"
+        android:visible="false"
+        mobicomkit:showAsAction="collapseActionView" />
 
+    <item
+        android:id="@+id/muteGroup"
+        android:orderInCategory="9"
+        android:showAsAction="collapseActionView"
+        android:title="@string/mute_Group"
+        android:visible="false"
+        mobicomkit:showAsAction="collapseActionView" />
+    <item
+        android:id="@+id/unmuteGroup"
+        android:orderInCategory="9"
+        android:showAsAction="collapseActionView"
+        android:title="@string/unmute_Group"
+        android:visible="false"
+        mobicomkit:showAsAction="collapseActionView" />
+
+    <item
+        android:id="@+id/logout"
+        android:icon="@drawable/applozic_ic_action_time"
+        android:orderInCategory="11"
+        android:showAsAction="collapseActionView"
+        android:title="@string/logout"
+        android:visible="false" />
 </menu>
\ No newline at end of file
diff --git a/mobicomkitui/src/main/res/menu/mobicom_main_menu.xml b/mobicomkitui/src/main/res/menu/mobicom_main_menu.xml
index fceff363..38bd77fa 100755
--- a/mobicomkitui/src/main/res/menu/mobicom_main_menu.xml
+++ b/mobicomkitui/src/main/res/menu/mobicom_main_menu.xml
@@ -3,120 +3,120 @@
 <menu xmlns:android="http://schemas.android.com/apk/res/android"
     xmlns:mobitexter="http://schemas.android.com/apk/res-auto">
 
-   <!-- <item
-        android:id="@+id/conversations"
-        android:orderInCategory="1"
-        android:icon="@drawable/applozic_ic_action_chat"
-        mobitexter:showAsAction="ifRoom"
-        android:showAsAction="ifRoom"
-        android:title="Conversations" />
-
-    <item
-        android:id="@+id/start_new"
-        android:orderInCategory="2"
-        android:icon="@drawable/applozic_ic_action_add"
-        mobitexter:showAsAction="ifRoom|collapseActionView"
-        android:showAsAction="ifRoom|collapseActionView"
-        android:title="Start New" />
-
-    <item
-        android:id="@+id/dial"
-        android:orderInCategory="3"
-        android:icon="@drawable/applozic_ic_action_call"
-        mobitexter:showAsAction="ifRoom|collapseActionView"
-        android:showAsAction="ifRoom|collapseActionView"
-        android:title="Dial" />
-
-    <item
-        android:id="@+id/refresh"
-        android:orderInCategory="4"
-        android:icon="@drawable/applozic_ic_action_time"
-        mobitexter:showAsAction="collapseActionView"
-        android:showAsAction="collapseActionView"
-        android:title="Refresh" />
-
-    <item
-        android:id="@+id/schedule"
-        android:orderInCategory="4"
-        android:icon="@drawable/applozic_ic_action_time"
-        mobitexter:showAsAction="collapseActionView"
-        android:showAsAction="collapseActionView"
-        android:title="Scheduled" />
-
-    <item
-        android:id="@+id/deleteConversation"
-        android:orderInCategory="5"
-        android:icon="@drawable/applozic_ic_action_edit"
-        mobitexter:showAsAction="collapseActionView"
-        android:showAsAction="collapseActionView"
-        android:title="@string/delete_conversation" />
-
-
-    <item
-        android:id="@+id/settings"
-        android:orderInCategory="6"
-        android:icon="@drawable/applozic_ic_action_settings"
-        mobitexter:showAsAction="collapseActionView"
-        android:showAsAction="collapseActionView"
-        android:title="Settings" />
-
-    &lt;!&ndash;
-    <item
-            android:id="@+id/verifyNumber"
-            android:orderInCategory="6"
-            android:icon="@drawable/applozic_ic_action_about"
-            mobitexter:showAsAction="collapseActionView"
-            android:showAsAction="collapseActionView"
-            android:title="Verify Phone #"/>
-            &ndash;&gt;
-
-    <item
-        android:id="@+id/help"
-        android:orderInCategory="7"
-        android:icon="@drawable/applozic_ic_action_help"
-        mobitexter:showAsAction="collapseActionView"
-        android:showAsAction="collapseActionView"
-        android:title="FAQ" />
-
-    &lt;!&ndash;
-    <item
-            android:id="@+id/start_tour"
-            android:orderInCategory="101"
-            android:icon="@drawable/abc_ic_go"
-            mobitexter:showAsAction="collapseActionView"
-            android:showAsAction="collapseActionView"
-            android:title="Start Tour"/> &ndash;&gt;
-
-    <item
-        android:id="@+id/support"
-        android:orderInCategory="8"
-        android:icon="@drawable/applozic_ic_action_help"
-        mobitexter:showAsAction="collapseActionView"
-        android:showAsAction="collapseActionView"
-        android:title="Support" />
-
-
-    <item
-        android:id="@+id/about"
-        android:orderInCategory="9"
-        android:icon="@drawable/applozic_ic_action_about"
-        mobitexter:showAsAction="collapseActionView"
-        android:showAsAction="collapseActionView"
-        android:title="About" />
-
-
-    <item
-        android:id="@+id/shareOptions"
-        android:orderInCategory="10"
-        android:icon="@drawable/mobicom_social_share"
-        mobitexter:showAsAction="collapseActionView"
-        android:showAsAction="collapseActionView"
-        android:actionProviderClass="android.support.v7.widget.ShareActionProvider"
-        android:title="@string/shareOptions" />
-
-
-        <item
-                android:id="@+id/markAllSmsAsRead"
-                android:orderInCategory="100"
-                android:title="@string/markAllAsRead"/>-->
+    <!-- <item
+         android:id="@+id/conversations"
+         android:orderInCategory="1"
+         android:icon="@drawable/applozic_ic_action_chat"
+         mobitexter:showAsAction="ifRoom"
+         android:showAsAction="ifRoom"
+         android:title="Conversations" />
+
+     <item
+         android:id="@+id/start_new"
+         android:orderInCategory="2"
+         android:icon="@drawable/applozic_ic_action_add"
+         mobitexter:showAsAction="ifRoom|collapseActionView"
+         android:showAsAction="ifRoom|collapseActionView"
+         android:title="Start New" />
+
+     <item
+         android:id="@+id/dial"
+         android:orderInCategory="3"
+         android:icon="@drawable/applozic_ic_action_call"
+         mobitexter:showAsAction="ifRoom|collapseActionView"
+         android:showAsAction="ifRoom|collapseActionView"
+         android:title="Dial" />
+
+     <item
+         android:id="@+id/refresh"
+         android:orderInCategory="4"
+         android:icon="@drawable/applozic_ic_action_time"
+         mobitexter:showAsAction="collapseActionView"
+         android:showAsAction="collapseActionView"
+         android:title="Refresh" />
+
+     <item
+         android:id="@+id/schedule"
+         android:orderInCategory="4"
+         android:icon="@drawable/applozic_ic_action_time"
+         mobitexter:showAsAction="collapseActionView"
+         android:showAsAction="collapseActionView"
+         android:title="Scheduled" />
+
+     <item
+         android:id="@+id/deleteConversation"
+         android:orderInCategory="5"
+         android:icon="@drawable/applozic_ic_action_edit"
+         mobitexter:showAsAction="collapseActionView"
+         android:showAsAction="collapseActionView"
+         android:title="@string/delete_conversation" />
+
+
+     <item
+         android:id="@+id/settings"
+         android:orderInCategory="6"
+         android:icon="@drawable/applozic_ic_action_settings"
+         mobitexter:showAsAction="collapseActionView"
+         android:showAsAction="collapseActionView"
+         android:title="Settings" />
+
+     &lt;!&ndash;
+     <item
+             android:id="@+id/verifyNumber"
+             android:orderInCategory="6"
+             android:icon="@drawable/applozic_ic_action_about"
+             mobitexter:showAsAction="collapseActionView"
+             android:showAsAction="collapseActionView"
+             android:title="Verify Phone #"/>
+             &ndash;&gt;
+
+     <item
+         android:id="@+id/help"
+         android:orderInCategory="7"
+         android:icon="@drawable/applozic_ic_action_help"
+         mobitexter:showAsAction="collapseActionView"
+         android:showAsAction="collapseActionView"
+         android:title="FAQ" />
+
+     &lt;!&ndash;
+     <item
+             android:id="@+id/start_tour"
+             android:orderInCategory="101"
+             android:icon="@drawable/abc_ic_go"
+             mobitexter:showAsAction="collapseActionView"
+             android:showAsAction="collapseActionView"
+             android:title="Start Tour"/> &ndash;&gt;
+
+     <item
+         android:id="@+id/support"
+         android:orderInCategory="8"
+         android:icon="@drawable/applozic_ic_action_help"
+         mobitexter:showAsAction="collapseActionView"
+         android:showAsAction="collapseActionView"
+         android:title="Support" />
+
+
+     <item
+         android:id="@+id/about"
+         android:orderInCategory="9"
+         android:icon="@drawable/applozic_ic_action_about"
+         mobitexter:showAsAction="collapseActionView"
+         android:showAsAction="collapseActionView"
+         android:title="About" />
+
+
+     <item
+         android:id="@+id/shareOptions"
+         android:orderInCategory="10"
+         android:icon="@drawable/mobicom_social_share"
+         mobitexter:showAsAction="collapseActionView"
+         android:showAsAction="collapseActionView"
+         android:actionProviderClass="android.support.v7.widget.ShareActionProvider"
+         android:title="@string/shareOptions" />
+
+
+         <item
+                 android:id="@+id/markAllSmsAsRead"
+                 android:orderInCategory="100"
+                 android:title="@string/markAllAsRead"/>-->
 </menu>
\ No newline at end of file
diff --git a/mobicomkitui/src/main/res/values-hi/String.xml b/mobicomkitui/src/main/res/values-hi/String.xml
new file mode 100644
index 00000000..3b9a08b4
--- /dev/null
+++ b/mobicomkitui/src/main/res/values-hi/String.xml
@@ -0,0 +1,403 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources  xmlns:tools="http://schemas.android.com/tools"
+    tools:ignore="MissingTranslation">
+    <string name="internet_connection_not_available">कोई इंटरनेट कनेक्शन नहीं</string>
+    <string name="you_need_network_access_for_delete">वार्तालाप हटाने के लिए आपको नेटवर्क एक्सेस की आवश्यकता है </string>
+    <string name="applozic_server_error">ऊप्स! आपको एक त्रुटि मिली, बाद में फिर से प्रयास करें</string>
+    <string name="you_need_network_access_for_block_or_unblock">ब्लॉक / अनब्लॉक उपयोगकर्ता के लिए आपको नेटवर्क एक्सेस की आवश्यकता है</string>
+    <string name="internet_connection_for_group_name_info">समूह नाम बदलने के लिए आपके फ़ोन को इंटरनेट कनेक्शन की आवश्यकता है</string>
+    <string name="you_dont_have_any_network_access_info">आपके पास अभी तक कोई नेटवर्क पहुंच नहीं है</string>
+    <string name="failed_to_leave_group">समूह को छोड़ने में विफल रहा</string>
+    <string name="user_is_already_exists">उपयोगकर्ता पहले से ही समूह में मौजूद है</string>
+    <string name="delete_conversation_failed">हटाएं विफल</string>
+    <string name="menu_search">खोज</string>
+    <string name="menu_add_contact">एक नया संपर्क बनाएं</string>
+    <string name="no_contacts">कोई संपर्क नहीं मिला</string>
+    <string name="search_hint">खोज...</string>
+    <string name="phone_number_not_present">फोन नंबर मौजूद नहीं है</string>
+    <string name="zero_friends_on_phone">फोन संपर्कों पर कोई मिलान संपर्क नहीं मिला लेकिन आप अभी भी ईमेल, यूजर आईडी या फोन नंबर दर्ज करके संदेश भेज सकते हैं</string>
+    <string name="delete_thread_text">हटाया जा रहा है ....</string>
+    <string name="search_title">खोज</string>
+    <string name ="applozic_user_already_in_a_group">समूह प्रकार में पहले से ही जोड़ा गया है</string>
+    <string name ="applozic_contacts_loading_info">लोड हो रहा है, कृपया प्रतीक्षा करें...</string>
+    <string name ="applozic_contacts_loading_error">संपर्कों को लोड करने के लिए आपको नेटवर्क एक्सेस की आवश्यकता है</string>
+    <string name="alphabet">ABCDEFGHIJKLMNOPQRSTUVWXYZ</string>
+    <string name="contact_permission">संपर्क की अनुमति के उपयोग के लिए आवश्यक हैं</string>
+    <string name="storage_permission">उपयोग करने के लिए संग्रहण अनुमति आवश्यक है</string>
+    <string name="location_permission">उपयोग करने के लिए स्थान अनुमति आवश्यक है</string>
+    <string name="phone_call_permission">प्रवेश करने के लिए फोन कॉल की अनुमति आवश्यक है</string>
+    <string name="phone_camera_permission">एक्सेस करने के लिए कैमरा अनुमति आवश्यक है</string>
+    <string name="record_audio">ऑडियो रिकॉर्डिंग अनुमति की आवश्यकता है</string>
+    <string name="contact_permission_not_granted">संपर्क के लिए अनुमति नहीं दी गई थी</string>
+    <string name="storage_permission_not_granted">संग्रहण के लिए अनुमतियाँ नहीं दी गईं</string>
+    <string name="location_permission_not_granted">स्थान के लिए अनुमतियाँ नहीं दी गईं</string>
+    <string name="phone_state_permission_not_granted">फ़ोन स्टेट के लिए अनुमतियां प्रदान नहीं की गईं</string>
+    <string name="phone_call_permission_not_granted">फोन कॉल के लिए अनुमति नहीं दी गई थी</string>
+    <string name="phone_camera_permission_not_granted">कैमरे के लिए अनुमति नहीं दी गई थी</string>
+    <string name="record_audio_permission_not_granted">ऑडियो रिकॉर्डिंग के लिए अनुमतियां प्रदान नहीं की गईं</string>
+    <string name="contact_permission_granted">संपर्क अनुमति दी गई है</string>
+    <string name="storage_permission_granted">संग्रहण अनुमतियां दी गई हैं</string>
+    <string name="location_permission_granted">स्थान अनुमतियां दी गई हैं</string>
+    <string name="phone_state_permission_granted">फोन स्थिति अनुमति दी गई है</string>
+    <string name="phone_call_permission_granted">फोन कॉल की अनुमति दी गई है</string>
+    <string name="phone_camera_permission_granted">कैमरा अनुमति दी गई है</string>
+    <string name="record_audio_permission_granted">ऑडियो रिकार्ड अनुमति दी गई है</string>
+    <string name="mobicom_max_attachment_warning">अधिकतम लगाव सीमा तक पहुंची</string>
+    <string name="mobicom_select_attachment_text">कम से कम एक अटैचमेंट चुनें</string>
+    <string name="audio_recording_send_text">ऑडियो रिकॉर्ड करने के लिए प्रारंभ पर टैप करें</string>
+    <string name="applozic_audio_permission_missing">ऑडियो रिकॉर्डर लॉन्च करने में असमर्थ</string>
+    <string name="applozic_message_info">संदेश जानकारी</string>
+    <string name="applozic_message_info_no_network">संदेश जानकारी लाने में सक्षम नहीं</string>
+    <string name="applozic_user_profile_heading">प्रोफाइल</string>
+    <string name="send_message_to">भेजना..</string>
+    <string name="info_attachment_max_allowed_file_size_exceeded">अधिकतम अपलोड फ़ाइल आकार सीमा नहीं पार कर सकते हैं</string>
+    <string name="please_wait_creating_group_of_two">कृपया प्रतीक्षा करें...</string>
+    <string name="sort_contacts_by_lastSeenAt">पिछले द्वारा देखा द्वारा क्रमबद्ध</string>
+    <string name="sort_contacts_by_recent_chats">हाल ही की चैट के आधार पर क्रमबद्ध करें</string>
+    <string name="app_name">Applozic</string>
+    <string name="conversations">बातचीत</string>
+    <string name="channel_create_title">नया समूह</string>
+    <string name="channel_members_title">सदस्य जोड़ें</string>
+    <string name="select_at_least">कम से कम एक संपर्क का चयन होना चाहिए</string>
+    <string name="group_name_hint">समूह का नाम</string>
+    <string name="empty_conversations">कोई वार्तालाप नहीं!!!</string>
+    <string name="enter_message_hint">एक सन्देश लिखिए...</string>
+    <string name="send_text">भेजें</string>
+    <string name="cancel_text">रद्द करना</string>
+    <string name="start_text">प्रारंभ</string>
+    <string name="no_conversation">आपके पास कोई बातचीत नहीं है</string>
+    <string name="search_not_found_for_messages">कोई बातचीत नहीं मिली</string>
+    <string name="info_broadcast_message">कोई भी संदेश नहीं मिलेगा प्रत्येक प्राप्तकर्ता को अलग-अलग पाया जाएगा</string>
+    <string name="shareOptions">शेयर</string>
+    <string name="email">ईमेल आईडी मान</string>
+    <string name="info_sample_contact_list">नमूना के रूप में डिवाइस संपर्क दिखाते हुए यहां अपने ऐप संपर्कों को पॉप्युलेट करें</string>
+    <string name="info_message_sync">सर्वर के साथ संदेश सिंक करना, इसमें कुछ मिनट लग सकते हैं!</string>
+    <string name="instruction_open_conversation_thread">पूरी तरह से देखने के लिए किसी भी बातचीत पर टैप करें</string>
+    <string name="instruction_go_back_to_recent_conversation_list">पिछली स्क्रीन पर वापस जाने के लिए, बाएं से दाएं स्लाइड करें</string>
+    <string name="action_settings">सेटिंग्स</string>
+    <string name="user_block">ब्लॉक</string>
+    <string name="user_un_block">अनब्लॉक</string>
+    <string name="applozic_my_profile_option_info">प्रोफाइल</string>
+    <string name="location_services_disabled_message">स्थान भेजने के लिए आपके स्थान तक पहुंच की आवश्यकता है। स्थान पहुंच चालू करें</string>
+    <string name="location_services_disabled_title">स्थान सेवाएं अक्षम</string>
+    <string name="location_service_settings">सेटिंग्स</string>
+    <string name="location_sending_cancelled">स्थान भेजना रद्द</string>
+    <string name="unable_to_fetch_location">स्थान प्राप्त करने में असमर्थ</string>
+    <string name="waiting_for_current_location">वर्तमान स्थान की प्रतीक्षा कर रहा है</string>
+    <string name="select_file">किसी फाइल का चयन करें</string>
+    <string name="attachment_retry">पुन: प्रयास करें</string>
+    <string name="delete_conversation">मिटाना</string>
+    <string name="info_app_not_found_to_open_file">इस फ़ाइल को खोलने के लिए कोई एप्लिकेशन नहीं मिला</string>
+    <string name="unable_to_play_requested_audio_file">इस फ़ाइल को खोलने के लिए कोई एप्लिकेशन नहीं मिला</string>
+    <string name="file_not_selected">क्या आप फ़ाइल का चयन करना भूल गए?</string>
+    <string name="info_attachment_max_allowed_file_size">अधिकतम अपलोड फ़ाइल आकार की सीमा 10 Mb से अधिक नहीं हो सकती</string>
+    <string name="info_file_attachment_error">नहीं भेज सकते हैं! फ़ाइल पढ़ने के दौरान कुछ अनपेक्षित त्रुटि हुई</string>
+    <string name="select_file_count_limit">एक से अधिक फाइल का चयन नहीं कर सकता</string>
+    <string name="ScheduleText">अनुसूची</string>
+    <string name="enter_mt_message_hint">एक सन्देश लिखिए..</string>
+    <string name="messageOptions">संदेश विकल्प</string>
+    <string name="conversation">बातचीत</string>
+    <string name="conversation_options">विकल्प</string>
+    <string name="info_message_scheduled">संदेश सफलतापूर्वक शेड्यूल किया गया है</string>
+    <string name="sync_older_messages">क्या आप पुराने संदेशों को समन्वयित करना चाहते हैं?</string>
+    <string name="dialog_delete_conversation_title">बातचीत मिटा दो</string>
+    <string name="dialog_delete_conversation_confir">नाम के सभी संदेश हटाएं?</string>
+    <string name="negetiveButtonText">साफ़</string>
+    <string name="scheduleDialogHeader">अनुसूची संदेश</string>
+    <string name="scheduledDateText">निर्धारित तिथि :</string>
+    <string name="scheduledTimeText">निर्धारित समय</string>
+    <string name="defaultDate">dd-mm-yyyy</string>
+    <string name="defaultTime">HH:MM:SS</string>
+    <string name="selectionRequestText">अपना संदेश शेड्यूल करने के लिए दिनांक और समय चुनें।</string>
+    <string name="wearable_action_title">जवाब दें</string>
+    <string name="wearable_action_label"> को जवाब दें</string>
+
+    <string name ="you_string">आप</string>
+    <string name="applozic_account_closed">अपने ऐप में चैट को सक्रिय करने के लिए कृपया एप्लीकोज से संपर्क करें</string>
+    <string name="applozic_free_version_not_allowed_on_release_build">अपने ऐप में चैट को सक्रिय करने के लिए कृपया एप्लीकोज से संपर्क करें</string>
+    <string name ="ok_alert">ठीक</string>
+    <string name ="subtitle_last_seen_at_time">अंतिम बार देखा गया</string>
+    <string name="is_typing">टाइप कर रहा है...</string>
+    <string name="user_online">ऑनलाइन</string>
+    <string name="removing_channel_user">निकाला जा रहा है</string>
+    <string name="adding_channel_user">जोड़ा जा रहा है ....</string>
+    <string name="deleting_channel_user">हटा रहा है ...</string>
+    <string name="channel_member_exit">बाहर निकल रहा है ....</string>
+    <string name="channel_update">समूह जानकारी अपडेट कर रहा है ....</string>
+    <string name="dialog_remove_group_user">[समूह] से [नाम] निकालें?</string>
+    <string name="dialog_add_group_user">[नाम] को [समूह] में जोड़ें?</string>
+    <string name="group_name_info">[समूह]</string>
+    <string name="groupType_info">[समूह प्रकार]</string>
+    <string name="group_string">समूह</string>
+    <string name="broadcast_string">प्रसारण</string>
+    <string name="new_broadcast_name_info">नया प्रसारण</string>
+    <string name="mute_Group">म्यूट </string>
+    <string name="unmute_Group">अनम्यूट</string>
+    <string name="user_name_info">[नाम]</string>
+    <string name="channel_member_title">संपर्क का चयन करें</string>
+    <string name="channel_delete_group_button">समूह हटाएं</string>
+    <string name="broadcast_exit_button">ब्रॉडकास्ट से बाहर निकलें</string>
+    <string name="broadcast_delete_button">प्रसारण हटायें</string>
+    <string name="channel_created_by">द्वारा बनाया गया</string>
+    <string name="remove_member">हटाना</string>
+    <string name="add">जोड़ना</string>
+    <string name="group_creating_info">समूह बनाना कृपया प्रतीक्षा करें</string>
+    <string name="broadcast_creating_info">प्रसारण बनाना कृपया प्रतीक्षा करें</string>
+    <string name="channel_exit">बाहर जाएं</string>
+    <string name="channel_deleting">हटाना</string>
+    <string name="leave_channel">क्या आप वाकई इस [समूह प्रकार] से बाहर निकलना चाहते हैं?</string>
+    <string name="exit_channel_message_info">क्या आप वाकई [समूह] [समूह प्रकार] से बाहर निकलना चाहते हैं?</string>
+    <string name="delete_channel_messages_and_channel_info">क्या आप वाकई [समूह] [समूह प्रकार] को हटाना चाहते हैं?</string>
+    <string name="channel_name_empty">समूह का नाम रिक्त नहीं हो सकता</string>
+    <string name="channel_add_alert">समूह में प्रतिभागी को जोड़ने में असमर्थ क्योंकि आप प्रतिभागी नहीं हैं</string>
+    <string name="channel_edit_alert">समूह का नाम बदलने में असमर्थ क्योंकि आप प्रतिभागी नहीं हैं</string>
+    <string name="admin_text">समूह प्रशासन</string>
+    <string name="user_not_in_this_group_text">आप अब इस समूह के प्रतिभागी नहीं हैं</string>
+    <string name="update_channel_title_name">समूह नाम दर्ज करें</string>
+    <string name="new_channel_name_hint">समूह का नाम..</string>
+    <string name="user_block_info">ब्लॉक [नाम]? अवरुद्ध उपयोगकर्ता अब आपको संदेश भेजने में सक्षम नहीं होगा</string>
+    <string name="user_un_block_info">एक संदेश भेजने के लिए [नाम] को अनवरोधित करें</string>
+    <string name="please_wait_info">एक क्षण प्रतीक्षा करें...</string>
+    <string name="applozic_userId_error_info_in_logs">कृपया आईडी रिक्त नहीं हो सकती और चैनल कुंजी को रिक्त नहीं होना चाहिए</string>
+    <string name="applozic_add_user_to_multiple_channel_error_info_in_logs">यूज़र आईडी रिक्त या रिक्त नहीं हो सकती और चैनल की सूची रिक्त नहीं होनी चाहिए</string>
+    <string name="unable_share_message">साझा करने में असमर्थ आप इस समूह के प्रतिभागी नहीं हैं</string>
+    <string name="user_is_blocked">भेजने में असमर्थ, उपयोगकर्ता ब्लॉक है</string>
+    <string name="when_on_wifi">जब वाईफाई चालू है</string>
+    <string name="when_on_cellular_network">जब सेलुलर नेटवर्क चालू है</string>
+    <string name="media_auto_download">मीडिया ऑटो डाउनलोड</string>
+    <string name="applozic_network_usage">नेटवर्क उपयोग</string>
+    <string name="enable_vibration_notification">सूचना पर कंपन सक्षम करें</string>
+    <string name="group_members_limit_exceeds">सीमा तक पहुंचे, किसी व्यक्ति को पहले समूह से निकालें</string>
+    <string name="user_has_been_deleted_text">भेजने हटा दिया गया है</string>
+    <string name="make_admin_text_info">समूह व्यवस्थापक बनाना</string>
+    <string name="attachment_string">अनुलग्नक </string>
+    <string name="photo_string">फ़ोटो</string>
+    <string name="contact_string">संपर्क </string>
+    <string name="video_string">वीडियो</string>
+    <string name="audio_string">ऑडियो</string>
+    <string name="al_location_string">स्थान</string>
+    <string name="user_logout_info">लॉगआउट सफल</string>
+    <string name="participants">प्रतिभागियों</string>
+    <string name="channel_exit_button">ग्रुप से बाहर निकलें</string>
+    <string name="chats">चैट</string>
+    <string name="refresh">रीफ्रेश</string>
+    <string name="start_New">नया शुरू करें</string>
+    <string name="dial">डायल</string>
+    <string name="logout">लोग आउट</string>
+    <string name="next">बाद</string>
+    <string name="done">समाप्त</string>
+    <string name="gallery">गेलरी</string>
+    <string name="Contact">संपर्क </string>
+    <string name="Group">समूह</string>
+    <string name="today">आज</string>
+    <string name="status">स्थिति</string>
+    <string name="name">नाम</string>
+    <string name="phone">फ़ोन</string>
+    <string name="copy">कॉपी</string>
+    <string name="forward">आगे</string>
+    <string name="resend">पुन: भेजें</string>
+    <string name="delete">मिटाना</string>
+    <string name="info">जानकारी</string>
+    <string name="share">शेयर</string>
+    <string name="reply">जवाब दें</string>
+    <string name="self_destruct">आत्म विनाश</string>
+    <string name="off">ऑफ </string>
+    <string name="one_min">1 मिनट</string>
+    <string name="two_min">2 मिनट</string>
+    <string name="five_min">5 मिनट</string>
+    <string name="ten_min">10 मिनट</string>
+    <string name="sms">एसएमएस</string>
+    <string name="mt">मीट्रिक टन</string>
+    <string name="Delete_conversation">चैट हटाएं</string>
+    <string name="delete_group">समूह हटाएं</string>
+    <string name="exit_group">समूह से बाहर निकलें</string>
+    <string name="message">संदेश </string>
+    <string name="remove">हटाना</string>
+    <string name="make_group_admin">समूह व्यवस्थापक को बनाएं</string>
+    <string name="take_photo">फोटो लो</string>
+    <string name="attach_file">फ़ाइल जोड़ें</string>
+    <string name="audio_message">ऑडियो संदेश</string>
+    <string name="video_message">वीडियो संदेश</string>
+    <string name="share_contact">संपर्क साझा करें</string>
+    <string name="location">:स्थान</string>
+    <string name="file">:फ़ाइल</string>
+    <string name="audio">:ऑडियो</string>
+    <string name="video">:वीडियो</string>
+    <string name="camera">:कैमरा</string>
+    <string name="contact">:संपर्क</string>
+    <string name="current_location">वर्तमान स्थान</string>
+    <string name="Add_caption">शीर्षक दें...</string>
+    <string name="New_Attachment">नई अनुलग्नक</string>
+    <string name="send_location">स्थान भेजें</string>
+    <string name="send_your_current_location">अपना वर्तमान स्थान भेजें</string>
+    <string name="stop">स्टाँप</string>
+    <string name="profile_status">प्रोफ़ाइल स्थिति</string>
+    <string name="no_status">स्टेटस</string>
+    <string name="online">ऑनलाइन</string>
+    <string name="notifications">सूचनाएं</string>
+    <string name="sales_manager">सेल्स प्रबंधक</string>
+    <string name="display_name">प्रदर्शित होने वाला नाम</string>
+    <string name="kb45">45 केबी</string>
+    <string name="message_text">संदेश  टेक्स्ट</string>
+    <string name="read">रीड</string>
+    <string name="delivered">पहुंचा दिया</string>
+    <string name="remove_image">छवि निकालें</string>
+    <string name="file_name_will_come_here_for_attachment">फ़ाइल नाम अटैचमेंट के लिए यहां आएगा</string>
+    <string name="mb_10">10 एमबी</string>
+    <string name="mobile_number">मोबाइल नंबर</string>
+    <string name="schedule">शिड्यूल</string>
+    <string name="delivery_status">वितरण की स्थिति</string>
+    <string name="testTime">टेस्ट समय</string>
+    <string name="created_at_time">समय पर बनाया गया</string>
+    <string name="edit_group_name">समूह का नाम संपादित करें</string>
+    <string name="add_member">सदस्य जोड़ें</string>
+    <string name="push_notifications">सूचनाएं भेजना</string>
+    <string name="group_not_exist">समूह मौजूद नहीं है</string>
+    <string name="Add_Contacts">संपर्क जोड़ें</string>
+    <string name="no_groups">कोई समूह नहीं</string>
+    <string name="search_match_other">अन्य फ़ील्ड से मेल खाता है</string>
+    <string name="invite">अपने दोस्तों को आमंत्रित करें</string>
+    <string name="contacts_not_found">कोई संपर्क नहीं मिला</string>
+    <string name="Location">स्थान</string>
+    <string name="applozic_failed_to_load_contact">संपर्क लोड करने में विफल</string>
+    <string name="applozic_Cropping_failed">क्रॉपिंग असफल</string>
+    <string name="applozic_resending_attachment">एटचमेंट पुनः भेजें....</string>
+    <string name="processing_please_wait">प्रसंस्करण किया जा रहा है .. कृपया प्रतीक्षा करें</string>
+    <string name="success">सफलता</string>
+    <string name="error">एरर</string>
+    <string name="camera_option">कैमरा</string>
+    <string name="attach_price">Attach price</string>
+    <string name="mute_group_for">समय के लिए म्यूट समूह ..</string>
+    <string name="eight_Hours">आठ घंटे</string>
+    <string name="one_week"> एक हफ्ता</string>
+    <string name="one_year"> एक साल</string>
+    <string name="file_does_not_exist">दस्तावेज मौजूद नहीं है</string>
+    <string name="copied_message">कॉपी किए गए संदेश</string>
+    <string name="cancel">रद्द करना</string>
+    <string name="data_usage">डेटा का उपयोग</string>
+    <string name="missed">मिस्ड </string>>
+    <string name="hold_to_record_release_to_send">रिकॉर्ड करने के लिए पकड़ो, भेजने के लिए जारी</string>
+    <string name="slide_to_cancel">रद्द करने के लिए स्लाइड करें</string>
+    <string name="tap_on_mic_button_to_record_audio">ऑडियो रिकॉर्डिंग प्रारंभ करने के लिए माइक बटन पर टैप करें</string>
+    <string name="profile_contact">No Contact number</string>
+    <string name="profile_contact_number">Contact Number</string>
+    <string name="user_name">User Name</string>
+
+
+    <string-array name="secret_message_timer_array">
+        <item>आत्म विनाश</item>
+        <item>ऑफ</item>
+        <item>1 मिनट</item>
+        <item>2 मिनट</item>
+        <item>5 मिनट</item>
+        <item>10 मिनट</item>
+    </string-array>
+
+    <string-array name="send_type_options">
+        <item>एसएमएस</item>
+        <item>MT</item>
+    </string-array>
+
+    <!-- Scheduled Message strings -->
+
+    <string-array name="schedule_menu">
+        <item>कॉपी</item>
+        <item>रद्द</item>
+    </string-array>
+
+    <string-array name="menu">
+        <item>कॉपी</item>
+        <item>आगे भेजना</item>
+        <item>पुन: भेजें</item>
+        <item>मिटाना</item>
+        <item>जानकारी</item>
+        <item>शेयर</item>
+        <item>जवाब दें</item>
+    </string-array>
+
+    <string-array name="conversation_options_menu">
+        <item>चैट हटाएं</item>
+        <item>समूह हटाएं</item>
+        <item>समूह से बाहर निकलें</item>
+    </string-array>
+
+    <!--Group member list menu -->
+    <string-array name="channel_users_menu_option">
+        <item>संदेश</item>
+        <item>हटाना</item>
+    </string-array>
+
+    <!--Multimedia options -->
+    <string-array name="multimediaOptions_sms">
+        <item>वर्तमान स्थान</item>
+    </string-array>
+
+    <string-array name="multimediaOptions_mt">
+        <item>वर्तमान स्थान</item>
+        <item>फोटो लो</item>
+        <item>फ़ाइल जोड़ें</item>
+        <item>ऑडियो संदेश</item>
+        <item>वीडियो संदेश</item>
+        <item>संपर्क साझा करें</item>
+    </string-array>
+
+    <string-array name="multimediaOptions_with_price">
+        <item>वर्तमान स्थान</item>
+        <item>फोटो लो</item>
+        <item>फ़ाइल जोड़ें</item>
+        <item>ऑडियो संदेश</item>
+        <item>वीडियो संदेश</item>
+        <item>संपर्क साझा करें</item>
+        <item>कीमत संलग्न करें</item>
+
+    </string-array>
+
+    <string-array name="multimediaOptions_with_price_text">
+        <item>स्थान</item>
+        <item>कैमरा</item>
+        <item>फ़ाइल</item>
+        <item>ऑडियो</item>
+        <item>वीडियो</item>
+        <item>संपर्क</item>
+        <item>मूल्य</item>
+    </string-array>
+
+    <string-array name="multimediaOptions_without_price_text">
+        <item>स्थान</item>
+        <item>कैमरा</item>
+        <item>फ़ाइल</item>
+        <item>ऑडियो</item>
+        <item>वीडियो</item>
+        <item>संपर्क</item>
+    </string-array>
+
+    <string-array name="multimediaOptions_without_price_key">
+        <item>:स्थान</item>
+        <item>:कैमरा</item>
+        <item>:फ़ाइल</item>
+        <item>:ऑडियो</item>
+        <item>:वीडियो</item>
+        <item>:संपर्क</item>
+    </string-array>
+
+    <string-array name="multimediaOptionIcons_without_price">
+        <item>&#xf041;</item>
+        <item>&#xf030;</item>
+        <item>&#xf0c6;</item>
+        <item>&#xf130;</item>
+        <item>&#xf03d;</item>
+        <item>&#xf007;</item>
+    </string-array>
+
+    <array name="alphabet_color">
+        <item>#f16364</item>
+        <item>#f58559</item>
+        <item>#f9a43e</item>
+        <item>#e4c62e</item>
+        <item>#67bf74</item>
+        <item>#59a2be</item>
+        <item>#2093cd</item>
+        <item>#ad62a7</item>
+    </array>
+
+</resources>
\ No newline at end of file
diff --git a/mobicomkitui/src/main/res/values-sw600dp-port/integers.xml b/mobicomkitui/src/main/res/values-sw600dp-port/integers.xml
deleted file mode 100755
index 578b26f3..00000000
--- a/mobicomkitui/src/main/res/values-sw600dp-port/integers.xml
+++ /dev/null
@@ -1,9 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<resources>
-
-    <!-- On devices with a smallest width of 600dp or more in portrait orientation, the two-pane
-         layout should allocate equal space to each fragment. -->
-    <integer name="contact_list_percent">50</integer>
-    <integer name="contact_detail_percent">50</integer>
-
-</resources>
diff --git a/mobicomkitui/src/main/res/values-sw600dp/integers.xml b/mobicomkitui/src/main/res/values-sw600dp/integers.xml
deleted file mode 100755
index 330ab030..00000000
--- a/mobicomkitui/src/main/res/values-sw600dp/integers.xml
+++ /dev/null
@@ -1,9 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<resources>
-
-    <!-- On devices with a smallest width of 600dp or more, the two-pane layout should allocate
-         a larger portion of the screen to the detail fragment. -->
-    <integer name="contact_list_percent">35</integer>
-    <integer name="contact_detail_percent">65</integer>
-
-</resources>
diff --git a/mobicomkitui/src/main/res/values/mobicom_array.xml b/mobicomkitui/src/main/res/values/mobicom_array.xml
index ba921870..994f39ec 100755
--- a/mobicomkitui/src/main/res/values/mobicom_array.xml
+++ b/mobicomkitui/src/main/res/values/mobicom_array.xml
@@ -29,6 +29,8 @@
         <item>Resend</item>
         <item>Delete</item>
         <item>Info</item>
+        <item>Share</item>
+        <item>Reply</item>
     </string-array>
 
     <string-array name="conversation_options_menu">
@@ -37,6 +39,12 @@
         <item>Exit group</item>
     </string-array>
 
+    <!--Group member list menu -->
+    <string-array name="channel_users_menu_option">
+        <item>Message</item>
+        <item>Remove</item>
+    </string-array>
+
     <!--Multimedia options -->
     <string-array name="multimediaOptions_sms">
         <item>Current location</item>
@@ -81,6 +89,15 @@
         <item>Contact</item>
     </string-array>
 
+    <string-array name="multimediaOptions_without_price_key">
+        <item>:location</item>
+        <item>:camera</item>
+        <item>:file</item>
+        <item>:audio</item>
+        <item>:video</item>
+        <item>:contact</item>
+    </string-array>
+
     <string-array name="multimediaOptionIcons_without_price">
         <item>&#xf041;</item>
         <item>&#xf030;</item>
diff --git a/mobicomkitui/src/main/res/values/mobicom_colors.xml b/mobicomkitui/src/main/res/values/mobicom_colors.xml
index da2a8166..15b04ea3 100755
--- a/mobicomkitui/src/main/res/values/mobicom_colors.xml
+++ b/mobicomkitui/src/main/res/values/mobicom_colors.xml
@@ -66,5 +66,10 @@
     <color name="apploizc_black_color">#000000</color>
     <color name="apploizc_dark_black_color">#ff000000</color>
     <color name="apploizc_darker_gray_color">#aaa</color>
+    <color name="apploizc_gray_color">#333333</color>
+    <color name="apploizc_lite_gray_color">#666666</color>
+    <color name="apploizc_custom_channel_message_text_color">#cccccc</color>
+    <color name="apploizc_reply_sent_message_bg_color">#C0C0C0</color>
+    <color name="apploizc_reply_received_message_bg_color">#F5F5F5</color>
 
 </resources>
\ No newline at end of file
diff --git a/mobicomkitui/src/main/res/values/mobicom_strings.xml b/mobicomkitui/src/main/res/values/mobicom_strings.xml
index 3f710fa5..72ea6f54 100755
--- a/mobicomkitui/src/main/res/values/mobicom_strings.xml
+++ b/mobicomkitui/src/main/res/values/mobicom_strings.xml
@@ -1,5 +1,6 @@
 <?xml version="1.0" encoding="utf-8"?>
-<resources>
+<resources  xmlns:tools="http://schemas.android.com/tools"
+    tools:ignore="MissingTranslation">
 
     <string name="app_name">Applozic</string>
     <string name="conversations">Conversations</string>
@@ -11,8 +12,10 @@
     <string name="enter_message_hint">Write a Message...</string>
     <string name="send_text">SEND</string>
     <string name="cancel_text">CANCEL</string>
+    <string name="ok_text">OK</string>
     <string name="start_text">START</string>
     <string name="no_conversation">You have no conversations</string>
+    <string name="search_not_found_for_messages">No conversation found</string>
     <string name="info_broadcast_message">Messages will be broadcasted to each recipient individually</string>
     <string name="shareOptions">Share</string>
 
@@ -77,8 +80,9 @@
         \nFor any queries, get in touch with us at support@mobitexter.net</string>
 
     <string name="info_app_not_found_to_open_file">No application found to open this file</string>
+    <string name="unable_to_play_requested_audio_file">No application found to open this file</string>
     <string name="file_not_selected">Did you miss selecting the file?</string>
-    <string name="info_attachment_max_allowed_file_size">Can\'t send maximum uploading file size limit exceeded 10Mb </string>
+    <string name="info_attachment_max_allowed_file_size">Can\'t send maximum uploading file size limit exceeded! </string>
     <string name="info_file_attachment_error">Can\'t send! Some unexpected error occurred while reading file</string>
     <string name="select_file_count_limit">Can\'t select more than 1 file</string>
 
@@ -113,14 +117,17 @@
     <string name="edit">Edit</string>
     <string name="confirm">Confirm</string>
     <string name="skip">Skip</string>
-    <string name ="you_string">You</string>
+    <string name="you_string">You</string>
+
+    <string name="view_option_string">View</string>
+    <string name="message_option_string">Message</string>
 
     <string name="applozic_account_closed">Please contact Applozic to activate chat in your app</string>
     <string name="applozic_free_version_not_allowed_on_release_build">Please contact Applozic to activate chat in your app</string>
     <string name="quick_conversation_loading">loading conversation..</string>
     <string name="alert_for_empty_message">Do you want to send a message without text?</string>
-    <string name ="yes_alert">Yes</string>
-    <string name ="subtitle_last_seen_at_time">Last seen</string>
+    <string name="yes_alert">Yes</string>
+    <string name="subtitle_last_seen_at_time">Last seen</string>
     <string name="is_typing">is typing...</string>
     <string name="user_online">Online</string>
     <string name="removing_channel_user">Removing....</string>
@@ -131,23 +138,34 @@
     <string name="dialog_remove_group_user">Remove [name] from [group]?</string>
     <string name="dialog_add_group_user">Add [name] to [group]?</string>
     <string name="group_name_info">[group]</string>
+    <string name="groupType_info">[groupType]</string>
+    <string name="group_string">group</string>
+    <string name="broadcast_string">broadcast</string>
+    <string name="new_broadcast_name_info">New broadcast</string>
+    <string name="mute_Group">Mute</string>
+    <string name="unmute_Group">UnMute</string>
     <string name="user_name_info">[name]</string>
     <string name="channel_member_title">Select contact</string>
     <string name="channel_exit_button">EXIT GROUP</string>
     <string name="channel_delete_group_button">DELETE GROUP</string>
+    <string name="broadcast_exit_button">EXIT BROADCAST</string>
+    <string name="broadcast_delete_button">DELETE BROADCAST</string>
     <string name="channel_created_by">Created by</string>
     <string name="remove_member">Remove</string>
-    <string name="add_member">Add</string>
+    <string name="add">Add</string>
+    <string name="group_creating_info">Creating group please wait</string>
+    <string name="broadcast_creating_info">Creating broadcast please wait</string>
     <string name="channel_exit">Exit</string>
     <string name="channel_deleting">Delete</string>
-    <string name="leave_channel">Are you sure you want to exit from this group?</string>
-    <string name="exit_channel_message_info">Are you sure you want to exit [group] group?</string>
-    <string name="delete_channel_messages_and_channel_info">Are you sure you want to delete [group] group?</string>
+    <string name="leave_channel">Are you sure you want to exit from this [groupType]?</string>
+    <string name="exit_channel_message_info">Are you sure you want to exit [group] [groupType]?</string>
+    <string name="delete_channel_messages_and_channel_info">Are you sure you want to delete [group] [groupType]?</string>
     <string name="channel_name_empty">Group name can not be empty</string>
     <string name="channel_add_alert">Unable to add participant in group because you are not a participant</string>
     <string name="channel_edit_alert">Unable to change the group name because you are not a participant</string>
     <string name="admin_text">Group admin</string>
     <string name="user_not_in_this_group_text">You are no longer a participant of this group</string>
+    <string name="group_has_been_deleted_text">This Group has been deleted</string>
     <string name="update_channel_title_name">Enter Group Name</string>
     <string name="new_channel_name_hint">Group name..</string>
     <string name="user_block_info">Block [name]? Blocked user will no longer be able to send you messages</string>
@@ -156,6 +174,22 @@
     <string name="applozic_userId_error_info_in_logs">UserId can not be null or empty and Channel key should not be null</string>
     <string name="applozic_channel_error_info_in_logs">Please check group name is Null or Empty or it has at least one member to be added in group</string>
     <string name="applozic_add_user_to_multiple_channel_error_info_in_logs">UserId can not be null or empty and Channel key list should not be null</string>
-
-
+    <string name="user_logout_info">Logout successful</string>
+    <string name="unable_share_message">Unable to share you are not a participant of this group</string>
+    <string name="user_is_blocked">Unable to send user is blocked</string>
+    <string name="when_on_wifi">When on wifi</string>
+    <string name="when_on_cellular_network">When on cellular network</string>
+    <string name="media_auto_download">Media-auto download</string>
+    <string name="applozic_network_usage">Network Usage</string>
+    <string name="enable_vibration_notification">Enable vibration on notification</string>
+    <string name="user_has_been_deleted_text">User has been deleted</string>
+    <string name="make_admin_text_info">Make group admin</string>
+    <string name="attachment_string">Attachment</string>
+    <string name="photo_string">Photo</string>
+    <string name="contact_string">Contact</string>
+    <string name="video_string">Video</string>
+    <string name="audio_string">Audio</string>
+    <string name="al_location_string">Location</string>
+    <string name="restricted_words_are_not_allowed">Restricted words are not allowed</string>
+    <string name="ok_alert">Ok</string>
 </resources>
diff --git a/mobicomkitui/src/main/res/values/mobicom_themes.xml b/mobicomkitui/src/main/res/values/mobicom_themes.xml
index 69715f33..275f1d9c 100755
--- a/mobicomkitui/src/main/res/values/mobicom_themes.xml
+++ b/mobicomkitui/src/main/res/values/mobicom_themes.xml
@@ -18,23 +18,23 @@
 
     <!--http://stackoverflow.com/questions/21536018/android-get-support-action-bar-always-returns-null
     use android:windowNoTitle as false-->
-     <style name="ApplozicTheme" parent="Theme.AppCompat.Light.NoActionBar">
-
-         <item name="colorPrimary">@color/applozic_theme_color_primary</item>
-         <!-- colorPrimaryDark is used for the status bar -->
-         <item name="colorPrimaryDark">@color/applozic_theme_color_primary_dark</item>
-         <!-- colorAccent is used as the default value for colorControlActivated which is used to tint widgets -->
-         <item name="colorAccent">@color/applozic_theme_color_primary</item>
-         <item name="windowActionModeOverlay">true</item>
-
-       <!-- &lt;!&ndash; You can also set colorControlNormal, colorControlActivated
-             colorControlHighlight & colorSwitchThumbNormal. &ndash;&gt;
-       &lt;!&ndash; <item name="colorControlNormal">#c5c5c5</item>&ndash;&gt;
-        <item name="colorControlActivated">@color/applozic_theme_color_control_activated</item>
-        <item name="colorControlHighlight">@color/applozic_theme_color_control_highlight</item>
-        <item name="android:textColorPrimary">@color/applozic_theme_primary_text</item>
-         &lt;!&ndash;actionbar icon color&ndash;&gt;
-        <item name="android:textColorSecondary">@color/applozic_theme_secondary_text</item>-->
+    <style name="ApplozicTheme" parent="Theme.AppCompat.Light.NoActionBar">
+
+        <item name="colorPrimary">@color/applozic_theme_color_primary</item>
+        <!-- colorPrimaryDark is used for the status bar -->
+        <item name="colorPrimaryDark">@color/applozic_theme_color_primary_dark</item>
+        <!-- colorAccent is used as the default value for colorControlActivated which is used to tint widgets -->
+        <item name="colorAccent">@color/applozic_theme_color_primary</item>
+        <item name="windowActionModeOverlay">true</item>
+
+        <!-- &lt;!&ndash; You can also set colorControlNormal, colorControlActivated
+              colorControlHighlight & colorSwitchThumbNormal. &ndash;&gt;
+        &lt;!&ndash; <item name="colorControlNormal">#c5c5c5</item>&ndash;&gt;
+         <item name="colorControlActivated">@color/applozic_theme_color_control_activated</item>
+         <item name="colorControlHighlight">@color/applozic_theme_color_control_highlight</item>
+         <item name="android:textColorPrimary">@color/applozic_theme_primary_text</item>
+          &lt;!&ndash;actionbar icon color&ndash;&gt;
+         <item name="android:textColorSecondary">@color/applozic_theme_secondary_text</item>-->
     </style>
 
     <style name="Applozic.People.Theme" parent="Theme.AppCompat.Light.NoActionBar">
@@ -58,6 +58,16 @@
     </style>
 
 
+    <style name="ToolbarTitle" parent="@style/TextAppearance.Widget.AppCompat.Toolbar.Title">
+        <item name="android:textSize">18sp</item>
+    </style>
+
+    <style name="ToolbarSubtitle" parent="@style/TextAppearance.Widget.AppCompat.Toolbar.Subtitle">
+        <item name="android:textSize">14sp</item>
+        <item name="android:ellipsize">end</item>
+        <item name="android:singleLine">true</item>
+    </style>
+
     <style name="ApplozicTheme.ActionBarStyle" parent="@android:style/Widget.Holo.Light.ActionBar.Solid.Inverse">
         <item name="android:subtitleTextStyle">@style/ApplozicTheme.ActionBar.TitleTextStyle</item>
         <item name="android:windowContentOverlay">@null</item>
diff --git a/mobicomkitui/src/main/res/values/strings.xml b/mobicomkitui/src/main/res/values/strings.xml
index 2c4975c1..d6dfd92f 100755
--- a/mobicomkitui/src/main/res/values/strings.xml
+++ b/mobicomkitui/src/main/res/values/strings.xml
@@ -1,5 +1,6 @@
 <?xml version="1.0" encoding="utf-8"?>
-<resources>
+<resources  xmlns:tools="http://schemas.android.com/tools"
+    tools:ignore="MissingTranslation">
 
     <string name="internet_connection_not_available">No internet connection</string>
     <string name="you_need_network_access_for_delete">You need to have network access for deleting Conversation </string>
@@ -30,9 +31,9 @@
     <string name="zero_groups_on_app">Groups not found</string>
     <string name="delete_thread_text">Deleting....</string>
     <string name="search_title">Search</string>
-    <string name ="applozic_user_already_in_a_group">Already added to the group</string>
-    <string name ="applozic_contacts_loading_info">Loading please wait...</string>
-    <string name ="applozic_contacts_loading_error">You need to have network access for loading contacts</string>
+    <string name="applozic_user_already_in_a_group">Already added to the [groupType]</string>
+    <string name="applozic_contacts_loading_info">Loading please wait...</string>
+    <string name="applozic_contacts_loading_error">You need to have network access for loading contacts</string>
 
 
     <!--
@@ -99,5 +100,113 @@
     <string name="applozic_message_info">Message Info</string>
     <string name="applozic_message_info_no_network">Not able to fetch message info.</string>
     <string name="applozic_user_profile_heading">Profile</string>
-
+    <string name="send_message_to">Send to..</string>
+    <string name="info_attachment_max_allowed_file_size_exceeded">Can\'t send maximum uploading file size limit exceeded </string>
+    <string name="group_members_limit_exceeds">Limit reached, remove someone from the Group first</string>
+    <string name="please_wait_creating_group_of_two">Please wait...</string>
+    <string name="sort_contacts_by_lastSeenAt">Sort by lastSeen</string>
+    <string name="sort_contacts_by_recent_chats">Sort by recent chats</string>
+    <string name="chats">Chats</string>
+    <string name="refresh">Refresh</string>
+    <string name="start_New">Start New</string>
+    <string name="dial">Dial</string>
+    <string name="next">Next</string>
+    <string name="done">Done</string>
+    <string name="gallery">Gallery</string>
+    <string name="camera_option">Camera</string>
+    <string name="logout">Logout</string>
+    <string name="copy">Copy</string>
+    <string name="forward">Forward</string>
+    <string name="resend">Resend</string>
+    <string name="delete">Delete</string>
+    <string name="info">Info</string>
+    <string name="share">Share</string>
+    <string name="reply">Reply</string>
+    <string name="self_destruct">Self Destruct</string>
+    <string name="off">Off</string>
+    <string name="one_min">1 min</string>
+    <string name="two_min">2 min</string>
+    <string name="five_min">5 min</string>
+    <string name="ten_min">10 min</string>
+    <string name="sms">SMS</string>
+    <string name="mt">MT</string>
+    <string name="Delete_conversation">Delete conversation</string>
+    <string name="delete_group">Delete group</string>
+    <string name="exit_group">Exit group</string>
+    <string name="message">Message</string>
+    <string name="remove">Remove</string>
+    <string name="make_group_admin">Make group admin</string>
+    <string name="take_photo">Take photo</string>
+    <string name="attach_file">Attach file</string>
+    <string name="audio_message">Audio Message</string>
+    <string name="video_message">Video Message</string>
+    <string name="share_contact">Share Contact</string>
+    <string name="attach_price">Attach price</string>
+    <string name="location">:location</string>
+    <string name="file">:file</string>
+    <string name="audio">:audio</string>
+    <string name="camera">:camera</string>
+    <string name="video">:video</string>
+    <string name="contact">:contact</string>
+    <string name="current_location">Current Location</string>
+    <string name="price">Price</string>
+    <string name="status">status</string>
+    <string name="name">Name</string>
+    <string name="phone">Phone</string>
+    <string name="Group">GROUP</string>
+    <string name="Contact">CONTACT</string>
+    <string name="participants">Participants</string>
+    <string name="cancel">Cancel</string>
+    <string name="Add_caption">Add caption...</string>
+    <string name="New_Attachment">New Attachment</string>
+    <string name="send_location">Send Location</string>
+    <string name="send_your_current_location">Send your current Location</string>
+    <string name="Add_Contacts">Add Contacts</string>
+    <string name="stop">STOP</string>
+    <string name="profile_status">Profile Status</string>
+    <string name="no_status">No Status</string>
+    <string name="online">online</string>
+    <string name="notifications">Notifications</string>
+    <string name="push_notifications">Push Notifications</string>
+    <string name="sales_manager">Sales Manager</string>
+    <string name="display_name">Display Name</string>
+    <string name="today">Today</string>
+    <string name="kb45">45kb</string>
+    <string name="message_text">Message Text</string>
+    <string name="read">Read</string>
+    <string name="delivered">Delivered</string>
+    <string name="file_name_will_come_here_for_attachment">file name will come here for attachment</string>
+    <string name="mb_10">10 MB</string>
+    <string name="mobile_number">mobile number</string>
+    <string name="schedule">Schedule</string>
+    <string name="delivery_status">delivery status</string>
+    <string name="testTime">testTime</string>
+    <string name="created_at_time">created at time</string>
+    <string name="edit_group_name">Edit group name</string>
+    <string name="add_member">Add member</string>
+    <string name="group_not_exist">Group Not Exist</string>
+    <string name="no_groups">No Groups</string>
+    <string name="contacts_not_found">No Contacts Found</string>
+    <string name="remove_image">Remove image</string>
+    <string name="applozic_failed_to_load_contact">Failed to load Contact</string>
+    <string name="applozic_Cropping_failed">Cropping failed</string>
+    <string name="applozic_resending_attachment">Resending attachment....</string>
+    <string name="Location">Location</string>
+    <string name="processing_please_wait">Processing... Please wait</string>
+    <string name="success">success</string>
+    <string name="error">error</string>
+    <string name="mute_group_for">Mute Group For..</string>
+    <string name="eight_Hours">8 Hours</string>
+    <string name="one_week">1 Week </string>
+    <string name="one_year"> 1 Year </string>
+    <string name="file_does_not_exist">file does not Exist</string>
+    <string name="copied_message">Copied message</string>
+    <string name="data_usage">Data Usage</string>
+    <string name="missed">Missed</string>
+    <string name="hold_to_record_release_to_send">Hold to record , release to send</string>
+    <string name="slide_to_cancel">Slide to cancel</string>
+    <string name="tap_on_mic_button_to_record_audio">Tap on mic button to start audio recording</string>
+    <string name="profile_contact">No Contact number</string>
+    <string name="profile_contact_number">Contact Number</string>
+    <string name="user_name">User Name</string>
 </resources>
\ No newline at end of file
diff --git a/mobicomkitui/src/main/res/values/styles.xml b/mobicomkitui/src/main/res/values/styles.xml
index 366edce0..0dacc707 100755
--- a/mobicomkitui/src/main/res/values/styles.xml
+++ b/mobicomkitui/src/main/res/values/styles.xml
@@ -19,14 +19,4 @@
         <!-- All customizations that are NOT specific to a particular API-level can go here. -->
     </style>
 
-    <style name="Animations" />
-
-    <style name="Animations.GrowFromTop">
-        <item name="@android:windowEnterAnimation">@anim/mobicom_multimedia_options_grow_from_top
-        </item>
-        <item name="@android:windowExitAnimation">
-            @anim/mobicom_multimedia_option_shrink_from_bottom
-        </item>
-    </style>
-
 </resources>
diff --git a/mobicomkitui/src/main/res/xml/applozic_provider_paths.xml b/mobicomkitui/src/main/res/xml/applozic_provider_paths.xml
new file mode 100644
index 00000000..fd31665a
--- /dev/null
+++ b/mobicomkitui/src/main/res/xml/applozic_provider_paths.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<paths>
+    <external-path
+        name="files"
+        path="." />
+</paths>
\ No newline at end of file
diff --git a/mobicomkitui/src/main/res/xml/searchable_contacts.xml b/mobicomkitui/src/main/res/xml/searchable_contacts.xml
index 9ed147b2..7cce3b1e 100755
--- a/mobicomkitui/src/main/res/xml/searchable_contacts.xml
+++ b/mobicomkitui/src/main/res/xml/searchable_contacts.xml
@@ -5,10 +5,10 @@
 
 <searchable xmlns:android="http://schemas.android.com/apk/res/android"
     xmlns:mobitexter="http://schemas.android.com/apk/res-auto"
-    android:label="@string/app_name"
-    android:inputType="textPersonName"
-    android:voiceSearchMode="showVoiceSearchButton|launchRecognizer"
     android:hint="@string/search_hint"
+    android:inputType="textPersonName"
+    android:label="@string/app_name"
     android:textColorHint="@color/white"
-    mobitexter:showAsAction="always|collapseActionView"
-    mobitexter:actionViewClass="android.support.v7.widget.SearchView" />
+    android:voiceSearchMode="showVoiceSearchButton|launchRecognizer"
+    mobitexter:actionViewClass="android.support.v7.widget.SearchView"
+    mobitexter:showAsAction="always|collapseActionView" />
diff --git a/mobicommons/build.gradle b/mobicommons/build.gradle
index 82c09ce6..68ffa794 100755
--- a/mobicommons/build.gradle
+++ b/mobicommons/build.gradle
@@ -1,14 +1,14 @@
 apply plugin: 'com.android.library'
 
 android {
-    compileSdkVersion 23
-    buildToolsVersion "23.0.2"
+    compileSdkVersion 25
+    buildToolsVersion "25.0.2"
 
     defaultConfig {
-        minSdkVersion 10
-        targetSdkVersion 23
+        minSdkVersion 14
+        targetSdkVersion 25
         versionCode 1
-        versionName "4.59"
+        versionName "4.96"
     }
     buildTypes {
         release {
@@ -25,12 +25,16 @@ android {
 
 dependencies {
     compile fileTree(dir: 'libs', include: ['*.jar'])
-    compile 'com.android.support:appcompat-v7:23.1.1'
+    compile 'com.android.support:appcompat-v7:25.3.1'
     compile 'com.google.code.gson:gson:2.2.4'
     //compile 'com.googlecode.libphonenumber:libphonenumber:7.0.1'
 }
 
+
+
+
 /*
+
 ext {
     // Where you will see your artifact in Bintray's web interface
     // The "bintrayName" should match the name of the Bintray repro.
@@ -45,7 +49,7 @@ ext {
     artifact = 'mobicommons'
 
     libraryDescription = 'Applozic MobiFramekwork mobicommons library for utilities'
-    libraryVersion = '4.59'
+    libraryVersion = '4.96'
     developerId = 'devashish'
     developerName = 'Applozic'
     developerEmail = 'devashish.mamgain@gmail.com'
@@ -54,6 +58,7 @@ ext {
 
 apply from: 'https://raw.githubusercontent.com/attwellBrian/JCenter/master/installv1.gradle'
 apply from: 'https://raw.githubusercontent.com/attwellBrian/JCenter/master/bintrayv1.gradle'
+
 */
 
 
diff --git a/mobicommons/src/main/AndroidManifest.xml b/mobicommons/src/main/AndroidManifest.xml
index faea8441..80e005d8 100755
--- a/mobicommons/src/main/AndroidManifest.xml
+++ b/mobicommons/src/main/AndroidManifest.xml
@@ -1,3 +1,4 @@
+<?xml version="1.0" encoding="utf-8"?>
 <manifest package="com.applozic.mobicommons">
 
     <application>
diff --git a/mobicommons/src/main/java/com/applozic/mobicommons/commons/core/utils/DateUtils.java b/mobicommons/src/main/java/com/applozic/mobicommons/commons/core/utils/DateUtils.java
index 56945827..a088d70a 100755
--- a/mobicommons/src/main/java/com/applozic/mobicommons/commons/core/utils/DateUtils.java
+++ b/mobicommons/src/main/java/com/applozic/mobicommons/commons/core/utils/DateUtils.java
@@ -153,7 +153,7 @@ public static long daysBetween(Date startDate, Date endDate) {
         return daysBetween;
     }
 
-    public static String getDateAndTimeInDefaultFormat(long timestamp){
+    public static String getDateAndTimeInDefaultFormat(long timestamp) {
         Date date = new Date(timestamp);
         SimpleDateFormat simpleDateFormat = new SimpleDateFormat("EEE, MMM dd,yyyy hh:mm aa");
         return simpleDateFormat.format(date);
diff --git a/mobicommons/src/main/java/com/applozic/mobicommons/commons/core/utils/LocationInfo.java b/mobicommons/src/main/java/com/applozic/mobicommons/commons/core/utils/LocationInfo.java
index 7aff68f9..be4d6bbd 100644
--- a/mobicommons/src/main/java/com/applozic/mobicommons/commons/core/utils/LocationInfo.java
+++ b/mobicommons/src/main/java/com/applozic/mobicommons/commons/core/utils/LocationInfo.java
@@ -3,13 +3,13 @@
 import com.applozic.mobicommons.json.JsonMarker;
 
 public class LocationInfo extends JsonMarker {
-        
-        public double lat=0.0;
-        public double lon=0.0;
-        
-        public LocationInfo(double lat, double lon){
-            this.lat = lat;
-            this.lon = lon;
-        }
 
+    public double lat = 0.0;
+    public double lon = 0.0;
+
+    public LocationInfo(double lat, double lon) {
+        this.lat = lat;
+        this.lon = lon;
     }
+
+}
diff --git a/mobicommons/src/main/java/com/applozic/mobicommons/commons/core/utils/LocationUtils.java b/mobicommons/src/main/java/com/applozic/mobicommons/commons/core/utils/LocationUtils.java
index 688181a9..fd24cc06 100755
--- a/mobicommons/src/main/java/com/applozic/mobicommons/commons/core/utils/LocationUtils.java
+++ b/mobicommons/src/main/java/com/applozic/mobicommons/commons/core/utils/LocationUtils.java
@@ -69,17 +69,17 @@ public static String getAddress(Context context, Location loc) {
         return null;
     }
 
-    public static String loadStaticMap(String message){
+    public static String loadStaticMap(String message) {
 
         String location = getLocationFromMessage(message);
 
         final String staticMapUrl = "http://maps.googleapis.com/maps/api/staticmap?center=" + location
                 + "&zoom=17&size=400x400&maptype=roadmap&format=png&visual_refresh=true&markers=" + location;
 
-        return  staticMapUrl;
+        return staticMapUrl;
     }
 
-    public static String getLocationFromMessage(String message){
+    public static String getLocationFromMessage(String message) {
         String latitude = "0";
         String longitude = "0";
 
diff --git a/mobicommons/src/main/java/com/applozic/mobicommons/commons/core/utils/PermissionsUtils.java b/mobicommons/src/main/java/com/applozic/mobicommons/commons/core/utils/PermissionsUtils.java
index 00f91042..530ab829 100755
--- a/mobicommons/src/main/java/com/applozic/mobicommons/commons/core/utils/PermissionsUtils.java
+++ b/mobicommons/src/main/java/com/applozic/mobicommons/commons/core/utils/PermissionsUtils.java
@@ -24,9 +24,9 @@
     public static String[] PERMISSION_CALL = {Manifest.permission.CALL_PHONE};
     public static String[] PERMISSIONS_STORAGE = {Manifest.permission.WRITE_EXTERNAL_STORAGE,
             Manifest.permission.READ_EXTERNAL_STORAGE};
-    public static String [] PERMISSIONS_RECORD_AUDIO = {Manifest.permission.RECORD_AUDIO};
-    public static String [] PERMISSION_CAMERA = {Manifest.permission.CAMERA};
-    public static String [] PERMISSION_CONTACT = {Manifest.permission.READ_CONTACTS};
+    public static String[] PERMISSIONS_RECORD_AUDIO = {Manifest.permission.RECORD_AUDIO};
+    public static String[] PERMISSION_CAMERA = {Manifest.permission.CAMERA};
+    public static String[] PERMISSION_CONTACT = {Manifest.permission.READ_CONTACTS};
 
     public static boolean verifyPermissions(int[] grantResults) {
         if (grantResults.length < 1) {
@@ -75,6 +75,7 @@ public static boolean shouldShowRequestForContactPermission(Activity activity) {
         return (ActivityCompat.shouldShowRequestPermissionRationale(activity,
                 Manifest.permission.READ_CONTACTS));
     }
+
     public static boolean checkSelfForStoragePermission(Activity activity) {
         return (ActivityCompat.checkSelfPermission(activity, Manifest.permission.WRITE_EXTERNAL_STORAGE)
                 != PackageManager.PERMISSION_GRANTED
@@ -124,6 +125,7 @@ public static boolean isCameraPermissionGranted(Context context) {
         int res = context.checkCallingOrSelfPermission(Manifest.permission.CAMERA);
         return (res == PackageManager.PERMISSION_GRANTED);
     }
+
     public static boolean isCallPermissionGranted(Context context) {
         int res = context.checkCallingOrSelfPermission(Manifest.permission.CALL_PHONE);
         return (res == PackageManager.PERMISSION_GRANTED);
diff --git a/mobicommons/src/main/java/com/applozic/mobicommons/commons/core/utils/Support.java b/mobicommons/src/main/java/com/applozic/mobicommons/commons/core/utils/Support.java
index 3147cea8..efb247fe 100755
--- a/mobicommons/src/main/java/com/applozic/mobicommons/commons/core/utils/Support.java
+++ b/mobicommons/src/main/java/com/applozic/mobicommons/commons/core/utils/Support.java
@@ -14,7 +14,7 @@
     private String SUPPORT_PHONE_NUMBER;
 
     public Support(Context context) {
-        this.SUPPORT_PHONE_NUMBER = Utils.getMetaDataValue(context, SUPPORT_PHONE_NUMBER_METADATA);
+        this.SUPPORT_PHONE_NUMBER = Utils.getMetaDataValue(context.getApplicationContext(), SUPPORT_PHONE_NUMBER_METADATA);
     }
 
     public String getSupportNumber() {
diff --git a/mobicommons/src/main/java/com/applozic/mobicommons/commons/core/utils/Utils.java b/mobicommons/src/main/java/com/applozic/mobicommons/commons/core/utils/Utils.java
index a0aa5e88..b6d7a873 100755
--- a/mobicommons/src/main/java/com/applozic/mobicommons/commons/core/utils/Utils.java
+++ b/mobicommons/src/main/java/com/applozic/mobicommons/commons/core/utils/Utils.java
@@ -129,8 +129,13 @@ public static boolean hasMarshmallow() {
         return Build.VERSION.SDK_INT >= Build.VERSION_CODES.M;
     }
 
+    public static boolean hasNougat() {
+        return Build.VERSION.SDK_INT >= 24;
+    }
+
+
     public static boolean isBetweenGingerBreadAndKitKat() {
-        return Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD &&  Build.VERSION.SDK_INT<Build.VERSION_CODES.KITKAT;
+        return Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD && Build.VERSION.SDK_INT < Build.VERSION_CODES.KITKAT;
     }
 
     public static int getAppVersion(Context context) {
@@ -240,6 +245,15 @@ public static String getMetaDataValue(Context context, String metaDataName) {
         return null;
     }
 
+    public static int getLauncherIcon(Context context) {
+        try {
+            ApplicationInfo ai = context.getPackageManager().getApplicationInfo(context.getPackageName(), PackageManager.GET_META_DATA);
+            return ai.icon;
+        } catch (PackageManager.NameNotFoundException e) {
+            e.printStackTrace();
+            return 0;
+        }
+    }
 
     public static Integer getMetaDataValueForResources(Context context, String metaDataName) {
         try {
@@ -280,26 +294,59 @@ public static String makePlaceHolders(int len) {
         }
     }
 
-    public static CharSequence getStyleString(String name){
+
+    public static CharSequence getStyleString(String name) {
         SpannableStringBuilder builder = new SpannableStringBuilder();
         builder.append(name);
         return builder;
     }
 
-    public static CharSequence getStyledStringForContact(String displayName,String message){
+    public static CharSequence getStyledStringForContact(String displayName, String message) {
         SpannableStringBuilder builder = new SpannableStringBuilder();
         builder.append(displayName).append(": ").append(message);
         return builder;
     }
-    public static CharSequence getStyledStringForChannel(String name,String channelName,String message){
+
+    public static CharSequence getStyledStringForChannel(String name, String channelName, String message) {
         SpannableStringBuilder builder = new SpannableStringBuilder();
         builder.append(name).append(" @ ").append(channelName).append(": ").append(message);
         return builder;
     }
 
-    public static CharSequence getStyleStringForMessage(String message){
+    public static CharSequence getStyleStringForMessage(String message) {
         SpannableStringBuilder builder = new SpannableStringBuilder();
         builder.append(message);
         return builder;
     }
+
+    public static String getTimeDurationInFormat(Long timeInMillis) {
+
+        long timeInSecond = timeInMillis / 1000;
+        String formattedDuration;
+
+        if (timeInSecond < 60) {
+            return (timeInSecond + " Sec");
+        } else {
+            formattedDuration = timeInSecond / 60 + " Min";
+            if (timeInSecond % 60 > 0) {
+                formattedDuration = formattedDuration + " " + timeInSecond % 60 + " Sec";
+            }
+        }
+
+        return formattedDuration;
+    }
+
+    public static void printLog(Context context, String tag, String message) {
+        try{
+            if(context != null) {
+                boolean isDebuggable = (0 != (context.getApplicationInfo().flags & ApplicationInfo.FLAG_DEBUGGABLE));
+                if (isDebuggable) {
+                    Log.i(tag, message);
+                }
+            }
+        }catch (Exception e){
+            e.printStackTrace();
+        }
+    }
+
 }
diff --git a/mobicommons/src/main/java/com/applozic/mobicommons/commons/image/ImageCache.java b/mobicommons/src/main/java/com/applozic/mobicommons/commons/image/ImageCache.java
index 6f3cbc96..662aa9bd 100755
--- a/mobicommons/src/main/java/com/applozic/mobicommons/commons/image/ImageCache.java
+++ b/mobicommons/src/main/java/com/applozic/mobicommons/commons/image/ImageCache.java
@@ -53,6 +53,62 @@ public static ImageCache getInstance(
         return imageCache;
     }
 
+    /**
+     * Get the size in bytes of a bitmap.
+     *
+     * @param bitmap The bitmap to calculate the size of.
+     * @return size of bitmap in bytes.
+     */
+    @TargetApi(12)
+    public static int getBitmapSize(Bitmap bitmap) {
+        if (Utils.hasHoneycombMR1()) {
+            return bitmap.getByteCount();
+        }
+        // Pre HC-MR1
+        return bitmap.getRowBytes() * bitmap.getHeight();
+    }
+
+    /**
+     * Calculates the memory cache size based on a percentage of the max available VM memory.
+     * Eg. setting percent to 0.2 would set the memory cache to one fifth of the available
+     * memory. Throws {@link IllegalArgumentException} if percent is less than 0.05 or greater than .8.
+     * memCacheSize is stored in kilobytes instead of bytes as this will eventually be passed
+     * to construct a LruCache which takes an int in its constructor.
+     * This value should be chosen carefully based on a number of factors
+     * Refer to the corresponding Android Training class for more discussion:
+     * http://developer.android.com/training/displaying-bitmaps/
+     *
+     * @param percent Percent of available app memory to use to size memory cache.
+     */
+    public static int calculateMemCacheSize(float percent) {
+        if (percent < 0.05f || percent > 0.8f) {
+            throw new IllegalArgumentException("setMemCacheSizePercent - percent must be "
+                    + "between 0.05 and 0.8 (inclusive)");
+        }
+        return Math.round(percent * Runtime.getRuntime().maxMemory() / 1024);
+    }
+
+    /**
+     * Locate an existing instance of this Fragment or if not found, create and
+     * add it using FragmentManager.
+     *
+     * @param fm The FragmentManager manager to use.
+     * @return The existing instance of the Fragment or the new instance if just
+     * created.
+     */
+    public static RetainFragment findOrCreateRetainFragment(FragmentManager fm) {
+        // Check to see if we have retained the worker fragment.
+        RetainFragment mRetainFragment = (RetainFragment) fm.findFragmentByTag(TAG);
+
+        // If not retained (or first time running), we need to create and add it.
+        if (mRetainFragment == null) {
+            mRetainFragment = new RetainFragment();
+            fm.beginTransaction().add(mRetainFragment, TAG).commitAllowingStateLoss();
+        }
+
+        return mRetainFragment;
+    }
+
     /**
      * Initialize the cache.
      *
@@ -114,62 +170,6 @@ public Bitmap getBitmapFromMemCache(String data) {
         return null;
     }
 
-    /**
-     * Get the size in bytes of a bitmap.
-     *
-     * @param bitmap The bitmap to calculate the size of.
-     * @return size of bitmap in bytes.
-     */
-    @TargetApi(12)
-    public static int getBitmapSize(Bitmap bitmap) {
-        if (Utils.hasHoneycombMR1()) {
-            return bitmap.getByteCount();
-        }
-        // Pre HC-MR1
-        return bitmap.getRowBytes() * bitmap.getHeight();
-    }
-
-    /**
-     * Calculates the memory cache size based on a percentage of the max available VM memory.
-     * Eg. setting percent to 0.2 would set the memory cache to one fifth of the available
-     * memory. Throws {@link IllegalArgumentException} if percent is less than 0.05 or greater than .8.
-     * memCacheSize is stored in kilobytes instead of bytes as this will eventually be passed
-     * to construct a LruCache which takes an int in its constructor.
-     * This value should be chosen carefully based on a number of factors
-     * Refer to the corresponding Android Training class for more discussion:
-     * http://developer.android.com/training/displaying-bitmaps/
-     *
-     * @param percent Percent of available app memory to use to size memory cache.
-     */
-    public static int calculateMemCacheSize(float percent) {
-        if (percent < 0.05f || percent > 0.8f) {
-            throw new IllegalArgumentException("setMemCacheSizePercent - percent must be "
-                    + "between 0.05 and 0.8 (inclusive)");
-        }
-        return Math.round(percent * Runtime.getRuntime().maxMemory() / 1024);
-    }
-
-    /**
-     * Locate an existing instance of this Fragment or if not found, create and
-     * add it using FragmentManager.
-     *
-     * @param fm The FragmentManager manager to use.
-     * @return The existing instance of the Fragment or the new instance if just
-     * created.
-     */
-    public static RetainFragment findOrCreateRetainFragment(FragmentManager fm) {
-        // Check to see if we have retained the worker fragment.
-        RetainFragment mRetainFragment = (RetainFragment) fm.findFragmentByTag(TAG);
-
-        // If not retained (or first time running), we need to create and add it.
-        if (mRetainFragment == null) {
-            mRetainFragment = new RetainFragment();
-            fm.beginTransaction().add(mRetainFragment, TAG).commitAllowingStateLoss();
-        }
-
-        return mRetainFragment;
-    }
-
     /**
      * A simple non-UI Fragment that stores a single Object and is retained over configuration
      * changes. It will be used to retain the ImageCache object.
@@ -192,21 +192,21 @@ public void onCreate(Bundle savedInstanceState) {
         }
 
         /**
-         * Store a single object in this Fragment.
+         * Get the stored object.
          *
-         * @param object The object to store
+         * @return The stored object
          */
-        public void setObject(Object object) {
-            mObject = object;
+        public Object getObject() {
+            return mObject;
         }
 
         /**
-         * Get the stored object.
+         * Store a single object in this Fragment.
          *
-         * @return The stored object
+         * @param object The object to store
          */
-        public Object getObject() {
-            return mObject;
+        public void setObject(Object object) {
+            mObject = object;
         }
     }
 
diff --git a/mobicommons/src/main/java/com/applozic/mobicommons/commons/image/ImageLoader.java b/mobicommons/src/main/java/com/applozic/mobicommons/commons/image/ImageLoader.java
index ffd3bb86..a606251e 100755
--- a/mobicommons/src/main/java/com/applozic/mobicommons/commons/image/ImageLoader.java
+++ b/mobicommons/src/main/java/com/applozic/mobicommons/commons/image/ImageLoader.java
@@ -29,12 +29,11 @@
 public abstract class ImageLoader {
     private static final String TAG = "ImageLoader";
     private static final int FADE_IN_TIME = 200;
-
+    private final Object mPauseWorkLock = new Object();
     private ImageCache mImageCache;
     private Bitmap mLoadingBitmap;
     private boolean mFadeInBitmap = true;
     private boolean mPauseWork = false;
-    private final Object mPauseWorkLock = new Object();
     private int mImageSize;
     private Resources mResources;
 
@@ -43,6 +42,134 @@ protected ImageLoader(Context context, int imageSize) {
         mImageSize = imageSize;
     }
 
+    /**
+     * Cancels any pending work attached to the provided ImageView.
+     */
+    public static void cancelWork(ImageView imageView) {
+        final BitmapWorkerTask bitmapWorkerTask = getBitmapWorkerTask(imageView);
+        if (bitmapWorkerTask != null) {
+            bitmapWorkerTask.cancel(true);
+            if (BuildConfig.DEBUG) {
+                final Object bitmapData = bitmapWorkerTask.data;
+                Log.d(TAG, "cancelWork - cancelled work for " + bitmapData);
+            }
+        }
+    }
+
+    /**
+     * Returns true if the current work has been canceled or if there was no work in
+     * progress on this image view.
+     * Returns false if the work in progress deals with the same data. The work is not
+     * stopped in that case.
+     */
+    public static boolean cancelPotentialWork(Object data, ImageView imageView) {
+        final BitmapWorkerTask bitmapWorkerTask = getBitmapWorkerTask(imageView);
+
+        if (bitmapWorkerTask != null) {
+            final Object bitmapData = bitmapWorkerTask.data;
+            if (bitmapData == null || !bitmapData.equals(data)) {
+                bitmapWorkerTask.cancel(true);
+                if (BuildConfig.DEBUG) {
+                    Log.d(TAG, "cancelPotentialWork - cancelled work for " + data);
+                }
+            } else {
+                // The same work is already in progress.
+                return false;
+            }
+        }
+        return true;
+    }
+
+    /**
+     * @param imageView Any imageView
+     * @return Retrieve the currently active work task (if any) associated with this imageView.
+     * null if there is no such task.
+     */
+    private static BitmapWorkerTask getBitmapWorkerTask(ImageView imageView) {
+        if (imageView != null) {
+            final Drawable drawable = imageView.getDrawable();
+            if (drawable instanceof AsyncDrawable) {
+                final AsyncDrawable asyncDrawable = (AsyncDrawable) drawable;
+                return asyncDrawable.getBitmapWorkerTask();
+            }
+        }
+        return null;
+    }
+
+    /**
+     * Decode and sample down a bitmap from a file input stream to the requested width and height.
+     *
+     * @param fileDescriptor The file descriptor to read from
+     * @param reqWidth       The requested width of the resulting bitmap
+     * @param reqHeight      The requested height of the resulting bitmap
+     * @return A bitmap sampled down from the original with the same aspect ratio and dimensions
+     * that are equal to or greater than the requested width and height
+     */
+    public static Bitmap decodeSampledBitmapFromDescriptor(
+            FileDescriptor fileDescriptor, int reqWidth, int reqHeight) {
+
+        // First decode with inJustDecodeBounds=true to check dimensions
+        final BitmapFactory.Options options = new BitmapFactory.Options();
+        options.inJustDecodeBounds = true;
+        BitmapFactory.decodeFileDescriptor(fileDescriptor, null, options);
+
+        // Calculate inSampleSize
+        options.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);
+
+        // Decode bitmap with inSampleSize set
+        options.inJustDecodeBounds = false;
+        return BitmapFactory.decodeFileDescriptor(fileDescriptor, null, options);
+    }
+
+    /**
+     * Calculate an inSampleSize for use in a {@link android.graphics.BitmapFactory.Options} object when decoding
+     * bitmaps using the decode* methods from {@link android.graphics.BitmapFactory}. This implementation calculates
+     * the closest inSampleSize that will result in the final decoded bitmap having a width and
+     * height equal to or larger than the requested width and height. This implementation does not
+     * ensure a power of 2 is returned for inSampleSize which can be faster when decoding but
+     * results in a larger bitmap which isn't as useful for caching purposes.
+     *
+     * @param options   An options object with out* params already populated (run through a decode*
+     *                  method with inJustDecodeBounds==true
+     * @param reqWidth  The requested width of the resulting bitmap
+     * @param reqHeight The requested height of the resulting bitmap
+     * @return The value to be used for inSampleSize
+     */
+    public static int calculateInSampleSize(BitmapFactory.Options options,
+                                            int reqWidth, int reqHeight) {
+        // Raw height and width of image
+        final int height = options.outHeight;
+        final int width = options.outWidth;
+        int inSampleSize = 1;
+
+        if (height > reqHeight || width > reqWidth) {
+
+            // Calculate ratios of height and width to requested height and width
+            final int heightRatio = Math.round((float) height / (float) reqHeight);
+            final int widthRatio = Math.round((float) width / (float) reqWidth);
+
+            // Choose the smallest ratio as inSampleSize value, this will guarantee a final image
+            // with both dimensions larger than or equal to the requested height and width.
+            inSampleSize = heightRatio < widthRatio ? heightRatio : widthRatio;
+
+            // This offers some additional logic in case the image has a strange
+            // aspect ratio. For example, a panorama may have a much larger
+            // width than height. In these cases the total pixels might still
+            // end up being too large to fit comfortably in memory, so we should
+            // be more aggressive with sample down the image (=larger inSampleSize).
+
+            final float totalPixels = width * height;
+
+            // Anything more than 2x the requested pixels we'll sample down further
+            final float totalReqPixelsCap = reqWidth * reqHeight * 2;
+
+            while (totalPixels / (inSampleSize * inSampleSize) > totalReqPixelsCap) {
+                inSampleSize++;
+            }
+        }
+        return inSampleSize;
+    }
+
     public int getImageSize() {
         return mImageSize;
     }
@@ -138,66 +265,74 @@ public void setImageFadeIn(boolean fadeIn) {
     protected abstract Bitmap processBitmap(Object data);
 
     /**
-     * Cancels any pending work attached to the provided ImageView.
+     * Called when the processing is complete and the final bitmap should be set on the ImageView.
+     *
+     * @param imageView The ImageView to set the bitmap to.
+     * @param bitmap    The new bitmap to set.
      */
-    public static void cancelWork(ImageView imageView) {
-        final BitmapWorkerTask bitmapWorkerTask = getBitmapWorkerTask(imageView);
-        if (bitmapWorkerTask != null) {
-            bitmapWorkerTask.cancel(true);
-            if (BuildConfig.DEBUG) {
-                final Object bitmapData = bitmapWorkerTask.data;
-                Log.d(TAG, "cancelWork - cancelled work for " + bitmapData);
-            }
+    private void setImageBitmap(ImageView imageView, Bitmap bitmap) {
+
+        if (mFadeInBitmap) {
+            // Transition drawable to fade from loading bitmap to final bitmap
+            final TransitionDrawable td =
+                    new TransitionDrawable(new Drawable[]{
+                            new ColorDrawable(android.R.color.transparent),
+                            new BitmapDrawable(mResources, bitmap)
+                    });
+            imageView.setBackgroundDrawable(imageView.getDrawable());
+            imageView.setImageDrawable(td);
+            td.startTransition(FADE_IN_TIME);
+        } else {
+            imageView.setImageBitmap(bitmap);
         }
     }
 
     /**
-     * Returns true if the current work has been canceled or if there was no work in
-     * progress on this image view.
-     * Returns false if the work in progress deals with the same data. The work is not
-     * stopped in that case.
+     * Pause any ongoing background work. This can be used as a temporary
+     * measure to improve performance. For example background work could
+     * be paused when a ListView or GridView is being scrolled using a
+     * {@link android.widget.AbsListView.OnScrollListener} to keep
+     * scrolling smooth.
+     * If work is paused, be sure setPauseWork(false) is called again
+     * before your fragment or activity is destroyed (for example during
+     * {@link android.app.Activity#onPause()}), or there is a risk the
+     * background thread will never finish.
      */
-    public static boolean cancelPotentialWork(Object data, ImageView imageView) {
-        final BitmapWorkerTask bitmapWorkerTask = getBitmapWorkerTask(imageView);
-
-        if (bitmapWorkerTask != null) {
-            final Object bitmapData = bitmapWorkerTask.data;
-            if (bitmapData == null || !bitmapData.equals(data)) {
-                bitmapWorkerTask.cancel(true);
-                if (BuildConfig.DEBUG) {
-                    Log.d(TAG, "cancelPotentialWork - cancelled work for " + data);
-                }
-            } else {
-                // The same work is already in progress.
-                return false;
+    public void setPauseWork(boolean pauseWork) {
+        synchronized (mPauseWorkLock) {
+            mPauseWork = pauseWork;
+            if (!mPauseWork) {
+                mPauseWorkLock.notifyAll();
             }
         }
-        return true;
     }
 
     /**
-     * @param imageView Any imageView
-     * @return Retrieve the currently active work task (if any) associated with this imageView.
-     * null if there is no such task.
+     * A custom Drawable that will be attached to the imageView while the work is in progress.
+     * Contains a reference to the actual worker task, so that it can be stopped if a new binding is
+     * required, and makes sure that only the last started worker process can bind its result,
+     * independently of the finish order.
      */
-    private static BitmapWorkerTask getBitmapWorkerTask(ImageView imageView) {
-        if (imageView != null) {
-            final Drawable drawable = imageView.getDrawable();
-            if (drawable instanceof AsyncDrawable) {
-                final AsyncDrawable asyncDrawable = (AsyncDrawable) drawable;
-                return asyncDrawable.getBitmapWorkerTask();
-            }
+    private static class AsyncDrawable extends BitmapDrawable {
+        private final WeakReference<BitmapWorkerTask> bitmapWorkerTaskReference;
+
+        public AsyncDrawable(Resources res, Bitmap bitmap, BitmapWorkerTask bitmapWorkerTask) {
+            super(res, bitmap);
+            bitmapWorkerTaskReference =
+                    new WeakReference<BitmapWorkerTask>(bitmapWorkerTask);
         }
-        return null;
-    }
 
+        public BitmapWorkerTask getBitmapWorkerTask() {
+            return bitmapWorkerTaskReference.get();
+        }
+    }
 
     /**
      * The actual AsyncTask that will asynchronously process the image.
      */
     private class BitmapWorkerTask extends AsyncTask<Object, Void, Bitmap> {
-        private Object data;
         private final WeakReference<ImageView> imageViewReference;
+        private Object data;
         private ProgressBar progressBar;
         private TextView textView;
 
@@ -331,141 +466,4 @@ private ImageView getAttachedImageView() {
             return null;
         }
     }
-
-    /**
-     * A custom Drawable that will be attached to the imageView while the work is in progress.
-     * Contains a reference to the actual worker task, so that it can be stopped if a new binding is
-     * required, and makes sure that only the last started worker process can bind its result,
-     * independently of the finish order.
-     */
-    private static class AsyncDrawable extends BitmapDrawable {
-        private final WeakReference<BitmapWorkerTask> bitmapWorkerTaskReference;
-
-        public AsyncDrawable(Resources res, Bitmap bitmap, BitmapWorkerTask bitmapWorkerTask) {
-            super(res, bitmap);
-            bitmapWorkerTaskReference =
-                    new WeakReference<BitmapWorkerTask>(bitmapWorkerTask);
-        }
-
-        public BitmapWorkerTask getBitmapWorkerTask() {
-            return bitmapWorkerTaskReference.get();
-        }
-    }
-
-    /**
-     * Called when the processing is complete and the final bitmap should be set on the ImageView.
-     *
-     * @param imageView The ImageView to set the bitmap to.
-     * @param bitmap    The new bitmap to set.
-     */
-    private void setImageBitmap(ImageView imageView, Bitmap bitmap) {
-
-        if (mFadeInBitmap) {
-            // Transition drawable to fade from loading bitmap to final bitmap
-            final TransitionDrawable td =
-                    new TransitionDrawable(new Drawable[]{
-                            new ColorDrawable(android.R.color.transparent),
-                            new BitmapDrawable(mResources, bitmap)
-                    });
-            imageView.setBackgroundDrawable(imageView.getDrawable());
-            imageView.setImageDrawable(td);
-            td.startTransition(FADE_IN_TIME);
-        } else {
-            imageView.setImageBitmap(bitmap);
-        }
-    }
-
-    /**
-     * Pause any ongoing background work. This can be used as a temporary
-     * measure to improve performance. For example background work could
-     * be paused when a ListView or GridView is being scrolled using a
-     * {@link android.widget.AbsListView.OnScrollListener} to keep
-     * scrolling smooth.
-     * If work is paused, be sure setPauseWork(false) is called again
-     * before your fragment or activity is destroyed (for example during
-     * {@link android.app.Activity#onPause()}), or there is a risk the
-     * background thread will never finish.
-     */
-    public void setPauseWork(boolean pauseWork) {
-        synchronized (mPauseWorkLock) {
-            mPauseWork = pauseWork;
-            if (!mPauseWork) {
-                mPauseWorkLock.notifyAll();
-            }
-        }
-    }
-
-    /**
-     * Decode and sample down a bitmap from a file input stream to the requested width and height.
-     *
-     * @param fileDescriptor The file descriptor to read from
-     * @param reqWidth       The requested width of the resulting bitmap
-     * @param reqHeight      The requested height of the resulting bitmap
-     * @return A bitmap sampled down from the original with the same aspect ratio and dimensions
-     * that are equal to or greater than the requested width and height
-     */
-    public static Bitmap decodeSampledBitmapFromDescriptor(
-            FileDescriptor fileDescriptor, int reqWidth, int reqHeight) {
-
-        // First decode with inJustDecodeBounds=true to check dimensions
-        final BitmapFactory.Options options = new BitmapFactory.Options();
-        options.inJustDecodeBounds = true;
-        BitmapFactory.decodeFileDescriptor(fileDescriptor, null, options);
-
-        // Calculate inSampleSize
-        options.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);
-
-        // Decode bitmap with inSampleSize set
-        options.inJustDecodeBounds = false;
-        return BitmapFactory.decodeFileDescriptor(fileDescriptor, null, options);
-    }
-
-    /**
-     * Calculate an inSampleSize for use in a {@link android.graphics.BitmapFactory.Options} object when decoding
-     * bitmaps using the decode* methods from {@link android.graphics.BitmapFactory}. This implementation calculates
-     * the closest inSampleSize that will result in the final decoded bitmap having a width and
-     * height equal to or larger than the requested width and height. This implementation does not
-     * ensure a power of 2 is returned for inSampleSize which can be faster when decoding but
-     * results in a larger bitmap which isn't as useful for caching purposes.
-     *
-     * @param options   An options object with out* params already populated (run through a decode*
-     *                  method with inJustDecodeBounds==true
-     * @param reqWidth  The requested width of the resulting bitmap
-     * @param reqHeight The requested height of the resulting bitmap
-     * @return The value to be used for inSampleSize
-     */
-    public static int calculateInSampleSize(BitmapFactory.Options options,
-                                            int reqWidth, int reqHeight) {
-        // Raw height and width of image
-        final int height = options.outHeight;
-        final int width = options.outWidth;
-        int inSampleSize = 1;
-
-        if (height > reqHeight || width > reqWidth) {
-
-            // Calculate ratios of height and width to requested height and width
-            final int heightRatio = Math.round((float) height / (float) reqHeight);
-            final int widthRatio = Math.round((float) width / (float) reqWidth);
-
-            // Choose the smallest ratio as inSampleSize value, this will guarantee a final image
-            // with both dimensions larger than or equal to the requested height and width.
-            inSampleSize = heightRatio < widthRatio ? heightRatio : widthRatio;
-
-            // This offers some additional logic in case the image has a strange
-            // aspect ratio. For example, a panorama may have a much larger
-            // width than height. In these cases the total pixels might still
-            // end up being too large to fit comfortably in memory, so we should
-            // be more aggressive with sample down the image (=larger inSampleSize).
-
-            final float totalPixels = width * height;
-
-            // Anything more than 2x the requested pixels we'll sample down further
-            final float totalReqPixelsCap = reqWidth * reqHeight * 2;
-
-            while (totalPixels / (inSampleSize * inSampleSize) > totalReqPixelsCap) {
-                inSampleSize++;
-            }
-        }
-        return inSampleSize;
-    }
 }
diff --git a/mobicommons/src/main/java/com/applozic/mobicommons/commons/image/ImageUtils.java b/mobicommons/src/main/java/com/applozic/mobicommons/commons/image/ImageUtils.java
index a5721c34..b09d6142 100755
--- a/mobicommons/src/main/java/com/applozic/mobicommons/commons/image/ImageUtils.java
+++ b/mobicommons/src/main/java/com/applozic/mobicommons/commons/image/ImageUtils.java
@@ -13,20 +13,22 @@
 import android.util.DisplayMetrics;
 import android.util.Log;
 
-import com.applozic.mobicommons.file.FileUtils;
+import com.applozic.mobicommons.commons.core.utils.Utils;
 
 import java.io.ByteArrayOutputStream;
 import java.io.File;
+import java.io.FileDescriptor;
+import java.io.FileInputStream;
 import java.io.FileOutputStream;
+import java.io.IOException;
 
 /**
  * Created by devashish on 21/12/14.
  */
 public class ImageUtils {
 
-    private static Context context;
-
     private static final String TAG = "ImageUtils";
+    private static Context context;
 
     public ImageUtils(Context context) {
         this.context = context;
@@ -79,13 +81,14 @@ public static Uri getImageUri(Context inContext, Bitmap inImage) {
     }
 
     /**
-     *
      * @param uri
      * @return
      */
     public static Bitmap getPreview(Context context, Uri uri) {
-        String filePath  = FileUtils.getPath(context, uri);
-
+        if (uri == null) {
+            return null;
+        }
+        String filePath = uri.toString();
         BitmapFactory.Options bounds = new BitmapFactory.Options();
         bounds.inJustDecodeBounds = true;
         BitmapFactory.decodeFile(filePath, bounds);
@@ -101,7 +104,6 @@ public static Bitmap getPreview(Context context, Uri uri) {
     }
 
 
-
     public static Bitmap getImageRotatedBitmap(Bitmap bitmap, String filePath, int reqWidth, int reqHeight) {
         int rotate = 0;
         try {
@@ -146,7 +148,7 @@ public static Bitmap getBitMapFromLocalPath(String imageLocalPath) {
                 options.inJustDecodeBounds = false;
                 return BitmapFactory.decodeFile(imageLocalPath, options);
             } catch (Exception ex) {
-                Log.e(TAG, "Image not found on local storage: " + ex.getMessage());
+                Utils.printLog(context,TAG, "Image not found on local storage: " + ex.getMessage());
             }
         }
         return null;
@@ -165,4 +167,26 @@ public static String saveImageToInternalStorage(File file, Bitmap bitmapImage) {
         return file.getAbsolutePath();
     }
 
+
+    public static Bitmap decodeSampledBitmapFromPath(String path) {
+        FileInputStream fileInputStream = null;
+        try {
+            fileInputStream = new FileInputStream(path);
+            FileDescriptor fd = fileInputStream.getFD();
+            return ImageLoader.decodeSampledBitmapFromDescriptor(fd, 612,
+                    816);
+        } catch (Exception e) {
+            Log.i(TAG, "File not found : " + e.getMessage());
+        } finally {
+            if (fileInputStream != null) {
+                try {
+                    fileInputStream.close();
+                } catch (IOException e) {
+                    e.printStackTrace();
+                }
+            }
+        }
+        return null;
+    }
+
 }
diff --git a/mobicommons/src/main/java/com/applozic/mobicommons/commons/image/PhotoDecodeRunnable.java b/mobicommons/src/main/java/com/applozic/mobicommons/commons/image/PhotoDecodeRunnable.java
index 2fa49425..e3c320ff 100755
--- a/mobicommons/src/main/java/com/applozic/mobicommons/commons/image/PhotoDecodeRunnable.java
+++ b/mobicommons/src/main/java/com/applozic/mobicommons/commons/image/PhotoDecodeRunnable.java
@@ -30,70 +30,19 @@
  */
 public class PhotoDecodeRunnable implements Runnable {
 
+    // Constants for indicating the state of the decode
+    public static final int DECODE_STATE_FAILED = -1;
+    public static final int DECODE_STATE_STARTED = 0;
+    public static final int DECODE_STATE_COMPLETED = 1;
     // Limits the number of times the decoder tries to process an image
     private static final int NUMBER_OF_DECODE_TRIES = 2;
-
     // Tells the Runnable to pause for a certain number of milliseconds
     private static final long SLEEP_TIME_MILLISECONDS = 250;
-
     // Sets the log tag
     private static final String LOG_TAG = "PhotoDecodeRunnable";
-
-    // Constants for indicating the state of the decode
-    public static final int DECODE_STATE_FAILED = -1;
-    public static final int DECODE_STATE_STARTED = 0;
-    public static final int DECODE_STATE_COMPLETED = 1;
-
     // Defines a field that contains the calling object of type PhotoTask.
     final TaskRunnableDecodeMethods mPhotoTask;
 
-    /**
-     * An interface that defines methods that PhotoTask implements. An instance of
-     * PhotoTask passes itself to an PhotoDecodeRunnable instance through the
-     * PhotoDecodeRunnable constructor, after which the two instances can access each other's
-     * variables.
-     */
-    public interface TaskRunnableDecodeMethods {
-
-        /**
-         * Sets the Thread that this instance is running on
-         *
-         * @param currentThread the current Thread
-         */
-        void setImageDecodeThread(Thread currentThread);
-
-
-        /**
-         * Sets the actions for each state of the PhotoTask instance.
-         *
-         * @param state The state being handled.
-         */
-        void handleDecodeState(int state);
-
-        /**
-         * Returns the desired width of the image, based on the ImageView being created.
-         *
-         * @return The target width
-         */
-        int getTargetWidth();
-
-        /**
-         * Returns the desired height of the image, based on the ImageView being created.
-         *
-         * @return The target height.
-         */
-        int getTargetHeight();
-
-        /**
-         * Sets the Bitmap for the ImageView being displayed.
-         *
-         * @param image
-         */
-        void setImage(Bitmap image);
-
-        String getLocalPath();
-    }
-
     /**
      * This constructor creates an instance of PhotoDownloadRunnable and stores in it a reference
      * to the PhotoTask instance that instantiated it.
@@ -115,14 +64,13 @@ public void run() {
          * can interrupt the Thread.
          */
         mPhotoTask.setImageDecodeThread(Thread.currentThread());
-        
+
         /*
          * Gets the image cache buffer object from the PhotoTask instance. This makes the
          * to both PhotoDownloadRunnable and PhotoTask.
          */
         String imagePath = mPhotoTask.getLocalPath();
         if (imagePath == null) {
-            Log.e(LOG_TAG, "@@@Image path is coming as null");
             mPhotoTask.handleDecodeState(DECODE_STATE_FAILED);
             return;
 
@@ -145,7 +93,7 @@ public void run() {
             // Sets up options for creating a Bitmap object from the
             // downloaded image.
             BitmapFactory.Options bitmapOptions = new BitmapFactory.Options();
-    
+
             /*
              * Sets the desired image height and width based on the
              * ImageView being created.
@@ -159,20 +107,20 @@ public void run() {
 
                 return;
             }
-    
+
             /*
              * Even if the decoder doesn't set a Bitmap, this flag tells
              * the decoder to return the calculated bounds.
              */
             bitmapOptions.inJustDecodeBounds = true;
-    
+
             /*
              * First pass of decoding to get scaling and sampling
              * parameters from the image
              */
             BitmapFactory
                     .decodeFile(imagePath, bitmapOptions);
-    
+
             /*
              * Sets horizontal and vertical scaling factors so that the
              * image is expanded or compressed from its actual size to
@@ -180,14 +128,14 @@ public void run() {
              */
             int hScale = targetHeight == 0 ? bitmapOptions.outHeight : bitmapOptions.outHeight / targetHeight;
             int wScale = targetWidth == 0 ? bitmapOptions.outWidth : bitmapOptions.outWidth / targetWidth;
-    
+
             /*
              * Sets the sample size to be larger of the horizontal or
              * vertical scale factor
              */
             //
             int sampleSize = Math.max(hScale, wScale);
-    
+
             /*
              * If either of the scaling factors is > 1, the image's
              * actual dimension is larger that the available dimension.
@@ -206,7 +154,7 @@ public void run() {
             // Second pass of decoding. If no bitmap is created, nothing
             // is set in the object.
             bitmapOptions.inJustDecodeBounds = false;
-    
+
             /*
              * This does the actual decoding of the buffer. If the
              * decode encounters an an out-of-memory error, it may throw
@@ -224,7 +172,7 @@ public void run() {
                     /*
                      * If the decode works, no Exception or Error has occurred.
                     break;
-    
+
                     /*
                      * If the decode fails, this block tries to get more memory.
                      */
@@ -232,7 +180,7 @@ public void run() {
 
                     // Logs an error
                     Log.e(LOG_TAG, "Out of memory in decode stage. Throttling.");
-    
+
                     /*
                      * Tells the system that garbage collection is
                      * necessary. Notice that collection may or may not
@@ -272,7 +220,7 @@ public void run() {
             } else {
 
                 // Sets the ImageView Bitmap
-                returnBitmap = ImageUtils.getImageRotatedBitmap(returnBitmap,imagePath,returnBitmap.getWidth(),returnBitmap.getHeight());
+                returnBitmap = ImageUtils.getImageRotatedBitmap(returnBitmap, imagePath, returnBitmap.getWidth(), returnBitmap.getHeight());
                 mPhotoTask.setImage(returnBitmap);
 
                 // Reports a status of "completed"
@@ -288,4 +236,51 @@ public void run() {
         }
 
     }
+
+    /**
+     * An interface that defines methods that PhotoTask implements. An instance of
+     * PhotoTask passes itself to an PhotoDecodeRunnable instance through the
+     * PhotoDecodeRunnable constructor, after which the two instances can access each other's
+     * variables.
+     */
+    public interface TaskRunnableDecodeMethods {
+
+        /**
+         * Sets the Thread that this instance is running on
+         *
+         * @param currentThread the current Thread
+         */
+        void setImageDecodeThread(Thread currentThread);
+
+
+        /**
+         * Sets the actions for each state of the PhotoTask instance.
+         *
+         * @param state The state being handled.
+         */
+        void handleDecodeState(int state);
+
+        /**
+         * Returns the desired width of the image, based on the ImageView being created.
+         *
+         * @return The target width
+         */
+        int getTargetWidth();
+
+        /**
+         * Returns the desired height of the image, based on the ImageView being created.
+         *
+         * @return The target height.
+         */
+        int getTargetHeight();
+
+        /**
+         * Sets the Bitmap for the ImageView being displayed.
+         *
+         * @param image
+         */
+        void setImage(Bitmap image);
+
+        String getLocalPath();
+    }
 }
diff --git a/mobicommons/src/main/java/com/applozic/mobicommons/encryption/EncryptionUtils.java b/mobicommons/src/main/java/com/applozic/mobicommons/encryption/EncryptionUtils.java
index f72fd009..c46661a5 100644
--- a/mobicommons/src/main/java/com/applozic/mobicommons/encryption/EncryptionUtils.java
+++ b/mobicommons/src/main/java/com/applozic/mobicommons/encryption/EncryptionUtils.java
@@ -14,26 +14,30 @@
 public class EncryptionUtils {
 
     private static final String TAG = "EncryptionUtils";
-    private static final String ALGORITHM = "AES";
+    private static final String ALGORITHM = "AES/ECB/NoPadding";
 
     // Performs Encryption
     public static String encrypt(String ketString, String plainText) throws Exception {
         // generate key
-        Key key =  generateKey(ketString);
+        Key key = generateKey(ketString);
+        while (plainText.length() % 16 != 0) {
+            plainText = plainText.concat(" ");
+        }
         Cipher chiper = Cipher.getInstance(ALGORITHM);
+        ;
         chiper.init(Cipher.ENCRYPT_MODE, key);
         byte[] encVal = chiper.doFinal(plainText.getBytes());
-        String encryptedValue = Base64.encodeToString(encVal,Base64.DEFAULT);
+        String encryptedValue = Base64.encodeToString(encVal, Base64.DEFAULT);
         return encryptedValue;
     }
 
     // Performs decryption
     public static String decrypt(String ketString, String encryptedText) throws Exception {
         // generate key
-        Key key =  generateKey(ketString);
-        Cipher chiper= Cipher.getInstance(ALGORITHM);
+        Key key = generateKey(ketString);
+        Cipher chiper = Cipher.getInstance(ALGORITHM);
         chiper.init(Cipher.DECRYPT_MODE, key);
-        byte[] decodedValue = Base64.decode(encryptedText,Base64.DEFAULT);
+        byte[] decodedValue = Base64.decode(encryptedText, Base64.DEFAULT);
         byte[] decValue = chiper.doFinal(decodedValue);
         String decryptedValue = new String(decValue);
         return decryptedValue;
@@ -45,4 +49,4 @@ private static Key generateKey(String ketString) throws Exception {
         return key;
     }
 
-}
+}
\ No newline at end of file
diff --git a/mobicommons/src/main/java/com/applozic/mobicommons/file/FileUtils.java b/mobicommons/src/main/java/com/applozic/mobicommons/file/FileUtils.java
index f17db188..5edd36aa 100755
--- a/mobicommons/src/main/java/com/applozic/mobicommons/file/FileUtils.java
+++ b/mobicommons/src/main/java/com/applozic/mobicommons/file/FileUtils.java
@@ -37,15 +37,20 @@
 import android.util.Log;
 import android.webkit.MimeTypeMap;
 
+import com.applozic.mobicommons.commons.core.utils.Utils;
 import com.applozic.mobicommons.commons.image.ImageUtils;
 
+import java.io.BufferedReader;
 import java.io.ByteArrayOutputStream;
 import java.io.File;
 import java.io.FileFilter;
 import java.io.FileOutputStream;
 import java.io.IOException;
+import java.io.InputStreamReader;
 import java.text.DecimalFormat;
+import java.util.Arrays;
 import java.util.Comparator;
+import java.util.List;
 
 
 /**
@@ -311,7 +316,7 @@ public static String getDataColumn(Context context, Uri uri, String selection,
     public static String getPath(final Context context, final Uri uri) {
 
         if (DEBUG)
-            Log.d(TAG + " File -",
+            Utils.printLog(context,TAG + " File -",
                     "Authority: " + uri.getAuthority() +
                             ", Fragment: " + uri.getFragment() +
                             ", Port: " + uri.getPort() +
@@ -409,6 +414,66 @@ public static File getFile(Context context, Uri uri) {
         return null;
     }
 
+    public static String loadSettingsJsonFile(Context context) {
+        BufferedReader br = null;
+        StringBuffer sb = new StringBuffer();
+
+        try {
+            br = new BufferedReader(new InputStreamReader(context.getAssets().open(
+                    "applozic-settings.json"), "UTF-8"));
+            String line;
+            if (br != null) {
+                while ((line = br.readLine()) != null) {
+                    sb.append(line);
+                }
+            }
+        } catch (IOException ioe) {
+            return null;
+        } catch (Exception e) {
+        } finally {
+            try {
+                if (br != null) {
+                    br.close();
+                }
+            } catch (IOException e) {
+            }
+        }
+        return sb.toString();
+    }
+
+    public static List<String> loadRestrictedWordsFile(Context context) {
+
+        BufferedReader br = null;
+        StringBuffer sb = new StringBuffer();
+
+        try {
+            br = new BufferedReader(new InputStreamReader(context.getAssets().open(
+                    "restrictWords.txt"), "UTF-8"));
+            String line;
+            if (br != null) {
+
+                while ((line = br.readLine()) != null) {
+                    sb.append(line);
+                }
+            }
+        } catch (IOException ioe) {
+            return null;
+        } catch (Exception e) {
+            e.printStackTrace();
+        } finally {
+            try {
+                if (br != null) {
+                    br.close();
+                }
+            } catch (IOException e) {
+            }
+        }
+        String outputString = sb.toString();
+        String[] words = outputString.split(",");
+        List<String> wordList = Arrays.asList(words);
+        return wordList;
+    }
+
     /**
      * Get the file size in a human-readable string.
      *
@@ -478,10 +543,10 @@ public static Bitmap getThumbnail(Context context, Uri uri) {
      */
     public static Bitmap getThumbnail(Context context, Uri uri, String mimeType) {
         if (DEBUG)
-            Log.d(TAG, "Attempting to get thumbnail");
+            Utils.printLog(context,TAG, "Attempting to get thumbnail");
 
         if (!isMediaUri(uri)) {
-            Log.e(TAG, "You can only retrieve thumbnails for images and videos.");
+            Utils.printLog(context,TAG, "You can only retrieve thumbnails for images and videos.");
             return null;
         }
 
@@ -494,7 +559,7 @@ public static Bitmap getThumbnail(Context context, Uri uri, String mimeType) {
                 if (cursor.moveToFirst()) {
                     final int id = cursor.getInt(0);
                     if (DEBUG)
-                        Log.d(TAG, "Got thumb ID: " + id);
+                        Utils.printLog(context,TAG, "Got thumb ID: " + id);
 
                     if (mimeType.contains("video")) {
                         bm = MediaStore.Video.Thumbnails.getThumbnail(
@@ -553,16 +618,15 @@ public static String getMimeType(String url) {
         return type;
     }
 
-    public static Bitmap getPreview(String filePath, int reqWidth, int reqHeight, boolean enabled,String mimeType) {
+    public static Bitmap getPreview(String filePath, int reqWidth, int reqHeight, boolean enabled, String mimeType) {
 
-        if(mimeType.startsWith("video")){
+        if (mimeType.startsWith("video")) {
             return ThumbnailUtils.createVideoThumbnail(filePath, 1);
         }
-        return getPreview(filePath, reqWidth,reqHeight);
+        return getPreview(filePath, reqWidth, reqHeight);
     }
 
 
-
     public static Bitmap getPreview(String filePath, int reqWidth, int reqHeight) {
         File image = new File(filePath);
         Bitmap bitmap;
@@ -614,13 +678,14 @@ public static String getFileFormat(String fileName) {
     }
 
     /**
-     *  This method will compressed Image to a pre-configured files.
+     * This method will compressed Image to a pre-configured files.
+     *
      * @param filePath
      * @param newFileName
      * @param maxFileSize
      * @return
      */
-    public static File compressImageFiles(String filePath, String newFileName,int maxFileSize){
+    public static File compressImageFiles(String filePath, String newFileName, int maxFileSize) {
 
         BitmapFactory.Options options = new BitmapFactory.Options();
         options.inJustDecodeBounds = true;
@@ -629,8 +694,8 @@ public static File compressImageFiles(String filePath, String newFileName,int ma
         int actualHeight = options.outHeight;
         int actualWidth = options.outWidth;
         float imgRatio = actualWidth / actualHeight;
-        int maxHeight = (2 * actualHeight)/3;
-        int maxWidth =  (2* actualWidth)/3;
+        int maxHeight = (2 * actualHeight) / 3;
+        int maxWidth = (2 * actualWidth) / 3;
 
         float maxRatio = maxWidth / maxHeight;
         if (actualHeight > maxHeight || actualWidth > maxWidth) {
@@ -662,7 +727,7 @@ public static File compressImageFiles(String filePath, String newFileName,int ma
         int streamLength = maxFileSize;
         int compressQuality = 100;// Maximum 20 loops to retry to maintain quality.
         ByteArrayOutputStream bmpStream = new ByteArrayOutputStream();
-        while (streamLength >=maxFileSize && compressQuality > 50) {
+        while (streamLength >= maxFileSize && compressQuality > 50) {
 
             try {
                 bmpStream.flush();
@@ -673,7 +738,7 @@ public static File compressImageFiles(String filePath, String newFileName,int ma
             bitmap.compress(Bitmap.CompressFormat.JPEG, compressQuality, bmpStream);
             byte[] bmpPicByteArray = bmpStream.toByteArray();
             streamLength = bmpPicByteArray.length;
-            if(BuildConfig.DEBUG) {
+            if (BuildConfig.DEBUG) {
                 Log.i("test upload", "Quality: " + compressQuality);
                 Log.i("test upload", "Size: " + streamLength);
             }
@@ -724,16 +789,49 @@ public static File getLastModifiedFile(String directory) {
     public static String getFileName(Context context, Uri uri) {
 
         String fileName = null;
-        Cursor returnCursor =
-                context.getContentResolver().query(uri, null, null, null, null);
-        if (returnCursor != null && returnCursor.moveToFirst()) {
-            int columnIndex = returnCursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
-            fileName = returnCursor.getString(columnIndex);
+        if (uri.getScheme().equals("content")) {
+            Cursor cursor = context.getContentResolver().query(uri, null, null, null, null);
+            if (cursor != null) {
+                try {
+                    if (cursor.moveToFirst()) {
+                        fileName = cursor.getString(cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME));
+                    }
+                } catch (Exception e) {
+                    e.printStackTrace();
+                } finally {
+                    cursor.close();
+                }
+            }
+        }
+        if (TextUtils.isEmpty(fileName)) {
+            fileName = uri.getPath();
+            int cut = fileName.lastIndexOf('/');
+            if (cut != -1) {
+                fileName = fileName.substring(cut + 1);
+            }
         }
-
         return fileName;
     }
 
+    public static String getFileName(Uri uri) {
+        if (uri == null) {
+            return null;
+        }
+        File file = new File(uri.toString());
+        return file.getName();
+    }
+
+    public static String getMimeTypeByContentUriOrOther(Context context, Uri uri) {
+        if (context == null) {
+            return null;
+        }
+        String mimeType = context.getContentResolver().getType(uri);
+        if (TextUtils.isEmpty(mimeType)) {
+            mimeType = getMimeType(context, uri);
+        }
+        return mimeType;
+    }
+
     public static String getSize(Context context, Uri uri) {
 
         String sizeInMB = null;
@@ -757,4 +855,39 @@ public static String getSize(Context context, Uri uri) {
         return sizeInMB;
     }
 
+    public static String getName(String name) {
+        if (TextUtils.isEmpty(name)) {
+            return "";
+        }
+        int pos = name.lastIndexOf(".");
+
+        if (pos == -1) {
+            return name;
+        }
+        return name.substring(0, pos);
+    }
+
+    public static boolean isMaxUploadSizeReached(Context context ,Uri uri,int maxFileSize) {
+        try{
+            Cursor returnCursor = context.getContentResolver().query(uri, null, null, null, null);
+            if (returnCursor != null) {
+                int sizeIndex = returnCursor.getColumnIndex(OpenableColumns.SIZE);
+                returnCursor.moveToFirst();
+                Long fileSize = returnCursor.getLong(sizeIndex);
+                returnCursor.close();
+                return fileSize > maxFileSize;
+            }
+
+        }catch (Exception e){
+        }
+        return false;
+    }
+
+    public static boolean isContentScheme(Uri uri){
+        if (uri == null) {
+            return false;
+        }
+        return "content".equalsIgnoreCase(uri.getScheme());
+    }
+
 }
diff --git a/mobicommons/src/main/java/com/applozic/mobicommons/json/JsonMarker.java b/mobicommons/src/main/java/com/applozic/mobicommons/json/JsonMarker.java
index 8134acca..ee4df1fa 100755
--- a/mobicommons/src/main/java/com/applozic/mobicommons/json/JsonMarker.java
+++ b/mobicommons/src/main/java/com/applozic/mobicommons/json/JsonMarker.java
@@ -6,7 +6,7 @@
  * Created by adarsh on 6/8/15.
  */
 
-public class JsonMarker implements Serializable{
+public class JsonMarker implements Serializable {
 
 
 }
diff --git a/mobicommons/src/main/java/com/applozic/mobicommons/people/OnContactsInteractionListener.java b/mobicommons/src/main/java/com/applozic/mobicommons/people/OnContactsInteractionListener.java
index b8668205..564d86ba 100755
--- a/mobicommons/src/main/java/com/applozic/mobicommons/people/OnContactsInteractionListener.java
+++ b/mobicommons/src/main/java/com/applozic/mobicommons/people/OnContactsInteractionListener.java
@@ -21,6 +21,7 @@
     void onGroupSelected(Channel channel);
 
     void onCustomContactSelected(Contact contact);
+
     /**
      * Called when the ListView selection is cleared like when
      * a contact search is taking place or is finishing.
diff --git a/mobicommons/src/main/java/com/applozic/mobicommons/people/channel/Channel.java b/mobicommons/src/main/java/com/applozic/mobicommons/people/channel/Channel.java
index 3bb26bc8..ea75e226 100755
--- a/mobicommons/src/main/java/com/applozic/mobicommons/people/channel/Channel.java
+++ b/mobicommons/src/main/java/com/applozic/mobicommons/people/channel/Channel.java
@@ -1,17 +1,23 @@
 package com.applozic.mobicommons.people.channel;
 
+import com.applozic.mobicommons.json.JsonMarker;
 import com.applozic.mobicommons.people.contact.Contact;
 import com.google.gson.annotations.Expose;
 
-import java.io.Serializable;
 import java.util.ArrayList;
+import java.util.Calendar;
+import java.util.Date;
+import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
+import java.util.TimeZone;
 
 /**
  * Created by devashish on 5/9/14.
  */
-public class Channel implements Serializable {
+public class Channel extends JsonMarker {
 
+    private Map<String, String> metadata = new HashMap<>();
     private Integer key;
     private String clientGroupId;
     private String name;
@@ -24,12 +30,15 @@
     private String localImageUri;
     private Conversation conversationPxy;
     private List<Contact> contacts = new ArrayList<Contact>();
+    private Long notificationAfterTime;
+    private Long deletedAtTime;
+
 
     public Channel() {
 
     }
 
-    public Channel(Integer key, String name, String adminKey, Short type,int unreadCount,String imageUrl) {
+    public Channel(Integer key, String name, String adminKey, Short type, int unreadCount, String imageUrl) {
         this.key = key;
         this.name = name;
         this.adminKey = adminKey;
@@ -136,8 +145,58 @@ public void setClientGroupId(String clientGroupId) {
         this.clientGroupId = clientGroupId;
     }
 
-    public boolean isBroadcastMessage(){
-        return type.equals(GroupType.BROADCAST.getValue());
+    public boolean isBroadcastMessage() {
+        return type.equals(GroupType.BROADCAST.getValue()) || type.equals(GroupType.BROADCAST_ONE_BY_ONE.getValue());
+    }
+
+    public Long getDeletedAtTime() {
+        return deletedAtTime;
+    }
+
+    public void setDeletedAtTime(Long deletedAtTime) {
+        this.deletedAtTime = deletedAtTime;
+    }
+
+    public Long getNotificationAfterTime() {
+        return notificationAfterTime;
+    }
+
+    public void setNotificationAfterTime(Long notificationAfterTime) {
+        this.notificationAfterTime = notificationAfterTime;
+    }
+
+    public boolean isNotificationMuted() {
+        Date date = Calendar.getInstance(TimeZone.getTimeZone("UTC")).getTime();
+        return (getNotificationAfterTime() != null) && (getNotificationAfterTime() - date.getTime() > 0);
+
+    }
+
+    public boolean isDeleted() {
+        return (deletedAtTime != null && deletedAtTime > 0);
+    }
+
+    public Map<String, String> getMetadata() {
+        return metadata;
+    }
+
+    public void setMetadata(Map<String, String> metadata) {
+        this.metadata = metadata;
+    }
+
+    @Override
+    public String toString() {
+        return "Channel{" +
+                "key=" + key +
+                ", name='" + name + '\'' +
+                ", adminKey='" + adminKey + '\'' +
+                ", type=" + type +
+                ", unreadCount=" + unreadCount +
+                ", userCount=" + userCount +
+                ", imageUrl='" + imageUrl + '\'' +
+                ", localImageUri='" + localImageUri + '\'' +
+                ", conversationPxy=" + conversationPxy +
+                ", contacts=" + contacts +
+                '}';
     }
 
     public enum GroupType {
@@ -150,6 +209,7 @@ public boolean isBroadcastMessage(){
         BROADCAST(5),
         OPEN(6),
         GROUPOFTWO(7),
+        CONTACT_GROUP(9),
         BROADCAST_ONE_BY_ONE(106);
 
         private Integer value;
@@ -162,20 +222,4 @@ public Short getValue() {
             return value.shortValue();
         }
     }
-
-    @Override
-    public String toString() {
-        return "Channel{" +
-                "key=" + key +
-                ", name='" + name + '\'' +
-                ", adminKey='" + adminKey + '\'' +
-                ", type=" + type +
-                ", unreadCount=" + unreadCount +
-                ", userCount=" + userCount +
-                ", imageUrl='" + imageUrl + '\'' +
-                ", localImageUri='" + localImageUri + '\'' +
-                ", conversationPxy=" + conversationPxy +
-                ", contacts=" + contacts +
-                '}';
-    }
 }
diff --git a/mobicommons/src/main/java/com/applozic/mobicommons/people/channel/ChannelMetadata.java b/mobicommons/src/main/java/com/applozic/mobicommons/people/channel/ChannelMetadata.java
index 60563284..ec2f4ba5 100644
--- a/mobicommons/src/main/java/com/applozic/mobicommons/people/channel/ChannelMetadata.java
+++ b/mobicommons/src/main/java/com/applozic/mobicommons/people/channel/ChannelMetadata.java
@@ -15,6 +15,7 @@
     public final static String GROUP_ICON_CHANGE_MESSAGE = "GROUP_ICON_CHANGE_MESSAGE";
     public final static String GROUP_LEFT_MESSAGE = "GROUP_LEFT_MESSAGE";
     public final static String DELETED_GROUP_MESSAGE = "DELETED_GROUP_MESSAGE";
+    public final static String HIDE_METADATA_NOTIFICATION = "HIDE";
 
     public static final String ADMIN_NAME = ":adminName";
     public static final String GROUP_NAME = ":groupName";
@@ -28,6 +29,8 @@
     private String groupIconChangeMessage;
     private String groupLeftMessage;
     private String deletedGroupMessage;
+    private boolean hideMetaDataNotification;
+
 
     public String getCreateGroupMessage() {
         return createGroupMessage;
@@ -93,4 +96,11 @@ public void setDeletedGroupMessage(String deletedGroupMessage) {
         this.deletedGroupMessage = deletedGroupMessage;
     }
 
+    public boolean getHideMetaDataNotification() {
+        return hideMetaDataNotification;
+    }
+
+    public void setHideMetaDataNotification(boolean hideMetaDataNotification) {
+        this.hideMetaDataNotification = hideMetaDataNotification;
+    }
 }
diff --git a/mobicommons/src/main/java/com/applozic/mobicommons/people/channel/ChannelUserMapper.java b/mobicommons/src/main/java/com/applozic/mobicommons/people/channel/ChannelUserMapper.java
index e0f3b2b3..6eb65e1e 100755
--- a/mobicommons/src/main/java/com/applozic/mobicommons/people/channel/ChannelUserMapper.java
+++ b/mobicommons/src/main/java/com/applozic/mobicommons/people/channel/ChannelUserMapper.java
@@ -1,11 +1,13 @@
 package com.applozic.mobicommons.people.channel;
 
+import com.applozic.mobicommons.json.JsonMarker;
+
 import java.io.Serializable;
 
 /**
  * Created by sunil on 28/12/15.
  */
-public class ChannelUserMapper implements Serializable {
+public class ChannelUserMapper extends JsonMarker {
 
     private Integer key;
     private String userKey;
diff --git a/mobicommons/src/main/java/com/applozic/mobicommons/people/channel/ChannelUtils.java b/mobicommons/src/main/java/com/applozic/mobicommons/people/channel/ChannelUtils.java
index dc06ed7d..c3ccc596 100755
--- a/mobicommons/src/main/java/com/applozic/mobicommons/people/channel/ChannelUtils.java
+++ b/mobicommons/src/main/java/com/applozic/mobicommons/people/channel/ChannelUtils.java
@@ -4,6 +4,7 @@
 import android.database.Cursor;
 import android.provider.ContactsContract;
 import android.text.TextUtils;
+import android.util.Log;
 
 import com.applozic.mobicommons.people.contact.ContactUtils;
 
@@ -57,11 +58,32 @@ public static String getChannelTitleName(Channel channel, String loggedInUserId)
         return "";
     }
 
-    public static boolean isAdminUserId(String userId,Channel channel){
-        if(channel != null &&  !TextUtils.isEmpty(channel.getAdminKey()) && !TextUtils.isEmpty(userId)){
+    public static boolean isAdminUserId(String userId, Channel channel) {
+        if (channel != null && !TextUtils.isEmpty(channel.getAdminKey()) && !TextUtils.isEmpty(userId)) {
             return channel.getAdminKey().equals(userId);
         }
         return false;
     }
 
+    public static String getWithUserId(Channel channel, String loggedInUserId) {
+        try {
+            if (Channel.GroupType.GROUPOFTWO.getValue().equals(channel.getType())) {
+                String[] userIdSplit = new String[2];
+                if (!TextUtils.isEmpty(channel.getClientGroupId())) {
+                    userIdSplit = channel.getClientGroupId().split(":");
+                    String userId1 = userIdSplit[1];
+                    String userId2 = userIdSplit[2];
+                    if (!loggedInUserId.equals(userId2)) {
+                        return userId2;
+                    } else if (!loggedInUserId.equals(userId1)) {
+                        return userId1;
+                    }
+                }
+            }
+        } catch (Exception e) {
+            Log.i("ChannelUtils", "Got exception in Group of two");
+        }
+        return "";
+    }
+
 }
diff --git a/mobicommons/src/main/java/com/applozic/mobicommons/people/channel/Conversation.java b/mobicommons/src/main/java/com/applozic/mobicommons/people/channel/Conversation.java
index b0cc2591..cfe27a54 100755
--- a/mobicommons/src/main/java/com/applozic/mobicommons/people/channel/Conversation.java
+++ b/mobicommons/src/main/java/com/applozic/mobicommons/people/channel/Conversation.java
@@ -26,6 +26,7 @@
     private String applicationKey;
     private Integer groupId;
     private ArrayList fallBackTemplatesList;
+    private String topicLocalImageUri;
 
     public Conversation() {
 
@@ -112,24 +113,33 @@ public void setClosed(boolean closed) {
         this.closed = closed;
     }
 
-    public void setSenderSmsFormat(String userId, String format){
-        setSmsFormat(userId,format);
+    public void setSenderSmsFormat(String userId, String format) {
+        setSmsFormat(userId, format);
     }
 
-    public void setReceiverSmsFormat(String userId, String format){
-        setSmsFormat(userId,format);
+    public void setReceiverSmsFormat(String userId, String format) {
+        setSmsFormat(userId, format);
+    }
+
+    public String getTopicLocalImageUri() {
+        return topicLocalImageUri;
+    }
+
+    public void setTopicLocalImageUri(String topicLocalImageUri) {
+        this.topicLocalImageUri = topicLocalImageUri;
     }
 
     public void setSmsFormat(String userId, String smsFormat) {
 
-        if(this.fallBackTemplatesList ==null) {
+        if (this.fallBackTemplatesList == null) {
             this.fallBackTemplatesList = new ArrayList();
         }
-        HashMap<String, String> map =  new HashMap<String,String>();
+        HashMap<String, String> map = new HashMap<String, String>();
         map.put(USER_ID_KEY, userId);
-        map.put(FALL_BACK_TEMPLATE_KEY, smsFormat );
+        map.put(FALL_BACK_TEMPLATE_KEY, smsFormat);
         fallBackTemplatesList.add(map);
     }
+
     @Override
     public String toString() {
         return "Conversation{" +
diff --git a/mobicommons/src/main/java/com/applozic/mobicommons/people/contact/Contact.java b/mobicommons/src/main/java/com/applozic/mobicommons/people/contact/Contact.java
index 0ec12a42..3572a74b 100755
--- a/mobicommons/src/main/java/com/applozic/mobicommons/people/contact/Contact.java
+++ b/mobicommons/src/main/java/com/applozic/mobicommons/people/contact/Contact.java
@@ -4,6 +4,7 @@
 import android.telephony.TelephonyManager;
 import android.text.TextUtils;
 
+import com.applozic.mobicommons.json.JsonMarker;
 import com.google.gson.annotations.Expose;
 import com.google.gson.annotations.SerializedName;
 
@@ -15,7 +16,7 @@
 /**
  * @author devashish
  */
-public class Contact implements Serializable {
+public class Contact extends JsonMarker {
 
     public static final String R_DRAWABLE = "R.drawable";
     @Expose
@@ -53,6 +54,9 @@
     private boolean blocked;
     private boolean blockedBy;
     private String status;
+    private short contactType;
+    private Short userTypeId;
+    private Long deletedAtTime;
 
     public Contact() {
 
@@ -84,6 +88,14 @@ public Contact(Context context, String userId) {
         this.processContactNumbers(context);
     }
 
+    public short getContactType() {
+        return contactType;
+    }
+
+    public void setContactType(short contactType) {
+        this.contactType = contactType;
+    }
+
     public void processContactNumbers(Context context) {
         TelephonyManager telephonyManager = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);
         String countryCode = telephonyManager.getSimCountryIso().toUpperCase();
@@ -274,6 +286,18 @@ public void setStatus(String status) {
         this.status = status;
     }
 
+    public Long getDeletedAtTime() {
+        return deletedAtTime == null ? 0 : deletedAtTime;
+    }
+
+    public void setDeletedAtTime(Long deletedAtTime) {
+        this.deletedAtTime = deletedAtTime;
+    }
+
+    public boolean isDeleted() {
+        return (deletedAtTime != null && deletedAtTime > 0);
+    }
+
     public void processFullName(String fullName) {
         this.fullName = fullName;
         if (fullName != null) {
@@ -297,29 +321,15 @@ public void processFullName(String fullName) {
         }
     }
 
-    @Override
-    public String toString() {
-        return "Contact{" +
-                "firstName='" + firstName + '\'' +
-                ", middleName='" + middleName + '\'' +
-                ", lastName='" + lastName + '\'' +
-                ", emailIds=" + emailIds +
-                ", contactNumbers=" + contactNumbers +
-                ", phoneNumbers=" + phoneNumbers +
-                ", contactNumber='" + contactNumber + '\'' +
-                ", formattedContactNumber='" + formattedContactNumber + '\'' +
-                ", contactId=" + contactId +
-                ", fullName='" + fullName + '\'' +
-                ", userId='" + userId + '\'' +
-                ", imageURL='" + imageURL + '\'' +
-                ", localImageUrl='" + localImageUrl + '\'' +
-                ", emailId='" + emailId + '\'' +
-                ", applicationId='" + applicationId + '\'' +
-                ", connected='" + connected + '\'' +
-                ", lastSeenAtTime='" + lastSeenAtTime + '\'' +
-                '}';
+    public Short getUserTypeId() {
+        return userTypeId;
+    }
+
+    public void setUserTypeId(Short userTypeId) {
+        this.userTypeId = userTypeId;
     }
 
+
     public String getUserId() {
         return userId;
     }
@@ -392,4 +402,35 @@ public void setBlockedBy(boolean blockedBy) {
     public boolean isOnline() {
         return !isBlocked() && !isBlockedBy() && isConnected();
     }
+
+    @Override
+    public String toString() {
+        return "Contact{" +
+                "firstName='" + firstName + '\'' +
+                ", middleName='" + middleName + '\'' +
+                ", lastName='" + lastName + '\'' +
+                ", emailIds=" + emailIds +
+                ", contactNumbers=" + contactNumbers +
+                ", phoneNumbers=" + phoneNumbers +
+                ", contactNumber='" + contactNumber + '\'' +
+                ", formattedContactNumber='" + formattedContactNumber + '\'' +
+                ", contactId=" + contactId +
+                ", fullName='" + fullName + '\'' +
+                ", userId='" + userId + '\'' +
+                ", imageURL='" + imageURL + '\'' +
+                ", localImageUrl='" + localImageUrl + '\'' +
+                ", emailId='" + emailId + '\'' +
+                ", applicationId='" + applicationId + '\'' +
+                ", connected=" + connected +
+                ", lastSeenAtTime=" + lastSeenAtTime +
+                ", checked=" + checked +
+                ", unreadCount=" + unreadCount +
+                ", blocked=" + blocked +
+                ", blockedBy=" + blockedBy +
+                ", status='" + status + '\'' +
+                ", contactType=" + contactType +
+                ", userTypeId=" + userTypeId +
+                ", deletedAtTime=" + deletedAtTime +
+                '}';
+    }
 }
diff --git a/mobicommons/src/main/java/net/mobitexter/mobiframework/commons/core/utils/SntpClient.java b/mobicommons/src/main/java/net/mobitexter/mobiframework/commons/core/utils/SntpClient.java
deleted file mode 100755
index 69f0e063..00000000
--- a/mobicommons/src/main/java/net/mobitexter/mobiframework/commons/core/utils/SntpClient.java
+++ /dev/null
@@ -1,210 +0,0 @@
-/*
- * Copyright (C) 2008 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.mobitexter.mobiframework.commons.core.utils;
-
-import android.os.SystemClock;
-import android.util.Log;
-
-import java.net.DatagramPacket;
-import java.net.DatagramSocket;
-import java.net.InetAddress;
-
-/**
- * <p>
- * Simple SNTP client class for retrieving network time.
- * <p>
- * Sample usage:
- * <pre>SntpClient client = new SntpClient();
- * if (client.requestTime("time.foo.com")) {
- *     long now = client.getNtpTime() + SystemClock.elapsedRealtime() - client.getNtpTimeReference();
- * }
- * </pre>
- */
-public class SntpClient {
-    private static final String TAG = "SntpClient";
-
-    private static final int REFERENCE_TIME_OFFSET = 16;
-    private static final int ORIGINATE_TIME_OFFSET = 24;
-    private static final int RECEIVE_TIME_OFFSET = 32;
-    private static final int TRANSMIT_TIME_OFFSET = 40;
-    private static final int NTP_PACKET_SIZE = 48;
-
-    private static final int NTP_PORT = 123;
-    private static final int NTP_MODE_CLIENT = 3;
-    private static final int NTP_VERSION = 3;
-
-    // Number of seconds between Jan 1, 1900 and Jan 1, 1970
-    // 70 years plus 17 leap days
-    private static final long OFFSET_1900_TO_1970 = ((365L * 70L) + 17L) * 24L * 60L * 60L;
-
-    // system time computed from NTP server response
-    private long mNtpTime;
-
-    // value of SystemClock.elapsedRealtime() corresponding to mNtpTime
-    private long mNtpTimeReference;
-
-    // round trip time in milliseconds
-    private long mRoundTripTime;
-
-    /**
-     * Sends an SNTP request to the given host and processes the response.
-     *
-     * @param host    host name of the server.
-     * @param timeout network timeout in milliseconds.
-     * @return true if the transaction was successful.
-     */
-    public boolean requestTime(String host, int timeout) {
-        DatagramSocket socket = null;
-        try {
-            socket = new DatagramSocket();
-            socket.setSoTimeout(timeout);
-            InetAddress address = InetAddress.getByName(host);
-            byte[] buffer = new byte[NTP_PACKET_SIZE];
-            DatagramPacket request = new DatagramPacket(buffer, buffer.length, address, NTP_PORT);
-
-            // set mode = 3 (client) and version = 3
-            // mode is in low 3 bits of first byte
-            // version is in bits 3-5 of first byte
-            buffer[0] = NTP_MODE_CLIENT | (NTP_VERSION << 3);
-
-            // get current time and write it to the request packet
-            long requestTime = System.currentTimeMillis();
-            long requestTicks = SystemClock.elapsedRealtime();
-            writeTimeStamp(buffer, TRANSMIT_TIME_OFFSET, requestTime);
-
-            socket.send(request);
-
-            // read the response
-            DatagramPacket response = new DatagramPacket(buffer, buffer.length);
-            socket.receive(response);
-            long responseTicks = SystemClock.elapsedRealtime();
-            long responseTime = requestTime + (responseTicks - requestTicks);
-
-            // extract the results
-            long originateTime = readTimeStamp(buffer, ORIGINATE_TIME_OFFSET);
-            long receiveTime = readTimeStamp(buffer, RECEIVE_TIME_OFFSET);
-            long transmitTime = readTimeStamp(buffer, TRANSMIT_TIME_OFFSET);
-            long roundTripTime = responseTicks - requestTicks - (transmitTime - receiveTime);
-            // receiveTime = originateTime + transit + skew
-            // responseTime = transmitTime + transit - skew
-            // clockOffset = ((receiveTime - originateTime) + (transmitTime - responseTime))/2
-            //             = ((originateTime + transit + skew - originateTime) +
-            //                (transmitTime - (transmitTime + transit - skew)))/2
-            //             = ((transit + skew) + (transmitTime - transmitTime - transit + skew))/2
-            //             = (transit + skew - transit + skew)/2
-            //             = (2 * skew)/2 = skew
-            long clockOffset = ((receiveTime - originateTime) + (transmitTime - responseTime)) / 2;
-            // if (false) Log.d(TAG, "round trip: " + roundTripTime + " ms");
-            // if (false) Log.d(TAG, "clock offset: " + clockOffset + " ms");
-
-            // save our results - use the times on this side of the network latency
-            // (response rather than request time)
-            mNtpTime = responseTime + clockOffset;
-            mNtpTimeReference = responseTicks;
-            mRoundTripTime = roundTripTime;
-        } catch (Exception e) {
-            if (false) Log.d(TAG, "request time failed: " + e);
-            return false;
-        } finally {
-            if (socket != null) {
-                socket.close();
-            }
-        }
-
-        return true;
-    }
-
-    /**
-     * Returns the time computed from the NTP transaction.
-     *
-     * @return time value computed from NTP server response.
-     */
-    public long getNtpTime() {
-        return mNtpTime;
-    }
-
-    /**
-     * Returns the reference clock value (value of SystemClock.elapsedRealtime())
-     * corresponding to the NTP time.
-     *
-     * @return reference clock corresponding to the NTP time.
-     */
-    public long getNtpTimeReference() {
-        return mNtpTimeReference;
-    }
-
-    /**
-     * Returns the round trip time of the NTP transaction
-     *
-     * @return round trip time in milliseconds.
-     */
-    public long getRoundTripTime() {
-        return mRoundTripTime;
-    }
-
-    /**
-     * Reads an unsigned 32 bit big endian number from the given offset in the buffer.
-     */
-    private long read32(byte[] buffer, int offset) {
-        byte b0 = buffer[offset];
-        byte b1 = buffer[offset + 1];
-        byte b2 = buffer[offset + 2];
-        byte b3 = buffer[offset + 3];
-
-        // convert signed bytes to unsigned values
-        int i0 = ((b0 & 0x80) == 0x80 ? (b0 & 0x7F) + 0x80 : b0);
-        int i1 = ((b1 & 0x80) == 0x80 ? (b1 & 0x7F) + 0x80 : b1);
-        int i2 = ((b2 & 0x80) == 0x80 ? (b2 & 0x7F) + 0x80 : b2);
-        int i3 = ((b3 & 0x80) == 0x80 ? (b3 & 0x7F) + 0x80 : b3);
-
-        return ((long) i0 << 24) + ((long) i1 << 16) + ((long) i2 << 8) + (long) i3;
-    }
-
-    /**
-     * Reads the NTP time stamp at the given offset in the buffer and returns
-     * it as a system time (milliseconds since January 1, 1970).
-     */
-    private long readTimeStamp(byte[] buffer, int offset) {
-        long seconds = read32(buffer, offset);
-        long fraction = read32(buffer, offset + 4);
-        return ((seconds - OFFSET_1900_TO_1970) * 1000) + ((fraction * 1000L) / 0x100000000L);
-    }
-
-    /**
-     * Writes system time (milliseconds since January 1, 1970) as an NTP time stamp
-     * at the given offset in the buffer.
-     */
-    private void writeTimeStamp(byte[] buffer, int offset, long time) {
-        long seconds = time / 1000L;
-        long milliseconds = time - seconds * 1000L;
-        seconds += OFFSET_1900_TO_1970;
-
-        // write seconds in big endian format
-        buffer[offset++] = (byte) (seconds >> 24);
-        buffer[offset++] = (byte) (seconds >> 16);
-        buffer[offset++] = (byte) (seconds >> 8);
-        buffer[offset++] = (byte) (seconds >> 0);
-
-        long fraction = milliseconds * 0x100000000L / 1000L;
-        // write fraction in big endian format
-        buffer[offset++] = (byte) (fraction >> 24);
-        buffer[offset++] = (byte) (fraction >> 16);
-        buffer[offset++] = (byte) (fraction >> 8);
-        // low order bits should be random data
-        buffer[offset++] = (byte) (Math.random() * 255.0);
-    }
-}
\ No newline at end of file
